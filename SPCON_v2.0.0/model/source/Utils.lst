%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Utils.f90
Compiled : 10/22/10  04:41:16
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmda -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Utils.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Utils.f90
Date     : 10/22/2010  04:41:32


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,nomodinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_16174/Utils.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.                !
    2.                !  $Author: pkubota $
    3.                !  $Date: 2009/04/07 19:52:01 $
    4.                !  $Revision: 1.15 $
    5.                !
    6.                MODULE Utils
    7.                
    8.                  ! CreateAssocLegFunc
    9.                  ! DestroyAssocLegFunc
   10.                  !
   11.                  ! DumpAssocLegFunc   ------------------| DumpMatrix(interface)
   12.                  !
   13.                  ! CreateGaussQuad    ------------------| CreateLegPol
   14.                  !
   15.                  ! CreateGridValues
   16.                  !
   17.                  ! DestroyGaussQuad   ------------------| DestroyLegPol
   18.                  !
   19.                  ! DumpGaussQuad      ------------------| DumpMatrix(interface)
   20.                  !
   21.                  ! iminv
   22.                  !
   23.                  ! Rg                 ------------------| Balanc
   24.                  !                                  |
   25.                  !                                  | Orthes
   26.                  !                                  |
   27.                  !                                  | Ortran
   28.                  !                                  |
   29.                  !                                  | Hqr2    ------|Hqr3
   30.                  !                                  |
   31.                  !                                  | Balbak
   32.                  !                                  |
   33.                  !                                  | Znorma
   34.                  !
   35.                  ! Tql2
   36.                  ! Tred2
   37.                  ! tmstmp2
   38.                  ! InitTimeStamp
   39.                  !
   40.                  ! TimeStamp  --------------------------| caldat
   41.                  !
   42.                  ! IBJBtoIJ_R (Interface)
   43.                  ! IJtoIBJB_R (Interface)
   44.                  ! IBJBtoIJ_I (Interface)
   45.                  ! IJtoIBJB_I (Interface)
   46.                  !
   47.                  ! SplineIJtoIBJB_R2D (Interface) ------| CyclicCubicSpline
   48.                  !
   49.                  ! SplineIBJBtoIJ_R2D (Interface) ------| CyclicCubicSpline
   50.                  !
   51.                  ! LinearIJtoIBJB_R2D (Interface) ------| CyclicLinear
   52.                  !
   53.                  ! LinearIBJBtoIJ_R2D (Interface) ------| CyclicLinear
   54.                  !
   55.                  ! NearestIJtoIBJB_I2D (Interface)------| CyclicNearest_i
   56.                  !
   57.                  ! NearestIJtoIBJB_R2D (Interface)------| CyclicNearest_r
   58.                  !
   59.                  ! NearestIBJBtoIJ_I2D (Interface)------| CyclicNearest_i
   60.                  !
   61.                  ! NearestIBJBtoIJ_R2D (Interface)------| CyclicNearest_r
   62.                  !
   63.                  ! FreqBoxIJtoIBJB_I2D (Interface)------| CyclicFreqBox_i
   64.                  !
   65.                  ! FreqBoxIJtoIBJB_R2D (Interface)------| CyclicFreqBox_r
   66.                  !
   67.                  ! SeaMaskIJtoIBJB_R2D (Interface)------| CyclicSeaMask_r
   68.                  !
   69.                  ! SeaMaskIBJBtoIJ_R2D (Interface)------| CyclicSeaMask_r
   70.                  !
   71.                  ! AveBoxIJtoIBJB_R2D (Interface) ------| CyclicAveBox_r
   72.                  !
   73.                  ! AveBoxIBJBtoIJ_R2D (Interface) ------| CyclicAveBox_r
   74.                  !
   75.                  ! vfirec     --------------------------| vfinit
   76.                  !
   77.                  !
   78.                  !-------------------------------------------------------------------
   79.                  !  ASSOCIATED LEGENDRE FUNCTIONS
   80.                  !  Module computes and stores Associated Legendre
   81.                  !  Functions and Epslon.
   82.                  !
   83.                  !  Module exports three routines:
   84.                  !     CreateAssocLegFunc  initializes module and compute functions;
   85.                  !     DestroyAssocLegFunc destroys module;
   86.                  !     DumpAssocLegFunc    Dumps module info
   87.                  !
   88.                  !  Module usage:
   89.                  !  CreateAssocLegFunc should be invoked once, prior to any other
   90.                  !  module routine. It computes and hides the function values.
   91.                  !  DestroyAssocLegFunc destroys all internal info.
   92.                  !
   93.                  !  Module use values exported by Sizes and procedures from Auxiliary
   94.                
   95.                
   96.                
   97.                  USE Sizes, ONLY:  &
   98.                       mnMax,       &
   99.                       mnMap,       &
  100.                       mMax,        &
  101.                       nMax,        &
  102.                       nExtMax,     &
  103.                       mnExtMax,    &
  104.                       mymnExtMax,  &
  105.                       iMax,        &
  106.                       jMax,        &
  107.                       kMax,        &
  108.                       jMaxHalf,    &
  109.                       jbMax,       &
  110.                       ibMax,       &
  111.                       ibPerIJ,     &
  112.                       jbPerIJ,     &
  113.                       iPerIJB,     &
  114.                       jPerIJB,     &
  115.                       ibMaxPerJB,  &
  116.                       iMaxPerJ,    &
  117.                       lm2m,        &
  118.                       mExtMap,     &
  119.                       nExtMap,     &
  120.                       mymMax,      &
  121.                       mymnExtMap,  &
  122.                       mymExtMap,   &
  123.                       mynExtMap,   &
  124.                       myfirstlat,  &
  125.                       myfirstlon,  &
  126.                       mylastlon,   &
  127.                       mylastlat,   &
  128.                       mnExtMap
  129.                
  130.                  USE Constants, ONLY : &
  131.                       i8,         &
  132.                       r8,         &
  133.                       pai,        &
  134.                       twomg,      &
  135.                       er,         &
  136.                       r16
  137.                
  138.                  USE Options, ONLY: &
  139.                      reducedGrid, nfprt, nscalars, fNameGauss
  140.                
  141.                  USE IOLowLevel, ONLY : &
  142.                      ReadGauss,         &
  143.                      WriteGauss
  144.                
  145.                  USE Parallelism, ONLY: &
  146.                       myId, &
  147.                       MsgOne, &
  148.                       FatalError
  149.                
  150.                  IMPLICIT NONE
  151.                
  152.                  PRIVATE
  153.                
  154.                  !
  155.                  !  LEGANDRE POLINOMIAL AND ITS ROOTS
  156.                  !
  157.                  !  Module exports four routines:
  158.                  !     CreateLegPol  initializes module;
  159.                  !     DestroyLegPol destroys module;
  160.                  !     LegPol        computes polinomial
  161.                  !     LegPolRoots   computes roots of even degree Legandre Pol
  162.                  !
  163.                  !  Module does not export (or require) any data value.
  164.                  !
  165.                
  166.                
  167.                  PUBLIC :: CreateLegPol
  168.                  PUBLIC :: DestroyLegPol
  169.                  PUBLIC :: LegPol
  170.                  PUBLIC :: LegPolRootsandWeights
  171.                  PUBLIC :: CreateGridValues
  172.                  PUBLIC :: CreateGaussQuad
  173.                  PUBLIC :: DestroyGaussQuad
  174.                  PUBLIC :: DumpGaussQuad
  175.                  PUBLIC :: GaussColat
  176.                  PUBLIC :: SinGaussColat
  177.                  PUBLIC :: CosGaussColat
  178.                  PUBLIC :: AuxGaussColat
  179.                  PUBLIC :: GaussPoints
  180.                  PUBLIC :: GaussWeights
  181.                  PUBLIC :: colrad
  182.                  PUBLIC :: colrad2D
  183.                  PUBLIC :: cos2lat
  184.                  PUBLIC :: ercossin
  185.                  PUBLIC :: fcor
  186.                  PUBLIC :: cosiv
  187.                  PUBLIC :: cel_area
  188.                  PUBLIC :: total_mass
  189.                  PUBLIC :: massconsrv
  190.                  PUBLIC :: allpolynomials
  191.                  PUBLIC :: fconsrv
  192.                  PUBLIC :: totmas
  193.                  PUBLIC :: coslatj
  194.                  PUBLIC :: sinlatj
  195.                  PUBLIC :: coslat
  196.                  PUBLIC :: sinlat
  197.                  PUBLIC :: coslon
  198.                  PUBLIC :: sinlon
  199.                  PUBLIC :: longit
  200.                  PUBLIC :: rcl
  201.                  PUBLIC :: rcs2
  202.                  PUBLIC :: lonrad
  203.                  PUBLIC :: lati
  204.                  PUBLIC :: long
  205.                  PUBLIC :: cosz
  206.                  PUBLIC :: cos2d
  207.                  PUBLIC :: vmax
  208.                  PUBLIC :: vaux
  209.                  PUBLIC :: vmaxVert
  210.                  PUBLIC :: NoBankConflict
  211.                  PUBLIC :: DumpMatrix
  212.                  PUBLIC :: CreateAssocLegFunc
  213.                  PUBLIC :: DestroyAssocLegFunc
  214.                  PUBLIC :: DumpAssocLegFunc
  215.                  PUBLIC :: Reset_Epslon_To_Local
  216.                  PUBLIC :: Epslon
  217.                  PUBLIC :: LegFuncS2F
  218.                  PUBLIC :: Iminv
  219.                  PUBLIC :: Rg
  220.                  PUBLIC :: Tql2
  221.                  PUBLIC :: Tred2
  222.                  PUBLIC :: tmstmp2
  223.                  PUBLIC :: InitTimeStamp
  224.                  PUBLIC :: TimeStamp
  225.                  PUBLIC :: IBJBtoIJ
  226.                  PUBLIC :: IJtoIBJB
  227.                  PUBLIC :: SplineIJtoIBJB
  228.                  PUBLIC :: SplineIBJBtoIJ
  229.                  PUBLIC :: LinearIJtoIBJB
  230.                  PUBLIC :: LinearIBJBtoIJ
  231.                  PUBLIC :: NearestIBJBtoIJ
  232.                  PUBLIC :: NearestIJtoIBJB
  233.                  PUBLIC :: FreqBoxIJtoIBJB
  234.                  PUBLIC :: SeaMaskIBJBtoIJ
  235.                  PUBLIC :: SeaMaskIJtoIBJB
  236.                  PUBLIC :: AveBoxIBJBtoIJ
  237.                  PUBLIC :: AveBoxIJtoIBJB
  238.                  PUBLIC :: CyclicNearest_r
  239.                  PUBLIC :: CyclicLinear
  240.                
  241.                  PUBLIC :: vfirec
  242.                
  243.                  INTERFACE Tql2
  244.                     MODULE PROCEDURE Tql2_I, Tql2_I8
  245.                  END INTERFACE
  246.                
  247.                  INTERFACE IBJBtoIJ
  248.                     MODULE PROCEDURE IBJBtoIJ_R, IBJBtoIJ_I
  249.                  END INTERFACE
  250.                
  251.                  INTERFACE IJtoIBJB
  252.                     MODULE PROCEDURE &
  253.                          IJtoIBJB_R, IJtoIBJB_I, &
  254.                          IJtoIBJB3_R, IJtoIBJB3_I
  255.                  END INTERFACE
  256.                
  257.                  INTERFACE SplineIBJBtoIJ
  258.                     MODULE PROCEDURE SplineIBJBtoIJ_R2D
  259.                  END INTERFACE
  260.                
  261.                  INTERFACE SplineIJtoIBJB
  262.                     MODULE PROCEDURE SplineIJtoIBJB_R2D
  263.                  END INTERFACE
  264.                
  265.                  INTERFACE LinearIBJBtoIJ
  266.                     MODULE PROCEDURE LinearIBJBtoIJ_R2D
  267.                  END INTERFACE
  268.                
  269.                  INTERFACE LinearIJtoIBJB
  270.                     MODULE PROCEDURE LinearIJtoIBJB_R2D
  271.                  END INTERFACE
  272.                
  273.                  INTERFACE NearestIBJBtoIJ
  274.                     MODULE PROCEDURE NearestIBJBtoIJ_I2D, NearestIBJBtoIJ_R2D
  275.                  END INTERFACE
  276.                
  277.                  INTERFACE NearestIJtoIBJB
  278.                     MODULE PROCEDURE &
  279.                          NearestIJtoIBJB_I2D, NearestIJtoIBJB_R2D, &
  280.                          NearestIJtoIBJB_I3D, NearestIJtoIBJB_R3D
  281.                  END INTERFACE
  282.                
  283.                  INTERFACE SeaMaskIBJBtoIJ
  284.                     MODULE PROCEDURE  SeaMaskIBJBtoIJ_R2D
  285.                  END INTERFACE
  286.                
  287.                  INTERFACE SeaMaskIJtoIBJB
  288.                     MODULE PROCEDURE SeaMaskIJtoIBJB_R2D
  289.                  END INTERFACE
  290.                
  291.                  INTERFACE FreqBoxIJtoIBJB
  292.                     MODULE PROCEDURE FreqBoxIJtoIBJB_I2D, FreqBoxIJtoIBJB_R2D
  293.                  END INTERFACE
  294.                
  295.                  INTERFACE AveBoxIBJBtoIJ
  296.                     MODULE PROCEDURE AveBoxIBJBtoIJ_R2D
  297.                  END INTERFACE
  298.                
  299.                  INTERFACE AveBoxIJtoIBJB
  300.                     MODULE PROCEDURE AveBoxIJtoIBJB_R2D
  301.                  END INTERFACE
  302.                
  303.                  INTERFACE NoBankConflict
  304.                     MODULE PROCEDURE NoBankConflictS, NoBankConflictV
  305.                  END INTERFACE
  306.                  INTERFACE DumpMatrix
  307.                     MODULE PROCEDURE &
  308.                          DumpMatrixReal1D, DumpMatrixReal2D, DumpMatrixReal3D, &
  309.                          DumpMatrixInteger1D, DumpMatrixInteger2D, DumpMatrixInteger3D
  310.                  END INTERFACE
  311.                
  312.                
  313.                  !  Module usage:
  314.                  !     CreateGaussQuad  should be invoked once, before any other routine
  315.                  !                      of this module, to set up maximum degree
  316.                  !                      of base functions (say, n);
  317.                  !                      it computes and hides n Gaussian Points and Weights
  318.                  !                      over interval [-1:1];
  319.                  !                      it also creates and uses Mod LegPol
  320.                  !     DestroyGaussQuad destrois hidden data structure and leaves module ready
  321.                  !                      for re-start, if desired, with another maximum degree.
  322.                
  323.                  REAL(KIND=r8), ALLOCATABLE :: GaussColat(:)
  324.                  REAL(KIND=r8), ALLOCATABLE :: SinGaussColat(:)
  325.                  REAL(KIND=r8), ALLOCATABLE :: CosGaussColat(:)
  326.                  REAL(KIND=r8), ALLOCATABLE :: AuxGaussColat(:)
  327.                  REAL(KIND=r8), ALLOCATABLE :: GaussPoints(:)
  328.                  REAL(KIND=r8), ALLOCATABLE :: GaussWeights(:)
  329.                  REAL(KIND=r8), ALLOCATABLE :: auxpol(:,:)
  330.                  REAL(KIND=r8), ALLOCATABLE :: colrad(:)
  331.                  REAL(KIND=r8), ALLOCATABLE :: rcs2(:)
  332.                  REAL(KIND=r8), ALLOCATABLE :: colrad2D(:,:)
  333.                  REAL(KIND=r8), ALLOCATABLE :: cos2lat(:,:)
  334.                  REAL(KIND=r8), ALLOCATABLE :: ercossin(:,:)
  335.                  REAL(KIND=r8), ALLOCATABLE :: fcor(:,:)
  336.                  REAL(KIND=r8), ALLOCATABLE :: cosiv(:,:)
  337.                  REAL(KIND=r8), ALLOCATABLE :: cel_area(:)
  338.                  REAL(KIND=r8), ALLOCATABLE :: total_mass(:)
  339.                  REAL(KIND=r8), ALLOCATABLE :: massconsrv(:)
  340.                  REAL(KIND=r8), ALLOCATABLE :: fconsrv(:,:)
  341.                  REAL(KIND=r8), ALLOCATABLE :: totmas(:)
  342.                  REAL(KIND=r8), ALLOCATABLE :: coslatj(:)
  343.                  REAL(KIND=r8), ALLOCATABLE :: sinlatj(:)
  344.                  REAL(KIND=r8), ALLOCATABLE :: coslat(:,:)
  345.                  REAL(KIND=r8), ALLOCATABLE :: sinlat(:,:)
  346.                  REAL(KIND=r8), ALLOCATABLE :: coslon(:,:)
  347.                  REAL(KIND=r8), ALLOCATABLE :: sinlon(:,:)
  348.                  REAL(KIND=r8), ALLOCATABLE :: longit(:,:)
  349.                  REAL(KIND=r8), ALLOCATABLE :: rcl(:,:)
  350.                  REAL(KIND=r8), ALLOCATABLE :: lonrad(:,:)
  351.                  REAL(KIND=r8), ALLOCATABLE :: lati(:)
  352.                  REAL(KIND=r8), ALLOCATABLE :: long(:)
  353.                  REAL(KIND=r8), ALLOCATABLE :: cosz(:)
  354.                  REAL(KIND=r8), ALLOCATABLE :: cos2d(:,:)
  355.                  REAL(KIND=r8), ALLOCATABLE :: vmax(:,:)
  356.                  REAL(KIND=r8), ALLOCATABLE :: vaux(:)
  357.                  REAL(KIND=r8), ALLOCATABLE :: vmaxVert(:)
  358.                
  359.                  !  Module Hided Data:
  360.                  !     maxDegree is the degree of the base functions (n)
  361.                  !     created specifies if module was created or not
  362.                
  363.                
  364.                
  365.                  LOGICAL           :: created=.FALSE.
  366.                  LOGICAL           :: allpolynomials
  367.                  INTEGER           :: maxDegree=-1
  368.                
  369.                
  370.                
  371.                  REAL(KIND=r8),    ALLOCATABLE :: Epslon(:)
  372.                  REAL(KIND=r8),    ALLOCATABLE :: LegFuncS2F(:,:)
  373.                  REAL(KIND=r8),    ALLOCATABLE :: Square(:)
  374.                  REAL(KIND=r8),    ALLOCATABLE :: Den(:)
  375.                
  376.                
  377.                  !  Module Hidden data
  378.                
  379.                
  380.                  INTEGER                        :: nAuxPoly
  381.                  REAL(KIND=r16), ALLOCATABLE, DIMENSION(:) :: AuxPoly1, AuxPoly2
  382.                  LOGICAL, PARAMETER   :: dumpLocal=.FALSE.
  383.                
  384.                  ! Index mappings to/from diagonal from/to column for
  385.                  ! 'extended' spectral representations
  386.                
  387.                  INTEGER,  ALLOCATABLE :: ExtDiagPerCol(:)   ! diag=DiagPerCol(col )
  388.                  INTEGER,  ALLOCATABLE :: ExtColPerDiag(:)   ! col =ColPerDiag(diag)
  389.                
  390.                  ! date are always in the form yyyymmddhh ( year, month, day, hour). hour in
  391.                  ! is in 0-24 form
  392.                
  393.                  INTEGER, PRIVATE :: JulianDayInitIntegration
  394.                
  395.                CONTAINS
  396.                
  397.                
  398.                
  399.                  !CreateAssocLegFunc  should be invoked once, before any other routine,
  400.                  !                    to compute and store Associated Legendre Functions
  401.                  !                    at Gaussian Points for all
  402.                  !                    Legendre Orders and Degrees (defined at Sizes)
  403.                
  404.                
  405.                
  406.                  SUBROUTINE CreateAssocLegFunc(allpolynomials)
  407.                    LOGICAL, INTENT(IN) :: allpolynomials
  408.                    INTEGER:: m, n, mn, j, mp, np, jp, mglobalp
  409.                    CHARACTER(LEN=*), PARAMETER :: h="**(CreateAssocLegFunc)**"
  410.                
  411.                    IF (allpolynomials) THEN
  412.                      ALLOCATE (Epslon(mnExtMax))
  413.                      ALLOCATE (LegFuncS2F(jMaxHalf, mnExtMax))
  414.                     ELSE
  415.                      ALLOCATE (Epslon(mymnExtMax))
  416.                      ALLOCATE (LegFuncS2F(jMaxHalf, mymnExtMax))
  417.                      ALLOCATE (auxpol(jMaxHalf, mMax))
  418.                    ENDIF
  419.                
  420.                    ALLOCATE (Square(nExtMax))
  421.                    ALLOCATE (Den(nExtMax))
  422.  Vpr4--------<     DO n = 1, nExtMax
  423.  Vpr4                 Square(n) = REAL((n-1)*(n-1),r8)
  424.  Vpr4                 Den(n)    = 1.0_r8/(4.0_r8*Square(n) - 1.0_r8)
  425.  Vpr4-------->     END DO
  426.                    IF (allpolynomials) THEN
  427.  1-----------<        DO mn = 1, mnExtMax
  428.  1                       m = mExtMap(mn)
  429.  1                       n = nExtMap(mn)
  430.  1                       Epslon(mn) = SQRT((Square(n)-Square(m))*Den(n))
  431.  1----------->        END DO
  432.                     ELSE
  433.  1-----------<        DO mn = 1, mymnExtMax
  434.  1                       m = lm2m(mymExtMap(mn))
  435.  1                       n = mynExtMap(mn)
  436.  1                       Epslon(mn) = SQRT((Square(n)-Square(m))*Den(n))
  437.  1----------->        END DO
  438.                    END IF
  439.                
  440.                
  441.                    IF (allpolynomials) THEN
  442.  V----------<>        LegFuncS2F(1:jMaxHalf, mnExtMap(1,1)) = SQRT(0.5_r8)
  443.  br4---------<        DO m = 2, mMax
  444.  br4 Vbr4----<           DO j = 1, jMaxHalf
  445.  br4 Vbr4                   LegFuncS2F(j, mnExtMap(m,m)) =   &
  446.  br4 Vbr4                        SQRT(1.0_r8 + 0.5_r8/REAL(m-1,r8)) * &
  447.  br4 Vbr4                        SinGaussColat(j)          * &
  448.  br4 Vbr4                        LegFuncS2F(j, mnExtMap(m-1,m-1))
  449.  br4 Vbr4---->           END DO
  450.  br4--------->        END DO
  451.                       !$OMP PARALLEL DO PRIVATE(mp,jp)
  452.  M m---------<        DO mp = 1, mMax
  453.  m Vr4-------<           DO jp = 1, jMaxHalf
  454.  m Vr4                      LegFuncS2F(jp, mnExtMap(mp,mp+1)) =   &
  455.  m Vr4                           SQRT(1.0_r8 + 2.0_r8*REAL(mp,r8))     * &
  456.  m Vr4                           GaussPoints(jp)              * &
  457.  m Vr4                           LegFuncS2F(jp, mnExtMap(mp,mp))
  458.  m Vr4------->           END DO
  459.  m----------->        END DO
  460.                       !$OMP END PARALLEL DO
  461.                       !$OMP PARALLEL DO PRIVATE(mp,jp,np)
  462.  M m---------<        DO mp = 1, mMax
  463.  M m b-------<           DO np = mp+2, nExtMax
  464.  M m b Vbr4--<              DO jp = 1, jMaxHalf
  465.  M m b Vbr4                    LegFuncS2F(jp, mnExtMap(mp,np)) =          &
  466.  M m b Vbr4                         ( GaussPoints(jp)                 * &
  467.  M m b Vbr4                           LegFuncS2F(jp, mnExtMap(mp,np-1)) - &
  468.  M m b Vbr4                           Epslon(mnExtMap(mp,np-1))        * &
  469.  M m b Vbr4                           LegFuncS2F(jp, mnExtMap(mp,np-2))   &
  470.  M m b Vbr4                          ) / Epslon(mnExtMap(mp,np))
  471.  M m b Vbr4-->              END DO
  472.  M m b------->           END DO
  473.  M m--------->        END DO
  474.                       !$OMP END PARALLEL DO
  475.  I                    CALL Reset_Epslon_To_Local ()
  476.                     ELSE
  477.  V----------<>        auxpol(1:jMaxHalf, 1) = SQRT(0.5_r8)
  478.  br4---------<        DO m = 2, mMax
  479.  br4 Vbr4----<           DO j = 1, jMaxHalf
  480.  br4 Vbr4                   auxpol(j, m) =   &
  481.  br4 Vbr4                        SQRT(1.0_r8 + 0.5_r8/REAL(m-1,r8)) * &
  482.  br4 Vbr4                        SinGaussColat(j)          * &
  483.  br4 Vbr4                        auxpol(j, m-1)
  484.  br4 Vbr4---->           END DO
  485.  br4--------->        END DO
  486.                       !$OMP PARALLEL DO PRIVATE(mp,jp,mglobalp)
  487.  M m---------<        DO mp = 1, mymMax
  488.  M m                     mglobalp = lm2m(mp)
  489.  m Vr4-------<           DO jp = 1, jMaxHalf
  490.  m Vr4                      LegFuncS2F(jp, mymnExtMap(mp,mglobalp)) = &
  491.  m Vr4                           auxpol(jp, mglobalp)
  492.  m Vr4------->           END DO
  493.  m----------->        END DO
  494.                       !$OMP END PARALLEL DO
  495.                       !$OMP PARALLEL DO PRIVATE(mp,jp,mglobalp)
  496.  M m---------<        DO mp = 1, mymMax
  497.  M m                     mglobalp = lm2m(mp)
  498.  m Vr4-------<           DO jp = 1, jMaxHalf
  499.  m Vr4                      LegFuncS2F(jp, mymnExtMap(mp,mglobalp+1)) =   &
  500.  m Vr4                           SQRT(1.0_r8 + 2.0_r8*REAL(mglobalp,r8))     * &
  501.  m Vr4                           GaussPoints(jp)              * &
  502.  m Vr4                           LegFuncS2F(jp, mymnExtMap(mp,mglobalp))
  503.  m Vr4------->           END DO
  504.  m----------->        END DO
  505.                       !$OMP END PARALLEL DO
  506.                       !$OMP PARALLEL DO PRIVATE(mp,jp,mglobalp,np)
  507.  M m---------<        DO mp = 1, mymMax
  508.  M m                     mglobalp = lm2m(mp)
  509.  M m 2-------<           DO np = mglobalp+2, nExtMax
  510.  M m 2 Vr4---<              DO jp = 1, jMaxHalf
  511.  M m 2 Vr4                     LegFuncS2F(jp, mymnExtMap(mp,np)) =          &
  512.  M m 2 Vr4                          ( GaussPoints(jp)                 * &
  513.  M m 2 Vr4                            LegFuncS2F(jp, mymnExtMap(mp,np-1)) - &
  514.  M m 2 Vr4                            Epslon(mymnExtMap(mp,np-1))        * &
  515.  M m 2 Vr4                            LegFuncS2F(jp, mymnExtMap(mp,np-2))   &
  516.  M m 2 Vr4                           ) / Epslon(mymnExtMap(mp,np))
  517.  M m 2 Vr4--->              END DO
  518.  M m 2------->           END DO
  519.  M m--------->        END DO
  520.                       !$OMP END PARALLEL DO
  521.                    END IF
  522.                  END SUBROUTINE CreateAssocLegFunc
ftn-5008 ftn: NOTE File = Utils.f90, Line = 522 
  Named Constant "H" is not used.

  523.                
  524.                
  525.                  SUBROUTINE Reset_Epslon_To_Local ()
  526.                  INTEGER:: m, n, mn
  527.                
  528.                !
  529.                !   Convert Epslon to local mpi structure
  530.                !
  531.  1-----------<     DO mn = 1, mymnExtMax
  532.  1                    m = lm2m(mymExtMap(mn))
  533.  1                    n = mynExtMap(mn)
  534.  1                    Epslon(mn) = SQRT((Square(n)-Square(m))*Den(n))
  535.  1----------->     END DO
  536.                
  537.                  END SUBROUTINE Reset_Epslon_To_Local
  538.                
  539.                
  540.                  !DestroyAssocLegFunc  Deallocates all stored values
  541.                
  542.                
  543.                
  544.                  SUBROUTINE DestroyAssocLegFunc()
  545.                    CHARACTER(LEN=*), PARAMETER :: h="**(DestroyAssocLegFunc)**"
  546.                    DEALLOCATE (Epslon, LegFuncS2F)
  547.                    DEALLOCATE (Square, Den)
  548.                  END SUBROUTINE DestroyAssocLegFunc
ftn-5008 ftn: NOTE File = Utils.f90, Line = 548 
  Named Constant "H" is not used.

  549.                
  550.                
  551.                
  552.                  !DumpAssocLegFunc  Dumps all stored values
  553.                
  554.                
  555.                
  556.                  SUBROUTINE DumpAssocLegFunc()
  557.                    CHARACTER(LEN=*), PARAMETER :: h="**(DumpAssocLegFunc)**"
  558.                    WRITE(nfprt,"(a,' dumping stored values')") h
  559.  I                 CALL DumpMatrix('Epslon', Epslon)
  560.                    CALL DumpMatrix('LegFuncS2F',LegFuncS2F)
  561.                  END SUBROUTINE DumpAssocLegFunc
  562.                
  563.                  !  AUXILIARY PROCEDURES
  564.                
  565.                  !  Module exports two routines:
  566.                  !     NoBankConflict  given input integer (size of an array at
  567.                  !                     any dimension) returns the next integer
  568.                  !                     that should dimension the array to avoid
  569.                  !                     memory bank conflicts. The vector version
  570.                  !                     returns a vector of integers, given a vector
  571.                  !                     of input integers.
  572.                  !     DumpMatrix      Dumps input matrix, for ranks 1 to 3, of type
  573.                  !                     integer or real. Output is limited to 10 columns.
  574.                
  575.                  !  Module does not require any other module.
  576.                  !  Module does not export any value.
  577.                
  578.                
  579.                
  580.                  FUNCTION NoBankConflictS(s) RESULT(p)
  581.                    INTEGER, INTENT(IN) :: s
  582.                    INTEGER             :: p
  583.                    IF ((MOD(s,2)==0) .AND. (s/=0)) THEN
  584.                       p = s + 1
  585.                    ELSE
  586.                       p = s
  587.                    END IF
  588.                  END FUNCTION NoBankConflictS
  589.                  FUNCTION NoBankConflictV(s) RESULT(p)
  590.                    INTEGER, INTENT(IN) :: s(:)
  591.                    INTEGER             :: p(SIZE(s))
  592.                    WHERE ((MOD(s,2)==0) .AND. (s/=0))
  593.                       p = s + 1
  594.                    ELSEWHERE
  595.                       p = s
  596.                    END WHERE
  597.                  END FUNCTION NoBankConflictV
  598.                  SUBROUTINE DumpMatrixReal1D(name, m)
  599.                    CHARACTER(LEN=*), INTENT(IN) :: name
  600.                    REAL(KIND=r8), INTENT(IN) :: m(:)
  601.                    INTEGER :: n1, i1, i1h
  602.                    CHARACTER(LEN=10) :: c1
  603.                    n1=SIZE(m,1)
  604.                    WRITE(c1,"(i10)") n1
  605.                    WRITE(nfprt,"(' Dump Matrix ',a,'[',a,']')") &
  606.                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1))
  607.                    i1h = MIN(10,n1)
  608.                    WRITE(c1,"(i10)") i1h
  609.                    WRITE(nfprt,"(a,'[1:',a,']=',1P,10e9.1)") &
  610.                            TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)),&
  611.                            (m(i1), i1=1,i1h)
  612.                  END SUBROUTINE DumpMatrixReal1D
  613.                  SUBROUTINE DumpMatrixReal2D(name, m)
  614.                    CHARACTER(LEN=*), INTENT(IN) :: name
  615.                    REAL(KIND=r8), INTENT(IN) :: m(:,:)
  616.                    INTEGER :: n1, n2, i1, i2, i2h
  617.                    CHARACTER(LEN=10) :: c1, c2
  618.                    n1=SIZE(m,1); n2=SIZE(m,2)
  619.                    WRITE(c1,"(i10)") n1
  620.                    WRITE(c2,"(i10)") n2
  621.                    WRITE(nfprt,"(' Dump Matrix ',a,'[',a,',',a,']')") &
  622.                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  623.                         TRIM(ADJUSTL(c2))
  624.  1-----------<     DO i1 = 1, n1
  625.  1                    WRITE(c1,"(i10)") i1
  626.  1                    i2h = MIN(10,n2)
  627.  1                    WRITE(c2,"(i10)") i2h
  628.  1                    WRITE(nfprt,"(a,'[',a,',1:',a,']=',1P,10e9.1)") &
  629.  1                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  630.  1                         TRIM(ADJUSTL(c2)), &
  631.  1                         (m(i1,i2), i2=1,i2h)
  632.  1----------->     END DO
  633.                  END SUBROUTINE DumpMatrixReal2D
  634.                  SUBROUTINE DumpMatrixReal3D(name, m)
  635.                    CHARACTER(LEN=*), INTENT(IN) :: name
  636.                    REAL(KIND=r8), INTENT(IN) :: m(:,:,:)
  637.                    INTEGER :: n1, n2, n3, i1, i2, i3, i2h
  638.                    CHARACTER(LEN=10) :: c1, c2, c3
  639.                    n1=SIZE(m,1); n2=SIZE(m,2); n3=SIZE(m,3)
  640.                    WRITE(c1,"(i10)") n1
  641.                    WRITE(c2,"(i10)") n2
  642.                    WRITE(c3,"(i10)") n3
  643.                    WRITE(nfprt,"(' Dump Matrix ',a,'[',a,',',a,',',a,']')") &
  644.                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  645.                         TRIM(ADJUSTL(c2)), TRIM(ADJUSTL(c3))
  646.  1-----------<     DO i3 = 1, n3
  647.  1                    WRITE(c3,"(i10)") i3
  648.  1                    PRINT *, ''
  649.  1 2---------<        DO i1 = 1, n1
  650.  1 2                     WRITE(c1,"(i10)") i1
  651.  1 2                     i2h = MIN(10,n2)
  652.  1 2                     WRITE(c2,"(i10)") i2h
  653.  1 2                     WRITE(nfprt,"(a,'[',a,',1:',a,',',a,']=',1P,10e9.1)") &
  654.  1 2                          TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  655.  1 2                          TRIM(ADJUSTL(c2)), TRIM(ADJUSTL(c3)), &
  656.  1 2                          (m(i1,i2,i3), i2=1,i2h)
  657.  1 2--------->        END DO
  658.  1----------->     END DO
  659.                  END SUBROUTINE DumpMatrixReal3D
  660.                  SUBROUTINE DumpMatrixInteger1D(name, m)
  661.                    CHARACTER(LEN=*), INTENT(IN) :: name
  662.                    INTEGER, INTENT(IN) :: m(:)
  663.                    INTEGER :: n1, i1, i1h
  664.                    CHARACTER(LEN=10) :: c1
  665.                    n1=SIZE(m,1)
  666.                    WRITE(c1,"(i10)") n1
  667.                    WRITE(nfprt,"(' Dump Matrix ',a,'[',a,']')") &
  668.                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1))
  669.                    i1h = MIN(10,n1)
  670.                    WRITE(c1,"(i10)") i1h
  671.                    WRITE(nfprt,"(a,'[1:',a,']=',10i8)") &
  672.                            TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)),&
  673.                            (m(i1), i1=1,i1h)
  674.                  END SUBROUTINE DumpMatrixInteger1D
  675.                  SUBROUTINE DumpMatrixInteger2D(name, m)
  676.                    CHARACTER(LEN=*), INTENT(IN) :: name
  677.                    INTEGER, INTENT(IN) :: m(:,:)
  678.                    INTEGER :: n1, n2, i1, i2, i2h
  679.                    CHARACTER(LEN=10) :: c1, c2
  680.                    n1=SIZE(m,1); n2=SIZE(m,2)
  681.                    WRITE(c1,"(i10)") n1
  682.                    WRITE(c2,"(i10)") n2
  683.                    WRITE(nfprt,"(' Dump Matrix ',a,'[',a,',',a,']')") &
  684.                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  685.                         TRIM(ADJUSTL(c2))
  686.  1-----------<     DO i1 = 1, n1
  687.  1                    WRITE(c1,"(i10)") i1
  688.  1                    i2h = MIN(10,n2)
  689.  1                    WRITE(c2,"(i10)") i2h
  690.  1                    WRITE(nfprt,"(a,'[',a,',1:',a,']=',10i8)") &
  691.  1                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  692.  1                         TRIM(ADJUSTL(c2)), &
  693.  1                         (m(i1,i2), i2=1,i2h)
  694.  1----------->     END DO
  695.                  END SUBROUTINE DumpMatrixInteger2D
  696.                  SUBROUTINE DumpMatrixInteger3D(name, m)
  697.                    CHARACTER(LEN=*), INTENT(IN) :: name
  698.                    INTEGER, INTENT(IN) :: m(:,:,:)
  699.                    INTEGER :: n1, n2, n3, i1, i2, i3, i2h
  700.                    CHARACTER(LEN=10) :: c1, c2, c3
  701.                    n1=SIZE(m,1); n2=SIZE(m,2); n3=SIZE(m,3)
  702.                    WRITE(c1,"(i10)") n1
  703.                    WRITE(c2,"(i10)") n2
  704.                    WRITE(c3,"(i10)") n3
  705.                    WRITE(nfprt,"(' Dump Matrix ',a,'[',a,',',a,',',a,']')") &
  706.                         TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  707.                         TRIM(ADJUSTL(c2)), TRIM(ADJUSTL(c3))
  708.  1-----------<     DO i3 = 1, n3
  709.  1                    WRITE(c3,"(i10)") i3
  710.  1                    PRINT *, ''
  711.  1 2---------<        DO i1 = 1, n1
  712.  1 2                     WRITE(c1,"(i10)") i1
  713.  1 2                     i2h = MIN(10,n2)
  714.  1 2                     WRITE(c2,"(i10)") i2h
  715.  1 2                     WRITE(nfprt,"(a,'[',a,',1:',a,',',a,']=',10i8)") &
  716.  1 2                          TRIM(ADJUSTL(name)), TRIM(ADJUSTL(c1)), &
  717.  1 2                          TRIM(ADJUSTL(c2)), TRIM(ADJUSTL(c3)), &
  718.  1 2                          (m(i1,i2,i3), i2=1,i2h)
  719.  1 2--------->        END DO
  720.  1----------->     END DO
  721.                  END SUBROUTINE DumpMatrixInteger3D
  722.                
  723.                
  724.                  !  GAUSSIAN POINTS AND WEIGHTS FOR QUADRATURE
  725.                  !  OVER LEGENDRE POLINOMIALS BASE FUNCTIONS
  726.                
  727.                  !  Module exports three routines:
  728.                  !     CreateGaussQuad   initializes module
  729.                  !     DestroyGaussQuad  destroys module
  730.                  !     DumpGaussQuade    dumps Gaussian Quadrature
  731.                
  732.                  !  Module export two arrays:
  733.                  !     GaussPoints and GaussWeights
  734.                  !
  735.                  !  Module uses Module LegPol (Legandre Polinomials);
  736.                  !  transparently to the user, that does not have
  737.                  !  to create and/or destroy LegPol
  738.                
  739.                
  740.                
  741.                
  742.                
  743.                
  744.                  !CreateGaussQuad  computes and hides 'degreeGiven' Gaussian Points
  745.                  !                 and Weights over interval [-1:1];
  746.                  !                 creates and uses Mod LegPol.
  747.                
  748.                
  749.                
  750.                  SUBROUTINE CreateGaussQuad (degreeGiven, gaussGiven)
  751.                    INTEGER, INTENT(IN) :: degreeGiven
  752.                    LOGICAL, INTENT(IN) :: gaussGiven
  753.                    REAL(KIND=r16), ALLOCATABLE :: FVals(:)
  754.                    CHARACTER(LEN=*), PARAMETER :: h="**(CreateGaussQuad)**"
  755.                    CHARACTER(LEN=256) :: line
  756.                    CHARACTER(LEN=10) :: c1
  757.                    INTEGER :: j
  758.                
  759.                    !check invocation sequence and input data
  760.                
  761.                    IF (degreeGiven <=0) THEN
  762.                       WRITE(c1,"(i10)") degreeGiven
  763.                       WRITE(nfprt,"(a,' invoked with degree ',a)") h, TRIM(ADJUSTL(c1))
  764.                       STOP
  765.                    ELSE
  766.                       maxDegree = degreeGiven
  767.                    END IF
  768.                
  769.                    !allocate areas
  770.                
  771.                    ALLOCATE (GaussColat(maxDegree/2))
  772.                    ALLOCATE (SinGaussColat(maxDegree/2))
  773.                    ALLOCATE (CosGaussColat(maxDegree/2))
  774.                    ALLOCATE (AuxGaussColat(maxDegree/2))
  775.                    ALLOCATE (FVals(maxDegree/2))
  776.                    ALLOCATE (GaussPoints(maxDegree))
  777.                    ALLOCATE (GaussWeights(maxDegree))
  778.                    ALLOCATE (colrad(maxDegree))
  779.                    ALLOCATE (rcs2(maxDegree/2))
  780.                
  781.                    !create ModLegPol
  782.                
  783.                    CALL CreateLegPol (maxDegree)
  784.                
  785.                    !Gaussian Points are the roots of legandre polinomial of degree maxDegree
  786.                
  787.                    IF (gaussGiven) THEN
  788.                       Call ReadGauss(CosGaussColat,GaussWeights,fNamegauss,maxDegree)
  789.                    ELSE
  790.                       CALL LegPolRootsandWeights(maxDegree)
  791.  V----------<>        GaussWeights(maxDegree/2+1:maxDegree) = GaussWeights(maxDegree/2:1:-1)
  792.                       IF (myId == 0) THEN
  793.                          Call WriteGauss(CosGaussColat,GaussWeights,fNamegauss,maxDegree)
  794.                       END IF
  795.                    END IF
  796.                    GaussColat = ACOS(CosGaussColat)
  797.  V----------<>     SinGaussColat = SIN(GaussColat)
  798.  V----------<>     AuxGaussColat = 1.0_r16/(SinGaussColat*SinGaussColat)
  799.  V----------<>     GaussPoints(1:maxDegree/2) = CosGaussColat
  800.  V----------<>     GaussPoints(maxDegree/2+1:maxDegree) = -GaussPoints(maxDegree/2:1:-1)
  801.                
  802.  Vr4---------<     DO j=1,maxDegree/2
  803.  Vr4                  colrad(j)=    GaussColat(j)
  804.  Vr4                  colrad(maxDegree+1-j)=pai-GaussColat(j)
  805.  Vr4                  rcs2(j)=AuxGaussColat(j)
  806.  Vr4--------->     END DO
  807.                
  808.                    WRITE (line, FMT='(3F16.12)') &
  809.                         MINVAL(ABS(colrad(1:(maxDegree) -1)-colrad(2:(maxDegree)))*180.0_r16/pai), &
  810.                         MAXVAL(ABS(colrad(1:(maxDegree) -1)-colrad(2:(maxDegree)))*180.0_r16/pai), &
  811.                         180.0_r16/REAL(maxDegree,r16)
  812.                    CALL MsgOne(h,line)
  813.                
  814.                    WRITE (line, FMT='(3F16.3)') &
  815.                         112.0_r16*MINVAL(ABS(colrad(1:(maxDegree)-1)-colrad(2:(maxDegree)))*180.0_r16/pai), &
  816.                         112.0_r16*MAXVAL(ABS(colrad(1:(maxDegree)-1)-colrad(2:(maxDegree)))*180.0_r16/pai), &
  817.                         112.0_r16*(180.0_r16/REAL(maxDegree,r16))
  818.                    CALL MsgOne(h,line)
  819.                
  820.                    WRITE (line, FMT='(F24.18,1PE24.12)') SUM(GaussWeights(maxDegree/2+1:maxDegree)),&
  821.                         1.0_r16-SUM(GaussWeights(maxDegree/2+1:maxDegree))
  822.                    CALL MsgOne(h,line)
  823.                
  824.                
  825.                  END SUBROUTINE CreateGaussQuad
ftn-5003 ftn: NOTE File = Utils.f90, Line = 825 
  Local variable "FVALS" is used but not assigned a value.

  826.                
  827.                
  828.                  SUBROUTINE CreateGridValues
  829.                
  830.                    INTEGER :: i, j, ib, jb, jhalf
  831.                    REAL    :: sinjm(0:jmax/2)
  832.                    ALLOCATE (colrad2D(ibMax,jbMax))
  833.                    ALLOCATE (rcl     (ibMax,jbMax))
  834.  V----------<>     rcl=0.0_r8
  835.                    ALLOCATE (cel_area(jMax))
  836.                    ALLOCATE (total_mass(0:nscalars))
  837.                    ALLOCATE (massconsrv(jmax))
  838.                    ALLOCATE (fconsrv(nscalars,jmax))
  839.                    ALLOCATE (totmas(nscalars))
  840.                    ALLOCATE (coslatj (jMax))
  841.                    ALLOCATE (sinlatj (jMax))
  842.                    ALLOCATE (coslat  (ibMax,jbMax))
  843.                    ALLOCATE (sinlat  (ibMax,jbMax))
  844.                    ALLOCATE (coslon  (ibMax,jbMax))
  845.                    ALLOCATE (sinlon  (ibMax,jbMax))
  846.                    ALLOCATE (cos2lat (ibMax,jbMax))
  847.                    ALLOCATE (ercossin(ibMax,jbMax))
  848.                    ALLOCATE (fcor    (ibMax,jbMax))
  849.                    ALLOCATE (cosiv   (ibMax,jbMax))
  850.                    ALLOCATE (longit  (ibMax,jbMax))
  851.                    ALLOCATE (lonrad  (ibMax,jbMax))
  852.                    ALLOCATE (lati    (jMax))
  853.                    ALLOCATE (long    (iMax))
  854.                    ALLOCATE (cosz    (jMax))
  855.                    ALLOCATE (cos2d   (ibMax,jbMax))
  856.                    ALLOCATE (vmax    (kMax,jbMax))
  857.                    ALLOCATE (vaux(kMax))
  858.                    ALLOCATE (vmaxVert(kMax))
  859.                
  860.  Vr4---------<     DO j=1,jMax
  861.  Vr4                  lati(j)=colrad(j)
  862.  Vr4--------->     END DO
  863.  Vr4---------<     DO i=1,imax
  864.  Vr4                  long(i) = (i-1)*360.0_r8/REAL(iMax,r8)
  865.  Vr4--------->     ENDDO
  866.                    sinjm(0) = 1.0_r8
  867.  Vr2---------<     DO j=1,jMax/2
  868.  Vr2                  sinjm(j) = cos((lati(j)+lati(j+1))/2.0_r8)
  869.  Vr2--------->     END DO
  870.                
  871.                    !$OMP PARALLEL DO PRIVATE(jhalf)
  872.  mVp---------<     DO j=1,jMax/2
  873.  mVp                  jhalf = jMax-j+1
  874.  mVp                  sinlatj (j)=COS(colrad(j))
  875.  mVp                  coslatj (j)=SIN(colrad(j))
  876.  mVp                  sinlatj (jhalf)= - sinlatj(j)
  877.  mVp                  coslatj (jhalf)= coslatj(j)
  878.  mVp                  cel_area(j) = 0.5_r8 / iMaxPerJ(j) * (sinjm(j-1)-sinjm(j))
  879.  mVp                  cel_area(jhalf) = cel_area(j)
  880.  mVp--------->     ENDDO
  881.                    !$OMP END PARALLEL DO
  882.                
  883.                
  884.                    !$OMP PARALLEL DO PRIVATE(ib,i,j,jhalf)
  885.  M m---------<     DO jb = 1, jbMax
  886.  M m 2-------<        DO ib = 1, ibMaxPerJB(jb)
  887.  M m 2                   j = jPerIJB(ib,jb)
  888.  M m 2                   i = iPerIJB(ib,jb)
  889.  M m 2                   jhalf = MIN(j, jMax-j+1)
  890.  M m 2                   colrad2D(ib,jb)=colrad(j)
  891.  M m 2                   sinlat  (ib,jb)=sinlatj(j)
  892.  M m 2                   coslat  (ib,jb)=coslatj(j)
  893.  M m 2                   rcl     (ib,jb)=rcs2(jhalf)
  894.  M m 2                   longit  (ib,jb)=(i-1)*pai*2.0_r8/iMaxPerJ(j)
  895.  M m 2                   lonrad  (ib,jb)=(i-1)*360.0_r8/REAL(iMaxPerJ(j),r8)
  896.  M m 2                   sinlon  (ib,jb)=SIN(longit(ib,jb))
  897.  M m 2                   coslon  (ib,jb)=COS(longit(ib,jb))
  898.  M m 2                   cos2lat (ib,jb)=1.0_r8/rcl(ib,jb)
  899.  M m 2         !**(JP)** mudei
  900.  M m 2         !          ercossin(ib,jb)=sinlat(ib,jb)*rcl(ib,jb)/er
  901.  M m 2         !          fcor    (ib,jb)=twomg*sinlat(ib,jb)
  902.  M m 2         !          cosiv   (ib,jb)=1./coslat(ib,jb)
  903.  M m 2         ! para a forma antiga, so para bater binario no euleriano;
  904.  M m 2         ! impacto no SemiLagrangeano eh desconhecido
  905.  M m 2                   ercossin(ib,jb)=COS(colrad(j))*rcl(ib,jb)/er
  906.  M m 2                   fcor    (ib,jb)=twomg*COS(colrad(j))
  907.  M m 2                   cosiv   (ib,jb)=SQRT(rcl(ib,jb))
  908.  M m 2         !**(JP)** fim de alteracao
  909.  M m 2------->        END DO
  910.  M m--------->     END DO
  911.                    !$OMP END PARALLEL DO
  912.                
  913.                  END SUBROUTINE CreateGridValues
  914.                
  915.                  !DestroyGaussQuad  destroy module internal data;
  916.                  !                  destroys module LegPol;
  917.                  !                  get ready for new module usage
  918.                
  919.                
  920.                
  921.                  SUBROUTINE DestroyGaussQuad
  922.                    CHARACTER(LEN=*), PARAMETER :: h="**(DestroyGaussQuad)**"
  923.                
  924.                    !check invocation sequence
  925.                
  926.                    maxDegree = -1
  927.                
  928.                    !destroy ModLegPol
  929.                
  930.                    CALL DestroyLegPol()
  931.                
  932.                    !deallocate module areas
  933.                    !
  934.                    DEALLOCATE (GaussColat)
  935.                    DEALLOCATE (SinGaussColat)
  936.                    DEALLOCATE (AuxGaussColat)
  937.                    DEALLOCATE (GaussPoints)
  938.                    DEALLOCATE (GaussWeights)
  939.                  END SUBROUTINE DestroyGaussQuad
ftn-5008 ftn: NOTE File = Utils.f90, Line = 939 
  Named Constant "H" is not used.

  940.                
  941.                
  942.                  !DumpGaussPoints  dumps gaussian points and weights
  943.                
  944.                
  945.                
  946.                
  947.                  SUBROUTINE DumpGaussQuad()
  948.                    CHARACTER(LEN=*), PARAMETER :: h="**(DumpGaussQuad)**"
  949.                    CHARACTER(LEN=10) :: c1
  950.                    WRITE(c1,"(i10)") maxDegree
  951.                    WRITE(nfprt,"(a,' created with maxDegree=',a)") h, TRIM(ADJUSTL(c1))
  952.  I                 CALL DumpMatrix('GaussPoints',GaussPoints)
  953.  I                 CALL DumpMatrix('GaussWeights',GaussWeights)
  954.                  END SUBROUTINE DumpGaussQuad
  955.                  !
  956.                  !  Module usage:
  957.                  !     CreateLegPol should be invoked once, before any other routine;
  958.                  !     LegPol can be invoked after CreateLegPol, as much as required;
  959.                  !     LegPolRoots can be invoked after CreateLegPol, as much as required;
  960.                  !     DestroyLegPol should be invoked at the end of the computation.
  961.                  !     CreateLegPol estabilishes the maximum degree for which LegPol
  962.                  !     and LegPolRoots should be invoked. If this maximum
  963.                  !     degree has to be changed, module should be destroied and
  964.                  !     created again.
  965.                  !
  966.                  !     LegPol and LegPolRoots deal with colatitudes;
  967.                  !     LegPol take colatitudes as abcissas and
  968.                  !     LegPolRoots produces colatitudes as roots.
  969.                  !     Colatitudes are expressed in radians, with 0 at the
  970.                  !     North Pole, pi/2 at the Equator and pi at the South Pole.
  971.                  !
  972.                  !
  973.                  !  Module Hided Data:
  974.                  !     AuxPoly1, AuxPoly2 are constants used to evaluate LegPol
  975.                  !     nAuxPoly is the maximum degree of the Polinomial to be computed
  976.                  !     created specifies if module was created or not
  977.                  !
  978.                
  979.                  !
  980.                  !  CreateLegPol does module initialization;
  981.                  !             should be executed once, prior to LegPol;
  982.                  !             input argument is the maximum degree of LegPol invocations
  983.                  !
  984.                  SUBROUTINE CreateLegPol (maxDegree)
  985.                    INTEGER, INTENT(IN) :: maxDegree
  986.                    INTEGER :: i
  987.                    !
  988.                    !  Check Correction
  989.                    !
  990.                    IF ( maxDegree <= 0) THEN
  991.                       WRITE (0,"('**(CreateLegPol)** maxDegree <= 0; maxDegree =')") maxDegree
  992.                       STOP
  993.                    ELSE IF (created) THEN
  994.                       WRITE (0,"('**(CreateLegPol)** invoked twice without destruction')")
  995.                       STOP
  996.                    END IF
  997.                    !
  998.                    !  Allocate and Compute Constants
  999.                    !
 1000.                    nAuxPoly = maxDegree
 1001.                    ALLOCATE (AuxPoly1(nAuxPoly))
 1002.                    ALLOCATE (AuxPoly2(nAuxPoly))
 1003.  Vr4---------<     DO i = 1, nAuxPoly
 1004.  Vr4                  AuxPoly1(i) = REAL(2*i-1,r16)/REAL(i,r16)
 1005.  Vr4                  AuxPoly2(i) = REAL(1-i,r16)/REAL(i,r16)
 1006.  Vr4--------->     END DO
 1007.                    created = .TRUE.
 1008.                  END SUBROUTINE CreateLegPol
 1009.                  !
 1010.                  ! DestroyLegPol destroys module initialization;
 1011.                  !               required if maximum degree of LegPol has to be changed;
 1012.                  !               in this case, invoke DestroyLegPol and CreateLegPol with
 1013.                  !               new degree
 1014.                  !
 1015.                  SUBROUTINE DestroyLegPol
 1016.                    IF (.NOT. created) THEN
 1017.                       WRITE (0,"('**(DestroyLegPol)** invoked without initialization')")
 1018.                       STOP
 1019.                    END IF
 1020.                    DEALLOCATE (AuxPoly1, AuxPoly2)
 1021.                    created = .FALSE.
 1022.                  END SUBROUTINE DestroyLegPol
 1023.                  !
 1024.                  ! LegPol computes Legandre Polinomial of degree 'degree' at a
 1025.                  !        vector of colatitudes 'Col'
 1026.                  !        degree should be <= maximum degree estabilished by CreateLegPol
 1027.                  !
 1028.                  FUNCTION LegPol (degree, Col)
 1029.                    INTEGER,                      INTENT(IN ) :: degree
 1030.                    REAL(KIND=r16),    DIMENSION(:),        INTENT(IN ) :: Col
 1031.                    REAL(KIND=r16),    DIMENSION(SIZE(Col))             :: LegPol
 1032.                    !
 1033.                    !  Auxiliary Variables
 1034.                    !
 1035.                    REAL(KIND=r16), DIMENSION(SIZE(Col)) :: P0     ! Polinomial of degree i - 2
 1036.                    REAL(KIND=r16), DIMENSION(SIZE(Col)) :: P1     ! Polinomial of degree i - 1
 1037.                    REAL(KIND=r16), DIMENSION(SIZE(Col)) :: X      ! Cosine of colatitude
 1038.                    INTEGER :: iDegree                   ! loop index
 1039.                    INTEGER :: left                      ! loop iterations before unrolling
 1040.                    !
 1041.                    !  Check Correctness
 1042.                    !
 1043.                    IF (.NOT. created) THEN
 1044.                       WRITE (0,"('**(LegPol)** invoked without initialization')")
 1045.                       STOP
 1046.                    END IF
 1047.                    !
 1048.                    !  Case degree >=2 and degree <= maximum degree
 1049.                    !
 1050.                    IF ((degree >= 2) .AND. (degree <= nAuxPoly)) THEN
 1051.                       !
 1052.                       !  Initialization
 1053.                       !
 1054.                       left = MOD(degree-1,6)
 1055.  V----------<>        X  = COS(Col)
 1056.  A----------<>        P0 = 1.0_r16
 1057.  A----------<>        P1 = X
 1058.                       !
 1059.                       !  Apply recurrence relation
 1060.                       !     Loop upper bound should be 'degree';
 1061.                       !     it is not due to unrolling
 1062.                       !
 1063.  1-----------<        DO iDegree = 2, left+1
 1064.  1 V--------<>           LegPol = X*P1*AuxPoly1(iDegree) + P0*AuxPoly2(iDegree)
 1065.  1 A--------<>           P0 = P1; P1 = LegPol
 1066.  1----------->        END DO
 1067.                       !
 1068.                       !  Unroll recurrence relation, to speed up computation
 1069.                       !
 1070.  1-----------<        DO iDegree = left+2, degree, 6
 1071.  1 V--------<>           LegPol = X*P1    *AuxPoly1(iDegree  ) + P0    *AuxPoly2(iDegree  )
 1072.  1 V--------<>           P0     = X*LegPol*AuxPoly1(iDegree+1) + P1    *AuxPoly2(iDegree+1)
 1073.  1 V--------<>           P1     = X*P0    *AuxPoly1(iDegree+2) + LegPol*AuxPoly2(iDegree+2)
 1074.  1 V--------<>           LegPol = X*P1    *AuxPoly1(iDegree+3) + P0    *AuxPoly2(iDegree+3)
 1075.  1 V--------<>           P0     = X*LegPol*AuxPoly1(iDegree+4) + P1    *AuxPoly2(iDegree+4)
 1076.  1 V--------<>           P1     = X*P0    *AuxPoly1(iDegree+5) + LegPol*AuxPoly2(iDegree+5)
 1077.  1----------->        END DO
 1078.  A----------<>        LegPol = P1
 1079.                    !
 1080.                    !  Case degree == 0
 1081.                    !
 1082.                    ELSE IF (degree == 0) THEN
 1083.  A----------<>        LegPol = 1.0_r16
 1084.                    !
 1085.                    !  Case degree == 1
 1086.                    !
 1087.                    ELSE IF (degree == 1) THEN
 1088.  V----------<>        LegPol = COS(Col)
 1089.                    !
 1090.                    !  Case degree <= 0 or degree > maximum degree
 1091.                    !
 1092.                    ELSE
 1093.                       WRITE(nfprt,"('**(LegPol)** invoked with degree ',i6,&
 1094.                            &' out of bounds')") degree
 1095.                       STOP
 1096.                    END IF
 1097.                  END FUNCTION LegPol
 1098.                  !
 1099.                  !  LegPolRootsandweights  computes the roots of the Legandre Polinomial
 1100.                  !              of even degree 'degree' and respective Gaussian Weights
 1101.                  !              Roots are expressed as colatitudes at interval
 1102.                  !              (0, pi/2)
 1103.                  !
 1104.                  SUBROUTINE LegPolRootsandWeights (degree)
 1105.                    INTEGER, INTENT(IN) :: degree
 1106.                    REAL(KIND=r16),                 DIMENSION(degree/2) :: Col
 1107.                    REAL(KIND=r16),    ALLOCATABLE, DIMENSION(:)      :: XSearch, FSearch
 1108.                    REAL(KIND=r16), DIMENSION(degree/2) :: Pol    ! Polinomial of degree i
 1109.                    REAL(KIND=r16), DIMENSION(degree/2) :: P0     ! Polinomial of degree i-2
 1110.                    REAL(KIND=r16), DIMENSION(degree/2) :: P1     ! Polinomial of degree i-1
 1111.                    REAL(KIND=r16), DIMENSION(degree/2) :: X
 1112.                    REAL(KIND=r16), DIMENSION(degree/2) :: XC
 1113.                    LOGICAL, ALLOCATABLE, DIMENSION(:)      :: Mask
 1114.                    INTEGER :: i                               ! loop index
 1115.                    INTEGER :: nPoints                         ! to start bissection
 1116.                    INTEGER, PARAMETER :: multSearchStart=4 ! * factor to start bissection
 1117.                    REAL(KIND=r16)    :: step
 1118.                    REAL(KIND=r16)    :: pi, scale
 1119.                    INTEGER, PARAMETER  :: itmax=10     ! maximum number of newton iterations
 1120.                    INTEGER, PARAMETER  :: nDigitsOut=2 ! precision digits of gaussian points:
 1121.                                                        ! machine epsilon - nDigitsOut
 1122.                    REAL(KIND=r16)    :: rootPrecision   ! relative error in gaussian points
 1123.                
 1124.                    INTEGER :: halfDegree
 1125.                    INTEGER :: iDegree, it               ! loop index
 1126.                    INTEGER :: left                      ! loop iterations before unrolling
 1127.                    !
 1128.                    !  Check Correctness
 1129.                    !
 1130.                    IF (.NOT. created) THEN
 1131.                       WRITE (0,"('**(LegPolRootsandWeights)** invoked without initialization')")
 1132.                       STOP
 1133.                    ELSE IF ( (degree <= 0) .OR. (degree > nAuxPoly) ) THEN
 1134.                       WRITE (0,"('**(LegPolRootsandWeights)** invoked with degree ',i6,&
 1135.                            &' out of bounds')") degree
 1136.                       STOP
 1137.                    ELSE IF ( MOD(degree,2) .NE. 0) THEN
 1138.                       WRITE (0,"('**(LegPolRootsandWeights)** invoked with odd degree ',i6)") degree
 1139.                       STOP
 1140.                    END IF
 1141.                    !
 1142.                    !  Initialize Constants
 1143.                    !
 1144.                    pi = 4.0_r16 * ATAN(1.0_r16)
 1145.                    rootPrecision = EPSILON(1.0_r16)*10.0_r16**(nDigitsOut)
 1146.                    !
 1147.                    !  LegPolRoots uses root simmetry with respect to pi/2.
 1148.                    !  It finds all roots in the interval [0,pi/2]
 1149.                    !  Remaining roots are simmetric
 1150.                    !
 1151.                    halfDegree = degree/2
 1152.                    !
 1153.                    !  bissection method to find roots:
 1154.                    !  get equally spaced points in interval [0,pi/2]
 1155.                    !  to find intervals containing roots
 1156.                    !
 1157.                    nPoints = multSearchStart*halfDegree
 1158.                    step = pi/(2.0_r16*REAL(nPoints,r16))
 1159.                    ALLOCATE (XSearch(nPoints))
 1160.                    ALLOCATE (FSearch(nPoints))
 1161.                    ALLOCATE (Mask   (nPoints-1))
 1162.  Vr4---------<     DO i = 1, nPoints
 1163.  Vr4                  XSearch(i) = step*REAL(i-1,r16)
 1164.  Vr4--------->     END DO
 1165.                    FSearch = LegPol (degree, XSearch)
 1166.                    !
 1167.                    !  select intervals containing roots
 1168.                    !
 1169.                    Mask = FSearch(1:nPoints-1)*FSearch(2:nPoints) < 0.0
 1170.                    !
 1171.                    !  are there enough intervals?
 1172.                    !
 1173.                    IF (COUNT(Mask) .NE. halfDegree) THEN
 1174.                       WRITE(nfprt,"('**(LegPolRoots)** ',i6,' bracketing intervals to find '&
 1175.                            &,i6,' roots')") COUNT(Mask), halfDegree
 1176.                       STOP
 1177.                    END IF
 1178.                    !
 1179.                    !  extract intervals containing roots
 1180.                    !
 1181.  V----------<>     Col = 0.5_r16 * (PACK(XSearch(1:nPoints-1), Mask) + &
 1182.                                  PACK(XSearch(2:nPoints  ), Mask) )
 1183.                    DEALLOCATE (XSearch)
 1184.                    DEALLOCATE (FSearch)
 1185.                    DEALLOCATE (Mask)
 1186.                    !
 1187.                    !    loop while there is a root to be found
 1188.                    !
 1189.                    it = 1
 1190.  V----------<>     X  = COS(Col)
 1191.                    scale = 2.0_r16/REAL(degree*degree,r16)
 1192.                    left = MOD(degree-1,6)
 1193.                    WRITE (UNIT=*, FMT='(/,I6,2I5,1P2E16.8)') degree, r16, r16, rootPrecision,ATAN(1.0_r16)/REAL(degree,r16)
 1194.  1-----------<     DO
 1195.  1                    IF (it.gt.itmax) THEN
 1196.  1                      WRITE (0,"('**(LegPolRootsandWeights)** failed to converge  ',i6,&
 1197.  1                                &' itmax')") itmax
 1198.  1                      EXIT
 1199.  1                    END IF
 1200.  1                    !
 1201.  1                    !   initialization
 1202.  1                    !
 1203.  1                    it = it + 1
 1204.  1 A--------<>        P0 = 1.0_r16
 1205.  1 A--------<>        P1 = X
 1206.  1                    !
 1207.  1                    !   Apply recurrence relation
 1208.  1                    !     Loop upper bound should be 'degree';
 1209.  1                    !     it is not due to unrolling
 1210.  1                    !
 1211.  1 2---------<        DO iDegree = 2, left+1
 1212.  1 2 V------<>           Pol = X*P1*AuxPoly1(iDegree) + P0*AuxPoly2(iDegree)
 1213.  1 2 A------<>           P0 = P1; P1 = Pol
 1214.  1 2--------->        END DO
 1215.  1                    !
 1216.  1                    !   Unroll recurrence relation, to speed up computation
 1217.  1                    !
 1218.  1 2---------<        DO iDegree = left+2, degree, 6
 1219.  1 2 V------<>           Pol = X*P1    *AuxPoly1(iDegree  ) + P0    *AuxPoly2(iDegree  )
 1220.  1 2 V------<>           P0     = X*Pol*AuxPoly1(iDegree+1) + P1    *AuxPoly2(iDegree+1)
 1221.  1 2 V------<>           P1     = X*P0    *AuxPoly1(iDegree+2) + Pol*AuxPoly2(iDegree+2)
 1222.  1 2 V------<>           Pol = X*P1    *AuxPoly1(iDegree+3) + P0    *AuxPoly2(iDegree+3)
 1223.  1 2 V------<>           P0     = X*Pol*AuxPoly1(iDegree+4) + P1    *AuxPoly2(iDegree+4)
 1224.  1 2 V------<>           P1     = X*P0    *AuxPoly1(iDegree+5) + Pol*AuxPoly2(iDegree+5)
 1225.  1 2--------->        END DO
 1226.  1 V--------<>        XC = P1 * (1.0_r16-X*X) / (REAL(degree,r16) * (P0-X*P1))
 1227.  1 V--------<>        X = X - XC
 1228.  1 V--------<>        IF (MAXVAL(ABS(XC/X)).LT.rootPrecision) THEN
 1229.  1 V--------<>           GaussWeights(1:halfDegree) = REAL(scale * (1.0_r16-X*X) / (P0*P0), KIND=r8)
 1230.  1 V--------<>           GaussWeights(halfDegree+1:Degree)=GaussWeights(halfDegree:1:-1)
 1231.  1                       EXIT
 1232.  1                    END IF
 1233.  1----------->     END DO
 1234.                    !
 1235.                    !
 1236.  V----------<>     CosGaussColat = REAL(X,KIND=r8)
 1237.                    !
 1238.                  END SUBROUTINE LegPolRootsandWeights
 1239.                
 1240.                  !        LINEAR ALGEBRA PROCEDURES
 1241.                  !
 1242.                  !        Module exports several routines for matrix inversion
 1243.                  !        and eigenvalue and eigenvector computations
 1244.                  !
 1245.                
 1246.                  !  Module does not require any other module.
 1247.                  !  Module does not export any value.
 1248.                
 1249.                SUBROUTINE Iminv (a,n,d,l,m)
 1250.                  REAL(KIND=r8), INTENT(INOUT) :: a(*)
 1251.                  REAL(KIND=r8), INTENT(OUT) :: d
 1252.                  INTEGER, INTENT(IN) :: n
 1253.                  INTEGER, INTENT(OUT) :: l(n), m(n)
 1254.                  !
 1255.                  !        Iminv computes the inverse of matrix a through a gauss-jordan
 1256.                  !        algorithm. The output matrix overwrites the input.
 1257.                  !
 1258.                  !        ...............................................................
 1259.                  !
 1260.                  !        search for largest element
 1261.                  !
 1262.                  REAL(KIND=r8) :: biga, hold
 1263.                  INTEGER :: nk, k, j, iz, i, ij, ki, ji, jk, kj, jr, jq, jp, kk, ik
 1264.                !cdir novector
 1265.                  d=1.0_r8
 1266.                  nk=-n
 1267.  1-----------<   DO k=1,n
 1268.  1                  nk=nk+n
 1269.  1                  l(k)=k
 1270.  1                  m(k)=k
 1271.  1                  kk=nk+k
 1272.  1                  biga=a(kk)
 1273.  1 2---------<      DO j=k,n
 1274.  1 2                   iz=n*(j-1)
 1275.  1 2 r4------<         DO i=k,n
 1276.  1 2 r4                   ij=iz+i
 1277.  1 2 r4                   IF( ABS (biga) <  ABS (a(ij))) THEN
 1278.  1 2 r4                      biga=a(ij)
 1279.  1 2 r4                      l(k)=i
 1280.  1 2 r4                      m(k)=j
 1281.  1 2 r4                   END IF
 1282.  1 2 r4------>         END DO
 1283.  1 2--------->      END DO
 1284.  1                  !
 1285.  1                  !        interchange rows
 1286.  1                  !
 1287.  1                  j=l(k)
 1288.  1                  IF (j > k) THEN
 1289.  1                     ki=k-n
 1290.  1             !cdir nodep
 1291.  1 r4--------<         DO i=1,n
 1292.  1 r4                     ki=ki+n
 1293.  1 r4                     hold=-a(ki)
 1294.  1 r4                     ji=ki-k+j
 1295.  1 r4                     a(ki)=a(ji)
 1296.  1 r4                     a(ji) =hold
 1297.  1 r4-------->         END DO
 1298.  1                  END IF
 1299.  1                  !
 1300.  1                  !        interchange columns
 1301.  1                  !
 1302.  1                  i=m(k)
 1303.  1                  IF (i > k) THEN
 1304.  1                     jp=n*(i-1)
 1305.  1             !cdir nodep
 1306.  1 Vr4-------<         DO j=1,n
 1307.  1 Vr4                    jk=nk+j
 1308.  1 Vr4                    ji=jp+j
 1309.  1 Vr4                    hold=-a(jk)
 1310.  1 Vr4                    a(jk)=a(ji)
 1311.  1 Vr4                    a(ji) =hold
 1312.  1 Vr4------->         END DO
 1313.  1                  END IF
 1314.  1                  !
 1315.  1                  !        divide column by minus pivot (value of pivot element is
 1316.  1                  !        contained in biga)
 1317.  1                  !
 1318.  1                  IF(biga .EQ. 0.0_r8) THEN
 1319.  1                     d=0.0_r8
 1320.  1                     RETURN
 1321.  1                  END IF
 1322.  1 Vr4-------<      DO i=1,n
 1323.  1 Vr4                 IF(i .NE. k) THEN
 1324.  1 Vr4                    ik=nk+i
 1325.  1 Vr4                    a(ik)=a(ik)/(-biga)
 1326.  1 Vr4                 END IF
 1327.  1 Vr4------->      END DO
 1328.  1                  !
 1329.  1                  !        reduce matrix
 1330.  1                  !
 1331.  1 2---------<      DO i=1,n
 1332.  1 2                   ik=nk+i
 1333.  1 2                   ij=i-n
 1334.  1 2           !cdir nodep
 1335.  1 2 r4------<         DO j=1,n
 1336.  1 2 r4                   ij=ij+n
 1337.  1 2 r4                   IF (i .EQ. k) CYCLE
 1338.  1 2 r4                   IF (j .EQ. k) CYCLE
 1339.  1 2 r4                   kj=ij-i+k
 1340.  1 2 r4                   a(ij)=a(ik)*a(kj)+a(ij)
 1341.  1 2 r4------>         END DO
 1342.  1 2--------->      END DO
 1343.  1                  !
 1344.  1                  !        divide row by pivot
 1345.  1                  !
 1346.  1                  kj=k-n
 1347.  1 r8--------<      DO j=1,n
 1348.  1 r8                  kj=kj+n
 1349.  1 r8                  IF (j .EQ. k) CYCLE
 1350.  1 r8                  a(kj)=a(kj)/biga
 1351.  1 r8-------->      END DO
 1352.  1                  !
 1353.  1                  !        product of pivots
 1354.  1                  !
 1355.  1                  d=d*biga
 1356.  1                  !
 1357.  1                  !        replace pivot by reciprocal
 1358.  1                  !
 1359.  1                  a(kk)=1.0_r8/biga
 1360.  1----------->   END DO
 1361.                  !
 1362.                  !        final row and column interchange
 1363.                  !
 1364.                  k=n
 1365.  1-----------<   DO
 1366.  1                  k=(k-1)
 1367.  1                  IF (k .LE. 0) RETURN
 1368.  1                  i=l(k)
 1369.  1                  IF (i > k) THEN
 1370.  1                     jq=n*(k-1)
 1371.  1                     jr=n*(i-1)
 1372.  1             !cdir nodep
 1373.  1 Vr4-------<         DO j=1,n
 1374.  1 Vr4                    jk=jq+j
 1375.  1 Vr4                    hold=a(jk)
 1376.  1 Vr4                    ji=jr+j
 1377.  1 Vr4                    a(jk)=-a(ji)
 1378.  1 Vr4                    a(ji) =hold
 1379.  1 Vr4------->         END DO
 1380.  1                  END IF
 1381.  1                  j=m(k)
 1382.  1                  IF (j .GT. k) THEN
 1383.  1                     ki=k-n
 1384.  1             !cdir nodep
 1385.  1 r8--------<         DO i=1,n
 1386.  1 r8                     ki=ki+n
 1387.  1 r8                     hold=a(ki)
 1388.  1 r8                     ji=ki-k+j
 1389.  1 r8                     a(ki)=-a(ji)
 1390.  1 r8                     a(ji) =hold
 1391.  1 r8-------->         END DO
 1392.  1                  END IF
 1393.  1----------->   END DO
 1394.                END SUBROUTINE iminv
 1395.                SUBROUTINE Balanc(nm,n,a,low,igh,scal)
 1396.                  !
 1397.                  !   ** balanc balances a real general matrix, and isolates
 1398.                  !   **        eigenvalues whenever possible.
 1399.                  !
 1400.                  INTEGER, INTENT(IN)  :: nm, n
 1401.                  REAL(KIND=r8), INTENT(INOUT)  :: a(nm,*)
 1402.                  REAL(KIND=r8), INTENT(OUT)    :: scal(*)
 1403.                  INTEGER, INTENT(OUT) :: low, igh
 1404.                  !
 1405.                  LOGICAL :: noconv
 1406.                  INTEGER :: i,j,k,l,m,jj,iexc
 1407.                  REAL(KIND=r8)    :: c,f,g,r,s,b2,radi
 1408.                  !
 1409.                  !   ** radi  is a machine dependent parameter specifying
 1410.                  !            the base of the machine floating pont representation.
 1411.                  !
 1412.                  radi = 2.0_r8
 1413.                  b2 = radi * radi
 1414.                  k=1
 1415.                  l=n
 1416.                      GOTO 100
 1417.                  !
 1418.                  !   ** In-line procedure for row and column exchange.
 1419.                  !
 1420.                   20 scal (M)=REAL(J,r8)
 1421.                      IF (J .EQ. M) GOTO 50
 1422.                  !
 1423.  Vr4---------<       DO 30 I=1,L
 1424.  Vr4                 F=A(I,J)
 1425.  Vr4                 A(I,J)=A(I,M)
 1426.  Vr4                 A(I,M)=F
 1427.  Vr4--------->    30 CONTINUE
 1428.                  !
 1429.  r8----------<       DO 40 I=K,N
 1430.  r8                  F=A(J,I)
 1431.  r8                  A(J,I)=A(M,I)
 1432.  r8                  A(M,I)=F
 1433.  r8---------->    40 CONTINUE
 1434.                  !
 1435.                   50 GOTO (80,130) IEXC
 1436.                  !
 1437.                  !   ** Search for rows isolating an eigenvalue and push them down.
 1438.                  !
 1439.                   80 IF (L .EQ. 1) GOTO 280
 1440.                      L=L-1
 1441.                  !
 1442.                  !   ** For J = L  step -1 until 1 DO -- .
 1443.                  !
 1444.  1-----------<   100 DO 120 JJ=1,L
 1445.  1                   J=L+1-JJ
 1446.  1               !
 1447.  1 2---------<       DO 110 I=1,L
 1448.  1 2                 IF (I .EQ. J) GOTO 110
 1449.  1 2                 IF (A(J,I) .NE. 0.) GOTO 120
 1450.  1 2--------->   110 CONTINUE
 1451.  1               !
 1452.  1                   M=L
 1453.  1                   IEXC=1
 1454.  1                   GOTO 20
 1455.  1----------->   120 CONTINUE
 1456.                  !
 1457.                      GOTO 140
 1458.                  !
 1459.                  !   ** Search for columns isolating an eigenvalue and push them left.
 1460.                  !
 1461.                  130 K=K+1
 1462.                  !
 1463.  1-----------<   140 DO 170 J=K,L
 1464.  1               !
 1465.  1 2---------<       DO 150 I=K,L
 1466.  1 2                 IF (I .EQ. J) GOTO 150
 1467.  1 2                 IF (A(I,J) .NE. 0.) GOTO 170
 1468.  1 2--------->   150 CONTINUE
 1469.  1               !
 1470.  1                   M=K
 1471.  1                   IEXC=2
 1472.  1                   GOTO 20
 1473.  1----------->   170 CONTINUE
 1474.                  !
 1475.                  !   ** Now balance the submatrix in rows K to L.
 1476.                  !
 1477.  A-----------<       DO 180 I=K,L
 1478.  A                   scal (I)=1.0_r8
 1479.  A----------->   180 CONTINUE
 1480.                  !
 1481.                  !   ** Interative loop for norm reduction.
 1482.                  !
 1483.                  190 NOCONV=.FALSE.
 1484.                  !
 1485.  1-----------<       DO 270 I=K,L
 1486.  1                   C=0.0_r8
 1487.  1                   R=0.0_r8
 1488.  1               !
 1489.  1 Vpr4------<       DO 200 J=K,L
 1490.  1 Vpr4              IF (J .EQ. I) GOTO 200
 1491.  1 Vpr4              C=C+ABS(A(J,I))
 1492.  1 Vpr4              R=R+ABS(A(I,J))
 1493.  1 Vpr4------>   200 CONTINUE
 1494.  1               !
 1495.  1               !   ** Guard against zero C or R due to underflow.
 1496.  1               !
 1497.  1                   IF (C.EQ.0.0_r8 .OR. R.EQ.0.0_r8) GOTO 270
 1498.  1                   G=R/radi
 1499.  1                   F=1.0_r8
 1500.  1                   S=C+R
 1501.  1               210 IF (C .GE. G) GOTO 220
 1502.  1                   F=F*radi
 1503.  1                   C=C*B2
 1504.  1                   GOTO 210
 1505.  1               220 G=R*radi
 1506.  1               230 IF (C .LT.G) GOTO 240
 1507.  1                   F=F/radi
 1508.  1                   C=C/B2
 1509.  1                   GOTO 230
 1510.  1               !
 1511.  1               !   ** Now balance
 1512.  1               !
 1513.  1               240 IF ((C+R)/F .GE. 0.95_r8*S) GOTO 270
 1514.  1                   G=1./F
 1515.  1                   scal (I)=scal (I)*F
 1516.  1                   NOCONV=.TRUE.
 1517.  1               !
 1518.  1 r8--------<       DO 250 J=K,N
 1519.  1 r8                A(I,J)=A(I,J)*G
 1520.  1 r8-------->   250 CONTINUE
 1521.  1               !
 1522.  1 Vr4-------<       DO 260 J=1,L
 1523.  1 Vr4               A(J,I)=A(J,I)*F
 1524.  1 Vr4------->   260 CONTINUE
 1525.  1               !
 1526.  1----------->   270 CONTINUE
 1527.                  !
 1528.                      IF(NOCONV) GOTO 190
 1529.                  !
 1530.                  280 LOW=K
 1531.                      IGH=L
 1532.                  !
 1533.                
 1534.                END SUBROUTINE Balanc
 1535.                SUBROUTINE Balbak(nm,n,low,igh,scal,m,z)
 1536.                  !
 1537.                  !   ** BALBAK forms the eigenvectors of a real general matrix
 1538.                  !             from the eigenvectors of that matrix
 1539.                  !             transformed by BALANC.
 1540.                  !
 1541.                  INTEGER, INTENT(IN) :: nm,n,low,igh,m
 1542.                  REAL(KIND=r8), INTENT(INOUT) :: z(nm,n)
 1543.                  REAL(KIND=r8), INTENT(IN) :: scal(n)
 1544.                  !
 1545.                  INTEGER :: I,J,K,II
 1546.                  REAL(KIND=r8) :: S
 1547.                  !
 1548.                  IF (M .EQ. 0) GOTO 200
 1549.                  IF (IGH .EQ. LOW) GOTO 120
 1550.                  !
 1551.  1-----------<   DO 110 I=LOW,IGH
 1552.  1                 S=scal (I)
 1553.  1               !
 1554.  1               !   ** Left hand eigenvectors are back transformed
 1555.  1               !      if the foregoing statment is replaced by S = 1.0 / SCALE(I) .
 1556.  1               !
 1557.  1 r4--------<   DO 100 J=1,M
 1558.  1 r4              Z(I,J)=Z(I,J)*S
 1559.  1 r4-------->   100 CONTINUE
 1560.  1               !
 1561.  1----------->   110 CONTINUE
 1562.                  !
 1563.                  !   ** For I=LOW-1 step -1 until 1,
 1564.                  !          IGH+1 step 1 until N DO -- .
 1565.                  !
 1566.  1-----------<   120 DO 140 II=1,N
 1567.  1                 I=II
 1568.  1                 IF (I.GE.LOW .AND. I.LE.IGH) GOTO 140
 1569.  1                 IF (I .LT. LOW) I=LOW-II
 1570.  1                 K=INT(scal(I))
 1571.  1                 IF (K .EQ. I) GOTO 140
 1572.  1               !
 1573.  1 r8--------<     DO 130 J=1,M
 1574.  1 r8                  S=Z(I,J)
 1575.  1 r8                  Z(I,J)=Z(K,J)
 1576.  1 r8                  Z(K,J)=S
 1577.  1 r8-------->   130 CONTINUE
 1578.  1               !
 1579.  1----------->   140 CONTINUE
 1580.                  !
 1581.                  200 RETURN
 1582.                END SUBROUTINE Balbak
 1583.                SUBROUTINE Hqr2(nm,n,low,igh,h,wr,wi,z,ierr,matz,machep,tol,*)
 1584.                  !
 1585.                  !    ** HQR2 computes the eigenvalues and/or eigenvectors
 1586.                  !            of a real upper Hessemberg matrix using the
 1587.                  !            QR method.
 1588.                  !
 1589.                  REAL(KIND=r8), INTENT(IN) :: machep, tol
 1590.                  INTEGER, INTENT(IN) :: nm, n, low, igh, matz
 1591.                  INTEGER, INTENT(OUT) :: ierr
 1592.                  REAL(KIND=r8), INTENT(INOUT) :: h(nm,n),z(nm,n)
 1593.                  REAL(KIND=r8), INTENT(OUT) :: wr(n),wi(n)
 1594.                  !
 1595.                  INTEGER :: i,j,k,l,m,en,ll,mm,na,its,mp2,enm2
 1596.                  !
 1597.                  REAL(KIND=r8) :: P,Q,R,S,T,X,W,Y,ZZ,NORM
 1598.                  !
 1599.                  LOGICAL :: NOTLAS
 1600.                  !
 1601.                  !    ** MACHEP is a machine dependent parameter specifying the
 1602.                  !              relative precision of the floating point arithmetic.
 1603.                  !              It must be recomputed and replaced for the specific
 1604.                  !              machine in use.
 1605.                  !
 1606.                      IERR=0
 1607.                      NORM=0.0_r8
 1608.                      K = 1
 1609.                  !
 1610.                  !    ** Store roots isolated by BALANC and compute matrix norm.
 1611.                  !
 1612.  1-----------<       DO 50 I=1,N
 1613.  1               !
 1614.  1 2---------<       DO 40 J=K,N
 1615.  1 2                 IF (ABS(H(I,J)) .LT. TOL) H(I,J)=TOL
 1616.  1 2                 NORM=NORM+ABS(H(I,J))
 1617.  1 2--------->    40 CONTINUE
 1618.  1               !
 1619.  1                   K=I
 1620.  1                   IF (I.GE.LOW .AND. I.LE.IGH) GOTO 50
 1621.  1                   WR(I)=H(I,I)
 1622.  1                   WI(I)=0.0_r8
 1623.  1----------->    50 CONTINUE
 1624.                  !
 1625.                      EN=IGH
 1626.                      T=0.0_r8
 1627.                  !
 1628.                  !    ** Search for next eigenvalues.
 1629.                  !
 1630.                   60 IF (EN .LT. LOW) GOTO 340
 1631.                      ITS=0
 1632.                      NA=EN-1
 1633.                      ENM2=NA-1
 1634.                  !
 1635.                  !    ** Look for single small sub-diagonal element.
 1636.                  !       For L=EN step -1 until LOW DO -- .
 1637.                  !
 1638.  1-----------<    70 DO 80 LL=LOW,EN
 1639.  1                   L=EN+LOW-LL
 1640.  1                   IF (L .EQ. LOW) GOTO 100
 1641.  1                   S=ABS(H(L-1,L-1))+ABS(H(L,L))
 1642.  1                   IF (S .EQ. 0.0_r8) S=NORM
 1643.  1                   IF (ABS(H(L,L-1)) .LE. MACHEP*S) GOTO 100
 1644.  1----------->    80 CONTINUE
 1645.                  !
 1646.                  !    ** Form shift.
 1647.                  !
 1648.                  100 X=H(EN,EN)
 1649.                      IF (L .EQ. EN) GOTO 270
 1650.                      Y=H(NA,NA)
 1651.                      W=H(EN,NA)*H(NA,EN)
 1652.                      IF (L .EQ. NA) GOTO 280
 1653.                      IF (ITS .EQ. 30) GOTO 1000
 1654.                      IF (ITS.NE.10 .AND. ITS.NE.20) GOTO 130
 1655.                  !
 1656.                  !    Form exceptional shift.
 1657.                  !
 1658.                      T=T+X
 1659.                  !
 1660.  r8----------<       DO 120 I=LOW,EN
 1661.  r8                  H(I,I)=H(I,I)-X
 1662.  r8---------->   120 CONTINUE
 1663.                  !
 1664.                      S=ABS(H(EN,NA))+ABS(H(NA,ENM2))
 1665.                      X=0.75_r8*S
 1666.                      Y=X
 1667.                      W=-0.4375_r8*S*S
 1668.                  130 ITS=ITS+1
 1669.                  !
 1670.                  !    ** Look for two consecutive small sub-diagonal elements.
 1671.                  !       For M=EN-2 step -1 until L DO -- .
 1672.                  !
 1673.  1-----------<       DO 140 MM=L,ENM2
 1674.  1                   M=ENM2+L-MM
 1675.  1                   ZZ=H(M,M)
 1676.  1                   R=X-ZZ
 1677.  1                   S=Y-ZZ
 1678.  1                   P=(R*S-W)/H(M+1,M)+H(M,M+1)
 1679.  1                   Q=H(M+1,M+1)-ZZ-R-S
 1680.  1                   R=H(M+2,M+1)
 1681.  1                   S=ABS(P)+ABS(Q)+ABS(R)
 1682.  1                   P=P/S
 1683.  1                   Q=Q/S
 1684.  1                   R=R/S
 1685.  1                   IF (M .EQ. L) GOTO 150
 1686.  1                   IF (ABS(H(M,M-1))*(ABS(Q)+ABS(R)) .LE. MACHEP*ABS(P)* &
 1687.  1                      (ABS(H(M-1,M-1))+ABS(ZZ)+ABS(H(M+1,M+1)))) GOTO 150
 1688.  1----------->   140 CONTINUE
 1689.                  !
 1690.                  150 MP2=M+2
 1691.                  !
 1692.  r8----------<       DO 160 I=MP2,EN
 1693.  r8                  H(I,I-2)=0.0_r8
 1694.  r8                  IF (I .EQ. MP2) GOTO 160
 1695.  r8                  H(I,I-3)=0.0_r8
 1696.  r8---------->   160 CONTINUE
 1697.                  !
 1698.                  !    ** Double QR step involving rows L to END and columns M to EN
 1699.                  !
 1700.  1-----------<       DO 260 K=M,NA
 1701.  1                   NOTLAS=K .NE. NA
 1702.  1                   IF (K .EQ. M) GOTO 170
 1703.  1                   P=H(K,K-1)
 1704.  1                   Q=H(K+1,K-1)
 1705.  1                   R=0.
 1706.  1                   IF(NOTLAS) R=H(K+2,K-1)
 1707.  1                   X=ABS(P)+ABS(Q)+ABS(R)
 1708.  1                   IF (X .EQ. 0.0_r8) GOTO 260
 1709.  1                   P=P/X
 1710.  1                   Q=Q/X
 1711.  1                   R=R/X
 1712.  1               170 S=SIGN(SQRT(P*P+Q*Q+R*R),P)
 1713.  1                   IF (K .EQ. M) GOTO 180
 1714.  1                   H(K,K-1)=-S*X
 1715.  1                   GOTO 190
 1716.  1               180 IF (L .NE. M) H(K,K-1)=-H(K,K-1)
 1717.  1               190 P=P+S
 1718.  1                   X=P/S
 1719.  1                   Y=Q/S
 1720.  1                   ZZ=R/S
 1721.  1                   Q=Q/P
 1722.  1                   R=R/P
 1723.  1               !
 1724.  1               !    ** Row modification
 1725.  1               !
 1726.  1 Vc--------<       DO 210 J=K,N
 1727.  1 Vc                P=H(K,J)+Q*H(K+1,J)
 1728.  1 Vc                IF (.NOT.NOTLAS) GOTO 200
 1729.  1 Vc                P=P+R*H(K+2,J)
 1730.  1 Vc                H(K+2,J)=H(K+2,J)-P*ZZ
 1731.  1 Vc            200 H(K+1,J)=H(K+1,J)-P*Y
 1732.  1 Vc                H(K,J)=H(K,J)-P*X
 1733.  1 Vc-------->   210 CONTINUE
 1734.  1               !
 1735.  1                   J=MIN(EN,K+3)
 1736.  1               !
 1737.  1               !    ** Column modification
 1738.  1               !
 1739.  1 Vr4-------<       DO 230 I=1,J
 1740.  1 Vr4               P=X*H(I,K)+Y*H(I,K+1)
 1741.  1 Vr4               IF (.NOT.NOTLAS) GOTO 220
 1742.  1 Vr4               P=P+ZZ*H(I,K+2)
 1743.  1 Vr4               H(I,K+2)=H(I,K+2)-P*R
 1744.  1 Vr4           220 H(I,K+1)=H(I,K+1)-P*Q
 1745.  1 Vr4               H(I,K)=H(I,K)-P
 1746.  1 Vr4------->   230 CONTINUE
 1747.  1               !
 1748.  1                   IF (MATZ .EQ. 0) GOTO 260
 1749.  1               !
 1750.  1               !    ** Accumulate transformations
 1751.  1               !
 1752.  1 2---------<       DO 250 I=LOW,IGH
 1753.  1 2                 P=X*Z(I,K)+Y*Z(I,K+1)
 1754.  1 2                 IF (.NOT.NOTLAS) GOTO 240
 1755.  1 2                 P=P+ZZ*Z(I,K+2)
 1756.  1 2                 Z(I,K+2)=Z(I,K+2)-P*R
 1757.  1 2             240 IF (ABS(P) .LT. TOL) P=TOL
 1758.  1 2                 Z(I,K+1)=Z(I,K+1)-P*Q
 1759.  1 2                 Z(I,K)=Z(I,K)-P
 1760.  1 2--------->   250 CONTINUE
 1761.  1               !
 1762.  1----------->   260 CONTINUE
 1763.                  !
 1764.                      GOTO 70
 1765.                  !
 1766.                  !    ** One root found.
 1767.                  !
 1768.                  270 H(EN,EN)=X+T
 1769.                      WR(EN)=H(EN,EN)
 1770.                      WI(EN)=0.0_r8
 1771.                      EN=NA
 1772.                      GOTO 60
 1773.                  !
 1774.                  !    ** Two roots found.
 1775.                  !
 1776.                  280 P=(Y-X)*0.5_r8
 1777.                      Q=P*P+W
 1778.                      ZZ=SQRT(ABS(Q))
 1779.                      H(EN,EN)=X+T
 1780.                      X=H(EN,EN)
 1781.                      H(NA,NA)=Y+T
 1782.                      IF (Q .LT. 0.0_r8) GOTO 320
 1783.                  !
 1784.                  !    ** Real pair.
 1785.                  !
 1786.                      ZZ=P+SIGN(ZZ,P)
 1787.                      WR(NA)=X+ZZ
 1788.                      WR(EN)=WR(NA)
 1789.                      IF (ZZ .NE. 0.0_r8) WR(EN)=X-W/ZZ
 1790.                      WI(NA)=0.0_r8
 1791.                      WI(EN)=0.0_r8
 1792.                  !
 1793.                      IF (MATZ .EQ. 0) GOTO 330
 1794.                  !
 1795.                      X=H(EN,NA)
 1796.                      S=ABS(X)+ABS(ZZ)
 1797.                      P=X/S
 1798.                      Q=ZZ/S
 1799.                      R=SQRT(P*P+Q*Q)
 1800.                      P=P/R
 1801.                      Q=Q/R
 1802.                  !
 1803.                  !    ** Row  modification.
 1804.                  !
 1805.  Vp----------<       DO 290 J=NA,N
 1806.  Vp                  ZZ = H(NA,J)
 1807.  Vp                  H(NA,J)=Q*ZZ+P*H(EN,J)
 1808.  Vp                  H(EN,J)=Q*H(EN,J)-P*ZZ
 1809.  Vp---------->   290 CONTINUE
 1810.                  !
 1811.                  !    ** Column modification.
 1812.                  !
 1813.  Vr4---------<       DO 300 I=1,EN
 1814.  Vr4                 ZZ=H(I,NA)
 1815.  Vr4                 H(I,NA)=Q*ZZ+P*H(I,EN)
 1816.  Vr4                 H(I,EN)=Q*H(I,EN)-P*ZZ
 1817.  Vr4--------->   300 CONTINUE
 1818.                  !
 1819.                  !    ** Accumulate transformations.
 1820.                  !
 1821.  Vr4---------<       DO 310 I=LOW,IGH
 1822.  Vr4                 ZZ=Z(I,NA)
 1823.  Vr4                 Z(I,NA)=Q*ZZ+P*Z(I,EN)
 1824.  Vr4                 Z(I,EN)=Q*Z(I,EN)-P*ZZ
 1825.  Vr4--------->   310 CONTINUE
 1826.                  !
 1827.                      GOTO 330
 1828.                  !
 1829.                  !    ** Complex pair
 1830.                  !
 1831.                  320 WR(NA)=X+P
 1832.                      WR(EN)=X+P
 1833.                      WI(NA)=ZZ
 1834.                      WI(EN)=-ZZ
 1835.                  !
 1836.                  330 EN=ENM2
 1837.                  !
 1838.                      GOTO 60
 1839.                  !
 1840.                  340 IF (MATZ .EQ. 0) RETURN
 1841.                  !
 1842.                  !    ** All roots found.
 1843.                  !       Backsubstitute to find vectors of upper triangular form.
 1844.                  !
 1845.                      IF (NORM .EQ. 0.0_r8) GOTO 1001
 1846.                  !
 1847.  VcAr4 I----->       CALL HQR3(NM,N,LOW,IGH,H,WR,WI,Z,MACHEP,NORM)
 1848.                  !
 1849.                      GOTO 1001
 1850.                  !
 1851.                  !    ** Set error - no convergence to an
 1852.                  !       eigenvalue after 30 iterations
 1853.                  !
 1854.                 1000 IERR = EN
 1855.                 1001 RETURN
 1856.                END SUBROUTINE Hqr2
 1857.                SUBROUTINE Hqr3(nm,n,low,igh,h,wr,wi,z,machep,norm)
 1858.                  !
 1859.                  !    ** HQR3 backsubstitutes to find
 1860.                  !            vectors of upper triangular form.
 1861.                  !
 1862.                  INTEGER, INTENT(IN) ::  nm,n,low,igh
 1863.                  REAL(KIND=r8), INTENT(INOUT) ::  h(nm,n)
 1864.                  REAL(KIND=r8), INTENT(IN) ::  wr(n),wi(n),machep,norm
 1865.                  REAL(KIND=r8), INTENT(OUT) :: z(nm,n)
 1866.                
 1867.                  !
 1868.                  INTEGER ::  i,j,k,m,en,ii,jj,na,nn,enm2
 1869.                  REAL(KIND=r8) :: P,Q,R,S,T,X,W,Y,AR,AI,BR,BI,RA,SA,ZZ
 1870.                  !
 1871.                  !    ** For EN=N step -1 until 1 DO -- .
 1872.                  !
 1873.  1-----------<       DO 800 NN=1,N
 1874.  1                   EN=N+1-NN
 1875.  1                   P=WR(EN)
 1876.  1                   Q=WI(EN)
 1877.  1                   NA=EN-1
 1878.  1                   IF (Q) 710,600,800
 1879.  1               !
 1880.  1               !    ** Real vector.
 1881.  1               !
 1882.  1               600 M=EN
 1883.  1                   H(EN,EN)=1.0_r8
 1884.  1                   IF (NA .EQ. 0) GOTO 800
 1885.  1               !
 1886.  1               !    ** For I=EN-1 step -1 until 1 DO -- .
 1887.  1               !
 1888.  1 2---------<       DO 700 II=1,NA
 1889.  1 2                 I=EN-II
 1890.  1 2                 W=H(I,I)-P
 1891.  1 2                 R=H(I,EN)
 1892.  1 2                 IF (M .GT. NA) GOTO 620
 1893.  1 2             !
 1894.  1 2 Vpr4----<       DO 610 J=M,NA
 1895.  1 2 Vpr4            R=R+H(I,J)*H(J,EN)
 1896.  1 2 Vpr4---->   610 CONTINUE
 1897.  1 2             !
 1898.  1 2             620 IF (WI(I) .GE. 0.0_r8) GOTO 630
 1899.  1 2                 ZZ=W
 1900.  1 2                 S=R
 1901.  1 2                 GOTO 700
 1902.  1 2             630 M=I
 1903.  1 2                 IF (WI(I) .NE. 0.0_r8) GOTO 640
 1904.  1 2                 T=W
 1905.  1 2                 IF (W .EQ. 0.0_r8) T=MACHEP*NORM
 1906.  1 2                 H(I,EN)=-R/T
 1907.  1 2                 GOTO 700
 1908.  1 2             !
 1909.  1 2             !    ** Solve real equations.
 1910.  1 2             !
 1911.  1 2             640 X=H(I,I+1)
 1912.  1 2                 Y=H(I+1,I)
 1913.  1 2                 Q=(WR(I)-P)*(WR(I)-P)+WI(I)*WI(I)
 1914.  1 2                 T=(X*S-ZZ*R)/Q
 1915.  1 2                 H(I,EN)=T
 1916.  1 2                 IF (ABS(X) .LE. ABS(ZZ)) GOTO 650
 1917.  1 2                 H(I+1,EN)=(-R-W*T)/X
 1918.  1 2                 GOTO 700
 1919.  1 2             650 H(I+1,EN)=(-S-Y*T)/ZZ
 1920.  1 2             !
 1921.  1 2--------->   700 CONTINUE
 1922.  1               !
 1923.  1               !    ** End real vector.
 1924.  1               !
 1925.  1                   GOTO 800
 1926.  1               !
 1927.  1               !    ** Complex vector.
 1928.  1               !
 1929.  1               710 M=NA
 1930.  1               !
 1931.  1               !    ** Last vector component chosen imaginary so that
 1932.  1               !       eigenvector matrix is triangular.
 1933.  1               !
 1934.  1                   IF (ABS(H(EN,NA)) .LE. ABS(H(NA,EN))) GOTO 720
 1935.  1                   H(NA,NA)=Q/H(EN,NA)
 1936.  1                   H(NA,EN)=-(H(EN,EN)-P)/H(EN,NA)
 1937.  1                   GOTO 730
 1938.  1  I            720 H(NA,NA)=ZD(0.0_r8,-H(NA,EN),H(NA,NA)-P,Q)
 1939.  1  I                H(NA,EN)=ZD(-H(NA,EN),0.0_r8,H(NA,NA)-P,Q)
 1940.  1               730 H(EN,NA)=0.0_r8
 1941.  1                   H(EN,EN)=1.0_r8
 1942.  1                   ENM2=NA-1
 1943.  1                   IF (ENM2 .EQ. 0) GOTO 800
 1944.  1               !
 1945.  1               !    ** For I=EN-2 step -1 until 1 DO -- .
 1946.  1               !
 1947.  1 2---------<       DO 790 II=1,ENM2
 1948.  1 2                 I=NA-II
 1949.  1 2                 W=H(I,I)-P
 1950.  1 2                 RA=0.0_r8
 1951.  1 2                 SA=H(I,EN)
 1952.  1 2             !
 1953.  1 2 Vpr4----<       DO 760 J=M,NA
 1954.  1 2 Vpr4            RA=RA+H(I,J)*H(J,NA)
 1955.  1 2 Vpr4            SA=SA+H(I,J)*H(J,EN)
 1956.  1 2 Vpr4---->   760 CONTINUE
 1957.  1 2             !
 1958.  1 2                 IF (WI(I) .GE. 0.0_r8) GOTO 770
 1959.  1 2                 ZZ=W
 1960.  1 2                 R=RA
 1961.  1 2                 S=SA
 1962.  1 2                 GOTO 790
 1963.  1 2             770 M=I
 1964.  1 2                 IF (WI(I) .NE. 0.0_r8) GOTO 780
 1965.  1 2  I              H(I,NA)=ZD(-RA,-SA,W,Q)
 1966.  1 2  I              H(I,EN)=ZD(-SA,RA,W,Q)
 1967.  1 2                 GOTO 790
 1968.  1 2             !
 1969.  1 2             !    ** Solve complex equations.
 1970.  1 2             !
 1971.  1 2             780 X=H(I,I+1)
 1972.  1 2                 Y=H(I+1,I)
 1973.  1 2                 AR=X*R-ZZ*RA+Q*SA
 1974.  1 2                 AI=X*S-ZZ*SA-Q*RA
 1975.  1 2                 BR=(WR(I)-P)*(WR(I)-P)+WI(I)*WI(I)-Q*Q
 1976.  1 2                 BI=(WR(I)-P)*2.0_r8*Q
 1977.  1 2                 IF (BR.EQ.0.0_r8 .AND. BI.EQ.0.0_r8) BR=MACHEP*NORM*&
 1978.  1 2                    (ABS(W)+ABS(Q)+ABS(X)+ABS(Y)+ABS(ZZ))
 1979.  1 2  I              H(I,NA)=ZD(AR,AI,BR,BI)
 1980.  1 2  I              H(I,EN)=ZD(AI,-AR,BR,BI)
 1981.  1 2                 IF (ABS(X) .LE. (ABS(ZZ)+ABS(Q))) GOTO 785
 1982.  1 2                 H(I+1,NA)=(-RA-W*H(I,NA)+Q*H(I,EN))/X
 1983.  1 2                 H(I+1,EN)=(-SA-W*H(I,EN)-Q*H(I,NA))/X
 1984.  1 2                 GOTO 790
 1985.  1 2  I          785 H(I+1,NA)=ZD(-R-Y*H(I,NA),-S-Y*H(I,EN),ZZ,Q)
 1986.  1 2  I              H(I+1,EN)=ZD(-S-Y*H(I,EN),R+Y*H(I,NA),ZZ,Q)
 1987.  1 2--------->   790 CONTINUE
 1988.  1               !
 1989.  1               !    ** End complex vector.
 1990.  1               !
 1991.  1----------->   800 CONTINUE
 1992.                  !
 1993.                  !    ** End back substitution.
 1994.                  !       vectors of isolated roots.
 1995.                  !
 1996.  1-----------<       DO 840 I=1,N
 1997.  1                   IF (I.GE.LOW .AND. I.LE.IGH) GOTO 840
 1998.  1 r8--------<       DO 820 J=I,N
 1999.  1 r8                Z(I,J)=H(I,J)
 2000.  1 r8-------->   820 CONTINUE
 2001.  1               !
 2002.  1----------->   840 CONTINUE
 2003.                  !
 2004.                  !    ** Multiply by transformations matrix to give
 2005.                  !       vectors of original full matrix.
 2006.                  !       For J=N step -1 until LOW DO -- .
 2007.                  !
 2008.  1-----------<       DO 880 JJ=LOW,N
 2009.  1                   J=N+LOW-JJ
 2010.  1                   M=MIN(J,IGH)
 2011.  1               !
 2012.  1 A---------<       DO 880 I=LOW,IGH
 2013.  1 A                 ZZ=0.0_r8
 2014.  1 A             !
 2015.  1 A r4------<       DO 860 K=LOW,M
 2016.  1 A r4              ZZ=ZZ+Z(I,K)*H(K,J)
 2017.  1 A r4------>   860 CONTINUE
 2018.  1 A             !
 2019.  1 A                 Z(I,J)=ZZ
 2020.  1 A-------->>   880 CONTINUE
 2021.                  !
 2022.                      CONTAINS
 2023.                         FUNCTION ZD(A1,A2,A3,A4)
 2024.                            REAL(KIND=r8), INTENT(in) :: A1,A2,A3,A4
 2025.                            REAL(KIND=r8) :: ZD
 2026.                
 2027.                            ZD=(A1*A3+A2*A4)/(A3*A3+A4*A4)
 2028.                         END FUNCTION ZD
 2029.                END SUBROUTINE Hqr3
 2030.                SUBROUTINE ortran(nm,n,low,igh,a,ort,z,tolh)
 2031.                  !
 2032.                  !   ** ORTRAN accumulates the orthogonal similarity
 2033.                  !             tranformations used in the reduction of a real
 2034.                  !             general matrix to upper Hessemberg form
 2035.                  !             by ORTHES.
 2036.                  !
 2037.                  INTEGER, INTENT(IN) ::  nm,n,low,igh
 2038.                  REAL(KIND=r8), INTENT(IN) ::  a(nm,n), tolh
 2039.                  REAL(KIND=r8), INTENT(OUT) ::  z(nm,n),ort(n)
 2040.                  !
 2041.                  INTEGER ::  i,j,kl,mm,mp,mp1
 2042.                  REAL(KIND=r8) :: g
 2043.                  !
 2044.                  !   ** Initialize Z to identity matrix
 2045.                  !
 2046.  iAr8--------<       DO 80 I=1,N
 2047.  iAr8 i------<       DO 60 J=1, N
 2048.  iAr8 i              Z(I,J)=0.0_r8
 2049.  iAr8 i------>    60 CONTINUE
 2050.  iAr8                Z(I,I)=1.0_r8
 2051.  iAr8-------->    80 CONTINUE
 2052.                  !
 2053.                      KL=IGH-LOW-1
 2054.                      IF (KL .LT. 1) GOTO 200
 2055.                  !
 2056.                  !   ** For MP = IGH-1 step -1 until LOW+1 DO --.
 2057.                  !
 2058.  1-----------<       DO 140 MM=1,KL
 2059.  1                   MP=IGH-MM
 2060.  1                   IF (A(MP,MP-1) .EQ. 0.0_r8) GOTO 140
 2061.  1                   MP1=MP+1
 2062.  1               !
 2063.  1 A---------<       DO 100 I=MP1,IGH
 2064.  1 A                 ORT(I)=A(I,MP-1)
 2065.  1 A--------->   100 CONTINUE
 2066.  1               !
 2067.  1 2---------<       DO 130 J=MP,IGH
 2068.  1 2                 G=0.0_r8
 2069.  1 2             !
 2070.  1 2 Vr4-----<       DO 110 I=MP,IGH
 2071.  1 2 Vr4             G=G+ORT(I)*Z(I,J)
 2072.  1 2 Vr4----->   110 CONTINUE
 2073.  1 2             !
 2074.  1 2             !   ** Divisor below is negative of H formed in ORTHES
 2075.  1 2             !      double division avoids possible underflow.
 2076.  1 2             !
 2077.  1 2                 G=(G/ORT(MP))/A(MP,MP-1)
 2078.  1 2             !
 2079.  1 2 3-------<       DO 120 I=MP,IGH
 2080.  1 2 3               Z(I,J)=Z(I,J)+G*ORT(I)
 2081.  1 2 3               IF (ABS(Z(I,J)) .LT. TOLH) Z(I,J)=TOLH
 2082.  1 2 3------->   120 CONTINUE
 2083.  1 2             !
 2084.  1 2--------->   130 CONTINUE
 2085.  1               !
 2086.  1----------->   140 CONTINUE
 2087.                  !
 2088.                  200 RETURN
 2089.                END SUBROUTINE Ortran
 2090.                
 2091.                SUBROUTINE Orthes(nm,n,low,igh,a,ort,tolh)
 2092.                  !
 2093.                  !   ** ORTHES reduces a real general matrix to upper
 2094.                  !             Hessemberg form using orthogonal similarity.
 2095.                  !
 2096.                  INTEGER, INTENT(IN) :: nm, n, low, igh
 2097.                  REAL(KIND=r8), INTENT(INOUT) :: a(nm,n)
 2098.                  REAL(KIND=r8), INTENT(OUT) :: ort(igh)
 2099.                  REAL(KIND=r8), INTENT(IN) :: tolh
 2100.                  !
 2101.                  INTEGER :: I,J,M,II,JJ,LA,MP,KP1
 2102.                  REAL(KIND=r8) :: F,G,H,SCAL
 2103.                  !
 2104.                      LA=IGH-1
 2105.                      KP1=LOW+1
 2106.                      IF (LA .LT. KP1) GOTO 200
 2107.                  !
 2108.  1-----------<       DO 180 M=KP1,LA
 2109.  1                   H=0.0_r8
 2110.  1                   ORT(M)=0.0_r8
 2111.  1                   SCAL=0.0_r8
 2112.  1               !
 2113.  1               !   ** Scale column.
 2114.  1               !
 2115.  1 Vr4-------<       DO 90 I=M,IGH
 2116.  1 Vr4               SCAL=SCAL+ABS(A(I,M-1))
 2117.  1 Vr4------->    90 CONTINUE
 2118.  1               !
 2119.  1                   IF (SCAL .EQ. 0.0_r8) GOTO 180
 2120.  1                   MP=M+IGH
 2121.  1               !
 2122.  1               !   ** For I = IGH step -1 until M DO -- .
 2123.  1               !
 2124.  1 Vr4-------<       DO 100 II=M,IGH
 2125.  1 Vr4               I=MP-II
 2126.  1 Vr4               ORT(I)=A(I,M-1)/SCAL
 2127.  1 Vr4               H=H+ORT(I)*ORT(I)
 2128.  1 Vr4------->   100 CONTINUE
 2129.  1               !
 2130.  1                   G=-SIGN(SQRT(H),ORT(M))
 2131.  1                   H=H-ORT(M)*G
 2132.  1                   ORT(M)=ORT(M)-G
 2133.  1               !
 2134.  1               !   ** Form (I-(U*UT)/H) * A .
 2135.  1               !
 2136.  1 2---------<       DO 130 J=M,N
 2137.  1 2                 F=0.0_r8
 2138.  1 2             !
 2139.  1 2             !   ** For I = IGH step -1 until M DO -- .
 2140.  1 2             !
 2141.  1 2 Vr4-----<       DO 110 II=M,IGH
 2142.  1 2 Vr4             I=MP-II
 2143.  1 2 Vr4             F=F+ORT(I)*A(I,J)
 2144.  1 2 Vr4----->   110 CONTINUE
 2145.  1 2             !
 2146.  1 2                 F=F/H
 2147.  1 2             !
 2148.  1 2 3-------<       DO 120 I=M,IGH
 2149.  1 2 3               A(I,J)=A(I,J)-F*ORT(I)
 2150.  1 2 3               IF (ABS(A(I,J)) .LT. TOLH) A(I,J)=TOLH
 2151.  1 2 3------->   120 CONTINUE
 2152.  1 2             !
 2153.  1 2--------->   130 CONTINUE
 2154.  1               !
 2155.  1               !   ** Form (I-(U*UT)/H) * A * (I-(U*UT)/H) .
 2156.  1               !
 2157.  1 2---------<       DO 160 I=1,IGH
 2158.  1 2                 F=0.0_r8
 2159.  1 2             !
 2160.  1 2             !   ** For J = IGH step -1 until M DO -- .
 2161.  1 2             !
 2162.  1 2 r4------<       DO 140 JJ=M,IGH
 2163.  1 2 r4              J=MP-JJ
 2164.  1 2 r4              F=F+ORT(J)*A(I,J)
 2165.  1 2 r4------>   140 CONTINUE
 2166.  1 2             !
 2167.  1 2                 F=F/H
 2168.  1 2             !
 2169.  1 2 r4------<       DO 150 J=M,IGH
 2170.  1 2 r4              A(I,J)=A(I,J)-F*ORT(J)
 2171.  1 2 r4              IF (ABS(A(I,J)) .LT. TOLH) A(I,J)=TOLH
 2172.  1 2 r4------>   150 CONTINUE
 2173.  1 2             !
 2174.  1 2--------->   160 CONTINUE
 2175.  1               !
 2176.  1                   ORT(M)=SCAL*ORT(M)
 2177.  1                   A(M,M-1)=SCAL*G
 2178.  1                   IF (ABS(A(M,M-1)) .LT. TOLH) A(M,M-1)=TOLH
 2179.  1----------->   180 CONTINUE
 2180.                  !
 2181.                  200 RETURN
 2182.                END SUBROUTINE Orthes
 2183.                
 2184.                
 2185.                SUBROUTINE Rg(nm,n,a,wr,wi,matz,z,ierr,eps,scal,ort)
 2186.                  !
 2187.                  !   ** RG calculates the eigenvalues and/or eigenvectors
 2188.                  !         of a real general matrix.
 2189.                  !
 2190.                  !   ** Arguments:
 2191.                  !
 2192.                  !   ** NM - row dimension of matrix A at the calling routine: Input
 2193.                  !           Integer variable.
 2194.                  !
 2195.                  !   ** N - current dimension of matrix A: Input
 2196.                  !           Integer variable; must be .LE. NM.
 2197.                  !
 2198.                  !   ** A - real matrix (destroyed): Input
 2199.                  !          Real array with dimensions A(NM,N).
 2200.                  !
 2201.                  !   ** WR - real part of the eigenvalues: Output
 2202.                  !           Real vector with dimensions WR(N).
 2203.                  !
 2204.                  !   ** WI - imaginary part of the eigenvalues: Output
 2205.                  !           Real vector with dimensions WI(N).
 2206.                  !
 2207.                  !           OBS: There is nor ordenation for the eigenvalues, except
 2208.                  !                that for the conjuate complex pairs are put together
 2209.                  !                and the pair with real positive imaginary part comes
 2210.                  !                in first place.
 2211.                  !
 2212.                  !   ** MATZ - integer variable: Input
 2213.                  !             Meaning:
 2214.                  !   ** MATZ = 0 - only eigenvalues non-filtered
 2215.                  !   ** MATZ = 1 - eigenvalues and eigenvectors normalized and filtered
 2216.                  !   ** MATZ = 2 - eigenvalues and eigenvectors non-norm. and non-filt.
 2217.                  !   ** MATZ = 3 - eigenvalues and eigenvectors normalized, non-filt.
 2218.                  !   **            and without zeroes for .LE. TOLx (see ZNORMA).
 2219.                  !
 2220.                  !   ** Z - Eigenvectors: real and imaginary parts, so that:
 2221.                  !          a) for a real J-th eigenvalue WR(J).NE.0.AND.WI(J).EQ.0,
 2222.                  !             the J-th eigenvector is (Z(I,J),I=1,N);
 2223.                  !          b) for a imaginary J-th eigenvalue with WI(J).NE.0,
 2224.                  !             the (J+1)-th eigenvalue is its conjugate complex;
 2225.                  !             the J-th eigenvector has real part (Z(I,J),I=1,N) and
 2226.                  !             imaginary part (Z(I,J+1),I=1,N), and the (J+1)-th
 2227.                  !             eigenvector has real part (Z(I,J),I=1,N) and
 2228.                  !             imaginary part (-Z(I,J+1),I=1,N).
 2229.                  !          Real array with dimensions Z(NM,N): Output
 2230.                  !
 2231.                  !   ** IERR - is a integer variable: Output, indicating:
 2232.                  !             - if N .GT. NM, then the routine RG stop calculations
 2233.                  !               and returns with IERR=10*N;
 2234.                  !             - if 30 iteractions is exceeded for the J-th eigenvalue
 2235.                  !               computation, then the routine RG stop calculations
 2236.                  !               and returns with IERR=J and the J+1, J+2, ..., N
 2237.                  !               eigenvalues are computed, but none eigenvector is
 2238.                  !               computed;
 2239.                  !             - for a normal termination IERR is set zero.
 2240.                  !
 2241.                  !   ** EPS - is a machine dependent parameter specifying the
 2242.                  !            relative precision of the floating point arithmetic.
 2243.                  !            It must be recomputed for the specific machine in use.
 2244.                  !            It is 2**(-20) for 32 bitsand 2**(-50) for 64 bits.
 2245.                  !            Real variable: Input.
 2246.                  !
 2247.                  !   ** TOLH - tolerance value to filter the Hessemberg matrix.
 2248.                  !             Real variable: Local.
 2249.                  !
 2250.                  !   ** TOLW - tolerance value to filter the eigenvalues.
 2251.                  !             Real variable: Local.
 2252.                  !
 2253.                  !   ** TOLZ - tolerance value to filter the eigenvectors.
 2254.                  !             Real variable: Local.
 2255.                  !
 2256.                  !   ** SCALE - working real vector with dimensions SCALE(N).
 2257.                  !
 2258.                  !   ** ORT - working real vector with dimensions ORT(N).
 2259.                  !
 2260.                  INTEGER, INTENT(IN) ::  nm,n,matz
 2261.                  REAL(KIND=r8), INTENT(INOUT) :: a(nm,n)
 2262.                  REAL(KIND=r8), INTENT(OUT) :: z(nm,n),wr(n),wi(n),scal(n),ort(n)
 2263.                  REAL(KIND=r8), INTENT(IN) :: eps
 2264.                  INTEGER, INTENT(OUT) :: ierr
 2265.                  !
 2266.                  INTEGER :: low,igh
 2267.                  REAL(KIND=r8) :: TOLH,TOLW,TOLZ
 2268.                  !
 2269.                      TOLH=EPS
 2270.                      TOLW=EPS
 2271.                      TOLZ=EPS
 2272.                  !
 2273.                      IF (N .GT. NM) THEN
 2274.                      IERR=10*N
 2275.                      RETURN
 2276.                      ENDIF
 2277.                  !
 2278.                  !   Performing the balance of the input real general matrix
 2279.                  !   (in place).
 2280.                  !
 2281.  VcAr4 I----->       CALL BALANC(NM,N,A,LOW,IGH,SCAL)
 2282.                  !
 2283.                  !   Performing the redution of the balanced matrix (in place) to
 2284.                  !   the Hessemberg superior form. It is used similarity orthogonal
 2285.                  !   transformations.
 2286.                  !
 2287.  Vcr4 I------>       CALL ORTHES(NM,N,LOW,IGH,A,ORT,TOLH)
 2288.                  !
 2289.                      IF (MATZ .NE. 0) THEN
 2290.                  !
 2291.                  !   Saving the transformations above for eigenvector computations.
 2292.                  !
 2293.  VpAr4 I----->       CALL ORTRAN(NM,N,LOW,IGH,A,ORT,Z,TOLH)
 2294.                      ENDIF
 2295.                  !
 2296.                  !   Computing the eigenvalues/eigenvectors of the Hessemberg matrix
 2297.                  !   using the QR method.
 2298.                  !
 2299.                      CALL HQR2(NM,N,LOW,IGH,A,WR,WI,Z,IERR,MATZ,EPS,TOLH,*10)
 2300.                  !
 2301.                      IF (IERR .EQ. 0) THEN
 2302.                  !
 2303.                  !   Back-transforming the eigenvectors of the Hessembeg matrix to
 2304.                  !   the eigenvectors of the original input matrix.
 2305.                  !
 2306.  Vcr4 I------>       CALL BALBAK(NM,N,LOW,IGH,SCAL,N,Z)
 2307.                  !
 2308.                  !   Normalizing and filtering the eigenvectors (See MATZ above and
 2309.                  !   comments inside ZNORMA routine).
 2310.                  !
 2311.  VcAr4 I----->       CALL ZNORMA(NM,N,WR,WI,Z,MATZ,A,TOLW,TOLZ)
 2312.                      ENDIF
 2313.                  !
 2314.                   10 IF (IERR .EQ. 0) RETURN
 2315.                      WRITE(nfprt,20) IERR
 2316.                   20 FORMAT(/,1X,'**** The',I4,1X,'-th Eigenvalue Did Not Converge ',&
 2317.                             '****',//)
 2318.                  !
 2319.                
 2320.                END SUBROUTINE Rg
 2321.                SUBROUTINE Tql2_I(nm,n,d,e,z,eps,ierr)
 2322.                  !
 2323.                  !   Abstract: Computes the Eigenvalues and Eigenvectors of a real
 2324.                  !             Symmetric Tridiagonal Matrix Using the QL Method.
 2325.                  !
 2326.                  INTEGER, INTENT(IN) ::  nm
 2327.                  INTEGER, INTENT(IN) ::  n
 2328.                  INTEGER, INTENT(OUT) ::  ierr
 2329.                  REAL(KIND=r8), INTENT(INOUT) ::  d(n),e(n),z(nm,n)
 2330.                  REAL(KIND=r8), INTENT(IN) :: eps
 2331.                  !
 2332.                  REAL(KIND=r8) :: B,C,F,G,H,P,R,S
 2333.                  INTEGER :: itm=50
 2334.                  INTEGER ::  i,j,k,l,m,ii,l1,mml
 2335.                  !
 2336.                  !   EPS is a Machine Dependent Parameter Specifying the
 2337.                  !       Relative Precision of the Floating Point Arithmetic.
 2338.                  !
 2339.                  !   EPS = 2.0 ** -50 - 64 BITS
 2340.                  !   EPS = 2.0 ** -20 - 32 BITS
 2341.                  !
 2342.                      IERR=0
 2343.                  !
 2344.  Vr4---------<       DO 100 I=2,N
 2345.  Vr4                 E(I-1)=E(I)
 2346.  Vr4--------->   100 CONTINUE
 2347.                  !
 2348.                      F=0.0_r8
 2349.                      B=0.0_r8
 2350.                      E(N)=0.0_r8
 2351.                  !
 2352.  1-----------<       DO 240 L=1,N
 2353.  1                   J=0
 2354.  1                   H=EPS*(ABS(D(L))+ABS(E(L)))
 2355.  1                   IF (B .LT. H) B=H
 2356.  1               !
 2357.  1               !   Look for Small Sub-diagonal Element.
 2358.  1               !
 2359.  1 2---------<       DO 110 M=L,N
 2360.  1 2                 IF (ABS(E(M)) .LE. B) GOTO 120
 2361.  1 2             !
 2362.  1 2             !   E(N) is Always Zero, so there is No Exit
 2363.  1 2             !        Through the Bottom of the Loop.
 2364.  1 2             !
 2365.  1 2--------->   110 CONTINUE
 2366.  1               !
 2367.  1               120 IF (M .EQ. L) GOTO 220
 2368.  1               130 IF (J .EQ. ITM) THEN
 2369.  1               !
 2370.  1               !   No Convergence to an Eigenvalue after 50 Iterations.
 2371.  1               !
 2372.  1                   IERR=L
 2373.  1                   WRITE(nfprt,400) L
 2374.  1               400 FORMAT(/,' *** The',I4,'-th Eigenvalue Did Not Converge ***',/)
 2375.  1                   RETURN
 2376.  1                   ENDIF
 2377.  1               !
 2378.  1                   J=J+1
 2379.  1               !
 2380.  1               !   Form Shift.
 2381.  1               !
 2382.  1                   L1=L+1
 2383.  1                   G=D(L)
 2384.  1                   P=(D(L1)-G)/(2.0_r8*E(L))
 2385.  1                   R=SQRT(P*P+1.0_r8)
 2386.  1                   D(L)=E(L)/(P+SIGN(R,P))
 2387.  1                   H=G-D(L)
 2388.  1               !
 2389.  1 Vr4-------<       DO 140 I=L1,N
 2390.  1 Vr4               D(I)=D(I)-H
 2391.  1 Vr4------->   140 CONTINUE
 2392.  1               !
 2393.  1                   F=F+H
 2394.  1               !
 2395.  1               !   QL Transformation.
 2396.  1               !
 2397.  1                   P=D(M)
 2398.  1                   C=1.0_r8
 2399.  1                   S=0.0_r8
 2400.  1                   MML=M-L
 2401.  1               !
 2402.  1               !   For I=M-1 Step -1 Until L DO -- .
 2403.  1               !
 2404.  1 2---------<       DO 200 II=1,MML
 2405.  1 2                 I=M-II
 2406.  1 2                 G=C*E(I)
 2407.  1 2                 H=C*P
 2408.  1 2             !
 2409.  1 2                 IF (ABS(P) .LT. ABS(E(I))) THEN
 2410.  1 2                 C=P/E(I)
 2411.  1 2                 R=SQRT(C*C+1.0_r8)
 2412.  1 2                 E(I+1)=S*E(I)*R
 2413.  1 2                 S=1.0_r8/R
 2414.  1 2                 C=C*S
 2415.  1 2                 ELSE
 2416.  1 2                 C=E(I)/P
 2417.  1 2                 R=SQRT(C*C+1.0_r8)
 2418.  1 2                 E(I+1)=S*P*R
 2419.  1 2                 S=C/R
 2420.  1 2                 C=1.0_r8/R
 2421.  1 2                 ENDIF
 2422.  1 2             !
 2423.  1 2                 P=C*D(I)-S*G
 2424.  1 2                 D(I+1)=H+S*(C*G+S*D(I))
 2425.  1 2             !
 2426.  1 2             !   Form Vector.
 2427.  1 2             !
 2428.  1 2 Vr4-----<       DO 180 K=1,N
 2429.  1 2 Vr4             H=Z(K,I+1)
 2430.  1 2 Vr4             Z(K,I+1)=S*Z(K,I)+C*H
 2431.  1 2 Vr4             Z(K,I)=C*Z(K,I)-S*H
 2432.  1 2 Vr4----->   180 CONTINUE
 2433.  1 2             !
 2434.  1 2--------->   200 CONTINUE
 2435.  1               !
 2436.  1                   E(L)=S*P
 2437.  1                   D(L)=C*P
 2438.  1                   IF (ABS(E(L)) .GT. B) GOTO 130
 2439.  1               220 D(L)=D(L)+F
 2440.  1----------->   240 CONTINUE
 2441.                  !
 2442.                  !   Order Eigenvalues and Eigenvectors.
 2443.                  !
 2444.  1-----------<       DO 300 II=2,N
 2445.  1                   I=II-1
 2446.  1                   K=I
 2447.  1                   P=D(I)
 2448.  1               !
 2449.  1 A---------<       DO 260 J=II,N
 2450.  1 A                 IF (D(J) .LT. P) THEN
 2451.  1 A                 K=J
 2452.  1 A                 P=D(J)
 2453.  1 A                 ENDIF
 2454.  1 A--------->   260 CONTINUE
 2455.  1               !
 2456.  1                   IF (K .NE. I) THEN
 2457.  1                   D(K)=D(I)
 2458.  1                   D(I)=P
 2459.  1               !
 2460.  1 Vr4-------<       DO 280 J=1,N
 2461.  1 Vr4               P=Z(J,I)
 2462.  1 Vr4               Z(J,I)=Z(J,K)
 2463.  1 Vr4               Z(J,K)=P
 2464.  1 Vr4------->   280 CONTINUE
 2465.  1                   ENDIF
 2466.  1               !
 2467.  1----------->   300 CONTINUE
 2468.                  !
 2469.                
 2470.                END SUBROUTINE Tql2_I
 2471.                SUBROUTINE Tql2_I8(nm,n,d,e,z,eps,ierr)
 2472.                  !
 2473.                  !   Abstract: Computes the Eigenvalues and Eigenvectors of a real
 2474.                  !             Symmetric Tridiagonal Matrix Using the QL Method.
 2475.                  !
 2476.                  INTEGER, INTENT(IN) ::  nm
 2477.                  INTEGER(KIND=i8), INTENT(IN) ::  n
 2478.                  INTEGER, INTENT(OUT) ::  ierr
 2479.                  REAL(KIND=r8), INTENT(INOUT) ::  d(n),e(n),z(nm,n)
 2480.                  REAL(KIND=r8), INTENT(IN) :: eps
 2481.                  !
 2482.                  REAL(KIND=r8) :: B,C,F,G,H,P,R,S
 2483.                  INTEGER :: itm=50
 2484.                  INTEGER ::  i,j,k,l,m,ii,l1,mml
 2485.                  !
 2486.                  !   EPS is a Machine Dependent Parameter Specifying the
 2487.                  !       Relative Precision of the Floating Point Arithmetic.
 2488.                  !
 2489.                  !   EPS = 2.0 ** -50 - 64 BITS
 2490.                  !   EPS = 2.0 ** -20 - 32 BITS
 2491.                  !
 2492.                      IERR=0
 2493.                  !
 2494.  Vr4---------<       DO 100 I=2,N
 2495.  Vr4                 E(I-1)=E(I)
 2496.  Vr4--------->   100 CONTINUE
 2497.                  !
 2498.                      F=0.0_r8
 2499.                      B=0.0_r8
 2500.                      E(N)=0.0_r8
 2501.                  !
 2502.  1-----------<       DO 240 L=1,N
 2503.  1                   J=0
 2504.  1                   H=EPS*(ABS(D(L))+ABS(E(L)))
 2505.  1                   IF (B .LT. H) B=H
 2506.  1               !
 2507.  1               !   Look for Small Sub-diagonal Element.
 2508.  1               !
 2509.  1 2---------<       DO 110 M=L,N
 2510.  1 2                 IF (ABS(E(M)) .LE. B) GOTO 120
 2511.  1 2             !
 2512.  1 2             !   E(N) is Always Zero, so there is No Exit
 2513.  1 2             !        Through the Bottom of the Loop.
 2514.  1 2             !
 2515.  1 2--------->   110 CONTINUE
 2516.  1               !
 2517.  1               120 IF (M .EQ. L) GOTO 220
 2518.  1               130 IF (J .EQ. ITM) THEN
 2519.  1               !
 2520.  1               !   No Convergence to an Eigenvalue after 50 Iterations.
 2521.  1               !
 2522.  1                   IERR=L
 2523.  1                   WRITE(nfprt,400) L
 2524.  1               400 FORMAT(/,' *** The',I4,'-th Eigenvalue Did Not Converge ***',/)
 2525.  1                   RETURN
 2526.  1                   ENDIF
 2527.  1               !
 2528.  1                   J=J+1
 2529.  1               !
 2530.  1               !   Form Shift.
 2531.  1               !
 2532.  1                   L1=L+1
 2533.  1                   G=D(L)
 2534.  1                   P=(D(L1)-G)/(2.0_r8*E(L))
 2535.  1                   R=SQRT(P*P+1.0_r8)
 2536.  1                   D(L)=E(L)/(P+SIGN(R,P))
 2537.  1                   H=G-D(L)
 2538.  1               !
 2539.  1 Vr4-------<       DO 140 I=L1,N
 2540.  1 Vr4               D(I)=D(I)-H
 2541.  1 Vr4------->   140 CONTINUE
 2542.  1               !
 2543.  1                   F=F+H
 2544.  1               !
 2545.  1               !   QL Transformation.
 2546.  1               !
 2547.  1                   P=D(M)
 2548.  1                   C=1.0_r8
 2549.  1                   S=0.0_r8
 2550.  1                   MML=M-L
 2551.  1               !
 2552.  1               !   For I=M-1 Step -1 Until L DO -- .
 2553.  1               !
 2554.  1 2---------<       DO 200 II=1,MML
 2555.  1 2                 I=M-II
 2556.  1 2                 G=C*E(I)
 2557.  1 2                 H=C*P
 2558.  1 2             !
 2559.  1 2                 IF (ABS(P) .LT. ABS(E(I))) THEN
 2560.  1 2                 C=P/E(I)
 2561.  1 2                 R=SQRT(C*C+1.0_r8)
 2562.  1 2                 E(I+1)=S*E(I)*R
 2563.  1 2                 S=1.0_r8/R
 2564.  1 2                 C=C*S
 2565.  1 2                 ELSE
 2566.  1 2                 C=E(I)/P
 2567.  1 2                 R=SQRT(C*C+1.0_r8)
 2568.  1 2                 E(I+1)=S*P*R
 2569.  1 2                 S=C/R
 2570.  1 2                 C=1.0_r8/R
 2571.  1 2                 ENDIF
 2572.  1 2             !
 2573.  1 2                 P=C*D(I)-S*G
 2574.  1 2                 D(I+1)=H+S*(C*G+S*D(I))
 2575.  1 2             !
 2576.  1 2             !   Form Vector.
 2577.  1 2             !
 2578.  1 2 Vr4-----<       DO 180 K=1,N
 2579.  1 2 Vr4             H=Z(K,I+1)
 2580.  1 2 Vr4             Z(K,I+1)=S*Z(K,I)+C*H
 2581.  1 2 Vr4             Z(K,I)=C*Z(K,I)-S*H
 2582.  1 2 Vr4----->   180 CONTINUE
 2583.  1 2             !
 2584.  1 2--------->   200 CONTINUE
 2585.  1               !
 2586.  1                   E(L)=S*P
 2587.  1                   D(L)=C*P
 2588.  1                   IF (ABS(E(L)) .GT. B) GOTO 130
 2589.  1               220 D(L)=D(L)+F
 2590.  1----------->   240 CONTINUE
 2591.                  !
 2592.                  !   Order Eigenvalues and Eigenvectors.
 2593.                  !
 2594.  1-----------<       DO 300 II=2,N
 2595.  1                   I=II-1
 2596.  1                   K=I
 2597.  1                   P=D(I)
 2598.  1               !
 2599.  1 A---------<       DO 260 J=II,N
 2600.  1 A                 IF (D(J) .LT. P) THEN
 2601.  1 A                 K=J
 2602.  1 A                 P=D(J)
 2603.  1 A                 ENDIF
 2604.  1 A--------->   260 CONTINUE
 2605.  1               !
 2606.  1                   IF (K .NE. I) THEN
 2607.  1                   D(K)=D(I)
 2608.  1                   D(I)=P
 2609.  1               !
 2610.  1 Vr4-------<       DO 280 J=1,N
 2611.  1 Vr4               P=Z(J,I)
 2612.  1 Vr4               Z(J,I)=Z(J,K)
 2613.  1 Vr4               Z(J,K)=P
 2614.  1 Vr4------->   280 CONTINUE
 2615.  1                   ENDIF
 2616.  1               !
 2617.  1----------->   300 CONTINUE
 2618.                  !
 2619.                
 2620.                END SUBROUTINE Tql2_I8
 2621.                SUBROUTINE Tred2(nm,n,a,d,e,z)
 2622.                  !
 2623.                  INTEGER, INTENT(IN) :: nm
 2624.                  INTEGER(KIND=i8), INTENT(IN) :: n
 2625.                  REAL(KIND=r8), INTENT(IN) :: a(nm,n)
 2626.                  REAL(KIND=r8), INTENT(OUT) :: d(n),e(n),z(nm,n)
 2627.                  !
 2628.                  REAL(KIND=r8) :: F,G,H,HH,SCAL
 2629.                  INTEGER ::  I,J,K,L,II,JP1
 2630.                  !
 2631.  1-----------<       DO 100 I=1,N
 2632.  1 r8--------<       DO 100 J=1,I
 2633.  1 r8                Z(I,J)=A(I,J)
 2634.  1 r8------->>   100 CONTINUE
 2635.                  !
 2636.                      IF (N .EQ. 1) GOTO 320
 2637.                  !   for I=N step -1 until 2 do
 2638.  1-----------<       DO 300 II=2,N
 2639.  1                   I=N+2-II
 2640.  1                   L=I-1
 2641.  1                   H=0.0_r8
 2642.  1                   SCAL=0.0_r8
 2643.  1                   IF (L .LT. 2) GOTO 130
 2644.  1               !   scale row (algol tol then not needed)
 2645.  1 Vp--------<       DO 120 K=1,L
 2646.  1 Vp                SCAL=SCAL+ABS(Z(I,K))
 2647.  1 Vp-------->   120 CONTINUE
 2648.  1               !
 2649.  1                   IF (SCAL .NE. 0.0_r8 ) GOTO 140
 2650.  1               130 E(I)=Z(I,L)
 2651.  1                   GOTO 290
 2652.  1               !
 2653.  1 Vpr2------<   140 DO 150 K=1,L
 2654.  1 Vpr2              Z(I,K)=Z(I,K)/SCAL
 2655.  1 Vpr2              H=H+Z(I,K)*Z(I,K)
 2656.  1 Vpr2------>   150 CONTINUE
 2657.  1               !
 2658.  1                   F=Z(I,L)
 2659.  1                   G=-SIGN(SQRT(H),F)
 2660.  1                   E(I)=SCAL*G
 2661.  1                   H=H-F*G
 2662.  1                   Z(I,L)=F-G
 2663.  1                   F=0.0_r8
 2664.  1               !
 2665.  1 2---------<       DO 240 J=1,L
 2666.  1 2                 Z(J,I)=Z(I,J)/H
 2667.  1 2                 G=0.0_r8
 2668.  1 2             !   form element of A*U
 2669.  1 2 Vp------<       DO 180 K=1,J
 2670.  1 2 Vp              G=G+Z(J,K)*Z(I,K)
 2671.  1 2 Vp------>   180 CONTINUE
 2672.  1 2             !
 2673.  1 2                 JP1=J+1
 2674.  1 2                 IF (L .LT. JP1) GO TO 220
 2675.  1 2             !
 2676.  1 2 Vpr4----<       DO 200 K=JP1,L
 2677.  1 2 Vpr4            G=G+Z(K,J)*Z(I,K)
 2678.  1 2 Vpr4---->   200 CONTINUE
 2679.  1 2             !   form element of P
 2680.  1 2             220 E(J)=G/H
 2681.  1 2                 F=F+E(J)*Z(I,J)
 2682.  1 2--------->   240 CONTINUE
 2683.  1               !
 2684.  1                   HH=F/(H+H)
 2685.  1               !   form reduced A
 2686.  1 2---------<       DO 260 J=1,L
 2687.  1 2                 F=Z(I,J)
 2688.  1 2                 G=E(J)-HH*F
 2689.  1 2                 E(J)=G
 2690.  1 2             !
 2691.  1 2 Vpr4----<       DO 260 K=1,J
 2692.  1 2 Vpr4            Z(J,K)=Z(J,K)-F*E(K)-G*Z(I,K)
 2693.  1 2 Vpr4--->>   260 CONTINUE
 2694.  1               !
 2695.  1               290 D(I)=H
 2696.  1----------->   300 CONTINUE
 2697.                  !
 2698.                  320 D(1)=0.0_r8
 2699.                      E(1)=0.0_r8
 2700.                  !   accumulation of transformation matrices
 2701.  1-----------<       DO 500 I=1,N
 2702.  1                   L=I-1
 2703.  1                   IF (D(I) .EQ. 0.0_r8 ) GOTO 380
 2704.  1               !
 2705.  1 2---------<       DO 360 J=1,L
 2706.  1 2                 G=0.0_r8
 2707.  1 2             !
 2708.  1 2 Vpr4----<       DO 340 K=1,L
 2709.  1 2 Vpr4            G=G+Z(I,K)*Z(K,J)
 2710.  1 2 Vpr4---->   340 CONTINUE
 2711.  1 2             !
 2712.  1 2 Vr4-----<       DO 360 K=1,L
 2713.  1 2 Vr4             Z(K,J)=Z(K,J)-G*Z(K,I)
 2714.  1 2 Vr4---->>   360 CONTINUE
 2715.  1               !
 2716.  1               380 D(I)=Z(I,I)
 2717.  1                   Z(I,I)=1.0_r8
 2718.  1                   IF (L .LT. 1) GOTO 500
 2719.  1               !
 2720.  1 Vpr4------<       DO 400 J=1,L
 2721.  1 Vpr4              Z(I,J)=0.0_r8
 2722.  1 Vpr4              Z(J,I)=0.0_r8
 2723.  1 Vpr4------>   400 CONTINUE
 2724.  1               !
 2725.  1----------->   500 CONTINUE
 2726.                  !
 2727.                
 2728.                END SUBROUTINE Tred2
 2729.                SUBROUTINE Znorma(nm,n,wr,wi,z,matz,h,tolw,tolz)
 2730.                  !
 2731.                  !   ** ZNORMA normalizes and filters the eigenvectors and filters the
 2732.                  !             eigenvalues.
 2733.                  !
 2734.                  !      It sets ZZ = a + b * i, corresponding to the maximum absolute
 2735.                  !      value of the eigenvector, to:
 2736.                  !
 2737.                  !      a) 1.0 + 0.0   * i - if B .EQ. 0.0
 2738.                  !      b) 1.0 + (b/a) * i - if  ABS(a) .GE. ABS(b)
 2739.                  !      c) 1.0 + (a/b) * i - if  ABS(a) .LT. ABS(b)
 2740.                  !
 2741.                  INTEGER, INTENT(IN) :: nm,n,matz
 2742.                  REAL(KIND=r8), INTENT(INOUT) :: z(nm,n),wr(n),wi(n)
 2743.                  REAL(KIND=r8), INTENT(OUT) :: h(nm,n)
 2744.                  REAL(KIND=r8), INTENT(IN) :: tolw, tolz
 2745.                  !
 2746.                  REAL(KIND=r8) :: ZZ,DIV
 2747.                  INTEGER:: I,J,IC,J1
 2748.                  !
 2749.                      IF (MATZ .EQ. 2) RETURN
 2750.                  !
 2751.  1-----------<       DO 900 J=1,N
 2752.  1 A---------<       DO 900 I=1,N
 2753.  1 A                 H(I,J)=Z(I,J)
 2754.  1 A-------->>   900 CONTINUE
 2755.                  !
 2756.  1-----------<       DO 910 J=1,N
 2757.  1               !
 2758.  1                   IF (WI(J) .EQ. 0.0_r8 ) THEN
 2759.  1               !
 2760.  1                   ZZ=0.0_r8
 2761.  1 r4--------<       DO 940 I=1,N
 2762.  1 r4                ZZ=MAX(ZZ,ABS(H(I,J)))
 2763.  1 r4                IF (ZZ .EQ. ABS(H(I,J))) IC=I
 2764.  1 r4-------->   940 CONTINUE
 2765.  1               !
 2766.  1 Vr4-------<       DO 950 I=1,N
 2767.  1 Vr4               Z(I,J)=H(I,J)/H(IC,J)
 2768.  1 Vr4------->   950 CONTINUE
 2769.  1               !
 2770.  1                   ELSEIF (WI(J) .GT. 0.0_r8 ) THEN
 2771.  1               !
 2772.  1                   ZZ=0.0
 2773.  1                   J1=J+1
 2774.  1 r4--------<       DO 960 I=1,N
 2775.  1 r4                DIV=H(I,J)*H(I,J)+H(I,J1)*H(I,J1)
 2776.  1 r4                ZZ=MAX(ZZ,DIV)
 2777.  1 r4                IF (ZZ .EQ. DIV) IC=I
 2778.  1 r4-------->   960 CONTINUE
 2779.  1                   IF (ABS(H(IC,J)) .LT. ABS(H(IC,J1))) THEN
 2780.  1                   DIV=1.0_r8/H(IC,J1)
 2781.  1                   ELSE
 2782.  1                   DIV=1.0_r8/H(IC,J)
 2783.  1                   ENDIF
 2784.  1                   IF (DIV .NE. 0.0 ) THEN
 2785.  1 Vr4-------<       DO 970 I=1,N
 2786.  1 Vr4               Z(I,J)=H(I,J)*DIV
 2787.  1 Vr4               Z(I,J1)=H(I,J1)*DIV
 2788.  1 Vr4------->   970 CONTINUE
 2789.  1                   ENDIF
 2790.  1               !
 2791.  1                   ENDIF
 2792.  1               !
 2793.  1----------->   910 CONTINUE
 2794.                  !
 2795.                      IF (MATZ .EQ. 3) RETURN
 2796.                  !
 2797.                      DIV=0.0_r8
 2798.  Vr4---------<       DO 980 J=1,N
 2799.  Vr4                 ZZ=SQRT(WR(J)*WR(J)+WI(J)*WI(J))
 2800.  Vr4                 DIV=MAX(DIV,ZZ)
 2801.  Vr4--------->   980 CONTINUE
 2802.                      IF (DIV .LE. 0.0_r8 ) DIV=1.0_r8
 2803.                  !
 2804.  1-----------<       DO 990 J=1,N
 2805.  1                   IF (ABS(WR(J)/DIV) .LT. TOLW) WR(J)=0.0_r8
 2806.  1                   IF (ABS(WI(J)/DIV) .LT. TOLW) WI(J)=0.0_r8
 2807.  1 2---------<       DO 990 I=1,N
 2808.  1 2                 IF (ABS(Z(I,J)) .LT. TOLZ) Z(I,J)=0.0_r8
 2809.  1 2-------->>   990 CONTINUE
 2810.                  !
 2811.                END SUBROUTINE Znorma
 2812.                
 2813.                
 2814.                
 2815.                  SUBROUTINE tmstmp2(id, ifday, tod, ihr, iday, mon, iyr)
 2816.                    !
 2817.                    !
 2818.                    !==========================================================================
 2819.                    !    id(4).......date of current data
 2820.                    !                id(1)....hour(00/12)
 2821.                    !                id(2)....month
 2822.                    !                id(3)....day of month
 2823.                    !                id(4)....year
 2824.                    !    ifday.......model forecast day
 2825.                    !    tod.........todx=tod+swint*f3600, model forecast time of
 2826.                    !                day in seconds
 2827.                    !                swint....sw subr. call interval in hours
 2828.                    !                swint has to be less than or equal to trint
 2829.                    !                              and mod(trint,swint)=0
 2830.                    !                f3600=3.6e3
 2831.                    !    ihr.........hour(00/12)
 2832.                    !    iday........day of month
 2833.                    !    mon.........month
 2834.                    !    iyr.........year
 2835.                    !    yrl.........length of year in days
 2836.                    !    monl(12)....length of each month in days
 2837.                    !==========================================================================
 2838.                    !
 2839.                
 2840.                    INTEGER, INTENT(in ) :: id(4)
 2841.                    INTEGER, INTENT(in ) :: ifday
 2842.                    REAL(KIND=r8),    INTENT(in ) :: tod
 2843.                    INTEGER, INTENT(out) :: ihr
 2844.                    INTEGER, INTENT(out) :: iday
 2845.                    INTEGER, INTENT(out) :: mon
 2846.                    INTEGER, INTENT(out) :: iyr
 2847.                
 2848.                    INTEGER :: kday
 2849.                    INTEGER :: idaymn
 2850.                    REAL(KIND=r8)    :: ctim
 2851.                    REAL(KIND=r8)    :: hrmodl
 2852.                    INTEGER :: monl(12)
 2853.                
 2854.                    REAL(KIND=r8), PARAMETER :: yrl =   365.2500
 2855.                    REAL(KIND=r8), PARAMETER ::  ep = .015625
 2856.                    DATA MONL/31,28,31,30,31,30,&
 2857.                         31,31,30,31,30,31/
 2858.                
 2859.                    ctim=tod+id(1)*3600.0_r8
 2860.                
 2861.                    IF (ctim >= 86400.e0_r8) THEN
 2862.                       kday=1
 2863.                       ctim=ctim-86400.e0_r8
 2864.                    ELSE
 2865.                       kday=0
 2866.                    END IF
 2867.                    !
 2868.                    !     adjust time to reduce round off error in divsion
 2869.                    !
 2870.                    iday = id(3) + ifday + kday
 2871.                    hrmodl = (ctim+ep)/3600.0_r8
 2872.                    ihr = hrmodl
 2873.                    mon = id(2)
 2874.                    iyr = id(4)
 2875.  1-----------<     DO
 2876.  1                    idaymn = monl(mon)
 2877.  1                    IF (yrl == 365.25e0_r8 .AND. MOD(iyr,4) == 0 .AND. mon == 2) &
 2878.  1                         idaymn=29
 2879.  1                    IF (iday <= idaymn) RETURN
 2880.  1                    iday = iday - idaymn
 2881.  1                    mon = mon + 1
 2882.  1                    IF (mon < 13) CYCLE
 2883.  1                    mon = 1
 2884.  1                    iyr = iyr + 1
 2885.  1----------->     END DO
 2886.                  END SUBROUTINE tmstmp2
 2887.                
 2888.                  SUBROUTINE InitTimeStamp(dateinit_s,idate)
 2889.                    CHARACTER(len=10), INTENT(out) ::  dateinit_s
 2890.                    INTEGER,           INTENT(in ) :: idate(4)
 2891.                
 2892.                    !local variables
 2893.                
 2894.                    INTEGER :: hhi, mmi, ddi, yyyyi
 2895.                
 2896.                    yyyyi = idate(4)
 2897.                    mmi   = idate(2)
 2898.                    ddi   = idate(3)
 2899.                    hhi   = idate(1)
 2900.                
 2901.                    dateinit_s='          '
 2902.                    WRITE(dateinit_s,'(i4.4,3i2.2)') yyyyi, mmi, ddi, hhi
 2903.                
 2904.                    ! computes the julian day of this calendar date
 2905.                
 2906.                    juliandayinitintegration = julday(mmi, ddi, yyyyi)
 2907.                  END SUBROUTINE InitTimeStamp
 2908.                
 2909.                
 2910.                
 2911.                
 2912.                
 2913.                
 2914.                  SUBROUTINE TimeStamp(datenow_s, idatec, jdt, dt)
 2915.                    CHARACTER(len=10), INTENT(out  ) :: datenow_s
 2916.                    INTEGER,           INTENT(inout) :: idatec(4)
 2917.                    INTEGER,           INTENT(in   )  :: jdt
 2918.                    REAL(KIND=r8),              INTENT(in   )  :: dt
 2919.                
 2920.                    INTEGER  :: hhc, mmc, ddc, yyyyc, juliandaynow
 2921.                
 2922.                    juliandaynow = juliandayinitintegration + (INT(dt)*jdt)/(24*3600)
 2923.  I                 CALL caldat(juliandaynow, mmc, ddc, yyyyc)
 2924.                    hhc = MOD(INT(dt)*jdt/3600,24) +  idatec (1)
 2925.                    datenow_s='          '
 2926.                    WRITE(datenow_s,'(i4.4, 3i2.2)' ) yyyyc, mmc, ddc, hhc
 2927.  Vs---------<>     idatec = (/hhc,mmc,ddc,yyyyc /)
 2928.                  END SUBROUTINE TimeStamp
 2929.                
 2930.                
 2931.                
 2932.                
 2933.                
 2934.                  SUBROUTINE Caldat(julian,mm,id,iyyy)
 2935.                    ! input:  julian day
 2936.                    ! output: mm = mes ; id = dia, iyyy = ano
 2937.                    INTEGER, PARAMETER :: igreg=2299161
 2938.                    INTEGER, INTENT(IN ) :: julian
 2939.                    INTEGER, INTENT(OUT) :: mm
 2940.                    INTEGER, INTENT(OUT) :: id
 2941.                    INTEGER, INTENT(OUT) :: iyyy
 2942.                    INTEGER :: jalpha
 2943.                    INTEGER :: ja, jb, jc, jd, je
 2944.                    IF(julian.GE.igreg)THEN
 2945.                       jalpha=INT(((julian-1867216)-0.25_r8)/36524.25)
 2946.                       ja=julian+1+jalpha-INT(0.25_r8*jalpha)
 2947.                    ELSE
 2948.                       ja=julian
 2949.                    ENDIF
 2950.                    jb=ja+1524
 2951.                    jc=INT(6680.0_r8+((jb-2439870)-122.1_r8)/365.25_r8)
 2952.                    jd=365*jc+INT(0.25_r8*jc)
 2953.                    je=INT((jb-jd)/30.6001_r8)
 2954.                    id=jb-jd-INT(30.6001_r8*je)
 2955.                    mm=je-1
 2956.                    IF(mm.GT.12)mm=mm-12
 2957.                    iyyy=jc-4715
 2958.                    IF(mm.GT.2)iyyy=iyyy-1
 2959.                    IF(iyyy.LE.0)iyyy=iyyy-1
 2960.                  END SUBROUTINE caldat
 2961.                
 2962.                
 2963.                  INTEGER FUNCTION julday(mm,id,iyyy)
 2964.                    ! input:  mm = mes;  id = dia;  iyyy = ano
 2965.                    ! output: julian day dessa data.
 2966.                    INTEGER, INTENT(IN) :: mm
 2967.                    INTEGER, INTENT(IN) :: id
 2968.                    INTEGER, INTENT(INOUT) :: iyyy
 2969.                    INTEGER, PARAMETER  :: igreg=15+31*(10+12*1582)
 2970.                    INTEGER :: jy, jm, ja
 2971.                    IF (iyyy.EQ.0) THEN
 2972.                       PRINT *, 'there is no year zero.'
 2973.                       STOP "ERROR AT julday"
 2974.                    END IF
 2975.                    IF (iyyy.LT.0) iyyy=iyyy+1
 2976.                    IF (mm.GT.2) THEN
 2977.                       jy=iyyy
 2978.                       jm=mm+1
 2979.                    ELSE
 2980.                       jy=iyyy-1
 2981.                       jm=mm+13
 2982.                    ENDIF
 2983.                    julday=INT(365.25_r8*jy)+INT(30.6001_r8*jm)+id+1720995
 2984.                    IF (id+31*(mm+12*iyyy).GE.igreg) THEN
 2985.                       ja=INT(0.01_r8*jy)
 2986.                       julday=julday+2-ja+INT(0.25_r8*ja)
 2987.                    ENDIF
 2988.                  END FUNCTION julday
 2989.                 !
 2990.                 ! maps (ib,jb) into (i,j)
 2991.                 !
 2992.                 SUBROUTINE IBJBtoIJ_R(var_in,var_out)
 2993.                    REAL(KIND=r8)   , INTENT(IN   ) :: var_in (:,:)
 2994.                    REAL(KIND=r8)   , INTENT(OUT  ) :: var_out(:,:)
 2995.                    INTEGER                :: i
 2996.                    INTEGER                :: j
 2997.                    INTEGER                :: ib
 2998.                    INTEGER                :: jb
 2999.                   !$OMP PARALLEL DO PRIVATE(i,j,ib)
 3000.  M m---------<     DO jb = 1,jbmax
 3001.  m 2---------<        DO ib = 1,ibmaxPerJB(jb)
 3002.  m 2                     i = iPerIJB(ib,jb)
 3003.  m 2                     j = jPerIJB(ib,jb)-myfirstlat+1
 3004.  m 2                     var_out(i,j)=var_in(ib,jb)
 3005.  m 2--------->        END DO
 3006.  m----------->     END DO
 3007.                   !$OMP END PARALLEL DO
 3008.                 END SUBROUTINE IBJBtoIJ_R
 3009.                 !
 3010.                 ! maps (i,j) into (ib,jb)
 3011.                 !
 3012.                 SUBROUTINE IJtoIBJB_R(var_in,var_out)
 3013.                    REAL(KIND=r8)   , INTENT(IN  ) :: var_in (:,:)
 3014.                    REAL(KIND=r8)   , INTENT(OUT ) :: var_out(:,:)
 3015.                    INTEGER               :: i
 3016.                    INTEGER               :: j
 3017.                    INTEGER               :: ib
 3018.                    INTEGER               :: jb
 3019.                   !$OMP PARALLEL DO PRIVATE(i,j,ib)
 3020.  M m---------<     DO jb = 1, jbMax
 3021.  m 2---------<       DO ib = 1,ibMaxPerJB(jb)
 3022.  m 2                    i = iPerIJB(ib,jb)
 3023.  m 2                    j = jPerIJB(ib,jb)
 3024.  m 2                    var_out(ib,jb)=var_in(i,j)
 3025.  m 2--------->        END DO
 3026.  m----------->     END DO
 3027.                   !$OMP END PARALLEL DO
 3028.                 END SUBROUTINE IJtoIBJB_R
 3029.                
 3030.                 ! 3D version by hmjb
 3031.                 SUBROUTINE IJtoIBJB3_R(var_in,var_out)
 3032.                    REAL(KIND=r8)   , INTENT(IN  ) :: var_in (iMax,kMax,jMax)
 3033.                    REAL(KIND=r8)   , INTENT(OUT ) :: var_out(ibMax,kMax,jbMax)
 3034.                    INTEGER               :: i
 3035.                    INTEGER               :: j
 3036.                    INTEGER               :: ib
 3037.                    INTEGER               :: jb
 3038.                   !$OMP PARALLEL DO PRIVATE(i,j,ib)
 3039.  M m---------<     DO jb = 1, jbMax
 3040.  m 2---------<       DO ib = 1,ibMaxPerJB(jb)
 3041.  m 2                    i = iPerIJB(ib,jb)
 3042.  m 2                    j = jPerIJB(ib,jb)
 3043.  m 2                    var_out(ib,:,jb)=var_in(i,:,j)
 3044.  m 2--------->        END DO
 3045.  m----------->     END DO
 3046.                   !$OMP END PARALLEL DO
 3047.                 END SUBROUTINE IJtoIBJB3_R
 3048.                
 3049.                 SUBROUTINE IBJBtoIJ_I(var_in,var_out)
 3050.                    INTEGER, INTENT(IN   ) :: var_in (:,:)
 3051.                    INTEGER, INTENT(OUT  ) :: var_out(:,:)
 3052.                    INTEGER                :: i
 3053.                    INTEGER                :: j
 3054.                    INTEGER                :: ib
 3055.                    INTEGER                :: jb
 3056.                   !$OMP PARALLEL DO PRIVATE(i,j,ib)
 3057.  M m---------<     DO jb = 1,jbmax
 3058.  m 2---------<        DO ib = 1,ibmaxPerJB(jb)
 3059.  m 2                     i = iPerIJB(ib,jb)
 3060.  m 2                     j = jPerIJB(ib,jb)-myfirstlat+1
 3061.  m 2                     var_out(i,j)=var_in(ib,jb)
 3062.  m 2--------->        END DO
 3063.  m----------->     END DO
 3064.                   !$OMP END PARALLEL DO
 3065.                 END SUBROUTINE IBJBtoIJ_I
 3066.                 !
 3067.                 ! maps (i,j) into (ib,jb)
 3068.                 !
 3069.                 SUBROUTINE IJtoIBJB_I(var_in,var_out)
 3070.                    INTEGER(KIND=i8), INTENT(IN  ) :: var_in (:,:)
 3071.                    INTEGER(KIND=i8), INTENT(OUT ) :: var_out(:,:)
 3072.                    INTEGER               :: i
 3073.                    INTEGER               :: j
 3074.                    INTEGER               :: ib
 3075.                    INTEGER               :: jb
 3076.                   !$OMP PARALLEL DO PRIVATE(i,j,ib)
 3077.  M m---------<     DO jb = 1, jbMax
 3078.  m 2---------<       DO ib = 1, ibMaxPerJB(jb)
 3079.  m 2                    i = iPerIJB(ib,jb)
 3080.  m 2                    j = jPerIJB(ib,jb)
 3081.  m 2                    var_out(ib,jb)=var_in(i,j)
 3082.  m 2--------->        END DO
 3083.  m----------->     END DO
 3084.                   !$OMP END PARALLEL DO
 3085.                 END SUBROUTINE IJtoIBJB_I
 3086.                 ! 3D version by hmjb
 3087.                 SUBROUTINE IJtoIBJB3_I(var_in,var_out)
 3088.                    INTEGER(KIND=i8), INTENT(IN  ) :: var_in (iMax,kMax,jMax)
 3089.                    INTEGER(KIND=i8), INTENT(OUT ) :: var_out(ibMax,kMax,jbMax)
 3090.                    INTEGER               :: i
 3091.                    INTEGER               :: j
 3092.                    INTEGER               :: ib
 3093.                    INTEGER               :: jb
 3094.                   !$OMP PARALLEL DO PRIVATE(i,j,ib)
 3095.  M m---------<     DO jb = 1, jbMax
 3096.  m 2---------<       DO ib = 1, ibMaxPerJB(jb)
 3097.  m 2                    i = iPerIJB(ib,jb)
 3098.  m 2                    j = jPerIJB(ib,jb)
 3099.  m 2                    var_out(ib,:,jb)=var_in(i,:,j)
 3100.  m 2--------->        END DO
 3101.  m----------->     END DO
 3102.                   !$OMP END PARALLEL DO
 3103.                 END SUBROUTINE IJtoIBJB3_I
 3104.                
 3105.                
 3106.                
 3107.                  SUBROUTINE SplineIJtoIBJB_R2D(FieldIn,FieldOut)
 3108.                    REAL(KIND=r8), INTENT(IN  ) :: FieldIn (iMax,jMax)
 3109.                    REAL(KIND=r8), INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 3110.                
 3111.                    REAL(KIND=r8) :: FOut(iMax)
 3112.                    INTEGER            :: i
 3113.                    INTEGER            :: iFirst
 3114.                    INTEGER            :: ilast 
 3115.                    INTEGER            :: ib
 3116.                    INTEGER            :: j
 3117.                    INTEGER            :: jb
 3118.                
 3119.                    CHARACTER(LEN=*), PARAMETER :: h="**SplineIJtoIBJB**"
 3120.                
 3121.                    PRINT *, h
 3122.                
 3123.                    IF (reducedGrid) THEN
 3124.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,ib,jb,i,fout)
 3125.  M m---------<        DO j = myfirstlat,mylastlat
 3126.  M m                     iFirst = myfirstlon(j)
 3127.  M m                     ilast  = mylastlon(j)
 3128.  M m                     CALL CyclicCubicSpline(iMax, iMaxPerJ(j), &
 3129.  M m                          FieldIn(1,j), FOut, ifirst, ilast)
 3130.  m 2---------<           DO i=ifirst,ilast
 3131.  m 2                        ib = ibperij(i,j)
 3132.  m 2                        jb = jbperij(i,j)
 3133.  m 2                        FieldOut(ib,jb) = Fout(i)
 3134.  m 2--------->           END DO
 3135.  m----------->        END DO
 3136.                       !$OMP END PARALLEL DO
 3137.                    ELSE
 3138.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3139.  M m---------<        DO jb = 1, jbMax
 3140.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3141.  m 2                        i = iPerIJB(ib,jb)
 3142.  m 2                        j = jPerIJB(ib,jb)
 3143.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 3144.  m 2--------->           END DO
 3145.  m----------->        END DO
 3146.                       !$OMP END PARALLEL DO
 3147.                    END IF
 3148.                  END SUBROUTINE SplineIJtoIBJB_R2D
 3149.                
 3150.                
 3151.                
 3152.                
 3153.                  SUBROUTINE SplineIBJBtoIJ_R2D(FieldIn,FieldOut)
 3154.                    REAL(KIND=r8), INTENT(IN  ) :: FieldIn (ibMax,jbMax)
 3155.                    REAL(KIND=r8), INTENT(OUT ) :: FieldOut(iMax,jMax)
 3156.                
 3157.                    INTEGER            :: i
 3158.                    INTEGER            :: iFirst
 3159.                    INTEGER            :: ib
 3160.                    INTEGER            :: j
 3161.                    INTEGER            :: jl
 3162.                    INTEGER            :: jb
 3163.                
 3164.                    CHARACTER(LEN=*), PARAMETER :: h="**SplineIBJBtoIJ**"
 3165.                
 3166.                    PRINT *, h
 3167.                    IF (reducedGrid) THEN
 3168.                       !$OMP PARALLEL DO PRIVATE(iFirst,jb,jl)
 3169.  D-----------<        DO j = myfirstlat,mylastlat
 3170.  D                       jl = j-myfirstlat+1
 3171.  D                       iFirst = ibPerIJ(1,j)
 3172.  D                       jb = jbPerIJ(1,j)
 3173.  D             !         CALL CyclicCubicSpline(iMaxPerJ(j), iMax, &
 3174.  D             !              FieldIn(iFirst,jb), FieldOut(1,jl))
 3175.  D----------->        END DO
 3176.                       !$OMP END PARALLEL DO
 3177.                    ELSE
 3178.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3179.  M m---------<        DO jb = 1, jbMax
 3180.  M m 2-------<           DO ib = 1, ibMaxPerJB(jb)
 3181.  M m 2                      i = iPerIJB(ib,jb)
 3182.  M m 2                      j = jPerIJB(ib,jb)-myfirstlat+1
 3183.  M m 2                      FieldOut(i,j)=FieldIn(ib,jb)
 3184.  M m 2------->           END DO
 3185.  M m--------->        END DO
 3186.                       !$OMP END PARALLEL DO
 3187.                    END IF
 3188.                  END SUBROUTINE SplineIBJBtoIJ_R2D
 3189.                
 3190.                
 3191.                
 3192.                
 3193.                
 3194.                  ! CyclicCubicSpline:
 3195.                  ! Cubic Spline interpolation on cyclic, equally spaced data over [0:2pi].
 3196.                  ! Input data:
 3197.                  !   DimIn: How many input points: abcissae are supposed to be x(i),
 3198.                  !          i=1,...,DimIn, with x(i) = 2*pi*(i-1)/DimIn
 3199.                  !   DimOut: How many output points: abcissae are supposed to be x(i),
 3200.                  !          i=1,...,DimOut, with x(i) = 2*pi*(i-1)/DimOut
 3201.                  !   FieldIn: function values at the DimIn abcissae
 3202.                  ! Output data:
 3203.                  !   FieldOut: function values at the DimOut abcissae
 3204.                  ! Requirements:
 3205.                  !   DimIn >= 4. Program Stops if DimIn < 4.
 3206.                
 3207.                
 3208.                  SUBROUTINE CyclicCubicSpline (DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 3209.                    INTEGER, INTENT(IN ) :: DimIn
 3210.                    INTEGER, INTENT(IN ) :: DimOut
 3211.                    INTEGER, INTENT(IN ) :: ifirst
 3212.                    INTEGER, INTENT(IN ) :: ilast
 3213.                    REAL(KIND=r8),    INTENT(IN ) :: FieldIn(DimIn)
 3214.                    REAL(KIND=r8),    INTENT(OUT) :: FieldOut(DimOut)
 3215.                
 3216.                
 3217.                    INTEGER :: iIn
 3218.                    INTEGER :: iOut
 3219.                    INTEGER :: iRatio
 3220.                    REAL(KIND=r8) :: alfa(DimIn+2)
 3221.                    REAL(KIND=r8) :: beta(DimIn+2)
 3222.                    REAL(KIND=r8) :: gama(DimIn+2)
 3223.                    REAL(KIND=r8) :: delta(DimIn+2)
 3224.                    REAL(KIND=r8) :: der(DimIn+2)
 3225.                    REAL(KIND=r8) :: c1(DimIn+2)
 3226.                    REAL(KIND=r8) :: c2(DimIn+2)
 3227.                    REAL(KIND=r8) :: ratio
 3228.                    REAL(KIND=r8) :: dxm
 3229.                    REAL(KIND=r8) :: dxm2
 3230.                    REAL(KIND=r8) :: dx
 3231.                    REAL(KIND=r8) :: dx2
 3232.                    REAL(KIND=r8) :: pi
 3233.                    REAL(KIND=r8) :: hIn
 3234.                    REAL(KIND=r8) :: hIn2
 3235.                    REAL(KIND=r8) :: hOut
 3236.                
 3237.                    ! case every output data abcissae is some input data abcissae
 3238.                
 3239.                    iRatio = DimIn/DimOut
 3240.                    IF (iRatio*DimOut == DimIn) THEN
 3241.  Vpr4--------<        DO iOut = ifirst,ilast
 3242.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 3243.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 3244.  Vpr4-------->        END DO
 3245.                       RETURN
 3246.                    END IF
 3247.                
 3248.                    ! protection: input data size should be at least 4
 3249.                
 3250.                    IF (DimIn < 4) THEN
 3251.                       STOP "**(CyclicCubicSpline)** ERROR: Few input data points"
 3252.                    END IF
 3253.                
 3254.                    ! protection: output data should fit into input data + 2 intervals
 3255.                
 3256.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 3257.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 3258.                    IF (iIn > DimIn + 2) THEN
 3259.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 3260.                    END IF
 3261.                
 3262.                    ! initialization
 3263.                
 3264.                    pi   = 4.0_r8*ATAN(1.0_r8)
 3265.                    hIn  = (2.0_r8*pi)/REAL(DimIn, r8)
 3266.                    hOut = (2.0_r8*pi)/REAL(DimOut,r8)
 3267.                    hIn2 = hIn*hIn
 3268.                
 3269.                    ! tridiagonal system initialization:
 3270.                    ! indices of alfa, beta, gama and delta are equation numbers,
 3271.                    ! which are derivatives on a diagonal system
 3272.                
 3273.                    alfa(2) = 0.0_r8
 3274.                    beta(2) = 6.0_r8
 3275.                    gama(2) = 0.0_r8
 3276.                    delta(2) = (6.0_r8/hIn2)*&
 3277.                            (FieldIn(1)-2.0_r8*FieldIn(2)+FieldIn(3))
 3278.  Vr4---------<     DO iIn = 3, DimIn-1
 3279.  Vr4 A------<>        alfa(iIn) = 1.0_r8
 3280.  Vr4 A------<>        beta(iIn) = 4.0_r8
 3281.  Vr4 A------<>        gama(iIn) = 1.0_r8
 3282.  Vr4                  delta(iIn) = (6.0_r8/hIn2)*&
 3283.  Vr4                       (FieldIn(iIn-1)-2.0_r8*FieldIn(iIn)+FieldIn(iIn+1))
 3284.  Vr4--------->     END DO
 3285.                    alfa(DimIn) = 1.0_r8
 3286.                    beta(DimIn) = 4.0_r8
 3287.                    gama(DimIn) = 1.0_r8
 3288.                    delta(DimIn) = (6.0_r8/hIn2)*&
 3289.                         (FieldIn(DimIn-1)-2.0_r8*FieldIn(DimIn)+FieldIn(1))
 3290.                    alfa(DimIn+1) = 0.0_r8
 3291.                    beta(DimIn+1) = 6.0_r8
 3292.                    gama(DimIn+1) = 0.0_r8
 3293.                    delta(DimIn+1) = (6.0_r8/hIn2)*&
 3294.                         (FieldIn(DimIn)-2.0_r8*FieldIn(1)+FieldIn(2))
 3295.                
 3296.                    ! backward elimination
 3297.                
 3298.  r2----------<     DO iIn = 3, DimIn
 3299.  r2                   beta(iIn) = beta(iIn) - (gama(iIn-1)*alfa(iIn))/beta(iIn-1)
 3300.  r2                   delta(iIn) = delta(iIn) - (delta(iIn-1)*alfa(iIn))/beta(iIn-1)
 3301.  r2---------->     END DO
 3302.                
 3303.                    ! forward substitution
 3304.                
 3305.                    der(DimIn+1) = delta(DimIn+1)/beta(DimIn+1)
 3306.  r4----------<     DO iIn = DimIn, 2, -1
 3307.  r4                   der(iIn) = (delta(iIn) - gama(iIn)*der(iIn+1))/beta(iIn)
 3308.  r4---------->     END DO
 3309.                
 3310.                    der(1) = 2.0_r8*der(2) - der(3)
 3311.                    der(DimIn+2) = 2.0_r8*der(DimIn+1) - der(DimIn)
 3312.                
 3313.                    ! interpolation
 3314.                
 3315.  Vr4---------<     DO iIn = 1, DimIn+2
 3316.  Vr4                  c1(iIn) = der(iIn)/(6.0_r8*hIn)
 3317.  Vr4--------->     END DO
 3318.  Vr4---------<     DO iIn = 1, DimIn
 3319.  Vr4                  c2(iIn) = FieldIn(iIn)/hIn - der(iIn)*(hIn/6.0_r8)
 3320.  Vr4--------->     END DO
 3321.                    c2(DimIn+1) = FieldIn(1)/hIn - der(DimIn+1)*(hIn/6.0_r8)
 3322.                    c2(DimIn+2) = FieldIn(2)/hIn - der(DimIn+2)*(hIn/6.0_r8)
 3323.  1-----------<     DO iOut = ifirst,ilast
 3324.  1                    iIn = INT(REAL(iOut-1,r8)*ratio) + 2
 3325.  1                    dxm = REAL(iOut-1,r8)*hOut - REAL(iIn-2,r8)*hIn
 3326.  1                    dxm2 = dxm*dxm
 3327.  1                    dx = REAL(iIn-1,r8)*hIn - REAL(iOut-1,r8)*hOut
 3328.  1                    dx2 = dx*dx
 3329.  1                    FieldOut(iOut) = &
 3330.  1                         (dxm2*c1(iIn)+c2(iIn))*dxm + &
 3331.  1                         (dx2*c1(iIn-1)+c2(iIn-1))*dx
 3332.  1----------->     END DO
 3333.                  END SUBROUTINE CyclicCubicSpline
 3334.                
 3335.                
 3336.                
 3337.                
 3338.                
 3339.                
 3340.                  SUBROUTINE LinearIJtoIBJB_R2D(FieldIn,FieldOut)
 3341.                    REAL(KIND=r8), INTENT(IN  ) :: FieldIn (iMax,jMax)
 3342.                    REAL(KIND=r8), INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 3343.                
 3344.                    REAL(KIND=r8) :: Fout(imax)
 3345.                    INTEGER            :: i
 3346.                    INTEGER            :: iFirst
 3347.                    INTEGER            :: ilast
 3348.                    INTEGER            :: ib
 3349.                    INTEGER            :: j
 3350.                    INTEGER            :: jb
 3351.                
 3352.                    CHARACTER(LEN=*), PARAMETER :: h="**LinearIJtoIBJB**"
 3353.                
 3354.                    IF (reducedGrid) THEN
 3355.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,i,ib,fout,jb)
 3356.  M m---------<        DO j = myfirstlat,mylastlat
 3357.  M m                     ifirst = myfirstlon(j)
 3358.  M m                     ilast  = mylastlon(j)
 3359.  M m                     CALL CyclicLinear(iMax, iMaxPerJ(j), &
 3360.  M m                          FieldIn(1,j), FOut, ifirst,ilast)
 3361.  m 2---------<           DO i = ifirst,ilast
 3362.  m 2                        ib = ibperij(i,j)
 3363.  m 2                        jb = jbperij(i,j)
 3364.  m 2                        FieldOut(ib,jb) = Fout(i)
 3365.  m 2--------->           END DO
 3366.  m----------->        END DO
 3367.                       !$OMP END PARALLEL DO
 3368.                    ELSE
 3369.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3370.  M m---------<        DO jb = 1, jbMax
 3371.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3372.  m 2                        i = iPerIJB(ib,jb)
 3373.  m 2                        j = jPerIJB(ib,jb)
 3374.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 3375.  m 2--------->           END DO
 3376.  m----------->        END DO
 3377.                       !$OMP END PARALLEL DO
 3378.                    END IF
 3379.                  END SUBROUTINE LinearIJtoIBJB_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3379 
  Named Constant "H" is not used.

 3380.                
 3381.                
 3382.                
 3383.                
 3384.                  SUBROUTINE LinearIBJBtoIJ_R2D(FieldIn,FieldOut)
 3385.                    REAL(KIND=r8), INTENT(IN  ) :: FieldIn (ibMax,jbMax)
 3386.                    REAL(KIND=r8), INTENT(OUT ) :: FieldOut(iMax,jMax)
 3387.                
 3388.                    INTEGER            :: i
 3389.                    INTEGER            :: iFirst
 3390.                    INTEGER            :: ib
 3391.                    INTEGER            :: j
 3392.                    INTEGER            :: jl
 3393.                    INTEGER            :: jb
 3394.                
 3395.                    CHARACTER(LEN=*), PARAMETER :: h="**LinearIBJBtoIJ**"
 3396.                
 3397.                    IF (reducedGrid) THEN
 3398.                       !$OMP PARALLEL DO PRIVATE(iFirst,jb,jl)
 3399.  D-----------<        DO j = myfirstlat,mylastlat
 3400.  D                       jl = j-myfirstlat+1
 3401.  D                       iFirst = ibPerIJ(1,j)
 3402.  D                       jb = jbPerIJ(1,j)
 3403.  D             !         CALL CyclicLinear(iMaxPerJ(j), iMax, &
 3404.  D             !              FieldIn(iFirst,jb), FieldOut(1,jl))
 3405.  D----------->        END DO
 3406.                       !$OMP END PARALLEL DO
 3407.                    ELSE
 3408.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3409.  M m---------<        DO jb = 1, jbMax
 3410.  M m 2-------<           DO ib = 1, ibMaxPerJB(jb)
 3411.  M m 2                      i = iPerIJB(ib,jb)
 3412.  M m 2                      j = jPerIJB(ib,jb)-myfirstlat+1
 3413.  M m 2                      FieldOut(i,j)=FieldIn(ib,jb)
 3414.  M m 2------->           END DO
 3415.  M m--------->        END DO
 3416.                       !$OMP END PARALLEL DO
 3417.                    END IF
 3418.                  END SUBROUTINE LinearIBJBtoIJ_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3418 
  Named Constant "H" is not used.

 3419.                
 3420.                
 3421.                
 3422.                
 3423.                
 3424.                  ! CyclicLinear:
 3425.                  ! Linear interpolation on cyclic, equally spaced data over [0:2pi].
 3426.                  ! Input data:
 3427.                  !   DimIn: How many input points: abcissae are supposed to be x(i),
 3428.                  !          i=1,...,DimIn, with x(i) = 2*pi*(i-1)/DimIn
 3429.                  !   DimOut: How many output points: abcissae are supposed to be x(i),
 3430.                  !          i=1,...,DimOut, with x(i) = 2*pi*(i-1)/DimOut
 3431.                  !   FieldIn: function values at the DimIn abcissae
 3432.                  ! Output data:
 3433.                  !   FieldOut: function values at the DimOut abcissae
 3434.                  ! Requirements:
 3435.                  !   DimIn >= 1. Program Stops if DimIn < 1.
 3436.                
 3437.                
 3438.                  SUBROUTINE CyclicLinear (DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 3439.                    INTEGER, INTENT(IN ) :: DimIn
 3440.                    INTEGER, INTENT(IN ) :: DimOut
 3441.                    INTEGER, INTENT(IN ) :: ifirst
 3442.                    INTEGER, INTENT(IN ) :: ilast
 3443.                    REAL(KIND=r8),    INTENT(IN ) :: FieldIn(DimIn)
 3444.                    REAL(KIND=r8),    INTENT(OUT) :: FieldOut(DimOut)
 3445.                
 3446.                
 3447.                    INTEGER :: iIn
 3448.                    INTEGER :: iOut
 3449.                    INTEGER :: iRatio
 3450.                    REAL(KIND=r8) :: c(DimIn+1)
 3451.                    REAL(KIND=r8) :: ratio
 3452.                    REAL(KIND=r8) :: dxm
 3453.                    REAL(KIND=r8) :: dx
 3454.                    REAL(KIND=r8) :: pi
 3455.                    REAL(KIND=r8) :: hIn
 3456.                    REAL(KIND=r8) :: hInInv
 3457.                    REAL(KIND=r8) :: hOut
 3458.                
 3459.                    ! case every output data abcissae is some input data abcissae
 3460.                
 3461.                    iRatio = DimIn/DimOut
 3462.                    IF (iRatio*DimOut == DimIn) THEN
 3463.  Vpr4--------<        DO iOut = ifirst,ilast
 3464.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 3465.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 3466.  Vpr4-------->        END DO
 3467.                       RETURN
 3468.                    END IF
 3469.                
 3470.                    ! protection: input data size should be at least 1
 3471.                
 3472.                    IF (DimIn < 1) THEN
 3473.                       STOP "**(CyclicLinear)** ERROR: Few input data points"
 3474.                    END IF
 3475.                
 3476.                    ! protection: output data should fit into input data + 2 intervals
 3477.                
 3478.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 3479.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 3480.                    IF (iIn > DimIn + 1) THEN
 3481.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 3482.                    END IF
 3483.                
 3484.                    ! initialization
 3485.                
 3486.                    pi = 4.0_r8*ATAN(1.0_r8)
 3487.                    hIn  = (2.0_r8*pi)/REAL(DimIn, r8)
 3488.                    hInInv = 1.0_r8/hIn
 3489.                    hOut = (2.0_r8*pi)/REAL(DimOut,r8)
 3490.                
 3491.                    ! interpolation
 3492.                
 3493.  Vr4---------<     DO iIn = 1, DimIn
 3494.  Vr4                  c(iIn) = FieldIn(iIn)*hInInv
 3495.  Vr4--------->     END DO
 3496.                    c(DimIn+1) = FieldIn(1)*hInInv
 3497.                
 3498.  1-----------<     DO iOut = ifirst,ilast
 3499.  1                    iIn = INT(REAL(iOut-1,r8)*ratio) + 2
 3500.  1                    dxm = REAL(iOut-1,r8)*hOut - REAL(iIn-2,r8)*hIn
 3501.  1                    dx  = REAL(iIn-1,r8)*hIn - REAL(iOut-1,r8)*hOut
 3502.  1                    FieldOut(iOut) = dxm*c(iIn)+dx*c(iIn-1)
 3503.  1----------->     END DO
 3504.                  END SUBROUTINE CyclicLinear
 3505.                
 3506.                  SUBROUTINE NearestIJtoIBJB_I2D(FieldIn,FieldOut)
 3507.                    INTEGER, INTENT(IN  ) :: FieldIn (iMax,jMax)
 3508.                    INTEGER, INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 3509.                
 3510.                    INTEGER            :: Fout(iMax)
 3511.                    INTEGER            :: i
 3512.                    INTEGER            :: iFirst
 3513.                    INTEGER            :: ilast
 3514.                    INTEGER            :: ib
 3515.                    INTEGER            :: j
 3516.                    INTEGER            :: jb
 3517.                
 3518.                    CHARACTER(LEN=*), PARAMETER :: h="**NearestIJtoIBJB**"
 3519.                
 3520.                    IF (reducedGrid) THEN
 3521.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb)
 3522.  M m---------<        DO j = myfirstlat,mylastlat
 3523.  M m                     iFirst = myfirstlon(j)
 3524.  M m                     ilast  = mylastlon(j)
 3525.  M m                     CALL CyclicNearest_i(iMax, iMaxPerJ(j), &
 3526.  M m                          FieldIn(1,j), FOut, ifirst, ilast)
 3527.  m 2---------<           DO i = ifirst,ilast
 3528.  m 2                        ib = ibperij(i,j)
 3529.  m 2                        jb = jbperij(i,j)
 3530.  m 2                        FieldOut(ib,jb) = Fout(i)
 3531.  m 2--------->           END DO
 3532.  m----------->        END DO
 3533.                       !$OMP END PARALLEL DO
 3534.                    ELSE
 3535.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3536.  M m---------<        DO jb = 1, jbMax
 3537.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3538.  m 2                        i = iPerIJB(ib,jb)
 3539.  m 2                        j = jPerIJB(ib,jb)
 3540.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 3541.  m 2--------->           END DO
 3542.  m----------->        END DO
 3543.                       !$OMP END PARALLEL DO
 3544.                    END IF
 3545.                  END SUBROUTINE NearestIJtoIBJB_I2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3545 
  Named Constant "H" is not used.

 3546.                
 3547.                
 3548.                
 3549.                  SUBROUTINE NearestIJtoIBJB_R2D(FieldIn,FieldOut)
 3550.                    REAL(KIND=r8), INTENT(IN  ) :: FieldIn (iMax,jMax)
 3551.                    REAL(KIND=r8), INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 3552.                
 3553.                    REAL(KIND=r8)      :: Fout(iMax)
 3554.                    INTEGER            :: i
 3555.                    INTEGER            :: iFirst
 3556.                    INTEGER            :: ilast 
 3557.                    INTEGER            :: ib
 3558.                    INTEGER            :: j
 3559.                    INTEGER            :: jb
 3560.                
 3561.                    CHARACTER(LEN=*), PARAMETER :: h="**NearestIJtoIBJB**"
 3562.                
 3563.                    IF (reducedGrid) THEN
 3564.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb)
 3565.  M m---------<        DO j = myfirstlat,mylastlat
 3566.  M m                     iFirst = myfirstlon(j)
 3567.  M m                     ilast  = mylastlon(j)
 3568.  M m                     CALL CyclicNearest_r(iMax, iMaxPerJ(j), &
 3569.  M m                          FieldIn(1,j), FOut, ifirst, ilast)
 3570.  m 2---------<           DO i = ifirst,ilast
 3571.  m 2                        ib = ibperij(i,j)
 3572.  m 2                        jb = jbperij(i,j)
 3573.  m 2                        FieldOut(ib,jb) = Fout(i)
 3574.  m 2--------->           END DO
 3575.  m----------->        END DO
 3576.                       !$OMP END PARALLEL DO
 3577.                    ELSE
 3578.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3579.  M m---------<        DO jb = 1, jbMax
 3580.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3581.  m 2                        i = iPerIJB(ib,jb)
 3582.  m 2                        j = jPerIJB(ib,jb)
 3583.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 3584.  m 2--------->           END DO
 3585.  m----------->        END DO
 3586.                       !$OMP END PARALLEL DO
 3587.                    END IF
 3588.                  END SUBROUTINE NearestIJtoIBJB_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3588 
  Named Constant "H" is not used.

 3589.                
 3590.                  ! 3D version by hmjb
 3591.                  SUBROUTINE NearestIJtoIBJB_I3D(FieldIn,FieldOut)
 3592.                    INTEGER, INTENT(IN  ) :: FieldIn (iMax,kMax,jMax)
 3593.                    INTEGER, INTENT(OUT ) :: FieldOut(ibMax,kMax,jbMax)
 3594.                
 3595.                    INTEGER            :: FOut(iMax)
 3596.                    INTEGER            :: i,k
 3597.                    INTEGER            :: ifirst
 3598.                    INTEGER            :: ilast 
 3599.                    INTEGER            :: ib
 3600.                    INTEGER            :: j
 3601.                    INTEGER            :: jb
 3602.                
 3603.                    CHARACTER(LEN=*), PARAMETER :: h="**NearestIJtoIBJB**"
 3604.                
 3605.                    IF (reducedGrid) THEN
 3606.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb,k)
 3607.  M m---------<        DO j = myfirstlat,mylastlat
 3608.  M m                     iFirst = myfirstlon(j)
 3609.  M m                     ilast  = mylastlon(j)
 3610.  M m 2-------<           DO k=1,kMax 
 3611.  M m 2                      CALL CyclicNearest_i(iMax, iMaxPerJ(j), &
 3612.  M m 2                           FieldIn(1,k,j), FOut, ifirst, ilast)
 3613.  m 2 3-------<              DO i = ifirst,ilast
 3614.  m 2 3                         ib = ibperij(i,j)
 3615.  m 2 3                         jb = jbperij(i,j)
 3616.  m 2 3                         FieldOut(ib,k,jb) = Fout(i)
 3617.  m 2 3------->              END DO
 3618.  m 2--------->           ENDDO
 3619.  m----------->        END DO
 3620.                       !$OMP END PARALLEL DO
 3621.                    ELSE
 3622.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3623.  M m---------<        DO jb = 1, jbMax
 3624.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3625.  m 2                        i = iPerIJB(ib,jb)
 3626.  m 2                        j = jPerIJB(ib,jb)
 3627.  m 2                        FieldOut(ib,:,jb)=FieldIn(i,:,j)
 3628.  m 2--------->           END DO
 3629.  m----------->        END DO
 3630.                       !$OMP END PARALLEL DO
 3631.                    END IF
 3632.                  END SUBROUTINE NearestIJtoIBJB_I3D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3632 
  Named Constant "H" is not used.

 3633.                
 3634.                
 3635.                  ! 3D version by hmjb
 3636.                  SUBROUTINE NearestIJtoIBJB_R3D(FieldIn,FieldOut)
 3637.                    REAL(KIND=r8), INTENT(IN  ) :: FieldIn (iMax,kMax,jMax)
 3638.                    REAL(KIND=r8), INTENT(OUT ) :: FieldOut(ibMax,kMax,jbMax)
 3639.                
 3640.                    REAL(KIND=r8)      :: FOut(iMax)
 3641.                    INTEGER            :: i,k
 3642.                    INTEGER            :: iFirst
 3643.                    INTEGER            :: ilast
 3644.                    INTEGER            :: ib
 3645.                    INTEGER            :: j
 3646.                    INTEGER            :: jb
 3647.                
 3648.                    CHARACTER(LEN=*), PARAMETER :: h="**NearestIJtoIBJB**"
 3649.                
 3650.                    IF (reducedGrid) THEN
 3651.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb,k)
 3652.  M m---------<        DO j = myfirstlat,mylastlat
 3653.  M m                     iFirst = myfirstlon(j)
 3654.  M m                     ilast  = mylastlon(j)
 3655.  M m 2-------<           DO k=1,kMax 
 3656.  M m 2                      CALL CyclicNearest_r(iMax, iMaxPerJ(j), &
 3657.  M m 2                           FieldIn(1,k,j), FOut, ifirst, ilast)
 3658.  m 2 3-------<              DO i = ifirst,ilast
 3659.  m 2 3                         ib = ibperij(i,j)
 3660.  m 2 3                         jb = jbperij(i,j)
 3661.  m 2 3                         FieldOut(ib,k,jb) = Fout(i)
 3662.  m 2 3------->              END DO
 3663.  m 2--------->           ENDDO
 3664.  m----------->        END DO
 3665.                       !$OMP END PARALLEL DO
 3666.                    ELSE
 3667.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3668.  M m---------<        DO jb = 1, jbMax
 3669.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3670.  m 2                        i = iPerIJB(ib,jb)
 3671.  m 2                        j = jPerIJB(ib,jb)
 3672.  m 2                        FieldOut(ib,:,jb)=FieldIn(i,:,j)
 3673.  m 2--------->           END DO
 3674.  m----------->        END DO
 3675.                       !$OMP END PARALLEL DO
 3676.                    END IF
 3677.                  END SUBROUTINE NearestIJtoIBJB_R3D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3677 
  Named Constant "H" is not used.

 3678.                
 3679.                
 3680.                  SUBROUTINE NearestIBJBtoIJ_I2D(FieldIn,FieldOut)
 3681.                    INTEGER, INTENT(IN  ) :: FieldIn (ibMax,jbMax)
 3682.                    INTEGER, INTENT(OUT ) :: FieldOut(iMax,jMax)
 3683.                
 3684.                    INTEGER            :: i
 3685.                    INTEGER            :: iFirst
 3686.                    INTEGER            :: ib
 3687.                    INTEGER            :: j
 3688.                    INTEGER            :: jl
 3689.                    INTEGER            :: jb
 3690.                
 3691.                    CHARACTER(LEN=*), PARAMETER :: h="**NearestIBJBtoIJ**"
 3692.                
 3693.                    IF (reducedGrid) THEN
 3694.                       !$OMP PARALLEL DO PRIVATE(iFirst,jb,jl)
 3695.  D-----------<        DO j = myfirstlat,mylastlat
 3696.  D                       jl = j-myfirstlat+1
 3697.  D                       iFirst = ibPerIJ(1,j)
 3698.  D                       jb = jbPerIJ(1,j)
 3699.  D             !         CALL CyclicNearest_i(iMaxPerJ(j), iMax, &
 3700.  D             !              FieldIn(iFirst,jb), FieldOut(1,jl))
 3701.  D----------->        END DO
 3702.                       !$OMP END PARALLEL DO
 3703.                    ELSE
 3704.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3705.  M m---------<        DO jb = 1, jbMax
 3706.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3707.  m 2                        i = iPerIJB(ib,jb)
 3708.  m 2                        j = jPerIJB(ib,jb)-myfirstlat+1
 3709.  m 2                        FieldOut(i,j)=FieldIn(ib,jb)
 3710.  m 2--------->           END DO
 3711.  m----------->        END DO
 3712.                       !$OMP END PARALLEL DO
 3713.                    END IF
 3714.                  END SUBROUTINE NearestIBJBtoIJ_I2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3714 
  Named Constant "H" is not used.

 3715.                
 3716.                
 3717.                  SUBROUTINE NearestIBJBtoIJ_R2D(FieldIn,FieldOut)
 3718.                    REAL(KIND=r8)   , INTENT(IN  ) :: FieldIn (ibMax,jbMax)
 3719.                    REAL(KIND=r8)   , INTENT(OUT ) :: FieldOut(iMax,jMax)
 3720.                
 3721.                    INTEGER            :: i
 3722.                    INTEGER            :: iFirst
 3723.                    INTEGER            :: ib
 3724.                    INTEGER            :: j
 3725.                    INTEGER            :: jl
 3726.                    INTEGER            :: jb
 3727.                
 3728.                    CHARACTER(LEN=*), PARAMETER :: h="**NearestIBJBtoIJ**"
 3729.                
 3730.                    IF (reducedGrid) THEN
 3731.                       !$OMP PARALLEL DO PRIVATE(iFirst,jb,jl)
 3732.  D-----------<        DO j = myfirstlat,mylastlat
 3733.  D                       jl = j-myfirstlat+1
 3734.  D                       iFirst = ibPerIJ(1,j)
 3735.  D                       jb = jbPerIJ(1,j)
 3736.  D             !         CALL CyclicNearest_r(iMaxPerJ(j), iMax, &
 3737.  D             !              FieldIn(iFirst,jb), FieldOut(1,jl))
 3738.  D----------->        END DO
 3739.                       !$OMP END PARALLEL DO
 3740.                    ELSE
 3741.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3742.  M m---------<        DO jb = 1, jbMax
 3743.  M m 2-------<           DO ib = 1, ibMaxPerJB(jb)
 3744.  M m 2                      i = iPerIJB(ib,jb)
 3745.  M m 2                      j = jPerIJB(ib,jb)-myfirstlat+1
 3746.  M m 2                      FieldOut(i,j)=FieldIn(ib,jb)
 3747.  M m 2------->           END DO
 3748.  M m--------->        END DO
 3749.                       !$OMP END PARALLEL DO
 3750.                    END IF
 3751.                  END SUBROUTINE NearestIBJBtoIJ_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3751 
  Named Constant "H" is not used.

 3752.                
 3753.                 SUBROUTINE CyclicNearest_i(DimIn, DimOut, FieldIn, FieldOut,ifirst,ilast)
 3754.                
 3755.                    INTEGER,    INTENT(IN ) :: DimIn
 3756.                    INTEGER,    INTENT(IN ) :: DimOut
 3757.                    INTEGER,    INTENT(IN ) :: ifirst
 3758.                    INTEGER,    INTENT(IN ) :: ilast
 3759.                    INTEGER,    INTENT(IN ) :: FieldIn (DimIn)
 3760.                    INTEGER,    INTENT(OUT) :: FieldOut(DimOut)
 3761.                
 3762.                    INTEGER :: iIn
 3763.                    INTEGER :: iOut
 3764.                    INTEGER :: iRatio
 3765.                    REAL(KIND=r8) :: ratio
 3766.                    REAL(KIND=r8) :: pi
 3767.                    REAL(KIND=r8) :: hIn
 3768.                    REAL(KIND=r8) :: hInInv
 3769.                    REAL(KIND=r8) :: hOut
 3770.                    REAL(KIND=r8) :: difalfa
 3771.                    REAL(KIND=r8) :: alfaIn
 3772.                    REAL(KIND=r8) :: alfaOut
 3773.                    INTEGER :: mplon(DimOut)
 3774.                
 3775.                    ! case every output data abcissae is some input data abcissae
 3776.                
 3777.                    iRatio = DimIn/DimOut
 3778.                    IF (iRatio*DimOut == DimIn) THEN
 3779.  r8----------<        DO iOut = ifirst,ilast
 3780.  r8                      iIn =iRatio*(iOut-1) + 1
 3781.  r8                      FieldOut(iOut) = FieldIn(iIn)
 3782.  r8---------->        END DO
 3783.                       RETURN
 3784.                    END IF
 3785.                
 3786.                    ! protection: input data size should be at least 1
 3787.                
 3788.                    IF (DimIn < 1) THEN
 3789.                       STOP "**(CyclicNearest)** ERROR: Few input data points"
 3790.                    END IF
 3791.                
 3792.                    ! protection: output data should fit into input data + 2 intervals
 3793.                
 3794.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 3795.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 3796.                    IF (iIn > DimIn + 1) THEN
 3797.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 3798.                    END IF
 3799.                
 3800.                    ! initialization
 3801.                
 3802.                    pi     = 4.0_r8*ATAN(1.0_r8)
 3803.                    hIn    = (2.0_r8*pi)/REAL(DimIn, r8)
 3804.                    hOut   = (2.0_r8*pi)/REAL(DimOut,r8)
 3805.                    hInInv = 1.0_r8/hIn
 3806.                
 3807.                    ! interpolation
 3808.                
 3809.                
 3810.  1-----------<     DO iOut = ifirst,ilast
 3811.  1                    alfaOut=(iOut-1)*hOut
 3812.  1                    difalfa=1000E+12
 3813.  1                    alfaIn =0.0
 3814.  1 V---------<        DO iIn = 1, DimIn
 3815.  1 V                     difalfa=min(ABS(alfaIn-alfaOut),difalfa)
 3816.  1 V                     alfaIn=alfaIn+hIn
 3817.  1 V--------->        END DO
 3818.  1                    alfaIn =0.0
 3819.  1 2---------<        DO iIn = 1, DimIn
 3820.  1 2                     IF (ABS(alfaIn-alfaOut) == difalfa ) THEN
 3821.  1 2                        mplon(iOut) = iIn
 3822.  1 2                        FieldOut(iOut) = FieldIn(mplon(iOut))
 3823.  1 2                     END IF
 3824.  1 2                     alfaIn=alfaIn+hIn
 3825.  1 2--------->        END DO
 3826.  1----------->     END DO
 3827.                    RETURN
 3828.                 END SUBROUTINE CyclicNearest_i
ftn-5001 ftn: NOTE File = Utils.f90, Line = 3828 
  Local variable "HININV" is assigned a value but never used.

 3829.                
 3830.                
 3831.                
 3832.                 SUBROUTINE CyclicNearest_r(DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 3833.                
 3834.                    INTEGER,    INTENT(IN ) :: DimIn
 3835.                    INTEGER,    INTENT(IN ) :: DimOut
 3836.                    INTEGER,    INTENT(IN ) :: ifirst
 3837.                    INTEGER,    INTENT(IN ) :: ilast
 3838.                    REAL   (KIND=r8),    INTENT(IN ) :: FieldIn (DimIn)
 3839.                    REAL   (KIND=r8),    INTENT(OUT) :: FieldOut(DimOut)
 3840.                
 3841.                    INTEGER :: iIn
 3842.                    INTEGER :: iOut
 3843.                    INTEGER :: iRatio
 3844.                    REAL   (KIND=r8) :: ratio
 3845.                    REAL   (KIND=r8) :: pi
 3846.                    REAL   (KIND=r8) :: hIn
 3847.                    REAL   (KIND=r8) :: hInInv
 3848.                    REAL   (KIND=r8) :: hOut
 3849.                    REAL   (KIND=r8) :: difalfa
 3850.                    REAL   (KIND=r8) :: alfaIn
 3851.                    REAL   (KIND=r8) :: alfaOut
 3852.                    INTEGER :: mplon(DimOut)
 3853.                
 3854.                    ! case every output data abcissae is some input data abcissae
 3855.                
 3856.                    iRatio = DimIn/DimOut
 3857.                    IF (iRatio*DimOut == DimIn) THEN
 3858.  Vpr4--------<        DO iOut = ifirst, ilast
 3859.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 3860.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 3861.  Vpr4-------->        END DO
 3862.                       RETURN
 3863.                    END IF
 3864.                
 3865.                    ! protection: input data size should be at least 1
 3866.                
 3867.                    IF (DimIn < 1) THEN
 3868.                       STOP "**(CyclicNearest)** ERROR: Few input data points"
 3869.                    END IF
 3870.                
 3871.                    ! protection: output data should fit into input data + 2 intervals
 3872.                
 3873.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 3874.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 3875.                    IF (iIn > DimIn + 1) THEN
 3876.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 3877.                    END IF
 3878.                
 3879.                    ! initialization
 3880.                
 3881.                    pi     = 4.0_r8*ATAN(1.0_r8)
 3882.                    hIn    = (2.0_r8*pi)/REAL(DimIn, r8)
 3883.                    hOut   = (2.0_r8*pi)/REAL(DimOut,r8)
 3884.                    hInInv = 1.0_r8/hIn
 3885.                
 3886.                    ! interpolation
 3887.                
 3888.  1-----------<     DO iOut = ifirst,ilast
 3889.  1                    alfaOut=(iOut-1)*hOut
 3890.  1                    difalfa=1000E+12
 3891.  1                    alfaIn =0.0
 3892.  1 V---------<        DO iIn = 1, DimIn
 3893.  1 V                     difalfa=min(ABS(alfaIn-alfaOut),difalfa)
 3894.  1 V                     alfaIn=alfaIn+hIn
 3895.  1 V--------->        END DO
 3896.  1                    alfaIn =0.0
 3897.  1 2---------<        DO iIn = 1, DimIn
 3898.  1 2                     IF (ABS(alfaIn-alfaOut) == difalfa ) THEN
 3899.  1 2                        mplon(iOut) = iIn
 3900.  1 2                        FieldOut(iOut) = FieldIn(mplon(iOut))
 3901.  1 2                     END IF
 3902.  1 2                     alfaIn=alfaIn+hIn
 3903.  1 2--------->        END DO
 3904.  1----------->     END DO
 3905.                    RETURN
 3906.                 END SUBROUTINE CyclicNearest_r
ftn-5001 ftn: NOTE File = Utils.f90, Line = 3906 
  Local variable "HININV" is assigned a value but never used.

 3907.                
 3908.                
 3909.                  SUBROUTINE FreqBoxIJtoIBJB_I2D(FieldIn,FieldOut)
 3910.                    INTEGER(KIND=i8), INTENT(IN  ) :: FieldIn (iMax,jMax)
 3911.                    INTEGER(KIND=i8), INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 3912.                
 3913.                    INTEGER(KIND=i8)   :: FOut(iMax)
 3914.                    INTEGER            :: i
 3915.                    INTEGER            :: iFirst
 3916.                    INTEGER            :: ilast
 3917.                    INTEGER            :: ib
 3918.                    INTEGER            :: j
 3919.                    INTEGER            :: jb
 3920.                
 3921.                    CHARACTER(LEN=*), PARAMETER :: h="**FreqBoxIJtoIBJB**"
 3922.                
 3923.                    IF (reducedGrid) THEN
 3924.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb)
 3925.  M m---------<        DO j = myfirstlat,mylastlat
 3926.  M m                     iFirst = myfirstlon(j)
 3927.  M m                     ilast  = mylastlon(j)
 3928.  M m                     CALL CyclicFreqBox_i(iMax, iMaxPerJ(j), &
 3929.  M m                     FieldIn(1:,j), FOut, ifirst, ilast)
 3930.  m 2---------<           DO i = ifirst,ilast
 3931.  m 2                        ib = ibperij(i,j)
 3932.  m 2                        jb = jbperij(i,j)
 3933.  m 2                        FieldOut(ib,jb) = Fout(i)
 3934.  m 2--------->           END DO
 3935.  m----------->        END DO
 3936.                       !$OMP END PARALLEL DO
 3937.                    ELSE
 3938.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3939.  M m---------<        DO jb = 1, jbMax
 3940.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 3941.  m 2                        i = iPerIJB(ib,jb)
 3942.  m 2                        j = jPerIJB(ib,jb)
 3943.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 3944.  m 2--------->           END DO
 3945.  m----------->        END DO
 3946.                       !$OMP END PARALLEL DO
 3947.                    END IF
 3948.                  END SUBROUTINE FreqBoxIJtoIBJB_I2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3948 
  Named Constant "H" is not used.

 3949.                
 3950.                  SUBROUTINE FreqBoxIJtoIBJB_R2D(FieldIn,FieldOut)
 3951.                    REAL(KIND=r8)   , INTENT(IN  ) :: FieldIn (iMax,jMax)
 3952.                    REAL(KIND=r8)   , INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 3953.                
 3954.                    REAL(KIND=r8)      :: FOut(iMax)
 3955.                    INTEGER            :: i
 3956.                    INTEGER            :: iFirst
 3957.                    INTEGER            :: ilast
 3958.                    INTEGER            :: ib
 3959.                    INTEGER            :: j
 3960.                    INTEGER            :: jb
 3961.                
 3962.                    CHARACTER(LEN=*), PARAMETER :: h="**FreqBoxIJtoIBJB**"
 3963.                
 3964.                    IF (reducedGrid) THEN
 3965.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb)
 3966.  M m---------<        DO j = myfirstlat,mylastlat
 3967.  M m                     iFirst = myfirstlon(j)
 3968.  M m                     ilast  = mylastlon(j)
 3969.  M m                     CALL CyclicFreqBox_r(iMax, iMaxPerJ(j), &
 3970.  M m                     FieldIn(1:,j), FOut, ifirst, ilast)
 3971.  m 2---------<           DO i = ifirst,ilast
 3972.  m 2                        ib = ibperij(i,j)
 3973.  m 2                        jb = jbperij(i,j)
 3974.  m 2                        FieldOut(ib,jb) = Fout(i)
 3975.  m 2--------->           END DO
 3976.  m----------->        END DO
 3977.                       !$OMP END PARALLEL DO
 3978.                    ELSE
 3979.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 3980.  M m---------<        DO jb = 1, jbMax
 3981.  M m 2-------<           DO ib = 1, ibMaxPerJB(jb)
 3982.  M m 2                      i = iPerIJB(ib,jb)
 3983.  M m 2                      j = jPerIJB(ib,jb)
 3984.  M m 2                      FieldOut(ib,jb)=FieldIn(i,j)
 3985.  M m 2------->           END DO
 3986.  M m--------->        END DO
 3987.                       !$OMP END PARALLEL DO
 3988.                    END IF
 3989.                  END SUBROUTINE FreqBoxIJtoIBJB_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 3989 
  Named Constant "H" is not used.

 3990.                
 3991.                
 3992.                
 3993.                
 3994.                
 3995.                
 3996.                  SUBROUTINE CyclicFreqBox_i(DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 3997.                    IMPLICIT NONE
 3998.                    INTEGER,    INTENT(IN ) :: DimIn
 3999.                    INTEGER,    INTENT(IN ) :: DimOut
 4000.                    INTEGER,    INTENT(IN ) :: ifirst
 4001.                    INTEGER,    INTENT(IN ) :: ilast
 4002.                    INTEGER(KIND=i8),    INTENT(IN ) :: FieldIn (DimIn)
 4003.                    INTEGER(KIND=i8),    INTENT(OUT) :: FieldOut(DimOut)
 4004.                    INTEGER,    PARAMETER   :: ncat   = 13 !number of catagories found
 4005.                
 4006.                    INTEGER :: iIn
 4007.                    INTEGER :: iOut
 4008.                    INTEGER :: iRatio
 4009.                    REAL(KIND=r8)    :: ratio
 4010.                    REAL(KIND=r8)    :: pi
 4011.                    REAL(KIND=r8)    :: hIn
 4012.                    REAL(KIND=r8)    :: hOut
 4013.                    INTEGER :: ici
 4014.                    INTEGER :: ico
 4015.                    INTEGER :: ioi
 4016.                    INTEGER :: ioo
 4017.                    INTEGER :: i
 4018.                    INTEGER :: k
 4019.                    LOGICAL :: flgin  (5)
 4020.                    LOGICAL :: flgout (5)
 4021.                    REAL   (KIND=r8) :: dwork  (2*(DimIn+DimOut+2))
 4022.                    REAL   (KIND=r8) :: wtlon  (   DimIn+DimOut+2 )
 4023.                    INTEGER :: mplon  (DimIn+DimOut+2,2)
 4024.                    REAL   (KIND=r8) :: work   (ncat,DimOut)
 4025.                    REAL   (KIND=r8) :: wrk2   (     DimOut)
 4026.                    INTEGER :: undef  =0
 4027.                    REAL   (KIND=r8) :: dof
 4028.                    INTEGER :: i1
 4029.                    INTEGER :: i2
 4030.                    INTEGER :: i3
 4031.                    INTEGER :: lond
 4032.                    REAL   (KIND=r8) :: wln
 4033.                    INTEGER :: lni
 4034.                    INTEGER :: lno
 4035.                    INTEGER :: nc
 4036.                    INTEGER :: mm
 4037.                    INTEGER :: n
 4038.                    INTEGER :: nn
 4039.                    INTEGER :: nd
 4040.                    INTEGER :: mdist  (7)
 4041.                    INTEGER :: ndist  (7)
 4042.                    REAL   (KIND=r8) :: fm
 4043.                    INTEGER :: nx
 4044.                    INTEGER :: kl
 4045.                    REAL   (KIND=r8) :: b      (5)
 4046.                    REAL   (KIND=r8) :: fr
 4047.                    REAL   (KIND=r8) :: cmx
 4048.                    INTEGER :: kmx
 4049.                    REAL   (KIND=r8) :: fq
 4050.                    REAL   (KIND=r8) :: fmk
 4051.                    REAL   (KIND=r8) :: frk
 4052.                    INTEGER :: iq
 4053.                    INTEGER :: nq
 4054.                    INTEGER :: ns
 4055.                    INTEGER :: nxk
 4056.                    INTEGER :: klass  (ncat)
 4057.                    DATA KLASS/6*1,2,2,3,2,3,4,5/
 4058.                
 4059.                    ! case every output data abcissae is some input data abcissae
 4060.                
 4061.                    iRatio = DimIn/DimOut
 4062.                    IF (iRatio*DimOut == DimIn) THEN
 4063.  Vpr4--------<        DO iOut = ifirst, ilast
 4064.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 4065.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 4066.  Vpr4-------->        END DO
 4067.                       RETURN
 4068.                    END IF
 4069.                
 4070.                    ! protection: input data size should be at least 1
 4071.                
 4072.                    IF (DimIn < 1) THEN
 4073.                       STOP "**(CyclicFreqBox)** ERROR: Few input data points"
 4074.                    END IF
 4075.                
 4076.                    ! protection: output data should fit into input data + 2 intervals
 4077.                
 4078.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 4079.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 4080.                    IF (iIn > DimIn + 1) THEN
 4081.                       STOP "**(CyclicFreqBox)** ERROR: Output data out of input interval"
 4082.                    END IF
 4083.                
 4084.                    ! initialization
 4085.                
 4086.                    pi     = 4.0_r8*ATAN(1.0_r8)
 4087.                
 4088.                    !
 4089.                    !     flags: (in or out)
 4090.                    !     1     start at north pole (true) start at south pole (false)
 4091.                    !     2     start at prime meridian (true) start at i.d.l. (false)
 4092.                    !     3     latitudes are at center of box (true)
 4093.                    !           latitudes are at edge (false) north edge if 1=true
 4094.                    !                                south edge if 1=false
 4095.                    !     4     longitudes are at center of box (true)
 4096.                    !           longitudes are at western edge of box (false)
 4097.                    !     5     gaussian (true) regular (false)
 4098.                    !
 4099.                    flgin (1)=.true.
 4100.                    flgin (2)=.true.
 4101.                    flgin (3)=.false.
 4102.                    flgin (4)=.true.
 4103.                    flgin (5)=.true.
 4104.                    flgout(1)=.true.
 4105.                    flgout(2)=.true.
 4106.                    flgout(3)=.false.
 4107.                    flgout(4)=.true.
 4108.                    flgout(5)=.true.
 4109.                
 4110.                    !
 4111.                    !     latitudes done, now do longitudes
 4112.                    !
 4113.                    !     input grid longitudes
 4114.                    !
 4115.                    ioi=DimIn+DimOut+2
 4116.                    hIn   =(2.0_r8*pi)/REAL(DimIn, r8)
 4117.                    IF (flgin(5) .OR. flgin(4)) THEN
 4118.                       ici=0
 4119.                       dof=0.5_r8
 4120.                    ELSE
 4121.                       ici=1
 4122.                       dof=0.0_r8
 4123.                    END IF
 4124.  Vr4---------<     DO i=1,DimIn
 4125.  Vr4                  dwork(i+ioi)= (dof+DBLE(i-1))*hIn
 4126.  Vr4--------->     END DO
 4127.                    !
 4128.                    !     output grid longitudes
 4129.                    !
 4130.                    ioo=2*DimIn+DimOut+3
 4131.                    hOut  =(2.0_r8*pi)/REAL(DimOut,r8)
 4132.                
 4133.                    IF (flgout(5) .OR. flgout(4)) THEN
 4134.                       ico=0
 4135.                       dof=0.5_r8
 4136.                    ELSE
 4137.                       ico=1
 4138.                       dof=0.0_r8
 4139.                    END IF
 4140.  Vr4---------<     DO i=1,DimOut
 4141.  Vr4                  dwork(i+ioo)= (dof+DBLE(i-1))*hOut
 4142.  Vr4--------->     END DO
 4143.                    !
 4144.                    !     produce single ordered set of longitudes for both grids
 4145.                    !     determine longitude weighting and index mapping
 4146.                    !
 4147.                    i1=1
 4148.                    i2=1
 4149.                    i3=1
 4150.  1-----------<     DO
 4151.  1                    IF (dwork(i1+ioi) == dwork(i2+ioo)) THEN
 4152.  1                       dwork(i3)=dwork(i1+ioi)
 4153.  1                       IF (i3 /= 1) THEN
 4154.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4155.  1                          mplon(i3-1,1)=i1-ici
 4156.  1                          IF (.NOT.flgin(2)) THEN
 4157.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4158.  1                             IF(i1-ici > DimIn/2)mplon(i3-1,1)=i1-ici-DimIn/2
 4159.  1                          END IF
 4160.  1                          mplon(i3-1,2)=i2-ico
 4161.  1                          IF (.NOT.flgout(2)) THEN
 4162.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4163.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4164.  1                          END IF
 4165.  1                       END IF
 4166.  1                       i1=i1+1
 4167.  1                       i2=i2+1
 4168.  1                       i3=i3+1
 4169.  1                    ELSE IF (dwork(i1+ioi) < dwork(i2+ioo)) THEN
 4170.  1                       dwork(i3)=dwork(i1+ioi)
 4171.  1                       IF (i3 /= 1)THEN
 4172.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4173.  1                          mplon(i3-1,1)=i1-ici
 4174.  1                          IF (.NOT.flgin(2)) THEN
 4175.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4176.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4177.  1                          END IF
 4178.  1                          mplon(i3-1,2)=i2-ico
 4179.  1                          IF (.NOT.flgout(2)) THEN
 4180.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4181.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4182.  1                          END IF
 4183.  1                       END IF
 4184.  1                       i1=i1+1
 4185.  1                       i3=i3+1
 4186.  1                    ELSE
 4187.  1                       dwork(i3)=dwork(i2+ioo)
 4188.  1                       IF (i3 /= 1)THEN
 4189.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4190.  1                          mplon(i3-1,1)=i1-ici
 4191.  1                          IF (.NOT.flgin(2)) THEN
 4192.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4193.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4194.  1                          END IF
 4195.  1                          mplon(i3-1,2)=i2-ico
 4196.  1                          IF (.NOT.flgout(2)) THEN
 4197.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4198.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4199.  1                          END IF
 4200.  1                       END IF
 4201.  1                       i2=i2+1
 4202.  1                       i3=i3+1
 4203.  1                    END IF
 4204.  1                    IF ((i1 > DimIn) .OR. (i2 > DimOut)) EXIT
 4205.  1----------->     END DO
 4206.                
 4207.                    IF (i1 > DimIn) i1=1
 4208.                    IF (i2 > DimOut) i2=1
 4209.  1-----------<     DO
 4210.  1                    IF (i2 /= 1) THEN
 4211.  1                       dwork(i3)=dwork(i2+ioo)
 4212.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4213.  1                       mplon(i3-1,1)=1
 4214.  1                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 4215.  1                       IF (.NOT.flgin(2)) THEN
 4216.  1                          mplon(i3-1,1)=DimIn/2+1
 4217.  1                          IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 4218.  1                       END IF
 4219.  1                       mplon(i3-1,2)=i2-ico
 4220.  1                       IF (.NOT.flgout(2)) THEN
 4221.  1                          mplon(i3-1,2)=DimOut/2+i2-ico
 4222.  1                          IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4223.  1                       END IF
 4224.  1                       i2=i2+1
 4225.  1                       IF (i2 > DimOut)i2=1
 4226.  1                       i3=i3+1
 4227.  1                    END IF
 4228.  1                    IF (i1 /= 1)THEN
 4229.  1                       dwork(i3)=dwork(i1+ioi)
 4230.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4231.  1                       mplon(i3-1,1)=i1-ici
 4232.  1                       IF (.NOT.flgin(2)) THEN
 4233.  1                          mplon(i3-1,1)=DimIn/2+i1-ici
 4234.  1                          IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4235.  1                       END IF
 4236.  1                       mplon(i3-1,2)=1
 4237.  1                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 4238.  1                       IF (.NOT.flgout(2)) THEN
 4239.  1                          mplon(i3-1,2)=DimOut/2+1
 4240.  1                          IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 4241.  1                       END IF
 4242.  1                       i1=i1+1
 4243.  1                       IF (i1 > DimIn)i1=1
 4244.  1                       i3=i3+1
 4245.  1                    END IF
 4246.  1                    IF (i1 == 1 .AND. i2 == 1) EXIT
 4247.  1----------->     END DO
 4248.                    wtlon(i3-1)=2.0_r8*pi+dwork(1)-dwork(i3-1)
 4249.                    mplon(i3-1,1)=1
 4250.                    IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 4251.                    IF (.NOT.flgin(2)) THEN
 4252.                       mplon(i3-1,1)=DimIn/2+1
 4253.                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 4254.                    END IF
 4255.                    mplon(i3-1,2)=1
 4256.                    IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 4257.                    IF (.NOT.flgout(2)) THEN
 4258.                       mplon(i3-1,2)=DimOut/2+1
 4259.                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 4260.                    END IF
 4261.                    lond=i3-1
 4262.                
 4263.                    ! interpolation
 4264.                
 4265.                    mdist(1:7)        =0
 4266.                    ndist(1:7)        =0
 4267.  A----------<>     FieldOut(ifirst:ilast)   =0.0_r8
 4268.  A----------<>     wrk2  (1:DimOut)     =0.0_r8
 4269.  V----------<>     work(1:ncat,1:DimOut)=0.0_r8
 4270.                
 4271.  1-----------<    DO i=1,lond
 4272.  1             
 4273.  1                   wln=wtlon(i)
 4274.  1                   lni=mplon(i,1)
 4275.  1                   lno=mplon(i,2)
 4276.  1             
 4277.  1                   IF (FieldIn(lni) == undef)    CYCLE
 4278.  1             
 4279.  1                   nc =FieldIn(lni)
 4280.  1             
 4281.  1                   IF (nc > ncat.or.lno > DimOut) THEN
 4282.  1                     WRITE(nfprt,*)nc,lno,i,lni
 4283.  1                     STOP 'ERROR IN nc,lno,i and lni point'
 4284.  1                   END IF
 4285.  1             
 4286.  1                   IF (nc.lt.1.or.lno.lt.1) THEN
 4287.  1                     WRITE(nfprt,*)nc,lno,i,lni
 4288.  1                     STOP 'ERROR IN nc,lno,i and lni point'
 4289.  1                   END IF
 4290.  1                   work(nc ,lno)=work(nc,lno)+wln
 4291.  1                   wrk2(lno)=wrk2(lno)+wln
 4292.  1----------->    END DO
 4293.                
 4294.                   fq=1.0_r8
 4295.                   nd=0
 4296.                   ns=0
 4297.                
 4298.  1-----------<    DO i=ifirst,ilast
 4299.  1             
 4300.  1                   FieldOut(i)=undef
 4301.  1             
 4302.  1                   IF (wrk2(i) == 0.0_r8) CYCLE
 4303.  1             
 4304.  1                   fm =0.0_r8
 4305.  1                   nx =undef
 4306.  1                   mm =0
 4307.  1                   nn=1
 4308.  1                   b(1)=0.0_r8
 4309.  1                   b(2)=0.0_r8
 4310.  1                   b(3)=0.0_r8
 4311.  1                   b(4)=0.0_r8
 4312.  1                   b(5)=0.0_r8
 4313.  1             
 4314.  1 2---------<         DO n=1,ncat
 4315.  1 2                     fr=work(n,i)/wrk2(i)
 4316.  1 2           
 4317.  1 2                IF (fm < fr) THEN
 4318.  1 2                         fm=fr
 4319.  1 2                         nx=n
 4320.  1 2                       END IF
 4321.  1 2           
 4322.  1 2                     kl   =klass(n)
 4323.  1 2                     b(kl)=b(kl)+fr
 4324.  1 2           
 4325.  1 2              IF (fr > 0.5_r8) nn=0
 4326.  1 2                     IF (work(n,i).ne.0.0_r8) mm=mm+1
 4327.  1 2--------->         END DO
 4328.  1             
 4329.  1                   cmx=0.0_r8
 4330.  1                   kmx=0
 4331.  1             
 4332.  1 A---------<         DO k=1,5
 4333.  1 A                     IF (b(k) > cmx) THEN
 4334.  1 A                       cmx=b(k)
 4335.  1 A                       kmx=k
 4336.  1 A                     END IF
 4337.  1 A--------->         END DO
 4338.  1             
 4339.  1                   IF (klass(nx) == kmx) THEN
 4340.  1                     FieldOut(i)=nx
 4341.  1                     nd=nd+1
 4342.  1                     IF (fm.ne.0.0_r8.and.fm < fq) THEN
 4343.  1                       fq=fm
 4344.  1                       iq=i
 4345.  1                       nq=nx
 4346.  1                     END IF
 4347.  1             
 4348.  1                   ELSE
 4349.  1             
 4350.  1                     fmk=0.0_r8
 4351.  1             
 4352.  1 2---------<         DO n=1,ncat
 4353.  1 2                     IF (klass(n).ne.kmx) CYCLE
 4354.  1 2                       frk=work(n,i)/wrk2(i)
 4355.  1 2                       IF (fmk.lt.frk) THEN
 4356.  1 2                         fmk=frk
 4357.  1 2                         nxk=n
 4358.  1 2                       END IF
 4359.  1 2--------->         END DO
 4360.  1             
 4361.  1                     FieldOut(i)=nxk
 4362.  1                     ns=ns+1
 4363.  1                     IF (fmk.ne.0.0_r8.and.fm.lt.fq) THEN
 4364.  1                       fq=fmk
 4365.  1                       iq=i
 4366.  1                       nq=nxk
 4367.  1                     END IF
 4368.  1                   END IF
 4369.  1             
 4370.  1                   IF (mm.gt.7.and.mm.gt.0)mm=7
 4371.  1             
 4372.  1                   mdist(mm)=mdist(mm)+1
 4373.  1                   ndist(mm)=ndist(mm)+nn
 4374.  1----------->    END DO
 4375.                   RETURN
 4376.                 END SUBROUTINE CyclicFreqBox_i
ftn-5001 ftn: NOTE File = Utils.f90, Line = 4376 
  Local variable "NQ" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Utils.f90, Line = 4376 
  Local variable "IQ" is assigned a value but never used.

 4377.                
 4378.                
 4379.                 SUBROUTINE CyclicFreqBox_r(DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 4380.                    IMPLICIT NONE
 4381.                    INTEGER,    INTENT(IN ) :: DimIn
 4382.                    INTEGER,    INTENT(IN ) :: DimOut
 4383.                    INTEGER,    INTENT(IN ) :: ifirst
 4384.                    INTEGER,    INTENT(IN ) :: ilast
 4385.                    REAL   (KIND=r8),    INTENT(IN ) :: FieldIn (DimIn)
 4386.                    REAL   (KIND=r8),    INTENT(OUT) :: FieldOut(DimOut)
 4387.                    INTEGER,    PARAMETER   :: ncat   = 13 !number of catagories found
 4388.                
 4389.                    INTEGER :: iIn
 4390.                    INTEGER :: iOut
 4391.                    INTEGER :: iRatio
 4392.                    REAL(KIND=r8)    :: ratio
 4393.                    REAL(KIND=r8)    :: pi
 4394.                    REAL(KIND=r8)    :: hIn
 4395.                    REAL(KIND=r8)    :: hOut
 4396.                    INTEGER :: ici
 4397.                    INTEGER :: ico
 4398.                    INTEGER :: ioi
 4399.                    INTEGER :: ioo
 4400.                    INTEGER :: i
 4401.                    INTEGER :: k
 4402.                    LOGICAL :: flgin  (5)
 4403.                    LOGICAL :: flgout (5)
 4404.                    REAL   (KIND=r8) :: dwork  (2*(DimIn+DimOut+2))
 4405.                    REAL   (KIND=r8) :: wtlon  (   DimIn+DimOut+2 )
 4406.                    INTEGER :: mplon  (DimIn+DimOut+2,2)
 4407.                    REAL   (KIND=r8) :: work   (ncat,DimOut)
 4408.                    REAL   (KIND=r8) :: wrk2   (     DimOut)
 4409.                    REAL   (KIND=r8) :: undef  =0.0
 4410.                    REAL   (KIND=r8) :: dof
 4411.                    INTEGER :: i1
 4412.                    INTEGER :: i2
 4413.                    INTEGER :: i3
 4414.                    INTEGER :: lond
 4415.                    REAL   (KIND=r8) :: wln
 4416.                    INTEGER :: lni
 4417.                    INTEGER :: lno
 4418.                    INTEGER :: nc
 4419.                    INTEGER :: mm
 4420.                    INTEGER :: n
 4421.                    INTEGER :: nn
 4422.                    INTEGER :: nd
 4423.                    INTEGER :: mdist  (7)
 4424.                    INTEGER :: ndist  (7)
 4425.                    REAL   (KIND=r8) :: fm
 4426.                    INTEGER :: nx
 4427.                    INTEGER :: kl
 4428.                    REAL   (KIND=r8) :: b      (5)
 4429.                    REAL   (KIND=r8) :: fr
 4430.                    REAL   (KIND=r8) :: cmx
 4431.                    INTEGER :: kmx
 4432.                    REAL   (KIND=r8) :: fq
 4433.                    REAL   (KIND=r8) :: fmk
 4434.                    REAL   (KIND=r8) :: frk
 4435.                    INTEGER :: iq
 4436.                    INTEGER :: nq
 4437.                    INTEGER :: ns
 4438.                    INTEGER :: nxk
 4439.                    INTEGER :: klass  (ncat)
 4440.                    DATA KLASS/6*1,2,2,3,2,3,4,5/
 4441.                
 4442.                    ! case every output data abcissae is some input data abcissae
 4443.                
 4444.                    iRatio = DimIn/DimOut
 4445.                    IF (iRatio*DimOut == DimIn) THEN
 4446.  Vpr4--------<        DO iOut = ifirst, ilast
 4447.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 4448.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 4449.  Vpr4-------->        END DO
 4450.                       RETURN
 4451.                    END IF
 4452.                
 4453.                    ! protection: input data size should be at least 1
 4454.                
 4455.                    IF (DimIn < 1) THEN
 4456.                       STOP "**(CyclicLinear)** ERROR: Few input data points"
 4457.                    END IF
 4458.                
 4459.                    ! protection: output data should fit into input data + 2 intervals
 4460.                
 4461.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 4462.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 4463.                    IF (iIn > DimIn + 1) THEN
 4464.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 4465.                    END IF
 4466.                
 4467.                    ! initialization
 4468.                
 4469.                    pi     = 4.0_r8*ATAN(1.0_r8)
 4470.                
 4471.                    !
 4472.                    !     flags: (in or out)
 4473.                    !     1     start at north pole (true) start at south pole (false)
 4474.                    !     2     start at prime meridian (true) start at i.d.l. (false)
 4475.                    !     3     latitudes are at center of box (true)
 4476.                    !           latitudes are at edge (false) north edge if 1=true
 4477.                    !                                south edge if 1=false
 4478.                    !     4     longitudes are at center of box (true)
 4479.                    !           longitudes are at western edge of box (false)
 4480.                    !     5     gaussian (true) regular (false)
 4481.                    !
 4482.                    flgin (1)=.true.
 4483.                    flgin (2)=.true.
 4484.                    flgin (3)=.false.
 4485.                    flgin (4)=.true.
 4486.                    flgin (5)=.true.
 4487.                    flgout(1)=.true.
 4488.                    flgout(2)=.true.
 4489.                    flgout(3)=.false.
 4490.                    flgout(4)=.true.
 4491.                    flgout(5)=.true.
 4492.                
 4493.                    !
 4494.                    !     latitudes done, now do longitudes
 4495.                    !
 4496.                    !     input grid longitudes
 4497.                    !
 4498.                    ioi=DimIn+DimOut+2
 4499.                    hIn   =(2.0_r8*pi)/REAL(DimIn, r8)
 4500.                    IF (flgin(5) .OR. flgin(4)) THEN
 4501.                       ici=0
 4502.                       dof=0.5_r8
 4503.                    ELSE
 4504.                       ici=1
 4505.                       dof=0.0_r8
 4506.                    END IF
 4507.  Vr4---------<     DO i=1,DimIn
 4508.  Vr4                  dwork(i+ioi)= (dof+DBLE(i-1))*hIn
 4509.  Vr4--------->     END DO
 4510.                    !
 4511.                    !     output grid longitudes
 4512.                    !
 4513.                    ioo=2*DimIn+DimOut+3
 4514.                    hOut  =(2.0_r8*pi)/REAL(DimOut,r8)
 4515.                
 4516.                    IF (flgout(5) .OR. flgout(4)) THEN
 4517.                       ico=0
 4518.                       dof=0.5_r8
 4519.                    ELSE
 4520.                       ico=1
 4521.                       dof=0.0_r8
 4522.                    END IF
 4523.  Vr4---------<     DO i=1,DimOut
 4524.  Vr4                  dwork(i+ioo)= (dof+DBLE(i-1))*hOut
 4525.  Vr4--------->     END DO
 4526.                    !
 4527.                    !     produce single ordered set of longitudes for both grids
 4528.                    !     determine longitude weighting and index mapping
 4529.                    !
 4530.                    i1=1
 4531.                    i2=1
 4532.                    i3=1
 4533.  1-----------<     DO
 4534.  1                    IF (dwork(i1+ioi) == dwork(i2+ioo)) THEN
 4535.  1                       dwork(i3)=dwork(i1+ioi)
 4536.  1                       IF (i3 /= 1) THEN
 4537.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4538.  1                          mplon(i3-1,1)=i1-ici
 4539.  1                          IF (.NOT.flgin(2)) THEN
 4540.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4541.  1                             IF(i1-ici > DimIn/2)mplon(i3-1,1)=i1-ici-DimIn/2
 4542.  1                          END IF
 4543.  1                          mplon(i3-1,2)=i2-ico
 4544.  1                          IF (.NOT.flgout(2)) THEN
 4545.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4546.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4547.  1                          END IF
 4548.  1                       END IF
 4549.  1                       i1=i1+1
 4550.  1                       i2=i2+1
 4551.  1                       i3=i3+1
 4552.  1                    ELSE IF (dwork(i1+ioi) < dwork(i2+ioo)) THEN
 4553.  1                       dwork(i3)=dwork(i1+ioi)
 4554.  1                       IF (i3 /= 1)THEN
 4555.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4556.  1                          mplon(i3-1,1)=i1-ici
 4557.  1                          IF (.NOT.flgin(2)) THEN
 4558.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4559.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4560.  1                          END IF
 4561.  1                          mplon(i3-1,2)=i2-ico
 4562.  1                          IF (.NOT.flgout(2)) THEN
 4563.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4564.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4565.  1                          END IF
 4566.  1                       END IF
 4567.  1                       i1=i1+1
 4568.  1                       i3=i3+1
 4569.  1                    ELSE
 4570.  1                       dwork(i3)=dwork(i2+ioo)
 4571.  1                       IF (i3 /= 1)THEN
 4572.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4573.  1                          mplon(i3-1,1)=i1-ici
 4574.  1                          IF (.NOT.flgin(2)) THEN
 4575.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4576.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4577.  1                          END IF
 4578.  1                          mplon(i3-1,2)=i2-ico
 4579.  1                          IF (.NOT.flgout(2)) THEN
 4580.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4581.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4582.  1                          END IF
 4583.  1                       END IF
 4584.  1                       i2=i2+1
 4585.  1                       i3=i3+1
 4586.  1                    END IF
 4587.  1                    IF ((i1 > DimIn) .OR. (i2 > DimOut)) EXIT
 4588.  1----------->     END DO
 4589.                
 4590.                    IF (i1 > DimIn) i1=1
 4591.                    IF (i2 > DimOut) i2=1
 4592.  1-----------<     DO
 4593.  1                    IF (i2 /= 1) THEN
 4594.  1                       dwork(i3)=dwork(i2+ioo)
 4595.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4596.  1                       mplon(i3-1,1)=1
 4597.  1                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 4598.  1                       IF (.NOT.flgin(2)) THEN
 4599.  1                          mplon(i3-1,1)=DimIn/2+1
 4600.  1                          IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 4601.  1                       END IF
 4602.  1                       mplon(i3-1,2)=i2-ico
 4603.  1                       IF (.NOT.flgout(2)) THEN
 4604.  1                          mplon(i3-1,2)=DimOut/2+i2-ico
 4605.  1                          IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4606.  1                       END IF
 4607.  1                       i2=i2+1
 4608.  1                       IF (i2 > DimOut)i2=1
 4609.  1                       i3=i3+1
 4610.  1                    END IF
 4611.  1                    IF (i1 /= 1)THEN
 4612.  1                       dwork(i3)=dwork(i1+ioi)
 4613.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4614.  1                       mplon(i3-1,1)=i1-ici
 4615.  1                       IF (.NOT.flgin(2)) THEN
 4616.  1                          mplon(i3-1,1)=DimIn/2+i1-ici
 4617.  1                          IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4618.  1                       END IF
 4619.  1                       mplon(i3-1,2)=1
 4620.  1                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 4621.  1                       IF (.NOT.flgout(2)) THEN
 4622.  1                          mplon(i3-1,2)=DimOut/2+1
 4623.  1                          IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 4624.  1                       END IF
 4625.  1                       i1=i1+1
 4626.  1                       IF (i1 > DimIn)i1=1
 4627.  1                       i3=i3+1
 4628.  1                    END IF
 4629.  1                    IF (i1 == 1 .AND. i2 == 1) EXIT
 4630.  1----------->     END DO
 4631.                    wtlon(i3-1)=2.0_r8*pi+dwork(1)-dwork(i3-1)
 4632.                    mplon(i3-1,1)=1
 4633.                    IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 4634.                    IF (.NOT.flgin(2)) THEN
 4635.                       mplon(i3-1,1)=DimIn/2+1
 4636.                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 4637.                    END IF
 4638.                    mplon(i3-1,2)=1
 4639.                    IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 4640.                    IF (.NOT.flgout(2)) THEN
 4641.                       mplon(i3-1,2)=DimOut/2+1
 4642.                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 4643.                    END IF
 4644.                    lond=i3-1
 4645.                
 4646.                    ! interpolation
 4647.                
 4648.                    mdist(1:7)           =0
 4649.                    ndist(1:7)           =0
 4650.  A----------<>     FieldOut(ifirst:ilast)   =0.0_r8
 4651.  A----------<>     wrk2  (1:DimOut)     =0.0_r8
 4652.  V----------<>     work(1:ncat,1:DimOut)=0.0_r8
 4653.                
 4654.  1-----------<    DO i=1,lond
 4655.  1             
 4656.  1                   wln=wtlon(i)
 4657.  1                   lni=mplon(i,1)
 4658.  1                   lno=mplon(i,2)
 4659.  1             
 4660.  1                   IF (FieldIn(lni) == undef)    CYCLE
 4661.  1             
 4662.  1                   nc =INT(FieldIn(lni))
 4663.  1             
 4664.  1                   IF (nc > ncat.or.lno > DimOut) THEN
 4665.  1                     WRITE(nfprt,*)nc,lno,i,lni
 4666.  1                     STOP 'ERROR IN nc,lno,i and lni point'
 4667.  1                   END IF
 4668.  1             
 4669.  1                   IF (nc.lt.1.or.lno.lt.1) THEN
 4670.  1                     WRITE(nfprt,*)nc,lno,i,lni
 4671.  1                     STOP 'ERROR IN nc,lno,i and lni point'
 4672.  1                   END IF
 4673.  1                   work(nc ,lno)=work(nc,lno)+wln
 4674.  1                   wrk2(lno)=wrk2(lno)+wln
 4675.  1----------->    END DO
 4676.                
 4677.                   fq=1.0_r8
 4678.                   nd=0
 4679.                   ns=0
 4680.                
 4681.  1-----------<    DO i=ifirst,ilast
 4682.  1             
 4683.  1                   FieldOut(i)=undef
 4684.  1             
 4685.  1                   IF (wrk2(i) == 0.0_r8) CYCLE
 4686.  1             
 4687.  1                   fm =0.0_r8
 4688.  1                   nx =undef
 4689.  1                   mm =0
 4690.  1                   nn=1
 4691.  1                   b(1)=0.0_r8
 4692.  1                   b(2)=0.0_r8
 4693.  1                   b(3)=0.0_r8
 4694.  1                   b(4)=0.0_r8
 4695.  1                   b(5)=0.0_r8
 4696.  1             
 4697.  1 2---------<         DO n=1,ncat
 4698.  1 2                     fr=work(n,i)/wrk2(i)
 4699.  1 2           
 4700.  1 2                IF (fm < fr) THEN
 4701.  1 2                         fm=fr
 4702.  1 2                         nx=n
 4703.  1 2                       END IF
 4704.  1 2           
 4705.  1 2                     kl   =klass(n)
 4706.  1 2                     b(kl)=b(kl)+fr
 4707.  1 2           
 4708.  1 2              IF (fr > 0.5_r8) nn=0
 4709.  1 2                     IF (work(n,i).ne.0.0_r8) mm=mm+1
 4710.  1 2--------->         END DO
 4711.  1             
 4712.  1                   cmx=0.0_r8
 4713.  1                   kmx=0
 4714.  1             
 4715.  1 A---------<         DO k=1,5
 4716.  1 A                     IF (b(k) > cmx) THEN
 4717.  1 A                       cmx=b(k)
 4718.  1 A                       kmx=k
 4719.  1 A                     END IF
 4720.  1 A--------->         END DO
 4721.  1             
 4722.  1                   IF (klass(nx) == kmx) THEN
 4723.  1                     FieldOut(i)=nx
 4724.  1                     nd=nd+1
 4725.  1                     IF (fm.ne.0.0_r8.and.fm < fq) THEN
 4726.  1                       fq=fm
 4727.  1                       iq=i
 4728.  1                       nq=nx
 4729.  1                     END IF
 4730.  1             
 4731.  1                   ELSE
 4732.  1             
 4733.  1                     fmk=0.0_r8
 4734.  1             
 4735.  1 2---------<         DO n=1,ncat
 4736.  1 2                     IF (klass(n).ne.kmx) CYCLE
 4737.  1 2                       frk=work(n,i)/wrk2(i)
 4738.  1 2                       IF (fmk.lt.frk) THEN
 4739.  1 2                         fmk=frk
 4740.  1 2                         nxk=n
 4741.  1 2                       END IF
 4742.  1 2--------->         END DO
 4743.  1             
 4744.  1                     FieldOut(i)=nxk
 4745.  1                     ns=ns+1
 4746.  1                     IF (fmk.ne.0.0_r8.and.fm.lt.fq) THEN
 4747.  1                       fq=fmk
 4748.  1                       iq=i
 4749.  1                       nq=nxk
 4750.  1                     END IF
 4751.  1                   END IF
 4752.  1             
 4753.  1                   IF (mm.gt.7.and.mm.gt.0)mm=7
 4754.  1             
 4755.  1                   mdist(mm)=mdist(mm)+1
 4756.  1                   ndist(mm)=ndist(mm)+nn
 4757.  1----------->    END DO
 4758.                   RETURN
 4759.                 END SUBROUTINE CyclicFreqBox_r
ftn-5001 ftn: NOTE File = Utils.f90, Line = 4759 
  Local variable "IQ" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Utils.f90, Line = 4759 
  Local variable "NQ" is assigned a value but never used.

 4760.                
 4761.                
 4762.                
 4763.                
 4764.                  SUBROUTINE SeaMaskIJtoIBJB_R2D(FieldIn,FieldOut)
 4765.                    REAL(KIND=r8)   , INTENT(IN  ) :: FieldIn (iMax,jMax)
 4766.                    REAL(KIND=r8)   , INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 4767.                
 4768.                    REAL(KIND=r8)      :: FOut(iMax)
 4769.                    INTEGER            :: i
 4770.                    INTEGER            :: iFirst
 4771.                    INTEGER            :: ilast
 4772.                    INTEGER            :: ib
 4773.                    INTEGER            :: j
 4774.                    INTEGER            :: jb
 4775.                
 4776.                    CHARACTER(LEN=*), PARAMETER :: h="**SeaMaskIJtoIBJB**"
 4777.                
 4778.                    IF (reducedGrid) THEN
 4779.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb)
 4780.  M m---------<        DO j = myfirstlat,mylastlat
 4781.  M m                     iFirst = myfirstlon(j)
 4782.  M m                     ilast  = mylastlon(j)
 4783.  M m                     CALL CyclicSeaMask_r(iMax, iMaxPerJ(j), &
 4784.  M m                     FieldIn(1,j), FOut, ifirst, ilast)
 4785.  m 2---------<           DO i = ifirst,ilast
 4786.  m 2                        ib = ibperij(i,j)
 4787.  m 2                        jb = jbperij(i,j)
 4788.  m 2                        FieldOut(ib,jb) = Fout(i)
 4789.  m 2--------->           END DO
 4790.  m----------->        END DO
 4791.                       !$OMP END PARALLEL DO
 4792.                    ELSE
 4793.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 4794.  M m---------<        DO jb = 1, jbMax
 4795.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 4796.  m 2                        i = iPerIJB(ib,jb)
 4797.  m 2                        j = jPerIJB(ib,jb)
 4798.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 4799.  m 2--------->           END DO
 4800.  m----------->        END DO
 4801.                       !$OMP END PARALLEL DO
 4802.                    END IF
 4803.                  END SUBROUTINE SeaMaskIJtoIBJB_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 4803 
  Named Constant "H" is not used.

 4804.                
 4805.                
 4806.                
 4807.                  SUBROUTINE SeaMaskIBJBtoIJ_R2D(FieldIn,FieldOut)
 4808.                    REAL(KIND=r8)   , INTENT(IN  ) :: FieldIn (ibMax,jbMax)
 4809.                    REAL(KIND=r8)   , INTENT(OUT ) :: FieldOut(iMax,jMax)
 4810.                
 4811.                    INTEGER            :: i
 4812.                    INTEGER            :: iFirst
 4813.                    INTEGER            :: ib
 4814.                    INTEGER            :: j
 4815.                    INTEGER            :: jl
 4816.                    INTEGER            :: jb
 4817.                
 4818.                    CHARACTER(LEN=*), PARAMETER :: h="**SeaMaskIBJBtoIJ**"
 4819.                
 4820.                    IF (reducedGrid) THEN
 4821.                       !$OMP PARALLEL DO PRIVATE(iFirst,jb,jl)
 4822.  D-----------<        DO j = myfirstlat,mylastlat
 4823.  D                       jl = j-myfirstlat+1
 4824.  D                       iFirst = ibPerIJ(1,j)
 4825.  D                       jb = jbPerIJ(1,j)
 4826.  D             !         CALL CyclicSeaMask_r(iMaxPerJ(j), iMax, &
 4827.  D             !              FieldIn(iFirst,jb), FieldOut(1,jl))
 4828.  D----------->        END DO
 4829.                       !$OMP END PARALLEL DO
 4830.                    ELSE
 4831.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 4832.  M m---------<        DO jb = 1, jbMax
 4833.  M m 2-------<           DO ib = 1, ibMaxPerJB(jb)
 4834.  M m 2                      i = iPerIJB(ib,jb)
 4835.  M m 2                      j = jPerIJB(ib,jb)-myfirstlat+1
 4836.  M m 2                      FieldOut(i,j)=FieldIn(ib,jb)
 4837.  M m 2------->           END DO
 4838.  M m--------->        END DO
 4839.                       !$OMP END PARALLEL DO
 4840.                    END IF
 4841.                  END SUBROUTINE SeaMaskIBJBtoIJ_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 4841 
  Named Constant "H" is not used.

 4842.                
 4843.                
 4844.                  SUBROUTINE CyclicSeaMask_r(DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 4845.                
 4846.                    INTEGER,    INTENT(IN ) :: DimIn
 4847.                    INTEGER,    INTENT(IN ) :: DimOut
 4848.                    INTEGER,    INTENT(IN ) :: ifirst
 4849.                    INTEGER,    INTENT(IN ) :: ilast
 4850.                    REAL   (KIND=r8),    INTENT(IN ) :: FieldIn (DimIn)
 4851.                    REAL   (KIND=r8),    INTENT(OUT) :: FieldOut(DimOut)
 4852.                
 4853.                    INTEGER :: iIn
 4854.                    INTEGER :: iOut
 4855.                    INTEGER :: iRatio
 4856.                    REAL(KIND=r8)    :: ratio
 4857.                    REAL(KIND=r8)    :: pi
 4858.                    REAL(KIND=r8)    :: hIn
 4859.                    REAL(KIND=r8)    :: hOut
 4860.                    INTEGER :: ici
 4861.                    INTEGER :: ico
 4862.                    INTEGER :: ioi
 4863.                    INTEGER :: ioo
 4864.                    INTEGER :: i
 4865.                    LOGICAL :: flgin  (5)
 4866.                    LOGICAL :: flgout (5)
 4867.                    REAL   (KIND=r8) :: dwork  (2*(DimIn+DimOut+2))
 4868.                    REAL   (KIND=r8) :: wtlon  (   DimIn+DimOut+2 )
 4869.                    INTEGER :: mplon  (DimIn+DimOut+2,2)
 4870.                    REAL   (KIND=r8) :: work   (DimOut)
 4871.                    REAL   (KIND=r8) :: undef  =290.0_r8
 4872.                    REAL   (KIND=r8) :: dof
 4873.                    INTEGER :: i1
 4874.                    INTEGER :: i2
 4875.                    INTEGER :: i3
 4876.                    INTEGER :: lond
 4877.                    REAL   (KIND=r8) :: wln
 4878.                    INTEGER :: lni
 4879.                    INTEGER :: lno
 4880.                
 4881.                    ! case every output data abcissae is some input data abcissae
 4882.                
 4883.                    iRatio = DimIn/DimOut
 4884.                    IF (iRatio*DimOut == DimIn) THEN
 4885.  Vpr4--------<        DO iOut = ifirst, ilast
 4886.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 4887.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 4888.  Vpr4-------->        END DO
 4889.                       RETURN
 4890.                    END IF
 4891.                
 4892.                    ! protection: input data size should be at least 1
 4893.                
 4894.                    IF (DimIn < 1) THEN
 4895.                       STOP "**(CyclicLinear)** ERROR: Few input data points"
 4896.                    END IF
 4897.                
 4898.                    ! protection: output data should fit into input data + 2 intervals
 4899.                
 4900.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 4901.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 4902.                    IF (iIn > DimIn + 1) THEN
 4903.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 4904.                    END IF
 4905.                
 4906.                    ! initialization
 4907.                
 4908.                    pi     = 4.0_r8*ATAN(1.0_r8)
 4909.                
 4910.                    !
 4911.                    !     flags: (in or out)
 4912.                    !     1     start at north pole (true) start at south pole (false)
 4913.                    !     2     start at prime meridian (true) start at i.d.l. (false)
 4914.                    !     3     latitudes are at center of box (true)
 4915.                    !           latitudes are at edge (false) north edge if 1=true
 4916.                    !                                south edge if 1=false
 4917.                    !     4     longitudes are at center of box (true)
 4918.                    !           longitudes are at western edge of box (false)
 4919.                    !     5     gaussian (true) regular (false)
 4920.                    !
 4921.                    flgin (1)=.true.
 4922.                    flgin (2)=.true.
 4923.                    flgin (3)=.false.
 4924.                    flgin (4)=.true.
 4925.                    flgin (5)=.true.
 4926.                    flgout(1)=.true.
 4927.                    flgout(2)=.true.
 4928.                    flgout(3)=.false.
 4929.                    flgout(4)=.true.
 4930.                    flgout(5)=.true.
 4931.                
 4932.                    !
 4933.                    !     latitudes done, now do longitudes
 4934.                    !
 4935.                    !     input grid longitudes
 4936.                    !
 4937.                    ioi=DimIn+DimOut+2
 4938.                    hIn   =(2.0_r8*pi)/REAL(DimIn, r8)
 4939.                    IF (flgin(5) .OR. flgin(4)) THEN
 4940.                       ici=0
 4941.                       dof=0.5_r8
 4942.                    ELSE
 4943.                       ici=1
 4944.                       dof=0.0_r8
 4945.                    END IF
 4946.  Vr4---------<     DO i=1,DimIn
 4947.  Vr4                  dwork(i+ioi)= (dof+DBLE(i-1))*hIn
 4948.  Vr4--------->     END DO
 4949.                    !
 4950.                    !     output grid longitudes
 4951.                    !
 4952.                    ioo=2*DimIn+DimOut+3
 4953.                    hOut  =(2.0_r8*pi)/REAL(DimOut,r8)
 4954.                
 4955.                    IF (flgout(5) .OR. flgout(4)) THEN
 4956.                       ico=0
 4957.                       dof=0.5_r8
 4958.                    ELSE
 4959.                       ico=1
 4960.                       dof=0.0_r8
 4961.                    END IF
 4962.  Vr4---------<     DO i=1,DimOut
 4963.  Vr4                  dwork(i+ioo)= (dof+(i-1))*hOut
 4964.  Vr4--------->     END DO
 4965.                    !
 4966.                    !     produce single ordered set of longitudes for both grids
 4967.                    !     determine longitude weighting and index mapping
 4968.                    !
 4969.                    i1=1
 4970.                    i2=1
 4971.                    i3=1
 4972.  1-----------<     DO
 4973.  1                    IF (dwork(i1+ioi) == dwork(i2+ioo)) THEN
 4974.  1                       dwork(i3)=dwork(i1+ioi)
 4975.  1                       IF (i3 /= 1) THEN
 4976.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4977.  1                          mplon(i3-1,1)=i1-ici
 4978.  1                          IF (.NOT.flgin(2)) THEN
 4979.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4980.  1                             IF(i1-ici > DimIn/2)mplon(i3-1,1)=i1-ici-DimIn/2
 4981.  1                          END IF
 4982.  1                          mplon(i3-1,2)=i2-ico
 4983.  1                          IF (.NOT.flgout(2)) THEN
 4984.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 4985.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 4986.  1                          END IF
 4987.  1                       END IF
 4988.  1                       i1=i1+1
 4989.  1                       i2=i2+1
 4990.  1                       i3=i3+1
 4991.  1                    ELSE IF (dwork(i1+ioi) < dwork(i2+ioo)) THEN
 4992.  1                       dwork(i3)=dwork(i1+ioi)
 4993.  1                       IF (i3 /= 1)THEN
 4994.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 4995.  1                          mplon(i3-1,1)=i1-ici
 4996.  1                          IF (.NOT.flgin(2)) THEN
 4997.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 4998.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 4999.  1                          END IF
 5000.  1                          mplon(i3-1,2)=i2-ico
 5001.  1                          IF (.NOT.flgout(2)) THEN
 5002.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 5003.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5004.  1                          END IF
 5005.  1                       END IF
 5006.  1                       i1=i1+1
 5007.  1                       i3=i3+1
 5008.  1                    ELSE
 5009.  1                       dwork(i3)=dwork(i2+ioo)
 5010.  1                       IF (i3 /= 1)THEN
 5011.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5012.  1                          mplon(i3-1,1)=i1-ici
 5013.  1                          IF (.NOT.flgin(2)) THEN
 5014.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 5015.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 5016.  1                          END IF
 5017.  1                          mplon(i3-1,2)=i2-ico
 5018.  1                          IF (.NOT.flgout(2)) THEN
 5019.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 5020.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5021.  1                          END IF
 5022.  1                       END IF
 5023.  1                       i2=i2+1
 5024.  1                       i3=i3+1
 5025.  1                    END IF
 5026.  1                    IF ((i1 > DimIn) .OR. (i2 > DimOut)) EXIT
 5027.  1----------->     END DO
 5028.                
 5029.                    IF (i1 > DimIn) i1=1
 5030.                    IF (i2 > DimOut) i2=1
 5031.  1-----------<     DO
 5032.  1                    IF (i2 /= 1) THEN
 5033.  1                       dwork(i3)=dwork(i2+ioo)
 5034.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5035.  1                       mplon(i3-1,1)=1
 5036.  1                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 5037.  1                       IF (.NOT.flgin(2)) THEN
 5038.  1                          mplon(i3-1,1)=DimIn/2+1
 5039.  1                          IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 5040.  1                       END IF
 5041.  1                       mplon(i3-1,2)=i2-ico
 5042.  1                       IF (.NOT.flgout(2)) THEN
 5043.  1                          mplon(i3-1,2)=DimOut/2+i2-ico
 5044.  1                          IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5045.  1                       END IF
 5046.  1                       i2=i2+1
 5047.  1                       IF (i2 > DimOut)i2=1
 5048.  1                       i3=i3+1
 5049.  1                    END IF
 5050.  1                    IF (i1 /= 1)THEN
 5051.  1                       dwork(i3)=dwork(i1+ioi)
 5052.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5053.  1                       mplon(i3-1,1)=i1-ici
 5054.  1                       IF (.NOT.flgin(2)) THEN
 5055.  1                          mplon(i3-1,1)=DimIn/2+i1-ici
 5056.  1                          IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 5057.  1                       END IF
 5058.  1                       mplon(i3-1,2)=1
 5059.  1                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 5060.  1                       IF (.NOT.flgout(2)) THEN
 5061.  1                          mplon(i3-1,2)=DimOut/2+1
 5062.  1                          IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 5063.  1                       END IF
 5064.  1                       i1=i1+1
 5065.  1                       IF (i1 > DimIn)i1=1
 5066.  1                       i3=i3+1
 5067.  1                    END IF
 5068.  1                    IF (i1 == 1 .AND. i2 == 1) EXIT
 5069.  1----------->     END DO
 5070.                    wtlon(i3-1)=2.0_r8*pi+dwork(1)-dwork(i3-1)
 5071.                    mplon(i3-1,1)=1
 5072.                    IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 5073.                    IF (.NOT.flgin(2)) THEN
 5074.                       mplon(i3-1,1)=DimIn/2+1
 5075.                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 5076.                    END IF
 5077.                    mplon(i3-1,2)=1
 5078.                    IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 5079.                    IF (.NOT.flgout(2)) THEN
 5080.                       mplon(i3-1,2)=DimOut/2+1
 5081.                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 5082.                    END IF
 5083.                    lond=i3-1
 5084.                
 5085.                    ! interpolation
 5086.                
 5087.  A----------<>     FieldOut(1:DimOut)   =0.0_r8
 5088.  A----------<>     work(1:DimOut)=0.0_r8
 5089.                
 5090.  1-----------<     DO i=1,lond
 5091.  1                   lni=mplon(i,1)
 5092.  1                   IF (FieldIn(lni) < 0.0_r8) THEN ! OBS 0.0 Kelvin valor minino de
 5093.  1                       ! temperatura usada na interpolacao
 5094.  1                      wln = wtlon(i)
 5095.  1                      lno = mplon(i,2)
 5096.  1                      FieldOut(lno)= FieldOut(lno)+FieldIn(lni)*wln
 5097.  1                      work(lno) = work(lno)+wln
 5098.  1                   END IF
 5099.  1----------->     END DO
 5100.                
 5101.  1-----------<     DO i=ifirst,ilast
 5102.  1                   IF (work(i) == 0.0_r8)THEN
 5103.  1                      FieldOut(i)=undef
 5104.  1                   ELSE
 5105.  1                      FieldOut(i)=FieldOut(i)/work(i)
 5106.  1                   END IF
 5107.  1----------->     END DO
 5108.                
 5109.                 END SUBROUTINE CyclicSeaMask_r
 5110.                
 5111.                
 5112.                
 5113.                 SUBROUTINE AveBoxIJtoIBJB_R2D(FieldIn,FieldOut)
 5114.                    REAL(KIND=r8)   , INTENT(IN  ) :: FieldIn (iMax,jMax)
 5115.                    REAL(KIND=r8)   , INTENT(OUT ) :: FieldOut(ibMax,jbMax)
 5116.                
 5117.                    REAL(KIND=r8)      :: FOut(iMax)
 5118.                    INTEGER            :: i
 5119.                    INTEGER            :: iFirst
 5120.                    INTEGER            :: ilast
 5121.                    INTEGER            :: ib
 5122.                    INTEGER            :: j
 5123.                    INTEGER            :: jb
 5124.                
 5125.                    CHARACTER(LEN=*), PARAMETER :: h="**AveBoxIJtoIBJB_R2D**"
 5126.                
 5127.                    IF (reducedGrid) THEN
 5128.                       !$OMP PARALLEL DO PRIVATE(iFirst,ilast,fout,i,ib,jb)
 5129.  M m---------<        DO j = myfirstlat,mylastlat
 5130.  M m                     iFirst = myfirstlon(j)
 5131.  M m                     ilast  = mylastlon(j)
 5132.  M m                     CALL CyclicAveBox_r(iMax, iMaxPerJ(j), &
 5133.  M m                          FieldIn(1,j), FOut, ifirst, ilast)
 5134.  m 2---------<           DO i = ifirst,ilast
 5135.  m 2                        ib = ibperij(i,j)
 5136.  m 2                        jb = jbperij(i,j)
 5137.  m 2                        FieldOut(ib,jb) = Fout(i)
 5138.  m 2--------->           END DO
 5139.  m----------->        END DO
 5140.                       !$OMP END PARALLEL DO
 5141.                    ELSE
 5142.                       !$OMP PARALLEL DO PRIVATE(ib,i,j)
 5143.  M m---------<        DO jb = 1, jbMax
 5144.  m 2---------<           DO ib = 1, ibMaxPerJB(jb)
 5145.  m 2                        i = iPerIJB(ib,jb)
 5146.  m 2                        j = jPerIJB(ib,jb)
 5147.  m 2                        FieldOut(ib,jb)=FieldIn(i,j)
 5148.  m 2--------->           END DO
 5149.  m----------->        END DO
 5150.                       !$OMP END PARALLEL DO
 5151.                    END IF
 5152.                 END SUBROUTINE AveBoxIJtoIBJB_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 5152 
  Named Constant "H" is not used.

 5153.                
 5154.                
 5155.                
 5156.                 SUBROUTINE AveBoxIBJBtoIJ_R2D(FieldIn,FieldOut)
 5157.                    REAL(KIND=r8)   , INTENT(IN  ) :: FieldIn (ibMax,jbMax)
 5158.                    REAL(KIND=r8)   , INTENT(OUT ) :: FieldOut(iMax,jMax)
 5159.                
 5160.                    INTEGER            :: i
 5161.                    INTEGER            :: iFirst
 5162.                    INTEGER            :: ib
 5163.                    INTEGER            :: j
 5164.                    INTEGER            :: jl
 5165.                    INTEGER            :: jb
 5166.                
 5167.                    CHARACTER(LEN=*), PARAMETER :: h="**AveBoxIBJBtoIJ_R2D**"
 5168.                
 5169.                    IF (reducedGrid) THEN
 5170.                       !$OMP PARALLEL DO PRIVATE(iFirst,jb,jl)
 5171.  D-----------<        DO j = myfirstlat,mylastlat
 5172.  D                       jl = j-myfirstlat+1
 5173.  D                       iFirst = ibPerIJ(1,j)
 5174.  D                       jb = jbPerIJ(1,j)
 5175.  D             !         CALL CyclicAveBox_r(iMaxPerJ(j), iMax, &
 5176.  D             !              FieldIn(iFirst,jb), FieldOut(1,jl))
 5177.  D----------->        END DO
 5178.                       !$OMP END PARALLEL DO
 5179.                    ELSE
 5180.  M                    !$OMP PARALLEL DO PRIVATE(ib,i,j)
 5181.  M m---------<        DO jb = 1, jbMax
 5182.  M m 2-------<           DO ib = 1, ibMaxPerJB(jb)
 5183.  M m 2                      i = iPerIJB(ib,jb)
 5184.  M m 2                      j = jPerIJB(ib,jb)-myfirstlat+1
 5185.  M m 2                      FieldOut(i,j)=FieldIn(ib,jb)
 5186.  M m 2------->           END DO
 5187.  M m--------->        END DO
 5188.  M                    !$OMP END PARALLEL DO
 5189.                    END IF
 5190.                 END SUBROUTINE AveBoxIBJBtoIJ_R2D
ftn-5008 ftn: NOTE File = Utils.f90, Line = 5190 
  Named Constant "H" is not used.

 5191.                
 5192.                
 5193.                 SUBROUTINE CyclicAveBox_r(DimIn, DimOut, FieldIn, FieldOut, ifirst, ilast)
 5194.                
 5195.                    INTEGER,    INTENT(IN ) :: DimIn
 5196.                    INTEGER,    INTENT(IN ) :: DimOut
 5197.                    INTEGER,    INTENT(IN ) :: ifirst
 5198.                    INTEGER,    INTENT(IN ) :: ilast
 5199.                    REAL   (KIND=r8),    INTENT(IN ) :: FieldIn (DimIn)
 5200.                    REAL   (KIND=r8),    INTENT(OUT) :: FieldOut(DimOut)
 5201.                
 5202.                    INTEGER :: iIn
 5203.                    INTEGER :: iOut
 5204.                    INTEGER :: iRatio
 5205.                    REAL(KIND=r8)    :: ratio
 5206.                    REAL(KIND=r8)    :: pi
 5207.                    REAL(KIND=r8)    :: hIn
 5208.                    REAL(KIND=r8)    :: hOut
 5209.                    INTEGER :: ici
 5210.                    INTEGER :: ico
 5211.                    INTEGER :: ioi
 5212.                    INTEGER :: ioo
 5213.                    INTEGER :: i
 5214.                    LOGICAL :: flgin  (5)
 5215.                    LOGICAL :: flgout (5)
 5216.                    REAL   (KIND=r8) :: dwork  (2*(DimIn+DimOut+2))
 5217.                    REAL   (KIND=r8) :: wtlon  (   DimIn+DimOut+2 )
 5218.                    INTEGER :: mplon  (DimIn+DimOut+2,2)
 5219.                    REAL   (KIND=r8) :: work   (DimOut)
 5220.                    REAL   (KIND=r8) :: undef  =-999.0_r8
 5221.                    REAL   (KIND=r8) :: dof
 5222.                    INTEGER :: i1
 5223.                    INTEGER :: i2
 5224.                    INTEGER :: i3
 5225.                    INTEGER :: lond
 5226.                    REAL   (KIND=r8) :: wln
 5227.                    INTEGER :: lni
 5228.                    INTEGER :: lno
 5229.                
 5230.                    ! case every output data abcissae is some input data abcissae
 5231.                
 5232.                    iRatio = DimIn/DimOut
 5233.                    IF (iRatio*DimOut == DimIn) THEN
 5234.  Vpr4--------<        DO iOut = ifirst, ilast
 5235.  Vpr4                    iIn =iRatio*(iOut-1) + 1
 5236.  Vpr4                    FieldOut(iOut) = FieldIn(iIn)
 5237.  Vpr4-------->        END DO
 5238.                       RETURN
 5239.                    END IF
 5240.                
 5241.                    ! protection: input data size should be at least 1
 5242.                
 5243.                    IF (DimIn < 1) THEN
 5244.                       STOP "**(CyclicLinear)** ERROR: Few input data points"
 5245.                    END IF
 5246.                
 5247.                    ! protection: output data should fit into input data + 2 intervals
 5248.                
 5249.                    ratio = REAL(DimIn,r8)/REAL(DimOut,r8)
 5250.                    iIn = INT(REAL(DimOut-1,r8)*ratio) + 2
 5251.                    IF (iIn > DimIn + 1) THEN
 5252.                       STOP "**(CyclicCubicSpline)** ERROR: Output data out of input interval"
 5253.                    END IF
 5254.                
 5255.                    ! initialization
 5256.                
 5257.                    pi     = 4.0_r8*ATAN(1.0_r8)
 5258.                
 5259.                    !
 5260.                    !     flags: (in or out)
 5261.                    !     1     start at north pole (true) start at south pole (false)
 5262.                    !     2     start at prime meridian (true) start at i.d.l. (false)
 5263.                    !     3     latitudes are at center of box (true)
 5264.                    !           latitudes are at edge (false) north edge if 1=true
 5265.                    !                                south edge if 1=false
 5266.                    !     4     longitudes are at center of box (true)
 5267.                    !           longitudes are at western edge of box (false)
 5268.                    !     5     gaussian (true) regular (false)
 5269.                    !
 5270.                    flgin (1)=.true.
 5271.                    flgin (2)=.true.
 5272.                    flgin (3)=.false.
 5273.                    flgin (4)=.true.
 5274.                    flgin (5)=.true.
 5275.                    flgout(1)=.true.
 5276.                    flgout(2)=.true.
 5277.                    flgout(3)=.false.
 5278.                    flgout(4)=.true.
 5279.                    flgout(5)=.true.
 5280.                
 5281.                    !
 5282.                    !     latitudes done, now do longitudes
 5283.                    !
 5284.                    !     input grid longitudes
 5285.                    !
 5286.                    ioi=DimIn+DimOut+2
 5287.                    hIn   =(2.0_r8*pi)/REAL(DimIn, r8)
 5288.                    IF (flgin(5) .OR. flgin(4)) THEN
 5289.                       ici=0
 5290.                       dof=0.5_r8
 5291.                    ELSE
 5292.                       ici=1
 5293.                       dof=0.0_r8
 5294.                    END IF
 5295.  Vr4---------<     DO i=1,DimIn
 5296.  Vr4                  dwork(i+ioi)= (dof+DBLE(i-1))*hIn
 5297.  Vr4--------->     END DO
 5298.                    !
 5299.                    !     output grid longitudes
 5300.                    !
 5301.                    ioo=2*DimIn+DimOut+3
 5302.                    hOut  =(2.0_r8*pi)/REAL(DimOut,r8)
 5303.                
 5304.                    IF (flgout(5) .OR. flgout(4)) THEN
 5305.                       ico=0
 5306.                       dof=0.5_r8
 5307.                    ELSE
 5308.                       ico=1
 5309.                       dof=0.0_r8
 5310.                    END IF
 5311.  Vr4---------<     DO i=1,DimOut
 5312.  Vr4                  dwork(i+ioo)= (dof+(i-1))*hOut
 5313.  Vr4--------->     END DO
 5314.                    !
 5315.                    !     produce single ordered set of longitudes for both grids
 5316.                    !     determine longitude weighting and index mapping
 5317.                    !
 5318.                    i1=1
 5319.                    i2=1
 5320.                    i3=1
 5321.  1-----------<     DO
 5322.  1                    IF (dwork(i1+ioi) == dwork(i2+ioo)) THEN
 5323.  1                       dwork(i3)=dwork(i1+ioi)
 5324.  1                       IF (i3 /= 1) THEN
 5325.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5326.  1                          mplon(i3-1,1)=i1-ici
 5327.  1                          IF (.NOT.flgin(2)) THEN
 5328.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 5329.  1                             IF(i1-ici > DimIn/2)mplon(i3-1,1)=i1-ici-DimIn/2
 5330.  1                          END IF
 5331.  1                          mplon(i3-1,2)=i2-ico
 5332.  1                          IF (.NOT.flgout(2)) THEN
 5333.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 5334.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5335.  1                          END IF
 5336.  1                       END IF
 5337.  1                       i1=i1+1
 5338.  1                       i2=i2+1
 5339.  1                       i3=i3+1
 5340.  1                    ELSE IF (dwork(i1+ioi) < dwork(i2+ioo)) THEN
 5341.  1                       dwork(i3)=dwork(i1+ioi)
 5342.  1                       IF (i3 /= 1)THEN
 5343.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5344.  1                          mplon(i3-1,1)=i1-ici
 5345.  1                          IF (.NOT.flgin(2)) THEN
 5346.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 5347.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 5348.  1                          END IF
 5349.  1                          mplon(i3-1,2)=i2-ico
 5350.  1                          IF (.NOT.flgout(2)) THEN
 5351.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 5352.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5353.  1                          END IF
 5354.  1                       END IF
 5355.  1                       i1=i1+1
 5356.  1                       i3=i3+1
 5357.  1                    ELSE
 5358.  1                       dwork(i3)=dwork(i2+ioo)
 5359.  1                       IF (i3 /= 1)THEN
 5360.  1                          wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5361.  1                          mplon(i3-1,1)=i1-ici
 5362.  1                          IF (.NOT.flgin(2)) THEN
 5363.  1                             mplon(i3-1,1)=DimIn/2+i1-ici
 5364.  1                             IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 5365.  1                          END IF
 5366.  1                          mplon(i3-1,2)=i2-ico
 5367.  1                          IF (.NOT.flgout(2)) THEN
 5368.  1                             mplon(i3-1,2)=DimOut/2+i2-ico
 5369.  1                             IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5370.  1                          END IF
 5371.  1                       END IF
 5372.  1                       i2=i2+1
 5373.  1                       i3=i3+1
 5374.  1                    END IF
 5375.  1                    IF ((i1 > DimIn) .OR. (i2 > DimOut)) EXIT
 5376.  1----------->     END DO
 5377.                
 5378.                    IF (i1 > DimIn) i1=1
 5379.                    IF (i2 > DimOut) i2=1
 5380.  1-----------<     DO
 5381.  1                    IF (i2 /= 1) THEN
 5382.  1                       dwork(i3)=dwork(i2+ioo)
 5383.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5384.  1                       mplon(i3-1,1)=1
 5385.  1                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 5386.  1                       IF (.NOT.flgin(2)) THEN
 5387.  1                          mplon(i3-1,1)=DimIn/2+1
 5388.  1                          IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 5389.  1                       END IF
 5390.  1                       mplon(i3-1,2)=i2-ico
 5391.  1                       IF (.NOT.flgout(2)) THEN
 5392.  1                          mplon(i3-1,2)=DimOut/2+i2-ico
 5393.  1                          IF (i2-ico > DimOut/2) mplon(i3-1,2)=i2-ico-DimOut/2
 5394.  1                       END IF
 5395.  1                       i2=i2+1
 5396.  1                       IF (i2 > DimOut)i2=1
 5397.  1                       i3=i3+1
 5398.  1                    END IF
 5399.  1                    IF (i1 /= 1)THEN
 5400.  1                       dwork(i3)=dwork(i1+ioi)
 5401.  1                       wtlon(i3-1)=dwork(i3)-dwork(i3-1)
 5402.  1                       mplon(i3-1,1)=i1-ici
 5403.  1                       IF (.NOT.flgin(2)) THEN
 5404.  1                          mplon(i3-1,1)=DimIn/2+i1-ici
 5405.  1                          IF (i1-ici > DimIn/2) mplon(i3-1,1)=i1-ici-DimIn/2
 5406.  1                       END IF
 5407.  1                       mplon(i3-1,2)=1
 5408.  1                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 5409.  1                       IF (.NOT.flgout(2)) THEN
 5410.  1                          mplon(i3-1,2)=DimOut/2+1
 5411.  1                          IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 5412.  1                       END IF
 5413.  1                       i1=i1+1
 5414.  1                       IF (i1 > DimIn)i1=1
 5415.  1                       i3=i3+1
 5416.  1                    END IF
 5417.  1                    IF (i1 == 1 .AND. i2 == 1) EXIT
 5418.  1----------->     END DO
 5419.                    wtlon(i3-1)=2.0_r8*pi+dwork(1)-dwork(i3-1)
 5420.                    mplon(i3-1,1)=1
 5421.                    IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn
 5422.                    IF (.NOT.flgin(2)) THEN
 5423.                       mplon(i3-1,1)=DimIn/2+1
 5424.                       IF (.NOT.(flgin(4) .OR. flgin(5))) mplon(i3-1,1)=DimIn/2
 5425.                    END IF
 5426.                    mplon(i3-1,2)=1
 5427.                    IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut
 5428.                    IF (.NOT.flgout(2)) THEN
 5429.                       mplon(i3-1,2)=DimOut/2+1
 5430.                       IF (.NOT.(flgout(4) .OR. flgout(5))) mplon(i3-1,2)=DimOut/2
 5431.                    END IF
 5432.                    lond=i3-1
 5433.                
 5434.                    ! interpolation
 5435.                
 5436.  A----------<>     FieldOut(1:DimOut)   =0.0_r8
 5437.  A----------<>     work(1:DimOut)=0.0_r8
 5438.                
 5439.  1-----------<     DO i=1,lond
 5440.  1                   lni=mplon(i,1)
 5441.  1                   IF (FieldIn(lni) /= undef) THEN
 5442.  1                      wln = wtlon(i)
 5443.  1                      lno = mplon(i,2)
 5444.  1                      FieldOut(lno)= FieldOut(lno)+FieldIn(lni)*wln
 5445.  1                      work(lno) = work(lno)+wln
 5446.  1                   END IF
 5447.  1----------->     END DO
 5448.                
 5449.  1-----------<     DO i=ifirst,ilast
 5450.  1                   IF (work(i) == 0.0_r8)THEN
 5451.  1                      FieldOut(i)=undef
 5452.  1                   ELSE
 5453.  1                      FieldOut(i)=FieldOut(i)/work(i)
 5454.  1                   END IF
 5455.  1----------->     END DO
 5456.                
 5457.                 END SUBROUTINE CyclicAveBox_r
 5458.                !
 5459.                !------------------------------- VFORMAT ----------------------------------
 5460.                !
 5461.                 SUBROUTINE vfirec(iunit,a,n,type)
 5462.                
 5463.                  INTEGER, INTENT(IN)  :: iunit  !#TO deve ser kind default
 5464.                  INTEGER, INTENT(IN)  :: n
 5465.                  REAL(KIND=r8), INTENT(OUT)    :: a(n)
 5466.                  CHARACTER(len=* ), INTENT(IN) :: type
 5467.                  !
 5468.                  ! local
 5469.                  !
 5470.                  CHARACTER(len=1 ) :: vc(0:63)
 5471.                  CHARACTER(len=80) :: line
 5472.                  CHARACTER(len=1 ) :: cs
 5473.                  INTEGER           :: ich0
 5474.                  INTEGER           :: ich9
 5475.                  INTEGER           :: ichcz
 5476.                  INTEGER           :: ichca
 5477.                  INTEGER           :: ichla
 5478.                  INTEGER           :: ichlz
 5479.                  INTEGER           :: i
 5480.                  INTEGER           :: nvalline
 5481.                  INTEGER           :: nchs
 5482.                  INTEGER           :: ic
 5483.                  INTEGER           :: ii
 5484.                  INTEGER           :: isval
 5485.                  INTEGER           :: iii
 5486.                  INTEGER           :: ics
 5487.                  INTEGER           :: nn
 5488.                  INTEGER           :: nbits
 5489.                  INTEGER           :: nc
 5490.                  REAL(KIND=r8)              :: bias
 5491.                  REAL(KIND=r8)              :: fact
 5492.                  REAL(KIND=r8)              :: facti
 5493.                  REAL(KIND=r8)              :: scfct
 5494.                  vc='0'
 5495.  D I--------->   IF (vc(0).ne.'0') CALL vfinit(vc)
 5496.                
 5497.                  ich0 =ichar('0')
 5498.                  ich9 =ichar('9')
 5499.                  ichcz=ichar('Z')
 5500.                  ichlz=ichar('z')
 5501.                  ichca=ichar('A')
 5502.                  ichla=ichar('a')
 5503.                
 5504.                  READ (iunit,'(2i8,2e20.10)')nn,nbits,bias,fact
 5505.                
 5506.                  IF (nn.ne.n) THEN
 5507.                    PRINT*,' Word count mismatch on vfirec record '
 5508.                    PRINT*,' Words on record - ',nn
 5509.                    PRINT*,' Words expected  - ',n
 5510.                    STOP 'vfirec'
 5511.                  END IF
 5512.                
 5513.                  nvalline=(78*6)/nbits
 5514.                  nchs=nbits/6
 5515.                
 5516.  1-----------<   DO i=1,n,nvalline
 5517.  1                 READ(iunit,'(a78)') line
 5518.  1                 ic=0
 5519.  1 2---------<     DO ii=i,i+nvalline-1
 5520.  1 2                 isval=0
 5521.  1 2                 IF(ii.gt.n) EXIT
 5522.  1 2 r2------<       DO iii=1,nchs
 5523.  1 2 r2                 ic=ic+1
 5524.  1 2 r2                 cs=line(ic:ic)
 5525.  1 2 r2                 ics=ichar(cs)
 5526.  1 2 r2                 IF (ics.le.ich9) THEN
 5527.  1 2 r2                    nc=ics-ich0
 5528.  1 2 r2                 ELSE IF (ics.le.ichcz) THEN
 5529.  1 2 r2                    nc=ics-ichca+10
 5530.  1 2 r2                 ELSE
 5531.  1 2 r2                    nc=ics-ichla+36
 5532.  1 2 r2                 END IF
 5533.  1 2 r2                 isval=ior(ishft(nc,6*(nchs-iii)),isval)
 5534.  1 2 r2------>       END DO ! loop iii
 5535.  1 2                   a(ii)=isval
 5536.  1 2--------->     END DO ! loop ii
 5537.  1             
 5538.  1----------->   END DO ! loop i
 5539.                
 5540.                  facti=1.0_r8/fact
 5541.                
 5542.                  IF (type.eq.'LIN') THEN
 5543.  Vr4---------<     DO i=1,n
 5544.  Vr4           
 5545.  Vr4                 a(i)=a(i)*facti-bias
 5546.  Vr4           
 5547.  Vr4                 !print*,'VFM=',i,a(i)
 5548.  Vr4--------->     END DO
 5549.                  ELSE IF (type.eq.'LOG') THEN
 5550.                    scfct=2.0_r8**(nbits-1)
 5551.  Vr4---------<     DO i=1,n
 5552.  Vr4                   a(i)=sign(1.0_r8,a(i)-scfct)  &
 5553.  Vr4                      *(10.0_r8**(abs(20.0_r8*(a(i)/scfct-1.0_r8))-10.0_r8))
 5554.  Vr4--------->     END DO
 5555.                  END IF
 5556.                 END SUBROUTINE vfirec
ftn-5001 ftn: NOTE File = Utils.f90, Line = 5556 
  Local variable "ICHLZ" is assigned a value but never used.

 5557.                !--------------------------------------------------------
 5558.                 SUBROUTINE vfinit(vc)
 5559.                   CHARACTER(len=1), INTENT(OUT  ) :: vc   (*)
 5560.                   CHARACTER(len=1)                :: vcscr(0:63)
 5561.                   INTEGER                         :: n
 5562.                
 5563.                   DATA vcscr/'0','1','2','3','4','5','6','7','8','9'   &
 5564.                              ,'A','B','C','D','E','F','G','H','I','J'  &
 5565.                              ,'K','L','M','N','O','P','Q','R','S','T'  &
 5566.                              ,'U','V','W','X','Y','Z','a','b','c','d'  &
 5567.                              ,'e','f','g','h','i','j','k','l','m','n'  &
 5568.                              ,'o','p','q','r','s','t','u','v','w','x'  &
 5569.                              ,'y','z','{','|'/
 5570.                
 5571.  1-----------<   DO n=0,63
 5572.  1                   vc(n)=vcscr(n)
 5573.  1----------->   END DO
 5574.                 END SUBROUTINE vfinit
 5575.                
 5576.                END MODULE Utils

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 422 
  A loop starting at line 422 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 422 
  A loop starting at line 422 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 424 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 427 
  A loop starting at line 427 was not vectorized because it contains a reference to a non-vector intrinsic on line 430.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 433 
  A loop starting at line 433 was not vectorized because it contains a reference to a non-vector intrinsic on line 434.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 442 
  A loop starting at line 442 was vectorized.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 443 
  A loop starting at line 443 was not vectorized because a better candidate was found at line 444.

ftn-6049 ftn: SCALAR File = Utils.f90, Line = 443 
  A loop starting at line 443 was blocked with block size 4.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 443 
  A loop starting at line 443 was unrolled 4 times.

ftn-6049 ftn: SCALAR File = Utils.f90, Line = 444 
  A loop starting at line 444 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 444 
  A loop starting at line 444 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 444 
  A loop starting at line 444 was vectorized.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 451 
  A region starting at line 451 and ending at line 460 was multi-threaded.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 452 
  A loop starting at line 452 was not vectorized because a better candidate was found at line 453.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 452 
  A loop starting at line 452 was partitioned.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 453 
  A loop starting at line 453 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 453 
  A loop starting at line 453 was vectorized.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 454 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 461 
  A region starting at line 461 and ending at line 474 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 462 
  A loop starting at line 462 was not vectorized because a recurrence was found on "LEGFUNCS2F" at line 465.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 462 
  A loop starting at line 462 was partitioned.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 463 
  A loop starting at line 463 was not vectorized because a better candidate was found at line 464.

ftn-6049 ftn: SCALAR File = Utils.f90, Line = 463 
  A loop starting at line 463 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Utils.f90, Line = 464 
  A loop starting at line 464 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 464 
  A loop starting at line 464 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 464 
  A loop starting at line 464 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 465 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 475 
  A loop starting at line 475 was not vectorized because it contains a reference to a non-vector intrinsic on line 475.

ftn-3001 ftn: IPA File = Utils.f90, Line = 475 
  The call to RESET_EPSLON_TO_LOCAL was textually inlined.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 477 
  A loop starting at line 477 was vectorized.

ftn-6049 ftn: SCALAR File = Utils.f90, Line = 478 
  A loop starting at line 478 was blocked with block size 4.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 478 
  A loop starting at line 478 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 478 
  A loop starting at line 478 was not vectorized because a recurrence was found on "AUXPOL" at line 480.

ftn-6049 ftn: SCALAR File = Utils.f90, Line = 479 
  A loop starting at line 479 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 479 
  A loop starting at line 479 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 479 
  A loop starting at line 479 was vectorized.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 486 
  A region starting at line 486 and ending at line 494 was multi-threaded.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 487 
  A loop starting at line 487 was not vectorized because a better candidate was found at line 489.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 487 
  A loop starting at line 487 was partitioned.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 489 
  A loop starting at line 489 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 489 
  A loop starting at line 489 was vectorized.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 495 
  A region starting at line 495 and ending at line 505 was multi-threaded.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 496 
  A loop starting at line 496 was not vectorized because a better candidate was found at line 498.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 496 
  A loop starting at line 496 was partitioned.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 498 
  A loop starting at line 498 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 498 
  A loop starting at line 498 was vectorized.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 506 
  A region starting at line 506 and ending at line 520 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 507 
  A loop starting at line 507 was not vectorized because a recurrence was found on "LEGFUNCS2F" at line 511.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 507 
  A loop starting at line 507 was partitioned.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 509 
  A loop starting at line 509 was not vectorized because a better candidate was found at line 510.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 510 
  A loop starting at line 510 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 510 
  A loop starting at line 510 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 511 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 531 
  A loop starting at line 531 was not vectorized because it contains a reference to a non-vector intrinsic on line 532.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 559 
  A loop starting at line 559 was not vectorized because it contains a call to a subroutine or function on line 559.

ftn-3021 ftn: IPA File = Utils.f90, Line = 559 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3001 ftn: IPA File = Utils.f90, Line = 559 
  The call to DUMPMATRIXREAL1D was textually inlined.

ftn-3021 ftn: IPA File = Utils.f90, Line = 560 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Utils.f90, Line = 560 
  Routine DUMPMATRIXREAL2D was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 593 
  A loop starting at line 593 was not vectorized because it contains a reference to a non-vector intrinsic on line 593.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 595 
  A loop starting at line 595 was not vectorized because it contains a reference to a non-vector intrinsic on line 595.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 609 
  A loop starting at line 609 was not vectorized because it contains a call to a subroutine or function on line 611.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 624 
  A loop starting at line 624 was not vectorized because it contains input/output operations at line 625.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 628 
  A loop starting at line 628 was not vectorized because it contains a call to a subroutine or function on line 631.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 646 
  A loop starting at line 646 was not vectorized because it contains input/output operations at line 647.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 649 
  A loop starting at line 649 was not vectorized because it contains input/output operations at line 650.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 653 
  A loop starting at line 653 was not vectorized because it contains a call to a subroutine or function on line 656.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 671 
  A loop starting at line 671 was not vectorized because it contains a call to a subroutine or function on line 673.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 686 
  A loop starting at line 686 was not vectorized because it contains input/output operations at line 687.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 690 
  A loop starting at line 690 was not vectorized because it contains a call to a subroutine or function on line 693.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 708 
  A loop starting at line 708 was not vectorized because it contains input/output operations at line 709.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 711 
  A loop starting at line 711 was not vectorized because it contains input/output operations at line 712.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 715 
  A loop starting at line 715 was not vectorized because it contains a call to a subroutine or function on line 718.

ftn-3021 ftn: IPA File = Utils.f90, Line = 783 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Utils.f90, Line = 788 
  Routine READGAUSS was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Utils.f90, Line = 790 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3022 ftn: IPA File = Utils.f90, Line = 790 
  Routine LEGPOLROOTSANDWEIGHTS was not inlined because the call nest is too large to expand. 

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 791 
  A loop starting at line 791 was vectorized.

ftn-3021 ftn: IPA File = Utils.f90, Line = 793 
  Routine WRITEGAUSS was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 796 
  A loop starting at line 796 was not vectorized because it does not map well onto the target architecture.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 797 
  A loop starting at line 797 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 798 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 798 
  A loop starting at line 798 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 799 
  A loop starting at line 799 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 800 
  A loop starting at line 800 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 802 
  A loop starting at line 802 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 802 
  A loop starting at line 802 was vectorized.

ftn-3021 ftn: IPA File = Utils.f90, Line = 812 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Utils.f90, Line = 818 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Utils.f90, Line = 822 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 834 
  A loop starting at line 834 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 860 
  A loop starting at line 860 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 860 
  A loop starting at line 860 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 863 
  A loop starting at line 863 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 863 
  A loop starting at line 863 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 867 
  A loop starting at line 867 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 867 
  A loop starting at line 867 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 868 
  A divide was turned into a multiply by a reciprocal

ftn-6823 ftn: THREAD File = Utils.f90, Line = 871 
  A region starting at line 871 and ending at line 881 was multi-threaded.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 872 
  A loop starting at line 872 was partially vectorized.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 872 
  A loop starting at line 872 was partitioned.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 884 
  A region starting at line 884 and ending at line 911 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 885 
  A loop starting at line 885 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 885 
  A loop starting at line 885 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 886 
  A loop starting at line 886 was not vectorized because it contains a reference to a non-vector intrinsic on line 890.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 898 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 905 
  A divide was turned into a multiply by a reciprocal

ftn-3021 ftn: IPA File = Utils.f90, Line = 930 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 952 
  A loop starting at line 952 was not vectorized because it contains a call to a subroutine or function on line 952.

ftn-3021 ftn: IPA File = Utils.f90, Line = 952 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3001 ftn: IPA File = Utils.f90, Line = 952 
  The call to DUMPMATRIXREAL1D was textually inlined.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 953 
  A loop starting at line 953 was not vectorized because it contains a call to a subroutine or function on line 953.

ftn-3021 ftn: IPA File = Utils.f90, Line = 953 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3001 ftn: IPA File = Utils.f90, Line = 953 
  The call to DUMPMATRIXREAL1D was textually inlined.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1003 
  A loop starting at line 1003 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1003 
  A loop starting at line 1003 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1004 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1055 
  A loop starting at line 1055 was vectorized.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1056 
  A loop starting at line 1056 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1057 
  A loop starting at line 1057 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1063 
  A loop starting at line 1063 was not vectorized because a recurrence was found on "P0" between lines 1064 and 1065.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1064 
  A loop starting at line 1064 was vectorized.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1065 
  A loop starting at line 1065 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1065 
  A loop starting at line 1065 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1070 
  A loop starting at line 1070 was not vectorized because a recurrence was found on "P1" between lines 1071 and 1073.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1071 
  A loop starting at line 1071 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1072 
  A loop starting at line 1072 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1073 
  A loop starting at line 1073 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1074 
  A loop starting at line 1074 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1075 
  A loop starting at line 1075 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1076 
  A loop starting at line 1076 was vectorized.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1078 
  A loop starting at line 1078 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1083 
  A loop starting at line 1083 was replaced by a library call.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1088 
  A loop starting at line 1088 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1162 
  A loop starting at line 1162 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1162 
  A loop starting at line 1162 was vectorized.

ftn-3021 ftn: IPA File = Utils.f90, Line = 1165 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6327 ftn: VECTOR File = Utils.f90, Line = 1169 
  A loop starting at line 1169 was not vectorized because it required a vector test not supported on this architecture.

ftn-6270 ftn: VECTOR File = Utils.f90, Line = 1173 
  A loop starting at line 1173 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1181 
  A loop starting at line 1181 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1190 
  A loop starting at line 1190 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1194 
  A loop starting at line 1194 was not vectorized because a recurrence was found on "IT" at line 1203.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1204 
  A loop starting at line 1204 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1205 
  A loop starting at line 1205 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1211 
  A loop starting at line 1211 was not vectorized because a recurrence was found on "P1" between lines 1212 and 1213.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1212 
  A loop starting at line 1212 was vectorized.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1213 
  A loop starting at line 1213 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1213 
  A loop starting at line 1213 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1218 
  A loop starting at line 1218 was not vectorized because a recurrence was found on "P1" between lines 1219 and 1221.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1219 
  A loop starting at line 1219 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1220 
  A loop starting at line 1220 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1221 
  A loop starting at line 1221 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1222 
  A loop starting at line 1222 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1223 
  A loop starting at line 1223 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1224 
  A loop starting at line 1224 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1226 
  A loop starting at line 1226 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1227 
  A loop starting at line 1227 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1228 
  A loop starting at line 1228 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1229 
  A loop starting at line 1229 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1230 
  A loop starting at line 1230 was vectorized.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1236 
  A loop starting at line 1236 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1267 
  A loop starting at line 1267 was not vectorized because a recurrence was found on "A" at line 1325.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1273 
  A loop starting at line 1273 was not vectorized because a recurrence was found on "BIGA" at line 1278.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1275 
  A loop starting at line 1275 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1275 
  A loop starting at line 1275 was not vectorized because a recurrence was found on "BIGA" at line 1278.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1291 
  A loop starting at line 1291 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1291 
  A loop starting at line 1291 was not vectorized because a recurrence was found on "A" at line 1295.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1306 
  A loop starting at line 1306 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1306 
  A loop starting at line 1306 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1322 
  A loop starting at line 1322 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1322 
  A loop starting at line 1322 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1325 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1331 
  A loop starting at line 1331 was not vectorized because a recurrence was found on "A" at line 1340.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1335 
  A loop starting at line 1335 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1335 
  A loop starting at line 1335 was not vectorized because a recurrence was found on "A" at line 1340.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1347 
  A loop starting at line 1347 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1347 
  A loop starting at line 1347 was unrolled 8 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1350 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1359 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 1365 
  A loop starting at line 1365 was not vectorized because a better candidate was found at line 1373.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1373 
  A loop starting at line 1373 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1373 
  A loop starting at line 1373 was vectorized.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1385 
  A loop starting at line 1385 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1385 
  A loop starting at line 1385 was unrolled 8 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1420 
  A loop starting at line 1420 was not vectorized because a recurrence was found on "SCAL" at line 1420.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1423 
  A loop starting at line 1423 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1423 
  A loop starting at line 1423 was vectorized.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1429 
  A loop starting at line 1429 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1429 
  A loop starting at line 1429 was unrolled 8 times.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 1444 
  A loop starting at line 1444 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 1447 
  A loop starting at line 1447 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 1463 
  A loop starting at line 1463 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 1465 
  A loop starting at line 1465 was not vectorized for an unspecified reason.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1477 
  A loop starting at line 1477 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1483 
  A loop starting at line 1483 was not vectorized because a recurrence was found on "A" between lines 1491 and 1519.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1485 
  A loop starting at line 1485 was not vectorized because a recurrence was found on "A" between lines 1491 and 1519.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1489 
  A loop starting at line 1489 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 1489 
  A loop starting at line 1489 was partially vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1501 
  A loop starting at line 1501 was not vectorized because a recurrence was found on "C" at line 1503.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1506 
  A loop starting at line 1506 was not vectorized because a recurrence was found on "C" at line 1508.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1513 
  A divide was turned into a multiply by a reciprocal

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1518 
  A loop starting at line 1518 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1518 
  A loop starting at line 1518 was unrolled 8 times.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1522 
  A loop starting at line 1522 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1522 
  A loop starting at line 1522 was vectorized.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 1551 
  A loop starting at line 1551 was not vectorized because it contains a reference to a non-vector intrinsic on line 1558.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 1557 
  A loop starting at line 1557 was not vectorized because a better candidate was found at line 1551.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1557 
  A loop starting at line 1557 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1566 
  A loop starting at line 1566 was not vectorized because a recurrence was found on "Z" at line 1575.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1573 
  A loop starting at line 1573 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1573 
  A loop starting at line 1573 was unrolled 8 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1612 
  A loop starting at line 1612 was not vectorized because a recurrence was found on "K" at line 1619.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 1614 
  A loop starting at line 1614 was not vectorized because it contains a reference to a non-vector intrinsic on line 1615.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1630 
  A loop starting at line 1630 was not vectorized because a recurrence was found on "H" between lines 1779 and 1781.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1638 
  A loop starting at line 1638 was not vectorized because a recurrence was found on "H" between lines 1648 and 1693.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1660 
  A loop starting at line 1660 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1660 
  A loop starting at line 1660 was unrolled 8 times.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 1673 
  A loop starting at line 1673 was not vectorized for an unspecified reason.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1682 
  A divide was turned into a multiply by a reciprocal

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1692 
  A loop starting at line 1692 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1692 
  A loop starting at line 1692 was unrolled 8 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 1700 
  A loop starting at line 1700 was not vectorized because a recurrence was found on "P" at line 1717.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1711 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1718 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1722 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Utils.f90, Line = 1726 
  A loop starting at line 1726 was conditionally vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1739 
  A loop starting at line 1739 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1739 
  A loop starting at line 1739 was vectorized.

ftn-6270 ftn: VECTOR File = Utils.f90, Line = 1752 
  A loop starting at line 1752 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1799 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1800 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 1805 
  A loop starting at line 1805 was partially vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1813 
  A loop starting at line 1813 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1813 
  A loop starting at line 1813 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1821 
  A loop starting at line 1821 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 1821 
  A loop starting at line 1821 was vectorized.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 1847 
  A loop starting at line 1847 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1847 
  A loop starting at line 1847 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1847 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Utils.f90, Line = 1847 
  A loop starting at line 1847 was conditionally vectorized.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to HQR3 was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1847 
  The call to ZD was textually inlined.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1873 
  A loop starting at line 1873 was not vectorized because a recurrence was found on "H" between lines 1883 and 1935.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1888 
  A loop starting at line 1888 was not vectorized because a recurrence was found on "H" between lines 1912 and 1915.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1894 
  A loop starting at line 1894 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 1894 
  A loop starting at line 1894 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1936 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Utils.f90, Line = 1938 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1939 
  The call to ZD was textually inlined.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 1947 
  A loop starting at line 1947 was not vectorized because a recurrence was found on "H" between lines 1972 and 1979.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1953 
  A loop starting at line 1953 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 1953 
  A loop starting at line 1953 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1965 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Utils.f90, Line = 1965 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1966 
  The call to ZD was textually inlined.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1979 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Utils.f90, Line = 1979 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1980 
  The call to ZD was textually inlined.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 1985 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Utils.f90, Line = 1985 
  The call to ZD was textually inlined.

ftn-3001 ftn: IPA File = Utils.f90, Line = 1986 
  The call to ZD was textually inlined.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 1996 
  A loop starting at line 1996 was not vectorized because the iteration space is too irregular.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 1998 
  A loop starting at line 1998 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 1998 
  A loop starting at line 1998 was unrolled 8 times.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2008 
  A loop starting at line 2008 was not vectorized because a recurrence was found on "Z" between lines 2016 and 2019.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2012 
  A loop starting at line 2012 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 2012 
  A loop starting at line 2012 was not vectorized because it contains a reference to a non-vector intrinsic on line 2016.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2015 
  A loop starting at line 2015 was not vectorized because a better candidate was found at line 2012.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2015 
  A loop starting at line 2015 was unrolled 4 times.

ftn-6007 ftn: SCALAR File = Utils.f90, Line = 2046 
  A loop starting at line 2046 was interchanged with the loop starting at line 2047.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2046 
  A loop starting at line 2046 was replaced by a library call.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 2046 
  A loop starting at line 2046 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2046 
  A loop starting at line 2046 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2047 
  A loop starting at line 2047 was not vectorized because a better candidate was found at line 2046.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2058 
  A loop starting at line 2058 was not vectorized because a recurrence was found on "ORT" between lines 2064 and 2077.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2063 
  A loop starting at line 2063 was replaced by a library call.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2067 
  A loop starting at line 2067 was not vectorized because a better candidate was found at line 2070.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2070 
  A loop starting at line 2070 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2070 
  A loop starting at line 2070 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2077 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 2079 
  A loop starting at line 2079 was not vectorized because it contains a reference to a non-vector intrinsic on line 2081.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 2108 
  A loop starting at line 2108 was not vectorized because the iteration space is too irregular.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2115 
  A loop starting at line 2115 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2115 
  A loop starting at line 2115 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2124 
  A loop starting at line 2124 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2124 
  A loop starting at line 2124 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2126 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2136 
  A loop starting at line 2136 was not vectorized because a better candidate was found at line 2141.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2141 
  A loop starting at line 2141 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2141 
  A loop starting at line 2141 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2146 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 2148 
  A loop starting at line 2148 was not vectorized because it contains a reference to a non-vector intrinsic on line 2150.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 2157 
  A loop starting at line 2157 was not vectorized because it contains a reference to a non-vector intrinsic on line 2164.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2162 
  A loop starting at line 2162 was not vectorized because a better candidate was found at line 2157.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2162 
  A loop starting at line 2162 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2167 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2169 
  A loop starting at line 2169 was not vectorized because a better candidate was found at line 2157.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2169 
  A loop starting at line 2169 was unrolled 4 times.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2281 
  A loop starting at line 2281 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2281 
  A loop starting at line 2281 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2281 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Utils.f90, Line = 2281 
  A loop starting at line 2281 was conditionally vectorized.

ftn-3001 ftn: IPA File = Utils.f90, Line = 2281 
  The call to BALANC was textually inlined.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2287 
  A loop starting at line 2287 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2287 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Utils.f90, Line = 2287 
  A loop starting at line 2287 was conditionally vectorized.

ftn-3001 ftn: IPA File = Utils.f90, Line = 2287 
  The call to ORTHES was textually inlined.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2293 
  A loop starting at line 2293 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2293 
  A loop starting at line 2293 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2293 
  A loop starting at line 2293 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2293 
  A divide was turned into a multiply by a reciprocal

ftn-6217 ftn: VECTOR File = Utils.f90, Line = 2293 
  A loop starting at line 2293 was partially and conditionally vectorized.

ftn-3001 ftn: IPA File = Utils.f90, Line = 2293 
  The call to ORTRAN was textually inlined.

ftn-3022 ftn: IPA File = Utils.f90, Line = 2299 
  Routine HQR2 was not inlined because the call nest is too large to expand. 

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2306 
  A loop starting at line 2306 was unrolled 4 times.

ftn-6213 ftn: VECTOR File = Utils.f90, Line = 2306 
  A loop starting at line 2306 was conditionally vectorized.

ftn-3001 ftn: IPA File = Utils.f90, Line = 2306 
  The call to BALBAK was textually inlined.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2311 
  A loop starting at line 2311 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2311 
  A loop starting at line 2311 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2311 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Utils.f90, Line = 2311 
  A loop starting at line 2311 was conditionally vectorized.

ftn-3001 ftn: IPA File = Utils.f90, Line = 2311 
  The call to ZNORMA was textually inlined.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2344 
  A loop starting at line 2344 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2344 
  A loop starting at line 2344 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2352 
  A loop starting at line 2352 was not vectorized because a recurrence was found on "B" at line 2355.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 2359 
  A loop starting at line 2359 was not vectorized for an unspecified reason.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2368 
  A loop starting at line 2368 was not vectorized because a recurrence was found on "D" between lines 2386 and 2397.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2389 
  A loop starting at line 2389 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2389 
  A loop starting at line 2389 was vectorized.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2404 
  A loop starting at line 2404 was not vectorized because a recurrence was found on "E" between lines 2412 and 2416.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2410 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2413 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2419 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2428 
  A loop starting at line 2428 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2428 
  A loop starting at line 2428 was vectorized.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 2444 
  A loop starting at line 2444 was not vectorized because it contains a call to a subroutine or function on line 2450.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2449 
  A loop starting at line 2449 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2460 
  A loop starting at line 2460 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2460 
  A loop starting at line 2460 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2494 
  A loop starting at line 2494 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2494 
  A loop starting at line 2494 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2502 
  A loop starting at line 2502 was not vectorized because a recurrence was found on "B" at line 2505.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 2509 
  A loop starting at line 2509 was not vectorized for an unspecified reason.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2518 
  A loop starting at line 2518 was not vectorized because a recurrence was found on "D" between lines 2536 and 2547.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2539 
  A loop starting at line 2539 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2539 
  A loop starting at line 2539 was vectorized.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2554 
  A loop starting at line 2554 was not vectorized because a recurrence was found on "E" between lines 2562 and 2566.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2560 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2563 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2569 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2578 
  A loop starting at line 2578 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2578 
  A loop starting at line 2578 was vectorized.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 2594 
  A loop starting at line 2594 was not vectorized because it contains a call to a subroutine or function on line 2600.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2599 
  A loop starting at line 2599 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2610 
  A loop starting at line 2610 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2610 
  A loop starting at line 2610 was vectorized.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 2631 
  A loop starting at line 2631 was not vectorized because the iteration space is too irregular.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 2632 
  A loop starting at line 2632 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2632 
  A loop starting at line 2632 was unrolled 8 times.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 2638 
  A loop starting at line 2638 was not vectorized because the iteration space is too irregular.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2645 
  A loop starting at line 2645 was partially vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2653 
  A loop starting at line 2653 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2653 
  A loop starting at line 2653 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2654 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2665 
  A loop starting at line 2665 was not vectorized because a recurrence was found on "Z" at line 2666.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2666 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2669 
  A loop starting at line 2669 was partially vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2676 
  A loop starting at line 2676 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2676 
  A loop starting at line 2676 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2681 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2686 
  A loop starting at line 2686 was not vectorized because a recurrence was found on "Z" at line 2692.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2691 
  A loop starting at line 2691 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2691 
  A loop starting at line 2691 was partially vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2701 
  A loop starting at line 2701 was not vectorized because a recurrence was found on "Z" at line 2713.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2705 
  A loop starting at line 2705 was not vectorized because a better candidate was found at line 2708.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2708 
  A loop starting at line 2708 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2708 
  A loop starting at line 2708 was partially vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2712 
  A loop starting at line 2712 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2712 
  A loop starting at line 2712 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2720 
  A loop starting at line 2720 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 2720 
  A loop starting at line 2720 was partially vectorized.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2751 
  A loop starting at line 2751 was not vectorized because a better candidate was found at line 2752.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 2752 
  A loop starting at line 2752 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Utils.f90, Line = 2756 
  A loop starting at line 2756 was not vectorized because a recurrence was found on "Z" between lines 2767 and 2787.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2761 
  A loop starting at line 2761 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2761 
  A loop starting at line 2761 was not vectorized because a recurrence was found on "ZZ" at line 2762.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2766 
  A loop starting at line 2766 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2766 
  A loop starting at line 2766 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2767 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2774 
  A loop starting at line 2774 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2774 
  A loop starting at line 2774 was not vectorized because a recurrence was found on "ZZ" at line 2776.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2780 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2782 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2785 
  A loop starting at line 2785 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2785 
  A loop starting at line 2785 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 2798 
  A loop starting at line 2798 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 2798 
  A loop starting at line 2798 was vectorized.

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 2804 
  A loop starting at line 2804 was not vectorized because a better candidate was found at line 2807.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2805 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 2807 
  A loop starting at line 2807 was not vectorized because it contains a reference to a non-vector intrinsic on line 2808.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2871 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 2875 
  A loop starting at line 2875 was not vectorized because a recurrence was found on "MON" at line 2881.

ftn-3021 ftn: IPA File = Utils.f90, Line = 2906 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2923 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Utils.f90, Line = 2923 
  The call to CALDAT was textually inlined.

ftn-6205 ftn: VECTOR File = Utils.f90, Line = 2927 
  A loop starting at line 2927 was vectorized with a single vector iteration.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2945 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2951 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 2953 
  A divide was turned into a multiply by a reciprocal

ftn-6823 ftn: THREAD File = Utils.f90, Line = 2999 
  A region starting at line 2999 and ending at line 3007 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3000 
  A loop starting at line 3000 was not vectorized because a recurrence was found on "VAR_OUT" at line 3004.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3000 
  A loop starting at line 3000 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3001 
  A loop starting at line 3001 was not vectorized because it contains a reference to a non-vector intrinsic on line 3004.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3019 
  A region starting at line 3019 and ending at line 3027 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3020 
  A loop starting at line 3020 was not vectorized because a recurrence was found on "VAR_OUT" at line 3024.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3020 
  A loop starting at line 3020 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3021 
  A loop starting at line 3021 was not vectorized because it contains a reference to a non-vector intrinsic on line 3024.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3038 
  A region starting at line 3038 and ending at line 3046 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3039 
  A loop starting at line 3039 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3039 
  A loop starting at line 3039 was partitioned.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 3040 
  A loop starting at line 3040 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 3043 
  A loop starting at line 3043 was not vectorized because it does not map well onto the target architecture.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3056 
  A region starting at line 3056 and ending at line 3064 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3057 
  A loop starting at line 3057 was not vectorized because a recurrence was found on "VAR_OUT" at line 3061.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3057 
  A loop starting at line 3057 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3058 
  A loop starting at line 3058 was not vectorized because it contains a reference to a non-vector intrinsic on line 3061.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3076 
  A region starting at line 3076 and ending at line 3084 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3077 
  A loop starting at line 3077 was not vectorized because a recurrence was found on "VAR_OUT" at line 3081.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3077 
  A loop starting at line 3077 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3078 
  A loop starting at line 3078 was not vectorized because it contains a reference to a non-vector intrinsic on line 3081.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3094 
  A region starting at line 3094 and ending at line 3102 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3095 
  A loop starting at line 3095 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3095 
  A loop starting at line 3095 was partitioned.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 3096 
  A loop starting at line 3096 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 3099 
  A loop starting at line 3099 was not vectorized because it does not map well onto the target architecture.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3124 
  A region starting at line 3124 and ending at line 3136 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3125 
  A loop starting at line 3125 was not vectorized because it contains a call to subroutine "CYCLICCUBICSPLINE" on line 3128.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3125 
  A loop starting at line 3125 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3128 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3130 
  A loop starting at line 3130 was not vectorized because it contains a reference to a non-vector intrinsic on line 3133.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3138 
  A region starting at line 3138 and ending at line 3146 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3139 
  A loop starting at line 3139 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3139 
  A loop starting at line 3139 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3140 
  A loop starting at line 3140 was not vectorized because it contains a reference to a non-vector intrinsic on line 3143.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3168 
  A region starting at line 3168 and ending at line 3176 was multi-threaded.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 3169 
  A loop starting at line 3169 was eliminated by optimization.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3178 
  A region starting at line 3178 and ending at line 3186 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3179 
  A loop starting at line 3179 was not vectorized because a recurrence was found on "FIELDOUT" at line 3183.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3179 
  A loop starting at line 3179 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3180 
  A loop starting at line 3180 was not vectorized because it contains a reference to a non-vector intrinsic on line 3183.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3241 
  A loop starting at line 3241 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 3241 
  A loop starting at line 3241 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3256 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3278 
  A loop starting at line 3278 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 3278 
  A loop starting at line 3278 was vectorized.

ftn-6231 ftn: VECTOR File = Utils.f90, Line = 3279 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Utils.f90, Line = 3280 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Utils.f90, Line = 3281 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3298 
  A loop starting at line 3298 was unrolled 2 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3298 
  A loop starting at line 3298 was not vectorized because a recurrence was found on "BETA" at line 3299.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3299 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3306 
  A loop starting at line 3306 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3306 
  A loop starting at line 3306 was not vectorized because a recurrence was found on "DER" at line 3307.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3307 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3315 
  A loop starting at line 3315 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 3315 
  A loop starting at line 3315 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3318 
  A loop starting at line 3318 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 3318 
  A loop starting at line 3318 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3319 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3321 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3322 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3323 
  A loop starting at line 3323 was not vectorized because it contains a reference to a non-vector intrinsic on line 3329.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3324 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3326 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3327 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3329 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3355 
  A region starting at line 3355 and ending at line 3367 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3356 
  A loop starting at line 3356 was not vectorized because it contains a call to subroutine "CYCLICLINEAR" on line 3359.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3356 
  A loop starting at line 3356 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3359 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3361 
  A loop starting at line 3361 was not vectorized because it contains a reference to a non-vector intrinsic on line 3364.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3369 
  A region starting at line 3369 and ending at line 3377 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3370 
  A loop starting at line 3370 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3370 
  A loop starting at line 3370 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3371 
  A loop starting at line 3371 was not vectorized because it contains a reference to a non-vector intrinsic on line 3374.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3398 
  A region starting at line 3398 and ending at line 3406 was multi-threaded.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 3399 
  A loop starting at line 3399 was eliminated by optimization.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3408 
  A region starting at line 3408 and ending at line 3416 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3409 
  A loop starting at line 3409 was not vectorized because a recurrence was found on "FIELDOUT" at line 3413.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3409 
  A loop starting at line 3409 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3410 
  A loop starting at line 3410 was not vectorized because it contains a reference to a non-vector intrinsic on line 3413.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3463 
  A loop starting at line 3463 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 3463 
  A loop starting at line 3463 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3478 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3488 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3493 
  A loop starting at line 3493 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 3493 
  A loop starting at line 3493 was vectorized.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3498 
  A loop starting at line 3498 was not vectorized because it contains a reference to a non-vector intrinsic on line 3502.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3502 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3521 
  A region starting at line 3521 and ending at line 3533 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3522 
  A loop starting at line 3522 was not vectorized because it contains a call to subroutine "CYCLICNEAREST_I" on line 3525.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3522 
  A loop starting at line 3522 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3525 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3527 
  A loop starting at line 3527 was not vectorized because it contains a reference to a non-vector intrinsic on line 3530.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3535 
  A region starting at line 3535 and ending at line 3543 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3536 
  A loop starting at line 3536 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3536 
  A loop starting at line 3536 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3537 
  A loop starting at line 3537 was not vectorized because it contains a reference to a non-vector intrinsic on line 3540.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3564 
  A region starting at line 3564 and ending at line 3576 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3565 
  A loop starting at line 3565 was not vectorized because it contains a call to subroutine "CYCLICNEAREST_R" on line 3568.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3565 
  A loop starting at line 3565 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3568 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3570 
  A loop starting at line 3570 was not vectorized because it contains a reference to a non-vector intrinsic on line 3573.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3578 
  A region starting at line 3578 and ending at line 3586 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3579 
  A loop starting at line 3579 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3579 
  A loop starting at line 3579 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3580 
  A loop starting at line 3580 was not vectorized because it contains a reference to a non-vector intrinsic on line 3583.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3606 
  A region starting at line 3606 and ending at line 3620 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3607 
  A loop starting at line 3607 was not vectorized because it contains a call to subroutine "CYCLICNEAREST_I" on line 3611.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3607 
  A loop starting at line 3607 was partitioned.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3610 
  A loop starting at line 3610 was not vectorized because it contains a call to subroutine "CYCLICNEAREST_I" on line 3611.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3611 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3613 
  A loop starting at line 3613 was not vectorized because it contains a reference to a non-vector intrinsic on line 3616.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3622 
  A region starting at line 3622 and ending at line 3630 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3623 
  A loop starting at line 3623 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3623 
  A loop starting at line 3623 was partitioned.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 3624 
  A loop starting at line 3624 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 3627 
  A loop starting at line 3627 was not vectorized because it does not map well onto the target architecture.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3651 
  A region starting at line 3651 and ending at line 3665 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3652 
  A loop starting at line 3652 was not vectorized because it contains a call to subroutine "CYCLICNEAREST_R" on line 3656.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3652 
  A loop starting at line 3652 was partitioned.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3655 
  A loop starting at line 3655 was not vectorized because it contains a call to subroutine "CYCLICNEAREST_R" on line 3656.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3656 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3658 
  A loop starting at line 3658 was not vectorized because it contains a reference to a non-vector intrinsic on line 3661.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3667 
  A region starting at line 3667 and ending at line 3675 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3668 
  A loop starting at line 3668 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3668 
  A loop starting at line 3668 was partitioned.

ftn-6250 ftn: VECTOR File = Utils.f90, Line = 3669 
  A loop starting at line 3669 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 3672 
  A loop starting at line 3672 was not vectorized because it does not map well onto the target architecture.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3694 
  A region starting at line 3694 and ending at line 3702 was multi-threaded.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 3695 
  A loop starting at line 3695 was eliminated by optimization.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3704 
  A region starting at line 3704 and ending at line 3712 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3705 
  A loop starting at line 3705 was not vectorized because a recurrence was found on "FIELDOUT" at line 3709.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3705 
  A loop starting at line 3705 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3706 
  A loop starting at line 3706 was not vectorized because it contains a reference to a non-vector intrinsic on line 3709.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3731 
  A region starting at line 3731 and ending at line 3739 was multi-threaded.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 3732 
  A loop starting at line 3732 was eliminated by optimization.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3741 
  A region starting at line 3741 and ending at line 3749 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 3742 
  A loop starting at line 3742 was not vectorized because a recurrence was found on "FIELDOUT" at line 3746.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3742 
  A loop starting at line 3742 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3743 
  A loop starting at line 3743 was not vectorized because it contains a reference to a non-vector intrinsic on line 3746.

ftn-6332 ftn: VECTOR File = Utils.f90, Line = 3779 
  A loop starting at line 3779 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3779 
  A loop starting at line 3779 was unrolled 8 times.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3796 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 3810 
  A loop starting at line 3810 was not vectorized because a better candidate was found at line 3814.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3811 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 3814 
  A loop starting at line 3814 was vectorized.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3819 
  A loop starting at line 3819 was not vectorized because it contains a reference to a non-vector intrinsic on line 3822.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 3858 
  A loop starting at line 3858 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 3858 
  A loop starting at line 3858 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 3875 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Utils.f90, Line = 3888 
  A loop starting at line 3888 was not vectorized because a better candidate was found at line 3892.

ftn-6009 ftn: SCALAR File = Utils.f90, Line = 3889 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 3892 
  A loop starting at line 3892 was vectorized.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3897 
  A loop starting at line 3897 was not vectorized because it contains a reference to a non-vector intrinsic on line 3900.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3924 
  A region starting at line 3924 and ending at line 3936 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3925 
  A loop starting at line 3925 was not vectorized because it contains a call to subroutine "CYCLICFREQBOX_I" on line 3928.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3925 
  A loop starting at line 3925 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3928 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Utils.f90, Line = 3928 
  Routine CYCLICFREQBOX_I was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3930 
  A loop starting at line 3930 was not vectorized because it contains a reference to a non-vector intrinsic on line 3933.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3938 
  A region starting at line 3938 and ending at line 3946 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3939 
  A loop starting at line 3939 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3939 
  A loop starting at line 3939 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3940 
  A loop starting at line 3940 was not vectorized because it contains a reference to a non-vector intrinsic on line 3943.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3965 
  A region starting at line 3965 and ending at line 3977 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 3966 
  A loop starting at line 3966 was not vectorized because it contains a call to subroutine "CYCLICFREQBOX_R" on line 3969.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3966 
  A loop starting at line 3966 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 3969 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Utils.f90, Line = 3969 
  Routine CYCLICFREQBOX_R was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3971 
  A loop starting at line 3971 was not vectorized because it contains a reference to a non-vector intrinsic on line 3974.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 3979 
  A region starting at line 3979 and ending at line 3987 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 3980 
  A loop starting at line 3980 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 3980 
  A loop starting at line 3980 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 3981 
  A loop starting at line 3981 was not vectorized because it contains a reference to a non-vector intrinsic on line 3984.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4063 
  A loop starting at line 4063 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 4063 
  A loop starting at line 4063 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 4080 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4124 
  A loop starting at line 4124 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4124 
  A loop starting at line 4124 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4140 
  A loop starting at line 4140 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4140 
  A loop starting at line 4140 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4150 
  A loop starting at line 4150 was not vectorized because a recurrence was found on "DWORK" at line 4152.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4209 
  A loop starting at line 4209 was not vectorized because a recurrence was found on "DWORK" at line 4211.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 4267 
  A loop starting at line 4267 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 4268 
  A loop starting at line 4268 was replaced by a library call.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4269 
  A loop starting at line 4269 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4271 
  A loop starting at line 4271 was not vectorized because a recurrence was found on "WORK" at line 4290.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 4298 
  A loop starting at line 4298 was not vectorized because it contains a call to a subroutine or function on line 4333.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4314 
  A loop starting at line 4314 was not vectorized because it contains a reference to a non-vector intrinsic on line 4323.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 4315 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 4332 
  A loop starting at line 4332 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4352 
  A loop starting at line 4352 was not vectorized because it contains a reference to a non-vector intrinsic on line 4354.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4446 
  A loop starting at line 4446 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 4446 
  A loop starting at line 4446 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 4463 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4507 
  A loop starting at line 4507 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4507 
  A loop starting at line 4507 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4523 
  A loop starting at line 4523 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4523 
  A loop starting at line 4523 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4533 
  A loop starting at line 4533 was not vectorized because a recurrence was found on "DWORK" at line 4535.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4592 
  A loop starting at line 4592 was not vectorized because a recurrence was found on "DWORK" at line 4594.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 4650 
  A loop starting at line 4650 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 4651 
  A loop starting at line 4651 was replaced by a library call.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4652 
  A loop starting at line 4652 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4654 
  A loop starting at line 4654 was not vectorized because a recurrence was found on "WORK" at line 4673.

ftn-6262 ftn: VECTOR File = Utils.f90, Line = 4681 
  A loop starting at line 4681 was not vectorized because it contains a call to a subroutine or function on line 4716.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4697 
  A loop starting at line 4697 was not vectorized because it contains a reference to a non-vector intrinsic on line 4706.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 4698 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 4715 
  A loop starting at line 4715 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4735 
  A loop starting at line 4735 was not vectorized because it contains a reference to a non-vector intrinsic on line 4737.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 4779 
  A region starting at line 4779 and ending at line 4791 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 4780 
  A loop starting at line 4780 was not vectorized because it contains a call to subroutine "CYCLICSEAMASK_R" on line 4783.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 4780 
  A loop starting at line 4780 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 4783 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Utils.f90, Line = 4783 
  Routine CYCLICSEAMASK_R was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4785 
  A loop starting at line 4785 was not vectorized because it contains a reference to a non-vector intrinsic on line 4788.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 4793 
  A region starting at line 4793 and ending at line 4801 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 4794 
  A loop starting at line 4794 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 4794 
  A loop starting at line 4794 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4795 
  A loop starting at line 4795 was not vectorized because it contains a reference to a non-vector intrinsic on line 4798.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 4821 
  A region starting at line 4821 and ending at line 4829 was multi-threaded.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 4822 
  A loop starting at line 4822 was eliminated by optimization.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 4831 
  A region starting at line 4831 and ending at line 4839 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4832 
  A loop starting at line 4832 was not vectorized because a recurrence was found on "FIELDOUT" at line 4836.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 4832 
  A loop starting at line 4832 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 4833 
  A loop starting at line 4833 was not vectorized because it contains a reference to a non-vector intrinsic on line 4836.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4885 
  A loop starting at line 4885 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 4885 
  A loop starting at line 4885 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 4902 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4946 
  A loop starting at line 4946 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4946 
  A loop starting at line 4946 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 4962 
  A loop starting at line 4962 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 4962 
  A loop starting at line 4962 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 4972 
  A loop starting at line 4972 was not vectorized because a recurrence was found on "DWORK" at line 4974.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5031 
  A loop starting at line 5031 was not vectorized because a recurrence was found on "DWORK" at line 5033.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 5087 
  A loop starting at line 5087 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 5088 
  A loop starting at line 5088 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5090 
  A loop starting at line 5090 was not vectorized because it contains a reference to a non-vector intrinsic on line 5092.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5101 
  A loop starting at line 5101 was not vectorized because it contains a reference to a non-vector intrinsic on line 5103.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 5128 
  A region starting at line 5128 and ending at line 5140 was multi-threaded.

ftn-6288 ftn: VECTOR File = Utils.f90, Line = 5129 
  A loop starting at line 5129 was not vectorized because it contains a call to subroutine "CYCLICAVEBOX_R" on line 5132.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 5129 
  A loop starting at line 5129 was partitioned.

ftn-3021 ftn: IPA File = Utils.f90, Line = 5132 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Utils.f90, Line = 5132 
  Routine CYCLICAVEBOX_R was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5134 
  A loop starting at line 5134 was not vectorized because it contains a reference to a non-vector intrinsic on line 5137.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 5142 
  A region starting at line 5142 and ending at line 5150 was multi-threaded.

ftn-6306 ftn: VECTOR File = Utils.f90, Line = 5143 
  A loop starting at line 5143 was not vectorized because the iteration space is too irregular.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 5143 
  A loop starting at line 5143 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5144 
  A loop starting at line 5144 was not vectorized because it contains a reference to a non-vector intrinsic on line 5147.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 5170 
  A region starting at line 5170 and ending at line 5178 was multi-threaded.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 5171 
  A loop starting at line 5171 was eliminated by optimization.

ftn-6823 ftn: THREAD File = Utils.f90, Line = 5180 
  A region starting at line 5180 and ending at line 5188 was multi-threaded.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5181 
  A loop starting at line 5181 was not vectorized because a recurrence was found on "FIELDOUT" at line 5185.

ftn-6817 ftn: THREAD File = Utils.f90, Line = 5181 
  A loop starting at line 5181 was partitioned.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5182 
  A loop starting at line 5182 was not vectorized because it contains a reference to a non-vector intrinsic on line 5185.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 5234 
  A loop starting at line 5234 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Utils.f90, Line = 5234 
  A loop starting at line 5234 was partially vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 5251 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 5295 
  A loop starting at line 5295 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 5295 
  A loop starting at line 5295 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 5311 
  A loop starting at line 5311 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 5311 
  A loop starting at line 5311 was vectorized.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5321 
  A loop starting at line 5321 was not vectorized because a recurrence was found on "DWORK" at line 5323.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5380 
  A loop starting at line 5380 was not vectorized because a recurrence was found on "DWORK" at line 5382.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 5436 
  A loop starting at line 5436 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Utils.f90, Line = 5437 
  A loop starting at line 5437 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5439 
  A loop starting at line 5439 was not vectorized because it contains a reference to a non-vector intrinsic on line 5441.

ftn-6263 ftn: VECTOR File = Utils.f90, Line = 5449 
  A loop starting at line 5449 was not vectorized because it contains a reference to a non-vector intrinsic on line 5451.

ftn-6002 ftn: SCALAR File = Utils.f90, Line = 5495 
  A loop starting at line 5495 was eliminated by optimization.

ftn-3001 ftn: IPA File = Utils.f90, Line = 5495 
  The call to VFINIT was textually inlined.

ftn-6286 ftn: VECTOR File = Utils.f90, Line = 5516 
  A loop starting at line 5516 was not vectorized because it contains input/output operations at line 5517.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5519 
  A loop starting at line 5519 was not vectorized because a recurrence was found on "CS" at line 5524.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 5522 
  A loop starting at line 5522 was unrolled 2 times.

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5522 
  A loop starting at line 5522 was not vectorized because a recurrence was found on "CS" at line 5524.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 5540 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 5543 
  A loop starting at line 5543 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 5543 
  A loop starting at line 5543 was vectorized.

ftn-6005 ftn: SCALAR File = Utils.f90, Line = 5551 
  A loop starting at line 5551 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Utils.f90, Line = 5551 
  A loop starting at line 5551 was vectorized.

ftn-6010 ftn: SCALAR File = Utils.f90, Line = 5552 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Utils.f90, Line = 5571 
  A loop starting at line 5571 was not vectorized because a recurrence was found on "VC" at line 5572.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                  C r o s s   R e f e r e n c e   for   UTILS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

10                                                                Statement label
  Decl    2314
  Set 
  Used    2299

100                                                               Statement label
  Decl    2346
  Set 
  Used    2344

100                                                               Statement label
  Decl    2128
  Set 
  Used    2124

100                                                               Statement label
  Decl    2065
  Set 
  Used    2063

100                                                               Statement label
  Decl    2496
  Set 
  Used    2494

100                                                               Statement label
  Decl    1444
  Set 
  Used    1416

100                                                               Statement label
  Decl    1559
  Set 
  Used    1557

100                                                               Statement label
  Decl    2634
  Set 
  Used    2631    2632

100                                                               Statement label
  Decl    1648
  Set 
  Used    1640    1643

1000                                                              Statement label
  Decl    1854
  Set 
  Used    1653

1001                                                              Statement label
  Decl    1855
  Set 
  Used    1845    1849

110                                                               Statement label
  Decl    1561
  Set 
  Used    1551

110                                                               Statement label
  Decl    2072
  Set 
  Used    2070

110                                                               Statement label
  Decl    1450
  Set 
  Used    1447    1448

110                                                               Statement label
  Decl    2515
  Set 
  Used    2509

110                                                               Statement label
  Decl    2365
  Set 
  Used    2359

110                                                               Statement label
  Decl    2144
  Set 
  Used    2141

120                                                               Statement label
  Decl    2517
  Set 
  Used    2510

120                                                               Statement label
  Decl    2367
  Set 
  Used    2360

120                                                               Statement label
  Decl    2151
  Set 
  Used    2148

120                                                               Statement label
  Decl    1566
  Set 
  Used    1549

120                                                               Statement label
  Decl    2082
  Set 
  Used    2079

120                                                               Statement label
  Decl    1455
  Set 
  Used    1444    1449

120                                                               Statement label
  Decl    1662
  Set 
  Used    1660

120                                                               Statement label
  Decl    2647
  Set 
  Used    2645

130                                                               Statement label
  Decl    2518
  Set 
  Used    2588

130                                                               Statement label
  Decl    2084
  Set 
  Used    2067

130                                                               Statement label
  Decl    1668
  Set 
  Used    1654

130                                                               Statement label
  Decl    1577
  Set 
  Used    1573

130                                                               Statement label
  Decl    2368
  Set 
  Used    2438

130                                                               Statement label
  Decl    2153
  Set 
  Used    2136

130                                                               Statement label
  Decl    1461
  Set 
  Used    1435

130                                                               Statement label
  Decl    2650
  Set 
  Used    2643

140                                                               Statement label
  Decl    2165
  Set 
  Used    2162

140                                                               Statement label
  Decl    2653
  Set 
  Used    2649

140                                                               Statement label
  Decl    2391
  Set 
  Used    2389

140                                                               Statement label
  Decl    2541
  Set 
  Used    2539

140                                                               Statement label
  Decl    1579
  Set 
  Used    1566    1568    1571

140                                                               Statement label
  Decl    1688
  Set 
  Used    1673

140                                                               Statement label
  Decl    2086
  Set 
  Used    2058    2060

140                                                               Statement label
  Decl    1463
  Set 
  Used    1457

150                                                               Statement label
  Decl    1468
  Set 
  Used    1465    1466

150                                                               Statement label
  Decl    1690
  Set 
  Used    1685    1686

150                                                               Statement label
  Decl    2656
  Set 
  Used    2653

150                                                               Statement label
  Decl    2172
  Set 
  Used    2169

160                                                               Statement label
  Decl    2174
  Set 
  Used    2157

160                                                               Statement label
  Decl    1696
  Set 
  Used    1692    1694

170                                                               Statement label
  Decl    1473
  Set 
  Used    1463    1467

170                                                               Statement label
  Decl    1712
  Set 
  Used    1702

180                                                               Statement label
  Decl    1716
  Set 
  Used    1713

180                                                               Statement label
  Decl    2179
  Set 
  Used    2108    2119

180                                                               Statement label
  Decl    2671
  Set 
  Used    2669

180                                                               Statement label
  Decl    2582
  Set 
  Used    2578

180                                                               Statement label
  Decl    1479
  Set 
  Used    1477

180                                                               Statement label
  Decl    2432
  Set 
  Used    2428

190                                                               Statement label
  Decl    1717
  Set 
  Used    1715

190                                                               Statement label
  Decl    1483
  Set 
  Used    1528

20                                                                Statement label
  Decl    1420
  Set 
  Used    1454    1472

20                                                                FORMAT label
  Decl    2316
  Set 
  Used

200                                                               Statement label
  Decl    2434
  Set 
  Used    2404

200                                                               Statement label
  Decl    2678
  Set 
  Used    2676

200                                                               Statement label
  Decl    2181
  Set 
  Used    2106

200                                                               Statement label
  Decl    1581
  Set 
  Used    1548

200                                                               Statement label
  Decl    1731
  Set 
  Used    1728

200                                                               Statement label
  Decl    2088
  Set 
  Used    2054

200                                                               Statement label
  Decl    2584
  Set 
  Used    2554

200                                                               Statement label
  Decl    1493
  Set 
  Used    1489    1490

210                                                               Statement label
  Decl    1733
  Set 
  Used    1726

210                                                               Statement label
  Decl    1501
  Set 
  Used    1504

220                                                               Statement label
  Decl    2589
  Set 
  Used    2517

220                                                               Statement label
  Decl    1744
  Set 
  Used    1741

220                                                               Statement label
  Decl    2680
  Set 
  Used    2674

220                                                               Statement label
  Decl    2439
  Set 
  Used    2367

220                                                               Statement label
  Decl    1505
  Set 
  Used    1501

230                                                               Statement label
  Decl    1746
  Set 
  Used    1739

230                                                               Statement label
  Decl    1506
  Set 
  Used    1509

240                                                               Statement label
  Decl    2440
  Set 
  Used    2352

240                                                               Statement label
  Decl    1513
  Set 
  Used    1506

240                                                               Statement label
  Decl    2590
  Set 
  Used    2502

240                                                               Statement label
  Decl    2682
  Set 
  Used    2665

240                                                               Statement label
  Decl    1757
  Set 
  Used    1754

250                                                               Statement label
  Decl    1760
  Set 
  Used    1752

250                                                               Statement label
  Decl    1520
  Set 
  Used    1518

260                                                               Statement label
  Decl    2454
  Set 
  Used    2449

260                                                               Statement label
  Decl    2604
  Set 
  Used    2599

260                                                               Statement label
  Decl    1762
  Set 
  Used    1700    1708    1748

260                                                               Statement label
  Decl    1524
  Set 
  Used    1522

260                                                               Statement label
  Decl    2693
  Set 
  Used    2686    2691

270                                                               Statement label
  Decl    1768
  Set 
  Used    1649

270                                                               Statement label
  Decl    1526
  Set 
  Used    1485    1497    1513

280                                                               Statement label
  Decl    2464
  Set 
  Used    2460

280                                                               Statement label
  Decl    1530
  Set 
  Used    1439

280                                                               Statement label
  Decl    2614
  Set 
  Used    2610

280                                                               Statement label
  Decl    1776
  Set 
  Used    1652

290                                                               Statement label
  Decl    1809
  Set 
  Used    1805

290                                                               Statement label
  Decl    2695
  Set 
  Used    2651

30                                                                Statement label
  Decl    1427
  Set 
  Used    1423

300                                                               Statement label
  Decl    1817
  Set 
  Used    1813

300                                                               Statement label
  Decl    2467
  Set 
  Used    2444

300                                                               Statement label
  Decl    2696
  Set 
  Used    2638

300                                                               Statement label
  Decl    2617
  Set 
  Used    2594

310                                                               Statement label
  Decl    1825
  Set 
  Used    1821

320                                                               Statement label
  Decl    1831
  Set 
  Used    1782

320                                                               Statement label
  Decl    2698
  Set 
  Used    2636

330                                                               Statement label
  Decl    1836
  Set 
  Used    1793    1827

340                                                               Statement label
  Decl    2710
  Set 
  Used    2708

340                                                               Statement label
  Decl    1840
  Set 
  Used    1630

360                                                               Statement label
  Decl    2714
  Set 
  Used    2705    2712

380                                                               Statement label
  Decl    2716
  Set 
  Used    2703

40                                                                Statement label
  Decl    1617
  Set 
  Used    1614

40                                                                Statement label
  Decl    1433
  Set 
  Used    1429

400                                                               FORMAT label
  Decl    2524
  Set 
  Used

400                                                               Statement label
  Decl    2723
  Set 
  Used    2720

400                                                               FORMAT label
  Decl    2374
  Set 
  Used

50                                                                Statement label
  Decl    1435
  Set 
  Used    1421

50                                                                Statement label
  Decl    1623
  Set 
  Used    1612    1620

500                                                               Statement label
  Decl    2725
  Set 
  Used    2701    2718

60                                                                Statement label
  Decl    2049
  Set 
  Used    2047

60                                                                Statement label
  Decl    1630
  Set 
  Used    1772    1838

600                                                               Statement label
  Decl    1882
  Set 
  Used    1878

610                                                               Statement label
  Decl    1896
  Set 
  Used    1894

620                                                               Statement label
  Decl    1898
  Set 
  Used    1892

630                                                               Statement label
  Decl    1902
  Set 
  Used    1898

640                                                               Statement label
  Decl    1911
  Set 
  Used    1903

650                                                               Statement label
  Decl    1919
  Set 
  Used    1916

70                                                                Statement label
  Decl    1638
  Set 
  Used    1764

700                                                               Statement label
  Decl    1921
  Set 
  Used    1888    1901    1907    1918

710                                                               Statement label
  Decl    1929
  Set 
  Used    1878

720                                                               Statement label
  Decl    1938
  Set 
  Used    1934

730                                                               Statement label
  Decl    1940
  Set 
  Used    1937

760                                                               Statement label
  Decl    1956
  Set 
  Used    1953

770                                                               Statement label
  Decl    1963
  Set 
  Used    1958

780                                                               Statement label
  Decl    1971
  Set 
  Used    1964

785                                                               Statement label
  Decl    1985
  Set 
  Used    1981

790                                                               Statement label
  Decl    1987
  Set 
  Used    1947    1962    1967    1984

80                                                                Statement label
  Decl    1644
  Set 
  Used    1638

80                                                                Statement label
  Decl    2051
  Set 
  Used    2046

80                                                                Statement label
  Decl    1439
  Set 
  Used    1435

800                                                               Statement label
  Decl    1991
  Set 
  Used    1873    1878    1884    1925    1943

820                                                               Statement label
  Decl    2000
  Set 
  Used    1998

840                                                               Statement label
  Decl    2002
  Set 
  Used    1996    1997

860                                                               Statement label
  Decl    2017
  Set 
  Used    2015

880                                                               Statement label
  Decl    2020
  Set 
  Used    2008    2012

90                                                                Statement label
  Decl    2117
  Set 
  Used    2115

900                                                               Statement label
  Decl    2754
  Set 
  Used    2751    2752

910                                                               Statement label
  Decl    2793
  Set 
  Used    2756

940                                                               Statement label
  Decl    2764
  Set 
  Used    2761

950                                                               Statement label
  Decl    2768
  Set 
  Used    2766

960                                                               Statement label
  Decl    2778
  Set 
  Used    2774

970                                                               Statement label
  Decl    2788
  Set 
  Used    2785

980                                                               Statement label
  Decl    2801
  Set 
  Used    2798

990                                                               Statement label
  Decl    2809
  Set 
  Used    2804    2807

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(1:*), INTENT(INOUT)
  Decl    1249    1250
  Set     1295    1296    1310    1311    1325    1340    1350    1359    1377    1378    1389    1390
  Used    1272    1277    1278    1293    1309    1375    1387

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 1:*), INTENT(INOUT)
  Decl    1395    1401
  Set     1425    1426    1431    1432    1519    1523
  Used    1424    1430    1449    1467    1491    1492

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2030    2038
  Set 
  Used    2060    2064    2077

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2091    2097
  Set     2149    2150    2170    2171    2177    2178
  Used    2116    2126    2143    2150    2164    2171    2178

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2185    2261
  Set 
  Used    2281    2287    2293    2311

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2621    2625
  Set 
  Used    2633

A                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    5461    5465
  Set     5535    5545    5552
  Used

A1                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2023    2024
  Set 
  Used    2027

A2                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2023    2024
  Set 
  Used    2027

A3                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2023    2024
  Set 
  Used    2027

A4                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2023    2024
  Set 
  Used    2027

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     809     815    1228
          1491    1615    1641    1664    1686    1707    1778    1916    1978    2081    2116    2150    2171    2178    2354
          2360    2409    2438    2504    2510    2559    2588    2646    2762    2763    2779    2805    2806    2808    3815
          3820    3893    3898    5553

ACOS                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used     796

ADJUSTL                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0     610     623     630     645     655     672     684     685     691
           692     706     707     716     717     763     951

AI                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1974
  Used

ALFA                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3220
  Set     3273    3279    3285    3290
  Used    3299    3300

ALFAIN                          Stack                             REAL(KIND=8)
  Decl    3771
  Set     3813    3816    3818    3824
  Used    3815    3820

ALFAIN                          Stack                             REAL(KIND=8)
  Decl    3850
  Set     3891    3894    3896    3902
  Used    3893    3898

ALFAOUT                         Stack                             REAL(KIND=8)
  Decl    3772
  Set     3811
  Used    3815    3820

ALFAOUT                         Stack                             REAL(KIND=8)
  Decl    3851
  Set     3889
  Used    3893    3898

ALLPOLYNOMIALS                  Static offset=0                   LOGICAL, SAVE
  Decl     190     366
  Set 
  Used

ALLPOLYNOMIALS                  Dummy Arg                         LOGICAL, INTENT(IN)
  Decl     406     407
  Set 
  Used     411     426     441

AR                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1973
  Used

ATAN                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    1193    3486    3881    4086    4469    4908    5257

AUXGAUSSCOLAT                   Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     178     326
  Set      798
  Used     774     805     936

AUXPOL                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     329
  Set      477     480
  Used     417     491

AUXPOLY1                        Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     381
  Set     1004
  Used    1001    1020    1064    1071    1072    1073    1074    1075    1076    1212    1219    1220    1221    1222    1223
          1224

AUXPOLY2                        Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     381
  Set     1005
  Used    1002    1020    1064    1071    1072    1073    1074    1075    1076    1212    1219    1220    1221    1222    1223
          1224

AVEBOXIBJBTOIJ                                                    Generic interface
  Decl     236     295
  Set 
  Used

AVEBOXIBJBTOIJ_R2D                                                Subroutine, Module procedure, PRIVATE
  Decl    5156
  Set 
  Used

AVEBOXIJTOIBJB                                                    Generic interface
  Decl     237     299
  Set 
  Used

AVEBOXIJTOIBJB_R2D                                                Subroutine, Module procedure, PRIVATE
  Decl    5113
  Set 
  Used

B                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2349    2355
  Used    2355    2360    2438

B                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2499    2505
  Used    2505    2510    2588

B                               Stack                             REAL(KIND=8), DIMENSION(5)
  Decl    4045
  Set     4308    4309    4310    4311    4312    4323
  Used    4333    4334

B                               Stack                             REAL(KIND=8), DIMENSION(5)
  Decl    4428
  Set     4691    4692    4693    4694    4695    4706
  Used    4716    4717

B2                              Stack                             REAL(KIND=8)
  Decl    1407
  Set     1413
  Used    1503    1508

BALANC                                                            Subroutine, Module procedure, PRIVATE
  Decl    1395
  Set 
  Used    2281

BALBAK                                                            Subroutine, Module procedure, PRIVATE
  Decl    1535
  Set 
  Used    2306

BETA                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3221
  Set     3274    3280    3286    3291    3299
  Used    3300    3305    3307

BI                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1976
  Used    1977

BIAS                            Stack                             REAL(KIND=8)
  Decl    5490
  Set 
  Used    5504    5545

BIGA                            Stack                             REAL(KIND=8)
  Decl    1262
  Set     1272    1278
  Used    1277    1318    1325    1350    1355    1359

BR                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1975    1977
  Used

C                               Stack                             REAL(KIND=8)
  Decl    1407
  Set     1486    1491    1503    1508
  Used    1500    1501    1506    1513

C                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2398    2410    2414    2416    2420
  Used    2406    2407    2411    2417    2419    2423    2424    2430    2431    2437

C                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2548    2560    2564    2566    2570
  Used    2556    2557    2561    2567    2569    2573    2574    2580    2581    2587

C                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3450
  Set     3494    3496
  Used    3502

C1                              Stack                             CHARACTER(10)
  Decl     602
  Set 
  Used     604     608

C1                              Stack                             CHARACTER(10)
  Decl     617
  Set 
  Used     619     625

C1                              Stack                             CHARACTER(10)
  Decl     638
  Set 
  Used     640     650

C1                              Stack                             CHARACTER(10)
  Decl     664
  Set 
  Used     666     670

C1                              Stack                             CHARACTER(10)
  Decl     679
  Set 
  Used     681     687

C1                              Stack                             CHARACTER(10)
  Decl     700
  Set 
  Used     702     712

C1                              Stack                             CHARACTER(10)
  Decl     756
  Set 
  Used     762

C1                              Stack                             CHARACTER(10)
  Decl     949
  Set 
  Used     950

C1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3225
  Set     3316
  Used    3330    3331

C2                              Stack                             CHARACTER(10)
  Decl     617
  Set 
  Used     620     627

C2                              Stack                             CHARACTER(10)
  Decl     638
  Set 
  Used     641     652

C2                              Stack                             CHARACTER(10)
  Decl     679
  Set 
  Used     682     689

C2                              Stack                             CHARACTER(10)
  Decl     700
  Set 
  Used     703     714

C2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3226
  Set     3319    3321    3322
  Used    3330    3331

C3                              Stack                             CHARACTER(10)
  Decl     638
  Set 
  Used     642     647

C3                              Stack                             CHARACTER(10)
  Decl     700
  Set 
  Used     704     709

CALDAT                                                            Subroutine, Module procedure, PRIVATE
  Decl    2934
  Set 
  Used    2923

CEL_AREA                        Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     187     337
  Set      878     879
  Used     835

CMX                             Stack                             REAL(KIND=8)
  Decl    4047
  Set     4329    4334
  Used    4333

CMX                             Stack                             REAL(KIND=8)
  Decl    4430
  Set     4712    4717
  Used    4716

COL                             Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1028    1030
  Set 
  Used    1031    1035    1036    1037    1055    1088

COL                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1106
  Set     1181
  Used    1190

COLRAD                          Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     181     330
  Set      803     804
  Used     778     861     874     875     890     905     906

COLRAD2D                        Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     182     332
  Set      890
  Used     832

CONSTANTS                                                         Module
  Decl
  Set 
  Used     130

COS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     868     897     906    1055    1088    1190

COS2D                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     206     354
  Set 
  Used     855

COS2LAT                         Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     183     333
  Set      898
  Used     846

COSGAUSSCOLAT                   Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     177     325
  Set     1236
  Used     773     796     799

COSIV                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     186     336
  Set      907
  Used     849

COSLAT                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     195     344
  Set      892
  Used     842

COSLATJ                         Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     193     342
  Set      875     877
  Used     840     892

COSLON                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     197     346
  Set      897
  Used     844

COSZ                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     205     353
  Set 
  Used     854

COUNT                                                             Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1175

CREATEASSOCLEGFUNC                                                Subroutine, Module procedure
  Decl     212     406
  Set 
  Used

CREATED                         Static offset=9984                LOGICAL, PRIVATE, SAVE, Initialized
  Decl     365
  Set     1007    1021
  Used     993    1016    1043    1130

CREATEGAUSSQUAD                                                   Subroutine, Module procedure
  Decl     172     750
  Set 
  Used

CREATEGRIDVALUES                                                  Subroutine, Module procedure
  Decl     171     828
  Set 
  Used

CREATELEGPOL                                                      Subroutine, Module procedure
  Decl     167     984
  Set 
  Used     783

CS                              Stack                             CHARACTER(1)
  Decl    5472
  Set     5524
  Used    5525

CTIM                            Stack                             REAL(KIND=8)
  Decl    2850
  Set     2859    2863
  Used    2861    2871

CYCLICAVEBOX_R                                                    Subroutine, Module procedure, PRIVATE
  Decl    5193
  Set 
  Used    5132

CYCLICCUBICSPLINE                                                 Subroutine, Module procedure, PRIVATE
  Decl    3208
  Set 
  Used    3128

CYCLICFREQBOX_I                                                   Subroutine, Module procedure, PRIVATE
  Decl    3996
  Set 
  Used    3928

CYCLICFREQBOX_R                                                   Subroutine, Module procedure, PRIVATE
  Decl    4379
  Set 
  Used    3969

CYCLICLINEAR                                                      Subroutine, Module procedure
  Decl     239    3438
  Set 
  Used    3359

CYCLICNEAREST_I                                                   Subroutine, Module procedure, PRIVATE
  Decl    3753
  Set 
  Used       0    3611

CYCLICNEAREST_R                                                   Subroutine, Module procedure
  Decl     238    3832
  Set 
  Used       0    3656

CYCLICSEAMASK_R                                                   Subroutine, Module procedure, PRIVATE
  Decl    4844
  Set 
  Used    4783

D                               Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1249    1251
  Set     1265    1319    1355
  Used

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2321    2329
  Set     2386    2390    2424    2437    2439    2457    2458
  Used    2354    2383    2384    2387    2397    2423    2447    2450    2452

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2471    2479
  Set     2536    2540    2574    2587    2589    2607    2608
  Used    2504    2533    2534    2537    2547    2573    2597    2600    2602

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2621    2626
  Set     2695    2698    2716
  Used    2703

DATEINIT_S                      Dummy Arg                         CHARACTER(10), INTENT(OUT)
  Decl    2888    2889
  Set     2901
  Used    2902

DATENOW_S                       Dummy Arg                         CHARACTER(10), INTENT(OUT)
  Decl    2914    2915
  Set     2925
  Used    2926

DBLE                                                              Function, DOUBLE PRECISION, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    4141    4524    4947    5296

DDC                             Stack                             INTEGER
  Decl    2920
  Set 
  Used    2923    2926

DDI                             Stack                             INTEGER
  Decl    2894
  Set     2898
  Used    2902

DEGREE                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1028    1029
  Set 
  Used    1050    1054    1070    1082    1087    1094

DEGREE                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1104    1105
  Set 
  Used    1106    1108    1109    1110    1111    1112    1133    1135    1137    1138    1151    1191    1192    1193    1218
          1226    1230

DEGREEGIVEN                     Dummy Arg                         INTEGER, INTENT(IN)
  Decl     750     751
  Set 
  Used     761     762     766

DELTA                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3223
  Set     3276    3282    3288    3293    3300
  Used    3305    3307

DEN                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     374
  Set      424
  Used     421     430     436     534     547

DER                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3224
  Set     3305    3307    3310    3311
  Used    3316    3319    3321    3322

DESTROYASSOCLEGFUNC                                               Subroutine, Module procedure
  Decl     213     544
  Set 
  Used

DESTROYGAUSSQUAD                                                  Subroutine, Module procedure
  Decl     173     921
  Set 
  Used

DESTROYLEGPOL                                                     Subroutine, Module procedure
  Decl     168    1015
  Set 
  Used     930

DIFALFA                         Stack                             REAL(KIND=8)
  Decl    3770
  Set     3812    3815
  Used    3820

DIFALFA                         Stack                             REAL(KIND=8)
  Decl    3849
  Set     3890    3893
  Used    3898

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3208    3209
  Set 
  Used    3213    3220    3221    3222    3223    3224    3225    3226    3239    3240    3250    3256    3258    3265    3278
          3285    3286    3287    3288    3289    3290    3291    3292    3293    3294    3298    3305    3311    3315    3318
          3321    3322

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3438    3439
  Set 
  Used    3443    3450    3461    3462    3472    3478    3480    3487    3493    3496

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3753    3755
  Set 
  Used    3759    3777    3778    3788    3794    3796    3803    3814    3819

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3832    3834
  Set 
  Used    3838    3856    3857    3867    3873    3875    3882    3892    3897

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3996    3998
  Set 
  Used    4002    4021    4022    4023    4061    4062    4072    4078    4080    4115    4116    4124    4130    4157    4158
          4175    4176    4192    4193    4207    4214    4216    4217    4233    4234    4243    4250    4252    4253

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4379    4381
  Set 
  Used    4385    4404    4405    4406    4444    4445    4455    4461    4463    4498    4499    4507    4513    4540    4541
          4558    4559    4575    4576    4590    4597    4599    4600    4616    4617    4626    4633    4635    4636

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4844    4846
  Set 
  Used    4850    4867    4868    4869    4883    4884    4894    4900    4902    4937    4938    4946    4952    4979    4980
          4997    4998    5014    5015    5029    5036    5038    5039    5055    5056    5065    5072    5074    5075

DIMIN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5193    5195
  Set 
  Used    5199    5216    5217    5218    5232    5233    5243    5249    5251    5286    5287    5295    5301    5328    5329
          5346    5347    5363    5364    5378    5385    5387    5388    5404    5405    5414    5421    5423    5424

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3208    3210
  Set 
  Used    3214    3239    3240    3256    3257    3266

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3438    3440
  Set 
  Used    3444    3461    3462    3478    3479    3489

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3753    3756
  Set 
  Used    3760    3773    3777    3778    3794    3795    3804

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3832    3835
  Set 
  Used    3839    3852    3856    3857    3873    3874    3883

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3996    3999
  Set 
  Used    4003    4021    4022    4023    4024    4025    4061    4062    4078    4079    4115    4130    4131    4140    4162
          4163    4180    4181    4197    4198    4204    4208    4221    4222    4225    4237    4239    4240    4256    4258
          4259    4268    4269    4281

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4379    4382
  Set 
  Used    4386    4404    4405    4406    4407    4408    4444    4445    4461    4462    4498    4513    4514    4523    4545
          4546    4563    4564    4580    4581    4587    4591    4604    4605    4608    4620    4622    4623    4639    4641
          4642    4651    4652    4664

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4844    4847
  Set 
  Used    4851    4867    4868    4869    4870    4883    4884    4900    4901    4937    4952    4953    4962    4984    4985
          5002    5003    5019    5020    5026    5030    5043    5044    5047    5059    5061    5062    5078    5080    5081
          5087    5088

DIMOUT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5193    5196
  Set 
  Used    5200    5216    5217    5218    5219    5232    5233    5249    5250    5286    5301    5302    5311    5333    5334
          5351    5352    5368    5369    5375    5379    5392    5393    5396    5408    5410    5411    5427    5429    5430
          5436    5437

DIV                             Stack                             REAL(KIND=8)
  Decl    2746
  Set     2775    2780    2782    2797    2800    2802
  Used    2776    2777    2784    2786    2787    2802    2805    2806

DOF                             Stack                             REAL(KIND=8)
  Decl    4027
  Set     4119    4122    4135    4138
  Used    4125    4141

DOF                             Stack                             REAL(KIND=8)
  Decl    4410
  Set     4502    4505    4518    4521
  Used    4508    4524

DOF                             Stack                             REAL(KIND=8)
  Decl    4872
  Set     4941    4944    4957    4960
  Used    4947    4963

DOF                             Stack                             REAL(KIND=8)
  Decl    5221
  Set     5290    5293    5306    5309
  Used    5296    5312

DT                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2914    2918
  Set 
  Used    2922    2924

DUMPASSOCLEGFUNC                                                  Subroutine, Module procedure
  Decl     214     556
  Set 
  Used

DUMPGAUSSQUAD                                                     Subroutine, Module procedure
  Decl     174     947
  Set 
  Used

DUMPLOCAL                                                         LOGICAL, PARAMETER, PRIVATE
  Decl     382
  Set 
  Used

DUMPMATRIX                                                        Generic interface
  Decl     211     306
  Set 
  Used

DUMPMATRIXINTEGER1D                                               Subroutine, Module procedure, PRIVATE
  Decl     660
  Set 
  Used

DUMPMATRIXINTEGER2D                                               Subroutine, Module procedure, PRIVATE
  Decl     675
  Set 
  Used

DUMPMATRIXINTEGER3D                                               Subroutine, Module procedure, PRIVATE
  Decl     696
  Set 
  Used

DUMPMATRIXREAL1D                                                  Subroutine, Module procedure, PRIVATE
  Decl     598
  Set 
  Used       0       0     952     559     952     953

DUMPMATRIXREAL2D                                                  Subroutine, Module procedure, PRIVATE
  Decl     613
  Set 
  Used     560

DUMPMATRIXREAL3D                                                  Subroutine, Module procedure, PRIVATE
  Decl     634
  Set 
  Used

DWORK                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4021
  Set     4125    4141    4152    4170    4187    4211    4229
  Used    4151    4154    4169    4172    4189    4212    4230    4248

DWORK                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4404
  Set     4508    4524    4535    4553    4570    4594    4612
  Used    4534    4537    4552    4555    4572    4595    4613    4631

DWORK                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4867
  Set     4947    4963    4974    4992    5009    5033    5051
  Used    4973    4976    4991    4994    5011    5034    5052    5070

DWORK                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5216
  Set     5296    5312    5323    5341    5358    5382    5400
  Used    5322    5325    5340    5343    5360    5383    5401    5419

DX                              Stack                             REAL(KIND=8)
  Decl    3230
  Set     3327
  Used    3328    3331

DX                              Stack                             REAL(KIND=8)
  Decl    3453
  Set     3501
  Used    3502

DX2                             Stack                             REAL(KIND=8)
  Decl    3231
  Set     3328
  Used    3331

DXM                             Stack                             REAL(KIND=8)
  Decl    3228
  Set     3325
  Used    3326    3330

DXM                             Stack                             REAL(KIND=8)
  Decl    3452
  Set     3500
  Used    3502

DXM2                            Stack                             REAL(KIND=8)
  Decl    3229
  Set     3326
  Used    3330

E                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2321    2329
  Set     2345    2350    2412    2418    2436
  Used    2354    2360    2384    2386    2406    2409    2410    2416    2438

E                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2471    2479
  Set     2495    2500    2562    2568    2586
  Used    2504    2510    2534    2536    2556    2559    2560    2566    2588

E                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2621    2626
  Set     2650    2660    2680    2689    2699
  Used    2681    2688    2692

EN                              Stack                             INTEGER
  Decl    1595
  Set     1625    1771    1836
  Used    1630    1632    1638    1639    1648    1649    1651    1660    1664    1692    1735    1768    1769    1770    1779
          1780    1788    1789    1791    1795    1807    1808    1813    1815    1816    1823    1824    1832    1834    1854

EN                              Stack                             INTEGER
  Decl    1868
  Set     1874
  Used    1875    1876    1877    1882    1883    1889    1891    1895    1906    1915    1917    1919    1934    1935    1936
          1939    1940    1941    1951    1955    1966    1980    1982    1983    1986

ENM2                            Stack                             INTEGER
  Decl    1595
  Set     1633
  Used    1664    1673    1674    1836

ENM2                            Stack                             INTEGER
  Decl    1868
  Set     1942
  Used    1943    1947

EP                                                                REAL(KIND=8), PARAMETER
  Decl    2855
  Set 
  Used    2871

EPS                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2185    2263
  Set 
  Used    2269    2270    2271

EPS                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2321    2330
  Set 
  Used    2354

EPS                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2471    2480
  Set 
  Used    2504

EPSILON                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    1145

EPSLON                          Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     216     371
  Set      430     436     534
  Used     412     415     468     470     514     516     546

ER                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     905

ERCOSSIN                        Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     184     334
  Set      905
  Used     847

EXTCOLPERDIAG                   Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     388
  Set 
  Used

EXTDIAGPERCOL                   Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     387
  Set 
  Used

F                               Stack                             REAL(KIND=8)
  Decl    1407
  Set     1424    1430    1499    1502    1507
  Used    1426    1432    1513    1514    1515    1523

F                               Stack                             REAL(KIND=8)
  Decl    2102
  Set     2137    2143    2146    2158    2164    2167
  Used    2149    2170

F                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2348    2393
  Used    2439

F                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2498    2543
  Used    2589

F                               Stack                             REAL(KIND=8)
  Decl    2628
  Set     2658    2663    2681    2687
  Used    2659    2661    2662    2684    2688    2692

FACT                            Stack                             REAL(KIND=8)
  Decl    5491
  Set 
  Used    5504    5540

FACTI                           Stack                             REAL(KIND=8)
  Decl    5492
  Set     5540
  Used    5545

FCONSRV                         Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     191     340
  Set 
  Used     838

FCOR                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     185     335
  Set      906
  Used     848

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3107    3108
  Set 
  Used    3129    3143

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3153    3154
  Set 
  Used    3183

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3208    3213
  Set 
  Used    3243    3277    3283    3289    3294    3319    3321    3322

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3340    3341
  Set 
  Used    3360    3374

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3384    3385
  Set 
  Used    3413

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3438    3443
  Set 
  Used    3465    3494    3496

FIELDIN                         Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3506    3507
  Set 
  Used    3526    3540

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3549    3550
  Set 
  Used    3569    3583

FIELDIN                         Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    3591    3592
  Set 
  Used    3612    3627

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    3636    3637
  Set 
  Used    3657    3672

FIELDIN                         Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3680    3681
  Set 
  Used    3709

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3717    3718
  Set 
  Used    3746

FIELDIN                         Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3753    3759
  Set 
  Used    3781    3822

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3832    3838
  Set 
  Used    3860    3900

FIELDIN                         Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3909    3910
  Set 
  Used    3929    3943

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3950    3951
  Set 
  Used    3970    3984

FIELDIN                         Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3996    4002
  Set 
  Used    4065    4277    4279

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4379    4385
  Set 
  Used    4448    4660    4662

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    4764    4765
  Set 
  Used    4784    4798

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    4807    4808
  Set 
  Used    4836

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4844    4850
  Set 
  Used    4887    5092    5096

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    5113    5114
  Set 
  Used    5133    5147

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    5156    5157
  Set 
  Used    5185

FIELDIN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5193    5199
  Set 
  Used    5236    5441    5444

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3107    3109
  Set     3133    3143
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3153    3155
  Set     3183
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3208    3214
  Set     3243    3329
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3340    3342
  Set     3364    3374
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3384    3386
  Set     3413
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3438    3444
  Set     3465    3502
  Used

FIELDOUT                        Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3506    3508
  Set     3530    3540
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3549    3551
  Set     3573    3583
  Used

FIELDOUT                        Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    3591    3593
  Set     3616    3627
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    3636    3638
  Set     3661    3672
  Used

FIELDOUT                        Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3680    3682
  Set     3709
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3717    3719
  Set     3746
  Used

FIELDOUT                        Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    3753    3760
  Set     3781    3822
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3832    3839
  Set     3860    3900
  Used

FIELDOUT                        Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3909    3911
  Set     3933    3943
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3950    3952
  Set     3974    3984
  Used

FIELDOUT                        Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3996    4003
  Set     4065    4267    4300    4340    4361
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    4379    4386
  Set     4448    4650    4683    4723    4744
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    4764    4766
  Set     4788    4798
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    4807    4809
  Set     4836
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    4844    4851
  Set     4887    5087    5096    5103    5105
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    5113    5115
  Set     5137    5147
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    5156    5158
  Set     5185
  Used

FIELDOUT                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    5193    5200
  Set     5236    5436    5444    5451    5453
  Used

FLGIN                           Stack                             LOGICAL, DIMENSION(5)
  Decl    4019
  Set     4099    4100    4101    4102    4103
  Used    4117    4156    4174    4191    4214    4215    4217    4232    4250    4251    4253

FLGIN                           Stack                             LOGICAL, DIMENSION(5)
  Decl    4402
  Set     4482    4483    4484    4485    4486
  Used    4500    4539    4557    4574    4597    4598    4600    4615    4633    4634    4636

FLGIN                           Stack                             LOGICAL, DIMENSION(5)
  Decl    4865
  Set     4921    4922    4923    4924    4925
  Used    4939    4978    4996    5013    5036    5037    5039    5054    5072    5073    5075

FLGIN                           Stack                             LOGICAL, DIMENSION(5)
  Decl    5214
  Set     5270    5271    5272    5273    5274
  Used    5288    5327    5345    5362    5385    5386    5388    5403    5421    5422    5424

FLGOUT                          Stack                             LOGICAL, DIMENSION(5)
  Decl    4020
  Set     4104    4105    4106    4107    4108
  Used    4133    4161    4179    4196    4220    4237    4238    4240    4256    4257    4259

FLGOUT                          Stack                             LOGICAL, DIMENSION(5)
  Decl    4403
  Set     4487    4488    4489    4490    4491
  Used    4516    4544    4562    4579    4603    4620    4621    4623    4639    4640    4642

FLGOUT                          Stack                             LOGICAL, DIMENSION(5)
  Decl    4866
  Set     4926    4927    4928    4929    4930
  Used    4955    4983    5001    5018    5042    5059    5060    5062    5078    5079    5081

FLGOUT                          Stack                             LOGICAL, DIMENSION(5)
  Decl    5215
  Set     5275    5276    5277    5278    5279
  Used    5304    5332    5350    5367    5391    5408    5409    5411    5427    5428    5430

FM                              Stack                             REAL(KIND=8)
  Decl    4042
  Set     4304    4318
  Used    4317    4342    4343    4363

FM                              Stack                             REAL(KIND=8)
  Decl    4425
  Set     4687    4701
  Used    4700    4725    4726    4746

FMK                             Stack                             REAL(KIND=8)
  Decl    4050
  Set     4350    4356
  Used    4355    4364

FMK                             Stack                             REAL(KIND=8)
  Decl    4433
  Set     4733    4739
  Used    4738    4747

FNAMEGAUSS                      Use assoc                         CHARACTER(211), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     788     793

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3111
  Set 
  Used    3129    3133

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3344
  Set 
  Used    3360    3364

FOUT                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3510
  Set 
  Used    3526    3530

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3553
  Set 
  Used    3569    3573

FOUT                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3595
  Set 
  Used    3612    3616

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3640
  Set 
  Used    3657    3661

FOUT                            Stack                             INTEGER(KIND=8), DIMENSION(<exp>)
  Decl    3913
  Set 
  Used    3929    3933

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3954
  Set 
  Used    3970    3974

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4768
  Set 
  Used    4784    4788

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5117
  Set 
  Used    5133    5137

FQ                              Stack                             REAL(KIND=8)
  Decl    4049
  Set     4294    4343    4364
  Used    4342    4363

FQ                              Stack                             REAL(KIND=8)
  Decl    4432
  Set     4677    4726    4747
  Used    4725    4746

FR                              Stack                             REAL(KIND=8)
  Decl    4046
  Set     4315
  Used    4317    4318    4323    4325

FR                              Stack                             REAL(KIND=8)
  Decl    4429
  Set     4698
  Used    4700    4701    4706    4708

FREQBOXIJTOIBJB                                                   Generic interface
  Decl     233     291
  Set 
  Used

FREQBOXIJTOIBJB_I2D                                               Subroutine, Module procedure, PRIVATE
  Decl    3909
  Set 
  Used

FREQBOXIJTOIBJB_R2D                                               Subroutine, Module procedure, PRIVATE
  Decl    3950
  Set 
  Used

FRK                             Stack                             REAL(KIND=8)
  Decl    4051
  Set     4354
  Used    4355    4356

FRK                             Stack                             REAL(KIND=8)
  Decl    4434
  Set     4737
  Used    4738    4739

FSEARCH                         Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE
  Decl    1107
  Set 
  Used    1160    1169    1184

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

FVALS                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE
  Decl     753
  Set 
  Used     775

G                               Stack                             REAL(KIND=8)
  Decl    1407
  Set     1498    1505    1514
  Used    1501    1506    1519

G                               Stack                             REAL(KIND=8)
  Decl    2042
  Set     2068    2071    2077
  Used    2080

G                               Stack                             REAL(KIND=8)
  Decl    2102
  Set     2130
  Used    2131    2132    2177

G                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2383    2406
  Used    2384    2387    2423    2424

G                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2533    2556
  Used    2534    2537    2573    2574

G                               Stack                             REAL(KIND=8)
  Decl    2628
  Set     2659    2667    2670    2677    2688    2706    2709
  Used    2660    2661    2662    2680    2689    2692    2713

GAMA                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3222
  Set     3275    3281    3287    3292
  Used    3299    3307

GAUSSCOLAT                      Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     175     323
  Set      796
  Used     771     797     803     804     934

GAUSSGIVEN                      Dummy Arg                         LOGICAL, INTENT(IN)
  Decl     750     752
  Set 
  Used     787

GAUSSPOINTS                     Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     179     327
  Set      799     800
  Used     456     466     501     512     776     937

GAUSSWEIGHTS                    Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     180     328
  Set      791    1229    1230
  Used     777     938

H                                                                 CHARACTER(24), PARAMETER
  Decl     409
  Set 
  Used

H                                                                 CHARACTER(25), PARAMETER
  Decl     545
  Set 
  Used

H                                                                 CHARACTER(22), PARAMETER
  Decl     557
  Set 
  Used     558

H                                                                 CHARACTER(21), PARAMETER
  Decl     754
  Set 
  Used     763     812     818     822

H                                                                 CHARACTER(22), PARAMETER
  Decl     922
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     948
  Set 
  Used     951

H                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1583    1592
  Set     1615    1661    1693    1695    1714    1716    1730    1731    1732    1743    1744    1745    1768    1779    1781
          1807    1808    1815    1816
  Used    1615    1616    1621    1641    1643    1648    1650    1651    1664    1675    1678    1679    1680    1686    1687
          1703    1704    1706    1727    1729    1740    1742    1769    1780    1795    1806    1814    1847

H                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1857    1863
  Set     1883    1906    1915    1917    1919    1935    1936    1938    1939    1940    1941    1965    1966    1979    1980
          1982    1983    1985    1986
  Used    1890    1891    1895    1911    1912    1934    1949    1951    1954    1955    1971    1972    1999    2016

H                               Stack                             REAL(KIND=8)
  Decl    2102
  Set     2109    2127    2131
  Used    2130    2146    2167

H                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2354    2387    2407    2429
  Used    2355    2390    2393    2424    2430    2431

H                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2504    2537    2557    2579
  Used    2505    2540    2543    2574    2580    2581

H                               Stack                             REAL(KIND=8)
  Decl    2628
  Set     2641    2655    2661
  Used    2659    2666    2680    2684    2695

H                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2729    2743
  Set     2753
  Used    2762    2763    2767    2775    2779    2780    2782    2786    2787

H                                                                 CHARACTER(18), PARAMETER
  Decl    3119
  Set 
  Used    3121

H                                                                 CHARACTER(18), PARAMETER
  Decl    3164
  Set 
  Used    3166

H                                                                 CHARACTER(18), PARAMETER
  Decl    3352
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl    3395
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3518
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3561
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3603
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3648
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3691
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3728
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3921
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    3962
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    4776
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl    4818
  Set 
  Used

H                                                                 CHARACTER(22), PARAMETER
  Decl    5125
  Set 
  Used

H                                                                 CHARACTER(22), PARAMETER
  Decl    5167
  Set 
  Used

HALFDEGREE                      Stack                             INTEGER
  Decl    1124
  Set     1151
  Used    1157    1173    1175    1229    1230

HH                              Stack                             REAL(KIND=8)
  Decl    2628
  Set     2684
  Used    2688

HHC                             Stack                             INTEGER
  Decl    2920
  Set     2924
  Used    2926

HHI                             Stack                             INTEGER
  Decl    2894
  Set     2899
  Used    2902

HIN                             Stack                             REAL(KIND=8)
  Decl    3233
  Set     3265
  Used    3267    3316    3319    3321    3322    3325    3327

HIN                             Stack                             REAL(KIND=8)
  Decl    3455
  Set     3487
  Used    3488    3500    3501

HIN                             Stack                             REAL(KIND=8)
  Decl    3767
  Set     3803
  Used    3805    3816    3824

HIN                             Stack                             REAL(KIND=8)
  Decl    3846
  Set     3882
  Used    3884    3894    3902

HIN                             Stack                             REAL(KIND=8)
  Decl    4011
  Set     4116
  Used    4125

HIN                             Stack                             REAL(KIND=8)
  Decl    4394
  Set     4499
  Used    4508

HIN                             Stack                             REAL(KIND=8)
  Decl    4858
  Set     4938
  Used    4947

HIN                             Stack                             REAL(KIND=8)
  Decl    5207
  Set     5287
  Used    5296

HIN2                            Stack                             REAL(KIND=8)
  Decl    3234
  Set     3267
  Used    3276    3282    3288    3293

HININV                          Stack                             REAL(KIND=8)
  Decl    3456
  Set     3488
  Used    3494    3496

HININV                          Stack                             REAL(KIND=8)
  Decl    3768
  Set     3805
  Used

HININV                          Stack                             REAL(KIND=8)
  Decl    3847
  Set     3884
  Used

HOLD                            Stack                             REAL(KIND=8)
  Decl    1262
  Set     1293    1309    1375    1387
  Used    1296    1311    1378    1390

HOUT                            Stack                             REAL(KIND=8)
  Decl    3235
  Set     3266
  Used    3325    3327

HOUT                            Stack                             REAL(KIND=8)
  Decl    3457
  Set     3489
  Used    3500    3501

HOUT                            Stack                             REAL(KIND=8)
  Decl    3769
  Set     3804
  Used    3811

HOUT                            Stack                             REAL(KIND=8)
  Decl    3848
  Set     3883
  Used    3889

HOUT                            Stack                             REAL(KIND=8)
  Decl    4012
  Set     4131
  Used    4141

HOUT                            Stack                             REAL(KIND=8)
  Decl    4395
  Set     4514
  Used    4524

HOUT                            Stack                             REAL(KIND=8)
  Decl    4859
  Set     4953
  Used    4963

HOUT                            Stack                             REAL(KIND=8)
  Decl    5208
  Set     5302
  Used    5312

HQR2                                                              Subroutine, Module procedure, PRIVATE
  Decl    1583
  Set 
  Used

HQR3                                                              Subroutine, Module procedure, PRIVATE
  Decl    1857
  Set 
  Used    1847

HRMODL                          Stack                             REAL(KIND=8)
  Decl    2851
  Set     2871
  Used    2872

I                               Stack                             INTEGER
  Decl     830
  Set      863     888
  Used     864     894     895

I                               Stack                             INTEGER
  Decl     986
  Set     1003
  Used    1004    1005

I                               Stack                             INTEGER
  Decl    1114
  Set     1162
  Used    1163

I                               Stack                             INTEGER
  Decl    1263
  Set     1275    1291    1302    1322    1331    1368    1385
  Used    1276    1279    1303    1304    1323    1324    1332    1333    1337    1339    1369    1371

I                               Stack                             INTEGER
  Decl    1406
  Set     1423    1429    1447    1465    1477    1485
  Used    1424    1425    1426    1430    1431    1432    1448    1449    1466    1467    1478    1490    1491    1492    1515
          1519    1523

I                               Stack                             INTEGER
  Decl    1545
  Set     1551    1567    1569
  Used    1552    1558    1568    1569    1570    1571    1574    1575

I                               Stack                             INTEGER
  Decl    1595
  Set     1612    1660    1692    1739    1752    1813    1821
  Used    1615    1616    1619    1620    1621    1622    1661    1693    1694    1695    1740    1742    1743    1744    1745
          1753    1755    1756    1758    1759    1814    1815    1816    1822    1823    1824

I                               Stack                             INTEGER
  Decl    1868
  Set     1889    1948    1996    2012
  Used    1890    1891    1895    1898    1902    1903    1906    1911    1912    1913    1915    1917    1919    1949    1951
          1954    1955    1958    1963    1964    1965    1966    1971    1972    1975    1976    1979    1980    1982    1983
          1985    1986    1997    1999    2016    2019

I                               Stack                             INTEGER
  Decl    2041
  Set     2046    2063    2070    2079
  Used    2048    2050    2064    2071    2080    2081

I                               Stack                             INTEGER
  Decl    2101
  Set     2115    2125    2142    2148    2157
  Used    2116    2126    2127    2143    2149    2150    2164    2170    2171

I                               Stack                             INTEGER
  Decl    2334
  Set     2344    2389    2405    2445
  Used    2345    2390    2406    2409    2410    2412    2416    2418    2423    2424    2429    2430    2431    2446    2447
          2456    2457    2458    2461    2462

I                               Stack                             INTEGER
  Decl    2484
  Set     2494    2539    2555    2595
  Used    2495    2540    2556    2559    2560    2562    2566    2568    2573    2574    2579    2580    2581    2596    2597
          2606    2607    2608    2611    2612

I                               Stack                             INTEGER
  Decl    2629
  Set     2631    2639    2701
  Used    2632    2633    2640    2646    2650    2654    2655    2658    2660    2662    2666    2670    2677    2681    2687
          2692    2695    2702    2703    2709    2713    2716    2717    2721    2722

I                               Stack                             INTEGER
  Decl    2747
  Set     2752    2761    2766    2774    2785    2807
  Used    2753    2762    2763    2767    2775    2777    2786    2787    2808

I                               Stack                             INTEGER
  Decl    2995
  Set     3002
  Used    3004

I                               Stack                             INTEGER
  Decl    3015
  Set     3022
  Used    3024

I                               Stack                             INTEGER
  Decl    3034
  Set     3041
  Used    3043

I                               Stack                             INTEGER
  Decl    3052
  Set     3059
  Used    3061

I                               Stack                             INTEGER
  Decl    3072
  Set     3079
  Used    3081

I                               Stack                             INTEGER
  Decl    3090
  Set     3097
  Used    3099

I                               Stack                             INTEGER
  Decl    3112
  Set     3130    3141
  Used    3131    3132    3133    3143

I                               Stack                             INTEGER
  Decl    3157
  Set     3181
  Used    3183

I                               Stack                             INTEGER
  Decl    3345
  Set     3361    3372
  Used    3362    3363    3364    3374

I                               Stack                             INTEGER
  Decl    3388
  Set     3411
  Used    3413

I                               Stack                             INTEGER
  Decl    3511
  Set     3527    3538
  Used    3528    3529    3530    3540

I                               Stack                             INTEGER
  Decl    3554
  Set     3570    3581
  Used    3571    3572    3573    3583

I                               Stack                             INTEGER
  Decl    3596
  Set     3613    3625
  Used    3614    3615    3616    3627

I                               Stack                             INTEGER
  Decl    3641
  Set     3658    3670
  Used    3659    3660    3661    3672

I                               Stack                             INTEGER
  Decl    3684
  Set     3707
  Used    3709

I                               Stack                             INTEGER
  Decl    3721
  Set     3744
  Used    3746

I                               Stack                             INTEGER
  Decl    3914
  Set     3930    3941
  Used    3931    3932    3933    3943

I                               Stack                             INTEGER
  Decl    3955
  Set     3971    3982
  Used    3972    3973    3974    3984

I                               Stack                             INTEGER
  Decl    4017
  Set     4124    4140    4271    4298
  Used    4125    4141    4273    4274    4275    4282    4287    4300    4302    4315    4326    4340    4344    4354    4361
          4365

I                               Stack                             INTEGER
  Decl    4400
  Set     4507    4523    4654    4681
  Used    4508    4524    4656    4657    4658    4665    4670    4683    4685    4698    4709    4723    4727    4737    4744
          4748

I                               Stack                             INTEGER
  Decl    4769
  Set     4785    4796
  Used    4786    4787    4788    4798

I                               Stack                             INTEGER
  Decl    4811
  Set     4834
  Used    4836

I                               Stack                             INTEGER
  Decl    4864
  Set     4946    4962    5090    5101
  Used    4947    4963    5091    5094    5095    5102    5103    5105

I                               Stack                             INTEGER
  Decl    5118
  Set     5134    5145
  Used    5135    5136    5137    5147

I                               Stack                             INTEGER
  Decl    5160
  Set     5183
  Used    5185

I                               Stack                             INTEGER
  Decl    5213
  Set     5295    5311    5439    5449
  Used    5296    5312    5440    5442    5443    5450    5451    5453

I                               Stack                             INTEGER
  Decl    5479
  Set     5516    5543    5551
  Used    5519    5545    5552    5553

I1                              Stack                             INTEGER
  Decl     601
  Set      611
  Used     611

I1                              Stack                             INTEGER
  Decl     616
  Set      624
  Used     625

I1                              Stack                             INTEGER
  Decl     637
  Set      649
  Used     650

I1                              Stack                             INTEGER
  Decl     663
  Set      673
  Used     673

I1                              Stack                             INTEGER
  Decl     678
  Set      686
  Used     687

I1                              Stack                             INTEGER
  Decl     699
  Set      711
  Used     712

I1                              Stack                             INTEGER
  Decl    4028
  Set     4147    4166    4184    4207    4242    4243
  Used    4151    4152    4155    4157    4158    4169    4170    4173    4175    4176    4190    4192    4193    4207    4228
          4229    4231    4233    4234    4243

I1                              Stack                             INTEGER
  Decl    4411
  Set     4530    4549    4567    4590    4625    4626
  Used    4534    4535    4538    4540    4541    4552    4553    4556    4558    4559    4573    4575    4576    4590    4611
          4612    4614    4616    4617    4626

I1                              Stack                             INTEGER
  Decl    4873
  Set     4969    4988    5006    5029    5064    5065
  Used    4973    4974    4977    4979    4980    4991    4992    4995    4997    4998    5012    5014    5015    5029    5050
          5051    5053    5055    5056    5065

I1                              Stack                             INTEGER
  Decl    5222
  Set     5318    5337    5355    5378    5413    5414
  Used    5322    5323    5326    5328    5329    5340    5341    5344    5346    5347    5361    5363    5364    5378    5399
          5400    5402    5404    5405    5414

I1H                             Stack                             INTEGER
  Decl     601
  Set      607
  Used     608

I1H                             Stack                             INTEGER
  Decl     663
  Set      669
  Used     670

I2                              Stack                             INTEGER
  Decl     616
  Set      631
  Used     631

I2                              Stack                             INTEGER
  Decl     637
  Set      656
  Used     656

I2                              Stack                             INTEGER
  Decl     678
  Set      693
  Used     693

I2                              Stack                             INTEGER
  Decl     699
  Set      718
  Used     718

I2                              Stack                             INTEGER
  Decl    4029
  Set     4148    4167    4201    4208    4224    4225
  Used    4151    4160    4162    4163    4169    4178    4180    4181    4187    4195    4197    4198    4204    4208    4210
          4211    4219    4221    4222    4225    4246

I2                              Stack                             INTEGER
  Decl    4412
  Set     4531    4550    4584    4591    4607    4608
  Used    4534    4543    4545    4546    4552    4561    4563    4564    4570    4578    4580    4581    4587    4591    4593
          4594    4602    4604    4605    4608    4629

I2                              Stack                             INTEGER
  Decl    4874
  Set     4970    4989    5023    5030    5046    5047
  Used    4973    4982    4984    4985    4991    5000    5002    5003    5009    5017    5019    5020    5026    5030    5032
          5033    5041    5043    5044    5047    5068

I2                              Stack                             INTEGER
  Decl    5223
  Set     5319    5338    5372    5379    5395    5396
  Used    5322    5331    5333    5334    5340    5349    5351    5352    5358    5366    5368    5369    5375    5379    5381
          5382    5390    5392    5393    5396    5417

I2H                             Stack                             INTEGER
  Decl     616
  Set      626
  Used     627

I2H                             Stack                             INTEGER
  Decl     637
  Set      651
  Used     652

I2H                             Stack                             INTEGER
  Decl     678
  Set      688
  Used     689

I2H                             Stack                             INTEGER
  Decl     699
  Set      713
  Used     714

I3                              Stack                             INTEGER
  Decl     637
  Set      646
  Used     647

I3                              Stack                             INTEGER
  Decl     699
  Set      708
  Used     709

I3                              Stack                             INTEGER
  Decl    4030
  Set     4149    4168    4185    4202    4226    4244
  Used    4152    4153    4154    4155    4157    4158    4160    4162    4163    4170    4171    4172    4173    4175    4176
          4178    4180    4181    4187    4188    4189    4190    4192    4193    4195    4197    4198    4211    4212    4213
          4214    4216    4217    4219    4221    4222    4229    4230    4231    4233    4234    4236    4237    4239    4240
          4248    4249    4250    4252    4253    4255    4256    4258    4259    4261

I3                              Stack                             INTEGER
  Decl    4413
  Set     4532    4551    4568    4585    4609    4627
  Used    4535    4536    4537    4538    4540    4541    4543    4545    4546    4553    4554    4555    4556    4558    4559
          4561    4563    4564    4570    4571    4572    4573    4575    4576    4578    4580    4581    4594    4595    4596
          4597    4599    4600    4602    4604    4605    4612    4613    4614    4616    4617    4619    4620    4622    4623
          4631    4632    4633    4635    4636    4638    4639    4641    4642    4644

I3                              Stack                             INTEGER
  Decl    4875
  Set     4971    4990    5007    5024    5048    5066
  Used    4974    4975    4976    4977    4979    4980    4982    4984    4985    4992    4993    4994    4995    4997    4998
          5000    5002    5003    5009    5010    5011    5012    5014    5015    5017    5019    5020    5033    5034    5035
          5036    5038    5039    5041    5043    5044    5051    5052    5053    5055    5056    5058    5059    5061    5062
          5070    5071    5072    5074    5075    5077    5078    5080    5081    5083

I3                              Stack                             INTEGER
  Decl    5224
  Set     5320    5339    5356    5373    5397    5415
  Used    5323    5324    5325    5326    5328    5329    5331    5333    5334    5341    5342    5343    5344    5346    5347
          5349    5351    5352    5358    5359    5360    5361    5363    5364    5366    5368    5369    5382    5383    5384
          5385    5387    5388    5390    5392    5393    5400    5401    5402    5404    5405    5407    5408    5410    5411
          5419    5420    5421    5423    5424    5426    5427    5429    5430    5432

I8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2477    2624    3070    3071    3088    3089    3910    3911    3913    4002    4003

IB                              Stack                             INTEGER
  Decl     830
  Set      886
  Used     887     888     890     891     892     893     894     895     896     897     898     905     906     907

IB                              Stack                             INTEGER
  Decl    2997
  Set     3001
  Used    3002    3003    3004

IB                              Stack                             INTEGER
  Decl    3017
  Set     3021
  Used    3022    3023    3024

IB                              Stack                             INTEGER
  Decl    3036
  Set     3040
  Used    3041    3042    3043

IB                              Stack                             INTEGER
  Decl    3054
  Set     3058
  Used    3059    3060    3061

IB                              Stack                             INTEGER
  Decl    3074
  Set     3078
  Used    3079    3080    3081

IB                              Stack                             INTEGER
  Decl    3092
  Set     3096
  Used    3097    3098    3099

IB                              Stack                             INTEGER
  Decl    3115
  Set     3131    3140
  Used    3133    3141    3142    3143

IB                              Stack                             INTEGER
  Decl    3159
  Set     3180
  Used    3181    3182    3183

IB                              Stack                             INTEGER
  Decl    3348
  Set     3362    3371
  Used    3364    3372    3373    3374

IB                              Stack                             INTEGER
  Decl    3390
  Set     3410
  Used    3411    3412    3413

IB                              Stack                             INTEGER
  Decl    3514
  Set     3528    3537
  Used    3530    3538    3539    3540

IB                              Stack                             INTEGER
  Decl    3557
  Set     3571    3580
  Used    3573    3581    3582    3583

IB                              Stack                             INTEGER
  Decl    3599
  Set     3614    3624
  Used    3616    3625    3626    3627

IB                              Stack                             INTEGER
  Decl    3644
  Set     3659    3669
  Used    3661    3670    3671    3672

IB                              Stack                             INTEGER
  Decl    3686
  Set     3706
  Used    3707    3708    3709

IB                              Stack                             INTEGER
  Decl    3723
  Set     3743
  Used    3744    3745    3746

IB                              Stack                             INTEGER
  Decl    3917
  Set     3931    3940
  Used    3933    3941    3942    3943

IB                              Stack                             INTEGER
  Decl    3958
  Set     3972    3981
  Used    3974    3982    3983    3984

IB                              Stack                             INTEGER
  Decl    4772
  Set     4786    4795
  Used    4788    4796    4797    4798

IB                              Stack                             INTEGER
  Decl    4813
  Set     4833
  Used    4834    4835    4836

IB                              Stack                             INTEGER
  Decl    5121
  Set     5135    5144
  Used    5137    5145    5146    5147

IB                              Stack                             INTEGER
  Decl    5162
  Set     5182
  Used    5183    5184    5185

IBJBTOIJ                                                          Generic interface
  Decl     225     247
  Set 
  Used

IBJBTOIJ_I                                                        Subroutine, Module procedure, PRIVATE
  Decl    3049
  Set 
  Used

IBJBTOIJ_R                                                        Subroutine, Module procedure, PRIVATE
  Decl    2992
  Set 
  Used

IBMAXPERJB                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     886    3001    3021    3040    3058    3078    3096    3140    3180    3371    3410    3537    3580    3624    3669
          3706    3743    3940    3981    4795    4833    5144    5182

IBPERIJ                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    3131    3171    3362    3401    3528    3571    3614    3659    3697    3734    3931    3972    4786    4824    5135
          5173

IC                              Stack                             INTEGER
  Decl    2747
  Set     2763    2777
  Used    2767    2779    2780    2782

IC                              Stack                             INTEGER
  Decl    5482
  Set     5518    5523
  Used    5524

ICH0                            Stack                             INTEGER
  Decl    5473
  Set     5497
  Used    5527

ICH9                            Stack                             INTEGER
  Decl    5474
  Set     5498
  Used    5526

ICHAR                                                             Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    5498    5500    5501    5502    5525

ICHCA                           Stack                             INTEGER
  Decl    5476
  Set     5501
  Used    5529

ICHCZ                           Stack                             INTEGER
  Decl    5475
  Set     5499
  Used    5528

ICHLA                           Stack                             INTEGER
  Decl    5477
  Set     5502
  Used    5531

ICHLZ                           Stack                             INTEGER
  Decl    5478
  Set     5500
  Used

ICI                             Stack                             INTEGER
  Decl    4013
  Set     4118    4121
  Used    4155    4157    4158    4173    4175    4176    4190    4192    4193    4231    4233    4234

ICI                             Stack                             INTEGER
  Decl    4396
  Set     4501    4504
  Used    4538    4540    4541    4556    4558    4559    4573    4575    4576    4614    4616    4617

ICI                             Stack                             INTEGER
  Decl    4860
  Set     4940    4943
  Used    4977    4979    4980    4995    4997    4998    5012    5014    5015    5053    5055    5056

ICI                             Stack                             INTEGER
  Decl    5209
  Set     5289    5292
  Used    5326    5328    5329    5344    5346    5347    5361    5363    5364    5402    5404    5405

ICO                             Stack                             INTEGER
  Decl    4014
  Set     4134    4137
  Used    4160    4162    4163    4178    4180    4181    4195    4197    4198    4219    4221    4222

ICO                             Stack                             INTEGER
  Decl    4397
  Set     4517    4520
  Used    4543    4545    4546    4561    4563    4564    4578    4580    4581    4602    4604    4605

ICO                             Stack                             INTEGER
  Decl    4861
  Set     4956    4959
  Used    4982    4984    4985    5000    5002    5003    5017    5019    5020    5041    5043    5044

ICO                             Stack                             INTEGER
  Decl    5210
  Set     5305    5308
  Used    5331    5333    5334    5349    5351    5352    5366    5368    5369    5390    5392    5393

ICS                             Stack                             INTEGER
  Decl    5486
  Set     5525
  Used    5526    5527    5528    5529    5531

ID                              Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    2815    2840
  Set 
  Used    2859    2870    2873    2874

ID                              Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2934    2940
  Set     2954
  Used

ID                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2963    2967
  Set 
  Used    2983    2984

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    2888    2890
  Set 
  Used    2896    2897    2898    2899

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(INOUT)
  Decl    2914    2916
  Set     2927
  Used    2924

IDAY                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2815    2844
  Set     2870    2880
  Used    2879

IDAYMN                          Stack                             INTEGER
  Decl    2849
  Set     2876    2878
  Used    2879    2880

IDEGREE                         Stack                             INTEGER
  Decl    1038
  Set     1063    1070
  Used    1064    1071    1072    1073    1074    1075    1076

IDEGREE                         Stack                             INTEGER
  Decl    1125
  Set     1211    1218
  Used    1212    1219    1220    1221    1222    1223    1224

IERR                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1583    1591
  Set     1606    1854
  Used

IERR                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2185    2264
  Set     2274
  Used    2301    2314    2315

IERR                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2321    2328
  Set     2342    2372
  Used

IERR                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2471    2478
  Set     2492    2522
  Used

IEXC                            Stack                             INTEGER
  Decl    1406
  Set     1453    1471
  Used

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2815    2841
  Set 
  Used    2870

IFIRST                          Stack                             INTEGER
  Decl    3113
  Set     3126
  Used    3129

IFIRST                          Stack                             INTEGER
  Decl    3158
  Set     3171
  Used

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3208    3211
  Set 
  Used

IFIRST                          Stack                             INTEGER
  Decl    3346
  Set     3357
  Used    3360

IFIRST                          Stack                             INTEGER
  Decl    3389
  Set     3401
  Used

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3438    3441
  Set 
  Used

IFIRST                          Stack                             INTEGER
  Decl    3512
  Set     3523
  Used    3526

IFIRST                          Stack                             INTEGER
  Decl    3555
  Set     3566
  Used    3569

IFIRST                          Stack                             INTEGER
  Decl    3597
  Set     3608
  Used    3612

IFIRST                          Stack                             INTEGER
  Decl    3642
  Set     3653
  Used    3657

IFIRST                          Stack                             INTEGER
  Decl    3685
  Set     3697
  Used

IFIRST                          Stack                             INTEGER
  Decl    3722
  Set     3734
  Used

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3753    3757
  Set 
  Used

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3832    3836
  Set 
  Used

IFIRST                          Stack                             INTEGER
  Decl    3915
  Set     3926
  Used    3929

IFIRST                          Stack                             INTEGER
  Decl    3956
  Set     3967
  Used    3970

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3996    4000
  Set 
  Used    4267

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4379    4383
  Set 
  Used    4650

IFIRST                          Stack                             INTEGER
  Decl    4770
  Set     4781
  Used    4784

IFIRST                          Stack                             INTEGER
  Decl    4812
  Set     4824
  Used

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4844    4848
  Set 
  Used

IFIRST                          Stack                             INTEGER
  Decl    5119
  Set     5130
  Used    5133

IFIRST                          Stack                             INTEGER
  Decl    5161
  Set     5173
  Used

IFIRST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5193    5197
  Set 
  Used

IGH                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1395    1403
  Set     1531
  Used

IGH                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1535    1541
  Set 
  Used    1549    1551    1568

IGH                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1583    1590
  Set 
  Used    1620    1625    1752    1821    1847

IGH                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1857    1862
  Set 
  Used    1997    2010    2012

IGH                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2030    2037
  Set 
  Used    2053    2059    2063    2067    2070    2079

IGH                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2091    2096
  Set 
  Used    2098    2104    2115    2120    2124    2141    2148    2157    2162    2169

IGH                             Stack                             INTEGER
  Decl    2266
  Set 
  Used    2281    2287    2293    2306

IGREG                                                             INTEGER, PARAMETER
  Decl    2937
  Set 
  Used    2944

IGREG                                                             INTEGER, PARAMETER
  Decl    2969
  Set 
  Used    2984

IHR                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2815    2843
  Set     2872
  Used

II                              Stack                             INTEGER
  Decl    1545
  Set     1566
  Used    1567    1569

II                              Stack                             INTEGER
  Decl    1868
  Set     1888    1947
  Used    1889    1948

II                              Stack                             INTEGER
  Decl    2101
  Set     2124    2141
  Used    2125    2142

II                              Stack                             INTEGER
  Decl    2334
  Set     2404    2444
  Used    2405    2445

II                              Stack                             INTEGER
  Decl    2484
  Set     2554    2594
  Used    2555    2595

II                              Stack                             INTEGER
  Decl    2629
  Set     2638
  Used    2639

II                              Stack                             INTEGER
  Decl    5483
  Set     5519
  Used    5521    5535

III                             Stack                             INTEGER
  Decl    5485
  Set     5522
  Used    5533

IIN                             Stack                             INTEGER
  Decl    3217
  Set     3242    3257    3278    3298    3306    3315    3318    3324
  Used    3243    3258    3279    3280    3281    3282    3283    3299    3300    3307    3316    3319    3325    3327    3330
          3331

IIN                             Stack                             INTEGER
  Decl    3447
  Set     3464    3479    3493    3499
  Used    3465    3480    3494    3500    3501    3502

IIN                             Stack                             INTEGER
  Decl    3762
  Set     3780    3795    3814    3819
  Used    3781    3796    3821

IIN                             Stack                             INTEGER
  Decl    3841
  Set     3859    3874    3892    3897
  Used    3860    3875    3899

IIN                             Stack                             INTEGER
  Decl    4006
  Set     4064    4079
  Used    4065    4080

IIN                             Stack                             INTEGER
  Decl    4389
  Set     4447    4462
  Used    4448    4463

IIN                             Stack                             INTEGER
  Decl    4853
  Set     4886    4901
  Used    4887    4902

IIN                             Stack                             INTEGER
  Decl    5202
  Set     5235    5250
  Used    5236    5251

IJ                              Stack                             INTEGER
  Decl    1263
  Set     1276    1333    1336
  Used    1277    1278    1339    1340

IJTOIBJB                                                          Generic interface
  Decl     226     251
  Set 
  Used

IJTOIBJB3_I                                                       Subroutine, Module procedure, PRIVATE
  Decl    3087
  Set 
  Used

IJTOIBJB3_R                                                       Subroutine, Module procedure, PRIVATE
  Decl    3031
  Set 
  Used

IJTOIBJB_I                                                        Subroutine, Module procedure, PRIVATE
  Decl    3069
  Set 
  Used

IJTOIBJB_R                                                        Subroutine, Module procedure, PRIVATE
  Decl    3012
  Set 
  Used

IK                              Stack                             INTEGER
  Decl    1263
  Set     1324    1332
  Used    1325    1340

ILAST                           Stack                             INTEGER
  Decl    3114
  Set     3127
  Used    3129    3130

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3208    3212
  Set 
  Used    3241    3323

ILAST                           Stack                             INTEGER
  Decl    3347
  Set     3358
  Used    3360    3361

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3438    3442
  Set 
  Used    3463    3498

ILAST                           Stack                             INTEGER
  Decl    3513
  Set     3524
  Used    3526    3527

ILAST                           Stack                             INTEGER
  Decl    3556
  Set     3567
  Used    3569    3570

ILAST                           Stack                             INTEGER
  Decl    3598
  Set     3609
  Used    3612    3613

ILAST                           Stack                             INTEGER
  Decl    3643
  Set     3654
  Used    3657    3658

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3753    3758
  Set 
  Used    3779    3810

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3832    3837
  Set 
  Used    3858    3888

ILAST                           Stack                             INTEGER
  Decl    3916
  Set     3927
  Used    3929    3930

ILAST                           Stack                             INTEGER
  Decl    3957
  Set     3968
  Used    3970    3971

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3996    4001
  Set 
  Used    4063    4267    4298

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4379    4384
  Set 
  Used    4446    4650    4681

ILAST                           Stack                             INTEGER
  Decl    4771
  Set     4782
  Used    4784    4785

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4844    4849
  Set 
  Used    4885    5101

ILAST                           Stack                             INTEGER
  Decl    5120
  Set     5131
  Used    5133    5134

ILAST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5193    5198
  Set 
  Used    5234    5449

IMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     863     864    3128    3359    3525    3568    3611    3656    3928    3969    4783    5132

IMAXPERJ                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     878     894     895    3128    3359    3525    3568    3611    3656    3928    3969    4783    5132

IMINV                                                             Subroutine, Module procedure
  Decl     218    1249
  Set 
  Used

INITTIMESTAMP                                                     Subroutine, Module procedure
  Decl     223    2888
  Set 
  Used

INT                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0    2922    2945    2951    2953    2983    2986    3257    3324    3479
          3499    3795    3874    4079    4462    4662    4901    5250

IOI                             Stack                             INTEGER
  Decl    4015
  Set     4115
  Used    4125    4151    4152    4169    4170    4229

IOI                             Stack                             INTEGER
  Decl    4398
  Set     4498
  Used    4508    4534    4535    4552    4553    4612

IOI                             Stack                             INTEGER
  Decl    4862
  Set     4937
  Used    4947    4973    4974    4991    4992    5051

IOI                             Stack                             INTEGER
  Decl    5211
  Set     5286
  Used    5296    5322    5323    5340    5341    5400

IOLOWLEVEL                                                        Module
  Decl
  Set 
  Used     141

IOO                             Stack                             INTEGER
  Decl    4016
  Set     4130
  Used    4141    4151    4169    4187    4211

IOO                             Stack                             INTEGER
  Decl    4399
  Set     4513
  Used    4524    4534    4552    4570    4594

IOO                             Stack                             INTEGER
  Decl    4863
  Set     4952
  Used    4963    4973    4991    5009    5033

IOO                             Stack                             INTEGER
  Decl    5212
  Set     5301
  Used    5312    5322    5340    5358    5382

IOR                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    5533

IOUT                            Stack                             INTEGER
  Decl    3218
  Set     3241    3323
  Used    3242    3243    3324    3325    3327    3329

IOUT                            Stack                             INTEGER
  Decl    3448
  Set     3463    3498
  Used    3464    3465    3499    3500    3501    3502

IOUT                            Stack                             INTEGER
  Decl    3763
  Set     3779    3810
  Used    3780    3781    3811    3821    3822

IOUT                            Stack                             INTEGER
  Decl    3842
  Set     3858    3888
  Used    3859    3860    3889    3899    3900

IOUT                            Stack                             INTEGER
  Decl    4007
  Set     4063
  Used    4064    4065

IOUT                            Stack                             INTEGER
  Decl    4390
  Set     4446
  Used    4447    4448

IOUT                            Stack                             INTEGER
  Decl    4854
  Set     4885
  Used    4886    4887

IOUT                            Stack                             INTEGER
  Decl    5203
  Set     5234
  Used    5235    5236

IPERIJB                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     888    3002    3022    3041    3059    3079    3097    3141    3181    3372    3411    3538    3581    3625    3670
          3707    3744    3941    3982    4796    4834    5145    5183

IQ                              Stack                             INTEGER
  Decl    4052
  Set     4344    4365
  Used

IQ                              Stack                             INTEGER
  Decl    4435
  Set     4727    4748
  Used

IRATIO                          Stack                             INTEGER
  Decl    3219
  Set     3239
  Used    3240    3242

IRATIO                          Stack                             INTEGER
  Decl    3449
  Set     3461
  Used    3462    3464

IRATIO                          Stack                             INTEGER
  Decl    3764
  Set     3777
  Used    3778    3780

IRATIO                          Stack                             INTEGER
  Decl    3843
  Set     3856
  Used    3857    3859

IRATIO                          Stack                             INTEGER
  Decl    4008
  Set     4061
  Used    4062    4064

IRATIO                          Stack                             INTEGER
  Decl    4391
  Set     4444
  Used    4445    4447

IRATIO                          Stack                             INTEGER
  Decl    4855
  Set     4883
  Used    4884    4886

IRATIO                          Stack                             INTEGER
  Decl    5204
  Set     5232
  Used    5233    5235

ISHFT                                                             Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    5533

ISVAL                           Stack                             INTEGER
  Decl    5484
  Set     5520    5533
  Used    5535

IT                              Stack                             INTEGER
  Decl    1125
  Set     1189    1203
  Used    1195

ITM                             Static offset=0                   INTEGER, SAVE, Initialized
  Decl    2333
  Set 
  Used    2368

ITM                             Static offset=0                   INTEGER, SAVE, Initialized
  Decl    2483
  Set 
  Used    2518

ITMAX                                                             INTEGER, PARAMETER
  Decl    1119
  Set 
  Used    1195    1197

ITS                             Stack                             INTEGER
  Decl    1595
  Set     1631    1668
  Used    1653    1654

IUNIT                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5461    5463
  Set 
  Used    5504    5517

IYR                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2815    2846
  Set     2874    2884
  Used

IYYY                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2934    2941
  Set     2957    2958    2959
  Used    2959

IYYY                            Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    2963    2968
  Set     2975
  Used    2971    2975    2977    2980    2984

IZ                              Stack                             INTEGER
  Decl    1263
  Set     1274
  Used    1276

J                               Stack                             INTEGER
  Decl     408
  Set      444     479
  Used     445     447     448     480     482     483

J                               Stack                             INTEGER
  Decl     757
  Set      802
  Used     803     804     805

J                               Stack                             INTEGER
  Decl     830
  Set      860     867     872     887
  Used     861     868     873     874     875     876     877     878     879     889     890     891     892     894     895
           905     906

J                               Stack                             INTEGER
  Decl    1263
  Set     1273    1287    1306    1335    1347    1373    1381
  Used    1274    1280    1288    1294    1307    1308    1338    1349    1374    1376    1382    1388

J                               Stack                             INTEGER
  Decl    1406
  Set     1445    1463    1489    1518    1522
  Used    1420    1421    1424    1425    1430    1431    1448    1449    1466    1467    1490    1491    1492    1519    1523

J                               Stack                             INTEGER
  Decl    1545
  Set     1557    1573
  Used    1558    1574    1575    1576

J                               Stack                             INTEGER
  Decl    1595
  Set     1614    1726    1735    1805
  Used    1615    1616    1727    1729    1730    1731    1732    1739    1806    1807    1808

J                               Stack                             INTEGER
  Decl    1868
  Set     1894    1953    1998    2009
  Used    1895    1954    1955    1999    2010    2016    2019

J                               Stack                             INTEGER
  Decl    2041
  Set     2047    2067
  Used    2048    2071    2080    2081

J                               Stack                             INTEGER
  Decl    2101
  Set     2136    2163    2169
  Used    2143    2149    2150    2164    2170    2171

J                               Stack                             INTEGER
  Decl    2334
  Set     2353    2378    2449    2460
  Used    2368    2450    2451    2452    2461    2462    2463

J                               Stack                             INTEGER
  Decl    2484
  Set     2503    2528    2599    2610
  Used    2518    2600    2601    2602    2611    2612    2613

J                               Stack                             INTEGER
  Decl    2629
  Set     2632    2665    2686    2705    2720
  Used    2633    2666    2669    2670    2673    2677    2680    2681    2687    2688    2689    2691    2692    2709    2713
          2721    2722

J                               Stack                             INTEGER
  Decl    2747
  Set     2751    2756    2798    2804
  Used    2753    2758    2762    2763    2767    2770    2773    2775    2779    2782    2786    2799    2805    2806    2808

J                               Stack                             INTEGER
  Decl    2996
  Set     3003
  Used    3004

J                               Stack                             INTEGER
  Decl    3016
  Set     3023
  Used    3024

J                               Stack                             INTEGER
  Decl    3035
  Set     3042
  Used    3043

J                               Stack                             INTEGER
  Decl    3053
  Set     3060
  Used    3061

J                               Stack                             INTEGER
  Decl    3073
  Set     3080
  Used    3081

J                               Stack                             INTEGER
  Decl    3091
  Set     3098
  Used    3099

J                               Stack                             INTEGER
  Decl    3116
  Set     3125    3142
  Used    3126    3127    3128    3129    3131    3132    3143

J                               Stack                             INTEGER
  Decl    3160
  Set     3169    3182
  Used    3170    3171    3172    3183

J                               Stack                             INTEGER
  Decl    3349
  Set     3356    3373
  Used    3357    3358    3359    3360    3362    3363    3374

J                               Stack                             INTEGER
  Decl    3391
  Set     3399    3412
  Used    3400    3401    3402    3413

J                               Stack                             INTEGER
  Decl    3515
  Set     3522    3539
  Used    3523    3524    3525    3526    3528    3529    3540

J                               Stack                             INTEGER
  Decl    3558
  Set     3565    3582
  Used    3566    3567    3568    3569    3571    3572    3583

J                               Stack                             INTEGER
  Decl    3600
  Set     3607    3626
  Used    3608    3609    3611    3612    3614    3615    3627

J                               Stack                             INTEGER
  Decl    3645
  Set     3652    3671
  Used    3653    3654    3656    3657    3659    3660    3672

J                               Stack                             INTEGER
  Decl    3687
  Set     3695    3708
  Used    3696    3697    3698    3709

J                               Stack                             INTEGER
  Decl    3724
  Set     3732    3745
  Used    3733    3734    3735    3746

J                               Stack                             INTEGER
  Decl    3918
  Set     3925    3942
  Used    3926    3927    3928    3929    3931    3932    3943

J                               Stack                             INTEGER
  Decl    3959
  Set     3966    3983
  Used    3967    3968    3969    3970    3972    3973    3984

J                               Stack                             INTEGER
  Decl    4773
  Set     4780    4797
  Used    4781    4782    4783    4784    4786    4787    4798

J                               Stack                             INTEGER
  Decl    4814
  Set     4822    4835
  Used    4823    4824    4825    4836

J                               Stack                             INTEGER
  Decl    5122
  Set     5129    5146
  Used    5130    5131    5132    5133    5135    5136    5147

J                               Stack                             INTEGER
  Decl    5163
  Set     5171    5184
  Used    5172    5173    5174    5185

J1                              Stack                             INTEGER
  Decl    2747
  Set     2773
  Used    2775    2779    2780    2787

JA                              Stack                             INTEGER
  Decl    2943
  Set     2946    2948
  Used    2950

JA                              Stack                             INTEGER
  Decl    2970
  Set     2985
  Used    2986

JALPHA                          Stack                             INTEGER
  Decl    2942
  Set     2945
  Used    2946

JB                              Stack                             INTEGER
  Decl     830
  Set      885
  Used     886     887     888     890     891     892     893     894     895     896     897     898     905     906     907

JB                              Stack                             INTEGER
  Decl    2943
  Set     2950
  Used    2951    2953    2954

JB                              Stack                             INTEGER
  Decl    2998
  Set     3000
  Used    3001    3002    3003    3004

JB                              Stack                             INTEGER
  Decl    3018
  Set     3020
  Used    3021    3022    3023    3024

JB                              Stack                             INTEGER
  Decl    3037
  Set     3039
  Used    3040    3041    3042    3043

JB                              Stack                             INTEGER
  Decl    3055
  Set     3057
  Used    3058    3059    3060    3061

JB                              Stack                             INTEGER
  Decl    3075
  Set     3077
  Used    3078    3079    3080    3081

JB                              Stack                             INTEGER
  Decl    3093
  Set     3095
  Used    3096    3097    3098    3099

JB                              Stack                             INTEGER
  Decl    3117
  Set     3132    3139
  Used    3133    3140    3141    3142    3143

JB                              Stack                             INTEGER
  Decl    3162
  Set     3172    3179
  Used    3180    3181    3182    3183

JB                              Stack                             INTEGER
  Decl    3350
  Set     3363    3370
  Used    3364    3371    3372    3373    3374

JB                              Stack                             INTEGER
  Decl    3393
  Set     3402    3409
  Used    3410    3411    3412    3413

JB                              Stack                             INTEGER
  Decl    3516
  Set     3529    3536
  Used    3530    3537    3538    3539    3540

JB                              Stack                             INTEGER
  Decl    3559
  Set     3572    3579
  Used    3573    3580    3581    3582    3583

JB                              Stack                             INTEGER
  Decl    3601
  Set     3615    3623
  Used    3616    3624    3625    3626    3627

JB                              Stack                             INTEGER
  Decl    3646
  Set     3660    3668
  Used    3661    3669    3670    3671    3672

JB                              Stack                             INTEGER
  Decl    3689
  Set     3698    3705
  Used    3706    3707    3708    3709

JB                              Stack                             INTEGER
  Decl    3726
  Set     3735    3742
  Used    3743    3744    3745    3746

JB                              Stack                             INTEGER
  Decl    3919
  Set     3932    3939
  Used    3933    3940    3941    3942    3943

JB                              Stack                             INTEGER
  Decl    3960
  Set     3973    3980
  Used    3974    3981    3982    3983    3984

JB                              Stack                             INTEGER
  Decl    4774
  Set     4787    4794
  Used    4788    4795    4796    4797    4798

JB                              Stack                             INTEGER
  Decl    4816
  Set     4825    4832
  Used    4833    4834    4835    4836

JB                              Stack                             INTEGER
  Decl    5123
  Set     5136    5143
  Used    5137    5144    5145    5146    5147

JB                              Stack                             INTEGER
  Decl    5165
  Set     5174    5181
  Used    5182    5183    5184    5185

JBMAX                           Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     885    3000    3020    3039    3057    3077    3095    3139    3179    3370    3409    3536    3579    3623    3668
          3705    3742    3939    3980    4794    4832    5143    5181

JBPERIJ                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    3132    3172    3363    3402    3529    3572    3615    3660    3698    3735    3932    3973    4787    4825    5136
          5174

JC                              Stack                             INTEGER
  Decl    2943
  Set     2951
  Used    2952    2957

JD                              Stack                             INTEGER
  Decl    2943
  Set     2952
  Used    2953    2954

JDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2914    2917
  Set 
  Used    2922    2924

JE                              Stack                             INTEGER
  Decl    2943
  Set     2953
  Used    2954    2955

JHALF                           Stack                             INTEGER
  Decl     830
  Set      873     889
  Used     876     877     879     893

JI                              Stack                             INTEGER
  Decl    1263
  Set     1294    1308    1376    1388
  Used    1295    1296    1310    1311    1377    1378    1389    1390

JJ                              Stack                             INTEGER
  Decl    1406
  Set     1444
  Used    1445

JJ                              Stack                             INTEGER
  Decl    1868
  Set     2008
  Used    2009

JJ                              Stack                             INTEGER
  Decl    2101
  Set     2162
  Used    2163

JK                              Stack                             INTEGER
  Decl    1263
  Set     1307    1374
  Used    1309    1310    1375    1377

JL                              Stack                             INTEGER
  Decl    3161
  Set     3170
  Used

JL                              Stack                             INTEGER
  Decl    3392
  Set     3400
  Used

JL                              Stack                             INTEGER
  Decl    3688
  Set     3696
  Used

JL                              Stack                             INTEGER
  Decl    3725
  Set     3733
  Used

JL                              Stack                             INTEGER
  Decl    4815
  Set     4823
  Used

JL                              Stack                             INTEGER
  Decl    5164
  Set     5172
  Used

JM                              Stack                             INTEGER
  Decl    2970
  Set     2978    2981
  Used    2983

JMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     860     867     872     873     889

JMAXHALF                        Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     442     444     453     464     477     479     489     498     510

JP                              Stack                             INTEGER
  Decl     408
  Set      453     464     489     498     510
  Used     454     456     457     465     466     467     469     490     491     499     501     502     511     512     513
           515

JP                              Stack                             INTEGER
  Decl    1263
  Set     1304
  Used    1308

JP1                             Stack                             INTEGER
  Decl    2629
  Set     2673
  Used    2674

JPERIJB                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     887    3003    3023    3042    3060    3080    3098    3142    3182    3373    3412    3539    3582    3626    3671
          3708    3745    3942    3983    4797    4835    5146    5184

JQ                              Stack                             INTEGER
  Decl    1263
  Set     1370
  Used    1374

JR                              Stack                             INTEGER
  Decl    1263
  Set     1371
  Used    1376

JULDAY                                                            Function, INTEGER, RESULT(JULDAY), Module procedure, PRIVATE
  Decl    2963
  Set 
  Used

JULDAY                          Register                          INTEGER, Function result
  Decl
  Set     2983    2986
  Used

JULIAN                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2934    2938
  Set 
  Used    2944    2945    2946    2948

JULIANDAYINITINTEGRATION        Static offset=64                  INTEGER, PRIVATE, SAVE
  Decl     393
  Set     2906
  Used    2922

JULIANDAYNOW                    Stack                             INTEGER
  Decl    2920
  Set     2922
  Used    2923

JY                              Stack                             INTEGER
  Decl    2970
  Set     2977    2980
  Used    2983    2985

K                               Stack                             INTEGER
  Decl    1263
  Set     1267    1364    1366
  Used    1269    1270    1271    1279    1280    1287    1288    1289    1294    1302    1303    1323    1337    1338    1339
          1346    1349    1367    1368    1369    1370    1381    1382    1383    1388

K                               Stack                             INTEGER
  Decl    1406
  Set     1414    1461
  Used    1470    1530

K                               Stack                             INTEGER
  Decl    1545
  Set     1570
  Used    1571    1575    1576

K                               Stack                             INTEGER
  Decl    1595
  Set     1608    1619    1700
  Used    1701    1702    1703    1704    1706    1713    1714    1716    1727    1729    1730    1731    1732    1735    1740
          1742    1743    1744    1745    1753    1755    1756    1758    1759

K                               Stack                             INTEGER
  Decl    1868
  Set     2015
  Used    2016

K                               Stack                             INTEGER
  Decl    2334
  Set     2428    2446    2451
  Used    2429    2430    2431    2456    2457    2462    2463

K                               Stack                             INTEGER
  Decl    2484
  Set     2578    2596    2601
  Used    2579    2580    2581    2606    2607    2612    2613

K                               Stack                             INTEGER
  Decl    2629
  Set     2645    2653    2669    2676    2691    2708    2712
  Used    2646    2654    2655    2670    2677    2692    2709    2713

K                               Stack                             INTEGER
  Decl    3596
  Set     3610
  Used    3612    3616

K                               Stack                             INTEGER
  Decl    3641
  Set     3655
  Used    3657    3661

K                               Stack                             INTEGER
  Decl    4018
  Set     4332
  Used    4333    4334    4335

K                               Stack                             INTEGER
  Decl    4401
  Set     4715
  Used    4716    4717    4718

KDAY                            Stack                             INTEGER
  Decl    2848
  Set     2862    2865
  Used    2870

KI                              Stack                             INTEGER
  Decl    1263
  Set     1289    1292    1383    1386
  Used    1293    1294    1295    1387    1388    1389

KJ                              Stack                             INTEGER
  Decl    1263
  Set     1339    1346    1348
  Used    1340    1350

KK                              Stack                             INTEGER
  Decl    1263
  Set     1271
  Used    1272    1359

KL                              Stack                             INTEGER
  Decl    2041
  Set     2053
  Used    2054    2058

KL                              Stack                             INTEGER
  Decl    4044
  Set     4322
  Used    4323

KL                              Stack                             INTEGER
  Decl    4427
  Set     4705
  Used    4706

KLASS                           Static offset=0                   INTEGER, DIMENSION(13), SAVE, Initialized
  Decl    4056
  Set 
  Used    4057    4322    4339    4353

KLASS                           Static offset=0                   INTEGER, DIMENSION(13), SAVE, Initialized
  Decl    4439
  Set 
  Used    4440    4705    4722    4736

KMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    3610    3655

KMX                             Stack                             INTEGER
  Decl    4048
  Set     4330    4335
  Used    4339    4353

KMX                             Stack                             INTEGER
  Decl    4431
  Set     4713    4718
  Used    4722    4736

KP1                             Stack                             INTEGER
  Decl    2101
  Set     2105
  Used    2106

L                               Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    1249    1253
  Set     1269    1279
  Used    1287    1368

L                               Stack                             INTEGER
  Decl    1406
  Set     1415    1440
  Used    1423    1439    1444    1445    1447    1452    1463    1465    1477    1485    1489    1522    1531

L                               Stack                             INTEGER
  Decl    1595
  Set     1639
  Used    1640    1641    1643    1649    1652    1674    1685    1716

L                               Stack                             INTEGER
  Decl    2334
  Set     2352
  Used    2354    2367    2372    2373    2382    2383    2384    2386    2387    2400    2436    2437    2438    2439

L                               Stack                             INTEGER
  Decl    2484
  Set     2502
  Used    2504    2517    2522    2523    2532    2533    2534    2536    2537    2550    2586    2587    2588    2589

L                               Stack                             INTEGER
  Decl    2629
  Set     2640    2702
  Used    2643    2645    2650    2653    2658    2662    2665    2674    2676    2686    2705    2708    2712    2718    2720

L1                              Stack                             INTEGER
  Decl    2334
  Set     2382
  Used    2384

L1                              Stack                             INTEGER
  Decl    2484
  Set     2532
  Used    2534

LA                              Stack                             INTEGER
  Decl    2101
  Set     2104
  Used    2106    2108

LATI                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     203     351
  Set      861
  Used     852     868

LEFT                            Stack                             INTEGER
  Decl    1039
  Set     1054
  Used    1063

LEFT                            Stack                             INTEGER
  Decl    1126
  Set     1192
  Used    1211

LEGFUNCS2F                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     217     372
  Set      442     445     454     465     490     499     511
  Used     413     416     546

LEGPOL                                                            Function, REAL(KIND=8), RESULT(LEGPOL), Module procedure
  Decl     169    1028    1031
  Set 
  Used

LEGPOL                          Stack                             REAL(KIND=8), Function result, DIMENSION(<exp>)
  Decl
  Set     1064    1071    1074    1078    1083    1088
  Used    1065    1072    1073    1075    1076

LEGPOLROOTSANDWEIGHTS                                             Subroutine, Module procedure
  Decl     170    1104
  Set 
  Used     790

LINE                            Stack                             CHARACTER(256)
  Decl     755
  Set 
  Used     808     812     814     818     820     822

LINE                            Stack                             CHARACTER(80)
  Decl    5471
  Set 
  Used    5517    5524

LINEARIBJBTOIJ                                                    Generic interface
  Decl     230     265
  Set 
  Used

LINEARIBJBTOIJ_R2D                                                Subroutine, Module procedure, PRIVATE
  Decl    3384
  Set 
  Used

LINEARIJTOIBJB                                                    Generic interface
  Decl     229     269
  Set 
  Used

LINEARIJTOIBJB_R2D                                                Subroutine, Module procedure, PRIVATE
  Decl    3340
  Set 
  Used

LL                              Stack                             INTEGER
  Decl    1595
  Set     1638
  Used    1639

LM2M                            Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     434     488     497     508     532

LNI                             Stack                             INTEGER
  Decl    4033
  Set     4274
  Used    4277    4279    4282    4287

LNI                             Stack                             INTEGER
  Decl    4416
  Set     4657
  Used    4660    4662    4665    4670

LNI                             Stack                             INTEGER
  Decl    4878
  Set     5091
  Used    5092    5096

LNI                             Stack                             INTEGER
  Decl    5227
  Set     5440
  Used    5441    5444

LNO                             Stack                             INTEGER
  Decl    4034
  Set     4275
  Used    4281    4282    4286    4287    4290    4291

LNO                             Stack                             INTEGER
  Decl    4417
  Set     4658
  Used    4664    4665    4669    4670    4673    4674

LNO                             Stack                             INTEGER
  Decl    4879
  Set     5095
  Used    5096    5097

LNO                             Stack                             INTEGER
  Decl    5228
  Set     5443
  Used    5444    5445

LOND                            Stack                             INTEGER
  Decl    4031
  Set     4261
  Used    4271

LOND                            Stack                             INTEGER
  Decl    4414
  Set     4644
  Used    4654

LOND                            Stack                             INTEGER
  Decl    4876
  Set     5083
  Used    5090

LOND                            Stack                             INTEGER
  Decl    5225
  Set     5432
  Used    5439

LONG                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     204     352
  Set      864
  Used     853

LONGIT                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     199     348
  Set      894
  Used     850     896     897

LONRAD                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     202     350
  Set      895
  Used     851

LOW                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1395    1403
  Set     1530
  Used

LOW                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1535    1541
  Set 
  Used    1549    1569

LOW                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1583    1590
  Set 
  Used    1630    1639    1640    1847

LOW                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1857    1862
  Set 
  Used    2009

LOW                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2030    2037
  Set 
  Used    2053

LOW                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2091    2096
  Set 
  Used    2105

LOW                             Stack                             INTEGER
  Decl    2266
  Set 
  Used    2281    2287    2293    2306

M                               Stack                             INTEGER
  Decl     408
  Set      428     434     443     478
  Used     430     436     445     446     448     480     481     483

M                               Stack                             INTEGER
  Decl     526
  Set      532
  Used     534

M                               Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     598     600
  Set 
  Used     603

M                               Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl     613     615
  Set 
  Used     618

M                               Dummy Arg                         REAL(KIND=8), DIMENSION(:, :, :), INTENT(IN)
  Decl     634     636
  Set 
  Used     639

M                               Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     660     662
  Set 
  Used     665

M                               Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(IN)
  Decl     675     677
  Set 
  Used     680

M                               Dummy Arg                         INTEGER, DIMENSION(:, :, :), INTENT(IN)
  Decl     696     698
  Set 
  Used     701

M                               Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    1249    1253
  Set     1270    1280
  Used    1302    1381

M                               Stack                             INTEGER
  Decl    1406
  Set     1452    1470
  Used    1420    1421    1425    1426    1431    1432

M                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1535    1541
  Set 
  Used    1548    1557    1573

M                               Stack                             INTEGER
  Decl    1595
  Set     1674
  Used    1675    1678    1679    1680    1685    1686    1687    1690    1702    1713    1716

M                               Stack                             INTEGER
  Decl    1868
  Set     1882    1902    1929    1963    2010
  Used    1892    2015

M                               Stack                             INTEGER
  Decl    2101
  Set     2108
  Used    2110    2116    2120    2126    2130    2131    2132    2176    2177    2178

M                               Stack                             INTEGER
  Decl    2334
  Set     2359
  Used    2360    2367    2397    2400    2405

M                               Stack                             INTEGER
  Decl    2484
  Set     2509
  Used    2510    2517    2547    2550    2555

MACHEP                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1583    1589
  Set 
  Used    1643    1686    1847

MACHEP                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1857    1864
  Set 
  Used    1905    1977

MASK                            Heap                              LOGICAL, DIMENSION(:), ALLOCATABLE
  Decl    1113
  Set     1169
  Used    1161    1173    1185

MASSCONSRV                      Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     189     339
  Set 
  Used     837

MATZ                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1583    1590
  Set 
  Used    1748    1793    1840

MATZ                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2185    2260
  Set 
  Used    2289    2311

MATZ                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2729    2741
  Set 
  Used    2749    2795

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    2776    2800

MAXDEGREE                       Static offset=20416               INTEGER, PRIVATE, SAVE, Initialized
  Decl     367
  Set      766     926
  Used     783     788     790     791     793     799     800     802     804     811     817     950

MAXDEGREE                       Dummy Arg                         INTEGER, INTENT(IN)
  Decl     984     985
  Set 
  Used     990     991    1000

MAXVAL                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     816    1228

MDIST                           Stack                             INTEGER, DIMENSION(7)
  Decl    4040
  Set     4265    4372
  Used

MDIST                           Stack                             INTEGER, DIMENSION(7)
  Decl    4423
  Set     4648    4755
  Used

MEXTMAP                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     428

MGLOBALP                        Stack                             INTEGER
  Decl     408
  Set      488     497     508
  Used     490     491     499     500     502

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0     626     669     713     889    1735    2010    3815    3893

MINVAL                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     815

MM                              Stack                             INTEGER
  Decl    1595
  Set     1673
  Used    1674

MM                              Stack                             INTEGER
  Decl    2041
  Set     2058
  Used    2059

MM                              Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2934    2939
  Set     2955    2956
  Used    2956    2958

MM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2963    2966
  Set 
  Used    2976    2978    2981    2984

MM                              Stack                             INTEGER
  Decl    4036
  Set     4306    4326    4370
  Used    4370    4372    4373

MM                              Stack                             INTEGER
  Decl    4419
  Set     4689    4709    4753
  Used    4753    4755    4756

MMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     443     452     462     478

MMC                             Stack                             INTEGER
  Decl    2920
  Set 
  Used    2923    2926

MMI                             Stack                             INTEGER
  Decl    2894
  Set     2897
  Used    2902

MML                             Stack                             INTEGER
  Decl    2334
  Set     2400
  Used    2404

MML                             Stack                             INTEGER
  Decl    2484
  Set     2550
  Used    2554

MN                              Stack                             INTEGER
  Decl     408
  Set      427     433
  Used     428     429     430     434     435     436

MN                              Stack                             INTEGER
  Decl     526
  Set      531
  Used     532     533     534

MNEXTMAP                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     442     445     448     454     457     465     467     468     469     470

MNEXTMAX                        Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     427

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     592    1137    1192    2877    2924

MON                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    2815    2845
  Set     2873    2881    2883
  Used    2876    2877    2882

MONL                            Static offset=0                   INTEGER, DIMENSION(12), SAVE, Initialized
  Decl    2852
  Set 
  Used    2876

MP                              Stack                             INTEGER
  Decl     408
  Set      452     462     487     496     507
  Used     454     455     457     465     467     468     469     470     488     490     497     499     502     508     511
           513     514     515     516

MP                              Stack                             INTEGER
  Decl    2041
  Set     2059
  Used    2060    2061    2064    2077

MP                              Stack                             INTEGER
  Decl    2101
  Set     2120
  Used    2125    2142    2163

MP1                             Stack                             INTEGER
  Decl    2041
  Set     2061
  Used

MP2                             Stack                             INTEGER
  Decl    1595
  Set     1690
  Used    1694

MPLON                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3773
  Set     3821
  Used    3822

MPLON                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3852
  Set     3899
  Used    3900

MPLON                           Stack                             INTEGER, DIMENSION(<exp>, 2)
  Decl    4023
  Set     4155    4157    4158    4160    4162    4163    4173    4175    4176    4178    4180    4181    4190    4192    4193
          4195    4197    4198    4213    4214    4216    4217    4219    4221    4222    4231    4233    4234    4236    4237
          4239    4240    4249    4250    4252    4253    4255    4256    4258    4259
  Used    4274    4275

MPLON                           Stack                             INTEGER, DIMENSION(<exp>, 2)
  Decl    4406
  Set     4538    4540    4541    4543    4545    4546    4556    4558    4559    4561    4563    4564    4573    4575    4576
          4578    4580    4581    4596    4597    4599    4600    4602    4604    4605    4614    4616    4617    4619    4620
          4622    4623    4632    4633    4635    4636    4638    4639    4641    4642
  Used    4657    4658

MPLON                           Stack                             INTEGER, DIMENSION(<exp>, 2)
  Decl    4869
  Set     4977    4979    4980    4982    4984    4985    4995    4997    4998    5000    5002    5003    5012    5014    5015
          5017    5019    5020    5035    5036    5038    5039    5041    5043    5044    5053    5055    5056    5058    5059
          5061    5062    5071    5072    5074    5075    5077    5078    5080    5081
  Used    5091    5095

MPLON                           Stack                             INTEGER, DIMENSION(<exp>, 2)
  Decl    5218
  Set     5326    5328    5329    5331    5333    5334    5344    5346    5347    5349    5351    5352    5361    5363    5364
          5366    5368    5369    5384    5385    5387    5388    5390    5392    5393    5402    5404    5405    5407    5408
          5410    5411    5420    5421    5423    5424    5426    5427    5429    5430
  Used    5440    5443

MSGONE                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     818     822

MSGONE                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     818     822

MULTSEARCHSTART                                                   INTEGER, PARAMETER
  Decl    1116
  Set 
  Used    1157

MYFIRSTLAT                      Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    3003    3060    3170    3182    3400    3412    3696    3708    3733    3745    4823    4835    5172    5184

MYFIRSTLON                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    3126    3357    3523    3566    3608    3653    3926    3967    4781    5130

MYID                            Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     792

MYLASTLAT                       Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    3125    3169    3356    3399    3522    3565    3607    3652    3695    3732    3925    3966    4780    4822    5129
          5171

MYLASTLON                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    3127    3358    3524    3567    3609    3654    3927    3968    4782    5131

MYMEXTMAP                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     434     532

MYMMAX                          Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     487     496     507

MYMNEXTMAP                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     490     499     502     511     513     514     515     516

MYMNEXTMAX                      Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     433     531

MYNEXTMAP                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     435     533

N                               Stack                             INTEGER
  Decl     408
  Set      422     429     435
  Used     423     424     430     436

N                               Stack                             INTEGER
  Decl     526
  Set      533
  Used     534

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1249    1252
  Set 
  Used    1253    1266    1267    1268    1273    1274    1275    1289    1291    1292    1304    1306    1322    1331    1333
          1335    1336    1346    1347    1348    1364    1370    1371    1373    1383    1385    1386

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1395    1400
  Set 
  Used    1415    1429    1518

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1535    1541
  Set 
  Used    1542    1543    1566

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1583    1590
  Set 
  Used    1592    1593    1612    1614    1726    1805    1847

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1857    1862
  Set 
  Used    1863    1864    1865    1873    1874    1996    1998    2008    2009

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2030    2037
  Set 
  Used    2038    2039    2046    2047

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2091    2096
  Set 
  Used    2097    2136

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2185    2260
  Set 
  Used    2261    2262    2273    2274    2281    2287    2293    2306    2311

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2321    2327
  Set 
  Used    2329    2344    2350    2352    2359    2389    2428    2444    2449    2460

N                               Dummy Arg                         INTEGER(KIND=8), INTENT(IN)
  Decl    2471    2477
  Set 
  Used    2479    2494    2500    2502    2509    2539    2578    2594    2599    2610

N                               Dummy Arg                         INTEGER(KIND=8), INTENT(IN)
  Decl    2621    2624
  Set 
  Used    2625    2626    2631    2636    2638    2639    2701

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2729    2741
  Set 
  Used    2742    2743    2751    2752    2756    2761    2766    2774    2785    2798    2804    2807

N                               Stack                             INTEGER
  Decl    4037
  Set     4314    4352
  Used    4315    4319    4322    4326    4353    4354    4357

N                               Stack                             INTEGER
  Decl    4420
  Set     4697    4735
  Used    4698    4702    4705    4709    4736    4737    4740

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5461    5464
  Set 
  Used    5465    5506    5509    5516    5521    5543    5551

N                               Stack                             INTEGER
  Decl    5561
  Set     5571
  Used    5572

N1                              Stack                             INTEGER
  Decl     601
  Set      603
  Used     604     607

N1                              Stack                             INTEGER
  Decl     616
  Set      618
  Used     619     624

N1                              Stack                             INTEGER
  Decl     637
  Set      639
  Used     640     649

N1                              Stack                             INTEGER
  Decl     663
  Set      665
  Used     666     669

N1                              Stack                             INTEGER
  Decl     678
  Set      680
  Used     681     686

N1                              Stack                             INTEGER
  Decl     699
  Set      701
  Used     702     711

N2                              Stack                             INTEGER
  Decl     616
  Set      618
  Used     620     626

N2                              Stack                             INTEGER
  Decl     637
  Set      639
  Used     641     651

N2                              Stack                             INTEGER
  Decl     678
  Set      680
  Used     682     688

N2                              Stack                             INTEGER
  Decl     699
  Set      701
  Used     703     713

N3                              Stack                             INTEGER
  Decl     637
  Set      639
  Used     642     646

N3                              Stack                             INTEGER
  Decl     699
  Set      701
  Used     704     708

NA                              Stack                             INTEGER
  Decl    1595
  Set     1632
  Used    1633    1650    1651    1652    1664    1700    1701    1771    1781    1787    1788    1790    1795    1806    1807
          1814    1815    1822    1823    1831    1833

NA                              Stack                             INTEGER
  Decl    1868
  Set     1877
  Used    1884    1888    1892    1894    1929    1934    1935    1936    1938    1939    1940    1942    1948    1953    1954
          1965    1979    1982    1983    1985

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     598     599
  Set 
  Used

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     613     614
  Set 
  Used

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     634     635
  Set 
  Used

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     660     661
  Set 
  Used

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     675     676
  Set 
  Used

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     696     697
  Set 
  Used

NAUXPOLY                        Static offset=128                 INTEGER, PRIVATE, SAVE
  Decl     380
  Set     1000
  Used    1003    1050    1133

NBITS                           Stack                             INTEGER
  Decl    5488
  Set 
  Used    5504    5513    5514    5550

NC                              Stack                             INTEGER
  Decl    4035
  Set     4279
  Used    4282    4287    4290

NC                              Stack                             INTEGER
  Decl    4418
  Set     4662
  Used    4665    4670    4673

NC                              Stack                             INTEGER
  Decl    5489
  Set     5527    5529    5531
  Used    5533

NCAT                                                              INTEGER, PARAMETER
  Decl    4004
  Set 
  Used    4024    4056    4269    4281    4314    4352

NCAT                                                              INTEGER, PARAMETER
  Decl    4387
  Set 
  Used    4407    4439    4652    4664    4697    4735

NCHS                            Stack                             INTEGER
  Decl    5481
  Set     5514
  Used    5522    5533

ND                              Stack                             INTEGER
  Decl    4039
  Set     4295    4341
  Used

ND                              Stack                             INTEGER
  Decl    4422
  Set     4678    4724
  Used

NDIGITSOUT                                                        INTEGER, PARAMETER
  Decl    1120
  Set 
  Used    1145

NDIST                           Stack                             INTEGER, DIMENSION(7)
  Decl    4041
  Set     4266    4373
  Used

NDIST                           Stack                             INTEGER, DIMENSION(7)
  Decl    4424
  Set     4649    4756
  Used

NEARESTIBJBTOIJ                                                   Generic interface
  Decl     231     273
  Set 
  Used

NEARESTIBJBTOIJ_I2D                                               Subroutine, Module procedure, PRIVATE
  Decl    3680
  Set 
  Used

NEARESTIBJBTOIJ_R2D                                               Subroutine, Module procedure, PRIVATE
  Decl    3717
  Set 
  Used

NEARESTIJTOIBJB                                                   Generic interface
  Decl     232     277
  Set 
  Used

NEARESTIJTOIBJB_I2D                                               Subroutine, Module procedure, PRIVATE
  Decl    3506
  Set 
  Used

NEARESTIJTOIBJB_I3D                                               Subroutine, Module procedure, PRIVATE
  Decl    3591
  Set 
  Used

NEARESTIJTOIBJB_R2D                                               Subroutine, Module procedure, PRIVATE
  Decl    3549
  Set 
  Used

NEARESTIJTOIBJB_R3D                                               Subroutine, Module procedure, PRIVATE
  Decl    3636
  Set 
  Used

NEXTMAP                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     429

NEXTMAX                         Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     422     463     509

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     558     605     609     621     628     643     653     667     671     683     690     705     715     763     951
          1093    1174    2315    2373    2523    4282    4287    4665    4670

NK                              Stack                             INTEGER
  Decl    1263
  Set     1266    1268
  Used    1271    1307    1324    1332

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1395    1400
  Set 
  Used    1401

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1535    1541
  Set 
  Used    1542

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1583    1590
  Set 
  Used    1592    1847

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1857    1862
  Set 
  Used    1863    1865

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2030    2037
  Set 
  Used    2038    2039

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2091    2096
  Set 
  Used    2097

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2185    2260
  Set 
  Used    2261    2262    2273    2281    2287    2293    2306    2311

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2321    2326
  Set 
  Used    2329

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2471    2476
  Set 
  Used    2479

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2621    2623
  Set 
  Used    2625    2626

NM                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2729    2741
  Set 
  Used    2742    2743

NN                              Stack                             INTEGER
  Decl    1868
  Set     1873
  Used    1874

NN                              Stack                             INTEGER
  Decl    4038
  Set     4307    4325
  Used    4373

NN                              Stack                             INTEGER
  Decl    4421
  Set     4690    4708
  Used    4756

NN                              Stack                             INTEGER
  Decl    5487
  Set 
  Used    5504    5506    5508

NOBANKCONFLICT                                                    Generic interface
  Decl     210     303
  Set 
  Used

NOBANKCONFLICTS                                                   Function, INTEGER, RESULT(P), Module procedure, PRIVATE
  Decl     580
  Set 
  Used

NOBANKCONFLICTV                                                   Function, INTEGER, RESULT(P), Module procedure, PRIVATE
  Decl     589
  Set 
  Used

NOCONV                          Stack                             LOGICAL
  Decl    1405
  Set     1483    1516
  Used    1528

NORM                            Stack                             REAL(KIND=8)
  Decl    1597
  Set     1607    1616
  Used    1642    1845    1847

NORM                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1857    1864
  Set 
  Used    1905    1977

NOTLAS                          Stack                             LOGICAL
  Decl    1599
  Set     1701
  Used    1706    1728    1741    1754

NP                              Stack                             INTEGER
  Decl     408
  Set      463     509
  Used     465     467     468     469     470     511     513     514     515     516

NPOINTS                         Stack                             INTEGER
  Decl    1115
  Set     1157
  Used    1158    1162    1169

NQ                              Stack                             INTEGER
  Decl    4053
  Set     4345    4366
  Used

NQ                              Stack                             INTEGER
  Decl    4436
  Set     4728    4749
  Used

NS                              Stack                             INTEGER
  Decl    4054
  Set     4296    4362
  Used

NS                              Stack                             INTEGER
  Decl    4437
  Set     4679    4745
  Used

NVALLINE                        Stack                             INTEGER
  Decl    5480
  Set     5513
  Used    5519

NX                              Stack                             INTEGER
  Decl    4043
  Set     4305    4319
  Used    4339    4340    4345

NX                              Stack                             INTEGER
  Decl    4426
  Set     4688    4702
  Used    4722    4723    4728

NXK                             Stack                             INTEGER
  Decl    4055
  Set     4357
  Used    4361    4366

NXK                             Stack                             INTEGER
  Decl    4438
  Set     4740
  Used    4744    4749

OPTIONS                                                           Module
  Decl
  Set 
  Used     138

ORT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2030    2039
  Set     2064
  Used    2071    2077    2080

ORT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2091    2098
  Set     2110    2126    2132    2176
  Used    2127    2130    2131    2143    2149    2164    2170

ORT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2185    2262
  Set 
  Used    2287    2293

ORTHES                                                            Subroutine, Module procedure, PRIVATE
  Decl    2091
  Set 
  Used    2287

ORTRAN                                                            Subroutine, Module procedure, PRIVATE
  Decl    2030
  Set 
  Used    2293

P                               Register                          INTEGER, Function result
  Decl     580     582
  Set      584     586
  Used

P                               Stack                             INTEGER, Function result, DIMENSION(<exp>)
  Decl     589     591
  Set 
  Used     593     595

P                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1678    1682    1703    1709    1717    1727    1729    1740    1742    1753    1755    1757    1776    1797    1800
  Used    1681    1686    1707    1712    1718    1721    1722    1730    1731    1732    1743    1744    1745    1756    1757
          1758    1759    1777    1786    1799    1807    1808    1815    1816    1823    1824    1831    1832

P                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1875
  Used    1890    1913    1936    1949    1975    1976

P                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2384    2397    2423    2447    2452    2461
  Used    2385    2386    2407    2409    2410    2416    2418    2436    2437    2450    2458    2463

P                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2534    2547    2573    2597    2602    2611
  Used    2535    2536    2557    2559    2560    2566    2568    2586    2587    2600    2608    2613

P0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1035
  Set     1056    1065    1072    1075
  Used    1064    1071    1073    1074    1076

P0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1109
  Set     1204    1213    1220    1223
  Used    1212    1219    1221    1222    1224    1226    1229

P1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1036
  Set     1057    1065    1073    1076
  Used    1064    1065    1071    1072    1074    1075    1078

P1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1110
  Set     1205    1213    1221    1224
  Used    1212    1213    1219    1220    1222    1223    1226

PACK                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1182

PAI                             Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     804     809     810     815     816     894

PARALLELISM                                                       Module
  Decl
  Set 
  Used     145

PI                              Stack                             REAL(KIND=8)
  Decl    1118
  Set     1144
  Used    1158

PI                              Stack                             REAL(KIND=8)
  Decl    3232
  Set     3264
  Used    3265    3266

PI                              Stack                             REAL(KIND=8)
  Decl    3454
  Set     3486
  Used    3487    3489

PI                              Stack                             REAL(KIND=8)
  Decl    3766
  Set     3802
  Used    3803    3804

PI                              Stack                             REAL(KIND=8)
  Decl    3845
  Set     3881
  Used    3882    3883

PI                              Stack                             REAL(KIND=8)
  Decl    4010
  Set     4086
  Used    4116    4131    4248

PI                              Stack                             REAL(KIND=8)
  Decl    4393
  Set     4469
  Used    4499    4514    4631

PI                              Stack                             REAL(KIND=8)
  Decl    4857
  Set     4908
  Used    4938    4953    5070

PI                              Stack                             REAL(KIND=8)
  Decl    5206
  Set     5257
  Used    5287    5302    5419

POL                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1108
  Set     1212    1219    1222
  Used    1213    1220    1221    1223    1224

Q                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1679    1683    1704    1710    1721    1777    1798    1801
  Used    1681    1686    1707    1712    1719    1727    1744    1758    1778    1782    1799    1807    1808    1815    1816
          1823    1824

Q                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1876    1913
  Used    1878    1914    1935    1973    1974    1975    1976    1978    1981    1982    1983

R                               Stack                             REAL(KIND=8)
  Decl    1407
  Set     1487    1492
  Used    1497    1498    1500    1505    1513

R                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1676    1680    1684    1705    1706    1711    1722    1799
  Used    1678    1679    1681    1686    1707    1712    1720    1729    1743    1756    1800    1801

R                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1891    1895    1960
  Used    1900    1906    1914    1917    1973

R                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2385    2411    2417
  Used    2386    2412    2413    2418    2419    2420

R                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2535    2561    2567
  Used    2536    2562    2563    2568    2569    2570

R16                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     381     753     811     817    1004    1005    1030    1031    1035    1036    1037    1106    1107    1108    1109
          1110    1111    1112    1117    1118    1122    1158    1163    1191    1193    1226

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     323     324     325     326     327     328     329     330     331     332     333     334     335     336     337
           338     339     340     341     342     343     344     345     346     347     348     349     350     351     352
           353     354     355     356     357     371     372     373     374     423     446     455     481     500     600
           615     636     864     895    1229    1236    1250    1251    1262    1401    1402    1407    1420    1542    1543
          1546    1589    1592    1593    1597    1863    1864    1865    1869    2024    2025    2038    2039    2042    2097
          2098    2099    2102    2261    2262    2263    2267    2329    2330    2332    2479    2480    2482    2625    2626
          2628    2742    2743    2744    2746    2842    2850    2851    2854    2855    2918    2993    2994    3013    3014
          3032    3033    3108    3109    3111    3154    3155    3213    3214    3220    3221    3222    3223    3224    3225
          3226    3227    3228    3229    3230    3231    3232    3233    3234    3235    3256    3257    3265    3266    3324
          3325    3327    3341    3342    3344    3385    3386    3443    3444    3450    3451    3452    3453    3454    3455
          3456    3457    3478    3479    3487    3489    3499    3500    3501    3550    3551    3553    3637    3638    3640
          3718    3719    3765    3766    3767    3768    3769    3770    3771    3772    3794    3795    3803    3804    3838
          3839    3844    3845    3846    3847    3848    3849    3850    3851    3873    3874    3882    3883    3951    3952
          3954    4009    4010    4011    4012    4021    4022    4024    4025    4027    4032    4042    4045    4046    4047
          4049    4050    4051    4078    4079    4116    4131    4385    4386    4392    4393    4394    4395    4404    4405
          4407    4408    4409    4410    4415    4425    4428    4429    4430    4432    4433    4434    4461    4462    4499
          4514    4765    4766    4768    4808    4809    4850    4851    4856    4857    4858    4859    4867    4868    4870
          4871    4872    4877    4900    4901    4938    4953    5114    5115    5117    5157    5158    5199    5200    5205
          5206    5207    5208    5216    5217    5219    5220    5221    5226    5249    5250    5287    5302    5465    5490
          5491    5492    5493

RA                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1950    1954
  Used    1960    1973    1974    1982

RADI                            Stack                             REAL(KIND=8)
  Decl    1407
  Set     1412
  Used    1413    1498    1502    1505    1507

RATIO                           Stack                             REAL(KIND=8)
  Decl    3227
  Set     3256
  Used    3257    3324

RATIO                           Stack                             REAL(KIND=8)
  Decl    3451
  Set     3478
  Used    3479    3499

RATIO                           Stack                             REAL(KIND=8)
  Decl    3765
  Set     3794
  Used    3795

RATIO                           Stack                             REAL(KIND=8)
  Decl    3844
  Set     3873
  Used    3874

RATIO                           Stack                             REAL(KIND=8)
  Decl    4009
  Set     4078
  Used    4079

RATIO                           Stack                             REAL(KIND=8)
  Decl    4392
  Set     4461
  Used    4462

RATIO                           Stack                             REAL(KIND=8)
  Decl    4856
  Set     4900
  Used    4901

RATIO                           Stack                             REAL(KIND=8)
  Decl    5205
  Set     5249
  Used    5250

RCL                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     200     349
  Set      834     893
  Used     833     898     905     907

RCS2                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     201     331
  Set      805
  Used     779     893

READGAUSS                       Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used     788

READGAUSS                       Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used     788

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0     423
           455     500     817     895    1005    1163    1193    1229    1420    3257    3266    3325    3478    3487    3489
          3499    3500    3501    3794    3795    3803    3804    3873    3874    3882    3883    4078    4079    4116    4131
          4461    4462    4499    4514    4900    4901    4938    4953    5249    5250    5287    5302

REDUCEDGRID                     Use assoc                         LOGICAL, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    3123    3167    3354    3397    3520    3563    3605    3650    3693    3730    3923    3964    4778    4820    5127
          5169

RESET_EPSLON_TO_LOCAL                                             Subroutine, Module procedure
  Decl     215     525
  Set 
  Used     475

RG                                                                Subroutine, Module procedure
  Decl     219    2185
  Set 
  Used

ROOTPRECISION                   Stack                             REAL(KIND=8)
  Decl    1122
  Set     1145
  Used    1193    1228

S                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     580     581
  Set 
  Used     583     584     586

S                               Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     589     590
  Set 
  Used     591     593     595

S                               Stack                             REAL(KIND=8)
  Decl    1407
  Set     1500
  Used    1513

S                               Stack                             REAL(KIND=8)
  Decl    1546
  Set     1552    1574
  Used    1558    1576

S                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1641    1642    1664    1677    1681    1712    1796
  Used    1642    1643    1665    1667    1678    1679    1682    1683    1684    1714    1717    1718    1719    1720    1797
          1798

S                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1900    1961
  Used    1914    1919    1974

S                               Stack                             REAL(KIND=8)
  Decl    2332
  Set     2399    2413    2419
  Used    2412    2414    2418    2423    2424    2430    2431    2436

S                               Stack                             REAL(KIND=8)
  Decl    2482
  Set     2549    2563    2569
  Used    2562    2564    2568    2573    2574    2580    2581    2586

SA                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1951    1955
  Used    1961    1973    1974    1983

SCAL                            Dummy Arg                         REAL(KIND=8), DIMENSION(1:*), INTENT(OUT)
  Decl    1395    1402
  Set     1420    1478    1515
  Used

SCAL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1535    1543
  Set 
  Used    1552    1570

SCAL                            Stack                             REAL(KIND=8)
  Decl    2102
  Set     2111    2116
  Used    2119    2126    2176    2177

SCAL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2185    2262
  Set 
  Used    2281    2306

SCAL                            Stack                             REAL(KIND=8)
  Decl    2628
  Set     2642    2646
  Used    2649    2654    2660

SCALE                           Stack                             REAL(KIND=8)
  Decl    1118
  Set     1191
  Used    1229

SCFCT                           Stack                             REAL(KIND=8)
  Decl    5493
  Set     5550
  Used    5552    5553

SEAMASKIBJBTOIJ                                                   Generic interface
  Decl     234     283
  Set 
  Used

SEAMASKIBJBTOIJ_R2D                                               Subroutine, Module procedure, PRIVATE
  Decl    4807
  Set 
  Used

SEAMASKIJTOIBJB                                                   Generic interface
  Decl     235     287
  Set 
  Used

SEAMASKIJTOIBJB_R2D                                               Subroutine, Module procedure, PRIVATE
  Decl    4764
  Set 
  Used

SIGN                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1786    2386    2536    2659    5552

SIN                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     875     896

SINGAUSSCOLAT                   Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     176     324
  Set      797
  Used     447     482     772     798     935

SINJM                           Stack                             REAL, DIMENSION(0:<exp>)
  Decl     831
  Set      866     868
  Used     878

SINLAT                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     196     345
  Set      891
  Used     843

SINLATJ                         Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     194     343
  Set      874     876
  Used     841     891

SINLON                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     198     347
  Set      896
  Used     845

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     680

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     591    1035    1037     603     665     618     680

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     591     680    1035    1036    1037     603     665

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     591    1035    1037     603     665     618     680

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     618     639     701

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     701

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     680

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1031    1035    1036    1037

SIZE                                                              Generic interface
  Decl
  Set 
  Used     591

SIZES                                                             Module
  Decl
  Set 
  Used      97

SPLINEIBJBTOIJ                                                    Generic interface
  Decl     228     257
  Set 
  Used

SPLINEIBJBTOIJ_R2D                                                Subroutine, Module procedure, PRIVATE
  Decl    3153
  Set 
  Used

SPLINEIJTOIBJB                                                    Generic interface
  Decl     227     261
  Set 
  Used

SPLINEIJTOIBJB_R2D                                                Subroutine, Module procedure, PRIVATE
  Decl    3107
  Set 
  Used

SQRT                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0     436     446     477     500     907    1778    1799    2130    2385
          2411    2417    2535    2561    2567    2659    2799

SQUARE                          Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     373
  Set      423
  Used     420     424     430     436     534     547

STEP                            Stack                             REAL(KIND=8)
  Decl    1117
  Set     1158
  Used    1163

SUM                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     821

T                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1626    1658
  Used    1768    1779    1781

T                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1904    1905    1914
  Used    1906    1915    1917    1919

TIMESTAMP                                                         Subroutine, Module procedure
  Decl     224    2914
  Set 
  Used

TMSTMP2                                                           Subroutine, Module procedure
  Decl     222    2815
  Set 
  Used

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2815    2842
  Set 
  Used    2859

TOL                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1583    1589
  Set 
  Used    1615    1757

TOLH                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2030    2038
  Set 
  Used    2081

TOLH                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2091    2099
  Set 
  Used    2150    2171    2178

TOLH                            Stack                             REAL(KIND=8)
  Decl    2267
  Set     2269
  Used    2287    2293

TOLW                            Stack                             REAL(KIND=8)
  Decl    2267
  Set     2270
  Used    2311

TOLW                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2729    2744
  Set 
  Used    2805    2806

TOLZ                            Stack                             REAL(KIND=8)
  Decl    2267
  Set     2271
  Used    2311

TOLZ                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2729    2744
  Set 
  Used    2808

TOTAL_MASS                      Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     188     338
  Set 
  Used     836

TOTMAS                          Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     192     341
  Set 
  Used     839

TQL2                                                              Generic interface
  Decl     220     243
  Set 
  Used

TQL2_I                                                            Subroutine, Module procedure, PRIVATE
  Decl    2321
  Set 
  Used

TQL2_I8                                                           Subroutine, Module procedure, PRIVATE
  Decl    2471
  Set 
  Used

TRED2                                                             Subroutine, Module procedure
  Decl     221    2621
  Set 
  Used

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0     610     623     630     645     655     672     684     685     691
           692     706     707     716     717     763     951

TWOMG                           Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     906

TYPE                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    5461    5466
  Set 
  Used    5542    5549

UNDEF                           Static offset=448                 INTEGER, SAVE, Initialized
  Decl    4026
  Set 
  Used    4277    4300    4305

UNDEF                           Static offset=448                 REAL(KIND=8), SAVE, Initialized
  Decl    4409
  Set 
  Used    4660    4683    4688

UNDEF                           Static offset=0                   REAL(KIND=8), SAVE, Initialized
  Decl    4871
  Set 
  Used    5103

UNDEF                           Static offset=0                   REAL(KIND=8), SAVE, Initialized
  Decl    5220
  Set 
  Used    5441    5451

UTILS                                                             Module
  Decl       6
  Set 
  Used

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    2992    2993
  Set 
  Used    3004

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    3012    3013
  Set 
  Used    3024

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    3031    3032
  Set 
  Used    3043

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(IN)
  Decl    3049    3050
  Set 
  Used    3061

VAR_IN                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    3069    3070
  Set 
  Used    3081

VAR_IN                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    3087    3088
  Set 
  Used    3099

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    2992    2994
  Set     3004
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    3012    3014
  Set     3024
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    3031    3033
  Set     3043
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(OUT)
  Decl    3049    3051
  Set     3061
  Used

VAR_OUT                         Dummy Arg                         INTEGER(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    3069    3071
  Set     3081
  Used

VAR_OUT                         Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    3087    3089
  Set     3099
  Used

VAUX                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     208     356
  Set 
  Used     857

VC                              Stack                             CHARACTER(1), DIMENSION(0:63)
  Decl    5470
  Set     5494
  Used    5495

VC                              Dummy Arg                         CHARACTER(1), DIMENSION(1:*), INTENT(OUT)
  Decl    5558    5559
  Set     5572
  Used

VCSCR                           Static offset=0                   CHARACTER(1), DIMENSION(0:63), SAVE, Initialized
  Decl    5560
  Set 
  Used    5563    5572

VFINIT                                                            Subroutine, Module procedure, PRIVATE
  Decl    5558
  Set 
  Used    5495

VFIREC                                                            Subroutine, Module procedure
  Decl     241    5461
  Set 
  Used

VMAX                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     207     355
  Set 
  Used     856

VMAXVERT                        Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     209     357
  Set 
  Used     858

W                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1651    1667
  Used    1678    1777    1789

W                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1890    1949
  Used    1899    1904    1905    1917    1959    1978    1982    1983

WI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1583    1593
  Set     1622    1770    1790    1791    1833    1834
  Used    1847

WI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1857    1864
  Set 
  Used    1876    1898    1903    1913    1958    1964    1975

WI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2185    2262
  Set 
  Used    2311

WI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2729    2742
  Set     2806
  Used    2758    2770    2799    2806

WLN                             Stack                             REAL(KIND=8)
  Decl    4032
  Set     4273
  Used    4290    4291

WLN                             Stack                             REAL(KIND=8)
  Decl    4415
  Set     4656
  Used    4673    4674

WLN                             Stack                             REAL(KIND=8)
  Decl    4877
  Set     5094
  Used    5096    5097

WLN                             Stack                             REAL(KIND=8)
  Decl    5226
  Set     5442
  Used    5444    5445

WORK                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    4024
  Set     4269    4290
  Used    4315    4326    4354

WORK                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    4407
  Set     4652    4673
  Used    4698    4709    4737

WORK                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4870
  Set     5088    5097
  Used    5102    5105

WORK                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5219
  Set     5437    5445
  Used    5450    5453

WR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1583    1593
  Set     1621    1769    1787    1788    1789    1831    1832
  Used    1847

WR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1857    1864
  Set 
  Used    1875    1913    1975    1976

WR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2185    2262
  Set 
  Used    2311

WR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2729    2742
  Set     2805
  Used    2799    2805

WRITEGAUSS                      Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used     793

WRITEGAUSS                      Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used     793

WRK2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4025
  Set     4268    4291
  Used    4302    4315    4354

WRK2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4408
  Set     4651    4674
  Used    4685    4698    4737

WTLON                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4022
  Set     4154    4172    4189    4212    4230    4248
  Used    4273

WTLON                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4405
  Set     4537    4555    4572    4595    4613    4631
  Used    4656

WTLON                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4868
  Set     4976    4994    5011    5034    5052    5070
  Used    5094

WTLON                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5217
  Set     5325    5343    5360    5383    5401    5419
  Used    5442

X                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1037
  Set     1055
  Used    1057    1064    1071    1072    1073    1074    1075    1076

X                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1111
  Set     1190    1227
  Used    1205    1212    1219    1220    1221    1222    1223    1224    1226    1228    1229    1236

X                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1648    1665    1707    1718    1780    1795
  Used    1658    1661    1666    1676    1708    1709    1710    1711    1714    1732    1740    1753    1768    1776    1779
          1787    1789    1796    1797    1831    1832

X                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1911    1971
  Used    1914    1916    1917    1973    1974    1978    1981    1982    1983

XC                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1112
  Set     1226
  Used    1227    1228

XSEARCH                         Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE
  Decl    1107
  Set     1163
  Used    1159    1183

Y                               Stack                             REAL(KIND=8)
  Decl    1597
  Set     1650    1666    1719
  Used    1677    1731    1740    1753    1776    1781

Y                               Stack                             REAL(KIND=8)
  Decl    1869
  Set     1912    1972
  Used    1919    1978

YRL                                                               REAL(KIND=8), PARAMETER
  Decl    2854
  Set 
  Used    2877

YYYYC                           Stack                             INTEGER
  Decl    2920
  Set 
  Used    2923    2926

YYYYI                           Stack                             INTEGER
  Decl    2894
  Set     2896
  Used    2902

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1535    1542
  Set     1558    1575    1576
  Used    1574

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1583    1592
  Set     1756    1758    1759    1823    1824
  Used    1753    1755    1822    1847

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1857    1865
  Set     1999    2019
  Used    2016

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2030    2039
  Set     2048    2050    2080    2081
  Used    2071    2081

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2185    2262
  Set 
  Used    2293    2306    2311

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2321    2329
  Set     2430    2431    2462    2463
  Used    2429    2461

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2471    2479
  Set     2580    2581    2612    2613
  Used    2579    2611

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2621    2626
  Set     2633    2654    2662    2666    2692    2713    2717    2721    2722
  Used    2646    2650    2655    2658    2670    2677    2681    2687    2709    2716

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2729    2742
  Set     2767    2786    2787    2808
  Used    2753    2808

ZD                                                                Function, REAL(KIND=8), RESULT(ZD), Internal procedure
  Decl    2023    2025
  Set 
  Used

ZD                              Register                          REAL(KIND=8), Function result
  Decl
  Set     2027
  Used

ZNORMA                                                            Subroutine, Module procedure, PRIVATE
  Decl    2729
  Set 
  Used    2311

ZZ                              Stack                             REAL(KIND=8)
  Decl    1597
  Set     1675    1720    1778    1786    1806    1814    1822
  Used    1676    1677    1679    1687    1730    1742    1755    1787    1789    1796    1798    1807    1808    1815    1816
          1823    1824    1833    1834

ZZ                              Stack                             REAL(KIND=8)
  Decl    1869
  Set     1899    1959    2013    2016
  Used    1914    1916    1919    1973    1974    1978    1981    2019

ZZ                              Stack                             REAL(KIND=8)
  Decl    2746
  Set     2760    2762    2772    2776    2799
  Used    2763    2777    2800


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 809, file Utils.f90)
                   VFINIT in UTILS (Line 810, file Utils.f90)
                   VFINIT in UTILS (Line 815, file Utils.f90)
                   VFINIT in UTILS (Line 816, file Utils.f90)
                   VFINIT in UTILS (Line 1228, file Utils.f90)
                   VFINIT in UTILS (Line 1277, file Utils.f90)
                   VFINIT in UTILS (Line 1277, file Utils.f90)
                   VFINIT in UTILS (Line 1491, file Utils.f90)
                   VFINIT in UTILS (Line 1492, file Utils.f90)
                   VFINIT in UTILS (Line 1615, file Utils.f90)
                   VFINIT in UTILS (Line 1616, file Utils.f90)
                   VFINIT in UTILS (Line 1641, file Utils.f90)
                   VFINIT in UTILS (Line 1641, file Utils.f90)
                   VFINIT in UTILS (Line 1643, file Utils.f90)
                   VFINIT in UTILS (Line 1664, file Utils.f90)
                   VFINIT in UTILS (Line 1664, file Utils.f90)
                   VFINIT in UTILS (Line 1681, file Utils.f90)
                   VFINIT in UTILS (Line 1681, file Utils.f90)
                   VFINIT in UTILS (Line 1681, file Utils.f90)
                   VFINIT in UTILS (Line 1686, file Utils.f90)
                   VFINIT in UTILS (Line 1686, file Utils.f90)
                   VFINIT in UTILS (Line 1686, file Utils.f90)
                   VFINIT in UTILS (Line 1686, file Utils.f90)
                   VFINIT in UTILS (Line 1687, file Utils.f90)
                   VFINIT in UTILS (Line 1687, file Utils.f90)
                   VFINIT in UTILS (Line 1687, file Utils.f90)
                   VFINIT in UTILS (Line 1707, file Utils.f90)
                   VFINIT in UTILS (Line 1707, file Utils.f90)
                   VFINIT in UTILS (Line 1707, file Utils.f90)
                   VFINIT in UTILS (Line 1757, file Utils.f90)
                   VFINIT in UTILS (Line 1778, file Utils.f90)
                   VFINIT in UTILS (Line 1796, file Utils.f90)
                   VFINIT in UTILS (Line 1796, file Utils.f90)
                   VFINIT in UTILS (Line 1916, file Utils.f90)
                   VFINIT in UTILS (Line 1916, file Utils.f90)
                   VFINIT in UTILS (Line 1934, file Utils.f90)
                   VFINIT in UTILS (Line 1934, file Utils.f90)
                   VFINIT in UTILS (Line 1978, file Utils.f90)
                   VFINIT in UTILS (Line 1978, file Utils.f90)
                   VFINIT in UTILS (Line 1978, file Utils.f90)
                   VFINIT in UTILS (Line 1978, file Utils.f90)
                   VFINIT in UTILS (Line 1978, file Utils.f90)
                   VFINIT in UTILS (Line 1981, file Utils.f90)
                   VFINIT in UTILS (Line 1981, file Utils.f90)
                   VFINIT in UTILS (Line 1981, file Utils.f90)
                   VFINIT in UTILS (Line 2081, file Utils.f90)
                   VFINIT in UTILS (Line 2116, file Utils.f90)
                   VFINIT in UTILS (Line 2150, file Utils.f90)
                   VFINIT in UTILS (Line 2171, file Utils.f90)
                   VFINIT in UTILS (Line 2178, file Utils.f90)
                   VFINIT in UTILS (Line 2354, file Utils.f90)
                   VFINIT in UTILS (Line 2354, file Utils.f90)
                   VFINIT in UTILS (Line 2360, file Utils.f90)
                   VFINIT in UTILS (Line 2409, file Utils.f90)
                   VFINIT in UTILS (Line 2409, file Utils.f90)
                   VFINIT in UTILS (Line 2438, file Utils.f90)
                   VFINIT in UTILS (Line 2504, file Utils.f90)
                   VFINIT in UTILS (Line 2504, file Utils.f90)
                   VFINIT in UTILS (Line 2510, file Utils.f90)
                   VFINIT in UTILS (Line 2559, file Utils.f90)
                   VFINIT in UTILS (Line 2559, file Utils.f90)
                   VFINIT in UTILS (Line 2588, file Utils.f90)
                   VFINIT in UTILS (Line 2646, file Utils.f90)
                   VFINIT in UTILS (Line 2762, file Utils.f90)
                   VFINIT in UTILS (Line 2763, file Utils.f90)
                   VFINIT in UTILS (Line 2779, file Utils.f90)
                   VFINIT in UTILS (Line 2779, file Utils.f90)
                   VFINIT in UTILS (Line 2805, file Utils.f90)
                   VFINIT in UTILS (Line 2806, file Utils.f90)
                   VFINIT in UTILS (Line 2808, file Utils.f90)
                   VFINIT in UTILS (Line 3815, file Utils.f90)
                   VFINIT in UTILS (Line 3820, file Utils.f90)
                   VFINIT in UTILS (Line 3893, file Utils.f90)
                   VFINIT in UTILS (Line 3898, file Utils.f90)
                   VFINIT in UTILS (Line 5553, file Utils.f90)

Name  Messages
----  --------
ACOS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 796, file Utils.f90)

Name  Messages
----  --------
ADJUSTL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 606, file Utils.f90)
                   VFINIT in UTILS (Line 606, file Utils.f90)
                   VFINIT in UTILS (Line 610, file Utils.f90)
                   VFINIT in UTILS (Line 610, file Utils.f90)
                   VFINIT in UTILS (Line 622, file Utils.f90)
                   VFINIT in UTILS (Line 622, file Utils.f90)
                   VFINIT in UTILS (Line 623, file Utils.f90)
                   VFINIT in UTILS (Line 629, file Utils.f90)
                   VFINIT in UTILS (Line 629, file Utils.f90)
                   VFINIT in UTILS (Line 630, file Utils.f90)
                   VFINIT in UTILS (Line 644, file Utils.f90)
                   VFINIT in UTILS (Line 644, file Utils.f90)
                   VFINIT in UTILS (Line 645, file Utils.f90)
                   VFINIT in UTILS (Line 645, file Utils.f90)
                   VFINIT in UTILS (Line 654, file Utils.f90)
                   VFINIT in UTILS (Line 654, file Utils.f90)
                   VFINIT in UTILS (Line 655, file Utils.f90)
                   VFINIT in UTILS (Line 655, file Utils.f90)
                   VFINIT in UTILS (Line 668, file Utils.f90)
                   VFINIT in UTILS (Line 668, file Utils.f90)
                   VFINIT in UTILS (Line 672, file Utils.f90)
                   VFINIT in UTILS (Line 672, file Utils.f90)
                   VFINIT in UTILS (Line 684, file Utils.f90)
                   VFINIT in UTILS (Line 684, file Utils.f90)
                   VFINIT in UTILS (Line 685, file Utils.f90)
                   VFINIT in UTILS (Line 691, file Utils.f90)
                   VFINIT in UTILS (Line 691, file Utils.f90)
                   VFINIT in UTILS (Line 692, file Utils.f90)
                   VFINIT in UTILS (Line 706, file Utils.f90)
                   VFINIT in UTILS (Line 706, file Utils.f90)
                   VFINIT in UTILS (Line 707, file Utils.f90)
                   VFINIT in UTILS (Line 707, file Utils.f90)
                   VFINIT in UTILS (Line 716, file Utils.f90)
                   VFINIT in UTILS (Line 716, file Utils.f90)
                   VFINIT in UTILS (Line 717, file Utils.f90)
                   VFINIT in UTILS (Line 717, file Utils.f90)
                   VFINIT in UTILS (Line 763, file Utils.f90)
                   VFINIT in UTILS (Line 951, file Utils.f90)

Name  Messages
----  --------
ATAN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 1144, file Utils.f90)
                   VFINIT in UTILS (Line 1193, file Utils.f90)
                   VFINIT in UTILS (Line 3264, file Utils.f90)
                   VFINIT in UTILS (Line 3486, file Utils.f90)
                   VFINIT in UTILS (Line 3802, file Utils.f90)
                   VFINIT in UTILS (Line 3881, file Utils.f90)
                   VFINIT in UTILS (Line 4086, file Utils.f90)
                   VFINIT in UTILS (Line 4469, file Utils.f90)
                   VFINIT in UTILS (Line 4908, file Utils.f90)
                   VFINIT in UTILS (Line 5257, file Utils.f90)

Name  Messages
----  --------
AVEBOXIBJBTOIJ_R2D in UTILS
      Defined as:  Subroutine (line 5156, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
AVEBOXIJTOIBJB_R2D in UTILS
      Defined as:  Subroutine (line 5113, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
BALANC in UTILS
      Defined as:  Subroutine (line 1395, file Utils.f90)

      Interface:   None

      Called By:   BALANC in UTILS (Line 2281, file Utils.f90)

      Calls:       BALANC in UTILS (Line 2281, file Utils.f90)

Name  Messages
----  --------
BALBAK in UTILS
      Defined as:  Subroutine (line 1535, file Utils.f90)

      Interface:   None

      Called By:   BALBAK in UTILS (Line 2306, file Utils.f90)

      Calls:       BALBAK in UTILS (Line 2306, file Utils.f90)

Name  Messages
----  --------
CALDAT in UTILS
      Defined as:  Subroutine (line 2934, file Utils.f90)

      Interface:   None

      Called By:   CALDAT in UTILS (Line 2923, file Utils.f90)

      Calls:       CALDAT in UTILS (Line 2923, file Utils.f90)

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     UTILS

Name  Messages
----  --------
COS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 868, file Utils.f90)
                   VFINIT in UTILS (Line 874, file Utils.f90)
                   VFINIT in UTILS (Line 897, file Utils.f90)
                   VFINIT in UTILS (Line 905, file Utils.f90)
                   VFINIT in UTILS (Line 906, file Utils.f90)
                   VFINIT in UTILS (Line 1055, file Utils.f90)
                   VFINIT in UTILS (Line 1088, file Utils.f90)
                   VFINIT in UTILS (Line 1190, file Utils.f90)

Name  Messages
----  --------
COUNT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 1173, file Utils.f90)
                   VFINIT in UTILS (Line 1175, file Utils.f90)

Name  Messages
----  --------
CREATEASSOCLEGFUNC in UTILS
      Defined as:  Subroutine (line 212, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CREATEGAUSSQUAD in UTILS
      Defined as:  Subroutine (line 172, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CREATEGRIDVALUES in UTILS
      Defined as:  Subroutine (line 171, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CREATELEGPOL in UTILS
      Defined as:  Subroutine (line 167, file Utils.f90)

      Interface:   None

      Called By:   CREATELEGPOL in UTILS (Line 783, file Utils.f90)

      Calls:       CREATELEGPOL in UTILS (Line 783, file Utils.f90)

Name  Messages
----  --------
CYCLICAVEBOX_R in UTILS
      Defined as:  Subroutine (line 5193, file Utils.f90)

      Interface:   None

      Called By:   CYCLICAVEBOX_R in UTILS (Line 5132, file Utils.f90)

      Calls:       CYCLICAVEBOX_R in UTILS (Line 5132, file Utils.f90)

Name  Messages
----  --------
CYCLICCUBICSPLINE in UTILS
      Defined as:  Subroutine (line 3208, file Utils.f90)

      Interface:   None

      Called By:   CYCLICCUBICSPLINE in UTILS (Line 3128, file Utils.f90)

      Calls:       CYCLICCUBICSPLINE in UTILS (Line 3128, file Utils.f90)

Name  Messages
----  --------
CYCLICFREQBOX_I in UTILS
      Defined as:  Subroutine (line 3996, file Utils.f90)

      Interface:   None

      Called By:   CYCLICFREQBOX_I in UTILS (Line 3928, file Utils.f90)

      Calls:       CYCLICFREQBOX_I in UTILS (Line 3928, file Utils.f90)

Name  Messages
----  --------
CYCLICFREQBOX_R in UTILS
      Defined as:  Subroutine (line 4379, file Utils.f90)

      Interface:   None

      Called By:   CYCLICFREQBOX_R in UTILS (Line 3969, file Utils.f90)

      Calls:       CYCLICFREQBOX_R in UTILS (Line 3969, file Utils.f90)

Name  Messages
----  --------
CYCLICLINEAR in UTILS
      Defined as:  Subroutine (line 239, file Utils.f90)

      Interface:   None

      Called By:   CYCLICLINEAR in UTILS (Line 3359, file Utils.f90)

      Calls:       CYCLICLINEAR in UTILS (Line 3359, file Utils.f90)

Name  Messages
----  --------
CYCLICNEAREST_I in UTILS
      Defined as:  Subroutine (line 3753, file Utils.f90)

      Interface:   None

      Called By:   CYCLICNEAREST_I in UTILS (Line 3525, file Utils.f90)
                   CYCLICNEAREST_I in UTILS (Line 3611, file Utils.f90)

      Calls:       CYCLICNEAREST_I in UTILS (Line 3525, file Utils.f90)
                   CYCLICNEAREST_I in UTILS (Line 3611, file Utils.f90)

Name  Messages
----  --------
CYCLICNEAREST_R in UTILS
      Defined as:  Subroutine (line 238, file Utils.f90)

      Interface:   None

      Called By:   CYCLICNEAREST_R in UTILS (Line 3568, file Utils.f90)
                   CYCLICNEAREST_R in UTILS (Line 3656, file Utils.f90)

      Calls:       CYCLICNEAREST_R in UTILS (Line 3568, file Utils.f90)
                   CYCLICNEAREST_R in UTILS (Line 3656, file Utils.f90)

Name  Messages
----  --------
CYCLICSEAMASK_R in UTILS
      Defined as:  Subroutine (line 4844, file Utils.f90)

      Interface:   None

      Called By:   CYCLICSEAMASK_R in UTILS (Line 4783, file Utils.f90)

      Calls:       CYCLICSEAMASK_R in UTILS (Line 4783, file Utils.f90)

Name  Messages
----  --------
DBLE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 4125, file Utils.f90)
                   VFINIT in UTILS (Line 4141, file Utils.f90)
                   VFINIT in UTILS (Line 4508, file Utils.f90)
                   VFINIT in UTILS (Line 4524, file Utils.f90)
                   VFINIT in UTILS (Line 4947, file Utils.f90)
                   VFINIT in UTILS (Line 5296, file Utils.f90)

Name  Messages
----  --------
DESTROYASSOCLEGFUNC in UTILS
      Defined as:  Subroutine (line 213, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DESTROYGAUSSQUAD in UTILS
      Defined as:  Subroutine (line 173, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DESTROYLEGPOL in UTILS
      Defined as:  Subroutine (line 168, file Utils.f90)

      Interface:   None

      Called By:   DESTROYLEGPOL in UTILS (Line 930, file Utils.f90)

      Calls:       DESTROYLEGPOL in UTILS (Line 930, file Utils.f90)

Name  Messages
----  --------
DUMPASSOCLEGFUNC in UTILS
      Defined as:  Subroutine (line 214, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DUMPGAUSSQUAD in UTILS
      Defined as:  Subroutine (line 174, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DUMPMATRIXINTEGER1D in UTILS
      Defined as:  Subroutine (line 660, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DUMPMATRIXINTEGER2D in UTILS
      Defined as:  Subroutine (line 675, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DUMPMATRIXINTEGER3D in UTILS
      Defined as:  Subroutine (line 696, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
DUMPMATRIXREAL1D in UTILS
      Defined as:  Subroutine (line 598, file Utils.f90)

      Interface:   None

      Called By:   DUMPMATRIXREAL1D in UTILS (Line 559, file Utils.f90)
                   DUMPMATRIXREAL1D in UTILS (Line 952, file Utils.f90)
                   DUMPMATRIXREAL1D in UTILS (Line 953, file Utils.f90)

      Calls:       DUMPMATRIXREAL1D in UTILS (Line 559, file Utils.f90)
                   DUMPMATRIXREAL1D in UTILS (Line 952, file Utils.f90)
                   DUMPMATRIXREAL1D in UTILS (Line 953, file Utils.f90)

Name  Messages
----  --------
DUMPMATRIXREAL2D in UTILS
      Defined as:  Subroutine (line 613, file Utils.f90)

      Interface:   None

      Called By:   DUMPMATRIXREAL2D in UTILS (Line 560, file Utils.f90)

      Calls:       DUMPMATRIXREAL2D in UTILS (Line 560, file Utils.f90)

Name  Messages
----  --------
DUMPMATRIXREAL3D in UTILS
      Defined as:  Subroutine (line 634, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
EPSILON(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 1145, file Utils.f90)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FATALERROR in PARALLELISM
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FREQBOXIJTOIBJB_I2D in UTILS
      Defined as:  Subroutine (line 3909, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FREQBOXIJTOIBJB_R2D in UTILS
      Defined as:  Subroutine (line 3950, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     UTILS

Name  Messages
----  --------
HQR2 in UTILS
      Defined as:  Subroutine (line 1583, file Utils.f90)

      Interface:   None

      Called By:   HQR2 in UTILS (Line 2299, file Utils.f90)

      Calls:       HQR2 in UTILS (Line 2299, file Utils.f90)

Name  Messages
----  --------
HQR3 in UTILS
      Defined as:  Subroutine (line 1857, file Utils.f90)

      Interface:   None

      Called By:   HQR3 in UTILS (Line 1847, file Utils.f90)

      Calls:       HQR3 in UTILS (Line 1847, file Utils.f90)

Name  Messages
----  --------
IBJBTOIJ_I in UTILS
      Defined as:  Subroutine (line 3049, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IBJBTOIJ_R in UTILS
      Defined as:  Subroutine (line 2992, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICHAR(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 5497, file Utils.f90)
                   VFINIT in UTILS (Line 5498, file Utils.f90)
                   VFINIT in UTILS (Line 5499, file Utils.f90)
                   VFINIT in UTILS (Line 5500, file Utils.f90)
                   VFINIT in UTILS (Line 5501, file Utils.f90)
                   VFINIT in UTILS (Line 5502, file Utils.f90)
                   VFINIT in UTILS (Line 5525, file Utils.f90)

Name  Messages
----  --------
IJTOIBJB3_I in UTILS
      Defined as:  Subroutine (line 3087, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IJTOIBJB3_R in UTILS
      Defined as:  Subroutine (line 3031, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IJTOIBJB_I in UTILS
      Defined as:  Subroutine (line 3069, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IJTOIBJB_R in UTILS
      Defined as:  Subroutine (line 3012, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IMINV in UTILS
      Defined as:  Subroutine (line 218, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INITTIMESTAMP in UTILS
      Defined as:  Subroutine (line 223, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 1570, file Utils.f90)
                   VFINIT in UTILS (Line 2922, file Utils.f90)
                   VFINIT in UTILS (Line 2924, file Utils.f90)
                   VFINIT in UTILS (Line 2945, file Utils.f90)
                   VFINIT in UTILS (Line 2946, file Utils.f90)
                   VFINIT in UTILS (Line 2951, file Utils.f90)
                   VFINIT in UTILS (Line 2952, file Utils.f90)
                   VFINIT in UTILS (Line 2953, file Utils.f90)
                   VFINIT in UTILS (Line 2954, file Utils.f90)
                   VFINIT in UTILS (Line 2983, file Utils.f90)
                   VFINIT in UTILS (Line 2983, file Utils.f90)
                   VFINIT in UTILS (Line 2985, file Utils.f90)
                   VFINIT in UTILS (Line 2986, file Utils.f90)
                   VFINIT in UTILS (Line 3257, file Utils.f90)
                   VFINIT in UTILS (Line 3324, file Utils.f90)
                   VFINIT in UTILS (Line 3479, file Utils.f90)
                   VFINIT in UTILS (Line 3499, file Utils.f90)
                   VFINIT in UTILS (Line 3795, file Utils.f90)
                   VFINIT in UTILS (Line 3874, file Utils.f90)
                   VFINIT in UTILS (Line 4079, file Utils.f90)
                   VFINIT in UTILS (Line 4462, file Utils.f90)
                   VFINIT in UTILS (Line 4662, file Utils.f90)
                   VFINIT in UTILS (Line 4901, file Utils.f90)
                   VFINIT in UTILS (Line 5250, file Utils.f90)

Name  Messages
----  --------
IOLOWLEVEL
      Defined as:  No definitions.

      Used By:     UTILS

Name  Messages
----  --------
IOR(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 5533, file Utils.f90)

Name  Messages
----  --------
ISHFT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 5533, file Utils.f90)

Name  Messages
----  --------
JULDAY in UTILS
      Defined as:  Function (line 2963, file Utils.f90)

      Interface:   None

      Called By:   JULDAY in UTILS (Line 2906, file Utils.f90)

      Calls:       JULDAY in UTILS (Line 2906, file Utils.f90)

Name  Messages
----  --------
LEGPOL in UTILS
      Defined as:  Function (line 169, file Utils.f90)

      Interface:   None

      Called By:   LEGPOL in UTILS (Line 1165, file Utils.f90)

      Calls:       LEGPOL in UTILS (Line 1165, file Utils.f90)

Name  Messages
----  --------
LEGPOLROOTSANDWEIGHTS in UTILS
      Defined as:  Subroutine (line 170, file Utils.f90)

      Interface:   None

      Called By:   LEGPOLROOTSANDWEIGHTS in UTILS (Line 790, file Utils.f90)

      Calls:       LEGPOLROOTSANDWEIGHTS in UTILS (Line 790, file Utils.f90)

Name  Messages
----  --------
LINEARIBJBTOIJ_R2D in UTILS
      Defined as:  Subroutine (line 3384, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
LINEARIJTOIBJB_R2D in UTILS
      Defined as:  Subroutine (line 3340, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 2762, file Utils.f90)
                   VFINIT in UTILS (Line 2776, file Utils.f90)
                   VFINIT in UTILS (Line 2800, file Utils.f90)

Name  Messages
----  --------
MAXVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 810, file Utils.f90)
                   VFINIT in UTILS (Line 816, file Utils.f90)
                   VFINIT in UTILS (Line 1228, file Utils.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 607, file Utils.f90)
                   VFINIT in UTILS (Line 626, file Utils.f90)
                   VFINIT in UTILS (Line 651, file Utils.f90)
                   VFINIT in UTILS (Line 669, file Utils.f90)
                   VFINIT in UTILS (Line 688, file Utils.f90)
                   VFINIT in UTILS (Line 713, file Utils.f90)
                   VFINIT in UTILS (Line 889, file Utils.f90)
                   VFINIT in UTILS (Line 1735, file Utils.f90)
                   VFINIT in UTILS (Line 2010, file Utils.f90)
                   VFINIT in UTILS (Line 3815, file Utils.f90)
                   VFINIT in UTILS (Line 3893, file Utils.f90)

Name  Messages
----  --------
MINVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 809, file Utils.f90)
                   VFINIT in UTILS (Line 815, file Utils.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 583, file Utils.f90)
                   VFINIT in UTILS (Line 592, file Utils.f90)
                   VFINIT in UTILS (Line 1054, file Utils.f90)
                   VFINIT in UTILS (Line 1137, file Utils.f90)
                   VFINIT in UTILS (Line 1192, file Utils.f90)
                   VFINIT in UTILS (Line 2877, file Utils.f90)
                   VFINIT in UTILS (Line 2924, file Utils.f90)

Name  Messages
----  --------
MSGONE in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   UTILS (Line 812, file Utils.f90)
                   UTILS (Line 818, file Utils.f90)
                   UTILS (Line 822, file Utils.f90)

Name  Messages
----  --------
NEARESTIBJBTOIJ_I2D in UTILS
      Defined as:  Subroutine (line 3680, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIBJBTOIJ_R2D in UTILS
      Defined as:  Subroutine (line 3717, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIJTOIBJB_I2D in UTILS
      Defined as:  Subroutine (line 3506, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIJTOIBJB_I3D in UTILS
      Defined as:  Subroutine (line 3591, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIJTOIBJB_R2D in UTILS
      Defined as:  Subroutine (line 3549, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIJTOIBJB_R3D in UTILS
      Defined as:  Subroutine (line 3636, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NOBANKCONFLICTS in UTILS
      Defined as:  Function (line 580, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NOBANKCONFLICTV in UTILS
      Defined as:  Function (line 589, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     UTILS

Name  Messages
----  --------
ORTHES in UTILS
      Defined as:  Subroutine (line 2091, file Utils.f90)

      Interface:   None

      Called By:   ORTHES in UTILS (Line 2287, file Utils.f90)

      Calls:       ORTHES in UTILS (Line 2287, file Utils.f90)

Name  Messages
----  --------
ORTRAN in UTILS
      Defined as:  Subroutine (line 2030, file Utils.f90)

      Interface:   None

      Called By:   ORTRAN in UTILS (Line 2293, file Utils.f90)

      Calls:       ORTRAN in UTILS (Line 2293, file Utils.f90)

Name  Messages
----  --------
PACK(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 1181, file Utils.f90)
                   VFINIT in UTILS (Line 1182, file Utils.f90)

Name  Messages
----  --------
PARALLELISM
      Defined as:  No definitions.

      Used By:     UTILS

Name  Messages
----  --------
READGAUSS in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   UTILS (Line 788, file Utils.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 423, file Utils.f90)
                   VFINIT in UTILS (Line 446, file Utils.f90)
                   VFINIT in UTILS (Line 455, file Utils.f90)
                   VFINIT in UTILS (Line 481, file Utils.f90)
                   VFINIT in UTILS (Line 500, file Utils.f90)
                   VFINIT in UTILS (Line 811, file Utils.f90)
                   VFINIT in UTILS (Line 817, file Utils.f90)
                   VFINIT in UTILS (Line 864, file Utils.f90)
                   VFINIT in UTILS (Line 895, file Utils.f90)
                   VFINIT in UTILS (Line 1004, file Utils.f90)
                   VFINIT in UTILS (Line 1004, file Utils.f90)
                   VFINIT in UTILS (Line 1005, file Utils.f90)
                   VFINIT in UTILS (Line 1005, file Utils.f90)
                   VFINIT in UTILS (Line 1158, file Utils.f90)
                   VFINIT in UTILS (Line 1163, file Utils.f90)
                   VFINIT in UTILS (Line 1191, file Utils.f90)
                   VFINIT in UTILS (Line 1193, file Utils.f90)
                   VFINIT in UTILS (Line 1226, file Utils.f90)
                   VFINIT in UTILS (Line 1229, file Utils.f90)
                   VFINIT in UTILS (Line 1236, file Utils.f90)
                   VFINIT in UTILS (Line 1420, file Utils.f90)
                   VFINIT in UTILS (Line 3256, file Utils.f90)
                   VFINIT in UTILS (Line 3256, file Utils.f90)
                   VFINIT in UTILS (Line 3257, file Utils.f90)
                   VFINIT in UTILS (Line 3265, file Utils.f90)
                   VFINIT in UTILS (Line 3266, file Utils.f90)
                   VFINIT in UTILS (Line 3324, file Utils.f90)
                   VFINIT in UTILS (Line 3325, file Utils.f90)
                   VFINIT in UTILS (Line 3325, file Utils.f90)
                   VFINIT in UTILS (Line 3327, file Utils.f90)
                   VFINIT in UTILS (Line 3327, file Utils.f90)
                   VFINIT in UTILS (Line 3478, file Utils.f90)
                   VFINIT in UTILS (Line 3478, file Utils.f90)
                   VFINIT in UTILS (Line 3479, file Utils.f90)
                   VFINIT in UTILS (Line 3487, file Utils.f90)
                   VFINIT in UTILS (Line 3489, file Utils.f90)
                   VFINIT in UTILS (Line 3499, file Utils.f90)
                   VFINIT in UTILS (Line 3500, file Utils.f90)
                   VFINIT in UTILS (Line 3500, file Utils.f90)
                   VFINIT in UTILS (Line 3501, file Utils.f90)
                   VFINIT in UTILS (Line 3501, file Utils.f90)
                   VFINIT in UTILS (Line 3794, file Utils.f90)
                   VFINIT in UTILS (Line 3794, file Utils.f90)
                   VFINIT in UTILS (Line 3795, file Utils.f90)
                   VFINIT in UTILS (Line 3803, file Utils.f90)
                   VFINIT in UTILS (Line 3804, file Utils.f90)
                   VFINIT in UTILS (Line 3873, file Utils.f90)
                   VFINIT in UTILS (Line 3873, file Utils.f90)
                   VFINIT in UTILS (Line 3874, file Utils.f90)
                   VFINIT in UTILS (Line 3882, file Utils.f90)
                   VFINIT in UTILS (Line 3883, file Utils.f90)
                   VFINIT in UTILS (Line 4078, file Utils.f90)
                   VFINIT in UTILS (Line 4078, file Utils.f90)
                   VFINIT in UTILS (Line 4079, file Utils.f90)
                   VFINIT in UTILS (Line 4116, file Utils.f90)
                   VFINIT in UTILS (Line 4131, file Utils.f90)
                   VFINIT in UTILS (Line 4461, file Utils.f90)
                   VFINIT in UTILS (Line 4461, file Utils.f90)
                   VFINIT in UTILS (Line 4462, file Utils.f90)
                   VFINIT in UTILS (Line 4499, file Utils.f90)
                   VFINIT in UTILS (Line 4514, file Utils.f90)
                   VFINIT in UTILS (Line 4900, file Utils.f90)
                   VFINIT in UTILS (Line 4900, file Utils.f90)
                   VFINIT in UTILS (Line 4901, file Utils.f90)
                   VFINIT in UTILS (Line 4938, file Utils.f90)
                   VFINIT in UTILS (Line 4953, file Utils.f90)
                   VFINIT in UTILS (Line 5249, file Utils.f90)
                   VFINIT in UTILS (Line 5249, file Utils.f90)
                   VFINIT in UTILS (Line 5250, file Utils.f90)
                   VFINIT in UTILS (Line 5287, file Utils.f90)
                   VFINIT in UTILS (Line 5302, file Utils.f90)

Name  Messages
----  --------
RESET_EPSLON_TO_LOCAL in UTILS
      Defined as:  Subroutine (line 215, file Utils.f90)

      Interface:   None

      Called By:   RESET_EPSLON_TO_LOCAL in UTILS (Line 475, file Utils.f90)

      Calls:       RESET_EPSLON_TO_LOCAL in UTILS (Line 475, file Utils.f90)

Name  Messages
----  --------
RG in UTILS
      Defined as:  Subroutine (line 219, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SEAMASKIBJBTOIJ_R2D in UTILS
      Defined as:  Subroutine (line 4807, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SEAMASKIJTOIBJB_R2D in UTILS
      Defined as:  Subroutine (line 4764, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 1712, file Utils.f90)
                   VFINIT in UTILS (Line 1786, file Utils.f90)
                   VFINIT in UTILS (Line 2130, file Utils.f90)
                   VFINIT in UTILS (Line 2386, file Utils.f90)
                   VFINIT in UTILS (Line 2536, file Utils.f90)
                   VFINIT in UTILS (Line 2659, file Utils.f90)
                   VFINIT in UTILS (Line 5552, file Utils.f90)

Name  Messages
----  --------
SIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 797, file Utils.f90)
                   VFINIT in UTILS (Line 875, file Utils.f90)
                   VFINIT in UTILS (Line 896, file Utils.f90)

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 591, file Utils.f90)
                   VFINIT in UTILS (Line 1031, file Utils.f90)
                   VFINIT in UTILS (Line 1035, file Utils.f90)
                   VFINIT in UTILS (Line 1036, file Utils.f90)
                   VFINIT in UTILS (Line 1037, file Utils.f90)
                   VFINIT in UTILS (Line 603, file Utils.f90)
                   VFINIT in UTILS (Line 618, file Utils.f90)
                   VFINIT in UTILS (Line 618, file Utils.f90)
                   VFINIT in UTILS (Line 639, file Utils.f90)
                   VFINIT in UTILS (Line 639, file Utils.f90)
                   VFINIT in UTILS (Line 639, file Utils.f90)
                   VFINIT in UTILS (Line 665, file Utils.f90)
                   VFINIT in UTILS (Line 680, file Utils.f90)
                   VFINIT in UTILS (Line 680, file Utils.f90)
                   VFINIT in UTILS (Line 701, file Utils.f90)
                   VFINIT in UTILS (Line 701, file Utils.f90)
                   VFINIT in UTILS (Line 701, file Utils.f90)

Name  Messages
----  --------
SIZES
      Defined as:  No definitions.

      Used By:     UTILS

Name  Messages
----  --------
SPLINEIBJBTOIJ_R2D in UTILS
      Defined as:  Subroutine (line 3153, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SPLINEIJTOIBJB_R2D in UTILS
      Defined as:  Subroutine (line 3107, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 430, file Utils.f90)
                   VFINIT in UTILS (Line 436, file Utils.f90)
                   VFINIT in UTILS (Line 442, file Utils.f90)
                   VFINIT in UTILS (Line 446, file Utils.f90)
                   VFINIT in UTILS (Line 455, file Utils.f90)
                   VFINIT in UTILS (Line 477, file Utils.f90)
                   VFINIT in UTILS (Line 481, file Utils.f90)
                   VFINIT in UTILS (Line 500, file Utils.f90)
                   VFINIT in UTILS (Line 534, file Utils.f90)
                   VFINIT in UTILS (Line 907, file Utils.f90)
                   VFINIT in UTILS (Line 1712, file Utils.f90)
                   VFINIT in UTILS (Line 1778, file Utils.f90)
                   VFINIT in UTILS (Line 1799, file Utils.f90)
                   VFINIT in UTILS (Line 2130, file Utils.f90)
                   VFINIT in UTILS (Line 2385, file Utils.f90)
                   VFINIT in UTILS (Line 2411, file Utils.f90)
                   VFINIT in UTILS (Line 2417, file Utils.f90)
                   VFINIT in UTILS (Line 2535, file Utils.f90)
                   VFINIT in UTILS (Line 2561, file Utils.f90)
                   VFINIT in UTILS (Line 2567, file Utils.f90)
                   VFINIT in UTILS (Line 2659, file Utils.f90)
                   VFINIT in UTILS (Line 2799, file Utils.f90)

Name  Messages
----  --------
SUM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 820, file Utils.f90)
                   VFINIT in UTILS (Line 821, file Utils.f90)

Name  Messages
----  --------
TIMESTAMP in UTILS
      Defined as:  Subroutine (line 224, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TMSTMP2 in UTILS
      Defined as:  Subroutine (line 222, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TQL2_I in UTILS
      Defined as:  Subroutine (line 2321, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TQL2_I8 in UTILS
      Defined as:  Subroutine (line 2471, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TRED2 in UTILS
      Defined as:  Subroutine (line 221, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VFINIT in UTILS (Line 606, file Utils.f90)
                   VFINIT in UTILS (Line 606, file Utils.f90)
                   VFINIT in UTILS (Line 610, file Utils.f90)
                   VFINIT in UTILS (Line 610, file Utils.f90)
                   VFINIT in UTILS (Line 622, file Utils.f90)
                   VFINIT in UTILS (Line 622, file Utils.f90)
                   VFINIT in UTILS (Line 623, file Utils.f90)
                   VFINIT in UTILS (Line 629, file Utils.f90)
                   VFINIT in UTILS (Line 629, file Utils.f90)
                   VFINIT in UTILS (Line 630, file Utils.f90)
                   VFINIT in UTILS (Line 644, file Utils.f90)
                   VFINIT in UTILS (Line 644, file Utils.f90)
                   VFINIT in UTILS (Line 645, file Utils.f90)
                   VFINIT in UTILS (Line 645, file Utils.f90)
                   VFINIT in UTILS (Line 654, file Utils.f90)
                   VFINIT in UTILS (Line 654, file Utils.f90)
                   VFINIT in UTILS (Line 655, file Utils.f90)
                   VFINIT in UTILS (Line 655, file Utils.f90)
                   VFINIT in UTILS (Line 668, file Utils.f90)
                   VFINIT in UTILS (Line 668, file Utils.f90)
                   VFINIT in UTILS (Line 672, file Utils.f90)
                   VFINIT in UTILS (Line 672, file Utils.f90)
                   VFINIT in UTILS (Line 684, file Utils.f90)
                   VFINIT in UTILS (Line 684, file Utils.f90)
                   VFINIT in UTILS (Line 685, file Utils.f90)
                   VFINIT in UTILS (Line 691, file Utils.f90)
                   VFINIT in UTILS (Line 691, file Utils.f90)
                   VFINIT in UTILS (Line 692, file Utils.f90)
                   VFINIT in UTILS (Line 706, file Utils.f90)
                   VFINIT in UTILS (Line 706, file Utils.f90)
                   VFINIT in UTILS (Line 707, file Utils.f90)
                   VFINIT in UTILS (Line 707, file Utils.f90)
                   VFINIT in UTILS (Line 716, file Utils.f90)
                   VFINIT in UTILS (Line 716, file Utils.f90)
                   VFINIT in UTILS (Line 717, file Utils.f90)
                   VFINIT in UTILS (Line 717, file Utils.f90)
                   VFINIT in UTILS (Line 763, file Utils.f90)
                   VFINIT in UTILS (Line 951, file Utils.f90)

Name  Messages
----  --------
UTILS
      Defined as:  Module (line 6, file Utils.f90)

      Calls:       MSGONE in PARALLELISM (Line 812, file Utils.f90)
                   MSGONE in PARALLELISM (Line 818, file Utils.f90)
                   MSGONE in PARALLELISM (Line 822, file Utils.f90)
                   READGAUSS in IOLOWLEVEL (Line 788, file Utils.f90)
                   WRITEGAUSS in IOLOWLEVEL (Line 793, file Utils.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   SIZES
                   CONSTANTS
                   OPTIONS
                   IOLOWLEVEL
                   PARALLELISM

Name  Messages
----  --------
VFINIT in UTILS
      Defined as:  Subroutine (line 5558, file Utils.f90)

      Interface:   None

      Called By:   VFINIT in UTILS (Line 5495, file Utils.f90)

      Calls:       VFINIT in UTILS (Line 5495, file Utils.f90)
                   SIZE(Intrinsic) (Line 591, file Utils.f90)
                   SIZE(Intrinsic) (Line 1031, file Utils.f90)
                   SIZE(Intrinsic) (Line 1035, file Utils.f90)
                   SIZE(Intrinsic) (Line 1036, file Utils.f90)
                   SIZE(Intrinsic) (Line 1037, file Utils.f90)
                   REAL(Intrinsic) (Line 423, file Utils.f90)
                   REAL(Intrinsic) (Line 446, file Utils.f90)
                   REAL(Intrinsic) (Line 455, file Utils.f90)
                   REAL(Intrinsic) (Line 481, file Utils.f90)
                   REAL(Intrinsic) (Line 500, file Utils.f90)
                   SQRT(Intrinsic) (Line 430, file Utils.f90)
                   SQRT(Intrinsic) (Line 436, file Utils.f90)
                   SQRT(Intrinsic) (Line 442, file Utils.f90)
                   SQRT(Intrinsic) (Line 446, file Utils.f90)
                   SQRT(Intrinsic) (Line 455, file Utils.f90)
                   SQRT(Intrinsic) (Line 477, file Utils.f90)
                   SQRT(Intrinsic) (Line 481, file Utils.f90)
                   SQRT(Intrinsic) (Line 500, file Utils.f90)
                   SQRT(Intrinsic) (Line 534, file Utils.f90)
                   MOD(Intrinsic) (Line 583, file Utils.f90)
                   MOD(Intrinsic) (Line 592, file Utils.f90)
                   SIZE(Intrinsic) (Line 603, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 606, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 606, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 610, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 610, file Utils.f90)
                   TRIM(Intrinsic) (Line 606, file Utils.f90)
                   TRIM(Intrinsic) (Line 606, file Utils.f90)
                   TRIM(Intrinsic) (Line 610, file Utils.f90)
                   TRIM(Intrinsic) (Line 610, file Utils.f90)
                   MIN(Intrinsic) (Line 607, file Utils.f90)
                   SIZE(Intrinsic) (Line 618, file Utils.f90)
                   SIZE(Intrinsic) (Line 618, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 622, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 622, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 623, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 629, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 629, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 630, file Utils.f90)
                   TRIM(Intrinsic) (Line 622, file Utils.f90)
                   TRIM(Intrinsic) (Line 622, file Utils.f90)
                   TRIM(Intrinsic) (Line 623, file Utils.f90)
                   TRIM(Intrinsic) (Line 629, file Utils.f90)
                   TRIM(Intrinsic) (Line 629, file Utils.f90)
                   TRIM(Intrinsic) (Line 630, file Utils.f90)
                   MIN(Intrinsic) (Line 626, file Utils.f90)
                   SIZE(Intrinsic) (Line 639, file Utils.f90)
                   SIZE(Intrinsic) (Line 639, file Utils.f90)
                   SIZE(Intrinsic) (Line 639, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 644, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 644, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 645, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 645, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 654, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 654, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 655, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 655, file Utils.f90)
                   TRIM(Intrinsic) (Line 644, file Utils.f90)
                   TRIM(Intrinsic) (Line 644, file Utils.f90)
                   TRIM(Intrinsic) (Line 645, file Utils.f90)
                   TRIM(Intrinsic) (Line 645, file Utils.f90)
                   TRIM(Intrinsic) (Line 654, file Utils.f90)
                   TRIM(Intrinsic) (Line 654, file Utils.f90)
                   TRIM(Intrinsic) (Line 655, file Utils.f90)
                   TRIM(Intrinsic) (Line 655, file Utils.f90)
                   MIN(Intrinsic) (Line 651, file Utils.f90)
                   SIZE(Intrinsic) (Line 665, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 668, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 668, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 672, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 672, file Utils.f90)
                   TRIM(Intrinsic) (Line 668, file Utils.f90)
                   TRIM(Intrinsic) (Line 668, file Utils.f90)
                   TRIM(Intrinsic) (Line 672, file Utils.f90)
                   TRIM(Intrinsic) (Line 672, file Utils.f90)
                   MIN(Intrinsic) (Line 669, file Utils.f90)
                   SIZE(Intrinsic) (Line 680, file Utils.f90)
                   SIZE(Intrinsic) (Line 680, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 684, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 684, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 685, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 691, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 691, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 692, file Utils.f90)
                   TRIM(Intrinsic) (Line 684, file Utils.f90)
                   TRIM(Intrinsic) (Line 684, file Utils.f90)
                   TRIM(Intrinsic) (Line 685, file Utils.f90)
                   TRIM(Intrinsic) (Line 691, file Utils.f90)
                   TRIM(Intrinsic) (Line 691, file Utils.f90)
                   TRIM(Intrinsic) (Line 692, file Utils.f90)
                   MIN(Intrinsic) (Line 688, file Utils.f90)
                   SIZE(Intrinsic) (Line 701, file Utils.f90)
                   SIZE(Intrinsic) (Line 701, file Utils.f90)
                   SIZE(Intrinsic) (Line 701, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 706, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 706, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 707, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 707, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 716, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 716, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 717, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 717, file Utils.f90)
                   TRIM(Intrinsic) (Line 706, file Utils.f90)
                   TRIM(Intrinsic) (Line 706, file Utils.f90)
                   TRIM(Intrinsic) (Line 707, file Utils.f90)
                   TRIM(Intrinsic) (Line 707, file Utils.f90)
                   TRIM(Intrinsic) (Line 716, file Utils.f90)
                   TRIM(Intrinsic) (Line 716, file Utils.f90)
                   TRIM(Intrinsic) (Line 717, file Utils.f90)
                   TRIM(Intrinsic) (Line 717, file Utils.f90)
                   MIN(Intrinsic) (Line 713, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 763, file Utils.f90)
                   TRIM(Intrinsic) (Line 763, file Utils.f90)
                   ACOS(Intrinsic) (Line 796, file Utils.f90)
                   SIN(Intrinsic) (Line 797, file Utils.f90)
                   ABS(Intrinsic) (Line 809, file Utils.f90)
                   ABS(Intrinsic) (Line 810, file Utils.f90)
                   ABS(Intrinsic) (Line 815, file Utils.f90)
                   ABS(Intrinsic) (Line 816, file Utils.f90)
                   MINVAL(Intrinsic) (Line 809, file Utils.f90)
                   MINVAL(Intrinsic) (Line 815, file Utils.f90)
                   MAXVAL(Intrinsic) (Line 810, file Utils.f90)
                   MAXVAL(Intrinsic) (Line 816, file Utils.f90)
                   REAL(Intrinsic) (Line 811, file Utils.f90)
                   REAL(Intrinsic) (Line 817, file Utils.f90)
                   SUM(Intrinsic) (Line 820, file Utils.f90)
                   SUM(Intrinsic) (Line 821, file Utils.f90)
                   REAL(Intrinsic) (Line 864, file Utils.f90)
                   REAL(Intrinsic) (Line 895, file Utils.f90)
                   COS(Intrinsic) (Line 868, file Utils.f90)
                   COS(Intrinsic) (Line 874, file Utils.f90)
                   COS(Intrinsic) (Line 897, file Utils.f90)
                   COS(Intrinsic) (Line 905, file Utils.f90)
                   COS(Intrinsic) (Line 906, file Utils.f90)
                   SIN(Intrinsic) (Line 875, file Utils.f90)
                   SIN(Intrinsic) (Line 896, file Utils.f90)
                   MIN(Intrinsic) (Line 889, file Utils.f90)
                   SQRT(Intrinsic) (Line 907, file Utils.f90)
                   ADJUSTL(Intrinsic) (Line 951, file Utils.f90)
                   TRIM(Intrinsic) (Line 951, file Utils.f90)
                   REAL(Intrinsic) (Line 1004, file Utils.f90)
                   REAL(Intrinsic) (Line 1004, file Utils.f90)
                   REAL(Intrinsic) (Line 1005, file Utils.f90)
                   REAL(Intrinsic) (Line 1005, file Utils.f90)
                   MOD(Intrinsic) (Line 1054, file Utils.f90)
                   COS(Intrinsic) (Line 1055, file Utils.f90)
                   COS(Intrinsic) (Line 1088, file Utils.f90)
                   MOD(Intrinsic) (Line 1137, file Utils.f90)
                   MOD(Intrinsic) (Line 1192, file Utils.f90)
                   ATAN(Intrinsic) (Line 1144, file Utils.f90)
                   ATAN(Intrinsic) (Line 1193, file Utils.f90)
                   EPSILON(Intrinsic) (Line 1145, file Utils.f90)
                   REAL(Intrinsic) (Line 1158, file Utils.f90)
                   REAL(Intrinsic) (Line 1163, file Utils.f90)
                   REAL(Intrinsic) (Line 1191, file Utils.f90)
                   REAL(Intrinsic) (Line 1193, file Utils.f90)
                   REAL(Intrinsic) (Line 1226, file Utils.f90)
                   REAL(Intrinsic) (Line 1229, file Utils.f90)
                   REAL(Intrinsic) (Line 1236, file Utils.f90)
                   COUNT(Intrinsic) (Line 1173, file Utils.f90)
                   COUNT(Intrinsic) (Line 1175, file Utils.f90)
                   PACK(Intrinsic) (Line 1181, file Utils.f90)
                   PACK(Intrinsic) (Line 1182, file Utils.f90)
                   COS(Intrinsic) (Line 1190, file Utils.f90)
                   ABS(Intrinsic) (Line 1228, file Utils.f90)
                   MAXVAL(Intrinsic) (Line 1228, file Utils.f90)
                   ABS(Intrinsic) (Line 1277, file Utils.f90)
                   ABS(Intrinsic) (Line 1277, file Utils.f90)
                   REAL(Intrinsic) (Line 1420, file Utils.f90)
                   ABS(Intrinsic) (Line 1491, file Utils.f90)
                   ABS(Intrinsic) (Line 1492, file Utils.f90)
                   INT(Intrinsic) (Line 1570, file Utils.f90)
                   ABS(Intrinsic) (Line 1615, file Utils.f90)
                   ABS(Intrinsic) (Line 1616, file Utils.f90)
                   ABS(Intrinsic) (Line 1641, file Utils.f90)
                   ABS(Intrinsic) (Line 1641, file Utils.f90)
                   ABS(Intrinsic) (Line 1643, file Utils.f90)
                   ABS(Intrinsic) (Line 1664, file Utils.f90)
                   ABS(Intrinsic) (Line 1664, file Utils.f90)
                   ABS(Intrinsic) (Line 1681, file Utils.f90)
                   ABS(Intrinsic) (Line 1681, file Utils.f90)
                   ABS(Intrinsic) (Line 1681, file Utils.f90)
                   ABS(Intrinsic) (Line 1686, file Utils.f90)
                   ABS(Intrinsic) (Line 1686, file Utils.f90)
                   ABS(Intrinsic) (Line 1686, file Utils.f90)
                   ABS(Intrinsic) (Line 1686, file Utils.f90)
                   ABS(Intrinsic) (Line 1687, file Utils.f90)
                   ABS(Intrinsic) (Line 1687, file Utils.f90)
                   ABS(Intrinsic) (Line 1687, file Utils.f90)
                   ABS(Intrinsic) (Line 1707, file Utils.f90)
                   ABS(Intrinsic) (Line 1707, file Utils.f90)
                   ABS(Intrinsic) (Line 1707, file Utils.f90)
                   ABS(Intrinsic) (Line 1757, file Utils.f90)
                   ABS(Intrinsic) (Line 1778, file Utils.f90)
                   ABS(Intrinsic) (Line 1796, file Utils.f90)
                   ABS(Intrinsic) (Line 1796, file Utils.f90)
                   SQRT(Intrinsic) (Line 1712, file Utils.f90)
                   SQRT(Intrinsic) (Line 1778, file Utils.f90)
                   SQRT(Intrinsic) (Line 1799, file Utils.f90)
                   SIGN(Intrinsic) (Line 1712, file Utils.f90)
                   SIGN(Intrinsic) (Line 1786, file Utils.f90)
                   MIN(Intrinsic) (Line 1735, file Utils.f90)
                   ABS(Intrinsic) (Line 1916, file Utils.f90)
                   ABS(Intrinsic) (Line 1916, file Utils.f90)
                   ABS(Intrinsic) (Line 1934, file Utils.f90)
                   ABS(Intrinsic) (Line 1934, file Utils.f90)
                   ABS(Intrinsic) (Line 1978, file Utils.f90)
                   ABS(Intrinsic) (Line 1978, file Utils.f90)
                   ABS(Intrinsic) (Line 1978, file Utils.f90)
                   ABS(Intrinsic) (Line 1978, file Utils.f90)
                   ABS(Intrinsic) (Line 1978, file Utils.f90)
                   ABS(Intrinsic) (Line 1981, file Utils.f90)
                   ABS(Intrinsic) (Line 1981, file Utils.f90)
                   ABS(Intrinsic) (Line 1981, file Utils.f90)
                   MIN(Intrinsic) (Line 2010, file Utils.f90)
                   ABS(Intrinsic) (Line 2081, file Utils.f90)
                   ABS(Intrinsic) (Line 2116, file Utils.f90)
                   ABS(Intrinsic) (Line 2150, file Utils.f90)
                   ABS(Intrinsic) (Line 2171, file Utils.f90)
                   ABS(Intrinsic) (Line 2178, file Utils.f90)
                   SQRT(Intrinsic) (Line 2130, file Utils.f90)
                   SIGN(Intrinsic) (Line 2130, file Utils.f90)
                   ABS(Intrinsic) (Line 2354, file Utils.f90)
                   ABS(Intrinsic) (Line 2354, file Utils.f90)
                   ABS(Intrinsic) (Line 2360, file Utils.f90)
                   ABS(Intrinsic) (Line 2409, file Utils.f90)
                   ABS(Intrinsic) (Line 2409, file Utils.f90)
                   ABS(Intrinsic) (Line 2438, file Utils.f90)
                   SQRT(Intrinsic) (Line 2385, file Utils.f90)
                   SQRT(Intrinsic) (Line 2411, file Utils.f90)
                   SQRT(Intrinsic) (Line 2417, file Utils.f90)
                   SIGN(Intrinsic) (Line 2386, file Utils.f90)
                   ABS(Intrinsic) (Line 2504, file Utils.f90)
                   ABS(Intrinsic) (Line 2504, file Utils.f90)
                   ABS(Intrinsic) (Line 2510, file Utils.f90)
                   ABS(Intrinsic) (Line 2559, file Utils.f90)
                   ABS(Intrinsic) (Line 2559, file Utils.f90)
                   ABS(Intrinsic) (Line 2588, file Utils.f90)
                   SQRT(Intrinsic) (Line 2535, file Utils.f90)
                   SQRT(Intrinsic) (Line 2561, file Utils.f90)
                   SQRT(Intrinsic) (Line 2567, file Utils.f90)
                   SIGN(Intrinsic) (Line 2536, file Utils.f90)
                   ABS(Intrinsic) (Line 2646, file Utils.f90)
                   SQRT(Intrinsic) (Line 2659, file Utils.f90)
                   SIGN(Intrinsic) (Line 2659, file Utils.f90)
                   ABS(Intrinsic) (Line 2762, file Utils.f90)
                   ABS(Intrinsic) (Line 2763, file Utils.f90)
                   ABS(Intrinsic) (Line 2779, file Utils.f90)
                   ABS(Intrinsic) (Line 2779, file Utils.f90)
                   ABS(Intrinsic) (Line 2805, file Utils.f90)
                   ABS(Intrinsic) (Line 2806, file Utils.f90)
                   ABS(Intrinsic) (Line 2808, file Utils.f90)
                   MAX(Intrinsic) (Line 2762, file Utils.f90)
                   MAX(Intrinsic) (Line 2776, file Utils.f90)
                   MAX(Intrinsic) (Line 2800, file Utils.f90)
                   SQRT(Intrinsic) (Line 2799, file Utils.f90)
                   MOD(Intrinsic) (Line 2877, file Utils.f90)
                   INT(Intrinsic) (Line 2922, file Utils.f90)
                   INT(Intrinsic) (Line 2924, file Utils.f90)
                   MOD(Intrinsic) (Line 2924, file Utils.f90)
                   INT(Intrinsic) (Line 2945, file Utils.f90)
                   INT(Intrinsic) (Line 2946, file Utils.f90)
                   INT(Intrinsic) (Line 2951, file Utils.f90)
                   INT(Intrinsic) (Line 2952, file Utils.f90)
                   INT(Intrinsic) (Line 2953, file Utils.f90)
                   INT(Intrinsic) (Line 2954, file Utils.f90)
                   INT(Intrinsic) (Line 2983, file Utils.f90)
                   INT(Intrinsic) (Line 2983, file Utils.f90)
                   INT(Intrinsic) (Line 2985, file Utils.f90)
                   INT(Intrinsic) (Line 2986, file Utils.f90)
                   REAL(Intrinsic) (Line 3256, file Utils.f90)
                   REAL(Intrinsic) (Line 3256, file Utils.f90)
                   REAL(Intrinsic) (Line 3257, file Utils.f90)
                   REAL(Intrinsic) (Line 3265, file Utils.f90)
                   REAL(Intrinsic) (Line 3266, file Utils.f90)
                   REAL(Intrinsic) (Line 3324, file Utils.f90)
                   REAL(Intrinsic) (Line 3325, file Utils.f90)
                   REAL(Intrinsic) (Line 3325, file Utils.f90)
                   REAL(Intrinsic) (Line 3327, file Utils.f90)
                   REAL(Intrinsic) (Line 3327, file Utils.f90)
                   INT(Intrinsic) (Line 3257, file Utils.f90)
                   INT(Intrinsic) (Line 3324, file Utils.f90)
                   ATAN(Intrinsic) (Line 3264, file Utils.f90)
                   REAL(Intrinsic) (Line 3478, file Utils.f90)
                   REAL(Intrinsic) (Line 3478, file Utils.f90)
                   REAL(Intrinsic) (Line 3479, file Utils.f90)
                   REAL(Intrinsic) (Line 3487, file Utils.f90)
                   REAL(Intrinsic) (Line 3489, file Utils.f90)
                   REAL(Intrinsic) (Line 3499, file Utils.f90)
                   REAL(Intrinsic) (Line 3500, file Utils.f90)
                   REAL(Intrinsic) (Line 3500, file Utils.f90)
                   REAL(Intrinsic) (Line 3501, file Utils.f90)
                   REAL(Intrinsic) (Line 3501, file Utils.f90)
                   INT(Intrinsic) (Line 3479, file Utils.f90)
                   INT(Intrinsic) (Line 3499, file Utils.f90)
                   ATAN(Intrinsic) (Line 3486, file Utils.f90)
                   REAL(Intrinsic) (Line 3794, file Utils.f90)
                   REAL(Intrinsic) (Line 3794, file Utils.f90)
                   REAL(Intrinsic) (Line 3795, file Utils.f90)
                   REAL(Intrinsic) (Line 3803, file Utils.f90)
                   REAL(Intrinsic) (Line 3804, file Utils.f90)
                   INT(Intrinsic) (Line 3795, file Utils.f90)
                   ATAN(Intrinsic) (Line 3802, file Utils.f90)
                   ABS(Intrinsic) (Line 3815, file Utils.f90)
                   ABS(Intrinsic) (Line 3820, file Utils.f90)
                   MIN(Intrinsic) (Line 3815, file Utils.f90)
                   REAL(Intrinsic) (Line 3873, file Utils.f90)
                   REAL(Intrinsic) (Line 3873, file Utils.f90)
                   REAL(Intrinsic) (Line 3874, file Utils.f90)
                   REAL(Intrinsic) (Line 3882, file Utils.f90)
                   REAL(Intrinsic) (Line 3883, file Utils.f90)
                   INT(Intrinsic) (Line 3874, file Utils.f90)
                   ATAN(Intrinsic) (Line 3881, file Utils.f90)
                   ABS(Intrinsic) (Line 3893, file Utils.f90)
                   ABS(Intrinsic) (Line 3898, file Utils.f90)
                   MIN(Intrinsic) (Line 3893, file Utils.f90)
                   REAL(Intrinsic) (Line 4078, file Utils.f90)
                   REAL(Intrinsic) (Line 4078, file Utils.f90)
                   REAL(Intrinsic) (Line 4079, file Utils.f90)
                   REAL(Intrinsic) (Line 4116, file Utils.f90)
                   REAL(Intrinsic) (Line 4131, file Utils.f90)
                   INT(Intrinsic) (Line 4079, file Utils.f90)
                   ATAN(Intrinsic) (Line 4086, file Utils.f90)
                   DBLE(Intrinsic) (Line 4125, file Utils.f90)
                   DBLE(Intrinsic) (Line 4141, file Utils.f90)
                   REAL(Intrinsic) (Line 4461, file Utils.f90)
                   REAL(Intrinsic) (Line 4461, file Utils.f90)
                   REAL(Intrinsic) (Line 4462, file Utils.f90)
                   REAL(Intrinsic) (Line 4499, file Utils.f90)
                   REAL(Intrinsic) (Line 4514, file Utils.f90)
                   INT(Intrinsic) (Line 4462, file Utils.f90)
                   INT(Intrinsic) (Line 4662, file Utils.f90)
                   ATAN(Intrinsic) (Line 4469, file Utils.f90)
                   DBLE(Intrinsic) (Line 4508, file Utils.f90)
                   DBLE(Intrinsic) (Line 4524, file Utils.f90)
                   REAL(Intrinsic) (Line 4900, file Utils.f90)
                   REAL(Intrinsic) (Line 4900, file Utils.f90)
                   REAL(Intrinsic) (Line 4901, file Utils.f90)
                   REAL(Intrinsic) (Line 4938, file Utils.f90)
                   REAL(Intrinsic) (Line 4953, file Utils.f90)
                   INT(Intrinsic) (Line 4901, file Utils.f90)
                   ATAN(Intrinsic) (Line 4908, file Utils.f90)
                   DBLE(Intrinsic) (Line 4947, file Utils.f90)
                   REAL(Intrinsic) (Line 5249, file Utils.f90)
                   REAL(Intrinsic) (Line 5249, file Utils.f90)
                   REAL(Intrinsic) (Line 5250, file Utils.f90)
                   REAL(Intrinsic) (Line 5287, file Utils.f90)
                   REAL(Intrinsic) (Line 5302, file Utils.f90)
                   INT(Intrinsic) (Line 5250, file Utils.f90)
                   ATAN(Intrinsic) (Line 5257, file Utils.f90)
                   DBLE(Intrinsic) (Line 5296, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5497, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5498, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5499, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5500, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5501, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5502, file Utils.f90)
                   ICHAR(Intrinsic) (Line 5525, file Utils.f90)
                   ISHFT(Intrinsic) (Line 5533, file Utils.f90)
                   IOR(Intrinsic) (Line 5533, file Utils.f90)
                   SIGN(Intrinsic) (Line 5552, file Utils.f90)
                   ABS(Intrinsic) (Line 5553, file Utils.f90)

Name  Messages
----  --------
VFIREC in UTILS
      Defined as:  Subroutine (line 241, file Utils.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEGAUSS in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   UTILS (Line 793, file Utils.f90)

Name  Messages
----  --------
ZD in HQR3 in UTILS
      Defined as:  Function (line 2023, file Utils.f90)

      Interface:   None

      Called By:   ZD in HQR3 in UTILS (Line 1938, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1939, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1965, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1966, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1979, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1980, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1985, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1986, file Utils.f90)

      Calls:       ZD in HQR3 in UTILS (Line 1938, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1939, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1965, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1966, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1979, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1980, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1985, file Utils.f90)
                   ZD in HQR3 in UTILS (Line 1986, file Utils.f90)

Name  Messages
----  --------
ZD in UTILS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ZNORMA in UTILS
      Defined as:  Subroutine (line 2729, file Utils.f90)

      Interface:   None

      Called By:   ZNORMA in UTILS (Line 2311, file Utils.f90)

      Calls:       ZNORMA in UTILS (Line 2311, file Utils.f90)

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
