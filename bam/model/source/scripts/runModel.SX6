#!/bin/bash -x
#help#
#*********************************************************************************#
#                                                                                 #
# script to run CPTEC Global Model on PC Clusters under MPI Scali                 #
# and Sun Grid Engine without OpenMP                                              #
#                                                                                 #
# assumptions: assume present at the same directory:                              #
#              ParModel_MPI (Global Model Executable file)                        #
#              MODELIN (Global Model input Namelist file)                         #
#                                                                                 #
# usage: run_multi_UNA cpu_mpi cpu_node name TRC LV LABELI LABELF hold            #
# where:                                                                          #
# cpu_mpi: integer, the desired number of mpi processes                           #
# cpu_node: integer, the desired number of mpi processes per shared memory node   #
# name: character, the job name (for SGE)                                         #
# hold: any, present or not;                                                      #
#            if absent, script finishes after queueing job;                       #
#            if present, script holds till job completion                         #
#*********************************************************************************#
#help#
#
#       Help:
#
if [ "${1}" = "help" -o -z "${1}" ]
then
  cat < ${0} | sed -n '/^#help#/,/^#help#/p'
  exit 1
else
  TRC=`echo ${4} | awk '{print $1/1}'`   
fi
if [ -z "${5}" ]
then
  echo "LV is not set" 
  exit 2
else
  LV=`echo ${5} | awk '{print $1/1}'`    
fi

if [ -z "${6}" ]
then
  echo "LABELI is not set" 
  exit 3
else
  export LABELI=${6}  
fi
if [ -z "${7}" ]
then
  echo "LABELF is not set" 
  exit 3
else
  export LABELF=${7}  
fi

if [ "$#" == 8 ]
then hold="-sync y"
else hold=
fi


if [ ${TRC} = 21 ]; then
 export timestep=3600
fi 
if [ ${TRC} = 31 ]; then
 export timestep=1800
fi 
if [ ${TRC} = 42 ]; then
 export timestep=1800
fi 
if [ ${TRC} = 62 ]; then
 export timestep=1200
fi
if [ ${TRC} = 106 ]; then
 export timestep=900
fi
if [ ${TRC} = 126 ]; then
 export timestep=600
fi
if [ ${TRC} = 133 ]; then
 export timestep=600
fi
if [ ${TRC} = 159 ]; then
 export timestep=600
fi
if [ ${TRC} = 170 ]; then
 export timestep=450
fi
if [ ${TRC} = 213 ]; then
 export timestep=450
fi
if [ ${TRC} = 213 ]; then
 export timestep=360
fi
if [ ${TRC} = 254 ]; then
 export timestep=300
fi
if [ ${TRC} = 299 ]; then
 export timestep=300
fi
if [ ${TRC} = 319 ]; then
 export timestep=225
fi
if [ ${TRC} = 341 ]; then
 export timestep=200
fi
if [ ${TRC} = 382 ]; then
 export timestep=180
fi
if [ ${TRC} = 511 ]; then
 export timestep=150
fi
if [ ${TRC} = 533 ]; then
 export timestep=150
fi
if [ ${TRC} = 666 ]; then
 export timestep=150
fi
if [ ${TRC} = 863 ]; then
 export timestep=150
fi
if [ ${TRC} = 1279 ]; then
 export timestep=20
fi

#
# SETTING THE APPROPRIATED ENVIRONMENT
#
CASE=`echo ${TRC} ${LV} |awk '{ printf("TQ%4.4dL%3.3d\n",$1,$2)  }' `
PATHA=`pwd`
export FILEENV=`find ${PATHA} -name EnvironmentalVariablesMCGA -print`
export PATHENV=`dirname ${FILEENV}`
export PATHBASE=`cd ${PATHENV};cd ../;pwd`
. ${FILEENV} ${CASE}
cd ${HOME_suite}/run
#
#   Set nproc, resol, host, machine, NQS Queue and Run time
#
DIRRESOL=`echo ${TRC} ${LV} |awk '{ printf("TQ%4.4dL%3.3d\n",$1,$2)  }' `
HSTMAQ=`hostname`
MAQUI=`hostname -s`
TaskPerProc=1
MemPerNode=2gb
BUFFER=20480
cputime=3600
QUEUE=${QUEUE}
RUNTM=`date +'%Y%m%d%T'`
yi=`awk 'BEGIN {print substr("'${LABELI}'",1,4)}'` ; export yi
mi=`awk 'BEGIN {print substr("'${LABELI}'",5,2)}'` ; export mi
di=`awk 'BEGIN {print substr("'${LABELI}'",7,2)}'` ; export di
hi=`awk 'BEGIN {print substr("'${LABELI}'",9,2)}'` ; export hi
yf=`awk 'BEGIN {print substr("'${LABELF}'",1,4)}'` ; export yf
mf=`awk 'BEGIN {print substr("'${LABELF}'",5,2)}'` ; export mf
df=`awk 'BEGIN {print substr("'${LABELF}'",7,2)}'` ; export df
hf=`awk 'BEGIN {print substr("'${LABELF}'",9,2)}'` ; export hf

echo $yi $mi $di $hi  $yf $mf $df $hf
mkdir -p ${DK_HSM}/GFCT/${yi}${mi}${di}${hi} 
mkdir -p ${DK_HSM}/GFGH/${yi}${mi}${di}${hi} 
mkdir -p ${HOME_suite}/run/setout
#
#########################################################
#
#      SCRIPT FOR GLOBAL MODEL PRODUCTION RUNS 
#
#########################################################

#
# Step 1: Set Directories and files:
#
#   DIRBASE is the root directory path; 
#           all files belong to subdirectories of root;
#   EXECFILEPATH is the executable filename (with path)
#   SCRIPTFILEPATH is the script file that submits executable (with path)
#   NAMELISTFILEPATH contains the namelist file read by the executable (with path)
#   OUTPUTFILEPATH is the executable output file (with path)
#
EXECFILEPATH=${DK_suite}/model/exec
SCRIPTFILEPATH=${HOME_suite}/run/modg${DIRRESOL}.${MAQUI}
NAMELISTFILEPATH=${HOME_suite}/run
OUTPUTFILEPATH=${HOME_suite}/run/setout/modg${DIRRESOL}.${MAQUI}.${RUNTM}.out
FSCR=${HOME_suite}/run

export cpu_mpi=$1
export cpu_node=$2
export RES=$3
num=$(($cpu_mpi+$cpu_node-1))
fra=$(($num/$cpu_node))
cpu_tot=$(($fra*$cpu_node))
echo fila=mpi-npn${cpu_node} total cpus=${cpu_tot}
#
# build Nanmelist to model MCGA
#
if [ -z "${PREFXO}" ] ;then
export PREFX="NMC" 
else
export PREFX="${PREFXO}" 
fi 
if [ -z "${PREFXI}" ] ;then
export PREFY="NMC"
else
export PREFY="${PREFXI}"
fi 

export eigeninit=".TRUE."
export mgiven=".FALSE."      #,   ! mgiven       --> .FALSE.
export gaussgiven=".FALSE."      #,   ! gaussgiven       --> .FALSE.
export aspa="'"
export path_in=${DK_suite}/model/datain; mkdir -p ${path_in}
export dirfNameOutput=${DK_suite}/model/dataout/${DIRRESOL}/${yi}${mi}${di}${hi}; mkdir -p ${dirfNameOutput}

cat ${NAMELISTFILEPATH}/MODELIN | awk '{  
 if (substr($1,1,5) == "trunc")
  {
   "echo ${TRC}" | getline TRC	   
    printf(" trunc    =%4.4d,		      !TRC   : three-digit triangular truncation\n",TRC)
  }
 else if (substr($1,1,4) == "vert")
  {
   "echo ${LV}" | getline LV	 
    printf(" vert     =%3.3d,		      !LV    : two-digit number of vertical sigma-layers\n",LV)
  }
 else if (substr($1,1,2) == "dt")
  {
   "echo $timestep" | getline timestep       
    printf(" dt       =%.1f,	     !      : delta t\n",timestep)
  }
 else if (substr($1,1,6) == "IDATEI")
  {
   "echo $yi" | getline yi	 
   "echo $mi" | getline mi	 
   "echo $di" | getline di	 
   "echo $hi" | getline hi	 
    printf(" IDATEI   = %2.2d,%2.2d,%2.2d,%4.4d, !LABELI: initial forecasting label\n",hi,di,mi,yi)
  }
 else if (substr($1,1,6) == "IDATEW")
  {
   "echo $yf" | getline yf	 
   "echo $mf" | getline mf	 
   "echo $df" | getline df	 
   "echo $hf" | getline hf	 
    printf(" IDATEW   = %2.2d,%2.2d,%2.2d,%4.4d, !LABELC: final forecasting label for cold\n",hf,df,mf,yf)
  }
 else if (substr($1,1,6) == "IDATEF")
  {
   "echo $yf" | getline yf	 
   "echo $mf" | getline mf	 
   "echo $df" | getline df	 
   "echo $hf" | getline hf	 
    printf(" IDATEF   = %2.2d,%2.2d,%2.2d,%4.4d, !LABELF: final forecasting label for warm\n",hf,df,mf,yf)
  }
 else if (substr($1,1,9) == "eigeninit")
  { 
   "echo $eigeninit" | getline eigeninit
    printf(" eigeninit     =%s,  ! eigenInit  --> .FALSE.\n",eigeninit)
  }
 else if (substr($1,1,6) == "mgiven")
  { 
   "echo $mgiven" | getline mgiven
    printf(" mgiven	   =%s,  ! mgiven  --> .FALSE.\n",mgiven)
  }
 else if (substr($1,1,10) == "gaussgiven")
  { 
   "echo $gaussgiven" | getline gaussgiven
    printf(" gaussgiven    =%s,  ! gaussgiven  --> .FALSE.\n",gaussgiven)
  }
 else if (substr($1,1,5) == "PREFX")
  { 
   "echo $aspa" | getline aspa
   "echo $PREFX" | getline PREFX
    printf(" PREFX    =%s%s%s , 	 !PREFX : preffix for name of output files\n",aspa,PREFX,aspa)
  }
 else if (substr($1,1,5) == "PREFY")
  { 
   "echo $aspa" | getline aspa
   "echo $PREFY" | getline PREFY
    printf(" PREFY    =%s%s%s , 	 !PREFY : preffix for name of input files\n",aspa,PREFY,aspa)
  }
 else if (substr($1,1,7) == "path_in")
  { 
   "echo $aspa" | getline aspa
   "echo $path_in" | getline path_in
    printf(" path_in=%s%s%s , \n",aspa,path_in,aspa)
  }
 else if (substr($1,1,14) == "dirfNameOutput")
  { 
   "echo $aspa" | getline aspa
   "echo $dirfNameOutput" | getline dirfNameOutput
    printf(" dirfNameOutput=%s%s%s , \n",aspa,dirfNameOutput,aspa)
  }
  else
  {
    print $0
  }
 }'    > ${EXECFILEPATH}/MODELIN

#
# Step 2: Build script that runs the AGCM executable getting information
#         from namelist 
#
cat <<EOF1 >${FSCR}/mpisep.sh
#!/usr/bin/sh
cd ${EXECFILEPATH}
exec ${EXECFILEPATH}/ParModel_MPI <${EXECFILEPATH}/MODELIN>  ${FRUN}/xmit_model.`date +'%Y%m%d'`_`date +'%Y%m%d'`.MODEL
EOF1
chmod 777 ${FSCR}/mpisep.sh

#cat <<EOF1>${FSCR}/mpisep.bash
##!/bin/bash
#export F_UFMTENDIAN=18,19,20,22,23,24,25,26,27,31,32,33,36,37,38,39,42,43,44,45,49,50,51,52,53,55,61,66,71,77,80,81,82,83,88,91,92,93,99
#export GFORTRAN_CONVERT_UNIT=big_endian:18,19,20,22,23,24,25,26,27,31,32,33,36,37,38,39,42,43,44,45,49,50,51,52,53,55,61,66,71,77,80,81,82,83,88,91,92,93,99
#export KMP_STACKSIZE=128m
#ulimit -s unlimited
#export MPID_RSH
#cd ${EXECFILEPATH}
#${EXECFILEPATH}/ParModel_MPI < ${EXECFILEPATH}/MODELIN
#EOF1
#chmod +x ${FSCR}/mpisep.bash
#
# Step 3: Build script to submit the script above in the UNA
#
cat <<EOF0>${SCRIPTFILEPATH}
#!/usr/bin/ksh
#PBS -T mpisx                    # Job type: mpisx for MPI
#PBS -l cpunum_prc=${cpu_mpi} # cpus per Node
#PBS -l tasknum_prc=${TaskPerProc}# Task per Proc
#PBS -b ${node}                  # number of nodes
#PBS -l cputim_job=${cputime}    # max accumulated cputime
#PBS -l memsz_job=${MemPerNode}  # memory per node
#PBS -o turi:${HOME_suite}/run/setout/Out.model.${LABELI}.${tmstp}.%s.MPI${cpu_mpi}.out
#PBS -j o                        # join stdout/stderr
#PBS -N $RES                     # job name


#$ -q global.q
#$ -pe mpi-npn${cpu_node} ${cpu_tot}
#$ -o una1:${HOME_suite}/run/setout/Out.model.${LABELI}.${tmstp}.%s.MPI${cpu_mpi}.out
#$ -j y
#$ -V
#$ -S /bin/bash
#$ -N $RES
#
cd ${EXECFILEPATH}
if [[ ${node} -eq  4 ]] ; then
mpirun  -v -host 0 -np ${cpu0} -host 1 -np ${cpu1} -host 2 -np ${cpu2} -host 3 -np ${cpu3} ${FSCR}/mpisep.sh
fi
if [[ ${node} -eq  3 ]] ; then
mpirun  -v -host 0 -np ${cpu0} -host 1 -np ${cpu1} -host 2 -np ${cpu2}  ${FSCR}/mpisep.sh
fi
if [[ ${node} -eq  2 ]] ; then
mpirun  -v -host 0 -np ${cpu0} -host 1 -np ${cpu1}  ${FSCR}/mpisep.sh
fi
if [[ ${node} -eq  1 ]] ; then
mpirun  -v -host 0 -np ${cpu0}  ${FSCR}/mpisep.sh
fi
EOF0
chmod +x ${SCRIPTFILEPATH}
qsub ${hold} ${SCRIPTFILEPATH}
echo  ${hold} ${SCRIPTFILEPATH}
