%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/IOLowLevel.f90
Compiled : 10/22/10  04:40:17
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmda -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps IOLowLevel.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/IOLowLevel.f90
Date     : 10/22/2010  04:40:23


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,nomodinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_15710/IOLowLevel.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.              !
    2.              !  $Author: pkubota $
    3.              !  $Date: 2009/04/07 19:52:01 $
    4.              !  $Revision: 1.13 $
    5.              !
    6.              MODULE IOLowLevel
    7.              
    8.                USE Constants, ONLY: &
    9.                     r4,i4, r8, ndavl, ndrq, ncdg
   10.              
   11.                USE Options, ONLY: &
   12.                     nfprt, nfctrl, nfsst, nferr, nfwaves, nfgauss, labelsi,labelsj
   13.              
   14.                USE Parallelism, ONLY: &
   15.                     MsgOne,           &
   16.                     MsgOut,           &
   17.                     MsgDump,          &
   18.                     FatalError
   19.              
   20.                IMPLICIT NONE
   21.              
   22.                PRIVATE
   23.              
   24.                PUBLIC :: ReadHead  
   25.                PUBLIC :: GReadHead
   26.                PUBLIC :: ReadField
   27.                PUBLIC :: GReadField
   28.                PUBLIC :: WriteHead  
   29.                PUBLIC :: GWriteHead
   30.                PUBLIC :: WriteField
   31.                PUBLIC :: GWriteField
   32.                PUBLIC :: FWriteField
   33.                PUBLIC :: WriteDir
   34.                PUBLIC :: WriteDire
   35.                PUBLIC :: ReadProgHead 
   36.                PUBLIC :: GReadProgHead
   37.                PUBLIC :: WriteProgHead
   38.                PUBLIC :: ReadLandSeaMask2
   39.                PUBLIC :: ReadVar
   40.                PUBLIC :: ReadGetALB
   41.                PUBLIC :: ReadGetSST
   42.                PUBLIC :: ReadGetSST2
   43.                PUBLIC :: ReadGetSLM  
   44.                PUBLIC :: ReadGetSNW
   45.                PUBLIC :: ReadGetNFTGZ
   46.                PUBLIC :: ReadMs
   47.                PUBLIC :: WriteMs
   48.                PUBLIC :: ReadGauss
   49.                PUBLIC :: WriteGauss
   50.                PUBLIC :: ReadOzone !hmjb
   51.                PUBLIC :: InitReadWriteSpec
   52.                PUBLIC :: WriteDiagHead
   53.                PUBLIC :: LandSeaMask
   54.                PUBLIC :: WriteGrdHist
   55.                PUBLIC :: WrTopoGrdHist
   56.              
   57.                INTERFACE WriteDiagHead
   58.                   MODULE PROCEDURE WriteDiagHead4, WriteDiagHead8
   59.                END INTERFACE
   60.                INTERFACE ReadOzone
   61.                   MODULE PROCEDURE ReadOzone8
   62.                END INTERFACE
   63.                INTERFACE ReadGetNFTGZ
   64.                   MODULE PROCEDURE ReadNFTGZ4, ReadNFTGZ8
   65.                END INTERFACE
   66.                INTERFACE ReadGetSNW 
   67.                   MODULE PROCEDURE ReadSNW4, ReadSNW8
   68.                END INTERFACE
   69.                INTERFACE ReadGetSLM 
   70.                   MODULE PROCEDURE ReadSLM4, ReadSLM8
   71.                END INTERFACE
   72.                INTERFACE ReadGetALB
   73.                   MODULE PROCEDURE ReadAlb4, ReadAlb8
   74.                END INTERFACE
   75.                INTERFACE ReadGetSST 
   76.                   MODULE PROCEDURE ReadSST4, ReadSST8 
   77.                END INTERFACE
   78.                INTERFACE ReadGetSST2 
   79.                   MODULE PROCEDURE ReadSST4Rec, ReadSST8Rec
   80.                END INTERFACE
   81.                INTERFACE ReadVar 
   82.                   MODULE PROCEDURE ReadVar4, ReadVar8
   83.                END INTERFACE
   84.                INTERFACE GReadHead
   85.                   MODULE PROCEDURE GReadHead4, GReadHead8
   86.                END INTERFACE
   87.                INTERFACE ReadHead
   88.                   MODULE PROCEDURE ReadHead4, ReadHead8
   89.                END INTERFACE
   90.                INTERFACE WriteHead
   91.                   MODULE PROCEDURE WriteHead4, WriteHead8
   92.                END INTERFACE
   93.                INTERFACE GWriteHead
   94.                   MODULE PROCEDURE GWriteHead4, GWriteHead8
   95.                END INTERFACE
   96.                INTERFACE ReadProgHead
   97.                   MODULE PROCEDURE ReadProgHead4, ReadProgHead8
   98.                END INTERFACE
   99.                INTERFACE GReadProgHead
  100.                   MODULE PROCEDURE GReadProgHead4, GReadProgHead8
  101.                END INTERFACE
  102.                INTERFACE WriteProgHead
  103.                   MODULE PROCEDURE WriteProgHead4, WriteProgHead8
  104.                END INTERFACE
  105.                INTERFACE WriteDir
  106.                   MODULE PROCEDURE WriteDir4, WriteDir8
  107.                END INTERFACE
  108.                INTERFACE WriteDire
  109.                   MODULE PROCEDURE WriteDire4, WriteDire8 
  110.                END INTERFACE
  111.                INTERFACE GReadField
  112.                   MODULE PROCEDURE GReadField41D, GReadField42D, GReadField81D, GReadField82D
  113.                END INTERFACE
  114.                INTERFACE ReadField
  115.                   MODULE PROCEDURE ReadField41D, ReadField42D, ReadField81D, ReadField82D
  116.                END INTERFACE
  117.                INTERFACE WriteField
  118.                   MODULE PROCEDURE WriteField41D, WriteField42D, WriteField81D, WriteField82D
  119.                END INTERFACE
  120.                INTERFACE GWriteField
  121.                   MODULE PROCEDURE GWriteField41D, GWriteField42D, GWriteField81D, GWriteField82D
  122.                END INTERFACE
  123.                INTERFACE FWriteField
  124.                   MODULE PROCEDURE FWriteField42D, FWriteField82D
  125.                END INTERFACE
  126.                INTERFACE ReadLandSeaMask2
  127.                   MODULE PROCEDURE ReadLandSeaMask2_4, ReadLandSeaMask2_8
  128.                END INTERFACE
  129.                INTERFACE LandSeaMask
  130.                   MODULE PROCEDURE LandSeaMask4, LandSeaMask8
  131.                END INTERFACE
  132.                INTERFACE  WriteGrdHist
  133.                   MODULE PROCEDURE WriteGrdH4, WriteGrdH8
  134.                END INTERFACE
  135.                INTERFACE  WrTopoGrdHist
  136.                   MODULE PROCEDURE WrTopoGrdH4,WrTopoGrdH8 
  137.                END INTERFACE
  138.                
  139.                CHARACTER(len=40), ALLOCATABLE :: reqdg(:)
  140.                CHARACTER(len=40), ALLOCATABLE :: combf(:)
  141.                LOGICAL   , ALLOCATABLE :: dodia(:)
  142.                INTEGER   , ALLOCATABLE :: itavl(:)
  143.                INTEGER   , ALLOCATABLE :: iavrq(:)
  144.                INTEGER   , ALLOCATABLE :: nucf (:)
  145.                INTEGER   , ALLOCATABLE :: lvrq (:)
  146.                INTEGER   , ALLOCATABLE :: nurq (:)
  147.                INTEGER   , ALLOCATABLE :: lvcf (:)
  148.                INTEGER   , ALLOCATABLE :: itcf (:)
  149.                INTEGER    :: mxavl   
  150.                INTEGER    :: icf  
  151.                INTEGER    :: mMax 
  152.                INTEGER    :: mnMax
  153.                INTEGER    :: kMax 
  154.                INTEGER    :: ijMax
  155.                INTEGER    :: iMax 
  156.                INTEGER    :: jMax 
  157.                INTEGER    :: ibMax
  158.                INTEGER    :: jbMax
  159.              
  160.              CONTAINS
  161.                SUBROUTINE InitReadWriteSpec(&
  162.                     mxavl_in,icf_in  ,mMax_in , &
  163.                     mnMax_in,kMax_in ,ijMax_in,iMax_in ,jMax_in ,ibMax_in, &
  164.                     jbMax_in, &
  165.                     reqdg_in,combf_in,dodia_in,itavl_in,iavrq_in,&
  166.                     nucf_in ,lvrq_in ,nurq_in ,lvcf_in ,itcf_in )
  167.              
  168.                  CHARACTER(len=40), INTENT(IN   ) :: reqdg_in(:)
  169.                  CHARACTER(len=40), INTENT(IN   ) :: combf_in(:)
  170.                  LOGICAL, INTENT(IN   ) :: dodia_in(:)
  171.                  INTEGER , INTENT(IN   ) :: itavl_in(:)
  172.                  INTEGER , INTENT(IN   ) :: iavrq_in(:)
  173.                  INTEGER , INTENT(IN   ) :: nucf_in (:)
  174.                  INTEGER , INTENT(IN   ) :: lvrq_in (:)
  175.                  INTEGER , INTENT(IN   ) :: nurq_in (:)
  176.                  INTEGER , INTENT(IN   ) :: lvcf_in (:)
  177.                  INTEGER , INTENT(IN   ) :: itcf_in (:)
  178.                  INTEGER , INTENT(IN   ) :: mxavl_in   
  179.                  INTEGER , INTENT(IN   ) :: icf_in  
  180.                  INTEGER , INTENT(IN   ) :: mMax_in 
  181.                  INTEGER , INTENT(IN   ) :: mnMax_in
  182.                  INTEGER , INTENT(IN   ) :: kMax_in 
  183.                  INTEGER , INTENT(IN   ) :: ijMax_in
  184.                  INTEGER , INTENT(IN   ) :: iMax_in 
  185.                  INTEGER , INTENT(IN   ) :: jMax_in 
  186.                  INTEGER , INTENT(IN   ) :: ibMax_in
  187.                  INTEGER , INTENT(IN   ) :: jbMax_in
  188.              
  189.                  ALLOCATE(reqdg(ndrq))
  190.                  ALLOCATE(combf(ncdg))  
  191.                  ALLOCATE(dodia(ndavl))
  192.                  ALLOCATE(itavl(ndavl))
  193.                  ALLOCATE(iavrq(ndavl))
  194.                  ALLOCATE(nucf (ncdg ))
  195.                  ALLOCATE(lvrq (ndrq ))
  196.                  ALLOCATE(nurq (ndrq ))
  197.                  ALLOCATE(lvcf (ncdg ))
  198.                  ALLOCATE(itcf (ncdg )) 
  199.                  mxavl =   mxavl_in
  200.                  icf   =     icf_in  
  201.                  mMax  =    mMax_in 
  202.                  mnMax =   mnMax_in
  203.                  kMax  =    kMax_in 
  204.                  ijMax =   ijMax_in
  205.                  iMax  =    iMax_in 
  206.                  jMax  =    jMax_in 
  207.                  ibMax =   ibMax_in
  208.                  jbMax =   jbMax_in
  209.              
  210.                  reqdg =  reqdg_in
  211.                  combf =  combf_in
  212.  f--------<>     dodia =  dodia_in
  213.  f--------<>     itavl =  itavl_in
  214.  f--------<>     iavrq =  iavrq_in
  215.  f--------<>     nucf  =  nucf_in 
  216.  f--------<>     lvrq  =  lvrq_in 
  217.  f--------<>     nurq  =  nurq_in 
  218.  f--------<>     lvcf  =  lvcf_in 
  219.  f--------<>     itcf  =  itcf_in 
  220.              
  221.                END SUBROUTINE InitReadWriteSpec
  222.              
  223.                SUBROUTINE ReadHead4(n, ifday, tod, idate, idatec, si, sl, kMax)
  224.                  INTEGER, INTENT(IN)  :: n
  225.                  INTEGER, INTENT(IN)  :: kMax
  226.                  INTEGER(KIND=i4), INTENT(OUT) :: ifday
  227.                  REAL   (KIND=r4), INTENT(OUT) :: tod
  228.                  INTEGER(KIND=i4), INTENT(OUT) :: idate(4)
  229.                  INTEGER(KIND=i4), INTENT(OUT) :: idatec(4)
  230.                  REAL   (KIND=r4), INTENT(OUT) :: si(:)
  231.                  REAL   (KIND=r4), INTENT(OUT) :: sl(:)
  232.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadHead4)**"
  233.                  INTEGER :: lMax
  234.                  lMax=SIZE(sl)
  235.                  IF (kMax /= lMax) THEN
  236.                     WRITE (UNIT=nferr, FMT='(2(A,I3))') ' kMax = ',kMax, ' is /= lMax', lMax
  237.                     STOP h
  238.                  END IF
  239.                  READ(UNIT=n)ifday, tod, idate, idatec, si, sl
  240.                END SUBROUTINE ReadHead4
  241.                SUBROUTINE ReadHead8(n, ifday, tod, idate, idatec, si, sl, kMax)
  242.                  INTEGER, INTENT(IN)  :: n
  243.                  INTEGER, INTENT(IN)  :: kMax
  244.                  INTEGER, INTENT(OUT) :: ifday
  245.                  REAL   (KIND=r8), INTENT(OUT) :: tod
  246.                  INTEGER, INTENT(OUT) :: idate(4)
  247.                  INTEGER, INTENT(OUT) :: idatec(4)
  248.                  REAL   (KIND=r8), INTENT(OUT) :: si(:)
  249.                  REAL   (KIND=r8), INTENT(OUT) :: sl(:)
  250.                  INTEGER(KIND=i4) :: iaux(8),ifday4
  251.                  REAL   (KIND=r4) :: raux1(kmax), raux2(kmax+1),tod4
  252.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadHead8)**"
  253.                  INTEGER :: lMax
  254.                  lMax=SIZE(sl)
  255.                  IF (kMax /= lMax) THEN
  256.                     WRITE (UNIT=nferr, FMT='(2(A,I3))') ' kMax = ',kMax, ' is /= lMax', lMax
  257.                     STOP h
  258.                  END IF
  259.                  READ(UNIT=n)ifday4,tod4,iaux, raux2, raux1
  260.                  ifday  = ifday4
  261.                  tod    = tod4
  262.  Vsf------<>     idate  = INT(iaux(1:4))
  263.  f--------<>     idatec = INT(iaux(5:8))
  264.  V--------<>     si     = REAL(raux2 , r8)
  265.  V--------<>     sl     = REAL(raux1 , r8)
  266.                END SUBROUTINE ReadHead8
  267.                SUBROUTINE GReadHead4(n, ifday, tod, idate, idatec, si, sl, kMax)
  268.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  269.                  INTEGER(KIND=i4), INTENT(IN)  :: kMax
  270.                  INTEGER(KIND=i4), INTENT(OUT) :: ifday
  271.                  REAL   (KIND=r4), INTENT(OUT) :: tod
  272.                  INTEGER(KIND=i4), INTENT(OUT) :: idate(4)
  273.                  INTEGER(KIND=i4), INTENT(OUT) :: idatec(4)
  274.                  REAL   (KIND=r4), INTENT(OUT) :: si(:)
  275.                  REAL   (KIND=r4), INTENT(OUT) :: sl(:)
  276.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadHead4)**"
  277.                  INTEGER :: lMax
  278.                  lMax=SIZE(sl)
  279.                  IF (kMax /= lMax) THEN
  280.                     WRITE (UNIT=nferr, FMT='(2(A,I3))') ' kMax = ',kMax, ' is /= lMax', lMax
  281.                     STOP h
  282.                  END IF
  283.                  READ(UNIT=n)ifday, tod, idate, idatec, si, sl
  284.                END SUBROUTINE GReadHead4
  285.                SUBROUTINE GReadHead8(n, ifday, tod, idate, idatec, si, sl, kMax)
  286.                  INTEGER, INTENT(IN)  :: n
  287.                  INTEGER, INTENT(IN)  :: kMax
  288.                  INTEGER, INTENT(OUT) :: ifday
  289.                  REAL   (KIND=r8), INTENT(OUT) :: tod
  290.                  INTEGER, INTENT(OUT) :: idate(4)
  291.                  INTEGER, INTENT(OUT) :: idatec(4)
  292.                  REAL   (KIND=r8), INTENT(OUT) :: si(:)
  293.                  REAL   (KIND=r8), INTENT(OUT) :: sl(:)
  294.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadHead8)**"
  295.                  INTEGER :: lMax
  296.                  lMax=SIZE(sl)
  297.                  IF (kMax /= lMax) THEN
  298.                     WRITE (UNIT=nferr, FMT='(2(A,I3))') ' kMax = ',kMax, ' is /= lMax', lMax
  299.                     STOP h
  300.                  END IF
  301.                  READ(UNIT=n)ifday, tod, idate, idatec, si, sl
  302.                END SUBROUTINE GReadHead8
  303.              
  304.                SUBROUTINE ReadField42D(n, field)
  305.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  306.                  REAL   (KIND=r4), INTENT(OUT) :: field(:,:)
  307.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField42D)**"
  308.                  INTEGER :: k
  309.                  INTEGER :: d2
  310.                  d2 = SIZE(field,2)
  311.  1---------<     DO k = 1, d2
  312.  1                  READ(UNIT=n)field(:,k)
  313.  1--------->     END DO
  314.                END SUBROUTINE ReadField42D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 314 
  Named Constant "H" is not used.

  315.                SUBROUTINE ReadField82D(n, field)
  316.                  INTEGER, INTENT(IN)  :: n
  317.                  REAL   (KIND=r8), INTENT(OUT) :: field(:,:)
  318.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  319.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField82D)**"
  320.                  INTEGER :: k
  321.                  INTEGER :: d2
  322.                  d2 = SIZE(field,2)
  323.  1---------<     DO k=1, d2
  324.  1                  READ(UNIT=n)raux3
  325.  1 V------<>        field(:,k) = REAL(raux3, r8)
  326.  1--------->     END DO
  327.                END SUBROUTINE ReadField82D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 327 
  Named Constant "H" is not used.

  328.                SUBROUTINE ReadField41D(n, field)
  329.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  330.                  REAL   (KIND=r4), INTENT(OUT) :: field(:)
  331.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField41D)**"
  332.                  READ(UNIT=n)field
  333.                END SUBROUTINE ReadField41D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 333 
  Named Constant "H" is not used.

  334.                SUBROUTINE ReadField81D(n, field)
  335.                  INTEGER, INTENT(IN)  :: n
  336.                  REAL   (KIND=r8), INTENT(OUT) :: field(:)
  337.                  REAL   (KIND=r4) :: raux3(SIZE(field))
  338.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField81D)**"
  339.                  READ(UNIT=n)raux3
  340.  V--------<>     field = REAL(raux3, r8)
  341.                END SUBROUTINE ReadField81D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 341 
  Named Constant "H" is not used.

  342.              
  343.              
  344.                SUBROUTINE GReadField42D(n, field)
  345.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  346.                  REAL   (KIND=r4), INTENT(OUT) :: field(:,:)
  347.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField42D)**"
  348.                  INTEGER :: k
  349.                  INTEGER :: d2
  350.                  d2 = SIZE(field,2)
  351.  1---------<     DO k = 1, d2
  352.  1                  READ(UNIT=n)field(:,k)
  353.  1--------->     END DO
  354.                END SUBROUTINE GReadField42D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 354 
  Named Constant "H" is not used.

  355.                SUBROUTINE GReadField82D(n, field)
  356.                  INTEGER, INTENT(IN)  :: n
  357.                  REAL   (KIND=r8), INTENT(OUT) :: field(:,:)
  358.                  REAL   (KIND=r8) :: raux3(SIZE(field,1))
  359.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField82D)**"
  360.                  INTEGER :: k
  361.                  INTEGER :: d2
  362.                  d2 = SIZE(field,2)
  363.  1---------<     DO k=1, d2
  364.  1                  READ(UNIT=n)raux3
  365.  1 V------<>        field(:,k) =raux3
  366.  1--------->     END DO
  367.                END SUBROUTINE GReadField82D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 367 
  Named Constant "H" is not used.

  368.                SUBROUTINE GReadField41D(n, field)
  369.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  370.                  REAL   (KIND=r4), INTENT(OUT) :: field(:)
  371.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField41D)**"
  372.                  READ(UNIT=n)field
  373.                END SUBROUTINE GReadField41D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 373 
  Named Constant "H" is not used.

  374.                SUBROUTINE GReadField81D(n, field)
  375.                  INTEGER, INTENT(IN)  :: n
  376.                  REAL   (KIND=r8), INTENT(OUT) :: field(:)
  377.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadField81D)**"
  378.                  READ(UNIT=n)field
  379.                END SUBROUTINE GReadField81D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 379 
  Named Constant "H" is not used.

  380.              
  381.                SUBROUTINE WriteHead4(n, ifday, tod, idate, idatec, si, sl)
  382.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  383.                  INTEGER(KIND=i4), INTENT(IN)  :: ifday
  384.                  REAL   (KIND=r4), INTENT(IN)  :: tod
  385.                  INTEGER(KIND=i4), INTENT(IN)  :: idate(4)
  386.                  INTEGER(KIND=i4), INTENT(IN)  :: idatec(4)
  387.                  REAL   (KIND=r4), INTENT(IN)  :: si(:)
  388.                  REAL   (KIND=r4), INTENT(IN)  :: sl(:)
  389.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteHead4)**"
  390.                  WRITE(UNIT=n)ifday, tod, idate, idatec, si, sl
  391.                END SUBROUTINE WriteHead4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 391 
  Named Constant "H" is not used.

  392.                SUBROUTINE WriteHead8(n, ifday, tod, idate, idatec, si, sl)
  393.                  INTEGER, INTENT(IN)  :: n
  394.                  INTEGER, INTENT(IN)  :: ifday
  395.                  REAL   (KIND=r8), INTENT(IN)  :: tod
  396.                  INTEGER, INTENT(IN)  :: idate(4)
  397.                  INTEGER, INTENT(IN)  :: idatec(4)
  398.                  REAL   (KIND=r8), INTENT(IN)  :: si(:)
  399.                  REAL   (KIND=r8), INTENT(IN)  :: sl(:)
  400.                  INTEGER(KIND=i4) :: iaux(10)
  401.                  REAL   (KIND=r4) :: raux1(kmax), raux2(kmax+1)
  402.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteHead8)**"
  403.                  iaux(  1 ) = INT (ifday , i4)
  404.                  iaux(  2 ) = INT (tod   , i4)
  405.  Vsf------<>     iaux(3:6 ) = INT (idate , i4)
  406.  f--------<>     iaux(7:10) = INT (idatec, i4)
  407.  V--------<>     raux2      = REAL(si    , r4)
  408.  V--------<>     raux1      = REAL(sl    , r4)
  409.                  WRITE(UNIT=n)iaux, raux2, raux1
  410.                END SUBROUTINE WriteHead8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 410 
  Named Constant "H" is not used.

  411.              
  412.                SUBROUTINE GWriteHead4(n, ifday, tod, idate, idatec, si, sl)
  413.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  414.                  INTEGER(KIND=i4), INTENT(IN)  :: ifday
  415.                  REAL   (KIND=r4), INTENT(IN)  :: tod
  416.                  INTEGER(KIND=i4), INTENT(IN)  :: idate(4)
  417.                  INTEGER(KIND=i4), INTENT(IN)  :: idatec(4)
  418.                  REAL   (KIND=r4), INTENT(IN)  :: si(:)
  419.                  REAL   (KIND=r4), INTENT(IN)  :: sl(:)
  420.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteHead4)**"
  421.                  WRITE(UNIT=n)ifday, tod, idate, idatec, si, sl
  422.                END SUBROUTINE GWriteHead4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 422 
  Named Constant "H" is not used.

  423.                SUBROUTINE GWriteHead8(n, ifday, tod, idate, idatec, si, sl)
  424.                  INTEGER, INTENT(IN)  :: n
  425.                  INTEGER, INTENT(IN)  :: ifday
  426.                  REAL   (KIND=r8), INTENT(IN)  :: tod
  427.                  INTEGER, INTENT(IN)  :: idate(4)
  428.                  INTEGER, INTENT(IN)  :: idatec(4)
  429.                  REAL   (KIND=r8), INTENT(IN)  :: si(:)
  430.                  REAL   (KIND=r8), INTENT(IN)  :: sl(:)
  431.                  INTEGER :: iaux(10)
  432.                  REAL   (KIND=r8) :: raux1(kmax), raux2(kmax+1)
  433.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteHead8)**"
  434.                  iaux(  1 ) = INT (ifday)
  435.                  iaux(  2 ) = INT (tod)
  436.  Vsf------<>     iaux(3:6 ) = INT (idate)
  437.  f--------<>     iaux(7:10) = INT (idatec)
  438.  V--------<>     raux2      = REAL(si,r8)
  439.  V--------<>     raux1      = REAL(sl,r8)
  440.                  WRITE(UNIT=n)iaux, raux2, raux1
  441.                END SUBROUTINE GWriteHead8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 441 
  Named Constant "H" is not used.

  442.              
  443.                SUBROUTINE WriteField42D(n, field)
  444.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  445.                  REAL   (KIND=r4), INTENT(IN)  :: field(:,:)
  446.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  447.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField42D)**"
  448.                  INTEGER :: k, l
  449.                  INTEGER :: d1, d2
  450.                  d2=SIZE(field,2);d1=SIZE(field,1)
  451.  1---------<     DO k = 1, d2
  452.  1 r8------<        DO l = 1, d1
  453.  1 r8                  raux3(l) = field(l,k)
  454.  1 r8------>        END DO
  455.  1                  WRITE(UNIT=n)raux3(:)
  456.  1--------->     END DO
  457.                END SUBROUTINE WriteField42D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 457 
  Named Constant "H" is not used.

  458.                SUBROUTINE WriteField82D(n, field)
  459.                  INTEGER, INTENT(IN)  :: n
  460.                  REAL   (KIND=r8), INTENT(IN)  :: field(:,:)
  461.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  462.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField82D)**"
  463.                  INTEGER :: k, l
  464.                  INTEGER :: d1, d2
  465.                  d2=SIZE(field,2);d1=SIZE(field,1)
  466.  1---------<     DO k = 1, d2
  467.  1 Vpr2----<        DO l = 1, d1
  468.  1 Vpr2                raux3(l) = REAL(field(l,k),r4)
  469.  1 Vpr2---->        END DO
  470.  1                  WRITE(UNIT=n)raux3(:)
  471.  1--------->     END DO
  472.                END SUBROUTINE WriteField82D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 472 
  Named Constant "H" is not used.

  473.              
  474.              
  475.                SUBROUTINE WriteField41D(n, field)
  476.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  477.                  REAL   (KIND=r4), INTENT(IN)  :: field(:)
  478.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  479.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField41D)**"
  480.                  INTEGER :: l
  481.                  INTEGER :: d1
  482.                  d1=SIZE(field,1)
  483.  r8--------<     DO l = 1, d1
  484.  r8                 raux3(l) = field(l)
  485.  r8-------->     END DO
  486.                  WRITE(UNIT=n)raux3(:)
  487.                END SUBROUTINE WriteField41D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 487 
  Named Constant "H" is not used.

  488.                SUBROUTINE WriteField81D(n, field)
  489.                  INTEGER, INTENT(IN)  :: n
  490.                  REAL   (KIND=r8), INTENT(IN)  :: field(:)
  491.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  492.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField81D)**"
  493.                  INTEGER :: l
  494.                  INTEGER :: d1
  495.                  d1=SIZE(field,1)
  496.  Vpr2------<     DO l = 1, d1
  497.  Vpr2               raux3(l) = REAL(field(l),r4)
  498.  Vpr2------>     END DO
  499.                  WRITE(UNIT=n)raux3(:)
  500.                END SUBROUTINE WriteField81D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 500 
  Named Constant "H" is not used.

  501.              
  502.              
  503.                SUBROUTINE GWriteField42D(n, field)
  504.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  505.                  REAL   (KIND=r4), INTENT(IN)  :: field(:,:)
  506.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  507.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField42D)**"
  508.                  INTEGER :: k, l
  509.                  INTEGER :: d1, d2
  510.                  d2=SIZE(field,2);d1=SIZE(field,1)
  511.  1---------<     DO k = 1, d2
  512.  1 r8------<        DO l = 1, d1
  513.  1 r8                  raux3(l) = field(l,k)
  514.  1 r8------>        END DO
  515.  1                  WRITE(UNIT=n)raux3(:)
  516.  1--------->     END DO
  517.                END SUBROUTINE GWriteField42D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 517 
  Named Constant "H" is not used.

  518.                SUBROUTINE GWriteField82D(n, field)
  519.                  INTEGER, INTENT(IN)  :: n
  520.                  REAL   (KIND=r8), INTENT(IN)  :: field(:,:)
  521.                  REAL   (KIND=r8) :: raux3(SIZE(field,1))
  522.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField82D)**"
  523.                  INTEGER :: k, l
  524.                  INTEGER :: d1, d2
  525.                  d2=SIZE(field,2);d1=SIZE(field,1)
  526.  1---------<     DO k = 1, d2
  527.  1 Vpr4----<        DO l = 1, d1
  528.  1 Vpr4                raux3(l) = field(l,k)
  529.  1 Vpr4---->        END DO
  530.  1                  WRITE(UNIT=n)raux3(:)
  531.  1--------->     END DO
  532.                END SUBROUTINE GWriteField82D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 532 
  Named Constant "H" is not used.

  533.              
  534.              
  535.                SUBROUTINE GWriteField41D(n, field)
  536.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  537.                  REAL   (KIND=r4), INTENT(IN)  :: field(:)
  538.                  REAL   (KIND=r4) :: raux3(SIZE(field,1))
  539.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField41D)**"
  540.                  INTEGER :: l
  541.                  INTEGER :: d1
  542.                  d1=SIZE(field,1)
  543.  r8--------<     DO l = 1, d1
  544.  r8                 raux3(l) = field(l)
  545.  r8-------->     END DO
  546.                  WRITE(UNIT=n)raux3(:)
  547.                END SUBROUTINE GWriteField41D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 547 
  Named Constant "H" is not used.

  548.                SUBROUTINE GWriteField81D(n, field)
  549.                  INTEGER, INTENT(IN)  :: n
  550.                  REAL   (KIND=r8), INTENT(IN)  :: field(:)
  551.                  REAL   (KIND=r8) :: raux3(SIZE(field,1))
  552.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField81D)**"
  553.                  INTEGER :: l
  554.                  INTEGER :: d1
  555.                  d1=SIZE(field,1)
  556.  Vpr4------<     DO l = 1, d1
  557.  Vpr4               raux3(l) = field(l)
  558.  Vpr4------>     END DO
  559.                  WRITE(UNIT=n)raux3(:)
  560.                END SUBROUTINE GWriteField81D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 560 
  Named Constant "H" is not used.

  561.              
  562.                SUBROUTINE FWriteField42D(n, field)
  563.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  564.                  REAL   (KIND=r4), INTENT(IN)  :: field(:,:)
  565.                  REAL   (KIND=r4) :: raux3(SIZE(field,1)*SIZE(field,2))
  566.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField42D)**"
  567.                  INTEGER :: k, l
  568.                  INTEGER :: d1, d2
  569.                  d2=SIZE(field,2);d1=SIZE(field,1)
  570.  1---------<     DO k = 1, d2
  571.  1 r8------<        DO l = 1, d1
  572.  1 r8                  raux3(l+(k-1)*d1) = field(l,k)
  573.  1 r8------>        END DO
  574.  1--------->     END DO
  575.                  WRITE(UNIT=n)raux3(:)
  576.                END SUBROUTINE FWriteField42D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 576 
  Named Constant "H" is not used.

  577.              
  578.                SUBROUTINE FWriteField82D(n, field)
  579.                  INTEGER, INTENT(IN)  :: n
  580.                  REAL   (KIND=r8), INTENT(IN)  :: field(:,:)
  581.                  REAL   (KIND=r4) :: raux3(SIZE(field,1)*SIZE(field,2))
  582.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteField82D)**"
  583.                  INTEGER :: k, l
  584.                  INTEGER :: d1, d2
  585.                  d2=SIZE(field,2);d1=SIZE(field,1)
  586.  1---------<     DO k = 1, d2
  587.  1 Vpr2----<        DO l = 1, d1
  588.  1 Vpr2                raux3(l+(k-1)*d1) = field(l,k)
  589.  1 Vpr2---->        END DO
  590.  1--------->     END DO
  591.                  WRITE(UNIT=n)raux3(:)
  592.                END SUBROUTINE FWriteField82D
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 592 
  Named Constant "H" is not used.

  593.              
  594.              
  595.                SUBROUTINE WriteDir4(n, idate, ihr, iday, mon, iyr, del,tod,ifday)
  596.                  INTEGER(KIND=i4), INTENT(IN ) :: n
  597.                  INTEGER(KIND=i4), INTENT(IN ) :: idate(4)
  598.                  INTEGER(KIND=i4), INTENT(IN ) :: ihr
  599.                  INTEGER(KIND=i4), INTENT(IN ) :: iday
  600.                  INTEGER(KIND=i4), INTENT(IN ) :: mon
  601.                  INTEGER(KIND=i4), INTENT(IN ) :: iyr
  602.                  REAL    (KIND=r4), INTENT(IN ) :: del(kMax)
  603.                  REAL    (KIND=r4), INTENT(IN ) :: tod
  604.                  INTEGER(KIND=i4)              :: ifday
  605.                  INTEGER(KIND=i4)              :: isg(2)
  606.              
  607.                  CHARACTER (LEN= 4) :: imdl
  608.                  CHARACTER (LEN=40) :: jttl
  609.                  CHARACTER (LEN=20), PARAMETER :: ittl='CPTEC SIGMA VERS 2.0'
  610.                  CHARACTER (LEN= 4), PARAMETER :: nexp='0001'
  611.                  CHARACTER (LEN=40), PARAMETER :: orogra = 'TOPOGRAPHY' 
  612.                  CHARACTER (LEN=40), PARAMETER :: lseamk = 'LAND SEA MASK'
  613.                  CHARACTER (LEN=40), PARAMETER :: lnsurf = 'LN SURFACE PRESSURE'
  614.                  CHARACTER (LEN=40), PARAMETER :: divrgn = 'DIVERGENCE'
  615.                  CHARACTER (LEN=40), PARAMETER :: vortic = 'VORTICITY'
  616.                  CHARACTER (LEN=40), PARAMETER :: spechu = 'SPECIFIC HUMIDITY'
  617.                  CHARACTER (LEN=40), PARAMETER :: tempvi = 'VIRTUAL TEMPERATURE'
  618.                  CHARACTER (LEN=40), PARAMETER :: surfte = 'SURFACE TEMPERATURE'
  619.                  CHARACTER (LEN=40), PARAMETER :: srfrou = 'ROUGHNESS LENGTH'
  620.                  CHARACTER (LEN=40), PARAMETER :: deepte = 'DEEP SOIL TEMPERATURE'
  621.                  CHARACTER (LEN=40), PARAMETER :: stcnpy = 'STORAGE ON CANOPY'
  622.                  CHARACTER (LEN=40), PARAMETER :: stgrnd = 'STORAGE ON GROUND'
  623.                  CHARACTER (LEN=40), PARAMETER :: wt1soi = 'SOIL WETNESS OF SURFACE'
  624.                  CHARACTER (LEN=40), PARAMETER :: wt2soi = 'SOIL WETNESS OF ROOT ZONE'
  625.                  CHARACTER (LEN=40), PARAMETER :: wt3soi = 'SOIL WETNESS OF DRAINAGE ZONE' 
  626.                  CHARACTER (LEN=40), PARAMETER :: temp2m = 'TEMPERATURE AT 2-M FROM SURFACE' 
  627.                  CHARACTER (LEN=40), PARAMETER :: umes2m = 'SPECIFIC HUMIDITY AT 2-M FROM SURFACE' 
  628.                  CHARACTER (LEN=40), PARAMETER :: uve10m = 'ZONAL WIND AT 10-M FROM SURFACE'
  629.                  CHARACTER (LEN=40), PARAMETER :: vve10m = 'MERID WIND AT 10-M FROM SURFACE'
  630.                  CHARACTER (LEN=29), PARAMETER :: fmt1='(A40,2X,A4,2X,I8,3X,I4,4X,I3)'
  631.                  CHARACTER (LEN=4 ), PARAMETER :: diag='DIAG'
  632.                  INTEGER :: m
  633.                  INTEGER :: nn
  634.                  INTEGER :: ix
  635.              
  636.                  isg(1)=iMax*jMax
  637.                  isg(2)=2*mnMax
  638.              
  639.                  jttl='CPTEC AGCM REVIS 1.0 2000  T   L    COLD'
  640.                  WRITE (jttl(29:31), '(i3.3)') mMax-1
  641.                  WRITE (jttl(33:34), '(i2.2)') kMax
  642.                  WRITE (imdl, '(A1,I3.3)') 'T', mMax-1
  643.              
  644.                  WRITE (UNIT=n, FMT='(A20)')   ittl
  645.                  WRITE (UNIT=n, FMT='(A4,1X,A4,1X,A4,1X,11I5,1X,A4)') &
  646.                       nexp, 'SEQU', imdl, mMax, kmax, kmax, &
  647.                       ihr, iday, mon, iyr, idate, 'TAPE'
  648.                  WRITE (UNIT=n, FMT='(A40)')   jttl
  649.                  WRITE (UNIT=n, FMT='(5E16.8)')   del
  650.                  WRITE (UNIT=n, FMT=fmt1) orogra, 'FIXD', 2*mnMax, 1, 10
  651.                  WRITE (UNIT=n, FMT=fmt1) lseamk, 'FIXD', ijmax, 1, 0
  652.                  WRITE (UNIT=n, FMT=fmt1) lnsurf, 'PROG', 2*mnMax, 1, 142
  653.                  WRITE (UNIT=n, FMT=fmt1) divrgn, 'PROG', 2*mnMax, kmax, 50
  654.                  WRITE (UNIT=n, FMT=fmt1) vortic, 'PROG', 2*mnMax, kmax, 50
  655.                  WRITE (UNIT=n, FMT=fmt1) spechu, 'PROG', 2*mnMax, kmax, 0
  656.                  WRITE (UNIT=n, FMT=fmt1) tempvi, 'PROG', 2*mnMax, kmax, 40
  657.                  WRITE (UNIT=n, FMT=fmt1) srfrou, 'PROG', ijmax, 1, 10
  658.                  WRITE (UNIT=n, FMT=fmt1) surfte, 'PROG', ijmax, 1, 40
  659.                  WRITE (UNIT=n, FMT=fmt1) deepte, 'PROG', ijmax, 1, 40
  660.                  WRITE (UNIT=n, FMT=fmt1) stcnpy, 'PROG', ijmax, 1, 10
  661.                  WRITE (UNIT=n, FMT=fmt1) stgrnd, 'PROG', ijmax, 1, 10
  662.                  WRITE (UNIT=n, FMT=fmt1) wt1soi, 'PROG', ijmax, 1, 0
  663.                  WRITE (UNIT=n, FMT=fmt1) wt2soi, 'PROG', ijmax, 1, 0
  664.                  WRITE (UNIT=n, FMT=fmt1) wt3soi, 'PROG', ijmax, 1, 0
  665.                  WRITE (UNIT=n, FMT=fmt1) temp2m, 'PROG', ijmax, 1, 40
  666.                  WRITE (UNIT=n, FMT=fmt1) umes2m, 'PROG', ijmax, 1, 0
  667.                  WRITE (UNIT=n, FMT=fmt1) uve10m, 'PROG', ijmax, 1, 60
  668.                  WRITE (UNIT=n, FMT=fmt1) vve10m, 'PROG', ijmax, 1, 60
  669.                  IF (ifday == 0 .and. tod == 0.0_r8 ) RETURN
  670.              
  671.  1---------<     DO m=1,mxavl
  672.  1                  IF (dodia(m) .and. (iavrq(m) > 0)) THEN
  673.  1                     nn=iavrq(m)
  674.  1                     WRITE(UNIT=n,FMT=fmt1)reqdg(nn),diag,isg(itavl(m)),lvrq(nn),nurq(nn)
  675.  1                     IF(nfctrl(91) >= 1)WRITE(UNIT=nfprt,FMT=161) reqdg(nn),diag, &
  676.  1                          isg(itavl(m)),lvrq(nn),nurq(nn)
  677.  1                  END IF
  678.  1--------->     END DO
  679.              
  680.                  IF(icf.ne.0)THEN
  681.  1---------<        DO ix=1,icf
  682.  1                     WRITE(UNIT=n,FMT=fmt1)combf(ix),diag,isg(itcf(ix)),lvcf(ix),nucf(ix)
  683.  1                     IF(nfctrl(91) >= 1)WRITE(UNIT=nfprt,FMT=161) combf(ix),diag, &
  684.  1                          isg(itcf(ix)),lvcf(ix),nucf(ix)
  685.  1--------->        END DO
  686.                  END IF
  687.              161 FORMAT(' ',A40,2X,A4,2X,I8,3X,I4,4X,I3)    
  688.                END SUBROUTINE WriteDir4
  689.                SUBROUTINE WriteDir8(n, idate, ihr, iday, mon, iyr, del,tod,ifday)
  690.                  INTEGER , INTENT(IN ) :: n
  691.                  INTEGER , INTENT(IN ) :: idate(4)
  692.                  INTEGER , INTENT(IN ) :: ihr
  693.                  INTEGER , INTENT(IN ) :: iday
  694.                  INTEGER , INTENT(IN ) :: mon
  695.                  INTEGER , INTENT(IN ) :: iyr
  696.                  REAL    (KIND=r8), INTENT(IN ) :: del(kMax) 
  697.                  REAL    (KIND=r8), INTENT(IN ) :: tod
  698.                  INTEGER , INTENT(IN ) :: ifday
  699.                  INTEGER               :: isg(2)
  700.              
  701.                  CHARACTER (LEN= 4) :: imdl
  702.                  CHARACTER (LEN=40) :: jttl
  703.                  CHARACTER (LEN=20), PARAMETER :: ittl='CPTEC SIGMA VERS 2.0'
  704.                  CHARACTER (LEN= 4), PARAMETER :: nexp='0001'
  705.                  CHARACTER (LEN=40), PARAMETER :: orogra = 'TOPOGRAPHY' 
  706.                  CHARACTER (LEN=40), PARAMETER :: lseamk = 'LAND SEA MASK'
  707.                  CHARACTER (LEN=40), PARAMETER :: lnsurf = 'LN SURFACE PRESSURE'
  708.                  CHARACTER (LEN=40), PARAMETER :: divrgn = 'DIVERGENCE'
  709.                  CHARACTER (LEN=40), PARAMETER :: vortic = 'VORTICITY'
  710.                  CHARACTER (LEN=40), PARAMETER :: spechu = 'SPECIFIC HUMIDITY'
  711.                  CHARACTER (LEN=40), PARAMETER :: tempvi = 'VIRTUAL TEMPERATURE'
  712.                  CHARACTER (LEN=40), PARAMETER :: surfte = 'SURFACE TEMPERATURE'
  713.                  CHARACTER (LEN=40), PARAMETER :: srfrou = 'ROUGHNESS LENGTH'
  714.                  CHARACTER (LEN=40), PARAMETER :: deepte = 'DEEP SOIL TEMPERATURE'
  715.                  CHARACTER (LEN=40), PARAMETER :: stcnpy = 'STORAGE ON CANOPY'
  716.                  CHARACTER (LEN=40), PARAMETER :: stgrnd = 'STORAGE ON GROUND'
  717.                  CHARACTER (LEN=40), PARAMETER :: wt1soi = 'SOIL WETNESS OF SURFACE'
  718.                  CHARACTER (LEN=40), PARAMETER :: wt2soi = 'SOIL WETNESS OF ROOT ZONE'
  719.                  CHARACTER (LEN=40), PARAMETER :: wt3soi = 'SOIL WETNESS OF DRAINAGE ZONE' 
  720.                  CHARACTER (LEN=40), PARAMETER :: temp2m = 'TEMPERATURE AT 2-M FROM SURFACE' 
  721.                  CHARACTER (LEN=40), PARAMETER :: umes2m = 'SPECIFIC HUMIDITY AT 2-M FROM SURFACE' 
  722.                  CHARACTER (LEN=40), PARAMETER :: uve10m = 'ZONAL WIND AT 10-M FROM SURFACE'
  723.                  CHARACTER (LEN=40), PARAMETER :: vve10m = 'MERID WIND AT 10-M FROM SURFACE'
  724.                  CHARACTER (LEN=29), PARAMETER :: fmt1='(A40,2X,A4,2X,I8,3X,I4,4X,I3)'
  725.                  CHARACTER (LEN=4 ), PARAMETER :: diag='DIAG'
  726.                  INTEGER :: m
  727.                  INTEGER :: nn
  728.                  INTEGER :: ix
  729.              
  730.                  isg(1)=iMax*jMax
  731.                  isg(2)=2*mnMax
  732.              
  733.                  jttl='CPTEC AGCM REVIS 1.0 2000  T   L    COLD'
  734.                  WRITE (jttl(29:31), '(i3.3)') mMax-1
  735.                  WRITE (jttl(33:34), '(i2.2)') kMax
  736.                  WRITE (imdl, '(A1,I3.3)') 'T', mMax-1
  737.              
  738.                  WRITE (UNIT=n, FMT='(A20)')   ittl
  739.                  WRITE (UNIT=n, FMT='(A4,1X,A4,1X,A4,1X,11I5,1X,A4)') &
  740.                       nexp, 'SEQU', imdl, mMax, kmax, kmax, &
  741.                       ihr, iday, mon, iyr, idate, 'TAPE'
  742.                  WRITE (UNIT=n, FMT='(A40)')   jttl
  743.                  WRITE (UNIT=n, FMT='(5E16.8)')   del
  744.                  WRITE (UNIT=n, FMT=fmt1) orogra, 'FIXD', 2*mnMax, 1, 10
  745.                  WRITE (UNIT=n, FMT=fmt1) lseamk, 'FIXD', ijmax, 1, 0
  746.                  WRITE (UNIT=n, FMT=fmt1) lnsurf, 'PROG', 2*mnMax, 1, 142
  747.                  WRITE (UNIT=n, FMT=fmt1) divrgn, 'PROG', 2*mnMax, kmax, 50
  748.                  WRITE (UNIT=n, FMT=fmt1) vortic, 'PROG', 2*mnMax, kmax, 50
  749.                  WRITE (UNIT=n, FMT=fmt1) spechu, 'PROG', 2*mnMax, kmax, 0
  750.                  WRITE (UNIT=n, FMT=fmt1) tempvi, 'PROG', 2*mnMax, kmax, 40
  751.                  WRITE (UNIT=n, FMT=fmt1) srfrou, 'PROG', ijmax, 1, 10
  752.                  WRITE (UNIT=n, FMT=fmt1) surfte, 'PROG', ijmax, 1, 40
  753.                  WRITE (UNIT=n, FMT=fmt1) deepte, 'PROG', ijmax, 1, 40
  754.                  WRITE (UNIT=n, FMT=fmt1) stcnpy, 'PROG', ijmax, 1, 10
  755.                  WRITE (UNIT=n, FMT=fmt1) stgrnd, 'PROG', ijmax, 1, 10
  756.                  WRITE (UNIT=n, FMT=fmt1) wt1soi, 'PROG', ijmax, 1, 0
  757.                  WRITE (UNIT=n, FMT=fmt1) wt2soi, 'PROG', ijmax, 1, 0
  758.                  WRITE (UNIT=n, FMT=fmt1) wt3soi, 'PROG', ijmax, 1, 0
  759.                  WRITE (UNIT=n, FMT=fmt1) temp2m, 'PROG', ijmax, 1, 40
  760.                  WRITE (UNIT=n, FMT=fmt1) umes2m, 'PROG', ijmax, 1, 0
  761.                  WRITE (UNIT=n, FMT=fmt1) uve10m, 'PROG', ijmax, 1, 60
  762.                  WRITE (UNIT=n, FMT=fmt1) vve10m, 'PROG', ijmax, 1, 60
  763.              
  764.                  IF (ifday == 0 .and. tod == 0.0_r8 ) RETURN
  765.              
  766.  1---------<     DO m=1,mxavl
  767.  1                  IF (dodia(m) .and. (iavrq(m) > 0)) THEN
  768.  1                     nn=iavrq(m)
  769.  1                     WRITE(UNIT=n,FMT=fmt1)reqdg(nn),diag,isg(itavl(m)),lvrq(nn),nurq(nn)
  770.  1                     IF(nfctrl(91) >= 1)WRITE(UNIT=nfprt,FMT=161) reqdg(nn),diag, &
  771.  1                          isg(itavl(m)),lvrq(nn),nurq(nn)
  772.  1                  END IF
  773.  1--------->     END DO
  774.              
  775.                  IF(icf.ne.0)THEN
  776.  1---------<        DO ix=1,icf
  777.  1                     WRITE(UNIT=n,FMT=fmt1)combf(ix),diag,isg(itcf(ix)),lvcf(ix),nucf(ix)
  778.  1                     IF(nfctrl(91) >= 1)WRITE(UNIT=nfprt,FMT=161) combf(ix),diag, &
  779.  1                          isg(itcf(ix)),lvcf(ix),nucf(ix)
  780.  1--------->        END DO
  781.                  END IF
  782.              
  783.              161 FORMAT(' ',A40,2X,A4,2X,I8,3X,I4,4X,I3)
  784.                END SUBROUTINE WriteDir8
  785.                SUBROUTINE WriteDire4(n, idate, ihr, iday, mon, iyr, del,tod)
  786.                  INTEGER(KIND=i4), INTENT(IN ) :: n
  787.                  INTEGER(KIND=i4), INTENT(IN ) :: idate(4)
  788.                  INTEGER(KIND=i4), INTENT(IN ) :: ihr
  789.                  INTEGER(KIND=i4), INTENT(IN ) :: iday
  790.                  INTEGER(KIND=i4), INTENT(IN ) :: mon
  791.                  INTEGER(KIND=i4), INTENT(IN ) :: iyr
  792.                  REAL    (KIND=r4), INTENT(IN ) :: del(kMax)
  793.                  REAL    (KIND=r4), INTENT(IN ) :: tod
  794.                  REAL    (KIND=r4) :: r
  795.              
  796.                  CHARACTER (LEN= 4) :: imdl
  797.                  CHARACTER (LEN=40) :: jttl
  798.                  CHARACTER (LEN=20), PARAMETER :: ittl='CPTEC SIGMA VERS 2.0'
  799.                  CHARACTER (LEN= 4), PARAMETER :: nexp='0001'
  800.                  CHARACTER (LEN=40), PARAMETER :: orogra = 'TOPOGRAPHY' 
  801.                  CHARACTER (LEN=40), PARAMETER :: lseamk = 'LAND SEA MASK'
  802.                  CHARACTER (LEN=40), PARAMETER :: lnsurf = 'LN SURFACE PRESSURE'
  803.                  CHARACTER (LEN=40), PARAMETER :: divrgn = 'DIVERGENCE'
  804.                  CHARACTER (LEN=40), PARAMETER :: vortic = 'VORTICITY'
  805.                  CHARACTER (LEN=40), PARAMETER :: spechu = 'SPECIFIC HUMIDITY'
  806.                  CHARACTER (LEN=40), PARAMETER :: tempvi = 'VIRTUAL TEMPERATURE'
  807.                  CHARACTER (LEN=40), PARAMETER :: surfte = 'SURFACE TEMPERATURE'
  808.                  CHARACTER (LEN=40), PARAMETER :: srfrou = 'ROUGHNESS LENGTH'
  809.                  CHARACTER (LEN=40), PARAMETER :: deepte = 'DEEP SOIL TEMPERATURE'
  810.                  CHARACTER (LEN=40), PARAMETER :: stcnpy = 'STORAGE ON CANOPY'
  811.                  CHARACTER (LEN=40), PARAMETER :: stgrnd = 'STORAGE ON GROUND'
  812.                  CHARACTER (LEN=40), PARAMETER :: wt1soi = 'SOIL WETNESS OF SURFACE'
  813.                  CHARACTER (LEN=40), PARAMETER :: wt2soi = 'SOIL WETNESS OF ROOT ZONE'
  814.                  CHARACTER (LEN=40), PARAMETER :: wt3soi = 'SOIL WETNESS OF DRAINAGE ZONE' 
  815.                  CHARACTER (LEN=40), PARAMETER :: temp2m = 'TEMPERATURE AT 2-M FROM SURFACE' 
  816.                  CHARACTER (LEN=40), PARAMETER :: umes2m = 'SPECIFIC HUMIDITY AT 2-M FROM SURFACE' 
  817.                  CHARACTER (LEN=40), PARAMETER :: uve10m = 'ZONAL WIND AT 10-M FROM SURFACE'
  818.                  CHARACTER (LEN=40), PARAMETER :: vve10m = 'MERID WIND AT 10-M FROM SURFACE'
  819.                  CHARACTER (LEN=29), PARAMETER :: fmt1='(A40,2X,A4,2X,I8,3X,I4,4X,I3)'
  820.              
  821.                  r = tod
  822.                  jttl='CPTEC AGCM REVIS 1.0 2000  T   L    COLD'
  823.                  WRITE (jttl(29:31), '(i3.3)') mMax-1
  824.                  WRITE (jttl(33:34), '(i2.2)') kMax
  825.                  WRITE (imdl, '(A1,I3.3)') 'T', mMax-1
  826.              
  827.                  WRITE (UNIT=n, FMT='(A20)')   ittl
  828.                  WRITE (UNIT=n, FMT='(A4,1X,A4,1X,A4,1X,11I5,1X,A4)') &
  829.                       nexp, 'SEQU', imdl, mMax, kmax, kmax, &
  830.                       ihr, iday, mon, iyr, idate, 'TAPE'
  831.                  WRITE (UNIT=n, FMT='(A40)')   jttl
  832.                  WRITE (UNIT=n, FMT='(5E16.8)')   del
  833.                  WRITE (UNIT=n, FMT=fmt1) orogra, 'FIXD', 2*mnMax, 1, 10
  834.                  WRITE (UNIT=n, FMT=fmt1) lseamk, 'FIXD', ijmax, 1, 0
  835.                  WRITE (UNIT=n, FMT=fmt1) lnsurf, 'PROG', 2*mnMax, 1, 142
  836.                  WRITE (UNIT=n, FMT=fmt1) divrgn, 'PROG', 2*mnMax, kmax, 50
  837.                  WRITE (UNIT=n, FMT=fmt1) vortic, 'PROG', 2*mnMax, kmax, 50
  838.                  WRITE (UNIT=n, FMT=fmt1) spechu, 'PROG', 2*mnMax, kmax, 0
  839.                  WRITE (UNIT=n, FMT=fmt1) tempvi, 'PROG', 2*mnMax, kmax, 40
  840.                  WRITE (UNIT=n, FMT=fmt1) srfrou, 'PROG', ijmax, 1, 10
  841.                  WRITE (UNIT=n, FMT=fmt1) surfte, 'PROG', ijmax, 1, 40
  842.                  WRITE (UNIT=n, FMT=fmt1) deepte, 'PROG', ijmax, 1, 40
  843.                  WRITE (UNIT=n, FMT=fmt1) stcnpy, 'PROG', ijmax, 1, 10
  844.                  WRITE (UNIT=n, FMT=fmt1) stgrnd, 'PROG', ijmax, 1, 10
  845.                  WRITE (UNIT=n, FMT=fmt1) wt1soi, 'PROG', ijmax, 1, 0
  846.                  WRITE (UNIT=n, FMT=fmt1) wt2soi, 'PROG', ijmax, 1, 0
  847.                  WRITE (UNIT=n, FMT=fmt1) wt3soi, 'PROG', ijmax, 1, 0
  848.                  WRITE (UNIT=n, FMT=fmt1) temp2m, 'PROG', ijmax, 1, 40
  849.                  WRITE (UNIT=n, FMT=fmt1) umes2m, 'PROG', ijmax, 1, 0
  850.                  WRITE (UNIT=n, FMT=fmt1) uve10m, 'PROG', ijmax, 1, 60
  851.                  WRITE (UNIT=n, FMT=fmt1) vve10m, 'PROG', ijmax, 1, 60
  852.              
  853.              160 FORMAT(A40,2X,A4,2X,I8,3X,I4,4X,I3)
  854.              161 FORMAT(' ',A40,2X,A4,2X,I8,3X,I4,4X,I3)    
  855.                END SUBROUTINE WriteDire4
ftn-5001 ftn: NOTE File = IOLowLevel.f90, Line = 855 
  Local variable "R" is assigned a value but never used.

ftn-5011 ftn: NOTE File = IOLowLevel.f90, Line = 855 
  Label "161" is unused.

ftn-5011 ftn: NOTE File = IOLowLevel.f90, Line = 855 
  Label "160" is unused.

  856.                SUBROUTINE WriteDire8(n, idate, ihr, iday, mon, iyr, del,tod)
  857.                  INTEGER , INTENT(IN ) :: n
  858.                  INTEGER , INTENT(IN ) :: idate(4)
  859.                  INTEGER , INTENT(IN ) :: ihr
  860.                  INTEGER , INTENT(IN ) :: iday
  861.                  INTEGER , INTENT(IN ) :: mon
  862.                  INTEGER , INTENT(IN ) :: iyr
  863.                  REAL    (KIND=r8), INTENT(IN ) :: del(kMax) 
  864.                  REAL    (KIND=r8), INTENT(IN ) :: tod
  865.                  REAL    (KIND=r8) :: r
  866.              
  867.                  CHARACTER (LEN= 4) :: imdl
  868.                  CHARACTER (LEN=40) :: jttl
  869.                  CHARACTER (LEN=20), PARAMETER :: ittl='CPTEC SIGMA VERS 2.0'
  870.                  CHARACTER (LEN= 4), PARAMETER :: nexp='0001'
  871.                  CHARACTER (LEN=40), PARAMETER :: orogra = 'TOPOGRAPHY' 
  872.                  CHARACTER (LEN=40), PARAMETER :: lseamk = 'LAND SEA MASK'
  873.                  CHARACTER (LEN=40), PARAMETER :: lnsurf = 'LN SURFACE PRESSURE'
  874.                  CHARACTER (LEN=40), PARAMETER :: divrgn = 'DIVERGENCE'
  875.                  CHARACTER (LEN=40), PARAMETER :: vortic = 'VORTICITY'
  876.                  CHARACTER (LEN=40), PARAMETER :: spechu = 'SPECIFIC HUMIDITY'
  877.                  CHARACTER (LEN=40), PARAMETER :: tempvi = 'VIRTUAL TEMPERATURE'
  878.                  CHARACTER (LEN=40), PARAMETER :: surfte = 'SURFACE TEMPERATURE'
  879.                  CHARACTER (LEN=40), PARAMETER :: srfrou = 'ROUGHNESS LENGTH'
  880.                  CHARACTER (LEN=40), PARAMETER :: deepte = 'DEEP SOIL TEMPERATURE'
  881.                  CHARACTER (LEN=40), PARAMETER :: stcnpy = 'STORAGE ON CANOPY'
  882.                  CHARACTER (LEN=40), PARAMETER :: stgrnd = 'STORAGE ON GROUND'
  883.                  CHARACTER (LEN=40), PARAMETER :: wt1soi = 'SOIL WETNESS OF SURFACE'
  884.                  CHARACTER (LEN=40), PARAMETER :: wt2soi = 'SOIL WETNESS OF ROOT ZONE'
  885.                  CHARACTER (LEN=40), PARAMETER :: wt3soi = 'SOIL WETNESS OF DRAINAGE ZONE'
  886.                  CHARACTER (LEN=40), PARAMETER :: temp2m = 'TEMPERATURE AT 2-M FROM SURFACE' 
  887.                  CHARACTER (LEN=40), PARAMETER :: umes2m = 'SPECIFIC HUMIDITY AT 2-M FROM SURFACE'     
  888.                  CHARACTER (LEN=40), PARAMETER :: uve10m = 'ZONAL WIND AT 10-M FROM SURFACE'
  889.                  CHARACTER (LEN=40), PARAMETER :: vve10m = 'MERID WIND AT 10-M FROM SURFACE'
  890.                  CHARACTER (LEN=29), PARAMETER :: fmt1='(A40,2X,A4,2X,I8,3X,I4,4X,I3)'
  891.              
  892.              
  893.              
  894.                  r = tod
  895.                  jttl='CPTEC AGCM REVIS 1.0 2000  T   L    COLD'
  896.                  WRITE (jttl(29:31), '(i3.3)') mMax-1
  897.                  WRITE (jttl(33:34), '(i2.2)') kMax
  898.                  WRITE (imdl, '(A1,I3.3)') 'T', mMax-1
  899.              
  900.                  WRITE (UNIT=n, FMT='(A20)')   ittl
  901.                  WRITE (UNIT=n, FMT='(A4,1X,A4,1X,A4,1X,11I5,1X,A4)') &
  902.                       nexp, 'SEQU', imdl, mMax, kmax, kmax, &
  903.                       ihr, iday, mon, iyr, idate, 'TAPE'
  904.                  WRITE (UNIT=n, FMT='(A40)')   jttl
  905.                  WRITE (UNIT=n, FMT='(5E16.8)')   del
  906.                  WRITE (UNIT=n, FMT=fmt1) orogra, 'FIXD', 2*mnMax, 1, 10
  907.                  WRITE (UNIT=n, FMT=fmt1) lseamk, 'FIXD', ijmax, 1, 0
  908.                  WRITE (UNIT=n, FMT=fmt1) lnsurf, 'PROG', 2*mnMax, 1, 142
  909.                  WRITE (UNIT=n, FMT=fmt1) divrgn, 'PROG', 2*mnMax, kmax, 50
  910.                  WRITE (UNIT=n, FMT=fmt1) vortic, 'PROG', 2*mnMax, kmax, 50
  911.                  WRITE (UNIT=n, FMT=fmt1) spechu, 'PROG', 2*mnMax, kmax, 0
  912.                  WRITE (UNIT=n, FMT=fmt1) tempvi, 'PROG', 2*mnMax, kmax, 40
  913.                  WRITE (UNIT=n, FMT=fmt1) srfrou, 'PROG', ijmax, 1, 10
  914.                  WRITE (UNIT=n, FMT=fmt1) surfte, 'PROG', ijmax, 1, 40
  915.                  WRITE (UNIT=n, FMT=fmt1) deepte, 'PROG', ijmax, 1, 40
  916.                  WRITE (UNIT=n, FMT=fmt1) stcnpy, 'PROG', ijmax, 1, 10
  917.                  WRITE (UNIT=n, FMT=fmt1) stgrnd, 'PROG', ijmax, 1, 10
  918.                  WRITE (UNIT=n, FMT=fmt1) wt1soi, 'PROG', ijmax, 1, 0
  919.                  WRITE (UNIT=n, FMT=fmt1) wt2soi, 'PROG', ijmax, 1, 0
  920.                  WRITE (UNIT=n, FMT=fmt1) wt3soi, 'PROG', ijmax, 1, 0
  921.                  WRITE (UNIT=n, FMT=fmt1) temp2m, 'PROG', ijmax, 1, 40
  922.                  WRITE (UNIT=n, FMT=fmt1) umes2m, 'PROG', ijmax, 1, 0
  923.                  WRITE (UNIT=n, FMT=fmt1) uve10m, 'PROG', ijmax, 1, 60
  924.                  WRITE (UNIT=n, FMT=fmt1) vve10m, 'PROG', ijmax, 1, 60
  925.              
  926.                END SUBROUTINE WriteDire8
ftn-5001 ftn: NOTE File = IOLowLevel.f90, Line = 926 
  Local variable "R" is assigned a value but never used.

  927.                SUBROUTINE ReadProgHead4(n, ifday, tod, idate, idatec)
  928.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  929.                  INTEGER(KIND=i4), INTENT(OUT) :: ifday
  930.                  REAL   (KIND=r4), INTENT(OUT) :: tod
  931.                  INTEGER(KIND=i4), INTENT(OUT) :: idate(4)
  932.                  INTEGER(KIND=i4), INTENT(OUT) :: idatec(4)
  933.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadProgHead4)**"
  934.                  READ(UNIT=n)ifday, tod, idate, idatec
  935.                END SUBROUTINE ReadProgHead4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 935 
  Named Constant "H" is not used.

  936.                SUBROUTINE ReadProgHead8(n, ifday, tod, idate, idatec)
  937.                  INTEGER, INTENT(IN)  :: n
  938.                  INTEGER, INTENT(OUT) :: ifday
  939.                  REAL   (KIND=r8), INTENT(OUT) :: tod
  940.                  INTEGER, INTENT(OUT) :: idate(4)
  941.                  INTEGER, INTENT(OUT) :: idatec(4)
  942.                  INTEGER(KIND=i4) :: iaux(10)
  943.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadProgHead8)**"
  944.                  READ(UNIT=n)iaux
  945.                  ifday  = INT(iaux(  1 ))
  946.                  tod    = INT(iaux(  2 ))
  947.  Vsf------<>     idate  = INT(iaux(3:6 ))
  948.  f--------<>     idatec = INT(iaux(7:10))
  949.                END SUBROUTINE ReadProgHead8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 949 
  Named Constant "H" is not used.

  950.                SUBROUTINE GReadProgHead4(n, ifday, tod, idate, idatec)
  951.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  952.                  INTEGER(KIND=i4), INTENT(OUT) :: ifday
  953.                  REAL   (KIND=r4), INTENT(OUT) :: tod
  954.                  INTEGER(KIND=i4), INTENT(OUT) :: idate(4)
  955.                  INTEGER(KIND=i4), INTENT(OUT) :: idatec(4)
  956.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadProgHead4)**"
  957.                  READ(UNIT=n)ifday, tod, idate, idatec
  958.                END SUBROUTINE GReadProgHead4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 958 
  Named Constant "H" is not used.

  959.                SUBROUTINE GReadProgHead8(n, ifday, tod, idate, idatec)
  960.                  INTEGER, INTENT(IN)  :: n
  961.                  INTEGER, INTENT(OUT) :: ifday
  962.                  REAL   (KIND=r8), INTENT(OUT) :: tod
  963.                  INTEGER, INTENT(OUT) :: idate(4)
  964.                  INTEGER, INTENT(OUT) :: idatec(4)
  965.                  INTEGER :: iaux(10)
  966.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadProgHead8)**"
  967.                  READ(UNIT=n)iaux
  968.                  ifday  = INT(iaux(  1 ))
  969.                  tod    = INT(iaux(  2 ))
  970.  Vsf------<>     idate  = INT(iaux(3:6 ))
  971.  f--------<>     idatec = INT(iaux(7:10))
  972.                END SUBROUTINE GReadProgHead8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 972 
  Named Constant "H" is not used.

  973.                SUBROUTINE WriteProgHead4(n, ifday, tod, idate, idatec)
  974.                  INTEGER(KIND=i4), INTENT(IN)  :: n
  975.                  INTEGER(KIND=i4), INTENT(IN)  :: ifday
  976.                  REAL   (KIND=r4), INTENT(IN)  :: tod
  977.                  INTEGER(KIND=i4), INTENT(IN)  :: idate(4)
  978.                  INTEGER(KIND=i4), INTENT(IN)  :: idatec(4)
  979.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteProgHead4)**"
  980.                  WRITE(UNIT=n)ifday, tod, idate, idatec
  981.                END SUBROUTINE WriteProgHead4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 981 
  Named Constant "H" is not used.

  982.                SUBROUTINE WriteProgHead8(n, ifday, tod, idate, idatec)
  983.                  INTEGER, INTENT(IN)  :: n
  984.                  INTEGER, INTENT(IN)  :: ifday
  985.                  REAL   (KIND=r8), INTENT(IN)  :: tod
  986.                  INTEGER, INTENT(IN)  :: idate(4)
  987.                  INTEGER, INTENT(IN)  :: idatec(4)
  988.                  INTEGER(KIND=i4) :: iaux(10)
  989.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteProgHead8)**"
  990.                  iaux(  1 ) = INT (ifday , i4)
  991.                  iaux(  2 ) = INT (tod   , i4)
  992.  Vsf------<>     iaux(3:6 ) = INT (idate , i4)
  993.  f--------<>     iaux(7:10) = INT (idatec, i4)
  994.                  WRITE(UNIT=n)iaux
  995.                END SUBROUTINE WriteProgHead8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 995 
  Named Constant "H" is not used.

  996.              
  997.              
  998.                SUBROUTINE ReadMs(mPerLat,fname,jMax)
  999.                  CHARACTER(LEN=*), INTENT(IN ) :: fname
 1000.                  INTEGER,          INTENT(IN ) :: jMax
 1001.                  INTEGER,          INTENT(OUT) :: mPerLat(jMax)
 1002.                  INTEGER  :: jsize, ierr
 1003.                  CHARACTER(LEN=8) :: c0, c1
 1004.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadMs)**"
 1005.              
 1006.                  OPEN (UNIT=nfwaves, FILE=TRIM(fname), STATUS="old", ACTION="read",&
 1007.                       ACCESS="sequential", FORM="formatted", IOSTAT=ierr)
 1008.                  IF (ierr /= 0) THEN
 1009.                     WRITE(c0,"(i8)") ierr
 1010.                     CALL FatalError(h//" open "//TRIM(fname)//" for read returned iostat="//&
 1011.                          TRIM(ADJUSTL(c0)))
 1012.                     STOP
 1013.                  END IF
 1014.              
 1015.                  READ (nfwaves,*,IOSTAT=ierr) jsize
 1016.                  IF (ierr /= 0) THEN
 1017.                     WRITE(c0,"(i8)") ierr
 1018.                     CALL FatalError(h//" read first record of "//TRIM(fname)//" returned iostat="//&
 1019.                          TRIM(ADJUSTL(c0)))
 1020.                     STOP
 1021.                  ELSE IF (jsize /= jMax) THEN
 1022.                     WRITE(c0,"(i8)") jMax
 1023.                     WRITE(c1,"(i8)") jSize
 1024.                     CALL FatalError(h//" latitudes ("//TRIM(ADJUSTL(c1))//") on file"//&
 1025.                          TRIM(fname)//" do not match required amount ("//&
 1026.                          TRIM(ADJUSTL(c0))//")")
 1027.                     STOP
 1028.                  END IF
 1029.              
 1030.                  READ (nfwaves,*,IOSTAT=ierr) mPerLat(:)
 1031.                  IF (ierr /= 0) THEN
 1032.                     WRITE(c0,"(i8)") ierr
 1033.                     CALL FatalError(h//" read second record of file "//&
 1034.                          TRIM(fname)//" (containing mPerLat) returned iostat="//&
 1035.                          TRIM(ADJUSTL(c0)))
 1036.                     STOP
 1037.                  END IF
 1038.              
 1039.                  CLOSE (UNIT=nfwaves)
 1040.                END SUBROUTINE ReadMs
 1041.              
 1042.              
 1043.              
 1044.              
 1045.                SUBROUTINE WriteMs(mPerLat,fname,jMax)
 1046.                  CHARACTER(LEN=*), INTENT(IN ) :: fname
 1047.                  INTEGER,          INTENT(IN ) :: jMax
 1048.                  INTEGER,          INTENT(IN ) :: mPerLat(jMax)
 1049.                  INTEGER  :: ierr
 1050.                  CHARACTER(LEN=8) :: c0
 1051.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteMs)**"
 1052.              
 1053.                  OPEN (UNIT=nfwaves, FILE=TRIM(fname), STATUS="replace", ACTION="write",&
 1054.                       ACCESS="sequential", FORM="formatted", IOSTAT=ierr)
 1055.                  IF (ierr /= 0) THEN
 1056.                     WRITE(c0,"(i8)") ierr
 1057.                     CALL FatalError(h//" open "//TRIM(fname)//" for write returned iostat="//&
 1058.                          TRIM(ADJUSTL(c0)))
 1059.                     STOP
 1060.                  ELSE
 1061.                     CALL MsgOut(h," writing file "//TRIM(fname))
 1062.                     CALL MsgDump(h," writing file "//TRIM(fname))
 1063.                  END IF
 1064.              
 1065.                  WRITE (nfwaves,*,IOSTAT=ierr) jMax
 1066.                  IF (ierr /= 0) THEN
 1067.                     WRITE(c0,"(i8)") ierr
 1068.                     CALL FatalError(h//" write first record of "//TRIM(fname)//" returned iostat="//&
 1069.                          TRIM(ADJUSTL(c0)))
 1070.                     STOP
 1071.                  END IF
 1072.              
 1073.                  WRITE (nfwaves,*,IOSTAT=ierr) mPerLat(:)
 1074.                  IF (ierr /= 0) THEN
 1075.                     WRITE(c0,"(i8)") ierr
 1076.                     CALL FatalError(h//" write second record of file "//&
 1077.                          TRIM(fname)//" (containing mPerLat) returned iostat="//&
 1078.                          TRIM(ADJUSTL(c0)))
 1079.                     STOP
 1080.                  END IF
 1081.              
 1082.                  CLOSE (UNIT=nfwaves)
 1083.                END SUBROUTINE WriteMs
 1084.              
 1085.              
 1086.              
 1087.              
 1088.                SUBROUTINE ReadGauss(CosGaussColat, GaussWeights, fname, MaxDegree)
 1089.                  CHARACTER(LEN=*), INTENT(IN ) :: fname
 1090.                  INTEGER,          INTENT(IN ) :: MaxDegree
 1091.                  REAL(KIND=r8),    INTENT(OUT) :: CosGaussColat(:)
 1092.                  REAL(KIND=r8),    INTENT(OUT) :: GaussWeights(:)
 1093.                  INTEGER  :: MaxDegree2, jsize, ierr
 1094.                  CHARACTER(LEN=8) :: c0, c1
 1095.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadGauss)**"
 1096.              
 1097.                  MaxDegree2=MaxDegree/2
 1098.                  IF (SIZE(CosGaussColat) /= MaxDegree2) THEN
 1099.                     CALL FatalError(h//" size of CosGaussColat is wrong")
 1100.                     STOP
 1101.                  ELSE IF (SIZE(GaussWeights) /= MaxDegree) THEN
 1102.                     CALL FatalError(h//" size of GaussWeights is wrong")
 1103.                     STOP
 1104.                  END IF
 1105.                  OPEN (UNIT=nfGauss, FILE=TRIM(fname), STATUS="old", ACTION="read",&
 1106.                       ACCESS="sequential", FORM="unformatted", IOSTAT=ierr)
 1107.                  IF (ierr /= 0) THEN
 1108.                     WRITE(c0,"(i8)") ierr
 1109.                     CALL FatalError(h//" open "//TRIM(fname)//" for read returned iostat="//&
 1110.                          TRIM(ADJUSTL(c0)))
 1111.                     STOP
 1112.                  END IF
 1113.              
 1114.                  READ (nfGauss,IOSTAT=ierr) jsize
 1115.                  IF (ierr /= 0) THEN
 1116.                     WRITE(c0,"(i8)") ierr
 1117.                     CALL FatalError(h//" read first record of "//TRIM(fname)//" returned iostat="//&
 1118.                          TRIM(ADJUSTL(c0)))
 1119.                     STOP
 1120.                  ELSE IF (jsize /= MaxDegree2) THEN
 1121.                     WRITE(c0,"(i8)") MaxDegree2
 1122.                     WRITE(c1,"(i8)") jSize
 1123.                     CALL FatalError(h//" MaxDegree/2 ("//TRIM(ADJUSTL(c1))//") on file"//&
 1124.                          TRIM(fname)//" do not match required amount ("//&
 1125.                          TRIM(ADJUSTL(c0))//")")
 1126.                     STOP
 1127.                  END IF
 1128.              
 1129.                  READ (nfGauss, IOSTAT=ierr) CosGaussColat
 1130.                  IF (ierr /= 0) THEN
 1131.                     WRITE(c0,"(i8)") ierr
 1132.                     CALL FatalError(h//" read second record of "//TRIM(fname)//&
 1133.                          " (containing CosGaussColat) returned iostat="//&
 1134.                          TRIM(ADJUSTL(c0)))
 1135.                     STOP
 1136.                  END IF
 1137.              
 1138.                  READ (nfGauss, IOSTAT=ierr) GaussWeights
 1139.                  IF (ierr /= 0) THEN
 1140.                     WRITE(c0,"(i8)") ierr
 1141.                     CALL FatalError(h//" read third record of "//TRIM(fname)//&
 1142.                          " (containing GaussWeights) returned iostat="//&
 1143.                          TRIM(ADJUSTL(c0)))
 1144.                     STOP
 1145.                  END IF
 1146.                  CLOSE (UNIT=nfGauss)
 1147.                END SUBROUTINE ReadGauss
 1148.              
 1149.              
 1150.              
 1151.              
 1152.                SUBROUTINE WriteGauss(CosGaussColat, GaussWeights, fname, MaxDegree)
 1153.                  CHARACTER(LEN=*), INTENT(IN ) :: fname
 1154.                  INTEGER,          INTENT(IN ) :: MaxDegree
 1155.                  REAL(KIND=r8),    INTENT(IN ) :: CosGaussColat(:)
 1156.                  REAL(KIND=r8),    INTENT(IN ) :: GaussWeights(:)
 1157.                  INTEGER  :: ierr, MaxDegree2
 1158.                  CHARACTER(LEN=8) :: c0
 1159.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteGauss)**"
 1160.              
 1161.                  MaxDegree2=MaxDegree/2
 1162.                  IF (SIZE(CosGaussColat) /= MaxDegree2) THEN
 1163.                     CALL FatalError(h//" size of CosGaussColat is wrong")
 1164.                     STOP
 1165.                  ELSE IF (SIZE(GaussWeights) /= MaxDegree) THEN
 1166.                     CALL FatalError(h//" size of GaussWeights is wrong")
 1167.                     STOP
 1168.                  END IF
 1169.              
 1170.                  OPEN (UNIT=nfGauss, FILE=TRIM(fname), STATUS="replace", ACTION="write",&
 1171.                       ACCESS="sequential", FORM="unformatted", IOSTAT=ierr)
 1172.                  IF (ierr /= 0) THEN
 1173.                     WRITE(c0,"(i8)") ierr
 1174.                     CALL FatalError(h//" open "//TRIM(fname)//" for write returned iostat="//&
 1175.                          TRIM(ADJUSTL(c0)))
 1176.                     STOP
 1177.                  ELSE
 1178.                     CALL MsgOut(h," writing file "//TRIM(fname))
 1179.                     CALL MsgDump(h," writing file "//TRIM(fname))
 1180.                  END IF
 1181.              
 1182.                  WRITE (nfGauss,IOSTAT=ierr) MaxDegree2
 1183.                  IF (ierr /= 0) THEN
 1184.                     WRITE(c0,"(i8)") ierr
 1185.                     CALL FatalError(h//" write first record of "//TRIM(fname)//" returned iostat="//&
 1186.                          TRIM(ADJUSTL(c0)))
 1187.                     STOP
 1188.                  END IF
 1189.              
 1190.                  WRITE (nfGauss,IOSTAT=ierr) CosGaussColat
 1191.                  IF (ierr /= 0) THEN
 1192.                     WRITE(c0,"(i8)") ierr
 1193.                     CALL FatalError(h//" write second record of "//TRIM(fname)//&
 1194.                          " (containing CosGaussColat) returned iostat="//&
 1195.                          TRIM(ADJUSTL(c0)))
 1196.                     STOP
 1197.                  END IF
 1198.              
 1199.                  WRITE (nfGauss,IOSTAT=ierr) GaussWeights
 1200.                  IF (ierr /= 0) THEN
 1201.                     WRITE(c0,"(i8)") ierr
 1202.                     CALL FatalError(h//" write third record of "//TRIM(fname)//&
 1203.                          " (containing GaussWeights) returned iostat="//&
 1204.                          TRIM(ADJUSTL(c0)))
 1205.                     STOP
 1206.                  END IF
 1207.              
 1208.                  CLOSE (UNIT=nfGauss)
 1209.                END SUBROUTINE WriteGauss
 1210.              
 1211.              
 1212.                SUBROUTINE ReadLandSeaMask2_4(fname, lsmk)
 1213.                  CHARACTER(LEN=*), INTENT(IN ) :: fname
 1214.                  REAL(KIND=r4),    INTENT(OUT) :: lsmk(imax*jMax)
 1215.                  INTEGER(KIND=i4) :: ierr,LRecIn
 1216.                  REAL(KIND=r4) ::  bfr(imax,jMax)
 1217.                  INTEGER :: i,j,ij
 1218.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadLandSeaMask2_4)**" 
 1219.                  CHARACTER(LEN=256) :: line
 1220.  A--------<>     bfr=0.0_r4
 1221.                  INQUIRE (IOLENGTH=LRecIn) bfr
 1222.                  OPEN (UNIT=nfsst, FILE=TRIM(fname),FORM='UNFORMATTED', ACCESS='DIRECT', RECL=LRecIn, &
 1223.                       ACTION='READ', STATUS='OLD', IOSTAT=ierr)
 1224.                  IF (ierr /= 0) THEN
 1225.                     WRITE(line,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 1226.                          TRIM(fname), ierr
 1227.                     CALL FatalError(h//trim(line))
 1228.                  END IF
 1229.                  READ (UNIT=nfsst, REC=1, IOSTAT=ierr) bfr
 1230.                  IF (ierr /= 0) THEN
 1231.                     WRITE(line,FMT="('**(ERROR)** Read file ',a,' returned iostat=',i4)") &
 1232.                          TRIM(fname), ierr
 1233.                     CALL FatalError(h//trim(line))
 1234.                  END IF
 1235.                  ij=0
 1236.  1---------<     DO j=1,jMax
 1237.  1 A-------<        DO i=1, iMax
 1238.  1 A                    ij=ij+1
 1239.  1 A                   lsmk(ij)=bfr(i,j)
 1240.  1 A------->        END DO
 1241.  1--------->     END DO
 1242.                  CLOSE (UNIT=nfsst)
 1243.                END SUBROUTINE ReadLandSeaMask2_4
 1244.              
 1245.                SUBROUTINE ReadLandSeaMask2_8(fname, lsmk)
 1246.                  CHARACTER(LEN=*  ), INTENT(IN ) :: fname
 1247.                  REAL     (KIND=r8),    INTENT(OUT) :: lsmk(imax*jMax)
 1248.                  INTEGER(KIND=i4) :: ierr
 1249.                  INTEGER          :: i,j,ij,LRecIn
 1250.                  REAL(KIND=r4) ::  bfr(imax,jMax)
 1251.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadLandSeaMask2_8)**" 
 1252.                  CHARACTER(LEN=256) :: line
 1253.  A--------<>     bfr=0.0_r4
 1254.                  INQUIRE (IOLENGTH=LRecIn) bfr
 1255.                  OPEN (UNIT=nfsst, FILE=TRIM(fname),FORM='UNFORMATTED', ACCESS='DIRECT', RECL=LRecIn, &
 1256.                       ACTION='READ', STATUS='OLD', IOSTAT=ierr)
 1257.                  IF (ierr /= 0) THEN
 1258.                     WRITE(line,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 1259.                          TRIM(fname), ierr
 1260.                     CALL FatalError(h//trim(line))
 1261.                  END IF
 1262.                  READ (UNIT=nfsst, REC=1, IOSTAT=ierr) bfr
 1263.                  IF (ierr /= 0) THEN
 1264.                     WRITE(line,FMT="('**(ERROR)** Read file ',a,' returned iostat=',i4)") &
 1265.                          TRIM(fname), ierr
 1266.                     CALL FatalError(h//trim(line))
 1267.                  END IF
 1268.                  ij=0
 1269.  1---------<     DO j=1,jMax
 1270.  1 Vr2-----<        DO i=1, iMax
 1271.  1 Vr2                 ij=ij+1
 1272.  1 Vr2                 lsmk(ij)=REAL(bfr(i,j),KIND=r8)
 1273.  1 Vr2----->        END DO
 1274.  1--------->     END DO
 1275.                  CLOSE(UNIT=nfsst)
 1276.                END SUBROUTINE ReadLandSeaMask2_8
 1277.                SUBROUTINE  LandSeaMask4(ifsst,labeli,intsst,sstlag,fNameSSTAOI,rlsm)
 1278.              
 1279.                  INTEGER  , INTENT(IN   )  :: ifsst
 1280.                  INTEGER  , INTENT(INOUT)  :: intsst
 1281.                  REAL     (KIND=r8), INTENT(OUT  )  :: sstlag
 1282.                  REAL     (KIND=r4), INTENT(INOUT)  :: rlsm(:,:)
 1283.                  CHARACTER(LEN=10 ), INTENT(IN   )  :: labeli
 1284.                  CHARACTER(LEN=*  ), INTENT(IN   )  :: fNameSSTAOI
 1285.                  INTEGER(KIND=i4)                 :: lrecl
 1286.                  INTEGER(KIND=i4)                 :: nsst
 1287.                  REAL     (KIND=r8)                 :: dlag
 1288.                  REAL     (KIND=r8),ALLOCATABLE     :: var4(:,:)  
 1289.                  INTEGER                   :: j
 1290.                  INTEGER                   :: jMax
 1291.                  INTEGER                   :: i  
 1292.                  INTEGER                   :: imax
 1293.                  INTEGER   :: ierr
 1294.                  CHARACTER(LEN=*), PARAMETER :: h="**(LandSeaMask4)**" 
 1295.                  CHARACTER(LEN=256) :: line
 1296.              
 1297.                  jMax = SIZE(rlsm,2)   
 1298.                  imax = SIZE(rlsm,1)
 1299.                  ALLOCATE(var4(imax,jMax))
 1300.              
 1301.                  ! Use open statement to open direct access file when ifsst .ge. 4:
 1302.              
 1303.                  INQUIRE (IOLENGTH=lrecl) rlsm
 1304.                  lrecl=lrecl/2
 1305.              
 1306.                  OPEN (UNIT=nfsst,file=TRIM(fNameSSTAOI),ACCESS='direct',FORM='unformatted',&
 1307.                       RECL=lrecl,STATUS='old',IOSTAT=ierr)
 1308.                  IF (ierr /= 0) THEN
 1309.                     WRITE(line,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 1310.                          TRIM(fNameSSTAOI), ierr
 1311.                     CALL FatalError(h//trim(line))
 1312.                  END IF
 1313.              
 1314.                  READ (UNIT=nfsst,REC=1)nsst,labelsi,labelsj
 1315.                  WRITE(line,FMT='(I6,1X,a,1X,a)')nsst,labelsi,labelsj
 1316.                  CALL MsgOne(h,trim(line))
 1317.  Vpw I----->     CALL daylag (labelsi,labelsj,dlag,intsst)
 1318.                  intsst=NINT(dlag)
 1319.                  IF (intsst > 10) intsst=-intsst
 1320.  Vpw I----->     CALL daylag (labelsi,labeli,dlag,intsst)
 1321.                  sstlag=dlag
 1322.                  WRITE(line,FMT='(a)')' Direct Access SST File:'
 1323.                  CALL MsgOne(h,trim(line))
 1324.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1325.                       labelsi(1:4),labelsi(5:6),labelsi(7:8),labelsi(9:10)
 1326.                  CALL MsgOne(h,trim(line))
 1327.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1328.                       labelsj(1:4),labelsj(5:6),labelsj(7:8),labelsj(9:10)
 1329.                  CALL MsgOne(h,trim(line))
 1330.                  WRITE(line,FMT='(i7,a)')intsst,'  Days'
 1331.                  CALL MsgOne(h,trim(line))
 1332.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1333.                       labelsi(1:4),labelsi(5:6),labelsi(7:8),labelsi(9:10)
 1334.                  CALL MsgOne(h,line)
 1335.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1336.                       labeli(1:4),labeli(5:6),labeli(7:8),labeli(9:10)
 1337.                  CALL MsgOne(h,trim(line))
 1338.                  IF (intsst > 0) THEN
 1339.                     WRITE(line,FMT='(f7.1,a)')sstlag,'  Days'
 1340.                     CALL MsgOne(h,trim(line))
 1341.                  ELSE
 1342.                     WRITE(line,FMT='(f7.1,a)')sstlag,'  Months'
 1343.                     CALL MsgOne(h,trim(line))
 1344.                  END IF
 1345.                  IF (sstlag < 0) THEN
 1346.                     WRITE(line, FMT=336) ifsst, sstlag
 1347.                     CALL FatalError(h//trim(line))
 1348.                  END IF
 1349.                  READ (UNIT=nfsst,REC=2) var4
 1350.                  CLOSE (UNIT=nfsst)
 1351.              
 1352.  1---------<     DO j=1,jMax
 1353.  1 Vpr2----<        DO i=1,imax
 1354.  1 Vpr2                rlsm(i,j)=var4(i,j)
 1355.  1 Vpr2---->        END DO
 1356.  1--------->     END DO
 1357.                  DEALLOCATE(var4)
 1358.              336 FORMAT(' FOR IFSST=',I5,' SSTLAG MUST BE SET NONNEGATIVE.  NOT ',G12.5)  
 1359.                END SUBROUTINE  LandSeaMask4
 1360.                SUBROUTINE  LandSeaMask8(ifsst,labeli,intsst,sstlag,fNameSSTAOI,rlsm)
 1361.              
 1362.                  INTEGER  , INTENT(IN   )  :: ifsst
 1363.                  INTEGER  , INTENT(INOUT)  :: intsst
 1364.                  REAL     (KIND=r8), INTENT(OUT  )  :: sstlag
 1365.                  REAL     (KIND=r8), INTENT(INOUT)  :: rlsm(:,:)
 1366.                  CHARACTER(LEN=10 ), INTENT(IN   )  :: labeli
 1367.                  CHARACTER(LEN=*  ), INTENT(IN   )  :: fNameSSTAOI
 1368.                  INTEGER(KIND=i4)                 :: lrecl
 1369.                  INTEGER(KIND=i4)                 :: nsst
 1370.                  REAL     (KIND=r8)                 :: dlag
 1371.                  REAL     (KIND=r4),ALLOCATABLE     :: var4(:,:)  
 1372.                  INTEGER                   :: j
 1373.                  INTEGER                   :: jMax
 1374.                  INTEGER                   :: i  
 1375.                  INTEGER                   :: imax
 1376.                  INTEGER   :: ierr
 1377.                  CHARACTER(LEN=*), PARAMETER :: h="**(LandSeaMask8)**" 
 1378.                  CHARACTER(LEN=256) :: line
 1379.              
 1380.                  jMax = SIZE(rlsm,2)   
 1381.                  imax = SIZE(rlsm,1)
 1382.                  ALLOCATE(var4(imax,jMax))
 1383.              
 1384.              
 1385.                  ! Use open statement to open direct access file when ifsst .ge. 4:
 1386.              
 1387.                  INQUIRE (IOLENGTH=lrecl) rlsm
 1388.                  lrecl=lrecl/2
 1389.              
 1390.                  OPEN (UNIT=nfsst,file=TRIM(fNameSSTAOI),ACCESS='direct',FORM='unformatted',&
 1391.                       RECL=lrecl,STATUS='old',IOSTAT=ierr)
 1392.                  IF (ierr /= 0) THEN
 1393.                     WRITE(line,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 1394.                          TRIM(fNameSSTAOI), ierr
 1395.                     CALL FatalError(h//trim(line))
 1396.                  END IF
 1397.              
 1398.                  READ (UNIT=nfsst,REC=1)nsst,labelsi,labelsj
 1399.                  WRITE(line,FMT='(I6,1X,a,1X,a)')nsst,labelsi,labelsj
 1400.                  CALL MsgOne(h,trim(line))    
 1401.  Vpw I----->     CALL daylag (labelsi,labelsj,dlag,intsst)
 1402.                  intsst=NINT(dlag)
 1403.                  IF (intsst > 10) intsst=-intsst
 1404.  Vpw I----->     CALL daylag (labelsi,labeli,dlag,intsst)
 1405.                  sstlag=dlag
 1406.                  WRITE(line,FMT='(a)')' Direct Access SST File:'
 1407.                  CALL MsgOne(h,trim(line))
 1408.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1409.                       labelsi(1:4),labelsi(5:6),labelsi(7:8),labelsi(9:10)
 1410.                  CALL MsgOne(h,trim(line))
 1411.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1412.                       labelsj(1:4),labelsj(5:6),labelsj(7:8),labelsj(9:10)
 1413.                  CALL MsgOne(h,trim(line))
 1414.                  WRITE(line,FMT='(i7,a)')intsst,'  Days'
 1415.                  CALL MsgOne(h,trim(line))
 1416.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1417.                       labelsi(1:4),labelsi(5:6),labelsi(7:8),labelsi(9:10)
 1418.                  CALL MsgOne(h,trim(line))
 1419.                  WRITE(line,FMT='(1x,a4,3(1x,a2))') &
 1420.                       labeli(1:4),labeli(5:6),labeli(7:8),labeli(9:10)
 1421.                  CALL MsgOne(h,trim(line))
 1422.                  IF (intsst > 0) THEN
 1423.                     WRITE(line,FMT='(f7.1,a)')sstlag,'  Days'
 1424.                     CALL MsgOne(h,trim(line))
 1425.                  ELSE
 1426.                     WRITE(line,FMT='(f7.1,a)')sstlag,'  Months'
 1427.                     CALL MsgOne(h,trim(line))
 1428.                  END IF
 1429.                  IF (sstlag < 0) THEN
 1430.                     WRITE(line,FMT=336) ifsst, sstlag
 1431.                     CALL FatalError(h//trim(line))
 1432.                  END IF
 1433.                  READ (UNIT=nfsst,REC=2) var4
 1434.                  CLOSE (UNIT=nfsst)
 1435.              
 1436.  1---------<     DO j=1,jMax
 1437.  1 Vpr2----<        DO i=1,imax
 1438.  1 Vpr2                rlsm(i,j)=var4(i,j)
 1439.  1 Vpr2---->        END DO
 1440.  1--------->     END DO
 1441.                  DEALLOCATE(var4)
 1442.              336 FORMAT(' FOR IFSST=',I5,' SSTLAG MUST BE SET NONNEGATIVE.  NOT ',G12.5)  
 1443.                END SUBROUTINE  LandSeaMask8
 1444.              
 1445.              
 1446.              
 1447.                SUBROUTINE daylag (labeli,labelf,dlag,intsst)
 1448.              
 1449.                  CHARACTER (LEN=10 ) :: labeli
 1450.                  CHARACTER (LEN=10 ) :: labelf
 1451.                  REAL      (KIND=r8) :: dlag
 1452.                  REAL      (KIND=r8) :: xday
 1453.                  REAL      (KIND=r8) :: yday
 1454.                  INTEGER    :: intsst
 1455.                  INTEGER :: yi,mi,di,hi,yf,mf,df,hf,ndy,y,n,ndi,ndf
 1456.                  INTEGER, DIMENSION (12) :: ndm = &
 1457.                       (/31,28,31,30,31,30,31,31,30,31,30,31/)
 1458.                  INTEGER, DIMENSION (12) :: ndmi = &
 1459.                       (/31,28,31,30,31,30,31,31,30,31,30,31/)
 1460.                  INTEGER, DIMENSION (12) :: ndmf = &
 1461.                       (/31,28,31,30,31,30,31,31,30,31,30,31/)
 1462.              
 1463.                  READ (labeli(1:4), '(i4)') yi
 1464.                  READ (labeli(5:6), '(i2)') mi
 1465.                  READ (labeli(7:8), '(i2)') di
 1466.                  READ (labeli(9:10),'(i2)') hi
 1467.                  READ (labelf(1:4), '(i4)') yf
 1468.                  READ (labelf(5:6), '(i2)') mf
 1469.                  READ (labelf(7:8), '(i2)') df
 1470.                  READ (labelf(9:10),'(i2)') hf
 1471.                  IF (MOD(yi,4) .EQ. 0) ndmi(2)=29
 1472.                  IF (MOD(yf,4) .EQ. 0) ndmf(2)=29
 1473.              
 1474.                  IF (intsst > 0) THEN
 1475.              
 1476.                     ndy=0
 1477.  1---------<        DO y=yi+1,yf-1
 1478.  1 Vw------<           DO n=1,12
 1479.  1 Vw                     ndy=ndy+ndm(n)
 1480.  1 Vw------>           END DO
 1481.  1                     IF (MOD(y,4) .EQ. 0) ndy=ndy+1
 1482.  1--------->        END DO
 1483.              
 1484.                     ndi=di
 1485.  V---------<        DO n=1,mi-1
 1486.  V                     ndi=ndi+ndmi(n)
 1487.  V--------->        END DO
 1488.                     ndf=df
 1489.  V---------<        DO n=1,mf-1
 1490.  V                     ndf=ndf+ndmf(n)
 1491.  V--------->        END DO
 1492.              
 1493.                     IF (yf .EQ. yi) THEN
 1494.                        dlag=REAL(ndf-ndi,r8)+REAL(hf-hi,r8)/24.0_r8
 1495.                     ELSE IF(yf .GT. yi) THEN
 1496.                        ndi=365-ndi
 1497.                        IF (ndmi(2) .EQ. 29) ndi=ndi+1
 1498.                        dlag=REAL(ndf+ndi,r8)+REAL(hf-hi,r8)/24.0_r8+ndy
 1499.                     ELSE
 1500.                        dlag=-1.0_r8
 1501.                     END IF
 1502.              
 1503.                  ELSE
 1504.              
 1505.                     IF (mf >= mi) THEN
 1506.                        dlag=mf-mi+12*(yf-yi)
 1507.                     ELSE
 1508.                        dlag=12+mf-mi+12*(yf-yi-1)
 1509.                     END IF
 1510.                     IF (MOD(yf,4) .EQ. 0) ndmf(2)=29
 1511.                     xday=REAL(df,r8)+REAL(hf,r8)/24.0_r8
 1512.                     yday=1.0_r8+REAL(ndmf(mf),r8)/2.0_r8
 1513.                     IF (xday <= yday) dlag=dlag-1.0_r8
 1514.              
 1515.                  END IF
 1516.              
 1517.                END SUBROUTINE daylag
 1518.              
 1519.              
 1520.                SUBROUTINE ReadVar4(nfvar,irec,var)
 1521.                  INTEGER(KIND=i4) , INTENT(in   ) :: nfvar
 1522.                  INTEGER(KIND=i4) , INTENT(IN   ) :: irec
 1523.                  REAL   (KIND=r4) , INTENT(out  ) :: var (:,:)
 1524.                  REAL   (KIND=r4)  :: var4(iMax,jMax)
 1525.                  INTEGER(KIND=i4)  :: i
 1526.                  INTEGER(KIND=i4)  :: j
 1527.                   
 1528.                  READ(UNIT=nfvar,rec=irec) var4
 1529.  1---------<     DO j=1,jMax
 1530.  1 r8------<        DO i=1,iMax
 1531.  1 r8                  var(i,j)=var4(i,j)
 1532.  1 r8------>        END DO
 1533.  1--------->     END DO
 1534.                  CLOSE(UNIT=nfvar,STATUS='KEEP')
 1535.                END SUBROUTINE ReadVar4
 1536.                SUBROUTINE ReadVar8(nfvar,irec,var)
 1537.                  INTEGER           , INTENT(in   ) :: nfvar
 1538.                  INTEGER           , INTENT(IN   ) :: irec
 1539.                  REAL     (KIND=r8), INTENT(out  ) :: var (:,:)  
 1540.                  REAL     (KIND=r4) :: var8(iMax,jMax)
 1541.                  INTEGER            :: i
 1542.                  INTEGER            :: j 
 1543.                  READ(UNIT=nfvar,rec=irec) var8
 1544.  1---------<     DO j=1,jMax
 1545.  1 Vpr2----<        DO i=1,iMax
 1546.  1 Vpr2                var(i,j)=REAL(var8(i,j),r8)     
 1547.  1 Vpr2---->        END DO
 1548.  1--------->     END DO
 1549.                  CLOSE(UNIT=nfvar,STATUS='KEEP') 
 1550.                END SUBROUTINE ReadVar8
 1551.              
 1552.                SUBROUTINE ReadAlb4(n,irec,field)
 1553.                  INTEGER(KIND=i4) , INTENT(in   ) :: n
 1554.                  INTEGER(KIND=i4) , INTENT(IN   ) :: irec
 1555.                  REAL   (KIND=r4) , INTENT(out  ) :: field  (:,:)
 1556.                  REAL   (KIND=r8) :: raux3(SIZE(field,1),SIZE(field,2))
 1557.                  INTEGER(KIND=i4) :: i,j
 1558.                  INTEGER(KIND=i4) :: idim,jdim
 1559.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadAlb4)**"
 1560.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1561.                  READ(UNIT=n,rec=irec) raux3
 1562.  1---------<     DO j=1,jdim
 1563.  1 Vpr2----<       DO i=1,idim
 1564.  1 Vpr2              field(i,j) = REAL(raux3(i,j), r4)
 1565.  1 Vpr2---->       END DO
 1566.  1--------->     END DO  
 1567.                END SUBROUTINE ReadAlb4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1567 
  Named Constant "H" is not used.

 1568.                SUBROUTINE ReadAlb8(n,irec,field)
 1569.                  INTEGER , INTENT(in   ) :: n
 1570.                  INTEGER , INTENT(IN   ) :: irec
 1571.                  REAL     (KIND=r8) , INTENT(out  ) :: field  (:,:)
 1572.                  REAL     (KIND=r8) :: raux3(SIZE(field,1),SIZE(field,2))
 1573.                  INTEGER(KIND=i4) :: i,j
 1574.                  INTEGER(KIND=i4) :: idim,jdim
 1575.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadAlb8)**"   
 1576.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1577.                  READ(UNIT=n,rec=irec) raux3
 1578.  1---------<     DO j=1,jdim
 1579.  1 Vpr4----<       DO i=1,idim
 1580.  1 Vpr4              field(i,j) = REAL(raux3(i,j), r8)
 1581.  1 Vpr4---->       END DO
 1582.  1--------->     END DO  
 1583.                END SUBROUTINE ReadAlb8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1583 
  Named Constant "H" is not used.

 1584.              
 1585.                SUBROUTINE ReadSST4(n,irec,field)
 1586.                  INTEGER , INTENT(in   ) :: n
 1587.                  INTEGER , INTENT(IN   ) :: irec
 1588.                  REAL     (KIND=r4)         , INTENT(out  ) :: field  (:,:)
 1589.                  REAL     (KIND=r4)                         :: raux3(SIZE(field,1),SIZE(field,2))
 1590.                  INTEGER(KIND=i4)                         :: i,j
 1591.                  INTEGER(KIND=i4)                         :: idim,jdim
 1592.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadSST4)**" 
 1593.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1594.                  READ (UNIT=n, REC=irec) raux3
 1595.  1---------<     DO j=1,jdim
 1596.  1 r8------<       DO i=1,idim
 1597.  1 r8                field(i,j) = REAL(raux3(i,j), r4)
 1598.  1 r8------>       END DO
 1599.  1--------->     END DO  
 1600.                END SUBROUTINE ReadSST4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1600 
  Named Constant "H" is not used.

 1601.                SUBROUTINE ReadSST8(n,irec,field)
 1602.                  INTEGER , INTENT(IN   ) :: n
 1603.                  INTEGER , INTENT(IN   ) :: irec
 1604.                  REAL   (KIND=r8)          , INTENT(OUT  ) :: field(:,:)
 1605.                  REAL   (KIND=r4)                          :: raux3(SIZE(field,1),SIZE(field,2))
 1606.                  INTEGER(KIND=i4)                          :: i,j
 1607.                  INTEGER(KIND=i4)                          :: idim,jdim
 1608.                  CHARACTER(LEN=*), PARAMETER :: h="**(ReadSST8)**"   
 1609.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1610.                  READ (UNIT=n, REC=irec) raux3
 1611.  1---------<     DO j=1,jdim
 1612.  1 Vpr2----<       DO i=1,idim
 1613.  1 Vpr2              field(i,j) = REAL(raux3(i,j), r8)
 1614.  1 Vpr2---->       END DO
 1615.  1--------->     END DO  
 1616.                END SUBROUTINE ReadSST8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1616 
  Named Constant "H" is not used.

 1617.              
 1618.                SUBROUTINE ReadSST4Rec(n,field,irec)
 1619.                  INTEGER           , INTENT(in   ) :: n
 1620.                  INTEGER           , INTENT(in   ) :: irec
 1621.                  REAL     (KIND=r4)         , INTENT(out  ) :: field  (:,:)
 1622.                  REAL     (KIND=r8)                         :: raux3(SIZE(field,1)*SIZE(field,2))
 1623.                  INTEGER(KIND=i4)                         :: i,j,ij
 1624.                  INTEGER(KIND=i4)                         :: idim,jdim
 1625.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1626.                  READ(UNIT=n,rec=irec) raux3
 1627.                  ij=0
 1628.  1---------<     DO j=1,jdim
 1629.  1 Vpr2----<       DO i=1,idim
 1630.  1 Vpr2              ij=ij+1
 1631.  1 Vpr2              field(i,j) = REAL(raux3(ij), r4)
 1632.  1 Vpr2---->       END DO
 1633.  1--------->     END DO
 1634.                END SUBROUTINE ReadSST4Rec
 1635.                SUBROUTINE ReadSST8Rec(n,field,irec)
 1636.                  INTEGER          , INTENT(IN   ) :: n
 1637.                  INTEGER          , INTENT(in   ) :: irec
 1638.                  REAL   (KIND=r8)          , INTENT(OUT  ) :: field(:,:)
 1639.                  REAL   (KIND=r4)                          :: raux3(SIZE(field,1)*SIZE(field,2))
 1640.                  INTEGER(KIND=i4)                          :: i,j,ij
 1641.                  INTEGER(KIND=i4)                          :: idim,jdim
 1642.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1643.                  READ(UNIT=n,rec=irec)raux3
 1644.                  ij=0
 1645.  1---------<     DO j=1,jdim
 1646.  1 Vpr2----<       DO i=1,idim
 1647.  1 Vpr2              ij=ij+1    
 1648.  1 Vpr2              field(i,j) = REAL(raux3(ij), r8)
 1649.  1 Vpr2---->       END DO
 1650.  1--------->     END DO  
 1651.                END SUBROUTINE ReadSST8Rec
 1652.              
 1653.                SUBROUTINE ReadSLM4(n,irec,field)
 1654.                  INTEGER(KIND=i4)  , INTENT(in   ) :: n
 1655.                  INTEGER           , INTENT(in   ) :: irec
 1656.                  REAL     (KIND=r4), INTENT(out  ) :: field  (:,:) 
 1657.                  REAL     (KIND=r4)                :: raux3(SIZE(field,1),SIZE(field,2))
 1658.                  INTEGER(KIND=i4)                  :: i,j
 1659.                  INTEGER(KIND=i4)                  :: idim,jdim
 1660.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1661.                  READ(UNIT=n,rec=irec) raux3
 1662.  1---------<     DO j=1,jdim
 1663.  1 r8------<       DO i=1,idim
 1664.  1 r8                field(i,j) = raux3(i,j)
 1665.  1 r8------>       END DO
 1666.  1--------->     END DO  
 1667.                END SUBROUTINE ReadSLM4
 1668.                SUBROUTINE ReadSLM8(n,irec,field)
 1669.                  INTEGER           , INTENT(in   ) :: n
 1670.                  INTEGER           , INTENT(in   ) :: irec
 1671.                  REAL     (KIND=r8), INTENT(out  ) :: field  (:,:)
 1672.                  REAL     (KIND=r4)                :: raux3(SIZE(field,1),SIZE(field,2))
 1673.                  INTEGER(KIND=i4)                  :: i,j
 1674.                  INTEGER(KIND=i4)                  :: idim,jdim
 1675.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1676.                  READ(UNIT=n,rec=irec) raux3
 1677.  1---------<     DO j=1,jdim
 1678.  1 Vpr2----<       DO i=1,idim
 1679.  1 Vpr2              field(i,j) = raux3(i,j)
 1680.  1 Vpr2---->       END DO
 1681.  1--------->     END DO
 1682.                END SUBROUTINE ReadSLM8
 1683.              
 1684.                SUBROUTINE ReadSNW4(n,irec,field)
 1685.                  INTEGER           , INTENT(IN   ) :: n
 1686.                  INTEGER           , INTENT(IN   ) :: irec
 1687.                  REAL     (KIND=r4)         , INTENT(out  ) :: field  (:,:)
 1688.                  REAL     (KIND=r4)                         :: raux3(SIZE(field,1),SIZE(field,2))
 1689.                  INTEGER(KIND=i4)                         :: i,j
 1690.                  INTEGER(KIND=i4)                         :: idim,jdim
 1691.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1692.                  READ(UNIT=n,rec=irec) raux3
 1693.  1---------<     DO j=1,jdim
 1694.  1 r8------<       DO i=1,idim
 1695.  1 r8                field(i,j) = REAL(raux3(i,j), r4)
 1696.  1 r8------>       END DO
 1697.  1--------->     END DO  
 1698.                END SUBROUTINE ReadSNW4
 1699.                SUBROUTINE ReadSNW8(n,irec,field)
 1700.                  INTEGER         , INTENT(IN   ) :: n
 1701.                  INTEGER         , INTENT(IN   ) :: irec
 1702.                  REAL   (KIND=r8), INTENT(OUT  ) :: field(:,:)
 1703.                  REAL   (KIND=r4)                          :: raux3(SIZE(field,1),SIZE(field,2))
 1704.                  INTEGER(KIND=i4)                          :: i,j
 1705.                  INTEGER(KIND=i4)                          :: idim,jdim
 1706.                  idim=SIZE(field,1) ;jdim=SIZE(field,2)
 1707.                  READ(UNIT=n,rec=irec)raux3
 1708.  1---------<     DO j=1,jdim
 1709.  1 Vpr2----<       DO i=1,idim
 1710.  1 Vpr2               field(i,j) = REAL(raux3(i,j), r8)
 1711.  1 Vpr2---->       END DO
 1712.  1--------->     END DO
 1713.                END SUBROUTINE ReadSNW8
 1714.              
 1715.                ! The Ozone files are written in a way that they can be read from GrADS.
 1716.                ! Therefore,  the order of the varibles inside the binary had to be x, y, z
 1717.                !   what is different from the global model x, z, y order.
 1718.                !   Moreover, the file is open in GrADS with a yrev option. So y=1 
 1719.                !   means the north pole as exepected by the global model.
 1720.                SUBROUTINE ReadOzone8(n,field,irec)
 1721.                   INTEGER          , INTENT(IN   ) :: n,irec
 1722.                   REAL   (KIND=r8) , INTENT(OUT  ) :: field(:,:,:)
 1723.                   REAL   (KIND=r4)                 :: raux3(SIZE(field,1),SIZE(field,3),SIZE(field,2))
 1724.                   CHARACTER(LEN=*), PARAMETER :: h="**(ReadOzone8)**"   
 1725.                   INTEGER :: i,j,k,im,jm,km
 1726.              
 1727.                   READ(UNIT=n,REC=irec) raux3
 1728.                   ! input field is (i,k,j)
 1729.                   im=size(field,1)
 1730.                   jm=size(field,3)
 1731.                   km=size(field,2)
 1732.  1---------<      do j=1,jm
 1733.  1 2-------<         do k=1,km
 1734.  1 2 Vpr2--<            do i=1,im
 1735.  1 2 Vpr2                  field(i,k,j) = REAL(raux3(i,j,k), r8)
 1736.  1 2 Vpr2-->            enddo
 1737.  1 2------->         enddo
 1738.  1--------->      enddo
 1739.              
 1740.                END SUBROUTINE ReadOzone8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1740 
  Named Constant "H" is not used.

 1741.              
 1742.                SUBROUTINE ReadNFTGZ4(n,irec,field1,field2,field3)
 1743.                  INTEGER, INTENT(in   ) :: n 
 1744.                  INTEGER, INTENT(in   ) :: irec
 1745.                  REAL   (KIND=r8), INTENT(out  ) :: field1 (:,:)
 1746.                  REAL   (KIND=r8), INTENT(out  ) :: field2 (:,:)
 1747.                  REAL   (KIND=r8), INTENT(out  ) :: field3 (:,:)
 1748.                  REAL   (KIND=r4)                :: raux1(SIZE(field1,1),SIZE(field1,2))
 1749.                  REAL   (KIND=r4)                :: raux2(SIZE(field2,1),SIZE(field2,2))
 1750.                  REAL   (KIND=r4)                :: raux3(SIZE(field3,1),SIZE(field3,2))
 1751.              
 1752.                  READ (UNIT=n, Rec=irec) raux1
 1753.                  READ (UNIT=n, Rec=irec+1) raux2
 1754.                  READ (UNIT=n, Rec=irec+2) raux3
 1755.              
 1756.  V--------<>     field1 = REAL(raux1, r8)
 1757.  V--------<>     field2 = REAL(raux2, r8)
 1758.  V--------<>     field3 = REAL(raux3, r8)
 1759.              
 1760.                  !REWIND(UNIT=n)
 1761.                END SUBROUTINE ReadNFTGZ4
 1762.                SUBROUTINE ReadNFTGZ8(n,irec,field1,field2,field3)
 1763.                  INTEGER(KIND=i4), INTENT(in   ) :: n 
 1764.                  INTEGER         , INTENT(in   ) :: irec
 1765.                  REAL   (KIND=r4), INTENT(out  ) :: field1 (:,:)
 1766.                  REAL   (KIND=r4), INTENT(out  ) :: field2 (:,:)
 1767.                  REAL   (KIND=r4), INTENT(out  ) :: field3 (:,:)
 1768.                  REAL   (KIND=r4)                :: raux1(SIZE(field1,1),SIZE(field1,2))
 1769.                  REAL   (KIND=r4)                :: raux2(SIZE(field2,1),SIZE(field2,2))
 1770.                  REAL   (KIND=r4)                :: raux3(SIZE(field3,1),SIZE(field3,2))
 1771.              
 1772.                  READ (UNIT=n, Rec=irec ) raux1
 1773.                  READ (UNIT=n, Rec=irec+1) raux2
 1774.                  READ (UNIT=n, Rec=irec+2) raux3
 1775.              
 1776.                  field1 = REAL(raux1, r4)
 1777.                  field2 = REAL(raux2, r4)
 1778.                  field3 = REAL(raux3, r4)
 1779.              
 1780.                  REWIND(UNIT=n)
 1781.                END SUBROUTINE ReadNFTGZ8
 1782.              
 1783.                SUBROUTINE WriteDiagHead4(n, ifday, tod)
 1784.                  INTEGER(KIND=i4), INTENT(IN)  :: n
 1785.                  INTEGER(KIND=i4), INTENT(IN)  :: ifday
 1786.                  REAL   (KIND=r4), INTENT(IN)  :: tod
 1787.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteProgHead4)**"
 1788.                  WRITE(UNIT=n)ifday, tod
 1789.                END SUBROUTINE WriteDiagHead4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1789 
  Named Constant "H" is not used.

 1790.                SUBROUTINE WriteDiagHead8(n, ifday, tod)
 1791.                  INTEGER, INTENT(IN)  :: n
 1792.                  INTEGER, INTENT(IN)  :: ifday
 1793.                  REAL   (KIND=r8), INTENT(IN)  :: tod
 1794.                  INTEGER(KIND=i4) :: iaux(2)
 1795.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteProgHead8)**"
 1796.                  iaux(  1 ) = INT (ifday , i4)
 1797.                  iaux(  2 ) = INT (tod   , i4)
 1798.                  WRITE(UNIT=n)iaux
 1799.                END SUBROUTINE WriteDiagHead8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1799 
  Named Constant "H" is not used.

 1800.              
 1801.                SUBROUTINE WriteGrdH4(n,field1,field2)
 1802.                  INTEGER(KIND=i4), INTENT(IN)  :: n
 1803.                  REAL   (KIND=r4), INTENT(IN)  :: field1(:)
 1804.                  REAL   (KIND=r4), INTENT(IN)  :: field2(:,:)
 1805.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteGrdH4)**"
 1806.                  WRITE(UNIT=n)field1
 1807.                  WRITE(UNIT=n)field2
 1808.                END SUBROUTINE WriteGrdH4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1808 
  Named Constant "H" is not used.

 1809.                SUBROUTINE WriteGrdH8(n,field1,field2)
 1810.                  INTEGER, INTENT(IN)  :: n
 1811.                  REAL   (KIND=r8), INTENT(IN)  :: field1(:)
 1812.                  REAL   (KIND=r8), INTENT(IN)  :: field2(:,:)
 1813.                  REAL   (KIND=r4) :: raux1(SIZE(field1,1))
 1814.                  REAL   (KIND=r4) :: raux2(SIZE(field2,1),SIZE(field2,2))   
 1815.                  CHARACTER(LEN=*), PARAMETER :: h="**(WriteGrdH8)**"
 1816.  V--------<>     raux1 = REAL(field1, r4)
 1817.  V--------<>     raux2 = REAL(field2, r4)
 1818.                  WRITE(UNIT=n)raux1
 1819.                  WRITE(UNIT=n)raux2
 1820.                END SUBROUTINE WriteGrdH8  
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1820 
  Named Constant "H" is not used.

 1821.                SUBROUTINE WrTopoGrdH4(n,field2)
 1822.                  INTEGER(KIND=i4), INTENT(IN)  :: n
 1823.                  REAL   (KIND=r4), INTENT(IN)  :: field2(:)
 1824.                  CHARACTER(LEN=*), PARAMETER :: h="**(WrTopoGrdH4)**"
 1825.                  WRITE(UNIT=n)field2
 1826.                END SUBROUTINE WrTopoGrdH4
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1826 
  Named Constant "H" is not used.

 1827.                SUBROUTINE WrTopoGrdH8(n,field2)
 1828.                  INTEGER, INTENT(IN)  :: n
 1829.                  REAL   (KIND=r8), INTENT(IN)  :: field2(:)
 1830.                  REAL   (KIND=r4) :: raux2(SIZE(field2,1))   
 1831.                  CHARACTER(LEN=*), PARAMETER :: h="**(WrTopoGrdH8)**"
 1832.  V--------<>     raux2 = REAL(field2, r4)
 1833.                  WRITE(UNIT=n)raux2
 1834.                END SUBROUTINE WrTopoGrdH8
ftn-5008 ftn: NOTE File = IOLowLevel.f90, Line = 1834 
  Named Constant "H" is not used.

 1835.              END MODULE IOLowLevel

ftn-6254 ftn: VECTOR File = IOLowLevel.f90, Line = 210 
  A loop starting at line 210 was not vectorized because a recurrence was found on "REQDG" at line 210.

ftn-6254 ftn: VECTOR File = IOLowLevel.f90, Line = 211 
  A loop starting at line 211 was not vectorized because a recurrence was found on "COMBF" at line 211.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 212 
  A loop starting at line 212 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 213 
  A loop starting at line 213 was fused with the loop starting at line 212.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 214 
  A loop starting at line 214 was fused with the loop starting at line 212.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 215 
  A loop starting at line 215 was not vectorized because it does not map well onto the target architecture.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 216 
  A loop starting at line 216 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 217 
  A loop starting at line 217 was fused with the loop starting at line 216.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 218 
  A loop starting at line 218 was fused with the loop starting at line 215.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 219 
  A loop starting at line 219 was fused with the loop starting at line 215.

ftn-6205 ftn: VECTOR File = IOLowLevel.f90, Line = 262 
  A loop starting at line 262 was vectorized with a single vector iteration.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 263 
  A loop starting at line 263 was fused with the loop starting at line 262.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 264 
  A loop starting at line 264 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 265 
  A loop starting at line 265 was vectorized.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 311 
  A loop starting at line 311 was not vectorized because it contains a call to a subroutine or function on line 312.

ftn-6286 ftn: VECTOR File = IOLowLevel.f90, Line = 323 
  A loop starting at line 323 was not vectorized because it contains input/output operations at line 324.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 325 
  A loop starting at line 325 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 340 
  A loop starting at line 340 was vectorized.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 351 
  A loop starting at line 351 was not vectorized because it contains a call to a subroutine or function on line 352.

ftn-6286 ftn: VECTOR File = IOLowLevel.f90, Line = 363 
  A loop starting at line 363 was not vectorized because it contains input/output operations at line 364.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 365 
  A loop starting at line 365 was vectorized.

ftn-6205 ftn: VECTOR File = IOLowLevel.f90, Line = 405 
  A loop starting at line 405 was vectorized with a single vector iteration.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 406 
  A loop starting at line 406 was fused with the loop starting at line 405.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 407 
  A loop starting at line 407 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 408 
  A loop starting at line 408 was vectorized.

ftn-6205 ftn: VECTOR File = IOLowLevel.f90, Line = 436 
  A loop starting at line 436 was vectorized with a single vector iteration.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 437 
  A loop starting at line 437 was fused with the loop starting at line 436.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 438 
  A loop starting at line 438 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 439 
  A loop starting at line 439 was vectorized.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 451 
  A loop starting at line 451 was not vectorized because it contains a call to a subroutine or function on line 455.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 452 
  A loop starting at line 452 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 452 
  A loop starting at line 452 was unrolled 8 times.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 466 
  A loop starting at line 466 was not vectorized because it contains a call to a subroutine or function on line 470.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 467 
  A loop starting at line 467 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 467 
  A loop starting at line 467 was partially vectorized.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 483 
  A loop starting at line 483 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 483 
  A loop starting at line 483 was unrolled 8 times.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 496 
  A loop starting at line 496 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 496 
  A loop starting at line 496 was partially vectorized.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 511 
  A loop starting at line 511 was not vectorized because it contains a call to a subroutine or function on line 515.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 512 
  A loop starting at line 512 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 512 
  A loop starting at line 512 was unrolled 8 times.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 526 
  A loop starting at line 526 was not vectorized because it contains a call to a subroutine or function on line 530.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 527 
  A loop starting at line 527 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 527 
  A loop starting at line 527 was partially vectorized.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 543 
  A loop starting at line 543 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 543 
  A loop starting at line 543 was unrolled 8 times.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 556 
  A loop starting at line 556 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 556 
  A loop starting at line 556 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 570 
  A loop starting at line 570 was not vectorized because a better candidate was found at line 571.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 571 
  A loop starting at line 571 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 571 
  A loop starting at line 571 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 586 
  A loop starting at line 586 was not vectorized because a better candidate was found at line 587.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 587 
  A loop starting at line 587 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 587 
  A loop starting at line 587 was partially vectorized.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 671 
  A loop starting at line 671 was not vectorized because it contains a call to a subroutine or function on line 674.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 681 
  A loop starting at line 681 was not vectorized because it contains a call to a subroutine or function on line 682.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 766 
  A loop starting at line 766 was not vectorized because it contains a call to a subroutine or function on line 769.

ftn-6262 ftn: VECTOR File = IOLowLevel.f90, Line = 776 
  A loop starting at line 776 was not vectorized because it contains a call to a subroutine or function on line 777.

ftn-6205 ftn: VECTOR File = IOLowLevel.f90, Line = 947 
  A loop starting at line 947 was vectorized with a single vector iteration.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 948 
  A loop starting at line 948 was fused with the loop starting at line 947.

ftn-6205 ftn: VECTOR File = IOLowLevel.f90, Line = 970 
  A loop starting at line 970 was vectorized with a single vector iteration.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 971 
  A loop starting at line 971 was fused with the loop starting at line 970.

ftn-6205 ftn: VECTOR File = IOLowLevel.f90, Line = 992 
  A loop starting at line 992 was vectorized with a single vector iteration.

ftn-6004 ftn: SCALAR File = IOLowLevel.f90, Line = 993 
  A loop starting at line 993 was fused with the loop starting at line 992.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1010 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1018 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1024 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1033 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1057 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1061 
  Routine MSGOUT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1062 
  Routine MSGDUMP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1068 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1076 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1099 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1102 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1109 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1117 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1123 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1132 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1141 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1163 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1166 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1174 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1178 
  Routine MSGOUT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1179 
  Routine MSGDUMP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1185 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1193 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1202 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = IOLowLevel.f90, Line = 1220 
  A loop starting at line 1220 was replaced by a library call.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1227 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1233 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1236 
  A loop starting at line 1236 was not vectorized because a better candidate was found at line 1237.

ftn-6202 ftn: VECTOR File = IOLowLevel.f90, Line = 1237 
  A loop starting at line 1237 was replaced by a library call.

ftn-6202 ftn: VECTOR File = IOLowLevel.f90, Line = 1253 
  A loop starting at line 1253 was replaced by a library call.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1260 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1266 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1269 
  A loop starting at line 1269 was not vectorized because a better candidate was found at line 1270.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1270 
  A loop starting at line 1270 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1270 
  A loop starting at line 1270 was vectorized.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1311 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1316 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1317 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = IOLowLevel.f90, Line = 1317 
  A loop starting at line 1317 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = IOLowLevel.f90, Line = 1317 
  A loop starting at line 1317 was partially vector pipelined.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1317 
  A loop starting at line 1317 was partially vectorized.

ftn-3001 ftn: IPA File = IOLowLevel.f90, Line = 1317 
  The call to DAYLAG was textually inlined.

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1320 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = IOLowLevel.f90, Line = 1320 
  A loop starting at line 1320 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = IOLowLevel.f90, Line = 1320 
  A loop starting at line 1320 was partially vector pipelined.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1320 
  A loop starting at line 1320 was partially vectorized.

ftn-3001 ftn: IPA File = IOLowLevel.f90, Line = 1320 
  The call to DAYLAG was textually inlined.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1323 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1326 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1329 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1331 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1334 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1337 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1340 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1343 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1347 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1352 
  A loop starting at line 1352 was not vectorized because a better candidate was found at line 1353.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1353 
  A loop starting at line 1353 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1353 
  A loop starting at line 1353 was partially vectorized.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1395 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1400 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1401 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = IOLowLevel.f90, Line = 1401 
  A loop starting at line 1401 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = IOLowLevel.f90, Line = 1401 
  A loop starting at line 1401 was partially vector pipelined.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1401 
  A loop starting at line 1401 was partially vectorized.

ftn-3001 ftn: IPA File = IOLowLevel.f90, Line = 1401 
  The call to DAYLAG was textually inlined.

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1404 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = IOLowLevel.f90, Line = 1404 
  A loop starting at line 1404 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = IOLowLevel.f90, Line = 1404 
  A loop starting at line 1404 was partially vector pipelined.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1404 
  A loop starting at line 1404 was partially vectorized.

ftn-3001 ftn: IPA File = IOLowLevel.f90, Line = 1404 
  The call to DAYLAG was textually inlined.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1407 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1410 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1413 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1415 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1418 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1421 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1424 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1427 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = IOLowLevel.f90, Line = 1431 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1436 
  A loop starting at line 1436 was not vectorized because a better candidate was found at line 1437.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1437 
  A loop starting at line 1437 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1437 
  A loop starting at line 1437 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1477 
  A loop starting at line 1477 was not vectorized because a better candidate was found at line 1478.

ftn-6373 ftn: VECTOR File = IOLowLevel.f90, Line = 1478 
  A loop starting at line 1478 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = IOLowLevel.f90, Line = 1478 
  A loop starting at line 1478 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1478 
  A loop starting at line 1478 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1485 
  A loop starting at line 1485 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1489 
  A loop starting at line 1489 was vectorized.

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1494 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1498 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1511 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = IOLowLevel.f90, Line = 1512 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1529 
  A loop starting at line 1529 was not vectorized because a better candidate was found at line 1530.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1530 
  A loop starting at line 1530 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1530 
  A loop starting at line 1530 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1544 
  A loop starting at line 1544 was not vectorized because a better candidate was found at line 1545.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1545 
  A loop starting at line 1545 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1545 
  A loop starting at line 1545 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1562 
  A loop starting at line 1562 was not vectorized because a better candidate was found at line 1563.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1563 
  A loop starting at line 1563 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1563 
  A loop starting at line 1563 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1578 
  A loop starting at line 1578 was not vectorized because a better candidate was found at line 1579.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1579 
  A loop starting at line 1579 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1579 
  A loop starting at line 1579 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1595 
  A loop starting at line 1595 was not vectorized because a better candidate was found at line 1596.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1596 
  A loop starting at line 1596 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1596 
  A loop starting at line 1596 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1611 
  A loop starting at line 1611 was not vectorized because a better candidate was found at line 1612.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1612 
  A loop starting at line 1612 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1612 
  A loop starting at line 1612 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1628 
  A loop starting at line 1628 was not vectorized because a better candidate was found at line 1629.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1629 
  A loop starting at line 1629 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1629 
  A loop starting at line 1629 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1645 
  A loop starting at line 1645 was not vectorized because a better candidate was found at line 1646.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1646 
  A loop starting at line 1646 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1646 
  A loop starting at line 1646 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1662 
  A loop starting at line 1662 was not vectorized because a better candidate was found at line 1663.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1663 
  A loop starting at line 1663 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1663 
  A loop starting at line 1663 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1677 
  A loop starting at line 1677 was not vectorized because a better candidate was found at line 1678.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1678 
  A loop starting at line 1678 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1678 
  A loop starting at line 1678 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1693 
  A loop starting at line 1693 was not vectorized because a better candidate was found at line 1694.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1694 
  A loop starting at line 1694 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1694 
  A loop starting at line 1694 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1708 
  A loop starting at line 1708 was not vectorized because a better candidate was found at line 1709.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1709 
  A loop starting at line 1709 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1709 
  A loop starting at line 1709 was partially vectorized.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1732 
  A loop starting at line 1732 was not vectorized because a better candidate was found at line 1734.

ftn-6294 ftn: VECTOR File = IOLowLevel.f90, Line = 1733 
  A loop starting at line 1733 was not vectorized because a better candidate was found at line 1734.

ftn-6005 ftn: SCALAR File = IOLowLevel.f90, Line = 1734 
  A loop starting at line 1734 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = IOLowLevel.f90, Line = 1734 
  A loop starting at line 1734 was partially vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1756 
  A loop starting at line 1756 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1757 
  A loop starting at line 1757 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1758 
  A loop starting at line 1758 was vectorized.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1776 
  A loop starting at line 1776 was not vectorized because it does not map well onto the target architecture.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1777 
  A loop starting at line 1777 was not vectorized because it does not map well onto the target architecture.

ftn-6332 ftn: VECTOR File = IOLowLevel.f90, Line = 1778 
  A loop starting at line 1778 was not vectorized because it does not map well onto the target architecture.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1816 
  A loop starting at line 1816 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1817 
  A loop starting at line 1817 was vectorized.

ftn-6204 ftn: VECTOR File = IOLowLevel.f90, Line = 1832 
  A loop starting at line 1832 was vectorized.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                C r o s s   R e f e r e n c e   for   IOLOWLEVEL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

160                                                               FORMAT label
  Decl     853
  Set 
  Used

161                                                               FORMAT label
  Decl     783
  Set 
  Used

161                                                               FORMAT label
  Decl     687
  Set 
  Used

161                                                               FORMAT label
  Decl     854
  Set 
  Used

336                                                               FORMAT label
  Decl    1358
  Set 
  Used

336                                                               FORMAT label
  Decl    1442
  Set 
  Used

ADJUSTL                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0    1019    1026    1058    1078    1118    1123    1125    1134    1143    1175
          1186    1195    1204

BFR                             Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1216
  Set     1220
  Used    1221    1229    1239

BFR                             Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1250
  Set     1253
  Used    1254    1262    1272

C0                              Stack                             CHARACTER(8)
  Decl    1003
  Set 
  Used    1009    1017    1022    1032

C0                              Stack                             CHARACTER(8)
  Decl    1050
  Set 
  Used    1056    1067    1075

C0                              Stack                             CHARACTER(8)
  Decl    1094
  Set 
  Used    1108    1116    1121    1131    1140

C0                              Stack                             CHARACTER(8)
  Decl    1158
  Set 
  Used    1173    1184    1192    1201

C1                              Stack                             CHARACTER(8)
  Decl    1003
  Set 
  Used    1023

C1                              Stack                             CHARACTER(8)
  Decl    1094
  Set 
  Used    1122

COMBF                           Heap                              CHARACTER(40), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     140
  Set      211
  Used     190     682     683     777     778

COMBF_IN                        Dummy Arg                         CHARACTER(40), DIMENSION(:), INTENT(IN)
  Decl     165     169
  Set 
  Used     211

CONSTANTS                                                         Module
  Decl
  Set 
  Used       8

COSGAUSSCOLAT                   Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl    1088    1091
  Set 
  Used    1098    1129

COSGAUSSCOLAT                   Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1152    1155
  Set 
  Used    1162    1190

D1                              Stack                             INTEGER
  Decl     449
  Set      450
  Used     452

D1                              Stack                             INTEGER
  Decl     464
  Set      465
  Used     467

D1                              Stack                             INTEGER
  Decl     481
  Set      482
  Used     483

D1                              Stack                             INTEGER
  Decl     494
  Set      495
  Used     496

D1                              Stack                             INTEGER
  Decl     509
  Set      510
  Used     512

D1                              Stack                             INTEGER
  Decl     524
  Set      525
  Used     527

D1                              Stack                             INTEGER
  Decl     541
  Set      542
  Used     543

D1                              Stack                             INTEGER
  Decl     554
  Set      555
  Used     556

D1                              Stack                             INTEGER
  Decl     568
  Set      569
  Used     571     572

D1                              Stack                             INTEGER
  Decl     584
  Set      585
  Used     587     588

D2                              Stack                             INTEGER
  Decl     309
  Set      310
  Used     311

D2                              Stack                             INTEGER
  Decl     321
  Set      322
  Used     323

D2                              Stack                             INTEGER
  Decl     349
  Set      350
  Used     351

D2                              Stack                             INTEGER
  Decl     361
  Set      362
  Used     363

D2                              Stack                             INTEGER
  Decl     449
  Set      450
  Used     451

D2                              Stack                             INTEGER
  Decl     464
  Set      465
  Used     466

D2                              Stack                             INTEGER
  Decl     509
  Set      510
  Used     511

D2                              Stack                             INTEGER
  Decl     524
  Set      525
  Used     526

D2                              Stack                             INTEGER
  Decl     568
  Set      569
  Used     570

D2                              Stack                             INTEGER
  Decl     584
  Set      585
  Used     586

DAYLAG                                                            Subroutine, Module procedure, PRIVATE
  Decl    1447
  Set 
  Used       0    1317    1401    1404

DEEPTE                                                            CHARACTER(40), PARAMETER
  Decl     620
  Set 
  Used     659

DEEPTE                                                            CHARACTER(40), PARAMETER
  Decl     714
  Set 
  Used     753

DEEPTE                                                            CHARACTER(40), PARAMETER
  Decl     809
  Set 
  Used     842

DEEPTE                                                            CHARACTER(40), PARAMETER
  Decl     880
  Set 
  Used     915

DEL                             Dummy Arg                         REAL(KIND=4), DIMENSION(<exp>), INTENT(IN)
  Decl     595     602
  Set 
  Used     649

DEL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     689     696
  Set 
  Used     743

DEL                             Dummy Arg                         REAL(KIND=4), DIMENSION(<exp>), INTENT(IN)
  Decl     785     792
  Set 
  Used     832

DEL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     856     863
  Set 
  Used     905

DF                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1469    1488    1511

DI                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1465    1484

DIAG                                                              CHARACTER(4), PARAMETER
  Decl     631
  Set 
  Used     674     675     682     683

DIAG                                                              CHARACTER(4), PARAMETER
  Decl     725
  Set 
  Used     769     770     777     778

DIVRGN                                                            CHARACTER(40), PARAMETER
  Decl     614
  Set 
  Used     653

DIVRGN                                                            CHARACTER(40), PARAMETER
  Decl     708
  Set 
  Used     747

DIVRGN                                                            CHARACTER(40), PARAMETER
  Decl     803
  Set 
  Used     836

DIVRGN                                                            CHARACTER(40), PARAMETER
  Decl     874
  Set 
  Used     909

DLAG                            Stack                             REAL(KIND=8)
  Decl    1287
  Set 
  Used    1317    1318    1320    1321

DLAG                            Stack                             REAL(KIND=8)
  Decl    1370
  Set 
  Used    1401    1402    1404    1405

DLAG                            Dummy Arg                         REAL(KIND=8)
  Decl    1447    1451
  Set     1494    1498    1500    1506    1508    1513
  Used

DODIA                           Heap                              LOGICAL, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     141
  Set      212
  Used     191

DODIA_IN                        Dummy Arg                         LOGICAL, DIMENSION(:), INTENT(IN)
  Decl     165     170
  Set 
  Used     212

FATALERROR                      Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0    1010    1024    1057    1076    1102    1117    1132    1163
          1166    1174    1185    1193    1202    1227    1233    1260    1266    1311    1347    1395    1431

FATALERROR                      Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0    1010    1024    1057    1076    1102    1117    1132    1163
          1166    1174    1185    1193    1202    1227    1233    1260    1266    1311    1347    1395    1431

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl     304     306
  Set 
  Used     310     312

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl     315     317
  Set      325
  Used     318     322

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(OUT)
  Decl     328     330
  Set 
  Used     332

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl     334     336
  Set      340
  Used     337

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl     344     346
  Set 
  Used     350     352

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl     355     357
  Set      365
  Used     358     362

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(OUT)
  Decl     368     370
  Set 
  Used     372

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl     374     376
  Set 
  Used     378

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(IN)
  Decl     443     445
  Set 
  Used     446     450     453

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl     458     460
  Set 
  Used     461     465     468

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl     475     477
  Set 
  Used     478     482     484

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     488     490
  Set 
  Used     491     495     497

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(IN)
  Decl     503     505
  Set 
  Used     506     510     513

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl     518     520
  Set 
  Used     521     525     528

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl     535     537
  Set 
  Used     538     542     544

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     548     550
  Set 
  Used     551     555     557

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(IN)
  Decl     562     564
  Set 
  Used     565     569     572

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl     578     580
  Set 
  Used     581     585     588

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1552    1555
  Set     1564
  Used    1556    1560

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1568    1571
  Set     1580
  Used    1572    1576

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1585    1588
  Set     1597
  Used    1589    1593

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1601    1604
  Set     1613
  Used    1605    1609

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1618    1621
  Set     1631
  Used    1622    1625

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1635    1638
  Set     1648
  Used    1639    1642

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1653    1656
  Set     1664
  Used    1657    1660

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1668    1671
  Set     1679
  Used    1672    1675

FIELD                           Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1684    1687
  Set     1695
  Used    1688    1691

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1699    1702
  Set     1710
  Used    1703    1706

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :, :), INTENT(OUT)
  Decl    1720    1722
  Set     1735
  Used    1723    1729    1730    1731

FIELD1                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1742    1745
  Set     1756
  Used    1748

FIELD1                          Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1762    1765
  Set     1776
  Used    1768

FIELD1                          Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl    1801    1803
  Set 
  Used    1806

FIELD1                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1809    1811
  Set 
  Used    1813    1816

FIELD2                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1742    1746
  Set     1757
  Used    1749

FIELD2                          Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1762    1766
  Set     1777
  Used    1769

FIELD2                          Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(IN)
  Decl    1801    1804
  Set 
  Used    1807

FIELD2                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    1809    1812
  Set 
  Used    1814    1817

FIELD2                          Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl    1821    1823
  Set 
  Used    1825

FIELD2                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1827    1829
  Set 
  Used    1830    1832

FIELD3                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1742    1747
  Set     1758
  Used    1750

FIELD3                          Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1762    1767
  Set     1778
  Used    1770

FMT1                                                              CHARACTER(29), PARAMETER
  Decl     630
  Set 
  Used     650     651     652     653     654     655     656     657     658     659     660     661     662     663     664
           665     666     667     668     674     682

FMT1                                                              CHARACTER(29), PARAMETER
  Decl     724
  Set 
  Used     744     745     746     747     748     749     750     751     752     753     754     755     756     757     758
           759     760     761     762     769     777

FMT1                                                              CHARACTER(29), PARAMETER
  Decl     819
  Set 
  Used     833     834     835     836     837     838     839     840     841     842     843     844     845     846     847
           848     849     850     851

FMT1                                                              CHARACTER(29), PARAMETER
  Decl     890
  Set 
  Used     906     907     908     909     910     911     912     913     914     915     916     917     918     919     920
           921     922     923     924

FNAME                           Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     998     999
  Set 
  Used

FNAME                           Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1045    1046
  Set 
  Used

FNAME                           Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1088    1089
  Set 
  Used

FNAME                           Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1152    1153
  Set 
  Used

FNAME                           Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1212    1213
  Set 
  Used    1226    1232

FNAME                           Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1245    1246
  Set 
  Used    1259    1265

FNAMESSTAOI                     Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1277    1284
  Set 
  Used    1310

FNAMESSTAOI                     Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1360    1367
  Set 
  Used    1394

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

FWRITEFIELD                                                       Generic interface
  Decl      32     123
  Set 
  Used

FWRITEFIELD42D                                                    Subroutine, Module procedure, PRIVATE
  Decl     562
  Set 
  Used

FWRITEFIELD82D                                                    Subroutine, Module procedure, PRIVATE
  Decl     578
  Set 
  Used

GAUSSWEIGHTS                    Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl    1088    1092
  Set 
  Used    1101    1138

GAUSSWEIGHTS                    Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1152    1156
  Set 
  Used    1165    1199

GREADFIELD                                                        Generic interface
  Decl      27     111
  Set 
  Used

GREADFIELD41D                                                     Subroutine, Module procedure, PRIVATE
  Decl     368
  Set 
  Used

GREADFIELD42D                                                     Subroutine, Module procedure, PRIVATE
  Decl     344
  Set 
  Used

GREADFIELD81D                                                     Subroutine, Module procedure, PRIVATE
  Decl     374
  Set 
  Used

GREADFIELD82D                                                     Subroutine, Module procedure, PRIVATE
  Decl     355
  Set 
  Used

GREADHEAD                                                         Generic interface
  Decl      25      84
  Set 
  Used

GREADHEAD4                                                        Subroutine, Module procedure, PRIVATE
  Decl     267
  Set 
  Used

GREADHEAD8                                                        Subroutine, Module procedure, PRIVATE
  Decl     285
  Set 
  Used

GREADPROGHEAD                                                     Generic interface
  Decl      36      99
  Set 
  Used

GREADPROGHEAD4                                                    Subroutine, Module procedure, PRIVATE
  Decl     950
  Set 
  Used

GREADPROGHEAD8                                                    Subroutine, Module procedure, PRIVATE
  Decl     959
  Set 
  Used

GWRITEFIELD                                                       Generic interface
  Decl      31     120
  Set 
  Used

GWRITEFIELD41D                                                    Subroutine, Module procedure, PRIVATE
  Decl     535
  Set 
  Used

GWRITEFIELD42D                                                    Subroutine, Module procedure, PRIVATE
  Decl     503
  Set 
  Used

GWRITEFIELD81D                                                    Subroutine, Module procedure, PRIVATE
  Decl     548
  Set 
  Used

GWRITEFIELD82D                                                    Subroutine, Module procedure, PRIVATE
  Decl     518
  Set 
  Used

GWRITEHEAD                                                        Generic interface
  Decl      29      93
  Set 
  Used

GWRITEHEAD4                                                       Subroutine, Module procedure, PRIVATE
  Decl     412
  Set 
  Used

GWRITEHEAD8                                                       Subroutine, Module procedure, PRIVATE
  Decl     423
  Set 
  Used

H                                                                 CHARACTER(15), PARAMETER
  Decl     232
  Set 
  Used     237

H                                                                 CHARACTER(15), PARAMETER
  Decl     252
  Set 
  Used     257

H                                                                 CHARACTER(15), PARAMETER
  Decl     276
  Set 
  Used     281

H                                                                 CHARACTER(15), PARAMETER
  Decl     294
  Set 
  Used     299

H                                                                 CHARACTER(18), PARAMETER
  Decl     307
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     319
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     331
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     338
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     347
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     359
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     371
  Set 
  Used

H                                                                 CHARACTER(18), PARAMETER
  Decl     377
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl     389
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl     402
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl     420
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl     433
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     447
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     462
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     479
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     492
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     507
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     522
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     539
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     552
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     566
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     582
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     933
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     943
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     956
  Set 
  Used

H                                                                 CHARACTER(19), PARAMETER
  Decl     966
  Set 
  Used

H                                                                 CHARACTER(20), PARAMETER
  Decl     979
  Set 
  Used

H                                                                 CHARACTER(20), PARAMETER
  Decl     989
  Set 
  Used

H                                                                 CHARACTER(12), PARAMETER
  Decl    1004
  Set 
  Used    1010    1018    1024    1033

H                                                                 CHARACTER(13), PARAMETER
  Decl    1051
  Set 
  Used    1057    1061    1062    1068    1076

H                                                                 CHARACTER(15), PARAMETER
  Decl    1095
  Set 
  Used    1099    1102    1109    1117    1123    1132    1141

H                                                                 CHARACTER(16), PARAMETER
  Decl    1159
  Set 
  Used    1163    1166    1174    1178    1179    1185    1193    1202

H                                                                 CHARACTER(24), PARAMETER
  Decl    1218
  Set 
  Used    1227    1233

H                                                                 CHARACTER(24), PARAMETER
  Decl    1251
  Set 
  Used    1260    1266

H                                                                 CHARACTER(18), PARAMETER
  Decl    1294
  Set 
  Used    1311    1316    1323    1326    1329    1331    1334    1337    1340    1343    1347

H                                                                 CHARACTER(18), PARAMETER
  Decl    1377
  Set 
  Used    1395    1400    1407    1410    1413    1415    1418    1421    1424    1427    1431

H                                                                 CHARACTER(14), PARAMETER
  Decl    1559
  Set 
  Used

H                                                                 CHARACTER(14), PARAMETER
  Decl    1575
  Set 
  Used

H                                                                 CHARACTER(14), PARAMETER
  Decl    1592
  Set 
  Used

H                                                                 CHARACTER(14), PARAMETER
  Decl    1608
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl    1724
  Set 
  Used

H                                                                 CHARACTER(20), PARAMETER
  Decl    1787
  Set 
  Used

H                                                                 CHARACTER(20), PARAMETER
  Decl    1795
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl    1805
  Set 
  Used

H                                                                 CHARACTER(16), PARAMETER
  Decl    1815
  Set 
  Used

H                                                                 CHARACTER(17), PARAMETER
  Decl    1824
  Set 
  Used

H                                                                 CHARACTER(17), PARAMETER
  Decl    1831
  Set 
  Used

HF                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1470    1494    1498    1511

HI                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1466    1494    1498

I                               Stack                             INTEGER
  Decl    1217
  Set     1237
  Used    1239

I                               Stack                             INTEGER
  Decl    1249
  Set     1270
  Used    1272

I                               Stack                             INTEGER
  Decl    1291
  Set     1353
  Used    1354

I                               Stack                             INTEGER
  Decl    1374
  Set     1437
  Used    1438

I                               Stack                             INTEGER(KIND=4)
  Decl    1525
  Set     1530
  Used    1531

I                               Stack                             INTEGER
  Decl    1541
  Set     1545
  Used    1546

I                               Stack                             INTEGER(KIND=4)
  Decl    1557
  Set     1563
  Used    1564

I                               Stack                             INTEGER(KIND=4)
  Decl    1573
  Set     1579
  Used    1580

I                               Stack                             INTEGER(KIND=4)
  Decl    1590
  Set     1596
  Used    1597

I                               Stack                             INTEGER(KIND=4)
  Decl    1606
  Set     1612
  Used    1613

I                               Stack                             INTEGER(KIND=4)
  Decl    1623
  Set     1629
  Used    1631

I                               Stack                             INTEGER(KIND=4)
  Decl    1640
  Set     1646
  Used    1648

I                               Stack                             INTEGER(KIND=4)
  Decl    1658
  Set     1663
  Used    1664

I                               Stack                             INTEGER(KIND=4)
  Decl    1673
  Set     1678
  Used    1679

I                               Stack                             INTEGER(KIND=4)
  Decl    1689
  Set     1694
  Used    1695

I                               Stack                             INTEGER(KIND=4)
  Decl    1704
  Set     1709
  Used    1710

I                               Stack                             INTEGER
  Decl    1725
  Set     1734
  Used    1735

I4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     226     228     229     250     268     269     270     272     273     305     329     345     369     382     383
           385     386     400     403     404     405     406     413     414     416     417     444     476     504     536
           563     596     597     598     599     600     601     604     605     786     787     788     789     790     791
           928     929     931     932     942     951     952     954     955     974     975     977     978     988     990
           991     992     993    1215    1248    1285    1286    1368    1369    1521    1522    1525    1526    1553    1554
          1557    1558    1573    1574    1590    1591    1606    1607    1623    1624    1640    1641    1654    1658    1659
          1673    1674    1689    1690    1704    1705    1763    1784    1785    1794    1796    1797    1802    1822

IAUX                            Stack                             INTEGER(KIND=4), DIMENSION(8)
  Decl     250
  Set 
  Used     259     262     263

IAUX                            Stack                             INTEGER(KIND=4), DIMENSION(10)
  Decl     400
  Set      403     404     405     406
  Used     409

IAUX                            Stack                             INTEGER, DIMENSION(10)
  Decl     431
  Set      434     435     436     437
  Used     440

IAUX                            Stack                             INTEGER(KIND=4), DIMENSION(10)
  Decl     942
  Set 
  Used     944     945     946     947     948

IAUX                            Stack                             INTEGER, DIMENSION(10)
  Decl     965
  Set 
  Used     967     968     969     970     971

IAUX                            Stack                             INTEGER(KIND=4), DIMENSION(10)
  Decl     988
  Set      990     991     992     993
  Used     994

IAUX                            Stack                             INTEGER(KIND=4), DIMENSION(2)
  Decl    1794
  Set     1796    1797
  Used    1798

IAVRQ                           Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     143
  Set      214
  Used     193     672     673     767     768

IAVRQ_IN                        Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     165     172
  Set 
  Used     214

IBMAX                           Static offset=0                   INTEGER, PRIVATE, SAVE
  Decl     157
  Set      207
  Used

IBMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     163     186
  Set 
  Used     207

ICF                             Static offset=64                  INTEGER, PRIVATE, SAVE
  Decl     150
  Set      200
  Used     680     681     775     776

ICF_IN                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     162     179
  Set 
  Used     200

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     223     228
  Set 
  Used     239

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     241     246
  Set      262
  Used

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     267     272
  Set 
  Used     283

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     285     290
  Set 
  Used     301

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     381     385
  Set 
  Used     390

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     392     396
  Set 
  Used     405

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     412     416
  Set 
  Used     421

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     423     427
  Set 
  Used     436

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     595     597
  Set 
  Used     647

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     689     691
  Set 
  Used     741

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     785     787
  Set 
  Used     830

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     856     858
  Set 
  Used     903

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     927     931
  Set 
  Used     934

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     936     940
  Set      947
  Used

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     950     954
  Set 
  Used     957

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     959     963
  Set      970
  Used

IDATE                           Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     973     977
  Set 
  Used     980

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     982     986
  Set 
  Used     992

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     223     229
  Set 
  Used     239

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     241     247
  Set      263
  Used

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     267     273
  Set 
  Used     283

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     285     291
  Set 
  Used     301

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     381     386
  Set 
  Used     390

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     392     397
  Set 
  Used     406

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     412     417
  Set 
  Used     421

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     423     428
  Set 
  Used     437

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     927     932
  Set 
  Used     934

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     936     941
  Set      948
  Used

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(OUT)
  Decl     950     955
  Set 
  Used     957

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl     959     964
  Set      971
  Used

IDATEC                          Dummy Arg                         INTEGER(KIND=4), DIMENSION(4), INTENT(IN)
  Decl     973     978
  Set 
  Used     980

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     982     987
  Set 
  Used     993

IDAY                            Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     595     599
  Set 
  Used     647

IDAY                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     689     693
  Set 
  Used     741

IDAY                            Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     785     789
  Set 
  Used     830

IDAY                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     856     860
  Set 
  Used     903

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1558
  Set     1560
  Used    1563

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1574
  Set     1576
  Used    1579

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1591
  Set     1593
  Used    1596

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1607
  Set     1609
  Used    1612

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1624
  Set     1625
  Used    1629

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1641
  Set     1642
  Used    1646

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1659
  Set     1660
  Used    1663

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1674
  Set     1675
  Used    1678

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1690
  Set     1691
  Used    1694

IDIM                            Stack                             INTEGER(KIND=4)
  Decl    1705
  Set     1706
  Used    1709

IERR                            Stack                             INTEGER
  Decl    1002
  Set 
  Used    1008    1009    1015    1016    1017    1030    1031    1032

IERR                            Stack                             INTEGER
  Decl    1049
  Set 
  Used    1055    1056    1065    1066    1067    1073    1074    1075

IERR                            Stack                             INTEGER
  Decl    1093
  Set 
  Used    1107    1108    1114    1115    1116    1129    1130    1131    1138    1139    1140

IERR                            Stack                             INTEGER
  Decl    1157
  Set 
  Used    1172    1173    1182    1183    1184    1190    1191    1192    1199    1200    1201

IERR                            Stack                             INTEGER(KIND=4)
  Decl    1215
  Set 
  Used    1224    1226    1229    1230    1232

IERR                            Stack                             INTEGER(KIND=4)
  Decl    1248
  Set 
  Used    1257    1259    1262    1263    1265

IERR                            Stack                             INTEGER
  Decl    1293
  Set 
  Used    1308    1310

IERR                            Stack                             INTEGER
  Decl    1376
  Set 
  Used    1392    1394

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(OUT)
  Decl     223     226
  Set 
  Used     239

IFDAY                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl     241     244
  Set      260
  Used

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(OUT)
  Decl     267     270
  Set 
  Used     283

IFDAY                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl     285     288
  Set 
  Used     301

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     381     383
  Set 
  Used     390

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     392     394
  Set 
  Used     403

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     412     414
  Set 
  Used     421

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     423     425
  Set 
  Used     434

IFDAY                           Dummy Arg                         INTEGER(KIND=4)
  Decl     595     604
  Set 
  Used

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     689     698
  Set 
  Used

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(OUT)
  Decl     927     929
  Set 
  Used     934

IFDAY                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl     936     938
  Set      945
  Used

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(OUT)
  Decl     950     952
  Set 
  Used     957

IFDAY                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl     959     961
  Set      968
  Used

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     973     975
  Set 
  Used     980

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     982     984
  Set 
  Used     990

IFDAY                           Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1783    1785
  Set 
  Used    1788

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1790    1792
  Set 
  Used    1796

IFDAY4                          Stack                             INTEGER(KIND=4)
  Decl     250
  Set 
  Used     259     260

IFSST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1277    1279
  Set 
  Used    1346

IFSST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1360    1362
  Set 
  Used    1430

IHR                             Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     595     598
  Set 
  Used     647

IHR                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     689     692
  Set 
  Used     741

IHR                             Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     785     788
  Set 
  Used     830

IHR                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     856     859
  Set 
  Used     903

IJ                              Stack                             INTEGER
  Decl    1217
  Set     1235    1238
  Used    1239

IJ                              Stack                             INTEGER
  Decl    1249
  Set     1268    1271
  Used    1272

IJ                              Stack                             INTEGER(KIND=4)
  Decl    1623
  Set     1627    1630
  Used    1631

IJ                              Stack                             INTEGER(KIND=4)
  Decl    1640
  Set     1644    1647
  Used    1648

IJMAX                           Static offset=128                 INTEGER, PRIVATE, SAVE
  Decl     154
  Set      204
  Used     651     657     658     659     660     661     662     663     664     665     666     667     668     745     751
           752     753     754     755     756     757     758     759     760     761     762     834     840     841     842
           843     844     845     846     847     848     849     850     851     907     913     914     915     916     917
           918     919     920     921     922     923     924

IJMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     163     183
  Set 
  Used     204

IM                              Stack                             INTEGER
  Decl    1725
  Set     1729
  Used    1734

IMAX                            Static offset=192                 INTEGER, PRIVATE, SAVE
  Decl     155
  Set      205
  Used     636     730    1237    1270    1530    1545

IMAX                            Stack                             INTEGER
  Decl    1292
  Set     1298
  Used    1353

IMAX                            Stack                             INTEGER
  Decl    1375
  Set     1381
  Used    1437

IMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     163     184
  Set 
  Used     205

IMDL                            Stack                             CHARACTER(4)
  Decl     607
  Set 
  Used     642     646

IMDL                            Stack                             CHARACTER(4)
  Decl     701
  Set 
  Used     736     740

IMDL                            Stack                             CHARACTER(4)
  Decl     796
  Set 
  Used     825     829

IMDL                            Stack                             CHARACTER(4)
  Decl     867
  Set 
  Used     898     902

INITREADWRITESPEC                                                 Subroutine, Module procedure
  Decl      51     161
  Set 
  Used

INT                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0     262     403     405     434     436     945     947     948     968
           969     970     971     990     991     992     993    1796    1797

INTSST                          Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    1277    1280
  Set     1318    1319
  Used    1317    1319    1320    1330    1338

INTSST                          Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    1360    1363
  Set     1402    1403
  Used    1401    1403    1404    1414    1422

INTSST                          Dummy Arg                         INTEGER
  Decl    1447    1454
  Set 
  Used    1474

IOLOWLEVEL                                                        Module
  Decl       6
  Set 
  Used

IREC                            Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1520    1522
  Set 
  Used    1528

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1536    1538
  Set 
  Used    1543

IREC                            Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1552    1554
  Set 
  Used    1561

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1568    1570
  Set 
  Used    1577

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1585    1587
  Set 
  Used    1594

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1601    1603
  Set 
  Used    1610

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1618    1620
  Set 
  Used    1626

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1635    1637
  Set 
  Used    1643

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1653    1655
  Set 
  Used    1661

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1668    1670
  Set 
  Used    1676

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1684    1686
  Set 
  Used    1692

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1699    1701
  Set 
  Used    1707

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1720    1721
  Set 
  Used    1727

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1742    1744
  Set 
  Used    1752    1753    1754

IREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1762    1764
  Set 
  Used    1772    1773    1774

ISG                             Stack                             INTEGER(KIND=4), DIMENSION(2)
  Decl     605
  Set      636     637
  Used     674     676     682     684

ISG                             Stack                             INTEGER, DIMENSION(2)
  Decl     699
  Set      730     731
  Used     769     771     777     779

ITAVL                           Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     142
  Set      213
  Used     192     674     676     769     771

ITAVL_IN                        Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     165     171
  Set 
  Used     213

ITCF                            Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     148
  Set      219
  Used     198     682     684     777     779

ITCF_IN                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     166     177
  Set 
  Used     219

ITTL                                                              CHARACTER(20), PARAMETER
  Decl     609
  Set 
  Used     644

ITTL                                                              CHARACTER(20), PARAMETER
  Decl     703
  Set 
  Used     738

ITTL                                                              CHARACTER(20), PARAMETER
  Decl     798
  Set 
  Used     827

ITTL                                                              CHARACTER(20), PARAMETER
  Decl     869
  Set 
  Used     900

IX                              Stack                             INTEGER
  Decl     634
  Set      681
  Used     682     683     684

IX                              Stack                             INTEGER
  Decl     728
  Set      776
  Used     777     778     779

IYR                             Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     595     601
  Set 
  Used     647

IYR                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     689     695
  Set 
  Used     741

IYR                             Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     785     791
  Set 
  Used     830

IYR                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     856     862
  Set 
  Used     903

J                               Stack                             INTEGER
  Decl    1217
  Set     1236
  Used    1239

J                               Stack                             INTEGER
  Decl    1249
  Set     1269
  Used    1272

J                               Stack                             INTEGER
  Decl    1289
  Set     1352
  Used    1354

J                               Stack                             INTEGER
  Decl    1372
  Set     1436
  Used    1438

J                               Stack                             INTEGER(KIND=4)
  Decl    1526
  Set     1529
  Used    1531

J                               Stack                             INTEGER
  Decl    1542
  Set     1544
  Used    1546

J                               Stack                             INTEGER(KIND=4)
  Decl    1557
  Set     1562
  Used    1564

J                               Stack                             INTEGER(KIND=4)
  Decl    1573
  Set     1578
  Used    1580

J                               Stack                             INTEGER(KIND=4)
  Decl    1590
  Set     1595
  Used    1597

J                               Stack                             INTEGER(KIND=4)
  Decl    1606
  Set     1611
  Used    1613

J                               Stack                             INTEGER(KIND=4)
  Decl    1623
  Set     1628
  Used    1631

J                               Stack                             INTEGER(KIND=4)
  Decl    1640
  Set     1645
  Used    1648

J                               Stack                             INTEGER(KIND=4)
  Decl    1658
  Set     1662
  Used    1664

J                               Stack                             INTEGER(KIND=4)
  Decl    1673
  Set     1677
  Used    1679

J                               Stack                             INTEGER(KIND=4)
  Decl    1689
  Set     1693
  Used    1695

J                               Stack                             INTEGER(KIND=4)
  Decl    1704
  Set     1708
  Used    1710

J                               Stack                             INTEGER
  Decl    1725
  Set     1732
  Used    1735

JBMAX                           Static offset=256                 INTEGER, PRIVATE, SAVE
  Decl     158
  Set      208
  Used

JBMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     164     187
  Set 
  Used     208

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1558
  Set     1560
  Used    1562

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1574
  Set     1576
  Used    1578

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1591
  Set     1593
  Used    1595

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1607
  Set     1609
  Used    1611

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1624
  Set     1625
  Used    1628

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1641
  Set     1642
  Used    1645

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1659
  Set     1660
  Used    1662

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1674
  Set     1675
  Used    1677

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1690
  Set     1691
  Used    1693

JDIM                            Stack                             INTEGER(KIND=4)
  Decl    1705
  Set     1706
  Used    1708

JM                              Stack                             INTEGER
  Decl    1725
  Set     1730
  Used    1732

JMAX                            Static offset=320                 INTEGER, PRIVATE, SAVE
  Decl     156
  Set      206
  Used     636     730    1236    1269    1529    1544

JMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     998    1000
  Set 
  Used    1001    1021    1022

JMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1045    1047
  Set 
  Used    1048    1065

JMAX                            Stack                             INTEGER
  Decl    1290
  Set     1297
  Used    1352

JMAX                            Stack                             INTEGER
  Decl    1373
  Set     1380
  Used    1436

JMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     163     185
  Set 
  Used     206

JSIZE                           Stack                             INTEGER
  Decl    1002
  Set 
  Used    1015    1021    1023

JSIZE                           Stack                             INTEGER
  Decl    1093
  Set 
  Used    1114    1120    1122

JTTL                            Stack                             CHARACTER(40)
  Decl     608
  Set      639
  Used     640     641     648

JTTL                            Stack                             CHARACTER(40)
  Decl     702
  Set      733
  Used     734     735     742

JTTL                            Stack                             CHARACTER(40)
  Decl     797
  Set      822
  Used     823     824     831

JTTL                            Stack                             CHARACTER(40)
  Decl     868
  Set      895
  Used     896     897     904

K                               Stack                             INTEGER
  Decl     308
  Set      311
  Used     312

K                               Stack                             INTEGER
  Decl     320
  Set      323
  Used     325

K                               Stack                             INTEGER
  Decl     348
  Set      351
  Used     352

K                               Stack                             INTEGER
  Decl     360
  Set      363
  Used     365

K                               Stack                             INTEGER
  Decl     448
  Set      451
  Used     453

K                               Stack                             INTEGER
  Decl     463
  Set      466
  Used     468

K                               Stack                             INTEGER
  Decl     508
  Set      511
  Used     513

K                               Stack                             INTEGER
  Decl     523
  Set      526
  Used     528

K                               Stack                             INTEGER
  Decl     567
  Set      570
  Used     572

K                               Stack                             INTEGER
  Decl     583
  Set      586
  Used     588

K                               Stack                             INTEGER
  Decl    1725
  Set     1733
  Used    1735

KM                              Stack                             INTEGER
  Decl    1725
  Set     1731
  Used    1733

KMAX                            Static offset=384                 INTEGER, PRIVATE, SAVE
  Decl     153
  Set      203
  Used     641     646     653     654     655     656     735     740     747     748     749     750     824     829     836
           837     838     839     897     902     909     910     911     912

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     223     225
  Set 
  Used     235     236

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     241     243
  Set 
  Used     251     255     256

KMAX                            Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     267     269
  Set 
  Used     279     280

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     285     287
  Set 
  Used     297     298

KMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     163     182
  Set 
  Used     203

L                               Stack                             INTEGER
  Decl     448
  Set      452
  Used     453

L                               Stack                             INTEGER
  Decl     463
  Set      467
  Used     468

L                               Stack                             INTEGER
  Decl     480
  Set      483
  Used     484

L                               Stack                             INTEGER
  Decl     493
  Set      496
  Used     497

L                               Stack                             INTEGER
  Decl     508
  Set      512
  Used     513

L                               Stack                             INTEGER
  Decl     523
  Set      527
  Used     528

L                               Stack                             INTEGER
  Decl     540
  Set      543
  Used     544

L                               Stack                             INTEGER
  Decl     553
  Set      556
  Used     557

L                               Stack                             INTEGER
  Decl     567
  Set      571
  Used     572

L                               Stack                             INTEGER
  Decl     583
  Set      587
  Used     588

LABELF                          Dummy Arg                         CHARACTER(10)
  Decl    1447    1450
  Set 
  Used    1467    1468    1469    1470

LABELI                          Dummy Arg                         CHARACTER(10), INTENT(IN)
  Decl    1277    1283
  Set 
  Used    1320    1336

LABELI                          Dummy Arg                         CHARACTER(10), INTENT(IN)
  Decl    1360    1366
  Set 
  Used    1404    1420

LABELI                          Dummy Arg                         CHARACTER(10)
  Decl    1447    1449
  Set 
  Used    1463    1464    1465    1466

LABELSI                         Use assoc                         CHARACTER(10), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used    1314    1315    1317    1320    1325    1333    1398    1399    1401    1404    1409    1417

LABELSJ                         Use assoc                         CHARACTER(10), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used    1314    1315    1317    1328    1398    1399    1401    1412

LANDSEAMASK                                                       Generic interface
  Decl      53     129
  Set 
  Used

LANDSEAMASK4                                                      Subroutine, Module procedure, PRIVATE
  Decl    1277
  Set 
  Used

LANDSEAMASK8                                                      Subroutine, Module procedure, PRIVATE
  Decl    1360
  Set 
  Used

LINE                            Stack                             CHARACTER(256)
  Decl    1219
  Set 
  Used    1225    1231

LINE                            Stack                             CHARACTER(256)
  Decl    1252
  Set 
  Used    1258    1264

LINE                            Stack                             CHARACTER(256)
  Decl    1295
  Set 
  Used    1309    1315    1316    1322    1323    1324    1326    1327    1329    1330    1331    1332    1334    1335    1337
          1339    1340    1342    1343    1346

LINE                            Stack                             CHARACTER(256)
  Decl    1378
  Set 
  Used    1393    1399    1400    1406    1407    1408    1410    1411    1413    1414    1415    1416    1418    1419    1421
          1423    1424    1426    1427    1430

LMAX                            Stack                             INTEGER
  Decl     233
  Set      234
  Used     235     236

LMAX                            Stack                             INTEGER
  Decl     253
  Set      254
  Used     255     256

LMAX                            Stack                             INTEGER
  Decl     277
  Set      278
  Used     279     280

LMAX                            Stack                             INTEGER
  Decl     295
  Set      296
  Used     297     298

LNSURF                                                            CHARACTER(40), PARAMETER
  Decl     613
  Set 
  Used     652

LNSURF                                                            CHARACTER(40), PARAMETER
  Decl     707
  Set 
  Used     746

LNSURF                                                            CHARACTER(40), PARAMETER
  Decl     802
  Set 
  Used     835

LNSURF                                                            CHARACTER(40), PARAMETER
  Decl     873
  Set 
  Used     908

LRECIN                          Stack                             INTEGER(KIND=4)
  Decl    1215
  Set 
  Used

LRECIN                          Stack                             INTEGER
  Decl    1249
  Set 
  Used

LRECL                           Stack                             INTEGER(KIND=4)
  Decl    1285
  Set     1304
  Used

LRECL                           Stack                             INTEGER(KIND=4)
  Decl    1368
  Set     1388
  Used

LSEAMK                                                            CHARACTER(40), PARAMETER
  Decl     612
  Set 
  Used     651

LSEAMK                                                            CHARACTER(40), PARAMETER
  Decl     706
  Set 
  Used     745

LSEAMK                                                            CHARACTER(40), PARAMETER
  Decl     801
  Set 
  Used     834

LSEAMK                                                            CHARACTER(40), PARAMETER
  Decl     872
  Set 
  Used     907

LSMK                            Dummy Arg                         REAL(KIND=4), DIMENSION(<exp>), INTENT(OUT)
  Decl    1212    1214
  Set     1239
  Used

LSMK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1245    1247
  Set     1272
  Used

LVCF                            Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     147
  Set      218
  Used     197     682     684     777     779

LVCF_IN                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     166     176
  Set 
  Used     218

LVRQ                            Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     145
  Set      216
  Used     195     674     676     769     771

LVRQ_IN                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     166     174
  Set 
  Used     216

M                               Stack                             INTEGER
  Decl     632
  Set      671
  Used     672     673     674     676

M                               Stack                             INTEGER
  Decl     726
  Set      766
  Used     767     768     769     771

MAXDEGREE                       Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1088    1090
  Set 
  Used    1097    1101

MAXDEGREE                       Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1152    1154
  Set 
  Used    1161    1165

MAXDEGREE2                      Stack                             INTEGER
  Decl    1093
  Set     1097
  Used    1098    1120    1121

MAXDEGREE2                      Stack                             INTEGER
  Decl    1157
  Set     1161
  Used    1162    1182

MF                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1468    1489    1505    1506    1508    1512

MI                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1464    1485    1505    1506    1508

MMAX                            Static offset=448                 INTEGER, PRIVATE, SAVE
  Decl     151
  Set      201
  Used     640     642     646     734     736     740     823     825     829     896     898     902

MMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     162     180
  Set 
  Used     201

MNMAX                           Static offset=512                 INTEGER, PRIVATE, SAVE
  Decl     152
  Set      202
  Used     637     650     652     653     654     655     656     731     744     746     747     748     749     750     833
           835     836     837     838     839     906     908     909     910     911     912

MNMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     163     181
  Set 
  Used     202

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1471    1481    1510

MON                             Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     595     600
  Set 
  Used     647

MON                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     689     694
  Set 
  Used     741

MON                             Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     785     790
  Set 
  Used     830

MON                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     856     861
  Set 
  Used     903

MPERLAT                         Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl     998    1001
  Set 
  Used    1030

MPERLAT                         Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1045    1048
  Set 
  Used    1073

MSGDUMP                         Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1179

MSGDUMP                         Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1179

MSGONE                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0    1323    1329    1334    1340    1400    1407    1410    1413    1415    1418
          1421    1424    1427

MSGONE                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0    1323    1329    1334    1340    1400    1407    1410    1413    1415    1418
          1421    1424    1427

MSGOUT                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1178

MSGOUT                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1178

MXAVL                           Static offset=576                 INTEGER, PRIVATE, SAVE
  Decl     149
  Set      199
  Used     671     766

MXAVL_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     162     178
  Set 
  Used     199

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     223     224
  Set 
  Used     239

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     241     242
  Set 
  Used     259

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     267     268
  Set 
  Used     283

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     285     286
  Set 
  Used     301

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     304     305
  Set 
  Used     312

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     315     316
  Set 
  Used     324

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     328     329
  Set 
  Used     332

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     334     335
  Set 
  Used     339

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     344     345
  Set 
  Used     352

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     355     356
  Set 
  Used     364

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     368     369
  Set 
  Used     372

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     374     375
  Set 
  Used     378

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     381     382
  Set 
  Used     390

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     392     393
  Set 
  Used     409

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     412     413
  Set 
  Used     421

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     423     424
  Set 
  Used     440

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     443     444
  Set 
  Used     455

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     458     459
  Set 
  Used     470

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     475     476
  Set 
  Used     486

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     488     489
  Set 
  Used     499

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     503     504
  Set 
  Used     515

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     518     519
  Set 
  Used     530

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     535     536
  Set 
  Used     546

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     548     549
  Set 
  Used     559

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     562     563
  Set 
  Used     575

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     578     579
  Set 
  Used     591

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     595     596
  Set 
  Used     644     645     648     649     650     651     652     653     654     655     656     657     658     659     660
           661     662     663     664     665     666     667     668     674     682

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     689     690
  Set 
  Used     738     739     742     743     744     745     746     747     748     749     750     751     752     753     754
           755     756     757     758     759     760     761     762     769     777

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     785     786
  Set 
  Used     827     828     831     832     833     834     835     836     837     838     839     840     841     842     843
           844     845     846     847     848     849     850     851

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     856     857
  Set 
  Used     900     901     904     905     906     907     908     909     910     911     912     913     914     915     916
           917     918     919     920     921     922     923     924

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     927     928
  Set 
  Used     934

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     936     937
  Set 
  Used     944

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     950     951
  Set 
  Used     957

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     959     960
  Set 
  Used     967

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl     973     974
  Set 
  Used     980

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl     982     983
  Set 
  Used     994

N                               Stack                             INTEGER
  Decl    1455
  Set     1478    1485    1489
  Used    1479    1486    1490

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1552    1553
  Set 
  Used    1561

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1568    1569
  Set 
  Used    1577

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1585    1586
  Set 
  Used    1594

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1601    1602
  Set 
  Used    1610

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1618    1619
  Set 
  Used    1626

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1635    1636
  Set 
  Used    1643

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1653    1654
  Set 
  Used    1661

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1668    1669
  Set 
  Used    1676

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1684    1685
  Set 
  Used    1692

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1699    1700
  Set 
  Used    1707

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1720    1721
  Set 
  Used    1727

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1742    1743
  Set 
  Used    1752    1753    1754

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1762    1763
  Set 
  Used    1772    1773    1774

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1783    1784
  Set 
  Used    1788

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1790    1791
  Set 
  Used    1798

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1801    1802
  Set 
  Used    1806    1807

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1809    1810
  Set 
  Used    1818    1819

N                               Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1821    1822
  Set 
  Used    1825

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1827    1828
  Set 
  Used    1833

NCDG                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     190     194     197     198

NDAVL                           Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191     192     193

NDF                             Stack                             INTEGER
  Decl    1455
  Set     1488    1490
  Used    1494    1498

NDI                             Stack                             INTEGER
  Decl    1455
  Set     1484    1486    1496    1497
  Used    1494    1498

NDM                             Static offset=0                   INTEGER, DIMENSION(12), SAVE, Initialized
  Decl    1456
  Set 
  Used    1479

NDMF                            Static offset=512                 INTEGER, DIMENSION(12), SAVE, Initialized
  Decl    1460
  Set     1472    1510
  Used    1490    1512

NDMI                            Static offset=1024                INTEGER, DIMENSION(12), SAVE, Initialized
  Decl    1458
  Set     1471
  Used    1486    1497

NDRQ                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     189     195     196

NDY                             Stack                             INTEGER
  Decl    1455
  Set     1476    1479    1481
  Used    1498

NEXP                                                              CHARACTER(4), PARAMETER
  Decl     610
  Set 
  Used     646

NEXP                                                              CHARACTER(4), PARAMETER
  Decl     704
  Set 
  Used     740

NEXP                                                              CHARACTER(4), PARAMETER
  Decl     799
  Set 
  Used     829

NEXP                                                              CHARACTER(4), PARAMETER
  Decl     870
  Set 
  Used     902

NFCTRL                          Use assoc                         INTEGER, From module OPTIONS, DIMENSION(100), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     675     683     770     778

NFERR                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     236     256     280     298

NFGAUSS                         Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    1114    1129    1138    1182    1190    1199

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     675     683     770     778

NFSST                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    1229    1262    1314    1349    1398    1433

NFVAR                           Dummy Arg                         INTEGER(KIND=4), INTENT(IN)
  Decl    1520    1521
  Set 
  Used    1528

NFVAR                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1536    1537
  Set 
  Used    1543

NFWAVES                         Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    1015    1030    1065    1073

NINT                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1402

NN                              Stack                             INTEGER
  Decl     633
  Set      673
  Used     674     675     676

NN                              Stack                             INTEGER
  Decl     727
  Set      768
  Used     769     770     771

NSST                            Stack                             INTEGER(KIND=4)
  Decl    1286
  Set 
  Used    1314    1315

NSST                            Stack                             INTEGER(KIND=4)
  Decl    1369
  Set 
  Used    1398    1399

NUCF                            Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     144
  Set      215
  Used     194     682     684     777     779

NUCF_IN                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     166     173
  Set 
  Used     215

NURQ                            Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     146
  Set      217
  Used     196     674     676     769     771

NURQ_IN                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     166     175
  Set 
  Used     217

OPTIONS                                                           Module
  Decl
  Set 
  Used      11

OROGRA                                                            CHARACTER(40), PARAMETER
  Decl     611
  Set 
  Used     650

OROGRA                                                            CHARACTER(40), PARAMETER
  Decl     705
  Set 
  Used     744

OROGRA                                                            CHARACTER(40), PARAMETER
  Decl     800
  Set 
  Used     833

OROGRA                                                            CHARACTER(40), PARAMETER
  Decl     871
  Set 
  Used     906

PARALLELISM                                                       Module
  Decl
  Set 
  Used      14

R                               Stack                             REAL(KIND=4)
  Decl     794
  Set      821
  Used

R                               Stack                             REAL(KIND=8)
  Decl     865
  Set      894
  Used

R4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     227     230     231     251     271     274     275     306     318     330     337     346     370     384     387
           388     401     407     408     415     418     419     445     446     461     468     477     478     491     497
           505     506     537     538     564     565     581     602     603     792     793     794     930     953     976
          1214    1216    1250    1282    1371    1523    1524    1540    1555    1564    1588    1589    1597    1605    1621
          1631    1639    1656    1657    1672    1687    1688    1695    1703    1723    1748    1749    1750    1765    1766
          1767    1768    1769    1770    1776    1777    1778    1786    1803    1804    1813    1814    1816    1817    1823
          1830    1832

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     245     248     249     264     265     289     292     293     317     325     336     340     357     358     376
           395     398     399     426     429     430     432     438     439     460     490     520     521     550     551
           580     696     697     863     864     865     939     962     985    1091    1092    1155    1156    1247    1272
          1281    1287    1288    1364    1365    1370    1451    1452    1453    1494    1498    1511    1512    1539    1546
          1556    1571    1572    1580    1604    1613    1622    1638    1648    1671    1702    1710    1722    1735    1745
          1746    1747    1756    1757    1758    1793    1811    1812    1829

RAUX1                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     251
  Set 
  Used     259     265

RAUX1                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     401
  Set      408
  Used     409

RAUX1                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     432
  Set      439
  Used     440

RAUX1                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1748
  Set 
  Used    1752    1756

RAUX1                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1768
  Set 
  Used    1772    1776

RAUX1                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl    1813
  Set     1816
  Used    1818

RAUX2                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     251
  Set 
  Used     259     264

RAUX2                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     401
  Set      407
  Used     409

RAUX2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     432
  Set      438
  Used     440

RAUX2                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1749
  Set 
  Used    1753    1757

RAUX2                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1769
  Set 
  Used    1773    1777

RAUX2                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1814
  Set     1817
  Used    1819

RAUX2                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl    1830
  Set     1832
  Used    1833

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     318
  Set 
  Used     324     325

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     337
  Set 
  Used     339     340

RAUX3                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     358
  Set 
  Used     364     365

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     446
  Set      453
  Used     455

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     461
  Set      468
  Used     470

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     478
  Set      484
  Used     486

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     491
  Set      497
  Used     499

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     506
  Set      513
  Used     515

RAUX3                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     521
  Set      528
  Used     530

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     538
  Set      544
  Used     546

RAUX3                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     551
  Set      557
  Used     559

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     565
  Set      572
  Used     575

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl     581
  Set      588
  Used     591

RAUX3                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1556
  Set 
  Used    1561    1564

RAUX3                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1572
  Set 
  Used    1577    1580

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1589
  Set 
  Used    1594    1597

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1605
  Set 
  Used    1610    1613

RAUX3                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1622
  Set 
  Used    1626    1631

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl    1639
  Set 
  Used    1643    1648

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1657
  Set 
  Used    1661    1664

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1672
  Set 
  Used    1676    1679

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1688
  Set 
  Used    1692    1695

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1703
  Set 
  Used    1707    1710

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>, <exp>)
  Decl    1723
  Set 
  Used    1727    1735

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1750
  Set 
  Used    1754    1758

RAUX3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1770
  Set 
  Used    1774    1778

READALB4                                                          Subroutine, Module procedure, PRIVATE
  Decl    1552
  Set 
  Used

READALB8                                                          Subroutine, Module procedure, PRIVATE
  Decl    1568
  Set 
  Used

READFIELD                                                         Generic interface
  Decl      26     114
  Set 
  Used

READFIELD41D                                                      Subroutine, Module procedure, PRIVATE
  Decl     328
  Set 
  Used

READFIELD42D                                                      Subroutine, Module procedure, PRIVATE
  Decl     304
  Set 
  Used

READFIELD81D                                                      Subroutine, Module procedure, PRIVATE
  Decl     334
  Set 
  Used

READFIELD82D                                                      Subroutine, Module procedure, PRIVATE
  Decl     315
  Set 
  Used

READGAUSS                                                         Subroutine, Module procedure
  Decl      48    1088
  Set 
  Used

READGETALB                                                        Generic interface
  Decl      40      72
  Set 
  Used

READGETNFTGZ                                                      Generic interface
  Decl      45      63
  Set 
  Used

READGETSLM                                                        Generic interface
  Decl      43      69
  Set 
  Used

READGETSNW                                                        Generic interface
  Decl      44      66
  Set 
  Used

READGETSST                                                        Generic interface
  Decl      41      75
  Set 
  Used

READGETSST2                                                       Generic interface
  Decl      42      78
  Set 
  Used

READHEAD                                                          Generic interface
  Decl      24      87
  Set 
  Used

READHEAD4                                                         Subroutine, Module procedure, PRIVATE
  Decl     223
  Set 
  Used

READHEAD8                                                         Subroutine, Module procedure, PRIVATE
  Decl     241
  Set 
  Used

READLANDSEAMASK2                                                  Generic interface
  Decl      38     126
  Set 
  Used

READLANDSEAMASK2_4                                                Subroutine, Module procedure, PRIVATE
  Decl    1212
  Set 
  Used

READLANDSEAMASK2_8                                                Subroutine, Module procedure, PRIVATE
  Decl    1245
  Set 
  Used

READMS                                                            Subroutine, Module procedure
  Decl      46     998
  Set 
  Used

READNFTGZ4                                                        Subroutine, Module procedure, PRIVATE
  Decl    1742
  Set 
  Used

READNFTGZ8                                                        Subroutine, Module procedure, PRIVATE
  Decl    1762
  Set 
  Used

READOZONE                                                         Generic interface
  Decl      50      60
  Set 
  Used

READOZONE8                                                        Subroutine, Module procedure, PRIVATE
  Decl    1720
  Set 
  Used

READPROGHEAD                                                      Generic interface
  Decl      35      96
  Set 
  Used

READPROGHEAD4                                                     Subroutine, Module procedure, PRIVATE
  Decl     927
  Set 
  Used

READPROGHEAD8                                                     Subroutine, Module procedure, PRIVATE
  Decl     936
  Set 
  Used

READSLM4                                                          Subroutine, Module procedure, PRIVATE
  Decl    1653
  Set 
  Used

READSLM8                                                          Subroutine, Module procedure, PRIVATE
  Decl    1668
  Set 
  Used

READSNW4                                                          Subroutine, Module procedure, PRIVATE
  Decl    1684
  Set 
  Used

READSNW8                                                          Subroutine, Module procedure, PRIVATE
  Decl    1699
  Set 
  Used

READSST4                                                          Subroutine, Module procedure, PRIVATE
  Decl    1585
  Set 
  Used

READSST4REC                                                       Subroutine, Module procedure, PRIVATE
  Decl    1618
  Set 
  Used

READSST8                                                          Subroutine, Module procedure, PRIVATE
  Decl    1601
  Set 
  Used

READSST8REC                                                       Subroutine, Module procedure, PRIVATE
  Decl    1635
  Set 
  Used

READVAR                                                           Generic interface
  Decl      39      81
  Set 
  Used

READVAR4                                                          Subroutine, Module procedure, PRIVATE
  Decl    1520
  Set 
  Used

READVAR8                                                          Subroutine, Module procedure, PRIVATE
  Decl    1536
  Set 
  Used

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0     265     340     408     439     497    1494
          1511    1546    1580    1597    1613    1631    1648    1695    1710    1735    1756    1757    1758    1776    1777
          1778    1816    1817    1832

REQDG                           Heap                              CHARACTER(40), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     139
  Set      210
  Used     189     674     675     769     770

REQDG_IN                        Dummy Arg                         CHARACTER(40), DIMENSION(:), INTENT(IN)
  Decl     165     168
  Set 
  Used     210

RLSM                            Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(INOUT)
  Decl    1277    1282
  Set     1354
  Used    1297    1298    1303

RLSM                            Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(INOUT)
  Decl    1360    1365
  Set     1438
  Used    1380    1381    1387

SI                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(OUT)
  Decl     223     230
  Set 
  Used     239

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl     241     248
  Set      264
  Used

SI                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(OUT)
  Decl     267     274
  Set 
  Used     283

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl     285     292
  Set 
  Used     301

SI                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl     381     387
  Set 
  Used     390

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     392     398
  Set 
  Used     407

SI                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl     412     418
  Set 
  Used     421

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     423     429
  Set 
  Used     438

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     318     358     446
           461     506     521     565     581    1556    1572    1589    1605    1622    1625    1639    1642    1657    1660
          1672    1675    1688    1691    1703    1706    1748    1749    1750    1768    1769    1770    1814     310     350
          1297    1298    1380    1381

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     318     358     446
           461     506     521     565     581    1556    1572    1589    1605    1622    1625    1639    1642    1657    1660
          1672    1675    1688    1691    1703    1706    1748    1749    1750    1768    1769    1770    1814     310     350
          1297    1298    1380    1381

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     318     358     446
           461     506     521     565     581    1556    1572    1589    1605    1622    1625    1639    1642    1657    1660
          1672    1675    1688    1691    1703    1706    1748    1749    1750    1768    1769    1770    1814     310     350
          1297    1298    1380    1381

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0     478     491     538     551    1729    1731     555    1813    1830
           234     254     278     296    1098    1101    1162    1165

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
             0       0     234     278     318     337     362     450     465     482     495     510     525     542     555
           569    1098    1162    1813     585    1556    1560    1572    1576    1589    1593    1605    1609    1622    1625
          1639    1642    1657    1660    1672    1675    1688    1691    1703    1706    1748    1749    1750    1768    1769
          1770    1814     310     350    1297    1298    1380    1381

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     318     358     446
           461     506     521     565     581    1556    1572    1589    1605    1622    1625    1639    1642    1657    1660
          1672    1675    1688    1691    1703    1706    1748    1749    1750    1768    1769    1770    1814     310     350
          1297    1298    1380    1381

SIZE                                                              Generic interface
  Decl
  Set 
  Used     478

SIZE                                                              Generic interface
  Decl
  Set 
  Used     491

SIZE                                                              Generic interface
  Decl
  Set 
  Used     506

SIZE                                                              Generic interface
  Decl
  Set 
  Used     521

SIZE                                                              Generic interface
  Decl
  Set 
  Used     538

SIZE                                                              Generic interface
  Decl
  Set 
  Used     551

SIZE                                                              Generic interface
  Decl
  Set 
  Used     565

SIZE                                                              Generic interface
  Decl
  Set 
  Used     581

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1556

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1572

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1589

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1605

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1622

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1639

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1657

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1672

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1688

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1703

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1723

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1748    1749    1750

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1768    1769    1770

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1813    1814

SIZE                                                              Generic interface
  Decl
  Set 
  Used    1830

SIZE                                                              Generic interface
  Decl
  Set 
  Used     461

SIZE                                                              Generic interface
  Decl
  Set 
  Used     446

SIZE                                                              Generic interface
  Decl
  Set 
  Used     358

SIZE                                                              Generic interface
  Decl
  Set 
  Used     337

SIZE                                                              Generic interface
  Decl
  Set 
  Used     318

SL                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(OUT)
  Decl     223     231
  Set 
  Used     234     239

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl     241     249
  Set      265
  Used     254

SL                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(OUT)
  Decl     267     275
  Set 
  Used     278     283

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl     285     293
  Set 
  Used     296     301

SL                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl     381     388
  Set 
  Used     390

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     392     399
  Set 
  Used     408

SL                              Dummy Arg                         REAL(KIND=4), DIMENSION(:), INTENT(IN)
  Decl     412     419
  Set 
  Used     421

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     423     430
  Set 
  Used     439

SPECHU                                                            CHARACTER(40), PARAMETER
  Decl     616
  Set 
  Used     655

SPECHU                                                            CHARACTER(40), PARAMETER
  Decl     710
  Set 
  Used     749

SPECHU                                                            CHARACTER(40), PARAMETER
  Decl     805
  Set 
  Used     838

SPECHU                                                            CHARACTER(40), PARAMETER
  Decl     876
  Set 
  Used     911

SRFROU                                                            CHARACTER(40), PARAMETER
  Decl     619
  Set 
  Used     657

SRFROU                                                            CHARACTER(40), PARAMETER
  Decl     713
  Set 
  Used     751

SRFROU                                                            CHARACTER(40), PARAMETER
  Decl     808
  Set 
  Used     840

SRFROU                                                            CHARACTER(40), PARAMETER
  Decl     879
  Set 
  Used     913

SSTLAG                          Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1277    1281
  Set     1321
  Used    1339    1342    1345    1346

SSTLAG                          Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1360    1364
  Set     1405
  Used    1423    1426    1429    1430

STCNPY                                                            CHARACTER(40), PARAMETER
  Decl     621
  Set 
  Used     660

STCNPY                                                            CHARACTER(40), PARAMETER
  Decl     715
  Set 
  Used     754

STCNPY                                                            CHARACTER(40), PARAMETER
  Decl     810
  Set 
  Used     843

STCNPY                                                            CHARACTER(40), PARAMETER
  Decl     881
  Set 
  Used     916

STGRND                                                            CHARACTER(40), PARAMETER
  Decl     622
  Set 
  Used     661

STGRND                                                            CHARACTER(40), PARAMETER
  Decl     716
  Set 
  Used     755

STGRND                                                            CHARACTER(40), PARAMETER
  Decl     811
  Set 
  Used     844

STGRND                                                            CHARACTER(40), PARAMETER
  Decl     882
  Set 
  Used     917

SURFTE                                                            CHARACTER(40), PARAMETER
  Decl     618
  Set 
  Used     658

SURFTE                                                            CHARACTER(40), PARAMETER
  Decl     712
  Set 
  Used     752

SURFTE                                                            CHARACTER(40), PARAMETER
  Decl     807
  Set 
  Used     841

SURFTE                                                            CHARACTER(40), PARAMETER
  Decl     878
  Set 
  Used     914

TEMP2M                                                            CHARACTER(40), PARAMETER
  Decl     626
  Set 
  Used     665

TEMP2M                                                            CHARACTER(40), PARAMETER
  Decl     720
  Set 
  Used     759

TEMP2M                                                            CHARACTER(40), PARAMETER
  Decl     815
  Set 
  Used     848

TEMP2M                                                            CHARACTER(40), PARAMETER
  Decl     886
  Set 
  Used     921

TEMPVI                                                            CHARACTER(40), PARAMETER
  Decl     617
  Set 
  Used     656

TEMPVI                                                            CHARACTER(40), PARAMETER
  Decl     711
  Set 
  Used     750

TEMPVI                                                            CHARACTER(40), PARAMETER
  Decl     806
  Set 
  Used     839

TEMPVI                                                            CHARACTER(40), PARAMETER
  Decl     877
  Set 
  Used     912

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(OUT)
  Decl     223     227
  Set 
  Used     239

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl     241     245
  Set      261
  Used

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(OUT)
  Decl     267     271
  Set 
  Used     283

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl     285     289
  Set 
  Used     301

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(IN)
  Decl     381     384
  Set 
  Used     390

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     392     395
  Set 
  Used     404

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(IN)
  Decl     412     415
  Set 
  Used     421

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     423     426
  Set 
  Used     435

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(IN)
  Decl     595     603
  Set 
  Used     669

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     689     697
  Set 
  Used     764

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(IN)
  Decl     785     793
  Set 
  Used     821

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     856     864
  Set 
  Used     894

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(OUT)
  Decl     927     930
  Set 
  Used     934

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl     936     939
  Set      946
  Used

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(OUT)
  Decl     950     953
  Set 
  Used     957

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl     959     962
  Set      969
  Used

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(IN)
  Decl     973     976
  Set 
  Used     980

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     982     985
  Set 
  Used     991

TOD                             Dummy Arg                         REAL(KIND=4), INTENT(IN)
  Decl    1783    1786
  Set 
  Used    1788

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1790    1793
  Set 
  Used    1797

TOD4                            Stack                             REAL(KIND=4)
  Decl     251
  Set 
  Used     259     261

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
             0       0       0       0    1006    1011    1019    1025    1034    1053    1058    1062    1069    1078    1109
          1117    1123    1125    1134    1143    1174    1178    1185    1193    1195    1202    1204    1222    1226    1227
          1232    1233    1255    1259    1260    1265    1266    1306    1310    1311    1316    1323    1326    1329    1331
          1337    1340    1343    1347    1390    1394    1395    1400    1407    1410    1413    1415    1418    1421    1424
          1427    1431

UMES2M                                                            CHARACTER(40), PARAMETER
  Decl     627
  Set 
  Used     666

UMES2M                                                            CHARACTER(40), PARAMETER
  Decl     721
  Set 
  Used     760

UMES2M                                                            CHARACTER(40), PARAMETER
  Decl     816
  Set 
  Used     849

UMES2M                                                            CHARACTER(40), PARAMETER
  Decl     887
  Set 
  Used     922

UVE10M                                                            CHARACTER(40), PARAMETER
  Decl     628
  Set 
  Used     667

UVE10M                                                            CHARACTER(40), PARAMETER
  Decl     722
  Set 
  Used     761

UVE10M                                                            CHARACTER(40), PARAMETER
  Decl     817
  Set 
  Used     850

UVE10M                                                            CHARACTER(40), PARAMETER
  Decl     888
  Set 
  Used     923

VAR                             Dummy Arg                         REAL(KIND=4), DIMENSION(:, :), INTENT(OUT)
  Decl    1520    1523
  Set     1531
  Used

VAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    1536    1539
  Set     1546
  Used

VAR4                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE
  Decl    1288
  Set 
  Used    1299    1349    1354    1357

VAR4                            Heap                              REAL(KIND=4), DIMENSION(:, :), ALLOCATABLE
  Decl    1371
  Set 
  Used    1382    1433    1438    1441

VAR4                            Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1524
  Set 
  Used    1528    1531

VAR8                            Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl    1540
  Set 
  Used    1543    1546

VORTIC                                                            CHARACTER(40), PARAMETER
  Decl     615
  Set 
  Used     654

VORTIC                                                            CHARACTER(40), PARAMETER
  Decl     709
  Set 
  Used     748

VORTIC                                                            CHARACTER(40), PARAMETER
  Decl     804
  Set 
  Used     837

VORTIC                                                            CHARACTER(40), PARAMETER
  Decl     875
  Set 
  Used     910

VVE10M                                                            CHARACTER(40), PARAMETER
  Decl     629
  Set 
  Used     668

VVE10M                                                            CHARACTER(40), PARAMETER
  Decl     723
  Set 
  Used     762

VVE10M                                                            CHARACTER(40), PARAMETER
  Decl     818
  Set 
  Used     851

VVE10M                                                            CHARACTER(40), PARAMETER
  Decl     889
  Set 
  Used     924

WRITEDIAGHEAD                                                     Generic interface
  Decl      52      57
  Set 
  Used

WRITEDIAGHEAD4                                                    Subroutine, Module procedure, PRIVATE
  Decl    1783
  Set 
  Used

WRITEDIAGHEAD8                                                    Subroutine, Module procedure, PRIVATE
  Decl    1790
  Set 
  Used

WRITEDIR                                                          Generic interface
  Decl      33     105
  Set 
  Used

WRITEDIR4                                                         Subroutine, Module procedure, PRIVATE
  Decl     595
  Set 
  Used

WRITEDIR8                                                         Subroutine, Module procedure, PRIVATE
  Decl     689
  Set 
  Used

WRITEDIRE                                                         Generic interface
  Decl      34     108
  Set 
  Used

WRITEDIRE4                                                        Subroutine, Module procedure, PRIVATE
  Decl     785
  Set 
  Used

WRITEDIRE8                                                        Subroutine, Module procedure, PRIVATE
  Decl     856
  Set 
  Used

WRITEFIELD                                                        Generic interface
  Decl      30     117
  Set 
  Used

WRITEFIELD41D                                                     Subroutine, Module procedure, PRIVATE
  Decl     475
  Set 
  Used

WRITEFIELD42D                                                     Subroutine, Module procedure, PRIVATE
  Decl     443
  Set 
  Used

WRITEFIELD81D                                                     Subroutine, Module procedure, PRIVATE
  Decl     488
  Set 
  Used

WRITEFIELD82D                                                     Subroutine, Module procedure, PRIVATE
  Decl     458
  Set 
  Used

WRITEGAUSS                                                        Subroutine, Module procedure
  Decl      49    1152
  Set 
  Used

WRITEGRDH4                                                        Subroutine, Module procedure, PRIVATE
  Decl    1801
  Set 
  Used

WRITEGRDH8                                                        Subroutine, Module procedure, PRIVATE
  Decl    1809
  Set 
  Used

WRITEGRDHIST                                                      Generic interface
  Decl      54     132
  Set 
  Used

WRITEHEAD                                                         Generic interface
  Decl      28      90
  Set 
  Used

WRITEHEAD4                                                        Subroutine, Module procedure, PRIVATE
  Decl     381
  Set 
  Used

WRITEHEAD8                                                        Subroutine, Module procedure, PRIVATE
  Decl     392
  Set 
  Used

WRITEMS                                                           Subroutine, Module procedure
  Decl      47    1045
  Set 
  Used

WRITEPROGHEAD                                                     Generic interface
  Decl      37     102
  Set 
  Used

WRITEPROGHEAD4                                                    Subroutine, Module procedure, PRIVATE
  Decl     973
  Set 
  Used

WRITEPROGHEAD8                                                    Subroutine, Module procedure, PRIVATE
  Decl     982
  Set 
  Used

WRTOPOGRDH4                                                       Subroutine, Module procedure, PRIVATE
  Decl    1821
  Set 
  Used

WRTOPOGRDH8                                                       Subroutine, Module procedure, PRIVATE
  Decl    1827
  Set 
  Used

WRTOPOGRDHIST                                                     Generic interface
  Decl      55     135
  Set 
  Used

WT1SOI                                                            CHARACTER(40), PARAMETER
  Decl     623
  Set 
  Used     662

WT1SOI                                                            CHARACTER(40), PARAMETER
  Decl     717
  Set 
  Used     756

WT1SOI                                                            CHARACTER(40), PARAMETER
  Decl     812
  Set 
  Used     845

WT1SOI                                                            CHARACTER(40), PARAMETER
  Decl     883
  Set 
  Used     918

WT2SOI                                                            CHARACTER(40), PARAMETER
  Decl     624
  Set 
  Used     663

WT2SOI                                                            CHARACTER(40), PARAMETER
  Decl     718
  Set 
  Used     757

WT2SOI                                                            CHARACTER(40), PARAMETER
  Decl     813
  Set 
  Used     846

WT2SOI                                                            CHARACTER(40), PARAMETER
  Decl     884
  Set 
  Used     919

WT3SOI                                                            CHARACTER(40), PARAMETER
  Decl     625
  Set 
  Used     664

WT3SOI                                                            CHARACTER(40), PARAMETER
  Decl     719
  Set 
  Used     758

WT3SOI                                                            CHARACTER(40), PARAMETER
  Decl     814
  Set 
  Used     847

WT3SOI                                                            CHARACTER(40), PARAMETER
  Decl     885
  Set 
  Used     920

XDAY                            Stack                             REAL(KIND=8)
  Decl    1452
  Set     1511
  Used    1513

Y                               Stack                             INTEGER
  Decl    1455
  Set     1477
  Used    1481

YDAY                            Stack                             REAL(KIND=8)
  Decl    1453
  Set     1512
  Used    1513

YF                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1467    1472    1477    1493    1495    1506    1508    1510

YI                              Stack                             INTEGER
  Decl    1455
  Set 
  Used    1463    1471    1493    1495    1506    1508


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ADJUSTL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 1011, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1019, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1024, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1026, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1035, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1058, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1069, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1078, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1110, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1118, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1123, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1125, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1134, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1143, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1175, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1186, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1195, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1204, file IOLowLevel.f90)

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     IOLOWLEVEL

Name  Messages
----  --------
DAYLAG in IOLOWLEVEL
      Defined as:  Subroutine (line 1447, file IOLowLevel.f90)

      Interface:   None

      Called By:   DAYLAG in IOLOWLEVEL (Line 1317, file IOLowLevel.f90)
                   DAYLAG in IOLOWLEVEL (Line 1320, file IOLowLevel.f90)
                   DAYLAG in IOLOWLEVEL (Line 1401, file IOLowLevel.f90)
                   DAYLAG in IOLOWLEVEL (Line 1404, file IOLowLevel.f90)

      Calls:       DAYLAG in IOLOWLEVEL (Line 1317, file IOLowLevel.f90)
                   DAYLAG in IOLOWLEVEL (Line 1320, file IOLowLevel.f90)
                   DAYLAG in IOLOWLEVEL (Line 1401, file IOLowLevel.f90)
                   DAYLAG in IOLOWLEVEL (Line 1404, file IOLowLevel.f90)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FATALERROR in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   IOLOWLEVEL (Line 1010, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1018, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1024, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1033, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1057, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1068, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1076, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1099, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1102, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1109, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1117, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1123, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1132, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1141, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1163, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1166, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1174, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1185, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1193, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1202, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1227, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1233, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1260, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1266, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1311, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1347, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1395, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1431, file IOLowLevel.f90)

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     IOLOWLEVEL

Name  Messages
----  --------
FWRITEFIELD42D in IOLOWLEVEL
      Defined as:  Subroutine (line 562, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FWRITEFIELD82D in IOLOWLEVEL
      Defined as:  Subroutine (line 578, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD41D in IOLOWLEVEL
      Defined as:  Subroutine (line 368, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD42D in IOLOWLEVEL
      Defined as:  Subroutine (line 344, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD81D in IOLOWLEVEL
      Defined as:  Subroutine (line 374, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD82D in IOLOWLEVEL
      Defined as:  Subroutine (line 355, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 267, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 285, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADPROGHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 950, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADPROGHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 959, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD41D in IOLOWLEVEL
      Defined as:  Subroutine (line 535, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD42D in IOLOWLEVEL
      Defined as:  Subroutine (line 503, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD81D in IOLOWLEVEL
      Defined as:  Subroutine (line 548, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD82D in IOLOWLEVEL
      Defined as:  Subroutine (line 518, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 412, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 423, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INITREADWRITESPEC in IOLOWLEVEL
      Defined as:  Subroutine (line 51, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 262, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 263, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 403, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 404, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 405, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 406, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 434, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 435, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 436, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 437, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 945, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 946, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 947, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 948, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 968, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 969, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 970, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 971, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 990, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 991, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 992, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 993, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1796, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1797, file IOLowLevel.f90)

Name  Messages
----  --------
IOLOWLEVEL
      Defined as:  Module (line 6, file IOLowLevel.f90)

      Calls:       FATALERROR in PARALLELISM (Line 1010, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1018, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1024, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1033, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1057, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1068, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1076, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1099, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1102, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1109, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1117, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1123, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1132, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1141, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1163, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1166, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1174, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1185, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1193, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1202, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1227, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1233, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1260, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1266, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1311, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1347, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1395, file IOLowLevel.f90)
                   FATALERROR in PARALLELISM (Line 1431, file IOLowLevel.f90)
                   MSGDUMP in PARALLELISM (Line 1062, file IOLowLevel.f90)
                   MSGDUMP in PARALLELISM (Line 1179, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1316, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1323, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1326, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1329, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1331, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1334, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1337, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1340, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1343, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1400, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1407, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1410, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1413, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1415, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1418, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1421, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1424, file IOLowLevel.f90)
                   MSGONE in PARALLELISM (Line 1427, file IOLowLevel.f90)
                   MSGOUT in PARALLELISM (Line 1061, file IOLowLevel.f90)
                   MSGOUT in PARALLELISM (Line 1178, file IOLowLevel.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   CONSTANTS
                   OPTIONS
                   PARALLELISM

Name  Messages
----  --------
LANDSEAMASK4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1277, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
LANDSEAMASK8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1360, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 1471, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1472, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1481, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1510, file IOLowLevel.f90)

Name  Messages
----  --------
MSGDUMP in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   IOLOWLEVEL (Line 1062, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1179, file IOLowLevel.f90)

Name  Messages
----  --------
MSGONE in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   IOLOWLEVEL (Line 1316, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1323, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1326, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1329, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1331, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1334, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1337, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1340, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1343, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1400, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1407, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1410, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1413, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1415, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1418, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1421, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1424, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1427, file IOLowLevel.f90)

Name  Messages
----  --------
MSGOUT in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   IOLOWLEVEL (Line 1061, file IOLowLevel.f90)
                   IOLOWLEVEL (Line 1178, file IOLowLevel.f90)

Name  Messages
----  --------
NINT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 1318, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1402, file IOLowLevel.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     IOLOWLEVEL

Name  Messages
----  --------
PARALLELISM
      Defined as:  No definitions.

      Used By:     IOLOWLEVEL

Name  Messages
----  --------
READALB4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1552, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READALB8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1568, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READFIELD41D in IOLOWLEVEL
      Defined as:  Subroutine (line 328, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READFIELD42D in IOLOWLEVEL
      Defined as:  Subroutine (line 304, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READFIELD81D in IOLOWLEVEL
      Defined as:  Subroutine (line 334, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READFIELD82D in IOLOWLEVEL
      Defined as:  Subroutine (line 315, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READGAUSS in IOLOWLEVEL
      Defined as:  Subroutine (line 48, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 223, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 241, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READLANDSEAMASK2_4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1212, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READLANDSEAMASK2_8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1245, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READMS in IOLOWLEVEL
      Defined as:  Subroutine (line 46, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READNFTGZ4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1742, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READNFTGZ8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1762, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READOZONE8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1720, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READPROGHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 927, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READPROGHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 936, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSLM4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1653, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSLM8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1668, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSNW4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1684, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSNW8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1699, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSST4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1585, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSST4REC in IOLOWLEVEL
      Defined as:  Subroutine (line 1618, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSST8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1601, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSST8REC in IOLOWLEVEL
      Defined as:  Subroutine (line 1635, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READVAR4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1520, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READVAR8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1536, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 264, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 265, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 325, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 340, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 407, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 408, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 438, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 439, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 468, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 497, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1272, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1494, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1494, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1498, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1498, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1511, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1511, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1512, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1546, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1564, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1580, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1597, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1613, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1631, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1648, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1695, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1710, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1735, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1756, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1757, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1758, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1776, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1777, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1778, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1816, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1817, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1832, file IOLowLevel.f90)

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 318, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 322, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 337, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 358, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 362, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 446, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 450, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 450, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 461, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 465, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 465, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 478, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 482, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 491, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 495, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 506, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 510, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 510, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 521, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 525, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 525, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 538, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 542, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 551, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 555, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 565, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 565, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 569, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 569, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 581, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 581, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 585, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 585, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1556, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1556, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1560, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1560, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1572, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1572, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1576, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1576, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1589, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1589, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1593, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1593, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1605, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1605, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1609, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1609, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1622, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1622, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1625, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1625, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1639, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1639, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1642, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1642, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1657, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1657, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1660, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1660, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1672, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1672, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1675, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1675, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1688, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1688, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1691, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1691, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1703, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1703, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1706, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1706, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1723, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1723, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1723, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1729, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1730, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1731, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1748, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1748, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1749, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1749, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1750, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1750, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1768, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1768, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1769, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1769, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1770, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1770, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1813, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1814, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1814, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1830, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 234, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 254, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 278, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 296, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 310, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 350, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1098, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1101, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1162, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1165, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1297, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1298, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1380, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1381, file IOLowLevel.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   WRTOPOGRDH8 in IOLOWLEVEL (Line 1006, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1010, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1011, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1018, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1019, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1024, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1025, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1026, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1034, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1035, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1053, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1057, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1058, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1061, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1062, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1068, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1069, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1077, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1078, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1105, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1109, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1110, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1117, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1118, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1123, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1124, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1125, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1132, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1134, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1141, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1143, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1170, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1174, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1175, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1178, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1179, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1185, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1186, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1193, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1195, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1202, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1204, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1222, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1226, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1227, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1232, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1233, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1255, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1259, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1260, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1265, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1266, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1306, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1310, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1311, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1316, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1323, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1326, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1329, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1331, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1337, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1340, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1343, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1347, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1390, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1394, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1395, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1400, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1407, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1410, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1413, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1415, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1418, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1421, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1424, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1427, file IOLowLevel.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1431, file IOLowLevel.f90)

Name  Messages
----  --------
WRITEDIAGHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1783, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEDIAGHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1790, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEDIR4 in IOLOWLEVEL
      Defined as:  Subroutine (line 595, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEDIR8 in IOLOWLEVEL
      Defined as:  Subroutine (line 689, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEDIRE4 in IOLOWLEVEL
      Defined as:  Subroutine (line 785, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEDIRE8 in IOLOWLEVEL
      Defined as:  Subroutine (line 856, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD41D in IOLOWLEVEL
      Defined as:  Subroutine (line 475, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD42D in IOLOWLEVEL
      Defined as:  Subroutine (line 443, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD81D in IOLOWLEVEL
      Defined as:  Subroutine (line 488, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD82D in IOLOWLEVEL
      Defined as:  Subroutine (line 458, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEGAUSS in IOLOWLEVEL
      Defined as:  Subroutine (line 49, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEGRDH4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1801, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEGRDH8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1809, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 381, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 392, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEMS in IOLOWLEVEL
      Defined as:  Subroutine (line 47, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEPROGHEAD4 in IOLOWLEVEL
      Defined as:  Subroutine (line 973, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEPROGHEAD8 in IOLOWLEVEL
      Defined as:  Subroutine (line 982, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRTOPOGRDH4 in IOLOWLEVEL
      Defined as:  Subroutine (line 1821, file IOLowLevel.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRTOPOGRDH8 in IOLOWLEVEL
      Defined as:  Subroutine (line 1827, file IOLowLevel.f90)

      Interface:   None

      Calls:       SIZE(Intrinsic) (Line 318, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 322, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 337, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 358, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 362, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 446, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 450, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 450, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 461, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 465, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 465, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 478, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 482, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 491, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 495, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 506, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 510, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 510, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 521, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 525, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 525, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 538, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 542, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 551, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 555, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 565, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 565, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 569, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 569, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 581, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 581, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 585, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 585, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1556, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1556, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1560, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1560, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1572, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1572, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1576, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1576, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1589, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1589, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1593, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1593, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1605, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1605, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1609, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1609, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1622, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1622, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1625, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1625, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1639, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1639, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1642, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1642, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1657, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1657, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1660, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1660, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1672, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1672, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1675, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1675, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1688, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1688, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1691, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1691, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1703, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1703, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1706, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1706, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1723, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1723, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1723, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1729, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1730, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1731, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1748, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1748, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1749, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1749, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1750, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1750, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1768, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1768, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1769, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1769, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1770, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1770, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1813, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1814, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1814, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1830, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 234, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 254, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 262, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 263, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 264, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 265, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 278, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 296, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 310, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 325, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 340, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 350, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 403, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 404, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 405, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 406, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 407, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 408, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 434, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 435, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 436, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 437, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 438, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 439, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 468, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 497, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 945, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 946, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 947, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 948, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 968, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 969, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 970, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 971, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 990, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 991, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 992, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 993, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1006, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1010, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1011, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1018, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1019, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1024, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1025, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1026, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1034, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1035, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1011, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1019, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1024, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1026, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1035, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1053, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1057, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1058, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1061, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1062, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1068, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1069, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1077, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1078, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1058, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1069, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1078, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1098, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1101, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1105, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1109, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1110, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1117, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1118, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1123, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1124, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1125, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1132, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1134, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1141, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1143, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1110, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1118, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1123, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1125, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1134, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1143, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1162, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1165, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1170, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1174, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1175, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1178, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1179, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1185, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1186, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1193, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1195, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1202, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1204, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1175, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1186, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1195, file IOLowLevel.f90)
                   ADJUSTL(Intrinsic) (Line 1204, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1222, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1226, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1227, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1232, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1233, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1255, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1259, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1260, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1265, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1266, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1272, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1297, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1298, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1306, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1310, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1311, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1316, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1323, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1326, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1329, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1331, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1337, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1340, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1343, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1347, file IOLowLevel.f90)
                   NINT(Intrinsic) (Line 1318, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1380, file IOLowLevel.f90)
                   SIZE(Intrinsic) (Line 1381, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1390, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1394, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1395, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1400, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1407, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1410, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1413, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1415, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1418, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1421, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1424, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1427, file IOLowLevel.f90)
                   TRIM(Intrinsic) (Line 1431, file IOLowLevel.f90)
                   NINT(Intrinsic) (Line 1402, file IOLowLevel.f90)
                   MOD(Intrinsic) (Line 1471, file IOLowLevel.f90)
                   MOD(Intrinsic) (Line 1472, file IOLowLevel.f90)
                   MOD(Intrinsic) (Line 1481, file IOLowLevel.f90)
                   MOD(Intrinsic) (Line 1510, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1494, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1494, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1498, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1498, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1511, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1511, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1512, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1546, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1564, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1580, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1597, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1613, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1631, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1648, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1695, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1710, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1735, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1756, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1757, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1758, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1776, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1777, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1778, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 1796, file IOLowLevel.f90)
                   INT(Intrinsic) (Line 1797, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1816, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1817, file IOLowLevel.f90)
                   REAL(Intrinsic) (Line 1832, file IOLowLevel.f90)

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
