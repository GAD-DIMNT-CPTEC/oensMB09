       !        
       !        Cray Inc. Decompilation
       !        WARNING - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Utils.f90
       !        File                  :  Utils.opt
       !        Format                :  Fortran
       !        Target                :  X86, 64-bit
       !        
  406.       
  406.       subroutine createassoclegfunc( allpolynomials )
  411.       if ( allpolynomials /= .false. ) then
  412.          epslon%header%a_contig = 1
  412.          epslon%dim_1%LB = 1
  412.          epslon%dim_1%EX = _zla( 0, mnextmax )
  412.          epslon%dim_1%SM = 1
  412.          $_allo_P0(0) = 0x1000000000001L
  412.          $_allo_P0(1) = loc( epslon )
  412.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  413.          legfuncs2f%header%a_contig = 1
  413.          legfuncs2f%dim_1%LB = 1
  413.          legfuncs2f%dim_1%EX = _zla( 0, jmaxhalf )
  413.          legfuncs2f%dim_1%SM = 1
  413.          legfuncs2f%dim_2%LB = 1
  413.          legfuncs2f%dim_2%EX = _zla( 0, mnextmax )
  413.          legfuncs2f%dim_2%SM = _zla( 0, jmaxhalf )
  413.          $_allo_P1(0) = 0x1000000000001L
  413.          $_allo_P1(1) = loc( legfuncs2f )
  413.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  413.       else
  415.          epslon%header%a_contig = 1
  415.          epslon%dim_1%LB = 1
  415.          epslon%dim_1%EX = _zla( 0, mymnextmax )
  415.          epslon%dim_1%SM = 1
  415.          $_allo_P2(0) = 0x1000000000001L
  415.          $_allo_P2(1) = loc( epslon )
  415.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  416.          legfuncs2f%header%a_contig = 1
  416.          legfuncs2f%dim_1%LB = 1
  416.          legfuncs2f%dim_1%EX = _zla( 0, jmaxhalf )
  416.          legfuncs2f%dim_1%SM = 1
  416.          legfuncs2f%dim_2%LB = 1
  416.          legfuncs2f%dim_2%EX = _zla( 0, mymnextmax )
  416.          legfuncs2f%dim_2%SM = _zla( 0, jmaxhalf )
  416.          $_allo_P3(0) = 0x1000000000001L
  416.          $_allo_P3(1) = loc( legfuncs2f )
  416.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  417.          auxpol%header%a_contig = 1
  417.          auxpol%dim_1%LB = 1
  417.          auxpol%dim_1%EX = _zla( 0, jmaxhalf )
  417.          auxpol%dim_1%SM = 1
  417.          auxpol%dim_2%LB = 1
  417.          auxpol%dim_2%EX = _zla( 0, mmax )
  417.          auxpol%dim_2%SM = _zla( 0, jmaxhalf )
  417.          $_allo_P4(0) = 0x1000000000001L
  417.          $_allo_P4(1) = loc( auxpol )
  417.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  417.       endif
  420.       square%header%a_contig = 1
  420.       square%dim_1%LB = 1
  420.       square%dim_1%EX = _zla( 0, nextmax )
  420.       square%dim_1%SM = 1
  420.       $_allo_P5(0) = 0x1000000000001L
  420.       $_allo_P5(1) = loc( square )
  420.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  421.       den%header%a_contig = 1
  421.       den%dim_1%LB = 1
  421.       den%dim_1%EX = _zla( 0, nextmax )
  421.       den%dim_1%SM = 1
  421.       $_allo_P6(0) = 0x1000000000001L
  421.       $_allo_P6(1) = loc( den )
  421.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  422.       if ( nextmax > 0 ) then
  422.          $I_L422_442 = 0
  422. !dir$ ivdep
  422.          do
  423.             (square%base_addr)(1 + $I_L422_442, 0) = real( $I_L422_442 * $I_L422_442, 8 )
  424.             (den%base_addr)(1 + $I_L422_442, 0) = 1.0/( -1.0 + 4.0 * real( $I_L422_442 * $I_L422_442, 8 ) )
  425.             $I_L422_442 = 1 + $I_L422_442
  422.             if ( $I_L422_442 >= nextmax ) exit
  422.          enddo
  422.       endif
  426.       if ( allpolynomials /= .false. ) then
  427.          if ( mnextmax > 0 ) then
  429.             $SC_nextmap_I2 = nextmap%dim_1%EX
  429.             $SC_nextmap_I3 = nextmap%dim_1%LB
  428.             $SC_mextmap_I0 = mextmap%dim_1%EX
  428.             $SC_mextmap_I1 = mextmap%dim_1%LB
  430.             $SC_epslon_I4 = epslon%dim_1%EX
  427.             $I_L427_444 = 0
  427. !dir$ ivdep
  427. !dir$ loop_info (automatic) cache_nt( epslon )
  427.             do
  428.                $m_S2 = (mextmap%base_addr)(1 + $I_L427_444, 0)
  429.                $n_S3 = (nextmap%base_addr)(1 + $I_L427_444, 0)
  430.                (epslon%base_addr)(1 + $I_L427_444, 0) = _sqrt( (den%base_addr)($n_S3, 0) * ( (square%base_addr)($n_S3, 0) + -(square%base_addr)($m_S2, 0) ) )
  431.                $I_L427_444 = 1 + $I_L427_444
  427.                if ( $I_L427_444 >= mnextmax ) exit
  427.             enddo
  427.          endif
  432.       else if ( mymnextmax > 0 ) then
  435.          $SC_mynextmap_I9 = mynextmap%dim_1%EX
  435.          $SC_mynextmap_I10 = mynextmap%dim_1%LB
  434.          $SC_lm2m_I5 = lm2m%dim_1%EX
  434.          $SC_lm2m_I6 = lm2m%dim_1%LB
  434.          $SC_mymextmap_I7 = mymextmap%dim_1%EX
  434.          $SC_mymextmap_I8 = mymextmap%dim_1%LB
  436.          $SC_epslon_I4 = epslon%dim_1%EX
  433.          $I_L433_446 = 0
  433. !dir$ ivdep
  433. !dir$ loop_info (automatic) cache_nt( epslon )
  433.          do
  434.             $m_S5 = (lm2m%base_addr)((mymextmap%base_addr)(1 + $I_L433_446, 0), 0)
  435.             $n_S6 = (mynextmap%base_addr)(1 + $I_L433_446, 0)
  436.             (epslon%base_addr)(1 + $I_L433_446, 0) = _sqrt( (den%base_addr)($n_S6, 0) * ( (square%base_addr)($n_S6, 0) + -(square%base_addr)($m_S5, 0) ) )
  437.             $I_L433_446 = 1 + $I_L433_446
  433.             if ( $I_L433_446 >= mymnextmax ) exit
  433.          enddo
  433.       endif
  441.       if ( allpolynomials /= .false. ) then
  442.          $F_A33 = jmaxhalf
  442.          if ( jmaxhalf > 0 ) then
  442.             $SCA_mnextmap_I37 = (mnextmap%base_addr)(1, 1, 0)
  442.             $SC_legfuncs2f_I60 = legfuncs2f%dim_2%EX
  442.             $I_L442_474 = 0
  442. !dir$ ivdep
  442.             do
  442.                (legfuncs2f%base_addr)(1 + $I_L442_474, $SCA_mnextmap_I37, 0) = 7.0710678118654757e-1
  442.                $I_L442_474 = 1 + $I_L442_474
  442.                if ( $I_L442_474 >= $F_A33 ) exit
  442.             enddo
  442.          endif
  443.          if ( -2 + mmax >= 0 ) then
  445.             $SC_singausscolat_I11 = singausscolat%dim_1%EX
  445.             $SC_singausscolat_I12 = singausscolat%dim_1%LB
  445.             $SC_mnextmap_I14 = mnextmap%dim_1%EX
  445.             $SC_mnextmap_I15 = mnextmap%dim_1%LB
  445.             $SC_mnextmap_I17 = mnextmap%dim_2%SM
  445.             $SC_mnextmap_I16 = mnextmap%dim_2%EX
  445.             $SC_mnextmap_I18 = mnextmap%dim_2%LB
  445.             $SC_legfuncs2f_I13 = legfuncs2f%dim_2%EX
  444.             if ( jmaxhalf > 0 ) then
  443.                $I_L443_510 = 0
  443.                do
  444.                   $I_L444_504 = 0
  444.                   do
  443.                      $I_L443_417 = 0
  443.                      if ( min( -1 + mmax, 4 + 4 * $I_L443_510 ) + -4 * $I_L443_510 >= 4 ) then
  443.                         $I_L443_498 = 0
  443. !dir$ shortloop16
  443. !dir$ blocking_size( 4, 4 )
  443.                         do
  444.                            $SCA_mnextmap#1_U0 = (mnextmap%base_addr)(1 + 4 * $I_L443_498 + 4 * $I_L443_510, 1 + 4 * $I_L443_498 + 4 * $I_L443_510, 0)
  444.                            $SCA_mnextmap#1_U4 = (mnextmap%base_addr)(2 + 4 * $I_L443_498 + 4 * $I_L443_510, 2 + 4 * $I_L443_498 + 4 * $I_L443_510, 0)
  444.                            $SCA_mnextmap#2_U5 = (mnextmap%base_addr)(3 + 4 * $I_L443_498 + 4 * $I_L443_510, 3 + 4 * $I_L443_498 + 4 * $I_L443_510, 0)
  444.                            $SCA_mnextmap#3_U6 = (mnextmap%base_addr)(4 + 4 * $I_L443_498 + 4 * $I_L443_510, 4 + 4 * $I_L443_498 + 4 * $I_L443_510, 0)
  444.                            $SCA_mnextmap#4_U7 = (mnextmap%base_addr)(5 + 4 * $I_L443_498 + 4 * $I_L443_510, 5 + 4 * $I_L443_498 + 4 * $I_L443_510, 0)
  444.                            $I_L444_478 = 0
  444. !dir$ ivdep
  444. !dir$ blocking_size( 256, 256 )
  444.                            do
  445.                               (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#1_U4, 0) = (singausscolat%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, 0) * (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#1_U0, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 1 + 4 * $I_L443_498 + 4 * $I_L443_510, 8 ) ) ) )
  445.                               (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#2_U5, 0) = (singausscolat%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, 0) * (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#1_U4, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 2 + 4 * $I_L443_498 + 4 * $I_L443_510, 8 ) ) ) )
  445.                               (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#3_U6, 0) = (singausscolat%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, 0) * (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#2_U5, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 3 + 4 * $I_L443_498 + 4 * $I_L443_510, 8 ) ) ) )
  445.                               (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#4_U7, 0) = (singausscolat%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, 0) * (legfuncs2f%base_addr)(1 + $I_L444_478 + 256 * $I_L444_504, $SCA_mnextmap#3_U6, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 4 + 4 * $I_L443_498 + 4 * $I_L443_510, 8 ) ) ) )
  444.                               $I_L444_478 = 1 + $I_L444_478
  444.                               if ( $I_L444_478 >= min( jmaxhalf, 256 + 256 * $I_L444_504 ) + -256 * $I_L444_504 ) exit
  444.                            enddo
  443.                            $I_L443_498 = 1 + $I_L443_498
  443.                            if ( $I_L443_498 >= _rsh( min( -1 + mmax, 4 + 4 * $I_L443_510 ) + -4 * $I_L443_510, 2 ) ) exit
  443.                         enddo
  443.                         $I_L443_417 = and( 0xfffffffffffffffcUL, min( -1 + mmax, 4 + 4 * $I_L443_510 ) + -4 * $I_L443_510 )
  443.                      endif
  443.                      if ( $I_L443_417 < min( -1 + mmax, 4 + 4 * $I_L443_510 ) + -4 * $I_L443_510 ) then
  443.                         $I_L443_490 = 0
  443. !dir$ shortloop16
  443. !dir$ blocking_size( 4, 4 )
  443.                         do
  444.                            $SCA_mnextmap_I38 = (mnextmap%base_addr)(1 + $I_L443_417 + $I_L443_490 + 4 * $I_L443_510, 1 + $I_L443_417 + $I_L443_490 + 4 * $I_L443_510, 0)
  444.                            $SCA_mnextmap_I39 = (mnextmap%base_addr)(2 + $I_L443_417 + $I_L443_490 + 4 * $I_L443_510, 2 + $I_L443_417 + $I_L443_490 + 4 * $I_L443_510, 0)
  444.                            $I_L444_450 = 0
  444. !dir$ ivdep
  444. !dir$ blocking_size( 256, 256 )
  444.                            do
  445.                               (legfuncs2f%base_addr)(1 + $I_L444_450 + 256 * $I_L444_504, $SCA_mnextmap_I39, 0) = (singausscolat%base_addr)(1 + $I_L444_450 + 256 * $I_L444_504, 0) * (legfuncs2f%base_addr)(1 + $I_L444_450 + 256 * $I_L444_504, $SCA_mnextmap_I38, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 1 + $I_L443_417 + $I_L443_490 + 4 * $I_L443_510, 8 ) ) ) )
  444.                               $I_L444_450 = 1 + $I_L444_450
  444.                               if ( $I_L444_450 >= min( jmaxhalf, 256 + 256 * $I_L444_504 ) + -256 * $I_L444_504 ) exit
  444.                            enddo
  443.                            $I_L443_490 = 1 + $I_L443_490
  443.                            if ( $I_L443_490 >= min( -1 + mmax, 4 + 4 * $I_L443_510 ) + -$I_L443_417 + -4 * $I_L443_510 ) exit
  443.                         enddo
  443.                      endif
  444.                      $I_L444_504 = 1 + $I_L444_504
  449.                      if ( $I_L444_504 >= 1 + max( 0, -1 + _rsh( 255 + jmaxhalf, 8 ) ) ) exit
  449.                   enddo
  443.                   $I_L443_510 = 1 + $I_L443_510
  443.                   if ( $I_L443_510 >= 1 + max( 0, -1 + _rsh( 2 + mmax, 2 ) ) ) exit
  443.                enddo
  443.             endif
  443.          endif
  452.          if ( mmax > 0 ) then
  451.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  454.             $SC_gausspoints_I19 = gausspoints%dim_1%EX
  454.             $SC_gausspoints_I20 = gausspoints%dim_1%LB
  454.             $SC_mnextmap_I14 = mnextmap%dim_1%EX
  454.             $SC_mnextmap_I15 = mnextmap%dim_1%LB
  454.             $SC_mnextmap_I17 = mnextmap%dim_2%SM
  454.             $SC_mnextmap_I16 = mnextmap%dim_2%EX
  454.             $SC_mnextmap_I18 = mnextmap%dim_2%LB
  454.             $SC_legfuncs2f_I13 = legfuncs2f%dim_2%EX
  453.             if ( jmaxhalf > 0 ) then
  452.                $I_L452_482 = 0
  452. !$omp do schedule(static)
  452. !dir$ loop_info (automatic) cache_nt( mnextmap )
  452. !dir$ blocking_size( 1, 1 )
  452.                do
  453.                   $SCA_mnextmap_I40 = (mnextmap%base_addr)(1 + $I_L452_482, 1 + $I_L452_482, 0)
  453.                   $SCA_mnextmap_I41 = (mnextmap%base_addr)(1 + $I_L452_482, 2 + $I_L452_482, 0)
  453.                   $I_L453_452 = 0
  453. !dir$ ivdep
  453. !dir$ blocking_size( 256, 256 )
  453.                   do
  454.                      (legfuncs2f%base_addr)(1 + $I_L453_452, $SCA_mnextmap_I41, 0) = (gausspoints%base_addr)(1 + $I_L453_452, 0) * (legfuncs2f%base_addr)(1 + $I_L453_452, $SCA_mnextmap_I40, 0) * _sqrt( 1.0 + 2.0 * real( 1 + $I_L452_482, 8 ) )
  458.                      $I_L453_452 = 1 + $I_L453_452
  453.                      if ( $I_L453_452 >= jmaxhalf ) exit
  453.                   enddo
  459.                   $I_L452_482 = 1 + $I_L452_482
  458.                   if ( $I_L452_482 >= mmax ) exit
  458.                enddo
  458.             else
  452.                $I_L452_464 = 0
  452. !$omp do schedule(static)
  452.                do
  459.                   $I_L452_464 = 1 + $I_L452_464
  458.                   if ( $I_L452_464 >= mmax ) exit
  458.                enddo
  458.             endif
  460.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
  460.          endif
  462.          if ( mmax > 0 ) then
  461.             $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  465.             $SC_gausspoints_I19 = gausspoints%dim_1%EX
  465.             $SC_gausspoints_I20 = gausspoints%dim_1%LB
  465.             $SC_mnextmap_I14 = mnextmap%dim_1%EX
  465.             $SC_mnextmap_I15 = mnextmap%dim_1%LB
  465.             $SC_mnextmap_I17 = mnextmap%dim_2%SM
  465.             $SC_mnextmap_I16 = mnextmap%dim_2%EX
  465.             $SC_mnextmap_I18 = mnextmap%dim_2%LB
  465.             $SC_legfuncs2f_I13 = legfuncs2f%dim_2%EX
  465.             $SC_epslon_I4 = epslon%dim_1%EX
  464.             if ( jmaxhalf > 0 ) then
  462.                $I_L462_516 = 0
  462. !$omp do schedule(static)
  462.                do
  463.                   if ( ( -3 + nextmax + -$I_L462_516 ) >= 0 ) then
  463.                      $I_L463_512 = 0
  463.                      do
  464.                         $I_L464_506 = 0
  464.                         do
  463.                            $I_L463_493 = 0
  463. !dir$ shortloop16
  463. !dir$ blocking_size( 2, 2 )
  463.                            do
  464.                               $SCA_mnextmap_I42 = (mnextmap%base_addr)(1 + $I_L462_516, 2 + $I_L463_493 + $I_L462_516 + 2 * $I_L463_512, 0)
  464.                               $SCA_mnextmap_I43 = (mnextmap%base_addr)(1 + $I_L462_516, 1 + $I_L463_493 + $I_L462_516 + 2 * $I_L463_512, 0)
  464.                               $SCA_epslon_I44 = (epslon%base_addr)($SCA_mnextmap_I42, 0)
  464.                               $SCA_mnextmap_I45 = (mnextmap%base_addr)(1 + $I_L462_516, 3 + $I_L463_493 + $I_L462_516 + 2 * $I_L463_512, 0)
  464.                               $SCA_epslon_I46 = (epslon%base_addr)($SCA_mnextmap_I45, 0)
  464.                               $I_L464_454 = 0
  464. !dir$ ivdep
  464. !dir$ blocking_size( 256, 256 )
  464.                               do
  465.                                  (legfuncs2f%base_addr)(1 + $I_L464_454 + 256 * $I_L464_506, $SCA_mnextmap_I45, 0) = ( 1.0/$SCA_epslon_I46 * ( -( $SCA_epslon_I44 * (legfuncs2f%base_addr)(1 + $I_L464_454 + 256 * $I_L464_506, $SCA_mnextmap_I43, 0) ) + (gausspoints%base_addr)(1 + $I_L464_454 + 256 * $I_L464_506, 0) * (legfuncs2f%base_addr)(1 + $I_L464_454 + 256 * $I_L464_506, $SCA_mnextmap_I42, 0) ) )
  464.                                  $I_L464_454 = 1 + $I_L464_454
  464.                                  if ( $I_L464_454 >= min( jmaxhalf, 256 + 256 * $I_L464_506 ) + -256 * $I_L464_506 ) exit
  464.                               enddo
  463.                               $I_L463_493 = 1 + $I_L463_493
  463.                               if ( $I_L463_493 >= min( 2 + 2 * $I_L463_512, -2 + nextmax + -$I_L462_516 ) + -2 * $I_L463_512 ) exit
  463.                            enddo
  464.                            $I_L464_506 = 1 + $I_L464_506
  471.                            if ( $I_L464_506 >= 1 + max( 0, -1 + _rsh( 255 + jmaxhalf, 8 ) ) ) exit
  471.                         enddo
  463.                         $I_L463_512 = 1 + $I_L463_512
  463.                         if ( $I_L463_512 >= 1 + max( 0, -1 + _rsh( -1 + nextmax + -$I_L462_516, 1 ) ) ) exit
  463.                      enddo
  463.                   endif
  473.                   $I_L462_516 = 1 + $I_L462_516
  472.                   if ( $I_L462_516 >= mmax ) exit
  472.                enddo
  472.             else
  462.                $I_L462_466 = 0
  462. !$omp do schedule(static)
  462.                do
  473.                   $I_L462_466 = 1 + $I_L462_466
  472.                   if ( $I_L462_466 >= mmax ) exit
  472.                enddo
  472.             endif
  474.             $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
  474.          endif
  475.          if ( mymnextmax > 0 ) then
  475.             $SC_mynextmap_I9 = mynextmap%dim_1%EX
  475.             $SC_mynextmap_I10 = mynextmap%dim_1%LB
  475.             $SC_lm2m_I5 = lm2m%dim_1%EX
  475.             $SC_lm2m_I6 = lm2m%dim_1%LB
  475.             $SC_mymextmap_I7 = mymextmap%dim_1%EX
  475.             $SC_mymextmap_I8 = mymextmap%dim_1%LB
  475.             $SC_epslon_I4 = epslon%dim_1%EX
  475.             $I_L475_456 = 0
  475. !dir$ ivdep
  475. !dir$ loop_info (automatic) cache_nt( square, lm2m, den )
  475.             do
  475.                $m_S15 = (lm2m%base_addr)((mymextmap%base_addr)(1 + $I_L475_456, 0), 0)
  475.                $n_S16 = (mynextmap%base_addr)(1 + $I_L475_456, 0)
  475.                (epslon%base_addr)(1 + $I_L475_456, 0) = _sqrt( (den%base_addr)($n_S16, 0) * ( (square%base_addr)($n_S16, 0) + -(square%base_addr)($m_S15, 0) ) )
  475.                $I_L475_456 = 1 + $I_L475_456
  475.                if ( $I_L475_456 >= mymnextmax ) exit
  475.             enddo
  475.          endif
  475.       else
  477.          $F_A34 = jmaxhalf
  477.          if ( jmaxhalf > 0 ) then
  477.             $SC_auxpol_I64 = auxpol%dim_2%SM
  477.             $SC_auxpol_I63 = auxpol%dim_2%EX
  477.             $SC_auxpol_I65 = auxpol%dim_2%LB
  477.             $SC_auxpol_I61 = auxpol%dim_1%EX
  477.             $SC_auxpol_I62 = auxpol%dim_1%LB
  477.             $I_L477_476 = 0
  477. !dir$ ivdep
  477.             do
  477.                (auxpol%base_addr)(1 + $I_L477_476, 1, 0) = 7.0710678118654757e-1
  477.                $I_L477_476 = 1 + $I_L477_476
  477.                if ( $I_L477_476 >= $F_A34 ) exit
  477.             enddo
  477.          endif
  478.          if ( -2 + mmax >= 0 ) then
  480.             $SC_singausscolat_I11 = singausscolat%dim_1%EX
  480.             $SC_singausscolat_I12 = singausscolat%dim_1%LB
  480.             $SC_auxpol_I24 = auxpol%dim_2%SM
  480.             $SC_auxpol_I23 = auxpol%dim_2%EX
  480.             $SC_auxpol_I25 = auxpol%dim_2%LB
  480.             $SC_auxpol_I21 = auxpol%dim_1%EX
  480.             $SC_auxpol_I22 = auxpol%dim_1%LB
  479.             if ( jmaxhalf > 0 ) then
  478.                $I_L478_514 = 0
  478.                do
  479.                   $I_L479_502 = 0
  479.                   do
  478.                      $I_L478_423 = 0
  478.                      if ( min( -1 + mmax, 4 + 4 * $I_L478_514 ) + -4 * $I_L478_514 >= 4 ) then
  478.                         $I_L478_500 = 0
  478. !dir$ shortloop16
  478. !dir$ blocking_size( 4, 4 )
  478.                         do
  479.                            $I_L479_480 = 0
  479. !dir$ ivdep
  479. !dir$ blocking_size( 256, 256 )
  479.                            do
  480.                               (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 2 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) = (singausscolat%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 0) * (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 1 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 1 + 4 * $I_L478_500 + 4 * $I_L478_514, 8 ) ) ) )
  480.                               (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 3 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) = (singausscolat%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 0) * (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 2 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 2 + 4 * $I_L478_500 + 4 * $I_L478_514, 8 ) ) ) )
  480.                               (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 4 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) = (singausscolat%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 0) * (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 3 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 3 + 4 * $I_L478_500 + 4 * $I_L478_514, 8 ) ) ) )
  480.                               (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 5 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) = (singausscolat%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 0) * (auxpol%base_addr)(1 + $I_L479_480 + 256 * $I_L479_502, 4 + 4 * $I_L478_500 + 4 * $I_L478_514, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 4 + 4 * $I_L478_500 + 4 * $I_L478_514, 8 ) ) ) )
  479.                               $I_L479_480 = 1 + $I_L479_480
  479.                               if ( $I_L479_480 >= min( jmaxhalf, 256 + 256 * $I_L479_502 ) + -256 * $I_L479_502 ) exit
  479.                            enddo
  478.                            $I_L478_500 = 1 + $I_L478_500
  478.                            if ( $I_L478_500 >= _rsh( min( -1 + mmax, 4 + 4 * $I_L478_514 ) + -4 * $I_L478_514, 2 ) ) exit
  478.                         enddo
  478.                         $I_L478_423 = and( 0xfffffffffffffffcUL, min( -1 + mmax, 4 + 4 * $I_L478_514 ) + -4 * $I_L478_514 )
  478.                      endif
  478.                      if ( $I_L478_423 < min( -1 + mmax, 4 + 4 * $I_L478_514 ) + -4 * $I_L478_514 ) then
  478.                         $I_L478_495 = 0
  478. !dir$ shortloop16
  478. !dir$ blocking_size( 4, 4 )
  478.                         do
  479.                            $I_L479_448 = 0
  479. !dir$ ivdep
  479. !dir$ blocking_size( 256, 256 )
  479.                            do
  480.                               (auxpol%base_addr)(1 + $I_L479_448 + 256 * $I_L479_502, 2 + $I_L478_423 + $I_L478_495 + 4 * $I_L478_514, 0) = (singausscolat%base_addr)(1 + $I_L479_448 + 256 * $I_L479_502, 0) * (auxpol%base_addr)(1 + $I_L479_448 + 256 * $I_L479_502, 1 + $I_L478_423 + $I_L478_495 + 4 * $I_L478_514, 0) * _sqrt( 1.0 + ( 5.0e-1 * 1.0/( real( 1 + $I_L478_423 + $I_L478_495 + 4 * $I_L478_514, 8 ) ) ) )
  479.                               $I_L479_448 = 1 + $I_L479_448
  479.                               if ( $I_L479_448 >= min( jmaxhalf, 256 + 256 * $I_L479_502 ) + -256 * $I_L479_502 ) exit
  479.                            enddo
  478.                            $I_L478_495 = 1 + $I_L478_495
  478.                            if ( $I_L478_495 >= min( -1 + mmax, 4 + 4 * $I_L478_514 ) + -$I_L478_423 + -4 * $I_L478_514 ) exit
  478.                         enddo
  478.                      endif
  479.                      $I_L479_502 = 1 + $I_L479_502
  484.                      if ( $I_L479_502 >= 1 + max( 0, -1 + _rsh( 255 + jmaxhalf, 8 ) ) ) exit
  484.                   enddo
  478.                   $I_L478_514 = 1 + $I_L478_514
  478.                   if ( $I_L478_514 >= 1 + max( 0, -1 + _rsh( 2 + mmax, 2 ) ) ) exit
  478.                enddo
  478.             endif
  478.          endif
  487.          if ( mymmax > 0 ) then
  486.             $snt_T4 = _parallel( 5, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  490.             $SC_mymnextmap_I26 = mymnextmap%dim_1%EX
  490.             $SC_mymnextmap_I27 = mymnextmap%dim_1%LB
  490.             $SC_mymnextmap_I29 = mymnextmap%dim_2%SM
  490.             $SC_mymnextmap_I28 = mymnextmap%dim_2%EX
  490.             $SC_mymnextmap_I30 = mymnextmap%dim_2%LB
  488.             $SC_lm2m_I5 = lm2m%dim_1%EX
  488.             $SC_lm2m_I6 = lm2m%dim_1%LB
  490.             $SC_auxpol_I24 = auxpol%dim_2%SM
  490.             $SC_auxpol_I23 = auxpol%dim_2%EX
  490.             $SC_auxpol_I25 = auxpol%dim_2%LB
  490.             $SC_auxpol_I21 = auxpol%dim_1%EX
  490.             $SC_auxpol_I22 = auxpol%dim_1%LB
  490.             $SC_legfuncs2f_I13 = legfuncs2f%dim_2%EX
  489.             if ( jmaxhalf > 0 ) then
  487.                $I_L487_484 = 0
  487. !$omp do schedule(static)
  487.                do
  488.                   $$_mglobalp = (lm2m%base_addr)(1 + $I_L487_484, 0)
  489.                   $SCA_mymnextmap_I52 = (mymnextmap%base_addr)(1 + $I_L487_484, $$_mglobalp, 0)
  489.                   $I_L489_458 = 0
  489. !dir$ ivdep
  489. !dir$ loop_info (automatic) cache_nt( auxpol )
  489.                   do
  490.                      (legfuncs2f%base_addr)(1 + $I_L489_458, $SCA_mymnextmap_I52, 0) = (auxpol%base_addr)(1 + $I_L489_458, $$_mglobalp, 0)
  492.                      $I_L489_458 = 1 + $I_L489_458
  489.                      if ( $I_L489_458 >= jmaxhalf ) exit
  489.                   enddo
  493.                   $I_L487_484 = 1 + $I_L487_484
  492.                   if ( $I_L487_484 >= mymmax ) exit
  492.                enddo
  492.             else
  487.                $I_L487_468 = 0
  487. !$omp do schedule(static)
  487.                do
  493.                   $I_L487_468 = 1 + $I_L487_468
  492.                   if ( $I_L487_468 >= mymmax ) exit
  492.                enddo
  492.             endif
  494.             $snt_T4 = _endparallel( 5, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T4 )
  494.          endif
  496.          if ( mymmax > 0 ) then
  495.             $snt_T6 = _parallel( 7, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  499.             $SC_mymnextmap_I26 = mymnextmap%dim_1%EX
  499.             $SC_mymnextmap_I27 = mymnextmap%dim_1%LB
  499.             $SC_mymnextmap_I29 = mymnextmap%dim_2%SM
  499.             $SC_mymnextmap_I28 = mymnextmap%dim_2%EX
  499.             $SC_mymnextmap_I30 = mymnextmap%dim_2%LB
  499.             $SC_gausspoints_I19 = gausspoints%dim_1%EX
  499.             $SC_gausspoints_I20 = gausspoints%dim_1%LB
  497.             $SC_lm2m_I5 = lm2m%dim_1%EX
  497.             $SC_lm2m_I6 = lm2m%dim_1%LB
  499.             $SC_legfuncs2f_I13 = legfuncs2f%dim_2%EX
  498.             if ( jmaxhalf > 0 ) then
  496.                $I_L496_486 = 0
  496. !$omp do schedule(static)
  496. !dir$ loop_info (automatic) cache_nt( mymnextmap, lm2m )
  496. !dir$ blocking_size( 1, 1 )
  496.                do
  497.                   $$_mglobalp = (lm2m%base_addr)(1 + $I_L496_486, 0)
  498.                   $SCA_mymnextmap_I53 = (mymnextmap%base_addr)(1 + $I_L496_486, $$_mglobalp, 0)
  498.                   $SCA_mymnextmap_I54 = (mymnextmap%base_addr)(1 + $I_L496_486, 1 + $$_mglobalp, 0)
  498.                   $I_L498_460 = 0
  498. !dir$ ivdep
  498. !dir$ blocking_size( 256, 256 )
  498.                   do
  499.                      (legfuncs2f%base_addr)(1 + $I_L498_460, $SCA_mymnextmap_I54, 0) = (gausspoints%base_addr)(1 + $I_L498_460, 0) * (legfuncs2f%base_addr)(1 + $I_L498_460, $SCA_mymnextmap_I53, 0) * _sqrt( 1.0 + 2.0 * real( $$_mglobalp, 8 ) )
  503.                      $I_L498_460 = 1 + $I_L498_460
  498.                      if ( $I_L498_460 >= jmaxhalf ) exit
  498.                   enddo
  504.                   $I_L496_486 = 1 + $I_L496_486
  503.                   if ( $I_L496_486 >= mymmax ) exit
  503.                enddo
  503.             else
  496.                $I_L496_470 = 0
  496. !$omp do schedule(static)
  496.                do
  504.                   $I_L496_470 = 1 + $I_L496_470
  503.                   if ( $I_L496_470 >= mymmax ) exit
  503.                enddo
  503.             endif
  505.             $snt_T6 = _endparallel( 7, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T6 )
  505.          endif
  507.          if ( mymmax > 0 ) then
  506.             $snt_T8 = _parallel( 9, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  511.             $SC_mymnextmap_I26 = mymnextmap%dim_1%EX
  511.             $SC_mymnextmap_I27 = mymnextmap%dim_1%LB
  511.             $SC_mymnextmap_I29 = mymnextmap%dim_2%SM
  511.             $SC_mymnextmap_I28 = mymnextmap%dim_2%EX
  511.             $SC_mymnextmap_I30 = mymnextmap%dim_2%LB
  511.             $SC_gausspoints_I19 = gausspoints%dim_1%EX
  511.             $SC_gausspoints_I20 = gausspoints%dim_1%LB
  508.             $SC_lm2m_I5 = lm2m%dim_1%EX
  508.             $SC_lm2m_I6 = lm2m%dim_1%LB
  511.             $SC_legfuncs2f_I13 = legfuncs2f%dim_2%EX
  511.             $SC_epslon_I4 = epslon%dim_1%EX
  510.             if ( jmaxhalf > 0 ) then
  507.                $I_L507_508 = 0
  507. !$omp do schedule(static)
  507. !dir$ loop_info (automatic) cache_nt( lm2m )
  507.                do
  508.                   $$_mglobalp = (lm2m%base_addr)(1 + $I_L507_508, 0)
  509.                   if ( -2 + nextmax + -$$_mglobalp >= 0 ) then
  509.                      $I_L509_488 = 0
  509.                      do
  510.                         $SCA_mymnextmap_I55 = (mymnextmap%base_addr)(1 + $I_L507_508, 1 + $$_mglobalp + $I_L509_488, 0)
  510.                         $SCA_mymnextmap_I56 = (mymnextmap%base_addr)(1 + $I_L507_508, $$_mglobalp + $I_L509_488, 0)
  510.                         $SCA_epslon_I57 = (epslon%base_addr)($SCA_mymnextmap_I55, 0)
  510.                         $SCA_mymnextmap_I58 = (mymnextmap%base_addr)(1 + $I_L507_508, 2 + $$_mglobalp + $I_L509_488, 0)
  510.                         $SCA_epslon_I59 = (epslon%base_addr)($SCA_mymnextmap_I58, 0)
  510.                         $I_L510_462 = 0
  510. !dir$ ivdep
  510.                         do
  511.                            (legfuncs2f%base_addr)(1 + $I_L510_462, $SCA_mymnextmap_I58, 0) = ( 1.0/$SCA_epslon_I59 * ( -( $SCA_epslon_I57 * (legfuncs2f%base_addr)(1 + $I_L510_462, $SCA_mymnextmap_I56, 0) ) + (legfuncs2f%base_addr)(1 + $I_L510_462, $SCA_mymnextmap_I55, 0) * (gausspoints%base_addr)(1 + $I_L510_462, 0) ) )
  517.                            $I_L510_462 = 1 + $I_L510_462
  510.                            if ( $I_L510_462 >= jmaxhalf ) exit
  510.                         enddo
  518.                         $I_L509_488 = 1 + $I_L509_488
  517.                         if ( $I_L509_488 >= -1 + nextmax + -$$_mglobalp ) exit
  517.                      enddo
  517.                   endif
  519.                   $I_L507_508 = 1 + $I_L507_508
  518.                   if ( $I_L507_508 >= mymmax ) exit
  518.                enddo
  518.             else
  507.                $I_L507_472 = 0
  507. !$omp do schedule(static)
  507.                do
  519.                   $I_L507_472 = 1 + $I_L507_472
  518.                   if ( $I_L507_472 >= mymmax ) exit
  518.                enddo
  518.             endif
  520.             $snt_T8 = _endparallel( 9, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T8 )
  520.          endif
  520.       endif
  522.       return
  522.       end
  522.       
  525.       
  525.       subroutine reset_epslon_to_local
  531.       if ( mymnextmax > 0 ) then
  534.          $SC_den_I8 = den%dim_1%EX
  534.          $SC_den_I9 = den%dim_1%LB
  534.          $SC_square_I6 = square%dim_1%EX
  534.          $SC_square_I7 = square%dim_1%LB
  534.          $SC_epslon_I10 = epslon%dim_1%EX
  534.          $SC_epslon_I11 = epslon%dim_1%LB
  533.          $SC_mynextmap_I4 = mynextmap%dim_1%EX
  533.          $SC_mynextmap_I5 = mynextmap%dim_1%LB
  532.          $SC_lm2m_I0 = lm2m%dim_1%EX
  532.          $SC_lm2m_I1 = lm2m%dim_1%LB
  532.          $SC_mymextmap_I2 = mymextmap%dim_1%EX
  532.          $SC_mymextmap_I3 = mymextmap%dim_1%LB
  531.          $I_L531_4 = 0
  531. !dir$ ivdep
  531.          do
  532.             $m_S1 = (lm2m%base_addr)((mymextmap%base_addr)(1 + $I_L531_4, 0), 0)
  533.             $n_S2 = (mynextmap%base_addr)(1 + $I_L531_4, 0)
  534.             (epslon%base_addr)(1 + $I_L531_4, 0) = _sqrt( (den%base_addr)($n_S2, 0) * ( (square%base_addr)($n_S2, 0) + -(square%base_addr)($m_S1, 0) ) )
  535.             $I_L531_4 = 1 + $I_L531_4
  531.             if ( $I_L531_4 >= mymnextmax ) exit
  531.          enddo
  531.       endif
  537.       return
  537.       end
  537.       
  544.       
  544.       subroutine destroyassoclegfunc
  546.       $_allo_P0(0) = 0x2000000000001L
  546.       $_allo_P0(1) = loc( epslon )
  546.       $_allo_P0(2) = loc( legfuncs2f )
  546.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  546.       legfuncs2f%header%assoc = 0
  546.       epslon%header%assoc = 0
  547.       $_allo_P1(0) = 0x2000000000001L
  547.       $_allo_P1(1) = loc( square )
  547.       $_allo_P1(2) = loc( den )
  547.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  547.       den%header%assoc = 0
  547.       square%header%assoc = 0
  548.       return
  548.       end
  548.       
  556.       
  556.       subroutine dumpassoclegfunc
  558.       $Unit_temp_O0 = nfprt
  558.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$2,  _substr(t$1,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpAssocLegFunc)**', 0x800600000000L ) ) )
  559.        _substr(t$783,1,6) = 'Epslon'
  559.       $tm_S0 = epslon%dim_1%LB
  559.       t$332 = 6
  559.       epslon%dim_1%LB = 1
  559.       n1 = epslon%dim_1%EX
  559.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$5,  _substr(t$4,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  559.       t$792 = int( _alloc( 6 ), 8 )
  559.       _f90_adjustl(  _substr(t$791,1,6),  _substr(t$783,1,6) )
  559.       t$794 = _ltrim(  _substr(t$791,1,6) )
  559.       t$796 = int( _alloc( _zla( 0, t$794 ) ), 8 )
  559.        _substr(t$795,1,_zla( 0, t$794 )) =  _substr(t$791,1,_ltrim(  _substr(t$791,1,6) ))
  559.       _f90_adjustl(  _substr(t$793,1,10),  _substr(c1,1,10) )
  559.       t$797 = _ltrim(  _substr(t$793,1,10) )
  559.       t$799 = int( _alloc( _zla( 0, t$797 ) ), 8 )
  559.        _substr(t$798,1,_zla( 0, t$797 )) =  _substr(t$793,1,_ltrim(  _substr(t$793,1,10) ))
  559.       $Unit_temp_O1 = nfprt
  559.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$7,  _substr(t$6,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$795,1,_zla( 0, t$794 )), 0x800600000000L ), _iotype(  _substr(t$798,1,_zla( 0, t$797 )), 0x800600000000L ) ) )
  559.       _free( t$799 )
  559.       _free( t$796 )
  559.       _free( t$792 )
  559.       i1h = min( 10, epslon%dim_1%EX )
  559.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$9,  _substr(t$8,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1h, 0x2000200000000L ) ) )
  559.       $Unit_temp_O2 = nfprt
  559.       _fwrite( _clist( 0, 0, 2, $Unit_temp_O2, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  559.       t$801 = int( _alloc( 6 ), 8 )
  559.       _f90_adjustl(  _substr(t$800,1,6),  _substr(t$783,1,6) )
  559.       t$803 = _ltrim(  _substr(t$800,1,6) )
  559.       t$805 = int( _alloc( _zla( 0, t$803 ) ), 8 )
  559.        _substr(t$804,1,_zla( 0, t$803 )) =  _substr(t$800,1,_ltrim(  _substr(t$800,1,6) ))
  559.       _f90_adjustl(  _substr(t$802,1,10),  _substr(c1,1,10) )
  559.       t$806 = _ltrim(  _substr(t$802,1,10) )
  559.       t$808 = int( _alloc( _zla( 0, t$806 ) ), 8 )
  559.        _substr(t$807,1,_zla( 0, t$806 )) =  _substr(t$802,1,_ltrim(  _substr(t$802,1,10) ))
  559.       $Unit_temp_O3 = nfprt
  559.       _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$804,1,_zla( 0, t$803 )), 0x800600000000L ), _iotype(  _substr(t$807,1,_zla( 0, t$806 )), 0x800600000000L ) ) )
  559.       _free( t$808 )
  559.       _free( t$805 )
  559.       _free( t$801 )
  559.       if ( epslon%dim_1%EX > 0 ) then
  559.          $I_L559_4 = 0
  559.          do
  559.             if ( ( ( 1 + $I_L559_4 ) <= 0 .or. ( 1 + $I_L559_4 ) > epslon%dim_1%EX ) /= .false. ) then
  559.                 _substr(t$813,1,10) = 'Utils.f90'
  559.                 _substr(t$814,1,4) = 'M'
  559.                t$815 = epslon%dim_1%EX
  559.                t$816 = 1 + $I_L559_4
  559.                call _bounds_error(  _substr(t$813,1,10), 611,  _substr(t$814,1,2), 1, 1, t$815, t$816, t$812 )
  559.             endif
  559.             $Unit_temp_O4 = nfprt
  559.             $IOitem_O5 = (epslon%base_addr)(1 + $I_L559_4, 0)
  559.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O4, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O5, 0x804060300000000L ) ) )
  559.             $I_L559_4 = 1 + $I_L559_4
  559.             if ( $I_L559_4 >= 1 + max( 0, -1 + min( 10, n1 ) ) ) exit
  559.          enddo
  559.       endif
  559.       $Unit_temp_O6 = nfprt
  559.       _fwrite( _clist( 0, 0, 1, $Unit_temp_O6, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  559.       epslon%dim_1%LB = $tm_S0
  560.        _substr(t$785,1,10) = 'LegFuncS2F'
  560.       t$786 = legfuncs2f
  560.       call dumpmatrixreal2d(  _substr(t$785,1,10), t$786 )
  561.       return
  561.       end
  561.       
  580.       
  580.       integer
  580.       function nobankconflicts( s )
  588.       nobankconflicts = cvmg( s, cvmg( 1 + s, s, s ), mod( s, 2 ) /= 0 )
  588.       return
  588.       end
  588.       
  589.       
  589.       subroutine nobankconflictv( p, s )
  589.       s%dim_1%LB = 1
  589.       t$3 = _zla( 0, s%dim_1%EX )
  591.       t$331 = _zla( 0, s%dim_1%EX )
  592.       t$787 = s%dim_1%EX
  592.       t$790 = int( _alloc( _zla( 0, 4 * _zla( 0, s%dim_1%EX ) ) ), 8 )
  592.       $F_A33 = s%dim_1%EX
  592.       if ( s%dim_1%EX > 0 ) then
  592.          $SC_s_I6 = s%dim_1%SM
  592.          $SC_s_I5 = s%dim_1%EX
  592.          $I_L592_6 = 0
  592. !dir$ ivdep
  592.          do
  592.             t$789(1 + $I_L592_6) = mod( (s%base_addr)(1 + $I_L592_6, 0), 2 ) == 0 .and. (s%base_addr)(1 + $I_L592_6, 0) /= 0
  592.             $I_L592_6 = 1 + $I_L592_6
  592.             if ( $I_L592_6 >= $F_A33 ) exit
  592.          enddo
  592.       endif
  593.       $F_A34 = _zla( 0, s%dim_1%EX )
  593.       if ( _zla( 0, s%dim_1%EX ) > 0 ) then
  593.          $SC_s_I4 = s%dim_1%SM
  593.          $SC_s_I5 = s%dim_1%EX
  593.          $I_L593_8 = 0
  593. !dir$ ivdep
  593.          do
  593.             if ( t$789(1 + $I_L593_8) /= 0 ) then
  593.                p(1 + $I_L593_8) = 1 + (s%base_addr)(1 + $I_L593_8, 0)
  593.             endif
  593.             $I_L593_8 = 1 + $I_L593_8
  593.             if ( $I_L593_8 >= $F_A34 ) exit
  593.          enddo
  593.       endif
  595.       $F_A35 = _zla( 0, s%dim_1%EX )
  595.       if ( _zla( 0, s%dim_1%EX ) > 0 ) then
  595.          $SC_s_I4 = s%dim_1%SM
  595.          $SC_s_I5 = s%dim_1%EX
  595.          $I_L595_10 = 0
  595. !dir$ ivdep
  595.          do
  595.             if ( t$789(1 + $I_L595_10) == .false. ) then
  595.                p(1 + $I_L595_10) = (s%base_addr)(1 + $I_L595_10, 0)
  595.             endif
  595.             $I_L595_10 = 1 + $I_L595_10
  595.             if ( $I_L595_10 >= $F_A35 ) exit
  595.          enddo
  595.       endif
  592.       _free( t$790 )
  597.       return
  597.       end
  597.       
  598.       
  598.       subroutine dumpmatrixreal1d( name, m )
  598.       t$332 = _len( name )
  598.       m%dim_1%LB = 1
  603.       n1 = m%dim_1%EX
  604.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$5,  _substr(t$4,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  606.       t$792 = int( _alloc( _len( name ) ), 8 )
  606.       _f90_adjustl(  _substr(t$791,1,_len( name )),  _substr(name,1,_len( name )) )
  605.       t$794 = _ltrim(  _substr(t$791,1,_len( name )) )
  606.       t$796 = int( _alloc( _zla( 0, t$794 ) ), 8 )
  606.        _substr(t$795,1,_zla( 0, t$794 )) =  _substr(t$791,1,_ltrim(  _substr(t$791,1,_len( name )) ))
  606.       _f90_adjustl(  _substr(t$793,1,10),  _substr(c1,1,10) )
  605.       t$797 = _ltrim(  _substr(t$793,1,10) )
  606.       t$799 = int( _alloc( _zla( 0, t$797 ) ), 8 )
  606.        _substr(t$798,1,_zla( 0, t$797 )) =  _substr(t$793,1,_ltrim(  _substr(t$793,1,10) ))
  605.       $Unit_temp_O0 = nfprt
  605.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$7,  _substr(t$6,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$795,1,_zla( 0, t$794 )), 0x800600000000L ), _iotype(  _substr(t$798,1,_zla( 0, t$797 )), 0x800600000000L ) ) )
  606.       _free( t$799 )
  606.       _free( t$796 )
  606.       _free( t$792 )
  607.       i1h = min( 10, m%dim_1%EX )
  608.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$9,  _substr(t$8,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1h, 0x2000200000000L ) ) )
  609.       $Unit_temp_O1 = nfprt
  609.       _fwrite( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  610.       t$801 = int( _alloc( _len( name ) ), 8 )
  610.       _f90_adjustl(  _substr(t$800,1,_len( name )),  _substr(name,1,_len( name )) )
  609.       t$803 = _ltrim(  _substr(t$800,1,_len( name )) )
  610.       t$805 = int( _alloc( _zla( 0, t$803 ) ), 8 )
  610.        _substr(t$804,1,_zla( 0, t$803 )) =  _substr(t$800,1,_ltrim(  _substr(t$800,1,_len( name )) ))
  610.       _f90_adjustl(  _substr(t$802,1,10),  _substr(c1,1,10) )
  609.       t$806 = _ltrim(  _substr(t$802,1,10) )
  610.       t$808 = int( _alloc( _zla( 0, t$806 ) ), 8 )
  610.        _substr(t$807,1,_zla( 0, t$806 )) =  _substr(t$802,1,_ltrim(  _substr(t$802,1,10) ))
  609.       $Unit_temp_O2 = nfprt
  609.       _fwrite( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$804,1,_zla( 0, t$803 )), 0x800600000000L ), _iotype(  _substr(t$807,1,_zla( 0, t$806 )), 0x800600000000L ) ) )
  610.       _free( t$808 )
  610.       _free( t$805 )
  610.       _free( t$801 )
  609.       if ( m%dim_1%EX > 0 ) then
  609.          $SC_m_I1 = m%dim_1%SM
  611.          $SC_m_I0 = m%dim_1%EX
  609.          $I_L609_4 = 0
  609.          do
  611.             if ( ( ( 1 + $I_L609_4 ) <= 0 .or. ( 1 + $I_L609_4 ) > $SC_m_I0 ) /= .false. ) then
  611.                 _substr(t$813,1,10) = 'Utils.f90'
  611.                 _substr(t$814,1,4) = 'M'
  611.                t$815 = $SC_m_I0
  611.                t$816 = 1 + $I_L609_4
  611.                call _bounds_error(  _substr(t$813,1,10), 611,  _substr(t$814,1,2), 1, 1, t$815, t$816, t$812 )
  611.             endif
  609.             $Unit_temp_O3 = nfprt
  609.             $IOitem_O4 = (m%base_addr)(1 + $I_L609_4, 0)
  609.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  609.             $I_L609_4 = 1 + $I_L609_4
  609.             if ( $I_L609_4 >= ( min( 10, $SC_m_I0 ) ) ) exit
  609.          enddo
  609.       endif
  609.       $Unit_temp_O5 = nfprt
  609.       _fwrite( _clist( 0, 0, 1, $Unit_temp_O5, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  612.       return
  612.       end
  612.       
  613.       
  613.       subroutine dumpmatrixreal2d( name, m )
  613.       t$333 = _len( name )
  613.       m%dim_1%LB = 1
  613.       m%dim_2%LB = 1
  618.       n1 = m%dim_1%EX
  618.       n2 = m%dim_2%EX
  619.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$13,  _substr(t$12,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  620.       _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$15,  _substr(t$14,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n2, 0x2000200000000L ) ) )
  622.       t$818 = int( _alloc( _len( name ) ), 8 )
  622.       _f90_adjustl(  _substr(t$817,1,_len( name )),  _substr(name,1,_len( name )) )
  621.       t$821 = _ltrim(  _substr(t$817,1,_len( name )) )
  622.       t$823 = int( _alloc( _zla( 0, t$821 ) ), 8 )
  622.        _substr(t$822,1,_zla( 0, t$821 )) =  _substr(t$817,1,_ltrim(  _substr(t$817,1,_len( name )) ))
  622.       _f90_adjustl(  _substr(t$819,1,10),  _substr(c1,1,10) )
  621.       t$824 = _ltrim(  _substr(t$819,1,10) )
  622.       t$826 = int( _alloc( _zla( 0, t$824 ) ), 8 )
  622.        _substr(t$825,1,_zla( 0, t$824 )) =  _substr(t$819,1,_ltrim(  _substr(t$819,1,10) ))
  623.       _f90_adjustl(  _substr(t$820,1,10),  _substr(c2,1,10) )
  621.       t$827 = _ltrim(  _substr(t$820,1,10) )
  623.       t$829 = int( _alloc( _zla( 0, t$827 ) ), 8 )
  623.        _substr(t$828,1,_zla( 0, t$827 )) =  _substr(t$820,1,_ltrim(  _substr(t$820,1,10) ))
  621.       $Unit_temp_O0 = nfprt
  621.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$17,  _substr(t$16,1,35), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$822,1,_zla( 0, t$821 )), 0x800600000000L ), _iotype(  _substr(t$825,1,_zla( 0, t$824 )), 0x800600000000L ), _iotype(  _substr(t$828,1,_zla( 0, t$827 )), 0x800600000000L ) ) )
  623.       _free( t$829 )
  622.       _free( t$826 )
  622.       _free( t$823 )
  622.       _free( t$818 )
  624.       if ( m%dim_1%EX > 0 ) then
  628.          $SC_m_I2 = m%dim_1%SM
  628.          $SC_m_I3 = m%dim_2%SM
  628.          $SC_m_I0 = m%dim_2%EX
  631.          $SC_m_I1 = m%dim_1%EX
  624.          $I_L624_14 = 0
  624.          do
  624.             i1 = ( 1 + $I_L624_14 )
  625.             _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$19,  _substr(t$18,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1, 0x2000200000000L ) ) )
  626.             i2h = min( 10, $SC_m_I0 )
  627.             _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$21,  _substr(t$20,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i2h, 0x2000200000000L ) ) )
  628.             $Unit_temp_O1 = nfprt
  628.             _fwrite( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$23,  _substr(t$22,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  629.             t$834 = int( _alloc( _len( name ) ), 8 )
  629.             _f90_adjustl(  _substr(t$833,1,_len( name )),  _substr(name,1,_len( name )) )
  628.             t$837 = _ltrim(  _substr(t$833,1,_len( name )) )
  629.             t$839 = int( _alloc( _zla( 0, t$837 ) ), 8 )
  629.              _substr(t$838,1,_zla( 0, t$837 )) =  _substr(t$833,1,_ltrim(  _substr(t$833,1,_len( name )) ))
  629.             _f90_adjustl(  _substr(t$835,1,10),  _substr(c1,1,10) )
  628.             t$840 = _ltrim(  _substr(t$835,1,10) )
  629.             t$842 = int( _alloc( _zla( 0, t$840 ) ), 8 )
  629.              _substr(t$841,1,_zla( 0, t$840 )) =  _substr(t$835,1,_ltrim(  _substr(t$835,1,10) ))
  630.             _f90_adjustl(  _substr(t$836,1,10),  _substr(c2,1,10) )
  628.             t$843 = _ltrim(  _substr(t$836,1,10) )
  630.             t$845 = int( _alloc( _zla( 0, t$843 ) ), 8 )
  630.              _substr(t$844,1,_zla( 0, t$843 )) =  _substr(t$836,1,_ltrim(  _substr(t$836,1,10) ))
  628.             $Unit_temp_O2 = nfprt
  628.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$23,  _substr(t$22,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$838,1,_zla( 0, t$837 )), 0x800600000000L ), _iotype(  _substr(t$841,1,_zla( 0, t$840 )), 0x800600000000L ), _iotype(  _substr(t$844,1,_zla( 0, t$843 )), 0x800600000000L ) ) )
  630.             _free( t$845 )
  629.             _free( t$842 )
  629.             _free( t$839 )
  629.             _free( t$834 )
  628.             if ( $SC_m_I0 > 0 ) then
  631.                if ( ( ( 1 + $I_L624_14 ) <= 0 .or. ( 1 + $I_L624_14 ) > $SC_m_I1 ) /= .false. ) then
  628.                   $I_L628_10 = 0
  628.                   do
  631.                       _substr(t$850,1,10) = 'Utils.f90'
  631.                       _substr(t$851,1,4) = 'M'
  631.                      t$852 = $SC_m_I1
  631.                      t$853 = 1 + $I_L624_14
  631.                      call _bounds_error(  _substr(t$850,1,10), 631,  _substr(t$851,1,2), 1, 1, t$852, t$853, t$849 )
  631.                      if ( ( ( 1 + $I_L628_10 ) <= 0 .or. ( 1 + $I_L628_10 ) > $SC_m_I0 ) /= .false. ) then
  631.                          _substr(t$855,1,10) = 'Utils.f90'
  631.                          _substr(t$856,1,4) = 'M'
  631.                         t$857 = $SC_m_I0
  631.                         t$858 = 1 + $I_L628_10
  631.                         call _bounds_error(  _substr(t$855,1,10), 631,  _substr(t$856,1,2), 2, 1, t$857, t$858, t$854 )
  631.                      endif
  628.                      $Unit_temp_O3 = nfprt
  628.                      $IOitem_O4 = (m%base_addr)(1 + $I_L624_14, 1 + $I_L628_10, 0)
  628.                      _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$23,  _substr(t$22,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  628.                      $I_L628_10 = 1 + $I_L628_10
  628.                      if ( $I_L628_10 >= ( min( 10, $SC_m_I0 ) ) ) exit
  628.                   enddo
  628.                else
  628.                   $I_L628_12 = 0
  628.                   do
  631.                      if ( ( ( 1 + $I_L628_12 ) <= 0 .or. ( 1 + $I_L628_12 ) > $SC_m_I0 ) /= .false. ) then
  631.                          _substr(t$855,1,10) = 'Utils.f90'
  631.                          _substr(t$856,1,4) = 'M'
  631.                         t$857 = $SC_m_I0
  631.                         t$858 = 1 + $I_L628_12
  631.                         call _bounds_error(  _substr(t$855,1,10), 631,  _substr(t$856,1,2), 2, 1, t$857, t$858, t$854 )
  631.                      endif
  628.                      $Unit_temp_O3 = nfprt
  628.                      $IOitem_O4 = (m%base_addr)(1 + $I_L624_14, 1 + $I_L628_12, 0)
  628.                      _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$23,  _substr(t$22,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  628.                      $I_L628_12 = 1 + $I_L628_12
  628.                      if ( $I_L628_12 >= ( min( 10, $SC_m_I0 ) ) ) exit
  628.                   enddo
  628.                endif
  628.             endif
  628.             $Unit_temp_O5 = nfprt
  628.             _fwrite( _clist( 0, 0, 1, $Unit_temp_O5, Null_Arg, Null_Arg, t$23,  _substr(t$22,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  632.             $I_L624_14 = 1 + $I_L624_14
  632.             if ( $I_L624_14 >= $SC_m_I1 ) exit
  632.          enddo
  632.       endif
  633.       return
  633.       end
  633.       
  634.       
  634.       subroutine dumpmatrixreal3d( name, m )
  634.       t$334 = _len( name )
  634.       m%dim_1%LB = 1
  634.       m%dim_2%LB = 1
  634.       m%dim_3%LB = 1
  639.       n1 = m%dim_1%EX
  639.       n2 = m%dim_2%EX
  639.       n3 = m%dim_3%EX
  640.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$25,  _substr(t$24,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  641.       _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$27,  _substr(t$26,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n2, 0x2000200000000L ) ) )
  642.       _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$29,  _substr(t$28,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n3, 0x2000200000000L ) ) )
  644.       t$860 = int( _alloc( _len( name ) ), 8 )
  644.       _f90_adjustl(  _substr(t$859,1,_len( name )),  _substr(name,1,_len( name )) )
  643.       t$864 = _ltrim(  _substr(t$859,1,_len( name )) )
  644.       t$866 = int( _alloc( _zla( 0, t$864 ) ), 8 )
  644.        _substr(t$865,1,_zla( 0, t$864 )) =  _substr(t$859,1,_ltrim(  _substr(t$859,1,_len( name )) ))
  644.       _f90_adjustl(  _substr(t$861,1,10),  _substr(c1,1,10) )
  643.       t$867 = _ltrim(  _substr(t$861,1,10) )
  644.       t$869 = int( _alloc( _zla( 0, t$867 ) ), 8 )
  644.        _substr(t$868,1,_zla( 0, t$867 )) =  _substr(t$861,1,_ltrim(  _substr(t$861,1,10) ))
  645.       _f90_adjustl(  _substr(t$862,1,10),  _substr(c2,1,10) )
  643.       t$870 = _ltrim(  _substr(t$862,1,10) )
  645.       t$872 = int( _alloc( _zla( 0, t$870 ) ), 8 )
  645.        _substr(t$871,1,_zla( 0, t$870 )) =  _substr(t$862,1,_ltrim(  _substr(t$862,1,10) ))
  645.       _f90_adjustl(  _substr(t$863,1,10),  _substr(c3,1,10) )
  643.       t$873 = _ltrim(  _substr(t$863,1,10) )
  645.       t$875 = int( _alloc( _zla( 0, t$873 ) ), 8 )
  645.        _substr(t$874,1,_zla( 0, t$873 )) =  _substr(t$863,1,_ltrim(  _substr(t$863,1,10) ))
  643.       $Unit_temp_O0 = nfprt
  643.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$31,  _substr(t$30,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$865,1,_zla( 0, t$864 )), 0x800600000000L ), _iotype(  _substr(t$868,1,_zla( 0, t$867 )), 0x800600000000L ), _iotype(  _substr(t$871,1,_zla( 0, t$870 )), 0x800600000000L ), _iotype(  _substr(t$874,1,_zla( 0, t$873 )), 0x800600000000L ) ) )
  645.       _free( t$875 )
  645.       _free( t$872 )
  644.       _free( t$869 )
  644.       _free( t$866 )
  644.       _free( t$860 )
  646.       if ( m%dim_3%EX > 0 ) then
  653.          $SC_m_I3 = m%dim_1%SM
  653.          $SC_m_I4 = m%dim_2%SM
  653.          $SC_m_I5 = m%dim_3%SM
  656.          $SC_m_I2 = m%dim_3%EX
  653.          $SC_m_I1 = m%dim_2%EX
  649.          $SC_m_I0 = m%dim_1%EX
  649.          if ( $SC_m_I0 > 0 ) then
  646.             $I_L646_32 = 0
  646.             do
  646.                i3 = ( 1 + $I_L646_32 )
  647.                _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$33,  _substr(t$32,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i3, 0x2000200000000L ) ) )
  648.                _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '', 0x800600000000L ) ) )
  649.                $I_L649_30 = 0
  649.                do
  649.                   i1 = ( 1 + $I_L649_30 )
  650.                   _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$35,  _substr(t$34,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1, 0x2000200000000L ) ) )
  651.                   i2h = min( 10, $SC_m_I1 )
  652.                   _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$37,  _substr(t$36,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i2h, 0x2000200000000L ) ) )
  653.                   $Unit_temp_O1 = nfprt
  653.                   _fwrite( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  654.                   t$883 = int( _alloc( _len( name ) ), 8 )
  654.                   _f90_adjustl(  _substr(t$882,1,_len( name )),  _substr(name,1,_len( name )) )
  653.                   t$887 = _ltrim(  _substr(t$882,1,_len( name )) )
  654.                   t$889 = int( _alloc( _zla( 0, t$887 ) ), 8 )
  654.                    _substr(t$888,1,_zla( 0, t$887 )) =  _substr(t$882,1,_ltrim(  _substr(t$882,1,_len( name )) ))
  654.                   _f90_adjustl(  _substr(t$884,1,10),  _substr(c1,1,10) )
  653.                   t$890 = _ltrim(  _substr(t$884,1,10) )
  654.                   t$892 = int( _alloc( _zla( 0, t$890 ) ), 8 )
  654.                    _substr(t$891,1,_zla( 0, t$890 )) =  _substr(t$884,1,_ltrim(  _substr(t$884,1,10) ))
  655.                   _f90_adjustl(  _substr(t$885,1,10),  _substr(c2,1,10) )
  653.                   t$893 = _ltrim(  _substr(t$885,1,10) )
  655.                   t$895 = int( _alloc( _zla( 0, t$893 ) ), 8 )
  655.                    _substr(t$894,1,_zla( 0, t$893 )) =  _substr(t$885,1,_ltrim(  _substr(t$885,1,10) ))
  655.                   _f90_adjustl(  _substr(t$886,1,10),  _substr(c3,1,10) )
  653.                   t$896 = _ltrim(  _substr(t$886,1,10) )
  655.                   t$898 = int( _alloc( _zla( 0, t$896 ) ), 8 )
  655.                    _substr(t$897,1,_zla( 0, t$896 )) =  _substr(t$886,1,_ltrim(  _substr(t$886,1,10) ))
  653.                   $Unit_temp_O2 = nfprt
  653.                   _fwrite( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$888,1,_zla( 0, t$887 )), 0x800600000000L ), _iotype(  _substr(t$891,1,_zla( 0, t$890 )), 0x800600000000L ), _iotype(  _substr(t$894,1,_zla( 0, t$893 )), 0x800600000000L ), _iotype(  _substr(t$897,1,_zla( 0, t$896 )), 0x800600000000L ) ) )
  655.                   _free( t$898 )
  655.                   _free( t$895 )
  654.                   _free( t$892 )
  654.                   _free( t$889 )
  654.                   _free( t$883 )
  653.                   if ( $SC_m_I1 > 0 ) then
  656.                      if ( ( ( 1 + $I_L649_30 ) <= 0 .or. ( 1 + $I_L649_30 ) > $SC_m_I0 ) /= .false. ) then
  656.                         if ( ( ( 1 + $I_L646_32 ) <= 0 .or. ( 1 + $I_L646_32 ) > $SC_m_I2 ) /= .false. ) then
  653.                            $I_L653_20 = 0
  653.                            do
  656.                                _substr(t$903,1,10) = 'Utils.f90'
  656.                                _substr(t$904,1,4) = 'M'
  656.                               t$905 = $SC_m_I0
  656.                               t$906 = 1 + $I_L649_30
  656.                               call _bounds_error(  _substr(t$903,1,10), 656,  _substr(t$904,1,2), 1, 1, t$905, t$906, t$902 )
  656.                               if ( ( ( 1 + $I_L653_20 ) <= 0 .or. ( 1 + $I_L653_20 ) > $SC_m_I1 ) /= .false. ) then
  656.                                   _substr(t$908,1,10) = 'Utils.f90'
  656.                                   _substr(t$909,1,4) = 'M'
  656.                                  t$910 = $SC_m_I1
  656.                                  t$911 = 1 + $I_L653_20
  656.                                  call _bounds_error(  _substr(t$908,1,10), 656,  _substr(t$909,1,2), 2, 1, t$910, t$911, t$907 )
  656.                               endif
  656.                                _substr(t$913,1,10) = 'Utils.f90'
  656.                                _substr(t$914,1,4) = 'M'
  656.                               t$915 = $SC_m_I2
  656.                               t$916 = 1 + $I_L646_32
  656.                               call _bounds_error(  _substr(t$913,1,10), 656,  _substr(t$914,1,2), 3, 1, t$915, t$916, t$912 )
  653.                               $Unit_temp_O3 = nfprt
  653.                               $IOitem_O4 = (m%base_addr)(1 + $I_L649_30, 1 + $I_L653_20, 1 + $I_L646_32, 0)
  653.                               _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  653.                               $I_L653_20 = 1 + $I_L653_20
  653.                               if ( $I_L653_20 >= ( min( 10, $SC_m_I1 ) ) ) exit
  653.                            enddo
  653.                         else
  653.                            $I_L653_24 = 0
  653.                            do
  656.                                _substr(t$903,1,10) = 'Utils.f90'
  656.                                _substr(t$904,1,4) = 'M'
  656.                               t$905 = $SC_m_I0
  656.                               t$906 = 1 + $I_L649_30
  656.                               call _bounds_error(  _substr(t$903,1,10), 656,  _substr(t$904,1,2), 1, 1, t$905, t$906, t$902 )
  656.                               if ( ( ( 1 + $I_L653_24 ) <= 0 .or. ( 1 + $I_L653_24 ) > $SC_m_I1 ) /= .false. ) then
  656.                                   _substr(t$908,1,10) = 'Utils.f90'
  656.                                   _substr(t$909,1,4) = 'M'
  656.                                  t$910 = $SC_m_I1
  656.                                  t$911 = 1 + $I_L653_24
  656.                                  call _bounds_error(  _substr(t$908,1,10), 656,  _substr(t$909,1,2), 2, 1, t$910, t$911, t$907 )
  656.                               endif
  653.                               $Unit_temp_O3 = nfprt
  653.                               $IOitem_O4 = (m%base_addr)(1 + $I_L649_30, 1 + $I_L653_24, 1 + $I_L646_32, 0)
  653.                               _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  653.                               $I_L653_24 = 1 + $I_L653_24
  653.                               if ( $I_L653_24 >= ( min( 10, $SC_m_I1 ) ) ) exit
  653.                            enddo
  653.                         endif
  653.                      else if ( ( ( 1 + $I_L646_32 ) <= 0 .or. ( 1 + $I_L646_32 ) > $SC_m_I2 ) /= .false. ) then
  653.                         $I_L653_22 = 0
  653.                         do
  656.                            if ( ( ( 1 + $I_L653_22 ) <= 0 .or. ( 1 + $I_L653_22 ) > $SC_m_I1 ) /= .false. ) then
  656.                                _substr(t$908,1,10) = 'Utils.f90'
  656.                                _substr(t$909,1,4) = 'M'
  656.                               t$910 = $SC_m_I1
  656.                               t$911 = 1 + $I_L653_22
  656.                               call _bounds_error(  _substr(t$908,1,10), 656,  _substr(t$909,1,2), 2, 1, t$910, t$911, t$907 )
  656.                            endif
  656.                             _substr(t$913,1,10) = 'Utils.f90'
  656.                             _substr(t$914,1,4) = 'M'
  656.                            t$915 = $SC_m_I2
  656.                            t$916 = 1 + $I_L646_32
  656.                            call _bounds_error(  _substr(t$913,1,10), 656,  _substr(t$914,1,2), 3, 1, t$915, t$916, t$912 )
  653.                            $Unit_temp_O3 = nfprt
  653.                            $IOitem_O4 = (m%base_addr)(1 + $I_L649_30, 1 + $I_L653_22, 1 + $I_L646_32, 0)
  653.                            _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  653.                            $I_L653_22 = 1 + $I_L653_22
  653.                            if ( $I_L653_22 >= ( min( 10, $SC_m_I1 ) ) ) exit
  653.                         enddo
  653.                      else
  653.                         $I_L653_26 = 0
  653.                         do
  656.                            if ( ( ( 1 + $I_L653_26 ) <= 0 .or. ( 1 + $I_L653_26 ) > $SC_m_I1 ) /= .false. ) then
  656.                                _substr(t$908,1,10) = 'Utils.f90'
  656.                                _substr(t$909,1,4) = 'M'
  656.                               t$910 = $SC_m_I1
  656.                               t$911 = 1 + $I_L653_26
  656.                               call _bounds_error(  _substr(t$908,1,10), 656,  _substr(t$909,1,2), 2, 1, t$910, t$911, t$907 )
  656.                            endif
  653.                            $Unit_temp_O3 = nfprt
  653.                            $IOitem_O4 = (m%base_addr)(1 + $I_L649_30, 1 + $I_L653_26, 1 + $I_L646_32, 0)
  653.                            _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x804060300000000L ) ) )
  653.                            $I_L653_26 = 1 + $I_L653_26
  653.                            if ( $I_L653_26 >= ( min( 10, $SC_m_I1 ) ) ) exit
  653.                         enddo
  653.                      endif
  653.                   endif
  653.                   $Unit_temp_O5 = nfprt
  653.                   _fwrite( _clist( 0, 0, 1, $Unit_temp_O5, Null_Arg, Null_Arg, t$39,  _substr(t$38,1,38), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  657.                   $I_L649_30 = 1 + $I_L649_30
  657.                   if ( $I_L649_30 >= $SC_m_I0 ) exit
  657.                enddo
  658.                $I_L646_32 = 1 + $I_L646_32
  657.                if ( $I_L646_32 >= $SC_m_I2 ) exit
  657.             enddo
  657.          else
  646.             $I_L646_28 = 0
  646.             do
  646.                i3 = ( 1 + $I_L646_28 )
  647.                _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$33,  _substr(t$32,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i3, 0x2000200000000L ) ) )
  648.                _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '', 0x800600000000L ) ) )
  658.                $I_L646_28 = 1 + $I_L646_28
  657.                if ( $I_L646_28 >= $SC_m_I2 ) exit
  657.             enddo
  657.          endif
  657.       endif
  659.       return
  659.       end
  659.       
  660.       
  660.       subroutine dumpmatrixinteger1d( name, m )
  660.       t$335 = _len( name )
  660.       m%dim_1%LB = 1
  665.       n1 = m%dim_1%EX
  666.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$41,  _substr(t$40,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  668.       t$918 = int( _alloc( _len( name ) ), 8 )
  668.       _f90_adjustl(  _substr(t$917,1,_len( name )),  _substr(name,1,_len( name )) )
  667.       t$920 = _ltrim(  _substr(t$917,1,_len( name )) )
  668.       t$922 = int( _alloc( _zla( 0, t$920 ) ), 8 )
  668.        _substr(t$921,1,_zla( 0, t$920 )) =  _substr(t$917,1,_ltrim(  _substr(t$917,1,_len( name )) ))
  668.       _f90_adjustl(  _substr(t$919,1,10),  _substr(c1,1,10) )
  667.       t$923 = _ltrim(  _substr(t$919,1,10) )
  668.       t$925 = int( _alloc( _zla( 0, t$923 ) ), 8 )
  668.        _substr(t$924,1,_zla( 0, t$923 )) =  _substr(t$919,1,_ltrim(  _substr(t$919,1,10) ))
  667.       $Unit_temp_O0 = nfprt
  667.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$43,  _substr(t$42,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$921,1,_zla( 0, t$920 )), 0x800600000000L ), _iotype(  _substr(t$924,1,_zla( 0, t$923 )), 0x800600000000L ) ) )
  668.       _free( t$925 )
  668.       _free( t$922 )
  668.       _free( t$918 )
  669.       i1h = min( 10, m%dim_1%EX )
  670.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$45,  _substr(t$44,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1h, 0x2000200000000L ) ) )
  671.       $Unit_temp_O1 = nfprt
  671.       _fwrite( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$47,  _substr(t$46,1,21), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  672.       t$927 = int( _alloc( _len( name ) ), 8 )
  672.       _f90_adjustl(  _substr(t$926,1,_len( name )),  _substr(name,1,_len( name )) )
  671.       t$929 = _ltrim(  _substr(t$926,1,_len( name )) )
  672.       t$931 = int( _alloc( _zla( 0, t$929 ) ), 8 )
  672.        _substr(t$930,1,_zla( 0, t$929 )) =  _substr(t$926,1,_ltrim(  _substr(t$926,1,_len( name )) ))
  672.       _f90_adjustl(  _substr(t$928,1,10),  _substr(c1,1,10) )
  671.       t$932 = _ltrim(  _substr(t$928,1,10) )
  672.       t$934 = int( _alloc( _zla( 0, t$932 ) ), 8 )
  672.        _substr(t$933,1,_zla( 0, t$932 )) =  _substr(t$928,1,_ltrim(  _substr(t$928,1,10) ))
  671.       $Unit_temp_O2 = nfprt
  671.       _fwrite( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$47,  _substr(t$46,1,21), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$930,1,_zla( 0, t$929 )), 0x800600000000L ), _iotype(  _substr(t$933,1,_zla( 0, t$932 )), 0x800600000000L ) ) )
  672.       _free( t$934 )
  672.       _free( t$931 )
  672.       _free( t$927 )
  671.       if ( m%dim_1%EX > 0 ) then
  671.          $SC_m_I1 = m%dim_1%SM
  673.          $SC_m_I0 = m%dim_1%EX
  671.          $I_L671_4 = 0
  671.          do
  673.             if ( ( ( 1 + $I_L671_4 ) <= 0 .or. ( 1 + $I_L671_4 ) > $SC_m_I0 ) /= .false. ) then
  673.                 _substr(t$939,1,10) = 'Utils.f90'
  673.                 _substr(t$940,1,4) = 'M'
  673.                t$941 = $SC_m_I0
  673.                t$942 = 1 + $I_L671_4
  673.                call _bounds_error(  _substr(t$939,1,10), 673,  _substr(t$940,1,2), 1, 1, t$941, t$942, t$938 )
  673.             endif
  671.             $Unit_temp_O3 = nfprt
  671.             $IOitem_O4 = (m%base_addr)(1 + $I_L671_4, 0)
  671.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$47,  _substr(t$46,1,21), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  671.             $I_L671_4 = 1 + $I_L671_4
  671.             if ( $I_L671_4 >= ( min( 10, $SC_m_I0 ) ) ) exit
  671.          enddo
  671.       endif
  671.       $Unit_temp_O5 = nfprt
  671.       _fwrite( _clist( 0, 0, 1, $Unit_temp_O5, Null_Arg, Null_Arg, t$47,  _substr(t$46,1,21), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  674.       return
  674.       end
  674.       
  675.       
  675.       subroutine dumpmatrixinteger2d( name, m )
  675.       t$336 = _len( name )
  675.       m%dim_1%LB = 1
  675.       m%dim_2%LB = 1
  680.       n1 = m%dim_1%EX
  680.       n2 = m%dim_2%EX
  681.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$49,  _substr(t$48,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  682.       _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$51,  _substr(t$50,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n2, 0x2000200000000L ) ) )
  684.       t$944 = int( _alloc( _len( name ) ), 8 )
  684.       _f90_adjustl(  _substr(t$943,1,_len( name )),  _substr(name,1,_len( name )) )
  683.       t$947 = _ltrim(  _substr(t$943,1,_len( name )) )
  684.       t$949 = int( _alloc( _zla( 0, t$947 ) ), 8 )
  684.        _substr(t$948,1,_zla( 0, t$947 )) =  _substr(t$943,1,_ltrim(  _substr(t$943,1,_len( name )) ))
  684.       _f90_adjustl(  _substr(t$945,1,10),  _substr(c1,1,10) )
  683.       t$950 = _ltrim(  _substr(t$945,1,10) )
  684.       t$952 = int( _alloc( _zla( 0, t$950 ) ), 8 )
  684.        _substr(t$951,1,_zla( 0, t$950 )) =  _substr(t$945,1,_ltrim(  _substr(t$945,1,10) ))
  685.       _f90_adjustl(  _substr(t$946,1,10),  _substr(c2,1,10) )
  683.       t$953 = _ltrim(  _substr(t$946,1,10) )
  685.       t$955 = int( _alloc( _zla( 0, t$953 ) ), 8 )
  685.        _substr(t$954,1,_zla( 0, t$953 )) =  _substr(t$946,1,_ltrim(  _substr(t$946,1,10) ))
  683.       $Unit_temp_O0 = nfprt
  683.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$53,  _substr(t$52,1,35), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$948,1,_zla( 0, t$947 )), 0x800600000000L ), _iotype(  _substr(t$951,1,_zla( 0, t$950 )), 0x800600000000L ), _iotype(  _substr(t$954,1,_zla( 0, t$953 )), 0x800600000000L ) ) )
  685.       _free( t$955 )
  684.       _free( t$952 )
  684.       _free( t$949 )
  684.       _free( t$944 )
  686.       if ( m%dim_1%EX > 0 ) then
  690.          $SC_m_I2 = m%dim_1%SM
  690.          $SC_m_I3 = m%dim_2%SM
  690.          $SC_m_I0 = m%dim_2%EX
  693.          $SC_m_I1 = m%dim_1%EX
  686.          $I_L686_14 = 0
  686.          do
  686.             i1 = ( 1 + $I_L686_14 )
  687.             _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$55,  _substr(t$54,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1, 0x2000200000000L ) ) )
  688.             i2h = min( 10, $SC_m_I0 )
  689.             _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$57,  _substr(t$56,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i2h, 0x2000200000000L ) ) )
  690.             $Unit_temp_O1 = nfprt
  690.             _fwrite( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  691.             t$960 = int( _alloc( _len( name ) ), 8 )
  691.             _f90_adjustl(  _substr(t$959,1,_len( name )),  _substr(name,1,_len( name )) )
  690.             t$963 = _ltrim(  _substr(t$959,1,_len( name )) )
  691.             t$965 = int( _alloc( _zla( 0, t$963 ) ), 8 )
  691.              _substr(t$964,1,_zla( 0, t$963 )) =  _substr(t$959,1,_ltrim(  _substr(t$959,1,_len( name )) ))
  691.             _f90_adjustl(  _substr(t$961,1,10),  _substr(c1,1,10) )
  690.             t$966 = _ltrim(  _substr(t$961,1,10) )
  691.             t$968 = int( _alloc( _zla( 0, t$966 ) ), 8 )
  691.              _substr(t$967,1,_zla( 0, t$966 )) =  _substr(t$961,1,_ltrim(  _substr(t$961,1,10) ))
  692.             _f90_adjustl(  _substr(t$962,1,10),  _substr(c2,1,10) )
  690.             t$969 = _ltrim(  _substr(t$962,1,10) )
  692.             t$971 = int( _alloc( _zla( 0, t$969 ) ), 8 )
  692.              _substr(t$970,1,_zla( 0, t$969 )) =  _substr(t$962,1,_ltrim(  _substr(t$962,1,10) ))
  690.             $Unit_temp_O2 = nfprt
  690.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$964,1,_zla( 0, t$963 )), 0x800600000000L ), _iotype(  _substr(t$967,1,_zla( 0, t$966 )), 0x800600000000L ), _iotype(  _substr(t$970,1,_zla( 0, t$969 )), 0x800600000000L ) ) )
  692.             _free( t$971 )
  691.             _free( t$968 )
  691.             _free( t$965 )
  691.             _free( t$960 )
  690.             if ( $SC_m_I0 > 0 ) then
  693.                if ( ( ( 1 + $I_L686_14 ) <= 0 .or. ( 1 + $I_L686_14 ) > $SC_m_I1 ) /= .false. ) then
  690.                   $I_L690_10 = 0
  690.                   do
  693.                       _substr(t$976,1,10) = 'Utils.f90'
  693.                       _substr(t$977,1,4) = 'M'
  693.                      t$978 = $SC_m_I1
  693.                      t$979 = 1 + $I_L686_14
  693.                      call _bounds_error(  _substr(t$976,1,10), 693,  _substr(t$977,1,2), 1, 1, t$978, t$979, t$975 )
  693.                      if ( ( ( 1 + $I_L690_10 ) <= 0 .or. ( 1 + $I_L690_10 ) > $SC_m_I0 ) /= .false. ) then
  693.                          _substr(t$981,1,10) = 'Utils.f90'
  693.                          _substr(t$982,1,4) = 'M'
  693.                         t$983 = $SC_m_I0
  693.                         t$984 = 1 + $I_L690_10
  693.                         call _bounds_error(  _substr(t$981,1,10), 693,  _substr(t$982,1,2), 2, 1, t$983, t$984, t$980 )
  693.                      endif
  690.                      $Unit_temp_O3 = nfprt
  690.                      $IOitem_O4 = (m%base_addr)(1 + $I_L686_14, 1 + $I_L690_10, 0)
  690.                      _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  690.                      $I_L690_10 = 1 + $I_L690_10
  690.                      if ( $I_L690_10 >= ( min( 10, $SC_m_I0 ) ) ) exit
  690.                   enddo
  690.                else
  690.                   $I_L690_12 = 0
  690.                   do
  693.                      if ( ( ( 1 + $I_L690_12 ) <= 0 .or. ( 1 + $I_L690_12 ) > $SC_m_I0 ) /= .false. ) then
  693.                          _substr(t$981,1,10) = 'Utils.f90'
  693.                          _substr(t$982,1,4) = 'M'
  693.                         t$983 = $SC_m_I0
  693.                         t$984 = 1 + $I_L690_12
  693.                         call _bounds_error(  _substr(t$981,1,10), 693,  _substr(t$982,1,2), 2, 1, t$983, t$984, t$980 )
  693.                      endif
  690.                      $Unit_temp_O3 = nfprt
  690.                      $IOitem_O4 = (m%base_addr)(1 + $I_L686_14, 1 + $I_L690_12, 0)
  690.                      _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  690.                      $I_L690_12 = 1 + $I_L690_12
  690.                      if ( $I_L690_12 >= ( min( 10, $SC_m_I0 ) ) ) exit
  690.                   enddo
  690.                endif
  690.             endif
  690.             $Unit_temp_O5 = nfprt
  690.             _fwrite( _clist( 0, 0, 1, $Unit_temp_O5, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  694.             $I_L686_14 = 1 + $I_L686_14
  694.             if ( $I_L686_14 >= $SC_m_I1 ) exit
  694.          enddo
  694.       endif
  695.       return
  695.       end
  695.       
  696.       
  696.       subroutine dumpmatrixinteger3d( name, m )
  696.       t$337 = _len( name )
  696.       m%dim_1%LB = 1
  696.       m%dim_2%LB = 1
  696.       m%dim_3%LB = 1
  701.       n1 = m%dim_1%EX
  701.       n2 = m%dim_2%EX
  701.       n3 = m%dim_3%EX
  702.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$61,  _substr(t$60,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  703.       _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$63,  _substr(t$62,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n2, 0x2000200000000L ) ) )
  704.       _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$65,  _substr(t$64,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n3, 0x2000200000000L ) ) )
  706.       t$986 = int( _alloc( _len( name ) ), 8 )
  706.       _f90_adjustl(  _substr(t$985,1,_len( name )),  _substr(name,1,_len( name )) )
  705.       t$990 = _ltrim(  _substr(t$985,1,_len( name )) )
  706.       t$992 = int( _alloc( _zla( 0, t$990 ) ), 8 )
  706.        _substr(t$991,1,_zla( 0, t$990 )) =  _substr(t$985,1,_ltrim(  _substr(t$985,1,_len( name )) ))
  706.       _f90_adjustl(  _substr(t$987,1,10),  _substr(c1,1,10) )
  705.       t$993 = _ltrim(  _substr(t$987,1,10) )
  706.       t$995 = int( _alloc( _zla( 0, t$993 ) ), 8 )
  706.        _substr(t$994,1,_zla( 0, t$993 )) =  _substr(t$987,1,_ltrim(  _substr(t$987,1,10) ))
  707.       _f90_adjustl(  _substr(t$988,1,10),  _substr(c2,1,10) )
  705.       t$996 = _ltrim(  _substr(t$988,1,10) )
  707.       t$998 = int( _alloc( _zla( 0, t$996 ) ), 8 )
  707.        _substr(t$997,1,_zla( 0, t$996 )) =  _substr(t$988,1,_ltrim(  _substr(t$988,1,10) ))
  707.       _f90_adjustl(  _substr(t$989,1,10),  _substr(c3,1,10) )
  705.       t$999 = _ltrim(  _substr(t$989,1,10) )
  707.       t$1001 = int( _alloc( _zla( 0, t$999 ) ), 8 )
  707.        _substr(t$1000,1,_zla( 0, t$999 )) =  _substr(t$989,1,_ltrim(  _substr(t$989,1,10) ))
  705.       $Unit_temp_O0 = nfprt
  705.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$67,  _substr(t$66,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$991,1,_zla( 0, t$990 )), 0x800600000000L ), _iotype(  _substr(t$994,1,_zla( 0, t$993 )), 0x800600000000L ), _iotype(  _substr(t$997,1,_zla( 0, t$996 )), 0x800600000000L ), _iotype(  _substr(t$1000,1,_zla( 0, t$999 )), 0x800600000000L ) ) )
  707.       _free( t$1001 )
  707.       _free( t$998 )
  706.       _free( t$995 )
  706.       _free( t$992 )
  706.       _free( t$986 )
  708.       if ( m%dim_3%EX > 0 ) then
  715.          $SC_m_I3 = m%dim_1%SM
  715.          $SC_m_I4 = m%dim_2%SM
  715.          $SC_m_I5 = m%dim_3%SM
  718.          $SC_m_I2 = m%dim_3%EX
  715.          $SC_m_I1 = m%dim_2%EX
  711.          $SC_m_I0 = m%dim_1%EX
  711.          if ( $SC_m_I0 > 0 ) then
  708.             $I_L708_32 = 0
  708.             do
  708.                i3 = ( 1 + $I_L708_32 )
  709.                _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$69,  _substr(t$68,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i3, 0x2000200000000L ) ) )
  710.                _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '', 0x800600000000L ) ) )
  711.                $I_L711_30 = 0
  711.                do
  711.                   i1 = ( 1 + $I_L711_30 )
  712.                   _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$71,  _substr(t$70,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1, 0x2000200000000L ) ) )
  713.                   i2h = min( 10, $SC_m_I1 )
  714.                   _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$73,  _substr(t$72,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i2h, 0x2000200000000L ) ) )
  715.                   $Unit_temp_O1 = nfprt
  715.                   _fwrite( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  716.                   t$1009 = int( _alloc( _len( name ) ), 8 )
  716.                   _f90_adjustl(  _substr(t$1008,1,_len( name )),  _substr(name,1,_len( name )) )
  715.                   t$1013 = _ltrim(  _substr(t$1008,1,_len( name )) )
  716.                   t$1015 = int( _alloc( _zla( 0, t$1013 ) ), 8 )
  716.                    _substr(t$1014,1,_zla( 0, t$1013 )) =  _substr(t$1008,1,_ltrim(  _substr(t$1008,1,_len( name )) ))
  716.                   _f90_adjustl(  _substr(t$1010,1,10),  _substr(c1,1,10) )
  715.                   t$1016 = _ltrim(  _substr(t$1010,1,10) )
  716.                   t$1018 = int( _alloc( _zla( 0, t$1016 ) ), 8 )
  716.                    _substr(t$1017,1,_zla( 0, t$1016 )) =  _substr(t$1010,1,_ltrim(  _substr(t$1010,1,10) ))
  717.                   _f90_adjustl(  _substr(t$1011,1,10),  _substr(c2,1,10) )
  715.                   t$1019 = _ltrim(  _substr(t$1011,1,10) )
  717.                   t$1021 = int( _alloc( _zla( 0, t$1019 ) ), 8 )
  717.                    _substr(t$1020,1,_zla( 0, t$1019 )) =  _substr(t$1011,1,_ltrim(  _substr(t$1011,1,10) ))
  717.                   _f90_adjustl(  _substr(t$1012,1,10),  _substr(c3,1,10) )
  715.                   t$1022 = _ltrim(  _substr(t$1012,1,10) )
  717.                   t$1024 = int( _alloc( _zla( 0, t$1022 ) ), 8 )
  717.                    _substr(t$1023,1,_zla( 0, t$1022 )) =  _substr(t$1012,1,_ltrim(  _substr(t$1012,1,10) ))
  715.                   $Unit_temp_O2 = nfprt
  715.                   _fwrite( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$1014,1,_zla( 0, t$1013 )), 0x800600000000L ), _iotype(  _substr(t$1017,1,_zla( 0, t$1016 )), 0x800600000000L ), _iotype(  _substr(t$1020,1,_zla( 0, t$1019 )), 0x800600000000L ), _iotype(  _substr(t$1023,1,_zla( 0, t$1022 )), 0x800600000000L ) ) )
  717.                   _free( t$1024 )
  717.                   _free( t$1021 )
  716.                   _free( t$1018 )
  716.                   _free( t$1015 )
  716.                   _free( t$1009 )
  715.                   if ( $SC_m_I1 > 0 ) then
  718.                      if ( ( ( 1 + $I_L711_30 ) <= 0 .or. ( 1 + $I_L711_30 ) > $SC_m_I0 ) /= .false. ) then
  718.                         if ( ( ( 1 + $I_L708_32 ) <= 0 .or. ( 1 + $I_L708_32 ) > $SC_m_I2 ) /= .false. ) then
  715.                            $I_L715_20 = 0
  715.                            do
  718.                                _substr(t$1029,1,10) = 'Utils.f90'
  718.                                _substr(t$1030,1,4) = 'M'
  718.                               t$1031 = $SC_m_I0
  718.                               t$1032 = 1 + $I_L711_30
  718.                               call _bounds_error(  _substr(t$1029,1,10), 718,  _substr(t$1030,1,2), 1, 1, t$1031, t$1032, t$1028 )
  718.                               if ( ( ( 1 + $I_L715_20 ) <= 0 .or. ( 1 + $I_L715_20 ) > $SC_m_I1 ) /= .false. ) then
  718.                                   _substr(t$1034,1,10) = 'Utils.f90'
  718.                                   _substr(t$1035,1,4) = 'M'
  718.                                  t$1036 = $SC_m_I1
  718.                                  t$1037 = 1 + $I_L715_20
  718.                                  call _bounds_error(  _substr(t$1034,1,10), 718,  _substr(t$1035,1,2), 2, 1, t$1036, t$1037, t$1033 )
  718.                               endif
  718.                                _substr(t$1039,1,10) = 'Utils.f90'
  718.                                _substr(t$1040,1,4) = 'M'
  718.                               t$1041 = $SC_m_I2
  718.                               t$1042 = 1 + $I_L708_32
  718.                               call _bounds_error(  _substr(t$1039,1,10), 718,  _substr(t$1040,1,2), 3, 1, t$1041, t$1042, t$1038 )
  715.                               $Unit_temp_O3 = nfprt
  715.                               $IOitem_O4 = (m%base_addr)(1 + $I_L711_30, 1 + $I_L715_20, 1 + $I_L708_32, 0)
  715.                               _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  715.                               $I_L715_20 = 1 + $I_L715_20
  715.                               if ( $I_L715_20 >= ( min( 10, $SC_m_I1 ) ) ) exit
  715.                            enddo
  715.                         else
  715.                            $I_L715_24 = 0
  715.                            do
  718.                                _substr(t$1029,1,10) = 'Utils.f90'
  718.                                _substr(t$1030,1,4) = 'M'
  718.                               t$1031 = $SC_m_I0
  718.                               t$1032 = 1 + $I_L711_30
  718.                               call _bounds_error(  _substr(t$1029,1,10), 718,  _substr(t$1030,1,2), 1, 1, t$1031, t$1032, t$1028 )
  718.                               if ( ( ( 1 + $I_L715_24 ) <= 0 .or. ( 1 + $I_L715_24 ) > $SC_m_I1 ) /= .false. ) then
  718.                                   _substr(t$1034,1,10) = 'Utils.f90'
  718.                                   _substr(t$1035,1,4) = 'M'
  718.                                  t$1036 = $SC_m_I1
  718.                                  t$1037 = 1 + $I_L715_24
  718.                                  call _bounds_error(  _substr(t$1034,1,10), 718,  _substr(t$1035,1,2), 2, 1, t$1036, t$1037, t$1033 )
  718.                               endif
  715.                               $Unit_temp_O3 = nfprt
  715.                               $IOitem_O4 = (m%base_addr)(1 + $I_L711_30, 1 + $I_L715_24, 1 + $I_L708_32, 0)
  715.                               _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  715.                               $I_L715_24 = 1 + $I_L715_24
  715.                               if ( $I_L715_24 >= ( min( 10, $SC_m_I1 ) ) ) exit
  715.                            enddo
  715.                         endif
  715.                      else if ( ( ( 1 + $I_L708_32 ) <= 0 .or. ( 1 + $I_L708_32 ) > $SC_m_I2 ) /= .false. ) then
  715.                         $I_L715_22 = 0
  715.                         do
  718.                            if ( ( ( 1 + $I_L715_22 ) <= 0 .or. ( 1 + $I_L715_22 ) > $SC_m_I1 ) /= .false. ) then
  718.                                _substr(t$1034,1,10) = 'Utils.f90'
  718.                                _substr(t$1035,1,4) = 'M'
  718.                               t$1036 = $SC_m_I1
  718.                               t$1037 = 1 + $I_L715_22
  718.                               call _bounds_error(  _substr(t$1034,1,10), 718,  _substr(t$1035,1,2), 2, 1, t$1036, t$1037, t$1033 )
  718.                            endif
  718.                             _substr(t$1039,1,10) = 'Utils.f90'
  718.                             _substr(t$1040,1,4) = 'M'
  718.                            t$1041 = $SC_m_I2
  718.                            t$1042 = 1 + $I_L708_32
  718.                            call _bounds_error(  _substr(t$1039,1,10), 718,  _substr(t$1040,1,2), 3, 1, t$1041, t$1042, t$1038 )
  715.                            $Unit_temp_O3 = nfprt
  715.                            $IOitem_O4 = (m%base_addr)(1 + $I_L711_30, 1 + $I_L715_22, 1 + $I_L708_32, 0)
  715.                            _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  715.                            $I_L715_22 = 1 + $I_L715_22
  715.                            if ( $I_L715_22 >= ( min( 10, $SC_m_I1 ) ) ) exit
  715.                         enddo
  715.                      else
  715.                         $I_L715_26 = 0
  715.                         do
  718.                            if ( ( ( 1 + $I_L715_26 ) <= 0 .or. ( 1 + $I_L715_26 ) > $SC_m_I1 ) /= .false. ) then
  718.                                _substr(t$1034,1,10) = 'Utils.f90'
  718.                                _substr(t$1035,1,4) = 'M'
  718.                               t$1036 = $SC_m_I1
  718.                               t$1037 = 1 + $I_L715_26
  718.                               call _bounds_error(  _substr(t$1034,1,10), 718,  _substr(t$1035,1,2), 2, 1, t$1036, t$1037, t$1033 )
  718.                            endif
  715.                            $Unit_temp_O3 = nfprt
  715.                            $IOitem_O4 = (m%base_addr)(1 + $I_L711_30, 1 + $I_L715_26, 1 + $I_L708_32, 0)
  715.                            _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O4, 0x2000200000000L ) ) )
  715.                            $I_L715_26 = 1 + $I_L715_26
  715.                            if ( $I_L715_26 >= ( min( 10, $SC_m_I1 ) ) ) exit
  715.                         enddo
  715.                      endif
  715.                   endif
  715.                   $Unit_temp_O5 = nfprt
  715.                   _fwrite( _clist( 0, 0, 1, $Unit_temp_O5, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  719.                   $I_L711_30 = 1 + $I_L711_30
  719.                   if ( $I_L711_30 >= $SC_m_I0 ) exit
  719.                enddo
  720.                $I_L708_32 = 1 + $I_L708_32
  719.                if ( $I_L708_32 >= $SC_m_I2 ) exit
  719.             enddo
  719.          else
  708.             $I_L708_28 = 0
  708.             do
  708.                i3 = ( 1 + $I_L708_28 )
  709.                _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$69,  _substr(t$68,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i3, 0x2000200000000L ) ) )
  710.                _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '', 0x800600000000L ) ) )
  720.                $I_L708_28 = 1 + $I_L708_28
  719.                if ( $I_L708_28 >= $SC_m_I2 ) exit
  719.             enddo
  719.          endif
  719.       endif
  721.       return
  721.       end
  721.       
  825.       
  825.       subroutine creategaussquad( degreegiven, gaussgiven )
  750.       fvals = $_StaticDV_P2
  750.       fvals%base_addr = pointer to array[1] of real (kind=8)( 0 )
  750.       fvals%header%el_len = 64
  750.       fvals%header%assoc = 0
  750.       fvals%header%ptr_alloc = 0
  750.       fvals%header%p_or_a = 2
  750.       fvals%header%a_contig = 1
  750.       fvals%header%n_dim = 1
  750.       fvals%header%orig_base = 0
  750.       fvals%header%orig_size = 0
  750.       fvals%header%n_codim = 0
  750.       fvals%header%dv_versn = 2
  750.       fvals%header%dv_smunit = 64
  750.       fvals%header%d_type = 0
  750.       fvals%header%n_params = 0
  750.       fvals%header%d_type_idx = 13
  750.       fvals%dim_1%LB = 1
  750.       fvals%dim_1%EX = 0
  750.       fvals%dim_1%SM = 1
  761.       if ( degreegiven <= 0 ) then
  762.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$77,  _substr(t$76,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( degreegiven, 0x2000200000000L ) ) )
  763.          _f90_adjustl(  _substr(t$1043,1,10),  _substr(c1,1,10) )
  763.          t$1044 = _ltrim(  _substr(t$1043,1,10) )
  763.          t$1046 = int( _alloc( _zla( 0, t$1044 ) ), 8 )
  763.           _substr(t$1045,1,_zla( 0, t$1044 )) =  _substr(t$1043,1,_ltrim(  _substr(t$1043,1,10) ))
  763.          $Unit_temp_O0 = nfprt
  763.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$79,  _substr(t$78,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(CreateGaussQuad)**', 0x800600000000L ), _iotype(  _substr(t$1045,1,_zla( 0, t$1044 )), 0x800600000000L ) ) )
  763.          _free( t$1046 )
  764.           _substr(t$1047,1,4) = ' '
  764.          call _stop(  _substr(t$1047,1,1) )
  764.       else
  766.          maxdegree = degreegiven
  771.          gausscolat%header%a_contig = 1
  771.          gausscolat%dim_1%LB = 1
  771.          gausscolat%dim_1%EX = _zla( 0, degreegiven / 2 )
  771.          gausscolat%dim_1%SM = 1
  771.          $_allo_P3(0) = 0x1000000000001L
  771.          $_allo_P3(1) = loc( gausscolat )
  771.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  772.          singausscolat%header%a_contig = 1
  772.          singausscolat%dim_1%LB = 1
  772.          singausscolat%dim_1%EX = _zla( 0, degreegiven / 2 )
  772.          singausscolat%dim_1%SM = 1
  772.          $_allo_P4(0) = 0x1000000000001L
  772.          $_allo_P4(1) = loc( singausscolat )
  772.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  773.          cosgausscolat%header%a_contig = 1
  773.          cosgausscolat%dim_1%LB = 1
  773.          cosgausscolat%dim_1%EX = _zla( 0, degreegiven / 2 )
  773.          cosgausscolat%dim_1%SM = 1
  773.          $_allo_P5(0) = 0x1000000000001L
  773.          $_allo_P5(1) = loc( cosgausscolat )
  773.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  774.          auxgausscolat%header%a_contig = 1
  774.          auxgausscolat%dim_1%LB = 1
  774.          auxgausscolat%dim_1%EX = _zla( 0, degreegiven / 2 )
  774.          auxgausscolat%dim_1%SM = 1
  774.          $_allo_P6(0) = 0x1000000000001L
  774.          $_allo_P6(1) = loc( auxgausscolat )
  774.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  775.          fvals%header%a_contig = 1
  775.          fvals%dim_1%LB = 1
  775.          fvals%dim_1%EX = _zla( 0, degreegiven / 2 )
  775.          fvals%dim_1%SM = 1
  775.          $_allo_P7(0) = 0x1000000000001L
  775.          $_allo_P7(1) = loc( fvals )
  775.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  776.          gausspoints%header%a_contig = 1
  776.          gausspoints%dim_1%LB = 1
  776.          gausspoints%dim_1%EX = _zla( 0, degreegiven )
  776.          gausspoints%dim_1%SM = 1
  776.          $_allo_P8(0) = 0x1000000000001L
  776.          $_allo_P8(1) = loc( gausspoints )
  776.          call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  777.          gaussweights%header%a_contig = 1
  777.          gaussweights%dim_1%LB = 1
  777.          gaussweights%dim_1%EX = _zla( 0, degreegiven )
  777.          gaussweights%dim_1%SM = 1
  777.          $_allo_P9(0) = 0x1000000000001L
  777.          $_allo_P9(1) = loc( gaussweights )
  777.          call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  778.          colrad%header%a_contig = 1
  778.          colrad%dim_1%LB = 1
  778.          colrad%dim_1%EX = _zla( 0, degreegiven )
  778.          colrad%dim_1%SM = 1
  778.          $_allo_P10(0) = 0x1000000000001L
  778.          $_allo_P10(1) = loc( colrad )
  778.          call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
  779.          rcs2%header%a_contig = 1
  779.          rcs2%dim_1%LB = 1
  779.          rcs2%dim_1%EX = _zla( 0, degreegiven / 2 )
  779.          rcs2%dim_1%SM = 1
  779.          $_allo_P11(0) = 0x1000000000001L
  779.          $_allo_P11(1) = loc( rcs2 )
  779.          call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
  783.          call createlegpol( maxdegree )
  787.          if ( gaussgiven /= .false. ) then
  788.             t$1048 = cosgausscolat
  788.             t$1049 = gaussweights
  788.             call readgauss( t$1048, t$1049,  _substr(fnamegauss,1,211), maxdegree )
  788.          else
  790.             call legpolrootsandweights( maxdegree )
  791.             $F_A39 = ( maxdegree + maxdegree / -2 )
  791.             if ( maxdegree + maxdegree / -2 > 0 ) then
  791.                $SC_gaussweights_I40 = gaussweights%dim_1%EX
  791.                $SC_gaussweights_I41 = gaussweights%dim_1%LB
  791.                $I_L791_32 = 0
  791. !dir$ ivdep
  791.                do
  791.                   (gaussweights%base_addr)(1 + $I_L791_32 + maxdegree / 2, 0) = (gaussweights%base_addr)(maxdegree / 2 + -$I_L791_32, 0)
  791.                   $I_L791_32 = 1 + $I_L791_32
  791.                   if ( $I_L791_32 >= $F_A39 ) exit
  791.                enddo
  791.             endif
  792.             if ( myid == 0 ) then
  793.                t$1050 = cosgausscolat
  793.                t$1051 = gaussweights
  793.                call writegauss( t$1050, t$1051,  _substr(fnamegauss,1,211), maxdegree )
  793.             endif
  793.          endif
  796.          $F_A40 = cosgausscolat%dim_1%EX
  796.          if ( cosgausscolat%dim_1%EX > 0 ) then
  796.             $SC_cosgausscolat_I42 = cosgausscolat%dim_1%EX
  796.             $SC_cosgausscolat_I43 = cosgausscolat%dim_1%LB
  796.             $SC_gausscolat_I44 = gausscolat%dim_1%EX
  796.             $SC_gausscolat_I45 = gausscolat%dim_1%LB
  796.             $I_L796_34 = 0
  796. !dir$ ivdep
  796.             do
  796.                (gausscolat%base_addr)($SC_gausscolat_I45 + $I_L796_34, 0) = acos( (cosgausscolat%base_addr)($SC_cosgausscolat_I43 + $I_L796_34, 0) )
  796.                $I_L796_34 = 1 + $I_L796_34
  796.                if ( $I_L796_34 >= $F_A40 ) exit
  796.             enddo
  796.          endif
  797.          $F_A41 = singausscolat%dim_1%EX
  797.          if ( singausscolat%dim_1%EX > 0 ) then
  797.             $SC_singausscolat_I46 = singausscolat%dim_1%EX
  797.             $SC_singausscolat_I47 = singausscolat%dim_1%LB
  797.             $SC_gausscolat_I44 = gausscolat%dim_1%EX
  797.             $SC_gausscolat_I45 = gausscolat%dim_1%LB
  797.             $I_L797_36 = 0
  797. !dir$ ivdep
  797.             do
  797.                (singausscolat%base_addr)($SC_singausscolat_I47 + $I_L797_36, 0) = sin( (gausscolat%base_addr)($SC_gausscolat_I45 + $I_L797_36, 0) )
  797.                $I_L797_36 = 1 + $I_L797_36
  797.                if ( $I_L797_36 >= $F_A41 ) exit
  797.             enddo
  797.          endif
  798.          $F_A42 = auxgausscolat%dim_1%EX
  798.          if ( auxgausscolat%dim_1%EX > 0 ) then
  798.             $SC_auxgausscolat_I48 = auxgausscolat%dim_1%EX
  798.             $SC_auxgausscolat_I49 = auxgausscolat%dim_1%LB
  798.             $SC_singausscolat_I46 = singausscolat%dim_1%EX
  798.             $SC_singausscolat_I47 = singausscolat%dim_1%LB
  798.             $I_L798_38 = 0
  798. !dir$ ivdep
  798.             do
  798.                (auxgausscolat%base_addr)($SC_auxgausscolat_I49 + $I_L798_38, 0) = 1.0/( (singausscolat%base_addr)($SC_singausscolat_I47 + $I_L798_38, 0) * (singausscolat%base_addr)($SC_singausscolat_I47 + $I_L798_38, 0) )
  798.                $I_L798_38 = 1 + $I_L798_38
  798.                if ( $I_L798_38 >= $F_A42 ) exit
  798.             enddo
  798.          endif
  799.          $F_A43 = maxdegree / 2
  799.          if ( maxdegree >= 2 ) then
  799.             $SC_gausspoints_I50 = gausspoints%dim_1%EX
  799.             $SC_gausspoints_I51 = gausspoints%dim_1%LB
  799.             $SC_cosgausscolat_I42 = cosgausscolat%dim_1%EX
  799.             $SC_cosgausscolat_I43 = cosgausscolat%dim_1%LB
  799.             $I_L799_40 = 0
  799. !dir$ ivdep
  799.             do
  799.                (gausspoints%base_addr)(1 + $I_L799_40, 0) = (cosgausscolat%base_addr)($SC_cosgausscolat_I43 + $I_L799_40, 0)
  799.                $I_L799_40 = 1 + $I_L799_40
  799.                if ( $I_L799_40 >= $F_A43 ) exit
  799.             enddo
  805.             $SC_rcs2_I6 = rcs2%dim_1%EX
  805.             $SC_rcs2_I7 = rcs2%dim_1%LB
  803.             $SC_colrad_I2 = colrad%dim_1%EX
  803.             $SC_colrad_I3 = colrad%dim_1%LB
  805.             $SC_auxgausscolat_I4 = auxgausscolat%dim_1%EX
  805.             $SC_auxgausscolat_I5 = auxgausscolat%dim_1%LB
  803.             $SC_gausscolat_I0 = gausscolat%dim_1%EX
  803.             $SC_gausscolat_I1 = gausscolat%dim_1%LB
  802.             $I_L802_30 = 0
  802. !dir$ ivdep
  802.             do
  803.                (colrad%base_addr)(1 + $I_L802_30, 0) = (gausscolat%base_addr)(1 + $I_L802_30, 0)
  804.                (colrad%base_addr)(maxdegree + -$I_L802_30, 0) = 3.14159265358979 + -(gausscolat%base_addr)(1 + $I_L802_30, 0)
  805.                (rcs2%base_addr)(1 + $I_L802_30, 0) = (auxgausscolat%base_addr)(1 + $I_L802_30, 0)
  806.                $I_L802_30 = 1 + $I_L802_30
  802.                if ( $I_L802_30 >= maxdegree / 2 ) exit
  802.             enddo
  802.          endif
  800.          $F_A44 = ( maxdegree + maxdegree / -2 )
  800.          if ( maxdegree + maxdegree / -2 > 0 ) then
  800.             $SC_gausspoints_I50 = gausspoints%dim_1%EX
  800.             $SC_gausspoints_I51 = gausspoints%dim_1%LB
  800.             $I_L800_42 = 0
  800. !dir$ ivdep
  800.             do
  800.                (gausspoints%base_addr)(1 + $I_L800_42 + maxdegree / 2, 0) = -(gausspoints%base_addr)(maxdegree / 2 + -$I_L800_42, 0)
  800.                $I_L800_42 = 1 + $I_L800_42
  800.                if ( $I_L800_42 >= $F_A44 ) exit
  800.             enddo
  800.          endif
  809.          if ( ( ( 1 < colrad%dim_1%LB .or. 0 >= -1 + colrad%dim_1%LB + colrad%dim_1%EX .or. -1 + maxdegree < colrad%dim_1%LB .or. -1 + maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  809.              _substr(t$1056,1,10) = 'Utils.f90'
  809.              _substr(t$1057,1,7) = 'COLRAD'
  809.             t$1058 = colrad%dim_1%LB
  809.             t$1059 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  809.             t$1060 = ( -1 + maxdegree )
  809.             call _rbounds_error(  _substr(t$1056,1,10), 809,  _substr(t$1057,1,7), 1, t$1058, t$1059, 1, t$1060, 1, t$1055 )
  809.          endif
  809.          if ( ( ( 2 < colrad%dim_1%LB .or. -3 + colrad%dim_1%LB + colrad%dim_1%EX < 0 .or. maxdegree < colrad%dim_1%LB .or. maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  809.              _substr(t$1062,1,10) = 'Utils.f90'
  809.              _substr(t$1063,1,7) = 'COLRAD'
  809.             t$1064 = colrad%dim_1%LB
  809.             t$1065 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  809.             t$1066 = maxdegree
  809.             call _rbounds_error(  _substr(t$1062,1,10), 809,  _substr(t$1063,1,7), 1, t$1064, t$1065, 2, t$1066, 1, t$1061 )
  809.          endif
  809.          $Reduc_A45 = inf4159265358979
  809.          $F_A47 = -1 + maxdegree
  809.          if ( -1 + maxdegree > 0 ) then
  809.             $SC_colrad_I52 = colrad%dim_1%EX
  809.             $SC_colrad_I53 = colrad%dim_1%LB
  809.             $I_L809_44 = 0
  809. !dir$ ivdep
  809.             do
  809.                $Reduc_A45 = min( $Reduc_A45, 57.295779513082387 * abs( (colrad%base_addr)(1 + $I_L809_44, 0) + -(colrad%base_addr)(2 + $I_L809_44, 0) ) )
  809.                $I_L809_44 = 1 + $I_L809_44
  809.                if ( $I_L809_44 >= $F_A47 ) exit
  809.             enddo
  809.          endif
  810.          if ( ( ( 1 < colrad%dim_1%LB .or. 0 >= -1 + colrad%dim_1%LB + colrad%dim_1%EX .or. -1 + maxdegree < colrad%dim_1%LB .or. -1 + maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  810.              _substr(t$1069,1,10) = 'Utils.f90'
  810.              _substr(t$1070,1,7) = 'COLRAD'
  810.             t$1071 = colrad%dim_1%LB
  810.             t$1072 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  810.             t$1073 = ( -1 + maxdegree )
  810.             call _rbounds_error(  _substr(t$1069,1,10), 810,  _substr(t$1070,1,7), 1, t$1071, t$1072, 1, t$1073, 1, t$1068 )
  810.          endif
  810.          if ( ( ( 2 < colrad%dim_1%LB .or. -3 + colrad%dim_1%LB + colrad%dim_1%EX < 0 .or. maxdegree < colrad%dim_1%LB .or. maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  810.              _substr(t$1075,1,10) = 'Utils.f90'
  810.              _substr(t$1076,1,7) = 'COLRAD'
  810.             t$1077 = colrad%dim_1%LB
  810.             t$1078 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  810.             t$1079 = maxdegree
  810.             call _rbounds_error(  _substr(t$1075,1,10), 810,  _substr(t$1076,1,7), 1, t$1077, t$1078, 2, t$1079, 1, t$1074 )
  810.          endif
  810.          $Reduc_A48 = -inf95779513082387
  810.          $F_A50 = -1 + maxdegree
  810.          if ( -1 + maxdegree > 0 ) then
  810.             $SC_colrad_I52 = colrad%dim_1%EX
  810.             $SC_colrad_I53 = colrad%dim_1%LB
  810.             $I_L810_46 = 0
  810. !dir$ ivdep
  810.             do
  810.                $Reduc_A48 = max( $Reduc_A48, 57.295779513082387 * abs( (colrad%base_addr)(1 + $I_L810_46, 0) + -(colrad%base_addr)(2 + $I_L810_46, 0) ) )
  810.                $I_L810_46 = 1 + $I_L810_46
  810.                if ( $I_L810_46 >= $F_A50 ) exit
  810.             enddo
  810.          endif
  808.          $_IOitem_P0(0) = $Reduc_A45
  808.          $_IOitem_P0(1) = $Reduc_A48
  808.          $_IOitem_P0(2) = ( 180.0 * 1.0/( real( maxdegree, 8 ) ) )
  808.          _fwrite( _clist( 0, 0, 3,  _substr(line,1,256), Null_Arg, Null_Arg, t$81,  _substr(t$80,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P0(:( 0, 2, 1 )), 0x4000300000000L ) ) )
  812.           _substr(t$1081,1,21) = '**(CreateGaussQuad)**'
  812.          call msgone(  _substr(t$1081,1,21),  _substr(line,1,256) )
  815.          if ( ( ( 1 < colrad%dim_1%LB .or. 0 >= -1 + colrad%dim_1%LB + colrad%dim_1%EX .or. -1 + maxdegree < colrad%dim_1%LB .or. -1 + maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  815.              _substr(t$1083,1,10) = 'Utils.f90'
  815.              _substr(t$1084,1,7) = 'COLRAD'
  815.             t$1058 = colrad%dim_1%LB
  815.             t$1059 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  815.             t$1060 = ( -1 + maxdegree )
  815.             call _rbounds_error(  _substr(t$1083,1,10), 815,  _substr(t$1084,1,7), 1, t$1058, t$1059, 1, t$1060, 1, t$1082 )
  815.          endif
  815.          if ( ( ( 2 < colrad%dim_1%LB .or. -3 + colrad%dim_1%LB + colrad%dim_1%EX < 0 .or. maxdegree < colrad%dim_1%LB .or. maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  815.              _substr(t$1086,1,10) = 'Utils.f90'
  815.              _substr(t$1087,1,7) = 'COLRAD'
  815.             t$1064 = colrad%dim_1%LB
  815.             t$1065 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  815.             t$1066 = maxdegree
  815.             call _rbounds_error(  _substr(t$1086,1,10), 815,  _substr(t$1087,1,7), 1, t$1064, t$1065, 2, t$1066, 1, t$1085 )
  815.          endif
  815.          $Reduc_A51 = inf.0
  815.          $F_A53 = -1 + maxdegree
  815.          if ( -1 + maxdegree > 0 ) then
  815.             $SC_colrad_I52 = colrad%dim_1%EX
  815.             $SC_colrad_I53 = colrad%dim_1%LB
  815.             $I_L815_48 = 0
  815. !dir$ ivdep
  815.             do
  815.                $Reduc_A51 = min( $Reduc_A51, 57.295779513082387 * abs( (colrad%base_addr)(1 + $I_L815_48, 0) + -(colrad%base_addr)(2 + $I_L815_48, 0) ) )
  815.                $I_L815_48 = 1 + $I_L815_48
  815.                if ( $I_L815_48 >= $F_A53 ) exit
  815.             enddo
  815.          endif
  815.          t$1067 = 112.0 * $Reduc_A51
  816.          if ( ( ( 1 < colrad%dim_1%LB .or. 0 >= -1 + colrad%dim_1%LB + colrad%dim_1%EX .or. -1 + maxdegree < colrad%dim_1%LB .or. -1 + maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  816.              _substr(t$1089,1,10) = 'Utils.f90'
  816.              _substr(t$1090,1,7) = 'COLRAD'
  816.             t$1071 = colrad%dim_1%LB
  816.             t$1072 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  816.             t$1073 = ( -1 + maxdegree )
  816.             call _rbounds_error(  _substr(t$1089,1,10), 816,  _substr(t$1090,1,7), 1, t$1071, t$1072, 1, t$1073, 1, t$1088 )
  816.          endif
  816.          if ( ( ( 2 < colrad%dim_1%LB .or. -3 + colrad%dim_1%LB + colrad%dim_1%EX < 0 .or. maxdegree < colrad%dim_1%LB .or. maxdegree > -1 + colrad%dim_1%LB + colrad%dim_1%EX ) .and. -1 + maxdegree > 0 ) /= .false. ) then
  816.              _substr(t$1092,1,10) = 'Utils.f90'
  816.              _substr(t$1093,1,7) = 'COLRAD'
  816.             t$1077 = colrad%dim_1%LB
  816.             t$1078 = -1 + colrad%dim_1%LB + colrad%dim_1%EX
  816.             t$1079 = maxdegree
  816.             call _rbounds_error(  _substr(t$1092,1,10), 816,  _substr(t$1093,1,7), 1, t$1077, t$1078, 2, t$1079, 1, t$1091 )
  816.          endif
  816.          $Reduc_A54 = -inf0
  816.          $F_A56 = -1 + maxdegree
  816.          if ( -1 + maxdegree > 0 ) then
  816.             $SC_colrad_I52 = colrad%dim_1%EX
  816.             $SC_colrad_I53 = colrad%dim_1%LB
  816.             $I_L816_50 = 0
  816. !dir$ ivdep
  816.             do
  816.                $Reduc_A54 = max( $Reduc_A54, 57.295779513082387 * abs( (colrad%base_addr)(1 + $I_L816_50, 0) + -(colrad%base_addr)(2 + $I_L816_50, 0) ) )
  816.                $I_L816_50 = 1 + $I_L816_50
  816.                if ( $I_L816_50 >= $F_A56 ) exit
  816.             enddo
  816.          endif
  814.          $_IOitem_P1(0) = t$1067
  814.          $_IOitem_P1(1) = ( 112.0 * $Reduc_A54 )
  814.          $_IOitem_P1(2) = ( 20160.0 * 1.0/( real( maxdegree, 8 ) ) )
  814.          _fwrite( _clist( 0, 0, 3,  _substr(line,1,256), Null_Arg, Null_Arg, t$83,  _substr(t$82,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P1(:( 0, 2, 1 )), 0x4000300000000L ) ) )
  818.           _substr(t$1094,1,21) = '**(CreateGaussQuad)**'
  818.          call msgone(  _substr(t$1094,1,21),  _substr(line,1,256) )
  820.          if ( ( ( 1 + maxdegree / 2 < gaussweights%dim_1%LB .or. 1 + maxdegree / 2 > -1 + gaussweights%dim_1%LB + gaussweights%dim_1%EX .or. maxdegree < gaussweights%dim_1%LB .or. maxdegree > -1 + gaussweights%dim_1%LB + gaussweights%dim_1%EX ) .and. maxdegree + maxdegree / -2 > 0 ) /= .false. ) then
  820.              _substr(t$1096,1,10) = 'Utils.f90'
  820.              _substr(t$1097,1,13) = 'GAUSSWEIGHTS'
  820.             t$1058 = gaussweights%dim_1%LB
  820.             t$1059 = -1 + gaussweights%dim_1%LB + gaussweights%dim_1%EX
  820.             t$1060 = ( 1 + maxdegree / 2 )
  820.             t$1064 = maxdegree
  820.             call _rbounds_error(  _substr(t$1096,1,10), 820,  _substr(t$1097,1,13), 1, t$1058, t$1059, t$1060, t$1064, 1, t$1095 )
  820.          endif
  820.          $Reduc_A57 = 0.0
  820.          $F_A59 = ( maxdegree + maxdegree / -2 )
  820.          if ( maxdegree + maxdegree / -2 > 0 ) then
  820.             $SC_gaussweights_I40 = gaussweights%dim_1%EX
  820.             $SC_gaussweights_I41 = gaussweights%dim_1%LB
  820.             $I_L820_52 = 0
  820. !dir$ ivdep
  820.             do
  820.                $Reduc_A57 = $Reduc_A57 + (gaussweights%base_addr)(1 + $I_L820_52 + maxdegree / 2, 0)
  820.                $I_L820_52 = 1 + $I_L820_52
  820.                if ( $I_L820_52 >= $F_A59 ) exit
  820.             enddo
  820.          endif
  820.          t$1067 = $Reduc_A57
  821.          if ( ( ( 1 + maxdegree / 2 < gaussweights%dim_1%LB .or. 1 + maxdegree / 2 > -1 + gaussweights%dim_1%LB + gaussweights%dim_1%EX .or. maxdegree < gaussweights%dim_1%LB .or. maxdegree > -1 + gaussweights%dim_1%LB + gaussweights%dim_1%EX ) .and. maxdegree + maxdegree / -2 > 0 ) /= .false. ) then
  821.              _substr(t$1099,1,10) = 'Utils.f90'
  821.              _substr(t$1100,1,13) = 'GAUSSWEIGHTS'
  821.             t$1065 = gaussweights%dim_1%LB
  821.             t$1066 = -1 + gaussweights%dim_1%LB + gaussweights%dim_1%EX
  821.             t$1071 = ( 1 + maxdegree / 2 )
  821.             t$1072 = maxdegree
  821.             call _rbounds_error(  _substr(t$1099,1,10), 821,  _substr(t$1100,1,13), 1, t$1065, t$1066, t$1071, t$1072, 1, t$1098 )
  821.          endif
  821.          $Reduc_A60 = 0.0
  821.          $F_A62 = ( maxdegree + maxdegree / -2 )
  821.          if ( maxdegree + maxdegree / -2 > 0 ) then
  821.             $SC_gaussweights_I40 = gaussweights%dim_1%EX
  821.             $SC_gaussweights_I41 = gaussweights%dim_1%LB
  821.             $I_L821_54 = 0
  821. !dir$ ivdep
  821.             do
  821.                $Reduc_A60 = $Reduc_A60 + (gaussweights%base_addr)(1 + $I_L821_54 + maxdegree / 2, 0)
  821.                $I_L821_54 = 1 + $I_L821_54
  821.                if ( $I_L821_54 >= $F_A62 ) exit
  821.             enddo
  821.          endif
  821.          t$1080 = 1.0 + -$Reduc_A60
  820.          _fwrite( _clist( 0, 0, 3,  _substr(line,1,256), Null_Arg, Null_Arg, t$85,  _substr(t$84,1,17), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( t$1067, 0x804060300000000L ), _iotype( t$1080, 0x4000300000000L ) ) )
  822.           _substr(t$1101,1,21) = '**(CreateGaussQuad)**'
  822.          call msgone(  _substr(t$1101,1,21),  _substr(line,1,256) )
  753.          $_allo_P12(0) = 0x1000000000001L
  753.          $_allo_P12(1) = loc( fvals )
  753.          call _dealloc( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
  753.       endif
  825.       return
  825.       end
  825.       
  828.       
  828.       subroutine creategridvalues
  828.       t$86 = jmax / 2
  828.       t$338 = 1 + t$86
  831.       t$339 = _zla( 0, 1 + t$86 )
  831.       t$342 = 4 * _zla( 0, 1 + t$86 )
  828.       t$340 = int( _alloc( 4 * _zla( 0, 1 + t$86 ) ), 8 )
  831.       t$341 = t$340
  832.       colrad2d%header%a_contig = 1
  832.       colrad2d%dim_1%LB = 1
  832.       colrad2d%dim_1%EX = _zla( 0, ibmax )
  832.       colrad2d%dim_1%SM = 1
  832.       colrad2d%dim_2%LB = 1
  832.       colrad2d%dim_2%EX = _zla( 0, jbmax )
  832.       colrad2d%dim_2%SM = _zla( 0, ibmax )
  832.       $_allo_P9(0) = 0x1000000000001L
  832.       $_allo_P9(1) = loc( colrad2d )
  832.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  833.       rcl%header%a_contig = 1
  833.       rcl%dim_1%LB = 1
  833.       rcl%dim_1%EX = _zla( 0, ibmax )
  833.       rcl%dim_1%SM = 1
  833.       rcl%dim_2%LB = 1
  833.       rcl%dim_2%EX = _zla( 0, jbmax )
  833.       rcl%dim_2%SM = _zla( 0, ibmax )
  833.       $_allo_P10(0) = 0x1000000000001L
  833.       $_allo_P10(1) = loc( rcl )
  833.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
  834.       $F_A33 = _zla( 0, jbmax )
  834.       $F_A34 = _zla( 0, ibmax )
  834.       if ( and( -$F_A34, -$F_A33 ) < 0 ) then
  834.          $I_L834_94 = 0
  834.          do
  834.             $I_L834_90 = 0
  834. !dir$ ivdep
  834.             do
  834.                (rcl%base_addr)(1 + $I_L834_90, 1 + $I_L834_94, 0) = 0.0
  834.                $I_L834_90 = 1 + $I_L834_90
  834.                if ( $I_L834_90 >= $F_A34 ) exit
  834.             enddo
  834.             $I_L834_94 = 1 + $I_L834_94
  834.             if ( $I_L834_94 >= $F_A33 ) exit
  834.          enddo
  834.       endif
  835.       cel_area%header%a_contig = 1
  835.       cel_area%dim_1%LB = 1
  835.       cel_area%dim_1%EX = ( max( 0, jmax ) )
  835.       cel_area%dim_1%SM = 1
  835.       $_allo_P11(0) = 0x1000000000001L
  835.       $_allo_P11(1) = loc( cel_area )
  835.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
  836.       total_mass%header%a_contig = 1
  836.       total_mass%dim_1%LB = 0
  836.       total_mass%dim_1%EX = ( max( 0, 1 + nscalars ) )
  836.       total_mass%dim_1%SM = 1
  836.       $_allo_P12(0) = 0x1000000000001L
  836.       $_allo_P12(1) = loc( total_mass )
  836.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
  837.       massconsrv%header%a_contig = 1
  837.       massconsrv%dim_1%LB = 1
  837.       massconsrv%dim_1%EX = ( max( 0, jmax ) )
  837.       massconsrv%dim_1%SM = 1
  837.       $_allo_P13(0) = 0x1000000000001L
  837.       $_allo_P13(1) = loc( massconsrv )
  837.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
  838.       fconsrv%header%a_contig = 1
  838.       fconsrv%dim_1%LB = 1
  838.       fconsrv%dim_1%EX = ( max( 0, nscalars ) )
  838.       fconsrv%dim_1%SM = 1
  838.       fconsrv%dim_2%LB = 1
  838.       fconsrv%dim_2%EX = ( max( 0, jmax ) )
  838.       fconsrv%dim_2%SM = ( max( 0, nscalars ) )
  838.       $_allo_P14(0) = 0x1000000000001L
  838.       $_allo_P14(1) = loc( fconsrv )
  838.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
  839.       totmas%header%a_contig = 1
  839.       totmas%dim_1%LB = 1
  839.       totmas%dim_1%EX = ( max( 0, nscalars ) )
  839.       totmas%dim_1%SM = 1
  839.       $_allo_P15(0) = 0x1000000000001L
  839.       $_allo_P15(1) = loc( totmas )
  839.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
  840.       coslatj%header%a_contig = 1
  840.       coslatj%dim_1%LB = 1
  840.       coslatj%dim_1%EX = ( max( 0, jmax ) )
  840.       coslatj%dim_1%SM = 1
  840.       $_allo_P16(0) = 0x1000000000001L
  840.       $_allo_P16(1) = loc( coslatj )
  840.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
  841.       sinlatj%header%a_contig = 1
  841.       sinlatj%dim_1%LB = 1
  841.       sinlatj%dim_1%EX = ( max( 0, jmax ) )
  841.       sinlatj%dim_1%SM = 1
  841.       $_allo_P17(0) = 0x1000000000001L
  841.       $_allo_P17(1) = loc( sinlatj )
  841.       call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
  842.       coslat%header%a_contig = 1
  842.       coslat%dim_1%LB = 1
  842.       coslat%dim_1%EX = ( max( 0, ibmax ) )
  842.       coslat%dim_1%SM = 1
  842.       coslat%dim_2%LB = 1
  842.       coslat%dim_2%EX = ( max( 0, jbmax ) )
  842.       coslat%dim_2%SM = ( max( 0, ibmax ) )
  842.       $_allo_P18(0) = 0x1000000000001L
  842.       $_allo_P18(1) = loc( coslat )
  842.       call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
  843.       sinlat%header%a_contig = 1
  843.       sinlat%dim_1%LB = 1
  843.       sinlat%dim_1%EX = ( max( 0, ibmax ) )
  843.       sinlat%dim_1%SM = 1
  843.       sinlat%dim_2%LB = 1
  843.       sinlat%dim_2%EX = ( max( 0, jbmax ) )
  843.       sinlat%dim_2%SM = ( max( 0, ibmax ) )
  843.       $_allo_P19(0) = 0x1000000000001L
  843.       $_allo_P19(1) = loc( sinlat )
  843.       call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
  844.       coslon%header%a_contig = 1
  844.       coslon%dim_1%LB = 1
  844.       coslon%dim_1%EX = ( max( 0, ibmax ) )
  844.       coslon%dim_1%SM = 1
  844.       coslon%dim_2%LB = 1
  844.       coslon%dim_2%EX = ( max( 0, jbmax ) )
  844.       coslon%dim_2%SM = ( max( 0, ibmax ) )
  844.       $_allo_P20(0) = 0x1000000000001L
  844.       $_allo_P20(1) = loc( coslon )
  844.       call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
  845.       sinlon%header%a_contig = 1
  845.       sinlon%dim_1%LB = 1
  845.       sinlon%dim_1%EX = ( max( 0, ibmax ) )
  845.       sinlon%dim_1%SM = 1
  845.       sinlon%dim_2%LB = 1
  845.       sinlon%dim_2%EX = ( max( 0, jbmax ) )
  845.       sinlon%dim_2%SM = ( max( 0, ibmax ) )
  845.       $_allo_P21(0) = 0x1000000000001L
  845.       $_allo_P21(1) = loc( sinlon )
  845.       call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
  846.       cos2lat%header%a_contig = 1
  846.       cos2lat%dim_1%LB = 1
  846.       cos2lat%dim_1%EX = ( max( 0, ibmax ) )
  846.       cos2lat%dim_1%SM = 1
  846.       cos2lat%dim_2%LB = 1
  846.       cos2lat%dim_2%EX = ( max( 0, jbmax ) )
  846.       cos2lat%dim_2%SM = ( max( 0, ibmax ) )
  846.       $_allo_P22(0) = 0x1000000000001L
  846.       $_allo_P22(1) = loc( cos2lat )
  846.       call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
  847.       ercossin%header%a_contig = 1
  847.       ercossin%dim_1%LB = 1
  847.       ercossin%dim_1%EX = ( max( 0, ibmax ) )
  847.       ercossin%dim_1%SM = 1
  847.       ercossin%dim_2%LB = 1
  847.       ercossin%dim_2%EX = ( max( 0, jbmax ) )
  847.       ercossin%dim_2%SM = ( max( 0, ibmax ) )
  847.       $_allo_P23(0) = 0x1000000000001L
  847.       $_allo_P23(1) = loc( ercossin )
  847.       call __allocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
  848.       fcor%header%a_contig = 1
  848.       fcor%dim_1%LB = 1
  848.       fcor%dim_1%EX = ( max( 0, ibmax ) )
  848.       fcor%dim_1%SM = 1
  848.       fcor%dim_2%LB = 1
  848.       fcor%dim_2%EX = ( max( 0, jbmax ) )
  848.       fcor%dim_2%SM = ( max( 0, ibmax ) )
  848.       $_allo_P24(0) = 0x1000000000001L
  848.       $_allo_P24(1) = loc( fcor )
  848.       call __allocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
  849.       cosiv%header%a_contig = 1
  849.       cosiv%dim_1%LB = 1
  849.       cosiv%dim_1%EX = ( max( 0, ibmax ) )
  849.       cosiv%dim_1%SM = 1
  849.       cosiv%dim_2%LB = 1
  849.       cosiv%dim_2%EX = ( max( 0, jbmax ) )
  849.       cosiv%dim_2%SM = ( max( 0, ibmax ) )
  849.       $_allo_P25(0) = 0x1000000000001L
  849.       $_allo_P25(1) = loc( cosiv )
  849.       call __allocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
  850.       longit%header%a_contig = 1
  850.       longit%dim_1%LB = 1
  850.       longit%dim_1%EX = ( max( 0, ibmax ) )
  850.       longit%dim_1%SM = 1
  850.       longit%dim_2%LB = 1
  850.       longit%dim_2%EX = ( max( 0, jbmax ) )
  850.       longit%dim_2%SM = ( max( 0, ibmax ) )
  850.       $_allo_P26(0) = 0x1000000000001L
  850.       $_allo_P26(1) = loc( longit )
  850.       call __allocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
  851.       lonrad%header%a_contig = 1
  851.       lonrad%dim_1%LB = 1
  851.       lonrad%dim_1%EX = ( max( 0, ibmax ) )
  851.       lonrad%dim_1%SM = 1
  851.       lonrad%dim_2%LB = 1
  851.       lonrad%dim_2%EX = ( max( 0, jbmax ) )
  851.       lonrad%dim_2%SM = ( max( 0, ibmax ) )
  851.       $_allo_P27(0) = 0x1000000000001L
  851.       $_allo_P27(1) = loc( lonrad )
  851.       call __allocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
  852.       lati%header%a_contig = 1
  852.       lati%dim_1%LB = 1
  852.       lati%dim_1%EX = ( max( 0, jmax ) )
  852.       lati%dim_1%SM = 1
  852.       $_allo_P28(0) = 0x1000000000001L
  852.       $_allo_P28(1) = loc( lati )
  852.       call __allocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
  853.       long%header%a_contig = 1
  853.       long%dim_1%LB = 1
  853.       long%dim_1%EX = ( max( 0, imax ) )
  853.       long%dim_1%SM = 1
  853.       $_allo_P29(0) = 0x1000000000001L
  853.       $_allo_P29(1) = loc( long )
  853.       call __allocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
  854.       cosz%header%a_contig = 1
  854.       cosz%dim_1%LB = 1
  854.       cosz%dim_1%EX = ( max( 0, jmax ) )
  854.       cosz%dim_1%SM = 1
  854.       $_allo_P30(0) = 0x1000000000001L
  854.       $_allo_P30(1) = loc( cosz )
  854.       call __allocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
  855.       cos2d%header%a_contig = 1
  855.       cos2d%dim_1%LB = 1
  855.       cos2d%dim_1%EX = ( max( 0, ibmax ) )
  855.       cos2d%dim_1%SM = 1
  855.       cos2d%dim_2%LB = 1
  855.       cos2d%dim_2%EX = ( max( 0, jbmax ) )
  855.       cos2d%dim_2%SM = ( max( 0, ibmax ) )
  855.       $_allo_P31(0) = 0x1000000000001L
  855.       $_allo_P31(1) = loc( cos2d )
  855.       call __allocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
  856.       vmax%header%a_contig = 1
  856.       vmax%dim_1%LB = 1
  856.       vmax%dim_1%EX = ( max( 0, kmax ) )
  856.       vmax%dim_1%SM = 1
  856.       vmax%dim_2%LB = 1
  856.       vmax%dim_2%EX = ( max( 0, jbmax ) )
  856.       vmax%dim_2%SM = ( max( 0, kmax ) )
  856.       $_allo_P32(0) = 0x1000000000001L
  856.       $_allo_P32(1) = loc( vmax )
  856.       call __allocate( $_allo_P32, 0, 0, _fcd( 0, 0 ) )
  857.       vaux%header%a_contig = 1
  857.       vaux%dim_1%LB = 1
  857.       vaux%dim_1%EX = ( max( 0, kmax ) )
  857.       vaux%dim_1%SM = 1
  857.       $_allo_P33(0) = 0x1000000000001L
  857.       $_allo_P33(1) = loc( vaux )
  857.       call __allocate( $_allo_P33, 0, 0, _fcd( 0, 0 ) )
  858.       vmaxvert%header%a_contig = 1
  858.       vmaxvert%dim_1%LB = 1
  858.       vmaxvert%dim_1%EX = ( max( 0, kmax ) )
  858.       vmaxvert%dim_1%SM = 1
  858.       $_allo_P34(0) = 0x1000000000001L
  858.       $_allo_P34(1) = loc( vmaxvert )
  858.       call __allocate( $_allo_P34, 0, 0, _fcd( 0, 0 ) )
  860.       if ( jmax > 0 ) then
  861.          $SC_colrad_I0 = colrad%dim_1%EX
  861.          $SC_colrad_I1 = colrad%dim_1%LB
  860.          $I_L860_80 = 0
  860. !dir$ ivdep
  860.          do
  861.             (lati%base_addr)(1 + $I_L860_80, 0) = (colrad%base_addr)(1 + $I_L860_80, 0)
  862.             $I_L860_80 = 1 + $I_L860_80
  860.             if ( $I_L860_80 >= jmax ) exit
  860.          enddo
  860.       endif
  863.       if ( imax > 0 ) then
  863.          $I_L863_82 = 0
  863. !dir$ ivdep
  863.          do
  864.             (long%base_addr)(1 + $I_L863_82, 0) = ( 360.0 * $I_L863_82 * 1.0/( real( imax, 8 ) ) )
  865.             $I_L863_82 = 1 + $I_L863_82
  863.             if ( $I_L863_82 >= imax ) exit
  863.          enddo
  863.       endif
  866.       sinjm(0) = 1.0
  867.       if ( jmax >= 2 ) then
  867.          $I_L867_84 = 0
  867. !dir$ ivdep
  867.          do
  868.             $Flat_S3 = cos( 5.0e-1 * ( (lati%base_addr)(1 + $I_L867_84, 0) + (lati%base_addr)(2 + $I_L867_84, 0) ) )
  868.             sinjm(1 + $I_L867_84) = real( $Flat_S3 )
  869.             $I_L867_84 = 1 + $I_L867_84
  867.             if ( $I_L867_84 >= jmax / 2 ) exit
  867.          enddo
  867.       endif
  872.       if ( jmax >= 2 ) then
  871.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  878.          $SC_imaxperj_I2 = imaxperj%dim_1%EX
  878.          $SC_imaxperj_I3 = imaxperj%dim_1%LB
  874.          $SC_colrad_I0 = colrad%dim_1%EX
  874.          $SC_colrad_I1 = colrad%dim_1%LB
  872.          $I_L872_86 = 0
  872. !dir$ ivdep
  872. !$omp do schedule(static)
  872.          do
  874.             $Coss_P7 = coss( (colrad%base_addr)(1 + $I_L872_86, 0) )
  874.             (sinlatj%base_addr)(1 + $I_L872_86, 0) = real( $Coss_P7, 8 )
  875.             (coslatj%base_addr)(1 + $I_L872_86, 0) = cimag( $Coss_P7 )
  876.             (sinlatj%base_addr)(jmax + -$I_L872_86, 0) = -( real( $Coss_P7, 8 ) )
  877.             (coslatj%base_addr)(jmax + -$I_L872_86, 0) = cimag( $Coss_P7 )
  878.             (cel_area%base_addr)(1 + $I_L872_86, 0) = ( sinjm($I_L872_86) + -sinjm(1 + $I_L872_86) ) * ( 5.0e-1 * 1.0/(imaxperj%base_addr)(1 + $I_L872_86, 0) )
  879.             (cel_area%base_addr)(jmax + -$I_L872_86, 0) = (cel_area%base_addr)(1 + $I_L872_86, 0)
  880.             $I_L872_86 = 1 + $I_L872_86
  872.             if ( $I_L872_86 >= jmax / 2 ) exit
  872.          enddo
  881.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
  881.       endif
  885.       if ( jbmax > 0 ) then
  884.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
  893.          $SC_rcs2_I16 = rcs2%dim_1%EX
  893.          $SC_rcs2_I17 = rcs2%dim_1%LB
  888.          $SC_iperijb_I11 = iperijb%dim_1%EX
  888.          $SC_iperijb_I12 = iperijb%dim_1%LB
  888.          $SC_iperijb_I14 = iperijb%dim_2%SM
  888.          $SC_iperijb_I13 = iperijb%dim_2%EX
  888.          $SC_iperijb_I15 = iperijb%dim_2%LB
  887.          $SC_jperijb_I6 = jperijb%dim_1%EX
  887.          $SC_jperijb_I7 = jperijb%dim_1%LB
  887.          $SC_jperijb_I9 = jperijb%dim_2%SM
  887.          $SC_jperijb_I8 = jperijb%dim_2%EX
  887.          $SC_jperijb_I10 = jperijb%dim_2%LB
  886.          $SC_ibmaxperjb_I4 = ibmaxperjb%dim_1%EX
  886.          $SC_ibmaxperjb_I5 = ibmaxperjb%dim_1%LB
  894.          $SC_imaxperj_I2 = imaxperj%dim_1%EX
  894.          $SC_imaxperj_I3 = imaxperj%dim_1%LB
  890.          $SC_colrad_I0 = colrad%dim_1%EX
  890.          $SC_colrad_I1 = colrad%dim_1%LB
  885.          $I_L885_92 = 0
  885. !$omp do schedule(static)
  885.          do
  886.             $t_S8 = (ibmaxperjb%base_addr)(1 + $I_L885_92, 0)
  886.             if ( $t_S8 > 0 ) then
  886.                $I_L886_88 = 0
  886. !dir$ ivdep
  886.                do
  887.                   $$_j = (jperijb%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0)
  888.                   $$_i = (iperijb%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0)
  890.                   (colrad2d%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = (colrad%base_addr)($$_j, 0)
  891.                   (sinlat%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = (sinlatj%base_addr)($$_j, 0)
  892.                   (coslat%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = (coslatj%base_addr)($$_j, 0)
  893.                   $rcl_WR0_R0 = (rcs2%base_addr)(min( $$_j, 1 + jmax + -$$_j ), 0)
  893.                   (rcl%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = $rcl_WR0_R0
  894.                   $longit_WR0_R1 = ( 6.28318530717958 * 1.0/(imaxperj%base_addr)($$_j, 0) * ( -1 + $$_i ) )
  894.                   (longit%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = $longit_WR0_R1
  895.                   (lonrad%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = ( 360.0 * 1.0/( real( (imaxperj%base_addr)($$_j, 0), 8 ) ) * ( -1 + $$_i ) )
  896.                   $Coss_P8 = coss( $longit_WR0_R1 )
  896.                   (sinlon%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = cimag( $Coss_P8 )
  897.                   (coslon%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = real( $Coss_P8, 8 )
  898.                   (cos2lat%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = 1.0/$rcl_WR0_R0
  905.                   $Flat_S12 = cos( (colrad%base_addr)($$_j, 0) )
  905.                   (ercossin%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = 1.5698587127158556e-7 * $Flat_S12 * $rcl_WR0_R0
  906.                   $Flat_S13 = cos( (colrad%base_addr)($$_j, 0) )
  906.                   (fcor%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = 1.4584919999999999e-4 * $Flat_S13
  907.                   (cosiv%base_addr)(1 + $I_L886_88, 1 + $I_L885_92, 0) = _sqrt( $rcl_WR0_R0 )
  909.                   $I_L886_88 = 1 + $I_L886_88
  886.                   if ( $I_L886_88 >= $t_S8 ) exit
  886.                enddo
  886.             endif
  910.             $I_L885_92 = 1 + $I_L885_92
  909.             if ( $I_L885_92 >= jbmax ) exit
  909.          enddo
  911.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
  911.       endif
  828.       _free( t$340 )
  913.       return
  913.       end
  913.       
  921.       
  921.       subroutine destroygaussquad
  926.       maxdegree = -1
  930.       call destroylegpol
  934.       $_allo_P0(0) = 0x1000000000001L
  934.       $_allo_P0(1) = loc( gausscolat )
  934.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  934.       gausscolat%header%assoc = 0
  935.       $_allo_P1(0) = 0x1000000000001L
  935.       $_allo_P1(1) = loc( singausscolat )
  935.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  935.       singausscolat%header%assoc = 0
  936.       $_allo_P2(0) = 0x1000000000001L
  936.       $_allo_P2(1) = loc( auxgausscolat )
  936.       call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  936.       auxgausscolat%header%assoc = 0
  937.       $_allo_P3(0) = 0x1000000000001L
  937.       $_allo_P3(1) = loc( gausspoints )
  937.       call __deallocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  937.       gausspoints%header%assoc = 0
  938.       $_allo_P4(0) = 0x1000000000001L
  938.       $_allo_P4(1) = loc( gaussweights )
  938.       call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  938.       gaussweights%header%assoc = 0
  939.       return
  939.       end
  939.       
  947.       
  947.       subroutine dumpgaussquad
  950.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$88,  _substr(t$87,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( maxdegree, 0x2000200000000L ) ) )
  951.       _f90_adjustl(  _substr(t$1120,1,10),  _substr(c1,1,10) )
  951.       t$1121 = _ltrim(  _substr(t$1120,1,10) )
  951.       t$1123 = int( _alloc( _zla( 0, t$1121 ) ), 8 )
  951.        _substr(t$1122,1,_zla( 0, t$1121 )) =  _substr(t$1120,1,_ltrim(  _substr(t$1120,1,10) ))
  951.       $Unit_temp_O0 = nfprt
  951.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$90,  _substr(t$89,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpGaussQuad)**', 0x800600000000L ), _iotype(  _substr(t$1122,1,_zla( 0, t$1121 )), 0x800600000000L ) ) )
  951.       _free( t$1123 )
  952.        _substr(t$1124,1,11) = 'GaussPoints'
  952.       $tm_S0 = gausspoints%dim_1%LB
  952.       t$332 = 11
  952.       gausspoints%dim_1%LB = 1
  952.       n1 = gausspoints%dim_1%EX
  952.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$5,  _substr(t$4,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  952.       t$792 = int( _alloc( 11 ), 8 )
  952.       _f90_adjustl(  _substr(t$791,1,11),  _substr(t$1124,1,11) )
  952.       t$794 = _ltrim(  _substr(t$791,1,11) )
  952.       t$796 = int( _alloc( _zla( 0, t$794 ) ), 8 )
  952.        _substr(t$795,1,_zla( 0, t$794 )) =  _substr(t$791,1,_ltrim(  _substr(t$791,1,11) ))
  952.       _f90_adjustl(  _substr(t$793,1,10),  _substr(c1,1,10) )
  952.       t$797 = _ltrim(  _substr(t$793,1,10) )
  952.       t$799 = int( _alloc( _zla( 0, t$797 ) ), 8 )
  952.        _substr(t$798,1,_zla( 0, t$797 )) =  _substr(t$793,1,_ltrim(  _substr(t$793,1,10) ))
  952.       $Unit_temp_O1 = nfprt
  952.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$7,  _substr(t$6,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$795,1,_zla( 0, t$794 )), 0x800600000000L ), _iotype(  _substr(t$798,1,_zla( 0, t$797 )), 0x800600000000L ) ) )
  952.       _free( t$799 )
  952.       _free( t$796 )
  952.       _free( t$792 )
  952.       i1h = min( 10, gausspoints%dim_1%EX )
  952.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$9,  _substr(t$8,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1h, 0x2000200000000L ) ) )
  952.       $Unit_temp_O2 = nfprt
  952.       _fwrite( _clist( 0, 0, 2, $Unit_temp_O2, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  952.       t$801 = int( _alloc( 11 ), 8 )
  952.       _f90_adjustl(  _substr(t$800,1,11),  _substr(t$1124,1,11) )
  952.       t$803 = _ltrim(  _substr(t$800,1,11) )
  952.       t$805 = int( _alloc( _zla( 0, t$803 ) ), 8 )
  952.        _substr(t$804,1,_zla( 0, t$803 )) =  _substr(t$800,1,_ltrim(  _substr(t$800,1,11) ))
  952.       _f90_adjustl(  _substr(t$802,1,10),  _substr(c1,1,10) )
  952.       t$806 = _ltrim(  _substr(t$802,1,10) )
  952.       t$808 = int( _alloc( _zla( 0, t$806 ) ), 8 )
  952.        _substr(t$807,1,_zla( 0, t$806 )) =  _substr(t$802,1,_ltrim(  _substr(t$802,1,10) ))
  952.       $Unit_temp_O3 = nfprt
  952.       _fwrite( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$804,1,_zla( 0, t$803 )), 0x800600000000L ), _iotype(  _substr(t$807,1,_zla( 0, t$806 )), 0x800600000000L ) ) )
  952.       _free( t$808 )
  952.       _free( t$805 )
  952.       _free( t$801 )
  952.       if ( gausspoints%dim_1%EX > 0 ) then
  952.          $I_L952_8 = 0
  952.          do
  952.             if ( ( ( 1 + $I_L952_8 ) <= 0 .or. ( 1 + $I_L952_8 ) > gausspoints%dim_1%EX ) /= .false. ) then
  952.                 _substr(t$813,1,10) = 'Utils.f90'
  952.                 _substr(t$814,1,4) = 'M'
  952.                t$815 = gausspoints%dim_1%EX
  952.                t$816 = 1 + $I_L952_8
  952.                call _bounds_error(  _substr(t$813,1,10), 611,  _substr(t$814,1,2), 1, 1, t$815, t$816, t$812 )
  952.             endif
  952.             $Unit_temp_O4 = nfprt
  952.             $IOitem_O5 = (gausspoints%base_addr)(1 + $I_L952_8, 0)
  952.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O4, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O5, 0x804060300000000L ) ) )
  952.             $I_L952_8 = 1 + $I_L952_8
  952.             if ( $I_L952_8 >= 1 + max( 0, -1 + min( 10, n1 ) ) ) exit
  952.          enddo
  952.       endif
  952.       $Unit_temp_O6 = nfprt
  952.       _fwrite( _clist( 0, 0, 1, $Unit_temp_O6, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  952.       gausspoints%dim_1%LB = $tm_S0
  953.        _substr(t$1126,1,12) = 'GaussWeights'
  953.       $tm_S1 = gaussweights%dim_1%LB
  953.       t$332 = 12
  953.       gaussweights%dim_1%LB = 1
  953.       n1 = gaussweights%dim_1%EX
  953.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$5,  _substr(t$4,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( n1, 0x2000200000000L ) ) )
  953.       t$792 = int( _alloc( 12 ), 8 )
  953.       _f90_adjustl(  _substr(t$791,1,12),  _substr(t$1126,1,12) )
  953.       t$794 = _ltrim(  _substr(t$791,1,12) )
  953.       t$796 = int( _alloc( _zla( 0, t$794 ) ), 8 )
  953.        _substr(t$795,1,_zla( 0, t$794 )) =  _substr(t$791,1,_ltrim(  _substr(t$791,1,12) ))
  953.       _f90_adjustl(  _substr(t$793,1,10),  _substr(c1,1,10) )
  953.       t$797 = _ltrim(  _substr(t$793,1,10) )
  953.       t$799 = int( _alloc( _zla( 0, t$797 ) ), 8 )
  953.        _substr(t$798,1,_zla( 0, t$797 )) =  _substr(t$793,1,_ltrim(  _substr(t$793,1,10) ))
  953.       $Unit_temp_O7 = nfprt
  953.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O7, Null_Arg, Null_Arg, t$7,  _substr(t$6,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$795,1,_zla( 0, t$794 )), 0x800600000000L ), _iotype(  _substr(t$798,1,_zla( 0, t$797 )), 0x800600000000L ) ) )
  953.       _free( t$799 )
  953.       _free( t$796 )
  953.       _free( t$792 )
  953.       i1h = min( 10, gaussweights%dim_1%EX )
  953.       _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$9,  _substr(t$8,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i1h, 0x2000200000000L ) ) )
  953.       $Unit_temp_O8 = nfprt
  953.       _fwrite( _clist( 0, 0, 2, $Unit_temp_O8, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  953.       t$801 = int( _alloc( 12 ), 8 )
  953.       _f90_adjustl(  _substr(t$800,1,12),  _substr(t$1126,1,12) )
  953.       t$803 = _ltrim(  _substr(t$800,1,12) )
  953.       t$805 = int( _alloc( _zla( 0, t$803 ) ), 8 )
  953.        _substr(t$804,1,_zla( 0, t$803 )) =  _substr(t$800,1,_ltrim(  _substr(t$800,1,12) ))
  953.       _f90_adjustl(  _substr(t$802,1,10),  _substr(c1,1,10) )
  953.       t$806 = _ltrim(  _substr(t$802,1,10) )
  953.       t$808 = int( _alloc( _zla( 0, t$806 ) ), 8 )
  953.        _substr(t$807,1,_zla( 0, t$806 )) =  _substr(t$802,1,_ltrim(  _substr(t$802,1,10) ))
  953.       $Unit_temp_O9 = nfprt
  953.       _fwrite( _clist( 0, 0, 0, $Unit_temp_O9, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(t$804,1,_zla( 0, t$803 )), 0x800600000000L ), _iotype(  _substr(t$807,1,_zla( 0, t$806 )), 0x800600000000L ) ) )
  953.       _free( t$808 )
  953.       _free( t$805 )
  953.       _free( t$801 )
  953.       if ( gaussweights%dim_1%EX > 0 ) then
  953.          $I_L953_10 = 0
  953.          do
  953.             if ( ( ( 1 + $I_L953_10 ) <= 0 .or. ( 1 + $I_L953_10 ) > gaussweights%dim_1%EX ) /= .false. ) then
  953.                 _substr(t$813,1,10) = 'Utils.f90'
  953.                 _substr(t$814,1,4) = 'M'
  953.                t$815 = gaussweights%dim_1%EX
  953.                t$816 = 1 + $I_L953_10
  953.                call _bounds_error(  _substr(t$813,1,10), 611,  _substr(t$814,1,2), 1, 1, t$815, t$816, t$812 )
  953.             endif
  953.             $Unit_temp_O10 = nfprt
  953.             $IOitem_O11 = (gaussweights%base_addr)(1 + $I_L953_10, 0)
  953.             _fwrite( _clist( 0, 0, 0, $Unit_temp_O10, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O11, 0x804060300000000L ) ) )
  953.             $I_L953_10 = 1 + $I_L953_10
  953.             if ( $I_L953_10 >= 1 + max( 0, -1 + min( 10, n1 ) ) ) exit
  953.          enddo
  953.       endif
  953.       $Unit_temp_O12 = nfprt
  953.       _fwrite( _clist( 0, 0, 1, $Unit_temp_O12, Null_Arg, Null_Arg, t$11,  _substr(t$10,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  953.       gaussweights%dim_1%LB = $tm_S1
  954.       return
  954.       end
  954.       
  984.       
  984.       subroutine createlegpol( maxdegree )
  990.       if ( maxdegree <= 0 ) then
  991.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$92,  _substr(t$91,1,50), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( maxdegree, 0x2000200000000L ) ) )
  992.           _substr(t$1128,1,4) = ' '
  992.          call _stop(  _substr(t$1128,1,1) )
  993.       else if ( created /= .false. ) then
  994.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$94,  _substr(t$93,1,56), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
  995.           _substr(t$1129,1,4) = ' '
  995.          call _stop(  _substr(t$1129,1,1) )
  995.       else
 1000.          nauxpoly = maxdegree
 1001.          auxpoly1%header%a_contig = 1
 1001.          auxpoly1%dim_1%LB = 1
 1001.          auxpoly1%dim_1%EX = _zla( 0, maxdegree )
 1001.          auxpoly1%dim_1%SM = 1
 1001.          $_allo_P0(0) = 0x1000000000001L
 1001.          $_allo_P0(1) = loc( auxpoly1 )
 1001.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1002.          auxpoly2%header%a_contig = 1
 1002.          auxpoly2%dim_1%LB = 1
 1002.          auxpoly2%dim_1%EX = _zla( 0, maxdegree )
 1002.          auxpoly2%dim_1%SM = 1
 1002.          $_allo_P1(0) = 0x1000000000001L
 1002.          $_allo_P1(1) = loc( auxpoly2 )
 1002.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1003.          $I_L1003_4 = 0
 1003. !dir$ ivdep
 1003.          do
 1004.             (auxpoly1%base_addr)(1 + $I_L1003_4, 0) = ( real( 1 + 2 * $I_L1003_4, 8 ) * 1.0/( real( 1 + $I_L1003_4, 8 ) ) )
 1005.             (auxpoly2%base_addr)(1 + $I_L1003_4, 0) = ( 1.0/( real( 1 + $I_L1003_4, 8 ) ) * real( -$I_L1003_4, 8 ) )
 1006.             $I_L1003_4 = 1 + $I_L1003_4
 1003.             if ( $I_L1003_4 >= maxdegree ) exit
 1003.          enddo
 1007.          created = .true.
 1007.       endif
 1008.       return
 1008.       end
 1008.       
 1015.       
 1015.       subroutine destroylegpol
 1016.       if ( created == .false. ) then
 1017.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$96,  _substr(t$95,1,54), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 1018.           _substr(t$1133,1,4) = ' '
 1018.          call _stop(  _substr(t$1133,1,1) )
 1018.       else
 1020.          $_allo_P0(0) = 0x2000000000001L
 1020.          $_allo_P0(1) = loc( auxpoly1 )
 1020.          $_allo_P0(2) = loc( auxpoly2 )
 1020.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1020.          auxpoly2%header%assoc = 0
 1020.          auxpoly1%header%assoc = 0
 1021.          created = .false.
 1021.       endif
 1022.       return
 1022.       end
 1022.       
 1028.       
 1028.       subroutine legpol( legpol, degree, col )
 1028.       col%dim_1%LB = 1
 1028.       t$97 = _zla( 0, col%dim_1%EX )
 1031.       t$343 = _zla( 0, col%dim_1%EX )
 1035.       t$346 = 8 * _zla( 0, col%dim_1%EX )
 1036.       t$347 = 8 * ( 7 + 8 * _zla( 0, col%dim_1%EX ) ) / 8
 1036.       t$349 = t$347 + 8 * _zla( 0, col%dim_1%EX )
 1037.       t$350 = 8 * ( 7 + t$347 + 8 * _zla( 0, col%dim_1%EX ) ) / 8
 1037.       t$352 = t$350 + 8 * _zla( 0, col%dim_1%EX )
 1028.       t$344 = int( _alloc( t$350 + 8 * _zla( 0, col%dim_1%EX ) ), 8 )
 1035.       t$345 = t$344
 1036.       t$348 = t$347 + t$344
 1037.       t$351 = t$350 + t$344
 1043.       if ( created == .false. ) then
 1044.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$102,  _substr(t$101,1,47), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 1045.           _substr(t$1134,1,4) = ' '
 1045.          call _stop(  _substr(t$1134,1,1) )
 1046.       else if ( degree < 2 ) then
 1046.          goto 10
 1046.       else if ( degree <= nauxpoly ) then
 1054.          $left_S0 = mod( -1 + degree, 6 )
 1055.          $F_A33 = _zla( 0, col%dim_1%EX )
 1055.          if ( _zla( 0, col%dim_1%EX ) > 0 ) then
 1055.             $SC_col_I28 = col%dim_1%SM
 1055.             $SC_col_I27 = col%dim_1%EX
 1055.             $I_L1055_42 = 0
 1055. !dir$ ivdep
 1055.             do
 1055.                x(1 + $I_L1055_42) = cos( (col%base_addr)(1 + $I_L1055_42, 0) )
 1055.                $I_L1055_42 = 1 + $I_L1055_42
 1055.                if ( $I_L1055_42 >= $F_A33 ) exit
 1055.             enddo
 1055.          endif
 1056.          $F_A34 = _zla( 0, col%dim_1%EX )
 1056.          if ( _zla( 0, col%dim_1%EX ) > 0 ) then
 1056.             $SC_col_I27 = col%dim_1%EX
 1056.             $I_L1056_44 = 0
 1056. !dir$ ivdep
 1056.             do
 1056.                p0(1 + $I_L1056_44) = 1.0
 1056.                $I_L1056_44 = 1 + $I_L1056_44
 1056.                if ( $I_L1056_44 >= $F_A34 ) exit
 1056.             enddo
 1056.          endif
 1057.          $F_A35 = _zla( 0, col%dim_1%EX )
 1057.          if ( _zla( 0, col%dim_1%EX ) > 0 ) then
 1057.             $SC_col_I27 = col%dim_1%EX
 1057.             $I_L1057_46 = 0
 1057. !dir$ ivdep
 1057.             do
 1057.                p1(1 + $I_L1057_46) = x(1 + $I_L1057_46)
 1057.                $I_L1057_46 = 1 + $I_L1057_46
 1057.                if ( $I_L1057_46 >= $F_A35 ) exit
 1057.             enddo
 1057.          endif
 1063.          if ( $left_S0 > 0 ) then
 1064.             $SC_auxpoly2_I3 = auxpoly2%dim_1%EX
 1064.             $SC_auxpoly2_I4 = auxpoly2%dim_1%LB
 1064.             $SC_auxpoly1_I0 = auxpoly1%dim_1%EX
 1064.             $SC_auxpoly1_I1 = auxpoly1%dim_1%LB
 1064.             $SC_col_I2 = col%dim_1%EX
 1063.             $I_L1063_72 = 0
 1063.             do
 1064.                $F_A36 = _zla( 0, $SC_col_I2 )
 1064.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1064.                   $SCA_auxpoly2_I10 = (auxpoly2%base_addr)(2 + $I_L1063_72, 0)
 1064.                   $SCA_auxpoly1_I11 = (auxpoly1%base_addr)(2 + $I_L1063_72, 0)
 1064.                   $I_L1064_48 = 0
 1064. !dir$ ivdep
 1064.                   do
 1064.                      legpol(1 + $I_L1064_48) = $SCA_auxpoly2_I10 * p0(1 + $I_L1064_48) + p1(1 + $I_L1064_48) * $SCA_auxpoly1_I11 * x(1 + $I_L1064_48)
 1064.                      $I_L1064_48 = 1 + $I_L1064_48
 1064.                      if ( $I_L1064_48 >= $F_A36 ) exit
 1064.                   enddo
 1064.                endif
 1065.                $F_A37 = _zla( 0, $SC_col_I2 )
 1065.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1065.                   $I_L1065_50 = 0
 1065. !dir$ ivdep
 1065.                   do
 1065.                      p0(1 + $I_L1065_50) = p1(1 + $I_L1065_50)
 1065.                      $I_L1065_50 = 1 + $I_L1065_50
 1065.                      if ( $I_L1065_50 >= $F_A37 ) exit
 1065.                   enddo
 1065.                endif
 1065.                $F_A38 = _zla( 0, $SC_col_I2 )
 1065.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1065.                   $I_L1065_52 = 0
 1065. !dir$ ivdep
 1065.                   do
 1065.                      p1(1 + $I_L1065_52) = legpol(1 + $I_L1065_52)
 1065.                      $I_L1065_52 = 1 + $I_L1065_52
 1065.                      if ( $I_L1065_52 >= $F_A38 ) exit
 1065.                   enddo
 1065.                endif
 1066.                $I_L1063_72 = 1 + $I_L1063_72
 1063.                if ( $I_L1063_72 >= $left_S0 ) exit
 1063.             enddo
 1063.          endif
 1070.          if ( -2 + degree + -$left_S0 >= 0 ) then
 1070.             $t_S3 = ( 4 + degree + -$left_S0 ) / 6
 1071.             $SC_auxpoly2_I3 = auxpoly2%dim_1%EX
 1071.             $SC_auxpoly2_I4 = auxpoly2%dim_1%LB
 1071.             $SC_auxpoly1_I0 = auxpoly1%dim_1%EX
 1071.             $SC_auxpoly1_I1 = auxpoly1%dim_1%LB
 1071.             $SC_col_I2 = col%dim_1%EX
 1070.             $I_L1070_74 = 0
 1070.             do
 1071.                $F_A39 = _zla( 0, $SC_col_I2 )
 1071.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1071.                   $SCA_auxpoly1_I12 = (auxpoly1%base_addr)(2 + $left_S0 + 6 * $I_L1070_74, 0)
 1071.                   $SCA_auxpoly2_I13 = (auxpoly2%base_addr)(2 + $left_S0 + 6 * $I_L1070_74, 0)
 1071.                   $I_L1071_54 = 0
 1071. !dir$ ivdep
 1071.                   do
 1071.                      legpol(1 + $I_L1071_54) = $SCA_auxpoly1_I12 * p1(1 + $I_L1071_54) * x(1 + $I_L1071_54) + $SCA_auxpoly2_I13 * p0(1 + $I_L1071_54)
 1071.                      $I_L1071_54 = 1 + $I_L1071_54
 1071.                      if ( $I_L1071_54 >= $F_A39 ) exit
 1071.                   enddo
 1071.                endif
 1072.                $F_A40 = _zla( 0, $SC_col_I2 )
 1072.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1072.                   $SCA_auxpoly1_I14 = (auxpoly1%base_addr)(3 + $left_S0 + 6 * $I_L1070_74, 0)
 1072.                   $SCA_auxpoly2_I15 = (auxpoly2%base_addr)(3 + $left_S0 + 6 * $I_L1070_74, 0)
 1072.                   $I_L1072_56 = 0
 1072. !dir$ ivdep
 1072.                   do
 1072.                      p0(1 + $I_L1072_56) = x(1 + $I_L1072_56) * $SCA_auxpoly1_I14 * legpol(1 + $I_L1072_56) + $SCA_auxpoly2_I15 * p1(1 + $I_L1072_56)
 1072.                      $I_L1072_56 = 1 + $I_L1072_56
 1072.                      if ( $I_L1072_56 >= $F_A40 ) exit
 1072.                   enddo
 1072.                endif
 1073.                $F_A41 = _zla( 0, $SC_col_I2 )
 1073.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1073.                   $SCA_auxpoly1_I16 = (auxpoly1%base_addr)(4 + $left_S0 + 6 * $I_L1070_74, 0)
 1073.                   $SCA_auxpoly2_I17 = (auxpoly2%base_addr)(4 + $left_S0 + 6 * $I_L1070_74, 0)
 1073.                   $I_L1073_58 = 0
 1073. !dir$ ivdep
 1073.                   do
 1073.                      p1(1 + $I_L1073_58) = p0(1 + $I_L1073_58) * $SCA_auxpoly1_I16 * x(1 + $I_L1073_58) + $SCA_auxpoly2_I17 * legpol(1 + $I_L1073_58)
 1073.                      $I_L1073_58 = 1 + $I_L1073_58
 1073.                      if ( $I_L1073_58 >= $F_A41 ) exit
 1073.                   enddo
 1073.                endif
 1074.                $F_A42 = _zla( 0, $SC_col_I2 )
 1074.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1074.                   $SCA_auxpoly1_I18 = (auxpoly1%base_addr)(5 + $left_S0 + 6 * $I_L1070_74, 0)
 1074.                   $SCA_auxpoly2_I19 = (auxpoly2%base_addr)(5 + $left_S0 + 6 * $I_L1070_74, 0)
 1074.                   $I_L1074_60 = 0
 1074. !dir$ ivdep
 1074.                   do
 1074.                      legpol(1 + $I_L1074_60) = p1(1 + $I_L1074_60) * $SCA_auxpoly1_I18 * x(1 + $I_L1074_60) + $SCA_auxpoly2_I19 * p0(1 + $I_L1074_60)
 1074.                      $I_L1074_60 = 1 + $I_L1074_60
 1074.                      if ( $I_L1074_60 >= $F_A42 ) exit
 1074.                   enddo
 1074.                endif
 1075.                $F_A43 = _zla( 0, $SC_col_I2 )
 1075.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1075.                   $SCA_auxpoly1_I20 = (auxpoly1%base_addr)(6 + $left_S0 + 6 * $I_L1070_74, 0)
 1075.                   $SCA_auxpoly2_I21 = (auxpoly2%base_addr)(6 + $left_S0 + 6 * $I_L1070_74, 0)
 1075.                   $I_L1075_62 = 0
 1075. !dir$ ivdep
 1075.                   do
 1075.                      p0(1 + $I_L1075_62) = x(1 + $I_L1075_62) * $SCA_auxpoly1_I20 * legpol(1 + $I_L1075_62) + $SCA_auxpoly2_I21 * p1(1 + $I_L1075_62)
 1075.                      $I_L1075_62 = 1 + $I_L1075_62
 1075.                      if ( $I_L1075_62 >= $F_A43 ) exit
 1075.                   enddo
 1075.                endif
 1076.                $F_A44 = _zla( 0, $SC_col_I2 )
 1076.                if ( _zla( 0, $SC_col_I2 ) > 0 ) then
 1076.                   $SCA_auxpoly1_I22 = (auxpoly1%base_addr)(7 + $left_S0 + 6 * $I_L1070_74, 0)
 1076.                   $SCA_auxpoly2_I23 = (auxpoly2%base_addr)(7 + $left_S0 + 6 * $I_L1070_74, 0)
 1076.                   $I_L1076_64 = 0
 1076. !dir$ ivdep
 1076.                   do
 1076.                      p1(1 + $I_L1076_64) = p0(1 + $I_L1076_64) * $SCA_auxpoly1_I22 * x(1 + $I_L1076_64) + $SCA_auxpoly2_I23 * legpol(1 + $I_L1076_64)
 1076.                      $I_L1076_64 = 1 + $I_L1076_64
 1076.                      if ( $I_L1076_64 >= $F_A44 ) exit
 1076.                   enddo
 1076.                endif
 1077.                $I_L1070_74 = 1 + $I_L1070_74
 1070.                if ( $I_L1070_74 >= $t_S3 ) exit
 1070.             enddo
 1070.          endif
 1078.          $F_A45 = _zla( 0, col%dim_1%EX )
 1078.          if ( _zla( 0, col%dim_1%EX ) > 0 ) then
 1078.             $SC_col_I27 = col%dim_1%EX
 1078.             $I_L1078_66 = 0
 1078. !dir$ ivdep
 1078.             do
 1078.                legpol(1 + $I_L1078_66) = p1(1 + $I_L1078_66)
 1078.                $I_L1078_66 = 1 + $I_L1078_66
 1078.                if ( $I_L1078_66 >= $F_A45 ) exit
 1078.             enddo
 1078.          endif
 1078.          goto 20
 1078.       else
 1078.    10    continue
 1082.          if ( degree == 0 ) then
 1083.             $F_A46 = _zla( 0, col%dim_1%EX )
 1083.             if ( _zla( 0, col%dim_1%EX ) > 0 ) then
 1083.                $SC_col_I27 = col%dim_1%EX
 1083.                $I_L1083_68 = 0
 1083. !dir$ ivdep
 1083.                do
 1083.                   legpol(1 + $I_L1083_68) = 1.0
 1083.                   $I_L1083_68 = 1 + $I_L1083_68
 1083.                   if ( $I_L1083_68 >= $F_A46 ) exit
 1083.                enddo
 1083.             endif
 1083.             goto 20
 1087.          else if ( degree == 1 ) then
 1088.             $F_A47 = _zla( 0, col%dim_1%EX )
 1088.             if ( _zla( 0, col%dim_1%EX ) > 0 ) then
 1088.                $SC_col_I28 = col%dim_1%SM
 1088.                $SC_col_I27 = col%dim_1%EX
 1088.                $I_L1088_70 = 0
 1088. !dir$ ivdep
 1088.                do
 1088.                   legpol(1 + $I_L1088_70) = cos( (col%base_addr)(1 + $I_L1088_70, 0) )
 1088.                   $I_L1088_70 = 1 + $I_L1088_70
 1088.                   if ( $I_L1088_70 >= $F_A47 ) exit
 1088.                enddo
 1088.             endif
 1088.    20       continue
 1028.             _free( t$344 )
 1028.          else
 1093.             $Unit_temp_O0 = nfprt
 1093.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$104,  _substr(t$103,1,57), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( degree, 0x2000200000000L ) ) )
 1095.              _substr(t$1142,1,4) = ' '
 1095.             call _stop(  _substr(t$1142,1,1) )
 1095.          endif
 1095.       endif
 1097.       return
 1097.       end
 1097.       
 1104.       
 1104.       subroutine legpolrootsandweights( degree )
 1104.       t$105 = degree / 2
 1106.       t$353 = _zla( 0, t$105 )
 1107.       t$356 = 8 * _zla( 0, t$105 )
 1113.       fsearch = $_StaticDV_P11
 1113.       fsearch%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1113.       fsearch%header%el_len = 64
 1113.       fsearch%header%assoc = 0
 1113.       fsearch%header%ptr_alloc = 0
 1113.       fsearch%header%p_or_a = 2
 1113.       fsearch%header%a_contig = 1
 1113.       fsearch%header%n_dim = 1
 1113.       fsearch%header%orig_base = 0
 1113.       fsearch%header%orig_size = 0
 1113.       fsearch%header%n_codim = 0
 1113.       fsearch%header%dv_versn = 2
 1113.       fsearch%header%dv_smunit = 64
 1113.       fsearch%header%d_type = 0
 1113.       fsearch%header%n_params = 0
 1113.       fsearch%header%d_type_idx = 13
 1113.       fsearch%dim_1%LB = 1
 1113.       fsearch%dim_1%EX = 0
 1113.       fsearch%dim_1%SM = 1
 1106.       mask = $_StaticDV_P12
 1106.       mask%base_addr = pointer to array[1] of logical( 0 )
 1106.       mask%header%el_len = 32
 1106.       mask%header%assoc = 0
 1106.       mask%header%ptr_alloc = 0
 1106.       mask%header%p_or_a = 2
 1106.       mask%header%a_contig = 1
 1106.       mask%header%n_dim = 1
 1106.       mask%header%orig_base = 0
 1106.       mask%header%orig_size = 0
 1106.       mask%header%n_codim = 0
 1106.       mask%header%dv_versn = 2
 1106.       mask%header%dv_smunit = 32
 1106.       mask%header%d_type = 0
 1106.       mask%header%n_params = 0
 1106.       mask%header%d_type_idx = 21
 1106.       mask%dim_1%LB = 1
 1106.       mask%dim_1%EX = 0
 1106.       mask%dim_1%SM = 1
 1109.       t$357 = 8 * ( 7 + 8 * _zla( 0, t$105 ) ) / 8
 1109.       t$359 = t$357 + 8 * _zla( 0, t$105 )
 1110.       t$360 = 8 * ( 7 + t$357 + 8 * _zla( 0, t$105 ) ) / 8
 1110.       t$362 = t$360 + 8 * _zla( 0, t$105 )
 1108.       t$363 = 8 * ( 7 + t$360 + 8 * _zla( 0, t$105 ) ) / 8
 1108.       t$365 = t$363 + 8 * _zla( 0, t$105 )
 1111.       t$366 = 8 * ( 7 + t$363 + 8 * _zla( 0, t$105 ) ) / 8
 1111.       t$368 = t$366 + 8 * _zla( 0, t$105 )
 1112.       t$369 = 8 * ( 7 + t$366 + 8 * _zla( 0, t$105 ) ) / 8
 1107.       t$371 = t$369 + 8 * _zla( 0, t$105 )
 1112.       xsearch = $_StaticDV_P13
 1112.       xsearch%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1112.       xsearch%header%el_len = 64
 1112.       xsearch%header%assoc = 0
 1112.       xsearch%header%ptr_alloc = 0
 1112.       xsearch%header%p_or_a = 2
 1112.       xsearch%header%a_contig = 1
 1112.       xsearch%header%n_dim = 1
 1112.       xsearch%header%orig_base = 0
 1112.       xsearch%header%orig_size = 0
 1112.       xsearch%header%n_codim = 0
 1112.       xsearch%header%dv_versn = 2
 1112.       xsearch%header%dv_smunit = 64
 1112.       xsearch%header%d_type = 0
 1112.       xsearch%header%n_params = 0
 1112.       xsearch%header%d_type_idx = 13
 1112.       xsearch%dim_1%LB = 1
 1112.       xsearch%dim_1%EX = 0
 1112.       xsearch%dim_1%SM = 1
 1104.       t$354 = int( _alloc( t$369 + 8 * _zla( 0, t$105 ) ), 8 )
 1106.       t$355 = t$354
 1109.       t$358 = t$357 + t$354
 1110.       t$361 = t$360 + t$354
 1108.       t$364 = t$363 + t$354
 1111.       t$367 = t$366 + t$354
 1112.       t$370 = t$369 + t$354
 1130.       if ( created == .false. ) then
 1131.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$112,  _substr(t$111,1,62), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
 1132.           _substr(t$1143,1,4) = ' '
 1132.          call _stop(  _substr(t$1143,1,1) )
 1133.       else if ( degree <= 0 ) then
 1133.          goto 10
 1133.       else if ( degree > nauxpoly ) then
 1133.    10    continue
 1134.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$114,  _substr(t$113,1,72), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( degree, 0x2000200000000L ) ) )
 1136.           _substr(t$1144,1,4) = ' '
 1136.          call _stop(  _substr(t$1144,1,1) )
 1136.       else if ( mod( degree, 2 ) /= 0 ) then
 1138.          _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$116,  _substr(t$115,1,59), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( degree, 0x2000200000000L ) ) )
 1139.           _substr(t$1145,1,4) = ' '
 1139.          call _stop(  _substr(t$1145,1,1) )
 1139.       else
 1145.          rootprecision = 2.2204460492503131e-14
 1158.          $step_S1 = ( 1.5707963267948966 * 1.0/( real( 4 * degree / 2, 8 ) ) )
 1159.          xsearch%header%a_contig = 1
 1159.          xsearch%dim_1%LB = 1
 1159.          xsearch%dim_1%EX = _zla( 0, ( 4 * degree / 2 ) )
 1159.          xsearch%dim_1%SM = 1
 1159.          $_allo_P14(0) = 0x1000000000001L
 1159.          $_allo_P14(1) = loc( xsearch )
 1159.          call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
 1160.          fsearch%header%a_contig = 1
 1160.          fsearch%dim_1%LB = 1
 1160.          fsearch%dim_1%EX = _zla( 0, ( 4 * degree / 2 ) )
 1160.          fsearch%dim_1%SM = 1
 1160.          $_allo_P15(0) = 0x1000000000001L
 1160.          $_allo_P15(1) = loc( fsearch )
 1160.          call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 1161.          mask%header%a_contig = 1
 1161.          mask%dim_1%LB = 1
 1161.          mask%dim_1%EX = _zla( 0, ( -1 + 4 * degree / 2 ) )
 1161.          mask%dim_1%SM = 1
 1161.          $_allo_P16(0) = 0x1000000000001L
 1161.          $_allo_P16(1) = loc( mask )
 1161.          call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 1162.          if ( 4 * degree / 2 > 0 ) then
 1162.             $I_L1162_42 = 0
 1162. !dir$ ivdep
 1162.             do
 1163.                (xsearch%base_addr)(1 + $I_L1162_42, 0) = $step_S1 * real( $I_L1162_42, 8 )
 1164.                $I_L1162_42 = 1 + $I_L1162_42
 1162.                if ( $I_L1162_42 >= ( 4 * degree / 2 ) ) exit
 1162.             enddo
 1162.          endif
 1165.          t$1149 = xsearch
 1165.          call legpol( (fsearch%base_addr)(1, 0), degree, t$1149 )
 1169.          $F_A38 = ( -1 + 4 * degree / 2 )
 1169.          if ( -1 + 4 * degree / 2 > 0 ) then
 1169.             $I_L1169_44 = 0
 1169. !dir$ ivdep
 1169.             do
 1169.                (mask%base_addr)(1 + $I_L1169_44, 0) = (fsearch%base_addr)(1 + $I_L1169_44, 0) * (fsearch%base_addr)(2 + $I_L1169_44, 0) < 0.0
 1169.                $I_L1169_44 = 1 + $I_L1169_44
 1169.                if ( $I_L1169_44 >= $F_A38 ) exit
 1169.             enddo
 1169.          endif
 1173.          $Reduc_A39 = 0
 1173.          $F_A41 = _zla( 0, ( -1 + 4 * degree / 2 ) )
 1173.          if ( _zla( 0, ( -1 + 4 * degree / 2 ) ) > 0 ) then
 1173.             $I_L1173_46 = 0
 1173. !dir$ ivdep
 1173.             do
 1173.                if ( (mask%base_addr)(1 + $I_L1173_46, 0) /= 0 ) then
 1173.                   $Reduc_A39 = 1 + $Reduc_A39
 1173.                endif
 1173.                $I_L1173_46 = 1 + $I_L1173_46
 1173.                if ( $I_L1173_46 >= $F_A41 ) exit
 1173.             enddo
 1173.          endif
 1173.          if ( degree / 2 + -$Reduc_A39 /= 0 ) then
 1175.             $Reduc_A42 = 0
 1175.             $F_A44 = _zla( 0, ( -1 + 4 * degree / 2 ) )
 1175.             if ( _zla( 0, ( -1 + 4 * degree / 2 ) ) > 0 ) then
 1175.                $I_L1175_48 = 0
 1175. !dir$ ivdep
 1175.                do
 1175.                   if ( (mask%base_addr)(1 + $I_L1175_48, 0) /= 0 ) then
 1175.                      $Reduc_A42 = 1 + $Reduc_A42
 1175.                   endif
 1175.                   $I_L1175_48 = 1 + $I_L1175_48
 1175.                   if ( $I_L1175_48 >= $F_A44 ) exit
 1175.                enddo
 1175.             endif
 1174.             $Unit_temp_O0 = nfprt
 1174.             $_IOitem_P3(0) = $Reduc_A42
 1174.             $_IOitem_P3(1) = degree / 2
 1174.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$118,  _substr(t$117,1,70), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P3(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1176.              _substr(t$1156,1,4) = ' '
 1176.             call _stop(  _substr(t$1156,1,1) )
 1176.          else
 1181.             t$1157 = ( max( 0, -1 + 4 * degree / 2 ) )
 1181.             t$1160 = int( _alloc( max( 0, 8 * max( 0, ( max( 0, -1 + 4 * degree / 2 ) ) ) ) ), 8 )
 1181.             $F_A45 = ( -1 + 4 * degree / 2 )
 1181.             if ( -1 + 4 * degree / 2 > 0 ) then
 1181.                $I_L1181_50 = 0
 1181. !dir$ ivdep
 1181.                do
 1181.                   t$1159(1 + $I_L1181_50) = (xsearch%base_addr)(1 + $I_L1181_50, 0)
 1181.                   $I_L1181_50 = 1 + $I_L1181_50
 1181.                   if ( $I_L1181_50 >= $F_A45 ) exit
 1181.                enddo
 1181.             endif
 1181.             t$1161 = _zla( 0, ( -1 + 4 * degree / 2 ) )
 1181.             t$1164 = int( _alloc( max( 0, 4 * _zla( 0, ( -1 + 4 * degree / 2 ) ) ) ), 8 )
 1181.             $F_A46 = _zla( 0, -1 + 4 * degree / 2 )
 1181.             if ( _zla( 0, -1 + 4 * degree / 2 ) > 0 ) then
 1181.                $I_L1181_52 = 0
 1181. !dir$ ivdep
 1181.                do
 1181.                   t$1163(1 + $I_L1181_52) = (mask%base_addr)(1 + $I_L1181_52, 0)
 1181.                   $I_L1181_52 = 1 + $I_L1181_52
 1181.                   if ( $I_L1181_52 >= $F_A46 ) exit
 1181.                enddo
 1181.             endif
 1182.             t$1165 = ( max( 0, -1 + 4 * degree / 2 ) )
 1182.             t$1168 = int( _alloc( max( 0, 8 * max( 0, ( max( 0, -1 + 4 * degree / 2 ) ) ) ) ), 8 )
 1182.             $F_A47 = ( -1 + 4 * degree / 2 )
 1182.             if ( -1 + 4 * degree / 2 > 0 ) then
 1182.                $I_L1182_54 = 0
 1182. !dir$ ivdep
 1182.                do
 1182.                   t$1167(1 + $I_L1182_54) = (xsearch%base_addr)(2 + $I_L1182_54, 0)
 1182.                   $I_L1182_54 = 1 + $I_L1182_54
 1182.                   if ( $I_L1182_54 >= $F_A47 ) exit
 1182.                enddo
 1182.             endif
 1182.             t$1169 = _zla( 0, ( -1 + 4 * degree / 2 ) )
 1182.             t$1172 = int( _alloc( max( 0, 4 * _zla( 0, ( -1 + 4 * degree / 2 ) ) ) ), 8 )
 1182.             $F_A48 = _zla( 0, -1 + 4 * degree / 2 )
 1182.             if ( _zla( 0, -1 + 4 * degree / 2 ) > 0 ) then
 1182.                $I_L1182_56 = 0
 1182. !dir$ ivdep
 1182.                do
 1182.                   t$1171(1 + $I_L1182_56) = (mask%base_addr)(1 + $I_L1182_56, 0)
 1182.                   $I_L1182_56 = 1 + $I_L1182_56
 1182.                   if ( $I_L1182_56 >= $F_A48 ) exit
 1182.                enddo
 1182.             endif
 1181. !dir$ ref_suppress t$1159
 1181.             $_StackDv_P5 = $_StaticDV_P17
 1181.             $_StackDv_P5%base_addr = pointer to array[1] of real (kind=8)( loc( t$1159(1) ) )
 1181.             $_StackDv_P5%header%el_len = 64
 1181.             $_StackDv_P5%header%assoc = 1
 1181.             $_StackDv_P5%header%ptr_alloc = 0
 1181.             $_StackDv_P5%header%p_or_a = 0
 1181.             $_StackDv_P5%header%a_contig = 0
 1181.             $_StackDv_P5%header%n_dim = 1
 1181.             $_StackDv_P5%header%orig_base = int( loc( t$1159(1) ), 8 )
 1181.             $_StackDv_P5%header%orig_size = 64
 1181.             $_StackDv_P5%header%n_codim = 0
 1181.             $_StackDv_P5%header%dv_versn = 2
 1181.             $_StackDv_P5%header%dv_smunit = 64
 1181.             $_StackDv_P5%header%d_type = 0
 1181.             $_StackDv_P5%header%n_params = 0
 1181.             $_StackDv_P5%header%d_type_idx = 0
 1181.             $_StackDv_P5%dim_1%LB = 1
 1181.             $_StackDv_P5%dim_1%EX = ( max( 0, -1 + 4 * degree / 2 ) )
 1181.             $_StackDv_P5%dim_1%SM = 1
 1181. !dir$ ref_suppress t$1163
 1181.             $_StackDv_P6 = $_StaticDV_P18
 1181.             $_StackDv_P6%base_addr = pointer to array[1] of logical( loc( t$1163(1) ) )
 1181.             $_StackDv_P6%header%el_len = 32
 1181.             $_StackDv_P6%header%assoc = 1
 1181.             $_StackDv_P6%header%ptr_alloc = 0
 1181.             $_StackDv_P6%header%p_or_a = 0
 1181.             $_StackDv_P6%header%a_contig = 0
 1181.             $_StackDv_P6%header%n_dim = 1
 1181.             $_StackDv_P6%header%orig_base = int( loc( t$1163(1) ), 8 )
 1181.             $_StackDv_P6%header%orig_size = 32
 1181.             $_StackDv_P6%header%n_codim = 0
 1181.             $_StackDv_P6%header%dv_versn = 2
 1181.             $_StackDv_P6%header%dv_smunit = 32
 1181.             $_StackDv_P6%header%d_type = 0
 1181.             $_StackDv_P6%header%n_params = 0
 1181.             $_StackDv_P6%header%d_type_idx = 0
 1181.             $_StackDv_P6%dim_1%LB = 1
 1181.             $_StackDv_P6%dim_1%EX = _zla( 0, -1 + 4 * degree / 2 )
 1181.             $_StackDv_P6%dim_1%SM = 1
 1181.             $_ResultDv_A3 = $_StaticDV_P19
 1181.             $_ResultDv_A3%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1181.             $_ResultDv_A3%header%el_len = 64
 1181.             $_ResultDv_A3%header%assoc = 0
 1181.             $_ResultDv_A3%header%ptr_alloc = 0
 1181.             $_ResultDv_A3%header%p_or_a = 0
 1181.             $_ResultDv_A3%header%a_contig = 0
 1181.             $_ResultDv_A3%header%n_dim = 1
 1181.             $_ResultDv_A3%header%orig_base = 0
 1181.             $_ResultDv_A3%header%orig_size = 0
 1181.             $_ResultDv_A3%header%n_codim = 0
 1181.             $_ResultDv_A3%header%dv_versn = 2
 1181.             $_ResultDv_A3%header%dv_smunit = 64
 1181.             $_ResultDv_A3%header%d_type = 0
 1181.             $_ResultDv_A3%header%n_params = 0
 1181.             $_ResultDv_A3%header%d_type_idx = 0
 1181.             $_ResultDv_A3%dim_1%LB = 0
 1181.             $_ResultDv_A3%dim_1%EX = 0
 1181.             $_ResultDv_A3%dim_1%SM = 0
 1181.             _pack( $_ResultDv_A3, $_StackDv_P5, $_StackDv_P6, Null_Arg )
 1181. !dir$ ref_suppress t$1167
 1181.             $_StackDv_P8 = $_StaticDV_P20
 1181.             $_StackDv_P8%base_addr = pointer to array[1] of real (kind=8)( loc( t$1167(1) ) )
 1181.             $_StackDv_P8%header%el_len = 64
 1181.             $_StackDv_P8%header%assoc = 1
 1181.             $_StackDv_P8%header%ptr_alloc = 0
 1181.             $_StackDv_P8%header%p_or_a = 0
 1181.             $_StackDv_P8%header%a_contig = 0
 1181.             $_StackDv_P8%header%n_dim = 1
 1181.             $_StackDv_P8%header%orig_base = int( loc( t$1167(1) ), 8 )
 1181.             $_StackDv_P8%header%orig_size = 64
 1181.             $_StackDv_P8%header%n_codim = 0
 1181.             $_StackDv_P8%header%dv_versn = 2
 1181.             $_StackDv_P8%header%dv_smunit = 64
 1181.             $_StackDv_P8%header%d_type = 0
 1181.             $_StackDv_P8%header%n_params = 0
 1181.             $_StackDv_P8%header%d_type_idx = 0
 1181.             $_StackDv_P8%dim_1%LB = 1
 1181.             $_StackDv_P8%dim_1%EX = ( max( 0, -1 + 4 * degree / 2 ) )
 1181.             $_StackDv_P8%dim_1%SM = 1
 1181. !dir$ ref_suppress t$1171
 1181.             $_StackDv_P9 = $_StaticDV_P21
 1181.             $_StackDv_P9%base_addr = pointer to array[1] of logical( loc( t$1171(1) ) )
 1181.             $_StackDv_P9%header%el_len = 32
 1181.             $_StackDv_P9%header%assoc = 1
 1181.             $_StackDv_P9%header%ptr_alloc = 0
 1181.             $_StackDv_P9%header%p_or_a = 0
 1181.             $_StackDv_P9%header%a_contig = 0
 1181.             $_StackDv_P9%header%n_dim = 1
 1181.             $_StackDv_P9%header%orig_base = int( loc( t$1171(1) ), 8 )
 1181.             $_StackDv_P9%header%orig_size = 32
 1181.             $_StackDv_P9%header%n_codim = 0
 1181.             $_StackDv_P9%header%dv_versn = 2
 1181.             $_StackDv_P9%header%dv_smunit = 32
 1181.             $_StackDv_P9%header%d_type = 0
 1181.             $_StackDv_P9%header%n_params = 0
 1181.             $_StackDv_P9%header%d_type_idx = 0
 1181.             $_StackDv_P9%dim_1%LB = 1
 1181.             $_StackDv_P9%dim_1%EX = _zla( 0, -1 + 4 * degree / 2 )
 1181.             $_StackDv_P9%dim_1%SM = 1
 1181.             $_ResultDv_A4 = $_StaticDV_P22
 1181.             $_ResultDv_A4%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1181.             $_ResultDv_A4%header%el_len = 64
 1181.             $_ResultDv_A4%header%assoc = 0
 1181.             $_ResultDv_A4%header%ptr_alloc = 0
 1181.             $_ResultDv_A4%header%p_or_a = 0
 1181.             $_ResultDv_A4%header%a_contig = 0
 1181.             $_ResultDv_A4%header%n_dim = 1
 1181.             $_ResultDv_A4%header%orig_base = 0
 1181.             $_ResultDv_A4%header%orig_size = 0
 1181.             $_ResultDv_A4%header%n_codim = 0
 1181.             $_ResultDv_A4%header%dv_versn = 2
 1181.             $_ResultDv_A4%header%dv_smunit = 64
 1181.             $_ResultDv_A4%header%d_type = 0
 1181.             $_ResultDv_A4%header%n_params = 0
 1181.             $_ResultDv_A4%header%d_type_idx = 0
 1181.             $_ResultDv_A4%dim_1%LB = 0
 1181.             $_ResultDv_A4%dim_1%EX = 0
 1181.             $_ResultDv_A4%dim_1%SM = 0
 1181.             _pack( $_ResultDv_A4, $_StackDv_P8, $_StackDv_P9, Null_Arg )
 1181.             $Base_A49 = int( (&)($_ResultDv_A4%base_addr)(0), 8 )
 1181.             $Base_A51 = int( (&)($_ResultDv_A3%base_addr)(0), 8 )
 1181.             $F_A53 = t$105
 1181.             if ( t$105 > 0 ) then
 1181.                $I_L1181_58 = 0
 1181. !dir$ ivdep
 1181.                do
 1181.                   col(1 + $I_L1181_58) = 5.0e-1 * ( $A50($I_L1181_58) + $A52($I_L1181_58) )
 1181.                   $I_L1181_58 = 1 + $I_L1181_58
 1181.                   if ( $I_L1181_58 >= $F_A53 ) exit
 1181.                enddo
 1181.             endif
 1181.             $__P10(0) = 0x1000000000001L
 1181.             $__P10(1) = int( loc( $_ResultDv_A4 ), 8 )
 1181.             _dealloc( $__P10 )
 1181.             $__P7(0) = 0x1000000000001L
 1181.             $__P7(1) = int( loc( $_ResultDv_A3 ), 8 )
 1181.             _dealloc( $__P7 )
 1182.             _free( t$1172 )
 1182.             _free( t$1168 )
 1181.             _free( t$1164 )
 1181.             _free( t$1160 )
 1183.             $_allo_P23(0) = 0x1000000000001L
 1183.             $_allo_P23(1) = loc( xsearch )
 1183.             call __deallocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
 1183.             xsearch%header%assoc = 0
 1184.             $_allo_P24(0) = 0x1000000000001L
 1184.             $_allo_P24(1) = loc( fsearch )
 1184.             call __deallocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
 1184.             fsearch%header%assoc = 0
 1185.             $_allo_P25(0) = 0x1000000000001L
 1185.             $_allo_P25(1) = loc( mask )
 1185.             call __deallocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
 1185.             mask%header%assoc = 0
 1189.             $it_S3 = 1
 1190.             $F_A54 = t$105
 1190.             if ( t$105 > 0 ) then
 1190.                $I_L1190_60 = 0
 1190. !dir$ ivdep
 1190.                do
 1190.                   x(1 + $I_L1190_60) = cos( col(1 + $I_L1190_60) )
 1190.                   $I_L1190_60 = 1 + $I_L1190_60
 1190.                   if ( $I_L1190_60 >= $F_A54 ) exit
 1190.                enddo
 1190.             endif
 1191.             $scale_S9 = ( 2.0 * 1.0/( real( degree * degree, 8 ) ) )
 1192.             $left_S4 = mod( -1 + degree, 6 )
 1193.             t$1173 = ( 7.8539816339744828e-1 * 1.0/( real( degree, 8 ) ) )
 1193.             $_IOitem_P4(0) = degree
 1193.             $_IOitem_P4(1) = 8
 1193.             $_IOitem_P4(2) = 8
 1193.             _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, t$120,  _substr(t$119,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P4(:( 0, 2, 1 )), 0x2000200000000L ), _iotype( rootprecision, 0x804060300000000L ), _iotype( t$1173, 0x4000300000000L ) ) )
 1212.             $SC_auxpoly2_I0 = auxpoly2%dim_1%EX
 1212.             $SC_auxpoly2_I1 = auxpoly2%dim_1%LB
 1212.             $SC_auxpoly1_I2 = auxpoly1%dim_1%EX
 1212.             $SC_auxpoly1_I3 = auxpoly1%dim_1%LB
 1212.             do
 1195.                if ( $it_S3 > 10 ) then
 1196.                   _fwrite( _clist( 0, 0, 3, 0, Null_Arg, Null_Arg, t$122,  _substr(t$121,1,64), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 10, 0x2000200000000L ) ) )
 1196.                   goto 20
 1196.                endif
 1204.                $F_A55 = t$105
 1204.                if ( t$105 > 0 ) then
 1204.                   $I_L1204_62 = 0
 1204. !dir$ ivdep
 1204.                   do
 1204.                      p0(1 + $I_L1204_62) = 1.0
 1204.                      $I_L1204_62 = 1 + $I_L1204_62
 1204.                      if ( $I_L1204_62 >= $F_A55 ) exit
 1204.                   enddo
 1204.                endif
 1205.                $F_A56 = t$105
 1205.                if ( t$105 > 0 ) then
 1205.                   $I_L1205_64 = 0
 1205. !dir$ ivdep
 1205.                   do
 1205.                      p1(1 + $I_L1205_64) = x(1 + $I_L1205_64)
 1205.                      $I_L1205_64 = 1 + $I_L1205_64
 1205.                      if ( $I_L1205_64 >= $F_A56 ) exit
 1205.                   enddo
 1205.                endif
 1203.                $it_S3 = 1 + $it_S3
 1211.                if ( $left_S4 > 0 ) then
 1211.                   $I_L1211_96 = 0
 1211.                   do
 1212.                      $F_A57 = t$105
 1212.                      if ( t$105 > 0 ) then
 1212.                         $SCA_auxpoly1_I4 = (auxpoly1%base_addr)(2 + $I_L1211_96, 0)
 1212.                         $SCA_auxpoly2_I5 = (auxpoly2%base_addr)(2 + $I_L1211_96, 0)
 1212.                         $I_L1212_66 = 0
 1212. !dir$ ivdep
 1212.                         do
 1212.                            pol(1 + $I_L1212_66) = x(1 + $I_L1212_66) * $SCA_auxpoly1_I4 * p1(1 + $I_L1212_66) + $SCA_auxpoly2_I5 * p0(1 + $I_L1212_66)
 1212.                            $I_L1212_66 = 1 + $I_L1212_66
 1212.                            if ( $I_L1212_66 >= $F_A57 ) exit
 1212.                         enddo
 1212.                      endif
 1213.                      $F_A58 = t$105
 1213.                      if ( t$105 > 0 ) then
 1213.                         $I_L1213_68 = 0
 1213. !dir$ ivdep
 1213.                         do
 1213.                            p0(1 + $I_L1213_68) = p1(1 + $I_L1213_68)
 1213.                            $I_L1213_68 = 1 + $I_L1213_68
 1213.                            if ( $I_L1213_68 >= $F_A58 ) exit
 1213.                         enddo
 1213.                      endif
 1213.                      $F_A59 = t$105
 1213.                      if ( t$105 > 0 ) then
 1213.                         $I_L1213_70 = 0
 1213. !dir$ ivdep
 1213.                         do
 1213.                            p1(1 + $I_L1213_70) = pol(1 + $I_L1213_70)
 1213.                            $I_L1213_70 = 1 + $I_L1213_70
 1213.                            if ( $I_L1213_70 >= $F_A59 ) exit
 1213.                         enddo
 1213.                      endif
 1214.                      $I_L1211_96 = 1 + $I_L1211_96
 1211.                      if ( $I_L1211_96 >= $left_S4 ) exit
 1211.                   enddo
 1211.                endif
 1218.                if ( -2 + degree + -$left_S4 >= 0 ) then
 1218.                   $t_S7 = ( 4 + degree + -$left_S4 ) / 6
 1218.                   $I_L1218_98 = 0
 1218.                   do
 1219.                      $F_A60 = t$105
 1219.                      if ( t$105 > 0 ) then
 1219.                         $SCA_auxpoly1_I6 = (auxpoly1%base_addr)(2 + $left_S4 + 6 * $I_L1218_98, 0)
 1219.                         $SCA_auxpoly2_I7 = (auxpoly2%base_addr)(2 + $left_S4 + 6 * $I_L1218_98, 0)
 1219.                         $I_L1219_72 = 0
 1219. !dir$ ivdep
 1219.                         do
 1219.                            pol(1 + $I_L1219_72) = x(1 + $I_L1219_72) * $SCA_auxpoly1_I6 * p1(1 + $I_L1219_72) + $SCA_auxpoly2_I7 * p0(1 + $I_L1219_72)
 1219.                            $I_L1219_72 = 1 + $I_L1219_72
 1219.                            if ( $I_L1219_72 >= $F_A60 ) exit
 1219.                         enddo
 1219.                      endif
 1220.                      $F_A61 = t$105
 1220.                      if ( t$105 > 0 ) then
 1220.                         $SCA_auxpoly1_I8 = (auxpoly1%base_addr)(3 + $left_S4 + 6 * $I_L1218_98, 0)
 1220.                         $SCA_auxpoly2_I9 = (auxpoly2%base_addr)(3 + $left_S4 + 6 * $I_L1218_98, 0)
 1220.                         $I_L1220_74 = 0
 1220. !dir$ ivdep
 1220.                         do
 1220.                            p0(1 + $I_L1220_74) = x(1 + $I_L1220_74) * $SCA_auxpoly1_I8 * pol(1 + $I_L1220_74) + $SCA_auxpoly2_I9 * p1(1 + $I_L1220_74)
 1220.                            $I_L1220_74 = 1 + $I_L1220_74
 1220.                            if ( $I_L1220_74 >= $F_A61 ) exit
 1220.                         enddo
 1220.                      endif
 1221.                      $F_A62 = t$105
 1221.                      if ( t$105 > 0 ) then
 1221.                         $SCA_auxpoly1_I10 = (auxpoly1%base_addr)(4 + $left_S4 + 6 * $I_L1218_98, 0)
 1221.                         $SCA_auxpoly2_I11 = (auxpoly2%base_addr)(4 + $left_S4 + 6 * $I_L1218_98, 0)
 1221.                         $I_L1221_76 = 0
 1221. !dir$ ivdep
 1221.                         do
 1221.                            p1(1 + $I_L1221_76) = x(1 + $I_L1221_76) * $SCA_auxpoly1_I10 * p0(1 + $I_L1221_76) + $SCA_auxpoly2_I11 * pol(1 + $I_L1221_76)
 1221.                            $I_L1221_76 = 1 + $I_L1221_76
 1221.                            if ( $I_L1221_76 >= $F_A62 ) exit
 1221.                         enddo
 1221.                      endif
 1222.                      $F_A63 = t$105
 1222.                      if ( t$105 > 0 ) then
 1222.                         $SCA_auxpoly1_I12 = (auxpoly1%base_addr)(5 + $left_S4 + 6 * $I_L1218_98, 0)
 1222.                         $SCA_auxpoly2_I13 = (auxpoly2%base_addr)(5 + $left_S4 + 6 * $I_L1218_98, 0)
 1222.                         $I_L1222_78 = 0
 1222. !dir$ ivdep
 1222.                         do
 1222.                            pol(1 + $I_L1222_78) = x(1 + $I_L1222_78) * $SCA_auxpoly1_I12 * p1(1 + $I_L1222_78) + $SCA_auxpoly2_I13 * p0(1 + $I_L1222_78)
 1222.                            $I_L1222_78 = 1 + $I_L1222_78
 1222.                            if ( $I_L1222_78 >= $F_A63 ) exit
 1222.                         enddo
 1222.                      endif
 1223.                      $F_A64 = t$105
 1223.                      if ( t$105 > 0 ) then
 1223.                         $SCA_auxpoly1_I14 = (auxpoly1%base_addr)(6 + $left_S4 + 6 * $I_L1218_98, 0)
 1223.                         $SCA_auxpoly2_I15 = (auxpoly2%base_addr)(6 + $left_S4 + 6 * $I_L1218_98, 0)
 1223.                         $I_L1223_80 = 0
 1223. !dir$ ivdep
 1223.                         do
 1223.                            p0(1 + $I_L1223_80) = x(1 + $I_L1223_80) * $SCA_auxpoly1_I14 * pol(1 + $I_L1223_80) + $SCA_auxpoly2_I15 * p1(1 + $I_L1223_80)
 1223.                            $I_L1223_80 = 1 + $I_L1223_80
 1223.                            if ( $I_L1223_80 >= $F_A64 ) exit
 1223.                         enddo
 1223.                      endif
 1224.                      $F_A65 = t$105
 1224.                      if ( t$105 > 0 ) then
 1224.                         $SCA_auxpoly1_I16 = (auxpoly1%base_addr)(7 + $left_S4 + 6 * $I_L1218_98, 0)
 1224.                         $SCA_auxpoly2_I17 = (auxpoly2%base_addr)(7 + $left_S4 + 6 * $I_L1218_98, 0)
 1224.                         $I_L1224_82 = 0
 1224. !dir$ ivdep
 1224.                         do
 1224.                            p1(1 + $I_L1224_82) = x(1 + $I_L1224_82) * $SCA_auxpoly1_I16 * p0(1 + $I_L1224_82) + $SCA_auxpoly2_I17 * pol(1 + $I_L1224_82)
 1224.                            $I_L1224_82 = 1 + $I_L1224_82
 1224.                            if ( $I_L1224_82 >= $F_A65 ) exit
 1224.                         enddo
 1224.                      endif
 1225.                      $I_L1218_98 = 1 + $I_L1218_98
 1218.                      if ( $I_L1218_98 >= $t_S7 ) exit
 1218.                   enddo
 1218.                endif
 1226.                $F_A66 = t$105
 1226.                if ( t$105 > 0 ) then
 1226.                   $I_L1226_84 = 0
 1226. !dir$ ivdep
 1226.                   do
 1226.                      xc(1 + $I_L1226_84) = ( p1(1 + $I_L1226_84) * ( 1.0 + -( x(1 + $I_L1226_84) * x(1 + $I_L1226_84) ) ) * 1.0/( real( degree, 8 ) * ( p0(1 + $I_L1226_84) + -( x(1 + $I_L1226_84) * p1(1 + $I_L1226_84) ) ) ) )
 1226.                      $I_L1226_84 = 1 + $I_L1226_84
 1226.                      if ( $I_L1226_84 >= $F_A66 ) exit
 1226.                   enddo
 1226.                endif
 1227.                $F_A67 = t$105
 1227.                if ( t$105 > 0 ) then
 1227.                   $I_L1227_86 = 0
 1227. !dir$ ivdep
 1227.                   do
 1227.                      x(1 + $I_L1227_86) = x(1 + $I_L1227_86) + -xc(1 + $I_L1227_86)
 1227.                      $I_L1227_86 = 1 + $I_L1227_86
 1227.                      if ( $I_L1227_86 >= $F_A67 ) exit
 1227.                   enddo
 1227.                endif
 1228.                $Reduc_A68 = -inf39816339744828e-1
 1228.                $F_A70 = t$105
 1228.                if ( t$105 > 0 ) then
 1228.                   $I_L1228_88 = 0
 1228. !dir$ ivdep
 1228.                   do
 1228.                      $Reduc_A68 = max( $Reduc_A68, abs( ( xc(1 + $I_L1228_88) * 1.0/x(1 + $I_L1228_88) ) ) )
 1228.                      $I_L1228_88 = 1 + $I_L1228_88
 1228.                      if ( $I_L1228_88 >= $F_A70 ) exit
 1228.                   enddo
 1228.                endif
 1228.                if ( $Reduc_A68 < 2.2204460492503131e-14 ) exit
 1228.             enddo
 1229.             $F_A71 = t$105
 1229.             if ( t$105 > 0 ) then
 1229.                $SC_gaussweights_I24 = gaussweights%dim_1%EX
 1229.                $SC_gaussweights_I25 = gaussweights%dim_1%LB
 1229.                $I_L1229_90 = 0
 1229. !dir$ ivdep
 1229.                do
 1229.                   (gaussweights%base_addr)(1 + $I_L1229_90, 0) = ( $scale_S9 * ( 1.0 + -( x(1 + $I_L1229_90) * x(1 + $I_L1229_90) ) ) * 1.0/( p0(1 + $I_L1229_90) * p0(1 + $I_L1229_90) ) )
 1229.                   $I_L1229_90 = 1 + $I_L1229_90
 1229.                   if ( $I_L1229_90 >= $F_A71 ) exit
 1229.                enddo
 1229.             endif
 1230.             $F_A72 = ( degree + degree / -2 )
 1230.             if ( degree + degree / -2 > 0 ) then
 1230.                $SC_gaussweights_I24 = gaussweights%dim_1%EX
 1230.                $SC_gaussweights_I25 = gaussweights%dim_1%LB
 1230.                $I_L1230_92 = 0
 1230. !dir$ ivdep
 1230.                do
 1230.                   (gaussweights%base_addr)(1 + $I_L1230_92 + degree / 2, 0) = (gaussweights%base_addr)(degree / 2 + -$I_L1230_92, 0)
 1230.                   $I_L1230_92 = 1 + $I_L1230_92
 1230.                   if ( $I_L1230_92 >= $F_A72 ) exit
 1230.                enddo
 1230.             endif
 1230.    20       continue
 1236.             $F_A73 = t$105
 1236.             if ( t$105 > 0 ) then
 1236.                $SC_cosgausscolat_I26 = cosgausscolat%dim_1%EX
 1236.                $SC_cosgausscolat_I27 = cosgausscolat%dim_1%LB
 1236.                $I_L1236_94 = 0
 1236. !dir$ ivdep
 1236.                do
 1236.                   (cosgausscolat%base_addr)($SC_cosgausscolat_I27 + $I_L1236_94, 0) = x(1 + $I_L1236_94)
 1236.                   $I_L1236_94 = 1 + $I_L1236_94
 1236.                   if ( $I_L1236_94 >= $F_A73 ) exit
 1236.                enddo
 1236.             endif
 1107.             $_allo_P26(0) = 0x3000000000001L
 1107.             $_allo_P26(1) = loc( xsearch )
 1107.             $_allo_P26(2) = loc( mask )
 1107.             $_allo_P26(3) = loc( fsearch )
 1107.             call _dealloc( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
 1104.             _free( t$354 )
 1104.          endif
 1104.       endif
 1104.    30 continue
 1238.       return
 1238.       end
 1238.       
 1249.       
 1249.       subroutine iminv( a, n, d, l, m )
 1249.       t$123 = n
 1253.       t$372 = _zla( 0, n )
 1265.       d = 1.0
 1267.       if ( n > 0 ) then
 1267.          $I_L1267_133 = 0
 1267.          do
 1269.             l(1 + $I_L1267_133) = ( 1 + $I_L1267_133 )
 1270.             m(1 + $I_L1267_133) = ( 1 + $I_L1267_133 )
 1272.             $biga_S4 = a(1 + $I_L1267_133 + n * $I_L1267_133)
 1273.             $I_L1273_125 = 0
 1273.             do
 1275.                $I_L1275_99 = 0
 1275. !dir$ unroll 4
 1275.                do
 1277.                   if ( abs( $biga_S4 ) < abs( a(1 + $I_L1275_99 + $I_L1267_133 + n * $I_L1273_125 + n * $I_L1267_133) ) ) then
 1278.                      $biga_S4 = a(1 + $I_L1275_99 + $I_L1267_133 + n * $I_L1273_125 + n * $I_L1267_133)
 1279.                      l(1 + $I_L1267_133) = ( 1 + $I_L1275_99 + $I_L1267_133 )
 1280.                      m(1 + $I_L1267_133) = ( 1 + $I_L1273_125 + $I_L1267_133 )
 1280.                   endif
 1282.                   $I_L1275_99 = 1 + $I_L1275_99
 1281.                   if ( $I_L1275_99 >= n + -$I_L1267_133 ) exit
 1281.                enddo
 1283.                $I_L1273_125 = 1 + $I_L1273_125
 1282.                if ( $I_L1273_125 >= n + -$I_L1267_133 ) exit
 1282.             enddo
 1287.             $j_S5 = l(1 + $I_L1267_133)
 1288.             if ( $j_S5 > ( 1 + $I_L1267_133 ) ) then
 1291.                $I_L1291_101 = 0
 1291. !dir$ unroll 4
 1291.                do
 1293.                   $hold_S7 = -a(1 + $I_L1267_133 + n * $I_L1291_101)
 1295.                   a(1 + $I_L1267_133 + n * $I_L1291_101) = a($j_S5 + n * $I_L1291_101)
 1296.                   a($j_S5 + n * $I_L1291_101) = $hold_S7
 1297.                   $I_L1291_101 = 1 + $I_L1291_101
 1291.                   if ( $I_L1291_101 >= n ) exit
 1291.                enddo
 1291.             endif
 1302.             $i_S9 = m(1 + $I_L1267_133)
 1303.             if ( $i_S9 > ( 1 + $I_L1267_133 ) ) then
 1306.                $I_L1306_103 = 0
 1306. !dir$ ivdep
 1306.                do
 1309.                   $hold_S11 = -a(1 + $I_L1306_103 + n * $I_L1267_133)
 1310.                   a(1 + $I_L1306_103 + n * $I_L1267_133) = a(1 + $I_L1306_103 + -n + n * $i_S9)
 1311.                   a(1 + $I_L1306_103 + -n + n * $i_S9) = $hold_S11
 1312.                   $I_L1306_103 = 1 + $I_L1306_103
 1306.                   if ( $I_L1306_103 >= n ) exit
 1306.                enddo
 1306.             endif
 1318.             if ( $biga_S4 == 0.0 ) then
 1319.                d = 0.0
 1319.                goto 110
 1319.             endif
 1322.             $I_L1322_55 = 0
 1327.             if ( 0 >= $I_L1267_133 ) then
 1327.                goto 10
 1327.             else
 1322.                $I_L1322_105 = 0
 1322. !dir$ ivdep
 1322.                do
 1325.                   a(1 + $I_L1322_105 + n * $I_L1267_133) = -( a(1 + $I_L1322_105 + n * $I_L1267_133) * 1.0/$biga_S4 )
 1327.                   $I_L1322_105 = 1 + $I_L1322_105
 1326.                   if ( $I_L1322_105 >= min( $I_L1267_133, n ) ) exit
 1326.                enddo
 1327.                $I_L1322_55 = min( $I_L1267_133, n )
 1327.                if ( $I_L1267_133 < n ) then
 1327.    10             continue
 1327.                   if ( $I_L1267_133 + -$I_L1322_55 == 0 ) then
 1327.                      $I_L1322_55 = 1 + $I_L1322_55
 1327.                      if ( $I_L1322_55 < n ) then
 1327.                         goto 20
 1327.                      endif
 1327.                   else
 1327.    20                continue
 1322.                      $I_L1322_123 = 0
 1322. !dir$ ivdep
 1322.                      do
 1325.                         a(1 + $I_L1322_55 + $I_L1322_123 + n * $I_L1267_133) = -( a(1 + $I_L1322_55 + $I_L1322_123 + n * $I_L1267_133) * 1.0/$biga_S4 )
 1327.                         $I_L1322_123 = 1 + $I_L1322_123
 1326.                         if ( $I_L1322_123 >= n + -$I_L1322_55 ) exit
 1326.                      enddo
 1326.                   endif
 1326.                endif
 1326.             endif
 1331.             $I_L1331_67 = 0
 1342.             if ( 0 >= $I_L1267_133 ) then
 1342.                goto 30
 1342.             else
 1331.                $I_L1331_127 = 0
 1331.                do
 1335.                   $I_L1335_107 = 0
 1335. !dir$ unroll 4
 1335.                   do
 1340.                      a(1 + $I_L1331_127 + n * $I_L1335_107) = a(1 + $I_L1331_127 + n * $I_L1335_107) + a(1 + $I_L1331_127 + n * $I_L1267_133) * a(1 + $I_L1267_133 + n * $I_L1335_107)
 1341.                      $I_L1335_107 = 1 + $I_L1335_107
 1341.                      if ( $I_L1335_107 >= min( $I_L1267_133, n ) ) exit
 1341.                   enddo
 1341.                   $I_L1335_57 = min( $I_L1267_133, n )
 1341.                   if ( $I_L1267_133 < n ) then
 1341.                      if ( $I_L1267_133 + -min( $I_L1267_133, n ) == 0 ) then
 1341.                         $I_L1335_57 = 1 + min( $I_L1267_133, n )
 1341.                         if ( 1 + min( $I_L1267_133, n ) < n ) then
 1341.                            goto 70
 1341.                         endif
 1341.                      else
 1341.    70                   continue
 1335.                         $I_L1335_117 = 0
 1335. !dir$ unroll 4
 1335.                         do
 1340.                            a(1 + $I_L1331_127 + n * $I_L1335_57 + n * $I_L1335_117) = a(1 + $I_L1331_127 + n * $I_L1335_57 + n * $I_L1335_117) + a(1 + $I_L1331_127 + n * $I_L1267_133) * a(1 + $I_L1267_133 + n * $I_L1335_57 + n * $I_L1335_117)
 1341.                            $I_L1335_117 = 1 + $I_L1335_117
 1341.                            if ( $I_L1335_117 >= n + -$I_L1335_57 ) exit
 1341.                         enddo
 1341.                      endif
 1341.                   endif
 1342.                   $I_L1331_127 = 1 + $I_L1331_127
 1341.                   if ( $I_L1331_127 >= min( $I_L1267_133, n ) ) exit
 1341.                enddo
 1342.                $I_L1331_67 = min( $I_L1267_133, n )
 1342.                if ( $I_L1267_133 < n ) then
 1342.    30             continue
 1342.                   if ( $I_L1267_133 + -$I_L1331_67 == 0 ) then
 1342.                      $I_L1331_67 = 1 + $I_L1331_67
 1342.                      if ( $I_L1331_67 < n ) then
 1342.                         goto 40
 1342.                      endif
 1342.                   else
 1342.    40                continue
 1331.                      $I_L1331_131 = 0
 1331.                      do
 1335.                         $I_L1335_57 = 0
 1341.                         if ( 0 >= $I_L1267_133 ) then
 1341.                            goto 50
 1341.                         else
 1335.                            $I_L1335_121 = 0
 1335. !dir$ unroll 4
 1335.                            do
 1340.                               a(1 + $I_L1331_67 + $I_L1331_131 + n * $I_L1335_121) = a(1 + $I_L1331_67 + $I_L1331_131 + n * $I_L1335_121) + a(1 + $I_L1331_67 + $I_L1331_131 + n * $I_L1267_133) * a(1 + $I_L1267_133 + n * $I_L1335_121)
 1341.                               $I_L1335_121 = 1 + $I_L1335_121
 1341.                               if ( $I_L1335_121 >= min( $I_L1267_133, n ) ) exit
 1341.                            enddo
 1341.                            $I_L1335_57 = min( $I_L1267_133, n )
 1341.                            if ( $I_L1267_133 < n ) then
 1341.    50                         continue
 1341.                               if ( $I_L1267_133 + -$I_L1335_57 == 0 ) then
 1341.                                  $I_L1335_57 = 1 + $I_L1335_57
 1341.                                  if ( $I_L1335_57 < n ) then
 1341.                                     goto 60
 1341.                                  endif
 1341.                               else
 1341.    60                            continue
 1335.                                  $I_L1335_119 = 0
 1335. !dir$ unroll 4
 1335.                                  do
 1340.                                     a(1 + $I_L1331_67 + $I_L1331_131 + n * $I_L1335_57 + n * $I_L1335_119) = a(1 + $I_L1331_67 + $I_L1331_131 + n * $I_L1335_57 + n * $I_L1335_119) + a(1 + $I_L1331_67 + $I_L1331_131 + n * $I_L1267_133) * a(1 + $I_L1267_133 + n * $I_L1335_57 + n * $I_L1335_119)
 1341.                                     $I_L1335_119 = 1 + $I_L1335_119
 1341.                                     if ( $I_L1335_119 >= n + -$I_L1335_57 ) exit
 1341.                                  enddo
 1341.                               endif
 1341.                            endif
 1341.                         endif
 1342.                         $I_L1331_131 = 1 + $I_L1331_131
 1341.                         if ( $I_L1331_131 >= n + -$I_L1331_67 ) exit
 1341.                      enddo
 1341.                   endif
 1341.                endif
 1341.             endif
 1347.             $I_L1347_59 = 0
 1351.             if ( 0 >= $I_L1267_133 ) then
 1351.                goto 80
 1351.             else
 1347.                $I_L1347_109 = 0
 1347. !dir$ ivdep
 1347.                do
 1350.                   a(1 + $I_L1267_133 + n * $I_L1347_109) = ( a(1 + $I_L1267_133 + n * $I_L1347_109) * 1.0/$biga_S4 )
 1351.                   $I_L1347_109 = 1 + $I_L1347_109
 1351.                   if ( $I_L1347_109 >= min( $I_L1267_133, n ) ) exit
 1351.                enddo
 1351.                $I_L1347_59 = min( $I_L1267_133, n )
 1351.                if ( $I_L1267_133 < n ) then
 1351.    80             continue
 1351.                   if ( $I_L1267_133 + -$I_L1347_59 == 0 ) then
 1351.                      $I_L1347_59 = 1 + $I_L1347_59
 1351.                      if ( $I_L1347_59 < n ) then
 1351.                         goto 90
 1351.                      endif
 1351.                   else
 1351.    90                continue
 1347.                      $I_L1347_115 = 0
 1347. !dir$ ivdep
 1347.                      do
 1350.                         a(1 + $I_L1267_133 + n * $I_L1347_59 + n * $I_L1347_115) = ( a(1 + $I_L1267_133 + n * $I_L1347_59 + n * $I_L1347_115) * 1.0/$biga_S4 )
 1351.                         $I_L1347_115 = 1 + $I_L1347_115
 1351.                         if ( $I_L1347_115 >= n + -$I_L1347_59 ) exit
 1351.                      enddo
 1351.                   endif
 1351.                endif
 1351.             endif
 1359.             a(1 + $I_L1267_133 + n * $I_L1267_133) = 1.0/$biga_S4
 1355.             d = d * $biga_S4
 1360.             $I_L1267_133 = 1 + $I_L1267_133
 1351.             if ( $I_L1267_133 >= n ) exit
 1351.          enddo
 1351.          goto 100
 1351.       else
 1351.   100    continue
 1367.          if ( -1 + n > 0 ) then
 1365.             $I_k_129 = 0
 1365.             do
 1368.                $i_S19 = l(-1 + n + -$I_k_129)
 1369.                if ( $i_S19 > ( -1 + n + -$I_k_129 ) ) then
 1373.                   $I_L1373_111 = 0
 1373. !dir$ ivdep
 1373.                   do
 1375.                      $hold_S21 = a(1 + $I_L1373_111 + -( n * $I_k_129 ) + n * n + -2 * n)
 1377.                      a(1 + $I_L1373_111 + -( n * $I_k_129 ) + n * n + -2 * n) = -a(1 + $I_L1373_111 + -n + n * $i_S19)
 1378.                      a(1 + $I_L1373_111 + -n + n * $i_S19) = $hold_S21
 1379.                      $I_L1373_111 = 1 + $I_L1373_111
 1373.                      if ( $I_L1373_111 >= n ) exit
 1373.                   enddo
 1373.                endif
 1381.                $j_S22 = m(-1 + n + -$I_k_129)
 1382.                if ( $j_S22 > ( -1 + n + -$I_k_129 ) ) then
 1385.                   $I_L1385_113 = 0
 1385.                   if ( ( mod( 1 + $j_S22 + $I_k_129 + -n, n ) == 0 .and. abs( ( 1 + $j_S22 + $I_k_129 + -n ) / n ) <= -1 + n ) /= 0 ) then
 1385.                      do
 1387.                         $hold_S24 = a(-1 + n + -$I_k_129 + n * $I_L1385_113)
 1389.                         a(-1 + n + -$I_k_129 + n * $I_L1385_113) = -a($j_S22 + n * $I_L1385_113)
 1390.                         a($j_S22 + n * $I_L1385_113) = $hold_S24
 1391.                         $I_L1385_113 = 1 + $I_L1385_113
 1385.                         if ( $I_L1385_113 >= n ) exit
 1385.                      enddo
 1385.                   else
 1385. !dir$ ivdep safevl = 2
 1385.                      do
 1387.                         $hold_S24 = a(-1 + n + -$I_k_129 + n * $I_L1385_113)
 1389.                         a(-1 + n + -$I_k_129 + n * $I_L1385_113) = -a($j_S22 + n * $I_L1385_113)
 1390.                         a($j_S22 + n * $I_L1385_113) = $hold_S24
 1391.                         $I_L1385_113 = 1 + $I_L1385_113
 1385.                         if ( $I_L1385_113 >= n ) exit
 1385.                      enddo
 1385.                   endif
 1385.                endif
 1367.                $I_k_129 = 1 + $I_k_129
 1365.                if ( $I_k_129 >= -1 + n ) exit
 1365.             enddo
 1365.          endif
 1365.       endif
 1365.   110 continue
 1394.       return
 1394.       end
 1394.       
 1395.       
 1395.       subroutine balanc( nm, n, a, low, igh, scal )
 1395.       $FROM_S0 = 1
 1395.       $FROM_S1 = 1
 1395.       t$125 = nm
 1401.       t$373 = _zla( 0, nm )
 1395.       t$374 = _zla( 0, nm )
 1395.       t$375 = _zla( 0, nm )
 1414.       $k_S5 = 1
 1415.       $l_S2 = n
 1415.       do
 1420.          if ( $FROM_S0 /= 1 ) then
 1420.             $FROM_S1 = 0
 1420.          endif
 1420.          do
 1420.             if ( $FROM_S1 /= 1 ) then
 1420.                scal(m) = real( j, 8 )
 1421.                if ( j + -m /= 0 ) then
 1423.                   if ( $l_S2 > 0 ) then
 1423.                      $I_L1423_71 = 0
 1423. !dir$ ivdep
 1423.                      do
 1424.                         $f_S4 = a(1 + $I_L1423_71, j)
 1425.                         a(1 + $I_L1423_71, j) = a(1 + $I_L1423_71, m)
 1426.                         a(1 + $I_L1423_71, m) = $f_S4
 1427.                         $I_L1423_71 = 1 + $I_L1423_71
 1423.                         if ( $I_L1423_71 >= $l_S2 ) exit
 1423.                      enddo
 1423.                   endif
 1429.                   if ( n + -$k_S5 >= 0 ) then
 1429.                      $I_L1429_73 = 0
 1429. !dir$ ivdep
 1429.                      do
 1430.                         $f_S7 = a(j, $k_S5 + $I_L1429_73)
 1431.                         a(j, $k_S5 + $I_L1429_73) = a(m, $k_S5 + $I_L1429_73)
 1432.                         a(m, $k_S5 + $I_L1429_73) = $f_S7
 1433.                         $I_L1429_73 = 1 + $I_L1429_73
 1429.                         if ( $I_L1429_73 >= 1 + n + -$k_S5 ) exit
 1429.                      enddo
 1429.                   endif
 1429.                endif
 1435.                if ( iexc == 1 .orelse. iexc /= 2 ) then
 1439.                   if ( $l_S2 /= 1 ) then
 1440.                      $l_S2 = -1 + $l_S2
 1440.                      goto 10
 1440.                   endif
 1440.                else
 1461.                   $k_S5 = 1 + $k_S5
 1461.                   goto 20
 1461.                endif
 1461.             else
 1461.    10          continue
 1444.                if ( $l_S2 <= 0 ) then
 1444.    20             continue
 1463.                   if ( $l_S2 + -$k_S5 >= 0 ) then
 1463.                      $I_L1463_91 = 0
 1463.                      do
 1465.                         $I_L1465_77 = 0
 1465. !dir$ ivdep
 1465.                         do
 1466.                            if ( $I_L1465_77 + -$I_L1463_91 == 0 .orelse. a($k_S5 + $I_L1465_77, $k_S5 + $I_L1463_91) == 0.0 ) then
 1468.                               $I_L1465_77 = 1 + $I_L1465_77
 1468.                            else
 1468.                            endif
 1468.                            if ( $I_L1465_77 >= 1 + $l_S2 + -$k_S5 ) exit
 1468.                         enddo
 1463.                         j = ( $k_S5 + $I_L1463_91 )
 1468.                         $FROM_S0 = 0
 1470.                         m = $k_S5
 1471.                         iexc = 2
 1471.                      else
 1477.                         if ( $l_S2 + -$k_S5 >= 0 ) then
 1477.                            $I_L1477_79 = 0
 1477. !dir$ ivdep
 1477.                            do
 1478.                               scal($k_S5 + $I_L1477_79) = 1.0
 1479.                               $I_L1477_79 = 1 + $I_L1477_79
 1477.                               if ( $I_L1477_79 >= 1 + $l_S2 + -$k_S5 ) exit
 1477.                            enddo
 1477.                            do
 1483.                               $noconv_S21 = .false.
 1485.                               $I_L1485_93 = 0
 1485.                               do
 1486.                                  c = 0.0
 1487.                                  r = 0.0
 1489.                                  $I_L1489_54 = 0
 1493.                                  if ( 0 >= $I_L1485_93 ) then
 1485.                                     goto 30
 1485.                                  else
 1489.                                     $I_L1489_81 = 0
 1489. !dir$ ivdep
 1489.                                     do
 1492.                                        r = r + abs( a($k_S5 + $I_L1485_93, $k_S5 + $I_L1489_81) )
 1491.                                        c = c + abs( a($k_S5 + $I_L1489_81, $k_S5 + $I_L1485_93) )
 1493.                                        $I_L1489_81 = 1 + $I_L1489_81
 1493.                                        if ( $I_L1489_81 >= min( $I_L1485_93, 1 + $l_S2 + -$k_S5 ) ) exit
 1493.                                     enddo
 1493.                                     $I_L1489_54 = min( $I_L1485_93, 1 + $l_S2 + -$k_S5 )
 1493.                                     if ( $I_L1485_93 < 1 + $l_S2 + -$k_S5 ) then
 1493.    30                                  continue
 1493.                                        if ( $I_L1485_93 + -$I_L1489_54 == 0 ) then
 1493.                                           $I_L1489_54 = 1 + $I_L1489_54
 1493.                                           if ( $I_L1489_54 < 1 + $l_S2 + -$k_S5 ) then
 1493.                                              goto 40
 1493.                                           endif
 1493.                                        else
 1493.    40                                     continue
 1489.                                           $I_L1489_87 = 0
 1489. !dir$ ivdep
 1489.                                           do
 1492.                                              r = r + abs( a($k_S5 + $I_L1485_93, $k_S5 + $I_L1489_54 + $I_L1489_87) )
 1491.                                              c = c + abs( a($k_S5 + $I_L1489_54 + $I_L1489_87, $k_S5 + $I_L1485_93) )
 1493.                                              $I_L1489_87 = 1 + $I_L1489_87
 1493.                                              if ( $I_L1489_87 >= 1 + $l_S2 + -$k_S5 + -$I_L1489_54 ) exit
 1493.                                           enddo
 1493.                                        endif
 1493.                                     endif
 1493.                                  endif
 1497.                                  if ( c /= 0.0 ) then
 1497.                                     if ( r /= 0.0 ) then
 1498.                                        $g_S15 = ( 5.0e-1 * r )
 1499.                                        f = 1.0
 1500.                                        $s_S17 = c + r
 1500.                                        do
 1501.                                           if ( c >= $g_S15 ) goto 220
 1503.                                           c = 4.0 * c
 1503.                                        enddo
 1503.   220                                  continue
 1505.                                        $g_S16 = 2.0 * r
 1505.                                        do
 1506.                                           if ( c < $g_S16 ) goto 240
 1508.                                           c = ( 2.5e-1 * c )
 1508.                                        enddo
 1508.   240                                  continue
 1513.                                        if ( ( ( c + r ) * 1.0/f ) < 9.4999999999999996e-1 * $s_S17 ) then
 1514.                                           $g_S19 = 1.0/f
 1516.                                           $noconv_S21 = .true.
 1515.                                           scal($k_S5 + $I_L1485_93) = f * scal($k_S5 + $I_L1485_93)
 1518.                                           if ( n + -$k_S5 >= 0 ) then
 1518.                                              $I_L1518_83 = 0
 1518. !dir$ ivdep
 1518.                                              do
 1519.                                                 a($k_S5 + $I_L1485_93, $k_S5 + $I_L1518_83) = $g_S19 * a($k_S5 + $I_L1485_93, $k_S5 + $I_L1518_83)
 1520.                                                 $I_L1518_83 = 1 + $I_L1518_83
 1518.                                                 if ( $I_L1518_83 >= 1 + n + -$k_S5 ) exit
 1518.                                              enddo
 1518.                                           endif
 1522.                                           if ( $l_S2 > 0 ) then
 1522.                                              $I_L1522_85 = 0
 1522. !dir$ ivdep
 1522.                                              do
 1523.                                                 a(1 + $I_L1522_85, $k_S5 + $I_L1485_93) = f * a(1 + $I_L1522_85, $k_S5 + $I_L1485_93)
 1524.                                                 $I_L1522_85 = 1 + $I_L1522_85
 1522.                                                 if ( $I_L1522_85 >= $l_S2 ) exit
 1522.                                              enddo
 1522.                                           endif
 1522.                                        endif
 1522.                                     endif
 1522.                                  endif
 1526.                                  $I_L1485_93 = 1 + $I_L1485_93
 1526.                                  if ( $I_L1485_93 >= 1 + $l_S2 + -$k_S5 ) exit
 1526.                               enddo
 1526.                               if ( $noconv_S21 == .false. ) exit
 1526.                            enddo
 1526.                         endif
 1526.                      endif
 1526.                      goto 280
 1526.                   endif
 1444.                   $I_L1444_89 = 0
 1444.                   do
 1447.                      $I_L1447_75 = 0
 1447. !dir$ ivdep
 1447.                      do
 1448.                         if ( $I_L1447_75 + $I_L1444_89 + -$l_S2 == -1 .orelse. a($l_S2 + -$I_L1444_89, 1 + $I_L1447_75) == 0.0 ) then
 1450.                            $I_L1447_75 = 1 + $I_L1447_75
 1450.                         else
 1450.                         endif
 1450.                         if ( $I_L1447_75 >= $l_S2 ) exit
 1450.                      enddo
 1445.                      j = ( $l_S2 + -$I_L1444_89 )
 1450.                      $FROM_S1 = 0
 1452.                      m = $l_S2
 1453.                      iexc = 1
 1453.                   endif
 1453.   280             continue
 1530.                   low = $k_S5
 1531.                   igh = $l_S2
 1534.                   return
 1534.       end
 1534.       
 1535.       
 1535.       subroutine balbak( nm, n, low, igh, scal, m, z )
 1535.       t$127 = n
 1543.       t$376 = _zla( 0, n )
 1535.       t$126 = nm
 1542.       t$377 = _zla( 0, nm )
 1535.       t$378 = _zla( 0, nm )
 1535.       t$379 = _zla( 0, n ) * _zla( 0, nm )
 1548.       if ( m /= 0 ) then
 1549.          if ( low + -igh /= 0 ) then
 1551.             if ( igh + -low >= 0 ) then
 1557.                if ( m > 0 ) then
 1551.                   $I_L1551_20 = 0
 1551. !dir$ ivdep
 1551.                   do
 1552.                      $s_S2 = scal(low + $I_L1551_20)
 1557.                      $I_L1557_16 = 0
 1557. !dir$ unroll 4
 1557.                      do
 1558.                         z(low + $I_L1551_20, 1 + $I_L1557_16) = $s_S2 * z(low + $I_L1551_20, 1 + $I_L1557_16)
 1559.                         $I_L1557_16 = 1 + $I_L1557_16
 1557.                         if ( $I_L1557_16 >= m ) exit
 1557.                      enddo
 1561.                      $I_L1551_20 = 1 + $I_L1551_20
 1559.                      if ( $I_L1551_20 >= 1 + igh + -low ) exit
 1559.                   enddo
 1559.                endif
 1559.             endif
 1559.          endif
 1566.          if ( n > 0 ) then
 1573.             if ( m > 0 ) then
 1566.                $I_L1566_22 = 0
 1579.                if ( 0 >= -1 + low ) then
 1579.                   goto 10
 1579.                else
 1579.                   if ( 0 > -1 + igh ) then
 1579.                      goto 40
 1579.                   else
 1566.                      $I_L1566_30 = 0
 1566.                      do
 1570.                         $k_S5 = int( scal(-1 + low + -$I_L1566_30) )
 1571.                         if ( $k_S5 + $I_L1566_30 + -low /= -1 ) then
 1573.                            $I_L1573_18 = 0
 1573. !dir$ ivdep
 1573.                            do
 1574.                               $s_S7 = z(-1 + low + -$I_L1566_30, 1 + $I_L1573_18)
 1575.                               z(-1 + low + -$I_L1566_30, 1 + $I_L1573_18) = z($k_S5, 1 + $I_L1573_18)
 1576.                               z($k_S5, 1 + $I_L1573_18) = $s_S7
 1577.                               $I_L1573_18 = 1 + $I_L1573_18
 1573.                               if ( $I_L1573_18 >= m ) exit
 1573.                            enddo
 1573.                         endif
 1579.                         $I_L1566_30 = 1 + $I_L1566_30
 1579.                         if ( $I_L1566_30 >= min( min( igh, -1 + low ), n ) ) exit
 1579.                      enddo
 1579.                      $I_L1566_22 = min( min( igh, -1 + low ), n )
 1579.                      if ( min( min( igh, -1 + low ), n ) < min( n, -1 + low ) ) then
 1579.    40                   continue
 1566.                         $I_L1566_38 = 0
 1566.                         do
 1570.                            $k_S5 = int( scal(-1 + low + -$I_L1566_22 + -$I_L1566_38) )
 1571.                            if ( $k_S5 + $I_L1566_22 + $I_L1566_38 + -low /= -1 ) then
 1573.                               $I_L1573_18 = 0
 1573. !dir$ ivdep
 1573.                               do
 1574.                                  $s_S7 = z(-1 + low + -$I_L1566_22 + -$I_L1566_38, 1 + $I_L1573_18)
 1575.                                  z(-1 + low + -$I_L1566_22 + -$I_L1566_38, 1 + $I_L1573_18) = z($k_S5, 1 + $I_L1573_18)
 1576.                                  z($k_S5, 1 + $I_L1573_18) = $s_S7
 1577.                                  $I_L1573_18 = 1 + $I_L1573_18
 1573.                                  if ( $I_L1573_18 >= m ) exit
 1573.                               enddo
 1573.                            endif
 1579.                            $I_L1566_38 = 1 + $I_L1566_38
 1579.                            if ( $I_L1566_38 >= min( n, -1 + low ) + -$I_L1566_22 ) exit
 1579.                         enddo
 1579.                         $I_L1566_22 = min( n, -1 + low )
 1579.                      endif
 1579.                   endif
 1579.                   if ( $I_L1566_22 < n ) then
 1579.    10                continue
 1579.                      if ( $I_L1566_22 > -1 + igh ) then
 1579.                         goto 20
 1579.                      else
 1579.                         if ( $I_L1566_22 >= -1 + low ) then
 1579.                            goto 30
 1579.                         else
 1566.                            $Trips02_N33 = min( min( igh, -1 + low ), n ) + -$I_L1566_22
 1579.                            $$I_L1566_22_N34 = $I_L1566_22
 1566.                            $I_L1566_32 = 0
 1566.                            do
 1570.                               $k_S5 = int( scal(1 + $I_L1566_22 + $I_L1566_32) )
 1571.                               if ( $k_S5 + -$I_L1566_22 + -$I_L1566_32 /= 1 ) then
 1573.                                  $I_L1573_18 = 0
 1573. !dir$ ivdep
 1573.                                  do
 1574.                                     $s_S7 = z(1 + $I_L1566_22 + $I_L1566_32, 1 + $I_L1573_18)
 1575.                                     z(1 + $I_L1566_22 + $I_L1566_32, 1 + $I_L1573_18) = z($k_S5, 1 + $I_L1573_18)
 1576.                                     z($k_S5, 1 + $I_L1573_18) = $s_S7
 1577.                                     $I_L1573_18 = 1 + $I_L1573_18
 1573.                                     if ( $I_L1573_18 >= m ) exit
 1573.                                  enddo
 1573.                               endif
 1579.                               $I_L1566_32 = 1 + $I_L1566_32
 1579.                               if ( $I_L1566_32 >= min( min( igh, -1 + low ), n ) + -$I_L1566_22 ) exit
 1579.                            enddo
 1579.                            $I_L1566_22 = min( min( igh, -1 + low ), n )
 1579.                            if ( $Trips02_N33 + $$I_L1566_22_N34 < min( n, igh ) ) then
 1579.    30                         continue
 1579.                               $I_L1566_22 = min( n, igh )
 1579.                            endif
 1579.                         endif
 1579.                         if ( $I_L1566_22 < n ) then
 1579.    20                      continue
 1566.                            $I_L1566_35 = 0
 1566.                            do
 1570.                               $k_S5 = int( scal(1 + $I_L1566_22 + $I_L1566_35) )
 1571.                               if ( $k_S5 + -$I_L1566_22 + -$I_L1566_35 /= 1 ) then
 1573.                                  $I_L1573_18 = 0
 1573. !dir$ ivdep
 1573.                                  do
 1574.                                     $s_S7 = z(1 + $I_L1566_22 + $I_L1566_35, 1 + $I_L1573_18)
 1575.                                     z(1 + $I_L1566_22 + $I_L1566_35, 1 + $I_L1573_18) = z($k_S5, 1 + $I_L1573_18)
 1576.                                     z($k_S5, 1 + $I_L1573_18) = $s_S7
 1577.                                     $I_L1573_18 = 1 + $I_L1573_18
 1573.                                     if ( $I_L1573_18 >= m ) exit
 1573.                                  enddo
 1573.                               endif
 1579.                               $I_L1566_35 = 1 + $I_L1566_35
 1579.                               if ( $I_L1566_35 >= n + -$I_L1566_22 ) exit
 1579.                            enddo
 1579.                         endif
 1579.                      endif
 1579.                   endif
 1579.                endif
 1579.             endif
 1579.          endif
 1579.       endif
 1582.       return
 1582.       end
 1582.       
 1583.       
 1583.       integer
 1583.       function hqr2( nm, n, low, igh, h, wr, wi, z, ierr, matz, machep, tol, t$129 )
 1583.       t$130 = nm
 1583.       t$131 = n
 1592.       t$380 = _zla( 0, nm )
 1583.       t$381 = _zla( 0, nm )
 1592.       t$382 = _zla( 0, n )
 1583.       t$383 = _zla( 0, nm ) * _zla( 0, n )
 1606.       ierr = 0
 1607.       norm = 0.0
 1608.       $k_S0 = 1
 1612.       if ( n > 0 ) then
 1612.          $I_L1612_205 = 0
 1612. !dir$ loop_info (automatic) cache_nt( wi, wr )
 1612.          do
 1614.             if ( n + -$k_S0 >= 0 ) then
 1614.                $I_L1614_165 = 0
 1614. !dir$ ivdep
 1614.                do
 1615.                   if ( abs( h(1 + $I_L1612_205, $k_S0 + $I_L1614_165) ) < tol ) then
 1615.                      h(1 + $I_L1612_205, $k_S0 + $I_L1614_165) = tol
 1615.                   endif
 1616.                   norm = norm + abs( h(1 + $I_L1612_205, $k_S0 + $I_L1614_165) )
 1617.                   $I_L1614_165 = 1 + $I_L1614_165
 1615.                   if ( $I_L1614_165 >= 1 + n + -$k_S0 ) exit
 1615.                enddo
 1615.             endif
 1619.             $k_S0 = ( 1 + $I_L1612_205 )
 1620.             if ( ( 1 + $I_L1612_205 ) < low ) then
 1617.                goto 10
 1620.             else if ( ( 1 + $I_L1612_205 ) > igh ) then
 1620.    10          continue
 1621.                wr(1 + $I_L1612_205) = h(1 + $I_L1612_205, 1 + $I_L1612_205)
 1622.                wi(1 + $I_L1612_205) = 0.0
 1622.             endif
 1623.             $I_L1612_205 = 1 + $I_L1612_205
 1623.             if ( $I_L1612_205 >= n ) exit
 1623.          enddo
 1623.       endif
 1625.       $en_S3 = igh
 1626.       t = 0.0
 1626. !dir$ loop_info (automatic) cache_nt( wi, wr, h )
 1626.       do
 1630. !dir$ loop_info (automatic) cache_nt( wi, wr, h )
 1630.          do
 1630.             if ( $en_S3 < low ) then
 1840.                if ( matz /= 0 ) then
 1845.                   if ( norm /= 0.0 ) then
 1847.                      t$136 = nm
 1847.                      t$137 = n
 1847.                      t$384 = max( 0, nm )
 1847.                      t$385 = max( 0, nm )
 1847.                      t$386 = max( 0, n )
 1847.                      t$387 = max( 0, nm ) * max( 0, n )
 1847.                      if ( n > 0 ) then
 1847.                         $I_L1847_219 = 0
 1847.                         do
 1847.                            $p_S38 = wr(n + -$I_L1847_219)
 1847.                            $q_S37 = wi(n + -$I_L1847_219)
 1847.                            if ( $q_S37 < 0.0 ) then
 1847.                               $m_S53 = ( -1 + n + -$I_L1847_219 )
 1847.                               if ( abs( h(n + -$I_L1847_219, -1 + n + -$I_L1847_219) ) > abs( h(-1 + n + -$I_L1847_219, n + -$I_L1847_219) ) ) then
 1847.                                  h(-1 + n + -$I_L1847_219, -1 + n + -$I_L1847_219) = ( $q_S37 * 1.0/h(n + -$I_L1847_219, -1 + n + -$I_L1847_219) )
 1847.                                  $SCF_P19 = 1.0/h(n + -$I_L1847_219, -1 + n + -$I_L1847_219)
 1847.                                  h(-1 + n + -$I_L1847_219, n + -$I_L1847_219) = -( $SCF_P19 * ( h(n + -$I_L1847_219, n + -$I_L1847_219) + -$p_S38 ) )
 1847.                               else
 1847.                                  $t_S49 = -h(-1 + n + -$I_L1847_219, n + -$I_L1847_219)
 1847.                                  $LD_SPLT_P13 = h(-1 + n + -$I_L1847_219, -1 + n + -$I_L1847_219)
 1847.                                  h(-1 + n + -$I_L1847_219, -1 + n + -$I_L1847_219) = ( ( $q_S37 * $t_S49 ) * 1.0/( $q_S37 * $q_S37 + ( $LD_SPLT_P13 + -$p_S38 ) * ( $LD_SPLT_P13 + -$p_S38 ) ) )
 1847.                                  $t_S51 = -h(-1 + n + -$I_L1847_219, n + -$I_L1847_219)
 1847.                                  h(-1 + n + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/( $q_S37 * $q_S37 + ( -$p_S38 + ( ( $q_S37 * $t_S49 ) * 1.0/( $q_S37 * $q_S37 + ( $LD_SPLT_P13 + -$p_S38 ) * ( $LD_SPLT_P13 + -$p_S38 ) ) ) ) * ( -$p_S38 + ( ( $q_S37 * $t_S49 ) * 1.0/( $q_S37 * $q_S37 + ( $LD_SPLT_P13 + -$p_S38 ) * ( $LD_SPLT_P13 + -$p_S38 ) ) ) ) ) * ( $t_S51 * ( -$p_S38 + ( ( $q_S37 * $t_S49 ) * 1.0/( $q_S37 * $q_S37 + ( $LD_SPLT_P13 + -$p_S38 ) * ( $LD_SPLT_P13 + -$p_S38 ) ) ) ) ) )
 1847.                               endif
 1847.                               h(n + -$I_L1847_219, -1 + n + -$I_L1847_219) = 0.0
 1847.                               h(n + -$I_L1847_219, n + -$I_L1847_219) = 1.0
 1847.                               if ( n + -$I_L1847_219 /= 2 ) then
 1847.                                  if ( ( -2 + n + -$I_L1847_219 ) > 0 ) then
 1847.                                     $I_L1847_207 = 0
 1847.                                     do
 1847.                                        $w_S55 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -2 + n + -$I_L1847_207 + -$I_L1847_219) + -$p_S38
 1847.                                        ra = 0.0
 1847.                                        sa = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219)
 1847.                                        if ( ( -1 + n + -$m_S53 + -$I_L1847_219 ) >= 0 ) then
 1847.                                           $I_L1847_167 = 0
 1847. !dir$ ivdep
 1847.                                           do
 1847.                                              ra = ra + h(-2 + n + -$I_L1847_207 + -$I_L1847_219, $m_S53 + $I_L1847_167) * h($m_S53 + $I_L1847_167, -1 + n + -$I_L1847_219)
 1847.                                              sa = sa + h(-2 + n + -$I_L1847_207 + -$I_L1847_219, $m_S53 + $I_L1847_167) * h($m_S53 + $I_L1847_167, n + -$I_L1847_219)
 1847.                                              $I_L1847_167 = 1 + $I_L1847_167
 1847.                                              if ( $I_L1847_167 >= n + -$m_S53 + -$I_L1847_219 ) exit
 1847.                                           enddo
 1847.                                        endif
 1847.                                        if ( wi(-2 + n + -$I_L1847_207 + -$I_L1847_219) < 0.0 ) then
 1847.                                           zz = $w_S55
 1847.                                           r = ra
 1847.                                           s = sa
 1847.                                        else
 1847.                                           $m_S53 = ( -2 + n + -$I_L1847_207 + -$I_L1847_219 )
 1847.                                           if ( wi(-2 + n + -$I_L1847_207 + -$I_L1847_219) == 0.0 ) then
 1847.                                              h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219) = ( 1.0/( $q_S37 * $q_S37 + $w_S55 * $w_S55 ) * ( -( sa * $q_S37 ) + -( ra * $w_S55 ) ) )
 1847.                                              h(-2 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/( $q_S37 * $q_S37 + $w_S55 * $w_S55 ) * ( -( sa * $w_S55 ) + ra * $q_S37 ) )
 1847.                                           else
 1847.                                              $x_S56 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_207 + -$I_L1847_219)
 1847.                                              $y_S59 = h(-1 + n + -$I_L1847_207 + -$I_L1847_219, -2 + n + -$I_L1847_207 + -$I_L1847_219)
 1847.                                              $ar_S61 = -( zz * ra ) + sa * $q_S37 + r * $x_S56
 1847.                                              $ai_S60 = -( zz * sa ) + -( ra * $q_S37 ) + s * $x_S56
 1847.                                              $br_S57 = -( $q_S37 * $q_S37 ) + ( wr(-2 + n + -$I_L1847_207 + -$I_L1847_219) + -$p_S38 ) * ( wr(-2 + n + -$I_L1847_207 + -$I_L1847_219) + -$p_S38 ) + wi(-2 + n + -$I_L1847_207 + -$I_L1847_219) * wi(-2 + n + -$I_L1847_207 + -$I_L1847_219)
 1847.                                              $bi_S58 = 2.0 * $q_S37 * ( wr(-2 + n + -$I_L1847_207 + -$I_L1847_219) + -$p_S38 )
 1847.                                              if ( $br_S57 == 0.0 ) then
 1847.                                                 if ( $bi_S58 == 0.0 ) then
 1847.                                                    $br_S57 = norm * machep * ( abs( zz ) + abs( $q_S37 ) + abs( $w_S55 ) + abs( $x_S56 ) + abs( $y_S59 ) )
 1847.                                                 endif
 1847.                                              endif
 1847.                                              h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219) = ( 1.0/( $br_S57 * $br_S57 + $bi_S58 * $bi_S58 ) * ( $bi_S58 * $ai_S60 + $br_S57 * $ar_S61 ) )
 1847.                                              $t_S62 = ( 1.0/( $br_S57 * $br_S57 + $bi_S58 * $bi_S58 ) * ( -( $bi_S58 * $ar_S61 ) + $br_S57 * $ai_S60 ) )
 1847.                                              h(-2 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/( $br_S57 * $br_S57 + $bi_S58 * $bi_S58 ) * ( -( $bi_S58 * $ar_S61 ) + $br_S57 * $ai_S60 ) )
 1847.                                              if ( abs( $x_S56 ) > ( abs( zz ) + abs( $q_S37 ) ) ) then
 1847.                                                 $LD_SPLT_P14 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219)
 1847.                                                 h(-1 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219) = ( 1.0/$x_S56 * ( -ra + -( $w_S55 * $LD_SPLT_P14 ) + $q_S37 * $t_S62 ) )
 1847.                                                 $LD_SPLT_P15 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219)
 1847.                                                 h(-1 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/$x_S56 * ( -sa + -( $q_S37 * $LD_SPLT_P15 ) + -( $w_S55 * h(-2 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219) ) ) )
 1847.                                              else
 1847.                                                 $LD_SPLT_P16 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219)
 1847.                                                 h(-1 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219) = ( 1.0/( zz * zz + $q_S37 * $q_S37 ) * ( $q_S37 * ( -s + -( $y_S59 * $t_S62 ) ) + zz * ( -r + -( $y_S59 * $LD_SPLT_P16 ) ) ) )
 1847.                                                 $LD_SPLT_P18 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219)
 1847.                                                 $LD_SPLT_P17 = h(-2 + n + -$I_L1847_207 + -$I_L1847_219, -1 + n + -$I_L1847_219)
 1847.                                                 h(-1 + n + -$I_L1847_207 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/( zz * zz + $q_S37 * $q_S37 ) * ( $q_S37 * ( r + $y_S59 * $LD_SPLT_P17 ) + zz * ( -s + -( $y_S59 * $LD_SPLT_P18 ) ) ) )
 1847.                                              endif
 1847.                                           endif
 1847.                                        endif
 1847.                                        $I_L1847_207 = 1 + $I_L1847_207
 1847.                                        if ( $I_L1847_207 >= -2 + n + -$I_L1847_219 ) exit
 1847.                                     enddo
 1847.                                  endif
 1847.                               endif
 1847.                            else if ( $q_S37 == 0.0 ) then
 1847.                               $m_S40 = ( n + -$I_L1847_219 )
 1847.                               h(n + -$I_L1847_219, n + -$I_L1847_219) = 1.0
 1847.                               if ( n + -$I_L1847_219 /= 1 ) then
 1847.                                  if ( ( -1 + n + -$I_L1847_219 ) > 0 ) then
 1847.                                     $I_L1847_209 = 0
 1847.                                     do
 1847.                                        $w_S42 = h(-1 + n + -$I_L1847_209 + -$I_L1847_219, -1 + n + -$I_L1847_209 + -$I_L1847_219) + -$p_S38
 1847.                                        r = h(-1 + n + -$I_L1847_209 + -$I_L1847_219, n + -$I_L1847_219)
 1847.                                        if ( $m_S40 <= ( -1 + n + -$I_L1847_219 ) ) then
 1847.                                           if ( ( -1 + n + -$m_S40 + -$I_L1847_219 ) >= 0 ) then
 1847.                                              $I_L1847_169 = 0
 1847. !dir$ ivdep
 1847.                                              do
 1847.                                                 r = r + h(-1 + n + -$I_L1847_209 + -$I_L1847_219, $m_S40 + $I_L1847_169) * h($m_S40 + $I_L1847_169, n + -$I_L1847_219)
 1847.                                                 $I_L1847_169 = 1 + $I_L1847_169
 1847.                                                 if ( $I_L1847_169 >= n + -$m_S40 + -$I_L1847_219 ) exit
 1847.                                              enddo
 1847.                                           endif
 1847.                                        endif
 1847.                                        if ( wi(-1 + n + -$I_L1847_209 + -$I_L1847_219) < 0.0 ) then
 1847.                                           zz = $w_S42
 1847.                                           s = r
 1847.                                        else
 1847.                                           $m_S40 = ( -1 + n + -$I_L1847_209 + -$I_L1847_219 )
 1847.                                           if ( wi(-1 + n + -$I_L1847_209 + -$I_L1847_219) == 0.0 ) then
 1847.                                              $t_S43 = $w_S42
 1847.                                              if ( $w_S42 == 0.0 ) then
 1847.                                                 $t_S43 = norm * machep
 1847.                                              endif
 1847.                                              h(-1 + n + -$I_L1847_209 + -$I_L1847_219, n + -$I_L1847_219) = -( r * 1.0/$t_S43 )
 1847.                                           else
 1847.                                              $x_S45 = h(-1 + n + -$I_L1847_209 + -$I_L1847_219, n + -$I_L1847_209 + -$I_L1847_219)
 1847.                                              $y_S47 = h(n + -$I_L1847_209 + -$I_L1847_219, -1 + n + -$I_L1847_209 + -$I_L1847_219)
 1847.                                              $q_S44 = ( wr(-1 + n + -$I_L1847_209 + -$I_L1847_219) + -$p_S38 ) * ( wr(-1 + n + -$I_L1847_209 + -$I_L1847_219) + -$p_S38 ) + wi(-1 + n + -$I_L1847_209 + -$I_L1847_219) * wi(-1 + n + -$I_L1847_209 + -$I_L1847_219)
 1847.                                              $t_S46 = ( 1.0/$q_S44 * ( -( r * zz ) + s * $x_S45 ) )
 1847.                                              h(-1 + n + -$I_L1847_209 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/$q_S44 * ( -( r * zz ) + s * $x_S45 ) )
 1847.                                              if ( abs( $x_S45 ) > abs( zz ) ) then
 1847.                                                 h(n + -$I_L1847_209 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/$x_S45 * ( -r + -( $w_S42 * $t_S46 ) ) )
 1847.                                              else
 1847.                                                 h(n + -$I_L1847_209 + -$I_L1847_219, n + -$I_L1847_219) = ( 1.0/zz * ( -s + -( $t_S46 * $y_S47 ) ) )
 1847.                                              endif
 1847.                                           endif
 1847.                                        endif
 1847.                                        $I_L1847_209 = 1 + $I_L1847_209
 1847.                                        if ( $I_L1847_209 >= -1 + n + -$I_L1847_219 ) exit
 1847.                                     enddo
 1847.                                  endif
 1847.                               endif
 1847.                            endif
 1847.                            $I_L1847_219 = 1 + $I_L1847_219
 1847.                            if ( $I_L1847_219 >= n ) exit
 1847.                         enddo
 1847.                         $I_L1847_144 = 0
 1847.                         if ( 0 > -1 + igh ) then
 1847.                            goto 20
 1847.                         else
 1847.                            if ( 0 >= -1 + low ) then
 1847.                               goto 30
 1847.                            else
 1847.                               $I_L1847_211 = 0
 1847.                               do
 1847.                                  $I_L1847_171 = 0
 1847. !dir$ ivdep
 1847.                                  do
 1847.                                     z(1 + $I_L1847_211, 1 + $I_L1847_171 + $I_L1847_211) = h(1 + $I_L1847_211, 1 + $I_L1847_171 + $I_L1847_211)
 1847.                                     $I_L1847_171 = 1 + $I_L1847_171
 1847.                                     if ( $I_L1847_171 >= n + -$I_L1847_211 ) exit
 1847.                                  enddo
 1847.                                  $I_L1847_211 = 1 + $I_L1847_211
 1847.                                  if ( $I_L1847_211 >= min( min( igh, -1 + low ), n ) ) exit
 1847.                               enddo
 1847.                               $I_L1847_144 = min( min( igh, -1 + low ), n )
 1847.                               if ( min( min( igh, -1 + low ), n ) < min( n, igh ) ) then
 1847.    30                            continue
 1847.                                  $I_L1847_144 = min( n, igh )
 1847.                               endif
 1847.                            endif
 1847.                            if ( $I_L1847_144 < n ) then
 1847.    20                         continue
 1847.                               $I_L1847_217 = 0
 1847.                               do
 1847.                                  $I_L1847_203 = 0
 1847. !dir$ ivdep
 1847.                                  do
 1847.                                     z(1 + $I_L1847_144 + $I_L1847_217, 1 + $I_L1847_144 + $I_L1847_203 + $I_L1847_217) = h(1 + $I_L1847_144 + $I_L1847_217, 1 + $I_L1847_144 + $I_L1847_203 + $I_L1847_217)
 1847.                                     $I_L1847_203 = 1 + $I_L1847_203
 1847.                                     if ( $I_L1847_203 >= n + -$I_L1847_144 + -$I_L1847_217 ) exit
 1847.                                  enddo
 1847.                                  $I_L1847_217 = 1 + $I_L1847_217
 1847.                                  if ( $I_L1847_217 >= n + -$I_L1847_144 ) exit
 1847.                               enddo
 1847.                            endif
 1847.                         endif
 1847.                      endif
 1847.                      if ( n + -low >= 0 ) then
 1847.                         if ( igh + -low >= 0 ) then
 1847.                            $I_L1847_221 = 0
 1847.                            do
 1847.                               if ( min( igh, ( n + -$I_L1847_221 ) ) + -low >= 0 ) then
 1847.                                  $I_L1847_213 = 0
 1847. !dir$ ivdep
 1847.                                  do
 1847.                                     zz = 0.0
 1847.                                     $I_L1847_173 = 0
 1847. !dir$ unroll 4
 1847.                                     do
 1847.                                        zz = zz + z(low + $I_L1847_213, low + $I_L1847_173) * h(low + $I_L1847_173, n + -$I_L1847_221)
 1847.                                        $I_L1847_173 = 1 + $I_L1847_173
 1847.                                        if ( $I_L1847_173 >= 1 + min( igh, ( n + -$I_L1847_221 ) ) + -low ) exit
 1847.                                     enddo
 1847.                                     z(low + $I_L1847_213, n + -$I_L1847_221) = zz
 1847.                                     $I_L1847_213 = 1 + $I_L1847_213
 1847.                                     if ( $I_L1847_213 >= 1 + igh + -low ) exit
 1847.                                  enddo
 1847.                               else
 1847.                                  $I_L1847_201 = 0
 1847. !dir$ ivdep
 1847.                                  do
 1847.                                     z(low + $I_L1847_201, n + -$I_L1847_221) = 0.0
 1847.                                     $I_L1847_201 = 1 + $I_L1847_201
 1847.                                     if ( $I_L1847_201 >= 1 + igh + -low ) exit
 1847.                                  enddo
 1847.                               endif
 1847.                               $I_L1847_221 = 1 + $I_L1847_221
 1847.                               if ( $I_L1847_221 >= 1 + n + -low ) exit
 1847.                            enddo
 1847.                         endif
 1847.                      endif
 1847.                   endif
 1847.                endif
 1847.                goto 160
 1847.             endif
 1631.             $its_S6 = 0
 1631.             do
 1638.                if ( $en_S3 + -low >= 0 ) then
 1638.                   $I_L1638_175 = 0
 1638. !dir$ ivdep
 1638.                   do
 1640.                      if ( $en_S3 + -low + -$I_L1638_175 == 0 ) then
 1638.                         goto 40
 1638.                      endif
 1641.                      $s_S5 = abs( h(-1 + $en_S3 + -$I_L1638_175, -1 + $en_S3 + -$I_L1638_175) ) + abs( h($en_S3 + -$I_L1638_175, $en_S3 + -$I_L1638_175) )
 1642.                      if ( abs( h(-1 + $en_S3 + -$I_L1638_175, -1 + $en_S3 + -$I_L1638_175) ) + abs( h($en_S3 + -$I_L1638_175, $en_S3 + -$I_L1638_175) ) == 0.0 ) then
 1642.                         $s_S5 = norm
 1642.                      endif
 1643.                      if ( abs( h($en_S3 + -$I_L1638_175, -1 + $en_S3 + -$I_L1638_175) ) <= machep * $s_S5 ) then
 1642.    40                   continue
 1639.                         l = ( $en_S3 + -$I_L1638_175 )
 1639.                         goto 100
 1639.                      endif
 1644.                      $I_L1638_175 = 1 + $I_L1638_175
 1644.                      if ( $I_L1638_175 >= 1 + $en_S3 + -low ) exit
 1644.                   enddo
 1639.                   l = low
 1639.                endif
 1639.   100          continue
 1648.                $x_S7 = h($en_S3, $en_S3)
 1649.                if ( l + -$en_S3 == 0 ) then
 1768.                   h($en_S3, $en_S3) = t + $x_S7
 1769.                   wr($en_S3) = ( t + $x_S7 )
 1770.                   wi($en_S3) = 0.0
 1771.                   $en_S3 = -1 + $en_S3
 1771.                   goto 160
 1771.                endif
 1650.                $y_S12 = h(-1 + $en_S3, -1 + $en_S3)
 1651.                $w_S13 = h(-1 + $en_S3, $en_S3) * h($en_S3, -1 + $en_S3)
 1652.                if ( l + -$en_S3 == -1 ) then
 1776.                   p = 5.0e-1 * ( $y_S12 + -$x_S7 )
 1777.                   q = $w_S13 + ( 5.0e-1 * ( $y_S12 + -$x_S7 ) ) * ( 5.0e-1 * ( $y_S12 + -$x_S7 ) )
 1778.                   $zz_S26 = _sqrt( abs( ( $w_S13 + ( 5.0e-1 * ( $y_S12 + -$x_S7 ) ) * ( 5.0e-1 * ( $y_S12 + -$x_S7 ) ) ) ) )
 1779.                   h($en_S3, $en_S3) = t + $x_S7
 1780.                   $x_S28 = h($en_S3, $en_S3)
 1781.                   h(-1 + $en_S3, -1 + $en_S3) = t + $y_S12
 1782.                   if ( ( $w_S13 + ( 5.0e-1 * ( $y_S12 + -$x_S7 ) ) * ( 5.0e-1 * ( $y_S12 + -$x_S7 ) ) ) >= 0.0 ) then
 1786.                      $zz_S27 = p + sign( $zz_S26, p )
 1787.                      wr(-1 + $en_S3) = $x_S28 + ( p + sign( $zz_S26, p ) )
 1788.                      wr($en_S3) = ( $x_S28 + ( p + sign( $zz_S26, p ) ) )
 1789.                      if ( ( p + sign( $zz_S26, p ) ) /= 0.0 ) then
 1789.                         wr($en_S3) = $x_S28 + -( $w_S13 * 1.0/$zz_S27 )
 1789.                      endif
 1790.                      wi(-1 + $en_S3) = 0.0
 1791.                      wi($en_S3) = 0.0
 1793.                      if ( matz /= 0 ) then
 1795.                         $x_S29 = h($en_S3, -1 + $en_S3)
 1799.                         r = _sqrt( ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) + ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) )
 1800.                         p = ( ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * 1.0/_sqrt( ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) + ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) ) )
 1801.                         q = ( ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * 1.0/_sqrt( ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * ( $x_S29 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) + ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) * ( $zz_S27 * 1.0/( abs( $zz_S27 ) + abs( $x_S29 ) ) ) ) )
 1805.                         if ( 1 + n + -$en_S3 >= 0 ) then
 1805.                            $I_L1805_177 = 0
 1805. !dir$ ivdep
 1805.                            do
 1806.                               $zz_S31 = h(-1 + $en_S3, -1 + $en_S3 + $I_L1805_177)
 1807.                               h(-1 + $en_S3, -1 + $en_S3 + $I_L1805_177) = q * $zz_S31 + p * h($en_S3, -1 + $en_S3 + $I_L1805_177)
 1808.                               $LD_SPLT_P10 = h($en_S3, -1 + $en_S3 + $I_L1805_177)
 1808.                               h($en_S3, -1 + $en_S3 + $I_L1805_177) = -( p * $zz_S31 ) + q * $LD_SPLT_P10
 1809.                               $I_L1805_177 = 1 + $I_L1805_177
 1805.                               if ( $I_L1805_177 >= 2 + n + -$en_S3 ) exit
 1805.                            enddo
 1805.                         endif
 1813.                         if ( $en_S3 > 0 ) then
 1813.                            $I_L1813_179 = 0
 1813. !dir$ ivdep
 1813.                            do
 1814.                               $zz_S33 = h(1 + $I_L1813_179, -1 + $en_S3)
 1815.                               h(1 + $I_L1813_179, -1 + $en_S3) = q * $zz_S33 + p * h(1 + $I_L1813_179, $en_S3)
 1816.                               $LD_SPLT_P11 = h(1 + $I_L1813_179, $en_S3)
 1816.                               h(1 + $I_L1813_179, $en_S3) = -( p * $zz_S33 ) + q * $LD_SPLT_P11
 1817.                               $I_L1813_179 = 1 + $I_L1813_179
 1813.                               if ( $I_L1813_179 >= $en_S3 ) exit
 1813.                            enddo
 1813.                         endif
 1821.                         if ( igh + -low >= 0 ) then
 1821.                            $I_L1821_181 = 0
 1821. !dir$ ivdep
 1821. !dir$ loop_info (automatic) cache_nt( z )
 1821.                            do
 1822.                               $zz_S35 = z(low + $I_L1821_181, -1 + $en_S3)
 1823.                               z(low + $I_L1821_181, -1 + $en_S3) = q * $zz_S35 + p * z(low + $I_L1821_181, $en_S3)
 1824.                               $LD_SPLT_P12 = z(low + $I_L1821_181, $en_S3)
 1824.                               z(low + $I_L1821_181, $en_S3) = -( p * $zz_S35 ) + q * $LD_SPLT_P12
 1825.                               $I_L1821_181 = 1 + $I_L1821_181
 1821.                               if ( $I_L1821_181 >= 1 + igh + -low ) exit
 1821.                            enddo
 1821.                         endif
 1821.                      endif
 1821.                   else
 1831.                      wr(-1 + $en_S3) = p + $x_S28
 1832.                      wr($en_S3) = p + $x_S28
 1833.                      wi(-1 + $en_S3) = $zz_S26
 1834.                      wi($en_S3) = -$zz_S26
 1834.                   endif
 1836.                   $en_S3 = -2 + $en_S3
 1836.                   goto 160
 1836.                endif
 1653.                if ( $its_S6 == 30 ) then
 1854.                   ierr = $en_S3
 1854.                   goto 160
 1854.                endif
 1654.                if ( $its_S6 == 10 ) then
 1654.                   goto 100
 1654.                else if ( $its_S6 == 20 ) then
 1654.   100             continue
 1658.                   t = t + $x_S7
 1660.                   if ( $en_S3 + -low >= 0 ) then
 1660.                      $I_L1660_183 = 0
 1660. !dir$ ivdep
 1660.                      do
 1661.                         h(low + $I_L1660_183, low + $I_L1660_183) = h(low + $I_L1660_183, low + $I_L1660_183) + -$x_S7
 1662.                         $I_L1660_183 = 1 + $I_L1660_183
 1660.                         if ( $I_L1660_183 >= 1 + $en_S3 + -low ) exit
 1660.                      enddo
 1660.                   endif
 1664.                   $s_S9 = abs( h(-1 + $en_S3, -2 + $en_S3) ) + abs( h($en_S3, -1 + $en_S3) )
 1665.                   $x_S7 = 7.5e-1 * $s_S9
 1666.                   $y_S12 = ( 7.5e-1 * $s_S9 )
 1667.                   $w_S13 = -4.375e-1 * $s_S9 * $s_S9
 1667.                endif
 1668.                $its_S6 = 1 + $its_S6
 1673.                if ( -2 + $en_S3 + -l >= 0 ) then
 1673.                   $I_L1673_185 = 0
 1673. !dir$ ivdep
 1673.                   do
 1675.                      $zz_S11 = h(-2 + $en_S3 + -$I_L1673_185, -2 + $en_S3 + -$I_L1673_185)
 1678.                      $p_S16 = h(-2 + $en_S3 + -$I_L1673_185, -1 + $en_S3 + -$I_L1673_185) + ( ( -$w_S13 + ( $x_S7 + -$zz_S11 ) * ( $y_S12 + -$zz_S11 ) ) * 1.0/h(-1 + $en_S3 + -$I_L1673_185, -2 + $en_S3 + -$I_L1673_185) )
 1679.                      $q_S15 = h(-1 + $en_S3 + -$I_L1673_185, -1 + $en_S3 + -$I_L1673_185) + -$zz_S11 + -( $x_S7 + -$zz_S11 ) + -( $y_S12 + -$zz_S11 )
 1680.                      $r_S14 = h($en_S3 + -$I_L1673_185, -1 + $en_S3 + -$I_L1673_185)
 1682.                      p = ( $p_S16 * 1.0/( abs( $r_S14 ) + abs( $q_S15 ) + abs( $p_S16 ) ) )
 1684.                      r = ( $r_S14 * 1.0/( abs( $r_S14 ) + abs( $q_S15 ) + abs( $p_S16 ) ) )
 1683.                      q = ( $q_S15 * 1.0/( abs( $r_S14 ) + abs( $q_S15 ) + abs( $p_S16 ) ) )
 1685.                      if ( $en_S3 + -l + -$I_L1673_185 == 2 ) then
 1673.                         goto 110
 1673.                      endif
 1686.                      if ( ( abs( q ) + abs( r ) ) * abs( h(-2 + $en_S3 + -$I_L1673_185, -3 + $en_S3 + -$I_L1673_185) ) <= machep * abs( p ) * ( abs( h(-1 + $en_S3 + -$I_L1673_185, -1 + $en_S3 + -$I_L1673_185) ) + abs( $zz_S11 ) + abs( h(-3 + $en_S3 + -$I_L1673_185, -3 + $en_S3 + -$I_L1673_185) ) ) ) then
 1686.   110                   continue
 1674.                         m = ( -2 + $en_S3 + -$I_L1673_185 )
 1674.                         goto 150
 1674.                      endif
 1688.                      $I_L1673_185 = 1 + $I_L1673_185
 1688.                      if ( $I_L1673_185 >= -1 + $en_S3 + -l ) exit
 1688.                   enddo
 1674.                   m = l
 1674.                endif
 1674.   150          continue
 1692.                if ( -2 + $en_S3 + -m >= 0 ) then
 1693.                   h(2 + m, m) = 0.0
 1696.                   if ( -2 + $en_S3 + -m > 0 ) then
 1692.                      $I_L1692_187 = 0
 1692. !dir$ ivdep
 1692.                      do
 1693.                         h(3 + m + $I_L1692_187, 1 + m + $I_L1692_187) = 0.0
 1695.                         h(3 + m + $I_L1692_187, m + $I_L1692_187) = 0.0
 1696.                         $I_L1692_187 = 1 + $I_L1692_187
 1696.                         if ( $I_L1692_187 >= -2 + $en_S3 + -m ) exit
 1696.                      enddo
 1696.                   endif
 1696.                endif
 1700.                if ( $en_S3 + -m > 0 ) then
 1700.                   $I_L1700_215 = 0
 1700.                   do
 1702.                      if ( $I_L1700_215 /= 0 ) then
 1703.                         p = h(m + $I_L1700_215, -1 + m + $I_L1700_215)
 1704.                         q = h(1 + m + $I_L1700_215, -1 + m + $I_L1700_215)
 1705.                         r = 0.0
 1706.                         if ( $en_S3 + -m + -$I_L1700_215 /= 1 ) then
 1706.                            r = h(2 + m + $I_L1700_215, -1 + m + $I_L1700_215)
 1706.                         endif
 1707.                         $x_S7 = abs( p ) + abs( q ) + abs( r )
 1708.                         if ( ( abs( p ) + abs( q ) + abs( r ) ) /= 0.0 ) then
 1709.                            p = ( p * 1.0/$x_S7 )
 1710.                            q = ( q * 1.0/$x_S7 )
 1711.                            r = ( r * 1.0/$x_S7 )
 1711.                            goto 150
 1711.                         endif
 1711.                      else
 1711.   150                   continue
 1712.                         $s_S20 = sign( _sqrt( p * p + q * q + r * r ), p )
 1713.                         if ( $I_L1700_215 /= 0 ) then
 1714.                            h(m + $I_L1700_215, -1 + m + $I_L1700_215) = -( $x_S7 * $s_S20 )
 1716.                         else if ( m + -l /= 0 ) then
 1716.                            $LD_SPLT_P0 = h(m + $I_L1700_215, -1 + m + $I_L1700_215)
 1716.                            h(m + $I_L1700_215, -1 + m + $I_L1700_215) = -$LD_SPLT_P0
 1716.                         endif
 1717.                         p = p + $s_S20
 1718.                         $x_S7 = ( p * 1.0/$s_S20 )
 1719.                         $y_S23 = ( q * 1.0/$s_S20 )
 1720.                         $zz_S22 = ( r * 1.0/$s_S20 )
 1721.                         q = ( q * 1.0/p )
 1722.                         r = ( r * 1.0/p )
 1726.                         if ( ( n + -m + -$I_L1700_215 ) >= 0 ) then
 1728.                            if ( $en_S3 + -m + -$I_L1700_215 /= 1 ) then
 1726.                               $I_L1726_189 = 0
 1726. !dir$ ivdep
 1726.                               do
 1727.                                  p = h(m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215) + q * h(1 + m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215)
 1729.                                  p = p + r * h(2 + m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215)
 1730.                                  h(2 + m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215) = h(2 + m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215) + -( p * $zz_S22 )
 1731.                                  $LD_SPLT_P1 = h(1 + m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215)
 1731.                                  h(1 + m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215) = $LD_SPLT_P1 + -( p * $y_S23 )
 1732.                                  $LD_SPLT_P2 = h(m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215)
 1732.                                  h(m + $I_L1700_215, m + $I_L1726_189 + $I_L1700_215) = $LD_SPLT_P2 + -( p * $x_S7 )
 1733.                                  $I_L1726_189 = 1 + $I_L1726_189
 1731.                                  if ( $I_L1726_189 >= 1 + n + -m + -$I_L1700_215 ) exit
 1731.                               enddo
 1731.                            else
 1726.                               $I_L1726_195 = 0
 1726. !dir$ ivdep
 1726.                               do
 1727.                                  p = h(m + $I_L1700_215, m + $I_L1726_195 + $I_L1700_215) + q * h(1 + m + $I_L1700_215, m + $I_L1726_195 + $I_L1700_215)
 1731.                                  h(1 + m + $I_L1700_215, m + $I_L1726_195 + $I_L1700_215) = h(1 + m + $I_L1700_215, m + $I_L1726_195 + $I_L1700_215) + -( p * $y_S23 )
 1732.                                  $LD_SPLT_P3 = h(m + $I_L1700_215, m + $I_L1726_195 + $I_L1700_215)
 1732.                                  h(m + $I_L1700_215, m + $I_L1726_195 + $I_L1700_215) = $LD_SPLT_P3 + -( p * $x_S7 )
 1733.                                  $I_L1726_195 = 1 + $I_L1726_195
 1731.                                  if ( $I_L1726_195 >= 1 + n + -m + -$I_L1700_215 ) exit
 1731.                               enddo
 1731.                            endif
 1731.                         endif
 1739.                         if ( min( $en_S3, ( 3 + m + $I_L1700_215 ) ) > 0 ) then
 1741.                            if ( $en_S3 + -m + -$I_L1700_215 /= 1 ) then
 1739.                               $I_L1739_191 = 0
 1739. !dir$ ivdep
 1739.                               do
 1740.                                  p = $y_S23 * h(1 + $I_L1739_191, 1 + m + $I_L1700_215) + $x_S7 * h(1 + $I_L1739_191, m + $I_L1700_215)
 1742.                                  p = p + $zz_S22 * h(1 + $I_L1739_191, 2 + m + $I_L1700_215)
 1743.                                  h(1 + $I_L1739_191, 2 + m + $I_L1700_215) = h(1 + $I_L1739_191, 2 + m + $I_L1700_215) + -( r * p )
 1744.                                  $LD_SPLT_P4 = h(1 + $I_L1739_191, 1 + m + $I_L1700_215)
 1744.                                  h(1 + $I_L1739_191, 1 + m + $I_L1700_215) = $LD_SPLT_P4 + -( p * q )
 1745.                                  $LD_SPLT_P5 = h(1 + $I_L1739_191, m + $I_L1700_215)
 1745.                                  h(1 + $I_L1739_191, m + $I_L1700_215) = $LD_SPLT_P5 + -p
 1746.                                  $I_L1739_191 = 1 + $I_L1739_191
 1744.                                  if ( $I_L1739_191 >= ( min( $en_S3, ( 3 + m + $I_L1700_215 ) ) ) ) exit
 1744.                               enddo
 1744.                            else
 1739.                               $I_L1739_197 = 0
 1739. !dir$ ivdep
 1739.                               do
 1740.                                  p = $y_S23 * h(1 + $I_L1739_197, 1 + m + $I_L1700_215) + $x_S7 * h(1 + $I_L1739_197, m + $I_L1700_215)
 1744.                                  h(1 + $I_L1739_197, 1 + m + $I_L1700_215) = h(1 + $I_L1739_197, 1 + m + $I_L1700_215) + -( p * q )
 1745.                                  $LD_SPLT_P6 = h(1 + $I_L1739_197, m + $I_L1700_215)
 1745.                                  h(1 + $I_L1739_197, m + $I_L1700_215) = $LD_SPLT_P6 + -p
 1746.                                  $I_L1739_197 = 1 + $I_L1739_197
 1744.                                  if ( $I_L1739_197 >= ( min( $en_S3, ( 3 + m + $I_L1700_215 ) ) ) ) exit
 1744.                               enddo
 1744.                            endif
 1744.                         endif
 1748.                         if ( matz /= 0 ) then
 1752.                            if ( igh + -low >= 0 ) then
 1754.                               if ( $en_S3 + -m + -$I_L1700_215 /= 1 ) then
 1752.                                  $I_L1752_193 = 0
 1752. !dir$ ivdep
 1752.                                  do
 1753.                                     p = $y_S23 * z(low + $I_L1752_193, 1 + m + $I_L1700_215) + $x_S7 * z(low + $I_L1752_193, m + $I_L1700_215)
 1755.                                     p = p + $zz_S22 * z(low + $I_L1752_193, 2 + m + $I_L1700_215)
 1756.                                     z(low + $I_L1752_193, 2 + m + $I_L1700_215) = z(low + $I_L1752_193, 2 + m + $I_L1700_215) + -( r * p )
 1757.                                     if ( abs( p ) < tol ) then
 1757.                                        p = tol
 1757.                                     endif
 1758.                                     $LD_SPLT_P7 = z(low + $I_L1752_193, 1 + m + $I_L1700_215)
 1758.                                     z(low + $I_L1752_193, 1 + m + $I_L1700_215) = $LD_SPLT_P7 + -( p * q )
 1759.                                     $LD_SPLT_P8 = z(low + $I_L1752_193, m + $I_L1700_215)
 1759.                                     z(low + $I_L1752_193, m + $I_L1700_215) = $LD_SPLT_P8 + -p
 1760.                                     $I_L1752_193 = 1 + $I_L1752_193
 1757.                                     if ( $I_L1752_193 >= 1 + igh + -low ) exit
 1757.                                  enddo
 1757.                               else
 1752.                                  $I_L1752_199 = 0
 1752. !dir$ ivdep
 1752.                                  do
 1753.                                     p = $y_S23 * z(low + $I_L1752_199, 1 + m + $I_L1700_215) + $x_S7 * z(low + $I_L1752_199, m + $I_L1700_215)
 1757.                                     if ( abs( p ) < tol ) then
 1757.                                        p = tol
 1757.                                     endif
 1758.                                     z(low + $I_L1752_199, 1 + m + $I_L1700_215) = z(low + $I_L1752_199, 1 + m + $I_L1700_215) + -( p * q )
 1759.                                     $LD_SPLT_P9 = z(low + $I_L1752_199, m + $I_L1700_215)
 1759.                                     z(low + $I_L1752_199, m + $I_L1700_215) = $LD_SPLT_P9 + -p
 1760.                                     $I_L1752_199 = 1 + $I_L1752_199
 1757.                                     if ( $I_L1752_199 >= 1 + igh + -low ) exit
 1757.                                  enddo
 1757.                               endif
 1757.                            endif
 1757.                         endif
 1757.                      endif
 1762.                      $I_L1700_215 = 1 + $I_L1700_215
 1762.                      if ( $I_L1700_215 >= ( $en_S3 + -m ) ) exit
 1762.                   enddo
 1762.                endif
 1762.             enddo
 1762.   160       continue
 1856.             hqr2 = 0
 1856.             return
 1856.       end
 1856.       
 2023.       
 2023.       real (kind=8)
 2023.       function zd( a1, a2, a3, a4 )
 2028.       zd = ( ( a1 * a3 + a2 * a4 ) * 1.0/( a3 * a3 + a4 * a4 ) )
 2028.       return
 2028.       end
 2028.       
 1857.       
 1857.       subroutine hqr3( nm, n, low, igh, h, wr, wi, z, machep, norm )
 1857.       t$136 = nm
 1857.       t$137 = n
 1863.       t$384 = _zla( 0, nm )
 1857.       t$385 = _zla( 0, nm )
 1863.       t$386 = _zla( 0, n )
 1857.       t$387 = _zla( 0, nm ) * _zla( 0, n )
 1873.       if ( n > 0 ) then
 1873.          $I_L1873_94 = 0
 1873.          do
 1875.             $p_S2 = wr(n + -$I_L1873_94)
 1876.             $q_S1 = wi(n + -$I_L1873_94)
 1878.             if ( $q_S1 < 0.0 ) then
 1929.                $m_S17 = ( -1 + n + -$I_L1873_94 )
 1934.                if ( abs( h(n + -$I_L1873_94, -1 + n + -$I_L1873_94) ) > abs( h(-1 + n + -$I_L1873_94, n + -$I_L1873_94) ) ) then
 1935.                   h(-1 + n + -$I_L1873_94, -1 + n + -$I_L1873_94) = ( $q_S1 * 1.0/h(n + -$I_L1873_94, -1 + n + -$I_L1873_94) )
 1936.                   $SCF_P6 = 1.0/h(n + -$I_L1873_94, -1 + n + -$I_L1873_94)
 1936.                   h(-1 + n + -$I_L1873_94, n + -$I_L1873_94) = -( $SCF_P6 * ( h(n + -$I_L1873_94, n + -$I_L1873_94) + -$p_S2 ) )
 1936.                else
 1938.                   $t_S13 = -h(-1 + n + -$I_L1873_94, n + -$I_L1873_94)
 1938.                   $LD_SPLT_P0 = h(-1 + n + -$I_L1873_94, -1 + n + -$I_L1873_94)
 1938.                   h(-1 + n + -$I_L1873_94, -1 + n + -$I_L1873_94) = ( ( $q_S1 * $t_S13 ) * 1.0/( $q_S1 * $q_S1 + ( $LD_SPLT_P0 + -$p_S2 ) * ( $LD_SPLT_P0 + -$p_S2 ) ) )
 1939.                   $t_S15 = -h(-1 + n + -$I_L1873_94, n + -$I_L1873_94)
 1939.                   h(-1 + n + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/( $q_S1 * $q_S1 + ( -$p_S2 + ( ( $q_S1 * $t_S13 ) * 1.0/( $q_S1 * $q_S1 + ( $LD_SPLT_P0 + -$p_S2 ) * ( $LD_SPLT_P0 + -$p_S2 ) ) ) ) * ( -$p_S2 + ( ( $q_S1 * $t_S13 ) * 1.0/( $q_S1 * $q_S1 + ( $LD_SPLT_P0 + -$p_S2 ) * ( $LD_SPLT_P0 + -$p_S2 ) ) ) ) ) * ( $t_S15 * ( -$p_S2 + ( ( $q_S1 * $t_S13 ) * 1.0/( $q_S1 * $q_S1 + ( $LD_SPLT_P0 + -$p_S2 ) * ( $LD_SPLT_P0 + -$p_S2 ) ) ) ) ) )
 1939.                endif
 1940.                h(n + -$I_L1873_94, -1 + n + -$I_L1873_94) = 0.0
 1941.                h(n + -$I_L1873_94, n + -$I_L1873_94) = 1.0
 1943.                if ( n + -$I_L1873_94 /= 2 ) then
 1947.                   if ( ( -2 + n + -$I_L1873_94 ) > 0 ) then
 1947.                      $I_L1947_84 = 0
 1947.                      do
 1949.                         $w_S19 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -2 + n + -$I_L1947_84 + -$I_L1873_94) + -$p_S2
 1950.                         ra = 0.0
 1951.                         sa = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94)
 1953.                         if ( ( -1 + n + -$m_S17 + -$I_L1873_94 ) >= 0 ) then
 1953.                            $I_L1953_72 = 0
 1953. !dir$ ivdep
 1953.                            do
 1954.                               ra = ra + h(-2 + n + -$I_L1947_84 + -$I_L1873_94, $m_S17 + $I_L1953_72) * h($m_S17 + $I_L1953_72, -1 + n + -$I_L1873_94)
 1955.                               sa = sa + h(-2 + n + -$I_L1947_84 + -$I_L1873_94, $m_S17 + $I_L1953_72) * h($m_S17 + $I_L1953_72, n + -$I_L1873_94)
 1956.                               $I_L1953_72 = 1 + $I_L1953_72
 1953.                               if ( $I_L1953_72 >= n + -$m_S17 + -$I_L1873_94 ) exit
 1953.                            enddo
 1953.                         endif
 1958.                         if ( wi(-2 + n + -$I_L1947_84 + -$I_L1873_94) < 0.0 ) then
 1959.                            zz = $w_S19
 1960.                            r = ra
 1961.                            s = sa
 1961.                         else
 1963.                            $m_S17 = ( -2 + n + -$I_L1947_84 + -$I_L1873_94 )
 1964.                            if ( wi(-2 + n + -$I_L1947_84 + -$I_L1873_94) == 0.0 ) then
 1965.                               h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94) = ( 1.0/( $q_S1 * $q_S1 + $w_S19 * $w_S19 ) * ( -( sa * $q_S1 ) + -( ra * $w_S19 ) ) )
 1966.                               h(-2 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/( $q_S1 * $q_S1 + $w_S19 * $w_S19 ) * ( -( sa * $w_S19 ) + ra * $q_S1 ) )
 1966.                            else
 1971.                               $x_S20 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1947_84 + -$I_L1873_94)
 1972.                               $y_S23 = h(-1 + n + -$I_L1947_84 + -$I_L1873_94, -2 + n + -$I_L1947_84 + -$I_L1873_94)
 1973.                               $ar_S25 = -( zz * ra ) + sa * $q_S1 + r * $x_S20
 1974.                               $ai_S24 = -( zz * sa ) + -( ra * $q_S1 ) + s * $x_S20
 1975.                               $br_S21 = -( $q_S1 * $q_S1 ) + ( wr(-2 + n + -$I_L1947_84 + -$I_L1873_94) + -$p_S2 ) * ( wr(-2 + n + -$I_L1947_84 + -$I_L1873_94) + -$p_S2 ) + wi(-2 + n + -$I_L1947_84 + -$I_L1873_94) * wi(-2 + n + -$I_L1947_84 + -$I_L1873_94)
 1976.                               $bi_S22 = 2.0 * $q_S1 * ( wr(-2 + n + -$I_L1947_84 + -$I_L1873_94) + -$p_S2 )
 1977.                               if ( $br_S21 == 0.0 ) then
 1977.                                  if ( $bi_S22 == 0.0 ) then
 1977.                                     $br_S21 = machep * norm * ( abs( zz ) + abs( $q_S1 ) + abs( $w_S19 ) + abs( $x_S20 ) + abs( $y_S23 ) )
 1977.                                  endif
 1977.                               endif
 1979.                               h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94) = ( 1.0/( $br_S21 * $br_S21 + $bi_S22 * $bi_S22 ) * ( $bi_S22 * $ai_S24 + $br_S21 * $ar_S25 ) )
 1980.                               $t_S26 = ( 1.0/( $br_S21 * $br_S21 + $bi_S22 * $bi_S22 ) * ( -( $bi_S22 * $ar_S25 ) + $br_S21 * $ai_S24 ) )
 1980.                               h(-2 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/( $br_S21 * $br_S21 + $bi_S22 * $bi_S22 ) * ( -( $bi_S22 * $ar_S25 ) + $br_S21 * $ai_S24 ) )
 1981.                               if ( abs( $x_S20 ) > ( abs( zz ) + abs( $q_S1 ) ) ) then
 1982.                                  $LD_SPLT_P1 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94)
 1982.                                  h(-1 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94) = ( 1.0/$x_S20 * ( -ra + -( $w_S19 * $LD_SPLT_P1 ) + $q_S1 * $t_S26 ) )
 1983.                                  $LD_SPLT_P2 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94)
 1983.                                  h(-1 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/$x_S20 * ( -sa + -( $q_S1 * $LD_SPLT_P2 ) + -( $w_S19 * h(-2 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94) ) ) )
 1983.                               else
 1985.                                  $LD_SPLT_P3 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94)
 1985.                                  h(-1 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94) = ( 1.0/( zz * zz + $q_S1 * $q_S1 ) * ( $q_S1 * ( -s + -( $y_S23 * $t_S26 ) ) + zz * ( -r + -( $y_S23 * $LD_SPLT_P3 ) ) ) )
 1986.                                  $LD_SPLT_P5 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94)
 1986.                                  $LD_SPLT_P4 = h(-2 + n + -$I_L1947_84 + -$I_L1873_94, -1 + n + -$I_L1873_94)
 1986.                                  h(-1 + n + -$I_L1947_84 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/( zz * zz + $q_S1 * $q_S1 ) * ( $q_S1 * ( r + $y_S23 * $LD_SPLT_P4 ) + zz * ( -s + -( $y_S23 * $LD_SPLT_P5 ) ) ) )
 1986.                               endif
 1986.                            endif
 1986.                         endif
 1987.                         $I_L1947_84 = 1 + $I_L1947_84
 1987.                         if ( $I_L1947_84 >= -2 + n + -$I_L1873_94 ) exit
 1987.                      enddo
 1987.                   endif
 1987.                endif
 1878.             else if ( $q_S1 == 0.0 ) then
 1882.                $m_S4 = ( n + -$I_L1873_94 )
 1883.                h(n + -$I_L1873_94, n + -$I_L1873_94) = 1.0
 1884.                if ( n + -$I_L1873_94 /= 1 ) then
 1888.                   if ( ( -1 + n + -$I_L1873_94 ) > 0 ) then
 1888.                      $I_L1888_86 = 0
 1888.                      do
 1890.                         $w_S6 = h(-1 + n + -$I_L1888_86 + -$I_L1873_94, -1 + n + -$I_L1888_86 + -$I_L1873_94) + -$p_S2
 1891.                         r = h(-1 + n + -$I_L1888_86 + -$I_L1873_94, n + -$I_L1873_94)
 1892.                         if ( $m_S4 <= ( -1 + n + -$I_L1873_94 ) ) then
 1894.                            if ( ( -1 + n + -$m_S4 + -$I_L1873_94 ) >= 0 ) then
 1894.                               $I_L1894_74 = 0
 1894. !dir$ ivdep
 1894.                               do
 1895.                                  r = r + h(-1 + n + -$I_L1888_86 + -$I_L1873_94, $m_S4 + $I_L1894_74) * h($m_S4 + $I_L1894_74, n + -$I_L1873_94)
 1896.                                  $I_L1894_74 = 1 + $I_L1894_74
 1894.                                  if ( $I_L1894_74 >= n + -$m_S4 + -$I_L1873_94 ) exit
 1894.                               enddo
 1894.                            endif
 1894.                         endif
 1898.                         if ( wi(-1 + n + -$I_L1888_86 + -$I_L1873_94) < 0.0 ) then
 1899.                            zz = $w_S6
 1900.                            s = r
 1900.                         else
 1902.                            $m_S4 = ( -1 + n + -$I_L1888_86 + -$I_L1873_94 )
 1903.                            if ( wi(-1 + n + -$I_L1888_86 + -$I_L1873_94) == 0.0 ) then
 1904.                               $t_S7 = $w_S6
 1905.                               if ( $w_S6 == 0.0 ) then
 1905.                                  $t_S7 = machep * norm
 1905.                               endif
 1906.                               h(-1 + n + -$I_L1888_86 + -$I_L1873_94, n + -$I_L1873_94) = -( r * 1.0/$t_S7 )
 1906.                            else
 1911.                               $x_S9 = h(-1 + n + -$I_L1888_86 + -$I_L1873_94, n + -$I_L1888_86 + -$I_L1873_94)
 1912.                               $y_S11 = h(n + -$I_L1888_86 + -$I_L1873_94, -1 + n + -$I_L1888_86 + -$I_L1873_94)
 1913.                               $q_S8 = ( wr(-1 + n + -$I_L1888_86 + -$I_L1873_94) + -$p_S2 ) * ( wr(-1 + n + -$I_L1888_86 + -$I_L1873_94) + -$p_S2 ) + wi(-1 + n + -$I_L1888_86 + -$I_L1873_94) * wi(-1 + n + -$I_L1888_86 + -$I_L1873_94)
 1914.                               $t_S10 = ( 1.0/$q_S8 * ( -( r * zz ) + s * $x_S9 ) )
 1915.                               h(-1 + n + -$I_L1888_86 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/$q_S8 * ( -( r * zz ) + s * $x_S9 ) )
 1916.                               if ( abs( $x_S9 ) > abs( zz ) ) then
 1917.                                  h(n + -$I_L1888_86 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/$x_S9 * ( -r + -( $w_S6 * $t_S10 ) ) )
 1917.                               else
 1919.                                  h(n + -$I_L1888_86 + -$I_L1873_94, n + -$I_L1873_94) = ( 1.0/zz * ( -s + -( $t_S10 * $y_S11 ) ) )
 1919.                               endif
 1919.                            endif
 1919.                         endif
 1921.                         $I_L1888_86 = 1 + $I_L1888_86
 1921.                         if ( $I_L1888_86 >= -1 + n + -$I_L1873_94 ) exit
 1921.                      enddo
 1921.                   endif
 1921.                endif
 1921.             endif
 1991.             $I_L1873_94 = 1 + $I_L1873_94
 1991.             if ( $I_L1873_94 >= n ) exit
 1991.          enddo
 1996.          $I_L1996_56 = 0
 2002.          if ( 0 > -1 + igh ) then
 2002.             goto 10
 2002.          else
 2002.             if ( 0 >= -1 + low ) then
 2002.                goto 20
 2002.             else
 1996.                $I_L1996_88 = 0
 1996.                do
 1998.                   $I_L1998_76 = 0
 1998. !dir$ ivdep
 1998.                   do
 1999.                      z(1 + $I_L1996_88, 1 + $I_L1998_76 + $I_L1996_88) = h(1 + $I_L1996_88, 1 + $I_L1998_76 + $I_L1996_88)
 2000.                      $I_L1998_76 = 1 + $I_L1998_76
 1998.                      if ( $I_L1998_76 >= n + -$I_L1996_88 ) exit
 1998.                   enddo
 2002.                   $I_L1996_88 = 1 + $I_L1996_88
 2002.                   if ( $I_L1996_88 >= min( min( igh, -1 + low ), n ) ) exit
 2002.                enddo
 2002.                $I_L1996_56 = min( min( igh, -1 + low ), n )
 2002.                if ( min( min( igh, -1 + low ), n ) < min( n, igh ) ) then
 2002.    20             continue
 2002.                   $I_L1996_56 = min( n, igh )
 2002.                endif
 2002.             endif
 2002.             if ( $I_L1996_56 < n ) then
 2002.    10          continue
 1996.                $I_L1996_92 = 0
 1996.                do
 1998.                   $I_L1998_82 = 0
 1998. !dir$ ivdep
 1998.                   do
 1999.                      z(1 + $I_L1996_56 + $I_L1996_92, 1 + $I_L1996_56 + $I_L1998_82 + $I_L1996_92) = h(1 + $I_L1996_56 + $I_L1996_92, 1 + $I_L1996_56 + $I_L1998_82 + $I_L1996_92)
 2000.                      $I_L1998_82 = 1 + $I_L1998_82
 1998.                      if ( $I_L1998_82 >= n + -$I_L1996_56 + -$I_L1996_92 ) exit
 1998.                   enddo
 2002.                   $I_L1996_92 = 1 + $I_L1996_92
 2002.                   if ( $I_L1996_92 >= n + -$I_L1996_56 ) exit
 2002.                enddo
 2002.             endif
 2002.          endif
 2002.       endif
 2008.       if ( n + -low >= 0 ) then
 2012.          if ( igh + -low >= 0 ) then
 2008.             $I_L2008_96 = 0
 2008.             do
 2015.                if ( min( igh, ( n + -$I_L2008_96 ) ) + -low >= 0 ) then
 2012.                   $I_L2012_90 = 0
 2012. !dir$ ivdep
 2012.                   do
 2013.                      zz = 0.0
 2015.                      $I_L2015_78 = 0
 2015. !dir$ unroll 4
 2015.                      do
 2016.                         zz = zz + z(low + $I_L2012_90, low + $I_L2015_78) * h(low + $I_L2015_78, n + -$I_L2008_96)
 2017.                         $I_L2015_78 = 1 + $I_L2015_78
 2015.                         if ( $I_L2015_78 >= 1 + min( igh, ( n + -$I_L2008_96 ) ) + -low ) exit
 2015.                      enddo
 2019.                      z(low + $I_L2012_90, n + -$I_L2008_96) = zz
 2020.                      $I_L2012_90 = 1 + $I_L2012_90
 2017.                      if ( $I_L2012_90 >= 1 + igh + -low ) exit
 2017.                   enddo
 2017.                else
 2012.                   $I_L2012_80 = 0
 2012. !dir$ ivdep
 2012.                   do
 2019.                      z(low + $I_L2012_80, n + -$I_L2008_96) = 0.0
 2020.                      $I_L2012_80 = 1 + $I_L2012_80
 2017.                      if ( $I_L2012_80 >= 1 + igh + -low ) exit
 2017.                   enddo
 2017.                endif
 2020.                $I_L2008_96 = 1 + $I_L2008_96
 2020.                if ( $I_L2008_96 >= 1 + n + -low ) exit
 2020.             enddo
 2020.          endif
 2020.       endif
 2029.       return
 2029.       end
 2029.       
 2030.       
 2030.       subroutine ortran( nm, n, low, igh, a, ort, z, tolh )
 2030.       t$142 = nm
 2030.       t$143 = n
 2038.       t$388 = _zla( 0, nm )
 2030.       t$389 = _zla( 0, nm )
 2038.       t$390 = _zla( 0, n )
 2030.       t$391 = _zla( 0, nm ) * _zla( 0, n )
 2046.       if ( n > 0 ) then
 2047.          $I_L2047_62 = 0
 2047.          do
 2046.             $I_L2046_56 = 0
 2046. !dir$ ivdep
 2046.             do
 2048.                z(1 + $I_L2046_56, 1 + $I_L2047_62) = 0.0
 2051.                $I_L2046_56 = 1 + $I_L2046_56
 2047.                if ( $I_L2046_56 >= n ) exit
 2047.             enddo
 2049.             $I_L2047_62 = 1 + $I_L2047_62
 2049.             if ( $I_L2047_62 >= n ) exit
 2049.          enddo
 2046.          $I_L2046_58 = 0
 2046. !dir$ ivdep
 2046.          do
 2050.             z(1 + $I_L2046_58, 1 + $I_L2046_58) = 1.0
 2051.             $I_L2046_58 = 1 + $I_L2046_58
 2049.             if ( $I_L2046_58 >= n ) exit
 2049.          enddo
 2049.       endif
 2054.       if ( -1 + igh + -low > 0 ) then
 2058.          $I_L2058_64 = 0
 2058.          do
 2060.             if ( a(-1 + igh + -$I_L2058_64, -2 + igh + -$I_L2058_64) /= 0.0 ) then
 2063.                $I_L2063_50 = 0
 2063. !dir$ ivdep
 2063.                do
 2064.                   ort(igh + $I_L2063_50 + -$I_L2058_64) = a(igh + $I_L2063_50 + -$I_L2058_64, -2 + igh + -$I_L2058_64)
 2065.                   $I_L2063_50 = 1 + $I_L2063_50
 2063.                   if ( $I_L2063_50 >= 1 + $I_L2058_64 ) exit
 2063.                enddo
 2067.                $SCA_a_I0 = a(-1 + igh + -$I_L2058_64, -2 + igh + -$I_L2058_64)
 2077.                $SC_ort_I1 = ort(-1 + igh + -$I_L2058_64)
 2067.                $I_L2067_60 = 0
 2067.                do
 2068.                   g = 0.0
 2070.                   $I_L2070_52 = 0
 2070. !dir$ ivdep
 2070.                   do
 2071.                      g = g + z(-1 + igh + $I_L2070_52 + -$I_L2058_64, -1 + igh + $I_L2067_60 + -$I_L2058_64) * ort(-1 + igh + $I_L2070_52 + -$I_L2058_64)
 2072.                      $I_L2070_52 = 1 + $I_L2070_52
 2070.                      if ( $I_L2070_52 >= 2 + $I_L2058_64 ) exit
 2070.                   enddo
 2077.                   $g_S7 = ( 1.0/$SCA_a_I0 * ( g * 1.0/$SC_ort_I1 ) )
 2079.                   $I_L2079_54 = 0
 2079. !dir$ ivdep
 2079.                   do
 2080.                      z(-1 + igh + $I_L2079_54 + -$I_L2058_64, -1 + igh + $I_L2067_60 + -$I_L2058_64) = z(-1 + igh + $I_L2079_54 + -$I_L2058_64, -1 + igh + $I_L2067_60 + -$I_L2058_64) + $g_S7 * ort(-1 + igh + $I_L2079_54 + -$I_L2058_64)
 2081.                      if ( abs( z(-1 + igh + $I_L2079_54 + -$I_L2058_64, -1 + igh + $I_L2067_60 + -$I_L2058_64) ) < tolh ) then
 2081.                         z(-1 + igh + $I_L2079_54 + -$I_L2058_64, -1 + igh + $I_L2067_60 + -$I_L2058_64) = tolh
 2081.                      endif
 2082.                      $I_L2079_54 = 1 + $I_L2079_54
 2081.                      if ( $I_L2079_54 >= 2 + $I_L2058_64 ) exit
 2081.                   enddo
 2084.                   $I_L2067_60 = 1 + $I_L2067_60
 2082.                   if ( $I_L2067_60 >= 2 + $I_L2058_64 ) exit
 2082.                enddo
 2082.             endif
 2086.             $I_L2058_64 = 1 + $I_L2058_64
 2086.             if ( $I_L2058_64 >= -1 + igh + -low ) exit
 2086.          enddo
 2086.       endif
 2089.       return
 2089.       end
 2089.       
 2091.       
 2091.       subroutine orthes( nm, n, low, igh, a, ort, tolh )
 2091.       t$147 = nm
 2091.       t$148 = n
 2097.       t$392 = _zla( 0, nm )
 2091.       t$393 = _zla( 0, nm )
 2097.       t$394 = _zla( 0, n )
 2091.       t$395 = _zla( 0, nm ) * _zla( 0, n )
 2091.       t$149 = igh
 2098.       t$396 = _zla( 0, igh )
 2106.       if ( -1 + igh >= 1 + low ) then
 2108.          if ( -2 + igh + -low >= 0 ) then
 2108.             $I_L2108_70 = 0
 2108.             do
 2109.                h = 0.0
 2110.                ort(1 + low + $I_L2108_70) = 0.0
 2111.                scal = 0.0
 2115.                $I_L2115_54 = 0
 2115. !dir$ ivdep
 2115.                do
 2116.                   scal = scal + abs( a(1 + low + $I_L2115_54 + $I_L2108_70, low + $I_L2108_70) )
 2117.                   $I_L2115_54 = 1 + $I_L2115_54
 2115.                   if ( $I_L2115_54 >= igh + -low + -$I_L2108_70 ) exit
 2115.                enddo
 2119.                if ( scal /= 0.0 ) then
 2124.                   $I_L2124_56 = 0
 2124. !dir$ ivdep
 2124.                   do
 2126.                      $ort_WR0_R0 = ( a(igh + -$I_L2124_56, low + $I_L2108_70) * 1.0/scal )
 2126.                      ort(igh + -$I_L2124_56) = $ort_WR0_R0
 2127.                      h = h + $ort_WR0_R0 * $ort_WR0_R0
 2128.                      $I_L2124_56 = 1 + $I_L2124_56
 2124.                      if ( $I_L2124_56 >= igh + -low + -$I_L2108_70 ) exit
 2124.                   enddo
 2130.                   $g_S3 = -sign( _sqrt( h ), ort(1 + low + $I_L2108_70) )
 2131.                   $h_S6 = h + -( $g_S3 * ort(1 + low + $I_L2108_70) )
 2132.                   ort(1 + low + $I_L2108_70) = ort(1 + low + $I_L2108_70) + -$g_S3
 2136.                   if ( ( -1 + n + -low + -$I_L2108_70 ) >= 0 ) then
 2136.                      $I_L2136_66 = 0
 2136.                      do
 2137.                         f = 0.0
 2141.                         $I_L2141_58 = 0
 2141. !dir$ ivdep
 2141.                         do
 2143.                            f = f + ort(igh + -$I_L2141_58) * a(igh + -$I_L2141_58, 1 + low + $I_L2136_66 + $I_L2108_70)
 2144.                            $I_L2141_58 = 1 + $I_L2141_58
 2141.                            if ( $I_L2141_58 >= igh + -low + -$I_L2108_70 ) exit
 2141.                         enddo
 2146.                         $f_S8 = ( f * 1.0/$h_S6 )
 2148.                         $I_L2148_60 = 0
 2148. !dir$ ivdep
 2148.                         do
 2149.                            a(1 + low + $I_L2148_60 + $I_L2108_70, 1 + low + $I_L2136_66 + $I_L2108_70) = a(1 + low + $I_L2148_60 + $I_L2108_70, 1 + low + $I_L2136_66 + $I_L2108_70) + -( $f_S8 * ort(1 + low + $I_L2148_60 + $I_L2108_70) )
 2150.                            if ( abs( a(1 + low + $I_L2148_60 + $I_L2108_70, 1 + low + $I_L2136_66 + $I_L2108_70) ) < tolh ) then
 2150.                               a(1 + low + $I_L2148_60 + $I_L2108_70, 1 + low + $I_L2136_66 + $I_L2108_70) = tolh
 2150.                            endif
 2151.                            $I_L2148_60 = 1 + $I_L2148_60
 2150.                            if ( $I_L2148_60 >= igh + -low + -$I_L2108_70 ) exit
 2150.                         enddo
 2153.                         $I_L2136_66 = 1 + $I_L2136_66
 2151.                         if ( $I_L2136_66 >= n + -low + -$I_L2108_70 ) exit
 2151.                      enddo
 2151.                   endif
 2157.                   if ( igh > 0 ) then
 2157.                      $I_L2157_68 = 0
 2157. !dir$ ivdep
 2157.                      do
 2158.                         f = 0.0
 2162.                         $I_L2162_62 = 0
 2162. !dir$ unroll 4
 2162.                         do
 2164.                            f = f + ort(igh + -$I_L2162_62) * a(1 + $I_L2157_68, igh + -$I_L2162_62)
 2165.                            $I_L2162_62 = 1 + $I_L2162_62
 2162.                            if ( $I_L2162_62 >= igh + -low + -$I_L2108_70 ) exit
 2162.                         enddo
 2167.                         $f_S12 = ( f * 1.0/$h_S6 )
 2169.                         $I_L2169_64 = 0
 2169. !dir$ unroll 4
 2169.                         do
 2170.                            a(1 + $I_L2157_68, 1 + low + $I_L2169_64 + $I_L2108_70) = a(1 + $I_L2157_68, 1 + low + $I_L2169_64 + $I_L2108_70) + -( $f_S12 * ort(1 + low + $I_L2169_64 + $I_L2108_70) )
 2171.                            if ( abs( a(1 + $I_L2157_68, 1 + low + $I_L2169_64 + $I_L2108_70) ) < tolh ) then
 2171.                               a(1 + $I_L2157_68, 1 + low + $I_L2169_64 + $I_L2108_70) = tolh
 2171.                            endif
 2172.                            $I_L2169_64 = 1 + $I_L2169_64
 2171.                            if ( $I_L2169_64 >= igh + -low + -$I_L2108_70 ) exit
 2171.                         enddo
 2174.                         $I_L2157_68 = 1 + $I_L2157_68
 2172.                         if ( $I_L2157_68 >= igh ) exit
 2172.                      enddo
 2172.                   endif
 2177.                   a(1 + low + $I_L2108_70, low + $I_L2108_70) = scal * $g_S3
 2176.                   ort(1 + low + $I_L2108_70) = scal * ort(1 + low + $I_L2108_70)
 2178.                   if ( abs( ( scal * $g_S3 ) ) < tolh ) then
 2178.                      a(1 + low + $I_L2108_70, low + $I_L2108_70) = tolh
 2178.                   endif
 2178.                endif
 2179.                $I_L2108_70 = 1 + $I_L2108_70
 2179.                if ( $I_L2108_70 >= -1 + igh + -low ) exit
 2179.             enddo
 2179.          endif
 2179.       endif
 2182.       return
 2182.       end
 2182.       
 2185.       
 2185.       subroutine rg( nm, n, a, wr, wi, matz, z, ierr, eps, scal, ort )
 2185.       t$150 = nm
 2185.       t$151 = n
 2261.       t$397 = _zla( 0, nm )
 2185.       t$398 = _zla( 0, nm )
 2261.       t$399 = _zla( 0, n )
 2185.       t$400 = _zla( 0, nm ) * _zla( 0, n )
 2269.       tolh = eps
 2273.       if ( n > nm ) then
 2274.          ierr = 10 * n
 2274.       else
 2276.          $FROM_S0 = 1
 2276.          $FROM_S1 = 1
 2281.          t$125 = nm
 2281.          t$373 = _zla( 0, nm )
 2281.          t$374 = _zla( 0, nm )
 2281.          t$375 = _zla( 0, nm )
 2281.          $k_S5 = 1
 2281.          $l_S2 = n
 2281.          do
 2281.             if ( $FROM_S0 /= 1 ) then
 2281.                $FROM_S1 = 0
 2281.             endif
 2281.             do
 2281.                if ( $FROM_S1 /= 1 ) then
 2281.                   scal(m) = real( j, 8 )
 2281.                   if ( j + -m /= 0 ) then
 2281.                      if ( $l_S2 > 0 ) then
 2281.                         $I_L2281_280 = 0
 2281. !dir$ ivdep
 2281.                         do
 2281.                            $f_S4 = a(1 + $I_L2281_280, j)
 2281.                            a(1 + $I_L2281_280, j) = a(1 + $I_L2281_280, m)
 2281.                            a(1 + $I_L2281_280, m) = $f_S4
 2281.                            $I_L2281_280 = 1 + $I_L2281_280
 2281.                            if ( $I_L2281_280 >= $l_S2 ) exit
 2281.                         enddo
 2281.                      endif
 2281.                      if ( n + -$k_S5 >= 0 ) then
 2281.                         $I_L2281_282 = 0
 2281. !dir$ ivdep
 2281.                         do
 2281.                            $f_S7 = a(j, $k_S5 + $I_L2281_282)
 2281.                            a(j, $k_S5 + $I_L2281_282) = a(m, $k_S5 + $I_L2281_282)
 2281.                            a(m, $k_S5 + $I_L2281_282) = $f_S7
 2281.                            $I_L2281_282 = 1 + $I_L2281_282
 2281.                            if ( $I_L2281_282 >= 1 + n + -$k_S5 ) exit
 2281.                         enddo
 2281.                      endif
 2281.                   endif
 2281.                   if ( iexc == 1 .orelse. iexc /= 2 ) then
 2281.                      if ( $l_S2 /= 1 ) then
 2281.                         $l_S2 = -1 + $l_S2
 2281.                         goto 10
 2281.                      endif
 2281.                   else
 2281.                      $k_S5 = 1 + $k_S5
 2281.                      goto 20
 2281.                   endif
 2281.                else
 2281.    10             continue
 2281.                   if ( $l_S2 <= 0 ) then
 2281.    20                continue
 2281.                      if ( $l_S2 + -$k_S5 >= 0 ) then
 2281.                         $I_L2281_346 = 0
 2281.                         do
 2281.                            $I_L2281_286 = 0
 2281. !dir$ ivdep
 2281.                            do
 2281.                               if ( $I_L2281_286 + -$I_L2281_346 == 0 .orelse. a($k_S5 + $I_L2281_286, $k_S5 + $I_L2281_346) == 0.0 ) then
 2281.                                  $I_L2281_286 = 1 + $I_L2281_286
 2281.                               else
 2281.                               endif
 2281.                               if ( $I_L2281_286 >= 1 + $l_S2 + -$k_S5 ) exit
 2281.                            enddo
 2281.                            j = ( $k_S5 + $I_L2281_346 )
 2281.                            $FROM_S0 = 0
 2281.                            m = $k_S5
 2281.                            iexc = 2
 2281.                         else
 2281.                            if ( $l_S2 + -$k_S5 >= 0 ) then
 2281.                               $I_L2281_288 = 0
 2281. !dir$ ivdep
 2281.                               do
 2281.                                  scal($k_S5 + $I_L2281_288) = 1.0
 2281.                                  $I_L2281_288 = 1 + $I_L2281_288
 2281.                                  if ( $I_L2281_288 >= 1 + $l_S2 + -$k_S5 ) exit
 2281.                               enddo
 2281.                               do
 2281.                                  $noconv_S21 = .false.
 2281.                                  $I_L2281_348 = 0
 2281.                                  do
 2281.                                     c = 0.0
 2281.                                     r = 0.0
 2281.                                     $I_L2281_174 = 0
 2281.                                     if ( 0 >= $I_L2281_348 ) then
 2281.                                        goto 30
 2281.                                     else
 2281.                                        $I_L2281_290 = 0
 2281. !dir$ ivdep
 2281.                                        do
 2281.                                           r = r + abs( a($k_S5 + $I_L2281_348, $k_S5 + $I_L2281_290) )
 2281.                                           c = c + abs( a($k_S5 + $I_L2281_290, $k_S5 + $I_L2281_348) )
 2281.                                           $I_L2281_290 = 1 + $I_L2281_290
 2281.                                           if ( $I_L2281_290 >= min( $I_L2281_348, 1 + $l_S2 + -$k_S5 ) ) exit
 2281.                                        enddo
 2281.                                        $I_L2281_174 = min( $I_L2281_348, 1 + $l_S2 + -$k_S5 )
 2281.                                        if ( $I_L2281_348 < 1 + $l_S2 + -$k_S5 ) then
 2281.    30                                     continue
 2281.                                           if ( $I_L2281_348 + -$I_L2281_174 == 0 ) then
 2281.                                              $I_L2281_174 = 1 + $I_L2281_174
 2281.                                              if ( $I_L2281_174 < 1 + $l_S2 + -$k_S5 ) then
 2281.                                                 goto 40
 2281.                                              endif
 2281.                                           else
 2281.    40                                        continue
 2281.                                              $I_L2281_342 = 0
 2281. !dir$ ivdep
 2281.                                              do
 2281.                                                 r = r + abs( a($k_S5 + $I_L2281_348, $k_S5 + $I_L2281_174 + $I_L2281_342) )
 2281.                                                 c = c + abs( a($k_S5 + $I_L2281_174 + $I_L2281_342, $k_S5 + $I_L2281_348) )
 2281.                                                 $I_L2281_342 = 1 + $I_L2281_342
 2281.                                                 if ( $I_L2281_342 >= 1 + $l_S2 + -$k_S5 + -$I_L2281_174 ) exit
 2281.                                              enddo
 2281.                                           endif
 2281.                                        endif
 2281.                                     endif
 2281.                                     if ( c /= 0.0 ) then
 2281.                                        if ( r /= 0.0 ) then
 2281.                                           $g_S15 = ( 5.0e-1 * r )
 2281.                                           f = 1.0
 2281.                                           $s_S17 = c + r
 2281.                                           do
 2281.                                              if ( c >= $g_S15 ) goto 50
 2281.                                              c = 4.0 * c
 2281.                                           enddo
 2281.    50                                     continue
 2281.                                           $g_S16 = 2.0 * r
 2281.                                           do
 2281.                                              if ( c < $g_S16 ) goto 60
 2281.                                              c = ( 2.5e-1 * c )
 2281.                                           enddo
 2281.    60                                     continue
 2281.                                           if ( ( ( c + r ) * 1.0/f ) < 9.4999999999999996e-1 * $s_S17 ) then
 2281.                                              $g_S19 = 1.0/f
 2281.                                              $noconv_S21 = .true.
 2281.                                              scal($k_S5 + $I_L2281_348) = f * scal($k_S5 + $I_L2281_348)
 2281.                                              if ( n + -$k_S5 >= 0 ) then
 2281.                                                 $I_L2281_292 = 0
 2281. !dir$ ivdep
 2281.                                                 do
 2281.                                                    a($k_S5 + $I_L2281_348, $k_S5 + $I_L2281_292) = $g_S19 * a($k_S5 + $I_L2281_348, $k_S5 + $I_L2281_292)
 2281.                                                    $I_L2281_292 = 1 + $I_L2281_292
 2281.                                                    if ( $I_L2281_292 >= 1 + n + -$k_S5 ) exit
 2281.                                                 enddo
 2281.                                              endif
 2281.                                              if ( $l_S2 > 0 ) then
 2281.                                                 $I_L2281_294 = 0
 2281. !dir$ ivdep
 2281.                                                 do
 2281.                                                    a(1 + $I_L2281_294, $k_S5 + $I_L2281_348) = f * a(1 + $I_L2281_294, $k_S5 + $I_L2281_348)
 2281.                                                    $I_L2281_294 = 1 + $I_L2281_294
 2281.                                                    if ( $I_L2281_294 >= $l_S2 ) exit
 2281.                                                 enddo
 2281.                                              endif
 2281.                                           endif
 2281.                                        endif
 2281.                                     endif
 2281.                                     $I_L2281_348 = 1 + $I_L2281_348
 2281.                                     if ( $I_L2281_348 >= 1 + $l_S2 + -$k_S5 ) exit
 2281.                                  enddo
 2281.                                  if ( $noconv_S21 == .false. ) exit
 2281.                               enddo
 2281.                            endif
 2281.                         endif
 2281.                         goto 70
 2281.                      endif
 2281.                      $I_L2281_344 = 0
 2281.                      do
 2281.                         $I_L2281_284 = 0
 2281. !dir$ ivdep
 2281.                         do
 2281.                            if ( $I_L2281_284 + $I_L2281_344 + -$l_S2 == -1 .orelse. a($l_S2 + -$I_L2281_344, 1 + $I_L2281_284) == 0.0 ) then
 2281.                               $I_L2281_284 = 1 + $I_L2281_284
 2281.                            else
 2281.                            endif
 2281.                            if ( $I_L2281_284 >= $l_S2 ) exit
 2281.                         enddo
 2281.                         j = ( $l_S2 + -$I_L2281_344 )
 2281.                         $FROM_S1 = 0
 2281.                         m = $l_S2
 2281.                         iexc = 1
 2281.                      endif
 2281.    70                continue
 2281.                      low = $k_S5
 2281.                      igh = $l_S2
 2287.                      t$147 = nm
 2287.                      t$148 = n
 2287.                      t$392 = max( 0, nm )
 2287.                      t$393 = max( 0, nm )
 2287.                      t$394 = max( 0, n )
 2287.                      t$395 = max( 0, nm ) * max( 0, n )
 2287.                      t$149 = $l_S2
 2287.                      t$396 = max( 0, $l_S2 )
 2287.                      if ( -1 + $l_S2 >= 1 + $k_S5 ) then
 2287.                         if ( -2 + $l_S2 + -$k_S5 >= 0 ) then
 2287.                            $I_L2287_374 = 0
 2287.                            do
 2287.                               h = 0.0
 2287.                               ort(1 + $k_S5 + $I_L2287_374) = 0.0
 2287.                               scal = 0.0
 2287.                               $I_L2287_296 = 0
 2287. !dir$ ivdep
 2287.                               do
 2287.                                  scal = scal + abs( a(1 + $k_S5 + $I_L2287_296 + $I_L2287_374, $k_S5 + $I_L2287_374) )
 2287.                                  $I_L2287_296 = 1 + $I_L2287_296
 2287.                                  if ( $I_L2287_296 >= $l_S2 + -$k_S5 + -$I_L2287_374 ) exit
 2287.                               enddo
 2287.                               if ( scal /= 0.0 ) then
 2287.                                  $I_L2287_298 = 0
 2287. !dir$ ivdep
 2287.                                  do
 2287.                                     $ort_WR0_R0 = ( a($l_S2 + -$I_L2287_298, $k_S5 + $I_L2287_374) * 1.0/scal )
 2287.                                     ort($l_S2 + -$I_L2287_298) = $ort_WR0_R0
 2287.                                     h = h + $ort_WR0_R0 * $ort_WR0_R0
 2287.                                     $I_L2287_298 = 1 + $I_L2287_298
 2287.                                     if ( $I_L2287_298 >= $l_S2 + -$k_S5 + -$I_L2287_374 ) exit
 2287.                                  enddo
 2287.                                  $g_S25 = -sign( _sqrt( h ), ort(1 + $k_S5 + $I_L2287_374) )
 2287.                                  $h_S28 = h + -( $g_S25 * ort(1 + $k_S5 + $I_L2287_374) )
 2287.                                  ort(1 + $k_S5 + $I_L2287_374) = ort(1 + $k_S5 + $I_L2287_374) + -$g_S25
 2287.                                  if ( ( -1 + n + -$k_S5 + -$I_L2287_374 ) >= 0 ) then
 2287.                                     $I_L2287_350 = 0
 2287.                                     do
 2287.                                        f = 0.0
 2287.                                        $I_L2287_300 = 0
 2287. !dir$ ivdep
 2287.                                        do
 2287.                                           f = f + ort($l_S2 + -$I_L2287_300) * a($l_S2 + -$I_L2287_300, 1 + $k_S5 + $I_L2287_350 + $I_L2287_374)
 2287.                                           $I_L2287_300 = 1 + $I_L2287_300
 2287.                                           if ( $I_L2287_300 >= $l_S2 + -$k_S5 + -$I_L2287_374 ) exit
 2287.                                        enddo
 2287.                                        $f_S30 = ( f * 1.0/$h_S28 )
 2287.                                        $I_L2287_302 = 0
 2287. !dir$ ivdep
 2287.                                        do
 2287.                                           a(1 + $k_S5 + $I_L2287_302 + $I_L2287_374, 1 + $k_S5 + $I_L2287_350 + $I_L2287_374) = a(1 + $k_S5 + $I_L2287_302 + $I_L2287_374, 1 + $k_S5 + $I_L2287_350 + $I_L2287_374) + -( $f_S30 * ort(1 + $k_S5 + $I_L2287_302 + $I_L2287_374) )
 2287.                                           if ( abs( a(1 + $k_S5 + $I_L2287_302 + $I_L2287_374, 1 + $k_S5 + $I_L2287_350 + $I_L2287_374) ) < eps ) then
 2287.                                              a(1 + $k_S5 + $I_L2287_302 + $I_L2287_374, 1 + $k_S5 + $I_L2287_350 + $I_L2287_374) = eps
 2287.                                           endif
 2287.                                           $I_L2287_302 = 1 + $I_L2287_302
 2287.                                           if ( $I_L2287_302 >= $l_S2 + -$k_S5 + -$I_L2287_374 ) exit
 2287.                                        enddo
 2287.                                        $I_L2287_350 = 1 + $I_L2287_350
 2287.                                        if ( $I_L2287_350 >= n + -$k_S5 + -$I_L2287_374 ) exit
 2287.                                     enddo
 2287.                                  endif
 2287.                                  if ( $l_S2 > 0 ) then
 2287.                                     $I_L2287_352 = 0
 2287. !dir$ ivdep
 2287.                                     do
 2287.                                        f = 0.0
 2287.                                        $I_L2287_304 = 0
 2287. !dir$ unroll 4
 2287.                                        do
 2287.                                           f = f + ort($l_S2 + -$I_L2287_304) * a(1 + $I_L2287_352, $l_S2 + -$I_L2287_304)
 2287.                                           $I_L2287_304 = 1 + $I_L2287_304
 2287.                                           if ( $I_L2287_304 >= $l_S2 + -$k_S5 + -$I_L2287_374 ) exit
 2287.                                        enddo
 2287.                                        $f_S34 = ( f * 1.0/$h_S28 )
 2287.                                        $I_L2287_306 = 0
 2287. !dir$ unroll 4
 2287.                                        do
 2287.                                           a(1 + $I_L2287_352, 1 + $k_S5 + $I_L2287_306 + $I_L2287_374) = a(1 + $I_L2287_352, 1 + $k_S5 + $I_L2287_306 + $I_L2287_374) + -( $f_S34 * ort(1 + $k_S5 + $I_L2287_306 + $I_L2287_374) )
 2287.                                           if ( abs( a(1 + $I_L2287_352, 1 + $k_S5 + $I_L2287_306 + $I_L2287_374) ) < eps ) then
 2287.                                              a(1 + $I_L2287_352, 1 + $k_S5 + $I_L2287_306 + $I_L2287_374) = eps
 2287.                                           endif
 2287.                                           $I_L2287_306 = 1 + $I_L2287_306
 2287.                                           if ( $I_L2287_306 >= $l_S2 + -$k_S5 + -$I_L2287_374 ) exit
 2287.                                        enddo
 2287.                                        $I_L2287_352 = 1 + $I_L2287_352
 2287.                                        if ( $I_L2287_352 >= $l_S2 ) exit
 2287.                                     enddo
 2287.                                  endif
 2287.                                  a(1 + $k_S5 + $I_L2287_374, $k_S5 + $I_L2287_374) = scal * $g_S25
 2287.                                  ort(1 + $k_S5 + $I_L2287_374) = scal * ort(1 + $k_S5 + $I_L2287_374)
 2287.                                  if ( abs( ( scal * $g_S25 ) ) < eps ) then
 2287.                                     a(1 + $k_S5 + $I_L2287_374, $k_S5 + $I_L2287_374) = eps
 2287.                                  endif
 2287.                               endif
 2287.                               $I_L2287_374 = 1 + $I_L2287_374
 2287.                               if ( $I_L2287_374 >= -1 + $l_S2 + -$k_S5 ) exit
 2287.                            enddo
 2287.                         endif
 2287.                      endif
 2289.                      if ( matz /= 0 ) then
 2293.                         t$142 = nm
 2293.                         t$143 = n
 2293.                         t$388 = max( 0, nm )
 2293.                         t$389 = max( 0, nm )
 2293.                         t$390 = max( 0, n )
 2293.                         t$391 = max( 0, nm ) * max( 0, n )
 2293.                         if ( n > 0 ) then
 2293.                            $I_L2293_366 = 0
 2293.                            do
 2293.                               $I_L2293_332 = 0
 2293. !dir$ ivdep
 2293.                               do
 2293.                                  z(1 + $I_L2293_332, 1 + $I_L2293_366) = 0.0
 2293.                                  $I_L2293_332 = 1 + $I_L2293_332
 2293.                                  if ( $I_L2293_332 >= n ) exit
 2293.                               enddo
 2293.                               $I_L2293_366 = 1 + $I_L2293_366
 2293.                               if ( $I_L2293_366 >= n ) exit
 2293.                            enddo
 2293.                            $I_L2293_334 = 0
 2293. !dir$ ivdep
 2293.                            do
 2293.                               z(1 + $I_L2293_334, 1 + $I_L2293_334) = 1.0
 2293.                               $I_L2293_334 = 1 + $I_L2293_334
 2293.                               if ( $I_L2293_334 >= n ) exit
 2293.                            enddo
 2293.                         endif
 2293.                         if ( -1 + $l_S2 + -$k_S5 > 0 ) then
 2293.                            $I_L2293_376 = 0
 2293.                            do
 2293.                               if ( a(-1 + $l_S2 + -$I_L2293_376, -2 + $l_S2 + -$I_L2293_376) /= 0.0 ) then
 2293.                                  $I_L2293_308 = 0
 2293. !dir$ ivdep
 2293.                                  do
 2293.                                     ort($l_S2 + $I_L2293_308 + -$I_L2293_376) = a($l_S2 + $I_L2293_308 + -$I_L2293_376, -2 + $l_S2 + -$I_L2293_376)
 2293.                                     $I_L2293_308 = 1 + $I_L2293_308
 2293.                                     if ( $I_L2293_308 >= 1 + $I_L2293_376 ) exit
 2293.                                  enddo
 2293.                                  $SCA_a_I0 = a(-1 + $l_S2 + -$I_L2293_376, -2 + $l_S2 + -$I_L2293_376)
 2293.                                  $SC_ort_I2 = ort(-1 + $l_S2 + -$I_L2293_376)
 2293.                                  $I_L2293_354 = 0
 2293.                                  do
 2293.                                     g = 0.0
 2293.                                     $I_L2293_310 = 0
 2293. !dir$ ivdep
 2293.                                     do
 2293.                                        g = g + z(-1 + $l_S2 + $I_L2293_310 + -$I_L2293_376, -1 + $l_S2 + $I_L2293_354 + -$I_L2293_376) * ort(-1 + $l_S2 + $I_L2293_310 + -$I_L2293_376)
 2293.                                        $I_L2293_310 = 1 + $I_L2293_310
 2293.                                        if ( $I_L2293_310 >= 2 + $I_L2293_376 ) exit
 2293.                                     enddo
 2293.                                     $g_S42 = ( 1.0/$SCA_a_I0 * ( g * 1.0/$SC_ort_I2 ) )
 2293.                                     $I_L2293_312 = 0
 2293. !dir$ ivdep
 2293.                                     do
 2293.                                        z(-1 + $l_S2 + $I_L2293_312 + -$I_L2293_376, -1 + $l_S2 + $I_L2293_354 + -$I_L2293_376) = z(-1 + $l_S2 + $I_L2293_312 + -$I_L2293_376, -1 + $l_S2 + $I_L2293_354 + -$I_L2293_376) + $g_S42 * ort(-1 + $l_S2 + $I_L2293_312 + -$I_L2293_376)
 2293.                                        if ( abs( z(-1 + $l_S2 + $I_L2293_312 + -$I_L2293_376, -1 + $l_S2 + $I_L2293_354 + -$I_L2293_376) ) < eps ) then
 2293.                                           z(-1 + $l_S2 + $I_L2293_312 + -$I_L2293_376, -1 + $l_S2 + $I_L2293_354 + -$I_L2293_376) = eps
 2293.                                        endif
 2293.                                        $I_L2293_312 = 1 + $I_L2293_312
 2293.                                        if ( $I_L2293_312 >= 2 + $I_L2293_376 ) exit
 2293.                                     enddo
 2293.                                     $I_L2293_354 = 1 + $I_L2293_354
 2293.                                     if ( $I_L2293_354 >= 2 + $I_L2293_376 ) exit
 2293.                                  enddo
 2293.                               endif
 2293.                               $I_L2293_376 = 1 + $I_L2293_376
 2293.                               if ( $I_L2293_376 >= -1 + $l_S2 + -$k_S5 ) exit
 2293.                            enddo
 2293.                         endif
 2293.                      endif
 2299.                      $t_S43 = hqr2( nm, n, low, igh, a(1, 1), wr(1), wi(1), z(1, 1), ierr, matz, eps, tolh, 0 )
 2299.                      if ( $t_S43 /= 1 ) then
 2301.                         if ( ierr == 0 ) then
 2306.                            t$127 = n
 2306.                            t$376 = max( 0, n )
 2306.                            t$126 = nm
 2306.                            t$377 = max( 0, nm )
 2306.                            t$378 = max( 0, nm )
 2306.                            t$379 = max( 0, nm ) * max( 0, n )
 2306.                            if ( n /= 0 ) then
 2306.                               if ( igh + -low /= 0 ) then
 2306.                                  if ( igh + -low >= 0 ) then
 2306.                                     if ( n > 0 ) then
 2306.                                        $I_L2306_356 = 0
 2306. !dir$ ivdep
 2306.                                        do
 2306.                                           $s_S46 = scal(low + $I_L2306_356)
 2306.                                           $I_L2306_314 = 0
 2306. !dir$ unroll 4
 2306.                                           do
 2306.                                              z(low + $I_L2306_356, 1 + $I_L2306_314) = $s_S46 * z(low + $I_L2306_356, 1 + $I_L2306_314)
 2306.                                              $I_L2306_314 = 1 + $I_L2306_314
 2306.                                              if ( $I_L2306_314 >= n ) exit
 2306.                                           enddo
 2306.                                           $I_L2306_356 = 1 + $I_L2306_356
 2306.                                           if ( $I_L2306_356 >= 1 + igh + -low ) exit
 2306.                                        enddo
 2306.                                     endif
 2306.                                  endif
 2306.                               endif
 2306.                               if ( n > 0 ) then
 2306.                                  $I_L2306_234 = 0
 2306.                                  if ( 0 >= -1 + low ) then
 2306.                                     goto 80
 2306.                                  else
 2306.                                     if ( 0 > -1 + igh ) then
 2306.                                        goto 110
 2306.                                     else
 2306.                                        $I_L2306_358 = 0
 2306.                                        do
 2306.                                           $k_S49 = int( scal(-1 + low + -$I_L2306_358) )
 2306.                                           if ( $k_S49 + $I_L2306_358 + -low /= -1 ) then
 2306.                                              $I_L2306_316 = 0
 2306. !dir$ ivdep
 2306.                                              do
 2306.                                                 $s_S51 = z(-1 + low + -$I_L2306_358, 1 + $I_L2306_316)
 2306.                                                 z(-1 + low + -$I_L2306_358, 1 + $I_L2306_316) = z($k_S49, 1 + $I_L2306_316)
 2306.                                                 z($k_S49, 1 + $I_L2306_316) = $s_S51
 2306.                                                 $I_L2306_316 = 1 + $I_L2306_316
 2306.                                                 if ( $I_L2306_316 >= n ) exit
 2306.                                              enddo
 2306.                                           endif
 2306.                                           $I_L2306_358 = 1 + $I_L2306_358
 2306.                                           if ( $I_L2306_358 >= min( min( igh, -1 + low ), n ) ) exit
 2306.                                        enddo
 2306.                                        $I_L2306_234 = min( min( igh, -1 + low ), n )
 2306.                                        if ( min( min( igh, -1 + low ), n ) < min( n, -1 + low ) ) then
 2306.   110                                     continue
 2306.                                           $I_L2306_372 = 0
 2306.                                           do
 2306.                                              $k_S49 = int( scal(-1 + low + -$I_L2306_234 + -$I_L2306_372) )
 2306.                                              if ( $k_S49 + $I_L2306_234 + $I_L2306_372 + -low /= -1 ) then
 2306.                                                 $I_L2306_340 = 0
 2306. !dir$ ivdep
 2306.                                                 do
 2306.                                                    $s_S51 = z(-1 + low + -$I_L2306_234 + -$I_L2306_372, 1 + $I_L2306_340)
 2306.                                                    z(-1 + low + -$I_L2306_234 + -$I_L2306_372, 1 + $I_L2306_340) = z($k_S49, 1 + $I_L2306_340)
 2306.                                                    z($k_S49, 1 + $I_L2306_340) = $s_S51
 2306.                                                    $I_L2306_340 = 1 + $I_L2306_340
 2306.                                                    if ( $I_L2306_340 >= n ) exit
 2306.                                                 enddo
 2306.                                              endif
 2306.                                              $I_L2306_372 = 1 + $I_L2306_372
 2306.                                              if ( $I_L2306_372 >= min( n, -1 + low ) + -$I_L2306_234 ) exit
 2306.                                           enddo
 2306.                                           $I_L2306_234 = min( n, -1 + low )
 2306.                                        endif
 2306.                                     endif
 2306.                                     if ( $I_L2306_234 < n ) then
 2306.    80                                  continue
 2306.                                        if ( $I_L2306_234 > -1 + igh ) then
 2306.                                           goto 90
 2306.                                        else
 2306.                                           if ( $I_L2306_234 >= -1 + low ) then
 2306.                                              goto 100
 2306.                                           else
 2306.                                              $Trips02_N270 = min( min( igh, -1 + low ), n ) + -$I_L2306_234
 2306.                                              $$I_L2306_234_N271 = $I_L2306_234
 2306.                                              $I_L2306_368 = 0
 2306.                                              do
 2306.                                                 $k_S49 = int( scal(1 + $I_L2306_234 + $I_L2306_368) )
 2306.                                                 if ( $k_S49 + -$I_L2306_234 + -$I_L2306_368 /= 1 ) then
 2306.                                                    $I_L2306_336 = 0
 2306. !dir$ ivdep
 2306.                                                    do
 2306.                                                       $s_S51 = z(1 + $I_L2306_234 + $I_L2306_368, 1 + $I_L2306_336)
 2306.                                                       z(1 + $I_L2306_234 + $I_L2306_368, 1 + $I_L2306_336) = z($k_S49, 1 + $I_L2306_336)
 2306.                                                       z($k_S49, 1 + $I_L2306_336) = $s_S51
 2306.                                                       $I_L2306_336 = 1 + $I_L2306_336
 2306.                                                       if ( $I_L2306_336 >= n ) exit
 2306.                                                    enddo
 2306.                                                 endif
 2306.                                                 $I_L2306_368 = 1 + $I_L2306_368
 2306.                                                 if ( $I_L2306_368 >= min( min( igh, -1 + low ), n ) + -$I_L2306_234 ) exit
 2306.                                              enddo
 2306.                                              $I_L2306_234 = min( min( igh, -1 + low ), n )
 2306.                                              if ( $Trips02_N270 + $$I_L2306_234_N271 < min( n, igh ) ) then
 2306.   100                                           continue
 2306.                                                 $I_L2306_234 = min( n, igh )
 2306.                                              endif
 2306.                                           endif
 2306.                                           if ( $I_L2306_234 < n ) then
 2306.    90                                        continue
 2306.                                              $I_L2306_370 = 0
 2306.                                              do
 2306.                                                 $k_S49 = int( scal(1 + $I_L2306_234 + $I_L2306_370) )
 2306.                                                 if ( $k_S49 + -$I_L2306_234 + -$I_L2306_370 /= 1 ) then
 2306.                                                    $I_L2306_338 = 0
 2306. !dir$ ivdep
 2306.                                                    do
 2306.                                                       $s_S51 = z(1 + $I_L2306_234 + $I_L2306_370, 1 + $I_L2306_338)
 2306.                                                       z(1 + $I_L2306_234 + $I_L2306_370, 1 + $I_L2306_338) = z($k_S49, 1 + $I_L2306_338)
 2306.                                                       z($k_S49, 1 + $I_L2306_338) = $s_S51
 2306.                                                       $I_L2306_338 = 1 + $I_L2306_338
 2306.                                                       if ( $I_L2306_338 >= n ) exit
 2306.                                                    enddo
 2306.                                                 endif
 2306.                                                 $I_L2306_370 = 1 + $I_L2306_370
 2306.                                                 if ( $I_L2306_370 >= n + -$I_L2306_234 ) exit
 2306.                                              enddo
 2306.                                           endif
 2306.                                        endif
 2306.                                     endif
 2306.                                  endif
 2306.                               endif
 2306.                            endif
 2311.                            t$179 = n
 2311.                            t$413 = max( 0, n )
 2311.                            t$178 = nm
 2311.                            t$414 = max( 0, nm )
 2311.                            t$415 = max( 0, nm )
 2311.                            t$416 = max( 0, nm ) * max( 0, n )
 2311.                            if ( matz /= 2 ) then
 2311.                               if ( n > 0 ) then
 2311.                                  $I_L2311_360 = 0
 2311.                                  do
 2311.                                     $I_L2311_318 = 0
 2311. !dir$ ivdep
 2311.                                     do
 2311.                                        a(1 + $I_L2311_318, 1 + $I_L2311_360) = z(1 + $I_L2311_318, 1 + $I_L2311_360)
 2311.                                        $I_L2311_318 = 1 + $I_L2311_318
 2311.                                        if ( $I_L2311_318 >= n ) exit
 2311.                                     enddo
 2311.                                     $I_L2311_360 = 1 + $I_L2311_360
 2311.                                     if ( $I_L2311_360 >= n ) exit
 2311.                                  enddo
 2311.                                  $I_L2311_362 = 0
 2311.                                  do
 2311.                                     if ( wi(1 + $I_L2311_362) == 0.0 ) then
 2311.                                        zz = 0.0
 2311.                                        $I_L2311_324 = 0
 2311. !dir$ unroll 4
 2311.                                        do
 2311.                                           zz = max( zz, abs( a(1 + $I_L2311_324, 1 + $I_L2311_362) ) )
 2311.                                           if ( abs( a(1 + $I_L2311_324, 1 + $I_L2311_362) ) == zz ) then
 2311.                                              ic = ( 1 + $I_L2311_324 )
 2311.                                           endif
 2311.                                           $I_L2311_324 = 1 + $I_L2311_324
 2311.                                           if ( $I_L2311_324 >= n ) exit
 2311.                                        enddo
 2311.                                        $SCA_a_I1 = a(ic, 1 + $I_L2311_362)
 2311.                                        $I_L2311_326 = 0
 2311. !dir$ ivdep
 2311.                                        do
 2311.                                           z(1 + $I_L2311_326, 1 + $I_L2311_362) = ( a(1 + $I_L2311_326, 1 + $I_L2311_362) * 1.0/$SCA_a_I1 )
 2311.                                           $I_L2311_326 = 1 + $I_L2311_326
 2311.                                           if ( $I_L2311_326 >= n ) exit
 2311.                                        enddo
 2311.                                     else if ( wi(1 + $I_L2311_362) > 0.0 ) then
 2311.                                        zz = 0.0
 2311.                                        $I_L2311_320 = 0
 2311. !dir$ unroll 4
 2311.                                        do
 2311.                                           $div_S58 = a(1 + $I_L2311_320, 2 + $I_L2311_362) * a(1 + $I_L2311_320, 2 + $I_L2311_362) + a(1 + $I_L2311_320, 1 + $I_L2311_362) * a(1 + $I_L2311_320, 1 + $I_L2311_362)
 2311.                                           zz = max( zz, $div_S58 )
 2311.                                           if ( $div_S58 == zz ) then
 2311.                                              ic = ( 1 + $I_L2311_320 )
 2311.                                           endif
 2311.                                           $I_L2311_320 = 1 + $I_L2311_320
 2311.                                           if ( $I_L2311_320 >= n ) exit
 2311.                                        enddo
 2311.                                        if ( abs( a(ic, 1 + $I_L2311_362) ) < abs( a(ic, 2 + $I_L2311_362) ) ) then
 2311.                                           $div_S59 = 1.0/a(ic, 2 + $I_L2311_362)
 2311.                                        else
 2311.                                           $div_S59 = 1.0/a(ic, 1 + $I_L2311_362)
 2311.                                        endif
 2311.                                        if ( $div_S59 /= 0.0 ) then
 2311.                                           $I_L2311_322 = 0
 2311. !dir$ ivdep
 2311.                                           do
 2311.                                              z(1 + $I_L2311_322, 1 + $I_L2311_362) = $div_S59 * a(1 + $I_L2311_322, 1 + $I_L2311_362)
 2311.                                              z(1 + $I_L2311_322, 2 + $I_L2311_362) = $div_S59 * a(1 + $I_L2311_322, 2 + $I_L2311_362)
 2311.                                              $I_L2311_322 = 1 + $I_L2311_322
 2311.                                              if ( $I_L2311_322 >= n ) exit
 2311.                                           enddo
 2311.                                        endif
 2311.                                     endif
 2311.                                     $I_L2311_362 = 1 + $I_L2311_362
 2311.                                     if ( $I_L2311_362 >= n ) exit
 2311.                                  enddo
 2311.                               endif
 2311.                               if ( matz /= 3 ) then
 2311.                                  div = 0.0
 2311.                                  if ( n > 0 ) then
 2311.                                     $I_L2311_328 = 0
 2311. !dir$ ivdep
 2311.                                     do
 2311.                                        $zz_S62 = _sqrt( wi(1 + $I_L2311_328) * wi(1 + $I_L2311_328) + wr(1 + $I_L2311_328) * wr(1 + $I_L2311_328) )
 2311.                                        div = max( div, $zz_S62 )
 2311.                                        $I_L2311_328 = 1 + $I_L2311_328
 2311.                                        if ( $I_L2311_328 >= n ) exit
 2311.                                     enddo
 2311.                                  endif
 2311.                                  if ( div <= 0.0 ) then
 2311.                                     div = 1.0
 2311.                                  endif
 2311.                                  if ( n > 0 ) then
 2311.                                     $I_L2311_364 = 0
 2311.                                     do
 2311.                                        if ( abs( ( wr(1 + $I_L2311_364) * 1.0/div ) ) < eps ) then
 2311.                                           wr(1 + $I_L2311_364) = 0.0
 2311.                                        endif
 2311.                                        if ( abs( ( wi(1 + $I_L2311_364) * 1.0/div ) ) < eps ) then
 2311.                                           wi(1 + $I_L2311_364) = 0.0
 2311.                                        endif
 2311.                                        $I_L2311_330 = 0
 2311. !dir$ ivdep
 2311.                                        do
 2311.                                           if ( abs( z(1 + $I_L2311_330, 1 + $I_L2311_364) ) < eps ) then
 2311.                                              z(1 + $I_L2311_330, 1 + $I_L2311_364) = 0.0
 2311.                                           endif
 2311.                                           $I_L2311_330 = 1 + $I_L2311_330
 2311.                                           if ( $I_L2311_330 >= n ) exit
 2311.                                        enddo
 2311.                                        $I_L2311_364 = 1 + $I_L2311_364
 2311.                                        if ( $I_L2311_364 >= n ) exit
 2311.                                     enddo
 2311.                                  endif
 2311.                               endif
 2311.                            endif
 2311.                         endif
 2311.                      endif
 2314.                      if ( ierr /= 0 ) then
 2315.                         $Unit_temp_O0 = nfprt
 2315.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$159,  _substr(t$158,1,83), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
 2315.                      endif
 2315.                   endif
 2320.                   return
 2320.       end
 2320.       
 2321.       
 2321.       subroutine tql2_i( nm, n, d, e, z, eps, ierr )
 2321.       t$160 = n
 2329.       t$401 = _zla( 0, n )
 2321.       t$162 = nm
 2329.       t$402 = _zla( 0, nm )
 2321.       t$403 = _zla( 0, nm )
 2321.       t$404 = _zla( 0, n ) * _zla( 0, nm )
 2342.       ierr = 0
 2344.       if ( -2 + n >= 0 ) then
 2344.          $I_L2344_56 = 0
 2344. !dir$ ivdep
 2344.          do
 2345.             e(1 + $I_L2344_56) = e(2 + $I_L2344_56)
 2346.             $I_L2344_56 = 1 + $I_L2344_56
 2344.             if ( $I_L2344_56 >= -1 + n ) exit
 2344.          enddo
 2344.       endif
 2348.       f = 0.0
 2349.       b = 0.0
 2350.       e(n) = 0.0
 2352.       if ( n > 0 ) then
 2352.          $I_L2352_72 = 0
 2352.          do
 2354.             $h_S2 = eps * ( abs( e(1 + $I_L2352_72) ) + abs( d(1 + $I_L2352_72) ) )
 2355.             b = max( b, $h_S2 )
 2359.             $I_L2359_58 = 0
 2359. !dir$ ivdep
 2359.             do
 2360.                if ( abs( e(1 + $I_L2359_58 + $I_L2352_72) ) <= b ) then
 2359.                   $m_S4 = ( 1 + $I_L2359_58 + $I_L2352_72 )
 2359.                   goto 120
 2359.                endif
 2365.                $I_L2359_58 = 1 + $I_L2359_58
 2365.                if ( $I_L2359_58 >= n + -$I_L2352_72 ) exit
 2365.             enddo
 2365.             $m_S4 = ( 1 + n )
 2365.   120       continue
 2367.             if ( $m_S4 + -$I_L2352_72 /= 1 ) then
 2368.                $I_j_70 = 0
 2368.                do
 2383.                   $g_S6 = d(1 + $I_L2352_72)
 2384.                   $p_S7 = ( 5.0e-1 * 1.0/e(1 + $I_L2352_72) * ( d(2 + $I_L2352_72) + -$g_S6 ) )
 2386.                   d(1 + $I_L2352_72) = ( e(1 + $I_L2352_72) * 1.0/( $p_S7 + sign( _sqrt( 1.0 + $p_S7 * $p_S7 ), $p_S7 ) ) )
 2387.                   $h_S8 = $g_S6 + -d(1 + $I_L2352_72)
 2389.                   if ( ( -2 + n + -$I_L2352_72 ) >= 0 ) then
 2389.                      $I_L2389_60 = 0
 2389. !dir$ ivdep
 2389.                      do
 2390.                         d(2 + $I_L2389_60 + $I_L2352_72) = d(2 + $I_L2389_60 + $I_L2352_72) + -$h_S8
 2391.                         $I_L2389_60 = 1 + $I_L2389_60
 2389.                         if ( $I_L2389_60 >= -1 + n + -$I_L2352_72 ) exit
 2389.                      enddo
 2389.                   endif
 2397.                   $p_S12 = d($m_S4)
 2398.                   $c_S11 = 1.0
 2399.                   $s_S14 = 0.0
 2393.                   f = f + $h_S8
 2404.                   if ( ( -1 + $m_S4 + -$I_L2352_72 ) > 0 ) then
 2404.                      $I_L2404_66 = 0
 2404.                      do
 2406.                         $g_S16 = $c_S11 * e(-1 + $m_S4 + -$I_L2404_66)
 2407.                         $h_S17 = $c_S11 * $p_S12
 2409.                         if ( abs( $p_S12 ) < abs( e(-1 + $m_S4 + -$I_L2404_66) ) ) then
 2410.                            $SCF_P2 = 1.0/e(-1 + $m_S4 + -$I_L2404_66)
 2412.                            $SCF_P3 = e(-1 + $m_S4 + -$I_L2404_66) * _sqrt( 1.0 + ( $p_S12 * $SCF_P2 ) * ( $p_S12 * $SCF_P2 ) )
 2412.                            e($m_S4 + -$I_L2404_66) = $s_S14 * $SCF_P3
 2413.                            $s_S14 = 1.0/_sqrt( 1.0 + ( $p_S12 * $SCF_P2 ) * ( $p_S12 * $SCF_P2 ) )
 2414.                            $c_S11 = ( $p_S12 * $SCF_P2 ) * 1.0/_sqrt( 1.0 + ( $p_S12 * $SCF_P2 ) * ( $p_S12 * $SCF_P2 ) )
 2414.                         else
 2416.                            $LD_SPLT_P0 = e(-1 + $m_S4 + -$I_L2404_66)
 2418.                            e($m_S4 + -$I_L2404_66) = $p_S12 * $s_S14 * _sqrt( 1.0 + ( $LD_SPLT_P0 * 1.0/$p_S12 ) * ( $LD_SPLT_P0 * 1.0/$p_S12 ) )
 2419.                            $s_S14 = ( ( $LD_SPLT_P0 * 1.0/$p_S12 ) * 1.0/_sqrt( 1.0 + ( $LD_SPLT_P0 * 1.0/$p_S12 ) * ( $LD_SPLT_P0 * 1.0/$p_S12 ) ) )
 2420.                            $c_S11 = 1.0/_sqrt( 1.0 + ( $LD_SPLT_P0 * 1.0/$p_S12 ) * ( $LD_SPLT_P0 * 1.0/$p_S12 ) )
 2420.                         endif
 2423.                         $p_S12 = -( $s_S14 * $g_S16 ) + $c_S11 * d(-1 + $m_S4 + -$I_L2404_66)
 2424.                         d($m_S4 + -$I_L2404_66) = $h_S17 + $s_S14 * ( $c_S11 * $g_S16 + $s_S14 * d(-1 + $m_S4 + -$I_L2404_66) )
 2428.                         $I_L2428_62 = 0
 2428. !dir$ ivdep
 2428.                         do
 2429.                            $h_S19 = z(1 + $I_L2428_62, $m_S4 + -$I_L2404_66)
 2430.                            z(1 + $I_L2428_62, $m_S4 + -$I_L2404_66) = $c_S11 * $h_S19 + $s_S14 * z(1 + $I_L2428_62, -1 + $m_S4 + -$I_L2404_66)
 2431.                            $LD_SPLT_P1 = z(1 + $I_L2428_62, -1 + $m_S4 + -$I_L2404_66)
 2431.                            z(1 + $I_L2428_62, -1 + $m_S4 + -$I_L2404_66) = -( $s_S14 * $h_S19 ) + $c_S11 * $LD_SPLT_P1
 2432.                            $I_L2428_62 = 1 + $I_L2428_62
 2428.                            if ( $I_L2428_62 >= n ) exit
 2428.                         enddo
 2434.                         $I_L2404_66 = 1 + $I_L2404_66
 2432.                         if ( $I_L2404_66 >= -1 + $m_S4 + -$I_L2352_72 ) exit
 2432.                      enddo
 2432.                   endif
 2436.                   e(1 + $I_L2352_72) = $p_S12 * $s_S14
 2437.                   d(1 + $I_L2352_72) = $c_S11 * $p_S12
 2438.                   if ( abs( ( $p_S12 * $s_S14 ) ) <= b ) then
 2434.                      goto 120
 2434.                   endif
 2368.                   $I_j_70 = 1 + $I_j_70
 2368.                   if ( $I_j_70 >= 50 ) exit
 2368.                enddo
 2352.                l = ( 1 + $I_L2352_72 )
 2372.                ierr = ( 1 + $I_L2352_72 )
 2373.                $Unit_temp_O0 = nfprt
 2373.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$165,  _substr(t$164,1,60), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( l, 0x2000200000000L ) ) )
 2373.             else
 2373.   120          continue
 2439.                d(1 + $I_L2352_72) = f + d(1 + $I_L2352_72)
 2440.                $I_L2352_72 = 1 + $I_L2352_72
 2439.             endif
 2439.             if ( $I_L2352_72 >= n ) exit
 2439.          enddo
 2439.          goto 130
 2439.       else
 2439.   130    continue
 2444.          if ( -2 + n >= 0 ) then
 2444.             $I_L2444_68 = 0
 2444.             do
 2446.                $k_S23 = ( 1 + $I_L2444_68 )
 2447.                $p_S21 = d(1 + $I_L2444_68)
 2449.                if ( ( -2 + n + -$I_L2444_68 ) >= 0 ) then
 2450.                   $W1 = -1 + n + -$I_L2444_68
 2450.                   $W2 = 1
 2450.                   $Maxmin_x_W0 = _idmin( $W1, d(2 + $I_L2444_68), $W2 )
 2450.                   $k_S23 = cvmg( 1 + $Maxmin_x_W0 + $I_L2444_68, ( 1 + $I_L2444_68 ), d(1 + $Maxmin_x_W0 + $I_L2444_68) < $p_S21 )
 2450.                   $p_S21 = cvmg( d(1 + $Maxmin_x_W0 + $I_L2444_68), $p_S21, d(1 + $Maxmin_x_W0 + $I_L2444_68) < $p_S21 )
 2450.                endif
 2456.                if ( $k_S23 + -$I_L2444_68 /= 1 ) then
 2457.                   d($k_S23) = d(1 + $I_L2444_68)
 2458.                   d(1 + $I_L2444_68) = $p_S21
 2460.                   $I_L2460_64 = 0
 2460. !dir$ ivdep
 2460.                   do
 2461.                      $p_S25 = z(1 + $I_L2460_64, 1 + $I_L2444_68)
 2462.                      z(1 + $I_L2460_64, 1 + $I_L2444_68) = z(1 + $I_L2460_64, $k_S23)
 2463.                      z(1 + $I_L2460_64, $k_S23) = $p_S25
 2464.                      $I_L2460_64 = 1 + $I_L2460_64
 2460.                      if ( $I_L2460_64 >= n ) exit
 2460.                   enddo
 2460.                endif
 2467.                $I_L2444_68 = 1 + $I_L2444_68
 2465.                if ( $I_L2444_68 >= -1 + n ) exit
 2465.             enddo
 2465.          endif
 2465.       endif
 2465.   140 continue
 2470.       return
 2470.       end
 2470.       
 2471.       
 2471.       subroutine tql2_i8( nm, n, d, e, z, eps, ierr )
 2471.       t$166 = n
 2479.       t$405 = _zla( 0, n )
 2471.       t$168 = nm
 2479.       t$406 = _zla( 0, nm )
 2471.       t$407 = _zla( 0, nm )
 2471.       t$408 = _zla( 0, n ) * _zla( 0, nm )
 2492.       ierr = 0
 2494.       if ( -2 + n >= 0 ) then
 2494.          $I_L2494_56 = 0
 2494. !dir$ ivdep
 2494.          do
 2495.             e(1 + $I_L2494_56) = e(2 + $I_L2494_56)
 2496.             $I_L2494_56 = 1 + $I_L2494_56
 2494.             if ( $I_L2494_56 >= -1 + n ) exit
 2494.          enddo
 2494.       endif
 2498.       f = 0.0
 2499.       b = 0.0
 2500.       e(n) = 0.0
 2502.       if ( n > 0 ) then
 2502.          $I_L2502_72 = 0
 2502.          do
 2504.             $h_S2 = eps * ( abs( e(1 + $I_L2502_72) ) + abs( d(1 + $I_L2502_72) ) )
 2505.             b = max( b, $h_S2 )
 2509.             $I_L2509_58 = 0
 2509. !dir$ ivdep
 2509.             do
 2510.                if ( abs( e(1 + $I_L2509_58 + $I_L2502_72) ) <= b ) then
 2509.                   $m_S4 = ( 1 + $I_L2509_58 + $I_L2502_72 )
 2509.                   goto 120
 2509.                endif
 2515.                $I_L2509_58 = 1 + $I_L2509_58
 2515.                if ( $I_L2509_58 >= n + -$I_L2502_72 ) exit
 2515.             enddo
 2515.             $m_S4 = ( 1 + n )
 2515.   120       continue
 2517.             if ( $m_S4 + -$I_L2502_72 /= 1 ) then
 2518.                $I_j_70 = 0
 2518.                do
 2533.                   $g_S6 = d(1 + $I_L2502_72)
 2534.                   $p_S7 = ( 5.0e-1 * 1.0/e(1 + $I_L2502_72) * ( d(2 + $I_L2502_72) + -$g_S6 ) )
 2536.                   d(1 + $I_L2502_72) = ( e(1 + $I_L2502_72) * 1.0/( $p_S7 + sign( _sqrt( 1.0 + $p_S7 * $p_S7 ), $p_S7 ) ) )
 2537.                   $h_S8 = $g_S6 + -d(1 + $I_L2502_72)
 2539.                   if ( ( -2 + n + -$I_L2502_72 ) >= 0 ) then
 2539.                      $I_L2539_60 = 0
 2539. !dir$ ivdep
 2539.                      do
 2540.                         d(2 + $I_L2539_60 + $I_L2502_72) = d(2 + $I_L2539_60 + $I_L2502_72) + -$h_S8
 2541.                         $I_L2539_60 = 1 + $I_L2539_60
 2539.                         if ( $I_L2539_60 >= -1 + n + -$I_L2502_72 ) exit
 2539.                      enddo
 2539.                   endif
 2547.                   $p_S12 = d($m_S4)
 2548.                   $c_S11 = 1.0
 2549.                   $s_S14 = 0.0
 2543.                   f = f + $h_S8
 2554.                   if ( ( -1 + $m_S4 + -$I_L2502_72 ) > 0 ) then
 2554.                      $I_L2554_66 = 0
 2554.                      do
 2556.                         $g_S16 = $c_S11 * e(-1 + $m_S4 + -$I_L2554_66)
 2557.                         $h_S17 = $c_S11 * $p_S12
 2559.                         if ( abs( $p_S12 ) < abs( e(-1 + $m_S4 + -$I_L2554_66) ) ) then
 2560.                            $SCF_P2 = 1.0/e(-1 + $m_S4 + -$I_L2554_66)
 2562.                            $SCF_P3 = e(-1 + $m_S4 + -$I_L2554_66) * _sqrt( 1.0 + ( $p_S12 * $SCF_P2 ) * ( $p_S12 * $SCF_P2 ) )
 2562.                            e($m_S4 + -$I_L2554_66) = $s_S14 * $SCF_P3
 2563.                            $s_S14 = 1.0/_sqrt( 1.0 + ( $p_S12 * $SCF_P2 ) * ( $p_S12 * $SCF_P2 ) )
 2564.                            $c_S11 = ( $p_S12 * $SCF_P2 ) * 1.0/_sqrt( 1.0 + ( $p_S12 * $SCF_P2 ) * ( $p_S12 * $SCF_P2 ) )
 2564.                         else
 2566.                            $LD_SPLT_P0 = e(-1 + $m_S4 + -$I_L2554_66)
 2568.                            e($m_S4 + -$I_L2554_66) = $p_S12 * $s_S14 * _sqrt( 1.0 + ( $LD_SPLT_P0 * 1.0/$p_S12 ) * ( $LD_SPLT_P0 * 1.0/$p_S12 ) )
 2569.                            $s_S14 = ( ( $LD_SPLT_P0 * 1.0/$p_S12 ) * 1.0/_sqrt( 1.0 + ( $LD_SPLT_P0 * 1.0/$p_S12 ) * ( $LD_SPLT_P0 * 1.0/$p_S12 ) ) )
 2570.                            $c_S11 = 1.0/_sqrt( 1.0 + ( $LD_SPLT_P0 * 1.0/$p_S12 ) * ( $LD_SPLT_P0 * 1.0/$p_S12 ) )
 2570.                         endif
 2573.                         $p_S12 = -( $s_S14 * $g_S16 ) + $c_S11 * d(-1 + $m_S4 + -$I_L2554_66)
 2574.                         d($m_S4 + -$I_L2554_66) = $h_S17 + $s_S14 * ( $c_S11 * $g_S16 + $s_S14 * d(-1 + $m_S4 + -$I_L2554_66) )
 2578.                         $I_L2578_62 = 0
 2578. !dir$ ivdep
 2578.                         do
 2579.                            $h_S19 = z(1 + $I_L2578_62, $m_S4 + -$I_L2554_66)
 2580.                            z(1 + $I_L2578_62, $m_S4 + -$I_L2554_66) = $c_S11 * $h_S19 + $s_S14 * z(1 + $I_L2578_62, -1 + $m_S4 + -$I_L2554_66)
 2581.                            $LD_SPLT_P1 = z(1 + $I_L2578_62, -1 + $m_S4 + -$I_L2554_66)
 2581.                            z(1 + $I_L2578_62, -1 + $m_S4 + -$I_L2554_66) = -( $s_S14 * $h_S19 ) + $c_S11 * $LD_SPLT_P1
 2582.                            $I_L2578_62 = 1 + $I_L2578_62
 2578.                            if ( $I_L2578_62 >= n ) exit
 2578.                         enddo
 2584.                         $I_L2554_66 = 1 + $I_L2554_66
 2582.                         if ( $I_L2554_66 >= -1 + $m_S4 + -$I_L2502_72 ) exit
 2582.                      enddo
 2582.                   endif
 2586.                   e(1 + $I_L2502_72) = $p_S12 * $s_S14
 2587.                   d(1 + $I_L2502_72) = $c_S11 * $p_S12
 2588.                   if ( abs( ( $p_S12 * $s_S14 ) ) <= b ) then
 2584.                      goto 120
 2584.                   endif
 2518.                   $I_j_70 = 1 + $I_j_70
 2518.                   if ( $I_j_70 >= 50 ) exit
 2518.                enddo
 2502.                l = ( 1 + $I_L2502_72 )
 2522.                ierr = ( 1 + $I_L2502_72 )
 2523.                $Unit_temp_O0 = nfprt
 2523.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$171,  _substr(t$170,1,60), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( l, 0x2000200000000L ) ) )
 2523.             else
 2523.   120          continue
 2589.                d(1 + $I_L2502_72) = f + d(1 + $I_L2502_72)
 2590.                $I_L2502_72 = 1 + $I_L2502_72
 2589.             endif
 2589.             if ( $I_L2502_72 >= n ) exit
 2589.          enddo
 2589.          goto 130
 2589.       else
 2589.   130    continue
 2594.          if ( -2 + n >= 0 ) then
 2594.             $I_L2594_68 = 0
 2594.             do
 2596.                $k_S23 = ( 1 + $I_L2594_68 )
 2597.                $p_S21 = d(1 + $I_L2594_68)
 2599.                if ( ( -2 + n + -$I_L2594_68 ) >= 0 ) then
 2600.                   $W1 = -1 + n + -$I_L2594_68
 2600.                   $W2 = 1
 2600.                   $Maxmin_x_W0 = _idmin( $W1, d(2 + $I_L2594_68), $W2 )
 2600.                   $k_S23 = cvmg( 1 + $Maxmin_x_W0 + $I_L2594_68, ( 1 + $I_L2594_68 ), d(1 + $Maxmin_x_W0 + $I_L2594_68) < $p_S21 )
 2600.                   $p_S21 = cvmg( d(1 + $Maxmin_x_W0 + $I_L2594_68), $p_S21, d(1 + $Maxmin_x_W0 + $I_L2594_68) < $p_S21 )
 2600.                endif
 2606.                if ( $k_S23 + -$I_L2594_68 /= 1 ) then
 2607.                   d($k_S23) = d(1 + $I_L2594_68)
 2608.                   d(1 + $I_L2594_68) = $p_S21
 2610.                   $I_L2610_64 = 0
 2610. !dir$ ivdep
 2610.                   do
 2611.                      $p_S25 = z(1 + $I_L2610_64, 1 + $I_L2594_68)
 2612.                      z(1 + $I_L2610_64, 1 + $I_L2594_68) = z(1 + $I_L2610_64, $k_S23)
 2613.                      z(1 + $I_L2610_64, $k_S23) = $p_S25
 2614.                      $I_L2610_64 = 1 + $I_L2610_64
 2610.                      if ( $I_L2610_64 >= n ) exit
 2610.                   enddo
 2610.                endif
 2617.                $I_L2594_68 = 1 + $I_L2594_68
 2615.                if ( $I_L2594_68 >= -1 + n ) exit
 2615.             enddo
 2615.          endif
 2615.       endif
 2615.   140 continue
 2620.       return
 2620.       end
 2620.       
 2621.       
 2621.       subroutine tred2( nm, n, a, d, e, z )
 2621.       t$172 = nm
 2621.       t$173 = n
 2625.       t$409 = _zla( 0, nm )
 2621.       t$410 = _zla( 0, nm )
 2625.       t$411 = _zla( 0, n )
 2621.       t$412 = _zla( 0, nm ) * _zla( 0, n )
 2631.       if ( n > 0 ) then
 2631.          $I_L2631_114 = 0
 2631.          do
 2632.             $I_L2632_94 = 0
 2632. !dir$ ivdep
 2632.             do
 2633.                z(1 + $I_L2631_114, 1 + $I_L2632_94) = a(1 + $I_L2631_114, 1 + $I_L2632_94)
 2634.                $I_L2632_94 = 1 + $I_L2632_94
 2632.                if ( $I_L2632_94 >= 1 + $I_L2631_114 ) exit
 2632.             enddo
 2634.             $I_L2631_114 = 1 + $I_L2631_114
 2634.             if ( $I_L2631_114 >= n ) exit
 2634.          enddo
 2634.       endif
 2636.       if ( n /= 1 ) then
 2638.          if ( -2 + n >= 0 ) then
 2638.             $I_L2638_122 = 0
 2638.             do
 2641.                h = 0.0
 2642.                scal = 0.0
 2643.                if ( -3 + ( n + -$I_L2638_122 ) >= 0 ) then
 2645.                   $I_L2645_96 = 0
 2645. !dir$ ivdep
 2645.                   do
 2646.                      scal = scal + abs( z(n + -$I_L2638_122, 1 + $I_L2645_96) )
 2647.                      $I_L2645_96 = 1 + $I_L2645_96
 2645.                      if ( $I_L2645_96 >= -1 + ( n + -$I_L2638_122 ) ) exit
 2645.                   enddo
 2649.                   if ( scal /= 0.0 ) then
 2653.                      $I_L2653_98 = 0
 2653. !dir$ ivdep
 2653.                      do
 2654.                         $z_WR0_R0 = ( z(n + -$I_L2638_122, 1 + $I_L2653_98) * 1.0/scal )
 2654.                         z(n + -$I_L2638_122, 1 + $I_L2653_98) = $z_WR0_R0
 2655.                         h = h + $z_WR0_R0 * $z_WR0_R0
 2656.                         $I_L2653_98 = 1 + $I_L2653_98
 2653.                         if ( $I_L2653_98 >= -1 + ( n + -$I_L2638_122 ) ) exit
 2653.                      enddo
 2658.                      $f_S5 = z(n + -$I_L2638_122, -1 + ( n + -$I_L2638_122 ))
 2660.                      e(n + -$I_L2638_122) = scal * ( -sign( _sqrt( h ), $f_S5 ) )
 2662.                      z(n + -$I_L2638_122, -1 + ( n + -$I_L2638_122 )) = $f_S5 + -( -sign( _sqrt( h ), $f_S5 ) )
 2663.                      f = 0.0
 2661.                      h = h + -( $f_S5 * ( -sign( _sqrt( h ), $f_S5 ) ) )
 2665.                      $I_L2665_116 = 0
 2665.                      do
 2666.                         z(1 + $I_L2665_116, n + -$I_L2638_122) = ( z(n + -$I_L2638_122, 1 + $I_L2665_116) * 1.0/h )
 2667.                         g = 0.0
 2669.                         $I_L2669_100 = 0
 2669. !dir$ ivdep
 2669.                         do
 2670.                            g = g + z(1 + $I_L2665_116, 1 + $I_L2669_100) * z(n + -$I_L2638_122, 1 + $I_L2669_100)
 2671.                            $I_L2669_100 = 1 + $I_L2669_100
 2669.                            if ( $I_L2669_100 >= 1 + $I_L2665_116 ) exit
 2669.                         enddo
 2676.                         $I_L2676_102 = 0
 2676. !dir$ ivdep
 2676.                         do
 2677.                            g = g + z(2 + $I_L2676_102 + $I_L2665_116, 1 + $I_L2665_116) * z(n + -$I_L2638_122, 2 + $I_L2676_102 + $I_L2665_116)
 2678.                            $I_L2676_102 = 1 + $I_L2676_102
 2676.                            if ( $I_L2676_102 >= -2 + -$I_L2665_116 + ( n + -$I_L2638_122 ) ) exit
 2676.                         enddo
 2680.                         e(1 + $I_L2665_116) = ( g * 1.0/h )
 2681.                         $LD_SPLT_P0 = z(n + -$I_L2638_122, 1 + $I_L2665_116)
 2681.                         f = f + $LD_SPLT_P0 * ( g * 1.0/h )
 2682.                         $I_L2665_116 = 1 + $I_L2665_116
 2680.                         if ( $I_L2665_116 >= -2 + ( n + -$I_L2638_122 ) ) exit
 2680.                      enddo
 2666.                      z(-1 + ( n + -$I_L2638_122 ), n + -$I_L2638_122) = ( z(n + -$I_L2638_122, -1 + ( n + -$I_L2638_122 )) * 1.0/h )
 2667.                      g = 0.0
 2669.                      $I_L2669_112 = 0
 2669. !dir$ ivdep
 2669.                      do
 2670.                         g = g + z(n + -$I_L2638_122, 1 + $I_L2669_112) * z(-1 + ( n + -$I_L2638_122 ), 1 + $I_L2669_112)
 2671.                         $I_L2669_112 = 1 + $I_L2669_112
 2669.                         if ( $I_L2669_112 >= -1 + ( n + -$I_L2638_122 ) ) exit
 2669.                      enddo
 2680.                      e(-1 + ( n + -$I_L2638_122 )) = ( g * 1.0/h )
 2681.                      $LD_SPLT_P0 = z(n + -$I_L2638_122, -1 + ( n + -$I_L2638_122 ))
 2681.                      f = f + $LD_SPLT_P0 * ( g * 1.0/h )
 2684.                      $hh_S10 = ( 5.0e-1 * f * 1.0/h )
 2686.                      $I_L2686_118 = 0
 2686.                      do
 2687.                         $f_S11 = z(n + -$I_L2638_122, 1 + $I_L2686_118)
 2688.                         $g_S12 = e(1 + $I_L2686_118) + -( $hh_S10 * $f_S11 )
 2689.                         e(1 + $I_L2686_118) = $g_S12
 2691.                         $I_L2691_104 = 0
 2691. !dir$ ivdep
 2691.                         do
 2692.                            z(1 + $I_L2686_118, 1 + $I_L2691_104) = z(1 + $I_L2686_118, 1 + $I_L2691_104) + -( $f_S11 * e(1 + $I_L2691_104) ) + -( $g_S12 * z(n + -$I_L2638_122, 1 + $I_L2691_104) )
 2693.                            $I_L2691_104 = 1 + $I_L2691_104
 2691.                            if ( $I_L2691_104 >= 1 + $I_L2686_118 ) exit
 2691.                         enddo
 2693.                         $I_L2686_118 = 1 + $I_L2686_118
 2693.                         if ( $I_L2686_118 >= -1 + ( n + -$I_L2638_122 ) ) exit
 2693.                      enddo
 2693.                   else
 2693.                      goto 10
 2693.                   endif
 2693.                else
 2693.    10             continue
 2650.                   e(n + -$I_L2638_122) = z(n + -$I_L2638_122, -1 + ( n + -$I_L2638_122 ))
 2650.                endif
 2695.                d(n + -$I_L2638_122) = h
 2696.                $I_L2638_122 = 1 + $I_L2638_122
 2695.                if ( $I_L2638_122 >= -1 + n ) exit
 2695.             enddo
 2695.          endif
 2695.       endif
 2698.       d(1) = 0.0
 2699.       e(1) = 0.0
 2701.       if ( n > 0 ) then
 2716.          d(1) = z(1, 1)
 2717.          z(1, 1) = 1.0
 2725.          if ( 1 < n ) then
 2701.             $I_L2701_124 = 0
 2701.             do
 2703.                if ( d(2 + $I_L2701_124) /= 0.0 ) then
 2705.                   $I_L2705_120 = 0
 2705.                   do
 2706.                      g = 0.0
 2708.                      $I_L2708_106 = 0
 2708. !dir$ ivdep
 2708.                      do
 2709.                         g = g + z(1 + $I_L2708_106, 1 + $I_L2705_120) * z(2 + $I_L2701_124, 1 + $I_L2708_106)
 2710.                         $I_L2708_106 = 1 + $I_L2708_106
 2708.                         if ( $I_L2708_106 >= 1 + $I_L2701_124 ) exit
 2708.                      enddo
 2712.                      $I_L2712_108 = 0
 2712. !dir$ ivdep
 2712.                      do
 2713.                         z(1 + $I_L2712_108, 1 + $I_L2705_120) = z(1 + $I_L2712_108, 1 + $I_L2705_120) + -( g * z(1 + $I_L2712_108, 2 + $I_L2701_124) )
 2714.                         $I_L2712_108 = 1 + $I_L2712_108
 2712.                         if ( $I_L2712_108 >= 1 + $I_L2701_124 ) exit
 2712.                      enddo
 2714.                      $I_L2705_120 = 1 + $I_L2705_120
 2714.                      if ( $I_L2705_120 >= 1 + $I_L2701_124 ) exit
 2714.                   enddo
 2714.                endif
 2716.                d(2 + $I_L2701_124) = z(2 + $I_L2701_124, 2 + $I_L2701_124)
 2717.                z(2 + $I_L2701_124, 2 + $I_L2701_124) = 1.0
 2718.                if ( ( 1 + $I_L2701_124 ) > 0 ) then
 2720.                   $I_L2720_110 = 0
 2720. !dir$ ivdep
 2720.                   do
 2721.                      z(2 + $I_L2701_124, 1 + $I_L2720_110) = 0.0
 2722.                      z(1 + $I_L2720_110, 2 + $I_L2701_124) = 0.0
 2723.                      $I_L2720_110 = 1 + $I_L2720_110
 2720.                      if ( $I_L2720_110 >= 1 + $I_L2701_124 ) exit
 2720.                   enddo
 2720.                endif
 2725.                $I_L2701_124 = 1 + $I_L2701_124
 2725.                if ( $I_L2701_124 >= -1 + n ) exit
 2725.             enddo
 2725.          endif
 2725.       endif
 2728.       return
 2728.       end
 2728.       
 2729.       
 2729.       subroutine znorma( nm, n, wr, wi, z, matz, h, tolw, tolz )
 2729.       t$179 = n
 2742.       t$413 = _zla( 0, n )
 2729.       t$178 = nm
 2742.       t$414 = _zla( 0, nm )
 2729.       t$415 = _zla( 0, nm )
 2729.       t$416 = _zla( 0, n ) * _zla( 0, nm )
 2749.       if ( matz /= 2 ) then
 2751.          if ( n > 0 ) then
 2751.             $I_L2751_78 = 0
 2751.             do
 2752.                $I_L2752_64 = 0
 2752. !dir$ ivdep
 2752.                do
 2753.                   h(1 + $I_L2752_64, 1 + $I_L2751_78) = z(1 + $I_L2752_64, 1 + $I_L2751_78)
 2754.                   $I_L2752_64 = 1 + $I_L2752_64
 2752.                   if ( $I_L2752_64 >= n ) exit
 2752.                enddo
 2754.                $I_L2751_78 = 1 + $I_L2751_78
 2754.                if ( $I_L2751_78 >= n ) exit
 2754.             enddo
 2756.             $I_L2756_80 = 0
 2756.             do
 2758.                if ( wi(1 + $I_L2756_80) == 0.0 ) then
 2760.                   zz = 0.0
 2761.                   $I_L2761_70 = 0
 2761. !dir$ unroll 4
 2761.                   do
 2762.                      zz = max( zz, abs( h(1 + $I_L2761_70, 1 + $I_L2756_80) ) )
 2763.                      if ( abs( h(1 + $I_L2761_70, 1 + $I_L2756_80) ) == zz ) then
 2763.                         ic = ( 1 + $I_L2761_70 )
 2763.                      endif
 2764.                      $I_L2761_70 = 1 + $I_L2761_70
 2763.                      if ( $I_L2761_70 >= n ) exit
 2763.                   enddo
 2766.                   $SCA_h_I0 = h(ic, 1 + $I_L2756_80)
 2766.                   $I_L2766_72 = 0
 2766. !dir$ ivdep
 2766.                   do
 2767.                      z(1 + $I_L2766_72, 1 + $I_L2756_80) = ( h(1 + $I_L2766_72, 1 + $I_L2756_80) * 1.0/$SCA_h_I0 )
 2768.                      $I_L2766_72 = 1 + $I_L2766_72
 2766.                      if ( $I_L2766_72 >= n ) exit
 2766.                   enddo
 2770.                else if ( wi(1 + $I_L2756_80) > 0.0 ) then
 2772.                   zz = 0.0
 2774.                   $I_L2774_66 = 0
 2774. !dir$ unroll 4
 2774.                   do
 2775.                      $div_S6 = h(1 + $I_L2774_66, 2 + $I_L2756_80) * h(1 + $I_L2774_66, 2 + $I_L2756_80) + h(1 + $I_L2774_66, 1 + $I_L2756_80) * h(1 + $I_L2774_66, 1 + $I_L2756_80)
 2776.                      zz = max( zz, $div_S6 )
 2777.                      if ( $div_S6 == zz ) then
 2777.                         ic = ( 1 + $I_L2774_66 )
 2777.                      endif
 2778.                      $I_L2774_66 = 1 + $I_L2774_66
 2777.                      if ( $I_L2774_66 >= n ) exit
 2777.                   enddo
 2779.                   if ( abs( h(ic, 1 + $I_L2756_80) ) < abs( h(ic, 2 + $I_L2756_80) ) ) then
 2780.                      $div_S7 = 1.0/h(ic, 2 + $I_L2756_80)
 2780.                   else
 2782.                      $div_S7 = 1.0/h(ic, 1 + $I_L2756_80)
 2782.                   endif
 2784.                   if ( $div_S7 /= 0.0 ) then
 2785.                      $I_L2785_68 = 0
 2785. !dir$ ivdep
 2785.                      do
 2786.                         z(1 + $I_L2785_68, 1 + $I_L2756_80) = $div_S7 * h(1 + $I_L2785_68, 1 + $I_L2756_80)
 2787.                         z(1 + $I_L2785_68, 2 + $I_L2756_80) = $div_S7 * h(1 + $I_L2785_68, 2 + $I_L2756_80)
 2788.                         $I_L2785_68 = 1 + $I_L2785_68
 2785.                         if ( $I_L2785_68 >= n ) exit
 2785.                      enddo
 2785.                   endif
 2785.                endif
 2793.                $I_L2756_80 = 1 + $I_L2756_80
 2791.                if ( $I_L2756_80 >= n ) exit
 2791.             enddo
 2791.          endif
 2795.          if ( matz /= 3 ) then
 2797.             div = 0.0
 2798.             if ( n > 0 ) then
 2798.                $I_L2798_74 = 0
 2798. !dir$ ivdep
 2798.                do
 2799.                   $zz_S10 = _sqrt( wi(1 + $I_L2798_74) * wi(1 + $I_L2798_74) + wr(1 + $I_L2798_74) * wr(1 + $I_L2798_74) )
 2800.                   div = max( div, $zz_S10 )
 2801.                   $I_L2798_74 = 1 + $I_L2798_74
 2798.                   if ( $I_L2798_74 >= n ) exit
 2798.                enddo
 2798.             endif
 2802.             if ( div <= 0.0 ) then
 2802.                div = 1.0
 2802.             endif
 2804.             if ( n > 0 ) then
 2804.                $I_L2804_82 = 0
 2804.                do
 2805.                   if ( abs( ( wr(1 + $I_L2804_82) * 1.0/div ) ) < tolw ) then
 2805.                      wr(1 + $I_L2804_82) = 0.0
 2805.                   endif
 2806.                   if ( abs( ( wi(1 + $I_L2804_82) * 1.0/div ) ) < tolw ) then
 2806.                      wi(1 + $I_L2804_82) = 0.0
 2806.                   endif
 2807.                   $I_L2807_76 = 0
 2807. !dir$ ivdep
 2807.                   do
 2808.                      if ( abs( z(1 + $I_L2807_76, 1 + $I_L2804_82) ) < tolz ) then
 2808.                         z(1 + $I_L2807_76, 1 + $I_L2804_82) = 0.0
 2808.                      endif
 2809.                      $I_L2807_76 = 1 + $I_L2807_76
 2808.                      if ( $I_L2807_76 >= n ) exit
 2808.                   enddo
 2809.                   $I_L2804_82 = 1 + $I_L2804_82
 2809.                   if ( $I_L2804_82 >= n ) exit
 2809.                enddo
 2809.             endif
 2809.          endif
 2809.       endif
 2811.       return
 2811.       end
 2811.       
 2815.       
 2815.       subroutine tmstmp2( id, ifday, tod, ihr, iday, mon, iyr )
 2859.       $ctim_S0 = tod + 3600.0 * id(1)
 2861.       if ( tod + 3600.0 * id(1) >= 86400.0 ) then
 2862.          $kday_S1 = 1
 2863.          $ctim_S0 = -86400.0 + $ctim_S0
 2863.       else
 2865.          $kday_S1 = 0
 2865.       endif
 2870.       iday = id(3) + ifday + $kday_S1
 2872.       ihr = int( ( 2.7777777777777778e-4 * ( 1.5625e-2 + $ctim_S0 ) ) )
 2873.       mon = id(2)
 2874.       iyr = id(4)
 2874.       do
 2876.          $idaymn_S2 = monl(mon)
 2877.          if ( mod( iyr, 4 ) == 0 ) then
 2877.             if ( mon == 2 ) then
 2878.                $idaymn_S2 = 29
 2878.             endif
 2878.          endif
 2879.          if ( iday <= $idaymn_S2 ) goto 10
 2880.          iday = iday + -$idaymn_S2
 2881.          mon = 1 + mon
 2882.          if ( mon >= 13 ) then
 2883.             mon = 1
 2884.             iyr = 1 + iyr
 2884.          endif
 2885.       enddo
 2885.    10 continue
 2886.       return
 2886.       end
 2886.       
 2888.       
 2888.       subroutine inittimestamp( dateinit_s, idate )
 2896.       yyyyi = idate(4)
 2897.       mmi = idate(2)
 2898.       ddi = idate(3)
 2899.       hhi = idate(1)
 2901.        _substr(dateinit_s,1,10) = '          '
 2902.       $_IOitem_P0(0) = yyyyi
 2902.       $_IOitem_P0(1) = mmi
 2902.       $_IOitem_P0(2) = ddi
 2902.       $_IOitem_P0(3) = hhi
 2902.       _fwrite( _clist( 0, 0, 3,  _substr(dateinit_s,1,10), Null_Arg, Null_Arg, t$185,  _substr(t$184,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P0(:( 0, 3, 1 )), 0x2000200000000L ) ) )
 2906.       juliandayinitintegration = julday( mmi, ddi, yyyyi )
 2907.       return
 2907.       end
 2907.       
 2914.       
 2914.       subroutine timestamp( datenow_s, idatec, jdt, dt )
 2922.       $juliandaynow_S0 = juliandayinitintegration + jdt * int( dt ) / 86400
 2923.       if ( juliandayinitintegration + jdt * int( dt ) / 86400 >= 2299161 ) then
 2923.          $ja_S1 = 1 + $juliandaynow_S0 + int( 2.7379070069885075e-5 * ( -2.5e-1 + ( -1867216 + $juliandaynow_S0 ) ) ) + -( int( 2.5e-1 * int( 2.7379070069885075e-5 * ( -2.5e-1 + ( -1867216 + $juliandaynow_S0 ) ) ) ) )
 2923.       else
 2923.          $ja_S1 = $juliandaynow_S0
 2923.       endif
 2923.       $jc_S3 = int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) )
 2923.       $je_S2 = int( 3.267963176590926e-2 * ( 1524 + $ja_S1 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) ) )
 2923.       ddc = 1524 + $ja_S1 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) + -( int( 30.600100000000001 * int( 3.267963176590926e-2 * ( 1524 + $ja_S1 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) ) ) ) )
 2923.       mmc = -1 + int( 3.267963176590926e-2 * ( 1524 + $ja_S1 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) ) )
 2923.       if ( ( -1 + int( 3.267963176590926e-2 * ( 1524 + $ja_S1 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S1 ) ) ) ) ) ) ) > 12 ) then
 2923.          mmc = -13 + $je_S2
 2923.       endif
 2923.       yyyyc = -4715 + $jc_S3
 2923.       if ( mmc > 2 ) then
 2923.          yyyyc = -4716 + $jc_S3
 2923.       endif
 2923.       if ( yyyyc <= 0 ) then
 2923.          yyyyc = -1 + yyyyc
 2923.       endif
 2924.       hhc = idatec(1) + mod( jdt * int( dt ) / 3600, 24 )
 2925.        _substr(datenow_s,1,10) = '          '
 2926.       $_IOitem_P0(0) = yyyyc
 2926.       $_IOitem_P0(1) = mmc
 2926.       $_IOitem_P0(2) = ddc
 2926.       $_IOitem_P0(3) = hhc
 2926.       _fwrite( _clist( 0, 0, 3,  _substr(datenow_s,1,10), Null_Arg, Null_Arg, t$187,  _substr(t$186,1,13), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P0(:( 0, 3, 1 )), 0x2000200000000L ) ) )
 2927.       t$1557(1) = hhc
 2927.       t$1557(2) = mmc
 2927.       t$1557(3) = ddc
 2927.       t$1557(4) = yyyyc
 2927.       $I_A1 = 0
 2927. !dir$ ivdep
 2927.       do
 2927.          idatec(1 + $I_A1) = t$1557(1 + $I_A1)
 2927.          $I_A1 = 1 + $I_A1
 2927.          if ( $I_A1 >= 4 ) exit
 2927.       enddo
 2928.       return
 2928.       end
 2928.       
 2934.       
 2934.       subroutine caldat( julian, mm, id, iyyy )
 2944.       if ( julian >= 2299161 ) then
 2946.          $ja_S0 = 1 + julian + int( 2.7379070069885075e-5 * ( -2.5e-1 + ( -1867216 + julian ) ) ) + -( int( 2.5e-1 * int( 2.7379070069885075e-5 * ( -2.5e-1 + ( -1867216 + julian ) ) ) ) )
 2946.       else
 2948.          $ja_S0 = julian
 2948.       endif
 2951.       $jc_S2 = int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) )
 2953.       $je_S1 = int( 3.267963176590926e-2 * ( 1524 + $ja_S0 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) ) )
 2954.       id = 1524 + $ja_S0 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) + -( int( 30.600100000000001 * int( 3.267963176590926e-2 * ( 1524 + $ja_S0 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) ) ) ) )
 2955.       mm = -1 + int( 3.267963176590926e-2 * ( 1524 + $ja_S0 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) ) )
 2956.       if ( -13 + int( 3.267963176590926e-2 * ( 1524 + $ja_S0 + -( int( 2.5e-1 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) + 365 * int( 6680.0 + 2.7378507871321013e-3 * ( -122.09999999999999 + ( -2438346 + $ja_S0 ) ) ) ) ) ) > 0 ) then
 2956.          mm = -13 + $je_S1
 2956.       endif
 2957.       iyyy = -4715 + $jc_S2
 2958.       if ( mm > 2 ) then
 2958.          iyyy = -4716 + $jc_S2
 2958.       endif
 2959.       if ( iyyy <= 0 ) then
 2959.          iyyy = -1 + iyyy
 2959.       endif
 2960.       return
 2960.       end
 2960.       
 2963.       
 2963.       integer
 2963.       function julday( mm, id, iyyy )
 2971.       if ( iyyy == 0 ) then
 2972.          _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'there is no year zero.', 0x800600000000L ) ) )
 2973.           _substr(t$1558,1,15) = 'ERROR AT julday'
 2973.          call _stop(  _substr(t$1558,1,15) )
 2973.          return
 2973.       else
 2975.          if ( iyyy < 0 ) then
 2975.             iyyy = 1 + iyyy
 2975.          endif
 2976.          if ( mm > 2 ) then
 2977.             $jy_S1 = iyyy
 2978.             $jm_S0 = 1 + mm
 2978.          else
 2980.             $jy_S1 = -1 + iyyy
 2981.             $jm_S0 = 13 + mm
 2981.          endif
 2983.          julday = 1720995 + id + int( 30.600100000000001 * $jm_S0 ) + int( 365.25 * $jy_S1 )
 2984.          if ( id + 31 * mm + 372 * iyyy >= 588829 ) then
 2986.             julday = 2 + julday + -( int( 1.0e-2 * $jy_S1 ) ) + int( 2.5e-1 * int( 1.0e-2 * $jy_S1 ) )
 2986.          endif
 2986.       endif
 2988.       julday = julday
 2988.       return
 2988.       end
 2988.       
 2992.       
 2992.       subroutine ibjbtoij_r( var_in, var_out )
 2992.       seatp_var_out = loc( var_out )
 2992.       seatp_var_in = loc( var_in )
 2992.       seat_var_in%dim_1%LB = 1
 2992.       seat_var_in%dim_2%LB = 1
 2992.       seat_var_out%dim_1%LB = 1
 2992.       seat_var_out%dim_2%LB = 1
 3000.       if ( jbmax > 0 ) then
 2999.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3004.          $SC_var_out_I16 = seat_var_out%dim_1%EX
 3004.          $SC_var_out_I17 = seat_var_out%dim_1%SM
 3004.          $SC_var_out_I18 = seat_var_out%dim_2%EX
 3004.          $SC_var_out_I19 = seat_var_out%dim_2%SM
 3004.          $SC_var_in_I12 = seat_var_in%dim_1%EX
 3004.          $SC_var_in_I13 = seat_var_in%dim_1%SM
 3004.          $SC_var_in_I14 = seat_var_in%dim_2%EX
 3004.          $SC_var_in_I15 = seat_var_in%dim_2%SM
 3003.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3003.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3003.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3003.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3003.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3002.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3002.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3002.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3002.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3002.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3001.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3001.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3000.          $I_L3000_28 = 0
 3000. !$omp do schedule(static)
 3000.          do
 3001.             $t_S1 = (ibmaxperjb%base_addr)(1 + $I_L3000_28, 0)
 3001.             if ( $t_S1 > 0 ) then
 3001.                $I_L3001_26 = 0
 3001. !dir$ ivdep
 3001.                do
 3002.                   $$_i = (iperijb%base_addr)(1 + $I_L3001_26, 1 + $I_L3000_28, 0)
 3003.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L3001_26, 1 + $I_L3000_28, 0) + -myfirstlat
 3004.                   (seat_var_out%base_addr)($$_i, $$_j, 0) = (seat_var_in%base_addr)(1 + $I_L3001_26, 1 + $I_L3000_28, 0)
 3005.                   $I_L3001_26 = 1 + $I_L3001_26
 3001.                   if ( $I_L3001_26 >= $t_S1 ) exit
 3001.                enddo
 3001.             endif
 3006.             $I_L3000_28 = 1 + $I_L3000_28
 3005.             if ( $I_L3000_28 >= jbmax ) exit
 3005.          enddo
 3007.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3007.       endif
 3008.       return
 3008.       end
 3008.       
 3012.       
 3012.       subroutine ijtoibjb_r( var_in, var_out )
 3012.       seatp_var_out = loc( var_out )
 3012.       seatp_var_in = loc( var_in )
 3012.       seat_var_in%dim_1%LB = 1
 3012.       seat_var_in%dim_2%LB = 1
 3012.       seat_var_out%dim_1%LB = 1
 3012.       seat_var_out%dim_2%LB = 1
 3020.       if ( jbmax > 0 ) then
 3019.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3024.          $SC_var_out_I16 = seat_var_out%dim_1%EX
 3024.          $SC_var_out_I17 = seat_var_out%dim_1%SM
 3024.          $SC_var_out_I18 = seat_var_out%dim_2%EX
 3024.          $SC_var_out_I19 = seat_var_out%dim_2%SM
 3024.          $SC_var_in_I12 = seat_var_in%dim_1%EX
 3024.          $SC_var_in_I13 = seat_var_in%dim_1%SM
 3024.          $SC_var_in_I14 = seat_var_in%dim_2%EX
 3024.          $SC_var_in_I15 = seat_var_in%dim_2%SM
 3023.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3023.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3023.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3023.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3023.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3022.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3022.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3022.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3022.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3022.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3021.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3021.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3020.          $I_L3020_28 = 0
 3020. !$omp do schedule(static)
 3020.          do
 3021.             $t_S1 = (ibmaxperjb%base_addr)(1 + $I_L3020_28, 0)
 3021.             if ( $t_S1 > 0 ) then
 3021.                $I_L3021_26 = 0
 3021. !dir$ ivdep
 3021.                do
 3022.                   $$_i = (iperijb%base_addr)(1 + $I_L3021_26, 1 + $I_L3020_28, 0)
 3023.                   $$_j = (jperijb%base_addr)(1 + $I_L3021_26, 1 + $I_L3020_28, 0)
 3024.                   (seat_var_out%base_addr)(1 + $I_L3021_26, 1 + $I_L3020_28, 0) = (seat_var_in%base_addr)($$_i, $$_j, 0)
 3025.                   $I_L3021_26 = 1 + $I_L3021_26
 3021.                   if ( $I_L3021_26 >= $t_S1 ) exit
 3021.                enddo
 3021.             endif
 3026.             $I_L3020_28 = 1 + $I_L3020_28
 3025.             if ( $I_L3020_28 >= jbmax ) exit
 3025.          enddo
 3027.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3027.       endif
 3028.       return
 3028.       end
 3028.       
 3031.       
 3031.       subroutine ijtoibjb3_r( var_in, var_out )
 3031.       seatp_var_out = loc( var_out )
 3031.       seatp_var_in = loc( var_in )
 3031.       t$188 = imax
 3031.       t$189 = kmax
 3031.       t$190 = jmax
 3032.       t$417 = _zla( 0, imax )
 3031.       t$418 = _zla( 0, imax )
 3032.       t$419 = _zla( 0, kmax )
 3031.       t$420 = _zla( 0, imax ) * _zla( 0, kmax )
 3032.       t$421 = _zla( 0, jmax )
 3031.       t$422 = _zla( 0, imax ) * _zla( 0, kmax ) * _zla( 0, jmax )
 3031.       t$191 = ibmax
 3031.       t$193 = jbmax
 3033.       t$423 = _zla( 0, ibmax )
 3031.       t$424 = _zla( 0, ibmax )
 3031.       t$425 = _zla( 0, kmax ) * _zla( 0, ibmax )
 3033.       t$426 = _zla( 0, jbmax )
 3031.       t$427 = _zla( 0, kmax ) * _zla( 0, ibmax ) * _zla( 0, jbmax )
 3039.       if ( jbmax > 0 ) then
 3038.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3042.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3042.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3042.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3042.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3042.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3041.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3041.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3041.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3041.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3041.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3040.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3040.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3039.          $I_L3039_32 = 0
 3039. !$omp do schedule(static)
 3039.          do
 3040.             $t_S1 = (ibmaxperjb%base_addr)(1 + $I_L3039_32, 0)
 3040.             if ( $t_S1 > 0 ) then
 3040.                $I_L3040_30 = 0
 3040.                do
 3041.                   $$_i = (iperijb%base_addr)(1 + $I_L3040_30, 1 + $I_L3039_32, 0)
 3042.                   $$_j = (jperijb%base_addr)(1 + $I_L3040_30, 1 + $I_L3039_32, 0)
 3043.                   $F_A33 = kmax
 3043.                   if ( kmax > 0 ) then
 3043.                      $I_L3043_28 = 0
 3043. !dir$ ivdep
 3043.                      do
 3043.                         seat_var_out(1 + $I_L3040_30, 1 + $I_L3043_28, 1 + $I_L3039_32) = seat_var_in($$_i, 1 + $I_L3043_28, $$_j)
 3043.                         $I_L3043_28 = 1 + $I_L3043_28
 3043.                         if ( $I_L3043_28 >= $F_A33 ) exit
 3043.                      enddo
 3043.                   endif
 3044.                   $I_L3040_30 = 1 + $I_L3040_30
 3040.                   if ( $I_L3040_30 >= $t_S1 ) exit
 3040.                enddo
 3040.             endif
 3045.             $I_L3039_32 = 1 + $I_L3039_32
 3044.             if ( $I_L3039_32 >= jbmax ) exit
 3044.          enddo
 3046.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3046.       endif
 3047.       return
 3047.       end
 3047.       
 3049.       
 3049.       subroutine ibjbtoij_i( var_in, var_out )
 3049.       seatp_var_out = loc( var_out )
 3049.       seatp_var_in = loc( var_in )
 3049.       seat_var_in%dim_1%LB = 1
 3049.       seat_var_in%dim_2%LB = 1
 3049.       seat_var_out%dim_1%LB = 1
 3049.       seat_var_out%dim_2%LB = 1
 3057.       if ( jbmax > 0 ) then
 3056.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3061.          $SC_var_out_I16 = seat_var_out%dim_1%EX
 3061.          $SC_var_out_I17 = seat_var_out%dim_1%SM
 3061.          $SC_var_out_I18 = seat_var_out%dim_2%EX
 3061.          $SC_var_out_I19 = seat_var_out%dim_2%SM
 3061.          $SC_var_in_I12 = seat_var_in%dim_1%EX
 3061.          $SC_var_in_I13 = seat_var_in%dim_1%SM
 3061.          $SC_var_in_I14 = seat_var_in%dim_2%EX
 3061.          $SC_var_in_I15 = seat_var_in%dim_2%SM
 3060.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3060.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3060.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3060.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3060.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3059.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3059.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3059.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3059.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3059.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3058.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3058.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3057.          $I_L3057_28 = 0
 3057. !$omp do schedule(static)
 3057.          do
 3058.             $t_S1 = (ibmaxperjb%base_addr)(1 + $I_L3057_28, 0)
 3058.             if ( $t_S1 > 0 ) then
 3058.                $I_L3058_26 = 0
 3058. !dir$ ivdep
 3058.                do
 3059.                   $$_i = (iperijb%base_addr)(1 + $I_L3058_26, 1 + $I_L3057_28, 0)
 3060.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L3058_26, 1 + $I_L3057_28, 0) + -myfirstlat
 3061.                   (seat_var_out%base_addr)($$_i, $$_j, 0) = (seat_var_in%base_addr)(1 + $I_L3058_26, 1 + $I_L3057_28, 0)
 3062.                   $I_L3058_26 = 1 + $I_L3058_26
 3058.                   if ( $I_L3058_26 >= $t_S1 ) exit
 3058.                enddo
 3058.             endif
 3063.             $I_L3057_28 = 1 + $I_L3057_28
 3062.             if ( $I_L3057_28 >= jbmax ) exit
 3062.          enddo
 3064.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3064.       endif
 3065.       return
 3065.       end
 3065.       
 3069.       
 3069.       subroutine ijtoibjb_i( var_in, var_out )
 3069.       seatp_var_out = loc( var_out )
 3069.       seatp_var_in = loc( var_in )
 3069.       seat_var_in%dim_1%LB = 1
 3069.       seat_var_in%dim_2%LB = 1
 3069.       seat_var_out%dim_1%LB = 1
 3069.       seat_var_out%dim_2%LB = 1
 3077.       if ( jbmax > 0 ) then
 3076.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3081.          $SC_var_out_I16 = seat_var_out%dim_1%EX
 3081.          $SC_var_out_I17 = seat_var_out%dim_1%SM
 3081.          $SC_var_out_I18 = seat_var_out%dim_2%EX
 3081.          $SC_var_out_I19 = seat_var_out%dim_2%SM
 3081.          $SC_var_in_I12 = seat_var_in%dim_1%EX
 3081.          $SC_var_in_I13 = seat_var_in%dim_1%SM
 3081.          $SC_var_in_I14 = seat_var_in%dim_2%EX
 3081.          $SC_var_in_I15 = seat_var_in%dim_2%SM
 3080.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3080.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3080.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3080.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3080.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3079.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3079.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3079.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3079.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3079.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3078.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3078.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3077.          $I_L3077_28 = 0
 3077. !$omp do schedule(static)
 3077.          do
 3078.             $t_S1 = (ibmaxperjb%base_addr)(1 + $I_L3077_28, 0)
 3078.             if ( $t_S1 > 0 ) then
 3078.                $I_L3078_26 = 0
 3078. !dir$ ivdep
 3078.                do
 3079.                   $$_i = (iperijb%base_addr)(1 + $I_L3078_26, 1 + $I_L3077_28, 0)
 3080.                   $$_j = (jperijb%base_addr)(1 + $I_L3078_26, 1 + $I_L3077_28, 0)
 3081.                   (seat_var_out%base_addr)(1 + $I_L3078_26, 1 + $I_L3077_28, 0) = (seat_var_in%base_addr)($$_i, $$_j, 0)
 3082.                   $I_L3078_26 = 1 + $I_L3078_26
 3078.                   if ( $I_L3078_26 >= $t_S1 ) exit
 3078.                enddo
 3078.             endif
 3083.             $I_L3077_28 = 1 + $I_L3077_28
 3082.             if ( $I_L3077_28 >= jbmax ) exit
 3082.          enddo
 3084.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3084.       endif
 3085.       return
 3085.       end
 3085.       
 3087.       
 3087.       subroutine ijtoibjb3_i( var_in, var_out )
 3087.       seatp_var_out = loc( var_out )
 3087.       seatp_var_in = loc( var_in )
 3087.       t$194 = imax
 3087.       t$195 = kmax
 3087.       t$196 = jmax
 3088.       t$428 = _zla( 0, imax )
 3087.       t$429 = _zla( 0, imax )
 3088.       t$430 = _zla( 0, kmax )
 3087.       t$431 = _zla( 0, imax ) * _zla( 0, kmax )
 3088.       t$432 = _zla( 0, jmax )
 3087.       t$433 = _zla( 0, imax ) * _zla( 0, kmax ) * _zla( 0, jmax )
 3087.       t$197 = ibmax
 3087.       t$199 = jbmax
 3089.       t$434 = _zla( 0, ibmax )
 3087.       t$435 = _zla( 0, ibmax )
 3087.       t$436 = _zla( 0, kmax ) * _zla( 0, ibmax )
 3089.       t$437 = _zla( 0, jbmax )
 3087.       t$438 = _zla( 0, kmax ) * _zla( 0, ibmax ) * _zla( 0, jbmax )
 3095.       if ( jbmax > 0 ) then
 3094.          $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3098.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3098.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3098.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3098.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3098.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3097.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3097.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3097.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3097.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3097.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3096.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3096.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3095.          $I_L3095_32 = 0
 3095. !$omp do schedule(static)
 3095.          do
 3096.             $t_S1 = (ibmaxperjb%base_addr)(1 + $I_L3095_32, 0)
 3096.             if ( $t_S1 > 0 ) then
 3096.                $I_L3096_30 = 0
 3096.                do
 3097.                   $$_i = (iperijb%base_addr)(1 + $I_L3096_30, 1 + $I_L3095_32, 0)
 3098.                   $$_j = (jperijb%base_addr)(1 + $I_L3096_30, 1 + $I_L3095_32, 0)
 3099.                   $F_A33 = kmax
 3099.                   if ( kmax > 0 ) then
 3099.                      $I_L3099_28 = 0
 3099. !dir$ ivdep
 3099.                      do
 3099.                         seat_var_out(1 + $I_L3096_30, 1 + $I_L3099_28, 1 + $I_L3095_32) = seat_var_in($$_i, 1 + $I_L3099_28, $$_j)
 3099.                         $I_L3099_28 = 1 + $I_L3099_28
 3099.                         if ( $I_L3099_28 >= $F_A33 ) exit
 3099.                      enddo
 3099.                   endif
 3100.                   $I_L3096_30 = 1 + $I_L3096_30
 3096.                   if ( $I_L3096_30 >= $t_S1 ) exit
 3096.                enddo
 3096.             endif
 3101.             $I_L3095_32 = 1 + $I_L3095_32
 3100.             if ( $I_L3095_32 >= jbmax ) exit
 3100.          enddo
 3102.          $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3102.       endif
 3103.       return
 3103.       end
 3103.       
 3107.       
 3107.       subroutine splineijtoibjb_r2d( fieldin, fieldout )
 3107.       seatp_fieldout = loc( fieldout )
 3107.       seatp_fieldin = loc( fieldin )
 3107.       t$200 = imax
 3107.       t$201 = jmax
 3108.       t$439 = _zla( 0, imax )
 3107.       t$440 = _zla( 0, imax )
 3108.       t$441 = _zla( 0, jmax )
 3107.       t$442 = _zla( 0, imax ) * _zla( 0, jmax )
 3107.       t$202 = ibmax
 3107.       t$203 = jbmax
 3109.       t$443 = _zla( 0, ibmax )
 3107.       t$444 = _zla( 0, ibmax )
 3109.       t$445 = _zla( 0, jbmax )
 3107.       t$446 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3111.       t$449 = 8 * _zla( 0, imax )
 3107.       t$447 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 3111.       t$448 = t$447
 3121.       _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**SplineIJtoIBJB**', 0x800600000000L ) ) )
 3123.       if ( reducedgrid /= .false. ) then
 3125.          if ( mylastlat + -myfirstlat >= 0 ) then
 3125.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 3124.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3124.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 3124.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3124.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3125.             $t_S1 = myfirstlat
 3125.             $I_L3125_56 = 0
 3125. !$omp do schedule(static)
 3125.             do
 3126.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3125_56, 0)
 3127.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3125_56, 0)
 3128.                call cycliccubicspline( imax, (imaxperj%base_addr)($t_S1 + $I_L3125_56, 0), seat_fieldin(1, $t_S1 + $I_L3125_56), $$_fout(1), $$_ifirst, $$_ilast )
 3130.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 3132.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 3132.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 3132.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 3132.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 3132.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 3131.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 3131.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 3131.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 3131.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 3131.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 3130.                   $I_L3130_52 = 0
 3130. !dir$ ivdep
 3130.                   do
 3131.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3130_52, $t_S1 + $I_L3125_56, 0)
 3132.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3130_52, $t_S1 + $I_L3125_56, 0)
 3133.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L3130_52)
 3134.                      $I_L3130_52 = 1 + $I_L3130_52
 3130.                      if ( $I_L3130_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 3130.                   enddo
 3130.                endif
 3135.                $I_L3125_56 = 1 + $I_L3125_56
 3134.                if ( $I_L3125_56 >= $t_S3 ) exit
 3134.             enddo
 3124.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3124.             _free( $pvt_Abase_seg15_D0 )
 3136.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3136.          endif
 3137.       else if ( jbmax > 0 ) then
 3138.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3142.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3142.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3142.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3142.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3142.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3141.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3141.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3141.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3141.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3141.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3140.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3140.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3139.          $I_L3139_58 = 0
 3139. !$omp do schedule(static)
 3139.          do
 3140.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L3139_58, 0)
 3140.             if ( $t_S5 > 0 ) then
 3140.                $I_L3140_54 = 0
 3140. !dir$ ivdep
 3140.                do
 3141.                   $$_i = (iperijb%base_addr)(1 + $I_L3140_54, 1 + $I_L3139_58, 0)
 3142.                   $$_j = (jperijb%base_addr)(1 + $I_L3140_54, 1 + $I_L3139_58, 0)
 3143.                   seat_fieldout(1 + $I_L3140_54, 1 + $I_L3139_58) = seat_fieldin($$_i, $$_j)
 3144.                   $I_L3140_54 = 1 + $I_L3140_54
 3140.                   if ( $I_L3140_54 >= $t_S5 ) exit
 3140.                enddo
 3140.             endif
 3145.             $I_L3139_58 = 1 + $I_L3139_58
 3144.             if ( $I_L3139_58 >= jbmax ) exit
 3144.          enddo
 3146.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3146.       endif
 3107.       _free( t$447 )
 3148.       return
 3148.       end
 3148.       
 3153.       
 3153.       subroutine splineibjbtoij_r2d( fieldin, fieldout )
 3153.       seatp_fieldout = loc( fieldout )
 3153.       seatp_fieldin = loc( fieldin )
 3153.       t$205 = ibmax
 3153.       t$206 = jbmax
 3154.       t$450 = _zla( 0, ibmax )
 3153.       t$451 = _zla( 0, ibmax )
 3154.       t$452 = _zla( 0, jbmax )
 3153.       t$453 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3153.       t$207 = imax
 3153.       t$208 = jmax
 3155.       t$454 = _zla( 0, imax )
 3153.       t$455 = _zla( 0, imax )
 3155.       t$456 = _zla( 0, jmax )
 3153.       t$457 = _zla( 0, imax ) * _zla( 0, jmax )
 3166.       _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**SplineIBJBtoIJ**', 0x800600000000L ) ) )
 3167.       if ( reducedgrid /= .false. ) then
 3169.          if ( mylastlat + -myfirstlat >= 0 ) then
 3168.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3169.             $I_L3169_40 = 0
 3169. !$omp do schedule(static)
 3169.             do
 3175.                $I_L3169_40 = 1 + $I_L3169_40
 3169.                if ( $I_L3169_40 >= 1 + mylastlat + -myfirstlat ) exit
 3169.             enddo
 3176.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3176.          endif
 3177.       else if ( jbmax > 0 ) then
 3178.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3182.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3182.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3182.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3182.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3182.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3181.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3181.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3181.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3181.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3181.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3180.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3180.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3179.          $I_L3179_44 = 0
 3179. !$omp do schedule(static)
 3179.          do
 3180.             $t_S2 = (ibmaxperjb%base_addr)(1 + $I_L3179_44, 0)
 3180.             if ( $t_S2 > 0 ) then
 3180.                $I_L3180_42 = 0
 3180. !dir$ ivdep
 3180.                do
 3181.                   $$_i = (iperijb%base_addr)(1 + $I_L3180_42, 1 + $I_L3179_44, 0)
 3182.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L3180_42, 1 + $I_L3179_44, 0) + -myfirstlat
 3183.                   seat_fieldout($$_i, $$_j) = seat_fieldin(1 + $I_L3180_42, 1 + $I_L3179_44)
 3184.                   $I_L3180_42 = 1 + $I_L3180_42
 3180.                   if ( $I_L3180_42 >= $t_S2 ) exit
 3180.                enddo
 3180.             endif
 3185.             $I_L3179_44 = 1 + $I_L3179_44
 3184.             if ( $I_L3179_44 >= jbmax ) exit
 3184.          enddo
 3186.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3186.       endif
 3188.       return
 3188.       end
 3188.       
 3208.       
 3208.       subroutine cycliccubicspline( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 3208.       t$209 = dimin
 3213.       t$458 = _zla( 0, dimin )
 3208.       t$210 = dimout
 3214.       t$459 = _zla( 0, dimout )
 3208.       t$211 = ( 2 + dimin )
 3220.       t$460 = _zla( 0, ( 2 + dimin ) )
 3220.       t$463 = 8 * _zla( 0, ( 2 + dimin ) )
 3221.       t$464 = 8 * ( 7 + 8 * _zla( 0, ( 2 + dimin ) ) ) / 8
 3221.       t$466 = t$464 + 8 * _zla( 0, ( 2 + dimin ) )
 3225.       t$467 = 8 * ( 7 + t$464 + 8 * _zla( 0, ( 2 + dimin ) ) ) / 8
 3225.       t$469 = t$467 + 8 * _zla( 0, ( 2 + dimin ) )
 3226.       t$470 = 8 * ( 7 + t$467 + 8 * _zla( 0, ( 2 + dimin ) ) ) / 8
 3226.       t$472 = t$470 + 8 * _zla( 0, ( 2 + dimin ) )
 3223.       t$473 = 8 * ( 7 + t$470 + 8 * _zla( 0, ( 2 + dimin ) ) ) / 8
 3223.       t$475 = t$473 + 8 * _zla( 0, ( 2 + dimin ) )
 3224.       t$476 = 8 * ( 7 + t$473 + 8 * _zla( 0, ( 2 + dimin ) ) ) / 8
 3224.       t$478 = t$476 + 8 * _zla( 0, ( 2 + dimin ) )
 3222.       t$479 = 8 * ( 7 + t$476 + 8 * _zla( 0, ( 2 + dimin ) ) ) / 8
 3222.       t$481 = t$479 + 8 * _zla( 0, ( 2 + dimin ) )
 3208.       t$461 = int( _alloc( t$479 + 8 * _zla( 0, ( 2 + dimin ) ) ), 8 )
 3220.       t$462 = t$461
 3221.       t$465 = t$464 + t$461
 3225.       t$468 = t$467 + t$461
 3226.       t$471 = t$470 + t$461
 3223.       t$474 = t$473 + t$461
 3224.       t$477 = t$476 + t$461
 3222.       t$480 = t$479 + t$461
 3239.       $iratio_S0 = dimin / dimout
 3240.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 3241.          if ( ilast + -ifirst >= 0 ) then
 3241.             $I_L3241_42 = 0
 3241. !dir$ ivdep
 3241.             do
 3243.                fieldout(ifirst + $I_L3241_42) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L3241_42)
 3244.                $I_L3241_42 = 1 + $I_L3241_42
 3241.                if ( $I_L3241_42 >= 1 + ilast + -ifirst ) exit
 3241.             enddo
 3241.          endif
 3208.          _free( t$461 )
 3246.       else if ( dimin < 4 ) then
 3251.           _substr(t$1623,1,52) = '**(CyclicCubicSpline)** ERROR: Few input data points'
 3251.          call _stop(  _substr(t$1623,1,52) )
 3251.       else
 3256.          $ratio_S10 = ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) )
 3258.          if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 2 + dimin ) then
 3259.              _substr(t$1624,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 3259.             call _stop(  _substr(t$1624,1,64) )
 3259.          else
 3265.             $hin_S6 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 3266.             $hout_S11 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 3267.             $hin2_S3 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) ) * ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 3273.             alfa(2) = 0.0
 3274.             beta(2) = 6.0
 3275.             gama(2) = 0.0
 3276.             delta(2) = ( 6.0 * 1.0/( ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) ) * ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) ) ) ) * ( fieldin(1) + fieldin(3) + -2.0 * fieldin(2) )
 3278.             $I_L3278_44 = 0
 3278. !dir$ ivdep
 3278.             do
 3279.                alfa(3 + $I_L3278_44) = 1.0
 3280.                beta(3 + $I_L3278_44) = 4.0
 3281.                gama(3 + $I_L3278_44) = 1.0
 3282.                delta(3 + $I_L3278_44) = ( 6.0 * 1.0/$hin2_S3 ) * ( fieldin(4 + $I_L3278_44) + fieldin(2 + $I_L3278_44) + -2.0 * fieldin(3 + $I_L3278_44) )
 3284.                $I_L3278_44 = 1 + $I_L3278_44
 3278.                if ( $I_L3278_44 >= -3 + dimin ) exit
 3278.             enddo
 3285.             alfa(dimin) = 1.0
 3286.             beta(dimin) = 4.0
 3287.             gama(dimin) = 1.0
 3288.             delta(dimin) = ( fieldin(1) + fieldin(-1 + dimin) + -2.0 * fieldin(dimin) ) * ( 6.0 * 1.0/$hin2_S3 )
 3290.             alfa(1 + dimin) = 0.0
 3291.             beta(1 + dimin) = 6.0
 3292.             gama(1 + dimin) = 0.0
 3293.             delta(1 + dimin) = ( fieldin(2) + fieldin(dimin) + -2.0 * fieldin(1) ) * ( 6.0 * 1.0/$hin2_S3 )
 3298.             $beta_WR1_R1 = beta(2)
 3298.             $delta_WR0_R2 = delta(2)
 3298.             $I_L3298_46 = 0
 3298. !dir$ unroll 2
 3298.             do
 3299.                $beta_WR0_R0 = beta(3 + $I_L3298_46) + -( 1.0/$beta_WR1_R1 * ( alfa(3 + $I_L3298_46) * gama(2 + $I_L3298_46) ) )
 3299.                beta(3 + $I_L3298_46) = $beta_WR0_R0
 3300.                $delta_WR0_R2 = delta(3 + $I_L3298_46) + -( 1.0/$beta_WR1_R1 * ( $delta_WR0_R2 * alfa(3 + $I_L3298_46) ) )
 3300.                delta(3 + $I_L3298_46) = $delta_WR0_R2
 3298.                $beta_WR1_R1 = $beta_WR0_R0
 3301.                $I_L3298_46 = 1 + $I_L3298_46
 3298.                if ( $I_L3298_46 >= -2 + dimin ) exit
 3298.             enddo
 3305.             der(1 + dimin) = ( delta(1 + dimin) * 1.0/beta(1 + dimin) )
 3306.             if ( 2 + -dimin <= 0 ) then
 3306.                $der_WR0_R3 = der(1 + dimin)
 3306.                $I_L3306_48 = 0
 3306. !dir$ unroll 4
 3306.                do
 3307.                   $SCF_P1 = 1.0/beta(dimin + -$I_L3306_48)
 3307.                   $der_WR0_R3 = ( $SCF_P1 * ( delta(dimin + -$I_L3306_48) + -( $der_WR0_R3 * gama(dimin + -$I_L3306_48) ) ) )
 3307.                   der(dimin + -$I_L3306_48) = $der_WR0_R3
 3308.                   $I_L3306_48 = 1 + $I_L3306_48
 3306.                   if ( $I_L3306_48 >= -1 + dimin ) exit
 3306.                enddo
 3306.             endif
 3310.             der(1) = -der(3) + 2.0 * der(2)
 3311.             der(2 + dimin) = -der(dimin) + 2.0 * der(1 + dimin)
 3315.             $I_L3315_50 = 0
 3315. !dir$ ivdep
 3315.             do
 3316.                c1(1 + $I_L3315_50) = ( 1.6666666666666666e-1 * der(1 + $I_L3315_50) * 1.0/$hin_S6 )
 3317.                $I_L3315_50 = 1 + $I_L3315_50
 3315.                if ( $I_L3315_50 >= 2 + dimin ) exit
 3315.             enddo
 3318.             $I_L3318_52 = 0
 3318. !dir$ ivdep
 3318.             do
 3319.                c2(1 + $I_L3318_52) = ( fieldin(1 + $I_L3318_52) * 1.0/$hin_S6 ) + -( der(1 + $I_L3318_52) * ( 1.6666666666666666e-1 * $hin_S6 ) )
 3320.                $I_L3318_52 = 1 + $I_L3318_52
 3318.                if ( $I_L3318_52 >= dimin ) exit
 3318.             enddo
 3321.             c2(1 + dimin) = -( der(1 + dimin) * ( 1.6666666666666666e-1 * $hin_S6 ) ) + ( fieldin(1) * 1.0/$hin_S6 )
 3322.             c2(2 + dimin) = -( der(2 + dimin) * ( 1.6666666666666666e-1 * $hin_S6 ) ) + ( fieldin(2) * 1.0/$hin_S6 )
 3323.             if ( ilast + -ifirst >= 0 ) then
 3323.                $I_L3323_54 = 0
 3323. !dir$ ivdep
 3323.                do
 3324.                   iin = 2 + int( $ratio_S10 * real( -1 + ifirst + $I_L3323_54, 8 ) )
 3326.                   dxm2 = ( -( $hin_S6 * real( -2 + ( 2 + int( $ratio_S10 * real( -1 + ifirst + $I_L3323_54, 8 ) ) ), 8 ) ) + $hout_S11 * real( -1 + ifirst + $I_L3323_54, 8 ) ) * ( -( $hin_S6 * real( -2 + ( 2 + int( $ratio_S10 * real( -1 + ifirst + $I_L3323_54, 8 ) ) ), 8 ) ) + $hout_S11 * real( -1 + ifirst + $I_L3323_54, 8 ) )
 3327.                   $dx_S12 = -( $hout_S11 * real( -1 + ifirst + $I_L3323_54, 8 ) ) + $hin_S6 * real( -1 + ( 2 + int( $ratio_S10 * real( -1 + ifirst + $I_L3323_54, 8 ) ) ), 8 )
 3329.                   fieldout(ifirst + $I_L3323_54) = ( c2(iin) + dxm2 * c1(iin) ) * ( -( $hin_S6 * real( -2 + iin, 8 ) ) + $hout_S11 * real( -1 + ifirst + $I_L3323_54, 8 ) ) + ( c2(-1 + iin) + c1(-1 + iin) * ( $dx_S12 * $dx_S12 ) ) * ( -( $hout_S11 * real( -1 + ifirst + $I_L3323_54, 8 ) ) + $hin_S6 * real( -1 + iin, 8 ) )
 3332.                   $I_L3323_54 = 1 + $I_L3323_54
 3323.                   if ( $I_L3323_54 >= 1 + ilast + -ifirst ) exit
 3323.                enddo
 3323.             endif
 3208.             _free( t$461 )
 3208.          endif
 3208.       endif
 3333.       return
 3333.       end
 3333.       
 3340.       
 3340.       subroutine linearijtoibjb_r2d( fieldin, fieldout )
 3340.       seatp_fieldout = loc( fieldout )
 3340.       seatp_fieldin = loc( fieldin )
 3340.       t$218 = imax
 3340.       t$219 = jmax
 3341.       t$482 = _zla( 0, imax )
 3340.       t$483 = _zla( 0, imax )
 3341.       t$484 = _zla( 0, jmax )
 3340.       t$485 = _zla( 0, imax ) * _zla( 0, jmax )
 3340.       t$220 = ibmax
 3340.       t$221 = jbmax
 3342.       t$486 = _zla( 0, ibmax )
 3340.       t$487 = _zla( 0, ibmax )
 3342.       t$488 = _zla( 0, jbmax )
 3340.       t$489 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3344.       t$492 = 8 * _zla( 0, imax )
 3340.       t$490 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 3344.       t$491 = t$490
 3354.       if ( reducedgrid /= .false. ) then
 3356.          if ( mylastlat + -myfirstlat >= 0 ) then
 3356.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 3355.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3355.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 3355.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3355.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3356.             $t_S1 = myfirstlat
 3356.             $I_L3356_56 = 0
 3356. !$omp do schedule(static)
 3356.             do
 3357.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3356_56, 0)
 3358.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3356_56, 0)
 3359.                call cycliclinear( imax, (imaxperj%base_addr)($t_S1 + $I_L3356_56, 0), seat_fieldin(1, $t_S1 + $I_L3356_56), $$_fout(1), $$_ifirst, $$_ilast )
 3361.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 3363.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 3363.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 3363.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 3363.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 3363.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 3362.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 3362.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 3362.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 3362.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 3362.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 3361.                   $I_L3361_52 = 0
 3361. !dir$ ivdep
 3361.                   do
 3362.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3361_52, $t_S1 + $I_L3356_56, 0)
 3363.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3361_52, $t_S1 + $I_L3356_56, 0)
 3364.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L3361_52)
 3365.                      $I_L3361_52 = 1 + $I_L3361_52
 3361.                      if ( $I_L3361_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 3361.                   enddo
 3361.                endif
 3366.                $I_L3356_56 = 1 + $I_L3356_56
 3365.                if ( $I_L3356_56 >= $t_S3 ) exit
 3365.             enddo
 3355.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3355.             _free( $pvt_Abase_seg15_D0 )
 3367.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3367.          endif
 3368.       else if ( jbmax > 0 ) then
 3369.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3373.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3373.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3373.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3373.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3373.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3372.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3372.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3372.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3372.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3372.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3371.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3371.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3370.          $I_L3370_58 = 0
 3370. !$omp do schedule(static)
 3370.          do
 3371.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L3370_58, 0)
 3371.             if ( $t_S5 > 0 ) then
 3371.                $I_L3371_54 = 0
 3371. !dir$ ivdep
 3371.                do
 3372.                   $$_i = (iperijb%base_addr)(1 + $I_L3371_54, 1 + $I_L3370_58, 0)
 3373.                   $$_j = (jperijb%base_addr)(1 + $I_L3371_54, 1 + $I_L3370_58, 0)
 3374.                   seat_fieldout(1 + $I_L3371_54, 1 + $I_L3370_58) = seat_fieldin($$_i, $$_j)
 3375.                   $I_L3371_54 = 1 + $I_L3371_54
 3371.                   if ( $I_L3371_54 >= $t_S5 ) exit
 3371.                enddo
 3371.             endif
 3376.             $I_L3370_58 = 1 + $I_L3370_58
 3375.             if ( $I_L3370_58 >= jbmax ) exit
 3375.          enddo
 3377.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3377.       endif
 3340.       _free( t$490 )
 3379.       return
 3379.       end
 3379.       
 3384.       
 3384.       subroutine linearibjbtoij_r2d( fieldin, fieldout )
 3384.       seatp_fieldout = loc( fieldout )
 3384.       seatp_fieldin = loc( fieldin )
 3384.       t$223 = ibmax
 3384.       t$224 = jbmax
 3385.       t$493 = _zla( 0, ibmax )
 3384.       t$494 = _zla( 0, ibmax )
 3385.       t$495 = _zla( 0, jbmax )
 3384.       t$496 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3384.       t$225 = imax
 3384.       t$226 = jmax
 3386.       t$497 = _zla( 0, imax )
 3384.       t$498 = _zla( 0, imax )
 3386.       t$499 = _zla( 0, jmax )
 3384.       t$500 = _zla( 0, imax ) * _zla( 0, jmax )
 3397.       if ( reducedgrid /= .false. ) then
 3399.          if ( mylastlat + -myfirstlat >= 0 ) then
 3398.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3399.             $I_L3399_40 = 0
 3399. !$omp do schedule(static)
 3399.             do
 3405.                $I_L3399_40 = 1 + $I_L3399_40
 3399.                if ( $I_L3399_40 >= 1 + mylastlat + -myfirstlat ) exit
 3399.             enddo
 3406.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3406.          endif
 3407.       else if ( jbmax > 0 ) then
 3408.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3412.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3412.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3412.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3412.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3412.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3411.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3411.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3411.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3411.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3411.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3410.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3410.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3409.          $I_L3409_44 = 0
 3409. !$omp do schedule(static)
 3409.          do
 3410.             $t_S2 = (ibmaxperjb%base_addr)(1 + $I_L3409_44, 0)
 3410.             if ( $t_S2 > 0 ) then
 3410.                $I_L3410_42 = 0
 3410. !dir$ ivdep
 3410.                do
 3411.                   $$_i = (iperijb%base_addr)(1 + $I_L3410_42, 1 + $I_L3409_44, 0)
 3412.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L3410_42, 1 + $I_L3409_44, 0) + -myfirstlat
 3413.                   seat_fieldout($$_i, $$_j) = seat_fieldin(1 + $I_L3410_42, 1 + $I_L3409_44)
 3414.                   $I_L3410_42 = 1 + $I_L3410_42
 3410.                   if ( $I_L3410_42 >= $t_S2 ) exit
 3410.                enddo
 3410.             endif
 3415.             $I_L3409_44 = 1 + $I_L3409_44
 3414.             if ( $I_L3409_44 >= jbmax ) exit
 3414.          enddo
 3416.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3416.       endif
 3418.       return
 3418.       end
 3418.       
 3438.       
 3438.       subroutine cycliclinear( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 3438.       t$227 = dimin
 3443.       t$501 = _zla( 0, dimin )
 3438.       t$228 = dimout
 3444.       t$502 = _zla( 0, dimout )
 3438.       t$229 = ( 1 + dimin )
 3450.       t$503 = _zla( 0, ( 1 + dimin ) )
 3450.       t$506 = 8 * _zla( 0, ( 1 + dimin ) )
 3438.       t$504 = int( _alloc( 8 * _zla( 0, ( 1 + dimin ) ) ), 8 )
 3450.       t$505 = t$504
 3461.       $iratio_S0 = dimin / dimout
 3462.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 3463.          if ( ilast + -ifirst >= 0 ) then
 3463.             $I_L3463_12 = 0
 3463. !dir$ ivdep
 3463.             do
 3465.                fieldout(ifirst + $I_L3463_12) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L3463_12)
 3466.                $I_L3463_12 = 1 + $I_L3463_12
 3463.                if ( $I_L3463_12 >= 1 + ilast + -ifirst ) exit
 3463.             enddo
 3463.          endif
 3438.          _free( t$504 )
 3468.       else if ( dimin <= 0 ) then
 3473.           _substr(t$1672,1,47) = '**(CyclicLinear)** ERROR: Few input data points'
 3473.          call _stop(  _substr(t$1672,1,47) )
 3473.       else
 3478.          ratio = ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) )
 3480.          if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 3481.              _substr(t$1673,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 3481.             call _stop(  _substr(t$1673,1,64) )
 3481.          else
 3487.             $hin_S6 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 3488.             $hininv_S3 = 1.0/( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 3489.             $hout_S5 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 3493.             $I_L3493_14 = 0
 3493. !dir$ ivdep
 3493.             do
 3494.                c(1 + $I_L3493_14) = $hininv_S3 * fieldin(1 + $I_L3493_14)
 3495.                $I_L3493_14 = 1 + $I_L3493_14
 3493.                if ( $I_L3493_14 >= dimin ) exit
 3493.             enddo
 3496.             c(1 + dimin) = fieldin(1) * $hininv_S3
 3498.             if ( ilast + -ifirst >= 0 ) then
 3498.                $I_L3498_16 = 0
 3498. !dir$ ivdep
 3498.                do
 3502.                   fieldout(ifirst + $I_L3498_16) = c(-1 + ( 2 + int( ratio * real( -1 + ifirst + $I_L3498_16, 8 ) ) )) * ( -( $hout_S5 * real( -1 + ifirst + $I_L3498_16, 8 ) ) + $hin_S6 * real( -1 + ( 2 + int( ratio * real( -1 + ifirst + $I_L3498_16, 8 ) ) ), 8 ) ) + c(2 + int( ratio * real( -1 + ifirst + $I_L3498_16, 8 ) )) * ( -( $hin_S6 * real( -2 + ( 2 + int( ratio * real( -1 + ifirst + $I_L3498_16, 8 ) ) ), 8 ) ) + $hout_S5 * real( -1 + ifirst + $I_L3498_16, 8 ) )
 3503.                   $I_L3498_16 = 1 + $I_L3498_16
 3498.                   if ( $I_L3498_16 >= 1 + ilast + -ifirst ) exit
 3498.                enddo
 3498.             endif
 3438.             _free( t$504 )
 3438.          endif
 3438.       endif
 3504.       return
 3504.       end
 3504.       
 3506.       
 3506.       subroutine nearestijtoibjb_i2d( fieldin, fieldout )
 3506.       seatp_fieldout = loc( fieldout )
 3506.       seatp_fieldin = loc( fieldin )
 3506.       t$230 = imax
 3506.       t$231 = jmax
 3507.       t$507 = _zla( 0, imax )
 3506.       t$508 = _zla( 0, imax )
 3507.       t$509 = _zla( 0, jmax )
 3506.       t$510 = _zla( 0, imax ) * _zla( 0, jmax )
 3506.       t$232 = ibmax
 3506.       t$233 = jbmax
 3508.       t$511 = _zla( 0, ibmax )
 3506.       t$512 = _zla( 0, ibmax )
 3508.       t$513 = _zla( 0, jbmax )
 3506.       t$514 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3510.       t$517 = 4 * _zla( 0, imax )
 3506.       t$515 = int( _alloc( 4 * _zla( 0, imax ) ), 8 )
 3510.       t$516 = t$515
 3520.       if ( reducedgrid /= .false. ) then
 3522.          if ( mylastlat + -myfirstlat >= 0 ) then
 3522.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 3521.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3521.             $$_fout_BASE = _alloc( 8 * _rsh( 63 + 32 * _zla( 0, imax ), 6 ) )
 3521.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3521.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3522.             $t_S1 = myfirstlat
 3522.             $I_L3522_56 = 0
 3522. !$omp do schedule(static)
 3522.             do
 3523.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3522_56, 0)
 3524.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3522_56, 0)
 3525.                call cyclicnearest_i( imax, (imaxperj%base_addr)($t_S1 + $I_L3522_56, 0), seat_fieldin(1, $t_S1 + $I_L3522_56), $$_fout(1), $$_ifirst, $$_ilast )
 3527.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 3529.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 3529.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 3529.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 3529.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 3529.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 3528.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 3528.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 3528.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 3528.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 3528.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 3527.                   $I_L3527_52 = 0
 3527. !dir$ ivdep
 3527.                   do
 3528.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3527_52, $t_S1 + $I_L3522_56, 0)
 3529.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3527_52, $t_S1 + $I_L3522_56, 0)
 3530.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L3527_52)
 3531.                      $I_L3527_52 = 1 + $I_L3527_52
 3527.                      if ( $I_L3527_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 3527.                   enddo
 3527.                endif
 3532.                $I_L3522_56 = 1 + $I_L3522_56
 3531.                if ( $I_L3522_56 >= $t_S3 ) exit
 3531.             enddo
 3521.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3521.             _free( $pvt_Abase_seg15_D0 )
 3533.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3533.          endif
 3534.       else if ( jbmax > 0 ) then
 3535.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3539.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3539.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3539.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3539.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3539.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3538.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3538.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3538.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3538.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3538.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3537.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3537.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3536.          $I_L3536_58 = 0
 3536. !$omp do schedule(static)
 3536.          do
 3537.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L3536_58, 0)
 3537.             if ( $t_S5 > 0 ) then
 3537.                $I_L3537_54 = 0
 3537. !dir$ ivdep
 3537.                do
 3538.                   $$_i = (iperijb%base_addr)(1 + $I_L3537_54, 1 + $I_L3536_58, 0)
 3539.                   $$_j = (jperijb%base_addr)(1 + $I_L3537_54, 1 + $I_L3536_58, 0)
 3540.                   seat_fieldout(1 + $I_L3537_54, 1 + $I_L3536_58) = seat_fieldin($$_i, $$_j)
 3541.                   $I_L3537_54 = 1 + $I_L3537_54
 3537.                   if ( $I_L3537_54 >= $t_S5 ) exit
 3537.                enddo
 3537.             endif
 3542.             $I_L3536_58 = 1 + $I_L3536_58
 3541.             if ( $I_L3536_58 >= jbmax ) exit
 3541.          enddo
 3543.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3543.       endif
 3506.       _free( t$515 )
 3545.       return
 3545.       end
 3545.       
 3549.       
 3549.       subroutine nearestijtoibjb_r2d( fieldin, fieldout )
 3549.       seatp_fieldout = loc( fieldout )
 3549.       seatp_fieldin = loc( fieldin )
 3549.       t$235 = imax
 3549.       t$236 = jmax
 3550.       t$518 = _zla( 0, imax )
 3549.       t$519 = _zla( 0, imax )
 3550.       t$520 = _zla( 0, jmax )
 3549.       t$521 = _zla( 0, imax ) * _zla( 0, jmax )
 3549.       t$237 = ibmax
 3549.       t$238 = jbmax
 3551.       t$522 = _zla( 0, ibmax )
 3549.       t$523 = _zla( 0, ibmax )
 3551.       t$524 = _zla( 0, jbmax )
 3549.       t$525 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3553.       t$528 = 8 * _zla( 0, imax )
 3549.       t$526 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 3553.       t$527 = t$526
 3563.       if ( reducedgrid /= .false. ) then
 3565.          if ( mylastlat + -myfirstlat >= 0 ) then
 3565.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 3564.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3564.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 3564.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3564.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3565.             $t_S1 = myfirstlat
 3565.             $I_L3565_56 = 0
 3565. !$omp do schedule(static)
 3565.             do
 3566.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3565_56, 0)
 3567.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3565_56, 0)
 3568.                call cyclicnearest_r( imax, (imaxperj%base_addr)($t_S1 + $I_L3565_56, 0), seat_fieldin(1, $t_S1 + $I_L3565_56), $$_fout(1), $$_ifirst, $$_ilast )
 3570.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 3572.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 3572.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 3572.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 3572.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 3572.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 3571.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 3571.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 3571.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 3571.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 3571.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 3570.                   $I_L3570_52 = 0
 3570. !dir$ ivdep
 3570.                   do
 3571.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3570_52, $t_S1 + $I_L3565_56, 0)
 3572.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3570_52, $t_S1 + $I_L3565_56, 0)
 3573.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L3570_52)
 3574.                      $I_L3570_52 = 1 + $I_L3570_52
 3570.                      if ( $I_L3570_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 3570.                   enddo
 3570.                endif
 3575.                $I_L3565_56 = 1 + $I_L3565_56
 3574.                if ( $I_L3565_56 >= $t_S3 ) exit
 3574.             enddo
 3564.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3564.             _free( $pvt_Abase_seg15_D0 )
 3576.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3576.          endif
 3577.       else if ( jbmax > 0 ) then
 3578.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3582.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3582.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3582.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3582.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3582.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3581.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3581.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3581.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3581.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3581.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3580.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3580.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3579.          $I_L3579_58 = 0
 3579. !$omp do schedule(static)
 3579.          do
 3580.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L3579_58, 0)
 3580.             if ( $t_S5 > 0 ) then
 3580.                $I_L3580_54 = 0
 3580. !dir$ ivdep
 3580.                do
 3581.                   $$_i = (iperijb%base_addr)(1 + $I_L3580_54, 1 + $I_L3579_58, 0)
 3582.                   $$_j = (jperijb%base_addr)(1 + $I_L3580_54, 1 + $I_L3579_58, 0)
 3583.                   seat_fieldout(1 + $I_L3580_54, 1 + $I_L3579_58) = seat_fieldin($$_i, $$_j)
 3584.                   $I_L3580_54 = 1 + $I_L3580_54
 3580.                   if ( $I_L3580_54 >= $t_S5 ) exit
 3580.                enddo
 3580.             endif
 3585.             $I_L3579_58 = 1 + $I_L3579_58
 3584.             if ( $I_L3579_58 >= jbmax ) exit
 3584.          enddo
 3586.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3586.       endif
 3549.       _free( t$526 )
 3588.       return
 3588.       end
 3588.       
 3591.       
 3591.       subroutine nearestijtoibjb_i3d( fieldin, fieldout )
 3591.       seatp_fieldout = loc( fieldout )
 3591.       seatp_fieldin = loc( fieldin )
 3591.       t$240 = imax
 3591.       t$241 = kmax
 3591.       t$242 = jmax
 3592.       t$529 = _zla( 0, imax )
 3591.       t$530 = _zla( 0, imax )
 3592.       t$531 = _zla( 0, kmax )
 3591.       t$532 = _zla( 0, imax ) * _zla( 0, kmax )
 3592.       t$533 = _zla( 0, jmax )
 3591.       t$534 = _zla( 0, imax ) * _zla( 0, kmax ) * _zla( 0, jmax )
 3591.       t$243 = ibmax
 3591.       t$245 = jbmax
 3593.       t$535 = _zla( 0, ibmax )
 3591.       t$536 = _zla( 0, ibmax )
 3591.       t$537 = _zla( 0, kmax ) * _zla( 0, ibmax )
 3593.       t$538 = _zla( 0, jbmax )
 3591.       t$539 = _zla( 0, kmax ) * _zla( 0, ibmax ) * _zla( 0, jbmax )
 3595.       t$542 = 4 * _zla( 0, imax )
 3591.       t$540 = int( _alloc( 4 * _zla( 0, imax ) ), 8 )
 3595.       t$541 = t$540
 3605.       if ( reducedgrid /= .false. ) then
 3607.          if ( mylastlat + -myfirstlat >= 0 ) then
 3607.             $t_S5 = ( 1 + mylastlat + -myfirstlat )
 3606.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3606.             $$_fout_BASE = _alloc( 8 * _rsh( 63 + 32 * _zla( 0, imax ), 6 ) )
 3606.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3606.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3607.             $t_S1 = myfirstlat
 3607.             $I_L3607_74 = 0
 3607. !$omp do schedule(static)
 3607.             do
 3608.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3607_74, 0)
 3609.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3607_74, 0)
 3610.                $t_S4 = kmax
 3610.                if ( kmax > 0 ) then
 3610.                   $I_L3610_70 = 0
 3610.                   do
 3611.                      call cyclicnearest_i( imax, (imaxperj%base_addr)($t_S1 + $I_L3607_74, 0), seat_fieldin(1, 1 + $I_L3610_70, $t_S1 + $I_L3607_74), $$_fout(1), $$_ifirst, $$_ilast )
 3613.                      if ( $$_ilast + -$$_ifirst >= 0 ) then
 3615.                         $SC_jbperij_I5 = jbperij%dim_1%EX
 3615.                         $SC_jbperij_I6 = jbperij%dim_1%LB
 3615.                         $SC_jbperij_I8 = jbperij%dim_2%SM
 3615.                         $SC_jbperij_I7 = jbperij%dim_2%EX
 3615.                         $SC_jbperij_I9 = jbperij%dim_2%LB
 3614.                         $SC_ibperij_I0 = ibperij%dim_1%EX
 3614.                         $SC_ibperij_I1 = ibperij%dim_1%LB
 3614.                         $SC_ibperij_I3 = ibperij%dim_2%SM
 3614.                         $SC_ibperij_I2 = ibperij%dim_2%EX
 3614.                         $SC_ibperij_I4 = ibperij%dim_2%LB
 3613.                         $I_L3613_66 = 0
 3613. !dir$ ivdep
 3613.                         do
 3614.                            $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3613_66, $t_S1 + $I_L3607_74, 0)
 3615.                            $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3613_66, $t_S1 + $I_L3607_74, 0)
 3616.                            seat_fieldout($$_ib, 1 + $I_L3610_70, $$_jb) = $$_fout($$_ifirst + $I_L3613_66)
 3617.                            $I_L3613_66 = 1 + $I_L3613_66
 3613.                            if ( $I_L3613_66 >= 1 + $$_ilast + -$$_ifirst ) exit
 3613.                         enddo
 3613.                      endif
 3618.                      $I_L3610_70 = 1 + $I_L3610_70
 3617.                      if ( $I_L3610_70 >= $t_S4 ) exit
 3617.                   enddo
 3617.                endif
 3619.                $I_L3607_74 = 1 + $I_L3607_74
 3618.                if ( $I_L3607_74 >= $t_S5 ) exit
 3618.             enddo
 3606.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3606.             _free( $pvt_Abase_seg15_D0 )
 3620.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3620.          endif
 3621.       else if ( jbmax > 0 ) then
 3622.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3626.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3626.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3626.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3626.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3626.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3625.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3625.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3625.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3625.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3625.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3624.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3624.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3623.          $I_L3623_76 = 0
 3623. !$omp do schedule(static)
 3623.          do
 3624.             $t_S7 = (ibmaxperjb%base_addr)(1 + $I_L3623_76, 0)
 3624.             if ( $t_S7 > 0 ) then
 3624.                $I_L3624_72 = 0
 3624.                do
 3625.                   $$_i = (iperijb%base_addr)(1 + $I_L3624_72, 1 + $I_L3623_76, 0)
 3626.                   $$_j = (jperijb%base_addr)(1 + $I_L3624_72, 1 + $I_L3623_76, 0)
 3627.                   $F_A33 = kmax
 3627.                   if ( kmax > 0 ) then
 3627.                      $I_L3627_68 = 0
 3627. !dir$ ivdep
 3627.                      do
 3627.                         seat_fieldout(1 + $I_L3624_72, 1 + $I_L3627_68, 1 + $I_L3623_76) = seat_fieldin($$_i, 1 + $I_L3627_68, $$_j)
 3627.                         $I_L3627_68 = 1 + $I_L3627_68
 3627.                         if ( $I_L3627_68 >= $F_A33 ) exit
 3627.                      enddo
 3627.                   endif
 3628.                   $I_L3624_72 = 1 + $I_L3624_72
 3624.                   if ( $I_L3624_72 >= $t_S7 ) exit
 3624.                enddo
 3624.             endif
 3629.             $I_L3623_76 = 1 + $I_L3623_76
 3628.             if ( $I_L3623_76 >= jbmax ) exit
 3628.          enddo
 3630.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3630.       endif
 3591.       _free( t$540 )
 3632.       return
 3632.       end
 3632.       
 3636.       
 3636.       subroutine nearestijtoibjb_r3d( fieldin, fieldout )
 3636.       seatp_fieldout = loc( fieldout )
 3636.       seatp_fieldin = loc( fieldin )
 3636.       t$247 = imax
 3636.       t$248 = kmax
 3636.       t$249 = jmax
 3637.       t$543 = _zla( 0, imax )
 3636.       t$544 = _zla( 0, imax )
 3637.       t$545 = _zla( 0, kmax )
 3636.       t$546 = _zla( 0, imax ) * _zla( 0, kmax )
 3637.       t$547 = _zla( 0, jmax )
 3636.       t$548 = _zla( 0, imax ) * _zla( 0, kmax ) * _zla( 0, jmax )
 3636.       t$250 = ibmax
 3636.       t$252 = jbmax
 3638.       t$549 = _zla( 0, ibmax )
 3636.       t$550 = _zla( 0, ibmax )
 3636.       t$551 = _zla( 0, kmax ) * _zla( 0, ibmax )
 3638.       t$552 = _zla( 0, jbmax )
 3636.       t$553 = _zla( 0, kmax ) * _zla( 0, ibmax ) * _zla( 0, jbmax )
 3640.       t$556 = 8 * _zla( 0, imax )
 3636.       t$554 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 3640.       t$555 = t$554
 3650.       if ( reducedgrid /= .false. ) then
 3652.          if ( mylastlat + -myfirstlat >= 0 ) then
 3652.             $t_S5 = ( 1 + mylastlat + -myfirstlat )
 3651.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3651.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 3651.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3651.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3652.             $t_S1 = myfirstlat
 3652.             $I_L3652_74 = 0
 3652. !$omp do schedule(static)
 3652.             do
 3653.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3652_74, 0)
 3654.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3652_74, 0)
 3655.                $t_S4 = kmax
 3655.                if ( kmax > 0 ) then
 3655.                   $I_L3655_70 = 0
 3655.                   do
 3656.                      call cyclicnearest_r( imax, (imaxperj%base_addr)($t_S1 + $I_L3652_74, 0), seat_fieldin(1, 1 + $I_L3655_70, $t_S1 + $I_L3652_74), $$_fout(1), $$_ifirst, $$_ilast )
 3658.                      if ( $$_ilast + -$$_ifirst >= 0 ) then
 3660.                         $SC_jbperij_I5 = jbperij%dim_1%EX
 3660.                         $SC_jbperij_I6 = jbperij%dim_1%LB
 3660.                         $SC_jbperij_I8 = jbperij%dim_2%SM
 3660.                         $SC_jbperij_I7 = jbperij%dim_2%EX
 3660.                         $SC_jbperij_I9 = jbperij%dim_2%LB
 3659.                         $SC_ibperij_I0 = ibperij%dim_1%EX
 3659.                         $SC_ibperij_I1 = ibperij%dim_1%LB
 3659.                         $SC_ibperij_I3 = ibperij%dim_2%SM
 3659.                         $SC_ibperij_I2 = ibperij%dim_2%EX
 3659.                         $SC_ibperij_I4 = ibperij%dim_2%LB
 3658.                         $I_L3658_66 = 0
 3658. !dir$ ivdep
 3658.                         do
 3659.                            $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3658_66, $t_S1 + $I_L3652_74, 0)
 3660.                            $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3658_66, $t_S1 + $I_L3652_74, 0)
 3661.                            seat_fieldout($$_ib, 1 + $I_L3655_70, $$_jb) = $$_fout($$_ifirst + $I_L3658_66)
 3662.                            $I_L3658_66 = 1 + $I_L3658_66
 3658.                            if ( $I_L3658_66 >= 1 + $$_ilast + -$$_ifirst ) exit
 3658.                         enddo
 3658.                      endif
 3663.                      $I_L3655_70 = 1 + $I_L3655_70
 3662.                      if ( $I_L3655_70 >= $t_S4 ) exit
 3662.                   enddo
 3662.                endif
 3664.                $I_L3652_74 = 1 + $I_L3652_74
 3663.                if ( $I_L3652_74 >= $t_S5 ) exit
 3663.             enddo
 3651.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3651.             _free( $pvt_Abase_seg15_D0 )
 3665.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3665.          endif
 3666.       else if ( jbmax > 0 ) then
 3667.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3671.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3671.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3671.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3671.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3671.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3670.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3670.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3670.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3670.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3670.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3669.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3669.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3668.          $I_L3668_76 = 0
 3668. !$omp do schedule(static)
 3668.          do
 3669.             $t_S7 = (ibmaxperjb%base_addr)(1 + $I_L3668_76, 0)
 3669.             if ( $t_S7 > 0 ) then
 3669.                $I_L3669_72 = 0
 3669.                do
 3670.                   $$_i = (iperijb%base_addr)(1 + $I_L3669_72, 1 + $I_L3668_76, 0)
 3671.                   $$_j = (jperijb%base_addr)(1 + $I_L3669_72, 1 + $I_L3668_76, 0)
 3672.                   $F_A33 = kmax
 3672.                   if ( kmax > 0 ) then
 3672.                      $I_L3672_68 = 0
 3672. !dir$ ivdep
 3672.                      do
 3672.                         seat_fieldout(1 + $I_L3669_72, 1 + $I_L3672_68, 1 + $I_L3668_76) = seat_fieldin($$_i, 1 + $I_L3672_68, $$_j)
 3672.                         $I_L3672_68 = 1 + $I_L3672_68
 3672.                         if ( $I_L3672_68 >= $F_A33 ) exit
 3672.                      enddo
 3672.                   endif
 3673.                   $I_L3669_72 = 1 + $I_L3669_72
 3669.                   if ( $I_L3669_72 >= $t_S7 ) exit
 3669.                enddo
 3669.             endif
 3674.             $I_L3668_76 = 1 + $I_L3668_76
 3673.             if ( $I_L3668_76 >= jbmax ) exit
 3673.          enddo
 3675.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3675.       endif
 3636.       _free( t$554 )
 3677.       return
 3677.       end
 3677.       
 3680.       
 3680.       subroutine nearestibjbtoij_i2d( fieldin, fieldout )
 3680.       seatp_fieldout = loc( fieldout )
 3680.       seatp_fieldin = loc( fieldin )
 3680.       t$254 = ibmax
 3680.       t$255 = jbmax
 3681.       t$557 = _zla( 0, ibmax )
 3680.       t$558 = _zla( 0, ibmax )
 3681.       t$559 = _zla( 0, jbmax )
 3680.       t$560 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3680.       t$256 = imax
 3680.       t$257 = jmax
 3682.       t$561 = _zla( 0, imax )
 3680.       t$562 = _zla( 0, imax )
 3682.       t$563 = _zla( 0, jmax )
 3680.       t$564 = _zla( 0, imax ) * _zla( 0, jmax )
 3693.       if ( reducedgrid /= .false. ) then
 3695.          if ( mylastlat + -myfirstlat >= 0 ) then
 3694.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3695.             $I_L3695_40 = 0
 3695. !$omp do schedule(static)
 3695.             do
 3701.                $I_L3695_40 = 1 + $I_L3695_40
 3695.                if ( $I_L3695_40 >= 1 + mylastlat + -myfirstlat ) exit
 3695.             enddo
 3702.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3702.          endif
 3703.       else if ( jbmax > 0 ) then
 3704.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3708.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3708.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3708.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3708.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3708.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3707.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3707.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3707.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3707.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3707.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3706.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3706.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3705.          $I_L3705_44 = 0
 3705. !$omp do schedule(static)
 3705.          do
 3706.             $t_S2 = (ibmaxperjb%base_addr)(1 + $I_L3705_44, 0)
 3706.             if ( $t_S2 > 0 ) then
 3706.                $I_L3706_42 = 0
 3706. !dir$ ivdep
 3706.                do
 3707.                   $$_i = (iperijb%base_addr)(1 + $I_L3706_42, 1 + $I_L3705_44, 0)
 3708.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L3706_42, 1 + $I_L3705_44, 0) + -myfirstlat
 3709.                   seat_fieldout($$_i, $$_j) = seat_fieldin(1 + $I_L3706_42, 1 + $I_L3705_44)
 3710.                   $I_L3706_42 = 1 + $I_L3706_42
 3706.                   if ( $I_L3706_42 >= $t_S2 ) exit
 3706.                enddo
 3706.             endif
 3711.             $I_L3705_44 = 1 + $I_L3705_44
 3710.             if ( $I_L3705_44 >= jbmax ) exit
 3710.          enddo
 3712.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3712.       endif
 3714.       return
 3714.       end
 3714.       
 3717.       
 3717.       subroutine nearestibjbtoij_r2d( fieldin, fieldout )
 3717.       seatp_fieldout = loc( fieldout )
 3717.       seatp_fieldin = loc( fieldin )
 3717.       t$258 = ibmax
 3717.       t$259 = jbmax
 3718.       t$565 = _zla( 0, ibmax )
 3717.       t$566 = _zla( 0, ibmax )
 3718.       t$567 = _zla( 0, jbmax )
 3717.       t$568 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3717.       t$260 = imax
 3717.       t$261 = jmax
 3719.       t$569 = _zla( 0, imax )
 3717.       t$570 = _zla( 0, imax )
 3719.       t$571 = _zla( 0, jmax )
 3717.       t$572 = _zla( 0, imax ) * _zla( 0, jmax )
 3730.       if ( reducedgrid /= .false. ) then
 3732.          if ( mylastlat + -myfirstlat >= 0 ) then
 3731.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3732.             $I_L3732_40 = 0
 3732. !$omp do schedule(static)
 3732.             do
 3738.                $I_L3732_40 = 1 + $I_L3732_40
 3732.                if ( $I_L3732_40 >= 1 + mylastlat + -myfirstlat ) exit
 3732.             enddo
 3739.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3739.          endif
 3740.       else if ( jbmax > 0 ) then
 3741.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3745.          $SC_jperijb_I7 = jperijb%dim_1%EX
 3745.          $SC_jperijb_I8 = jperijb%dim_1%LB
 3745.          $SC_jperijb_I10 = jperijb%dim_2%SM
 3745.          $SC_jperijb_I9 = jperijb%dim_2%EX
 3745.          $SC_jperijb_I11 = jperijb%dim_2%LB
 3744.          $SC_iperijb_I2 = iperijb%dim_1%EX
 3744.          $SC_iperijb_I3 = iperijb%dim_1%LB
 3744.          $SC_iperijb_I5 = iperijb%dim_2%SM
 3744.          $SC_iperijb_I4 = iperijb%dim_2%EX
 3744.          $SC_iperijb_I6 = iperijb%dim_2%LB
 3743.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 3743.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 3742.          $I_L3742_44 = 0
 3742. !$omp do schedule(static)
 3742.          do
 3743.             $t_S2 = (ibmaxperjb%base_addr)(1 + $I_L3742_44, 0)
 3743.             if ( $t_S2 > 0 ) then
 3743.                $I_L3743_42 = 0
 3743. !dir$ ivdep
 3743.                do
 3744.                   $$_i = (iperijb%base_addr)(1 + $I_L3743_42, 1 + $I_L3742_44, 0)
 3745.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L3743_42, 1 + $I_L3742_44, 0) + -myfirstlat
 3746.                   seat_fieldout($$_i, $$_j) = seat_fieldin(1 + $I_L3743_42, 1 + $I_L3742_44)
 3747.                   $I_L3743_42 = 1 + $I_L3743_42
 3743.                   if ( $I_L3743_42 >= $t_S2 ) exit
 3743.                enddo
 3743.             endif
 3748.             $I_L3742_44 = 1 + $I_L3742_44
 3747.             if ( $I_L3742_44 >= jbmax ) exit
 3747.          enddo
 3749.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3749.       endif
 3751.       return
 3751.       end
 3751.       
 3753.       
 3753.       subroutine cyclicnearest_i( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 3753.       t$262 = dimin
 3759.       t$573 = _zla( 0, dimin )
 3753.       t$263 = dimout
 3760.       t$574 = _zla( 0, dimout )
 3773.       t$577 = 4 * _zla( 0, dimout )
 3753.       t$575 = int( _alloc( 4 * _zla( 0, dimout ) ), 8 )
 3773.       t$576 = t$575
 3777.       $iratio_S0 = dimin / dimout
 3778.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 3779.          if ( ilast + -ifirst >= 0 ) then
 3779.             $I_L3779_16 = 0
 3779. !dir$ ivdep
 3779.             do
 3781.                fieldout(ifirst + $I_L3779_16) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L3779_16)
 3782.                $I_L3779_16 = 1 + $I_L3779_16
 3779.                if ( $I_L3779_16 >= 1 + ilast + -ifirst ) exit
 3779.             enddo
 3779.          endif
 3753.          _free( t$575 )
 3784.       else if ( dimin <= 0 ) then
 3789.           _substr(t$1767,1,48) = '**(CyclicNearest)** ERROR: Few input data points'
 3789.          call _stop(  _substr(t$1767,1,48) )
 3789.       else if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 3797.           _substr(t$1768,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 3797.          call _stop(  _substr(t$1768,1,64) )
 3797.       else
 3803.          $hin_S6 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 3804.          $hout_S3 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 3810.          if ( ilast + -ifirst >= 0 ) then
 3810.             $I_L3810_22 = 0
 3810.             do
 3811.                $alfaout_S4 = $hout_S3 * ( -1 + ifirst + $I_L3810_22 )
 3812.                difalfa = 9.99999986991104e14
 3814.                $I_L3814_18 = 0
 3814. !dir$ ivdep
 3814.                do
 3816.                   $alfain_S5 = $hin_S6 * real( $I_L3814_18, 8 )
 3815.                   difalfa = min( difalfa, abs( $alfain_S5 + -$alfaout_S4 ) )
 3817.                   $I_L3814_18 = 1 + $I_L3814_18
 3814.                   if ( $I_L3814_18 >= dimin ) exit
 3814.                enddo
 3819.                $I_L3819_20 = 0
 3819. !dir$ ivdep
 3819.                do
 3824.                   $alfain_S8 = $hin_S6 * real( $I_L3819_20, 8 )
 3820.                   if ( abs( $alfain_S8 + -$alfaout_S4 ) == difalfa ) then
 3822.                      fieldout(ifirst + $I_L3810_22) = fieldin(1 + $I_L3819_20)
 3822.                   endif
 3825.                   $I_L3819_20 = 1 + $I_L3819_20
 3823.                   if ( $I_L3819_20 >= dimin ) exit
 3823.                enddo
 3826.                $I_L3810_22 = 1 + $I_L3810_22
 3825.                if ( $I_L3810_22 >= 1 + ilast + -ifirst ) exit
 3825.             enddo
 3825.          endif
 3753.          _free( t$575 )
 3753.       endif
 3828.       return
 3828.       end
 3828.       
 3832.       
 3832.       subroutine cyclicnearest_r( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 3832.       t$265 = dimin
 3838.       t$578 = _zla( 0, dimin )
 3832.       t$266 = dimout
 3839.       t$579 = _zla( 0, dimout )
 3852.       t$582 = 4 * _zla( 0, dimout )
 3832.       t$580 = int( _alloc( 4 * _zla( 0, dimout ) ), 8 )
 3852.       t$581 = t$580
 3856.       $iratio_S0 = dimin / dimout
 3857.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 3858.          if ( ilast + -ifirst >= 0 ) then
 3858.             $I_L3858_16 = 0
 3858. !dir$ ivdep
 3858.             do
 3860.                fieldout(ifirst + $I_L3858_16) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L3858_16)
 3861.                $I_L3858_16 = 1 + $I_L3858_16
 3858.                if ( $I_L3858_16 >= 1 + ilast + -ifirst ) exit
 3858.             enddo
 3858.          endif
 3832.          _free( t$580 )
 3863.       else if ( dimin <= 0 ) then
 3868.           _substr(t$1783,1,48) = '**(CyclicNearest)** ERROR: Few input data points'
 3868.          call _stop(  _substr(t$1783,1,48) )
 3868.       else if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 3876.           _substr(t$1784,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 3876.          call _stop(  _substr(t$1784,1,64) )
 3876.       else
 3882.          $hin_S6 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 3883.          $hout_S3 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 3888.          if ( ilast + -ifirst >= 0 ) then
 3888.             $I_L3888_22 = 0
 3888.             do
 3889.                $alfaout_S4 = $hout_S3 * ( -1 + ifirst + $I_L3888_22 )
 3890.                difalfa = 9.99999986991104e14
 3892.                $I_L3892_18 = 0
 3892. !dir$ ivdep
 3892.                do
 3894.                   $alfain_S5 = $hin_S6 * real( $I_L3892_18, 8 )
 3893.                   difalfa = min( difalfa, abs( $alfain_S5 + -$alfaout_S4 ) )
 3895.                   $I_L3892_18 = 1 + $I_L3892_18
 3892.                   if ( $I_L3892_18 >= dimin ) exit
 3892.                enddo
 3897.                $I_L3897_20 = 0
 3897. !dir$ ivdep
 3897.                do
 3902.                   $alfain_S8 = $hin_S6 * real( $I_L3897_20, 8 )
 3898.                   if ( abs( $alfain_S8 + -$alfaout_S4 ) == difalfa ) then
 3900.                      fieldout(ifirst + $I_L3888_22) = fieldin(1 + $I_L3897_20)
 3900.                   endif
 3903.                   $I_L3897_20 = 1 + $I_L3897_20
 3901.                   if ( $I_L3897_20 >= dimin ) exit
 3901.                enddo
 3904.                $I_L3888_22 = 1 + $I_L3888_22
 3903.                if ( $I_L3888_22 >= 1 + ilast + -ifirst ) exit
 3903.             enddo
 3903.          endif
 3832.          _free( t$580 )
 3832.       endif
 3906.       return
 3906.       end
 3906.       
 3909.       
 3909.       subroutine freqboxijtoibjb_i2d( fieldin, fieldout )
 3909.       seatp_fieldout = loc( fieldout )
 3909.       seatp_fieldin = loc( fieldin )
 3909.       t$268 = imax
 3909.       t$269 = jmax
 3910.       t$583 = _zla( 0, imax )
 3909.       t$584 = _zla( 0, imax )
 3910.       t$585 = _zla( 0, jmax )
 3909.       t$586 = _zla( 0, imax ) * _zla( 0, jmax )
 3909.       t$270 = ibmax
 3909.       t$271 = jbmax
 3911.       t$587 = _zla( 0, ibmax )
 3909.       t$588 = _zla( 0, ibmax )
 3911.       t$589 = _zla( 0, jbmax )
 3909.       t$590 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3913.       t$593 = 8 * _zla( 0, imax )
 3909.       t$591 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 3913.       t$592 = t$591
 3923.       if ( reducedgrid /= .false. ) then
 3925.          if ( mylastlat + -myfirstlat >= 0 ) then
 3925.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 3924.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3924.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 3924.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3924.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3925.             $t_S1 = myfirstlat
 3925.             $I_L3925_56 = 0
 3925. !$omp do schedule(static)
 3925.             do
 3926.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3925_56, 0)
 3927.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3925_56, 0)
 3928.                call cyclicfreqbox_i( imax, (imaxperj%base_addr)($t_S1 + $I_L3925_56, 0), seat_fieldin(1, $t_S1 + $I_L3925_56), $$_fout(1), $$_ifirst, $$_ilast )
 3930.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 3932.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 3932.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 3932.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 3932.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 3932.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 3931.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 3931.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 3931.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 3931.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 3931.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 3930.                   $I_L3930_52 = 0
 3930. !dir$ ivdep
 3930.                   do
 3931.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3930_52, $t_S1 + $I_L3925_56, 0)
 3932.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3930_52, $t_S1 + $I_L3925_56, 0)
 3933.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L3930_52)
 3934.                      $I_L3930_52 = 1 + $I_L3930_52
 3930.                      if ( $I_L3930_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 3930.                   enddo
 3930.                endif
 3935.                $I_L3925_56 = 1 + $I_L3925_56
 3934.                if ( $I_L3925_56 >= $t_S3 ) exit
 3934.             enddo
 3924.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3924.             _free( $pvt_Abase_seg15_D0 )
 3936.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3936.          endif
 3937.       else if ( jbmax > 0 ) then
 3938.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3942.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3942.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3942.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3942.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3942.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3941.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3941.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3941.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3941.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3941.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3940.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3940.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3939.          $I_L3939_58 = 0
 3939. !$omp do schedule(static)
 3939.          do
 3940.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L3939_58, 0)
 3940.             if ( $t_S5 > 0 ) then
 3940.                $I_L3940_54 = 0
 3940. !dir$ ivdep
 3940.                do
 3941.                   $$_i = (iperijb%base_addr)(1 + $I_L3940_54, 1 + $I_L3939_58, 0)
 3942.                   $$_j = (jperijb%base_addr)(1 + $I_L3940_54, 1 + $I_L3939_58, 0)
 3943.                   seat_fieldout(1 + $I_L3940_54, 1 + $I_L3939_58) = seat_fieldin($$_i, $$_j)
 3944.                   $I_L3940_54 = 1 + $I_L3940_54
 3940.                   if ( $I_L3940_54 >= $t_S5 ) exit
 3940.                enddo
 3940.             endif
 3945.             $I_L3939_58 = 1 + $I_L3939_58
 3944.             if ( $I_L3939_58 >= jbmax ) exit
 3944.          enddo
 3946.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3946.       endif
 3909.       _free( t$591 )
 3948.       return
 3948.       end
 3948.       
 3950.       
 3950.       subroutine freqboxijtoibjb_r2d( fieldin, fieldout )
 3950.       seatp_fieldout = loc( fieldout )
 3950.       seatp_fieldin = loc( fieldin )
 3950.       t$273 = imax
 3950.       t$274 = jmax
 3951.       t$594 = _zla( 0, imax )
 3950.       t$595 = _zla( 0, imax )
 3951.       t$596 = _zla( 0, jmax )
 3950.       t$597 = _zla( 0, imax ) * _zla( 0, jmax )
 3950.       t$275 = ibmax
 3950.       t$276 = jbmax
 3952.       t$598 = _zla( 0, ibmax )
 3950.       t$599 = _zla( 0, ibmax )
 3952.       t$600 = _zla( 0, jbmax )
 3950.       t$601 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 3954.       t$604 = 8 * _zla( 0, imax )
 3950.       t$602 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 3954.       t$603 = t$602
 3964.       if ( reducedgrid /= .false. ) then
 3966.          if ( mylastlat + -myfirstlat >= 0 ) then
 3966.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 3965.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3965.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 3965.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 3965.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 3966.             $t_S1 = myfirstlat
 3966.             $I_L3966_56 = 0
 3966. !$omp do schedule(static)
 3966.             do
 3967.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L3966_56, 0)
 3968.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L3966_56, 0)
 3969.                call cyclicfreqbox_r( imax, (imaxperj%base_addr)($t_S1 + $I_L3966_56, 0), seat_fieldin(1, $t_S1 + $I_L3966_56), $$_fout(1), $$_ifirst, $$_ilast )
 3971.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 3973.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 3973.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 3973.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 3973.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 3973.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 3972.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 3972.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 3972.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 3972.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 3972.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 3971.                   $I_L3971_52 = 0
 3971. !dir$ ivdep
 3971.                   do
 3972.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L3971_52, $t_S1 + $I_L3966_56, 0)
 3973.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L3971_52, $t_S1 + $I_L3966_56, 0)
 3974.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L3971_52)
 3975.                      $I_L3971_52 = 1 + $I_L3971_52
 3971.                      if ( $I_L3971_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 3971.                   enddo
 3971.                endif
 3976.                $I_L3966_56 = 1 + $I_L3966_56
 3975.                if ( $I_L3966_56 >= $t_S3 ) exit
 3975.             enddo
 3965.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 3965.             _free( $pvt_Abase_seg15_D0 )
 3977.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 3977.          endif
 3978.       else if ( jbmax > 0 ) then
 3979.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 3983.          $SC_jperijb_I17 = jperijb%dim_1%EX
 3983.          $SC_jperijb_I18 = jperijb%dim_1%LB
 3983.          $SC_jperijb_I20 = jperijb%dim_2%SM
 3983.          $SC_jperijb_I19 = jperijb%dim_2%EX
 3983.          $SC_jperijb_I21 = jperijb%dim_2%LB
 3982.          $SC_iperijb_I12 = iperijb%dim_1%EX
 3982.          $SC_iperijb_I13 = iperijb%dim_1%LB
 3982.          $SC_iperijb_I15 = iperijb%dim_2%SM
 3982.          $SC_iperijb_I14 = iperijb%dim_2%EX
 3982.          $SC_iperijb_I16 = iperijb%dim_2%LB
 3981.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 3981.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 3980.          $I_L3980_58 = 0
 3980. !$omp do schedule(static)
 3980.          do
 3981.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L3980_58, 0)
 3981.             if ( $t_S5 > 0 ) then
 3981.                $I_L3981_54 = 0
 3981. !dir$ ivdep
 3981.                do
 3982.                   $$_i = (iperijb%base_addr)(1 + $I_L3981_54, 1 + $I_L3980_58, 0)
 3983.                   $$_j = (jperijb%base_addr)(1 + $I_L3981_54, 1 + $I_L3980_58, 0)
 3984.                   seat_fieldout(1 + $I_L3981_54, 1 + $I_L3980_58) = seat_fieldin($$_i, $$_j)
 3985.                   $I_L3981_54 = 1 + $I_L3981_54
 3981.                   if ( $I_L3981_54 >= $t_S5 ) exit
 3981.                enddo
 3981.             endif
 3986.             $I_L3980_58 = 1 + $I_L3980_58
 3985.             if ( $I_L3980_58 >= jbmax ) exit
 3985.          enddo
 3987.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 3987.       endif
 3950.       _free( t$602 )
 3989.       return
 3989.       end
 3989.       
 3996.       
 3996.       subroutine cyclicfreqbox_i( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 3996.       t$278 = dimin
 4002.       t$605 = _zla( 0, dimin )
 3996.       t$279 = dimout
 4003.       t$606 = _zla( 0, dimout )
 3996.       t$280 = ( 4 + 2 * dimin + 2 * dimout )
 4021.       t$607 = _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4021.       t$610 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 3996.       t$281 = ( 2 + dimin + dimout )
 4023.       t$611 = _zla( 0, ( 2 + dimin + dimout ) )
 3996.       t$612 = _zla( 0, ( 2 + dimin + dimout ) )
 3996.       t$613 = 2 * _zla( 0, ( 2 + dimin + dimout ) )
 4023.       t$615 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 3996.       t$616 = 13 * _zla( 0, dimout )
 4024.       t$617 = 8 * ( 7 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ) / 8
 4024.       t$619 = t$617 + 104 * _zla( 0, dimout )
 4025.       t$620 = 8 * ( 7 + t$617 + 104 * _zla( 0, dimout ) ) / 8
 4025.       t$622 = t$620 + 8 * _zla( 0, dimout )
 4022.       t$623 = 8 * ( 7 + t$620 + 8 * _zla( 0, dimout ) ) / 8
 4022.       t$625 = t$623 + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 3996.       t$608 = int( _alloc( t$623 + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ), 8 )
 4021.       t$609 = t$608
 4023.       t$614 = t$608 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4024.       t$618 = t$617 + t$608
 4025.       t$621 = t$620 + t$608
 4022.       t$624 = t$623 + t$608
 4061.       $iratio_S0 = dimin / dimout
 4062.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 4063.          if ( ilast + -ifirst >= 0 ) then
 4063.             $I_L4063_32 = 0
 4063. !dir$ ivdep
 4063.             do
 4065.                fieldout(ifirst + $I_L4063_32) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L4063_32)
 4066.                $I_L4063_32 = 1 + $I_L4063_32
 4063.                if ( $I_L4063_32 >= 1 + ilast + -ifirst ) exit
 4063.             enddo
 4063.          endif
 3996.          _free( t$608 )
 4068.       else if ( dimin <= 0 ) then
 4073.           _substr(t$1827,1,48) = '**(CyclicFreqBox)** ERROR: Few input data points'
 4073.          call _stop(  _substr(t$1827,1,48) )
 4073.       else if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 4081.           _substr(t$1828,1,60) = '**(CyclicFreqBox)** ERROR: Output data out of input interval'
 4081.          call _stop(  _substr(t$1828,1,60) )
 4081.       else
 4099.          flgin(1) = .true.
 4100.          flgin(2) = .true.
 4101.          flgin(3) = .false.
 4102.          flgin(4) = .true.
 4103.          flgin(5) = .true.
 4104.          flgout(1) = .true.
 4105.          flgout(2) = .true.
 4106.          flgout(3) = .false.
 4107.          flgout(4) = .true.
 4108.          flgout(5) = .true.
 4115.          ioi = 2 + dimin + dimout
 4116.          $hin_S3 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 4124.          $I_L4124_34 = 0
 4124. !dir$ ivdep
 4124.          do
 4125.             dwork(3 + dimin + dimout + $I_L4124_34) = $hin_S3 * ( 5.0e-1 + real( $I_L4124_34, 8 ) )
 4126.             $I_L4124_34 = 1 + $I_L4124_34
 4124.             if ( $I_L4124_34 >= dimin ) exit
 4124.          enddo
 4131.          $hout_S5 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 4140.          if ( dimout > 0 ) then
 4140.             $I_L4140_36 = 0
 4140. !dir$ ivdep
 4140.             do
 4141.                dwork(4 + dimout + $I_L4140_36 + 2 * dimin) = $hout_S5 * ( 5.0e-1 + real( $I_L4140_36, 8 ) )
 4142.                $I_L4140_36 = 1 + $I_L4140_36
 4140.                if ( $I_L4140_36 >= dimout ) exit
 4140.             enddo
 4140.          endif
 4147.          $i1_S6 = 1
 4148.          i2 = 1
 4149.          $i3_S7 = 1
 4161.          $SC_flgout_I1 = flgout(2)
 4156.          $SC_flgin_I0 = flgin(2)
 4156.          do
 4151.             if ( dwork(2 + dimin + dimout + $i1_S6) == dwork(3 + dimout + i2 + 2 * dimin) ) then
 4152.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4153.                if ( $i3_S7 /= 1 ) then
 4154.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4155.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4156.                   if ( $SC_flgin_I0 == .false. ) then
 4157.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4158.                      if ( $i1_S6 > dimin / 2 ) then
 4158.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4158.                      endif
 4158.                   endif
 4160.                   mplon(-1 + $i3_S7, 2) = i2
 4161.                   if ( $SC_flgout_I1 == .false. ) then
 4162.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4163.                      if ( i2 > dimout / 2 ) then
 4163.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4163.                      endif
 4163.                   endif
 4163.                endif
 4166.                $i1_S6 = 1 + $i1_S6
 4167.                i2 = 1 + i2
 4169.             else if ( dwork(ioi + $i1_S6) < dwork(3 + dimout + i2 + 2 * dimin) ) then
 4170.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4171.                if ( $i3_S7 /= 1 ) then
 4172.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4173.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4174.                   if ( $SC_flgin_I0 == .false. ) then
 4175.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4176.                      if ( $i1_S6 > dimin / 2 ) then
 4176.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4176.                      endif
 4176.                   endif
 4178.                   mplon(-1 + $i3_S7, 2) = i2
 4179.                   if ( $SC_flgout_I1 == .false. ) then
 4180.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4181.                      if ( i2 > dimout / 2 ) then
 4181.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4181.                      endif
 4181.                   endif
 4181.                endif
 4184.                $i1_S6 = 1 + $i1_S6
 4184.             else
 4187.                dwork($i3_S7) = dwork(3 + dimout + i2 + 2 * dimin)
 4188.                if ( $i3_S7 /= 1 ) then
 4189.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4190.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4191.                   if ( $SC_flgin_I0 == .false. ) then
 4192.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4193.                      if ( $i1_S6 > dimin / 2 ) then
 4193.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4193.                      endif
 4193.                   endif
 4195.                   mplon(-1 + $i3_S7, 2) = i2
 4196.                   if ( $SC_flgout_I1 == .false. ) then
 4197.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4198.                      if ( i2 > dimout / 2 ) then
 4198.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4198.                      endif
 4198.                   endif
 4198.                endif
 4201.                i2 = 1 + i2
 4201.             endif
 4202.             $i3_S7 = 1 + $i3_S7
 4204.             if ( $i1_S6 > dimin ) exit
 4204.             if ( i2 > dimout ) exit
 4204.          enddo
 4207.          if ( $i1_S6 > dimin ) then
 4207.             $i1_S6 = 1
 4207.          endif
 4208.          if ( i2 > dimout ) then
 4208.             i2 = 1
 4208.          endif
 4220.          $SC_flgout_I1 = flgout(2)
 4215.          $SC_flgin_I0 = flgin(2)
 4215.          do
 4209.             do
 4210.                if ( i2 /= 1 ) then
 4211.                   $SVU_P2 = dwork(3 + dimout + i2 + 2 * dimin)
 4211.                   dwork($i3_S7) = $SVU_P2
 4212.                   wtlon(-1 + $i3_S7) = $SVU_P2 + -dwork(-1 + $i3_S7)
 4213.                   mplon(-1 + $i3_S7, 1) = 1
 4215.                   if ( $SC_flgin_I0 == .false. ) then
 4216.                      mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 4216.                   endif
 4219.                   mplon(-1 + $i3_S7, 2) = i2
 4220.                   if ( $SC_flgout_I1 == .false. ) then
 4221.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4222.                      if ( i2 > dimout / 2 ) then
 4222.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4222.                      endif
 4222.                   endif
 4224.                   i2 = 1 + i2
 4225.                   if ( i2 > dimout ) then
 4225.                      i2 = 1
 4225.                   endif
 4226.                   $i3_S7 = 1 + $i3_S7
 4226.                endif
 4228.                if ( $i1_S6 /= 1 ) then
 4229.                   dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4230.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4231.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4232.                   if ( $SC_flgin_I0 == .false. ) then
 4233.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4234.                      if ( $i1_S6 > dimin / 2 ) then
 4234.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4234.                      endif
 4234.                   endif
 4236.                   mplon(-1 + $i3_S7, 2) = 1
 4238.                   if ( $SC_flgout_I1 == .false. ) then
 4239.                      mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 4239.                   endif
 4242.                   $i1_S6 = 1 + $i1_S6
 4243.                   if ( $i1_S6 > dimin ) then
 4243.                      $i1_S6 = 1
 4243.                   endif
 4244.                   $i3_S7 = 1 + $i3_S7
 4244.                endif
 4246.                if ( $i1_S6 /= 1 ) then
 4246.                   goto 20
 4246.                endif
 4246.                if ( i2 == 1 ) exit
 4246.             enddo
 4248.             wtlon(-1 + $i3_S7) = 6.2831853071795862 + dwork(1) + -dwork(-1 + $i3_S7)
 4249.             mplon(-1 + $i3_S7, 1) = 1
 4251.             if ( $SC_flgin_I0 == .false. ) then
 4252.                mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 4252.             endif
 4255.             mplon(-1 + $i3_S7, 2) = 1
 4257.             if ( $SC_flgout_I1 == .false. ) then
 4258.                mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 4258.             endif
 4267.             $F_A33 = ( 1 + ilast + -ifirst )
 4267.             if ( ilast + -ifirst >= 0 ) then
 4267.                $I_A1 = 0
 4267. !dir$ ivdep
 4267.                do
 4267.                   fieldout(ifirst + $I_A1) = 0
 4267.                   $I_A1 = 1 + $I_A1
 4267.                   if ( $I_A1 >= $F_A33 ) exit
 4267.                enddo
 4267.             endif
 4268.             $F_A34 = dimout
 4268.             if ( dimout > 0 ) then
 4268.                $I_A1 = 0
 4268. !dir$ ivdep
 4268.                do
 4268.                   wrk2(1 + $I_A1) = 0.0
 4268.                   $I_A1 = 1 + $I_A1
 4268.                   if ( $I_A1 >= $F_A34 ) exit
 4268.                enddo
 4268.             endif
 4269.             $F_A35 = dimout
 4269.             if ( dimout > 0 ) then
 4269.                $I_A2 = 0
 4269.                do
 4269.                   $I_A1 = 0
 4269. !dir$ ivdep
 4269.                   do
 4269.                      work(1 + $I_A1, 1 + $I_A2) = 0.0
 4269.                      $I_A1 = 1 + $I_A1
 4269.                      if ( $I_A1 >= 13 ) exit
 4269.                   enddo
 4269.                   $I_A2 = 1 + $I_A2
 4269.                   if ( $I_A2 >= $F_A35 ) exit
 4269.                enddo
 4269.             endif
 4271.             if ( -1 + $i3_S7 > 0 ) then
 4271.                $I_L4271_38 = 0
 4271.                do
 4273.                   $wln_S11 = wtlon(1 + $I_L4271_38)
 4274.                   lni = mplon(1 + $I_L4271_38, 1)
 4275.                   lno = mplon(1 + $I_L4271_38, 2)
 4277.                   if ( fieldin(lni) /= 0 ) then
 4279.                      nc = fieldin(lni)
 4281.                      if ( nc > 13 .orelse. lno > dimout ) then
 4282.                         $Unit_temp_O1 = nfprt
 4282.                         $_IOitem_P1(0) = nc
 4282.                         $_IOitem_P1(1) = lno
 4282.                         $_IOitem_P1(2) = ( 1 + $I_L4271_38 )
 4282.                         $_IOitem_P1(3) = lni
 4282.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P1(:( 0, 3, 1 )), 0x2000200000000L ) ) )
 4283.                          _substr(t$1838,1,31) = 'ERROR IN nc,lno,i and lni point'
 4283.                         call _stop(  _substr(t$1838,1,31) )
 4283.                      else
 4286.                         if ( nc <= 0 ) then
 4287.                            $Unit_temp_O0 = nfprt
 4287.                            $_IOitem_P0(0) = nc
 4287.                            $_IOitem_P0(1) = lno
 4287.                            $_IOitem_P0(2) = ( 1 + $I_L4271_38 )
 4287.                            $_IOitem_P0(3) = lni
 4287.                            _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P0(:( 0, 3, 1 )), 0x2000200000000L ) ) )
 4288.                             _substr(t$1839,1,31) = 'ERROR IN nc,lno,i and lni point'
 4288.                            call _stop(  _substr(t$1839,1,31) )
 4286.                         else if ( lno > 0 ) then
 4291.                            wrk2(lno) = wrk2(lno) + $wln_S11
 4290.                            work(nc, lno) = work(nc, lno) + $wln_S11
 4292.                            $I_L4271_38 = 1 + $I_L4271_38
 4292.                         else
 4292.                         endif
 4292.                      endif
 4292.                   else
 4292.                   endif
 4292.                   if ( $I_L4271_38 >= -1 + $i3_S7 ) exit
 4292.                enddo
 4292.                goto 10
 4292.             else
 4292.    10          continue
 4298.                if ( ilast + -ifirst >= 0 ) then
 4298.                   $I_L4298_50 = 0
 4298.                   do
 4300.                      fieldout(ifirst + $I_L4298_50) = 0
 4302.                      if ( wrk2(ifirst + $I_L4298_50) /= 0.0 ) then
 4304.                         $fm_S15 = 0.0
 4305.                         $nx_S20 = 0
 4308.                         b(1) = 0.0
 4309.                         b(2) = 0.0
 4310.                         b(3) = 0.0
 4311.                         b(4) = 0.0
 4312.                         b(5) = 0.0
 4314.                         $SCA_wrk2_I2 = wrk2(ifirst + $I_L4298_50)
 4314.                         $I_L4314_48 = 0
 4314. !dir$ ivdep
 4314. !dir$ loop_info (automatic) cache_nt( b )
 4314.                         do
 4315.                            $fr_S14 = ( work(1 + $I_L4314_48, ifirst + $I_L4298_50) * 1.0/$SCA_wrk2_I2 )
 4317.                            if ( $fm_S15 < $fr_S14 ) then
 4318.                               $fm_S15 = $fr_S14
 4319.                               $nx_S20 = ( 1 + $I_L4314_48 )
 4319.                            endif
 4322.                            $kl_S16 = klass(1 + $I_L4314_48)
 4323.                            b($kl_S16) = _vu_plus( b($kl_S16), $fr_S14 )
 4327.                            $I_L4314_48 = 1 + $I_L4314_48
 4320.                            if ( $I_L4314_48 >= 13 ) exit
 4320.                         enddo
 4333.                         $W1 = 5
 4333.                         $W2 = 1
 4333.                         $Maxmin_x_W0 = _idmax( $W1, b(1), $W2 )
 4333.                         $kmx_S19 = cvmg( $Maxmin_x_W0, 0, b($Maxmin_x_W0) > 0.0 )
 4339.                         if ( klass($nx_S20) + -$kmx_S19 == 0 ) then
 4340.                            fieldout(ifirst + $I_L4298_50) = $nx_S20
 4340.                         else
 4350.                            $fmk_S23 = 0.0
 4352.                            $I_L4352_44 = 0
 4352. !dir$ ivdep
 4352.                            do
 4353.                               if ( $kmx_S19 + -klass(1 + $I_L4352_44) == 0 ) then
 4354.                                  $frk_S22 = ( work(1 + $I_L4352_44, ifirst + $I_L4298_50) * 1.0/$SCA_wrk2_I2 )
 4355.                                  if ( $fmk_S23 < $frk_S22 ) then
 4356.                                     $fmk_S23 = $frk_S22
 4357.                                     nxk = ( 1 + $I_L4352_44 )
 4357.                                  endif
 4357.                               endif
 4359.                               $I_L4352_44 = 1 + $I_L4352_44
 4359.                               if ( $I_L4352_44 >= 13 ) exit
 4359.                            enddo
 4361.                            fieldout(ifirst + $I_L4298_50) = nxk
 4361.                         endif
 4361.                      endif
 4374.                      $I_L4298_50 = 1 + $I_L4298_50
 4374.                      if ( $I_L4298_50 >= 1 + ilast + -ifirst ) exit
 4374.                   enddo
 4374.                endif
 3996.                _free( t$608 )
 3996.             endif
 3996.          endif
 3996.    20    continue
 4376.          return
 4376.       end
 4376.       
 4379.       
 4379.       subroutine cyclicfreqbox_r( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 4379.       t$287 = dimin
 4385.       t$626 = _zla( 0, dimin )
 4379.       t$288 = dimout
 4386.       t$627 = _zla( 0, dimout )
 4379.       t$289 = ( 4 + 2 * dimin + 2 * dimout )
 4404.       t$628 = _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4404.       t$631 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4379.       t$290 = ( 2 + dimin + dimout )
 4406.       t$632 = _zla( 0, ( 2 + dimin + dimout ) )
 4379.       t$633 = _zla( 0, ( 2 + dimin + dimout ) )
 4379.       t$634 = 2 * _zla( 0, ( 2 + dimin + dimout ) )
 4406.       t$636 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 4379.       t$637 = 13 * _zla( 0, dimout )
 4407.       t$638 = 8 * ( 7 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ) / 8
 4407.       t$640 = t$638 + 104 * _zla( 0, dimout )
 4408.       t$641 = 8 * ( 7 + t$638 + 104 * _zla( 0, dimout ) ) / 8
 4408.       t$643 = t$641 + 8 * _zla( 0, dimout )
 4405.       t$644 = 8 * ( 7 + t$641 + 8 * _zla( 0, dimout ) ) / 8
 4405.       t$646 = t$644 + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 4379.       t$629 = int( _alloc( t$644 + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ), 8 )
 4404.       t$630 = t$629
 4406.       t$635 = t$629 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4407.       t$639 = t$638 + t$629
 4408.       t$642 = t$641 + t$629
 4405.       t$645 = t$644 + t$629
 4444.       $iratio_S0 = dimin / dimout
 4445.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 4446.          if ( ilast + -ifirst >= 0 ) then
 4446.             $I_L4446_32 = 0
 4446. !dir$ ivdep
 4446.             do
 4448.                fieldout(ifirst + $I_L4446_32) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L4446_32)
 4449.                $I_L4446_32 = 1 + $I_L4446_32
 4446.                if ( $I_L4446_32 >= 1 + ilast + -ifirst ) exit
 4446.             enddo
 4446.          endif
 4379.          _free( t$629 )
 4451.       else if ( dimin <= 0 ) then
 4456.           _substr(t$1851,1,47) = '**(CyclicLinear)** ERROR: Few input data points'
 4456.          call _stop(  _substr(t$1851,1,47) )
 4456.       else if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 4464.           _substr(t$1852,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 4464.          call _stop(  _substr(t$1852,1,64) )
 4464.       else
 4482.          flgin(1) = .true.
 4483.          flgin(2) = .true.
 4484.          flgin(3) = .false.
 4485.          flgin(4) = .true.
 4486.          flgin(5) = .true.
 4487.          flgout(1) = .true.
 4488.          flgout(2) = .true.
 4489.          flgout(3) = .false.
 4490.          flgout(4) = .true.
 4491.          flgout(5) = .true.
 4498.          ioi = 2 + dimin + dimout
 4499.          $hin_S3 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 4507.          $I_L4507_34 = 0
 4507. !dir$ ivdep
 4507.          do
 4508.             dwork(3 + dimin + dimout + $I_L4507_34) = $hin_S3 * ( 5.0e-1 + real( $I_L4507_34, 8 ) )
 4509.             $I_L4507_34 = 1 + $I_L4507_34
 4507.             if ( $I_L4507_34 >= dimin ) exit
 4507.          enddo
 4514.          $hout_S5 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 4523.          if ( dimout > 0 ) then
 4523.             $I_L4523_36 = 0
 4523. !dir$ ivdep
 4523.             do
 4524.                dwork(4 + dimout + $I_L4523_36 + 2 * dimin) = $hout_S5 * ( 5.0e-1 + real( $I_L4523_36, 8 ) )
 4525.                $I_L4523_36 = 1 + $I_L4523_36
 4523.                if ( $I_L4523_36 >= dimout ) exit
 4523.             enddo
 4523.          endif
 4530.          $i1_S6 = 1
 4531.          i2 = 1
 4532.          $i3_S7 = 1
 4544.          $SC_flgout_I1 = flgout(2)
 4539.          $SC_flgin_I0 = flgin(2)
 4539.          do
 4534.             if ( dwork(2 + dimin + dimout + $i1_S6) == dwork(3 + dimout + i2 + 2 * dimin) ) then
 4535.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4536.                if ( $i3_S7 /= 1 ) then
 4537.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4538.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4539.                   if ( $SC_flgin_I0 == .false. ) then
 4540.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4541.                      if ( $i1_S6 > dimin / 2 ) then
 4541.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4541.                      endif
 4541.                   endif
 4543.                   mplon(-1 + $i3_S7, 2) = i2
 4544.                   if ( $SC_flgout_I1 == .false. ) then
 4545.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4546.                      if ( i2 > dimout / 2 ) then
 4546.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4546.                      endif
 4546.                   endif
 4546.                endif
 4549.                $i1_S6 = 1 + $i1_S6
 4550.                i2 = 1 + i2
 4552.             else if ( dwork(ioi + $i1_S6) < dwork(3 + dimout + i2 + 2 * dimin) ) then
 4553.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4554.                if ( $i3_S7 /= 1 ) then
 4555.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4556.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4557.                   if ( $SC_flgin_I0 == .false. ) then
 4558.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4559.                      if ( $i1_S6 > dimin / 2 ) then
 4559.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4559.                      endif
 4559.                   endif
 4561.                   mplon(-1 + $i3_S7, 2) = i2
 4562.                   if ( $SC_flgout_I1 == .false. ) then
 4563.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4564.                      if ( i2 > dimout / 2 ) then
 4564.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4564.                      endif
 4564.                   endif
 4564.                endif
 4567.                $i1_S6 = 1 + $i1_S6
 4567.             else
 4570.                dwork($i3_S7) = dwork(3 + dimout + i2 + 2 * dimin)
 4571.                if ( $i3_S7 /= 1 ) then
 4572.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4573.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4574.                   if ( $SC_flgin_I0 == .false. ) then
 4575.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4576.                      if ( $i1_S6 > dimin / 2 ) then
 4576.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4576.                      endif
 4576.                   endif
 4578.                   mplon(-1 + $i3_S7, 2) = i2
 4579.                   if ( $SC_flgout_I1 == .false. ) then
 4580.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4581.                      if ( i2 > dimout / 2 ) then
 4581.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4581.                      endif
 4581.                   endif
 4581.                endif
 4584.                i2 = 1 + i2
 4584.             endif
 4585.             $i3_S7 = 1 + $i3_S7
 4587.             if ( $i1_S6 > dimin ) exit
 4587.             if ( i2 > dimout ) exit
 4587.          enddo
 4590.          if ( $i1_S6 > dimin ) then
 4590.             $i1_S6 = 1
 4590.          endif
 4591.          if ( i2 > dimout ) then
 4591.             i2 = 1
 4591.          endif
 4603.          $SC_flgout_I1 = flgout(2)
 4598.          $SC_flgin_I0 = flgin(2)
 4598.          do
 4592.             do
 4593.                if ( i2 /= 1 ) then
 4594.                   $SVU_P2 = dwork(3 + dimout + i2 + 2 * dimin)
 4594.                   dwork($i3_S7) = $SVU_P2
 4595.                   wtlon(-1 + $i3_S7) = $SVU_P2 + -dwork(-1 + $i3_S7)
 4596.                   mplon(-1 + $i3_S7, 1) = 1
 4598.                   if ( $SC_flgin_I0 == .false. ) then
 4599.                      mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 4599.                   endif
 4602.                   mplon(-1 + $i3_S7, 2) = i2
 4603.                   if ( $SC_flgout_I1 == .false. ) then
 4604.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4605.                      if ( i2 > dimout / 2 ) then
 4605.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4605.                      endif
 4605.                   endif
 4607.                   i2 = 1 + i2
 4608.                   if ( i2 > dimout ) then
 4608.                      i2 = 1
 4608.                   endif
 4609.                   $i3_S7 = 1 + $i3_S7
 4609.                endif
 4611.                if ( $i1_S6 /= 1 ) then
 4612.                   dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4613.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4614.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4615.                   if ( $SC_flgin_I0 == .false. ) then
 4616.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4617.                      if ( $i1_S6 > dimin / 2 ) then
 4617.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4617.                      endif
 4617.                   endif
 4619.                   mplon(-1 + $i3_S7, 2) = 1
 4621.                   if ( $SC_flgout_I1 == .false. ) then
 4622.                      mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 4622.                   endif
 4625.                   $i1_S6 = 1 + $i1_S6
 4626.                   if ( $i1_S6 > dimin ) then
 4626.                      $i1_S6 = 1
 4626.                   endif
 4627.                   $i3_S7 = 1 + $i3_S7
 4627.                endif
 4629.                if ( $i1_S6 /= 1 ) then
 4629.                   goto 20
 4629.                endif
 4629.                if ( i2 == 1 ) exit
 4629.             enddo
 4631.             wtlon(-1 + $i3_S7) = 6.2831853071795862 + dwork(1) + -dwork(-1 + $i3_S7)
 4632.             mplon(-1 + $i3_S7, 1) = 1
 4634.             if ( $SC_flgin_I0 == .false. ) then
 4635.                mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 4635.             endif
 4638.             mplon(-1 + $i3_S7, 2) = 1
 4640.             if ( $SC_flgout_I1 == .false. ) then
 4641.                mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 4641.             endif
 4650.             $F_A33 = ( 1 + ilast + -ifirst )
 4650.             if ( ilast + -ifirst >= 0 ) then
 4650.                $I_A1 = 0
 4650. !dir$ ivdep
 4650.                do
 4650.                   fieldout(ifirst + $I_A1) = 0.0
 4650.                   $I_A1 = 1 + $I_A1
 4650.                   if ( $I_A1 >= $F_A33 ) exit
 4650.                enddo
 4650.             endif
 4651.             $F_A34 = dimout
 4651.             if ( dimout > 0 ) then
 4651.                $I_A1 = 0
 4651. !dir$ ivdep
 4651.                do
 4651.                   wrk2(1 + $I_A1) = 0.0
 4651.                   $I_A1 = 1 + $I_A1
 4651.                   if ( $I_A1 >= $F_A34 ) exit
 4651.                enddo
 4651.             endif
 4652.             $F_A35 = dimout
 4652.             if ( dimout > 0 ) then
 4652.                $I_A2 = 0
 4652.                do
 4652.                   $I_A1 = 0
 4652. !dir$ ivdep
 4652.                   do
 4652.                      work(1 + $I_A1, 1 + $I_A2) = 0.0
 4652.                      $I_A1 = 1 + $I_A1
 4652.                      if ( $I_A1 >= 13 ) exit
 4652.                   enddo
 4652.                   $I_A2 = 1 + $I_A2
 4652.                   if ( $I_A2 >= $F_A35 ) exit
 4652.                enddo
 4652.             endif
 4654.             if ( -1 + $i3_S7 > 0 ) then
 4654.                $I_L4654_38 = 0
 4654.                do
 4656.                   $wln_S11 = wtlon(1 + $I_L4654_38)
 4657.                   lni = mplon(1 + $I_L4654_38, 1)
 4658.                   lno = mplon(1 + $I_L4654_38, 2)
 4660.                   if ( fieldin(lni) /= 0.0 ) then
 4662.                      nc = int( fieldin(lni) )
 4664.                      if ( nc > 13 .orelse. lno > dimout ) then
 4665.                         $Unit_temp_O1 = nfprt
 4665.                         $_IOitem_P1(0) = nc
 4665.                         $_IOitem_P1(1) = lno
 4665.                         $_IOitem_P1(2) = ( 1 + $I_L4654_38 )
 4665.                         $_IOitem_P1(3) = lni
 4665.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P1(:( 0, 3, 1 )), 0x2000200000000L ) ) )
 4666.                          _substr(t$1862,1,31) = 'ERROR IN nc,lno,i and lni point'
 4666.                         call _stop(  _substr(t$1862,1,31) )
 4666.                      else
 4669.                         if ( nc <= 0 ) then
 4670.                            $Unit_temp_O0 = nfprt
 4670.                            $_IOitem_P0(0) = nc
 4670.                            $_IOitem_P0(1) = lno
 4670.                            $_IOitem_P0(2) = ( 1 + $I_L4654_38 )
 4670.                            $_IOitem_P0(3) = lni
 4670.                            _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P0(:( 0, 3, 1 )), 0x2000200000000L ) ) )
 4671.                             _substr(t$1863,1,31) = 'ERROR IN nc,lno,i and lni point'
 4671.                            call _stop(  _substr(t$1863,1,31) )
 4669.                         else if ( lno > 0 ) then
 4674.                            wrk2(lno) = wrk2(lno) + $wln_S11
 4673.                            work(nc, lno) = work(nc, lno) + $wln_S11
 4675.                            $I_L4654_38 = 1 + $I_L4654_38
 4675.                         else
 4675.                         endif
 4675.                      endif
 4675.                   else
 4675.                   endif
 4675.                   if ( $I_L4654_38 >= -1 + $i3_S7 ) exit
 4675.                enddo
 4675.                goto 10
 4675.             else
 4675.    10          continue
 4681.                if ( ilast + -ifirst >= 0 ) then
 4681.                   $I_L4681_50 = 0
 4681.                   do
 4683.                      fieldout(ifirst + $I_L4681_50) = 0.0
 4685.                      if ( wrk2(ifirst + $I_L4681_50) /= 0.0 ) then
 4687.                         $fm_S15 = 0.0
 4688.                         $nx_S20 = 0
 4691.                         b(1) = 0.0
 4692.                         b(2) = 0.0
 4693.                         b(3) = 0.0
 4694.                         b(4) = 0.0
 4695.                         b(5) = 0.0
 4697.                         $SCA_wrk2_I2 = wrk2(ifirst + $I_L4681_50)
 4697.                         $I_L4697_48 = 0
 4697. !dir$ ivdep
 4697. !dir$ loop_info (automatic) cache_nt( b )
 4697.                         do
 4698.                            $fr_S14 = ( work(1 + $I_L4697_48, ifirst + $I_L4681_50) * 1.0/$SCA_wrk2_I2 )
 4700.                            if ( $fm_S15 < $fr_S14 ) then
 4701.                               $fm_S15 = $fr_S14
 4702.                               $nx_S20 = ( 1 + $I_L4697_48 )
 4702.                            endif
 4705.                            $kl_S16 = klass(1 + $I_L4697_48)
 4706.                            b($kl_S16) = _vu_plus( b($kl_S16), $fr_S14 )
 4710.                            $I_L4697_48 = 1 + $I_L4697_48
 4703.                            if ( $I_L4697_48 >= 13 ) exit
 4703.                         enddo
 4716.                         $W1 = 5
 4716.                         $W2 = 1
 4716.                         $Maxmin_x_W0 = _idmax( $W1, b(1), $W2 )
 4716.                         $kmx_S19 = cvmg( $Maxmin_x_W0, 0, b($Maxmin_x_W0) > 0.0 )
 4722.                         if ( klass($nx_S20) + -$kmx_S19 == 0 ) then
 4723.                            fieldout(ifirst + $I_L4681_50) = real( $nx_S20, 8 )
 4723.                         else
 4733.                            $fmk_S23 = 0.0
 4735.                            $I_L4735_44 = 0
 4735. !dir$ ivdep
 4735.                            do
 4736.                               if ( $kmx_S19 + -klass(1 + $I_L4735_44) == 0 ) then
 4737.                                  $frk_S22 = ( work(1 + $I_L4735_44, ifirst + $I_L4681_50) * 1.0/$SCA_wrk2_I2 )
 4738.                                  if ( $fmk_S23 < $frk_S22 ) then
 4739.                                     $fmk_S23 = $frk_S22
 4740.                                     nxk = ( 1 + $I_L4735_44 )
 4740.                                  endif
 4740.                               endif
 4742.                               $I_L4735_44 = 1 + $I_L4735_44
 4742.                               if ( $I_L4735_44 >= 13 ) exit
 4742.                            enddo
 4744.                            fieldout(ifirst + $I_L4681_50) = real( nxk, 8 )
 4744.                         endif
 4744.                      endif
 4757.                      $I_L4681_50 = 1 + $I_L4681_50
 4757.                      if ( $I_L4681_50 >= 1 + ilast + -ifirst ) exit
 4757.                   enddo
 4757.                endif
 4379.                _free( t$629 )
 4379.             endif
 4379.          endif
 4379.    20    continue
 4759.          return
 4759.       end
 4759.       
 4764.       
 4764.       subroutine seamaskijtoibjb_r2d( fieldin, fieldout )
 4764.       seatp_fieldout = loc( fieldout )
 4764.       seatp_fieldin = loc( fieldin )
 4764.       t$296 = imax
 4764.       t$297 = jmax
 4765.       t$647 = _zla( 0, imax )
 4764.       t$648 = _zla( 0, imax )
 4765.       t$649 = _zla( 0, jmax )
 4764.       t$650 = _zla( 0, imax ) * _zla( 0, jmax )
 4764.       t$298 = ibmax
 4764.       t$299 = jbmax
 4766.       t$651 = _zla( 0, ibmax )
 4764.       t$652 = _zla( 0, ibmax )
 4766.       t$653 = _zla( 0, jbmax )
 4764.       t$654 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 4768.       t$657 = 8 * _zla( 0, imax )
 4764.       t$655 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 4768.       t$656 = t$655
 4778.       if ( reducedgrid /= .false. ) then
 4780.          if ( mylastlat + -myfirstlat >= 0 ) then
 4780.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 4779.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 4779.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 4779.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 4779.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 4780.             $t_S1 = myfirstlat
 4780.             $I_L4780_56 = 0
 4780. !$omp do schedule(static)
 4780.             do
 4781.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L4780_56, 0)
 4782.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L4780_56, 0)
 4783.                call cyclicseamask_r( imax, (imaxperj%base_addr)($t_S1 + $I_L4780_56, 0), seat_fieldin(1, $t_S1 + $I_L4780_56), $$_fout(1), $$_ifirst, $$_ilast )
 4785.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 4787.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 4787.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 4787.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 4787.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 4787.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 4786.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 4786.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 4786.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 4786.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 4786.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 4785.                   $I_L4785_52 = 0
 4785. !dir$ ivdep
 4785.                   do
 4786.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L4785_52, $t_S1 + $I_L4780_56, 0)
 4787.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L4785_52, $t_S1 + $I_L4780_56, 0)
 4788.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L4785_52)
 4789.                      $I_L4785_52 = 1 + $I_L4785_52
 4785.                      if ( $I_L4785_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 4785.                   enddo
 4785.                endif
 4790.                $I_L4780_56 = 1 + $I_L4780_56
 4789.                if ( $I_L4780_56 >= $t_S3 ) exit
 4789.             enddo
 4779.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 4779.             _free( $pvt_Abase_seg15_D0 )
 4791.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 4791.          endif
 4792.       else if ( jbmax > 0 ) then
 4793.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 4797.          $SC_jperijb_I17 = jperijb%dim_1%EX
 4797.          $SC_jperijb_I18 = jperijb%dim_1%LB
 4797.          $SC_jperijb_I20 = jperijb%dim_2%SM
 4797.          $SC_jperijb_I19 = jperijb%dim_2%EX
 4797.          $SC_jperijb_I21 = jperijb%dim_2%LB
 4796.          $SC_iperijb_I12 = iperijb%dim_1%EX
 4796.          $SC_iperijb_I13 = iperijb%dim_1%LB
 4796.          $SC_iperijb_I15 = iperijb%dim_2%SM
 4796.          $SC_iperijb_I14 = iperijb%dim_2%EX
 4796.          $SC_iperijb_I16 = iperijb%dim_2%LB
 4795.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 4795.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 4794.          $I_L4794_58 = 0
 4794. !$omp do schedule(static)
 4794.          do
 4795.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L4794_58, 0)
 4795.             if ( $t_S5 > 0 ) then
 4795.                $I_L4795_54 = 0
 4795. !dir$ ivdep
 4795.                do
 4796.                   $$_i = (iperijb%base_addr)(1 + $I_L4795_54, 1 + $I_L4794_58, 0)
 4797.                   $$_j = (jperijb%base_addr)(1 + $I_L4795_54, 1 + $I_L4794_58, 0)
 4798.                   seat_fieldout(1 + $I_L4795_54, 1 + $I_L4794_58) = seat_fieldin($$_i, $$_j)
 4799.                   $I_L4795_54 = 1 + $I_L4795_54
 4795.                   if ( $I_L4795_54 >= $t_S5 ) exit
 4795.                enddo
 4795.             endif
 4800.             $I_L4794_58 = 1 + $I_L4794_58
 4799.             if ( $I_L4794_58 >= jbmax ) exit
 4799.          enddo
 4801.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 4801.       endif
 4764.       _free( t$655 )
 4803.       return
 4803.       end
 4803.       
 4807.       
 4807.       subroutine seamaskibjbtoij_r2d( fieldin, fieldout )
 4807.       seatp_fieldout = loc( fieldout )
 4807.       seatp_fieldin = loc( fieldin )
 4807.       t$301 = ibmax
 4807.       t$302 = jbmax
 4808.       t$658 = _zla( 0, ibmax )
 4807.       t$659 = _zla( 0, ibmax )
 4808.       t$660 = _zla( 0, jbmax )
 4807.       t$661 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 4807.       t$303 = imax
 4807.       t$304 = jmax
 4809.       t$662 = _zla( 0, imax )
 4807.       t$663 = _zla( 0, imax )
 4809.       t$664 = _zla( 0, jmax )
 4807.       t$665 = _zla( 0, imax ) * _zla( 0, jmax )
 4820.       if ( reducedgrid /= .false. ) then
 4822.          if ( mylastlat + -myfirstlat >= 0 ) then
 4821.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 4822.             $I_L4822_40 = 0
 4822. !$omp do schedule(static)
 4822.             do
 4828.                $I_L4822_40 = 1 + $I_L4822_40
 4822.                if ( $I_L4822_40 >= 1 + mylastlat + -myfirstlat ) exit
 4822.             enddo
 4829.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 4829.          endif
 4830.       else if ( jbmax > 0 ) then
 4831.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 4835.          $SC_jperijb_I7 = jperijb%dim_1%EX
 4835.          $SC_jperijb_I8 = jperijb%dim_1%LB
 4835.          $SC_jperijb_I10 = jperijb%dim_2%SM
 4835.          $SC_jperijb_I9 = jperijb%dim_2%EX
 4835.          $SC_jperijb_I11 = jperijb%dim_2%LB
 4834.          $SC_iperijb_I2 = iperijb%dim_1%EX
 4834.          $SC_iperijb_I3 = iperijb%dim_1%LB
 4834.          $SC_iperijb_I5 = iperijb%dim_2%SM
 4834.          $SC_iperijb_I4 = iperijb%dim_2%EX
 4834.          $SC_iperijb_I6 = iperijb%dim_2%LB
 4833.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 4833.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 4832.          $I_L4832_44 = 0
 4832. !$omp do schedule(static)
 4832.          do
 4833.             $t_S2 = (ibmaxperjb%base_addr)(1 + $I_L4832_44, 0)
 4833.             if ( $t_S2 > 0 ) then
 4833.                $I_L4833_42 = 0
 4833. !dir$ ivdep
 4833.                do
 4834.                   $$_i = (iperijb%base_addr)(1 + $I_L4833_42, 1 + $I_L4832_44, 0)
 4835.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L4833_42, 1 + $I_L4832_44, 0) + -myfirstlat
 4836.                   seat_fieldout($$_i, $$_j) = seat_fieldin(1 + $I_L4833_42, 1 + $I_L4832_44)
 4837.                   $I_L4833_42 = 1 + $I_L4833_42
 4833.                   if ( $I_L4833_42 >= $t_S2 ) exit
 4833.                enddo
 4833.             endif
 4838.             $I_L4832_44 = 1 + $I_L4832_44
 4837.             if ( $I_L4832_44 >= jbmax ) exit
 4837.          enddo
 4839.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 4839.       endif
 4841.       return
 4841.       end
 4841.       
 4844.       
 4844.       subroutine cyclicseamask_r( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 4844.       t$305 = dimin
 4850.       t$666 = _zla( 0, dimin )
 4844.       t$306 = dimout
 4851.       t$667 = _zla( 0, dimout )
 4844.       t$307 = ( 4 + 2 * dimin + 2 * dimout )
 4867.       t$668 = _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4867.       t$671 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4844.       t$308 = ( 2 + dimin + dimout )
 4869.       t$672 = _zla( 0, ( 2 + dimin + dimout ) )
 4844.       t$673 = _zla( 0, ( 2 + dimin + dimout ) )
 4844.       t$674 = 2 * _zla( 0, ( 2 + dimin + dimout ) )
 4869.       t$676 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 4870.       t$677 = 8 * ( 7 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ) / 8
 4870.       t$679 = t$677 + 8 * _zla( 0, dimout )
 4868.       t$680 = 8 * ( 7 + t$677 + 8 * _zla( 0, dimout ) ) / 8
 4868.       t$682 = t$680 + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 4844.       t$669 = int( _alloc( t$680 + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ), 8 )
 4867.       t$670 = t$669
 4869.       t$675 = t$669 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 4870.       t$678 = t$677 + t$669
 4868.       t$681 = t$680 + t$669
 4883.       $iratio_S0 = dimin / dimout
 4884.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 4885.          if ( ilast + -ifirst >= 0 ) then
 4885.             $I_L4885_20 = 0
 4885. !dir$ ivdep
 4885.             do
 4887.                fieldout(ifirst + $I_L4885_20) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L4885_20)
 4888.                $I_L4885_20 = 1 + $I_L4885_20
 4885.                if ( $I_L4885_20 >= 1 + ilast + -ifirst ) exit
 4885.             enddo
 4885.          endif
 4844.          _free( t$669 )
 4890.       else if ( dimin <= 0 ) then
 4895.           _substr(t$1899,1,47) = '**(CyclicLinear)** ERROR: Few input data points'
 4895.          call _stop(  _substr(t$1899,1,47) )
 4895.       else if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 4903.           _substr(t$1900,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 4903.          call _stop(  _substr(t$1900,1,64) )
 4903.       else
 4921.          flgin(1) = .true.
 4922.          flgin(2) = .true.
 4923.          flgin(3) = .false.
 4924.          flgin(4) = .true.
 4925.          flgin(5) = .true.
 4926.          flgout(1) = .true.
 4927.          flgout(2) = .true.
 4928.          flgout(3) = .false.
 4929.          flgout(4) = .true.
 4930.          flgout(5) = .true.
 4937.          ioi = 2 + dimin + dimout
 4938.          $hin_S3 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 4946.          $I_L4946_22 = 0
 4946. !dir$ ivdep
 4946.          do
 4947.             dwork(3 + dimin + dimout + $I_L4946_22) = $hin_S3 * ( 5.0e-1 + real( $I_L4946_22, 8 ) )
 4948.             $I_L4946_22 = 1 + $I_L4946_22
 4946.             if ( $I_L4946_22 >= dimin ) exit
 4946.          enddo
 4953.          $hout_S5 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 4962.          if ( dimout > 0 ) then
 4962.             $I_L4962_24 = 0
 4962. !dir$ ivdep
 4962.             do
 4963.                dwork(4 + dimout + $I_L4962_24 + 2 * dimin) = $hout_S5 * ( 5.0e-1 + $I_L4962_24 )
 4964.                $I_L4962_24 = 1 + $I_L4962_24
 4962.                if ( $I_L4962_24 >= dimout ) exit
 4962.             enddo
 4962.          endif
 4969.          $i1_S6 = 1
 4970.          i2 = 1
 4971.          $i3_S7 = 1
 4983.          $SC_flgout_I1 = flgout(2)
 4978.          $SC_flgin_I0 = flgin(2)
 4978.          do
 4973.             if ( dwork(2 + dimin + dimout + $i1_S6) == dwork(3 + dimout + i2 + 2 * dimin) ) then
 4974.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4975.                if ( $i3_S7 /= 1 ) then
 4976.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4977.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4978.                   if ( $SC_flgin_I0 == .false. ) then
 4979.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4980.                      if ( $i1_S6 > dimin / 2 ) then
 4980.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4980.                      endif
 4980.                   endif
 4982.                   mplon(-1 + $i3_S7, 2) = i2
 4983.                   if ( $SC_flgout_I1 == .false. ) then
 4984.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 4985.                      if ( i2 > dimout / 2 ) then
 4985.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 4985.                      endif
 4985.                   endif
 4985.                endif
 4988.                $i1_S6 = 1 + $i1_S6
 4989.                i2 = 1 + i2
 4991.             else if ( dwork(ioi + $i1_S6) < dwork(3 + dimout + i2 + 2 * dimin) ) then
 4992.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 4993.                if ( $i3_S7 /= 1 ) then
 4994.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 4995.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 4996.                   if ( $SC_flgin_I0 == .false. ) then
 4997.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 4998.                      if ( $i1_S6 > dimin / 2 ) then
 4998.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 4998.                      endif
 4998.                   endif
 5000.                   mplon(-1 + $i3_S7, 2) = i2
 5001.                   if ( $SC_flgout_I1 == .false. ) then
 5002.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5003.                      if ( i2 > dimout / 2 ) then
 5003.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5003.                      endif
 5003.                   endif
 5003.                endif
 5006.                $i1_S6 = 1 + $i1_S6
 5006.             else
 5009.                dwork($i3_S7) = dwork(3 + dimout + i2 + 2 * dimin)
 5010.                if ( $i3_S7 /= 1 ) then
 5011.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 5012.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 5013.                   if ( $SC_flgin_I0 == .false. ) then
 5014.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 5015.                      if ( $i1_S6 > dimin / 2 ) then
 5015.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 5015.                      endif
 5015.                   endif
 5017.                   mplon(-1 + $i3_S7, 2) = i2
 5018.                   if ( $SC_flgout_I1 == .false. ) then
 5019.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5020.                      if ( i2 > dimout / 2 ) then
 5020.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5020.                      endif
 5020.                   endif
 5020.                endif
 5023.                i2 = 1 + i2
 5023.             endif
 5024.             $i3_S7 = 1 + $i3_S7
 5026.             if ( $i1_S6 > dimin ) exit
 5026.             if ( i2 > dimout ) exit
 5026.          enddo
 5029.          if ( $i1_S6 > dimin ) then
 5029.             $i1_S6 = 1
 5029.          endif
 5030.          if ( i2 > dimout ) then
 5030.             i2 = 1
 5030.          endif
 5042.          $SC_flgout_I1 = flgout(2)
 5037.          $SC_flgin_I0 = flgin(2)
 5037.          do
 5031.             do
 5032.                if ( i2 /= 1 ) then
 5033.                   $SVU_P0 = dwork(3 + dimout + i2 + 2 * dimin)
 5033.                   dwork($i3_S7) = $SVU_P0
 5034.                   wtlon(-1 + $i3_S7) = $SVU_P0 + -dwork(-1 + $i3_S7)
 5035.                   mplon(-1 + $i3_S7, 1) = 1
 5037.                   if ( $SC_flgin_I0 == .false. ) then
 5038.                      mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 5038.                   endif
 5041.                   mplon(-1 + $i3_S7, 2) = i2
 5042.                   if ( $SC_flgout_I1 == .false. ) then
 5043.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5044.                      if ( i2 > dimout / 2 ) then
 5044.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5044.                      endif
 5044.                   endif
 5046.                   i2 = 1 + i2
 5047.                   if ( i2 > dimout ) then
 5047.                      i2 = 1
 5047.                   endif
 5048.                   $i3_S7 = 1 + $i3_S7
 5048.                endif
 5050.                if ( $i1_S6 /= 1 ) then
 5051.                   dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 5052.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 5053.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 5054.                   if ( $SC_flgin_I0 == .false. ) then
 5055.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 5056.                      if ( $i1_S6 > dimin / 2 ) then
 5056.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 5056.                      endif
 5056.                   endif
 5058.                   mplon(-1 + $i3_S7, 2) = 1
 5060.                   if ( $SC_flgout_I1 == .false. ) then
 5061.                      mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 5061.                   endif
 5064.                   $i1_S6 = 1 + $i1_S6
 5065.                   if ( $i1_S6 > dimin ) then
 5065.                      $i1_S6 = 1
 5065.                   endif
 5066.                   $i3_S7 = 1 + $i3_S7
 5066.                endif
 5068.                if ( $i1_S6 /= 1 ) then
 5068.                   goto 10
 5068.                endif
 5068.                if ( i2 == 1 ) exit
 5068.             enddo
 5070.             wtlon(-1 + $i3_S7) = 6.2831853071795862 + dwork(1) + -dwork(-1 + $i3_S7)
 5071.             mplon(-1 + $i3_S7, 1) = 1
 5073.             if ( $SC_flgin_I0 == .false. ) then
 5074.                mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 5074.             endif
 5077.             mplon(-1 + $i3_S7, 2) = 1
 5079.             if ( $SC_flgout_I1 == .false. ) then
 5080.                mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 5080.             endif
 5087.             $F_A33 = dimout
 5087.             if ( dimout > 0 ) then
 5087.                $I_A1 = 0
 5087. !dir$ ivdep
 5087.                do
 5087.                   fieldout(1 + $I_A1) = 0.0
 5087.                   $I_A1 = 1 + $I_A1
 5087.                   if ( $I_A1 >= $F_A33 ) exit
 5087.                enddo
 5087.             endif
 5088.             $F_A34 = dimout
 5088.             if ( dimout > 0 ) then
 5088.                $I_A1 = 0
 5088. !dir$ ivdep
 5088.                do
 5088.                   work(1 + $I_A1) = 0.0
 5088.                   $I_A1 = 1 + $I_A1
 5088.                   if ( $I_A1 >= $F_A34 ) exit
 5088.                enddo
 5088.             endif
 5090.             if ( -1 + $i3_S7 > 0 ) then
 5090.                $I_L5090_26 = 0
 5090. !dir$ ivdep
 5090.                do
 5091.                   $lni_S11 = mplon(1 + $I_L5090_26, 1)
 5092.                   if ( fieldin($lni_S11) < 0.0 ) then
 5094.                      $wln_S12 = wtlon(1 + $I_L5090_26)
 5095.                      $lno_S13 = mplon(1 + $I_L5090_26, 2)
 5097.                      work($lno_S13) = _vu_plus( work($lno_S13), $wln_S12 )
 5096.                      fieldout($lno_S13) = _vu_plus( fieldout($lno_S13), $wln_S12 * fieldin($lni_S11) )
 5096.                   endif
 5099.                   $I_L5090_26 = 1 + $I_L5090_26
 5098.                   if ( $I_L5090_26 >= -1 + $i3_S7 ) exit
 5098.                enddo
 5098.             endif
 5098.    10       continue
 5101.             if ( ilast + -ifirst >= 0 ) then
 5101.                $I_L5101_28 = 0
 5101. !dir$ ivdep
 5101.                do
 5102.                   if ( work(ifirst + $I_L5101_28) == 0.0 ) then
 5103.                      fieldout(ifirst + $I_L5101_28) = 290.0
 5103.                   else
 5105.                      fieldout(ifirst + $I_L5101_28) = ( fieldout(ifirst + $I_L5101_28) * 1.0/work(ifirst + $I_L5101_28) )
 5105.                   endif
 5107.                   $I_L5101_28 = 1 + $I_L5101_28
 5106.                   if ( $I_L5101_28 >= 1 + ilast + -ifirst ) exit
 5106.                enddo
 5106.             endif
 4844.             _free( t$669 )
 4844.          endif
 5109.          return
 5109.       end
 5109.       
 5113.       
 5113.       subroutine aveboxijtoibjb_r2d( fieldin, fieldout )
 5113.       seatp_fieldout = loc( fieldout )
 5113.       seatp_fieldin = loc( fieldin )
 5113.       t$311 = imax
 5113.       t$312 = jmax
 5114.       t$683 = _zla( 0, imax )
 5113.       t$684 = _zla( 0, imax )
 5114.       t$685 = _zla( 0, jmax )
 5113.       t$686 = _zla( 0, imax ) * _zla( 0, jmax )
 5113.       t$313 = ibmax
 5113.       t$314 = jbmax
 5115.       t$687 = _zla( 0, ibmax )
 5113.       t$688 = _zla( 0, ibmax )
 5115.       t$689 = _zla( 0, jbmax )
 5113.       t$690 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 5117.       t$693 = 8 * _zla( 0, imax )
 5113.       t$691 = int( _alloc( 8 * _zla( 0, imax ) ), 8 )
 5117.       t$692 = t$691
 5127.       if ( reducedgrid /= .false. ) then
 5129.          if ( mylastlat + -myfirstlat >= 0 ) then
 5129.             $t_S3 = ( 1 + mylastlat + -myfirstlat )
 5128.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 5128.             $$_fout_BASE = _alloc( 8 * _zla( 0, imax ) )
 5128.             $pvt_Abase_seg15_D0 = $$_fout_BASE
 5128.             $snt_T4 = _mt_start_code( 5, _mt_rw_list(...) )
 5129.             $t_S1 = myfirstlat
 5129.             $I_L5129_56 = 0
 5129. !$omp do schedule(static)
 5129.             do
 5130.                $$_ifirst = (myfirstlon%base_addr)($t_S1 + $I_L5129_56, 0)
 5131.                $$_ilast = (mylastlon%base_addr)($t_S1 + $I_L5129_56, 0)
 5132.                call cyclicavebox_r( imax, (imaxperj%base_addr)($t_S1 + $I_L5129_56, 0), seat_fieldin(1, $t_S1 + $I_L5129_56), $$_fout(1), $$_ifirst, $$_ilast )
 5134.                if ( $$_ilast + -$$_ifirst >= 0 ) then
 5136.                   $SC_jbperij_I5 = jbperij%dim_1%EX
 5136.                   $SC_jbperij_I6 = jbperij%dim_1%LB
 5136.                   $SC_jbperij_I8 = jbperij%dim_2%SM
 5136.                   $SC_jbperij_I7 = jbperij%dim_2%EX
 5136.                   $SC_jbperij_I9 = jbperij%dim_2%LB
 5135.                   $SC_ibperij_I0 = ibperij%dim_1%EX
 5135.                   $SC_ibperij_I1 = ibperij%dim_1%LB
 5135.                   $SC_ibperij_I3 = ibperij%dim_2%SM
 5135.                   $SC_ibperij_I2 = ibperij%dim_2%EX
 5135.                   $SC_ibperij_I4 = ibperij%dim_2%LB
 5134.                   $I_L5134_52 = 0
 5134. !dir$ ivdep
 5134.                   do
 5135.                      $$_ib = (ibperij%base_addr)($$_ifirst + $I_L5134_52, $t_S1 + $I_L5129_56, 0)
 5136.                      $$_jb = (jbperij%base_addr)($$_ifirst + $I_L5134_52, $t_S1 + $I_L5129_56, 0)
 5137.                      seat_fieldout($$_ib, $$_jb) = $$_fout($$_ifirst + $I_L5134_52)
 5138.                      $I_L5134_52 = 1 + $I_L5134_52
 5134.                      if ( $I_L5134_52 >= 1 + $$_ilast + -$$_ifirst ) exit
 5134.                   enddo
 5134.                endif
 5139.                $I_L5129_56 = 1 + $I_L5129_56
 5138.                if ( $I_L5129_56 >= $t_S3 ) exit
 5138.             enddo
 5128.             $snt_T4 = _mt_end_code( 5, _mt_rw_list(...), $snt_T4 )
 5128.             _free( $pvt_Abase_seg15_D0 )
 5140.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 5140.          endif
 5141.       else if ( jbmax > 0 ) then
 5142.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 5146.          $SC_jperijb_I17 = jperijb%dim_1%EX
 5146.          $SC_jperijb_I18 = jperijb%dim_1%LB
 5146.          $SC_jperijb_I20 = jperijb%dim_2%SM
 5146.          $SC_jperijb_I19 = jperijb%dim_2%EX
 5146.          $SC_jperijb_I21 = jperijb%dim_2%LB
 5145.          $SC_iperijb_I12 = iperijb%dim_1%EX
 5145.          $SC_iperijb_I13 = iperijb%dim_1%LB
 5145.          $SC_iperijb_I15 = iperijb%dim_2%SM
 5145.          $SC_iperijb_I14 = iperijb%dim_2%EX
 5145.          $SC_iperijb_I16 = iperijb%dim_2%LB
 5144.          $SC_ibmaxperjb_I10 = ibmaxperjb%dim_1%EX
 5144.          $SC_ibmaxperjb_I11 = ibmaxperjb%dim_1%LB
 5143.          $I_L5143_58 = 0
 5143. !$omp do schedule(static)
 5143.          do
 5144.             $t_S5 = (ibmaxperjb%base_addr)(1 + $I_L5143_58, 0)
 5144.             if ( $t_S5 > 0 ) then
 5144.                $I_L5144_54 = 0
 5144. !dir$ ivdep
 5144.                do
 5145.                   $$_i = (iperijb%base_addr)(1 + $I_L5144_54, 1 + $I_L5143_58, 0)
 5146.                   $$_j = (jperijb%base_addr)(1 + $I_L5144_54, 1 + $I_L5143_58, 0)
 5147.                   seat_fieldout(1 + $I_L5144_54, 1 + $I_L5143_58) = seat_fieldin($$_i, $$_j)
 5148.                   $I_L5144_54 = 1 + $I_L5144_54
 5144.                   if ( $I_L5144_54 >= $t_S5 ) exit
 5144.                enddo
 5144.             endif
 5149.             $I_L5143_58 = 1 + $I_L5143_58
 5148.             if ( $I_L5143_58 >= jbmax ) exit
 5148.          enddo
 5150.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 5150.       endif
 5113.       _free( t$691 )
 5152.       return
 5152.       end
 5152.       
 5156.       
 5156.       subroutine aveboxibjbtoij_r2d( fieldin, fieldout )
 5156.       seatp_fieldout = loc( fieldout )
 5156.       seatp_fieldin = loc( fieldin )
 5156.       t$316 = ibmax
 5156.       t$317 = jbmax
 5157.       t$694 = _zla( 0, ibmax )
 5156.       t$695 = _zla( 0, ibmax )
 5157.       t$696 = _zla( 0, jbmax )
 5156.       t$697 = _zla( 0, ibmax ) * _zla( 0, jbmax )
 5156.       t$318 = imax
 5156.       t$319 = jmax
 5158.       t$698 = _zla( 0, imax )
 5156.       t$699 = _zla( 0, imax )
 5158.       t$700 = _zla( 0, jmax )
 5156.       t$701 = _zla( 0, imax ) * _zla( 0, jmax )
 5169.       if ( reducedgrid /= .false. ) then
 5171.          if ( mylastlat + -myfirstlat >= 0 ) then
 5170.             $snt_T0 = _parallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 5171.             $I_L5171_40 = 0
 5171. !$omp do schedule(static)
 5171.             do
 5177.                $I_L5171_40 = 1 + $I_L5171_40
 5171.                if ( $I_L5171_40 >= 1 + mylastlat + -myfirstlat ) exit
 5171.             enddo
 5178.             $snt_T0 = _endparallel( 1, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T0 )
 5178.          endif
 5179.       else if ( jbmax > 0 ) then
 5180.          $snt_T2 = _parallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), Null_Arg )
 5184.          $SC_jperijb_I7 = jperijb%dim_1%EX
 5184.          $SC_jperijb_I8 = jperijb%dim_1%LB
 5184.          $SC_jperijb_I10 = jperijb%dim_2%SM
 5184.          $SC_jperijb_I9 = jperijb%dim_2%EX
 5184.          $SC_jperijb_I11 = jperijb%dim_2%LB
 5183.          $SC_iperijb_I2 = iperijb%dim_1%EX
 5183.          $SC_iperijb_I3 = iperijb%dim_1%LB
 5183.          $SC_iperijb_I5 = iperijb%dim_2%SM
 5183.          $SC_iperijb_I4 = iperijb%dim_2%EX
 5183.          $SC_iperijb_I6 = iperijb%dim_2%LB
 5182.          $SC_ibmaxperjb_I0 = ibmaxperjb%dim_1%EX
 5182.          $SC_ibmaxperjb_I1 = ibmaxperjb%dim_1%LB
 5181.          $I_L5181_44 = 0
 5181. !$omp do schedule(static)
 5181.          do
 5182.             $t_S2 = (ibmaxperjb%base_addr)(1 + $I_L5181_44, 0)
 5182.             if ( $t_S2 > 0 ) then
 5182.                $I_L5182_42 = 0
 5182. !dir$ ivdep
 5182.                do
 5183.                   $$_i = (iperijb%base_addr)(1 + $I_L5182_42, 1 + $I_L5181_44, 0)
 5184.                   $$_j = 1 + (jperijb%base_addr)(1 + $I_L5182_42, 1 + $I_L5181_44, 0) + -myfirstlat
 5185.                   seat_fieldout($$_i, $$_j) = seat_fieldin(1 + $I_L5182_42, 1 + $I_L5181_44)
 5186.                   $I_L5182_42 = 1 + $I_L5182_42
 5182.                   if ( $I_L5182_42 >= $t_S2 ) exit
 5182.                enddo
 5182.             endif
 5187.             $I_L5181_44 = 1 + $I_L5181_44
 5186.             if ( $I_L5181_44 >= jbmax ) exit
 5186.          enddo
 5188.          $snt_T2 = _endparallel( 3, _mt_pinfo( _mt_rw_list(...), .true., 0 ), $snt_T2 )
 5188.       endif
 5190.       return
 5190.       end
 5190.       
 5193.       
 5193.       subroutine cyclicavebox_r( dimin, dimout, fieldin, fieldout, ifirst, ilast )
 5193.       t$320 = dimin
 5199.       t$702 = _zla( 0, dimin )
 5193.       t$321 = dimout
 5200.       t$703 = _zla( 0, dimout )
 5193.       t$322 = ( 4 + 2 * dimin + 2 * dimout )
 5216.       t$704 = _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 5216.       t$707 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 5193.       t$323 = ( 2 + dimin + dimout )
 5218.       t$708 = _zla( 0, ( 2 + dimin + dimout ) )
 5193.       t$709 = _zla( 0, ( 2 + dimin + dimout ) )
 5193.       t$710 = 2 * _zla( 0, ( 2 + dimin + dimout ) )
 5218.       t$712 = 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 5219.       t$713 = 8 * ( 7 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) ) + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ) / 8
 5219.       t$715 = t$713 + 8 * _zla( 0, dimout )
 5217.       t$716 = 8 * ( 7 + t$713 + 8 * _zla( 0, dimout ) ) / 8
 5217.       t$718 = t$716 + 8 * _zla( 0, ( 2 + dimin + dimout ) )
 5193.       t$705 = int( _alloc( t$716 + 8 * _zla( 0, ( 2 + dimin + dimout ) ) ), 8 )
 5216.       t$706 = t$705
 5218.       t$711 = t$705 + 8 * _zla( 0, ( 4 + 2 * dimin + 2 * dimout ) )
 5219.       t$714 = t$713 + t$705
 5217.       t$717 = t$716 + t$705
 5232.       $iratio_S0 = dimin / dimout
 5233.       if ( -dimin + dimout * $iratio_S0 == 0 ) then
 5234.          if ( ilast + -ifirst >= 0 ) then
 5234.             $I_L5234_20 = 0
 5234. !dir$ ivdep
 5234.             do
 5236.                fieldout(ifirst + $I_L5234_20) = fieldin(1 + -$iratio_S0 + ifirst * $iratio_S0 + $iratio_S0 * $I_L5234_20)
 5237.                $I_L5234_20 = 1 + $I_L5234_20
 5234.                if ( $I_L5234_20 >= 1 + ilast + -ifirst ) exit
 5234.             enddo
 5234.          endif
 5193.          _free( t$705 )
 5239.       else if ( dimin <= 0 ) then
 5244.           _substr(t$1942,1,47) = '**(CyclicLinear)** ERROR: Few input data points'
 5244.          call _stop(  _substr(t$1942,1,47) )
 5244.       else if ( ( 2 + int( ( real( dimin, 8 ) * 1.0/( real( dimout, 8 ) ) ) * real( -1 + dimout, 8 ) ) ) > 1 + dimin ) then
 5252.           _substr(t$1943,1,64) = '**(CyclicCubicSpline)** ERROR: Output data out of input interval'
 5252.          call _stop(  _substr(t$1943,1,64) )
 5252.       else
 5270.          flgin(1) = .true.
 5271.          flgin(2) = .true.
 5272.          flgin(3) = .false.
 5273.          flgin(4) = .true.
 5274.          flgin(5) = .true.
 5275.          flgout(1) = .true.
 5276.          flgout(2) = .true.
 5277.          flgout(3) = .false.
 5278.          flgout(4) = .true.
 5279.          flgout(5) = .true.
 5286.          ioi = 2 + dimin + dimout
 5287.          $hin_S3 = ( 6.2831853071795862 * 1.0/( real( dimin, 8 ) ) )
 5295.          $I_L5295_22 = 0
 5295. !dir$ ivdep
 5295.          do
 5296.             dwork(3 + dimin + dimout + $I_L5295_22) = $hin_S3 * ( 5.0e-1 + real( $I_L5295_22, 8 ) )
 5297.             $I_L5295_22 = 1 + $I_L5295_22
 5295.             if ( $I_L5295_22 >= dimin ) exit
 5295.          enddo
 5302.          $hout_S5 = ( 6.2831853071795862 * 1.0/( real( dimout, 8 ) ) )
 5311.          if ( dimout > 0 ) then
 5311.             $I_L5311_24 = 0
 5311. !dir$ ivdep
 5311.             do
 5312.                dwork(4 + dimout + $I_L5311_24 + 2 * dimin) = $hout_S5 * ( 5.0e-1 + $I_L5311_24 )
 5313.                $I_L5311_24 = 1 + $I_L5311_24
 5311.                if ( $I_L5311_24 >= dimout ) exit
 5311.             enddo
 5311.          endif
 5318.          $i1_S6 = 1
 5319.          i2 = 1
 5320.          $i3_S7 = 1
 5332.          $SC_flgout_I1 = flgout(2)
 5327.          $SC_flgin_I0 = flgin(2)
 5327.          do
 5322.             if ( dwork(2 + dimin + dimout + $i1_S6) == dwork(3 + dimout + i2 + 2 * dimin) ) then
 5323.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 5324.                if ( $i3_S7 /= 1 ) then
 5325.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 5326.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 5327.                   if ( $SC_flgin_I0 == .false. ) then
 5328.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 5329.                      if ( $i1_S6 > dimin / 2 ) then
 5329.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 5329.                      endif
 5329.                   endif
 5331.                   mplon(-1 + $i3_S7, 2) = i2
 5332.                   if ( $SC_flgout_I1 == .false. ) then
 5333.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5334.                      if ( i2 > dimout / 2 ) then
 5334.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5334.                      endif
 5334.                   endif
 5334.                endif
 5337.                $i1_S6 = 1 + $i1_S6
 5338.                i2 = 1 + i2
 5340.             else if ( dwork(ioi + $i1_S6) < dwork(3 + dimout + i2 + 2 * dimin) ) then
 5341.                dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 5342.                if ( $i3_S7 /= 1 ) then
 5343.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 5344.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 5345.                   if ( $SC_flgin_I0 == .false. ) then
 5346.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 5347.                      if ( $i1_S6 > dimin / 2 ) then
 5347.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 5347.                      endif
 5347.                   endif
 5349.                   mplon(-1 + $i3_S7, 2) = i2
 5350.                   if ( $SC_flgout_I1 == .false. ) then
 5351.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5352.                      if ( i2 > dimout / 2 ) then
 5352.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5352.                      endif
 5352.                   endif
 5352.                endif
 5355.                $i1_S6 = 1 + $i1_S6
 5355.             else
 5358.                dwork($i3_S7) = dwork(3 + dimout + i2 + 2 * dimin)
 5359.                if ( $i3_S7 /= 1 ) then
 5360.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 5361.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 5362.                   if ( $SC_flgin_I0 == .false. ) then
 5363.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 5364.                      if ( $i1_S6 > dimin / 2 ) then
 5364.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 5364.                      endif
 5364.                   endif
 5366.                   mplon(-1 + $i3_S7, 2) = i2
 5367.                   if ( $SC_flgout_I1 == .false. ) then
 5368.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5369.                      if ( i2 > dimout / 2 ) then
 5369.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5369.                      endif
 5369.                   endif
 5369.                endif
 5372.                i2 = 1 + i2
 5372.             endif
 5373.             $i3_S7 = 1 + $i3_S7
 5375.             if ( $i1_S6 > dimin ) exit
 5375.             if ( i2 > dimout ) exit
 5375.          enddo
 5378.          if ( $i1_S6 > dimin ) then
 5378.             $i1_S6 = 1
 5378.          endif
 5379.          if ( i2 > dimout ) then
 5379.             i2 = 1
 5379.          endif
 5391.          $SC_flgout_I1 = flgout(2)
 5386.          $SC_flgin_I0 = flgin(2)
 5386.          do
 5380.             do
 5381.                if ( i2 /= 1 ) then
 5382.                   $SVU_P0 = dwork(3 + dimout + i2 + 2 * dimin)
 5382.                   dwork($i3_S7) = $SVU_P0
 5383.                   wtlon(-1 + $i3_S7) = $SVU_P0 + -dwork(-1 + $i3_S7)
 5384.                   mplon(-1 + $i3_S7, 1) = 1
 5386.                   if ( $SC_flgin_I0 == .false. ) then
 5387.                      mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 5387.                   endif
 5390.                   mplon(-1 + $i3_S7, 2) = i2
 5391.                   if ( $SC_flgout_I1 == .false. ) then
 5392.                      mplon(-1 + $i3_S7, 2) = i2 + dimout / 2
 5393.                      if ( i2 > dimout / 2 ) then
 5393.                         mplon(-1 + $i3_S7, 2) = i2 + dimout / -2
 5393.                      endif
 5393.                   endif
 5395.                   i2 = 1 + i2
 5396.                   if ( i2 > dimout ) then
 5396.                      i2 = 1
 5396.                   endif
 5397.                   $i3_S7 = 1 + $i3_S7
 5397.                endif
 5399.                if ( $i1_S6 /= 1 ) then
 5400.                   dwork($i3_S7) = dwork(2 + dimin + dimout + $i1_S6)
 5401.                   wtlon(-1 + $i3_S7) = dwork($i3_S7) + -dwork(-1 + $i3_S7)
 5402.                   mplon(-1 + $i3_S7, 1) = $i1_S6
 5403.                   if ( $SC_flgin_I0 == .false. ) then
 5404.                      mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / 2
 5405.                      if ( $i1_S6 > dimin / 2 ) then
 5405.                         mplon(-1 + $i3_S7, 1) = $i1_S6 + dimin / -2
 5405.                      endif
 5405.                   endif
 5407.                   mplon(-1 + $i3_S7, 2) = 1
 5409.                   if ( $SC_flgout_I1 == .false. ) then
 5410.                      mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 5410.                   endif
 5413.                   $i1_S6 = 1 + $i1_S6
 5414.                   if ( $i1_S6 > dimin ) then
 5414.                      $i1_S6 = 1
 5414.                   endif
 5415.                   $i3_S7 = 1 + $i3_S7
 5415.                endif
 5417.                if ( $i1_S6 /= 1 ) then
 5417.                   goto 10
 5417.                endif
 5417.                if ( i2 == 1 ) exit
 5417.             enddo
 5419.             wtlon(-1 + $i3_S7) = 6.2831853071795862 + dwork(1) + -dwork(-1 + $i3_S7)
 5420.             mplon(-1 + $i3_S7, 1) = 1
 5422.             if ( $SC_flgin_I0 == .false. ) then
 5423.                mplon(-1 + $i3_S7, 1) = 1 + dimin / 2
 5423.             endif
 5426.             mplon(-1 + $i3_S7, 2) = 1
 5428.             if ( $SC_flgout_I1 == .false. ) then
 5429.                mplon(-1 + $i3_S7, 2) = 1 + dimout / 2
 5429.             endif
 5436.             $F_A33 = dimout
 5436.             if ( dimout > 0 ) then
 5436.                $I_A1 = 0
 5436. !dir$ ivdep
 5436.                do
 5436.                   fieldout(1 + $I_A1) = 0.0
 5436.                   $I_A1 = 1 + $I_A1
 5436.                   if ( $I_A1 >= $F_A33 ) exit
 5436.                enddo
 5436.             endif
 5437.             $F_A34 = dimout
 5437.             if ( dimout > 0 ) then
 5437.                $I_A1 = 0
 5437. !dir$ ivdep
 5437.                do
 5437.                   work(1 + $I_A1) = 0.0
 5437.                   $I_A1 = 1 + $I_A1
 5437.                   if ( $I_A1 >= $F_A34 ) exit
 5437.                enddo
 5437.             endif
 5439.             if ( -1 + $i3_S7 > 0 ) then
 5439.                $I_L5439_26 = 0
 5439. !dir$ ivdep
 5439.                do
 5440.                   $lni_S11 = mplon(1 + $I_L5439_26, 1)
 5441.                   if ( fieldin($lni_S11) /= -999.0 ) then
 5442.                      $wln_S12 = wtlon(1 + $I_L5439_26)
 5443.                      $lno_S13 = mplon(1 + $I_L5439_26, 2)
 5445.                      work($lno_S13) = _vu_plus( work($lno_S13), $wln_S12 )
 5444.                      fieldout($lno_S13) = _vu_plus( fieldout($lno_S13), $wln_S12 * fieldin($lni_S11) )
 5444.                   endif
 5447.                   $I_L5439_26 = 1 + $I_L5439_26
 5446.                   if ( $I_L5439_26 >= -1 + $i3_S7 ) exit
 5446.                enddo
 5446.             endif
 5446.    10       continue
 5449.             if ( ilast + -ifirst >= 0 ) then
 5449.                $I_L5449_28 = 0
 5449. !dir$ ivdep
 5449.                do
 5450.                   if ( work(ifirst + $I_L5449_28) == 0.0 ) then
 5451.                      fieldout(ifirst + $I_L5449_28) = -999.0
 5451.                   else
 5453.                      fieldout(ifirst + $I_L5449_28) = ( fieldout(ifirst + $I_L5449_28) * 1.0/work(ifirst + $I_L5449_28) )
 5453.                   endif
 5455.                   $I_L5449_28 = 1 + $I_L5449_28
 5454.                   if ( $I_L5449_28 >= 1 + ilast + -ifirst ) exit
 5454.                enddo
 5454.             endif
 5193.             _free( t$705 )
 5193.          endif
 5457.          return
 5457.       end
 5457.       
 5461.       
 5461.       subroutine vfirec( iunit, a, n, type )
 5461.       t$326 = n
 5465.       t$719 = _zla( 0, n )
 5461.       t$720 = _len( type )
 5504.       $Unit_temp_O0 = iunit
 5504.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$328,  _substr(t$327,1,13), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (&)$_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ), _iotype( (&)$_IOitem_P1(:( 0, 1, 1 )), 0x804060300000000L ) ) )
 5504.       nn = $_IOitem_P0(0)
 5504.       nbits = $_IOitem_P0(1)
 5504.       bias = $_IOitem_P1(0)
 5504.       fact = $_IOitem_P1(1)
 5506.       if ( nn + -n /= 0 ) then
 5507.          _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' Word count mismatch on vfirec record ', 0x800600000000L ) ) )
 5508.          _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' Words on record - ', 0x800600000000L ), _iotype( nn, 0x2000200000000L ) ) )
 5509.          _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' Words expected  - ', 0x800600000000L ), _iotype( n, 0x2000200000000L ) ) )
 5510.           _substr(t$1957,1,6) = 'vfirec'
 5510.          call _stop(  _substr(t$1957,1,6) )
 5510.       else
 5513.          $nvalline_S1 = 468 / nbits
 5514.          $nchs_S4 = nbits / 6
 5516.          if ( ( n /= 1 .and. xor( $nvalline_S1, -1 + n ) < 0 ) == .false. ) then
 5516.             $t_S9 = ( -1 + n + $nvalline_S1 ) / $nvalline_S1
 5519.             if ( $nvalline_S1 <= 0 ) then
 5516.                $I_L5516_35 = 0
 5516.                do
 5517.                   $Unit_temp_O1 = iunit
 5517.                   _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$330,  _substr(t$329,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(line,1,80), 0x800600000000L ) ) )
 5538.                   $I_L5516_35 = 1 + $I_L5516_35
 5536.                   if ( $I_L5516_35 >= $t_S9 ) exit
 5536.                enddo
 5536.             else if ( $nchs_S4 > 0 ) then
 5516.                $I_L5516_43 = 0
 5516.                do
 5517.                   $Unit_temp_O1 = iunit
 5517.                   _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$330,  _substr(t$329,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(line,1,80), 0x800600000000L ) ) )
 5519.                   $I_L5519_39 = 0
 5519.                   do
 5520.                      $isval_S8 = 0
 5521.                      if ( ( 1 + $I_L5519_39 + $nvalline_S1 * $I_L5516_43 ) > n ) exit
 5522.                      $I_L5522_29 = 0
 5522. !dir$ unroll 2
 5522.                      do
 5524.                          _substr(cs,1,1) =  _substr(line,( 1 + $I_L5522_29 + $nchs_S4 * $I_L5519_39 ),1)
 5525.                         $ics_S7 = int(  _substr(cs,1,1) )
 5533.                         $isval_S8 = or( $isval_S8, cvmg( lshift( cvmg( cvmg( -61 + $ics_S7, -55 + $ics_S7, $ics_S7 > 90 ), -48 + $ics_S7, $ics_S7 > 57 ), abs( ( -6 + 6 * $nchs_S4 + -6 * $I_L5522_29 ) ) ), rshift( cvmg( cvmg( -61 + $ics_S7, -55 + $ics_S7, $ics_S7 > 90 ), -48 + $ics_S7, $ics_S7 > 57 ), abs( ( -6 + 6 * $nchs_S4 + -6 * $I_L5522_29 ) ) ), ( -6 + 6 * $nchs_S4 + -6 * $I_L5522_29 ) > 0 ) )
 5534.                         $I_L5522_29 = 1 + $I_L5522_29
 5522.                         if ( $I_L5522_29 >= $nchs_S4 ) exit
 5522.                      enddo
 5535.                      a(1 + $I_L5519_39 + $nvalline_S1 * $I_L5516_43) = real( $isval_S8, 8 )
 5536.                      $I_L5519_39 = 1 + $I_L5519_39
 5534.                      if ( $I_L5519_39 >= $nvalline_S1 ) exit
 5534.                   enddo
 5538.                   $I_L5516_43 = 1 + $I_L5516_43
 5536.                   if ( $I_L5516_43 >= $t_S9 ) exit
 5536.                enddo
 5536.             else
 5516.                $I_L5516_41 = 0
 5516.                do
 5517.                   $Unit_temp_O1 = iunit
 5517.                   _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$330,  _substr(t$329,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(line,1,80), 0x800600000000L ) ) )
 5519.                   $I_L5519_37 = 0
 5519. !dir$ ivdep
 5519.                   do
 5521.                      if ( ( 1 + $I_L5519_37 + $nvalline_S1 * $I_L5516_41 ) > n ) exit
 5535.                      a(1 + $I_L5519_37 + $nvalline_S1 * $I_L5516_41) = 0.0
 5536.                      $I_L5519_37 = 1 + $I_L5519_37
 5534.                      if ( $I_L5519_37 >= $nvalline_S1 ) exit
 5534.                   enddo
 5538.                   $I_L5516_41 = 1 + $I_L5516_41
 5536.                   if ( $I_L5516_41 >= $t_S9 ) exit
 5536.                enddo
 5536.             endif
 5536.          endif
 5540.          $facti_S11 = 1.0/fact
 5542.          if (  _substr(type,1,_len( type )) == 'LIN' ) then
 5543.             if ( n > 0 ) then
 5543.                $I_L5543_31 = 0
 5543. !dir$ ivdep
 5543.                do
 5545.                   a(1 + $I_L5543_31) = -bias + $facti_S11 * a(1 + $I_L5543_31)
 5548.                   $I_L5543_31 = 1 + $I_L5543_31
 5543.                   if ( $I_L5543_31 >= n ) exit
 5543.                enddo
 5543.             endif
 5549.          else if (  _substr(type,1,_len( type )) == 'LOG' ) then
 5550.             $scfct_S12 = 2.0 ** ( -1 + nbits )
 5551.             if ( n > 0 ) then
 5551.                $I_L5551_33 = 0
 5551. !dir$ ivdep
 5551.                do
 5552.                   a(1 + $I_L5551_33) = 10.0 ** ( -10.0 + abs( 20.0 * ( -1.0 + ( a(1 + $I_L5551_33) * 1.0/$scfct_S12 ) ) ) ) * sign( 1.0, a(1 + $I_L5551_33) + -$scfct_S12 )
 5554.                   $I_L5551_33 = 1 + $I_L5551_33
 5551.                   if ( $I_L5551_33 >= n ) exit
 5551.                enddo
 5551.             endif
 5551.          endif
 5551.       endif
 5556.       return
 5556.       end
 5556.       
 5558.       
 5558.       subroutine vfinit( vc )
 5571.       $I_L5571_4 = 0
 5571.       do
 5572.           _substr(vc($I_L5571_4),1,1) =  _substr(vcscr($I_L5571_4),1,1)
 5573.          $I_L5571_4 = 1 + $I_L5571_4
 5571.          if ( $I_L5571_4 >= 64 ) exit
 5571.       enddo
 5574.       return
 5574.       end
 5574.       
  178.       
  178.       module utils
  178.       end
  178.       
