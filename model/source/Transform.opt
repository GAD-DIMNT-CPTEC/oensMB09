       !        
       !        Cray Inc. Decompilation
       !        WARNING - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Transform.f90
       !        File                  :  Transform.opt
       !        Format                :  Fortran
       !        Target                :  X86, 64-bit
       !        
  733.       
  733.       subroutine inittransform
  438.       if ( t$191 == 0 ) then
  438.          t$202(1) = 3
  438.          t$203(1) = 0
  438.          t$204(1) = 0
  438.          t$199(1) = int( loc( t$190 ), 8 )
  438.          t$200(1) = 0
  438.          t$201(1) = int( loc( t$198 ), 8 )
  438.          t$191 = __get_dynamic_type( 2, t$199(1), t$202(1), 1, t$200(1), t$201(1), t$203(1), t$204(1) )
  438.       endif
  438.       p = $_StaticDV_P6
  438.       p%base_addr = pointer to type multifft( 0 )
  522.       neven%header%a_contig = 1
  522.       neven%dim_1%LB = 1
  522.       neven%dim_1%EX = ( max( 0, mymmax ) )
  522.       neven%dim_1%SM = 1
  522.       $_allo_P7(0) = 0x1000000000001L
  522.       $_allo_P7(1) = loc( neven )
  522.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  523.       nodd%header%a_contig = 1
  523.       nodd%dim_1%LB = 1
  523.       nodd%dim_1%EX = ( max( 0, mymmax ) )
  523.       nodd%dim_1%SM = 1
  523.       $_allo_P8(0) = 0x1000000000001L
  523.       $_allo_P8(1) = loc( nodd )
  523.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  524.       if ( mymmax > 0 ) then
  525.          $SC_lm2m_I0 = lm2m%dim_1%EX
  525.          $SC_lm2m_I1 = lm2m%dim_1%LB
  524.          $I_L524_172 = 0
  524. !dir$ ivdep
  524.          do
  525.             $m_S1 = (lm2m%base_addr)(1 + $I_L524_172, 0)
  526.             (neven%base_addr)(1 + $I_L524_172, 0) = ( 3 + mmax + -$m_S1 ) / 2
  527.             (nodd%base_addr)(1 + $I_L524_172, 0) = ( 2 + mmax + -$m_S1 ) / 2
  528.             $I_L524_172 = 1 + $I_L524_172
  524.             if ( $I_L524_172 >= mymmax ) exit
  524.          enddo
  524.       endif
  534.       dneven%header%a_contig = 1
  534.       dneven%dim_1%LB = 1
  534.       dneven%dim_1%EX = ( max( 0, mymmax ) )
  534.       dneven%dim_1%SM = 1
  534.       $_allo_P9(0) = 0x1000000000001L
  534.       $_allo_P9(1) = loc( dneven )
  534.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  535.       dnodd%header%a_contig = 1
  535.       dnodd%dim_1%LB = 1
  535.       dnodd%dim_1%EX = ( max( 0, mymmax ) )
  535.       dnodd%dim_1%SM = 1
  535.       $_allo_P10(0) = 0x1000000000001L
  535.       $_allo_P10(1) = loc( dnodd )
  535.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
  536.       t$372 = neven
  536.       $t_S2 = max( 0, ( max( 0, mymmax ) ) )
  536.       t$375 = max( 0, ( max( 0, mymmax ) ) )
  536.       t$377 = int( _alloc( 4 * max( 0, ( max( 0, mymmax ) ) ) ), 8 )
  536.       call nobankconflictv( t$373(1), t$372 )
  536.       $F_A35 = $t_S2
  536.       if ( $t_S2 > 0 ) then
  536.          $SC_dneven_I52 = dneven%dim_1%EX
  536.          $SC_dneven_I53 = dneven%dim_1%LB
  536.          $I_L536_199 = 0
  536. !dir$ ivdep
  536.          do
  536.             (dneven%base_addr)($SC_dneven_I53 + $I_L536_199, 0) = t$373(1 + $I_L536_199)
  536.             $I_L536_199 = 1 + $I_L536_199
  536.             if ( $I_L536_199 >= $F_A35 ) exit
  536.          enddo
  536.       endif
  536.       _free( t$377 )
  537.       t$378 = nodd
  537.       $t_S3 = max( 0, nodd%dim_1%EX )
  537.       t$381 = max( 0, nodd%dim_1%EX )
  537.       t$383 = int( _alloc( 4 * max( 0, nodd%dim_1%EX ) ), 8 )
  537.       call nobankconflictv( t$379(1), t$378 )
  537.       $F_A36 = $t_S3
  537.       if ( $t_S3 > 0 ) then
  537.          $SC_dnodd_I54 = dnodd%dim_1%EX
  537.          $SC_dnodd_I55 = dnodd%dim_1%LB
  537.          $I_L537_201 = 0
  537. !dir$ ivdep
  537.          do
  537.             (dnodd%base_addr)($SC_dnodd_I55 + $I_L537_201, 0) = t$379(1 + $I_L537_201)
  537.             $I_L537_201 = 1 + $I_L537_201
  537.             if ( $I_L537_201 >= $F_A36 ) exit
  537.          enddo
  537.       endif
  537.       _free( t$383 )
  546.       firstneven%header%a_contig = 1
  546.       firstneven%dim_1%LB = 1
  546.       firstneven%dim_1%EX = ( max( 0, mymmax ) )
  546.       firstneven%dim_1%SM = 1
  546.       $_allo_P11(0) = 0x1000000000001L
  546.       $_allo_P11(1) = loc( firstneven )
  546.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
  547.       firstnodd%header%a_contig = 1
  547.       firstnodd%dim_1%LB = 1
  547.       firstnodd%dim_1%EX = ( max( 0, mymmax ) )
  547.       firstnodd%dim_1%SM = 1
  547.       $_allo_P12(0) = 0x1000000000001L
  547.       $_allo_P12(1) = loc( firstnodd )
  547.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
  548.       (firstneven%base_addr)(1, 0) = 1
  549.       (firstnodd%base_addr)(1, 0) = 1 + (neven%base_addr)(1, 0)
  550.       if ( -2 + mymmax >= 0 ) then
  551.          $SC_nodd_I2 = nodd%dim_1%EX
  551.          $SC_nodd_I3 = nodd%dim_1%LB
  552.          $SC_neven_I4 = neven%dim_1%EX
  552.          $SC_neven_I5 = neven%dim_1%LB
  550.          $firstnodd_WR0_R0 = (firstnodd%base_addr)(1, 0)
  550.          $I_L550_174 = 0
  550. !dir$ unroll 4
  550.          do
  551.             $firstneven_WR0_R1 = $firstnodd_WR0_R0 + (nodd%base_addr)(1 + $I_L550_174, 0)
  551.             (firstneven%base_addr)(2 + $I_L550_174, 0) = $firstneven_WR0_R1
  552.             $firstnodd_WR0_R0 = $firstneven_WR0_R1 + (neven%base_addr)(2 + $I_L550_174, 0)
  552.             (firstnodd%base_addr)(2 + $I_L550_174, 0) = $firstnodd_WR0_R0
  553.             $I_L550_174 = 1 + $I_L550_174
  550.             if ( $I_L550_174 >= -1 + mymmax ) exit
  550.          enddo
  550.       endif
  559.       $Reduc_A37 = 0
  559.       $F_A39 = ( -1 + mymmax )
  559.       if ( -1 + mymmax > 0 ) then
  559.          $SC_nodd_I56 = nodd%dim_1%EX
  559.          $SC_nodd_I57 = nodd%dim_1%LB
  559.          $I_L559_203 = 0
  559. !dir$ ivdep
  559.          do
  559.             $Reduc_A37 = $Reduc_A37 + (nodd%base_addr)(1 + $I_L559_203, 0)
  559.             $I_L559_203 = 1 + $I_L559_203
  559.             if ( $I_L559_203 >= $F_A39 ) exit
  559.          enddo
  559.       endif
  559.       $Reduc_A40 = 0
  559.       $F_A42 = mymmax
  559.       if ( mymmax > 0 ) then
  559.          $SC_neven_I58 = neven%dim_1%EX
  559.          $SC_neven_I59 = neven%dim_1%LB
  559.          $I_L559_205 = 0
  559. !dir$ ivdep
  559.          do
  559.             $Reduc_A40 = $Reduc_A40 + (neven%base_addr)(1 + $I_L559_205, 0)
  559.             $I_L559_205 = 1 + $I_L559_205
  559.             if ( $I_L559_205 >= $F_A42 ) exit
  559.          enddo
  559.       endif
  559.       dlmn = (dnodd%base_addr)(mymmax, 0) + $Reduc_A37 + $Reduc_A40
  560.       dlmn = nobankconflicts( dlmn )
  565.       lmnextmap%header%a_contig = 1
  565.       lmnextmap%dim_1%LB = 1
  565.       lmnextmap%dim_1%EX = ( max( 0, mymnextmax ) )
  565.       lmnextmap%dim_1%SM = 1
  565.       $_allo_P13(0) = 0x1000000000001L
  565.       $_allo_P13(1) = loc( lmnextmap )
  565.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
  566.       if ( mymnextmax > 0 ) then
  568.          $SC_mynextmap_I8 = mynextmap%dim_1%EX
  568.          $SC_mynextmap_I9 = mynextmap%dim_1%LB
  567.          $SC_mymextmap_I6 = mymextmap%dim_1%EX
  567.          $SC_mymextmap_I7 = mymextmap%dim_1%LB
  573.          $SC_firstnodd_I12 = firstnodd%dim_1%EX
  573.          $SC_firstnodd_I13 = firstnodd%dim_1%LB
  571.          $SC_firstneven_I10 = firstneven%dim_1%EX
  571.          $SC_firstneven_I11 = firstneven%dim_1%LB
  569.          $SC_lm2m_I0 = lm2m%dim_1%EX
  569.          $SC_lm2m_I1 = lm2m%dim_1%LB
  566.          $I_L566_176 = 0
  566. !dir$ ivdep
  566.          do
  567.             $lm_S6 = (mymextmap%base_addr)(1 + $I_L566_176, 0)
  568.             $n_S7 = (mynextmap%base_addr)(1 + $I_L566_176, 0)
  569.             $m_S8 = (lm2m%base_addr)($lm_S6, 0)
  570.             if ( mod( $n_S7 + $m_S8, 2 ) == 0 ) then
  571.                (lmnextmap%base_addr)(1 + $I_L566_176, 0) = (firstneven%base_addr)($lm_S6, 0) + ( $n_S7 + -$m_S8 ) / 2
  571.             else
  573.                (lmnextmap%base_addr)(1 + $I_L566_176, 0) = (firstnodd%base_addr)($lm_S6, 0) + ( -1 + $n_S7 + -$m_S8 ) / 2
  573.             endif
  575.             $I_L566_176 = 1 + $I_L566_176
  574.             if ( $I_L566_176 >= mymnextmax ) exit
  574.          enddo
  574.       endif
  580.       lmnmap%header%a_contig = 1
  580.       lmnmap%dim_1%LB = 1
  580.       lmnmap%dim_1%EX = ( max( 0, mymnmax ) )
  580.       lmnmap%dim_1%SM = 1
  580.       $_allo_P14(0) = 0x1000000000001L
  580.       $_allo_P14(1) = loc( lmnmap )
  580.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
  581.       if ( mymnmax > 0 ) then
  583.          $SC_mynmap_I16 = mynmap%dim_1%EX
  583.          $SC_mynmap_I17 = mynmap%dim_1%LB
  582.          $SC_mymmap_I14 = mymmap%dim_1%EX
  582.          $SC_mymmap_I15 = mymmap%dim_1%LB
  588.          $SC_firstnodd_I12 = firstnodd%dim_1%EX
  588.          $SC_firstnodd_I13 = firstnodd%dim_1%LB
  586.          $SC_firstneven_I10 = firstneven%dim_1%EX
  586.          $SC_firstneven_I11 = firstneven%dim_1%LB
  584.          $SC_lm2m_I0 = lm2m%dim_1%EX
  584.          $SC_lm2m_I1 = lm2m%dim_1%LB
  581.          $I_L581_178 = 0
  581. !dir$ ivdep
  581.          do
  582.             $lm_S10 = (mymmap%base_addr)(1 + $I_L581_178, 0)
  583.             $n_S11 = (mynmap%base_addr)(1 + $I_L581_178, 0)
  584.             $m_S12 = (lm2m%base_addr)($lm_S10, 0)
  585.             if ( mod( $n_S11 + $m_S12, 2 ) == 0 ) then
  586.                (lmnmap%base_addr)(1 + $I_L581_178, 0) = (firstneven%base_addr)($lm_S10, 0) + ( $n_S11 + -$m_S12 ) / 2
  586.             else
  588.                (lmnmap%base_addr)(1 + $I_L581_178, 0) = (firstnodd%base_addr)($lm_S10, 0) + ( -1 + $n_S11 + -$m_S12 ) / 2
  588.             endif
  590.             $I_L581_178 = 1 + $I_L581_178
  589.             if ( $I_L581_178 >= mymnmax ) exit
  589.          enddo
  589.       endif
  595.       lmnzero%header%a_contig = 1
  595.       lmnzero%dim_1%LB = 1
  595.       lmnzero%dim_1%EX = ( max( 0, mymmax ) )
  595.       lmnzero%dim_1%SM = 1
  595.       $_allo_P15(0) = 0x1000000000001L
  595.       $_allo_P15(1) = loc( lmnzero )
  595.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
  596.       if ( mymmax > 0 ) then
  597.          $SC_mymnextmap_I18 = mymnextmap%dim_1%EX
  597.          $SC_mymnextmap_I19 = mymnextmap%dim_1%LB
  597.          $SC_mymnextmap_I21 = mymnextmap%dim_2%SM
  597.          $SC_mymnextmap_I20 = mymnextmap%dim_2%EX
  597.          $SC_mymnextmap_I22 = mymnextmap%dim_2%LB
  596.          $I_L596_180 = 0
  596. !dir$ ivdep
  596.          do
  597.             (lmnzero%base_addr)(1 + $I_L596_180, 0) = (lmnextmap%base_addr)((mymnextmap%base_addr)(1 + $I_L596_180, 1 + mmax, 0), 0)
  598.             $I_L596_180 = 1 + $I_L596_180
  596.             if ( $I_L596_180 >= mymmax ) exit
  596.          enddo
  596.       endif
  602.       di = nobankconflicts( imax )
  603.       t$387 = 1 + imax
  603.       dip1 = nobankconflicts( t$387 )
  604.       djh = nobankconflicts( jmaxhalf )
  610.       previousj%header%a_contig = 1
  610.       previousj%dim_1%LB = 1
  610.       previousj%dim_1%EX = ( max( 0, jmax ) )
  610.       previousj%dim_1%SM = 1
  610.       $_allo_P16(0) = 0x1000000000001L
  610.       $_allo_P16(1) = loc( previousj )
  610.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
  611.       if ( mylastlat_f + -myfirstlat_f >= 0 ) then
  611.          $I_L611_182 = 0
  611. !dir$ ivdep
  611.          do
  612.             (previousj%base_addr)(myfirstlat_f + $I_L611_182, 0) = $I_L611_182
  613.             $I_L611_182 = 1 + $I_L611_182
  611.             if ( $I_L611_182 >= 1 + mylastlat_f + -myfirstlat_f ) exit
  611.          enddo
  611.       endif
  618.       ls2f%header%a_contig = 1
  618.       ls2f%dim_1%LB = 1
  618.       ls2f%dim_1%EX = ( max( 0, djh ) )
  618.       ls2f%dim_1%SM = 1
  618.       ls2f%dim_2%LB = 1
  618.       ls2f%dim_2%EX = ( max( 0, dlmn ) )
  618.       ls2f%dim_2%SM = ( max( 0, djh ) )
  618.       $_allo_P17(0) = 0x1000000000001L
  618.       $_allo_P17(1) = loc( ls2f )
  618.       call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
  619.       if ( allpolynomials /= .false. ) then
  620.          if ( mymnextmax > 0 ) then
  625.             $SC_legfuncs2f_I23 = legfuncs2f%dim_1%EX
  625.             $SC_legfuncs2f_I24 = legfuncs2f%dim_1%LB
  625.             $SC_legfuncs2f_I26 = legfuncs2f%dim_2%SM
  625.             $SC_legfuncs2f_I25 = legfuncs2f%dim_2%EX
  625.             $SC_legfuncs2f_I27 = legfuncs2f%dim_2%LB
  625.             $SC_mnextmap_I28 = mnextmap%dim_1%EX
  625.             $SC_mnextmap_I29 = mnextmap%dim_1%LB
  625.             $SC_mnextmap_I31 = mnextmap%dim_2%SM
  625.             $SC_mnextmap_I30 = mnextmap%dim_2%EX
  625.             $SC_mnextmap_I32 = mnextmap%dim_2%LB
  622.             $SC_mynextmap_I8 = mynextmap%dim_1%EX
  622.             $SC_mynextmap_I9 = mynextmap%dim_1%LB
  621.             $SC_mymextmap_I6 = mymextmap%dim_1%EX
  621.             $SC_mymextmap_I7 = mymextmap%dim_1%LB
  625.             $SC_lmnextmap_I33 = lmnextmap%dim_1%EX
  625.             $SC_lmnextmap_I34 = lmnextmap%dim_1%LB
  623.             $SC_lm2m_I0 = lm2m%dim_1%EX
  623.             $SC_lm2m_I1 = lm2m%dim_1%LB
  624.             if ( jmaxhalf > 0 ) then
  620.                $I_L620_217 = 0
  620.                do
  621.                   $lm_S16 = (mymextmap%base_addr)(1 + $I_L620_217, 0)
  622.                   $n_S19 = (mynextmap%base_addr)(1 + $I_L620_217, 0)
  623.                   $m_S18 = (lm2m%base_addr)($lm_S16, 0)
  624.                   $SCA_mnextmap_I47 = (mnextmap%base_addr)($m_S18, $n_S19, 0)
  624.                   $SCA_lmnextmap_I48 = (lmnextmap%base_addr)(1 + $I_L620_217, 0)
  624.                   $I_L624_186 = 0
  624. !dir$ ivdep
  624.                   do
  625.                      (ls2f%base_addr)(1 + $I_L624_186, $SCA_lmnextmap_I48, 0) = (legfuncs2f%base_addr)(1 + $I_L624_186, $SCA_mnextmap_I47, 0)
  626.                      $I_L624_186 = 1 + $I_L624_186
  624.                      if ( $I_L624_186 >= jmaxhalf ) exit
  624.                   enddo
  627.                   $I_L620_217 = 1 + $I_L620_217
  626.                   if ( $I_L620_217 >= mymnextmax ) exit
  626.                enddo
  626.             endif
  626.          endif
  628.       else if ( mymnextmax > 0 ) then
  633.          $SC_legfuncs2f_I23 = legfuncs2f%dim_1%EX
  633.          $SC_legfuncs2f_I24 = legfuncs2f%dim_1%LB
  633.          $SC_legfuncs2f_I26 = legfuncs2f%dim_2%SM
  633.          $SC_legfuncs2f_I25 = legfuncs2f%dim_2%EX
  633.          $SC_legfuncs2f_I27 = legfuncs2f%dim_2%LB
  633.          $SC_mymnextmap_I18 = mymnextmap%dim_1%EX
  633.          $SC_mymnextmap_I19 = mymnextmap%dim_1%LB
  633.          $SC_mymnextmap_I21 = mymnextmap%dim_2%SM
  633.          $SC_mymnextmap_I20 = mymnextmap%dim_2%EX
  633.          $SC_mymnextmap_I22 = mymnextmap%dim_2%LB
  631.          $SC_mynextmap_I8 = mynextmap%dim_1%EX
  631.          $SC_mynextmap_I9 = mynextmap%dim_1%LB
  630.          $SC_mymextmap_I6 = mymextmap%dim_1%EX
  630.          $SC_mymextmap_I7 = mymextmap%dim_1%LB
  633.          $SC_lmnextmap_I33 = lmnextmap%dim_1%EX
  633.          $SC_lmnextmap_I34 = lmnextmap%dim_1%LB
  632.          if ( jmaxhalf > 0 ) then
  629.             $I_L629_215 = 0
  629.             do
  630.                $m_S22 = (mymextmap%base_addr)(1 + $I_L629_215, 0)
  631.                $n_S23 = (mynextmap%base_addr)(1 + $I_L629_215, 0)
  632.                $SCA_mymnextmap_I49 = (mymnextmap%base_addr)($m_S22, $n_S23, 0)
  632.                $SCA_lmnextmap_I50 = (lmnextmap%base_addr)(1 + $I_L629_215, 0)
  632.                $I_L632_184 = 0
  632. !dir$ ivdep
  632.                do
  633.                   (ls2f%base_addr)(1 + $I_L632_184, $SCA_lmnextmap_I50, 0) = (legfuncs2f%base_addr)(1 + $I_L632_184, $SCA_mymnextmap_I49, 0)
  634.                   $I_L632_184 = 1 + $I_L632_184
  632.                   if ( $I_L632_184 >= jmaxhalf ) exit
  632.                enddo
  635.                $I_L629_215 = 1 + $I_L629_215
  634.                if ( $I_L629_215 >= mymnextmax ) exit
  634.             enddo
  634.          endif
  634.       endif
  637.       $F_A43 = ( max( 0, dlmn ) )
  637.       $F_A44 = ( djh + -jmaxhalf )
  637.       if ( and( -$F_A44, -$F_A43 ) < 0 ) then
  637.          $I_L637_219 = 0
  637.          do
  637.             $I_L637_207 = 0
  637. !dir$ ivdep
  637.             do
  637.                (ls2f%base_addr)(1 + jmaxhalf + $I_L637_207, 1 + $I_L637_219, 0) = 0.0
  637.                $I_L637_207 = 1 + $I_L637_207
  637.                if ( $I_L637_207 >= $F_A44 ) exit
  637.             enddo
  637.             $I_L637_219 = 1 + $I_L637_219
  637.             if ( $I_L637_219 >= $F_A43 ) exit
  637.          enddo
  637.       endif
  638.       $F_A45 = ( dlmn + -mymnextmax )
  638.       $F_A46 = ( max( 0, djh ) )
  638.       if ( and( -$F_A46, -$F_A45 ) < 0 ) then
  638.          $I_L638_221 = 0
  638.          do
  638.             $I_L638_209 = 0
  638. !dir$ ivdep
  638.             do
  638.                (ls2f%base_addr)(1 + $I_L638_209, 1 + mymnextmax + $I_L638_221, 0) = 0.0
  638.                $I_L638_209 = 1 + $I_L638_209
  638.                if ( $I_L638_209 >= $F_A46 ) exit
  638.             enddo
  638.             $I_L638_221 = 1 + $I_L638_221
  638.             if ( $I_L638_221 >= $F_A45 ) exit
  638.          enddo
  638.       endif
  643.       lf2s%header%a_contig = 1
  643.       lf2s%dim_1%LB = 1
  643.       lf2s%dim_1%EX = ( max( 0, dlmn ) )
  643.       lf2s%dim_1%SM = 1
  643.       lf2s%dim_2%LB = 1
  643.       lf2s%dim_2%EX = ( max( 0, djh ) )
  643.       lf2s%dim_2%SM = ( max( 0, dlmn ) )
  643.       $_allo_P18(0) = 0x1000000000001L
  643.       $_allo_P18(1) = loc( lf2s )
  643.       call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
  644.       if ( jmaxhalf > 0 ) then
  646.          $SC_gaussweights_I35 = gaussweights%dim_1%EX
  646.          $SC_gaussweights_I36 = gaussweights%dim_1%LB
  646.          $SC_lmnextmap_I33 = lmnextmap%dim_1%EX
  646.          $SC_lmnextmap_I34 = lmnextmap%dim_1%LB
  645.          if ( mymnextmax > 0 ) then
  645.             $I_L645_232 = 0
  645.             do
  644.                $I_L644_230 = 0
  644.                do
  645.                   $I_L645_227 = 0
  645.                   if ( min( mymnextmax, 4 + 4 * $I_L645_232 ) + -4 * $I_L645_232 >= 4 ) then
  645.                      $I_L645_237 = 0
  645. !dir$ shortloop16
  645. !dir$ blocking_size( 4, 4 )
  645.                      do
  644.                         $SCA_lmnextmap#1_U0 = (lmnextmap%base_addr)(1 + 4 * $I_L645_232 + 4 * $I_L645_237, 0)
  644.                         $SCA_lmnextmap#2_U1 = (lmnextmap%base_addr)(2 + 4 * $I_L645_232 + 4 * $I_L645_237, 0)
  644.                         $SCA_lmnextmap#3_U2 = (lmnextmap%base_addr)(3 + 4 * $I_L645_232 + 4 * $I_L645_237, 0)
  644.                         $SCA_lmnextmap#4_U3 = (lmnextmap%base_addr)(4 + 4 * $I_L645_232 + 4 * $I_L645_237, 0)
  644.                         $I_L644_188 = 0
  644. !dir$ ivdep
  644. !dir$ blocking_size( 256, 256 )
  644.                         do
  646.                            (lf2s%base_addr)($SCA_lmnextmap#1_U0, 1 + $I_L644_188 + 256 * $I_L644_230, 0) = (gaussweights%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, 0) * (ls2f%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, $SCA_lmnextmap#1_U0, 0)
  646.                            (lf2s%base_addr)($SCA_lmnextmap#2_U1, 1 + $I_L644_188 + 256 * $I_L644_230, 0) = (gaussweights%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, 0) * (ls2f%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, $SCA_lmnextmap#2_U1, 0)
  646.                            (lf2s%base_addr)($SCA_lmnextmap#3_U2, 1 + $I_L644_188 + 256 * $I_L644_230, 0) = (gaussweights%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, 0) * (ls2f%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, $SCA_lmnextmap#3_U2, 0)
  646.                            (lf2s%base_addr)($SCA_lmnextmap#4_U3, 1 + $I_L644_188 + 256 * $I_L644_230, 0) = (gaussweights%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, 0) * (ls2f%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, $SCA_lmnextmap#4_U3, 0)
  644.                            $I_L644_188 = 1 + $I_L644_188
  645.                            if ( $I_L644_188 >= min( jmaxhalf, 256 + 256 * $I_L644_230 ) + -256 * $I_L644_230 ) exit
  645.                         enddo
  645.                         $I_L645_237 = 1 + $I_L645_237
  645.                         if ( $I_L645_237 >= _rsh( min( mymnextmax, 4 + 4 * $I_L645_232 ) + -4 * $I_L645_232, 2 ) ) exit
  645.                      enddo
  645.                      $I_L645_227 = and( 0xfffffffffffffffcUL, min( mymnextmax, 4 + 4 * $I_L645_232 ) + -4 * $I_L645_232 )
  645.                   endif
  645.                   if ( $I_L645_227 < min( mymnextmax, 4 + 4 * $I_L645_232 ) + -4 * $I_L645_232 ) then
  645.                      $I_L645_234 = 0
  645. !dir$ shortloop16
  645. !dir$ blocking_size( 4, 4 )
  645.                      do
  644.                         $SCA_lmnextmap_I51 = (lmnextmap%base_addr)(1 + $I_L645_227 + $I_L645_234 + 4 * $I_L645_232, 0)
  644.                         $I_L644_188 = 0
  644. !dir$ ivdep
  644. !dir$ blocking_size( 256, 256 )
  644.                         do
  646.                            (lf2s%base_addr)($SCA_lmnextmap_I51, 1 + $I_L644_188 + 256 * $I_L644_230, 0) = (ls2f%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, $SCA_lmnextmap_I51, 0) * (gaussweights%base_addr)(1 + $I_L644_188 + 256 * $I_L644_230, 0)
  644.                            $I_L644_188 = 1 + $I_L644_188
  645.                            if ( $I_L644_188 >= min( jmaxhalf, 256 + 256 * $I_L644_230 ) + -256 * $I_L644_230 ) exit
  645.                         enddo
  645.                         $I_L645_234 = 1 + $I_L645_234
  645.                         if ( $I_L645_234 >= min( mymnextmax, 4 + 4 * $I_L645_232 ) + -$I_L645_227 + -4 * $I_L645_232 ) exit
  645.                      enddo
  645.                   endif
  644.                   $I_L644_230 = 1 + $I_L644_230
  647.                   if ( $I_L644_230 >= 1 + max( 0, -1 + _rsh( 255 + jmaxhalf, 8 ) ) ) exit
  647.                enddo
  645.                $I_L645_232 = 1 + $I_L645_232
  645.                if ( $I_L645_232 >= 1 + max( 0, -1 + _rsh( 3 + mymnextmax, 2 ) ) ) exit
  645.             enddo
  645.          endif
  645.       endif
  649.       $F_A47 = ( djh + -jmaxhalf )
  649.       $F_A48 = ( max( 0, dlmn ) )
  649.       if ( and( -$F_A48, -$F_A47 ) < 0 ) then
  649.          $I_L649_223 = 0
  649.          do
  649.             $I_L649_211 = 0
  649. !dir$ ivdep
  649.             do
  649.                (lf2s%base_addr)(1 + $I_L649_211, 1 + jmaxhalf + $I_L649_223, 0) = 0.0
  649.                $I_L649_211 = 1 + $I_L649_211
  649.                if ( $I_L649_211 >= $F_A48 ) exit
  649.             enddo
  649.             $I_L649_223 = 1 + $I_L649_223
  649.             if ( $I_L649_223 >= $F_A47 ) exit
  649.          enddo
  649.       endif
  650.       $F_A49 = ( max( 0, djh ) )
  650.       $F_A50 = ( dlmn + -mymnextmax )
  650.       if ( and( -$F_A50, -$F_A49 ) < 0 ) then
  650.          $I_L650_225 = 0
  650.          do
  650.             $I_L650_213 = 0
  650. !dir$ ivdep
  650.             do
  650.                (lf2s%base_addr)(1 + mymnextmax + $I_L650_213, 1 + $I_L650_225, 0) = 0.0
  650.                $I_L650_213 = 1 + $I_L650_213
  650.                if ( $I_L650_213 >= $F_A50 ) exit
  650.             enddo
  650.             $I_L650_225 = 1 + $I_L650_225
  650.             if ( $I_L650_225 >= $F_A49 ) exit
  650.          enddo
  650.       endif
  655.       sin60 = 8.660254037844386e-1
  656.       sin36 = 5.8778525229247314e-1
  657.       sin72 = 9.5105651629515353e-1
  658.       cos36 = 8.0901699437494745e-1
  659.       cos72 = 3.0901699437494745e-1
  663.       nblockfft = 1
  664.       if ( mylastlat_f + -myfirstlat_f > 0 ) then
  665.          $SC_imaxperj_I37 = imaxperj%dim_1%EX
  665.          $SC_imaxperj_I38 = imaxperj%dim_1%LB
  664.          $I_L664_191 = 0
  664. !dir$ ivdep
  664.          do
  665.             if ( (imaxperj%base_addr)(myfirstlat_f + $I_L664_191, 0) + -(imaxperj%base_addr)(1 + myfirstlat_f + $I_L664_191, 0) /= 0 ) then
  666.                nblockfft = 1 + nblockfft
  666.             endif
  668.             $I_L664_191 = 1 + $I_L664_191
  667.             if ( $I_L664_191 >= ( mylastlat_f + -myfirstlat_f ) ) exit
  667.          enddo
  667.       endif
  674.       blockfft%header%a_contig = 1
  674.       blockfft%dim_1%LB = 1
  674.       blockfft%dim_1%EX = ( max( 0, nblockfft ) )
  674.       blockfft%dim_1%SM = 21
  674.       $_allo_P19(0) = 0x1000000000001L
  674.       $_allo_P19(1) = loc( blockfft )
  674.       call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
  674.       if ( ( max( 0, nblockfft ) ) > 0 ) then
  674.          $I_L674_193 = 0
  674.          do
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors = $_StaticDV_P20
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%base_addr = pointer to array[1] of integer( 0 )
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%el_len = 32
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%assoc = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%ptr_alloc = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%p_or_a = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%a_contig = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%n_dim = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%orig_base = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%orig_size = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%n_codim = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%dv_versn = 2
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%dv_smunit = 32
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%d_type = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%n_params = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%header%d_type_idx = 10
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%dim_1%LB = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%dim_1%EX = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%factors%dim_1%SM = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs = $_StaticDV_P21
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%base_addr = pointer to array[1] of real (kind=8)( 0 )
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%el_len = 64
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%assoc = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%ptr_alloc = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%p_or_a = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%a_contig = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%n_dim = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%orig_base = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%orig_size = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%n_codim = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%dv_versn = 2
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%dv_smunit = 64
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%d_type = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%n_params = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%header%d_type_idx = 13
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%dim_1%LB = 1
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%dim_1%EX = 0
  674.             (blockfft%base_addr)(1 + $I_L674_193, 0)%trigs%dim_1%SM = 1
  674.             $I_L674_193 = 1 + $I_L674_193
  674.             if ( $I_L674_193 >= ( max( 0, nblockfft ) ) ) exit
  674.          enddo
  674.       endif
  675.       iblockfft = 1
  676.       p%base_addr = loc( (blockfft%base_addr)(1, 0) )
  677.       (blockfft%base_addr)(1, 0)%nlong = (imaxperj%base_addr)(myfirstlat_f, 0)
  678.       (blockfft%base_addr)(1, 0)%firstlat = 1
  679.       if ( mylastlat_f + -myfirstlat_f > 0 ) then
  680.          $SC_imaxperj_I37 = imaxperj%dim_1%EX
  680.          $SC_imaxperj_I38 = imaxperj%dim_1%LB
  679.          $I_L679_195 = 0
  679. !dir$ unroll 4
  679.          do
  680.             if ( (imaxperj%base_addr)(1 + myfirstlat_f + $I_L679_195, 0) + -(p%base_addr)(0)%nlong /= 0 ) then
  681.                (blockfft%base_addr)(iblockfft, 0)%lastlat = ( 1 + $I_L679_195 )
  682.                iblockfft = 1 + iblockfft
  683.                p%base_addr = loc( (blockfft%base_addr)(iblockfft, 0) )
  684.                (blockfft%base_addr)(iblockfft, 0)%nlong = (imaxperj%base_addr)(1 + myfirstlat_f + $I_L679_195, 0)
  685.                (blockfft%base_addr)(iblockfft, 0)%firstlat = ( 2 + $I_L679_195 )
  685.             endif
  687.             $I_L679_195 = 1 + $I_L679_195
  686.             if ( $I_L679_195 >= ( mylastlat_f + -myfirstlat_f ) ) exit
  686.          enddo
  686.       endif
  688.       if ( iblockfft + -nblockfft /= 0 ) then
  689.          $Unit_temp_O0 = nfprt
  689.          $_IOitem_P5(0) = iblockfft
  689.          $_IOitem_P5(1) = nblockfft
  689.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$7,  _substr(t$6,1,47), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(InitTransform)**', 0x800600000000L ), _iotype( (&)$_IOitem_P5(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  691.           _substr(t$433,1,19) = '**(InitTransform)**'
  691.          call _stop(  _substr(t$433,1,19) )
  691.       else
  693.          (blockfft%base_addr)(iblockfft, 0)%lastlat = 1 + mylastlat_f + -myfirstlat_f
  698.          $t_S30 = nblockfft
  698.          if ( nblockfft > 0 ) then
  698.             $I_L698_197 = 0
  698.             do
  700.                call createfft( (blockfft%base_addr)(1 + $I_L698_197, 0)%nlong, (blockfft%base_addr)(1 + $I_L698_197, 0)%factors, (blockfft%base_addr)(1 + $I_L698_197, 0)%nfactors, (blockfft%base_addr)(1 + $I_L698_197, 0)%trigs, (blockfft%base_addr)(1 + $I_L698_197, 0)%ntrigs )
  701.                $I_L698_197 = 1 + $I_L698_197
  701.                if ( $I_L698_197 >= $t_S30 ) exit
  701.             enddo
  701.          endif
  701.       endif
  733.       return
  733.       end
  733.       
  803.       
  803.       subroutine createspectogrid( nfullspec, nsurfspec, nfullgrid, nsurfgrid )
  747.       if ( havesurf /= .false. ) then
  748.          $nsusp_S0 = nsurfspec
  749.          $nsugr_S5 = nsurfgrid
  749.       else
  751.          $nsusp_S0 = 0
  752.          $nsugr_S5 = 0
  752.       endif
  754.       nfull_g = nfullgrid
  755.       nsurf_g = nsurfgrid
  756.       nfull_s = nfullspec
  757.       nsurf_s = nsurfspec
  758.       nspecfields = nfullspec + $nsusp_S0
  759.       usedspecfields = 0
  760.       lastusedspecvert = 0
  761.       surfspec%header%a_contig = 1
  761.       surfspec%dim_1%LB = 1
  761.       surfspec%dim_1%EX = _zla( 0, ( nfullspec + $nsusp_S0 ) )
  761.       surfspec%dim_1%SM = 1
  761.       $_allo_P0(0) = 0x1000000000001L
  761.       $_allo_P0(1) = loc( surfspec )
  761.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  762.       prevspec%header%a_contig = 1
  762.       prevspec%dim_1%LB = 1
  762.       prevspec%dim_1%EX = _zla( 0, ( nfullspec + $nsusp_S0 ) )
  762.       prevspec%dim_1%SM = 1
  762.       $_allo_P1(0) = 0x1000000000001L
  762.       $_allo_P1(1) = loc( prevspec )
  762.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  763.       spec1d%header%a_contig = 1
  763.       spec1d%dim_1%LB = 1
  763.       spec1d%dim_1%EX = _zla( 0, ( nfullspec + $nsusp_S0 ) )
  763.       spec1d%dim_1%SM = 9
  763.       $_allo_P2(0) = 0x1000000000001L
  763.       $_allo_P2(1) = loc( spec1d )
  763.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  763.       if ( _zla( 0, ( nfullspec + $nsusp_S0 ) ) > 0 ) then
  763.          $I_L763_16 = 0
  763.          do
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p = $_StaticDV_P3
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%base_addr = pointer to array[1] of real (kind=8)( 0 )
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%el_len = 64
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%assoc = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%ptr_alloc = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%p_or_a = 1
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%a_contig = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%n_dim = 1
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%orig_base = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%orig_size = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%n_codim = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%dv_versn = 2
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%dv_smunit = 64
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%d_type = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%n_params = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%header%d_type_idx = 13
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%dim_1%LB = 1
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%dim_1%EX = 0
  763.             (spec1d%base_addr)(1 + $I_L763_16, 0)%p%dim_1%SM = 1
  763.             $I_L763_16 = 1 + $I_L763_16
  763.             if ( $I_L763_16 >= _zla( 0, ( nfullspec + $nsusp_S0 ) ) ) exit
  763.          enddo
  763.       endif
  764.       spec2d%header%a_contig = 1
  764.       spec2d%dim_1%LB = 1
  764.       spec2d%dim_1%EX = ( max( 0, nfullspec + $nsusp_S0 ) )
  764.       spec2d%dim_1%SM = 12
  764.       $_allo_P4(0) = 0x1000000000001L
  764.       $_allo_P4(1) = loc( spec2d )
  764.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  764.       if ( ( max( 0, nfullspec + $nsusp_S0 ) ) > 0 ) then
  764.          $I_L764_18 = 0
  764.          do
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p = $_StaticDV_P5
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%el_len = 64
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%assoc = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%ptr_alloc = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%p_or_a = 1
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%a_contig = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%n_dim = 2
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%orig_base = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%orig_size = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%n_codim = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%dv_versn = 2
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%dv_smunit = 64
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%d_type = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%n_params = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%header%d_type_idx = 13
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%dim_1%LB = 1
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%dim_1%EX = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%dim_1%SM = 1
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%dim_2%LB = 1
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%dim_2%EX = 0
  764.             (spec2d%base_addr)(1 + $I_L764_18, 0)%p%dim_2%SM = 1
  764.             $I_L764_18 = 1 + $I_L764_18
  764.             if ( $I_L764_18 >= ( max( 0, nfullspec + $nsusp_S0 ) ) ) exit
  764.          enddo
  764.       endif
  765.       nvertspec = $nsusp_S0 + nfullspec * kmaxloc
  767.       ngridfields = nsurfgrid + nfullgrid
  768.       usedgridfields = 0
  769.       lastusedgridvert = 0
  770.       surfgrid%header%a_contig = 1
  770.       surfgrid%dim_1%LB = 1
  770.       surfgrid%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  770.       surfgrid%dim_1%SM = 1
  770.       $_allo_P6(0) = 0x1000000000001L
  770.       $_allo_P6(1) = loc( surfgrid )
  770.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  771.       prevgrid%header%a_contig = 1
  771.       prevgrid%dim_1%LB = 1
  771.       prevgrid%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  771.       prevgrid%dim_1%SM = 1
  771.       $_allo_P7(0) = 0x1000000000001L
  771.       $_allo_P7(1) = loc( prevgrid )
  771.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  772.       grid2d%header%a_contig = 1
  772.       grid2d%dim_1%LB = 1
  772.       grid2d%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  772.       grid2d%dim_1%SM = 12
  772.       $_allo_P8(0) = 0x1000000000001L
  772.       $_allo_P8(1) = loc( grid2d )
  772.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  772.       if ( ( max( 0, nsurfgrid + nfullgrid ) ) > 0 ) then
  772.          $I_L772_20 = 0
  772.          do
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p = $_StaticDV_P9
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%el_len = 64
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%assoc = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%ptr_alloc = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%p_or_a = 1
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%a_contig = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%n_dim = 2
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%orig_base = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%orig_size = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%n_codim = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%dv_versn = 2
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%dv_smunit = 64
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%d_type = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%n_params = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%header%d_type_idx = 13
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%dim_1%LB = 1
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%dim_1%EX = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%dim_1%SM = 1
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%dim_2%LB = 1
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%dim_2%EX = 0
  772.             (grid2d%base_addr)(1 + $I_L772_20, 0)%p%dim_2%SM = 1
  772.             $I_L772_20 = 1 + $I_L772_20
  772.             if ( $I_L772_20 >= ( max( 0, nsurfgrid + nfullgrid ) ) ) exit
  772.          enddo
  772.       endif
  773.       grid3d%header%a_contig = 1
  773.       grid3d%dim_1%LB = 1
  773.       grid3d%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  773.       grid3d%dim_1%SM = 15
  773.       $_allo_P10(0) = 0x1000000000001L
  773.       $_allo_P10(1) = loc( grid3d )
  773.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
  773.       if ( ( max( 0, nsurfgrid + nfullgrid ) ) > 0 ) then
  773.          $I_L773_22 = 0
  773.          do
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p = $_StaticDV_P11
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%base_addr = pointer to array[1] of array[1] of array[1] of real (kind=8)( 0 )
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%el_len = 64
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%assoc = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%ptr_alloc = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%p_or_a = 1
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%a_contig = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%n_dim = 3
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%orig_base = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%orig_size = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%n_codim = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%dv_versn = 2
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%dv_smunit = 64
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%d_type = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%n_params = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%header%d_type_idx = 13
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_1%LB = 1
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_1%EX = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_1%SM = 1
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_2%LB = 1
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_2%EX = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_2%SM = 1
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_3%LB = 1
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_3%EX = 0
  773.             (grid3d%base_addr)(1 + $I_L773_22, 0)%p%dim_3%SM = 1
  773.             $I_L773_22 = 1 + $I_L773_22
  773.             if ( $I_L773_22 >= ( max( 0, nsurfgrid + nfullgrid ) ) ) exit
  773.          enddo
  773.       endif
  774.       fieldfordellam%header%a_contig = 1
  774.       fieldfordellam%dim_1%LB = 1
  774.       fieldfordellam%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  774.       fieldfordellam%dim_1%SM = 1
  774.       $_allo_P12(0) = 0x1000000000001L
  774.       $_allo_P12(1) = loc( fieldfordellam )
  774.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
  775.       nvertgrid = $nsugr_S5 + nfullgrid * kmaxloc
  777.       willdellam = .false.
  778.       useddellamfields = nsurfspec + nfullspec
  779.       lastuseddellamvert = $nsusp_S0 + nfullspec * kmaxloc
  780.       prevvertdellamsource%header%a_contig = 1
  780.       prevvertdellamsource%dim_1%LB = 1
  780.       prevvertdellamsource%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  780.       prevvertdellamsource%dim_1%SM = 1
  780.       $_allo_P13(0) = 0x1000000000001L
  780.       $_allo_P13(1) = loc( prevvertdellamsource )
  780.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
  782.       t$488 = 2 * nfullspec * kmaxloc + 2 * $nsusp_S0
  782.       dv = nobankconflicts( t$488 )
  783.       t$488 = nvertspec * jmaxhalf
  783.       dvjh = nobankconflicts( t$488 )
  784.       t$488 = nvertgrid * myjmax_f
  784.       dvdlj = nobankconflicts( t$488 )
  786.       spec%header%a_contig = 1
  786.       spec%dim_1%LB = 1
  786.       spec%dim_1%EX = ( max( 0, dlmn ) )
  786.       spec%dim_1%SM = 1
  786.       spec%dim_2%LB = 1
  786.       spec%dim_2%EX = ( max( 0, dv ) )
  786.       spec%dim_2%SM = ( max( 0, dlmn ) )
  786.       $_allo_P14(0) = 0x1000000000001L
  786.       $_allo_P14(1) = loc( spec )
  786.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
  787.       four%header%a_contig = 1
  787.       four%dim_1%LB = 1
  787.       four%dim_1%EX = ( max( 0, dvdlj ) )
  787.       four%dim_1%SM = 1
  787.       four%dim_2%LB = 1
  787.       four%dim_2%EX = ( max( 0, dip1 ) )
  787.       four%dim_2%SM = ( max( 0, dvdlj ) )
  787.       $_allo_P15(0) = 0x1000000000001L
  787.       $_allo_P15(1) = loc( four )
  787.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
  788.       if ( requests%header%assoc /= 1 ) then
  789.          requests%header%a_contig = 1
  789.          requests%dim_1%LB = 0
  789.          requests%dim_1%EX = ( max( 0, 1 + maxnodes ) )
  789.          requests%dim_1%SM = 1
  789.          $_allo_P16(0) = 0x1000000000001L
  789.          $_allo_P16(1) = loc( requests )
  789.          call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
  790.          requestr%header%a_contig = 1
  790.          requestr%dim_1%LB = 0
  790.          requestr%dim_1%EX = ( max( 0, 1 + maxnodes ) )
  790.          requestr%dim_1%SM = 1
  790.          $_allo_P17(0) = 0x1000000000001L
  790.          $_allo_P17(1) = loc( requestr )
  790.          call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
  791.          status%header%a_contig = 1
  791.          status%dim_1%LB = 1
  791.          status%dim_1%EX = 5
  791.          status%dim_1%SM = 1
  791.          $_allo_P18(0) = 0x1000000000001L
  791.          $_allo_P18(1) = loc( status )
  791.          call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
  792.          stat%header%a_contig = 1
  792.          stat%dim_1%LB = 1
  792.          stat%dim_1%EX = 5
  792.          stat%dim_1%SM = 1
  792.          stat%dim_2%LB = 1
  792.          stat%dim_2%EX = ( max( 0, maxnodes ) )
  792.          stat%dim_2%SM = 5
  792.          $_allo_P19(0) = 0x1000000000001L
  792.          $_allo_P19(1) = loc( stat )
  792.          call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
  792.       endif
  803.       return
  803.       end
  803.       
  807.       
  807.       subroutine deposit1d( argspec, arggrid, argdellam )
  807.       argspec%dim_1%LB = 1
  807.       if ( loc( arggrid ) /= 0 ) then
  807.          arggrid%dim_1%LB = 1
  807.          arggrid%dim_2%LB = 1
  807.       endif
  807.       if ( loc( argdellam ) /= 0 ) then
  807.          argdellam%dim_1%LB = 1
  807.          argdellam%dim_2%LB = 1
  807.       endif
  833.       if ( havesurf /= .false. ) then
  874.          lusf = 1 + usedspecfields
  876.          $pusv_S1 = lastusedspecvert
  878.          lastusedspecvert = 1 + lastusedspecvert
  875.          usedspecfields = 1 + usedspecfields
  879.          if ( loc( arggrid ) /= 0 ) then
  880.             lugf = 1 + usedgridfields
  882.             $pugv_S2 = lastusedgridvert
  884.             lastusedgridvert = 1 + lastusedgridvert
  881.             usedgridfields = 1 + usedgridfields
  885.             if ( loc( argdellam ) /= 0 ) then
  886.                ludlf = 1 + useddellamfields
  888.                pudlv = lastuseddellamvert
  890.                lastuseddellamvert = 1 + lastuseddellamvert
  887.                useddellamfields = 1 + useddellamfields
  887.             endif
  887.             goto 10
  892.          else if ( loc( argdellam ) /= 0 ) then
  893.             lugf = 1 + usedgridfields
  895.             $pugv_S2 = lastusedgridvert
  897.             lastusedgridvert = 1 + lastusedgridvert
  894.             usedgridfields = 1 + usedgridfields
  894.    10       continue
  905.             if ( lusf <= nspecfields ) then
  906.                (surfspec%base_addr)(lusf, 0) = .true.
  907.                (prevspec%base_addr)(lusf, 0) = $pusv_S1
  908.                (spec2d%base_addr)(lusf, 0)%p%header%assoc = 0
  909.                (spec1d%base_addr)(lusf, 0)%p%header%a_contig = argspec%header%a_contig
  909.                (spec1d%base_addr)(lusf, 0)%p%header%assoc = 1
  909.                (spec1d%base_addr)(lusf, 0)%p%header%d_type_idx = 13
  909.                (spec1d%base_addr)(lusf, 0)%p%dim_1%LB = 1
  909.                (spec1d%base_addr)(lusf, 0)%p%dim_1%EX = max( 0, argspec%dim_1%EX )
  909.                (spec1d%base_addr)(lusf, 0)%p%dim_1%SM = argspec%dim_1%SM
  909.                (spec1d%base_addr)(lusf, 0)%p%header%ptr_alloc = argspec%header%ptr_alloc
  909.                (spec1d%base_addr)(lusf, 0)%p%header%orig_base = argspec%header%orig_base
  909.                (spec1d%base_addr)(lusf, 0)%p%header%orig_size = argspec%header%orig_size
  909.                (spec1d%base_addr)(lusf, 0)%p%base_addr = loc( (argspec%base_addr)(1, 0) )
  921.                if ( loc( arggrid ) /= 0 ) then
  926.                   if ( lugf <= nspecfields ) then
  927.                      (surfgrid%base_addr)(lugf, 0) = .true.
  928.                      (prevgrid%base_addr)(lugf, 0) = $pugv_S2
  929.                      (grid3d%base_addr)(lugf, 0)%p%header%assoc = 0
  930.                      (grid2d%base_addr)(lugf, 0)%p%header%a_contig = arggrid%header%a_contig
  930.                      (grid2d%base_addr)(lugf, 0)%p%header%assoc = 1
  930.                      (grid2d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
  930.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%LB = 1
  930.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, arggrid%dim_1%EX )
  930.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%SM = arggrid%dim_1%SM
  930.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%LB = 1
  930.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, arggrid%dim_2%EX )
  930.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%SM = arggrid%dim_2%SM
  930.                      (grid2d%base_addr)(lugf, 0)%p%header%ptr_alloc = arggrid%header%ptr_alloc
  930.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_base = arggrid%header%orig_base
  930.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_size = arggrid%header%orig_size
  930.                      (grid2d%base_addr)(lugf, 0)%p%base_addr = loc( (arggrid%base_addr)(1, 1, 0) )
  931.                      (fieldfordellam%base_addr)(lugf, 0) = .false.
  932.                      (prevvertdellamsource%base_addr)(lugf, 0) = -1
  946.                      if ( loc( argdellam ) /= 0 ) then
  952.                         willdellam = .true.
  953.                         if ( ludlf <= ngridfields ) then
  954.                            (surfgrid%base_addr)(ludlf, 0) = .true.
  955.                            (prevgrid%base_addr)(ludlf, 0) = pudlv
  956.                            (grid3d%base_addr)(ludlf, 0)%p%header%assoc = 0
  957.                            (grid2d%base_addr)(ludlf, 0)%p%header%a_contig = argdellam%header%a_contig
  957.                            (grid2d%base_addr)(ludlf, 0)%p%header%assoc = 1
  957.                            (grid2d%base_addr)(ludlf, 0)%p%header%d_type_idx = 13
  957.                            (grid2d%base_addr)(ludlf, 0)%p%dim_1%LB = 1
  957.                            (grid2d%base_addr)(ludlf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  957.                            (grid2d%base_addr)(ludlf, 0)%p%dim_1%SM = argdellam%dim_1%SM
  957.                            (grid2d%base_addr)(ludlf, 0)%p%dim_2%LB = 1
  957.                            (grid2d%base_addr)(ludlf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  957.                            (grid2d%base_addr)(ludlf, 0)%p%dim_2%SM = argdellam%dim_2%SM
  957.                            (grid2d%base_addr)(ludlf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  957.                            (grid2d%base_addr)(ludlf, 0)%p%header%orig_base = argdellam%header%orig_base
  957.                            (grid2d%base_addr)(ludlf, 0)%p%header%orig_size = argdellam%header%orig_size
  957.                            (grid2d%base_addr)(ludlf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  958.                            (fieldfordellam%base_addr)(ludlf, 0) = .true.
  959.                            (prevvertdellamsource%base_addr)(ludlf, 0) = (prevgrid%base_addr)(lugf, 0)
  959.                         else
  961.                            $Unit_temp_O1 = nfprt
  961.                            _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$65,  _substr(t$64,1,45), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  962.                            $Unit_temp_O2 = nfprt
  962.                            $_IOitem_P0(0) = ludlf
  962.                            $_IOitem_P0(1) = ngridfields
  962.                            _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$67,  _substr(t$66,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  963.                             _substr(t$518,1,15) = '**(Deposit1D)**'
  963.                            call _stop(  _substr(t$518,1,15) )
  963.                         endif
  963.                      endif
  963.                   else
  934.                      $Unit_temp_O3 = nfprt
  934.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$57,  _substr(t$56,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  935.                      $Unit_temp_O4 = nfprt
  935.                      $_IOitem_P1(0) = lugf
  935.                      $_IOitem_P1(1) = nspecfields
  935.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P1(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  936.                       _substr(t$505,1,15) = '**(Deposit1D)**'
  936.                      call _stop(  _substr(t$505,1,15) )
  936.                   endif
  974.                else if ( loc( argdellam ) /= 0 ) then
  980.                   willdellam = .true.
  981.                   if ( lugf <= nspecfields ) then
  982.                      (surfgrid%base_addr)(lugf, 0) = .true.
  983.                      (prevgrid%base_addr)(lugf, 0) = $pugv_S2
  984.                      (grid3d%base_addr)(lugf, 0)%p%header%assoc = 0
  985.                      (grid2d%base_addr)(lugf, 0)%p%header%a_contig = argdellam%header%a_contig
  985.                      (grid2d%base_addr)(lugf, 0)%p%header%assoc = 1
  985.                      (grid2d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
  985.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%LB = 1
  985.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  985.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%SM = argdellam%dim_1%SM
  985.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%LB = 1
  985.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  985.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%SM = argdellam%dim_2%SM
  985.                      (grid2d%base_addr)(lugf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  985.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_base = argdellam%header%orig_base
  985.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_size = argdellam%header%orig_size
  985.                      (grid2d%base_addr)(lugf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  986.                      (fieldfordellam%base_addr)(lugf, 0) = .true.
  987.                      (prevvertdellamsource%base_addr)(lugf, 0) = $pugv_S2
  987.                   else
  989.                      $Unit_temp_O5 = nfprt
  989.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$73,  _substr(t$72,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  990.                      $Unit_temp_O6 = nfprt
  990.                      $_IOitem_P2(0) = lugf
  990.                      $_IOitem_P2(1) = nspecfields
  990.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O6, Null_Arg, Null_Arg, t$75,  _substr(t$74,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P2(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  991.                       _substr(t$531,1,15) = '**(Deposit1D)**'
  991.                      call _stop(  _substr(t$531,1,15) )
  991.                   endif
  991.                endif
  991.             else
  911.                $Unit_temp_O7 = nfprt
  911.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O7, Null_Arg, Null_Arg, t$51,  _substr(t$50,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  912.                $Unit_temp_O8 = nfprt
  912.                $_IOitem_P3(0) = lusf
  912.                $_IOitem_P3(1) = nspecfields
  912.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O8, Null_Arg, Null_Arg, t$53,  _substr(t$52,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P3(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  913.                 _substr(t$492,1,15) = '**(Deposit1D)**'
  913.                call _stop(  _substr(t$492,1,15) )
  913.             endif
  913.          else
  899.             $Unit_temp_O9 = nfprt
  899.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O9, Null_Arg, Null_Arg, t$49,  _substr(t$48,1,40), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  900.              _substr(t$491,1,15) = '**(Deposit1D)**'
  900.             call _stop(  _substr(t$491,1,15) )
  900.          endif
  900.       else if ( loc( arggrid ) /= 0 ) then
  840.          $lugf_S0 = 1 + usedgridfields
  842.          (surfgrid%base_addr)(1 + usedgridfields, 0) = .true.
  843.          (prevgrid%base_addr)(1 + usedgridfields, 0) = -1
  844.          (grid3d%base_addr)(1 + usedgridfields, 0)%p%header%assoc = 0
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%a_contig = arggrid%header%a_contig
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%assoc = 1
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%d_type_idx = 13
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_1%LB = 1
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_1%EX = max( 0, arggrid%dim_1%EX )
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_1%SM = arggrid%dim_1%SM
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_2%LB = 1
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_2%EX = max( 0, arggrid%dim_2%EX )
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_2%SM = arggrid%dim_2%SM
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%ptr_alloc = arggrid%header%ptr_alloc
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%orig_base = arggrid%header%orig_base
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%orig_size = arggrid%header%orig_size
  845.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%base_addr = loc( (arggrid%base_addr)(1, 1, 0) )
  846.          (fieldfordellam%base_addr)(1 + usedgridfields, 0) = .false.
  847.          (prevvertdellamsource%base_addr)(1 + usedgridfields, 0) = -1
  841.          usedgridfields = 1 + usedgridfields
  848.          if ( loc( argdellam ) /= 0 ) then
  851.             (surfgrid%base_addr)(1 + useddellamfields, 0) = .true.
  852.             (prevgrid%base_addr)(1 + useddellamfields, 0) = -1
  853.             (grid3d%base_addr)(1 + useddellamfields, 0)%p%header%assoc = 0
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%header%a_contig = argdellam%header%a_contig
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%header%assoc = 1
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%header%d_type_idx = 13
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%dim_1%LB = 1
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%dim_1%SM = argdellam%dim_1%SM
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%dim_2%LB = 1
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%dim_2%SM = argdellam%dim_2%SM
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%header%orig_base = argdellam%header%orig_base
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%header%orig_size = argdellam%header%orig_size
  854.             (grid2d%base_addr)(1 + useddellamfields, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  855.             (fieldfordellam%base_addr)($lugf_S0, 0) = .false.
  856.             (prevvertdellamsource%base_addr)($lugf_S0, 0) = -1
  850.             useddellamfields = 1 + useddellamfields
  850.          endif
  850.       else if ( loc( argdellam ) /= 0 ) then
  861.          (surfgrid%base_addr)(1 + usedgridfields, 0) = .true.
  862.          (prevgrid%base_addr)(1 + usedgridfields, 0) = -1
  863.          (grid3d%base_addr)(1 + usedgridfields, 0)%p%header%assoc = 0
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%a_contig = argdellam%header%a_contig
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%assoc = 1
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%d_type_idx = 13
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_1%LB = 1
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_1%SM = argdellam%dim_1%SM
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_2%LB = 1
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%dim_2%SM = argdellam%dim_2%SM
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%orig_base = argdellam%header%orig_base
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%header%orig_size = argdellam%header%orig_size
  864.          (grid2d%base_addr)(1 + usedgridfields, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  865.          (fieldfordellam%base_addr)(1 + usedgridfields, 0) = .false.
  866.          (prevvertdellamsource%base_addr)(1 + usedgridfields, 0) = -1
  860.          usedgridfields = 1 + usedgridfields
  860.       else
  868.          $Unit_temp_O0 = nfprt
  868.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$47,  _substr(t$46,1,40), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  869.           _substr(t$490,1,15) = '**(Deposit1D)**'
  869.          call _stop(  _substr(t$490,1,15) )
  869.       endif
 1005.       return
 1005.       end
 1005.       
 1009.       
 1009.       subroutine deposit2d( argspec, arggrid, argdellam )
 1009.       argspec%dim_1%LB = 1
 1009.       argspec%dim_2%LB = 1
 1009.       if ( loc( arggrid ) /= 0 ) then
 1009.          arggrid%dim_1%LB = 1
 1009.          arggrid%dim_2%LB = 1
 1009.          arggrid%dim_3%LB = 1
 1009.       endif
 1009.       if ( loc( argdellam ) /= 0 ) then
 1009.          argdellam%dim_1%LB = 1
 1009.          argdellam%dim_2%LB = 1
 1009.          argdellam%dim_3%LB = 1
 1009.       endif
 1035.       lusf = 1 + usedspecfields
 1037.       $pusv_S0 = lastusedspecvert
 1039.       lastusedspecvert = lastusedspecvert + kmaxloc
 1036.       usedspecfields = 1 + usedspecfields
 1040.       if ( loc( arggrid ) /= 0 ) then
 1041.          lugf = 1 + usedgridfields
 1043.          $pugv_S1 = lastusedgridvert
 1045.          lastusedgridvert = kmaxloc + lastusedgridvert
 1042.          usedgridfields = 1 + usedgridfields
 1046.          if ( loc( argdellam ) /= 0 ) then
 1047.             ludlf = 1 + useddellamfields
 1049.             pudlv = lastuseddellamvert
 1051.             lastuseddellamvert = kmaxloc + lastuseddellamvert
 1048.             useddellamfields = 1 + useddellamfields
 1048.          endif
 1048.          goto 10
 1053.       else if ( loc( argdellam ) /= 0 ) then
 1054.          lugf = 1 + usedgridfields
 1056.          $pugv_S1 = lastusedgridvert
 1058.          lastusedgridvert = kmaxloc + lastusedgridvert
 1055.          usedgridfields = 1 + usedgridfields
 1055.    10    continue
 1066.          if ( lusf <= nspecfields ) then
 1067.             (surfspec%base_addr)(lusf, 0) = .false.
 1068.             (prevspec%base_addr)(lusf, 0) = $pusv_S0
 1069.             (spec1d%base_addr)(lusf, 0)%p%header%assoc = 0
 1070.             (spec2d%base_addr)(lusf, 0)%p%header%a_contig = argspec%header%a_contig
 1070.             (spec2d%base_addr)(lusf, 0)%p%header%assoc = 1
 1070.             (spec2d%base_addr)(lusf, 0)%p%header%d_type_idx = 13
 1070.             (spec2d%base_addr)(lusf, 0)%p%dim_1%LB = 1
 1070.             (spec2d%base_addr)(lusf, 0)%p%dim_1%EX = max( 0, argspec%dim_1%EX )
 1070.             (spec2d%base_addr)(lusf, 0)%p%dim_1%SM = argspec%dim_1%SM
 1070.             (spec2d%base_addr)(lusf, 0)%p%dim_2%LB = 1
 1070.             (spec2d%base_addr)(lusf, 0)%p%dim_2%EX = max( 0, argspec%dim_2%EX )
 1070.             (spec2d%base_addr)(lusf, 0)%p%dim_2%SM = argspec%dim_2%SM
 1070.             (spec2d%base_addr)(lusf, 0)%p%header%ptr_alloc = argspec%header%ptr_alloc
 1070.             (spec2d%base_addr)(lusf, 0)%p%header%orig_base = argspec%header%orig_base
 1070.             (spec2d%base_addr)(lusf, 0)%p%header%orig_size = argspec%header%orig_size
 1070.             (spec2d%base_addr)(lusf, 0)%p%base_addr = loc( (argspec%base_addr)(1, 1, 0) )
 1082.             if ( loc( arggrid ) /= 0 ) then
 1087.                if ( lugf <= nfull_s + nsurf_s ) then
 1088.                   (surfgrid%base_addr)(lugf, 0) = .false.
 1089.                   (prevgrid%base_addr)(lugf, 0) = $pugv_S1
 1090.                   (grid2d%base_addr)(lugf, 0)%p%header%assoc = 0
 1091.                   (grid3d%base_addr)(lugf, 0)%p%header%a_contig = arggrid%header%a_contig
 1091.                   (grid3d%base_addr)(lugf, 0)%p%header%assoc = 1
 1091.                   (grid3d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%LB = 1
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, arggrid%dim_1%EX )
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%SM = arggrid%dim_1%SM
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%LB = 1
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, arggrid%dim_2%EX )
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%SM = arggrid%dim_2%SM
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%LB = 1
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%EX = max( 0, arggrid%dim_3%EX )
 1091.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%SM = arggrid%dim_3%SM
 1091.                   (grid3d%base_addr)(lugf, 0)%p%header%ptr_alloc = arggrid%header%ptr_alloc
 1091.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_base = arggrid%header%orig_base
 1091.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_size = arggrid%header%orig_size
 1091.                   (grid3d%base_addr)(lugf, 0)%p%base_addr = loc( (arggrid%base_addr)(1, 1, 1, 0) )
 1092.                   (fieldfordellam%base_addr)(lugf, 0) = .false.
 1093.                   (prevvertdellamsource%base_addr)(lugf, 0) = -1
 1107.                   if ( loc( argdellam ) /= 0 ) then
 1113.                      willdellam = .true.
 1114.                      if ( ludlf <= ngridfields ) then
 1115.                         (surfgrid%base_addr)(ludlf, 0) = .false.
 1116.                         (prevgrid%base_addr)(ludlf, 0) = pudlv
 1117.                         (grid2d%base_addr)(ludlf, 0)%p%header%assoc = 0
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%header%a_contig = argdellam%header%a_contig
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%header%assoc = 1
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%header%d_type_idx = 13
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_1%LB = 1
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_1%SM = argdellam%dim_1%SM
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_2%LB = 1
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_2%SM = argdellam%dim_2%SM
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_3%LB = 1
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_3%EX = max( 0, argdellam%dim_3%EX )
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%dim_3%SM = argdellam%dim_3%SM
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%header%orig_base = argdellam%header%orig_base
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%header%orig_size = argdellam%header%orig_size
 1118.                         (grid3d%base_addr)(ludlf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 1, 0) )
 1119.                         (fieldfordellam%base_addr)(ludlf, 0) = .true.
 1120.                         (prevvertdellamsource%base_addr)(ludlf, 0) = (prevgrid%base_addr)(lugf, 0)
 1120.                      else
 1122.                         $Unit_temp_O0 = nfprt
 1122.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$97,  _substr(t$96,1,45), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1123.                         $Unit_temp_O1 = nfprt
 1123.                         $_IOitem_P0(0) = ludlf
 1123.                         $_IOitem_P0(1) = ngridfields
 1123.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$99,  _substr(t$98,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1124.                          _substr(t$571,1,15) = '**(Deposit2D)**'
 1124.                         call _stop(  _substr(t$571,1,15) )
 1124.                      endif
 1124.                   endif
 1124.                else
 1095.                   $Unit_temp_O2 = nfprt
 1095.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$89,  _substr(t$88,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1096.                   $Unit_temp_O3 = nfprt
 1096.                   $_IOitem_P1(0) = lugf
 1096.                   $_IOitem_P1(1) = nspecfields
 1096.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$91,  _substr(t$90,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P1(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1097.                    _substr(t$558,1,15) = '**(Deposit2D)**'
 1097.                   call _stop(  _substr(t$558,1,15) )
 1097.                endif
 1135.             else if ( loc( argdellam ) /= 0 ) then
 1141.                willdellam = .true.
 1142.                if ( lugf <= nfull_s + nsurf_s ) then
 1143.                   (surfgrid%base_addr)(lugf, 0) = .false.
 1144.                   (prevgrid%base_addr)(lugf, 0) = $pugv_S1
 1145.                   (grid2d%base_addr)(lugf, 0)%p%header%assoc = 0
 1146.                   (grid3d%base_addr)(lugf, 0)%p%header%a_contig = argdellam%header%a_contig
 1146.                   (grid3d%base_addr)(lugf, 0)%p%header%assoc = 1
 1146.                   (grid3d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%LB = 1
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%SM = argdellam%dim_1%SM
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%LB = 1
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%SM = argdellam%dim_2%SM
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%LB = 1
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%EX = max( 0, argdellam%dim_3%EX )
 1146.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%SM = argdellam%dim_3%SM
 1146.                   (grid3d%base_addr)(lugf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
 1146.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_base = argdellam%header%orig_base
 1146.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_size = argdellam%header%orig_size
 1146.                   (grid3d%base_addr)(lugf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 1, 0) )
 1147.                   (fieldfordellam%base_addr)(lugf, 0) = .true.
 1148.                   (prevvertdellamsource%base_addr)(lugf, 0) = $pugv_S1
 1148.                else
 1150.                   $Unit_temp_O4 = nfprt
 1150.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$105,  _substr(t$104,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1151.                   $Unit_temp_O5 = nfprt
 1151.                   $_IOitem_P2(0) = lugf
 1151.                   $_IOitem_P2(1) = nspecfields
 1151.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$107,  _substr(t$106,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P2(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1152.                    _substr(t$584,1,15) = '**(Deposit2D)**'
 1152.                   call _stop(  _substr(t$584,1,15) )
 1152.                endif
 1152.             endif
 1152.          else
 1072.             $Unit_temp_O6 = nfprt
 1072.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O6, Null_Arg, Null_Arg, t$83,  _substr(t$82,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1073.             $Unit_temp_O7 = nfprt
 1073.             $_IOitem_P3(0) = lusf
 1073.             $_IOitem_P3(1) = nspecfields
 1073.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O7, Null_Arg, Null_Arg, t$85,  _substr(t$84,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( (&)$_IOitem_P3(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1074.              _substr(t$545,1,15) = '**(Deposit2D)**'
 1074.             call _stop(  _substr(t$545,1,15) )
 1074.          endif
 1074.       else
 1060.          $Unit_temp_O8 = nfprt
 1060.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O8, Null_Arg, Null_Arg, t$81,  _substr(t$80,1,40), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1061.           _substr(t$544,1,15) = '**(Deposit2D)**'
 1061.          call _stop(  _substr(t$544,1,15) )
 1061.       endif
 1162.       return
 1162.       end
 1162.       
 1167.       
 1167.       subroutine depdlg1d( argspec, arggrid, argdellam )
 1167.       argspec%dim_1%LB = 1
 1167.       arggrid%dim_1%LB = 1
 1167.       arggrid%dim_2%LB = 1
 1167.       argdellam%dim_1%LB = 1
 1167.       argdellam%dim_2%LB = 1
 1171.       t$597 = argspec
 1171.       t$598 = arggrid
 1171.       t$599 = argdellam
 1171.       call deposit1d( t$597, t$598, t$599 )
 1172.       return
 1172.       end
 1172.       
 1178.       
 1178.       subroutine depdlg2d( argspec, arggrid, argdellam )
 1178.       argspec%dim_1%LB = 1
 1178.       argspec%dim_2%LB = 1
 1178.       arggrid%dim_1%LB = 1
 1178.       arggrid%dim_2%LB = 1
 1178.       arggrid%dim_3%LB = 1
 1178.       argdellam%dim_1%LB = 1
 1178.       argdellam%dim_2%LB = 1
 1178.       argdellam%dim_3%LB = 1
 1182.       t$600 = argspec
 1182.       t$601 = arggrid
 1182.       t$602 = argdellam
 1182.       call deposit2d( t$600, t$601, t$602 )
 1183.       return
 1183.       end
 1183.       
 1189.       
 1189.       subroutine depdl1d( argspec, argdellam )
 1189.       argspec%dim_1%LB = 1
 1189.       argdellam%dim_1%LB = 1
 1189.       argdellam%dim_2%LB = 1
 1192.       t$603 = argspec
 1192.       t$604 = argdellam
 1192.       call deposit1d( t$603, 0, t$604 )
 1193.       return
 1193.       end
 1193.       
 1199.       
 1199.       subroutine depdl2d( argspec, argdellam )
 1199.       argspec%dim_1%LB = 1
 1199.       argspec%dim_2%LB = 1
 1199.       argdellam%dim_1%LB = 1
 1199.       argdellam%dim_2%LB = 1
 1199.       argdellam%dim_3%LB = 1
 1202.       t$605 = argspec
 1202.       t$606 = argdellam
 1202.       call deposit2d( t$605, 0, t$606 )
 1203.       return
 1203.       end
 1203.       
 1304.       
 1304.       subroutine dospectogrid
  438.       if ( t$191 == 0 ) then
  438.          t$210(1) = 3
  438.          t$211(1) = 0
  438.          t$212(1) = 0
  438.          t$207(1) = int( loc( t$190 ), 8 )
  438.          t$208(1) = 0
  438.          t$209(1) = int( loc( t$206 ), 8 )
  438.          t$191 = __get_dynamic_type( 2, t$207(1), t$210(1), 1, t$208(1), t$209(1), t$211(1), t$212(1) )
  438.       endif
  438.       p = $_StaticDV_P0
  438.       p%base_addr = pointer to type multifft( 0 )
  438.       p%header%el_len = 1344
  438.       p%header%assoc = 0
  438.       p%header%ptr_alloc = 0
  438.       p%header%p_or_a = 1
  438.       p%header%a_contig = 0
  438.       p%header%n_dim = 0
  438.       p%header%orig_base = 0
  438.       p%header%orig_size = 0
  438.       p%header%n_codim = 0
  438.       p%header%dv_versn = 2
  438.       p%header%dv_smunit = 64
  438.       p%header%d_type = 0
  438.       p%header%n_params = 0
  438.       p%header%d_type_idx = t$191
 1238.        _substr(t$607,1,12) = 'DoSpecToGrid'
 1238.       call threaddecomp( 1, mymnmax, mnfirst, mnlast,  _substr(t$607,1,12) )
 1239.        _substr(t$608,1,12) = 'DoSpecToGrid'
 1239.       call threaddecomp( 1, mymnextmax, mnextfirst, mnextlast,  _substr(t$608,1,12) )
 1240.        _substr(t$609,1,12) = 'DoSpecToGrid'
 1240.       call threaddecomp( 1, mymmax, mfirst, mlast,  _substr(t$609,1,12) )
 1241.        _substr(t$610,1,12) = 'DoSpecToGrid'
 1241.       call threaddecomp( 1, jbmax, jbfirst, jblast,  _substr(t$610,1,12) )
 1242.        _substr(t$611,1,12) = 'DoSpecToGrid'
 1242.       call threaddecomp( 1, dip1, ifirst, ilast,  _substr(t$611,1,12) )
 1245.       if ( nfull_g > 0 ) then
 1238.          goto 10
 1245.       else if ( havesurf /= .false. ) then
 1245.    10    continue
 1247.          if ( ilast + -ifirst >= 0 ) then
 1249.             $SC_four_I0 = four%dim_1%EX
 1249.             $SC_four_I1 = four%dim_1%LB
 1249.             $SC_four_I3 = four%dim_2%SM
 1249.             $SC_four_I2 = four%dim_2%EX
 1249.             $SC_four_I4 = four%dim_2%LB
 1248.             if ( dvdlj > 0 ) then
 1247.                $I_L1247_254 = 0
 1247.                do
 1248.                   $I_L1248_226 = 0
 1248. !dir$ ivdep
 1248.                   do
 1249.                      (four%base_addr)(1 + $I_L1248_226, ifirst + $I_L1247_254, 0) = 0.0
 1250.                      $I_L1248_226 = 1 + $I_L1248_226
 1248.                      if ( $I_L1248_226 >= dvdlj ) exit
 1248.                   enddo
 1251.                   $I_L1247_254 = 1 + $I_L1247_254
 1250.                   if ( $I_L1247_254 >= 1 + ilast + -ifirst ) exit
 1250.                enddo
 1250.             endif
 1250.          endif
 1255.          s1 = $_StaticDV_P1
 1255.          s1%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1255.          s1%dim_1%LB = 1
 1255.          s1%dim_1%EX = 0
 1255.          s1%dim_1%SM = 1
 1255.          s2 = $_StaticDV_P2
 1255.          s2%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 1255.          s2%dim_1%LB = 1
 1255.          s2%dim_1%EX = 0
 1255.          s2%dim_1%SM = 1
 1255.          s2%dim_2%LB = 1
 1255.          s2%dim_2%EX = 0
 1255.          s2%dim_2%SM = 1
 1255.          if ( nspecfields > 0 ) then
 1255.             $SC_spec2d_I22 = spec2d%dim_1%EX
 1255.             $SC_spec2d_I23 = spec2d%dim_1%LB
 1255.             $SC_lmnzero_I20 = lmnzero%dim_1%EX
 1255.             $SC_lmnzero_I21 = lmnzero%dim_1%LB
 1255.             $SC_lmnmap_I18 = lmnmap%dim_1%EX
 1255.             $SC_lmnmap_I19 = lmnmap%dim_1%LB
 1255.             $SC_spec_I11 = spec%dim_1%EX
 1255.             $SC_spec_I12 = spec%dim_1%LB
 1255.             $SC_lmnextmap_I13 = lmnextmap%dim_1%EX
 1255.             $SC_lmnextmap_I14 = lmnextmap%dim_1%LB
 1255.             $SC_spec_I16 = spec%dim_2%SM
 1255.             $SC_spec_I15 = spec%dim_2%EX
 1255.             $SC_spec_I17 = spec%dim_2%LB
 1255.             $SC_prevspec_I9 = prevspec%dim_1%EX
 1255.             $SC_prevspec_I10 = prevspec%dim_1%LB
 1255.             $SC_spec1d_I7 = spec1d%dim_1%EX
 1255.             $SC_spec1d_I8 = spec1d%dim_1%LB
 1255.             $SC_surfspec_I5 = surfspec%dim_1%EX
 1255.             $SC_surfspec_I6 = surfspec%dim_1%LB
 1255.             $I_L1255_268 = 0
 1255. !dir$ loop_info (automatic) cache_nt( surfspec )
 1255.             do
 1255.                if ( (surfspec%base_addr)(1 + $I_L1255_268, 0) /= .false. ) then
 1255.                   s1 = (spec1d%base_addr)(1 + $I_L1255_268, 0)%p
 1255.                   lastv = 1 + (prevspec%base_addr)(1 + $I_L1255_268, 0)
 1255.                   if ( -s1%dim_1%EX + 2 * mymnextmax /= 0 ) then
 1255.                      if ( mnlast + -mnfirst >= 0 ) then
 1255.                         $SC_s1_I45 = s1%dim_1%SM
 1255.                         $SC_s1_I46 = s1%dim_1%LB
 1255.                         $SC_s1_I44 = s1%dim_1%EX
 1255.                         $I_L1255_230 = 0
 1255.                         if ( nvertspec == 0 ) then
 1255.                            do
 1255.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_230, 0), lastv, 0) = (s1%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1255_230, 0)
 1255.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_230, 0), lastv + nvertspec, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1255_230, 0)
 1255.                               $I_L1255_230 = 1 + $I_L1255_230
 1255.                               if ( $I_L1255_230 >= 1 + mnlast + -mnfirst ) exit
 1255.                            enddo
 1255.                         else
 1255. !dir$ ivdep safevl = 4
 1255.                            do
 1255.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_230, 0), lastv, 0) = (s1%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1255_230, 0)
 1255.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_230, 0), lastv + nvertspec, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1255_230, 0)
 1255.                               $I_L1255_230 = 1 + $I_L1255_230
 1255.                               if ( $I_L1255_230 >= 1 + mnlast + -mnfirst ) exit
 1255.                            enddo
 1255.                         endif
 1255.                      endif
 1255.                      if ( mlast + -mfirst >= 0 ) then
 1255.                         $I_L1255_232 = 0
 1255. !dir$ ivdep
 1255.                         do
 1255.                            (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1255_232, 0), lastv, 0) = 0.0
 1255.                            (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1255_232, 0), lastv + nvertspec, 0) = 0.0
 1255.                            $I_L1255_232 = 1 + $I_L1255_232
 1255.                            if ( $I_L1255_232 >= 1 + mlast + -mfirst ) exit
 1255.                         enddo
 1255.                      endif
 1255.                   else if ( mnextlast + -mnextfirst >= 0 ) then
 1255.                      $SC_s1_I45 = s1%dim_1%SM
 1255.                      $SC_s1_I46 = s1%dim_1%LB
 1255.                      $SC_s1_I44 = s1%dim_1%EX
 1255.                      $I_L1255_228 = 0
 1255.                      if ( nvertspec == 0 ) then
 1255.                         do
 1255.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_228, 0), lastv, 0) = (s1%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1255_228, 0)
 1255.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_228, 0), lastv + nvertspec, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1255_228, 0)
 1255.                            $I_L1255_228 = 1 + $I_L1255_228
 1255.                            if ( $I_L1255_228 >= 1 + mnextlast + -mnextfirst ) exit
 1255.                         enddo
 1255.                      else
 1255. !dir$ ivdep safevl = 4
 1255.                         do
 1255.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_228, 0), lastv, 0) = (s1%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1255_228, 0)
 1255.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_228, 0), lastv + nvertspec, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1255_228, 0)
 1255.                            $I_L1255_228 = 1 + $I_L1255_228
 1255.                            if ( $I_L1255_228 >= 1 + mnextlast + -mnextfirst ) exit
 1255.                         enddo
 1255.                      endif
 1255.                   endif
 1255.                else
 1255.                   s2 = (spec2d%base_addr)(1 + $I_L1255_268, 0)%p
 1255.                   lastv = (prevspec%base_addr)(1 + $I_L1255_268, 0)
 1255.                   if ( -s2%dim_1%EX + 2 * mymnextmax == 0 ) then
 1255.                      if ( kmaxloc > 0 ) then
 1255.                         if ( mnextlast + -mnextfirst >= 0 ) then
 1255.                            $SC_s2_I48 = s2%dim_1%SM
 1255.                            $SC_s2_I49 = s2%dim_1%LB
 1255.                            $SC_s2_I51 = s2%dim_2%SM
 1255.                            $SC_s2_I50 = s2%dim_2%EX
 1255.                            $SC_s2_I52 = s2%dim_2%LB
 1255.                            $SC_s2_I47 = s2%dim_1%EX
 1255.                            $I_L1255_260 = 0
 1255.                            do
 1255.                               $I_L1255_238 = 0
 1255.                               if ( nvertspec == 0 ) then
 1255.                                  do
 1255.                                     (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_238, 0), 1 + lastv + $I_L1255_260, 0) = (s2%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1255_238, 1 + $I_L1255_260, 0)
 1255.                                     (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_238, 0), 1 + lastv + nvertspec + $I_L1255_260, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1255_238, 1 + $I_L1255_260, 0)
 1255.                                     $I_L1255_238 = 1 + $I_L1255_238
 1255.                                     if ( $I_L1255_238 >= 1 + mnextlast + -mnextfirst ) exit
 1255.                                  enddo
 1255.                               else
 1255. !dir$ ivdep safevl = 4
 1255.                                  do
 1255.                                     (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_238, 0), 1 + lastv + $I_L1255_260, 0) = (s2%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1255_238, 1 + $I_L1255_260, 0)
 1255.                                     (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1255_238, 0), 1 + lastv + nvertspec + $I_L1255_260, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1255_238, 1 + $I_L1255_260, 0)
 1255.                                     $I_L1255_238 = 1 + $I_L1255_238
 1255.                                     if ( $I_L1255_238 >= 1 + mnextlast + -mnextfirst ) exit
 1255.                                  enddo
 1255.                               endif
 1255.                               $I_L1255_260 = 1 + $I_L1255_260
 1255.                               if ( $I_L1255_260 >= kmaxloc ) exit
 1255.                            enddo
 1255.                         endif
 1255.                      endif
 1255.                   else if ( kmaxloc > 0 ) then
 1255.                      if ( mnlast + -mnfirst >= 0 ) then
 1255.                         $SC_s2_I48 = s2%dim_1%SM
 1255.                         $SC_s2_I49 = s2%dim_1%LB
 1255.                         $SC_s2_I51 = s2%dim_2%SM
 1255.                         $SC_s2_I50 = s2%dim_2%EX
 1255.                         $SC_s2_I52 = s2%dim_2%LB
 1255.                         $SC_s2_I47 = s2%dim_1%EX
 1255.                         $I_L1255_256 = 0
 1255.                         do
 1255.                            $I_L1255_234 = 0
 1255.                            if ( nvertspec == 0 ) then
 1255.                               do
 1255.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_234, 0), 1 + lastv + $I_L1255_256, 0) = (s2%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1255_234, 1 + $I_L1255_256, 0)
 1255.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_234, 0), 1 + lastv + nvertspec + $I_L1255_256, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1255_234, 1 + $I_L1255_256, 0)
 1255.                                  $I_L1255_234 = 1 + $I_L1255_234
 1255.                                  if ( $I_L1255_234 >= 1 + mnlast + -mnfirst ) exit
 1255.                               enddo
 1255.                            else
 1255. !dir$ ivdep safevl = 4
 1255.                               do
 1255.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_234, 0), 1 + lastv + $I_L1255_256, 0) = (s2%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1255_234, 1 + $I_L1255_256, 0)
 1255.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1255_234, 0), 1 + lastv + nvertspec + $I_L1255_256, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1255_234, 1 + $I_L1255_256, 0)
 1255.                                  $I_L1255_234 = 1 + $I_L1255_234
 1255.                                  if ( $I_L1255_234 >= 1 + mnlast + -mnfirst ) exit
 1255.                               enddo
 1255.                            endif
 1255.                            $I_L1255_256 = 1 + $I_L1255_256
 1255.                            if ( $I_L1255_256 >= kmaxloc ) exit
 1255.                         enddo
 1255.                      endif
 1255.                      if ( mlast + -mfirst >= 0 ) then
 1255.                         $I_L1255_258 = 0
 1255.                         do
 1255.                            $I_L1255_236 = 0
 1255. !dir$ ivdep
 1255.                            do
 1255.                               (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1255_236, 0), 1 + lastv + $I_L1255_258, 0) = 0.0
 1255.                               (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1255_236, 0), 1 + lastv + nvertspec + $I_L1255_258, 0) = 0.0
 1255.                               $I_L1255_236 = 1 + $I_L1255_236
 1255.                               if ( $I_L1255_236 >= 1 + mlast + -mfirst ) exit
 1255.                            enddo
 1255.                            $I_L1255_258 = 1 + $I_L1255_258
 1255.                            if ( $I_L1255_258 >= kmaxloc ) exit
 1255.                         enddo
 1255.                      endif
 1255.                   endif
 1255.                endif
 1255.                $I_L1255_268 = 1 + $I_L1255_268
 1255.                if ( $I_L1255_268 >= nspecfields ) exit
 1255.             enddo
 1255.          endif
 1255.          if ( dlmn + -mymnextmax > 0 ) then
 1255.             $SC_spec_I11 = spec%dim_1%EX
 1255.             $SC_spec_I12 = spec%dim_1%LB
 1255.             $SC_spec_I16 = spec%dim_2%SM
 1255.             $SC_spec_I15 = spec%dim_2%EX
 1255.             $SC_spec_I17 = spec%dim_2%LB
 1255.             $I_L1255_262 = 0
 1255.             do
 1255.                $F_A33 = $SC_spec_I15
 1255.                if ( $SC_spec_I15 > 0 ) then
 1255.                   $I_L1255_242 = 0
 1255. !dir$ ivdep
 1255.                   do
 1255.                      (spec%base_addr)(1 + mymnextmax + $I_L1255_262, $SC_spec_I17 + $I_L1255_242, 0) = 0.0
 1255.                      $I_L1255_242 = 1 + $I_L1255_242
 1255.                      if ( $I_L1255_242 >= $F_A33 ) exit
 1255.                   enddo
 1255.                endif
 1255.                $I_L1255_262 = 1 + $I_L1255_262
 1255.                if ( $I_L1255_262 >= ( dlmn + -mymnextmax ) ) exit
 1255.             enddo
 1255.          endif
 1255.          if ( dv + -2 * nvertspec > 0 ) then
 1255.             $SC_spec_I11 = spec%dim_1%EX
 1255.             $SC_spec_I12 = spec%dim_1%LB
 1255.             $SC_spec_I16 = spec%dim_2%SM
 1255.             $SC_spec_I15 = spec%dim_2%EX
 1255.             $SC_spec_I17 = spec%dim_2%LB
 1255.             $I_L1255_264 = 0
 1255.             do
 1255.                $F_A34 = $SC_spec_I11
 1255.                if ( $SC_spec_I11 > 0 ) then
 1255.                   $I_L1255_244 = 0
 1255. !dir$ ivdep
 1255.                   do
 1255.                      (spec%base_addr)($SC_spec_I12 + $I_L1255_244, 1 + $I_L1255_264 + 2 * nvertspec, 0) = 0.0
 1255.                      $I_L1255_244 = 1 + $I_L1255_244
 1255.                      if ( $I_L1255_244 >= $F_A34 ) exit
 1255.                   enddo
 1255.                endif
 1255.                $I_L1255_264 = 1 + $I_L1255_264
 1255.                if ( $I_L1255_264 >= ( dv + -2 * nvertspec ) ) exit
 1255.             enddo
 1255.          endif
 1258.          _mt_barrier( 1, _mt_rw_list(...) )
 1260.          call spectofour
 1264.          if ( willdellam /= .false. ) then
 1265.              _substr(t$619,1,12) = 'DoSpecToGrid'
 1265.             call threaddecomp( 1, mmax, mfirst, mlast,  _substr(t$619,1,12) )
 1266.             if ( mlast + -mfirst >= 0 ) then
 1266.                $SC_surfgrid_I30 = surfgrid%dim_1%EX
 1266.                $SC_surfgrid_I31 = surfgrid%dim_1%LB
 1266.                $SC_prevgrid_I28 = prevgrid%dim_1%EX
 1266.                $SC_prevgrid_I29 = prevgrid%dim_1%LB
 1266.                $SC_prevvertdellamsource_I26 = prevvertdellamsource%dim_1%EX
 1266.                $SC_prevvertdellamsource_I27 = prevvertdellamsource%dim_1%LB
 1266.                $SC_fieldfordellam_I24 = fieldfordellam%dim_1%EX
 1266.                $SC_fieldfordellam_I25 = fieldfordellam%dim_1%LB
 1266.                $SC_four_I0 = four%dim_1%EX
 1266.                $SC_four_I1 = four%dim_1%LB
 1266.                $SC_four_I3 = four%dim_2%SM
 1266.                $SC_four_I2 = four%dim_2%EX
 1266.                $SC_four_I4 = four%dim_2%LB
 1266.                if ( ngridfields > 0 ) then
 1266.                   if ( myjmax_f > 0 ) then
 1266.                      $I_L1266_274 = 0
 1266.                      do
 1266.                         consim = 1.5698587127158556e-7 * real( -1 + mfirst + $I_L1266_274, 8 )
 1266.                         consre = -( 1.5698587127158556e-7 * real( -1 + mfirst + $I_L1266_274, 8 ) )
 1266.                         $I_L1266_270 = 0
 1266.                         do
 1266.                            if ( (fieldfordellam%base_addr)(1 + $I_L1266_270, 0) /= .false. ) then
 1266.                               vbasefrom = (prevvertdellamsource%base_addr)(1 + $I_L1266_270, 0)
 1266.                               vbaseto = (prevgrid%base_addr)(1 + $I_L1266_270, 0)
 1266.                               vmax = cvmg( havesurf /= 0, kmaxloc, (surfgrid%base_addr)(1 + $I_L1266_270, 0) )
 1266.                               if ( vmax > 0 ) then
 1266.                                  $I_L1266_266 = 0
 1266.                                  do
 1266.                                     $I_L1266_240 = 0
 1266.                                     $CSVL_V0 = cvmg( ( vbaseto + -vbasefrom ) / nvertgrid, 2, and( mod( vbaseto + -vbasefrom, nvertgrid ) == 0 .and. abs( ( vbaseto + -vbasefrom ) / nvertgrid ) <= -1 + myjmax_f, and( ( vbaseto + -vbasefrom ) / nvertgrid > 0, ( vbaseto + -vbasefrom ) / nvertgrid <= 2 ) ) )
 1266.                                     if ( $CSVL_V0 <= 4 ) then
 1266.                                        do
 1266.                                           auxre = consim * (four%base_addr)(1 + vbasefrom + $I_L1266_266 + nvertgrid * $I_L1266_240, -1 + 2 * mfirst + 2 * $I_L1266_274, 0)
 1266.                                           (four%base_addr)(1 + vbaseto + $I_L1266_266 + nvertgrid * $I_L1266_240, -1 + 2 * mfirst + 2 * $I_L1266_274, 0) = consre * (four%base_addr)(1 + vbasefrom + $I_L1266_266 + nvertgrid * $I_L1266_240, 2 * mfirst + 2 * $I_L1266_274, 0)
 1266.                                           (four%base_addr)(1 + vbaseto + $I_L1266_266 + nvertgrid * $I_L1266_240, 2 * mfirst + 2 * $I_L1266_274, 0) = auxre
 1266.                                           $I_L1266_240 = 1 + $I_L1266_240
 1266.                                           if ( $I_L1266_240 >= myjmax_f ) exit
 1266.                                        enddo
 1266.                                     else
 1266. !dir$ ivdep safevl = $CSVL_V0 !   Guaranteed minimum :: 4
 1266.                                        do
 1266.                                           auxre = consim * (four%base_addr)(1 + vbasefrom + $I_L1266_266 + nvertgrid * $I_L1266_240, -1 + 2 * mfirst + 2 * $I_L1266_274, 0)
 1266.                                           (four%base_addr)(1 + vbaseto + $I_L1266_266 + nvertgrid * $I_L1266_240, -1 + 2 * mfirst + 2 * $I_L1266_274, 0) = consre * (four%base_addr)(1 + vbasefrom + $I_L1266_266 + nvertgrid * $I_L1266_240, 2 * mfirst + 2 * $I_L1266_274, 0)
 1266.                                           (four%base_addr)(1 + vbaseto + $I_L1266_266 + nvertgrid * $I_L1266_240, 2 * mfirst + 2 * $I_L1266_274, 0) = auxre
 1266.                                           $I_L1266_240 = 1 + $I_L1266_240
 1266.                                           if ( $I_L1266_240 >= myjmax_f ) exit
 1266.                                        enddo
 1266.                                     endif
 1266.                                     $I_L1266_266 = 1 + $I_L1266_266
 1266.                                     if ( $I_L1266_266 >= vmax ) exit
 1266.                                  enddo
 1266.                               endif
 1266.                            endif
 1266.                            $I_L1266_270 = 1 + $I_L1266_270
 1266.                            if ( $I_L1266_270 >= ngridfields ) exit
 1266.                         enddo
 1266.                         $I_L1266_274 = 1 + $I_L1266_274
 1266.                         if ( $I_L1266_274 >= 1 + mlast + -mfirst ) exit
 1266.                      enddo
 1266.                   endif
 1266.                endif
 1266.             endif
 1266.          endif
 1270.          _mt_barrier( 2, _mt_rw_list(...) )
 1272.          $t_S19 = nblockfft
 1272.          if ( nblockfft > 0 ) then
 1272.             $I_L1272_272 = 0
 1272.             do
 1273.                p%header%a_contig = 0
 1273.                p%header%assoc = 1
 1273.                p%header%d_type_idx = t$191
 1273.                p%header%ptr_alloc = blockfft%header%ptr_alloc
 1273.                p%header%orig_base = blockfft%header%orig_base
 1273.                p%header%orig_size = blockfft%header%orig_size
 1273.                p%base_addr = loc( (blockfft%base_addr)(1 + $I_L1272_272, 0) )
 1274.                first = 1 + -nvertgrid + nvertgrid * (blockfft%base_addr)(1 + $I_L1272_272, 0)%firstlat
 1275.                last = nvertgrid * (blockfft%base_addr)(1 + $I_L1272_272, 0)%lastlat
 1276.                 _substr(t$623,1,12) = 'DoSpecToGrid'
 1276.                call threaddecomp( first, last, fftfirst, fftlast,  _substr(t$623,1,12) )
 1277.                fftsize = 1 + fftlast + -fftfirst
 1279.                if ( tamblock == 0 ) then
 1281.                   t$625 = 0
 1281.                   t$628 = 0
 1281.                   if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1281. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1281.                      t$624 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1281.                   else
 1281.                      t$625 = (p%base_addr)(0)%trigs%dim_1%EX
 1281.                      t$628 = int( _alloc( max( 0, 8 * max( 0, t$625 ) ) ), 8 )
 1281.                      $F_A35 = t$625
 1281.                      if ( t$625 > 0 ) then
 1281.                         $SCA_p_I32 = (p%base_addr)(0)%trigs%dim_1%SM
 1281.                         $SCA_p_I33 = (p%base_addr)(0)%trigs%dim_1%LB
 1281.                         $SCA_p_I34 = (p%base_addr)(0)%trigs%dim_1%EX
 1281.                         $I_L1281_246 = 0
 1281. !dir$ ivdep
 1281.                         do
 1281.                            t$627(1 + $I_L1281_246) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I33 + $I_L1281_246, 0)
 1281.                            $I_L1281_246 = 1 + $I_L1281_246
 1281.                            if ( $I_L1281_246 >= $F_A35 ) exit
 1281.                         enddo
 1281.                      endif
 1281. !dir$ suppress t$627
 1281.                      t$624 = loc( t$627 )
 1281.                   endif
 1281.                   t$630 = 0
 1281.                   t$633 = 0
 1281.                   if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1281. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1281.                      t$629 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1281.                   else
 1281.                      t$630 = (p%base_addr)(0)%factors%dim_1%EX
 1281.                      t$633 = int( _alloc( max( 0, 4 * max( 0, t$630 ) ) ), 8 )
 1281.                      $F_A36 = t$630
 1281.                      if ( t$630 > 0 ) then
 1281.                         $SCA_p_I35 = (p%base_addr)(0)%factors%dim_1%SM
 1281.                         $SCA_p_I36 = (p%base_addr)(0)%factors%dim_1%LB
 1281.                         $SCA_p_I37 = (p%base_addr)(0)%factors%dim_1%EX
 1281.                         $I_L1281_248 = 0
 1281. !dir$ ivdep
 1281.                         do
 1281.                            t$632(1 + $I_L1281_248) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I36 + $I_L1281_248, 0)
 1281.                            $I_L1281_248 = 1 + $I_L1281_248
 1281.                            if ( $I_L1281_248 >= $F_A36 ) exit
 1281.                         enddo
 1281.                      endif
 1281. !dir$ suppress t$632
 1281.                      t$629 = loc( t$632 )
 1281.                   endif
 1280.                   call invffttrans( (four%base_addr)(fftfirst, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, fftsize, t$624, (p%base_addr)(0)%ntrigs, t$629, (p%base_addr)(0)%nfactors )
 1281.                   if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1281.                      _free( t$633 )
 1281.                   endif
 1281.                   if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1281.                      _free( t$628 )
 1281.                   endif
 1281.                else
 1283.                   firstblock = fftfirst
 1283.                   do
 1286.                      sizeblock = 1 + min( fftlast, -1 + tamblock + firstblock ) + -firstblock
 1288.                      t$635 = 0
 1288.                      t$638 = 0
 1288.                      if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1288. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1288.                         t$634 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1288.                      else
 1288.                         t$635 = (p%base_addr)(0)%trigs%dim_1%EX
 1288.                         t$638 = int( _alloc( max( 0, 8 * max( 0, t$635 ) ) ), 8 )
 1288.                         $F_A37 = t$635
 1288.                         if ( t$635 > 0 ) then
 1288.                            $SCA_p_I38 = (p%base_addr)(0)%trigs%dim_1%SM
 1288.                            $SCA_p_I39 = (p%base_addr)(0)%trigs%dim_1%LB
 1288.                            $SCA_p_I40 = (p%base_addr)(0)%trigs%dim_1%EX
 1288.                            $I_L1288_250 = 0
 1288. !dir$ ivdep
 1288.                            do
 1288.                               t$637(1 + $I_L1288_250) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I39 + $I_L1288_250, 0)
 1288.                               $I_L1288_250 = 1 + $I_L1288_250
 1288.                               if ( $I_L1288_250 >= $F_A37 ) exit
 1288.                            enddo
 1288.                         endif
 1288. !dir$ suppress t$637
 1288.                         t$634 = loc( t$637 )
 1288.                      endif
 1288.                      t$640 = 0
 1288.                      t$643 = 0
 1288.                      if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1288. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1288.                         t$639 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1288.                      else
 1288.                         t$640 = (p%base_addr)(0)%factors%dim_1%EX
 1288.                         t$643 = int( _alloc( max( 0, 4 * max( 0, t$640 ) ) ), 8 )
 1288.                         $F_A38 = t$640
 1288.                         if ( t$640 > 0 ) then
 1288.                            $SCA_p_I41 = (p%base_addr)(0)%factors%dim_1%SM
 1288.                            $SCA_p_I42 = (p%base_addr)(0)%factors%dim_1%LB
 1288.                            $SCA_p_I43 = (p%base_addr)(0)%factors%dim_1%EX
 1288.                            $I_L1288_252 = 0
 1288. !dir$ ivdep
 1288.                            do
 1288.                               t$642(1 + $I_L1288_252) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I42 + $I_L1288_252, 0)
 1288.                               $I_L1288_252 = 1 + $I_L1288_252
 1288.                               if ( $I_L1288_252 >= $F_A38 ) exit
 1288.                            enddo
 1288.                         endif
 1288. !dir$ suppress t$642
 1288.                         t$639 = loc( t$642 )
 1288.                      endif
 1287.                      call invffttrans( (four%base_addr)(firstblock, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, sizeblock, t$634, (p%base_addr)(0)%ntrigs, t$639, (p%base_addr)(0)%nfactors )
 1288.                      if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1288.                         _free( t$643 )
 1288.                      endif
 1288.                      if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1288.                         _free( t$638 )
 1288.                      endif
 1289.                      firstblock = tamblock + firstblock
 1289.                      if ( firstblock > fftlast ) exit
 1289.                   enddo
 1289.                endif
 1296.                $I_L1272_272 = 1 + $I_L1272_272
 1294.                if ( $I_L1272_272 >= $t_S19 ) exit
 1294.             enddo
 1294.          endif
 1294.       endif
 1299.       _mt_barrier( 3, _mt_rw_list(...) )
 1303.       call withdrawgrid
 1304.       return
 1304.       end
 1304.       
 1322.       
 1322.       subroutine depositspec( mnfirst, mnlast, mnextfirst, mnextlast, mfirst, mlast )
 1323.       s1 = $_StaticDV_P0
 1323.       s1%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1323.       s1%dim_1%LB = 1
 1323.       s1%dim_1%EX = 0
 1323.       s1%dim_1%SM = 1
 1311.       s2 = $_StaticDV_P1
 1311.       s2%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 1311.       s2%dim_1%LB = 1
 1311.       s2%dim_1%EX = 0
 1311.       s2%dim_1%SM = 1
 1311.       s2%dim_2%LB = 1
 1311.       s2%dim_2%EX = 0
 1311.       s2%dim_2%SM = 1
 1325.       if ( nspecfields > 0 ) then
 1350.          $SC_spec2d_I17 = spec2d%dim_1%EX
 1350.          $SC_spec2d_I18 = spec2d%dim_1%LB
 1344.          $SC_lmnzero_I15 = lmnzero%dim_1%EX
 1344.          $SC_lmnzero_I16 = lmnzero%dim_1%LB
 1339.          $SC_lmnmap_I13 = lmnmap%dim_1%EX
 1339.          $SC_lmnmap_I14 = lmnmap%dim_1%LB
 1333.          $SC_spec_I6 = spec%dim_1%EX
 1333.          $SC_spec_I7 = spec%dim_1%LB
 1333.          $SC_lmnextmap_I8 = lmnextmap%dim_1%EX
 1333.          $SC_lmnextmap_I9 = lmnextmap%dim_1%LB
 1333.          $SC_spec_I11 = spec%dim_2%SM
 1333.          $SC_spec_I10 = spec%dim_2%EX
 1333.          $SC_spec_I12 = spec%dim_2%LB
 1329.          $SC_prevspec_I4 = prevspec%dim_1%EX
 1329.          $SC_prevspec_I5 = prevspec%dim_1%LB
 1328.          $SC_spec1d_I2 = spec1d%dim_1%EX
 1328.          $SC_spec1d_I3 = spec1d%dim_1%LB
 1327.          $SC_surfspec_I0 = surfspec%dim_1%EX
 1327.          $SC_surfspec_I1 = surfspec%dim_1%LB
 1325.          $I_L1325_112 = 0
 1325. !dir$ loop_info (automatic) cache_nt( surfspec )
 1325.          do
 1327.             if ( (surfspec%base_addr)(1 + $I_L1325_112, 0) /= .false. ) then
 1328.                s1 = (spec1d%base_addr)(1 + $I_L1325_112, 0)%p
 1329.                $lastv_S2 = 1 + (prevspec%base_addr)(1 + $I_L1325_112, 0)
 1330.                if ( -s1%dim_1%EX + 2 * mymnextmax /= 0 ) then
 1338.                   if ( mnlast + -mnfirst >= 0 ) then
 1339.                      $SC_s1_I20 = s1%dim_1%SM
 1339.                      $SC_s1_I21 = s1%dim_1%LB
 1339.                      $SC_s1_I19 = s1%dim_1%EX
 1338.                      $I_L1338_88 = 0
 1338.                      if ( nvertspec == 0 ) then
 1338.                         do
 1339.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1338_88, 0), $lastv_S2, 0) = (s1%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1338_88, 0)
 1340.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1338_88, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1338_88, 0)
 1341.                            $I_L1338_88 = 1 + $I_L1338_88
 1338.                            if ( $I_L1338_88 >= 1 + mnlast + -mnfirst ) exit
 1338.                         enddo
 1338.                      else
 1338. !dir$ ivdep safevl = 4
 1338.                         do
 1339.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1338_88, 0), $lastv_S2, 0) = (s1%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1338_88, 0)
 1340.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1338_88, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1338_88, 0)
 1341.                            $I_L1338_88 = 1 + $I_L1338_88
 1338.                            if ( $I_L1338_88 >= 1 + mnlast + -mnfirst ) exit
 1338.                         enddo
 1338.                      endif
 1338.                   endif
 1343.                   if ( mlast + -mfirst >= 0 ) then
 1343.                      $I_L1343_90 = 0
 1343. !dir$ ivdep
 1343.                      do
 1344.                         (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1343_90, 0), $lastv_S2, 0) = 0.0
 1345.                         (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1343_90, 0), nvertspec + $lastv_S2, 0) = 0.0
 1346.                         $I_L1343_90 = 1 + $I_L1343_90
 1343.                         if ( $I_L1343_90 >= 1 + mlast + -mfirst ) exit
 1343.                      enddo
 1343.                   endif
 1332.                else if ( mnextlast + -mnextfirst >= 0 ) then
 1333.                   $SC_s1_I20 = s1%dim_1%SM
 1333.                   $SC_s1_I21 = s1%dim_1%LB
 1333.                   $SC_s1_I19 = s1%dim_1%EX
 1332.                   $I_L1332_86 = 0
 1332.                   if ( nvertspec == 0 ) then
 1332.                      do
 1333.                         (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1332_86, 0), $lastv_S2, 0) = (s1%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1332_86, 0)
 1334.                         (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1332_86, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1332_86, 0)
 1335.                         $I_L1332_86 = 1 + $I_L1332_86
 1332.                         if ( $I_L1332_86 >= 1 + mnextlast + -mnextfirst ) exit
 1332.                      enddo
 1332.                   else
 1332. !dir$ ivdep safevl = 4
 1332.                      do
 1333.                         (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1332_86, 0), $lastv_S2, 0) = (s1%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1332_86, 0)
 1334.                         (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1332_86, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1332_86, 0)
 1335.                         $I_L1332_86 = 1 + $I_L1332_86
 1332.                         if ( $I_L1332_86 >= 1 + mnextlast + -mnextfirst ) exit
 1332.                      enddo
 1332.                   endif
 1332.                endif
 1332.             else
 1350.                s2 = (spec2d%base_addr)(1 + $I_L1325_112, 0)%p
 1351.                $lastv_S7 = (prevspec%base_addr)(1 + $I_L1325_112, 0)
 1352.                if ( -s2%dim_1%EX + 2 * mymnextmax == 0 ) then
 1353.                   if ( kmaxloc > 0 ) then
 1355.                      if ( mnextlast + -mnextfirst >= 0 ) then
 1356.                         $SC_s2_I23 = s2%dim_1%SM
 1356.                         $SC_s2_I24 = s2%dim_1%LB
 1356.                         $SC_s2_I26 = s2%dim_2%SM
 1356.                         $SC_s2_I25 = s2%dim_2%EX
 1356.                         $SC_s2_I27 = s2%dim_2%LB
 1356.                         $SC_s2_I22 = s2%dim_1%EX
 1353.                         $I_L1353_106 = 0
 1353.                         do
 1355.                            $I_L1355_96 = 0
 1355.                            if ( nvertspec == 0 ) then
 1355.                               do
 1356.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1355_96, 0), 1 + $lastv_S7 + $I_L1353_106, 0) = (s2%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1355_96, 1 + $I_L1353_106, 0)
 1357.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1355_96, 0), 1 + nvertspec + $lastv_S7 + $I_L1353_106, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1355_96, 1 + $I_L1353_106, 0)
 1358.                                  $I_L1355_96 = 1 + $I_L1355_96
 1355.                                  if ( $I_L1355_96 >= 1 + mnextlast + -mnextfirst ) exit
 1355.                               enddo
 1355.                            else
 1355. !dir$ ivdep safevl = 4
 1355.                               do
 1356.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1355_96, 0), 1 + $lastv_S7 + $I_L1353_106, 0) = (s2%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1355_96, 1 + $I_L1353_106, 0)
 1357.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1355_96, 0), 1 + nvertspec + $lastv_S7 + $I_L1353_106, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1355_96, 1 + $I_L1353_106, 0)
 1358.                                  $I_L1355_96 = 1 + $I_L1355_96
 1355.                                  if ( $I_L1355_96 >= 1 + mnextlast + -mnextfirst ) exit
 1355.                               enddo
 1355.                            endif
 1359.                            $I_L1353_106 = 1 + $I_L1353_106
 1358.                            if ( $I_L1353_106 >= kmaxloc ) exit
 1358.                         enddo
 1358.                      endif
 1358.                   endif
 1360.                else if ( kmaxloc > 0 ) then
 1363.                   if ( mnlast + -mnfirst >= 0 ) then
 1364.                      $SC_s2_I23 = s2%dim_1%SM
 1364.                      $SC_s2_I24 = s2%dim_1%LB
 1364.                      $SC_s2_I26 = s2%dim_2%SM
 1364.                      $SC_s2_I25 = s2%dim_2%EX
 1364.                      $SC_s2_I27 = s2%dim_2%LB
 1364.                      $SC_s2_I22 = s2%dim_1%EX
 1361.                      $I_L1361_102 = 0
 1361.                      do
 1363.                         $I_L1363_92 = 0
 1363.                         if ( nvertspec == 0 ) then
 1363.                            do
 1364.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1363_92, 0), 1 + $lastv_S7 + $I_L1361_102, 0) = (s2%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1363_92, 1 + $I_L1361_102, 0)
 1365.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1363_92, 0), 1 + nvertspec + $lastv_S7 + $I_L1361_102, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1363_92, 1 + $I_L1361_102, 0)
 1366.                               $I_L1363_92 = 1 + $I_L1363_92
 1363.                               if ( $I_L1363_92 >= 1 + mnlast + -mnfirst ) exit
 1363.                            enddo
 1363.                         else
 1363. !dir$ ivdep safevl = 4
 1363.                            do
 1364.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1363_92, 0), 1 + $lastv_S7 + $I_L1361_102, 0) = (s2%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1363_92, 1 + $I_L1361_102, 0)
 1365.                               (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1363_92, 0), 1 + nvertspec + $lastv_S7 + $I_L1361_102, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1363_92, 1 + $I_L1361_102, 0)
 1366.                               $I_L1363_92 = 1 + $I_L1363_92
 1363.                               if ( $I_L1363_92 >= 1 + mnlast + -mnfirst ) exit
 1363.                            enddo
 1363.                         endif
 1367.                         $I_L1361_102 = 1 + $I_L1361_102
 1366.                         if ( $I_L1361_102 >= kmaxloc ) exit
 1366.                      enddo
 1366.                   endif
 1370.                   if ( mlast + -mfirst >= 0 ) then
 1368.                      $I_L1368_104 = 0
 1368.                      do
 1370.                         $I_L1370_94 = 0
 1370. !dir$ ivdep
 1370.                         do
 1371.                            (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1370_94, 0), 1 + $lastv_S7 + $I_L1368_104, 0) = 0.0
 1372.                            (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1370_94, 0), 1 + nvertspec + $lastv_S7 + $I_L1368_104, 0) = 0.0
 1373.                            $I_L1370_94 = 1 + $I_L1370_94
 1370.                            if ( $I_L1370_94 >= 1 + mlast + -mfirst ) exit
 1370.                         enddo
 1374.                         $I_L1368_104 = 1 + $I_L1368_104
 1373.                         if ( $I_L1368_104 >= kmaxloc ) exit
 1373.                      enddo
 1373.                   endif
 1373.                endif
 1373.             endif
 1377.             $I_L1325_112 = 1 + $I_L1325_112
 1376.             if ( $I_L1325_112 >= nspecfields ) exit
 1376.          enddo
 1376.       endif
 1379.       if ( dlmn + -mymnextmax > 0 ) then
 1380.          $SC_spec_I6 = spec%dim_1%EX
 1380.          $SC_spec_I7 = spec%dim_1%LB
 1380.          $SC_spec_I11 = spec%dim_2%SM
 1380.          $SC_spec_I10 = spec%dim_2%EX
 1380.          $SC_spec_I12 = spec%dim_2%LB
 1379.          $I_L1379_108 = 0
 1379.          do
 1380.             $F_A33 = $SC_spec_I10
 1380.             if ( $SC_spec_I10 > 0 ) then
 1380.                $I_L1380_98 = 0
 1380. !dir$ ivdep
 1380.                do
 1380.                   (spec%base_addr)(1 + mymnextmax + $I_L1379_108, $SC_spec_I12 + $I_L1380_98, 0) = 0.0
 1380.                   $I_L1380_98 = 1 + $I_L1380_98
 1380.                   if ( $I_L1380_98 >= $F_A33 ) exit
 1380.                enddo
 1380.             endif
 1381.             $I_L1379_108 = 1 + $I_L1379_108
 1379.             if ( $I_L1379_108 >= ( dlmn + -mymnextmax ) ) exit
 1379.          enddo
 1379.       endif
 1382.       if ( dv + -2 * nvertspec > 0 ) then
 1383.          $SC_spec_I6 = spec%dim_1%EX
 1383.          $SC_spec_I7 = spec%dim_1%LB
 1383.          $SC_spec_I11 = spec%dim_2%SM
 1383.          $SC_spec_I10 = spec%dim_2%EX
 1383.          $SC_spec_I12 = spec%dim_2%LB
 1382.          $I_L1382_110 = 0
 1382.          do
 1383.             $F_A34 = $SC_spec_I6
 1383.             if ( $SC_spec_I6 > 0 ) then
 1383.                $I_L1383_100 = 0
 1383. !dir$ ivdep
 1383.                do
 1383.                   (spec%base_addr)($SC_spec_I7 + $I_L1383_100, 1 + $I_L1382_110 + 2 * nvertspec, 0) = 0.0
 1383.                   $I_L1383_100 = 1 + $I_L1383_100
 1383.                   if ( $I_L1383_100 >= $F_A34 ) exit
 1383.                enddo
 1383.             endif
 1384.             $I_L1382_110 = 1 + $I_L1382_110
 1382.             if ( $I_L1382_110 >= ( dv + -2 * nvertspec ) ) exit
 1382.          enddo
 1382.       endif
 1385.       return
 1385.       end
 1385.       
 1537.       
 1537.       subroutine spectofour
 1391.       t$112 = dv
 1391.       t$113 = djh
 1414.       t$214 = _zla( 0, dv )
 1391.       t$215 = _zla( 0, dv )
 1414.       t$216 = _zla( 0, djh )
 1391.       t$217 = _zla( 0, dv ) * _zla( 0, djh )
 1414.       t$220 = 8 * _zla( 0, dv ) * _zla( 0, djh )
 1415.       t$221 = 8 * ( 7 + 8 * _zla( 0, dv ) * _zla( 0, djh ) ) / 8
 1415.       t$223 = t$221 + 8 * _zla( 0, dv ) * _zla( 0, djh )
 1391.       t$218 = int( _alloc( t$221 + 8 * _zla( 0, dv ) * _zla( 0, djh ) ), 8 )
 1414.       t$219 = t$218
 1415.       t$222 = t$221 + t$218
 1418.        _substr(t$688,1,10) = 'SpecToFour'
 1418.       call threaddecomp( 1, myjmax_f, jfirst, jlast,  _substr(t$688,1,10) )
 1419.       kdim = 2 * myjmax_f * nvertspec * mmaxlocal
 1420.       ldim = 2 * nvertspec * jmaxlocal_f * mymmax
 1421.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 1422.       mglob = 0
 1423.       if ( dimsendbuf < 2 * nvertspec * jmaxlocal_f * mymmax * maxnodes_four ) then
 1424.          dimsendbuf = 2 * nvertspec * jmaxlocal_f * mymmax * maxnodes_four
 1425.          $_allo_P0(0) = 0x1000000000001L
 1425.          $_allo_P0(1) = loc( bufsend )
 1425.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1425.          bufsend%header%assoc = 0
 1426.          bufsend%header%a_contig = 1
 1426.          bufsend%dim_1%LB = 1
 1426.          bufsend%dim_1%EX = _zla( 0, ( 2 * nvertspec * jmaxlocal_f * mymmax * maxnodes_four ) )
 1426.          bufsend%dim_1%SM = 1
 1426.          $_allo_P1(0) = 0x1000000000001L
 1426.          $_allo_P1(1) = loc( bufsend )
 1426.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1426.       endif
 1428.       if ( dimrecbuf < 2 * myjmax_f * nvertspec * mmaxlocal * maxnodes_four ) then
 1429.          dimrecbuf = 2 * myjmax_f * nvertspec * mmaxlocal * maxnodes_four
 1430.          $_allo_P2(0) = 0x1000000000001L
 1430.          $_allo_P2(1) = loc( bufrec )
 1430.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1430.          bufrec%header%assoc = 0
 1431.          bufrec%header%a_contig = 1
 1431.          bufrec%dim_1%LB = 1
 1431.          bufrec%dim_1%EX = _zla( 0, ( 2 * myjmax_f * nvertspec * mmaxlocal * maxnodes_four ) )
 1431.          bufrec%dim_1%SM = 1
 1431.          $_allo_P3(0) = 0x1000000000001L
 1431.          $_allo_P3(1) = loc( bufrec )
 1431.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1431.       endif
 1433.       $F_A33 = bufsend%dim_1%EX
 1433.       if ( bufsend%dim_1%EX > 0 ) then
 1433.          $SC_bufsend_I50 = bufsend%dim_1%EX
 1433.          $SC_bufsend_I51 = bufsend%dim_1%LB
 1433.          $I_L1433_258 = 0
 1433. !dir$ ivdep
 1433.          do
 1433.             (bufsend%base_addr)($SC_bufsend_I51 + $I_L1433_258, 0) = 0.0
 1433.             $I_L1433_258 = 1 + $I_L1433_258
 1433.             if ( $I_L1433_258 >= $F_A33 ) exit
 1433.          enddo
 1433.       endif
 1434.       $F_A34 = bufrec%dim_1%EX
 1434.       if ( bufrec%dim_1%EX > 0 ) then
 1434.          $SC_bufrec_I52 = bufrec%dim_1%EX
 1434.          $SC_bufrec_I53 = bufrec%dim_1%LB
 1434.          $I_L1434_260 = 0
 1434. !dir$ ivdep
 1434. !dir$ loop_info (automatic) cache_nt( bufrec )
 1434.          do
 1434.             (bufrec%base_addr)($SC_bufrec_I53 + $I_L1434_260, 0) = 0.0
 1434.             $I_L1434_260 = 1 + $I_L1434_260
 1434.             if ( $I_L1434_260 >= $F_A34 ) exit
 1434.          enddo
 1434.       endif
 1435.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 1464.       $SC_nlatsinproc_I24 = nlatsinproc_f%dim_1%EX
 1464.       $SC_nlatsinproc_I25 = nlatsinproc_f%dim_1%LB
 1464.       $SC_firstlatinproc_I26 = firstlatinproc_f%dim_1%EX
 1464.       $SC_firstlatinproc_I27 = firstlatinproc_f%dim_1%LB
 1462.       $SC_nodehasj_I22 = nodehasj_f%dim_1%EX
 1462.       $SC_nodehasj_I23 = nodehasj_f%dim_1%LB
 1453.       $SC_nodd_I20 = nodd%dim_1%EX
 1453.       $SC_nodd_I21 = nodd%dim_1%LB
 1453.       $SC_firstnodd_I18 = firstnodd%dim_1%EX
 1453.       $SC_firstnodd_I19 = firstnodd%dim_1%LB
 1448.       $SC_neven_I16 = neven%dim_1%EX
 1448.       $SC_neven_I17 = neven%dim_1%LB
 1448.       $SC_spec_I11 = spec%dim_1%EX
 1448.       $SC_spec_I12 = spec%dim_1%LB
 1448.       $SC_spec_I14 = spec%dim_2%SM
 1448.       $SC_spec_I13 = spec%dim_2%EX
 1448.       $SC_spec_I15 = spec%dim_2%LB
 1448.       $SC_ls2f_I4 = ls2f%dim_1%EX
 1448.       $SC_ls2f_I5 = ls2f%dim_1%LB
 1448.       $SC_ls2f_I7 = ls2f%dim_2%SM
 1448.       $SC_ls2f_I6 = ls2f%dim_2%EX
 1448.       $SC_ls2f_I8 = ls2f%dim_2%LB
 1448.       $SC_firstneven_I9 = firstneven%dim_1%EX
 1448.       $SC_firstneven_I10 = firstneven%dim_1%LB
 1451.       $SC_jminperm_I2 = jminperm%dim_1%EX
 1451.       $SC_jminperm_I3 = jminperm%dim_1%LB
 1443.       $SC_lm2m_I0 = lm2m%dim_1%EX
 1443.       $SC_lm2m_I1 = lm2m%dim_1%LB
 1470.       $SC_bufsend_I28 = bufsend%dim_1%EX
 1470.       $SC_bufsend_I29 = bufsend%dim_1%LB
 1470. !dir$ loop_info (automatic) cache_nt( lm2m )
 1470.       do
 1437.          $snt_T1 = _mt_critical( 2, _mt_rw_list(...) )
 1438.          mglob = 1 + mglob
 1439.          lm = mglob
 1440.          $snt_T1 = _mt_endcritical( 2, _mt_rw_list(...), $snt_T1 )
 1441.          if ( lm > mymmax ) goto 10
 1443.          m = (lm2m%base_addr)(lm, 0)
 1447.          $F_A35 = t$113
 1447.          $F_A36 = t$112
 1447.          if ( and( -$F_A36, -$F_A35 ) < 0 ) then
 1447.             $I_L1447_278 = 0
 1447.             do
 1447.                $I_L1447_262 = 0
 1447. !dir$ ivdep
 1447.                do
 1447.                   foev(1 + $I_L1447_262, 1 + $I_L1447_278) = 0.0
 1447.                   $I_L1447_262 = 1 + $I_L1447_262
 1447.                   if ( $I_L1447_262 >= $F_A36 ) exit
 1447.                enddo
 1447.                $I_L1447_278 = 1 + $I_L1447_278
 1447.                if ( $I_L1447_278 >= $F_A35 ) exit
 1447.             enddo
 1447.          endif
 1451.          $t_S0 = 1 + jmaxhalf + -(jminperm%base_addr)(m, 0)
 1448.          tm$22 = loc( (ls2f%base_addr)((jminperm%base_addr)(m, 0), (firstneven%base_addr)(lm, 0), 0) )
 1448.          a = _copyin( (ls2f%base_addr)((jminperm%base_addr)(m, 0), (firstneven%base_addr)(lm, 0), 0) )
 1448.          tm$24 = loc( (spec%base_addr)((firstneven%base_addr)(lm, 0), 1, 0) )
 1448.          b = _copyin( (spec%base_addr)((firstneven%base_addr)(lm, 0), 1, 0) )
 1448.          tm$26 = loc( foev(1, (jminperm%base_addr)(m, 0)) )
 1448.          c = _copyin( foev(1, (jminperm%base_addr)(m, 0)) )
 1448.          t$134 = djh
 1448.          t$135 = (neven%base_addr)(lm, 0)
 1448.          t$270 = max( 0, djh )
 1448.          t$271 = max( 0, djh )
 1448.          t$272 = max( 0, t$135 )
 1448.          t$273 = max( 0, t$135 ) * max( 0, djh )
 1448.          t$136 = dlmn
 1448.          t$137 = ( 2 * nvertspec )
 1448.          t$274 = max( 0, dlmn )
 1448.          t$275 = max( 0, dlmn )
 1448.          t$276 = max( 0, ( 2 * nvertspec ) )
 1448.          t$277 = max( 0, ( 2 * nvertspec ) ) * max( 0, dlmn )
 1448.          t$138 = dv
 1448.          t$139 = djh
 1448.          t$278 = max( 0, dv )
 1448.          t$279 = max( 0, dv )
 1448.          t$280 = max( 0, djh )
 1448.          t$281 = max( 0, dv ) * max( 0, djh )
 1448.          if ( $t_S0 > 0 ) then
 1448.             if ( 2 * nvertspec > 0 ) then
 1448.                $SCA_neven_I46 = (neven%base_addr)(lm, 0)
 1448.                $I_L1448_298 = 0
 1448.                do
 1448.                   $I_L1448_292 = 0
 1448.                   do
 1448.                      $I_L1448_286 = 0
 1448. !dir$ shortloop16
 1448. !dir$ blocking_size( 16, 16 )
 1448.                      do
 1448.                         $I_L1448_266 = 0
 1448. !dir$ blocking_size( 32, 32 )
 1448.                         do
 1448.                            if ( $SCA_neven_I46 > 0 ) then
 1448.                               $SC_c_I48 = c(1 + $I_L1448_266 + 32 * $I_L1448_292, 1 + $I_L1448_286 + 16 * $I_L1448_298)
 1448.                               $I_L1448_244 = 0
 1448. !dir$ ivdep
 1448.                               do
 1448.                                  $SC_c_I48 = $SC_c_I48 + b(1 + $I_L1448_244, 1 + $I_L1448_266 + 32 * $I_L1448_292) * a(1 + $I_L1448_286 + 16 * $I_L1448_298, 1 + $I_L1448_244)
 1448.                                  $I_L1448_244 = 1 + $I_L1448_244
 1448.                                  if ( $I_L1448_244 >= $SCA_neven_I46 ) exit
 1448.                               enddo
 1448.                               c(1 + $I_L1448_266 + 32 * $I_L1448_292, 1 + $I_L1448_286 + 16 * $I_L1448_298) = $SC_c_I48
 1448.                            endif
 1448.                            $I_L1448_266 = 1 + $I_L1448_266
 1448.                            if ( $I_L1448_266 >= min( ( 2 * nvertspec ), 32 + 32 * $I_L1448_292 ) + -32 * $I_L1448_292 ) exit
 1448.                         enddo
 1448.                         $I_L1448_286 = 1 + $I_L1448_286
 1448.                         if ( $I_L1448_286 >= min( $t_S0, 16 + 16 * $I_L1448_298 ) + -16 * $I_L1448_298 ) exit
 1448.                      enddo
 1448.                      $I_L1448_292 = 1 + $I_L1448_292
 1448.                      if ( $I_L1448_292 >= 1 + max( 0, -1 + _rsh( 31 + 2 * nvertspec, 5 ) ) ) exit
 1448.                   enddo
 1448.                   $I_L1448_298 = 1 + $I_L1448_298
 1448.                   if ( $I_L1448_298 >= 1 + max( 0, -1 + _rsh( 15 + $t_S0, 4 ) ) ) exit
 1448.                enddo
 1448.             endif
 1448.          endif
 1448.          foev(1, (jminperm%base_addr)(m, 0)) = _copyout( c )
 1448.          (spec%base_addr)((firstneven%base_addr)(lm, 0), 1, 0) = _copyout( b )
 1448.          (ls2f%base_addr)((jminperm%base_addr)(m, 0), (firstneven%base_addr)(lm, 0), 0) = _copyout( a )
 1452.          $F_A37 = t$113
 1452.          $F_A38 = t$112
 1452.          if ( and( -$F_A38, -$F_A37 ) < 0 ) then
 1452.             $I_L1452_280 = 0
 1452.             do
 1452.                $I_L1452_264 = 0
 1452. !dir$ ivdep
 1452.                do
 1452.                   food(1 + $I_L1452_264, 1 + $I_L1452_280) = 0.0
 1452.                   $I_L1452_264 = 1 + $I_L1452_264
 1452.                   if ( $I_L1452_264 >= $F_A38 ) exit
 1452.                enddo
 1452.                $I_L1452_280 = 1 + $I_L1452_280
 1452.                if ( $I_L1452_280 >= $F_A37 ) exit
 1452.             enddo
 1452.          endif
 1456.          $t_S5 = 1 + jmaxhalf + -(jminperm%base_addr)(m, 0)
 1453.          tm$35 = loc( (ls2f%base_addr)((jminperm%base_addr)(m, 0), (firstnodd%base_addr)(lm, 0), 0) )
 1453.          a = _copyin( (ls2f%base_addr)((jminperm%base_addr)(m, 0), (firstnodd%base_addr)(lm, 0), 0) )
 1453.          tm$37 = loc( (spec%base_addr)((firstnodd%base_addr)(lm, 0), 1, 0) )
 1453.          b = _copyin( (spec%base_addr)((firstnodd%base_addr)(lm, 0), 1, 0) )
 1453.          tm$39 = loc( food(1, (jminperm%base_addr)(m, 0)) )
 1453.          c = _copyin( food(1, (jminperm%base_addr)(m, 0)) )
 1453.          t$134 = djh
 1453.          t$135 = (nodd%base_addr)(lm, 0)
 1453.          t$270 = max( 0, djh )
 1453.          t$271 = max( 0, djh )
 1453.          t$272 = max( 0, t$135 )
 1453.          t$273 = max( 0, t$135 ) * max( 0, djh )
 1453.          t$136 = dlmn
 1453.          t$137 = ( 2 * nvertspec )
 1453.          t$274 = max( 0, dlmn )
 1453.          t$275 = max( 0, dlmn )
 1453.          t$276 = max( 0, ( 2 * nvertspec ) )
 1453.          t$277 = max( 0, ( 2 * nvertspec ) ) * max( 0, dlmn )
 1453.          t$138 = dv
 1453.          t$139 = djh
 1453.          t$278 = max( 0, dv )
 1453.          t$279 = max( 0, dv )
 1453.          t$280 = max( 0, djh )
 1453.          t$281 = max( 0, dv ) * max( 0, djh )
 1453.          if ( $t_S5 > 0 ) then
 1453.             if ( 2 * nvertspec > 0 ) then
 1453.                $SCA_nodd_I47 = (nodd%base_addr)(lm, 0)
 1453.                $I_L1453_300 = 0
 1453.                do
 1453.                   $I_L1453_294 = 0
 1453.                   do
 1453.                      $I_L1453_289 = 0
 1453. !dir$ shortloop16
 1453. !dir$ blocking_size( 16, 16 )
 1453.                      do
 1453.                         $I_L1453_269 = 0
 1453. !dir$ blocking_size( 32, 32 )
 1453.                         do
 1453.                            if ( $SCA_nodd_I47 > 0 ) then
 1453.                               $SC_c_I49 = c(1 + $I_L1453_269 + 32 * $I_L1453_294, 1 + $I_L1453_289 + 16 * $I_L1453_300)
 1453.                               $I_L1453_246 = 0
 1453. !dir$ ivdep
 1453.                               do
 1453.                                  $SC_c_I49 = $SC_c_I49 + b(1 + $I_L1453_246, 1 + $I_L1453_269 + 32 * $I_L1453_294) * a(1 + $I_L1453_289 + 16 * $I_L1453_300, 1 + $I_L1453_246)
 1453.                                  $I_L1453_246 = 1 + $I_L1453_246
 1453.                                  if ( $I_L1453_246 >= $SCA_nodd_I47 ) exit
 1453.                               enddo
 1453.                               c(1 + $I_L1453_269 + 32 * $I_L1453_294, 1 + $I_L1453_289 + 16 * $I_L1453_300) = $SC_c_I49
 1453.                            endif
 1453.                            $I_L1453_269 = 1 + $I_L1453_269
 1453.                            if ( $I_L1453_269 >= min( ( 2 * nvertspec ), 32 + 32 * $I_L1453_294 ) + -32 * $I_L1453_294 ) exit
 1453.                         enddo
 1453.                         $I_L1453_289 = 1 + $I_L1453_289
 1453.                         if ( $I_L1453_289 >= min( $t_S5, 16 + 16 * $I_L1453_300 ) + -16 * $I_L1453_300 ) exit
 1453.                      enddo
 1453.                      $I_L1453_294 = 1 + $I_L1453_294
 1453.                      if ( $I_L1453_294 >= 1 + max( 0, -1 + _rsh( 31 + 2 * nvertspec, 5 ) ) ) exit
 1453.                   enddo
 1453.                   $I_L1453_300 = 1 + $I_L1453_300
 1453.                   if ( $I_L1453_300 >= 1 + max( 0, -1 + _rsh( 15 + $t_S5, 4 ) ) ) exit
 1453.                enddo
 1453.             endif
 1453.          endif
 1453.          food(1, (jminperm%base_addr)(m, 0)) = _copyout( c )
 1453.          (spec%base_addr)((firstnodd%base_addr)(lm, 0), 1, 0) = _copyout( b )
 1453.          (ls2f%base_addr)((jminperm%base_addr)(m, 0), (firstnodd%base_addr)(lm, 0), 0) = _copyout( a )
 1460.          $t_S10 = (jminperm%base_addr)(m, 0)
 1460.          if ( jmaxhalf + -$t_S10 >= 0 ) then
 1469.             if ( nvertspec > 0 ) then
 1460.                $I_L1460_272 = 0
 1460.                do
 1462.                   kn = (nodehasj_f%base_addr)($t_S10 + $I_L1460_272, 0)
 1463.                   ks = (nodehasj_f%base_addr)(1 + jmax + -$t_S10 + -$I_L1460_272, 0)
 1464.                   inin = ( -( nvertspec * (firstlatinproc_f%base_addr)(kn, 0) ) + nvertspec * $t_S10 + -2 * nvertspec * (nlatsinproc_f%base_addr)(kn, 0) + 2 * nvertspec * lm * (nlatsinproc_f%base_addr)(kn, 0) + nvertspec * $I_L1460_272 )
 1465.                   inin1 = inin + nvertspec * (nlatsinproc_f%base_addr)(kn, 0)
 1466.                   inis = nvertspec + -( nvertspec * $t_S10 ) + -( nvertspec * (firstlatinproc_f%base_addr)(ks, 0) ) + -( nvertspec * $I_L1460_272 ) + nvertspec * jmax + -2 * nvertspec * (nlatsinproc_f%base_addr)(ks, 0) + 2 * nvertspec * lm * (nlatsinproc_f%base_addr)(ks, 0)
 1467.                   inis1 = inis + nvertspec * (nlatsinproc_f%base_addr)(ks, 0)
 1469.                   $I_L1469_248 = 0
 1469. !dir$ unroll 2
 1469.                   do
 1470.                      (bufsend%base_addr)(1 + inin + $I_L1469_248 + 2 * nvertspec * jmaxlocal_f * mymmax * kn, 0) = food(1 + $I_L1469_248, $t_S10 + $I_L1460_272) + foev(1 + $I_L1469_248, $t_S10 + $I_L1460_272)
 1471.                      (bufsend%base_addr)(1 + inin1 + $I_L1469_248 + 2 * nvertspec * jmaxlocal_f * mymmax * kn, 0) = food(1 + nvertspec + $I_L1469_248, $t_S10 + $I_L1460_272) + foev(1 + nvertspec + $I_L1469_248, $t_S10 + $I_L1460_272)
 1472.                      (bufsend%base_addr)(1 + inis + $I_L1469_248 + 2 * nvertspec * jmaxlocal_f * mymmax * ks, 0) = foev(1 + $I_L1469_248, $t_S10 + $I_L1460_272) + -food(1 + $I_L1469_248, $t_S10 + $I_L1460_272)
 1473.                      (bufsend%base_addr)(1 + inis1 + $I_L1469_248 + 2 * nvertspec * jmaxlocal_f * mymmax * ks, 0) = foev(1 + nvertspec + $I_L1469_248, $t_S10 + $I_L1460_272) + -food(1 + nvertspec + $I_L1469_248, $t_S10 + $I_L1460_272)
 1474.                      $I_L1469_248 = 1 + $I_L1469_248
 1469.                      if ( $I_L1469_248 >= nvertspec ) exit
 1469.                   enddo
 1475.                   $I_L1460_272 = 1 + $I_L1460_272
 1474.                   if ( $I_L1460_272 >= 1 + jmaxhalf + -$t_S10 ) exit
 1474.                enddo
 1474.             endif
 1474.          endif
 1475.       enddo
 1475.    10 continue
 1477.       _mt_barrier( 3, _mt_rw_list(...) )
 1478.       $snt_T2 = _mt_single( 4, _mt_rw_list(...) )
 1479.       comm = comm_four
 1480.       (requestr%base_addr)(myid_four, 0) = 738197504
 1481.       (requests%base_addr)(myid_four, 0) = 738197504
 1482.       t$698 = -1 + maxnodes_four
 1482.       if ( maxnodes_four > 0 ) then
 1482.          t$699 = maxnodes_four
 1482.          $I_L1482_250 = 0
 1482.          do
 1483.             if ( $I_L1482_250 + -myid_four /= 0 ) then
 1484.                t$701 = 2 * myjmax_f * nvertspec * (msperproc%base_addr)($I_L1482_250, 0)
 1485.                t$702 = $I_L1482_250
 1484.                call mpi_irecv( (bufrec%base_addr)(1 + kdim * $I_L1482_250, 0), t$701, 1275070495, t$702, 97, comm, (requestr%base_addr)($I_L1482_250, 0), ierr )
 1484.             endif
 1487.             $I_L1482_250 = 1 + $I_L1482_250
 1486.             if ( $I_L1482_250 >= 1 + t$698 ) exit
 1486.          enddo
 1487.          t$700 = 1 + t$698
 1487.       endif
 1488.       t$703 = -1 + maxnodes_four
 1488.       k = 0
 1488.       if ( maxnodes_four > 0 ) then
 1488.          t$704 = maxnodes_four
 1488.          $I_L1488_252 = 0
 1488.          do
 1489.             if ( $I_L1488_252 + -myid_four /= 0 ) then
 1490.                t$706 = 2 * nvertspec * mymmax * (nlatsinproc_f%base_addr)($I_L1488_252, 0)
 1491.                t$707 = $I_L1488_252
 1490.                call mpi_isend( (bufsend%base_addr)(1 + ldim * $I_L1488_252, 0), t$706, 1275070495, t$707, 97, comm, (requests%base_addr)($I_L1488_252, 0), ierr )
 1490.             endif
 1493.             $I_L1488_252 = 1 + $I_L1488_252
 1492.             if ( $I_L1488_252 >= 1 + t$703 ) exit
 1492.          enddo
 1493.          t$705 = 1 + t$703
 1493.          k = 1 + t$703
 1493.       endif
 1494.       $snt_T2 = _mt_endsingle( 4, _mt_rw_list(...), $snt_T2 )
 1495.       mm = 0
 1496.       if ( mmax > 0 ) then
 1503.          $SC_four_I35 = four%dim_1%EX
 1503.          $SC_four_I36 = four%dim_1%LB
 1503.          $SC_four_I38 = four%dim_2%SM
 1503.          $SC_four_I37 = four%dim_2%EX
 1503.          $SC_four_I39 = four%dim_2%LB
 1497.          $SC_nodehasm_I30 = nodehasm%dim_1%EX
 1497.          $SC_nodehasm_I31 = nodehasm%dim_1%LB
 1497.          $SC_nodehasm_I33 = nodehasm%dim_2%SM
 1497.          $SC_nodehasm_I32 = nodehasm%dim_2%EX
 1497.          $SC_nodehasm_I34 = nodehasm%dim_2%LB
 1503.          $SC_bufsend_I28 = bufsend%dim_1%EX
 1503.          $SC_bufsend_I29 = bufsend%dim_1%LB
 1501.          if ( jlast + -jfirst >= 0 ) then
 1502.             if ( nvertspec > 0 ) then
 1496.                $I_L1496_282 = 0
 1496. !dir$ loop_info (automatic) cache_nt( nodehasm )
 1496.                do
 1497.                   if ( (nodehasm%base_addr)(1 + $I_L1496_282, mygroup_four, 0) + -myid_four == 0 ) then
 1498.                      mm = 1 + mm
 1501.                      $I_L1501_274 = 0
 1501.                      do
 1502.                         $I_L1502_254 = 0
 1502. !dir$ ivdep
 1502.                         do
 1503.                            (four%base_addr)(1 + $I_L1502_254 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1501_274, 1 + 2 * $I_L1496_282, 0) = (bufsend%base_addr)(1 + $I_L1502_254 + -nvertspec + -2 * myjmax_f * nvertspec + 2 * myjmax_f * nvertspec * mm + ldim * myid_four + jfirst * nvertspec + nvertspec * $I_L1501_274, 0)
 1505.                            (four%base_addr)(1 + $I_L1502_254 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1501_274, 2 + 2 * $I_L1496_282, 0) = (bufsend%base_addr)(1 + $I_L1502_254 + -nvertspec + -( myjmax_f * nvertspec ) + 2 * myjmax_f * nvertspec * mm + ldim * myid_four + jfirst * nvertspec + nvertspec * $I_L1501_274, 0)
 1507.                            $I_L1502_254 = 1 + $I_L1502_254
 1502.                            if ( $I_L1502_254 >= nvertspec ) exit
 1502.                         enddo
 1508.                         $I_L1501_274 = 1 + $I_L1501_274
 1507.                         if ( $I_L1501_274 >= 1 + jlast + -jfirst ) exit
 1507.                      enddo
 1507.                   endif
 1510.                   $I_L1496_282 = 1 + $I_L1496_282
 1509.                   if ( $I_L1496_282 >= mmax ) exit
 1509.                enddo
 1509.             endif
 1509.          endif
 1509.       endif
 1511.       $t_S20 = -1 + maxnodes_four
 1511.       if ( -1 + maxnodes_four > 0 ) then
 1511.          $I_L1511_296 = 0
 1511.          do
 1512.             _mt_barrier( 5, _mt_rw_list(...) )
 1513.             $snt_T3 = _mt_single( 6, _mt_rw_list(...) )
 1514.             call mpi_waitany( maxnodes_four, (requestr%base_addr)(0, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 1515.             $snt_T3 = _mt_endsingle( 6, _mt_rw_list(...), $snt_T3 )
 1516.             ks = (status%base_addr)(3, 0)
 1517.             mm = 0
 1518.             if ( mmax > 0 ) then
 1525.                $SC_four_I35 = four%dim_1%EX
 1525.                $SC_four_I36 = four%dim_1%LB
 1525.                $SC_four_I38 = four%dim_2%SM
 1525.                $SC_four_I37 = four%dim_2%EX
 1525.                $SC_four_I39 = four%dim_2%LB
 1519.                $SC_nodehasm_I30 = nodehasm%dim_1%EX
 1519.                $SC_nodehasm_I31 = nodehasm%dim_1%LB
 1519.                $SC_nodehasm_I33 = nodehasm%dim_2%SM
 1519.                $SC_nodehasm_I32 = nodehasm%dim_2%EX
 1519.                $SC_nodehasm_I34 = nodehasm%dim_2%LB
 1525.                $SC_bufrec_I40 = bufrec%dim_1%EX
 1525.                $SC_bufrec_I41 = bufrec%dim_1%LB
 1523.                if ( jlast + -jfirst >= 0 ) then
 1524.                   if ( nvertspec > 0 ) then
 1518.                      $I_L1518_284 = 0
 1518. !dir$ loop_info (automatic) cache_nt( nodehasm )
 1518.                      do
 1519.                         if ( (nodehasm%base_addr)(1 + $I_L1518_284, mygroup_four, 0) + -ks == 0 ) then
 1520.                            mm = 1 + mm
 1523.                            $I_L1523_276 = 0
 1523.                            do
 1524.                               $I_L1524_256 = 0
 1524. !dir$ ivdep
 1524.                               do
 1525.                                  (four%base_addr)(1 + $I_L1524_256 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1523_276, 1 + 2 * $I_L1518_284, 0) = (bufrec%base_addr)(1 + $I_L1524_256 + -nvertspec + -2 * myjmax_f * nvertspec + 2 * myjmax_f * nvertspec * mm + kdim * ks + jfirst * nvertspec + nvertspec * $I_L1523_276, 0)
 1527.                                  (four%base_addr)(1 + $I_L1524_256 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1523_276, 2 + 2 * $I_L1518_284, 0) = (bufrec%base_addr)(1 + $I_L1524_256 + -nvertspec + -( myjmax_f * nvertspec ) + 2 * myjmax_f * nvertspec * mm + kdim * ks + jfirst * nvertspec + nvertspec * $I_L1523_276, 0)
 1529.                                  $I_L1524_256 = 1 + $I_L1524_256
 1524.                                  if ( $I_L1524_256 >= nvertspec ) exit
 1524.                               enddo
 1530.                               $I_L1523_276 = 1 + $I_L1523_276
 1529.                               if ( $I_L1523_276 >= 1 + jlast + -jfirst ) exit
 1529.                            enddo
 1529.                         endif
 1532.                         $I_L1518_284 = 1 + $I_L1518_284
 1531.                         if ( $I_L1518_284 >= mmax ) exit
 1531.                      enddo
 1531.                   endif
 1531.                endif
 1531.             endif
 1533.             $I_L1511_296 = 1 + $I_L1511_296
 1532.             if ( $I_L1511_296 >= $t_S20 ) exit
 1532.          enddo
 1532.       endif
 1534.       $snt_T4 = _mt_single( 7, _mt_rw_list(...) )
 1535.       call mpi_waitall( maxnodes_four, (requests%base_addr)(0, 0), (stat%base_addr)(stat%dim_1%LB, stat%dim_2%LB, 0), ierr )
 1536.       $snt_T4 = _mt_endsingle( 7, _mt_rw_list(...), $snt_T4 )
 1391.       _free( t$218 )
 1537.       return
 1537.       end
 1537.       
 1543.       
 1543.       subroutine dellam( mfirst, mlast )
 1559.       if ( mlast + -mfirst >= 0 ) then
 1582.          $SC_four_I8 = four%dim_1%EX
 1582.          $SC_four_I9 = four%dim_1%LB
 1582.          $SC_four_I11 = four%dim_2%SM
 1582.          $SC_four_I10 = four%dim_2%EX
 1582.          $SC_four_I12 = four%dim_2%LB
 1569.          $SC_surfgrid_I6 = surfgrid%dim_1%EX
 1569.          $SC_surfgrid_I7 = surfgrid%dim_1%LB
 1567.          $SC_prevgrid_I4 = prevgrid%dim_1%EX
 1567.          $SC_prevgrid_I5 = prevgrid%dim_1%LB
 1566.          $SC_prevvertdellamsource_I2 = prevvertdellamsource%dim_1%EX
 1566.          $SC_prevvertdellamsource_I3 = prevvertdellamsource%dim_1%LB
 1565.          $SC_fieldfordellam_I0 = fieldfordellam%dim_1%EX
 1565.          $SC_fieldfordellam_I1 = fieldfordellam%dim_1%LB
 1564.          if ( ngridfields > 0 ) then
 1580.             if ( myjmax_f > 0 ) then
 1559.                $I_L1559_22 = 0
 1559.                do
 1560.                   $consim_S6 = 1.5698587127158556e-7 * real( -1 + mfirst + $I_L1559_22, 8 )
 1561.                   $consre_S7 = -( 1.5698587127158556e-7 * real( -1 + mfirst + $I_L1559_22, 8 ) )
 1564.                   $I_L1564_20 = 0
 1564.                   do
 1565.                      if ( (fieldfordellam%base_addr)(1 + $I_L1564_20, 0) /= .false. ) then
 1566.                         $vbasefrom_S5 = (prevvertdellamsource%base_addr)(1 + $I_L1564_20, 0)
 1567.                         $vbaseto_S8 = (prevgrid%base_addr)(1 + $I_L1564_20, 0)
 1569.                         $vmax_S2 = cvmg( havesurf /= 0, kmaxloc, (surfgrid%base_addr)(1 + $I_L1564_20, 0) )
 1579.                         if ( cvmg( havesurf /= 0, kmaxloc, (surfgrid%base_addr)(1 + $I_L1564_20, 0) ) > 0 ) then
 1579.                            $I_L1579_18 = 0
 1579.                            do
 1580.                               $I_L1580_16 = 0
 1580.                               $CSVL_V0 = cvmg( ( $vbaseto_S8 + -$vbasefrom_S5 ) / nvertgrid, 2, and( mod( $vbaseto_S8 + -$vbasefrom_S5, nvertgrid ) == 0 .and. abs( ( $vbaseto_S8 + -$vbasefrom_S5 ) / nvertgrid ) <= -1 + myjmax_f, and( ( $vbaseto_S8 + -$vbasefrom_S5 ) / nvertgrid > 0, ( $vbaseto_S8 + -$vbasefrom_S5 ) / nvertgrid <= 2 ) ) )
 1580.                               if ( $CSVL_V0 <= 4 ) then
 1580.                                  do
 1582.                                     $auxre_S9 = $consim_S6 * (four%base_addr)(1 + $vbasefrom_S5 + $I_L1579_18 + nvertgrid * $I_L1580_16, -1 + 2 * mfirst + 2 * $I_L1559_22, 0)
 1583.                                     (four%base_addr)(1 + $vbaseto_S8 + $I_L1579_18 + nvertgrid * $I_L1580_16, -1 + 2 * mfirst + 2 * $I_L1559_22, 0) = $consre_S7 * (four%base_addr)(1 + $vbasefrom_S5 + $I_L1579_18 + nvertgrid * $I_L1580_16, 2 * mfirst + 2 * $I_L1559_22, 0)
 1584.                                     (four%base_addr)(1 + $vbaseto_S8 + $I_L1579_18 + nvertgrid * $I_L1580_16, 2 * mfirst + 2 * $I_L1559_22, 0) = $auxre_S9
 1585.                                     $I_L1580_16 = 1 + $I_L1580_16
 1580.                                     if ( $I_L1580_16 >= myjmax_f ) exit
 1580.                                  enddo
 1580.                               else
 1580. !dir$ ivdep safevl = $CSVL_V0 !   Guaranteed minimum :: 4
 1580.                                  do
 1582.                                     $auxre_S9 = $consim_S6 * (four%base_addr)(1 + $vbasefrom_S5 + $I_L1579_18 + nvertgrid * $I_L1580_16, -1 + 2 * mfirst + 2 * $I_L1559_22, 0)
 1583.                                     (four%base_addr)(1 + $vbaseto_S8 + $I_L1579_18 + nvertgrid * $I_L1580_16, -1 + 2 * mfirst + 2 * $I_L1559_22, 0) = $consre_S7 * (four%base_addr)(1 + $vbasefrom_S5 + $I_L1579_18 + nvertgrid * $I_L1580_16, 2 * mfirst + 2 * $I_L1559_22, 0)
 1584.                                     (four%base_addr)(1 + $vbaseto_S8 + $I_L1579_18 + nvertgrid * $I_L1580_16, 2 * mfirst + 2 * $I_L1559_22, 0) = $auxre_S9
 1585.                                     $I_L1580_16 = 1 + $I_L1580_16
 1580.                                     if ( $I_L1580_16 >= myjmax_f ) exit
 1580.                                  enddo
 1580.                               endif
 1586.                               $I_L1579_18 = 1 + $I_L1579_18
 1585.                               if ( $I_L1579_18 >= $vmax_S2 ) exit
 1585.                            enddo
 1585.                         endif
 1585.                      endif
 1588.                      $I_L1564_20 = 1 + $I_L1564_20
 1587.                      if ( $I_L1564_20 >= ngridfields ) exit
 1587.                   enddo
 1589.                   $I_L1559_22 = 1 + $I_L1559_22
 1588.                   if ( $I_L1559_22 >= 1 + mlast + -mfirst ) exit
 1588.                enddo
 1588.             endif
 1588.          endif
 1588.       endif
 1590.       return
 1590.       end
 1590.       
 1618.       
 1618.       subroutine withdrawgrid
 1619.       g2 = $_StaticDV_P0
 1619.       g2%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 1619.       g2%dim_1%LB = 1
 1619.       g2%dim_1%EX = 0
 1619.       g2%dim_1%SM = 1
 1619.       g2%dim_2%LB = 1
 1619.       g2%dim_2%EX = 0
 1619.       g2%dim_2%SM = 1
 1596.       g3 = $_StaticDV_P1
 1596.       g3%base_addr = pointer to array[1] of array[1] of array[1] of real (kind=8)( 0 )
 1596.       g3%dim_1%LB = 1
 1596.       g3%dim_1%EX = 0
 1596.       g3%dim_1%SM = 1
 1596.       g3%dim_2%LB = 1
 1596.       g3%dim_2%EX = 0
 1596.       g3%dim_2%SM = 1
 1596.       g3%dim_3%LB = 1
 1596.       g3%dim_3%EX = 0
 1596.       g3%dim_3%SM = 1
 1596.       t$114 = ( 1 + nrecs_f )
 1616.       t$224 = _zla( 0, ( 1 + nrecs_f ) )
 1616.       t$227 = 4 * _zla( 0, ( 1 + nrecs_f ) )
 1615.       t$229 = 8 * _zla( 0, ( 1 + nrecs_f ) )
 1596.       t$115 = ( 1 + nrecs_g )
 1617.       t$230 = _zla( 0, ( 1 + nrecs_g ) )
 1617.       t$232 = 8 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) )
 1596.       t$225 = int( _alloc( 8 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) ) ), 8 )
 1616.       t$226 = t$225
 1615.       t$228 = t$225 + 4 * _zla( 0, ( 1 + nrecs_f ) )
 1617.       t$231 = t$225 + 8 * _zla( 0, ( 1 + nrecs_f ) )
 1624.       comm = 1140850688
 1625.       $m_S1 = 0
 1626.       ibr(1) = 1
 1627.       if ( nrecs_f > 0 ) then
 1630.          $SC_messages_I5 = messages_f%dim_1%EX
 1630.          $SC_messages_I6 = messages_f%dim_1%LB
 1630.          $SC_messages_I8 = messages_f%dim_2%SM
 1630.          $SC_messages_I7 = messages_f%dim_2%EX
 1630.          $SC_messages_I9 = messages_f%dim_2%LB
 1629.          $SC_messproc_I0 = messproc_f%dim_1%EX
 1629.          $SC_messproc_I1 = messproc_f%dim_1%LB
 1629.          $SC_messproc_I3 = messproc_f%dim_2%SM
 1629.          $SC_messproc_I2 = messproc_f%dim_2%EX
 1629.          $SC_messproc_I4 = messproc_f%dim_2%LB
 1627.          $I_L1627_251 = 0
 1627.          do
 1628.             ibn(1 + $I_L1627_251) = 0
 1629.             $t_S2 = (messproc_f%base_addr)(2, 1 + $I_L1627_251, 0)
 1629.             ipar = 1 + $m_S1
 1629.             if ( $t_S2 + -$m_S1 > 0 ) then
 1630.                $SC_ibn_I68 = 0
 1629.                $I_L1629_225 = 0
 1629. !dir$ ivdep
 1629.                do
 1630.                   $SC_ibn_I68 = 1 + $SC_ibn_I68 + (messages_f%base_addr)(2, 1 + $m_S1 + $I_L1629_225, 0) + -(messages_f%base_addr)(1, 1 + $m_S1 + $I_L1629_225, 0)
 1631.                   $I_L1629_225 = 1 + $I_L1629_225
 1629.                   if ( $I_L1629_225 >= ( $t_S2 + -$m_S1 ) ) exit
 1629.                enddo
 1630.                ibn(1 + $I_L1627_251) = $SC_ibn_I68
 1631.                ipar = 1 + $t_S2
 1631.             endif
 1632.             ibr(2 + $I_L1627_251) = ibr(1 + $I_L1627_251) + nvertgrid * ibn(1 + $I_L1627_251)
 1633.             $m_S1 = $t_S2
 1634.             $I_L1627_251 = 1 + $I_L1627_251
 1631.             if ( $I_L1627_251 >= nrecs_f ) exit
 1631.          enddo
 1631.       endif
 1635.       m = 0
 1636.       ibs(1) = 1
 1637.       n = 1
 1637.       if ( nrecs_g > 0 ) then
 1642.          $SC_kfirst_four_I20 = kfirst_four%dim_1%EX
 1642.          $SC_kfirst_four_I21 = kfirst_four%dim_1%LB
 1642.          $SC_klast_four_I22 = klast_four%dim_1%EX
 1642.          $SC_klast_four_I23 = klast_four%dim_1%LB
 1640.          $SC_messages_I15 = messages_g%dim_1%EX
 1640.          $SC_messages_I16 = messages_g%dim_1%LB
 1640.          $SC_messages_I18 = messages_g%dim_2%SM
 1640.          $SC_messages_I17 = messages_g%dim_2%EX
 1640.          $SC_messages_I19 = messages_g%dim_2%LB
 1639.          $SC_messproc_I10 = messproc_g%dim_1%EX
 1639.          $SC_messproc_I11 = messproc_g%dim_1%LB
 1639.          $SC_messproc_I13 = messproc_g%dim_2%SM
 1639.          $SC_messproc_I12 = messproc_g%dim_2%EX
 1639.          $SC_messproc_I14 = messproc_g%dim_2%LB
 1637.          $I_L1637_253 = 0
 1637.          do
 1638.             ib = 0
 1639.             $t_S5 = (messproc_g%base_addr)(2, 1 + $I_L1637_253, 0)
 1639.             ipar = 1 + m
 1639.             if ( $t_S5 + -m > 0 ) then
 1639.                $I_L1639_227 = 0
 1639. !dir$ ivdep
 1639.                do
 1640.                   ib = 1 + ib + (messages_g%base_addr)(2, 1 + m + $I_L1639_227, 0) + -(messages_g%base_addr)(1, 1 + m + $I_L1639_227, 0)
 1641.                   $I_L1639_227 = 1 + $I_L1639_227
 1639.                   if ( $I_L1639_227 >= ( $t_S5 + -m ) ) exit
 1639.                enddo
 1641.                ipar = 1 + $t_S5
 1641.             endif
 1642.             k = 1 + (klast_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L1637_253, 0), 0) + -(kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L1637_253, 0), 0)
 1643.             ns = 0
 1644.             if ( (kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L1637_253, 0), 0) == 1 ) then
 1644.                ns = nsurf_g
 1644.             endif
 1645.             ibs(2 + $I_L1637_253) = ibs(1 + $I_L1637_253) + ib * ns + ib * k * nfull_g
 1646.             m = $t_S5
 1647.             $I_L1637_253 = 1 + $I_L1637_253
 1644.             if ( $I_L1637_253 >= nrecs_g ) exit
 1644.          enddo
 1647.          n = ( 1 + nrecs_g )
 1647.       endif
 1648.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 1649.       if ( dimsendbuf < -1 + ibs(1 + nrecs_g) ) then
 1650.          dimsendbuf = ibs(1 + nrecs_g)
 1651.          $_allo_P2(0) = 0x1000000000001L
 1651.          $_allo_P2(1) = loc( bufsend )
 1651.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1651.          bufsend%header%assoc = 0
 1652.          bufsend%header%a_contig = 1
 1652.          bufsend%dim_1%LB = 1
 1652.          bufsend%dim_1%EX = ( max( 0, dimsendbuf ) )
 1652.          bufsend%dim_1%SM = 1
 1652.          $_allo_P3(0) = 0x1000000000001L
 1652.          $_allo_P3(1) = loc( bufsend )
 1652.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1652.       endif
 1654.       if ( dimrecbuf < -1 + ibr(1 + nrecs_f) ) then
 1655.          dimrecbuf = ibr(1 + nrecs_f)
 1656.          $_allo_P4(0) = 0x1000000000001L
 1656.          $_allo_P4(1) = loc( bufrec )
 1656.          call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 1656.          bufrec%header%assoc = 0
 1657.          bufrec%header%a_contig = 1
 1657.          bufrec%dim_1%LB = 1
 1657.          bufrec%dim_1%EX = ( max( 0, dimrecbuf ) )
 1657.          bufrec%dim_1%SM = 1
 1657.          $_allo_P5(0) = 0x1000000000001L
 1657.          $_allo_P5(1) = loc( bufrec )
 1657.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 1657.       endif
 1659.       t$758 = nrecs_g
 1659.       n = 1
 1659.       if ( nrecs_g > 0 ) then
 1659.          t$759 = nrecs_g
 1659.          $I_L1659_229 = 0
 1659.          do
 1660.             proc = (messproc_g%base_addr)(1, 1 + $I_L1659_229, 0)
 1661.             t$761 = ibs(2 + $I_L1659_229) + -ibs(1 + $I_L1659_229)
 1661.             call mpi_irecv( (bufsend%base_addr)(ibs(1 + $I_L1659_229), 0), t$761, 1275070495, proc, 78, comm, (requestr%base_addr)(1 + $I_L1659_229, 0), ierr )
 1663.             $I_L1659_229 = 1 + $I_L1659_229
 1663.             if ( $I_L1659_229 >= t$758 ) exit
 1663.          enddo
 1663.          t$760 = t$758
 1663.          n = ( 1 + t$758 )
 1663.       endif
 1664.       nglob = 1
 1665.       iglob = 0
 1666.       ibglob = 0
 1667.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 1699.       $SC_four_I28 = four%dim_1%EX
 1699.       $SC_four_I29 = four%dim_1%LB
 1699.       $SC_four_I31 = four%dim_2%SM
 1699.       $SC_four_I30 = four%dim_2%EX
 1699.       $SC_four_I32 = four%dim_2%LB
 1696.       $SC_prevgrid_I26 = prevgrid%dim_1%EX
 1696.       $SC_prevgrid_I27 = prevgrid%dim_1%LB
 1696.       $SC_previousj_I24 = previousj%dim_1%EX
 1696.       $SC_previousj_I25 = previousj%dim_1%LB
 1699.       $SC_bufrec_I33 = bufrec%dim_1%EX
 1699.       $SC_bufrec_I34 = bufrec%dim_1%LB
 1695.       $SC_messages_I5 = messages_f%dim_1%EX
 1695.       $SC_messages_I6 = messages_f%dim_1%LB
 1695.       $SC_messages_I8 = messages_f%dim_2%SM
 1695.       $SC_messages_I7 = messages_f%dim_2%EX
 1695.       $SC_messages_I9 = messages_f%dim_2%LB
 1691.       $SC_messproc_I0 = messproc_f%dim_1%EX
 1691.       $SC_messproc_I1 = messproc_f%dim_1%LB
 1691.       $SC_messproc_I3 = messproc_f%dim_2%SM
 1691.       $SC_messproc_I2 = messproc_f%dim_2%EX
 1691.       $SC_messproc_I4 = messproc_f%dim_2%LB
 1691. !dir$ loop_info (automatic) cache_nt( surfgrid, ibn )
 1691.       do
 1669.          $snt_T1 = _mt_critical( 2, _mt_rw_list(...) )
 1670.          iglob = 1 + iglob
 1671.          if ( iglob > ngridfields ) then
 1672.             iglob = 1
 1673.             nglob = 1 + nglob
 1673.          endif
 1675.          n = nglob
 1676.          if ( nglob <= nrecs_f ) then
 1677.             ig = iglob
 1678.             ib = ibglob
 1679.             kl = kmaxloc
 1680.             if ( (surfgrid%base_addr)(iglob, 0) /= .false. ) then
 1681.                kl = havesurf /= 0
 1681.             endif
 1687.             ibglob = ibglob + kl * ibn(nglob)
 1687.          endif
 1689.          $snt_T1 = _mt_endcritical( 2, _mt_rw_list(...), $snt_T1 )
 1690.          if ( n > nrecs_f ) goto 10
 1691.          m = (messproc_f%base_addr)(2, -1 + n, 0)
 1692.          if ( (surfgrid%base_addr)(ig, 0) == .false. ) then
 1704.             $t_S12 = (messproc_f%base_addr)(2, n, 0)
 1704.             ipar = 1 + m
 1704.             if ( $t_S12 + -m > 0 ) then
 1707.                if ( kmaxloc > 0 ) then
 1704.                   $SCA_prevgrid_I55 = (prevgrid%base_addr)(ig, 0)
 1704.                   $I_L1704_263 = 0
 1704.                   do
 1705.                      j = (messages_f%base_addr)(3, 1 + m + $I_L1704_263, 0)
 1706.                      v0 = $SCA_prevgrid_I55 + nvertgrid * (previousj%base_addr)(j, 0)
 1707.                      $SCA_messages_I57 = (messages_f%base_addr)(1, 1 + m + $I_L1704_263, 0)
 1707.                      $SCA_messages_I58 = (messages_f%base_addr)(2, 1 + m + $I_L1704_263, 0)
 1707.                      $I_L1707_257 = 0
 1707.                      do
 1708.                         if ( $SCA_messages_I58 + -$SCA_messages_I57 >= 0 ) then
 1708.                            $I_L1708_233 = 0
 1708. !dir$ ivdep
 1708.                            do
 1710.                               (bufrec%base_addr)(1 + ib + $I_L1708_233, 0) = (four%base_addr)(1 + v0 + $I_L1707_257, $SCA_messages_I57 + $I_L1708_233, 0)
 1711.                               $I_L1708_233 = 1 + $I_L1708_233
 1708.                               if ( $I_L1708_233 >= 1 + $SCA_messages_I58 + -$SCA_messages_I57 ) exit
 1708.                            enddo
 1709.                            ib = ( 1 + ib + $SCA_messages_I58 + -$SCA_messages_I57 )
 1709.                         endif
 1712.                         $I_L1707_257 = 1 + $I_L1707_257
 1711.                         if ( $I_L1707_257 >= kmaxloc ) exit
 1711.                      enddo
 1713.                      $I_L1704_263 = 1 + $I_L1704_263
 1712.                      if ( $I_L1704_263 >= ( $t_S12 + -m ) ) exit
 1712.                   enddo
 1712.                else
 1705.                   j = (messages_f%base_addr)(3, $t_S12, 0)
 1705.                endif
 1713.                ipar = 1 + $t_S12
 1713.             endif
 1693.          else if ( havesurf /= .false. ) then
 1694.             $t_S7 = (messproc_f%base_addr)(2, n, 0)
 1694.             ipar = 1 + m
 1694.             if ( $t_S7 + -m > 0 ) then
 1694.                $SCA_prevgrid_I56 = (prevgrid%base_addr)(ig, 0)
 1694.                $I_L1694_255 = 0
 1694.                do
 1695.                   j = (messages_f%base_addr)(3, 1 + m + $I_L1694_255, 0)
 1696.                   v0 = $SCA_prevgrid_I56 + nvertgrid * (previousj%base_addr)(j, 0)
 1697.                   $t_S9 = (messages_f%base_addr)(1, 1 + m + $I_L1694_255, 0)
 1697.                   $t_S10 = (messages_f%base_addr)(2, 1 + m + $I_L1694_255, 0)
 1697.                   if ( $t_S10 + -$t_S9 >= 0 ) then
 1697.                      $I_L1697_231 = 0
 1697. !dir$ ivdep
 1697.                      do
 1699.                         (bufrec%base_addr)(1 + ib + $I_L1697_231, 0) = (four%base_addr)(1 + v0, $t_S9 + $I_L1697_231, 0)
 1700.                         $I_L1697_231 = 1 + $I_L1697_231
 1697.                         if ( $I_L1697_231 >= 1 + $t_S10 + -$t_S9 ) exit
 1697.                      enddo
 1698.                      ib = ( 1 + ib + $t_S10 + -$t_S9 )
 1698.                   endif
 1701.                   $I_L1694_255 = 1 + $I_L1694_255
 1700.                   if ( $I_L1694_255 >= ( $t_S7 + -m ) ) exit
 1700.                enddo
 1701.                ipar = 1 + $t_S7
 1701.             endif
 1701.          endif
 1714.       enddo
 1714.    10 continue
 1716.       $snt_T2 = _mt_single( 3, _mt_rw_list(...) )
 1717.       t$781 = nrecs_f
 1717.       n = 1
 1717.       if ( nrecs_f > 0 ) then
 1717.          t$782 = nrecs_f
 1717.          $I_L1717_235 = 0
 1717.          do
 1718.             proc = (messproc_f%base_addr)(1, 1 + $I_L1717_235, 0)
 1719.             t$784 = ibr(2 + $I_L1717_235) + -ibr(1 + $I_L1717_235)
 1719.             call mpi_isend( (bufrec%base_addr)(ibr(1 + $I_L1717_235), 0), t$784, 1275070495, proc, 78, comm, (requests%base_addr)(1 + $I_L1717_235, 0), ierr )
 1721.             $I_L1717_235 = 1 + $I_L1717_235
 1721.             if ( $I_L1717_235 >= t$781 ) exit
 1721.          enddo
 1721.          t$783 = t$781
 1721.          n = ( 1 + t$781 )
 1721.       endif
 1722.       $snt_T2 = _mt_endsingle( 3, _mt_rw_list(...), $snt_T2 )
 1723.       iglob = 1
 1724.       jglob = max( myfirstlat, myfirstlat_f )
 1725.       _mt_barrier( 4, _mt_rw_list(...) )
 1729.       if ( max( myfirstlat, myfirstlat_f ) <= min( mylastlat, mylastlat_f ) ) then
 1756.          $SC_grid3d_I51 = grid3d%dim_1%EX
 1756.          $SC_grid3d_I52 = grid3d%dim_1%LB
 1753.          $SC_ibperij_I41 = ibperij%dim_1%EX
 1753.          $SC_ibperij_I42 = ibperij%dim_1%LB
 1753.          $SC_ibperij_I44 = ibperij%dim_2%SM
 1753.          $SC_ibperij_I43 = ibperij%dim_2%EX
 1753.          $SC_ibperij_I45 = ibperij%dim_2%LB
 1753.          $SC_jbperij_I46 = jbperij%dim_1%EX
 1753.          $SC_jbperij_I47 = jbperij%dim_1%LB
 1753.          $SC_jbperij_I49 = jbperij%dim_2%SM
 1753.          $SC_jbperij_I48 = jbperij%dim_2%EX
 1753.          $SC_jbperij_I50 = jbperij%dim_2%LB
 1752.          $SC_mylastlon_I39 = mylastlon%dim_1%EX
 1752.          $SC_mylastlon_I40 = mylastlon%dim_1%LB
 1752.          $SC_myfirstlon_I37 = myfirstlon%dim_1%EX
 1752.          $SC_myfirstlon_I38 = myfirstlon%dim_1%LB
 1750.          $SC_grid2d_I35 = grid2d%dim_1%EX
 1750.          $SC_grid2d_I36 = grid2d%dim_1%LB
 1753.          $SC_four_I28 = four%dim_1%EX
 1753.          $SC_four_I29 = four%dim_1%LB
 1753.          $SC_four_I31 = four%dim_2%SM
 1753.          $SC_four_I30 = four%dim_2%EX
 1753.          $SC_four_I32 = four%dim_2%LB
 1751.          $SC_prevgrid_I26 = prevgrid%dim_1%EX
 1751.          $SC_prevgrid_I27 = prevgrid%dim_1%LB
 1751.          $SC_previousj_I24 = previousj%dim_1%EX
 1751.          $SC_previousj_I25 = previousj%dim_1%LB
 1751.          do
 1731.             $snt_T3 = _mt_critical( 5, _mt_rw_list(...) )
 1734.             if ( myfirstlev /= 1 ) then
 1733.                if ( iglob <= ngridfields ) then
 1734.                   $SC_surfgrid_I69 = surfgrid%dim_1%EX
 1734.                   $SC_surfgrid_I70 = surfgrid%dim_1%LB
 1732.                   $I_iglob_237 = 0
 1732. !dir$ ivdep
 1732.                   do
 1734.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_237, 0) == .false. ) then
 1735.                         iglob = ( iglob + $I_iglob_237 )
 1735.                         goto 20
 1735.                      endif
 1733.                      $I_iglob_237 = 1 + $I_iglob_237
 1732.                      if ( $I_iglob_237 >= 1 + ngridfields + -iglob ) exit
 1732.                   enddo
 1735.                   iglob = iglob + 1 + ngridfields + -iglob
 1735.                endif
 1735.             endif
 1735.    20       continue
 1737.             $ig_S18 = iglob
 1738.             if ( iglob <= ngridfields ) then
 1739.                j = jglob
 1740.                if ( jglob >= min( mylastlat, mylastlat_f ) ) then
 1742.                   jglob = max( myfirstlat, myfirstlat_f )
 1741.                   iglob = 1 + iglob
 1741.                else
 1744.                   jglob = 1 + jglob
 1744.                endif
 1744.             endif
 1747.             $snt_T3 = _mt_endcritical( 5, _mt_rw_list(...), $snt_T3 )
 1748.             if ( $ig_S18 > ngridfields ) goto 30
 1749.             if ( (surfgrid%base_addr)($ig_S18, 0) /= .false. ) then
 1750.                g2 = (grid2d%base_addr)($ig_S18, 0)%p
 1751.                $v0_S21 = (prevgrid%base_addr)($ig_S18, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 1752.                $t_S19 = (myfirstlon%base_addr)(j, 0)
 1752.                $t_S20 = (mylastlon%base_addr)(j, 0)
 1752.                if ( $t_S20 + -$t_S19 >= 0 ) then
 1753.                   $SC_g2_I72 = g2%dim_1%SM
 1753.                   $SC_g2_I71 = g2%dim_1%EX
 1753.                   $SC_g2_I73 = g2%dim_1%LB
 1753.                   $SC_g2_I75 = g2%dim_2%SM
 1753.                   $SC_g2_I74 = g2%dim_2%EX
 1753.                   $SC_g2_I76 = g2%dim_2%LB
 1752.                   $I_L1752_239 = 0
 1752. !dir$ ivdep
 1752. !dir$ loop_info (automatic) cache_nt( jbperij, ibperij )
 1752.                   do
 1753.                      (g2%base_addr)((ibperij%base_addr)($t_S19 + $I_L1752_239, j, 0), (jbperij%base_addr)($t_S19 + $I_L1752_239, j, 0), 0) = (four%base_addr)(1 + $v0_S21, $t_S19 + $I_L1752_239, 0)
 1754.                      $I_L1752_239 = 1 + $I_L1752_239
 1752.                      if ( $I_L1752_239 >= 1 + $t_S20 + -$t_S19 ) exit
 1752.                   enddo
 1752.                endif
 1752.             else
 1756.                g3 = (grid3d%base_addr)($ig_S18, 0)%p
 1757.                $v0_S23 = (prevgrid%base_addr)($ig_S18, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 1758.                if ( mylastlev + -myfirstlev >= 0 ) then
 1758.                   $SCA_myfirstlon_I59 = (myfirstlon%base_addr)(j, 0)
 1758.                   $SCA_mylastlon_I60 = (mylastlon%base_addr)(j, 0)
 1761.                   $SC_g3_I78 = g3%dim_1%SM
 1761.                   $SC_g3_I77 = g3%dim_1%EX
 1761.                   $SC_g3_I79 = g3%dim_1%LB
 1761.                   $SC_g3_I81 = g3%dim_2%SM
 1761.                   $SC_g3_I80 = g3%dim_2%EX
 1761.                   $SC_g3_I82 = g3%dim_2%LB
 1761.                   $SC_g3_I84 = g3%dim_3%SM
 1761.                   $SC_g3_I83 = g3%dim_3%EX
 1761.                   $SC_g3_I85 = g3%dim_3%LB
 1758.                   $I_L1758_259 = 0
 1758.                   do
 1760.                      if ( $SCA_mylastlon_I60 + -$SCA_myfirstlon_I59 >= 0 ) then
 1760.                         $I_L1760_241 = 0
 1760. !dir$ ivdep
 1760.                         do
 1761.                            (g3%base_addr)((ibperij%base_addr)($SCA_myfirstlon_I59 + $I_L1760_241, j, 0), myfirstlev + $I_L1758_259, (jbperij%base_addr)($SCA_myfirstlon_I59 + $I_L1760_241, j, 0), 0) = (four%base_addr)(1 + $v0_S23 + $I_L1758_259, $SCA_myfirstlon_I59 + $I_L1760_241, 0)
 1762.                            $I_L1760_241 = 1 + $I_L1760_241
 1760.                            if ( $I_L1760_241 >= 1 + $SCA_mylastlon_I60 + -$SCA_myfirstlon_I59 ) exit
 1760.                         enddo
 1760.                      endif
 1763.                      $I_L1758_259 = 1 + $I_L1758_259
 1762.                      if ( $I_L1758_259 >= 1 + mylastlev + -myfirstlev ) exit
 1762.                   enddo
 1762.                endif
 1762.             endif
 1764.          enddo
 1764.       endif
 1764.    30 continue
 1769.       $snt_T4 = _mt_single( 6, _mt_rw_list(...) )
 1770.       kountg = 1
 1771.       $snt_T4 = _mt_endsingle( 6, _mt_rw_list(...), $snt_T4 )
 1772.       t$797 = omp_get_thread_num
 1773.       if ( nrecs_g > 0 ) then
 1772.          do
 1775.             $snt_T5 = _mt_single( 7, _mt_rw_list(...) )
 1776.             call mpi_waitany( nrecs_g, (requestr%base_addr)(1, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 1777.             ksg = (status%base_addr)(3, 0)
 1778.             t$798 = nrecs_g
 1778.             l = 1
 1778.             if ( nrecs_g > 0 ) then
 1778.                t$799 = nrecs_g
 1779.                $SC_messproc_I10 = messproc_g%dim_1%EX
 1779.                $SC_messproc_I11 = messproc_g%dim_1%LB
 1779.                $SC_messproc_I13 = messproc_g%dim_2%SM
 1779.                $SC_messproc_I12 = messproc_g%dim_2%EX
 1779.                $SC_messproc_I14 = messproc_g%dim_2%LB
 1778.                $I_L1778_243 = 0
 1778. !dir$ ivdep
 1778.                do
 1779.                   if ( (messproc_g%base_addr)(1, 1 + $I_L1778_243, 0) + -ksg == 0 ) then
 1785.                      t$800 = $I_L1778_243
 1778.                      l = ( 1 + $I_L1778_243 )
 1780.                      nglob = ( 1 + $I_L1778_243 )
 1781.                      ibglob = -1 + ibs(1 + $I_L1778_243)
 1782.                      mglob = (messproc_g%base_addr)(2, $I_L1778_243, 0)
 1782.                      goto 40
 1782.                   endif
 1785.                   $I_L1778_243 = 1 + $I_L1778_243
 1784.                   if ( $I_L1778_243 >= nrecs_g ) exit
 1784.                enddo
 1785.                t$800 = nrecs_g
 1785.                l = ( 1 + nrecs_g )
 1785.             endif
 1785.    40       continue
 1786.             iglob = 1
 1787.             ipar2g = 1 + mglob
 1788.             ipar3g = 1 + mglob
 1789.             $snt_T5 = _mt_endsingle( 7, _mt_rw_list(...), $snt_T5 )
 1792.             $kl_S28 = 1 + (klast_four%base_addr)(ksg, 0) + -(kfirst_four%base_addr)(ksg, 0)
 1832.             $SC_grid3d_I51 = grid3d%dim_1%EX
 1832.             $SC_grid3d_I52 = grid3d%dim_1%LB
 1829.             $SC_ibperij_I41 = ibperij%dim_1%EX
 1829.             $SC_ibperij_I42 = ibperij%dim_1%LB
 1829.             $SC_ibperij_I44 = ibperij%dim_2%SM
 1829.             $SC_ibperij_I43 = ibperij%dim_2%EX
 1829.             $SC_ibperij_I45 = ibperij%dim_2%LB
 1829.             $SC_jbperij_I46 = jbperij%dim_1%EX
 1829.             $SC_jbperij_I47 = jbperij%dim_1%LB
 1829.             $SC_jbperij_I49 = jbperij%dim_2%SM
 1829.             $SC_jbperij_I48 = jbperij%dim_2%EX
 1829.             $SC_jbperij_I50 = jbperij%dim_2%LB
 1824.             $SC_grid2d_I35 = grid2d%dim_1%EX
 1824.             $SC_grid2d_I36 = grid2d%dim_1%LB
 1829.             $SC_bufsend_I53 = bufsend%dim_1%EX
 1829.             $SC_bufsend_I54 = bufsend%dim_1%LB
 1835.             $SC_klast_four_I22 = klast_four%dim_1%EX
 1835.             $SC_klast_four_I23 = klast_four%dim_1%LB
 1835.             do
 1794.                $snt_T6 = _mt_critical( 8, _mt_rw_list(...) )
 1796.                if ( iglob <= ngridfields ) then
 1797.                   $SC_surfgrid_I69 = surfgrid%dim_1%EX
 1797.                   $SC_surfgrid_I70 = surfgrid%dim_1%LB
 1797.                   $SC_kfirst_four_I86 = kfirst_four%dim_1%EX
 1797.                   $SC_kfirst_four_I87 = kfirst_four%dim_1%LB
 1795.                   $I_iglob_245 = 0
 1795. !dir$ ivdep
 1795.                   do
 1797.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_245, 0) == .false. ) then
 1797.                         goto 50
 1797.                      endif
 1797.                      if ( (kfirst_four%base_addr)(ksg, 0) == 1 ) then
 1797.    50                   continue
 1798.                         iglob = ( iglob + $I_iglob_245 )
 1798.                         goto 60
 1798.                      endif
 1796.                      $I_iglob_245 = 1 + $I_iglob_245
 1795.                      if ( $I_iglob_245 >= 1 + ngridfields + -iglob ) exit
 1795.                   enddo
 1798.                   iglob = iglob + 1 + ngridfields + -iglob
 1798.                endif
 1798.    60          continue
 1800.                $ig_S29 = iglob
 1801.                if ( iglob <= ngridfields ) then
 1802.                   ib = ibglob
 1803.                   if ( (surfgrid%base_addr)(iglob, 0) /= .false. ) then
 1804.                      ipar = ipar2g
 1805.                      ibglob = 1 + ibglob + (messages_g%base_addr)(2, ipar2g, 0) + -(messages_g%base_addr)(1, ipar2g, 0)
 1806.                      ipar2g = 1 + ipar2g
 1807.                      if ( ipar2g > (messproc_g%base_addr)(2, nglob, 0) ) then
 1808.                         ipar2g = 1 + mglob
 1809.                         iglob = 1 + iglob
 1809.                      endif
 1809.                   else
 1812.                      ipar = ipar3g
 1813.                      ibglob = ibglob + $kl_S28 + -( $kl_S28 * (messages_g%base_addr)(1, ipar3g, 0) ) + $kl_S28 * (messages_g%base_addr)(2, ipar3g, 0)
 1814.                      ipar3g = 1 + ipar3g
 1815.                      if ( ipar3g > (messproc_g%base_addr)(2, nglob, 0) ) then
 1816.                         ipar3g = 1 + mglob
 1817.                         iglob = 1 + iglob
 1817.                      endif
 1817.                   endif
 1817.                endif
 1821.                $snt_T6 = _mt_endcritical( 8, _mt_rw_list(...), $snt_T6 )
 1822.                if ( $ig_S29 > ngridfields ) goto 70
 1823.                if ( (surfgrid%base_addr)($ig_S29, 0) /= .false. ) then
 1824.                   g2 = (grid2d%base_addr)($ig_S29, 0)%p
 1825.                   $j_S33 = (messages_g%base_addr)(3, ipar, 0)
 1827.                   $t_S30 = (messages_g%base_addr)(1, ipar, 0)
 1827.                   $t_S31 = (messages_g%base_addr)(2, ipar, 0)
 1827.                   if ( $t_S31 + -$t_S30 >= 0 ) then
 1829.                      $SC_g2_I72 = g2%dim_1%SM
 1829.                      $SC_g2_I71 = g2%dim_1%EX
 1829.                      $SC_g2_I73 = g2%dim_1%LB
 1829.                      $SC_g2_I75 = g2%dim_2%SM
 1829.                      $SC_g2_I74 = g2%dim_2%EX
 1829.                      $SC_g2_I76 = g2%dim_2%LB
 1827.                      $I_L1827_247 = 0
 1827. !dir$ ivdep
 1827.                      do
 1829.                         (g2%base_addr)((ibperij%base_addr)($t_S30 + $I_L1827_247, $j_S33, 0), (jbperij%base_addr)($t_S30 + $I_L1827_247, $j_S33, 0), 0) = (bufsend%base_addr)(1 + ib + $I_L1827_247, 0)
 1830.                         $I_L1827_247 = 1 + $I_L1827_247
 1827.                         if ( $I_L1827_247 >= 1 + $t_S31 + -$t_S30 ) exit
 1827.                      enddo
 1828.                      ib = ( 1 + ib + $t_S31 + -$t_S30 )
 1828.                   endif
 1828.                else
 1832.                   g3 = (grid3d%base_addr)($ig_S29, 0)%p
 1833.                   $j_S33 = (messages_g%base_addr)(3, ipar, 0)
 1835.                   $t_S34 = (kfirst_four%base_addr)(ksg, 0)
 1835.                   $t_S35 = (klast_four%base_addr)(ksg, 0)
 1835.                   if ( $t_S35 + -$t_S34 >= 0 ) then
 1835.                      $SCA_messages_I66 = (messages_g%base_addr)(1, ipar, 0)
 1835.                      $SCA_messages_I67 = (messages_g%base_addr)(2, ipar, 0)
 1838.                      $SC_g3_I78 = g3%dim_1%SM
 1838.                      $SC_g3_I77 = g3%dim_1%EX
 1838.                      $SC_g3_I79 = g3%dim_1%LB
 1838.                      $SC_g3_I81 = g3%dim_2%SM
 1838.                      $SC_g3_I80 = g3%dim_2%EX
 1838.                      $SC_g3_I82 = g3%dim_2%LB
 1838.                      $SC_g3_I84 = g3%dim_3%SM
 1838.                      $SC_g3_I83 = g3%dim_3%EX
 1838.                      $SC_g3_I85 = g3%dim_3%LB
 1835.                      $I_L1835_261 = 0
 1835.                      do
 1836.                         if ( $SCA_messages_I67 + -$SCA_messages_I66 >= 0 ) then
 1836.                            $I_L1836_249 = 0
 1836. !dir$ ivdep
 1836.                            do
 1838.                               (g3%base_addr)((ibperij%base_addr)($SCA_messages_I66 + $I_L1836_249, $j_S33, 0), $t_S34 + $I_L1835_261, (jbperij%base_addr)($SCA_messages_I66 + $I_L1836_249, $j_S33, 0), 0) = (bufsend%base_addr)(1 + ib + $I_L1836_249, 0)
 1839.                               $I_L1836_249 = 1 + $I_L1836_249
 1836.                               if ( $I_L1836_249 >= 1 + $SCA_messages_I67 + -$SCA_messages_I66 ) exit
 1836.                            enddo
 1837.                            ib = ( 1 + ib + $SCA_messages_I67 + -$SCA_messages_I66 )
 1837.                         endif
 1840.                         $I_L1835_261 = 1 + $I_L1835_261
 1839.                         if ( $I_L1835_261 >= 1 + $t_S35 + -$t_S34 ) exit
 1839.                      enddo
 1839.                   endif
 1839.                endif
 1841.             enddo
 1841.    70       continue
 1843.             $snt_T7 = _mt_single( 9, _mt_rw_list(...) )
 1844.             kountg = 1 + kountg
 1845.             $snt_T7 = _mt_endsingle( 9, _mt_rw_list(...), $snt_T7 )
 1845.             if ( kountg > nrecs_g ) exit
 1845.          enddo
 1845.       endif
 1850.       $snt_T8 = _mt_single( 10, _mt_rw_list(...) )
 1851.       call mpi_waitall( nrecs_f, (requests%base_addr)(1, 0), (stat%base_addr)(stat%dim_1%LB, stat%dim_2%LB, 0), ierr )
 1852.       $snt_T8 = _mt_endsingle( 10, _mt_rw_list(...), $snt_T8 )
 1596.       _free( t$225 )
 1854.       return
 1854.       end
 1854.       
 1914.       
 1914.       subroutine creategridtospec( nfull, nsurf )
 1871.       nfull_g = nfull
 1872.       nsurf_g = nsurf
 1874.       nspecfields = nfull + cvmg( nsurf, 0, havesurf )
 1875.       usedspecfields = 0
 1876.       lastusedspecvert = 0
 1877.       surfspec%header%a_contig = 1
 1877.       surfspec%dim_1%LB = 1
 1877.       surfspec%dim_1%EX = _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) )
 1877.       surfspec%dim_1%SM = 1
 1877.       $_allo_P0(0) = 0x1000000000001L
 1877.       $_allo_P0(1) = loc( surfspec )
 1877.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1878.       prevspec%header%a_contig = 1
 1878.       prevspec%dim_1%LB = 1
 1878.       prevspec%dim_1%EX = _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) )
 1878.       prevspec%dim_1%SM = 1
 1878.       $_allo_P1(0) = 0x1000000000001L
 1878.       $_allo_P1(1) = loc( prevspec )
 1878.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1879.       spec1d%header%a_contig = 1
 1879.       spec1d%dim_1%LB = 1
 1879.       spec1d%dim_1%EX = _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) )
 1879.       spec1d%dim_1%SM = 9
 1879.       $_allo_P2(0) = 0x1000000000001L
 1879.       $_allo_P2(1) = loc( spec1d )
 1879.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1879.       if ( _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) ) > 0 ) then
 1879.          $I_L1879_16 = 0
 1879.          do
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p = $_StaticDV_P3
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%el_len = 64
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%assoc = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%ptr_alloc = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%p_or_a = 1
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%a_contig = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%n_dim = 1
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%orig_base = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%orig_size = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%n_codim = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%dv_versn = 2
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%dv_smunit = 64
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%d_type = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%n_params = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%header%d_type_idx = 13
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%dim_1%LB = 1
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%dim_1%EX = 0
 1879.             (spec1d%base_addr)(1 + $I_L1879_16, 0)%p%dim_1%SM = 1
 1879.             $I_L1879_16 = 1 + $I_L1879_16
 1879.             if ( $I_L1879_16 >= _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) ) ) exit
 1879.          enddo
 1879.       endif
 1880.       spec2d%header%a_contig = 1
 1880.       spec2d%dim_1%LB = 1
 1880.       spec2d%dim_1%EX = ( max( 0, nfull + cvmg( nsurf, 0, havesurf ) ) )
 1880.       spec2d%dim_1%SM = 12
 1880.       $_allo_P4(0) = 0x1000000000001L
 1880.       $_allo_P4(1) = loc( spec2d )
 1880.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 1880.       if ( ( max( 0, nfull + cvmg( nsurf, 0, havesurf ) ) ) > 0 ) then
 1880.          $I_L1880_18 = 0
 1880.          do
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p = $_StaticDV_P5
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%el_len = 64
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%assoc = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%ptr_alloc = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%p_or_a = 1
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%a_contig = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%n_dim = 2
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%orig_base = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%orig_size = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%n_codim = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%dv_versn = 2
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%dv_smunit = 64
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%d_type = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%n_params = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%header%d_type_idx = 13
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%dim_1%LB = 1
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%dim_1%EX = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%dim_1%SM = 1
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%dim_2%LB = 1
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%dim_2%EX = 0
 1880.             (spec2d%base_addr)(1 + $I_L1880_18, 0)%p%dim_2%SM = 1
 1880.             $I_L1880_18 = 1 + $I_L1880_18
 1880.             if ( $I_L1880_18 >= ( max( 0, nfull + cvmg( nsurf, 0, havesurf ) ) ) ) exit
 1880.          enddo
 1880.       endif
 1881.       nvertspec = cvmg( nsurf, 0, havesurf ) + nfull * kmaxloc
 1883.       ngridfields = nsurf + nfull
 1884.       usedgridfields = 0
 1885.       lastusedgridvert = 0
 1886.       surfgrid%header%a_contig = 1
 1886.       surfgrid%dim_1%LB = 1
 1886.       surfgrid%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1886.       surfgrid%dim_1%SM = 1
 1886.       $_allo_P6(0) = 0x1000000000001L
 1886.       $_allo_P6(1) = loc( surfgrid )
 1886.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 1887.       prevgrid%header%a_contig = 1
 1887.       prevgrid%dim_1%LB = 1
 1887.       prevgrid%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1887.       prevgrid%dim_1%SM = 1
 1887.       $_allo_P7(0) = 0x1000000000001L
 1887.       $_allo_P7(1) = loc( prevgrid )
 1887.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 1888.       grid2d%header%a_contig = 1
 1888.       grid2d%dim_1%LB = 1
 1888.       grid2d%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1888.       grid2d%dim_1%SM = 12
 1888.       $_allo_P8(0) = 0x1000000000001L
 1888.       $_allo_P8(1) = loc( grid2d )
 1888.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 1888.       if ( ( max( 0, nsurf + nfull ) ) > 0 ) then
 1888.          $I_L1888_20 = 0
 1888.          do
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p = $_StaticDV_P9
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%el_len = 64
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%assoc = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%ptr_alloc = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%p_or_a = 1
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%a_contig = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%n_dim = 2
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%orig_base = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%orig_size = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%n_codim = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%dv_versn = 2
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%dv_smunit = 64
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%d_type = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%n_params = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%header%d_type_idx = 13
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%dim_1%LB = 1
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%dim_1%EX = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%dim_1%SM = 1
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%dim_2%LB = 1
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%dim_2%EX = 0
 1888.             (grid2d%base_addr)(1 + $I_L1888_20, 0)%p%dim_2%SM = 1
 1888.             $I_L1888_20 = 1 + $I_L1888_20
 1888.             if ( $I_L1888_20 >= ( max( 0, nsurf + nfull ) ) ) exit
 1888.          enddo
 1888.       endif
 1889.       grid3d%header%a_contig = 1
 1889.       grid3d%dim_1%LB = 1
 1889.       grid3d%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1889.       grid3d%dim_1%SM = 15
 1889.       $_allo_P10(0) = 0x1000000000001L
 1889.       $_allo_P10(1) = loc( grid3d )
 1889.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 1889.       if ( ( max( 0, nsurf + nfull ) ) > 0 ) then
 1889.          $I_L1889_22 = 0
 1889.          do
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p = $_StaticDV_P11
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%base_addr = pointer to array[1] of array[1] of array[1] of real (kind=8)( 0 )
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%el_len = 64
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%assoc = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%ptr_alloc = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%p_or_a = 1
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%a_contig = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%n_dim = 3
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%orig_base = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%orig_size = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%n_codim = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%dv_versn = 2
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%dv_smunit = 64
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%d_type = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%n_params = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%header%d_type_idx = 13
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_1%LB = 1
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_1%EX = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_1%SM = 1
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_2%LB = 1
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_2%EX = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_2%SM = 1
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_3%LB = 1
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_3%EX = 0
 1889.             (grid3d%base_addr)(1 + $I_L1889_22, 0)%p%dim_3%SM = 1
 1889.             $I_L1889_22 = 1 + $I_L1889_22
 1889.             if ( $I_L1889_22 >= ( max( 0, nsurf + nfull ) ) ) exit
 1889.          enddo
 1889.       endif
 1890.       fieldfordellam%header%a_contig = 1
 1890.       fieldfordellam%dim_1%LB = 1
 1890.       fieldfordellam%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1890.       fieldfordellam%dim_1%SM = 1
 1890.       $_allo_P12(0) = 0x1000000000001L
 1890.       $_allo_P12(1) = loc( fieldfordellam )
 1890.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 1891.       nvertgrid = cvmg( nsurf, 0, havesurf ) + nfull * kmaxloc
 1893.       willdellam = .false.
 1894.       useddellamfields = nfull + cvmg( nsurf, 0, havesurf )
 1895.       lastuseddellamvert = cvmg( nsurf, 0, havesurf ) + nfull * kmaxloc
 1896.       prevvertdellamsource%header%a_contig = 1
 1896.       prevvertdellamsource%dim_1%LB = 1
 1896.       prevvertdellamsource%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1896.       prevvertdellamsource%dim_1%SM = 1
 1896.       $_allo_P13(0) = 0x1000000000001L
 1896.       $_allo_P13(1) = loc( prevvertdellamsource )
 1896.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
 1898.       t$833 = 2 * nfull * kmaxloc + 2 * cvmg( nsurf, 0, havesurf )
 1898.       dv = nobankconflicts( t$833 )
 1899.       t$833 = nvertspec * jmaxhalf
 1899.       dvjh = nobankconflicts( t$833 )
 1900.       t$833 = nvertgrid * myjmax_f
 1900.       dvdlj = nobankconflicts( t$833 )
 1902.       spec%header%a_contig = 1
 1902.       spec%dim_1%LB = 1
 1902.       spec%dim_1%EX = ( max( 0, dlmn ) )
 1902.       spec%dim_1%SM = 1
 1902.       spec%dim_2%LB = 1
 1902.       spec%dim_2%EX = ( max( 0, dv ) )
 1902.       spec%dim_2%SM = ( max( 0, dlmn ) )
 1902.       $_allo_P14(0) = 0x1000000000001L
 1902.       $_allo_P14(1) = loc( spec )
 1902.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
 1903.       four%header%a_contig = 1
 1903.       four%dim_1%LB = 1
 1903.       four%dim_1%EX = ( max( 0, dvdlj ) )
 1903.       four%dim_1%SM = 1
 1903.       four%dim_2%LB = 1
 1903.       four%dim_2%EX = ( max( 0, dip1 ) )
 1903.       four%dim_2%SM = ( max( 0, dvdlj ) )
 1903.       $_allo_P15(0) = 0x1000000000001L
 1903.       $_allo_P15(1) = loc( four )
 1903.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 1904.       mnodes%header%a_contig = 1
 1904.       mnodes%dim_1%LB = 0
 1904.       mnodes%dim_1%EX = ( max( 0, maxnodes_four ) )
 1904.       mnodes%dim_1%SM = 1
 1904.       $_allo_P16(0) = 0x1000000000001L
 1904.       $_allo_P16(1) = loc( mnodes )
 1904.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 1914.       return
 1914.       end
 1914.       
 2000.       
 2000.       subroutine dogridtospec
  438.       if ( t$191 == 0 ) then
  438.          t$237(1) = 3
  438.          t$238(1) = 0
  438.          t$239(1) = 0
  438.          t$234(1) = int( loc( t$190 ), 8 )
  438.          t$235(1) = 0
  438.          t$236(1) = int( loc( t$233 ), 8 )
  438.          t$191 = __get_dynamic_type( 2, t$234(1), t$237(1), 1, t$235(1), t$236(1), t$238(1), t$239(1) )
  438.       endif
  438.       p = $_StaticDV_P0
  438.       p%base_addr = pointer to type multifft( 0 )
  438.       p%header%el_len = 1344
  438.       p%header%assoc = 0
  438.       p%header%ptr_alloc = 0
  438.       p%header%p_or_a = 1
  438.       p%header%a_contig = 0
  438.       p%header%n_dim = 0
  438.       p%header%orig_base = 0
  438.       p%header%orig_size = 0
  438.       p%header%n_codim = 0
  438.       p%header%dv_versn = 2
  438.       p%header%dv_smunit = 64
  438.       p%header%d_type = 0
  438.       p%header%n_params = 0
  438.       p%header%d_type_idx = t$191
 1940.       if ( nspecfields + -usedspecfields /= 0 ) then
 1941.          $Unit_temp_O0 = nfprt
 1941.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$121,  _substr(t$120,1,46), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DoGridToSpec)**', 0x800600000000L ) ) )
 1942.           _substr(t$835,1,18) = '**(DoGridToSpec)**'
 1942.          call _stop(  _substr(t$835,1,18) )
 1943.       else if ( ngridfields + -usedgridfields /= 0 ) then
 1944.          $Unit_temp_O1 = nfprt
 1944.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$123,  _substr(t$122,1,43), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DoGridToSpec)**', 0x800600000000L ) ) )
 1945.           _substr(t$836,1,18) = '**(DoGridToSpec)**'
 1945.          call _stop(  _substr(t$836,1,18) )
 1945.       else
 1950.           _substr(t$837,1,12) = 'DoGridToSpec'
 1950.          call threaddecomp( 1, mymnmax, mnfirst, mnlast,  _substr(t$837,1,12) )
 1951.           _substr(t$838,1,12) = 'DoGridToSpec'
 1951.          call threaddecomp( 1, mymnextmax, mnextfirst, mnextlast,  _substr(t$838,1,12) )
 1952.           _substr(t$839,1,12) = 'DoGridToSpec'
 1952.          call threaddecomp( 1, jbmax, jbfirst, jblast,  _substr(t$839,1,12) )
 1957.          call depositgrid
 1958.          _mt_barrier( 1, _mt_rw_list(...) )
 1962.          $t_S1 = nblockfft
 1962.          if ( nblockfft > 0 ) then
 1962.             $I_L1962_136 = 0
 1962.             do
 1963.                p%header%a_contig = 0
 1963.                p%header%assoc = 1
 1963.                p%header%d_type_idx = t$191
 1963.                p%header%ptr_alloc = blockfft%header%ptr_alloc
 1963.                p%header%orig_base = blockfft%header%orig_base
 1963.                p%header%orig_size = blockfft%header%orig_size
 1963.                p%base_addr = loc( (blockfft%base_addr)(1 + $I_L1962_136, 0) )
 1964.                first = 1 + -nvertgrid + nvertgrid * (blockfft%base_addr)(1 + $I_L1962_136, 0)%firstlat
 1965.                last = nvertgrid * (blockfft%base_addr)(1 + $I_L1962_136, 0)%lastlat
 1966.                 _substr(t$843,1,12) = 'DoGridToSpec'
 1966.                call threaddecomp( first, last, fftfirst, fftlast,  _substr(t$843,1,12) )
 1967.                fftsize = 1 + fftlast + -fftfirst
 1968.                if ( tamblock == 0 ) then
 1970.                   t$845 = 0
 1970.                   t$848 = 0
 1970.                   if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1970. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1970.                      t$844 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1970.                   else
 1970.                      t$845 = (p%base_addr)(0)%trigs%dim_1%EX
 1970.                      t$848 = int( _alloc( max( 0, 8 * max( 0, t$845 ) ) ), 8 )
 1970.                      $F_A33 = t$845
 1970.                      if ( t$845 > 0 ) then
 1970.                         $SCA_p_I17 = (p%base_addr)(0)%trigs%dim_1%SM
 1970.                         $SCA_p_I18 = (p%base_addr)(0)%trigs%dim_1%LB
 1970.                         $SCA_p_I19 = (p%base_addr)(0)%trigs%dim_1%EX
 1970.                         $I_L1970_122 = 0
 1970. !dir$ ivdep
 1970.                         do
 1970.                            t$847(1 + $I_L1970_122) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I18 + $I_L1970_122, 0)
 1970.                            $I_L1970_122 = 1 + $I_L1970_122
 1970.                            if ( $I_L1970_122 >= $F_A33 ) exit
 1970.                         enddo
 1970.                      endif
 1970. !dir$ suppress t$847
 1970.                      t$844 = loc( t$847 )
 1970.                   endif
 1970.                   t$850 = 0
 1970.                   t$853 = 0
 1970.                   if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1970. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1970.                      t$849 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1970.                   else
 1970.                      t$850 = (p%base_addr)(0)%factors%dim_1%EX
 1970.                      t$853 = int( _alloc( max( 0, 4 * max( 0, t$850 ) ) ), 8 )
 1970.                      $F_A34 = t$850
 1970.                      if ( t$850 > 0 ) then
 1970.                         $SCA_p_I20 = (p%base_addr)(0)%factors%dim_1%SM
 1970.                         $SCA_p_I21 = (p%base_addr)(0)%factors%dim_1%LB
 1970.                         $SCA_p_I22 = (p%base_addr)(0)%factors%dim_1%EX
 1970.                         $I_L1970_124 = 0
 1970. !dir$ ivdep
 1970.                         do
 1970.                            t$852(1 + $I_L1970_124) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I21 + $I_L1970_124, 0)
 1970.                            $I_L1970_124 = 1 + $I_L1970_124
 1970.                            if ( $I_L1970_124 >= $F_A34 ) exit
 1970.                         enddo
 1970.                      endif
 1970. !dir$ suppress t$852
 1970.                      t$849 = loc( t$852 )
 1970.                   endif
 1969.                   call dirffttrans( (four%base_addr)(fftfirst, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, fftsize, t$844, (p%base_addr)(0)%ntrigs, t$849, (p%base_addr)(0)%nfactors )
 1970.                   if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1970.                      _free( t$853 )
 1970.                   endif
 1970.                   if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1970.                      _free( t$848 )
 1970.                   endif
 1970.                else
 1972.                   firstblock = fftfirst
 1972.                   do
 1975.                      sizeblock = 1 + min( fftlast, -1 + tamblock + firstblock ) + -firstblock
 1977.                      t$855 = 0
 1977.                      t$858 = 0
 1977.                      if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1977. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1977.                         t$854 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1977.                      else
 1977.                         t$855 = (p%base_addr)(0)%trigs%dim_1%EX
 1977.                         t$858 = int( _alloc( max( 0, 8 * max( 0, t$855 ) ) ), 8 )
 1977.                         $F_A35 = t$855
 1977.                         if ( t$855 > 0 ) then
 1977.                            $SCA_p_I23 = (p%base_addr)(0)%trigs%dim_1%SM
 1977.                            $SCA_p_I24 = (p%base_addr)(0)%trigs%dim_1%LB
 1977.                            $SCA_p_I25 = (p%base_addr)(0)%trigs%dim_1%EX
 1977.                            $I_L1977_126 = 0
 1977. !dir$ ivdep
 1977.                            do
 1977.                               t$857(1 + $I_L1977_126) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I24 + $I_L1977_126, 0)
 1977.                               $I_L1977_126 = 1 + $I_L1977_126
 1977.                               if ( $I_L1977_126 >= $F_A35 ) exit
 1977.                            enddo
 1977.                         endif
 1977. !dir$ suppress t$857
 1977.                         t$854 = loc( t$857 )
 1977.                      endif
 1977.                      t$860 = 0
 1977.                      t$863 = 0
 1977.                      if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1977. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1977.                         t$859 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1977.                      else
 1977.                         t$860 = (p%base_addr)(0)%factors%dim_1%EX
 1977.                         t$863 = int( _alloc( max( 0, 4 * max( 0, t$860 ) ) ), 8 )
 1977.                         $F_A36 = t$860
 1977.                         if ( t$860 > 0 ) then
 1977.                            $SCA_p_I26 = (p%base_addr)(0)%factors%dim_1%SM
 1977.                            $SCA_p_I27 = (p%base_addr)(0)%factors%dim_1%LB
 1977.                            $SCA_p_I28 = (p%base_addr)(0)%factors%dim_1%EX
 1977.                            $I_L1977_128 = 0
 1977. !dir$ ivdep
 1977.                            do
 1977.                               t$862(1 + $I_L1977_128) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I27 + $I_L1977_128, 0)
 1977.                               $I_L1977_128 = 1 + $I_L1977_128
 1977.                               if ( $I_L1977_128 >= $F_A36 ) exit
 1977.                            enddo
 1977.                         endif
 1977. !dir$ suppress t$862
 1977.                         t$859 = loc( t$862 )
 1977.                      endif
 1976.                      call dirffttrans( (four%base_addr)(firstblock, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, sizeblock, t$854, (p%base_addr)(0)%ntrigs, t$859, (p%base_addr)(0)%nfactors )
 1977.                      if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1977.                         _free( t$863 )
 1977.                      endif
 1977.                      if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1977.                         _free( t$858 )
 1977.                      endif
 1978.                      firstblock = tamblock + firstblock
 1978.                      if ( firstblock > fftlast ) exit
 1978.                   enddo
 1978.                endif
 1988.                $I_L1962_136 = 1 + $I_L1962_136
 1983.                if ( $I_L1962_136 >= $t_S1 ) exit
 1983.             enddo
 1983.          endif
 1990.          _mt_barrier( 2, _mt_rw_list(...) )
 1994.          call fourtospec
 1995.          _mt_barrier( 3, _mt_rw_list(...) )
 1999.          s1 = $_StaticDV_P1
 1999.          s1%base_addr = pointer to array[1] of real (kind=8)( 0 )
 1999.          s1%dim_1%LB = 1
 1999.          s1%dim_1%EX = 0
 1999.          s1%dim_1%SM = 1
 1999.          s2 = $_StaticDV_P2
 1999.          s2%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 1999.          s2%dim_1%LB = 1
 1999.          s2%dim_1%EX = 0
 1999.          s2%dim_1%SM = 1
 1999.          s2%dim_2%LB = 1
 1999.          s2%dim_2%EX = 0
 1999.          s2%dim_2%SM = 1
 1999.          if ( nspecfields > 0 ) then
 1999.             $SC_spec2d_I15 = spec2d%dim_1%EX
 1999.             $SC_spec2d_I16 = spec2d%dim_1%LB
 1999.             $SC_lmnmap_I13 = lmnmap%dim_1%EX
 1999.             $SC_lmnmap_I14 = lmnmap%dim_1%LB
 1999.             $SC_spec_I6 = spec%dim_1%EX
 1999.             $SC_spec_I7 = spec%dim_1%LB
 1999.             $SC_lmnextmap_I8 = lmnextmap%dim_1%EX
 1999.             $SC_lmnextmap_I9 = lmnextmap%dim_1%LB
 1999.             $SC_spec_I11 = spec%dim_2%SM
 1999.             $SC_spec_I10 = spec%dim_2%EX
 1999.             $SC_spec_I12 = spec%dim_2%LB
 1999.             $SC_prevspec_I4 = prevspec%dim_1%EX
 1999.             $SC_prevspec_I5 = prevspec%dim_1%LB
 1999.             $SC_spec1d_I2 = spec1d%dim_1%EX
 1999.             $SC_spec1d_I3 = spec1d%dim_1%LB
 1999.             $SC_surfspec_I0 = surfspec%dim_1%EX
 1999.             $SC_surfspec_I1 = surfspec%dim_1%LB
 1999.             $I_L1999_146 = 0
 1999. !dir$ loop_info (automatic) cache_nt( surfspec )
 1999.             do
 1999.                if ( (surfspec%base_addr)(1 + $I_L1999_146, 0) /= .false. ) then
 1999.                   s1 = (spec1d%base_addr)(1 + $I_L1999_146, 0)%p
 1999.                   $lastv_S4 = 1 + (prevspec%base_addr)(1 + $I_L1999_146, 0)
 1999.                   if ( -s1%dim_1%EX + 2 * mymnextmax == 0 ) then
 1999.                      if ( mnextlast + -mnextfirst >= 0 ) then
 1999.                         $SC_s1_I30 = s1%dim_1%SM
 1999.                         $SC_s1_I31 = s1%dim_1%LB
 1999.                         $SC_s1_I29 = s1%dim_1%EX
 1999.                         $I_L1999_112 = 0
 1999. !dir$ ivdep
 1999.                         do
 1999.                            (s1%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1999_112, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1999_112, 0), $lastv_S4, 0)
 1999.                            (s1%base_addr)(2 * mnextfirst + 2 * $I_L1999_112, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1999_112, 0), nvertspec + $lastv_S4, 0)
 1999.                            $I_L1999_112 = 1 + $I_L1999_112
 1999.                            if ( $I_L1999_112 >= 1 + mnextlast + -mnextfirst ) exit
 1999.                         enddo
 1999.                      endif
 1999.                   else if ( mnlast + -mnfirst >= 0 ) then
 1999.                      $SC_s1_I30 = s1%dim_1%SM
 1999.                      $SC_s1_I31 = s1%dim_1%LB
 1999.                      $SC_s1_I29 = s1%dim_1%EX
 1999.                      $I_L1999_114 = 0
 1999. !dir$ ivdep
 1999.                      do
 1999.                         (s1%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1999_114, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1999_114, 0), $lastv_S4, 0)
 1999.                         (s1%base_addr)(2 * mnfirst + 2 * $I_L1999_114, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1999_114, 0), nvertspec + $lastv_S4, 0)
 1999.                         $I_L1999_114 = 1 + $I_L1999_114
 1999.                         if ( $I_L1999_114 >= 1 + mnlast + -mnfirst ) exit
 1999.                      enddo
 1999.                   endif
 1999.                else
 1999.                   s2 = (spec2d%base_addr)(1 + $I_L1999_146, 0)%p
 1999.                   $lastv_S8 = (prevspec%base_addr)(1 + $I_L1999_146, 0)
 1999.                   if ( -s2%dim_1%EX + 2 * mymnextmax == 0 ) then
 1999.                      if ( kmaxloc > 0 ) then
 1999.                         if ( mnextlast + -mnextfirst >= 0 ) then
 1999.                            $SC_s2_I33 = s2%dim_1%SM
 1999.                            $SC_s2_I34 = s2%dim_1%LB
 1999.                            $SC_s2_I36 = s2%dim_2%SM
 1999.                            $SC_s2_I35 = s2%dim_2%EX
 1999.                            $SC_s2_I37 = s2%dim_2%LB
 1999.                            $SC_s2_I32 = s2%dim_1%EX
 1999.                            $I_L1999_142 = 0
 1999.                            do
 1999.                               $I_L1999_140 = 0
 1999.                               do
 1999.                                  $I_L1999_130 = 0
 1999. !dir$ shortloop16
 1999. !dir$ blocking_size( 2, 2 )
 1999.                                  do
 1999.                                     $I_L1999_119 = 0
 1999. !dir$ ivdep
 1999. !dir$ blocking_size( 256, 256 )
 1999.                                     do
 1999.                                        (s2%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L1999_119 + 512 * $I_L1999_140, 1 + $I_L1999_130 + 2 * $I_L1999_142, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1999_119 + 256 * $I_L1999_140, 0), 1 + $lastv_S8 + $I_L1999_130 + 2 * $I_L1999_142, 0)
 1999.                                        (s2%base_addr)(2 * mnextfirst + 2 * $I_L1999_119 + 512 * $I_L1999_140, 1 + $I_L1999_130 + 2 * $I_L1999_142, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1999_119 + 256 * $I_L1999_140, 0), 1 + nvertspec + $lastv_S8 + $I_L1999_130 + 2 * $I_L1999_142, 0)
 1999.                                        $I_L1999_119 = 1 + $I_L1999_119
 1999.                                        if ( $I_L1999_119 >= min( 1 + mnextlast + -mnextfirst, 256 + 256 * $I_L1999_140 ) + -256 * $I_L1999_140 ) exit
 1999.                                     enddo
 1999.                                     $I_L1999_130 = 1 + $I_L1999_130
 1999.                                     if ( $I_L1999_130 >= min( kmaxloc, 2 + 2 * $I_L1999_142 ) + -2 * $I_L1999_142 ) exit
 1999.                                  enddo
 1999.                                  $I_L1999_140 = 1 + $I_L1999_140
 1999.                                  if ( $I_L1999_140 >= 1 + max( 0, -1 + _rsh( 256 + mnextlast + -mnextfirst, 8 ) ) ) exit
 1999.                               enddo
 1999.                               $I_L1999_142 = 1 + $I_L1999_142
 1999.                               if ( $I_L1999_142 >= 1 + max( 0, -1 + _rsh( 1 + kmaxloc, 1 ) ) ) exit
 1999.                            enddo
 1999.                         endif
 1999.                      endif
 1999.                   else if ( kmaxloc > 0 ) then
 1999.                      if ( mnlast + -mnfirst >= 0 ) then
 1999.                         $SC_s2_I33 = s2%dim_1%SM
 1999.                         $SC_s2_I34 = s2%dim_1%LB
 1999.                         $SC_s2_I36 = s2%dim_2%SM
 1999.                         $SC_s2_I35 = s2%dim_2%EX
 1999.                         $SC_s2_I37 = s2%dim_2%LB
 1999.                         $SC_s2_I32 = s2%dim_1%EX
 1999.                         $I_L1999_144 = 0
 1999.                         do
 1999.                            $I_L1999_138 = 0
 1999.                            do
 1999.                               $I_L1999_133 = 0
 1999. !dir$ shortloop16
 1999. !dir$ blocking_size( 2, 2 )
 1999.                               do
 1999.                                  $I_L1999_116 = 0
 1999. !dir$ ivdep
 1999. !dir$ blocking_size( 256, 256 )
 1999.                                  do
 1999.                                     (s2%base_addr)(-1 + 2 * mnfirst + 2 * $I_L1999_116 + 512 * $I_L1999_138, 1 + $I_L1999_133 + 2 * $I_L1999_144, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1999_116 + 256 * $I_L1999_138, 0), 1 + $lastv_S8 + $I_L1999_133 + 2 * $I_L1999_144, 0)
 1999.                                     (s2%base_addr)(2 * mnfirst + 2 * $I_L1999_116 + 512 * $I_L1999_138, 1 + $I_L1999_133 + 2 * $I_L1999_144, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1999_116 + 256 * $I_L1999_138, 0), 1 + nvertspec + $lastv_S8 + $I_L1999_133 + 2 * $I_L1999_144, 0)
 1999.                                     $I_L1999_116 = 1 + $I_L1999_116
 1999.                                     if ( $I_L1999_116 >= min( 1 + mnlast + -mnfirst, 256 + 256 * $I_L1999_138 ) + -256 * $I_L1999_138 ) exit
 1999.                                  enddo
 1999.                                  $I_L1999_133 = 1 + $I_L1999_133
 1999.                                  if ( $I_L1999_133 >= min( kmaxloc, 2 + 2 * $I_L1999_144 ) + -2 * $I_L1999_144 ) exit
 1999.                               enddo
 1999.                               $I_L1999_138 = 1 + $I_L1999_138
 1999.                               if ( $I_L1999_138 >= 1 + max( 0, -1 + _rsh( 256 + mnlast + -mnfirst, 8 ) ) ) exit
 1999.                            enddo
 1999.                            $I_L1999_144 = 1 + $I_L1999_144
 1999.                            if ( $I_L1999_144 >= 1 + max( 0, -1 + _rsh( 1 + kmaxloc, 1 ) ) ) exit
 1999.                         enddo
 1999.                      endif
 1999.                   endif
 1999.                endif
 1999.                $I_L1999_146 = 1 + $I_L1999_146
 1999.                if ( $I_L1999_146 >= nspecfields ) exit
 1999.             enddo
 1999.          endif
 1999.       endif
 2000.       return
 2000.       end
 2000.       
 2027.       
 2027.       subroutine depositgrid
 2028.       g2 = $_StaticDV_P0
 2028.       g2%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 2028.       g2%dim_1%LB = 1
 2028.       g2%dim_1%EX = 0
 2028.       g2%dim_1%SM = 1
 2028.       g2%dim_2%LB = 1
 2028.       g2%dim_2%EX = 0
 2028.       g2%dim_2%SM = 1
 2006.       g3 = $_StaticDV_P1
 2006.       g3%base_addr = pointer to array[1] of array[1] of array[1] of real (kind=8)( 0 )
 2006.       g3%dim_1%LB = 1
 2006.       g3%dim_1%EX = 0
 2006.       g3%dim_1%SM = 1
 2006.       g3%dim_2%LB = 1
 2006.       g3%dim_2%EX = 0
 2006.       g3%dim_2%SM = 1
 2006.       g3%dim_3%LB = 1
 2006.       g3%dim_3%EX = 0
 2006.       g3%dim_3%SM = 1
 2006.       t$124 = ( 1 + nrecs_f )
 2025.       t$241 = _zla( 0, ( 1 + nrecs_f ) )
 2025.       t$244 = 4 * _zla( 0, ( 1 + nrecs_f ) )
 2006.       t$125 = ( 1 + nrecs_g )
 2026.       t$245 = _zla( 0, ( 1 + nrecs_g ) )
 2026.       t$247 = 4 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) )
 2006.       t$242 = int( _alloc( 4 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) ) ), 8 )
 2025.       t$243 = t$242
 2026.       t$246 = t$242 + 4 * _zla( 0, ( 1 + nrecs_f ) )
 2030.       comm = 1140850688
 2031.       $m_S1 = 0
 2032.       ibr(1) = 1
 2033.       if ( nrecs_f > 0 ) then
 2036.          $SC_messages_I5 = messages_f%dim_1%EX
 2036.          $SC_messages_I6 = messages_f%dim_1%LB
 2036.          $SC_messages_I8 = messages_f%dim_2%SM
 2036.          $SC_messages_I7 = messages_f%dim_2%EX
 2036.          $SC_messages_I9 = messages_f%dim_2%LB
 2035.          $SC_messproc_I0 = messproc_f%dim_1%EX
 2035.          $SC_messproc_I1 = messproc_f%dim_1%LB
 2035.          $SC_messproc_I3 = messproc_f%dim_2%SM
 2035.          $SC_messproc_I2 = messproc_f%dim_2%EX
 2035.          $SC_messproc_I4 = messproc_f%dim_2%LB
 2033.          $I_L2033_246 = 0
 2033.          do
 2034.             ib = 0
 2035.             $t_S2 = (messproc_f%base_addr)(2, 1 + $I_L2033_246, 0)
 2035.             ipar = 1 + $m_S1
 2035.             if ( $t_S2 + -$m_S1 > 0 ) then
 2035.                $I_L2035_216 = 0
 2035. !dir$ ivdep
 2035.                do
 2036.                   ib = 1 + ib + (messages_f%base_addr)(2, 1 + $m_S1 + $I_L2035_216, 0) + -(messages_f%base_addr)(1, 1 + $m_S1 + $I_L2035_216, 0)
 2037.                   $I_L2035_216 = 1 + $I_L2035_216
 2035.                   if ( $I_L2035_216 >= ( $t_S2 + -$m_S1 ) ) exit
 2035.                enddo
 2037.                ipar = 1 + $t_S2
 2037.             endif
 2038.             ibr(2 + $I_L2033_246) = ibr(1 + $I_L2033_246) + ib * nvertgrid
 2039.             $m_S1 = $t_S2
 2040.             $I_L2033_246 = 1 + $I_L2033_246
 2037.             if ( $I_L2033_246 >= nrecs_f ) exit
 2037.          enddo
 2037.       endif
 2041.       $m_S5 = 0
 2042.       ibs(1) = 1
 2043.       n = 1
 2043.       if ( nrecs_g > 0 ) then
 2048.          $SC_kfirst_four_I20 = kfirst_four%dim_1%EX
 2048.          $SC_kfirst_four_I21 = kfirst_four%dim_1%LB
 2048.          $SC_klast_four_I22 = klast_four%dim_1%EX
 2048.          $SC_klast_four_I23 = klast_four%dim_1%LB
 2046.          $SC_messages_I15 = messages_g%dim_1%EX
 2046.          $SC_messages_I16 = messages_g%dim_1%LB
 2046.          $SC_messages_I18 = messages_g%dim_2%SM
 2046.          $SC_messages_I17 = messages_g%dim_2%EX
 2046.          $SC_messages_I19 = messages_g%dim_2%LB
 2045.          $SC_messproc_I10 = messproc_g%dim_1%EX
 2045.          $SC_messproc_I11 = messproc_g%dim_1%LB
 2045.          $SC_messproc_I13 = messproc_g%dim_2%SM
 2045.          $SC_messproc_I12 = messproc_g%dim_2%EX
 2045.          $SC_messproc_I14 = messproc_g%dim_2%LB
 2043.          $I_L2043_248 = 0
 2043.          do
 2044.             ib = 0
 2045.             $t_S6 = (messproc_g%base_addr)(2, 1 + $I_L2043_248, 0)
 2045.             ipar = 1 + $m_S5
 2045.             if ( $t_S6 + -$m_S5 > 0 ) then
 2045.                $I_L2045_218 = 0
 2045. !dir$ ivdep
 2045.                do
 2046.                   ib = 1 + ib + (messages_g%base_addr)(2, 1 + $m_S5 + $I_L2045_218, 0) + -(messages_g%base_addr)(1, 1 + $m_S5 + $I_L2045_218, 0)
 2047.                   $I_L2045_218 = 1 + $I_L2045_218
 2045.                   if ( $I_L2045_218 >= ( $t_S6 + -$m_S5 ) ) exit
 2045.                enddo
 2047.                ipar = 1 + $t_S6
 2047.             endif
 2048.             $k_S8 = 1 + (klast_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L2043_248, 0), 0) + -(kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L2043_248, 0), 0)
 2049.             $ns_S9 = 0
 2050.             if ( (kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L2043_248, 0), 0) == 1 ) then
 2050.                $ns_S9 = nsurf_g
 2050.             endif
 2051.             ibs(2 + $I_L2043_248) = ibs(1 + $I_L2043_248) + ib * nfull_g * $k_S8 + ib * $ns_S9
 2052.             $m_S5 = $t_S6
 2053.             $I_L2043_248 = 1 + $I_L2043_248
 2050.             if ( $I_L2043_248 >= nrecs_g ) exit
 2050.          enddo
 2053.          n = ( 1 + nrecs_g )
 2053.       endif
 2054.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 2055.       if ( dimsendbuf < -1 + ibs(1 + nrecs_g) ) then
 2056.          dimsendbuf = ibs(1 + nrecs_g)
 2057.          $_allo_P2(0) = 0x1000000000001L
 2057.          $_allo_P2(1) = loc( bufsend )
 2057.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 2057.          bufsend%header%assoc = 0
 2058.          bufsend%header%a_contig = 1
 2058.          bufsend%dim_1%LB = 1
 2058.          bufsend%dim_1%EX = ( max( 0, dimsendbuf ) )
 2058.          bufsend%dim_1%SM = 1
 2058.          $_allo_P3(0) = 0x1000000000001L
 2058.          $_allo_P3(1) = loc( bufsend )
 2058.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 2058.       endif
 2060.       if ( dimrecbuf < -1 + ibr(1 + nrecs_f) ) then
 2061.          dimrecbuf = ibr(1 + nrecs_f)
 2062.          $_allo_P4(0) = 0x1000000000001L
 2062.          $_allo_P4(1) = loc( bufrec )
 2062.          call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 2062.          bufrec%header%assoc = 0
 2063.          bufrec%header%a_contig = 1
 2063.          bufrec%dim_1%LB = 1
 2063.          bufrec%dim_1%EX = ( max( 0, dimrecbuf ) )
 2063.          bufrec%dim_1%SM = 1
 2063.          $_allo_P5(0) = 0x1000000000001L
 2063.          $_allo_P5(1) = loc( bufrec )
 2063.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 2063.       endif
 2065.       t$878 = nrecs_f
 2065.       n = 1
 2065.       if ( nrecs_f > 0 ) then
 2065.          t$879 = nrecs_f
 2065.          $I_L2065_220 = 0
 2065.          do
 2066.             proc = (messproc_f%base_addr)(1, 1 + $I_L2065_220, 0)
 2067.             t$881 = ibr(2 + $I_L2065_220) + -ibr(1 + $I_L2065_220)
 2067.             call mpi_irecv( (bufrec%base_addr)(ibr(1 + $I_L2065_220), 0), t$881, 1275070495, proc, 77, comm, (requestr%base_addr)(1 + $I_L2065_220, 0), ierr )
 2069.             $I_L2065_220 = 1 + $I_L2065_220
 2069.             if ( $I_L2065_220 >= t$878 ) exit
 2069.          enddo
 2069.          t$880 = t$878
 2069.          n = ( 1 + t$878 )
 2069.       endif
 2070.       mglob = 0
 2071.       ibglob = 0
 2072.       ipar2g = 1
 2073.       ipar3g = 1
 2074.       kountg = 0
 2075.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 2075.       do
 2077.          $snt_T1 = _mt_single( 2, _mt_rw_list(...) )
 2078.          iglob = 1
 2079.          kountg = 1 + kountg
 2080.          $snt_T1 = _mt_endsingle( 2, _mt_rw_list(...), $snt_T1 )
 2081.          if ( kountg > nrecs_g ) goto 40
 2082.          $n_S22 = kountg
 2083.          proc = (messproc_g%base_addr)(1, kountg, 0)
 2084.          $kl_S10 = 1 + (klast_four%base_addr)(proc, 0) + -(kfirst_four%base_addr)(proc, 0)
 2123.          $SC_grid3d_I38 = grid3d%dim_1%EX
 2123.          $SC_grid3d_I39 = grid3d%dim_1%LB
 2120.          $SC_ibperij_I26 = ibperij%dim_1%EX
 2120.          $SC_ibperij_I27 = ibperij%dim_1%LB
 2120.          $SC_ibperij_I29 = ibperij%dim_2%SM
 2120.          $SC_ibperij_I28 = ibperij%dim_2%EX
 2120.          $SC_ibperij_I30 = ibperij%dim_2%LB
 2120.          $SC_jbperij_I31 = jbperij%dim_1%EX
 2120.          $SC_jbperij_I32 = jbperij%dim_1%LB
 2120.          $SC_jbperij_I34 = jbperij%dim_2%SM
 2120.          $SC_jbperij_I33 = jbperij%dim_2%EX
 2120.          $SC_jbperij_I35 = jbperij%dim_2%LB
 2116.          $SC_grid2d_I24 = grid2d%dim_1%EX
 2116.          $SC_grid2d_I25 = grid2d%dim_1%LB
 2120.          $SC_bufsend_I36 = bufsend%dim_1%EX
 2120.          $SC_bufsend_I37 = bufsend%dim_1%LB
 2125.          $SC_klast_four_I22 = klast_four%dim_1%EX
 2125.          $SC_klast_four_I23 = klast_four%dim_1%LB
 2125.          do
 2086.             $snt_T2 = _mt_critical( 3, _mt_rw_list(...) )
 2088.             if ( iglob <= ngridfields ) then
 2089.                $SC_surfgrid_I57 = surfgrid%dim_1%EX
 2089.                $SC_surfgrid_I58 = surfgrid%dim_1%LB
 2089.                $SC_kfirst_four_I59 = kfirst_four%dim_1%EX
 2089.                $SC_kfirst_four_I60 = kfirst_four%dim_1%LB
 2087.                $I_iglob_222 = 0
 2087. !dir$ ivdep
 2087.                do
 2089.                   if ( (surfgrid%base_addr)(iglob + $I_iglob_222, 0) == .false. ) then
 2089.                      goto 10
 2089.                   endif
 2089.                   if ( (kfirst_four%base_addr)(proc, 0) == 1 ) then
 2089.    10                continue
 2090.                      iglob = ( iglob + $I_iglob_222 )
 2090.                      goto 20
 2090.                   endif
 2088.                   $I_iglob_222 = 1 + $I_iglob_222
 2087.                   if ( $I_iglob_222 >= 1 + ngridfields + -iglob ) exit
 2087.                enddo
 2090.                iglob = iglob + 1 + ngridfields + -iglob
 2090.             endif
 2090.    20       continue
 2092.             $ig_S11 = iglob
 2093.             if ( iglob <= ngridfields ) then
 2094.                ib = ibglob
 2095.                if ( (surfgrid%base_addr)(iglob, 0) /= .false. ) then
 2096.                   ipar = ipar2g
 2097.                   ipar2g = 1 + ipar2g
 2098.                   if ( ipar2g > (messproc_g%base_addr)(2, kountg, 0) ) then
 2099.                      ipar2g = 1 + mglob
 2100.                      iglob = 1 + iglob
 2100.                   endif
 2102.                   ibglob = 1 + ibglob + (messages_g%base_addr)(2, ipar, 0) + -(messages_g%base_addr)(1, ipar, 0)
 2102.                else
 2104.                   ipar = ipar3g
 2105.                   ipar3g = 1 + ipar3g
 2106.                   if ( ipar3g > (messproc_g%base_addr)(2, kountg, 0) ) then
 2107.                      ipar3g = 1 + mglob
 2108.                      iglob = 1 + iglob
 2108.                   endif
 2110.                   ibglob = ibglob + $kl_S10 + -( $kl_S10 * (messages_g%base_addr)(1, ipar, 0) ) + $kl_S10 * (messages_g%base_addr)(2, ipar, 0)
 2110.                endif
 2110.             endif
 2113.             $snt_T2 = _mt_endcritical( 3, _mt_rw_list(...), $snt_T2 )
 2114.             if ( $ig_S11 > ngridfields ) goto 30
 2115.             if ( (surfgrid%base_addr)($ig_S11, 0) /= .false. ) then
 2116.                g2 = (grid2d%base_addr)($ig_S11, 0)%p
 2117.                $j_S15 = (messages_g%base_addr)(3, ipar, 0)
 2118.                $t_S12 = (messages_g%base_addr)(1, ipar, 0)
 2118.                $t_S13 = (messages_g%base_addr)(2, ipar, 0)
 2118.                i = $t_S12
 2118.                if ( $t_S13 + -$t_S12 >= 0 ) then
 2120.                   $SC_g2_I62 = g2%dim_1%SM
 2120.                   $SC_g2_I61 = g2%dim_1%EX
 2120.                   $SC_g2_I63 = g2%dim_1%LB
 2120.                   $SC_g2_I65 = g2%dim_2%SM
 2120.                   $SC_g2_I64 = g2%dim_2%EX
 2120.                   $SC_g2_I66 = g2%dim_2%LB
 2118.                   $I_L2118_224 = 0
 2118. !dir$ ivdep
 2118.                   do
 2120.                      (bufsend%base_addr)(1 + ib + $I_L2118_224, 0) = (g2%base_addr)((ibperij%base_addr)($t_S12 + $I_L2118_224, $j_S15, 0), (jbperij%base_addr)($t_S12 + $I_L2118_224, $j_S15, 0), 0)
 2121.                      $I_L2118_224 = 1 + $I_L2118_224
 2118.                      if ( $I_L2118_224 >= 1 + $t_S13 + -$t_S12 ) exit
 2118.                   enddo
 2121.                   i = 1 + $t_S13
 2119.                   ib = ( 1 + ib + $t_S13 + -$t_S12 )
 2119.                endif
 2119.             else
 2123.                g3 = (grid3d%base_addr)($ig_S11, 0)%p
 2124.                $j_S15 = (messages_g%base_addr)(3, ipar, 0)
 2125.                $t_S16 = (kfirst_four%base_addr)(proc, 0)
 2125.                $t_S17 = (klast_four%base_addr)(proc, 0)
 2125.                if ( $t_S17 + -$t_S16 >= 0 ) then
 2126.                   $SC_messages_I73 = (messages_g%base_addr)(2, ipar, 0)
 2126.                   $SC_messages_I72 = (messages_g%base_addr)(1, ipar, 0)
 2128.                   $SC_g3_I75 = g3%dim_1%SM
 2128.                   $SC_g3_I74 = g3%dim_1%EX
 2128.                   $SC_g3_I76 = g3%dim_1%LB
 2128.                   $SC_g3_I78 = g3%dim_2%SM
 2128.                   $SC_g3_I77 = g3%dim_2%EX
 2128.                   $SC_g3_I79 = g3%dim_2%LB
 2128.                   $SC_g3_I81 = g3%dim_3%SM
 2128.                   $SC_g3_I80 = g3%dim_3%EX
 2128.                   $SC_g3_I82 = g3%dim_3%LB
 2125.                   $I_L2125_250 = 0
 2125.                   do
 2126.                      i = $SC_messages_I72
 2126.                      if ( $SC_messages_I73 + -$SC_messages_I72 >= 0 ) then
 2126.                         $I_L2126_226 = 0
 2126. !dir$ ivdep
 2126.                         do
 2128.                            (bufsend%base_addr)(1 + ib + $I_L2126_226, 0) = (g3%base_addr)((ibperij%base_addr)($SC_messages_I72 + $I_L2126_226, $j_S15, 0), $t_S16 + $I_L2125_250, (jbperij%base_addr)($SC_messages_I72 + $I_L2126_226, $j_S15, 0), 0)
 2129.                            $I_L2126_226 = 1 + $I_L2126_226
 2126.                            if ( $I_L2126_226 >= 1 + $SC_messages_I73 + -$SC_messages_I72 ) exit
 2126.                         enddo
 2129.                         i = 1 + $SC_messages_I73
 2127.                         ib = ( 1 + ib + $SC_messages_I73 + -$SC_messages_I72 )
 2127.                      endif
 2130.                      $I_L2125_250 = 1 + $I_L2125_250
 2129.                      if ( $I_L2125_250 >= 1 + $t_S17 + -$t_S16 ) exit
 2129.                   enddo
 2129.                endif
 2129.             endif
 2131.          enddo
 2131.    30    continue
 2133.          $snt_T3 = _mt_single( 4, _mt_rw_list(...) )
 2134.          t$894 = ibs(1 + kountg) + -ibs(kountg)
 2134.          call mpi_isend( (bufsend%base_addr)(ibs(kountg), 0), t$894, 1275070495, proc, 77, comm, (requests%base_addr)(kountg, 0), ierr )
 2136.          mglob = (messproc_g%base_addr)(2, $n_S22, 0)
 2137.          ipar2g = 1 + mglob
 2138.          ipar3g = 1 + mglob
 2138.       enddo
 2138.    40 continue
 2141.       $snt_T4 = _mt_single( 5, _mt_rw_list(...) )
 2142.       iglob = 1
 2143.       jglob = max( myfirstlat, myfirstlat_f )
 2144.       $snt_T4 = _mt_endsingle( 5, _mt_rw_list(...), $snt_T4 )
 2148.       if ( max( myfirstlat, myfirstlat_f ) <= min( mylastlat, mylastlat_f ) ) then
 2173.          $SC_four_I48 = four%dim_1%EX
 2173.          $SC_four_I49 = four%dim_1%LB
 2173.          $SC_four_I51 = four%dim_2%SM
 2173.          $SC_four_I50 = four%dim_2%EX
 2173.          $SC_four_I52 = four%dim_2%LB
 2172.          $SC_mylastlon_I46 = mylastlon%dim_1%EX
 2172.          $SC_mylastlon_I47 = mylastlon%dim_1%LB
 2172.          $SC_myfirstlon_I44 = myfirstlon%dim_1%EX
 2172.          $SC_myfirstlon_I45 = myfirstlon%dim_1%LB
 2171.          $SC_prevgrid_I42 = prevgrid%dim_1%EX
 2171.          $SC_prevgrid_I43 = prevgrid%dim_1%LB
 2171.          $SC_previousj_I40 = previousj%dim_1%EX
 2171.          $SC_previousj_I41 = previousj%dim_1%LB
 2176.          $SC_grid3d_I38 = grid3d%dim_1%EX
 2176.          $SC_grid3d_I39 = grid3d%dim_1%LB
 2173.          $SC_ibperij_I26 = ibperij%dim_1%EX
 2173.          $SC_ibperij_I27 = ibperij%dim_1%LB
 2173.          $SC_ibperij_I29 = ibperij%dim_2%SM
 2173.          $SC_ibperij_I28 = ibperij%dim_2%EX
 2173.          $SC_ibperij_I30 = ibperij%dim_2%LB
 2173.          $SC_jbperij_I31 = jbperij%dim_1%EX
 2173.          $SC_jbperij_I32 = jbperij%dim_1%LB
 2173.          $SC_jbperij_I34 = jbperij%dim_2%SM
 2173.          $SC_jbperij_I33 = jbperij%dim_2%EX
 2173.          $SC_jbperij_I35 = jbperij%dim_2%LB
 2170.          $SC_grid2d_I24 = grid2d%dim_1%EX
 2170.          $SC_grid2d_I25 = grid2d%dim_1%LB
 2170.          do
 2150.             $snt_T5 = _mt_critical( 6, _mt_rw_list(...) )
 2153.             if ( myfirstlev /= 1 ) then
 2152.                if ( iglob <= ngridfields ) then
 2153.                   $SC_surfgrid_I57 = surfgrid%dim_1%EX
 2153.                   $SC_surfgrid_I58 = surfgrid%dim_1%LB
 2151.                   $I_iglob_228 = 0
 2151. !dir$ ivdep
 2151.                   do
 2153.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_228, 0) == .false. ) then
 2154.                         iglob = ( iglob + $I_iglob_228 )
 2154.                         goto 50
 2154.                      endif
 2152.                      $I_iglob_228 = 1 + $I_iglob_228
 2151.                      if ( $I_iglob_228 >= 1 + ngridfields + -iglob ) exit
 2151.                   enddo
 2154.                   iglob = iglob + 1 + ngridfields + -iglob
 2154.                endif
 2154.             endif
 2154.    50       continue
 2156.             $ig_S23 = iglob
 2157.             if ( iglob <= ngridfields ) then
 2158.                j = jglob
 2159.                if ( jglob >= min( mylastlat, mylastlat_f ) ) then
 2161.                   jglob = max( myfirstlat, myfirstlat_f )
 2160.                   iglob = 1 + iglob
 2160.                else
 2163.                   jglob = 1 + jglob
 2163.                endif
 2163.             endif
 2166.             $snt_T5 = _mt_endcritical( 6, _mt_rw_list(...), $snt_T5 )
 2167.             if ( $ig_S23 > ngridfields ) goto 60
 2169.             if ( (surfgrid%base_addr)($ig_S23, 0) /= .false. ) then
 2170.                g2 = (grid2d%base_addr)($ig_S23, 0)%p
 2171.                $v0_S27 = (prevgrid%base_addr)($ig_S23, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 2172.                $t_S24 = (myfirstlon%base_addr)(j, 0)
 2172.                $t_S25 = (mylastlon%base_addr)(j, 0)
 2172.                i = $t_S24
 2172.                if ( $t_S25 + -$t_S24 >= 0 ) then
 2173.                   $SC_g2_I62 = g2%dim_1%SM
 2173.                   $SC_g2_I61 = g2%dim_1%EX
 2173.                   $SC_g2_I63 = g2%dim_1%LB
 2173.                   $SC_g2_I65 = g2%dim_2%SM
 2173.                   $SC_g2_I64 = g2%dim_2%EX
 2173.                   $SC_g2_I66 = g2%dim_2%LB
 2172.                   $I_L2172_230 = 0
 2172. !dir$ ivdep
 2172. !dir$ loop_info (automatic) cache_nt( jbperij, ibperij )
 2172.                   do
 2173.                      (four%base_addr)(1 + $v0_S27, $t_S24 + $I_L2172_230, 0) = (g2%base_addr)((ibperij%base_addr)($t_S24 + $I_L2172_230, j, 0), (jbperij%base_addr)($t_S24 + $I_L2172_230, j, 0), 0)
 2174.                      $I_L2172_230 = 1 + $I_L2172_230
 2172.                      if ( $I_L2172_230 >= 1 + $t_S25 + -$t_S24 ) exit
 2172.                   enddo
 2174.                   i = 1 + $t_S25
 2174.                endif
 2174.             else
 2176.                g3 = (grid3d%base_addr)($ig_S23, 0)%p
 2177.                $v0_S29 = (prevgrid%base_addr)($ig_S23, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 2178.                if ( mylastlev + -myfirstlev >= 0 ) then
 2178.                   $SCA_myfirstlon_I55 = (myfirstlon%base_addr)(j, 0)
 2178.                   $SCA_mylastlon_I56 = (mylastlon%base_addr)(j, 0)
 2181.                   $SC_g3_I75 = g3%dim_1%SM
 2181.                   $SC_g3_I74 = g3%dim_1%EX
 2181.                   $SC_g3_I76 = g3%dim_1%LB
 2181.                   $SC_g3_I78 = g3%dim_2%SM
 2181.                   $SC_g3_I77 = g3%dim_2%EX
 2181.                   $SC_g3_I79 = g3%dim_2%LB
 2181.                   $SC_g3_I81 = g3%dim_3%SM
 2181.                   $SC_g3_I80 = g3%dim_3%EX
 2181.                   $SC_g3_I82 = g3%dim_3%LB
 2178.                   $I_L2178_252 = 0
 2178.                   do
 2180.                      i = $SCA_myfirstlon_I55
 2180.                      if ( $SCA_mylastlon_I56 + -$SCA_myfirstlon_I55 >= 0 ) then
 2180.                         $I_L2180_232 = 0
 2180. !dir$ ivdep
 2180.                         do
 2181.                            (four%base_addr)(1 + $v0_S29 + $I_L2178_252, $SCA_myfirstlon_I55 + $I_L2180_232, 0) = (g3%base_addr)((ibperij%base_addr)($SCA_myfirstlon_I55 + $I_L2180_232, j, 0), myfirstlev + $I_L2178_252, (jbperij%base_addr)($SCA_myfirstlon_I55 + $I_L2180_232, j, 0), 0)
 2182.                            $I_L2180_232 = 1 + $I_L2180_232
 2180.                            if ( $I_L2180_232 >= 1 + $SCA_mylastlon_I56 + -$SCA_myfirstlon_I55 ) exit
 2180.                         enddo
 2182.                         i = 1 + $SCA_mylastlon_I56
 2182.                      endif
 2183.                      $I_L2178_252 = 1 + $I_L2178_252
 2182.                      if ( $I_L2178_252 >= 1 + mylastlev + -myfirstlev ) exit
 2182.                   enddo
 2182.                endif
 2182.             endif
 2184.          enddo
 2184.       endif
 2184.    60 continue
 2190.       $snt_T6 = _mt_single( 7, _mt_rw_list(...) )
 2191.       t$907 = 1 + 2 * imax
 2191.       t$908 = dip1
 2191.       i = 1 + 2 * imax
 2191.       if ( dip1 + -2 * imax > 0 ) then
 2191.          t$909 = ( dip1 + -2 * imax )
 2192.          $SC_four_I48 = four%dim_1%EX
 2192.          $SC_four_I49 = four%dim_1%LB
 2192.          $SC_four_I51 = four%dim_2%SM
 2192.          $SC_four_I50 = four%dim_2%EX
 2192.          $SC_four_I52 = four%dim_2%LB
 2191.          $I_L2191_254 = 0
 2191.          do
 2192.             $F_A33 = $SC_four_I48
 2192.             if ( $SC_four_I48 > 0 ) then
 2192.                $I_L2192_242 = 0
 2192. !dir$ ivdep
 2192.                do
 2192.                   (four%base_addr)($SC_four_I49 + $I_L2192_242, 1 + $I_L2191_254 + 2 * imax, 0) = 0.0
 2192.                   $I_L2192_242 = 1 + $I_L2192_242
 2192.                   if ( $I_L2192_242 >= $F_A33 ) exit
 2192.                enddo
 2192.             endif
 2193.             $I_L2191_254 = 1 + $I_L2191_254
 2191.             if ( $I_L2191_254 >= ( dip1 + -2 * imax ) ) exit
 2191.          enddo
 2193.          t$910 = ( dip1 + -2 * imax )
 2193.          i = 1 + dip1
 2193.       endif
 2195.       t$911 = 1 + nvertgrid * myjmax_f
 2195.       t$912 = dvdlj
 2195.       j = 1 + nvertgrid * myjmax_f
 2195.       if ( dvdlj + -( nvertgrid * myjmax_f ) > 0 ) then
 2195.          t$913 = ( dvdlj + -( nvertgrid * myjmax_f ) )
 2196.          $SC_four_I48 = four%dim_1%EX
 2196.          $SC_four_I49 = four%dim_1%LB
 2196.          $SC_four_I51 = four%dim_2%SM
 2196.          $SC_four_I50 = four%dim_2%EX
 2196.          $SC_four_I52 = four%dim_2%LB
 2195.          $I_L2195_256 = 0
 2195.          do
 2196.             $F_A34 = $SC_four_I50
 2196.             if ( $SC_four_I50 > 0 ) then
 2196.                $I_L2196_244 = 0
 2196. !dir$ ivdep
 2196.                do
 2196.                   (four%base_addr)(1 + $I_L2195_256 + nvertgrid * myjmax_f, $SC_four_I52 + $I_L2196_244, 0) = 0.0
 2196.                   $I_L2196_244 = 1 + $I_L2196_244
 2196.                   if ( $I_L2196_244 >= $F_A34 ) exit
 2196.                enddo
 2196.             endif
 2197.             $I_L2195_256 = 1 + $I_L2195_256
 2195.             if ( $I_L2195_256 >= ( dvdlj + -( nvertgrid * myjmax_f ) ) ) exit
 2195.          enddo
 2197.          t$914 = ( dvdlj + -( nvertgrid * myjmax_f ) )
 2197.          j = 1 + dvdlj
 2197.       endif
 2198.       kountg = 0
 2199.       $snt_T6 = _mt_endsingle( 7, _mt_rw_list(...), $snt_T6 )
 2199.       do
 2202.          $snt_T7 = _mt_single( 8, _mt_rw_list(...) )
 2203.          kountg = 1 + kountg
 2204.          $snt_T7 = _mt_endsingle( 8, _mt_rw_list(...), $snt_T7 )
 2205.          if ( kountg > nrecs_f ) goto 100
 2206.          $snt_T8 = _mt_single( 9, _mt_rw_list(...) )
 2207.          call mpi_waitany( nrecs_f, (requestr%base_addr)(1, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 2208.          ksg = (status%base_addr)(3, 0)
 2209.          t$915 = nrecs_f
 2209.          l = 1
 2209.          if ( nrecs_f > 0 ) then
 2209.             t$916 = nrecs_f
 2210.             $SC_messproc_I0 = messproc_f%dim_1%EX
 2210.             $SC_messproc_I1 = messproc_f%dim_1%LB
 2210.             $SC_messproc_I3 = messproc_f%dim_2%SM
 2210.             $SC_messproc_I2 = messproc_f%dim_2%EX
 2210.             $SC_messproc_I4 = messproc_f%dim_2%LB
 2209.             $I_L2209_234 = 0
 2209. !dir$ ivdep
 2209.             do
 2210.                if ( (messproc_f%base_addr)(1, 1 + $I_L2209_234, 0) + -ksg == 0 ) then
 2216.                   t$917 = $I_L2209_234
 2209.                   l = ( 1 + $I_L2209_234 )
 2211.                   nglob = ( 1 + $I_L2209_234 )
 2212.                   ibglob = -1 + ibr(1 + $I_L2209_234)
 2213.                   mglob = (messproc_f%base_addr)(2, $I_L2209_234, 0)
 2213.                   goto 70
 2213.                endif
 2216.                $I_L2209_234 = 1 + $I_L2209_234
 2215.                if ( $I_L2209_234 >= nrecs_f ) exit
 2215.             enddo
 2216.             t$917 = nrecs_f
 2216.             l = ( 1 + nrecs_f )
 2216.          endif
 2216.    70    continue
 2217.          iglob = 1
 2218.          ipar2g = 1 + mglob
 2219.          ipar3g = 1 + mglob
 2220.          $snt_T8 = _mt_endsingle( 9, _mt_rw_list(...), $snt_T8 )
 2261.          $SC_four_I48 = four%dim_1%EX
 2261.          $SC_four_I49 = four%dim_1%LB
 2261.          $SC_four_I51 = four%dim_2%SM
 2261.          $SC_four_I50 = four%dim_2%EX
 2261.          $SC_four_I52 = four%dim_2%LB
 2258.          $SC_prevgrid_I42 = prevgrid%dim_1%EX
 2258.          $SC_prevgrid_I43 = prevgrid%dim_1%LB
 2258.          $SC_previousj_I40 = previousj%dim_1%EX
 2258.          $SC_previousj_I41 = previousj%dim_1%LB
 2261.          $SC_bufrec_I53 = bufrec%dim_1%EX
 2261.          $SC_bufrec_I54 = bufrec%dim_1%LB
 2261.          do
 2226.             $snt_T9 = _mt_critical( 10, _mt_rw_list(...) )
 2229.             if ( havesurf == .false. ) then
 2228.                if ( iglob <= ngridfields ) then
 2229.                   $SC_surfgrid_I57 = surfgrid%dim_1%EX
 2229.                   $SC_surfgrid_I58 = surfgrid%dim_1%LB
 2227.                   $I_iglob_236 = 0
 2227. !dir$ ivdep
 2227.                   do
 2229.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_236, 0) == .false. ) then
 2230.                         iglob = ( iglob + $I_iglob_236 )
 2230.                         goto 80
 2230.                      endif
 2228.                      $I_iglob_236 = 1 + $I_iglob_236
 2227.                      if ( $I_iglob_236 >= 1 + ngridfields + -iglob ) exit
 2227.                   enddo
 2230.                   iglob = iglob + 1 + ngridfields + -iglob
 2230.                endif
 2230.             endif
 2230.    80       continue
 2232.             $ig_S33 = iglob
 2233.             if ( iglob <= ngridfields ) then
 2234.                ib = ibglob
 2235.                if ( (surfgrid%base_addr)(iglob, 0) /= .false. ) then
 2236.                   ipar = ipar2g
 2237.                   ibglob = 1 + ibglob + (messages_f%base_addr)(2, ipar2g, 0) + -(messages_f%base_addr)(1, ipar2g, 0)
 2238.                   ipar2g = 1 + ipar2g
 2239.                   if ( ipar2g > (messproc_f%base_addr)(2, nglob, 0) ) then
 2240.                      ipar2g = 1 + mglob
 2241.                      iglob = 1 + iglob
 2241.                   endif
 2241.                else
 2244.                   ipar = ipar3g
 2245.                   ibglob = ibglob + kmaxloc + -( kmaxloc * (messages_f%base_addr)(1, ipar3g, 0) ) + kmaxloc * (messages_f%base_addr)(2, ipar3g, 0)
 2246.                   ipar3g = 1 + ipar3g
 2247.                   if ( ipar3g > (messproc_f%base_addr)(2, nglob, 0) ) then
 2248.                      ipar3g = 1 + mglob
 2249.                      iglob = 1 + iglob
 2249.                   endif
 2249.                endif
 2249.             endif
 2253.             $snt_T9 = _mt_endcritical( 10, _mt_rw_list(...), $snt_T9 )
 2254.             if ( $ig_S33 > ngridfields ) goto 90
 2256.             if ( (surfgrid%base_addr)($ig_S33, 0) /= .false. ) then
 2257.                $j_S34 = (messages_f%base_addr)(3, ipar, 0)
 2258.                $v0_S37 = (prevgrid%base_addr)($ig_S33, 0) + nvertgrid * (previousj%base_addr)($j_S34, 0)
 2259.                $t_S35 = (messages_f%base_addr)(1, ipar, 0)
 2259.                $t_S36 = (messages_f%base_addr)(2, ipar, 0)
 2259.                if ( $t_S36 + -$t_S35 >= 0 ) then
 2259.                   $I_L2259_238 = 0
 2259. !dir$ ivdep
 2259.                   do
 2261.                      (four%base_addr)(1 + $v0_S37, $t_S35 + $I_L2259_238, 0) = (bufrec%base_addr)(1 + ib + $I_L2259_238, 0)
 2262.                      $I_L2259_238 = 1 + $I_L2259_238
 2259.                      if ( $I_L2259_238 >= 1 + $t_S36 + -$t_S35 ) exit
 2259.                   enddo
 2260.                   ib = ( 1 + ib + $t_S36 + -$t_S35 )
 2260.                endif
 2260.             else
 2264.                $j_S34 = (messages_f%base_addr)(3, ipar, 0)
 2265.                $v0_S37 = (prevgrid%base_addr)($ig_S33, 0) + nvertgrid * (previousj%base_addr)($j_S34, 0)
 2266.                if ( kmaxloc > 0 ) then
 2267.                   $SC_messages_I89 = (messages_f%base_addr)(2, ipar, 0)
 2267.                   $SC_messages_I88 = (messages_f%base_addr)(1, ipar, 0)
 2266.                   $I_L2266_258 = 0
 2266.                   do
 2267.                      if ( $SC_messages_I89 + -$SC_messages_I88 >= 0 ) then
 2267.                         $I_L2267_240 = 0
 2267. !dir$ ivdep
 2267.                         do
 2269.                            (four%base_addr)(1 + $v0_S37 + $I_L2266_258, $SC_messages_I88 + $I_L2267_240, 0) = (bufrec%base_addr)(1 + ib + $I_L2267_240, 0)
 2270.                            $I_L2267_240 = 1 + $I_L2267_240
 2267.                            if ( $I_L2267_240 >= 1 + $SC_messages_I89 + -$SC_messages_I88 ) exit
 2267.                         enddo
 2268.                         ib = ( 1 + ib + $SC_messages_I89 + -$SC_messages_I88 )
 2268.                      endif
 2271.                      $I_L2266_258 = 1 + $I_L2266_258
 2270.                      if ( $I_L2266_258 >= kmaxloc ) exit
 2270.                   enddo
 2270.                endif
 2270.             endif
 2272.          enddo
 2272.    90    continue
 2273.       enddo
 2273.   100 continue
 2276.       $snt_T10 = _mt_single( 11, _mt_rw_list(...) )
 2277.       call mpi_waitall( nrecs_g, (requests%base_addr)(1, 0), (stat%base_addr)(stat%dim_1%LB, stat%dim_2%LB, 0), ierr )
 2278.       $snt_T10 = _mt_endsingle( 11, _mt_rw_list(...), $snt_T10 )
 2006.       _free( t$242 )
 2280.       return
 2280.       end
 2280.       
 2285.       
 2285.       subroutine fourtospec
 2285.       t$126 = djh
 2285.       t$127 = dv
 2305.       t$248 = _zla( 0, djh )
 2285.       t$249 = _zla( 0, djh )
 2305.       t$250 = _zla( 0, dv )
 2285.       t$251 = _zla( 0, djh ) * _zla( 0, dv )
 2305.       t$254 = 8 * _zla( 0, djh ) * _zla( 0, dv )
 2306.       t$255 = 8 * ( 7 + 8 * _zla( 0, djh ) * _zla( 0, dv ) ) / 8
 2306.       t$257 = t$255 + 8 * _zla( 0, djh ) * _zla( 0, dv )
 2285.       t$252 = int( _alloc( t$255 + 8 * _zla( 0, djh ) * _zla( 0, dv ) ), 8 )
 2305.       t$253 = t$252
 2306.       t$256 = t$255 + t$252
 2308.       kdim = 2 * nvertspec * myjmax_f * mmaxlocal
 2309.       ldim = 2 * nvertspec * jmaxlocal_f * mymmax
 2310.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 2311.       $F_A33 = mnodes%dim_1%EX
 2311.       if ( mnodes%dim_1%EX > 0 ) then
 2311.          $SC_mnodes_I45 = mnodes%dim_1%EX
 2311.          $SC_mnodes_I46 = mnodes%dim_1%LB
 2311.          $I_L2311_260 = 0
 2311. !dir$ ivdep
 2311.          do
 2311.             (mnodes%base_addr)($SC_mnodes_I46 + $I_L2311_260, 0) = 0
 2311.             $I_L2311_260 = 1 + $I_L2311_260
 2311.             if ( $I_L2311_260 >= $F_A33 ) exit
 2311.          enddo
 2311.       endif
 2312.       mglob = 0
 2313.       if ( dimsendbuf < 2 * nvertspec * jmaxlocal_f * mymmax * maxnodes_four ) then
 2314.          dimsendbuf = 2 * nvertspec * jmaxlocal_f * mymmax * maxnodes_four
 2315.          $_allo_P0(0) = 0x1000000000001L
 2315.          $_allo_P0(1) = loc( bufsend )
 2315.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 2315.          bufsend%header%assoc = 0
 2316.          bufsend%header%a_contig = 1
 2316.          bufsend%dim_1%LB = 1
 2316.          bufsend%dim_1%EX = ( max( 0, 2 * nvertspec * jmaxlocal_f * mymmax * maxnodes_four ) )
 2316.          bufsend%dim_1%SM = 1
 2316.          $_allo_P1(0) = 0x1000000000001L
 2316.          $_allo_P1(1) = loc( bufsend )
 2316.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 2316.       endif
 2318.       if ( dimrecbuf < 2 * nvertspec * myjmax_f * mmaxlocal * maxnodes_four ) then
 2319.          dimrecbuf = 2 * nvertspec * myjmax_f * mmaxlocal * maxnodes_four
 2320.          $_allo_P2(0) = 0x1000000000001L
 2320.          $_allo_P2(1) = loc( bufrec )
 2320.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 2320.          bufrec%header%assoc = 0
 2321.          bufrec%header%a_contig = 1
 2321.          bufrec%dim_1%LB = 1
 2321.          bufrec%dim_1%EX = ( max( 0, 2 * nvertspec * myjmax_f * mmaxlocal * maxnodes_four ) )
 2321.          bufrec%dim_1%SM = 1
 2321.          $_allo_P3(0) = 0x1000000000001L
 2321.          $_allo_P3(1) = loc( bufrec )
 2321.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 2321.       endif
 2323.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 2340.       $SC_four_I4 = four%dim_1%EX
 2340.       $SC_four_I5 = four%dim_1%LB
 2340.       $SC_four_I7 = four%dim_2%SM
 2340.       $SC_four_I6 = four%dim_2%EX
 2340.       $SC_four_I8 = four%dim_2%LB
 2337.       $SC_jmaxperm_I2 = jmaxperm%dim_1%EX
 2337.       $SC_jmaxperm_I3 = jmaxperm%dim_1%LB
 2337.       $SC_jminperm_I0 = jminperm%dim_1%EX
 2337.       $SC_jminperm_I1 = jminperm%dim_1%LB
 2340.       $SC_bufrec_I9 = bufrec%dim_1%EX
 2340.       $SC_bufrec_I10 = bufrec%dim_1%LB
 2350.       $SC_bufsend_I11 = bufsend%dim_1%EX
 2350.       $SC_bufsend_I12 = bufsend%dim_1%LB
 2350. !dir$ loop_info (automatic) cache_nt( nodehasm, mnodes )
 2350.       do
 2325.          $snt_T1 = _mt_critical( 2, _mt_rw_list(...) )
 2326.          mglob = 1 + mglob
 2327.          m = mglob
 2328.          if ( mglob <= mmax ) then
 2329.             kn = (nodehasm%base_addr)(mglob, mygroup_four, 0)
 2330.             (mnodes%base_addr)(kn, 0) = 1 + (mnodes%base_addr)(kn, 0)
 2331.             lm = (mnodes%base_addr)(kn, 0)
 2331.          endif
 2333.          $snt_T1 = _mt_endcritical( 2, _mt_rw_list(...), $snt_T1 )
 2334.          if ( m > mmax ) goto 10
 2335.          if ( myid_four + -kn /= 0 ) then
 2337.             $t_S0 = max( myfirstlat_f, (jminperm%base_addr)(m, 0) )
 2337.             $t_S1 = min( mylastlat_f, (jmaxperm%base_addr)(m, 0) )
 2337.             if ( $t_S1 + -$t_S0 >= 0 ) then
 2338.                if ( nvertspec > 0 ) then
 2337.                   $I_L2337_268 = 0
 2337.                   do
 2338.                      $I_L2338_244 = 0
 2338.                      $CSVL_V1 = cvmg( ( myjmax_f * nvertgrid ), 2, and( myjmax_f * nvertgrid > 0, and( ( myjmax_f * nvertgrid ) <= 2, ( myjmax_f * nvertgrid ) <= -1 + nvertspec ) ) )
 2338.                      if ( $CSVL_V1 <= 4 ) then
 2338.                         do
 2340.                            (bufrec%base_addr)(1 + $I_L2338_244 + -( myfirstlat_f * nvertgrid ) + -2 * myjmax_f * nvertgrid + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * myjmax_f * mmaxlocal * kn + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, 0) = (four%base_addr)(1 + $I_L2338_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, -1 + 2 * m, 0)
 2342.                            (bufrec%base_addr)(1 + $I_L2338_244 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * myjmax_f * mmaxlocal * kn + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, 0) = (four%base_addr)(1 + $I_L2338_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, 2 * m, 0)
 2344.                            $I_L2338_244 = 1 + $I_L2338_244
 2338.                            if ( $I_L2338_244 >= nvertspec ) exit
 2338.                         enddo
 2338.                      else
 2338. !dir$ ivdep safevl = $CSVL_V1 !   Guaranteed minimum :: 4
 2338.                         do
 2340.                            (bufrec%base_addr)(1 + $I_L2338_244 + -( myfirstlat_f * nvertgrid ) + -2 * myjmax_f * nvertgrid + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * myjmax_f * mmaxlocal * kn + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, 0) = (four%base_addr)(1 + $I_L2338_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, -1 + 2 * m, 0)
 2342.                            (bufrec%base_addr)(1 + $I_L2338_244 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * myjmax_f * mmaxlocal * kn + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, 0) = (four%base_addr)(1 + $I_L2338_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2337_268, 2 * m, 0)
 2344.                            $I_L2338_244 = 1 + $I_L2338_244
 2338.                            if ( $I_L2338_244 >= nvertspec ) exit
 2338.                         enddo
 2338.                      endif
 2345.                      $I_L2337_268 = 1 + $I_L2337_268
 2344.                      if ( $I_L2337_268 >= 1 + $t_S1 + -$t_S0 ) exit
 2344.                   enddo
 2344.                endif
 2344.             endif
 2344.          else
 2347.             $t_S4 = max( myfirstlat_f, (jminperm%base_addr)(m, 0) )
 2347.             $t_S5 = min( mylastlat_f, (jmaxperm%base_addr)(m, 0) )
 2347.             if ( $t_S5 + -$t_S4 >= 0 ) then
 2348.                if ( nvertspec > 0 ) then
 2347.                   $I_L2347_266 = 0
 2347.                   do
 2348.                      $I_L2348_242 = 0
 2348.                      $CSVL_V0 = cvmg( ( myjmax_f * nvertgrid ), 2, and( myjmax_f * nvertgrid > 0, and( ( myjmax_f * nvertgrid ) <= 2, ( myjmax_f * nvertgrid ) <= -1 + nvertspec ) ) )
 2348.                      if ( $CSVL_V0 <= 4 ) then
 2348.                         do
 2350.                            (bufsend%base_addr)(1 + $I_L2348_242 + -( myfirstlat_f * nvertgrid ) + -2 * myjmax_f * nvertgrid + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * jmaxlocal_f * mymmax * kn + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, 0) = (four%base_addr)(1 + $I_L2348_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, -1 + 2 * m, 0)
 2352.                            (bufsend%base_addr)(1 + $I_L2348_242 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * jmaxlocal_f * mymmax * kn + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, 0) = (four%base_addr)(1 + $I_L2348_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, 2 * m, 0)
 2354.                            $I_L2348_242 = 1 + $I_L2348_242
 2348.                            if ( $I_L2348_242 >= nvertspec ) exit
 2348.                         enddo
 2348.                      else
 2348. !dir$ ivdep safevl = $CSVL_V0 !   Guaranteed minimum :: 4
 2348.                         do
 2350.                            (bufsend%base_addr)(1 + $I_L2348_242 + -( myfirstlat_f * nvertgrid ) + -2 * myjmax_f * nvertgrid + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * jmaxlocal_f * mymmax * kn + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, 0) = (four%base_addr)(1 + $I_L2348_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, -1 + 2 * m, 0)
 2352.                            (bufsend%base_addr)(1 + $I_L2348_242 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + 2 * myjmax_f * lm * nvertgrid + 2 * nvertspec * jmaxlocal_f * mymmax * kn + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, 0) = (four%base_addr)(1 + $I_L2348_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2347_266, 2 * m, 0)
 2354.                            $I_L2348_242 = 1 + $I_L2348_242
 2348.                            if ( $I_L2348_242 >= nvertspec ) exit
 2348.                         enddo
 2348.                      endif
 2355.                      $I_L2347_266 = 1 + $I_L2347_266
 2354.                      if ( $I_L2347_266 >= 1 + $t_S5 + -$t_S4 ) exit
 2354.                   enddo
 2354.                endif
 2354.             endif
 2354.          endif
 2356.       enddo
 2356.    10 continue
 2358.       _mt_barrier( 3, _mt_rw_list(...) )
 2359.       $snt_T2 = _mt_single( 4, _mt_rw_list(...) )
 2360.       comm = comm_four
 2361.       (requestr%base_addr)(myid_four, 0) = 738197504
 2362.       (requests%base_addr)(myid_four, 0) = 738197504
 2363.       t$943 = -1 + maxnodes_four
 2363.       if ( maxnodes_four > 0 ) then
 2363.          t$944 = maxnodes_four
 2363.          $I_L2363_246 = 0
 2363.          do
 2364.             if ( $I_L2363_246 + -myid_four /= 0 ) then
 2365.                t$946 = 2 * nvertspec * mymmax * (nlatsinproc_f%base_addr)($I_L2363_246, 0)
 2366.                t$947 = $I_L2363_246
 2365.                call mpi_irecv( (bufsend%base_addr)(1 + ldim * $I_L2363_246, 0), t$946, 1275070495, t$947, 98, comm, (requestr%base_addr)($I_L2363_246, 0), ierr )
 2365.             endif
 2368.             $I_L2363_246 = 1 + $I_L2363_246
 2367.             if ( $I_L2363_246 >= 1 + t$943 ) exit
 2367.          enddo
 2368.          t$945 = 1 + t$943
 2368.       endif
 2369.       t$948 = -1 + maxnodes_four
 2369.       if ( maxnodes_four > 0 ) then
 2369.          t$949 = maxnodes_four
 2369.          $I_L2369_248 = 0
 2369.          do
 2370.             if ( $I_L2369_248 + -myid_four /= 0 ) then
 2371.                t$951 = 2 * nvertspec * myjmax_f * (msperproc%base_addr)($I_L2369_248, 0)
 2372.                t$952 = $I_L2369_248
 2371.                call mpi_isend( (bufrec%base_addr)(1 + kdim * $I_L2369_248, 0), t$951, 1275070495, t$952, 98, comm, (requests%base_addr)($I_L2369_248, 0), ierr )
 2371.             endif
 2374.             $I_L2369_248 = 1 + $I_L2369_248
 2373.             if ( $I_L2369_248 >= 1 + t$948 ) exit
 2373.          enddo
 2374.          t$950 = 1 + t$948
 2374.       endif
 2375.       t$953 = -1 + maxnodes_four
 2375.       if ( -1 + maxnodes_four > 0 ) then
 2375.          t$954 = ( -1 + maxnodes_four )
 2375.          $I_L2375_250 = 0
 2375.          do
 2376.             call mpi_waitany( maxnodes_four, (requestr%base_addr)(0, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 2377.             $I_L2375_250 = 1 + $I_L2375_250
 2377.             if ( $I_L2375_250 >= t$953 ) exit
 2377.          enddo
 2377.          t$955 = t$953
 2377.       endif
 2378.       t$956 = -1 + maxnodes_four
 2378.       k = 0
 2378.       if ( maxnodes_four > 0 ) then
 2378.          t$957 = maxnodes_four
 2378.          $I_L2378_252 = 0
 2378.          do
 2379.             if ( $I_L2378_252 + -myid_four /= 0 ) then
 2380.                call mpi_wait( (requests%base_addr)($I_L2378_252, 0), (status%base_addr)(status%dim_1%LB, 0), ierr )
 2380.             endif
 2382.             $I_L2378_252 = 1 + $I_L2378_252
 2381.             if ( $I_L2378_252 >= 1 + t$956 ) exit
 2381.          enddo
 2382.          t$958 = 1 + t$956
 2382.          k = 1 + t$956
 2382.       endif
 2383.       $snt_T2 = _mt_endsingle( 4, _mt_rw_list(...), $snt_T2 )
 2384.       $F_A34 = t$127
 2384.       $F_A35 = t$126
 2384.       if ( and( -$F_A35, -$F_A34 ) < 0 ) then
 2384.          $I_L2384_276 = 0
 2384.          do
 2384.             $I_L2384_262 = 0
 2384. !dir$ ivdep
 2384.             do
 2384.                foev(1 + $I_L2384_262, 1 + $I_L2384_276) = 0.0
 2384.                $I_L2384_262 = 1 + $I_L2384_262
 2384.                if ( $I_L2384_262 >= $F_A35 ) exit
 2384.             enddo
 2384.             $I_L2384_276 = 1 + $I_L2384_276
 2384.             if ( $I_L2384_276 >= $F_A34 ) exit
 2384.          enddo
 2384.       endif
 2385.       $F_A36 = t$127
 2385.       $F_A37 = t$126
 2385.       if ( and( -$F_A37, -$F_A36 ) < 0 ) then
 2385.          $I_L2385_278 = 0
 2385.          do
 2385.             $I_L2385_264 = 0
 2385. !dir$ ivdep
 2385.             do
 2385.                food(1 + $I_L2385_264, 1 + $I_L2385_278) = 0.0
 2385.                $I_L2385_264 = 1 + $I_L2385_264
 2385.                if ( $I_L2385_264 >= $F_A37 ) exit
 2385.             enddo
 2385.             $I_L2385_278 = 1 + $I_L2385_278
 2385.             if ( $I_L2385_278 >= $F_A36 ) exit
 2385.          enddo
 2385.       endif
 2387.       $snt_T3 = _mt_single( 5, _mt_rw_list(...) )
 2388.       mglob = 0
 2389.       $snt_T3 = _mt_endsingle( 5, _mt_rw_list(...), $snt_T3 )
 2425.       $SC_nodd_I37 = nodd%dim_1%EX
 2425.       $SC_nodd_I38 = nodd%dim_1%LB
 2425.       $SC_firstnodd_I35 = firstnodd%dim_1%EX
 2425.       $SC_firstnodd_I36 = firstnodd%dim_1%LB
 2419.       $SC_lf2s_I30 = lf2s%dim_1%EX
 2419.       $SC_lf2s_I31 = lf2s%dim_1%LB
 2419.       $SC_lf2s_I33 = lf2s%dim_2%SM
 2419.       $SC_lf2s_I32 = lf2s%dim_2%EX
 2419.       $SC_lf2s_I34 = lf2s%dim_2%LB
 2416.       $SC_spec_I25 = spec%dim_1%EX
 2416.       $SC_spec_I26 = spec%dim_1%LB
 2416.       $SC_spec_I28 = spec%dim_2%SM
 2416.       $SC_spec_I27 = spec%dim_2%EX
 2416.       $SC_spec_I29 = spec%dim_2%LB
 2415.       $SC_neven_I23 = neven%dim_1%EX
 2415.       $SC_neven_I24 = neven%dim_1%LB
 2415.       $SC_firstneven_I21 = firstneven%dim_1%EX
 2415.       $SC_firstneven_I22 = firstneven%dim_1%LB
 2403.       $SC_firstlatinproc_I19 = firstlatinproc_f%dim_1%EX
 2403.       $SC_firstlatinproc_I20 = firstlatinproc_f%dim_1%LB
 2401.       $SC_nodehasj_I15 = nodehasj_f%dim_1%EX
 2401.       $SC_nodehasj_I16 = nodehasj_f%dim_1%LB
 2396.       $SC_lm2m_I13 = lm2m%dim_1%EX
 2396.       $SC_lm2m_I14 = lm2m%dim_1%LB
 2403.       $SC_nlatsinproc_I17 = nlatsinproc_f%dim_1%EX
 2403.       $SC_nlatsinproc_I18 = nlatsinproc_f%dim_1%LB
 2399.       $SC_jminperm_I0 = jminperm%dim_1%EX
 2399.       $SC_jminperm_I1 = jminperm%dim_1%LB
 2408.       $SC_bufsend_I11 = bufsend%dim_1%EX
 2408.       $SC_bufsend_I12 = bufsend%dim_1%LB
 2408.       do
 2391.          $snt_T4 = _mt_critical( 6, _mt_rw_list(...) )
 2392.          mglob = 1 + mglob
 2393.          $lm_S8 = mglob
 2394.          $snt_T4 = _mt_endcritical( 6, _mt_rw_list(...), $snt_T4 )
 2395.          if ( $lm_S8 > mymmax ) then
 2285.             _free( t$252 )
 2435.             return
 2435.             goto <unknown>
 2435.          endif
 2396.          $m_S9 = (lm2m%base_addr)($lm_S8, 0)
 2399.          $t_S10 = (jminperm%base_addr)($m_S9, 0)
 2399.          if ( jmaxhalf + -$t_S10 >= 0 ) then
 2407.             if ( nvertspec > 0 ) then
 2399.                $I_L2399_270 = 0
 2399. !dir$ ivdep
 2399.                do
 2401.                   $kn_S12 = (nodehasj_f%base_addr)($t_S10 + $I_L2399_270, 0)
 2402.                   $ks_S14 = (nodehasj_f%base_addr)(1 + jmax + -$t_S10 + -$I_L2399_270, 0)
 2403.                   $inin_S13 = ( -( nvertspec * (firstlatinproc_f%base_addr)($kn_S12, 0) ) + nvertspec * $t_S10 + 2 * nvertspec * $lm_S8 * (nlatsinproc_f%base_addr)($kn_S12, 0) + -2 * nvertspec * (nlatsinproc_f%base_addr)($kn_S12, 0) + nvertspec * $I_L2399_270 )
 2404.                   $inin1_S17 = $inin_S13 + nvertspec * (nlatsinproc_f%base_addr)($kn_S12, 0)
 2405.                   $inis_S15 = nvertspec + -( nvertspec * $t_S10 ) + -( nvertspec * (firstlatinproc_f%base_addr)($ks_S14, 0) ) + -( nvertspec * $I_L2399_270 ) + nvertspec * jmax + 2 * nvertspec * $lm_S8 * (nlatsinproc_f%base_addr)($ks_S14, 0) + -2 * nvertspec * (nlatsinproc_f%base_addr)($ks_S14, 0)
 2406.                   $inis1_S18 = $inis_S15 + nvertspec * (nlatsinproc_f%base_addr)($ks_S14, 0)
 2407.                   $I_L2407_254 = 0
 2407. !dir$ unroll 2
 2407.                   do
 2408.                      foev($t_S10 + $I_L2399_270, 1 + $I_L2407_254) = (bufsend%base_addr)(1 + $inin_S13 + $I_L2407_254 + ldim * $kn_S12, 0) + (bufsend%base_addr)(1 + $inis_S15 + $I_L2407_254 + ldim * $ks_S14, 0)
 2409.                      foev($t_S10 + $I_L2399_270, 1 + nvertspec + $I_L2407_254) = (bufsend%base_addr)(1 + $inis1_S18 + $I_L2407_254 + ldim * $ks_S14, 0) + (bufsend%base_addr)(1 + $inin1_S17 + $I_L2407_254 + ldim * $kn_S12, 0)
 2410.                      food($t_S10 + $I_L2399_270, 1 + $I_L2407_254) = (bufsend%base_addr)(1 + $inin_S13 + $I_L2407_254 + ldim * $kn_S12, 0) + -(bufsend%base_addr)(1 + $inis_S15 + $I_L2407_254 + ldim * $ks_S14, 0)
 2411.                      food($t_S10 + $I_L2399_270, 1 + nvertspec + $I_L2407_254) = (bufsend%base_addr)(1 + $inin1_S17 + $I_L2407_254 + ldim * $kn_S12, 0) + -(bufsend%base_addr)(1 + $inis1_S18 + $I_L2407_254 + ldim * $ks_S14, 0)
 2412.                      $I_L2407_254 = 1 + $I_L2407_254
 2407.                      if ( $I_L2407_254 >= nvertspec ) exit
 2407.                   enddo
 2413.                   $I_L2399_270 = 1 + $I_L2399_270
 2412.                   if ( $I_L2399_270 >= 1 + jmaxhalf + -$t_S10 ) exit
 2412.                enddo
 2412.             endif
 2412.          endif
 2414.          if ( dv > 0 ) then
 2414.             $SCA_firstneven_I41 = (firstneven%base_addr)($lm_S8, 0)
 2414.             $SCA_neven_I42 = (neven%base_addr)($lm_S8, 0)
 2414.             $I_L2414_272 = 0
 2414.             do
 2415.                if ( $SCA_neven_I42 > 0 ) then
 2415.                   $I_L2415_256 = 0
 2415. !dir$ ivdep
 2415.                   do
 2416.                      (spec%base_addr)($SCA_firstneven_I41 + $I_L2415_256, 1 + $I_L2414_272, 0) = 0.0
 2417.                      $I_L2415_256 = 1 + $I_L2415_256
 2415.                      if ( $I_L2415_256 >= $SCA_neven_I42 ) exit
 2415.                   enddo
 2415.                endif
 2418.                $I_L2414_272 = 1 + $I_L2414_272
 2417.                if ( $I_L2414_272 >= dv ) exit
 2417.             enddo
 2417.          endif
 2419.          tm$56 = loc( (lf2s%base_addr)((firstneven%base_addr)($lm_S8, 0), $t_S10, 0) )
 2419.          a = _copyin( (lf2s%base_addr)((firstneven%base_addr)($lm_S8, 0), $t_S10, 0) )
 2419.          tm$58 = loc( foev($t_S10, 1) )
 2419.          b = _copyin( foev($t_S10, 1) )
 2419.          tm$60 = loc( (spec%base_addr)((firstneven%base_addr)($lm_S8, 0), 1, 0) )
 2419.          c = _copyin( (spec%base_addr)((firstneven%base_addr)($lm_S8, 0), 1, 0) )
 2419.          t$128 = dlmn
 2419.          t$129 = ( 1 + jmaxhalf + -$t_S10 )
 2419.          t$258 = max( 0, dlmn )
 2419.          t$259 = max( 0, dlmn )
 2419.          t$260 = max( 0, ( 1 + jmaxhalf + -$t_S10 ) )
 2419.          t$261 = max( 0, dlmn ) * max( 0, ( 1 + jmaxhalf + -$t_S10 ) )
 2419.          t$130 = djh
 2419.          t$131 = ( 2 * nvertspec )
 2419.          t$262 = max( 0, djh )
 2419.          t$263 = max( 0, djh )
 2419.          t$264 = max( 0, ( 2 * nvertspec ) )
 2419.          t$265 = max( 0, ( 2 * nvertspec ) ) * max( 0, djh )
 2419.          t$132 = dlmn
 2419.          t$133 = dv
 2419.          t$266 = max( 0, dlmn )
 2419.          t$267 = max( 0, dlmn )
 2419.          t$268 = max( 0, dv )
 2419.          t$269 = max( 0, dv ) * max( 0, dlmn )
 2419.          $t_S23 = (neven%base_addr)($lm_S8, 0)
 2419.          if ( $t_S23 > 0 ) then
 2419.             if ( 2 * nvertspec > 0 ) then
 2419.                if ( jmaxhalf + -$t_S10 >= 0 ) then
 2419.                    _substr($W0,1,1) = 'n'
 2419.                    _substr($W1,1,1) = 'n'
 2419.                   $W2 = $t_S23
 2419.                   $W3 = ( 2 * nvertspec )
 2419.                   $W4 = 1 + jmaxhalf + -$t_S10
 2419.                   $W5 = 1.0
 2419.                   $W6 = max( 0, dlmn )
 2419.                   $W7 = max( 0, djh )
 2419.                   $W8 = 1.0
 2419.                   $W9 = max( 0, dlmn )
 2419.                   _dgemm(  _substr($W0,1,1),  _substr($W1,1,1), $W2, $W3, $W4, $W5, a(1, 1), $W6, b(1, 1), $W7, $W8, c(1, 1), $W9 )
 2419.                endif
 2419.             endif
 2419.          endif
 2419.          (spec%base_addr)((firstneven%base_addr)($lm_S8, 0), 1, 0) = _copyout( c )
 2419.          foev($t_S10, 1) = _copyout( b )
 2419.          (lf2s%base_addr)((firstneven%base_addr)($lm_S8, 0), $t_S10, 0) = _copyout( a )
 2424.          if ( dv > 0 ) then
 2424.             $SCA_firstnodd_I43 = (firstnodd%base_addr)($lm_S8, 0)
 2424.             $SCA_nodd_I44 = (nodd%base_addr)($lm_S8, 0)
 2424.             $I_L2424_274 = 0
 2424.             do
 2425.                if ( $SCA_nodd_I44 > 0 ) then
 2425.                   $I_L2425_258 = 0
 2425. !dir$ ivdep
 2425.                   do
 2426.                      (spec%base_addr)($SCA_firstnodd_I43 + $I_L2425_258, 1 + $I_L2424_274, 0) = 0.0
 2427.                      $I_L2425_258 = 1 + $I_L2425_258
 2425.                      if ( $I_L2425_258 >= $SCA_nodd_I44 ) exit
 2425.                   enddo
 2425.                endif
 2428.                $I_L2424_274 = 1 + $I_L2424_274
 2427.                if ( $I_L2424_274 >= dv ) exit
 2427.             enddo
 2427.          endif
 2429.          tm$69 = loc( (lf2s%base_addr)((firstnodd%base_addr)($lm_S8, 0), $t_S10, 0) )
 2429.          a = _copyin( (lf2s%base_addr)((firstnodd%base_addr)($lm_S8, 0), $t_S10, 0) )
 2429.          tm$71 = loc( food($t_S10, 1) )
 2429.          b = _copyin( food($t_S10, 1) )
 2429.          tm$73 = loc( (spec%base_addr)((firstnodd%base_addr)($lm_S8, 0), 1, 0) )
 2429.          c = _copyin( (spec%base_addr)((firstnodd%base_addr)($lm_S8, 0), 1, 0) )
 2429.          t$128 = dlmn
 2429.          t$129 = ( 1 + jmaxhalf + -$t_S10 )
 2429.          t$258 = max( 0, dlmn )
 2429.          t$259 = max( 0, dlmn )
 2429.          t$260 = max( 0, ( 1 + jmaxhalf + -$t_S10 ) )
 2429.          t$261 = max( 0, dlmn ) * max( 0, ( 1 + jmaxhalf + -$t_S10 ) )
 2429.          t$130 = djh
 2429.          t$131 = ( 2 * nvertspec )
 2429.          t$262 = max( 0, djh )
 2429.          t$263 = max( 0, djh )
 2429.          t$264 = max( 0, ( 2 * nvertspec ) )
 2429.          t$265 = max( 0, ( 2 * nvertspec ) ) * max( 0, djh )
 2429.          t$132 = dlmn
 2429.          t$133 = dv
 2429.          t$266 = max( 0, dlmn )
 2429.          t$267 = max( 0, dlmn )
 2429.          t$268 = max( 0, dv )
 2429.          t$269 = max( 0, dv ) * max( 0, dlmn )
 2429.          $t_S31 = (nodd%base_addr)($lm_S8, 0)
 2429.          if ( $t_S31 > 0 ) then
 2429.             if ( 2 * nvertspec > 0 ) then
 2429.                if ( jmaxhalf + -$t_S10 >= 0 ) then
 2429.                    _substr($W10,1,1) = 'n'
 2429.                    _substr($W11,1,1) = 'n'
 2429.                   $W12 = $t_S31
 2429.                   $W13 = ( 2 * nvertspec )
 2429.                   $W14 = 1 + jmaxhalf + -$t_S10
 2429.                   $W15 = 1.0
 2429.                   $W16 = max( 0, dlmn )
 2429.                   $W17 = max( 0, djh )
 2429.                   $W18 = 1.0
 2429.                   $W19 = max( 0, dlmn )
 2429.                   _dgemm(  _substr($W10,1,1),  _substr($W11,1,1), $W12, $W13, $W14, $W15, a(1, 1), $W16, b(1, 1), $W17, $W18, c(1, 1), $W19 )
 2429.                endif
 2429.             endif
 2429.          endif
 2429.          (spec%base_addr)((firstnodd%base_addr)($lm_S8, 0), 1, 0) = _copyout( c )
 2429.          food($t_S10, 1) = _copyout( b )
 2429.       enddo
 2429.       end
 2429.       
 2451.       
 2451.       subroutine withdrawspectral( mnfirst, mnlast, mnextfirst, mnextlast )
 2452.       s1 = $_StaticDV_P0
 2452.       s1%base_addr = pointer to array[1] of real (kind=8)( 0 )
 2452.       s1%dim_1%LB = 1
 2452.       s1%dim_1%EX = 0
 2452.       s1%dim_1%SM = 1
 2441.       s2 = $_StaticDV_P1
 2441.       s2%base_addr = pointer to array[1] of array[1] of real (kind=8)( 0 )
 2441.       s2%dim_1%LB = 1
 2441.       s2%dim_1%EX = 0
 2441.       s2%dim_1%SM = 1
 2441.       s2%dim_2%LB = 1
 2441.       s2%dim_2%EX = 0
 2441.       s2%dim_2%SM = 1
 2455.       if ( nspecfields > 0 ) then
 2474.          $SC_spec2d_I15 = spec2d%dim_1%EX
 2474.          $SC_spec2d_I16 = spec2d%dim_1%LB
 2469.          $SC_lmnmap_I13 = lmnmap%dim_1%EX
 2469.          $SC_lmnmap_I14 = lmnmap%dim_1%LB
 2463.          $SC_spec_I6 = spec%dim_1%EX
 2463.          $SC_spec_I7 = spec%dim_1%LB
 2463.          $SC_lmnextmap_I8 = lmnextmap%dim_1%EX
 2463.          $SC_lmnextmap_I9 = lmnextmap%dim_1%LB
 2463.          $SC_spec_I11 = spec%dim_2%SM
 2463.          $SC_spec_I10 = spec%dim_2%EX
 2463.          $SC_spec_I12 = spec%dim_2%LB
 2459.          $SC_prevspec_I4 = prevspec%dim_1%EX
 2459.          $SC_prevspec_I5 = prevspec%dim_1%LB
 2458.          $SC_spec1d_I2 = spec1d%dim_1%EX
 2458.          $SC_spec1d_I3 = spec1d%dim_1%LB
 2457.          $SC_surfspec_I0 = surfspec%dim_1%EX
 2457.          $SC_surfspec_I1 = surfspec%dim_1%LB
 2455.          $I_L2455_68 = 0
 2455. !dir$ loop_info (automatic) cache_nt( surfspec )
 2455.          do
 2457.             if ( (surfspec%base_addr)(1 + $I_L2455_68, 0) /= .false. ) then
 2458.                s1 = (spec1d%base_addr)(1 + $I_L2455_68, 0)%p
 2459.                $lastv_S2 = 1 + (prevspec%base_addr)(1 + $I_L2455_68, 0)
 2460.                if ( -s1%dim_1%EX + 2 * mymnextmax == 0 ) then
 2462.                   if ( mnextlast + -mnextfirst >= 0 ) then
 2463.                      $SC_s1_I18 = s1%dim_1%SM
 2463.                      $SC_s1_I19 = s1%dim_1%LB
 2463.                      $SC_s1_I17 = s1%dim_1%EX
 2462.                      $I_L2462_56 = 0
 2462. !dir$ ivdep
 2462.                      do
 2463.                         (s1%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L2462_56, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L2462_56, 0), $lastv_S2, 0)
 2464.                         (s1%base_addr)(2 * mnextfirst + 2 * $I_L2462_56, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L2462_56, 0), nvertspec + $lastv_S2, 0)
 2465.                         $I_L2462_56 = 1 + $I_L2462_56
 2462.                         if ( $I_L2462_56 >= 1 + mnextlast + -mnextfirst ) exit
 2462.                      enddo
 2462.                   endif
 2466.                else if ( mnlast + -mnfirst >= 0 ) then
 2469.                   $SC_s1_I18 = s1%dim_1%SM
 2469.                   $SC_s1_I19 = s1%dim_1%LB
 2469.                   $SC_s1_I17 = s1%dim_1%EX
 2468.                   $I_L2468_58 = 0
 2468. !dir$ ivdep
 2468.                   do
 2469.                      (s1%base_addr)(-1 + 2 * mnfirst + 2 * $I_L2468_58, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L2468_58, 0), $lastv_S2, 0)
 2470.                      (s1%base_addr)(2 * mnfirst + 2 * $I_L2468_58, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L2468_58, 0), nvertspec + $lastv_S2, 0)
 2471.                      $I_L2468_58 = 1 + $I_L2468_58
 2468.                      if ( $I_L2468_58 >= 1 + mnlast + -mnfirst ) exit
 2468.                   enddo
 2468.                endif
 2468.             else
 2474.                s2 = (spec2d%base_addr)(1 + $I_L2455_68, 0)%p
 2475.                $lastv_S6 = (prevspec%base_addr)(1 + $I_L2455_68, 0)
 2476.                if ( -s2%dim_1%EX + 2 * mymnextmax == 0 ) then
 2477.                   if ( kmaxloc > 0 ) then
 2479.                      if ( mnextlast + -mnextfirst >= 0 ) then
 2480.                         $SC_s2_I21 = s2%dim_1%SM
 2480.                         $SC_s2_I22 = s2%dim_1%LB
 2480.                         $SC_s2_I24 = s2%dim_2%SM
 2480.                         $SC_s2_I23 = s2%dim_2%EX
 2480.                         $SC_s2_I25 = s2%dim_2%LB
 2480.                         $SC_s2_I20 = s2%dim_1%EX
 2477.                         $SI_L2477_66_G1 = 0
 2477.                         do
 2479.                            $SI_L2479_62_G4 = 0
 2479.                            do
 2477.                               $I_L2477_76 = 0
 2477. !dir$ shortloop16
 2477. !dir$ blocking_size( 2, 2 )
 2477.                               do
 2479.                                  $I_L2479_73 = 0
 2479. !dir$ ivdep
 2479. !dir$ blocking_size( 256, 256 )
 2479.                                  do
 2480.                                     (s2%base_addr)(-1 + 2 * mnextfirst + 2 * $I_L2479_73 + 512 * $SI_L2479_62_G4, 1 + $I_L2477_76 + 2 * $SI_L2477_66_G1, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L2479_73 + 256 * $SI_L2479_62_G4, 0), 1 + $lastv_S6 + $I_L2477_76 + 2 * $SI_L2477_66_G1, 0)
 2481.                                     (s2%base_addr)(2 * mnextfirst + 2 * $I_L2479_73 + 512 * $SI_L2479_62_G4, 1 + $I_L2477_76 + 2 * $SI_L2477_66_G1, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L2479_73 + 256 * $SI_L2479_62_G4, 0), 1 + nvertspec + $lastv_S6 + $I_L2477_76 + 2 * $SI_L2477_66_G1, 0)
 2479.                                     $I_L2479_73 = 1 + $I_L2479_73
 2479.                                     if ( $I_L2479_73 >= min( 1 + mnextlast + -mnextfirst, 256 + 256 * $SI_L2479_62_G4 ) + -256 * $SI_L2479_62_G4 ) exit
 2479.                                  enddo
 2477.                                  $I_L2477_76 = 1 + $I_L2477_76
 2477.                                  if ( $I_L2477_76 >= min( kmaxloc, 2 + 2 * $SI_L2477_66_G1 ) + -2 * $SI_L2477_66_G1 ) exit
 2477.                               enddo
 2479.                               $SI_L2479_62_G4 = 1 + $SI_L2479_62_G4
 2482.                               if ( $SI_L2479_62_G4 >= _rsh( 256 + mnextlast + -mnextfirst, 8 ) ) exit
 2482.                            enddo
 2477.                            $SI_L2477_66_G1 = 1 + $SI_L2477_66_G1
 2477.                            if ( $SI_L2477_66_G1 >= _rsh( 1 + kmaxloc, 1 ) ) exit
 2477.                         enddo
 2477.                      endif
 2477.                   endif
 2484.                else if ( kmaxloc > 0 ) then
 2487.                   if ( mnlast + -mnfirst >= 0 ) then
 2488.                      $SC_s2_I21 = s2%dim_1%SM
 2488.                      $SC_s2_I22 = s2%dim_1%LB
 2488.                      $SC_s2_I24 = s2%dim_2%SM
 2488.                      $SC_s2_I23 = s2%dim_2%EX
 2488.                      $SC_s2_I25 = s2%dim_2%LB
 2488.                      $SC_s2_I20 = s2%dim_1%EX
 2485.                      $SI_L2485_64_G7 = 0
 2485.                      do
 2487.                         $SI_L2487_60_G10 = 0
 2487.                         do
 2485.                            $I_L2485_79 = 0
 2485. !dir$ shortloop16
 2485. !dir$ blocking_size( 2, 2 )
 2485.                            do
 2487.                               $I_L2487_70 = 0
 2487. !dir$ ivdep
 2487. !dir$ blocking_size( 256, 256 )
 2487.                               do
 2488.                                  (s2%base_addr)(-1 + 2 * mnfirst + 2 * $I_L2487_70 + 512 * $SI_L2487_60_G10, 1 + $I_L2485_79 + 2 * $SI_L2485_64_G7, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L2487_70 + 256 * $SI_L2487_60_G10, 0), 1 + $lastv_S6 + $I_L2485_79 + 2 * $SI_L2485_64_G7, 0)
 2489.                                  (s2%base_addr)(2 * mnfirst + 2 * $I_L2487_70 + 512 * $SI_L2487_60_G10, 1 + $I_L2485_79 + 2 * $SI_L2485_64_G7, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L2487_70 + 256 * $SI_L2487_60_G10, 0), 1 + nvertspec + $lastv_S6 + $I_L2485_79 + 2 * $SI_L2485_64_G7, 0)
 2487.                                  $I_L2487_70 = 1 + $I_L2487_70
 2487.                                  if ( $I_L2487_70 >= min( 1 + mnlast + -mnfirst, 256 + 256 * $SI_L2487_60_G10 ) + -256 * $SI_L2487_60_G10 ) exit
 2487.                               enddo
 2485.                               $I_L2485_79 = 1 + $I_L2485_79
 2485.                               if ( $I_L2485_79 >= min( kmaxloc, 2 + 2 * $SI_L2485_64_G7 ) + -2 * $SI_L2485_64_G7 ) exit
 2485.                            enddo
 2487.                            $SI_L2487_60_G10 = 1 + $SI_L2487_60_G10
 2490.                            if ( $SI_L2487_60_G10 >= _rsh( 256 + mnlast + -mnfirst, 8 ) ) exit
 2490.                         enddo
 2485.                         $SI_L2485_64_G7 = 1 + $SI_L2485_64_G7
 2485.                         if ( $SI_L2485_64_G7 >= _rsh( 1 + kmaxloc, 1 ) ) exit
 2485.                      enddo
 2485.                   endif
 2485.                endif
 2485.             endif
 2494.             $I_L2455_68 = 1 + $I_L2455_68
 2493.             if ( $I_L2455_68 >= nspecfields ) exit
 2493.          enddo
 2493.       endif
 2496.       return
 2496.       end
 2496.       
 2499.       
 2499.       subroutine destroy
 2500.       $_allo_P0(0) = 0x1000000000001L
 2500.       $_allo_P0(1) = loc( spec )
 2500.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 2500.       spec%header%assoc = 0
 2501.       $_allo_P1(0) = 0x1000000000001L
 2501.       $_allo_P1(1) = loc( four )
 2501.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 2501.       four%header%assoc = 0
 2502.       if ( mnodes%header%assoc == 1 ) then
 2503.          $_allo_P2(0) = 0x1000000000001L
 2503.          $_allo_P2(1) = loc( mnodes )
 2503.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 2503.          mnodes%header%assoc = 0
 2503.       endif
 2505.       if ( surfspec%header%assoc == 1 ) then
 2506.          $_allo_P3(0) = 0x1000000000001L
 2506.          $_allo_P3(1) = loc( surfspec )
 2506.          call __deallocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 2506.          surfspec%header%assoc = 0
 2506.       endif
 2508.       if ( prevspec%header%assoc == 1 ) then
 2509.          $_allo_P4(0) = 0x1000000000001L
 2509.          $_allo_P4(1) = loc( prevspec )
 2509.          call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 2509.          prevspec%header%assoc = 0
 2509.       endif
 2511.       if ( spec1d%header%assoc == 1 ) then
 2512.          $_allo_P5(0) = 0x1000000000001L
 2512.          $_allo_P5(1) = loc( spec1d )
 2512.          call __deallocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 2512.          spec1d%header%assoc = 0
 2512.       endif
 2514.       if ( spec2d%header%assoc == 1 ) then
 2515.          $_allo_P6(0) = 0x1000000000001L
 2515.          $_allo_P6(1) = loc( spec2d )
 2515.          call __deallocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 2515.          spec2d%header%assoc = 0
 2515.       endif
 2518.       if ( surfgrid%header%assoc == 1 ) then
 2519.          $_allo_P7(0) = 0x1000000000001L
 2519.          $_allo_P7(1) = loc( surfgrid )
 2519.          call __deallocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 2519.          surfgrid%header%assoc = 0
 2519.       endif
 2521.       if ( prevgrid%header%assoc == 1 ) then
 2522.          $_allo_P8(0) = 0x1000000000001L
 2522.          $_allo_P8(1) = loc( prevgrid )
 2522.          call __deallocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 2522.          prevgrid%header%assoc = 0
 2522.       endif
 2524.       if ( grid2d%header%assoc == 1 ) then
 2525.          $_allo_P9(0) = 0x1000000000001L
 2525.          $_allo_P9(1) = loc( grid2d )
 2525.          call __deallocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 2525.          grid2d%header%assoc = 0
 2525.       endif
 2527.       if ( grid3d%header%assoc == 1 ) then
 2528.          $_allo_P10(0) = 0x1000000000001L
 2528.          $_allo_P10(1) = loc( grid3d )
 2528.          call __deallocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 2528.          grid3d%header%assoc = 0
 2528.       endif
 2530.       if ( fieldfordellam%header%assoc == 1 ) then
 2531.          $_allo_P11(0) = 0x1000000000001L
 2531.          $_allo_P11(1) = loc( fieldfordellam )
 2531.          call __deallocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 2531.          fieldfordellam%header%assoc = 0
 2531.       endif
 2533.       if ( prevvertdellamsource%header%assoc == 1 ) then
 2534.          $_allo_P12(0) = 0x1000000000001L
 2534.          $_allo_P12(1) = loc( prevvertdellamsource )
 2534.          call __deallocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 2534.          prevvertdellamsource%header%assoc = 0
 2534.       endif
 2536.       return
 2536.       end
 2536.       
 2543.       
 2543.       subroutine mmd( a, lda, b, ldb, c, ldc, tdc, ni, nj, nk )
 2543.       t$128 = lda
 2543.       t$129 = nk
 2546.       t$258 = _zla( 0, lda )
 2543.       t$259 = _zla( 0, lda )
 2546.       t$260 = _zla( 0, nk )
 2543.       t$261 = _zla( 0, lda ) * _zla( 0, nk )
 2543.       t$130 = ldb
 2543.       t$131 = nj
 2547.       t$262 = _zla( 0, ldb )
 2543.       t$263 = _zla( 0, ldb )
 2547.       t$264 = _zla( 0, nj )
 2543.       t$265 = _zla( 0, ldb ) * _zla( 0, nj )
 2543.       t$132 = ldc
 2543.       t$133 = tdc
 2548.       t$266 = _zla( 0, ldc )
 2543.       t$267 = _zla( 0, ldc )
 2548.       t$268 = _zla( 0, tdc )
 2543.       t$269 = _zla( 0, ldc ) * _zla( 0, tdc )
 2550.       if ( ni > 0 ) then
 2551.          if ( nj > 0 ) then
 2552.             if ( nk > 0 ) then
 2553.                 _substr($W0,1,1) = 'n'
 2553.                 _substr($W1,1,1) = 'n'
 2553.                $W2 = ni
 2553.                $W3 = nj
 2553.                $W4 = nk
 2553.                $W5 = 1.0
 2553.                $W6 = lda
 2553.                $W7 = ldb
 2553.                $W8 = 1.0
 2553.                $W9 = ldc
 2553.                _dgemm(  _substr($W0,1,1),  _substr($W1,1,1), $W2, $W3, $W4, $W5, a(1, 1), $W6, b(1, 1), $W7, $W8, c(1, 1), $W9 )
 2553.             endif
 2553.          endif
 2553.       endif
 2557.       return
 2557.       end
 2557.       
 2562.       
 2562.       subroutine mmt( a, lda, b, ldb, c, ldc, tdc, ni, nj, nk )
 2562.       t$134 = lda
 2562.       t$135 = nk
 2565.       t$270 = _zla( 0, lda )
 2562.       t$271 = _zla( 0, lda )
 2565.       t$272 = _zla( 0, nk )
 2562.       t$273 = _zla( 0, lda ) * _zla( 0, nk )
 2562.       t$136 = ldb
 2562.       t$137 = nj
 2566.       t$274 = _zla( 0, ldb )
 2562.       t$275 = _zla( 0, ldb )
 2566.       t$276 = _zla( 0, nj )
 2562.       t$277 = _zla( 0, ldb ) * _zla( 0, nj )
 2562.       t$138 = ldc
 2562.       t$139 = tdc
 2567.       t$278 = _zla( 0, ldc )
 2562.       t$279 = _zla( 0, ldc )
 2567.       t$280 = _zla( 0, tdc )
 2562.       t$281 = _zla( 0, ldc ) * _zla( 0, tdc )
 2570.       if ( ni > 0 ) then
 2571.          if ( nj > 0 ) then
 2572.             if ( nk > 0 ) then
 2573.                 _substr($W0,1,1) = 't'
 2573.                 _substr($W1,1,1) = 't'
 2573.                $W2 = nj
 2573.                $W3 = ni
 2573.                $W4 = nk
 2573.                $W5 = 1.0
 2573.                $W6 = ldb
 2573.                $W7 = lda
 2573.                $W8 = 1.0
 2573.                $W9 = ldc
 2573.                _dgemm(  _substr($W0,1,1),  _substr($W1,1,1), $W2, $W3, $W4, $W5, b(1, 1), $W6, a(1, 1), $W7, $W8, c(1, 1), $W9 )
 2573.             endif
 2573.          endif
 2573.       endif
 2577.       return
 2577.       end
 2577.       
 2592.       
 2592.       subroutine invffttrans( finout, ldinout, tdinout, n, lot, trigs, ntrigs, factors, nfactors )
 2592.       t$140 = ldinout
 2592.       t$141 = tdinout
 2594.       t$282 = _zla( 0, ldinout )
 2592.       t$283 = _zla( 0, ldinout )
 2594.       t$284 = _zla( 0, tdinout )
 2592.       t$285 = _zla( 0, ldinout ) * _zla( 0, tdinout )
 2592.       t$142 = ntrigs
 2598.       t$286 = _zla( 0, ntrigs )
 2592.       t$143 = nfactors
 2600.       t$287 = _zla( 0, nfactors )
 2592.       t$144 = lot
 2592.       t$145 = n / 2
 2608.       t$288 = _zla( 0, lot )
 2592.       t$289 = _zla( 0, lot )
 2608.       t$290 = _zla( 0, t$145 )
 2592.       t$291 = _zla( 0, t$145 ) * _zla( 0, lot )
 2608.       t$294 = 8 * _zla( 0, t$145 ) * _zla( 0, lot )
 2609.       t$295 = 8 * ( 7 + 8 * _zla( 0, t$145 ) * _zla( 0, lot ) ) / 8
 2609.       t$297 = t$295 + 8 * _zla( 0, t$145 ) * _zla( 0, lot )
 2610.       t$298 = 8 * ( 7 + t$295 + 8 * _zla( 0, t$145 ) * _zla( 0, lot ) ) / 8
 2610.       t$300 = t$298 + 8 * _zla( 0, t$145 ) * _zla( 0, lot )
 2611.       t$301 = 8 * ( 7 + t$298 + 8 * _zla( 0, t$145 ) * _zla( 0, lot ) ) / 8
 2611.       t$303 = t$301 + 8 * _zla( 0, t$145 ) * _zla( 0, lot )
 2592.       t$292 = int( _alloc( t$301 + 8 * _zla( 0, t$145 ) * _zla( 0, lot ) ), 8 )
 2608.       t$293 = t$292
 2609.       t$296 = t$295 + t$292
 2610.       t$299 = t$298 + t$292
 2611.       t$302 = t$301 + t$292
 2614.       $nfax_S6 = factors(1)
 2615.       nh = n / 2
 2617.       t$146 = ldinout
 2617.       t$147 = tdinout
 2617.       t$304 = max( 0, ldinout )
 2617.       t$305 = max( 0, ldinout )
 2617.       t$306 = max( 0, tdinout )
 2617.       t$307 = max( 0, ldinout ) * max( 0, tdinout )
 2617.       t$148 = lot
 2617.       t$149 = n / 2
 2617.       t$308 = max( 0, lot )
 2617.       t$309 = max( 0, lot )
 2617.       t$310 = max( 0, n / 2 )
 2617.       t$311 = max( 0, lot ) * max( 0, n / 2 )
 2617.       t$150 = ntrigs
 2617.       t$312 = max( 0, ntrigs )
 2617.       if ( lot > 0 ) then
 2617.          $I_L2617_36 = 0
 2617. !dir$ ivdep
 2617.          do
 2617.             a(1 + $I_L2617_36, 1) = finout(1 + $I_L2617_36, 1) + finout(1 + $I_L2617_36, 1 + n)
 2617.             b(1 + $I_L2617_36, 1) = finout(1 + $I_L2617_36, 1) + -finout(1 + $I_L2617_36, 1 + n)
 2617.             $I_L2617_36 = 1 + $I_L2617_36
 2617.             if ( $I_L2617_36 >= lot ) exit
 2617.          enddo
 2617.       endif
 2617.       if ( -2 + ( 1 + n / 2 ) / 2 >= 0 ) then
 2617.          if ( lot > 0 ) then
 2617.             $I_L2617_48 = 0
 2617.             do
 2617.                $c_S3 = trigs(3 + n + 2 * $I_L2617_48)
 2617.                $s_S4 = trigs(4 + n + 2 * $I_L2617_48)
 2617.                $I_L2617_38 = 0
 2617. !dir$ ivdep
 2617.                do
 2617.                   a(1 + $I_L2617_38, 2 + $I_L2617_48) = ( finout(1 + $I_L2617_38, 3 + 2 * $I_L2617_48) + finout(1 + $I_L2617_38, -1 + n + -2 * $I_L2617_48) ) + -( $c_S3 * ( finout(1 + $I_L2617_38, n + -2 * $I_L2617_48) + finout(1 + $I_L2617_38, 4 + 2 * $I_L2617_48) ) + $s_S4 * ( finout(1 + $I_L2617_38, 3 + 2 * $I_L2617_48) + -finout(1 + $I_L2617_38, -1 + n + -2 * $I_L2617_48) ) )
 2617.                   a(1 + $I_L2617_38, n / 2 + -$I_L2617_48) = ( finout(1 + $I_L2617_38, 3 + 2 * $I_L2617_48) + finout(1 + $I_L2617_38, -1 + n + -2 * $I_L2617_48) ) + ( $c_S3 * ( finout(1 + $I_L2617_38, n + -2 * $I_L2617_48) + finout(1 + $I_L2617_38, 4 + 2 * $I_L2617_48) ) + $s_S4 * ( finout(1 + $I_L2617_38, 3 + 2 * $I_L2617_48) + -finout(1 + $I_L2617_38, -1 + n + -2 * $I_L2617_48) ) )
 2617.                   b(1 + $I_L2617_38, 2 + $I_L2617_48) = ( finout(1 + $I_L2617_38, 4 + 2 * $I_L2617_48) + -finout(1 + $I_L2617_38, n + -2 * $I_L2617_48) ) + ( -( $s_S4 * ( finout(1 + $I_L2617_38, n + -2 * $I_L2617_48) + finout(1 + $I_L2617_38, 4 + 2 * $I_L2617_48) ) ) + $c_S3 * ( finout(1 + $I_L2617_38, 3 + 2 * $I_L2617_48) + -finout(1 + $I_L2617_38, -1 + n + -2 * $I_L2617_48) ) )
 2617.                   b(1 + $I_L2617_38, n / 2 + -$I_L2617_48) = ( -( $s_S4 * ( finout(1 + $I_L2617_38, n + -2 * $I_L2617_48) + finout(1 + $I_L2617_38, 4 + 2 * $I_L2617_48) ) ) + $c_S3 * ( finout(1 + $I_L2617_38, 3 + 2 * $I_L2617_48) + -finout(1 + $I_L2617_38, -1 + n + -2 * $I_L2617_48) ) ) + -( finout(1 + $I_L2617_38, 4 + 2 * $I_L2617_48) + -finout(1 + $I_L2617_38, n + -2 * $I_L2617_48) )
 2617.                   $I_L2617_38 = 1 + $I_L2617_38
 2617.                   if ( $I_L2617_38 >= lot ) exit
 2617.                enddo
 2617.                $I_L2617_48 = 1 + $I_L2617_48
 2617.                if ( $I_L2617_48 >= -1 + ( 1 + n / 2 ) / 2 ) exit
 2617.             enddo
 2617.          endif
 2617.       endif
 2617.       if ( n / 2 >= 2 ) then
 2617.          if ( mod( n / 2, 2 ) == 0 ) then
 2617.             if ( lot > 0 ) then
 2617.                $I_L2617_40 = 0
 2617. !dir$ ivdep
 2617.                do
 2617.                   a(1 + $I_L2617_40, 1 + n / 4) = 2.0 * finout(1 + $I_L2617_40, 1 + n / 2)
 2617.                   b(1 + $I_L2617_40, 1 + n / 4) = -2.0 * finout(1 + $I_L2617_40, 2 + n / 2)
 2617.                   $I_L2617_40 = 1 + $I_L2617_40
 2617.                   if ( $I_L2617_40 >= lot ) exit
 2617.                enddo
 2617.             endif
 2617.          endif
 2617.       endif
 2619.       la = 1
 2620.       $ab2cd_S7 = .true.
 2621.       if ( $nfax_S6 > 0 ) then
 2621.          $I_L2621_42 = 0
 2621.          do
 2622.             if ( $ab2cd_S7 /= .false. ) then
 2623.                call onepass( a(1, 1), b(1, 1), c(1, 1), d(1, 1), lot, nh, factors(2 + $I_L2621_42), la, trigs(1), ntrigs )
 2624.                $ab2cd_S7 = .false.
 2624.             else
 2626.                call onepass( c(1, 1), d(1, 1), a(1, 1), b(1, 1), lot, nh, factors(2 + $I_L2621_42), la, trigs(1), ntrigs )
 2627.                $ab2cd_S7 = .true.
 2627.             endif
 2629.             la = la * factors(2 + $I_L2621_42)
 2630.             $I_L2621_42 = 1 + $I_L2621_42
 2628.             if ( $I_L2621_42 >= $nfax_S6 ) exit
 2628.          enddo
 2628.       endif
 2632.       if ( $ab2cd_S7 /= .false. ) then
 2633.          t$153 = lot
 2633.          t$154 = nh
 2633.          t$313 = max( 0, lot )
 2633.          t$314 = max( 0, lot )
 2633.          t$315 = max( 0, nh )
 2633.          t$316 = max( 0, lot ) * max( 0, nh )
 2633.          t$151 = ldinout
 2633.          t$152 = tdinout
 2633.          t$317 = max( 0, ldinout )
 2633.          t$318 = max( 0, ldinout )
 2633.          t$319 = max( 0, tdinout )
 2633.          t$320 = max( 0, ldinout ) * max( 0, tdinout )
 2633.          if ( nh > 0 ) then
 2633.             if ( lot > 0 ) then
 2633.                $I_L2633_52 = 0
 2633.                do
 2633.                   $I_L2633_46 = 0
 2633. !dir$ ivdep
 2633.                   do
 2633.                      finout(1 + $I_L2633_46, 1 + 2 * $I_L2633_52) = a(1 + $I_L2633_46, 1 + $I_L2633_52)
 2633.                      finout(1 + $I_L2633_46, 2 + 2 * $I_L2633_52) = b(1 + $I_L2633_46, 1 + $I_L2633_52)
 2633.                      $I_L2633_46 = 1 + $I_L2633_46
 2633.                      if ( $I_L2633_46 >= lot ) exit
 2633.                   enddo
 2633.                   $I_L2633_52 = 1 + $I_L2633_52
 2633.                   if ( $I_L2633_52 >= nh ) exit
 2633.                enddo
 2633.             endif
 2633.          endif
 2633.       else
 2635.          t$153 = lot
 2635.          t$154 = nh
 2635.          t$313 = max( 0, lot )
 2635.          t$314 = max( 0, lot )
 2635.          t$315 = max( 0, nh )
 2635.          t$316 = max( 0, lot ) * max( 0, nh )
 2635.          t$151 = ldinout
 2635.          t$152 = tdinout
 2635.          t$317 = max( 0, ldinout )
 2635.          t$318 = max( 0, ldinout )
 2635.          t$319 = max( 0, tdinout )
 2635.          t$320 = max( 0, ldinout ) * max( 0, tdinout )
 2635.          if ( nh > 0 ) then
 2635.             if ( lot > 0 ) then
 2635.                $I_L2635_50 = 0
 2635.                do
 2635.                   $I_L2635_44 = 0
 2635. !dir$ ivdep
 2635.                   do
 2635.                      finout(1 + $I_L2635_44, 1 + 2 * $I_L2635_50) = c(1 + $I_L2635_44, 1 + $I_L2635_50)
 2635.                      finout(1 + $I_L2635_44, 2 + 2 * $I_L2635_50) = d(1 + $I_L2635_44, 1 + $I_L2635_50)
 2635.                      $I_L2635_44 = 1 + $I_L2635_44
 2635.                      if ( $I_L2635_44 >= lot ) exit
 2635.                   enddo
 2635.                   $I_L2635_50 = 1 + $I_L2635_50
 2635.                   if ( $I_L2635_50 >= nh ) exit
 2635.                enddo
 2635.             endif
 2635.          endif
 2635.       endif
 2592.       _free( t$292 )
 2637.       return
 2637.       end
 2637.       
 2643.       
 2643.       subroutine splitfourtrans( fin, a, b, ldin, tdin, n, nh, lot, trigs, ntrigs )
 2643.       t$146 = ldin
 2643.       t$147 = tdin
 2649.       t$304 = _zla( 0, ldin )
 2643.       t$305 = _zla( 0, ldin )
 2649.       t$306 = _zla( 0, tdin )
 2643.       t$307 = _zla( 0, ldin ) * _zla( 0, tdin )
 2643.       t$148 = lot
 2643.       t$149 = nh
 2650.       t$308 = _zla( 0, lot )
 2643.       t$309 = _zla( 0, lot )
 2650.       t$310 = _zla( 0, nh )
 2643.       t$311 = _zla( 0, lot ) * _zla( 0, nh )
 2643.       t$150 = ntrigs
 2653.       t$312 = _zla( 0, ntrigs )
 2659.       if ( lot > 0 ) then
 2659.          $I_L2659_16 = 0
 2659. !dir$ ivdep
 2659.          do
 2660.             a(1 + $I_L2659_16, 1) = fin(1 + $I_L2659_16, 1) + fin(1 + $I_L2659_16, 1 + n)
 2661.             b(1 + $I_L2659_16, 1) = fin(1 + $I_L2659_16, 1) + -fin(1 + $I_L2659_16, 1 + n)
 2662.             $I_L2659_16 = 1 + $I_L2659_16
 2659.             if ( $I_L2659_16 >= lot ) exit
 2659.          enddo
 2659.       endif
 2664.       if ( -2 + ( 1 + nh ) / 2 >= 0 ) then
 2668.          if ( lot > 0 ) then
 2664.             $I_L2664_22 = 0
 2664.             do
 2665.                $c_S3 = trigs(3 + n + 2 * $I_L2664_22)
 2666.                $s_S4 = trigs(4 + n + 2 * $I_L2664_22)
 2668.                $I_L2668_18 = 0
 2668. !dir$ ivdep
 2668.                do
 2669.                   a(1 + $I_L2668_18, 2 + $I_L2664_22) = ( fin(1 + $I_L2668_18, 3 + 2 * $I_L2664_22) + fin(1 + $I_L2668_18, -1 + n + -2 * $I_L2664_22) ) + -( $c_S3 * ( fin(1 + $I_L2668_18, n + -2 * $I_L2664_22) + fin(1 + $I_L2668_18, 4 + 2 * $I_L2664_22) ) + $s_S4 * ( fin(1 + $I_L2668_18, 3 + 2 * $I_L2664_22) + -fin(1 + $I_L2668_18, -1 + n + -2 * $I_L2664_22) ) )
 2672.                   a(1 + $I_L2668_18, nh + -$I_L2664_22) = ( fin(1 + $I_L2668_18, 3 + 2 * $I_L2664_22) + fin(1 + $I_L2668_18, -1 + n + -2 * $I_L2664_22) ) + ( $c_S3 * ( fin(1 + $I_L2668_18, n + -2 * $I_L2664_22) + fin(1 + $I_L2668_18, 4 + 2 * $I_L2664_22) ) + $s_S4 * ( fin(1 + $I_L2668_18, 3 + 2 * $I_L2664_22) + -fin(1 + $I_L2668_18, -1 + n + -2 * $I_L2664_22) ) )
 2675.                   b(1 + $I_L2668_18, 2 + $I_L2664_22) = ( fin(1 + $I_L2668_18, 4 + 2 * $I_L2664_22) + -fin(1 + $I_L2668_18, n + -2 * $I_L2664_22) ) + ( -( $s_S4 * ( fin(1 + $I_L2668_18, n + -2 * $I_L2664_22) + fin(1 + $I_L2668_18, 4 + 2 * $I_L2664_22) ) ) + $c_S3 * ( fin(1 + $I_L2668_18, 3 + 2 * $I_L2664_22) + -fin(1 + $I_L2668_18, -1 + n + -2 * $I_L2664_22) ) )
 2678.                   b(1 + $I_L2668_18, nh + -$I_L2664_22) = ( -( $s_S4 * ( fin(1 + $I_L2668_18, n + -2 * $I_L2664_22) + fin(1 + $I_L2668_18, 4 + 2 * $I_L2664_22) ) ) + $c_S3 * ( fin(1 + $I_L2668_18, 3 + 2 * $I_L2664_22) + -fin(1 + $I_L2668_18, -1 + n + -2 * $I_L2664_22) ) ) + -( fin(1 + $I_L2668_18, 4 + 2 * $I_L2664_22) + -fin(1 + $I_L2668_18, n + -2 * $I_L2664_22) )
 2681.                   $I_L2668_18 = 1 + $I_L2668_18
 2668.                   if ( $I_L2668_18 >= lot ) exit
 2668.                enddo
 2682.                $I_L2664_22 = 1 + $I_L2664_22
 2681.                if ( $I_L2664_22 >= -1 + ( 1 + nh ) / 2 ) exit
 2681.             enddo
 2681.          endif
 2681.       endif
 2683.       if ( nh >= 2 ) then
 2683.          if ( mod( nh, 2 ) == 0 ) then
 2685.             if ( lot > 0 ) then
 2685.                $I_L2685_20 = 0
 2685. !dir$ ivdep
 2685.                do
 2686.                   a(1 + $I_L2685_20, 1 + nh / 2) = 2.0 * fin(1 + $I_L2685_20, 1 + nh)
 2687.                   b(1 + $I_L2685_20, 1 + nh / 2) = -2.0 * fin(1 + $I_L2685_20, 2 + nh)
 2688.                   $I_L2685_20 = 1 + $I_L2685_20
 2685.                   if ( $I_L2685_20 >= lot ) exit
 2685.                enddo
 2685.             endif
 2685.          endif
 2685.       endif
 2690.       return
 2690.       end
 2690.       
 2700.       
 2700.       subroutine joingridtrans( a, b, fout, ldout, tdout, nh, lot )
 2700.       t$153 = lot
 2700.       t$154 = nh
 2705.       t$313 = _zla( 0, lot )
 2700.       t$314 = _zla( 0, lot )
 2705.       t$315 = _zla( 0, nh )
 2700.       t$316 = _zla( 0, lot ) * _zla( 0, nh )
 2700.       t$151 = ldout
 2700.       t$152 = tdout
 2704.       t$317 = _zla( 0, ldout )
 2700.       t$318 = _zla( 0, ldout )
 2704.       t$319 = _zla( 0, tdout )
 2700.       t$320 = _zla( 0, ldout ) * _zla( 0, tdout )
 2710.       if ( nh > 0 ) then
 2711.          if ( lot > 0 ) then
 2710.             $I_L2710_10 = 0
 2710.             do
 2711.                $I_L2711_8 = 0
 2711. !dir$ ivdep
 2711.                do
 2712.                   fout(1 + $I_L2711_8, 1 + 2 * $I_L2710_10) = a(1 + $I_L2711_8, 1 + $I_L2710_10)
 2713.                   fout(1 + $I_L2711_8, 2 + 2 * $I_L2710_10) = b(1 + $I_L2711_8, 1 + $I_L2710_10)
 2714.                   $I_L2711_8 = 1 + $I_L2711_8
 2711.                   if ( $I_L2711_8 >= lot ) exit
 2711.                enddo
 2715.                $I_L2710_10 = 1 + $I_L2710_10
 2714.                if ( $I_L2710_10 >= nh ) exit
 2714.             enddo
 2714.          endif
 2714.       endif
 2719.       return
 2719.       end
 2719.       
 2726.       
 2726.       subroutine onepass( a, b, c, d, lot, nh, ifac, la, trigs, ntrigs )
 2726.       t$155 = lot
 2726.       t$156 = nh
 2729.       t$321 = _zla( 0, lot )
 2726.       t$322 = _zla( 0, lot )
 2729.       t$323 = _zla( 0, nh )
 2726.       t$324 = _zla( 0, lot ) * _zla( 0, nh )
 2726.       t$157 = ntrigs
 2736.       t$325 = _zla( 0, ntrigs )
 2755.       $m_S2 = nh / ifac
 2770.       if ( ifac == 2 ) then
 2771.          if ( la > 0 ) then
 2773.             if ( lot > 0 ) then
 2771.                $I_L2771_108 = 0
 2771.                do
 2773.                   $I_L2773_92 = 0
 2773. !dir$ ivdep
 2773.                   do
 2774.                      c(1 + $I_L2773_92, 1 + $I_L2771_108) = a(1 + $I_L2773_92, 1 + $I_L2771_108) + a(1 + $I_L2773_92, 1 + $m_S2 + $I_L2771_108)
 2775.                      c(1 + $I_L2773_92, 1 + la + $I_L2771_108) = a(1 + $I_L2773_92, 1 + $I_L2771_108) + -a(1 + $I_L2773_92, 1 + $m_S2 + $I_L2771_108)
 2776.                      d(1 + $I_L2773_92, 1 + $I_L2771_108) = b(1 + $I_L2773_92, 1 + $I_L2771_108) + b(1 + $I_L2773_92, 1 + $m_S2 + $I_L2771_108)
 2777.                      d(1 + $I_L2773_92, 1 + la + $I_L2771_108) = b(1 + $I_L2773_92, 1 + $I_L2771_108) + -b(1 + $I_L2773_92, 1 + $m_S2 + $I_L2771_108)
 2778.                      $I_L2773_92 = 1 + $I_L2773_92
 2773.                      if ( $I_L2773_92 >= lot ) exit
 2773.                   enddo
 2779.                   $I_L2771_108 = 1 + $I_L2771_108
 2778.                   if ( $I_L2771_108 >= la ) exit
 2778.                enddo
 2778.             endif
 2778.          endif
 2780.          if ( ( $m_S2 + -la /= 1 .and. xor( la, -1 + $m_S2 + -la ) < 0 ) == .false. ) then
 2780.             $t_S12 = ( -1 + $m_S2 ) / la
 2786.             if ( la > 0 ) then
 2788.                if ( lot > 0 ) then
 2780.                   $I_L2780_118 = 0
 2780. !dir$ loop_info (automatic) cache_nt( trigs )
 2780.                   do
 2782.                      $c1_S9 = trigs(1 + 2 * la + 2 * la * $I_L2780_118)
 2783.                      $s1_S11 = trigs(2 + 2 * la + 2 * la * $I_L2780_118)
 2786.                      $I_L2786_110 = 0
 2786.                      do
 2788.                         $I_L2788_94 = 0
 2788. !dir$ ivdep
 2788.                         do
 2789.                            $wka_S8 = a(1 + $I_L2788_94, 1 + la + $I_L2786_110 + la * $I_L2780_118) + -a(1 + $I_L2788_94, 1 + la + $m_S2 + $I_L2786_110 + la * $I_L2780_118)
 2790.                            c(1 + $I_L2788_94, 1 + $I_L2786_110 + 2 * la + 2 * la * $I_L2780_118) = a(1 + $I_L2788_94, 1 + la + $m_S2 + $I_L2786_110 + la * $I_L2780_118) + a(1 + $I_L2788_94, 1 + la + $I_L2786_110 + la * $I_L2780_118)
 2791.                            $wkb_S10 = b(1 + $I_L2788_94, 1 + la + $I_L2786_110 + la * $I_L2780_118) + -b(1 + $I_L2788_94, 1 + la + $m_S2 + $I_L2786_110 + la * $I_L2780_118)
 2792.                            d(1 + $I_L2788_94, 1 + $I_L2786_110 + 2 * la + 2 * la * $I_L2780_118) = b(1 + $I_L2788_94, 1 + la + $m_S2 + $I_L2786_110 + la * $I_L2780_118) + b(1 + $I_L2788_94, 1 + la + $I_L2786_110 + la * $I_L2780_118)
 2793.                            c(1 + $I_L2788_94, 1 + $I_L2786_110 + 3 * la + 2 * la * $I_L2780_118) = -( $wkb_S10 * $s1_S11 ) + $wka_S8 * $c1_S9
 2794.                            d(1 + $I_L2788_94, 1 + $I_L2786_110 + 3 * la + 2 * la * $I_L2780_118) = $c1_S9 * $wkb_S10 + $wka_S8 * $s1_S11
 2795.                            $I_L2788_94 = 1 + $I_L2788_94
 2788.                            if ( $I_L2788_94 >= lot ) exit
 2788.                         enddo
 2796.                         $I_L2786_110 = 1 + $I_L2786_110
 2795.                         if ( $I_L2786_110 >= la ) exit
 2795.                      enddo
 2797.                      $I_L2780_118 = 1 + $I_L2780_118
 2796.                      if ( $I_L2780_118 >= $t_S12 ) exit
 2796.                   enddo
 2796.                endif
 2796.             endif
 2796.          endif
 2798.       else if ( ifac == 3 ) then
 2799.          if ( la > 0 ) then
 2801.             if ( lot > 0 ) then
 2799.                $I_L2799_106 = 0
 2799.                do
 2801.                   $I_L2801_90 = 0
 2801. !dir$ ivdep
 2801.                   do
 2802.                      $wka_S15 = a(1 + $I_L2801_90, 1 + $I_L2799_106 + 2 * $m_S2) + a(1 + $I_L2801_90, 1 + $m_S2 + $I_L2799_106)
 2803.                      $wksina_S18 = sin60 * ( a(1 + $I_L2801_90, 1 + $m_S2 + $I_L2799_106) + -a(1 + $I_L2801_90, 1 + $I_L2799_106 + 2 * $m_S2) )
 2804.                      $wkb_S17 = b(1 + $I_L2801_90, 1 + $I_L2799_106 + 2 * $m_S2) + b(1 + $I_L2801_90, 1 + $m_S2 + $I_L2799_106)
 2805.                      $wksinb_S16 = sin60 * ( b(1 + $I_L2801_90, 1 + $m_S2 + $I_L2799_106) + -b(1 + $I_L2801_90, 1 + $I_L2799_106 + 2 * $m_S2) )
 2806.                      c(1 + $I_L2801_90, 1 + $I_L2799_106) = $wka_S15 + a(1 + $I_L2801_90, 1 + $I_L2799_106)
 2807.                      c(1 + $I_L2801_90, 1 + la + $I_L2799_106) = -$wksinb_S16 + ( a(1 + $I_L2801_90, 1 + $I_L2799_106) + -5.0e-1 * $wka_S15 )
 2808.                      c(1 + $I_L2801_90, 1 + $I_L2799_106 + 2 * la) = $wksinb_S16 + ( a(1 + $I_L2801_90, 1 + $I_L2799_106) + -5.0e-1 * $wka_S15 )
 2809.                      d(1 + $I_L2801_90, 1 + $I_L2799_106) = $wkb_S17 + b(1 + $I_L2801_90, 1 + $I_L2799_106)
 2810.                      d(1 + $I_L2801_90, 1 + la + $I_L2799_106) = $wksina_S18 + ( b(1 + $I_L2801_90, 1 + $I_L2799_106) + -5.0e-1 * $wkb_S17 )
 2811.                      d(1 + $I_L2801_90, 1 + $I_L2799_106 + 2 * la) = -$wksina_S18 + ( b(1 + $I_L2801_90, 1 + $I_L2799_106) + -5.0e-1 * $wkb_S17 )
 2812.                      $I_L2801_90 = 1 + $I_L2801_90
 2801.                      if ( $I_L2801_90 >= lot ) exit
 2801.                   enddo
 2813.                   $I_L2799_106 = 1 + $I_L2799_106
 2812.                   if ( $I_L2799_106 >= la ) exit
 2812.                enddo
 2812.             endif
 2812.          endif
 2814.          if ( ( $m_S2 + -la /= 1 .and. xor( la, -1 + $m_S2 + -la ) < 0 ) == .false. ) then
 2814.             $t_S31 = ( -1 + $m_S2 ) / la
 2824.             if ( la > 0 ) then
 2826.                if ( lot > 0 ) then
 2814.                   $I_L2814_120 = 0
 2814. !dir$ loop_info (automatic) cache_nt( trigs )
 2814.                   do
 2817.                      $c1_S26 = trigs(1 + 2 * la + 2 * la * $I_L2814_120)
 2818.                      $s1_S28 = trigs(2 + 2 * la + 2 * la * $I_L2814_120)
 2819.                      $c2_S29 = trigs(1 + 4 * la + 4 * la * $I_L2814_120)
 2820.                      $s2_S30 = trigs(2 + 4 * la + 4 * la * $I_L2814_120)
 2824.                      $I_L2824_112 = 0
 2824.                      do
 2826.                         $I_L2826_96 = 0
 2826. !dir$ ivdep
 2826.                         do
 2827.                            $wka_S23 = a(1 + $I_L2826_96, 1 + la + $m_S2 + $I_L2824_112 + la * $I_L2814_120) + a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + 2 * $m_S2 + la * $I_L2814_120)
 2828.                            $wksina_S27 = sin60 * ( a(1 + $I_L2826_96, 1 + la + $m_S2 + $I_L2824_112 + la * $I_L2814_120) + -a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + 2 * $m_S2 + la * $I_L2814_120) )
 2829.                            $wkb_S24 = b(1 + $I_L2826_96, 1 + la + $m_S2 + $I_L2824_112 + la * $I_L2814_120) + b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + 2 * $m_S2 + la * $I_L2814_120)
 2830.                            $wksinb_S25 = sin60 * ( b(1 + $I_L2826_96, 1 + la + $m_S2 + $I_L2824_112 + la * $I_L2814_120) + -b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + 2 * $m_S2 + la * $I_L2814_120) )
 2831.                            c(1 + $I_L2826_96, 1 + $I_L2824_112 + 3 * la + 3 * la * $I_L2814_120) = $wka_S23 + a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120)
 2832.                            d(1 + $I_L2826_96, 1 + $I_L2824_112 + 3 * la + 3 * la * $I_L2814_120) = $wkb_S24 + b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120)
 2833.                            c(1 + $I_L2826_96, 1 + $I_L2824_112 + 4 * la + 3 * la * $I_L2814_120) = -( $s1_S28 * ( $wksina_S27 + ( b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wkb_S24 ) ) ) + $c1_S26 * ( -$wksinb_S25 + ( a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wka_S23 ) )
 2835.                            d(1 + $I_L2826_96, 1 + $I_L2824_112 + 4 * la + 3 * la * $I_L2814_120) = $s1_S28 * ( -$wksinb_S25 + ( a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wka_S23 ) ) + $c1_S26 * ( $wksina_S27 + ( b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wkb_S24 ) )
 2837.                            c(1 + $I_L2826_96, 1 + $I_L2824_112 + 5 * la + 3 * la * $I_L2814_120) = -( $s2_S30 * ( -$wksina_S27 + ( b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wkb_S24 ) ) ) + $c2_S29 * ( $wksinb_S25 + ( a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wka_S23 ) )
 2839.                            d(1 + $I_L2826_96, 1 + $I_L2824_112 + 5 * la + 3 * la * $I_L2814_120) = $s2_S30 * ( $wksinb_S25 + ( a(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wka_S23 ) ) + $c2_S29 * ( -$wksina_S27 + ( b(1 + $I_L2826_96, 1 + la + $I_L2824_112 + la * $I_L2814_120) + -5.0e-1 * $wkb_S24 ) )
 2841.                            $I_L2826_96 = 1 + $I_L2826_96
 2826.                            if ( $I_L2826_96 >= lot ) exit
 2826.                         enddo
 2842.                         $I_L2824_112 = 1 + $I_L2824_112
 2841.                         if ( $I_L2824_112 >= la ) exit
 2841.                      enddo
 2843.                      $I_L2814_120 = 1 + $I_L2814_120
 2842.                      if ( $I_L2814_120 >= $t_S31 ) exit
 2842.                   enddo
 2842.                endif
 2842.             endif
 2842.          endif
 2842.       else if ( ifac == 4 ) then
 2845.          if ( la > 0 ) then
 2847.             if ( lot > 0 ) then
 2845.                $I_L2845_104 = 0
 2845.                do
 2847.                   $I_L2847_88 = 0
 2847. !dir$ ivdep
 2847.                   do
 2848.                      $wkaacp_S34 = a(1 + $I_L2847_88, 1 + $I_L2845_104 + 2 * $m_S2) + a(1 + $I_L2847_88, 1 + $I_L2845_104)
 2849.                      $wkaacm_S37 = a(1 + $I_L2847_88, 1 + $I_L2845_104) + -a(1 + $I_L2847_88, 1 + $I_L2845_104 + 2 * $m_S2)
 2850.                      $wkbacp_S36 = b(1 + $I_L2847_88, 1 + $I_L2845_104 + 2 * $m_S2) + b(1 + $I_L2847_88, 1 + $I_L2845_104)
 2851.                      $wkbacm_S35 = b(1 + $I_L2847_88, 1 + $I_L2845_104) + -b(1 + $I_L2847_88, 1 + $I_L2845_104 + 2 * $m_S2)
 2852.                      c(1 + $I_L2847_88, 1 + $I_L2845_104) = $wkaacp_S34 + ( a(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) + a(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) )
 2853.                      c(1 + $I_L2847_88, 1 + $I_L2845_104 + 2 * la) = $wkaacp_S34 + -( a(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) + a(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) )
 2854.                      d(1 + $I_L2847_88, 1 + la + $I_L2845_104) = $wkbacm_S35 + ( a(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) + -a(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) )
 2855.                      d(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * la) = $wkbacm_S35 + -( a(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) + -a(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) )
 2856.                      d(1 + $I_L2847_88, 1 + $I_L2845_104) = $wkbacp_S36 + ( b(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) + b(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) )
 2857.                      d(1 + $I_L2847_88, 1 + $I_L2845_104 + 2 * la) = $wkbacp_S36 + -( b(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) + b(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) )
 2858.                      c(1 + $I_L2847_88, 1 + la + $I_L2845_104) = $wkaacm_S37 + -( b(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) + -b(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) )
 2859.                      c(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * la) = $wkaacm_S37 + ( b(1 + $I_L2847_88, 1 + $m_S2 + $I_L2845_104) + -b(1 + $I_L2847_88, 1 + $I_L2845_104 + 3 * $m_S2) )
 2860.                      $I_L2847_88 = 1 + $I_L2847_88
 2847.                      if ( $I_L2847_88 >= lot ) exit
 2847.                   enddo
 2861.                   $I_L2845_104 = 1 + $I_L2845_104
 2860.                   if ( $I_L2845_104 >= la ) exit
 2860.                enddo
 2860.             endif
 2860.          endif
 2862.          if ( ( $m_S2 + -la /= 1 .and. xor( la, -1 + $m_S2 + -la ) < 0 ) == .false. ) then
 2862.             $t_S52 = ( -1 + $m_S2 ) / la
 2876.             if ( la > 0 ) then
 2878.                if ( lot > 0 ) then
 2862.                   $I_L2862_122 = 0
 2862. !dir$ loop_info (automatic) cache_nt( trigs )
 2862.                   do
 2866.                      $c1_S47 = trigs(1 + 2 * la + 2 * la * $I_L2862_122)
 2867.                      $s1_S49 = trigs(2 + 2 * la + 2 * la * $I_L2862_122)
 2868.                      $c2_S44 = trigs(1 + 4 * la + 4 * la * $I_L2862_122)
 2869.                      $s2_S45 = trigs(2 + 4 * la + 4 * la * $I_L2862_122)
 2870.                      $c3_S50 = trigs(1 + 6 * la + 6 * la * $I_L2862_122)
 2871.                      $s3_S51 = trigs(2 + 6 * la + 6 * la * $I_L2862_122)
 2876.                      $I_L2876_114 = 0
 2876.                      do
 2878.                         $I_L2878_98 = 0
 2878. !dir$ ivdep
 2878.                         do
 2879.                            $wkaacp_S42 = a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + la * $I_L2862_122) + a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 2 * $m_S2 + la * $I_L2862_122)
 2880.                            $wkbacp_S43 = b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + la * $I_L2862_122) + b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 2 * $m_S2 + la * $I_L2862_122)
 2881.                            $wkaacm_S46 = a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + la * $I_L2862_122) + -a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 2 * $m_S2 + la * $I_L2862_122)
 2882.                            $wkbacm_S48 = b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + la * $I_L2862_122) + -b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 2 * $m_S2 + la * $I_L2862_122)
 2883.                            c(1 + $I_L2878_98, 1 + $I_L2876_114 + 4 * la + 4 * la * $I_L2862_122) = $wkaacp_S42 + ( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) )
 2884.                            d(1 + $I_L2878_98, 1 + $I_L2876_114 + 4 * la + 4 * la * $I_L2862_122) = $wkbacp_S43 + ( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) )
 2885.                            c(1 + $I_L2878_98, 1 + $I_L2876_114 + 6 * la + 4 * la * $I_L2862_122) = -( $s2_S45 * ( $wkbacp_S43 + -( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) ) ) + $c2_S44 * ( $wkaacp_S42 + -( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) )
 2887.                            d(1 + $I_L2878_98, 1 + $I_L2876_114 + 6 * la + 4 * la * $I_L2862_122) = $s2_S45 * ( $wkaacp_S42 + -( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) ) + $c2_S44 * ( $wkbacp_S43 + -( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) )
 2889.                            c(1 + $I_L2878_98, 1 + $I_L2876_114 + 5 * la + 4 * la * $I_L2862_122) = -( $s1_S49 * ( $wkbacm_S48 + ( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) ) ) + $c1_S47 * ( $wkaacm_S46 + -( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) )
 2891.                            d(1 + $I_L2878_98, 1 + $I_L2876_114 + 5 * la + 4 * la * $I_L2862_122) = $s1_S49 * ( $wkaacm_S46 + -( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) ) + $c1_S47 * ( $wkbacm_S48 + ( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) )
 2893.                            c(1 + $I_L2878_98, 1 + $I_L2876_114 + 7 * la + 4 * la * $I_L2862_122) = -( $s3_S51 * ( $wkbacm_S48 + -( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) ) ) + $c3_S50 * ( $wkaacm_S46 + ( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) )
 2895.                            d(1 + $I_L2878_98, 1 + $I_L2876_114 + 7 * la + 4 * la * $I_L2862_122) = $s3_S51 * ( $wkaacm_S46 + ( b(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -b(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) ) + $c3_S50 * ( $wkbacm_S48 + -( a(1 + $I_L2878_98, 1 + la + $m_S2 + $I_L2876_114 + la * $I_L2862_122) + -a(1 + $I_L2878_98, 1 + la + $I_L2876_114 + 3 * $m_S2 + la * $I_L2862_122) ) )
 2897.                            $I_L2878_98 = 1 + $I_L2878_98
 2878.                            if ( $I_L2878_98 >= lot ) exit
 2878.                         enddo
 2898.                         $I_L2876_114 = 1 + $I_L2876_114
 2897.                         if ( $I_L2876_114 >= la ) exit
 2897.                      enddo
 2899.                      $I_L2862_122 = 1 + $I_L2862_122
 2898.                      if ( $I_L2862_122 >= $t_S52 ) exit
 2898.                   enddo
 2898.                endif
 2898.             endif
 2898.          endif
 2898.       else if ( ifac == 5 ) then
 2901.          if ( la > 0 ) then
 2903.             if ( lot > 0 ) then
 2901.                $I_L2901_102 = 0
 2901.                do
 2903.                   $I_L2903_86 = 0
 2903. !dir$ ivdep
 2903.                   do
 2904.                      c(1 + $I_L2903_86, 1 + $I_L2901_102) = a(1 + $I_L2903_86, 1 + $I_L2901_102) + ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) + ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) )
 2905.                      d(1 + $I_L2903_86, 1 + $I_L2901_102) = b(1 + $I_L2903_86, 1 + $I_L2901_102) + ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) + ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) )
 2908.                      c(1 + $I_L2903_86, 1 + la + $I_L2901_102) = ( a(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + cos72 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + -( sin36 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) + sin72 * ( b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2913.                      c(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * la) = ( a(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + cos72 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + ( sin36 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) + sin72 * ( b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2918.                      d(1 + $I_L2903_86, 1 + la + $I_L2901_102) = ( b(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + cos72 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + ( sin36 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) + sin72 * ( a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2923.                      d(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * la) = ( b(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + cos72 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + -( sin36 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) + sin72 * ( a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2928.                      c(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * la) = ( a(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + cos72 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + -( -( sin72 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) ) + sin36 * ( b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2933.                      c(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * la) = ( a(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + cos72 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + ( -( sin72 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) ) + sin36 * ( b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2938.                      d(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * la) = ( b(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + cos72 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + ( -( sin72 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) ) + sin36 * ( a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2943.                      d(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * la) = ( b(1 + $I_L2903_86, 1 + $I_L2901_102) + -( cos36 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) + b(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) ) ) + cos72 * ( b(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) + b(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) ) ) + -( -( sin72 * ( a(1 + $I_L2903_86, 1 + $I_L2901_102 + 2 * $m_S2) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 3 * $m_S2) ) ) + sin36 * ( a(1 + $I_L2903_86, 1 + $m_S2 + $I_L2901_102) + -a(1 + $I_L2903_86, 1 + $I_L2901_102 + 4 * $m_S2) ) )
 2948.                      $I_L2903_86 = 1 + $I_L2903_86
 2903.                      if ( $I_L2903_86 >= lot ) exit
 2903.                   enddo
 2949.                   $I_L2901_102 = 1 + $I_L2901_102
 2948.                   if ( $I_L2901_102 >= la ) exit
 2948.                enddo
 2948.             endif
 2948.          endif
 2950.          if ( ( $m_S2 + -la /= 1 .and. xor( la, -1 + $m_S2 + -la ) < 0 ) == .false. ) then
 2950.             $t_S67 = ( -1 + $m_S2 ) / la
 2968.             if ( la > 0 ) then
 2970.                if ( lot > 0 ) then
 2950.                   $I_L2950_124 = 0
 2950. !dir$ loop_info (automatic) cache_nt( trigs )
 2950.                   do
 2955.                      $c1_S59 = trigs(1 + 2 * la + 2 * la * $I_L2950_124)
 2956.                      $s1_S60 = trigs(2 + 2 * la + 2 * la * $I_L2950_124)
 2957.                      $c2_S63 = trigs(1 + 4 * la + 4 * la * $I_L2950_124)
 2958.                      $s2_S64 = trigs(2 + 4 * la + 4 * la * $I_L2950_124)
 2959.                      $c3_S65 = trigs(1 + 6 * la + 6 * la * $I_L2950_124)
 2960.                      $s3_S66 = trigs(2 + 6 * la + 6 * la * $I_L2950_124)
 2961.                      $c4_S61 = trigs(1 + 8 * la + 8 * la * $I_L2950_124)
 2962.                      $s4_S62 = trigs(2 + 8 * la + 8 * la * $I_L2950_124)
 2968.                      $I_L2968_116 = 0
 2968.                      do
 2970.                         $I_L2970_100 = 0
 2970. !dir$ ivdep
 2970.                         do
 2971.                            c(1 + $I_L2970_100, 1 + $I_L2968_116 + 5 * la + 5 * la * $I_L2950_124) = a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) )
 2974.                            d(1 + $I_L2970_100, 1 + $I_L2968_116 + 5 * la + 5 * la * $I_L2950_124) = b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) + ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) )
 2977.                            c(1 + $I_L2970_100, 1 + $I_L2968_116 + 6 * la + 5 * la * $I_L2950_124) = -( $s1_S60 * ( ( sin72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) ) ) + $c1_S59 * ( -( sin72 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) )
 2987.                            d(1 + $I_L2970_100, 1 + $I_L2968_116 + 6 * la + 5 * la * $I_L2950_124) = $s1_S60 * ( -( sin72 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) ) + $c1_S59 * ( ( sin72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) )
 2997.                            c(1 + $I_L2970_100, 1 + $I_L2968_116 + 9 * la + 5 * la * $I_L2950_124) = -( $s4_S62 * ( ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) + -( sin72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) ) ) + $c4_S61 * ( ( sin72 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) )
 3007.                            d(1 + $I_L2970_100, 1 + $I_L2968_116 + 9 * la + 5 * la * $I_L2950_124) = $s4_S62 * ( ( sin72 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) ) + $c4_S61 * ( ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) + -( sin72 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) )
 3017.                            c(1 + $I_L2970_100, 1 + $I_L2968_116 + 7 * la + 5 * la * $I_L2950_124) = -( $s2_S64 * ( ( -( sin72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) ) ) + $c2_S63 * ( -( -( sin72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) )
 3027.                            d(1 + $I_L2970_100, 1 + $I_L2968_116 + 7 * la + 5 * la * $I_L2950_124) = $s2_S64 * ( -( -( sin72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) ) + $c2_S63 * ( ( -( sin72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) )
 3037.                            c(1 + $I_L2970_100, 1 + $I_L2968_116 + 8 * la + 5 * la * $I_L2950_124) = -( $s3_S66 * ( ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) + -( -( sin72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) ) ) + $c3_S65 * ( ( -( sin72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) )
 3047.                            d(1 + $I_L2970_100, 1 + $I_L2968_116 + 8 * la + 5 * la * $I_L2950_124) = $s3_S66 * ( ( -( sin72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) + cos72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) ) + $c3_S65 * ( ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + la * $I_L2950_124) + -( cos36 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) ) ) + cos72 * ( b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) + b(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) ) ) + -( -( sin72 * ( a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 2 * $m_S2 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 3 * $m_S2 + la * $I_L2950_124) ) ) + sin36 * ( a(1 + $I_L2970_100, 1 + la + $m_S2 + $I_L2968_116 + la * $I_L2950_124) + -a(1 + $I_L2970_100, 1 + la + $I_L2968_116 + 4 * $m_S2 + la * $I_L2950_124) ) ) )
 3057.                            $I_L2970_100 = 1 + $I_L2970_100
 2970.                            if ( $I_L2970_100 >= lot ) exit
 2970.                         enddo
 3058.                         $I_L2968_116 = 1 + $I_L2968_116
 3057.                         if ( $I_L2968_116 >= la ) exit
 3057.                      enddo
 3059.                      $I_L2950_124 = 1 + $I_L2950_124
 3058.                      if ( $I_L2950_124 >= $t_S67 ) exit
 3058.                   enddo
 3058.                endif
 3058.             endif
 3058.          endif
 3058.       endif
 3061.       return
 3061.       end
 3061.       
 3076.       
 3076.       subroutine createfft( nin, factors, nfactors, trigs, ntrigs )
 3083.       t$158 = 4
 3083.       t$326 = 4
 3083.       t$329 = 16
 3083.       t$327 = int( _alloc( 16 ), 8 )
 3083.       t$328 = t$327
 3083.       nout = nextsizefft( nin )
 3083.       if ( nout + -nin /= 0 ) then
 3083.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$160,  _substr(t$159,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3083.          _f90_adjustl(  _substr(t$1119,1,15),  _substr(c,1,15) )
 3083.          t$1120 = _ltrim(  _substr(t$1119,1,15) )
 3083.          t$1122 = int( _alloc( _zla( 0, t$1120 ) ), 8 )
 3083.           _substr(t$1121,1,_zla( 0, t$1120 )) =  _substr(t$1119,1,_ltrim(  _substr(t$1119,1,15) ))
 3083.          $Unit_temp_O0 = nfprt
 3083.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$162,  _substr(t$161,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1121,1,_zla( 0, t$1120 )), 0x800600000000L ) ) )
 3083.          _free( t$1122 )
 3083.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$164,  _substr(t$163,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nout, 0x2000200000000L ) ) )
 3083.          _f90_adjustl(  _substr(t$1123,1,15),  _substr(c,1,15) )
 3083.          t$1124 = _ltrim(  _substr(t$1123,1,15) )
 3083.          t$1126 = int( _alloc( _zla( 0, t$1124 ) ), 8 )
 3083.           _substr(t$1125,1,_zla( 0, t$1124 )) =  _substr(t$1123,1,_ltrim(  _substr(t$1123,1,15) ))
 3083.          $Unit_temp_O1 = nfprt
 3083.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$166,  _substr(t$165,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1125,1,_zla( 0, t$1124 )), 0x800600000000L ) ) )
 3083.          _free( t$1126 )
 3083.           _substr(t$1127,1,4) = ' '
 3083.          call _stop(  _substr(t$1127,1,1) )
 3083.       else
 3083.          $left_S1 = nout / 2
 3083.          $I_A2 = 0
 3083. !dir$ ivdep
 3083.          do
 3083.             powers(1 + $I_A2) = 0
 3083.             $I_A2 = 1 + $I_A2
 3083.             if ( $I_A2 >= 4 ) exit
 3083.          enddo
 3083.          $I_L3083_26 = 0
 3083.          do
 3083.             $SC_base_I1 = base(1 + $I_L3083_26)
 3083.             do
 3083.                if ( mod( $left_S1, $SC_base_I1 ) /= 0 ) goto 10
 3083.                powers(1 + $I_L3083_26) = 1 + powers(1 + $I_L3083_26)
 3083.             enddo
 3083.    10       continue
 3083.             $I_L3083_26 = 1 + $I_L3083_26
 3083.             if ( $I_L3083_26 >= 4 ) exit
 3083.          enddo
 3083.          $Reduc_A34 = 0
 3083.          $I_A35 = 0
 3083. !dir$ ivdep
 3083.          do
 3083.             $Reduc_A34 = $Reduc_A34 + powers(1 + $I_A35)
 3083.             $I_A35 = 1 + $I_A35
 3083.             if ( $I_A35 >= 4 ) exit
 3083.          enddo
 3083.          factors%header%a_contig = 1
 3083.          factors%dim_1%LB = 1
 3083.          factors%dim_1%EX = ( max( 0, 1 + $Reduc_A34 ) )
 3083.          factors%dim_1%SM = 1
 3083.          $_allo_P6(0) = 0x1000000000001L
 3083.          $_allo_P6(1) = loc( factors )
 3083.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 3083.          (factors%base_addr)(1, 0) = $Reduc_A34
 3083.          $ifac_S5 = 1
 3083.          $I_L3083_28 = 0
 3083. !dir$ loop_info (automatic) cache_nt( base )
 3083.          do
 3083.             $j_S4 = permutation(1 + $I_L3083_28)
 3083.             $F_A36 = powers($j_S4)
 3083.             if ( powers($j_S4) > 0 ) then
 3083.                $SCA_base_I0 = base($j_S4)
 3083.                $I_L3083_24 = 0
 3083. !dir$ ivdep
 3083.                do
 3083.                   (factors%base_addr)(1 + $ifac_S5 + $I_L3083_24, 0) = $SCA_base_I0
 3083.                   $I_L3083_24 = 1 + $I_L3083_24
 3083.                   if ( $I_L3083_24 >= $F_A36 ) exit
 3083.                enddo
 3083.             endif
 3083.             $ifac_S5 = $ifac_S5 + powers($j_S4)
 3083.             $I_L3083_28 = 1 + $I_L3083_28
 3083.             if ( $I_L3083_28 >= 4 ) exit
 3083.          enddo
 3083.          _free( t$327 )
 3083.       endif
 3084.       nfactors = ( max( 0, factors%dim_1%EX ) )
 3085.       trigs%header%a_contig = 1
 3085.       trigs%dim_1%LB = 1
 3085.       trigs%dim_1%EX = ( max( 0, 2 * nin / 2 + 2 * ( 1 + nin / 2 ) / 2 ) )
 3085.       trigs%dim_1%SM = 1
 3085.       $_allo_P7(0) = 0x1000000000001L
 3085.       $_allo_P7(1) = loc( trigs )
 3085.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 3085.       $del_S7 = ( 6.2831853071795862 * 1.0/( real( nin / 2, 8 ) ) )
 3085.       if ( 2 * nin / 2 > 0 ) then
 3085.          $I_L3085_18 = 0
 3085. !dir$ ivdep
 3085.          do
 3085.             $Coss_P4 = coss( ( 5.0e-1 * $del_S7 * real( 2 * $I_L3085_18, 8 ) ) )
 3085.             (trigs%base_addr)(1 + 2 * $I_L3085_18, 0) = real( $Coss_P4, 8 )
 3085.             (trigs%base_addr)(2 + 2 * $I_L3085_18, 0) = cimag( $Coss_P4 )
 3085.             $I_L3085_18 = 1 + $I_L3085_18
 3085.             if ( $I_L3085_18 >= ( 1 + 2 * nin / 2 ) / 2 ) exit
 3085.          enddo
 3085.       endif
 3085.       $del_S11 = 5.0e-1 * $del_S7
 3085.       if ( 2 * ( 1 + nin / 2 ) / 2 > 0 ) then
 3085.          $I_L3085_20 = 0
 3085. !dir$ ivdep
 3085.          do
 3085.             $Coss_P5 = coss( ( 5.0e-1 * $del_S11 * real( 2 * $I_L3085_20, 8 ) ) )
 3085.             (trigs%base_addr)(1 + 2 * nin / 2 + 2 * $I_L3085_20, 0) = real( $Coss_P5, 8 )
 3085.             (trigs%base_addr)(2 + 2 * nin / 2 + 2 * $I_L3085_20, 0) = cimag( $Coss_P5 )
 3085.             $I_L3085_20 = 1 + $I_L3085_20
 3085.             if ( $I_L3085_20 >= ( 1 + 2 * ( 1 + nin / 2 ) / 2 ) / 2 ) exit
 3085.          enddo
 3085.       endif
 3086.       ntrigs = ( max( 0, ( max( 0, 2 * nin / 2 + 2 * ( 1 + nin / 2 ) / 2 ) ) ) )
 3087.       return
 3087.       end
 3087.       
 3095.       
 3095.       subroutine destroyfft( factors, trigs )
 3099.       $_allo_P0(0) = 0x1000000000001L
 3099.       $_allo_P0(1) = loc( factors )
 3099.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 3099.       factors%header%assoc = 0
 3099.       factors%header%assoc = 0
 3100.       $_allo_P1(0) = 0x1000000000001L
 3100.       $_allo_P1(1) = loc( trigs )
 3100.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 3100.       trigs%header%assoc = 0
 3100.       trigs%header%assoc = 0
 3101.       return
 3101.       end
 3101.       
 3110.       
 3110.       subroutine factorize( nin, factors, nbase, base )
 3110.       t$158 = nbase
 3116.       t$326 = _zla( 0, nbase )
 3120.       t$329 = 4 * _zla( 0, nbase )
 3110.       t$327 = int( _alloc( 4 * _zla( 0, nbase ) ), 8 )
 3120.       t$328 = t$327
 3128.       nout = nextsizefft( nin )
 3130.       if ( nout + -nin /= 0 ) then
 3131.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$160,  _substr(t$159,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3133.          _f90_adjustl(  _substr(t$1119,1,15),  _substr(c,1,15) )
 3132.          t$1120 = _ltrim(  _substr(t$1119,1,15) )
 3133.          t$1122 = int( _alloc( _zla( 0, t$1120 ) ), 8 )
 3133.           _substr(t$1121,1,_zla( 0, t$1120 )) =  _substr(t$1119,1,_ltrim(  _substr(t$1119,1,15) ))
 3132.          $Unit_temp_O0 = nfprt
 3132.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$162,  _substr(t$161,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1121,1,_zla( 0, t$1120 )), 0x800600000000L ) ) )
 3133.          _free( t$1122 )
 3134.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$164,  _substr(t$163,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nout, 0x2000200000000L ) ) )
 3136.          _f90_adjustl(  _substr(t$1123,1,15),  _substr(c,1,15) )
 3135.          t$1124 = _ltrim(  _substr(t$1123,1,15) )
 3136.          t$1126 = int( _alloc( _zla( 0, t$1124 ) ), 8 )
 3136.           _substr(t$1125,1,_zla( 0, t$1124 )) =  _substr(t$1123,1,_ltrim(  _substr(t$1123,1,15) ))
 3135.          $Unit_temp_O1 = nfprt
 3135.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$166,  _substr(t$165,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1125,1,_zla( 0, t$1124 )), 0x800600000000L ) ) )
 3136.          _free( t$1126 )
 3137.           _substr(t$1127,1,4) = ' '
 3137.          call _stop(  _substr(t$1127,1,1) )
 3137.       else
 3142.          $left_S1 = nout / 2
 3143.          $F_A34 = nbase
 3143.          if ( nbase > 0 ) then
 3143.             $I_A2 = 0
 3143. !dir$ ivdep
 3143.             do
 3143.                powers(1 + $I_A2) = 0
 3143.                $I_A2 = 1 + $I_A2
 3143.                if ( $I_A2 >= $F_A34 ) exit
 3143.             enddo
 3147.             $I_L3147_14 = 0
 3147.             do
 3149.                $SC_base_I1 = base(1 + $I_L3147_14)
 3149.                do
 3149.                   if ( mod( $left_S1, $SC_base_I1 ) /= 0 ) goto 10
 3150.                   powers(1 + $I_L3147_14) = 1 + powers(1 + $I_L3147_14)
 3150.                enddo
 3150.    10          continue
 3156.                $I_L3147_14 = 1 + $I_L3147_14
 3152.                if ( $I_L3147_14 >= nbase ) exit
 3152.             enddo
 3152.          endif
 3158.          $Reduc_A35 = 0
 3158.          $F_A37 = nbase
 3158.          if ( nbase > 0 ) then
 3158.             $I_A36 = 0
 3158. !dir$ ivdep
 3158.             do
 3158.                $Reduc_A35 = $Reduc_A35 + powers(1 + $I_A36)
 3158.                $I_A36 = 1 + $I_A36
 3158.                if ( $I_A36 >= $F_A37 ) exit
 3158.             enddo
 3158.          endif
 3159.          factors%header%a_contig = 1
 3159.          factors%dim_1%LB = 1
 3159.          factors%dim_1%EX = ( max( 0, 1 + $Reduc_A35 ) )
 3159.          factors%dim_1%SM = 1
 3159.          $_allo_P0(0) = 0x1000000000001L
 3159.          $_allo_P0(1) = loc( factors )
 3159.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 3160.          (factors%base_addr)(1, 0) = $Reduc_A35
 3161.          $ifac_S5 = 1
 3162.          if ( nbase > 0 ) then
 3162.             $I_L3162_16 = 0
 3162. !dir$ loop_info (automatic) cache_nt( base )
 3162.             do
 3163.                $j_S4 = permutation(1 + $I_L3162_16)
 3164.                $F_A38 = powers($j_S4)
 3164.                if ( powers($j_S4) > 0 ) then
 3164.                   $SCA_base_I0 = base($j_S4)
 3164.                   $I_L3164_12 = 0
 3164. !dir$ ivdep
 3164.                   do
 3164.                      (factors%base_addr)(1 + $ifac_S5 + $I_L3164_12, 0) = $SCA_base_I0
 3164.                      $I_L3164_12 = 1 + $I_L3164_12
 3164.                      if ( $I_L3164_12 >= $F_A38 ) exit
 3164.                   enddo
 3164.                endif
 3165.                $ifac_S5 = $ifac_S5 + powers($j_S4)
 3166.                $I_L3162_16 = 1 + $I_L3162_16
 3162.                if ( $I_L3162_16 >= nbase ) exit
 3162.             enddo
 3162.          endif
 3110.          _free( t$327 )
 3110.       endif
 3167.       return
 3167.       end
 3167.       
 3175.       
 3175.       subroutine trigfactors( nin, trigs )
 3183.       trigs%header%a_contig = 1
 3183.       trigs%dim_1%LB = 1
 3183.       trigs%dim_1%EX = _zla( 0, ( 2 * nin / 2 + 2 * ( 1 + nin / 2 ) / 2 ) )
 3183.       trigs%dim_1%SM = 1
 3183.       $_allo_P6(0) = 0x1000000000001L
 3183.       $_allo_P6(1) = loc( trigs )
 3183.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 3186.       $del_S1 = ( 6.2831853071795862 * 1.0/( real( nin / 2, 8 ) ) )
 3188.       if ( 2 * nin / 2 > 0 ) then
 3188.          $I_L3188_8 = 0
 3188. !dir$ ivdep
 3188.          do
 3190.             $Coss_P4 = coss( ( 5.0e-1 * $del_S1 * real( 2 * $I_L3188_8, 8 ) ) )
 3190.             $Flat_S2 = real( $Coss_P4, 8 )
 3190.             (trigs%base_addr)(1 + 2 * $I_L3188_8, 0) = $Flat_S2
 3191.             $Flat_S3 = cimag( $Coss_P4 )
 3191.             (trigs%base_addr)(2 + 2 * $I_L3188_8, 0) = $Flat_S3
 3192.             $I_L3188_8 = 1 + $I_L3188_8
 3188.             if ( $I_L3188_8 >= ( 1 + 2 * nin / 2 ) / 2 ) exit
 3188.          enddo
 3188.       endif
 3194.       $del_S5 = 5.0e-1 * $del_S1
 3195.       if ( 2 * ( 1 + nin / 2 ) / 2 > 0 ) then
 3195.          $I_L3195_10 = 0
 3195. !dir$ ivdep
 3195.          do
 3197.             $Coss_P5 = coss( ( 5.0e-1 * $del_S5 * real( 2 * $I_L3195_10, 8 ) ) )
 3197.             $Flat_S6 = real( $Coss_P5, 8 )
 3197.             (trigs%base_addr)(1 + 2 * nin / 2 + 2 * $I_L3195_10, 0) = $Flat_S6
 3198.             $Flat_S7 = cimag( $Coss_P5 )
 3198.             (trigs%base_addr)(2 + 2 * nin / 2 + 2 * $I_L3195_10, 0) = $Flat_S7
 3199.             $I_L3195_10 = 1 + $I_L3195_10
 3195.             if ( $I_L3195_10 >= ( 1 + 2 * ( 1 + nin / 2 ) / 2 ) / 2 ) exit
 3195.          enddo
 3195.       endif
 3200.       return
 3200.       end
 3200.       
 3208.       
 3208.       integer
 3208.       function nextsizefft( nin )
 3219.       if ( nin <= 0 ) then
 3220.          _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$168,  _substr(t$167,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3221.          _f90_adjustl(  _substr(t$1140,1,15),  _substr(charnin,1,15) )
 3221.          t$1141 = _ltrim(  _substr(t$1140,1,15) )
 3221.          t$1143 = int( _alloc( _zla( 0, t$1141 ) ), 8 )
 3221.           _substr(t$1142,1,_zla( 0, t$1141 )) =  _substr(t$1140,1,_ltrim(  _substr(t$1140,1,15) ))
 3221.          $Unit_temp_O0 = nfprt
 3221.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$170,  _substr(t$169,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1142,1,_zla( 0, t$1141 )), 0x800600000000L ) ) )
 3221.          _free( t$1143 )
 3222.           _substr(t$1144,1,4) = ' '
 3222.          call _stop(  _substr(t$1144,1,1) )
 3222.          return
 3222.       else
 3223.          nout = cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 )
 3233.          $left_S1 = cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) / 2
 3237.          $I_L3237_13 = 0
 3237.          do
 3239.             $SC_base_I0 = base(1 + $I_L3237_13)
 3239.             do
 3239.                if ( mod( $left_S1, $SC_base_I0 ) /= 0 ) goto 10
 3240.             enddo
 3240.    10       continue
 3245.             $I_L3237_13 = 1 + $I_L3237_13
 3241.             if ( $I_L3237_13 >= 4 ) exit
 3241.          enddo
 3247.          if ( $left_S1 /= 1 ) then
 3249.             if ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) < 2147483646.0 ) then
 3232.                $Trips03_N9 = int( ( 5.0e-1 * ( 2.0 + 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) ) ), 8 ) + -_rsh( .not.or( (boolean[64])( 2.0 * real( int( ( 5.0e-1 * ( 2.0 + 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) ) ), 8 ), 8 ) + -2.0 + -2147483646.0 + -( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) ), -( (boolean[64])( 2.0 * real( int( ( 5.0e-1 * ( 2.0 + 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) ) ), 8 ), 8 ) + -2.0 + -2147483646.0 + -( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) ) ) ), 63 )
 3232.                $I_nout_15 = 0
 3232.                do
 3233.                   $left_S1 = ( 2 + cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $I_nout_15 ) / 2
 3237.                   $I_L3237_11 = 0
 3237.                   do
 3239.                      $SC_base_I1 = base(1 + $I_L3237_11)
 3239.                      do
 3239.                         if ( mod( $left_S1, $SC_base_I1 ) /= 0 ) goto 20
 3240.                      enddo
 3240.    20                continue
 3245.                      $I_L3237_11 = 1 + $I_L3237_11
 3241.                      if ( $I_L3237_11 >= 4 ) exit
 3241.                   enddo
 3247.                   if ( $left_S1 == 1 ) then
 3250.                      nout = ( 2 + cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $I_nout_15 )
 3250.                      goto 40
 3250.                   endif
 3249.                   $I_nout_15 = 1 + $I_nout_15
 3249.                   if ( $I_nout_15 >= $Trips03_N9 ) exit
 3249.                enddo
 3250.                nout = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $Trips03_N9 )
 3250.                goto 30
 3250.             else
 3250.    30          continue
 3252.                _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$172,  _substr(t$171,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3255.                _f90_adjustl(  _substr(t$1146,1,15),  _substr(charnin,1,15) )
 3253.                t$1147 = _ltrim(  _substr(t$1146,1,15) )
 3255.                t$1149 = int( _alloc( max( 0, t$1147 ) ), 8 )
 3255.                 _substr(t$1148,1,max( 0, t$1147 )) =  _substr(t$1146,1,_ltrim(  _substr(t$1146,1,15) ))
 3253.                $Unit_temp_O1 = nfprt
 3253.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$174,  _substr(t$173,1,78), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1148,1,max( 0, t$1147 )), 0x800600000000L ) ) )
 3255.                _free( t$1149 )
 3256.                 _substr(t$1150,1,4) = ' '
 3256.                call _stop(  _substr(t$1150,1,1) )
 3256.                return
 3256.             endif
 3256.          endif
 3256.       endif
 3256.    40 continue
 3259.       nextsizefft = nout
 3259.       return
 3259.       end
 3259.       
 3273.       
 3273.       subroutine dirffttrans( finout, ldinout, tdinout, n, lot, trigs, ntrigs, factors, nfactors )
 3273.       t$175 = ldinout
 3273.       t$176 = tdinout
 3275.       t$330 = _zla( 0, ldinout )
 3273.       t$331 = _zla( 0, ldinout )
 3275.       t$332 = _zla( 0, tdinout )
 3273.       t$333 = _zla( 0, ldinout ) * _zla( 0, tdinout )
 3273.       t$177 = ntrigs
 3279.       t$334 = _zla( 0, ntrigs )
 3273.       t$178 = nfactors
 3281.       t$335 = _zla( 0, nfactors )
 3273.       t$179 = lot
 3273.       t$180 = n / 2
 3289.       t$336 = _zla( 0, lot )
 3273.       t$337 = _zla( 0, lot )
 3289.       t$338 = _zla( 0, t$180 )
 3273.       t$339 = _zla( 0, t$180 ) * _zla( 0, lot )
 3289.       t$342 = 8 * _zla( 0, t$180 ) * _zla( 0, lot )
 3290.       t$343 = 8 * ( 7 + 8 * _zla( 0, t$180 ) * _zla( 0, lot ) ) / 8
 3290.       t$345 = t$343 + 8 * _zla( 0, t$180 ) * _zla( 0, lot )
 3291.       t$346 = 8 * ( 7 + t$343 + 8 * _zla( 0, t$180 ) * _zla( 0, lot ) ) / 8
 3291.       t$348 = t$346 + 8 * _zla( 0, t$180 ) * _zla( 0, lot )
 3292.       t$349 = 8 * ( 7 + t$346 + 8 * _zla( 0, t$180 ) * _zla( 0, lot ) ) / 8
 3292.       t$351 = t$349 + 8 * _zla( 0, t$180 ) * _zla( 0, lot )
 3273.       t$340 = int( _alloc( t$349 + 8 * _zla( 0, t$180 ) * _zla( 0, lot ) ), 8 )
 3289.       t$341 = t$340
 3290.       t$344 = t$343 + t$340
 3291.       t$347 = t$346 + t$340
 3292.       t$350 = t$349 + t$340
 3294.       $nfax_S2 = factors(1)
 3295.       nh = n / 2
 3297.       t$181 = ldinout
 3297.       t$182 = tdinout
 3297.       t$352 = max( 0, ldinout )
 3297.       t$353 = max( 0, ldinout )
 3297.       t$354 = max( 0, tdinout )
 3297.       t$355 = max( 0, ldinout ) * max( 0, tdinout )
 3297.       t$183 = lot
 3297.       t$184 = n / 2
 3297.       t$356 = max( 0, lot )
 3297.       t$357 = max( 0, lot )
 3297.       t$358 = max( 0, n / 2 )
 3297.       t$359 = max( 0, lot ) * max( 0, n / 2 )
 3297.       if ( n >= 2 ) then
 3297.          if ( lot > 0 ) then
 3297.             $I_L3297_60 = 0
 3297.             do
 3297.                $I_L3297_44 = 0
 3297. !dir$ ivdep
 3297.                do
 3297.                   a(1 + $I_L3297_44, 1 + $I_L3297_60) = finout(1 + $I_L3297_44, 1 + 2 * $I_L3297_60)
 3297.                   b(1 + $I_L3297_44, 1 + $I_L3297_60) = finout(1 + $I_L3297_44, 2 + 2 * $I_L3297_60)
 3297.                   $I_L3297_44 = 1 + $I_L3297_44
 3297.                   if ( $I_L3297_44 >= lot ) exit
 3297.                enddo
 3297.                $I_L3297_60 = 1 + $I_L3297_60
 3297.                if ( $I_L3297_60 >= n / 2 ) exit
 3297.             enddo
 3297.          endif
 3297.       endif
 3299.       la = 1
 3300.       $ab2cd_S3 = .true.
 3301.       if ( $nfax_S2 > 0 ) then
 3301.          $I_L3301_46 = 0
 3301.          do
 3302.             if ( $ab2cd_S3 /= .false. ) then
 3303.                call onepass( a(1, 1), b(1, 1), c(1, 1), d(1, 1), lot, nh, factors(2 + $I_L3301_46), la, trigs(1), ntrigs )
 3304.                $ab2cd_S3 = .false.
 3304.             else
 3306.                call onepass( c(1, 1), d(1, 1), a(1, 1), b(1, 1), lot, nh, factors(2 + $I_L3301_46), la, trigs(1), ntrigs )
 3307.                $ab2cd_S3 = .true.
 3307.             endif
 3309.             la = la * factors(2 + $I_L3301_46)
 3310.             $I_L3301_46 = 1 + $I_L3301_46
 3308.             if ( $I_L3301_46 >= $nfax_S2 ) exit
 3308.          enddo
 3308.       endif
 3312.       if ( $ab2cd_S3 /= .false. ) then
 3313.          t$187 = lot
 3313.          t$188 = nh
 3313.          t$360 = max( 0, lot )
 3313.          t$361 = max( 0, lot )
 3313.          t$362 = max( 0, nh )
 3313.          t$363 = max( 0, lot ) * max( 0, nh )
 3313.          t$185 = ldinout
 3313.          t$186 = tdinout
 3313.          t$364 = max( 0, ldinout )
 3313.          t$365 = max( 0, ldinout )
 3313.          t$366 = max( 0, tdinout )
 3313.          t$367 = max( 0, ldinout ) * max( 0, tdinout )
 3313.          t$189 = ntrigs
 3313.          t$368 = max( 0, ntrigs )
 3313.          $scale_S5 = 1.0/( real( n, 8 ) )
 3313.          $scalh_S11 = 5.0e-1 * $scale_S5
 3313.          if ( lot > 0 ) then
 3313.             $I_L3313_48 = 0
 3313. !dir$ ivdep
 3313.             do
 3313.                finout(1 + $I_L3313_48, 1) = $scale_S5 * ( a(1 + $I_L3313_48, 1) + b(1 + $I_L3313_48, 1) )
 3313.                finout(1 + $I_L3313_48, 1 + n) = $scale_S5 * ( a(1 + $I_L3313_48, 1) + -b(1 + $I_L3313_48, 1) )
 3313.                finout(1 + $I_L3313_48, 2) = 0.0
 3313.                $I_L3313_48 = 1 + $I_L3313_48
 3313.                if ( $I_L3313_48 >= lot ) exit
 3313.             enddo
 3313.          endif
 3313.          if ( -2 + ( 1 + nh ) / 2 >= 0 ) then
 3313.             if ( lot > 0 ) then
 3313.                $I_L3313_64 = 0
 3313.                do
 3313.                   $c_S10 = trigs(3 + n + 2 * $I_L3313_64)
 3313.                   $s_S9 = trigs(4 + n + 2 * $I_L3313_64)
 3313.                   $I_L3313_56 = 0
 3313. !dir$ ivdep
 3313.                   do
 3313.                      finout(1 + $I_L3313_56, 3 + 2 * $I_L3313_64) = $scalh_S11 * ( ( a(1 + $I_L3313_56, 2 + $I_L3313_64) + a(1 + $I_L3313_56, nh + -$I_L3313_64) ) + ( $s_S9 * ( a(1 + $I_L3313_56, 2 + $I_L3313_64) + -a(1 + $I_L3313_56, nh + -$I_L3313_64) ) + $c_S10 * ( b(1 + $I_L3313_56, 2 + $I_L3313_64) + b(1 + $I_L3313_56, nh + -$I_L3313_64) ) ) )
 3313.                      finout(1 + $I_L3313_56, -1 + n + -2 * $I_L3313_64) = $scalh_S11 * ( ( a(1 + $I_L3313_56, 2 + $I_L3313_64) + a(1 + $I_L3313_56, nh + -$I_L3313_64) ) + -( $s_S9 * ( a(1 + $I_L3313_56, 2 + $I_L3313_64) + -a(1 + $I_L3313_56, nh + -$I_L3313_64) ) + $c_S10 * ( b(1 + $I_L3313_56, 2 + $I_L3313_64) + b(1 + $I_L3313_56, nh + -$I_L3313_64) ) ) )
 3313.                      finout(1 + $I_L3313_56, 4 + 2 * $I_L3313_64) = $scalh_S11 * ( ( b(1 + $I_L3313_56, nh + -$I_L3313_64) + -b(1 + $I_L3313_56, 2 + $I_L3313_64) ) + ( -( $s_S9 * ( b(1 + $I_L3313_56, 2 + $I_L3313_64) + b(1 + $I_L3313_56, nh + -$I_L3313_64) ) ) + $c_S10 * ( a(1 + $I_L3313_56, 2 + $I_L3313_64) + -a(1 + $I_L3313_56, nh + -$I_L3313_64) ) ) )
 3313.                      finout(1 + $I_L3313_56, n + -2 * $I_L3313_64) = $scalh_S11 * ( ( -( $s_S9 * ( b(1 + $I_L3313_56, 2 + $I_L3313_64) + b(1 + $I_L3313_56, nh + -$I_L3313_64) ) ) + $c_S10 * ( a(1 + $I_L3313_56, 2 + $I_L3313_64) + -a(1 + $I_L3313_56, nh + -$I_L3313_64) ) ) + -( b(1 + $I_L3313_56, nh + -$I_L3313_64) + -b(1 + $I_L3313_56, 2 + $I_L3313_64) ) )
 3313.                      $I_L3313_56 = 1 + $I_L3313_56
 3313.                      if ( $I_L3313_56 >= lot ) exit
 3313.                   enddo
 3313.                   $I_L3313_64 = 1 + $I_L3313_64
 3313.                   if ( $I_L3313_64 >= -1 + ( 1 + nh ) / 2 ) exit
 3313.                enddo
 3313.             endif
 3313.          endif
 3313.          if ( nh >= 2 ) then
 3313.             if ( mod( nh, 2 ) == 0 ) then
 3313.                if ( lot > 0 ) then
 3313.                   $I_L3313_58 = 0
 3313. !dir$ ivdep
 3313.                   do
 3313.                      finout(1 + $I_L3313_58, 1 + nh) = $scale_S5 * a(1 + $I_L3313_58, 1 + nh / 2)
 3313.                      finout(1 + $I_L3313_58, 2 + nh) = -( $scale_S5 * b(1 + $I_L3313_58, 1 + nh / 2) )
 3313.                      $I_L3313_58 = 1 + $I_L3313_58
 3313.                      if ( $I_L3313_58 >= lot ) exit
 3313.                   enddo
 3313.                endif
 3313.             endif
 3313.          endif
 3313.       else
 3315.          t$187 = lot
 3315.          t$188 = nh
 3315.          t$360 = max( 0, lot )
 3315.          t$361 = max( 0, lot )
 3315.          t$362 = max( 0, nh )
 3315.          t$363 = max( 0, lot ) * max( 0, nh )
 3315.          t$185 = ldinout
 3315.          t$186 = tdinout
 3315.          t$364 = max( 0, ldinout )
 3315.          t$365 = max( 0, ldinout )
 3315.          t$366 = max( 0, tdinout )
 3315.          t$367 = max( 0, ldinout ) * max( 0, tdinout )
 3315.          t$189 = ntrigs
 3315.          t$368 = max( 0, ntrigs )
 3315.          $scale_S5 = 1.0/( real( n, 8 ) )
 3315.          $scalh_S18 = 5.0e-1 * 1.0/( real( n, 8 ) )
 3315.          if ( lot > 0 ) then
 3315.             $I_L3315_50 = 0
 3315. !dir$ ivdep
 3315.             do
 3315.                finout(1 + $I_L3315_50, 1) = $scale_S5 * ( c(1 + $I_L3315_50, 1) + d(1 + $I_L3315_50, 1) )
 3315.                finout(1 + $I_L3315_50, 1 + n) = $scale_S5 * ( c(1 + $I_L3315_50, 1) + -d(1 + $I_L3315_50, 1) )
 3315.                finout(1 + $I_L3315_50, 2) = 0.0
 3315.                $I_L3315_50 = 1 + $I_L3315_50
 3315.                if ( $I_L3315_50 >= lot ) exit
 3315.             enddo
 3315.          endif
 3315.          if ( -2 + ( 1 + nh ) / 2 >= 0 ) then
 3315.             if ( lot > 0 ) then
 3315.                $I_L3315_62 = 0
 3315.                do
 3315.                   $c_S17 = trigs(3 + n + 2 * $I_L3315_62)
 3315.                   $s_S16 = trigs(4 + n + 2 * $I_L3315_62)
 3315.                   $I_L3315_52 = 0
 3315. !dir$ ivdep
 3315.                   do
 3315.                      finout(1 + $I_L3315_52, 3 + 2 * $I_L3315_62) = $scalh_S18 * ( ( c(1 + $I_L3315_52, 2 + $I_L3315_62) + c(1 + $I_L3315_52, nh + -$I_L3315_62) ) + ( $s_S16 * ( c(1 + $I_L3315_52, 2 + $I_L3315_62) + -c(1 + $I_L3315_52, nh + -$I_L3315_62) ) + $c_S17 * ( d(1 + $I_L3315_52, 2 + $I_L3315_62) + d(1 + $I_L3315_52, nh + -$I_L3315_62) ) ) )
 3315.                      finout(1 + $I_L3315_52, -1 + n + -2 * $I_L3315_62) = $scalh_S18 * ( ( c(1 + $I_L3315_52, 2 + $I_L3315_62) + c(1 + $I_L3315_52, nh + -$I_L3315_62) ) + -( $s_S16 * ( c(1 + $I_L3315_52, 2 + $I_L3315_62) + -c(1 + $I_L3315_52, nh + -$I_L3315_62) ) + $c_S17 * ( d(1 + $I_L3315_52, 2 + $I_L3315_62) + d(1 + $I_L3315_52, nh + -$I_L3315_62) ) ) )
 3315.                      finout(1 + $I_L3315_52, 4 + 2 * $I_L3315_62) = $scalh_S18 * ( ( d(1 + $I_L3315_52, nh + -$I_L3315_62) + -d(1 + $I_L3315_52, 2 + $I_L3315_62) ) + ( -( $s_S16 * ( d(1 + $I_L3315_52, 2 + $I_L3315_62) + d(1 + $I_L3315_52, nh + -$I_L3315_62) ) ) + $c_S17 * ( c(1 + $I_L3315_52, 2 + $I_L3315_62) + -c(1 + $I_L3315_52, nh + -$I_L3315_62) ) ) )
 3315.                      finout(1 + $I_L3315_52, n + -2 * $I_L3315_62) = $scalh_S18 * ( ( -( $s_S16 * ( d(1 + $I_L3315_52, 2 + $I_L3315_62) + d(1 + $I_L3315_52, nh + -$I_L3315_62) ) ) + $c_S17 * ( c(1 + $I_L3315_52, 2 + $I_L3315_62) + -c(1 + $I_L3315_52, nh + -$I_L3315_62) ) ) + -( d(1 + $I_L3315_52, nh + -$I_L3315_62) + -d(1 + $I_L3315_52, 2 + $I_L3315_62) ) )
 3315.                      $I_L3315_52 = 1 + $I_L3315_52
 3315.                      if ( $I_L3315_52 >= lot ) exit
 3315.                   enddo
 3315.                   $I_L3315_62 = 1 + $I_L3315_62
 3315.                   if ( $I_L3315_62 >= -1 + ( 1 + nh ) / 2 ) exit
 3315.                enddo
 3315.             endif
 3315.          endif
 3315.          if ( nh >= 2 ) then
 3315.             if ( mod( nh, 2 ) == 0 ) then
 3315.                if ( lot > 0 ) then
 3315.                   $I_L3315_54 = 0
 3315. !dir$ ivdep
 3315.                   do
 3315.                      finout(1 + $I_L3315_54, 1 + nh) = $scale_S5 * c(1 + $I_L3315_54, 1 + nh / 2)
 3315.                      finout(1 + $I_L3315_54, 2 + nh) = -( $scale_S5 * d(1 + $I_L3315_54, 1 + nh / 2) )
 3315.                      $I_L3315_54 = 1 + $I_L3315_54
 3315.                      if ( $I_L3315_54 >= lot ) exit
 3315.                   enddo
 3315.                endif
 3315.             endif
 3315.          endif
 3315.       endif
 3273.       _free( t$340 )
 3317.       return
 3317.       end
 3317.       
 3326.       
 3326.       subroutine splitgridtrans( fin, a, b, ldin, tdin, nh, lot )
 3326.       t$181 = ldin
 3326.       t$182 = tdin
 3331.       t$352 = _zla( 0, ldin )
 3326.       t$353 = _zla( 0, ldin )
 3331.       t$354 = _zla( 0, tdin )
 3326.       t$355 = _zla( 0, ldin ) * _zla( 0, tdin )
 3326.       t$183 = lot
 3326.       t$184 = nh
 3332.       t$356 = _zla( 0, lot )
 3326.       t$357 = _zla( 0, lot )
 3332.       t$358 = _zla( 0, nh )
 3326.       t$359 = _zla( 0, lot ) * _zla( 0, nh )
 3337.       if ( nh > 0 ) then
 3338.          if ( lot > 0 ) then
 3337.             $I_L3337_10 = 0
 3337.             do
 3338.                $I_L3338_8 = 0
 3338. !dir$ ivdep
 3338.                do
 3339.                   a(1 + $I_L3338_8, 1 + $I_L3337_10) = fin(1 + $I_L3338_8, 1 + 2 * $I_L3337_10)
 3340.                   b(1 + $I_L3338_8, 1 + $I_L3337_10) = fin(1 + $I_L3338_8, 2 + 2 * $I_L3337_10)
 3341.                   $I_L3338_8 = 1 + $I_L3338_8
 3338.                   if ( $I_L3338_8 >= lot ) exit
 3338.                enddo
 3342.                $I_L3337_10 = 1 + $I_L3337_10
 3341.                if ( $I_L3337_10 >= nh ) exit
 3341.             enddo
 3341.          endif
 3341.       endif
 3344.       return
 3344.       end
 3344.       
 3353.       
 3353.       subroutine joinfourtrans( a, b, fout, ldout, tdout, n, nh, lot, trigs, ntrigs )
 3353.       t$187 = lot
 3353.       t$188 = nh
 3359.       t$360 = _zla( 0, lot )
 3353.       t$361 = _zla( 0, lot )
 3359.       t$362 = _zla( 0, nh )
 3353.       t$363 = _zla( 0, lot ) * _zla( 0, nh )
 3353.       t$185 = ldout
 3353.       t$186 = tdout
 3358.       t$364 = _zla( 0, ldout )
 3353.       t$365 = _zla( 0, ldout )
 3358.       t$366 = _zla( 0, tdout )
 3353.       t$367 = _zla( 0, ldout ) * _zla( 0, tdout )
 3353.       t$189 = ntrigs
 3362.       t$368 = _zla( 0, ntrigs )
 3368.       $scale_S1 = 1.0/( real( n, 8 ) )
 3369.       $scalh_S6 = 5.0e-1 * 1.0/( real( n, 8 ) )
 3372.       if ( lot > 0 ) then
 3372.          $I_L3372_16 = 0
 3372. !dir$ ivdep
 3372.          do
 3373.             fout(1 + $I_L3372_16, 1) = $scale_S1 * ( a(1 + $I_L3372_16, 1) + b(1 + $I_L3372_16, 1) )
 3374.             fout(1 + $I_L3372_16, 1 + n) = $scale_S1 * ( a(1 + $I_L3372_16, 1) + -b(1 + $I_L3372_16, 1) )
 3375.             fout(1 + $I_L3372_16, 2) = 0.0
 3376.             $I_L3372_16 = 1 + $I_L3372_16
 3372.             if ( $I_L3372_16 >= lot ) exit
 3372.          enddo
 3372.       endif
 3378.       if ( -2 + ( 1 + nh ) / 2 >= 0 ) then
 3382.          if ( lot > 0 ) then
 3378.             $I_L3378_22 = 0
 3378.             do
 3379.                $c_S5 = trigs(3 + n + 2 * $I_L3378_22)
 3380.                $s_S4 = trigs(4 + n + 2 * $I_L3378_22)
 3382.                $I_L3382_18 = 0
 3382. !dir$ ivdep
 3382.                do
 3383.                   fout(1 + $I_L3382_18, 3 + 2 * $I_L3378_22) = $scalh_S6 * ( ( a(1 + $I_L3382_18, 2 + $I_L3378_22) + a(1 + $I_L3382_18, nh + -$I_L3378_22) ) + ( $s_S4 * ( a(1 + $I_L3382_18, 2 + $I_L3378_22) + -a(1 + $I_L3382_18, nh + -$I_L3378_22) ) + $c_S5 * ( b(1 + $I_L3382_18, 2 + $I_L3378_22) + b(1 + $I_L3382_18, nh + -$I_L3378_22) ) ) )
 3386.                   fout(1 + $I_L3382_18, -1 + n + -2 * $I_L3378_22) = $scalh_S6 * ( ( a(1 + $I_L3382_18, 2 + $I_L3378_22) + a(1 + $I_L3382_18, nh + -$I_L3378_22) ) + -( $s_S4 * ( a(1 + $I_L3382_18, 2 + $I_L3378_22) + -a(1 + $I_L3382_18, nh + -$I_L3378_22) ) + $c_S5 * ( b(1 + $I_L3382_18, 2 + $I_L3378_22) + b(1 + $I_L3382_18, nh + -$I_L3378_22) ) ) )
 3389.                   fout(1 + $I_L3382_18, 4 + 2 * $I_L3378_22) = $scalh_S6 * ( ( b(1 + $I_L3382_18, nh + -$I_L3378_22) + -b(1 + $I_L3382_18, 2 + $I_L3378_22) ) + ( -( $s_S4 * ( b(1 + $I_L3382_18, 2 + $I_L3378_22) + b(1 + $I_L3382_18, nh + -$I_L3378_22) ) ) + $c_S5 * ( a(1 + $I_L3382_18, 2 + $I_L3378_22) + -a(1 + $I_L3382_18, nh + -$I_L3378_22) ) ) )
 3392.                   fout(1 + $I_L3382_18, n + -2 * $I_L3378_22) = $scalh_S6 * ( ( -( $s_S4 * ( b(1 + $I_L3382_18, 2 + $I_L3378_22) + b(1 + $I_L3382_18, nh + -$I_L3378_22) ) ) + $c_S5 * ( a(1 + $I_L3382_18, 2 + $I_L3378_22) + -a(1 + $I_L3382_18, nh + -$I_L3378_22) ) ) + -( b(1 + $I_L3382_18, nh + -$I_L3378_22) + -b(1 + $I_L3382_18, 2 + $I_L3378_22) ) )
 3395.                   $I_L3382_18 = 1 + $I_L3382_18
 3382.                   if ( $I_L3382_18 >= lot ) exit
 3382.                enddo
 3396.                $I_L3378_22 = 1 + $I_L3378_22
 3395.                if ( $I_L3378_22 >= -1 + ( 1 + nh ) / 2 ) exit
 3395.             enddo
 3395.          endif
 3395.       endif
 3398.       if ( nh >= 2 ) then
 3398.          if ( mod( nh, 2 ) == 0 ) then
 3400.             if ( lot > 0 ) then
 3400.                $I_L3400_20 = 0
 3400. !dir$ ivdep
 3400.                do
 3401.                   fout(1 + $I_L3400_20, 1 + nh) = $scale_S1 * a(1 + $I_L3400_20, 1 + nh / 2)
 3402.                   fout(1 + $I_L3400_20, 2 + nh) = -( $scale_S1 * b(1 + $I_L3400_20, 1 + nh / 2) )
 3403.                   $I_L3400_20 = 1 + $I_L3400_20
 3400.                   if ( $I_L3400_20 >= lot ) exit
 3400.                enddo
 3400.             endif
 3400.          endif
 3400.       endif
 3406.       return
 3406.       end
 3406.       
    6.       
    6.       module transform
    6.       end
    6.       
