%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Sfc_SSiB.f90
Compiled : 10/27/10  05:30:38
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -emacdE -rmda -c
           -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Sfc_SSiB.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Sfc_SSiB.f90
Date     : 10/27/2010  05:31:15


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,modinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_27330/Sfc_SSiB.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.                 !
    2.                 !  $Author: pkubota $
    3.                 !  $Date: 2009/03/03 16:36:38 $
    4.                 !  $Revision: 1.14 $
    5.                 !
    6.                 MODULE SFC_SSiB
    7.                 
    8.                   ! InitSSiB
    9.                   !
   10.                   !fysiks -----| pbl ------| root
   11.                   !            |           |
   12.                   !            |           | raduse
   13.                   !            |           |
   14.                   !            |           | stomat
   15.                   !            |           |
   16.                   !            |           | interc
   17.                   !            |           |
   18.                   !            |           | sflxes ------| vntlax
   19.                   !            |                          |
   20.                   !            |                          | rbrd
   21.                   !            |                          |
   22.                   !            |                          | cut
   23.                   !            |                          |
   24.                   !            |                          | stres2
   25.                   !            |                          |
   26.                   !            |                          | temres
   27.                   !            |                          |
   28.                   !            |                          | update
   29.                   !            |                          |
   30.                   !            |                          | airmod
   31.                   !            |
   32.                   !            | snowm
   33.                   !            |
   34.                   !            | runoff
   35.                   !            |
   36.                   !            | seasfc ------| vntlt1
   37.                   !            |
   38.                   !            | sextrp
   39.                   !            |
   40.                   !            | sibwet ------| extrak
   41.                   !            |
   42.                   !            | sibwet_GLSM ------| extrak
   43.                   !            | 
   44.                   !            | Albedo --- radalb
   45.                   !            |
   46.                   !            | radalb
   47.                   !            |
   48.                   !            | vegin
   49.                   !            |
   50.                   !            |re_assign_sib_soil_prop
   51.                   !            |
   52.                   !            | wheat
   53.                 
   54.                   USE Constants, ONLY :     &
   55.                        ityp, imon, icg, iwv, idp, ibd, tice,&
   56.                        gasr,          &
   57.                        pie,           &
   58.                        cp,            &
   59.                        hl,            &
   60.                        grav,          &
   61.                        stefan,        &
   62.                        snomel,        &
   63.                        tf,            &
   64.                        epsfac,        &
   65.                        clai,          &
   66.                        athird,        &
   67.                        cw,            &
   68.                        z0ice,         &
   69.                        oceald   ,     &
   70.                        icealn   ,     &
   71.                        icealv   ,     &
   72.                        r8,i8,r4
   73.                 
   74.                   USE Options, ONLY: &
   75.                        nfprt, nfctrl, nfsibd, nfalb,filta,epsflt,istrt,Model1D,yrl   ,monl,schemes
   76.                 
   77.                 
   78.                   IMPLICIT NONE
   79.                 
   80.                   PRIVATE
   81.                 
   82.                   PUBLIC :: InitSSiB
   83.                   PUBLIC :: fysiks
   84.                   PUBLIC :: seasfc
   85.                   PUBLIC :: sextrp
   86.                   PUBLIC :: radalb
   87.                   PUBLIC :: Albedo
   88.                   PUBLIC :: vegin
   89.                   PUBLIC :: re_assign_sib_soil_prop
   90.                   PUBLIC :: wheat
   91.                   PUBLIC :: sibwet
   92.                   PUBLIC :: sibwet_GLSM
   93.                   PUBLIC :: x0x
   94.                   PUBLIC :: xd
   95.                   PUBLIC :: xdc
   96.                   PUBLIC :: xbc
   97.                   PUBLIC :: CopySurfaceData
   98.                   PUBLIC :: SSiB_Driver
   99.                   REAL(KIND=r8)   :: expcut
  100.                   REAL(KIND=r8)   :: rbyg
  101.                 
  102.                   REAL(KIND=r8)   , ALLOCATABLE :: cedfu (:,:,:)
  103.                   REAL(KIND=r8)   , ALLOCATABLE :: cedir (:,:,:,:)
  104.                   REAL(KIND=r8)   , ALLOCATABLE :: cedfu1(:,:,:,:,:)
  105.                   REAL(KIND=r8)   , ALLOCATABLE :: cedir1(:,:,:,:,:,:)
  106.                   REAL(KIND=r8)   , ALLOCATABLE :: cedfu2(:,:,:,:,:)
  107.                   REAL(KIND=r8)   , ALLOCATABLE :: cedir2(:,:,:,:,:,:)
  108.                   REAL(KIND=r8)   , ALLOCATABLE :: cledfu(:,:,:)
  109.                   REAL(KIND=r8)   , ALLOCATABLE :: cledir(:,:,:,:)
  110.                   REAL(KIND=r8)   , ALLOCATABLE :: xmiu  (:,:)
  111.                   REAL(KIND=r8)   , ALLOCATABLE :: cether(:,:,:)
  112.                   REAL(KIND=r8)   , ALLOCATABLE :: xmiw  (:,:)
  113.                 
  114.                   REAL(KIND=r8)   , ALLOCATABLE :: ystpar(:,:)
  115.                   REAL(KIND=r8)   , ALLOCATABLE :: yopt  (:)
  116.                   REAL(KIND=r8)   , ALLOCATABLE :: yll   (:)
  117.                   REAL(KIND=r8)   , ALLOCATABLE :: yu    (:)
  118.                   REAL(KIND=r8)   , ALLOCATABLE :: yefac (:)
  119.                   REAL(KIND=r8)   , ALLOCATABLE :: yh1   (:)
  120.                   REAL(KIND=r8)   , ALLOCATABLE :: yh2   (:)
  121.                   REAL(KIND=r8)   , ALLOCATABLE :: yootd (:)
  122.                   REAL(KIND=r8)   , ALLOCATABLE :: yreen (:,:)
  123.                   REAL(KIND=r8)   , ALLOCATABLE :: ycover(:,:)
  124.                   REAL(KIND=r8)   , ALLOCATABLE :: ylt   (:,:)
  125.                 
  126.                 
  127.                   REAL(KIND=r8)   , ALLOCATABLE :: rstpar_fixed    (:,:,:)
  128.                   REAL(KIND=r8)   , ALLOCATABLE :: chil_fixed      (:,:)
  129.                   REAL(KIND=r8)   , ALLOCATABLE :: topt_fixed      (:,:)
  130.                   REAL(KIND=r8)   , ALLOCATABLE :: tll_fixed          (:,:)
  131.                   REAL(KIND=r8)   , ALLOCATABLE :: tu_fixed          (:,:)
  132.                   REAL(KIND=r8)   , ALLOCATABLE :: defac_fixed     (:,:)
  133.                   REAL(KIND=r8)   , ALLOCATABLE :: ph1_fixed          (:,:)
  134.                   REAL(KIND=r8)   , ALLOCATABLE :: ph2_fixed          (:,:)
  135.                   REAL(KIND=r8)   , ALLOCATABLE :: rootd     (:,:)
  136.                   REAL(KIND=r8)   , ALLOCATABLE :: bee          (:)
  137.                   REAL(KIND=r8)   , ALLOCATABLE :: phsat     (:)
  138.                   REAL(KIND=r8)   , ALLOCATABLE :: satco     (:)
  139.                   REAL(KIND=r8)   , ALLOCATABLE :: poros     (:)
  140.                   REAL(KIND=r8)   , ALLOCATABLE :: zdepth    (:,:)
  141.                   REAL(KIND=r8)   , ALLOCATABLE :: green_fixed     (:,:,:)
  142.                   REAL(KIND=r8)   , ALLOCATABLE :: xcover_fixed    (:,:,:)
  143.                   REAL(KIND=r8)   , ALLOCATABLE :: zlt_fixed          (:,:,:)
  144.                   REAL(KIND=r8)   , ALLOCATABLE :: x0x          (:,:)
  145.                   REAL(KIND=r8)   , ALLOCATABLE :: xd          (:,:)
  146.                   REAL(KIND=r8)   , ALLOCATABLE :: z2          (:,:)
  147.                   REAL(KIND=r8)   , ALLOCATABLE :: z1          (:,:)
  148.                   REAL(KIND=r8)   , ALLOCATABLE :: xdc          (:,:)
  149.                   REAL(KIND=r8)   , ALLOCATABLE :: xbc          (:,:)
  150.                   REAL(KIND=r8)   , ALLOCATABLE :: zlt(:, :, :)
  151.                   REAL(KIND=r8)   , ALLOCATABLE :: xcover  (:, :, :)
  152.                   REAL(KIND=r8)   , ALLOCATABLE :: ph2(:,:)
  153.                   REAL(KIND=r8)   , ALLOCATABLE :: ph1(:,:)
  154.                   REAL(KIND=r8)   , ALLOCATABLE :: green(:,:,:)
  155.                   REAL(KIND=r8)   , ALLOCATABLE :: defac(:,:)
  156.                   REAL(KIND=r8)   , ALLOCATABLE :: tu(:,:)
  157.                   REAL(KIND=r8)   , ALLOCATABLE :: tll(:,:)
  158.                   REAL(KIND=r8)   , ALLOCATABLE :: topt(:,:)
  159.                   REAL(KIND=r8)   , ALLOCATABLE :: rstpar(:,:,:)
  160.                   REAL(KIND=r8)   , ALLOCATABLE :: chil(:,:)
  161.                 
  162.                   REAL(KIND=r8)   , ALLOCATABLE :: vcover_gbl (:,:,:)
  163.                   REAL(KIND=r8)   , ALLOCATABLE :: zlt_gbl    (:,:,:)
  164.                   REAL(KIND=r8)   , ALLOCATABLE :: green_gbl  (:,:,:)
  165.                   REAL(KIND=r8)   , ALLOCATABLE :: chil_gbl   (:,:,:)
  166.                   REAL(KIND=r8)   , ALLOCATABLE :: topt_gbl   (:,:,:)
  167.                   REAL(KIND=r8)   , ALLOCATABLE :: tll_gbl    (:,:,:)
  168.                   REAL(KIND=r8)   , ALLOCATABLE :: tu_gbl     (:,:,:)
  169.                   REAL(KIND=r8)   , ALLOCATABLE :: defac_gbl  (:,:,:)
  170.                   REAL(KIND=r8)   , ALLOCATABLE :: ph2_gbl    (:,:,:)
  171.                   REAL(KIND=r8)   , ALLOCATABLE :: ph1_gbl    (:,:,:)
  172.                   REAL(KIND=r8)   , ALLOCATABLE :: rstpar_gbl (:,:,:,:)
  173.                 
  174.                 
  175.                   CHARACTER(LEN=200) :: path_in
  176.                   CHARACTER(LEN=200) :: fNameSibVeg
  177.                   CHARACTER(LEN=200) :: fNameSibAlb
  178.                 
  179.                 
  180.                 CONTAINS
  181.                 
  182.                 
  183.                   SUBROUTINE InitSSiB(ibMax ,jbMax,delsig,path,fNameSibVeg_in,fNameSibAlb_in)
  184.                     INTEGER, INTENT(IN) :: ibMax
  185.                     INTEGER, INTENT(IN) :: jbMax
  186.                     REAL(KIND=r8), INTENT(IN   ) ::  delsig(:)
  187.                     CHARACTER(LEN=*), INTENT(IN   ) ::  path
  188.                     CHARACTER(LEN=*), INTENT(IN   ) ::  fNameSibVeg_in
  189.                     CHARACTER(LEN=*), INTENT(IN   ) ::  fNameSibAlb_in
  190.                     expcut=- LOG(1.0e53_r8)
  191.                     rbyg  =gasr/grav*delsig(1)*0.5_r8
  192.                     path_in=path
  193.                     fNameSibVeg = fNameSibVeg_in
  194.                     fNameSibAlb = fNameSibAlb_in
  195.                     ALLOCATE(vcover_gbl(ibMax,jbMax,icg) )
  196.                     ALLOCATE(zlt_gbl   (ibMax,jbMax,icg))
  197.                     ALLOCATE(green_gbl (ibMax,jbMax,icg))
  198.                     ALLOCATE(chil_gbl  (ibMax,jbMax,icg))
  199.                     ALLOCATE(topt_gbl  (ibMax,jbMax,icg))
  200.                     ALLOCATE(tll_gbl   (ibMax,jbMax,icg))
  201.                     ALLOCATE(tu_gbl    (ibMax,jbMax,icg))
  202.                     ALLOCATE(defac_gbl (ibMax,jbMax,icg))
  203.                     ALLOCATE(ph2_gbl   (ibMax,jbMax,icg))
  204.                     ALLOCATE(ph1_gbl   (ibMax,jbMax,icg))
  205.                     ALLOCATE(rstpar_gbl(ibMax,jbMax,icg,iwv) )
  206.                   END SUBROUTINE InitSSiB
  207.                 
  208.                   SUBROUTINE SSiB_Driver(&
  209.                        jdt,latitu,bps,psb,dzm,em,gmt,gmq,&
  210.                        gmu,cu,cuni,ctni,ustar,cosz,sinclt,rhoair,&
  211.                        psy,rcp,wc,wg,fc,fg,hr,ect,&
  212.                        eci,egt,egi,egs,ec,eg,hc,hg,&
  213.                        ecidif,egidif,ecmass,egmass,etmass,hflux,chf,shf,&
  214.                        fluxef,roff,drag,ra,rb,rd,rc,rg,&
  215.                        tcta,tgta,ta,ea,etc,etg,btc,btg,&
  216.                        u2,radt,par,pd,rst,rsoil,phroot,hrr,&
  217.                        phsoil,cc,cg,satcap,snow,dtc,dtg,dtm,&
  218.                        dqm,stm,extk,radfac,closs,gloss,thermk,p1f,&
  219.                        p2f,tc,tg,td,capac,w,qm,tm,&
  220.                        um,vm,psur,ppc,ppl,radn,itype,dtc3x,&
  221.                        mon,nmax,ncols,zlwup,salb,tgeff,nsx ,tmtx,qmtx,&
  222.                        umtx,gt  ,gq,gu ,gv,gps,imask,kMax,ktm,initlz,tcm,tgm,tdm,wm ,&
  223.                        beam_visb,beam_visd,beam_nirb,beam_nird,cos2,dlwbot,capacm,td0,tg0, zenith,kt,iswrad,ilwrad,&
  224.                        xvisb,xvisd,xnirb,xnird,ppli,ppci,tsea, ssib, w0, tc0   ,capac0,intg,&
  225.                        slrad,tseam,tsurf,qsurf,colrad,sigki,delsig,sens,evap,umom,vmom,&
  226.                        zorl,rmi,rhi,cond,stor,z0x,speedm,Ustarm,z0sea,rho,d ,qsfc0,tsfc0, qsfcm,tsfcm,qsfc,tsfc,&
  227.                        qm0,qmm,tm0,tmm,mskant )
  228.                 
  229.                     IMPLICIT NONE
  230.                     INTEGER, INTENT(in   ) :: nCols
  231.                     INTEGER, INTENT(in   ) :: nmax
  232.                     INTEGER, INTENT(in   ) :: kMax
  233.                 
  234.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
  235.                     INTEGER, INTENT(inout) :: mon(ncols)
  236.                 
  237.                     INTEGER, INTENT(in   ) :: itype (ncols)
  238.                     !
  239.                     !     the size of working area is ncols*187
  240.                     !     atmospheric parameters as boudary values for sib
  241.                     !
  242.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
  243.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
  244.                     REAL(KIND=r8),    INTENT(inout) :: qm0 (ncols)
  245.                     REAL(KIND=r8),    INTENT(inout) :: qmm (ncols)
  246.                     REAL(KIND=r8),    INTENT(inout) :: tm0 (ncols)
  247.                     REAL(KIND=r8),    INTENT(inout) :: tmm (ncols)
  248.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
  249.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
  250.                     REAL(KIND=r8),    INTENT(in out) :: psur(ncols)
  251.                     REAL(KIND=r8),    INTENT(in out) :: ppc (ncols)
  252.                     REAL(KIND=r8),    INTENT(in out   ) :: ppl (ncols)
  253.                     REAL(KIND=r8),    INTENT(in out) :: radn(ncols,3,2)
  254.                     !
  255.                     !     prognostic variables
  256.                     !
  257.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
  258.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
  259.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
  260.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
  261.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
  262.                     !
  263.                     !     variables calculated from above and ambient conditions
  264.                     !
  265.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
  266.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
  267.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
  268.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
  269.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
  270.                     REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
  271.                     REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
  272.                     REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
  273.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
  274.                     REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
  275.                     REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
  276.                     REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
  277.                     REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
  278.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
  279.                     REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
  280.                     REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
  281.                     REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
  282.                     REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
  283.                     REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
  284.                     REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
  285.                     REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
  286.                     REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
  287.                     REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
  288.                     REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
  289.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
  290.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
  291.                     REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
  292.                     REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
  293.                     REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
  294.                     REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
  295.                     REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
  296.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
  297.                     REAL(KIND=r8),    INTENT(inout) :: radfac(ncols,icg,iwv,ibd)
  298.                     REAL(KIND=r8),    INTENT(inout) :: closs (ncols)
  299.                     REAL(KIND=r8),    INTENT(inout) :: gloss (ncols)
  300.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
  301.                     REAL(KIND=r8),    INTENT(inout) :: p1f   (ncols)
  302.                     REAL(KIND=r8),    INTENT(inout) :: p2f   (ncols)
  303.                     !
  304.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
  305.                     !
  306.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
  307.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
  308.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
  309.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
  310.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
  311.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
  312.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
  313.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
  314.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
  315.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
  316.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
  317.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
  318.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
  319.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
  320.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
  321.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
  322.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
  323.                     REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
  324.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
  325.                     REAL(KIND=r8),    INTENT(inout) :: drag  (ncols)
  326.                     !
  327.                     !     this is for coupling with closure turbulence model
  328.                     !
  329.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
  330.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
  331.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
  332.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
  333.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
  334.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
  335.                     REAL(KIND=r8),    INTENT(inout) :: gmu   (ncols,4)
  336.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
  337.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
  338.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
  339.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
  340.                     REAL(KIND=r8),    INTENT(inout) :: cosz  (ncols)
  341.                     REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
  342.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
  343.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
  344.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
  345.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
  346.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
  347.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
  348.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
  349.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
  350.                 
  351.                     INTEGER, INTENT(in   ) :: jdt
  352.                     INTEGER, INTENT(in   ) :: latitu
  353.                 
  354.                     REAL(KIND=r8)   , INTENT(INOUT) :: zlwup    (ncols)
  355.                     REAL(KIND=r8)   , INTENT(INOUT) :: salb     (ncols,2,2)
  356.                     REAL(KIND=r8)   , INTENT(INOUT) :: tgeff    (ncols)
  357.                     INTEGER         , INTENT(IN   ) :: nsx      (ncols)
  358.                     REAL(KIND=r8)   , INTENT(INOUT) :: tmtx     (nCols,kmax,3)
  359.                     REAL(KIND=r8)   , INTENT(INOUT) :: qmtx     (nCols,kmax,3)
  360.                     REAL(KIND=r8)   , INTENT(INOUT) :: umtx     (nCols,kmax,4)
  361.                     REAL(KIND=r8)   , INTENT(INOUT) :: gt       (nCols,kmax)
  362.                     REAL(KIND=r8)   , INTENT(INOUT) :: gq       (nCols,kmax)
  363.                     REAL(KIND=r8)   , INTENT(IN   ) :: gu       (nCols,kmax)
  364.                     REAL(KIND=r8)   , INTENT(IN   ) :: gv       (nCols,kmax)
  365.                     REAL(KIND=r8)   , INTENT(IN   ) :: gps      (nCols)
  366.                     INTEGER(KIND=i8), INTENT(IN   ) :: imask    (nCols)
  367.                     INTEGER         , INTENT(IN   ) :: ktm
  368.                     INTEGER         , INTENT(IN   ) :: initlz
  369.                     REAL(KIND=r8)   , INTENT(INOUT) :: tcm      (ncols)
  370.                     REAL(KIND=r8)   , INTENT(INOUT) :: tgm      (ncols)
  371.                     REAL(KIND=r8)   , INTENT(INOUT) :: tdm      (ncols)
  372.                     REAL(KIND=r8)   , INTENT(INOUT) :: wm       (ncols,3)
  373.                     REAL(KIND=r8)   , INTENT(INOUT) :: td0      (ncols)
  374.                     REAL(KIND=r8)   , INTENT(INOUT) :: tg0      (ncols)
  375.                     REAL(KIND=r8)   , INTENT(IN   ) :: zenith   (nCols)
  376.                     INTEGER         , INTENT(IN   ) :: kt
  377.                     CHARACTER(len=*), INTENT(IN   ) :: iswrad
  378.                     CHARACTER(len=*), INTENT(IN   ) :: ilwrad
  379.                 
  380.                     REAL(KIND=r8), INTENT(IN   ) :: beam_visb(nCols)
  381.                     REAL(KIND=r8), INTENT(IN   ) :: beam_visd(nCols)
  382.                     REAL(KIND=r8), INTENT(IN   ) :: beam_nirb(nCols)
  383.                     REAL(KIND=r8), INTENT(IN   ) :: beam_nird(nCols)
  384.                     REAL(KIND=r8), INTENT(IN   ) :: cos2     (nCols)
  385.                     REAL(KIND=r8), INTENT(IN   ) :: dlwbot   (nCols)
  386.                     REAL(KIND=r8), INTENT(INOUT) :: capacm   (ncols,2)
  387.                 
  388.                     REAL(KIND=r8), INTENT(IN   ) :: xvisb    (nCols)
  389.                     REAL(KIND=r8), INTENT(IN   ) :: xvisd    (nCols)
  390.                     REAL(KIND=r8), INTENT(IN   ) :: xnirb    (nCols)
  391.                     REAL(KIND=r8), INTENT(IN   ) :: xnird    (nCols)
  392.                     REAL(KIND=r8), INTENT(IN   ) :: ppli     (nCols)
  393.                     REAL(KIND=r8), INTENT(IN   ) :: ppci     (nCols)
  394.                     REAL(KIND=r8), INTENT(INOUT) :: tsea     (nCols)
  395.                     REAL(KIND=r8), INTENT(IN   ) :: ssib     (ncols)
  396.                     REAL(KIND=r8), INTENT(INOUT) :: w0       (ncols,3)
  397.                     REAL(KIND=r8), INTENT(INOUT) :: tc0      (ncols)
  398.                     REAL(KIND=r8), INTENT(INOUT) :: capac0   (ncols,2)
  399.                     INTEGER      , INTENT(IN   ) :: intg
  400.                 
  401.                     REAL(KIND=r8), INTENT(IN   ) :: slrad    (nCols)
  402.                     REAL(KIND=r8), INTENT(INOUT) :: tseam    (nCols)
  403.                     REAL(KIND=r8), INTENT(INOUT) :: tsurf    (nCols)
  404.                     REAL(KIND=r8), INTENT(IN   ) :: qsurf    (nCols)
  405.                 
  406.                     REAL(KIND=r8), INTENT(IN   ) :: colrad   (nCols)
  407.                     REAL(KIND=r8), INTENT(IN   ) :: sigki    (1)
  408.                     REAL(KIND=r8), INTENT(IN   ) :: delsig   (1)
  409.                     REAL(KIND=r8), INTENT(INOUT) :: sens     (nCols)
  410.                     REAL(KIND=r8), INTENT(INOUT) :: evap     (nCols)
  411.                     REAL(KIND=r8), INTENT(INOUT) :: umom     (nCols)
  412.                     REAL(KIND=r8), INTENT(INOUT) :: vmom     (nCols)
  413.                     REAL(KIND=r8), INTENT(INOUT) :: zorl     (nCols)
  414.                 
  415.                     REAL(KIND=r8), INTENT(INOUT) :: rmi      (nCols)
  416.                     REAL(KIND=r8), INTENT(INOUT) :: rhi      (nCols)
  417.                     REAL(KIND=r8), INTENT(INOUT) :: cond     (nCols)
  418.                     REAL(KIND=r8), INTENT(INOUT) :: stor     (nCols)
  419.                 
  420.                     REAL(KIND=r8), INTENT(INOUT) :: z0x      (nCols)
  421.                     REAL(KIND=r8), INTENT(INOUT) :: speedm   (nCols)
  422.                     REAL(KIND=r8), INTENT(INOUT) :: Ustarm   (nCols)
  423.                     REAL(KIND=r8), INTENT(INOUT) :: z0sea    (nCols)
  424.                     REAL(KIND=r8), INTENT(INOUT) :: rho      (nCols)
  425.                     REAL(KIND=r8), INTENT(INOUT) :: d        (ncols)
  426.                     REAL(KIND=r8), INTENT(INOUT) :: qsfc0    (ncols)
  427.                     REAL(KIND=r8), INTENT(INOUT) :: tsfc0    (ncols)
  428.                     REAL(KIND=r8), INTENT(INOUT) :: qsfcm    (ncols)
  429.                     REAL(KIND=r8), INTENT(INOUT) :: tsfcm    (ncols)
  430.                     REAL(KIND=r8), INTENT(INOUT) :: qsfc     (ncols)
  431.                     REAL(KIND=r8), INTENT(INOUT) :: tsfc     (ncols)
  432.                     INTEGER(KIND=i8)      , INTENT(IN   ) :: mskant   (ncols)
  433.                     
  434.                     REAL(KIND=r8) :: rstpar2 (ncols,icg,iwv)
  435.                     REAL(KIND=r8) :: zlt2    (ncols,icg)
  436.                     REAL(KIND=r8) :: green2  (ncols,icg)
  437.                     REAL(KIND=r8) :: chil2   (ncols,icg)
  438.                     REAL(KIND=r8) :: vcover  (ncols,icg)
  439.                     REAL(KIND=r8) :: rdc     (ncols)
  440.                     REAL(KIND=r8) :: rbc     (ncols)
  441.                     REAL(KIND=r8) :: z0      (ncols)
  442.                     REAL(KIND=r8) :: topt2   (ncols,icg)
  443.                     REAL(KIND=r8) :: tll2    (ncols,icg)
  444.                     REAL(KIND=r8) :: tu2     (ncols,icg)
  445.                     REAL(KIND=r8) :: defac2  (ncols,icg)
  446.                     REAL(KIND=r8) :: xsea    (nCols)
  447.                     REAL(KIND=r8) :: tmin    (ncols)
  448.                     REAL(KIND=r8) :: tmax    (ncols)
  449.                     REAL(KIND=r8) :: ph22    (ncols,icg)
  450.                     REAL(KIND=r8) :: ph12    (ncols,icg)
  451.                 
  452.                     LOGICAL       :: InitMod
  453.                     INTEGER :: ncount,i,j,itr,ind,nint,IntSib
  454.  1------------<     DO j=1,icg
  455.  1 Vr2--------<        DO i=1,nmax
  456.  1 Vr2                    vcover     (i,j)   =  vcover_gbl (i,latitu,j)
  457.  1 Vr2                    zlt2       (i,j)   =  zlt_gbl    (i,latitu,j)
  458.  1 Vr2                    green2     (i,j)   =  green_gbl  (i,latitu,j)
  459.  1 Vr2                    chil2      (i,j)   =  chil_gbl   (i,latitu,j)
  460.  1 Vr2                    topt2      (i,j)   =  topt_gbl   (i,latitu,j)
  461.  1 Vr2                    tll2       (i,j)   =  tll_gbl    (i,latitu,j)
  462.  1 Vr2                    tu2        (i,j)   =  tu_gbl     (i,latitu,j)
  463.  1 Vr2                    defac2     (i,j)   =  defac_gbl  (i,latitu,j)
  464.  1 Vr2                    ph12       (i,j)   =  ph1_gbl    (i,latitu,j)
  465.  1 Vr2                    ph22       (i,j)   =  ph2_gbl    (i,latitu,j)
  466.  1 Vr2                    rstpar2    (i,j,1) =  rstpar_gbl (i,latitu,j,1)
  467.  1 Vr2                    rstpar2    (i,j,2) =  rstpar_gbl (i,latitu,j,2)
  468.  1 Vr2                    rstpar2    (i,j,3) =  rstpar_gbl (i,latitu,j,3)
  469.  1 Vr2-------->        END DO
  470.  1------------>     END DO
  471.                 
  472.                     ncount=nmax
  473.                     !dir$ nodep
                                 ^     
ftn-790 ftn: WARNING SSIB_DRIVER, File = Sfc_SSiB.f90, Line = 473, Column = 11 
  Unknown or unsupported compiler directive or syntax error.

  474.  1------------<     DO i=1,nmax
  475.  1                        rbc        (i)     =  xbc   (itype(i),mon(i))
  476.  1                        rdc        (i)     =  xdc   (itype(i),mon(i))
  477.  1                        z0x        (i)     =  x0x   (itype(i),mon(i))
  478.  1                        d          (i)     =  xd    (itype(i),mon(i))
  479.  1------------>     END DO
  480.                 
  481.                     InitMod = (initlz >= 0 .AND. ktm == -1 .AND. kt == 0 .AND. nmax >= 1)
  482.                 
  483.                     IF(InitMod)THEN
  484.                        nint=2
  485.                        IntSib=5
  486.                     ELSE
  487.                        nint=1
  488.                        IntSib=1
  489.                     END IF
  490.                 
  491.                     IF(TRIM(iswrad).NE.'NON'.AND.TRIM(ilwrad).NE.'NON') THEN
  492.                        IF(InitMod)THEN
  493.                 
  494.  1------------<           DO ind=1,nint
  495.  1                           ncount=0
  496.  1 2----------<              DO i=1,nCols
  497.  1 2                            IF(imask(i).GE.1_i8) THEN
  498.  1 2                               ncount=ncount+1
  499.  1 2                               IF(ind.EQ.1) THEN
  500.  1 2                                  !
  501.  1 2                                  !     night
  502.  1 2                                  !
  503.  1 2                                  radn(ncount,1,1)=0.0e0_r8
  504.  1 2                                  radn(ncount,1,2)=0.0e0_r8
  505.  1 2                                  radn(ncount,2,1)=0.0e0_r8
  506.  1 2                                  radn(ncount,2,2)=0.0e0_r8
  507.  1 2                                  cosz(ncount)    =0.0e0_r8
  508.  1 2                               ELSE
  509.  1 2                                  !
  510.  1 2                                  !     noon
  511.  1 2                                  !
  512.  1 2                                  radn(ncount,1,1)=beam_visb (i)
  513.  1 2                                  radn(ncount,1,2)=beam_visd (i)
  514.  1 2                                  radn(ncount,2,1)=beam_nirb (i)
  515.  1 2                                  radn(ncount,2,2)=beam_nird (i)
  516.  1 2                                  cosz(ncount)    =cos2(i)
  517.  1 2                               END IF
  518.  1 2                               radn(ncount,3,1)=0.0e0_r8
  519.  1 2                               radn(ncount,3,2)=dlwbot(i)
  520.  1 2                               !
  521.  1 2                               !     precipitation
  522.  1 2                               !
  523.  1 2                               ppl (ncount)    =0.0e0_r8
  524.  1 2                               ppc (ncount)    =0.0e0_r8
  525.  1 2                            END IF
  526.  1 2---------->              END DO
  527.  1 2----------<              DO itr=1,IntSib
  528.  1 2                            CALL radalb( &
  529.  1 2                                 nmax              ,mon(1:nmax)         ,nmax                ,itype(1:nmax)       , &
  530.  1 2                                 tc(1:nmax)        ,tg(1:nmax)          ,capac(1:nmax,:)     , &
  531.  1 2                                 satcap(1:nmax,:)  ,extk(1:nmax,:,:,:)  ,radfac(1:nmax,:,:,:),closs(1:nmax)       , &
  532.  1 2                                 gloss(1:nmax)     ,thermk(1:nmax)      ,p1f(1:nmax)         ,p2f(1:nmax)         , &
  533.  1 2                                 zlwup(1:nmax)     ,salb(1:nmax,:,:)    ,tgeff(1:nmax)       ,cosz(1:nmax)        , &
  534.  1 2                                 nsx(1:nmax)       ,latitu  )
  535.  1 2            
  536.  1 2                            CALL fysiks(&
  537.  1 2                                 vcover(1:nmax,:)  ,z0x(1:nmax)         ,d(1:nmax)       ,rdc(1:nmax)     ,&
  538.  1 2                                 rbc(1:nmax)       ,z0(1:nmax)          ,jdt             ,latitu          ,&
  539.  1 2                                 bps(1:nmax)       ,psb(1:nmax)         ,dzm(1:nmax)     ,em(1:nmax)      ,&
  540.  1 2                                 gmt(1:nmax,:)     ,gmq(1:nmax,:)       ,gmu(1:nmax,:)   ,cu(1:nmax)      ,&
  541.  1 2                                 cuni(1:nmax)      ,ctni(1:nmax)        ,ustar(1:nmax)   ,cosz(1:nmax)    ,&
  542.  1 2                                 sinclt(1:nmax)    ,rhoair(1:nmax)      ,psy(1:nmax)     ,rcp(1:nmax)     ,&
  543.  1 2                                 wc(1:nmax)        ,wg(1:nmax)          ,fc(1:nmax)      ,fg(1:nmax)      ,&
  544.  1 2                                 hr(1:nmax)        ,ect(1:nmax)         ,eci(1:nmax)     ,egt(1:nmax)     ,&
  545.  1 2                                 egi(1:nmax)       ,egs(1:nmax)         ,ec(1:nmax)      ,eg(1:nmax)      ,&
  546.  1 2                                 hc(1:nmax)        ,hg(1:nmax)          ,ecidif(1:nmax)  ,egidif(1:nmax)  ,&
  547.  1 2                                 ecmass(1:nmax)    ,egmass(1:nmax)      ,etmass(1:nmax)  ,hflux(1:nmax)   ,&
  548.  1 2                                 chf(1:nmax)       ,shf(1:nmax)         ,fluxef(1:nmax)  ,roff(1:nmax)    ,&
  549.  1 2                                 drag(1:nmax)      ,ra(1:nmax)          ,rb(1:nmax)      ,rd(1:nmax)      ,&
  550.  1 2                                 rc(1:nmax)        ,rg(1:nmax)          ,tcta(1:nmax)    ,tgta(1:nmax)    ,&
  551.  1 2                                 ta(1:nmax)        ,ea(1:nmax)          ,etc(1:nmax)     ,etg(1:nmax)     ,&
  552.  1 2                                 btc(1:nmax)       ,btg(1:nmax)         ,u2(1:nmax)      ,radt(1:nmax,:)  ,&
  553.  1 2                                 par(1:nmax,:)     ,pd(1:nmax,:)        ,rst(1:nmax,:)   ,rsoil(1:nmax)   ,&
  554.  1 2                                 phroot(1:nmax,:)  ,hrr(1:nmax)         ,phsoil(1:nmax,:),cc(1:nmax)      ,&
  555.  1 2                                 cg(1:nmax)        ,satcap(1:nmax,:)    ,snow(1:nmax,:)  ,dtc(1:nmax)     ,&
  556.  1 2                                 dtg(1:nmax)       ,dtm(1:nmax)         ,dqm(1:nmax)     ,stm(1:nmax,:)   ,&
  557.  1 2                                 extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)   ,gloss(1:nmax)   ,&
  558.  1 2                                 thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)     ,tc(1:nmax)      ,&
  559.  1 2                                 tg(1:nmax)        ,td(1:nmax)          ,capac(1:nmax,:) ,w(1:nmax,:)     ,&
  560.  1 2                                 qm(1:nmax)        ,tm(1:nmax)          ,um(1:nmax)      ,vm(1:nmax)      ,&
  561.  1 2                                 psur(1:nmax)      ,ppc(1:nmax)         ,ppl(1:nmax)     ,radn(1:nmax,:,:),&
  562.  1 2                                 itype(1:nmax)     ,dtc3x               ,mon (1:nmax)    ,nmax            ,&
  563.  1 2                                 nmax              ,zlt2(1:nmax,:)      ,green2(1:nmax,:),chil2(1:nmax,:) ,&
  564.  1 2                                 rstpar2(1:nmax,:,:),topt2(1:nmax,:)    ,tll2(1:nmax,:)  ,tu2(1:nmax,:)   ,&
  565.  1 2                                 defac2(1:nmax,:)  ,ph12(1:nmax,:)      ,ph22(1:nmax,:)  )
  566.  1 2                            ncount=0
  567.  1 2 3--------<                 DO i=1,nCols
  568.  1 2 3                             IF(imask(i).GE.1_i8) THEN
  569.  1 2 3                                ncount=ncount+1
  570.  1 2 3                                tm (ncount  )=gt  (i,1)
  571.  1 2 3                                qm (ncount  )=gq  (i,1)
  572.  1 2 3                                gmt(ncount,1)=tmtx(i,1,1)
  573.  1 2 3                                gmt(ncount,2)=tmtx(i,1,2)
  574.  1 2 3                                gmt(ncount,3)=tmtx(i,1,3)
  575.  1 2 3                                gmq(ncount,1)=qmtx(i,1,1)
  576.  1 2 3                                gmq(ncount,2)=qmtx(i,1,2)
  577.  1 2 3                                gmq(ncount,3)=qmtx(i,1,3)
  578.  1 2 3                                gmu(ncount,1)=umtx(i,1,1)
  579.  1 2 3                                gmu(ncount,2)=umtx(i,1,2)
  580.  1 2 3                                gmu(ncount,3)=umtx(i,1,3)
  581.  1 2 3                                gmu(ncount,4)=umtx(i,1,4)
  582.  1 2 3                             END IF
  583.  1 2 3-------->                 END DO
  584.  1 2---------->              END DO
  585.  1 Vr2--------<              DO i=1,nmax
  586.  1 Vr2                          capac(i,1)=capacm(i,1)
  587.  1 Vr2                          capac(i,2)=capacm(i,2)
  588.  1 Vr2                          w    (i,1)=wm    (i,1)
  589.  1 Vr2                          w    (i,2)=wm    (i,2)
  590.  1 Vr2                          w    (i,3)=wm    (i,3)
  591.  1 Vr2 A-----<>                 td   (i)  =tdm   (i)
  592.  1 Vr2 A-----<>                 tc   (i)  =tcm   (i)
  593.  1 Vr2                          IF(ind.EQ.1) THEN
  594.  1 Vr2                             tmin (i) =tg (i)
  595.  1 Vr2                          ELSE
  596.  1 Vr2                             tmax (i) =tg (i)
  597.  1 Vr2                          END IF
  598.  1 Vr2                          tg   (i) =tgm(i)
  599.  1 Vr2-------->              END DO
  600.  1------------>           END DO
  601.  Vr4----------<           DO i=1,nmax
  602.  Vr4                         td   (i) =0.9_r8*0.5_r8*(tmax(i)+tmin(i))+0.1_r8*tdm(i)
  603.  Vr4                         tdm  (i) =td(i)
  604.  Vr4                         td0  (i) =td(i)
  605.  Vr4---------->           END DO
  606.                           !
  607.                           !     this is a start of equilibrium tg,tc comp.
  608.                           !
  609.                           ncount=0
  610.  1------------<           DO i=1,nCols
  611.  1                           IF(imask(i).GE.1_i8) THEN
  612.  1                              ncount=ncount+1
  613.  1                              cosz(ncount)    =zenith(i)
  614.  1                           END IF
  615.  1------------>           END DO
  616.  1------------<           DO i=1,nmax
  617.  1                           IF(cosz(i).LT.0.0e0_r8) THEN
  618.  1                              tgm  (i)  =tmin(i)
  619.  1                              tg0  (i)  =tmin(i)
  620.  1                           END IF
  621.  1------------>           END DO
  622.                           CALL radalb ( &
  623.                                nmax              ,mon(1:nmax)         ,nmax                ,itype(1:nmax)       , &
  624.                                tc(1:nmax)          ,tg(1:nmax)          ,capac(1:nmax,:)     , &
  625.                                satcap(1:nmax,:)  ,extk(1:nmax,:,:,:)  ,radfac(1:nmax,:,:,:),closs(1:nmax)       , &
  626.                                gloss(1:nmax)     ,thermk(1:nmax)      ,p1f(1:nmax)         ,p2f(1:nmax)         , &
  627.                                zlwup(1:nmax)     ,salb(1:nmax,:,:)    ,tgeff(1:nmax)       ,cosz(1:nmax)        , &
  628.                                nsx(1:nmax)       ,latitu    )
  629.                        END IF
  630.                     END IF
  631.                     IF(nmax.GE.1) THEN
  632.                        ncount=0
  633.  1------------<        DO i=1,nCols
  634.  1                        IF(imask(i).GE.1_i8) THEN
  635.  1                           ncount=ncount+1
  636.  1                           !
  637.  1                           !     this is for radiation interpolation
  638.  1                           !
  639.  1                           IF(cosz(ncount).GE.0.01746e0_r8 ) THEN
  640.  1                              radn(ncount,1,1)=xvisb (i)
  641.  1                              radn(ncount,1,2)=xvisd (i)
  642.  1                              radn(ncount,2,1)=xnirb (i)
  643.  1                              radn(ncount,2,2)=xnird (i)
  644.  1                           ELSE
  645.  1                              radn(ncount,1,1)=0.0e0_r8
  646.  1                              radn(ncount,1,2)=0.0e0_r8
  647.  1                              radn(ncount,2,1)=0.0e0_r8
  648.  1                              radn(ncount,2,2)=0.0e0_r8
  649.  1                           END IF
  650.  1                           radn(ncount,3,1)=0.0e0_r8
  651.  1                           radn(ncount,3,2)=dlwbot(i)
  652.  1                           !
  653.  1                           !     precipitation
  654.  1                           !
  655.  1                           ppl (ncount)    =ppli  (i)
  656.  1                           ppc (ncount)    =ppci  (i)
  657.  1                        END IF
  658.  1------------>        END DO
  659.                        CALL fysiks(&
  660.                             vcover(1:nmax,:)  ,z0x(1:nmax)         ,d(1:nmax)       ,rdc(1:nmax)     ,&
  661.                             rbc(1:nmax)       ,z0(1:nmax)          ,jdt             ,latitu          ,&
  662.                             bps(1:nmax)       ,psb(1:nmax)         ,dzm(1:nmax)     ,em(1:nmax)      ,&
  663.                             gmt(1:nmax,:)     ,gmq(1:nmax,:)       ,gmu(1:nmax,:)   ,cu(1:nmax)      ,&
  664.                             cuni(1:nmax)      ,ctni(1:nmax)        ,ustar(1:nmax)   ,cosz(1:nmax)    ,&
  665.                             sinclt(1:nmax)    ,rhoair(1:nmax)      ,psy(1:nmax)     ,rcp(1:nmax)     ,&
  666.                             wc(1:nmax)        ,wg(1:nmax)          ,fc(1:nmax)      ,fg(1:nmax)      ,&
  667.                             hr(1:nmax)        ,ect(1:nmax)         ,eci(1:nmax)     ,egt(1:nmax)     ,&
  668.                             egi(1:nmax)       ,egs(1:nmax)         ,ec(1:nmax)      ,eg(1:nmax)      ,&
  669.                             hc(1:nmax)        ,hg(1:nmax)          ,ecidif(1:nmax)  ,egidif(1:nmax)  ,&
  670.                             ecmass(1:nmax)    ,egmass(1:nmax)      ,etmass(1:nmax)  ,hflux(1:nmax)   ,&
  671.                             chf(1:nmax)       ,shf(1:nmax)         ,fluxef(1:nmax)  ,roff(1:nmax)    ,&
  672.                             drag(1:nmax)      ,ra(1:nmax)          ,rb(1:nmax)      ,rd(1:nmax)      ,&
  673.                             rc(1:nmax)        ,rg(1:nmax)          ,tcta(1:nmax)    ,tgta(1:nmax)    ,&
  674.                             ta(1:nmax)        ,ea(1:nmax)          ,etc(1:nmax)     ,etg(1:nmax)     ,&
  675.                             btc(1:nmax)       ,btg(1:nmax)         ,u2(1:nmax)      ,radt(1:nmax,:)  ,&
  676.                             par(1:nmax,:)     ,pd(1:nmax,:)        ,rst(1:nmax,:)   ,rsoil(1:nmax)   ,&
  677.                             phroot(1:nmax,:)  ,hrr(1:nmax)         ,phsoil(1:nmax,:),cc(1:nmax)      ,&
  678.                             cg(1:nmax)        ,satcap(1:nmax,:)    ,snow(1:nmax,:)  ,dtc(1:nmax)     ,&
  679.                             dtg(1:nmax)       ,dtm(1:nmax)         ,dqm(1:nmax)     ,stm(1:nmax,:)   ,&
  680.                             extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)   ,gloss(1:nmax)   ,&
  681.                             thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)     ,tc(1:nmax)      ,&
  682.                             tg(1:nmax)        ,td(1:nmax)          ,capac(1:nmax,:) ,w(1:nmax,:)     ,&
  683.                             qm(1:nmax)        ,tm(1:nmax)          ,um(1:nmax)      ,vm(1:nmax)      ,&
  684.                             psur(1:nmax)      ,ppc(1:nmax)         ,ppl(1:nmax)     ,radn(1:nmax,:,:),&
  685.                             itype(1:nmax)     ,dtc3x               ,mon (1:nmax)    ,nmax            ,&
  686.                             nmax              ,zlt2(1:nmax,:)      ,green2(1:nmax,:),chil2(1:nmax,:) ,&
  687.                             rstpar2(1:nmax,:,:),topt2(1:nmax,:)    ,tll2(1:nmax,:)  ,tu2(1:nmax,:)   ,&
  688.                             defac2(1:nmax,:)  ,ph12(1:nmax,:)      ,ph22(1:nmax,:)  )
  689.                     END IF
  690.                     !
  691.                     !     sib time integaration and time filter
  692.                     !
  693.  Vr4----------<     DO i=1,nmax
  694.  Vr4                   !tm(i)=ABS(ta(i))/bps(i)
  695.  Vr4                   !qm(i)=0.622e0_r8*EXP(21.65605e0_r8 -5418.0e0_r8 /tm(i))/gps(i)
  696.  Vr4                   qm(i)=MAX(1.0e-12_r8,qm(i))
  697.  Vr4---------->     END DO
  698.                     CALL sextrp ( &
  699.                          td    ,tg    ,tc    ,w     ,capac ,td0   ,tg0   ,tc0   ,w0    , &
  700.                          capac0,tdm   ,tgm   ,tcm   ,wm    ,capacm,istrt ,ncols ,nmax  , &
  701.                          epsflt,intg  ,latitu,tm0    ,qm0    ,tm    ,qm    ,tmm    ,qmm    )
  702.                     !
  703.                     !     fix soil moisture at selected locations
  704.                     !
  705.  1------------<     DO i=1,nmax
  706.  1                     IF(ssib(i).GT.0.0_r8)THEN
  707.  1                        qm(i)=MAX(1.0e-12_r8,qm(i))
  708.  1                        w0(i,1)=ssib(i)
  709.  1                        w0(i,2)=ssib(i)
  710.  1                        w0(i,3)=ssib(i)
  711.  1                        wm(i,1)=ssib(i)
  712.  1                        wm(i,2)=ssib(i)
  713.  1                        wm(i,3)=ssib(i)
  714.  1                     END IF
  715.  1------------>     END DO
  716.                     ncount=0
  717.  1------------<     DO i=1,nCols
  718.  1                     IF(imask(i).GE.1_i8) THEN
  719.  1                        ncount=ncount+1
  720.  1                        tmtx(i,1,3)=gmt(ncount,3)
  721.  1                        qmtx(i,1,3)=gmq(ncount,3)
  722.  1                        umtx(i,1,3)=gmu(ncount,3)
  723.  1                        umtx(i,1,4)=gmu(ncount,4)
  724.  1                        tsea(i)    =tgeff(ncount)
  725.  1                        z0x(ncount)=z0(ncount)
  726.  1                     END IF
  727.  1------------>     END DO
  728.                     !
  729.                     !     sea or sea ice
  730.                     ! gu gv gps colrad sigki delsig sens evap umom vmom rmi rhi cond stor zorl rnet ztn2 THETA_2M VELC_2m MIXQ_2M
  731.                     ! THETA_10M VELC_10M MIXQ_10M
  732.                     ! including case 1D physics
  733.  1------------<     DO i=1,nCols
  734.  1                     IF(mskant(i) == 1_i8)THEN
  735.  1                        xsea (i) = tseam(i)
  736.  1                        tsfc (i) = tsfcm(i)
  737.  1                        qsfc (i) = qsfcm(i)
  738.  1                     END IF   
  739.  1------------>     END DO
  740.                 
  741.                     CALL seasfc( &
  742.                             tmtx  (1:nCols,:,:)  ,umtx  (1:nCols,:,:),qmtx  (1:nCols,:,:)  ,&
  743.                             kmax                 ,kmax               ,slrad (1:nCols)      ,&
  744.                             tsurf (1:nCols)      ,qsurf (1:nCols)    ,gu    (1:nCols,1)    ,&
  745.                             gv    (1:nCols,1)    ,gt    (1:nCols,1)  ,gq    (1:nCols,1)    ,&
  746.                             gps   (1:nCols)      ,xsea  (1:nCols)    ,dtc3x                ,&
  747.                             SIN(colrad(1:nCols)) ,sigki (1)          ,delsig(1)            ,&
  748.                             sens  (1:nCols)      ,evap  (1:nCols)    ,umom  (1:nCols)      ,&
  749.                             vmom  (1:nCols)      ,rmi   (1:nCols)    ,rhi   (1:nCols)      ,&
  750.                             cond  (1:nCols)      ,stor  (1:nCols)    ,zorl  (1:nCols)      ,&
  751.                             nCols              ,speedm(1:nCols)      ,&
  752.                             Ustarm(1:nCols)      ,z0sea (1:nCols)    ,rho   (1:nCols)      ,&
  753.                 	    qsfc  (1:nCols)      ,tsfc  (1:nCols)    ,mskant(1:nCols)       )
  754.                 
  755.  1------------<     DO i=1,nCols
  756.  1                     IF(mskant(i) == 1_i8 .and. tsea(i).LE.0.0e0_r8.AND.tsurf(i).LT.tice+0.01e0_r8 ) THEN
  757.  1                  	  IF(intg.EQ.2) THEN
  758.  1                  	     IF(istrt.EQ.0) THEN
  759.  1                  		tseam(i)=filta*tsea (i) + epsflt*(tseam(i)+xsea(i))
  760.  1                  		qsfc (i)=MAX(1.0e-12_r8,qsfc(i))
  761.  1                  		tsfcm(i)=filta*tsfc0 (i) + epsflt*(tsfcm(i)+tsfc(i))
  762.  1                  		qsfcm(i)=filta*qsfc0 (i) + epsflt*(qsfcm(i)+qsfc(i))
  763.  1                  	     END IF
  764.  1                  	     tsea (i) = xsea(i)
  765.  1                  	     qsfc (i) = MAX(1.0e-12_r8,qsfc(i))
  766.  1                  	     tsfc0(i) = tsfc(i)
  767.  1                  	     qsfc0(i) = qsfc(i)
  768.  1                  	  ELSE
  769.  1                  	     tsea (i) = xsea(i)
  770.  1                  	     tseam(i) = xsea(i)
  771.  1                  	     qsfc (i) = MAX(1.0e-12_r8,qsfc(i))
  772.  1                  	     tsfc0(i) = tsfc(i)
  773.  1                  	     qsfc0(i) = qsfc(i)
  774.  1                  	     tsfcm(i) = tsfc(i)
  775.  1                  	     qsfcm(i) = qsfc(i)
  776.  1                  	  END IF
  777.  1                     END IF
  778.  1                     IF(mskant(i) == 1_i8 .and. tsea(i).LT.0.0e0_r8.AND.tsurf(i).GE.tice+0.01e0_r8) THEN
  779.  1                  	  tseam(i) = tsea (i)
  780.  1                  	  tsfcm(i) = tsfc0(i)
  781.  1                  	  qsfcm(i) = qsfc0(i)
  782.  1                     END IF
  783.  1------------>     END DO
  784.                 
  785.                   END SUBROUTINE SSiB_Driver
  786.                 
  787.                   SUBROUTINE CopySurfaceData(itype,mon,colrad2,xday,idatec,nsx,nCols,nmax,latitu)
  788.                     INTEGER      , INTENT(IN   ) :: nCols
  789.                     INTEGER      , INTENT(IN   ) :: nmax
  790.                     INTEGER      , INTENT(IN   ) :: latitu
  791.                     INTEGER      , INTENT(in )   :: itype   (nCols)
  792.                     INTEGER      , INTENT(in )   :: mon     (nCols)
  793.                     REAL(KIND=r8), INTENT(in )   :: colrad2 (nCols)
  794.                     REAL(KIND=r8), INTENT(in )   :: xday
  795.                     INTEGER      , INTENT(in )   :: idatec(4)
  796.                     INTEGER      , INTENT(inout) :: nsx     (nCols)
  797.                     INTEGER :: i,j
  798.  V-----------<>     xcover = xcover_fixed
  799.  V-----------<>     zlt    = zlt_fixed
  800.  V-----------<>     green  = green_fixed
  801.  V-----------<>     ph2    = ph2_fixed
  802.  V-----------<>     ph1    = ph1_fixed
  803.  V-----------<>     defac  = defac_fixed
  804.  V-----------<>     tu     = tu_fixed
  805.  V-----------<>     tll    = tll_fixed
  806.  V-----------<>     topt   = topt_fixed
  807.  V-----------<>     rstpar = rstpar_fixed
  808.  V-----------<>     chil   = chil_fixed
  809.  1------------<     DO j=1,icg
  810.  1 2----------<        DO i=1,nmax
  811.  1 2                      vcover_gbl (i,latitu,j) =  xcover_fixed(itype(i),mon(i),j)
  812.  1 2                      zlt_gbl    (i,latitu,j) =  zlt_fixed   (itype(i),mon(i),j)
  813.  1 2                      green_gbl  (i,latitu,j) =  green_fixed (itype(i),mon(i),j)
  814.  1 2                      chil_gbl   (i,latitu,j) =  chil_fixed  (itype(i),j)
  815.  1 2                      topt_gbl   (i,latitu,j) =  topt_fixed  (itype(i),j)
  816.  1 2                      tll_gbl    (i,latitu,j) =  tll_fixed   (itype(i),j)
  817.  1 2                      tu_gbl     (i,latitu,j) =  tu_fixed    (itype(i),j)
  818.  1 2                      defac_gbl  (i,latitu,j) =  defac_fixed (itype(i),j)
  819.  1 2                      ph1_gbl    (i,latitu,j) =  ph1_fixed   (itype(i),j)
  820.  1 2                      ph2_gbl    (i,latitu,j) =  ph2_fixed   (itype(i),j)
  821.  1 2                      rstpar_gbl (i,latitu,j,1)= rstpar_fixed(itype(i),j,1)
  822.  1 2                      rstpar_gbl (i,latitu,j,2)= rstpar_fixed(itype(i),j,2)
  823.  1 2                      rstpar_gbl (i,latitu,j,3)= rstpar_fixed(itype(i),j,3)
  824.  1 2---------->        END DO
  825.  1------------>     END DO
  826.                     CALL wheat (latitu,itype ,nmax  ,colrad2 ,mon ,xday   ,yrl   , &
  827.                          idatec,monl  ,nsx    )
  828.                 
  829.                   END SUBROUTINE CopySurfaceData
  830.                   ! airmod :alteration of aerodynamic transfer properties in case of snow
  831.                   !         accumulation.
  832.                   !
  833.                 
  834.                 
  835.                 
  836.                   SUBROUTINE airmod (tg, capac, z0x, d, rdc, rbc, itype, &
  837.                        mon, nmax, ncols)
  838.                     !
  839.                     !
  840.                     !-----------------------------------------------------------------------
  841.                     !       input parameters
  842.                     !-----------------------------------------------------------------------
  843.                     !   tg............ground temperature
  844.                     !   tf............freezing point
  845.                     !   z2............height of canopy top
  846.                     !   capac(cg).....liquid water stored on canopy/ground cover foliage
  847.                     !                                                            (m)
  848.                     !   d.............displacement height                        (m)
  849.                     !   z0x...........roughness length                           (m)
  850.                     !   rdc...........constant related to aerodynamic resistance
  851.                     !                 between ground and canopy air space
  852.                     !   rbc...........constant related to bulk boundary layer
  853.                     !                 resistance
  854.                     !-----------------------------------------------------------------------
  855.                     !      output parameters
  856.                     !-----------------------------------------------------------------------
  857.                     !   d.............displacement height                        (m)
  858.                     !   z0x...........roughness length                           (m)
  859.                     !   rdc...........constant related to aerodynamic resistance
  860.                     !                 between ground and canopy air space
  861.                     !   rbc...........constant related to bulk boundary layer
  862.                     !                 resistance
  863.                     !-----------------------------------------------------------------------
  864.                     !=======================================================================
  865.                     !   ncols.........Numero de ponto por faixa de latitude
  866.                     !   ityp..........Numero do tipo de solo      13
  867.                     !   imon..........Numero maximo de meses no ano (12)
  868.                     !   mon...........Numero do mes do ano (1-12)
  869.                     !   nmax
  870.                     !   xd............Deslocamento do plano zero (m)
  871.                     !   itype.........Classe de textura do solo
  872.                     !=======================================================================
  873.                     INTEGER, INTENT(in   ) :: ncols
  874.                     INTEGER, INTENT(in   ) :: mon(ncols)
  875.                     INTEGER, INTENT(in   ) :: nmax
  876.                     !
  877.                     !     vegetation and soil parameters
  878.                     !
  879.                     INTEGER, INTENT(in   ) :: itype (ncols)
  880.                     REAL(KIND=r8),    INTENT(inout) :: z0x   (ncols)
  881.                     REAL(KIND=r8),    INTENT(inout) :: d     (ncols)
  882.                     REAL(KIND=r8),    INTENT(inout) :: rdc   (ncols)
  883.                     REAL(KIND=r8),    INTENT(inout) :: rbc   (ncols)
  884.                     !
  885.                     !     prognostic variables
  886.                     !
  887.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
  888.                     REAL(KIND=r8),    INTENT(in   ) :: capac(ncols,2)
  889.                     !
  890.                     REAL(KIND=r8)    :: sdep(ncols)
  891.                     REAL(KIND=r8)    :: xz  (ncols)
  892.                     !
  893.                     INTEGER :: i
  894.                     INTEGER :: ntyp
  895.  1------------<     DO i = 1, nmax
  896.  1                     IF( (tg(i) <= tf) .AND. (capac(i,2) >= 0.001_r8) )THEN
  897.  1              !          ntyp=itype(i)
  898.  1                        xz  (i)=z2(itype(i),mon(i))
  899.  1                        sdep(i)=capac(i,2)*5.0_r8
  900.  1                        sdep(i)=MIN( sdep(i) , xz(i)*0.95_r8 )
  901.  1                        d  (i)=xz (i)-( xz(i)- d(i) )/xz(i)*(xz(i)-sdep(i))
  902.  1                        z0x(i)=z0x(i)/( xz(i)-xd(itype(i),mon(i)))*(xz(i)-d   (i))
  903.  1                        rdc(i)=rdc(i)*( xz(i)-sdep(i) )/xz(i)
  904.  1                        rbc(i)=rbc(i)*xz(i)/( xz(i)-sdep(i) )
  905.  1                     END IF
  906.  1------------>     END DO
  907.                   END SUBROUTINE airmod
ftn-5002 ftn: NOTE File = Sfc_SSiB.f90, Line = 907 
  Local variable "NTYP" is declared but neither defined nor used.

  908.                 
  909.                 
  910.                 
  911.                 
  912.                 
  913.                   SUBROUTINE temres(&
  914.                        bps   ,psb   ,em    ,gmt   ,gmq   ,psy   ,rcp   ,wc    ,wg    , &
  915.                        fc    ,fg    ,hr    ,hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm , &
  916.                        egdtg ,egdtc ,egdqm ,ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm, &
  917.                        ect   ,eci   ,egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    , &
  918.                        ecidif,egidif,ra    ,rb    ,rd    ,rc    ,rg    ,ta    ,ea    , &
  919.                        etc   ,etg   ,btc   ,btg   ,radt  ,rst   ,rsoil ,hrr   ,cc    , &
  920.                        cg    ,satcap,dtc   ,dtg   ,dtm   ,dqm   ,thermk,tc    ,tg    , &
  921.                        td    ,capac ,qm    ,tm    ,psur  ,dtc3x , &
  922.                        nmax  ,vcover,ncols )
  923.                     !
  924.                     !-----------------------------------------------------------------------
  925.                     ! temres :performs temperature tendency equations with interception loss.
  926.                     !-----------------------------------------------------------------------
  927.                     !     ncols.......Numero de ponto por faixa de latitude
  928.                     !     ityp........numero das classes de solo 13
  929.                     !     imon........Numero maximo de meses no ano (12)
  930.                     !     icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
  931.                     !     pie.........Constante Pi=3.1415926e0
  932.                     !     stefan .....Constante de Stefan Boltzmann
  933.                     !     cp..........specific heat of air (j/kg/k)
  934.                     !     hl..........heat of evaporation of water   (j/kg)
  935.                     !     grav........gravity constant      (m/s**2)
  936.                     !     tf..........Temperatura de congelamento (K)
  937.                     !     epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
  938.                     !                 de agua e do ar seco
  939.                     !     dtc3x.......time increment dt
  940.                     !     nmax........
  941.                     !     xcover......Fracao de cobertura vegetal icg=1 topo
  942.                     !     xcover......Fracao de cobertura vegetal icg=2 base
  943.                     !     vcover......Fracao de cobertura vegetal icg=1 topo
  944.                     !     vcover......Fracao de cobertura vegetal icg=2 topo
  945.                     !     qm..........specific humidity of reference (fourier)
  946.                     !     tm..........Temperature of reference (fourier)
  947.                     !     psur........surface pressure in mb
  948.                     !     tc..........Temperatura da copa "dossel" canopy leaf temperature(K)
  949.                     !     tg..........Temperatura da superficie do solo ground temperature (K)
  950.                     !     td .........Temperatura do solo profundo (K)
  951.                     !     capac(iv)...Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
  952.                     !     capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
  953.                     !     ra..........Resistencia Aerodinamica (s/m)
  954.                     !     rb..........bulk boundary layer resistance             (s/m)
  955.                     !     rd..........aerodynamic resistance between ground
  956.                     !                 and canopy air space                       (s/m)
  957.                     !     rc..........Resistencia do topo da copa (s/m)
  958.                     !     rg..........Resistencia da base da copa (s/m)
  959.                     !     ta..........Temperatura no nivel de fonte de calor do dossel (K)
  960.                     !     ea..........Pressao de vapor
  961.                     !     etc.........Pressure of vapor at top of the copa
  962.                     !     etg.........Pressao de vapor no base da copa
  963.                     !     btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
  964.                     !     btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
  965.                     !     radt........net heat received by canopy/ground vegetation
  966.                     !     rst.........Resisttencia Estomatica "Stomatal resistence" (s/m)
  967.                     !     rsoil ......Resistencia do solo (s/m)
  968.                     !     hrr.........rel. humidity in top layer
  969.                     !     cc..........heat capacity of the canopy
  970.                     !     cg..........heat capacity of the ground
  971.                     !     satcap......saturation liquid water capacity         (m)
  972.                     !     dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
  973.                     !     dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
  974.                     !     dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
  975.                     !     dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
  976.                     !     thermk......canopy emissivity
  977.                     !     ect.........Transpiracao(J/m*m)
  978.                     !     eci.........Evaporacao da agua interceptada (J/m*m)
  979.                     !     egt.........Transpiracao na base da copa (J/m*m)
  980.                     !     egi.........Evaporacao da neve (J/m*m)
  981.                     !     egs.........Evaporacao do solo arido (J/m*m)
  982.                     !     ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
  983.                     !                 topo da copa   ec   (i)=eci(i)+ect(i)
  984.                     !     eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
  985.                     !                 +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
  986.                     !     hc..........total sensible heat lost of top from the veggies.
  987.                     !     hg..........total sensible heat lost of base from the veggies.
  988.                     !     ecidif......check if interception loss term has exceeded canopy storage
  989.                     !                 ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hl3 )
  990.                     !     egidif......check if interception loss term has exceeded canopy storage
  991.                     !                 ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hl3 )
  992.                     !     hgdtg ......n.b. fluxes expressed in joules m-2
  993.                     !     hgdtc.......n.b. fluxes expressed in joules m-2
  994.                     !     hgdtm.......n.b. fluxes expressed in joules m-2
  995.                     !     hcdtg.......n.b. fluxes expressed in joules m-2
  996.                     !     hcdtc.......n.b. fluxes expressed in joules m-2
  997.                     !     hcdtm.......n.b. fluxes expressed in joules m-2
  998.                     !     egdtg.......partial derivative calculation for latent heat
  999.                     !     egdtc.......partial derivative calculation for latent heat
 1000.                     !     egdqm.......partial derivative calculation for latent heat
 1001.                     !     ecdtg ......partial derivative calculation for latent heat
 1002.                     !     ecdtc ......partial derivative calculation for latent heat
 1003.                     !     ecdqm.......partial derivative calculation for latent heat
 1004.                     !     deadtg......
 1005.                     !     deadtc......
 1006.                     !     deadqm......
 1007.                     !     bps.........
 1008.                     !     psb.........
 1009.                     !     em..........Pressao de vapor da agua
 1010.                     !     gmt.........
 1011.                     !     gmq.........specific humidity of reference (fourier)
 1012.                     !     psy.........(cp/(hl*epsfac))*psur(i)
 1013.                     !     rcp.........densidade do ar vezes o calor especifico do ar
 1014.                     !     wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 1015.                     !                 indice de area foliar no topo da copa
 1016.                     !     wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 1017.                     !                 indice de area foliar na base da copa
 1018.                     !     fc..........Condicao de oravalho 0 ou 1 na topo da copa
 1019.                     !     fg..........Condicao de oravalho 0 ou 1 na base da copa
 1020.                     !     hr..........rel. humidity in top layer
 1021.                     !-----------------------------------------------------------------------
 1022.                 
 1023.                     INTEGER, INTENT(in   ) :: ncols
 1024.                 
 1025.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 1026.                     INTEGER, INTENT(in   ) :: nmax
 1027.                     !
 1028.                     !     vegetation and soil parameters
 1029.                     !
 1030.                     REAL(KIND=r8),    INTENT(in) :: vcover(ncols,icg)
 1031.                     !
 1032.                     !     the size of working area is ncols*187
 1033.                     !     atmospheric parameters as boudary values for sib
 1034.                     !
 1035.                     REAL(KIND=r8), INTENT(in   ) :: qm  (ncols)
 1036.                     REAL(KIND=r8), INTENT(in   ) :: tm  (ncols)
 1037.                     REAL(KIND=r8), INTENT(in   ) :: psur(ncols)
 1038.                     !
 1039.                     !     prognostic variables
 1040.                     !
 1041.                     REAL(KIND=r8), INTENT(in   ) :: tc   (ncols)
 1042.                     REAL(KIND=r8), INTENT(in   ) :: tg   (ncols)
 1043.                     REAL(KIND=r8), INTENT(in   ) :: td   (ncols)
 1044.                     REAL(KIND=r8), INTENT(in   ) :: capac(ncols,2)
 1045.                     !
 1046.                     !     variables calculated from above and ambient conditions
 1047.                     !
 1048.                     REAL(KIND=r8), INTENT(in   ) :: ra    (ncols)
 1049.                     REAL(KIND=r8), INTENT(in   ) :: rb    (ncols)
 1050.                     REAL(KIND=r8), INTENT(in   ) :: rd    (ncols)
 1051.                     REAL(KIND=r8), INTENT(inout  ) :: rc    (ncols)
 1052.                     REAL(KIND=r8), INTENT(inout  ) :: rg    (ncols)
 1053.                     REAL(KIND=r8), INTENT(inout  ) :: ta    (ncols)
 1054.                     REAL(KIND=r8), INTENT(inout  ) :: ea    (ncols)
 1055.                     REAL(KIND=r8), INTENT(in   ) :: etc   (ncols)
 1056.                     REAL(KIND=r8), INTENT(in   ) :: etg   (ncols)
 1057.                     REAL(KIND=r8), INTENT(in   ) :: btc   (ncols)
 1058.                     REAL(KIND=r8), INTENT(in   ) :: btg   (ncols)
 1059.                     REAL(KIND=r8), INTENT(inout) :: radt  (ncols,icg)
 1060.                     REAL(KIND=r8), INTENT(inout) :: rst   (ncols,icg)
 1061.                     REAL(KIND=r8), INTENT(in   ) :: rsoil (ncols)
 1062.                     REAL(KIND=r8), INTENT(in   ) :: hrr   (ncols)
 1063.                     REAL(KIND=r8), INTENT(in   ) :: cc    (ncols)
 1064.                     REAL(KIND=r8), INTENT(in   ) :: cg    (ncols)
 1065.                     REAL(KIND=r8), INTENT(in   ) :: satcap(ncols,icg)
 1066.                     REAL(KIND=r8), INTENT(inout  ) :: dtc   (ncols)
 1067.                     REAL(KIND=r8), INTENT(inout  ) :: dtg   (ncols)
 1068.                     REAL(KIND=r8), INTENT(inout  ) :: dtm   (ncols)
 1069.                     REAL(KIND=r8), INTENT(inout  ) :: dqm   (ncols)
 1070.                     REAL(KIND=r8), INTENT(in   ) :: thermk(ncols)
 1071.                     !
 1072.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 1073.                     !
 1074.                     REAL(KIND=r8), INTENT(inout  ) :: ect   (ncols)
 1075.                     REAL(KIND=r8), INTENT(inout  ) :: eci   (ncols)
 1076.                     REAL(KIND=r8), INTENT(inout  ) :: egt   (ncols)
 1077.                     REAL(KIND=r8), INTENT(inout  ) :: egi   (ncols)
 1078.                     REAL(KIND=r8), INTENT(inout  ) :: egs   (ncols)
 1079.                     REAL(KIND=r8), INTENT(inout  ) :: ec    (ncols)
 1080.                     REAL(KIND=r8), INTENT(inout  ) :: eg    (ncols)
 1081.                     REAL(KIND=r8), INTENT(inout  ) :: hc    (ncols)
 1082.                     REAL(KIND=r8), INTENT(inout  ) :: hg    (ncols)
 1083.                     REAL(KIND=r8), INTENT(inout  ) :: ecidif(ncols)
 1084.                     REAL(KIND=r8), INTENT(inout  ) :: egidif(ncols)
 1085.                     !
 1086.                     !     derivatives
 1087.                     !
 1088.                     REAL(KIND=r8), INTENT(inout  ) :: hgdtg (ncols)
 1089.                     REAL(KIND=r8), INTENT(inout  ) :: hgdtc (ncols)
 1090.                     REAL(KIND=r8), INTENT(inout  ) :: hgdtm (ncols)
 1091.                     REAL(KIND=r8), INTENT(inout  ) :: hcdtg (ncols)
 1092.                     REAL(KIND=r8), INTENT(inout  ) :: hcdtc (ncols)
 1093.                     REAL(KIND=r8), INTENT(inout  ) :: hcdtm (ncols)
 1094.                     REAL(KIND=r8), INTENT(inout  ) :: egdtg (ncols)
 1095.                     REAL(KIND=r8), INTENT(inout  ) :: egdtc (ncols)
 1096.                     REAL(KIND=r8), INTENT(inout  ) :: egdqm (ncols)
 1097.                     REAL(KIND=r8), INTENT(inout  ) :: ecdtg (ncols)
 1098.                     REAL(KIND=r8), INTENT(inout  ) :: ecdtc (ncols)
 1099.                     REAL(KIND=r8), INTENT(inout  ) :: ecdqm (ncols)
 1100.                     REAL(KIND=r8), INTENT(inout  ) :: deadtg(ncols)
 1101.                     REAL(KIND=r8), INTENT(inout  ) :: deadtc(ncols)
 1102.                     REAL(KIND=r8), INTENT(inout  ) :: deadqm(ncols)
 1103.                     !
 1104.                     !     this is for coupling with closure turbulence model
 1105.                     !
 1106.                     REAL(KIND=r8), INTENT(in   ) :: bps   (ncols)
 1107.                     REAL(KIND=r8), INTENT(in   ) :: psb   (ncols)
 1108.                     REAL(KIND=r8), INTENT(in   ) :: em    (ncols)
 1109.                     REAL(KIND=r8), INTENT(in   ) :: gmt   (ncols,3)
 1110.                     REAL(KIND=r8), INTENT(in   ) :: gmq   (ncols,3)
 1111.                     REAL(KIND=r8), INTENT(in   ) :: psy   (ncols)
 1112.                     REAL(KIND=r8), INTENT(in   ) :: rcp   (ncols)
 1113.                     REAL(KIND=r8), INTENT(inout  ) :: wc    (ncols)
 1114.                     REAL(KIND=r8), INTENT(inout  ) :: wg    (ncols)
 1115.                     REAL(KIND=r8), INTENT(in   ) :: fc    (ncols)
 1116.                     REAL(KIND=r8), INTENT(in   ) :: fg    (ncols)
 1117.                     REAL(KIND=r8), INTENT(inout  ) :: hr    (ncols)
 1118.                 
 1119.                 
 1120.                     REAL(KIND=r8) :: vcover2(ncols,icg)
 1121.                 
 1122.                     REAL(KIND=r8)    :: pblsib(ncols,4,5)
 1123.                     REAL(KIND=r8)    :: coc
 1124.                     REAL(KIND=r8)    :: rsurf
 1125.                     REAL(KIND=r8)    :: cog1
 1126.                     REAL(KIND=r8)    :: cog2
 1127.                     REAL(KIND=r8)    :: d1
 1128.                     REAL(KIND=r8)    :: d2
 1129.                     REAL(KIND=r8)    :: d1i
 1130.                     REAL(KIND=r8)    :: top
 1131.                     REAL(KIND=r8)    :: ak    (ncols)
 1132.                     REAL(KIND=r8)    :: ah    (ncols)
 1133.                     REAL(KIND=r8)    :: cci   (ncols)
 1134.                     REAL(KIND=r8)    :: cgi   (ncols)
 1135.                     REAL(KIND=r8)    :: ecpot (ncols)
 1136.                     REAL(KIND=r8)    :: egpot (ncols)
 1137.                     REAL(KIND=r8)    :: ecf
 1138.                     REAL(KIND=r8)    :: egf
 1139.                     REAL(KIND=r8)    :: coct
 1140.                     REAL(KIND=r8)    :: cogt
 1141.                     REAL(KIND=r8)    :: cogs1
 1142.                     REAL(KIND=r8)    :: cogs2
 1143.                     REAL(KIND=r8)    :: psyi  (ncols)
 1144.                     REAL(KIND=r8)    :: fac1
 1145.                     REAL(KIND=r8)    :: rcdtc (ncols)
 1146.                     REAL(KIND=r8)    :: rcdtg (ncols)
 1147.                     REAL(KIND=r8)    :: rgdtc (ncols)
 1148.                     REAL(KIND=r8)    :: rgdtg (ncols)
 1149.                     LOGICAL          :: LL(nCols)
 1150.                     REAL(KIND=r8), PARAMETER :: capi  =1.0_r8/4.0e-3_r8
 1151.                     REAL(KIND=r8)    :: timcon
 1152.                     REAL(KIND=r8)    :: timcn2
 1153.                     REAL(KIND=r8)    :: tim
 1154.                     REAL(KIND=r8)    :: dtc3xi
 1155.                     REAL(KIND=r8)    :: fak
 1156.                     REAL(KIND=r8)    :: fah
 1157.                     INTEGER :: i
 1158.                     REAL(KIND=r8)    :: stb4
 1159.                     REAL(KIND=r8)    :: stb8
 1160.                     REAL(KIND=r8)    :: hlat3
 1161.                 
 1162.                     timcon = pie/86400.0_r8
 1163.                     timcn2 = 2.0_r8   * timcon
 1164.                     tim    = 1.0_r8   + timcn2*dtc3x
 1165.                     dtc3xi = 1.0_r8   / dtc3x
 1166.                     fak    = 0.01_r8  * grav/cp
 1167.                     fah    = 0.01_r8  * grav/hl
 1168.  A-----------<>     vcover2=vcover
 1169.                 
 1170.  1------------<     DO i = 1, nmax
 1171.  1                     !
 1172.  1                     !                  --                                                   --
 1173.  1                     !                 |      razao entre a agua interceptada no topo da copa  |
 1174.  1                     !     wc = Minimo*| 1 , --------------------------------------------------|
 1175.  1                     !                 |     indice de area foliar no topo da copa             |
 1176.  1                     !                  --                                                   --
 1177.  1                     !
 1178.  1                     wc  (i)=MIN( 1.0_r8   , capac(i,1)/satcap(i,1))
 1179.  1                     !                  --                                                    --
 1180.  1                     !                 |       razao entre a agua interceptada na base da copa  |
 1181.  1                     !     wg = Minimo*| 1  ,---------------------------------------------------|
 1182.  1                     !                 |      indice de area foliar na base da copa             |
 1183.  1                     !                  --                                                    --
 1184.  1                     !
 1185.  1                     wg  (i)=MIN( 1.0_r8   , capac(i,2)/satcap(i,2))
 1186.  1                     !
 1187.  1                     ! Temperatura de congelamento (K)
 1188.  1                     !
 1189.  1                     LL(i)=tg(i) <= tf
 1190.  1                     IF (LL(i)) THEN
 1191.  1                        vcover2(i,2)=1.0_r8
 1192.  1                        wg    (i)  =MIN(1.0_r8   ,capac(i,2)*capi)
 1193.  1                        !
 1194.  1                        !     rsoil ......Resistencia do solo (s/m)
 1195.  1                        !
 1196.  1                        rst   (i,2)=rsoil(i)
 1197.  1                     END IF
 1198.  1                     !
 1199.  1                     !
 1200.  1                     !  DT     d    d[w'T']
 1201.  1                     ! ---- = --   ----------
 1202.  1                     !  Dt     dt     dz
 1203.  1                     !
 1204.  1                     !H =rho*cp*w'T'
 1205.  1                     !
 1206.  1                     !          H
 1207.  1                     !w'T' = -------
 1208.  1                     !        rho*cp
 1209.  1                     !
 1210.  1                     !  DT     d     1          dH
 1211.  1                     ! ---- = ---- --------- * -----
 1212.  1                     !  Dt     dt    rho*cp      dz
 1213.  1                     !
 1214.  1                     ! P =rho*R*T and P = rho*g*Z
 1215.  1                     !
 1216.  1                     !                           P
 1217.  1                     ! DP = rho*g*DZ and rho = ----
 1218.  1                     !                          R*T
 1219.  1                     !
 1220.  1                     ! 1             1
 1221.  1                     !----= rho*g* -----
 1222.  1                     ! DZ            DP
 1223.  1                     !
 1224.  1                     ! 1     1         1
 1225.  1                     !--- * ---- = g* -----
 1226.  1                     !rho    DZ        DP
 1227.  1                     !
 1228.  1                     !
 1229.  1                     !  DT     d      g      dH
 1230.  1                     ! ---- = ---- *----- * -----
 1231.  1                     !  Dt     dt     cp     dP
 1232.  1                     !
 1233.  1                     !           g      d
 1234.  1                     ! ak(i) = ----- * -----
 1235.  1                     !           cp     dP
 1236.  1              
 1237.  1                     !                grav            1
 1238.  1                     !ak(i) = 0.01 * ------ * ------------------
 1239.  1                     !                 cp      (psb(i)*bps(i))
 1240.  1                     !
 1241.  1                     !                                        -(R/Cp)
 1242.  1                     !                  g               sl(k)
 1243.  1                     ! ak(i) = 0.01 * ------- * -------------------------------
 1244.  1                     !                  cp        (P * (si(k) - si(k+1)))
 1245.  1                     !
 1246.  1                     ak  (i) =fak/(psb(i)*bps(i))
 1247.  1                     !
 1248.  1                     !L =rho*hl*w'Q'
 1249.  1                     !
 1250.  1                     !
 1251.  1                     !                 g                1
 1252.  1                     !ah(i) = 0.01 * ------ * --------------------------
 1253.  1                     !                 hl       (P * (si(k) - si(k+1)))
 1254.  1                     !
 1255.  1                     ah  (i) =fah/ psb(i)
 1256.  1                     !
 1257.  1                     !     cc..........heat capacity of the canopy
 1258.  1                     !     cg..........heat capacity of the ground
 1259.  1                     !
 1260.  1                     cgi (i) =1.0_r8   / cg(i)
 1261.  1                     cci (i) =1.0_r8   / cc(i)
 1262.  1                     !
 1263.  1                     ! rcp ---- densidade do ar vezes o calor especifico do ar
 1264.  1                     !
 1265.  1                     !(cp/(hl*epsfac))*psur(i)
 1266.  1                     !
 1267.  1                     psyi(i) =rcp(i)/psy(i)
 1268.  1------------>     END DO
 1269.                     !
 1270.                     !     partial derivative calculations for sensible heat
 1271.                     !
 1272.  V------------<     DO i = 1, nmax
 1273.  V                     !
 1274.  V                     !           1          1          1
 1275.  V                     ! d1     =------- + -------- + --------
 1276.  V                     !          ra(i)      rb(i)      rd(i)
 1277.  V                     !
 1278.  V                     !            rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1279.  V                     ! d1     = --------------------------------------------
 1280.  V                     !                     ra(i)*rb(i)*rd(i)
 1281.  V                     !
 1282.  V                     d1     =1.0_r8/ra(i) + 1.0_r8/rb(i) + 1.0_r8/rd(i)
 1283.  V                     !
 1284.  V                     !          rcp(i)     rcp(i)     rcp(i)
 1285.  V                     ! d1i =  --------- + -------- + --------
 1286.  V                     !          ra(i)      rb(i)      rd(i)
 1287.  V                     !
 1288.  V                     !
 1289.  V                     !          rb(i)*rd(i)*rcp(i)  +   ra(i)*rd(i)*rcp(i)  +   ra(i)*rb(i)*rcp(i)
 1290.  V                     ! d1i =  ----------------------------------------------------------------------
 1291.  V                     !                              ra(i)*rb(i)*rd(i)
 1292.  V                     !
 1293.  V                     d1i    =rcp(i)/d1
 1294.  V                     !
 1295.  V                     !       --                                --
 1296.  V                     !      | tg(i)     tc(i)      tm(i)*bps(i)  |  /
 1297.  V                     !ta(i)=|------- + -------- + -------------- | /d1
 1298.  V                     !      | rd(i)      rb(i)         ra(i)     |/
 1299.  V                     !       --                                --
 1300.  V                     !
 1301.  V                     ta(i)=( tg(i)/rd(i) + tc(i)/rb(i) + tm(i)*bps(i)/ra(i) )/d1
 1302.  V                     !
 1303.  V                     !dtc3x = time increment dt
 1304.  V                     !rcp----densidade do ar vezes o calor especifico do ar
 1305.  V                     !
 1306.  V                     !
 1307.  V                     !   total sensible heat lost of top from the veggies.
 1308.  V                     !                  (tc(i)-ta(i))
 1309.  V                     !hc(i) = rcp(i) * ----------------*dt
 1310.  V                     !                      rb(i)
 1311.  V                     !
 1312.  V                     hc(i)=rcp(i) * ( tc(i) - ta(i) ) / rb(i) * dtc3x
 1313.  V                     !
 1314.  V                     !   total sensible heat lost of base from the veggies.
 1315.  V                     !
 1316.  V                     !                  (tg(i)-ta(i))
 1317.  V                     !hg(i) = rcp(i) * ---------------*dt
 1318.  V                     !                      rd(i)
 1319.  V                     !
 1320.  V                     hg(i)=rcp(i) * ( tg(i) - ta(i) ) / rd(i) * dtc3x
 1321.  V                     !                                              J
 1322.  V                     !     n.b. fluxes expressed in joules m-2  = ------
 1323.  V                     !                                             m^2
 1324.  V                     !          rcp(i)     rcp(i)     rcp(i)
 1325.  V                     ! d1i =  --------- + -------- + --------
 1326.  V                     !          ra(i)      rb(i)      rd(i)
 1327.  V                     !
 1328.  V                     !          rb(i)*rd(i)*rcp(i)  +   ra(i)*rd(i)*rcp(i)  +   ra(i)*rb(i)*rcp(i)
 1329.  V                     ! d1i =  ----------------------------------------------------------------------
 1330.  V                     !                              ra(i)*rb(i)*rd(i)
 1331.  V                     !
 1332.  V                     !                       --               --
 1333.  V                     !              d1i     |  1.0       1.0    |
 1334.  V                     !hcdtc(i) =  ------- * | ------ + -------- |
 1335.  V                     !             rb(i)    |  ra(i)     rd(i)  |
 1336.  V                     !                       --               --
 1337.  V                     !
 1338.  V                     hcdtc(i)= d1i   / rb(i)*( 1.0_r8/ra(i) + 1.0_r8/rd(i) )
 1339.  V                     !
 1340.  V                     !                -d1i
 1341.  V                     !hcdtg(i) =  ---------------
 1342.  V                     !             rb(i) * rd(i)
 1343.  V                     !
 1344.  V                     hcdtg(i)=-d1i   / ( rb(i)*rd(i) )
 1345.  V                     !
 1346.  V                     !                     ra(i)*rb(i)*rd(i)*rcp(i)
 1347.  V                     ! d1i     = --------------------------------------------
 1348.  V                     !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1349.  V                     !
 1350.  V                     !               -d1i
 1351.  V                     ! hcdtm(i)= ----------------- * bps(i)
 1352.  V                     !            ( rb(i)*ra(i) )
 1353.  V                     !
 1354.  V                     !                          - rd(i)*rcp(i)
 1355.  V                     ! hcdtm(i)= ---------------------------------------------- * bps(i)
 1356.  V                     !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1357.  V                     !
 1358.  V              
 1359.  V                     hcdtm(i)=-d1i   / ( rb(i)*ra(i) ) *bps(i)
 1360.  V                     !
 1361.  V                     !                        --               --
 1362.  V                     !               d1i     |  1.0       1.0    |
 1363.  V                     ! hgdtg(i) =  ------- * | ------ + -------- |
 1364.  V                     !              rd(i)    |  ra(i)     rb(i)  |
 1365.  V                     !                        --               --
 1366.  V                     !
 1367.  V                     hgdtg(i)= d1i   / rd(i)*( 1.0_r8/ra(i) + 1.0_r8/rb(i))
 1368.  V                     !
 1369.  V                     !                -d1i
 1370.  V                     !hgdtc(i) = -----------------
 1371.  V                     !            ( rd(i)*rb(i) )
 1372.  V                     !
 1373.  V                     !
 1374.  V                     hgdtc(i)=-d1i   / ( rd(i)*rb(i) )
 1375.  V                     !
 1376.  V                     !                    -d1i                (R/Cp)
 1377.  V                     ! hgdtm(i) = ----------------- *   sl(k)
 1378.  V                     !             ( rd(i)*ra(i) )
 1379.  V                     !
 1380.  V                     !
 1381.  V                     !                          - rb(i)*rcp(i)                          (R/Cp)
 1382.  V                     ! hgdtm(i)= ---------------------------------------------- * sl(k)
 1383.  V                     !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1384.  V              
 1385.  V                     hgdtm(i)=-d1i   / ( rd(i)*ra(i) ) *bps(i)
 1386.  V                     !
 1387.  V------------>     END DO
 1388.                     !
 1389.                     !     partial derivative calculations for longwave radiation flux
 1390.                     !
 1391.                     stb4  = 4.0_r8 * stefan
 1392.                     stb8  = 8.0_r8 * stefan
 1393.                     !
 1394.  Vr4----------<     DO i = 1, nmax
 1395.  Vr4                   fac1     = vcover2(i,1)*(1.0_r8  - thermk(i))
 1396.  Vr4                   rcdtc(i) = fac1 * stb8 * tc(i)*tc(i)*tc(i)
 1397.  Vr4                   rcdtg(i) =-fac1 * stb4 * tg(i)*tg(i)*tg(i)
 1398.  Vr4                   rgdtc(i) =-fac1 * stb4 * tc(i)*tc(i)*tc(i)
 1399.  Vr4                   rgdtg(i) =        stb4 * tg(i)*tg(i)*tg(i)
 1400.  Vr4---------->     END DO
 1401.  V------------<     DO i = 1, nmax
 1402.  V                     !
 1403.  V                     !     partial derivative calculation for latent heat
 1404.  V                     !     modification for soil dryness : hr=rel. humidity in top layer
 1405.  V                     !
 1406.  V                     hr   (i)  = hrr(i)   * fg(i) + 1.0_r8 - fg(i)
 1407.  V                     !
 1408.  V                     !     fc = Condicao de oravalho 0 ou 1 na topo da copa
 1409.  V                     !
 1410.  V                     rc   (i)  = rst(i,1) * fc(i) + 2.0_r8 * rb(i)
 1411.  V                     !
 1412.  V                     !        ( 1.0_r8 - wc(i) )         wc(i)
 1413.  V                     ! coc = -------------------- + ------------------
 1414.  V                     !              rc(i)            (2.0_r8 * rb(i))
 1415.  V                     !
 1416.  V                     coc       = ( 1.0_r8 - wc(i) ) / rc(i) + wc(i)/(2.0_r8 * rb(i))
 1417.  V                     !
 1418.  V                     ! fg = Condicao de oravalho 0 ou 1 na base da copa
 1419.  V                     !
 1420.  V                     rg   (i)  = rst(i,2)*fg(i)
 1421.  V                     !
 1422.  V                     rsurf     = rsoil(i)*fg(i)
 1423.  V                     !
 1424.  V                     !     hr..........rel. humidity in top layer
 1425.  V                     !     vcover......Fracao de cobertura vegetal icg=1 topo
 1426.  V                     !     vcover......Fracao de cobertura vegetal icg=2 topo
 1427.  V                     !
 1428.  V                     !                      (1 - wg(i))            (1 - vcover(i,2))              vcover(i,2)
 1429.  V                     ! cog1 = vcover(i,2)*--------------- + hr(i)*------------------- + hr(i)*----------------------
 1430.  V                     !                     (rg(i)+rd(i))            (rsurf + rd(i))            (rsurf + rd(i) + 44)
 1431.  V                     !
 1432.  V                     cog1      =   vcover2(i,2)*(1.0_r8 - wg(i))/(rg(i)+rd(i)) &
 1433.  V                          + (1.0_r8 - vcover2(i,2))/(rsurf + rd(i)) * hr(i) &
 1434.  V                          + vcover2(i,2) / (rsurf + rd(i) + 44.0_r8) * hr(i)
 1435.  V                     !
 1436.  V                     !                      (1 - wg(i))      (1 - vcover(i,2))        vcover(i,2)
 1437.  V                     ! cog2 = vcover(i,2)*--------------- + ------------------- + ----------------------
 1438.  V                     !                     (rg(i)+rd(i))      (rsurf + rd(i))      (rsurf + rd(i) + 44)
 1439.  V                     !
 1440.  V                     cog2      = vcover2(i,2)*(1.0_r8 - wg(i))/(rg(i)+rd(i)) &
 1441.  V                          +     (1.0_r8 - vcover2(i,2))/(rsurf + rd(i)) &
 1442.  V                          +      vcover2(i,2)/(rsurf   +rd(i)+44.0_r8)
 1443.  V              
 1444.  V                     !                       (1 - wg(i))      hr(i)*(1 - vcover(i,2))      hr(i)*vcover(i,2)      wg(i)* vcover(i,2)
 1445.  V                     ! cog1 = vcover(i,2) * -------------- + ------------------------- + --------------------- + --------------------
 1446.  V                     !                      (rg(i)+rd(i))     (rsurf + rd(i))            (rsurf + rd(i) + 44)           rd(i)
 1447.  V                     !
 1448.  V                     !
 1449.  V                     cog1      = cog1 + wg(i) / rd(i)*vcover2(i,2)
 1450.  V                     !
 1451.  V                     !                      wg(i)
 1452.  V                     ! cog2      = cog2 + -------- * vcover(i,2)
 1453.  V                     !                      rd(i)
 1454.  V                     !
 1455.  V                     cog2      = cog2 + wg(i)/rd(i)*vcover2(i,2)
 1456.  V                     !
 1457.  V                     !        1.0       ( 1.0_r8 - wc(i) )         wc(i)
 1458.  V                     !d2 = --------- + -------------------- + ------------------ + cog2
 1459.  V                     !       ra(i)            rc(i)            (2.0_r8 * rb(i))
 1460.  V                     !
 1461.  V                     d2        = 1.0_r8/ra(i) + coc + cog2
 1462.  V                     !
 1463.  V                     !                                      em(i)
 1464.  V                     !top = coc * etc(i) + cog1 * etg(i) + -------
 1465.  V                     !                                      ra(i)
 1466.  V                     !
 1467.  V                     top       = coc * etc(i) + cog1 * etg(i) + em(i)/ra(i)
 1468.  V                     !
 1469.  V                     ea (i)    = top/d2
 1470.  V                     !
 1471.  V                     !       psyi(i) =rcp(i)/psy(i)
 1472.  V                     !
 1473.  V                     ! The rate of evaporation from the wetted portions of the vegetation
 1474.  V                     !
 1475.  V                     !        ( 1 - wc(i) )         wc(i)
 1476.  V                     ! coc = ---------------- + --------------
 1477.  V                     !            rc(i)          ( 2 * rb(i) )
 1478.  V                     !
 1479.  V                     !The latent heat fluxes from the canopy is defined by:
 1480.  V                     !
 1481.  V                     !
 1482.  V                     !            --        --                      --             --
 1483.  V                     !           |            |     rho(i) * cp    |  wc     1 - wc  |
 1484.  V                     !ec = LEc = | e[Tc] - ea | * -------------- * | ---- + ---------|
 1485.  V                     !           |            |       psy(i)       |  rb     rb + rc |
 1486.  V                     !            --        --                      --             --
 1487.  V                     !
 1488.  V                     ec (i)    = ( etc(i)-ea(i) )  *  coc * psyi(i) * dtc3x
 1489.  V                     !
 1490.  V                     !The latent heat fluxes from the ground is defined by:
 1491.  V                     !
 1492.  V                     !             --           --                       --        --
 1493.  V                     !            |               |      rho(i) * cp    |     1      |
 1494.  V                     ! eg = LEgs =|fh*e[Tgs] - ea | *  -------------- * |------------|
 1495.  V                     !            |               |        psy(i)       | rsurf + rd |
 1496.  V                     !             --           --                       --        --
 1497.  V                     !
 1498.  V                     eg (i)    = (etg(i)*cog1   - ea(i)*cog2   )*psyi(i)*dtc3x
 1499.  V                     !
 1500.  V                     deadtc(i) = btc(i) *  coc / d2
 1501.  V                     !
 1502.  V                     deadtg(i) = btg(i) * cog1 / d2
 1503.  V                     !
 1504.  V                     !                             psur(i)
 1505.  V                     ! deadqm(i) = epsfac * ------------------------------------------
 1506.  V                     !                       ( ( epsfac + qm(i) )**2  *  ra(i)*d2    )
 1507.  V                     !
 1508.  V                     deadqm(i) = epsfac * psur(i)/( (epsfac+qm(i))**2 * ra(i)*d2    )
 1509.  V                     !
 1510.  V                     ecdtc(i)  = (btc(i) - deadtc(i) ) * coc * psyi(i)
 1511.  V                     !
 1512.  V                     ecdtg(i)  = -deadtg(i) * coc   * psyi(i)
 1513.  V                     !
 1514.  V                     ecdqm(i)  = -deadqm(i) * coc   * psyi(i)
 1515.  V                     !
 1516.  V                     egdtg(i)  = ( btg(i) * cog1 - deadtg(i) * cog2 )*psyi(i)
 1517.  V                     !
 1518.  V                     egdtc(i)  = -deadtc(i) * cog2   * psyi(i)
 1519.  V                     !
 1520.  V                     egdqm(i)  = -deadqm(i) * cog2   * psyi(i)
 1521.  V                     !
 1522.  V------------>     END DO
 1523.                     !
 1524.                     !     solve for time changes of pbl and sib variables,
 1525.                     !     using a semi-implicit scheme.
 1526.                     !
 1527.  V------------<     DO i = 1, nmax
 1528.  V                     !
 1529.  V                     !     tg equation
 1530.  V                     !
 1531.  V                     !     cc..........heat capacity of the canopy
 1532.  V                     !     cg..........heat capacity of the ground
 1533.  V                     !
 1534.  V                     !            1.0                  1.0
 1535.  V                     ! cgi (i) = ----- = ---------------------------------
 1536.  V                     !           cg(i)     heat capacity of the ground
 1537.  V                     !
 1538.  V                     !           1.0                         1.0
 1539.  V                     ! cci (i) =------   =  --------------------------------------
 1540.  V                     !           cc(i)          heat capacity of the canopy
 1541.  V                     !
 1542.  V                     !             2 * pi * dt     s
 1543.  V                     !tim = 1.0 + ------------- = ---
 1544.  V                     !               86400.0       s
 1545.  V                     !
 1546.  V                     pblsib(i,1,1) = tim + dtc3x * cgi(i) * (hgdtg(i) + egdtg(i) + rgdtg(i))
 1547.  V                     pblsib(i,1,2) =       dtc3x * cgi(i) * (hgdtc(i) + egdtc(i) + rgdtc(i))
 1548.  V                     pblsib(i,1,3) =       dtc3x * cgi(i) * hgdtm(i)
 1549.  V                     pblsib(i,1,4) =       dtc3x * cgi(i) * egdqm(i)
 1550.  V                     !
 1551.  V                     !     tc equation
 1552.  V                     !
 1553.  V                     pblsib(i,2,1) =          dtc3x * cci(i) * ( hcdtg(i) + ecdtg(i) + rcdtg(i) )
 1554.  V                     !
 1555.  V                     pblsib(i,2,2) = 1.0_r8 + dtc3x * cci(i) * ( hcdtc(i) + ecdtc(i) + rcdtc(i) )
 1556.  V                     !
 1557.  V                     !
 1558.  V                     !               -d1i                  (R/Cp)
 1559.  V                     ! hcdtm(i)= ----------------- *  sl(k)
 1560.  V                     !            Cc(i)*( rb(i)*ra(i) )
 1561.  V                     !
 1562.  V                     pblsib(i,2,3) = dtc3x * cci(i) * hcdtm(i)
 1563.  V                     !
 1564.  V                     pblsib(i,2,4) = dtc3x * cci(i) * ecdqm(i)
 1565.  V                     !
 1566.  V                     !     tm equation
 1567.  V                     !
 1568.  V                     !                                        -(R/Cp)
 1569.  V                     !                  g               sl(k)
 1570.  V                     ! ak(i) = 0.01 * ------- * -------------------------------
 1571.  V                     !                  cp        (P * (si(k) - si(k+1)))
 1572.  V                     !
 1573.  V                     !
 1574.  V                     pblsib(i,3,1) = -dtc3x * ak(i) * ( hgdtg(i) + hcdtg(i) )
 1575.  V                     !
 1576.  V                     pblsib(i,3,2) = -dtc3x * ak(i) * ( hgdtc(i) + hcdtc(i) )
 1577.  V                     !
 1578.  V                     !
 1579.  V                     !      --   --  -(R/Cp)    --   --  -(R/Cp)
 1580.  V                     !     |  P    |           |       |
 1581.  V                     !bps  |-------|        == |sl(k)  |
 1582.  V                     !     |  P0   |           |       |
 1583.  V                     !      --   --             --   --
 1584.  V                     !
 1585.  V                     !             --   --  -(R/Cp)
 1586.  V                     !            |  P    |
 1587.  V                     !Tpot =  T * |-------|
 1588.  V                     !            |  P0   |
 1589.  V                     !             --   --
 1590.  V                     !
 1591.  V                     !
 1592.  V                     ! P =rho*R*T and P = rho*g*Z
 1593.  V                     !
 1594.  V                     !                           P
 1595.  V                     ! DP = rho*g*DZ and rho = ----
 1596.  V                     !                          R*T
 1597.  V                     !
 1598.  V                     !        P
 1599.  V                     ! DP = ----*g*DZ
 1600.  V                     !       R*T
 1601.  V                     !
 1602.  V                     !        R*T
 1603.  V                     ! DZ = ------*DP
 1604.  V                     !        g*P
 1605.  V                     !
 1606.  V                     !    1       g*P       1
 1607.  V                     !  ------ = ------ * ------
 1608.  V                     !    DZ      R*T       DP
 1609.  V                     !
 1610.  V                     !    T       g         P
 1611.  V                     !  ------ = ------ * ------
 1612.  V                     !    DZ      R         DP
 1613.  V                     !
 1614.  V                     !                                        -(R/Cp)
 1615.  V                     !                  g               sl(k)
 1616.  V                     ! ak(i) = 0.01 * ------- * -------------------------------
 1617.  V                     !                  cp        (P * (si(k) - si(k+1)))
 1618.  V                     !
 1619.  V                     !
 1620.  V                     ! pblsib(i,3,3) = gmt(i,2) - 2*dt*ak(i)*(hgdtm(i) + hcdtm(i))
 1621.  V                     !
 1622.  V                     !                             T      1
 1623.  V                     !Pbl_KMbyDZ_1  =   2*Dt * Km*---- * ----
 1624.  V                     !                             dZ     dZ
 1625.  V                     !
 1626.  V                     !                             T      1
 1627.  V                     !Pbl_KMbyDZ_1  =   2*Dt * Km*---- * ----
 1628.  V                     !                             dZ     dZ
 1629.  V                     !
 1630.  V                     !           --                                       --     --                                           --
 1631.  V                     !          |                                           |   |    Pbl_KMbyDZ_1(i,k)*Pbl_KMbyDZ_2(i,k+1)      |
 1632.  V                     !gmt(i,2) =|1.0 + Pbl_KMbyDZ_1(i,k) + Pbl_KMbyDZ_2(i,k)| - |-----------------------------------------------|
 1633.  V                     !          |                                           |   |1.0 + Pbl_KMbyDZ_1(i,k+1) + Pbl_KMbyDZ_2(i,k+1)|
 1634.  V                     !           --                                       --     --                                           --
 1635.  V              
 1636.  V                     pblsib(i,3,3) = gmt(i,2) - dtc3x * ak(i) * ( hgdtm(i) + hcdtm(i) )
 1637.  V                     pblsib(i,3,4) = 0.0_r8
 1638.  V                     !
 1639.  V                     !     qm equation
 1640.  V                     !
 1641.  V                     !
 1642.  V                     !                 g                1
 1643.  V                     !ah(i) = 0.01 * ------ * --------------------------
 1644.  V                     !                 hl       (P * (si(k) - si(k+1)))
 1645.  V                     !
 1646.  V                     pblsib(i,4,1) = - dtc3x * ah(i) * ( egdtg(i) + ecdtg(i) )
 1647.  V                     pblsib(i,4,2) = - dtc3x * ah(i) * ( egdtc(i) + ecdtc(i) )
 1648.  V                     pblsib(i,4,3) =   0.0_r8
 1649.  V                     !
 1650.  V                     pblsib(i,4,4) =   gmq(i,2) - dtc3x * ah(i) * ( egdqm(i) + ecdqm(i) )
 1651.  V                     !
 1652.  V                     !                                                           Rngs
 1653.  V                     ! radt = net heat received by canopy/ground vegetation  = --------
 1654.  V                     !                                                            dt
 1655.  V                     !
 1656.  V                     !      dTgs                          2*PI*Cgs
 1657.  V                     ! Cgs*------ = Rngs - Hgs - LHgs - ------------ * (Tgs - Td)
 1658.  V                     !      dt                            dayleg
 1659.  V                     !
 1660.  V                     !      dTgs     Rngs      Hgs     LHgs         2*PI
 1661.  V                     !     ------ = ------ - ------ - ------- - -------------- * (Tgs - Td)
 1662.  V                     !      dt       Cgs       Cgs      Cgs         dayleg
 1663.  V                     !
 1664.  V                     !               --                     --
 1665.  V                     !      dTgs    |  Rngs      Hgs     LHgs |        2*PI
 1666.  V                     !     ------ = | ------ - ------ - ------| - -------------- * (Tgs - Td)
 1667.  V                     !      dt      |  Cgs       Cgs      Cgs |        dayleg
 1668.  V                     !               --                     --
 1669.  V                     !
 1670.  V                     !               --                   --
 1671.  V                     !      dTgs    |                       |    1           2*PI
 1672.  V                     !     ------ = |  Rngs - ( Hgs + LHgs )| *------ - -------------- * (Tgs - Td)
 1673.  V                     !      dt      |                       |    Cgs        dayleg
 1674.  V                     !               --                   --
 1675.  V                     !
 1676.  V                     !                                                          cgi(i)         2*pi
 1677.  V                     !pblsib(i,1,5) = (radt(i,2)* cgi(i) - ( hg(i) + eg(i) ) * -------- )  - --------- * ( tg(i) - td(i) )
 1678.  V                     !                                                             dt          86400.0
 1679.  V                     !            2*pi
 1680.  V                     ! timcn2 = ---------
 1681.  V                     !           86400.0
 1682.  V                     pblsib(i,1,5) = (radt(i,2) - ( hg(i) + eg(i) ) * dtc3xi ) * cgi(i) - timcn2 * ( tg(i) - td(i) )
 1683.  V                     !
 1684.  V                     !      dTc
 1685.  V                     ! Cc*------ = Rnc - Hc - LHc
 1686.  V                     !      dt
 1687.  V                     !
 1688.  V                     !             --             --
 1689.  V                     !      dTc   |                 |     1
 1690.  V                     !    ------ =|Rnc - Hc - LHc   | * -----
 1691.  V                     !      dt    |                 |     Cc
 1692.  V                     !             --             --
 1693.  V                     !                 --                                     --
 1694.  V                     !                |                                   1     |     1
 1695.  V                     !pblsib(i,2,5) = |radt(i,1) - ( hc(i) + ec(i) ) * -------- | * -------
 1696.  V                     !                |                                   dt    |    cc(i)
 1697.  V                     !                 --                                     --
 1698.  V                     !                 --                                     --
 1699.  V                     !                |                                   1     |
 1700.  V                     !pblsib(i,2,5) = |radt(i,1) - ( hc(i) + ec(i) ) * -------- | * cci(i)
 1701.  V                     !                |                                   dt    |
 1702.  V                     !                 --                                     --
 1703.  V                     pblsib(i,2,5) = (radt(i,1) - ( hc(i) + ec(i) ) * dtc3xi ) * cci(i)
 1704.  V                     !
 1705.  V                     !                                         -(R/Cp)              --           --
 1706.  V                     !   dTm              g               sl(k)                    | hg(i) + hc(i) |
 1707.  V                     ! ------ =  0.01 * ------- * ------------------------------- *| --------------|
 1708.  V                     !   dt               cp        (P * (si(k) - si(k+1)))        |       dt      |
 1709.  V                     !                                                              --           --
 1710.  V                     !                                                                  --     --
 1711.  V                     !   dTm              m*kg*K                    1                  |   J     |
 1712.  V                     ! ------ =  0.01 * ----------- * ------------------------------- *| ------  |
 1713.  V                     !   dt              s^2*J                      Pa                 | m^2*s   |
 1714.  V                     !                                                                  --     --
 1715.  V                     !   dTm              m*kg*K                  m^2                  |   N*m   |
 1716.  V                     ! ------ =  0.01 * ----------- * ------------------------------- *| --------|
 1717.  V                     !   dt              s^2*N*m                   N                   | m^2*s   |
 1718.  V              
 1719.  V                     !   dTm              m*Kg*K*s^2         m^3
 1720.  V                     ! ------ =  0.01 * ------------- * ---------------
 1721.  V                     !   dt              s^2*kg*m*m          m^2*s
 1722.  V              
 1723.  V                     !   dTm                K            m
 1724.  V                     ! ------ =  0.01 * ------------- *-------
 1725.  V                     !   dt                 m            s
 1726.  V                     !
 1727.  V                     !   dTm             K
 1728.  V                     ! ------ =  0.01 * ----
 1729.  V                     !   dt              s
 1730.  V              
 1731.  V                     !
 1732.  V                     !                                               -(R/Cp)              --           --
 1733.  V                     !                          g               sl(k)                    | hg(i) + hc(i) |
 1734.  V                     ! pblsib(i,3,5) = 0.01 * ------- * ------------------------------- *| --------------|
 1735.  V                     !                          cp        (P * (si(k) - si(k+1)))        |       dt      |
 1736.  V                     !                                                                    --           --
 1737.  V                     !
 1738.  V                     pblsib(i,3,5) =  gmt(i,3) + ak(i) * ( hg(i) + hc(i) ) * dtc3xi
 1739.  V                     !
 1740.  V                     !                                                             --           --
 1741.  V                     !                         g                1                 | eg(i) + ec(i) |
 1742.  V                     !pblsib(i,4,5) = 0.01 * ------ * ------------------------- * | --------------|
 1743.  V                     !                         hl       (P * (si(k) - si(k+1)))   |       dt      |
 1744.  V                     !                                                             --           --
 1745.  V                     !
 1746.  V                     pblsib(i,4,5) =  gmq(i,3) + ah(i) * ( eg(i) + ec(i) ) * dtc3xi
 1747.  V------------>     END DO
 1748.                     !
 1749.                     !     solve 4 x 5 matrix equation
 1750.                     !
 1751.  V------------<     DO i = 1, nmax
 1752.  V                     pblsib(i,2,2) =  pblsib(i,2,2) - pblsib(i,2,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1753.  V                     pblsib(i,2,3) =  pblsib(i,2,3) - pblsib(i,2,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1754.  V                     pblsib(i,2,4) =  pblsib(i,2,4) - pblsib(i,2,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1755.  V                     pblsib(i,2,5) =  pblsib(i,2,5) - pblsib(i,2,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1756.  V                     pblsib(i,3,2) =  pblsib(i,3,2) - pblsib(i,3,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1757.  V                     pblsib(i,3,3) =  pblsib(i,3,3) - pblsib(i,3,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1758.  V                     pblsib(i,3,4) =  pblsib(i,3,4) - pblsib(i,3,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1759.  V                     pblsib(i,3,5) =  pblsib(i,3,5) - pblsib(i,3,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1760.  V                     pblsib(i,4,2) =  pblsib(i,4,2) - pblsib(i,4,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1761.  V                     pblsib(i,4,3) =  pblsib(i,4,3) - pblsib(i,4,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1762.  V                     pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1763.  V                     pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1764.  V                     pblsib(i,3,3) =  pblsib(i,3,3) - pblsib(i,3,2) * ( pblsib(i,2,3) / pblsib(i,2,2) )
 1765.  V                     pblsib(i,3,4) =  pblsib(i,3,4) - pblsib(i,3,2) * ( pblsib(i,2,4) / pblsib(i,2,2) )
 1766.  V                     pblsib(i,3,5) =  pblsib(i,3,5) - pblsib(i,3,2) * ( pblsib(i,2,5) / pblsib(i,2,2) )
 1767.  V                     pblsib(i,4,3) =  pblsib(i,4,3) - pblsib(i,4,2) * ( pblsib(i,2,3) / pblsib(i,2,2) )
 1768.  V                     pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,2) * ( pblsib(i,2,4) / pblsib(i,2,2) )
 1769.  V                     pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,2) * ( pblsib(i,2,5) / pblsib(i,2,2) )
 1770.  V                     pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,3) * ( pblsib(i,3,4) / pblsib(i,3,3) )
 1771.  V                     pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,3) * ( pblsib(i,3,5) / pblsib(i,3,3) )
 1772.  V              
 1773.  V                     pblsib(i,4,5) =     pblsib(i,4,5) / pblsib(i,4,4)
 1774.  V              
 1775.  V                     pblsib(i,3,5) =   ( pblsib(i,3,5) / pblsib(i,3,3) ) &
 1776.  V                          - ( pblsib(i,3,4) / pblsib(i,3,3) ) * pblsib(i,4,5)
 1777.  V              
 1778.  V                     pblsib(i,2,5) =   ( pblsib(i,2,5) / pblsib(i,2,2) ) &
 1779.  V                          - ( pblsib(i,2,4) / pblsib(i,2,2) ) * pblsib(i,4,5) &
 1780.  V                          - ( pblsib(i,2,3) / pblsib(i,2,2) ) * pblsib(i,3,5)
 1781.  V              
 1782.  V                     pblsib(i,1,5) =   ( pblsib(i,1,5) / pblsib(i,1,1) ) &
 1783.  V                          - ( pblsib(i,1,4) / pblsib(i,1,1) ) * pblsib(i,4,5) &
 1784.  V                          - ( pblsib(i,1,3) / pblsib(i,1,1) ) * pblsib(i,3,5) &
 1785.  V                          - ( pblsib(i,1,2) / pblsib(i,1,1) ) * pblsib(i,2,5)
 1786.  V------------>     END DO
 1787.  Vr2----------<     DO i = 1, nmax
 1788.  Vr2                   dtg(i) = pblsib(i,1,5) * dtc3x
 1789.  Vr2                   dtc(i) = pblsib(i,2,5) * dtc3x
 1790.  Vr2                   dtm(i) = pblsib(i,3,5) * dtc3x
 1791.  Vr2                   dqm(i) = pblsib(i,4,5) * dtc3x
 1792.  Vr2                   hc (i) = hc(i) + dtc3x * ( hcdtc(i) * dtc(i) + hcdtg(i) * dtg(i) + hcdtm(i) * dtm(i) )
 1793.  Vr2                   hg (i) = hg(i) + dtc3x * ( hgdtc(i) * dtc(i) + hgdtg(i) * dtg(i) + hgdtm(i) * dtm(i) )
 1794.  Vr2                   !
 1795.  Vr2                   !     check if interception loss term has exceeded canopy storage
 1796.  Vr2                   !
 1797.  Vr2                   ecpot(i)=( etc(i) - ea(i) ) + ( btc(i) - deadtc(i) ) * dtc(i) &
 1798.  Vr2                        -deadtg(i) * dtg(i) - deadqm(i) * dqm(i)
 1799.  Vr2                   egpot(i)=( etg(i) - ea(i) ) + ( btg(i) - deadtg(i) ) * dtg(i) &
 1800.  Vr2                        -deadtc(i) * dtc(i) - deadqm(i) * dqm(i)
 1801.  Vr2---------->     END DO
 1802.                     !----------------------------------------------------------------------
 1803.                     !     EVAPORATION LOSSES ARE EXPRESSED IN J M-2 : WHEN DIVIDED BY
 1804.                     !     ( hl*1000.) LOSS IS IN M M-2 (hl(J/kg))(1 J/kg ==> 1000J/m-3)
 1805.                     !     MASS TERMS ARE IN KG M-2 DT-1
 1806.                     !----------------------------------------------------------------------
 1807.                     hlat3=1.0e+03_r8*hl
 1808.  V------------<     DO i = 1, nmax
 1809.  V                     eci   (i) = ecpot(i) * wc(i) * psyi(i) / ( 2.0_r8 * rb(i) ) * dtc3x
 1810.  V                     ecidif(i) = MAX( 0.0_r8   , eci(i) - capac(i,1) * hlat3 )
 1811.  V                     hc    (i) = hc(i) + ecidif(i)
 1812.  V                     eci   (i) = MIN( eci(i) , capac(i,1) * hlat3 )
 1813.  V                     egi   (i) = egpot(i) * vcover2(i,2) * wg(i) * psyi(i) / rd(i)*dtc3x
 1814.  V                     egidif(i) = MAX( 0.0_r8 , egi(i) - capac(i,2) * hlat3 )
 1815.  V                     hg    (i) = hg(i) + egidif(i)
 1816.  V                     egi   (i) = MIN( egi(i) , capac(i,2) * hlat3 )
 1817.  V                     !
 1818.  V                     !     evaporation is given in j m-2, calculated from gradients
 1819.  V                     !
 1820.  V                     rsurf     = rsoil(i) * fg(i)
 1821.  V                     coct      = ( 1.0_r8 - wc(i) )/rc(i)
 1822.  V                     cogt      = vcover2(i,2) * ( 1.0_r8 - wg(i) ) / ( rg(i) + rd(i) )
 1823.  V                     cogs1     = ( 1.0_r8 - vcover2(i,2) ) * hr(i)/( rd(i) + rsurf ) &
 1824.  V                          + vcover2(i,2) / ( rd(i) + rsurf + 44.0_r8 ) * hr(i)
 1825.  V                     cogs2     = cogs1/hr(i)
 1826.  V                     ect  (i)  = ecpot(i)*coct*psyi(i)*dtc3x
 1827.  V                     ec   (i)  = eci(i)+ect(i)
 1828.  V                     egt  (i)  = egpot(i)*cogt*psyi(i)*dtc3x
 1829.  V                     egs  (i)  = (etg(i)+btg(i)*dtg(i))*cogs1    &
 1830.  V                          -(ea(i)+deadtg(i)*dtg(i)+deadtc(i)*dtc(i)+deadqm(i)*dqm(i) &
 1831.  V                          )   *cogs2
 1832.  V                     egs  (i)  = egs(i)*psyi(i)*dtc3x
 1833.  V                     eg   (i)  = egt(i)+egs(i)+egi(i)
 1834.  V                     !vcover2(i,2)=xcover(itype(i),mon(i),2)
 1835.  V------------>     END DO
 1836.                     !
 1837.                     !     test of dew condition. recalculation ensues if necessary.
 1838.                     !
 1839.  1------------<     DO i = 1, nmax
 1840.  1                     radt(i,1) = radt(i,1) - rcdtc(i) * dtc(i) - rcdtg(i) * dtg(i)
 1841.  1                     radt(i,2) = radt(i,2) - rgdtc(i) * dtc(i) - rgdtg(i) * dtg(i)
 1842.  1                     ecf    = SIGN(1.0_r8   ,ecpot(i)) * ( fc(i) * 2.0_r8 - 1.0_r8 )
 1843.  1                     egf    = SIGN(1.0_r8   ,egpot(i)) * ( fg(i) * 2.0_r8 - 1.0_r8 )
 1844.  1                     IF ( ecf <= 0.0_r8 ) THEN
 1845.  1                        hc (i) = hc(i) + eci(i) + ect(i)
 1846.  1                        eci(i) = 0.0_r8
 1847.  1                        ect(i) = 0.0_r8
 1848.  1                        ec (i) = 0.0_r8
 1849.  1                     END IF
 1850.  1                     IF (egf    <= 0.0_r8) THEN
 1851.  1                        hg (i) = hg(i)+egi(i)+egt(i)+egs(i)
 1852.  1                        egi(i) = 0.0_r8
 1853.  1                        egt(i) = 0.0_r8
 1854.  1                        egs(i) = 0.0_r8
 1855.  1                        eg (i) = 0.0_r8
 1856.  1                     END IF
 1857.  1------------>     END DO
 1858.                   END SUBROUTINE temres
 1859.                 
 1860.                 
 1861.                 
 1862.                   ! cut    :performs vapor pressure calculation at level "a".
 1863.                 
 1864.                 
 1865.                 
 1866.                   SUBROUTINE cut( &
 1867.                        icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 1868.                        ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 1869.                        rsoil ,vcover,nmax  ,ncols )
 1870.                     !
 1871.                     !-----------------------------------------------------------------------
 1872.                     !-----------------------------------------------------------------------
 1873.                     ! input parameters
 1874.                     !   fc      fg      hr      wc      wg      rhoair  cp
 1875.                     !   rst     ra      rb      rg      rd      rsurf   vcover
 1876.                     !   etc     etg     em
 1877.                     !-----------------------------------------------------------------------
 1878.                     ! output parameters
 1879.                     !   ea
 1880.                     !-----------------------------------------------------------------------
 1881.                     ! ncols......Numero de ponto por faixa de latitude
 1882.                     ! icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 1883.                     ! cp.........specific heat of air (j/kg/k)
 1884.                     ! nmax.......
 1885.                     ! vcover(iv).Fracao de cobertura da vegetacao iv=1 topo ()
 1886.                     ! vcover(iv).Fracao de cobertura da vegetacao iv=2 bottom ()
 1887.                     ! ra.........Resistencia Aerodinamica (s/m)
 1888.                     ! rb.........bulk boundary layer resistance             (s/m)
 1889.                     ! rd.........aerodynamic resistance between ground
 1890.                     !            and canopy air space                       (s/m)
 1891.                     ! rc.........Resistencia do topo da copa
 1892.                     ! rg.........Resistencia da base da copa
 1893.                     ! ea.........Pressao de vapor
 1894.                     ! etc........Pressao de vapor no topo da copa
 1895.                     ! etg........Pressao de vapor no base da copa
 1896.                     ! rst........Resistencia stomatal (s/m)
 1897.                     ! rsoil......Resistencia do solo (s/m)
 1898.                     ! em.........Pressao de vapor da agua
 1899.                     ! rhoair.....Desnsidade do ar
 1900.                     ! rcp........densidade do ar vezes o calor especifico do ar
 1901.                     ! wc.........Minimo entre 1 e a razao entre a agua interceptada pelo
 1902.                     !            indice de area foliar no topo da copa
 1903.                     ! wg.........Minimo entre 1 e a razao entre a agua interceptada pelo
 1904.                     !             indice de area foliar na parte inferior da copa
 1905.                     ! fc.........Condicao de oravalho 0 ou 1 no topo da copa
 1906.                     ! fg.........Condicao de oravalho 0 ou 1 na base da copa
 1907.                     ! hr.........Rel. humidity in top layer
 1908.                     ! icheck
 1909.                     !-----------------------------------------------------------------------
 1910.                     INTEGER, INTENT(in   ) :: ncols
 1911.                     INTEGER, INTENT(in   ) :: nmax
 1912.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 1913.                     !
 1914.                     !     variables calculated from above and ambient conditions
 1915.                     !
 1916.                     REAL(KIND=r8),    INTENT(in   ) :: ra    (ncols)
 1917.                     REAL(KIND=r8),    INTENT(in   ) :: rb    (ncols)
 1918.                     REAL(KIND=r8),    INTENT(in   ) :: rd    (ncols)
 1919.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 1920.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 1921.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 1922.                     REAL(KIND=r8),    INTENT(in   ) :: etc   (ncols)
 1923.                     REAL(KIND=r8),    INTENT(in   ) :: etg   (ncols)
 1924.                     REAL(KIND=r8),    INTENT(in   ) :: rst   (ncols,icg)
 1925.                     REAL(KIND=r8),    INTENT(in   ) :: rsoil (ncols)
 1926.                     !
 1927.                     !     this is for coupling with closure turbulence model
 1928.                     !
 1929.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 1930.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 1931.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 1932.                     REAL(KIND=r8),    INTENT(in   ) :: wc    (ncols)
 1933.                     REAL(KIND=r8),    INTENT(in   ) :: wg    (ncols)
 1934.                     REAL(KIND=r8),    INTENT(in   ) :: fc    (ncols)
 1935.                     REAL(KIND=r8),    INTENT(in   ) :: fg    (ncols)
 1936.                     REAL(KIND=r8),    INTENT(in   ) :: hr    (ncols)
 1937.                     INTEGER, INTENT(in   ) :: icheck(ncols)
 1938.                 
 1939.                     REAL(KIND=r8) :: coc
 1940.                     REAL(KIND=r8) :: rsurf
 1941.                     REAL(KIND=r8) :: cog1
 1942.                     REAL(KIND=r8) :: cog2
 1943.                     REAL(KIND=r8) :: d2
 1944.                     REAL(KIND=r8) :: top
 1945.                     REAL(KIND=r8) :: xnum
 1946.                     REAL(KIND=r8) :: tem
 1947.                     INTEGER :: i
 1948.                 
 1949.  1------------<     DO i = 1, nmax
 1950.  1                     IF (icheck(i) == 1) THEN
 1951.  1                        rcp  (i) = rhoair(i)*cp
 1952.  1                        rc   (i) = rst(i,1)*fc(i)+rb(i)+rb(i)*fc(i)
 1953.  1                        coc      = (1.0_r8 -wc(i))/rc(i)+wc(i)/(2.0_r8 *rb(i))
 1954.  1                        rg   (i) = rst(i,2)*fg(i)
 1955.  1                        rsurf    = rsoil(i)*fg(i)
 1956.  1                        tem      = vcover(i,2)*(1.0_r8-wg(i))/(rg(i)+rd(i))
 1957.  1                        cog2     = tem    &
 1958.  1                             + (1.0_r8 -vcover(i,2))/(rsurf   +rd(i)) &
 1959.  1                             + vcover(i,2)/(rsurf   +rd(i)+44.0_r8)
 1960.  1                        cog1     = (cog2   -tem   )*hr(i)+tem
 1961.  1                        xnum     = wg(i)/rd(i)*vcover(i,2)
 1962.  1                        cog1     = cog1   +xnum
 1963.  1                        cog2     = cog2   +xnum
 1964.  1                        d2       = 1.0_r8 /ra(i)+coc+cog2
 1965.  1                        top      = coc*etc(i)+em(i)/ra(i)+cog1   *etg(i)
 1966.  1                        !
 1967.  1                        !     vapor pressure at level "a"
 1968.  1                        !
 1969.  1                        ea (i)  = top   /d2
 1970.  1                     END IF
 1971.  1------------>     END DO
 1972.                   END SUBROUTINE cut
 1973.                 
 1974.                 
 1975.                 
 1976.                   ! rbrd   :calculates bulk boundary layer resistance and aerodynamic
 1977.                   !         resistence betweenground and canopi air space4 as functions
 1978.                   !         of wind speed at top of canopy and temperatures.
 1979.                 
 1980.                 
 1981.                 
 1982.                   SUBROUTINE rbrd(rb    ,rd    ,tcta  ,tgta  ,u2    ,tg    ,rdc   ,rbc   ,itype , &
 1983.                        z2    ,mon   ,nmax  ,ncols , zlt2)
 1984.                     !
 1985.                     !
 1986.                     !         rb and rd as functions of u2 and temperatures. simplified( xue et
 1987.                     !         al. 1991)
 1988.                     !
 1989.                     !-----------------------------------------------------------------------
 1990.                     !       input parameters
 1991.                     !-----------------------------------------------------------------------
 1992.                     !   tcta..........diferenca entre tc-ta                      (k)
 1993.                     !   tgta..........diferenca entre tg-ta                      (k)
 1994.                     !   tg............ground temperature                         (k)
 1995.                     !   u2............wind speed at top of canopy                (m/s)
 1996.                     !   z2............height of canopy top                       (m)
 1997.                     !   zlt(cg).......canopy/ground cover leaf and stem area density
 1998.                     !                                                            (m**2/m**3)
 1999.                     !   rbc...........constant related to bulk boundary layer
 2000.                     !                 resistance
 2001.                     !   rdc...........constant related to aerodynamic resistance
 2002.                     !                 between ground and canopy air space
 2003.                     !-----------------------------------------------------------------------
 2004.                     !      output parameters
 2005.                     !-----------------------------------------------------------------------
 2006.                     !   rb............bulk boundary layer resistance             (s/m)
 2007.                     !   rd............aerodynamic resistance between ground      (s/m)
 2008.                     !                 and canopy air space
 2009.                     !-----------------------------------------------------------------------
 2010.                     !   ncols.........Numero de ponto por faixa de latitude
 2011.                     !   ityp..........numero das classes de solo 13
 2012.                     !   imon...........Numero maximo de meses no ano (12)
 2013.                     !   icg...........Parametros da vegetacao (icg=1 topo e icg=2 base)
 2014.                     !   mon...........Numero do mes do ano (1-12)
 2015.                     !   nmax .........
 2016.                     !   itype.........Classe de textura do solo
 2017.                     !=======================================================================
 2018.                     INTEGER, INTENT(in   ) :: ncols
 2019.                     INTEGER, INTENT(in   ) :: mon (ncols)
 2020.                     INTEGER, INTENT(in   ) :: nmax
 2021.                     !
 2022.                     !     vegetation and soil parameters
 2023.                     !
 2024.                     REAL(KIND=r8),    INTENT(in   ) :: z2    (ityp,imon)
 2025.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2026.                     REAL(KIND=r8),    INTENT(in   ) :: rdc   (ncols)
 2027.                     REAL(KIND=r8),    INTENT(in   ) :: rbc   (ncols)
 2028.                     !
 2029.                     !     prognostic variables
 2030.                     !
 2031.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2032.                     !
 2033.                     !     variables calculated from above and ambient conditions
 2034.                     !
 2035.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 2036.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 2037.                     REAL(KIND=r8),    INTENT(in   ) :: tcta  (ncols)
 2038.                     REAL(KIND=r8),    INTENT(in   ) :: tgta  (ncols)
 2039.                     REAL(KIND=r8),    INTENT(in   ) :: u2    (ncols)
 2040.                     REAL(KIND=r8),    INTENT(in  ) :: zlt2(ncols,icg)
 2041.                 
 2042.                     REAL(KIND=r8) :: temdif(ncols)
 2043.                     REAL(KIND=r8) :: fih   (ncols)
 2044.                 
 2045.                     REAL(KIND=r8), PARAMETER :: factg=88.29_r8
 2046.                     INTEGER :: i
 2047.                     INTEGER :: ntyp
 2048.                 
 2049.  1------------<     DO i = 1, nmax
 2050.  1                     ntyp=itype(i)
 2051.  1                     IF (tcta(i) > 0.0_r8 ) THEN
 2052.  1                        temdif(i)=tcta(i)+0.1_r8
 2053.  1                     ELSE
 2054.  1                        temdif(i)=        0.1_r8
 2055.  1                     END IF
 2056.  1                     rb (i)=1.0_r8  /(SQRT(u2(i))/rbc(i)+zlt2(i,1)*0.004_r8 )
 2057.  1                     IF (tgta(i) > 0) THEN
 2058.  1                        temdif(i)=tgta(i)+0.1_r8
 2059.  1                     ELSE
 2060.  1                        temdif(i)=        0.1_r8
 2061.  1                     END IF
 2062.  1                     fih(i)=sqrt &
 2063.  1                          (1.0_r8 +factg*temdif(i)*z2(ntyp,mon(i))/(tg(i)*u2(i)*u2(i)))
 2064.  1                     rd(i) =rdc(i)/(u2(i)*fih(i))
 2065.  1------------>     END DO
 2066.                   END SUBROUTINE rbrd
 2067.                 
 2068.                 
 2069.                 
 2070.                   ! vntlax :performs ventilation mass flux, based on deardorff, mwr, 1972?.
 2071.                 
 2072.                 
 2073.                   SUBROUTINE vntlax(ustarn, &
 2074.                        icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 2075.                        u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 2076.                        mon   ,nmax  ,jstneu,ncols )
 2077.                     !
 2078.                     !
 2079.                     !-----------------------------------------------------------------------
 2080.                     !         input parameters
 2081.                     !-----------------------------------------------------------------------
 2082.                     !
 2083.                     !   ea..........Pressao de vapor
 2084.                     !   ta..........Temperatura no nivel de fonte de calor do dossel (K)
 2085.                     !   um..........Razao entre zonal pseudo-wind (fourier) e seno da
 2086.                     !               colatitude
 2087.                     !   vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 2088.                     !               colatitude
 2089.                     !   qm..........specific humidity of reference (fourier)
 2090.                     !   tm..........Temperature of reference (fourier)
 2091.                     !   dzm  .......Altura media de referencia  para o vento para o calculo
 2092.                     !               da estabilidade do escoamento
 2093.                     !   grav........gravity constant      (m/s**2)
 2094.                     !   cpair.......specific heat of air (j/kg/k)
 2095.                     !   gasr........gas constant of dry air      (j/kg/k)
 2096.                     !   bps ........
 2097.                     !   z2..........height of canopy top
 2098.                     !   d...........displacement height                        (m)
 2099.                     !   epsfac......parametro para o gas 0.622
 2100.                     !
 2101.                     !
 2102.                     !
 2103.                     !-----------------------------------------------------------------------
 2104.                     !        output parameters
 2105.                     !-----------------------------------------------------------------------
 2106.                     !
 2107.                     !   ustar.........surface friction velocity  (m/s)
 2108.                     !   ra............Resistencia Aerodinamica (s/m)
 2109.                     !   u2............wind speed at top of canopy                (m/s)
 2110.                     !   ventmf........ventilation mass flux
 2111.                     !-----------------------------------------------------------------------
 2112.                     !=======================================================================
 2113.                     !   ncols........Numero de ponto por faixa de latitude
 2114.                     !   ityp.........Numero do tipo de solo
 2115.                     !   imon.........Numero maximo de meses no ano (12)
 2116.                     !   jstneu.......The first call to vntlat just gets the neutral values
 2117.                     !                of ustar and ventmf para jstneu=.TRUE..
 2118.                     !   mon..........Numero do mes do ano (1-12)
 2119.                     !   nmax.........
 2120.                     !   itype........Classe de textura do solo
 2121.                     !   z0...........roughness length
 2122.                     !   bps..........bps   (i)=sigki(1)=1.0e0/EXP(akappa*LOG(sig(k)))
 2123.                     !   cu...........friction  transfer coefficients.
 2124.                     !   ct...........heat transfer coefficients.
 2125.                     !   cuni.........neutral friction transfer  coefficients.
 2126.                     !   ctni.........neutral heat transfer coefficients.
 2127.                     !   icheck.......this version assumes dew-free conditions "icheck=1" to
 2128.                     !                estimate ea for buoyancy term in vntmf or ra.
 2129.                     !=======================================================================
 2130.                     INTEGER, INTENT(in   ) :: ncols
 2131.                 
 2132.                     LOGICAL, INTENT(in   ) :: jstneu
 2133.                     INTEGER, INTENT(in   ) :: mon(ncols)
 2134.                     INTEGER, INTENT(in   ) :: nmax
 2135.                     !
 2136.                     !     vegetation and soil parameters
 2137.                     !
 2138.                     REAL(KIND=r8),    INTENT(in   ) :: z2    (ityp,imon)
 2139.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2140.                     REAL(KIND=r8),    INTENT(in   ) :: d     (ncols)
 2141.                     REAL(KIND=r8),    INTENT(in   ) :: z0    (ncols)
 2142.                     !
 2143.                     !     the size of working area is ncols*187
 2144.                     !     atmospheric parameters as boudary values for sib
 2145.                     !
 2146.                     REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 2147.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 2148.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 2149.                     !
 2150.                     !     variables calculated from above and ambient conditions
 2151.                     !
 2152.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 2153.                     REAL(KIND=r8),    INTENT(in   ) :: ta    (ncols)
 2154.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 2155.                     !
 2156.                     !     this is for coupling with closure turbulence model
 2157.                     !
 2158.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 2159.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 2160.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 2161.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 2162.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 2163.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 2164.                     INTEGER, INTENT(in   ) :: icheck(ncols)
 2165.                     REAL(KIND=r8),    INTENT(inout) :: ustarn(ncols)
 2166.                 
 2167.                 
 2168.                     !REAL(KIND=r8) :: thm(ncols)      !**(JP)** scalar
 2169.                     REAL(KIND=r8) :: thm
 2170.                     !REAL(KIND=r8) :: ros(ncols)      !**(JP)** unused
 2171.                     REAL(KIND=r8) :: speedm(ncols)
 2172.                     !REAL(KIND=r8) :: thvgm(ncols)    !**(JP)** scalar
 2173.                     REAL(KIND=r8) :: thvgm
 2174.                     !REAL(KIND=r8) :: rib(ncols)      !**(JP)** scalar
 2175.                     REAL(KIND=r8) :: rib
 2176.                     !REAL(KIND=r8) :: cui(ncols)      !**(JP)** scalar
 2177.                     REAL(KIND=r8) :: cui
 2178.                     !REAL(KIND=r8) :: ran(ncols)      !**(JP)** unused
 2179.                     !REAL(KIND=r8) :: cti(ncols)      !**(JP)** scalar
 2180.                     REAL(KIND=r8) :: cti
 2181.                     !REAL(KIND=r8) :: ct      (ncols)      !**(JP)** unused
 2182.                 
 2183.                     REAL(KIND=r8), PARAMETER ::  vkrmn=0.40_r8
 2184.                     REAL(KIND=r8), PARAMETER ::  fsc=66.85_r8
 2185.                     REAL(KIND=r8), PARAMETER ::  ftc=0.904_r8
 2186.                     REAL(KIND=r8), PARAMETER ::  fvc=0.315_r8
 2187.                     REAL(KIND=r8) :: rfac
 2188.                     REAL(KIND=r8) :: vkrmni
 2189.                     REAL(KIND=r8) :: g2
 2190.                     REAL(KIND=r8) :: zl
 2191.                     REAL(KIND=r8) :: xct1
 2192.                     REAL(KIND=r8) :: xct2
 2193.                     REAL(KIND=r8) :: xctu1
 2194.                     REAL(KIND=r8) :: xctu2
 2195.                     REAL(KIND=r8) :: grib
 2196.                     REAL(KIND=r8) :: grzl
 2197.                     REAL(KIND=r8) :: grz2
 2198.                     REAL(KIND=r8) :: fvv
 2199.                     REAL(KIND=r8) :: ftt
 2200.                     REAL(KIND=r8) :: rzl
 2201.                     REAL(KIND=r8) :: rz2
 2202.                     INTEGER :: i
 2203.                     INTEGER :: ntyp
 2204.                 
 2205.                 
 2206.                     rfac  =1.0e2_r8 /gasr
 2207.                 
 2208.                     vkrmni=1.0_r8  /vkrmn
 2209.                     g2 = 0.75_r8
 2210.                 
 2211.  1------------<     DO i = 1, nmax
 2212.  1                     IF (icheck(i) == 1) THEN
 2213.  1                        speedm(i)=SQRT(um(i)**2+vm(i)**2)
 2214.  1                        speedm(i)=MAX(2.0_r8  ,speedm(i))
 2215.  1                     END IF
 2216.  1------------>     END DO
 2217.                     !
 2218.                     !     cu and ct are the friction and heat transfer coefficients.
 2219.                     !     cun and ctn are the neutral friction and heat transfer
 2220.                     !     coefficients.
 2221.                     !
 2222.                     IF (jstneu) THEN
 2223.  1------------<        DO i = 1, nmax
 2224.  1                        ntyp=itype(i)
 2225.  1                        zl = z2(ntyp,mon(i)) + 11.785_r8  * z0(i)
 2226.  1                        cuni(i)=LOG((dzm(i)-d(i))/z0(i))*vkrmni
 2227.  1                        ustarn(i)=speedm(i)/cuni(i)
 2228.  1                        IF (zl < dzm(i)) THEN
 2229.  1                           xct1 = LOG((dzm(i)-d(i))/(zl-d(i)))
 2230.  1                           xct2 = LOG((zl-d(i))/z0(i))
 2231.  1                           xctu1 = xct1
 2232.  1                           xctu2 = LOG((zl-d(i))/(z2(ntyp,mon(i))-d(i)))
 2233.  1                           ctni(i) = (xct1 + g2 * xct2) *vkrmni
 2234.  1                        ELSE
 2235.  1                           xct2 =  LOG((dzm(i)-d(i))/z0(i))
 2236.  1                           xctu1 =  0.0_r8
 2237.  1                           xctu2 =  LOG((dzm(i)-d(i))/(z2(ntyp,mon(i))-d(i)))
 2238.  1                           ctni(i) = g2 * xct2 *vkrmni
 2239.  1                        END IF
 2240.  1                        !
 2241.  1                        !     neutral values of ustar and ventmf
 2242.  1                        !
 2243.  1                        u2(i) = speedm(i) - ustarn(i)*vkrmni*(xctu1 + g2*xctu2)
 2244.  1------------>        END DO
 2245.                        RETURN
 2246.                     END IF
 2247.                     !
 2248.                     !     stability branch based on bulk richardson number.
 2249.                     !
 2250.  1------------<     DO i = 1, nmax
 2251.  1                     IF (icheck(i) == 1) THEN
 2252.  1                        !
 2253.  1                        !     freelm(i)=.false.
 2254.  1                        !
 2255.  1                        thm= tm(i)*bps(i)
 2256.  1                        ntyp=itype(i)
 2257.  1                        zl = z2(ntyp,mon(i)) + 11.785_r8  * z0(i)
 2258.  1                        thvgm   = ta(i)-thm
 2259.  1                        rib     =-thvgm   *grav*(dzm(i)-d(i)) &
 2260.  1                             /(thm*(speedm(i)-u2(i))**2)
 2261.  1                        ! Manzi Suggestion:
 2262.  1                        ! rib   (i)=max(-10.0_r8  ,rib(i))
 2263.  1                        rib      =MAX(-1.5_r8  ,rib   )
 2264.  1                        rib      =MIN( 0.165_r8  ,rib   )
 2265.  1                        IF (rib    < 0.0_r8) THEN
 2266.  1                           grib = -rib
 2267.  1                           grzl = -rib   * (zl-d(i))/(dzm(i)-d(i))
 2268.  1                           grz2 = -rib   * z0(i)/(dzm(i)-d(i))
 2269.  1                           fvv = fvc*grib
 2270.  1                           IF (zl < dzm(i)) THEN
 2271.  1                              ftt = (ftc*grib) + (g2-1.0_r8) * (ftc*grzl) - g2 * (ftc*grz2)
 2272.  1                           ELSE
 2273.  1                              ftt = g2*((ftc*grib) - (ftc*grz2))
 2274.  1                           END IF
 2275.  1                           cui    = cuni(i) - fvv
 2276.  1                           cti    = ctni(i) - ftt
 2277.  1                        ELSE
 2278.  1                           rzl = rib   /(dzm(i)-d(i))*(zl-d(i))
 2279.  1                           rz2 = rib   /(dzm(i)-d(i))*z0(i)
 2280.  1                           fvv = fsc*rib
 2281.  1                           IF (zl < dzm(i)) THEN
 2282.  1                              ftt = (fsc*rib) + (g2-1) * (fsc*rzl) - g2 * (fsc*rz2)
 2283.  1                           ELSE
 2284.  1                              ftt = g2 * ((fsc*rib) - (fsc*rz2))
 2285.  1                           END IF
 2286.  1                           cui    = cuni(i) + fvv
 2287.  1                           cti    = ctni(i) + ftt
 2288.  1                        ENDIF
 2289.  1                        cu    (i)=1.0_r8/cui
 2290.  1                        !**(JP)** ct is not used anywhere else
 2291.  1                        !ct    (i)=1.0_r8/cti(i)
 2292.  1                        !
 2293.  1                        !
 2294.  1                        !     surface friction velocity and ventilation mass flux
 2295.  1                        !
 2296.  1                        ustar (i)=speedm(i)*cu(i)
 2297.  1                        ra(i) = cti    / ustar(i)
 2298.  1                        !**(JP)** ran is not used anywhere else
 2299.  1                        !ran(i) = ctni(i) / ustarn(i)
 2300.  1                        !ran(i) = MAX(ran(i), 0.8_r8 )
 2301.  1                        ra(i) = MAX(ra(i), 0.8_r8 )
 2302.  1                     END IF
 2303.  1------------>     END DO
 2304.                   END SUBROUTINE vntlax
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 2304 
  Local variable "RFAC" is assigned a value but never used.

 2305.                 
 2306.                 
 2307.                 
 2308.                 
 2309.                   ! runoff :performs inter-layer moisture exchanges.
 2310.                 
 2311.                 
 2312.                 
 2313.                   SUBROUTINE runoff( &
 2314.                        roff  ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols    )
 2315.                     !
 2316.                     !-----------------------------------------------------------------------
 2317.                     ! input parameters
 2318.                     !-----------------------------------------------------------------------
 2319.                     !   w(3)     roff     slope    bee      satco     zdepth
 2320.                     !   phsat    poros    pie      dtc3x    snomel
 2321.                     !   w(3)
 2322.                     !
 2323.                     !-----------------------------------------------------------------------
 2324.                     ! output parameters
 2325.                     !-----------------------------------------------------------------------
 2326.                     !   w(3)     roff
 2327.                     !-----------------------------------------------------------------------
 2328.                     !
 2329.                     ! roff.......Runoff (escoamente superficial e drenagem)(m)
 2330.                     ! slope......Inclinacao de perda hidraulica na camada profunda do solo
 2331.                     ! bee........Fator de retencao da umidade no solo (expoente da umidade do
 2332.                     !            solo)
 2333.                     ! satco......Condutividade hidraulica do solo saturado(m/s)
 2334.                     ! zdepth(id).Profundidade das camadas de solo id=1 superficial
 2335.                     ! zdepth(id).Profundidade das camadas de solo id=2 camada de raizes
 2336.                     ! zdepth(id).Profundidade das camadas de solo id=3 camada de drenagem
 2337.                     ! phsat......Potencial matricial do solo saturado(m) (tensao do solo em
 2338.                     !            saturacao)
 2339.                     ! poros......Porosidade do solo
 2340.                     ! pie........pi = 3.1415926e0
 2341.                     ! dtc3x......time increment dt
 2342.                     ! snomel.....Calor latente de fusao(J/kg)
 2343.                     ! w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 2344.                     ! w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 2345.                     ! w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 2346.                     ! capac(iv)..Agua interceptada iv=1 no dossel (m)
 2347.                     ! capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 2348.                     ! tg.........Temperatura da superficie do solo  (K)
 2349.                     ! td.........Temperatura do solo profundo (K)
 2350.                     ! itype......Classe de textura do solo
 2351.                     ! tf.........Temperatura de congelamento (K)
 2352.                     ! idp........Parametro para as camadas de solo idp=1->3
 2353.                     ! nmax.......
 2354.                     ! ncols......Numero de ponto por faixa de latitude
 2355.                     ! ityp.......13
 2356.                     !-----------------------------------------------------------------------
 2357.                     INTEGER, INTENT(in   ) :: ncols
 2358.                 
 2359.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 2360.                     INTEGER, INTENT(in   ) :: nmax
 2361.                 
 2362.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2363.                     !
 2364.                     !     prognostic variables
 2365.                     !
 2366.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2367.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 2368.                     REAL(KIND=r8),    INTENT(in   ) :: capac(ncols,2)
 2369.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 2370.                     !
 2371.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 2372.                     !
 2373.                     REAL(KIND=r8),    INTENT(inout) :: roff (ncols)
 2374.                 
 2375.                     REAL(KIND=r8)    :: q3g   (ncols)
 2376.                     REAL(KIND=r8)    :: div   (ncols)
 2377.                     REAL(KIND=r8)    :: twi   (ncols,3)
 2378.                     REAL(KIND=r8)    :: twip  (ncols,3)
 2379.                     REAL(KIND=r8)    :: twipp (ncols,3)
 2380.                     REAL(KIND=r8)    :: avk   (ncols)
 2381.                     REAL(KIND=r8)    :: aaa_1, aaa_2
 2382.                     REAL(KIND=r8)    :: bbb_1, bbb_2
 2383.                     REAL(KIND=r8)    :: ccc_1, ccc_2
 2384.                     REAL(KIND=r8)    :: qqq_1, qqq_2
 2385.                 
 2386.                     REAL(KIND=r8)    :: subdt
 2387.                     REAL(KIND=r8)    :: subdti
 2388.                     REAL(KIND=r8)    :: slop
 2389.                     REAL(KIND=r8)    :: pows
 2390.                     REAL(KIND=r8)    :: wmax
 2391.                     REAL(KIND=r8)    :: wmin
 2392.                     REAL(KIND=r8)    :: pmax
 2393.                     REAL(KIND=r8)    :: pmin
 2394.                     REAL(KIND=r8)    :: dpdw
 2395.                     REAL(KIND=r8)    :: rsame
 2396.                     REAL(KIND=r8)    :: tsnow
 2397.                     REAL(KIND=r8)    :: areas
 2398.                     REAL(KIND=r8)    :: tgs
 2399.                     REAL(KIND=r8)    :: ts
 2400.                     REAL(KIND=r8)    :: props
 2401.                     REAL(KIND=r8)    :: dpdwdz
 2402.                     REAL(KIND=r8)    :: denom
 2403.                     REAL(KIND=r8)    :: rdenom
 2404.                     REAL(KIND=r8)    :: qmax
 2405.                     REAL(KIND=r8)    :: qmin
 2406.                     REAL(KIND=r8)    :: excess
 2407.                     REAL(KIND=r8)    :: deficit
 2408.                     INTEGER :: n
 2409.                     INTEGER :: i
 2410.                     INTEGER :: ntyp
 2411.                     REAL(KIND=r8),    PARAMETER     :: smal2 = 1.0e-3_r8
 2412.                 
 2413.                     subdt =dtc3x
 2414.                     subdti=1.0_r8 /dtc3x
 2415.  A-----------<>     q3g=0.0_r8
 2416.                     !
 2417.                     !     eliinate negative soil moisture
 2418.                     !
 2419.  1------------<     DO n = 1, nmax
 2420.  1                     IF (w(n,1) < 0.0_r8) w(n,1)=smal2
 2421.  1                     IF (w(n,2) < 0.0_r8) w(n,2)=smal2
 2422.  1                     IF (w(n,3) < 0.0_r8) w(n,3)=smal2
 2423.  1------------>     END DO
 2424.                 
 2425.  1------------<     DO i = 1, 3
 2426.  1 2----------<        DO n = 1, nmax
 2427.  1 2                      ntyp      =itype(n)
 2428.  1 2                      twi(n,i)=MIN(1.0_r8, MAX(0.03_r8,w(n,i)))
 2429.  1 2                      twip(n,i) =EXP(-bee(ntyp)*LOG(twi(n,i)))
 2430.  1 2                      twipp(n,i)=EXP((2.0_r8*bee(ntyp)+3.0_r8)*LOG(MIN(1.0_r8,twi(n,i))))
 2431.  1 2---------->        END DO
 2432.  1------------>     END DO
 2433.                 
 2434.  1------------<     DO n = 1, nmax
 2435.  1                     ntyp = itype(n)
 2436.  1                     slop = 0.1736_r8
 2437.  1                     IF (poros(ntyp) == 0.4352_r8) slop = 0.0872_r8
 2438.  1                     IF (poros(ntyp) == 0.4577_r8) slop = 0.3420_r8
 2439.  1                     !
 2440.  1                     !     calculation of gravitationally driven drainage from w(3) : taken
 2441.  1                     !     as an integral of time varying conductivity.addition of liston
 2442.  1                     !     baseflow term to original q3g to insure flow in
 2443.  1                     !     dry season. modified liston baseflow constant scaled
 2444.  1                     !     by available water.
 2445.  1                     !
 2446.  1                     !     q3g (q3) : equation (62) , se-86
 2447.  1                     !
 2448.  1                     pows    = 2.0_r8 *bee(ntyp)+2.0_r8
 2449.  1                     q3g (n) = EXP(-pows*LOG(twi(n,3))) &
 2450.  1                          +satco(ntyp)/(zdepth(ntyp,3)*poros(ntyp))* &
 2451.  1                          slop*pows*subdt
 2452.  1                     q3g (n) = EXP(LOG(q3g(n))/pows)
 2453.  1                     q3g (n) =-(1.0_r8 /q3g(n)-w(n,3)) &
 2454.  1                          *poros(ntyp)*zdepth(ntyp,3)*subdti
 2455.  1                     q3g (n) = MAX(0.0_r8 ,q3g(n))
 2456.  1                     q3g (n) = MIN(q3g(n), w(n,3)*poros(ntyp)*zdepth(ntyp,3) &
 2457.  1                          *subdti)
 2458.  1                     q3g (n) = q3g(n)+0.002_r8*poros(ntyp)*zdepth(ntyp,3)*0.5_r8 &
 2459.  1                          /86400.0_r8*w(n,3)
 2460.  1------------>     END DO
 2461.                     !
 2462.                     !     calculation of inter-layer exchanges of water due to gravitation
 2463.                     !     and hydraulic gradient. the values of w(x) + dw(x) are used to
 2464.                     !     calculate the potential gradients between layers.
 2465.                     !     modified calculation of mean conductivities follows milly and
 2466.                     !     eagleson (1982 ), reduces recharge flux to top layer.
 2467.                     !
 2468.                     !      dpdw           : estimated derivative of soil moisture potential
 2469.                     !                       with respect to soil wetness. assumption of
 2470.                     !                       gravitational drainage used to estimate likely
 2471.                     !                       minimum wetness over the time step.
 2472.                     !
 2473.                     !      qqq  (q     )  : equation (61) , s-86
 2474.                     !             i,i+1
 2475.                     !            -
 2476.                     !      avk  (k     )  : equation (4.14) , milly and eagleson (1982)
 2477.                     !             i,i+1
 2478.                     !
 2479.  1------------<     DO n = 1, nmax
 2480.  1                     ntyp=itype(n)
 2481.  1                     wmax = MAX( w(n,1), w(n,2), w(n,3), 0.05_r8 )
 2482.  1                     wmax = MIN( wmax, 1.0_r8 )
 2483.  1                     pmax = EXP(-bee(ntyp)*LOG(wmax))
 2484.  1                     wmin = EXP(-1.0_r8/bee(ntyp)*LOG(pmax-2.0_r8/(phsat(ntyp) &
 2485.  1                          *(zdepth(ntyp,1)+2.0_r8*zdepth(ntyp,2)+zdepth(ntyp,3)))))
 2486.  1                     wmin = MIN( w(n,1), w(n,2), w(n,3), wmin )
 2487.  1                     wmin = MAX( wmin, 0.02_r8 )
 2488.  1                     pmin = EXP(-bee(ntyp)*LOG(wmin))
 2489.  1                     dpdw = phsat(ntyp)*( pmax-pmin )/( wmax-wmin )
 2490.  1              
 2491.  1                     ! hand unrolling of next do loop, first iteration
 2492.  1              
 2493.  1                     rsame = 0.0_r8
 2494.  1                     avk(n)    =twip(n,1)*twipp(n,1)-twip(n,1+1)*twipp(n,1+1)
 2495.  1                     div(n)    =twip(n,1+1) - twip(n,1)
 2496.  1                     IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2497.  1                     avk(n)=satco(ntyp)*avk(n)/ &
 2498.  1                          ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2499.  1                     avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,1),twipp(n,1+1)))
 2500.  1                     avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2501.  1                          *MAX(twipp(n,1),twipp(n,1+1))))
 2502.  1                     !
 2503.  1                     !     conductivities and base flow reduced when temperature drops below
 2504.  1                     !     freezing
 2505.  1                     !
 2506.  1                     tsnow = MIN (tf-0.01_r8, tg(n))
 2507.  1                     areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2508.  1                     tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2509.  1                     ts  = tgs*(2-1) + td(n)*(1-1)
 2510.  1                     props = (ts-(tf-10.0_r8))/10.0_r8
 2511.  1                     props = MAX(0.05_r8,MIN(1.0_r8, props))
 2512.  1                     avk(n) = avk(n) * props
 2513.  1                     q3g(n) = q3g(n) * props
 2514.  1                     !
 2515.  1                     !     backward implicit calculation of flows between soil layers
 2516.  1                     !
 2517.  1                     dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,1) + zdepth(ntyp,1+1) )
 2518.  1                     aaa_1=1.0_r8+avk(n)*dpdwdz* &
 2519.  1                          (1.0_r8/zdepth(ntyp,1)+1.0_r8/zdepth(ntyp,1+1))      &
 2520.  1                          *subdt/poros(ntyp)
 2521.  1                     bbb_1 =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2522.  1                     ccc_1 = avk(n) * (dpdwdz * ( w(n,1)-w(n,1+1) )+1.0_r8+(1-1) &
 2523.  1                          *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2524.  1              
 2525.  1                     ! hand unrolling of next do loop, second iteration
 2526.  1              
 2527.  1                     rsame = 0.0_r8
 2528.  1                     avk(n)    =twip(n,2)*twipp(n,2)-twip(n,2+1)*twipp(n,2+1)
 2529.  1                     div(n)    =twip(n,2+1) - twip(n,2)
 2530.  1                     IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2531.  1                     avk(n)=satco(ntyp)*avk(n)/ &
 2532.  1                          ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2533.  1                     avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,2),twipp(n,2+1)))
 2534.  1                     avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2535.  1                          *MAX(twipp(n,2),twipp(n,2+1))))
 2536.  1                     !
 2537.  1                     !     conductivities and base flow reduced when temperature drops below
 2538.  1                     !     freezing
 2539.  1                     !
 2540.  1                     tsnow = MIN (tf-0.01_r8, tg(n))
 2541.  1                     areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2542.  1                     tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2543.  1                     ts  = tgs*(2-2) + td(n)*(2-1)
 2544.  1                     props = (ts-(tf-10.0_r8))/10.0_r8
 2545.  1                     props = MAX(0.05_r8,MIN(1.0_r8, props))
 2546.  1                     avk(n) = avk(n) * props
 2547.  1                     q3g(n) = q3g(n) * props
 2548.  1                     !
 2549.  1                     !     backward implicit calculation of flows between soil layers
 2550.  1                     !
 2551.  1                     dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,2) + zdepth(ntyp,2+1) )
 2552.  1                     aaa_2=1.0_r8+avk(n)*dpdwdz* &
 2553.  1                          (1.0_r8/zdepth(ntyp,2)+1.0_r8/zdepth(ntyp,2+1))      &
 2554.  1                          *subdt/poros(ntyp)
 2555.  1                     bbb_2 =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2556.  1                     ccc_2 = avk(n) * (dpdwdz * ( w(n,2)-w(n,2+1) )+1.0_r8+(2-1) &
 2557.  1                          *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2558.  1              
 2559.  1              
 2560.  1                     !       DO i = 1, 2
 2561.  1                     !          rsame = 0.0_r8
 2562.  1                     !          avk(n)    =twip(n,i)*twipp(n,i)-twip(n,i+1)*twipp(n,i+1)
 2563.  1                     !          div(n)    =twip(n,i+1) - twip(n,i)
 2564.  1                     !          IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2565.  1                     !          avk(n)=satco(ntyp)*avk(n)/ &
 2566.  1                     !               ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2567.  1                     !          avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,i),twipp(n,i+1)))
 2568.  1                     !          avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2569.  1                     !               *MAX(twipp(n,i),twipp(n,i+1))))
 2570.  1                     !          !
 2571.  1                     !          !     conductivities and base flow reduced when temperature drops below
 2572.  1                     !          !     freezing
 2573.  1                     !          !
 2574.  1                     !          tsnow = MIN (tf-0.01_r8, tg(n))
 2575.  1                     !          areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2576.  1                     !          tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2577.  1                     !          ts  = tgs*(2-i) + td(n)*(i-1)
 2578.  1                     !          props = (ts-(tf-10.0_r8))/10.0_r8
 2579.  1                     !          props = MAX(0.05_r8,MIN(1.0_r8, props))
 2580.  1                     !          avk(n) = avk(n) * props
 2581.  1                     !          q3g(n) = q3g(n) * props
 2582.  1                     !          !
 2583.  1                     !          !     backward implicit calculation of flows between soil layers
 2584.  1                     !          !
 2585.  1                     !          dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,i) + zdepth(ntyp,i+1) )
 2586.  1                     !          aaa(i)=1.0_r8+avk(n)*dpdwdz* &
 2587.  1                     !               (1.0_r8/zdepth(ntyp,i)+1.0_r8/zdepth(ntyp,i+1))      &
 2588.  1                     !               *subdt/poros(ntyp)
 2589.  1                     !          bbb(i) =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2590.  1                     !          ccc(i) = avk(n) * (dpdwdz * ( w(n,i)-w(n,i+1) )+1.0_r8+(i-1) &
 2591.  1                     !               *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2592.  1                     !       END DO
 2593.  1                     denom    = ( aaa_1*aaa_2 - bbb_1*bbb_2 )
 2594.  1                     rdenom   = 0.0_r8
 2595.  1                     IF (ABS(denom) < 1.e-6_r8 ) rdenom = 1.0_r8
 2596.  1                     rdenom   = ( 1.0_r8-rdenom)/( denom + rdenom )
 2597.  1                     qqq_1   = ( aaa_2*ccc_1 - bbb_1*ccc_2 ) * rdenom
 2598.  1                     qqq_2   = ( aaa_1*ccc_2 - bbb_2*ccc_1 ) * rdenom
 2599.  1                     !
 2600.  1                     !     update wetness of each soil moisture layer due to layer interflow
 2601.  1                     !     and base flow.
 2602.  1                     !
 2603.  1                     w(n,3)  = w(n,3) - q3g(n)*subdt/(poros(ntyp)*zdepth(ntyp,3))
 2604.  1                     roff(n) = roff(n) + q3g(n) * subdt
 2605.  1              
 2606.  1                     ! hand unrolling of next do loop, first iteration
 2607.  1              
 2608.  1                     qmax     =  w(n,1)   * (poros(ntyp)*zdepth(ntyp,1)  /subdt)
 2609.  1                     qmin     = -w(n,1+1) * (poros(ntyp)*zdepth(ntyp,1+1)/subdt)
 2610.  1                     qqq_1   =  MIN( qqq_1,qmax)
 2611.  1                     qqq_1   =  MAX( qqq_1,qmin)
 2612.  1                     w(n,1)   =  w(n,1)  -qqq_1/(poros(ntyp)*zdepth(ntyp,1) /subdt)
 2613.  1                     w(n,1+1) =  w(n,1+1)+ &
 2614.  1                          qqq_1/(poros(ntyp)*zdepth(ntyp,1+1)/subdt)
 2615.  1              
 2616.  1                     ! hand unrolling of next do loop, second iteration
 2617.  1              
 2618.  1                     qmax     =  w(n,2)   * (poros(ntyp)*zdepth(ntyp,2)  /subdt)
 2619.  1                     qmin     = -w(n,2+1) * (poros(ntyp)*zdepth(ntyp,2+1)/subdt)
 2620.  1                     qqq_2   =  MIN( qqq_2,qmax)
 2621.  1                     qqq_2   =  MAX( qqq_2,qmin)
 2622.  1                     w(n,2)   =  w(n,2)  -qqq_2/(poros(ntyp)*zdepth(ntyp,2) /subdt)
 2623.  1                     w(n,2+1) =  w(n,2+1)+ &
 2624.  1                          qqq_2/(poros(ntyp)*zdepth(ntyp,2+1)/subdt)
 2625.  1                     !     DO i = 1, 2
 2626.  1                     !        qmax     =  w(n,i)   * (poros(ntyp)*zdepth(ntyp,i)  /subdt)
 2627.  1                     !        qmin     = -w(n,i+1) * (poros(ntyp)*zdepth(ntyp,i+1)/subdt)
 2628.  1                     !        qqq(i)   =  MIN( qqq(i),qmax)
 2629.  1                     !        qqq(i)   =  MAX( qqq(i),qmin)
 2630.  1                     !        w(n,i)   =  w(n,i)  -qqq(i)/(poros(ntyp)*zdepth(ntyp,i) /subdt)
 2631.  1                     !        w(n,i+1) =  w(n,i+1)+ &
 2632.  1                     !             qqq(i)/(poros(ntyp)*zdepth(ntyp,i+1)/subdt)
 2633.  1                     !     END DO
 2634.  1              
 2635.  1                     ! hand unrolling of next do loop, first iteration
 2636.  1              
 2637.  1                     excess   = MAX(0.0_r8,(w(n,1) - 1.0_r8))
 2638.  1                     w(n,1)   = w(n,1) - excess
 2639.  1                     roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,1)
 2640.  1              
 2641.  1                     ! hand unrolling of next do loop, second iteration
 2642.  1              
 2643.  1                     excess   = MAX(0.0_r8,(w(n,2) - 1.0_r8))
 2644.  1                     w(n,2)   = w(n,2) - excess
 2645.  1                     roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,2)
 2646.  1              
 2647.  1                     ! hand unrolling of next do loop, third iteration
 2648.  1              
 2649.  1                     excess   = MAX(0.0_r8,(w(n,3) - 1.0_r8))
 2650.  1                     w(n,3)   = w(n,3) - excess
 2651.  1                     roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,3)
 2652.  1              
 2653.  1                     !     DO i = 1, 3
 2654.  1                     !        excess   = MAX(0.0_r8,(w(n,i) - 1.0_r8))
 2655.  1                     !        w(n,i)   = w(n,i) - excess
 2656.  1                     !        roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,i)
 2657.  1                     !     END DO
 2658.  1              
 2659.  1                     ! hand unrolling of next do loop, first iteration
 2660.  1              
 2661.  1                     deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,1)))
 2662.  1                     w(n,1)    = w(n,1) + deficit
 2663.  1                     w(n,1+1)  = w(n,1+1)-deficit*zdepth(ntyp,1)/zdepth(ntyp,1+1)
 2664.  1              
 2665.  1                     ! hand unrolling of next do loop, second iteration
 2666.  1              
 2667.  1                     deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,2)))
 2668.  1                     w(n,2)    = w(n,2) + deficit
 2669.  1                     w(n,2+1)  = w(n,2+1)-deficit*zdepth(ntyp,2)/zdepth(ntyp,2+1)
 2670.  1              
 2671.  1                     !
 2672.  1                     !     prevent negative values of www(i)
 2673.  1                     !
 2674.  1              
 2675.  1                     !       DO i = 1,2
 2676.  1                     !          deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,i)))
 2677.  1                     !          w(n,i)    = w(n,i) + deficit
 2678.  1                     !          w(n,i+1)  = w(n,i+1)-deficit*zdepth(ntyp,i)/zdepth(ntyp,i+1)
 2679.  1                     !       END DO
 2680.  1              
 2681.  1                     w(n,3)      = MAX (w(n,3),1.0e-12_r8)
 2682.  1------------>     END DO
 2683.                   END SUBROUTINE runoff
 2684.                 
 2685.                 
 2686.                   ! stres2 :calculates the adjustment to light dependent stomatal resistance
 2687.                   !         by temperature, humidity and stress factors (simplified).
 2688.                 
 2689.                 
 2690.                 
 2691.                   SUBROUTINE stres2( &
 2692.                        icount,ft1   ,fp1   ,icheck,ta    ,ea    ,rst   ,phsoil,stm   , &
 2693.                        tc    ,tg    ,w     ,vcover,itype , &
 2694.                        rootd ,zdepth,nmax  ,ncols ,topt2 ,tll2  ,tu2   , &
 2695.                        defac2,ph12  ,ph22)
 2696.                     !
 2697.                     !
 2698.                     !-----------------------------------------------------------------------
 2699.                     ! ityp........numero das classes de solo 13
 2700.                     ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 2701.                     ! idp.........Parametro para as camadas de solo idp=1->3
 2702.                     ! icount......
 2703.                     ! ft1.........temperature  factor   simplified
 2704.                     ! fp1.........soil water potential factor simplified
 2705.                     ! hl........heat of evaporation of water   (j/kg)
 2706.                     ! nmax........
 2707.                     ! topt........Temperatura ideal de funcionamento estomatico
 2708.                     ! tll.........Temperatura minima de funcionamento estomatico
 2709.                     ! tu..........Temperatura maxima de funcionamento estomatico
 2710.                     ! defac.......Parametro de deficit de pressao de vapor d'agua
 2711.                     ! ph1.........Coeficiente para o efeito da agua no solo
 2712.                     ! ph2 ........Potencial de agua no solo para ponto de Wilting
 2713.                     ! rootd.......Profundidade das raizes
 2714.                     ! zdepth......Profundidade para as tres camadas de solo
 2715.                     ! itype.......Classe de textura do solo
 2716.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 2717.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=2 Bottom
 2718.                     ! tc..........Temperatura da copa "dossel"(K)
 2719.                     ! tg .........Temperatura da superficie do solo (K)
 2720.                     ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 2721.                     ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 2722.                     ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 2723.                     ! ta..........Temperatura no nivel de fonte de calor do dossel (K)
 2724.                     ! ea..........Pressao de vapor
 2725.                     ! rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 2726.                     ! phsoil......soil moisture potential of the i-th soil layer
 2727.                     ! stm.........Resisttencia Estomatica "Stomatal resistence" (s/m)
 2728.                     ! icheck......this version assumes dew-free conditions "icheck=1" to
 2729.                     !             estimate ea for buoyancy term in vntmf or ra.
 2730.                     !-----------------------------------------------------------------------
 2731.                     INTEGER, INTENT(IN   ) :: ncols
 2732.                     INTEGER, INTENT(IN   ) :: icount
 2733.                     REAL(KIND=r8),    INTENT(INOUT) :: ft1   (ncols)
 2734.                     REAL(KIND=r8),    INTENT(INOUT) :: fp1   (ncols)
 2735.                     !
 2736.                     INTEGER, INTENT(in   ) :: nmax
 2737.                     !
 2738.                     !     vegetation and soil parameters
 2739.                     !
 2740.                     REAL(KIND=r8),    INTENT(in   ) :: rootd (ityp,icg)
 2741.                     REAL(KIND=r8),    INTENT(in   ) :: zdepth(ityp,idp)
 2742.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2743.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 2744.                     !
 2745.                     !     prognostic variables
 2746.                     !
 2747.                     REAL(KIND=r8),    INTENT(in   ) :: tc   (ncols)
 2748.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2749.                     REAL(KIND=r8),    INTENT(in   ) :: w    (ncols,3)
 2750.                     !
 2751.                     !     variables calculated from above and ambient conditions
 2752.                     !
 2753.                     REAL(KIND=r8),    INTENT(in   ) :: ta    (ncols)
 2754.                     REAL(KIND=r8),    INTENT(in   ) :: ea    (ncols)
 2755.                     REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 2756.                     REAL(KIND=r8),    INTENT(in   ) :: phsoil(ncols,idp)
 2757.                     REAL(KIND=r8),    INTENT(in   ) :: stm   (ncols,icg)
 2758.                     INTEGER, INTENT(in   ) :: icheck(ncols)
 2759.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2 (ncols,icg)
 2760.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2  (ncols,icg)
 2761.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2   (ncols,icg)
 2762.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2(ncols,icg)
 2763.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12  (ncols,icg)
 2764.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22  (ncols,icg)
 2765.                     !
 2766.                     REAL(KIND=r8)    :: tv  (ncols)
 2767.                     REAL(KIND=r8)    :: d2  (ncols)
 2768.                     REAL(KIND=r8)    :: ft  (ncols)
 2769.                     REAL(KIND=r8)    :: drop(ncols)
 2770.                     REAL(KIND=r8)    :: fd  (ncols)
 2771.                     REAL(KIND=r8)    :: fp  (ncols)
 2772.                     REAL(KIND=r8)    :: ftpd(ncols)
 2773.                     REAL(KIND=r8)    :: dep(3)
 2774.                     REAL(KIND=r8)    :: hl3i
 2775.                     REAL(KIND=r8)    :: xrot
 2776.                     REAL(KIND=r8)    :: xdr
 2777.                     REAL(KIND=r8)    :: arg
 2778.                     INTEGER :: iveg
 2779.                     INTEGER :: i
 2780.                     INTEGER :: ntyp
 2781.                     !
 2782.                     !     humidity, temperature and transpiration factors
 2783.                     !
 2784.  D-----------<>     tv=0.0_r8   !  CALL reset(tv,ncols*13)
 2785.                     hl3i=1.0_r8   /(hl*1000.0_r8  )
 2786.                     iveg=1
 2787.                 
 2788.                     IF (icount == 1) THEN
 2789.                        !cdir novector
 2790.  1------------<        DO i = 1, nmax
 2791.  1                        IF (icheck(i) == 1) THEN
 2792.  1                           ntyp=itype(i)
 2793.  1                           IF ((ntyp == 11) .OR. (ntyp == 13)) THEN
 2794.  1                              CONTINUE
 2795.  1                           ELSE
 2796.  1                              IF (iveg == 1) THEN
 2797.  1                                 tv  (i)=tc(i)
 2798.  1                              ELSE
 2799.  1                                 tv  (i)=tg(i)
 2800.  1                              END IF
 2801.  1                              tv(i)=MIN((tu2 (i,iveg)-0.1_r8   ),tv(i))
 2802.  1                              tv(i)=MAX((tll2(i,iveg)+0.1_r8   ),tv(i))
 2803.  1                              d2(i)=(tu2  (i,iveg)-topt2(i,iveg)) &
 2804.  1                                   /(topt2(i,iveg)-tll2 (i,iveg))
 2805.  1                              ft(i)=(tv(i)-tll2(i,iveg))/ &
 2806.  1                                   (topt2(i,iveg)-tll2(i,iveg)) &
 2807.  1                                   *EXP(d2(i)*LOG( &
 2808.  1                                   (tu2 (i,iveg)-tv(i))/ &
 2809.  1                                   (tu2(i,iveg)-topt2(i,iveg)) ) )
 2810.  1                              ft(i) = MIN(ft(i), 1.e0_r8)
 2811.  1                              ft(i) = MAX(ft(i), 1.e-5_r8)
 2812.  1                              ft1(i) = ft(i)
 2813.  1                              !
 2814.  1                              !  simplified calculation of soil water potential factor, fp
 2815.  1                              !
 2816.  1                              xrot = rootd(ntyp,iveg)
 2817.  1                              dep(1) = 0.0e0_r8
 2818.  1                              dep(2) = 0.0e0_r8
 2819.  1                              dep(3) = 0.0e0_r8
 2820.  1                              dep(1) = MIN(zdepth(ntyp,1), xrot)
 2821.  1                              xrot = xrot - zdepth(ntyp,1)
 2822.  1                              IF (xrot > 0.0e0_r8) THEN
 2823.  1                                 dep(2) = MIN(zdepth(ntyp,2), xrot)
 2824.  1                                 xrot = xrot - zdepth(ntyp,2)
 2825.  1                              ENDIF
 2826.  1                              IF (xrot > 0.0e0_r8) THEN
 2827.  1                                 dep(3) = MIN(zdepth(ntyp,3), xrot)
 2828.  1                                 xrot = xrot - zdepth(ntyp,3)
 2829.  1                              ENDIF
 2830.  1                              xdr = (phsoil(i,1) * dep(1) + phsoil(i,2) * dep(2) &
 2831.  1                                   +phsoil(i,3) * dep(3)) / rootd(ntyp,iveg)
 2832.  1                              xdr = - xdr
 2833.  1                              IF (xdr <= 1.0e-5_r8) xdr = 1.0e-5_r8
 2834.  1                              xdr = LOG (xdr)
 2835.  1                              arg = -ph12(i,1)*(ph22(i,1)-xdr)
 2836.  1                              arg = MIN(arg,0.0_r8)
 2837.  1                              fp(i) = 1.e0_r8 - EXP(arg)
 2838.  1                              IF ((w(i,2) > 0.15e0_r8) .AND. (fp(i) < 0.05e0_r8)) fp(i)=0.05e0_r8
 2839.  1                              fp(i) = MIN(fp(i), 1.e0_r8)
 2840.  1                              fp(i) = MAX(fp(i), 1.e-5_r8)
 2841.  1                              fp1(i) = fp(i)
 2842.  1                           END IF
 2843.  1                        END IF
 2844.  1------------>        END DO
 2845.                     END IF
 2846.                 
 2847.  1------------<     DO i = 1, nmax
 2848.  1                     IF (icheck(i) == 1) THEN
 2849.  1                        ntyp=itype(i)
 2850.  1                        drop(i)=EXP(21.65605_r8   -5418.0_r8   /ta(i))      -ea(i)
 2851.  1                        fd(i) = MAX( 1.0e-5_r8,  1.0_r8/(1.0_r8+ defac2(i,iveg)*drop(i)))
 2852.  1                        fd(i) = MIN(fd(i), 1.e0_r8)
 2853.  1                     END IF
 2854.  1------------>     END DO
 2855.                 
 2856.  1------------<     DO i = 1, nmax
 2857.  1                     IF (icheck(i) == 1) THEN
 2858.  1                        ntyp=itype(i)
 2859.  1                        rst(i,2) = 1.e5_r8
 2860.  1                        IF ((ntyp == 11) .OR. (ntyp == 13)) THEN
 2861.  1                           rst(i,1) = 1.0e5_r8
 2862.  1                           CYCLE
 2863.  1                        END IF
 2864.  1                        ftpd(i)    =  fd(i)* ft1(i) * fp1(i)
 2865.  1                        rst(i,iveg)=stm(i,iveg)/(ftpd(i)*vcover(i,iveg))
 2866.  1                        rst(i,iveg)=MIN(rst(i,iveg),1.0e5_r8)
 2867.  1                     END IF
 2868.  1------------>     END DO
 2869.                 
 2870.                   END SUBROUTINE stres2
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 2870 
  Local variable "HL3I" is assigned a value but never used.

 2871.                 
 2872.                 
 2873.                 
 2874.                   ! update :performs the updating of soil moisture stores
 2875.                   !         and interception capacity.
 2876.                 
 2877.                 
 2878.                   SUBROUTINE update( &
 2879.                        bps   ,deadtg,deadtc,deadqm,ect   ,eci   ,egt   ,egi   ,egs   , &
 2880.                        eg    ,hc    ,hg    ,ecmass,egmass,etmass,hflux ,chf   ,shf   , &
 2881.                        ra    ,rb    ,rd    ,ea    ,etc   ,etg   ,btc   ,btg   ,cc    , &
 2882.                        cg    ,dtc   ,dtg   ,dtm   ,dqm   ,tc    ,tg    ,td    ,capac , &
 2883.                        tm    ,nmax  ,dtc3x ,ncols)
 2884.                     !
 2885.                     !-----------------------------------------------------------------------
 2886.                     !-----------------------------------------------------------------------
 2887.                     !   ncols.......Numero de ponto por faixa de latitude
 2888.                     !   pie.........Constante Pi=3.1415926e0
 2889.                     !   hl..........heat of evaporation of water   (j/kg)
 2890.                     !   snomel......heat of melting
 2891.                     !   tf..........Temperatura de congelamento (K)
 2892.                     !   dtc3x.......time increment dt
 2893.                     !   nmax........
 2894.                     !   tm..........Temperature of reference (fourier)
 2895.                     !   tc..........Temperatura da copa "dossel" canopy leaf temperature(K)
 2896.                     !   tg..........Temperatura da superficie do solo ground temperature (K)
 2897.                     !   td..........Temperatura do solo profundo (K)
 2898.                     !   capac ......Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
 2899.                     !   capac.......Agua interceptada iv=2 na cobertura do solo (m)
 2900.                     !   ra..........Resistencia Aerodinamica (s/m)
 2901.                     !   rb .........bulk boundary layer resistance             (s/m)
 2902.                     !   rd..........aerodynamic resistance between ground
 2903.                     !               and canopy air space
 2904.                     !   ea..........Pressao de vapor
 2905.                     !   etc.........Pressure of vapor at top of the copa
 2906.                     !   etg.........Pressao de vapor no base da copa
 2907.                     !   btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i))
 2908.                     !   btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 2909.                     !   cc..........heat capacity of the canopy
 2910.                     !   cg..........heat capacity of the ground
 2911.                     !   dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 2912.                     !   dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 2913.                     !   dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 2914.                     !   dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
 2915.                     !   ect.........Transpiracao(J/m*m)
 2916.                     !   eci.........Evaporacao da interceptacao da agua (J/m*m)
 2917.                     !   egt ........Transpiracao na base da copa (J/m*m)  .
 2918.                     !   egi.........Evaporacao da neve (J/m*m)
 2919.                     !   egs.........Evaporacao do solo arido (J/m*m)
 2920.                     !   eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 2921.                     !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 2922.                     !   hc..........total sensible heat lost of top from the veggies.
 2923.                     !   hg..........total sensible heat lost of base from the veggies.
 2924.                     !   ecmass......Mass of water lost of top from the veggies.
 2925.                     !   egmass......Mass of water lost of base from the veggies.
 2926.                     !   etmass......total mass of water lost from the veggies.
 2927.                     !   hflux.......total sensible heat lost from the veggies.
 2928.                     !   chf.........heat fluxes into the canopy  in w/m**2
 2929.                     !   shf.........heat fluxes into the ground, in w/m**2
 2930.                     !   deadtg......
 2931.                     !   deadtc......
 2932.                     !   deadqm......
 2933.                     !   bps.........
 2934.                     !-----------------------------------------------------------------------
 2935.                     INTEGER, INTENT(in   ) :: ncols
 2936.                 
 2937.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 2938.                     INTEGER, INTENT(in   ) :: nmax
 2939.                     !
 2940.                     !     the size of working area is ncols*187
 2941.                     !     atmospheric parameters as boudary values for sib
 2942.                     !
 2943.                     REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 2944.                     !
 2945.                     !     prognostic variables
 2946.                     !
 2947.                     REAL(KIND=r8),    INTENT(in   ) :: tc   (ncols)
 2948.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2949.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 2950.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 2951.                     !
 2952.                     !     variables calculated from above and ambient conditions
 2953.                     !
 2954.                     REAL(KIND=r8),    INTENT(in   ) :: ra  (ncols)
 2955.                     REAL(KIND=r8),    INTENT(in   ) :: rb  (ncols)
 2956.                     REAL(KIND=r8),    INTENT(in   ) :: rd  (ncols)
 2957.                     REAL(KIND=r8),    INTENT(in   ) :: ea  (ncols)
 2958.                     REAL(KIND=r8),    INTENT(in   ) :: etc (ncols)
 2959.                     REAL(KIND=r8),    INTENT(in   ) :: etg (ncols)
 2960.                     REAL(KIND=r8),    INTENT(in   ) :: btc (ncols)
 2961.                     REAL(KIND=r8),    INTENT(in   ) :: btg (ncols)
 2962.                     REAL(KIND=r8),    INTENT(in   ) :: cc  (ncols)
 2963.                     REAL(KIND=r8),    INTENT(in   ) :: cg  (ncols)
 2964.                     REAL(KIND=r8),    INTENT(in   ) :: dtc (ncols)
 2965.                     REAL(KIND=r8),    INTENT(in   ) :: dtg (ncols)
 2966.                     REAL(KIND=r8),    INTENT(in   ) :: dtm (ncols)
 2967.                     REAL(KIND=r8),    INTENT(in   ) :: dqm (ncols)
 2968.                     !
 2969.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 2970.                     !
 2971.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 2972.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 2973.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 2974.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 2975.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 2976.                     REAL(KIND=r8),    INTENT(in   ) :: eg    (ncols)
 2977.                     REAL(KIND=r8),    INTENT(in   ) :: hc    (ncols)
 2978.                     REAL(KIND=r8),    INTENT(in   ) :: hg    (ncols)
 2979.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 2980.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 2981.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 2982.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 2983.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 2984.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 2985.                     !
 2986.                     !     derivatives
 2987.                     !
 2988.                     REAL(KIND=r8),    INTENT(in   ) :: deadtg(ncols)
 2989.                     REAL(KIND=r8),    INTENT(in   ) :: deadtc(ncols)
 2990.                     REAL(KIND=r8),    INTENT(in   ) :: deadqm(ncols)
 2991.                     !
 2992.                     !     this is for coupling with closure turbulence model
 2993.                     !
 2994.                     REAL(KIND=r8),    INTENT(in   ) :: bps  (ncols)
 2995.                 
 2996.                 
 2997.                 
 2998.                 
 2999.                     REAL(KIND=r8) :: tgen  (ncols)
 3000.                     REAL(KIND=r8) :: tcen  (ncols)
 3001.                     REAL(KIND=r8) :: tmen  (ncols)
 3002.                     REAL(KIND=r8) :: taen  (ncols)
 3003.                     REAL(KIND=r8) :: eaen  (ncols)
 3004.                     REAL(KIND=r8) :: d1    (ncols)
 3005.                     REAL(KIND=r8) :: estarc(ncols)
 3006.                     REAL(KIND=r8) :: estarg(ncols)
 3007.                     REAL(KIND=r8) :: facks (ncols)
 3008.                     INTEGER :: i
 3009.                     REAL(KIND=r8) :: timcon
 3010.                     REAL(KIND=r8) :: dtc3xi
 3011.                     REAL(KIND=r8) :: hlati
 3012.                     REAL(KIND=r8) :: hlat3i
 3013.                     REAL(KIND=r8) :: snofac
 3014.                     !
 3015.                     !     adjustment of temperatures and vapor pressure ,
 3016.                     !     sensible heat fluxes. n.b. latent heat fluxes cannot be derived
 3017.                     !     from estarc, estarg, ea due to linear result of implicit method
 3018.                     !
 3019.                     !
 3020.                     !
 3021.                     !
 3022.  Vr4----------<     DO i = 1, nmax
 3023.  Vr4                   tgen(i)=tg(i)+dtg(i)
 3024.  Vr4                   tcen(i)=tc(i)+dtc(i)
 3025.  Vr4                   tmen(i)=tm(i)+dtm(i)
 3026.  Vr4                   d1(i)=1.0_r8   /ra(i)+1.0_r8   /rb(i)+1.0_r8   /rd(i)
 3027.  Vr4                   !
 3028.  Vr4                   !     compute the fluxes consistent with the differencing scheme.
 3029.  Vr4                   !
 3030.  Vr4                   taen(i)=(tgen(i)/rd(i)+tcen(i)/ &
 3031.  Vr4                        rb(i)+tmen(i)*bps(i)/ra(i))/d1(i)
 3032.  Vr4                   eaen(i)=ea(i)+deadtc(i)*dtc(i)+deadtg(i)* &
 3033.  Vr4                        dtg(i)+deadqm(i)*dqm(i)
 3034.  Vr4                   !
 3035.  Vr4                   !     vapor pressures within the canopy and the moss.
 3036.  Vr4                   !
 3037.  Vr4                   estarc(i)=etc(i)+btc(i)*dtc(i)
 3038.  Vr4                   estarg(i)=etg(i)+btg(i)*dtg(i)
 3039.  Vr4---------->     END DO
 3040.  f------------<     DO i = 1, nmax
 3041.  f                     IF (tgen(i) <= tf) THEN
 3042.  f                        egs(i)=eg(i)-egi(i)
 3043.  f                        egt(i)=0.0_r8
 3044.  f                     END IF
 3045.  f------------>     END DO
 3046.                     !
 3047.                     !     heat fluxes into the canopy and the ground, in w/m**2
 3048.                     !
 3049.                     timcon=2.0_r8   *pie/86400.0_r8
 3050.                     dtc3xi=1.0_r8   /dtc3x
 3051.                     hlati =1.0_r8   /        hl
 3052.                     hlat3i=1.0_r8   /(1.0e3_r8*hl)
 3053.  Vr4----------<     DO i = 1, nmax
 3054.  Vr4                   chf(i)=dtc3xi*cc(i)*dtc(i)
 3055.  Vr4                   shf(i)=dtc3xi*cg(i)*dtg(i) + timcon*cg(i)*(tg(i)+dtg(i)-td(i))
 3056.  Vr4---------->     END DO
 3057.                     !
 3058.                     !     evaporation losses are expressed in j m-2 : when divided by
 3059.                     !     ( hl*1000.0_r8) loss is in m m-2
 3060.                     !
 3061.                     snofac=1.0_r8   /( 1.0_r8   +snomel*hlat3i)
 3062.  f------------<     DO i = 1, nmax
 3063.  f                     facks(i)=1.0_r8
 3064.  f                     IF (tcen(i) <= tf) facks(i)=snofac
 3065.  f                     IF ((ect(i)+eci(i)) <= 0.0_r8) THEN
 3066.  f                        eci(i)  =ect(i)+eci(i)
 3067.  f                        ect(i)  =0.0_r8
 3068.  f                        facks(i)=1.0_r8   /facks(i)
 3069.  f                     END IF
 3070.  f------------>     END DO
 3071.  Vr4----------<     DO i = 1, nmax
 3072.  Vr4                   capac(i,1)=capac(i,1)-eci(i)*facks(i)*hlat3i
 3073.  Vr4                   !
 3074.  Vr4                   !     mass terms are in kg m-2 dt-1
 3075.  Vr4                   !
 3076.  Vr4                   ecmass(i)=(ect(i)+eci(i)*facks(i))*hlati
 3077.  Vr4---------->     END DO
 3078.  1------------<     DO i = 1, nmax
 3079.  1                     facks(i)=1.0_r8
 3080.  1                     IF (tgen(i) <= tf) facks(i)=snofac
 3081.  1                     IF ((egt(i)+egi(i)) <= 0.0_r8) THEN
 3082.  1                        egi(i)  =egt(i)+egi(i)
 3083.  1                        egt(i)  =0.0_r8
 3084.  1                        facks(i)=1.0_r8  /facks(i)
 3085.  1                     END IF
 3086.  1------------>     END DO
 3087.  Vr2----------<     DO i = 1, nmax
 3088.  Vr2                   capac(i,2)=capac(i,2)-egi(i)*facks(i)*hlat3i
 3089.  Vr2                   egmass(i)=(egt(i)+egs(i)+egi(i)*facks(i))*hlati
 3090.  Vr2                   !
 3091.  Vr2                   !     total mass of water and total sensible heat lost from the veggies.
 3092.  Vr2                   !
 3093.  Vr2                   etmass(i)=ecmass(i)+egmass(i)
 3094.  Vr2                   hflux (i)=hc(i)+hg(i)
 3095.  Vr2---------->     END DO
 3096.                   END SUBROUTINE update
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3096 
  Local variable "EAEN" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3096 
  Local variable "ESTARG" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3096 
  Local variable "ESTARC" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3096 
  Local variable "TAEN" is assigned a value but never used.

 3097.                 
 3098.                 
 3099.                 
 3100.                 
 3101.                 
 3102.                   SUBROUTINE sflxes(&
 3103.                        hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm ,egdtg ,egdtc ,egdqm , &
 3104.                        ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm,icheck,bps   ,psb   , &
 3105.                        dzm   ,em    ,gmt   ,gmq   ,cu    ,cuni  ,ctni  ,ustar ,rhoair, &
 3106.                        psy   ,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    ,ect   ,eci   , &
 3107.                        egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    ,ecidif,egidif, &
 3108.                        ecmass,egmass,etmass,hflux ,chf   ,shf   ,ra    ,rb    ,rd    , &
 3109.                        rc    ,rg    ,tcta  ,tgta  ,ta    ,ea    ,etc   ,etg   ,btc   , &
 3110.                        btg   ,u2    ,radt  ,rst   ,rsoil ,hrr   ,phsoil,cc    ,cg    , &
 3111.                        satcap,dtc   ,dtg   ,dtm   ,dqm   ,stm   ,thermk,tc    ,tg    , &
 3112.                        td    ,capac ,w     ,qm    ,tm    ,um    ,vm    ,psur  ,vcover, &
 3113.                        z0x   ,d     ,rdc   ,rbc   ,z0    ,itype ,dtc3x ,mon   ,nmax  , &
 3114.                        jstneu,ncols ,zlt2 ,topt2  ,tll2  ,tu2   ,defac2,ph12  ,ph22  )
 3115.                 
 3116.                     !-----------------------------------------------------------------------
 3117.                     ! sflxes :performs surface flux parameterization.
 3118.                     !-----------------------------------------------------------------------
 3119.                     !
 3120.                     !  ncols........Numero de ponto por faixa de latitude
 3121.                     !  ityp........numero das classes de solo 13
 3122.                     !  imon........Numero maximo de meses no ano (12)
 3123.                     !  icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 3124.                     !  idp.........Camadas de solo (1 a 3)
 3125.                     !  pie.........Constante Pi=3.1415926e0
 3126.                     !  stefan......Constante de Stefan Boltzmann
 3127.                     !  cp..........specific heat of air (j/kg/k)
 3128.                     !  hl..........heat of evaporation of water   (j/kg)
 3129.                     !  grav........gravity constant      (m/s**2)
 3130.                     !  snomel......heat of melting (j m-1)
 3131.                     !  tf..........Temperatura de congelamento (K)
 3132.                     !  gasr........Constant of dry air      (j/kg/k)
 3133.                     !  epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
 3134.                     !              de agua e do ar seco
 3135.                     !  jstneu......The first call to vntlat just gets the neutral values of ustar
 3136.                     !              and ventmf para jstneu=.TRUE..
 3137.                     !  dtc3x.......time increment dt
 3138.                     !  mon.........Number of month at year (1-12)
 3139.                     !  nmax........
 3140.                     !  topt........Temperatura ideal de funcionamento estomatico
 3141.                     !  tll.........Temperatura minima de funcionamento estomatico
 3142.                     !  tu..........Temperatura maxima de funcionamento estomatico
 3143.                     !  defac.......Parametro de deficit de pressao de vapor d'agua
 3144.                     !  ph1.........Coeficiente para o efeito da agua no solo
 3145.                     !  ph2.........Potencial de agua no solo para ponto de Wilting
 3146.                     !  rootd.......Profundidade das raizes
 3147.                     !  bee.........Expoente da curva de retencao "expoente para o solo umido"
 3148.                     !  phsat.......Tensao do solo saturado " Potencial de agua no solo saturado"
 3149.                     !  zdepth......Profundidade para as tres camadas de solo
 3150.                     !  zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 3151.                     !  zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 3152.                     !  x0x.........Comprimento de rugosidade
 3153.                     !  xd..........Deslocamento do plano zero
 3154.                     !  z2..........Altura do topo do dossel
 3155.                     !  xdc.........Constant related to aerodynamic resistance
 3156.                     !              between ground and canopy air space
 3157.                     !  xbc.........Constant related to bulk boundary layer resistance
 3158.                     !  itype.......Classe de textura do solo
 3159.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 3160.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 3161.                     !  z0x.........roughness length                           (m)
 3162.                     !  d...........Displacement height                        (m)
 3163.                     !  rdc.........Constant related to aerodynamic resistance
 3164.                     !              between ground and canopy air space
 3165.                     !  rbc.........Constant related to bulk boundary layer resistance
 3166.                     !  z0..........Roughness length
 3167.                     !  qm..........reference specific humidity (fourier)
 3168.                     !  tm .........reference temperature    (fourier)                (k)
 3169.                     !  um..........Razao entre zonal pseudo-wind (fourier) e seno da
 3170.                     !              colatitude
 3171.                     !  vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 3172.                     !              colatitude
 3173.                     !  psur........surface pressure in mb
 3174.                     !  tc..........Temperatura da copa "dossel"(K)
 3175.                     !  tg..........Temperatura da superficie do solo (K)
 3176.                     !  td..........Temperatura do solo profundo (K)
 3177.                     !  capac(iv)...Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
 3178.                     !  capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 3179.                     !  w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 3180.                     !  w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 3181.                     !  w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 3182.                     !  ra..........Resistencia Aerodinamica (s/m)
 3183.                     !  rb..........bulk boundary layer resistance             (s/m)
 3184.                     !  rd..........aerodynamic resistance between ground      (s/m)
 3185.                     !              and canopy air space
 3186.                     !  rc..........Resistencia do topo da copa
 3187.                     !  rg......... Resistencia da base da copa
 3188.                     !  tcta........Diferenca entre tc-ta                      (k)
 3189.                     !  tgta........Diferenca entre tg-ta                      (k)
 3190.                     !  ta..........Temperatura no nivel de fonte de calor do dossel (K)
 3191.                     !  ea..........Pressure of vapor
 3192.                     !  etc.........Pressure of vapor at top of the copa
 3193.                     !  etg.........Pressao de vapor no base da copa
 3194.                     !  btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 3195.                     !  btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 3196.                     !  u2..........wind speed at top of canopy                (m/s)
 3197.                     !  radt........net heat received by canopy/ground vegetation
 3198.                     !  rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 3199.                     !  rsoil ......Resistencia do solo (s/m)
 3200.                     !  hrr.........rel. humidity in top layer
 3201.                     !  phsoil......soil moisture potential of the i-th soil layer
 3202.                     !  cc..........heat capacity of the canopy
 3203.                     !  cg..........heat capacity of the ground
 3204.                     !  satcap......saturation liquid water capacity         (m)
 3205.                     !  dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 3206.                     !  dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 3207.                     !  dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 3208.                     !  dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
 3209.                     !  stm ........Variavel utilizada mo cal. da Resistencia
 3210.                     !  thermk......canopy emissivity
 3211.                     !  ect.........Transpiracao no topo da copa (J/m*m)
 3212.                     !  eci.........Evaporacao da agua interceptada no topo da copa (J/m*m)
 3213.                     !  egt.........Transpiracao na base da copa (J/m*m)
 3214.                     !  egi.........Evaporacao da neve (J/m*m)
 3215.                     !  egs.........Evaporacao do solo arido (J/m*m)
 3216.                     !  ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 3217.                     !              topo da copa   ec   (i)=eci(i)+ect(i)
 3218.                     !  eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 3219.                     !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 3220.                     !  hc..........total sensible heat lost of top from the veggies.
 3221.                     !  hg..........total sensible heat lost of base from the veggies.
 3222.                     !  ecidif......check if interception loss term has exceeded canopy storage
 3223.                     !              ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 3224.                     !  egidif......check if interception loss term has exceeded canopy storage
 3225.                     !              ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 3226.                     !  ecmass......Mass of water lost of top from the veggies.
 3227.                     !  egmass......Mass of water lost of base from the veggies.
 3228.                     !  etmass......total mass of water lost from the veggies.
 3229.                     !  hflux.......total sensible heat lost from the veggies.
 3230.                     !  chf.........heat fluxes into the canopy  in w/m**2
 3231.                     !  shf.........heat fluxes into the ground, in w/m**2
 3232.                     !  bps.........
 3233.                     !  psb.........
 3234.                     !  dzm.........Altura media de referencia  para o vento para o calculo
 3235.                     !               da estabilidade do escoamento
 3236.                     !  em..........Pressao de vapor da agua
 3237.                     !  gmt.........
 3238.                     !  gmq.........specific humidity of reference (fourier)
 3239.                     !  cu..........Friction  transfer coefficients.
 3240.                     !  cuni........neutral friction transfer  coefficients.
 3241.                     !  ctni........neutral heat transfer coefficients.
 3242.                     !  ustar.......surface friction velocity  (m/s)
 3243.                     !  rhoair......Desnsidade do ar
 3244.                     !  psy.........(cp/(hl*epsfac))*psur(i)
 3245.                     !  rcp.........densidade do ar vezes o calor especifico do ar
 3246.                     !  wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 3247.                     !              indice de area foliar no topo da copa
 3248.                     !  wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 3249.                     !              indice de area foliar na base da copa
 3250.                     !  fc..........Condicao de oravalho 0 ou 1 na topo da copa
 3251.                     !  fg..........Condicao de oravalho 0 ou 1 na base da copa
 3252.                     !  hr..........rel. humidity in top layer
 3253.                     !  icheck......this version assumes dew-free conditions "icheck=1" to
 3254.                     !              estimate ea for buoyancy term in vntmf or ra.
 3255.                     !  hgdtg.......n.b. fluxes expressed in joules m-2
 3256.                     !  hgdtc.......n.b. fluxes expressed in joules m-2
 3257.                     !  hgdtm.......n.b. fluxes expressed in joules m-2
 3258.                     !  hcdtg.......n.b. fluxes expressed in joules m-2
 3259.                     !  hcdtc.......n.b. fluxes expressed in joules m-2
 3260.                     !  hcdtm.......n.b. fluxes expressed in joules m-2
 3261.                     !  egdtg.......partial derivative calculation for latent heat
 3262.                     !  egdtc.......partial derivative calculation for latent heat
 3263.                     !  egdqm.......partial derivative calculation for latent heat
 3264.                     !  ecdtg.......partial derivative calculation for latent heat
 3265.                     !  ecdtc.......partial derivative calculation for latent heat
 3266.                     !  ecdqm.......partial derivative calculation for latent heat
 3267.                     !  deadtg......
 3268.                     !  deadtc......
 3269.                     !  deadqm......
 3270.                     !
 3271.                     !-----------------------------------------------------------------------
 3272.                     INTEGER, INTENT(in   ) :: ncols
 3273.                 
 3274.                     LOGICAL, INTENT(inout  ) :: jstneu
 3275.                 
 3276.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 3277.                     INTEGER, INTENT(in   ) :: mon(ncols)
 3278.                     INTEGER, INTENT(in   ) :: nmax
 3279.                     !
 3280.                     INTEGER, INTENT(in   ) :: itype (ncols)
 3281.                     !
 3282.                     REAL(KIND=r8),    INTENT(in) :: vcover(ncols,icg)
 3283.                     REAL(KIND=r8),    INTENT(inout) :: z0x   (ncols)
 3284.                     REAL(KIND=r8),    INTENT(inout) :: d     (ncols)
 3285.                     REAL(KIND=r8),    INTENT(inout) :: rdc   (ncols)
 3286.                     REAL(KIND=r8),    INTENT(inout) :: rbc   (ncols)
 3287.                     REAL(KIND=r8),    INTENT(inout) :: z0    (ncols)
 3288.                     !
 3289.                     !     the size of working area is ncols*187
 3290.                     !     atmospheric parameters as boudary values for sib
 3291.                     !
 3292.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 3293.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 3294.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 3295.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 3296.                     REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 3297.                     !
 3298.                     !     prognostic variables
 3299.                     !
 3300.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 3301.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 3302.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 3303.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 3304.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 3305.                     !
 3306.                     !     variables calculated from above and ambient conditions
 3307.                     !
 3308.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 3309.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 3310.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 3311.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 3312.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 3313.                     REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
 3314.                     REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
 3315.                     REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
 3316.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 3317.                     REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
 3318.                     REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
 3319.                     REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
 3320.                     REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
 3321.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 3322.                     REAL(KIND=r8),    INTENT(inout) :: radt  (ncols,icg)
 3323.                     REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 3324.                     REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
 3325.                     REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
 3326.                     REAL(KIND=r8),    INTENT(inout) :: phsoil(ncols,idp)
 3327.                     REAL(KIND=r8),    INTENT(inout) :: cc    (ncols)
 3328.                     REAL(KIND=r8),    INTENT(inout) :: cg    (ncols)
 3329.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 3330.                     REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
 3331.                     REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
 3332.                     REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
 3333.                     REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
 3334.                     REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
 3335.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 3336.                     !
 3337.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 3338.                     !
 3339.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 3340.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 3341.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 3342.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 3343.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 3344.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 3345.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 3346.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 3347.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 3348.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 3349.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 3350.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 3351.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 3352.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 3353.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 3354.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 3355.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 3356.                     !
 3357.                     !     this is for coupling with closure turbulence model
 3358.                     !
 3359.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 3360.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 3361.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 3362.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 3363.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 3364.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 3365.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 3366.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 3367.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 3368.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 3369.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 3370.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 3371.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 3372.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 3373.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 3374.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 3375.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 3376.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 3377.                     INTEGER, INTENT(inout  ) :: icheck(ncols)
 3378.                     !
 3379.                     !     derivatives
 3380.                     !
 3381.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtg (ncols)
 3382.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtc (ncols)
 3383.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtm (ncols)
 3384.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtg (ncols)
 3385.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtc (ncols)
 3386.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtm (ncols)
 3387.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtg (ncols)
 3388.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtc (ncols)
 3389.                     REAL(KIND=r8),    INTENT(inout  ) :: egdqm (ncols)
 3390.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtg (ncols)
 3391.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtc (ncols)
 3392.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdqm (ncols)
 3393.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtg(ncols)
 3394.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtc(ncols)
 3395.                     REAL(KIND=r8),    INTENT(inout  ) :: deadqm(ncols)
 3396.                     !
 3397.                     REAL(KIND=r8),    INTENT(in   ) :: zlt2    (ncols,icg)
 3398.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 3399.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 3400.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 3401.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 3402.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 3403.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 3404.                     !
 3405.                 
 3406.                     REAL(KIND=r8) :: ustarn(ncols)
 3407.                 
 3408.                     REAL(KIND=r8) :: psit
 3409.                     REAL(KIND=r8) :: fac
 3410.                     REAL(KIND=r8) :: y1
 3411.                     REAL(KIND=r8) :: y2
 3412.                     REAL(KIND=r8) :: ecf (ncols)
 3413.                     REAL(KIND=r8) :: egf (ncols)
 3414.                     REAL(KIND=r8) :: dewc(ncols)
 3415.                     REAL(KIND=r8) :: dewg(ncols)
 3416.                     !
 3417.                     REAL(KIND=r8) :: tcsav (ncols)
 3418.                     REAL(KIND=r8) :: tgsav (ncols)
 3419.                     REAL(KIND=r8) :: tmsav (ncols)
 3420.                     REAL(KIND=r8) :: qmsav (ncols)
 3421.                     REAL(KIND=r8) :: tsav  (ncols)
 3422.                     REAL(KIND=r8) :: esav  (ncols)
 3423.                     REAL(KIND=r8) :: rdsav (ncols,2)
 3424.                     REAL(KIND=r8) :: wt
 3425.                     REAL(KIND=r8) :: ft1   (ncols)
 3426.                     REAL(KIND=r8) :: fp1   (ncols)
 3427.                     INTEGER :: idewco(ncols)
 3428.                     !
 3429.                     INTEGER, PARAMETER :: icmax = 10
 3430.                     REAL(KIND=r8),    PARAMETER :: small = 1.0e-3_r8
 3431.                     REAL(KIND=r8)    :: gxx
 3432.                     REAL(KIND=r8)    :: capaci
 3433.                     REAL(KIND=r8)    :: eee
 3434.                     REAL(KIND=r8)    :: dtmdt
 3435.                     REAL(KIND=r8)    :: dqmdt
 3436.                     REAL(KIND=r8)    :: vcover2(ncols,icg)
 3437.                 
 3438.                     INTEGER :: i
 3439.                     INTEGER :: ntyp
 3440.                     INTEGER :: ncount
 3441.                     INTEGER :: icount
 3442.                     !
 3443.  A-----------<>     vcover2=vcover
 3444.  Vr4----------<     DO i = 1, nmax
 3445.  Vr4 A-------<>        tcsav(i)=tc(i)
 3446.  Vr4 A-------<>        tgsav(i)=tg(i)
 3447.  Vr4 A-------<>        tmsav(i)=tm(i)
 3448.  Vr4 A-------<>        qmsav(i)=qm(i)
 3449.  Vr4                   rdsav(i,1)=radt(i,1)
 3450.  Vr4                   rdsav(i,2)=radt(i,2)
 3451.  Vr4                   stm(i,1)=rst(i,1)
 3452.  Vr4                   stm(i,2)=rst(i,2)
 3453.  Vr4---------->     END DO
 3454.                     !
 3455.                     !     airmod checks for the effects of snow
 3456.                     !
 3457.  I                  CALL airmod( &
 3458.                          tg    ,capac ,z0x   ,d     ,rdc   ,rbc   ,itype , &
 3459.                          mon   ,nmax  ,ncols )
 3460.                     !
 3461.                     !     sib roughness length
 3462.                     !
 3463.  A------------<     DO i = 1, nmax
 3464.  A                     z0    (i)=z0x(i)
 3465.  A------------>     END DO
 3466.                 
 3467.                     gxx   =grav/461.5_r8
 3468.                     capaci= 1.0_r8 /0.004_r8
 3469.                 
 3470.  1------------<     DO i = 1, nmax
 3471.  1                     ntyp   =itype(i)
 3472.  1                     wc  (i)=MIN(1.0_r8 ,capac(i,1)/satcap(i,1))
 3473.  1                     wg  (i)=MIN(1.0_r8 ,capac(i,2)/satcap(i,2))
 3474.  1                     !
 3475.  1                     !     rsoil function from fit to camillo and gurney (1985) data.
 3476.  1                     !     wetness of upper 0.5 cm of soil calculated from approximation
 3477.  1                     !     to milly flow equation with reduced (1/50) conductivity in
 3478.  1                     !     top layer.
 3479.  1                     !
 3480.  1                     wt = MAX(small,w(i,1))
 3481.  1                     wt=wt+(0.75_r8*zdepth(ntyp,1)/(zdepth(ntyp,1)+ &
 3482.  1                          zdepth(ntyp,2)))*(wt-(w(i,2)*w(i,2)/wt))*0.5_r8*50.0_r8
 3483.  1                     fac   =MIN(wt,0.99_r8)
 3484.  1                     fac   =MAX(fac   ,small)
 3485.  1                     rsoil(i)=101840.0_r8*(1.0_r8 - EXP(0.0027_r8 * LOG(fac   )))
 3486.  1                     !
 3487.  1                     !phsat =  " Potencial de agua no solo saturado"
 3488.  1                     !
 3489.  1                     psit = phsat(ntyp) * EXP(-bee(ntyp) * LOG(fac   ))
 3490.  1                     !
 3491.  1                     !        --     --
 3492.  1                     !       |  PSI*g  |
 3493.  1                     ! eee = |---------|
 3494.  1                     !       |  Tg*R   |
 3495.  1                     !        --     --
 3496.  1                     !
 3497.  1                     eee = psit * gxx/tg(i)
 3498.  1                     !
 3499.  1                     !The relative humidity of air at the soil surface
 3500.  1                     !
 3501.  1                     !           --     --
 3502.  1                     !          |  PSI*g  |
 3503.  1                     ! fh = exp*|---------|
 3504.  1                     !          |  Tg*R   |
 3505.  1                     !           --     --
 3506.  1                     !
 3507.  1                     hrr  (i)=MAX (small,EXP(eee))
 3508.  1                     !
 3509.  1                     hr   (i)=hrr(i)
 3510.  1                     !
 3511.  1                     IF (tg(i) <= tf) THEN
 3512.  1                        vcover2(i,2)=1.0_r8
 3513.  1                        wg    (i)  =MIN(1.0_r8 ,capac(i,2)*capaci)
 3514.  1                        rst   (i,2)=rsoil(i)
 3515.  1                        stm   (i,2)=rsoil(i)
 3516.  1                     END IF
 3517.  1                     !
 3518.  1 A---------<>        fc(i)=1.0_r8
 3519.  1 A---------<>        fg(i)=1.0_r8
 3520.  1------------>     END DO
 3521.                     !
 3522.                     !     this is the start of iteration of time integration
 3523.                     !     to avoid oscillation
 3524.                     !
 3525.                     ncount=0
 3526.                 7000 CONTINUE
 3527.                     ncount=ncount+1
 3528.  Vr4----------<     DO i = 1, nmax
 3529.  Vr4 A-------<>        icheck(i)=1
 3530.  Vr4                   !
 3531.  Vr4                   !  etc.........Pressure of vapor at top of the copa
 3532.  Vr4                   !  etg.........Pressao de vapor no base da copa
 3533.  Vr4                   !
 3534.  Vr4                   etc(i)=EXP(21.65605_r8  -5418.0_r8  / tc(i))
 3535.  Vr4                   etg(i)=EXP(21.65605_r8  -5418.0_r8  / tg(i))
 3536.  Vr4---------->     END DO
 3537.                     !
 3538.                     !     first guesses for ta and ea
 3539.                     !
 3540.                     IF (ncount == 1) THEN
 3541.  Vr4----------<        DO i = 1, nmax
 3542.  Vr4 A-------<>           ta (i)=tc(i)
 3543.  Vr4                      !
 3544.  Vr4                      !  ea..........Pressure of vapor
 3545.  Vr4                      !
 3546.  Vr4                      ea (i)=qm(i)*psur(i)/(epsfac+qm(i))
 3547.  Vr4---------->        END DO
 3548.                     END IF
 3549.                     !
 3550.                     !     the first call to vntlat just gets the neutral values of ustar
 3551.                     !     and ventmf.
 3552.                     !
 3553.                     jstneu=.TRUE.
 3554.                 
 3555.  I                  CALL vntlax(ustarn, &
 3556.                          icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3557.                          u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3558.                          mon   ,nmax  ,jstneu,ncols )
 3559.                 
 3560.                     jstneu=.FALSE.
 3561.                 
 3562.  I                  CALL vntlax(ustarn, &
 3563.                          icheck ,bps  ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3564.                          u2     ,tm   ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3565.                          mon    ,nmax ,jstneu,ncols )
 3566.                 
 3567.  Vr4----------<     DO i = 1, nmax
 3568.  Vr4                   tcta(i)=tc(i)/bps(i)-tm(i)
 3569.  Vr4                   tgta(i)=tg(i)/bps(i)-tm(i)
 3570.  Vr4---------->     END DO
 3571.  I                  CALL rbrd( &
 3572.                          rb    ,rd    ,tcta  ,tgta  ,u2    ,tg    ,rdc   ,rbc   ,itype , &
 3573.                          z2    ,mon   ,nmax  ,ncols ,zlt2)
 3574.                     !
 3575.                     !     iterate for air temperature and ventilation mass flux
 3576.                     !     n.b. this version assumes dew-free conditions to estimate ea
 3577.                     !     for buoyancy term in vntmf or ra.
 3578.                     !
 3579.                     icount = 0
 3580.                 2000 icount = icount + 1
 3581.  1------------<     DO i = 1, nmax
 3582.  1                     IF (icheck(i) == 1) THEN
 3583.  1                        tsav(i) = ta (i)
 3584.  1                        esav(i) = ea (i)
 3585.  1                     END IF
 3586.  1------------>     END DO
 3587.  I                  CALL vntlax(ustarn, &
 3588.                          icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3589.                          u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3590.                          mon   ,nmax  ,jstneu,ncols )
 3591.                 
 3592.  I                  CALL cut( &
 3593.                          icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3594.                          ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3595.                          rsoil ,vcover2,nmax  ,ncols )
 3596.                 
 3597.  I                  CALL stres2( &
 3598.                          icount,ft1   ,fp1   ,icheck,ta    ,ea    ,rst   ,phsoil,stm   , &
 3599.                          tc    ,tg    ,w     ,vcover2,itype ,&
 3600.                          rootd ,zdepth,nmax  ,ncols ,topt2 ,tll2  ,tu2   , &
 3601.                          defac2,ph12  ,ph22)
 3602.                 
 3603.  I                  CALL cut(  &
 3604.                          icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3605.                          ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3606.                          rsoil ,vcover2,nmax  ,ncols )
 3607.                 
 3608.  1------------<     DO i = 1, nmax
 3609.  1                     IF (icheck(i) == 1) THEN
 3610.  1                        ta(i)= (tg(i)/rd(i)+tc(i)/rb(i)+tm(i)/ra(i)*bps(i)) &
 3611.  1                             /(1.0_r8 /rd(i)+1.0_r8 /rb(i)+1.0_r8 /ra(i))
 3612.  1                     END IF
 3613.  1------------>     END DO
 3614.                 
 3615.  1------------<     DO i = 1, nmax
 3616.  1                     IF (icheck(i) == 1) THEN
 3617.  1                        y1   =ABS(ta(i)-tsav(i))
 3618.  1                        y2   =ABS(ea(i)-esav(i))
 3619.  1                        IF((y1    <= 1.0e-2_r8 .AND. y2    <= 5.0e-3_r8) &
 3620.  1                             .OR. icount > icmax) THEN
 3621.  1                           icheck(i)=0
 3622.  1                        END IF
 3623.  1                     END IF
 3624.  1------------>     END DO
 3625.                 
 3626.  1------------<     DO i = 1, nmax
 3627.  1                     IF (icheck(i) == 1) GOTO 2000
 3628.  1------------>     END DO
 3629.                 
 3630.  A------------<     DO i = 1, nmax
 3631.  A                     fc    (i)=1.0_r8
 3632.  A                     fg    (i)=1.0_r8
 3633.  A                     idewco(i)=0
 3634.  A                     icheck(i)=1
 3635.  A------------>     END DO
 3636.                 
 3637.  V------------<     DO i = 1, nmax
 3638.  V                     tc(i)    =tcsav(i)
 3639.  V                     tg(i)    =tgsav(i)
 3640.  V A---------<>        tm(i)    =tmsav(i)
 3641.  V A---------<>        qm(i)    =qmsav(i)
 3642.  V                     radt(i,1)=rdsav(i,1)
 3643.  V                     radt(i,2)=rdsav(i,2)
 3644.  V                     etc(i)=EXP(21.65605_r8  -5418.0_r8  /tc(i))
 3645.  V                     etg(i)=EXP(21.65605_r8  -5418.0_r8  /tg(i))
 3646.  V                     btc(i)=EXP(30.25353_r8  -5418.0_r8  /tc(i))/(tc(i)*tc(i))
 3647.  V                     btg(i)=EXP(30.25353_r8  -5418.0_r8  /tg(i))/(tg(i)*tg(i))
 3648.  V------------>     END DO
 3649.                 
 3650.                 3000 CONTINUE
 3651.                 
 3652.  I                  CALL cut( &
 3653.                          icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3654.                          ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3655.                          rsoil ,vcover2,nmax  ,ncols )
 3656.                 
 3657.  1------------<     DO i = 1, nmax
 3658.  1                     IF (icheck(i) == 1) THEN
 3659.  1                        ecf (i)=SIGN(1.0_r8  ,etc(i)-ea(i))
 3660.  1                        egf (i)=SIGN(1.0_r8  ,etg(i)-ea(i))
 3661.  1                        dewc(i)=fc(i)*2.0_r8  -1.0_r8
 3662.  1                        dewg(i)=fg(i)*2.0_r8  -1.0_r8
 3663.  1                        ecf (i)=ecf(i)*dewc(i)
 3664.  1                        egf (i)=egf(i)*dewg(i)
 3665.  1                     END IF
 3666.  1------------>     END DO
 3667.                 
 3668.  1------------<     DO i = 1, nmax
 3669.  1                     IF ( (ecf(i) > 0.0_r8  .AND. egf(i) > 0.0_r8 ).OR. &
 3670.  1                          idewco(i) == 3) THEN
 3671.  1                        icheck(i)=0
 3672.  1                     ELSE
 3673.  1                        idewco(i)=idewco(i)+1
 3674.  1                        IF (idewco(i) == 1) THEN
 3675.  1                           fc(i)=0.0_r8
 3676.  1                           fg(i)=1.0_r8
 3677.  1                        ELSE IF (idewco(i) == 2) THEN
 3678.  1                           fc(i)=1.0_r8
 3679.  1                           fg(i)=0.0_r8
 3680.  1                        ELSE IF (idewco(i) == 3) THEN
 3681.  1                           fc(i)=0.0_r8
 3682.  1                           fg(i)=0.0_r8
 3683.  1                        END IF
 3684.  1                     END IF
 3685.  1------------>     END DO
 3686.                 
 3687.  1------------<     DO i=1,nmax
 3688.  1                     IF (icheck(i) == 1) go to 3000
 3689.  1------------>     END DO
 3690.                 
 3691.                     CALL temres(&
 3692.                          bps   ,psb   ,em    ,gmt   ,gmq   ,psy   ,rcp   ,wc    ,wg    , &
 3693.                          fc    ,fg    ,hr    ,hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm , &
 3694.                          egdtg ,egdtc ,egdqm ,ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm, &
 3695.                          ect   ,eci   ,egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    , &
 3696.                          ecidif,egidif,ra    ,rb    ,rd    ,rc    ,rg    ,ta    ,ea    , &
 3697.                          etc   ,etg   ,btc   ,btg   ,radt  ,rst   ,rsoil ,hrr   ,cc    , &
 3698.                          cg    ,satcap,dtc   ,dtg   ,dtm   ,dqm   ,thermk,tc    ,tg    , &
 3699.                          td    ,capac ,qm    ,tm    ,psur  ,dtc3x , &
 3700.                          nmax  ,vcover2,ncols)
 3701.                 
 3702.                     IF (ncount <= 1) THEN
 3703.  Vr4----------<        DO i = 1, nmax
 3704.  Vr4                      tc(i)=tc(i)+dtc(i)
 3705.  Vr4                      tg(i)=tg(i)+dtg(i)
 3706.  Vr4                      tm(i)=tm(i)+dtm(i)
 3707.  Vr4                      qm(i)=qm(i)+dqm(i)
 3708.  Vr4---------->        END DO
 3709.                        go to 7000
 3710.                     END IF
 3711.                 
 3712.  Vpr4 I------->     CALL update( &
 3713.                          bps   ,deadtg,deadtc,deadqm,ect   ,eci   ,egt   ,egi   ,egs   , &
 3714.                          eg    ,hc    ,hg    ,ecmass,egmass,etmass,hflux ,chf   ,shf   , &
 3715.                          ra    ,rb    ,rd    ,ea    ,etc   ,etg   ,btc   ,btg   ,cc    , &
 3716.                          cg    ,dtc   ,dtg   ,dtm   ,dqm   ,tc    ,tg    ,td    ,capac , &
 3717.                          tm    ,nmax  ,dtc3x ,ncols)
 3718.                 
 3719.  Vr2----------<     DO i = 1, nmax
 3720.  Vr2                   fac     =grav/(100.0_r8 *psb(i)*dtc3x)
 3721.  Vr2                   dtmdt   =(gmt(i,3) + hflux (i) * fac   /(cp*bps(i)))/gmt(i,2)
 3722.  Vr2                   dqmdt   =(gmq(i,3) + etmass(i) * fac)  / gmq(i,2)
 3723.  Vr2                   dtm  (i)=dtmdt   *   dtc3x
 3724.  Vr2                   dqm  (i)=dqmdt   *   dtc3x
 3725.  Vr2                   gmt(i,3)=dtmdt
 3726.  Vr2                   gmq(i,3)=dqmdt
 3727.  Vr2                   tm   (i)=tm(i)+dtm(i)
 3728.  Vr2                   qm   (i)=qm(i)+dqm(i)
 3729.  Vr2---------->     END DO
 3730.  1------------<     DO i = 1, nmax
 3731.  1                     ntyp=itype(i)
 3732.  1                     !vcover(i,2)=xcover(ntyp,mon(i),2)
 3733.  1                     d     (i)=xd (ntyp,mon(i))
 3734.  1                     z0x   (i)=x0x(ntyp,mon(i))
 3735.  1                     rdc   (i)=xdc(ntyp,mon(i))
 3736.  1                     rbc   (i)=xbc(ntyp,mon(i))
 3737.  1------------>     END DO
 3738.                   END SUBROUTINE sflxes
 3739.                   !
 3740.                   !
 3741.                   !
 3742.                   ! interc :calculation of (1) interception and drainage of rainfall and snow
 3743.                   !                        (2) specific heat terms fixed for time step
 3744.                   !                        (3) modifications for 4-th order model may not
 3745.                   !                            conserve energy;
 3746.                   !         modification: non-uniform precipitation convective ppn
 3747.                   !                       is described by area-intensity relationship :-
 3748.                   !
 3749.                   !                       f(x)=a*exp(-b*x)+c
 3750.                   !
 3751.                   !                       throughfall, interception and infiltration
 3752.                   !                       excess are functional on this relationship
 3753.                   !                       and proportion of large-scale ppn.
 3754.                 
 3755.                 
 3756.                 
 3757.                   SUBROUTINE interc( &
 3758.                        roff  ,cc    ,cg    ,satcap,snow  ,extk  ,tc    ,tg    ,td    , &
 3759.                        capac ,w     ,tm    ,ppc   ,ppl   ,vcover,itype ,dtc3x , &
 3760.                        nmax  ,ncols ,zlt2 )
 3761.                     !
 3762.                     !
 3763.                     !        input parameters
 3764.                     !-----------------------------------------------------------------------
 3765.                     !   ppc.............precipitation rate ( cumulus )           (mm/s)
 3766.                     !   ppl.............precipitation rate ( large scale )       (mm/s)
 3767.                     !   w(1)............soil wetnessof ground surface
 3768.                     !   poros...........porosity
 3769.                     !   pie.............pai=3.14159..
 3770.                     !   cw..............liquid water heat capacity               (j/m**3)
 3771.                     !   clai............heat capacity of foliage
 3772.                     !   capac(cg).......canopy/ground cover liquid water capacity(m)
 3773.                     !   satcap(cg)......saturation liquid water capacity         (m)
 3774.                     !   extk(cg,  ,  )..extinction coefficient
 3775.                     !   zlt(1)..........canopy leaf and stem area density        (m**2/m**3)
 3776.                     !   zlt(2)..........ground cover leaf and stem area index    (m**2/m**2)
 3777.                     !   vcover(cg)......vegetation cover
 3778.                     !   tm..............reference temperature                    (k)
 3779.                     !   tc..............canopy temperature                       (k)
 3780.                     !   tg..............ground temperature                       (k)
 3781.                     !   tf..............freezing point                           (k)
 3782.                     !   satco............mean soil hydraulic conductivity in the root zone
 3783.                     !                                                            (m/s)
 3784.                     !   dtc3x...........time increment dt
 3785.                     !   snomel..........heat of melting                          (j/kg)
 3786.                     !-----------------------------------------------------------------------
 3787.                     !     in subr. parameters
 3788.                     !-----------------------------------------------------------------------
 3789.                     !   chisl...........soil conductivity
 3790.                     !   difsl...........soil diffusivity
 3791.                     !-----------------------------------------------------------------------
 3792.                     !       output parameters
 3793.                     !-----------------------------------------------------------------------
 3794.                     !   roff............runoff
 3795.                     !   snow............snow amount
 3796.                     !   capac(cg).......canopy/ground cover liquid water capacity(m)
 3797.                     !   cc..............heat capacity of the canopy
 3798.                     !   cg..............heat capacity of the ground
 3799.                     !   w(1)............soil wetnessof ground surface
 3800.                     !-----------------------------------------------------------------------
 3801.                     !   ncols...........Numero de ponto por faixa de latitude
 3802.                     !   ityp............numero das classes de solo 13
 3803.                     !   imon............Numero maximo de meses no ano (12)
 3804.                     !   icg.............Parametros da vegetacao (icg=1 topo e icg=2 base)
 3805.                     !   iwv.............Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 3806.                     !                   proximo, iwv=3 infravermelho termal
 3807.                     !   idp.............Camadas de solo (1 a 3)
 3808.                     !   ibd.............Estado da vegetacao  ibd=1 verde / ibd=2 seco
 3809.                     !   mon.............Numero do mes do ano (1-12)
 3810.                     !   nmax
 3811.                     !   zdepth..........Profundidade para as tres camadas de solo
 3812.                     !   itype...........Classe de textura do solo
 3813.                     !   td..............Temperatura do solo profundo (K)
 3814.                     !-----------------------------------------------------------------------
 3815.                     INTEGER, INTENT(in   ) :: ncols
 3816.                 
 3817.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 3818.                     INTEGER, INTENT(in   ) :: nmax
 3819.                 
 3820.                     INTEGER, INTENT(in   ) :: itype (ncols)
 3821.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 3822.                     !
 3823.                     !     the size of working area is ncols*187
 3824.                     !
 3825.                     !     atmospheric parameters as boudary values for sib
 3826.                     !
 3827.                     REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 3828.                     REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 3829.                     REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 3830.                     !
 3831.                     !     prognostic variables
 3832.                     !
 3833.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 3834.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 3835.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 3836.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 3837.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 3838.                     !
 3839.                     !     variables calculated from above and ambient conditions
 3840.                     !
 3841.                     REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
 3842.                     REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
 3843.                     REAL(KIND=r8),    INTENT(in   ) :: satcap(ncols,icg)
 3844.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 3845.                     REAL(KIND=r8),    INTENT(in   ) :: extk  (ncols,icg,iwv,ibd)
 3846.                     !
 3847.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 3848.                     !
 3849.                     REAL(KIND=r8),   INTENT(inout) :: roff  (ncols)
 3850.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 3851.                 
 3852.                     !
 3853.                     REAL(KIND=r8)    :: ap         (ncols)
 3854.                     REAL(KIND=r8)    :: cp         (ncols)
 3855.                     REAL(KIND=r8)    :: totalp(ncols)
 3856.                     REAL(KIND=r8)    :: thru  (ncols)
 3857.                     REAL(KIND=r8)    :: fpi   (ncols)
 3858.                     REAL(KIND=r8)    :: chisl (ncols)
 3859.                     REAL(KIND=r8)    :: csoil (ncols)
 3860.                     REAL(KIND=r8)    :: p0         (ncols)
 3861.                     REAL(KIND=r8)    :: ts         (ncols)
 3862.                     REAL(KIND=r8)    :: specht(ncols)
 3863.                     REAL(KIND=r8)    :: spwet1(ncols)
 3864.                     REAL(KIND=r8)    :: zload (ncols)
 3865.                     REAL(KIND=r8)    :: ccp   (ncols)
 3866.                     REAL(KIND=r8)    :: cct   (ncols)
 3867.                     REAL(KIND=r8)    :: zmelt (ncols)
 3868.                     REAL(KIND=r8)    :: xsc   (ncols)
 3869.                     REAL(KIND=r8)    :: tti   (ncols)
 3870.                     REAL(KIND=r8)    :: xs         (ncols)
 3871.                     REAL(KIND=r8)    :: arg   (ncols)
 3872.                     REAL(KIND=r8)    :: tex   (ncols)
 3873.                     REAL(KIND=r8)    :: tsd   (ncols)
 3874.                     REAL(KIND=r8)    :: pinf  (ncols)
 3875.                     REAL(KIND=r8)    :: equdep(ncols)
 3876.                     REAL(KIND=r8)    :: roffo (ncols)
 3877.                     REAL(KIND=r8)    :: tsf   (ncols)
 3878.                     REAL(KIND=r8)    :: diff  (ncols)
 3879.                     REAL(KIND=r8)    :: freeze(ncols)
 3880.                     REAL(KIND=r8)    :: ccc   (ncols)
 3881.                     REAL(KIND=r8)    :: spwet (ncols)
 3882.                     REAL(KIND=r8)    :: snowp (ncols,2)
 3883.                     REAL(KIND=r8)    :: capacp(ncols,2)
 3884.                 
 3885.                     REAL(KIND=r8), PARAMETER :: pcoefs(2,2) = RESHAPE ( &
 3886.                          (/20.0_r8    ,0.0001_r8  ,0.206e-8_r8,0.9999_r8  /), &
 3887.                          (/2,2/))
 3888.                     REAL(KIND=r8), PARAMETER :: bp = 20.0_r8
 3889.                     REAL(KIND=r8), PARAMETER :: difsl = 5.0e-7_r8
 3890.                     REAL(KIND=r8)    :: d1x
 3891.                     REAL(KIND=r8)    :: theta
 3892.                     INTEGER :: i
 3893.                     INTEGER :: iveg
 3894.                     INTEGER :: ntyp
 3895.                     !
 3896.                     !     diffusivity of the soil
 3897.                     !            --          --
 3898.                     !           |    86400.0   |
 3899.                     !d1x   =SQRT|--------------|*0.5
 3900.                     !           |  (pie*difsl  |
 3901.                     !            --          --
 3902.                     d1x   =SQRT(86400.0_r8 /(pie*difsl))*0.5_r8
 3903.                     !
 3904.  A-----------<>     ap    = 0.0_r8 !  CALL reset(ap,ncols*33)
 3905.  1------------<     DO i = 1, nmax
 3906.  1                     ap(i)=pcoefs(2,1)
 3907.  1                     cp(i)=pcoefs(2,2)
 3908.  1                     totalp(i) = ppc(i) + ppl(i)
 3909.  1                     IF (totalp(i) >= 1.0e-8_r8) THEN
 3910.  1                        !
 3911.  1                        !       (ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))
 3912.  1                        !ap(i)=---------------------------------------------
 3913.  1                        !                     totalp(i)
 3914.  1                        !
 3915.  1                        ap(i)=(ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))/totalp(i)
 3916.  1                        !
 3917.  1                        !       (ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))
 3918.  1                        !ap(i)=---------------------------------------------
 3919.  1                        !                     totalp(i)
 3920.  1                        !
 3921.  1                        cp(i)=(ppc(i)*pcoefs(1,2) + ppl(i)*pcoefs(2,2))/totalp(i)
 3922.  1                        !
 3923.  1                     END IF
 3924.  1 A---------<>        roff(i)=0.0_r8
 3925.  1 A---------<>        thru(i)=0.0_r8
 3926.  1 A---------<>        fpi (i)=0.0_r8
 3927.  1                     !
 3928.  1                     !     conductivity of the soil, taking into account porosity
 3929.  1                     !
 3930.  1                     ntyp    = itype(i)
 3931.  1                     !
 3932.  1                     theta   = w(i,1)*poros(ntyp)
 3933.  1                     !
 3934.  1                     !            ( 9.8e-4 + 1.2e-3 * theta )
 3935.  1                     !chisl(i) = -----------------------------
 3936.  1                     !             ( 1.1 - 0.4 * theta )
 3937.  1                     !
 3938.  1                     chisl(i) = ( 9.8e-4_r8 + 1.2e-3_r8 *theta ) / ( 1.1_r8 - 0.4_r8 *theta )
 3939.  1                     !
 3940.  1                     chisl(i) = chisl(i)*4.186e2_r8
 3941.  1                     !
 3942.  1                     !     heat capacity of the soil
 3943.  1                     !
 3944.  1                     !            --          --
 3945.  1                     !           |    86400.0   |
 3946.  1                     !d1x   =SQRT|--------------|*0.5
 3947.  1                     !           |  (pie*difsl) |
 3948.  1                     !            --          --
 3949.  1                     csoil(i)=chisl(i)*d1x
 3950.  1                     !
 3951.  1                     !     precipitation is given in mm
 3952.  1                     !
 3953.  1                     p0(i)=totalp(i)*0.001_r8
 3954.  1------------>     END DO
 3955.                     !
 3956.                     !
 3957.                     !
 3958.  1------------<     DO iveg = 1, 2
 3959.  1              
 3960.  1                     IF (iveg == 1) THEN
 3961.  1 Vr4--------<           DO i = 1, nmax
 3962.  1 Vr4                       ntyp     =itype(i)
 3963.  1 Vr4 A-----<>              ts    (i)=tc (i)
 3964.  1 Vr4                       !  zlt(icg) = Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa /icg=2 base da copa
 3965.  1 Vr4                       !  clai     = heat capacity of foliage
 3966.  1 Vr4                       specht(i)=zlt2(i,1)*clai
 3967.  1 Vr4-------->           END DO
 3968.  1                     ELSE
 3969.  1 A----------<           DO i = 1, nmax
 3970.  1 A                         ts    (i)=tg (i)
 3971.  1 A                         specht(i)=csoil(i) !  heat capacity of the soil
 3972.  1 A---------->           END DO
 3973.  1                     END IF
 3974.  1              
 3975.  1 Vcr4-------<        DO i = 1, nmax
 3976.  1 Vcr4                   IF (iveg == 1 .OR. ts(i) > tf) THEN
 3977.  1 Vcr4                      !
 3978.  1 Vcr4                      ! capac(1/2) = canopy/ground cover liquid water capacity(m)
 3979.  1 Vcr4                      ! satcap(cg) = saturation liquid water capacity         (m)
 3980.  1 Vcr4                      !
 3981.  1 Vcr4                      xsc(i) = MAX(0.0_r8  , capac(i,iveg) - satcap(i,iveg))
 3982.  1 Vcr4                      !
 3983.  1 Vcr4                      capac(i,iveg) = capac(i,iveg) - xsc(i)
 3984.  1 Vcr4                      !
 3985.  1 Vcr4                      roff(i) = roff(i) + xsc(i)
 3986.  1 Vcr4                   END IF
 3987.  1 Vcr4------->        END DO
 3988.  1              
 3989.  1 2----------<        DO i = 1, nmax
 3990.  1 2                      ntyp=itype(i)
 3991.  1 2                      !
 3992.  1 2                      !   cw  = liquid water heat capacity (j/m**3)
 3993.  1 2                      !
 3994.  1 2                      spwet1(i)=MIN(0.05_r8 ,capac(i,iveg))*cw
 3995.  1 2                      !
 3996.  1 2                      capacp(i,iveg)=0.0_r8
 3997.  1 2                      !
 3998.  1 2                      snowp (i,iveg)=0.0_r8
 3999.  1 2                      !
 4000.  1 2                      IF (ts(i) > tf) THEN
 4001.  1 2                         capacp(i,iveg)=capac (i,iveg)
 4002.  1 2                      ELSE
 4003.  1 2                         snowp (i,iveg)=capac (i,iveg)
 4004.  1 2                      END IF
 4005.  1 2                      !
 4006.  1 2                      capac (i,iveg)=capacp(i,iveg)
 4007.  1 2                      !
 4008.  1 2                      snow  (i,iveg)=snowp (i,iveg)
 4009.  1 2                      !
 4010.  1 2                      zload (i)     =capac (i,iveg) + snow(i,iveg)
 4011.  1 2                      !
 4012.  1 2                      !                --                                            --
 4013.  1 2                      !               |             --                              -- |
 4014.  1 2                      !               |            | -extk(i,iveg,3,1) * zlt2(i,iveg) ||
 4015.  1 2                      !fpi   (i)     =| 1.0  -  EXP|----------------------------------|| * vcover(i,iveg)
 4016.  1 2                      !               |            |         vcover(i,iveg)           ||
 4017.  1 2                      !               |              --                              --|
 4018.  1 2                      !                --                                            --
 4019.  1 2                      !
 4020.  1 2                      fpi   (i)     =( 1.0_r8 -EXP(-extk(i,iveg,3,1)*zlt2(i,iveg) &
 4021.  1 2                           /vcover(i,iveg))) *vcover(i,iveg)
 4022.  1 2                      !
 4023.  1 2                      tti(i)=p0(i)*( 1.0_r8 -fpi(i) )
 4024.  1 2                      !
 4025.  1 2                      IF (iveg.EQ.2) tti(i) = p0(i)
 4026.  1 2---------->        END DO
 4027.  1                     !
 4028.  1                     !     proportional saturated area (xs) and leaf drainage(tex)
 4029.  1                     !
 4030.  1 2----------<        DO i = 1, nmax
 4031.  1 2                      xs(i)=1.0_r8
 4032.  1 2                      IF (p0(i) >= 1.0e-9_r8) THEN
 4033.  1 2                         !
 4034.  1 2                         !        (satcap(i,iveg) - zload(i))      cp(i)
 4035.  1 2                         !arg(i)=----------------------------- - ---------
 4036.  1 2                         !          (p0(i)*fpi(i)*ap(i))           ap(i)
 4037.  1 2                         !
 4038.  1 2                         arg(i)=(satcap(i,iveg)-zload(i))/ &
 4039.  1 2                              (p0(i)*fpi(i)*ap(i)) - cp(i)/ap(i)
 4040.  1 2                         IF (arg(i) >= 1.0e-9_r8) THEN
 4041.  1 2                            !
 4042.  1 2                            !         -1.0
 4043.  1 2                            !xs(i) = ------ * LOG(arg(i))
 4044.  1 2                            !          bp
 4045.  1 2                            !
 4046.  1 2                            xs(i)=-1.0_r8/bp * LOG( arg(i) )
 4047.  1 2                            xs(i)= MIN ( xs(i) , 1.0_r8 )
 4048.  1 2                            xs(i)= MAX ( xs(i) , 0.0_r8 )
 4049.  1 2                         END IF
 4050.  1 2                      END IF
 4051.  1 2---------->        END DO
 4052.  1              
 4053.  1 2----------<        DO i = 1, nmax
 4054.  1 2                      !                     --                                        --
 4055.  1 2                      !                    | ap(i)                                      |
 4056.  1 2                      !tex(i)=p0(i)*fpi(i)*|-------*(1.0 - EXP(-bp*xs(i))) + cp(i)*xs(i)|-(satcap(i,iveg) - zload(i))*xs(i)
 4057.  1 2                      !                    |  bp                                        |
 4058.  1 2                      !                     --                                        --
 4059.  1 2                      tex(i)=p0(i)*fpi(i)*(ap(i)/bp*(1.0_r8 -EXP(-bp*xs(i)))+cp(i)*xs(i)) &
 4060.  1 2                           -(satcap(i,iveg)-zload(i))*xs(i)
 4061.  1 2            
 4062.  1 2                      tex(i)= MAX ( tex(i), 0.0_r8 )
 4063.  1 2                      !
 4064.  1 2                      IF (iveg == 2) tex(i) = 0.0_r8
 4065.  1 2                      !
 4066.  1 2                      !     total throughfall (thru) and store augmentation
 4067.  1 2                      !
 4068.  1 2                      thru(i)=tti(i)+tex(i)
 4069.  1 2                      IF (iveg == 2 .AND. tg(i) <= tf) THEN
 4070.  1 2                         thru(i)=0.0_r8
 4071.  1 2                      END IF
 4072.  1 2            
 4073.  1 2                      pinf(i)=p0(i) - thru(i)
 4074.  1 2            
 4075.  1 2                      IF (tm(i) > tf) THEN
 4076.  1 2                         capac(i,iveg) = capac(i,iveg) + pinf(i)
 4077.  1 2                      ELSE
 4078.  1 2                         snow (i,iveg) = snow (i,iveg) + pinf(i)
 4079.  1 2                      END IF
 4080.  1 2---------->        END DO
 4081.  1              
 4082.  1                     IF (iveg == 2)   THEN
 4083.  1 2----------<           DO i = 1, nmax
 4084.  1 2                         ntyp=itype(i)
 4085.  1 2                         IF (tm(i) <= tf) THEN
 4086.  1 2                            snow  (i,iveg) = snowp(i,iveg) + p0(i)
 4087.  1 2                            thru  (i)=0.0_r8
 4088.  1 2                         ELSE
 4089.  1 2                            !
 4090.  1 2                            !     instantaneous overland flow contribution ( roff )
 4091.  1 2                            !
 4092.  1 2                            equdep(i)=satco(ntyp)*dtc3x
 4093.  1 2                            xs(i)=1.0_r8
 4094.  1 2                            IF (thru(i) >= 1.0e-9_r8) THEN
 4095.  1 2                               arg(i)=equdep(i)/( thru(i)*ap(i) ) -cp(i)/ap(i)
 4096.  1 2                               IF (arg(i) >= 1.0e-9_r8) THEN
 4097.  1 2                                  xs(i)=-1.0_r8 /bp* LOG( arg(i) )
 4098.  1 2                                  xs(i)= MIN ( xs(i), 1.0_r8 )
 4099.  1 2                                  xs(i)= MAX ( xs(i), 0.0_r8 )
 4100.  1 2                               END IF
 4101.  1 2                            END IF
 4102.  1 2                            roffo(i)=thru(i)* &
 4103.  1 2                                 (ap(i)/bp*(1.0_r8 -EXP(-bp*xs(i)))+cp(i)*xs(i)) &
 4104.  1 2                                 -equdep(i)*xs(i)
 4105.  1 2                            roffo(i)= MAX ( roffo(i), 0.0_r8 )
 4106.  1 2                            roff (i)= roff (i)+roffo(i)
 4107.  1 2                            w(i,1)=w(i,1)+(thru(i)-roffo(i))/ &
 4108.  1 2                                 ( poros(ntyp)*zdepth(ntyp,1))
 4109.  1 2                         END IF
 4110.  1 2---------->           END DO
 4111.  1                     END IF
 4112.  1                     !
 4113.  1                     !     temperature change due to addition of precipitation
 4114.  1                     !
 4115.  1 Vr2--------<        DO i = 1, nmax
 4116.  1 Vr2                    diff(i)=(capac (i,iveg)+snow (i,iveg) &
 4117.  1 Vr2                         -capacp(i,iveg)-snowp(i,iveg))*cw
 4118.  1 Vr2                    ccp(i)=specht(i)+spwet1(i)
 4119.  1 Vr2                    cct(i)=specht(i)+spwet1(i)+diff(i)
 4120.  1 Vr2                    tsd(i)=( ts(i)*ccp(i)+tm(i)*diff(i) )/cct(i)
 4121.  1 Vr2                    tsf(i)=( ts(i)-tf)*( tm(i)-tf)
 4122.  1 Vr2-------->        END DO
 4123.  1 2----------<        DO i = 1, nmax
 4124.  1 2                      IF (tsf(i) < 0.0_r8) THEN
 4125.  1 2                         IF (tsd(i) <= tf) THEN
 4126.  1 2                            !
 4127.  1 2                            !     freezing of water on canopy or ground
 4128.  1 2                            !
 4129.  1 2                            ccc(i)=capacp(i,iveg)*snomel
 4130.  1 2                            IF (ts(i) < tm(i)) ccc(i)=diff(i)*snomel/cw
 4131.  1 2                            tsd   (i)=( ts(i)*ccp(i)+tm(i)*diff(i)+ccc(i) )/cct(i)
 4132.  1 2                            freeze(i)= tf*cct(i)-( ts(i)*ccp(i)+tm(i)*diff(i) )
 4133.  1 2                            freeze(i)=( MIN ( ccc(i), freeze(i) ))/snomel
 4134.  1 2                            IF (tsd(i) > tf) tsd(i) = tf - 0.1_r8
 4135.  1 2                            snow (i,iveg)=snow (i,iveg)+freeze(i)
 4136.  1 2                            capac(i,iveg)=capac(i,iveg)-freeze(i)
 4137.  1 2                         ELSE
 4138.  1 2                            !
 4139.  1 2                            !     melting of water on canopy or ground
 4140.  1 2                            !
 4141.  1 2                            ccc(i)=- snow(i,iveg)*snomel
 4142.  1 2                            IF (ts(i) > tm(i)) ccc(i)=- diff(i)*snomel/cw
 4143.  1 2                            tsd   (i)=( ts(i)*ccp(i)+tm(i)*diff(i)+ccc(i) )/cct(i)
 4144.  1 2                            freeze(i)=( tf*cct(i)-( ts(i)*ccp(i)+tm(i)*diff(i) ))
 4145.  1 2                            freeze(i)= MAX ( ccc(i), freeze(i) ) /snomel
 4146.  1 2                            IF (tsd(i) <= tf) tsd(i) = tf - 0.1_r8
 4147.  1 2                            snow (i,iveg)=snow (i,iveg)+freeze(i)
 4148.  1 2                            capac(i,iveg)=capac(i,iveg)-freeze(i)
 4149.  1 2                         END IF
 4150.  1 2                      END IF
 4151.  1 2---------->        END DO
 4152.  1 A----------<        DO i = 1, nmax
 4153.  1 A                      IF (iveg == 1) THEN
 4154.  1 A                         tc(i)=tsd(i)
 4155.  1 A                      ELSE
 4156.  1 A                         tg(i)=tsd(i)
 4157.  1 A                      END IF
 4158.  1 A---------->        END DO
 4159.  1 2----------<        DO i = 1, nmax
 4160.  1 2                      IF (snow(i,iveg) >= 0.0000001_r8 .OR. iveg == 2) THEN
 4161.  1 2                         zmelt(i) = 0.0_r8
 4162.  1 2                         IF (td(i) > tf) THEN
 4163.  1 2                            zmelt(i)=capac(i,iveg)
 4164.  1 2                         ELSE
 4165.  1 2                            roff (i)=roff(i)+capac(i,iveg)
 4166.  1 2                         END IF
 4167.  1 2                         capac(i,iveg)=0.0_r8
 4168.  1 2                         !
 4169.  1 2                         !     if tg is less than tf water accumulates as snowpack in capac(2)
 4170.  1 2                         !
 4171.  1 2                         ntyp=itype(i)
 4172.  1 2                         w(i,1)=w(i,1)+zmelt(i)/( poros(ntyp)*zdepth(ntyp,1))
 4173.  1 2                      END IF
 4174.  1 2---------->        END DO
 4175.  1 Vr4--------<        DO i = 1, nmax
 4176.  1 Vr4                    !
 4177.  1 Vr4                    !     these lines exist to eliminate a cray compiler error
 4178.  1 Vr4                    !
 4179.  1 Vr4                    IF (iveg == 2) THEN
 4180.  1 Vr4                       IF (snow(i,2) > 0.0_r8 .AND. tg(i) > 273.16_r8) THEN
 4181.  1 Vr4                       END IF
 4182.  1 Vr4                       IF (capac(i,2) > 0.0_r8 .AND. tg(i) > 273.16_r8) THEN
 4183.  1 Vr4                       END IF
 4184.  1 Vr4                    END IF
 4185.  1 Vr4                    capac(i,iveg)=capac(i,iveg)+snow(i,iveg)
 4186.  1 Vr4                    snow (i,iveg)=0.0_r8
 4187.  1 Vr4 A-----<>           p0(i)=thru(i)
 4188.  1 Vr4-------->        END DO
 4189.  1------------>     END DO
 4190.                     !
 4191.                     !     calculation of canopy and ground heat capacities.
 4192.                     !
 4193.  Vr4----------<     DO i = 1, nmax
 4194.  Vr4                   ntyp=itype(i)
 4195.  Vr4                   cc(i)=zlt2(i,1)*clai+capac(i,1)*cw
 4196.  Vr4                   spwet(i)=MIN( 0.05_r8 , capac(i,2))*cw
 4197.  Vr4                   cg(i)=csoil(i)+spwet(i)
 4198.  Vr4---------->     END DO
 4199.                   END SUBROUTINE interc
 4200.                 
 4201.                 
 4202.                 
 4203.                   ! stomat :performs stomatal resistance.
 4204.                 
 4205.                 
 4206.                 
 4207.                   SUBROUTINE stomat( &
 4208.                        cosz  ,par   ,pd    ,rst   ,extk  ,vcover,itype ,nmax  ,ncols ,&
 4209.                        zlt2  ,green2,chil2 ,rstpar2)
 4210.                     !
 4211.                     !
 4212.                     !-----------------------------------------------------------------------
 4213.                     !      input parameters
 4214.                     !-----------------------------------------------------------------------
 4215.                     !   cosz.............cosine of zenith angle
 4216.                     !   extk(cg,vnt,bd)..extinction coefficient
 4217.                     !   zlt   (cg).......leaf area index
 4218.                     !   vcover(cg).......fraction of vegetation cover
 4219.                     !   green (cg).......fraction of grenn leaves
 4220.                     !   chil  (cg).......leaf orientation pameter
 4221.                     !   rstpar(cg,3).....coefficints related to par influence on
 4222.                     !                    stomatal resistance
 4223.                     !   radn   (vnt,bd)..downward sw/lw radiation at the surface
 4224.                     !   par   (cg).......par( photo-synthetic active radiation)
 4225.                     !   pd    (cg).......ratio of par(beam) to par(beam+diffuse)
 4226.                     !-----------------------------------------------------------------------
 4227.                     !     output parameters
 4228.                     !-----------------------------------------------------------------------
 4229.                     !   rst(cg)..........stomatal reistance
 4230.                     !-----------------------------------------------------------------------
 4231.                     !   itype............Classe de textura do solo
 4232.                     !   nmax
 4233.                     !   pie..............Constante Pi=3.1415926e0
 4234.                     !   athird...........Constante athird=1.0e0 /3.0e0
 4235.                     !   ncols............Numero de ponto por faixa de latitude
 4236.                     !   ityp.............numero das classes de solo 13
 4237.                     !   imon.............Numero maximo de meses no ano (12)
 4238.                     !   icg..............Parametros da vegetacao (icg=1 topo e icg=2 base)
 4239.                     !   iwv..............Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4240.                     !                    proximo, iwv=3 infravermelho termal
 4241.                     !   ibd..............Estado da vegetacao ibd=1 verde / ibd=2 seco
 4242.                     !-----------------------------------------------------------------------
 4243.                     !
 4244.                     INTEGER, INTENT(in   ) :: ncols
 4245.                     INTEGER, INTENT(in   ) :: nmax
 4246.                     REAL(KIND=r8)   , INTENT(in   ) :: rstpar2(ncols,icg,iwv)
 4247.                     INTEGER, INTENT(in   ) :: itype (ncols)
 4248.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 4249.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 4250.                     REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 4251.                     REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 4252.                 
 4253.                     !
 4254.                     !     variables calculated from above and ambient conditions
 4255.                     !
 4256.                     REAL(KIND=r8),    INTENT(in   ) :: par   (ncols,icg)
 4257.                     REAL(KIND=r8),    INTENT(in   ) :: pd    (ncols,icg)
 4258.                     REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
 4259.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 4260.                     !
 4261.                     !     this is for coupling with closure turbulence model
 4262.                     !
 4263.                     REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 4264.                     !
 4265.                     REAL(KIND=r8)    :: f     (ncols)
 4266.                     REAL(KIND=r8)    :: gamma (ncols)
 4267.                     REAL(KIND=r8)    :: at    (ncols)
 4268.                     REAL(KIND=r8)    :: power1(ncols)
 4269.                     REAL(KIND=r8)    :: power2(ncols)
 4270.                     REAL(KIND=r8)    :: aa    (ncols)
 4271.                     REAL(KIND=r8)    :: bb    (ncols)
 4272.                     REAL(KIND=r8)    :: zat   (ncols)
 4273.                     REAL(KIND=r8)    :: zk    (ncols)
 4274.                     REAL(KIND=r8)    :: ekat  (ncols)
 4275.                     REAL(KIND=r8)    :: rho4  (ncols)
 4276.                     REAL(KIND=r8)    :: avflux(ncols)
 4277.                     !
 4278.                     INTEGER :: i
 4279.                     INTEGER :: iveg
 4280.                     INTEGER :: irad
 4281.                     REAL(KIND=r8)    :: fcon
 4282.                     REAL(KIND=r8)    :: xabc
 4283.                     REAL(KIND=r8)    :: xabd
 4284.                     REAL(KIND=r8)    :: ftemp
 4285.                     !
 4286.                     !
 4287.                     !     bounding of product of extinction coefficient and local l.a.i.
 4288.                     !
 4289.  Vr4----------<     DO i = 1, nmax
 4290.  Vr4                   f(i) = MAX( cosz(i), 0.01746_r8 )
 4291.  Vr4---------->     END DO
 4292.                     !
 4293.  1------------<     DO iveg = 1, 2
 4294.  1 2----------<        DO irad = 1, 2 !Estado da vegetacao irad=1 verde / irad=2 seco
 4295.  1 2 Vr4------<           DO i = 1, nmax
 4296.  1 2 Vr4                     !             --                   --
 4297.  1 2 Vr4                     !            |             150       |
 4298.  1 2 Vr4                     ! extk = MIN |  extk, -------------- |
 4299.  1 2 Vr4                     !            |         zlt2 * vcover |
 4300.  1 2 Vr4                     !             --                   --
 4301.  1 2 Vr4                     !
 4302.  1 2 Vr4                     extk(i,iveg,1,irad)=min(extk(i,iveg,1,irad),150.0_r8 / &
 4303.  1 2 Vr4                          zlt2(i,iveg)*vcover(i,iveg))
 4304.  1 2 Vr4------>           END DO
 4305.  1 2---------->        END DO
 4306.  1------------>     END DO
 4307.                     !
 4308.                     fcon  =0.25_r8*pie + athird
 4309.                     iveg=1
 4310.                     !
 4311.  1------------<     DO i = 1, nmax
 4312.  1                     IF (itype(i) == 13 .OR. itype(i) == 11) THEN
 4313.  1                        rst(i,iveg) = 1.0e5_r8
 4314.  1                     ELSE
 4315.  1                        !
 4316.  1                        !        zlt2           leaf area index
 4317.  1                        ! at = -------- = ------------------------------
 4318.  1                        !       vcover     fraction of vegetation cover
 4319.  1                        !
 4320.  1                        !
 4321.  1                        at(i) = zlt2(i,iveg)/vcover(i,iveg)
 4322.  1                        !
 4323.  1                        IF (par(i,iveg) <= 0.00101_r8) THEN
 4324.  1                           !
 4325.  1                           ! iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4326.  1                           !             proximo, iwv=3 infravermelho termal
 4327.  1                           !
 4328.  1                           !            rstpar(visivel)
 4329.  1                           ! xabc = ------------------------- + rstpar(infravermelho termal)
 4330.  1                           !          rstpar(infravermelho)
 4331.  1                           !
 4332.  1                           xabc = rstpar2(i,iveg,1) / rstpar2(i,iveg,2) + rstpar2(i,iveg,3)
 4333.  1                           !
 4334.  1                           !        0.5
 4335.  1                           ! xabd =------ *  at(i)
 4336.  1                           !        xabc
 4337.  1                           !
 4338.  1                           xabd = 0.5_r8  / xabc * at(i)
 4339.  1                           !
 4340.  1                           !          1
 4341.  1                           ! rst  = ------
 4342.  1                           !         xabd
 4343.  1                           !
 4344.  1                           rst(i,iveg) = 1.0_r8 / xabd
 4345.  1                        ELSE
 4346.  1                           !
 4347.  1                           !         (rstpar2(visivel) + rstpar2(infravermelho)* rstpar2(infravermelho termal))
 4348.  1                           ! gamma =---------------------------------------------------------------------------
 4349.  1                           !                          rstpar2(infravermelho termal)
 4350.  1                           !
 4351.  1                           gamma(i)  = (rstpar2(i,iveg,1) + rstpar2(i,iveg,2) &
 4352.  1                                * rstpar2(i,iveg,3))/ rstpar2(i,iveg,3)
 4353.  1                           !
 4354.  1                           !     single extinction coefficient using weighted
 4355.  1                           !     values of direct and diffus contributions to p.a.r.
 4356.  1                           !
 4357.  1                           !
 4358.  1                           !        zlt            leaf area index
 4359.  1                           ! at = -------- = ------------------------------
 4360.  1                           !       vcover     fraction of vegetation cover
 4361.  1                           !
 4362.  1                           !
 4363.  1                           at(i)     = zlt2(i,iveg)/vcover(i,iveg)
 4364.  1                           !
 4365.  1                           !           zlt          150
 4366.  1                           !power1 = -------- * --------------
 4367.  1                           !          vcover     zlt2 * vcover
 4368.  1                           !
 4369.  1                           power1(i) = at(i)*extk(i,iveg,1,1)!Estado da vegetacao irad=1 verde
 4370.  1                           power2(i) = at(i)*extk(i,iveg,1,2)!Estado da vegetacao irad=2 seco
 4371.  1                           !
 4372.  1                           ! chil2   Leaf orientation parameter
 4373.  1                           !  icg    Parameters of vagetation (icg=1 top e icg=2 bottom)
 4374.  1                           !
 4375.  1                           ! aa(i)   = 0.5 - (0.633 + 0.33 * chil2(i,icg)) * chil2(i,icg)
 4376.  1                           !
 4377.  1                           aa(i)     = 0.5_r8 -(0.633_r8 + 0.33_r8 * chil2(i,iveg)) * chil2(i,iveg)
 4378.  1                           !
 4379.  1                           bb(i)     = 0.877_r8 -1.754_r8 *aa(i)
 4380.  1                           !
 4381.  1                           !
 4382.  1                           !        LOG(( EXP(-power1(i)) + 1 ) * 0.5 ) * pd(i,iveg)
 4383.  1                           !zat = ------------------------------------------------------
 4384.  1                           !                       extk(i,iveg,1,1)
 4385.  1                           !
 4386.  1                           !
 4387.  1                           zat(i)    = LOG(( EXP(-power1(i))+1.0_r8 )*0.5_r8 ) * pd(i,iveg) / extk(i,iveg,1,1)
 4388.  1                           !
 4389.  1                           zat(i)    = zat(i) + LOG((EXP(-power2(i)) + 1.0_r8 )*0.5_r8 )*( 1.0_r8 -pd(i,iveg))/extk(i,iveg,1,2)
 4390.  1                           !
 4391.  1                           zk(i)     = 1.0_r8 /zat(i) * LOG(pd(i,iveg) *EXP( power1(i)*zat(i)/at(i) ) &
 4392.  1                                + (1.0_r8 -pd(i,iveg))*EXP( power2(i)*zat(i)/at(i) ))
 4393.  1                           !
 4394.  1                           !     canopy and ground cover bulk resistances using
 4395.  1                           !     ross-goudriaan leaf function , total par flux (avflux) and
 4396.  1                           !     mean extinction coefficient (zk)
 4397.  1                           !
 4398.  1                           ftemp       = MIN( zk(i)*at(i),20.0_r8 )
 4399.  1                           ekat (i)    = EXP( ftemp )
 4400.  1                           !
 4401.  1                           !                                    --          --
 4402.  1                           !                                   |  aa(i)       |
 4403.  1                           !avflux = par(i,iveg) * (pd(i,iveg)*|------ + bb(i)| + (1 - pd(i,iveg))*(bb(i) * fcon + aa(i)*1.5))
 4404.  1                           !                                   |  f(i)        |
 4405.  1                           !                                    --          --
 4406.  1                           !
 4407.  1                           avflux(i)   = par(i,iveg)*( pd(i,iveg)*( aa(i)/f(i)+bb(i)) &
 4408.  1                                + ( 1.0_r8 -pd(i,iveg))*( bb(i)*fcon+aa(i)*1.5_r8 ))
 4409.  1                           !
 4410.  1                           !                 gamma(i)
 4411.  1                           !rho4(i)     = ----------------
 4412.  1                           !                 avflux(i)
 4413.  1                           !
 4414.  1                           rho4(i)     = gamma(i)/avflux(i)
 4415.  1                           !
 4416.  1                           !                         rstpar2(i,iveg,2)
 4417.  1                           !rst(i,iveg) = ----------------------------------------------
 4418.  1                           !                            --                        --
 4419.  1                           !                           |  (rho4(i) * ekat(i) + 1.0) |
 4420.  1                           !               gamma(i)*LOG|----------------------------|
 4421.  1                           !                           |   (rho4(i) + 1.0 )         |
 4422.  1                           !                            --                        --
 4423.  1                           !
 4424.  1                           rst(i,iveg) = rstpar2(i,iveg,2) / gamma(i)*LOG((rho4(i)*ekat(i)+1.0_r8 )/(rho4(i)+1.0_r8 ))
 4425.  1                           !
 4426.  1                           !
 4427.  1                           !
 4428.  1                           !
 4429.  1                           !
 4430.  1                           rst(i,iveg)=rst(i,iveg) - LOG((rho4(i)+1.0_r8 /ekat(i))/(rho4(i)+1.0_r8 ))
 4431.  1                           !
 4432.  1                           !             rst(i,iveg)
 4433.  1                           ! rst =----------------------------
 4434.  1                           !         zk(i) * rstpar2(i,iveg,3)
 4435.  1                           !
 4436.  1                           !
 4437.  1                           rst(i,iveg)=rst(i,iveg)/(zk(i)*rstpar2(i,iveg,3))
 4438.  1                           !
 4439.  1                           !                      1
 4440.  1                           ! rst = --------------------------------
 4441.  1                           !          rst(i,iveg) * green2(i,iveg)
 4442.  1                           !
 4443.  1                           rst(i,iveg)=1.0_r8 /( rst(i,iveg)*green2(i,iveg))
 4444.  1                        END IF
 4445.  1                     END IF
 4446.  1------------>     END DO
 4447.                     !
 4448.  A------------<     DO i = 1, nmax
 4449.  A                     rst(i,2) = 1.0e5_r8
 4450.  A------------>     END DO
 4451.                     !
 4452.                   END SUBROUTINE stomat
 4453.                 
 4454.                 
 4455.                 
 4456.                   ! raduse :performs the absorption of radiation by surface.
 4457.                 
 4458.                 
 4459.                 
 4460.                   SUBROUTINE raduse(radt  ,par   ,pd    ,radfac,closs ,gloss ,thermk,p1f   , &
 4461.                        p2f   ,radn  ,vcover,nmax  ,ncols )
 4462.                     !
 4463.                     !-----------------------------------------------------------------------
 4464.                     ! input parameters
 4465.                     !-----------------------------------------------------------------------
 4466.                     !   tf...............freezing temperature
 4467.                     !   tg...............ground   temperature
 4468.                     !   polar............
 4469.                     !   radsav...........passesd from subr.radalb
 4470.                     !   radfac(cg,vn,bd).fractions of downward solar radiation at surface
 4471.                     !                    passed from subr.radalb
 4472.                     !   radn(vnt,bd).....downward sw/lw radiation at the surface
 4473.                     !   vcover(cg).......vegetation cover
 4474.                     !-----------------------------------------------------------------------
 4475.                     ! output parameters
 4476.                     !-----------------------------------------------------------------------
 4477.                     !   radt(cg).........net heat received by canopy/ground vegetation
 4478.                     !                    by radiation & conduction
 4479.                     !   par(cg)..........par incident on canopy
 4480.                     !   pd(cg)...........ratio of par beam to total par
 4481.                     !-----------------------------------------------------------------------
 4482.                     !
 4483.                     INTEGER, INTENT(in   ) :: ncols
 4484.                     INTEGER, INTENT(in   ) :: nmax
 4485.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 4486.                     !
 4487.                     !     the size of working area is ncols*187
 4488.                     !     atmospheric parameters as boudary values for sib
 4489.                     !
 4490.                     REAL(KIND=r8),    INTENT(in   ) :: radn  (ncols,3,2)
 4491.                     !
 4492.                     !     variables calculated from above and ambient conditions
 4493.                     !
 4494.                     REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
 4495.                     REAL(KIND=r8),    INTENT(inout  ) :: par   (ncols,icg)
 4496.                     REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
 4497.                     REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 4498.                     REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 4499.                     REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 4500.                     REAL(KIND=r8),    INTENT(in   ) :: thermk(ncols)
 4501.                     REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 4502.                     REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 4503.                 
 4504.                 
 4505.                     REAL(KIND=r8) :: p1 (ncols)
 4506.                     REAL(KIND=r8) :: p2 (ncols)
 4507.                 
 4508.                 
 4509.                     INTEGER :: i
 4510.                     INTEGER :: iveg
 4511.                     INTEGER :: iwave
 4512.                     INTEGER :: irad
 4513.  Vr4----------<     DO i = 1, nmax
 4514.  Vr4                   radt(i,1)=0.0_r8
 4515.  Vr4                   radt(i,2)=0.0_r8
 4516.  Vr4---------->     END DO
 4517.                     !
 4518.                     ! radn(1,1)=!Downward Surface shortwave fluxe visible beam (cloudy)
 4519.                     ! radn(1,2)=!Downward Surface shortwave fluxe visible diffuse (cloudy)
 4520.                     ! radn(2,1)=!Downward Surface shortwave fluxe Near-IR beam (cloudy)
 4521.                     ! radn(2,2)=!Downward Surface shortwave fluxe Near-IR diffuse (cloudy)
 4522.                     ! radfac(cg,vn,bd).fractions of downward solar radiation at surface
 4523.                     !                    passed from subr.radalb
 4524.                     !
 4525.                     !     summation of radiation fractions for canopy and ground
 4526.                     !
 4527.  1------------<     DO iveg = 1, 2
 4528.  1 2----------<        DO iwave = 1, 2
 4529.  1 2 b--------<           DO irad = 1, 2
 4530.  1 2 b Vbr4---<              DO i = 1, nmax
 4531.  1 2 b Vbr4                     radt(i,iveg)=radt(i,iveg)+radfac(i,iveg,iwave,irad)*radn(i,iwave,irad)
 4532.  1 2 b Vbr4--->              END DO
 4533.  1 2 b-------->           END DO
 4534.  1 2---------->        END DO
 4535.  1------------>     END DO
 4536.                     !
 4537.                     !     total long wave ( and polar ice conduction ) adjustments to
 4538.                     !     canopy and ground net radiation terms
 4539.                     !     thermk = canopy emissivity
 4540.  Vr2----------<     DO i = 1, nmax
 4541.  Vr2                   radt(i,1) = radt(i,1) + radn(i,3,2) * vcover(i,1)*(1.0_r8 -thermk(i)) - closs(i)
 4542.  Vr2                   radt(i,2) = radt(i,2) + radn(i,3,2) * (1.0_r8 - vcover(i,1)*(1.0_r8 -thermk(i))) - gloss(i)
 4543.  Vr2                   par(i,1)  = radn(i,1,1) + radn(i,1,2) + 0.001_r8! total par incident on canopy
 4544.  Vr2                   pd (i,1)  = (radn(i,1,1) + 0.001_r8 ) / par(i,1)! ratio of par beam on topo of the canopy to total par
 4545.  Vr2                   p1(i)     = p1f(i)*radn(i,1,1) + 0.001_r8 ! net par beam on topo of the canopy
 4546.  Vr2                   p2(i)     = p2f(i)*radn(i,1,2)            ! net par beam on base of the canopy
 4547.  Vr2                   par(i,2)  = p1(i)+p2(i)! net par incident on canopy and ground
 4548.  Vr2                   IF (par(i,1) <= 0.000001_r8) par(i,1) = 0.000001_r8
 4549.  Vr2                   IF (par(i,2) <= 0.000001_r8) par(i,2) = 0.000001_r8
 4550.  Vr2                   pd (i,2)  = p1(i)/par(i,2) !ratio of net par beam to net par incident on canopy and ground
 4551.  Vr2---------->     END DO
 4552.                   END SUBROUTINE raduse
 4553.                 
 4554.                 
 4555.                 
 4556.                   ! root   :performs soil moisture potentials in root zone of each
 4557.                   !         vegetation layer and summed soil+root resistance.
 4558.                 
 4559.                 
 4560.                 
 4561.                   SUBROUTINE root(phroot,phsoil,w     ,itype ,nmax  , ncols )
 4562.                     !
 4563.                     ! input parameters
 4564.                     !-----------------------------------------------------------------------
 4565.                     !   w(1).............wetness of surface store
 4566.                     !   w(2).............wetness of root zone
 4567.                     !   w(3).............wetness of recharge zone
 4568.                     !   phsat............soil moisture potential at saturation   (m)
 4569.                     !   bee..............empirical constant
 4570.                     !   zdepth(3)........depth of the i-th soil layer            (m)
 4571.                     !   rootd (cg).......rooting depth                           (m)
 4572.                     !   satco............mean soil hydraulic conductivity in the root zone
 4573.                     !                                                            (m/s)
 4574.                     !   rootl(cg)........root density                            (m/m**3)
 4575.                     !   rootca(cg).......root cross section                      (m**2)
 4576.                     !   rdres(cg)........resistance per unit root length         (s/m)
 4577.                     !   rplant(cg).......area averaged resistance imposed by the plant
 4578.                     !                    vascular system                         (s)
 4579.                     !-----------------------------------------------------------------------
 4580.                     ! output parameters
 4581.                     !-----------------------------------------------------------------------
 4582.                     !   vroot............root volume density                     (m**3/m**3)
 4583.                     !-----------------------------------------------------------------------
 4584.                     ! output parameters
 4585.                     !-----------------------------------------------------------------------
 4586.                     !   phsoil(3)........soil moisture potential of the i-th soil layer
 4587.                     !                                                            (m)
 4588.                     !   rootr(cg)........root resistance                         (s)
 4589.                     !-----------------------------------------------------------------------
 4590.                     !
 4591.                     !   imax.............Numero de ponto por faixa de latitude
 4592.                     !   ityp.............numero das classes de solo 13
 4593.                     !   icg..............Parametros da vegetacao (icg=1 topo e icg=2 base)
 4594.                     !   idp..............Camadas de solo (1 a 3)
 4595.                     !   nmax.............
 4596.                     !   itype............Classe de textura do solo
 4597.                     !   phroot...........Soil moisture potentials in root zone of each
 4598.                     !                    vegetation layer and summed soil+root resistance.
 4599.                     !
 4600.                     INTEGER, INTENT(in   ) :: ncols
 4601.                     INTEGER, INTENT(in   ) :: nmax
 4602.                 
 4603.                     INTEGER, INTENT(in   ) :: itype (ncols)
 4604.                     !
 4605.                     !     prognostic variables
 4606.                     !
 4607.                     REAL(KIND=r8),    INTENT(in   ) :: w    (ncols,3)
 4608.                     !
 4609.                     !     variables calculated from above and ambient conditions
 4610.                     !
 4611.                     REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
 4612.                     REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
 4613.                 
 4614.                 
 4615.                     REAL(KIND=r8)     :: www   (ncols,3)
 4616.                     INTEGER  :: i
 4617.                     INTEGER  :: n
 4618.                 
 4619.  1------------<     DO i = 1, 3
 4620.  1 2----------<        DO n = 1, nmax
 4621.  1 2                      !      0
 4622.  1 2                      !w = -----
 4623.  1 2                      !      0s
 4624.  1 2                      !
 4625.  1 2                      www   (n,i) = MAX(0.10_r8 ,w(n,i))
 4626.  1 2                      !                            --          --
 4627.  1 2                      !                           |         0    |
 4628.  1 2                      ! phsoil(n,i) = phsat * EXP |-b*LOG(-----) |
 4629.  1 2                      !                           |         0s   |
 4630.  1 2                      !                            --          --
 4631.  1 2                      phsoil(n,i) = phsat(itype(n)) * EXP(-bee( itype(n))*LOG(www(n,i)))
 4632.  1 2                      !
 4633.  1 2---------->        END DO
 4634.  1------------>     END DO
 4635.                     !
 4636.                     !   Soil moisture potentials in root zone of each
 4637.                     !   vegetation layer and summed soil+root resistance.
 4638.                     !
 4639.                     !DO n = 1, nmax
 4640.                     !   phroot(n,1)   = phsoil(n,1) - 0.01_r8
 4641.                     !   DO i = 2, 3
 4642.                     !      phroot(n,1) = MAX( phroot(n,1), phsoil(n,i))
 4643.                     !   END DO
 4644.                     !   phroot(n,2)   = phroot(n,1)
 4645.                     !END DO
 4646.                  
 4647.  Vr4----------<     DO n = 1, nmax
 4648.  Vr4                   phroot(n,1)   = phsoil(n,1) - 0.01_r8
 4649.  Vr4---------->     END DO
 4650.  b------------<     DO i = 2, 3
 4651.  b Vbr4-------<        DO n = 1, nmax
 4652.  b Vbr4                   phroot(n,1) = MAX( phroot(n,1), phsoil(n,i))
 4653.  b Vbr4------->        END DO
 4654.  b------------>     END DO
 4655.  Vr4----------<     DO n = 1, nmax
 4656.  Vr4                   phroot(n,2)   = phroot(n,1)
 4657.  Vr4---------->     END DO
 4658.                 
 4659.                 
 4660.                   END SUBROUTINE root
 4661.                 
 4662.                 
 4663.                 
 4664.                   ! pbl    :performs planetary boundary layer parameterization.
 4665.                 
 4666.                 
 4667.                 
 4668.                   SUBROUTINE pbl(jstneu, hgdtg , hgdtc , hgdtm , hcdtg , hcdtc , hcdtm , &
 4669.                        egdtg , egdtc , egdqm , ecdtg , ecdtc , ecdqm , deadtg, &
 4670.                        deadtc, deadqm,icheck , ect   , eci   , egt   , egi   , &
 4671.                        egs   , ec    , eg    , hc    , hg    , ecidif, egidif, &
 4672.                        ecmass, egmass, etmass, hflux , chf   , shf   , roff  , &
 4673.                        bps   , psb   , dzm   , em    , gmt   , gmq   ,  cu   , &
 4674.                        cuni  , ctni  , ustar , cosz  , rhoair, psy   , rcp   , &
 4675.                        wc    , wg    , fc    , fg    , hr    , vcover, z0x   , &
 4676.                        d     , rdc   , rbc   , z0    , qm    , tm    , um    , &
 4677.                        vm    , psur  , ppc   , ppl   , radn  , ra    , rb    , &
 4678.                        rd    , rc    , rg    , tcta  , tgta  , ta    , ea    , &
 4679.                        etc   , etg   , btc   , btg   , u2    , radt  , par   , &
 4680.                        pd    , rst   , rsoil , phroot,  hrr  , phsoil, cc    , &
 4681.                        cg    , satcap, snow  , dtc   , dtg   , dtm   , dqm   , &
 4682.                        stm   , extk  , radfac, closs , gloss , thermk, p1f   , &
 4683.                        p2f   , tc    , tg    , td    , capac , w     , itype , &
 4684.                        dtc3x , mon   , nmax  , ncols ,zlt2  ,green2,chil2,rstpar2,&
 4685.                        topt2,tll2  ,tu2   , defac2,ph12  ,ph22)
 4686.                     !
 4687.                     ! jstneu......The first call to vntlat just gets the neutral values of ustar
 4688.                     !              and ventmf para jstneu=.TRUE..
 4689.                     ! hgdtg.......n.b. fluxes expressed in joules m-2
 4690.                     ! hgdtc.......n.b. fluxes expressed in joules m-2
 4691.                     ! hgdtm.......n.b. fluxes expressed in joules m-2
 4692.                     ! hcdtg.......n.b. fluxes expressed in joules m-2
 4693.                     ! hcdtc.......n.b. fluxes expressed in joules m-2
 4694.                     ! hcdtm.......n.b. fluxes expressed in joules m-2
 4695.                     ! egdtg.......partial derivative calculation for latent heat
 4696.                     ! egdtc.......partial derivative calculation for latent heat
 4697.                     ! egdqm.......partial derivative calculation for latent heat
 4698.                     ! ecdtg.......partial derivative calculation for latent heat
 4699.                     ! ecdtc.......partial derivative calculation for latent heat
 4700.                     ! ecdqm.......partial derivative calculation for latent heat
 4701.                     ! deadtg
 4702.                     ! deadtc
 4703.                     ! deadqm
 4704.                     ! icheck......this version assumes dew-free conditions "icheck=1" to
 4705.                     !              estimate ea for buoyancy term in vntmf or ra.
 4706.                     ! ect.........Transpiracao no topo da copa (J/m*m)
 4707.                     ! eci.........Evaporacao da agua interceptada no topo da copa (J/m*m)
 4708.                     ! egt.........Transpiracao na base da copa (J/m*m)
 4709.                     ! egi.........Evaporacao da neve (J/m*m)
 4710.                     ! egs.........Evaporacao do solo arido (J/m*m)
 4711.                     ! ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 4712.                     !              topo da copa   ec   (i)=eci(i)+ect(i)
 4713.                     ! eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 4714.                     !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 4715.                     ! hc..........total sensible heat lost of top from the veggies.
 4716.                     ! hg..........total sensible heat lost of base from the veggies.
 4717.                     ! ecidif......check if interception loss term has exceeded canopy storage
 4718.                     !              ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 4719.                     ! egidif......check if interception loss term has exceeded canopy storage
 4720.                     !              ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 4721.                     ! ecmass......Mass of water lost of top from the veggies.
 4722.                     ! egmass......Mass of water lost of base from the veggies.
 4723.                     ! etmass......total mass of water lost from the veggies.
 4724.                     ! hflux.......total sensible heat lost from the veggies.
 4725.                     ! chf.........heat fluxes into the canopy  in w/m**2
 4726.                     ! shf.........heat fluxes into the ground, in w/m**2
 4727.                     ! roff........runoff
 4728.                     ! pie.........Constante Pi=3.1415926e0
 4729.                     ! stefan......Constante de Stefan Boltzmann
 4730.                     ! cpair.......specific heat of air (j/kg/k)
 4731.                     ! hlat........heat of evaporation of water   (j/kg)
 4732.                     ! grav........gravity constant      (m/s**2)
 4733.                     ! snomel......heat of melting (j m-1)
 4734.                     ! tf..........Temperatura de congelamento (K)
 4735.                     ! clai........heat capacity of foliage
 4736.                     ! cw..........liquid water heat capacity               (j/m**3)
 4737.                     ! gasr........Constant of dry air      (j/kg/k)
 4738.                     ! epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
 4739.                     !              de agua e do ar seco
 4740.                     ! athird......Constante athird=1.0e0 /3.0e0
 4741.                     ! bps
 4742.                     ! psb
 4743.                     ! dzm.........Altura media de referencia  para o vento para o calculo
 4744.                     !               da estabilidade do escoamento
 4745.                     ! em..........Pressao de vapor da agua
 4746.                     ! gmt(i,k,3)..virtual temperature tendency due to vertical diffusion
 4747.                     ! gmq.........specific humidity of reference (fourier)
 4748.                     ! cu..........Friction  transfer coefficients.
 4749.                     ! cuni........neutral friction transfer  coefficients.
 4750.                     ! ctni........neutral heat transfer coefficients.
 4751.                     ! ustar.......surface friction velocity  (m/s)
 4752.                     ! cosz........cosine of zenith angle
 4753.                     ! rhoair......Desnsidade do ar
 4754.                     ! psy ........(cp/(hl*epsfac))*psur(i)
 4755.                     ! rcp.........densidade do ar vezes o calor especifico do ar
 4756.                     ! wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 4757.                     !              indice de area foliar no topo da copa
 4758.                     ! wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 4759.                     !              indice de area foliar na base da copa
 4760.                     ! fc..........Condicao de oravalho 0 ou 1 na topo da copa
 4761.                     ! fg..........Condicao de oravalho 0 ou 1 na base da copa
 4762.                     ! hr..........rel. humidity in top layer
 4763.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 4764.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 4765.                     ! z0x.........roughness length
 4766.                     ! d...........Displacement height
 4767.                     ! rdc.........Constant related to aerodynamic resistance
 4768.                     !              between ground and canopy air space
 4769.                     ! rbc.........Constant related to bulk boundary layer resistance
 4770.                     ! z0..........Roughness length
 4771.                     ! qm..........reference specific humidity (fourier)
 4772.                     ! tm .........reference temperature    (fourier)                (k)
 4773.                     ! um..........Razao entre zonal pseudo-wind (fourier) e seno da
 4774.                     !              colatitude
 4775.                     ! vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 4776.                     !              colatitude
 4777.                     ! psur........surface pressure in mb
 4778.                     ! ppc.........precipitation rate ( cumulus )           (mm/s)
 4779.                     ! ppl.........precipitation rate ( large scale )       (mm/s)
 4780.                     ! radn........downward sw/lw radiation at the surface
 4781.                     ! ra..........Resistencia Aerodinamica (s/m)
 4782.                     ! rb..........bulk boundary layer resistance             (s/m)
 4783.                     ! rd..........aerodynamic resistance between ground      (s/m)
 4784.                     !              and canopy air space
 4785.                     ! rc..........Resistencia do topo da copa
 4786.                     ! rg......... Resistencia da base da copa
 4787.                     ! tcta........Diferenca entre tc-ta                      (k)
 4788.                     ! tgta........Diferenca entre tg-ta                      (k)
 4789.                     ! ta..........Temperatura no nivel de fonte de calor do dossel (K)
 4790.                     ! ea..........Pressure of vapor
 4791.                     ! etc.........Pressure of vapor at top of the copa
 4792.                     ! etg.........Pressao de vapor no base da copa
 4793.                     ! btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 4794.                     ! btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 4795.                     ! u2..........wind speed at top of canopy                (m/s)
 4796.                     ! radt........net heat received by canopy/ground vegetation
 4797.                     ! par.........par incident on canopy
 4798.                     ! pd..........ratio of par beam to total par
 4799.                     ! rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 4800.                     ! rsoil ......Resistencia do solo (s/m)
 4801.                     ! phroot......Soil moisture potentials in root zone of each
 4802.                     !                    vegetation layer and summed soil+root resistance.
 4803.                     ! hrr.........rel. humidity in top layer
 4804.                     ! phsoil......soil moisture potential of the i-th soil layer
 4805.                     ! cc..........heat capacity of the canopy
 4806.                     ! cg..........heat capacity of the ground
 4807.                     ! satcap......saturation liquid water capacity         (m)
 4808.                     ! snow........snow amount
 4809.                     ! dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 4810.                     ! dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 4811.                     ! dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 4812.                     ! dqm ........dqm(i)=pblsib(i,4,5)*dtc3x
 4813.                     ! stm ........Variavel utilizada mo cal. da Resisttencia
 4814.                     ! extk........extinction coefficient
 4815.                     ! radfac......fractions of downward solar radiation at surface
 4816.                     !             passed from subr.radalb
 4817.                     ! closs.......radiation loss from canopy
 4818.                     ! gloss.......radiation loss from ground
 4819.                     ! thermk......canopy emissivity
 4820.                     ! p1f
 4821.                     ! p2f
 4822.                     ! tc..........Temperatura da copa "dossel"(K)
 4823.                     ! tg..........Temperatura da superficie do solo (K)
 4824.                     ! td..........Temperatura do solo profundo (K)
 4825.                     ! capac(iv)...Agua interceptada iv=1 no dossel "water store capacity
 4826.                     !             of leaves"(m)
 4827.                     ! capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 4828.                     ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 4829.                     ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 4830.                     ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 4831.                     ! itype ......Classe de textura do solo
 4832.                     ! rstpar(cg,3).coefficints related to par influence on
 4833.                     !                    stomatal resistance
 4834.                     ! chil........leaf orientation pameter
 4835.                     ! topt........Temperatura ideal de funcionamento estomatico
 4836.                     ! tll.........Temperatura minima de funcionamento estomatico
 4837.                     ! tu..........Temperatura maxima de funcionamento estomatico
 4838.                     ! defac.......Parametro de deficit de pressao de vapor d'agua
 4839.                     ! ph1.........Coeficiente para o efeito da agua no solo
 4840.                     ! ph2.........Potencial de agua no solo para ponto de Wilting
 4841.                     ! rootd.......Profundidade das raizes
 4842.                     ! bee.........Expoente da curva de retencao "expoente para o solo umido"
 4843.                     ! phsat.......Tensao do solo saturado " Potencial de agua no solo saturado"
 4844.                     ! satco.......mean soil hydraulic conductivity in the root zone
 4845.                     ! poros.......porosity
 4846.                     ! zdepth......Profundidade para as tres camadas de solo
 4847.                     ! green.......fraction of grenn leaves
 4848.                     ! xcover(iv)..Fracao de cobertura de vegetacao iv=2 Bottom
 4849.                     ! zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 4850.                     ! zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 4851.                     ! x0x.........Comprimento de rugosidade
 4852.                     ! xd..........Deslocamento do plano zero
 4853.                     ! z2..........Altura do topo do dossel
 4854.                     ! xdc.........Constant related to aerodynamic resistance
 4855.                     !             between ground and canopy air space
 4856.                     ! xbc.........Constant related to bulk boundary layer resistance
 4857.                     ! dtc3x.......time increment dt
 4858.                     ! mon.........Number of month at year (1-12)
 4859.                     ! nmax
 4860.                     ! ityp........numero das classes de solo 13
 4861.                     ! imon........Numero maximo de meses no ano (12)
 4862.                     ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 4863.                     ! iwv.........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4864.                     !             proximo, iwv=3 infravermelho termal
 4865.                     ! idp.........Camadas de solo (1 a 3)
 4866.                     ! ibd.........Estado da vegetacao ibd=1 verde / ibd=2 seco
 4867.                     ! ncols.......Numero de ponto por faixa de latitude
 4868.                     !
 4869.                     !
 4870.                     INTEGER, INTENT(in   ) :: ncols
 4871.                 
 4872.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 4873.                     INTEGER, INTENT(in   ) :: mon(ncols)
 4874.                     INTEGER, INTENT(in   ) :: nmax
 4875.                 
 4876.                     INTEGER, INTENT(in   ) :: itype(ncols)
 4877.                     !
 4878.                     !     prognostic variables
 4879.                     !
 4880.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 4881.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 4882.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 4883.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 4884.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 4885.                     !
 4886.                     !     variables calculated from above and ambient conditions
 4887.                     !
 4888.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 4889.                     REAL(KIND=r8),    INTENT(inout) :: rb    (ncols)
 4890.                     REAL(KIND=r8),    INTENT(inout) :: rd    (ncols)
 4891.                     REAL(KIND=r8),    INTENT(inout) :: rc    (ncols)
 4892.                     REAL(KIND=r8),    INTENT(inout) :: rg    (ncols)
 4893.                     REAL(KIND=r8),    INTENT(inout) :: tcta  (ncols)
 4894.                     REAL(KIND=r8),    INTENT(inout) :: tgta  (ncols)
 4895.                     REAL(KIND=r8),    INTENT(inout) :: ta    (ncols)
 4896.                     REAL(KIND=r8),    INTENT(inout) :: ea    (ncols)
 4897.                     REAL(KIND=r8),    INTENT(inout) :: etc   (ncols)
 4898.                     REAL(KIND=r8),    INTENT(inout) :: etg   (ncols)
 4899.                     REAL(KIND=r8),    INTENT(inout) :: btc   (ncols)
 4900.                     REAL(KIND=r8),    INTENT(inout) :: btg   (ncols)
 4901.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 4902.                     REAL(KIND=r8),    INTENT(inout) :: radt  (ncols,icg)
 4903.                     REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
 4904.                     REAL(KIND=r8),    INTENT(inout) :: pd    (ncols,icg)
 4905.                     REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 4906.                     REAL(KIND=r8),    INTENT(inout) :: rsoil (ncols)
 4907.                     REAL(KIND=r8),    INTENT(inout) :: phroot(ncols,icg)
 4908.                     REAL(KIND=r8),    INTENT(inout) :: hrr   (ncols)
 4909.                     REAL(KIND=r8),    INTENT(inout) :: phsoil(ncols,idp)
 4910.                     REAL(KIND=r8),    INTENT(inout) :: cc    (ncols)
 4911.                     REAL(KIND=r8),    INTENT(inout) :: cg    (ncols)
 4912.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 4913.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 4914.                     REAL(KIND=r8),    INTENT(inout) :: dtc   (ncols)
 4915.                     REAL(KIND=r8),    INTENT(inout) :: dtg   (ncols)
 4916.                     REAL(KIND=r8),    INTENT(inout) :: dtm   (ncols)
 4917.                     REAL(KIND=r8),    INTENT(inout) :: dqm   (ncols)
 4918.                     REAL(KIND=r8),    INTENT(inout) :: stm   (ncols,icg)
 4919.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 4920.                     REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 4921.                     REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 4922.                     REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 4923.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 4924.                     REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 4925.                     REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 4926.                     !
 4927.                     !     the size of working area is ncols*187
 4928.                     !     atmospheric parameters as boudary values for sib
 4929.                     !
 4930.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 4931.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 4932.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 4933.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 4934.                     REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 4935.                     REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 4936.                     REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 4937.                     REAL(KIND=r8),    INTENT(in   ) :: radn(ncols,3,2)
 4938.                 
 4939.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 4940.                     REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 4941.                     REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 4942.                     REAL(KIND=r8)   , INTENT(in   ) :: rstpar2(ncols,icg,iwv)
 4943.                     REAL(KIND=r8),    INTENT(inout) :: vcover  (ncols,icg)
 4944.                     REAL(KIND=r8),    INTENT(inout) :: z0x(ncols)
 4945.                     REAL(KIND=r8),    INTENT(inout) :: d  (ncols)
 4946.                     REAL(KIND=r8),    INTENT(inout) :: rdc(ncols)
 4947.                     REAL(KIND=r8),    INTENT(inout) :: rbc(ncols)
 4948.                     REAL(KIND=r8),    INTENT(inout) :: z0 (ncols)
 4949.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 4950.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 4951.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 4952.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 4953.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 4954.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 4955.                     !
 4956.                     !     this is for coupling with closure turbulence model
 4957.                     !
 4958.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 4959.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 4960.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 4961.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 4962.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 4963.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 4964.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 4965.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 4966.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 4967.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 4968.                     REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 4969.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 4970.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 4971.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 4972.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 4973.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 4974.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 4975.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 4976.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 4977.                 
 4978.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 4979.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 4980.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 4981.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 4982.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 4983.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 4984.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 4985.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 4986.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 4987.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 4988.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 4989.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 4990.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 4991.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 4992.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 4993.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 4994.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 4995.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 4996.                 
 4997.                     INTEGER, INTENT(inout  ) :: icheck(ncols)
 4998.                     !
 4999.                     !     derivatives
 5000.                     !
 5001.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtg (ncols)
 5002.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtc (ncols)
 5003.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtm (ncols)
 5004.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtg (ncols)
 5005.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtc (ncols)
 5006.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtm (ncols)
 5007.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtg (ncols)
 5008.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtc (ncols)
 5009.                     REAL(KIND=r8),    INTENT(inout  ) :: egdqm (ncols)
 5010.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtg (ncols)
 5011.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtc (ncols)
 5012.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdqm (ncols)
 5013.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtg(ncols)
 5014.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtc(ncols)
 5015.                     REAL(KIND=r8),    INTENT(inout  ) :: deadqm(ncols)
 5016.                     LOGICAL, INTENT(inout  ) :: jstneu
 5017.                 
 5018.                     !
 5019.  Vbr4 I------->     CALL root(phroot,phsoil,w     ,itype ,nmax  ,ncols  )
 5020.                 
 5021.  Vbr4 I------->     CALL raduse(radt  ,par   ,pd    ,radfac,closs ,gloss ,thermk,p1f   , &
 5022.                          p2f   ,radn  ,vcover,nmax  ,ncols   )
 5023.                 
 5024.  VcAr4 I------>     CALL stomat(cosz  ,par   ,pd    ,rst   ,extk  ,vcover,itype , &
 5025.                          nmax  ,ncols ,zlt2  ,green2,chil2 ,rstpar2)
 5026.                 
 5027.                     CALL interc( &
 5028.                          roff  ,cc    ,cg    ,satcap,snow  ,extk  ,tc    ,tg    ,td    , &
 5029.                          capac ,w     ,tm    ,ppc   ,ppl   ,vcover,itype ,dtc3x , &
 5030.                          nmax  ,ncols ,zlt2 )
 5031.                     !
 5032.                     !     surface flux
 5033.                     !
 5034.                     CALL sflxes( &
 5035.                          hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm ,egdtg ,egdtc ,egdqm , &
 5036.                          ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm,icheck,bps   ,psb   , &
 5037.                          dzm   ,em    ,gmt   ,gmq   ,cu    ,cuni  ,ctni  ,ustar ,rhoair, &
 5038.                          psy   ,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    ,ect   ,eci   , &
 5039.                          egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    ,ecidif,egidif, &
 5040.                          ecmass,egmass,etmass,hflux ,chf   ,shf   ,ra    ,rb    ,rd    , &
 5041.                          rc    ,rg    ,tcta  ,tgta  ,ta    ,ea    ,etc   ,etg   ,btc   , &
 5042.                          btg   ,u2    ,radt  ,rst   ,rsoil ,hrr   ,phsoil,cc    ,cg    , &
 5043.                          satcap,dtc   ,dtg   ,dtm   ,dqm   ,stm   ,thermk,tc    ,tg    , &
 5044.                          td    ,capac ,w     ,qm    ,tm    ,um    ,vm    ,psur  ,vcover, &
 5045.                          z0x   ,d     ,rdc   ,rbc   ,z0    ,itype ,dtc3x ,mon   ,nmax  , &
 5046.                          jstneu,ncols ,zlt2  ,topt2 ,tll2  ,tu2   , defac2,ph12  ,ph22 )
 5047.                   END SUBROUTINE pbl
 5048.                 
 5049.                 
 5050.                 
 5051.                 
 5052.                 
 5053.                 
 5054.                   SUBROUTINE snowm(&
 5055.                        chf   ,shf   ,fluxef,roff  ,cc    ,cg    ,snow  ,dtc   ,dtg   , &
 5056.                        tc    ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols  )
 5057.                     !
 5058.                     ! snowm  :calculates snowmelt and modification of temperatures;
 5059.                     !         this version deals with refreezing of water;
 5060.                     !         version modified to use force-restore heat fluxes.
 5061.                     !
 5062.                     !-----------------------------------------------------------------------
 5063.                     ! chf.........Fluxo de calor na copa (J/m*m)
 5064.                     ! shf.........Fluxo de calor no solo (J/m*m)
 5065.                     ! fluxef......modified to use force-restore heat fluxes
 5066.                     !             fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi " Garrat pg. 227"
 5067.                     ! roff........runoff (escoamente superficial e drenagem)(m)
 5068.                     ! cc..........heat capacity of the canopy
 5069.                     ! cg..........heat capacity of the ground
 5070.                     ! snow........snow amount
 5071.                     ! dtc ........dtc(i)=pblsib(i,2,5)*dtc3x
 5072.                     ! dtg ........dtg(i)=pblsib(i,1,5)*dtc3x
 5073.                     ! tc..........Temperatura da copa "dossel"(K)
 5074.                     ! tg..........Temperatura da superficie do solo (K)
 5075.                     ! td..........Temperatura do solo profundo (K)
 5076.                     ! capac(iv)...Agua interceptada iv=1 no dossel (m)
 5077.                     ! capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 5078.                     ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 5079.                     ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5080.                     ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5081.                     ! poros.......Porosidade do solo (m"3/m"3)
 5082.                     ! zdepth(id)..Profundidade das camadas de solo id=1 superficial
 5083.                     ! zdepth(id)..Profundidade das camadas de solo id=2 camada de raizes
 5084.                     ! zdepth(id)..Profundidade das camadas de solo id=3 camada de drenagem
 5085.                     ! itype.......Classe de textura do solo
 5086.                     ! ncols.......Numero de ponto por faixa de latitude
 5087.                     ! ityp........13
 5088.                     ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 5089.                     ! idp.........Camadas de solo (1 a 3)
 5090.                     ! snomel......Calor latente de fusao(J/kg)
 5091.                     ! tf..........Temperatura de congelamento (K)
 5092.                     ! dtc3x.......time increment dt
 5093.                     ! nmax........
 5094.                     !-----------------------------------------------------------------------
 5095.                     INTEGER, INTENT(in   ) :: ncols
 5096.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 5097.                     INTEGER, INTENT(in   ) :: nmax
 5098.                 
 5099.                     INTEGER, INTENT(in   ) :: itype (ncols)
 5100.                     !
 5101.                     !     prognostic variables
 5102.                     !
 5103.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 5104.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 5105.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 5106.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 5107.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 5108.                     !
 5109.                     !     variables calculated from above and ambient conditions
 5110.                     !
 5111.                     REAL(KIND=r8),    INTENT(in   ) :: cc    (ncols)
 5112.                     REAL(KIND=r8),    INTENT(in   ) :: cg    (ncols)
 5113.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 5114.                     REAL(KIND=r8),    INTENT(in   ) :: dtc   (ncols)
 5115.                     REAL(KIND=r8),    INTENT(in   ) :: dtg   (ncols)
 5116.                     !
 5117.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 5118.                     !
 5119.                     REAL(KIND=r8),    INTENT(in   ) :: chf   (ncols)
 5120.                     REAL(KIND=r8),    INTENT(in   ) :: shf   (ncols)
 5121.                     REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
 5122.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 5123.                 
 5124.                     REAL(KIND=r8)    :: cct   (ncols)
 5125.                     REAL(KIND=r8)    :: ts         (ncols)
 5126.                     REAL(KIND=r8)    :: dts   (ncols)
 5127.                     REAL(KIND=r8)    :: flux  (ncols)
 5128.                     REAL(KIND=r8)    :: tta   (ncols)
 5129.                     REAL(KIND=r8)    :: ttb   (ncols)
 5130.                     REAL(KIND=r8)    :: dtf   (ncols)
 5131.                     REAL(KIND=r8)    :: work  (ncols)
 5132.                     REAL(KIND=r8)    :: hf         (ncols)
 5133.                     REAL(KIND=r8)    :: fcap  (ncols)
 5134.                     REAL(KIND=r8)    :: spwet (ncols)
 5135.                     REAL(KIND=r8)    :: dtf2  (ncols)
 5136.                     REAL(KIND=r8)    :: tn         (ncols)
 5137.                     REAL(KIND=r8)    :: change(ncols)
 5138.                     REAL(KIND=r8)    :: dtime1(ncols)
 5139.                     REAL(KIND=r8)    :: dtime2(ncols)
 5140.                 
 5141.                     INTEGER :: i
 5142.                     INTEGER :: iveg
 5143.                     INTEGER :: ntyp
 5144.                     REAL(KIND=r8)    :: dtc3xi
 5145.                 
 5146.                 
 5147.  A-----------<>     cct=0.0_r8
 5148.                     dtc3xi=1.0_r8 /dtc3x
 5149.                 
 5150.  1------------<     DO iveg = 1, 2
 5151.  1                     IF (iveg == 1) THEN
 5152.  1              
 5153.  1 A----------<           DO i = 1, nmax
 5154.  1 A                         cct (i)=cc (i)
 5155.  1 A                         ts  (i)=tc (i)
 5156.  1 A                         dts (i)=dtc(i)
 5157.  1 A                         flux(i)=chf(i)
 5158.  1 A---------->           END DO
 5159.  1              
 5160.  1                     ELSE
 5161.  1              
 5162.  1 Vr4--------<           DO i = 1, nmax
 5163.  1 Vr4                       cct (i)=cg (i)
 5164.  1 Vr4 A-----<>              ts  (i)=tg (i)
 5165.  1 Vr4                       dts (i)=dtg(i)
 5166.  1 Vr4                       flux(i)=cct(i)*dtg(i)*dtc3xi
 5167.  1 Vr4-------->           END DO
 5168.  1              
 5169.  1                     END IF
 5170.  1              
 5171.  1 Vr4--------<        DO i = 1, nmax
 5172.  1 Vr4                    tta(i) = ts(i) - dts(i)
 5173.  1 Vr4                    ttb(i) = ts(i)
 5174.  1 Vr4-------->        END DO
 5175.  1              
 5176.  1 2----------<        DO i = 1, nmax
 5177.  1 2                      IF (tta(i) <= tf) THEN
 5178.  1 2                         snow (i,iveg) = capac(i,iveg)
 5179.  1 2                         capac(i,iveg) = 0.0_r8
 5180.  1 2                      ELSE
 5181.  1 2                         snow (i,iveg) = 0.0_r8
 5182.  1 2                      END IF
 5183.  1 2---------->        END DO
 5184.  1              
 5185.  1 Vr4--------<        DO i = 1, nmax
 5186.  1 Vr4                    work(i)=(tta(i)-tf)*(ttb(i)-tf)
 5187.  1 Vr4-------->        END DO
 5188.  1              
 5189.  1 2----------<        DO i = 1, nmax
 5190.  1 2                      IF (work(i) < 0.0_r8) THEN
 5191.  1 2                         ntyp=itype(i)
 5192.  1 2                         dtf   (i)= tf - tta(i)
 5193.  1 2                         dtime1(i)= cct (i)* dtf(i)/ flux(i)
 5194.  1 2                         hf    (i)= flux(i)*(dtc3x-dtime1(i))
 5195.  1 2                         spwet (i)=  MIN ( 5.0_r8 , snow(i,iveg) )
 5196.  1 2                         IF (dts(i) <= 0.0_r8) THEN
 5197.  1 2                            fcap (i) =-capac(i,iveg)* snomel
 5198.  1 2                         ELSE
 5199.  1 2                            fcap (i) = spwet(i)     * snomel
 5200.  1 2                         END IF
 5201.  1 2                         dtime2(i)= fcap(i) / flux(i)
 5202.  1 2                         dtf2  (i)= flux(i) * (dtc3x-dtime1(i)-dtime2(i))/cct(i)
 5203.  1 2                         tn(i)    = tf + dtf2(i)
 5204.  1 2                         IF (ABS(hf(i)) < ABS(fcap(i))) THEN
 5205.  1 2                            ts(i)    = tf -0.1_r8
 5206.  1 2                         ELSE
 5207.  1 2                            ts(i)    = tn(i)
 5208.  1 2                         END IF
 5209.  1 2                         IF (ABS(hf(i)) < ABS(fcap(i))) THEN
 5210.  1 2                            change(i) = hf  (i)
 5211.  1 2                         ELSE
 5212.  1 2                            change(i) = fcap(i)
 5213.  1 2                         END IF
 5214.  1 2                         change(i)     =change(i)      / snomel
 5215.  1 2                         snow  (i,iveg)=snow  (i,iveg) - change(i)
 5216.  1 2                         capac (i,iveg)=capac (i,iveg) + change(i)
 5217.  1 2                         IF (snow(i,iveg) < 1.e-10_r8) snow(i,iveg)=0.0e0_r8
 5218.  1 2                         IF (iveg == 1)THEN
 5219.  1 2                            tc(i)=ts(i)
 5220.  1 2                         ELSE
 5221.  1 2                            tg(i)=ts(i)
 5222.  1 2                         END IF
 5223.  1 2                         IF (iveg == 2) THEN
 5224.  1 2                            IF (td(i) > tf) THEN
 5225.  1 2                               w (i,1)=w (i,1)+capac(i,iveg) &
 5226.  1 2                                    /(poros(ntyp)*zdepth(ntyp,1))
 5227.  1 2                            ELSE
 5228.  1 2                               roff(i)=roff(i)+capac(i,iveg)
 5229.  1 2                            END IF
 5230.  1 2                            capac(i,iveg) = 0.0_r8
 5231.  1 2                         END IF
 5232.  1 2                      END IF
 5233.  1 2---------->        END DO
 5234.  1 Vr4--------<        DO i = 1, nmax
 5235.  1 Vr4                    capac(i,iveg) =  capac(i,iveg) + snow(i,iveg)
 5236.  1 Vr4-------->        END DO
 5237.  1------------>     END DO
 5238.                 
 5239.                     !   modified to use force-restore heat fluxes
 5240.                 
 5241.  Vr4----------<     DO i = 1, nmax
 5242.  Vr4                   fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi
 5243.  Vr4---------->     END DO
 5244.                 
 5245.                   END SUBROUTINE snowm
 5246.                 
 5247.                 
 5248.                 
 5249.                 
 5250.                   ! fysiks :it is a physics driver; performs the following:
 5251.                   !         a) soil water budget prior to calling pbl
 5252.                   !         b) planetary boundary layer (pbl) parameterization
 5253.                   !         c) update sib variables
 5254.                   !         d) dumping of small capac values onto soil surface store
 5255.                   !         e) snowmelt/refreeze calculation
 5256.                   !         f) update deep soil temperature using effective soil heat flux
 5257.                   !         g) bare soil evaporation loss
 5258.                   !         h) extraction of transpiration loss from root zone
 5259.                   !         i) interflow, infiltration excess and loss to groundwater
 5260.                   !         j) increment prognostic variables and
 5261.                   !            adjust theta and sh to be consistent with dew formation
 5262.                   !         k) calculates soil water budget after calling pbl
 5263.                   !            and compares with previous budget.
 5264.                 
 5265.                   SUBROUTINE fysiks(vcover, z0x  , d    , rdc  , rbc  , z0   ,ndt   , &
 5266.                        latitu, bps  ,psb   ,dzm   ,em    ,gmt   ,gmq   , &
 5267.                        gmu   ,cu    , cuni ,ctni  ,ustar ,cosz  ,sinclt,rhoair, &
 5268.                        psy   ,rcp   , wc   ,wg    ,fc    ,fg    ,hr    , ect  , &
 5269.                        eci   , egt  , egi  , egs  , ec   , eg   , hc   , hg   , &
 5270.                        ecidif,egidif,ecmass,egmass,etmass,hflux , chf  , shf  , &
 5271.                        fluxef, roff , drag ,ra    , rb   , rd   , rc   , rg   , &
 5272.                        tcta  , tgta , ta   , ea   , etc  , etg  , btc  , btg  , &
 5273.                        u2    , radt , par  , pd   , rst  ,rsoil ,phroot, hrr  , &
 5274.                        phsoil, cc   , cg   ,satcap, snow , dtc  , dtg  , dtm  , &
 5275.                        dqm   , stm  , extk ,radfac, closs,gloss ,thermk, p1f  , &
 5276.                        p2f   , tc   , tg   , td   , capac, w    ,  qm  , tm   , &
 5277.                        um    , vm   , psur , ppc  , ppl  , radn ,itype ,dtc3x , &
 5278.                        mon   , nmax , ncols,zlt2  ,green2,chil2 ,rstpar2,topt2, &
 5279.                        tll2  ,tu2   , defac2,ph12  ,ph22 )
 5280.                     !
 5281.                     !
 5282.                     !-----------------------------------------------------------------------
 5283.                     !
 5284.                     !  roff.......Runoff (escoamente superficial e drenagem)(m)
 5285.                     !  slope......Inclinacao de perda hidraulica na camada profunda do solo
 5286.                     !  bee........Fator de retencao da umidade no solo (expoente da umidade do
 5287.                     !             solo)
 5288.                     !  satco......Condutividade hidraulica do solo saturado(m/s)
 5289.                     !  zdepth(id).Profundidade das camadas de solo id=1 superficial
 5290.                     !  zdepth(id).Profundidade das camadas de solo id=2 camada de raizes
 5291.                     !  zdepth(id).Profundidade das camadas de solo id=3 camada de drenagem
 5292.                     !  phsat......Potencial matricial do solo saturado(m) (tensao do solo em
 5293.                     !             saturacao)
 5294.                     !  poros......Porosidade do solo
 5295.                     !  dtc3x......time increment dt
 5296.                     !  snomel.....Calor latente de fusao(J/kg)
 5297.                     !  w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 5298.                     !  w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5299.                     !  w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5300.                     !  capac(iv)..Agua interceptada iv=1 no dossel (m)
 5301.                     !  capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 5302.                     !  tg.........Temperatura da superficie do solo  (K)
 5303.                     !  td.........Temperatura do solo profundo (K)
 5304.                     !  itype......Classe de textura do solo
 5305.                     !  tf.........Temperatura de congelamento (K)
 5306.                     !  idp........Parametro para as camadas de solo idp=1->3
 5307.                     !  nmax.......
 5308.                     !  ncols......Number of grid points on a gaussian latitude circle
 5309.                     !  ityp.......Numero das classes de solo 13
 5310.                     !  imon.......Numero maximo de meses no ano (12)
 5311.                     !  icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 5312.                     !  iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 5313.                     !             proximo, iwv=3 infravermelho termal
 5314.                     !  idp........Camadas de solo (1 a 3)
 5315.                     !  ibd........Estado da vegetacao ibd=1 verde / ibd=2 seco
 5316.                     !  pie........Constante Pi=3.1415926e0
 5317.                     !  stefan.....Constante de Stefan Boltzmann
 5318.                     !  cp.........specific heat of air (j/kg/k)
 5319.                     !  hl ........heat of evaporation of water   (j/kg)
 5320.                     !  grav.......gravity constant      (m/s**2)
 5321.                     !  snomel.....heat of melting (j m-1)
 5322.                     !  tf.........Temperatura de congelamento (K)
 5323.                     !  clai.......heat capacity of foliage
 5324.                     !  cw.........liquid water heat capacity               (j/m**3)
 5325.                     !  gasr.......Constant of dry air      (j/kg/k)
 5326.                     !  epsfac.....Constante 0.622 Razao entre as massas moleculares do vapor
 5327.                     !             de agua e do ar seco
 5328.                     !  athird.....Constante athird=1.0e0 /3.0e0
 5329.                     !  dtc3x......time increment dt
 5330.                     !  mon........Number of month at year (1-12)
 5331.                     !  nmax
 5332.                     !  rstpar.....Coefficints related to par influence on
 5333.                     !             stomatal resistance
 5334.                     !  chil.......Leaf orientation parameter
 5335.                     !  topt.......Temperatura ideal de funcionamento estomatico
 5336.                     !  tll........Temperatura minima de funcionamento estomatico
 5337.                     !  tu.........Temperatura maxima de funcionamento estomatico
 5338.                     !  defac......Parametro de deficit de pressao de vapor d'agua
 5339.                     !  ph1........Coeficiente para o efeito da agua no solo
 5340.                     !  ph2........Potencial de agua no solo para ponto de Wilting
 5341.                     !  rootd......Profundidade das raizes
 5342.                     !  bee........Expoente da curva de retencao "expoente para o solo umido"
 5343.                     !  phsat......Tensao do solo saturado " Potencial de agua no solo saturado"
 5344.                     !  satco......mean soil hydraulic conductivity in the root zone
 5345.                     !  poros......Porosity
 5346.                     !  zdepth.....Profundidade para as tres camadas de solo
 5347.                     !  green......Fraction of grenn leaves
 5348.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=1 Top
 5349.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=2 Bottom
 5350.                     !  zlt(icg)...Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 5351.                     !  zlt(icg)...Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 5352.                     !  x0x........Comprimento de rugosidade
 5353.                     !  xd.........Deslocamento do plano zero
 5354.                     !  z2.........Altura do topo do dossel
 5355.                     !  xdc........Constant related to aerodynamic resistance
 5356.                     !             between ground and canopy air space
 5357.                     !  xbc........Constant related to bulk boundary layer resistance
 5358.                     !  itype......Classe de textura do solo
 5359.                     !  qm.........Reference specific humidity (fourier)
 5360.                     !  tm.........Reference temperature    (fourier)                (k)
 5361.                     !  um.........Razao entre zonal pseudo-wind (fourier) e seno da
 5362.                     !             colatitude
 5363.                     !  vm.........Razao entre meridional pseudo-wind (fourier) e seno da
 5364.                     !             colatitude
 5365.                     !  psur.......Surface pressure in mb
 5366.                     !  ppc........Precipitation rate ( cumulus )           (mm/s)
 5367.                     !  ppl........Precipitation rate ( large scale )       (mm/s)
 5368.                     !  radn.......Downward sw/lw radiation at the surface
 5369.                     !  tc.........Temperatura da copa "dossel"(K)
 5370.                     !  tg.........Temperatura da superficie do solo (K)
 5371.                     !  td.........Temperatura do solo profundo (K)
 5372.                     !  capac(iv)..Agua interceptada iv=1 no dossel "water store capacity
 5373.                     !             of leaves"(m)
 5374.                     !  capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 5375.                     !  w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 5376.                     !  w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5377.                     !  w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5378.                     !  ra.........Resistencia Aerodinamica (s/m)
 5379.                     !  rb.........bulk boundary layer resistance
 5380.                     !  rd.........Aerodynamic resistance between ground      (s/m)
 5381.                     !             and canopy air space
 5382.                     !  rc.........Resistencia do topo da copa
 5383.                     !  rg.........Resistencia da base da copa
 5384.                     !  tcta.......Diferenca entre tc-ta                      (k)
 5385.                     !  tgta.......Diferenca entre tg-ta                      (k)
 5386.                     !  ta.........Temperatura no nivel de fonte de calor do dossel (K)
 5387.                     !  ea.........Pressure of vapor
 5388.                     !  etc........Pressure of vapor at top of the copa
 5389.                     !  etg........Pressao de vapor no base da copa
 5390.                     !  btc........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 5391.                     !  btg........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 5392.                     !  u2.........wind speed at top of canopy
 5393.                     !  radt.......net heat received by canopy/ground vegetation
 5394.                     !  par........par incident on canopy
 5395.                     !  pd.........ratio of par beam to total par
 5396.                     !  rst .......Resisttencia Estomatica "Stomatal resistence" (s/m)
 5397.                     !  rsoil......Resistencia do solo (s/m)
 5398.                     !  phroot.....Soil moisture potentials in root zone of each
 5399.                     !             vegetation layer and summed soil+root resistance.
 5400.                     !  hrr........rel. humidity in top layer
 5401.                     !  phsoil.....soil moisture potential of the i-th soil layer
 5402.                     !  cc.........heat capacity of the canopy
 5403.                     !  cg.........heat capacity of the ground
 5404.                     !  satcap.....saturation liquid water capacity         (m)
 5405.                     !  snow.......snow amount
 5406.                     !  dtc........dtc(i)=pblsib(i,2,5)*dtc3x
 5407.                     !  dtg........dtg(i)=pblsib(i,1,5)*dtc3x
 5408.                     !  dtm........dtm(i)=pblsib(i,3,5)*dtc3x
 5409.                     !  dqm .......dqm(i)=pblsib(i,4,5)*dtc3x
 5410.                     !  stm .......Variavel utilizada mo cal. da Resisttencia
 5411.                     !  extk.......extinction coefficient
 5412.                     !  radfac.....Fractions of downward solar radiation at surface
 5413.                     !             passed from subr.radalb
 5414.                     !  closs......Radiation loss from canopy
 5415.                     !  gloss......Radiation loss from ground
 5416.                     !  thermk.....Canopy emissivity
 5417.                     !  p1f
 5418.                     !  p2f
 5419.                     !  ect........Transpiracao no topo da copa (J/m*m)
 5420.                     !  eci........Evaporacao da agua interceptada no topo da copa (J/m*m)
 5421.                     !  egt........Transpiracao na base da copa (J/m*m)
 5422.                     !  egi........Evaporacao da neve (J/m*m)
 5423.                     !  egs........Evaporacao do solo arido (J/m*m)
 5424.                     !  ec.........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 5425.                     !             topo da copa   ec   (i)=eci(i)+ect(i)
 5426.                     !  eg.........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 5427.                     !             +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 5428.                     !  hc.........Total sensible heat lost of top from the veggies.
 5429.                     !  hg.........Total sensible heat lost of base from the veggies.
 5430.                     !  ecidif.....check if interception loss term has exceeded canopy storage
 5431.                     !             ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 5432.                     !  egidif.....check if interception loss term has exceeded canopy storage
 5433.                     !             ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 5434.                     !  ecmass.....Mass of water lost of top from the veggies.
 5435.                     !  egmass.....Mass of water lost of base from the veggies.
 5436.                     !  etmass.....Total mass of water lost from the veggies.
 5437.                     !  hflux......Total sensible heat lost from the veggies
 5438.                     !  chf........Heat fluxes into the canopy  in w/m**2
 5439.                     !  shf........Heat fluxes into the ground, in w/m**2
 5440.                     !  fluxef.....Modified to use force-restore heat fluxes
 5441.                     !             fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi " Garrat pg. 227"
 5442.                     !  roff.......runoff (escoamente superficial e drenagem)(m)
 5443.                     !  drag.......tensao superficial
 5444.                     !  bps
 5445.                     !  psb
 5446.                     !  dzm........Altura media de referencia  para o vento para o calculo
 5447.                     !             da estabilidade do escoamento
 5448.                     !  em.........Pressao de vapor da agua
 5449.                     !  gmt(i,k,3).temperature related matrix virtual temperature tendency
 5450.                     !             due to vertical diffusion
 5451.                     !  gmq........specific humidity related matrix specific humidity of
 5452.                     !             reference (fourier)
 5453.                     !  gmu........wind related matrix
 5454.                     !  cu.........Friction  transfer coefficients.
 5455.                     !  cuni.......Neutral friction transfer  coefficients.
 5456.                     !  ctni.......Neutral heat transfer coefficients.
 5457.                     !  ustar......Surface friction velocity  (m/s)
 5458.                     !  cosz.......Cosine of zenith angle
 5459.                     !  sinclt.....sinclt=SIN(colrad(latitu))"seno da colatitude"
 5460.                     !  rhoair.....Desnsidade do ar
 5461.                     !  psy........(cp/(hl*epsfac))*psur(i)
 5462.                     !  rcp........densidade do ar vezes o calor especifico do ar
 5463.                     !  wc.........Minimo entre 1 e a razao entre a agua interceptada pelo
 5464.                     !             indice de area foliar no topo da copa
 5465.                     !  wg.........Minimo entre 1 e a razao entre a agua interceptada pelo
 5466.                     !             indice de area foliar na base da copa
 5467.                     !  fc.........Condicao de oravalho 0 ou 1 na topo da copa
 5468.                     !  fg.........Condicao de oravalho 0 ou 1 na base da copa
 5469.                     !  hr.........rel. humidity in top layer
 5470.                     !  ndt
 5471.                     !  latitu
 5472.                     !  jstneu.....The first call to vntlat just gets the neutral values of ustar
 5473.                     !             and ventmf para jstneu=.TRUE..
 5474.                     !  hgdtg.......n.b. fluxes expressed in joules m-2
 5475.                     !  hgdtc.......n.b. fluxes expressed in joules m-2
 5476.                     !  hgdtm.......n.b. fluxes expressed in joules m-2
 5477.                     !  hcdtg.......n.b. fluxes expressed in joules m-2
 5478.                     !  hcdtc.......n.b. fluxes expressed in joules m-2
 5479.                     !  hcdtm.......n.b. fluxes expressed in joules m-2
 5480.                     !  egdtg.......partial derivative calculation for latent heat
 5481.                     !  egdtc.......partial derivative calculation for latent heat
 5482.                     !  egdqm.......partial derivative calculation for latent heat
 5483.                     !  ecdtg.......partial derivative calculation for latent heat
 5484.                     !  ecdtc.......partial derivative calculation for latent heat
 5485.                     !  ecdqm.......partial derivative calculation for latent heat
 5486.                     !  deadtg
 5487.                     !  deadtc
 5488.                     !  deadqm
 5489.                     !  icheck......this version assumes dew-free conditions "icheck=1" to
 5490.                     !              estimate ea for buoyancy term in vntmf or ra.
 5491.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 5492.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 5493.                     !  z0x.........roughness length
 5494.                     !  d...........Displacement height
 5495.                     !  rdc.........Constant related to aerodynamic resistance
 5496.                     !              between ground and canopy air space
 5497.                     !  rbc.........Constant related to bulk boundary layer resistance
 5498.                     !  z0..........Roughness length
 5499.                     !-----------------------------------------------------------------------
 5500.                     !
 5501.                     INTEGER, INTENT(in   ) :: ncols
 5502.                 
 5503.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 5504.                     INTEGER, INTENT(in   ) :: mon(ncols)
 5505.                     INTEGER, INTENT(in   ) :: nmax
 5506.                 
 5507.                     INTEGER, INTENT(in   ) :: itype (ncols)
 5508.                     !
 5509.                     !     the size of working area is ncols*187
 5510.                     !     atmospheric parameters as boudary values for sib
 5511.                     !
 5512.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 5513.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 5514.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 5515.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 5516.                     REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 5517.                     REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 5518.                     REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 5519.                     REAL(KIND=r8),    INTENT(in   ) :: radn(ncols,3,2)
 5520.                     !
 5521.                     !     prognostic variables
 5522.                     !
 5523.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 5524.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 5525.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 5526.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 5527.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 5528.                     !
 5529.                     !     variables calculated from above and ambient conditions
 5530.                     !
 5531.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 5532.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 5533.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 5534.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 5535.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 5536.                     REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
 5537.                     REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
 5538.                     REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
 5539.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 5540.                     REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
 5541.                     REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
 5542.                     REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
 5543.                     REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
 5544.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 5545.                     REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
 5546.                     REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
 5547.                     REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
 5548.                     REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
 5549.                     REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
 5550.                     REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
 5551.                     REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
 5552.                     REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
 5553.                     REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
 5554.                     REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
 5555.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 5556.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 5557.                     REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
 5558.                     REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
 5559.                     REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
 5560.                     REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
 5561.                     REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
 5562.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 5563.                     REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 5564.                     REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 5565.                     REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 5566.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 5567.                     REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 5568.                     REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 5569.                     !
 5570.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 5571.                     !
 5572.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 5573.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 5574.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 5575.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 5576.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 5577.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 5578.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 5579.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 5580.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 5581.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 5582.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 5583.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 5584.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 5585.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 5586.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 5587.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 5588.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 5589.                     REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
 5590.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 5591.                     REAL(KIND=r8),    INTENT(inout) :: drag  (ncols)
 5592.                     !
 5593.                     !     this is for coupling with closure turbulence model
 5594.                     !
 5595.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 5596.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 5597.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 5598.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 5599.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 5600.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 5601.                     REAL(KIND=r8),    INTENT(inout) :: gmu   (ncols,4)
 5602.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 5603.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 5604.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 5605.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 5606.                     REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 5607.                     REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
 5608.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 5609.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 5610.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 5611.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 5612.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 5613.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 5614.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 5615.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 5616.                 
 5617.                     INTEGER, INTENT(in   ) :: ndt
 5618.                     INTEGER, INTENT(in   ) :: latitu
 5619.                 
 5620.                     REAL(KIND=r8)   , INTENT(in   ) :: rstpar2 (ncols,icg,iwv)
 5621.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 5622.                     REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 5623.                     REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 5624.                     REAL(KIND=r8),    INTENT(inout) :: vcover  (ncols,icg)
 5625.                     REAL(KIND=r8),    INTENT(inout) :: z0x(ncols)
 5626.                     REAL(KIND=r8),    INTENT(inout) :: d  (ncols)
 5627.                     REAL(KIND=r8),    INTENT(inout) :: rdc(ncols)
 5628.                     REAL(KIND=r8),    INTENT(inout) :: rbc(ncols)
 5629.                     REAL(KIND=r8),    INTENT(inout) :: z0 (ncols)
 5630.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 5631.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 5632.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 5633.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 5634.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 5635.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 5636.                 
 5637.                     LOGICAL :: jstneu
 5638.                     INTEGER :: icheck(ncols)
 5639.                 
 5640.                     !
 5641.                     !     derivatives
 5642.                     !
 5643.                     REAL(KIND=r8) :: hgdtg (ncols)
 5644.                     REAL(KIND=r8) :: hgdtc (ncols)
 5645.                     REAL(KIND=r8) :: hgdtm (ncols)
 5646.                     REAL(KIND=r8) :: hcdtg (ncols)
 5647.                     REAL(KIND=r8) :: hcdtc (ncols)
 5648.                     REAL(KIND=r8) :: hcdtm (ncols)
 5649.                     REAL(KIND=r8) :: egdtg (ncols)
 5650.                     REAL(KIND=r8) :: egdtc (ncols)
 5651.                     REAL(KIND=r8) :: egdqm (ncols)
 5652.                     REAL(KIND=r8) :: ecdtg (ncols)
 5653.                     REAL(KIND=r8) :: ecdtc (ncols)
 5654.                     REAL(KIND=r8) :: ecdqm (ncols)
 5655.                     REAL(KIND=r8) :: deadtg(ncols)
 5656.                     REAL(KIND=r8) :: deadtc(ncols)
 5657.                     REAL(KIND=r8) :: deadqm(ncols)
 5658.                 
 5659.                     REAL(KIND=r8)    :: ef    (ncols,3)
 5660.                     REAL(KIND=r8)    :: absoil(ncols)
 5661.                     REAL(KIND=r8)    :: totdep(ncols)
 5662.                     REAL(KIND=r8)    :: div   (ncols)
 5663.                     REAL(KIND=r8)    :: eft   (ncols)
 5664.                     REAL(KIND=r8)    :: aaa   (ncols)
 5665.                     REAL(KIND=r8)    :: dep   (ncols)
 5666.                 
 5667.                 
 5668.                     INTEGER :: i
 5669.                     INTEGER :: il
 5670.                     INTEGER :: ntyp
 5671.                     INTEGER :: iveg
 5672.                     REAL(KIND=r8)    :: hlat3i
 5673.                     REAL(KIND=r8)    :: gby100
 5674.                     REAL(KIND=r8)    :: timcon
 5675.                     REAL(KIND=r8)    :: totwb(ncols)
 5676.                     REAL(KIND=r8)    :: endwb(ncols)
 5677.                     REAL(KIND=r8)    :: cbal (ncols)
 5678.                     REAL(KIND=r8)    :: gbal (ncols)
 5679.                     REAL(KIND=r8)    :: d1
 5680.                     !
 5681.                     !     calculates soil water budget prior to calling pbl
 5682.                     !
 5683.  1------------<     DO i = 1, nmax
 5684.  1                     !
 5685.  1                     !  capac(1)..Agua interceptada no dossel (m)
 5686.  1                     !  capac(2)..Agua interceptada na cobertura do solo (m)
 5687.  1                     !
 5688.  1                     totwb(i)=w(i,1)*poros(itype(i))*zdepth(itype(i),1) &
 5689.  1                          +w(i,2)*poros(itype(i))*zdepth(itype(i),2) &
 5690.  1                          +w(i,3)*poros(itype(i))*zdepth(itype(i),3) &
 5691.  1                          +capac(i,1) + capac(i,2)
 5692.  1------------>     END DO
 5693.                     !
 5694.                     !     planetary boundary layer parameterization
 5695.                     !
 5696.                     CALL pbl(jstneu, hgdtg , hgdtc , hgdtm , hcdtg , hcdtc , hcdtm , &
 5697.                          egdtg , egdtc , egdqm , ecdtg , ecdtc , ecdqm , deadtg, &
 5698.                          deadtc, deadqm,icheck , ect   , eci   , egt   , egi   , &
 5699.                          egs   , ec    , eg    , hc    , hg    , ecidif, egidif, &
 5700.                          ecmass, egmass, etmass, hflux , chf   , shf   , roff  , &
 5701.                          bps   , psb   , dzm   , em    , gmt   , gmq   ,  cu   , &
 5702.                          cuni  , ctni  , ustar , cosz  , rhoair, psy   , rcp   , &
 5703.                          wc   , wg       , fc       , fg       , hr       , vcover, z0x   , &
 5704.                          d       , rdc   , rbc   , z0       , qm       , tm       , um       , &
 5705.                          vm       , psur  , ppc   , ppl   , radn  , ra       , rb       , &
 5706.                          rd       , rc       , rg       , tcta  , tgta  , ta       , ea       , &
 5707.                          etc   , etg   , btc   , btg   , u2       , radt  , par   , &
 5708.                          pd       , rst   , rsoil , phroot,  hrr  , phsoil, cc       , &
 5709.                          cg       , satcap, snow  , dtc   , dtg   , dtm   , dqm   , &
 5710.                          stm   , extk  , radfac, closs , gloss , thermk, p1f   , &
 5711.                          p2f   , tc       , tg       , td       , capac , w       , itype , &
 5712.                          dtc3x , mon   , nmax  , ncols ,zlt2  ,green2,chil2 ,rstpar2,&
 5713.                          topt2 ,tll2  ,tu2   , defac2,ph12  ,ph22 )
 5714.                 
 5715.                     !
 5716.                     !     continue to update sib variables
 5717.                     !
 5718.  Vr4----------<     DO i = 1, nmax
 5719.  Vr4                   tc(i) = tc(i) + dtc(i)
 5720.  Vr4                   tg(i) = tg(i) + dtg(i)
 5721.  Vr4---------->     END DO
 5722.                     !
 5723.                     !     dumping of small capac values onto soil surface store
 5724.                     !
 5725.  1------------<     DO iveg = 1, 2
 5726.  1 2----------<        DO i = 1, nmax
 5727.  1 2                      ntyp  =itype(i)
 5728.  1 2                      IF (capac(i,iveg) <= 1.e-6_r8)THEN
 5729.  1 2                         w(i,1)=w(i,1)+capac(i,iveg)/(poros(ntyp)*zdepth(ntyp,1))
 5730.  1 2                         capac(i,iveg)=0.0_r8
 5731.  1 2                      END IF
 5732.  1 2---------->        END DO
 5733.  1------------>     END DO
 5734.                     !
 5735.                     !     snowmelt/refreeze calculation
 5736.                     !
 5737.                     CALL snowm(&
 5738.                          chf   ,shf   ,fluxef,roff  ,cc    ,cg    ,snow  ,dtc   ,dtg   , &
 5739.                          tc    ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols   )
 5740.                     !
 5741.                     !     update deep soil temperature using effective soil heat flux
 5742.                     !
 5743.                     timcon=dtc3x/(2.0_r8 *SQRT(pie*365.0_r8 ))
 5744.                 
 5745.  f------------<     DO i = 1, nmax
 5746.  f                     td(i)=td(i)+fluxef(i)/cg(i)*timcon
 5747.  f------------>     END DO
 5748.                     !
 5749.                     !     bare soil evaporation loss
 5750.                     !
 5751.                     hlat3i=1.0_r8/(hl*1000.0_r8 )
 5752.  f------------<     DO i = 1, nmax
 5753.  f                     ntyp=itype(i)
 5754.  f                     w(i,1)=w(i,1)-egs(i)*hlat3i/(poros(ntyp)*zdepth(ntyp,1))
 5755.  f------------>     END DO
 5756.                     !
 5757.                     !        extraction of transpiration loss from root zone
 5758.                     !
 5759.  1------------<     DO iveg = 1, 2
 5760.  1                     IF (iveg == 1) THEN
 5761.  1 Vr4--------<           DO i = 1, nmax
 5762.  1 Vr4                       absoil(i)=ect(i)*hlat3i
 5763.  1 Vr4-------->           END DO
 5764.  1                     ELSE
 5765.  1 Vr4--------<           DO i = 1, nmax
 5766.  1 Vr4                       absoil(i)=egt(i)*hlat3i
 5767.  1 Vr4-------->           END DO
 5768.  1                     END IF
 5769.  1 2----------<        DO i = 1, nmax
 5770.  1 2                      ntyp=itype(i)
 5771.  1 2                      ef(i,2)=0.0_r8
 5772.  1 2                      ef(i,3)=0.0_r8
 5773.  1 2                      totdep(i)=zdepth(ntyp,1)
 5774.  1 2---------->        END DO
 5775.  1 2----------<        DO il = 2, 3
 5776.  1 2 3--------<           DO i = 1, nmax
 5777.  1 2 3                       ntyp=itype(i)
 5778.  1 2 3                       totdep(i)=totdep(i)+zdepth(ntyp,il)
 5779.  1 2 3                       div(i)=rootd(ntyp,iveg)
 5780.  1 2 3                       dep(i)=MAX(0.0_r8  ,rootd(ntyp,iveg)-totdep(i)+ &
 5781.  1 2 3                            zdepth(ntyp,il))
 5782.  1 2 3                       dep(i)=MIN(dep(i),zdepth(ntyp,il))
 5783.  1 2 3                       ef(i,il)=dep(i)/div(i)
 5784.  1 2 3-------->           END DO
 5785.  1 2---------->        END DO
 5786.  1 Vr4--------<        DO i = 1, nmax
 5787.  1 Vr4                    eft(i  )=ef(i,2)+ef (i,3)
 5788.  1 Vr4                    eft(i) = MAX(eft(i),0.1e-5_r8)
 5789.  1 Vr4                    ef (i,2)=ef(i,2)/eft(i)
 5790.  1 Vr4                    ef (i,3)=ef(i,3)/eft(i)
 5791.  1 Vr4-------->        END DO
 5792.  1 2----------<        DO il = 2, 3
 5793.  1 2 3--------<           DO i = 1, nmax
 5794.  1 2 3                       ntyp=itype(i)
 5795.  1 2 3                       w(i,il)=w(i,il)-absoil(i)*ef(i,il)/ &
 5796.  1 2 3                            (poros(ntyp)*zdepth(ntyp,il))
 5797.  1 2 3-------->           END DO
 5798.  1 2---------->        END DO
 5799.  1------------>     END DO
 5800.                     !
 5801.                     !     interflow, infiltration excess and loss to
 5802.                     !     groundwater .  all losses are assigned to variable 'roff' .
 5803.                     !
 5804.  b------------<     DO il = 1, 2
 5805.  b b----------<        DO i = 1, nmax
 5806.  b b                      IF (w(i,il) <= 0.0_r8) THEN
 5807.  b b                         ntyp=itype(i)
 5808.  b b                         w(i,il+1)=w(i,il+1)+w(i,il)* &
 5809.  b b                              zdepth(ntyp,il)/zdepth(ntyp,il+1)
 5810.  b b                         w(i,il  )=0.0_r8
 5811.  b b                      END IF
 5812.  b b---------->        END DO
 5813.  b------------>     END DO
 5814.                 
 5815.                     CALL runoff(&
 5816.                          roff  ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols )
 5817.                 
 5818.  1------------<     DO i = 1, nmax
 5819.  1                     ntyp = itype(i)
 5820.  1                     IF (w(i,1) > 1.0_r8) THEN
 5821.  1                        w(i,2)=w(i,2)+(w(i,1)-1.0_r8 )*zdepth(ntyp,1)/zdepth(ntyp,2)
 5822.  1                        w(i,1)=1.0_r8
 5823.  1                     ENDIF
 5824.  1                     IF (w(i,2) > 1.0_r8) THEN
 5825.  1                        w(i,3)= w(i,3)+(w(i,2)-1.0_r8 )*zdepth(ntyp,2)/zdepth(ntyp,3)
 5826.  1                        w(i,2)=1.0_r8
 5827.  1                     ENDIF
 5828.  1                     IF (w(i,3) > 1.0_r8) THEN
 5829.  1                        roff(i)=roff(i)+(w(i,3)-1.0_r8 )*poros(ntyp)*zdepth(ntyp,3)
 5830.  1                        w(i,3)=1.0_r8
 5831.  1                     END IF
 5832.  1------------>     END DO
 5833.                     !
 5834.                     !     increment prognostic variables
 5835.                     !
 5836.                     !     adjust theta and sh to be consistent with dew formation
 5837.                     !
 5838.                     gby100 = 0.01_r8  * grav
 5839.                 
 5840.  Vr2----------<     DO i = 1, nmax
 5841.  Vr2                   !
 5842.  Vr2                   !     solve implicit system for winds
 5843.  Vr2                   !
 5844.  Vr2                   ! psb(i) = psur(i) * ( si(k) - si(k+1) )
 5845.  Vr2                   !
 5846.  Vr2                   drag(i)  =rhoair(i)*cu(i)*ustar(i)
 5847.  Vr2                   !
 5848.  Vr2                   ! P=rho*G*Z ===> DP=rho*G*DZ
 5849.  Vr2                   !
 5850.  Vr2                   ! D                D
 5851.  Vr2                   !---- = rho * g * ----
 5852.  Vr2                   ! DZ               DP
 5853.  Vr2                   !                                D
 5854.  Vr2                   ! aaa = cu * ustar *  rho * g * ----
 5855.  Vr2                   !                                DP
 5856.  Vr2                   !
 5857.  Vr2                   !                                                   g
 5858.  Vr2                   ! aaa (i)  = rhoair(i)*cu(i)*ustar(i) * -------------------------------
 5859.  Vr2                   !                                       100*psur(i) * ( si(k) - si(k+1) )
 5860.  Vr2                   !
 5861.  Vr2                   aaa (i)  =drag  (i)*gby100/psb(i)
 5862.  Vr2            
 5863.  Vr2                   gmu (i,2) =  gmu(i,2) + dtc3x*aaa(i)
 5864.  Vr2                   gmu (i,3) = (gmu(i,3) - aaa(i) * um(i)*sinclt(i) ) / gmu(i,2)
 5865.  Vr2                   gmu (i,4) = (gmu(i,4) - aaa(i) * vm(i)*sinclt(i) ) / gmu(i,2)
 5866.  Vr2            
 5867.  Vr2                   d1     =1.0_r8/ra(i) + 1.0_r8/rb(i) + 1.0_r8/rd(i)
 5868.  Vr2            
 5869.  Vr2                   ta(i)  =( tg(i)/rd(i) + tc(i)/rb(i) + tm(i)*bps(i)/ra(i) )/d1
 5870.  Vr2            
 5871.  Vr2---------->     END DO
 5872.                     !
 5873.                     !     calculates soil water budget after calling pbl
 5874.                     !     and compares with previous budget
 5875.                     !
 5876.  1------------<     DO i = 1, nmax
 5877.  1                     ntyp=itype(i)
 5878.  1                     endwb(i)=w(i,1)*poros(ntyp)*zdepth(ntyp,1) &
 5879.  1                          +w(i,2)*poros(ntyp)*zdepth(ntyp,2) &
 5880.  1                          +w(i,3)*poros(ntyp)*zdepth(ntyp,3) &
 5881.  1                          +capac(i,1)+capac(i,2) &
 5882.  1                          -(ppl(i)+ppc(i))/1000.0_r8 + etmass(i)/1000.0_r8 + roff(i)
 5883.  1                     !IF (ABS(totwb(i)-endwb(i)) > 0.0001_r8) THEN
 5884.  1                     !  WRITE(UNIT=nfprt,FMT=998) latitu,i,ntyp,ndt, &
 5885.  1                     !       totwb(i),endwb(i),(totwb(i)-endwb(i)),w(i,1),w(i,2), &
 5886.  1                     !       w(i,3),capac(i,1),capac(i,2),ppl(i),ppc(i),etmass(i), &
 5887.  1                     !       roff(i),zlt(ntyp,12,1),zlt(ntyp,12,2), &
 5888.  1                     !       tc(i),tg(i),td(i),tm(i)
 5889.  1                     !END IF
 5890.  1                     !
 5891.  1                     !     calculates and compares energy budgets
 5892.  1                     !
 5893.  1                     cbal(i)=radt(i,1)-chf(i)-(ect(i)+hc(i)+eci(i))/dtc3x
 5894.  1                     gbal(i)=radt(i,2)-shf(i)-(egt(i)+egi(i)+hg(i)+egs(i))/dtc3x
 5895.  1                     !IF (ABS(cbal(i)-gbal(i)) > 5.0_r8) &
 5896.  1                     !    WRITE(UNIT=nfprt,FMT=999)latitu,i,ntyp,ndt, &
 5897.  1                     !    radt(i,1),radt(i,2),chf(i),shf(i),hflux(i), &
 5898.  1                     !    ect(i),eci(i),egt(i),egi(i),egs(i)
 5899.  1------------>     END DO
 5900.                     !cdir critical
 5901.  1------------<     DO i=1,nmax
 5902.  1                     ntyp=itype(i)
 5903.  1                     ! if(abs(totwb(i)-endwb(i)).gt.0.0001_r8) then
 5904.  1                     IF(ABS(totwb(i)-endwb(i)).GT.0.0005_r8) THEN
 5905.  1                        WRITE(UNIT=nfprt,FMT=998) latitu,i,ntyp,ndt, &
 5906.  1                             totwb(i),endwb(i),(totwb(i)-endwb(i)),w(i,1),w(i,2), &
 5907.  1                             w(i,3),capac(i,1),capac(i,2),ppl(i),ppc(i),etmass(i), &
 5908.  1                             roff(i),zlt(ntyp,12,1),zlt(ntyp,12,2), &
 5909.  1                             tc(i),tg(i),td(i),tm(i)
 5910.  1                     END IF
 5911.  1                     IF(ABS(cbal(i)-gbal(i)).GT.5.0_r8) &
 5912.  1                          WRITE(UNIT=nfprt,FMT=999)latitu,i,ntyp,ndt, &
 5913.  1                          radt(i,1),radt(i,2),chf(i),shf(i),hflux(i), &
 5914.  1                          ect(i),eci(i),egt(i),egi(i),egs(i)
 5915.  1------------>     END DO
 5916.                     !cdir end critical
 5917.                 
 5918.                 998    FORMAT(3I4,1X,'WATER BAL.',I8,/3E12.4/3E12.4/2E12.4/4E12.4/2E12.4/4E12.4)
 5919.                 999    FORMAT(3I4,1X,'ENERGY BAL.',I8/4E12.3/6E12.3)
 5920.                   END SUBROUTINE fysiks
 5921.                 
 5922.                 
 5923.                 
 5924.                   ! vntlt1 :performs ventilation mass flux, based on deardorff, mwr, 1972?.
 5925.                 
 5926.                 
 5927.                 
 5928.                   SUBROUTINE vntlt1 &
 5929.                        (rmi   ,rhi   ,gu    ,gv    ,gt    ,tsurf ,tsea  ,ncols , &
 5930.                        sigki ,cuni  ,cui   ,cu    ,ctni  ,cti   ,ct    ,speedm,tha   , &
 5931.                        thm   ,dzm   ,thvgm ,rib   ,z0    ,zorl  ,ustar ,sinclt,mskant  )
 5932.                     !
 5933.                     !==========================================================================
 5934.                     !==========================================================================
 5935.                     !==========================================================================
 5936.                     ! imax..........number of grid points on a gaussian latitude circle
 5937.                     ! z0ice.........Roughness length of ice
 5938.                     ! sinclt........sinclt=SIN(colrad(latitu))
 5939.                     ! rmi...........rmi   (i)=cu(i)*ustar(i), where
 5940.                     !               cu is friction  transfer coefficients
 5941.                     !               ustar is surface friction velocity  (m/s)
 5942.                     ! rhi...........rhi   (i)=ct(i)*ustar(i), where
 5943.                     !               ct is heat transfer coefficients.
 5944.                     !               ustar is surface friction velocity  (m/s)
 5945.                     ! gu............(zonal      velocity)*sin(colat)
 5946.                     ! gv............(meridional velocity)*sin(colat)
 5947.                     ! gt............temperature
 5948.                     ! tsurf.........earth's surface temperature used for radiation
 5949.                     !               for the first time step when ground temperature is not yet
 5950.                     !               computed (this is done by subr.tsinit ),
 5951.                     ! tsea..........effective surface radiative temperature ( tgeff )
 5952.                     ! zorl..........zorl (i)= 100.0 *zgrav*speedm(i)*rhi(i)
 5953.                     !               zgrav =0.032 /grav
 5954.                     ! delsig
 5955.                     ! sigki ........sigki (k)=1.0e0/EXP(akappa*LOG(sig(k))),  where "sig"
 5956.                     !               sigma coordinate at middle of layer and akappa=gasr/cp
 5957.                     ! cuni..........neutral friction transfer  coefficients.
 5958.                     ! cui...........cui   (i)=cuni(i)*EXP( aa-SQRT(aa*aa+bb*f))
 5959.                     !               cui   (i)=cuni(i)*EXP(-tt+SQRT(tt*tt+ss*f))
 5960.                     ! cu............Friction  transfer coefficients.
 5961.                     ! ctni..........neutral heat transfer coefficients.
 5962.                     ! cti...........cti   (i)=ctni(i)*EXP( qq-SQRT(qq*qq+rr*g))
 5963.                     !               cti   (i)=cui (i)
 5964.                     ! ct............heat transfer coefficients.
 5965.                     ! speedm........speedm(i)=SQRT(gu(i)**2+gv(i)**2)*sincli, where
 5966.                     !               sincli=1.0 /sinclt
 5967.                     ! tha...........tha   (i)= tsurf(i)
 5968.                     ! thm...........thm   (i)= gt(i)*sigki(1)
 5969.                     ! dzm...........dzm   (i)=gt(i)*rbyg
 5970.                     !               rbyg  =gasr/grav*delsig(1)*0.5
 5971.                     ! thvgm.........thvgm (i)= tha(i)-thm(i)
 5972.                     ! rib...........bulk richardson number.
 5973.                     ! z0............Roughness length
 5974.                     ! ustarr........surface friction velocity  (m/s)
 5975.                     ! gasr..........gas constant of dry air        (j/kg/k)
 5976.                     ! grav..........grav   gravity constant        (m/s**2)
 5977.                     !==========================================================================
 5978.                     !
 5979.                     INTEGER, INTENT(in   ) :: ncols
 5980.                     REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
 5981.                     REAL(KIND=r8),    INTENT(inout  ) :: rmi   (ncols)
 5982.                     REAL(KIND=r8),    INTENT(inout  ) :: rhi   (ncols)
 5983.                     REAL(KIND=r8),    INTENT(in   ) :: gu    (ncols)
 5984.                     REAL(KIND=r8),    INTENT(in   ) :: gv    (ncols)
 5985.                     REAL(KIND=r8),    INTENT(in   ) :: gt    (ncols)
 5986.                     REAL(KIND=r8),    INTENT(in   ) :: tsurf (ncols)
 5987.                     REAL(KIND=r8),    INTENT(in   ) :: tsea  (ncols)
 5988.                     REAL(KIND=r8),    INTENT(in   ) :: zorl  (ncols)
 5989.                     REAL(KIND=r8),    INTENT(in   ) :: sigki   (1)
 5990.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 5991.                     REAL(KIND=r8),    INTENT(inout) :: cui   (ncols)
 5992.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 5993.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 5994.                     REAL(KIND=r8),    INTENT(inout) :: cti   (ncols)
 5995.                     REAL(KIND=r8),    INTENT(inout) :: ct    (ncols)
 5996.                     REAL(KIND=r8),    INTENT(inout) :: speedm(ncols)
 5997.                     REAL(KIND=r8),    INTENT(inout) :: tha   (ncols)
 5998.                     REAL(KIND=r8),    INTENT(inout) :: thm   (ncols)
 5999.                     REAL(KIND=r8),    INTENT(inout) :: dzm   (ncols)
 6000.                     REAL(KIND=r8),    INTENT(inout) :: thvgm (ncols)
 6001.                     REAL(KIND=r8),    INTENT(inout) :: rib   (ncols)
 6002.                     REAL(KIND=r8),    INTENT(inout) :: z0    (ncols)
 6003.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 6004.                     INTEGER(KIND=i8), INTENT(in   ) :: mskant(ncols)
 6005.                 
 6006.                     REAL(KIND=r8),        PARAMETER :: vkrmn=0.40_r8
 6007.                     REAL(KIND=r8),        PARAMETER :: ribc=3.05_r8
 6008.                     REAL(KIND=r8),        PARAMETER :: aa=1.2270_r8
 6009.                     REAL(KIND=r8),        PARAMETER :: bb=1.2642_r8
 6010.                     REAL(KIND=r8),        PARAMETER :: tt=1.8900_r8
 6011.                     REAL(KIND=r8),        PARAMETER :: ss=5.0519_r8
 6012.                     REAL(KIND=r8),        PARAMETER :: ee=1.2743_r8
 6013.                     REAL(KIND=r8),        PARAMETER :: ff=3.4805_r8
 6014.                     REAL(KIND=r8),        PARAMETER :: gg=0.87581_r8
 6015.                     REAL(KIND=r8),        PARAMETER :: hh=-1.5630_r8
 6016.                     REAL(KIND=r8),        PARAMETER :: pp=10.815_r8
 6017.                     REAL(KIND=r8),        PARAMETER :: qq=1.3462_r8
 6018.                     REAL(KIND=r8),        PARAMETER :: rr=1.8380_r8
 6019.                     REAL(KIND=r8)                   :: sincli(ncols)
 6020.                     REAL(KIND=r8)                   :: f
 6021.                     REAL(KIND=r8)                   :: g
 6022.                     INTEGER                :: i
 6023.                 
 6024.  1------------<     DO i = 1, ncols
 6025.  1                     IF(mskant(i) == 1_i8)THEN
 6026.  1                        z0(i)=0.001_r8
 6027.  1                        IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) >= 271.17_r8) THEN
 6028.  1                           z0(i)=0.01_r8*zorl(i)
 6029.  1                        ELSE IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < 271.17_r8) THEN
 6030.  1                          z0(i)=z0ice
 6031.  1                        END IF
 6032.  1                        sincli(i)=1.0_r8 /sinclt(i)
 6033.  1                     END IF  
 6034.  1------------>     END DO
 6035.                 
 6036.  1------------<     DO i = 1, ncols
 6037.  1                     IF(mskant(i) == 1_i8)THEN
 6038.  1                        IF (tsea(i) <= 0.0_r8) THEN
 6039.  1                           speedm(i)=SQRT(gu(i)**2+gv(i)**2)*sincli(i)
 6040.  1                           speedm(i)=MAX(2.0_r8 ,speedm(i))
 6041.  1                           dzm   (i)=gt(i)*rbyg
 6042.  1                           cuni(i)=LOG(dzm(i)/z0(i))/vkrmn*gg+hh
 6043.  1                           ctni(i)=cuni(i)
 6044.  1                           !
 6045.  1                           !     stability branch based on bulk richardson number.
 6046.  1                           !
 6047.  1                           thm   (i)= gt(i)*sigki(1)
 6048.  1                           tha   (i)= tsurf(i)
 6049.  1                           thvgm (i)= tha(i)-thm(i)
 6050.  1                           rib   (i)=-thvgm(i)*grav*dzm(i)/ (thm(i)*speedm(i)**2)
 6051.  1                           rib   (i)=MAX(-1.25_r8 ,rib(i))
 6052.  1                           rib   (i)=MIN( 1.25_r8 ,rib(i))
 6053.  1                           IF (rib(i) < 0.0_r8) THEN
 6054.  1                              f        =LOG(1.0_r8-ee*rib(i))
 6055.  1                              cui   (i)=cuni(i)*EXP( aa-SQRT(aa*aa+bb*f))
 6056.  1                              g        =LOG(1.0_r8-ff*rib(i))
 6057.  1                              cti   (i)=ctni(i)*EXP( qq-SQRT(qq*qq+rr*g))
 6058.  1                           ELSE
 6059.  1                              f        =LOG(1.0_r8+pp*rib(i))
 6060.  1                              cui   (i)=cuni(i)*EXP(-tt+SQRT(tt*tt+ss*f))
 6061.  1                              cti   (i)=cui (i)
 6062.  1                           END IF
 6063.  1                           cu    (i)=1.0_r8/cui(i)
 6064.  1                           ct    (i)=1.0_r8/cti(i)
 6065.  1                           !
 6066.  1                           !     surface friction velocity and ventilation mass flux
 6067.  1                           !
 6068.  1                           ustar (i)=speedm(i)*cu(i)
 6069.  1                           rmi   (i)=cu(i)*ustar(i)
 6070.  1                           rhi   (i)=ct(i)*ustar(i)
 6071.  1                        END IF
 6072.  1                     END IF
 6073.  1------------>     END DO
 6074.                   END SUBROUTINE vntlt1
ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 6074 
  Named Constant "RIBC" is not used.

 6075.                 
 6076.                 
 6077.                 
 6078.                 
 6079.                 
 6080.                 
 6081.                   SUBROUTINE seasfc( &
 6082.                        tmtx  ,umtx  ,qmtx  ,kpbl  ,kqpbl ,slrad ,tsurf ,qsurf , &
 6083.                        gu    ,gv    ,gt    ,gq    ,gps   ,tsea  ,dtc3x ,sinclt, &
 6084.                        sigki ,delsig,sens  ,evap  ,umom  ,vmom  ,rmi   ,rhi   , &
 6085.                        cond  ,stor  ,zorl  ,ncols ,speedm,Ustarm,z0    , &
 6086.                        rho   ,qsfc  ,tsfc  ,mskant  )
 6087.                     !
 6088.                     !==========================================================================
 6089.                     ! ncols......Number of grid points on a gaussian latitude circle
 6090.                     ! kpbl.......Number of layers pbl process is included( for u v,t )
 6091.                     ! kqpbl......Number of layers pbl process is included( for q     )
 6092.                     ! tmtx.......Temperature related matrix
 6093.                     !            gmt(i,k,1)*d(gt(i,k-1))/dt+gmt(i,k,2)*d(gt(i,k))/dt=gmt(i,k,3)
 6094.                     !            gmt(i,1,1)=0.
 6095.                     !            gmt(*,*,1)...dimensionless
 6096.                     !            gmt(*,*,2)...dimensionless
 6097.                     !            gmt(*,*,3)...deg/sec
 6098.                     ! umtx.......Wind related matrix
 6099.                     !            gmu(i,k,1)*d(gu(i,k-1))/dt+gmu(i,k,2)*d(gu(i,k))/dt=gmu(i,k,3)
 6100.                     !            gmu(i,k,1)*d(gv(i,k-1))/dt+gmu(i,k,2)*d(gv(i,k))/dt=gmu(i,k,4)
 6101.                     !            gmu(i,1,1)=0.
 6102.                     !            gmu(*,*,1)...dimensionless
 6103.                     !            gmu(*,*,2)...dimensionless
 6104.                     !            gmu(*,*,3)...m/sec**2
 6105.                     !            gmu(*,*,4)...m/sec**2
 6106.                     ! qmtx.......specific humidity related matrix
 6107.                     !            gmq(i,k,1)*d(gq(i,k-1))/dt+gmq(i,k,2)*d(gq(i,k))/dt=gmq(i,k,3)
 6108.                     !            gmq(i,1,1)=0.
 6109.                     !            gmq(*,*,1)...dimensionless
 6110.                     !            gmq(*,*,2)...dimensionless
 6111.                     !            gmq(*,*,3)...kg/kg/sec
 6112.                     ! slrad......radiation interpolation
 6113.                     ! tsurff.....earth's surface temperature used for radiation
 6114.                     !            for the first time step when ground temperature is not yet
 6115.                     !            computed (this is done by subr.tsinit ),
 6116.                     ! qsurf......qsurf(i)=0.622e0*EXP(21.65605e0 -5418.0e0 /tsurf(i))/gps(i)
 6117.                     ! gu.........(zonal      velocity)*sin(colat)
 6118.                     ! gv.........(meridional velocity)*sin(colat)
 6119.                     ! gt.........Temperature
 6120.                     ! gq.........Specific humidity
 6121.                     ! gps........Surface pressure in mb
 6122.                     ! tsea.......effective surface radiative temperature ( tgeff )
 6123.                     ! dtc3x......time increment dt
 6124.                     ! sinclt.....sinclt=SIN(colrad(latitu))
 6125.                     ! sigki......sigki (k)=1.0e0/EXP(akappa*LOG(sig(k))),  where "sig"
 6126.                     !            sigma coordinate at middle of layer and akappa=gasr/cp
 6127.                     ! delsig
 6128.                     ! sens.......sensible heat flux
 6129.                     ! evap.......latent heat flux  "evaporation"
 6130.                     ! umom.......umom(i)=fmom*um(ncount),
 6131.                     !            where .fmom  momentum flux      in n/m**2
 6132.                     !            fmom= rhoair(ncount)*cu(ncount)*ustar(ncount)
 6133.                     !            um  (ncount)=gu (i,1)/sinclt
 6134.                     !            gu          = (zonal velocity)*sin(colat)
 6135.                     ! vmom.......vmom(i)=rho(i)*gv(i)*rmi(i)
 6136.                     !            rho  (i)=gps(i)/(gr100*gt(i))
 6137.                     !            gr100 =gasr*0.01
 6138.                     ! z0ice.......Roughness length of ice
 6139.                     ! rmi.........rmi   (i)=cu(i)*ustar(i), where
 6140.                     !             cu is friction  transfer coefficients
 6141.                     !             ustar is surface friction velocity  (m/s)
 6142.                     ! rhi.........rhi   (i)=ct(i)*ustar(i), where
 6143.                     !             ct is heat transfer coefficients.
 6144.                     !             ustar is surface friction velocity  (m/s)
 6145.                     ! cond........cond(i)=gice*(tsurf(i)-tice) or
 6146.                     !             cond(i)=(2.03/2.0)*(tsurf(i)-271.16)
 6147.                     ! stor........stor(i)=hscap*c0(i)
 6148.                     ! zorl........zorl (i)= 100.0 *zgrav*speedm(i)*rhi(i)
 6149.                     !             zgrav =0.032 /grav
 6150.                     ! cp..........specific heat of air           (j/kg/k)
 6151.                     ! hl..........heat of evaporation of water     (j/kg)
 6152.                     ! gasr........gas constant of dry air        (j/kg/k)
 6153.                     ! grav........grav   gravity constant        (m/s**2)
 6154.                     ! stefan......Stefan Boltzman constant
 6155.                     !==========================================================================
 6156.                     !
 6157.                     INTEGER, INTENT(in   ) :: ncols
 6158.                     INTEGER, INTENT(IN   ) :: kpbl
 6159.                     INTEGER, INTENT(IN   ) :: kqpbl
 6160.                     REAL(KIND=r8),    INTENT(INOUT) :: tmtx (ncols,kpbl,3)
 6161.                     REAL(KIND=r8),    INTENT(INOUT) :: umtx (ncols,kpbl,4)
 6162.                     REAL(KIND=r8),    INTENT(INOUT) :: qmtx (ncols,kqpbl,3)
 6163.                     REAL(KIND=r8),    INTENT(IN   ) :: slrad(ncols)
 6164.                     REAL(KIND=r8),    INTENT(INOUT) :: tsurf(ncols)
 6165.                     REAL(KIND=r8),    INTENT(IN   ) :: qsurf(ncols)
 6166.                     REAL(KIND=r8),    INTENT(IN   ) :: gu   (ncols)
 6167.                     REAL(KIND=r8),    INTENT(IN   ) :: gv   (ncols)
 6168.                     REAL(KIND=r8),    INTENT(INOUT) :: gt   (ncols)
 6169.                     REAL(KIND=r8),    INTENT(INOUT) :: gq   (ncols)
 6170.                     REAL(KIND=r8),    INTENT(IN   ) :: gps  (ncols)
 6171.                     REAL(KIND=r8),    INTENT(INOUT) :: tsea (ncols)
 6172.                     REAL(KIND=r8),    INTENT(IN   ) :: dtc3x
 6173.                     REAL(KIND=r8),    INTENT(IN   ) :: sinclt(ncols)
 6174.                     REAL(KIND=r8),    INTENT(IN   ) :: sigki(1)
 6175.                     REAL(KIND=r8),    INTENT(IN   ) :: delsig(1)
 6176.                     REAL(KIND=r8),    INTENT(INOUT  ) :: sens (ncols)
 6177.                     REAL(KIND=r8),    INTENT(INOUT  ) :: evap (ncols)
 6178.                     REAL(KIND=r8),    INTENT(INOUT  ) :: umom (ncols)
 6179.                     REAL(KIND=r8),    INTENT(INOUT  ) :: vmom (ncols)
 6180.                     REAL(KIND=r8),    INTENT(INOUT  ) :: rmi  (ncols)
 6181.                     REAL(KIND=r8),    INTENT(INOUT  ) :: rhi  (ncols)
 6182.                     REAL(KIND=r8),    INTENT(INOUT  ) :: cond (ncols)
 6183.                     REAL(KIND=r8),    INTENT(INOUT  ) :: stor (ncols)
 6184.                     REAL(KIND=r8),    INTENT(INOUT  ) :: zorl (ncols)
 6185.                     REAL(KIND=r8) :: rnet (ncols)
 6186.                     REAL(KIND=r8),    INTENT(INOUT    ) :: speedm  (ncols)
 6187.                     REAL(KIND=r8),    INTENT(OUT    ) :: Ustarm  (ncols)
 6188.                     REAL(KIND=r8),    INTENT(INOUT    ) :: z0      (ncols)
 6189.                     REAL(KIND=r8),    INTENT(OUT    ) :: rho   (ncols)
 6190.                     REAL(KIND=r8),    INTENT(INOUT    ) :: qsfc (ncols)
 6191.                     REAL(KIND=r8),    INTENT(INOUT    ) ::  tsfc (ncols)
 6192.                     INTEGER(KIND=i8)      ,    INTENT(IN )       :: mskant(ncols)
 6193.                     REAL(KIND=r8)    :: ah    (ncols)
 6194.                     REAL(KIND=r8)    :: al    (ncols)
 6195.                     REAL(KIND=r8)    :: am    (ncols)
 6196.                     REAL(KIND=r8)    :: cuni  (ncols)
 6197.                     REAL(KIND=r8)    :: cui   (ncols)
 6198.                     REAL(KIND=r8)    :: cu    (ncols)
 6199.                     REAL(KIND=r8)    :: ctni  (ncols)
 6200.                     REAL(KIND=r8)    :: cti   (ncols)
 6201.                     REAL(KIND=r8)    :: ct    (ncols)
 6202.                     REAL(KIND=r8)    :: um    (ncols)
 6203.                     REAL(KIND=r8)    :: vm    (ncols)
 6204.                     REAL(KIND=r8)    :: tha   (ncols)
 6205.                     REAL(KIND=r8)    :: thm   (ncols)
 6206.                     REAL(KIND=r8)    :: dzm   (ncols)
 6207.                     REAL(KIND=r8)    :: thvgm (ncols)
 6208.                     REAL(KIND=r8)    :: rib   (ncols)
 6209.                     REAL(KIND=r8)    :: ustar (ncols)
 6210.                     REAL(KIND=r8)    :: gtsav (ncols)
 6211.                     REAL(KIND=r8)    :: gqsav (ncols)
 6212.                     REAL(KIND=r8)    :: tmsav (ncols)
 6213.                     REAL(KIND=r8)    :: qmsav (ncols)
 6214.                     REAL(KIND=r8)    :: tssav (ncols)
 6215.                     REAL(KIND=r8)    :: dqg0  (ncols)
 6216.                     REAL(KIND=r8)    :: b00   (ncols)
 6217.                     REAL(KIND=r8)    :: b03   (ncols)
 6218.                     REAL(KIND=r8)    :: b04   (ncols)
 6219.                     REAL(KIND=r8)    :: c0    (ncols)
 6220.                     REAL(KIND=r8)    :: b30   (ncols)
 6221.                     REAL(KIND=r8)    :: b33   (ncols)
 6222.                     REAL(KIND=r8)    :: c3    (ncols)
 6223.                     REAL(KIND=r8)    :: b40   (ncols)
 6224.                     REAL(KIND=r8)    :: b44   (ncols)
 6225.                     REAL(KIND=r8)    :: c4    (ncols)
 6226.                 
 6227.                     INTEGER :: i
 6228.                     INTEGER :: ncount
 6229.                     REAL(KIND=r8)    :: gbyhl
 6230.                     REAL(KIND=r8)    :: gbycp
 6231.                     REAL(KIND=r8)    :: gr100
 6232.                     REAL(KIND=r8)    :: gb100
 6233.                     REAL(KIND=r8)    :: zgrav
 6234.                     REAL(KIND=r8)    :: gice
 6235.                     REAL(KIND=r8)    :: hscap
 6236.                     REAL(KIND=r8)    :: sl1kap
 6237.                     REAL(KIND=r8)    :: st4
 6238.                     REAL(KIND=r8)    :: dti
 6239.                     REAL(KIND=r8)    :: dtm
 6240.                     REAL(KIND=r8)    :: dtmdt
 6241.                     REAL(KIND=r8)    :: dqm
 6242.                     REAL(KIND=r8)    :: dqmdt
 6243.                     !*JPB REAL(KIND=r8), PARAMETER :: dd=0.05_r8
 6244.                     REAL(KIND=r8), PARAMETER :: dd=3.0_r8 ! Total depth of the ice slab (m), Using ECMWF value
 6245.                     REAL(KIND=r8), PARAMETER :: tice=271.16_r8
 6246.                     REAL(KIND=r8), PARAMETER :: dice=2.0_r8
 6247.                     REAL(KIND=r8), PARAMETER :: hice=2.03_r8
 6248.                     REAL(KIND=r8), PARAMETER :: rhoice=920.0_r8 ! Mean ice density (kg/m3)
 6249.                     REAL(KIND=r8), PARAMETER :: cice=2093.0_r8  ! Heat Capacity of Ice (J/Kg)
 6250.                 
 6251.                 
 6252.                     gr100 =gasr*0.01_r8
 6253.                     gbycp =grav/(cp*delsig(1)*100.0_r8 *sigki(1))
 6254.                     gbyhl =grav/(hl*delsig(1)*100.0_r8 )
 6255.                     gb100 =grav/(   delsig(1)*100.0_r8 )
 6256.                     zgrav =0.032_r8 /grav
 6257.                     gice  =hice/dice ! 2.03_r8/2.0_r8
 6258.                     hscap =rhoice*cice*dd/dtc3x
 6259.                     sl1kap=sigki(1)
 6260.                     st4   =stefan*4.0_r8
 6261.                     dti   =1.0_r8 /dtc3x
 6262.                 
 6263.  1------------<     DO i = 1, ncols
 6264.  1                     IF(mskant(i) == 1_i8)THEN
 6265.  1                        rnet (i)=-697.58_r8*slrad(i)
 6266.  1                        rho  (i)=gps(i)/(gr100*gt(i))
 6267.  1                        ah   (i)=gbycp/gps(i)
 6268.  1                        al   (i)=gbyhl/gps(i)
 6269.  1                        dqg0 (i)=0.622_r8 *EXP(30.25353_r8 -5418.0_r8 /tsurf(i)) &
 6270.  1                             /(tsurf(i)*tsurf(i)*gps(i))
 6271.  1                        gtsav(i)=gt   (i)
 6272.  1                        gqsav(i)=gq   (i)
 6273.  1                        tssav(i)=tsurf(i)
 6274.  1                        tmsav(i)=tmtx (i,1,3)
 6275.  1                        qmsav(i)=qmtx (i,1,3)
 6276.  1                      END IF
 6277.  1------------>     END DO
 6278.                 
 6279.  A-----------<>     c0  =0.0_r8
 6280.  A-----------<>     cond=0.0_r8
 6281.  A-----------<>     stor=0.0_r8
 6282.                 
 6283.                     ncount=0
 6284.                 8000 CONTINUE
 6285.                     ncount=ncount+1
 6286.  I                  CALL vntlt1 ( &
 6287.                          rmi   ,rhi   ,gu    ,gv    ,gt    ,tsurf ,tsea  ,ncols , &
 6288.                          sigki ,cuni  ,cui   ,cu    ,ctni  ,cti   ,ct    ,speedm,tha   , &
 6289.                          thm   ,dzm   ,thvgm ,rib   ,z0    ,zorl  ,ustar ,sinclt,mskant )
 6290.  1------------<     DO i = 1, ncols
 6291.  1                     IF(mskant(i) == 1_i8)THEN
 6292.  1                        gt  (i)    =gtsav(i)
 6293.  1                        gq  (i)    =gqsav(i)
 6294.  1                        tsurf(i)   =tssav(i)
 6295.  1                        tmtx(i,1,3)=tmsav(i)
 6296.  1                        qmtx(i,1,3)=qmsav(i)
 6297.  1                     END IF
 6298.  1------------>     END DO
 6299.  1------------<     DO i = 1, ncols
 6300.  1                     IF(mskant(i) == 1_i8)THEN
 6301.  1                        ! Solution of sea ice
 6302.  1                        IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < tice+0.01_r8) THEN
 6303.  1                           b00(i)=   hscap+cp*rho(i)*rhi(i) &
 6304.  1                                +hl*rho(i)*rhi(i)*dqg0(i) &
 6305.  1                                +gice+st4*tsurf(i)**3
 6306.  1                           b03(i)=        -cp*rho(i)*rhi(i)*sl1kap
 6307.  1                           b04(i)=-hl*rho(i)*rhi(i)
 6308.  1                           ! Right side of eq.41 section III.A 
 6309.  1                           ! COLA Physics Description Manual
 6310.  1                           c0 (i)=rnet(i) -cp*rho(i)*rhi(i)*(tsurf(i)-sl1kap*gt(i)) &
 6311.  1                                -hl*rho(i)*rhi(i)*(qsurf(i)-       gq(i)) &
 6312.  1                                -gice*(tsurf(i)-tice)-stefan*tsurf(i)**4
 6313.  1                           b30(i)=               -ah (i)*cp*rho(i)*rhi(i)
 6314.  1                           b33(i)=tmtx(i,1,2)*dti-b30(i)*          sl1kap
 6315.  1                           c3 (i)=tmtx(i,1,3)    -b30(i)*(tsurf(i)-sl1kap*gt(i))
 6316.  1                           b40(i)=               -al(i)*hl*rho(i)*rhi(i)* dqg0 (i)
 6317.  1                           b44(i)=qmtx(i,1,2)*dti+al(i)*hl*rho(i)*rhi(i)
 6318.  1                           c4 (i)=qmtx(i,1,3)    + &
 6319.  1                                al(i)*hl*rho(i)*rhi(i)*(qsurf(i)-gq(i))
 6320.  1                           b00(i)=b00(i)-b30(i)*b03(i)/b33(i)-b40(i)*b04(i)/b44(i)
 6321.  1                           c0 (i)=c0 (i)-c3 (i)*b03(i)/b33(i)-c4 (i)*b04(i)/b44(i)
 6322.  1                           c0 (i)=c0 (i)/b00(i)
 6323.  1                           tsurf(i)=tsurf(i)+c0(i)
 6324.  1                           tmtx(i,1,3)=(c3(i)-b30(i)*c0(i))/(b33(i)*dtc3x)
 6325.  1                           qmtx(i,1,3)=(c4(i)-b40(i)*c0(i))/(b44(i)*dtc3x)
 6326.  1                        ! Solution of sea water
 6327.  1                        ELSE IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) > tice+0.01_r8) THEN
 6328.  1                           zorl (i)= 100.0_r8 *zgrav*speedm(i)*rhi(i)
 6329.  1                           sens (i)= rho(i)*cp*(tsurf(i)-gt(i)*sigki(1))*rhi(i)
 6330.  1                           evap (i)= rho(i)*hl*(qsurf(i)-gq(i))*rhi(i)
 6331.  1                           tmtx(i,1,3)=(tmtx(i,1,3)+ah(i)*sens(i)) &
 6332.  1                                /(tmtx(i,1,2)+dtc3x*ah(i)*rho(i)*cp*rhi(i))
 6333.  1                           qmtx(i,1,3)=(qmtx(i,1,3)+al(i)*evap(i)) &
 6334.  1                                /(qmtx(i,1,2)+dtc3x*al(i)*rho(i)*hl*rhi(i))
 6335.  1                        END IF
 6336.  1                     END IF	  
 6337.  1------------>     END DO
 6338.                 
 6339.  1------------<     DO i = 1, ncols
 6340.  1                     IF(mskant(i) == 1_i8)THEN
 6341.  1                        gt(i)=gt(i)+tmtx(i,1,3)*dtc3x
 6342.  1                        gq(i)=gq(i)+qmtx(i,1,3)*dtc3x
 6343.  1                     END IF
 6344.  1------------>     END DO
 6345.                 
 6346.                     IF (ncount == 1) go to 8000
 6347.                 
 6348.  1------------<     DO i = 1, ncols
 6349.  1                    IF(mskant(i) == 1_i8)THEN
 6350.  1                        sens(i)=rho(i)*cp*(tsurf(i)-gt(i)*sigki(1))*rhi(i)
 6351.  1                        evap(i)=rho(i)*hl*(qsurf(i)-gq(i)         )*rhi(i)
 6352.  1              
 6353.  1                        dtmdt=(ah(i)*sens(i))/(tmtx(i,1,2)+dtc3x*ah(i)*rho(i)*cp*rhi(i))
 6354.  1                        dqmdt=(al(i)*evap(i))/(qmtx(i,1,2)+dtc3x*al(i)*rho(i)*hl*rhi(i))
 6355.  1                        dtm=dtmdt*dtc3x
 6356.  1                        dqm=dqmdt*dtc3x
 6357.  1                        tsfc   (i)=gt(i)+dtm
 6358.  1                        qsfc   (i)=gq(i)+dqm
 6359.  1              
 6360.  1                        gt  (i)=gtsav(i)
 6361.  1                        gq  (i)=gqsav(i)
 6362.  1                        IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < tice+0.01_r8) THEN
 6363.  1                           cond(i)=gice*(tsurf(i)-tice)
 6364.  1                           stor(i)=hscap*c0(i)
 6365.  1                           tsurf(i)=MIN(tsurf(i),tice)
 6366.  1                           tsea (i)=-   tsurf(i)
 6367.  1                        END IF
 6368.  1                     END IF
 6369.  1------------>     END DO
 6370.                 
 6371.  1------------<     DO i = 1, ncols
 6372.  1                     IF(mskant(i) == 1_i8)THEN
 6373.  1                        umom(i)=rho(i)*gu(i)*rmi(i)
 6374.  1                        vmom(i)=rho(i)*gv(i)*rmi(i)
 6375.  1                        am  (i)=gb100/gps(i)
 6376.  1                        umtx(i,1,3)=(umtx(i,1,3)-am(i)*umom(i)) &
 6377.  1                             /(umtx(i,1,2)+dtc3x*am(i)*rho(i)*rmi(i))
 6378.  1                        umtx(i,1,4)=(umtx(i,1,4)-am(i)*vmom(i)) &
 6379.  1                             /(umtx(i,1,2)+dtc3x*am(i)*rho(i)*rmi(i))
 6380.  1                        !
 6381.  1                           !     set surface stress use of pseudo winds to true winds
 6382.  1                        !     for output diagnostics
 6383.  1                        !
 6384.  1                        umom(i)=umom(i)/sinclt(i)
 6385.  1                        vmom(i)=vmom(i)/sinclt(i)
 6386.  1                        Ustarm(i) = sqrt(umom(i)**2 + vmom(i)**2)
 6387.  1                        IF(Ustarm(i)==0.0_r8)Ustarm(i)=0.007_r8
 6388.  1                        um  (i)=gu (i)/sinclt(i)
 6389.  1                        vm  (i)=gv (i)/sinclt(i)
 6390.  1                        speedm(i)=SQRT(um(i)**2 + vm(i)**2)
 6391.  1                        speedm(i)=MAX(2.0_r8 , speedm(i))
 6392.  1                     END IF
 6393.  1------------>     END DO
 6394.                   END SUBROUTINE seasfc
 6395.                 
 6396.                 
 6397.                   SUBROUTINE sextrp &
 6398.                        (td    ,tg    ,tc    ,w     ,capac ,td0   ,tg0   ,tc0   ,w0    , &
 6399.                        capac0,tdm   ,tgm   ,tcm   ,wm    ,capacm,istrt ,ncols ,nmax  , &
 6400.                        epsflt,intg  ,latitu,tm0   ,qm0   ,tm    ,qm    ,tmm    ,qmm     )
 6401.                     INTEGER, INTENT(in   ) :: istrt
 6402.                     INTEGER, INTENT(in   ) :: ncols
 6403.                     INTEGER, INTENT(in   ) :: nmax
 6404.                     REAL(KIND=r8)   , INTENT(in   ) :: epsflt
 6405.                     INTEGER, INTENT(in   ) :: intg
 6406.                     INTEGER, INTENT(in   ) :: latitu
 6407.                     REAL(KIND=r8),    INTENT(in   ) :: tm    (ncols)
 6408.                     REAL(KIND=r8),    INTENT(in   ) :: qm    (ncols)
 6409.                     REAL(KIND=r8),    INTENT(in   ) :: td    (ncols)
 6410.                     REAL(KIND=r8),    INTENT(in   ) :: tg    (ncols)
 6411.                     REAL(KIND=r8),    INTENT(in   ) :: tc    (ncols)
 6412.                     REAL(KIND=r8),    INTENT(in   ) :: w     (ncols,3)
 6413.                     REAL(KIND=r8),    INTENT(in   ) :: capac (ncols,2)
 6414.                     REAL(KIND=r8),    INTENT(inout) :: td0   (ncols)
 6415.                     REAL(KIND=r8),    INTENT(inout) :: tg0   (ncols)
 6416.                     REAL(KIND=r8),    INTENT(inout) :: tc0   (ncols)
 6417.                     REAL(KIND=r8),    INTENT(inout) :: w0    (ncols,3)
 6418.                     REAL(KIND=r8),    INTENT(inout) :: capac0(ncols,2)
 6419.                     REAL(KIND=r8),    INTENT(inout) :: tdm   (ncols)
 6420.                     REAL(KIND=r8),    INTENT(inout) :: tgm   (ncols)
 6421.                     REAL(KIND=r8),    INTENT(inout) :: tcm   (ncols)
 6422.                     REAL(KIND=r8),    INTENT(inout) :: wm    (ncols,3)
 6423.                     REAL(KIND=r8),    INTENT(inout) :: capacm(ncols,2)
 6424.                     REAL(KIND=r8),    INTENT(inout) :: tm0 (ncols)
 6425.                     REAL(KIND=r8),    INTENT(inout) :: qm0 (ncols)
 6426.                     REAL(KIND=r8),    INTENT(inout) :: tmm (ncols)
 6427.                     REAL(KIND=r8),    INTENT(inout) :: qmm (ncols)
 6428.                     INTEGER :: i, nc, ii
 6429.                 
 6430.                     IF (intg == 2) THEN
 6431.                        IF (istrt >= 1) THEN
 6432.  1------------<           DO i = 1, nmax
 6433.  1 A---------<>              tm0   (i)  =tm   (i)
 6434.  1 A---------<>              qm0   (i)  =qm   (i)
 6435.  1 A---------<>              td0   (i)  =td   (i)
 6436.  1                           tg0   (i)  =tg   (i)
 6437.  1 A---------<>              tc0   (i)  =tc   (i)
 6438.  1                           w0    (i,1)=w    (i,1)
 6439.  1                           w0    (i,2)=w    (i,2)
 6440.  1                           w0    (i,3)=w    (i,3)
 6441.  1                           capac0(i,1)=capac(i,1)
 6442.  1                           capac0(i,2)=capac(i,2)
 6443.  1                           IF (capac0(i,2) > 0.0_r8 .AND. tg0(i) > 273.16_r8) THEN
 6444.  1                              nc=0
 6445.  1                              ii=0
 6446.  1                              !DO ii = 1, ncols
 6447.  1                              !   IF (imask(ii) >= 1) nc=nc+1
 6448.  1                              !   IF (nc == i) EXIT
 6449.  1                              !END DO
 6450.  1                              WRITE(UNIT=nfprt,FMT=200)ii,latitu,i,capac0(i,2),tg0(i)
 6451.  1                           END IF
 6452.  1------------>           END DO
 6453.                        ELSE
 6454.  1------------<           DO i = 1, nmax
 6455.  1                           td0(i)=td0(i)+epsflt*(td(i)+tdm(i)-2.0_r8  *td0(i))
 6456.  1                           tg0(i)=tg0(i)+epsflt*(tg(i)+tgm(i)-2.0_r8  *tg0(i))
 6457.  1                           tc0(i)=tc0(i)+epsflt*(tc(i)+tcm(i)-2.0_r8  *tc0(i))
 6458.  1              
 6459.  1                           tm0(i)=tm0(i)+epsflt*(tm(i)+tmm(i)-2.0_r8  *tm0(i))
 6460.  1                           qm0(i)=qm0(i)+epsflt*(qm(i)+qmm(i)-2.0_r8  *qm0(i))
 6461.  1              
 6462.  1                           IF(w0    (i,1) > 0.0_r8 ) THEN
 6463.  1                              w0(i,1)=w0(i,1)+epsflt*(w(i,1)+wm(i,1)-2.0_r8  *w0(i,1))
 6464.  1                           END IF
 6465.  1                           IF(w0    (i,2) > 0.0_r8 ) THEN
 6466.  1                              w0(i,2)=w0(i,2)+epsflt*(w(i,2)+wm(i,2)-2.0_r8  *w0(i,2))
 6467.  1                           END IF
 6468.  1                           IF(w0    (i,3) > 0.0_r8 ) THEN
 6469.  1                              w0(i,3)=w0(i,3)+epsflt*(w(i,3)+wm(i,3)-2.0_r8  *w0(i,3))
 6470.  1                           END IF
 6471.  1                           IF(capac0(i,1) > 0.0_r8 ) THEN
 6472.  1                              capac0(i,1)=capac0(i,1) &
 6473.  1                                   +epsflt*(capac(i,1)+capacm(i,1)-2.0_r8*capac0(i,1))
 6474.  1                           END IF
 6475.  1                           IF(capac0(i,2) > 0.0_r8 ) THEN
 6476.  1                              capac0(i,2)=capac0(i,2) &
 6477.  1                                   +epsflt*(capac(i,2)+capacm(i,2)-2.0_r8*capac0(i,2))
 6478.  1                           END IF
 6479.  1------------>           END DO
 6480.  1------------<           DO i = 1, nmax
 6481.  1 A---------<>              tdm   (i)  =td0   (i)
 6482.  1                           tgm   (i)  =tg0   (i)
 6483.  1 A---------<>              tcm   (i)  =tc0   (i)
 6484.  1 A---------<>              tmm   (i)  =tm0   (i)
 6485.  1 A---------<>              qmm   (i)  =qm0   (i)
 6486.  1                           wm    (i,1)=w0    (i,1)
 6487.  1                           wm    (i,2)=w0    (i,2)
 6488.  1                           wm    (i,3)=w0    (i,3)
 6489.  1                           capacm(i,1)=capac0(i,1)
 6490.  1                           capacm(i,2)=capac0(i,2)
 6491.  1                           IF (capacm(i,2) > 0.0_r8) tgm(i)=MIN(tgm(i),273.06_r8)
 6492.  1------------>           END DO
 6493.  1------------<           DO i = 1, nmax
 6494.  1 A---------<>              td0   (i)  =td    (i)
 6495.  1                           tg0   (i)  =tg    (i)
 6496.  1 A---------<>              tc0   (i)  =tc    (i)
 6497.  1 A---------<>              tm0   (i)  =tm    (i)
 6498.  1 A---------<>              qm0   (i)  =qm    (i)
 6499.  1                           w0    (i,1)=w     (i,1)
 6500.  1                           w0    (i,2)=w     (i,2)
 6501.  1                           w0    (i,3)=w     (i,3)
 6502.  1                           capac0(i,1)=capac (i,1)
 6503.  1                           capac0(i,2)=capac (i,2)
 6504.  1                           IF (capac0(i,2) > 0.0_r8 .AND. tg0(i) > 273.16_r8) THEN
 6505.  1                              nc=0
 6506.  1                              ii=0
 6507.  1                              !DO ii = 1, ncols
 6508.  1                              !   IF (imask(ii) >= 1) nc=nc+1
 6509.  1                              !   IF (nc == i) EXIT
 6510.  1                              !END DO
 6511.  1                              WRITE(UNIT=nfprt,FMT=200)ii,latitu,i,capac0(i,2),tg0(i)
 6512.  1                           END IF
 6513.  1------------>           END DO
 6514.                        END IF
 6515.                     ELSE
 6516.  1------------<        DO i = 1, nmax
 6517.  1 A---------<>           tdm   (i)  =td   (i)
 6518.  1                        tgm   (i)  =tg   (i)
 6519.  1 A---------<>           tcm   (i)  =tc   (i)
 6520.  1 A---------<>           tmm   (i)  =tm   (i)
 6521.  1 A---------<>           qmm   (i)  =qm   (i)
 6522.  1                        wm    (i,1)=w    (i,1)
 6523.  1                        wm    (i,2)=w    (i,2)
 6524.  1                        wm    (i,3)=w    (i,3)
 6525.  1                        capacm(i,1)=capac(i,1)
 6526.  1                        capacm(i,2)=capac(i,2)
 6527.  1                        IF (capacm(i,2) > 0.0_r8 .AND. tgm(i) > 273.16_r8) THEN
 6528.  1                           nc=0
 6529.  1                           ii=0
 6530.  1                           !DO ii = 1, ncols
 6531.  1                           !   IF (imask(ii) >= 1) nc=nc+1
 6532.  1                           !   IF (nc == i) EXIT
 6533.  1                           !END DO
 6534.  1                           WRITE(UNIT=nfprt,FMT=650)ii,latitu,i,capacm(i,2),tgm(i)
 6535.  1                        END IF
 6536.  1------------>        END DO
 6537.  Vr4----------<        DO i = 1, nmax
 6538.  Vr4 A-------<>           td0   (i)  =td   (i)
 6539.  Vr4 A-------<>           tg0   (i)  =tg   (i)
 6540.  Vr4 A-------<>           tc0   (i)  =tc   (i)
 6541.  Vr4 A-------<>           tm0   (i)  =tm   (i)
 6542.  Vr4 A-------<>           qm0   (i)  =qm   (i)
 6543.  Vr4                      w0    (i,1)=w    (i,1)
 6544.  Vr4                      w0    (i,2)=w    (i,2)
 6545.  Vr4                      w0    (i,3)=w    (i,3)
 6546.  Vr4                      capac0(i,1)=capac(i,1)
 6547.  Vr4                      capac0(i,2)=capac(i,2)
 6548.  Vr4---------->        END DO
 6549.                     END IF
 6550.                 200 FORMAT(' CAPAC0 AND TG0 NOT CONSISTENT AT I,J,IS=',3I4, &
 6551.                          ' CAPAC=',G16.8,' TG=',G16.8)
 6552.                 650 FORMAT(' CAPACM AND TGM NOT CONSISTENT AT I,J,IS=',3I4, &
 6553.                          ' CAPAC=',G16.8,' TG=',G16.8)
 6554.                   END SUBROUTINE sextrp
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 6554 
  Local variable "NC" is assigned a value but never used.

 6555.                 
 6556.                   SUBROUTINE Albedo( &
 6557.                             ncols     ,month2      ,nmax      ,itype      , &
 6558.                             tc        ,tg          ,tm        ,qm         , &
 6559.                             td        ,capac       ,w         ,tcm        , &
 6560.                             tgm       ,tmm         ,qmm       ,tdm        , &
 6561.                             capacm    ,wm          ,satcap    ,extk       , &
 6562.                             radfac    ,closs       ,gloss     ,thermk     , &
 6563.                             p1f       ,p2f         ,zlwup     ,salb       , &
 6564.                             tgeff     ,cosz        ,nsx       ,latco      , &
 6565.                             imask     ,avisb       ,avisd     ,anirb      , &
 6566.                             anird     ,tsea        ,zenith)
 6567.                    IMPLICIT NONE
 6568.                    INTEGER, INTENT(IN   ) :: ncols
 6569.                    INTEGER, INTENT(INOUT) :: month2     (ncols)
 6570.                    INTEGER, INTENT(IN   ) :: nmax
 6571.                    INTEGER, INTENT(IN   ) :: itype      (ncols)
 6572.                    REAL(KIND=r8),INTENT(OUT  ) :: tc	(ncols)
 6573.                    REAL(KIND=r8),INTENT(OUT  ) :: tg	(ncols)
 6574.                    REAL(KIND=r8),INTENT(OUT  ) :: tm    (ncols)
 6575.                    REAL(KIND=r8),INTENT(OUT  ) :: qm    (ncols)
 6576.                    REAL(KIND=r8),INTENT(OUT  ) :: td    (ncols)
 6577.                    REAL(KIND=r8),INTENT(OUT  ) :: capac (ncols,2)
 6578.                    REAL(KIND=r8),INTENT(OUT  ) :: w     (ncols,3)
 6579.                    REAL(KIND=r8),INTENT(IN   ) :: tcm   (ncols)
 6580.                    REAL(KIND=r8),INTENT(IN   ) :: tgm   (ncols)
 6581.                    REAL(KIND=r8),INTENT(IN   ) :: tmm   (ncols)
 6582.                    REAL(KIND=r8),INTENT(IN   ) :: qmm   (ncols)
 6583.                    REAL(KIND=r8),INTENT(IN   ) :: tdm   (ncols)
 6584.                    REAL(KIND=r8),INTENT(IN   ) :: capacm(ncols,2)
 6585.                    REAL(KIND=r8),INTENT(IN   ) :: wm    (ncols,3)
 6586.                    REAL(KIND=r8),INTENT(INOUT) :: satcap(ncols,icg)
 6587.                    REAL(KIND=r8),INTENT(INOUT) :: extk  (ncols,icg,iwv,ibd)
 6588.                    REAL(KIND=r8),INTENT(INOUT) :: radfac(ncols,icg,iwv,ibd)
 6589.                    REAL(KIND=r8),INTENT(INOUT) :: closs (ncols)
 6590.                    REAL(KIND=r8),INTENT(INOUT) :: gloss (ncols)
 6591.                    REAL(KIND=r8),INTENT(INOUT) :: thermk(ncols)
 6592.                    REAL(KIND=r8),INTENT(INOUT) :: p1f   (ncols)
 6593.                    REAL(KIND=r8),INTENT(INOUT) :: p2f   (ncols)
 6594.                    REAL(KIND=r8),INTENT(INOUT) :: zlwup (ncols)
 6595.                    REAL(KIND=r8),INTENT(INOUT) :: salb  (ncols,2,2)
 6596.                    REAL(KIND=r8),INTENT(INOUT) :: tgeff (ncols)
 6597.                    REAL(KIND=r8),INTENT(IN   ) :: cosz  (ncols)
 6598.                    INTEGER      ,INTENT(IN   ) :: nsx   (ncols)
 6599.                    INTEGER      ,INTENT(IN   ) :: latco
 6600.                    INTEGER(KIND=i8),INTENT(IN) :: imask (ncols)
 6601.                    REAL(KIND=r8),INTENT(OUT  ) :: avisb (ncols)
 6602.                    REAL(KIND=r8),INTENT(OUT  ) :: avisd (ncols)
 6603.                    REAL(KIND=r8),INTENT(OUT  ) :: anirb (ncols)
 6604.                    REAL(KIND=r8),INTENT(OUT  ) :: anird (ncols)
 6605.                    REAL(KIND=r8),INTENT(IN   ) :: tsea  (ncols)
 6606.                    REAL(KIND=r8),INTENT(IN   ) :: zenith(ncols)
 6607.                    INTEGER       :: i
 6608.                    REAL(KIND=r8) :: ocealb
 6609.                    REAL(KIND=r8) :: f
 6610.                    INTEGER       :: ncount
 6611.                    IF(nmax.GE.1) THEN
 6612.                 
 6613.  Vr4----------<        DO i=1,nmax
 6614.  Vr4 A-------<>           tm      (i)    = tmm   (i)
 6615.  Vr4 A-------<>           qm      (i)    = qmm   (i)
 6616.  Vr4 A-------<>           td      (i)    = tdm   (i)
 6617.  Vr4 A-------<>           tg      (i)    = tgm   (i)
 6618.  Vr4 A-------<>           tc      (i)    = tcm   (i)
 6619.  Vr4                      capac   (i,1)  = capacm(i,1)
 6620.  Vr4                      capac   (i,2)  = capacm(i,2)
 6621.  Vr4                      w       (i,1)  = wm    (i,1)
 6622.  Vr4                      w       (i,2)  = wm    (i,2)
 6623.  Vr4                      w       (i,3)  = wm    (i,3)
 6624.  Vr4---------->        END DO
 6625.                 
 6626.                        CALL radalb ( &
 6627.                             nmax              ,month2(1:nmax)      ,nmax                ,itype(1:nmax)       , &
 6628.                             tc(1:nmax)        ,tg(1:nmax)          ,capac(1:nmax,:)     ,satcap(1:nmax,:)    , &
 6629.                             extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)       ,gloss(1:nmax)       , &
 6630.                             thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)         ,zlwup(1:nmax)       , &
 6631.                             salb(1:nmax,:,:)  ,tgeff(1:nmax)       ,cosz(1:nmax)        ,nsx(1:nmax)         , &
 6632.                             latco     )
 6633.                    END IF
 6634.                    ncount=0
 6635.  1------------<    DO i=1,ncols
 6636.  1                    IF(imask(i).GE.1_i8) THEN
 6637.  1                       ncount=ncount+1
 6638.  1                       avisb(i)=salb(ncount,1,1)
 6639.  1                       avisd(i)=salb(ncount,1,2)
 6640.  1                       anirb(i)=salb(ncount,2,1)
 6641.  1                       anird(i)=salb(ncount,2,2)
 6642.  1                    ELSE IF(ABS(tsea(i)).GE.271.16e0_r8 +0.01e0_r8) THEN
 6643.  1                       f=MAX(zenith(i),0.0e0_r8 )
 6644.  1                       ocealb=0.12347e0_r8 +f*(0.34667e0_r8+f*(-1.7485e0_r8 + &
 6645.  1                            f*(2.04630e0_r8 -0.74839e0_r8 *f)))
 6646.  1                       avisb(i)=ocealb
 6647.  1                       avisd(i)=oceald
 6648.  1                       anirb(i)=ocealb
 6649.  1                       anird(i)=oceald
 6650.  1                    ELSE
 6651.  1                       avisb(i)=icealv
 6652.  1                       avisd(i)=icealv
 6653.  1                       anirb(i)=icealn
 6654.  1                       anird(i)=icealn
 6655.  1                    END IF
 6656.  1------------>    END DO
 6657.                 
 6658.                   END SUBROUTINE Albedo
 6659.                   
 6660.                   ! radalb :surface albedos via two stream approximation (direct and diffuse).
 6661.                 
 6662.                 
 6663.                 
 6664.                   SUBROUTINE radalb ( &
 6665.                             ncols             ,mon                 ,nmax                ,itype               , &
 6666.                             tc                ,tg                  ,capac               ,satcap              , &
 6667.                             extk              ,radfac              ,closs               ,gloss               , &
 6668.                             thermk            ,p1f                 ,p2f                 ,zlwup               , &
 6669.                             salb              ,tgeff               ,cosz                ,nsx                 , &
 6670.                             latitu )
 6671.                     !
 6672.                     !
 6673.                     ! reference  : a simple biosphere model (xue et al 1991)
 6674.                     !-----------------------------------------------------------------------
 6675.                     !     *** indices ***
 6676.                     !   cg =1...canopy
 6677.                     !   cg =2...ground cover
 6678.                     !   vn =1...visible      (0.0-0.7 micron)
 6679.                     !   vn =2...near-infrared(0.7-3.0 micron)
 6680.                     !   bd =1...beam
 6681.                     !   bd =2...diffuse
 6682.                     !   ld =1...live leaves
 6683.                     !   ld =2...dead leaves
 6684.                     !   vnt=1...visible      (0.0-0.7 micron)
 6685.                     !   vnt=2...near-infrared(0.7-3.0 micron)
 6686.                     !   vnt=3...thermal
 6687.                     !-----------------------------------------------------------------------
 6688.                     !        input parameters
 6689.                     !-----------------------------------------------------------------------
 6690.                     !   zlt(cg)..........leaf area index
 6691.                     !   z1...............bottom height of canopy
 6692.                     !   z2...............top    height of canopy
 6693.                     !   ref (cg,vnt,ld)..reflectance   of vegetation
 6694.                     !   tran(cg,vnt,ld)..transmittance of vegetation
 6695.                     !   green (cg).......fraction of green leaf area
 6696.                     !   chil  (cg).......leaf orientation factor
 6697.                     !   vcover(cg).......fraction of vegetation cover
 6698.                     !   soref (vnt)......ground albedo
 6699.                     !   chil  (cg).......leaf orientation factor
 6700.                     !   cosz.............cosine of solar zenith angle
 6701.                     !   tf...............water freezing temperature
 6702.                     !   tg...............ground temperature
 6703.                     !   tc...............canopy leaf temperature
 6704.                     !   capac(cg)........water store capacity of leaves
 6705.                     !   stefan...........stefan-boltsman constant
 6706.                     !-----------------------------------------------------------------------
 6707.                     !     in-subr. parameters
 6708.                     !-----------------------------------------------------------------------
 6709.                     !   albedo(cg,vnt,bd)
 6710.                     !-----------------------------------------------------------------------
 6711.                     !       output parameters
 6712.                     !-----------------------------------------------------------------------
 6713.                     !   extk(cg,vnt,bd)..extinction coefficient
 6714.                     !                    passed to subr.raduse through radsave
 6715.                     !   radfac(cg,vn,bd).fractions of downward solar radiation at surface
 6716.                     !                    passed to subr.raduse
 6717.                     !   salb(vn,bd)......surface albedo
 6718.                     !                    passed to subr.spmrad
 6719.                     !   tgeff............effective ground temperature
 6720.                     !                    passed to subr.spmrad
 6721.                     !   thermk...........canopy emissivity
 6722.                     !   radsav(1)........beam    extinction coefficient (par)
 6723.                     !   radsav(2)........diffuse extinction coefficient (par)
 6724.                     !   closs............radiation loss from canopy
 6725.                     !   gloss............radiation loss from ground
 6726.                     !-----------------------------------------------------------------------
 6727.                     !
 6728.                     !   ityp.......Numero das classes de solo 13
 6729.                     !   imon.......Numero maximo de meses no ano (12)
 6730.                     !   icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 6731.                     !   iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 6732.                     !              proximo, iwv=3 infravermelho termal
 6733.                     !   ibd........Estado da vegetacao ibd=1 verde / ibd=2 seco
 6734.                     !   ncols......Number of grid points on a gaussian latitude circle
 6735.                     !   mon........Number of month at year (1-12)
 6736.                     !   nmax
 6737.                     !   itype......Classe de textura do solo
 6738.                     !   satcap.....saturation liquid water capacity         (m)
 6739.                     !   p1f........
 6740.                     !   p2f........
 6741.                     !   zlwup......zlwup(i)= stefan*( fac1(i)*tc4(i)+ &
 6742.                     !              (1.0  -vcover(i,1)*(1.0  -thermk(i)))*fac2(i)*tg4(i))
 6743.                     !   nsx........
 6744.                     !
 6745.                 
 6746.                     INTEGER, INTENT(IN   ) :: ncols
 6747.                     INTEGER, INTENT(INOUT) :: mon(ncols)
 6748.                     INTEGER, INTENT(IN   ) :: nmax
 6749.                     INTEGER, INTENT(IN   ) :: itype (ncols)
 6750.                     REAL(KIND=r8),    INTENT(IN   ) :: tc    (ncols)
 6751.                     REAL(KIND=r8),    INTENT(IN   ) :: tg    (ncols)
 6752.                     REAL(KIND=r8),    INTENT(IN   ) :: capac (ncols,2)
 6753.                     REAL(KIND=r8),    INTENT(INOUT  ) :: satcap(ncols,icg)
 6754.                     REAL(KIND=r8),    INTENT(INOUT  ) :: extk  (ncols,icg,iwv,ibd)
 6755.                     REAL(KIND=r8),    INTENT(INOUT  ) :: radfac(ncols,icg,iwv,ibd)
 6756.                     REAL(KIND=r8),    INTENT(INOUT  ) :: closs (ncols)
 6757.                     REAL(KIND=r8),    INTENT(INOUT  ) :: gloss (ncols)
 6758.                     REAL(KIND=r8),    INTENT(INOUT  ) :: thermk(ncols)
 6759.                     REAL(KIND=r8),    INTENT(INOUT  ) :: p1f   (ncols)
 6760.                     REAL(KIND=r8),    INTENT(INOUT  ) :: p2f   (ncols)
 6761.                     REAL(KIND=r8),    INTENT(INOUT  ) :: zlwup (ncols)
 6762.                     REAL(KIND=r8),    INTENT(INOUT  ) :: salb  (ncols,2,2)
 6763.                     REAL(KIND=r8),    INTENT(INOUT  ) :: tgeff (ncols)
 6764.                     REAL(KIND=r8),    INTENT(IN   ) :: cosz  (ncols)
 6765.                     INTEGER, INTENT(IN   ) :: nsx  (ncols)
 6766.                     INTEGER, INTENT(IN   ) :: latitu
 6767.                 
 6768.                     REAL(KIND=r8)   :: zlt2    (ncols,icg)
 6769.                     REAL(KIND=r8)   :: vcover  (ncols,icg)
 6770.                 
 6771.                 
 6772.                     REAL(KIND=r8) :: f     (ncols)
 6773.                     REAL(KIND=r8) :: deltg (ncols)
 6774.                     REAL(KIND=r8) :: fmelt (ncols)
 6775.                     REAL(KIND=r8) :: depcov(ncols)
 6776.                     REAL(KIND=r8) :: scov  (ncols)
 6777.                     REAL(KIND=r8) :: scov2 (ncols)
 6778.                     REAL(KIND=r8) :: tc4   (ncols)
 6779.                     REAL(KIND=r8) :: tg4   (ncols)
 6780.                     REAL(KIND=r8) :: fac1  (ncols)
 6781.                     REAL(KIND=r8) :: fac2  (ncols)
 6782.                     REAL(KIND=r8) :: zkat  (ncols)
 6783.                 
 6784.                     INTEGER, PARAMETER :: nk=3
 6785.                     REAL(KIND=r8)    :: temp(nmax,18)
 6786.                     REAL(KIND=r8)    :: xmi1(12,nk)
 6787.                     INTEGER :: i
 6788.                     INTEGER :: ntyp(ncols)
 6789.                     INTEGER :: monx(ncols)
 6790.                     INTEGER :: jj
 6791.                     INTEGER :: i1
 6792.                     INTEGER :: ml(nmax)
 6793.                     INTEGER :: k1
 6794.                     INTEGER :: k2
 6795.                     INTEGER :: ik
 6796.                     REAL(KIND=r8)    :: capaci
 6797.                     !    REAL(KIND=r8)    :: xf
 6798.                     !    REAL(KIND=r8)    :: xf2
 6799.                     !    REAL(KIND=r8)    :: sc1
 6800.                     !    REAL(KIND=r8)    :: sc2
 6801.                     REAL(KIND=r8)    :: xm1
 6802.                     !    REAL(KIND=r8)    :: xm2
 6803.                     REAL(KIND=r8)    :: xtm1
 6804.                     REAL(KIND=r8)    :: xtm2
 6805.                     REAL(KIND=r8)    :: stbi
 6806.                     LOGICAL :: flagtyp(nmax)
 6807.                     LOGICAL :: flagscov(nmax)
 6808.                 
 6809.  Vr4----------<     DO i = 1, nmax
 6810.  Vr4            
 6811.  Vr4                   zlt2       (i,1)   =  zlt_gbl    (i,latitu,1) !zlt   (itype(i),mon(i),1)
 6812.  Vr4                   zlt2       (i,2)   =  zlt_gbl    (i,latitu,2) !zlt   (itype(i),mon(i),2)
 6813.  Vr4                   vcover     (i,1)   =  vcover_gbl (i,latitu,1) !xcover(itype(i),mon(i),1)
 6814.  Vr4                   vcover     (i,2)   =  vcover_gbl (i,latitu,2) !xcover(itype(i),mon(i),2)
 6815.  Vr4                   f(i)= MAX ( cosz(i), 0.01746_r8  )
 6816.  Vr4---------->     END DO
 6817.                     !
 6818.                     !     maximum water storage values.
 6819.                     !
 6820.  f------------<     DO i = 1, nmax
 6821.  f                     deltg(i)=tf-tg(i)
 6822.  f                     fmelt(i)=1.0_r8
 6823.  f                     IF (ABS(deltg(i)) < 0.5_r8 .AND. deltg(i) > 0.0_r8) THEN
 6824.  f                        fmelt(i)=0.6_r8
 6825.  f                     END IF
 6826.  f------------>     END DO
 6827.  A-----------<>     ntyp=itype
 6828.  1------------<     DO i = 1, nmax
 6829.  1                     !ntyp=itype(i)
 6830.  1                     satcap(i,1)=zlt2(i,1)*1.0e-4_r8
 6831.  1                     satcap(i,2)=zlt2(i,2)*1.0e-4_r8
 6832.  1                     depcov(i  )=MAX(0.0_r8  ,capac(i,2)*5.0_r8  -z1(ntyp(i),mon(i)))
 6833.  1                     depcov(i  )=MIN(depcov(i),(z2(ntyp(i),mon(i))-z1(ntyp(i),mon(i)))*0.95_r8  )
 6834.  1                     satcap(i,1)=satcap(i,1) &
 6835.  1                          *(1.0_r8  -depcov(i)/(z2(ntyp(i),mon(i))-z1(ntyp(i),mon(i))))
 6836.  1------------>     END DO
 6837.                 
 6838.  1------------<     DO i = 1, nmax
 6839.  1                     scov(i)=0.0_r8
 6840.  1                     IF (tc(i) <= tf) THEN
 6841.  1                        scov(i)= MIN( 0.5_r8  , capac(i,1)/satcap(i,1))
 6842.  1                     END IF
 6843.  1------------>     END DO
 6844.                     capaci=1.0_r8  /0.004_r8
 6845.  f------------<     DO i = 1, nmax
 6846.  f                     IF (tg(i) > tf) THEN
 6847.  f                        scov2(i)=0.0_r8
 6848.  f                     ELSE
 6849.  f                        scov2(i)=MIN( 1.0_r8  , capac(i,2)*capaci)
 6850.  f                     END IF
 6851.  f------------>     END DO
 6852.                     !
 6853.                     !     terms which multiply incoming short wave fluxes
 6854.                     !     to give absorption of radiation by canopy and ground
 6855.                     !
 6856.  A-----------<>     monx = mon
 6857.  r8-----------<     DO i = 1, nmax
 6858.  r8                    IF (fmelt(i) == 1.0_r8) THEN
 6859.  r8                       ml(i) = 1
 6860.  r8                    ELSE
 6861.  r8                       ml(i) = 2
 6862.  r8                    END IF
 6863.  r8----------->     END DO
 6864.  A-----------<>     ntyp=itype
 6865.                 
 6866.  1------------<     DO i = 1, nmax
 6867.  1                     mon(i) = monx(i)
 6868.  1                     flagtyp(i) = .TRUE.
 6869.  1                     IF (ntyp(i) == 13) ntyp(i) = 11
 6870.  1                     IF (ntyp(i) == 12 .AND. nsx(i) > 0) THEN
 6871.  1                        ntyp(i) = 13
 6872.  1                        mon(i) = nsx(i)
 6873.  1                        IF (nsx(i) == 1 .AND. (monx(i) >= 9 .AND. monx(i) <= 11)) mon(i) = 7
 6874.  1                        flagtyp(i) = .FALSE.
 6875.  1                     END IF
 6876.  1------------>     END DO
 6877.  b------------<     DO jj = 1, nk
 6878.  b b----------<        DO i=1, nmax
 6879.  b b                      xmi1(mon(i),jj) = xmiu(mon(i),jj)
 6880.  b b---------->        END DO
 6881.  b------------>     END DO
 6882.  b------------<     DO jj = 1, nk
 6883.  b b----------<        DO i=1, nmax
 6884.  b b                      IF (.NOT.flagtyp(i))xmi1(mon(i),jj) = xmiw(mon(i),jj)
 6885.  b b---------->        END DO
 6886.  b------------>     END DO
 6887.                     !
 6888.                     !        snow free case
 6889.                     !
 6890.  r8-----------<     DO i = 1, nmax
 6891.  r8                    flagscov(i) = scov(i) < 0.025_r8 .AND. scov2(i) < 0.025_r8
 6892.  r8----------->     END DO
 6893.                 
 6894.  1------------<     DO i1 = 1, 9
 6895.  1 2----------<        DO i = 1, nmax
 6896.  1 2                      IF (flagscov(i)) THEN
 6897.  1 2                         temp(i,i1) = cledir(ntyp(i),mon(i),i1,1) + cledir(ntyp(i),mon(i),i1,2) &
 6898.  1 2                              * f(i) + cledir(ntyp(i),mon(i),i1,3) * (f(i)*f(i))
 6899.  1 2                         temp(i,i1+9) = cledfu(ntyp(i),mon(i),i1)
 6900.  1 2                      END IF
 6901.  1 2---------->        END DO
 6902.  1------------>     END DO
 6903.                     flagscov = .NOT. flagscov
 6904.  1------------<     DO i1 = 1, 9
 6905.  1 2----------<        DO i = 1, nmax
 6906.  1 2                      IF (flagscov(i)) THEN
 6907.  1 2                         !
 6908.  1 2                         !     with snow cover
 6909.  1 2                         !
 6910.  1 2                         temp(i,i1) = cedir(ntyp(i),mon(i),i1,1) + f(i) * &
 6911.  1 2                              cedir(ntyp(i),mon(i),i1,2) + cedir(ntyp(i),mon(i),i1,3) * (f(i)*f(i))
 6912.  1 2                         temp(i,i1+9) = cedfu(ntyp(i),mon(i),i1)
 6913.  1 2                      END IF
 6914.  1 2---------->        END DO
 6915.  1------------>     END DO
 6916.  b------------<     DO i1 = 1, 6
 6917.  b b----------<        DO i = 1, nmax
 6918.  b b                      IF (flagscov(i) .AND. ntyp(i) == 11) THEN
 6919.  b b                         !sc2 = scov2(i) * scov2(i)
 6920.  b b                         !sc1 = scov2(i)
 6921.  b b                         temp(i,i1)=cedir2(ml(i),ntyp(i),mon(i),i1,nk,1)+ &
 6922.  b b                              cedir2(ml(i),ntyp(i),mon(i),i1,nk,2) &
 6923.  b b                              *scov2(i) + cedir2(ml(i),ntyp(i),mon(i),i1,nk,3) *(scov2(i) * scov2(i)) + temp(i,i1)
 6924.  b b                         temp(i,i1+9) = cedfu2(ml(i),ntyp(i),mon(i),i1,1) +  &
 6925.  b b                              cedfu2(ml(i),ntyp(i),mon(i),i1,2) &
 6926.  b b                              * scov2(i) + cedfu2(ml(i),ntyp(i),mon(i),i1,3) * (scov2(i) * scov2(i)) + temp(i,i1+9)
 6927.  b b                      END IF
 6928.  b b---------->        END DO
 6929.  b------------>     END DO
 6930.  1------------<     DO i = 1, nmax
 6931.  1                     IF (flagscov(i) .AND. ntyp(i) /= 11) THEN
 6932.  1                        k2 = 1
 6933.  1                        k1 = 2
 6934.  1 2----------<           DO ik = nk, 1, -1
 6935.  1 2                         IF (f(i) >= xmi1(mon(i),ik)) THEN
 6936.  1 2                            CONTINUE
 6937.  1 2                         ELSE
 6938.  1 2                            k1 = ik + 1
 6939.  1 2                            k2 = ik
 6940.  1 2                            EXIT
 6941.  1 2                         END IF
 6942.  1 2---------->           END DO
 6943.  1                        !xm2 = xmi1(mon(i),k2)
 6944.  1                        IF (k1 <= nk) xm1 = xmi1(mon(i),k1)
 6945.  1                        !
 6946.  1                        !     snow cover at 1st layer
 6947.  1                        !
 6948.  1                        IF (scov(i) > 0.025_r8) THEN
 6949.  1                           !sc2 = scov(i) * scov(i)
 6950.  1                           !sc1 = scov(i)
 6951.  1                           IF (k2 >= nk .OR. k2 <= 1) THEN
 6952.  1 Vpw--------<                 DO i1 = 1, 6
 6953.  1 Vpw                             temp(i,i1)=cedir1(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6954.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,2)*scov(i) + &
 6955.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,3)*(scov(i) * scov(i)) + temp(i,i1)
 6956.  1 Vpw-------->                 END DO
 6957.  1                           ELSE
 6958.  1 Vpw--------<                 DO i1 = 1, 6
 6959.  1 Vpw                             xtm1=cedir1(ml(i),ntyp(i),mon(i),i1,k1,1)+ &
 6960.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k1,2)*scov(i) + &
 6961.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k1,3)*(scov(i) * scov(i))
 6962.  1 Vpw                             xtm2=cedir1(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6963.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,2)*scov(i)+ &
 6964.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,3) *(scov(i) * scov(i))
 6965.  1 Vpw                             temp(i,i1) = (xtm1*((xmi1(mon(i),k2))-f(i))+xtm2*(f(i)-xm1))/((xmi1(mon(i),k2))-xm1) &
 6966.  1 Vpw                                  + temp(i,i1)
 6967.  1 Vpw-------->                 END DO
 6968.  1                           END IF
 6969.  1 Vpw--------<              DO i1 = 1, 6
 6970.  1 Vpw                          temp(i,i1+9) = cedfu1(ml(i),ntyp(i),mon(i),i1,1) +  &
 6971.  1 Vpw                               cedfu1(ml(i),ntyp(i),mon(i),i1,2)*scov(i) + &
 6972.  1 Vpw                               cedfu1(ml(i),ntyp(i),mon(i),i1,3) * (scov(i) * scov(i)) + temp(i,i1+9)
 6973.  1 Vpw-------->              END DO
 6974.  1                        END IF
 6975.  1                        !
 6976.  1                        !     snow cover on ground
 6977.  1                        !
 6978.  1                        IF (scov2(i) > 0.025_r8) THEN
 6979.  1                           !sc2 = scov2(i) * scov2(i)
 6980.  1                           !sc1 = scov2(i)
 6981.  1                           IF (k2 >= nk .OR. k2 <= 1) THEN
 6982.  1 Vpw--------<                 DO i1 = 1, 6
 6983.  1 Vpw                             temp(i,i1)=cedir2(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6984.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,2)*scov2(i) +  &
 6985.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,3)*(scov2(i) * scov2(i)) + temp(i,i1)
 6986.  1 Vpw-------->                 END DO
 6987.  1                           ELSE
 6988.  1 Vpw--------<                 DO i1 = 1, 6
 6989.  1 Vpw                             xtm1=cedir2(ml(i),ntyp(i),mon(i),i1,k1,1)+ &
 6990.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k1,2)*scov2(i) + &
 6991.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k1,3) *(scov2(i) * scov2(i))
 6992.  1 Vpw                             xtm2=cedir2(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6993.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,2)*scov2(i)+ &
 6994.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,3) *(scov2(i) * scov2(i))
 6995.  1 Vpw                             temp(i,i1) = (xtm1*((xmi1(mon(i),k2))-f(i))+xtm2*(f(i)-xm1))/((xmi1(mon(i),k2))-xm1) &
 6996.  1 Vpw                                  + temp(i,i1)
 6997.  1 Vpw-------->                 END DO
 6998.  1                           END IF
 6999.  1 Vpw--------<              DO i1 = 1, 6
 7000.  1 Vpw                          temp(i,i1+9) = cedfu2(ml(i),ntyp(i),mon(i),i1,1) +  &
 7001.  1 Vpw                               cedfu2(ml(i),ntyp(i),mon(i),i1,2)* scov2(i) +  &
 7002.  1 Vpw                               cedfu2(ml(i),ntyp(i),mon(i),i1,3) * (scov2(i) * scov2(i)) + temp(i,i1+9)
 7003.  1 Vpw-------->              END DO
 7004.  1                        END IF
 7005.  1                     END IF
 7006.  1------------>     END DO
 7007.                     !500    CONTINUE
 7008.  1------------<     DO i = 1, nmax
 7009.  1                     radfac(i,1,1,2) = temp(i,10)
 7010.  1                     radfac(i,1,2,2) = temp(i,11)
 7011.  1                     radfac(i,2,1,2) = temp(i,12)
 7012.  1                     radfac(i,2,2,2) = temp(i,13)
 7013.  1                     salb(i,1,2) = temp(i,14)
 7014.  1                     salb(i,2,2) = temp(i,15)
 7015.  1                     p2f(i) =  temp(i,16)
 7016.  1                     extk(i,1,1,2) = temp(i,17)
 7017.  1                     extk(i,2,1,2) = temp(i,18)
 7018.  1                     radfac(i,1,1,1) = temp(i,1)
 7019.  1                     radfac(i,1,2,1) = temp(i,2)
 7020.  1                     radfac(i,2,1,1) = temp(i,3)
 7021.  1                     radfac(i,2,2,1) = temp(i,4)
 7022.  1                     salb(i,1,1) = temp(i,5)
 7023.  1                     salb(i,2,1) = temp(i,6)
 7024.  1                     p1f(i) =  temp(i,7)
 7025.  1                     extk(i,1,1,1) = temp(i,8) / f(i)
 7026.  1                     extk(i,2,1,1) = temp(i,9) / f(i)
 7027.  1                     extk(i,1,3,1) = cether(ntyp(i),mon(i),1)
 7028.  1                     extk(i,1,3,2) = cether(ntyp(i),mon(i),2)
 7029.  1                     extk(i,2,3,1) = cether(ntyp(i),mon(i),1)
 7030.  1                     extk(i,2,3,2) = cether(ntyp(i),mon(i),2)
 7031.  1------------>     END DO
 7032.  A-----------<>     mon = monx
 7033.                     !
 7034.                     !     long-wave flux terms from canopy and ground
 7035.                     !
 7036.                     stbi=1.0_r8  /stefan
 7037.  Vr4----------<     DO  i = 1, nmax
 7038.  Vr4                   tc4(i)=tc(i)*tc(i)*tc(i)*tc(i)
 7039.  Vr4                   tg4(i)=tg(i)*tg(i)*tg(i)*tg(i)
 7040.  Vr4                   !ntyp=itype(i)
 7041.  Vr4                   zkat(i)=extk(i,1,3,2)*zlt2(i,1)/vcover(i,1)
 7042.  Vr4                   zkat(i)=MAX(expcut  ,-zkat(i) )
 7043.  Vr4                   zkat(i)=MIN(-10.0e-5_r8, zkat(i) )
 7044.  Vr4                   thermk(i)=EXP(zkat(i))
 7045.  Vr4                   fac1 (i)=vcover(i,1)*( 1.0_r8  -thermk(i) )
 7046.  Vr4                   fac2 (i)=1.0_r8
 7047.  Vr4                   closs(i)=2.0_r8  *fac1(i)*stefan*tc4(i)
 7048.  Vr4                   closs(i)=closs(i)-fac2(i)*fac1(i)*stefan*tg4(i)
 7049.  Vr4                   gloss(i)= fac2(i)*stefan*tg4(i)
 7050.  Vr4                   gloss(i)= gloss(i)-fac1(i)*fac2(i)*stefan*tc4(i)
 7051.  Vr4                   !
 7052.  Vr4                   !     effective surface radiative temperature ( tgeff )
 7053.  Vr4                   !
 7054.  Vr4                   zlwup(i) = stefan*( fac1(i)*tc4(i) + &
 7055.  Vr4                        (1.0_r8  - vcover(i,1) * (1.0_r8  -thermk(i)))*fac2(i)*tg4(i))
 7056.  Vr4                   tgeff(i)=SQRT ( SQRT (( zlwup(i)*stbi )))
 7057.  Vr4---------->     END DO
 7058.                   END SUBROUTINE radalb
 7059.                 
 7060.                 
 7061.                 
 7062.                   ! vegin  :reads vegetation morphoLOGICAL and physioLOGICAL data.
 7063.                 
 7064.                 
 7065.                 
 7066.                 
 7067.                   SUBROUTINE vegin ( si1   , sl1)
 7068.                 
 7069.                     REAL(KIND=r8),  INTENT(in   ) :: si1
 7070.                     REAL(KIND=r8),  INTENT(in   ) :: sl1
 7071.                     INTEGER, PARAMETER ::  njj=6,nj=9, nk=3,ild=2
 7072.                 
 7073.                    ! Vegetation and Soil Parameters
 7074.                 
 7075.                    REAL (KIND=r4) rstpar_r4(ityp,icg,iwv), &
 7076.                                   chil_r4(ityp,icg), &
 7077.                                   topt_r4(ityp,icg), &
 7078.                                   tll_r4(ityp,icg), &
 7079.                                   tu_r4(ityp,icg), &
 7080.                                   defac_r4(ityp,icg), &
 7081.                                   ph1_r4(ityp,icg), &
 7082.                                   ph2_r4(ityp,icg), &
 7083.                                   rootd_r4(ityp,icg), &
 7084.                                   bee_r4(ityp), &
 7085.                                   phsat_r4(ityp), &
 7086.                                   satco_r4(ityp), &
 7087.                                   poros_r4(ityp), &
 7088.                                   zdepth_r4(ityp,idp), &
 7089.                                   green_r4(ityp,imon,icg), &
 7090.                                   xcover_r4(ityp,imon,icg), &
 7091.                                   zlt_r4(ityp,imon,icg), &
 7092.                                   x0x_r4(ityp,imon),&
 7093.                                   xd_r4(ityp,imon), &
 7094.                                   z2_r4   (ityp,imon), &
 7095.                                   z1_r4   (ityp,imon), &
 7096.                                   xdc_r4  (ityp,imon), &
 7097.                                   xbc_r4  (ityp,imon)
 7098.                 		  
 7099.                     REAL(KIND=r4) :: cedfu_r4 (ityp,imon,nj), &
 7100.                                      cedir_r4 (ityp,imon,nj,3), &
 7101.                                      cedfu1_r4(2,ityp,imon,njj,3), &
 7102.                                      cedir1_r4(2,ityp,imon,njj,nk,3), &
 7103.                                      cedfu2_r4(2,ityp,imon,njj,3), &
 7104.                                      cedir2_r4(2,ityp,imon,njj,nk,3), &
 7105.                                      cledfu_r4(ityp,imon,nj), &
 7106.                                      cledir_r4(ityp,imon,nj,3), &
 7107.                                      cether_r4(ityp,imon,2), &
 7108.                                      xmiu_r4  (imon,nk), &
 7109.                                      xmiw_r4  (imon,nk)
 7110.                 
 7111.                     INTEGER :: jcg
 7112.                     INTEGER :: jmon
 7113.                     INTEGER :: jtyp
 7114.                     INTEGER :: iv
 7115.                     INTEGER :: im
 7116.                     INTEGER :: i
 7117.                     REAL(KIND=r8)    :: f0001
 7118.                     REAL(KIND=r8)    :: yhil (2)
 7119.                     REAL(KIND=r8)    :: dz
 7120.                     REAL(KIND=r8)    :: dzcut
 7121.                     REAL(KIND=r8)    :: tvsgm
 7122.                     INTEGER :: ierr
 7123.                     !
 7124.                     ALLOCATE(cedfu (13,12, 9)           )
 7125.                     ALLOCATE(cedir (13,12, 9,3)      )
 7126.                     ALLOCATE(cedfu1( 2,13,12,6,3)    )
 7127.                     ALLOCATE(cedir1( 2,13,12,6,3,3)  )
 7128.                     ALLOCATE(cedfu2( 2,13,12,6,3)    )
 7129.                     ALLOCATE(cedir2( 2,13,12,6,3,3)  )
 7130.                     ALLOCATE(cledfu(13,12, 9)           )
 7131.                     ALLOCATE(cledir(13,12, 9,3)      )
 7132.                     ALLOCATE(xmiu  (12, 3)           )
 7133.                     ALLOCATE(cether(13,12, 2)           )
 7134.                     ALLOCATE(xmiw  (12, 3)           )
 7135.                     !
 7136.                     ALLOCATE(ystpar(2,3)             )
 7137.                     ALLOCATE(yopt  (2)               )
 7138.                     ALLOCATE(yll   (2)               )
 7139.                     ALLOCATE(yu    (2)               )
 7140.                     ALLOCATE(yefac (2)               )
 7141.                     ALLOCATE(yh1   (2)               )
 7142.                     ALLOCATE(yh2   (2)               )
 7143.                     ALLOCATE(yootd (2)               )
 7144.                     ALLOCATE(yreen (12,2)            )
 7145.                     ALLOCATE(ycover(12,2)            )
 7146.                     ALLOCATE(ylt   (12,2)            )
 7147.                     !
 7148.                     !     vegetation and soil parameters
 7149.                     !
 7150.                     ALLOCATE(rstpar_fixed(ityp,icg,iwv)   )
 7151.                     ALLOCATE(chil_fixed  (ityp,icg)          )
 7152.                     ALLOCATE(topt_fixed  (ityp,icg)          )
 7153.                     ALLOCATE(tll_fixed   (ityp,icg)          )
 7154.                     ALLOCATE(tu_fixed    (ityp,icg)          )
 7155.                     ALLOCATE(defac_fixed (ityp,icg)          )
 7156.                     ALLOCATE(ph1_fixed   (ityp,icg)          )
 7157.                     ALLOCATE(ph2_fixed   (ityp,icg)          )
 7158.                     ALLOCATE(rootd (ityp,icg)          )
 7159.                     ALLOCATE(bee   (ityp)          )
 7160.                     ALLOCATE(phsat (ityp)          )
 7161.                     ALLOCATE(satco (ityp)          )
 7162.                     ALLOCATE(poros (ityp)          )
 7163.                     ALLOCATE(zdepth(ityp,idp)          )
 7164.                     ALLOCATE(green_fixed (ityp,imon,icg)  )
 7165.                     ALLOCATE(xcover_fixed(ityp,imon,icg)  )
 7166.                     ALLOCATE(zlt_fixed   (ityp,imon,icg)  )
 7167.                     ALLOCATE(x0x   (ityp,imon)      )
 7168.                     ALLOCATE(xd    (ityp,imon)      )
 7169.                     ALLOCATE(z2    (ityp,imon)      )
 7170.                     ALLOCATE(z1    (ityp,imon)      )
 7171.                     ALLOCATE(xdc   (ityp,imon)      )
 7172.                     ALLOCATE(xbc   (ityp,imon)      )
 7173.                     ALLOCATE(zlt   (ityp,imon,icg)  )
 7174.                     ALLOCATE(xcover  (ityp, imon, icg))
 7175.                     ALLOCATE(ph2    (ityp,icg))
 7176.                     ALLOCATE(ph1    (ityp,icg))
 7177.                     ALLOCATE(green(ityp,imon,icg))
 7178.                     ALLOCATE(defac(ityp,icg))
 7179.                     ALLOCATE(tu   (ityp,icg))
 7180.                     ALLOCATE(tll  (ityp,icg))
 7181.                     ALLOCATE(topt (ityp,icg))
 7182.                     ALLOCATE(rstpar(ityp,icg,iwv))
 7183.                     ALLOCATE(chil  (ityp,icg))
 7184.                 
 7185.                     OPEN(UNIT=nfsibd, FILE=TRIM(fNameSibVeg),FORM='UNFORMATTED', ACCESS='SEQUENTIAL',&
 7186.                          ACTION='READ',STATUS='OLD', IOSTAT=ierr)
 7187.                     IF (ierr /= 0) THEN
 7188.                        WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 7189.                             TRIM(fNameSibVeg), ierr
 7190.                        STOP "**(ERROR)**"
 7191.                     END IF
 7192.                 
 7193.                     OPEN (UNIT=nfalb, FILE=TRIM(fNameSibAlb),FORM='UNFORMATTED', ACCESS='SEQUENTIAL', &
 7194.                          ACTION='READ',STATUS='OLD', IOSTAT=ierr)
 7195.                     IF (ierr /= 0) THEN
 7196.                        WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 7197.                             TRIM(fNameSibAlb), ierr
 7198.                        STOP "**(ERROR)**"
 7199.                     END IF
 7200.                    
 7201.                     READ (UNIT=nfsibd) rstpar_r4, chil_r4, topt_r4, tll_r4, tu_r4, defac_r4, ph1_r4, ph2_r4, &
 7202.                                        rootd_r4, bee_r4, phsat_r4, satco_r4, poros_r4, zdepth_r4
 7203.                     READ (UNIT=nfsibd) green_r4, xcover_r4, zlt_r4, x0x_r4, xd_r4, z2_r4, z1_r4, xdc_r4, xbc_r4
 7204.                 
 7205.  V-----------<>     rstpar_fixed = rstpar_r4
 7206.  Vf----------<>     chil_fixed   = chil_r4
 7207.  f-----------<>     topt_fixed   = topt_r4
 7208.  f-----------<>     tll_fixed    = tll_r4
 7209.  f-----------<>     tu_fixed     = tu_r4
 7210.  f-----------<>     defac_fixed  = defac_r4
 7211.  f-----------<>     ph1_fixed    = ph1_r4
 7212.  V-----------<>     ph2_fixed    = ph2_r4
 7213.  f-----------<>     rootd        = rootd_r4
 7214.  Vf----------<>     bee          = bee_r4
 7215.  f-----------<>     phsat        = phsat_r4
 7216.  f-----------<>     satco        = satco_r4
 7217.  f-----------<>     poros        = poros_r4
 7218.  V-----------<>     zdepth       = zdepth_r4
 7219.  f-----------<>     green_fixed  = green_r4
 7220.  f-----------<>     xcover_fixed = xcover_r4
 7221.  f-----------<>     zlt_fixed    = zlt_r4
 7222.  f-----------<>     x0x          = x0x_r4
 7223.  f-----------<>     xd           = xd_r4
 7224.  f-----------<>     z2           = z2_r4
 7225.  f-----------<>     z1           = z1_r4
 7226.  f-----------<>     xdc          = xdc_r4
 7227.  f-----------<>     xbc          = xbc_r4
 7228.                 
 7229.                     READ(UNIT=nfalb) cedfu_r4, cedir_r4, cedfu1_r4, cedir1_r4, cedfu2_r4, cedir2_r4, &
 7230.                          cledfu_r4, cledir_r4, xmiu_r4, cether_r4, xmiw_r4
 7231.  f-----------<>     cedfu  = REAL(cedfu_r4 ,KIND=r8) 
 7232.  f-----------<>     cedir  = REAL(cedir_r4 ,KIND=r8) 
 7233.  f-----------<>     cedfu1 = REAL(cedfu1_r4,KIND=r8) 
 7234.  f-----------<>     cedir1 = REAL(cedir1_r4,KIND=r8) 
 7235.  f-----------<>     cedfu2 = REAL(cedfu2_r4,KIND=r8) 
 7236.  f-----------<>     cedir2 = REAL(cedir2_r4,KIND=r8) 
 7237.  f-----------<>     cledfu = REAL(cledfu_r4,KIND=r8) 
 7238.  f-----------<>     cledir = REAL(cledir_r4,KIND=r8) 
 7239.                     cether = REAL(cether_r4,KIND=r8) 
 7240.  Vf----------<>     xmiu   = REAL(xmiu_r4  ,KIND=r8) 
 7241.  f-----------<>     xmiw   = REAL(xmiw_r4  ,KIND=r8) 
 7242.                     REWIND nfsibd
 7243.                 
 7244.                     REWIND nfalb
 7245.                 
 7246.                     f0001=0.0001_r8
 7247.                 
 7248.  1------------<     DO jcg =1, 2
 7249.  1 2----------<        DO jmon=1,12
 7250.  1 2 r4-------<           DO jtyp=1,ityp
 7251.  1 2 r4                      green_fixed(jtyp,jmon,jcg)=MAX(f0001,green_fixed(jtyp,jmon,jcg))
 7252.  1 2 r4------->           END DO
 7253.  1 2---------->        END DO
 7254.  1------------>     END DO
 7255.                 
 7256.  f------------<     DO iv =1, 2
 7257.  f                     jtyp = 12
 7258.  f                     IF (iv.EQ.2) jtyp = 13
 7259.  f              
 7260.  f 2----------<        DO  im = 1,3
 7261.  f 2                      ystpar(iv,im)=rstpar_fixed(jtyp,1,im)
 7262.  f 2---------->        END DO
 7263.  f              
 7264.  f                     yhil  (iv)=chil_fixed  (jtyp,1)
 7265.  f                     yopt  (iv)=topt_fixed  (jtyp,1)
 7266.  f                     yll   (iv)=tll_fixed   (jtyp,1)
 7267.  f                     yu    (iv)=tu_fixed    (jtyp,1)
 7268.  f                     yefac (iv)=defac_fixed (jtyp,1)
 7269.  f                     yootd (iv)=rootd (jtyp,1)
 7270.  f                     yh1   (iv)=ph1_fixed   (jtyp,1)
 7271.  f                     yh2   (iv)=ph2_fixed   (jtyp,1)
 7272.  f              
 7273.  f------------>     END DO
 7274.                 
 7275.  i------------<     DO jmon=1,12
 7276.  i if---------<        DO iv = 1,2
 7277.  i if                     jtyp = 12
 7278.  i if                     IF (iv.EQ.2) jtyp = 13
 7279.  i if                     ylt   (jmon,iv)=zlt_fixed(jtyp,jmon,1)
 7280.  i if                     yreen (jmon,iv)=green_fixed (jtyp,jmon,1)
 7281.  i if                     ycover(jmon,iv)=xcover_fixed(jtyp,jmon,1)
 7282.  i if--------->        END DO
 7283.  i------------>     END DO
 7284.                 
 7285.  i------------<     DO iv = 1,2
 7286.  i i----------<        DO im = 1,3
 7287.  i i                      rstpar_fixed(13,iv,im) = 1000.0_r8
 7288.  i i---------->        END DO
 7289.  i                     chil_fixed  (13,iv) = 0.01_r8
 7290.  i                     topt_fixed  (13,iv) = 310.0_r8
 7291.  i                     tll_fixed   (13,iv) = 300.0_r8
 7292.  i                     tu_fixed    (13,iv) = 320.0_r8
 7293.  i                     defac_fixed (13,iv) = 0.0_r8
 7294.  i                     ph1_fixed   (13,iv) = 3.0_r8
 7295.  i                     ph2_fixed   (13,iv) = 6.0_r8
 7296.  i                     rootd (13,iv) = 2.1_r8
 7297.  i------------>     END DO
 7298.                 
 7299.                     bee(13) = 4.8_r8
 7300.                     phsat(13) = -0.167_r8
 7301.                     satco(13) = 0.762e-4_r8
 7302.                     poros(13) = 0.4352_r8
 7303.                 
 7304.  w------------<     DO i = 1, imon
 7305.  w                     zlt_fixed(13,i,1) = 0.0001_r8
 7306.  w                     zlt_fixed(13,i,2) = 0.0001_r8
 7307.  w                     z2(13,i) = 0.1_r8
 7308.  w                     z1(13,i) = 0.0001_r8
 7309.  w                     xcover_fixed(13,i,1) = 0.0001_r8
 7310.  w                     xcover_fixed(13,i,2) = 0.0001_r8
 7311.  w                     x0x(13,i) = 0.01_r8
 7312.  w                     xd(13,i) = 0.0004_r8
 7313.  w                     xbc(13,i) = 35461.0_r8
 7314.  w                     xdc(13,i) = 28.5_r8
 7315.  w------------>     END DO
 7316.                 
 7317.                     zdepth(13,1) = 1.0_r8
 7318.                     zdepth(13,2) = 1.0_r8
 7319.                     zdepth(13,3) = 1.0_r8
 7320.                 
 7321.                     ! tvsgm - Global Mean Surface Virtual Temperature
 7322.                     ! dz - mean height of the first model layer
 7323.                     tvsgm=288.16_r8
 7324.                     dz=(gasr*tvsgm/grav)*LOG(si1/sl1)
 7325.                     ! Forest
 7326.                     !dzcut=0.75_r8*dz
 7327.                     dzcut=0.6_r8*dz
 7328.                     xd(1,1:imon)=MIN(xd(1,1:imon),dzcut)
 7329.                     ! Other
 7330.                     ! SiB calibration values
 7331.                     ! 45 m - height of the first tower level of measurements
 7332.                     ! 27 m - maximum calibrated displacement height
 7333.                     dzcut=(27.0_r8/45.0_r8)*dz
 7334.  V-----------<>     xd(2:ityp,1:imon)=MIN(xd(2:ityp,1:imon),dzcut)
 7335.                   END SUBROUTINE vegin
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7335 
  Local variable "YHIL" is assigned a value but never used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7335 
  Named Constant "ILD" is not used.

 7336.                 
 7337.                   !
 7338.                   !------------------------------------------------------------
 7339.                   !
 7340.                   SUBROUTINE re_assign_sib_soil_prop
 7341.                     IMPLICIT NONE
 7342.                 
 7343.                     REAL(KIND=r8)    :: GSWP_soil_input_data(10,12)
 7344.                     INTEGER :: nnn
 7345.                     !
 7346.                     !-------------------------------Soil data from GSWP-2 -------------------------------------
 7347.                     !
 7348.                     DATA GSWP_soil_input_data/  &
 7349.                                                 !1     2    3     4        5       6      7      8      9     10
 7350.                                                 !SAND(%) SILT CLAY QUARTZ  Wfc    Wwilt  Wsat    b    PHIsat  Ksat
 7351.                          92.0_r8, 5.0_r8, 3.0_r8,0.92_r8,0.132_r8,0.033_r8,0.373_r8, 3.30_r8,-0.05_r8,2.45E-05_r8,&!1  Sand
 7352.                          82.0_r8,12.0_r8, 6.0_r8,0.82_r8,0.156_r8,0.051_r8,0.386_r8, 3.80_r8,-0.07_r8,1.75E-05_r8,&!2  Loamy Sand
 7353.                          58.0_r8,32.0_r8,10.0_r8,0.60_r8,0.196_r8,0.086_r8,0.419_r8, 4.34_r8,-0.16_r8,8.35E-06_r8,&!3  Sandy Loam
 7354.                          10.0_r8,85.0_r8, 5.0_r8,0.25_r8,0.361_r8,0.045_r8,0.471_r8, 3.63_r8,-0.84_r8,1.10E-06_r8,&!4  Silt Loam
 7355.                          17.0_r8,70.0_r8,13.0_r8,0.40_r8,0.270_r8,0.169_r8,0.476_r8, 5.25_r8,-0.65_r8,2.36E-06_r8,&!5  Loam
 7356.                          58.0_r8,15.0_r8,27.0_r8,0.60_r8,0.253_r8,0.156_r8,0.412_r8, 7.32_r8,-0.12_r8,6.31E-06_r8,&!6  Sandy Clay Loam
 7357.                          32.0_r8,34.0_r8,34.0_r8,0.10_r8,0.301_r8,0.211_r8,0.447_r8, 8.34_r8,-0.28_r8,2.72E-06_r8,&!7  Silty Clay Loam
 7358.                          10.0_r8,56.0_r8,34.0_r8,0.35_r8,0.334_r8,0.249_r8,0.478_r8, 8.41_r8,-0.63_r8,1.44E-06_r8,&!8  Clay Loam
 7359.                          52.0_r8, 6.0_r8,42.0_r8,0.52_r8,0.288_r8,0.199_r8,0.415_r8, 9.70_r8,-0.12_r8,4.25E-06_r8,&!9  Sandy Clay
 7360.                          6.0_r8,47.0_r8,47.0_r8,0.10_r8,0.363_r8,0.286_r8,0.478_r8,10.78_r8,-0.58_r8,1.02E-06_r8,&!10 Silty Clay
 7361.                          22.0_r8,20.0_r8,58.0_r8,0.25_r8,0.353_r8,0.276_r8,0.450_r8,12.93_r8,-0.27_r8,1.33E-06_r8,&!11 Clay
 7362.                          43.0_r8,39.0_r8,18.0_r8,0.10_r8,0.250_r8,0.148_r8,0.437_r8, 5.96_r8,-0.24_r8,4.66E-06_r8 /!12 Silt
 7363.                     !
 7364.                     !-srf: avoid this for now, only use it when all arrays above are used like:
 7365.                     ! bee(int(soil_type(lon,lat))) and not the usual way: bee(isurf(lon,lat))),
 7366.                     ! where isurf is the vegetation index
 7367.                     !
 7368.  D------------<     DO nnn = 1,12
 7369.  D                     !
 7370.  D                     !   sslfc(nnn)  = GSWP_soil_input_data(5,nnn)        !not in use
 7371.  D                     !   sswlts(nnn) = GSWP_soil_input_data(6,nnn)        !not in use
 7372.  D                     !   sswlts(nnn) = max(0.06_r8,GSWP_soil_input_data(6,n) !not in use nn)
 7373.  D                     !
 7374.  D                     ! print*,nnn,'poros bee phsat satco'
 7375.  D                     ! print*,poros(nnn) , GSWP_soil_input_data(7,nnn)
 7376.  D                     ! print*,bee(nnn)   ,GSWP_soil_input_data(8,nnn)
 7377.  D                     ! print*,phsat(nnn) ,GSWP_soil_input_data(9,nnn)
 7378.  D                     ! print*,satco(nnn) ,GSWP_soil_input_data(10,nnn)
 7379.  D              
 7380.  D                     ! poros(nnn) = GSWP_soil_input_data(7,nnn)
 7381.  D                     ! bee  (nnn) = GSWP_soil_input_data(8,nnn)
 7382.  D                     ! phsat(nnn) = GSWP_soil_input_data(9,nnn)
 7383.  D                     ! satco(nnn) = GSWP_soil_input_data(10,nnn)
 7384.  D------------>     END DO
 7385.                     !srf- original SSIB from MCGA requires 13 soil classes, while USDA/GSWP2 has only 12
 7386.                     !srf- the soil class 13 is not changed here (see vegin.f90)
 7387.                     !  bee(13) = 4.8_r8
 7388.                     !  phsat(13) = -0.167_r8
 7389.                     !  satco(13) = 0.762e-4_r8
 7390.                     !  poros(13) = 0.4352_r8
 7391.                     !  zdepth(13,1) = 1.0_r8
 7392.                     !  zdepth(13,2) = 1.0_r8
 7393.                     !  zdepth(13,3) = 1.0_r8
 7394.                     !
 7395.                     RETURN
 7396.                   END SUBROUTINE re_assign_sib_soil_prop
 7397.                 
 7398.                   ! wheat  :determine wheat phenology for latitude and julian day?.
 7399.                 
 7400.                   SUBROUTINE wheat (latitu,itype ,nmax  ,colrad ,month ,xday   ,yrl   , &
 7401.                        idatec,monl  ,nsx    )
 7402.                     !==========================================================================
 7403.                     !==========================================================================
 7404.                     !  ityp.......Numero das classes de solo vegetacao 13
 7405.                     !  imon.......Number max of month at year (12)
 7406.                     !  icg........Parameters of vagetation (icg=1 top e icg=2 bottom)
 7407.                     !  iwv........Comprimento de onda iwv=1=visivel, iwv=2=infravermelho
 7408.                     !             proximo, iwv=3 infravermelho termal
 7409.                     !  nmax
 7410.                     !  itype......Classe de textura do solo ou classe de vegetacao
 7411.                     !  jmax.......Number of grid points on a gaussian longitude circle
 7412.                     !  colrad.....colatitude
 7413.                     !  month......Number of month at year (1-12)
 7414.                     !  xday.......is julian day - 1 with fraction of day
 7415.                     !  pie........Constante Pi=3.1415926e0
 7416.                     !  yrl........length of year in days
 7417.                     !  idatec.....idatec(1)=current hour of
 7418.                     !            idatec(2)=current day of month.
 7419.                     !            idatec(3)=current month of year.
 7420.                     !            idatec(4)=current year.
 7421.                     !  monl.......length of each month in days
 7422.                     !  ystpar.....Coefficints related to par influence on
 7423.                     !             stomatal resistance
 7424.                     !  yopt.......Temperatura ideal de funcionamento estomatico
 7425.                     !  yll........Temperatura minima de funcionamento estomatico
 7426.                     !  yu.........Temperatura maxima de funcionamento estomatico
 7427.                     !  yefac......Parametro de deficit de pressao de vapor d'agua
 7428.                     !  yh1........Coeficiente para o efeito da agua no solo
 7429.                     !  yh2........Potencial de agua no solo para ponto de Wilting
 7430.                     !  rstpar.....Coefficints related to par influence on
 7431.                     !             stomatal resistance
 7432.                     !  chil.......Leaf orientation parameter
 7433.                     !  topt.......Temperatura ideal de funcionamento estomatico
 7434.                     !  tll........Temperatura minima de funcionamento estomatico
 7435.                     !  tu.........Temperatura maxima de funcionamento estomatico
 7436.                     !  defac......Parametro de deficit de pressao de vapor d'agua
 7437.                     !  ph1........Coeficiente para o efeito da agua no solo
 7438.                     !  ph2........Potencial de agua no solo para ponto de Wilting
 7439.                     !  green......Fraction of grenn leaves
 7440.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=1 Top
 7441.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=2 Bottom
 7442.                     !  nsx........phenology dates to fall within one year period
 7443.                     !==========================================================================
 7444.                     INTEGER , PARAMETER :: itveg = 13 ! Number of Vegetation Types
 7445.                     INTEGER , PARAMETER :: isoil = 13 ! Number of Vegetation Types
 7446.                     INTEGER , PARAMETER :: imon = 12 ! Number of Months with Defined Vegetation Types
 7447.                     INTEGER , PARAMETER :: icg  = 2  ! Number of Vegetation Parameters
 7448.                     INTEGER , PARAMETER :: iwv  = 3  ! Number of Radiation Wavelengths
 7449.                     INTEGER , PARAMETER :: idp  = 3  ! Number of Soil Layer Parameters
 7450.                     INTEGER , PARAMETER :: ibd  = 2  ! Number of Vegetation Stage
 7451.                 
 7452.                     INTEGER, INTENT(in ) :: nmax
 7453.                     INTEGER, INTENT(in ) :: latitu
 7454.                     INTEGER, INTENT(in ) :: itype (nmax)
 7455.                     REAL(KIND=r8),    INTENT(in ) :: colrad(nmax)
 7456.                     INTEGER, INTENT(in ) :: month (nmax)
 7457.                     REAL(KIND=r8),    INTENT(in ) :: xday
 7458.                     REAL(KIND=r8),    INTENT(in ) :: yrl
 7459.                     INTEGER, INTENT(in ) :: idatec(4)
 7460.                     INTEGER, INTENT(in ) :: monl  (12)
 7461.                     INTEGER, INTENT(inout) :: nsx(nmax)
 7462.                     REAL(KIND=r8)    :: rday
 7463.                     REAL(KIND=r8)    :: thrsh
 7464.                     REAL(KIND=r8)    :: phi(nmax)
 7465.                     REAL(KIND=r8)    :: flip
 7466.                     REAL(KIND=r8)    :: rootgc (nmax)
 7467.                     REAL(KIND=r8)    :: chilw (nmax)
 7468.                     REAL(KIND=r8)    :: tlai(nmax)
 7469.                     REAL(KIND=r8)    :: xcover2(nmax)
 7470.                     REAL(KIND=r8)    :: grlf (nmax)
 7471.                     REAL(KIND=r8)    :: diff1 (nmax)
 7472.                     REAL(KIND=r8)    :: diff2 (nmax)
 7473.                     REAL(KIND=r8)    :: perc
 7474.                     REAL(KIND=r8)    :: x1
 7475.                     REAL(KIND=r8)    :: xdif1
 7476.                     REAL(KIND=r8)    :: xdif2
 7477.                     INTEGER :: i
 7478.                     INTEGER :: kold
 7479.                     INTEGER :: i1
 7480.                     INTEGER :: ns
 7481.                     INTEGER :: mind (nmax)
 7482.                     INTEGER :: index (nmax)
 7483.                     INTEGER :: icond
 7484.                     INTEGER :: kk
 7485.                     INTEGER :: mnl
 7486.                     REAL(KIND=r8) :: pie=3.1415926e0_r8
 7487.                     REAL(KIND=r8)    :: phenst(nmax,9)
 7488.                     LOGICAL    :: test(nmax)
 7489.                     INTEGER, PARAMETER :: iimon=12
 7490.                 
 7491.                     REAL(KIND=r8), PARAMETER :: wlai(9)=(/1.0_r8, 2.0_r8, 6.0_r8, 4.0_r8, 3.0_r8, 1.0_r8, 0.01_r8, 0.01_r8, 1.0_r8/)
 7492.                 
 7493.                     REAL(KIND=r8), PARAMETER :: xgren(iimon+1)=(/0.55_r8,0.68_r8,0.8_r8,0.9_r8,0.9_r8,0.9_r8,0.9_r8,0.81_r8,0.64_r8,&
 7494.                          0.53_r8,0.49_r8,0.48_r8,0.55_r8/)
 7495.                 
 7496.                     REAL(KIND=r8), PARAMETER :: vlt(iimon+1)=(/1.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,3.78_r8,&
 7497.                          1.63_r8,1.0_r8,1.0_r8/)
 7498.                 
 7499.                     !    INTEGER, SAVE :: kmon(iimon+1)
 7500.                 
 7501.                     REAL(KIND=r8) :: xgreen(nmax,iimon+1)
 7502.                     INTEGER :: kmon(imon+1)
 7503.                 
 7504.                     INTEGER, PARAMETER :: ihead = 3
 7505.                     INTEGER, PARAMETER :: iwheat=12
 7506.                     REAL(KIND=r8),    PARAMETER :: syr   =365.25e0_r8
 7507.                     REAL(KIND=r8),    PARAMETER :: vcv   =0.569_r8
 7508.                     !
 7509.                     !     vlt and xgren are assumed to be correct at the beginning of the
 7510.                     !     month
 7511.                     !
 7512.  A-----------<>     nsx = 0
 7513.  A-----------<>     index= 0
 7514.  A-----------<>     phenst=0.0_r8
 7515.                     !
 7516.                     !     xday is julian day - 1 with fraction of day
 7517.                     !
 7518.                     rday=xday
 7519.                     !
 7520.                     !     for standard length years, determine the offset for the year
 7521.                     !     within the leap year period
 7522.                     !
 7523.                     thrsh=-MOD(idatec(4)+3,4)*0.25e0_r8
 7524.  A-----------<>     test=.TRUE.
 7525.  1------------<     DO i = 1, nmax
 7526.  1                     !pi === 180
 7527.  1                     !y  === x
 7528.  1                     !
 7529.  1                     ! X = (180 * Y)/pi
 7530.  1                     !
 7531.  1                     phi(i) = 90.0_r8-180.0e0_r8/pie * colrad(i)
 7532.  1                     !
 7533.  1                     !     constrain latitude range
 7534.  1                     !
 7535.  1                     !fixa o valor -55 ou +55 se o valor absoluto da latitude for maior que 55
 7536.  1                     IF (ABS(phi(i)) > 55.0_r8) phi(i)=SIGN(55.0_r8,phi(i))
 7537.  1                     !fixa o valor -20 ou +20 se a valor absoluto da latitude for menor que 20
 7538.  1                     IF (ABS(phi(i)) < 20.0_r8) phi(i)=SIGN(20.0_r8,phi(i))
 7539.  1              
 7540.  1------------>     ENDDO
 7541.  1------------<     DO i1 = 1, iimon+1
 7542.  1 Vr4--------<        DO i = 1, nmax
 7543.  1 Vr4                    xgreen(i,i1)=xgren(i1)
 7544.  1 Vr4-------->        END DO
 7545.  1------------>     END DO
 7546.                     !
 7547.                     !     search for any wheat vegetation points at this latitude
 7548.                     !     if found, set sib parameters for latitude and time of year
 7549.                     !
 7550.                     kold=0
 7551.  wr4----------<     DO i1 = 1, iimon
 7552.  wr4                   kmon(i1)=kold
 7553.  wr4                   !
 7554.  wr4                   !     add extra day for leap years if using standard length year
 7555.  wr4                   !
 7556.  wr4                   IF (MOD(idatec(4),4) == 0 .AND. i1 == 2)kmon(i1)=kmon(i1)+1
 7557.  wr4                   kold=kold+monl(i1)
 7558.  wr4---------->     END DO
 7559.  1------------<     DO i = 1, nmax
 7560.  1                     IF (itype(i) /= iwheat) CYCLE
 7561.  1                     flip =   0.0_r8
 7562.  1                     IF (phi(i)< 0.0e0_r8) flip = yrl/2.0_r8
 7563.  1                     !
 7564.  1                     !     determine julian day - 1 for each wheat phenology for this
 7565.  1                     !     latitude.  scale by length of year and adjust for south. hem.
 7566.  1                     !
 7567.  1                     phenst(i,2) = (4.50_r8 * ABS(phi(i)) - 65.0_r8) * (yrl/syr) + flip
 7568.  1                     phenst(i,3) = (4.74_r8 * ABS(phi(i)) - 47.2_r8) * (yrl/syr) + flip
 7569.  1                     phenst(i,4) = (4.86_r8 * ABS(phi(i)) - 31.8_r8) * (yrl/syr) + flip
 7570.  1                     phenst(i,5) = (4.55_r8 * ABS(phi(i)) -  2.0_r8) * (yrl/syr) + flip
 7571.  1                     phenst(i,6) = (4.35_r8 * ABS(phi(i)) + 10.5_r8) * (yrl/syr) + flip
 7572.  1              
 7573.  1              
 7574.  1                     phenst(i,7) = phenst(i,6) + 3.0_r8 * (yrl/syr)
 7575.  1                     phenst(i,1) = phenst(i,2) - ABS(5.21_r8 * ABS(phi(i)) - 0.3_r8)*(yrl/syr)
 7576.  1                     phenst(i,9) = phenst(i,1)
 7577.  1                     phenst(i,8) = phenst(i,9) - 5.0_r8*(yrl/syr)
 7578.  1------------>     END DO
 7579.  b------------<     DO ns = 1, 9
 7580.  b b----------<        DO i = 1, nmax
 7581.  b b                      IF (itype(i) /= iwheat) CYCLE
 7582.  b b                      !
 7583.  b b                      !     constrain phenology dates to fall within one year period
 7584.  b b                      !
 7585.  b b                      IF (phenst(i,ns) < 0.0e0_r8) phenst(i,ns) = phenst(i,ns) + yrl
 7586.  b b                      IF (phenst(i,ns) > yrl)      phenst(i,ns) = phenst(i,ns) - yrl
 7587.  b b---------->        END DO
 7588.  b------------>     END DO
 7589.                 
 7590.  b------------<     DO i1 = 1, 12
 7591.  b b----------<        DO i = 1, nmax
 7592.  b b                      IF (itype(i) /= iwheat) CYCLE
 7593.  b b                      !
 7594.  b b                      !     find month of the head phenology stage for this latitude
 7595.  b b                      !
 7596.  b b                      IF (phenst(i,ihead) <= kmon(i1+1)) THEN
 7597.  b b                         mind(i) = i1
 7598.  b b                         IF (i1 <= 4) THEN
 7599.  b b                            xgreen(i,i1+1) = 0.9_r8
 7600.  b b                            xgreen(i,i1+2) = 0.9_r8
 7601.  b b                         END IF
 7602.  b b                      END IF
 7603.  b b---------->        END DO
 7604.  b------------>     END DO
 7605.                 
 7606.  1------------<     DO ns = 1,8
 7607.  1 2----------<        DO i = 1, nmax
 7608.  1 2                      IF (itype(i) /= iwheat) CYCLE
 7609.  1 2                      rootgc(i) = 1.0_r8
 7610.  1 2                      chilw(i)  =-0.02_r8
 7611.  1 2                      tlai(i)   = 0.5_r8
 7612.  1 2                      grlf(i)   = 0.6_r8
 7613.  1 2                      xcover2(i)=xcover(iwheat,month(i),1)
 7614.  1 2                      !
 7615.  1 2                      !     find growth stage given latitude and day
 7616.  1 2                      !
 7617.  1 2                      IF(test(i))THEN
 7618.  1 2                         diff1(i) =  phenst(i,ns+1)- phenst(i,ns)
 7619.  1 2                         diff2(i) = rday- phenst(i,ns)
 7620.  1 2                         IF ( phenst(i,ns) >=  phenst(i,ns+1)) THEN
 7621.  1 2                            IF ((rday <  phenst(i,ns)) .OR. (rday >  phenst(i,ns+1))) THEN
 7622.  1 2                               !
 7623.  1 2                               !     phenology stages overlap the end of year?
 7624.  1 2                               !
 7625.  1 2                               icond = 0
 7626.  1 2                               IF (rday >=  phenst(i,ns)   .AND. rday <= yrl  ) icond = 1
 7627.  1 2                               IF (rday >= thrsh .AND. rday <=  phenst(i,ns+1)) icond = 2
 7628.  1 2                               IF (icond /= 2) THEN
 7629.  1 2                                  diff1(i) = yrl    -  phenst(i,ns) +  phenst(i,ns+1)
 7630.  1 2                                  diff2(i) = rday   -  phenst(i,ns)
 7631.  1 2                               ELSE
 7632.  1 2                                  diff1(i) = yrl   -  phenst(i,ns) + phenst(i,ns+1)
 7633.  1 2                                  diff2(i) = yrl   -  phenst(i,ns) + rday
 7634.  1 2                               END IF
 7635.  1 2                            END IF
 7636.  1 2                            IF (icond /= 0) THEN
 7637.  1 2                               !
 7638.  1 2                               !     date found in phenology stage
 7639.  1 2                               !
 7640.  1 2                               perc =  diff2(i)/diff1(i)
 7641.  1 2                               !
 7642.  1 2                               !     kk is current month number
 7643.  1 2                               !
 7644.  1 2                               kk=idatec(2)
 7645.  1 2                               mnl=monl(kk)
 7646.  1 2                               IF (MOD(idatec(4),4) == 0 .AND. kk == 2)mnl=mnl+1
 7647.  1 2                               IF (rday > phenst(i,ihead)) THEN
 7648.  1 2                                  IF (kk /= mind(i)) THEN
 7649.  1 2                                     x1 = vlt(kk)
 7650.  1 2                                     xdif1 = mnl
 7651.  1 2                                     xdif2 = rday - kmon(kk)
 7652.  1 2                                  ELSE
 7653.  1 2                                     x1    = wlai(ihead)
 7654.  1 2                                     xdif1 = kmon(kk+1) - phenst(i,ihead)
 7655.  1 2                                     xdif2 = rday - phenst(i,ihead)
 7656.  1 2                                  END IF
 7657.  1 2                                  tlai(i) = x1 - (x1-vlt(kk+1)) / xdif1 * xdif2
 7658.  1 2                               ELSE
 7659.  1 2                                  tlai(i) =  perc*(wlai(ns+1)-wlai(ns)) + wlai(ns)
 7660.  1 2                               END IF
 7661.  1 2                               IF (rday > phenst(i,ihead+1)) THEN
 7662.  1 2                                  xcover2(i)=vcv + (0.9_r8 - vcv) * (yrl - rday)/(yrl - phenst(i,ihead+1))
 7663.  1 2                               ELSE
 7664.  1 2                                  xcover2(i)=0.90_r8*(1.0_r8 - EXP(-tlai(i)))
 7665.  1 2                               END IF
 7666.  1 2                               grlf(i)   = xgreen(i,kk)-(xgreen(i,kk)-xgreen(i,kk+1))/mnl*(rday-kmon(kk))
 7667.  1 2                               rootgc(i) = 2910.0_r8 * (0.5_r8 + 0.5_r8 * tlai(i)/ wlai(ihead) * grlf(i))
 7668.  1 2                               IF (ns /= 1 .AND. ns /= 2) chilw(i)=-0.2_r8
 7669.  1 2                               test(i)=.FALSE.
 7670.  1 2                               index(i)=ns
 7671.  1 2                            END IF
 7672.  1 2                         END IF
 7673.  1 2                      END IF
 7674.  1 2---------->        END DO
 7675.  1------------>     END DO
 7676.                 
 7677.  1------------<     DO i = 1, nmax
 7678.  1                     IF (itype(i) /= iwheat) CYCLE
 7679.  1                     nsx(i) = index(i)
 7680.  1                     IF (nsx(i) == 9) nsx(i) = 1
 7681.  1                     IF (nsx(i) >  6) nsx(i) = 6
 7682.  1                     vcover_gbl (i,latitu,1) =   xcover2(i) !xcover(itype(i),month(i),1)
 7683.  1                     zlt_gbl    (i,latitu,1) =   tlai(i)    !zlt   (itype(i),month(i),1)
 7684.  1                     green_gbl  (i,latitu,1) =   grlf(i)    !green (itype(i),month(i),1)
 7685.  1                     chil_gbl   (i,latitu,1) =   chilw(i)   !chil  (itype(i),1)
 7686.  1                     topt_gbl   (i,latitu,1) =   yopt (2)   !topt  (itype(i),1)
 7687.  1                     tll_gbl    (i,latitu,1) =   yll  (2)   !tll   (itype(i),1)
 7688.  1                     tu_gbl     (i,latitu,1) =   yu(2)   !tu    (itype(i),1)
 7689.  1                     defac_gbl  (i,latitu,1) =   yefac(2)   !defac (itype(i),1)
 7690.  1                     ph1_gbl    (i,latitu,1) =   yh1  (2)   !ph1   (itype(i),1)
 7691.  1                     ph2_gbl    (i,latitu,1) =   yh2  (2)   !ph2   (itype(i),1)
 7692.  1                     rstpar_gbl (i,latitu,1,1)=  ystpar(2,1)!rstpar(itype(i),1,1)
 7693.  1                     rstpar_gbl (i,latitu,1,2)=  ystpar(2,2)!rstpar(itype(i),1,2)
 7694.  1                     rstpar_gbl (i,latitu,1,3)=  ystpar(2,3)!rstpar(itype(i),1,3)
 7695.  1              
 7696.  1------------>     END DO
 7697.                     RETURN
 7698.                   END SUBROUTINE wheat
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Local variable "ROOTGC" is assigned a value but never used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Named Constant "IBD" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Named Constant "ICG" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Named Constant "IWV" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Named Constant "IDP" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Named Constant "ISOIL" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7698 
  Named Constant "ITVEG" is not used.

 7699.                 
 7700.                 
 7701.                 
 7702.                   ! sibwet :transform mintz-serafini and national meteoroLOGICAL center fields
 7703.                   !         of soil moisture into sib compatible fields of soil moisture.
 7704.                 
 7705.                 
 7706.                 
 7707.                 
 7708.                   SUBROUTINE sibwet &
 7709.                        (ibmax,jbmax,sinp,sinmax,imask,wsib,ssib,mxiter,ibMaxPerJB)
 7710.                     !
 7711.                     !
 7712.                     !     piers sellers : 29 april 1987
 7713.                     !
 7714.                     !
 7715.                     !   input  :   sinp     = mintz-serafini or national meteoroLOGICAL
 7716.                     !                         center soil moisture (mm)
 7717.                     !              sinmax   = maximum value of sinp (mm)
 7718.                     !              wsinp    = m-s or nmc fractional wetness
 7719.                     !              ms       = 1, mintz-serafini
 7720.                     !              nmc      = 1, national meteoroLOGICAL center
 7721.                     !              bee      = sib : soil moisture potential factor
 7722.                     !              phsat    = sib : soil potential at saturation (m)
 7723.                     !              zdepth(3)= sib : depth of 3 soil layers (m)
 7724.                     !              poros    = Porosidade do solo (m"3/m"3)
 7725.                     !
 7726.                     !   output :   wsibt    = sib : fractional wetness
 7727.                     !              ssibt    = sib : soil moisture content (m)
 7728.                     !              psit     = sib : soil moisture potential (m)
 7729.                     !              factor   = sib : extraction factor
 7730.                     !
 7731.                     INTEGER, INTENT(in   ) :: ibmax
 7732.                     INTEGER, INTENT(in   ) :: jbmax
 7733.                     INTEGER, INTENT(in   ) :: mxiter
 7734.                     REAL(KIND=r8)   , INTENT(in   ) :: sinp(ibmax,jbmax)
 7735.                     REAL(KIND=r8)   , INTENT(in   ) :: sinmax
 7736.                     !
 7737.                 
 7738.                     INTEGER(KIND=i8), INTENT(in   ) :: imask (ibmax,jbmax)
 7739.                     REAL(KIND=r8)   , INTENT(inout  ) :: wsib  (ibmax,jbmax)
 7740.                     REAL(KIND=r8)   , INTENT(inout  ) :: ssib  (ibmax,jbmax)
 7741.                     INTEGER, INTENT(in   ) :: ibMaxPerJB(:)
 7742.                 
 7743.                     REAL(KIND=r8) :: sm(ityp,mxiter)
 7744.                     REAL(KIND=r8) :: time(ityp,mxiter)
 7745.                     REAL(KIND=r8) :: fact(ityp,mxiter)
 7746.                 
 7747.                     REAL(KIND=r8), PARAMETER :: xph1(13,2) = RESHAPE( &
 7748.                          (/-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8,-120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8, &
 7749.                          -200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8,-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8, &
 7750.                          -120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8,-200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8/), &
 7751.                          (/13,2/))
 7752.                     REAL(KIND=r8), PARAMETER :: xph2(13,2) = RESHAPE( &
 7753.                          (/-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8, &
 7754.                          -400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8,-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8, &
 7755.                          -230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8,-400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8/) , &
 7756.                          (/13,2/))
 7757.                 
 7758.                     REAL(KIND=r8)    :: tzdep(3)
 7759.                     REAL(KIND=r8)    :: tzltm(2)
 7760.                     REAL(KIND=r8)    :: sibmax(ityp)
 7761.                     REAL(KIND=r8)    :: tphsat
 7762.                     REAL(KIND=r8)    :: tbee
 7763.                     REAL(KIND=r8)    :: tporos
 7764.                     INTEGER :: imm1
 7765.                     INTEGER :: imm2
 7766.                     INTEGER :: is
 7767.                     INTEGER :: im
 7768.                     INTEGER :: imm
 7769.                     INTEGER :: ivegm
 7770.                     REAL(KIND=r8)    :: cover
 7771.                     REAL(KIND=r8)    :: tph1
 7772.                     REAL(KIND=r8)    :: tph2
 7773.                     REAL(KIND=r8)    :: sref
 7774.                     REAL(KIND=r8)    :: smin
 7775.                     REAL(KIND=r8)    :: dssib
 7776.                     REAL(KIND=r8)    :: dw
 7777.                     REAL(KIND=r8)    :: times
 7778.                     REAL(KIND=r8)    :: soilmo
 7779.                     REAL(KIND=r8)    :: w
 7780.                     REAL(KIND=r8)    :: rsoilm
 7781.                     INTEGER :: iter
 7782.                     INTEGER :: latmax
 7783.                     INTEGER :: lonmax
 7784.                     INTEGER :: lat
 7785.                     INTEGER :: lon
 7786.                     REAL(KIND=r8)    :: tsinp
 7787.                     REAL(KIND=r8)    :: etp
 7788.                     REAL(KIND=r8)    :: facmod
 7789.                     REAL(KIND=r8)    :: ssibt
 7790.                     REAL(KIND=r8)    :: psit
 7791.                     REAL(KIND=r8)    :: factor
 7792.                     REAL(KIND=r8)    :: dt
 7793.                     INTEGER :: itsoil
 7794.                     INTEGER :: itfac
 7795.                 
 7796.  V-----------<>     sm  =0.0_r8
 7797.  V-----------<>     time=0.0_r8
 7798.  V-----------<>     fact=0.0_r8
 7799.  A-----------<>     ssib=0.0_r8
 7800.  A-----------<>     wsib=0.0_r8
 7801.                 
 7802.                     lonmax=ibmax
 7803.                     latmax=jbmax
 7804.                 
 7805.  1------------<     DO is = 1,ityp
 7806.  1                     !zdepth(3)= sib : depth of 3 soil layers (m)
 7807.  1                     tzdep (1)= zdepth(is,1)
 7808.  1                     tzdep (2)= zdepth(is,2)
 7809.  1                     tzdep (3)= zdepth(is,3)
 7810.  1                     tphsat   = phsat (is)
 7811.  1                     tbee     = bee   (is)
 7812.  1                     tporos   = poros (is)
 7813.  1                     imm1=1
 7814.  1                     imm2=1
 7815.  1                     tzltm(1)=zlt_fixed(is,1,1)
 7816.  1                     tzltm(2)=zlt_fixed(is,1,2)
 7817.  1 2----------<        DO im=2,12
 7818.  1 2                      IF(tzltm(1).LE.zlt_fixed(is,im,1) ) THEN
 7819.  1 2                         imm1=im
 7820.  1 2                         tzltm(1)=zlt_fixed(is,im,1)
 7821.  1 2                      END IF
 7822.  1 2                      IF(tzltm(2).LE.zlt_fixed(is,im,2) )THEN
 7823.  1 2                         imm2=im
 7824.  1 2                         tzltm(2)=zlt_fixed(is,im,2)
 7825.  1 2                      END IF
 7826.  1 2---------->        END DO
 7827.  1                     imm=imm1
 7828.  1                     ivegm=1
 7829.  1                     IF(tzltm(1).LE.tzltm(2)) THEN
 7830.  1                        imm=imm2
 7831.  1                        ivegm=2
 7832.  1                     END IF
 7833.  1                     !
 7834.  1                     !     xcover......Fracao de cobertura vegetal icg=1 topo
 7835.  1                     !     xcover......Fracao de cobertura vegetal icg=2 base
 7836.  1                     !
 7837.  1                     cover=xcover_fixed(is,imm,ivegm)
 7838.  1                     tph1=xph1         (is,ivegm)
 7839.  1                     tph2=xph2         (is,ivegm)
 7840.  1                     !
 7841.  1                     !                                                     m^3
 7842.  1                     ! sibmax(is) =(Z1 + Z2 + Z3) * poros = [m + m + m] * ----- = m = Os
 7843.  1                     !                                                     m^3
 7844.  1                     !
 7845.  1                     sibmax(is) = ( tzdep(1) + tzdep(2) + tzdep(3) ) * tporos
 7846.  1                     !
 7847.  1                     IF(nfctrl(83).GE.1)WRITE(UNIT=nfprt,FMT=999)is,sibmax(is),tzdep(1), &
 7848.  1                          tzdep(2),tzdep(3),tporos
 7849.  1                     !
 7850.  1                     !            bee      = soil moisture potential factor
 7851.  1                     !            phsat    = soil potential at saturation   (m)
 7852.  1                     !
 7853.  1                     !                   --              --
 7854.  1                     !                  | log ( - tphsat/1)|
 7855.  1                     !  O  = Os * EXP * | -----------------|
 7856.  1                     !                  |        b         |
 7857.  1                     !                   --              --
 7858.  1                     !
 7859.  1                     sref = sibmax(is) * EXP( LOG(tphsat /(-1.0e0_r8)) /tbee)
 7860.  1                     !                   --                          --
 7861.  1                     !                  | log ( - tphsat/(-1.0e10) )   |
 7862.  1                     !Omin = Os * EXP * | -----------------------------|
 7863.  1                     !                  |              b               |
 7864.  1                     !                   --                          --
 7865.  1                     !
 7866.  1                     smin    = sibmax(is) * EXP( LOG(tphsat /(-1.0e10_r8)) / tbee)
 7867.  1                     !
 7868.  1                     !             O - Omin
 7869.  1                     !dssib  = ------------------
 7870.  1                     !              mxiter
 7871.  1                     !
 7872.  1                     dssib   = (sref - smin) / REAL(mxiter,r8)
 7873.  1                     !
 7874.  1                     !              O - Omin
 7875.  1                     ! dw    =  ------------------
 7876.  1                     !             mxiter*Os
 7877.  1                     !
 7878.  1                     dw      = dssib / sibmax(is)
 7879.  1                     !
 7880.  1                     times   = 0.0e0_r8
 7881.  1                     soilmo  = sref
 7882.  1                     !
 7883.  1                     !       O
 7884.  1                     ! w = -----
 7885.  1                     !       Os
 7886.  1                     !
 7887.  1                     w = soilmo / sibmax(is)
 7888.  1                     !
 7889.  1                     !                      --             --
 7890.  1                     !                     |       0.0027    |
 7891.  1                     !rsoilm  = 101840.0 * |1.0 - w          |
 7892.  1                     !                     |                 |
 7893.  1                     !                      --             --
 7894.  1                     !
 7895.  1                     rsoilm  = 101840.0_r8 * (1.0_r8 - w**0.0027_r8)
 7896.  1 2----------<        DO iter = 1, mxiter
 7897.  1 2  I                   CALL extrak( w   ,dw  ,tbee,tphsat, rsoilm, cover, &
 7898.  1 2                           tph1,tph2,psit,factor )
 7899.  1 2                      !
 7900.  1 2                      !       dssib
 7901.  1 2                      !dt = ----------
 7902.  1 2                      !       factor
 7903.  1 2                      !
 7904.  1 2                      dt            = dssib  / factor
 7905.  1 2                      !
 7906.  1 2                      soilmo        = soilmo - dssib
 7907.  1 2                      !
 7908.  1 2                      !       O
 7909.  1 2                      ! w = -----
 7910.  1 2                      !       Os
 7911.  1 2                      !
 7912.  1 2                      w             = soilmo / sibmax(is)
 7913.  1 2                      times         = times  + dt
 7914.  1 2                      sm  (is,iter) = soilmo
 7915.  1 2                      time(is,iter) = times
 7916.  1 2                      fact(is,iter) = factor
 7917.  1 2---------->        END DO
 7918.  1              
 7919.  1------------>     END DO
 7920.                     !
 7921.                     !     input soil moisture map is now transformed to sib fields.
 7922.                     !
 7923.  1------------<     DO lat = 1, latmax
 7924.  1 2----------<        DO lon = 1, ibMaxPerJB(lat)
 7925.  1 2                      is=imask(lon,lat)
 7926.  1 2                      IF(is.NE.0)THEN
 7927.  1 2                         tsinp = sinp(lon,lat)
 7928.  1 2                         tsinp = MAX (sinmax/100.0e3_r8 , tsinp )
 7929.  1 2                         tsinp = MIN (sinmax,tsinp)
 7930.  1 2                         IF (tsinp .GT. 0.75e0_r8*sinmax ) etp = sinmax - tsinp
 7931.  1 2                         facmod=MIN(1.0e0_r8,tsinp/(0.75e0_r8*sinmax) )
 7932.  1 2                         IF (tsinp .LE. 0.75e0_r8*sinmax ) THEN
 7933.  1 2                            etp = 0.75e0_r8*sinmax*LOG(0.75e0_r8*sinmax/tsinp ) + 0.25e0_r8*sinmax
 7934.  1 2                         END IF
 7935.  1 2                         etp = etp / 1000.0e0_r8
 7936.  1 2 3--------<              DO iter = 1, mxiter
 7937.  1 2 3                          itsoil=iter
 7938.  1 2 3                          IF ( time(is,iter) - etp .GT. 0.0e0_r8  ) EXIT
 7939.  1 2 3-------->              END DO
 7940.  1 2 3--------<              DO iter=1,mxiter
 7941.  1 2 3                          itfac=iter
 7942.  1 2 3                          IF( fact(is,iter)-facmod-0.01e0_r8.LT.0.0e0_r8)EXIT
 7943.  1 2 3-------->              END DO
 7944.  1 2                         ssibt=MIN(sm(is,itsoil),sm(is,itfac))
 7945.  1 2 3--------<              DO iter=1,mxiter
 7946.  1 2 3                          IF(ssibt.GT.sm(is,iter))EXIT
 7947.  1 2 3-------->              END DO
 7948.  1 2                         ssib(lon,lat) = sm(is,iter)
 7949.  1 2                         !
 7950.  1 2                         !          O
 7951.  1 2                         ! wsib = -----
 7952.  1 2                         !         Os
 7953.  1 2                         !
 7954.  1 2                         wsib(lon,lat) = sm(is,iter) / sibmax(is)
 7955.  1 2                      END IF
 7956.  1 2---------->        END DO
 7957.  1------------>     END DO
 7958.                 999 FORMAT(' IS,MAX,D1,D2,D3,POROS=',I2,1X,5E12.5)
 7959.                   END SUBROUTINE sibwet
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7959 
  Local variable "LONMAX" is assigned a value but never used.

 7960.                 
 7961.                 
 7962.                 
 7963.                   SUBROUTINE sibwet_GLSM (ibMax          , & ! IN
 7964.                        jbMax          , & ! IN
 7965.                        imask          , & ! IN
 7966.                        wsib           , & ! IN
 7967.                        ssib           , & ! IN
 7968.                        mxiter         , & ! OUT
 7969.                        ibMaxPerJB     , & ! OUT
 7970.                        soilm          , & ! in
 7971.                        nzg         , & ! in
 7972.                        wsib3d         , & ! OUT
 7973.                        glsm_w)            ! IN
 7974.                 
 7975.                     !
 7976.                     ! $Author: pkubota $
 7977.                     ! $Date: 2009/03/03 16:36:38 $
 7978.                     ! $Revision: 1.14 $
 7979.                     !
 7980.                     ! sibwet :transform mintz-serafini and national meteoroLOGICAL center fields
 7981.                     !         of soil moisture into sib compatible fields of soil moisture.
 7982.                     !
 7983.                     !     piers sellers : 29 april 1987
 7984.                     !
 7985.                     INTEGER, INTENT(IN   )            :: ibMax
 7986.                     INTEGER, INTENT(IN   )            :: jbMax
 7987.                     INTEGER, INTENT(IN   )            :: mxiter
 7988.                     REAL(KIND=r8)   , INTENT(OUT  )            :: soilm          (ibMax,jbMax)
 7989.                     INTEGER(KIND=i8), INTENT(IN   )            :: imask          (ibMax,jbMax)
 7990.                     REAL(KIND=r8)   , INTENT(OUT  )            :: wsib           (ibMax,jbMax)
 7991.                     REAL(KIND=r8)   , INTENT(OUT  )            :: ssib           (ibMax,jbMax)
 7992.                     INTEGER, INTENT(in   )            :: ibMaxPerJB     (:)
 7993.                     INTEGER, INTENT(in   )            :: nzg
 7994.                     REAL(KIND=r8)   , INTENT(OUT  )            :: wsib3d    (ibMax,jbMax,3       )
 7995.                     REAL(KIND=r8)   , INTENT(IN   )            :: glsm_w    (ibMax,jbMax,nzg     )
 7996.                 
 7997.                     REAL(KIND=r8)               :: sm  (ityp,mxiter)
 7998.                     REAL(KIND=r8)               :: time(ityp,mxiter)
 7999.                     REAL(KIND=r8)               :: fact(ityp,mxiter)
 8000.                     !
 8001.                     !-srf
 8002.                     !
 8003.                     INTEGER, PARAMETER :: nzgmax=20
 8004.                     REAL(KIND=r8)               :: glsm_w1d  (0:nzgmax)     ! dummy 1d initial soil  wetness
 8005.                     REAL(KIND=r8)               :: glsm_tzdep(0:3)          ! sib soil levels
 8006.                     REAL(KIND=r8)               :: glsm_w_sib(0:3)          ! SIB dummy 1d initial and interpolated soil  wetness
 8007.                     !
 8008.                     !-srf
 8009.                     !
 8010.                     REAL(KIND=r8)               :: tzdep (3)
 8011.                     REAL(KIND=r8)               :: tzltm (2)
 8012.                     REAL(KIND=r8)               :: sibmax(ityp)
 8013.                     INTEGER            :: k
 8014.                     REAL(KIND=r8)               :: fx
 8015.                     INTEGER            :: lonmax
 8016.                     INTEGER            :: latmax
 8017.                     INTEGER            :: is
 8018.                     REAL(KIND=r8)               :: tphsat
 8019.                     REAL(KIND=r8)               :: tbee
 8020.                     REAL(KIND=r8)               :: tporos
 8021.                     INTEGER            :: imm1
 8022.                     INTEGER            :: imm2
 8023.                     INTEGER            :: im
 8024.                     INTEGER            :: imm
 8025.                     INTEGER            :: ivegm
 8026.                     REAL(KIND=r8)               :: cover
 8027.                     REAL(KIND=r8)               :: tph1
 8028.                     REAL(KIND=r8)               :: tph2
 8029.                     REAL(KIND=r8)               :: sref
 8030.                     REAL(KIND=r8)               :: smin
 8031.                     REAL(KIND=r8)               :: dssib
 8032.                     REAL(KIND=r8)               :: dw
 8033.                     REAL(KIND=r8)               :: times
 8034.                     REAL(KIND=r8)               :: soilmo
 8035.                     REAL(KIND=r8)               :: w
 8036.                     REAL(KIND=r8)               :: rsoilm
 8037.                     INTEGER            :: iter
 8038.                     REAL(KIND=r8)               :: psit
 8039.                     REAL(KIND=r8)               :: factor
 8040.                     REAL(KIND=r8)               :: dt
 8041.                     INTEGER            :: lat
 8042.                     INTEGER            :: lon
 8043.                 
 8044.                     !
 8045.                     !              wsinp    = m-s or nmc fractional wetness
 8046.                     !              ms       = 1, mintz-serafini
 8047.                     !              nmc      = 1, national meteoroLOGICAL center
 8048.                     !              bee      = sib : soil moisture potential factor
 8049.                     !              phsat     = sib : soil potential at saturation (m)
 8050.                     !              zdepth(3)= sib : depth of 3 soil layers (m)
 8051.                     !              poros    = sib : soil porosity
 8052.                     !              ph1      = sib : leaf potential, stress onset (m)
 8053.                     !              ph2      = sib : leaf potential, no e-t (m)
 8054.                     !
 8055.                     !   output :   wsibt    = sib : fractional wetness
 8056.                     !              ssibt    = sib : soil moisture content (m)
 8057.                     !              psit     = sib : soil moisture potential (m)
 8058.                     !              factor   = sib : extraction factor
 8059.                     !
 8060.                     REAL(KIND=r8), PARAMETER :: xph1(13,2) = RESHAPE( &
 8061.                          (/-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8,-120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8, &
 8062.                          -200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8,-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8, &
 8063.                          -120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8,-200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8/), &
 8064.                          (/13,2/))
 8065.                     REAL(KIND=r8), PARAMETER :: xph2(13,2) = RESHAPE( &
 8066.                          (/-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8, &
 8067.                          -400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8,-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8, &
 8068.                          -230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8,-400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8/) , &
 8069.                          (/13,2/))
 8070.                 
 8071.                     !-srf
 8072.                     !hmjb
 8073.                     !    REAL, PARAMETER :: glsm_slz(0:nzgmax) = (/  0., 0.1, 0.25, 0.5, 1., 2., 3.,& !7  values
 8074.                     !         0., 0.,  0.,   0.,  0., 0., 0., 0., 0., 0.,& !10 values
 8075.                     !         0., 0.,  0.,   0.                         /) !4  values
 8076.                     !versao para NZG=8 => 9 niveis no MCGA
 8077.                     REAL(KIND=r8), PARAMETER :: glsm_slz(0:nzgmax) = (/  0.0_r8, 0.05_r8, 0.13_r8, 0.25_r8, 0.5_r8, 1.0_r8, 1.75_r8,& !9  values
 8078.                          2.5_r8, 4.5_r8,  0.0_r8,   0.0_r8,  0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8,& !10 values
 8079.                          0.0_r8, 0.0_r8,  0.0_r8,   0.0_r8                         /) !4  values
 8080.                     !-srf
 8081.                     sm =0.0_r8
 8082.                     time  =0.0_r8
 8083.                     fact  =0.0_r8
 8084.  A-----------<>     ssib  =0.0_r8
 8085.  A-----------<>     wsib  =0.0_r8
 8086.                 
 8087.                     lonmax=ibMax
 8088.                     latmax=jbMax
 8089.                 
 8090.  1------------<     DO is = 1,ityp
 8091.  1                     tzdep (1)= zdepth(is,1)
 8092.  1                     tzdep (2)= zdepth(is,2)
 8093.  1                     tzdep (3)= zdepth(is,3)
 8094.  1                     tphsat   = phsat (is)
 8095.  1                     tbee     = bee   (is)
 8096.  1                     tporos   = poros (is)
 8097.  1                     imm1=1
 8098.  1                     imm2=1
 8099.  1                     tzltm(1)=zlt_fixed(is,1,1)
 8100.  1                     tzltm(2)=zlt_fixed(is,1,2)
 8101.  1 D----------<        DO im=2,12
 8102.  1 D                      IF (tzltm(1).le.zlt_fixed(is,im,1) ) THEN
 8103.  1 D                         imm1=im
 8104.  1 D                         tzltm(1)=zlt_fixed(is,im,1)
 8105.  1 D                      END IF
 8106.  1 D            
 8107.  1 D                      IF (tzltm(2).le.zlt_fixed(is,im,2) ) THEN
 8108.  1 D                         imm2=im
 8109.  1 D                         tzltm(2)=zlt_fixed(is,im,2)
 8110.  1 D                      END IF
 8111.  1 D---------->        END DO
 8112.  1              
 8113.  1                     imm=imm1
 8114.  1                     ivegm=1
 8115.  1              
 8116.  1                     IF (tzltm(1).le.tzltm(2)) THEN
 8117.  1                        imm=imm2
 8118.  1                        ivegm=2
 8119.  1                     END IF
 8120.  1                     cover=xcover_fixed(is,imm,ivegm)
 8121.  1                     tph1=xph1(is,ivegm)
 8122.  1                     tph2=xph2(is,ivegm)
 8123.  1                     !
 8124.  1                     !srf- max water content
 8125.  1                     !
 8126.  1                     sibmax(is) = ( tzdep(1) + tzdep(2) + tzdep(3) ) * tporos
 8127.  1                     IF (nfctrl(83).ge.1) WRITE(UNIT=nfprt,FMT=999)is,sibmax(is),tzdep(1), &
 8128.  1                          tzdep(2),tzdep(3),tporos
 8129.  1                     sref = sibmax(is) * exp( log(tphsat /(-1.0e0_r8)) /tbee )
 8130.  1                     smin = sibmax(is) * exp( log(tphsat /(-1.0e10_r8)) /tbee )
 8131.  1                     dssib= (sref - smin) / REAL(mxiter,r8)
 8132.  1                     dw   = dssib / sibmax(is)
 8133.  1                     times  = 0.0e0_r8
 8134.  1                     soilmo = sref
 8135.  1                     w      = soilmo / sibmax(is)
 8136.  1                     rsoilm = 101840.0_r8 * (1.0_r8 - w**0.0027_r8)
 8137.  1              
 8138.  1 D----------<        DO iter = 1, mxiter
 8139.  1 D  I                   CALL extrak      ( w     , &  ! IN
 8140.  1 D                           dw    , &  ! IN
 8141.  1 D                           tbee  , &  ! IN
 8142.  1 D                           tphsat, &  ! IN
 8143.  1 D                           rsoilm, &  ! IN
 8144.  1 D                           cover , &  ! IN
 8145.  1 D                           tph1  , &  ! IN
 8146.  1 D                           tph2  , &  ! IN
 8147.  1 D                           psit  , &  ! OUT
 8148.  1 D                           factor  )  ! OUT
 8149.  1 D                      dt            = dssib / factor
 8150.  1 D                      soilmo        = soilmo - dssib
 8151.  1 D                      w             = soilmo / sibmax(is)
 8152.  1 D                      times         = times + dt
 8153.  1 D                      sm  (is,iter) = soilmo
 8154.  1 D                      time(is,iter) = times
 8155.  1 D                      fact(is,iter) = factor
 8156.  1 D---------->        END DO
 8157.  1------------>     END DO
 8158.                     !
 8159.                     !     input soil moisture map is now transformed to sib fields.
 8160.                     !
 8161.  1------------<     DO lat = 1, latmax
 8162.  1 2----------<        DO lon = 1, ibMaxPerJB(lat)
 8163.  1 2            
 8164.  1 2                      wsib3d(lon,lat,:) = 0.e0_r8
 8165.  1 2            
 8166.  1 2                      is=imask(lon,lat)
 8167.  1 2                      IF (is.ne.0) THEN
 8168.  1 2            
 8169.  1 2                         tzdep (1)= zdepth(is,1)
 8170.  1 2                         tzdep (2)= zdepth(is,2)
 8171.  1 2                         tzdep (3)= zdepth(is,3)
 8172.  1 2                         tphsat   = phsat (is)
 8173.  1 2                         tbee     = bee   (is)
 8174.  1 2                         tporos   = poros (is)
 8175.  1 2                         !
 8176.  1 2                         !-sib soil levels
 8177.  1 2                         !
 8178.  1 2                         glsm_tzdep(0) = 0.e0_r8
 8179.  1 2                         glsm_w_sib(0) = 0.e0_r8
 8180.  1 2            
 8181.  1 2 w--------<              DO k=1,3
 8182.  1 2 w                          glsm_tzdep (k) = zdepth(is,k) + glsm_tzdep (k-1)
 8183.  1 2 w                          glsm_w_sib (k) = 0.e0_r8
 8184.  1 2 w-------->              END DO
 8185.  1 2                         !
 8186.  1 2                         !- copy 3d soil moisture array to 1d column array
 8187.  1 2                         !
 8188.  1 2 Vpr4-----<              DO k=1,nzg
 8189.  1 2 Vpr4                       glsm_w1d(k)=glsm_w(lon,lat,k)
 8190.  1 2 Vpr4----->              END DO
 8191.  1 2                         !
 8192.  1 2                         !- performs vertical interpolation from soil moisture
 8193.  1 2                         !  levels to sib levels
 8194.  1 2                         !
 8195.  1 2 VAwr4 I-->              CALL vert_interp(4               , &  ! IN
 8196.  1 2                              nzg+1           , &  ! IN
 8197.  1 2                              glsm_tzdep(0:3) , &  ! IN
 8198.  1 2                              glsm_slz(0:nzg) , &  ! IN
 8199.  1 2                              glsm_w1d(0:nzg) , &  ! IN
 8200.  1 2                              glsm_w_sib(0:3)  )   ! OUT
 8201.  1 2            
 8202.  1 2            
 8203.  1 2                         !endif
 8204.  1 2                         !
 8205.  1 2                         !- stores 1d sib soil moisture at 3d array
 8206.  1 2                         !
 8207.  1 2 Vpf------<              DO k=1,3
 8208.  1 2 Vpf                        wsib3d(lon,lat,k) = glsm_w_sib(k)
 8209.  1 2 Vpf------>              END DO
 8210.  1 2                         !
 8211.  1 2                         !------------------------- remove this later--------------------------------X
 8212.  1 2                         !- for now fix zero soil moisture inside the land
 8213.  1 2                         !- latter fix this at soil moisture original data
 8214.  1 2                         !
 8215.  1 2                         !IF (imask(lon,lat) > 0 ) THEN
 8216.  1 2                         !   ssm=0.
 8217.  1 2                         !   DO k=1,3
 8218.  1 2                         !      ssm=ssm+wsib3d(lon,lat,k)
 8219.  1 2                         !   END DO
 8220.  1 2                         !
 8221.  1 2                         !   IF (ssm < 0.15) THEN
 8222.  1 2                         !      !
 8223.  1 2                         !      !print*,'SM null inside land portion', imask(lon,lat)
 8224.  1 2                         !      !print*,'1',lon,lat,wsib3d(lon,lat,:)
 8225.  1 2                         !      !
 8226.  1 2                         !      ssm1d(:) = 0.
 8227.  1 2                         !      ncount = 0
 8228.  1 2                         !      DO i=max(1,lon-4),min(lonmax,lon+4)
 8229.  1 2                         !         DO j=max(1,lat-4),min(latmax,lat+4)
 8230.  1 2                         !    IF (imask(i,j) > 0) THEN !only points inside the land
 8231.  1 2                         !       ssm=0.
 8232.  1 2                         !       DO k=1,3
 8233.  1 2                         !  ssm=ssm+wsib3d(i,j,k)
 8234.  1 2                         !       END DO
 8235.  1 2                         !
 8236.  1 2                         !       IF (ssm > 0.15) THEN
 8237.  1 2                         !  ncount=ncount  + 1
 8238.  1 2                         !  ssm1d(:) = ssm1d(:) + wsib3d(i,j,:)
 8239.  1 2                         !       END IF
 8240.  1 2                         !    END IF
 8241.  1 2                         !         END DO
 8242.  1 2                         !      END DO
 8243.  1 2                         !
 8244.  1 2                         !     IF (ncount > 1) THEN
 8245.  1 2                         !         wsib3d(lon,lat,:)=ssm1d(:)/float(ncount)
 8246.  1 2                         !      ELSE
 8247.  1 2                         !         wsib3d(lon,lat,:)=0.5
 8248.  1 2                         !      END IF
 8249.  1 2                         !      !
 8250.  1 2                         !      !print*,'2',lon,lat,wsib3d(lon,lat,:)
 8251.  1 2                         !      !
 8252.  1 2                         !   END IF
 8253.  1 2                         !END IF
 8254.  1 2                         !
 8255.  1 2                         !-----------------------------------------------------------------------------X
 8256.  1 2                         !
 8257.  1 2                         ssib(lon,lat) = 0.0_r8
 8258.  1 2                         wsib(lon,lat) = 0.0_r8
 8259.  1 2            
 8260.  1 2 f--------<              DO k=1,3
 8261.  1 2 f          
 8262.  1 2 f                          fx            = ( glsm_tzdep(k)-glsm_tzdep(k-1) ) / glsm_tzdep(3)
 8263.  1 2 f                          wsib(lon,lat) = wsib(lon,lat) + glsm_w_sib(k) * fx
 8264.  1 2 f                          ssib(lon,lat) = ssib(lon,lat) + glsm_w_sib(k) * fx * tporos
 8265.  1 2 f          
 8266.  1 2 f-------->              END DO
 8267.  1 2                         !
 8268.  1 2                         ! total water in mm
 8269.  1 2                         !
 8270.  1 2                         soilm(lon,lat) = ( tzdep(1)*wsib3d(lon,lat,1) + &
 8271.  1 2                              tzdep(2)*wsib3d(lon,lat,2) + &
 8272.  1 2                              tzdep(3)*wsib3d(lon,lat,3) ) * tporos
 8273.  1 2                         !
 8274.  1 2                      END IF
 8275.  1 2---------->        END DO
 8276.  1------------>     END DO
 8277.                 999 FORMAT(' IS,MAX,D1,D2,D3,POROS=',I2,1X,5E12.5)
 8278.                   END SUBROUTINE sibwet_GLSM
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8278 
  Local variable "LONMAX" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8278 
  Local variable "SM" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8278 
  Local variable "TIME" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8278 
  Local variable "FACT" is assigned a value but never used.

 8279.                 
 8280.                   SUBROUTINE extrak( w, dw, tbee, tphsat, rsoilm, cover, tph1, tph2, &
 8281.                        psit, factor )
 8282.                     REAL(KIND=r8), INTENT(in   ) :: w
 8283.                     REAL(KIND=r8), INTENT(in   ) :: dw
 8284.                     REAL(KIND=r8), INTENT(in   ) :: tbee
 8285.                     REAL(KIND=r8), INTENT(in   ) :: tphsat
 8286.                     REAL(KIND=r8), INTENT(in   ) :: rsoilm
 8287.                     REAL(KIND=r8), INTENT(in   ) :: cover
 8288.                     REAL(KIND=r8), INTENT(in   ) :: tph1
 8289.                     REAL(KIND=r8), INTENT(in   ) :: tph2
 8290.                     REAL(KIND=r8), INTENT(inout  ) :: psit
 8291.                     REAL(KIND=r8), INTENT(inout  ) :: factor
 8292.                     REAL(KIND=r8) :: rsoil
 8293.                     REAL(KIND=r8) :: argg
 8294.                     REAL(KIND=r8) :: hr
 8295.                     REAL(KIND=r8) :: rplant
 8296.                     !                --     -- (-b)
 8297.                     !               |      dw |                  0
 8298.                     ! psit = PHYs * | w - --- |      where w = -----
 8299.                     !               |      2  |                  0s
 8300.                     !                --     --
 8301.                     psit   = tphsat * ( w-dw/2.0e0_r8 ) ** (-tbee)
 8302.                     !
 8303.                     !                      --                        --
 8304.                     !                     |       --     -- (0.0027)   |
 8305.                     !                     |      |      dw |           |
 8306.                     !rsoil   = 101840.0 * |1.0 - | w - --- |           |
 8307.                     !                     |      |      2  |           |
 8308.                     !                     |       --     --            |
 8309.                     !                      --                        --
 8310.                     !
 8311.                     rsoil  = 101840.0_r8 * (1.0_r8-( w-dw/2.0_r8) ** 0.0027_r8)
 8312.                     !
 8313.                     !                9.81       1
 8314.                     !argg = psit * -------- * -------
 8315.                     !               461.50     310.0
 8316.                     !
 8317.                     argg   = MAX ( -10.0e0_r8 , ((psit * 9.81e0_r8 / 461.5e0_r8) / 310.e0_r8))
 8318.                     !
 8319.                     !            --                       --
 8320.                     !           |         9.81       1      |
 8321.                     !hr   = EXP |psit * -------- * -------  |
 8322.                     !           |        461.50     310.0   |
 8323.                     !            --                       --
 8324.                     !
 8325.                     hr     = EXP ( argg )
 8326.                     !
 8327.                     !         rsoilm
 8328.                     ! rsoil =--------- * hr
 8329.                     !         rsoil
 8330.                     !
 8331.                     rsoil  = rsoilm /rsoil * hr
 8332.                     !
 8333.                     !          ( psit - tph2 - 50.0)
 8334.                     !rplant = -------------------------
 8335.                     !             ( tph1 - tph2 )
 8336.                     !
 8337.                     rplant = ( psit - tph2 -50.0_r8) / ( tph1 - tph2 )
 8338.                     rplant = MAX ( 0.0e0_r8, MIN ( 1.0e0_r8, rplant ) )
 8339.                     !                                                                     --                   --
 8340.                     !                  --                 --                             |     --     -- (0.0027)|
 8341.                     !                 |( psit - tph2 - 50)  |                            |    |      dw |        |
 8342.                     !factor = cover * |---------------------| + (1 - cover) * 101840.0 * |1 - | w - --- |        |
 8343.                     !                 |   ( tph1 - tph2 )   |                            |    |      2  |        |
 8344.                     !                  --                 --                             |     --     --         |
 8345.                     !                                                                     --                   --
 8346.                     factor = cover * rplant + ( 1.0e0_r8 - cover ) * rsoil
 8347.                     factor = MAX ( 1.e-6_r8, factor )
 8348.                   END SUBROUTINE extrak
 8349.                   !
 8350.                   !------------------------------------------------------------
 8351.                   !
 8352.                   SUBROUTINE vert_interp(nsib      , & ! IN
 8353.                        nzg       , & ! IN
 8354.                        tzdep     , & ! IN
 8355.                        glsm_slz  , & ! IN
 8356.                        gl_sm     , & ! IN
 8357.                        glsm_w_sib  ) ! OUT
 8358.                 
 8359.                     INTEGER, INTENT(IN   ) :: nsib
 8360.                     INTEGER, INTENT(IN   ) :: nzg
 8361.                     REAL(KIND=r8)   , INTENT(IN   ) :: tzdep     (nsib)
 8362.                     REAL(KIND=r8)   , INTENT(IN   ) :: glsm_slz  (: )
 8363.                     REAL(KIND=r8)   , INTENT(IN   ) :: gl_sm     (: )
 8364.                     REAL(KIND=r8)   , INTENT(OUT  ) :: glsm_w_sib(nsib)
 8365.                 
 8366.                     REAL(KIND=r8)    :: zm        (nsib)
 8367.                     REAL(KIND=r8)    :: wf        (nsib)
 8368.                     REAL(KIND=r8)    :: zc        (nzg )
 8369.                     REAL(KIND=r8)    :: wi        (nzg )
 8370.                     REAL(KIND=r8)    :: dzlft
 8371.                     INTEGER :: ZDM
 8372.                     INTEGER :: k
 8373.                     INTEGER :: kstart
 8374.                     INTEGER :: L
 8375.                 
 8376.  Vpfr4--------<     DO k=1,nzg
 8377.  Vpfr4                 zc(k)=glsm_slz(k)
 8378.  Vpfr4-------->     END DO
 8379.                 
 8380.  A------------<     DO k=1,nsib
 8381.  A                     zm(k)=tzdep(k)
 8382.  A------------>     END DO
 8383.                 
 8384.                     zdm=nsib
 8385.                     KSTART=3
 8386.                     !
 8387.                     ! Transfere valores da grade de MAIOR resolucao (WI)
 8388.                     !                     para a grade de MENOR resolucao (WF)
 8389.                     !
 8390.                     ! OS valores de WI devem estar definidos nos pontos de grade ZCS=zc/2
 8391.                     ! OS valores de WF saem nos niveis ZMS = ZM/2
 8392.                     !
 8393.                     !
 8394.                     !
 8395.                     !    Dados da grade de maior resolucao
 8396.                     !
 8397.  f------------<     DO K=1,NZG
 8398.  f                     WI(K) = gl_sm(k)
 8399.  f                     !print*,'wi=',k,wi(k)
 8400.  f------------>     END DO
 8401.                     !
 8402.                     !     Dado interpolado
 8403.                     !
 8404.  A-----------<>     wf(:)=0.0_r8
 8405.                     !
 8406.                     !     Valor de superficie:
 8407.                     !
 8408.                     WF(1)=WI(2)
 8409.                     WF(2)=WI(2)
 8410.                     !
 8411.                     !
 8412.                     DZLFT=0.0_r8
 8413.                     L=2
 8414.  1------------<     DO K=KSTART,ZDM
 8415.  1                     !
 8416.  1                     !    if(k==4) print*,'0',l,WF(K),WI(L),DZLFT
 8417.  1                     !
 8418.  1                     IF(DZLFT.NE.0.0_r8) THEN
 8419.  1              
 8420.  1                        WF(K)=WF(K)+WI(L)*DZLFT
 8421.  1                        !    if(k==4) print*,'1',l,WF(K),WI(L),DZLFT
 8422.  1                        L=L+1
 8423.  1              
 8424.  1                     END IF
 8425.  1              
 8426.  1              70     CONTINUE
 8427.  1              
 8428.  1                     IF(ZC(L).LE.ZM(K)) THEN
 8429.  1              
 8430.  1                        WF(K)=WF(K)+WI(L)*(ZC(L)-ZC(L-1))
 8431.  1              
 8432.  1                        !   if(k==4) print*,'2',l,WF(K),WI(L),ZC(L),zm(k)
 8433.  1              
 8434.  1                        L=L+1
 8435.  1                        DZLFT=0.0_r8
 8436.  1                        IF (L>nzg) GO TO 1000
 8437.  1                        GO TO 70
 8438.  1                     ELSE
 8439.  1              
 8440.  1                        WF(K)=WF(K)+WI(L)*(ZM(K)-ZC(L-1))
 8441.  1                        DZLFT=ZC(L)-ZM(K)
 8442.  1                     ENDIF
 8443.  1------------>     ENDDO
 8444.                 
 8445.                 1000 CONTINUE
 8446.                 
 8447.  1------------<     DO K=KSTART,ZDM
 8448.  1                     !
 8449.  1                     !   WF(K) =WF(K)/(ZM(K)-ZM(K-1))
 8450.  1                     !         if(k==4)print*,zm(k),zc(nzg),ZM(K-1),WF(K)
 8451.  1                     !
 8452.  1                     IF (ZM(K) > ZC(nzg)) THEN
 8453.  1                        WF(K) = WF(K)/(ZC(NZG)-ZM(K-1))
 8454.  1                     ELSE
 8455.  1                        WF(K)  = WF(K)/(ZM(K)-ZM(K-1))
 8456.  1                     END IF
 8457.  1------------>     END DO
 8458.                     !
 8459.                     !valores na grade do SIB
 8460.                     !
 8461.  A------------<     DO k=1,nsib
 8462.  A                     glsm_w_sib(k)=WF(k)
 8463.  A                     !print*,'SIB',k,glsm_w_sib(k)
 8464.  A------------>     END DO
 8465.                     !
 8466.                     !check conservacao
 8467.                     !srf - verifique se a integral de ambos calculos percorrem
 8468.                     !srf - o mesmo intervalo
 8469.                     !      print*,'        '
 8470.                     !      sumf=0.0_r8
 8471.                     !      DO K=2,ZDM
 8472.                     !       sumf=sumf+wf(k)*(ZM(K)-ZM(K-1))
 8473.                     !       print*,sumf,wf(k),zm(k),ZM(K)-ZM(K-1)
 8474.                     !      ENDDO
 8475.                     !      print*,'--------sumf-----',sumf
 8476.                     !      sumi=0.0_r8
 8477.                     !      DO K=2,nzg
 8478.                     !       sumi=sumi+wi(k)*(glsm_slz(K)-glsm_slz(K-1))
 8479.                     !       print*,k,sumi,wi(k),glsm_slz(K),(glsm_slz(K)-glsm_slz(K-1))
 8480.                     !      ENDDO
 8481.                     !      print*,'--------sumi-----',sumi, 100*(sumf-sumi)/sumi
 8482.                     !
 8483.                     RETURN
 8484.                   END SUBROUTINE vert_interp
 8485.                 END MODULE SFC_SSiB

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 454 
  A loop starting at line 454 was not vectorized because a better candidate was found at line 455.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 455 
  A loop starting at line 455 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 455 
  A loop starting at line 455 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 474 
  A loop starting at line 474 was not vectorized because it contains a reference to a non-vector intrinsic on line 475.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 494 
  A loop starting at line 494 was not vectorized because it contains a reference to a non-vector intrinsic on line 530.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 496 
  A loop starting at line 496 was not vectorized because it contains a reference to a non-vector intrinsic on line 503.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 527 
  A loop starting at line 527 was not vectorized because it contains a reference to a non-vector intrinsic on line 530.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 528 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 536 
  Routine ROOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3021 ftn: IPA File = Sfc_SSiB.f90, Line = 536 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 536 
  Routine FYSIKS was not inlined because the call nest is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 567 
  A loop starting at line 567 was not vectorized because it contains a reference to a non-vector intrinsic on line 570.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 585 
  A loop starting at line 585 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 585 
  A loop starting at line 585 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 591 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 591 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 592 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 592 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 601 
  A loop starting at line 601 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 601 
  A loop starting at line 601 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 610 
  A loop starting at line 610 was not vectorized because it contains a reference to a non-vector intrinsic on line 613.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 616 
  A loop starting at line 616 was not vectorized because it contains a reference to a non-vector intrinsic on line 618.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 622 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 633 
  A loop starting at line 633 was not vectorized because it contains a reference to a non-vector intrinsic on line 639.

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 659 
  Routine ROOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3021 ftn: IPA File = Sfc_SSiB.f90, Line = 659 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 659 
  Routine FYSIKS was not inlined because the call nest is too large to expand. 

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 693 
  A loop starting at line 693 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 693 
  A loop starting at line 693 was vectorized.

ftn-3021 ftn: IPA File = Sfc_SSiB.f90, Line = 698 
  Routine _BOUNDS_ERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 698 
  Routine SEXTRP was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 705 
  A loop starting at line 705 was not vectorized because it contains a reference to a non-vector intrinsic on line 708.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 717 
  A loop starting at line 717 was not vectorized because it contains a reference to a non-vector intrinsic on line 720.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 733 
  A loop starting at line 733 was not vectorized because it contains a reference to a non-vector intrinsic on line 735.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 741 
  Routine SEASFC was not inlined because the call nest is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 755 
  A loop starting at line 755 was not vectorized because it contains a reference to a non-vector intrinsic on line 756.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 798 
  A loop starting at line 798 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 799 
  A loop starting at line 799 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 800 
  A loop starting at line 800 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 801 
  A loop starting at line 801 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 802 
  A loop starting at line 802 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 803 
  A loop starting at line 803 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 804 
  A loop starting at line 804 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 805 
  A loop starting at line 805 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 806 
  A loop starting at line 806 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 807 
  A loop starting at line 807 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 808 
  A loop starting at line 808 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 809 
  A loop starting at line 809 was not vectorized because a better candidate was found at line 810.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 810 
  A loop starting at line 810 was not vectorized because it contains a reference to a non-vector intrinsic on line 811.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 826 
  Routine WHEAT was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 895 
  A loop starting at line 895 was not vectorized because it contains a reference to a non-vector intrinsic on line 896.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1165 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1168 
  A loop starting at line 1168 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1170 
  A loop starting at line 1170 was not vectorized because it contains a reference to a non-vector intrinsic on line 1191.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1260 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1261 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1272 
  A loop starting at line 1272 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1282 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1293 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1394 
  A loop starting at line 1394 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1394 
  A loop starting at line 1394 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1401 
  A loop starting at line 1401 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1461 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1469 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1527 
  A loop starting at line 1527 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1751 
  A loop starting at line 1751 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1755 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1757 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1761 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1764 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1770 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1782 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1787 
  A loop starting at line 1787 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1787 
  A loop starting at line 1787 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1808 
  A loop starting at line 1808 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1839 
  A loop starting at line 1839 was not vectorized because it contains a reference to a non-vector intrinsic on line 1845.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1949 
  A loop starting at line 1949 was not vectorized because it contains a reference to a non-vector intrinsic on line 1951.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1964 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2049 
  A loop starting at line 2049 was not vectorized because it contains a reference to a non-vector intrinsic on line 2052.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2056 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2211 
  A loop starting at line 2211 was not vectorized because it contains a reference to a non-vector intrinsic on line 2213.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2223 
  A loop starting at line 2223 was not vectorized because it contains a reference to a non-vector intrinsic on line 2225.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2250 
  A loop starting at line 2250 was not vectorized because it contains a reference to a non-vector intrinsic on line 2255.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2267 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2278 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2289 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2414 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2415 
  A loop starting at line 2415 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2419 
  A loop starting at line 2419 was not vectorized because it contains a reference to a non-vector intrinsic on line 2420.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2425 
  A loop starting at line 2425 was not vectorized because a better candidate was found at line 2426.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2426 
  A loop starting at line 2426 was not vectorized because it contains a reference to a non-vector intrinsic on line 2429.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2434 
  A loop starting at line 2434 was not vectorized because it contains a reference to a non-vector intrinsic on line 2437.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2458 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2479 
  A loop starting at line 2479 was not vectorized because it contains a reference to a non-vector intrinsic on line 2483.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2510 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2518 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2544 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2552 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2608 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2613 
  A divide was turned into a multiply by a reciprocal

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2784 
  A loop starting at line 2784 was eliminated by optimization.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2790 
  A loop starting at line 2790 was not vectorized because it contains a reference to a non-vector intrinsic on line 2792.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2803 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2847 
  A loop starting at line 2847 was not vectorized because it contains a reference to a non-vector intrinsic on line 2850.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2851 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2856 
  A loop starting at line 2856 was not vectorized because it contains a reference to a non-vector intrinsic on line 2858.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3022 
  A loop starting at line 3022 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3022 
  A loop starting at line 3022 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3040 
  A loop starting at line 3040 was not vectorized because it contains a reference to a non-vector intrinsic on line 3042.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3050 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3053 
  A loop starting at line 3053 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3053 
  A loop starting at line 3053 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3062 
  A loop starting at line 3062 was fused with the loop starting at line 3040.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3068 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3071 
  A loop starting at line 3071 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3071 
  A loop starting at line 3071 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3078 
  A loop starting at line 3078 was not vectorized because it contains a reference to a non-vector intrinsic on line 3080.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3084 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3087 
  A loop starting at line 3087 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3087 
  A loop starting at line 3087 was vectorized.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3443 
  A loop starting at line 3443 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3444 
  A loop starting at line 3444 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3444 
  A loop starting at line 3444 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3445 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3446 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3447 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3448 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3457 
  A loop starting at line 3457 was not vectorized because it contains a reference to a non-vector intrinsic on line 3457.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3457 
  The call to AIRMOD was textually inlined.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3463 
  A loop starting at line 3463 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3470 
  A loop starting at line 3470 was not vectorized because it contains a reference to a non-vector intrinsic on line 3481.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3518 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3519 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3526 
  A loop starting at line 3526 was not vectorized because it contains a reference to a non-vector intrinsic on line 3555.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3528 
  A loop starting at line 3528 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3528 
  A loop starting at line 3528 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3529 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3541 
  A loop starting at line 3541 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3541 
  A loop starting at line 3541 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3542 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3555 
  A loop starting at line 3555 was not vectorized because it contains a reference to a non-vector intrinsic on line 3555.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3555 
  The call to VNTLAX was inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3562 
  A loop starting at line 3562 was not vectorized because it contains a reference to a non-vector intrinsic on line 3562.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3562 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3562 
  The call to VNTLAX was inlined.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3567 
  A loop starting at line 3567 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3567 
  A loop starting at line 3567 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3568 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3571 
  A loop starting at line 3571 was not vectorized because it contains a reference to a non-vector intrinsic on line 3571.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3571 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3571 
  The call to RBRD was inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3580 
  A loop starting at line 3580 was not vectorized because it contains a reference to a non-vector intrinsic on line 3587.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3581 
  A loop starting at line 3581 was not vectorized because it contains a reference to a non-vector intrinsic on line 3583.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3587 
  A loop starting at line 3587 was not vectorized because it contains a reference to a non-vector intrinsic on line 3587.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3587 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3587 
  The call to VNTLAX was inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3592 
  A loop starting at line 3592 was not vectorized because it contains a reference to a non-vector intrinsic on line 3592.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3592 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3592 
  The call to CUT was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3597 
  A loop starting at line 3597 was not vectorized because it contains a reference to a non-vector intrinsic on line 3597.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3597 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3597 
  The call to STRES2 was inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3603 
  A loop starting at line 3603 was not vectorized because it contains a reference to a non-vector intrinsic on line 3603.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3603 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3603 
  The call to CUT was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3608 
  A loop starting at line 3608 was not vectorized because it contains a reference to a non-vector intrinsic on line 3610.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3610 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3615 
  A loop starting at line 3615 was not vectorized because it contains a reference to a non-vector intrinsic on line 3621.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3626 
  A loop starting at line 3626 was not vectorized for an unspecified reason.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3630 
  A loop starting at line 3630 was replaced with multiple library calls.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3637 
  A loop starting at line 3637 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3640 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3641 
  A statement was replaced by a library call.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3650 
  A loop starting at line 3650 was not vectorized because a recurrence was found on "FC" between lines 3652 and 3675.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3652 
  A loop starting at line 3652 was not vectorized because it contains a reference to a non-vector intrinsic on line 3652.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3652 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3652 
  The call to CUT was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3657 
  A loop starting at line 3657 was not vectorized because it contains a reference to a non-vector intrinsic on line 3659.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3668 
  A loop starting at line 3668 was not vectorized because it contains a reference to a non-vector intrinsic on line 3669.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3687 
  A loop starting at line 3687 was not vectorized for an unspecified reason.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 3691 
  Routine TEMRES was not inlined because it is a leaf routine which is too large to expand. 

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3703 
  A loop starting at line 3703 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3703 
  A loop starting at line 3703 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3712 
  A loop starting at line 3712 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3712 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3712 
  A loop starting at line 3712 was partially vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3712 
  The call to UPDATE was textually inlined.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3719 
  A loop starting at line 3719 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3719 
  A loop starting at line 3719 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3730 
  A loop starting at line 3730 was not vectorized because it contains a reference to a non-vector intrinsic on line 3733.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3904 
  A loop starting at line 3904 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3905 
  A loop starting at line 3905 was not vectorized because it contains a reference to a non-vector intrinsic on line 3915.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3924 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3925 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3926 
  A statement was replaced by a library call.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3958 
  A loop starting at line 3958 was not vectorized because the target array (XSC) would require rank expansion.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3961 
  A loop starting at line 3961 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3961 
  A loop starting at line 3961 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3963 
  A statement was replaced by a library call.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3969 
  A loop starting at line 3969 was replaced with multiple library calls.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3975 
  A loop starting at line 3975 was unrolled 4 times.

ftn-6213 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3975 
  A loop starting at line 3975 was conditionally vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3989 
  A loop starting at line 3989 was not vectorized because it contains a reference to a non-vector intrinsic on line 4001.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4030 
  A loop starting at line 4030 was not vectorized because it contains a reference to a non-vector intrinsic on line 4038.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4053 
  A loop starting at line 4053 was not vectorized because it contains a reference to a non-vector intrinsic on line 4069.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4059 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4083 
  A loop starting at line 4083 was not vectorized because it contains a reference to a non-vector intrinsic on line 4086.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4102 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4115 
  A loop starting at line 4115 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4115 
  A loop starting at line 4115 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4123 
  A loop starting at line 4123 was not vectorized because it contains a reference to a non-vector intrinsic on line 4125.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4130 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4133 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4142 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4145 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4152 
  A loop starting at line 4152 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4152 
  A loop starting at line 4152 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4159 
  A loop starting at line 4159 was not vectorized because it contains a reference to a non-vector intrinsic on line 4162.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4175 
  A loop starting at line 4175 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4175 
  A loop starting at line 4175 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4187 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4193 
  A loop starting at line 4193 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4193 
  A loop starting at line 4193 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4289 
  A loop starting at line 4289 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4289 
  A loop starting at line 4289 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4293 
  A loop starting at line 4293 was not vectorized because a better candidate was found at line 4295.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4294 
  A loop starting at line 4294 was not vectorized because a better candidate was found at line 4295.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4295 
  A loop starting at line 4295 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4295 
  A loop starting at line 4295 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4311 
  A loop starting at line 4311 was not vectorized because it contains a reference to a non-vector intrinsic on line 4312.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4344 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4443 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4448 
  A loop starting at line 4448 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4513 
  A loop starting at line 4513 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4513 
  A loop starting at line 4513 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4527 
  A loop starting at line 4527 was not vectorized because a better candidate was found at line 4530.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4528 
  A loop starting at line 4528 was not vectorized because a recurrence was found on "RADT" at line 4531.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4529 
  A loop starting at line 4529 was not vectorized because a recurrence was found on "RADT" at line 4531.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4529 
  A loop starting at line 4529 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4530 
  A loop starting at line 4530 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4530 
  A loop starting at line 4530 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4530 
  A loop starting at line 4530 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4540 
  A loop starting at line 4540 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4540 
  A loop starting at line 4540 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4619 
  A loop starting at line 4619 was not vectorized because a better candidate was found at line 4620.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4620 
  A loop starting at line 4620 was not vectorized because it contains a reference to a non-vector intrinsic on line 4631.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4647 
  A loop starting at line 4647 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4647 
  A loop starting at line 4647 was vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4650 
  A loop starting at line 4650 was not vectorized because a recurrence was found on "PHROOT" at line 4652.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4650 
  A loop starting at line 4650 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4651 
  A loop starting at line 4651 was blocked with block size 512.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4651 
  A loop starting at line 4651 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4651 
  A loop starting at line 4651 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4655 
  A loop starting at line 4655 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4655 
  A loop starting at line 4655 was vectorized.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5019 
  A loop starting at line 5019 was blocked with block size 0.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5019 
  A loop starting at line 5019 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5019 
  A loop starting at line 5019 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5019 
  The call to ROOT was textually inlined.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5021 
  A loop starting at line 5021 was blocked with block size 0.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5021 
  A loop starting at line 5021 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5021 
  A loop starting at line 5021 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5021 
  The call to RADUSE was textually inlined.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5024 
  A loop starting at line 5024 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5024 
  A loop starting at line 5024 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5024 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5024 
  A loop starting at line 5024 was conditionally vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5024 
  The call to STOMAT was textually inlined.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5027 
  Routine INTERC was not inlined because it is a leaf routine which is too large to expand. 

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 5034 
  Routine SFLXES was not inlined because the call nest is too large to expand. 

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5147 
  A loop starting at line 5147 was replaced by a library call.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5148 
  A divide was turned into a multiply by a reciprocal

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5150 
  A loop starting at line 5150 was not vectorized because the target array (TTA) would require rank expansion.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5153 
  A loop starting at line 5153 was replaced with multiple library calls.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5162 
  A loop starting at line 5162 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5162 
  A loop starting at line 5162 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5164 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5171 
  A loop starting at line 5171 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5171 
  A loop starting at line 5171 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5176 
  A loop starting at line 5176 was not vectorized because it contains a reference to a non-vector intrinsic on line 5178.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5185 
  A loop starting at line 5185 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5185 
  A loop starting at line 5185 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5189 
  A loop starting at line 5189 was not vectorized because it contains a reference to a non-vector intrinsic on line 5191.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5214 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5234 
  A loop starting at line 5234 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5234 
  A loop starting at line 5234 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5241 
  A loop starting at line 5241 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5241 
  A loop starting at line 5241 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5683 
  A loop starting at line 5683 was not vectorized because it contains a reference to a non-vector intrinsic on line 5688.

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 5696 
  Routine AIRMOD was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 5696 
  Routine PBL was not inlined because the call nest is too large to expand. 

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5718 
  A loop starting at line 5718 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5718 
  A loop starting at line 5718 was vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5725 
  A loop starting at line 5725 was not vectorized because a recurrence was found on "W" at line 5729.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5726 
  A loop starting at line 5726 was not vectorized because it contains a reference to a non-vector intrinsic on line 5729.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5737 
  Routine SNOWM was not inlined because it is a leaf routine which is too large to expand. 

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5743 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5745 
  A loop starting at line 5745 was not vectorized because it contains a reference to a non-vector intrinsic on line 5754.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5752 
  A loop starting at line 5752 was fused with the loop starting at line 5745.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5759 
  A loop starting at line 5759 was not vectorized because the target array (EF) would require rank expansion.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5761 
  A loop starting at line 5761 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5761 
  A loop starting at line 5761 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5765 
  A loop starting at line 5765 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5765 
  A loop starting at line 5765 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5769 
  A loop starting at line 5769 was not vectorized because it contains a reference to a non-vector intrinsic on line 5773.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5775 
  A loop starting at line 5775 was not vectorized because the target array (DIV) would require rank expansion.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5776 
  A loop starting at line 5776 was not vectorized because it contains a reference to a non-vector intrinsic on line 5779.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5786 
  A loop starting at line 5786 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5786 
  A loop starting at line 5786 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5789 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5792 
  A loop starting at line 5792 was not vectorized because a better candidate was found at line 5793.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5793 
  A loop starting at line 5793 was not vectorized because it contains a reference to a non-vector intrinsic on line 5795.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5804 
  A loop starting at line 5804 was not vectorized because a recurrence was found on "W" at line 5808.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5804 
  A loop starting at line 5804 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5805 
  A loop starting at line 5805 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5805 
  A loop starting at line 5805 was not vectorized because it contains a reference to a non-vector intrinsic on line 5807.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5815 
  Routine RUNOFF was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5818 
  A loop starting at line 5818 was not vectorized because it contains a reference to a non-vector intrinsic on line 5821.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5840 
  A loop starting at line 5840 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5840 
  A loop starting at line 5840 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5864 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5867 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5876 
  A loop starting at line 5876 was not vectorized because it contains a reference to a non-vector intrinsic on line 5878.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5878 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5893 
  A divide was turned into a multiply by a reciprocal

ftn-6262 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5901 
  A loop starting at line 5901 was not vectorized because it contains a call to a subroutine or function on line 5906.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6024 
  A loop starting at line 6024 was not vectorized because it contains a reference to a non-vector intrinsic on line 6026.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6032 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6036 
  A loop starting at line 6036 was not vectorized because it contains a reference to a non-vector intrinsic on line 6038.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6042 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6063 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6064 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6069 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6254 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6258 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6263 
  A loop starting at line 6263 was not vectorized because it contains a reference to a non-vector intrinsic on line 6265.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6279 
  A loop starting at line 6279 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6280 
  A loop starting at line 6280 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6281 
  A loop starting at line 6281 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6284 
  A loop starting at line 6284 was not vectorized because it contains a reference to a non-vector intrinsic on line 6286.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6286 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6286 
  A loop starting at line 6286 was not vectorized because it contains a reference to a non-vector intrinsic on line 6286.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 6286 
  The call to VNTLT1 was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6290 
  A loop starting at line 6290 was not vectorized because it contains a reference to a non-vector intrinsic on line 6292.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6299 
  A loop starting at line 6299 was not vectorized because it contains a reference to a non-vector intrinsic on line 6302.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6320 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6339 
  A loop starting at line 6339 was not vectorized because it contains a reference to a non-vector intrinsic on line 6342.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6348 
  A loop starting at line 6348 was not vectorized because it contains a reference to a non-vector intrinsic on line 6350.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6371 
  A loop starting at line 6371 was not vectorized because it contains a reference to a non-vector intrinsic on line 6373.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6378 
  A divide was turned into a multiply by a reciprocal

ftn-6262 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6432 
  A loop starting at line 6432 was not vectorized because it contains a call to a subroutine or function on line 6450.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6433 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6434 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6435 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6437 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6454 
  A loop starting at line 6454 was not vectorized because it contains a reference to a non-vector intrinsic on line 6463.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6480 
  A loop starting at line 6480 was not vectorized because it contains a reference to a non-vector intrinsic on line 6491.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6481 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6483 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6484 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6485 
  A statement was replaced by a library call.

ftn-6262 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6493 
  A loop starting at line 6493 was not vectorized because it contains a call to a subroutine or function on line 6511.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6494 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6496 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6497 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6498 
  A statement was replaced by a library call.

ftn-6262 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6516 
  A loop starting at line 6516 was not vectorized because it contains a call to a subroutine or function on line 6534.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6517 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6519 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6520 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6521 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6537 
  A loop starting at line 6537 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6537 
  A loop starting at line 6537 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6538 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6539 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6540 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6541 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6542 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6613 
  A loop starting at line 6613 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6613 
  A loop starting at line 6613 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6614 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6615 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6616 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6617 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6618 
  A statement was replaced by a library call.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 6626 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6635 
  A loop starting at line 6635 was not vectorized because it contains a reference to a non-vector intrinsic on line 6638.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6809 
  A loop starting at line 6809 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6809 
  A loop starting at line 6809 was vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6820 
  A loop starting at line 6820 was not vectorized because it contains a reference to a non-vector intrinsic on line 6824.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6827 
  A loop starting at line 6827 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6828 
  A loop starting at line 6828 was not vectorized because it contains a reference to a non-vector intrinsic on line 6832.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6838 
  A loop starting at line 6838 was not vectorized because it contains a reference to a non-vector intrinsic on line 6841.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6845 
  A loop starting at line 6845 was fused with the loop starting at line 6820.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6856 
  A loop starting at line 6856 was replaced by a library call.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6857 
  A loop starting at line 6857 was not vectorized because it required a vector test not supported on this architecture.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6857 
  A loop starting at line 6857 was unrolled 8 times.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6864 
  A loop starting at line 6864 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6866 
  A loop starting at line 6866 was not vectorized because it contains a reference to a non-vector intrinsic on line 6869.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6877 
  A loop starting at line 6877 was not vectorized because a better candidate was found at line 6878.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6877 
  A loop starting at line 6877 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6878 
  A loop starting at line 6878 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6878 
  A loop starting at line 6878 was not vectorized because it contains a reference to a non-vector intrinsic on line 6879.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6882 
  A loop starting at line 6882 was not vectorized because a better candidate was found at line 6883.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6882 
  A loop starting at line 6882 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6883 
  A loop starting at line 6883 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6883 
  A loop starting at line 6883 was not vectorized because it contains a reference to a non-vector intrinsic on line 6884.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6890 
  A loop starting at line 6890 was not vectorized because it required a vector test not supported on this architecture.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6890 
  A loop starting at line 6890 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6894 
  A loop starting at line 6894 was not vectorized because a better candidate was found at line 6895.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6895 
  A loop starting at line 6895 was not vectorized because it contains a reference to a non-vector intrinsic on line 6897.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6903 
  A loop starting at line 6903 was not vectorized because it required a vector test not supported on this architecture.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6904 
  A loop starting at line 6904 was not vectorized because a better candidate was found at line 6905.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6905 
  A loop starting at line 6905 was not vectorized because it contains a reference to a non-vector intrinsic on line 6910.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6916 
  A loop starting at line 6916 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6916 
  A loop starting at line 6916 was not vectorized because it contains a reference to a non-vector intrinsic on line 6918.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6917 
  A loop starting at line 6917 was not vectorized because a better candidate was found at line 6916.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6917 
  A loop starting at line 6917 was blocked with block size 256.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6930 
  A loop starting at line 6930 was not vectorized because a recurrence was found on "XM1" between lines 6944 and 6965.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6934 
  A loop starting at line 6934 was not vectorized for an unspecified reason.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6952 
  A loop starting at line 6952 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6952 
  A loop starting at line 6952 was partially vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6958 
  A loop starting at line 6958 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6958 
  A loop starting at line 6958 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6965 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6969 
  A loop starting at line 6969 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6969 
  A loop starting at line 6969 was partially vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6982 
  A loop starting at line 6982 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6982 
  A loop starting at line 6982 was partially vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6988 
  A loop starting at line 6988 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6988 
  A loop starting at line 6988 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6995 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6999 
  A loop starting at line 6999 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6999 
  A loop starting at line 6999 was partially vectorized.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7008 
  A loop starting at line 7008 was not vectorized because it contains a reference to a non-vector intrinsic on line 7027.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7025 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7032 
  A loop starting at line 7032 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7037 
  A loop starting at line 7037 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7037 
  A loop starting at line 7037 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7205 
  A loop starting at line 7205 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7206 
  A loop starting at line 7206 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7207 
  A loop starting at line 7207 was fused with the loop starting at line 7206.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7208 
  A loop starting at line 7208 was fused with the loop starting at line 7206.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7209 
  A loop starting at line 7209 was fused with the loop starting at line 7206.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7210 
  A loop starting at line 7210 was fused with the loop starting at line 7206.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7211 
  A loop starting at line 7211 was fused with the loop starting at line 7206.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7212 
  A loop starting at line 7212 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7213 
  A loop starting at line 7213 was fused with the loop starting at line 7206.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7214 
  A loop starting at line 7214 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7215 
  A loop starting at line 7215 was fused with the loop starting at line 7214.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7216 
  A loop starting at line 7216 was fused with the loop starting at line 7214.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7217 
  A loop starting at line 7217 was fused with the loop starting at line 7214.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7218 
  A loop starting at line 7218 was vectorized.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7219 
  A loop starting at line 7219 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7220 
  A loop starting at line 7220 was fused with the loop starting at line 7219.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7221 
  A loop starting at line 7221 was fused with the loop starting at line 7219.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7222 
  A loop starting at line 7222 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7223 
  A loop starting at line 7223 was fused with the loop starting at line 7222.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7224 
  A loop starting at line 7224 was fused with the loop starting at line 7222.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7225 
  A loop starting at line 7225 was fused with the loop starting at line 7222.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7226 
  A loop starting at line 7226 was fused with the loop starting at line 7222.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7227 
  A loop starting at line 7227 was fused with the loop starting at line 7222.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7231 
  A loop starting at line 7231 was not vectorized because it does not map well onto the target architecture.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7232 
  A loop starting at line 7232 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7233 
  A loop starting at line 7233 was fused with the loop starting at line 7232.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7233 
  A loop starting at line 7233 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7234 
  A loop starting at line 7234 was fused with the loop starting at line 7232.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7234 
  A loop starting at line 7234 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7235 
  A loop starting at line 7235 was fused with the loop starting at line 7232.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7236 
  A loop starting at line 7236 was fused with the loop starting at line 7232.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7237 
  A loop starting at line 7237 was fused with the loop starting at line 7231.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7238 
  A loop starting at line 7238 was fused with the loop starting at line 7232.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7239 
  A loop starting at line 7239 was not vectorized because it does not map well onto the target architecture.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7240 
  A loop starting at line 7240 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7241 
  A loop starting at line 7241 was fused with the loop starting at line 7240.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7248 
  A loop starting at line 7248 was not vectorized because it contains a reference to a non-vector intrinsic on line 7251.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7249 
  A loop starting at line 7249 was not vectorized because a better candidate was found at line 7248.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7250 
  A loop starting at line 7250 was not vectorized because a better candidate was found at line 7248.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7250 
  A loop starting at line 7250 was unrolled 4 times.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7256 
  A loop starting at line 7256 was not vectorized because a better candidate was found at line 7260.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7260 
  A loop starting at line 7260 was not vectorized because it does not map well onto the target architecture.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7275 
  A loop starting at line 7275 was interchanged with the loop starting at line 7276.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7275 
  A loop starting at line 7275 was not vectorized because it contains a reference to a non-vector intrinsic on line 7279.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7276 
  A loop starting at line 7276 was not vectorized because a better candidate was found at line 7275.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7276 
  A loop starting at line 7276 was fused with the loop starting at line 7256.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7285 
  A loop starting at line 7285 was interchanged with the loop starting at line 7286.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7285 
  A loop starting at line 7285 was not vectorized because it does not map well onto the target architecture.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7286 
  A loop starting at line 7286 was not vectorized because a better candidate was found at line 7285.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7304 
  A loop starting at line 7304 was not vectorized because it does not map well onto the target architecture.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7304 
  A loop starting at line 7304 was unwound.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7324 
  A divide was turned into a multiply by a reciprocal

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7328 
  A loop starting at line 7328 was not vectorized because it does not map well onto the target architecture.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7334 
  A loop starting at line 7334 was vectorized.

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7368 
  A loop starting at line 7368 was eliminated by optimization.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7512 
  A loop starting at line 7512 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7513 
  A loop starting at line 7513 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7514 
  A loop starting at line 7514 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7524 
  A loop starting at line 7524 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7525 
  A loop starting at line 7525 was not vectorized because it contains a reference to a non-vector intrinsic on line 7536.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7541 
  A loop starting at line 7541 was not vectorized because a better candidate was found at line 7542.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7542 
  A loop starting at line 7542 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7542 
  A loop starting at line 7542 was vectorized.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7551 
  A loop starting at line 7551 was unwound.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7551 
  A loop starting at line 7551 was unrolled 4 times.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7551 
  A loop starting at line 7551 was not vectorized because a recurrence was found on "KMON" between lines 7552 and 7556.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7559 
  A loop starting at line 7559 was not vectorized because it contains a reference to a non-vector intrinsic on line 7562.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7562 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7567 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7568 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7569 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7570 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7571 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7574 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7575 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7577 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7579 
  A loop starting at line 7579 was not vectorized because a better candidate was found at line 7580.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7579 
  A loop starting at line 7579 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7580 
  A loop starting at line 7580 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7580 
  A loop starting at line 7580 was not vectorized because it contains a reference to a non-vector intrinsic on line 7585.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7590 
  A loop starting at line 7590 was not vectorized because a recurrence was found on "XGREEN" between lines 7599 and 7600.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7590 
  A loop starting at line 7590 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7591 
  A loop starting at line 7591 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7591 
  A loop starting at line 7591 was not vectorized because it contains a reference to a non-vector intrinsic on line 7596.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7606 
  A loop starting at line 7606 was not vectorized because the target array (DIFF1) would require rank expansion.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7607 
  A loop starting at line 7607 was not vectorized because a recurrence was found on "ICOND" between lines 7625 and 7636.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7667 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7677 
  A loop starting at line 7677 was not vectorized because it contains a reference to a non-vector intrinsic on line 7679.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7796 
  A loop starting at line 7796 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7797 
  A loop starting at line 7797 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7798 
  A loop starting at line 7798 was vectorized.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7799 
  A loop starting at line 7799 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7800 
  A loop starting at line 7800 was replaced by a library call.

ftn-6262 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7805 
  A loop starting at line 7805 was not vectorized because it contains a call to a subroutine or function on line 7847.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7817 
  A loop starting at line 7817 was not vectorized because it contains a reference to a non-vector intrinsic on line 7820.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7859 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7866 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7872 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7878 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7896 
  A loop starting at line 7896 was not vectorized because a recurrence was found on "TIMES" at line 7913.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7897 
  A divide was turned into a multiply by a reciprocal

ftn-6009 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7897 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7897 
  An exponentiation was replaced with a faster code sequence.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 7897 
  The call to EXTRAK was textually inlined.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7913 
  A divide was turned into a multiply by a reciprocal

ftn-6009 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7914 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7923 
  A loop starting at line 7923 was not vectorized because a recurrence was found on "ITSOIL" between lines 7937 and 7944.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7924 
  A loop starting at line 7924 was not vectorized because a recurrence was found on "ITSOIL" between lines 7937 and 7944.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7928 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7935 
  A divide was turned into a multiply by a reciprocal

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7936 
  A loop starting at line 7936 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7940 
  A loop starting at line 7940 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7945 
  A loop starting at line 7945 was not vectorized for an unspecified reason.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8084 
  A loop starting at line 8084 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8085 
  A loop starting at line 8085 was replaced by a library call.

ftn-6262 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8090 
  A loop starting at line 8090 was not vectorized because it contains a call to a subroutine or function on line 8127.

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8101 
  A loop starting at line 8101 was eliminated by optimization.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8130 
  A divide was turned into a multiply by a reciprocal

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8138 
  A loop starting at line 8138 was eliminated by optimization.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8139 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 8139 
  The call to EXTRAK was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8161 
  A loop starting at line 8161 was not vectorized because it contains a reference to a non-vector intrinsic on line 8198.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8162 
  A loop starting at line 8162 was not vectorized because it contains a reference to a non-vector intrinsic on line 8198.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8164 
  A loop starting at line 8164 was not vectorized because it does not map well onto the target architecture.

ftn-6284 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8181 
  A loop starting at line 8181 was not vectorized because it is faster in scalar mode.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8181 
  A loop starting at line 8181 was unwound.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8188 
  A loop starting at line 8188 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8188 
  A loop starting at line 8188 was partially vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8195 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8195 
  A loop starting at line 8195 was unrolled 4 times.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8195 
  A loop starting at line 8195 with a trip count of 4 was unwound into 2 vector iterations.

ftn-6381 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8195 
  A loop starting at line 8195 was vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8195 
  A loop starting at line 8195 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 8195 
  The call to VERT_INTERP was textually inlined.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8207 
  A loop starting at line 8207 was partially vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8260 
  A loop starting at line 8260 was fused with the loop starting at line 8207.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8262 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8301 
  A divide was turned into a multiply by a reciprocal

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8301 
  An exponentiation was replaced with a faster code sequence.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8311 
  A divide was turned into a multiply by a reciprocal

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8311 
  An exponentiation was replaced with a faster code sequence.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8317 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8376 
  A loop starting at line 8376 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8376 
  A loop starting at line 8376 was partially vectorized.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8380 
  A loop starting at line 8380 was replaced by a library call.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8397 
  A loop starting at line 8397 was fused with the loop starting at line 8376.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8404 
  A loop starting at line 8404 was replaced by a library call.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8414 
  A loop starting at line 8414 was not vectorized because a recurrence was found on "DZLFT" at line 8441.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8426 
  A loop starting at line 8426 was not vectorized for an unspecified reason.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8447 
  A loop starting at line 8447 was not vectorized because it contains a reference to a non-vector intrinsic on line 8453.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8461 
  A loop starting at line 8461 was replaced by a library call.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 C r o s s   R e f e r e n c e   for   SFC_SSIB
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

1000                                                              Statement label
  Decl    8445
  Set 
  Used    8436

200                                                               FORMAT label
  Decl    6550
  Set 
  Used

2000                                                              Statement label
  Decl    3580
  Set 
  Used    3627

3000                                                              Statement label
  Decl    3650
  Set 
  Used    3688

650                                                               FORMAT label
  Decl    6552
  Set 
  Used

70                                                                Statement label
  Decl    8426
  Set 
  Used    8437

7000                                                              Statement label
  Decl    3526
  Set 
  Used    3709

8000                                                              Statement label
  Decl    6284
  Set 
  Used    6346

998                                                               FORMAT label
  Decl    5918
  Set 
  Used

999                                                               FORMAT label
  Decl    5919
  Set 
  Used

999                                                               FORMAT label
  Decl    8277
  Set 
  Used

999                                                               FORMAT label
  Decl    7958
  Set 
  Used

AA                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4270
  Set     4377
  Used    4379    4407    4408

AA                                                                REAL(KIND=8), PARAMETER
  Decl    6008
  Set 
  Used    6055

AAA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5664
  Set     5861
  Used    5863    5864    5865

AAA_1                           Stack                             REAL(KIND=8)
  Decl    2381
  Set     2518
  Used    2593    2598

AAA_2                           Stack                             REAL(KIND=8)
  Decl    2381
  Set     2552
  Used    2593    2597

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0    2496    2595    3618    5209    5911    6029    6327    6362    6642
          6823    7536    7538    7567    7568    7569    7570    7571    7575

ABSOIL                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5660
  Set     5762    5766
  Used    5795

AH                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1132
  Set     1255
  Used    1646    1647    1650    1746

AH                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6193
  Set     6267
  Used    6313    6331    6332    6353

AIRMOD                                                            Subroutine, Module procedure, PRIVATE
  Decl     836
  Set 
  Used    3457

AK                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1131
  Set     1246
  Used    1574    1576    1636    1738

AL                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6194
  Set     6268
  Used    6316    6317    6319    6333    6334    6354

ALBEDO                                                            Subroutine, Module procedure
  Decl      87    6556
  Set 
  Used

AM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6195
  Set     6375
  Used    6376    6377    6378    6379

ANIRB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6565    6603
  Set     6640    6648    6653
  Used

ANIRD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6566    6604
  Set     6641    6649    6654
  Used

AP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3853
  Set     3904    3906    3915
  Used    4039    4059    4095    4103

AREAS                           Stack                             REAL(KIND=8)
  Decl    2397
  Set     2507    2541
  Used    2508    2542

ARG                             Stack                             REAL(KIND=8)
  Decl    2777
  Set     2835    2836
  Used    2837

ARG                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3871
  Set     4038    4095
  Used    4040    4046    4096    4097

ARGG                            Stack                             REAL(KIND=8)
  Decl    8293
  Set     8317
  Used    8325

AT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4267
  Set     4321    4363
  Used    4338    4369    4370    4391    4392    4398

ATHIRD                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    4308

AVFLUX                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4276
  Set     4407
  Used    4414

AVISB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6565    6601
  Set     6638    6646    6651
  Used

AVISD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6565    6602
  Set     6639    6647    6652
  Used

AVK                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2380
  Set     2494    2497    2499    2500    2512    2528    2531    2533    2534    2546
  Used    2518    2521    2522    2552    2555    2556

B00                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6216
  Set     6303    6320
  Used    6322

B03                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6217
  Set     6306
  Used    6320    6321

B04                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6218
  Set     6307
  Used    6320    6321

B30                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6220
  Set     6313
  Used    6314    6315    6320    6324

B33                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6221
  Set     6314
  Used    6320    6321    6324

B40                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6223
  Set     6316
  Used    6320    6325

B44                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6224
  Set     6317
  Used    6320    6321    6325

BB                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4271
  Set     4379
  Used    4407    4408

BB                                                                REAL(KIND=8), PARAMETER
  Decl    6009
  Set 
  Used    6055

BBB_1                           Stack                             REAL(KIND=8)
  Decl    2382
  Set     2521
  Used    2593    2597

BBB_2                           Stack                             REAL(KIND=8)
  Decl    2382
  Set     2555
  Used    2593    2598

BEAM_NIRB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     382
  Set 
  Used     514

BEAM_NIRD                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     383
  Set 
  Used     515

BEAM_VISB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     380
  Set 
  Used     512

BEAM_VISD                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     381
  Set 
  Used     513

BEE                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     136
  Set     7214    7299
  Used    2429    2430    2448    2483    2484    2488    2498    2532    3489    4631    7159    7811    8095    8173

BEE_R4                          Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7084
  Set 
  Used    7202    7214

BP                                                                REAL(KIND=8), PARAMETER
  Decl    3888
  Set 
  Used    4046    4059    4097    4103

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     329
  Set 
  Used     539     662

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     914    1106
  Set 
  Used    1246    1301    1359    1385

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2074    2158
  Set 
  Used    2255

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2879    2994
  Set 
  Used    3031

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3104    3359
  Set 
  Used    3556    3563    3568    3569    3588    3610    3692    3713    3721

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4673    4958
  Set 
  Used    5036

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5266    5595
  Set 
  Used    5701    5869

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     276
  Set 
  Used     552     675

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1057
  Set 
  Used    1500    1510    1797

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2960
  Set 
  Used    3037

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3319
  Set     3646
  Used    3697    3715

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4899
  Set 
  Used    5041

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5542
  Set 
  Used    5707

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     277
  Set 
  Used     552     675

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1058
  Set 
  Used    1502    1516    1799    1829

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2961
  Set 
  Used    3038

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3320
  Set     3647
  Used    3697    3715

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4900
  Set 
  Used    5042

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5543
  Set 
  Used    5707

C0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6219
  Set     6279    6310    6321    6322
  Used    6323    6324    6325    6364

C3                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6222
  Set     6315
  Used    6321    6324

C4                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6225
  Set     6318
  Used    6321    6325

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     219     260
  Set      586     587
  Used     699

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     836     888
  Set 
  Used     896     899

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     921    1044
  Set 
  Used    1178    1185    1192    1810    1812    1814    1816

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2314    2368
  Set 
  Used    2507    2541

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    2882    2950
  Set     3072    3088
  Used

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3112    3303
  Set 
  Used    3458    3472    3473    3513    3699    3716

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3759    3836
  Set     3983    4006    4076    4136    4148    4167    4185
  Used    3981    3994    4001    4003    4010    4116    4163    4165    4195    4196

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4683    4883
  Set 
  Used    5029    5044

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5056    5106
  Set     5179    5216    5230    5235
  Used    5178    5197    5225    5228

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5276    5526
  Set     5730
  Used    5691    5711    5728    5729    5739    5816    5881    5907

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6398    6413
  Set 
  Used    6441    6442    6473    6477    6502    6503    6525    6526    6546    6547

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(OUT)
  Decl    6559    6577
  Set     6619    6620
  Used

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6666    6752
  Set 
  Used    6832    6841    6849

CAPAC0                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     224     398
  Set 
  Used     700

CAPAC0                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6399    6418
  Set     6441    6442    6472    6476    6502    6503    6546    6547
  Used    6450    6471    6475    6489    6490    6511

CAPACI                          Stack                             REAL(KIND=8)
  Decl    3432
  Set     3468
  Used    3513

CAPACI                          Stack                             REAL(KIND=8)
  Decl    6796
  Set     6844
  Used    6849

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     223     386
  Set 
  Used     586     587     700

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6399    6423
  Set     6489    6490    6525    6526
  Used    6473    6477    6491    6534

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6561    6584
  Set 
  Used    6619    6620

CAPACP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3883
  Set     3996    4001
  Used    4006    4117    4129

CAPI                                                              REAL(KIND=8), PARAMETER
  Decl    1150
  Set 
  Used    1192

CBAL                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5677
  Set     5893
  Used    5911

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     287
  Set 
  Used     554     677

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1063
  Set 
  Used    1261

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2962
  Set 
  Used    3054

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3327
  Set 
  Used    3697    3715

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3758    3841
  Set     4195
  Used

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4910
  Set 
  Used    5028    5042

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5055    5111
  Set 
  Used    5154

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5553
  Set 
  Used    5708    5738

CCC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3880
  Set     4129    4130    4141    4142
  Used    4131    4133    4143    4145

CCC_1                           Stack                             REAL(KIND=8)
  Decl    2383
  Set     2522
  Used    2597    2598

CCC_2                           Stack                             REAL(KIND=8)
  Decl    2383
  Set     2556
  Used    2597    2598

CCI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1133
  Set     1261
  Used    1553    1555    1562    1564    1703

CCP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3865
  Set     4118
  Used    4120    4131    4132    4143    4144

CCT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3866
  Set     4119
  Used    4120    4131    4132    4143    4144

CCT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5124
  Set     5147    5154    5163
  Used    5166    5193    5202

CEDFU                           Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     102
  Set     7231
  Used    6912    7124

CEDFU1                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     104
  Set     7233
  Used    6970    6971    6972    7126

CEDFU1_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3)
  Decl    7101
  Set 
  Used    7229    7233

CEDFU2                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     106
  Set     7235
  Used    6924    6925    6926    7000    7001    7002    7128

CEDFU2_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3)
  Decl    7103
  Set 
  Used    7229    7235

CEDFU_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 9)
  Decl    7099
  Set 
  Used    7229    7231

CEDIR                           Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     103
  Set     7232
  Used    6910    6911    7125

CEDIR1                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     105
  Set     7234
  Used    6953    6954    6955    6959    6960    6961    6962    6963    6964    7127

CEDIR1_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3, 3)
  Decl    7102
  Set 
  Used    7229    7234

CEDIR2                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     107
  Set     7236
  Used    6921    6922    6923    6983    6984    6985    6989    6990    6991    6992    6993    6994    7129

CEDIR2_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3, 3)
  Decl    7104
  Set 
  Used    7229    7236

CEDIR_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 9, 3)
  Decl    7100
  Set 
  Used    7229    7232

CETHER                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     111
  Set     7239
  Used    7027    7028    7029    7030    7133

CETHER_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7107
  Set 
  Used    7230    7239

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     288
  Set 
  Used     555     678

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1064
  Set 
  Used    1260

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2963
  Set 
  Used    3055

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3328
  Set 
  Used    3698    3716

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3758    3842
  Set     4197
  Used

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4911
  Set 
  Used    5028    5042

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5055    5112
  Set 
  Used    5163    5242

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5554
  Set 
  Used    5709    5738    5746

CGI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1134
  Set     1260
  Used    1546    1547    1548    1549    1682

CHANGE                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5137
  Set     5210    5212    5214
  Used    5215    5216

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     321
  Set 
  Used     548     671

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2983
  Set     3054
  Used

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3354
  Set 
  Used    3714

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4993
  Set 
  Used    5040

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5055    5119
  Set 
  Used    5157

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5587
  Set 
  Used    5700    5738    5893    5913

CHIL                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     160
  Set      808
  Used    7183

CHIL2                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     437
  Set      459
  Used

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4209    4251
  Set 
  Used    4377

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4684    4941
  Set 
  Used    5025

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5278    5623
  Set 
  Used    5712

CHILW                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7467
  Set     7610    7668
  Used    7685

CHIL_FIXED                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     128
  Set     7206    7289
  Used     808     814    7151    7264

CHIL_GBL                        Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     165
  Set      814    7685
  Used     198     459

CHIL_R4                         Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7076
  Set 
  Used    7201    7206

CHISL                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3858
  Set     3938    3940
  Used    3949

CICE                                                              REAL(KIND=8), PARAMETER
  Decl    6249
  Set 
  Used    6258

CLAI                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3966    4195

CLEDFU                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     108
  Set     7237
  Used    6899    7130

CLEDFU_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 9)
  Decl    7105
  Set 
  Used    7230    7237

CLEDIR                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     109
  Set     7238
  Used    6897    6898    7131

CLEDIR_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 9, 3)
  Decl    7106
  Set 
  Used    7230    7238

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     298
  Set 
  Used     531     557     625     680

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4460    4498
  Set 
  Used    4541

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4682    4921
  Set 
  Used    5021

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5275    5564
  Set 
  Used    5710

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6562    6589
  Set 
  Used    6629

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6667    6756
  Set     7047    7048
  Used

COC                             Stack                             REAL(KIND=8)
  Decl    1123
  Set     1416
  Used    1461    1467    1488    1500    1510    1512    1514

COC                             Stack                             REAL(KIND=8)
  Decl    1939
  Set     1953
  Used    1964    1965

COCT                            Stack                             REAL(KIND=8)
  Decl    1139
  Set     1821
  Used    1826

COG1                            Stack                             REAL(KIND=8)
  Decl    1125
  Set     1432    1449
  Used    1467    1498    1502    1516

COG1                            Stack                             REAL(KIND=8)
  Decl    1941
  Set     1960    1962
  Used    1965

COG2                            Stack                             REAL(KIND=8)
  Decl    1126
  Set     1440    1455
  Used    1461    1498    1516    1518    1520

COG2                            Stack                             REAL(KIND=8)
  Decl    1942
  Set     1957    1963
  Used    1960    1964

COGS1                           Stack                             REAL(KIND=8)
  Decl    1141
  Set     1823
  Used    1825    1829

COGS2                           Stack                             REAL(KIND=8)
  Decl    1142
  Set     1825
  Used    1831

COGT                            Stack                             REAL(KIND=8)
  Decl    1140
  Set     1822
  Used    1828

COLRAD                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     406
  Set 
  Used

COLRAD                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    7400    7455
  Set 
  Used    7531

COLRAD2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     787     793
  Set 
  Used     826

COND                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     417
  Set 
  Used     750

COND                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6182
  Set     6280    6363
  Used

CONSTANTS                                                         Module
  Decl
  Set 
  Used      54

COPYSURFACEDATA                                                   Subroutine, Module procedure
  Decl      97     787
  Set 
  Used

COS2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     384
  Set 
  Used     516

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     340
  Set      507     516     613
  Used     533     541     617     627     639     664

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4208    4263
  Set 
  Used    4290

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4674    4968
  Set 
  Used    5024

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5267    5606
  Set 
  Used    5702

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6564    6597
  Set 
  Used    6631

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6669    6764
  Set 
  Used    6815

COVER                           Stack                             REAL(KIND=8)
  Decl    7770
  Set     7837
  Used    7897

COVER                           Stack                             REAL(KIND=8)
  Decl    8026
  Set     8120
  Used    8144

COVER                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8287
  Set 
  Used    8346

CP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3854
  Set     3907    3921
  Used    4039    4059    4095    4103

CP                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1166    1951    3721    6253    6303    6306    6310    6313    6329    6332    6350    6353

CSOIL                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3859
  Set     3949
  Used    3971    4197

CT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5995
  Set     6064
  Used    6070

CT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6201
  Set 
  Used    6288

CTI                             Stack                             REAL(KIND=8)
  Decl    2180
  Set     2276    2287
  Used    2297

CTI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5994
  Set     6057    6061
  Used    6064

CTI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6200
  Set 
  Used    6288

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     338
  Set 
  Used     541     664

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2074    2162
  Set     2233    2238
  Used    2276    2287

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3367
  Set 
  Used    3556    3563    3588

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4966
  Set 
  Used    5037

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5604
  Set 
  Used    5702

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5993
  Set     6043
  Used    6057

CTNI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6199
  Set 
  Used    6288

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     336
  Set 
  Used     540     663

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2074    2160
  Set     2289
  Used    2296

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3365
  Set 
  Used    3556    3563    3588

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4964
  Set 
  Used    5037

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5602
  Set 
  Used    5701    5846

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5992
  Set     6063
  Used    6068    6069

CU                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6198
  Set 
  Used    6288

CUI                             Stack                             REAL(KIND=8)
  Decl    2177
  Set     2275    2286
  Used    2289

CUI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5991
  Set     6055    6060
  Used    6061    6063

CUI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6197
  Set 
  Used    6288

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     337
  Set 
  Used     541     664

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2074    2161
  Set     2226
  Used    2227    2275    2286

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3366
  Set 
  Used    3556    3563    3588

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4965
  Set 
  Used    5037

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5603
  Set 
  Used    5702

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5990
  Set     6042
  Used    6043    6055    6060

CUNI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6196
  Set 
  Used    6288

CUT                                                               Subroutine, Module procedure, PRIVATE
  Decl    1866
  Set 
  Used       0    3603    3652

CW                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3994    4117    4130    4142    4195    4196

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     425
  Set      478
  Used     537     660

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     836     881
  Set      901
  Used     902

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2140
  Set 
  Used    2226    2229    2230    2232    2235    2237    2259    2267    2268    2278    2279

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3284
  Set     3733
  Used    3458    3557    3564    3589

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4945
  Set 
  Used    5045

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5265    5626
  Set 
  Used    5704

D1                              Stack                             REAL(KIND=8)
  Decl    1127
  Set     1282
  Used    1293    1301

D1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3004
  Set     3026
  Used    3031

D1                              Stack                             REAL(KIND=8)
  Decl    5679
  Set     5867
  Used    5869

D1I                             Stack                             REAL(KIND=8)
  Decl    1129
  Set     1293
  Used    1338    1344    1359    1367    1374    1385

D1X                             Stack                             REAL(KIND=8)
  Decl    3890
  Set     3902
  Used    3949

D2                              Stack                             REAL(KIND=8)
  Decl    1128
  Set     1461
  Used    1469    1500    1502    1508

D2                              Stack                             REAL(KIND=8)
  Decl    1943
  Set     1964
  Used    1969

D2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2767
  Set     2803
  Used    2807

DD                                                                REAL(KIND=8), PARAMETER
  Decl    6244
  Set 
  Used    6258

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1102
  Set     1508
  Used    1514    1520    1798    1800    1830

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2879    2990
  Set 
  Used    3033

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3395
  Set 
  Used    3694    3713

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5015
  Set 
  Used    5036

DEADQM                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5657
  Set 
  Used    5698

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1101
  Set     1500
  Used    1510    1518    1797    1800    1830

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2879    2989
  Set 
  Used    3032

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3394
  Set 
  Used    3694    3713

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5014
  Set 
  Used    5036

DEADTC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5656
  Set 
  Used    5698

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1100
  Set     1502
  Used    1512    1516    1798    1799    1830

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2879    2988
  Set 
  Used    3032

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3393
  Set 
  Used    3694    3713

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5013
  Set 
  Used    5036

DEADTG                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5655
  Set 
  Used    5697

DEFAC                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     155
  Set      803
  Used    7178

DEFAC2                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     445
  Set      463
  Used

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2762
  Set 
  Used    2851

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3401
  Set 
  Used    3601

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4685    4952
  Set 
  Used    5046

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5279    5633
  Set 
  Used    5713

DEFAC_FIXED                     Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     132
  Set     7210    7293
  Used     803     818    7155    7268

DEFAC_GBL                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     169
  Set      818    7689
  Used     202     463

DEFAC_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7080
  Set 
  Used    7201    7210

DEFICIT                         Stack                             REAL(KIND=8)
  Decl    2407
  Set     2661    2667
  Used    2662    2663    2668    2669

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     183     186
  Set 
  Used     191

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl     225     408
  Set 
  Used     747

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    6084    6175
  Set 
  Used    6253    6254    6255

DELTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6773
  Set     6821
  Used    6823

DENOM                           Stack                             REAL(KIND=8)
  Decl    2402
  Set     2593
  Used    2595    2596

DEP                             Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    2773
  Set     2817    2818    2819    2820    2823    2827
  Used    2830    2831

DEP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5665
  Set     5780    5782
  Used    5783

DEPCOV                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6775
  Set     6832    6833
  Used    6835

DEWC                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3414
  Set     3661
  Used    3663

DEWG                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3415
  Set     3662
  Used    3664

DICE                                                              REAL(KIND=8), PARAMETER
  Decl    6246
  Set 
  Used    6257

DIFF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3878
  Set     4116
  Used    4119    4120    4130    4131    4132    4142    4143    4144

DIFF1                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7471
  Set     7618    7629    7632
  Used    7640

DIFF2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7472
  Set     7619    7630    7633
  Used    7640

DIFSL                                                             REAL(KIND=8), PARAMETER
  Decl    3889
  Set 
  Used    3902

DIV                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2376
  Set     2495    2529
  Used    2496    2498    2530    2532

DIV                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5662
  Set     5779
  Used    5783

DLWBOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     385
  Set 
  Used     519     651

DPDW                            Stack                             REAL(KIND=8)
  Decl    2394
  Set     2489
  Used    2517    2551

DPDWDZ                          Stack                             REAL(KIND=8)
  Decl    2401
  Set     2517    2551
  Used    2518    2521    2522    2523    2552    2555    2556    2557

DQG0                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6215
  Set     6269
  Used    6304    6316

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     294
  Set 
  Used     556     679

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1069
  Set     1791
  Used    1798    1800    1830

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2967
  Set 
  Used    3033

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3333
  Set     3724
  Used    3698    3707    3716    3728

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4917
  Set 
  Used    5043

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5275    5560
  Set 
  Used    5709

DQM                             Stack                             REAL(KIND=8)
  Decl    6241
  Set     6356
  Used    6358

DQMDT                           Stack                             REAL(KIND=8)
  Decl    3435
  Set     3722
  Used    3724    3726

DQMDT                           Stack                             REAL(KIND=8)
  Decl    6242
  Set     6354
  Used    6356

DRAG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     325
  Set 
  Used     549     672

DRAG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5591
  Set     5846
  Used    5861

DROP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2769
  Set     2850
  Used    2851

DSSIB                           Stack                             REAL(KIND=8)
  Decl    7775
  Set     7872
  Used    7878    7904    7906

DSSIB                           Stack                             REAL(KIND=8)
  Decl    8031
  Set     8131
  Used    8132    8149    8150

DT                              Stack                             REAL(KIND=8)
  Decl    7792
  Set     7904
  Used    7913

DT                              Stack                             REAL(KIND=8)
  Decl    8040
  Set     8149
  Used    8152

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     291
  Set 
  Used     555     678

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1066
  Set     1789
  Used    1792    1793    1797    1800    1830    1840    1841

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2964
  Set 
  Used    3024    3032    3037    3054

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3330
  Set 
  Used    3698    3704    3716

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4914
  Set 
  Used    5043

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5055    5114
  Set 
  Used    5156

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5557
  Set 
  Used    5709    5719    5738

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     220     234
  Set 
  Used     562     685     746

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     921    1025
  Set 
  Used    1164    1165    1312    1320    1488    1498    1546    1547    1548    1549    1553    1555    1562    1564    1574
          1576    1636    1646    1647    1650    1788    1789    1790    1791    1792    1793    1809    1813    1826    1828
          1832

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2314    2359
  Set 
  Used    2413    2414

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2883    2937
  Set 
  Used    3050

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3113    3276
  Set 
  Used    3699    3717    3720    3723    3724

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3759    3817
  Set 
  Used    4092

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    4684    4872
  Set 
  Used    5029    5045

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    5056    5096
  Set 
  Used    5148    5194    5202

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    5277    5503
  Set 
  Used    5712    5739    5743    5816    5863    5893    5894

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    6083    6172
  Set 
  Used    6258    6261    6324    6325    6332    6334    6341    6342    6353    6354    6355    6356    6377    6379

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    1154
  Set     1165
  Used    1682    1703    1738    1746

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    3010
  Set     3050
  Used    3054    3055

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    5144
  Set     5148
  Used    5166    5242

DTF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5130
  Set     5192
  Used    5193

DTF2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5135
  Set     5202
  Used    5203

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     292
  Set 
  Used     556     679

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1067
  Set     1788
  Used    1792    1793    1798    1799    1829    1830    1840    1841

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2965
  Set 
  Used    3023    3033    3038    3055

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3331
  Set 
  Used    3698    3705    3716

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4915
  Set 
  Used    5043

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5055    5115
  Set 
  Used    5165    5166    5242

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5558
  Set 
  Used    5709    5720    5738

DTI                             Stack                             REAL(KIND=8)
  Decl    6238
  Set     6261
  Used    6314    6317

DTIME1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5138
  Set     5193
  Used    5194    5202

DTIME2                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5139
  Set     5201
  Used    5202

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     293
  Set 
  Used     556     679

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1068
  Set     1790
  Used    1792    1793

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2966
  Set 
  Used    3025

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3332
  Set     3723
  Used    3698    3706    3716    3727

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4916
  Set 
  Used    5043

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5559
  Set 
  Used    5709

DTM                             Stack                             REAL(KIND=8)
  Decl    6239
  Set     6355
  Used    6357

DTMDT                           Stack                             REAL(KIND=8)
  Decl    3434
  Set     3721
  Used    3723    3725

DTMDT                           Stack                             REAL(KIND=8)
  Decl    6240
  Set     6353
  Used    6355

DTS                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5126
  Set     5156    5165
  Used    5172    5196

DW                              Stack                             REAL(KIND=8)
  Decl    7776
  Set     7878
  Used    7897

DW                              Stack                             REAL(KIND=8)
  Decl    8032
  Set     8132
  Used    8140

DW                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8283
  Set 
  Used    8301    8311

DZ                              Stack                             REAL(KIND=8)
  Decl    7119
  Set     7324
  Used    7327    7333

DZCUT                           Stack                             REAL(KIND=8)
  Decl    7120
  Set     7327    7333
  Used    7328    7334

DZLFT                           Stack                             REAL(KIND=8)
  Decl    8370
  Set     8412    8435    8441
  Used    8418    8420

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     331
  Set 
  Used     539     662

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2074    2159
  Set 
  Used    2226    2228    2229    2235    2237    2259    2267    2268    2270    2278    2279    2281

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3105    3361
  Set 
  Used    3556    3563    3588

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4673    4960
  Set 
  Used    5037

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5266    5597
  Set 
  Used    5701

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    5999
  Set     6041
  Used    6042    6050

DZM                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6206
  Set 
  Used    6289

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     273
  Set 
  Used     551     674

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1054
  Set     1469
  Used    1488    1498    1797    1799    1830

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1868    1921
  Set     1969
  Used

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2692    2754
  Set 
  Used    2850

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2957
  Set 
  Used    3032

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3316
  Set     3546
  Used    3584    3594    3598    3605    3618    3654    3659    3660    3696    3715

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4896
  Set 
  Used    5041

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5539
  Set 
  Used    5706

EAEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3003
  Set     3032
  Used

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     311
  Set 
  Used     545     668

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1079
  Set     1488    1827    1848
  Used    1703    1746

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3344
  Set 
  Used    3695

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4983
  Set 
  Used    5039

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5577
  Set 
  Used    5699

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1099
  Set     1514
  Used    1564    1650

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3392
  Set 
  Used    3694

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5012
  Set 
  Used    5036

ECDQM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5654
  Set 
  Used    5697

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1098
  Set     1510
  Used    1555    1647

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3391
  Set 
  Used    3694

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5011
  Set 
  Used    5036

ECDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5653
  Set 
  Used    5697

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1097
  Set     1512
  Used    1553    1646

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3390
  Set 
  Used    3694

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5010
  Set 
  Used    5036

ECDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5652
  Set 
  Used    5697

ECF                             Stack                             REAL(KIND=8)
  Decl    1137
  Set     1842
  Used    1844

ECF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3412
  Set     3659    3663
  Used

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     307
  Set 
  Used     544     667

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1075
  Set     1809    1812    1846
  Used    1810    1827    1845

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2879    2972
  Set     3066
  Used    3065    3072    3076

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3340
  Set 
  Used    3695    3713

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    4979
  Set 
  Used    5038

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5573
  Set 
  Used    5698    5893    5914

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     315
  Set 
  Used     546     669

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1083
  Set     1810
  Used    1811

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3348
  Set 
  Used    3696

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4987
  Set 
  Used    5039

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5581
  Set 
  Used    5699

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     317
  Set 
  Used     547     670

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2979
  Set     3076
  Used    3093

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3350
  Set 
  Used    3714

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4989
  Set 
  Used    5040

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5583
  Set 
  Used    5700

ECPOT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1135
  Set     1797
  Used    1809    1826    1842

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     306
  Set 
  Used     544     667

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1074
  Set     1826    1847
  Used    1827    1845

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2879    2971
  Set     3067
  Used    3065    3066    3076

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3339
  Set 
  Used    3695    3713

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    4978
  Set 
  Used    5038

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5572
  Set 
  Used    5698    5762    5893    5914

EE                                                                REAL(KIND=8), PARAMETER
  Decl    6012
  Set 
  Used    6054

EEE                             Stack                             REAL(KIND=8)
  Decl    3433
  Set     3497
  Used    3507

EF                              Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    5659
  Set     5771    5772    5783    5789    5790
  Used    5787    5795

EFT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5663
  Set     5787    5788
  Used    5789    5790

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     312
  Set 
  Used     545     668

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1080
  Set     1498    1833    1855
  Used    1682    1746

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2976
  Set 
  Used    3042

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3345
  Set 
  Used    3695    3714

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4984
  Set 
  Used    5039

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5578
  Set 
  Used    5699

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1096
  Set     1520
  Used    1549    1650

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3389
  Set 
  Used    3694

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5009
  Set 
  Used    5035

EGDQM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5651
  Set 
  Used    5697

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1095
  Set     1518
  Used    1547    1647

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3388
  Set 
  Used    3694

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5008
  Set 
  Used    5035

EGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5650
  Set 
  Used    5697

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1094
  Set     1516
  Used    1546    1646

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3387
  Set 
  Used    3694

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    5007
  Set 
  Used    5035

EGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5649
  Set 
  Used    5697

EGF                             Stack                             REAL(KIND=8)
  Decl    1138
  Set     1843
  Used    1850

EGF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3413
  Set     3660    3664
  Used

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     309
  Set 
  Used     545     668

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1077
  Set     1813    1816    1852
  Used    1814    1833    1851

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2879    2974
  Set     3082
  Used    3042    3081    3088    3089

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3342
  Set 
  Used    3695    3713

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    4981
  Set 
  Used    5039

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5575
  Set 
  Used    5698    5894    5914

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     316
  Set 
  Used     546     669

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1084
  Set     1814
  Used    1815

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3349
  Set 
  Used    3696

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4988
  Set 
  Used    5039

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5582
  Set 
  Used    5699

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     318
  Set 
  Used     547     670

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2980
  Set     3089
  Used    3093

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3351
  Set 
  Used    3714

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4990
  Set 
  Used    5040

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5584
  Set 
  Used    5700

EGPOT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1136
  Set     1799
  Used    1813    1828    1843

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     310
  Set 
  Used     545     668

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1078
  Set     1829    1832    1854
  Used    1833    1851

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2879    2975
  Set     3042
  Used    3089

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3343
  Set 
  Used    3695    3713

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4982
  Set 
  Used    5039

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5576
  Set 
  Used    5699    5754    5894    5914

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     308
  Set 
  Used     544     667

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1076
  Set     1828    1853
  Used    1833    1851

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2879    2973
  Set     3043    3083
  Used    3081    3082    3089

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3341
  Set 
  Used    3695    3713

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    4980
  Set 
  Used    5039

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5574
  Set 
  Used    5698    5766    5894    5914

EKAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4274
  Set     4399
  Used    4424    4430

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     332
  Set 
  Used     539     662

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     914    1108
  Set 
  Used    1467

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1929
  Set 
  Used    1965

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3105    3362
  Set 
  Used    3593    3604    3653    3692

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4673    4961
  Set 
  Used    5037

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5266    5598
  Set 
  Used    5701

ENDWB                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5676
  Set     5878
  Used    5904    5906

EPSFAC                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1508    3546

EPSFLT                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    6400    6404
  Set 
  Used    6455    6456    6457    6459    6460    6463    6466    6469    6473    6477

EPSFLT                          Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     701     759     761     762

EQUDEP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3875
  Set     4092
  Used    4095    4104

ESAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3422
  Set     3584
  Used    3618

ESTARC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3005
  Set     3037
  Used

ESTARG                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3006
  Set     3038
  Used

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     274
  Set 
  Used     551     674

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1055
  Set 
  Used    1467    1488    1797

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1922
  Set 
  Used    1965

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2958
  Set 
  Used    3037

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3317
  Set     3534    3644
  Used    3594    3605    3654    3659    3697    3715

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4897
  Set 
  Used    5041

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5540
  Set 
  Used    5707

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     275
  Set 
  Used     551     674

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1056
  Set 
  Used    1467    1498    1799    1829

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1923
  Set 
  Used    1965

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2959
  Set 
  Used    3038

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3318
  Set     3535    3645
  Used    3594    3605    3654    3660    3697    3715

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4898
  Set 
  Used    5041

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5541
  Set 
  Used    5707

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     319
  Set 
  Used     547     670

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2981
  Set     3093
  Used

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3352
  Set 
  Used    3714    3722

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4991
  Set 
  Used    5040

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5585
  Set 
  Used    5700    5882    5907

ETP                             Stack                             REAL(KIND=8)
  Decl    7787
  Set     7930    7933    7935
  Used    7938

EVAP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     410
  Set 
  Used     748

EVAP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6177
  Set     6330    6351
  Used    6333    6354

EXCESS                          Stack                             REAL(KIND=8)
  Decl    2406
  Set     2637    2643    2649
  Used    2638    2639    2644    2645    2650    2651

EXP                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0    2430    2452    2484    2807    2850
          3489    3534    3644    3646    4020    4059    4103    4387    4389    4391    4392    4399    4631    6055    6057
          6060    6269    7044    7664    7859    7866    8129    8130    8325

EXPCUT                          Static offset=0                   REAL(KIND=8), PRIVATE, SAVE
  Decl      99
  Set      190
  Used    7042

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl     218     296
  Set 
  Used

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    3758    3845
  Set 
  Used    4020

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    4208    4259
  Set     4302
  Used    4369    4370    4387    4389

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    4682    4919
  Set 
  Used    5024    5028

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    5275    5562
  Set 
  Used    5710

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6561    6587
  Set 
  Used

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6667    6754
  Set     7016    7017    7025    7026    7027    7028    7029    7030
  Used    7041

EXTRAK                                                            Subroutine, Module procedure, PRIVATE
  Decl    8280
  Set 
  Used       0    8139

F                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4265
  Set     4290
  Used    4407

F                               Stack                             REAL(KIND=8)
  Decl    6020
  Set     6054    6059
  Used    6055    6060

F                               Stack                             REAL(KIND=8)
  Decl    6609
  Set     6643
  Used    6644    6645

F                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6772
  Set     6815
  Used    6898    6910    6911    6935    6965    6995    7025    7026

F0001                           Stack                             REAL(KIND=8)
  Decl    7117
  Set     7246
  Used    7251

FAC                             Stack                             REAL(KIND=8)
  Decl    3409
  Set     3483    3484    3720
  Used    3485    3489    3721    3722

FAC1                            Stack                             REAL(KIND=8)
  Decl    1144
  Set     1395
  Used    1396    1397    1398

FAC1                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6780
  Set     7045
  Used    7047    7048    7050    7054

FAC2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6781
  Set     7046
  Used    7048    7049    7050    7055

FACKS                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3007
  Set     3063    3064    3068    3079    3080    3084
  Used    3072    3076    3088    3089

FACMOD                          Stack                             REAL(KIND=8)
  Decl    7788
  Set     7931
  Used    7942

FACT                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7745
  Set     7798    7916
  Used    7942

FACT                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7999
  Set     8083    8155
  Used

FACTG                                                             REAL(KIND=8), PARAMETER
  Decl    2045
  Set 
  Used    2063

FACTOR                          Stack                             REAL(KIND=8)
  Decl    7791
  Set 
  Used    7898    7904    7916

FACTOR                          Stack                             REAL(KIND=8)
  Decl    8039
  Set 
  Used    8148    8149    8155

FACTOR                          Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    8281    8291
  Set     8346    8347
  Used

FAH                             Stack                             REAL(KIND=8)
  Decl    1156
  Set     1167
  Used    1255

FAK                             Stack                             REAL(KIND=8)
  Decl    1155
  Set     1166
  Used    1246

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     347
  Set 
  Used     543     666

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     915    1115
  Set 
  Used    1410    1842

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1934
  Set 
  Used    1952

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3374
  Set     3518    3631    3675    3678    3681
  Used    3593    3604    3653    3661    3693

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4974
  Set 
  Used    5038

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5613
  Set 
  Used    5703

FCAP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5133
  Set     5197    5199
  Used    5201    5204    5209    5212

FCON                            Stack                             REAL(KIND=8)
  Decl    4281
  Set     4308
  Used    4408

FD                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2770
  Set     2851    2852
  Used    2864

FF                                                                REAL(KIND=8), PARAMETER
  Decl    6013
  Set 
  Used    6056

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     348
  Set 
  Used     543     666

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     915    1116
  Set 
  Used    1406    1420    1422    1820    1843

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1935
  Set 
  Used    1954    1955

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3375
  Set     3519    3632    3676    3679    3682
  Used    3593    3604    3653    3662    3693

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4975
  Set 
  Used    5038

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5614
  Set 
  Used    5703

FIH                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2043
  Set     2062
  Used    2064

FILTA                           Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     759     761     762

FLAGSCOV                        Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    6807
  Set     6891    6903
  Used    6896    6906

FLAGTYP                         Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    6806
  Set     6868    6874
  Used    6884

FLIP                            Stack                             REAL(KIND=8)
  Decl    7465
  Set     7561    7562
  Used    7567    7568    7569    7570    7571

FLUX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5127
  Set     5157    5166
  Used    5193    5194    5201    5202

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     323
  Set 
  Used     548     671

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5055    5121
  Set     5242
  Used

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5589
  Set 
  Used    5738    5746

FMELT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6774
  Set     6822    6824
  Used    6858

FNAMESIBALB                     Static offset=64                  CHARACTER(200), PRIVATE, SAVE
  Decl     177
  Set      194
  Used    7197

FNAMESIBALB_IN                  Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     189
  Set 
  Used     194

FNAMESIBVEG                     Static offset=1664                CHARACTER(200), PRIVATE, SAVE
  Decl     176
  Set      193
  Used    7189

FNAMESIBVEG_IN                  Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     188
  Set 
  Used     193

FP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2771
  Set     2837    2838    2839    2840
  Used    2838    2841

FP1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2692    2734
  Set     2841
  Used    2864

FP1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3426
  Set 
  Used    3598

FPI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3857
  Set     3926    4020
  Used    4023    4039    4059

FREEZE                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3879
  Set     4132    4133    4144    4145
  Used    4135    4136    4147    4148

FSC                                                               REAL(KIND=8), PARAMETER
  Decl    2184
  Set 
  Used    2280    2282    2284

FT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2768
  Set     2805    2810    2811
  Used    2812

FT1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2692    2733
  Set     2812
  Used    2864

FT1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3425
  Set 
  Used    3598

FTC                                                               REAL(KIND=8), PARAMETER
  Decl    2185
  Set 
  Used    2271    2273

FTEMP                           Stack                             REAL(KIND=8)
  Decl    4284
  Set     4398
  Used    4399

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

FTPD                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2772
  Set     2864
  Used    2865

FTT                             Stack                             REAL(KIND=8)
  Decl    2199
  Set     2271    2273    2282    2284
  Used    2276    2287

FVC                                                               REAL(KIND=8), PARAMETER
  Decl    2186
  Set 
  Used    2269

FVV                             Stack                             REAL(KIND=8)
  Decl    2198
  Set     2269    2280
  Used    2275    2286

FX                              Stack                             REAL(KIND=8)
  Decl    8014
  Set     8262
  Used    8263    8264

FYSIKS                                                            Subroutine, Module procedure
  Decl      83    5265
  Set 
  Used       0     659

G                               Stack                             REAL(KIND=8)
  Decl    6021
  Set     6056
  Used    6057

G2                              Stack                             REAL(KIND=8)
  Decl    2189
  Set     2209
  Used    2233    2238    2243    2271    2273    2282    2284

GAMMA                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4266
  Set     4351
  Used    4414    4424

GASR                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191    2206    6252    7324

GB100                           Stack                             REAL(KIND=8)
  Decl    6232
  Set     6255
  Used    6375

GBAL                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5678
  Set     5894
  Used    5911

GBY100                          Stack                             REAL(KIND=8)
  Decl    5673
  Set     5838
  Used    5861

GBYCP                           Stack                             REAL(KIND=8)
  Decl    6230
  Set     6253
  Used    6267

GBYHL                           Stack                             REAL(KIND=8)
  Decl    6229
  Set     6254
  Used    6268

GG                                                                REAL(KIND=8), PARAMETER
  Decl    6014
  Set 
  Used    6042

GICE                            Stack                             REAL(KIND=8)
  Decl    6234
  Set     6257
  Used    6305    6312    6363

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     299
  Set 
  Used     532     557     626     680

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4460    4499
  Set 
  Used    4542

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4682    4922
  Set 
  Used    5021

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5275    5565
  Set 
  Used    5710

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6562    6590
  Set 
  Used    6629

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6667    6757
  Set     7049    7050
  Used

GLSM_SLZ                                                          REAL(KIND=8), PARAMETER, DIMENSION(0:20)
  Decl    8077
  Set 
  Used

GLSM_SLZ                        Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    8355    8362
  Set 
  Used    8377

GLSM_TZDEP                      Stack                             REAL(KIND=8), DIMENSION(0:3)
  Decl    8005
  Set     8178    8182
  Used    8197    8262

GLSM_W                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    7973    7995
  Set 
  Used    8189

GLSM_W1D                        Stack                             REAL(KIND=8), DIMENSION(0:20)
  Decl    8004
  Set     8189
  Used

GLSM_W_SIB                      Stack                             REAL(KIND=8), DIMENSION(0:3)
  Decl    8006
  Set     8179    8183
  Used    8200    8208    8263    8264

GLSM_W_SIB                      Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    8357    8364
  Set     8462
  Used

GL_SM                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    8356    8363
  Set 
  Used    8398

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     209     334
  Set      575     576     577
  Used     721

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl     914    1110
  Set 
  Used    1650    1746

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3105    3364
  Set     3726
  Used    3692    3722

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4673    4963
  Set 
  Used    5037

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5266    5600
  Set 
  Used    5701

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     209     333
  Set      572     573     574
  Used     720

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl     914    1109
  Set 
  Used    1636    1738

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3105    3363
  Set     3725
  Used    3692    3721

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4673    4962
  Set 
  Used    5037

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5266    5599
  Set 
  Used    5701

GMU                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 4), INTENT(INOUT)
  Decl     210     335
  Set      578     579     580     581
  Used     722     723

GMU                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 4), INTENT(INOUT)
  Decl    5267    5601
  Set     5863    5864    5865
  Used

GPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     222     365
  Set 
  Used     746

GPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6083    6170
  Set 
  Used    6266    6267    6268    6270    6375

GQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     222     362
  Set 
  Used     571     745

GQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6083    6169
  Set     6293    6342    6361
  Used    6272    6311    6319    6330    6351    6358

GQSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6211
  Set     6272
  Used    6293    6361

GR100                           Stack                             REAL(KIND=8)
  Decl    6231
  Set     6252
  Used    6266

GRAV                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191    1166    1167    2259    3467    3720    5838    6050    6253    6254    6255    6256    7324

GREEN                           Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     154
  Set      800
  Used    7177

GREEN2                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     436
  Set      458
  Used

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4209    4250
  Set 
  Used    4443

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4684    4940
  Set 
  Used    5025

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5278    5622
  Set 
  Used    5712

GREEN_FIXED                     Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     141
  Set     7219    7251
  Used     800     813    7164    7280

GREEN_GBL                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     164
  Set      813    7684
  Used     197     458

GREEN_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7089
  Set 
  Used    7203    7219

GRIB                            Stack                             REAL(KIND=8)
  Decl    2195
  Set     2266
  Used    2269    2271    2273

GRLF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7470
  Set     7612    7666
  Used    7667    7684

GRZ2                            Stack                             REAL(KIND=8)
  Decl    2197
  Set     2268
  Used    2271    2273

GRZL                            Stack                             REAL(KIND=8)
  Decl    2196
  Set     2267
  Used    2271

GSWP_SOIL_INPUT_DATA            Static offset=0                   REAL(KIND=8), DIMENSION(10, 12), SAVE, Initialized
  Decl    7343
  Set 
  Used

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     222     361
  Set 
  Used     570     745

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5929    5985
  Set 
  Used    6041    6047

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6083    6168
  Set     6292    6341    6360
  Used    6266    6271    6287    6310    6315    6329    6350    6357

GTSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6210
  Set     6271
  Used    6292    6360

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     222     363
  Set 
  Used     744

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5929    5983
  Set 
  Used    6039

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6083    6166
  Set 
  Used    6287    6373    6388

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     222     364
  Set 
  Used     745

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5929    5984
  Set 
  Used    6039

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6083    6167
  Set 
  Used    6287    6374    6389

GXX                             Stack                             REAL(KIND=8)
  Decl    3431
  Set     3467
  Used    3497

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     313
  Set 
  Used     546     669

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1081
  Set     1312    1792    1811    1845
  Used    1703    1738

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2977
  Set 
  Used    3094

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3346
  Set 
  Used    3695    3714

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4985
  Set 
  Used    5039

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5579
  Set 
  Used    5699    5893

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1092
  Set     1338
  Used    1555    1576    1792

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3385
  Set 
  Used    3693

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    5005
  Set 
  Used    5035

HCDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5647
  Set 
  Used    5696

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1091
  Set     1344
  Used    1553    1574    1792

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3384
  Set 
  Used    3693

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    5004
  Set 
  Used    5035

HCDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5646
  Set 
  Used    5696

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1093
  Set     1359
  Used    1562    1636    1792

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3386
  Set 
  Used    3693

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    5006
  Set 
  Used    5035

HCDTM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5648
  Set 
  Used    5696

HF                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5132
  Set     5194
  Used    5204    5209    5210

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     320
  Set 
  Used     547     670

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2982
  Set     3094
  Used

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3353
  Set 
  Used    3714    3721

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4992
  Set 
  Used    5040

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5586
  Set 
  Used    5700    5913

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     314
  Set 
  Used     546     669

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1082
  Set     1320    1793    1815    1851
  Used    1682    1738

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2978
  Set 
  Used    3094

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3347
  Set 
  Used    3695    3714

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4986
  Set 
  Used    5039

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5580
  Set 
  Used    5699    5894

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1089
  Set     1374
  Used    1547    1576    1793

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3382
  Set 
  Used    3693

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    5002
  Set 
  Used    5035

HGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5644
  Set 
  Used    5696

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1088
  Set     1367
  Used    1546    1574    1793

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3381
  Set 
  Used    3693

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    5001
  Set 
  Used    5035

HGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5643
  Set 
  Used    5696

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1090
  Set     1385
  Used    1548    1636    1793

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3103    3383
  Set 
  Used    3693

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    5003
  Set 
  Used    5035

HGDTM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5645
  Set 
  Used    5696

HH                                                                REAL(KIND=8), PARAMETER
  Decl    6015
  Set 
  Used    6042

HICE                                                              REAL(KIND=8), PARAMETER
  Decl    6247
  Set 
  Used    6257

HL                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1167    1807    2785    3051    3052    5751    6254    6304    6307    6311    6316    6317    6319    6330    6334
          6351    6354

HL3I                            Stack                             REAL(KIND=8)
  Decl    2774
  Set     2785
  Used

HLAT3                           Stack                             REAL(KIND=8)
  Decl    1160
  Set     1807
  Used    1810    1812    1814    1816

HLAT3I                          Stack                             REAL(KIND=8)
  Decl    3012
  Set     3052
  Used    3061    3072    3088

HLAT3I                          Stack                             REAL(KIND=8)
  Decl    5672
  Set     5751
  Used    5754    5762    5766

HLATI                           Stack                             REAL(KIND=8)
  Decl    3011
  Set     3051
  Used    3076    3089

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     349
  Set 
  Used     544     667

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     915    1117
  Set     1406
  Used    1433    1434    1823    1824    1825

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1936
  Set 
  Used    1960

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3376
  Set     3509
  Used    3593    3604    3653    3693

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4976
  Set 
  Used    5038

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5615
  Set 
  Used    5703

HR                              Stack                             REAL(KIND=8)
  Decl    8294
  Set     8325
  Used    8331

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     285
  Set 
  Used     554     677

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1062
  Set 
  Used    1406

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3325
  Set     3507
  Used    3509    3697

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4908
  Set 
  Used    5042

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5551
  Set 
  Used    5708

HSCAP                           Stack                             REAL(KIND=8)
  Decl    6235
  Set     6258
  Used    6303    6364

I                               Stack                             INTEGER
  Decl     453
  Set      455     474     496     567     585     601     610     616     633     693     705     717     733     755
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468     475     476
           477     478     497     512     513     514     515     516     519     568     570     571     572     573     574
           575     576     577     578     579     580     581     586     587     588     589     590     591     592     594
           596     598     602     603     604     611     613     617     618     619     634     640     641     642     643
           651     655     656     696     706     707     708     709     710     711     712     713     718     720     721
           722     723     724     734     735     736     737     756     759     760     761     762     764     765     766
           767     769     770     771     772     773     774     775     778     779     780     781

I                               Stack                             INTEGER
  Decl     797
  Set      810
  Used     811     812     813     814     815     816     817     818     819     820     821     822     823

I                               Stack                             INTEGER
  Decl     893
  Set      895
  Used     896     898     899     900     901     902     903     904

I                               Stack                             INTEGER
  Decl    1157
  Set     1170    1272    1394    1401    1527    1751    1787    1808    1839
  Used    1178    1185    1189    1190    1191    1192    1196    1246    1255    1260    1261    1267    1282    1293    1301
          1312    1320    1338    1344    1359    1367    1374    1385    1395    1396    1397    1398    1399    1406    1410
          1416    1420    1422    1432    1433    1434    1440    1441    1442    1449    1455    1461    1467    1469    1488
          1498    1500    1502    1508    1510    1512    1514    1516    1518    1520    1546    1547    1548    1549    1553
          1555    1562    1564    1574    1576    1636    1637    1646    1647    1648    1650    1682    1703    1738    1746
          1752    1753    1754    1755    1756    1757    1758    1759    1760    1761    1762    1763    1764    1765    1766
          1767    1768    1769    1770    1771    1773    1775    1776    1778    1779    1780    1782    1783    1784    1785
          1788    1789    1790    1791    1792    1793    1797    1798    1799    1800    1809    1810    1811    1812    1813
          1814    1815    1816    1820    1821    1822    1823    1824    1825    1826    1827    1828    1829    1830    1832
          1833    1840    1841    1842    1843    1845    1846    1847    1848    1851    1852    1853    1854    1855

I                               Stack                             INTEGER
  Decl    1947
  Set     1949
  Used    1950    1951    1952    1953    1954    1955    1956    1958    1959    1960    1961    1964    1965    1969

I                               Stack                             INTEGER
  Decl    2046
  Set     2049
  Used    2050    2051    2052    2054    2056    2057    2058    2060    2062    2063    2064

I                               Stack                             INTEGER
  Decl    2202
  Set     2211    2223    2250
  Used    2212    2213    2214    2224    2225    2226    2227    2228    2229    2230    2232    2233    2235    2237    2238
          2243    2251    2255    2256    2257    2258    2259    2260    2267    2268    2270    2275    2276    2278    2279
          2281    2286    2287    2289    2296    2297    2301

I                               Stack                             INTEGER
  Decl    2409
  Set     2425
  Used    2428    2429    2430

I                               Stack                             INTEGER
  Decl    2779
  Set     2790    2847    2856
  Used    2791    2792    2797    2799    2801    2802    2803    2804    2805    2806    2807    2808    2809    2810    2811
          2812    2830    2831    2835    2837    2838    2839    2840    2841    2848    2849    2850    2851    2852    2857
          2858    2859    2861    2864    2865    2866

I                               Stack                             INTEGER
  Decl    3008
  Set     3022    3040    3053    3062    3071    3078    3087
  Used    3023    3024    3025    3026    3030    3031    3032    3033    3037    3038    3041    3042    3043    3054    3055
          3063    3064    3065    3066    3067    3068    3072    3076    3079    3080    3081    3082    3083    3084    3088
          3089    3093    3094

I                               Stack                             INTEGER
  Decl    3438
  Set     3444    3463    3470    3528    3541    3567    3581    3608    3615    3626    3630    3637    3657    3668    3687
          3703    3719    3730
  Used    3445    3446    3447    3448    3449    3450    3451    3452    3464    3471    3472    3473    3480    3482    3485
          3497    3507    3509    3511    3512    3513    3514    3515    3518    3519    3529    3534    3535    3542    3546
          3568    3569    3582    3583    3584    3609    3610    3611    3616    3617    3618    3621    3627    3631    3632
          3633    3634    3638    3639    3640    3641    3642    3643    3644    3645    3646    3647    3658    3659    3660
          3661    3662    3663    3664    3670    3671    3673    3674    3675    3676    3677    3678    3679    3680    3681
          3682    3688    3704    3705    3706    3707    3720    3721    3722    3723    3724    3725    3726    3727    3728
          3731    3733    3734    3735    3736

I                               Stack                             INTEGER
  Decl    3892
  Set     3905    3961    3969    3975    3989    4030    4053    4083    4115    4123    4152    4159    4175    4193
  Used    3906    3907    3908    3909    3915    3921    3924    3925    3926    3930    3932    3938    3940    3949    3953
          3962    3963    3966    3970    3971    3976    3981    3983    3985    3990    3994    3996    3998    4000    4001
          4003    4006    4008    4010    4020    4021    4023    4025    4031    4032    4038    4039    4040    4046    4047
          4048    4059    4060    4062    4064    4068    4069    4070    4073    4075    4076    4078    4084    4085    4086
          4087    4092    4093    4094    4095    4096    4097    4098    4099    4102    4103    4104    4105    4106    4107
          4116    4117    4118    4119    4120    4121    4124    4125    4129    4130    4131    4132    4133    4134    4135
          4136    4141    4142    4143    4144    4145    4146    4147    4148    4154    4156    4161    4162    4163    4165
          4167    4171    4172    4180    4182    4185    4186    4187    4194    4195    4196    4197

I                               Stack                             INTEGER
  Decl    4278
  Set     4289    4295    4311    4448
  Used    4290    4302    4303    4312    4313    4321    4323    4332    4338    4344    4351    4352    4363    4369    4370
          4377    4379    4387    4389    4391    4392    4398    4399    4407    4408    4414    4424    4430    4437    4443
          4449

I                               Stack                             INTEGER
  Decl    4509
  Set     4513    4530    4540
  Used    4514    4515    4531    4541    4542    4543    4544    4545    4546    4547    4548    4549    4550

I                               Stack                             INTEGER
  Decl    4616
  Set     4619    4650
  Used    4625    4631    4652

I                               Stack                             INTEGER
  Decl    5141
  Set     5153    5162    5171    5176    5185    5189    5234    5241
  Used    5154    5155    5156    5157    5163    5164    5165    5166    5172    5173    5177    5178    5179    5181    5186
          5190    5191    5192    5193    5194    5195    5196    5197    5199    5201    5202    5203    5204    5205    5207
          5209    5210    5212    5214    5215    5216    5217    5219    5221    5224    5225    5228    5230    5235    5242

I                               Stack                             INTEGER
  Decl    5668
  Set     5683    5718    5726    5745    5752    5761    5765    5769    5776    5786    5793    5805    5818    5840    5876
          5901
  Used    5688    5689    5690    5691    5719    5720    5727    5728    5729    5730    5746    5753    5754    5762    5766
          5770    5771    5772    5773    5777    5778    5779    5780    5782    5783    5787    5788    5789    5790    5794
          5795    5806    5807    5808    5810    5819    5820    5821    5822    5824    5825    5826    5828    5829    5830
          5846    5861    5863    5864    5865    5867    5869    5877    5878    5879    5880    5881    5882    5893    5894
          5902    5904    5905    5906    5907    5908    5909    5911    5912    5913    5914

I                               Stack                             INTEGER
  Decl    6022
  Set     6024    6036
  Used    6025    6026    6027    6028    6029    6030    6032    6037    6038    6039    6040    6041    6042    6043    6047
          6048    6049    6050    6051    6052    6053    6054    6055    6056    6057    6059    6060    6061    6063    6064
          6068    6069    6070

I                               Stack                             INTEGER
  Decl    6227
  Set     6263    6290    6299    6339    6348    6371
  Used    6264    6265    6266    6267    6268    6269    6270    6271    6272    6273    6274    6275    6291    6292    6293
          6294    6295    6296    6300    6302    6303    6304    6305    6306    6307    6310    6311    6312    6313    6314
          6315    6316    6317    6318    6319    6320    6321    6322    6323    6324    6325    6327    6328    6329    6330
          6331    6332    6333    6334    6340    6341    6342    6349    6350    6351    6353    6354    6357    6358    6360
          6361    6362    6363    6364    6365    6366    6372    6373    6374    6375    6376    6377    6378    6379    6384
          6385    6386    6387    6388    6389    6390    6391

I                               Stack                             INTEGER
  Decl    6428
  Set     6432    6454    6480    6493    6516    6537
  Used    6433    6434    6435    6436    6437    6438    6439    6440    6441    6442    6443    6450    6455    6456    6457
          6459    6460    6462    6463    6465    6466    6468    6469    6471    6472    6473    6475    6476    6477    6481
          6482    6483    6484    6485    6486    6487    6488    6489    6490    6491    6494    6495    6496    6497    6498
          6499    6500    6501    6502    6503    6504    6511    6517    6518    6519    6520    6521    6522    6523    6524
          6525    6526    6527    6534    6538    6539    6540    6541    6542    6543    6544    6545    6546    6547

I                               Stack                             INTEGER
  Decl    6607
  Set     6613    6635
  Used    6614    6615    6616    6617    6618    6619    6620    6621    6622    6623    6636    6638    6639    6640    6641
          6642    6643    6646    6647    6648    6649    6651    6652    6653    6654

I                               Stack                             INTEGER
  Decl    6787
  Set     6809    6820    6828    6838    6845    6857    6866    6878    6883    6890    6895    6905    6917    6930    7008
          7037
  Used    6811    6812    6813    6814    6815    6821    6822    6823    6824    6830    6831    6832    6833    6834    6835
          6839    6840    6841    6846    6847    6849    6858    6859    6861    6867    6868    6869    6870    6871    6872
          6873    6874    6879    6884    6891    6896    6897    6898    6899    6906    6910    6911    6912    6918    6921
          6922    6923    6924    6925    6926    6931    6935    6944    6948    6953    6954    6955    6959    6960    6961
          6962    6963    6964    6965    6966    6970    6971    6972    6978    6983    6984    6985    6989    6990    6991
          6992    6993    6994    6995    6996    7000    7001    7002    7009    7010    7011    7012    7013    7014    7015
          7016    7017    7018    7019    7020    7021    7022    7023    7024    7025    7026    7027    7028    7029    7030
          7038    7039    7041    7042    7043    7044    7045    7046    7047    7048    7049    7050    7054    7055    7056

I                               Stack                             INTEGER
  Decl    7116
  Set     7304
  Used    7305    7306    7307    7308    7309    7310    7311    7312    7313    7314

I                               Stack                             INTEGER
  Decl    7477
  Set     7525    7542    7559    7580    7591    7607    7677
  Used    7531    7536    7538    7543    7560    7562    7567    7568    7569    7570    7571    7574    7575    7576    7577
          7581    7585    7586    7592    7596    7597    7599    7600    7608    7609    7610    7611    7612    7613    7617
          7618    7619    7620    7621    7627    7629    7630    7632    7633    7640    7647    7648    7654    7655    7657
          7659    7661    7662    7664    7666    7667    7668    7669    7670    7678    7679    7680    7681    7682    7683
          7684    7685    7686    7687    7688    7689    7690    7691    7692    7693    7694

I1                              Stack                             INTEGER
  Decl    6791
  Set     6894    6904    6916    6952    6958    6969    6982    6988    6999
  Used    6897    6898    6899    6910    6911    6912    6921    6922    6923    6924    6925    6926    6953    6954    6955
          6959    6960    6961    6962    6963    6964    6965    6966    6970    6971    6972    6983    6984    6985    6989
          6990    6991    6992    6993    6994    6995    6996    7000    7001    7002

I1                              Stack                             INTEGER
  Decl    7479
  Set     7541    7551    7590
  Used    7543    7552    7556    7557    7596    7597    7598    7599    7600

I8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     366     432    6004    6192    6600    7738    7989

IBD                                                               INTEGER, PARAMETER
  Decl    7450
  Set 
  Used

IBD                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     296     297    3845    4259    4497    4919    4920    5562    5563    6587    6588    6754    6755

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     183     184
  Set 
  Used

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7709    7731
  Set 
  Used    7734    7738    7739    7740    7802

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7963    7985
  Set 
  Used    7988    7989    7990    7991    7994    7995    8087

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    7709    7741
  Set 
  Used    7924

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    7969    7992
  Set 
  Used    8162

ICEALN                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6653    6654

ICEALV                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6651    6652

ICG                                                               INTEGER, PARAMETER
  Decl    7447
  Set 
  Used

ICG                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     195     196     197     198     199     200     201     202     203     204     205     279     280     281     282
           284     289     290     295     296     297     434     435     436     437     438     442     443     444     445
           449     450     454     809    1030    1059    1060    1065    1120    1912    1924    2040    2740    2743    2755
          2757    2759    2760    2761    2762    2763    2764    3282    3322    3323    3329    3334    3397    3398    3399
          3400    3401    3402    3403    3436    3821    3843    3844    3845    3850    4246    4248    4249    4250    4251
          4256    4257    4258    4259    4485    4494    4495    4496    4497    4611    4902    4903    4904    4905    4907
          4912    4913    4918    4919    4920    4939    4940    4941    4942    4943    4949    4950    4951    4952    4953
          4954    5113    5545    5546    5547    5548    5550    5555    5556    5561    5562    5563    5620    5621    5622
          5623    5624    5630    5631    5632    5633    5634    5635    6586    6587    6588    6753    6754    6755    6768
          6769    7075    7076    7077    7078    7079    7080    7081    7082    7083    7089    7090    7091    7150    7151
          7152    7153    7154    7155    7156    7157    7158    7164    7165    7166    7173    7174    7175    7176    7177
          7178    7179    7180    7181    7182    7183

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1937
  Set 
  Used    1950

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2074    2164
  Set 
  Used    2212    2251

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2692    2758
  Set 
  Used    2791    2848    2857

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3377
  Set     3529    3621    3634    3671
  Used    3556    3563    3582    3588    3593    3598    3604    3609    3616    3627    3653    3658    3688

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    4997
  Set 
  Used    5036

ICHECK                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    5638
  Set 
  Used    5698

ICMAX                                                             INTEGER, PARAMETER
  Decl    3429
  Set 
  Used    3620

ICOND                           Stack                             INTEGER
  Decl    7483
  Set     7625    7626    7627
  Used    7628    7636

ICOUNT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2692    2732
  Set 
  Used    2788

ICOUNT                          Stack                             INTEGER
  Decl    3441
  Set     3579    3580
  Used    3598    3620

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     787     795
  Set 
  Used     827

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    7401    7459
  Set 
  Used    7523    7644

IDEWCO                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3427
  Set     3633    3673
  Used    3670    3674    3677    3680

IDP                                                               INTEGER, PARAMETER
  Decl    7449
  Set 
  Used

IDP                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     286    2741    2756    3326    4612    4909    5552    7088    7163

IERR                            Stack                             INTEGER
  Decl    7122
  Set 
  Used    7187    7189    7195    7197

IHEAD                                                             INTEGER, PARAMETER
  Decl    7504
  Set 
  Used    7596    7647    7653    7654    7655    7661    7662    7667

II                              Stack                             INTEGER
  Decl    6428
  Set     6445    6506    6529
  Used    6450    6511    6534

IIMON                                                             INTEGER, PARAMETER
  Decl    7489
  Set 
  Used    7493    7496    7501    7541    7551

IK                              Stack                             INTEGER
  Decl    6795
  Set     6934
  Used    6935    6938    6939

IL                              Stack                             INTEGER
  Decl    5669
  Set     5775    5792    5804
  Used    5778    5781    5782    5783    5795    5796    5806    5808    5809    5810

ILD                                                               INTEGER, PARAMETER
  Decl    7071
  Set 
  Used

ILWRAD                          Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     223     378
  Set 
  Used     491

IM                              Stack                             INTEGER
  Decl    7115
  Set     7260    7286
  Used    7261    7287

IM                              Stack                             INTEGER
  Decl    7767
  Set     7817
  Used    7818    7819    7820    7822    7823    7824

IM                              Stack                             INTEGER
  Decl    8023
  Set     8101
  Used    8102    8103    8104    8107    8108    8109

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     222     366
  Set 
  Used     497     568     611     634     718

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6565    6600
  Set 
  Used    6636

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7709    7738
  Set 
  Used    7925

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7965    7989
  Set 
  Used    8166

IMM                             Stack                             INTEGER
  Decl    7768
  Set     7827    7830
  Used    7837

IMM                             Stack                             INTEGER
  Decl    8024
  Set     8113    8117
  Used    8120

IMM1                            Stack                             INTEGER
  Decl    7764
  Set     7813    7819
  Used    7827

IMM1                            Stack                             INTEGER
  Decl    8021
  Set     8097    8103
  Used    8113

IMM2                            Stack                             INTEGER
  Decl    7765
  Set     7814    7823
  Used    7830

IMM2                            Stack                             INTEGER
  Decl    8022
  Set     8098    8108
  Used    8117

IMON                                                              INTEGER, PARAMETER
  Decl    7446
  Set 
  Used    7502

IMON                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2024    2138    7089    7090    7091    7092    7093    7094    7095    7096    7097    7099    7100    7101    7102
          7103    7104    7105    7106    7107    7108    7109    7164    7165    7166    7167    7168    7169    7170    7171
          7172    7173    7174    7177    7304    7328    7334

IND                             Stack                             INTEGER
  Decl     453
  Set      494
  Used     499     593

INDEX                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    7482
  Set     7513    7670
  Used    7679

INITLZ                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     368
  Set 
  Used     481

INITMOD                         Stack                             LOGICAL
  Decl     452
  Set      481
  Used     483     492

INITSSIB                                                          Subroutine, Module procedure
  Decl      82     183
  Set 
  Used

INTERC                                                            Subroutine, Module procedure, PRIVATE
  Decl    3757
  Set 
  Used    5027

INTG                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     224     399
  Set 
  Used     701     757

INTG                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6400    6405
  Set 
  Used    6430

INTSIB                          Stack                             INTEGER
  Decl     453
  Set      485     488
  Used     527

IRAD                            Stack                             INTEGER
  Decl    4280
  Set     4294
  Used    4302

IRAD                            Stack                             INTEGER
  Decl    4512
  Set     4529
  Used    4531

IS                              Stack                             INTEGER
  Decl    7766
  Set     7805    7925
  Used    7807    7808    7809    7810    7811    7812    7815    7816    7818    7820    7822    7824    7837    7838    7839
          7845    7847    7859    7866    7878    7887    7912    7914    7915    7916    7926    7938    7942    7944    7946
          7948    7954

IS                              Stack                             INTEGER
  Decl    8017
  Set     8090    8166
  Used    8091    8092    8093    8094    8095    8096    8099    8100    8102    8104    8107    8109    8120    8121    8122
          8126    8127    8129    8130    8132    8135    8151    8153    8154    8155    8167    8169    8170    8171    8172
          8173    8174    8182

ISOIL                                                             INTEGER, PARAMETER
  Decl    7445
  Set 
  Used

ISTRT                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6399    6401
  Set 
  Used    6431

ISTRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     700     758

ISWRAD                          Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     223     377
  Set 
  Used

ITER                            Stack                             INTEGER
  Decl    7781
  Set     7896    7936    7940    7945
  Used    7914    7915    7916    7937    7938    7941    7942    7946    7948    7954

ITER                            Stack                             INTEGER
  Decl    8037
  Set     8138
  Used    8153    8154    8155

ITFAC                           Stack                             INTEGER
  Decl    7794
  Set     7941
  Used    7944

ITR                             Stack                             INTEGER
  Decl     453
  Set      527
  Used

ITSOIL                          Stack                             INTEGER
  Decl    7793
  Set     7937
  Used    7944

ITVEG                                                             INTEGER, PARAMETER
  Decl    7444
  Set 
  Used

ITYP                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2024    2138    2740    2741    7075    7076    7077    7078    7079    7080    7081    7082    7083    7084    7085
          7086    7087    7088    7089    7090    7091    7092    7093    7094    7095    7096    7097    7099    7100    7101
          7102    7103    7104    7105    7106    7107    7150    7151    7152    7153    7154    7155    7156    7157    7158
          7159    7160    7161    7162    7163    7164    7165    7166    7167    7168    7169    7170    7171    7172    7173
          7174    7175    7176    7177    7178    7179    7180    7181    7182    7183    7250    7334    7743    7744    7745
          7760    7805    7997    7998    7999    8012    8090

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     220     237
  Set 
  Used     475     476     477     478     529     562     623     685

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     787     791
  Set 
  Used     811     812     813     814     815     816     817     818     819     820     821     822     823     826

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     836     879
  Set 
  Used     898     902

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2025
  Set 
  Used    2050

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2139
  Set 
  Used    2224    2256

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2314    2362
  Set 
  Used    2427    2435    2480

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2693    2742
  Set 
  Used    2792    2849    2858

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3113    3280
  Set 
  Used    3458    3471    3557    3564    3572    3589    3599    3731

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3759    3820
  Set 
  Used    3930    3962    3990    4084    4171    4194

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4208    4247
  Set 
  Used    4312

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4561    4603
  Set 
  Used    4631

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4683    4876
  Set 
  Used    5019    5024    5029    5045

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5056    5099
  Set 
  Used    5191

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5507
  Set 
  Used    5688    5689    5690    5711    5727    5739    5753    5770    5777    5794    5807    5816    5819    5877    5902

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6557    6571
  Set 
  Used    6627

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6665    6749
  Set 
  Used    6827    6864

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    7400    7454
  Set 
  Used    7560    7581    7592    7608    7678

IV                              Stack                             INTEGER
  Decl    7114
  Set     7256    7276    7285
  Used    7258    7261    7264    7265    7266    7267    7268    7269    7270    7271    7278    7279    7280    7281    7287
          7289    7290    7291    7292    7293    7294    7295    7296

IVEG                            Stack                             INTEGER
  Decl    2778
  Set     2786
  Used    2796    2801    2802    2803    2804    2805    2806    2808    2809    2816    2831    2851    2865    2866

IVEG                            Stack                             INTEGER
  Decl    3893
  Set     3958
  Used    3960    3981    3983    3994    3996    3998    4001    4003    4006    4008    4010    4020    4021    4025    4038
          4060    4064    4076    4078    4082    4086    4116    4117    4129    4135    4136    4141    4147    4148    4153
          4160    4163    4165    4167    4179    4185    4186

IVEG                            Stack                             INTEGER
  Decl    4279
  Set     4293    4309
  Used    4302    4303    4313    4321    4323    4332    4344    4351    4352    4363    4369    4370    4377    4387    4389
          4391    4392    4407    4408    4424    4430    4437    4443

IVEG                            Stack                             INTEGER
  Decl    4510
  Set     4527
  Used    4531

IVEG                            Stack                             INTEGER
  Decl    5142
  Set     5150
  Used    5151    5178    5179    5181    5195    5197    5215    5216    5217    5218    5223    5225    5228    5230    5235

IVEG                            Stack                             INTEGER
  Decl    5671
  Set     5725    5759
  Used    5728    5729    5730    5760    5779    5780

IVEGM                           Stack                             INTEGER
  Decl    7769
  Set     7828    7831
  Used    7837    7838    7839

IVEGM                           Stack                             INTEGER
  Decl    8025
  Set     8114    8118
  Used    8120    8121    8122

IWAVE                           Stack                             INTEGER
  Decl    4511
  Set     4528
  Used    4531

IWHEAT                                                            INTEGER, PARAMETER
  Decl    7505
  Set 
  Used    7560    7581    7592    7608    7613    7678

IWV                                                               INTEGER, PARAMETER
  Decl    7448
  Set 
  Used

IWV                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     205     296     297     434    3845    4246    4259    4497    4919    4920    4942    5562    5563    5620    6587
          6588    6754    6755    7075    7150    7182

J                               Stack                             INTEGER
  Decl     453
  Set      454
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468

J                               Stack                             INTEGER
  Decl     797
  Set      809
  Used     811     812     813     814     815     816     817     818     819     820     821     822     823

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     183     185
  Set 
  Used

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7709    7732
  Set 
  Used    7734    7738    7739    7740    7803

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7964    7986
  Set 
  Used    7988    7989    7990    7991    7994    7995    8088

JCG                             Stack                             INTEGER
  Decl    7111
  Set     7248
  Used    7251

JDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     209     351
  Set 
  Used     538     661

JJ                              Stack                             INTEGER
  Decl    6790
  Set     6877    6882
  Used    6879    6884

JMON                            Stack                             INTEGER
  Decl    7112
  Set     7249    7275
  Used    7251    7279    7280    7281

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(IN)
  Decl    2076    2132
  Set 
  Used    2222

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(INOUT)
  Decl    3114    3274
  Set     3553    3560
  Used    3558    3565    3590

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(INOUT)
  Decl    4668    5016
  Set 
  Used    5046

JSTNEU                          Stack                             LOGICAL
  Decl    5637
  Set 
  Used    5696

JTYP                            Stack                             INTEGER
  Decl    7113
  Set     7250    7257    7258    7277    7278
  Used    7251    7261    7264    7265    7266    7267    7268    7269    7270    7271    7279    7280    7281

K                               Stack                             INTEGER
  Decl    8013
  Set     8181    8188    8207    8260
  Used    8182    8183    8189    8208    8262    8263    8264

K                               Stack                             INTEGER
  Decl    8372
  Set     8376    8380    8397    8414    8447    8461
  Used    8377    8381    8398    8420    8428    8430    8440    8441    8452    8453    8455    8462

K1                              Stack                             INTEGER
  Decl    6793
  Set     6933    6938
  Used    6944    6959    6960    6961    6989    6990    6991

K2                              Stack                             INTEGER
  Decl    6794
  Set     6932    6939
  Used    6951    6953    6954    6955    6962    6963    6964    6965    6981    6983    6984    6985    6992    6993    6994
          6995

KK                              Stack                             INTEGER
  Decl    7484
  Set     7644
  Used    7645    7646    7648    7649    7651    7654    7657    7666

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     232
  Set 
  Used     358     359     360     361     362     363     364     743

KMON                            Stack                             INTEGER, DIMENSION(13)
  Decl    7502
  Set     7552    7556
  Used    7596    7651    7654    7666

KOLD                            Stack                             INTEGER
  Decl    7478
  Set     7550    7557
  Used    7552

KPBL                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6082    6158
  Set 
  Used    6160    6161

KQPBL                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6082    6159
  Set 
  Used    6162

KSTART                          Stack                             INTEGER
  Decl    8373
  Set     8385
  Used

KT                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     223     376
  Set 
  Used     481

KTM                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     367
  Set 
  Used     481

L                               Stack                             INTEGER
  Decl    8374
  Set     8413    8422    8434
  Used    8420    8428    8430    8436    8440    8441

LAT                             Stack                             INTEGER
  Decl    7784
  Set     7923
  Used    7924    7925    7927    7948    7954

LAT                             Stack                             INTEGER
  Decl    8041
  Set     8161
  Used    8162    8164    8166    8189    8208    8257    8258    8263    8264    8270    8271    8272

LATCO                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6564    6599
  Set 
  Used    6632

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     209     352
  Set 
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468     534     538
           628     661     701

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     787     790
  Set 
  Used     811     812     813     814     815     816     817     818     819     820     821     822     823     826

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5266    5618
  Set 
  Used    5905    5912

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6400    6406
  Set 
  Used    6450    6511    6534

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6670    6766
  Set 
  Used    6811    6812    6813    6814

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7400    7453
  Set 
  Used    7682    7683    7684    7685    7686    7687    7688    7689    7690    7691    7692    7693    7694

LATMAX                          Stack                             INTEGER
  Decl    7782
  Set     7803
  Used    7923

LATMAX                          Stack                             INTEGER
  Decl    8016
  Set     8088
  Used    8161

LL                              Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    1149
  Set     1189
  Used    1190

LOG                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0     190    2229    2232    2237    2430    2452
          2484    2807    3485    4046    4097    4387    4389    4391    4424    4430    4631    6042    6054    6056    6059
          7324    7859    7866    7933    8129    8130

LON                             Stack                             INTEGER
  Decl    7785
  Set     7924
  Used    7925    7927    7948    7954

LON                             Stack                             INTEGER
  Decl    8042
  Set     8162
  Used    8164    8166    8189    8208    8257    8258    8263    8264    8270    8271    8272

LONMAX                          Stack                             INTEGER
  Decl    7783
  Set     7802
  Used

LONMAX                          Stack                             INTEGER
  Decl    8015
  Set     8087
  Used

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
           707     765    1810    2214    2301    2455    2487    2501    2533    2545    2621    2643    2661    2681    2811
          2840    2851    3480    3484    3507    3981    4048    4062    4099    4105    4145    4290    4625    4652    5780
          5788    6040    6051    6391    6643    6815    6832    7042    7251    7928    8317    8338    8347

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
          1178    1192    1816    2428    2456    2486    2500    2507    2533    2540    2545    2620    2810    2823    2836
          2839    2852    2866    3472    3473    3483    3513    3994    4047    4098    4133    4196    4302    4398    5195
          5782    6052    6365    6491    6833    6841    6849    7043    7328    7334    7929    7931    7944    8338

MIND                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    7481
  Set     7597
  Used    7648

ML                              Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6792
  Set     6859    6861
  Used    6921    6922    6923    6924    6925    6926    6953    6954    6955    6959    6960    6961    6962    6963    6964
          6970    6971    6972    6983    6984    6985    6989    6990    6991    6992    6993    6994    7000    7001    7002

MNL                             Stack                             INTEGER
  Decl    7485
  Set     7645    7646
  Used    7650    7666

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    7556    7646

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     235
  Set 
  Used     475     476     477     478     529     562     623     685

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     787     792
  Set 
  Used     811     812     813     826

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     837     874
  Set 
  Used     898     902

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2019
  Set 
  Used    2063

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2133
  Set 
  Used    2225    2232    2237    2257

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3113    3277
  Set 
  Used    3459    3558    3565    3573    3590    3733    3734    3735    3736

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4684    4873
  Set 
  Used    5045

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5278    5504
  Set 
  Used    5712

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    6665    6747
  Set     6867    6872    6873    7032
  Used    6832    6833    6835    6856    6879    6884    6897    6898    6899    6910    6911    6912    6921    6922    6923
          6924    6925    6926    6935    6944    6953    6954    6955    6959    6960    6961    6962    6963    6964    6965
          6970    6971    6972    6983    6984    6985    6989    6990    6991    6992    6993    6994    6995    7000    7001
          7002    7027    7028    7029    7030

MONL                            Dummy Arg                         INTEGER, DIMENSION(12), INTENT(IN)
  Decl    7401    7460
  Set 
  Used    7557    7645

MONL                            Use assoc                         INTEGER, From module OPTIONS, DIMENSION(12), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     827

MONTH                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    7400    7456
  Set 
  Used    7613

MONTH2                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    6557    6569
  Set 
  Used    6627

MONX                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6789
  Set     6856
  Used    6867    6873    7032

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     227     432
  Set 
  Used     734     753

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    6004
  Set 
  Used    6025    6037

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6086    6192
  Set 
  Used    6264    6289    6291    6300    6340    6349    6372

MXITER                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7709    7733
  Set 
  Used    7743    7744    7745    7872    7896    7936    7940    7945

MXITER                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7968    7987
  Set 
  Used    7997    7998    7999    8131    8138

N                               Stack                             INTEGER
  Decl    2408
  Set     2419    2426    2434    2479
  Used    2420    2421    2422    2427    2428    2429    2430    2435    2449    2452    2453    2455    2456    2458    2459
          2480    2481    2486    2494    2495    2496    2497    2498    2499    2500    2501    2506    2507    2508    2509
          2512    2513    2518    2521    2522    2523    2528    2529    2530    2531    2532    2533    2534    2535    2540
          2541    2542    2543    2546    2547    2552    2555    2556    2557    2603    2604    2608    2609    2612    2613
          2618    2619    2622    2623    2637    2638    2639    2643    2644    2645    2649    2650    2651    2661    2662
          2663    2667    2668    2669    2681

N                               Stack                             INTEGER
  Decl    4617
  Set     4620    4647    4651    4655
  Used    4625    4631    4648    4652    4656

NC                              Stack                             INTEGER
  Decl    6428
  Set     6444    6505    6528
  Used

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     221     230
  Set 
  Used     235     237     242     243     244     245     246     247     248     249     250     251     252     253     257
           258     259     260     261     265     266     267     268     269     270     271     272     273     274     275
           276     277     278     279     280     281     282     283     284     285     286     287     288     289     290
           291     292     293     294     295     296     297     298     299     300     301     302     306     307     308
           309     310     311     312     313     314     315     316     317     318     319     320     321     322     323
           324     325     329     330     331     332     333     334     335     336     337     338     339     340     341
           342     343     344     345     346     347     348     349     354     355     356     357     358     359     360
           361     362     363     364     365     366     369     370     371     372     373     374     375     380     381
           382     383     384     385     386     388     389     390     391     392     393     394     395     396     397
           398     401     402     403     404     406     409     410     411     412     413     415     416     417     418
           420     421     422     423     424     425     426     427     428     429     430     431     432     434     435
           436     437     438     439     440     441     442     443     444     445     446     447     448     449     450
           496     567     610     633     700     717     733     751     755

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     787     788
  Set 
  Used     791     792     793     796

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     837     873
  Set 
  Used     874     879     880     881     882     883     887     888     890     891

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     922    1023
  Set 
  Used    1030    1035    1036    1037    1041    1042    1043    1044    1048    1049    1050    1051    1052    1053    1054
          1055    1056    1057    1058    1059    1060    1061    1062    1063    1064    1065    1066    1067    1068    1069
          1070    1074    1075    1076    1077    1078    1079    1080    1081    1082    1083    1084    1088    1089    1090
          1091    1092    1093    1094    1095    1096    1097    1098    1099    1100    1101    1102    1106    1107    1108
          1109    1110    1111    1112    1113    1114    1115    1116    1117    1120    1122    1131    1132    1133    1134
          1135    1136    1143    1145    1146    1147    1148    1149

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1869    1910
  Set 
  Used    1912    1916    1917    1918    1919    1920    1921    1922    1923    1924    1925    1929    1930    1931    1932
          1933    1934    1935    1936    1937

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1983    2018
  Set 
  Used    2019    2025    2026    2027    2031    2035    2036    2037    2038    2039    2040    2042    2043

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2076    2130
  Set 
  Used    2133    2139    2140    2141    2146    2147    2148    2152    2153    2154    2158    2159    2160    2161    2162
          2163    2164    2165    2171

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2314    2357
  Set 
  Used    2362    2366    2367    2368    2369    2373    2375    2376    2377    2378    2379    2380

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2694    2731
  Set 
  Used    2733    2734    2742    2743    2747    2748    2749    2753    2754    2755    2756    2757    2758    2759    2760
          2761    2762    2763    2764    2766    2767    2768    2769    2770    2771    2772

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2883    2935
  Set 
  Used    2943    2947    2948    2949    2950    2954    2955    2956    2957    2958    2959    2960    2961    2962    2963
          2964    2965    2966    2967    2971    2972    2973    2974    2975    2976    2977    2978    2979    2980    2981
          2982    2983    2984    2988    2989    2990    2994    2999    3000    3001    3002    3003    3004    3005    3006
          3007

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3114    3272
  Set 
  Used    3277    3280    3282    3283    3284    3285    3286    3287    3292    3293    3294    3295    3296    3300    3301
          3302    3303    3304    3308    3309    3310    3311    3312    3313    3314    3315    3316    3317    3318    3319
          3320    3321    3322    3323    3324    3325    3326    3327    3328    3329    3330    3331    3332    3333    3334
          3335    3339    3340    3341    3342    3343    3344    3345    3346    3347    3348    3349    3350    3351    3352
          3353    3354    3355    3359    3360    3361    3362    3363    3364    3365    3366    3367    3368    3369    3370
          3371    3372    3373    3374    3375    3376    3377    3381    3382    3383    3384    3385    3386    3387    3388
          3389    3390    3391    3392    3393    3394    3395    3397    3398    3399    3400    3401    3402    3403    3406
          3412    3413    3414    3415    3417    3418    3419    3420    3421    3422    3423    3425    3426    3427    3436
          3459    3558    3565    3573    3590    3595    3600    3606    3655    3700    3717

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3760    3815
  Set 
  Used    3820    3821    3827    3828    3829    3833    3834    3835    3836    3837    3841    3842    3843    3844    3845
          3849    3850    3853    3854    3855    3856    3857    3858    3859    3860    3861    3862    3863    3864    3865
          3866    3867    3868    3869    3870    3871    3872    3873    3874    3875    3876    3877    3878    3879    3880
          3881    3882    3883

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4208    4244
  Set 
  Used    4246    4247    4248    4249    4250    4251    4256    4257    4258    4259    4263    4265    4266    4267    4268
          4269    4270    4271    4272    4273    4274    4275    4276

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4461    4483
  Set 
  Used    4485    4490    4494    4495    4496    4497    4498    4499    4500    4501    4502    4505    4506

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4561    4600
  Set 
  Used    4603    4607    4611    4612    4615

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4684    4870
  Set 
  Used    4873    4876    4880    4881    4882    4883    4884    4888    4889    4890    4891    4892    4893    4894    4895
          4896    4897    4898    4899    4900    4901    4902    4903    4904    4905    4906    4907    4908    4909    4910
          4911    4912    4913    4914    4915    4916    4917    4918    4919    4920    4921    4922    4923    4924    4925
          4930    4931    4932    4933    4934    4935    4936    4937    4939    4940    4941    4942    4943    4944    4945
          4946    4947    4948    4949    4950    4951    4952    4953    4954    4958    4959    4960    4961    4962    4963
          4964    4965    4966    4967    4968    4969    4970    4971    4972    4973    4974    4975    4976    4978    4979
          4980    4981    4982    4983    4984    4985    4986    4987    4988    4989    4990    4991    4992    4993    4994
          4995    4997    5001    5002    5003    5004    5005    5006    5007    5008    5009    5010    5011    5012    5013
          5014    5015    5019    5022    5025    5030    5046

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5056    5095
  Set 
  Used    5099    5103    5104    5105    5106    5107    5111    5112    5113    5114    5115    5119    5120    5121    5122
          5124    5125    5126    5127    5128    5129    5130    5131    5132    5133    5134    5135    5136    5137    5138
          5139

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5278    5501
  Set 
  Used    5504    5507    5512    5513    5514    5515    5516    5517    5518    5519    5523    5524    5525    5526    5527
          5531    5532    5533    5534    5535    5536    5537    5538    5539    5540    5541    5542    5543    5544    5545
          5546    5547    5548    5549    5550    5551    5552    5553    5554    5555    5556    5557    5558    5559    5560
          5561    5562    5563    5564    5565    5566    5567    5568    5572    5573    5574    5575    5576    5577    5578
          5579    5580    5581    5582    5583    5584    5585    5586    5587    5588    5589    5590    5591    5595    5596
          5597    5598    5599    5600    5601    5602    5603    5604    5605    5606    5607    5608    5609    5610    5611
          5612    5613    5614    5615    5620    5621    5622    5623    5624    5625    5626    5627    5628    5629    5630
          5631    5632    5633    5634    5635    5638    5643    5644    5645    5646    5647    5648    5649    5650    5651
          5652    5653    5654    5655    5656    5657    5659    5660    5661    5662    5663    5664    5665    5675    5676
          5677    5678    5712    5739    5816

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5929    5979
  Set 
  Used    5980    5981    5982    5983    5984    5985    5986    5987    5988    5990    5991    5992    5993    5994    5995
          5996    5997    5998    5999    6000    6001    6002    6003    6004    6019    6024    6036

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6085    6157
  Set 
  Used    6160    6161    6162    6163    6164    6165    6166    6167    6168    6169    6170    6171    6173    6176    6177
          6178    6179    6180    6181    6182    6183    6184    6185    6186    6187    6188    6189    6190    6191    6192
          6193    6194    6195    6196    6197    6198    6199    6200    6201    6202    6203    6204    6205    6206    6207
          6208    6209    6210    6211    6212    6213    6214    6215    6216    6217    6218    6219    6220    6221    6222
          6223    6224    6225    6263    6287    6290    6299    6339    6348    6371

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6399    6402
  Set 
  Used    6407    6408    6409    6410    6411    6412    6413    6414    6415    6416    6417    6418    6419    6420    6421
          6422    6423    6424    6425    6426    6427

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6557    6568
  Set 
  Used    6569    6571    6572    6573    6574    6575    6576    6577    6578    6579    6580    6581    6582    6583    6584
          6585    6586    6587    6588    6589    6590    6591    6592    6593    6594    6595    6596    6597    6598    6600
          6601    6602    6603    6604    6605    6606    6635

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6665    6746
  Set 
  Used    6747    6749    6750    6751    6752    6753    6754    6755    6756    6757    6758    6759    6760    6761    6762
          6763    6764    6765    6768    6769    6772    6773    6774    6775    6776    6777    6778    6779    6780    6781
          6782    6788    6789

NCOUNT                          Stack                             INTEGER
  Decl     453
  Set      472     495     498     566     569     609     612     632     635     716     719
  Used     503     504     505     506     507     512     513     514     515     516     518     519     523     524     570
           571     572     573     574     575     576     577     578     579     580     581     613     639     640     641
           642     643     645     646     647     648     650     651     655     656     720     721     722     723     724
           725

NCOUNT                          Stack                             INTEGER
  Decl    3440
  Set     3525    3527
  Used    3540    3702

NCOUNT                          Stack                             INTEGER
  Decl    6228
  Set     6283    6285
  Used    6346

NCOUNT                          Stack                             INTEGER
  Decl    6610
  Set     6634    6637
  Used    6638    6639    6640    6641

NDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5265    5617
  Set 
  Used    5905    5912

NFALB                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7229

NFCTRL                          Use assoc                         INTEGER, From module OPTIONS, DIMENSION(100), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7847    8127

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    5905    5912    6450    6511    6534    7188    7196    7847    8127

NFSIBD                          Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7201    7203

NINT                            Stack                             INTEGER
  Decl     453
  Set      484     487
  Used     494

NJ                                                                INTEGER, PARAMETER
  Decl    7071
  Set 
  Used    7099    7100    7105    7106

NJJ                                                               INTEGER, PARAMETER
  Decl    7071
  Set 
  Used    7101    7102    7103    7104

NK                                                                INTEGER, PARAMETER
  Decl    6784
  Set 
  Used    6786    6877    6882    6921    6922    6923    6934    6944    6951    6981

NK                                                                INTEGER, PARAMETER
  Decl    7071
  Set 
  Used    7102    7104    7108    7109

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     221     231
  Set 
  Used     455     472     474     481     529     562     563     585     601     616     623     631     685     686     693
           700     705

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     787     789
  Set 
  Used     810     826

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     837     875
  Set 
  Used     895

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     922    1026
  Set 
  Used    1170    1272    1394    1401    1527    1751    1787    1808    1839

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1869    1911
  Set 
  Used    1949

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1983    2020
  Set 
  Used    2049

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2076    2134
  Set 
  Used    2211    2223    2250

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2314    2360
  Set 
  Used    2419    2426    2434    2479

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2694    2736
  Set 
  Used    2790    2847    2856

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2883    2938
  Set 
  Used    3022    3040    3053    3062    3071    3078    3087

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3113    3278
  Set 
  Used    3444    3459    3463    3470    3528    3541    3558    3565    3567    3573    3581    3590    3595    3600    3606
          3608    3615    3626    3630    3637    3655    3657    3668    3687    3700    3703    3717    3719    3730

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3760    3818
  Set 
  Used    3905    3961    3969    3975    3989    4030    4053    4083    4115    4123    4152    4159    4175    4193

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4208    4245
  Set 
  Used    4289    4295    4311    4448

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4461    4484
  Set 
  Used    4513    4530    4540

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4561    4601
  Set 
  Used    4620    4647    4651    4655

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4684    4874
  Set 
  Used    5019    5022    5025    5030    5045

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5056    5097
  Set 
  Used    5153    5162    5171    5176    5185    5189    5234    5241

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5278    5505
  Set 
  Used    5683    5712    5718    5726    5739    5745    5752    5761    5765    5769    5776    5786    5793    5805    5816
          5818    5840    5876    5901

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6399    6403
  Set 
  Used    6432    6454    6480    6493    6516    6537

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6557    6570
  Set 
  Used    6611    6613    6627

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6665    6748
  Set 
  Used    6785    6792    6806    6807    6809    6820    6828    6838    6845    6857    6866    6878    6883    6890    6895
          6905    6917    6930    7008    7037

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7400    7452
  Set 
  Used    7454    7455    7456    7461    7464    7466    7467    7468    7469    7470    7471    7472    7481    7482    7487
          7488    7501    7525    7542    7559    7580    7591    7607    7677

NNN                             Stack                             INTEGER
  Decl    7344
  Set     7368
  Used

NS                              Stack                             INTEGER
  Decl    7480
  Set     7579    7606
  Used    7585    7586    7618    7619    7620    7621    7627    7629    7630    7632    7633    7659    7668    7670

NSIB                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    8352    8359
  Set 
  Used    8361    8364    8366    8367    8380    8384    8461

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     221     357
  Set 
  Used     534     628

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     787     796
  Set 
  Used     827

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6564    6598
  Set 
  Used    6631

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6669    6765
  Set 
  Used    6870    6872

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    7401    7461
  Set     7512    7679    7680    7681
  Used    7680    7681

NTYP                            Stack                             INTEGER
  Decl     894
  Set 
  Used

NTYP                            Stack                             INTEGER
  Decl    2047
  Set     2050
  Used    2063

NTYP                            Stack                             INTEGER
  Decl    2203
  Set     2224    2256
  Used    2225    2232    2237    2257

NTYP                            Stack                             INTEGER
  Decl    2410
  Set     2427    2435    2480
  Used    2429    2430    2437    2438    2448    2450    2454    2456    2458    2483    2484    2485    2488    2489    2497
          2498    2499    2500    2517    2519    2520    2521    2523    2531    2532    2533    2534    2551    2553    2554
          2555    2557    2603    2608    2609    2612    2614    2618    2619    2622    2624    2639    2645    2651    2663
          2669

NTYP                            Stack                             INTEGER
  Decl    2780
  Set     2792    2849    2858
  Used    2793    2816    2820    2821    2823    2824    2827    2828    2831    2860

NTYP                            Stack                             INTEGER
  Decl    3439
  Set     3471    3731
  Used    3481    3482    3489    3733    3734    3735    3736

NTYP                            Stack                             INTEGER
  Decl    3894
  Set     3930    3962    3990    4084    4171    4194
  Used    3932    4092    4108    4172

NTYP                            Stack                             INTEGER
  Decl    5143
  Set     5191
  Used    5226

NTYP                            Stack                             INTEGER
  Decl    5670
  Set     5727    5753    5770    5777    5794    5807    5819    5877    5902
  Used    5729    5754    5773    5778    5779    5780    5781    5782    5796    5809    5821    5825    5829    5878    5879
          5880    5905    5908    5912

NTYP                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6788
  Set     6827    6864    6869    6871
  Used    6832    6833    6835    6869    6897    6898    6899    6910    6911    6912    6918    6921    6922    6923    6924
          6925    6926    6931    6953    6954    6955    6959    6960    6961    6962    6963    6964    6970    6971    6972
          6983    6984    6985    6989    6990    6991    6992    6993    6994    7000    7001    7002    7027    7028    7029
          7030

NZG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7971    7993
  Set 
  Used    7995    8188

NZG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    8353    8360
  Set 
  Used    8368    8369    8376    8397    8436    8452    8453

NZGMAX                                                            INTEGER, PARAMETER
  Decl    8003
  Set 
  Used    8004    8077

OCEALB                          Stack                             REAL(KIND=8)
  Decl    6608
  Set     6644
  Used    6646    6648

OCEALD                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6647    6649

OPTIONS                                                           Module
  Decl
  Set 
  Used      74

P0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3860
  Set     3953    4187
  Used    4023    4025    4032    4039    4059    4073    4086

P1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4505
  Set     4545
  Used    4547    4550

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     301
  Set 
  Used     532     558     626     681

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4460    4501
  Set 
  Used    4545

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4682    4924
  Set 
  Used    5021

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5275    5567
  Set 
  Used    5710

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6563    6592
  Set 
  Used    6630

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6668    6759
  Set     7024
  Used

P2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4506
  Set     4546
  Used    4547

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     302
  Set 
  Used     532     558     626     681

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4461    4502
  Set 
  Used    4546

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4683    4925
  Set 
  Used    5022

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5276    5568
  Set 
  Used    5711

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6563    6593
  Set 
  Used    6630

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6668    6760
  Set     7015
  Used

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     280
  Set 
  Used

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4208    4256
  Set 
  Used    4323    4407

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4460    4495
  Set     4543    4547    4548    4549
  Used    4544    4548    4549    4550

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4679    4903
  Set 
  Used    5021    5024

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5273    5546
  Set 
  Used    5707

PATH                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     187
  Set 
  Used     192

PATH_IN                         Static offset=3264                CHARACTER(200), PRIVATE, SAVE
  Decl     175
  Set      192
  Used

PBL                                                               Subroutine, Module procedure, PRIVATE
  Decl    4668
  Set 
  Used    5696

PBLSIB                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 4, 5)
  Decl    1122
  Set     1546    1547    1548    1549    1553    1555    1562    1564    1574    1576    1636    1637    1646    1647    1648
          1650    1682    1703    1738    1746    1752    1753    1754    1755    1756    1757    1758    1759    1760    1761
          1762    1763    1764    1765    1766    1767    1768    1769    1770    1771    1773    1775    1778    1782
  Used    1788    1789    1790    1791

PCOEFS                                                            REAL(KIND=8), PARAMETER, DIMENSION(2, 2)
  Decl    3885
  Set 
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     281
  Set 
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4208    4257
  Set 
  Used    4387    4389    4391    4392    4407    4408

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4460    4496
  Set     4544    4550
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4680    4904
  Set 
  Used    5021    5024

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5273    5547
  Set 
  Used    5708

PERC                            Stack                             REAL(KIND=8)
  Decl    7473
  Set     7640
  Used    7659

PH1                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     153
  Set      802
  Used    7176

PH12                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     450
  Set      464
  Used

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2763
  Set 
  Used    2835

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3402
  Set 
  Used    3601

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4685    4953
  Set 
  Used    5046

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5279    5634
  Set 
  Used    5713

PH1_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     133
  Set     7211    7294
  Used     802     819    7156    7270

PH1_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     171
  Set      819    7690
  Used     204     464

PH1_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7081
  Set 
  Used    7201    7211

PH2                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     152
  Set      801
  Used    7175

PH22                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     449
  Set      465
  Used

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2764
  Set 
  Used    2835

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3403
  Set 
  Used    3601

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4685    4954
  Set 
  Used    5046

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5279    5635
  Set 
  Used    5713

PH2_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     134
  Set     7212    7295
  Used     801     820    7157    7271

PH2_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     170
  Set      820    7691
  Used     203     465

PH2_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7082
  Set 
  Used    7201    7212

PHENST                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 9)
  Decl    7487
  Set     7514    7567    7568    7569    7570    7571    7574    7575    7576    7577    7585    7586
  Used    7585    7586    7596    7618    7619    7620    7621    7627    7629    7630    7632    7633    7647    7654    7655
          7661    7662

PHI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7464
  Set     7531    7536    7538
  Used    7536    7538    7562    7567    7568    7569    7570    7571    7575

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     284
  Set 
  Used

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4561    4611
  Set     4648    4652    4656
  Used

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4680    4907
  Set 
  Used    5019

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5273    5550
  Set 
  Used    5708

PHSAT                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     137
  Set     7215    7300
  Used    2484    2489    3489    4631    7160    7810    8094    8172

PHSAT_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7085
  Set 
  Used    7202    7215

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     217     286
  Set 
  Used

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    2692    2756
  Set 
  Used    2830    2831

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3110    3326
  Set 
  Used    3598

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4561    4612
  Set     4631
  Used    4648    4652

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4680    4909
  Set 
  Used    5019    5042

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5274    5552
  Set 
  Used    5708

PIE                             Static offset=0                   REAL(KIND=8), SAVE, Initialized
  Decl    7486
  Set 
  Used    7531

PIE                             Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1162    3049    3902    4308    5743

PINF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3874
  Set     4073
  Used    4076    4078

PMAX                            Stack                             REAL(KIND=8)
  Decl    2392
  Set     2483
  Used    2484    2489

PMIN                            Stack                             REAL(KIND=8)
  Decl    2393
  Set     2488
  Used    2489

POROS                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     139
  Set     7217    7302
  Used    2437    2438    2450    2454    2456    2458    2520    2521    2523    2554    2555    2557    2603    2608    2609
          2612    2614    2618    2619    2622    2624    2639    2645    2651    3932    4108    4172    5226    5688    5689
          5690    5729    5754    5796    5829    5878    5879    5880    7162    7812    8096    8174

POROS_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7087
  Set 
  Used    7202    7217

POWER1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4268
  Set     4369
  Used    4387    4391

POWER2                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4269
  Set     4370
  Used    4389    4392

POWS                            Stack                             REAL(KIND=8)
  Decl    2389
  Set     2448
  Used    2449    2451    2452

PP                                                                REAL(KIND=8), PARAMETER
  Decl    6016
  Set 
  Used    6059

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     251
  Set      524     656
  Used     561     684

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3759    3828
  Set 
  Used    3908    3915    3921

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4677    4935
  Set 
  Used    5029

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5517
  Set 
  Used    5705    5882    5907

PPCI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     393
  Set 
  Used     656

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     252
  Set      523     655
  Used     561     684

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3759    3829
  Set 
  Used    3908    3915    3921

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4677    4936
  Set 
  Used    5029

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5518
  Set 
  Used    5705    5882    5907

PPLI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     392
  Set 
  Used     655

PROPS                           Stack                             REAL(KIND=8)
  Decl    2400
  Set     2510    2511    2544    2545
  Used    2512    2513    2546    2547

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     330
  Set 
  Used     539     662

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     914    1107
  Set 
  Used    1246    1255

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3104    3360
  Set 
  Used    3692    3720

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4673    4959
  Set 
  Used    5036

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5266    5596
  Set 
  Used    5701    5861

PSIT                            Stack                             REAL(KIND=8)
  Decl    3408
  Set     3489
  Used    3497

PSIT                            Stack                             REAL(KIND=8)
  Decl    7790
  Set 
  Used    7898

PSIT                            Stack                             REAL(KIND=8)
  Decl    8038
  Set 
  Used    8147

PSIT                            Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    8281    8290
  Set     8301
  Used    8317    8337

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     250
  Set 
  Used     561     684

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1037
  Set 
  Used    1508

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3296
  Set 
  Used    3546    3699

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4934
  Set 
  Used    5044

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5277    5516
  Set 
  Used    5705

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     211     343
  Set 
  Used     542     665

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     914    1111
  Set 
  Used    1267

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3106    3370
  Set 
  Used    3692

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4674    4970
  Set 
  Used    5038

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5268    5609
  Set 
  Used    5702

PSYI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1143
  Set     1267
  Used    1488    1498    1510    1512    1514    1516    1518    1520    1809    1813    1826    1828    1832

Q3G                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2375
  Set     2415    2449    2452    2453    2455    2456    2458    2513    2547
  Used    2523    2557    2603    2604

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     242
  Set      571     696     707
  Used     560     683     701

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1035
  Set 
  Used    1508

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3292
  Set     3641    3707    3728
  Used    3448    3546    3699

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4930
  Set 
  Used    5044

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5512
  Set 
  Used    5704

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6400    6408
  Set 
  Used    6434    6460    6498    6521    6542

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6558    6575
  Set     6615
  Used

QM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     244
  Set 
  Used     701

QM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6425
  Set     6434    6460    6498    6542
  Used    6485

QMAX                            Stack                             REAL(KIND=8)
  Decl    2404
  Set     2608    2618
  Used    2610    2620

QMIN                            Stack                             REAL(KIND=8)
  Decl    2405
  Set     2609    2619
  Used    2611    2621

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     245
  Set 
  Used     701

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6427
  Set     6485    6521
  Used    6460

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6560    6582
  Set 
  Used    6615

QMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3420
  Set     3448
  Used    3641

QMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6213
  Set     6275
  Used    6296

QMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl     221     359
  Set      721
  Used     575     576     577

QMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl    6082    6162
  Set     6296    6325    6333
  Used    6275    6317    6318    6342    6354

QQ                                                                REAL(KIND=8), PARAMETER
  Decl    6017
  Set 
  Used    6057

QQQ_1                           Stack                             REAL(KIND=8)
  Decl    2384
  Set     2597    2610    2611
  Used    2612    2614

QQQ_2                           Stack                             REAL(KIND=8)
  Decl    2384
  Set     2598    2620    2621
  Used    2622    2624

QSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     430
  Set      737     760     765     771
  Used     753     762     767     773     775

QSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6190
  Set     6358
  Used

QSFC0                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     426
  Set      767     773
  Used     762     781

QSFCM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     428
  Set      762     775     781
  Used     737

QSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     404
  Set 
  Used     744

QSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6082    6165
  Set 
  Used    6311    6319    6330    6351

R4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    7075    7099

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used      99     100     102     103     104     105     106     107     108     109     110     111     112     114     115
           116     117     118     119     120     121     122     123     124     127     128     129     130     131     132
           133     134     135     136     137     138     139     140     141     142     143     144     145     146     147
           148     149     150     151     152     153     154     155     156     157     158     159     160     162     163
           164     165     166     167     168     169     170     171     172     186     234     242     243     244     245
           246     247     248     249     250     251     252     253     257     258     259     260     261     265     266
           267     268     269     270     271     272     273     274     275     276     277     278     279     280     281
           282     283     284     285     286     287     288     289     290     291     292     293     294     295     296
           297     298     299     300     301     302     306     307     308     309     310     311     312     313     314
           315     316     317     318     319     320     321     322     323     324     325     329     330     331     332
           333     334     335     336     337     338     339     340     341     342     343     344     345     346     347
           348     349     354     355     356     358     359     360     361     362     363     364     365     369     370
           371     372     373     374     375     380     381     382     383     384     385     386     388     389     390
           391     392     393     394     395     396     397     398     401     402     403     404     406     407     408
           409     410     411     412     413     415     416     417     418     420     421     422     423     424     425
           426     427     428     429     430     431     434     435     436     437     438     439     440     441     442
           443     444     445     446     447     448     449     450     793     794     880     881     882     883     887
           888     890     891    1025    1030    1035    1036    1037    1041    1042    1043    1044    1048    1049    1050
          1051    1052    1053    1054    1055    1056    1057    1058    1059    1060    1061    1062    1063    1064    1065
          1066    1067    1068    1069    1070    1074    1075    1076    1077    1078    1079    1080    1081    1082    1083
          1084    1088    1089    1090    1091    1092    1093    1094    1095    1096    1097    1098    1099    1100    1101
          1102    1106    1107    1108    1109    1110    1111    1112    1113    1114    1115    1116    1117    1120    1122
          1123    1124    1125    1126    1127    1128    1129    1130    1131    1132    1133    1134    1135    1136    1137
          1138    1139    1140    1141    1142    1143    1144    1145    1146    1147    1148    1150    1151    1152    1153
          1154    1155    1156    1158    1159    1160    1912    1916    1917    1918    1919    1920    1921    1922    1923
          1924    1925    1929    1930    1931    1932    1933    1934    1935    1936    1939    1940    1941    1942    1943
          1944    1945    1946    2024    2026    2027    2031    2035    2036    2037    2038    2039    2040    2042    2043
          2045    2138    2140    2141    2146    2147    2148    2152    2153    2154    2158    2159    2160    2161    2162
          2163    2165    2169    2171    2173    2175    2177    2180    2183    2184    2185    2186    2187    2188    2189
          2190    2191    2192    2193    2194    2195    2196    2197    2198    2199    2200    2201    2359    2366    2367
          2368    2369    2373    2375    2376    2377    2378    2379    2380    2381    2382    2383    2384    2386    2387
          2388    2389    2390    2391    2392    2393    2394    2395    2396    2397    2398    2399    2400    2401    2402
          2403    2404    2405    2406    2407    2411    2733    2734    2740    2741    2743    2747    2748    2749    2753
          2754    2755    2756    2757    2759    2760    2761    2762    2763    2764    2766    2767    2768    2769    2770
          2771    2772    2773    2774    2775    2776    2777    2937    2943    2947    2948    2949    2950    2954    2955
          2956    2957    2958    2959    2960    2961    2962    2963    2964    2965    2966    2967    2971    2972    2973
          2974    2975    2976    2977    2978    2979    2980    2981    2982    2983    2984    2988    2989    2990    2994
          2999    3000    3001    3002    3003    3004    3005    3006    3007    3009    3010    3011    3012    3013    3276
          3282    3283    3284    3285    3286    3287    3292    3293    3294    3295    3296    3300    3301    3302    3303
          3304    3308    3309    3310    3311    3312    3313    3314    3315    3316    3317    3318    3319    3320    3321
          3322    3323    3324    3325    3326    3327    3328    3329    3330    3331    3332    3333    3334    3335    3339
          3340    3341    3342    3343    3344    3345    3346    3347    3348    3349    3350    3351    3352    3353    3354
          3355    3359    3360    3361    3362    3363    3364    3365    3366    3367    3368    3369    3370    3371    3372
          3373    3374    3375    3376    3381    3382    3383    3384    3385    3386    3387    3388    3389    3390    3391
          3392    3393    3394    3395    3397    3398    3399    3400    3401    3402    3403    3406    3408    3409    3410
          3411    3412    3413    3414    3415    3417    3418    3419    3420    3421    3422    3423    3424    3425    3426
          3430    3431    3432    3433    3434    3435    3436    3817    3821    3827    3828    3829    3833    3834    3835
          3836    3837    3841    3842    3843    3844    3845    3849    3850    3853    3854    3855    3856    3857    3858
          3859    3860    3861    3862    3863    3864    3865    3866    3867    3868    3869    3870    3871    3872    3873
          3874    3875    3876    3877    3878    3879    3880    3881    3882    3883    3885    3888    3889    3890    3891
          4246    4248    4249    4250    4251    4256    4257    4258    4259    4263    4265    4266    4267    4268    4269
          4270    4271    4272    4273    4274    4275    4276    4281    4282    4283    4284    4485    4490    4494    4495
          4496    4497    4498    4499    4500    4501    4502    4505    4506    4607    4611    4612    4615    4872    4880
          4881    4882    4883    4884    4888    4889    4890    4891    4892    4893    4894    4895    4896    4897    4898
          4899    4900    4901    4902    4903    4904    4905    4906    4907    4908    4909    4910    4911    4912    4913
          4914    4915    4916    4917    4918    4919    4920    4921    4922    4923    4924    4925    4930    4931    4932
          4933    4934    4935    4936    4937    4939    4940    4941    4942    4943    4944    4945    4946    4947    4948
          4949    4950    4951    4952    4953    4954    4958    4959    4960    4961    4962    4963    4964    4965    4966
          4967    4968    4969    4970    4971    4972    4973    4974    4975    4976    4978    4979    4980    4981    4982
          4983    4984    4985    4986    4987    4988    4989    4990    4991    4992    4993    4994    4995    5001    5002
          5003    5004    5005    5006    5007    5008    5009    5010    5011    5012    5013    5014    5015    5096    5103
          5104    5105    5106    5107    5111    5112    5113    5114    5115    5119    5120    5121    5122    5124    5125
          5126    5127    5128    5129    5130    5131    5132    5133    5134    5135    5136    5137    5138    5139    5144
          5503    5512    5513    5514    5515    5516    5517    5518    5519    5523    5524    5525    5526    5527    5531
          5532    5533    5534    5535    5536    5537    5538    5539    5540    5541    5542    5543    5544    5545    5546
          5547    5548    5549    5550    5551    5552    5553    5554    5555    5556    5557    5558    5559    5560    5561
          5562    5563    5564    5565    5566    5567    5568    5572    5573    5574    5575    5576    5577    5578    5579
          5580    5581    5582    5583    5584    5585    5586    5587    5588    5589    5590    5591    5595    5596    5597
          5598    5599    5600    5601    5602    5603    5604    5605    5606    5607    5608    5609    5610    5611    5612
          5613    5614    5615    5620    5621    5622    5623    5624    5625    5626    5627    5628    5629    5630    5631
          5632    5633    5634    5635    5643    5644    5645    5646    5647    5648    5649    5650    5651    5652    5653
          5654    5655    5656    5657    5659    5660    5661    5662    5663    5664    5665    5672    5673    5674    5675
          5676    5677    5678    5679    5980    5981    5982    5983    5984    5985    5986    5987    5988    5989    5990
          5991    5992    5993    5994    5995    5996    5997    5998    5999    6000    6001    6002    6003    6006    6007
          6008    6009    6010    6011    6012    6013    6014    6015    6016    6017    6018    6019    6020    6021    6160
          6161    6162    6163    6164    6165    6166    6167    6168    6169    6170    6171    6172    6173    6174    6175
          6176    6177    6178    6179    6180    6181    6182    6183    6184    6185    6186    6187    6188    6189    6190
          6191    6193    6194    6195    6196    6197    6198    6199    6200    6201    6202    6203    6204    6205    6206
          6207    6208    6209    6210    6211    6212    6213    6214    6215    6216    6217    6218    6219    6220    6221
          6222    6223    6224    6225    6229    6230    6231    6232    6233    6234    6235    6236    6237    6238    6239
          6240    6241    6242    6244    6245    6246    6247    6248    6249    6404    6407    6408    6409    6410    6411
          6412    6413    6414    6415    6416    6417    6418    6419    6420    6421    6422    6423    6424    6425    6426
          6427    6572    6573    6574    6575    6576    6577    6578    6579    6580    6581    6582    6583    6584    6585
          6586    6587    6588    6589    6590    6591    6592    6593    6594    6595    6596    6597    6601    6602    6603
          6604    6605    6606    6608    6609    6750    6751    6752    6753    6754    6755    6756    6757    6758    6759
          6760    6761    6762    6763    6764    6768    6769    6772    6773    6774    6775    6776    6777    6778    6779
          6780    6781    6782    6785    6786    6796    6801    6803    6804    6805    7069    7070    7117    7118    7119
          7120    7121    7231    7232    7233    7234    7235    7236    7237    7238    7239    7240    7241    7343    7455
          7457    7458    7462    7463    7464    7465    7466    7467    7468    7469    7470    7471    7472    7473    7474
          7475    7476    7486    7487    7491    7493    7496    7501    7506    7507    7734    7735    7739    7740    7743
          7744    7745    7747    7752    7758    7759    7760    7761    7762    7763    7770    7771    7772    7773    7774
          7775    7776    7777    7778    7779    7780    7786    7787    7788    7789    7790    7791    7792    7872    7988
          7990    7991    7994    7995    7997    7998    7999    8004    8005    8006    8010    8011    8012    8014    8018
          8019    8020    8026    8027    8028    8029    8030    8031    8032    8033    8034    8035    8036    8038    8039
          8040    8060    8065    8077    8131    8282    8283    8284    8285    8286    8287    8288    8289    8290    8291
          8292    8293    8294    8295    8361    8362    8363    8364    8366    8367    8368    8369    8370

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     265
  Set 
  Used     549     672

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     918    1048
  Set 
  Used    1282    1301    1338    1359    1367    1385    1461    1467    1508

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1916
  Set 
  Used    1964    1965

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2074    2152
  Set     2297    2301
  Used

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2954
  Set 
  Used    3026    3031

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3308
  Set 
  Used    3556    3563    3588    3594    3605    3610    3611    3654    3696    3715

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4888
  Set 
  Used    5040

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5531
  Set 
  Used    5705    5867    5869

RADALB                                                            Subroutine, Module procedure
  Decl      86    6664
  Set 
  Used       0     622    6626

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl     218     297
  Set 
  Used

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    4460    4497
  Set 
  Used    4531

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    4682    4920
  Set 
  Used    5021

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    5275    5563
  Set 
  Used    5710

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6562    6588
  Set 
  Used

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6667    6755
  Set     7009    7010    7011    7012    7018    7019    7020    7021
  Used

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(INOUT)
  Decl     220     253
  Set      503     504     505     506     512     513     514     515     518     519     640     641     642     643     645
           646     647     648     650     651
  Used

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    4461    4490
  Set 
  Used    4531    4541    4542    4543    4544    4545    4546

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    4677    4937
  Set 
  Used    5022

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    5277    5519
  Set 
  Used    5705

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     279
  Set 
  Used

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     919    1059
  Set     1840    1841
  Used    1682    1703

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3110    3322
  Set     3642    3643
  Used    3449    3450    3697

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4460    4494
  Set     4514    4515    4531    4541    4542
  Used

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4679    4902
  Set 
  Used    5021    5042

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5273    5545
  Set 
  Used    5707    5893    5894    5913

RADUSE                                                            Subroutine, Module procedure, PRIVATE
  Decl    4460
  Set 
  Used    5021

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     266
  Set 
  Used     549     672

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     918    1049
  Set 
  Used    1282    1301    1312    1338    1344    1359    1367    1374    1410    1416    1809

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1917
  Set 
  Used    1952    1953

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1982    2035
  Set     2056
  Used

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2955
  Set 
  Used    3026    3031

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3309
  Set 
  Used    3572    3594    3605    3610    3611    3654    3696    3715

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4889
  Set 
  Used    5040

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5532
  Set 
  Used    5705    5867    5869

RBC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     440
  Set      475
  Used     538     661

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     836     883
  Set      904
  Used

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2027
  Set 
  Used    2056

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3286
  Set     3736
  Used    3458    3572

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4947
  Set 
  Used    5045

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5265    5628
  Set 
  Used    5704

RBRD                                                              Subroutine, Module procedure, PRIVATE
  Decl    1982
  Set 
  Used    3571

RBYG                            Static offset=4864                REAL(KIND=8), PRIVATE, SAVE
  Decl     100
  Set      191
  Used    6041

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     268
  Set 
  Used     550     673

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1051
  Set     1410
  Used    1416    1821

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1868    1919
  Set     1952
  Used    1953

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3311
  Set 
  Used    3594    3605    3654    3696

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4891
  Set 
  Used    5041

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5534
  Set 
  Used    5706

RCDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1145
  Set     1396
  Used    1555    1840

RCDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1146
  Set     1397
  Used    1553    1840

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     344
  Set 
  Used     542     665

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     914    1112
  Set 
  Used    1267    1293    1312    1320

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1867    1931
  Set     1951
  Used

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3371
  Set 
  Used    3593    3604    3653    3692

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4971
  Set 
  Used    5038

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5610
  Set 
  Used    5702

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     267
  Set 
  Used     549     672

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     918    1050
  Set 
  Used    1282    1301    1320    1338    1344    1367    1374    1385    1432    1433    1434    1440    1441    1442    1449
          1455    1813    1822    1823    1824

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1918
  Set 
  Used    1956    1958    1959    1961

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1982    2036
  Set     2064
  Used

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2956
  Set 
  Used    3026    3030

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3310
  Set 
  Used    3572    3594    3605    3610    3611    3654    3696    3715

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4890
  Set 
  Used    5040

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5533
  Set 
  Used    5706    5867    5869

RDAY                            Stack                             REAL(KIND=8)
  Decl    7462
  Set     7518
  Used    7619    7621    7626    7627    7630    7633    7647    7651    7655    7661    7662    7666

RDC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     439
  Set      476
  Used     537     660

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     836     882
  Set      903
  Used

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2026
  Set 
  Used    2064

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3285
  Set     3735
  Used    3458    3572

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4946
  Set 
  Used    5045

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5265    5627
  Set 
  Used    5704

RDENOM                          Stack                             REAL(KIND=8)
  Decl    2403
  Set     2594    2595    2596
  Used    2597    2598

RDSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3423
  Set     3449    3450
  Used    3642    3643

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    7231    7233    7235    7237    7238    7239    7240    7241    7872    8131

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3885    7752    8060    8065

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3885    7752    8060    8065

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3885    7752    8060    8065

RE_ASSIGN_SIB_SOIL_PROP                                           Subroutine, Module procedure
  Decl      89    7340
  Set 
  Used

RFAC                            Stack                             REAL(KIND=8)
  Decl    2187
  Set     2206
  Used

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     269
  Set 
  Used     550     673

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1052
  Set     1420
  Used    1432    1440    1822

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1868    1920
  Set     1954
  Used    1956

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3312
  Set 
  Used    3594    3605    3654    3696

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4892
  Set 
  Used    5041

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5535
  Set 
  Used    5706

RGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1147
  Set     1398
  Used    1547    1841

RGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1148
  Set     1399
  Used    1546    1841

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     416
  Set 
  Used     749

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5929    5982
  Set     6070
  Used

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6181
  Set 
  Used    6287    6303    6304    6306    6307    6310    6311    6313    6316    6317    6319    6328    6329    6330    6332
          6334    6350    6351    6353    6354

RHO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     424
  Set 
  Used     752

RHO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6086    6189
  Set     6266
  Used    6303    6304    6306    6307    6310    6311    6313    6316    6317    6319    6329    6330    6332    6334    6350
          6351    6353    6354    6373    6374    6377    6379

RHO4                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4275
  Set     4414
  Used    4424    4430

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     210     342
  Set 
  Used     542     665

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1930
  Set 
  Used    1951

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3105    3369
  Set 
  Used    3593    3604    3653

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4674    4969
  Set 
  Used    5037

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5267    5608
  Set 
  Used    5702    5846

RHOICE                                                            REAL(KIND=8), PARAMETER
  Decl    6248
  Set 
  Used    6258

RIB                             Stack                             REAL(KIND=8)
  Decl    2175
  Set     2259    2263    2264
  Used    2265    2266    2267    2268    2278    2279    2280    2282    2284

RIB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    6001
  Set     6050    6051    6052
  Used    6053    6054    6056    6059

RIB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6208
  Set 
  Used    6289

RIBC                                                              REAL(KIND=8), PARAMETER
  Decl    6007
  Set 
  Used

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     415
  Set 
  Used     749

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5929    5981
  Set     6069
  Used

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6180
  Set 
  Used    6287    6373    6374    6377    6379

RNET                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6185
  Set     6265
  Used    6310

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     324
  Set 
  Used     548     671

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2314    2373
  Set     2604    2639    2645    2651
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3758    3849
  Set     3924    3985    4106    4165
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4995
  Set 
  Used    5028

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5055    5122
  Set     5228
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5590
  Set     5829
  Used    5700    5738    5816    5882    5908

ROFFO                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3876
  Set     4102    4105
  Used    4106    4107

ROOT                                                              Subroutine, Module procedure, PRIVATE
  Decl    4561
  Set 
  Used    5019

ROOTD                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     135
  Set     7213    7296
  Used    3600    5779    5780    7158    7269

ROOTD                           Dummy Arg                         REAL(KIND=8), DIMENSION(13, 2), INTENT(IN)
  Decl    2694    2740
  Set 
  Used    2816    2831

ROOTD_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7083
  Set 
  Used    7202    7213

ROOTGC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7466
  Set     7609    7667
  Used

RPLANT                          Stack                             REAL(KIND=8)
  Decl    8295
  Set     8337    8338
  Used    8346

RR                                                                REAL(KIND=8), PARAMETER
  Decl    6018
  Set 
  Used    6057

RSAME                           Stack                             REAL(KIND=8)
  Decl    2395
  Set     2493    2496    2527    2530
  Used    2498    2532

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     283
  Set 
  Used     553     676

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     919    1061
  Set 
  Used    1196    1422    1820

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1925
  Set 
  Used    1955

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3324
  Set     3485
  Used    3514    3515    3595    3606    3655    3697

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4906
  Set 
  Used    5042

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5549
  Set 
  Used    5708

RSOIL                           Stack                             REAL(KIND=8)
  Decl    8292
  Set     8311    8331
  Used    8346

RSOILM                          Stack                             REAL(KIND=8)
  Decl    7780
  Set     7895
  Used    7897

RSOILM                          Stack                             REAL(KIND=8)
  Decl    8036
  Set     8136
  Used    8143

RSOILM                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8286
  Set 
  Used    8331

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     282
  Set 
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     919    1060
  Set     1196
  Used    1410    1420

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1868    1924
  Set 
  Used    1952    1954

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    2692    2755
  Set     2859    2861    2865    2866
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3110    3323
  Set     3514
  Used    3451    3452    3594    3598    3605    3654    3697

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4208    4258
  Set     4313    4344    4424    4430    4437    4443    4449
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4680    4905
  Set 
  Used    5024    5042

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5273    5548
  Set 
  Used    5708

RSTPAR                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     159
  Set      807
  Used    7182

RSTPAR2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2, 3)
  Decl     434
  Set      466     467     468
  Used

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    4209    4246
  Set 
  Used    4332    4351    4352    4424    4437

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    4684    4942
  Set 
  Used    5025

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    5278    5620
  Set 
  Used    5712

RSTPAR_FIXED                    Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     127
  Set     7205    7287
  Used     807     821     822     823    7150    7261

RSTPAR_GBL                      Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     172
  Set      821     822     823    7692    7693    7694
  Used     205     466     467     468

RSTPAR_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 2, 3)
  Decl    7075
  Set 
  Used    7201    7205

RSURF                           Stack                             REAL(KIND=8)
  Decl    1124
  Set     1422    1820
  Used    1433    1434    1441    1442    1823    1824

RSURF                           Stack                             REAL(KIND=8)
  Decl    1940
  Set     1955
  Used    1958    1959

RUNOFF                                                            Subroutine, Module procedure, PRIVATE
  Decl    2313
  Set 
  Used    5815

RZ2                             Stack                             REAL(KIND=8)
  Decl    2201
  Set     2279
  Used    2282    2284

RZL                             Stack                             REAL(KIND=8)
  Decl    2200
  Set     2278
  Used    2282

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl     221     355
  Set 
  Used

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl    6563    6595
  Set 
  Used    6638    6639    6640    6641

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl    6669    6762
  Set     7013    7014    7022    7023
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     217     289
  Set 
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     920    1065
  Set 
  Used    1178    1185

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3111    3329
  Set 
  Used    3472    3473    3698

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3758    3843
  Set 
  Used    3981    4038    4060

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4681    4912
  Set 
  Used    5028    5043

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5274    5555
  Set 
  Used    5709

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6561    6586
  Set 
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6666    6753
  Set     6830    6831    6834
  Used    6841

SATCO                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     138
  Set     7216    7301
  Used    2450    2497    2499    2500    2531    2533    2534    4092    7161

SATCO_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7086
  Set 
  Used    7202    7216

SCOV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6776
  Set     6839    6841
  Used    6891    6948    6954    6955    6960    6961    6963    6964    6971    6972

SCOV2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6777
  Set     6847    6849
  Used    6891    6923    6926    6978    6984    6985    6990    6991    6993    6994    7001    7002

SDEP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     890
  Set      899     900
  Used     901     903     904

SEASFC                                                            Subroutine, Module procedure
  Decl      84    6081
  Set 
  Used     741

SENS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     409
  Set 
  Used     748

SENS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6176
  Set     6329    6350
  Used    6331    6353

SEXTRP                                                            Subroutine, Module procedure
  Decl      85    6397
  Set 
  Used     698

SFC_SSIB                                                          Module
  Decl       6
  Set 
  Used

SFLXES                                                            Subroutine, Module procedure, PRIVATE
  Decl    3102
  Set 
  Used    5034

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     322
  Set 
  Used     548     671

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2984
  Set     3055
  Used

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3355
  Set 
  Used    3714

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4994
  Set 
  Used    5040

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5055    5120
  Set 
  Used    5242

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5588
  Set 
  Used    5700    5738    5894    5913

SI1                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7067    7069
  Set 
  Used    7324

SIBMAX                          Stack                             REAL(KIND=8), DIMENSION(13)
  Decl    7760
  Set     7845
  Used    7847    7859    7866    7878    7887    7912    7954

SIBMAX                          Stack                             REAL(KIND=8), DIMENSION(13)
  Decl    8012
  Set     8126
  Used    8127    8129    8130    8132    8135    8151

SIBWET                                                            Subroutine, Module procedure
  Decl      91    7708
  Set 
  Used

SIBWET_GLSM                                                       Subroutine, Module procedure
  Decl      92    7963
  Set 
  Used

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl     225     407
  Set 
  Used     747

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    5930    5989
  Set 
  Used    6047

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    6084    6174
  Set 
  Used    6253    6259    6288    6329    6350

SIGN                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1843    3660    7536    7538

SIN                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used     747

SINCLI                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6019
  Set     6032
  Used    6039

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     210     341
  Set 
  Used     542     665

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5267    5607
  Set 
  Used    5864    5865

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5980
  Set 
  Used    6032

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6083    6173
  Set 
  Used    6289    6384    6385    6388    6389

SINMAX                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7709    7735
  Set 
  Used    7928    7929    7930    7931    7932    7933

SINP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7709    7734
  Set 
  Used    7927

SL1                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7067    7070
  Set 
  Used    7324

SL1KAP                          Stack                             REAL(KIND=8)
  Decl    6236
  Set     6259
  Used    6306    6310    6314    6315

SLOP                            Stack                             REAL(KIND=8)
  Decl    2388
  Set     2436    2437    2438
  Used    2451

SLRAD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     401
  Set 
  Used     743

SLRAD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6082    6163
  Set 
  Used    6265

SM                              Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7743
  Set     7796    7914
  Used    7944    7946    7948    7954

SM                              Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7997
  Set     8081    8153
  Used

SMAL2                                                             REAL(KIND=8), PARAMETER
  Decl    2411
  Set 
  Used    2420    2421    2422

SMALL                                                             REAL(KIND=8), PARAMETER
  Decl    3430
  Set 
  Used    3480    3484    3507

SMIN                            Stack                             REAL(KIND=8)
  Decl    7774
  Set     7866
  Used    7872

SMIN                            Stack                             REAL(KIND=8)
  Decl    8030
  Set     8130
  Used    8131

SNOFAC                          Stack                             REAL(KIND=8)
  Decl    3013
  Set     3061
  Used    3064    3080

SNOMEL                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3061    4129    4130    4133    4141    4142    4145    5197    5199    5214

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     217     290
  Set 
  Used

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3758    3844
  Set     4008    4078    4086    4135    4147    4186
  Used    4010    4116    4141    4185

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4681    4913
  Set 
  Used    5028

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5055    5113
  Set     5178    5181    5215    5217
  Used    5195    5217    5235

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5274    5556
  Set 
  Used    5709    5738

SNOWM                                                             Subroutine, Module procedure, PRIVATE
  Decl    5054
  Set 
  Used    5737

SNOWP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3882
  Set     3998    4003
  Used    4008    4086    4117

SOILM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7970    7988
  Set     8270
  Used

SOILMO                          Stack                             REAL(KIND=8)
  Decl    7778
  Set     7881    7906
  Used    7887    7912    7914

SOILMO                          Stack                             REAL(KIND=8)
  Decl    8034
  Set     8134    8150
  Used    8135    8151    8153

SPECHT                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3862
  Set     3966    3971
  Used    4118    4119

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     421
  Set 
  Used     751

SPEEDM                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2171
  Set     2213    2214
  Used    2227    2243    2260    2296

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5996
  Set     6039    6040
  Used    6050    6068

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6186
  Set     6390    6391
  Used    6288    6328

SPWET                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3881
  Set     4196
  Used    4197

SPWET                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5134
  Set     5195
  Used    5199

SPWET1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3863
  Set     3994
  Used    4118    4119

SQRT                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    2056    2213    5743    6055    6057    6060    6386    6390    7056

SREF                            Stack                             REAL(KIND=8)
  Decl    7773
  Set     7859
  Used    7872    7881

SREF                            Stack                             REAL(KIND=8)
  Decl    8029
  Set     8129
  Used    8131    8134

SS                                                                REAL(KIND=8), PARAMETER
  Decl    6011
  Set 
  Used    6060

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     395
  Set 
  Used     706     708     709     710     711     712     713

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    7709    7740
  Set     7799    7948
  Used

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7967    7991
  Set     8084    8257    8264
  Used

SSIBT                           Stack                             REAL(KIND=8)
  Decl    7789
  Set     7944
  Used    7946

SSIB_DRIVER                                                       Subroutine, Module procedure
  Decl      98     208
  Set 
  Used

ST4                             Stack                             REAL(KIND=8)
  Decl    6237
  Set     6260
  Used    6305

STB4                            Stack                             REAL(KIND=8)
  Decl    1158
  Set     1391
  Used    1397    1398    1399

STB8                            Stack                             REAL(KIND=8)
  Decl    1159
  Set     1392
  Used    1396

STBI                            Stack                             REAL(KIND=8)
  Decl    6805
  Set     7036
  Used    7056

STEFAN                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1391    1392    6260    6312    7036    7047    7048    7049    7050    7054

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     218     295
  Set 
  Used

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2692    2757
  Set 
  Used    2865

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3111    3334
  Set     3451    3452    3515
  Used    3598

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4682    4918
  Set 
  Used    5043

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5275    5561
  Set 
  Used    5710

STOMAT                                                            Subroutine, Module procedure, PRIVATE
  Decl    4207
  Set 
  Used    5024

STOR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     418
  Set 
  Used     750

STOR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6183
  Set     6281    6364
  Used

STRES2                                                            Subroutine, Module procedure, PRIVATE
  Decl    2691
  Set 
  Used    3597

SUBDT                           Stack                             REAL(KIND=8)
  Decl    2386
  Set     2413
  Used    2451    2520    2521    2523    2554    2555    2557    2603    2604    2608    2609    2612    2614    2618    2619
          2622    2624

SUBDTI                          Stack                             REAL(KIND=8)
  Decl    2387
  Set     2414
  Used    2454    2457

SYR                                                               REAL(KIND=8), PARAMETER
  Decl    7506
  Set 
  Used    7567    7568    7569    7570    7571    7574    7575    7577

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     272
  Set 
  Used     551     674

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1053
  Set     1301
  Used    1312    1320

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2074    2153
  Set 
  Used    2258

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2692    2753
  Set 
  Used    2850

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3315
  Set     3542    3610
  Used    3556    3563    3583    3588    3598    3617    3696

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4895
  Set 
  Used    5041

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5538
  Set     5869
  Used    5706

TAEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3002
  Set     3030
  Used

TBEE                            Stack                             REAL(KIND=8)
  Decl    7762
  Set     7811
  Used    7859    7866    7897

TBEE                            Stack                             REAL(KIND=8)
  Decl    8019
  Set     8095    8173
  Used    8129    8130    8141

TBEE                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8284
  Set 
  Used    8301

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     257
  Set      592
  Used     530     558     624     681     699

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1041
  Set 
  Used    1301    1312    1396    1398

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2693    2747
  Set 
  Used    2797

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2947
  Set 
  Used    3024

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3300
  Set     3638    3704
  Used    3445    3534    3542    3568    3599    3610    3644    3646    3698    3716

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3758    3833
  Set     4154
  Used    3963

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4880
  Set 
  Used    5028    5043

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5056    5103
  Set     5219
  Used    5155

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5523
  Set     5719
  Used    5711    5739    5869    5909

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6398    6411
  Set 
  Used    6437    6457    6496    6519    6540

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6558    6572
  Set     6618
  Used    6628

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6666    6750
  Set 
  Used    6840    7038

TC0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     224     397
  Set 
  Used     699

TC0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6398    6416
  Set     6437    6457    6496    6540
  Used    6483

TC4                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6778
  Set     7038
  Used    7047    7050    7054

TCEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3000
  Set     3024
  Used    3030    3064

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     369
  Set 
  Used     592     700

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6399    6421
  Set     6483    6519
  Used    6457

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6559    6579
  Set 
  Used    6618

TCSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3417
  Set     3445
  Used    3638

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     270
  Set 
  Used     550     673

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2037
  Set 
  Used    2051    2052

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3313
  Set     3568
  Used    3572

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4893
  Set 
  Used    5041

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5536
  Set 
  Used    5706

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     259
  Set      591     602
  Used     559     603     604     682     699

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1043
  Set 
  Used    1682

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2314    2367
  Set 
  Used    2509    2543

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2949
  Set 
  Used    3055

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3302
  Set 
  Used    3699    3716

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3758    3835
  Set 
  Used    4162

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4882
  Set 
  Used    5028    5044

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5056    5105
  Set 
  Used    5224

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5525
  Set     5746
  Used    5711    5739    5816    5909

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6398    6409
  Set 
  Used    6435    6455    6494    6517    6538

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6559    6576
  Set     6616
  Used

TD0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     223     373
  Set      604
  Used     699

TD0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6398    6414
  Set     6435    6455    6494    6538
  Used    6481

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     371
  Set      603
  Used     591     602     700

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6399    6419
  Set     6481    6517
  Used    6455

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6560    6583
  Set 
  Used    6616

TEM                             Stack                             REAL(KIND=8)
  Decl    1946
  Set     1956
  Used    1957    1960

TEMDIF                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2042
  Set     2052    2054    2058    2060
  Used    2063

TEMP                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 18)
  Decl    6785
  Set     6897    6899    6910    6912    6921    6924    6953    6965    6970    6983    6995    7000
  Used    7009    7010    7011    7012    7013    7014    7015    7016    7017    7018    7019    7020    7021    7022    7023
          7024    7025    7026

TEMRES                                                            Subroutine, Module procedure, PRIVATE
  Decl     913
  Set 
  Used    3691

TEST                            Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    7488
  Set     7524    7669
  Used    7617

TEX                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3872
  Set     4059    4062    4064
  Used    4068

TF                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     896    1189    2506    2510    2540    2544    3041    3064    3080    3511    3976    4000    4069    4075    4085
          4121    4125    4132    4134    4144    4146    4162    5177    5186    5192    5203    5205    5224    6821    6840
          6846

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     258
  Set      598
  Used     530     559     594     596     624     682     699

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     836     887
  Set 
  Used

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1042
  Set 
  Used    1189    1301    1320    1397    1399    1682

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2031
  Set 
  Used    2063

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2314    2366
  Set 
  Used    2506    2508    2540    2542

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2693    2748
  Set 
  Used    2799

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2948
  Set 
  Used    3023    3055

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3301
  Set     3639    3705
  Used    3446    3458    3497    3511    3535    3569    3572    3599    3610    3645    3647    3698    3716

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3758    3834
  Set     4156
  Used    3970    4069    4180    4182

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4881
  Set 
  Used    5028    5043

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5056    5104
  Set     5221
  Used    5164

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5524
  Set     5720
  Used    5711    5739    5816    5869    5909

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6398    6410
  Set 
  Used    6436    6456    6495    6518    6539

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6558    6573
  Set     6617
  Used    6628

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6666    6751
  Set 
  Used    6821    6846    7039

TG0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     223     374
  Set      619
  Used     699

TG0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6398    6415
  Set     6436    6456    6495    6539
  Used    6443    6450    6482    6504    6511

TG4                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6779
  Set     7039
  Used    7048    7049    7055

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     356
  Set 
  Used     533     627     724

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6564    6596
  Set 
  Used    6631

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6669    6763
  Set     7056
  Used

TGEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2999
  Set     3023
  Used    3030    3041    3080

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     370
  Set      618
  Used     598     700

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6399    6420
  Set     6482    6491    6518
  Used    6456    6527    6534

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6560    6580
  Set 
  Used    6617

TGS                             Stack                             REAL(KIND=8)
  Decl    2398
  Set     2508    2542
  Used    2509    2543

TGSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3418
  Set     3446
  Used    3639

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     271
  Set 
  Used     550     673

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2038
  Set 
  Used    2057    2058

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3314
  Set     3569
  Used    3572

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4894
  Set 
  Used    5041

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5537
  Set 
  Used    5706

THA                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5930    5997
  Set     6048
  Used    6049

THA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6204
  Set 
  Used    6288

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     300
  Set 
  Used     532     558     626     681

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1070
  Set 
  Used    1395

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3335
  Set 
  Used    3698

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4460    4500
  Set 
  Used    4541    4542

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4682    4923
  Set 
  Used    5021    5043

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5275    5566
  Set 
  Used    5710

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6562    6591
  Set 
  Used    6630

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6668    6758
  Set     7044
  Used    7045    7055

THETA                           Stack                             REAL(KIND=8)
  Decl    3891
  Set     3932
  Used    3938

THM                             Stack                             REAL(KIND=8)
  Decl    2169
  Set     2255
  Used    2258    2260

THM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    5998
  Set     6047
  Used    6049    6050

THM                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6205
  Set 
  Used    6289

THRSH                           Stack                             REAL(KIND=8)
  Decl    7463
  Set     7523
  Used

THRU                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3856
  Set     3925    4068    4070    4087
  Used    4073    4094    4095    4102    4107    4187

THVGM                           Stack                             REAL(KIND=8)
  Decl    2173
  Set     2258
  Used    2259

THVGM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    6000
  Set     6049
  Used    6050

THVGM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6207
  Set 
  Used    6289

TICE                                                              REAL(KIND=8), PARAMETER
  Decl    6245
  Set 
  Used    6302    6312    6327    6362    6363    6365

TICE                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     756     778

TIM                             Stack                             REAL(KIND=8)
  Decl    1153
  Set     1164
  Used    1546

TIMCN2                          Stack                             REAL(KIND=8)
  Decl    1152
  Set     1163
  Used    1164    1682

TIMCON                          Stack                             REAL(KIND=8)
  Decl    1151
  Set     1162
  Used    1163

TIMCON                          Stack                             REAL(KIND=8)
  Decl    3009
  Set     3049
  Used    3055

TIMCON                          Stack                             REAL(KIND=8)
  Decl    5674
  Set     5743
  Used    5746

TIME                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7744
  Set     7797    7915
  Used    7938

TIME                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7998
  Set     8082    8154
  Used

TIMES                           Stack                             REAL(KIND=8)
  Decl    7777
  Set     7880    7913
  Used    7915

TIMES                           Stack                             REAL(KIND=8)
  Decl    8033
  Set     8133    8152
  Used    8154

TLAI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7468
  Set     7611    7657    7659
  Used    7664    7667    7683

TLL                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     157
  Set      805
  Used    7180

TLL2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     443
  Set      461
  Used

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2694    2760
  Set 
  Used    2802    2804    2805    2806

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3399
  Set 
  Used    3600

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4685    4950
  Set 
  Used    5046

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5279    5631
  Set 
  Used    5713

TLL_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     130
  Set     7208    7291
  Used     805     816    7153    7266

TLL_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     167
  Set      816    7687
  Used     200     461

TLL_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7078
  Set 
  Used    7201    7208

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     243
  Set      570
  Used     560     683     701

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1036
  Set 
  Used    1301

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2146
  Set 
  Used    2255

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2943
  Set 
  Used    3025

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3293
  Set     3640    3706    3727
  Used    3447    3557    3564    3568    3569    3589    3610    3699    3717

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3759    3827
  Set 
  Used    4075    4085    4120    4121    4130    4131    4132    4142    4143    4144

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4931
  Set 
  Used    5029    5044

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5513
  Set 
  Used    5704    5869    5909

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6400    6407
  Set 
  Used    6433    6459    6497    6520    6541

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6558    6574
  Set     6614
  Used

TM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     246
  Set 
  Used     701

TM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6424
  Set     6433    6459    6497    6541
  Used    6484

TMAX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     448
  Set      596
  Used     602

TMEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3001
  Set     3025
  Used    3031

TMIN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     447
  Set      594
  Used     602     618     619

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     247
  Set 
  Used     701

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6426
  Set     6484    6520
  Used    6459

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6560    6581
  Set 
  Used    6614

TMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3419
  Set     3447
  Used    3640

TMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6212
  Set     6274
  Used    6295

TMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl     221     358
  Set      720
  Used     572     573     574

TMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl    6082    6160
  Set     6295    6324    6331
  Used    6274    6314    6315    6341    6353

TN                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5136
  Set     5203
  Used    5207

TOP                             Stack                             REAL(KIND=8)
  Decl    1130
  Set     1467
  Used    1469

TOP                             Stack                             REAL(KIND=8)
  Decl    1944
  Set     1965
  Used    1969

TOPT                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     158
  Set      806
  Used    7181

TOPT2                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     442
  Set      460
  Used

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2694    2759
  Set 
  Used    2803    2804    2806    2809

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3398
  Set 
  Used    3600

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4685    4949
  Set 
  Used    5046

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5278    5630
  Set 
  Used    5713

TOPT_FIXED                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     129
  Set     7207    7290
  Used     806     815    7152    7265

TOPT_GBL                        Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     166
  Set      815    7686
  Used     199     460

TOPT_R4                         Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7077
  Set 
  Used    7201    7207

TOTALP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3855
  Set     3908
  Used    3909    3915    3921    3953

TOTDEP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5661
  Set     5773    5778
  Used    5780

TOTWB                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5675
  Set     5688
  Used    5904    5906

TPH1                            Stack                             REAL(KIND=8)
  Decl    7771
  Set     7838
  Used    7898

TPH1                            Stack                             REAL(KIND=8)
  Decl    8027
  Set     8121
  Used    8145

TPH1                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8288
  Set 
  Used    8337

TPH2                            Stack                             REAL(KIND=8)
  Decl    7772
  Set     7839
  Used    7898

TPH2                            Stack                             REAL(KIND=8)
  Decl    8028
  Set     8122
  Used    8146

TPH2                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8289
  Set 
  Used    8337

TPHSAT                          Stack                             REAL(KIND=8)
  Decl    7761
  Set     7810
  Used    7859    7866    7897

TPHSAT                          Stack                             REAL(KIND=8)
  Decl    8018
  Set     8094    8172
  Used    8129    8130    8142

TPHSAT                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8285
  Set 
  Used    8301

TPOROS                          Stack                             REAL(KIND=8)
  Decl    7763
  Set     7812
  Used    7845    7848

TPOROS                          Stack                             REAL(KIND=8)
  Decl    8020
  Set     8096    8174
  Used    8126    8128    8264    8272

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     491    7189    7193    7197

TS                              Stack                             REAL(KIND=8)
  Decl    2399
  Set     2509    2543
  Used    2510    2544

TS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3861
  Set     3963    3970
  Used    3976    4000    4120    4121    4130    4131    4132    4142    4143    4144

TS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5125
  Set     5155    5164    5205    5207
  Used    5172    5173    5219    5221

TSAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3421
  Set     3583
  Used    3617

TSD                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3873
  Set     4120    4131    4134    4143    4146
  Used    4125    4134    4146    4154    4156

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     224     394
  Set      724     764     769
  Used     759     779

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5929    5987
  Set 
  Used    6027    6029    6038

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6083    6171
  Set     6366
  Used    6287    6302    6327    6362

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6566    6605
  Set 
  Used    6642

TSEAM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     402
  Set      759     770     779
  Used     735

TSF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3877
  Set     4121
  Used    4124

TSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     431
  Set      736
  Used     753     761     766     772     774

TSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6191
  Set     6357
  Used

TSFC0                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     427
  Set      766     772
  Used     761     780

TSFCM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     429
  Set      761     774     780
  Used     736

TSINP                           Stack                             REAL(KIND=8)
  Decl    7786
  Set     7927    7928    7929
  Used    7930    7931    7932    7933

TSNOW                           Stack                             REAL(KIND=8)
  Decl    2396
  Set     2506    2540
  Used    2508    2542

TSSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6214
  Set     6273
  Used    6294

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     403
  Set 
  Used     744     756     778

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5929    5986
  Set 
  Used    6048

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6082    6164
  Set     6294    6323    6365
  Used    6269    6270    6273    6287    6305    6310    6312    6315    6329    6350    6363    6366

TT                                                                REAL(KIND=8), PARAMETER
  Decl    6010
  Set 
  Used    6060

TTA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5128
  Set     5172
  Used    5177    5186    5192

TTB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5129
  Set     5173
  Used    5186

TTI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3869
  Set     4023    4025
  Used    4068

TU                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     156
  Set      804
  Used    7179

TU2                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     444
  Set      462
  Used

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2694    2761
  Set 
  Used    2801    2803    2808    2809

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3400
  Set 
  Used    3600

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4685    4951
  Set 
  Used    5046

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5279    5632
  Set 
  Used    5713

TU_FIXED                        Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     131
  Set     7209    7292
  Used     804     817    7154    7267

TU_GBL                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     168
  Set      817    7688
  Used     201     462

TU_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7079
  Set 
  Used    7201    7209

TV                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2766
  Set     2784    2797    2799    2801    2802
  Used    2805    2808

TVSGM                           Stack                             REAL(KIND=8)
  Decl    7121
  Set     7323
  Used    7324

TWI                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2377
  Set     2428
  Used    2429    2430    2449

TWIP                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2378
  Set     2429
  Used    2494    2495    2528    2529

TWIPP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2379
  Set     2430
  Used    2494    2499    2501    2528    2533    2535

TZDEP                           Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    7758
  Set     7807    7808    7809
  Used    7845    7847    7848

TZDEP                           Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    8010
  Set     8091    8092    8093    8169    8170    8171
  Used    8126    8127    8128    8270    8271    8272

TZDEP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    8354    8361
  Set 
  Used    8381

TZLTM                           Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7759
  Set     7815    7816    7820    7824
  Used    7818    7822    7829

TZLTM                           Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    8011
  Set     8099    8100    8104    8109
  Used    8102    8107    8116

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     278
  Set 
  Used     552     675

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1982    2039
  Set 
  Used    2056    2063    2064

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2154
  Set     2243
  Used    2260

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3321
  Set 
  Used    3557    3564    3572    3589

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4901
  Set 
  Used    5042

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5544
  Set 
  Used    5707

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     220     248
  Set 
  Used     560     683

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2147
  Set 
  Used    2213

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3112    3294
  Set 
  Used    3557    3564    3589

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4676    4932
  Set 
  Used    5044

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5514
  Set 
  Used    5704    5864

UM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6202
  Set     6388
  Used    6390

UMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     411
  Set 
  Used     748

UMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6178
  Set     6373    6384
  Used    6376    6386

UMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 4), INTENT(INOUT)
  Decl     222     360
  Set      722     723
  Used     578     579     580     581

UMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 4), INTENT(INOUT)
  Decl    6082    6161
  Set     6376    6378
  Used

UPDATE                                                            Subroutine, Module procedure, PRIVATE
  Decl    2878
  Set 
  Used    3712

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     339
  Set 
  Used     541     664

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2074    2163
  Set     2296
  Used    2297

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3368
  Set 
  Used    3556    3563    3588

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4967
  Set 
  Used    5037

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5605
  Set 
  Used    5702    5846

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    6003
  Set     6068
  Used    6069    6070

USTAR                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6209
  Set 
  Used    6289

USTARM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     422
  Set 
  Used     752

USTARM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6085    6187
  Set     6386    6387
  Used    6387

USTARN                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2073    2165
  Set     2227
  Used    2243

USTARN                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3406
  Set 
  Used    3555    3562    3587

VCOVER                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     438
  Set      456
  Used

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     922    1030
  Set 
  Used    1168

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1869    1912
  Set 
  Used    1956    1958    1959    1961

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2693    2743
  Set 
  Used    2865

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3112    3282
  Set 
  Used    3443

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3759    3821
  Set 
  Used    4021

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4208    4248
  Set 
  Used    4303    4321    4363

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4461    4485
  Set 
  Used    4541    4542

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4675    4943
  Set 
  Used    5022    5024    5029    5044

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5265    5624
  Set 
  Used    5703

VCOVER                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    6769
  Set     6813    6814
  Used    7041    7045    7055

VCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    1120
  Set     1168    1191
  Used    1395    1432    1433    1434    1440    1441    1442    1449    1455    1813    1822    1823    1824

VCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3436
  Set     3443    3512
  Used    3595    3599    3606    3655    3700

VCOVER_GBL                      Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     162
  Set      811    7682
  Used     195     456    6813    6814

VCV                                                               REAL(KIND=8), PARAMETER
  Decl    7507
  Set 
  Used    7662

VEGIN                                                             Subroutine, Module procedure
  Decl      88    7067
  Set 
  Used

VERT_INTERP                                                       Subroutine, Module procedure, PRIVATE
  Decl    8352
  Set 
  Used    8195

VKRMN                                                             REAL(KIND=8), PARAMETER
  Decl    2183
  Set 
  Used    2208

VKRMN                                                             REAL(KIND=8), PARAMETER
  Decl    6006
  Set 
  Used    6042

VKRMNI                          Stack                             REAL(KIND=8)
  Decl    2188
  Set     2208
  Used    2226    2233    2238    2243

VLT                                                               REAL(KIND=8), PARAMETER, DIMENSION(13)
  Decl    7496
  Set 
  Used

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     220     249
  Set 
  Used     560     683

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2148
  Set 
  Used    2213

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3112    3295
  Set 
  Used    3557    3564    3589

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4677    4933
  Set 
  Used    5044

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5515
  Set 
  Used    5705    5865

VM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6203
  Set     6389
  Used    6390

VMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     412
  Set 
  Used     749

VMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6179
  Set     6374    6385
  Used    6378    6386

VNTLAX                                                            Subroutine, Module procedure, PRIVATE
  Decl    2073
  Set 
  Used       0    3562    3587

VNTLT1                                                            Subroutine, Module procedure, PRIVATE
  Decl    5928
  Set 
  Used    6286

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     219     261
  Set      588     589     590
  Used     699

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    2314    2369
  Set     2420    2421    2422    2603    2612    2613    2622    2623    2638    2644    2650    2662    2663    2668    2669
          2681
  Used    2420    2421    2422    2428    2453    2456    2459    2481    2486    2522    2556    2608    2609    2618    2619
          2637    2643    2649    2661    2667

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    2693    2749
  Set 
  Used

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3112    3304
  Set 
  Used    3480    3482    3599

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3759    3837
  Set     4107    4172
  Used    3932

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    4561    4607
  Set 
  Used    4625

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4683    4884
  Set 
  Used    5019    5029    5044

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5056    5107
  Set     5225
  Used

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5276    5527
  Set     5729    5754    5795    5808    5810    5821    5822    5825    5826    5830
  Used    5688    5689    5690    5711    5739    5806    5816    5820    5824    5828    5829    5878    5879    5880    5906
          5907

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    6398    6412
  Set 
  Used    6438    6439    6440    6463    6466    6469    6499    6500    6501    6522    6523    6524    6543    6544    6545

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(OUT)
  Decl    6559    6578
  Set     6621    6622    6623
  Used

W                               Stack                             REAL(KIND=8)
  Decl    7779
  Set     7887    7912
  Used    7895    7897

W                               Stack                             REAL(KIND=8)
  Decl    8035
  Set     8135    8151
  Used    8136    8139

W                               Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8280    8282
  Set 
  Used    8301    8311

W0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     224     396
  Set      708     709     710
  Used     699

W0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    6398    6417
  Set     6438    6439    6440    6463    6466    6469    6499    6500    6501    6543    6544    6545
  Used    6462    6465    6468    6486    6487    6488

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     345
  Set 
  Used     543     666

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     914    1113
  Set     1178
  Used    1416    1809    1821

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1932
  Set 
  Used    1953

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3372
  Set     3472
  Used    3593    3604    3653    3692

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4972
  Set 
  Used    5038

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5611
  Set 
  Used    5703

WF                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8367
  Set     8404    8408    8409    8420    8430    8440    8453    8455
  Used    8462

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     346
  Set 
  Used     543     666

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     914    1114
  Set     1185    1192
  Used    1432    1440    1449    1455    1813    1822

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1867    1933
  Set 
  Used    1956    1961

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3373
  Set     3473    3513
  Used    3593    3604    3653    3692

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4973
  Set 
  Used    5038

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5268    5612
  Set 
  Used    5703

WHEAT                                                             Subroutine, Module procedure
  Decl      90    7400
  Set 
  Used     826

WI                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8369
  Set     8398
  Used    8408    8409    8420    8430    8440

WLAI                                                              REAL(KIND=8), PARAMETER, DIMENSION(9)
  Decl    7491
  Set 
  Used

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     222     372
  Set      711     712     713
  Used     588     589     590     700

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    6399    6422
  Set     6486    6487    6488    6522    6523    6524
  Used    6463    6466    6469

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    6561    6585
  Set 
  Used    6621    6622    6623

WMAX                            Stack                             REAL(KIND=8)
  Decl    2390
  Set     2481    2482
  Used    2483    2489

WMIN                            Stack                             REAL(KIND=8)
  Decl    2391
  Set     2484    2486    2487
  Used    2488    2489

WORK                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5131
  Set     5186
  Used    5190

WSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    7709    7739
  Set     7800    7954
  Used

WSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7966    7990
  Set     8085    8258    8263
  Used

WSIB3D                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(OUT)
  Decl    7972    7994
  Set     8164    8208
  Used    8270    8271    8272

WT                              Stack                             REAL(KIND=8)
  Decl    3424
  Set     3480    3481
  Used    3483

WWW                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    4615
  Set     4625
  Used    4631

X0X                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      93     144
  Set     7222    7311
  Used     477    3734    7167

X0X_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7092
  Set 
  Used    7203    7222

X1                              Stack                             REAL(KIND=8)
  Decl    7474
  Set     7649    7653
  Used    7657

XABC                            Stack                             REAL(KIND=8)
  Decl    4282
  Set     4332
  Used    4338

XABD                            Stack                             REAL(KIND=8)
  Decl    4283
  Set     4338
  Used    4344

XBC                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      96     149
  Set     7227    7313
  Used     475    3736    7172

XBC_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7097
  Set 
  Used    7203    7227

XCOVER                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     151
  Set      798
  Used    7174    7613

XCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7469
  Set     7613    7662    7664
  Used    7682

XCOVER_FIXED                    Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     142
  Set     7220    7309    7310
  Used     798     811    7165    7281    7837    8120

XCOVER_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7090
  Set 
  Used    7203    7220

XCT1                            Stack                             REAL(KIND=8)
  Decl    2191
  Set     2229
  Used    2231    2233

XCT2                            Stack                             REAL(KIND=8)
  Decl    2192
  Set     2230    2235
  Used    2233    2238

XCTU1                           Stack                             REAL(KIND=8)
  Decl    2193
  Set     2231    2236
  Used    2243

XCTU2                           Stack                             REAL(KIND=8)
  Decl    2194
  Set     2232    2237
  Used    2243

XD                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      94     145
  Set     7223    7312    7328    7334
  Used     478     902    3733    7168

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     787     794
  Set 
  Used     826

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7400    7457
  Set 
  Used    7518

XDC                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      95     148
  Set     7226    7314
  Used     476    3735    7171

XDC_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7096
  Set 
  Used    7203    7226

XDIF1                           Stack                             REAL(KIND=8)
  Decl    7475
  Set     7650    7654
  Used    7657

XDIF2                           Stack                             REAL(KIND=8)
  Decl    7476
  Set     7651    7655
  Used    7657

XDR                             Stack                             REAL(KIND=8)
  Decl    2776
  Set     2830    2832    2833    2834
  Used    2833    2835

XD_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7093
  Set 
  Used    7203    7223

XGREEN                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 13)
  Decl    7501
  Set     7543    7599    7600
  Used    7666

XGREN                                                             REAL(KIND=8), PARAMETER, DIMENSION(13)
  Decl    7493
  Set 
  Used

XM1                             Stack                             REAL(KIND=8)
  Decl    6801
  Set     6944
  Used    6965    6995

XMI1                            Stack                             REAL(KIND=8), DIMENSION(12, 3)
  Decl    6786
  Set     6879    6884
  Used    6935    6944    6965    6995

XMIU                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     110
  Set     7240
  Used    6879    7132

XMIU_R4                         Stack                             REAL(KIND=4), DIMENSION(12, 3)
  Decl    7108
  Set 
  Used    7230    7240

XMIW                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     112
  Set     7241
  Used    6884    7134

XMIW_R4                         Stack                             REAL(KIND=4), DIMENSION(12, 3)
  Decl    7109
  Set 
  Used    7230    7241

XNIRB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     390
  Set 
  Used     642

XNIRD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     391
  Set 
  Used     643

XNUM                            Stack                             REAL(KIND=8)
  Decl    1945
  Set     1961
  Used    1962    1963

XPH1                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    7747
  Set 
  Used

XPH1                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    8060
  Set 
  Used

XPH2                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    7752
  Set 
  Used

XPH2                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    8065
  Set 
  Used

XROT                            Stack                             REAL(KIND=8)
  Decl    2775
  Set     2816    2821    2824    2828
  Used    2820    2822    2823    2826    2827

XS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3870
  Set     4031    4046    4047    4048    4093    4097    4098    4099
  Used    4059    4060    4103    4104

XSC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3868
  Set     3981
  Used    3983    3985

XSEA                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     446
  Set      735
  Used     746     759     764     769     770

XTM1                            Stack                             REAL(KIND=8)
  Decl    6803
  Set     6959    6989
  Used    6965    6995

XTM2                            Stack                             REAL(KIND=8)
  Decl    6804
  Set     6962    6992
  Used    6965    6995

XVISB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     388
  Set 
  Used     640

XVISD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     389
  Set 
  Used     641

XZ                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     891
  Set      898
  Used     900     901     902     903     904

Y1                              Stack                             REAL(KIND=8)
  Decl    3410
  Set     3617
  Used

Y2                              Stack                             REAL(KIND=8)
  Decl    3411
  Set     3618
  Used

YCOVER                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     123
  Set     7281
  Used    7145

YEFAC                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     118
  Set     7268
  Used    7140    7689

YH1                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     119
  Set     7270
  Used    7141    7690

YH2                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     120
  Set     7271
  Used    7142    7691

YHIL                            Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7118
  Set     7264
  Used

YLL                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     116
  Set     7266
  Used    7138    7687

YLT                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     124
  Set     7279
  Used    7146

YOOTD                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     121
  Set     7269
  Used    7143

YOPT                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     115
  Set     7265
  Used    7137    7686

YREEN                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     122
  Set     7280
  Used    7144

YRL                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7400    7458
  Set 
  Used    7562    7567    7568    7569    7570    7571    7574    7575    7577    7585    7586    7626    7629    7632    7633
          7662

YRL                             Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     826

YSTPAR                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     114
  Set     7261
  Used    7136    7692    7693    7694

YU                              Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     117
  Set     7267
  Used    7139    7688

Z0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     441
  Set 
  Used     538     661     725

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2141
  Set 
  Used    2225    2226    2230    2235    2257    2268    2279

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3287
  Set     3464
  Used    3557    3564    3589

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4948
  Set 
  Used    5045

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5265    5629
  Set 
  Used    5704

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    6002
  Set     6026    6028    6030
  Used    6042

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6188
  Set 
  Used    6289

Z0ICE                           Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6030

Z0SEA                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     423
  Set 
  Used     752

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     420
  Set      477     725
  Used     537     660

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     836     880
  Set      902
  Used

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3283
  Set     3734
  Used    3458    3464

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4944
  Set 
  Used    5045

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5265    5625
  Set 
  Used    5703

Z1                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     147
  Set     7225    7308
  Used    6832    6833    6835    7170

Z1_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7095
  Set 
  Used    7203    7225

Z2                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     146
  Set     7224    7307
  Used     898    3557    3564    3573    3589    6833    6835    7169

Z2                              Dummy Arg                         REAL(KIND=8), DIMENSION(13, 12), INTENT(IN)
  Decl    1983    2024
  Set 
  Used    2063

Z2                              Dummy Arg                         REAL(KIND=8), DIMENSION(13, 12), INTENT(IN)
  Decl    2075    2138
  Set 
  Used    2225    2232    2237    2257

Z2_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7094
  Set 
  Used    7203    7224

ZAT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4272
  Set     4387    4389
  Used    4391    4392

ZC                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8368
  Set     8377
  Used    8428    8430    8440    8441    8452    8453

ZDEPTH                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     140
  Set     7218    7317    7318    7319
  Used    2450    2454    2456    2458    2485    2517    2519    2521    2523    2551    2553    2555    2557    2603    2608
          2609    2612    2614    2618    2619    2622    2624    2639    2645    2651    2663    2669    3481    3482    3600
          4108    4172    5226    5688    5689    5690    5729    5754    5773    5778    5781    5782    5796    5809    5821
          5825    5829    5878    5879    5880    7163    7807    7808    7809    8091    8092    8093    8169    8170    8171
          8182

ZDEPTH                          Dummy Arg                         REAL(KIND=8), DIMENSION(13, 3), INTENT(IN)
  Decl    2694    2741
  Set 
  Used    2820    2821    2823    2824    2827    2828

ZDEPTH_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 3)
  Decl    7088
  Set 
  Used    7202    7218

ZDM                             Stack                             INTEGER
  Decl    8371
  Set     8384
  Used    8414    8447

ZENITH                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     375
  Set 
  Used     613

ZENITH                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6566    6606
  Set 
  Used    6643

ZGRAV                           Stack                             REAL(KIND=8)
  Decl    6233
  Set     6256
  Used    6328

ZK                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4273
  Set     4391
  Used    4398    4437

ZKAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6782
  Set     7041    7042    7043
  Used    7044

ZL                              Stack                             REAL(KIND=8)
  Decl    2190
  Set     2225    2257
  Used    2228    2229    2230    2232    2267    2270    2278    2281

ZLOAD                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3864
  Set     4010
  Used    4038    4060

ZLT                             Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     150
  Set      799
  Used    5908    7173

ZLT2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     435
  Set      457
  Used

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1983    2040
  Set 
  Used    2056

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3397
  Set 
  Used    3573

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3760    3850
  Set 
  Used    3966    4020    4195

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4209    4249
  Set 
  Used    4303    4321    4363

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4684    4939
  Set 
  Used    5025    5030    5046

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5278    5621
  Set 
  Used    5712

ZLT2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    6768
  Set     6811    6812
  Used    6830    6831    7041

ZLT_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     143
  Set     7221    7305    7306
  Used     799     812    7166    7279    7815    7816    7818    7820    7822    7824    8099    8100    8102    8104    8107
          8109

ZLT_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     163
  Set      812    7683
  Used     196     457    6811    6812

ZLT_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7091
  Set 
  Used    7203    7221

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     354
  Set 
  Used     533     627

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6563    6594
  Set 
  Used    6630

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6668    6761
  Set     7054
  Used    7056

ZM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8366
  Set     8381
  Used    8428    8440    8441    8452    8453    8455

ZMELT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3867
  Set     4161    4163
  Used    4172

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     413
  Set 
  Used     750

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5988
  Set 
  Used    6028

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6184
  Set     6328
  Used    6289


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2496, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2530, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2595, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3617, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3618, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5204, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5204, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5209, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5209, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5904, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5911, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6027, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6029, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6302, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6327, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6362, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6642, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6823, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7536, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7538, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7567, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7568, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7569, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7570, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7571, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7575, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7575, file Sfc_SSiB.f90)

Name  Messages
----  --------
AIRMOD in SFC_SSIB
      Defined as:  Subroutine (line 836, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   AIRMOD in SFC_SSIB (Line 3457, file Sfc_SSiB.f90)

      Calls:       AIRMOD in SFC_SSIB (Line 3457, file Sfc_SSiB.f90)

Name  Messages
----  --------
ALBEDO in SFC_SSIB
      Defined as:  Subroutine (line 87, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
COPYSURFACEDATA in SFC_SSIB
      Defined as:  Subroutine (line 97, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CUT in SFC_SSIB
      Defined as:  Subroutine (line 1866, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   CUT in SFC_SSIB (Line 3592, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3603, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3652, file Sfc_SSiB.f90)

      Calls:       CUT in SFC_SSIB (Line 3592, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3603, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3652, file Sfc_SSiB.f90)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
EXP(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2429, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2449, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2452, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2488, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2807, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2837, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2850, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3489, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3507, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3534, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3535, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3644, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3645, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3646, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3647, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4020, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4059, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4103, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4387, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4389, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4391, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4392, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4399, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4631, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6055, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6057, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6060, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6269, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7044, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7664, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7859, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7866, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8129, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8130, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8325, file Sfc_SSiB.f90)

Name  Messages
----  --------
EXTRAK in SFC_SSIB
      Defined as:  Subroutine (line 8280, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   EXTRAK in SFC_SSIB (Line 7897, file Sfc_SSiB.f90)
                   EXTRAK in SFC_SSIB (Line 8139, file Sfc_SSiB.f90)

      Calls:       EXTRAK in SFC_SSIB (Line 7897, file Sfc_SSiB.f90)
                   EXTRAK in SFC_SSIB (Line 8139, file Sfc_SSiB.f90)

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
FYSIKS in SFC_SSIB
      Defined as:  Subroutine (line 83, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   FYSIKS in SFC_SSIB (Line 536, file Sfc_SSiB.f90)
                   FYSIKS in SFC_SSIB (Line 659, file Sfc_SSiB.f90)

      Calls:       FYSIKS in SFC_SSIB (Line 536, file Sfc_SSiB.f90)
                   FYSIKS in SFC_SSIB (Line 659, file Sfc_SSiB.f90)

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INITSSIB in SFC_SSIB
      Defined as:  Subroutine (line 82, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INTERC in SFC_SSIB
      Defined as:  Subroutine (line 3757, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   INTERC in SFC_SSIB (Line 5027, file Sfc_SSiB.f90)

      Calls:       INTERC in SFC_SSIB (Line 5027, file Sfc_SSiB.f90)

Name  Messages
----  --------
LOG(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 190, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2226, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2229, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2230, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2232, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2235, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2237, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2429, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2449, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2452, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2488, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2807, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2834, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3489, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4046, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4097, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4387, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4389, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4391, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4424, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4631, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6042, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6054, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6056, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6059, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7324, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7859, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7866, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7933, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8129, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8130, file Sfc_SSiB.f90)

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 696, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 707, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 760, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 765, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 771, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1810, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1814, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2214, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2263, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2301, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2428, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2455, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2481, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2481, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2481, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2487, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2499, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2501, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2511, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2533, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2535, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2545, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2611, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2621, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2637, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2643, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2649, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2661, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2667, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2681, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2802, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2811, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2840, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2851, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3480, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3507, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3981, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4048, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4062, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4099, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4105, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4145, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4290, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4625, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4652, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5780, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5788, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6040, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6051, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6391, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6643, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6815, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6832, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7042, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7251, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7928, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8317, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8338, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8347, file Sfc_SSiB.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 900, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1178, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1185, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1192, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1812, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1816, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2264, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2428, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2456, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2482, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2499, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2500, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2506, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2507, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2511, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2533, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2534, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2540, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2541, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2545, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2610, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2620, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2801, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2810, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2820, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2823, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2827, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2836, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2839, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2852, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2866, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3472, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3473, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3513, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3994, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4047, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4098, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4133, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4196, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4302, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4398, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5195, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5782, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6052, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6365, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6491, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6833, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6841, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6849, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7043, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7328, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7334, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7929, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7931, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7944, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8338, file Sfc_SSiB.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 7523, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7556, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7646, file Sfc_SSiB.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
PBL in SFC_SSIB
      Defined as:  Subroutine (line 4668, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   PBL in SFC_SSIB (Line 5696, file Sfc_SSiB.f90)

      Calls:       PBL in SFC_SSIB (Line 5696, file Sfc_SSiB.f90)

Name  Messages
----  --------
RADALB in SFC_SSIB
      Defined as:  Subroutine (line 86, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RADALB in SFC_SSIB (Line 528, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 622, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 6626, file Sfc_SSiB.f90)

      Calls:       RADALB in SFC_SSIB (Line 528, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 622, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 6626, file Sfc_SSiB.f90)

Name  Messages
----  --------
RADUSE in SFC_SSIB
      Defined as:  Subroutine (line 4460, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RADUSE in SFC_SSIB (Line 5021, file Sfc_SSiB.f90)

      Calls:       RADUSE in SFC_SSIB (Line 5021, file Sfc_SSiB.f90)

Name  Messages
----  --------
RBRD in SFC_SSIB
      Defined as:  Subroutine (line 1982, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RBRD in SFC_SSIB (Line 3571, file Sfc_SSiB.f90)

      Calls:       RBRD in SFC_SSIB (Line 3571, file Sfc_SSiB.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 7231, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7232, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7233, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7234, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7235, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7236, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7237, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7238, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7239, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7240, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7241, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7872, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8131, file Sfc_SSiB.f90)

Name  Messages
----  --------
RESHAPE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 3885, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7747, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7752, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8060, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8065, file Sfc_SSiB.f90)

Name  Messages
----  --------
RE_ASSIGN_SIB_SOIL_PROP in SFC_SSIB
      Defined as:  Subroutine (line 89, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ROOT in SFC_SSIB
      Defined as:  Subroutine (line 4561, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   ROOT in SFC_SSIB (Line 5019, file Sfc_SSiB.f90)

      Calls:       ROOT in SFC_SSIB (Line 5019, file Sfc_SSiB.f90)

Name  Messages
----  --------
RUNOFF in SFC_SSIB
      Defined as:  Subroutine (line 2313, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RUNOFF in SFC_SSIB (Line 5815, file Sfc_SSiB.f90)

      Calls:       RUNOFF in SFC_SSIB (Line 5815, file Sfc_SSiB.f90)

Name  Messages
----  --------
SEASFC in SFC_SSIB
      Defined as:  Subroutine (line 84, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SEASFC in SFC_SSIB (Line 741, file Sfc_SSiB.f90)

      Calls:       SEASFC in SFC_SSIB (Line 741, file Sfc_SSiB.f90)

Name  Messages
----  --------
SEXTRP in SFC_SSIB
      Defined as:  Subroutine (line 85, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SEXTRP in SFC_SSIB (Line 698, file Sfc_SSiB.f90)

      Calls:       SEXTRP in SFC_SSIB (Line 698, file Sfc_SSiB.f90)

Name  Messages
----  --------
SFC_SSIB
      Defined as:  Module (line 6, file Sfc_SSiB.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   CONSTANTS
                   OPTIONS

Name  Messages
----  --------
SFLXES in SFC_SSIB
      Defined as:  Subroutine (line 3102, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SFLXES in SFC_SSIB (Line 5034, file Sfc_SSiB.f90)

      Calls:       SFLXES in SFC_SSIB (Line 5034, file Sfc_SSiB.f90)

Name  Messages
----  --------
SIBWET in SFC_SSIB
      Defined as:  Subroutine (line 91, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIBWET_GLSM in SFC_SSIB
      Defined as:  Subroutine (line 92, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 1842, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1843, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3659, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3660, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7536, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7538, file Sfc_SSiB.f90)

Name  Messages
----  --------
SIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 747, file Sfc_SSiB.f90)

Name  Messages
----  --------
SNOWM in SFC_SSIB
      Defined as:  Subroutine (line 5054, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SNOWM in SFC_SSIB (Line 5737, file Sfc_SSiB.f90)

      Calls:       SNOWM in SFC_SSIB (Line 5737, file Sfc_SSiB.f90)

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2056, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2062, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2213, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3902, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5743, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6039, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6055, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6057, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6060, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6386, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6390, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7056, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7056, file Sfc_SSiB.f90)

Name  Messages
----  --------
SSIB_DRIVER in SFC_SSIB
      Defined as:  Subroutine (line 98, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
STOMAT in SFC_SSIB
      Defined as:  Subroutine (line 4207, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   STOMAT in SFC_SSIB (Line 5024, file Sfc_SSiB.f90)

      Calls:       STOMAT in SFC_SSIB (Line 5024, file Sfc_SSiB.f90)

Name  Messages
----  --------
STRES2 in SFC_SSIB
      Defined as:  Subroutine (line 2691, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   STRES2 in SFC_SSIB (Line 3597, file Sfc_SSiB.f90)

      Calls:       STRES2 in SFC_SSIB (Line 3597, file Sfc_SSiB.f90)

Name  Messages
----  --------
TEMRES in SFC_SSIB
      Defined as:  Subroutine (line 913, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   TEMRES in SFC_SSIB (Line 3691, file Sfc_SSiB.f90)

      Calls:       TEMRES in SFC_SSIB (Line 3691, file Sfc_SSiB.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 491, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 491, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7185, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7189, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7193, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7197, file Sfc_SSiB.f90)

Name  Messages
----  --------
UPDATE in SFC_SSIB
      Defined as:  Subroutine (line 2878, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   UPDATE in SFC_SSIB (Line 3712, file Sfc_SSiB.f90)

      Calls:       UPDATE in SFC_SSIB (Line 3712, file Sfc_SSiB.f90)

Name  Messages
----  --------
VEGIN in SFC_SSIB
      Defined as:  Subroutine (line 88, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
VERT_INTERP in SFC_SSIB
      Defined as:  Subroutine (line 8352, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 8195, file Sfc_SSiB.f90)

      Calls:       RESHAPE(Intrinsic) (Line 3885, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 7747, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 7752, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 8060, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 8065, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8195, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 190, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 491, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 491, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 696, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 707, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 760, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 765, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 771, file Sfc_SSiB.f90)
                   SIN(Intrinsic) (Line 747, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 900, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1178, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1185, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1192, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1812, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1816, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 1810, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 1814, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 1842, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 1843, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2056, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2062, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2213, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2214, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2263, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2301, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2226, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2229, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2230, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2232, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2235, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2237, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2264, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2428, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2455, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2481, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2481, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2481, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2487, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2499, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2501, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2511, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2533, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2535, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2545, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2611, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2621, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2637, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2643, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2649, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2661, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2667, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2681, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2428, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2456, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2482, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2486, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2486, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2486, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2499, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2500, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2506, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2507, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2511, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2533, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2534, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2540, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2541, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2545, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2610, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2620, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2429, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2449, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2452, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2483, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2484, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2488, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2429, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2449, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2452, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2483, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2484, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2488, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2496, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2530, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2595, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2801, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2810, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2820, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2823, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2827, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2836, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2839, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2852, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2866, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2802, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2811, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2840, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2851, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2807, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2834, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2807, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2837, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2850, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3472, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3473, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3483, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3513, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3480, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3484, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3507, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 3485, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 3489, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3485, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3489, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3507, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3534, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3535, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3644, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3645, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3646, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3647, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 3617, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 3618, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 3659, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 3660, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 3902, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3981, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4048, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4062, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4099, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4105, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4145, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3994, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4047, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4098, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4133, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4196, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4020, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4059, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4103, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4046, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4097, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4290, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4302, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4398, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4387, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4389, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4391, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4392, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4399, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4387, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4389, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4391, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4424, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4430, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4625, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4652, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4631, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4631, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 5195, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5204, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5204, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5209, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5209, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 5743, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 5780, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 5788, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 5782, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5904, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5911, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6027, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6029, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6039, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6055, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6057, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6060, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6040, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6051, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6042, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6054, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6056, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6059, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6052, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6055, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6057, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6060, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6269, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6302, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6327, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6362, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6365, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6386, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6390, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6391, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6491, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6642, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6643, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6815, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6832, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7042, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6823, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6833, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6841, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6849, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7043, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7044, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 7056, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 7056, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7185, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7189, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7193, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7197, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7231, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7232, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7233, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7234, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7235, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7236, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7237, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7238, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7239, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7240, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7241, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7251, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7324, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7328, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7334, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7523, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7556, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7646, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7536, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7538, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7567, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7568, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7569, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7570, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7571, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7575, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7575, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 7536, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 7538, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7664, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7859, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7866, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7933, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7859, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7866, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7872, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7928, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7929, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7931, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7944, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 8129, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 8130, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8129, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8130, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 8131, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8317, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8338, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8347, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8325, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 8338, file Sfc_SSiB.f90)

Name  Messages
----  --------
VNTLAX in SFC_SSIB
      Defined as:  Subroutine (line 2073, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VNTLAX in SFC_SSIB (Line 3555, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3562, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3587, file Sfc_SSiB.f90)

      Calls:       VNTLAX in SFC_SSIB (Line 3555, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3562, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3587, file Sfc_SSiB.f90)

Name  Messages
----  --------
VNTLT1 in SFC_SSIB
      Defined as:  Subroutine (line 5928, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VNTLT1 in SFC_SSIB (Line 6286, file Sfc_SSiB.f90)

      Calls:       VNTLT1 in SFC_SSIB (Line 6286, file Sfc_SSiB.f90)

Name  Messages
----  --------
WHEAT in SFC_SSIB
      Defined as:  Subroutine (line 90, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   WHEAT in SFC_SSIB (Line 826, file Sfc_SSiB.f90)

      Calls:       WHEAT in SFC_SSIB (Line 826, file Sfc_SSiB.f90)

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
