       !        
       !        Cray Inc. Decompilation
       !        WARNING - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Sizes.f90
       !        File                  :  Sizes.opt
       !        Format                :  Fortran
       !        Target                :  X86, 64-bit
       !        
  426.       
  426.       subroutine registerbasicsizes( trunc, nlat, nlon, vert )
  377.       jmax = nlat
  378.       jmaxhalf = nlat / 2
  380.       imax = nlon
  382.       kmax = vert
  384.       mmax = 1 + trunc
  385.       nmax = 1 + trunc
  386.       nextmax = 2 + trunc
  387.       mnextmax = ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2
  388.       mextmap%header%a_contig = 1
  388.       mextmap%dim_1%LB = 1
  388.       mextmap%dim_1%EX = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  388.       mextmap%dim_1%SM = 1
  388.       $_allo_P0(0) = 0x1000000000001L
  388.       $_allo_P0(1) = loc( mextmap )
  388.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  389.       nextmap%header%a_contig = 1
  389.       nextmap%dim_1%LB = 1
  389.       nextmap%dim_1%EX = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  389.       nextmap%dim_1%SM = 1
  389.       $_allo_P1(0) = 0x1000000000001L
  389.       $_allo_P1(1) = loc( nextmap )
  389.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  390.       mnextmap%header%a_contig = 1
  390.       mnextmap%dim_1%LB = 1
  390.       mnextmap%dim_1%EX = _zla( 0, ( 1 + trunc ) )
  390.       mnextmap%dim_1%SM = 1
  390.       mnextmap%dim_2%LB = 1
  390.       mnextmap%dim_2%EX = _zla( 0, ( 2 + trunc ) )
  390.       mnextmap%dim_2%SM = _zla( 0, ( 1 + trunc ) )
  390.       $_allo_P2(0) = 0x1000000000001L
  390.       $_allo_P2(1) = loc( mnextmap )
  390.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  391.       $F_A33 = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  391.       if ( _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 ) > 0 ) then
  391.          $I_A1 = 0
  391. !dir$ ivdep
  391.          do
  391.             (nextmap%base_addr)(1 + $I_A1, 0) = -1
  391.             $I_A1 = 1 + $I_A1
  391.             if ( $I_A1 >= $F_A33 ) exit
  391.          enddo
  391.       endif
  392.       $F_A34 = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  392.       if ( _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 ) > 0 ) then
  392.          $I_A1 = 0
  392. !dir$ ivdep
  392.          do
  392.             (mextmap%base_addr)(1 + $I_A1, 0) = -1
  392.             $I_A1 = 1 + $I_A1
  392.             if ( $I_A1 >= $F_A34 ) exit
  392.          enddo
  392.       endif
  393.       $F_A35 = _zla( 0, ( 2 + trunc ) )
  393.       $F_A36 = _zla( 0, ( 1 + trunc ) )
  393.       if ( and( -$F_A36, -$F_A35 ) < 0 ) then
  393.          $I_A2 = 0
  393.          do
  393.             $I_A1 = 0
  393. !dir$ ivdep
  393.             do
  393.                (mnextmap%base_addr)(1 + $I_A1, 1 + $I_A2, 0) = -1
  393.                $I_A1 = 1 + $I_A1
  393.                if ( $I_A1 >= $F_A36 ) exit
  393.             enddo
  393.             $I_A2 = 1 + $I_A2
  393.             if ( $I_A2 >= $F_A35 ) exit
  393.          enddo
  393.       endif
  394.       $mn_S1 = 0
  395.       if ( trunc >= 0 ) then
  395.          $I_L395_22 = 0
  395.          do
  396.             $I_L396_18 = 0
  396. !dir$ ivdep
  396.             do
  398.                (mnextmap%base_addr)(1 + $I_L395_22, 1 + $I_L396_18 + $I_L395_22, 0) = ( 1 + $mn_S1 + $I_L396_18 )
  399.                (mextmap%base_addr)(1 + $mn_S1 + $I_L396_18, 0) = ( 1 + $I_L395_22 )
  400.                (nextmap%base_addr)(1 + $mn_S1 + $I_L396_18, 0) = ( 1 + $I_L396_18 + $I_L395_22 )
  401.                $I_L396_18 = 1 + $I_L396_18
  396.                if ( $I_L396_18 >= 2 + trunc + -$I_L395_22 ) exit
  396.             enddo
  397.             $mn_S1 = ( 2 + trunc + $mn_S1 + -$I_L395_22 )
  402.             $I_L395_22 = 1 + $I_L395_22
  401.             if ( $I_L395_22 >= 1 + trunc ) exit
  401.          enddo
  401.       endif
  403.       mnmax = ( 2 + trunc * trunc + 3 * trunc ) / 2
  404.       mnmap%header%a_contig = 1
  404.       mnmap%dim_1%LB = 1
  404.       mnmap%dim_1%EX = ( max( 0, 1 + trunc ) )
  404.       mnmap%dim_1%SM = 1
  404.       mnmap%dim_2%LB = 1
  404.       mnmap%dim_2%EX = ( max( 0, 1 + trunc ) )
  404.       mnmap%dim_2%SM = ( max( 0, 1 + trunc ) )
  404.       $_allo_P3(0) = 0x1000000000001L
  404.       $_allo_P3(1) = loc( mnmap )
  404.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  405.       mmap%header%a_contig = 1
  405.       mmap%dim_1%LB = 1
  405.       mmap%dim_1%EX = ( max( 0, ( 1 + trunc + ( 1 + trunc ) * ( 1 + trunc ) ) / 2 ) )
  405.       mmap%dim_1%SM = 1
  405.       $_allo_P4(0) = 0x1000000000001L
  405.       $_allo_P4(1) = loc( mmap )
  405.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  406.       nmap%header%a_contig = 1
  406.       nmap%dim_1%LB = 1
  406.       nmap%dim_1%EX = ( max( 0, ( 1 + trunc + ( 1 + trunc ) * ( 1 + trunc ) ) / 2 ) )
  406.       nmap%dim_1%SM = 1
  406.       $_allo_P5(0) = 0x1000000000001L
  406.       $_allo_P5(1) = loc( nmap )
  406.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  407.       $F_A37 = ( max( 0, 1 + trunc ) )
  407.       $F_A38 = ( max( 0, 1 + trunc ) )
  407.       if ( and( -$F_A38, -$F_A37 ) < 0 ) then
  407.          $I_A2 = 0
  407.          do
  407.             $I_A1 = 0
  407. !dir$ ivdep
  407.             do
  407.                (mnmap%base_addr)(1 + $I_A1, 1 + $I_A2, 0) = -1
  407.                $I_A1 = 1 + $I_A1
  407.                if ( $I_A1 >= $F_A38 ) exit
  407.             enddo
  407.             $I_A2 = 1 + $I_A2
  407.             if ( $I_A2 >= $F_A37 ) exit
  407.          enddo
  407.       endif
  408.       $F_A39 = ( max( 0, ( 2 + trunc * trunc + 3 * trunc ) / 2 ) )
  408.       if ( trunc * trunc + 3 * trunc >= 0 ) then
  408.          $I_A1 = 0
  408. !dir$ ivdep
  408.          do
  408.             (mmap%base_addr)(1 + $I_A1, 0) = -1
  408.             $I_A1 = 1 + $I_A1
  408.             if ( $I_A1 >= $F_A39 ) exit
  408.          enddo
  408.       endif
  409.       $F_A40 = ( max( 0, ( 2 + trunc * trunc + 3 * trunc ) / 2 ) )
  409.       if ( trunc * trunc + 3 * trunc >= 0 ) then
  409.          $I_A1 = 0
  409. !dir$ ivdep
  409.          do
  409.             (nmap%base_addr)(1 + $I_A1, 0) = -1
  409.             $I_A1 = 1 + $I_A1
  409.             if ( $I_A1 >= $F_A40 ) exit
  409.          enddo
  409.       endif
  410.       $mn_S4 = 0
  411.       if ( trunc >= 0 ) then
  411.          $I_L411_24 = 0
  411.          do
  412.             $I_L412_20 = 0
  412. !dir$ ivdep
  412.             do
  414.                (mnmap%base_addr)(1 + $I_L411_24, 1 + $I_L412_20 + $I_L411_24, 0) = ( 1 + $mn_S4 + $I_L412_20 )
  415.                (mmap%base_addr)(1 + $mn_S4 + $I_L412_20, 0) = ( 1 + $I_L411_24 )
  416.                (nmap%base_addr)(1 + $mn_S4 + $I_L412_20, 0) = ( 1 + $I_L412_20 + $I_L411_24 )
  417.                $I_L412_20 = 1 + $I_L412_20
  412.                if ( $I_L412_20 >= 1 + trunc + -$I_L411_24 ) exit
  412.             enddo
  413.             $mn_S4 = ( 1 + trunc + $mn_S4 + -$I_L411_24 )
  418.             $I_L411_24 = 1 + $I_L411_24
  417.             if ( $I_L411_24 >= 1 + trunc ) exit
  417.          enddo
  417.       endif
  424.       ijmaxgauqua = nlat * nlon
  426.       return
  426.       end
  426.       
  430.       
  430.       subroutine verticalgroups( givenfouriergroups, nproc_vert )
  439.       if ( givenfouriergroups /= .false. ) then
  440.          $ng_S4 = nproc_vert
  440.       else
  442.          $npsq_S1 = int( _sqrt( real( maxnodes ) ) )
  443.          $nl_S3 = 1
  443.          if ( kmax > 0 ) then
  443.             $I_L443_51 = 0
  443. !dir$ ivdep
  443.             do
  444.                $nn_S2 = ( maxnodes + maxnodes * $I_L443_51 ) / kmax
  445.                if ( $nn_S2 >= $npsq_S1 ) then
  443.                   $nl_S3 = ( 1 + $I_L443_51 )
  443.                   goto 10
  443.                endif
  446.                $I_L443_51 = 1 + $I_L443_51
  446.                if ( $I_L443_51 >= kmax ) exit
  446.             enddo
  446.             $nl_S3 = ( 1 + kmax )
  446.          endif
  446.    10    continue
  447.          $ng_S4 = kmax / $nl_S3
  448.          if ( $nl_S3 * $ng_S4 < kmax ) then
  448.             $ng_S4 = 1 + $ng_S4
  448.          endif
  448.       endif
  450.       ngroups_four = $ng_S4
  451.       $nl_S5 = kmax / $ng_S4
  452.       if ( $ng_S4 * $nl_S5 < kmax ) then
  452.          $nl_S5 = 1 + $nl_S5
  452.       endif
  454.       kfirst_four%header%a_contig = 1
  454.       kfirst_four%dim_1%LB = 0
  454.       kfirst_four%dim_1%EX = _zla( 0, ( 1 + maxnodes ) )
  454.       kfirst_four%dim_1%SM = 1
  454.       $_allo_P0(0) = 0x1000000000001L
  454.       $_allo_P0(1) = loc( kfirst_four )
  454.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  455.       klast_four%header%a_contig = 1
  455.       klast_four%dim_1%LB = 0
  455.       klast_four%dim_1%EX = _zla( 0, ( 1 + maxnodes ) )
  455.       klast_four%dim_1%SM = 1
  455.       $_allo_P1(0) = 0x1000000000001L
  455.       $_allo_P1(1) = loc( klast_four )
  455.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  456.       npperg_four%header%a_contig = 1
  456.       npperg_four%dim_1%LB = 1
  456.       npperg_four%dim_1%EX = _zla( 0, $ng_S4 )
  456.       npperg_four%dim_1%SM = 1
  456.       $_allo_P2(0) = 0x1000000000001L
  456.       $_allo_P2(1) = loc( npperg_four )
  456.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  457.       nlevperg_four%header%a_contig = 1
  457.       nlevperg_four%dim_1%LB = 1
  457.       nlevperg_four%dim_1%EX = _zla( 0, $ng_S4 )
  457.       nlevperg_four%dim_1%SM = 1
  457.       $_allo_P3(0) = 0x1000000000001L
  457.       $_allo_P3(1) = loc( nlevperg_four )
  457.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  458.       first_proc_four%header%a_contig = 1
  458.       first_proc_four%dim_1%LB = 1
  458.       first_proc_four%dim_1%EX = _zla( 0, $ng_S4 )
  458.       first_proc_four%dim_1%SM = 1
  458.       $_allo_P4(0) = 0x1000000000001L
  458.       $_allo_P4(1) = loc( first_proc_four )
  458.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  459.       np = 0
  460.       if ( $ng_S4 > 0 ) then
  460.          $I_L460_53 = 0
  460. !dir$ ivdep
  460.          do
  466.             (nlevperg_four%base_addr)(1 + $I_L460_53, 0) = cvmg( $nl_S5, -1 + $nl_S5, ( 1 + $I_L460_53 ) > -kmax + $ng_S4 * $nl_S5 )
  467.             $npperg_four_WR0_R0 = maxnodes * cvmg( $nl_S5, -1 + $nl_S5, ( 1 + $I_L460_53 ) > -kmax + $ng_S4 * $nl_S5 ) / kmax
  467.             (npperg_four%base_addr)(1 + $I_L460_53, 0) = $npperg_four_WR0_R0
  468.             np = np + $npperg_four_WR0_R0
  469.             $I_L460_53 = 1 + $I_L460_53
  460.             if ( $I_L460_53 >= $ng_S4 ) exit
  460.          enddo
  460.       endif
  471.       $next_S7 = ( maxnodes + -np ) / $ng_S4
  473.       if ( $ng_S4 > 0 ) then
  473.          $I_L473_32 = 0
  479.          if ( 0 > -1 + maxnodes + -np + -( $ng_S4 * $next_S7 ) ) then
  479.             goto 20
  479.          else
  473.             $I_L473_55 = 0
  473. !dir$ ivdep
  473.             do
  475.                (npperg_four%base_addr)(1 + $I_L473_55, 0) = 1 + $next_S7 + (npperg_four%base_addr)(1 + $I_L473_55, 0)
  479.                $I_L473_55 = 1 + $I_L473_55
  478.                if ( $I_L473_55 >= min( $ng_S4, ( maxnodes + -np + -( $ng_S4 * $next_S7 ) ) ) ) exit
  478.             enddo
  479.             $I_L473_32 = min( $ng_S4, ( maxnodes + -np + -( $ng_S4 * $next_S7 ) ) )
  479.             if ( ( maxnodes + -np + -( $ng_S4 * $next_S7 ) ) < $ng_S4 ) then
  479.    20          continue
  473.                $I_L473_67 = 0
  473. !dir$ ivdep
  473.                do
  477.                   (npperg_four%base_addr)(1 + $I_L473_32 + $I_L473_67, 0) = $next_S7 + (npperg_four%base_addr)(1 + $I_L473_32 + $I_L473_67, 0)
  479.                   $I_L473_67 = 1 + $I_L473_67
  478.                   if ( $I_L473_67 >= $ng_S4 + -$I_L473_32 ) exit
  478.                enddo
  478.             endif
  478.          endif
  478.       endif
  480.       nset%header%a_contig = 1
  480.       nset%dim_1%LB = 1
  480.       nset%dim_1%EX = ( max( 0, $ng_S4 ) )
  480.       nset%dim_1%SM = 1
  480.       $_allo_P5(0) = 0x1000000000001L
  480.       $_allo_P5(1) = loc( nset )
  480.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  481.       map_four%header%a_contig = 1
  481.       map_four%dim_1%LB = 1
  481.       map_four%dim_1%EX = ( max( 0, $ng_S4 ) )
  481.       map_four%dim_1%SM = 1
  481.       map_four%dim_2%LB = 0
  481.       $Reduc_A34 = 0xffffffff80000001
  481.       $F_A36 = _zla( 0, $ng_S4 )
  481.       if ( _zla( 0, $ng_S4 ) > 0 ) then
  481.          $I_L481_63 = 0
  481. !dir$ ivdep
  481.          do
  481.             $Reduc_A34 = max( $Reduc_A34, (npperg_four%base_addr)(1 + $I_L481_63, 0) )
  481.             $I_L481_63 = 1 + $I_L481_63
  481.             if ( $I_L481_63 >= $F_A36 ) exit
  481.          enddo
  481.       endif
  481.       map_four%dim_2%EX = ( max( 0, $Reduc_A34 ) )
  481.       map_four%dim_2%SM = ( max( 0, $ng_S4 ) )
  481.       $_allo_P6(0) = 0x1000000000001L
  481.       $_allo_P6(1) = loc( map_four )
  481.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  482.       $n_S10 = 0
  483.       $F_A37 = ( max( 0, $ng_S4 ) )
  483.       if ( $ng_S4 > 0 ) then
  483.          $I_L483_65 = 0
  483. !dir$ ivdep
  483.          do
  483.             (nset%base_addr)(1 + $I_L483_65, 0) = 0
  483.             $I_L483_65 = 1 + $I_L483_65
  483.             if ( $I_L483_65 >= $F_A37 ) exit
  483.          enddo
  483.       endif
  492.       $SC_map_four_I0 = map_four%dim_2%EX
  485.       if ( $ng_S4 > 0 ) then
  481.          do
  485.             $I_L485_57 = 0
  485. !dir$ ivdep
  485.             do
  486.                if ( (nset%base_addr)(1 + $I_L485_57, 0) < (npperg_four%base_addr)(1 + $I_L485_57, 0) ) then
  487.                   if ( myid + -$n_S10 == 0 ) then
  488.                      mygroup_four = ( 1 + $I_L485_57 )
  489.                      maxnodes_four = (npperg_four%base_addr)(1 + $I_L485_57, 0)
  490.                      myid_four = (nset%base_addr)(1 + $I_L485_57, 0)
  490.                   endif
  492.                   (map_four%base_addr)(1 + $I_L485_57, (nset%base_addr)(1 + $I_L485_57, 0), 0) = $n_S10
  494.                   $n_S10 = 1 + $n_S10
  493.                   (nset%base_addr)(1 + $I_L485_57, 0) = 1 + (nset%base_addr)(1 + $I_L485_57, 0)
  493.                endif
  496.                $I_L485_57 = 1 + $I_L485_57
  495.                if ( $I_L485_57 >= $ng_S4 ) exit
  495.             enddo
  496.             if ( $n_S10 >= maxnodes ) exit
  496.          enddo
  496.       else if ( 0 < maxnodes ) then
  496.          do
  496.          enddo
  496.       endif
  499.       $m_S14 = 0
  500.       if ( $ng_S4 > 0 ) then
  502.          $SC_map_four_I0 = map_four%dim_2%EX
  500.          $I_L500_69 = 0
  500.          do
  501.             $t_S12 = -1 + (npperg_four%base_addr)(1 + $I_L500_69, 0)
  501.             if ( (npperg_four%base_addr)(1 + $I_L500_69, 0) > 0 ) then
  501.                $SCA_nlevperg_four_I1 = (nlevperg_four%base_addr)(1 + $I_L500_69, 0)
  501.                $I_L501_59 = 0
  501. !dir$ ivdep
  501.                do
  502.                   $l_S15 = (map_four%base_addr)(1 + $I_L500_69, $I_L501_59, 0)
  503.                   (kfirst_four%base_addr)($l_S15, 0) = 1 + $m_S14
  504.                   (klast_four%base_addr)($l_S15, 0) = $m_S14 + $SCA_nlevperg_four_I1
  505.                   $I_L501_59 = 1 + $I_L501_59
  501.                   if ( $I_L501_59 >= 1 + $t_S12 ) exit
  501.                enddo
  501.             endif
  506.             $m_S14 = $m_S14 + (nlevperg_four%base_addr)(1 + $I_L500_69, 0)
  507.             $I_L500_69 = 1 + $I_L500_69
  505.             if ( $I_L500_69 >= $ng_S4 ) exit
  505.          enddo
  508.          $I_L508_61 = 0
  508. !dir$ ivdep
  508.          do
  509.             (first_proc_four%base_addr)(1 + $I_L508_61, 0) = $I_L508_61
  510.             $I_L508_61 = 1 + $I_L508_61
  508.             if ( $I_L508_61 >= $ng_S4 ) exit
  508.          enddo
  508.       endif
  511.       kmaxloc = 1 + (klast_four%base_addr)(myid, 0) + -(kfirst_four%base_addr)(myid, 0)
  512.       myfirstlev = (kfirst_four%base_addr)(myid, 0)
  513.       mylastlev = (klast_four%base_addr)(myid, 0)
  515.       return
  515.       end
  515.       
  704.       
  704.       subroutine registerothersizes( imaxperlat, mperlat, myid, maxnodes )
  519.       t$1 = jmax
  520.       t$101 = _zla( 0, jmax )
  519.       t$3 = maxnodes_four
  529.       t$102 = _zla( 0, maxnodes_four )
  529.       t$105 = 4 * _zla( 0, maxnodes_four )
  529.       t$107 = 8 * _zla( 0, maxnodes_four )
  531.       t$109 = 12 * _zla( 0, maxnodes_four )
  530.       t$111 = 16 * _zla( 0, maxnodes_four )
  531.       t$113 = 20 * _zla( 0, maxnodes_four )
  519.       t$103 = int( _alloc( 20 * _zla( 0, maxnodes_four ) ), 8 )
  529.       t$104 = t$103
  529.       t$106 = t$103 + 4 * _zla( 0, maxnodes_four )
  531.       t$108 = t$103 + 8 * _zla( 0, maxnodes_four )
  530.       t$110 = t$103 + 12 * _zla( 0, maxnodes_four )
  531.       t$112 = t$103 + 16 * _zla( 0, maxnodes_four )
  535.       mmaxperj%header%a_contig = 1
  535.       mmaxperj%dim_1%LB = 1
  535.       mmaxperj%dim_1%EX = _zla( 0, jmax )
  535.       mmaxperj%dim_1%SM = 1
  535.       $_allo_P2(0) = 0x1000000000001L
  535.       $_allo_P2(1) = loc( mmaxperj )
  535.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  536.       $F_A39 = jmax
  536.       if ( jmax > 0 ) then
  536.          $I_L536_110 = 0
  536. !dir$ ivdep
  536.          do
  536.             (mmaxperj%base_addr)(1 + $I_L536_110, 0) = mperlat(1 + $I_L536_110)
  536.             $I_L536_110 = 1 + $I_L536_110
  536.             if ( $I_L536_110 >= $F_A39 ) exit
  536.          enddo
  536.       endif
  537.       imaxperj%header%a_contig = 1
  537.       imaxperj%dim_1%LB = 1
  537.       imaxperj%dim_1%EX = ( max( 0, jmax ) )
  537.       imaxperj%dim_1%SM = 1
  537.       $_allo_P3(0) = 0x1000000000001L
  537.       $_allo_P3(1) = loc( imaxperj )
  537.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  538.       $F_A40 = jmax
  538.       if ( jmax > 0 ) then
  538.          $I_L538_112 = 0
  538. !dir$ ivdep
  538.          do
  538.             (imaxperj%base_addr)(1 + $I_L538_112, 0) = imaxperlat(1 + $I_L538_112)
  538.             $I_L538_112 = 1 + $I_L538_112
  538.             if ( $I_L538_112 >= $F_A40 ) exit
  538.          enddo
  538.       endif
  539.       $Reduc_A41 = 0xffffffff80000001
  539.       $F_A43 = ( max( 0, jmax ) )
  539.       if ( jmax > 0 ) then
  539.          $I_L539_114 = 0
  539. !dir$ ivdep
  539.          do
  539.             $Reduc_A41 = max( $Reduc_A41, (imaxperj%base_addr)(1 + $I_L539_114, 0) )
  539.             $I_L539_114 = 1 + $I_L539_114
  539.             if ( $I_L539_114 >= $F_A43 ) exit
  539.          enddo
  539.       endif
  539.       if ( imax < $Reduc_A41 ) then
  540.           _substr(t$153,1,27) = ' imax and imaxperj disagree'
  540.          call _stop(  _substr(t$153,1,27) )
  540.       else
  542.          $Reduc_A44 = 0
  542.          $F_A46 = ( max( 0, jmax ) )
  542.          if ( jmax > 0 ) then
  542.             $I_L542_116 = 0
  542. !dir$ ivdep
  542.             do
  542.                $Reduc_A44 = $Reduc_A44 + (imaxperj%base_addr)(1 + $I_L542_116, 0)
  542.                $I_L542_116 = 1 + $I_L542_116
  542.                if ( $I_L542_116 >= $F_A46 ) exit
  542.             enddo
  542.          endif
  542.          ijmax = $Reduc_A44
  544.          firstlatinproc_f%header%a_contig = 1
  544.          firstlatinproc_f%dim_1%LB = 0
  544.          firstlatinproc_f%dim_1%EX = ( max( 0, maxnodes_four ) )
  544.          firstlatinproc_f%dim_1%SM = 1
  544.          $_allo_P4(0) = 0x1000000000001L
  544.          $_allo_P4(1) = loc( firstlatinproc_f )
  544.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  545.          lastlatinproc_f%header%a_contig = 1
  545.          lastlatinproc_f%dim_1%LB = 0
  545.          lastlatinproc_f%dim_1%EX = ( max( 0, maxnodes_four ) )
  545.          lastlatinproc_f%dim_1%SM = 1
  545.          $_allo_P5(0) = 0x1000000000001L
  545.          $_allo_P5(1) = loc( lastlatinproc_f )
  545.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  546.          nlatsinproc_f%header%a_contig = 1
  546.          nlatsinproc_f%dim_1%LB = 0
  546.          nlatsinproc_f%dim_1%EX = ( max( 0, maxnodes_four ) )
  546.          nlatsinproc_f%dim_1%SM = 1
  546.          $_allo_P6(0) = 0x1000000000001L
  546.          $_allo_P6(1) = loc( nlatsinproc_f )
  546.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  547.          nodehasj_f%header%a_contig = 1
  547.          nodehasj_f%dim_1%LB = 1
  547.          nodehasj_f%dim_1%EX = ( max( 0, jmax ) )
  547.          nodehasj_f%dim_1%SM = 1
  547.          $_allo_P7(0) = 0x1000000000001L
  547.          $_allo_P7(1) = loc( nodehasj_f )
  547.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  550.          if ( reducedgrid /= .false. ) then
  552.             $meanp_S2 = ijmax / maxnodes_four
  554.             $F_A47 = maxnodes_four
  554.             if ( maxnodes_four > 0 ) then
  554.                $I_L554_118 = 0
  554. !dir$ ivdep
  554.                do
  554.                   mlast(1 + $I_L554_118) = 0
  554.                   $I_L554_118 = 1 + $I_L554_118
  554.                   if ( $I_L554_118 >= $F_A47 ) exit
  554.                enddo
  554.             endif
  555.             $F_A48 = maxnodes_four
  555.             if ( maxnodes_four > 0 ) then
  555.                $I_L555_120 = 0
  555. !dir$ ivdep
  555.                do
  555.                   npoints(1 + $I_L555_120) = 0
  555.                   $I_L555_120 = 1 + $I_L555_120
  555.                   if ( $I_L555_120 >= $F_A48 ) exit
  555.                enddo
  555.             endif
  556.             $F_A49 = maxnodes_four
  556.             if ( maxnodes_four > 0 ) then
  556.                $I_L556_122 = 0
  556. !dir$ ivdep
  556.                do
  556.                   mlast1(1 + $I_L556_122) = 0
  556.                   $I_L556_122 = 1 + $I_L556_122
  556.                   if ( $I_L556_122 >= $F_A49 ) exit
  556.                enddo
  556.             endif
  557.             $F_A50 = maxnodes_four
  557.             if ( maxnodes_four > 0 ) then
  557.                $I_L557_124 = 0
  557. !dir$ ivdep
  557.                do
  557.                   npoints1(1 + $I_L557_124) = 0
  557.                   $I_L557_124 = 1 + $I_L557_124
  557.                   if ( $I_L557_124 >= $F_A50 ) exit
  557.                enddo
  557.             endif
  558.             $jlast_S1 = jmax
  562.             if ( maxnodes_four > 0 ) then
  562.                $I_L562_155 = 0
  562.                do
  563.                   if ( $jlast_S1 > 0 ) then
  564.                      $SC_npoints_I2 = npoints(maxnodes_four + -$I_L562_155)
  563.                      $I_L563_94 = 0
  563.                      do
  564.                         if ( $SC_npoints_I2 >= $meanp_S2 ) exit
  565.                         $SC_npoints_I2 = $SC_npoints_I2 + (imaxperj%base_addr)($jlast_S1 + -$I_L563_94, 0)
  566.                         if ( mlast(maxnodes_four + -$I_L562_155) == 0 ) then
  566.                            mlast(maxnodes_four + -$I_L562_155) = ( $jlast_S1 + -$I_L563_94 )
  566.                         endif
  567.                         jused = ( $jlast_S1 + -$I_L563_94 )
  571.                         $I_L563_94 = 1 + $I_L563_94
  566.                         if ( $I_L563_94 >= $jlast_S1 ) exit
  566.                      enddo
  565.                      npoints(maxnodes_four + -$I_L562_155) = $SC_npoints_I2
  565.                   endif
  572.                   $jlast_S1 = -1 + jused
  573.                   $I_L562_155 = 1 + $I_L562_155
  571.                   if ( $I_L562_155 >= maxnodes_four ) exit
  571.                enddo
  571.             endif
  574.             $Reduc_A51 = 0xffffffff80000001
  574.             $F_A53 = maxnodes_four
  574.             if ( maxnodes_four > 0 ) then
  574.                $I_L574_126 = 0
  574. !dir$ ivdep
  574.                do
  574.                   $Reduc_A51 = max( $Reduc_A51, npoints(1 + $I_L574_126) )
  574.                   $I_L574_126 = 1 + $I_L574_126
  574.                   if ( $I_L574_126 >= $F_A53 ) exit
  574.                enddo
  574.             endif
  574.             $maxpointsold_S6 = $Reduc_A51
  574.             do
  579.                $jlast_S5 = jmax
  580.                if ( maxnodes_four > 0 ) then
  580.                   $I_L580_157 = 0
  580.                   do
  581.                      if ( $jlast_S5 > 0 ) then
  582.                         $SC_npoints1_I3 = npoints1(maxnodes_four + -$I_L580_157)
  581.                         $I_L581_96 = 0
  581.                         do
  582.                            if ( $SC_npoints1_I3 + (imaxperj%base_addr)($jlast_S5 + -$I_L581_96, 0) >= $maxpointsold_S6 ) exit
  583.                            $SC_npoints1_I3 = $SC_npoints1_I3 + (imaxperj%base_addr)($jlast_S5 + -$I_L581_96, 0)
  584.                            if ( mlast1(maxnodes_four + -$I_L580_157) == 0 ) then
  584.                               mlast1(maxnodes_four + -$I_L580_157) = ( $jlast_S5 + -$I_L581_96 )
  584.                            endif
  585.                            jused = ( $jlast_S5 + -$I_L581_96 )
  589.                            $I_L581_96 = 1 + $I_L581_96
  584.                            if ( $I_L581_96 >= $jlast_S5 ) exit
  584.                         enddo
  583.                         npoints1(maxnodes_four + -$I_L580_157) = $SC_npoints1_I3
  583.                      endif
  590.                      $jlast_S5 = -1 + jused
  591.                      $I_L580_157 = 1 + $I_L580_157
  589.                      if ( $I_L580_157 >= maxnodes_four ) exit
  589.                   enddo
  589.                endif
  592.                if ( $jlast_S5 /= 0 ) goto 10
  593.                $Reduc_A54 = 0xffffffff80000001
  593.                $F_A56 = maxnodes_four
  593.                if ( maxnodes_four > 0 ) then
  593.                   $I_L593_128 = 0
  593. !dir$ ivdep
  593.                   do
  593.                      $Reduc_A54 = max( $Reduc_A54, npoints1(1 + $I_L593_128) )
  593.                      $I_L593_128 = 1 + $I_L593_128
  593.                      if ( $I_L593_128 >= $F_A56 ) exit
  593.                   enddo
  593.                endif
  597.                if ( $Reduc_A54 >= $maxpointsold_S6 ) goto 10
  598.                $F_A57 = maxnodes_four
  598.                if ( maxnodes_four > 0 ) then
  598.                   $I_L598_130 = 0
  598. !dir$ ivdep
  598.                   do
  598.                      npoints(1 + $I_L598_130) = npoints1(1 + $I_L598_130)
  598.                      $I_L598_130 = 1 + $I_L598_130
  598.                      if ( $I_L598_130 >= $F_A57 ) exit
  598.                   enddo
  598.                endif
  600.                $F_A58 = maxnodes_four
  600.                if ( maxnodes_four > 0 ) then
  600.                   $I_L600_132 = 0
  600. !dir$ ivdep
  600.                   do
  600.                      mlast(1 + $I_L600_132) = mlast1(1 + $I_L600_132)
  600.                      $I_L600_132 = 1 + $I_L600_132
  600.                      if ( $I_L600_132 >= $F_A58 ) exit
  600.                   enddo
  600.                endif
  599.                $F_A59 = maxnodes_four
  599.                if ( maxnodes_four > 0 ) then
  599.                   $I_L599_134 = 0
  599. !dir$ ivdep
  599.                   do
  599.                      npoints1(1 + $I_L599_134) = 0
  599.                      $I_L599_134 = 1 + $I_L599_134
  599.                      if ( $I_L599_134 >= $F_A59 ) exit
  599.                   enddo
  599.                endif
  601.                $F_A60 = maxnodes_four
  601.                if ( maxnodes_four > 0 ) then
  601.                   $I_L601_136 = 0
  601. !dir$ ivdep
  601.                   do
  601.                      mlast1(1 + $I_L601_136) = 0
  601.                      $I_L601_136 = 1 + $I_L601_136
  601.                      if ( $I_L601_136 >= $F_A60 ) exit
  601.                   enddo
  601.                endif
  598.             enddo
  598.    10       continue
  610.             if ( maxnodes_four > 0 ) then
  610.                $I_L610_98 = 0
  610. !dir$ ivdep
  610.                do
  611.                   if ( mlast(1 + $I_L610_98) >= ( 1 + $I_L610_98 ) ) then
  612.                      jused = ( 1 + $I_L610_98 )
  612.                      goto 20
  612.                   endif
  615.                   $I_L610_98 = 1 + $I_L610_98
  614.                   if ( $I_L610_98 >= maxnodes_four ) exit
  614.                enddo
  614.             endif
  614.    20       continue
  616.             if ( -1 + jused > 0 ) then
  616.                $I_L616_100 = 0
  616. !dir$ ivdep
  616.                do
  617.                   mlast(1 + $I_L616_100) = ( 1 + $I_L616_100 )
  618.                   npoints(1 + $I_L616_100) = (imaxperj%base_addr)(1 + $I_L616_100, 0)
  619.                   $I_L616_100 = 1 + $I_L616_100
  616.                   if ( $I_L616_100 >= -1 + jused ) exit
  616.                enddo
  616.             endif
  620.             npoints(jused) = 0
  621.             $t_S12 = mlast(jused)
  621.             if ( $t_S12 + -jused >= 0 ) then
  622.                $SC_npoints_I0 = 0
  621.                $I_L621_102 = 0
  621. !dir$ ivdep
  621.                do
  622.                   $SC_npoints_I0 = $SC_npoints_I0 + (imaxperj%base_addr)(jused + $I_L621_102, 0)
  623.                   $I_L621_102 = 1 + $I_L621_102
  621.                   if ( $I_L621_102 >= 1 + $t_S12 + -jused ) exit
  621.                enddo
  622.                npoints(jused) = $SC_npoints_I0
  622.             endif
  624.             $F_A61 = maxnodes_four
  624.             if ( maxnodes_four > 0 ) then
  624.                $I_L624_138 = 0
  624. !dir$ ivdep
  624.                do
  624.                   mfirst(1 + $I_L624_138) = 0
  624.                   $I_L624_138 = 1 + $I_L624_138
  624.                   if ( $I_L624_138 >= $F_A61 ) exit
  624.                enddo
  624.             endif
  625.             if ( npoints(1) > 0 ) then
  625.                mfirst(1) = 1
  625.             endif
  626.             if ( -2 + maxnodes_four >= 0 ) then
  626.                $I_L626_104 = 0
  626. !dir$ ivdep
  626.                do
  627.                   if ( npoints(2 + $I_L626_104) > 0 ) then
  627.                      mfirst(2 + $I_L626_104) = 1 + mlast(1 + $I_L626_104)
  627.                   endif
  628.                   $I_L626_104 = 1 + $I_L626_104
  627.                   if ( $I_L626_104 >= -1 + maxnodes_four ) exit
  627.                enddo
  627.                do
  630.                   $improved_S16 = .false.
  631.                   $I_L631_106 = 0
  631.                   do
  632.                      if ( npoints(1 + $I_L631_106) + -npoints(2 + $I_L631_106) > (imaxperj%base_addr)(mlast(1 + $I_L631_106), 0) ) then
  633.                         npoints(1 + $I_L631_106) = npoints(1 + $I_L631_106) + -(imaxperj%base_addr)(mlast(1 + $I_L631_106), 0)
  634.                         $LD_SPLT_P10 = npoints(2 + $I_L631_106)
  634.                         npoints(2 + $I_L631_106) = $LD_SPLT_P10 + (imaxperj%base_addr)(mlast(1 + $I_L631_106), 0)
  635.                         if ( mlast(2 + $I_L631_106) == 0 ) then
  635.                            mlast(2 + $I_L631_106) = mlast(1 + $I_L631_106)
  635.                         endif
  637.                         $improved_S16 = .true.
  636.                         mlast(1 + $I_L631_106) = -1 + mlast(1 + $I_L631_106)
  638.                      else if ( npoints(2 + $I_L631_106) + -npoints(1 + $I_L631_106) > (imaxperj%base_addr)(mfirst(2 + $I_L631_106), 0) ) then
  641.                         mlast(1 + $I_L631_106) = mfirst(2 + $I_L631_106)
  639.                         $LD_SPLT_P11 = npoints(1 + $I_L631_106)
  639.                         npoints(1 + $I_L631_106) = $LD_SPLT_P11 + (imaxperj%base_addr)(mfirst(2 + $I_L631_106), 0)
  640.                         $LD_SPLT_P12 = npoints(2 + $I_L631_106)
  640.                         npoints(2 + $I_L631_106) = $LD_SPLT_P12 + -(imaxperj%base_addr)(mfirst(2 + $I_L631_106), 0)
  642.                         mfirst(2 + $I_L631_106) = 1 + mfirst(2 + $I_L631_106)
  643.                         if ( mfirst(1 + $I_L631_106) == 0 ) then
  643.                            mfirst(1 + $I_L631_106) = mlast(1 + $I_L631_106)
  643.                         endif
  644.                         $improved_S16 = .true.
  644.                      endif
  646.                      $I_L631_106 = 1 + $I_L631_106
  645.                      if ( $I_L631_106 >= -1 + maxnodes_four ) exit
  645.                   enddo
  646.                   if ( $improved_S16 == .false. ) exit
  646.                enddo
  646.             endif
  646.          else
  652.             $nlp_S17 = jmax / maxnodes_four
  654.             if ( maxnodes_four + -jmax + maxnodes_four * $nlp_S17 > 0 ) then
  657.                $SC_imaxperj_I1 = (imaxperj%base_addr)(1, 0)
  654.                $I_L654_92 = 0
  654. !dir$ ivdep
  654.                do
  655.                   mfirst(1 + $I_L654_92) = ( 1 + $nlp_S17 * $I_L654_92 )
  656.                   mlast(1 + $I_L654_92) = ( $nlp_S17 + $nlp_S17 * $I_L654_92 )
  657.                   npoints(1 + $I_L654_92) = $nlp_S17 * $SC_imaxperj_I1
  658.                   $I_L654_92 = 1 + $I_L654_92
  654.                   if ( $I_L654_92 >= ( maxnodes_four + -jmax + maxnodes_four * $nlp_S17 ) ) exit
  654.                enddo
  654.             endif
  659.             if ( jmax + -( maxnodes_four * $nlp_S17 ) > 0 ) then
  662.                $SC_imaxperj_I1 = (imaxperj%base_addr)(1, 0)
  659.                $mlast_WR0_R0 = mlast(maxnodes_four + -jmax + maxnodes_four * $nlp_S17)
  659.                $I_L659_152 = 0
  659. !dir$ unroll 4
  659.                do
  660.                   mfirst(1 + maxnodes_four + $I_L659_152 + -jmax + maxnodes_four * $nlp_S17) = ( 1 + $mlast_WR0_R0 + $I_L659_152 + $nlp_S17 * $I_L659_152 )
  661.                   mlast(1 + maxnodes_four + $I_L659_152 + -jmax + maxnodes_four * $nlp_S17) = ( 1 + $nlp_S17 + $mlast_WR0_R0 + $I_L659_152 + $nlp_S17 * $I_L659_152 )
  662.                   npoints(1 + maxnodes_four + $I_L659_152 + -jmax + maxnodes_four * $nlp_S17) = $SC_imaxperj_I1 + $nlp_S17 * $SC_imaxperj_I1
  663.                   $I_L659_152 = 1 + $I_L659_152
  659.                   if ( $I_L659_152 >= ( jmax + -( maxnodes_four * $nlp_S17 ) ) ) exit
  659.                enddo
  659.             endif
  659.          endif
  667.          $Reduc_A62 = .false.
  667.          $F_A64 = maxnodes_four
  667.          if ( maxnodes_four > 0 ) then
  667.             $I_L667_140 = 0
  667. !dir$ ivdep
  667.             do
  667.                if ( npoints(1 + $I_L667_140) <= 0 ) then
  667.                   $Reduc_A62 = .true.
  667.                   goto 30
  667.                endif
  667.                $I_L667_140 = 1 + $I_L667_140
  667.                if ( $I_L667_140 >= $F_A64 ) exit
  667.             enddo
  667.          endif
  667.    30    continue
  667.          if ( $Reduc_A62 /= .false. ) then
  668.              _substr(t$189,1,85) = '**(RegisterOtherSizes)** Too many MPI processes; there are processes with 0 latitudes'
  668.             call fatalerror(  _substr(t$189,1,85) )
  670.              _substr(t$190,1,4) = ' '
  670.             call _stop(  _substr(t$190,1,1) )
  670.          else
  673.             myfirstlat_f = mfirst(1 + myid_four)
  674.             mylastlat_f = mlast(1 + myid_four)
  676.             $F_A65 = ( max( 0, jmax ) )
  676.             if ( jmax > 0 ) then
  676.                $I_L676_142 = 0
  676. !dir$ ivdep
  676.                do
  676.                   (nodehasj_f%base_addr)(1 + $I_L676_142, 0) = -1
  676.                   $I_L676_142 = 1 + $I_L676_142
  676.                   if ( $I_L676_142 >= $F_A65 ) exit
  676.                enddo
  676.             endif
  677.             if ( maxnodes_four > 0 ) then
  677.                $I_L677_159 = 0
  677.                do
  678.                   (firstlatinproc_f%base_addr)($I_L677_159, 0) = mfirst(1 + $I_L677_159)
  679.                   (lastlatinproc_f%base_addr)($I_L677_159, 0) = mlast(1 + $I_L677_159)
  680.                   (nlatsinproc_f%base_addr)($I_L677_159, 0) = 1 + mlast(1 + $I_L677_159) + -mfirst(1 + $I_L677_159)
  681.                   $t_S22 = (firstlatinproc_f%base_addr)($I_L677_159, 0)
  681.                   $t_S23 = (lastlatinproc_f%base_addr)($I_L677_159, 0)
  681.                   if ( $t_S23 + -$t_S22 >= 0 ) then
  681.                      $I_L681_108 = 0
  681. !dir$ ivdep
  681.                      do
  682.                         (nodehasj_f%base_addr)($t_S22 + $I_L681_108, 0) = $I_L677_159
  683.                         $I_L681_108 = 1 + $I_L681_108
  681.                         if ( $I_L681_108 >= 1 + $t_S23 + -$t_S22 ) exit
  681.                      enddo
  681.                   endif
  684.                   $I_L677_159 = 1 + $I_L677_159
  683.                   if ( $I_L677_159 >= maxnodes_four ) exit
  683.                enddo
  683.             endif
  685.             $Reduc_A66 = 0xffffffff80000001
  685.             $F_A68 = ( max( 0, maxnodes_four ) )
  685.             if ( maxnodes_four > 0 ) then
  685.                $I_L685_144 = 0
  685. !dir$ ivdep
  685.                do
  685.                   $Reduc_A66 = max( $Reduc_A66, (nlatsinproc_f%base_addr)($I_L685_144, 0) )
  685.                   $I_L685_144 = 1 + $I_L685_144
  685.                   if ( $I_L685_144 >= $F_A68 ) exit
  685.                enddo
  685.             endif
  685.             jmaxlocal_f = $Reduc_A66
  686.             myjmax_f = 1 + mylastlat_f + -myfirstlat_f
  688.             jminperm%header%a_contig = 1
  688.             jminperm%dim_1%LB = 1
  688.             jminperm%dim_1%EX = ( max( 0, mmax ) )
  688.             jminperm%dim_1%SM = 1
  688.             $_allo_P8(0) = 0x1000000000001L
  688.             $_allo_P8(1) = loc( jminperm )
  688.             call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  689.             jmaxperm%header%a_contig = 1
  689.             jmaxperm%dim_1%LB = 1
  689.             jmaxperm%dim_1%EX = ( max( 0, mmax ) )
  689.             jmaxperm%dim_1%SM = 1
  689.             $_allo_P9(0) = 0x1000000000001L
  689.             $_allo_P9(1) = loc( jmaxperm )
  689.             call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  690.             $F_A69 = ( max( 0, mmax ) )
  690.             if ( mmax > 0 ) then
  690.                $I_L690_146 = 0
  690. !dir$ ivdep
  690.                do
  690.                   (jminperm%base_addr)(1 + $I_L690_146, 0) = jmaxhalf
  690.                   $I_L690_146 = 1 + $I_L690_146
  690.                   if ( $I_L690_146 >= $F_A69 ) exit
  690.                enddo
  690.             endif
  691.             if ( jmaxhalf > 0 ) then
  691.                $I_L691_161 = 0
  691.                do
  692.                   $m_S26 = (mmaxperj%base_addr)(1 + $I_L691_161, 0)
  693.                   $F_A70 = $m_S26
  693.                   if ( $m_S26 > 0 ) then
  693.                      $I_L693_148 = 0
  693. !dir$ ivdep
  693.                      do
  693.                         (jminperm%base_addr)(1 + $I_L693_148, 0) = min( (jminperm%base_addr)(1 + $I_L693_148, 0), ( 1 + $I_L691_161 ) )
  693.                         $I_L693_148 = 1 + $I_L693_148
  693.                         if ( $I_L693_148 >= $F_A70 ) exit
  693.                      enddo
  693.                   endif
  694.                   $I_L691_161 = 1 + $I_L691_161
  691.                   if ( $I_L691_161 >= jmaxhalf ) exit
  691.                enddo
  691.             endif
  695.             $F_A71 = ( max( 0, mmax ) )
  695.             if ( mmax > 0 ) then
  695.                $I_L695_150 = 0
  695. !dir$ ivdep
  695.                do
  695.                   (jmaxperm%base_addr)(1 + $I_L695_150, 0) = 1 + jmax + -(jminperm%base_addr)(1 + $I_L695_150, 0)
  695.                   $I_L695_150 = 1 + $I_L695_150
  695.                   if ( $I_L695_150 >= $F_A71 ) exit
  695.                enddo
  695.             endif
  519.             _free( t$103 )
  519.          endif
  519.       endif
  704.       return
  704.       end
  704.       
  796.       
  796.       subroutine dumpsizes
  721.       t$204 = unitdump
  721.       t$205(1) = 0x100000000000000L
  721. !dir$ suppress t$204
  721.       t$205(2) = int( loc( t$204 ), 8 )
  721.       t$205(3) = 0
  721.       t$205(5) = 0
  721.       t$205(6) = 0
  721.       t$205(7) = 0
  721. !dir$ suppress op
  721.       t$205(8) = int( loc( op ), 8 )
  721.       t$205(9) = 0
  721.       t$205(10) = 0
  721.       t$205(11) = 0
  721.       t$205(13) = 0
  721.       t$205(15) = 0
  721.       t$205(17) = 0
  721.       t$205(19) = 0
  721.       t$205(21) = 0
  721.       t$205(23) = 0
  721.       t$205(25) = 0
  721.       t$205(26) = 0
  721.       t$205(27) = 0
  721.       t$205(29) = 0
  721.       t$205(31) = 0
  721.       t$205(33) = 0
  721.       t$205(35) = 0
  721.       t$205(37) = 0
  721.       t$205(39) = 0
  721.       t$205(41) = 0
  721.       t$205(43) = 0
  721.       t$205(44) = 0
  721.       t$205(45) = 0x2000500000000L
  721.       t$205(46) = 0
  721.       t$205(47) = 0
  721.       t$205(48) = 0
  721.       t$205(49) = 0
  721.       t$205(50) = 0
  721.       t$205(52) = 0
  721.       t$205(54) = 0
  721.       t$205(56) = 0
  721.       t$205(57) = 0
  721.       t$205(58) = 0
  721.       t$205(60) = 0
  721.       t$205(61) = 0
  721.       t$205(62) = 0
  721.       t$205(63) = 0
  721.       t$205(64) = 0
  721.       t$205(66) = 0
  721.       t$205(68) = 0
  721.       t$205(69) = 0
  721.       t$205(70) = 0
  721.       t$203 = _inquire( t$205 )
  722.       if ( op == .false. ) then
  723.           _substr(t$206,1,66) = '**(DumpSizes)** unitDump not opened; CreateParallelism not invoked'
  723.          call fatalerror(  _substr(t$206,1,66) )
  723.       endif
  728.       if ( mmax == -1 ) then
  729.          $Unit_temp_O0 = unitdump
  729.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$9,  _substr(t$8,1,24), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ) ) )
  729.       else
  731.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$11,  _substr(t$10,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mmax, 0x2000200000000L ) ) )
  732.          _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$13,  _substr(t$12,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nmax, 0x2000200000000L ) ) )
  733.          _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$15,  _substr(t$14,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mnmax, 0x2000200000000L ) ) )
  734.          _fwrite( _clist( 0, 0, 3,  _substr(c4,1,10), Null_Arg, Null_Arg, t$17,  _substr(t$16,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mnextmax, 0x2000200000000L ) ) )
  736.          _f90_adjustl(  _substr(t$207,1,10),  _substr(c1,1,10) )
  735.          t$211 = _ltrim(  _substr(t$207,1,10) )
  736.          t$213 = int( _alloc( max( 0, t$211 ) ), 8 )
  736.           _substr(t$212,1,max( 0, t$211 )) =  _substr(t$207,1,_ltrim(  _substr(t$207,1,10) ))
  736.          _f90_adjustl(  _substr(t$208,1,10),  _substr(c2,1,10) )
  735.          t$214 = _ltrim(  _substr(t$208,1,10) )
  736.          t$216 = int( _alloc( max( 0, t$214 ) ), 8 )
  736.           _substr(t$215,1,max( 0, t$214 )) =  _substr(t$208,1,_ltrim(  _substr(t$208,1,10) ))
  736.          _f90_adjustl(  _substr(t$209,1,10),  _substr(c3,1,10) )
  735.          t$217 = _ltrim(  _substr(t$209,1,10) )
  736.          t$219 = int( _alloc( max( 0, t$217 ) ), 8 )
  736.           _substr(t$218,1,max( 0, t$217 )) =  _substr(t$209,1,_ltrim(  _substr(t$209,1,10) ))
  737.          _f90_adjustl(  _substr(t$210,1,10),  _substr(c4,1,10) )
  735.          t$220 = _ltrim(  _substr(t$210,1,10) )
  737.          t$222 = int( _alloc( max( 0, t$220 ) ), 8 )
  737.           _substr(t$221,1,max( 0, t$220 )) =  _substr(t$210,1,_ltrim(  _substr(t$210,1,10) ))
  735.          $Unit_temp_O1 = unitdump
  735.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$19,  _substr(t$18,1,55), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$212,1,max( 0, t$211 )), 0x800600000000L ), _iotype(  _substr(t$215,1,max( 0, t$214 )), 0x800600000000L ), _iotype(  _substr(t$218,1,max( 0, t$217 )), 0x800600000000L ), _iotype(  _substr(t$221,1,max( 0, t$220 )), 0x800600000000L ) ) )
  737.          _free( t$222 )
  736.          _free( t$219 )
  736.          _free( t$216 )
  736.          _free( t$213 )
  738.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$21,  _substr(t$20,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jmax, 0x2000200000000L ) ) )
  739.          _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$23,  _substr(t$22,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jmaxhalf, 0x2000200000000L ) ) )
  741.          _f90_adjustl(  _substr(t$223,1,10),  _substr(c1,1,10) )
  740.          t$225 = _ltrim(  _substr(t$223,1,10) )
  741.          t$227 = int( _alloc( max( 0, t$225 ) ), 8 )
  741.           _substr(t$226,1,max( 0, t$225 )) =  _substr(t$223,1,_ltrim(  _substr(t$223,1,10) ))
  741.          _f90_adjustl(  _substr(t$224,1,10),  _substr(c2,1,10) )
  740.          t$228 = _ltrim(  _substr(t$224,1,10) )
  741.          t$230 = int( _alloc( max( 0, t$228 ) ), 8 )
  741.           _substr(t$229,1,max( 0, t$228 )) =  _substr(t$224,1,_ltrim(  _substr(t$224,1,10) ))
  740.          $Unit_temp_O2 = unitdump
  740.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$25,  _substr(t$24,1,30), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$226,1,max( 0, t$225 )), 0x800600000000L ), _iotype(  _substr(t$229,1,max( 0, t$228 )), 0x800600000000L ) ) )
  741.          _free( t$230 )
  741.          _free( t$227 )
  742.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$27,  _substr(t$26,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( imax, 0x2000200000000L ) ) )
  743.          _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$29,  _substr(t$28,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( kmax, 0x2000200000000L ) ) )
  744.          _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$31,  _substr(t$30,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ijmax, 0x2000200000000L ) ) )
  745.          if ( ijmax == -1 ) then
  747.             _f90_adjustl(  _substr(t$231,1,10),  _substr(c1,1,10) )
  746.             t$233 = _ltrim(  _substr(t$231,1,10) )
  747.             t$235 = int( _alloc( max( 0, t$233 ) ), 8 )
  747.              _substr(t$234,1,max( 0, t$233 )) =  _substr(t$231,1,_ltrim(  _substr(t$231,1,10) ))
  747.             _f90_adjustl(  _substr(t$232,1,10),  _substr(c2,1,10) )
  746.             t$236 = _ltrim(  _substr(t$232,1,10) )
  747.             t$238 = int( _alloc( max( 0, t$236 ) ), 8 )
  747.              _substr(t$237,1,max( 0, t$236 )) =  _substr(t$232,1,_ltrim(  _substr(t$232,1,10) ))
  746.             $Unit_temp_O3 = unitdump
  746.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$33,  _substr(t$32,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$234,1,max( 0, t$233 )), 0x800600000000L ), _iotype(  _substr(t$237,1,max( 0, t$236 )), 0x800600000000L ) ) )
  747.             _free( t$238 )
  747.             _free( t$235 )
  748.             $Unit_temp_O4 = unitdump
  748.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$35,  _substr(t$34,1,30), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ) ) )
  748.          else
  751.             _f90_adjustl(  _substr(t$239,1,10),  _substr(c1,1,10) )
  750.             t$242 = _ltrim(  _substr(t$239,1,10) )
  751.             t$244 = int( _alloc( max( 0, t$242 ) ), 8 )
  751.              _substr(t$243,1,max( 0, t$242 )) =  _substr(t$239,1,_ltrim(  _substr(t$239,1,10) ))
  751.             _f90_adjustl(  _substr(t$240,1,10),  _substr(c2,1,10) )
  750.             t$245 = _ltrim(  _substr(t$240,1,10) )
  751.             t$247 = int( _alloc( max( 0, t$245 ) ), 8 )
  751.              _substr(t$246,1,max( 0, t$245 )) =  _substr(t$240,1,_ltrim(  _substr(t$240,1,10) ))
  751.             _f90_adjustl(  _substr(t$241,1,10),  _substr(c3,1,10) )
  750.             t$248 = _ltrim(  _substr(t$241,1,10) )
  751.             t$250 = int( _alloc( max( 0, t$248 ) ), 8 )
  751.              _substr(t$249,1,max( 0, t$248 )) =  _substr(t$241,1,_ltrim(  _substr(t$241,1,10) ))
  750.             $Unit_temp_O5 = unitdump
  750.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$37,  _substr(t$36,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$243,1,max( 0, t$242 )), 0x800600000000L ), _iotype(  _substr(t$246,1,max( 0, t$245 )), 0x800600000000L ), _iotype(  _substr(t$249,1,max( 0, t$248 )), 0x800600000000L ) ) )
  751.             _free( t$250 )
  751.             _free( t$247 )
  751.             _free( t$244 )
  755.              _substr(t$251,1,15) = '**(DumpSizes)**'
  755.              _substr(t$252,1,31) = ' latitude domain decomposition:'
  755.             call msgdump(  _substr(t$251,1,15),  _substr(t$252,1,31) )
  756.             _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$39,  _substr(t$38,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( myjmax_f, 0x2000200000000L ) ) )
  757.             _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$41,  _substr(t$40,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( myfirstlat_f, 0x2000200000000L ) ) )
  758.             _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$43,  _substr(t$42,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mylastlat_f, 0x2000200000000L ) ) )
  759.             _f90_adjustl(  _substr(t$253,1,10),  _substr(c1,1,10) )
  760.             _f90_adjustl(  _substr(t$254,1,10),  _substr(c2,1,10) )
  761.             _f90_adjustl(  _substr(t$255,1,10),  _substr(c3,1,10) )
  759.              _substr(t$256,1,15) = '**(DumpSizes)**'
  759.             t$257 = 39 + ( _ltrim(  _substr(t$253,1,10) ) ) + ( _ltrim(  _substr(t$254,1,10) ) ) + ( _ltrim(  _substr(t$255,1,10) ) )
  761.             t$259 = int( _alloc( max( 0, t$257 ) ), 8 )
  761.              _substr(t$258,1,max( 0, t$257 )) = //( ' myJmax_f=', //(  _substr(t$253,1,_ltrim(  _substr(t$253,1,10) )), //( '; myFirstLat_f=', //(  _substr(t$254,1,_ltrim(  _substr(t$254,1,10) )), //( '; myLastLat_f=',  _substr(t$255,1,_ltrim(  _substr(t$255,1,10) )) ) ) ) ) )
  759.             call msgdump(  _substr(t$256,1,15),  _substr(t$258,1,max( 0, t$257 )) )
  761.             _free( t$259 )
  765.             $nnodes_S0 = ( max( 0, firstlatinproc_f%dim_1%EX ) )
  766.              _substr(t$260,1,15) = '**(DumpSizes)**'
  766.              _substr(t$261,1,25) = ' latitudes per processor:'
  766.             call msgdump(  _substr(t$260,1,15),  _substr(t$261,1,25) )
  767.              _substr(t$262,1,15) = '**(DumpSizes)**'
  767.              _substr(t$263,1,48) = ' firstLatInProc_f:lastLatInProc_f(nLatsInProc_f)'
  767.             call msgdump(  _substr(t$262,1,15),  _substr(t$263,1,48) )
  768.             if ( $nnodes_S0 > 0 ) then
  768.                $t_S1 = ( 4 + $nnodes_S0 ) / 5
  768.                $I_L768_20 = 0
  768.                do
  768.                   pstart = ( 5 * $I_L768_20 )
  769.                   pend = min( ( 4 + 5 * $I_L768_20 ), -1 + $nnodes_S0 )
  770.                    _substr(line,1,256) = ' procs XXXX to XXXX ='
  771.                   _fwrite( _clist( 0, 0, 3,  _substr(line,8,4), Null_Arg, Null_Arg, t$45,  _substr(t$44,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( pstart, 0x2000200000000L ) ) )
  772.                   _fwrite( _clist( 0, 0, 3,  _substr(line,16,4), Null_Arg, Null_Arg, t$47,  _substr(t$46,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( pend, 0x2000200000000L ) ) )
  773.                   if ( ( min( ( 4 + 5 * $I_L768_20 ), -1 + $nnodes_S0 ) + -5 * $I_L768_20 ) >= 0 ) then
  773.                      $I_L773_16 = 0
  773.                      do
  776.                         if ( ( ( $I_L773_16 + 5 * $I_L768_20 ) < firstlatinproc_f%dim_1%LB .or. ( $I_L773_16 + 5 * $I_L768_20 ) > -1 + firstlatinproc_f%dim_1%EX + firstlatinproc_f%dim_1%LB ) /= .false. ) then
  776.                             _substr(t$272,1,10) = 'Sizes.f90'
  776.                             _substr(t$273,1,17) = 'FIRSTLATINPROC_F'
  776.                            t$204 = firstlatinproc_f%dim_1%LB
  776.                            t$274 = -1 + firstlatinproc_f%dim_1%EX + firstlatinproc_f%dim_1%LB
  776.                            t$275 = $I_L773_16 + 5 * $I_L768_20
  776.                            call _bounds_error(  _substr(t$272,1,10), 776,  _substr(t$273,1,17), 1, t$204, t$274, t$275, t$271 )
  776.                         endif
  776.                         if ( ( ( $I_L773_16 + 5 * $I_L768_20 ) < lastlatinproc_f%dim_1%LB .or. ( $I_L773_16 + 5 * $I_L768_20 ) > -1 + lastlatinproc_f%dim_1%LB + lastlatinproc_f%dim_1%EX ) /= .false. ) then
  776.                             _substr(t$277,1,10) = 'Sizes.f90'
  776.                             _substr(t$278,1,16) = 'LASTLATINPROC_F'
  776.                            t$279 = lastlatinproc_f%dim_1%LB
  776.                            t$280 = -1 + lastlatinproc_f%dim_1%LB + lastlatinproc_f%dim_1%EX
  776.                            t$281 = $I_L773_16 + 5 * $I_L768_20
  776.                            call _bounds_error(  _substr(t$277,1,10), 776,  _substr(t$278,1,16), 1, t$279, t$280, t$281, t$276 )
  776.                         endif
  776.                         if ( ( ( $I_L773_16 + 5 * $I_L768_20 ) < nlatsinproc_f%dim_1%LB .or. ( $I_L773_16 + 5 * $I_L768_20 ) > -1 + nlatsinproc_f%dim_1%LB + nlatsinproc_f%dim_1%EX ) /= .false. ) then
  776.                             _substr(t$283,1,10) = 'Sizes.f90'
  776.                             _substr(t$284,1,14) = 'NLATSINPROC_F'
  776.                            t$285 = nlatsinproc_f%dim_1%LB
  776.                            t$286 = -1 + nlatsinproc_f%dim_1%LB + nlatsinproc_f%dim_1%EX
  776.                            t$287 = $I_L773_16 + 5 * $I_L768_20
  776.                            call _bounds_error(  _substr(t$283,1,10), 776,  _substr(t$284,1,14), 1, t$285, t$286, t$287, t$282 )
  776.                         endif
  775.                         $IOitem_O6 = (firstlatinproc_f%base_addr)($I_L773_16 + 5 * $I_L768_20, 0)
  775.                         $IOitem_O7 = (lastlatinproc_f%base_addr)($I_L773_16 + 5 * $I_L768_20, 0)
  775.                         $IOitem_O8 = (nlatsinproc_f%base_addr)($I_L773_16 + 5 * $I_L768_20, 0)
  775.                         _fwrite( _clist( 0, 0, 3,  _substr(line,( 22 + 15 * $I_L773_16 ),15), Null_Arg, Null_Arg, t$49,  _substr(t$48,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O6, 0x2000200000000L ), _iotype( ':', 0x800600000000L ), _iotype( $IOitem_O7, 0x2000200000000L ), _iotype( '(', 0x800600000000L ), _iotype( $IOitem_O8, 0x2000200000000L ), _iotype( ')', 0x800600000000L ) ) )
  777.                         $I_L773_16 = 1 + $I_L773_16
  777.                         if ( $I_L773_16 >= 1 + min( ( 4 + 5 * $I_L768_20 ), -1 + $nnodes_S0 ) + -5 * $I_L768_20 ) exit
  777.                      enddo
  777.                   endif
  778.                    _substr(t$288,1,15) = '**(DumpSizes)**'
  778.                   call msgdump(  _substr(t$288,1,15),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
  779.                   $I_L768_20 = 1 + $I_L768_20
  779.                   if ( $I_L768_20 >= $t_S1 ) exit
  779.                enddo
  779.             endif
  782.              _substr(t$289,1,15) = '**(DumpSizes)**'
  782.              _substr(t$290,1,35) = ' which processor has each latitude:'
  782.             call msgdump(  _substr(t$289,1,15),  _substr(t$290,1,35) )
  783.             if ( jmax > 0 ) then
  783.                $t_S3 = ( 9 + jmax ) / 10
  783.                $I_L783_22 = 0
  783.                do
  783.                   jstart = ( 1 + 10 * $I_L783_22 )
  784.                   jend = min( jmax, ( 10 + 10 * $I_L783_22 ) )
  785.                    _substr(line,1,256) = ' nodeHasJ(    :    )='
  786.                   _fwrite( _clist( 0, 0, 3,  _substr(line,11,4), Null_Arg, Null_Arg, t$51,  _substr(t$50,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jstart, 0x2000200000000L ) ) )
  787.                   _fwrite( _clist( 0, 0, 3,  _substr(line,16,4), Null_Arg, Null_Arg, t$53,  _substr(t$52,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jend, 0x2000200000000L ) ) )
  788.                   $t_S2 = min( jmax, ( 10 + 10 * $I_L783_22 ) )
  788.                   if ( ( -1 + min( jmax, ( 10 + 10 * $I_L783_22 ) ) + -10 * $I_L783_22 ) >= 0 ) then
  788.                      $I_L788_18 = 0
  788.                      do
  790.                         if ( ( ( 1 + $I_L788_18 + 10 * $I_L783_22 ) < nodehasj_f%dim_1%LB .or. ( 1 + $I_L788_18 + 10 * $I_L783_22 ) > -1 + nodehasj_f%dim_1%LB + nodehasj_f%dim_1%EX ) /= .false. ) then
  790.                             _substr(t$299,1,10) = 'Sizes.f90'
  790.                             _substr(t$300,1,11) = 'NODEHASJ_F'
  790.                            t$204 = nodehasj_f%dim_1%LB
  790.                            t$274 = -1 + nodehasj_f%dim_1%LB + nodehasj_f%dim_1%EX
  790.                            t$275 = 1 + $I_L788_18 + 10 * $I_L783_22
  790.                            call _bounds_error(  _substr(t$299,1,10), 790,  _substr(t$300,1,11), 1, t$204, t$274, t$275, t$298 )
  790.                         endif
  790.                         $IOitem_O9 = (nodehasj_f%base_addr)(1 + $I_L788_18 + 10 * $I_L783_22, 0)
  790.                         _fwrite( _clist( 0, 0, 3,  _substr(line,( 22 + 5 * $I_L788_18 ),5), Null_Arg, Null_Arg, t$55,  _substr(t$54,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O9, 0x2000200000000L ) ) )
  791.                         $I_L788_18 = 1 + $I_L788_18
  791.                         if ( $I_L788_18 >= $t_S2 + -10 * $I_L783_22 ) exit
  791.                      enddo
  791.                   endif
  792.                    _substr(t$301,1,15) = '**(DumpSizes)**'
  792.                   call msgdump(  _substr(t$301,1,15),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
  793.                   $I_L783_22 = 1 + $I_L783_22
  793.                   if ( $I_L783_22 >= $t_S3 ) exit
  793.                enddo
  793.             endif
  793.          endif
  793.       endif
  796.       return
  796.       end
  796.       
 1152.       
 1152.       subroutine spectraldomaindecomp
  823.       ini = $_StaticDV_P2
  823.       ini%base_addr = pointer to array[1] of integer( 0 )
  823.       ini%header%el_len = 32
  823.       ini%header%assoc = 0
  823.       ini%header%ptr_alloc = 0
  823.       ini%header%p_or_a = 2
  823.       ini%header%a_contig = 1
  823.       ini%header%n_dim = 1
  823.       ini%header%orig_base = 0
  823.       ini%header%orig_size = 0
  823.       ini%header%n_codim = 0
  823.       ini%header%dv_versn = 2
  823.       ini%header%dv_smunit = 32
  823.       ini%header%d_type = 0
  823.       ini%header%n_params = 0
  823.       ini%header%d_type_idx = 10
  823.       ini%dim_1%LB = 1
  823.       ini%dim_1%EX = 0
  823.       ini%dim_1%SM = 1
  806.       sends = $_StaticDV_P3
  806.       sends%base_addr = pointer to array[1] of integer( 0 )
  806.       sends%header%el_len = 32
  806.       sends%header%assoc = 0
  806.       sends%header%ptr_alloc = 0
  806.       sends%header%p_or_a = 2
  806.       sends%header%a_contig = 1
  806.       sends%header%n_dim = 1
  806.       sends%header%orig_base = 0
  806.       sends%header%orig_size = 0
  806.       sends%header%n_codim = 0
  806.       sends%header%dv_versn = 2
  806.       sends%header%dv_smunit = 32
  806.       sends%header%d_type = 0
  806.       sends%header%n_params = 0
  806.       sends%header%d_type_idx = 10
  806.       sends%dim_1%LB = 1
  806.       sends%dim_1%EX = 0
  806.       sends%dim_1%SM = 1
  836.       mmaxlocal = mmax / maxnodes_four
  837.       if ( mmax + -( mmaxlocal * maxnodes_four ) /= 0 ) then
  837.          mmaxlocal = 1 + mmaxlocal
  837.       endif
  842.       msperproc%header%a_contig = 1
  842.       msperproc%dim_1%LB = 0
  842.       msperproc%dim_1%EX = _zla( 0, maxnodes_four )
  842.       msperproc%dim_1%SM = 1
  842.       $_allo_P4(0) = 0x1000000000001L
  842.       $_allo_P4(1) = loc( msperproc )
  842.       call __allocate( $_allo_P4, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  843.       if ( ierr /= 0 ) then
  844.          _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$57,  _substr(t$56,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  845.          _f90_adjustl(  _substr(t$302,1,8),  _substr(c0,1,8) )
  845.          t$303 = 60 + ( _ltrim(  _substr(t$302,1,8) ) )
  845.          t$305 = int( _alloc( _zla( 0, t$303 ) ), 8 )
  845.           _substr(t$304,1,_zla( 0, t$303 )) = //( '**(SpectralDomainDecomp)** allocate msPerProc returned stat=',  _substr(t$302,1,_ltrim(  _substr(t$302,1,8) )) )
  845.          call fatalerror(  _substr(t$304,1,_zla( 0, t$303 )) )
  845.          _free( t$305 )
  845.       endif
  852.       msinproc%header%a_contig = 1
  852.       msinproc%dim_1%LB = 1
  852.       msinproc%dim_1%EX = _zla( 0, mmaxlocal )
  852.       msinproc%dim_1%SM = 1
  852.       msinproc%dim_2%LB = 0
  852.       msinproc%dim_2%EX = _zla( 0, maxnodes_four )
  852.       msinproc%dim_2%SM = _zla( 0, mmaxlocal )
  852.       $_allo_P5(0) = 0x1000000000001L
  852.       $_allo_P5(1) = loc( msinproc )
  852.       call __allocate( $_allo_P5, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  853.       if ( ierr /= 0 ) then
  854.          _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$59,  _substr(t$58,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  855.          _f90_adjustl(  _substr(t$306,1,8),  _substr(c0,1,8) )
  855.          t$307 = 59 + ( _ltrim(  _substr(t$306,1,8) ) )
  855.          t$309 = int( _alloc( _zla( 0, t$307 ) ), 8 )
  855.           _substr(t$308,1,_zla( 0, t$307 )) = //( '**(SpectralDomainDecomp)** allocate msInProc returned stat=',  _substr(t$306,1,_ltrim(  _substr(t$306,1,8) )) )
  855.          call fatalerror(  _substr(t$308,1,_zla( 0, t$307 )) )
  855.          _free( t$309 )
  855.       endif
  864.       nodehasm%header%a_contig = 1
  864.       nodehasm%dim_1%LB = 1
  864.       nodehasm%dim_1%EX = _zla( 0, mmax )
  864.       nodehasm%dim_1%SM = 1
  864.       nodehasm%dim_2%LB = 1
  864.       nodehasm%dim_2%EX = _zla( 0, ngroups_four )
  864.       nodehasm%dim_2%SM = _zla( 0, mmax )
  864.       $_allo_P6(0) = 0x1000000000001L
  864.       $_allo_P6(1) = loc( nodehasm )
  864.       call __allocate( $_allo_P6, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  865.       if ( ierr /= 0 ) then
  866.          _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$61,  _substr(t$60,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  867.          _f90_adjustl(  _substr(t$310,1,8),  _substr(c0,1,8) )
  867.          t$311 = 59 + ( _ltrim(  _substr(t$310,1,8) ) )
  867.          t$313 = int( _alloc( _zla( 0, t$311 ) ), 8 )
  867.           _substr(t$312,1,_zla( 0, t$311 )) = //( '**(SpectralDomainDecomp)** allocate nodeHasM returned stat=',  _substr(t$310,1,_ltrim(  _substr(t$310,1,8) )) )
  867.          call fatalerror(  _substr(t$312,1,_zla( 0, t$311 )) )
  867.          _free( t$313 )
  867.       endif
  872.       if ( ngroups_four > 0 ) then
  873.          $SC_npperg_four_I0 = npperg_four%dim_1%EX
  873.          $SC_npperg_four_I1 = npperg_four%dim_1%LB
  878.          $SC_nodehasm_I5 = nodehasm%dim_2%SM
  878.          $SC_nodehasm_I4 = nodehasm%dim_2%EX
  878.          $SC_nodehasm_I6 = nodehasm%dim_2%LB
  878.          $SC_nodehasm_I2 = nodehasm%dim_1%EX
  878.          $SC_nodehasm_I3 = nodehasm%dim_1%LB
  872.          $I_L872_216 = 0
  872.          do
  873.             $maxn_S1 = (npperg_four%base_addr)(1 + $I_L872_216, 0)
  875.             if ( ( mmax /= 1 .and. xor( 2 * $maxn_S1, -1 + mmax ) < 0 ) == .false. ) then
  875.                $t_S5 = ( -1 + mmax + 2 * $maxn_S1 ) / 2 * $maxn_S1
  875.                $I_L875_200 = 0
  875.                do
  877.                   if ( ( -1 + min( mmax, ( $maxn_S1 + 2 * $maxn_S1 * $I_L875_200 ) ) + -2 * $maxn_S1 * $I_L875_200 ) >= 0 ) then
  877.                      $I_L877_140 = 0
  877. !dir$ ivdep
  877.                      do
  878.                         (nodehasm%base_addr)(1 + $I_L877_140 + 2 * $maxn_S1 * $I_L875_200, 1 + $I_L872_216, 0) = $I_L877_140
  879.                         $I_L877_140 = 1 + $I_L877_140
  877.                         if ( $I_L877_140 >= min( mmax, ( $maxn_S1 + 2 * $maxn_S1 * $I_L875_200 ) ) + -2 * $maxn_S1 * $I_L875_200 ) exit
  877.                      enddo
  877.                   endif
  881.                   if ( ( min( mmax, ( 2 * $maxn_S1 + 2 * $maxn_S1 * $I_L875_200 ) ) + -$maxn_S1 + -2 * $maxn_S1 * $I_L875_200 ) > 0 ) then
  881.                      $I_L881_142 = 0
  881. !dir$ ivdep
  881.                      do
  882.                         (nodehasm%base_addr)(1 + $maxn_S1 + $I_L881_142 + 2 * $maxn_S1 * $I_L875_200, 1 + $I_L872_216, 0) = ( -1 + $maxn_S1 + -$I_L881_142 )
  883.                         $I_L881_142 = 1 + $I_L881_142
  881.                         if ( $I_L881_142 >= min( mmax, ( 2 * $maxn_S1 + 2 * $maxn_S1 * $I_L875_200 ) ) + -$maxn_S1 + -2 * $maxn_S1 * $I_L875_200 ) exit
  881.                      enddo
  881.                   endif
  885.                   $I_L875_200 = 1 + $I_L875_200
  883.                   if ( $I_L875_200 >= $t_S5 ) exit
  883.                enddo
  883.             endif
  886.             $I_L872_216 = 1 + $I_L872_216
  885.             if ( $I_L872_216 >= ngroups_four ) exit
  885.          enddo
  885.       endif
  887.       havem1 = myid_four + -(nodehasm%base_addr)(1, mygroup_four, 0) == 0
  892.       havesurf = .false.
  893.       if ( mygroup_four == 1 ) then
  893.          havesurf = .true.
  893.       endif
  895.       $F_A37 = msperproc%dim_1%EX
  895.       if ( msperproc%dim_1%EX > 0 ) then
  895.          $SC_msperproc_I47 = msperproc%dim_1%EX
  895.          $SC_msperproc_I48 = msperproc%dim_1%LB
  895.          $I_L895_164 = 0
  895. !dir$ ivdep
  895.          do
  895.             (msperproc%base_addr)($SC_msperproc_I48 + $I_L895_164, 0) = 0
  895.             $I_L895_164 = 1 + $I_L895_164
  895.             if ( $I_L895_164 >= $F_A37 ) exit
  895.          enddo
  895.       endif
  897.       if ( ( mmax /= 1 .and. xor( 2 * maxnodes_four, -1 + mmax ) < 0 ) == .false. ) then
  897.          $t_S11 = ( -1 + mmax + 2 * maxnodes_four ) / 2 * maxnodes_four
  901.          $SC_nodehasm_I5 = nodehasm%dim_2%SM
  901.          $SC_nodehasm_I4 = nodehasm%dim_2%EX
  901.          $SC_nodehasm_I6 = nodehasm%dim_2%LB
  901.          $SC_nodehasm_I2 = nodehasm%dim_1%EX
  901.          $SC_nodehasm_I3 = nodehasm%dim_1%LB
  901.          $SC_msinproc_I10 = msinproc%dim_2%SM
  901.          $SC_msinproc_I9 = msinproc%dim_2%EX
  901.          $SC_msinproc_I11 = msinproc%dim_2%LB
  901.          $SC_msinproc_I7 = msinproc%dim_1%EX
  901.          $SC_msinproc_I8 = msinproc%dim_1%LB
  900.          $SC_msperproc_I12 = msperproc%dim_1%EX
  900.          $SC_msperproc_I13 = msperproc%dim_1%LB
  897.          $I_L897_202 = 0
  897.          do
  899.             if ( ( -1 + min( mmax, ( maxnodes_four + 2 * maxnodes_four * $I_L897_202 ) ) + -2 * maxnodes_four * $I_L897_202 ) >= 0 ) then
  899.                $I_L899_144 = 0
  899. !dir$ unroll 4
  899.                do
  901.                   (msinproc%base_addr)(1 + 2 * $I_L897_202, (nodehasm%base_addr)(1 + $I_L899_144 + 2 * maxnodes_four * $I_L897_202, mygroup_four, 0), 0) = ( 1 + $I_L899_144 + 2 * maxnodes_four * $I_L897_202 )
  900.                   (msperproc%base_addr)((nodehasm%base_addr)(1 + $I_L899_144 + 2 * maxnodes_four * $I_L897_202, mygroup_four, 0), 0) = 1 + (msperproc%base_addr)((nodehasm%base_addr)(1 + $I_L899_144 + 2 * maxnodes_four * $I_L897_202, mygroup_four, 0), 0)
  902.                   $I_L899_144 = 1 + $I_L899_144
  899.                   if ( $I_L899_144 >= min( mmax, ( maxnodes_four + 2 * maxnodes_four * $I_L897_202 ) ) + -2 * maxnodes_four * $I_L897_202 ) exit
  899.                enddo
  899.             endif
  904.             if ( ( min( mmax, ( 2 * maxnodes_four + 2 * maxnodes_four * $I_L897_202 ) ) + -maxnodes_four + -2 * maxnodes_four * $I_L897_202 ) > 0 ) then
  904.                $I_L904_146 = 0
  904. !dir$ unroll 4
  904.                do
  906.                   (msinproc%base_addr)(2 + 2 * $I_L897_202, (nodehasm%base_addr)(1 + maxnodes_four + $I_L904_146 + 2 * maxnodes_four * $I_L897_202, mygroup_four, 0), 0) = ( 1 + maxnodes_four + $I_L904_146 + 2 * maxnodes_four * $I_L897_202 )
  905.                   (msperproc%base_addr)((nodehasm%base_addr)(1 + maxnodes_four + $I_L904_146 + 2 * maxnodes_four * $I_L897_202, mygroup_four, 0), 0) = 1 + (msperproc%base_addr)((nodehasm%base_addr)(1 + maxnodes_four + $I_L904_146 + 2 * maxnodes_four * $I_L897_202, mygroup_four, 0), 0)
  907.                   $I_L904_146 = 1 + $I_L904_146
  904.                   if ( $I_L904_146 >= min( mmax, ( 2 * maxnodes_four + 2 * maxnodes_four * $I_L897_202 ) ) + -maxnodes_four + -2 * maxnodes_four * $I_L897_202 ) exit
  904.                enddo
  904.             endif
  909.             $I_L897_202 = 1 + $I_L897_202
  907.             if ( $I_L897_202 >= $t_S11 ) exit
  907.          enddo
  907.       endif
  914.       $Reduc_A38 = .false.
  914.       $F_A40 = msperproc%dim_1%EX
  914.       if ( msperproc%dim_1%EX > 0 ) then
  914.          $SC_msperproc_I44 = msperproc%dim_1%EX
  914.          $SC_msperproc_I45 = msperproc%dim_1%LB
  914.          $I_L914_166 = 0
  914. !dir$ ivdep
  914.          do
  914.             if ( (msperproc%base_addr)($SC_msperproc_I45 + $I_L914_166, 0) <= 0 ) then
  914.                $Reduc_A38 = .true.
  914.                goto 10
  914.             endif
  914.             $I_L914_166 = 1 + $I_L914_166
  914.             if ( $I_L914_166 >= $F_A40 ) exit
  914.          enddo
  914.       endif
  914.    10 continue
  914.       if ( $Reduc_A38 /= .false. ) then
  915.           _substr(t$341,1,91) = '**(SpectralDomainDecomp)** Too many MPI processes; there are processes with 0 Fourier waves'
  915.          call fatalerror(  _substr(t$341,1,91) )
  917.           _substr(t$342,1,4) = ' '
  917.          call _stop(  _substr(t$342,1,1) )
  917.       else
  922.          mymmax = (msperproc%base_addr)(myid_four, 0)
  927.          lm2m%header%a_contig = 1
  927.          lm2m%dim_1%LB = 1
  927.          lm2m%dim_1%EX = ( max( 0, mymmax ) )
  927.          lm2m%dim_1%SM = 1
  927.          $_allo_P7(0) = 0x1000000000001L
  927.          $_allo_P7(1) = loc( lm2m )
  927.          call __allocate( $_allo_P7, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  928.          if ( ierr /= 0 ) then
  929.             _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$63,  _substr(t$62,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  930.             _f90_adjustl(  _substr(t$343,1,8),  _substr(c0,1,8) )
  930.             t$344 = 55 + ( _ltrim(  _substr(t$343,1,8) ) )
  930.             t$346 = int( _alloc( max( 0, t$344 ) ), 8 )
  930.              _substr(t$345,1,max( 0, t$344 )) = //( '**(SpectralDomainDecomp)** allocate lm2m returned stat=',  _substr(t$343,1,_ltrim(  _substr(t$343,1,8) )) )
  930.             call fatalerror(  _substr(t$345,1,max( 0, t$344 )) )
  930.             _free( t$346 )
  930.          endif
  932.          $F_A41 = mymmax
  932.          if ( mymmax > 0 ) then
  932.             $SC_lm2m_I54 = lm2m%dim_1%EX
  932.             $SC_lm2m_I55 = lm2m%dim_1%LB
  932.             $SC_msinproc_I52 = msinproc%dim_2%SM
  932.             $SC_msinproc_I51 = msinproc%dim_2%EX
  932.             $SC_msinproc_I53 = msinproc%dim_2%LB
  932.             $SC_msinproc_I49 = msinproc%dim_1%EX
  932.             $SC_msinproc_I50 = msinproc%dim_1%LB
  932.             $I_L932_168 = 0
  932. !dir$ ivdep
  932.             do
  932.                (lm2m%base_addr)(1 + $I_L932_168, 0) = (msinproc%base_addr)(1 + $I_L932_168, myid_four, 0)
  932.                $I_L932_168 = 1 + $I_L932_168
  932.                if ( $I_L932_168 >= $F_A41 ) exit
  932.             enddo
  932.          endif
  945.          mnsperproc%header%a_contig = 1
  945.          mnsperproc%dim_1%LB = 0
  945.          mnsperproc%dim_1%EX = ( max( 0, maxnodes_four ) )
  945.          mnsperproc%dim_1%SM = 1
  945.          $_allo_P8(0) = 0x1000000000001L
  945.          $_allo_P8(1) = loc( mnsperproc )
  945.          call __allocate( $_allo_P8, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  946.          if ( ierr /= 0 ) then
  947.             _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$65,  _substr(t$64,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  948.             _f90_adjustl(  _substr(t$347,1,8),  _substr(c0,1,8) )
  948.             t$348 = 61 + ( _ltrim(  _substr(t$347,1,8) ) )
  948.             t$350 = int( _alloc( max( 0, t$348 ) ), 8 )
  948.              _substr(t$349,1,max( 0, t$348 )) = //( '**(SpectralDomainDecomp)** allocate mnsPerProc returned stat=',  _substr(t$347,1,_ltrim(  _substr(t$347,1,8) )) )
  948.             call fatalerror(  _substr(t$349,1,max( 0, t$348 )) )
  948.             _free( t$350 )
  948.          endif
  953.          mnsextperproc%header%a_contig = 1
  953.          mnsextperproc%dim_1%LB = 0
  953.          mnsextperproc%dim_1%EX = ( max( 0, maxnodes_four ) )
  953.          mnsextperproc%dim_1%SM = 1
  953.          $_allo_P9(0) = 0x1000000000001L
  953.          $_allo_P9(1) = loc( mnsextperproc )
  953.          call __allocate( $_allo_P9, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  954.          if ( ierr /= 0 ) then
  955.             _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$67,  _substr(t$66,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  956.             _f90_adjustl(  _substr(t$351,1,8),  _substr(c0,1,8) )
  956.             t$352 = 61 + ( _ltrim(  _substr(t$351,1,8) ) )
  956.             t$354 = int( _alloc( max( 0, t$352 ) ), 8 )
  956.              _substr(t$353,1,max( 0, t$352 )) = //( '**(SpectralDomainDecomp)** allocate mnsPerProc returned stat=',  _substr(t$351,1,_ltrim(  _substr(t$351,1,8) )) )
  956.             call fatalerror(  _substr(t$353,1,max( 0, t$352 )) )
  956.             _free( t$354 )
  956.          endif
  962.          $F_A42 = mnsperproc%dim_1%EX
  962.          if ( mnsperproc%dim_1%EX > 0 ) then
  962.             $SC_mnsperproc_I56 = mnsperproc%dim_1%EX
  962.             $SC_mnsperproc_I57 = mnsperproc%dim_1%LB
  962.             $I_L962_170 = 0
  962. !dir$ ivdep
  962.             do
  962.                (mnsperproc%base_addr)($SC_mnsperproc_I57 + $I_L962_170, 0) = 0
  962.                $I_L962_170 = 1 + $I_L962_170
  962.                if ( $I_L962_170 >= $F_A42 ) exit
  962.             enddo
  962.          endif
  963.          $F_A43 = mnsextperproc%dim_1%EX
  963.          if ( mnsextperproc%dim_1%EX > 0 ) then
  963.             $SC_mnsextperproc_I58 = mnsextperproc%dim_1%EX
  963.             $SC_mnsextperproc_I59 = mnsextperproc%dim_1%LB
  963.             $I_L963_172 = 0
  963. !dir$ ivdep
  963.             do
  963.                (mnsextperproc%base_addr)($SC_mnsextperproc_I59 + $I_L963_172, 0) = 0
  963.                $I_L963_172 = 1 + $I_L963_172
  963.                if ( $I_L963_172 >= $F_A43 ) exit
  963.             enddo
  963.          endif
  965.          if ( ( mmax /= 1 .and. xor( 2 * maxnodes_four, -1 + mmax ) < 0 ) == .false. ) then
  965.             $t_S16 = ( -1 + mmax + 2 * maxnodes_four ) / 2 * maxnodes_four
  969.             $SC_mnsextperproc_I14 = mnsextperproc%dim_1%EX
  969.             $SC_mnsextperproc_I15 = mnsextperproc%dim_1%LB
  968.             $SC_mnsperproc_I16 = mnsperproc%dim_1%EX
  968.             $SC_mnsperproc_I17 = mnsperproc%dim_1%LB
  969.             $SC_nodehasm_I5 = nodehasm%dim_2%SM
  969.             $SC_nodehasm_I4 = nodehasm%dim_2%EX
  969.             $SC_nodehasm_I6 = nodehasm%dim_2%LB
  969.             $SC_nodehasm_I2 = nodehasm%dim_1%EX
  969.             $SC_nodehasm_I3 = nodehasm%dim_1%LB
  965.             $I_L965_204 = 0
  965.             do
  967.                if ( ( -1 + min( mmax, ( maxnodes_four + 2 * maxnodes_four * $I_L965_204 ) ) + -2 * maxnodes_four * $I_L965_204 ) >= 0 ) then
  967.                   $I_L967_148 = 0
  967. !dir$ unroll 2
  967.                   do
  968.                      (mnsperproc%base_addr)((nodehasm%base_addr)(1 + $I_L967_148 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) = ( mmax + (mnsperproc%base_addr)((nodehasm%base_addr)(1 + $I_L967_148 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) + -$I_L967_148 + -2 * maxnodes_four * $I_L965_204 )
  969.                      (mnsextperproc%base_addr)((nodehasm%base_addr)(1 + $I_L967_148 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) = ( 1 + mmax + (mnsextperproc%base_addr)((nodehasm%base_addr)(1 + $I_L967_148 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) + -$I_L967_148 + -2 * maxnodes_four * $I_L965_204 )
  970.                      $I_L967_148 = 1 + $I_L967_148
  967.                      if ( $I_L967_148 >= min( mmax, ( maxnodes_four + 2 * maxnodes_four * $I_L965_204 ) ) + -2 * maxnodes_four * $I_L965_204 ) exit
  967.                   enddo
  967.                endif
  972.                if ( ( min( mmax, ( 2 * maxnodes_four + 2 * maxnodes_four * $I_L965_204 ) ) + -maxnodes_four + -2 * maxnodes_four * $I_L965_204 ) > 0 ) then
  972.                   $I_L972_150 = 0
  972. !dir$ unroll 2
  972.                   do
  973.                      (mnsperproc%base_addr)((nodehasm%base_addr)(1 + maxnodes_four + $I_L972_150 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) = ( mmax + (mnsperproc%base_addr)((nodehasm%base_addr)(1 + maxnodes_four + $I_L972_150 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) + -maxnodes_four + -$I_L972_150 + -2 * maxnodes_four * $I_L965_204 )
  974.                      (mnsextperproc%base_addr)((nodehasm%base_addr)(1 + maxnodes_four + $I_L972_150 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) = ( 1 + mmax + (mnsextperproc%base_addr)((nodehasm%base_addr)(1 + maxnodes_four + $I_L972_150 + 2 * maxnodes_four * $I_L965_204, mygroup_four, 0), 0) + -maxnodes_four + -$I_L972_150 + -2 * maxnodes_four * $I_L965_204 )
  975.                      $I_L972_150 = 1 + $I_L972_150
  972.                      if ( $I_L972_150 >= min( mmax, ( 2 * maxnodes_four + 2 * maxnodes_four * $I_L965_204 ) ) + -maxnodes_four + -2 * maxnodes_four * $I_L965_204 ) exit
  972.                   enddo
  972.                endif
  977.                $I_L965_204 = 1 + $I_L965_204
  975.                if ( $I_L965_204 >= $t_S16 ) exit
  975.             enddo
  975.          endif
  983.          $Reduc_A44 = 0xffffffff80000001
  983.          $F_A46 = mnsperproc%dim_1%EX
  983.          if ( mnsperproc%dim_1%EX > 0 ) then
  983.             $SC_mnsperproc_I56 = mnsperproc%dim_1%EX
  983.             $SC_mnsperproc_I57 = mnsperproc%dim_1%LB
  983.             $I_L983_174 = 0
  983. !dir$ ivdep
  983.             do
  983.                $Reduc_A44 = max( $Reduc_A44, (mnsperproc%base_addr)($SC_mnsperproc_I57 + $I_L983_174, 0) )
  983.                $I_L983_174 = 1 + $I_L983_174
  983.                if ( $I_L983_174 >= $F_A46 ) exit
  983.             enddo
  983.          endif
  983.          mnmaxlocal = $Reduc_A44
  984.          $Reduc_A47 = 0xffffffff80000001
  984.          $F_A49 = mnsextperproc%dim_1%EX
  984.          if ( mnsextperproc%dim_1%EX > 0 ) then
  984.             $SC_mnsextperproc_I58 = mnsextperproc%dim_1%EX
  984.             $SC_mnsextperproc_I59 = mnsextperproc%dim_1%LB
  984.             $I_L984_176 = 0
  984. !dir$ ivdep
  984.             do
  984.                $Reduc_A47 = max( $Reduc_A47, (mnsextperproc%base_addr)($SC_mnsextperproc_I59 + $I_L984_176, 0) )
  984.                $I_L984_176 = 1 + $I_L984_176
  984.                if ( $I_L984_176 >= $F_A49 ) exit
  984.             enddo
  984.          endif
  984.          mnextmaxlocal = $Reduc_A47
  989.          mymnmax = (mnsperproc%base_addr)(myid_four, 0)
  990.          mymnextmax = (mnsextperproc%base_addr)(myid_four, 0)
 1005.          mymnmap%header%a_contig = 1
 1005.          mymnmap%dim_1%LB = 1
 1005.          mymnmap%dim_1%EX = ( max( 0, mymmax ) )
 1005.          mymnmap%dim_1%SM = 1
 1005.          mymnmap%dim_2%LB = 1
 1005.          mymnmap%dim_2%EX = ( max( 0, nmax ) )
 1005.          mymnmap%dim_2%SM = ( max( 0, mymmax ) )
 1005.          $_allo_P10(0) = 0x1000000000001L
 1005.          $_allo_P10(1) = loc( mymnmap )
 1005.          call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 1006.          mymmap%header%a_contig = 1
 1006.          mymmap%dim_1%LB = 1
 1006.          mymmap%dim_1%EX = ( max( 0, mymnmax ) )
 1006.          mymmap%dim_1%SM = 1
 1006.          $_allo_P11(0) = 0x1000000000001L
 1006.          $_allo_P11(1) = loc( mymmap )
 1006.          call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 1007.          mynmap%header%a_contig = 1
 1007.          mynmap%dim_1%LB = 1
 1007.          mynmap%dim_1%EX = ( max( 0, mymnmax ) )
 1007.          mynmap%dim_1%SM = 1
 1007.          $_allo_P12(0) = 0x1000000000001L
 1007.          $_allo_P12(1) = loc( mynmap )
 1007.          call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 1008.          $F_A50 = ( max( 0, nmax ) )
 1008.          $F_A51 = ( max( 0, mymmax ) )
 1008.          if ( and( -$F_A51, -$F_A50 ) < 0 ) then
 1008.             $I_L1008_212 = 0
 1008.             do
 1008.                $I_L1008_178 = 0
 1008. !dir$ ivdep
 1008.                do
 1008.                   (mymnmap%base_addr)(1 + $I_L1008_178, 1 + $I_L1008_212, 0) = -1
 1008.                   $I_L1008_178 = 1 + $I_L1008_178
 1008.                   if ( $I_L1008_178 >= $F_A51 ) exit
 1008.                enddo
 1008.                $I_L1008_212 = 1 + $I_L1008_212
 1008.                if ( $I_L1008_212 >= $F_A50 ) exit
 1008.             enddo
 1008.          endif
 1009.          $F_A52 = ( max( 0, mymnmax ) )
 1009.          if ( mymnmax > 0 ) then
 1009.             $I_L1009_180 = 0
 1009. !dir$ ivdep
 1009.             do
 1009.                (mymmap%base_addr)(1 + $I_L1009_180, 0) = -1
 1009.                $I_L1009_180 = 1 + $I_L1009_180
 1009.                if ( $I_L1009_180 >= $F_A52 ) exit
 1009.             enddo
 1009.          endif
 1010.          $F_A53 = ( max( 0, mymnmax ) )
 1010.          if ( mymnmax > 0 ) then
 1010.             $I_L1010_182 = 0
 1010. !dir$ ivdep
 1010.             do
 1010.                (mynmap%base_addr)(1 + $I_L1010_182, 0) = -1
 1010.                $I_L1010_182 = 1 + $I_L1010_182
 1010.                if ( $I_L1010_182 >= $F_A53 ) exit
 1010.             enddo
 1010.          endif
 1011.          $mn_S19 = 0
 1012.          if ( mymmax > 0 ) then
 1013.             $SC_lm2m_I18 = lm2m%dim_1%EX
 1013.             $SC_lm2m_I19 = lm2m%dim_1%LB
 1012.             $I_L1012_206 = 0
 1012.             do
 1013.                $t_S18 = (lm2m%base_addr)(1 + $I_L1012_206, 0)
 1013.                if ( mmax + -$t_S18 >= 0 ) then
 1013.                   $I_L1013_152 = 0
 1013. !dir$ ivdep
 1013.                   do
 1015.                      (mymnmap%base_addr)(1 + $I_L1012_206, $t_S18 + $I_L1013_152, 0) = ( 1 + $mn_S19 + $I_L1013_152 )
 1016.                      (mymmap%base_addr)(1 + $mn_S19 + $I_L1013_152, 0) = ( 1 + $I_L1012_206 )
 1017.                      (mynmap%base_addr)(1 + $mn_S19 + $I_L1013_152, 0) = ( $t_S18 + $I_L1013_152 )
 1018.                      $I_L1013_152 = 1 + $I_L1013_152
 1013.                      if ( $I_L1013_152 >= 1 + mmax + -$t_S18 ) exit
 1013.                   enddo
 1014.                   $mn_S19 = ( 1 + mmax + $mn_S19 + -$t_S18 )
 1014.                endif
 1019.                $I_L1012_206 = 1 + $I_L1012_206
 1018.                if ( $I_L1012_206 >= mymmax ) exit
 1018.             enddo
 1018.          endif
 1027.          mymextmap%header%a_contig = 1
 1027.          mymextmap%dim_1%LB = 1
 1027.          mymextmap%dim_1%EX = ( max( 0, mymnextmax ) )
 1027.          mymextmap%dim_1%SM = 1
 1027.          $_allo_P13(0) = 0x1000000000001L
 1027.          $_allo_P13(1) = loc( mymextmap )
 1027.          call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
 1028.          mynextmap%header%a_contig = 1
 1028.          mynextmap%dim_1%LB = 1
 1028.          mynextmap%dim_1%EX = ( max( 0, mymnextmax ) )
 1028.          mynextmap%dim_1%SM = 1
 1028.          $_allo_P14(0) = 0x1000000000001L
 1028.          $_allo_P14(1) = loc( mynextmap )
 1028.          call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
 1029.          mymnextmap%header%a_contig = 1
 1029.          mymnextmap%dim_1%LB = 1
 1029.          mymnextmap%dim_1%EX = ( max( 0, mymmax ) )
 1029.          mymnextmap%dim_1%SM = 1
 1029.          mymnextmap%dim_2%LB = 1
 1029.          mymnextmap%dim_2%EX = ( max( 0, nextmax ) )
 1029.          mymnextmap%dim_2%SM = ( max( 0, mymmax ) )
 1029.          $_allo_P15(0) = 0x1000000000001L
 1029.          $_allo_P15(1) = loc( mymnextmap )
 1029.          call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 1030.          $F_A54 = ( max( 0, mymnextmax ) )
 1030.          if ( mymnextmax > 0 ) then
 1030.             $I_L1030_184 = 0
 1030. !dir$ ivdep
 1030.             do
 1030.                (mymextmap%base_addr)(1 + $I_L1030_184, 0) = -1
 1030.                $I_L1030_184 = 1 + $I_L1030_184
 1030.                if ( $I_L1030_184 >= $F_A54 ) exit
 1030.             enddo
 1030.          endif
 1031.          $F_A55 = ( max( 0, mymnextmax ) )
 1031.          if ( mymnextmax > 0 ) then
 1031.             $I_L1031_186 = 0
 1031. !dir$ ivdep
 1031.             do
 1031.                (mynextmap%base_addr)(1 + $I_L1031_186, 0) = -1
 1031.                $I_L1031_186 = 1 + $I_L1031_186
 1031.                if ( $I_L1031_186 >= $F_A55 ) exit
 1031.             enddo
 1031.          endif
 1032.          $F_A56 = ( max( 0, nextmax ) )
 1032.          $F_A57 = ( max( 0, mymmax ) )
 1032.          if ( and( -$F_A57, -$F_A56 ) < 0 ) then
 1032.             $I_L1032_214 = 0
 1032.             do
 1032.                $I_L1032_188 = 0
 1032. !dir$ ivdep
 1032.                do
 1032.                   (mymnextmap%base_addr)(1 + $I_L1032_188, 1 + $I_L1032_214, 0) = -1
 1032.                   $I_L1032_188 = 1 + $I_L1032_188
 1032.                   if ( $I_L1032_188 >= $F_A57 ) exit
 1032.                enddo
 1032.                $I_L1032_214 = 1 + $I_L1032_214
 1032.                if ( $I_L1032_214 >= $F_A56 ) exit
 1032.             enddo
 1032.          endif
 1033.          $mn_S23 = 0
 1034.          if ( mymmax > 0 ) then
 1035.             $SC_lm2m_I18 = lm2m%dim_1%EX
 1035.             $SC_lm2m_I19 = lm2m%dim_1%LB
 1034.             $I_L1034_208 = 0
 1034.             do
 1035.                $t_S22 = (lm2m%base_addr)(1 + $I_L1034_208, 0)
 1035.                if ( 1 + mmax + -$t_S22 >= 0 ) then
 1035.                   $I_L1035_154 = 0
 1035. !dir$ ivdep
 1035.                   do
 1037.                      (mymnextmap%base_addr)(1 + $I_L1034_208, $t_S22 + $I_L1035_154, 0) = ( 1 + $mn_S23 + $I_L1035_154 )
 1038.                      (mymextmap%base_addr)(1 + $mn_S23 + $I_L1035_154, 0) = ( 1 + $I_L1034_208 )
 1039.                      (mynextmap%base_addr)(1 + $mn_S23 + $I_L1035_154, 0) = ( $t_S22 + $I_L1035_154 )
 1040.                      $I_L1035_154 = 1 + $I_L1035_154
 1035.                      if ( $I_L1035_154 >= 2 + mmax + -$t_S22 ) exit
 1035.                   enddo
 1036.                   $mn_S23 = ( 2 + mmax + $mn_S23 + -$t_S22 )
 1036.                endif
 1041.                $I_L1034_208 = 1 + $I_L1034_208
 1040.                if ( $I_L1034_208 >= mymmax ) exit
 1040.             enddo
 1040.          endif
 1052.          mnsinproc_si%header%a_contig = 1
 1052.          mnsinproc_si%dim_1%LB = 0
 1052.          mnsinproc_si%dim_1%EX = ( max( 0, maxnodes ) )
 1052.          mnsinproc_si%dim_1%SM = 1
 1052.          $_allo_P16(0) = 0x1000000000001L
 1052.          $_allo_P16(1) = loc( mnsinproc_si )
 1052.          call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 1053.          mnprocmap_si%header%a_contig = 1
 1053.          mnprocmap_si%dim_1%LB = 1
 1053.          mnprocmap_si%dim_1%EX = ( max( 0, mnmax ) )
 1053.          mnprocmap_si%dim_1%SM = 1
 1053.          $_allo_P17(0) = 0x1000000000001L
 1053.          $_allo_P17(1) = loc( mnprocmap_si )
 1053.          call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
 1055.          $mnsperproc_si_S25 = mnmax / maxnodes
 1056.          $rest_S26 = mnmax + -( maxnodes * $mnsperproc_si_S25 )
 1057.          if ( maxnodes > 0 ) then
 1057.             $I_L1057_156 = 0
 1057. !dir$ unroll 4
 1057.             do
 1058.                if ( $rest_S26 > 0 ) then
 1059.                   (mnsinproc_si%base_addr)($I_L1057_156, 0) = 1 + $mnsperproc_si_S25
 1060.                   $rest_S26 = -1 + $rest_S26
 1060.                else
 1062.                   (mnsinproc_si%base_addr)($I_L1057_156, 0) = $mnsperproc_si_S25
 1062.                endif
 1066.                $I_L1057_156 = 1 + $I_L1057_156
 1063.                if ( $I_L1057_156 >= maxnodes ) exit
 1063.             enddo
 1063.          endif
 1068.          ini%header%a_contig = 1
 1068.          ini%dim_1%LB = 0
 1068.          ini%dim_1%EX = ( max( 0, 1 + maxnodes ) )
 1068.          ini%dim_1%SM = 1
 1068.          $_allo_P18(0) = 0x1000000000001L
 1068.          $_allo_P18(1) = loc( ini )
 1068.          call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
 1069.          $mn_S32 = 0
 1070.          $ip_S29 = 0
 1071.          $inc_S33 = 1
 1072.          $F_A58 = ( max( 0, 1 + maxnodes ) )
 1072.          if ( maxnodes >= 0 ) then
 1072.             $I_L1072_190 = 0
 1072. !dir$ ivdep
 1072.             do
 1072.                (ini%base_addr)($I_L1072_190, 0) = 0
 1072.                $I_L1072_190 = 1 + $I_L1072_190
 1072.                if ( $I_L1072_190 >= $F_A58 ) exit
 1072.             enddo
 1072.          endif
 1073.          if ( mmax > 0 ) then
 1073.             $I_L1073_218 = 0
 1073.             do
 1074.                $ns_S30 = ( mmax + -$I_L1073_218 )
 1074.                do
 1076.                   $mngiv_S31 = min( $ns_S30, (mnsinproc_si%base_addr)($ip_S29, 0) + -(ini%base_addr)($ip_S29, 0) )
 1077.                   $F_A59 = $mngiv_S31
 1077.                   if ( $mngiv_S31 > 0 ) then
 1077.                      $I_L1077_192 = 0
 1077. !dir$ ivdep
 1077.                      do
 1077.                         (mnprocmap_si%base_addr)(1 + $mn_S32 + $I_L1077_192, 0) = $ip_S29
 1077.                         $I_L1077_192 = 1 + $I_L1077_192
 1077.                         if ( $I_L1077_192 >= $F_A59 ) exit
 1077.                      enddo
 1077.                   endif
 1078.                   $mn_S32 = $mngiv_S31 + $mn_S32
 1079.                   $ns_S30 = $ns_S30 + -$mngiv_S31
 1080.                   (ini%base_addr)($ip_S29, 0) = $mngiv_S31 + (ini%base_addr)($ip_S29, 0)
 1081.                   $ip_S29 = $ip_S29 + $inc_S33
 1082.                   if ( $ip_S29 + -maxnodes == 0 ) then
 1083.                      $inc_S33 = -1
 1084.                      $ip_S29 = -1 + maxnodes
 1085.                   else if ( $ip_S29 == -1 ) then
 1086.                      $inc_S33 = 1
 1087.                      $ip_S29 = 0
 1087.                   endif
 1088.                   if ( $ns_S30 == 0 ) exit
 1088.                enddo
 1091.                $I_L1073_218 = 1 + $I_L1073_218
 1090.                if ( $I_L1073_218 >= mmax ) exit
 1090.             enddo
 1090.          endif
 1094.          mnmax_si = (mnsinproc_si%base_addr)(myid, 0)
 1098.          mynmap_si%header%a_contig = 1
 1098.          mynmap_si%dim_1%LB = 1
 1098.          mynmap_si%dim_1%EX = ( max( 0, mnmax_si ) )
 1098.          mynmap_si%dim_1%SM = 1
 1098.          $_allo_P19(0) = 0x1000000000001L
 1098.          $_allo_P19(1) = loc( mynmap_si )
 1098.          call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
 1099.          mymnmap_si%header%a_contig = 1
 1099.          mymnmap_si%dim_1%LB = 1
 1099.          mymnmap_si%dim_1%EX = ( max( 0, mnmax_si ) )
 1099.          mymnmap_si%dim_1%SM = 1
 1099.          $_allo_P20(0) = 0x1000000000001L
 1099.          $_allo_P20(1) = loc( mymnmap_si )
 1099.          call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
 1101.          $mn_S35 = 1
 1102.          if ( mnmax > 0 ) then
 1105.             $SC_nmap_I20 = nmap%dim_1%EX
 1105.             $SC_nmap_I21 = nmap%dim_1%LB
 1102.             $I_L1102_158 = 0
 1102. !dir$ ivdep
 1102.             do
 1103.                if ( (mnprocmap_si%base_addr)(1 + $I_L1102_158, 0) + -myid == 0 ) then
 1104.                   (mymnmap_si%base_addr)($mn_S35, 0) = ( 1 + $I_L1102_158 )
 1105.                   (mynmap_si%base_addr)($mn_S35, 0) = (nmap%base_addr)(1 + $I_L1102_158, 0)
 1106.                   $mn_S35 = 1 + $mn_S35
 1106.                endif
 1108.                $I_L1102_158 = 1 + $I_L1102_158
 1107.                if ( $I_L1102_158 >= mnmax ) exit
 1107.             enddo
 1107.          endif
 1111.          mnsendsmap_si%header%a_contig = 1
 1111.          mnsendsmap_si%dim_1%LB = 1
 1111.          mnsendsmap_si%dim_1%EX = ( max( 0, mymnmax ) )
 1111.          mnsendsmap_si%dim_1%SM = 1
 1111.          $_allo_P21(0) = 0x1000000000001L
 1111.          $_allo_P21(1) = loc( mnsendsmap_si )
 1111.          call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
 1113.          if ( mymnmax > 0 ) then
 1116.             $SC_mnmap_I22 = mnmap%dim_1%EX
 1116.             $SC_mnmap_I23 = mnmap%dim_1%LB
 1116.             $SC_mnmap_I25 = mnmap%dim_2%SM
 1116.             $SC_mnmap_I24 = mnmap%dim_2%EX
 1116.             $SC_mnmap_I26 = mnmap%dim_2%LB
 1114.             $SC_lm2m_I18 = lm2m%dim_1%EX
 1114.             $SC_lm2m_I19 = lm2m%dim_1%LB
 1113.             $I_L1113_160 = 0
 1113. !dir$ ivdep
 1113.             do
 1114.                $m_S37 = (lm2m%base_addr)((mymmap%base_addr)(1 + $I_L1113_160, 0), 0)
 1115.                $n_S38 = (mynmap%base_addr)(1 + $I_L1113_160, 0)
 1116.                $mng_S39 = (mnmap%base_addr)($m_S37, $n_S38, 0)
 1117.                (mnsendsmap_si%base_addr)(1 + $I_L1113_160, 0) = (mnprocmap_si%base_addr)($mng_S39, 0)
 1118.                $I_L1113_160 = 1 + $I_L1113_160
 1113.                if ( $I_L1113_160 >= mymnmax ) exit
 1113.             enddo
 1113.          endif
 1120.          maps_si%header%a_contig = 1
 1120.          maps_si%dim_1%LB = 0
 1120.          maps_si%dim_1%EX = ( max( 0, maxnodes ) )
 1120.          maps_si%dim_1%SM = 1
 1120.          $_allo_P22(0) = 0x1000000000001L
 1120.          $_allo_P22(1) = loc( maps_si )
 1120.          call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
 1121.          mapr_si%header%a_contig = 1
 1121.          mapr_si%dim_1%LB = 0
 1121.          mapr_si%dim_1%EX = ( max( 0, maxnodes ) )
 1121.          mapr_si%dim_1%SM = 1
 1121.          $_allo_P23(0) = 0x1000000000001L
 1121.          $_allo_P23(1) = loc( mapr_si )
 1121.          call __allocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
 1122.          sends%header%a_contig = 1
 1122.          sends%dim_1%LB = 1
 1122.          sends%dim_1%EX = ( max( 0, maxnodes ) )
 1122.          sends%dim_1%SM = 1
 1122.          $_allo_P24(0) = 0x1000000000001L
 1122.          $_allo_P24(1) = loc( sends )
 1122.          call __allocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
 1124.          (sends%base_addr)(1, 0) = (mnsendsmap_si%base_addr)(1, 0)
 1125.          nsends_si = 1
 1126.          (ini%base_addr)(1, 0) = 1
 1127.          (maps_si%base_addr)((sends%base_addr)(1, 0), 0) = 1
 1128.          if ( -2 + mymnmax >= 0 ) then
 1128.             $I_L1128_210 = 0
 1128.             do
 1129.                $Reduc_A60 = .true.
 1129.                $F_A62 = nsends_si
 1129.                if ( $F_A62 > 0 ) then
 1129.                   $SC_mnsendsmap_si_I46 = (mnsendsmap_si%base_addr)(2 + $I_L1128_210, 0)
 1129.                   $I_L1129_194 = 0
 1129. !dir$ ivdep
 1129.                   do
 1129.                      if ( (sends%base_addr)(1 + $I_L1129_194, 0) + -$SC_mnsendsmap_si_I46 == 0 ) then
 1129.                         $Reduc_A60 = .false.
 1129.                         goto 20
 1129.                      endif
 1129.                      $I_L1129_194 = 1 + $I_L1129_194
 1129.                      if ( $I_L1129_194 >= $F_A62 ) exit
 1129.                   enddo
 1129.                endif
 1129.    20          continue
 1129.                if ( $Reduc_A60 /= .false. ) then
 1130.                   nsends_si = 1 + nsends_si
 1131.                   (sends%base_addr)(nsends_si, 0) = (mnsendsmap_si%base_addr)(2 + $I_L1128_210, 0)
 1132.                   (maps_si%base_addr)((mnsendsmap_si%base_addr)(2 + $I_L1128_210, 0), 0) = nsends_si
 1132.                endif
 1134.                (ini%base_addr)((maps_si%base_addr)((mnsendsmap_si%base_addr)(2 + $I_L1128_210, 0), 0), 0) = 1 + (ini%base_addr)((maps_si%base_addr)((mnsendsmap_si%base_addr)(2 + $I_L1128_210, 0), 0), 0)
 1135.                $I_L1128_210 = 1 + $I_L1128_210
 1133.                if ( $I_L1128_210 >= -1 + mymnmax ) exit
 1133.             enddo
 1133.          endif
 1136.          (ini%base_addr)(0, 0) = 1
 1137.          if ( nsends_si > 0 ) then
 1137.             $ini_WR0_R0 = 1
 1137.             $I_L1137_162 = 0
 1137. !dir$ unroll 4
 1137.             do
 1138.                $SCF_P31 = 6 * kmaxloc * (ini%base_addr)(1 + $I_L1137_162, 0) + 2 * (ini%base_addr)(1 + $I_L1137_162, 0)
 1138.                $ini_WR0_R0 = $SCF_P31 + $ini_WR0_R0
 1138.                (ini%base_addr)(1 + $I_L1137_162, 0) = $ini_WR0_R0
 1139.                $I_L1137_162 = 1 + $I_L1137_162
 1137.                if ( $I_L1137_162 >= nsends_si ) exit
 1137.             enddo
 1137.          endif
 1141.          mysends_si%header%a_contig = 1
 1141.          mysends_si%dim_1%LB = 1
 1141.          mysends_si%dim_1%EX = ( max( 0, nsends_si ) )
 1141.          mysends_si%dim_1%SM = 1
 1141.          $_allo_P25(0) = 0x1000000000001L
 1141.          $_allo_P25(1) = loc( mysends_si )
 1141.          call __allocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
 1142.          inibs_si%header%a_contig = 1
 1142.          inibs_si%dim_1%LB = 1
 1142.          inibs_si%dim_1%EX = ( max( 0, 1 + nsends_si ) )
 1142.          inibs_si%dim_1%SM = 1
 1142.          $_allo_P26(0) = 0x1000000000001L
 1142.          $_allo_P26(1) = loc( inibs_si )
 1142.          call __allocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
 1143.          $F_A63 = ( 1 + nsends_si )
 1143.          if ( nsends_si >= 0 ) then
 1143.             $I_L1143_196 = 0
 1143. !dir$ ivdep
 1143.             do
 1143.                (inibs_si%base_addr)(1 + $I_L1143_196, 0) = (ini%base_addr)($I_L1143_196, 0)
 1143.                $I_L1143_196 = 1 + $I_L1143_196
 1143.                if ( $I_L1143_196 >= $F_A63 ) exit
 1143.             enddo
 1143.          endif
 1144.          $F_A64 = nsends_si
 1144.          if ( nsends_si > 0 ) then
 1144.             $I_L1144_198 = 0
 1144. !dir$ ivdep
 1144.             do
 1144.                (mysends_si%base_addr)(1 + $I_L1144_198, 0) = (sends%base_addr)(1 + $I_L1144_198, 0)
 1144.                $I_L1144_198 = 1 + $I_L1144_198
 1144.                if ( $I_L1144_198 >= $F_A64 ) exit
 1144.             enddo
 1144.          endif
 1146.          $_allo_P27(0) = 0x1000000000001L
 1146.          $_allo_P27(1) = loc( ini )
 1146.          call __deallocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
 1146.          ini%header%assoc = 0
 1147.          $_allo_P28(0) = 0x1000000000001L
 1147.          $_allo_P28(1) = loc( sends )
 1147.          call __deallocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
 1147.          sends%header%assoc = 0
  823.          $_allo_P29(0) = 0x2000000000001L
  823.          $_allo_P29(1) = loc( sends )
  823.          $_allo_P29(2) = loc( ini )
  823.          call _dealloc( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
  823.       endif
 1152.       return
 1152.       end
 1152.       
 1207.       
 1207.       subroutine dumpspecdecomp( maxnodes )
 1162.        _substr(t$399,1,20) = '**(DumpSpecDecomp)**'
 1162.        _substr(t$400,1,32) = ' local sizes of m, mn and mnExt:'
 1162.       call msgdump(  _substr(t$399,1,20),  _substr(t$400,1,32) )
 1163.        _substr(line,1,256) = ' myMMax=    ; myMNMax=        ; myMNExtMax=        '
 1164.       _fwrite( _clist( 0, 0, 3,  _substr(line,9,4), Null_Arg, Null_Arg, t$69,  _substr(t$68,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mymmax, 0x2000200000000L ) ) )
 1165.       _fwrite( _clist( 0, 0, 3,  _substr(line,23,8), Null_Arg, Null_Arg, t$71,  _substr(t$70,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mymnmax, 0x2000200000000L ) ) )
 1166.       _fwrite( _clist( 0, 0, 3,  _substr(line,44,8), Null_Arg, Null_Arg, t$73,  _substr(t$72,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mymnextmax, 0x2000200000000L ) ) )
 1167.        _substr(t$401,1,20) = '**(DumpSpecDecomp)**'
 1167.       call msgdump(  _substr(t$401,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1169.        _substr(t$402,1,20) = '**(DumpSpecDecomp)**'
 1169.        _substr(t$403,1,32) = ' mapping of local m to global m:'
 1169.       call msgdump(  _substr(t$402,1,20),  _substr(t$403,1,32) )
 1170.       if ( mymmax > 0 ) then
 1170.          $t_S1 = ( 9 + mymmax ) / 10
 1170.          $I_L1170_30 = 0
 1170.          do
 1170.             mstart = ( 1 + 10 * $I_L1170_30 )
 1171.             mend = min( mymmax, ( 10 + 10 * $I_L1170_30 ) )
 1172.              _substr(line,1,256) = ' lm2m(    :    )='
 1173.             _fwrite( _clist( 0, 0, 3,  _substr(line,7,4), Null_Arg, Null_Arg, t$75,  _substr(t$74,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mstart, 0x2000200000000L ) ) )
 1174.             _fwrite( _clist( 0, 0, 3,  _substr(line,12,4), Null_Arg, Null_Arg, t$77,  _substr(t$76,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mend, 0x2000200000000L ) ) )
 1175.             $t_S0 = min( mymmax, ( 10 + 10 * $I_L1170_30 ) )
 1175.             if ( ( -1 + min( mymmax, ( 10 + 10 * $I_L1170_30 ) ) + -10 * $I_L1170_30 ) >= 0 ) then
 1175.                $I_L1175_24 = 0
 1175.                do
 1177.                   if ( ( ( 1 + $I_L1175_24 + 10 * $I_L1170_30 ) < lm2m%dim_1%LB .or. ( 1 + $I_L1175_24 + 10 * $I_L1170_30 ) > -1 + lm2m%dim_1%LB + lm2m%dim_1%EX ) /= .false. ) then
 1177.                       _substr(t$412,1,10) = 'Sizes.f90'
 1177.                       _substr(t$413,1,5) = 'LM2M'
 1177.                      t$414 = lm2m%dim_1%LB
 1177.                      t$415 = -1 + lm2m%dim_1%LB + lm2m%dim_1%EX
 1177.                      t$416 = 1 + $I_L1175_24 + 10 * $I_L1170_30
 1177.                      call _bounds_error(  _substr(t$412,1,10), 1177,  _substr(t$413,1,5), 1, t$414, t$415, t$416, t$411 )
 1177.                   endif
 1177.                   $IOitem_O0 = (lm2m%base_addr)(1 + $I_L1175_24 + 10 * $I_L1170_30, 0)
 1177.                   _fwrite( _clist( 0, 0, 3,  _substr(line,( 18 + 5 * $I_L1175_24 ),5), Null_Arg, Null_Arg, t$79,  _substr(t$78,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O0, 0x2000200000000L ) ) )
 1178.                   $I_L1175_24 = 1 + $I_L1175_24
 1178.                   if ( $I_L1175_24 >= $t_S0 + -10 * $I_L1170_30 ) exit
 1178.                enddo
 1178.             endif
 1179.              _substr(t$417,1,20) = '**(DumpSpecDecomp)**'
 1179.             call msgdump(  _substr(t$417,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1180.             $I_L1170_30 = 1 + $I_L1170_30
 1180.             if ( $I_L1170_30 >= $t_S1 ) exit
 1180.          enddo
 1180.       endif
 1182.        _substr(t$418,1,20) = '**(DumpSpecDecomp)**'
 1182.        _substr(t$419,1,25) = ' how many ms per process:'
 1182.       call msgdump(  _substr(t$418,1,20),  _substr(t$419,1,25) )
 1183.       if ( maxnodes > 0 ) then
 1183.          $t_S2 = ( 9 + maxnodes ) / 10
 1183.          $I_L1183_32 = 0
 1183.          do
 1183.             pestart = ( 10 * $I_L1183_32 )
 1184.             peend = min( ( 9 + 10 * $I_L1183_32 ), -1 + maxnodes )
 1185.              _substr(line,1,256) = ' msPerProc(    :    )='
 1186.             _fwrite( _clist( 0, 0, 3,  _substr(line,12,4), Null_Arg, Null_Arg, t$81,  _substr(t$80,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( pestart, 0x2000200000000L ) ) )
 1187.             _fwrite( _clist( 0, 0, 3,  _substr(line,17,4), Null_Arg, Null_Arg, t$83,  _substr(t$82,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( peend, 0x2000200000000L ) ) )
 1188.             if ( ( min( ( 9 + 10 * $I_L1183_32 ), -1 + maxnodes ) + -10 * $I_L1183_32 ) >= 0 ) then
 1188.                $I_L1188_26 = 0
 1188.                do
 1190.                   if ( ( ( $I_L1188_26 + 10 * $I_L1183_32 ) < msperproc%dim_1%LB .or. ( $I_L1188_26 + 10 * $I_L1183_32 ) > -1 + msperproc%dim_1%LB + msperproc%dim_1%EX ) /= .false. ) then
 1190.                       _substr(t$428,1,10) = 'Sizes.f90'
 1190.                       _substr(t$429,1,10) = 'MSPERPROC'
 1190.                      t$414 = msperproc%dim_1%LB
 1190.                      t$415 = -1 + msperproc%dim_1%LB + msperproc%dim_1%EX
 1190.                      t$416 = $I_L1188_26 + 10 * $I_L1183_32
 1190.                      call _bounds_error(  _substr(t$428,1,10), 1190,  _substr(t$429,1,10), 1, t$414, t$415, t$416, t$427 )
 1190.                   endif
 1190.                   $IOitem_O1 = (msperproc%base_addr)($I_L1188_26 + 10 * $I_L1183_32, 0)
 1190.                   _fwrite( _clist( 0, 0, 3,  _substr(line,( 23 + 5 * $I_L1188_26 ),5), Null_Arg, Null_Arg, t$85,  _substr(t$84,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O1, 0x2000200000000L ) ) )
 1191.                   $I_L1188_26 = 1 + $I_L1188_26
 1191.                   if ( $I_L1188_26 >= 1 + min( ( 9 + 10 * $I_L1183_32 ), -1 + maxnodes ) + -10 * $I_L1183_32 ) exit
 1191.                enddo
 1191.             endif
 1192.              _substr(t$430,1,20) = '**(DumpSpecDecomp)**'
 1192.             call msgdump(  _substr(t$430,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1193.             $I_L1183_32 = 1 + $I_L1183_32
 1193.             if ( $I_L1183_32 >= $t_S2 ) exit
 1193.          enddo
 1193.       endif
 1195.        _substr(t$431,1,20) = '**(DumpSpecDecomp)**'
 1195.        _substr(t$432,1,23) = ' which node has each m:'
 1195.       call msgdump(  _substr(t$431,1,20),  _substr(t$432,1,23) )
 1196.       if ( mmax > 0 ) then
 1196.          $t_S4 = ( 9 + mmax ) / 10
 1196.          $I_L1196_34 = 0
 1196.          do
 1196.             mstart = ( 1 + 10 * $I_L1196_34 )
 1197.             mend = min( mmax, ( 10 + 10 * $I_L1196_34 ) )
 1198.              _substr(line,1,256) = ' nodeHasM(    :    )='
 1199.             _fwrite( _clist( 0, 0, 3,  _substr(line,11,4), Null_Arg, Null_Arg, t$87,  _substr(t$86,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mstart, 0x2000200000000L ) ) )
 1200.             _fwrite( _clist( 0, 0, 3,  _substr(line,16,4), Null_Arg, Null_Arg, t$89,  _substr(t$88,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mend, 0x2000200000000L ) ) )
 1201.             $t_S3 = min( mmax, ( 10 + 10 * $I_L1196_34 ) )
 1201.             if ( ( -1 + min( mmax, ( 10 + 10 * $I_L1196_34 ) ) + -10 * $I_L1196_34 ) >= 0 ) then
 1201.                $I_L1201_28 = 0
 1201.                do
 1203.                   if ( ( ( 1 + $I_L1201_28 + 10 * $I_L1196_34 ) < nodehasm%dim_1%LB .or. ( 1 + $I_L1201_28 + 10 * $I_L1196_34 ) > -1 + nodehasm%dim_1%LB + nodehasm%dim_1%EX ) /= .false. ) then
 1203.                       _substr(t$441,1,10) = 'Sizes.f90'
 1203.                       _substr(t$442,1,9) = 'NODEHASM'
 1203.                      t$414 = nodehasm%dim_1%LB
 1203.                      t$415 = -1 + nodehasm%dim_1%LB + nodehasm%dim_1%EX
 1203.                      t$416 = 1 + $I_L1201_28 + 10 * $I_L1196_34
 1203.                      call _bounds_error(  _substr(t$441,1,10), 1203,  _substr(t$442,1,9), 1, t$414, t$415, t$416, t$440 )
 1203.                   endif
 1203.                   if ( ( mygroup_four < nodehasm%dim_2%LB .or. mygroup_four > -1 + nodehasm%dim_2%LB + nodehasm%dim_2%EX ) /= .false. ) then
 1203.                       _substr(t$444,1,10) = 'Sizes.f90'
 1203.                       _substr(t$445,1,9) = 'NODEHASM'
 1203.                      t$446 = nodehasm%dim_2%LB
 1203.                      t$447 = -1 + nodehasm%dim_2%LB + nodehasm%dim_2%EX
 1203.                      t$448 = mygroup_four
 1203.                      call _bounds_error(  _substr(t$444,1,10), 1203,  _substr(t$445,1,9), 2, t$446, t$447, t$448, t$443 )
 1203.                   endif
 1203.                   $IOitem_O2 = (nodehasm%base_addr)(1 + $I_L1201_28 + 10 * $I_L1196_34, mygroup_four, 0)
 1203.                   _fwrite( _clist( 0, 0, 3,  _substr(line,( 22 + 5 * $I_L1201_28 ),5), Null_Arg, Null_Arg, t$91,  _substr(t$90,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O2, 0x2000200000000L ) ) )
 1204.                   $I_L1201_28 = 1 + $I_L1201_28
 1204.                   if ( $I_L1201_28 >= $t_S3 + -10 * $I_L1196_34 ) exit
 1204.                enddo
 1204.             endif
 1205.              _substr(t$449,1,20) = '**(DumpSpecDecomp)**'
 1205.             call msgdump(  _substr(t$449,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1206.             $I_L1196_34 = 1 + $I_L1196_34
 1206.             if ( $I_L1196_34 >= $t_S4 ) exit
 1206.          enddo
 1206.       endif
 1207.       return
 1207.       end
 1207.       
 1274.       
 1274.       subroutine threaddecomp( firstind, lastind, minind, maxind, msg )
 1214.       t$114 = _len( msg )
 1235.       $inparallel_S0 = omp_in_parallel
 1236.       if ( $inparallel_S0 /= .false. ) then
 1237.          $ntrd_S1 = omp_get_num_threads
 1238.          $itrd_S3 = omp_get_thread_num
 1240.          $chunk_S2 = ( 1 + lastind + -firstind ) / $ntrd_S1
 1242.          if ( $itrd_S3 < 1 + lastind + -firstind + -( $ntrd_S1 * $chunk_S2 ) ) then
 1243.             minind = firstind + $itrd_S3 + $chunk_S2 * $itrd_S3
 1244.             maxind = firstind + $chunk_S2 + $itrd_S3 + $chunk_S2 * $itrd_S3
 1244.          else
 1246.             minind = 1 + lastind + -( $ntrd_S1 * $chunk_S2 ) + $chunk_S2 * $itrd_S3
 1247.             maxind = lastind + $chunk_S2 + -( $ntrd_S1 * $chunk_S2 ) + $chunk_S2 * $itrd_S3
 1247.          endif
 1247.       else
 1250.          minind = firstind
 1251.          maxind = lastind
 1251.       endif
 1274.       return
 1274.       end
 1274.       
 1277.       
 1277.       subroutine threaddecompms( m, myms, nms )
 1277.       t$96 = m
 1279.       t$115 = _zla( 0, m )
 1292.       $inparallel_S0 = omp_in_parallel
 1293.       if ( $inparallel_S0 /= .false. ) then
 1294.          $ntrd_S1 = omp_get_num_threads
 1295.          $t_S2 = omp_get_thread_num
 1296.          nms = 0
 1297.          $i_S3 = 1
 1298.          $j_S5 = 1
 1299.          if ( m > 0 ) then
 1299.             $I_L1299_14 = 0
 1299. !dir$ unroll 4
 1299.             do
 1300.                if ( $i_S3 + -$t_S2 == 1 ) then
 1301.                   nms = 1 + nms
 1302.                   myms(nms) = ( 1 + $I_L1299_14 )
 1302.                endif
 1304.                $i_S3 = $i_S3 + $j_S5
 1305.                if ( $ntrd_S1 + -$i_S3 == -1 ) then
 1306.                   $j_S5 = -1
 1307.                   $i_S3 = $ntrd_S1
 1307.                endif
 1309.                if ( $i_S3 == 0 ) then
 1310.                   $j_S5 = 1
 1311.                   $i_S3 = 1
 1311.                endif
 1313.                $I_L1299_14 = 1 + $I_L1299_14
 1312.                if ( $I_L1299_14 >= m ) exit
 1312.             enddo
 1312.          endif
 1312.       else
 1315.          if ( m > 0 ) then
 1315.             $I_L1315_12 = 0
 1315. !dir$ ivdep
 1315.             do
 1316.                myms(1 + $I_L1315_12) = ( 1 + $I_L1315_12 )
 1317.                $I_L1315_12 = 1 + $I_L1315_12
 1315.                if ( $I_L1315_12 >= m ) exit
 1315.             enddo
 1315.          endif
 1318.          nms = m
 1318.       endif
 1321.       return
 1321.       end
 1321.       
 1324.       
 1324.       subroutine initversizes( si_in, sl_in, del_in )
 1324.       si_in%dim_1%LB = 1
 1324.       sl_in%dim_1%LB = 1
 1324.       del_in%dim_1%LB = 1
 1335.       if ( kmax + -_zla( 0, sl_in%dim_1%EX ) /= 0 ) then
 1335.           _substr(t$464,1,48) = ' Error in InitVerSizes: kMaxsl=SIZE(sl) /= kMax '
 1335.          call _stop(  _substr(t$464,1,48) )
 1335.       else
 1336.          del%header%a_contig = 1
 1336.          del%dim_1%LB = 1
 1336.          del%dim_1%EX = _zla( 0, kmax )
 1336.          del%dim_1%SM = 1
 1336.          $_allo_P0(0) = 0x1000000000001L
 1336.          $_allo_P0(1) = loc( del )
 1336.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1337.          delcl%header%a_contig = 1
 1337.          delcl%dim_1%LB = 1
 1337.          delcl%dim_1%EX = _zla( 0, ( -1 + kmax ) )
 1337.          delcl%dim_1%SM = 1
 1337.          $_allo_P1(0) = 0x1000000000001L
 1337.          $_allo_P1(1) = loc( delcl )
 1337.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1338.          rdel2%header%a_contig = 1
 1338.          rdel2%dim_1%LB = 1
 1338.          rdel2%dim_1%EX = _zla( 0, kmax )
 1338.          rdel2%dim_1%SM = 1
 1338.          $_allo_P2(0) = 0x1000000000001L
 1338.          $_allo_P2(1) = loc( rdel2 )
 1338.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1339.          ci%header%a_contig = 1
 1339.          ci%dim_1%LB = 1
 1339.          ci%dim_1%EX = _zla( 0, ( 1 + kmax ) )
 1339.          ci%dim_1%SM = 1
 1339.          $_allo_P3(0) = 0x1000000000001L
 1339.          $_allo_P3(1) = loc( ci )
 1339.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1340.          si%header%a_contig = 1
 1340.          si%dim_1%LB = 1
 1340.          si%dim_1%EX = _zla( 0, ( 1 + kmax ) )
 1340.          si%dim_1%SM = 1
 1340.          $_allo_P4(0) = 0x1000000000001L
 1340.          $_allo_P4(1) = loc( si )
 1340.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 1341.          sl%header%a_contig = 1
 1341.          sl%dim_1%LB = 1
 1341.          sl%dim_1%EX = _zla( 0, kmax )
 1341.          sl%dim_1%SM = 1
 1341.          $_allo_P5(0) = 0x1000000000001L
 1341.          $_allo_P5(1) = loc( sl )
 1341.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 1342.          cl%header%a_contig = 1
 1342.          cl%dim_1%LB = 1
 1342.          cl%dim_1%EX = _zla( 0, kmax )
 1342.          cl%dim_1%SM = 1
 1342.          $_allo_P6(0) = 0x1000000000001L
 1342.          $_allo_P6(1) = loc( cl )
 1342.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 1343.          rpi%header%a_contig = 1
 1343.          rpi%dim_1%LB = 1
 1343.          rpi%dim_1%EX = _zla( 0, ( -1 + kmax ) )
 1343.          rpi%dim_1%SM = 1
 1343.          $_allo_P7(0) = 0x1000000000001L
 1343.          $_allo_P7(1) = loc( rpi )
 1343.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 1345.          if ( kmax > 0 ) then
 1346.             $SC_si_in_I1 = si_in%dim_1%SM
 1346.             $SC_si_in_I0 = si_in%dim_1%EX
 1345.             $I_L1345_40 = 0
 1345. !dir$ ivdep
 1345.             do
 1346.                (del%base_addr)(1 + $I_L1345_40, 0) = (si_in%base_addr)(1 + $I_L1345_40, 0) + -(si_in%base_addr)(2 + $I_L1345_40, 0)
 1347.                $I_L1345_40 = 1 + $I_L1345_40
 1345.                if ( $I_L1345_40 >= kmax ) exit
 1345.             enddo
 1345.          endif
 1348.          $F_A33 = _zla( 0, kmax )
 1348.          if ( _zla( 0, kmax ) > 0 ) then
 1348.             $SC_del_in_I5 = del_in%dim_1%SM
 1348.             $SC_del_in_I4 = del_in%dim_1%EX
 1348.             $I_L1348_50 = 0
 1348. !dir$ ivdep
 1348.             do
 1348.                (del_in%base_addr)(1 + $I_L1348_50, 0) = (del%base_addr)(1 + $I_L1348_50, 0)
 1348.                $I_L1348_50 = 1 + $I_L1348_50
 1348.                if ( $I_L1348_50 >= $F_A33 ) exit
 1348.             enddo
 1348.          endif
 1349.          $F_A34 = _zla( 0, kmax )
 1349.          if ( _zla( 0, kmax ) > 0 ) then
 1349.             $I_L1349_52 = 0
 1349. !dir$ ivdep
 1349.             do
 1349.                (rdel2%base_addr)(1 + $I_L1349_52, 0) = ( 5.0e-1 * 1.0/(del%base_addr)(1 + $I_L1349_52, 0) )
 1349.                $I_L1349_52 = 1 + $I_L1349_52
 1349.                if ( $I_L1349_52 >= $F_A34 ) exit
 1349.             enddo
 1349.          endif
 1354.          (ci%base_addr)(1, 0) = 0.0
 1355.          if ( -1 + kmax > 0 ) then
 1355.             $ci_WR0_R0 = 0.0
 1355.             $I_L1355_42 = 0
 1355. !dir$ unroll 4
 1355.             do
 1356.                $ci_WR0_R0 = $ci_WR0_R0 + (del%base_addr)(1 + $I_L1355_42, 0)
 1356.                (ci%base_addr)(2 + $I_L1355_42, 0) = $ci_WR0_R0
 1357.                $I_L1355_42 = 1 + $I_L1355_42
 1355.                if ( $I_L1355_42 >= -1 + kmax ) exit
 1355.             enddo
 1355.          endif
 1358.          (ci%base_addr)(1 + kmax, 0) = 1.0
 1360.          if ( kmax >= 0 ) then
 1360.             $I_L1360_44 = 0
 1360. !dir$ ivdep
 1360.             do
 1361.                (si%base_addr)(1 + $I_L1360_44, 0) = 1.0 + -(ci%base_addr)(1 + $I_L1360_44, 0)
 1362.                $I_L1360_44 = 1 + $I_L1360_44
 1360.                if ( $I_L1360_44 >= 1 + kmax ) exit
 1360.             enddo
 1360.          endif
 1364.          if ( kmax > 0 ) then
 1375.             if ( 0 < -1 + kmax ) then
 1364.                $I_L1364_46 = 0
 1364. !dir$ ivdep
 1364.                do
 1365.                   $sirk_S5 = _expn( 1.2857356161656381 * log( (si%base_addr)(1 + $I_L1364_46, 0) ) )
 1367.                   $sirk1_S4 = _expn( 1.2857356161656381 * log( (si%base_addr)(2 + $I_L1364_46, 0) ) )
 1372.                   $dif_S6 = ( ( $sirk_S5 + -$sirk1_S4 ) * 1.0/( 1.2857356161656381 * ( (si%base_addr)(1 + $I_L1364_46, 0) + -(si%base_addr)(2 + $I_L1364_46, 0) ) ) )
 1373.                   $sl_WR0_R1 = _expn( 3.4997387214770943 * log( $dif_S6 ) )
 1373.                   (sl%base_addr)(1 + $I_L1364_46, 0) = $sl_WR0_R1
 1374.                   (cl%base_addr)(1 + $I_L1364_46, 0) = 1.0 + -$sl_WR0_R1
 1375.                   $I_L1364_46 = 1 + $I_L1364_46
 1370.                   if ( $I_L1364_46 >= -1 + kmax ) exit
 1370.                enddo
 1370.             endif
 1365.             $sirk_S5 = _expn( 1.2857356161656381 * log( (si%base_addr)(kmax, 0) ) )
 1372.             $dif_S6 = ( $sirk_S5 * 1.0/( 1.2857356161656381 * ( (si%base_addr)(kmax, 0) + -(si%base_addr)(1 + kmax, 0) ) ) )
 1373.             (sl%base_addr)(kmax, 0) = _expn( 3.4997387214770943 * log( $dif_S6 ) )
 1374.             (cl%base_addr)(kmax, 0) = 1.0 + -(sl%base_addr)(kmax, 0)
 1374.          endif
 1376.          if ( -1 + kmax > 0 ) then
 1376.             $I_L1376_48 = 0
 1376. !dir$ ivdep
 1376.             do
 1377.                (delcl%base_addr)(1 + $I_L1376_48, 0) = (cl%base_addr)(2 + $I_L1376_48, 0) + -(cl%base_addr)(1 + $I_L1376_48, 0)
 1383.                (rpi%base_addr)(1 + $I_L1376_48, 0) = _expn( 2.8573561616563808e-1 * log( ( (sl%base_addr)(2 + $I_L1376_48, 0) * 1.0/(sl%base_addr)(1 + $I_L1376_48, 0) ) ) )
 1378.                $I_L1376_48 = 1 + $I_L1376_48
 1376.                if ( $I_L1376_48 >= -1 + kmax ) exit
 1376.             enddo
 1376.          endif
 1376.       endif
 1386.       return
 1386.       end
 1386.       
 1405.       
 1405.       subroutine griddecomposition( ibmax, jbmax, jbmax_ext, nproc, myid, vmax_est )
 1407.       firstlatingroup = $_StaticDV_P4
 1407.       firstlatingroup%base_addr = pointer to array[1] of integer( 0 )
 1407.       firstlatingroup%header%el_len = 32
 1407.       firstlatingroup%header%assoc = 0
 1407.       firstlatingroup%header%ptr_alloc = 0
 1407.       firstlatingroup%header%p_or_a = 2
 1407.       firstlatingroup%header%a_contig = 1
 1407.       firstlatingroup%header%n_dim = 1
 1407.       firstlatingroup%header%orig_base = 0
 1407.       firstlatingroup%header%orig_size = 0
 1407.       firstlatingroup%header%n_codim = 0
 1407.       firstlatingroup%header%dv_versn = 2
 1407.       firstlatingroup%header%dv_smunit = 32
 1407.       firstlatingroup%header%d_type = 0
 1407.       firstlatingroup%header%n_params = 0
 1407.       firstlatingroup%header%d_type_idx = 10
 1407.       firstlatingroup%dim_1%LB = 1
 1407.       firstlatingroup%dim_1%EX = 0
 1407.       firstlatingroup%dim_1%SM = 1
 1411.       firstloningroup = $_StaticDV_P5
 1411.       firstloningroup%base_addr = pointer to array[1] of integer( 0 )
 1411.       firstloningroup%header%el_len = 32
 1411.       firstloningroup%header%assoc = 0
 1411.       firstloningroup%header%ptr_alloc = 0
 1411.       firstloningroup%header%p_or_a = 2
 1411.       firstloningroup%header%a_contig = 1
 1411.       firstloningroup%header%n_dim = 1
 1411.       firstloningroup%header%orig_base = 0
 1411.       firstloningroup%header%orig_size = 0
 1411.       firstloningroup%header%n_codim = 0
 1411.       firstloningroup%header%dv_versn = 2
 1411.       firstloningroup%header%dv_smunit = 32
 1411.       firstloningroup%header%d_type = 0
 1411.       firstloningroup%header%n_params = 0
 1411.       firstloningroup%header%d_type_idx = 10
 1411.       firstloningroup%dim_1%LB = 1
 1411.       firstloningroup%dim_1%EX = 0
 1411.       firstloningroup%dim_1%SM = 1
 1402.       iaux = $_StaticDV_P6
 1402.       iaux%base_addr = pointer to array[1] of array[1] of integer( 0 )
 1402.       iaux%header%el_len = 32
 1402.       iaux%header%assoc = 0
 1402.       iaux%header%ptr_alloc = 0
 1402.       iaux%header%p_or_a = 2
 1402.       iaux%header%a_contig = 1
 1402.       iaux%header%n_dim = 2
 1402.       iaux%header%orig_base = 0
 1402.       iaux%header%orig_size = 0
 1402.       iaux%header%n_codim = 0
 1402.       iaux%header%dv_versn = 2
 1402.       iaux%header%dv_smunit = 32
 1402.       iaux%header%d_type = 0
 1402.       iaux%header%n_params = 0
 1402.       iaux%header%d_type_idx = 10
 1402.       iaux%dim_1%LB = 1
 1402.       iaux%dim_1%EX = 0
 1402.       iaux%dim_1%SM = 1
 1402.       iaux%dim_2%LB = 1
 1402.       iaux%dim_2%EX = 0
 1402.       iaux%dim_2%SM = 1
 1409.       iovlap = $_StaticDV_P7
 1409.       iovlap%base_addr = pointer to array[1] of integer( 0 )
 1409.       iovlap%header%el_len = 32
 1409.       iovlap%header%assoc = 0
 1409.       iovlap%header%ptr_alloc = 0
 1409.       iovlap%header%p_or_a = 2
 1409.       iovlap%header%a_contig = 1
 1409.       iovlap%header%n_dim = 1
 1409.       iovlap%header%orig_base = 0
 1409.       iovlap%header%orig_size = 0
 1409.       iovlap%header%n_codim = 0
 1409.       iovlap%header%dv_versn = 2
 1409.       iovlap%header%dv_smunit = 32
 1409.       iovlap%header%d_type = 0
 1409.       iovlap%header%n_params = 0
 1409.       iovlap%header%d_type_idx = 10
 1409.       iovlap%dim_1%LB = 1
 1409.       iovlap%dim_1%EX = 0
 1409.       iovlap%dim_1%SM = 1
 1406.       jbmaxingroup = $_StaticDV_P8
 1406.       jbmaxingroup%base_addr = pointer to array[1] of integer( 0 )
 1406.       jbmaxingroup%header%el_len = 32
 1406.       jbmaxingroup%header%assoc = 0
 1406.       jbmaxingroup%header%ptr_alloc = 0
 1406.       jbmaxingroup%header%p_or_a = 2
 1406.       jbmaxingroup%header%a_contig = 1
 1406.       jbmaxingroup%header%n_dim = 1
 1406.       jbmaxingroup%header%orig_base = 0
 1406.       jbmaxingroup%header%orig_size = 0
 1406.       jbmaxingroup%header%n_codim = 0
 1406.       jbmaxingroup%header%dv_versn = 2
 1406.       jbmaxingroup%header%dv_smunit = 32
 1406.       jbmaxingroup%header%d_type = 0
 1406.       jbmaxingroup%header%n_params = 0
 1406.       jbmaxingroup%header%d_type_idx = 10
 1406.       jbmaxingroup%dim_1%LB = 1
 1406.       jbmaxingroup%dim_1%EX = 0
 1406.       jbmaxingroup%dim_1%SM = 1
 1408.       lastlatingroup = $_StaticDV_P9
 1408.       lastlatingroup%base_addr = pointer to array[1] of integer( 0 )
 1408.       lastlatingroup%header%el_len = 32
 1408.       lastlatingroup%header%assoc = 0
 1408.       lastlatingroup%header%ptr_alloc = 0
 1408.       lastlatingroup%header%p_or_a = 2
 1408.       lastlatingroup%header%a_contig = 1
 1408.       lastlatingroup%header%n_dim = 1
 1408.       lastlatingroup%header%orig_base = 0
 1408.       lastlatingroup%header%orig_size = 0
 1408.       lastlatingroup%header%n_codim = 0
 1408.       lastlatingroup%header%dv_versn = 2
 1408.       lastlatingroup%header%dv_smunit = 32
 1408.       lastlatingroup%header%d_type = 0
 1408.       lastlatingroup%header%n_params = 0
 1408.       lastlatingroup%header%d_type_idx = 10
 1408.       lastlatingroup%dim_1%LB = 1
 1408.       lastlatingroup%dim_1%EX = 0
 1408.       lastlatingroup%dim_1%SM = 1
 1402.       lastloningroup = $_StaticDV_P10
 1402.       lastloningroup%base_addr = pointer to array[1] of integer( 0 )
 1402.       lastloningroup%header%el_len = 32
 1402.       lastloningroup%header%assoc = 0
 1402.       lastloningroup%header%ptr_alloc = 0
 1402.       lastloningroup%header%p_or_a = 2
 1402.       lastloningroup%header%a_contig = 1
 1402.       lastloningroup%header%n_dim = 1
 1402.       lastloningroup%header%orig_base = 0
 1402.       lastloningroup%header%orig_size = 0
 1402.       lastloningroup%header%n_codim = 0
 1402.       lastloningroup%header%dv_versn = 2
 1402.       lastloningroup%header%dv_smunit = 32
 1402.       lastloningroup%header%d_type = 0
 1402.       lastloningroup%header%n_params = 0
 1402.       lastloningroup%header%d_type_idx = 10
 1402.       lastloningroup%dim_1%LB = 1
 1402.       lastloningroup%dim_1%EX = 0
 1402.       lastloningroup%dim_1%SM = 1
 1404.       lon = $_StaticDV_P11
 1404.       lon%base_addr = pointer to array[1] of integer( 0 )
 1404.       lon%header%el_len = 32
 1404.       lon%header%assoc = 0
 1404.       lon%header%ptr_alloc = 0
 1404.       lon%header%p_or_a = 2
 1404.       lon%header%a_contig = 1
 1404.       lon%header%n_dim = 1
 1404.       lon%header%orig_base = 0
 1404.       lon%header%orig_size = 0
 1404.       lon%header%n_codim = 0
 1404.       lon%header%dv_versn = 2
 1404.       lon%header%dv_smunit = 32
 1404.       lon%header%d_type = 0
 1404.       lon%header%n_params = 0
 1404.       lon%header%d_type_idx = 10
 1404.       lon%dim_1%LB = 1
 1404.       lon%dim_1%EX = 0
 1404.       lon%dim_1%SM = 1
 1403.       npointsingroup = $_StaticDV_P12
 1403.       npointsingroup%base_addr = pointer to array[1] of integer( 0 )
 1403.       npointsingroup%header%el_len = 32
 1403.       npointsingroup%header%assoc = 0
 1403.       npointsingroup%header%ptr_alloc = 0
 1403.       npointsingroup%header%p_or_a = 2
 1403.       npointsingroup%header%a_contig = 1
 1403.       npointsingroup%header%n_dim = 1
 1403.       npointsingroup%header%orig_base = 0
 1403.       npointsingroup%header%orig_size = 0
 1403.       npointsingroup%header%n_codim = 0
 1403.       npointsingroup%header%dv_versn = 2
 1403.       npointsingroup%header%dv_smunit = 32
 1403.       npointsingroup%header%d_type = 0
 1403.       npointsingroup%header%n_params = 0
 1403.       npointsingroup%header%d_type_idx = 10
 1403.       npointsingroup%dim_1%LB = 1
 1403.       npointsingroup%dim_1%EX = 0
 1403.       npointsingroup%dim_1%SM = 1
 1410.       nprocsingroup = $_StaticDV_P13
 1410.       nprocsingroup%base_addr = pointer to array[1] of integer( 0 )
 1410.       nprocsingroup%header%el_len = 32
 1410.       nprocsingroup%header%assoc = 0
 1410.       nprocsingroup%header%ptr_alloc = 0
 1410.       nprocsingroup%header%p_or_a = 2
 1410.       nprocsingroup%header%a_contig = 1
 1410.       nprocsingroup%header%n_dim = 1
 1410.       nprocsingroup%header%orig_base = 0
 1410.       nprocsingroup%header%orig_size = 0
 1410.       nprocsingroup%header%n_codim = 0
 1410.       nprocsingroup%header%dv_versn = 2
 1410.       nprocsingroup%header%dv_smunit = 32
 1410.       nprocsingroup%header%d_type = 0
 1410.       nprocsingroup%header%n_params = 0
 1410.       nprocsingroup%header%d_type_idx = 10
 1410.       nprocsingroup%dim_1%LB = 1
 1410.       nprocsingroup%dim_1%EX = 0
 1410.       nprocsingroup%dim_1%SM = 1
 1389.       procingroup = $_StaticDV_P14
 1389.       procingroup%base_addr = pointer to array[1] of integer( 0 )
 1389.       procingroup%header%el_len = 32
 1389.       procingroup%header%assoc = 0
 1389.       procingroup%header%ptr_alloc = 0
 1389.       procingroup%header%p_or_a = 2
 1389.       procingroup%header%a_contig = 1
 1389.       procingroup%header%n_dim = 1
 1389.       procingroup%header%orig_base = 0
 1389.       procingroup%header%orig_size = 0
 1389.       procingroup%header%n_codim = 0
 1389.       procingroup%header%dv_versn = 2
 1389.       procingroup%header%dv_smunit = 32
 1389.       procingroup%header%d_type = 0
 1389.       procingroup%header%n_params = 0
 1389.       procingroup%header%d_type_idx = 10
 1389.       procingroup%dim_1%LB = 1
 1389.       procingroup%dim_1%EX = 0
 1389.       procingroup%dim_1%SM = 1
 1415.       if ( nproc <= 3 ) then
 1416.          $ngroups_S2 = nproc
 1417.          $npperg_S0 = 1
 1418.          $nrest_S3 = 0
 1419.          $iex_S1 = 0
 1420.       else if ( nproc <= 5 ) then
 1422.          $ngroups_S2 = 1
 1423.          $npperg_S0 = -1 + nproc
 1424.          $nrest_S3 = 0
 1425.          $iex_S1 = 1
 1425.       else
 1429.          $ngroups_S2 = cvmg( int( _sqrt( real( nproc / 2 ) ) ), 1 + int( _sqrt( real( nproc / 2 ) ) ), int( _sqrt( real( nproc / 2 ) ) ) + int( _sqrt( real( nproc / 2 ) ) ) * int( _sqrt( real( nproc / 2 ) ) ) >= nproc / 2 )
 1434.          $npperg_S0 = nproc / cvmg( int( _sqrt( real( nproc / 2 ) ) ), 1 + int( _sqrt( real( nproc / 2 ) ) ), int( _sqrt( real( nproc / 2 ) ) ) + int( _sqrt( real( nproc / 2 ) ) ) * int( _sqrt( real( nproc / 2 ) ) ) >= nproc / 2 )
 1435.          $nrest_S3 = nproc + -( $npperg_S0 * cvmg( int( _sqrt( real( nproc / 2 ) ) ), 1 + int( _sqrt( real( nproc / 2 ) ) ), int( _sqrt( real( nproc / 2 ) ) ) + int( _sqrt( real( nproc / 2 ) ) ) * int( _sqrt( real( nproc / 2 ) ) ) >= nproc / 2 ) )
 1436.          $iex_S1 = cvmg( 2, 1, $npperg_S0 > 8 )
 1436.       endif
 1443.       $hj_S26 = ( 3.1415926535897931 * 1.0/jmax )
 1444.       gridmap%header%a_contig = 1
 1444.       gridmap%dim_1%LB = 1
 1444.       gridmap%dim_1%EX = _zla( 0, imax )
 1444.       gridmap%dim_1%SM = 1
 1444.       gridmap%dim_2%LB = 1
 1444.       gridmap%dim_2%EX = _zla( 0, jmax )
 1444.       gridmap%dim_2%SM = _zla( 0, imax )
 1444.       $_allo_P15(0) = 0x1000000000001L
 1444.       $_allo_P15(1) = loc( gridmap )
 1444.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 1445.       procingroup%header%a_contig = 1
 1445.       procingroup%dim_1%LB = 0
 1445.       procingroup%dim_1%EX = _zla( 0, nproc )
 1445.       procingroup%dim_1%SM = 1
 1445.       $_allo_P16(0) = 0x1000000000001L
 1445.       $_allo_P16(1) = loc( procingroup )
 1445.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 1446.       nprocsingroup%header%a_contig = 1
 1446.       nprocsingroup%dim_1%LB = 1
 1446.       nprocsingroup%dim_1%EX = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1446.       nprocsingroup%dim_1%SM = 1
 1446.       $_allo_P17(0) = 0x1000000000001L
 1446.       $_allo_P17(1) = loc( nprocsingroup )
 1446.       call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
 1447.       (nprocsingroup%base_addr)(1, 0) = 1
 1448.       (nprocsingroup%base_addr)($ngroups_S2 + 2 * $iex_S1, 0) = 1
 1449.       if ( $iex_S1 == 2 ) then
 1451.          (nprocsingroup%base_addr)(2, 0) = 1 + int( _sqrt( real( $npperg_S0 ) ) )
 1452.          (nprocsingroup%base_addr)(3, 0) = -2 + $npperg_S0 + -( int( _sqrt( real( $npperg_S0 ) ) ) )
 1453.          (nprocsingroup%base_addr)(3 + $ngroups_S2, 0) = 1 + int( _sqrt( real( $npperg_S0 ) ) )
 1454.          (nprocsingroup%base_addr)(2 + $ngroups_S2, 0) = -2 + $npperg_S0 + -( int( _sqrt( real( $npperg_S0 ) ) ) )
 1455.       else if ( $iex_S1 == 1 ) then
 1457.          (nprocsingroup%base_addr)(2, 0) = -1 + $npperg_S0
 1458.          (nprocsingroup%base_addr)(1 + $ngroups_S2, 0) = -1 + $npperg_S0
 1458.       endif
 1461.       $F_A41 = ( -2 + $ngroups_S2 )
 1461.       if ( -2 + $ngroups_S2 > 0 ) then
 1461.          $I_L1461_257 = 0
 1461. !dir$ ivdep
 1461.          do
 1461.             (nprocsingroup%base_addr)(2 + $iex_S1 + $I_L1461_257, 0) = $npperg_S0
 1461.             $I_L1461_257 = 1 + $I_L1461_257
 1461.             if ( $I_L1461_257 >= $F_A41 ) exit
 1461.          enddo
 1461.       endif
 1462.       if ( $nrest_S3 > 0 ) then
 1462.          $I_L1462_229 = 0
 1462. !dir$ ivdep
 1462.          do
 1463.             (nprocsingroup%base_addr)(2 + $iex_S1 + $I_L1462_229, 0) = 1 + (nprocsingroup%base_addr)(2 + $iex_S1 + $I_L1462_229, 0)
 1464.             $I_L1462_229 = 1 + $I_L1462_229
 1462.             if ( $I_L1462_229 >= $nrest_S3 ) exit
 1462.          enddo
 1462.       endif
 1466.       $i_S7 = -1
 1467.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1468.          $SC_nprocsingroup_I0 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1467.          $I_L1467_351 = 0
 1467.          do
 1468.             $F_A42 = (nprocsingroup%base_addr)(1 + $I_L1467_351, 0)
 1468.             if ( (nprocsingroup%base_addr)(1 + $I_L1467_351, 0) > 0 ) then
 1468.                $I_L1468_259 = 0
 1468. !dir$ ivdep
 1468.                do
 1468.                   (procingroup%base_addr)(1 + $i_S7 + $I_L1468_259, 0) = ( 1 + $I_L1467_351 )
 1468.                   $I_L1468_259 = 1 + $I_L1468_259
 1468.                   if ( $I_L1468_259 >= $F_A42 ) exit
 1468.                enddo
 1468.             endif
 1469.             $i_S7 = $i_S7 + (nprocsingroup%base_addr)(1 + $I_L1467_351, 0)
 1470.             $I_L1467_351 = 1 + $I_L1467_351
 1467.             if ( $I_L1467_351 >= ( $ngroups_S2 + 2 * $iex_S1 ) ) exit
 1467.          enddo
 1467.       endif
 1471.       npointsingroup%header%a_contig = 1
 1471.       npointsingroup%dim_1%LB = 1
 1471.       npointsingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1471.       npointsingroup%dim_1%SM = 1
 1471.       $_allo_P18(0) = 0x1000000000001L
 1471.       $_allo_P18(1) = loc( npointsingroup )
 1471.       call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
 1472.       pointsinproc%header%a_contig = 1
 1472.       pointsinproc%dim_1%LB = 0
 1472.       pointsinproc%dim_1%EX = ( max( 0, nproc ) )
 1472.       pointsinproc%dim_1%SM = 1
 1472.       $_allo_P19(0) = 0x1000000000001L
 1472.       $_allo_P19(1) = loc( pointsinproc )
 1472.       call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
 1473.       firstlatingroup%header%a_contig = 1
 1473.       firstlatingroup%dim_1%LB = 1
 1473.       firstlatingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1473.       firstlatingroup%dim_1%SM = 1
 1473.       $_allo_P20(0) = 0x1000000000001L
 1473.       $_allo_P20(1) = loc( firstlatingroup )
 1473.       call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
 1474.       firstloningroup%header%a_contig = 1
 1474.       firstloningroup%dim_1%LB = 1
 1474.       firstloningroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1474.       firstloningroup%dim_1%SM = 1
 1474.       $_allo_P21(0) = 0x1000000000001L
 1474.       $_allo_P21(1) = loc( firstloningroup )
 1474.       call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
 1475.       lastlatingroup%header%a_contig = 1
 1475.       lastlatingroup%dim_1%LB = 1
 1475.       lastlatingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1475.       lastlatingroup%dim_1%SM = 1
 1475.       $_allo_P22(0) = 0x1000000000001L
 1475.       $_allo_P22(1) = loc( lastlatingroup )
 1475.       call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
 1476.       lastloningroup%header%a_contig = 1
 1476.       lastloningroup%dim_1%LB = 1
 1476.       lastloningroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1476.       lastloningroup%dim_1%SM = 1
 1476.       $_allo_P23(0) = 0x1000000000001L
 1476.       $_allo_P23(1) = loc( lastloningroup )
 1476.       call __allocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
 1477.       jbmaxingroup%header%a_contig = 1
 1477.       jbmaxingroup%dim_1%LB = 1
 1477.       jbmaxingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1477.       jbmaxingroup%dim_1%SM = 1
 1477.       $_allo_P24(0) = 0x1000000000001L
 1477.       $_allo_P24(1) = loc( jbmaxingroup )
 1477.       call __allocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
 1478.       $Reduc_A43 = 0
 1478.       $F_A45 = jmax
 1478.       if ( jmax > 0 ) then
 1478.          $SC_imaxperj_I21 = imaxperj%dim_1%EX
 1478.          $SC_imaxperj_I22 = imaxperj%dim_1%LB
 1478.          $I_L1478_261 = 0
 1478. !dir$ ivdep
 1478.          do
 1478.             $Reduc_A43 = $Reduc_A43 + (imaxperj%base_addr)(1 + $I_L1478_261, 0)
 1478.             $I_L1478_261 = 1 + $I_L1478_261
 1478.             if ( $I_L1478_261 >= $F_A45 ) exit
 1478.          enddo
 1478.       endif
 1479.       $ngpperproc_S9 = $Reduc_A43 / nproc
 1480.       $nrest_S11 = $Reduc_A43 + -( nproc * $ngpperproc_S9 )
 1481.       $F_A46 = ( $Reduc_A43 + -( nproc * $ngpperproc_S9 ) )
 1481.       if ( $Reduc_A43 + -( nproc * $ngpperproc_S9 ) > 0 ) then
 1481.          $I_L1481_263 = 0
 1481. !dir$ ivdep
 1481.          do
 1481.             (pointsinproc%base_addr)($I_L1481_263, 0) = 1 + $ngpperproc_S9
 1481.             $I_L1481_263 = 1 + $I_L1481_263
 1481.             if ( $I_L1481_263 >= $F_A46 ) exit
 1481.          enddo
 1481.       endif
 1482.       $F_A47 = ( nproc + -$Reduc_A43 + nproc * $ngpperproc_S9 )
 1482.       if ( nproc + -$Reduc_A43 + nproc * $ngpperproc_S9 > 0 ) then
 1482.          $I_L1482_265 = 0
 1482. !dir$ ivdep
 1482.          do
 1482.             (pointsinproc%base_addr)($Reduc_A43 + $I_L1482_265 + -( nproc * $ngpperproc_S9 ), 0) = $ngpperproc_S9
 1482.             $I_L1482_265 = 1 + $I_L1482_265
 1482.             if ( $I_L1482_265 >= $F_A47 ) exit
 1482.          enddo
 1482.       endif
 1483.       $lat_S13 = 1
 1484.       $usedinlat_S14 = 0
 1486.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1492.          $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1492.          $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1487.          $SC_nprocsingroup_I0 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1486.          $I_L1486_353 = 0
 1486.          do
 1487.             $next_S12 = min( $nrest_S11, (nprocsingroup%base_addr)(1 + $I_L1486_353, 0) )
 1488.             (npointsingroup%base_addr)(1 + $I_L1486_353, 0) = $next_S12 + $ngpperproc_S9 * (nprocsingroup%base_addr)(1 + $I_L1486_353, 0)
 1490.             (firstlatingroup%base_addr)(1 + $I_L1486_353, 0) = $lat_S13
 1491.             (firstloningroup%base_addr)(1 + $I_L1486_353, 0) = 1 + $usedinlat_S14
 1492.             $np_S15 = (imaxperj%base_addr)($lat_S13, 0) + -$usedinlat_S14
 1494.             $SC_npointsingroup_I17 = (npointsingroup%base_addr)(1 + $I_L1486_353, 0)
 1489.             $nrest_S11 = $nrest_S11 + -$next_S12
 1489.             do
 1494.                if ( $np_S15 >= $SC_npointsingroup_I17 ) goto 10
 1495.                $lat_S13 = 1 + $lat_S13
 1495.             enddo
 1495.    10       continue
 1498.             (lastlatingroup%base_addr)(1 + $I_L1486_353, 0) = $lat_S13
 1499.             $usedinlat_S14 = (imaxperj%base_addr)($lat_S13, 0) + $SC_npointsingroup_I17 + -$np_S15
 1500.             (lastloningroup%base_addr)(1 + $I_L1486_353, 0) = $usedinlat_S14
 1501.             if ( (imaxperj%base_addr)($lat_S13, 0) + -$usedinlat_S14 == 0 ) then
 1503.                $usedinlat_S14 = 0
 1502.                $lat_S13 = 1 + $lat_S13
 1502.             endif
 1505.             $I_L1486_353 = 1 + $I_L1486_353
 1504.             if ( $I_L1486_353 >= ( $ngroups_S2 + 2 * $iex_S1 ) ) exit
 1504.          enddo
 1504.       endif
 1506.       $F_A48 = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1506.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1506.          $I_L1506_267 = 0
 1506. !dir$ ivdep
 1506.          do
 1506.             (jbmaxingroup%base_addr)(1 + $I_L1506_267, 0) = 1 + (lastlatingroup%base_addr)(1 + $I_L1506_267, 0) + -(firstlatingroup%base_addr)(1 + $I_L1506_267, 0)
 1506.             $I_L1506_267 = 1 + $I_L1506_267
 1506.             if ( $I_L1506_267 >= $F_A48 ) exit
 1506.          enddo
 1506.       endif
 1507.       $Reduc_A49 = 0xffffffff80000001
 1507.       $F_A51 = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1507.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1507.          $I_L1507_269 = 0
 1507. !dir$ ivdep
 1507.          do
 1507.             $Reduc_A49 = max( $Reduc_A49, (jbmaxingroup%base_addr)(1 + $I_L1507_269, 0) )
 1507.             $I_L1507_269 = 1 + $I_L1507_269
 1507.             if ( $I_L1507_269 >= $F_A51 ) exit
 1507.          enddo
 1507.       endif
 1508.       if ( sl_twotime_scheme /= .false. ) then
 1509.          jovlap = int( 2.0 + 2.4985008994603237e-8 * ( imax * delt * vmax_est ) )
 1509.       else
 1511.          jovlap = int( 2.0 + 4.9970017989206473e-8 * ( imax * delt * vmax_est ) )
 1511.       endif
 1513.       if ( slagr == .false. ) then
 1513.          jovlap = 0
 1513.       endif
 1515.       mysendsgr%header%a_contig = 1
 1515.       mysendsgr%dim_1%LB = 1
 1515.       mysendsgr%dim_1%EX = 4
 1515.       mysendsgr%dim_1%SM = 1
 1515.       mysendsgr%dim_2%LB = 1
 1515.       mysendsgr%dim_2%EX = ( max( 0, 2 * jovlap * $npperg_S0 + 4 * $Reduc_A49 ) )
 1515.       mysendsgr%dim_2%SM = 4
 1515.       $_allo_P25(0) = 0x1000000000001L
 1515.       $_allo_P25(1) = loc( mysendsgr )
 1515.       call __allocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
 1516.       mysendspr%header%a_contig = 1
 1516.       mysendspr%dim_1%LB = 1
 1516.       mysendspr%dim_1%EX = 2
 1516.       mysendspr%dim_1%SM = 1
 1516.       mysendspr%dim_2%LB = 1
 1516.       mysendspr%dim_2%EX = ( max( 0, nproc ) )
 1516.       mysendspr%dim_2%SM = 2
 1516.       $_allo_P26(0) = 0x1000000000001L
 1516.       $_allo_P26(1) = loc( mysendspr )
 1516.       call __allocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
 1517.       myrecsgr%header%a_contig = 1
 1517.       myrecsgr%dim_1%LB = 1
 1517.       myrecsgr%dim_1%EX = 4
 1517.       myrecsgr%dim_1%SM = 1
 1517.       myrecsgr%dim_2%LB = 1
 1517.       myrecsgr%dim_2%EX = ( max( 0, 2 * jovlap * $npperg_S0 + 4 * $Reduc_A49 ) )
 1517.       myrecsgr%dim_2%SM = 4
 1517.       $_allo_P27(0) = 0x1000000000001L
 1517.       $_allo_P27(1) = loc( myrecsgr )
 1517.       call __allocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
 1518.       myrecspr%header%a_contig = 1
 1518.       myrecspr%dim_1%LB = 1
 1518.       myrecspr%dim_1%EX = 2
 1518.       myrecspr%dim_1%SM = 1
 1518.       myrecspr%dim_2%LB = 1
 1518.       myrecspr%dim_2%EX = ( max( 0, nproc ) )
 1518.       myrecspr%dim_2%SM = 2
 1518.       $_allo_P28(0) = 0x1000000000001L
 1518.       $_allo_P28(1) = loc( myrecspr )
 1518.       call __allocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
 1519.       firstlat%header%a_contig = 1
 1519.       firstlat%dim_1%LB = 0
 1519.       firstlat%dim_1%EX = ( max( 0, nproc ) )
 1519.       firstlat%dim_1%SM = 1
 1519.       $_allo_P29(0) = 0x1000000000001L
 1519.       $_allo_P29(1) = loc( firstlat )
 1519.       call __allocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
 1520.       firstlon%header%a_contig = 1
 1520.       firstlon%dim_1%LB = 1
 1520.       firstlon%dim_1%EX = ( max( 0, $Reduc_A49 ) )
 1520.       firstlon%dim_1%SM = 1
 1520.       firstlon%dim_2%LB = 0
 1520.       firstlon%dim_2%EX = ( max( 0, nproc ) )
 1520.       firstlon%dim_2%SM = ( max( 0, $Reduc_A49 ) )
 1520.       $_allo_P30(0) = 0x1000000000001L
 1520.       $_allo_P30(1) = loc( firstlon )
 1520.       call __allocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
 1521.       lastlat%header%a_contig = 1
 1521.       lastlat%dim_1%LB = 0
 1521.       lastlat%dim_1%EX = ( max( 0, nproc ) )
 1521.       lastlat%dim_1%SM = 1
 1521.       $_allo_P31(0) = 0x1000000000001L
 1521.       $_allo_P31(1) = loc( lastlat )
 1521.       call __allocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
 1522.       lastlon%header%a_contig = 1
 1522.       lastlon%dim_1%LB = 1
 1522.       lastlon%dim_1%EX = ( max( 0, $Reduc_A49 ) )
 1522.       lastlon%dim_1%SM = 1
 1522.       lastlon%dim_2%LB = 0
 1522.       lastlon%dim_2%EX = ( max( 0, nproc ) )
 1522.       lastlon%dim_2%SM = ( max( 0, $Reduc_A49 ) )
 1522.       $_allo_P32(0) = 0x1000000000001L
 1522.       $_allo_P32(1) = loc( lastlon )
 1522.       call __allocate( $_allo_P32, 0, 0, _fcd( 0, 0 ) )
 1523.       lon%header%a_contig = 1
 1523.       lon%dim_1%LB = 1
 1523.       lon%dim_1%EX = ( max( 0, $Reduc_A49 ) )
 1523.       lon%dim_1%SM = 1
 1523.       $_allo_P33(0) = 0x1000000000001L
 1523.       $_allo_P33(1) = loc( lon )
 1523.       call __allocate( $_allo_P33, 0, 0, _fcd( 0, 0 ) )
 1525.       $iproc_S18 = 0
 1526.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1533.          $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1533.          $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1531.          $SC_nprocsingroup_I0 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1526.          $I_L1526_389 = 0
 1526. !dir$ loop_info (automatic) cache_nt( nprocsingroup, firstloningroup )
 1526.          do
 1527.             (firstlon%base_addr)(1, $iproc_S18, 0) = (firstloningroup%base_addr)(1 + $I_L1526_389, 0)
 1528.             $F_A52 = ( -1 + (jbmaxingroup%base_addr)(1 + $I_L1526_389, 0) )
 1528.             if ( $F_A52 > 0 ) then
 1528.                $I_L1528_271 = 0
 1528. !dir$ ivdep
 1528.                do
 1528.                   (firstlon%base_addr)(2 + $I_L1528_271, $iproc_S18, 0) = 1
 1528.                   $I_L1528_271 = 1 + $I_L1528_271
 1528.                   if ( $I_L1528_271 >= $F_A52 ) exit
 1528.                enddo
 1528.             endif
 1529.             $F_A53 = (jbmaxingroup%base_addr)(1 + $I_L1526_389, 0)
 1529.             if ( (jbmaxingroup%base_addr)(1 + $I_L1526_389, 0) > 0 ) then
 1529.                $I_L1529_273 = 0
 1529. !dir$ ivdep
 1529.                do
 1529.                   (lastlon%base_addr)(1 + $I_L1529_273, $iproc_S18, 0) = 0
 1529.                   $I_L1529_273 = 1 + $I_L1529_273
 1529.                   if ( $I_L1529_273 >= $F_A53 ) exit
 1529.                enddo
 1529.             endif
 1530.             $F_A54 = (jbmaxingroup%base_addr)(1 + $I_L1526_389, 0)
 1530.             if ( (jbmaxingroup%base_addr)(1 + $I_L1526_389, 0) > 0 ) then
 1530.                $I_L1530_275 = 0
 1530. !dir$ ivdep
 1530.                do
 1530.                   (lon%base_addr)(1 + $I_L1530_275, 0) = (firstlon%base_addr)(1 + $I_L1530_275, $iproc_S18, 0)
 1530.                   $I_L1530_275 = 1 + $I_L1530_275
 1530.                   if ( $I_L1530_275 >= $F_A54 ) exit
 1530.                enddo
 1530.             endif
 1531.             $t_S19 = (nprocsingroup%base_addr)(1 + $I_L1526_389, 0)
 1531.             if ( $t_S19 > 0 ) then
 1533.                $SC_jbmaxingroup_I5 = (jbmaxingroup%base_addr)(1 + $I_L1526_389, 0)
 1531.                $I_L1531_381 = 0
 1531. !dir$ loop_info (automatic) cache_nt( pointsinproc )
 1531.                do
 1532.                   $t_S20 = (pointsinproc%base_addr)($iproc_S18 + $I_L1531_381, 0)
 1532.                   if ( $t_S20 > 0 ) then
 1533.                      $SC_lastlatingroup_I3 = (lastlatingroup%base_addr)(1 + $I_L1526_389, 0)
 1533.                      $SC_firstlatingroup_I4 = (firstlatingroup%base_addr)(1 + $I_L1526_389, 0)
 1533.                      if ( $SC_jbmaxingroup_I5 > 0 ) then
 1532.                         $I_L1532_355 = 0
 1532.                         do
 1533.                            $SC_MLoc_I18 = 0
 1533.                            $F_A57 = $SC_jbmaxingroup_I5
 1533.                            $Reduc_A58 = inf970017989206473e-8
 1533.                            $I_L1533_277 = 0
 1533. !dir$ ivdep
 1533.                            do
 1533.                               $A59 = ( 1.0/( real( (imaxperj%base_addr)($SC_firstlatingroup_I4 + $I_L1533_277, 0) ) ) * real( (lon%base_addr)(1 + $I_L1533_277, 0) ) )
 1533.                               if ( $A59 < $Reduc_A58 ) then
 1533.                                  $Reduc_A58 = $A59
 1533.                                  $SC_MLoc_I18 = 1 + $I_L1533_277
 1533.                               endif
 1533.                               $I_L1533_277 = 1 + $I_L1533_277
 1533.                               if ( $I_L1533_277 >= $F_A57 ) exit
 1533.                            enddo
 1536.                            (lastlon%base_addr)($SC_MLoc_I18, $iproc_S18 + $I_L1531_381, 0) = (lon%base_addr)($SC_MLoc_I18, 0)
 1537.                            (gridmap%base_addr)((lon%base_addr)($SC_MLoc_I18, 0), -1 + $SC_firstlatingroup_I4 + $SC_MLoc_I18, 0) = ( $iproc_S18 + $I_L1531_381 )
 1538.                            (lon%base_addr)($SC_MLoc_I18, 0) = 1 + (lon%base_addr)($SC_MLoc_I18, 0)
 1539.                            if ( $SC_MLoc_I18 + -$SC_jbmaxingroup_I5 == 0 ) then
 1539.                               if ( (lon%base_addr)($SC_MLoc_I18, 0) > (lastloningroup%base_addr)(1 + $I_L1526_389, 0) ) then
 1540.                                  (lon%base_addr)($SC_MLoc_I18, 0) = 1 + (imaxperj%base_addr)($SC_lastlatingroup_I3, 0)
 1540.                               endif
 1540.                            endif
 1541.                            $I_L1532_355 = 1 + $I_L1532_355
 1539.                            if ( $I_L1532_355 >= $t_S20 ) exit
 1539.                         enddo
 1539.                      else if ( $SC_jbmaxingroup_I5 == 0 ) then
 1532.                         $I_L1532_347 = 0
 1532. !dir$ unroll 4
 1532.                         do
 1536.                            (lastlon%base_addr)(0, $iproc_S18 + $I_L1531_381, 0) = (lon%base_addr)(0, 0)
 1537.                            (gridmap%base_addr)((lon%base_addr)(0, 0), -1 + $SC_firstlatingroup_I4, 0) = ( $iproc_S18 + $I_L1531_381 )
 1538.                            (lon%base_addr)(0, 0) = 1 + (lon%base_addr)(0, 0)
 1539.                            if ( (lon%base_addr)(0, 0) > (lastloningroup%base_addr)(1 + $I_L1526_389, 0) ) then
 1540.                               (lon%base_addr)(0, 0) = 1 + (imaxperj%base_addr)($SC_lastlatingroup_I3, 0)
 1540.                            endif
 1541.                            $I_L1532_347 = 1 + $I_L1532_347
 1539.                            if ( $I_L1532_347 >= $t_S20 ) exit
 1539.                         enddo
 1539.                      else
 1538.                         $N218 = (lon%base_addr)(0, 0)
 1532.                         $I_L1532_349 = 0
 1532. !dir$ ivdep
 1532.                         do
 1538.                            (lon%base_addr)(0, 0) = ( $N218 + $I_L1532_349 )
 1536.                            (lastlon%base_addr)(0, $iproc_S18 + $I_L1531_381, 0) = ( $N218 + $I_L1532_349 )
 1537.                            (gridmap%base_addr)($N218 + $I_L1532_349, -1 + $SC_firstlatingroup_I4, 0) = ( $iproc_S18 + $I_L1531_381 )
 1538.                            (lon%base_addr)(0, 0) = ( 1 + $N218 + $I_L1532_349 )
 1541.                            $I_L1532_349 = 1 + $I_L1532_349
 1539.                            if ( $I_L1532_349 >= $t_S20 ) exit
 1539.                         enddo
 1539.                      endif
 1539.                   endif
 1542.                   if ( (lastlon%base_addr)(1, $iproc_S18 + $I_L1531_381, 0) == 0 ) then
 1543.                      (firstlat%base_addr)($iproc_S18 + $I_L1531_381, 0) = 1 + (firstlatingroup%base_addr)(1 + $I_L1526_389, 0)
 1543.                   else
 1545.                      (firstlat%base_addr)($iproc_S18 + $I_L1531_381, 0) = (firstlatingroup%base_addr)(1 + $I_L1526_389, 0)
 1545.                   endif
 1547.                   if ( (lastlon%base_addr)($SC_jbmaxingroup_I5, $iproc_S18 + $I_L1531_381, 0) == 0 ) then
 1548.                      (lastlat%base_addr)($iproc_S18 + $I_L1531_381, 0) = -1 + (lastlatingroup%base_addr)(1 + $I_L1526_389, 0)
 1548.                   else
 1550.                      (lastlat%base_addr)($iproc_S18 + $I_L1531_381, 0) = (lastlatingroup%base_addr)(1 + $I_L1526_389, 0)
 1550.                   endif
 1553.                   if ( $iproc_S18 + $I_L1531_381 + -nproc /= -1 ) then
 1554.                      $F_A60 = $SC_jbmaxingroup_I5
 1554.                      if ( $SC_jbmaxingroup_I5 > 0 ) then
 1554.                         $I_L1554_279 = 0
 1554. !dir$ ivdep
 1554.                         do
 1554.                            (firstlon%base_addr)(1 + $I_L1554_279, 1 + $iproc_S18 + $I_L1531_381, 0) = (lon%base_addr)(1 + $I_L1554_279, 0)
 1554.                            $I_L1554_279 = 1 + $I_L1554_279
 1554.                            if ( $I_L1554_279 >= $F_A60 ) exit
 1554.                         enddo
 1554.                      endif
 1555.                      $F_A61 = $SC_jbmaxingroup_I5
 1555.                      if ( $SC_jbmaxingroup_I5 > 0 ) then
 1555.                         $I_L1555_281 = 0
 1555. !dir$ ivdep
 1555.                         do
 1555.                            (lastlon%base_addr)(1 + $I_L1555_281, 1 + $iproc_S18 + $I_L1531_381, 0) = 0
 1555.                            $I_L1555_281 = 1 + $I_L1555_281
 1555.                            if ( $I_L1555_281 >= $F_A61 ) exit
 1555.                         enddo
 1555.                      endif
 1555.                   endif
 1557.                   $I_L1531_381 = 1 + $I_L1531_381
 1556.                   if ( $I_L1531_381 >= $t_S19 ) exit
 1556.                enddo
 1552.                $iproc_S18 = $iproc_S18 + $t_S19
 1552.             endif
 1558.             $I_L1526_389 = 1 + $I_L1526_389
 1557.             if ( $I_L1526_389 >= ( $ngroups_S2 + 2 * $iex_S1 ) ) exit
 1557.          enddo
 1557.       endif
 1568.       $mygridpoints_S24 = (pointsinproc%base_addr)(myid, 0)
 1570.       jbmax = $mygridpoints_S24 / ibmax
 1571.       if ( jbmax * ibmax < $mygridpoints_S24 ) then
 1571.          jbmax = 1 + jbmax
 1571.       endif
 1572.       iperijb%header%a_contig = 1
 1572.       iperijb%dim_1%LB = 1
 1572.       iperijb%dim_1%EX = ( max( 0, ibmax ) )
 1572.       iperijb%dim_1%SM = 1
 1572.       iperijb%dim_2%LB = 1
 1572.       iperijb%dim_2%EX = ( max( 0, jbmax ) )
 1572.       iperijb%dim_2%SM = ( max( 0, ibmax ) )
 1572.       $_allo_P34(0) = 0x1000000000001L
 1572.       $_allo_P34(1) = loc( iperijb )
 1572.       call __allocate( $_allo_P34, 0, 0, _fcd( 0, 0 ) )
 1573.       jperijb%header%a_contig = 1
 1573.       jperijb%dim_1%LB = 1
 1573.       jperijb%dim_1%EX = ( max( 0, ibmax ) )
 1573.       jperijb%dim_1%SM = 1
 1573.       jperijb%dim_2%LB = 1
 1573.       jperijb%dim_2%EX = ( max( 0, jbmax ) )
 1573.       jperijb%dim_2%SM = ( max( 0, ibmax ) )
 1573.       $_allo_P35(0) = 0x1000000000001L
 1573.       $_allo_P35(1) = loc( jperijb )
 1573.       call __allocate( $_allo_P35, 0, 0, _fcd( 0, 0 ) )
 1574.       ibmaxperjb%header%a_contig = 1
 1574.       ibmaxperjb%dim_1%LB = 1
 1574.       ibmaxperjb%dim_1%EX = ( max( 0, jbmax ) )
 1574.       ibmaxperjb%dim_1%SM = 1
 1574.       $_allo_P36(0) = 0x1000000000001L
 1574.       $_allo_P36(1) = loc( ibmaxperjb )
 1574.       call __allocate( $_allo_P36, 0, 0, _fcd( 0, 0 ) )
 1576.       myfirstlat = (firstlat%base_addr)(myid, 0)
 1577.       mylastlat = (lastlat%base_addr)(myid, 0)
 1580.       myfirstlon%header%a_contig = 1
 1580.       myfirstlon%dim_1%LB = ( max( 1, myfirstlat + -jovlap ) )
 1580.       myfirstlon%dim_1%EX = ( max( 0, 1 + min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) ) )
 1580.       myfirstlon%dim_1%SM = 1
 1580.       $_allo_P37(0) = 0x1000000000001L
 1580.       $_allo_P37(1) = loc( myfirstlon )
 1580.       call __allocate( $_allo_P37, 0, 0, _fcd( 0, 0 ) )
 1581.       mylastlon%header%a_contig = 1
 1581.       mylastlon%dim_1%LB = ( max( 1, myfirstlat + -jovlap ) )
 1581.       mylastlon%dim_1%EX = ( max( 0, 1 + min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) ) )
 1581.       mylastlon%dim_1%SM = 1
 1581.       $_allo_P38(0) = 0x1000000000001L
 1581.       $_allo_P38(1) = loc( mylastlon )
 1581.       call __allocate( $_allo_P38, 0, 0, _fcd( 0, 0 ) )
 1582.       iovlap%header%a_contig = 1
 1582.       iovlap%dim_1%LB = ( max( 1, myfirstlat + -jovlap ) )
 1582.       iovlap%dim_1%EX = ( max( 0, 1 + min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) ) )
 1582.       iovlap%dim_1%SM = 1
 1582.       $_allo_P39(0) = 0x1000000000001L
 1582.       $_allo_P39(1) = loc( iovlap )
 1582.       call __allocate( $_allo_P39, 0, 0, _fcd( 0, 0 ) )
 1583.       if ( min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) >= 0 ) then
 1584.          $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1584.          $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1583.          $I_L1583_231 = 0
 1583. !dir$ ivdep
 1583.          do
 1584.             $Flat_S27 = sin( $hj_S26 * ( -5.0e-1 + ( $I_L1583_231 + max( 1, myfirstlat + -jovlap ) ) ) )
 1584.             $i_S28 = _rnd( ( jovlap * (imaxperj%base_addr)($I_L1583_231 + max( 1, myfirstlat + -jovlap ), 0) * 1.0/( imax * $Flat_S27 ) ) )
 1585.             (iovlap%base_addr)($I_L1583_231 + max( 1, myfirstlat + -jovlap ), 0) = 1 + $i_S28
 1586.             $I_L1583_231 = 1 + $I_L1583_231
 1583.             if ( $I_L1583_231 >= 1 + min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) ) exit
 1583.          enddo
 1583.       endif
 1593.       ibperij%header%a_contig = 1
 1593.       ibperij%dim_1%LB = ( 1 + -cvmg( 2, 0, slagr ) )
 1593.       ibperij%dim_1%EX = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1593.       ibperij%dim_1%SM = 1
 1593.       ibperij%dim_2%LB = -1
 1593.       ibperij%dim_2%EX = ( max( 0, 4 + jmax ) )
 1593.       ibperij%dim_2%SM = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1593.       $_allo_P40(0) = 0x1000000000001L
 1593.       $_allo_P40(1) = loc( ibperij )
 1593.       call __allocate( $_allo_P40, 0, 0, _fcd( 0, 0 ) )
 1594.       jbperij%header%a_contig = 1
 1594.       jbperij%dim_1%LB = ( 1 + -cvmg( 2, 0, slagr ) )
 1594.       jbperij%dim_1%EX = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1594.       jbperij%dim_1%SM = 1
 1594.       jbperij%dim_2%LB = -1
 1594.       jbperij%dim_2%EX = ( max( 0, 4 + jmax ) )
 1594.       jbperij%dim_2%SM = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1594.       $_allo_P41(0) = 0x1000000000001L
 1594.       $_allo_P41(1) = loc( jbperij )
 1594.       call __allocate( $_allo_P41, 0, 0, _fcd( 0, 0 ) )
 1595.       $F_A62 = ( max( 0, 4 + jmax ) )
 1595.       $F_A63 = ( 0 + max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1595.       if ( and( -$F_A63, -$F_A62 ) < 0 ) then
 1595.          $I_L1595_375 = 0
 1595.          do
 1595.             $I_L1595_283 = 0
 1595. !dir$ ivdep
 1595.             do
 1595.                (ibperij%base_addr)(1 + $I_L1595_283 + -cvmg( 2, 0, slagr ), -1 + $I_L1595_375, 0) = 0
 1595.                $I_L1595_283 = 1 + $I_L1595_283
 1595.                if ( $I_L1595_283 >= $F_A63 ) exit
 1595.             enddo
 1595.             $I_L1595_375 = 1 + $I_L1595_375
 1595.             if ( $I_L1595_375 >= $F_A62 ) exit
 1595.          enddo
 1595.       endif
 1596.       $F_A64 = ( max( 0, 4 + jmax ) )
 1596.       $F_A65 = ( 0 + max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1596.       if ( and( -$F_A65, -$F_A64 ) < 0 ) then
 1596.          $I_L1596_377 = 0
 1596.          do
 1596.             $I_L1596_285 = 0
 1596. !dir$ ivdep
 1596.             do
 1596.                (jbperij%base_addr)(1 + $I_L1596_285 + -cvmg( 2, 0, slagr ), -1 + $I_L1596_377, 0) = 0
 1596.                $I_L1596_285 = 1 + $I_L1596_285
 1596.                if ( $I_L1596_285 >= $F_A65 ) exit
 1596.             enddo
 1596.             $I_L1596_377 = 1 + $I_L1596_377
 1596.             if ( $I_L1596_377 >= $F_A64 ) exit
 1596.          enddo
 1596.       endif
 1598.       $F_A66 = ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) )
 1598.       if ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) > 0 ) then
 1598.          $SCA_procingroup_I12 = (procingroup%base_addr)(myid, 0)
 1598.          $SCA_firstlatingroup_I13 = (firstlatingroup%base_addr)($SCA_procingroup_I12, 0)
 1598.          $I_L1598_287 = 0
 1598. !dir$ ivdep
 1598.          do
 1598.             (myfirstlon%base_addr)(myfirstlat + $I_L1598_287, 0) = (firstlon%base_addr)(1 + myfirstlat + $I_L1598_287 + -$SCA_firstlatingroup_I13, myid, 0)
 1598.             $I_L1598_287 = 1 + $I_L1598_287
 1598.             if ( $I_L1598_287 >= $F_A66 ) exit
 1598.          enddo
 1598.       endif
 1602.       $F_A67 = ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) )
 1602.       if ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) > 0 ) then
 1602.          $SCA_firstlatingroup_I10 = (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0)
 1602.          $I_L1602_289 = 0
 1602. !dir$ ivdep
 1602.          do
 1602.             (mylastlon%base_addr)(myfirstlat + $I_L1602_289, 0) = (lastlon%base_addr)(1 + myfirstlat + $I_L1602_289 + -$SCA_firstlatingroup_I10, myid, 0)
 1602.             $I_L1602_289 = 1 + $I_L1602_289
 1602.             if ( $I_L1602_289 >= $F_A67 ) exit
 1602.          enddo
 1602.       endif
 1606.       $Reduc_A68 = inf0e-1
 1606.       $F_A70 = ( 1 + mylastlat + -myfirstlat )
 1606.       if ( mylastlat + -myfirstlat >= 0 ) then
 1606.          $SC_imaxperj_I21 = imaxperj%dim_1%EX
 1606.          $SC_imaxperj_I22 = imaxperj%dim_1%LB
 1606.          $I_L1606_291 = 0
 1606. !dir$ ivdep
 1606.          do
 1606.             $Reduc_A68 = min( $Reduc_A68, ( 1.0/( real( (imaxperj%base_addr)(myfirstlat + $I_L1606_291, 0) ) ) * real( (myfirstlon%base_addr)(myfirstlat + $I_L1606_291, 0) ) ) )
 1606.             $I_L1606_291 = 1 + $I_L1606_291
 1606.             if ( $I_L1606_291 >= $F_A70 ) exit
 1606.          enddo
 1606.       endif
 1606.       $ifirst_S36 = real( $Reduc_A68, 8 )
 1608.       $Reduc_A71 = -infe-1
 1608.       $F_A73 = ( 1 + mylastlat + -myfirstlat )
 1608.       if ( mylastlat + -myfirstlat >= 0 ) then
 1608.          $SC_imaxperj_I21 = imaxperj%dim_1%EX
 1608.          $SC_imaxperj_I22 = imaxperj%dim_1%LB
 1608.          $I_L1608_293 = 0
 1608. !dir$ ivdep
 1608.          do
 1608.             $Reduc_A71 = max( $Reduc_A71, ( 1.0/( real( (imaxperj%base_addr)(myfirstlat + $I_L1608_293, 0) ) ) * real( (mylastlon%base_addr)(myfirstlat + $I_L1608_293, 0) ) ) )
 1608.             $I_L1608_293 = 1 + $I_L1608_293
 1608.             if ( $I_L1608_293 >= $F_A73 ) exit
 1608.          enddo
 1608.       endif
 1608.       $ilast_S37 = real( $Reduc_A71, 8 )
 1613.       $ijb_S32 = 0
 1614.       if ( mylastlat + -myfirstlat >= 0 ) then
 1614.          $I_L1614_357 = 0
 1614.          do
 1615.             $t_S30 = (myfirstlon%base_addr)(myfirstlat + $I_L1614_357, 0)
 1615.             $t_S31 = (mylastlon%base_addr)(myfirstlat + $I_L1614_357, 0)
 1615.             if ( $t_S31 + -$t_S30 >= 0 ) then
 1615.                $I_L1615_233 = 0
 1615. !dir$ ivdep
 1615.                do
 1616.                   ib = 1 + mod( ( $ijb_S32 + $I_L1615_233 ), ibmax )
 1617.                   jb = 1 + ( $ijb_S32 + $I_L1615_233 ) / ibmax
 1619.                   (iperijb%base_addr)(ib, jb, 0) = ( $t_S30 + $I_L1615_233 )
 1620.                   (jperijb%base_addr)(ib, jb, 0) = ( myfirstlat + $I_L1614_357 )
 1621.                   (ibperij%base_addr)($t_S30 + $I_L1615_233, myfirstlat + $I_L1614_357, 0) = ib
 1622.                   (jbperij%base_addr)($t_S30 + $I_L1615_233, myfirstlat + $I_L1614_357, 0) = jb
 1623.                   $I_L1615_233 = 1 + $I_L1615_233
 1615.                   if ( $I_L1615_233 >= 1 + $t_S31 + -$t_S30 ) exit
 1615.                enddo
 1618.                $ijb_S32 = ( 1 + $t_S31 + $ijb_S32 + -$t_S30 )
 1618.             endif
 1624.             $I_L1614_357 = 1 + $I_L1614_357
 1623.             if ( $I_L1614_357 >= 1 + mylastlat + -myfirstlat ) exit
 1623.          enddo
 1623.       endif
 1625.       $F_A74 = ( -1 + jbmax )
 1625.       if ( -1 + jbmax > 0 ) then
 1625.          $I_L1625_295 = 0
 1625. !dir$ ivdep
 1625.          do
 1625.             (ibmaxperjb%base_addr)(1 + $I_L1625_295, 0) = ibmax
 1625.             $I_L1625_295 = 1 + $I_L1625_295
 1625.             if ( $I_L1625_295 >= $F_A74 ) exit
 1625.          enddo
 1625.       endif
 1626.       (ibmaxperjb%base_addr)(jbmax, 0) = ib
 1627.       jbmax_ext = jb
 1629.       if ( slagr /= .false. ) then
 1631.          iaux%header%a_contig = 1
 1631.          iaux%dim_1%LB = 1
 1631.          iaux%dim_1%EX = ( max( 0, imax ) )
 1631.          iaux%dim_1%SM = 1
 1631.          iaux%dim_2%LB = 1
 1631.          iaux%dim_2%EX = ( max( 0, jmax ) )
 1631.          iaux%dim_2%SM = ( max( 0, imax ) )
 1631.          $_allo_P42(0) = 0x1000000000001L
 1631.          $_allo_P42(1) = loc( iaux )
 1631.          call __allocate( $_allo_P42, 0, 0, _fcd( 0, 0 ) )
 1632.          $F_A75 = ( max( 0, jmax ) )
 1632.          $F_A76 = ( max( 0, imax ) )
 1632.          if ( and( -$F_A76, -$F_A75 ) < 0 ) then
 1632.             $I_L1632_379 = 0
 1632.             do
 1632.                $I_L1632_297 = 0
 1632. !dir$ ivdep
 1632.                do
 1632.                   (iaux%base_addr)(1 + $I_L1632_297, 1 + $I_L1632_379, 0) = -1
 1632.                   $I_L1632_297 = 1 + $I_L1632_297
 1632.                   if ( $I_L1632_297 >= $F_A76 ) exit
 1632.                enddo
 1632.                $I_L1632_379 = 1 + $I_L1632_379
 1632.                if ( $I_L1632_379 >= $F_A75 ) exit
 1632.             enddo
 1632.          endif
 1636.          ipar = 0
 1639.          if ( mylastlat + -myfirstlat + 2 * jovlap >= 0 ) then
 1644.             $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1644.             $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1639.             $I_L1639_359 = 0
 1639.             do
 1640.                $j_S35 = ( myfirstlat + $I_L1639_359 + -jovlap )
 1641.                $iadd_S41 = 0
 1642.                if ( ( myfirstlat + $I_L1639_359 + -jovlap ) <= 0 ) then
 1642.                   $j_S35 = ( 1 + jovlap + -myfirstlat + -$I_L1639_359 )
 1642.                endif
 1643.                if ( ( myfirstlat + $I_L1639_359 + -jovlap ) > jmax ) then
 1643.                   $j_S35 = ( 1 + jovlap + -myfirstlat + -$I_L1639_359 + 2 * jmax )
 1643.                endif
 1644.                if ( myfirstlat + $I_L1639_359 + -jovlap + -$j_S35 /= 0 ) then
 1644.                   $iadd_S41 = (imaxperj%base_addr)($j_S35, 0) / 2
 1644.                endif
 1645.                $i1_S38 = _rnd( $ifirst_S36 * (imaxperj%base_addr)($j_S35, 0) ) + -(iovlap%base_addr)($j_S35, 0)
 1646.                $i2_S39 = (iovlap%base_addr)($j_S35, 0) + _rnd( $ilast_S37 * (imaxperj%base_addr)($j_S35, 0) )
 1647.                if ( 1 + $i2_S39 + -$i1_S38 >= (imaxperj%base_addr)($j_S35, 0) ) then
 1648.                   $i1_S38 = 1
 1649.                   $i2_S39 = (imaxperj%base_addr)($j_S35, 0)
 1649.                endif
 1651.                if ( $i2_S39 + -$i1_S38 >= 0 ) then
 1651.                   $SCA_imaxperj_I16 = (imaxperj%base_addr)($j_S35, 0)
 1651.                   $I_L1651_235 = 0
 1651. !dir$ ivdep
 1651.                   do
 1652.                      $ij_S42 = 1 + mod( ( -1 + $i1_S38 + $iadd_S41 + $SCA_imaxperj_I16 + $I_L1651_235 ), $SCA_imaxperj_I16 )
 1653.                      if ( (gridmap%base_addr)($ij_S42, $j_S35, 0) + -myid /= 0 ) then
 1653.                         (iaux%base_addr)($ij_S42, $j_S35, 0) = (gridmap%base_addr)($ij_S42, $j_S35, 0)
 1653.                      endif
 1654.                      $I_L1651_235 = 1 + $I_L1651_235
 1653.                      if ( $I_L1651_235 >= 1 + $i2_S39 + -$i1_S38 ) exit
 1653.                   enddo
 1653.                endif
 1655.                $I_L1639_359 = 1 + $I_L1639_359
 1654.                if ( $I_L1639_359 >= 1 + mylastlat + -myfirstlat + 2 * jovlap ) exit
 1654.             enddo
 1654.          endif
 1657.          if ( min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) >= 0 ) then
 1658.             $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1658.             $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1657.             $I_L1657_361 = 0
 1657.             do
 1658.                $t_S44 = (imaxperj%base_addr)($I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0)
 1658.                if ( $t_S44 > 0 ) then
 1658.                   $I_L1658_237 = 0
 1658. !dir$ ivdep
 1658.                   do
 1659.                      if ( (iaux%base_addr)(1 + $I_L1658_237, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0) /= -1 ) then
 1660.                         $ib_S46 = 1 + mod( $ijb_S32, ibmax )
 1661.                         jb = 1 + $ijb_S32 / ibmax
 1663.                         (ibperij%base_addr)(1 + $I_L1658_237, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0) = $ib_S46
 1664.                         (jbperij%base_addr)(1 + $I_L1658_237, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0) = jb
 1662.                         $ijb_S32 = 1 + $ijb_S32
 1662.                      endif
 1666.                      $I_L1658_237 = 1 + $I_L1658_237
 1665.                      if ( $I_L1658_237 >= $t_S44 ) exit
 1665.                   enddo
 1665.                endif
 1667.                $i2_S47 = 0
 1668.                if ( $t_S44 > 0 ) then
 1668.                   $I_L1668_239 = 0
 1668. !dir$ unroll 2
 1668.                   do
 1669.                      if ( $i2_S47 == 1 ) then
 1670.                         if ( (myrecsgr%base_addr)(4, ipar, 0) + -(iaux%base_addr)(1 + $I_L1668_239, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0) /= 0 ) then
 1671.                            (myrecsgr%base_addr)(2, ipar, 0) = $I_L1668_239
 1672.                            $i2_S47 = 0
 1673.                            if ( (iaux%base_addr)(1 + $I_L1668_239, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0) /= -1 ) then
 1674.                               ipar = 1 + ipar
 1675.                               (myrecsgr%base_addr)(1, ipar, 0) = ( 1 + $I_L1668_239 )
 1676.                               (myrecsgr%base_addr)(2, ipar, 0) = $t_S44
 1677.                               (myrecsgr%base_addr)(3, ipar, 0) = ( $I_L1657_361 + max( 1, myfirstlat + -jovlap ) )
 1678.                               (myrecsgr%base_addr)(4, ipar, 0) = (iaux%base_addr)(1 + $I_L1668_239, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0)
 1679.                               $i2_S47 = 1
 1679.                            endif
 1679.                         endif
 1682.                      else if ( (iaux%base_addr)(1 + $I_L1668_239, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0) /= -1 ) then
 1684.                         ipar = 1 + ipar
 1685.                         (myrecsgr%base_addr)(1, ipar, 0) = ( 1 + $I_L1668_239 )
 1686.                         (myrecsgr%base_addr)(2, ipar, 0) = $t_S44
 1687.                         (myrecsgr%base_addr)(3, ipar, 0) = ( $I_L1657_361 + max( 1, myfirstlat + -jovlap ) )
 1688.                         (myrecsgr%base_addr)(4, ipar, 0) = (iaux%base_addr)(1 + $I_L1668_239, $I_L1657_361 + max( 1, myfirstlat + -jovlap ), 0)
 1689.                         $i2_S47 = 1
 1689.                      endif
 1692.                      $I_L1668_239 = 1 + $I_L1668_239
 1691.                      if ( $I_L1668_239 >= $t_S44 ) exit
 1691.                   enddo
 1691.                endif
 1693.                $I_L1657_361 = 1 + $I_L1657_361
 1692.                if ( $I_L1657_361 >= 1 + min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) ) exit
 1692.             enddo
 1692.          endif
 1695.          jbmax_ext = jb
 1696.          if ( ipar > 2 * jovlap * $npperg_S0 + 4 * $Reduc_A49 ) then
 1697.             $Unit_temp_O0 = nfprt
 1697.             $_IOitem_P2(0) = 2 * jovlap * $npperg_S0 + 4 * $Reduc_A49
 1697.             $_IOitem_P2(1) = ipar
 1697.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' ndim, ipar  ', 0x800600000000L ), _iotype( (&)$_IOitem_P2(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1698.             $Unit_temp_O1 = nfprt
 1698.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$98,  _substr(t$97,1,53), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(GridDecomposition)**', 0x800600000000L ) ) )
 1699.              _substr(t$531,1,23) = '**(GridDecomposition)**'
 1699.             call _stop(  _substr(t$531,1,23) )
 1699.          else
 1705.             if ( 0 > myfirstlat + -max( 2, jovlap ) ) then
 1706.                $imp2_S49 = (imaxperj%base_addr)(2, 0) / 2
 1707.                $F_A77 = $imp2_S49
 1707.                if ( $imp2_S49 > 0 ) then
 1707.                   $I_L1707_299 = 0
 1707. !dir$ ivdep
 1707.                   do
 1707.                      (ibperij%base_addr)(1 + $I_L1707_299, -1, 0) = (ibperij%base_addr)(1 + $imp2_S49 + $I_L1707_299, 2, 0)
 1707.                      $I_L1707_299 = 1 + $I_L1707_299
 1707.                      if ( $I_L1707_299 >= $F_A77 ) exit
 1707.                   enddo
 1707.                endif
 1709.                $F_A78 = $imp2_S49
 1709.                if ( $imp2_S49 > 0 ) then
 1709.                   $I_L1709_301 = 0
 1709. !dir$ ivdep
 1709.                   do
 1709.                      (jbperij%base_addr)(1 + $I_L1709_301, -1, 0) = (jbperij%base_addr)(1 + $imp2_S49 + $I_L1709_301, 2, 0)
 1709.                      $I_L1709_301 = 1 + $I_L1709_301
 1709.                      if ( $I_L1709_301 >= $F_A78 ) exit
 1709.                   enddo
 1709.                endif
 1708.                $F_A79 = $imp2_S49
 1708.                if ( $imp2_S49 > 0 ) then
 1708.                   $I_L1708_303 = 0
 1708. !dir$ ivdep
 1708.                   do
 1708.                      (ibperij%base_addr)(1 + $imp2_S49 + $I_L1708_303, -1, 0) = (ibperij%base_addr)(1 + $I_L1708_303, 2, 0)
 1708.                      $I_L1708_303 = 1 + $I_L1708_303
 1708.                      if ( $I_L1708_303 >= $F_A79 ) exit
 1708.                   enddo
 1708.                endif
 1710.                $F_A80 = $imp2_S49
 1710.                if ( $imp2_S49 > 0 ) then
 1710.                   $I_L1710_305 = 0
 1710. !dir$ ivdep
 1710.                   do
 1710.                      (jbperij%base_addr)(1 + $imp2_S49 + $I_L1710_305, -1, 0) = (jbperij%base_addr)(1 + $I_L1710_305, 2, 0)
 1710.                      $I_L1710_305 = 1 + $I_L1710_305
 1710.                      if ( $I_L1710_305 >= $F_A80 ) exit
 1710.                   enddo
 1710.                endif
 1710.             endif
 1713.             if ( 0 >= myfirstlat + -max( 2, jovlap ) ) then
 1714.                $imp2_S50 = (imaxperj%base_addr)(1, 0) / 2
 1715.                $F_A81 = $imp2_S50
 1715.                if ( $imp2_S50 > 0 ) then
 1715.                   $I_L1715_307 = 0
 1715. !dir$ ivdep
 1715.                   do
 1715.                      (ibperij%base_addr)(1 + $I_L1715_307, 0, 0) = (ibperij%base_addr)(1 + $imp2_S50 + $I_L1715_307, 1, 0)
 1715.                      $I_L1715_307 = 1 + $I_L1715_307
 1715.                      if ( $I_L1715_307 >= $F_A81 ) exit
 1715.                   enddo
 1715.                endif
 1717.                $F_A82 = $imp2_S50
 1717.                if ( $imp2_S50 > 0 ) then
 1717.                   $I_L1717_309 = 0
 1717. !dir$ ivdep
 1717.                   do
 1717.                      (jbperij%base_addr)(1 + $I_L1717_309, 0, 0) = (jbperij%base_addr)(1 + $imp2_S50 + $I_L1717_309, 1, 0)
 1717.                      $I_L1717_309 = 1 + $I_L1717_309
 1717.                      if ( $I_L1717_309 >= $F_A82 ) exit
 1717.                   enddo
 1717.                endif
 1716.                $F_A83 = $imp2_S50
 1716.                if ( $imp2_S50 > 0 ) then
 1716.                   $I_L1716_311 = 0
 1716. !dir$ ivdep
 1716.                   do
 1716.                      (ibperij%base_addr)(1 + $imp2_S50 + $I_L1716_311, 0, 0) = (ibperij%base_addr)(1 + $I_L1716_311, 1, 0)
 1716.                      $I_L1716_311 = 1 + $I_L1716_311
 1716.                      if ( $I_L1716_311 >= $F_A83 ) exit
 1716.                   enddo
 1716.                endif
 1718.                $F_A84 = $imp2_S50
 1718.                if ( $imp2_S50 > 0 ) then
 1718.                   $I_L1718_313 = 0
 1718. !dir$ ivdep
 1718.                   do
 1718.                      (jbperij%base_addr)(1 + $imp2_S50 + $I_L1718_313, 0, 0) = (jbperij%base_addr)(1 + $I_L1718_313, 1, 0)
 1718.                      $I_L1718_313 = 1 + $I_L1718_313
 1718.                      if ( $I_L1718_313 >= $F_A84 ) exit
 1718.                   enddo
 1718.                endif
 1718.             endif
 1721.             if ( 1 + jmax <= mylastlat + max( 2, jovlap ) ) then
 1722.                $imp2_S51 = (imaxperj%base_addr)(jmax, 0) / 2
 1723.                $F_A85 = $imp2_S51
 1723.                if ( $imp2_S51 > 0 ) then
 1723.                   $I_L1723_315 = 0
 1723. !dir$ ivdep
 1723.                   do
 1723.                      (ibperij%base_addr)(1 + $I_L1723_315, 1 + jmax, 0) = (ibperij%base_addr)(1 + $imp2_S51 + $I_L1723_315, jmax, 0)
 1723.                      $I_L1723_315 = 1 + $I_L1723_315
 1723.                      if ( $I_L1723_315 >= $F_A85 ) exit
 1723.                   enddo
 1723.                endif
 1725.                $F_A86 = $imp2_S51
 1725.                if ( $imp2_S51 > 0 ) then
 1725.                   $I_L1725_317 = 0
 1725. !dir$ ivdep
 1725.                   do
 1725.                      (jbperij%base_addr)(1 + $I_L1725_317, 1 + jmax, 0) = (jbperij%base_addr)(1 + $imp2_S51 + $I_L1725_317, jmax, 0)
 1725.                      $I_L1725_317 = 1 + $I_L1725_317
 1725.                      if ( $I_L1725_317 >= $F_A86 ) exit
 1725.                   enddo
 1725.                endif
 1724.                $F_A87 = $imp2_S51
 1724.                if ( $imp2_S51 > 0 ) then
 1724.                   $I_L1724_319 = 0
 1724. !dir$ ivdep
 1724.                   do
 1724.                      (ibperij%base_addr)(1 + $imp2_S51 + $I_L1724_319, 1 + jmax, 0) = (ibperij%base_addr)(1 + $I_L1724_319, jmax, 0)
 1724.                      $I_L1724_319 = 1 + $I_L1724_319
 1724.                      if ( $I_L1724_319 >= $F_A87 ) exit
 1724.                   enddo
 1724.                endif
 1726.                $F_A88 = $imp2_S51
 1726.                if ( $imp2_S51 > 0 ) then
 1726.                   $I_L1726_321 = 0
 1726. !dir$ ivdep
 1726.                   do
 1726.                      (jbperij%base_addr)(1 + $imp2_S51 + $I_L1726_321, 1 + jmax, 0) = (jbperij%base_addr)(1 + $I_L1726_321, jmax, 0)
 1726.                      $I_L1726_321 = 1 + $I_L1726_321
 1726.                      if ( $I_L1726_321 >= $F_A88 ) exit
 1726.                   enddo
 1726.                endif
 1726.             endif
 1729.             if ( 2 + jmax <= mylastlat + max( 2, jovlap ) ) then
 1730.                $imp2_S52 = (imaxperj%base_addr)(-1 + jmax, 0) / 2
 1731.                $F_A89 = $imp2_S52
 1731.                if ( $imp2_S52 > 0 ) then
 1731.                   $I_L1731_323 = 0
 1731. !dir$ ivdep
 1731.                   do
 1731.                      (ibperij%base_addr)(1 + $I_L1731_323, 2 + jmax, 0) = (ibperij%base_addr)(1 + $imp2_S52 + $I_L1731_323, -1 + jmax, 0)
 1731.                      $I_L1731_323 = 1 + $I_L1731_323
 1731.                      if ( $I_L1731_323 >= $F_A89 ) exit
 1731.                   enddo
 1731.                endif
 1733.                $F_A90 = $imp2_S52
 1733.                if ( $imp2_S52 > 0 ) then
 1733.                   $I_L1733_325 = 0
 1733. !dir$ ivdep
 1733.                   do
 1733.                      (jbperij%base_addr)(1 + $I_L1733_325, 2 + jmax, 0) = (jbperij%base_addr)(1 + $imp2_S52 + $I_L1733_325, -1 + jmax, 0)
 1733.                      $I_L1733_325 = 1 + $I_L1733_325
 1733.                      if ( $I_L1733_325 >= $F_A90 ) exit
 1733.                   enddo
 1733.                endif
 1732.                $F_A91 = $imp2_S52
 1732.                if ( $imp2_S52 > 0 ) then
 1732.                   $I_L1732_327 = 0
 1732. !dir$ ivdep
 1732.                   do
 1732.                      (ibperij%base_addr)(1 + $imp2_S52 + $I_L1732_327, 2 + jmax, 0) = (ibperij%base_addr)(1 + $I_L1732_327, -1 + jmax, 0)
 1732.                      $I_L1732_327 = 1 + $I_L1732_327
 1732.                      if ( $I_L1732_327 >= $F_A91 ) exit
 1732.                   enddo
 1732.                endif
 1734.                $F_A92 = $imp2_S52
 1734.                if ( $imp2_S52 > 0 ) then
 1734.                   $I_L1734_329 = 0
 1734. !dir$ ivdep
 1734.                   do
 1734.                      (jbperij%base_addr)(1 + $imp2_S52 + $I_L1734_329, 2 + jmax, 0) = (jbperij%base_addr)(1 + $I_L1734_329, -1 + jmax, 0)
 1734.                      $I_L1734_329 = 1 + $I_L1734_329
 1734.                      if ( $I_L1734_329 >= $F_A92 ) exit
 1734.                   enddo
 1734.                endif
 1734.             endif
 1738.             if ( min( jovlap + mylastlat, 2 + jmax ) + -max( -1, myfirstlat + -jovlap ) >= 0 ) then
 1744.                $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1744.                $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1738.                $I_L1738_241 = 0
 1738. !dir$ ivdep
 1738.                do
 1739.                   $jb_S54 = ( $I_L1738_241 + max( -1, myfirstlat + -jovlap ) )
 1740.                   if ( $I_L1738_241 + max( -1, myfirstlat + -jovlap ) == -1 ) then
 1740.                      $jb_S54 = 2
 1740.                   endif
 1741.                   if ( $I_L1738_241 + max( -1, myfirstlat + -jovlap ) == 0 ) then
 1741.                      $jb_S54 = 1
 1741.                   endif
 1742.                   if ( jmax + -max( -1, myfirstlat + -jovlap ) + -$I_L1738_241 == -1 ) then
 1742.                      $jb_S54 = jmax
 1742.                   endif
 1743.                   if ( jmax + -max( -1, myfirstlat + -jovlap ) + -$I_L1738_241 == -2 ) then
 1743.                      $jb_S54 = -1 + jmax
 1743.                   endif
 1744.                   $ib_S55 = (imaxperj%base_addr)($jb_S54, 0)
 1745.                   (ibperij%base_addr)(0, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)($ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1746.                   (ibperij%base_addr)(-1, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)(-1 + $ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1747.                   (ibperij%base_addr)(1 + $ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)(1, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1748.                   (ibperij%base_addr)(2 + $ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)(2, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1749.                   (jbperij%base_addr)(0, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)($ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1750.                   (jbperij%base_addr)(-1, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)(-1 + $ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1751.                   (jbperij%base_addr)(1 + $ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)(1, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1752.                   (jbperij%base_addr)(2 + $ib_S55, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)(2, $I_L1738_241 + max( -1, myfirstlat + -jovlap ), 0)
 1753.                   $I_L1738_241 = 1 + $I_L1738_241
 1743.                   if ( $I_L1738_241 >= 1 + min( jovlap + mylastlat, 2 + jmax ) + -max( -1, myfirstlat + -jovlap ) ) exit
 1743.                enddo
 1743.             endif
 1757.             if ( -2 + ipar >= 0 ) then
 1757.                $I_L1757_383 = 0
 1757.                do
 1758.                   $I_L1758_363 = 0
 1758.                   do
 1759.                      if ( (myrecsgr%base_addr)(4, 2 + $I_L1757_383 + -$I_L1758_363, 0) >= (myrecsgr%base_addr)(4, 1 + $I_L1757_383 + -$I_L1758_363, 0) ) exit
 1760.                      $I_L1760_331 = 0
 1760. !dir$ ivdep
 1760.                      do
 1760.                         $aux_WR0_R0 = (myrecsgr%base_addr)(1 + $I_L1760_331, 1 + $I_L1757_383 + -$I_L1758_363, 0)
 1761.                         (myrecsgr%base_addr)(1 + $I_L1760_331, 1 + $I_L1757_383 + -$I_L1758_363, 0) = (myrecsgr%base_addr)(1 + $I_L1760_331, 2 + $I_L1757_383 + -$I_L1758_363, 0)
 1762.                         (myrecsgr%base_addr)(1 + $I_L1760_331, 2 + $I_L1757_383 + -$I_L1758_363, 0) = $aux_WR0_R0
 1760.                         $I_L1760_331 = 1 + $I_L1760_331
 1760.                         if ( $I_L1760_331 >= 4 ) exit
 1760.                      enddo
 1766.                      $I_L1758_363 = 1 + $I_L1758_363
 1760.                      if ( $I_L1758_363 >= 1 + $I_L1757_383 ) exit
 1760.                   enddo
 1767.                   $I_L1757_383 = 1 + $I_L1757_383
 1766.                   if ( $I_L1757_383 >= -1 + ipar ) exit
 1766.                enddo
 1766.             endif
 1768.             (myrecspr%base_addr)(1, 1, 0) = (myrecsgr%base_addr)(4, 1, 0)
 1769.             nrecs_gr = 1
 1770.             if ( -2 + ipar >= 0 ) then
 1770.                $I_L1770_243 = 0
 1770. !dir$ ivdep
 1770.                do
 1771.                   if ( (myrecsgr%base_addr)(4, 1 + $I_L1770_243, 0) + -(myrecsgr%base_addr)(4, 2 + $I_L1770_243, 0) /= 0 ) then
 1772.                      nrecs_gr = 1 + nrecs_gr
 1773.                      (myrecspr%base_addr)(2, -1 + nrecs_gr, 0) = ( 1 + $I_L1770_243 )
 1774.                      (myrecspr%base_addr)(1, nrecs_gr, 0) = (myrecsgr%base_addr)(4, 2 + $I_L1770_243, 0)
 1774.                   endif
 1776.                   $I_L1770_243 = 1 + $I_L1770_243
 1775.                   if ( $I_L1770_243 >= -1 + ipar ) exit
 1775.                enddo
 1775.             endif
 1777.             (myrecspr%base_addr)(2, nrecs_gr, 0) = ipar
 1778.             if ( ipar == 0 ) then
 1779.                nrecs_gr = 0
 1780.                nsends_gr = 0
 1780.             endif
 1780.             goto 20
 1780.          endif
 1780.       else
 1780.    20    continue
 1787.          $Reduc_A93 = 0xffffffff80000001
 1787.          $F_A95 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1787.          if ( _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) ) > 0 ) then
 1787.             $I_L1787_333 = 0
 1787. !dir$ ivdep
 1787.             do
 1787.                $Reduc_A93 = max( $Reduc_A93, (nprocsingroup%base_addr)(1 + $I_L1787_333, 0) )
 1787.                $I_L1787_333 = 1 + $I_L1787_333
 1787.                if ( $I_L1787_333 >= $F_A95 ) exit
 1787.             enddo
 1787.          endif
 1787.          ndim_f = 3 * jmaxlocal_f + jmaxlocal_f * $Reduc_A93
 1788.          messages_f%header%a_contig = 1
 1788.          messages_f%dim_1%LB = 1
 1788.          messages_f%dim_1%EX = 4
 1788.          messages_f%dim_1%SM = 1
 1788.          messages_f%dim_2%LB = 1
 1788.          messages_f%dim_2%EX = ( max( 0, 3 * jmaxlocal_f + jmaxlocal_f * $Reduc_A93 ) )
 1788.          messages_f%dim_2%SM = 4
 1788.          $_allo_P43(0) = 0x1000000000001L
 1788.          $_allo_P43(1) = loc( messages_f )
 1788.          call __allocate( $_allo_P43, 0, 0, _fcd( 0, 0 ) )
 1789.          messproc_f%header%a_contig = 1
 1789.          messproc_f%dim_1%LB = 1
 1789.          messproc_f%dim_1%EX = 2
 1789.          messproc_f%dim_1%SM = 1
 1789.          messproc_f%dim_2%LB = 0
 1789.          messproc_f%dim_2%EX = ( max( 0, 1 + nproc ) )
 1789.          messproc_f%dim_2%SM = 2
 1789.          $_allo_P44(0) = 0x1000000000001L
 1789.          $_allo_P44(1) = loc( messproc_f )
 1789.          call __allocate( $_allo_P44, 0, 0, _fcd( 0, 0 ) )
 1790.          messages_g%header%a_contig = 1
 1790.          messages_g%dim_1%LB = 1
 1790.          messages_g%dim_1%EX = 4
 1790.          messages_g%dim_1%SM = 1
 1790.          messages_g%dim_2%LB = 1
 1790.          messages_g%dim_2%EX = ( max( 0, ndim_f ) )
 1790.          messages_g%dim_2%SM = 4
 1790.          $_allo_P45(0) = 0x1000000000001L
 1790.          $_allo_P45(1) = loc( messages_g )
 1790.          call __allocate( $_allo_P45, 0, 0, _fcd( 0, 0 ) )
 1791.          messproc_g%header%a_contig = 1
 1791.          messproc_g%dim_1%LB = 1
 1791.          messproc_g%dim_1%EX = 2
 1791.          messproc_g%dim_1%SM = 1
 1791.          messproc_g%dim_2%LB = 0
 1791.          messproc_g%dim_2%EX = ( max( 0, 1 + nproc ) )
 1791.          messproc_g%dim_2%SM = 2
 1791.          $_allo_P46(0) = 0x1000000000001L
 1791.          $_allo_P46(1) = loc( messproc_g )
 1791.          call __allocate( $_allo_P46, 0, 0, _fcd( 0, 0 ) )
 1792.          $ipar_S59 = 1
 1793.          if ( mylastlat_f + -myfirstlat_f >= 0 ) then
 1797.             $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1797.             $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1793.             $I_L1793_365 = 0
 1793.             do
 1794.                (messages_f%base_addr)(1, $ipar_S59, 0) = 1
 1795.                (messages_f%base_addr)(3, $ipar_S59, 0) = ( myfirstlat_f + $I_L1793_365 )
 1796.                (messages_f%base_addr)(4, $ipar_S59, 0) = (gridmap%base_addr)(1, myfirstlat_f + $I_L1793_365, 0)
 1797.                $t_S61 = (imaxperj%base_addr)(myfirstlat_f + $I_L1793_365, 0)
 1797.                if ( -2 + $t_S61 >= 0 ) then
 1809.                   if ( 0 < -2 + $t_S61 ) then
 1797.                      $I_L1797_245 = 0
 1797. !dir$ unroll 2
 1797.                      do
 1798.                         if ( (gridmap%base_addr)(2 + $I_L1797_245, myfirstlat_f + $I_L1793_365, 0) + -(messages_f%base_addr)(4, $ipar_S59, 0) /= 0 ) then
 1799.                            (messages_f%base_addr)(2, $ipar_S59, 0) = ( 1 + $I_L1797_245 )
 1800.                            if ( (messages_f%base_addr)(4, $ipar_S59, 0) + -myid /= 0 ) then
 1800.                               $ipar_S59 = 1 + $ipar_S59
 1800.                            endif
 1801.                            (messages_f%base_addr)(1, $ipar_S59, 0) = ( 2 + $I_L1797_245 )
 1802.                            (messages_f%base_addr)(3, $ipar_S59, 0) = ( myfirstlat_f + $I_L1793_365 )
 1803.                            (messages_f%base_addr)(4, $ipar_S59, 0) = (gridmap%base_addr)(2 + $I_L1797_245, myfirstlat_f + $I_L1793_365, 0)
 1803.                         endif
 1809.                         $I_L1797_245 = 1 + $I_L1797_245
 1808.                         if ( $I_L1797_245 >= -2 + $t_S61 ) exit
 1808.                      enddo
 1808.                   endif
 1798.                   if ( (gridmap%base_addr)($t_S61, myfirstlat_f + $I_L1793_365, 0) + -(messages_f%base_addr)(4, $ipar_S59, 0) /= 0 ) then
 1799.                      (messages_f%base_addr)(2, $ipar_S59, 0) = ( -1 + $t_S61 )
 1800.                      if ( (messages_f%base_addr)(4, $ipar_S59, 0) + -myid /= 0 ) then
 1800.                         $ipar_S59 = 1 + $ipar_S59
 1800.                      endif
 1801.                      (messages_f%base_addr)(1, $ipar_S59, 0) = $t_S61
 1802.                      (messages_f%base_addr)(3, $ipar_S59, 0) = ( myfirstlat_f + $I_L1793_365 )
 1803.                      (messages_f%base_addr)(4, $ipar_S59, 0) = (gridmap%base_addr)($t_S61, myfirstlat_f + $I_L1793_365, 0)
 1803.                   endif
 1806.                   (messages_f%base_addr)(2, $ipar_S59, 0) = $t_S61
 1807.                   if ( (messages_f%base_addr)(4, $ipar_S59, 0) + -myid /= 0 ) then
 1807.                      $ipar_S59 = 1 + $ipar_S59
 1807.                   endif
 1807.                endif
 1810.                $I_L1793_365 = 1 + $I_L1793_365
 1809.                if ( $I_L1793_365 >= 1 + mylastlat_f + -myfirstlat_f ) exit
 1809.             enddo
 1809.          endif
 1812.          if ( -1 + $ipar_S59 > ndim_f ) then
 1813.             $Unit_temp_O2 = nfprt
 1813.             $_IOitem_P3(0) = ndim_f
 1813.             $_IOitem_P3(1) = -1 + $ipar_S59
 1813.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' ndim_f, ipar  ', 0x800600000000L ), _iotype( (&)$_IOitem_P3(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1814.             $Unit_temp_O3 = nfprt
 1814.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$100,  _substr(t$99,1,53), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(GridDecomposition)**', 0x800600000000L ) ) )
 1815.              _substr(t$552,1,23) = '**(GridDecomposition)**'
 1815.             call _stop(  _substr(t$552,1,23) )
 1815.          else
 1820.             if ( -3 + $ipar_S59 >= 0 ) then
 1820.                $I_L1820_385 = 0
 1820.                do
 1821.                   $I_L1821_367 = 0
 1821.                   do
 1822.                      if ( (messages_f%base_addr)(4, 2 + $I_L1820_385 + -$I_L1821_367, 0) >= (messages_f%base_addr)(4, 1 + $I_L1820_385 + -$I_L1821_367, 0) ) exit
 1823.                      $I_L1823_335 = 0
 1823. !dir$ ivdep
 1823.                      do
 1823.                         $aux_WR0_R1 = (messages_f%base_addr)(1 + $I_L1823_335, 1 + $I_L1820_385 + -$I_L1821_367, 0)
 1824.                         (messages_f%base_addr)(1 + $I_L1823_335, 1 + $I_L1820_385 + -$I_L1821_367, 0) = (messages_f%base_addr)(1 + $I_L1823_335, 2 + $I_L1820_385 + -$I_L1821_367, 0)
 1825.                         (messages_f%base_addr)(1 + $I_L1823_335, 2 + $I_L1820_385 + -$I_L1821_367, 0) = $aux_WR0_R1
 1823.                         $I_L1823_335 = 1 + $I_L1823_335
 1823.                         if ( $I_L1823_335 >= 4 ) exit
 1823.                      enddo
 1829.                      $I_L1821_367 = 1 + $I_L1821_367
 1823.                      if ( $I_L1821_367 >= 1 + $I_L1820_385 ) exit
 1823.                   enddo
 1830.                   $I_L1820_385 = 1 + $I_L1820_385
 1829.                   if ( $I_L1820_385 >= -2 + $ipar_S59 ) exit
 1829.                enddo
 1829.             endif
 1831.             (messproc_f%base_addr)(2, 0, 0) = 0
 1832.             if ( -1 + $ipar_S59 > 0 ) then
 1833.                (messproc_f%base_addr)(1, 1, 0) = (messages_f%base_addr)(4, 1, 0)
 1834.                nrecs_f = 1
 1835.                if ( -3 + $ipar_S59 >= 0 ) then
 1835.                   $I_L1835_247 = 0
 1835. !dir$ ivdep
 1835.                   do
 1836.                      if ( (messages_f%base_addr)(4, 1 + $I_L1835_247, 0) + -(messages_f%base_addr)(4, 2 + $I_L1835_247, 0) /= 0 ) then
 1837.                         nrecs_f = 1 + nrecs_f
 1838.                         (messproc_f%base_addr)(2, -1 + nrecs_f, 0) = ( 1 + $I_L1835_247 )
 1839.                         (messproc_f%base_addr)(1, nrecs_f, 0) = (messages_f%base_addr)(4, 2 + $I_L1835_247, 0)
 1839.                      endif
 1841.                      $I_L1835_247 = 1 + $I_L1835_247
 1840.                      if ( $I_L1835_247 >= -2 + $ipar_S59 ) exit
 1840.                   enddo
 1840.                endif
 1842.                (messproc_f%base_addr)(2, nrecs_f, 0) = -1 + $ipar_S59
 1842.             else
 1844.                nrecs_f = 0
 1844.             endif
 1849.             firstandlastlat%header%a_contig = 1
 1849.             firstandlastlat%dim_1%LB = 1
 1849.             firstandlastlat%dim_1%EX = 2
 1849.             firstandlastlat%dim_1%SM = 1
 1849.             firstandlastlat%dim_2%LB = 0
 1849.             firstandlastlat%dim_2%EX = ( max( 0, maxnodes ) )
 1849.             firstandlastlat%dim_2%SM = 2
 1849.             $_allo_P47(0) = 0x1000000000001L
 1849.             $_allo_P47(1) = loc( firstandlastlat )
 1849.             call __allocate( $_allo_P47, 0, 0, _fcd( 0, 0 ) )
 1850.             nlatsinproc_d%header%a_contig = 1
 1850.             nlatsinproc_d%dim_1%LB = 0
 1850.             nlatsinproc_d%dim_1%EX = ( max( 0, maxnodes ) )
 1850.             nlatsinproc_d%dim_1%SM = 1
 1850.             $_allo_P48(0) = 0x1000000000001L
 1850.             $_allo_P48(1) = loc( nlatsinproc_d )
 1850.             call __allocate( $_allo_P48, 0, 0, _fcd( 0, 0 ) )
 1851.             $lat_S68 = jmax / maxnodes
 1855.             $n_S66 = 0
 1856.             if ( maxnodes > 0 ) then
 1856.                $I_L1856_249 = 0
 1856. !dir$ unroll 4
 1856.                do
 1857.                   (firstandlastlat%base_addr)(1, $I_L1856_249, 0) = 1 + $n_S66
 1858.                   $n_S66 = $n_S66 + cvmg( 1 + $lat_S68, cvmg( $lat_S68, 1 + $lat_S68, $I_L1856_249 < maxnodes + ( jmax + -( maxnodes * $lat_S68 ) ) / 2 + -jmax + maxnodes * $lat_S68 ), $I_L1856_249 < ( jmax + -( maxnodes * $lat_S68 ) ) / 2 )
 1863.                   (firstandlastlat%base_addr)(2, $I_L1856_249, 0) = $n_S66
 1864.                   $I_L1856_249 = 1 + $I_L1856_249
 1856.                   if ( $I_L1856_249 >= maxnodes ) exit
 1856.                enddo
 1856.             endif
 1865.             $F_A96 = ( max( 0, maxnodes ) )
 1865.             if ( maxnodes > 0 ) then
 1865.                $I_L1865_337 = 0
 1865. !dir$ ivdep
 1865.                do
 1865.                   (nlatsinproc_d%base_addr)($I_L1865_337, 0) = 1 + (firstandlastlat%base_addr)(2, $I_L1865_337, 0) + -(firstandlastlat%base_addr)(1, $I_L1865_337, 0)
 1865.                   $I_L1865_337 = 1 + $I_L1865_337
 1865.                   if ( $I_L1865_337 >= $F_A96 ) exit
 1865.                enddo
 1865.             endif
 1866.             myfirstlat_diag = (firstandlastlat%base_addr)(1, myid, 0)
 1867.             mylastlat_diag = (firstandlastlat%base_addr)(2, myid, 0)
 1868.             myjmax_d = 1 + mylastlat_diag + -myfirstlat_diag
 1870.             $Reduc_A97 = 0xffffffff80000001
 1870.             $F_A99 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1870.             if ( _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) ) > 0 ) then
 1870.                $I_L1870_339 = 0
 1870. !dir$ ivdep
 1870.                do
 1870.                   $Reduc_A97 = max( $Reduc_A97, (nprocsingroup%base_addr)(1 + $I_L1870_339, 0) )
 1870.                   $I_L1870_339 = 1 + $I_L1870_339
 1870.                   if ( $I_L1870_339 >= $F_A99 ) exit
 1870.                enddo
 1870.             endif
 1870.             $Reduc_A100 = 0xffffffff80000001
 1870.             $F_A102 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1870.             if ( _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) ) > 0 ) then
 1870.                $I_L1870_341 = 0
 1870. !dir$ ivdep
 1870.                do
 1870.                   $Reduc_A100 = max( $Reduc_A100, (nprocsingroup%base_addr)(1 + $I_L1870_341, 0) )
 1870.                   $I_L1870_341 = 1 + $I_L1870_341
 1870.                   if ( $I_L1870_341 >= $F_A102 ) exit
 1870.                enddo
 1870.             endif
 1871.             mysends_diag%header%a_contig = 1
 1871.             mysends_diag%dim_1%LB = 1
 1871.             mysends_diag%dim_1%EX = 4
 1871.             mysends_diag%dim_1%SM = 1
 1871.             mysends_diag%dim_2%LB = 1
 1871.             mysends_diag%dim_2%EX = ( max( 0, 5 + $Reduc_A100 + 5 * $lat_S68 + $lat_S68 * $Reduc_A97 ) )
 1871.             mysends_diag%dim_2%SM = 4
 1871.             $_allo_P49(0) = 0x1000000000001L
 1871.             $_allo_P49(1) = loc( mysends_diag )
 1871.             call __allocate( $_allo_P49, 0, 0, _fcd( 0, 0 ) )
 1872.             mysendspr_diag%header%a_contig = 1
 1872.             mysendspr_diag%dim_1%LB = 1
 1872.             mysendspr_diag%dim_1%EX = 2
 1872.             mysendspr_diag%dim_1%SM = 1
 1872.             mysendspr_diag%dim_2%LB = 0
 1872.             mysendspr_diag%dim_2%EX = ( max( 0, 1 + nproc ) )
 1872.             mysendspr_diag%dim_2%SM = 2
 1872.             $_allo_P50(0) = 0x1000000000001L
 1872.             $_allo_P50(1) = loc( mysendspr_diag )
 1872.             call __allocate( $_allo_P50, 0, 0, _fcd( 0, 0 ) )
 1873.             myrecs_diag%header%a_contig = 1
 1873.             myrecs_diag%dim_1%LB = 1
 1873.             myrecs_diag%dim_1%EX = 4
 1873.             myrecs_diag%dim_1%SM = 1
 1873.             myrecs_diag%dim_2%LB = 1
 1873.             myrecs_diag%dim_2%EX = ( max( 0, 5 + $Reduc_A100 + 5 * $lat_S68 + $lat_S68 * $Reduc_A97 ) )
 1873.             myrecs_diag%dim_2%SM = 4
 1873.             $_allo_P51(0) = 0x1000000000001L
 1873.             $_allo_P51(1) = loc( myrecs_diag )
 1873.             call __allocate( $_allo_P51, 0, 0, _fcd( 0, 0 ) )
 1874.             myrecspr_diag%header%a_contig = 1
 1874.             myrecspr_diag%dim_1%LB = 1
 1874.             myrecspr_diag%dim_1%EX = 2
 1874.             myrecspr_diag%dim_1%SM = 1
 1874.             myrecspr_diag%dim_2%LB = 0
 1874.             myrecspr_diag%dim_2%EX = ( max( 0, 1 + nproc ) )
 1874.             myrecspr_diag%dim_2%SM = 2
 1874.             $_allo_P52(0) = 0x1000000000001L
 1874.             $_allo_P52(1) = loc( myrecspr_diag )
 1874.             call __allocate( $_allo_P52, 0, 0, _fcd( 0, 0 ) )
 1876.             $ij_S70 = 0
 1877.             if ( mylastlat_diag + -myfirstlat_diag >= 0 ) then
 1882.                $SC_imaxperj_I1 = imaxperj%dim_1%EX
 1882.                $SC_imaxperj_I2 = imaxperj%dim_1%LB
 1877.                $I_L1877_369 = 0
 1877.                do
 1878.                   $ij_S70 = 1 + $ij_S70
 1879.                   (myrecs_diag%base_addr)(1, $ij_S70, 0) = 1
 1880.                   (myrecs_diag%base_addr)(3, $ij_S70, 0) = ( myfirstlat_diag + $I_L1877_369 )
 1881.                   (myrecs_diag%base_addr)(4, $ij_S70, 0) = (gridmap%base_addr)(1, myfirstlat_diag + $I_L1877_369, 0)
 1882.                   $t_S72 = (imaxperj%base_addr)(myfirstlat_diag + $I_L1877_369, 0)
 1882.                   if ( -2 + $t_S72 >= 0 ) then
 1882.                      $I_L1882_251 = 0
 1882. !dir$ unroll 4
 1882.                      do
 1883.                         if ( (myrecs_diag%base_addr)(4, $ij_S70, 0) + -(gridmap%base_addr)(2 + $I_L1882_251, myfirstlat_diag + $I_L1877_369, 0) /= 0 ) then
 1884.                            (myrecs_diag%base_addr)(2, $ij_S70, 0) = ( 1 + $I_L1882_251 )
 1885.                            $ij_S70 = 1 + $ij_S70
 1886.                            (myrecs_diag%base_addr)(1, $ij_S70, 0) = ( 2 + $I_L1882_251 )
 1887.                            (myrecs_diag%base_addr)(3, $ij_S70, 0) = ( myfirstlat_diag + $I_L1877_369 )
 1888.                            (myrecs_diag%base_addr)(4, $ij_S70, 0) = (gridmap%base_addr)(2 + $I_L1882_251, myfirstlat_diag + $I_L1877_369, 0)
 1888.                         endif
 1890.                         $I_L1882_251 = 1 + $I_L1882_251
 1889.                         if ( $I_L1882_251 >= -1 + $t_S72 ) exit
 1889.                      enddo
 1889.                   endif
 1891.                   (myrecs_diag%base_addr)(2, $ij_S70, 0) = $t_S72
 1892.                   $I_L1877_369 = 1 + $I_L1877_369
 1890.                   if ( $I_L1877_369 >= 1 + mylastlat_diag + -myfirstlat_diag ) exit
 1890.                enddo
 1890.             endif
 1896.             if ( -2 + $ij_S70 >= 0 ) then
 1896.                $I_L1896_387 = 0
 1896.                do
 1897.                   $I_L1897_371 = 0
 1897.                   do
 1898.                      if ( (myrecs_diag%base_addr)(4, 2 + $I_L1896_387 + -$I_L1897_371, 0) >= (myrecs_diag%base_addr)(4, 1 + $I_L1896_387 + -$I_L1897_371, 0) ) exit
 1899.                      $I_L1899_343 = 0
 1899. !dir$ ivdep
 1899.                      do
 1899.                         $aux_WR0_R2 = (myrecs_diag%base_addr)(1 + $I_L1899_343, 1 + $I_L1896_387 + -$I_L1897_371, 0)
 1900.                         (myrecs_diag%base_addr)(1 + $I_L1899_343, 1 + $I_L1896_387 + -$I_L1897_371, 0) = (myrecs_diag%base_addr)(1 + $I_L1899_343, 2 + $I_L1896_387 + -$I_L1897_371, 0)
 1901.                         (myrecs_diag%base_addr)(1 + $I_L1899_343, 2 + $I_L1896_387 + -$I_L1897_371, 0) = $aux_WR0_R2
 1899.                         $I_L1899_343 = 1 + $I_L1899_343
 1899.                         if ( $I_L1899_343 >= 4 ) exit
 1899.                      enddo
 1905.                      $I_L1897_371 = 1 + $I_L1897_371
 1899.                      if ( $I_L1897_371 >= 1 + $I_L1896_387 ) exit
 1899.                   enddo
 1906.                   $I_L1896_387 = 1 + $I_L1896_387
 1905.                   if ( $I_L1896_387 >= -1 + $ij_S70 ) exit
 1905.                enddo
 1905.             endif
 1907.             $n_S77 = 0
 1908.             $i1_S78 = 0
 1909.             if ( $ij_S70 > 0 ) then
 1909.                $I_L1909_253 = 0
 1909. !dir$ ivdep
 1909.                do
 1910.                   if ( (myrecs_diag%base_addr)(4, 1 + $I_L1909_253, 0) + -myid == 0 ) then
 1911.                      $i1_S78 = ( 1 + $I_L1909_253 )
 1912.                      $n_S77 = 1 + $n_S77
 1912.                   endif
 1914.                   $I_L1909_253 = 1 + $I_L1909_253
 1913.                   if ( $I_L1909_253 >= $ij_S70 ) exit
 1913.                enddo
 1913.             endif
 1916.             if ( $ij_S70 + -$i1_S78 > 0 ) then
 1916.                $I_L1916_373 = 0
 1916.                do
 1917.                   $I_L1917_345 = 0
 1917. !dir$ ivdep
 1917.                   do
 1917.                      (myrecs_diag%base_addr)(1 + $I_L1917_345, 1 + $i1_S78 + $I_L1916_373 + -$n_S77, 0) = (myrecs_diag%base_addr)(1 + $I_L1917_345, 1 + $i1_S78 + $I_L1916_373, 0)
 1917.                      $I_L1917_345 = 1 + $I_L1917_345
 1917.                      if ( $I_L1917_345 >= 4 ) exit
 1917.                   enddo
 1918.                   $I_L1916_373 = 1 + $I_L1916_373
 1916.                   if ( $I_L1916_373 >= ( $ij_S70 + -$i1_S78 ) ) exit
 1916.                enddo
 1916.             endif
 1919.             (myrecspr_diag%base_addr)(2, 0, 0) = 0
 1920.             if ( $ij_S70 + -$n_S77 > 0 ) then
 1921.                (myrecspr_diag%base_addr)(1, 1, 0) = (myrecs_diag%base_addr)(4, 1, 0)
 1922.                nrecs_diag = 1
 1923.                if ( -2 + $ij_S70 + -$n_S77 >= 0 ) then
 1923.                   $I_L1923_255 = 0
 1923. !dir$ ivdep
 1923.                   do
 1924.                      if ( (myrecs_diag%base_addr)(4, 1 + $I_L1923_255, 0) + -(myrecs_diag%base_addr)(4, 2 + $I_L1923_255, 0) /= 0 ) then
 1925.                         nrecs_diag = 1 + nrecs_diag
 1926.                         (myrecspr_diag%base_addr)(2, -1 + nrecs_diag, 0) = ( 1 + $I_L1923_255 )
 1927.                         (myrecspr_diag%base_addr)(1, nrecs_diag, 0) = (myrecs_diag%base_addr)(4, 2 + $I_L1923_255, 0)
 1927.                      endif
 1929.                      $I_L1923_255 = 1 + $I_L1923_255
 1928.                      if ( $I_L1923_255 >= -1 + $ij_S70 + -$n_S77 ) exit
 1928.                   enddo
 1928.                endif
 1930.                (myrecspr_diag%base_addr)(2, nrecs_diag, 0) = $ij_S70 + -$n_S77
 1930.             else
 1932.                nrecs_diag = 0
 1932.             endif
 1405.             $_allo_P53(0) = 0xb000000000001L
 1405.             $_allo_P53(1) = loc( procingroup )
 1405.             $_allo_P53(2) = loc( nprocsingroup )
 1405.             $_allo_P53(3) = loc( npointsingroup )
 1405.             $_allo_P53(4) = loc( lon )
 1405.             $_allo_P53(5) = loc( lastloningroup )
 1405.             $_allo_P53(6) = loc( lastlatingroup )
 1405.             $_allo_P53(7) = loc( jbmaxingroup )
 1405.             $_allo_P53(8) = loc( iovlap )
 1405.             $_allo_P53(9) = loc( iaux )
 1405.             $_allo_P53(10) = loc( firstloningroup )
 1405.             $_allo_P53(11) = loc( firstlatingroup )
 1405.             call _dealloc( $_allo_P53, 0, 0, _fcd( 0, 0 ) )
 1405.          endif
 1405.       endif
 1935.       return
 1935.       end
 1935.       
  355.       
  355.       module sizes
  355.       end
  355.       
