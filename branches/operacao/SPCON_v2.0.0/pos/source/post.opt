       !        
       !        Cray Inc. Decompilation
       !        WARNING - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  post.f90
       !        File                  :  post.opt
       !        Format                :  Fortran
       !        Target                :  X86, 64-bit
       !        
    6.       
    6.       program globalmodelpostprocessing
   25.       t$11(1) = 2
   25.       t$12(1) = 0
   25.       t$13(1) = 0
   25.       t$8(1) = int( loc( t$43 ), 8 )
   25.       t$9(1) = 0
   25.       t$10(1) = int( loc( t$7 ), 8 )
   25.       t$44 = __get_dynamic_type( 2, t$8(1), t$11(1), 1, t$9(1), t$10(1), t$12(1), t$13(1) )
   41.       wt%header%a_contig = 1
   41.       wt%dim_1%LB = 0
   41.       wt%dim_1%EX = 1
   41.       wt%dim_1%SM = 29
   41.       $_allo_P0(0) = 0x1000000000001L
   41.       $_allo_P0(1) = loc( wt )
   41.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
   41.       (wt%base_addr)(0, 0)%timecpu = $_StaticDV_P1
   41.       (wt%base_addr)(0, 0)%timecpu%base_addr = pointer to array[1] of real( 0 )
   41.       (wt%base_addr)(0, 0)%timecpu%header%el_len = 32
   41.       (wt%base_addr)(0, 0)%timecpu%header%assoc = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%ptr_alloc = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%p_or_a = 1
   41.       (wt%base_addr)(0, 0)%timecpu%header%a_contig = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%n_dim = 1
   41.       (wt%base_addr)(0, 0)%timecpu%header%orig_base = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%orig_size = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%n_codim = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%dv_versn = 2
   41.       (wt%base_addr)(0, 0)%timecpu%header%dv_smunit = 32
   41.       (wt%base_addr)(0, 0)%timecpu%header%d_type = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%n_params = 0
   41.       (wt%base_addr)(0, 0)%timecpu%header%d_type_idx = 12
   41.       (wt%base_addr)(0, 0)%timecpu%dim_1%LB = 1
   41.       (wt%base_addr)(0, 0)%timecpu%dim_1%EX = 0
   41.       (wt%base_addr)(0, 0)%timecpu%dim_1%SM = 1
   41.       (wt%base_addr)(0, 0)%timewall = $_StaticDV_P2
   41.       (wt%base_addr)(0, 0)%timewall%base_addr = pointer to array[1] of real( 0 )
   41.       (wt%base_addr)(0, 0)%timewall%header%el_len = 32
   41.       (wt%base_addr)(0, 0)%timewall%header%assoc = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%ptr_alloc = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%p_or_a = 1
   41.       (wt%base_addr)(0, 0)%timewall%header%a_contig = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%n_dim = 1
   41.       (wt%base_addr)(0, 0)%timewall%header%orig_base = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%orig_size = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%n_codim = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%dv_versn = 2
   41.       (wt%base_addr)(0, 0)%timewall%header%dv_smunit = 32
   41.       (wt%base_addr)(0, 0)%timewall%header%d_type = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%n_params = 0
   41.       (wt%base_addr)(0, 0)%timewall%header%d_type_idx = 12
   41.       (wt%base_addr)(0, 0)%timewall%dim_1%LB = 1
   41.       (wt%base_addr)(0, 0)%timewall%dim_1%EX = 0
   41.       (wt%base_addr)(0, 0)%timewall%dim_1%SM = 1
   41.       (wt%base_addr)(0, 0)%name = $_StaticDV_P3
   41.       (wt%base_addr)(0, 0)%name%base_addr = 0
   41.       (wt%base_addr)(0, 0)%name%header%el_len = 16
   41.       (wt%base_addr)(0, 0)%name%header%assoc = 0
   41.       (wt%base_addr)(0, 0)%name%header%ptr_alloc = 0
   41.       (wt%base_addr)(0, 0)%name%header%p_or_a = 1
   41.       (wt%base_addr)(0, 0)%name%header%a_contig = 0
   41.       (wt%base_addr)(0, 0)%name%header%n_dim = 1
   41.       (wt%base_addr)(0, 0)%name%header%orig_base = 0
   41.       (wt%base_addr)(0, 0)%name%header%orig_size = 0
   41.       (wt%base_addr)(0, 0)%name%header%n_codim = 0
   41.       (wt%base_addr)(0, 0)%name%header%dv_versn = 2
   41.       (wt%base_addr)(0, 0)%name%header%dv_smunit = 8
   41.       (wt%base_addr)(0, 0)%name%header%d_type = 0
   41.       (wt%base_addr)(0, 0)%name%header%n_params = 0
   41.       (wt%base_addr)(0, 0)%name%header%d_type_idx = 23
   41.       (wt%base_addr)(0, 0)%name%dim_1%LB = 1
   41.       (wt%base_addr)(0, 0)%name%dim_1%EX = 0
   41.       (wt%base_addr)(0, 0)%name%dim_1%SM = 1
   43.       call createwatch( (wt%base_addr)(0, 0), 1, 1 )
   44.        _substr(t$21,1,9) = 'Time     '
   44.       call namewatch( (wt%base_addr)(0, 0), 1,  _substr(t$21,1,9) )
   48.       call initparameters
   49.       call initfiles
   50.       call initpostloop
   51.       call createprblsize
   52.       call createspectralrep
   53.       call creategaussrep
   54.       call createfft
   55.       call createlegtrans
   56.       call createconversion
   57.       call creategausssigma
   58.       call initareainterpolation
   61.       if ( tables_readed == .false. ) then
   61.          call init_tables(  _substr(datalib,1,128) )
   61.       endif
   63.       $Unit_temp_O0 = nfprt
   63.       $IOitem_O1 = -1 + mend1
   63.       _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$2,  _substr(t$1,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' Post-Processing Resolution: T', 0x800600000000L ), _iotype( $IOitem_O1, 0x2000200000000L ), _iotype( 'L', 0x800600000000L ), _iotype( kmax, 0x2000200000000L ) ) )
   67.       $t_S2 = nffrs
   67.       $t_S3 = nfend
   67.       if ( nfend + -nffrs >= 0 ) then
   67.          $I_L67_4 = 0
   67.          do
   67.             nfile = ( $t_S2 + $I_L67_4 )
   68.             $Unit_temp_O2 = nfprt
   68.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$4,  _substr(t$3,1,6), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' nFile = ', 0x800600000000L ), _iotype( nfile, 0x2000200000000L ) ) )
   69.             t$26 = ( $t_S2 + $I_L67_4 )
   69.             call postgl( nffrs, nfbeg, nfend, t$26 )
   70.             $Unit_temp_O3 = nfprt
   70.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$6,  _substr(t$5,1,7), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' Advanced Time Loop', 0x800600000000L ) ) )
   71.             $I_L67_4 = 1 + $I_L67_4
   69.             if ( $I_L67_4 >= 1 + $t_S3 + -$t_S2 ) exit
   69.          enddo
   69.       endif
   76.        _substr(t$27,1,21) = 'TempoPosProcessamento'
   76.       call dumpwatch( (wt%base_addr)(0, 0), unitdump,  _substr(t$27,1,21) )
   77.       call destroywatch( (wt%base_addr)(0, 0) )
   81.       call _end
   81.       return
   81.       end
   81.       
