%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/GridHistory.f90
Compiled : 10/22/10  10:31:45
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmda -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps GridHistory.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/GridHistory.f90
Date     : 10/22/2010  10:32:07


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,nomodinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_8480/GridHistory.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.             !
    2.             !  $Author: pkubota $
    3.             !  $Date: 2009/03/03 16:36:38 $
    4.             !  $Revision: 1.17 $
    5.             !
    6.             MODULE GridHistory
    7.             
    8.               USE Parallelism, ONLY: &
    9.                    myid,             &
   10.                    maxNodes
   11.             
   12.               USE Constants, ONLY: &
   13.                    ngfld,&
   14.                    grav,i8,r8
   15.             
   16.               USE InputOutput, ONLY: &
   17.                    cnvray
   18.             
   19.               USE Communications, ONLY: &
   20.                    Collect_Grid_His
   21.             
   22.               USE Options, ONLY: &
   23.                    yrl       , &
   24.                    monl      , &
   25.                    nfprt     , &
   26.                    nferr     , &
   27.                    nfctrl    , &
   28.                    fNameGHLoc, &
   29.                    fNameGHTable, &
   30.                    start       , &
   31.                    TruncLev
   32.             
   33.               USE Utils, ONLY: &
   34.                    tmstmp2   , &
   35.                    lati
   36.             
   37.               USE Sizes, ONLY: &
   38.                    myfirstlat, &
   39.                    mylastlat,  &
   40.                    myfirstlon, &
   41.                    mylastlon,  &
   42.                    gridmap,    &
   43.                    nodehasj
   44.             
   45.             
   46.               USE IOLowLevel, ONLY: &
   47.                    WriteGrdHist,&
   48.                    WrTopoGrdHist
   49.             
   50.             
   51.               IMPLICIT NONE
   52.             
   53.               INCLUDE 'mpif.h'
   54.             
   55.               PRIVATE
   56.             
   57.               PUBLIC :: InitGridHistory
   58.               PUBLIC :: StoreGridHistory
   59.               PUBLIC :: StoreMaskedGridHistory
   60.               PUBLIC :: WriteGridHistory
   61.               PUBLIC :: TurnOnGridHistory
   62.               PUBLIC :: TurnOffGridHistory
   63.               PUBLIC :: IsGridHistoryOn
   64.               PUBLIC :: WriteGridHistoryTopo
   65.             
   66.               INTERFACE StoreGridHistory
   67.                  MODULE PROCEDURE Store2D, Store1D, Store2DV, Store1DV
   68.               END INTERFACE
   69.             
   70.               !------------------------------
   71.               ! Module GridHistory
   72.               !------------------------------
   73.               !
   74.               ! The GridHistory module  has the function of to extract
   75.               ! atmospheric fields during the simulation with the GCM.
   76.               !
   77.               ! The available atmospheric fields to be extracted during
   78.               ! the simulation had been placed on Type "AvailFields",
   79.               ! that it contains variables that describe the characteristics
   80.               ! of each field, described bellow:
   81.               !
   82.               ! FldsName => Name of the meteorological available fields
   83.               ! SurfFlds => It defines if the variable is of surface
   84.               !             or has other layers
   85.               ! UnGraFld => Code of field units used at conversion
   86.               ! tfrmgf   => Time frame grads field
   87.               ! GradsFld => Name of the used meteorological fields in
   88.               !             the visualization, with software grads
   89.               ! LyrsFlds => It stores the number of levels for each
   90.               !             meteorological field
   91.               ! LocGrFld => It locates in the second dimension of the
   92.               !             diagnostic variable "dignos", the initial
   93.               !             position of each meteorological field
   94.               ! IsReqFld => It indicates which meteorological fields is
   95.               !             required to compose grid history point
   96.               !
   97.               TYPE AvailFields
   98.                  CHARACTER(LEN=40 ) :: FldsName ! field name                   FldsName
   99.                  LOGICAL            :: SurfFlds ! if surface field or not      LyrsFlds
  100.                  INTEGER            :: UnGraFld ! code of field units          UnGraFld
  101.                  CHARACTER(LEN=1)   :: tfrmgf   ! time frame grads field       tfrmgf
  102.                  CHARACTER(LEN=4)   :: GradsFld ! field name for grads output  GradsFld
  103.                  INTEGER            :: LyrsFlds ! number of vertical levels
  104.                  INTEGER            :: LocGrFld ! total number of verticals in
  105.                  LOGICAL            :: IsReqFld ! if an available field is required
  106.               END TYPE AvailFields
  107.               TYPE(AvailFields) , ALLOCATABLE :: GHAF(:)
  108.               !------------------------------------
  109.               ! Grid points to collect and Store Grid History
  110.               !------------------------------------
  111.               !
  112.               ! Required fields are collected on selected grid points.
  113.               ! Each selected grid point has a name, longitude and
  114.               ! latitude.
  115.               !
  116.               ! Required fields at selected grid points are copied
  117.               ! into a data structure for a single time step. The
  118.               ! data structure is a rank two array; first dimension
  119.               ! is addressed by the selected grid point number;
  120.               ! second dimension is addressed by a combination of
  121.               ! vertical level and required field number.
  122.               !
  123.               ! PtCty   - grid point name        (contain the city name)
  124.               ! ptLon   - grid point longitude   (  0:360 deg.)    (private)
  125.               ! ptLat   - grid point latitude    (-90:90  deg.)    (private)
  126.               ! ptCoor  - grid point coordinates (character)       (private)
  127.               ! dignos  - It stores for each grid history point the
  128.               !           required meteorological fields
  129.               ! InReFd  - it stores the index for the required meteorological fields
  130.               !
  131.               !
  132.               TYPE GridHistPoint
  133.                  CHARACTER(LEN=40)              :: PtCty
  134.                  INTEGER                        :: ibLoc
  135.                  INTEGER                        :: jbLoc
  136.                  REAL(KIND=r8)                           :: ptLon
  137.                  REAL(KIND=r8)                           :: ptLat
  138.                  CHARACTER(LEN=11)              :: ptCoor
  139.                  REAL(KIND=r8)   , POINTER, DIMENSION(:) :: dignos
  140.                  INTEGER, POINTER, DIMENSION(:) :: InReFd
  141.               END TYPE GridHistPoint
  142.               TYPE(GridHistPoint) , ALLOCATABLE :: GPt(:)
  143.             
  144.               !
  145.               ! Mapping grid points into selected grid history points is
  146.               ! done by rank two array *MPt*, indexed by grid point
  147.               ! and block number. Array values are zero if the grid point
  148.               ! is not selected and the number of grid point history
  149.               ! (first dimension index of dignos) otherwise.
  150.               !
  151.               TYPE MapGrHist
  152.                  INTEGER                                    :: SumPt
  153.                  INTEGER,        POINTER, DIMENSION(:)      :: AlcPt
  154.               END TYPE MapGrHist
  155.               TYPE(MapGrHist), ALLOCATABLE:: MPt(:,:)
  156.               !
  157.               ! Available Grid History fields are computed for a set of
  158.               ! grid points concurrently. The set of computed grid points
  159.               ! may have some or none selected grid points for Grid History.
  160.               !
  161.               ! Rank two array *DoGrH*, indexed by available field and
  162.               ! block of grid point number, indicates if the available field
  163.               ! is required and if the block of computed grid points has
  164.               ! selected grid history points
  165.               !
  166.               LOGICAL, PUBLIC, ALLOCATABLE :: DoGrH(:,:)!(ngfld, jbMax)
  167.               !
  168.               ! Available Grid History Indexes
  169.               !
  170.               INTEGER, PUBLIC, PARAMETER :: nGHis_presfc =  1 ! surface pressure
  171.               INTEGER, PUBLIC, PARAMETER :: nGHis_tcanop =  2 ! canopy temperature
  172.               INTEGER, PUBLIC, PARAMETER :: nGHis_tgfccv =  3 ! ground/surface cover temperature
  173.               INTEGER, PUBLIC, PARAMETER :: nGHis_tgdeep =  4 ! deep soil temperature
  174.               INTEGER, PUBLIC, PARAMETER :: nGHis_swtsfz =  5 ! soil wetness of surface zone
  175.               INTEGER, PUBLIC, PARAMETER :: nGHis_swtrtz =  6 ! soil wetness of root zone
  176.               INTEGER, PUBLIC, PARAMETER :: nGHis_swtrcz =  7 ! soil wetness of recharge zone
  177.               INTEGER, PUBLIC, PARAMETER :: nGHis_mostca =  8 ! moisture store on canopy
  178.               INTEGER, PUBLIC, PARAMETER :: nGHis_mostgc =  9 ! moisture store on ground cover
  179.               INTEGER, PUBLIC, PARAMETER :: nGHis_snowdp = 10 ! snow depth
  180.               INTEGER, PUBLIC, PARAMETER :: nGHis_snowfl = 11 ! snowfall
  181.               INTEGER, PUBLIC, PARAMETER :: nGHis_rouglg = 12 ! roughness length
  182.               INTEGER, PUBLIC, PARAMETER :: nGHis_ustres = 13 ! surface zonal wind stress
  183.               INTEGER, PUBLIC, PARAMETER :: nGHis_vstres = 14 ! surface meridional wind stress
  184.               INTEGER, PUBLIC, PARAMETER :: nGHis_sheatf = 15 ! sensible heat flux from surface
  185.               INTEGER, PUBLIC, PARAMETER :: nGHis_lheatf = 16 ! latent heat flux from surface
  186.               INTEGER, PUBLIC, PARAMETER :: nGHis_toprec = 17 ! total precipitation
  187.               INTEGER, PUBLIC, PARAMETER :: nGHis_cvprec = 18 ! convective precipitation
  188.               INTEGER, PUBLIC, PARAMETER :: nGHis_swdtop = 19 ! incident short wave flux
  189.               INTEGER, PUBLIC, PARAMETER :: nGHis_lwutop = 20 ! outgoing long wave at top
  190.               INTEGER, PUBLIC, PARAMETER :: nGHis_lwdbot = 21 ! downward long wave at ground
  191.               INTEGER, PUBLIC, PARAMETER :: nGHis_lwubot = 22 ! upward long wave flux at ground
  192.               INTEGER, PUBLIC, PARAMETER :: nGHis_swutop = 23 ! upward short wave at top
  193.               INTEGER, PUBLIC, PARAMETER :: nGHis_swdbvb = 24 ! downward short wave flux at ground (vb)
  194.               INTEGER, PUBLIC, PARAMETER :: nGHis_swdbvd = 25 ! downward short wave flux at ground (vd)
  195.               INTEGER, PUBLIC, PARAMETER :: nGHis_swdbnb = 26 ! downward short wave flux at ground (nb)
  196.               INTEGER, PUBLIC, PARAMETER :: nGHis_swdbnd = 27 ! downward short wave flux at ground (nd)
  197.               INTEGER, PUBLIC, PARAMETER :: nGHis_vibalb = 28 ! visible beam albedo
  198.               INTEGER, PUBLIC, PARAMETER :: nGHis_vidalb = 29 ! visible diffuse albedo
  199.               INTEGER, PUBLIC, PARAMETER :: nGHis_nibalb = 30 ! near infrared beam albedo
  200.               INTEGER, PUBLIC, PARAMETER :: nGHis_nidalb = 31 ! near infrared diffuse albedo
  201.               INTEGER, PUBLIC, PARAMETER :: nGHis_vegtyp = 32 ! vegetation type
  202.               INTEGER, PUBLIC, PARAMETER :: nGHis_nrdcan = 33 ! net radiation of canopy
  203.               INTEGER, PUBLIC, PARAMETER :: nGHis_nrdgsc = 34 ! net radiation of ground surface/cover
  204.               INTEGER, PUBLIC, PARAMETER :: nGHis_coszen = 35 ! cosine of zenith angle
  205.               INTEGER, PUBLIC, PARAMETER :: nGHis_dragcf = 36 ! drag
  206.               INTEGER, PUBLIC, PARAMETER :: nGHis_mofres = 37 ! momentum flux resistance
  207.               INTEGER, PUBLIC, PARAMETER :: nGHis_casrrs = 38 ! canopy air spc to ref. lvl resistance
  208.               INTEGER, PUBLIC, PARAMETER :: nGHis_cascrs = 39 ! canopy air spc to canopy resistance
  209.               INTEGER, PUBLIC, PARAMETER :: nGHis_casgrs = 40 ! canopy air spc to ground resistance
  210.               INTEGER, PUBLIC, PARAMETER :: nGHis_canres = 41 ! canopy resistance
  211.               INTEGER, PUBLIC, PARAMETER :: nGHis_gcovrs = 42 ! ground cover resistance
  212.               INTEGER, PUBLIC, PARAMETER :: nGHis_bssfrs = 43 ! bare soil surface resistance
  213.               INTEGER, PUBLIC, PARAMETER :: nGHis_ecairs = 44 ! vapor pressure of canopy air space
  214.               INTEGER, PUBLIC, PARAMETER :: nGHis_tcairs = 45 ! temperature of canopy air space
  215.               INTEGER, PUBLIC, PARAMETER :: nGHis_tracan = 46 ! transpiration from canopy
  216.               INTEGER, PUBLIC, PARAMETER :: nGHis_inlocp = 47 ! interception loss from canopy
  217.               INTEGER, PUBLIC, PARAMETER :: nGHis_tragcv = 48 ! transpiration from ground cover
  218.               INTEGER, PUBLIC, PARAMETER :: nGHis_inlogc = 49 ! interception loss from ground cover
  219.               INTEGER, PUBLIC, PARAMETER :: nGHis_bsevap = 50 ! bare soil evaporation
  220.               INTEGER, PUBLIC, PARAMETER :: nGHis_shfcan = 51 ! sensible heat flux from canopy
  221.               INTEGER, PUBLIC, PARAMETER :: nGHis_shfgnd = 52 ! sensible heat flux from ground
  222.               INTEGER, PUBLIC, PARAMETER :: nGHis_canhea = 53 ! canopy heating rate
  223.               INTEGER, PUBLIC, PARAMETER :: nGHis_gcheat = 54 ! ground/surface cover heating rate
  224.               INTEGER, PUBLIC, PARAMETER :: nGHis_runoff = 55 ! runoff
  225.               INTEGER, PUBLIC, PARAMETER :: nGHis_hcseai = 56 ! heat conduction through sea ice
  226.               INTEGER, PUBLIC, PARAMETER :: nGHis_hsseai = 57 ! heat storage tendency over sea ice
  227.               INTEGER, PUBLIC, PARAMETER :: nGHis_uzonal = 58 ! zonal wind (u)
  228.               INTEGER, PUBLIC, PARAMETER :: nGHis_vmerid = 59 ! meridional wind (v)
  229.               INTEGER, PUBLIC, PARAMETER :: nGHis_temper = 60 ! virtual temperature
  230.               INTEGER, PUBLIC, PARAMETER :: nGHis_spchum = 61 ! specific humidity
  231.               INTEGER, PUBLIC, PARAMETER :: nGHis_swheat = 62 ! short wave radiative heating
  232.               INTEGER, PUBLIC, PARAMETER :: nGHis_lwheat = 63 ! long wave radiative heating
  233.               INTEGER, PUBLIC, PARAMETER :: nGHis_sslaht = 64 ! supersaturation latent heating
  234.               INTEGER, PUBLIC, PARAMETER :: nGHis_clheat = 65 ! convective latent heating
  235.               INTEGER, PUBLIC, PARAMETER :: nGHis_sclhea = 66 ! shallow convective heating
  236.               INTEGER, PUBLIC, PARAMETER :: nGHis_vdheat = 67 ! vertical diffusion heating
  237.               INTEGER, PUBLIC, PARAMETER :: nGHis_spstms = 68 ! supersaturation moisture source
  238.               INTEGER, PUBLIC, PARAMETER :: nGHis_cvmosr = 69 ! convective moisture source
  239.               INTEGER, PUBLIC, PARAMETER :: nGHis_shcvmo = 70 ! shallow convective moistening
  240.               INTEGER, PUBLIC, PARAMETER :: nGHis_vdmois = 71 ! vertical diffusion moistening
  241.               INTEGER, PUBLIC, PARAMETER :: nGHis_vduzon = 72 ! vertical diffusion du/dt
  242.               INTEGER, PUBLIC, PARAMETER :: nGHis_vdvmer = 73 ! vertical diffusion dv/dt
  243.               INTEGER, PUBLIC, PARAMETER :: nGHis_cloudc = 74 ! cloud cover
  244.               INTEGER, PUBLIC, PARAMETER :: nGHis_vdtclc = 75 ! vertical dist total cloud cover
  245.               INTEGER, PUBLIC, PARAMETER :: nGHis_uzonsf = 76 ! surface zonal wind (u)
  246.               INTEGER, PUBLIC, PARAMETER :: nGHis_vmersf = 77 ! surface meridional wind (v)
  247.               INTEGER, PUBLIC, PARAMETER :: nGHis_tvirsf = 78 ! surface virtual temperature
  248.               INTEGER, PUBLIC, PARAMETER :: nGHis_sphusf = 79 ! surface specific humidity
  249.               INTEGER, PUBLIC, PARAMETER :: nGHis_tep02m = 80 ! temp at 2-m from sfc layer
  250.               INTEGER, PUBLIC, PARAMETER :: nGHis_mxr02m = 81 ! especific humid at 2-m from sfc layer
  251.               INTEGER, PUBLIC, PARAMETER :: nGHis_zwn10m = 82 ! Zonal Wind at 10-m from surface layer
  252.               INTEGER, PUBLIC, PARAMETER :: nGHis_mwn10m = 83 ! Meridional wind at 10-m from surface layer
  253.               !
  254.               !
  255.               ! it is possible to select all available grid history
  256.               ! fields:
  257.               !
  258.               ! allghf - if all available fields are required    (private)
  259.               !
  260.               LOGICAL :: allghf
  261.               !
  262.               !----------------------------
  263.               ! Turning Grid History On/Off
  264.               !----------------------------
  265.               !
  266.               ! The input flag *grhflg* defines if this run will have
  267.               ! grid history turned on or off. (private)
  268.               !
  269.               LOGICAL :: grhflg
  270.               !
  271.               ! Whenever *grhflg* is turned on, there are timesteps
  272.               ! where Grid History will be collected, and there are
  273.               ! timesteps where grid history will not be collected.
  274.               ! These are controlled by the (private) variable
  275.               ! *grhOn*, that is turned on/off by TurnOnGridHistory
  276.               ! and TurnOffGridHistory. It is inquired by IsGridHistoryOn.
  277.               ! Default is GridHistory turned off.
  278.               !
  279.               LOGICAL              :: grhOn
  280.             
  281.               INTEGER              :: ngrfld    ! Number required fields                       (private)
  282.               INTEGER              :: nghsl     ! total number of verticals in *dignos*        (private)
  283.               INTEGER              :: ngpts     ! There are *ngpts* selected points            (private)
  284.               INTEGER              :: ngptslocal
  285.               INTEGER, ALLOCATABLE :: gptslocal(:)
  286.               INTEGER, ALLOCATABLE :: ngptsperjb(:)
  287.               INTEGER, ALLOCATABLE :: map(:)
  288.               INTEGER, ALLOCATABLE :: mapGlobal(:)
  289.               INTEGER, ALLOCATABLE :: procmap(:)
  290.               INTEGER, ALLOCATABLE :: iniperjb(:)
  291.               INTEGER, ALLOCATABLE :: ngptsperproc(:)
  292.               INTEGER              :: ngpts_new
  293.             
  294.               INTEGER              :: iMax
  295.               INTEGER              :: jMax
  296.               INTEGER              :: ibMax
  297.               INTEGER              :: jbMax
  298.               INTEGER,ALLOCATABLE  :: ibMaxPerJB(:)
  299.               INTEGER,ALLOCATABLE  :: iMaxPerJ  (:)
  300.               INTEGER, ALLOCATABLE :: ibPerIJ (:,:)
  301.               INTEGER, ALLOCATABLE :: jbPerIJ (:,:)
  302.               INTEGER              :: kMax
  303.             
  304.               CHARACTER(LEN=40), ALLOCATABLE :: PtCtyGlobal(:)
  305.               CHARACTER(LEN=18), ALLOCATABLE :: PtCoorGlobal(:)
  306.               REAL(KIND=r8)    , ALLOCATABLE :: PtLonGlobal(:)
  307.               REAL(KIND=r8)    , ALLOCATABLE :: PtLatGlobal(:)
  308.               INTEGER           :: jbLocMin(1)
  309.               INTEGER           :: IbLocMin(1)
  310.             
  311.             CONTAINS
  312.               SUBROUTINE InitGridHistFields
  313.                 ALLOCATE(GHAF(ngfld))
  314.                 ! field name
  315.             
  316.                 GHAF(1:ngfld)%FldsName= (/ "SURFACE PRESSURE                        ", &
  317.                      "CANOPY TEMPERATURE                      ", "GROUND/SURFACE COVER TEMPERATURE        ", &
  318.                      "DEEP SOIL TEMPERATURE                   ", "SOIL WETNESS OF SURFACE ZONE            ", &
  319.                      "SOIL WETNESS OF ROOT ZONE               ", "SOIL WETNESS OF RECHARGE ZONE           ", &
  320.                      "MOISTURE STORE ON CANOPY                ", "MOISTURE STORE ON GROUND COVER          ", &
  321.                      "SNOW DEPTH                              ", "SNOWFALL                                ", &
  322.                      "ROUGHNESS LENGTH                        ", "SURFACE ZONAL WIND STRESS               ", &
  323.                      "SURFACE MERIDIONAL WIND STRESS          ", "SENSIBLE HEAT FLUX FROM SURFACE         ", &
  324.                      "LATENT HEAT FLUX FROM SURFACE           ", "TOTAL PRECIPITATION                     ", &
  325.                      "CONVECTIVE PRECIPITATION                ", "INCIDENT SHORT WAVE FLUX                ", &
  326.                      "OUTGOING LONG WAVE AT TOP               ", "DOWNWARD LONG WAVE AT GROUND            ", &
  327.                      "UPWARD LONG WAVE FLUX AT GROUND         ", "UPWARD SHORT WAVE AT TOP                ", &
  328.                      "DOWNWARD SHORT WAVE FLUX AT GROUND (VB) ", "DOWNWARD SHORT WAVE FLUX AT GROUND (VD) ", &
  329.                      "DOWNWARD SHORT WAVE FLUX AT GROUND (NB) ", "DOWNWARD SHORT WAVE FLUX AT GROUND (ND) ", &
  330.                      "VISIBLE BEAM ALBEDO                     ", "VISIBLE DIFFUSE ALBEDO                  ", &
  331.                      "NEAR INFRARED BEAM ALBEDO               ", "NEAR INFRARED DIFFUSE ALBEDO            ", &
  332.                      "VEGETATION TYPE                         ", "NET RADIATION OF CANOPY                 ", &
  333.                      "NET RADIATION OF GROUND SURFACE/COVER   ", "COSINE OF ZENITH ANGLE                  ", &
  334.                      "DRAG                                    ", "MOMENTUM FLUX RESISTANCE                ", &
  335.                      "CANOPY AIR SPC TO REF. LVL RESISTANCE   ", "CANOPY AIR SPC TO CANOPY RESISTANCE     ", &
  336.                      "CANOPY AIR SPC TO GROUND RESISTANCE     ", "CANOPY RESISTANCE                       ", &
  337.                      "GROUND COVER RESISTANCE                 ", "BARE SOIL SURFACE RESISTANCE            ", &
  338.                      "VAPOR PRESSURE OF CANOPY AIR SPACE      ", "TEMPERATURE OF CANOPY AIR SPACE         ", &
  339.                      "TRANSPIRATION FROM CANOPY               ", "INTERCEPTION LOSS FROM CANOPY           ", &
  340.                      "TRANSPIRATION FROM GROUND COVER         ", "INTERCEPTION LOSS FROM GROUND COVER     ", &
  341.                      "BARE SOIL EVAPORATION                   ", "SENSIBLE HEAT FLUX FROM CANOPY          ", &
  342.                      "SENSIBLE HEAT FLUX FROM GROUND          ", "CANOPY HEATING RATE                     ", &
  343.                      "GROUND/SURFACE COVER HEATING RATE       ", "RUNOFF                                  ", &
  344.                      "HEAT CONDUCTION THROUGH SEA ICE         ", "HEAT STORAGE TENDENCY OVER SEA ICE      ", &
  345.                      "ZONAL WIND (U)                          ", "MERIDIONAL WIND (V)                     ", &
  346.                      "VIRTUAL TEMPERATURE                     ", "SPECIFIC HUMIDITY                       ", &
  347.                      "SHORT WAVE RADIATIVE HEATING            ", "LONG WAVE RADIATIVE HEATING             ", &
  348.                      "SUPERSATURATION LATENT HEATING          ", "CONVECTIVE LATENT HEATING               ", &
  349.                      "SHALLOW CONVECTIVE HEATING              ", "VERTICAL DIFFUSION HEATING              ", &
  350.                      "SUPERSATURATION MOISTURE SOURCE         ", "CONVECTIVE MOISTURE SOURCE              ", &
  351.                      "SHALLOW CONVECTIVE MOISTENING           ", "VERTICAL DIFFUSION MOISTENING           ", &
  352.                      "VERTICAL DIFFUSION DU/DT                ", "VERTICAL DIFFUSION DV/DT                ", &
  353.                      "CLOUD COVER                             ", "VERTICAL DIST TOTAL CLOUD COVER         ", &
  354.                      "SURFACE ZONAL WIND (U)                  ", "SURFACE MERIDIONAL WIND (V)             ", &
  355.                      "SURFACE VIRTUAL TEMPERATURE             ", "SURFACE SPECIFIC HUMIDITY               ", &
  356.                      "TEMP AT 2-M FROM SFC                    ", "SPECIFIC HUMID AT 2-M FROM SFC          ", &
  357.                      "ZONAL WIND AT 10-M FROM SFC             ", "MERIDIONAL WIND AT 10-M FROM SFC        "/)
  358.             
  359.                 ! surface field or not
  360.             
  361.  f-------<>     GHAF(1:ngfld)%SurfFlds=    (/ &
  362.                      .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , &
  363.                      .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , &
  364.                      .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , &
  365.                      .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , &
  366.                      .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. , &
  367.                      .TRUE. , .TRUE. , .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., &
  368.                      .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .FALSE., .TRUE. , .FALSE., .TRUE. , .TRUE. , &
  369.                      .TRUE. , .TRUE. , .TRUE. , .TRUE. , .TRUE. ,.TRUE.                                /)
  370.             
  371.                 ! units
  372.             
  373.  f-------<>     GHAF(1:ngfld)%UnGraFld=  (/ &
  374.                      131,  40,  40,  40,   0,   0,   0, 110, 110, 110, 120, &
  375.                      10 , 130, 130, 170, 170, 120, 120, 170, 170, 170, 170, &
  376.                      170, 170, 170, 170, 170,   0,   0,   0,   0,   0, 170, &
  377.                      170,   0, 200, 190, 190, 190, 190, 190, 190, 190, 131, &
  378.                      40 , 170, 170, 170, 170, 170, 170, 170, 170, 170, 120, &
  379.                      170, 170,  60,  60,  40,   0,  70,  70,  70,  70,  70, &
  380.                      70 ,  50,  50,  50,  50, 100, 100,   0,   0,  60,  60, &
  381.                      40 ,   0,  40,   0,  60,  60              /)
  382.             
  383.                 ! time frame
  384.             
  385.                 GHAF(1:ngfld)%tfrmgf =     (/ &
  386.                      "I", "I", "I", "I", "I", "I", "I", "I", "I", "I", "C", &
  387.                      "I", "C", "C", "P", "P", "C", "C", "C", "C", "C", "C", &
  388.                      "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", &
  389.                      "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "P", &
  390.                      "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", "P", &
  391.                      "C", "C", "I", "I", "I", "I", "C", "C", "C", "C", "C", &
  392.                      "C", "C", "C", "C", "C", "C", "C", "C", "C", "I", "I", &
  393.                      "I", "I", "I", "I", "I", "I" /)
  394.             
  395.                 ! grads names
  396.             
  397.                 GHAF(1:ngfld)%GradsFld =        (/&
  398.                      "PSLC", "TDSL", "TGSC", "TGDP", "USSL", "UZRS", "UZDS", "AUDL", "AUGC", "PNEV", "NEVE", &
  399.                      "ZORL", "USST", "VSST", "CSSF", "CLSF", "PREC", "PRCV", "FOCI", "ROLE", "OLIS", "OLES", &
  400.                      "ROCE", "CIVB", "CIVD", "CINB", "CIND", "ALVB", "ALVD", "ALIB", "ALID", "TIVG", "SRDL", &
  401.                      "SRGC", "CAZL", "DRAG", "RFLM", "RDNR", "RDAD", "RDAG", "RDSL", "RSGC", "RSBS", "PVDL", &
  402.                      "TADL", "TRDL", "PIDL", "TRGC", "PIGC", "EVBS", "CSDL", "CSGR", "TAQD", "TAQG", "RNOF", &
  403.                      "CAGM", "ACGM", "UVEL", "VVEL", "TEMV", "UMES", "AROC", "AROL", "CLSS", "CLCV", "ACVR", &
  404.                      "DVAQ", "FUSS", "FUCV", "UCVR", "DVUM", "DVTU", "DVTV", "CBNV", "VDCC", "UVES", "VVES", &
  405.                      "TEVS", "UESS", "TP2M", "QQ2M", "US2M", "VS2M" /)
  406.             
  407.             
  408.             
  409.               END SUBROUTINE InitGridHistFields
  410.             
  411.             
  412.             
  413.               SUBROUTINE InitGridHistory (del, idate, iov, &
  414.                    allghf_in, grhflg_in, nfghds, nfghloc, nfghdr,iMax_in,jMax_in,&
  415.                    ibMax_in,jbMax_in,ibPerIJ_in,jbPerIJ_in,kMax_in,ibMaxPerJB_in,iMaxPerJ_in)
  416.                 INTEGER,           INTENT(in) :: iMax_in
  417.                 INTEGER,           INTENT(in) :: jMax_in
  418.                 INTEGER,           INTENT(in) :: ibMax_in
  419.                 INTEGER,           INTENT(in) :: jbMax_in
  420.                 INTEGER,           INTENT(in) :: iov
  421.                 INTEGER,           INTENT(in) :: ibPerIJ_in(1-iov:iMax_in+iov,-1:jMax_in+2)
  422.                 INTEGER,           INTENT(in) :: jbPerIJ_in(1-iov:iMax_in+iov,-1:jMax_in+2)
  423.                 INTEGER,           INTENT(in) :: kMax_in
  424.                 REAL(KIND=r8),              INTENT(in) :: del(:)
  425.                 INTEGER,           INTENT(in) :: idate(4)
  426.                 LOGICAL,           INTENT(in) :: allghf_in
  427.                 LOGICAL,           INTENT(in) :: grhflg_in
  428.                 INTEGER,           INTENT(in) :: nfghds
  429.                 INTEGER,           INTENT(in) :: nfghloc
  430.                 INTEGER,           INTENT(in) :: nfghdr
  431.                 INTEGER,           INTENT(in) :: ibMaxPerJB_in(:)
  432.                 INTEGER,           INTENT(in) :: iMaxPerJ_in(:)
  433.             
  434.                 REAL(KIND=r8)                          :: Lat
  435.                 INTEGER, ALLOCATABLE          :: jslocal(:)
  436.                 INTEGER, ALLOCATABLE          :: islocal(:)
  437.             
  438.                 CHARACTER(len= *), PARAMETER :: h="**(InitGridHistory)**"
  439.                 CHARACTER(len=20), PARAMETER :: typgh='GRID POINT HISTORY  '
  440.                 CHARACTER(len= 4), PARAMETER :: iacc='SEQU'
  441.                 CHARACTER(len= 4), PARAMETER :: idev='TAPE'
  442.                 CHARACTER(LEN= 4), PARAMETER :: nexp='0003'
  443.                 CHARACTER(LEN=40)             :: rdesc
  444.                 INTEGER                       :: UniGraFld
  445.             
  446.                 REAL(KIND=r8)    :: pi
  447.                 INTEGER :: n, nloc, nl
  448.                 INTEGER :: i
  449.                 INTEGER :: j
  450.                 INTEGER :: k
  451.                 INTEGER :: ib
  452.                 INTEGER :: jb
  453.                 INTEGER :: nn
  454.                 INTEGER :: ierr
  455.                 LOGICAL :: notfound
  456.                 REAL(KIND=r8)              :: dlon   (iMax_in)
  457.                 REAL(KIND=r8)              :: dlat   (jMax_in)
  458.             
  459.  I              CALL InitGridHistFields
  460.             
  461.                 pi = 4.0_r8 * ATAN(1.0_r8)
  462.                 ALLOCATE (ibPerIJ(iMax_in ,jMax_in ))
  463.  V-------<>     ibPerIJ=-1
  464.                 ALLOCATE (jbPerIJ(iMax_in ,jMax_in ))
  465.  V-------<>     jbPerIJ=-1
  466.                 ALLOCATE (ibMaxPerJB(jbMax_in))
  467.  V-------<>     ibMaxPerJB=-1
  468.                 ALLOCATE (iMaxPerJ(jMax_in))
  469.  V-------<>     iMaxPerJ = -1
  470.             
  471.                 ! store input data
  472.             
  473.                 allghf = allghf_in
  474.                 grhflg = grhflg_in
  475.                 grhOn  = .FALSE.
  476.             
  477.                 iMax    = iMax_in
  478.                 jMax    = jMax_in
  479.                 ibMax   = ibMax_in
  480.                 jbMax   = jbMax_in
  481.  V-------<>     ibPerIJ = ibPerIJ_in(1:iMax,1:jMax)
  482.  V-------<>     jbPerIJ = jbPerIJ_in(1:iMax,1:jMax)
  483.                 iMaxPerJ= iMaxPerJ_in
  484.                 kMax    = kMax_in
  485.                 ibMaxPerJB=ibMaxPerJB_in
  486.             
  487.                 ! if grid history not required, fix data structure and return
  488.             
  489.                 IF (.NOT. grhflg) THEN
  490.                    ALLOCATE (DoGrH(ngfld, jbMax))
  491.  V-------<>        DoGrH = .FALSE.
  492.                    RETURN
  493.                 END IF
  494.             
  495.                 ! # vertical levels of available grid history fields
  496.             
  497.  1--------<     DO n = 1, ngfld
  498.  1                 IF (GHAF(n)%SurfFlds) THEN
  499.  1                    GHAF(n)%LyrsFlds = 1
  500.  1                 ELSE
  501.  1                    GHAF(n)%LyrsFlds = kMax
  502.  1                 END IF
  503.  1-------->     END DO
  504.             
  505.                 ! dump available fields
  506.             
  507.                 IF (nfctrl(55) >= 1) THEN
  508.                    WRITE(UNIT=nfprt,FMT=110)
  509.  1--------<        DO n = 1, ngfld
  510.  1                    WRITE(UNIT=nfprt,FMT=140) n,  GHAF(n)%FldsName, &
  511.  1                         GHAF(n)%LyrsFlds, &
  512.  1                         GHAF(n)%UnGraFld, &
  513.  1                         GHAF(n)%tfrmgf  , &
  514.  1                         GHAF(n)%GradsFld
  515.  1-------->        END DO
  516.                 END IF
  517.             
  518.                 ! # required fields
  519.             
  520.                 OPEN(UNIT=nfghds,FILE=TRIM(fNameGHTable),FORM='formatted',ACCESS='sequential',&
  521.                      ACTION='read',STATUS='old', IOSTAT=ierr)
  522.                 IF (ierr /= 0) THEN
  523.                    WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  524.                         TRIM(fNameGHTable), ierr
  525.                    STOP "**(ERROR)**"
  526.                 END IF
  527.             
  528.                 IF (allghf) THEN
  529.                    ngrfld = ngfld
  530.                 ELSE IF (nfghds  > 0) THEN
  531.                    ngrfld = 0
  532.  1--------<        DO
  533.  1                    READ (UNIT=nfghds, FMT=225, IOSTAT=ierr)
  534.  1                    IF (ierr == 0) THEN
  535.  1                       ngrfld = ngrfld + 1
  536.  1                    ELSE IF (ierr > 0) THEN
  537.  1                       WRITE(UNIT=nfprt, FMT="(a,' error reading unit ',i4)") h, nfghds
  538.  1                       WRITE(UNIT=nferr, FMT="(a,' error reading unit ',i4)") h, nfghds
  539.  1                       STOP h
  540.  1                    ELSE
  541.  1                       EXIT
  542.  1                    END IF
  543.  1-------->        END DO
  544.                 END IF
  545.             
  546.                 IF (ngrfld == 0 .AND. .NOT. allghf) THEN
  547.                    WRITE(UNIT=nfprt,FMT=2135)
  548.                    WRITE(UNIT=nferr,FMT=2135)
  549.                    STOP h
  550.                 END IF
  551.             
  552.                 ! initialize required field data structure
  553.             
  554.             
  555.                 IF (allghf) THEN
  556.  r8-------<        DO n=1,ngfld
  557.  r8                   GHAF(n)%IsReqFld = .TRUE.
  558.  r8------->        END DO
  559.                 ELSE
  560.                    GHAF(1:ngfld)%IsReqFld = .FALSE.
  561.                    REWIND nfghds
  562.                    IF (nfctrl(55) > 0) WRITE(UNIT=nfprt,FMT=210)
  563.  1--------<        DO n = 1, ngrfld
  564.  1                    READ (UNIT=nfghds, FMT=225) rdesc, UniGraFld
  565.  1                    IF (nfctrl(55) > 0) WRITE(UNIT=nfprt,FMT=240) n, rdesc, UniGraFld
  566.  1                    notfound = .TRUE.
  567.  1 2------<           DO nn = 1, ngfld
  568.  1 2                     IF ( rdesc == GHAF(nn)%FldsName) THEN
  569.  1 2                        GHAF(nn)%IsReqFld   = .TRUE.
  570.  1 2                        Notfound  = .FALSE.
  571.  1 2                        EXIT
  572.  1 2                     END IF
  573.  1 2------>           END DO
  574.  1                    IF (notfound) THEN
  575.  1                       WRITE(UNIT=nfprt, FMT="(a,' required field ',a,' not available')") h, TRIM(rdesc)
  576.  1                       WRITE(UNIT=nferr, FMT="(a,' required field ',a,' not available')") h, TRIM(rdesc)
  577.  1                       STOP h
  578.  1                    END IF
  579.  1-------->        END DO
  580.                 END IF
  581.             
  582.                 ! where to store each required field and total # of verticals
  583.             
  584.                 nghsl = 0
  585.  r4-------<     DO n = 1, ngfld
  586.  r4                IF (GHAF(n)%IsReqFld) THEN
  587.  r4                   GHAF(n)%LocGrFld = nghsl + 1
  588.  r4                   nghsl    = nghsl + GHAF(n)%LyrsFlds
  589.  r4                ELSE
  590.  r4                   GHAF(n)%LocGrFld = 0
  591.  r4                END IF
  592.  r4------->     END DO
  593.             
  594.                 ! # grid points to collect grid history
  595.             
  596.                 OPEN(UNIT=nfghloc,FILE=TRIM(fNameGHLoc),FORM='formatted',ACCESS='sequential',&
  597.                      ACTION='read',STATUS='old', IOSTAT=ierr)
  598.                 IF (ierr /= 0) THEN
  599.                    WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  600.                         TRIM(fNameGHLoc), ierr
  601.                    STOP "**(ERROR)**"
  602.                 END IF
  603.                 ngpts = 0
  604.  1--------<     DO
  605.  1                 READ (UNIT=nfghloc, FMT='(A40,2F11.5,1X,A11)', IOSTAT=ierr)
  606.  1                 IF (ierr == 0) THEN
  607.  1                    ngpts = ngpts + 1
  608.  1                 ELSE IF (ierr > 0) THEN
  609.  1                    WRITE(UNIT=nfprt, FMT="(a,' error reading unit ',i4)") h, nfghloc
  610.  1                    WRITE(UNIT=nferr, FMT="(a,' error reading unit ',i4)") h, nfghloc
  611.  1                    STOP h
  612.  1                 ELSE
  613.  1                    EXIT
  614.  1                 END IF
  615.  1-------->     END DO
  616.                 !
  617.                 !  detect which are the points to handle in this process
  618.                 !
  619.                 ALLOCATE(gptslocal(ngpts))
  620.                 ALLOCATE(ngptsperproc(0:maxnodes-1))
  621.                 ALLOCATE(procmap(ngpts))
  622.                 ALLOCATE(jslocal(ngpts))
  623.                 ALLOCATE(islocal(ngpts))
  624.                 ALLOCATE(PtCtyGlobal(ngpts))
  625.                 ALLOCATE(PtCoorGlobal(ngpts))
  626.                 ALLOCATE(PtLonGlobal(ngpts))
  627.                 ALLOCATE(PtLatGlobal(ngpts))
  628.             
  629.                 ! fill grid point data structure
  630.             
  631.                 REWIND nfghloc
  632.  1--------<     DO n = 1, ngpts
  633.  1                 READ (nfghloc,*) PtCtyGlobal(n),PtLonGlobal(n),PtLatGlobal(n)
  634.  1-------->     END DO
  635.             
  636.  VAr4 I--->     CALL GridHistLabel (ngpts, iMax,jMax,iMaxPerJ,PtLonGlobal, PtLatGlobal, PtCoorGlobal)
  637.             
  638.                 ngptslocal = 0
  639.  V-------<>     ngptsperproc = 0
  640.  1--------<     DO n = 1, ngpts
  641.  1                 Lat=-(PtLatGlobal (n) - 90.0_r8)*(pi/180.0_r8)
  642.  1 Vr4----<        DO j=1,jMax
  643.  1 Vr4                dlat(j) = ABS(lati(j) - Lat)
  644.  1 Vr4---->        END DO
  645.  1 w-----<>        jblocmin    = MINLOC (dlat)
  646.  1                 j           = jblocmin(1)
  647.  1 Vr4----<        DO i=1,iMaxPerJ(j)
  648.  1 Vr4                dlon(i) = ABS(((pi*((i-1)*360.0_r8/REAL(iMaxPerJ(j),r8)))/180.0_r8) &
  649.  1 Vr4                     &         -((pi*PtLonGlobal(n))/180.0_r8))
  650.  1 Vr4---->        END DO
  651.  1 w-----<>        IbLocMin=MINLOC (dlon)
  652.  1                 i = IbLocMin(1)
  653.  1                 procmap(n) = gridmap(i,j)
  654.  1                 ngptsperproc(gridmap(i,j)) = ngptsperproc(gridmap(i,j)) + 1
  655.  1          
  656.  1                 IF (gridmap(i,j).eq.myid) THEN
  657.  1                    ngptslocal            = ngptslocal + 1
  658.  1                    gptslocal(ngptslocal) = n
  659.  1                    jslocal(ngptslocal)   = j
  660.  1                    islocal(ngptslocal)   = i
  661.  1                 ENDIF
  662.  1-------->     END DO
  663.                 ALLOCATE(mapglobal(ngpts))
  664.                 i = 1
  665.  1--------<     DO k=0,maxnodes-1
  666.  1 2------<        DO n=1,ngpts
  667.  1 2                  IF(procmap(n).eq.k) THEN
  668.  1 2                     mapglobal(i) = n
  669.  1 2                     i = i + 1
  670.  1 2                  ENDIF
  671.  1 2------>        ENDDO
  672.  1-------->     ENDDO
  673.             
  674.                 ! sort grid points per latitude
  675.             
  676.                 ALLOCATE(map(ngptslocal))
  677.                 nloc = 0
  678.  1--------<     DO j=myfirstlat,mylastlat
  679.  1 2------<        DO i=myfirstlon(j),mylastlon(j)
  680.  1 2 3----<           DO n=1,ngptslocal
  681.  1 2 3                   IF (jslocal(n).eq.j.and.islocal(n).eq.i) THEN
  682.  1 2 3                      nloc = nloc + 1
  683.  1 2 3                      !compacta os pontos no array local
  684.  1 2 3                      map(n)              = nloc
  685.  1 2 3                   ENDIF
  686.  1 2 3---->           ENDDO
  687.  1 2------>        ENDDO
  688.  1-------->     ENDDO
  689.             
  690.                 ! allocate grid point data structure
  691.             
  692.                 ALLOCATE(GPt(ngptslocal))
  693.                 ALLOCATE(ngptsperjb(jbmax))
  694.                 ALLOCATE(iniperjb(jbmax))
  695.             
  696.                 ! fill grid point data structure
  697.             
  698.  r2-------<     DO n=1,ngptslocal
  699.  r2                nloc = map(n)
  700.  r2                GPt(nloc)%PtCty  = PtCtyGlobal (gptslocal(n))
  701.  r2                GPt(nloc)%ptLon  = PtLonGlobal (gptslocal(n))
  702.  r2                GPt(nloc)%ptLat  =-(PtLatGlobal(gptslocal(n)) - 90.0_r8)*(pi/180.0_r8)! (0-pi)--(N-S)
  703.  r2                GPt(nloc)%ptCoor = PtCoorGlobal(gptslocal(n))(1:11)
  704.  r2------->     ENDDO
  705.             
  706.             
  707.                 IF (nfctrl(55) > 0) THEN
  708.                    WRITE(UNIT=nfprt,FMT=520)
  709.  1--------<        DO nloc=1,ngptslocal
  710.  1                    n = map(nloc)
  711.  1                    WRITE (UNIT=nfprt, FMT='(1X,2I4,1X,A40,2F11.5,1X,A11)')&
  712.  1                         &        myid,n, GPt(n)%PtCty, GPt(n)%ptLon, &
  713.  1                         &                90.0_r8- (180.0_r8/pi)*GPt(n)%ptLat, GPt(n)%ptCoor
  714.  1-------->        ENDDO
  715.                 END IF
  716.             
  717.                 ! allocate and initialize grid history buffer
  718.             
  719.  1--------<     DO n = 1, ngptslocal
  720.  1  I              CALL NULLIFY_dignos(GPt( n ),nghsl  )
  721.  1  I              CALL NULLIFY_InReFd(GPt( n ),ngrfld )
  722.  1-------->     END DO
  723.             
  724.  1--------<     DO nloc = 1, ngptslocal
  725.  1                 n = map(nloc)
  726.  1                 ib=0
  727.  1 2------<        DO nn = 1, ngfld
  728.  1 2                  IF (  GHAF(nn)%IsReqFld ) THEN
  729.  1 2                     ib=ib+1
  730.  1 2                     GPt( n )%InReFd(ib) = nn
  731.  1 2                  END IF
  732.  1 2------>        END DO
  733.  1-------->     END DO
  734.                 !
  735.                 ! computes the indices for grid history points
  736.                 !
  737.  V-------<>     ngptsperjb = 0
  738.  1--------<     DO nloc = 1, ngptslocal
  739.  1                 n = map(nloc)
  740.  1                 GPt(n)%ibLoc =  ibPerIJ(  islocal(nloc) , jslocal(nloc)  )
  741.  1                 GPt(n)%jbLoc =  jbPerIJ(  islocal(nloc) , jslocal(nloc)  )
  742.  1                 ngptsperjb( GPt(n)%jbLoc ) = ngptsperjb( GPt(n)%jbLoc ) + 1
  743.  1-------->     END DO
  744.             
  745.                 iniperjb(1)=0
  746.  r4-------<     DO jb = 2, jbMax
  747.  r4                iniperjb(jb) = iniperjb(jb-1)+ngptsperjb(jb-1)
  748.  r4------->     END DO
  749.             
  750.                 ! allocate and initialize where to do grid history
  751.             
  752.                 ALLOCATE (DoGrH(ngfld, jbMax))
  753.  1--------<     DO jb = 1, jbMax
  754.  1                 IF (ngptsperjb(jb).gt.0) THEN
  755.  1                    DoGrH(:, jb) = GHAF(:)%IsReqFld
  756.  1                 ELSE
  757.  1 V-----<>           DoGrH(:, jb) = .FALSE.
  758.  1                 END IF
  759.  1-------->     END DO
  760.                 IF(myid ==0 ) THEN
  761.                    ! dumping for the file the information of the  grid history points
  762.                    WRITE(UNIT=nfghdr,FMT=700)typgh
  763.                    WRITE(UNIT=nfghdr,FMT=720) nexp, iacc, ibMax, jbMax, kMax, kMax, ngpts, nghsl, nghsl, &
  764.                         idate, idev
  765.                    WRITE(UNIT=nfghdr,FMT=710) 'CPTEC AGCM R1.2 2001  '//TRIM(TruncLev)//'  '//TRIM(start)
  766.                    WRITE(UNIT=nfghdr,FMT=740)(del(k),k=1,kMax)
  767.  1--------<        DO n=1,ngfld
  768.  1                    IF(GHAF(n)%IsReqFld )THEN
  769.  1                       WRITE(UNIT=nfghdr,FMT=126) GHAF(n)%FldsName, &
  770.  1                            &                GHAF(n)%LyrsFlds, &
  771.  1                            &                GHAF(n)%UnGraFld, &
  772.  1                            &                GHAF(n)%GradsFld
  773.  1                    END IF
  774.  1-------->        END DO
  775.  1--------<        DO n=1,ngpts
  776.  1                    WRITE(UNIT=nfghdr,FMT=550) PtCtyGlobal(n),PtCoorGlobal(n)
  777.  1-------->        ENDDO
  778.                    ENDFILE nfghdr
  779.                 END IF
  780.             110 FORMAT(' NO.',T10,'AVAILABLE GRID HISTORY FIELD DESCRIPTION', &
  781.                      T47,'NUM. OF LAYERS',T66,'UNITS',T75,'TIME FRAME')
  782.             126 FORMAT(A40,I5,2X,I5,1X,A4)
  783.             140 FORMAT(' ',I4,' ',A40,I5,2X,I5,2X,A1,1X,A4)
  784.             210 FORMAT(' NO.',T10,'REQUESTED GRID HISTORY FIELD DESCRIPTION', &
  785.                      T55,'REQUESTED UNITS')
  786.             225 FORMAT(A40,I5)
  787.             240 FORMAT(' ',I4,' ',A40,I5)
  788.             520 FORMAT(' NO.',T17,'POINT DESCRIPTION',T51,'I PT.',T59,'J PT.')
  789.             550 FORMAT(A40,1X,A11)
  790.             570 FORMAT(' ',I4,' ',A40,I5,I5,1X,A11)
  791.             700 FORMAT(A20)
  792.             710 FORMAT(A60)
  793.             720 FORMAT(A4,1X,A4,11I5,1X,A4)
  794.             740 FORMAT(5E16.8)
  795.             2135 FORMAT(' REQUESTED GRID POINT HISTORY FIELD TABLE EMPTY OR', &
  796.                      ' NOT FOUND'/' WITH ALLGHF=F')
  797.               END SUBROUTINE InitGridHistory
ftn-5002 ftn: NOTE File = GridHistory.f90, Line = 797 
  Local variable "NL" is declared but neither defined nor used.

ftn-5011 ftn: NOTE File = GridHistory.f90, Line = 797 
  Label "570" is unused.

  798.             
  799.               SUBROUTINE GridHistLabel (Nmax,iMax,jMax,iMaxPerJ,GHLon, GHLat, Label)
  800.             
  801.                 IMPLICIT NONE
  802.             
  803.                 ! This Procedure Generates a Label for the Grid History Points
  804.                 ! with the Following Layout: DloMloXDlatMlaY_N, Where:
  805.             
  806.                 ! Dlo: Int  Part of Model Longitude in Degree (3 Char)
  807.                 ! Mlo: Frac Part of Model Longitude in Minutes (2 Char)
  808.                 !   X: Label for Model Longitude Hemisphere
  809.                 !      W for Weast and E for East (2 Char)
  810.                 ! Dla: Int  Part of Model Latitude in Degree (2 Char)
  811.                 ! Mla: Frac Part of Model Latitude in Minutes (2 Char)
  812.                 !   Y: Label for Model Latitude Hemisphere
  813.                 !      S for South and N for North (1 Char)
  814.                 !   N: Record Number at the Input List (6 Char)
  815.             
  816.                 INTEGER, INTENT (IN) :: Nmax ! Number of Grid History Points
  817.                 INTEGER, INTENT (IN) :: iMax
  818.                 INTEGER, INTENT (IN) :: jMax
  819.                 INTEGER, INTENT (IN) :: iMaxPerJ(:)
  820.                 REAL (KIND=r8), INTENT (INOUT) :: GHLon(Nmax) ! Model Longitudes of Grid History Points
  821.             
  822.                 REAL (KIND=r8), INTENT (INOUT) :: GHLat(Nmax) ! Model Latitudes  of Grid History Points
  823.             
  824.                 CHARACTER (LEN=*), INTENT (OUT) :: Label(Nmax) ! Output Label Described Above
  825.             
  826.                 INTEGER :: n, &       ! Index for Grid History Points
  827.                      LonDeg, &  ! Degree  Part of Model Longitude
  828.                      LonSig, &  ! Signal  Part of Model Longitude
  829.                      LonMin, &  ! Minutes Part of Model Longitude
  830.                      LatDeg, &  ! Degree  Part of Model Latitude
  831.                      LatSig, &  ! Signal  Part of Model Latitude
  832.                      LatMin     ! Minutes Part of Model Latitude
  833.             
  834.                 CHARACTER (LEN=1) :: LonHem, & ! Hemisphere of Longitude: W or E
  835.                      LatHem    ! Hemisphere of Latitude:  S or N
  836.             
  837.                 INTEGER :: i, &     ! Model Zonal      Index
  838.                      j        ! Model Meridional Index
  839.             
  840.                 REAL (KIND=r8) :: DegConv, & ! Convertion Factor from Radian to Degree
  841.                      RadConv, & ! Convertion Factor from Degree to Radian
  842.                      DLon(iMax), & ! Delta Lon to Obtain Nearest Model Longitude
  843.                      DLat(jMax)    ! Delta Lat to Obtain Nearest Model Latitude
  844.             
  845.             
  846.                 INTEGER           :: ILocMin(1)
  847.                 INTEGER           :: JLocMin(1)
  848.                 REAL(KIND=r8)     :: pi
  849.             
  850.                 pi = 4.0_r8*ATAN(1.0_r8)
  851.                 DegConv = 45.0_r8/ATAN(1.0_r8)
  852.                 RadConv = ATAN(1.0_r8)/45.0_r8
  853.  V-------<>     GHLon = GHLon  * RadConv
  854.  V-------<>     GHLat=(GHLat+90.0_r8)*RadConv
  855.  1--------<     DO n=1,Nmax
  856.  1 A-----<>        DLat=1000.0_r8
  857.  1 Vr4----<        DO j=1,jMax
  858.  1 Vr4                dlat(j) = ABS(lati(j) - GHLat(n))
  859.  1 Vr4---->        END DO
  860.  1 w-----<>        jlocmin=MINLOC (dlat)
  861.  1          
  862.  1 A-----<>        dlon=1000.0_r8
  863.  1 Vr4----<        DO i=1,iMaxPerJ(jlocmin(1))
  864.  1 Vr4                dlon(i) = ABS( ((pi*((i-1)*360.0_r8/REAL(iMaxPerJ(jlocmin(1)),r8)))/180.0_r8) &
  865.  1 Vr4                     &         -  GHLon(n) )
  866.  1 Vr4---->        END DO
  867.  1 w-----<>        ILocMin=MINLOC (dlon)
  868.  1                 GHLat(n)=lati(jlocmin(1))*DegConv
  869.  1                 GHLon(n)= ((pi*((ILocMin(1)-1)*360.0_r8/REAL(iMaxPerJ(jlocmin(1)),r8)))/180.0_r8)*DegConv
  870.  1-------->     END DO
  871.                 WHERE (GHLon > 180.0_r8)
  872.                    GHLon=GHLon-360.0_r8
  873.                 END WHERE
  874.  V-------<>     GHLat=GHLat-90_r8
  875.             
  876.  1--------<     DO n=1,Nmax
  877.  1                 ! Longitudes
  878.  1                 LonDeg=INT(ABS(GHLon(n)))
  879.  1                 LonSig=INT(SIGN(1.0_r8,GHLon(n)))
  880.  1                 LonMin=NINT(60.0_r8*(ABS(GHLon(n))-REAL(LonDeg,r8)))
  881.  1                 IF (LonMin > 99) LonMin=99
  882.  1                 IF (LonSig < 0) THEN
  883.  1                    LonHem='W'
  884.  1                 ELSE
  885.  1                    LonHem='E'
  886.  1                 ENDIF
  887.  1                 ! Latitudes
  888.  1                 LatDeg=INT(ABS(GHLat(n)))
  889.  1                 LatSig=INT(SIGN(1.1_r8,GHLat(n)))
  890.  1                 LatMin=NINT(60.0_r8*(ABS(GHLat(n))-REAL(LatDeg,r8)))
  891.  1                 IF (LatMin > 99) LatMin=99
  892.  1                 IF (LatSig < 0) THEN
  893.  1                    LatHem='S'
  894.  1                 ELSE
  895.  1                    LatHem='N'
  896.  1                 ENDIF
  897.  1                 ! Label
  898.  1                 WRITE (Label(n), FMT='(I3.3,I2.2,A1,2I2.2,2A1,I6.6)') &
  899.  1                      LonDeg, LonMin, LonHem, LatDeg, LatMin, LatHem, '_', n
  900.  1-------->     END DO
  901.                 WHERE (GHLon < 0.0_r8)
  902.                    GHLon=GHLon+360.0_r8
  903.                 END WHERE
  904.             
  905.               END SUBROUTINE GridHistLabel
  906.             
  907.               !----------------------------------------------------------------------------
  908.               SUBROUTINE NULLIFY_grid(a,nlyr )
  909.                 TYPE(MapGrHist) :: a
  910.                 INTEGER, INTENT(in):: nlyr
  911.                 INTEGER :: i
  912.                 IF ( ASSOCIATED( a%AlcPt) )  NULLIFY ( a%AlcPt )
  913.                 ALLOCATE( a%AlcPt(nlyr) )
  914.  Vr4------<     DO i=1, nlyr
  915.  Vr4               a%AlcPt(i)=0
  916.  Vr4------>     END DO
  917.               END SUBROUTINE NULLIFY_grid
  918.               !----------------------------------------------------------------------------
  919.               SUBROUTINE NULLIFY_dignos(a,nlyr )
  920.                 TYPE(GridHistPoint) :: a
  921.                 INTEGER, INTENT(in):: nlyr
  922.                 IF ( ASSOCIATED( a%dignos) )  NULLIFY ( a%dignos )
  923.                 ALLOCATE( a%dignos(nlyr) )
  924.               END SUBROUTINE NULLIFY_dignos
  925.               !----------------------------------------------------------------------------
  926.               SUBROUTINE NULLIFY_InReFd(a,nlyr )
  927.                 TYPE(GridHistPoint) :: a
  928.                 INTEGER, INTENT(in):: nlyr
  929.                 IF ( ASSOCIATED( a%InReFd) )  NULLIFY ( a%InReFd )
  930.                 ALLOCATE( a%InReFd(nlyr) )
  931.               END SUBROUTINE NULLIFY_InReFd
  932.               !----------------------------------------------------------------------------
  933.               SUBROUTINE WriteGridHistoryTopo (fgzs,TopoGridH,nfghtop)
  934.                 REAL(KIND=r8)            , INTENT(IN   ) :: fgzs(:,:)
  935.                 CHARACTER(LEN=*), INTENT(IN   ) :: TopoGridH
  936.                 INTEGER         , INTENT(IN   ) :: nfghtop
  937.                 REAL(KIND=r8)    :: grhtop(ngpts)
  938.                 REAL(KIND=r8)    :: grhloc(ngptslocal)
  939.                 INTEGER :: n,nloc
  940.                 INTEGER :: ierr
  941.                 IF (.NOT. grhflg) THEN
  942.                    RETURN
  943.                 END IF
  944.                 IF (myid.eq.0)THEN
  945.                    OPEN(UNIT=nfghtop,FILE=TRIM(TopoGridH),FORM='unformatted',ACCESS='sequential',&
  946.                         ACTION='write', STATUS='replace',IOSTAT=ierr)
  947.                    IF (ierr /= 0) THEN
  948.                       WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  949.                            TRIM(TopoGridH), ierr
  950.                       STOP "**(ERROR)**"
  951.                    END IF
  952.                 END IF
  953.             
  954.             
  955.  1--------<     DO nloc=1,ngptslocal
  956.  1                 n = map(nloc)
  957.  1                 grhloc(nloc)=fgzs(GPt(n)%ibLoc,GPt(n)%jbLoc)/grav
  958.  1-------->     END DO
  959.             
  960.                 IF (maxnodes.gt.1) THEN
  961.                    CALL Collect_Grid_His(grhloc, grhtop, ngpts, ngptslocal, 0, 1, &
  962.                                          ngptsperproc, mapglobal)
  963.                    IF (myid.eq.0) CALL WrTopoGrdHist  (nfghtop,grhtop)
  964.                  ELSE
  965.                    CALL WrTopoGrdHist  (nfghtop,grhtop)
  966.                 ENDIF
  967.             
  968.               END SUBROUTINE WriteGridHistoryTopo
  969.             
  970.             
  971.             
  972.               SUBROUTINE Store2D (field, fId, jb, cf)
  973.                 REAL(KIND=r8),    INTENT(IN) :: field(:,:)
  974.                 INTEGER, INTENT(IN) :: fId
  975.                 INTEGER, INTENT(IN) :: jb
  976.                 REAL(KIND=r8),    OPTIONAL, INTENT(IN) :: cf
  977.             
  978.                 INTEGER :: dim1
  979.                 INTEGER :: dim2
  980.                 INTEGER :: kfirst
  981.                 INTEGER :: k
  982.                 INTEGER :: i
  983.                 INTEGER :: n
  984.                 CHARACTER(LEN=*), PARAMETER :: h = "**(StoreGridHistory)**"
  985.             
  986.  I              IF (.NOT. IsGridHistoryOn()) THEN
  987.                    RETURN
  988.                 END IF
  989.                 dim1 = SIZE(field,1)
  990.                 dim2 = SIZE(field,2)
  991.                 IF (fId < 1 .OR. fId > ngfld) THEN
  992.                    WRITE(UNIT=nfprt, FMT="(a, ' fId out of range =', i10)") h, fId
  993.                    WRITE(UNIT=nferr, FMT="(a, ' fId out of range =', i10)") h, fId
  994.                    STOP h
  995.                 ELSE IF (jb < 1 .OR. jb > jbMax) THEN
  996.                    WRITE(UNIT=nfprt, FMT="(a, ' jb out of range =', i10)") h, jb
  997.                    WRITE(UNIT=nferr, FMT="(a, ' jb out of range =', i10)") h, jb
  998.                    STOP h
  999.                 ELSE IF (dim1 /= ibMaxPerJB(jb)) THEN
 1000.                    WRITE(UNIT=nfprt, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1001.                    WRITE(UNIT=nferr, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1002.                    STOP h
 1003.                 ELSE IF (dim2 /= kMax) THEN
 1004.                    WRITE(UNIT=nfprt, FMT="(a, ' field second dimension out of range =', i10)") h, dim2
 1005.                    WRITE(UNIT=nferr, FMT="(a, ' field second dimension out of range =', i10)") h, dim2
 1006.                    STOP h
 1007.                 END IF
 1008.             
 1009.                 kfirst = GHAF(fId)%LocGrFld
 1010.                 IF (PRESENT(cf)) THEN
 1011.  ibr8-----<        DO k = 1, kMax
 1012.  ibr8 ib--<           DO n = iniperjb(jb)+1, iniperjb(jb)+ngptsperjb(jb)
 1013.  ibr8 ib                 i = GPt( n )%ibloc
 1014.  ibr8 ib                 GPt( n )%dignos(k+kfirst-1) = field(i, k) * cf
 1015.  ibr8 ib-->           END DO
 1016.  ibr8----->        END DO
 1017.                 ELSE
 1018.  ibr8-----<        DO k = 1, kMax
 1019.  ibr8 ib--<           DO n = iniperjb(jb)+1, iniperjb(jb)+ngptsperjb(jb)
 1020.  ibr8 ib                 i = GPt( n )%ibloc
 1021.  ibr8 ib                 GPt( n )%dignos(k+kfirst-1) = field(i, k)
 1022.  ibr8 ib-->           END DO
 1023.  ibr8----->        END DO
 1024.                 END IF
 1025.               END SUBROUTINE Store2D
 1026.             
 1027.             
 1028.             
 1029.             
 1030.             
 1031.             
 1032.               SUBROUTINE Store1D (field, fId, jb, cf)
 1033.                 REAL(KIND=r8),    INTENT(IN) :: field(:)
 1034.                 INTEGER, INTENT(IN) :: fId
 1035.                 INTEGER, INTENT(IN) :: jb
 1036.                 REAL(KIND=r8),    OPTIONAL, INTENT(IN) :: cf
 1037.             
 1038.                 INTEGER :: dim1
 1039.                 INTEGER :: kfirst
 1040.                 INTEGER :: i
 1041.                 INTEGER :: n
 1042.                 CHARACTER(LEN=*), PARAMETER :: h = "**(StoreGridHistory)**"
 1043.             
 1044.  I              IF (.NOT. IsGridHistoryOn()) THEN
 1045.                    RETURN
 1046.                 END IF
 1047.                 dim1 = SIZE(field,1)
 1048.                 IF (fId < 1 .OR. fId > ngfld) THEN
 1049.                    WRITE(UNIT=nfprt, FMT="(a, ' fId out of range =', i10)") h, fId
 1050.                    WRITE(UNIT=nferr, FMT="(a, ' fId out of range =', i10)") h, fId
 1051.                    STOP h
 1052.                 ELSE IF (jb < 1 .OR. jb > jbMax) THEN
 1053.                    WRITE(UNIT=nfprt, FMT="(a, ' jb out of range =', i10)") h, jb
 1054.                    WRITE(UNIT=nferr, FMT="(a, ' jb out of range =', i10)") h, jb
 1055.                    STOP h
 1056.                 ELSE IF (dim1 /= ibMaxPerJB(jb)) THEN
 1057.                    WRITE(UNIT=nfprt, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1058.                    WRITE(UNIT=nferr, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1059.                    STOP h
 1060.                 END IF
 1061.             
 1062.                 kfirst = GHAF(fId)%LocGrFld
 1063.                 IF (PRESENT(cf)) THEN
 1064.  1--------<        DO n = iniperjb(jb)+1, iniperjb(jb)+ngptsperjb(jb)
 1065.  1                    i = GPt( n )%ibloc
 1066.  1                    GPt( n )%dignos(kfirst) = field(i) * cf
 1067.  1-------->        END DO
 1068.                 ELSE
 1069.  1--------<        DO n = iniperjb(jb)+1, iniperjb(jb)+ngptsperjb(jb)
 1070.  1                    i = GPt( n )%ibloc
 1071.  1                    GPt( n )%dignos(kfirst) = field(i)
 1072.  1-------->        END DO
 1073.                 END IF
 1074.               END SUBROUTINE Store1D
 1075.             
 1076.             
 1077.             
 1078.             
 1079.             
 1080.             
 1081.               SUBROUTINE WriteGridHistory (nfghou, ifday, tod, idate)
 1082.                 INTEGER, INTENT(IN) :: nfghou
 1083.                 INTEGER, INTENT(IN) :: ifday
 1084.                 REAL(KIND=r8),    INTENT(IN) :: tod
 1085.                 INTEGER, INTENT(IN) :: idate(4)
 1086.             
 1087.                 INTEGER :: j
 1088.                 INTEGER :: m
 1089.                 INTEGER :: n,nloc
 1090.                 INTEGER :: iqstmp(6)
 1091.                 INTEGER :: isg
 1092.                 REAL(KIND=r8)    :: sg
 1093.                 REAL(KIND=r8)    :: stmp(6)
 1094.                 REAL(KIND=r8)    :: qwork(ngptslocal,nghsl)
 1095.                 REAL(KIND=r8)    :: work(ngpts,nghsl)
 1096.             
 1097.  I              IF (.NOT. IsGridHistoryOn()) THEN
 1098.                    RETURN
 1099.                 END IF
 1100.                 CALL tmstmp2 (idate, ifday, tod, iqstmp(3), iqstmp(4), iqstmp(5), iqstmp(6))
 1101.                 sg = MOD(tod+0.03125_r8,3600.0_r8)-0.03125_r8
 1102.                 isg=sg
 1103.                 iqstmp(2)=isg/60
 1104.                 iqstmp(1)=MOD(isg,60)
 1105.  V--------<     DO j=1,6
 1106.  V                 stmp(j)=iqstmp(j)
 1107.  V-------->     END DO
 1108.  1--------<     DO j = 1, nghsl
 1109.  1 r4-----<        DO nloc=1,ngptslocal!ngpts
 1110.  1 r4                 n = map(nloc)
 1111.  1 r4                 qwork(nloc,j)=GPt( n )%dignos(j)
 1112.  1 r4----->        END DO
 1113.  1-------->     END DO
 1114.                 IF(.NOT.allghf.and.ngptslocal.gt.0)THEN
 1115.                    m = 1
 1116.  1--------<        DO n = 1, ngfld
 1117.  1                    IF (GHAF(n)%IsReqFld) THEN
 1118.  1                       CALL cnvray(qwork(1,m) , GHAF(n)%LyrsFlds*ngpts,GHAF(n)%UnGraFld,&
 1119.  1                            &           GHAF(n)%UnGraFld  )
 1120.  1                       m=m+GHAF(n)%LyrsFlds
 1121.  1                    END IF
 1122.  1-------->        END DO
 1123.                 ENDIF
 1124.             
 1125.                 IF (maxnodes.gt.1) THEN
 1126.                    CALL Collect_Grid_His(qwork, work, ngpts, ngptslocal, 0, nghsl, &
 1127.                                          ngptsperproc, mapglobal)
 1128.                    IF (myid.eq.0) CALL WriteGrdHist(nfghou,stmp,work)
 1129.                 ELSE
 1130.                    CALL WriteGrdHist(nfghou,stmp,qwork)
 1131.                 ENDIF
 1132.  1--------<     DO n=1,ngptslocal
 1133.  1                 GPt(n)%dignos(:)=0.0_r8
 1134.  1-------->     END DO
 1135.               END SUBROUTINE WriteGridHistory
 1136.             
 1137.             
 1138.             
 1139.             
 1140.             
 1141.             
 1142.               SUBROUTINE StoreMaskedGridHistory (field, imask, fId, jb, cf)
 1143.                 REAL(KIND=r8),    INTENT(IN) :: field(:)
 1144.                 INTEGER(KIND=i8), INTENT(IN) :: imask(:)
 1145.                 INTEGER, INTENT(IN) :: fId
 1146.                 INTEGER, INTENT(IN) :: jb
 1147.                 REAL(KIND=r8),    OPTIONAL, INTENT(IN) :: cf
 1148.             
 1149.                 INTEGER :: i
 1150.                 INTEGER :: ncount
 1151.                 REAL(KIND=r8) :: bfr(ibMax)
 1152.                 INTEGER :: dim1
 1153.                 dim1 = SIZE(imask,1)
 1154.  I              IF (.NOT. IsGridHistoryOn()) THEN
 1155.                    RETURN
 1156.                 END IF
 1157.                 ncount=0
 1158.  1--------<     DO i = 1, dim1
 1159.  1                 IF (imask(i) >= 1) THEN
 1160.  1                    ncount=ncount+1
 1161.  1                    bfr(i) = field(ncount)
 1162.  1                 ELSE
 1163.  1                    bfr(i) = 0.0_r8
 1164.  1                 END IF
 1165.  1-------->     END DO
 1166.                 IF (PRESENT(cf)) THEN
 1167.                    CALL StoreGridHistory (bfr(1:dim1), fId, jb, cf)
 1168.                 ELSE
 1169.                    CALL StoreGridHistory (bfr(1:dim1), fId, jb)
 1170.                 END IF
 1171.               END SUBROUTINE StoreMaskedGridHistory
 1172.             
 1173.             
 1174.             
 1175.             
 1176.               SUBROUTINE TurnOnGridHistory()
 1177.                 grhOn = grhflg
 1178.               END SUBROUTINE TurnOnGridHistory
 1179.             
 1180.             
 1181.             
 1182.             
 1183.               SUBROUTINE TurnOffGridHistory()
 1184.                 grhOn = .FALSE.
 1185.               END SUBROUTINE TurnOffGridHistory
 1186.             
 1187.             
 1188.             
 1189.               FUNCTION IsGridHistoryOn()
 1190.                 LOGICAL :: IsGridHistoryOn
 1191.                 IsGridHistoryOn = grhflg .AND. grhOn
 1192.               END FUNCTION IsGridHistoryOn
 1193.             
 1194.             
 1195.             
 1196.             
 1197.             
 1198.             
 1199.             
 1200.               SUBROUTINE Store2DV (field, fId, jb, cf)
 1201.                 REAL(KIND=r8),    INTENT(IN) :: field(:,:)
 1202.                 INTEGER, INTENT(IN) :: fId
 1203.                 INTEGER, INTENT(IN) :: jb
 1204.                 REAL(KIND=r8),    INTENT(IN) :: cf(:)
 1205.             
 1206.                 INTEGER :: dim1
 1207.                 INTEGER :: dim2
 1208.                 INTEGER :: dimcf
 1209.                 INTEGER :: kfirst
 1210.                 INTEGER :: k
 1211.                 INTEGER :: i
 1212.                 INTEGER :: n
 1213.                 CHARACTER(LEN=*), PARAMETER :: h = "**(StoreGridHistory)**"
 1214.             
 1215.  I              IF (.NOT. IsGridHistoryOn()) THEN
 1216.                    RETURN
 1217.                 END IF
 1218.                 dim1 = SIZE(field,1)
 1219.                 dim2 = SIZE(field,2)
 1220.                 dimcf = SIZE(cf,1)
 1221.                 IF (fId < 1 .OR. fId > ngfld) THEN
 1222.                    WRITE(UNIT=nfprt, FMT="(a, ' fId out of range =', i10)") h, fId
 1223.                    WRITE(UNIT=nferr, FMT="(a, ' fId out of range =', i10)") h, fId
 1224.                    STOP h
 1225.                 ELSE IF (jb < 1 .OR. jb > jbMax) THEN
 1226.                    WRITE(UNIT=nfprt, FMT="(a, ' jb out of range =', i10)") h, jb
 1227.                    WRITE(UNIT=nferr, FMT="(a, ' jb out of range =', i10)") h, jb
 1228.                    STOP h
 1229.                 ELSE IF (dim1 /= ibMaxPerJB(jb)) THEN
 1230.                    WRITE(UNIT=nfprt, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1231.                    WRITE(UNIT=nferr, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1232.                    STOP h
 1233.                 ELSE IF (dim2 /= kMax) THEN
 1234.                    WRITE(UNIT=nfprt, FMT="(a, ' field second dimension out of range =', i10)") h, dim2
 1235.                    WRITE(UNIT=nferr, FMT="(a, ' field second dimension out of range =', i10)") h, dim2
 1236.                    STOP h
 1237.                 ELSE IF (dim1 /= dimcf) THEN
 1238.                    WRITE(UNIT=nfprt, FMT="(a, ' field first dimension and cf dimension do not match',2i10)") h, dim1, dimcf
 1239.                    WRITE(UNIT=nferr, FMT="(a, ' field first dimension and cf dimension do not match',2i10)") h, dim1, dimcf
 1240.                    STOP h
 1241.                 END IF
 1242.             
 1243.                 kfirst = GHAF(fId)%LocGrFld
 1244.  ibr8-----<     DO k = 1, kMax
 1245.  ibr8 ib--<        DO n = iniperjb(jb)+1, iniperjb(jb)+ngptsperjb(jb)
 1246.  ibr8 ib              i = GPt( n )%ibloc
 1247.  ibr8 ib              GPt( n )%dignos(k+kfirst-1) = field(i, k) * cf(i)
 1248.  ibr8 ib-->        END DO
 1249.  ibr8----->     END DO
 1250.               END SUBROUTINE Store2DV
 1251.             
 1252.             
 1253.             
 1254.             
 1255.             
 1256.             
 1257.               SUBROUTINE Store1DV (field, fId, jb, cf)
 1258.                 REAL(KIND=r8),    INTENT(IN) :: field(:)
 1259.                 INTEGER, INTENT(IN) :: fId
 1260.                 INTEGER, INTENT(IN) :: jb
 1261.                 REAL(KIND=r8),    INTENT(IN) :: cf(:)
 1262.             
 1263.                 INTEGER :: dim1
 1264.                 INTEGER :: dimcf
 1265.                 INTEGER :: kfirst
 1266.                 INTEGER :: i
 1267.                 INTEGER :: n
 1268.                 CHARACTER(LEN=*), PARAMETER :: h = "**(StoreGridHistory)**"
 1269.  I              IF (.NOT. IsGridHistoryOn()) THEN
 1270.                    RETURN
 1271.                 END IF
 1272.                 dim1 = SIZE(field,1)
 1273.                 dimcf = SIZE(cf,1)
 1274.                 IF (fId < 1 .OR. fId > ngfld) THEN
 1275.                    WRITE(UNIT=nfprt, FMT="(a, ' fId out of range =', i10)") h, fId
 1276.                    WRITE(UNIT=nferr, FMT="(a, ' fId out of range =', i10)") h, fId
 1277.                    STOP h
 1278.                 ELSE IF (jb < 1 .OR. jb > jbMax) THEN
 1279.                    WRITE(UNIT=nfprt, FMT="(a, ' jb out of range =', i10)") h, jb
 1280.                    WRITE(UNIT=nferr, FMT="(a, ' jb out of range =', i10)") h, jb
 1281.                    STOP h
 1282.                 ELSE IF (dim1 /= ibMaxPerJB(jb)) THEN
 1283.                    WRITE(UNIT=nfprt, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1284.                    WRITE(UNIT=nferr, FMT="(a, ' field first dimension out of range =', 3i10)") h, dim1,ibMaxPerJB(jb),ibMax
 1285.                    STOP h
 1286.                 ELSE IF (dim1 /= dimcf) THEN
 1287.                    WRITE(UNIT=nfprt, FMT="(a, ' field first dimension and cf dimension do not match',2i10)") h, dim1, dimcf
 1288.                    WRITE(UNIT=nferr, FMT="(a, ' field first dimension and cf dimension do not match',2i10)") h, dim1, dimcf
 1289.                    STOP h
 1290.                 END IF
 1291.             
 1292.                 kfirst = GHAF(fId)%LocGrFld
 1293.  1--------<     DO n = iniperjb(jb)+1, iniperjb(jb)+ngptsperjb(jb)
 1294.  1                 i = GPt( n )%ibloc
 1295.  1                 GPt( n )%dignos(kfirst) = field(i) * cf(i)
 1296.  1-------->     END DO
 1297.               END SUBROUTINE Store1DV
 1298.             
 1299.             END MODULE GridHistory

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 316 
  A loop starting at line 316 was not vectorized because a recurrence was found on "GHAF" at line 316.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 361 
  A loop starting at line 361 was not vectorized because it does not map well onto the target architecture.

ftn-6004 ftn: SCALAR File = GridHistory.f90, Line = 373 
  A loop starting at line 373 was fused with the loop starting at line 361.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 385 
  A loop starting at line 385 was not vectorized because a recurrence was found on "GHAF" at line 385.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 397 
  A loop starting at line 397 was not vectorized because a recurrence was found on "GHAF" at line 397.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 459 
  A loop starting at line 459 was not vectorized because it does not map well onto the target architecture.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 459 
  The call to INITGRIDHISTFIELDS was textually inlined.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 463 
  A loop starting at line 463 was vectorized.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 465 
  A loop starting at line 465 was vectorized.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 467 
  A loop starting at line 467 was vectorized.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 469 
  A loop starting at line 469 was vectorized.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 481 
  A loop starting at line 481 was vectorized.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 482 
  A loop starting at line 482 was vectorized.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 483 
  A loop starting at line 483 was not vectorized because it does not map well onto the target architecture.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 485 
  A loop starting at line 485 was not vectorized because it does not map well onto the target architecture.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 491 
  A loop starting at line 491 was vectorized.

ftn-6270 ftn: VECTOR File = GridHistory.f90, Line = 497 
  A loop starting at line 497 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6262 ftn: VECTOR File = GridHistory.f90, Line = 509 
  A loop starting at line 509 was not vectorized because it contains a call to a subroutine or function on line 510.

ftn-6286 ftn: VECTOR File = GridHistory.f90, Line = 532 
  A loop starting at line 532 was not vectorized because it contains input/output operations at line 533.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 556 
  A loop starting at line 556 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 556 
  A loop starting at line 556 was unrolled 8 times.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 560 
  A loop starting at line 560 was not vectorized because it does not map well onto the target architecture.

ftn-6286 ftn: VECTOR File = GridHistory.f90, Line = 563 
  A loop starting at line 563 was not vectorized because it contains input/output operations at line 564.

ftn-6250 ftn: VECTOR File = GridHistory.f90, Line = 567 
  A loop starting at line 567 was not vectorized for an unspecified reason.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 585 
  A loop starting at line 585 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 585 
  A loop starting at line 585 was not vectorized because a recurrence was found on "NGHSL" at line 588.

ftn-6286 ftn: VECTOR File = GridHistory.f90, Line = 604 
  A loop starting at line 604 was not vectorized because it contains input/output operations at line 605.

ftn-6286 ftn: VECTOR File = GridHistory.f90, Line = 632 
  A loop starting at line 632 was not vectorized because it contains input/output operations at line 633.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 636 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = GridHistory.f90, Line = 636 
  A loop starting at line 636 was replaced by a library call.

ftn-6202 ftn: VECTOR File = GridHistory.f90, Line = 636 
  A loop starting at line 636 was replaced by a library call.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 636 
  A loop starting at line 636 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 636 
  A loop starting at line 636 was vectorized.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 636 
  The call to GRIDHISTLABEL was inlined.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 639 
  A loop starting at line 639 was vectorized.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 640 
  A loop starting at line 640 was not vectorized because a recurrence was found on "NGPTSPERPROC" at line 654.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 641 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 642 
  A loop starting at line 642 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 642 
  A loop starting at line 642 was vectorized.

ftn-6008 ftn: SCALAR File = GridHistory.f90, Line = 645 
  A loop starting at line 645 was unwound.

ftn-6270 ftn: VECTOR File = GridHistory.f90, Line = 645 
  A loop starting at line 645 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 647 
  A loop starting at line 647 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 647 
  A loop starting at line 647 was vectorized.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 648 
  A divide was turned into a multiply by a reciprocal

ftn-6008 ftn: SCALAR File = GridHistory.f90, Line = 651 
  A loop starting at line 651 was unwound.

ftn-6270 ftn: VECTOR File = GridHistory.f90, Line = 651 
  A loop starting at line 651 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 665 
  A loop starting at line 665 was not vectorized because a recurrence was found on "I" at line 669.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 666 
  A loop starting at line 666 was not vectorized because it contains a reference to a non-vector intrinsic on line 668.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 678 
  A loop starting at line 678 was not vectorized because a recurrence was found on "NLOC" at line 682.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 679 
  A loop starting at line 679 was not vectorized because a recurrence was found on "NLOC" at line 682.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 680 
  A loop starting at line 680 was not vectorized because it contains a reference to a non-vector intrinsic on line 681.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 692 
  A loop starting at line 692 was not vectorized because a recurrence was found on "GPT" at line 692.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 698 
  A loop starting at line 698 was unrolled 2 times.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 698 
  A loop starting at line 698 was not vectorized because a recurrence was found on "GPT" at line 700.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 702 
  A divide was turned into a multiply by a reciprocal

ftn-6262 ftn: VECTOR File = GridHistory.f90, Line = 709 
  A loop starting at line 709 was not vectorized because it contains a call to a subroutine or function on line 712.

ftn-6262 ftn: VECTOR File = GridHistory.f90, Line = 719 
  A loop starting at line 719 was not vectorized because it contains a call to a subroutine or function on line 720.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 720 
  The call to NULLIFY_DIGNOS was textually inlined.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 721 
  The call to NULLIFY_INREFD was textually inlined.

ftn-6294 ftn: VECTOR File = GridHistory.f90, Line = 724 
  A loop starting at line 724 was not vectorized because a better candidate was found at line 727.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 727 
  A loop starting at line 727 was not vectorized because it contains a reference to a non-vector intrinsic on line 730.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 737 
  A loop starting at line 737 was vectorized.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 738 
  A loop starting at line 738 was not vectorized because it contains a reference to a non-vector intrinsic on line 740.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 746 
  A loop starting at line 746 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = GridHistory.f90, Line = 746 
  A loop starting at line 746 was not vectorized because a recurrence was found on "INIPERJB" at line 747.

ftn-6294 ftn: VECTOR File = GridHistory.f90, Line = 753 
  A loop starting at line 753 was not vectorized because a better candidate was found at line 755.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 755 
  A loop starting at line 755 was not vectorized because it does not map well onto the target architecture.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 757 
  A loop starting at line 757 was vectorized.

ftn-6262 ftn: VECTOR File = GridHistory.f90, Line = 766 
  A loop starting at line 766 was not vectorized because it contains a call to a subroutine or function on line 766.

ftn-6262 ftn: VECTOR File = GridHistory.f90, Line = 767 
  A loop starting at line 767 was not vectorized because it contains a call to a subroutine or function on line 769.

ftn-6262 ftn: VECTOR File = GridHistory.f90, Line = 775 
  A loop starting at line 775 was not vectorized because it contains a call to a subroutine or function on line 776.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 853 
  A loop starting at line 853 was vectorized.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 854 
  A loop starting at line 854 was vectorized.

ftn-6289 ftn: VECTOR File = GridHistory.f90, Line = 855 
  A loop starting at line 855 was not vectorized because a recurrence was found on "DLAT" between lines 856 and 860.

ftn-6202 ftn: VECTOR File = GridHistory.f90, Line = 856 
  A loop starting at line 856 was replaced by a library call.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 857 
  A loop starting at line 857 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 857 
  A loop starting at line 857 was vectorized.

ftn-6008 ftn: SCALAR File = GridHistory.f90, Line = 860 
  A loop starting at line 860 was unwound.

ftn-6270 ftn: VECTOR File = GridHistory.f90, Line = 860 
  A loop starting at line 860 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6202 ftn: VECTOR File = GridHistory.f90, Line = 862 
  A loop starting at line 862 was replaced by a library call.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 863 
  A loop starting at line 863 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 863 
  A loop starting at line 863 was vectorized.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 864 
  A divide was turned into a multiply by a reciprocal

ftn-6008 ftn: SCALAR File = GridHistory.f90, Line = 867 
  A loop starting at line 867 was unwound.

ftn-6270 ftn: VECTOR File = GridHistory.f90, Line = 867 
  A loop starting at line 867 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 869 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 872 
  A loop starting at line 872 was not vectorized because it contains a reference to a non-vector intrinsic on line 872.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 874 
  A loop starting at line 874 was vectorized.

ftn-6286 ftn: VECTOR File = GridHistory.f90, Line = 876 
  A loop starting at line 876 was not vectorized because it contains input/output operations at line 898.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 902 
  A loop starting at line 902 was not vectorized because it contains a reference to a non-vector intrinsic on line 902.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 914 
  A loop starting at line 914 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 914 
  A loop starting at line 914 was vectorized.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 955 
  A loop starting at line 955 was not vectorized because it contains a reference to a non-vector intrinsic on line 957.

ftn-6010 ftn: SCALAR File = GridHistory.f90, Line = 957 
  A divide was turned into a multiply by a reciprocal

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 961 
  Routine COLLECT_GRID_HIS was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 963 
  Routine WRTOPOGRDH8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 965 
  Routine WRTOPOGRDH8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 986 
  The call to ISGRIDHISTORYON was textually inlined.

ftn-6007 ftn: SCALAR File = GridHistory.f90, Line = 1011 
  A loop starting at line 1011 was interchanged with the loop starting at line 1012.

ftn-6049 ftn: SCALAR File = GridHistory.f90, Line = 1011 
  A loop starting at line 1011 was blocked with block size 256.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 1011 
  A loop starting at line 1011 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 1011 
  A loop starting at line 1011 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = GridHistory.f90, Line = 1012 
  A loop starting at line 1012 was not vectorized because a better candidate was found at line 1011.

ftn-6049 ftn: SCALAR File = GridHistory.f90, Line = 1012 
  A loop starting at line 1012 was blocked with block size 4.

ftn-6007 ftn: SCALAR File = GridHistory.f90, Line = 1018 
  A loop starting at line 1018 was interchanged with the loop starting at line 1019.

ftn-6049 ftn: SCALAR File = GridHistory.f90, Line = 1018 
  A loop starting at line 1018 was blocked with block size 256.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 1018 
  A loop starting at line 1018 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 1018 
  A loop starting at line 1018 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = GridHistory.f90, Line = 1019 
  A loop starting at line 1019 was not vectorized because a better candidate was found at line 1018.

ftn-6049 ftn: SCALAR File = GridHistory.f90, Line = 1019 
  A loop starting at line 1019 was blocked with block size 4.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 1044 
  The call to ISGRIDHISTORYON was textually inlined.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 1064 
  A loop starting at line 1064 was not vectorized because it contains a reference to a non-vector intrinsic on line 1066.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 1069 
  A loop starting at line 1069 was not vectorized because it contains a reference to a non-vector intrinsic on line 1071.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 1097 
  The call to ISGRIDHISTORYON was textually inlined.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1100 
  Routine TMSTMP2 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = GridHistory.f90, Line = 1105 
  A loop starting at line 1105 was vectorized.

ftn-6290 ftn: VECTOR File = GridHistory.f90, Line = 1108 
  A loop starting at line 1108 was not vectorized because a recurrence was found between "GPT" and "QWORK" at line 1111.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 1109 
  A loop starting at line 1109 was unrolled 4 times.

ftn-6290 ftn: VECTOR File = GridHistory.f90, Line = 1109 
  A loop starting at line 1109 was not vectorized because a recurrence was found between "GPT" and "QWORK" at line 1111.

ftn-6288 ftn: VECTOR File = GridHistory.f90, Line = 1116 
  A loop starting at line 1116 was not vectorized because it contains a call to subroutine "CNVRAY" on line 1118.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1118 
  Routine CNVRAY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1126 
  Routine COLLECT_GRID_HIS was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1128 
  Routine WRITEGRDH8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1130 
  Routine WRITEGRDH8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = GridHistory.f90, Line = 1132 
  A loop starting at line 1132 was not vectorized because the iteration space is too irregular.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 1133 
  A loop starting at line 1133 was not vectorized because it does not map well onto the target architecture.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 1154 
  The call to ISGRIDHISTORYON was textually inlined.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 1158 
  A loop starting at line 1158 was not vectorized because it contains a reference to a non-vector intrinsic on line 1161.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1167 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3011 ftn: IPA File = GridHistory.f90, Line = 1167 
  Routine STORE1D was not inlined because it has OPTIONAL dummy arguments.

ftn-3005 ftn: IPA File = GridHistory.f90, Line = 1169 
  Routine STORE1D was not inlined because corresponding actual and dummy argument at position 4 do not have identical type and
  kind-type.

ftn-3021 ftn: IPA File = GridHistory.f90, Line = 1169 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 1215 
  The call to ISGRIDHISTORYON was textually inlined.

ftn-6007 ftn: SCALAR File = GridHistory.f90, Line = 1244 
  A loop starting at line 1244 was interchanged with the loop starting at line 1245.

ftn-6049 ftn: SCALAR File = GridHistory.f90, Line = 1244 
  A loop starting at line 1244 was blocked with block size 256.

ftn-6332 ftn: VECTOR File = GridHistory.f90, Line = 1244 
  A loop starting at line 1244 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = GridHistory.f90, Line = 1244 
  A loop starting at line 1244 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = GridHistory.f90, Line = 1245 
  A loop starting at line 1245 was not vectorized because a better candidate was found at line 1244.

ftn-6049 ftn: SCALAR File = GridHistory.f90, Line = 1245 
  A loop starting at line 1245 was blocked with block size 4.

ftn-3001 ftn: IPA File = GridHistory.f90, Line = 1269 
  The call to ISGRIDHISTORYON was textually inlined.

ftn-6263 ftn: VECTOR File = GridHistory.f90, Line = 1293 
  A loop starting at line 1293 was not vectorized because it contains a reference to a non-vector intrinsic on line 1295.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
               C r o s s   R e f e r e n c e   for   GRIDHISTORY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

110                                                               FORMAT label
  Decl     780
  Set 
  Used

126                                                               FORMAT label
  Decl     782
  Set 
  Used

140                                                               FORMAT label
  Decl     783
  Set 
  Used

210                                                               FORMAT label
  Decl     784
  Set 
  Used

2135                                                              FORMAT label
  Decl     795
  Set 
  Used

225                                                               FORMAT label
  Decl     786
  Set 
  Used

240                                                               FORMAT label
  Decl     787
  Set 
  Used

520                                                               FORMAT label
  Decl     788
  Set 
  Used

550                                                               FORMAT label
  Decl     789
  Set 
  Used

570                                                               FORMAT label
  Decl     790
  Set 
  Used

700                                                               FORMAT label
  Decl     791
  Set 
  Used

710                                                               FORMAT label
  Decl     792
  Set 
  Used

720                                                               FORMAT label
  Decl     793
  Set 
  Used

740                                                               FORMAT label
  Decl     794
  Set 
  Used

A                               Dummy Arg                         TYPE(MAPGRHIST)
  Decl     908     909
  Set      915
  Used       0     913

A                               Dummy Arg                         TYPE(GRIDHISTPOINT)
  Decl     919     920
  Set 
  Used       0     923

A                               Dummy Arg                         TYPE(GRIDHISTPOINT)
  Decl     926     927
  Set 
  Used       0     930

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     643     858     878     880     888     890

ALCPT                           Structure offset=64               INTEGER, Component of MAPGRHIST, DIMENSION(:), POINTER
  Decl     153
  Set 
  Used       0     913     915

ALLGHF                          Static offset=0                   LOGICAL, PRIVATE, SAVE
  Decl     260
  Set      473
  Used     528     546     555

ALLGHF_IN                       Dummy Arg                         LOGICAL, INTENT(IN)
  Decl     414     426
  Set 
  Used     473

ASSOCIATED                                                        Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     922     929

ATAN                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     461     851     852

AVAILFIELDS                                                       Derived type, PRIVATE
  Decl      97
  Set 
  Used     107

BFR                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1151
  Set     1161    1163
  Used

CF                              Dummy Arg                         REAL(KIND=8), INTENT(IN), OPTIONAL
  Decl     972     976
  Set 
  Used    1010    1014

CF                              Dummy Arg                         REAL(KIND=8), INTENT(IN), OPTIONAL
  Decl    1032    1036
  Set 
  Used    1063    1066

CF                              Dummy Arg                         REAL(KIND=8), INTENT(IN), OPTIONAL
  Decl    1142    1147
  Set 
  Used    1166    1167

CF                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1200    1204
  Set 
  Used    1220    1247

CF                              Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1257    1261
  Set 
  Used    1273    1295

CNVRAY                          Use assoc                         Subroutine, From module INPUTOUTPUT, Module procedure, PRIVATE
  Decl
  Set 
  Used    1118

CNVRAY                          Use assoc                         Subroutine, From module INPUTOUTPUT, Module procedure, PRIVATE
  Decl
  Set 
  Used    1118

COLLECT_GRID_HIS                Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1126

COLLECT_GRID_HIS                Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1126

COMMUNICATIONS                                                    Module
  Decl
  Set 
  Used      19

CONSTANTS                                                         Module
  Decl
  Set 
  Used      12

DEGCONV                         Stack                             REAL(KIND=8)
  Decl     840
  Set      851
  Used     868     869

DEL                             Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     413     424
  Set 
  Used     766

DIGNOS                          Structure offset=640              REAL(KIND=8), Component of GRIDHISTPOINT, DIMENSION(:), POINTER
  Decl     139
  Set 
  Used       0       0       0     923    1021    1071    1111    1133    1247    1295

DIM1                            Stack                             INTEGER
  Decl     978
  Set      989
  Used     999    1000    1001

DIM1                            Stack                             INTEGER
  Decl    1038
  Set     1047
  Used    1056    1057    1058

DIM1                            Stack                             INTEGER
  Decl    1152
  Set     1153
  Used    1158

DIM1                            Stack                             INTEGER
  Decl    1206
  Set     1218
  Used    1229    1230    1231    1237    1238    1239

DIM1                            Stack                             INTEGER
  Decl    1263
  Set     1272
  Used    1282    1283    1284    1286    1287    1288

DIM2                            Stack                             INTEGER
  Decl     979
  Set      990
  Used    1003    1004    1005

DIM2                            Stack                             INTEGER
  Decl    1207
  Set     1219
  Used    1233    1234    1235

DIMCF                           Stack                             INTEGER
  Decl    1208
  Set     1220
  Used    1237    1238    1239

DIMCF                           Stack                             INTEGER
  Decl    1264
  Set     1273
  Used    1286    1287    1288

DLAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     457
  Set      643
  Used     645

DLAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     843
  Set      856     858
  Used     860

DLON                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     456
  Set      648
  Used     651

DLON                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     842
  Set      862     864
  Used     867

DOGRH                           Heap                              LOGICAL, DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl     166
  Set      491     755     757
  Used     490     752

FGZS                            Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl     933     934
  Set 
  Used     957

FID                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     972     974
  Set 
  Used     991     992     993    1009

FID                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1032    1034
  Set 
  Used    1048    1049    1050    1062

FID                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1142    1145
  Set 
  Used    1167    1169

FID                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1200    1202
  Set 
  Used    1221    1222    1223    1243

FID                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1257    1259
  Set 
  Used    1274    1275    1276    1292

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl     972     973
  Set 
  Used     989     990    1014    1021

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1032    1033
  Set 
  Used    1047    1066    1071

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1142    1143
  Set 
  Used    1161

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    1200    1201
  Set 
  Used    1218    1219    1247

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1257    1258
  Set 
  Used    1272    1295

FLDSNAME                        Structure offset=0                CHARACTER(40), Component of AVAILFIELDS
  Decl      98
  Set 
  Used       0     316     568     769

FNAMEGHLOC                      Use assoc                         CHARACTER(212), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     600

FNAMEGHTABLE                    Use assoc                         CHARACTER(209), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     524

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

GHAF                            Heap                              TYPE(AVAILFIELDS), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     107
  Set        0       0       0     316     373     397     501     557     560     569     587     590
  Used       0       0       0       0       0       0     313     510     512     514     586     728     768     769     770
           771     772    1009    1062    1117    1118    1119    1120    1243    1292

GHLAT                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     799     822
  Set      854     868     874
  Used     858     888     889     890

GHLON                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     799     820
  Set      853     869
  Used     865     872     878     879     880     902

GPT                             Heap                              TYPE(GRIDHISTPOINT), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     142
  Set        0       0       0       0     701     703     740    1014    1021    1066    1071    1133    1247    1295
  Used       0       0       0       0     712     720     742    1013    1020    1065    1070    1111    1246    1294

GPTSLOCAL                       Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     285
  Set      658
  Used     619     700     701     702     703

GRADSFLD                        Structure offset=392              CHARACTER(4), Component of AVAILFIELDS
  Decl     102
  Set 
  Used       0     514     772

GRAV                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     957

GRHFLG                          Static offset=64                  LOGICAL, PRIVATE, SAVE
  Decl     269
  Set      474
  Used     489     941    1177    1191

GRHFLG_IN                       Dummy Arg                         LOGICAL, INTENT(IN)
  Decl     414     427
  Set 
  Used     474

GRHLOC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     938
  Set      957
  Used     961

GRHON                           Static offset=128                 LOGICAL, PRIVATE, SAVE
  Decl     279
  Set      475    1177    1184
  Used    1191

GRHTOP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     937
  Set 
  Used     961

GRIDHISTLABEL                                                     Subroutine, Module procedure, PRIVATE
  Decl     799
  Set 
  Used     636

GRIDHISTORY                                                       Module
  Decl       6
  Set 
  Used

GRIDHISTPOINT                                                     Derived type, PRIVATE
  Decl     132
  Set 
  Used     142

GRIDMAP                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     653     654     656

H                                                                 CHARACTER(21), PARAMETER
  Decl     438
  Set 
  Used     537     538     539     549     575     576     577     609     610     611

H                                                                 CHARACTER(22), PARAMETER
  Decl     984
  Set 
  Used     992     993     994     996     997     998    1000    1001    1002    1004    1005    1006

H                                                                 CHARACTER(22), PARAMETER
  Decl    1042
  Set 
  Used    1049    1050    1051    1053    1054    1055    1057    1058    1059

H                                                                 CHARACTER(22), PARAMETER
  Decl    1213
  Set 
  Used    1222    1223    1224    1226    1227    1228    1230    1231    1232    1234    1235    1236    1238    1239    1240

H                                                                 CHARACTER(22), PARAMETER
  Decl    1268
  Set 
  Used    1275    1276    1277    1279    1280    1281    1283    1284    1285    1287    1288    1289

I                               Stack                             INTEGER
  Decl     448
  Set      647     652     664     669     679
  Used     648     653     654     656     660     668     681

I                               Stack                             INTEGER
  Decl     837
  Set      863
  Used     864

I                               Stack                             INTEGER
  Decl     911
  Set      914
  Used     915

I                               Stack                             INTEGER
  Decl     982
  Set     1013    1020
  Used    1014    1021

I                               Stack                             INTEGER
  Decl    1040
  Set     1065    1070
  Used    1066    1071

I                               Stack                             INTEGER
  Decl    1149
  Set     1158
  Used    1159    1161    1163

I                               Stack                             INTEGER
  Decl    1211
  Set     1246
  Used    1247

I                               Stack                             INTEGER
  Decl    1266
  Set     1294
  Used    1295

I8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1144

IACC                                                              CHARACTER(4), PARAMETER
  Decl     440
  Set 
  Used     763

IB                              Stack                             INTEGER
  Decl     451
  Set      726     729
  Used     730

IBLOC                           Structure offset=320              INTEGER, Component of GRIDHISTPOINT
  Decl     134
  Set 
  Used       0       0     740    1013    1065    1070    1246    1294

IBLOCMIN                        Static offset=512                 INTEGER, DIMENSION(1), PRIVATE, SAVE
  Decl     309
  Set      651
  Used     652

IBMAX                           Static offset=576                 INTEGER, PRIVATE, SAVE
  Decl     296
  Set      479
  Used     763    1000    1001    1057    1058    1230    1231    1283    1284

IBMAXPERJB                      Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     298
  Set      467     485
  Used     466     999    1000    1001    1056    1057    1058    1229    1230    1231    1282    1283    1284

IBMAXPERJB_IN                   Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     415     431
  Set 
  Used     485

IBMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     415     418
  Set 
  Used     479

IBPERIJ                         Heap                              INTEGER, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     300
  Set      463     481
  Used     462     740

IBPERIJ_IN                      Dummy Arg                         INTEGER, DIMENSION(<exp>:<exp>, -1:<exp>), INTENT(IN)
  Decl     415     421
  Set 
  Used     481

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     413     425
  Set 
  Used     764

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1081    1085
  Set 
  Used    1100

IDEV                                                              CHARACTER(4), PARAMETER
  Decl     441
  Set 
  Used     764

IERR                            Stack                             INTEGER
  Decl     454
  Set 
  Used     522     524     533     534     536     598     600     605     606     608

IERR                            Stack                             INTEGER
  Decl     940
  Set 
  Used     947     949

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1081    1083
  Set 
  Used    1100

ILOCMIN                         Stack                             INTEGER, DIMENSION(1)
  Decl     846
  Set      867
  Used     869

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    1142    1144
  Set 
  Used    1153    1159

IMAX                            Static offset=640                 INTEGER, PRIVATE, SAVE
  Decl     294
  Set      477
  Used     481     482     636

IMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     799     817
  Set 
  Used     842

IMAXPERJ                        Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     299
  Set      469     483
  Used     468     647     648

IMAXPERJ                        Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     799     819
  Set 
  Used     863     864     869

IMAXPERJ_IN                     Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     415     432
  Set 
  Used     483

IMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     416
  Set 
  Used     421     422     456     477

INIPERJB                        Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     290
  Set      745     747
  Used     694    1012    1019    1064    1069    1245    1293

INITGRIDHISTFIELDS                                                Subroutine, Module procedure, PRIVATE
  Decl     312
  Set 
  Used     459

INITGRIDHISTORY                                                   Subroutine, Module procedure
  Decl      57     413
  Set 
  Used

INPUTOUTPUT                                                       Module
  Decl
  Set 
  Used      16

INREFD                          Structure offset=1216             INTEGER, Component of GRIDHISTPOINT, DIMENSION(:), POINTER
  Decl     140
  Set 
  Used       0     929     930

INT                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     878     888     889

IOLOWLEVEL                                                        Module
  Decl
  Set 
  Used      46

IOV                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     413     420
  Set 
  Used     421     422

IQSTMP                          Stack                             INTEGER, DIMENSION(6)
  Decl    1090
  Set     1103    1104
  Used    1100    1106

ISG                             Stack                             INTEGER
  Decl    1091
  Set     1102
  Used    1103    1104

ISGRIDHISTORYON                                                   Function, LOGICAL, RESULT(ISGRIDHISTORYON), Module procedure
  Decl      63    1189    1190
  Set 
  Used

ISGRIDHISTORYON                 Register                          LOGICAL, Function result
  Decl
  Set     1191
  Used

ISLOCAL                         Heap                              INTEGER, DIMENSION(:), ALLOCATABLE
  Decl     436
  Set      660
  Used     623     681     740     741

ISREQFLD                        Structure offset=512              LOGICAL, Component of AVAILFIELDS
  Decl     105
  Set 
  Used       0       0     557     569     728     755     768    1117

J                               Stack                             INTEGER
  Decl     449
  Set      642     646     678
  Used     643     647     648     653     654     656     659     679

J                               Stack                             INTEGER
  Decl     838
  Set      857
  Used     858

J                               Stack                             INTEGER
  Decl    1087
  Set     1105    1108
  Used    1106    1111

JB                              Stack                             INTEGER
  Decl     452
  Set      746     753
  Used     747     754     755     757

JB                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     972     975
  Set 
  Used     995     996     997     999    1000    1001    1012    1019

JB                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1032    1035
  Set 
  Used    1052    1053    1054    1056    1057    1058    1064    1069

JB                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1142    1146
  Set 
  Used    1167    1169

JB                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1200    1203
  Set 
  Used    1225    1226    1227    1229    1230    1231    1245

JB                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1257    1260
  Set 
  Used    1278    1279    1280    1282    1283    1284    1293

JBLOC                           Structure offset=352              INTEGER, Component of GRIDHISTPOINT
  Decl     135
  Set 
  Used       0     742     957

JBLOCMIN                        Static offset=1024                INTEGER, DIMENSION(1), PRIVATE, SAVE
  Decl     308
  Set      645
  Used     646

JBMAX                           Static offset=1088                INTEGER, PRIVATE, SAVE
  Decl     297
  Set      480
  Used     746     753     763     995    1052    1225    1278

JBMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     415     419
  Set 
  Used     480

JBPERIJ                         Heap                              INTEGER, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     301
  Set      465     482
  Used     464     741

JBPERIJ_IN                      Dummy Arg                         INTEGER, DIMENSION(<exp>:<exp>, -1:<exp>), INTENT(IN)
  Decl     415     422
  Set 
  Used     482

JLOCMIN                         Stack                             INTEGER, DIMENSION(1)
  Decl     847
  Set      860
  Used     863     864     868     869

JMAX                            Static offset=1152                INTEGER, PRIVATE, SAVE
  Decl     295
  Set      478
  Used     481     482     636     642

JMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     799     818
  Set 
  Used     843     857

JMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     417
  Set 
  Used     421     422     457     478

JSLOCAL                         Heap                              INTEGER, DIMENSION(:), ALLOCATABLE
  Decl     435
  Set      659
  Used     622     740     741

K                               Stack                             INTEGER
  Decl     450
  Set      665     766
  Used     667     766

K                               Stack                             INTEGER
  Decl     981
  Set     1011    1018
  Used    1014    1021

K                               Stack                             INTEGER
  Decl    1210
  Set     1244
  Used    1247

KFIRST                          Stack                             INTEGER
  Decl     980
  Set     1009
  Used    1014    1021

KFIRST                          Stack                             INTEGER
  Decl    1039
  Set     1062
  Used    1066    1071

KFIRST                          Stack                             INTEGER
  Decl    1209
  Set     1243
  Used    1247

KFIRST                          Stack                             INTEGER
  Decl    1265
  Set     1292
  Used    1295

KMAX                            Static offset=1216                INTEGER, PRIVATE, SAVE
  Decl     302
  Set      484
  Used     501     763    1003    1011    1018    1233    1244

KMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     415     423
  Set 
  Used     484

LABEL                           Dummy Arg                         CHARACTER(*), DIMENSION(<exp>), INTENT(OUT)
  Decl     799     824
  Set 
  Used     898

LAT                             Stack                             REAL(KIND=8)
  Decl     434
  Set      641
  Used     643

LATDEG                          Stack                             INTEGER
  Decl     830
  Set      888
  Used     890     899

LATHEM                          Stack                             CHARACTER(1)
  Decl     835
  Set      893     895
  Used     899

LATI                            Use assoc                         REAL(KIND=8), From module UTILS, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     643     858     868

LATMIN                          Stack                             INTEGER
  Decl     832
  Set      890     891
  Used     891     899

LATSIG                          Stack                             INTEGER
  Decl     831
  Set      889
  Used     892

LOCGRFLD                        Structure offset=480              INTEGER, Component of AVAILFIELDS
  Decl     104
  Set 
  Used       0       0     590    1062    1243    1292

LONDEG                          Stack                             INTEGER
  Decl     827
  Set      878
  Used     880     899

LONHEM                          Stack                             CHARACTER(1)
  Decl     834
  Set      883     885
  Used     899

LONMIN                          Stack                             INTEGER
  Decl     829
  Set      880     881
  Used     881     899

LONSIG                          Stack                             INTEGER
  Decl     828
  Set      879
  Used     882

LYRSFLDS                        Structure offset=448              INTEGER, Component of AVAILFIELDS
  Decl     103
  Set 
  Used       0       0     501     588     770    1120

M                               Stack                             INTEGER
  Decl    1088
  Set     1115    1120
  Used    1118

MAP                             Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     287
  Set      684
  Used     676     699     710     725     739     956    1110

MAPGLOBAL                       Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     288
  Set      668
  Used     663     962    1127

MAPGRHIST                                                         Derived type, PRIVATE
  Decl     151
  Set 
  Used     155

MAXNODES                        Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     665     960    1125

MINLOC                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     645     860     867

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1104

MPIPRIV1                                                          Common block 
  Decl     494     497
  Set 
  Used

MPIPRIV2                                                          Common block 
  Decl     496     497
  Set 
  Used

MPIPRIVC                                                          Common block 
  Decl     499     500
  Set 
  Used

MPI_2COMPLEX                                                      INTEGER, PARAMETER, PRIVATE
  Decl     264     265
  Set 
  Used

MPI_2DOUBLE_COMPLEX                                               INTEGER, PARAMETER, PRIVATE
  Decl     270     271
  Set 
  Used

MPI_2DOUBLE_PRECISION                                             INTEGER, PARAMETER, PRIVATE
  Decl     266     267
  Set 
  Used

MPI_2INT                                                          INTEGER, PARAMETER, PRIVATE
  Decl     347     348
  Set 
  Used

MPI_2INTEGER                                                      INTEGER, PARAMETER, PRIVATE
  Decl     262     263
  Set 
  Used

MPI_2REAL                                                         INTEGER, PARAMETER, PRIVATE
  Decl     268     269
  Set 
  Used

MPI_ADDRESS_KIND                                                  INTEGER, PARAMETER, PRIVATE
  Decl     304     305
  Set 
  Used

MPI_AINT                                                          INTEGER, PARAMETER, PRIVATE
  Decl     377     378
  Set 
  Used

MPI_ANY_SOURCE                                                    INTEGER, PARAMETER, PRIVATE
  Decl     232     233
  Set 
  Used

MPI_ANY_TAG                                                       INTEGER, PARAMETER, PRIVATE
  Decl     234     235
  Set 
  Used

MPI_APPNUM                                                        INTEGER, PARAMETER, PRIVATE
  Decl     202     203
  Set 
  Used

MPI_ARGVS_NULL                  /MPIPRIVC/ offset=0               CHARACTER(1), DIMENSION(1, 1), PRIVATE
  Decl      16     499
  Set 
  Used

MPI_ARGV_NULL                   /MPIPRIVC/ offset=8               CHARACTER(1), DIMENSION(1), PRIVATE
  Decl      17     499
  Set 
  Used

MPI_BAND                                                          INTEGER, PARAMETER, PRIVATE
  Decl     150     151
  Set 
  Used

MPI_BOR                                                           INTEGER, PARAMETER, PRIVATE
  Decl     154     155
  Set 
  Used

MPI_BOTTOM                      /MPIPRIV1/ offset=0               INTEGER, PRIVATE
  Decl     479     494
  Set 
  Used

MPI_BSEND_OVERHEAD                                                INTEGER, PARAMETER, PRIVATE
  Decl     228     229
  Set 
  Used

MPI_BXOR                                                          INTEGER, PARAMETER, PRIVATE
  Decl     158     159
  Set 
  Used

MPI_BYTE                                                          INTEGER, PARAMETER, PRIVATE
  Decl     274     275
  Set 
  Used

MPI_CART                                                          INTEGER, PARAMETER, PRIVATE
  Decl     240     241
  Set 
  Used

MPI_CHAR                                                          INTEGER, PARAMETER, PRIVATE
  Decl     307     308
  Set 
  Used

MPI_CHARACTER                                                     INTEGER, PARAMETER, PRIVATE
  Decl     272     273
  Set 
  Used

MPI_COMBINER_CONTIGUOUS                                           INTEGER, PARAMETER, PRIVATE
  Decl     385     386
  Set 
  Used

MPI_COMBINER_DARRAY                                               INTEGER, PARAMETER, PRIVATE
  Decl     407     408
  Set 
  Used

MPI_COMBINER_DUP                                                  INTEGER, PARAMETER, PRIVATE
  Decl     383     384
  Set 
  Used

MPI_COMBINER_F90_COMPLEX                                          INTEGER, PARAMETER, PRIVATE
  Decl     411     412
  Set 
  Used

MPI_COMBINER_F90_INTEGER                                          INTEGER, PARAMETER, PRIVATE
  Decl     413     414
  Set 
  Used

MPI_COMBINER_F90_REAL                                             INTEGER, PARAMETER, PRIVATE
  Decl     409     410
  Set 
  Used

MPI_COMBINER_HINDEXED                                             INTEGER, PARAMETER, PRIVATE
  Decl     397     398
  Set 
  Used

MPI_COMBINER_HINDEXED_INTEGER                                     INTEGER, PARAMETER, PRIVATE
  Decl     395     396
  Set 
  Used

MPI_COMBINER_HVECTOR                                              INTEGER, PARAMETER, PRIVATE
  Decl     391     392
  Set 
  Used

MPI_COMBINER_HVECTOR_INTEGER                                      INTEGER, PARAMETER, PRIVATE
  Decl     389     390
  Set 
  Used

MPI_COMBINER_INDEXED                                              INTEGER, PARAMETER, PRIVATE
  Decl     393     394
  Set 
  Used

MPI_COMBINER_INDEXED_BLOCK                                        INTEGER, PARAMETER, PRIVATE
  Decl     399     400
  Set 
  Used

MPI_COMBINER_NAMED                                                INTEGER, PARAMETER, PRIVATE
  Decl     381     382
  Set 
  Used

MPI_COMBINER_RESIZED                                              INTEGER, PARAMETER, PRIVATE
  Decl     415     416
  Set 
  Used

MPI_COMBINER_STRUCT                                               INTEGER, PARAMETER, PRIVATE
  Decl     403     404
  Set 
  Used

MPI_COMBINER_STRUCT_INTEGER                                       INTEGER, PARAMETER, PRIVATE
  Decl     401     402
  Set 
  Used

MPI_COMBINER_SUBARRAY                                             INTEGER, PARAMETER, PRIVATE
  Decl     405     406
  Set 
  Used

MPI_COMBINER_VECTOR                                               INTEGER, PARAMETER, PRIVATE
  Decl     387     388
  Set 
  Used

MPI_COMM_DUP_FN                                                   Procedure
  Decl     483
  Set 
  Used

MPI_COMM_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     172     173
  Set 
  Used

MPI_COMM_NULL_COPY_FN                                             Procedure
  Decl     484
  Set 
  Used

MPI_COMM_NULL_DELETE_FN                                           Procedure
  Decl     483
  Set 
  Used

MPI_COMM_SELF                                                     INTEGER, PARAMETER, PRIVATE
  Decl     168     169
  Set 
  Used

MPI_COMM_WORLD                                                    INTEGER, PARAMETER, PRIVATE
  Decl     166     167
  Set 
  Used

MPI_COMPLEX                                                       INTEGER, PARAMETER, PRIVATE
  Decl     250     251
  Set 
  Used

MPI_COMPLEX16                                                     INTEGER, PARAMETER, PRIVATE
  Decl     300     301
  Set 
  Used

MPI_COMPLEX32                                                     INTEGER, PARAMETER, PRIVATE
  Decl     302     303
  Set 
  Used

MPI_COMPLEX8                                                      INTEGER, PARAMETER, PRIVATE
  Decl     298     299
  Set 
  Used

MPI_CONGRUENT                                                     INTEGER, PARAMETER, PRIVATE
  Decl     134     135
  Set 
  Used

MPI_CONVERSION_FN_NULL                                            Procedure
  Decl     489
  Set 
  Used

MPI_C_BOOL                                                        INTEGER, PARAMETER, PRIVATE
  Decl     367     368
  Set 
  Used

MPI_C_COMPLEX                                                     INTEGER, PARAMETER, PRIVATE
  Decl     371     372
  Set 
  Used

MPI_C_DOUBLE_COMPLEX                                              INTEGER, PARAMETER, PRIVATE
  Decl     373     374
  Set 
  Used

MPI_C_FLOAT_COMPLEX                                               INTEGER, PARAMETER, PRIVATE
  Decl     369     370
  Set 
  Used

MPI_C_LONG_DOUBLE_COMPLEX                                         INTEGER, PARAMETER, PRIVATE
  Decl     375     376
  Set 
  Used

MPI_DATATYPE_NULL                                                 INTEGER, PARAMETER, PRIVATE
  Decl     182     183
  Set 
  Used     291     297     303     332     350

MPI_DISPLACEMENT_CURRENT                                          INTEGER*8, PARAMETER, PRIVATE
  Decl     477     478
  Set 
  Used

MPI_DISTRIBUTE_BLOCK                                              INTEGER, PARAMETER, PRIVATE
  Decl     469     470
  Set 
  Used

MPI_DISTRIBUTE_CYCLIC                                             INTEGER, PARAMETER, PRIVATE
  Decl     471     472
  Set 
  Used

MPI_DISTRIBUTE_DFLT_DARG                                          INTEGER, PARAMETER, PRIVATE
  Decl     475     476
  Set 
  Used

MPI_DISTRIBUTE_NONE                                               INTEGER, PARAMETER, PRIVATE
  Decl     473     474
  Set 
  Used

MPI_DOUBLE                                                        INTEGER, PARAMETER, PRIVATE
  Decl     329     330
  Set 
  Used

MPI_DOUBLE_COMPLEX                                                INTEGER, PARAMETER, PRIVATE
  Decl     252     253
  Set 
  Used

MPI_DOUBLE_INT                                                    INTEGER, PARAMETER, PRIVATE
  Decl     341     342
  Set 
  Used

MPI_DOUBLE_PRECISION                                              INTEGER, PARAMETER, PRIVATE
  Decl     258     259
  Set 
  Used

MPI_DUP_FN                                                        Procedure
  Decl     480
  Set 
  Used

MPI_ERRCODES_IGNORE             /MPIPRIV2/ offset=160             INTEGER, DIMENSION(1), PRIVATE
  Decl      15     496
  Set 
  Used

MPI_ERRHANDLER_NULL                                               INTEGER, PARAMETER, PRIVATE
  Decl     186     187
  Set 
  Used

MPI_ERROR                                                         INTEGER, PARAMETER, PRIVATE
  Decl       9      10
  Set 
  Used

MPI_ERRORS_ARE_FATAL                                              INTEGER, PARAMETER, PRIVATE
  Decl     128     129
  Set 
  Used

MPI_ERRORS_RETURN                                                 INTEGER, PARAMETER, PRIVATE
  Decl     130     131
  Set 
  Used

MPI_ERR_ACCESS                                                    INTEGER, PARAMETER, PRIVATE
  Decl     122     123
  Set 
  Used

MPI_ERR_AMODE                                                     INTEGER, PARAMETER, PRIVATE
  Decl     106     107
  Set 
  Used

MPI_ERR_ARG                                                       INTEGER, PARAMETER, PRIVATE
  Decl      42      43
  Set 
  Used

MPI_ERR_ASSERT                                                    INTEGER, PARAMETER, PRIVATE
  Decl      64      65
  Set 
  Used

MPI_ERR_BAD_FILE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      96      97
  Set 
  Used

MPI_ERR_BASE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      30      31
  Set 
  Used

MPI_ERR_BUFFER                                                    INTEGER, PARAMETER, PRIVATE
  Decl      48      49
  Set 
  Used

MPI_ERR_COMM                                                      INTEGER, PARAMETER, PRIVATE
  Decl      70      71
  Set 
  Used

MPI_ERR_CONVERSION                                                INTEGER, PARAMETER, PRIVATE
  Decl     126     127
  Set 
  Used

MPI_ERR_COUNT                                                     INTEGER, PARAMETER, PRIVATE
  Decl      26      27
  Set 
  Used

MPI_ERR_DIMS                                                      INTEGER, PARAMETER, PRIVATE
  Decl     112     113
  Set 
  Used

MPI_ERR_DISP                                                      INTEGER, PARAMETER, PRIVATE
  Decl      58      59
  Set 
  Used

MPI_ERR_DUP_DATAREP                                               INTEGER, PARAMETER, PRIVATE
  Decl      50      51
  Set 
  Used

MPI_ERR_FILE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      24      25
  Set 
  Used

MPI_ERR_FILE_EXISTS                                               INTEGER, PARAMETER, PRIVATE
  Decl      66      67
  Set 
  Used

MPI_ERR_FILE_IN_USE                                               INTEGER, PARAMETER, PRIVATE
  Decl      98      99
  Set 
  Used

MPI_ERR_GROUP                                                     INTEGER, PARAMETER, PRIVATE
  Decl      78      79
  Set 
  Used

MPI_ERR_INFO                                                      INTEGER, PARAMETER, PRIVATE
  Decl      92      93
  Set 
  Used

MPI_ERR_INFO_KEY                                                  INTEGER, PARAMETER, PRIVATE
  Decl      36      37
  Set 
  Used

MPI_ERR_INFO_NOKEY                                                INTEGER, PARAMETER, PRIVATE
  Decl      62      63
  Set 
  Used

MPI_ERR_INFO_VALUE                                                INTEGER, PARAMETER, PRIVATE
  Decl      86      87
  Set 
  Used

MPI_ERR_INTERN                                                    INTEGER, PARAMETER, PRIVATE
  Decl     118     119
  Set 
  Used

MPI_ERR_IN_STATUS                                                 INTEGER, PARAMETER, PRIVATE
  Decl      34      35
  Set 
  Used

MPI_ERR_IO                                                        INTEGER, PARAMETER, PRIVATE
  Decl     120     121
  Set 
  Used

MPI_ERR_KEYVAL                                                    INTEGER, PARAMETER, PRIVATE
  Decl      72      73
  Set 
  Used

MPI_ERR_LASTCODE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      54      55
  Set 
  Used

MPI_ERR_LOCKTYPE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      38      39
  Set 
  Used

MPI_ERR_NAME                                                      INTEGER, PARAMETER, PRIVATE
  Decl      74      75
  Set 
  Used

MPI_ERR_NOT_SAME                                                  INTEGER, PARAMETER, PRIVATE
  Decl      88      89
  Set 
  Used

MPI_ERR_NO_MEM                                                    INTEGER, PARAMETER, PRIVATE
  Decl      94      95
  Set 
  Used

MPI_ERR_NO_SPACE                                                  INTEGER, PARAMETER, PRIVATE
  Decl     124     125
  Set 
  Used

MPI_ERR_NO_SUCH_FILE                                              INTEGER, PARAMETER, PRIVATE
  Decl     114     115
  Set 
  Used

MPI_ERR_OP                                                        INTEGER, PARAMETER, PRIVATE
  Decl      40      41
  Set 
  Used

MPI_ERR_OTHER                                                     INTEGER, PARAMETER, PRIVATE
  Decl      20      21
  Set 
  Used

MPI_ERR_PENDING                                                   INTEGER, PARAMETER, PRIVATE
  Decl      68      69
  Set 
  Used

MPI_ERR_PORT                                                      INTEGER, PARAMETER, PRIVATE
  Decl      60      61
  Set 
  Used

MPI_ERR_QUOTA                                                     INTEGER, PARAMETER, PRIVATE
  Decl     104     105
  Set 
  Used

MPI_ERR_RANK                                                      INTEGER, PARAMETER, PRIVATE
  Decl     110     111
  Set 
  Used

MPI_ERR_READ_ONLY                                                 INTEGER, PARAMETER, PRIVATE
  Decl      44      45
  Set 
  Used

MPI_ERR_REQUEST                                                   INTEGER, PARAMETER, PRIVATE
  Decl      76      77
  Set 
  Used

MPI_ERR_RMA_CONFLICT                                              INTEGER, PARAMETER, PRIVATE
  Decl      32      33
  Set 
  Used

MPI_ERR_RMA_SYNC                                                  INTEGER, PARAMETER, PRIVATE
  Decl      90      91
  Set 
  Used

MPI_ERR_ROOT                                                      INTEGER, PARAMETER, PRIVATE
  Decl     108     109
  Set 
  Used

MPI_ERR_SERVICE                                                   INTEGER, PARAMETER, PRIVATE
  Decl     116     117
  Set 
  Used

MPI_ERR_SIZE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      46      47
  Set 
  Used

MPI_ERR_SPAWN                                                     INTEGER, PARAMETER, PRIVATE
  Decl      28      29
  Set 
  Used

MPI_ERR_TAG                                                       INTEGER, PARAMETER, PRIVATE
  Decl      84      85
  Set 
  Used

MPI_ERR_TOPOLOGY                                                  INTEGER, PARAMETER, PRIVATE
  Decl      80      81
  Set 
  Used

MPI_ERR_TRUNCATE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      56      57
  Set 
  Used

MPI_ERR_TYPE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      82      83
  Set 
  Used

MPI_ERR_UNKNOWN                                                   INTEGER, PARAMETER, PRIVATE
  Decl     100     101
  Set 
  Used

MPI_ERR_UNSUPPORTED_DATAREP                                       INTEGER, PARAMETER, PRIVATE
  Decl      52      53
  Set 
  Used

MPI_ERR_UNSUPPORTED_OPERATION                                     INTEGER, PARAMETER, PRIVATE
  Decl     102     103
  Set 
  Used

MPI_ERR_WIN                                                       INTEGER, PARAMETER, PRIVATE
  Decl      22      23
  Set 
  Used

MPI_FILE_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     176     177
  Set 
  Used

MPI_FLOAT                                                         INTEGER, PARAMETER, PRIVATE
  Decl     327     328
  Set 
  Used

MPI_FLOAT_INT                                                     INTEGER, PARAMETER, PRIVATE
  Decl     339     340
  Set 
  Used

MPI_GRAPH                                                         INTEGER, PARAMETER, PRIVATE
  Decl     238     239
  Set 
  Used

MPI_GROUP_EMPTY                                                   INTEGER, PARAMETER, PRIVATE
  Decl     170     171
  Set 
  Used

MPI_GROUP_NULL                                                    INTEGER, PARAMETER, PRIVATE
  Decl     178     179
  Set 
  Used

MPI_HOST                                                          INTEGER, PARAMETER, PRIVATE
  Decl     192     193
  Set 
  Used

MPI_IDENT                                                         INTEGER, PARAMETER, PRIVATE
  Decl     132     133
  Set 
  Used

MPI_INFO_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     188     189
  Set 
  Used

MPI_INT                                                           INTEGER, PARAMETER, PRIVATE
  Decl     319     320
  Set 
  Used

MPI_INT16_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     353     354
  Set 
  Used

MPI_INT32_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     355     356
  Set 
  Used

MPI_INT64_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     357     358
  Set 
  Used

MPI_INT8_T                                                        INTEGER, PARAMETER, PRIVATE
  Decl     351     352
  Set 
  Used

MPI_INTEGER                                                       INTEGER, PARAMETER, PRIVATE
  Decl     260     261
  Set 
  Used

MPI_INTEGER1                                                      INTEGER, PARAMETER, PRIVATE
  Decl     282     283
  Set 
  Used

MPI_INTEGER16                                                     INTEGER, PARAMETER, PRIVATE
  Decl     290     291
  Set 
  Used

MPI_INTEGER2                                                      INTEGER, PARAMETER, PRIVATE
  Decl     284     285
  Set 
  Used

MPI_INTEGER4                                                      INTEGER, PARAMETER, PRIVATE
  Decl     286     287
  Set 
  Used

MPI_INTEGER8                                                      INTEGER, PARAMETER, PRIVATE
  Decl     288     289
  Set 
  Used

MPI_IN_PLACE                    /MPIPRIV1/ offset=32              INTEGER, PRIVATE
  Decl     479     494
  Set 
  Used

MPI_IO                                                            INTEGER, PARAMETER, PRIVATE
  Decl     194     195
  Set 
  Used

MPI_KEYVAL_INVALID                                                INTEGER, PARAMETER, PRIVATE
  Decl     226     227
  Set 
  Used

MPI_LAND                                                          INTEGER, PARAMETER, PRIVATE
  Decl     148     149
  Set 
  Used

MPI_LASTUSEDCODE                                                  INTEGER, PARAMETER, PRIVATE
  Decl     200     201
  Set 
  Used

MPI_LB                                                            INTEGER, PARAMETER, PRIVATE
  Decl     278     279
  Set 
  Used

MPI_LOCK_EXCLUSIVE                                                INTEGER, PARAMETER, PRIVATE
  Decl     246     247
  Set 
  Used

MPI_LOCK_SHARED                                                   INTEGER, PARAMETER, PRIVATE
  Decl     248     249
  Set 
  Used

MPI_LOGICAL                                                       INTEGER, PARAMETER, PRIVATE
  Decl     254     255
  Set 
  Used

MPI_LONG                                                          INTEGER, PARAMETER, PRIVATE
  Decl     323     324
  Set 
  Used

MPI_LONG_DOUBLE                                                   INTEGER, PARAMETER, PRIVATE
  Decl     331     332
  Set 
  Used

MPI_LONG_DOUBLE_INT                                               INTEGER, PARAMETER, PRIVATE
  Decl     349     350
  Set 
  Used

MPI_LONG_INT                                                      INTEGER, PARAMETER, PRIVATE
  Decl     343     344
  Set 
  Used

MPI_LONG_LONG                                                     INTEGER, PARAMETER, PRIVATE
  Decl     337     338
  Set 
  Used

MPI_LONG_LONG_INT                                                 INTEGER, PARAMETER, PRIVATE
  Decl     333     334
  Set 
  Used

MPI_LOR                                                           INTEGER, PARAMETER, PRIVATE
  Decl     152     153
  Set 
  Used

MPI_LXOR                                                          INTEGER, PARAMETER, PRIVATE
  Decl     156     157
  Set 
  Used

MPI_MAX                                                           INTEGER, PARAMETER, PRIVATE
  Decl     140     141
  Set 
  Used

MPI_MAXLOC                                                        INTEGER, PARAMETER, PRIVATE
  Decl     162     163
  Set 
  Used

MPI_MAX_DATAREP_STRING                                            INTEGER, PARAMETER, PRIVATE
  Decl     222     223
  Set 
  Used

MPI_MAX_ERROR_STRING                                              INTEGER, PARAMETER, PRIVATE
  Decl     210     211
  Set 
  Used

MPI_MAX_INFO_KEY                                                  INTEGER, PARAMETER, PRIVATE
  Decl     216     217
  Set 
  Used

MPI_MAX_INFO_VAL                                                  INTEGER, PARAMETER, PRIVATE
  Decl     218     219
  Set 
  Used

MPI_MAX_OBJECT_NAME                                               INTEGER, PARAMETER, PRIVATE
  Decl     214     215
  Set 
  Used

MPI_MAX_PORT_NAME                                                 INTEGER, PARAMETER, PRIVATE
  Decl     212     213
  Set 
  Used

MPI_MAX_PROCESSOR_NAME                                            INTEGER, PARAMETER, PRIVATE
  Decl     220     221
  Set 
  Used

MPI_MIN                                                           INTEGER, PARAMETER, PRIVATE
  Decl     142     143
  Set 
  Used

MPI_MINLOC                                                        INTEGER, PARAMETER, PRIVATE
  Decl     160     161
  Set 
  Used

MPI_MODE_APPEND                                                   INTEGER, PARAMETER, PRIVATE
  Decl     455     456
  Set 
  Used

MPI_MODE_CREATE                                                   INTEGER, PARAMETER, PRIVATE
  Decl     451     452
  Set 
  Used

MPI_MODE_DELETE_ON_CLOSE                                          INTEGER, PARAMETER, PRIVATE
  Decl     447     448
  Set 
  Used

MPI_MODE_EXCL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     453     454
  Set 
  Used

MPI_MODE_NOCHECK                                                  INTEGER, PARAMETER, PRIVATE
  Decl     423     424
  Set 
  Used

MPI_MODE_NOPRECEDE                                                INTEGER, PARAMETER, PRIVATE
  Decl     429     430
  Set 
  Used

MPI_MODE_NOPUT                                                    INTEGER, PARAMETER, PRIVATE
  Decl     427     428
  Set 
  Used

MPI_MODE_NOSTORE                                                  INTEGER, PARAMETER, PRIVATE
  Decl     425     426
  Set 
  Used

MPI_MODE_NOSUCCEED                                                INTEGER, PARAMETER, PRIVATE
  Decl     431     432
  Set 
  Used

MPI_MODE_RDONLY                                                   INTEGER, PARAMETER, PRIVATE
  Decl     441     442
  Set 
  Used

MPI_MODE_RDWR                                                     INTEGER, PARAMETER, PRIVATE
  Decl     443     444
  Set 
  Used

MPI_MODE_SEQUENTIAL                                               INTEGER, PARAMETER, PRIVATE
  Decl     457     458
  Set 
  Used

MPI_MODE_UNIQUE_OPEN                                              INTEGER, PARAMETER, PRIVATE
  Decl     449     450
  Set 
  Used

MPI_MODE_WRONLY                                                   INTEGER, PARAMETER, PRIVATE
  Decl     445     446
  Set 
  Used

MPI_NULL_COPY_FN                                                  Procedure
  Decl     480
  Set 
  Used

MPI_NULL_DELETE_FN                                                Procedure
  Decl     480
  Set 
  Used

MPI_OFFSET                                                        INTEGER, PARAMETER, PRIVATE
  Decl     379     380
  Set 
  Used

MPI_OFFSET_KIND                                                   INTEGER, PARAMETER, PRIVATE
  Decl     304     306
  Set 
  Used

MPI_OP_NULL                                                       INTEGER, PARAMETER, PRIVATE
  Decl     180     181
  Set 
  Used

MPI_ORDER_C                                                       INTEGER, PARAMETER, PRIVATE
  Decl     465     466
  Set 
  Used

MPI_ORDER_FORTRAN                                                 INTEGER, PARAMETER, PRIVATE
  Decl     467     468
  Set 
  Used

MPI_PACKED                                                        INTEGER, PARAMETER, PRIVATE
  Decl     280     281
  Set 
  Used

MPI_PROC_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     230     231
  Set 
  Used

MPI_PROD                                                          INTEGER, PARAMETER, PRIVATE
  Decl     146     147
  Set 
  Used

MPI_REAL                                                          INTEGER, PARAMETER, PRIVATE
  Decl     256     257
  Set 
  Used

MPI_REAL16                                                        INTEGER, PARAMETER, PRIVATE
  Decl     296     297
  Set 
  Used

MPI_REAL4                                                         INTEGER, PARAMETER, PRIVATE
  Decl     292     293
  Set 
  Used

MPI_REAL8                                                         INTEGER, PARAMETER, PRIVATE
  Decl     294     295
  Set 
  Used

MPI_REPLACE                                                       INTEGER, PARAMETER, PRIVATE
  Decl     164     165
  Set 
  Used

MPI_REQUEST_NULL                                                  INTEGER, PARAMETER, PRIVATE
  Decl     184     185
  Set 
  Used

MPI_ROOT                                                          INTEGER, PARAMETER, PRIVATE
  Decl     236     237
  Set 
  Used

MPI_SEEK_CUR                                                      INTEGER, PARAMETER, PRIVATE
  Decl     461     462
  Set 
  Used

MPI_SEEK_END                                                      INTEGER, PARAMETER, PRIVATE
  Decl     463     464
  Set 
  Used

MPI_SEEK_SET                                                      INTEGER, PARAMETER, PRIVATE
  Decl     459     460
  Set 
  Used

MPI_SHORT                                                         INTEGER, PARAMETER, PRIVATE
  Decl     315     316
  Set 
  Used

MPI_SHORT_INT                                                     INTEGER, PARAMETER, PRIVATE
  Decl     345     346
  Set 
  Used

MPI_SIGNED_CHAR                                                   INTEGER, PARAMETER, PRIVATE
  Decl     309     310
  Set 
  Used

MPI_SIMILAR                                                       INTEGER, PARAMETER, PRIVATE
  Decl     136     137
  Set 
  Used

MPI_SOURCE                                                        INTEGER, PARAMETER, PRIVATE
  Decl       9      10
  Set 
  Used

MPI_STATUSES_IGNORE             /MPIPRIV2/ offset=0               INTEGER, DIMENSION(5, 1), PRIVATE
  Decl      14     496
  Set 
  Used

MPI_STATUS_IGNORE               /MPIPRIV1/ offset=64              INTEGER, DIMENSION(5), PRIVATE
  Decl      13     494
  Set 
  Used

MPI_STATUS_SIZE                                                   INTEGER, PARAMETER, PRIVATE
  Decl      11      12
  Set 
  Used      13      14

MPI_SUBVERSION                                                    INTEGER, PARAMETER, PRIVATE
  Decl     244     245
  Set 
  Used

MPI_SUCCESS                                                       INTEGER, PARAMETER, PRIVATE
  Decl      18      19
  Set 
  Used

MPI_SUM                                                           INTEGER, PARAMETER, PRIVATE
  Decl     144     145
  Set 
  Used

MPI_TAG                                                           INTEGER, PARAMETER, PRIVATE
  Decl       9      10
  Set 
  Used

MPI_TAG_UB                                                        INTEGER, PARAMETER, PRIVATE
  Decl     190     191
  Set 
  Used

MPI_THREAD_FUNNELED                                               INTEGER, PARAMETER, PRIVATE
  Decl     435     436
  Set 
  Used

MPI_THREAD_MULTIPLE                                               INTEGER, PARAMETER, PRIVATE
  Decl     439     440
  Set 
  Used

MPI_THREAD_SERIALIZED                                             INTEGER, PARAMETER, PRIVATE
  Decl     437     438
  Set 
  Used

MPI_THREAD_SINGLE                                                 INTEGER, PARAMETER, PRIVATE
  Decl     433     434
  Set 
  Used

MPI_TYPECLASS_COMPLEX                                             INTEGER, PARAMETER, PRIVATE
  Decl     421     422
  Set 
  Used

MPI_TYPECLASS_INTEGER                                             INTEGER, PARAMETER, PRIVATE
  Decl     419     420
  Set 
  Used

MPI_TYPECLASS_REAL                                                INTEGER, PARAMETER, PRIVATE
  Decl     417     418
  Set 
  Used

MPI_TYPE_DUP_FN                                                   Procedure
  Decl     487
  Set 
  Used

MPI_TYPE_NULL_COPY_FN                                             Procedure
  Decl     488
  Set 
  Used

MPI_TYPE_NULL_DELETE_FN                                           Procedure
  Decl     487
  Set 
  Used

MPI_UB                                                            INTEGER, PARAMETER, PRIVATE
  Decl     276     277
  Set 
  Used

MPI_UINT16_T                                                      INTEGER, PARAMETER, PRIVATE
  Decl     361     362
  Set 
  Used

MPI_UINT32_T                                                      INTEGER, PARAMETER, PRIVATE
  Decl     363     364
  Set 
  Used

MPI_UINT64_T                                                      INTEGER, PARAMETER, PRIVATE
  Decl     365     366
  Set 
  Used

MPI_UINT8_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     359     360
  Set 
  Used

MPI_UNDEFINED                                                     INTEGER, PARAMETER, PRIVATE
  Decl     224     225
  Set 
  Used

MPI_UNEQUAL                                                       INTEGER, PARAMETER, PRIVATE
  Decl     138     139
  Set 
  Used

MPI_UNIVERSE_SIZE                                                 INTEGER, PARAMETER, PRIVATE
  Decl     198     199
  Set 
  Used

MPI_UNSIGNED                                                      INTEGER, PARAMETER, PRIVATE
  Decl     321     322
  Set 
  Used

MPI_UNSIGNED_CHAR                                                 INTEGER, PARAMETER, PRIVATE
  Decl     311     312
  Set 
  Used

MPI_UNSIGNED_LONG                                                 INTEGER, PARAMETER, PRIVATE
  Decl     325     326
  Set 
  Used

MPI_UNSIGNED_LONG_LONG                                            INTEGER, PARAMETER, PRIVATE
  Decl     335     336
  Set 
  Used

MPI_UNSIGNED_SHORT                                                INTEGER, PARAMETER, PRIVATE
  Decl     317     318
  Set 
  Used

MPI_VERSION                                                       INTEGER, PARAMETER, PRIVATE
  Decl     242     243
  Set 
  Used

MPI_WCHAR                                                         INTEGER, PARAMETER, PRIVATE
  Decl     313     314
  Set 
  Used

MPI_WIN_BASE                                                      INTEGER, PARAMETER, PRIVATE
  Decl     204     205
  Set 
  Used

MPI_WIN_DISP_UNIT                                                 INTEGER, PARAMETER, PRIVATE
  Decl     208     209
  Set 
  Used

MPI_WIN_DUP_FN                                                    Procedure
  Decl     485
  Set 
  Used

MPI_WIN_NULL                                                      INTEGER, PARAMETER, PRIVATE
  Decl     174     175
  Set 
  Used

MPI_WIN_NULL_COPY_FN                                              Procedure
  Decl     486
  Set 
  Used

MPI_WIN_NULL_DELETE_FN                                            Procedure
  Decl     485
  Set 
  Used

MPI_WIN_SIZE                                                      INTEGER, PARAMETER, PRIVATE
  Decl     206     207
  Set 
  Used

MPI_WTICK                                                         Function, REAL*8, RESULT(MPI_WTICK), EXTERNAL
  Decl     481     490
  Set 
  Used

MPI_WTIME                                                         Function, REAL*8, RESULT(MPI_WTIME), EXTERNAL
  Decl     481     490
  Set 
  Used

MPI_WTIME_IS_GLOBAL                                               INTEGER, PARAMETER, PRIVATE
  Decl     196     197
  Set 
  Used

MPT                             Heap                              TYPE(MAPGRHIST), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     155
  Set 
  Used

MYID                            Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     656     712     760     944     963    1128

MYLASTLAT                       Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     678

MYLASTLON                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     679

N                               Stack                             INTEGER
  Decl     447
  Set      497     509     556     563     585     632     640     666     680     698     710     719     725     739     767
           775
  Used     498     499     501     510     511     512     513     514     557     565     586     587     588     590     633
           641     649     653     658     667     668     681     684     699     700     701     702     703     712     713
           720     721     730     740     741     742     768     769     770     771     772     776

N                               Stack                             INTEGER
  Decl     826
  Set      855     876
  Used     858     865     868     869     878     879     880     888     889     890     898     899

N                               Stack                             INTEGER
  Decl     939
  Set      956
  Used     957

N                               Stack                             INTEGER
  Decl     983
  Set     1012    1019
  Used    1013    1014    1020    1021

N                               Stack                             INTEGER
  Decl    1041
  Set     1064    1069
  Used    1065    1066    1070    1071

N                               Stack                             INTEGER
  Decl    1089
  Set     1110    1116    1132
  Used    1111    1117    1118    1119    1120    1133

N                               Stack                             INTEGER
  Decl    1212
  Set     1245
  Used    1246    1247

N                               Stack                             INTEGER
  Decl    1267
  Set     1293
  Used    1294    1295

NCOUNT                          Stack                             INTEGER
  Decl    1150
  Set     1157    1160
  Used    1161

NEXP                                                              CHARACTER(4), PARAMETER
  Decl     442
  Set 
  Used     763

NFCTRL                          Use assoc                         INTEGER, From module OPTIONS, DIMENSION(100), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     507     562     565     707

NFERR                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     538     548     576     610     993     997    1001    1005    1050    1054    1058    1223    1227    1231    1235
          1239    1276    1280    1284    1288

NFGHDR                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     430
  Set 
  Used     762     763     765     766     769     776

NFGHDS                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     428
  Set 
  Used     530     533     537     538     564

NFGHLOC                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     429
  Set 
  Used     605     609     610     633

NFGHOU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1081    1082
  Set 
  Used    1128    1130

NFGHTOP                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     933     936
  Set 
  Used     963     965

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     508     510     523     537     547     562     565     575     599     609     708     711     948     992     996
          1000    1004    1049    1053    1057    1222    1226    1230    1234    1238    1275    1279    1283    1287

NGFLD                           Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     313     316     361     373     385     397     490     497     509     529     556     560     567     585     727
           752     767     991    1048    1116    1221    1274

NGHIS_BSEVAP                                                      INTEGER, PARAMETER
  Decl     219
  Set 
  Used

NGHIS_BSSFRS                                                      INTEGER, PARAMETER
  Decl     212
  Set 
  Used

NGHIS_CANHEA                                                      INTEGER, PARAMETER
  Decl     222
  Set 
  Used

NGHIS_CANRES                                                      INTEGER, PARAMETER
  Decl     210
  Set 
  Used

NGHIS_CASCRS                                                      INTEGER, PARAMETER
  Decl     208
  Set 
  Used

NGHIS_CASGRS                                                      INTEGER, PARAMETER
  Decl     209
  Set 
  Used

NGHIS_CASRRS                                                      INTEGER, PARAMETER
  Decl     207
  Set 
  Used

NGHIS_CLHEAT                                                      INTEGER, PARAMETER
  Decl     234
  Set 
  Used

NGHIS_CLOUDC                                                      INTEGER, PARAMETER
  Decl     243
  Set 
  Used

NGHIS_COSZEN                                                      INTEGER, PARAMETER
  Decl     204
  Set 
  Used

NGHIS_CVMOSR                                                      INTEGER, PARAMETER
  Decl     238
  Set 
  Used

NGHIS_CVPREC                                                      INTEGER, PARAMETER
  Decl     187
  Set 
  Used

NGHIS_DRAGCF                                                      INTEGER, PARAMETER
  Decl     205
  Set 
  Used

NGHIS_ECAIRS                                                      INTEGER, PARAMETER
  Decl     213
  Set 
  Used

NGHIS_GCHEAT                                                      INTEGER, PARAMETER
  Decl     223
  Set 
  Used

NGHIS_GCOVRS                                                      INTEGER, PARAMETER
  Decl     211
  Set 
  Used

NGHIS_HCSEAI                                                      INTEGER, PARAMETER
  Decl     225
  Set 
  Used

NGHIS_HSSEAI                                                      INTEGER, PARAMETER
  Decl     226
  Set 
  Used

NGHIS_INLOCP                                                      INTEGER, PARAMETER
  Decl     216
  Set 
  Used

NGHIS_INLOGC                                                      INTEGER, PARAMETER
  Decl     218
  Set 
  Used

NGHIS_LHEATF                                                      INTEGER, PARAMETER
  Decl     185
  Set 
  Used

NGHIS_LWDBOT                                                      INTEGER, PARAMETER
  Decl     190
  Set 
  Used

NGHIS_LWHEAT                                                      INTEGER, PARAMETER
  Decl     232
  Set 
  Used

NGHIS_LWUBOT                                                      INTEGER, PARAMETER
  Decl     191
  Set 
  Used

NGHIS_LWUTOP                                                      INTEGER, PARAMETER
  Decl     189
  Set 
  Used

NGHIS_MOFRES                                                      INTEGER, PARAMETER
  Decl     206
  Set 
  Used

NGHIS_MOSTCA                                                      INTEGER, PARAMETER
  Decl     177
  Set 
  Used

NGHIS_MOSTGC                                                      INTEGER, PARAMETER
  Decl     178
  Set 
  Used

NGHIS_MWN10M                                                      INTEGER, PARAMETER
  Decl     252
  Set 
  Used

NGHIS_MXR02M                                                      INTEGER, PARAMETER
  Decl     250
  Set 
  Used

NGHIS_NIBALB                                                      INTEGER, PARAMETER
  Decl     199
  Set 
  Used

NGHIS_NIDALB                                                      INTEGER, PARAMETER
  Decl     200
  Set 
  Used

NGHIS_NRDCAN                                                      INTEGER, PARAMETER
  Decl     202
  Set 
  Used

NGHIS_NRDGSC                                                      INTEGER, PARAMETER
  Decl     203
  Set 
  Used

NGHIS_PRESFC                                                      INTEGER, PARAMETER
  Decl     170
  Set 
  Used

NGHIS_ROUGLG                                                      INTEGER, PARAMETER
  Decl     181
  Set 
  Used

NGHIS_RUNOFF                                                      INTEGER, PARAMETER
  Decl     224
  Set 
  Used

NGHIS_SCLHEA                                                      INTEGER, PARAMETER
  Decl     235
  Set 
  Used

NGHIS_SHCVMO                                                      INTEGER, PARAMETER
  Decl     239
  Set 
  Used

NGHIS_SHEATF                                                      INTEGER, PARAMETER
  Decl     184
  Set 
  Used

NGHIS_SHFCAN                                                      INTEGER, PARAMETER
  Decl     220
  Set 
  Used

NGHIS_SHFGND                                                      INTEGER, PARAMETER
  Decl     221
  Set 
  Used

NGHIS_SNOWDP                                                      INTEGER, PARAMETER
  Decl     179
  Set 
  Used

NGHIS_SNOWFL                                                      INTEGER, PARAMETER
  Decl     180
  Set 
  Used

NGHIS_SPCHUM                                                      INTEGER, PARAMETER
  Decl     230
  Set 
  Used

NGHIS_SPHUSF                                                      INTEGER, PARAMETER
  Decl     248
  Set 
  Used

NGHIS_SPSTMS                                                      INTEGER, PARAMETER
  Decl     237
  Set 
  Used

NGHIS_SSLAHT                                                      INTEGER, PARAMETER
  Decl     233
  Set 
  Used

NGHIS_SWDBNB                                                      INTEGER, PARAMETER
  Decl     195
  Set 
  Used

NGHIS_SWDBND                                                      INTEGER, PARAMETER
  Decl     196
  Set 
  Used

NGHIS_SWDBVB                                                      INTEGER, PARAMETER
  Decl     193
  Set 
  Used

NGHIS_SWDBVD                                                      INTEGER, PARAMETER
  Decl     194
  Set 
  Used

NGHIS_SWDTOP                                                      INTEGER, PARAMETER
  Decl     188
  Set 
  Used

NGHIS_SWHEAT                                                      INTEGER, PARAMETER
  Decl     231
  Set 
  Used

NGHIS_SWTRCZ                                                      INTEGER, PARAMETER
  Decl     176
  Set 
  Used

NGHIS_SWTRTZ                                                      INTEGER, PARAMETER
  Decl     175
  Set 
  Used

NGHIS_SWTSFZ                                                      INTEGER, PARAMETER
  Decl     174
  Set 
  Used

NGHIS_SWUTOP                                                      INTEGER, PARAMETER
  Decl     192
  Set 
  Used

NGHIS_TCAIRS                                                      INTEGER, PARAMETER
  Decl     214
  Set 
  Used

NGHIS_TCANOP                                                      INTEGER, PARAMETER
  Decl     171
  Set 
  Used

NGHIS_TEMPER                                                      INTEGER, PARAMETER
  Decl     229
  Set 
  Used

NGHIS_TEP02M                                                      INTEGER, PARAMETER
  Decl     249
  Set 
  Used

NGHIS_TGDEEP                                                      INTEGER, PARAMETER
  Decl     173
  Set 
  Used

NGHIS_TGFCCV                                                      INTEGER, PARAMETER
  Decl     172
  Set 
  Used

NGHIS_TOPREC                                                      INTEGER, PARAMETER
  Decl     186
  Set 
  Used

NGHIS_TRACAN                                                      INTEGER, PARAMETER
  Decl     215
  Set 
  Used

NGHIS_TRAGCV                                                      INTEGER, PARAMETER
  Decl     217
  Set 
  Used

NGHIS_TVIRSF                                                      INTEGER, PARAMETER
  Decl     247
  Set 
  Used

NGHIS_USTRES                                                      INTEGER, PARAMETER
  Decl     182
  Set 
  Used

NGHIS_UZONAL                                                      INTEGER, PARAMETER
  Decl     227
  Set 
  Used

NGHIS_UZONSF                                                      INTEGER, PARAMETER
  Decl     245
  Set 
  Used

NGHIS_VDHEAT                                                      INTEGER, PARAMETER
  Decl     236
  Set 
  Used

NGHIS_VDMOIS                                                      INTEGER, PARAMETER
  Decl     240
  Set 
  Used

NGHIS_VDTCLC                                                      INTEGER, PARAMETER
  Decl     244
  Set 
  Used

NGHIS_VDUZON                                                      INTEGER, PARAMETER
  Decl     241
  Set 
  Used

NGHIS_VDVMER                                                      INTEGER, PARAMETER
  Decl     242
  Set 
  Used

NGHIS_VEGTYP                                                      INTEGER, PARAMETER
  Decl     201
  Set 
  Used

NGHIS_VIBALB                                                      INTEGER, PARAMETER
  Decl     197
  Set 
  Used

NGHIS_VIDALB                                                      INTEGER, PARAMETER
  Decl     198
  Set 
  Used

NGHIS_VMERID                                                      INTEGER, PARAMETER
  Decl     228
  Set 
  Used

NGHIS_VMERSF                                                      INTEGER, PARAMETER
  Decl     246
  Set 
  Used

NGHIS_VSTRES                                                      INTEGER, PARAMETER
  Decl     183
  Set 
  Used

NGHIS_ZWN10M                                                      INTEGER, PARAMETER
  Decl     251
  Set 
  Used

NGHSL                           Static offset=1280                INTEGER, PRIVATE, SAVE
  Decl     282
  Set      584     588
  Used     587     720     763    1108    1126

NGPTS                           Static offset=1344                INTEGER, PRIVATE, SAVE
  Decl     283
  Set      603     607
  Used     632     636     640     666     763     775     961    1126

NGPTSLOCAL                      Static offset=1408                INTEGER, PRIVATE, SAVE
  Decl     284
  Set      638     657
  Used     658     659     660     680     698     709     719     724     738     955     961    1109    1114    1126    1132

NGPTSPERJB                      Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     286
  Set      737     742
  Used     693     747     754    1012    1019    1064    1069    1245    1293

NGPTSPERPROC                    Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     291
  Set      639     654
  Used     620     962    1127

NGPTS_NEW                       Static offset=1472                INTEGER, PRIVATE, SAVE
  Decl     292
  Set 
  Used

NGRFLD                          Static offset=1536                INTEGER, PRIVATE, SAVE
  Decl     281
  Set      529     531     535
  Used     563     721

NINT                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     890

NL                              Stack                             INTEGER
  Decl     447
  Set 
  Used

NLOC                            Stack                             INTEGER
  Decl     447
  Set      677     682     699     709     724     738
  Used     684     700     701     702     703     710     725     739     740     741

NLOC                            Stack                             INTEGER
  Decl     939
  Set      955
  Used     956     957

NLOC                            Stack                             INTEGER
  Decl    1089
  Set     1109
  Used    1110    1111

NLYR                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     908     910
  Set 
  Used     914

NLYR                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     919     921
  Set 
  Used

NLYR                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     926     928
  Set 
  Used

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     799     816
  Set 
  Used     820     822     824     855     876

NN                              Stack                             INTEGER
  Decl     453
  Set      567     727
  Used     568     569     728     730

NOTFOUND                        Stack                             LOGICAL
  Decl     455
  Set      566     570
  Used     574

NULLIFY_DIGNOS                                                    Subroutine, Module procedure, PRIVATE
  Decl     919
  Set 
  Used     720

NULLIFY_GRID                                                      Subroutine, Module procedure, PRIVATE
  Decl     908
  Set 
  Used

NULLIFY_INREFD                                                    Subroutine, Module procedure, PRIVATE
  Decl     926
  Set 
  Used     721

OPTIONS                                                           Module
  Decl
  Set 
  Used      22

PARALLELISM                     Use assoc                         Module, Used indirectly (from module COMMUNICATIONS)
  Decl
  Set 
  Used

PARALLELISM                                                       Module
  Decl
  Set 
  Used       8

PI                              Stack                             REAL(KIND=8)
  Decl     446
  Set      461
  Used     641     648     649     702     713

PI                              Stack                             REAL(KIND=8)
  Decl     848
  Set      850
  Used     864     869

PMPI_WTICK                                                        Function, REAL*8, RESULT(PMPI_WTICK), EXTERNAL
  Decl     482     491
  Set 
  Used

PMPI_WTIME                                                        Function, REAL*8, RESULT(PMPI_WTIME), EXTERNAL
  Decl     482     491
  Set 
  Used

PRESENT                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1063    1166

PRESENT                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1063    1166

PROCMAP                         Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     289
  Set      653
  Used     621     667

PTCOOR                          Structure offset=512              CHARACTER(11), Component of GRIDHISTPOINT
  Decl     138
  Set 
  Used       0     713

PTCOORGLOBAL                    Heap                              CHARACTER(18), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     305
  Set 
  Used     625     636     703     776

PTCTY                           Structure offset=0                CHARACTER(40), Component of GRIDHISTPOINT
  Decl     133
  Set 
  Used       0     712

PTCTYGLOBAL                     Heap                              CHARACTER(40), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     304
  Set 
  Used     624     633     700     776

PTLAT                           Structure offset=448              REAL(KIND=8), Component of GRIDHISTPOINT
  Decl     137
  Set 
  Used       0     713

PTLATGLOBAL                     Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     307
  Set 
  Used     627     636     641     702

PTLON                           Structure offset=384              REAL(KIND=8), Component of GRIDHISTPOINT
  Decl     136
  Set 
  Used       0     712

PTLONGLOBAL                     Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     306
  Set 
  Used     626     636     649     701

QWORK                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1094
  Set     1111
  Used    1118    1126

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     136     137     139     306     307     424     434     446     456     457     648     820     822     840     848
           864     869     880     890     934     937     938     973     976    1033    1036    1084    1092    1093    1094
          1095    1143    1147    1151    1201    1204    1258    1261

RADCONV                         Stack                             REAL(KIND=8)
  Decl     841
  Set      852
  Used     853     854

RDESC                           Stack                             CHARACTER(40)
  Decl     443
  Set 
  Used     564     565     568     575     576

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     648     869     880     890

SG                              Stack                             REAL(KIND=8)
  Decl    1092
  Set     1101
  Used    1102

SIGN                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     889

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1047    1220    1273     989     990    1218    1219

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     989    1218    1219

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1047    1220    1272    1273

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1047    1220    1272    1273

SIZES                                                             Module
  Decl
  Set 
  Used      37

STMP                            Stack                             REAL(KIND=8), DIMENSION(6)
  Decl    1093
  Set     1106
  Used

STORE1D                                                           Subroutine, Module procedure, PRIVATE
  Decl    1032
  Set 
  Used       0    1167    1167    1169

STORE1DV                                                          Subroutine, Module procedure, PRIVATE
  Decl    1257
  Set 
  Used

STORE2D                                                           Subroutine, Module procedure, PRIVATE
  Decl     972
  Set 
  Used

STORE2DV                                                          Subroutine, Module procedure, PRIVATE
  Decl    1200
  Set 
  Used

STOREGRIDHISTORY                                                  Generic interface
  Decl      58      66
  Set 
  Used

STOREMASKEDGRIDHISTORY                                            Subroutine, Module procedure
  Decl      59    1142
  Set 
  Used

SUMPT                           Structure offset=0                INTEGER, Component of MAPGRHIST
  Decl     152
  Set 
  Used

SURFFLDS                        Structure offset=320              LOGICAL, Component of AVAILFIELDS
  Decl      99
  Set 
  Used       0     498

TFRMGF                          Structure offset=384              CHARACTER(1), Component of AVAILFIELDS
  Decl     101
  Set 
  Used       0     513

TMSTMP2                         Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used    1100

TMSTMP2                         Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used    1100

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1081    1084
  Set 
  Used    1100    1101

TOPOGRIDH                       Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     933     935
  Set 
  Used     949

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     520     575     596     600     765     945     949

TURNOFFGRIDHISTORY                                                Subroutine, Module procedure
  Decl      62    1183
  Set 
  Used

TURNONGRIDHISTORY                                                 Subroutine, Module procedure
  Decl      61    1176
  Set 
  Used

TYPGH                                                             CHARACTER(20), PARAMETER
  Decl     439
  Set 
  Used     762

UNGRAFLD                        Structure offset=352              INTEGER, Component of AVAILFIELDS
  Decl     100
  Set 
  Used       0     373     771    1118    1119

UNIGRAFLD                       Stack                             INTEGER
  Decl     444
  Set 
  Used     564     565

UTILS                                                             Module
  Decl
  Set 
  Used      33

WORK                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1095
  Set 
  Used    1126

WRITEGRDH8                      Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0    1128    1128    1130

WRITEGRIDHISTORY                                                  Subroutine, Module procedure
  Decl      60    1081
  Set 
  Used

WRITEGRIDHISTORYTOPO                                              Subroutine, Module procedure
  Decl      64     933
  Set 
  Used

WRTOPOGRDH8                     Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     963     963     965


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     GRIDHISTORY                      Block is used from GRIDHISTORY

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     GRIDHISTORY                      Block is used from GRIDHISTORY

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     GRIDHISTORY                      Block is used from GRIDHISTORY


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1143, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1148, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1358, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1364, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1378, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1380, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1388, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1390, file GridHistory.f90)

Name  Messages
----  --------
ASSOCIATED(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1412, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1422, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1429, file GridHistory.f90)

Name  Messages
----  --------
ATAN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 961, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1350, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1351, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1352, file GridHistory.f90)

Name  Messages
----  --------
CNVRAY in INPUTOUTPUT
      Defined as:  No definitions.

      Interface:   None

      Called By:   GRIDHISTORY (Line 1618, file GridHistory.f90)

Name  Messages
----  --------
COLLECT_GRID_HIS in COMMUNICATIONS
      Defined as:  No definitions.

      Interface:   None

      Called By:   GRIDHISTORY (Line 1461, file GridHistory.f90)
                   GRIDHISTORY (Line 1626, file GridHistory.f90)

Name  Messages
----  --------
COMMUNICATIONS
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
GRIDHISTLABEL in GRIDHISTORY
      Defined as:  Subroutine (line 1299, file GridHistory.f90)

      Interface:   None

      Called By:   GRIDHISTLABEL in GRIDHISTORY (Line 1136, file GridHistory.f90)

      Calls:       GRIDHISTLABEL in GRIDHISTORY (Line 1136, file GridHistory.f90)

Name  Messages
----  --------
GRIDHISTORY
      Defined as:  Module (line 6, file GridHistory.f90)

      Calls:       CNVRAY in INPUTOUTPUT (Line 1618, file GridHistory.f90)
                   COLLECT_GRID_HIS in COMMUNICATIONS (Line 1461, file GridHistory.f90)
                   COLLECT_GRID_HIS in COMMUNICATIONS (Line 1626, file GridHistory.f90)
                   TMSTMP2 in UTILS (Line 1600, file GridHistory.f90)
                   WRITEGRDH8 in IOLOWLEVEL (Line 1628, file GridHistory.f90)
                   WRITEGRDH8 in IOLOWLEVEL (Line 1630, file GridHistory.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1463, file GridHistory.f90)
                   WRTOPOGRDH8 in IOLOWLEVEL (Line 1465, file GridHistory.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   PARALLELISM
                   CONSTANTS
                   INPUTOUTPUT
                   COMMUNICATIONS
                   PARALLELISM  (indirectly)
                   OPTIONS
                   UTILS
                   SIZES
                   IOLOWLEVEL

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INITGRIDHISTFIELDS in GRIDHISTORY
      Defined as:  Subroutine (line 812, file GridHistory.f90)

      Interface:   None

      Called By:   INITGRIDHISTFIELDS in GRIDHISTORY (Line 959, file GridHistory.f90)

      Calls:       INITGRIDHISTFIELDS in GRIDHISTORY (Line 959, file GridHistory.f90)

Name  Messages
----  --------
INITGRIDHISTORY in GRIDHISTORY
      Defined as:  Subroutine (line 557, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INPUTOUTPUT
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
INT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1378, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1379, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1388, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1389, file GridHistory.f90)

Name  Messages
----  --------
IOLOWLEVEL
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
ISGRIDHISTORYON in GRIDHISTORY
      Defined as:  Function (line 563, file GridHistory.f90)

      Interface:   None

      Called By:   ISGRIDHISTORYON in GRIDHISTORY (Line 1486, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1544, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1597, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1654, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1715, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1769, file GridHistory.f90)

      Calls:       ISGRIDHISTORYON in GRIDHISTORY (Line 1486, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1544, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1597, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1654, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1715, file GridHistory.f90)
                   ISGRIDHISTORYON in GRIDHISTORY (Line 1769, file GridHistory.f90)

Name  Messages
----  --------
MINLOC(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1145, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1151, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1360, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1367, file GridHistory.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1601, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1604, file GridHistory.f90)

Name  Messages
----  --------
MPI_COMM_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_CONVERSION_FN_NULL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NINT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1380, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1390, file GridHistory.f90)

Name  Messages
----  --------
NULLIFY_DIGNOS in GRIDHISTORY
      Defined as:  Subroutine (line 1419, file GridHistory.f90)

      Interface:   None

      Called By:   NULLIFY_DIGNOS in GRIDHISTORY (Line 1220, file GridHistory.f90)

      Calls:       NULLIFY_DIGNOS in GRIDHISTORY (Line 1220, file GridHistory.f90)

Name  Messages
----  --------
NULLIFY_GRID in GRIDHISTORY
      Defined as:  Subroutine (line 1408, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NULLIFY_INREFD in GRIDHISTORY
      Defined as:  Subroutine (line 1426, file GridHistory.f90)

      Interface:   None

      Called By:   NULLIFY_INREFD in GRIDHISTORY (Line 1221, file GridHistory.f90)

      Calls:       NULLIFY_INREFD in GRIDHISTORY (Line 1221, file GridHistory.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
PARALLELISM
      Defined as:  No definitions.

      Used By:     GRIDHISTORY
                   GRIDHISTORY  (indirectly)

Name  Messages
----  --------
PMPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PRESENT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1510, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1563, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1666, file GridHistory.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1148, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1364, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1369, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1380, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1390, file GridHistory.f90)

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1379, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1389, file GridHistory.f90)

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1489, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1490, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1547, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1653, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1718, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1719, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1720, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1772, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1773, file GridHistory.f90)

Name  Messages
----  --------
SIZES
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
STORE1D in GRIDHISTORY
      Defined as:  Subroutine (line 1532, file GridHistory.f90)

      Interface:   None

      Called By:   STORE1D in GRIDHISTORY (Line 1667, file GridHistory.f90)
                   STORE1D in GRIDHISTORY (Line 1669, file GridHistory.f90)

      Calls:       STORE1D in GRIDHISTORY (Line 1667, file GridHistory.f90)
                   STORE1D in GRIDHISTORY (Line 1669, file GridHistory.f90)

Name  Messages
----  --------
STORE1DV in GRIDHISTORY
      Defined as:  Subroutine (line 1757, file GridHistory.f90)

      Interface:   None

      Calls:       ATAN(Intrinsic) (Line 961, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1020, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1024, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1075, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1076, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1096, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1100, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1265, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1265, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1143, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1148, file GridHistory.f90)
                   MINLOC(Intrinsic) (Line 1145, file GridHistory.f90)
                   MINLOC(Intrinsic) (Line 1151, file GridHistory.f90)
                   REAL(Intrinsic) (Line 1148, file GridHistory.f90)
                   ATAN(Intrinsic) (Line 1350, file GridHistory.f90)
                   ATAN(Intrinsic) (Line 1351, file GridHistory.f90)
                   ATAN(Intrinsic) (Line 1352, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1358, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1364, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1378, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1380, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1388, file GridHistory.f90)
                   ABS(Intrinsic) (Line 1390, file GridHistory.f90)
                   MINLOC(Intrinsic) (Line 1360, file GridHistory.f90)
                   MINLOC(Intrinsic) (Line 1367, file GridHistory.f90)
                   REAL(Intrinsic) (Line 1364, file GridHistory.f90)
                   REAL(Intrinsic) (Line 1369, file GridHistory.f90)
                   REAL(Intrinsic) (Line 1380, file GridHistory.f90)
                   REAL(Intrinsic) (Line 1390, file GridHistory.f90)
                   INT(Intrinsic) (Line 1378, file GridHistory.f90)
                   INT(Intrinsic) (Line 1379, file GridHistory.f90)
                   INT(Intrinsic) (Line 1388, file GridHistory.f90)
                   INT(Intrinsic) (Line 1389, file GridHistory.f90)
                   SIGN(Intrinsic) (Line 1379, file GridHistory.f90)
                   SIGN(Intrinsic) (Line 1389, file GridHistory.f90)
                   NINT(Intrinsic) (Line 1380, file GridHistory.f90)
                   NINT(Intrinsic) (Line 1390, file GridHistory.f90)
                   ASSOCIATED(Intrinsic) (Line 1412, file GridHistory.f90)
                   ASSOCIATED(Intrinsic) (Line 1422, file GridHistory.f90)
                   ASSOCIATED(Intrinsic) (Line 1429, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1445, file GridHistory.f90)
                   TRIM(Intrinsic) (Line 1449, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1489, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1490, file GridHistory.f90)
                   PRESENT(Intrinsic) (Line 1510, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1547, file GridHistory.f90)
                   PRESENT(Intrinsic) (Line 1563, file GridHistory.f90)
                   MOD(Intrinsic) (Line 1601, file GridHistory.f90)
                   MOD(Intrinsic) (Line 1604, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1653, file GridHistory.f90)
                   PRESENT(Intrinsic) (Line 1666, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1718, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1719, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1720, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1772, file GridHistory.f90)
                   SIZE(Intrinsic) (Line 1773, file GridHistory.f90)

Name  Messages
----  --------
STORE2D in GRIDHISTORY
      Defined as:  Subroutine (line 1472, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
STORE2DV in GRIDHISTORY
      Defined as:  Subroutine (line 1700, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
STOREMASKEDGRIDHISTORY in GRIDHISTORY
      Defined as:  Subroutine (line 559, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TMSTMP2 in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   GRIDHISTORY (Line 1600, file GridHistory.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   STORE1DV in GRIDHISTORY (Line 1020, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1024, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1075, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1076, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1096, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1100, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1265, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1265, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1445, file GridHistory.f90)
                   STORE1DV in GRIDHISTORY (Line 1449, file GridHistory.f90)

Name  Messages
----  --------
TURNOFFGRIDHISTORY in GRIDHISTORY
      Defined as:  Subroutine (line 562, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
TURNONGRIDHISTORY in GRIDHISTORY
      Defined as:  Subroutine (line 561, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
UTILS
      Defined as:  No definitions.

      Used By:     GRIDHISTORY

Name  Messages
----  --------
WRITEGRDH4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEGRDH8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   GRIDHISTORY (Line 1628, file GridHistory.f90)
                   GRIDHISTORY (Line 1630, file GridHistory.f90)

Name  Messages
----  --------
WRITEGRIDHISTORY in GRIDHISTORY
      Defined as:  Subroutine (line 560, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEGRIDHISTORYTOPO in GRIDHISTORY
      Defined as:  Subroutine (line 564, file GridHistory.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRTOPOGRDH4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRTOPOGRDH8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   GRIDHISTORY (Line 1463, file GridHistory.f90)
                   GRIDHISTORY (Line 1465, file GridHistory.f90)

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
