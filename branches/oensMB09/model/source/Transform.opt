       !        
       !        Cray Inc. Decompilation
       !        Notice - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Transform.f90
       !        File                  :  Transform.opt
       !        Network               :  Gemini interconnect
       !        Target                :  X86, 64-bit, sse3
       !        
  743.       
  743.       subroutine inittransform
  438.       if ( t$197 == 0 ) then
  438.          t$209(1) = 3
  438.          t$210(1) = 0
  438.          t$211(1) = 2
  438.          t$206(1) = int( loc( t$196 ), 8 )
  438.          t$207(1) = 0
  438.          t$208(1) = int( loc( t$204 ), 8 )
  438.          t$197 = __get_dynamic_type( 3, t$206(1), t$209(1), 1, t$207(1), t$208(1), t$210(1), t$211(1) )
  438.       endif
  438.       p%header%el_len = 1344
  438.       p%header%assoc = 0
  438.       p%header%ptr_alloc = 0
  438.       p%header%p_or_a = 1
  438.       p%header%a_contig = 0
  438.       p%header%dv_versn = 2
  438.       p%header%dv_smunit = 64
  438.       p%header%d_type = 0
  438.       p%header%n_params = 0
  438.       p%header%pad_codim = 0
  438.       p%header%n_codim = 0
  438.       p%header%pad_dim = 0
  438.       p%header%n_dim = 0
  438.       p%header%d_type_idx = t$197
  438.       p%header%typ_code = 8
  438.       p%header%orig_base = 0
  438.       p%header%orig_size = 0
  524.       neven%header%a_contig = 1
  524.       neven%dim_1%LB = 1
  524.       neven%dim_1%EX = ( max( 0, mymmax ) )
  524.       neven%dim_1%SM = 1
  524.       $_allo_P3(0) = 0x1000000000001L
  524.       $_allo_P3(1) = loc( neven )
  524.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  525.       nodd%header%a_contig = 1
  525.       nodd%dim_1%LB = 1
  525.       nodd%dim_1%EX = ( max( 0, mymmax ) )
  525.       nodd%dim_1%SM = 1
  525.       $_allo_P4(0) = 0x1000000000001L
  525.       $_allo_P4(1) = loc( nodd )
  525.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  526.       if ( mymmax > 0 ) then
  526.          $I_L526_245 = 0
  526. !dir$ ivdep
  526.          do
  527.             $m_S1 = (lm2m%base_addr)(1 + $I_L526_245, 0)
  528.             (neven%base_addr)(1 + $I_L526_245, 0) = ( mmax + -$m_S1 + 3 ) / 2
  529.             (nodd%base_addr)(1 + $I_L526_245, 0) = ( mmax + -$m_S1 + 2 ) / 2
  530.             $I_L526_245 = 1 + $I_L526_245
  526.             if ( $I_L526_245 >= mymmax ) exit
  526.          enddo
  526.       endif
  536.       dneven%header%a_contig = 1
  536.       dneven%dim_1%LB = 1
  536.       dneven%dim_1%EX = ( max( 0, mymmax ) )
  536.       dneven%dim_1%SM = 1
  536.       $_allo_P5(0) = 0x1000000000001L
  536.       $_allo_P5(1) = loc( dneven )
  536.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  537.       dnodd%header%a_contig = 1
  537.       dnodd%dim_1%LB = 1
  537.       dnodd%dim_1%EX = ( max( 0, mymmax ) )
  537.       dnodd%dim_1%SM = 1
  537.       $_allo_P6(0) = 0x1000000000001L
  537.       $_allo_P6(1) = loc( dnodd )
  537.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  538.       t$381 = neven
  538.       $t_S2 = max( 0, ( max( 0, mymmax ) ) )
  538.       t$384 = max( 0, ( max( 0, mymmax ) ) )
  538.       t$386 = int( _alloc( 4 * max( 0, ( max( 0, mymmax ) ) ) ), 8 )
  538.       call nobankconflictv( t$382(1), t$381 )
  538.       $F_A36 = $t_S2
  538.       if ( $t_S2 > 0 ) then
  538.          $SC_dneven_I62 = dneven%dim_1%EX
  538.          $SC_dneven_I63 = dneven%dim_1%LB
  538.          $I_L538_276 = 0
  538. !dir$ ivdep
  538.          do
  538.             (dneven%base_addr)($SC_dneven_I63 + $I_L538_276, 0) = t$382(1 + $I_L538_276)
  538.             $I_L538_276 = 1 + $I_L538_276
  538.             if ( $I_L538_276 >= $F_A36 ) exit
  538.          enddo
  538.       endif
  538.       _free( t$386 )
  539.       t$387 = nodd
  539.       $t_S3 = max( 0, nodd%dim_1%EX )
  539.       t$390 = max( 0, nodd%dim_1%EX )
  539.       t$392 = int( _alloc( 4 * max( 0, nodd%dim_1%EX ) ), 8 )
  539.       call nobankconflictv( t$388(1), t$387 )
  539.       $F_A37 = $t_S3
  539.       if ( $t_S3 > 0 ) then
  539.          $SC_dnodd_I64 = dnodd%dim_1%EX
  539.          $SC_dnodd_I65 = dnodd%dim_1%LB
  539.          $I_L539_278 = 0
  539. !dir$ ivdep
  539.          do
  539.             (dnodd%base_addr)($SC_dnodd_I65 + $I_L539_278, 0) = t$388(1 + $I_L539_278)
  539.             $I_L539_278 = 1 + $I_L539_278
  539.             if ( $I_L539_278 >= $F_A37 ) exit
  539.          enddo
  539.       endif
  539.       _free( t$392 )
  548.       firstneven%header%a_contig = 1
  548.       firstneven%dim_1%LB = 1
  548.       firstneven%dim_1%EX = ( max( 0, mymmax ) )
  548.       firstneven%dim_1%SM = 1
  548.       $_allo_P7(0) = 0x1000000000001L
  548.       $_allo_P7(1) = loc( firstneven )
  548.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  549.       firstnodd%header%a_contig = 1
  549.       firstnodd%dim_1%LB = 1
  549.       firstnodd%dim_1%EX = ( max( 0, mymmax ) )
  549.       firstnodd%dim_1%SM = 1
  549.       $_allo_P8(0) = 0x1000000000001L
  549.       $_allo_P8(1) = loc( firstnodd )
  549.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  550.       (firstneven%base_addr)(1, 0) = 1
  551.       (firstnodd%base_addr)(1, 0) = 1 + (neven%base_addr)(1, 0)
  552.       if ( -2 + mymmax >= 0 ) then
  552.          $firstnodd_WR0_R0 = (firstnodd%base_addr)(1, 0)
  552.          $I_L552_247 = 0
  552. !dir$ unroll 4
  552.          do
  553.             $firstneven_WR0_R1 = $firstnodd_WR0_R0 + (nodd%base_addr)(1 + $I_L552_247, 0)
  553.             (firstneven%base_addr)(2 + $I_L552_247, 0) = $firstneven_WR0_R1
  554.             $firstnodd_WR0_R0 = $firstneven_WR0_R1 + (neven%base_addr)(2 + $I_L552_247, 0)
  554.             (firstnodd%base_addr)(2 + $I_L552_247, 0) = $firstnodd_WR0_R0
  555.             $I_L552_247 = 1 + $I_L552_247
  552.             if ( $I_L552_247 >= -1 + mymmax ) exit
  552.          enddo
  552.       endif
  561.       $Reduc_A38 = 0
  561.       $F_A40 = ( -1 + mymmax )
  561.       if ( -1 + mymmax > 0 ) then
  561.          $SC_nodd_I66 = nodd%dim_1%EX
  561.          $SC_nodd_I67 = nodd%dim_1%LB
  561.          $I_L561_280 = 0
  561. !dir$ ivdep
  561.          do
  561.             $Reduc_A38 = $Reduc_A38 + (nodd%base_addr)(1 + $I_L561_280, 0)
  561.             $I_L561_280 = 1 + $I_L561_280
  561.             if ( $I_L561_280 >= $F_A40 ) exit
  561.          enddo
  561.       endif
  561.       $Reduc_A41 = 0
  561.       $F_A43 = mymmax
  561.       if ( mymmax > 0 ) then
  561.          $SC_neven_I68 = neven%dim_1%EX
  561.          $SC_neven_I69 = neven%dim_1%LB
  561.          $I_L561_282 = 0
  561. !dir$ ivdep
  561.          do
  561.             $Reduc_A41 = $Reduc_A41 + (neven%base_addr)(1 + $I_L561_282, 0)
  561.             $I_L561_282 = 1 + $I_L561_282
  561.             if ( $I_L561_282 >= $F_A43 ) exit
  561.          enddo
  561.       endif
  561.       dlmn = (dnodd%base_addr)(mymmax, 0) + $Reduc_A38 + $Reduc_A41
  562.       dlmn = nobankconflicts( dlmn )
  567.       lmnextmap%header%a_contig = 1
  567.       lmnextmap%dim_1%LB = 1
  567.       lmnextmap%dim_1%EX = ( max( 0, mymnextmax ) )
  567.       lmnextmap%dim_1%SM = 1
  567.       $_allo_P9(0) = 0x1000000000001L
  567.       $_allo_P9(1) = loc( lmnextmap )
  567.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  568.       if ( mymnextmax > 0 ) then
  568.          $I_L568_249 = 0
  568. !dir$ ivdep
  568.          do
  569.             $lm_S6 = (mymextmap%base_addr)(1 + $I_L568_249, 0)
  570.             $n_S7 = (mynextmap%base_addr)(1 + $I_L568_249, 0)
  571.             $m_S8 = (lm2m%base_addr)($lm_S6, 0)
  572.             if ( mod( $n_S7 + $m_S8, 2 ) == 0 ) then
  573.                (lmnextmap%base_addr)(1 + $I_L568_249, 0) = (firstneven%base_addr)($lm_S6, 0) + ( $n_S7 + -$m_S8 ) / 2
  573.             else
  575.                (lmnextmap%base_addr)(1 + $I_L568_249, 0) = (firstnodd%base_addr)($lm_S6, 0) + ( $n_S7 + -$m_S8 + -1 ) / 2
  575.             endif
  577.             $I_L568_249 = 1 + $I_L568_249
  576.             if ( $I_L568_249 >= mymnextmax ) exit
  576.          enddo
  576.       endif
  582.       lmnmap%header%a_contig = 1
  582.       lmnmap%dim_1%LB = 1
  582.       lmnmap%dim_1%EX = ( max( 0, mymnmax ) )
  582.       lmnmap%dim_1%SM = 1
  582.       $_allo_P10(0) = 0x1000000000001L
  582.       $_allo_P10(1) = loc( lmnmap )
  582.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
  583.       if ( mymnmax > 0 ) then
  583.          $I_L583_251 = 0
  583. !dir$ ivdep
  583.          do
  584.             $lm_S10 = (mymmap%base_addr)(1 + $I_L583_251, 0)
  585.             $n_S11 = (mynmap%base_addr)(1 + $I_L583_251, 0)
  586.             $m_S12 = (lm2m%base_addr)($lm_S10, 0)
  587.             if ( mod( $n_S11 + $m_S12, 2 ) == 0 ) then
  588.                (lmnmap%base_addr)(1 + $I_L583_251, 0) = (firstneven%base_addr)($lm_S10, 0) + ( $n_S11 + -$m_S12 ) / 2
  588.             else
  590.                (lmnmap%base_addr)(1 + $I_L583_251, 0) = (firstnodd%base_addr)($lm_S10, 0) + ( $n_S11 + -$m_S12 + -1 ) / 2
  590.             endif
  592.             $I_L583_251 = 1 + $I_L583_251
  591.             if ( $I_L583_251 >= mymnmax ) exit
  591.          enddo
  591.       endif
  597.       lmnzero%header%a_contig = 1
  597.       lmnzero%dim_1%LB = 1
  597.       lmnzero%dim_1%EX = ( max( 0, mymmax ) )
  597.       lmnzero%dim_1%SM = 1
  597.       $_allo_P11(0) = 0x1000000000001L
  597.       $_allo_P11(1) = loc( lmnzero )
  597.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
  598.       if ( mymmax > 0 ) then
  598.          $I_L598_253 = 0
  598. !dir$ ivdep
  598.          do
  599.             (lmnzero%base_addr)(1 + $I_L598_253, 0) = (lmnextmap%base_addr)((mymnextmap%base_addr)(1 + $I_L598_253, 1 + mmax, 0), 0)
  600.             $I_L598_253 = 1 + $I_L598_253
  598.             if ( $I_L598_253 >= mymmax ) exit
  598.          enddo
  598.       endif
  604.       di = nobankconflicts( imax )
  605.       t$396 = 1 + imax
  605.       dip1 = nobankconflicts( t$396 )
  606.       djh = nobankconflicts( jmaxhalf )
  612.       previousj%header%a_contig = 1
  612.       previousj%dim_1%LB = 1
  612.       previousj%dim_1%EX = ( max( 0, jmax ) )
  612.       previousj%dim_1%SM = 1
  612.       $_allo_P12(0) = 0x1000000000001L
  612.       $_allo_P12(1) = loc( previousj )
  612.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
  613.       if ( mylastlat_f + -myfirstlat_f >= 0 ) then
  613.          $I_L613_255 = 0
  613. !dir$ ivdep
  613.          do
  614.             (previousj%base_addr)(myfirstlat_f + $I_L613_255, 0) = $I_L613_255
  615.             $I_L613_255 = 1 + $I_L613_255
  613.             if ( $I_L613_255 >= mylastlat_f + -myfirstlat_f + 1 ) exit
  613.          enddo
  613.       endif
  619.       consim%header%a_contig = 1
  619.       consim%dim_1%LB = 1
  619.       consim%dim_1%EX = ( max( 0, mmax ) )
  619.       consim%dim_1%SM = 1
  619.       $_allo_P13(0) = 0x1000000000001L
  619.       $_allo_P13(1) = loc( consim )
  619.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
  620.       consre%header%a_contig = 1
  620.       consre%dim_1%LB = 1
  620.       consre%dim_1%EX = ( max( 0, mmax ) )
  620.       consre%dim_1%SM = 1
  620.       $_allo_P14(0) = 0x1000000000001L
  620.       $_allo_P14(1) = loc( consre )
  620.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
  621.       if ( mmax > 0 ) then
  621.          $I_L621_257 = 0
  621. !dir$ ivdep
  621.          do
  622.             (consim%base_addr)(1 + $I_L621_257, 0) = 1.5698587127158556e-7 * real( $I_L621_257, 8 )
  623.             (consre%base_addr)(1 + $I_L621_257, 0) = -( 1.5698587127158556e-7 * real( $I_L621_257, 8 ) )
  624.             $I_L621_257 = 1 + $I_L621_257
  621.             if ( $I_L621_257 >= mmax ) exit
  621.          enddo
  621.       endif
  628.       ls2f%header%a_contig = 1
  628.       ls2f%dim_1%LB = 1
  628.       ls2f%dim_1%EX = ( max( 0, djh ) )
  628.       ls2f%dim_1%SM = 1
  628.       ls2f%dim_2%LB = 1
  628.       ls2f%dim_2%EX = ( max( 0, dlmn ) )
  628.       ls2f%dim_2%SM = ( max( 0, djh ) )
  628.       $_allo_P15(0) = 0x1000000000001L
  628.       $_allo_P15(1) = loc( ls2f )
  628.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
  629.       if ( allpolynomials ) then
  630.          if ( mymnextmax > 0 ) then
  634.             if ( jmaxhalf > 0 ) then
  630.                $I_L630_300 = 0
  630.                do
  631.                   $lm_S17 = (mymextmap%base_addr)(1 + $I_L630_300, 0)
  632.                   $n_S20 = (mynextmap%base_addr)(1 + $I_L630_300, 0)
  633.                   $m_S19 = (lm2m%base_addr)($lm_S17, 0)
  634.                   $SCA_mnextmap_I53 = (mnextmap%base_addr)($m_S19, $n_S20, 0)
  634.                   $SCA_lmnextmap_I54 = (lmnextmap%base_addr)(1 + $I_L630_300, 0)
  634.                   $I_L634_261 = 0
  634. !dir$ ivdep
  634.                   do
  635.                      (ls2f%base_addr)(1 + $I_L634_261, $SCA_lmnextmap_I54, 0) = (legfuncs2f%base_addr)(1 + $I_L634_261, $SCA_mnextmap_I53, 0)
  636.                      $I_L634_261 = 1 + $I_L634_261
  634.                      if ( $I_L634_261 >= jmaxhalf ) exit
  634.                   enddo
  637.                   $I_L630_300 = 1 + $I_L630_300
  636.                   if ( $I_L630_300 >= mymnextmax ) exit
  636.                enddo
  636.             endif
  636.          endif
  636.       else if ( mymnextmax > 0 ) then
  642.          if ( jmaxhalf > 0 ) then
  639.             $I_L639_298 = 0
  639.             do
  640.                $m_S23 = (mymextmap%base_addr)(1 + $I_L639_298, 0)
  641.                $n_S24 = (mynextmap%base_addr)(1 + $I_L639_298, 0)
  642.                $SCA_mymnextmap_I55 = (mymnextmap%base_addr)($m_S23, $n_S24, 0)
  642.                $SCA_lmnextmap_I56 = (lmnextmap%base_addr)(1 + $I_L639_298, 0)
  642.                $I_L642_259 = 0
  642. !dir$ ivdep
  642.                do
  643.                   (ls2f%base_addr)(1 + $I_L642_259, $SCA_lmnextmap_I56, 0) = (legfuncs2f%base_addr)(1 + $I_L642_259, $SCA_mymnextmap_I55, 0)
  644.                   $I_L642_259 = 1 + $I_L642_259
  642.                   if ( $I_L642_259 >= jmaxhalf ) exit
  642.                enddo
  645.                $I_L639_298 = 1 + $I_L639_298
  644.                if ( $I_L639_298 >= mymnextmax ) exit
  644.             enddo
  644.          endif
  644.       endif
  647.       $F_A44 = dlmn
  647.       $F_A45 = ( djh + -jmaxhalf )
  647.       if ( and( -$F_A45, -$F_A44 ) < 0 ) then
  647.          $I_L647_310 = 0
  647.          do
  647.             $I_L647_284 = 0
  647. !dir$ ivdep
  647.             do
  647.                (ls2f%base_addr)(jmaxhalf + $I_L647_284 + 1, 1 + $I_L647_310, 0) = 0.0
  647.                $I_L647_284 = 1 + $I_L647_284
  647.                if ( $I_L647_284 >= $F_A45 ) exit
  647.             enddo
  647.             $I_L647_310 = 1 + $I_L647_310
  647.             if ( $I_L647_310 >= $F_A44 ) exit
  647.          enddo
  647.       endif
  648.       $F_A46 = ( dlmn + -mymnextmax )
  648.       $F_A47 = djh
  648.       if ( and( -$F_A47, -$F_A46 ) < 0 ) then
  648.          $I_L648_312 = 0
  648.          do
  648.             $I_L648_286 = 0
  648. !dir$ ivdep
  648.             do
  648.                (ls2f%base_addr)(1 + $I_L648_286, mymnextmax + $I_L648_312 + 1, 0) = 0.0
  648.                $I_L648_286 = 1 + $I_L648_286
  648.                if ( $I_L648_286 >= $F_A47 ) exit
  648.             enddo
  648.             $I_L648_312 = 1 + $I_L648_312
  648.             if ( $I_L648_312 >= $F_A46 ) exit
  648.          enddo
  648.       endif
  653.       lf2s%header%a_contig = 1
  653.       lf2s%dim_1%LB = 1
  653.       lf2s%dim_1%EX = ( max( 0, dlmn ) )
  653.       lf2s%dim_1%SM = 1
  653.       lf2s%dim_2%LB = 1
  653.       lf2s%dim_2%EX = ( max( 0, djh ) )
  653.       lf2s%dim_2%SM = ( max( 0, dlmn ) )
  653.       $_allo_P16(0) = 0x1000000000001L
  653.       $_allo_P16(1) = loc( lf2s )
  653.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
  654.       if ( jmaxhalf > 0 ) then
  655.          if ( mymnextmax > 0 ) then
  654.             $I_L654_320 = 0
  654.             do
  655.                $I_L655_318 = 0
  655.                if ( mymnextmax >= 4 ) then
  655.                   $I_L655_327 = 0
  655. !dir$ blocking_size( 0, 0 )
  655.                   do
  654.                      $SCA_lmnextmap#1_U0 = (lmnextmap%base_addr)(1 + 4 * $I_L655_327, 0)
  654.                      $SCA_lmnextmap#2_U1 = (lmnextmap%base_addr)(2 + 4 * $I_L655_327, 0)
  654.                      $SCA_lmnextmap#3_U2 = (lmnextmap%base_addr)(3 + 4 * $I_L655_327, 0)
  654.                      $SCA_lmnextmap#4_U3 = (lmnextmap%base_addr)(4 + 4 * $I_L655_327, 0)
  654.                      $I_L654_263 = 0
  654. !dir$ ivdep
  654. !dir$ blocking_size( 256, 256 )
  654.                      do
  656.                         (lf2s%base_addr)($SCA_lmnextmap#1_U0, $I_L654_263 + 256 * $I_L654_320 + 1, 0) = (ls2f%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, $SCA_lmnextmap#1_U0, 0) * (gaussweights%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, 0)
  656.                         (lf2s%base_addr)($SCA_lmnextmap#2_U1, $I_L654_263 + 256 * $I_L654_320 + 1, 0) = (ls2f%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, $SCA_lmnextmap#2_U1, 0) * (gaussweights%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, 0)
  656.                         (lf2s%base_addr)($SCA_lmnextmap#3_U2, $I_L654_263 + 256 * $I_L654_320 + 1, 0) = (ls2f%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, $SCA_lmnextmap#3_U2, 0) * (gaussweights%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, 0)
  656.                         (lf2s%base_addr)($SCA_lmnextmap#4_U3, $I_L654_263 + 256 * $I_L654_320 + 1, 0) = (ls2f%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, $SCA_lmnextmap#4_U3, 0) * (gaussweights%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, 0)
  654.                         $I_L654_263 = 1 + $I_L654_263
  655.                         if ( $I_L654_263 >= min( jmaxhalf, 256 + 256 * $I_L654_320 ) + -256 * $I_L654_320 ) exit
  655.                      enddo
  657.                      $I_L655_327 = 1 + $I_L655_327
  657.                      if ( $I_L655_327 >= _rsh( mymnextmax, 2 ) ) exit
  657.                   enddo
  657.                   $I_L655_318 = and( 0xfffffffffffffffcUL, mymnextmax )
  657.                endif
  655.                if ( $I_L655_318 < mymnextmax ) then
  655.                   $I_L655_324 = 0
  655. !dir$ blocking_size( 0, 0 )
  655.                   do
  654.                      $SCA_lmnextmap_I57 = (lmnextmap%base_addr)($I_L655_318 + $I_L655_324 + 1, 0)
  654.                      $I_L654_263 = 0
  654. !dir$ ivdep
  654. !dir$ blocking_size( 256, 256 )
  654.                      do
  656.                         (lf2s%base_addr)($SCA_lmnextmap_I57, $I_L654_263 + 256 * $I_L654_320 + 1, 0) = (ls2f%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, $SCA_lmnextmap_I57, 0) * (gaussweights%base_addr)($I_L654_263 + 256 * $I_L654_320 + 1, 0)
  654.                         $I_L654_263 = 1 + $I_L654_263
  655.                         if ( $I_L654_263 >= min( jmaxhalf, 256 + 256 * $I_L654_320 ) + -256 * $I_L654_320 ) exit
  655.                      enddo
  657.                      $I_L655_324 = 1 + $I_L655_324
  657.                      if ( $I_L655_324 >= mymnextmax + -$I_L655_318 ) exit
  657.                   enddo
  657.                endif
  654.                $I_L654_320 = 1 + $I_L654_320
  657.                if ( $I_L654_320 >= 1 + max( 0, -1 + _rsh( 255 + jmaxhalf, 8 ) ) ) exit
  657.             enddo
  657.          endif
  657.       endif
  659.       $F_A48 = ( djh + -jmaxhalf )
  659.       $F_A49 = dlmn
  659.       if ( and( -$F_A49, -$F_A48 ) < 0 ) then
  659.          $I_L659_314 = 0
  659.          do
  659.             $I_L659_288 = 0
  659. !dir$ ivdep
  659.             do
  659.                (lf2s%base_addr)(1 + $I_L659_288, jmaxhalf + $I_L659_314 + 1, 0) = 0.0
  659.                $I_L659_288 = 1 + $I_L659_288
  659.                if ( $I_L659_288 >= $F_A49 ) exit
  659.             enddo
  659.             $I_L659_314 = 1 + $I_L659_314
  659.             if ( $I_L659_314 >= $F_A48 ) exit
  659.          enddo
  659.       endif
  660.       $F_A50 = djh
  660.       $F_A51 = ( dlmn + -mymnextmax )
  660.       if ( and( -$F_A51, -$F_A50 ) < 0 ) then
  660.          $I_L660_316 = 0
  660.          do
  660.             $I_L660_290 = 0
  660. !dir$ ivdep
  660.             do
  660.                (lf2s%base_addr)(mymnextmax + $I_L660_290 + 1, 1 + $I_L660_316, 0) = 0.0
  660.                $I_L660_290 = 1 + $I_L660_290
  660.                if ( $I_L660_290 >= $F_A51 ) exit
  660.             enddo
  660.             $I_L660_316 = 1 + $I_L660_316
  660.             if ( $I_L660_316 >= $F_A50 ) exit
  660.          enddo
  660.       endif
  665.       sin60 = 8.660254037844386e-1
  666.       sin36 = 5.8778525229247314e-1
  667.       sin72 = 9.5105651629515353e-1
  668.       cos36 = 8.0901699437494745e-1
  669.       cos72 = 3.0901699437494745e-1
  673.       nblockfft = 1
  674.       if ( mylastlat_f + -myfirstlat_f > 0 ) then
  674.          $I_L674_266 = 0
  674. !dir$ ivdep
  674.          do
  675.             if ( (imaxperj%base_addr)(myfirstlat_f + $I_L674_266, 0) + -(imaxperj%base_addr)(myfirstlat_f + $I_L674_266 + 1, 0) /= 0 ) then
  676.                nblockfft = 1 + nblockfft
  676.             endif
  678.             $I_L674_266 = 1 + $I_L674_266
  677.             if ( $I_L674_266 >= ( mylastlat_f + -myfirstlat_f ) ) exit
  677.          enddo
  677.       endif
  684.       blockfft%header%a_contig = 1
  684.       blockfft%dim_1%LB = 1
  684.       blockfft%dim_1%EX = ( max( 0, nblockfft ) )
  684.       blockfft%dim_1%SM = 21
  684.       $_allo_P17(0) = 0x1000000000001L
  684.       $_allo_P17(1) = loc( blockfft )
  684.       call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
  684.       if ( nblockfft > 0 ) then
  684.          $I_L684_268 = 0
  684. !dir$ novector
  684. !dir$ nextscalar
  684. !dir$ rsi.nextscalar
  684.          do
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%el_len = 32
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%assoc = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%ptr_alloc = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%p_or_a = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%a_contig = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%dv_versn = 2
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%dv_smunit = 32
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%d_type = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%n_params = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%pad_codim = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%n_codim = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%pad_dim = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%n_dim = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%d_type_idx = 10
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%typ_code = 131074
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%orig_base = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%header%orig_size = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%dim_1%LB = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%dim_1%EX = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%factors%dim_1%SM = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%el_len = 64
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%assoc = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%ptr_alloc = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%p_or_a = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%a_contig = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%dv_versn = 2
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%dv_smunit = 64
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%d_type = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%n_params = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%pad_codim = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%n_codim = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%pad_dim = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%n_dim = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%d_type_idx = 13
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%typ_code = 134481411
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%orig_base = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%header%orig_size = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%dim_1%LB = 1
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%dim_1%EX = 0
  684.             (blockfft%base_addr)(1 + $I_L684_268, 0)%trigs%dim_1%SM = 1
  684.             $I_L684_268 = 1 + $I_L684_268
  684.             if ( $I_L684_268 >= ( max( 0, nblockfft ) ) ) exit
  684.          enddo
  684.       endif
  685.       iblockfft = 1
  686.       p%base_addr = loc( (blockfft%base_addr)(1, 0) )
  687.       (blockfft%base_addr)(1, 0)%nlong = (imaxperj%base_addr)(myfirstlat_f, 0)
  688.       (blockfft%base_addr)(1, 0)%firstlat = 1
  689.       if ( mylastlat_f + -myfirstlat_f > 0 ) then
  689.          $I_L689_270 = 0
  689. !dir$ unroll 4
  689.          do
  690.             if ( (imaxperj%base_addr)(myfirstlat_f + $I_L689_270 + 1, 0) + -(p%base_addr)(0)%nlong /= 0 ) then
  691.                (blockfft%base_addr)(iblockfft, 0)%lastlat = ( 1 + $I_L689_270 )
  692.                iblockfft = 1 + iblockfft
  693.                p%base_addr = loc( (blockfft%base_addr)(iblockfft, 0) )
  694.                (blockfft%base_addr)(iblockfft, 0)%nlong = (imaxperj%base_addr)(myfirstlat_f + $I_L689_270 + 1, 0)
  695.                (blockfft%base_addr)(iblockfft, 0)%firstlat = ( 2 + $I_L689_270 )
  695.             endif
  697.             $I_L689_270 = 1 + $I_L689_270
  696.             if ( $I_L689_270 >= ( mylastlat_f + -myfirstlat_f ) ) exit
  696.          enddo
  696.       endif
  698.       if ( iblockfft + -nblockfft /= 0 ) then
  699.          $Unit_temp_O0 = nfprt
  699.          $_IOitem_P0(0) = iblockfft
  699.          $_IOitem_P0(1) = nblockfft
  699.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$13,  _substr(t$12,1,47), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(InitTransform)**', 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  701.           _substr(t$445,1,19) = '**(InitTransform)**'
  701.          call _stop(  _substr(t$445,1,19) )
  701.       else
  703.          (blockfft%base_addr)(iblockfft, 0)%lastlat = mylastlat_f + -myfirstlat_f + 1
  708.          if ( nblockfft > 0 ) then
  708.             $I_L708_135 = 0
  708.             do
  709.                p%base_addr = loc( (blockfft%base_addr)(1 + $I_L708_135, 0) )
  710.                t$164 = 4
  710.                t$335 = 4
  710.                t$338 = 16
  710.                t$336 = int( _alloc( 16 ), 8 )
  710.                t$337 = t$336
  710.                if ( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong <= 0 ) then
  710.                   $IOitem_O1 = (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong
  710.                   _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$174,  _substr(t$173,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O1, 0x2000200000000L ) ) )
  710.                   _f90_adjustl(  _substr(t$1141,1,15),  _substr(charnin,1,15) )
  710.                   t$1142 = _ltrim(  _substr(t$1141,1,15) )
  710.                   t$1144 = int( _alloc( max( 0, t$1142 ) ), 8 )
  710.                    _substr(t$1143,1,max( 0, t$1142 )) =  _substr(t$1141,1,_ltrim(  _substr(t$1141,1,15) ))
  710.                   $Unit_temp_O2 = nfprt
  710.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$176,  _substr(t$175,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1143,1,max( 0, t$1142 )), 0x800600000000L ) ) )
  710.                   _free( t$1144 )
  710.                    _substr(t$1145,1,4) = ' '
  710.                   call _stop(  _substr(t$1145,1,1) )
  710.                else
  710.                   nout = cvmg( 1 + (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, mod( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, 2 ) /= 0 )
  710.                   $left_S31 = nout / 2
  710.                   $I_L710_308 = 0
  710.                   do
  710.                      $SC_base_I59 = base(1 + $I_L710_308)
  710.                      do
  710.                         if ( mod( $left_S31, $SC_base_I59 ) /= 0 ) goto 10
  710.                      enddo
  710.    10                continue
  710.                      $I_L710_308 = 1 + $I_L710_308
  710.                      if ( $I_L710_308 >= 4 ) exit
  710.                   enddo
  710.                   if ( $left_S31 /= 1 ) then
  710.                      if ( nout < 2147483646.0 ) then
  710.                         $Trips03_N133 = int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, mod( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, 2 ) /= 0 ) ) + 2.0 ) ), 8 ) + -_rsh( .not.or( (boolean[64])( -2147483646.0 + cvmg( 1 + (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, mod( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, 2 ) /= 0 ) + -2.0 + 2.0 * real( int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, mod( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, 2 ) /= 0 ) ) + 2.0 ) ), 8 ), 8 ) ), -( (boolean[64])( -2147483646.0 + cvmg( 1 + (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, mod( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, 2 ) /= 0 ) + -2.0 + 2.0 * real( int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, mod( (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong, 2 ) /= 0 ) ) + 2.0 ) ), 8 ), 8 ) ) ) ), 63 )
  710.                         $I_nout_322 = 0
  710.                         do
  710.                            $left_S31 = ( nout + 2 * $I_nout_322 + 2 ) / 2
  710.                            $I_L710_302 = 0
  710.                            do
  710.                               $SC_base_I60 = base(1 + $I_L710_302)
  710.                               do
  710.                                  if ( mod( $left_S31, $SC_base_I60 ) /= 0 ) goto 20
  710.                               enddo
  710.    20                         continue
  710.                               $I_L710_302 = 1 + $I_L710_302
  710.                               if ( $I_L710_302 >= 4 ) exit
  710.                            enddo
  710.                            if ( $left_S31 == 1 ) then
  710.                               nout = ( nout + 2 * $I_nout_322 + 2 )
  710.                               goto 40
  710.                            endif
  710.                            $I_nout_322 = 1 + $I_nout_322
  710.                            if ( $I_nout_322 >= $Trips03_N133 ) exit
  710.                         enddo
  710.                         nout = ( nout + 2 * $Trips03_N133 )
  710.                         goto 30
  710.                      else
  710.    30                   continue
  710.                         $IOitem_O3 = (blockfft%base_addr)(1 + $I_L708_135, 0)%nlong
  710.                         _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$178,  _substr(t$177,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O3, 0x2000200000000L ) ) )
  710.                         _f90_adjustl(  _substr(t$1147,1,15),  _substr(charnin,1,15) )
  710.                         t$1148 = _ltrim(  _substr(t$1147,1,15) )
  710.                         t$1150 = int( _alloc( max( 0, t$1148 ) ), 8 )
  710.                          _substr(t$1149,1,max( 0, t$1148 )) =  _substr(t$1147,1,_ltrim(  _substr(t$1147,1,15) ))
  710.                         $Unit_temp_O4 = nfprt
  710.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$180,  _substr(t$179,1,78), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1149,1,max( 0, t$1148 )), 0x800600000000L ) ) )
  710.                         _free( t$1150 )
  710.                          _substr(t$1151,1,4) = ' '
  710.                         call _stop(  _substr(t$1151,1,1) )
  710.                      endif
  710.                   endif
  710.                endif
  710.    40          continue
  710.                nout = nout
  710.                if ( nout + -(p%base_addr)(0)%nlong /= 0 ) then
  710.                   _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$166,  _substr(t$165,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (p%base_addr)(0)%nlong, 0x2000200000000L ) ) )
  710.                   _f90_adjustl(  _substr(t$1120,1,15),  _substr(c,1,15) )
  710.                   t$1121 = _ltrim(  _substr(t$1120,1,15) )
  710.                   t$1123 = int( _alloc( max( 0, t$1121 ) ), 8 )
  710.                    _substr(t$1122,1,max( 0, t$1121 )) =  _substr(t$1120,1,_ltrim(  _substr(t$1120,1,15) ))
  710.                   $Unit_temp_O5 = nfprt
  710.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$168,  _substr(t$167,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1122,1,max( 0, t$1121 )), 0x800600000000L ) ) )
  710.                   _free( t$1123 )
  710.                   _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$170,  _substr(t$169,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nout, 0x2000200000000L ) ) )
  710.                   _f90_adjustl(  _substr(t$1124,1,15),  _substr(c,1,15) )
  710.                   t$1125 = _ltrim(  _substr(t$1124,1,15) )
  710.                   t$1127 = int( _alloc( max( 0, t$1125 ) ), 8 )
  710.                    _substr(t$1126,1,max( 0, t$1125 )) =  _substr(t$1124,1,_ltrim(  _substr(t$1124,1,15) ))
  710.                   $Unit_temp_O6 = nfprt
  710.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O6, Null_Arg, Null_Arg, t$172,  _substr(t$171,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1126,1,max( 0, t$1125 )), 0x800600000000L ) ) )
  710.                   _free( t$1127 )
  710.                    _substr(t$1128,1,4) = ' '
  710.                   call _stop(  _substr(t$1128,1,1) )
  710.                else
  710.                   $left_S33 = nout / 2
  710.                   $I_L710_292 = 0
  710. !dir$ ivdep
  710.                   do
  710.                      powers(1 + $I_L710_292) = 0
  710.                      $I_L710_292 = 1 + $I_L710_292
  710.                      if ( $I_L710_292 >= 4 ) exit
  710.                   enddo
  710.                   $I_L710_304 = 0
  710.                   do
  710.                      $SC_base_I61 = base(1 + $I_L710_304)
  710.                      do
  710.                         if ( mod( $left_S33, $SC_base_I61 ) /= 0 ) goto 50
  710.                         powers(1 + $I_L710_304) = 1 + powers(1 + $I_L710_304)
  710.                      enddo
  710.    50                continue
  710.                      $I_L710_304 = 1 + $I_L710_304
  710.                      if ( $I_L710_304 >= 4 ) exit
  710.                   enddo
  710.                   $Reduc_A52 = 0
  710.                   $I_L710_294 = 0
  710. !dir$ ivdep
  710.                   do
  710.                      $Reduc_A52 = $Reduc_A52 + powers(1 + $I_L710_294)
  710.                      $I_L710_294 = 1 + $I_L710_294
  710.                      if ( $I_L710_294 >= 4 ) exit
  710.                   enddo
  710.                   (p%base_addr)(0)%factors%header%a_contig = 1
  710.                   (p%base_addr)(0)%factors%dim_1%LB = 1
  710.                   (p%base_addr)(0)%factors%dim_1%EX = ( max( 0, 1 + $Reduc_A52 ) )
  710.                   (p%base_addr)(0)%factors%dim_1%SM = 1
  710.                   $_allo_P18(0) = 0x1000000000001L
  710.                   $_allo_P18(1) = loc( (p%base_addr)(0)%factors )
  710.                   call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
  710.                   ((p%base_addr)(0)%factors%base_addr)(1, 0) = $Reduc_A52
  710.                   $ifac_S37 = 1
  710.                   $SC_p_I40 = (p%base_addr)(0)%factors%dim_1%SM
  710.                   $SC_p_I39 = (p%base_addr)(0)%factors%dim_1%EX
  710.                   $SC_p_I41 = (p%base_addr)(0)%factors%dim_1%LB
  710.                   $I_L710_306 = 0
  710. !dir$ loop_info (automatic) cache_nt( base )
  710.                   do
  710.                      $j_S36 = permutation(1 + $I_L710_306)
  710.                      $F_A54 = powers($j_S36)
  710.                      if ( powers($j_S36) > 0 ) then
  710.                         $SCA_base_I58 = base($j_S36)
  710.                         $I_L710_296 = 0
  710. !dir$ ivdep
  710.                         do
  710.                            ((p%base_addr)(0)%factors%base_addr)($ifac_S37 + $I_L710_296 + 1, 0) = $SCA_base_I58
  710.                            $I_L710_296 = 1 + $I_L710_296
  710.                            if ( $I_L710_296 >= $F_A54 ) exit
  710.                         enddo
  710.                      endif
  710.                      $ifac_S37 = $ifac_S37 + powers($j_S36)
  710.                      $I_L710_306 = 1 + $I_L710_306
  710.                      if ( $I_L710_306 >= 4 ) exit
  710.                   enddo
  710.                   _free( t$336 )
  710.                endif
  710.                (p%base_addr)(0)%nfactors = ( max( 0, (p%base_addr)(0)%factors%dim_1%EX ) )
  710.                $nn_S38 = (p%base_addr)(0)%nlong / 2
  710.                (p%base_addr)(0)%trigs%header%a_contig = 1
  710.                (p%base_addr)(0)%trigs%dim_1%LB = 1
  710.                (p%base_addr)(0)%trigs%dim_1%EX = ( max( 0, 2 * ( ( 1 + $nn_S38 ) / 2 ) + 2 * $nn_S38 ) )
  710.                (p%base_addr)(0)%trigs%dim_1%SM = 1
  710.                $_allo_P19(0) = 0x1000000000001L
  710.                $_allo_P19(1) = loc( (p%base_addr)(0)%trigs )
  710.                call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
  710.                $del_S40 = ( 6.2831853071795862 * 1.0/$nn_S38 )
  710.                if ( 2 * $nn_S38 > 0 ) then
  710.                   $SC_p_I43 = (p%base_addr)(0)%trigs%dim_1%SM
  710.                   $SC_p_I42 = (p%base_addr)(0)%trigs%dim_1%EX
  710.                   $SC_p_I44 = (p%base_addr)(0)%trigs%dim_1%LB
  710.                   $I_L710_272 = 0
  710. !dir$ ivdep
  710.                   do
  710.                      $Coss_P1 = coss( ( $del_S40 * real( 2 * $I_L710_272, 8 ) * 5.0e-1 ) )
  710.                      ((p%base_addr)(0)%trigs%base_addr)(1 + 2 * $I_L710_272, 0) = real( $Coss_P1, 8 )
  710.                      ((p%base_addr)(0)%trigs%base_addr)(2 + 2 * $I_L710_272, 0) = cimag( $Coss_P1 )
  710.                      $I_L710_272 = 1 + $I_L710_272
  710.                      if ( $I_L710_272 >= ( 1 + 2 * $nn_S38 ) / 2 ) exit
  710.                   enddo
  710.                endif
  710.                $del_S42 = 5.0e-1 * $del_S40
  710.                if ( 2 * ( ( 1 + $nn_S38 ) / 2 ) > 0 ) then
  710.                   $SC_p_I43 = (p%base_addr)(0)%trigs%dim_1%SM
  710.                   $SC_p_I42 = (p%base_addr)(0)%trigs%dim_1%EX
  710.                   $SC_p_I44 = (p%base_addr)(0)%trigs%dim_1%LB
  710.                   $I_L710_274 = 0
  710. !dir$ ivdep
  710.                   do
  710.                      $Coss_P2 = coss( ( $del_S42 * real( 2 * $I_L710_274, 8 ) * 5.0e-1 ) )
  710.                      ((p%base_addr)(0)%trigs%base_addr)(2 * $nn_S38 + 2 * $I_L710_274 + 1, 0) = real( $Coss_P2, 8 )
  710.                      ((p%base_addr)(0)%trigs%base_addr)(2 * $nn_S38 + 2 * $I_L710_274 + 2, 0) = cimag( $Coss_P2 )
  710.                      $I_L710_274 = 1 + $I_L710_274
  710.                      if ( $I_L710_274 >= ( 1 + 2 * ( ( 1 + $nn_S38 ) / 2 ) ) / 2 ) exit
  710.                   enddo
  710.                endif
  710.                (p%base_addr)(0)%ntrigs = ( max( 0, (p%base_addr)(0)%trigs%dim_1%EX ) )
  711.                $I_L708_135 = 1 + $I_L708_135
  711.                if ( $I_L708_135 >= nblockfft ) exit
  711.             enddo
  711.          endif
  711.       endif
  743.       return
  743.       end
  743.       
  813.       
  813.       subroutine createspectogrid( nfullspec, nsurfspec, nfullgrid, nsurfgrid )
  757.       if ( havesurf ) then
  758.          $nsusp_S0 = nsurfspec
  759.          $nsugr_S5 = nsurfgrid
  759.       else
  761.          $nsusp_S0 = 0
  762.          $nsugr_S5 = 0
  762.       endif
  764.       nfull_g = nfullgrid
  765.       nsurf_g = nsurfgrid
  766.       nfull_s = nfullspec
  767.       nsurf_s = nsurfspec
  768.       nspecfields = nfullspec + $nsusp_S0
  769.       usedspecfields = 0
  770.       lastusedspecvert = 0
  771.       surfspec%header%a_contig = 1
  771.       surfspec%dim_1%LB = 1
  771.       surfspec%dim_1%EX = _zla( 0, ( nfullspec + $nsusp_S0 ) )
  771.       surfspec%dim_1%SM = 1
  771.       $_allo_P0(0) = 0x1000000000001L
  771.       $_allo_P0(1) = loc( surfspec )
  771.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  772.       prevspec%header%a_contig = 1
  772.       prevspec%dim_1%LB = 1
  772.       prevspec%dim_1%EX = _zla( 0, ( nfullspec + $nsusp_S0 ) )
  772.       prevspec%dim_1%SM = 1
  772.       $_allo_P1(0) = 0x1000000000001L
  772.       $_allo_P1(1) = loc( prevspec )
  772.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  773.       spec1d%header%a_contig = 1
  773.       spec1d%dim_1%LB = 1
  773.       spec1d%dim_1%EX = _zla( 0, ( nfullspec + $nsusp_S0 ) )
  773.       spec1d%dim_1%SM = 9
  773.       $_allo_P2(0) = 0x1000000000001L
  773.       $_allo_P2(1) = loc( spec1d )
  773.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  773.       if ( nfullspec + $nsusp_S0 > 0 ) then
  773.          $I_L773_16 = 0
  773. !dir$ novector
  773. !dir$ nextscalar
  773. !dir$ rsi.nextscalar
  773. !dir$ unroll 2
  773.          do
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%el_len = 64
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%assoc = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%ptr_alloc = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%p_or_a = 1
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%a_contig = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%dv_versn = 2
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%dv_smunit = 64
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%d_type = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%n_params = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%pad_codim = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%n_codim = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%pad_dim = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%n_dim = 1
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%d_type_idx = 13
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%typ_code = 134481411
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%orig_base = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%header%orig_size = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%dim_1%LB = 1
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%dim_1%EX = 0
  773.             (spec1d%base_addr)(1 + $I_L773_16, 0)%p%dim_1%SM = 1
  773.             $I_L773_16 = 1 + $I_L773_16
  773.             if ( $I_L773_16 >= _zla( 0, ( nfullspec + $nsusp_S0 ) ) ) exit
  773.          enddo
  773.       endif
  774.       spec2d%header%a_contig = 1
  774.       spec2d%dim_1%LB = 1
  774.       spec2d%dim_1%EX = ( max( 0, nfullspec + $nsusp_S0 ) )
  774.       spec2d%dim_1%SM = 12
  774.       $_allo_P3(0) = 0x1000000000001L
  774.       $_allo_P3(1) = loc( spec2d )
  774.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  774.       if ( nfullspec + $nsusp_S0 > 0 ) then
  774.          $I_L774_18 = 0
  774. !dir$ novector
  774. !dir$ nextscalar
  774. !dir$ rsi.nextscalar
  774. !dir$ unroll 2
  774.          do
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%el_len = 64
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%assoc = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%ptr_alloc = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%p_or_a = 1
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%a_contig = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%dv_versn = 2
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%dv_smunit = 64
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%d_type = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%n_params = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%pad_codim = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%n_codim = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%pad_dim = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%n_dim = 2
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%d_type_idx = 13
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%typ_code = 134481411
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%orig_base = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%header%orig_size = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%dim_1%LB = 1
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%dim_1%EX = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%dim_1%SM = 1
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%dim_2%LB = 1
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%dim_2%EX = 0
  774.             (spec2d%base_addr)(1 + $I_L774_18, 0)%p%dim_2%SM = 1
  774.             $I_L774_18 = 1 + $I_L774_18
  774.             if ( $I_L774_18 >= ( max( 0, nfullspec + $nsusp_S0 ) ) ) exit
  774.          enddo
  774.       endif
  775.       nvertspec = $nsusp_S0 + nfullspec * kmaxloc
  777.       ngridfields = nsurfgrid + nfullgrid
  778.       usedgridfields = 0
  779.       lastusedgridvert = 0
  780.       surfgrid%header%a_contig = 1
  780.       surfgrid%dim_1%LB = 1
  780.       surfgrid%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  780.       surfgrid%dim_1%SM = 1
  780.       $_allo_P4(0) = 0x1000000000001L
  780.       $_allo_P4(1) = loc( surfgrid )
  780.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  781.       prevgrid%header%a_contig = 1
  781.       prevgrid%dim_1%LB = 1
  781.       prevgrid%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  781.       prevgrid%dim_1%SM = 1
  781.       $_allo_P5(0) = 0x1000000000001L
  781.       $_allo_P5(1) = loc( prevgrid )
  781.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  782.       grid2d%header%a_contig = 1
  782.       grid2d%dim_1%LB = 1
  782.       grid2d%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  782.       grid2d%dim_1%SM = 12
  782.       $_allo_P6(0) = 0x1000000000001L
  782.       $_allo_P6(1) = loc( grid2d )
  782.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  782.       if ( nsurfgrid + nfullgrid > 0 ) then
  782.          $I_L782_20 = 0
  782. !dir$ novector
  782. !dir$ nextscalar
  782. !dir$ rsi.nextscalar
  782. !dir$ unroll 2
  782.          do
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%el_len = 64
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%assoc = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%ptr_alloc = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%p_or_a = 1
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%a_contig = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%dv_versn = 2
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%dv_smunit = 64
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%d_type = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%n_params = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%pad_codim = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%n_codim = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%pad_dim = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%n_dim = 2
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%d_type_idx = 13
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%typ_code = 134481411
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%orig_base = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%header%orig_size = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%dim_1%LB = 1
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%dim_1%EX = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%dim_1%SM = 1
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%dim_2%LB = 1
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%dim_2%EX = 0
  782.             (grid2d%base_addr)(1 + $I_L782_20, 0)%p%dim_2%SM = 1
  782.             $I_L782_20 = 1 + $I_L782_20
  782.             if ( $I_L782_20 >= ( max( 0, nsurfgrid + nfullgrid ) ) ) exit
  782.          enddo
  782.       endif
  783.       grid3d%header%a_contig = 1
  783.       grid3d%dim_1%LB = 1
  783.       grid3d%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  783.       grid3d%dim_1%SM = 15
  783.       $_allo_P7(0) = 0x1000000000001L
  783.       $_allo_P7(1) = loc( grid3d )
  783.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  783.       if ( nsurfgrid + nfullgrid > 0 ) then
  783.          $I_L783_22 = 0
  783. !dir$ novector
  783. !dir$ nextscalar
  783. !dir$ rsi.nextscalar
  783. !dir$ unroll 2
  783.          do
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%el_len = 64
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%assoc = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%ptr_alloc = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%p_or_a = 1
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%a_contig = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%dv_versn = 2
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%dv_smunit = 64
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%d_type = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%n_params = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%pad_codim = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%n_codim = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%pad_dim = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%n_dim = 3
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%d_type_idx = 13
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%typ_code = 134481411
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%orig_base = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%header%orig_size = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_1%LB = 1
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_1%EX = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_1%SM = 1
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_2%LB = 1
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_2%EX = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_2%SM = 1
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_3%LB = 1
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_3%EX = 0
  783.             (grid3d%base_addr)(1 + $I_L783_22, 0)%p%dim_3%SM = 1
  783.             $I_L783_22 = 1 + $I_L783_22
  783.             if ( $I_L783_22 >= ( max( 0, nsurfgrid + nfullgrid ) ) ) exit
  783.          enddo
  783.       endif
  784.       fieldfordellam%header%a_contig = 1
  784.       fieldfordellam%dim_1%LB = 1
  784.       fieldfordellam%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  784.       fieldfordellam%dim_1%SM = 1
  784.       $_allo_P8(0) = 0x1000000000001L
  784.       $_allo_P8(1) = loc( fieldfordellam )
  784.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  785.       nvertgrid = $nsugr_S5 + nfullgrid * kmaxloc
  787.       willdellam = .false.
  788.       useddellamfields = nsurfspec + nfullspec
  789.       lastuseddellamvert = $nsusp_S0 + nfullspec * kmaxloc
  790.       prevvertdellamsource%header%a_contig = 1
  790.       prevvertdellamsource%dim_1%LB = 1
  790.       prevvertdellamsource%dim_1%EX = ( max( 0, nsurfgrid + nfullgrid ) )
  790.       prevvertdellamsource%dim_1%SM = 1
  790.       $_allo_P9(0) = 0x1000000000001L
  790.       $_allo_P9(1) = loc( prevvertdellamsource )
  790.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  792.       t$500 = nfullspec * kmaxloc * 2 + 2 * $nsusp_S0
  792.       dv = nobankconflicts( t$500 )
  793.       t$500 = nvertspec * jmaxhalf
  793.       dvjh = nobankconflicts( t$500 )
  794.       t$500 = nvertgrid * myjmax_f
  794.       dvdlj = nobankconflicts( t$500 )
  796.       spec%header%a_contig = 1
  796.       spec%dim_1%LB = 1
  796.       spec%dim_1%EX = ( max( 0, dlmn ) )
  796.       spec%dim_1%SM = 1
  796.       spec%dim_2%LB = 1
  796.       spec%dim_2%EX = ( max( 0, dv ) )
  796.       spec%dim_2%SM = ( max( 0, dlmn ) )
  796.       $_allo_P10(0) = 0x1000000000001L
  796.       $_allo_P10(1) = loc( spec )
  796.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
  797.       four%header%a_contig = 1
  797.       four%dim_1%LB = 1
  797.       four%dim_1%EX = ( max( 0, dvdlj ) )
  797.       four%dim_1%SM = 1
  797.       four%dim_2%LB = 1
  797.       four%dim_2%EX = ( max( 0, dip1 ) )
  797.       four%dim_2%SM = ( max( 0, dvdlj ) )
  797.       $_allo_P11(0) = 0x1000000000001L
  797.       $_allo_P11(1) = loc( four )
  797.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
  798.       if ( requests%header%assoc /= 1 ) then
  799.          requests%header%a_contig = 1
  799.          requests%dim_1%LB = 0
  799.          requests%dim_1%EX = ( max( 0, 1 + maxnodes ) )
  799.          requests%dim_1%SM = 1
  799.          $_allo_P12(0) = 0x1000000000001L
  799.          $_allo_P12(1) = loc( requests )
  799.          call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
  800.          requestr%header%a_contig = 1
  800.          requestr%dim_1%LB = 0
  800.          requestr%dim_1%EX = ( max( 0, 1 + maxnodes ) )
  800.          requestr%dim_1%SM = 1
  800.          $_allo_P13(0) = 0x1000000000001L
  800.          $_allo_P13(1) = loc( requestr )
  800.          call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
  801.          status%header%a_contig = 1
  801.          status%dim_1%LB = 1
  801.          status%dim_1%EX = 5
  801.          status%dim_1%SM = 1
  801.          $_allo_P14(0) = 0x1000000000001L
  801.          $_allo_P14(1) = loc( status )
  801.          call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
  802.          stat%header%a_contig = 1
  802.          stat%dim_1%LB = 1
  802.          stat%dim_1%EX = 5
  802.          stat%dim_1%SM = 1
  802.          stat%dim_2%LB = 1
  802.          stat%dim_2%EX = ( max( 0, maxnodes ) )
  802.          stat%dim_2%SM = 5
  802.          $_allo_P15(0) = 0x1000000000001L
  802.          $_allo_P15(1) = loc( stat )
  802.          call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
  802.       endif
  813.       return
  813.       end
  813.       
  817.       
  817.       subroutine deposit1d( argspec, arggrid, argdellam )
  817.       argspec%dim_1%LB = 1
  817.       if ( loc( arggrid ) /= 0 ) then
  817.          arggrid%dim_1%LB = 1
  817.          arggrid%dim_2%LB = 1
  817.       endif
  817.       if ( loc( argdellam ) /= 0 ) then
  817.          argdellam%dim_1%LB = 1
  817.          argdellam%dim_2%LB = 1
  817.       endif
  843.       if ( havesurf ) then
  884.          lusf = 1 + usedspecfields
  885.          usedspecfields = 1 + usedspecfields
  886.          $pusv_S3 = lastusedspecvert
  888.          lastusedspecvert = 1 + lastusedspecvert
  889.          if ( loc( arggrid ) /= 0 ) then
  890.             lugf = 1 + usedgridfields
  891.             usedgridfields = 1 + usedgridfields
  892.             $pugv_S4 = lastusedgridvert
  894.             lastusedgridvert = 1 + lastusedgridvert
  895.             if ( loc( argdellam ) /= 0 ) then
  896.                ludlf = 1 + useddellamfields
  897.                useddellamfields = 1 + useddellamfields
  898.                pudlv = lastuseddellamvert
  900.                lastuseddellamvert = 1 + lastuseddellamvert
  900.             endif
  900.             goto 10
  900.          else if ( loc( argdellam ) /= 0 ) then
  903.             lugf = 1 + usedgridfields
  904.             usedgridfields = 1 + usedgridfields
  905.             $pugv_S4 = lastusedgridvert
  907.             lastusedgridvert = 1 + lastusedgridvert
  907.    10       continue
  915.             if ( lusf <= nspecfields ) then
  916.                (surfspec%base_addr)(lusf, 0) = .true.
  917.                (prevspec%base_addr)(lusf, 0) = $pusv_S3
  918.                (spec2d%base_addr)(lusf, 0)%p%header%assoc = 0
  919.                (spec1d%base_addr)(lusf, 0)%p%header%a_contig = argspec%header%a_contig
  919.                (spec1d%base_addr)(lusf, 0)%p%header%assoc = 1
  919.                (spec1d%base_addr)(lusf, 0)%p%header%d_type_idx = 13
  919.                (spec1d%base_addr)(lusf, 0)%p%dim_1%LB = 1
  919.                (spec1d%base_addr)(lusf, 0)%p%dim_1%EX = max( 0, argspec%dim_1%EX )
  919.                (spec1d%base_addr)(lusf, 0)%p%dim_1%SM = argspec%dim_1%SM
  919.                (spec1d%base_addr)(lusf, 0)%p%header%ptr_alloc = argspec%header%ptr_alloc
  919.                (spec1d%base_addr)(lusf, 0)%p%header%orig_base = argspec%header%orig_base
  919.                (spec1d%base_addr)(lusf, 0)%p%header%orig_size = argspec%header%orig_size
  919.                (spec1d%base_addr)(lusf, 0)%p%base_addr = loc( (argspec%base_addr)(1, 0) )
  931.                if ( loc( arggrid ) /= 0 ) then
  936.                   if ( lugf <= nspecfields ) then
  937.                      (surfgrid%base_addr)(lugf, 0) = .true.
  938.                      (prevgrid%base_addr)(lugf, 0) = $pugv_S4
  939.                      (grid3d%base_addr)(lugf, 0)%p%header%assoc = 0
  940.                      (grid2d%base_addr)(lugf, 0)%p%header%a_contig = arggrid%header%a_contig
  940.                      (grid2d%base_addr)(lugf, 0)%p%header%assoc = 1
  940.                      (grid2d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
  940.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%LB = 1
  940.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, arggrid%dim_1%EX )
  940.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%SM = arggrid%dim_1%SM
  940.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%LB = 1
  940.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, arggrid%dim_2%EX )
  940.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%SM = arggrid%dim_2%SM
  940.                      (grid2d%base_addr)(lugf, 0)%p%header%ptr_alloc = arggrid%header%ptr_alloc
  940.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_base = arggrid%header%orig_base
  940.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_size = arggrid%header%orig_size
  940.                      (grid2d%base_addr)(lugf, 0)%p%base_addr = loc( (arggrid%base_addr)(1, 1, 0) )
  941.                      (fieldfordellam%base_addr)(lugf, 0) = .false.
  942.                      (prevvertdellamsource%base_addr)(lugf, 0) = -1
  956.                      if ( loc( argdellam ) /= 0 ) then
  962.                         willdellam = .true.
  963.                         if ( ludlf <= ngridfields ) then
  964.                            (surfgrid%base_addr)(ludlf, 0) = .true.
  965.                            (prevgrid%base_addr)(ludlf, 0) = pudlv
  966.                            (grid3d%base_addr)(ludlf, 0)%p%header%assoc = 0
  967.                            (grid2d%base_addr)(ludlf, 0)%p%header%a_contig = argdellam%header%a_contig
  967.                            (grid2d%base_addr)(ludlf, 0)%p%header%assoc = 1
  967.                            (grid2d%base_addr)(ludlf, 0)%p%header%d_type_idx = 13
  967.                            (grid2d%base_addr)(ludlf, 0)%p%dim_1%LB = 1
  967.                            (grid2d%base_addr)(ludlf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  967.                            (grid2d%base_addr)(ludlf, 0)%p%dim_1%SM = argdellam%dim_1%SM
  967.                            (grid2d%base_addr)(ludlf, 0)%p%dim_2%LB = 1
  967.                            (grid2d%base_addr)(ludlf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  967.                            (grid2d%base_addr)(ludlf, 0)%p%dim_2%SM = argdellam%dim_2%SM
  967.                            (grid2d%base_addr)(ludlf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  967.                            (grid2d%base_addr)(ludlf, 0)%p%header%orig_base = argdellam%header%orig_base
  967.                            (grid2d%base_addr)(ludlf, 0)%p%header%orig_size = argdellam%header%orig_size
  967.                            (grid2d%base_addr)(ludlf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  968.                            (fieldfordellam%base_addr)(ludlf, 0) = .true.
  969.                            (prevvertdellamsource%base_addr)(ludlf, 0) = (prevgrid%base_addr)(lugf, 0)
  969.                         else
  971.                            $Unit_temp_O1 = nfprt
  971.                            _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$71,  _substr(t$70,1,45), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  972.                            $Unit_temp_O2 = nfprt
  972.                            $_IOitem_P0(0) = ludlf
  972.                            $_IOitem_P0(1) = ngridfields
  972.                            _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$73,  _substr(t$72,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  973.                             _substr(t$530,1,15) = '**(Deposit1D)**'
  973.                            call _stop(  _substr(t$530,1,15) )
  973.                         endif
  973.                      endif
  973.                   else
  944.                      $Unit_temp_O3 = nfprt
  944.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$63,  _substr(t$62,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  945.                      $Unit_temp_O4 = nfprt
  945.                      $_IOitem_P1(0) = lugf
  945.                      $_IOitem_P1(1) = nspecfields
  945.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$65,  _substr(t$64,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( $_IOitem_P1(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  946.                       _substr(t$517,1,15) = '**(Deposit1D)**'
  946.                      call _stop(  _substr(t$517,1,15) )
  946.                   endif
  946.                else if ( loc( argdellam ) /= 0 ) then
  990.                   willdellam = .true.
  991.                   if ( lugf <= nspecfields ) then
  992.                      (surfgrid%base_addr)(lugf, 0) = .true.
  993.                      (prevgrid%base_addr)(lugf, 0) = $pugv_S4
  994.                      (grid3d%base_addr)(lugf, 0)%p%header%assoc = 0
  995.                      (grid2d%base_addr)(lugf, 0)%p%header%a_contig = argdellam%header%a_contig
  995.                      (grid2d%base_addr)(lugf, 0)%p%header%assoc = 1
  995.                      (grid2d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
  995.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%LB = 1
  995.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  995.                      (grid2d%base_addr)(lugf, 0)%p%dim_1%SM = argdellam%dim_1%SM
  995.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%LB = 1
  995.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  995.                      (grid2d%base_addr)(lugf, 0)%p%dim_2%SM = argdellam%dim_2%SM
  995.                      (grid2d%base_addr)(lugf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  995.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_base = argdellam%header%orig_base
  995.                      (grid2d%base_addr)(lugf, 0)%p%header%orig_size = argdellam%header%orig_size
  995.                      (grid2d%base_addr)(lugf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  996.                      (fieldfordellam%base_addr)(lugf, 0) = .true.
  997.                      (prevvertdellamsource%base_addr)(lugf, 0) = $pugv_S4
  997.                   else
  999.                      $Unit_temp_O5 = nfprt
  999.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$79,  _substr(t$78,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
 1000.                      $Unit_temp_O6 = nfprt
 1000.                      $_IOitem_P2(0) = lugf
 1000.                      $_IOitem_P2(1) = nspecfields
 1000.                      _fwrite( _clist( 0, 0, 3, $Unit_temp_O6, Null_Arg, Null_Arg, t$81,  _substr(t$80,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( $_IOitem_P2(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1001.                       _substr(t$543,1,15) = '**(Deposit1D)**'
 1001.                      call _stop(  _substr(t$543,1,15) )
 1001.                   endif
 1001.                endif
 1001.             else
  921.                $Unit_temp_O7 = nfprt
  921.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O7, Null_Arg, Null_Arg, t$57,  _substr(t$56,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  922.                $Unit_temp_O8 = nfprt
  922.                $_IOitem_P3(0) = lusf
  922.                $_IOitem_P3(1) = nspecfields
  922.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O8, Null_Arg, Null_Arg, t$59,  _substr(t$58,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ), _iotype( $_IOitem_P3(:( 0, 1, 1 )), 0x2000200000000L ) ) )
  923.                 _substr(t$504,1,15) = '**(Deposit1D)**'
  923.                call _stop(  _substr(t$504,1,15) )
  923.             endif
  923.          else
  909.             $Unit_temp_O9 = nfprt
  909.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O9, Null_Arg, Null_Arg, t$55,  _substr(t$54,1,40), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  910.              _substr(t$503,1,15) = '**(Deposit1D)**'
  910.             call _stop(  _substr(t$503,1,15) )
  910.          endif
  849.       else if ( loc( arggrid ) /= 0 ) then
  850.          $lugf_S0 = 1 + usedgridfields
  851.          usedgridfields = 1 + usedgridfields
  852.          (surfgrid%base_addr)($lugf_S0, 0) = .true.
  853.          (prevgrid%base_addr)($lugf_S0, 0) = -1
  854.          (grid3d%base_addr)($lugf_S0, 0)%p%header%assoc = 0
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%header%a_contig = arggrid%header%a_contig
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%header%assoc = 1
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%header%d_type_idx = 13
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%dim_1%LB = 1
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%dim_1%EX = max( 0, arggrid%dim_1%EX )
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%dim_1%SM = arggrid%dim_1%SM
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%dim_2%LB = 1
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%dim_2%EX = max( 0, arggrid%dim_2%EX )
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%dim_2%SM = arggrid%dim_2%SM
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%header%ptr_alloc = arggrid%header%ptr_alloc
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%header%orig_base = arggrid%header%orig_base
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%header%orig_size = arggrid%header%orig_size
  855.          (grid2d%base_addr)($lugf_S0, 0)%p%base_addr = loc( (arggrid%base_addr)(1, 1, 0) )
  856.          (fieldfordellam%base_addr)($lugf_S0, 0) = .false.
  857.          (prevvertdellamsource%base_addr)($lugf_S0, 0) = -1
  858.          if ( loc( argdellam ) /= 0 ) then
  859.             $ludlf_S1 = 1 + useddellamfields
  860.             useddellamfields = 1 + useddellamfields
  861.             (surfgrid%base_addr)($ludlf_S1, 0) = .true.
  862.             (prevgrid%base_addr)($ludlf_S1, 0) = -1
  863.             (grid3d%base_addr)($ludlf_S1, 0)%p%header%assoc = 0
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%header%a_contig = argdellam%header%a_contig
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%header%assoc = 1
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%header%d_type_idx = 13
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%dim_1%LB = 1
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%dim_1%SM = argdellam%dim_1%SM
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%dim_2%LB = 1
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%dim_2%SM = argdellam%dim_2%SM
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%header%orig_base = argdellam%header%orig_base
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%header%orig_size = argdellam%header%orig_size
  864.             (grid2d%base_addr)($ludlf_S1, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  865.             (fieldfordellam%base_addr)($lugf_S0, 0) = .false.
  866.             (prevvertdellamsource%base_addr)($lugf_S0, 0) = -1
  866.          endif
  866.       else if ( loc( argdellam ) /= 0 ) then
  869.          $lugf_S2 = 1 + usedgridfields
  870.          usedgridfields = 1 + usedgridfields
  871.          (surfgrid%base_addr)($lugf_S2, 0) = .true.
  872.          (prevgrid%base_addr)($lugf_S2, 0) = -1
  873.          (grid3d%base_addr)($lugf_S2, 0)%p%header%assoc = 0
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%header%a_contig = argdellam%header%a_contig
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%header%assoc = 1
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%header%d_type_idx = 13
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%dim_1%LB = 1
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%dim_1%SM = argdellam%dim_1%SM
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%dim_2%LB = 1
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%dim_2%SM = argdellam%dim_2%SM
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%header%orig_base = argdellam%header%orig_base
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%header%orig_size = argdellam%header%orig_size
  874.          (grid2d%base_addr)($lugf_S2, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 0) )
  875.          (fieldfordellam%base_addr)($lugf_S2, 0) = .false.
  876.          (prevvertdellamsource%base_addr)($lugf_S2, 0) = -1
  876.       else
  878.          $Unit_temp_O0 = nfprt
  878.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$53,  _substr(t$52,1,40), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit1D)**', 0x800600000000L ) ) )
  879.           _substr(t$502,1,15) = '**(Deposit1D)**'
  879.          call _stop(  _substr(t$502,1,15) )
  879.       endif
 1015.       return
 1015.       end
 1015.       
 1019.       
 1019.       subroutine deposit2d( argspec, arggrid, argdellam )
 1019.       argspec%dim_1%LB = 1
 1019.       argspec%dim_2%LB = 1
 1019.       if ( loc( arggrid ) /= 0 ) then
 1019.          arggrid%dim_1%LB = 1
 1019.          arggrid%dim_2%LB = 1
 1019.          arggrid%dim_3%LB = 1
 1019.       endif
 1019.       if ( loc( argdellam ) /= 0 ) then
 1019.          argdellam%dim_1%LB = 1
 1019.          argdellam%dim_2%LB = 1
 1019.          argdellam%dim_3%LB = 1
 1019.       endif
 1045.       lusf = 1 + usedspecfields
 1046.       usedspecfields = 1 + usedspecfields
 1047.       $pusv_S0 = lastusedspecvert
 1049.       lastusedspecvert = lastusedspecvert + kmaxloc
 1050.       if ( loc( arggrid ) /= 0 ) then
 1051.          lugf = 1 + usedgridfields
 1052.          usedgridfields = 1 + usedgridfields
 1053.          $pugv_S1 = lastusedgridvert
 1055.          lastusedgridvert = kmaxloc + lastusedgridvert
 1056.          if ( loc( argdellam ) /= 0 ) then
 1057.             ludlf = 1 + useddellamfields
 1058.             useddellamfields = 1 + useddellamfields
 1059.             pudlv = lastuseddellamvert
 1061.             lastuseddellamvert = kmaxloc + lastuseddellamvert
 1061.          endif
 1061.          goto 10
 1061.       else if ( loc( argdellam ) /= 0 ) then
 1064.          lugf = 1 + usedgridfields
 1065.          usedgridfields = 1 + usedgridfields
 1066.          $pugv_S1 = lastusedgridvert
 1068.          lastusedgridvert = kmaxloc + lastusedgridvert
 1068.    10    continue
 1076.          if ( lusf <= nspecfields ) then
 1077.             (surfspec%base_addr)(lusf, 0) = .false.
 1078.             (prevspec%base_addr)(lusf, 0) = $pusv_S0
 1079.             (spec1d%base_addr)(lusf, 0)%p%header%assoc = 0
 1080.             (spec2d%base_addr)(lusf, 0)%p%header%a_contig = argspec%header%a_contig
 1080.             (spec2d%base_addr)(lusf, 0)%p%header%assoc = 1
 1080.             (spec2d%base_addr)(lusf, 0)%p%header%d_type_idx = 13
 1080.             (spec2d%base_addr)(lusf, 0)%p%dim_1%LB = 1
 1080.             (spec2d%base_addr)(lusf, 0)%p%dim_1%EX = max( 0, argspec%dim_1%EX )
 1080.             (spec2d%base_addr)(lusf, 0)%p%dim_1%SM = argspec%dim_1%SM
 1080.             (spec2d%base_addr)(lusf, 0)%p%dim_2%LB = 1
 1080.             (spec2d%base_addr)(lusf, 0)%p%dim_2%EX = max( 0, argspec%dim_2%EX )
 1080.             (spec2d%base_addr)(lusf, 0)%p%dim_2%SM = argspec%dim_2%SM
 1080.             (spec2d%base_addr)(lusf, 0)%p%header%ptr_alloc = argspec%header%ptr_alloc
 1080.             (spec2d%base_addr)(lusf, 0)%p%header%orig_base = argspec%header%orig_base
 1080.             (spec2d%base_addr)(lusf, 0)%p%header%orig_size = argspec%header%orig_size
 1080.             (spec2d%base_addr)(lusf, 0)%p%base_addr = loc( (argspec%base_addr)(1, 1, 0) )
 1092.             if ( loc( arggrid ) /= 0 ) then
 1097.                if ( lugf <= nfull_s + nsurf_s ) then
 1098.                   (surfgrid%base_addr)(lugf, 0) = .false.
 1099.                   (prevgrid%base_addr)(lugf, 0) = $pugv_S1
 1100.                   (grid2d%base_addr)(lugf, 0)%p%header%assoc = 0
 1101.                   (grid3d%base_addr)(lugf, 0)%p%header%a_contig = arggrid%header%a_contig
 1101.                   (grid3d%base_addr)(lugf, 0)%p%header%assoc = 1
 1101.                   (grid3d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%LB = 1
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, arggrid%dim_1%EX )
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%SM = arggrid%dim_1%SM
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%LB = 1
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, arggrid%dim_2%EX )
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%SM = arggrid%dim_2%SM
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%LB = 1
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%EX = max( 0, arggrid%dim_3%EX )
 1101.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%SM = arggrid%dim_3%SM
 1101.                   (grid3d%base_addr)(lugf, 0)%p%header%ptr_alloc = arggrid%header%ptr_alloc
 1101.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_base = arggrid%header%orig_base
 1101.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_size = arggrid%header%orig_size
 1101.                   (grid3d%base_addr)(lugf, 0)%p%base_addr = loc( (arggrid%base_addr)(1, 1, 1, 0) )
 1102.                   (fieldfordellam%base_addr)(lugf, 0) = .false.
 1103.                   (prevvertdellamsource%base_addr)(lugf, 0) = -1
 1117.                   if ( loc( argdellam ) /= 0 ) then
 1123.                      willdellam = .true.
 1124.                      if ( ludlf <= ngridfields ) then
 1125.                         (surfgrid%base_addr)(ludlf, 0) = .false.
 1126.                         (prevgrid%base_addr)(ludlf, 0) = pudlv
 1127.                         (grid2d%base_addr)(ludlf, 0)%p%header%assoc = 0
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%header%a_contig = argdellam%header%a_contig
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%header%assoc = 1
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%header%d_type_idx = 13
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_1%LB = 1
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_1%SM = argdellam%dim_1%SM
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_2%LB = 1
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_2%SM = argdellam%dim_2%SM
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_3%LB = 1
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_3%EX = max( 0, argdellam%dim_3%EX )
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%dim_3%SM = argdellam%dim_3%SM
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%header%orig_base = argdellam%header%orig_base
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%header%orig_size = argdellam%header%orig_size
 1128.                         (grid3d%base_addr)(ludlf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 1, 0) )
 1129.                         (fieldfordellam%base_addr)(ludlf, 0) = .true.
 1130.                         (prevvertdellamsource%base_addr)(ludlf, 0) = (prevgrid%base_addr)(lugf, 0)
 1130.                      else
 1132.                         $Unit_temp_O0 = nfprt
 1132.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$103,  _substr(t$102,1,45), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1133.                         $Unit_temp_O1 = nfprt
 1133.                         $_IOitem_P0(0) = ludlf
 1133.                         $_IOitem_P0(1) = ngridfields
 1133.                         _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$105,  _substr(t$104,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1134.                          _substr(t$583,1,15) = '**(Deposit2D)**'
 1134.                         call _stop(  _substr(t$583,1,15) )
 1134.                      endif
 1134.                   endif
 1134.                else
 1105.                   $Unit_temp_O2 = nfprt
 1105.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$95,  _substr(t$94,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1106.                   $Unit_temp_O3 = nfprt
 1106.                   $_IOitem_P1(0) = lugf
 1106.                   $_IOitem_P1(1) = nspecfields
 1106.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$97,  _substr(t$96,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( $_IOitem_P1(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1107.                    _substr(t$570,1,15) = '**(Deposit2D)**'
 1107.                   call _stop(  _substr(t$570,1,15) )
 1107.                endif
 1107.             else if ( loc( argdellam ) /= 0 ) then
 1151.                willdellam = .true.
 1152.                if ( lugf <= nfull_s + nsurf_s ) then
 1153.                   (surfgrid%base_addr)(lugf, 0) = .false.
 1154.                   (prevgrid%base_addr)(lugf, 0) = $pugv_S1
 1155.                   (grid2d%base_addr)(lugf, 0)%p%header%assoc = 0
 1156.                   (grid3d%base_addr)(lugf, 0)%p%header%a_contig = argdellam%header%a_contig
 1156.                   (grid3d%base_addr)(lugf, 0)%p%header%assoc = 1
 1156.                   (grid3d%base_addr)(lugf, 0)%p%header%d_type_idx = 13
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%LB = 1
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%EX = max( 0, argdellam%dim_1%EX )
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_1%SM = argdellam%dim_1%SM
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%LB = 1
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%EX = max( 0, argdellam%dim_2%EX )
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_2%SM = argdellam%dim_2%SM
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%LB = 1
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%EX = max( 0, argdellam%dim_3%EX )
 1156.                   (grid3d%base_addr)(lugf, 0)%p%dim_3%SM = argdellam%dim_3%SM
 1156.                   (grid3d%base_addr)(lugf, 0)%p%header%ptr_alloc = argdellam%header%ptr_alloc
 1156.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_base = argdellam%header%orig_base
 1156.                   (grid3d%base_addr)(lugf, 0)%p%header%orig_size = argdellam%header%orig_size
 1156.                   (grid3d%base_addr)(lugf, 0)%p%base_addr = loc( (argdellam%base_addr)(1, 1, 1, 0) )
 1157.                   (fieldfordellam%base_addr)(lugf, 0) = .true.
 1158.                   (prevvertdellamsource%base_addr)(lugf, 0) = $pugv_S1
 1158.                else
 1160.                   $Unit_temp_O4 = nfprt
 1160.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$111,  _substr(t$110,1,28), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1161.                   $Unit_temp_O5 = nfprt
 1161.                   $_IOitem_P2(0) = lugf
 1161.                   $_IOitem_P2(1) = nspecfields
 1161.                   _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$113,  _substr(t$112,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( $_IOitem_P2(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1162.                    _substr(t$596,1,15) = '**(Deposit2D)**'
 1162.                   call _stop(  _substr(t$596,1,15) )
 1162.                endif
 1162.             endif
 1162.          else
 1082.             $Unit_temp_O6 = nfprt
 1082.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O6, Null_Arg, Null_Arg, t$89,  _substr(t$88,1,32), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1083.             $Unit_temp_O7 = nfprt
 1083.             $_IOitem_P3(0) = lusf
 1083.             $_IOitem_P3(1) = nspecfields
 1083.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O7, Null_Arg, Null_Arg, t$91,  _substr(t$90,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ), _iotype( $_IOitem_P3(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1084.              _substr(t$557,1,15) = '**(Deposit2D)**'
 1084.             call _stop(  _substr(t$557,1,15) )
 1084.          endif
 1084.       else
 1070.          $Unit_temp_O8 = nfprt
 1070.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O8, Null_Arg, Null_Arg, t$87,  _substr(t$86,1,40), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Deposit2D)**', 0x800600000000L ) ) )
 1071.           _substr(t$556,1,15) = '**(Deposit2D)**'
 1071.          call _stop(  _substr(t$556,1,15) )
 1071.       endif
 1172.       return
 1172.       end
 1172.       
 1177.       
 1177.       subroutine depdlg1d( argspec, arggrid, argdellam )
 1177.       argspec%dim_1%LB = 1
 1177.       arggrid%dim_1%LB = 1
 1177.       arggrid%dim_2%LB = 1
 1177.       argdellam%dim_1%LB = 1
 1177.       argdellam%dim_2%LB = 1
 1181.       t$609 = argspec
 1181.       t$610 = arggrid
 1181.       t$611 = argdellam
 1181.       call deposit1d( t$609, t$610, t$611 )
 1182.       return
 1182.       end
 1182.       
 1188.       
 1188.       subroutine depdlg2d( argspec, arggrid, argdellam )
 1188.       argspec%dim_1%LB = 1
 1188.       argspec%dim_2%LB = 1
 1188.       arggrid%dim_1%LB = 1
 1188.       arggrid%dim_2%LB = 1
 1188.       arggrid%dim_3%LB = 1
 1188.       argdellam%dim_1%LB = 1
 1188.       argdellam%dim_2%LB = 1
 1188.       argdellam%dim_3%LB = 1
 1192.       t$612 = argspec
 1192.       t$613 = arggrid
 1192.       t$614 = argdellam
 1192.       call deposit2d( t$612, t$613, t$614 )
 1193.       return
 1193.       end
 1193.       
 1199.       
 1199.       subroutine depdl1d( argspec, argdellam )
 1199.       argspec%dim_1%LB = 1
 1199.       argdellam%dim_1%LB = 1
 1199.       argdellam%dim_2%LB = 1
 1202.       t$615 = argspec
 1202.       t$616 = argdellam
 1202.       call deposit1d( t$615, 0, t$616 )
 1203.       return
 1203.       end
 1203.       
 1209.       
 1209.       subroutine depdl2d( argspec, argdellam )
 1209.       argspec%dim_1%LB = 1
 1209.       argspec%dim_2%LB = 1
 1209.       argdellam%dim_1%LB = 1
 1209.       argdellam%dim_2%LB = 1
 1209.       argdellam%dim_3%LB = 1
 1212.       t$617 = argspec
 1212.       t$618 = argdellam
 1212.       call deposit2d( t$617, 0, t$618 )
 1213.       return
 1213.       end
 1213.       
 1315.       
 1315.       subroutine dospectogrid
  438.       if ( t$197 == 0 ) then
  438.          t$218(1) = 3
  438.          t$219(1) = 0
  438.          t$220(1) = 2
  438.          t$215(1) = int( loc( t$196 ), 8 )
  438.          t$216(1) = 0
  438.          t$217(1) = int( loc( t$213 ), 8 )
  438.          t$197 = __get_dynamic_type( 3, t$215(1), t$218(1), 1, t$216(1), t$217(1), t$219(1), t$220(1) )
  438.       endif
  438.       p%header%el_len = 1344
  438.       p%header%assoc = 0
  438.       p%header%ptr_alloc = 0
  438.       p%header%p_or_a = 1
  438.       p%header%a_contig = 0
  438.       p%header%dv_versn = 2
  438.       p%header%dv_smunit = 64
  438.       p%header%d_type = 0
  438.       p%header%n_params = 0
  438.       p%header%pad_codim = 0
  438.       p%header%n_codim = 0
  438.       p%header%pad_dim = 0
  438.       p%header%n_dim = 0
  438.       p%header%d_type_idx = t$197
  438.       p%header%typ_code = 8
  438.       p%header%orig_base = 0
  438.       p%header%orig_size = 0
 1248.        _substr(t$619,1,12) = 'DoSpecToGrid'
 1248.       ipa$6 = 1
 1248.       call threaddecomp( ipa$6, mymnmax, mnfirst, mnlast,  _substr(t$619,1,12) )
 1249.        _substr(t$620,1,12) = 'DoSpecToGrid'
 1249.       ipa$8 = 1
 1249.       call threaddecomp( ipa$8, mymnextmax, mnextfirst, mnextlast,  _substr(t$620,1,12) )
 1250.        _substr(t$621,1,12) = 'DoSpecToGrid'
 1250.       ipa$10 = 1
 1250.       call threaddecomp( ipa$10, mymmax, mfirst, mlast,  _substr(t$621,1,12) )
 1251.        _substr(t$622,1,12) = 'DoSpecToGrid'
 1251.       ipa$12 = 1
 1251.       call threaddecomp( ipa$12, jbmax, jbfirst, jblast,  _substr(t$622,1,12) )
 1252.        _substr(t$623,1,12) = 'DoSpecToGrid'
 1252.       ipa$14 = 1
 1252.       call threaddecomp( ipa$14, dip1, ifirst, ilast,  _substr(t$623,1,12) )
 1255.       if ( nfull_g > 0 ) then
 1248.          goto 10
 1255.       else if ( havesurf ) then
 1255.    10    continue
 1257.          if ( ilast + -ifirst >= 0 ) then
 1258.             if ( dvdlj > 0 ) then
 1259.                $SC_four_I17 = four%dim_1%EX
 1259.                $SC_four_I18 = four%dim_1%LB
 1259.                $SC_four_I20 = four%dim_2%SM
 1259.                $SC_four_I19 = four%dim_2%EX
 1259.                $SC_four_I21 = four%dim_2%LB
 1257.                $I_L1257_86 = 0
 1257.                do
 1258.                   $I_L1258_76 = 0
 1258. !dir$ ivdep
 1258.                   do
 1259.                      (four%base_addr)(1 + $I_L1258_76, ifirst + $I_L1257_86, 0) = 0.0
 1260.                      $I_L1258_76 = 1 + $I_L1258_76
 1258.                      if ( $I_L1258_76 >= dvdlj ) exit
 1258.                   enddo
 1261.                   $I_L1257_86 = 1 + $I_L1257_86
 1260.                   if ( $I_L1257_86 >= ilast + -ifirst + 1 ) exit
 1260.                enddo
 1260.             endif
 1260.          endif
 1265.          call depositspec( mnfirst, mnlast, mnextfirst, mnextlast, mfirst, mlast )
 1268.          _mt_barrier( 1, _mt_rw_list(...) )
 1270.          call spectofour
 1274.          if ( willdellam ) then
 1275.              _substr(t$631,1,12) = 'DoSpecToGrid'
 1275.             ipa$30 = 1
 1275.             call threaddecomp( ipa$30, mmax, mfirst, mlast,  _substr(t$631,1,12) )
 1276.             call dellam( mfirst, mlast )
 1276.          endif
 1280.          _mt_barrier( 2, _mt_rw_list(...) )
 1282.          $t_S3 = nblockfft
 1282.          if ( nblockfft > 0 ) then
 1282.             $I_L1282_90 = 0
 1282.             do
 1283.                p%header%a_contig = 0
 1283.                p%header%assoc = 1
 1283.                p%header%d_type_idx = t$197
 1283.                p%header%ptr_alloc = blockfft%header%ptr_alloc
 1283.                p%header%orig_base = blockfft%header%orig_base
 1283.                p%header%orig_size = blockfft%header%orig_size
 1283.                p%base_addr = loc( (blockfft%base_addr)(1 + $I_L1282_90, 0) )
 1284.                first = -nvertgrid + nvertgrid * (blockfft%base_addr)(1 + $I_L1282_90, 0)%firstlat + 1
 1285.                last = nvertgrid * (blockfft%base_addr)(1 + $I_L1282_90, 0)%lastlat
 1286.                 _substr(t$635,1,12) = 'DoSpecToGrid'
 1286.                call threaddecomp( first, last, fftfirst, fftlast,  _substr(t$635,1,12) )
 1287.                fftsize = fftlast + -fftfirst + 1
 1288.                if ( fftlast + -fftfirst >= 0 ) then
 1289.                   if ( tamblock == 0 ) then
 1291.                      t$637 = 0
 1291.                      t$640 = 0
 1291.                      if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1291. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1291.                         t$636 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1291.                      else
 1291.                         t$637 = (p%base_addr)(0)%trigs%dim_1%EX
 1291.                         t$640 = int( _alloc( max( 0, 8 * max( 0, t$637 ) ) ), 8 )
 1291.                         $F_A33 = t$637
 1291.                         if ( t$637 > 0 ) then
 1291.                            $SCA_p_I5 = (p%base_addr)(0)%trigs%dim_1%SM
 1291.                            $SCA_p_I6 = (p%base_addr)(0)%trigs%dim_1%LB
 1291.                            $SCA_p_I7 = (p%base_addr)(0)%trigs%dim_1%EX
 1291.                            $I_L1291_78 = 0
 1291. !dir$ ivdep
 1291.                            do
 1291.                               t$639(1 + $I_L1291_78) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I6 + $I_L1291_78, 0)
 1291.                               $I_L1291_78 = 1 + $I_L1291_78
 1291.                               if ( $I_L1291_78 >= $F_A33 ) exit
 1291.                            enddo
 1291.                         endif
 1291. !dir$ suppress t$639
 1291.                         t$636 = loc( t$639 )
 1291.                      endif
 1291.                      t$642 = 0
 1291.                      t$645 = 0
 1291.                      if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1291. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1291.                         t$641 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1291.                      else
 1291.                         t$642 = (p%base_addr)(0)%factors%dim_1%EX
 1291.                         t$645 = int( _alloc( max( 0, 4 * max( 0, t$642 ) ) ), 8 )
 1291.                         $F_A34 = t$642
 1291.                         if ( t$642 > 0 ) then
 1291.                            $SCA_p_I8 = (p%base_addr)(0)%factors%dim_1%SM
 1291.                            $SCA_p_I9 = (p%base_addr)(0)%factors%dim_1%LB
 1291.                            $SCA_p_I10 = (p%base_addr)(0)%factors%dim_1%EX
 1291.                            $I_L1291_80 = 0
 1291. !dir$ ivdep
 1291.                            do
 1291.                               t$644(1 + $I_L1291_80) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I9 + $I_L1291_80, 0)
 1291.                               $I_L1291_80 = 1 + $I_L1291_80
 1291.                               if ( $I_L1291_80 >= $F_A34 ) exit
 1291.                            enddo
 1291.                         endif
 1291. !dir$ suppress t$644
 1291.                         t$641 = loc( t$644 )
 1291.                      endif
 1290.                      call invffttrans( (four%base_addr)(fftfirst, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, fftsize, t$636, (p%base_addr)(0)%ntrigs, t$641, (p%base_addr)(0)%nfactors )
 1291.                      if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1291.                         _free( t$645 )
 1291.                      endif
 1291.                      if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1291.                         _free( t$640 )
 1291.                      endif
 1291.                   else
 1294.                      $Trips01_N3 = cvmg( 0x7fffffffffffffffL, ( fftlast + tamblock + -fftfirst ) / tamblock, tamblock < 0 )
 1297.                      $SC_four_I17 = four%dim_1%EX
 1297.                      $SC_four_I18 = four%dim_1%LB
 1297.                      $SC_four_I20 = four%dim_2%SM
 1297.                      $SC_four_I19 = four%dim_2%EX
 1297.                      $SC_four_I21 = four%dim_2%LB
 1294.                      $I_firstblock_88 = 0
 1294.                      do
 1296.                         sizeblock = ( min( fftlast, ( fftfirst + tamblock + tamblock * $I_firstblock_88 + -1 ) ) + -fftfirst + -( tamblock * $I_firstblock_88 ) + 1 )
 1298.                         t$647 = 0
 1298.                         t$650 = 0
 1298.                         if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1298. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1298.                            t$646 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1298.                         else
 1298.                            t$647 = (p%base_addr)(0)%trigs%dim_1%EX
 1298.                            t$650 = int( _alloc( max( 0, 8 * max( 0, t$647 ) ) ), 8 )
 1298.                            $F_A35 = t$647
 1298.                            if ( t$647 > 0 ) then
 1298.                               $SCA_p_I11 = (p%base_addr)(0)%trigs%dim_1%SM
 1298.                               $SCA_p_I12 = (p%base_addr)(0)%trigs%dim_1%LB
 1298.                               $SCA_p_I13 = (p%base_addr)(0)%trigs%dim_1%EX
 1298.                               $I_L1298_82 = 0
 1298. !dir$ ivdep
 1298.                               do
 1298.                                  t$649(1 + $I_L1298_82) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I12 + $I_L1298_82, 0)
 1298.                                  $I_L1298_82 = 1 + $I_L1298_82
 1298.                                  if ( $I_L1298_82 >= $F_A35 ) exit
 1298.                               enddo
 1298.                            endif
 1298. !dir$ suppress t$649
 1298.                            t$646 = loc( t$649 )
 1298.                         endif
 1298.                         t$652 = 0
 1298.                         t$655 = 0
 1298.                         if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1298. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1298.                            t$651 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1298.                         else
 1298.                            t$652 = (p%base_addr)(0)%factors%dim_1%EX
 1298.                            t$655 = int( _alloc( max( 0, 4 * max( 0, t$652 ) ) ), 8 )
 1298.                            $F_A36 = t$652
 1298.                            if ( t$652 > 0 ) then
 1298.                               $SCA_p_I14 = (p%base_addr)(0)%factors%dim_1%SM
 1298.                               $SCA_p_I15 = (p%base_addr)(0)%factors%dim_1%LB
 1298.                               $SCA_p_I16 = (p%base_addr)(0)%factors%dim_1%EX
 1298.                               $I_L1298_84 = 0
 1298. !dir$ ivdep
 1298.                               do
 1298.                                  t$654(1 + $I_L1298_84) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I15 + $I_L1298_84, 0)
 1298.                                  $I_L1298_84 = 1 + $I_L1298_84
 1298.                                  if ( $I_L1298_84 >= $F_A36 ) exit
 1298.                               enddo
 1298.                            endif
 1298. !dir$ suppress t$654
 1298.                            t$651 = loc( t$654 )
 1298.                         endif
 1297.                         call invffttrans( (four%base_addr)(fftfirst + tamblock * $I_firstblock_88, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, sizeblock, t$646, (p%base_addr)(0)%ntrigs, t$651, (p%base_addr)(0)%nfactors )
 1298.                         if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1298.                            _free( t$655 )
 1298.                         endif
 1298.                         if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1298.                            _free( t$650 )
 1298.                         endif
 1300.                         $I_firstblock_88 = 1 + $I_firstblock_88
 1298.                         if ( $I_firstblock_88 >= $Trips01_N3 ) exit
 1298.                      enddo
 1298.                   endif
 1298.                endif
 1306.                $I_L1282_90 = 1 + $I_L1282_90
 1306.                if ( $I_L1282_90 >= $t_S3 ) exit
 1306.             enddo
 1306.          endif
 1306.       endif
 1309.       _mt_barrier( 3, _mt_rw_list(...) )
 1313.       call withdrawgrid
 1315.       return
 1315.       end
 1315.       
 1333.       
 1333.       subroutine depositspec( mnfirst, mnlast, mnextfirst, mnextlast, mfirst, mlast )
 1334.       s1%dim_1%LB = 1
 1334.       s1%dim_1%EX = 0
 1334.       s1%dim_1%SM = 1
 1322.       s2%dim_1%LB = 1
 1322.       s2%dim_1%EX = 0
 1322.       s2%dim_1%SM = 1
 1322.       s2%dim_2%LB = 1
 1322.       s2%dim_2%EX = 0
 1322.       s2%dim_2%SM = 1
 1336.       if ( nspecfields > 0 ) then
 1361.          $SC_spec2d_I48 = spec2d%dim_1%EX
 1361.          $SC_spec2d_I49 = spec2d%dim_1%LB
 1355.          $SC_lmnzero_I46 = lmnzero%dim_1%EX
 1355.          $SC_lmnzero_I47 = lmnzero%dim_1%LB
 1350.          $SC_lmnmap_I44 = lmnmap%dim_1%EX
 1350.          $SC_lmnmap_I45 = lmnmap%dim_1%LB
 1344.          $SC_spec_I37 = spec%dim_1%EX
 1344.          $SC_spec_I38 = spec%dim_1%LB
 1344.          $SC_lmnextmap_I39 = lmnextmap%dim_1%EX
 1344.          $SC_lmnextmap_I40 = lmnextmap%dim_1%LB
 1344.          $SC_spec_I42 = spec%dim_2%SM
 1344.          $SC_spec_I41 = spec%dim_2%EX
 1344.          $SC_spec_I43 = spec%dim_2%LB
 1340.          $SC_prevspec_I32 = prevspec%dim_1%EX
 1340.          $SC_prevspec_I33 = prevspec%dim_1%LB
 1339.          $SC_spec1d_I30 = spec1d%dim_1%EX
 1339.          $SC_spec1d_I31 = spec1d%dim_1%LB
 1338.          $SC_surfspec_I28 = surfspec%dim_1%EX
 1338.          $SC_surfspec_I29 = surfspec%dim_1%LB
 1336.          $I_L1336_204 = 0
 1336.          do
 1338.             if ( (surfspec%base_addr)(1 + $I_L1336_204, 0) ) then
 1339.                s1 = (spec1d%base_addr)(1 + $I_L1336_204, 0)%p
 1340.                $lastv_S2 = 1 + (prevspec%base_addr)(1 + $I_L1336_204, 0)
 1341.                if ( -s1%dim_1%EX + 2 * mymnextmax == 0 ) then
 1343.                   imn = mnextfirst
 1343.                   if ( mnextlast + -mnextfirst >= 0 ) then
 1344.                      $SC_s1_I35 = s1%dim_1%SM
 1344.                      $SC_s1_I36 = s1%dim_1%LB
 1344.                      $SC_s1_I34 = s1%dim_1%EX
 1343.                      if ( nvertspec == 0 ) then
 1343.                         $I_L1343_178 = 0
 1343.                         do
 1344.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1343_178, 0), $lastv_S2, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1343_178 + -1, 0)
 1345.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1343_178, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1343_178, 0)
 1346.                            $I_L1343_178 = 1 + $I_L1343_178
 1343.                            if ( $I_L1343_178 >= mnextlast + -mnextfirst + 1 ) exit
 1343.                         enddo
 1343.                      else
 1343.                         $I_L1343_178 = 0
 1343. !dir$ ivdep safevl = 4
 1343.                         do
 1344.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1343_178, 0), $lastv_S2, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1343_178 + -1, 0)
 1345.                            (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1343_178, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnextfirst + 2 * $I_L1343_178, 0)
 1346.                            $I_L1343_178 = 1 + $I_L1343_178
 1343.                            if ( $I_L1343_178 >= mnextlast + -mnextfirst + 1 ) exit
 1343.                         enddo
 1343.                      endif
 1346.                      imn = 1 + mnextlast
 1346.                   endif
 1346.                else
 1349.                   if ( mnlast + -mnfirst >= 0 ) then
 1350.                      $SC_s1_I35 = s1%dim_1%SM
 1350.                      $SC_s1_I36 = s1%dim_1%LB
 1350.                      $SC_s1_I34 = s1%dim_1%EX
 1349.                      if ( nvertspec == 0 ) then
 1349.                         $I_L1349_180 = 0
 1349.                         do
 1350.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1349_180, 0), $lastv_S2, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1349_180 + -1, 0)
 1351.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1349_180, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1349_180, 0)
 1352.                            $I_L1349_180 = 1 + $I_L1349_180
 1349.                            if ( $I_L1349_180 >= mnlast + -mnfirst + 1 ) exit
 1349.                         enddo
 1349.                      else
 1349.                         $I_L1349_180 = 0
 1349. !dir$ ivdep safevl = 4
 1349.                         do
 1350.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1349_180, 0), $lastv_S2, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1349_180 + -1, 0)
 1351.                            (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1349_180, 0), nvertspec + $lastv_S2, 0) = (s1%base_addr)(2 * mnfirst + 2 * $I_L1349_180, 0)
 1352.                            $I_L1349_180 = 1 + $I_L1349_180
 1349.                            if ( $I_L1349_180 >= mnlast + -mnfirst + 1 ) exit
 1349.                         enddo
 1349.                      endif
 1349.                   endif
 1354.                   imn = mfirst
 1354.                   if ( mlast + -mfirst >= 0 ) then
 1354.                      $I_L1354_182 = 0
 1354. !dir$ ivdep
 1354.                      do
 1355.                         (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1354_182, 0), $lastv_S2, 0) = 0.0
 1356.                         (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1354_182, 0), nvertspec + $lastv_S2, 0) = 0.0
 1357.                         $I_L1354_182 = 1 + $I_L1354_182
 1354.                         if ( $I_L1354_182 >= mlast + -mfirst + 1 ) exit
 1354.                      enddo
 1357.                      imn = 1 + mlast
 1357.                   endif
 1357.                endif
 1357.             else
 1361.                s2 = (spec2d%base_addr)(1 + $I_L1336_204, 0)%p
 1362.                $lastv_S7 = (prevspec%base_addr)(1 + $I_L1336_204, 0)
 1363.                if ( -s2%dim_1%EX + 2 * mymnextmax == 0 ) then
 1364.                   iv = 1
 1364.                   if ( kmaxloc > 0 ) then
 1366.                      if ( mnextlast + -mnextfirst >= 0 ) then
 1367.                         $SC_s2_I51 = s2%dim_1%SM
 1367.                         $SC_s2_I52 = s2%dim_1%LB
 1367.                         $SC_s2_I54 = s2%dim_2%SM
 1367.                         $SC_s2_I53 = s2%dim_2%EX
 1367.                         $SC_s2_I55 = s2%dim_2%LB
 1367.                         $SC_s2_I50 = s2%dim_1%EX
 1364.                         $I_L1364_198 = 0
 1364.                         do
 1366.                            if ( nvertspec == 0 ) then
 1366.                               $I_L1366_188 = 0
 1366.                               do
 1367.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1366_188, 0), $lastv_S7 + $I_L1364_198 + 1, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1366_188 + -1, 1 + $I_L1364_198, 0)
 1368.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1366_188, 0), nvertspec + $lastv_S7 + $I_L1364_198 + 1, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1366_188, 1 + $I_L1364_198, 0)
 1369.                                  $I_L1366_188 = 1 + $I_L1366_188
 1366.                                  if ( $I_L1366_188 >= mnextlast + -mnextfirst + 1 ) exit
 1366.                               enddo
 1366.                            else
 1366.                               $I_L1366_188 = 0
 1366. !dir$ ivdep safevl = 4
 1366.                               do
 1367.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1366_188, 0), $lastv_S7 + $I_L1364_198 + 1, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1366_188 + -1, 1 + $I_L1364_198, 0)
 1368.                                  (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L1366_188, 0), nvertspec + $lastv_S7 + $I_L1364_198 + 1, 0) = (s2%base_addr)(2 * mnextfirst + 2 * $I_L1366_188, 1 + $I_L1364_198, 0)
 1369.                                  $I_L1366_188 = 1 + $I_L1366_188
 1366.                                  if ( $I_L1366_188 >= mnextlast + -mnextfirst + 1 ) exit
 1366.                               enddo
 1366.                            endif
 1370.                            $I_L1364_198 = 1 + $I_L1364_198
 1369.                            if ( $I_L1364_198 >= kmaxloc ) exit
 1369.                         enddo
 1369.                         imn = 1 + mnextlast
 1369.                      else
 1366.                         imn = mnextfirst
 1366.                      endif
 1370.                      iv = ( 1 + kmaxloc )
 1370.                   endif
 1370.                else
 1372.                   if ( kmaxloc > 0 ) then
 1374.                      if ( mnlast + -mnfirst >= 0 ) then
 1375.                         $SC_s2_I51 = s2%dim_1%SM
 1375.                         $SC_s2_I52 = s2%dim_1%LB
 1375.                         $SC_s2_I54 = s2%dim_2%SM
 1375.                         $SC_s2_I53 = s2%dim_2%EX
 1375.                         $SC_s2_I55 = s2%dim_2%LB
 1375.                         $SC_s2_I50 = s2%dim_1%EX
 1372.                         $I_L1372_194 = 0
 1372.                         do
 1374.                            if ( nvertspec == 0 ) then
 1374.                               $I_L1374_184 = 0
 1374.                               do
 1375.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1374_184, 0), $lastv_S7 + $I_L1372_194 + 1, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1374_184 + -1, 1 + $I_L1372_194, 0)
 1376.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1374_184, 0), nvertspec + $lastv_S7 + $I_L1372_194 + 1, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1374_184, 1 + $I_L1372_194, 0)
 1377.                                  $I_L1374_184 = 1 + $I_L1374_184
 1374.                                  if ( $I_L1374_184 >= mnlast + -mnfirst + 1 ) exit
 1374.                               enddo
 1374.                            else
 1374.                               $I_L1374_184 = 0
 1374. !dir$ ivdep safevl = 4
 1374.                               do
 1375.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1374_184, 0), $lastv_S7 + $I_L1372_194 + 1, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1374_184 + -1, 1 + $I_L1372_194, 0)
 1376.                                  (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L1374_184, 0), nvertspec + $lastv_S7 + $I_L1372_194 + 1, 0) = (s2%base_addr)(2 * mnfirst + 2 * $I_L1374_184, 1 + $I_L1372_194, 0)
 1377.                                  $I_L1374_184 = 1 + $I_L1374_184
 1374.                                  if ( $I_L1374_184 >= mnlast + -mnfirst + 1 ) exit
 1374.                               enddo
 1374.                            endif
 1378.                            $I_L1372_194 = 1 + $I_L1372_194
 1377.                            if ( $I_L1372_194 >= kmaxloc ) exit
 1377.                         enddo
 1377.                         imn = 1 + mnlast
 1377.                      else
 1374.                         imn = mnfirst
 1374.                      endif
 1374.                   endif
 1379.                   iv = 1
 1379.                   if ( kmaxloc > 0 ) then
 1381.                      if ( mlast + -mfirst >= 0 ) then
 1379.                         $I_L1379_196 = 0
 1379. !dir$ ivdep
 1379.                         do
 1381.                            $I_L1381_186 = 0
 1381.                            do
 1382.                               (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1381_186, 0), $lastv_S7 + $I_L1379_196 + 1, 0) = 0.0
 1383.                               (spec%base_addr)((lmnzero%base_addr)(mfirst + $I_L1381_186, 0), nvertspec + $lastv_S7 + $I_L1379_196 + 1, 0) = 0.0
 1384.                               $I_L1381_186 = 1 + $I_L1381_186
 1381.                               if ( $I_L1381_186 >= mlast + -mfirst + 1 ) exit
 1381.                            enddo
 1385.                            $I_L1379_196 = 1 + $I_L1379_196
 1384.                            if ( $I_L1379_196 >= kmaxloc ) exit
 1384.                         enddo
 1384.                         imn = 1 + mlast
 1384.                      else
 1381.                         imn = mfirst
 1381.                      endif
 1385.                      iv = ( 1 + kmaxloc )
 1385.                   endif
 1385.                endif
 1385.             endif
 1388.             $I_L1336_204 = 1 + $I_L1336_204
 1387.             if ( $I_L1336_204 >= nspecfields ) exit
 1387.          enddo
 1387.       endif
 1390.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 1391.       t$692 = 1 + mymnextmax
 1391.       t$693 = dlmn
 1391.       imn = 1 + mymnextmax
 1391.       if ( dlmn + -mymnextmax > 0 ) then
 1391.          t$694 = ( dlmn + -mymnextmax )
 1392.          $SC_spec_I37 = spec%dim_1%EX
 1392.          $SC_spec_I38 = spec%dim_1%LB
 1392.          $SC_spec_I42 = spec%dim_2%SM
 1392.          $SC_spec_I41 = spec%dim_2%EX
 1392.          $SC_spec_I43 = spec%dim_2%LB
 1391.          $I_L1391_200 = 0
 1391.          do
 1392.             $F_A33 = $SC_spec_I41
 1392.             if ( $SC_spec_I41 > 0 ) then
 1392.                $I_L1392_190 = 0
 1392. !dir$ ivdep
 1392.                do
 1392.                   (spec%base_addr)(mymnextmax + $I_L1391_200 + 1, $SC_spec_I43 + $I_L1392_190, 0) = 0.0
 1392.                   $I_L1392_190 = 1 + $I_L1392_190
 1392.                   if ( $I_L1392_190 >= $F_A33 ) exit
 1392.                enddo
 1392.             endif
 1393.             $I_L1391_200 = 1 + $I_L1391_200
 1391.             if ( $I_L1391_200 >= ( dlmn + -mymnextmax ) ) exit
 1391.          enddo
 1393.          t$695 = ( dlmn + -mymnextmax )
 1393.          imn = 1 + dlmn
 1393.       endif
 1394.       t$696 = 1 + 2 * nvertspec
 1394.       t$697 = dv
 1394.       iv = 1 + 2 * nvertspec
 1394.       if ( dv + -2 * nvertspec > 0 ) then
 1394.          t$698 = ( dv + -2 * nvertspec )
 1395.          $SC_spec_I37 = spec%dim_1%EX
 1395.          $SC_spec_I38 = spec%dim_1%LB
 1395.          $SC_spec_I42 = spec%dim_2%SM
 1395.          $SC_spec_I41 = spec%dim_2%EX
 1395.          $SC_spec_I43 = spec%dim_2%LB
 1394.          $I_L1394_202 = 0
 1394.          do
 1395.             $F_A34 = $SC_spec_I37
 1395.             if ( $SC_spec_I37 > 0 ) then
 1395.                $I_L1395_192 = 0
 1395. !dir$ ivdep
 1395.                do
 1395.                   (spec%base_addr)($SC_spec_I38 + $I_L1395_192, $I_L1394_202 + 2 * nvertspec + 1, 0) = 0.0
 1395.                   $I_L1395_192 = 1 + $I_L1395_192
 1395.                   if ( $I_L1395_192 >= $F_A34 ) exit
 1395.                enddo
 1395.             endif
 1396.             $I_L1394_202 = 1 + $I_L1394_202
 1394.             if ( $I_L1394_202 >= ( dv + -2 * nvertspec ) ) exit
 1394.          enddo
 1396.          t$699 = ( dv + -2 * nvertspec )
 1396.          iv = 1 + dv
 1396.       endif
 1397.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 1398.       return
 1398.       end
 1398.       
 1551.       
 1551.       subroutine spectofour
 1404.       t$118 = dv
 1404.       t$119 = djh
 1427.       t$222 = _zla( 0, dv )
 1404.       t$223 = _zla( 0, dv )
 1427.       t$224 = _zla( 0, djh )
 1404.       t$225 = _zla( 0, dv ) * _zla( 0, djh )
 1427.       t$228 = _zla( 0, dv ) * _zla( 0, djh ) * 8
 1428.       t$229 = _zla( 0, dv ) * _zla( 0, djh ) * 8
 1428.       t$231 = _zla( 0, dv ) * _zla( 0, djh ) * 16
 1404.       t$226 = int( _alloc( _zla( 0, dv ) * _zla( 0, djh ) * 16 ), 8 )
 1427.       t$227 = t$226
 1428.       t$230 = t$226 + _zla( 0, dv ) * _zla( 0, djh ) * 8
 1431.        _substr(t$700,1,10) = 'SpecToFour'
 1431.       ipa$123 = 1
 1431.       call threaddecomp( ipa$123, myjmax_f, jfirst, jlast,  _substr(t$700,1,10) )
 1432.       kdim = myjmax_f * nvertspec * mmaxlocal * 2
 1433.       ldim = nvertspec * jmaxlocal_f * mymmax * 2
 1434.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 1435.       mglob = 0
 1436.       if ( dimsendbuf < nvertspec * jmaxlocal_f * mymmax * maxnodes_four * 2 ) then
 1437.          dimsendbuf = nvertspec * jmaxlocal_f * mymmax * maxnodes_four * 2
 1438.          $_allo_P0(0) = 0x1000000000001L
 1438.          $_allo_P0(1) = loc( bufsend )
 1438.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1438.          bufsend%header%assoc = 0
 1439.          bufsend%header%a_contig = 1
 1439.          bufsend%dim_1%LB = 1
 1439.          bufsend%dim_1%EX = _zla( 0, ( nvertspec * jmaxlocal_f * mymmax * maxnodes_four * 2 ) )
 1439.          bufsend%dim_1%SM = 1
 1439.          $_allo_P1(0) = 0x1000000000001L
 1439.          $_allo_P1(1) = loc( bufsend )
 1439.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1439.       endif
 1441.       if ( dimrecbuf < myjmax_f * nvertspec * mmaxlocal * maxnodes_four * 2 ) then
 1442.          dimrecbuf = myjmax_f * nvertspec * mmaxlocal * maxnodes_four * 2
 1443.          $_allo_P2(0) = 0x1000000000001L
 1443.          $_allo_P2(1) = loc( bufrec )
 1443.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1443.          bufrec%header%assoc = 0
 1444.          bufrec%header%a_contig = 1
 1444.          bufrec%dim_1%LB = 1
 1444.          bufrec%dim_1%EX = _zla( 0, ( myjmax_f * nvertspec * mmaxlocal * maxnodes_four * 2 ) )
 1444.          bufrec%dim_1%SM = 1
 1444.          $_allo_P3(0) = 0x1000000000001L
 1444.          $_allo_P3(1) = loc( bufrec )
 1444.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1444.       endif
 1446.       $F_A33 = bufsend%dim_1%EX
 1446.       if ( bufsend%dim_1%EX > 0 ) then
 1446.          $SC_bufsend_I48 = bufsend%dim_1%LB
 1446.          $I_L1446_258 = 0
 1446. !dir$ ivdep
 1446.          do
 1446.             (bufsend%base_addr)($SC_bufsend_I48 + $I_L1446_258, 0) = 0.0
 1446.             $I_L1446_258 = 1 + $I_L1446_258
 1446.             if ( $I_L1446_258 >= $F_A33 ) exit
 1446.          enddo
 1446.       endif
 1447.       $F_A34 = bufrec%dim_1%EX
 1447.       if ( bufrec%dim_1%EX > 0 ) then
 1447.          $SC_bufrec_I49 = bufrec%dim_1%LB
 1447.          $I_L1447_260 = 0
 1447. !dir$ ivdep
 1447. !dir$ loop_info (automatic) cache_nt( bufrec )
 1447.          do
 1447.             (bufrec%base_addr)($SC_bufrec_I49 + $I_L1447_260, 0) = 0.0
 1447.             $I_L1447_260 = 1 + $I_L1447_260
 1447.             if ( $I_L1447_260 >= $F_A34 ) exit
 1447.          enddo
 1447.       endif
 1448.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 1462.       $SC_neven_I66 = neven%dim_1%EX
 1462.       $SC_neven_I67 = neven%dim_1%LB
 1462.       $SC_spec_I61 = spec%dim_1%EX
 1462.       $SC_spec_I62 = spec%dim_1%LB
 1462.       $SC_spec_I64 = spec%dim_2%SM
 1462.       $SC_spec_I63 = spec%dim_2%EX
 1462.       $SC_spec_I65 = spec%dim_2%LB
 1462.       $SC_ls2f_I54 = ls2f%dim_1%EX
 1462.       $SC_ls2f_I55 = ls2f%dim_1%LB
 1462.       $SC_ls2f_I57 = ls2f%dim_2%SM
 1462.       $SC_ls2f_I56 = ls2f%dim_2%EX
 1462.       $SC_ls2f_I58 = ls2f%dim_2%LB
 1462.       $SC_firstneven_I59 = firstneven%dim_1%EX
 1462.       $SC_firstneven_I60 = firstneven%dim_1%LB
 1465.       $SC_jminperm_I52 = jminperm%dim_1%EX
 1465.       $SC_jminperm_I53 = jminperm%dim_1%LB
 1457.       $SC_lm2m_I50 = lm2m%dim_1%EX
 1457.       $SC_lm2m_I51 = lm2m%dim_1%LB
 1450. !dir$ loop_info (automatic) cache_nt( lm2m, jminperm )
 1450.       do
 1451.          $snt_T1 = _mt_critical( 2, _mt_rw_list(...) )
 1452.          mglob = 1 + mglob
 1453.          lm = mglob
 1454.          $snt_T1 = _mt_endcritical( 2, _mt_rw_list(...), $snt_T1 )
 1455.          if ( lm > mymmax ) goto 10
 1457.          m = (lm2m%base_addr)(lm, 0)
 1461.          $F_A35 = t$119
 1461.          $F_A36 = t$118
 1461.          if ( and( -$F_A36, -$F_A35 ) < 0 ) then
 1461.             $I_L1461_276 = 0
 1461.             do
 1461.                $I_L1461_262 = 0
 1461. !dir$ ivdep
 1461.                do
 1461.                   foev(1 + $I_L1461_262, 1 + $I_L1461_276) = 0.0
 1461.                   $I_L1461_262 = 1 + $I_L1461_262
 1461.                   if ( $I_L1461_262 >= $F_A36 ) exit
 1461.                enddo
 1461.                $I_L1461_276 = 1 + $I_L1461_276
 1461.                if ( $I_L1461_276 >= $F_A35 ) exit
 1461.             enddo
 1461.          endif
 1465.          $t_S1 = jmaxhalf + -(jminperm%base_addr)(m, 0) + 1
 1462.          $ipa_S0 = (jminperm%base_addr)(m, 0)
 1462.          ipa$139 = loc( (ls2f%base_addr)($ipa_S0, (firstneven%base_addr)(lm, 0), 0) )
 1462.          a = _copyin( (ls2f%base_addr)($ipa_S0, (firstneven%base_addr)(lm, 0), 0) )
 1462.          ipa$141 = loc( (spec%base_addr)((firstneven%base_addr)(lm, 0), 1, 0) )
 1462.          b = _copyin( (spec%base_addr)((firstneven%base_addr)(lm, 0), 1, 0) )
 1462.          t$140 = djh
 1462.          t$141 = (neven%base_addr)(lm, 0)
 1462.          t$279 = max( 0, djh )
 1462.          t$280 = djh
 1462.          t$281 = max( 0, (neven%base_addr)(lm, 0) )
 1462.          t$282 = ( djh * (neven%base_addr)(lm, 0) )
 1462.          t$142 = dlmn
 1462.          t$143 = ( 2 * nvertspec )
 1462.          t$283 = max( 0, dlmn )
 1462.          t$284 = dlmn
 1462.          t$285 = max( 0, 2 * nvertspec )
 1462.          t$286 = ( nvertspec * dlmn * 2 )
 1462.          t$144 = dv
 1462.          t$145 = djh
 1462.          t$287 = max( 0, dv )
 1462.          t$288 = dv
 1462.          t$289 = max( 0, djh )
 1462.          t$290 = ( dv * djh )
 1462.          if ( $t_S1 > 0 ) then
 1462.             if ( 2 * nvertspec > 0 ) then
 1462.                $SCA_neven_I46 = (neven%base_addr)(lm, 0)
 1462.                $I_L1462_280 = 0
 1462.                do
 1462.                   $I_L1462_266 = 0
 1462.                   do
 1462.                      if ( $SCA_neven_I46 > 0 ) then
 1462.                         $SCA_foev_I44 = foev(1 + $I_L1462_266, $ipa_S0 + $I_L1462_280)
 1462.                         $I_L1462_244 = 0
 1462. !dir$ ivdep
 1462.                         do
 1462.                            $SCA_foev_I44 = $SCA_foev_I44 + a(1 + $I_L1462_280, 1 + $I_L1462_244) * b(1 + $I_L1462_244, 1 + $I_L1462_266)
 1462.                            $I_L1462_244 = 1 + $I_L1462_244
 1462.                            if ( $I_L1462_244 >= $SCA_neven_I46 ) exit
 1462.                         enddo
 1462.                         foev(1 + $I_L1462_266, $ipa_S0 + $I_L1462_280) = $SCA_foev_I44
 1462.                      endif
 1462.                      $I_L1462_266 = 1 + $I_L1462_266
 1462.                      if ( $I_L1462_266 >= ( 2 * nvertspec ) ) exit
 1462.                   enddo
 1462.                   $I_L1462_280 = 1 + $I_L1462_280
 1462.                   if ( $I_L1462_280 >= $t_S1 ) exit
 1462.                enddo
 1462.             endif
 1462.          endif
 1462.          (spec%base_addr)((firstneven%base_addr)(lm, 0), 1, 0) = _copyout( b )
 1462.          (ls2f%base_addr)($ipa_S0, (firstneven%base_addr)(lm, 0), 0) = _copyout( a )
 1466.          $F_A37 = t$119
 1466.          $F_A38 = t$118
 1466.          if ( and( -$F_A38, -$F_A37 ) < 0 ) then
 1466.             $I_L1466_278 = 0
 1466.             do
 1466.                $I_L1466_264 = 0
 1466. !dir$ ivdep
 1466.                do
 1466.                   food(1 + $I_L1466_264, 1 + $I_L1466_278) = 0.0
 1466.                   $I_L1466_264 = 1 + $I_L1466_264
 1466.                   if ( $I_L1466_264 >= $F_A38 ) exit
 1466.                enddo
 1466.                $I_L1466_278 = 1 + $I_L1466_278
 1466.                if ( $I_L1466_278 >= $F_A37 ) exit
 1466.             enddo
 1466.          endif
 1470.          t$701 = jmaxhalf + -$ipa_S0 + 1
 1470.          t$702 = 2 * nvertspec
 1467.          ipa$157 = loc( (ls2f%base_addr)($ipa_S0, (firstnodd%base_addr)(lm, 0), 0) )
 1467.          a = _copyin( (ls2f%base_addr)($ipa_S0, (firstnodd%base_addr)(lm, 0), 0) )
 1467.          ipa$159 = loc( (spec%base_addr)((firstnodd%base_addr)(lm, 0), 1, 0) )
 1467.          b = _copyin( (spec%base_addr)((firstnodd%base_addr)(lm, 0), 1, 0) )
 1467.          t$140 = djh
 1467.          t$141 = (nodd%base_addr)(lm, 0)
 1467.          t$279 = max( 0, djh )
 1467.          t$280 = djh
 1467.          t$281 = max( 0, (nodd%base_addr)(lm, 0) )
 1467.          t$282 = ( djh * (nodd%base_addr)(lm, 0) )
 1467.          t$142 = dlmn
 1467.          t$143 = ( 2 * nvertspec )
 1467.          t$283 = max( 0, dlmn )
 1467.          t$284 = dlmn
 1467.          t$285 = max( 0, 2 * nvertspec )
 1467.          t$286 = ( nvertspec * dlmn * 2 )
 1467.          t$144 = dv
 1467.          t$145 = djh
 1467.          t$287 = max( 0, dv )
 1467.          t$288 = dv
 1467.          t$289 = max( 0, djh )
 1467.          t$290 = ( dv * djh )
 1467.          if ( jmaxhalf + -$ipa_S0 >= 0 ) then
 1467.             if ( 2 * nvertspec > 0 ) then
 1467.                $SCA_nodd_I47 = (nodd%base_addr)(lm, 0)
 1467.                $I_L1467_282 = 0
 1467.                do
 1467.                   $I_L1467_268 = 0
 1467.                   do
 1467.                      if ( $SCA_nodd_I47 > 0 ) then
 1467.                         $SCA_food_I42 = food(1 + $I_L1467_268, $ipa_S0 + $I_L1467_282)
 1467.                         $I_L1467_246 = 0
 1467. !dir$ ivdep
 1467.                         do
 1467.                            $SCA_food_I42 = $SCA_food_I42 + a(1 + $I_L1467_282, 1 + $I_L1467_246) * b(1 + $I_L1467_246, 1 + $I_L1467_268)
 1467.                            $I_L1467_246 = 1 + $I_L1467_246
 1467.                            if ( $I_L1467_246 >= $SCA_nodd_I47 ) exit
 1467.                         enddo
 1467.                         food(1 + $I_L1467_268, $ipa_S0 + $I_L1467_282) = $SCA_food_I42
 1467.                      endif
 1467.                      $I_L1467_268 = 1 + $I_L1467_268
 1467.                      if ( $I_L1467_268 >= ( 2 * nvertspec ) ) exit
 1467.                   enddo
 1467.                   $I_L1467_282 = 1 + $I_L1467_282
 1467.                   if ( $I_L1467_282 >= jmaxhalf + -$ipa_S0 + 1 ) exit
 1467.                enddo
 1467.             endif
 1483.             if ( nvertspec > 0 ) then
 1478.                $SC_nlatsinproc_I72 = nlatsinproc_f%dim_1%EX
 1478.                $SC_nlatsinproc_I73 = nlatsinproc_f%dim_1%LB
 1478.                $SC_firstlatinproc_I70 = firstlatinproc_f%dim_1%EX
 1478.                $SC_firstlatinproc_I71 = firstlatinproc_f%dim_1%LB
 1476.                $SC_nodehasj_I68 = nodehasj_f%dim_1%EX
 1476.                $SC_nodehasj_I69 = nodehasj_f%dim_1%LB
 1484.                $SC_bufsend_I74 = bufsend%dim_1%EX
 1484.                $SC_bufsend_I48 = bufsend%dim_1%LB
 1474.                $I_L1474_270 = 0
 1474.                do
 1476.                   kn = (nodehasj_f%base_addr)($ipa_S0 + $I_L1474_270, 0)
 1477.                   ks = (nodehasj_f%base_addr)(jmax + -$ipa_S0 + -$I_L1474_270 + 1, 0)
 1478.                   inin = ( -( nvertspec * (firstlatinproc_f%base_addr)(kn, 0) ) + nvertspec * $ipa_S0 + nvertspec * lm * (nlatsinproc_f%base_addr)(kn, 0) * 2 + nvertspec * (nlatsinproc_f%base_addr)(kn, 0) * -2 + nvertspec * $I_L1474_270 )
 1479.                   inin1 = inin + nvertspec * (nlatsinproc_f%base_addr)(kn, 0)
 1480.                   inis = nvertspec + -( nvertspec * $ipa_S0 ) + -( nvertspec * (firstlatinproc_f%base_addr)(ks, 0) ) + -( nvertspec * $I_L1474_270 ) + nvertspec * jmax + nvertspec * lm * (nlatsinproc_f%base_addr)(ks, 0) * 2 + nvertspec * (nlatsinproc_f%base_addr)(ks, 0) * -2
 1481.                   inis1 = inis + nvertspec * (nlatsinproc_f%base_addr)(ks, 0)
 1483.                   $I_L1483_248 = 0
 1483. !dir$ unroll 2
 1483.                   do
 1484.                      (bufsend%base_addr)(inin + $I_L1483_248 + nvertspec * jmaxlocal_f * mymmax * kn * 2 + 1, 0) = foev(1 + $I_L1483_248, $ipa_S0 + $I_L1474_270) + food(1 + $I_L1483_248, $ipa_S0 + $I_L1474_270)
 1485.                      (bufsend%base_addr)(inin1 + $I_L1483_248 + nvertspec * jmaxlocal_f * mymmax * kn * 2 + 1, 0) = foev(nvertspec + $I_L1483_248 + 1, $ipa_S0 + $I_L1474_270) + food(nvertspec + $I_L1483_248 + 1, $ipa_S0 + $I_L1474_270)
 1486.                      (bufsend%base_addr)(inis + $I_L1483_248 + nvertspec * jmaxlocal_f * mymmax * ks * 2 + 1, 0) = foev(1 + $I_L1483_248, $ipa_S0 + $I_L1474_270) + -food(1 + $I_L1483_248, $ipa_S0 + $I_L1474_270)
 1487.                      (bufsend%base_addr)(inis1 + $I_L1483_248 + nvertspec * jmaxlocal_f * mymmax * ks * 2 + 1, 0) = foev(nvertspec + $I_L1483_248 + 1, $ipa_S0 + $I_L1474_270) + -food(nvertspec + $I_L1483_248 + 1, $ipa_S0 + $I_L1474_270)
 1488.                      $I_L1483_248 = 1 + $I_L1483_248
 1483.                      if ( $I_L1483_248 >= nvertspec ) exit
 1483.                   enddo
 1489.                   $I_L1474_270 = 1 + $I_L1474_270
 1488.                   if ( $I_L1474_270 >= jmaxhalf + -$ipa_S0 + 1 ) exit
 1488.                enddo
 1488.             endif
 1488.          endif
 1467.          (spec%base_addr)((firstnodd%base_addr)(lm, 0), 1, 0) = _copyout( b )
 1467.       enddo
 1467.    10 continue
 1491.       _mt_barrier( 3, _mt_rw_list(...) )
 1492.       $snt_T2 = _mt_single( 4, _mt_rw_list(...) )
 1493.       comm = comm_four
 1494.       (requestr%base_addr)(myid_four, 0) = 738197504
 1495.       (requests%base_addr)(myid_four, 0) = 738197504
 1496.       t$710 = -1 + maxnodes_four
 1496.       if ( maxnodes_four > 0 ) then
 1496.          t$711 = maxnodes_four
 1496.          $I_L1496_250 = 0
 1496.          do
 1497.             if ( $I_L1496_250 + -myid_four /= 0 ) then
 1498.                t$701 = myjmax_f * nvertspec * (msperproc%base_addr)($I_L1496_250, 0) * 2
 1499.                t$702 = $I_L1496_250
 1498.                call mpi_irecv( (bufrec%base_addr)(1 + kdim * $I_L1496_250, 0), t$701, 1275070495, t$702, 97, comm, (requestr%base_addr)($I_L1496_250, 0), ierr )
 1498.             endif
 1501.             $I_L1496_250 = 1 + $I_L1496_250
 1500.             if ( $I_L1496_250 >= 1 + t$710 ) exit
 1500.          enddo
 1501.          t$712 = 1 + t$710
 1501.       endif
 1502.       t$713 = -1 + maxnodes_four
 1502.       k = 0
 1502.       if ( maxnodes_four > 0 ) then
 1502.          t$714 = maxnodes_four
 1502.          $I_L1502_252 = 0
 1502.          do
 1503.             if ( $I_L1502_252 + -myid_four /= 0 ) then
 1504.                t$701 = nvertspec * mymmax * (nlatsinproc_f%base_addr)($I_L1502_252, 0) * 2
 1505.                t$702 = $I_L1502_252
 1504.                call mpi_isend( (bufsend%base_addr)(1 + ldim * $I_L1502_252, 0), t$701, 1275070495, t$702, 97, comm, (requests%base_addr)($I_L1502_252, 0), ierr )
 1504.             endif
 1507.             $I_L1502_252 = 1 + $I_L1502_252
 1506.             if ( $I_L1502_252 >= 1 + t$713 ) exit
 1506.          enddo
 1507.          t$715 = 1 + t$713
 1507.          k = 1 + t$713
 1507.       endif
 1508.       $snt_T2 = _mt_endsingle( 4, _mt_rw_list(...), $snt_T2 )
 1509.       mm = 0
 1510.       if ( mmax > 0 ) then
 1515.          if ( jlast + -jfirst >= 0 ) then
 1516.             if ( nvertspec > 0 ) then
 1517.                $SC_four_I80 = four%dim_1%EX
 1517.                $SC_four_I81 = four%dim_1%LB
 1517.                $SC_four_I83 = four%dim_2%SM
 1517.                $SC_four_I82 = four%dim_2%EX
 1517.                $SC_four_I84 = four%dim_2%LB
 1511.                $SC_nodehasm_I75 = nodehasm%dim_1%EX
 1511.                $SC_nodehasm_I76 = nodehasm%dim_1%LB
 1511.                $SC_nodehasm_I78 = nodehasm%dim_2%SM
 1511.                $SC_nodehasm_I77 = nodehasm%dim_2%EX
 1511.                $SC_nodehasm_I79 = nodehasm%dim_2%LB
 1517.                $SC_bufsend_I74 = bufsend%dim_1%EX
 1517.                $SC_bufsend_I48 = bufsend%dim_1%LB
 1510.                $I_L1510_284 = 0
 1510. !dir$ loop_info (automatic) cache_nt( nodehasm )
 1510.                do
 1511.                   if ( (nodehasm%base_addr)(1 + $I_L1510_284, mygroup_four, 0) + -myid_four == 0 ) then
 1512.                      mm = 1 + mm
 1515.                      $I_L1515_272 = 0
 1515.                      do
 1516.                         $I_L1516_254 = 0
 1516. !dir$ ivdep
 1516.                         do
 1517.                            (four%base_addr)($I_L1516_254 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1515_272 + 1, 1 + 2 * $I_L1510_284, 0) = (bufsend%base_addr)($I_L1516_254 + -nvertspec + myjmax_f * nvertspec * -2 + myjmax_f * nvertspec * mm * 2 + ldim * myid_four + jfirst * nvertspec + nvertspec * $I_L1515_272 + 1, 0)
 1519.                            (four%base_addr)($I_L1516_254 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1515_272 + 1, 2 + 2 * $I_L1510_284, 0) = (bufsend%base_addr)($I_L1516_254 + -nvertspec + -( myjmax_f * nvertspec ) + myjmax_f * nvertspec * mm * 2 + ldim * myid_four + jfirst * nvertspec + nvertspec * $I_L1515_272 + 1, 0)
 1521.                            $I_L1516_254 = 1 + $I_L1516_254
 1516.                            if ( $I_L1516_254 >= nvertspec ) exit
 1516.                         enddo
 1522.                         $I_L1515_272 = 1 + $I_L1515_272
 1521.                         if ( $I_L1515_272 >= jlast + -jfirst + 1 ) exit
 1521.                      enddo
 1521.                   endif
 1524.                   $I_L1510_284 = 1 + $I_L1510_284
 1523.                   if ( $I_L1510_284 >= mmax ) exit
 1523.                enddo
 1523.             endif
 1523.          endif
 1523.       endif
 1525.       $t_S19 = -1 + maxnodes_four
 1525.       if ( -1 + maxnodes_four > 0 ) then
 1525.          $I_L1525_288 = 0
 1525.          do
 1526.             _mt_barrier( 5, _mt_rw_list(...) )
 1527.             $snt_T3 = _mt_single( 6, _mt_rw_list(...) )
 1528.             call mpi_waitany( maxnodes_four, (requestr%base_addr)(0, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 1529.             $snt_T3 = _mt_endsingle( 6, _mt_rw_list(...), $snt_T3 )
 1530.             ks = (status%base_addr)(3, 0)
 1531.             mm = 0
 1532.             if ( mmax > 0 ) then
 1537.                if ( jlast + -jfirst >= 0 ) then
 1538.                   if ( nvertspec > 0 ) then
 1539.                      $SC_four_I80 = four%dim_1%EX
 1539.                      $SC_four_I81 = four%dim_1%LB
 1539.                      $SC_four_I83 = four%dim_2%SM
 1539.                      $SC_four_I82 = four%dim_2%EX
 1539.                      $SC_four_I84 = four%dim_2%LB
 1533.                      $SC_nodehasm_I75 = nodehasm%dim_1%EX
 1533.                      $SC_nodehasm_I76 = nodehasm%dim_1%LB
 1533.                      $SC_nodehasm_I78 = nodehasm%dim_2%SM
 1533.                      $SC_nodehasm_I77 = nodehasm%dim_2%EX
 1533.                      $SC_nodehasm_I79 = nodehasm%dim_2%LB
 1539.                      $SC_bufrec_I85 = bufrec%dim_1%EX
 1539.                      $SC_bufrec_I49 = bufrec%dim_1%LB
 1532.                      $I_L1532_286 = 0
 1532. !dir$ loop_info (automatic) cache_nt( nodehasm )
 1532.                      do
 1533.                         if ( (nodehasm%base_addr)(1 + $I_L1532_286, mygroup_four, 0) + -ks == 0 ) then
 1534.                            mm = 1 + mm
 1537.                            $I_L1537_274 = 0
 1537.                            do
 1538.                               $I_L1538_256 = 0
 1538. !dir$ ivdep
 1538.                               do
 1539.                                  (four%base_addr)($I_L1538_256 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1537_274 + 1, 1 + 2 * $I_L1532_286, 0) = (bufrec%base_addr)($I_L1538_256 + -nvertspec + myjmax_f * nvertspec * -2 + myjmax_f * nvertspec * mm * 2 + kdim * ks + jfirst * nvertspec + nvertspec * $I_L1537_274 + 1, 0)
 1541.                                  (four%base_addr)($I_L1538_256 + -nvertgrid + jfirst * nvertgrid + nvertgrid * $I_L1537_274 + 1, 2 + 2 * $I_L1532_286, 0) = (bufrec%base_addr)($I_L1538_256 + -nvertspec + -( myjmax_f * nvertspec ) + myjmax_f * nvertspec * mm * 2 + kdim * ks + jfirst * nvertspec + nvertspec * $I_L1537_274 + 1, 0)
 1543.                                  $I_L1538_256 = 1 + $I_L1538_256
 1538.                                  if ( $I_L1538_256 >= nvertspec ) exit
 1538.                               enddo
 1544.                               $I_L1537_274 = 1 + $I_L1537_274
 1543.                               if ( $I_L1537_274 >= jlast + -jfirst + 1 ) exit
 1543.                            enddo
 1543.                         endif
 1546.                         $I_L1532_286 = 1 + $I_L1532_286
 1545.                         if ( $I_L1532_286 >= mmax ) exit
 1545.                      enddo
 1545.                   endif
 1545.                endif
 1545.             endif
 1547.             $I_L1525_288 = 1 + $I_L1525_288
 1546.             if ( $I_L1525_288 >= $t_S19 ) exit
 1546.          enddo
 1546.       endif
 1548.       $snt_T4 = _mt_single( 7, _mt_rw_list(...) )
 1549.       call mpi_waitall( maxnodes_four, (requests%base_addr)(0, 0), (stat%base_addr)(stat%dim_1%LB, stat%dim_2%LB, 0), ierr )
 1550.       $snt_T4 = _mt_endsingle( 7, _mt_rw_list(...), $snt_T4 )
 1404.       _free( t$226 )
 1551.       return
 1551.       end
 1551.       
 1557.       
 1557.       subroutine dellam( mfirst, mlast )
 1571.       if ( mlast + -mfirst >= 0 ) then
 1574.          if ( ngridfields > 0 ) then
 1590.             if ( myjmax_f > 0 ) then
 1571.                $I_L1571_38 = 0
 1571.                do
 1574.                   $I_L1574_36 = 0
 1574.                   do
 1575.                      if ( (fieldfordellam%base_addr)(1 + $I_L1574_36, 0) ) then
 1576.                         $vbasefrom_S3 = (prevvertdellamsource%base_addr)(1 + $I_L1574_36, 0)
 1577.                         $vbaseto_S6 = (prevgrid%base_addr)(1 + $I_L1574_36, 0)
 1579.                         $vmax_S1 = cvmg( int( havesurf ), kmaxloc, (surfgrid%base_addr)(1 + $I_L1574_36, 0) )
 1589.                         if ( cvmg( int( havesurf ), kmaxloc, (surfgrid%base_addr)(1 + $I_L1574_36, 0) ) > 0 ) then
 1593.                            $SC_consre_I18 = (consre%base_addr)(mfirst + $I_L1571_38, 0)
 1592.                            $SC_consim_I17 = (consim%base_addr)(mfirst + $I_L1571_38, 0)
 1589.                            $I_L1589_34 = 0
 1589.                            do
 1590.                               $CSVL_V0 = int( cvmg( ( $vbaseto_S6 + -$vbasefrom_S3 ) / nvertgrid, 2, and( mod( $vbaseto_S6 + -$vbasefrom_S3, nvertgrid ) == 0 .and. abs( ( $vbaseto_S6 + -$vbasefrom_S3 ) / nvertgrid ) <= -1 + myjmax_f, and( ( $vbaseto_S6 + -$vbasefrom_S3 ) / nvertgrid > 0, ( $vbaseto_S6 + -$vbasefrom_S3 ) / nvertgrid <= 2 ) ) ), 8 )
 1590.                               if ( $CSVL_V0 < 2 ) then
 1590.                                  $I_L1590_32 = 0
 1590.                                  do
 1592.                                     $auxre_S7 = $SC_consim_I17 * (four%base_addr)($vbasefrom_S3 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38 + -1, 0)
 1593.                                     (four%base_addr)($vbaseto_S6 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38 + -1, 0) = $SC_consre_I18 * (four%base_addr)($vbasefrom_S3 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38, 0)
 1594.                                     (four%base_addr)($vbaseto_S6 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38, 0) = $auxre_S7
 1595.                                     $I_L1590_32 = 1 + $I_L1590_32
 1590.                                     if ( $I_L1590_32 >= myjmax_f ) exit
 1590.                                  enddo
 1590.                               else
 1590.                                  $I_L1590_32 = 0
 1590. !dir$ ivdep safevl = $CSVL_V0 !   Guaranteed minimum :: 2
 1590.                                  do
 1592.                                     $auxre_S7 = $SC_consim_I17 * (four%base_addr)($vbasefrom_S3 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38 + -1, 0)
 1593.                                     (four%base_addr)($vbaseto_S6 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38 + -1, 0) = $SC_consre_I18 * (four%base_addr)($vbasefrom_S3 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38, 0)
 1594.                                     (four%base_addr)($vbaseto_S6 + $I_L1589_34 + nvertgrid * $I_L1590_32 + 1, 2 * mfirst + 2 * $I_L1571_38, 0) = $auxre_S7
 1595.                                     $I_L1590_32 = 1 + $I_L1590_32
 1590.                                     if ( $I_L1590_32 >= myjmax_f ) exit
 1590.                                  enddo
 1590.                               endif
 1596.                               $I_L1589_34 = 1 + $I_L1589_34
 1595.                               if ( $I_L1589_34 >= $vmax_S1 ) exit
 1595.                            enddo
 1595.                         endif
 1595.                      endif
 1598.                      $I_L1574_36 = 1 + $I_L1574_36
 1597.                      if ( $I_L1574_36 >= ngridfields ) exit
 1597.                   enddo
 1599.                   $I_L1571_38 = 1 + $I_L1571_38
 1598.                   if ( $I_L1571_38 >= mlast + -mfirst + 1 ) exit
 1598.                enddo
 1598.             endif
 1598.          endif
 1598.       endif
 1600.       return
 1600.       end
 1600.       
 1627.       
 1627.       subroutine withdrawgrid
 1628.       g2%dim_1%LB = 1
 1628.       g2%dim_1%EX = 0
 1628.       g2%dim_1%SM = 1
 1628.       g2%dim_2%LB = 1
 1628.       g2%dim_2%EX = 0
 1628.       g2%dim_2%SM = 1
 1606.       g3%dim_1%LB = 1
 1606.       g3%dim_1%EX = 0
 1606.       g3%dim_1%SM = 1
 1606.       g3%dim_2%LB = 1
 1606.       g3%dim_2%EX = 0
 1606.       g3%dim_2%SM = 1
 1606.       g3%dim_3%LB = 1
 1606.       g3%dim_3%EX = 0
 1606.       g3%dim_3%SM = 1
 1606.       t$120 = ( 1 + nrecs_f )
 1625.       t$232 = _zla( 0, ( 1 + nrecs_f ) )
 1625.       t$235 = 4 * _zla( 0, ( 1 + nrecs_f ) )
 1624.       t$237 = 8 * _zla( 0, ( 1 + nrecs_f ) )
 1606.       t$121 = ( 1 + nrecs_g )
 1626.       t$238 = _zla( 0, ( 1 + nrecs_g ) )
 1626.       t$240 = 8 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) )
 1606.       t$233 = int( _alloc( 8 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) ) ), 8 )
 1625.       t$234 = t$233
 1624.       t$236 = t$233 + 4 * _zla( 0, ( 1 + nrecs_f ) )
 1626.       t$239 = t$233 + 8 * _zla( 0, ( 1 + nrecs_f ) )
 1631.       comm = 1140850688
 1632.       $m_S1 = 0
 1633.       ibr(1) = 1
 1634.       if ( nrecs_f > 0 ) then
 1637.          $SC_messages_I86 = messages_f%dim_1%EX
 1637.          $SC_messages_I87 = messages_f%dim_1%LB
 1637.          $SC_messages_I89 = messages_f%dim_2%SM
 1637.          $SC_messages_I88 = messages_f%dim_2%EX
 1637.          $SC_messages_I90 = messages_f%dim_2%LB
 1636.          $SC_messproc_I81 = messproc_f%dim_1%EX
 1636.          $SC_messproc_I82 = messproc_f%dim_1%LB
 1636.          $SC_messproc_I84 = messproc_f%dim_2%SM
 1636.          $SC_messproc_I83 = messproc_f%dim_2%EX
 1636.          $SC_messproc_I85 = messproc_f%dim_2%LB
 1634.          $I_L1634_265 = 0
 1634.          do
 1635.             ibn(1 + $I_L1634_265) = 0
 1636.             $t_S2 = (messproc_f%base_addr)(2, 1 + $I_L1634_265, 0)
 1636.             ipar = 1 + $m_S1
 1636.             if ( $t_S2 + -$m_S1 > 0 ) then
 1636.                $SCA_ibn_I57 = 0
 1636.                $I_L1636_239 = 0
 1636. !dir$ ivdep
 1636.                do
 1637.                   $SCA_ibn_I57 = $SCA_ibn_I57 + (messages_f%base_addr)(2, $m_S1 + $I_L1636_239 + 1, 0) + -(messages_f%base_addr)(1, $m_S1 + $I_L1636_239 + 1, 0) + 1
 1638.                   $I_L1636_239 = 1 + $I_L1636_239
 1636.                   if ( $I_L1636_239 >= ( $t_S2 + -$m_S1 ) ) exit
 1636.                enddo
 1636.                ibn(1 + $I_L1634_265) = $SCA_ibn_I57
 1638.                ipar = 1 + $t_S2
 1638.             endif
 1639.             ibr(2 + $I_L1634_265) = ibr(1 + $I_L1634_265) + nvertgrid * ibn(1 + $I_L1634_265)
 1640.             $m_S1 = $t_S2
 1641.             $I_L1634_265 = 1 + $I_L1634_265
 1638.             if ( $I_L1634_265 >= nrecs_f ) exit
 1638.          enddo
 1638.       endif
 1642.       m = 0
 1643.       ibs(1) = 1
 1644.       n = 1
 1644.       if ( nrecs_g > 0 ) then
 1649.          $SC_kfirst_four_I101 = kfirst_four%dim_1%EX
 1649.          $SC_kfirst_four_I102 = kfirst_four%dim_1%LB
 1649.          $SC_klast_four_I103 = klast_four%dim_1%EX
 1649.          $SC_klast_four_I104 = klast_four%dim_1%LB
 1647.          $SC_messages_I96 = messages_g%dim_1%EX
 1647.          $SC_messages_I97 = messages_g%dim_1%LB
 1647.          $SC_messages_I99 = messages_g%dim_2%SM
 1647.          $SC_messages_I98 = messages_g%dim_2%EX
 1647.          $SC_messages_I100 = messages_g%dim_2%LB
 1646.          $SC_messproc_I91 = messproc_g%dim_1%EX
 1646.          $SC_messproc_I92 = messproc_g%dim_1%LB
 1646.          $SC_messproc_I94 = messproc_g%dim_2%SM
 1646.          $SC_messproc_I93 = messproc_g%dim_2%EX
 1646.          $SC_messproc_I95 = messproc_g%dim_2%LB
 1644.          $I_L1644_267 = 0
 1644.          do
 1645.             ib = 0
 1646.             $t_S5 = (messproc_g%base_addr)(2, 1 + $I_L1644_267, 0)
 1646.             ipar = 1 + m
 1646.             if ( $t_S5 + -m > 0 ) then
 1646.                $I_L1646_241 = 0
 1646. !dir$ ivdep
 1646.                do
 1647.                   ib = ib + (messages_g%base_addr)(2, m + $I_L1646_241 + 1, 0) + -(messages_g%base_addr)(1, m + $I_L1646_241 + 1, 0) + 1
 1648.                   $I_L1646_241 = 1 + $I_L1646_241
 1646.                   if ( $I_L1646_241 >= ( $t_S5 + -m ) ) exit
 1646.                enddo
 1648.                ipar = 1 + $t_S5
 1648.             endif
 1649.             k = (klast_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L1644_267, 0), 0) + -(kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L1644_267, 0), 0) + 1
 1650.             ns = 0
 1651.             if ( (kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L1644_267, 0), 0) == 1 ) then
 1651.                ns = nsurf_g
 1651.             endif
 1652.             ibs(2 + $I_L1644_267) = ibs(1 + $I_L1644_267) + ib * ns + ib * k * nfull_g
 1653.             m = $t_S5
 1654.             $I_L1644_267 = 1 + $I_L1644_267
 1651.             if ( $I_L1644_267 >= nrecs_g ) exit
 1651.          enddo
 1654.          n = ( 1 + nrecs_g )
 1654.       endif
 1655.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 1656.       if ( dimsendbuf < -1 + ibs(1 + nrecs_g) ) then
 1657.          dimsendbuf = ibs(1 + nrecs_g)
 1658.          $_allo_P0(0) = 0x1000000000001L
 1658.          $_allo_P0(1) = loc( bufsend )
 1658.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1658.          bufsend%header%assoc = 0
 1659.          bufsend%header%a_contig = 1
 1659.          bufsend%dim_1%LB = 1
 1659.          bufsend%dim_1%EX = ( max( 0, dimsendbuf ) )
 1659.          bufsend%dim_1%SM = 1
 1659.          $_allo_P1(0) = 0x1000000000001L
 1659.          $_allo_P1(1) = loc( bufsend )
 1659.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1659.       endif
 1661.       if ( dimrecbuf < -1 + ibr(1 + nrecs_f) ) then
 1662.          dimrecbuf = ibr(1 + nrecs_f)
 1663.          $_allo_P2(0) = 0x1000000000001L
 1663.          $_allo_P2(1) = loc( bufrec )
 1663.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1663.          bufrec%header%assoc = 0
 1664.          bufrec%header%a_contig = 1
 1664.          bufrec%dim_1%LB = 1
 1664.          bufrec%dim_1%EX = ( max( 0, dimrecbuf ) )
 1664.          bufrec%dim_1%SM = 1
 1664.          $_allo_P3(0) = 0x1000000000001L
 1664.          $_allo_P3(1) = loc( bufrec )
 1664.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1664.       endif
 1666.       t$766 = nrecs_g
 1666.       n = 1
 1666.       if ( nrecs_g > 0 ) then
 1666.          t$767 = nrecs_g
 1666.          $I_L1666_243 = 0
 1666.          do
 1667.             proc = (messproc_g%base_addr)(1, 1 + $I_L1666_243, 0)
 1668.             t$769 = ibs(2 + $I_L1666_243) + -ibs(1 + $I_L1666_243)
 1668.             call mpi_irecv( (bufsend%base_addr)(ibs(1 + $I_L1666_243), 0), t$769, 1275070495, proc, 78, comm, (requestr%base_addr)(1 + $I_L1666_243, 0), ierr )
 1670.             $I_L1666_243 = 1 + $I_L1666_243
 1670.             if ( $I_L1666_243 >= t$766 ) exit
 1670.          enddo
 1670.          t$768 = t$766
 1670.          n = ( 1 + t$766 )
 1670.       endif
 1671.       nglob = 1
 1672.       iglob = 0
 1673.       ibglob = 0
 1674.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 1706.       $SC_four_I111 = four%dim_1%EX
 1706.       $SC_four_I112 = four%dim_1%LB
 1706.       $SC_four_I114 = four%dim_2%SM
 1706.       $SC_four_I113 = four%dim_2%EX
 1706.       $SC_four_I115 = four%dim_2%LB
 1701.       $SC_prevgrid_I107 = prevgrid%dim_1%EX
 1701.       $SC_prevgrid_I108 = prevgrid%dim_1%LB
 1703.       $SC_previousj_I109 = previousj%dim_1%EX
 1703.       $SC_previousj_I110 = previousj%dim_1%LB
 1687.       $SC_surfgrid_I105 = surfgrid%dim_1%EX
 1687.       $SC_surfgrid_I106 = surfgrid%dim_1%LB
 1706.       $SC_bufrec_I116 = bufrec%dim_1%EX
 1706.       $SC_bufrec_I117 = bufrec%dim_1%LB
 1702.       $SC_messages_I86 = messages_f%dim_1%EX
 1702.       $SC_messages_I87 = messages_f%dim_1%LB
 1702.       $SC_messages_I89 = messages_f%dim_2%SM
 1702.       $SC_messages_I88 = messages_f%dim_2%EX
 1702.       $SC_messages_I90 = messages_f%dim_2%LB
 1698.       $SC_messproc_I81 = messproc_f%dim_1%EX
 1698.       $SC_messproc_I82 = messproc_f%dim_1%LB
 1698.       $SC_messproc_I84 = messproc_f%dim_2%SM
 1698.       $SC_messproc_I83 = messproc_f%dim_2%EX
 1698.       $SC_messproc_I85 = messproc_f%dim_2%LB
 1675. !dir$ loop_info (automatic) cache_nt( surfgrid, ibn )
 1675.       do
 1676.          $snt_T1 = _mt_critical( 2, _mt_rw_list(...) )
 1677.          iglob = 1 + iglob
 1678.          if ( iglob > ngridfields ) then
 1679.             iglob = 1
 1680.             nglob = 1 + nglob
 1680.          endif
 1682.          n = nglob
 1683.          if ( nglob <= nrecs_f ) then
 1684.             ig = iglob
 1685.             ib = ibglob
 1686.             kl = kmaxloc
 1687.             if ( (surfgrid%base_addr)(iglob, 0) ) then
 1688.                kl = int( havesurf )
 1688.             endif
 1694.             ibglob = ibglob + kl * ibn(nglob)
 1694.          endif
 1696.          $snt_T1 = _mt_endcritical( 2, _mt_rw_list(...), $snt_T1 )
 1697.          if ( n > nrecs_f ) goto 10
 1698.          m = (messproc_f%base_addr)(2, -1 + n, 0)
 1699.          if ( (surfgrid%base_addr)(ig, 0) == 0 ) then
 1711.             $t_S12 = (messproc_f%base_addr)(2, n, 0)
 1711.             ipar = 1 + m
 1711.             if ( $t_S12 + -m > 0 ) then
 1714.                if ( kmaxloc > 0 ) then
 1711.                   $SCA_prevgrid_I58 = (prevgrid%base_addr)(ig, 0)
 1711.                   $I_L1711_277 = 0
 1711.                   do
 1712.                      j = (messages_f%base_addr)(3, m + $I_L1711_277 + 1, 0)
 1713.                      v0 = $SCA_prevgrid_I58 + nvertgrid * (previousj%base_addr)(j, 0)
 1714.                      $SCA_messages_I60 = (messages_f%base_addr)(1, m + $I_L1711_277 + 1, 0)
 1714.                      $SCA_messages_I61 = (messages_f%base_addr)(2, m + $I_L1711_277 + 1, 0)
 1714.                      $I_L1714_271 = 0
 1714.                      do
 1715.                         if ( $SCA_messages_I61 + -$SCA_messages_I60 >= 0 ) then
 1715.                            $I_L1715_247 = 0
 1715. !dir$ ivdep
 1715.                            do
 1717.                               (bufrec%base_addr)(ib + $I_L1715_247 + 1, 0) = (four%base_addr)(v0 + $I_L1714_271 + 1, $SCA_messages_I60 + $I_L1715_247, 0)
 1718.                               $I_L1715_247 = 1 + $I_L1715_247
 1715.                               if ( $I_L1715_247 >= $SCA_messages_I61 + -$SCA_messages_I60 + 1 ) exit
 1715.                            enddo
 1716.                            ib = ( ib + $SCA_messages_I61 + -$SCA_messages_I60 + 1 )
 1716.                         endif
 1719.                         $I_L1714_271 = 1 + $I_L1714_271
 1718.                         if ( $I_L1714_271 >= kmaxloc ) exit
 1718.                      enddo
 1720.                      $I_L1711_277 = 1 + $I_L1711_277
 1719.                      if ( $I_L1711_277 >= ( $t_S12 + -m ) ) exit
 1719.                   enddo
 1719.                else
 1712.                   j = (messages_f%base_addr)(3, $t_S12, 0)
 1712.                endif
 1720.                ipar = 1 + $t_S12
 1720.             endif
 1700.          else if ( havesurf ) then
 1701.             $t_S7 = (messproc_f%base_addr)(2, n, 0)
 1701.             ipar = 1 + m
 1701.             if ( $t_S7 + -m > 0 ) then
 1701.                $SCA_prevgrid_I59 = (prevgrid%base_addr)(ig, 0)
 1701.                $I_L1701_269 = 0
 1701.                do
 1702.                   j = (messages_f%base_addr)(3, m + $I_L1701_269 + 1, 0)
 1703.                   v0 = $SCA_prevgrid_I59 + nvertgrid * (previousj%base_addr)(j, 0)
 1704.                   $t_S9 = (messages_f%base_addr)(1, m + $I_L1701_269 + 1, 0)
 1704.                   $t_S10 = (messages_f%base_addr)(2, m + $I_L1701_269 + 1, 0)
 1704.                   if ( $t_S10 + -$t_S9 >= 0 ) then
 1704.                      $I_L1704_245 = 0
 1704. !dir$ ivdep
 1704.                      do
 1706.                         (bufrec%base_addr)(ib + $I_L1704_245 + 1, 0) = (four%base_addr)(1 + v0, $t_S9 + $I_L1704_245, 0)
 1707.                         $I_L1704_245 = 1 + $I_L1704_245
 1704.                         if ( $I_L1704_245 >= $t_S10 + -$t_S9 + 1 ) exit
 1704.                      enddo
 1705.                      ib = ( ib + $t_S10 + -$t_S9 + 1 )
 1705.                   endif
 1708.                   $I_L1701_269 = 1 + $I_L1701_269
 1707.                   if ( $I_L1701_269 >= ( $t_S7 + -m ) ) exit
 1707.                enddo
 1708.                ipar = 1 + $t_S7
 1708.             endif
 1708.          endif
 1721.       enddo
 1721.    10 continue
 1723.       _mt_barrier( 3, _mt_rw_list(...) )
 1724.       $snt_T2 = _mt_single( 4, _mt_rw_list(...) )
 1725.       t$789 = nrecs_f
 1725.       n = 1
 1725.       if ( nrecs_f > 0 ) then
 1725.          t$790 = nrecs_f
 1725.          $I_L1725_249 = 0
 1725.          do
 1726.             proc = (messproc_f%base_addr)(1, 1 + $I_L1725_249, 0)
 1727.             t$769 = ibr(2 + $I_L1725_249) + -ibr(1 + $I_L1725_249)
 1727.             call mpi_isend( (bufrec%base_addr)(ibr(1 + $I_L1725_249), 0), t$769, 1275070495, proc, 78, comm, (requests%base_addr)(1 + $I_L1725_249, 0), ierr )
 1729.             $I_L1725_249 = 1 + $I_L1725_249
 1729.             if ( $I_L1725_249 >= t$789 ) exit
 1729.          enddo
 1729.          t$791 = t$789
 1729.          n = ( 1 + t$789 )
 1729.       endif
 1730.       $snt_T2 = _mt_endsingle( 4, _mt_rw_list(...), $snt_T2 )
 1731.       iglob = 1
 1732.       jglob = max( myfirstlat, myfirstlat_f )
 1733.       _mt_barrier( 5, _mt_rw_list(...) )
 1737.       if ( max( myfirstlat, myfirstlat_f ) <= min( mylastlat, mylastlat_f ) ) then
 1761.          $SC_ibperij_I127 = ibperij%dim_1%EX
 1761.          $SC_ibperij_I128 = ibperij%dim_1%LB
 1760.          $SC_mylastlon_I122 = mylastlon%dim_1%EX
 1760.          $SC_mylastlon_I123 = mylastlon%dim_1%LB
 1760.          $SC_myfirstlon_I120 = myfirstlon%dim_1%EX
 1760.          $SC_myfirstlon_I121 = myfirstlon%dim_1%LB
 1758.          $SC_grid2d_I118 = grid2d%dim_1%EX
 1758.          $SC_grid2d_I119 = grid2d%dim_1%LB
 1761.          $SC_four_I111 = four%dim_1%EX
 1761.          $SC_four_I112 = four%dim_1%LB
 1761.          $SC_four_I114 = four%dim_2%SM
 1761.          $SC_four_I113 = four%dim_2%EX
 1761.          $SC_four_I115 = four%dim_2%LB
 1759.          $SC_prevgrid_I107 = prevgrid%dim_1%EX
 1759.          $SC_prevgrid_I108 = prevgrid%dim_1%LB
 1759.          $SC_previousj_I109 = previousj%dim_1%EX
 1759.          $SC_previousj_I110 = previousj%dim_1%LB
 1742.          $SC_surfgrid_I105 = surfgrid%dim_1%EX
 1742.          $SC_surfgrid_I106 = surfgrid%dim_1%LB
 1738.          do
 1739.             $snt_T3 = _mt_critical( 6, _mt_rw_list(...) )
 1742.             if ( myfirstlev /= 1 ) then
 1741.                if ( iglob <= ngridfields ) then
 1740.                   $I_iglob_251 = 0
 1740. !dir$ ivdep
 1740.                   do
 1742.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_251, 0) == 0 ) then
 1743.                         iglob = ( iglob + $I_iglob_251 )
 1743.                         goto 20
 1743.                      endif
 1741.                      $I_iglob_251 = 1 + $I_iglob_251
 1740.                      if ( $I_iglob_251 >= ngridfields + -iglob + 1 ) exit
 1740.                   enddo
 1743.                   iglob = ngridfields + -iglob + 1 + iglob
 1743.                endif
 1743.             endif
 1743.    20       continue
 1745.             $ig_S18 = iglob
 1746.             if ( iglob <= ngridfields ) then
 1747.                j = jglob
 1748.                if ( jglob >= min( mylastlat, mylastlat_f ) ) then
 1749.                   iglob = 1 + iglob
 1750.                   jglob = max( myfirstlat, myfirstlat_f )
 1750.                else
 1752.                   jglob = 1 + jglob
 1752.                endif
 1752.             endif
 1755.             $snt_T3 = _mt_endcritical( 6, _mt_rw_list(...), $snt_T3 )
 1756.             if ( $ig_S18 > ngridfields ) goto 30
 1757.             if ( (surfgrid%base_addr)($ig_S18, 0) ) then
 1758.                g2 = (grid2d%base_addr)($ig_S18, 0)%p
 1759.                $v0_S21 = (prevgrid%base_addr)($ig_S18, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 1760.                $t_S19 = (myfirstlon%base_addr)(j, 0)
 1760.                $t_S20 = (mylastlon%base_addr)(j, 0)
 1760.                if ( $t_S20 + -$t_S19 >= 0 ) then
 1761.                   $SC_g2_I125 = g2%dim_1%SM
 1761.                   $SC_g2_I124 = g2%dim_1%EX
 1761.                   $SC_g2_I126 = g2%dim_1%LB
 1761.                   $SC_ibperij_I130 = ibperij%dim_2%SM
 1761.                   $SC_ibperij_I129 = ibperij%dim_2%EX
 1761.                   $SC_ibperij_I131 = ibperij%dim_2%LB
 1761.                   $SC_g2_I133 = g2%dim_2%SM
 1761.                   $SC_g2_I132 = g2%dim_2%EX
 1761.                   $SC_g2_I134 = g2%dim_2%LB
 1761.                   $SC_jbperij_I135 = jbperij%dim_1%EX
 1761.                   $SC_jbperij_I136 = jbperij%dim_1%LB
 1761.                   $SC_jbperij_I138 = jbperij%dim_2%SM
 1761.                   $SC_jbperij_I137 = jbperij%dim_2%EX
 1761.                   $SC_jbperij_I139 = jbperij%dim_2%LB
 1760.                   $I_L1760_253 = 0
 1760. !dir$ ivdep
 1760.                   do
 1761.                      (g2%base_addr)((ibperij%base_addr)($t_S19 + $I_L1760_253, j, 0), (jbperij%base_addr)($t_S19 + $I_L1760_253, j, 0), 0) = (four%base_addr)(1 + $v0_S21, $t_S19 + $I_L1760_253, 0)
 1762.                      $I_L1760_253 = 1 + $I_L1760_253
 1760.                      if ( $I_L1760_253 >= $t_S20 + -$t_S19 + 1 ) exit
 1760.                   enddo
 1760.                endif
 1760.             else
 1764.                g3 = (grid3d%base_addr)($ig_S18, 0)%p
 1765.                $v0_S23 = (prevgrid%base_addr)($ig_S18, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 1766.                if ( mylastlev + -myfirstlev >= 0 ) then
 1766.                   $SCA_myfirstlon_I62 = (myfirstlon%base_addr)(j, 0)
 1766.                   $SCA_mylastlon_I63 = (mylastlon%base_addr)(j, 0)
 1769.                   $SC_g3_I141 = g3%dim_1%SM
 1769.                   $SC_g3_I140 = g3%dim_1%EX
 1769.                   $SC_g3_I142 = g3%dim_1%LB
 1769.                   $SC_g3_I144 = g3%dim_2%SM
 1769.                   $SC_g3_I143 = g3%dim_2%EX
 1769.                   $SC_g3_I145 = g3%dim_2%LB
 1769.                   $SC_g3_I147 = g3%dim_3%SM
 1769.                   $SC_g3_I146 = g3%dim_3%EX
 1769.                   $SC_g3_I148 = g3%dim_3%LB
 1769.                   $SC_ibperij_I130 = ibperij%dim_2%SM
 1769.                   $SC_ibperij_I129 = ibperij%dim_2%EX
 1769.                   $SC_ibperij_I131 = ibperij%dim_2%LB
 1769.                   $SC_jbperij_I135 = jbperij%dim_1%EX
 1769.                   $SC_jbperij_I136 = jbperij%dim_1%LB
 1769.                   $SC_jbperij_I138 = jbperij%dim_2%SM
 1769.                   $SC_jbperij_I137 = jbperij%dim_2%EX
 1769.                   $SC_jbperij_I139 = jbperij%dim_2%LB
 1766.                   $I_L1766_273 = 0
 1766.                   do
 1768.                      if ( $SCA_mylastlon_I63 + -$SCA_myfirstlon_I62 >= 0 ) then
 1768.                         $I_L1768_255 = 0
 1768. !dir$ ivdep
 1768.                         do
 1769.                            (g3%base_addr)((ibperij%base_addr)($SCA_myfirstlon_I62 + $I_L1768_255, j, 0), myfirstlev + $I_L1766_273, (jbperij%base_addr)($SCA_myfirstlon_I62 + $I_L1768_255, j, 0), 0) = (four%base_addr)($v0_S23 + $I_L1766_273 + 1, $SCA_myfirstlon_I62 + $I_L1768_255, 0)
 1770.                            $I_L1768_255 = 1 + $I_L1768_255
 1768.                            if ( $I_L1768_255 >= $SCA_mylastlon_I63 + -$SCA_myfirstlon_I62 + 1 ) exit
 1768.                         enddo
 1768.                      endif
 1771.                      $I_L1766_273 = 1 + $I_L1766_273
 1770.                      if ( $I_L1766_273 >= mylastlev + -myfirstlev + 1 ) exit
 1770.                   enddo
 1770.                endif
 1770.             endif
 1772.          enddo
 1772.       endif
 1772.    30 continue
 1777.       $snt_T4 = _mt_single( 7, _mt_rw_list(...) )
 1778.       kountg = 1
 1779.       $snt_T4 = _mt_endsingle( 7, _mt_rw_list(...), $snt_T4 )
 1780.       if ( nrecs_g > 0 ) then
 1781.          do
 1782.             $snt_T5 = _mt_single( 8, _mt_rw_list(...) )
 1783.             call mpi_waitany( nrecs_g, (requestr%base_addr)(1, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 1784.             ksg = (status%base_addr)(3, 0)
 1785.             t$804 = nrecs_g
 1785.             l = 1
 1785.             if ( nrecs_g > 0 ) then
 1785.                t$805 = nrecs_g
 1786.                $SC_messproc_I91 = messproc_g%dim_1%EX
 1786.                $SC_messproc_I92 = messproc_g%dim_1%LB
 1786.                $SC_messproc_I94 = messproc_g%dim_2%SM
 1786.                $SC_messproc_I93 = messproc_g%dim_2%EX
 1786.                $SC_messproc_I95 = messproc_g%dim_2%LB
 1785.                $I_L1785_257 = 0
 1785. !dir$ ivdep
 1785.                do
 1786.                   if ( (messproc_g%base_addr)(1, 1 + $I_L1785_257, 0) + -ksg == 0 ) then
 1792.                      t$806 = $I_L1785_257
 1785.                      l = ( 1 + $I_L1785_257 )
 1787.                      nglob = ( 1 + $I_L1785_257 )
 1788.                      ibglob = -1 + ibs(1 + $I_L1785_257)
 1789.                      mglob = (messproc_g%base_addr)(2, $I_L1785_257, 0)
 1789.                      goto 40
 1789.                   endif
 1792.                   $I_L1785_257 = 1 + $I_L1785_257
 1791.                   if ( $I_L1785_257 >= nrecs_g ) exit
 1791.                enddo
 1792.                t$806 = nrecs_g
 1792.                l = ( 1 + nrecs_g )
 1792.             endif
 1792.    40       continue
 1793.             iglob = 1
 1794.             ipar2g = 1 + mglob
 1795.             ipar3g = 1 + mglob
 1796.             $snt_T5 = _mt_endsingle( 8, _mt_rw_list(...), $snt_T5 )
 1799.             $kl_S28 = (klast_four%base_addr)(ksg, 0) + -(kfirst_four%base_addr)(ksg, 0) + 1
 1831.             $SC_grid2d_I118 = grid2d%dim_1%EX
 1831.             $SC_grid2d_I119 = grid2d%dim_1%LB
 1804.             $SC_surfgrid_I105 = surfgrid%dim_1%EX
 1804.             $SC_surfgrid_I106 = surfgrid%dim_1%LB
 1804.             $SC_kfirst_four_I101 = kfirst_four%dim_1%EX
 1804.             $SC_kfirst_four_I102 = kfirst_four%dim_1%LB
 1812.             $SC_messages_I96 = messages_g%dim_1%EX
 1812.             $SC_messages_I97 = messages_g%dim_1%LB
 1812.             $SC_messages_I99 = messages_g%dim_2%SM
 1812.             $SC_messages_I98 = messages_g%dim_2%EX
 1812.             $SC_messages_I100 = messages_g%dim_2%LB
 1814.             $SC_messproc_I91 = messproc_g%dim_1%EX
 1814.             $SC_messproc_I92 = messproc_g%dim_1%LB
 1814.             $SC_messproc_I94 = messproc_g%dim_2%SM
 1814.             $SC_messproc_I93 = messproc_g%dim_2%EX
 1814.             $SC_messproc_I95 = messproc_g%dim_2%LB
 1800.             do
 1801.                $snt_T6 = _mt_critical( 9, _mt_rw_list(...) )
 1803.                if ( iglob <= ngridfields ) then
 1802.                   $I_iglob_259 = 0
 1802. !dir$ ivdep
 1802.                   do
 1804.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_259, 0) == 0 ) then
 1804.                         goto 50
 1804.                      endif
 1804.                      if ( (kfirst_four%base_addr)(ksg, 0) == 1 ) then
 1804.    50                   continue
 1805.                         iglob = ( iglob + $I_iglob_259 )
 1805.                         goto 60
 1805.                      endif
 1803.                      $I_iglob_259 = 1 + $I_iglob_259
 1802.                      if ( $I_iglob_259 >= ngridfields + -iglob + 1 ) exit
 1802.                   enddo
 1805.                   iglob = ngridfields + -iglob + 1 + iglob
 1805.                endif
 1805.    60          continue
 1807.                $ig_S29 = iglob
 1808.                if ( iglob <= ngridfields ) then
 1809.                   ib = ibglob
 1810.                   if ( (surfgrid%base_addr)(iglob, 0) ) then
 1811.                      ipar = ipar2g
 1812.                      ibglob = ibglob + (messages_g%base_addr)(2, ipar2g, 0) + -(messages_g%base_addr)(1, ipar2g, 0) + 1
 1813.                      ipar2g = 1 + ipar2g
 1814.                      if ( ipar2g > (messproc_g%base_addr)(2, nglob, 0) ) then
 1815.                         ipar2g = 1 + mglob
 1816.                         iglob = 1 + iglob
 1816.                      endif
 1816.                   else
 1819.                      ipar = ipar3g
 1820.                      ibglob = ibglob + $kl_S28 + -( $kl_S28 * (messages_g%base_addr)(1, ipar3g, 0) ) + $kl_S28 * (messages_g%base_addr)(2, ipar3g, 0)
 1821.                      ipar3g = 1 + ipar3g
 1822.                      if ( ipar3g > (messproc_g%base_addr)(2, nglob, 0) ) then
 1823.                         ipar3g = 1 + mglob
 1824.                         iglob = 1 + iglob
 1824.                      endif
 1824.                   endif
 1824.                endif
 1828.                $snt_T6 = _mt_endcritical( 9, _mt_rw_list(...), $snt_T6 )
 1829.                if ( $ig_S29 > ngridfields ) goto 70
 1830.                if ( (surfgrid%base_addr)($ig_S29, 0) ) then
 1831.                   g2 = (grid2d%base_addr)($ig_S29, 0)%p
 1832.                   $j_S33 = (messages_g%base_addr)(3, ipar, 0)
 1834.                   $t_S30 = (messages_g%base_addr)(1, ipar, 0)
 1834.                   $t_S31 = (messages_g%base_addr)(2, ipar, 0)
 1834.                   if ( $t_S31 + -$t_S30 >= 0 ) then
 1836.                      $SC_g2_I125 = g2%dim_1%SM
 1836.                      $SC_g2_I124 = g2%dim_1%EX
 1836.                      $SC_g2_I126 = g2%dim_1%LB
 1836.                      $SC_ibperij_I127 = ibperij%dim_1%EX
 1836.                      $SC_ibperij_I128 = ibperij%dim_1%LB
 1836.                      $SC_ibperij_I130 = ibperij%dim_2%SM
 1836.                      $SC_ibperij_I129 = ibperij%dim_2%EX
 1836.                      $SC_ibperij_I131 = ibperij%dim_2%LB
 1836.                      $SC_g2_I133 = g2%dim_2%SM
 1836.                      $SC_g2_I132 = g2%dim_2%EX
 1836.                      $SC_g2_I134 = g2%dim_2%LB
 1836.                      $SC_jbperij_I135 = jbperij%dim_1%EX
 1836.                      $SC_jbperij_I136 = jbperij%dim_1%LB
 1836.                      $SC_jbperij_I138 = jbperij%dim_2%SM
 1836.                      $SC_jbperij_I137 = jbperij%dim_2%EX
 1836.                      $SC_jbperij_I139 = jbperij%dim_2%LB
 1836.                      $SC_bufsend_I149 = bufsend%dim_1%EX
 1836.                      $SC_bufsend_I150 = bufsend%dim_1%LB
 1834.                      $I_L1834_261 = 0
 1834. !dir$ ivdep
 1834.                      do
 1836.                         (g2%base_addr)((ibperij%base_addr)($t_S30 + $I_L1834_261, $j_S33, 0), (jbperij%base_addr)($t_S30 + $I_L1834_261, $j_S33, 0), 0) = (bufsend%base_addr)(ib + $I_L1834_261 + 1, 0)
 1837.                         $I_L1834_261 = 1 + $I_L1834_261
 1834.                         if ( $I_L1834_261 >= $t_S31 + -$t_S30 + 1 ) exit
 1834.                      enddo
 1835.                      ib = ( ib + $t_S31 + -$t_S30 + 1 )
 1835.                   endif
 1835.                else
 1839.                   g3 = (grid3d%base_addr)($ig_S29, 0)%p
 1840.                   $j_S33 = (messages_g%base_addr)(3, ipar, 0)
 1842.                   $t_S34 = (kfirst_four%base_addr)(ksg, 0)
 1842.                   $t_S35 = (klast_four%base_addr)(ksg, 0)
 1842.                   if ( $t_S35 + -$t_S34 >= 0 ) then
 1842.                      $SCA_messages_I64 = (messages_g%base_addr)(1, ipar, 0)
 1842.                      $SCA_messages_I65 = (messages_g%base_addr)(2, ipar, 0)
 1845.                      $SC_g3_I141 = g3%dim_1%SM
 1845.                      $SC_g3_I140 = g3%dim_1%EX
 1845.                      $SC_g3_I142 = g3%dim_1%LB
 1845.                      $SC_ibperij_I127 = ibperij%dim_1%EX
 1845.                      $SC_ibperij_I128 = ibperij%dim_1%LB
 1845.                      $SC_ibperij_I130 = ibperij%dim_2%SM
 1845.                      $SC_ibperij_I129 = ibperij%dim_2%EX
 1845.                      $SC_bufsend_I149 = bufsend%dim_1%EX
 1845.                      $SC_bufsend_I150 = bufsend%dim_1%LB
 1842.                      $I_L1842_275 = 0
 1842.                      do
 1843.                         if ( $SCA_messages_I65 + -$SCA_messages_I64 >= 0 ) then
 1845.                            $SC_ibperij_I131 = ibperij%dim_2%LB
 1843.                            $I_L1843_263 = 0
 1843. !dir$ ivdep
 1843.                            do
 1845.                               (g3%base_addr)((ibperij%base_addr)($SCA_messages_I64 + $I_L1843_263, $j_S33, 0), $t_S34 + $I_L1842_275, (jbperij%base_addr)($SCA_messages_I64 + $I_L1843_263, $j_S33, 0), 0) = (bufsend%base_addr)(ib + $I_L1843_263 + 1, 0)
 1846.                               $I_L1843_263 = 1 + $I_L1843_263
 1843.                               if ( $I_L1843_263 >= $SCA_messages_I65 + -$SCA_messages_I64 + 1 ) exit
 1843.                            enddo
 1844.                            ib = ( ib + $SCA_messages_I65 + -$SCA_messages_I64 + 1 )
 1844.                         endif
 1847.                         $I_L1842_275 = 1 + $I_L1842_275
 1846.                         if ( $I_L1842_275 >= $t_S35 + -$t_S34 + 1 ) exit
 1846.                      enddo
 1846.                   endif
 1846.                endif
 1848.             enddo
 1848.    70       continue
 1850.             $snt_T7 = _mt_single( 10, _mt_rw_list(...) )
 1851.             kountg = 1 + kountg
 1852.             $snt_T7 = _mt_endsingle( 10, _mt_rw_list(...), $snt_T7 )
 1850.             if ( kountg > nrecs_g ) exit
 1850.          enddo
 1850.       endif
 1857.       $snt_T8 = _mt_single( 11, _mt_rw_list(...) )
 1858.       call mpi_waitall( nrecs_f, (requests%base_addr)(1, 0), (stat%base_addr)(stat%dim_1%LB, stat%dim_2%LB, 0), ierr )
 1859.       $snt_T8 = _mt_endsingle( 11, _mt_rw_list(...), $snt_T8 )
 1606.       _free( t$233 )
 1861.       return
 1861.       end
 1861.       
 1921.       
 1921.       subroutine creategridtospec( nfull, nsurf )
 1878.       nfull_g = nfull
 1879.       nsurf_g = nsurf
 1881.       nspecfields = nfull + cvmg( nsurf, 0, havesurf )
 1882.       usedspecfields = 0
 1883.       lastusedspecvert = 0
 1884.       surfspec%header%a_contig = 1
 1884.       surfspec%dim_1%LB = 1
 1884.       surfspec%dim_1%EX = _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) )
 1884.       surfspec%dim_1%SM = 1
 1884.       $_allo_P0(0) = 0x1000000000001L
 1884.       $_allo_P0(1) = loc( surfspec )
 1884.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 1885.       prevspec%header%a_contig = 1
 1885.       prevspec%dim_1%LB = 1
 1885.       prevspec%dim_1%EX = _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) )
 1885.       prevspec%dim_1%SM = 1
 1885.       $_allo_P1(0) = 0x1000000000001L
 1885.       $_allo_P1(1) = loc( prevspec )
 1885.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 1886.       spec1d%header%a_contig = 1
 1886.       spec1d%dim_1%LB = 1
 1886.       spec1d%dim_1%EX = _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) )
 1886.       spec1d%dim_1%SM = 9
 1886.       $_allo_P2(0) = 0x1000000000001L
 1886.       $_allo_P2(1) = loc( spec1d )
 1886.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1886.       if ( nfull + cvmg( nsurf, 0, havesurf ) > 0 ) then
 1886.          $I_L1886_16 = 0
 1886. !dir$ novector
 1886. !dir$ nextscalar
 1886. !dir$ rsi.nextscalar
 1886. !dir$ unroll 2
 1886.          do
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%el_len = 64
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%assoc = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%ptr_alloc = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%p_or_a = 1
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%a_contig = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%dv_versn = 2
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%dv_smunit = 64
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%d_type = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%n_params = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%pad_codim = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%n_codim = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%pad_dim = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%n_dim = 1
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%d_type_idx = 13
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%typ_code = 134481411
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%orig_base = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%header%orig_size = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%dim_1%LB = 1
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%dim_1%EX = 0
 1886.             (spec1d%base_addr)(1 + $I_L1886_16, 0)%p%dim_1%SM = 1
 1886.             $I_L1886_16 = 1 + $I_L1886_16
 1886.             if ( $I_L1886_16 >= _zla( 0, ( nfull + cvmg( nsurf, 0, havesurf ) ) ) ) exit
 1886.          enddo
 1886.       endif
 1887.       spec2d%header%a_contig = 1
 1887.       spec2d%dim_1%LB = 1
 1887.       spec2d%dim_1%EX = ( max( 0, nfull + cvmg( nsurf, 0, havesurf ) ) )
 1887.       spec2d%dim_1%SM = 12
 1887.       $_allo_P3(0) = 0x1000000000001L
 1887.       $_allo_P3(1) = loc( spec2d )
 1887.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1887.       if ( nfull + cvmg( nsurf, 0, havesurf ) > 0 ) then
 1887.          $I_L1887_18 = 0
 1887. !dir$ novector
 1887. !dir$ nextscalar
 1887. !dir$ rsi.nextscalar
 1887. !dir$ unroll 2
 1887.          do
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%el_len = 64
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%assoc = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%ptr_alloc = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%p_or_a = 1
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%a_contig = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%dv_versn = 2
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%dv_smunit = 64
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%d_type = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%n_params = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%pad_codim = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%n_codim = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%pad_dim = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%n_dim = 2
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%d_type_idx = 13
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%typ_code = 134481411
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%orig_base = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%header%orig_size = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%dim_1%LB = 1
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%dim_1%EX = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%dim_1%SM = 1
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%dim_2%LB = 1
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%dim_2%EX = 0
 1887.             (spec2d%base_addr)(1 + $I_L1887_18, 0)%p%dim_2%SM = 1
 1887.             $I_L1887_18 = 1 + $I_L1887_18
 1887.             if ( $I_L1887_18 >= ( max( 0, nfull + cvmg( nsurf, 0, havesurf ) ) ) ) exit
 1887.          enddo
 1887.       endif
 1888.       nvertspec = cvmg( nsurf, 0, havesurf ) + nfull * kmaxloc
 1890.       ngridfields = nsurf + nfull
 1891.       usedgridfields = 0
 1892.       lastusedgridvert = 0
 1893.       surfgrid%header%a_contig = 1
 1893.       surfgrid%dim_1%LB = 1
 1893.       surfgrid%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1893.       surfgrid%dim_1%SM = 1
 1893.       $_allo_P4(0) = 0x1000000000001L
 1893.       $_allo_P4(1) = loc( surfgrid )
 1893.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 1894.       prevgrid%header%a_contig = 1
 1894.       prevgrid%dim_1%LB = 1
 1894.       prevgrid%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1894.       prevgrid%dim_1%SM = 1
 1894.       $_allo_P5(0) = 0x1000000000001L
 1894.       $_allo_P5(1) = loc( prevgrid )
 1894.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 1895.       grid2d%header%a_contig = 1
 1895.       grid2d%dim_1%LB = 1
 1895.       grid2d%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1895.       grid2d%dim_1%SM = 12
 1895.       $_allo_P6(0) = 0x1000000000001L
 1895.       $_allo_P6(1) = loc( grid2d )
 1895.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 1895.       if ( nsurf + nfull > 0 ) then
 1895.          $I_L1895_20 = 0
 1895. !dir$ novector
 1895. !dir$ nextscalar
 1895. !dir$ rsi.nextscalar
 1895. !dir$ unroll 2
 1895.          do
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%el_len = 64
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%assoc = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%ptr_alloc = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%p_or_a = 1
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%a_contig = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%dv_versn = 2
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%dv_smunit = 64
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%d_type = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%n_params = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%pad_codim = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%n_codim = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%pad_dim = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%n_dim = 2
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%d_type_idx = 13
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%typ_code = 134481411
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%orig_base = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%header%orig_size = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%dim_1%LB = 1
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%dim_1%EX = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%dim_1%SM = 1
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%dim_2%LB = 1
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%dim_2%EX = 0
 1895.             (grid2d%base_addr)(1 + $I_L1895_20, 0)%p%dim_2%SM = 1
 1895.             $I_L1895_20 = 1 + $I_L1895_20
 1895.             if ( $I_L1895_20 >= ( max( 0, nsurf + nfull ) ) ) exit
 1895.          enddo
 1895.       endif
 1896.       grid3d%header%a_contig = 1
 1896.       grid3d%dim_1%LB = 1
 1896.       grid3d%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1896.       grid3d%dim_1%SM = 15
 1896.       $_allo_P7(0) = 0x1000000000001L
 1896.       $_allo_P7(1) = loc( grid3d )
 1896.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 1896.       if ( nsurf + nfull > 0 ) then
 1896.          $I_L1896_22 = 0
 1896. !dir$ novector
 1896. !dir$ nextscalar
 1896. !dir$ rsi.nextscalar
 1896. !dir$ unroll 2
 1896.          do
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%el_len = 64
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%assoc = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%ptr_alloc = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%p_or_a = 1
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%a_contig = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%dv_versn = 2
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%dv_smunit = 64
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%d_type = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%n_params = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%pad_codim = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%n_codim = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%pad_dim = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%n_dim = 3
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%d_type_idx = 13
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%typ_code = 134481411
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%orig_base = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%header%orig_size = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_1%LB = 1
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_1%EX = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_1%SM = 1
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_2%LB = 1
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_2%EX = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_2%SM = 1
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_3%LB = 1
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_3%EX = 0
 1896.             (grid3d%base_addr)(1 + $I_L1896_22, 0)%p%dim_3%SM = 1
 1896.             $I_L1896_22 = 1 + $I_L1896_22
 1896.             if ( $I_L1896_22 >= ( max( 0, nsurf + nfull ) ) ) exit
 1896.          enddo
 1896.       endif
 1897.       fieldfordellam%header%a_contig = 1
 1897.       fieldfordellam%dim_1%LB = 1
 1897.       fieldfordellam%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1897.       fieldfordellam%dim_1%SM = 1
 1897.       $_allo_P8(0) = 0x1000000000001L
 1897.       $_allo_P8(1) = loc( fieldfordellam )
 1897.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 1898.       nvertgrid = cvmg( nsurf, 0, havesurf ) + nfull * kmaxloc
 1900.       willdellam = .false.
 1901.       useddellamfields = nfull + cvmg( nsurf, 0, havesurf )
 1902.       lastuseddellamvert = cvmg( nsurf, 0, havesurf ) + nfull * kmaxloc
 1903.       prevvertdellamsource%header%a_contig = 1
 1903.       prevvertdellamsource%dim_1%LB = 1
 1903.       prevvertdellamsource%dim_1%EX = ( max( 0, nsurf + nfull ) )
 1903.       prevvertdellamsource%dim_1%SM = 1
 1903.       $_allo_P9(0) = 0x1000000000001L
 1903.       $_allo_P9(1) = loc( prevvertdellamsource )
 1903.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 1905.       t$839 = nfull * kmaxloc * 2 + 2 * cvmg( nsurf, 0, havesurf )
 1905.       dv = nobankconflicts( t$839 )
 1906.       t$839 = nvertspec * jmaxhalf
 1906.       dvjh = nobankconflicts( t$839 )
 1907.       t$839 = nvertgrid * myjmax_f
 1907.       dvdlj = nobankconflicts( t$839 )
 1909.       spec%header%a_contig = 1
 1909.       spec%dim_1%LB = 1
 1909.       spec%dim_1%EX = ( max( 0, dlmn ) )
 1909.       spec%dim_1%SM = 1
 1909.       spec%dim_2%LB = 1
 1909.       spec%dim_2%EX = ( max( 0, dv ) )
 1909.       spec%dim_2%SM = ( max( 0, dlmn ) )
 1909.       $_allo_P10(0) = 0x1000000000001L
 1909.       $_allo_P10(1) = loc( spec )
 1909.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 1910.       four%header%a_contig = 1
 1910.       four%dim_1%LB = 1
 1910.       four%dim_1%EX = ( max( 0, dvdlj ) )
 1910.       four%dim_1%SM = 1
 1910.       four%dim_2%LB = 1
 1910.       four%dim_2%EX = ( max( 0, dip1 ) )
 1910.       four%dim_2%SM = ( max( 0, dvdlj ) )
 1910.       $_allo_P11(0) = 0x1000000000001L
 1910.       $_allo_P11(1) = loc( four )
 1910.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 1911.       mnodes%header%a_contig = 1
 1911.       mnodes%dim_1%LB = 0
 1911.       mnodes%dim_1%EX = ( max( 0, maxnodes_four ) )
 1911.       mnodes%dim_1%SM = 1
 1911.       $_allo_P12(0) = 0x1000000000001L
 1911.       $_allo_P12(1) = loc( mnodes )
 1911.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 1921.       return
 1921.       end
 1921.       
 2008.       
 2008.       subroutine dogridtospec
  438.       if ( t$197 == 0 ) then
  438.          t$246(1) = 3
  438.          t$247(1) = 0
  438.          t$248(1) = 2
  438.          t$243(1) = int( loc( t$196 ), 8 )
  438.          t$244(1) = 0
  438.          t$245(1) = int( loc( t$241 ), 8 )
  438.          t$197 = __get_dynamic_type( 3, t$243(1), t$246(1), 1, t$244(1), t$245(1), t$247(1), t$248(1) )
  438.       endif
  438.       p%header%el_len = 1344
  438.       p%header%assoc = 0
  438.       p%header%ptr_alloc = 0
  438.       p%header%p_or_a = 1
  438.       p%header%a_contig = 0
  438.       p%header%dv_versn = 2
  438.       p%header%dv_smunit = 64
  438.       p%header%d_type = 0
  438.       p%header%n_params = 0
  438.       p%header%pad_codim = 0
  438.       p%header%n_codim = 0
  438.       p%header%pad_dim = 0
  438.       p%header%n_dim = 0
  438.       p%header%d_type_idx = t$197
  438.       p%header%typ_code = 8
  438.       p%header%orig_base = 0
  438.       p%header%orig_size = 0
 1947.       if ( nspecfields + -usedspecfields /= 0 ) then
 1948.          $Unit_temp_O0 = nfprt
 1948.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$127,  _substr(t$126,1,46), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DoGridToSpec)**', 0x800600000000L ) ) )
 1949.           _substr(t$841,1,18) = '**(DoGridToSpec)**'
 1949.          call _stop(  _substr(t$841,1,18) )
 1950.       else if ( ngridfields + -usedgridfields /= 0 ) then
 1951.          $Unit_temp_O1 = nfprt
 1951.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$129,  _substr(t$128,1,43), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DoGridToSpec)**', 0x800600000000L ) ) )
 1952.           _substr(t$842,1,18) = '**(DoGridToSpec)**'
 1952.          call _stop(  _substr(t$842,1,18) )
 1952.       else
 1957.           _substr(t$843,1,12) = 'DoGridToSpec'
 1957.          ipa$161 = 1
 1957.          call threaddecomp( ipa$161, mymnmax, mnfirst, mnlast,  _substr(t$843,1,12) )
 1958.           _substr(t$844,1,12) = 'DoGridToSpec'
 1958.          ipa$163 = 1
 1958.          call threaddecomp( ipa$163, mymnextmax, mnextfirst, mnextlast,  _substr(t$844,1,12) )
 1959.           _substr(t$845,1,12) = 'DoGridToSpec'
 1959.          ipa$165 = 1
 1959.          call threaddecomp( ipa$165, jbmax, jbfirst, jblast,  _substr(t$845,1,12) )
 1964.          call depositgrid
 1965.          _mt_barrier( 1, _mt_rw_list(...) )
 1969.          $t_S1 = nblockfft
 1969.          if ( nblockfft > 0 ) then
 1969.             $I_L1969_62 = 0
 1969.             do
 1970.                p%header%a_contig = 0
 1970.                p%header%assoc = 1
 1970.                p%header%d_type_idx = t$197
 1970.                p%header%ptr_alloc = blockfft%header%ptr_alloc
 1970.                p%header%orig_base = blockfft%header%orig_base
 1970.                p%header%orig_size = blockfft%header%orig_size
 1970.                p%base_addr = loc( (blockfft%base_addr)(1 + $I_L1969_62, 0) )
 1971.                first = -nvertgrid + nvertgrid * (blockfft%base_addr)(1 + $I_L1969_62, 0)%firstlat + 1
 1972.                last = nvertgrid * (blockfft%base_addr)(1 + $I_L1969_62, 0)%lastlat
 1973.                 _substr(t$849,1,12) = 'DoGridToSpec'
 1973.                call threaddecomp( first, last, fftfirst, fftlast,  _substr(t$849,1,12) )
 1974.                fftsize = fftlast + -fftfirst + 1
 1975.                if ( fftlast + -fftfirst >= 0 ) then
 1976.                   if ( tamblock == 0 ) then
 1978.                      t$851 = 0
 1978.                      t$854 = 0
 1978.                      if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1978. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1978.                         t$850 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1978.                      else
 1978.                         t$851 = (p%base_addr)(0)%trigs%dim_1%EX
 1978.                         t$854 = int( _alloc( max( 0, 8 * max( 0, t$851 ) ) ), 8 )
 1978.                         $F_A33 = t$851
 1978.                         if ( t$851 > 0 ) then
 1978.                            $SCA_p_I5 = (p%base_addr)(0)%trigs%dim_1%SM
 1978.                            $SCA_p_I6 = (p%base_addr)(0)%trigs%dim_1%LB
 1978.                            $SCA_p_I7 = (p%base_addr)(0)%trigs%dim_1%EX
 1978.                            $I_L1978_52 = 0
 1978. !dir$ ivdep
 1978.                            do
 1978.                               t$853(1 + $I_L1978_52) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I6 + $I_L1978_52, 0)
 1978.                               $I_L1978_52 = 1 + $I_L1978_52
 1978.                               if ( $I_L1978_52 >= $F_A33 ) exit
 1978.                            enddo
 1978.                         endif
 1978. !dir$ suppress t$853
 1978.                         t$850 = loc( t$853 )
 1978.                      endif
 1978.                      t$856 = 0
 1978.                      t$859 = 0
 1978.                      if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1978. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1978.                         t$855 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1978.                      else
 1978.                         t$856 = (p%base_addr)(0)%factors%dim_1%EX
 1978.                         t$859 = int( _alloc( max( 0, 4 * max( 0, t$856 ) ) ), 8 )
 1978.                         $F_A34 = t$856
 1978.                         if ( t$856 > 0 ) then
 1978.                            $SCA_p_I8 = (p%base_addr)(0)%factors%dim_1%SM
 1978.                            $SCA_p_I9 = (p%base_addr)(0)%factors%dim_1%LB
 1978.                            $SCA_p_I10 = (p%base_addr)(0)%factors%dim_1%EX
 1978.                            $I_L1978_54 = 0
 1978. !dir$ ivdep
 1978.                            do
 1978.                               t$858(1 + $I_L1978_54) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I9 + $I_L1978_54, 0)
 1978.                               $I_L1978_54 = 1 + $I_L1978_54
 1978.                               if ( $I_L1978_54 >= $F_A34 ) exit
 1978.                            enddo
 1978.                         endif
 1978. !dir$ suppress t$858
 1978.                         t$855 = loc( t$858 )
 1978.                      endif
 1977.                      call dirffttrans( (four%base_addr)(fftfirst, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, fftsize, t$850, (p%base_addr)(0)%ntrigs, t$855, (p%base_addr)(0)%nfactors )
 1978.                      if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1978.                         _free( t$859 )
 1978.                      endif
 1978.                      if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1978.                         _free( t$854 )
 1978.                      endif
 1978.                   else
 1981.                      $Trips01_N1 = cvmg( 0x7fffffffffffffffL, ( fftlast + tamblock + -fftfirst ) / tamblock, tamblock < 0 )
 1984.                      $SC_four_I17 = four%dim_1%EX
 1984.                      $SC_four_I18 = four%dim_1%LB
 1984.                      $SC_four_I20 = four%dim_2%SM
 1984.                      $SC_four_I19 = four%dim_2%EX
 1984.                      $SC_four_I21 = four%dim_2%LB
 1981.                      $I_firstblock_60 = 0
 1981.                      do
 1983.                         sizeblock = ( min( fftlast, ( fftfirst + tamblock + tamblock * $I_firstblock_60 + -1 ) ) + -fftfirst + -( tamblock * $I_firstblock_60 ) + 1 )
 1985.                         t$861 = 0
 1985.                         t$864 = 0
 1985.                         if ( (p%base_addr)(0)%trigs%header%a_contig == 1 ) then
 1985. !dir$ suppress ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0)
 1985.                            t$860 = loc( ((p%base_addr)(0)%trigs%base_addr)((p%base_addr)(0)%trigs%dim_1%LB, 0) )
 1985.                         else
 1985.                            t$861 = (p%base_addr)(0)%trigs%dim_1%EX
 1985.                            t$864 = int( _alloc( max( 0, 8 * max( 0, t$861 ) ) ), 8 )
 1985.                            $F_A35 = t$861
 1985.                            if ( t$861 > 0 ) then
 1985.                               $SCA_p_I11 = (p%base_addr)(0)%trigs%dim_1%SM
 1985.                               $SCA_p_I12 = (p%base_addr)(0)%trigs%dim_1%LB
 1985.                               $SCA_p_I13 = (p%base_addr)(0)%trigs%dim_1%EX
 1985.                               $I_L1985_56 = 0
 1985. !dir$ ivdep
 1985.                               do
 1985.                                  t$863(1 + $I_L1985_56) = ((p%base_addr)(0)%trigs%base_addr)($SCA_p_I12 + $I_L1985_56, 0)
 1985.                                  $I_L1985_56 = 1 + $I_L1985_56
 1985.                                  if ( $I_L1985_56 >= $F_A35 ) exit
 1985.                               enddo
 1985.                            endif
 1985. !dir$ suppress t$863
 1985.                            t$860 = loc( t$863 )
 1985.                         endif
 1985.                         t$866 = 0
 1985.                         t$869 = 0
 1985.                         if ( (p%base_addr)(0)%factors%header%a_contig == 1 ) then
 1985. !dir$ suppress ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0)
 1985.                            t$865 = loc( ((p%base_addr)(0)%factors%base_addr)((p%base_addr)(0)%factors%dim_1%LB, 0) )
 1985.                         else
 1985.                            t$866 = (p%base_addr)(0)%factors%dim_1%EX
 1985.                            t$869 = int( _alloc( max( 0, 4 * max( 0, t$866 ) ) ), 8 )
 1985.                            $F_A36 = t$866
 1985.                            if ( t$866 > 0 ) then
 1985.                               $SCA_p_I14 = (p%base_addr)(0)%factors%dim_1%SM
 1985.                               $SCA_p_I15 = (p%base_addr)(0)%factors%dim_1%LB
 1985.                               $SCA_p_I16 = (p%base_addr)(0)%factors%dim_1%EX
 1985.                               $I_L1985_58 = 0
 1985. !dir$ ivdep
 1985.                               do
 1985.                                  t$868(1 + $I_L1985_58) = ((p%base_addr)(0)%factors%base_addr)($SCA_p_I15 + $I_L1985_58, 0)
 1985.                                  $I_L1985_58 = 1 + $I_L1985_58
 1985.                                  if ( $I_L1985_58 >= $F_A36 ) exit
 1985.                               enddo
 1985.                            endif
 1985. !dir$ suppress t$868
 1985.                            t$865 = loc( t$868 )
 1985.                         endif
 1984.                         call dirffttrans( (four%base_addr)(fftfirst + tamblock * $I_firstblock_60, 1, 0), dvdlj, dip1, (p%base_addr)(0)%nlong, sizeblock, t$860, (p%base_addr)(0)%ntrigs, t$865, (p%base_addr)(0)%nfactors )
 1985.                         if ( (p%base_addr)(0)%factors%header%a_contig /= 1 ) then
 1985.                            _free( t$869 )
 1985.                         endif
 1985.                         if ( (p%base_addr)(0)%trigs%header%a_contig /= 1 ) then
 1985.                            _free( t$864 )
 1985.                         endif
 1987.                         $I_firstblock_60 = 1 + $I_firstblock_60
 1985.                         if ( $I_firstblock_60 >= $Trips01_N1 ) exit
 1985.                      enddo
 1985.                   endif
 1985.                endif
 1996.                $I_L1969_62 = 1 + $I_L1969_62
 1996.                if ( $I_L1969_62 >= $t_S1 ) exit
 1996.             enddo
 1996.          endif
 1998.          _mt_barrier( 2, _mt_rw_list(...) )
 2002.          call fourtospec
 2003.          _mt_barrier( 3, _mt_rw_list(...) )
 2007.          call withdrawspectral( mnfirst, mnlast, mnextfirst, mnextlast )
 2007.       endif
 2008.       return
 2008.       end
 2008.       
 2034.       
 2034.       subroutine depositgrid
 2035.       g2%dim_1%LB = 1
 2035.       g2%dim_1%EX = 0
 2035.       g2%dim_1%SM = 1
 2035.       g2%dim_2%LB = 1
 2035.       g2%dim_2%EX = 0
 2035.       g2%dim_2%SM = 1
 2014.       g3%dim_1%LB = 1
 2014.       g3%dim_1%EX = 0
 2014.       g3%dim_1%SM = 1
 2014.       g3%dim_2%LB = 1
 2014.       g3%dim_2%EX = 0
 2014.       g3%dim_2%SM = 1
 2014.       g3%dim_3%LB = 1
 2014.       g3%dim_3%EX = 0
 2014.       g3%dim_3%SM = 1
 2014.       t$130 = ( 1 + nrecs_f )
 2032.       t$250 = _zla( 0, ( 1 + nrecs_f ) )
 2032.       t$253 = 4 * _zla( 0, ( 1 + nrecs_f ) )
 2014.       t$131 = ( 1 + nrecs_g )
 2033.       t$254 = _zla( 0, ( 1 + nrecs_g ) )
 2033.       t$256 = 4 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) )
 2014.       t$251 = int( _alloc( 4 * _zla( 0, ( 1 + nrecs_f ) ) + 4 * _zla( 0, ( 1 + nrecs_g ) ) ), 8 )
 2032.       t$252 = t$251
 2033.       t$255 = t$251 + 4 * _zla( 0, ( 1 + nrecs_f ) )
 2037.       comm = 1140850688
 2038.       $m_S1 = 0
 2039.       ibr(1) = 1
 2040.       if ( nrecs_f > 0 ) then
 2043.          $SC_messages_I83 = messages_f%dim_1%EX
 2043.          $SC_messages_I84 = messages_f%dim_1%LB
 2043.          $SC_messages_I86 = messages_f%dim_2%SM
 2043.          $SC_messages_I85 = messages_f%dim_2%EX
 2043.          $SC_messages_I87 = messages_f%dim_2%LB
 2042.          $SC_messproc_I78 = messproc_f%dim_1%EX
 2042.          $SC_messproc_I79 = messproc_f%dim_1%LB
 2042.          $SC_messproc_I81 = messproc_f%dim_2%SM
 2042.          $SC_messproc_I80 = messproc_f%dim_2%EX
 2042.          $SC_messproc_I82 = messproc_f%dim_2%LB
 2040.          $I_L2040_284 = 0
 2040.          do
 2041.             ib = 0
 2042.             $t_S2 = (messproc_f%base_addr)(2, 1 + $I_L2040_284, 0)
 2042.             ipar = 1 + $m_S1
 2042.             if ( $t_S2 + -$m_S1 > 0 ) then
 2042.                $I_L2042_254 = 0
 2042. !dir$ ivdep
 2042.                do
 2043.                   ib = ib + (messages_f%base_addr)(2, $m_S1 + $I_L2042_254 + 1, 0) + -(messages_f%base_addr)(1, $m_S1 + $I_L2042_254 + 1, 0) + 1
 2044.                   $I_L2042_254 = 1 + $I_L2042_254
 2042.                   if ( $I_L2042_254 >= ( $t_S2 + -$m_S1 ) ) exit
 2042.                enddo
 2044.                ipar = 1 + $t_S2
 2044.             endif
 2045.             ibr(2 + $I_L2040_284) = ibr(1 + $I_L2040_284) + ib * nvertgrid
 2046.             $m_S1 = $t_S2
 2047.             $I_L2040_284 = 1 + $I_L2040_284
 2044.             if ( $I_L2040_284 >= nrecs_f ) exit
 2044.          enddo
 2044.       endif
 2048.       m = 0
 2049.       ibs(1) = 1
 2050.       n = 1
 2050.       if ( nrecs_g > 0 ) then
 2055.          $SC_kfirst_four_I98 = kfirst_four%dim_1%EX
 2055.          $SC_kfirst_four_I99 = kfirst_four%dim_1%LB
 2055.          $SC_klast_four_I100 = klast_four%dim_1%EX
 2055.          $SC_klast_four_I101 = klast_four%dim_1%LB
 2053.          $SC_messages_I93 = messages_g%dim_1%EX
 2053.          $SC_messages_I94 = messages_g%dim_1%LB
 2053.          $SC_messages_I96 = messages_g%dim_2%SM
 2053.          $SC_messages_I95 = messages_g%dim_2%EX
 2053.          $SC_messages_I97 = messages_g%dim_2%LB
 2052.          $SC_messproc_I88 = messproc_g%dim_1%EX
 2052.          $SC_messproc_I89 = messproc_g%dim_1%LB
 2052.          $SC_messproc_I91 = messproc_g%dim_2%SM
 2052.          $SC_messproc_I90 = messproc_g%dim_2%EX
 2052.          $SC_messproc_I92 = messproc_g%dim_2%LB
 2050.          $I_L2050_286 = 0
 2050.          do
 2051.             ib = 0
 2052.             $t_S5 = (messproc_g%base_addr)(2, 1 + $I_L2050_286, 0)
 2052.             ipar = 1 + m
 2052.             if ( $t_S5 + -m > 0 ) then
 2052.                $I_L2052_256 = 0
 2052. !dir$ ivdep
 2052.                do
 2053.                   ib = ib + (messages_g%base_addr)(2, m + $I_L2052_256 + 1, 0) + -(messages_g%base_addr)(1, m + $I_L2052_256 + 1, 0) + 1
 2054.                   $I_L2052_256 = 1 + $I_L2052_256
 2052.                   if ( $I_L2052_256 >= ( $t_S5 + -m ) ) exit
 2052.                enddo
 2054.                ipar = 1 + $t_S5
 2054.             endif
 2055.             k = (klast_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L2050_286, 0), 0) + -(kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L2050_286, 0), 0) + 1
 2056.             ns = 0
 2057.             if ( (kfirst_four%base_addr)((messproc_g%base_addr)(1, 1 + $I_L2050_286, 0), 0) == 1 ) then
 2057.                ns = nsurf_g
 2057.             endif
 2058.             ibs(2 + $I_L2050_286) = ibs(1 + $I_L2050_286) + ib * ns + ib * k * nfull_g
 2059.             m = $t_S5
 2060.             $I_L2050_286 = 1 + $I_L2050_286
 2057.             if ( $I_L2050_286 >= nrecs_g ) exit
 2057.          enddo
 2060.          n = ( 1 + nrecs_g )
 2060.       endif
 2061.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 2062.       if ( dimsendbuf < -1 + ibs(1 + nrecs_g) ) then
 2063.          dimsendbuf = ibs(1 + nrecs_g)
 2064.          $_allo_P0(0) = 0x1000000000001L
 2064.          $_allo_P0(1) = loc( bufsend )
 2064.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 2064.          bufsend%header%assoc = 0
 2065.          bufsend%header%a_contig = 1
 2065.          bufsend%dim_1%LB = 1
 2065.          bufsend%dim_1%EX = ( max( 0, dimsendbuf ) )
 2065.          bufsend%dim_1%SM = 1
 2065.          $_allo_P1(0) = 0x1000000000001L
 2065.          $_allo_P1(1) = loc( bufsend )
 2065.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 2065.       endif
 2067.       if ( dimrecbuf < -1 + ibr(1 + nrecs_f) ) then
 2068.          dimrecbuf = ibr(1 + nrecs_f)
 2069.          $_allo_P2(0) = 0x1000000000001L
 2069.          $_allo_P2(1) = loc( bufrec )
 2069.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 2069.          bufrec%header%assoc = 0
 2070.          bufrec%header%a_contig = 1
 2070.          bufrec%dim_1%LB = 1
 2070.          bufrec%dim_1%EX = ( max( 0, dimrecbuf ) )
 2070.          bufrec%dim_1%SM = 1
 2070.          $_allo_P3(0) = 0x1000000000001L
 2070.          $_allo_P3(1) = loc( bufrec )
 2070.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 2070.       endif
 2072.       t$884 = nrecs_f
 2072.       n = 1
 2072.       if ( nrecs_f > 0 ) then
 2072.          t$885 = nrecs_f
 2072.          $I_L2072_258 = 0
 2072.          do
 2073.             proc = (messproc_f%base_addr)(1, 1 + $I_L2072_258, 0)
 2074.             t$887 = ibr(2 + $I_L2072_258) + -ibr(1 + $I_L2072_258)
 2074.             call mpi_irecv( (bufrec%base_addr)(ibr(1 + $I_L2072_258), 0), t$887, 1275070495, proc, 77, comm, (requestr%base_addr)(1 + $I_L2072_258, 0), ierr )
 2076.             $I_L2072_258 = 1 + $I_L2072_258
 2076.             if ( $I_L2072_258 >= t$884 ) exit
 2076.          enddo
 2076.          t$886 = t$884
 2076.          n = ( 1 + t$884 )
 2076.       endif
 2077.       mglob = 0
 2078.       ibglob = 0
 2079.       ipar2g = 1
 2080.       ipar3g = 1
 2081.       kountg = 0
 2082.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 2083.       do
 2084.          $snt_T1 = _mt_single( 2, _mt_rw_list(...) )
 2085.          iglob = 1
 2086.          kountg = 1 + kountg
 2087.          $snt_T1 = _mt_endsingle( 2, _mt_rw_list(...), $snt_T1 )
 2088.          if ( kountg > nrecs_g ) goto 40
 2089.          n = kountg
 2090.          proc = (messproc_g%base_addr)(1, kountg, 0)
 2091.          kl = (klast_four%base_addr)(proc, 0) + -(kfirst_four%base_addr)(proc, 0) + 1
 2123.          $SC_grid2d_I104 = grid2d%dim_1%EX
 2123.          $SC_grid2d_I105 = grid2d%dim_1%LB
 2096.          $SC_surfgrid_I102 = surfgrid%dim_1%EX
 2096.          $SC_surfgrid_I103 = surfgrid%dim_1%LB
 2096.          $SC_kfirst_four_I98 = kfirst_four%dim_1%EX
 2096.          $SC_kfirst_four_I99 = kfirst_four%dim_1%LB
 2109.          $SC_messages_I93 = messages_g%dim_1%EX
 2109.          $SC_messages_I94 = messages_g%dim_1%LB
 2109.          $SC_messages_I96 = messages_g%dim_2%SM
 2109.          $SC_messages_I95 = messages_g%dim_2%EX
 2109.          $SC_messages_I97 = messages_g%dim_2%LB
 2105.          $SC_messproc_I88 = messproc_g%dim_1%EX
 2105.          $SC_messproc_I89 = messproc_g%dim_1%LB
 2105.          $SC_messproc_I91 = messproc_g%dim_2%SM
 2105.          $SC_messproc_I90 = messproc_g%dim_2%EX
 2105.          $SC_messproc_I92 = messproc_g%dim_2%LB
 2092.          do
 2093.             $snt_T2 = _mt_critical( 3, _mt_rw_list(...) )
 2095.             if ( iglob <= ngridfields ) then
 2094.                $I_iglob_260 = 0
 2094. !dir$ ivdep
 2094.                do
 2096.                   if ( (surfgrid%base_addr)(iglob + $I_iglob_260, 0) == 0 ) then
 2096.                      goto 10
 2096.                   endif
 2096.                   if ( (kfirst_four%base_addr)(proc, 0) == 1 ) then
 2096.    10                continue
 2097.                      iglob = ( iglob + $I_iglob_260 )
 2097.                      goto 20
 2097.                   endif
 2095.                   $I_iglob_260 = 1 + $I_iglob_260
 2094.                   if ( $I_iglob_260 >= ngridfields + -iglob + 1 ) exit
 2094.                enddo
 2097.                iglob = ngridfields + -iglob + 1 + iglob
 2097.             endif
 2097.    20       continue
 2099.             ig = iglob
 2100.             if ( iglob <= ngridfields ) then
 2101.                ib = ibglob
 2102.                if ( (surfgrid%base_addr)(iglob, 0) ) then
 2103.                   ipar = ipar2g
 2104.                   ipar2g = 1 + ipar2g
 2105.                   if ( ipar2g > (messproc_g%base_addr)(2, kountg, 0) ) then
 2106.                      ipar2g = 1 + mglob
 2107.                      iglob = 1 + iglob
 2107.                   endif
 2109.                   ibglob = ibglob + (messages_g%base_addr)(2, ipar, 0) + -(messages_g%base_addr)(1, ipar, 0) + 1
 2109.                else
 2111.                   ipar = ipar3g
 2112.                   ipar3g = 1 + ipar3g
 2113.                   if ( ipar3g > (messproc_g%base_addr)(2, kountg, 0) ) then
 2114.                      ipar3g = 1 + mglob
 2115.                      iglob = 1 + iglob
 2115.                   endif
 2117.                   ibglob = ibglob + kl + -( kl * (messages_g%base_addr)(1, ipar, 0) ) + kl * (messages_g%base_addr)(2, ipar, 0)
 2117.                endif
 2117.             endif
 2120.             $snt_T2 = _mt_endcritical( 3, _mt_rw_list(...), $snt_T2 )
 2121.             if ( ig > ngridfields ) goto 30
 2122.             if ( (surfgrid%base_addr)(ig, 0) ) then
 2123.                g2 = (grid2d%base_addr)(ig, 0)%p
 2124.                $j_S10 = (messages_g%base_addr)(3, ipar, 0)
 2125.                $t_S7 = (messages_g%base_addr)(1, ipar, 0)
 2125.                $t_S8 = (messages_g%base_addr)(2, ipar, 0)
 2125.                i = $t_S7
 2125.                if ( $t_S8 + -$t_S7 >= 0 ) then
 2127.                   $SC_g2_I107 = g2%dim_1%SM
 2127.                   $SC_g2_I106 = g2%dim_1%EX
 2127.                   $SC_g2_I108 = g2%dim_1%LB
 2127.                   $SC_ibperij_I109 = ibperij%dim_1%EX
 2127.                   $SC_ibperij_I110 = ibperij%dim_1%LB
 2127.                   $SC_ibperij_I112 = ibperij%dim_2%SM
 2127.                   $SC_ibperij_I111 = ibperij%dim_2%EX
 2127.                   $SC_ibperij_I113 = ibperij%dim_2%LB
 2127.                   $SC_g2_I115 = g2%dim_2%SM
 2127.                   $SC_g2_I114 = g2%dim_2%EX
 2127.                   $SC_g2_I116 = g2%dim_2%LB
 2127.                   $SC_jbperij_I117 = jbperij%dim_1%EX
 2127.                   $SC_jbperij_I118 = jbperij%dim_1%LB
 2127.                   $SC_jbperij_I120 = jbperij%dim_2%SM
 2127.                   $SC_jbperij_I119 = jbperij%dim_2%EX
 2127.                   $SC_jbperij_I121 = jbperij%dim_2%LB
 2127.                   $SC_bufsend_I122 = bufsend%dim_1%EX
 2127.                   $SC_bufsend_I123 = bufsend%dim_1%LB
 2125.                   $I_L2125_262 = 0
 2125. !dir$ ivdep
 2125.                   do
 2127.                      (bufsend%base_addr)(ib + $I_L2125_262 + 1, 0) = (g2%base_addr)((ibperij%base_addr)($t_S7 + $I_L2125_262, $j_S10, 0), (jbperij%base_addr)($t_S7 + $I_L2125_262, $j_S10, 0), 0)
 2128.                      $I_L2125_262 = 1 + $I_L2125_262
 2125.                      if ( $I_L2125_262 >= $t_S8 + -$t_S7 + 1 ) exit
 2125.                   enddo
 2126.                   ib = ( ib + $t_S8 + -$t_S7 + 1 )
 2128.                   i = 1 + $t_S8
 2128.                endif
 2128.             else
 2130.                g3 = (grid3d%base_addr)(ig, 0)%p
 2131.                $j_S10 = (messages_g%base_addr)(3, ipar, 0)
 2132.                $t_S11 = (kfirst_four%base_addr)(proc, 0)
 2132.                $t_S12 = (klast_four%base_addr)(proc, 0)
 2132.                if ( $t_S12 + -$t_S11 >= 0 ) then
 2133.                   $SC_messages_I65 = (messages_g%base_addr)(1, ipar, 0)
 2133.                   $SC_messages_I66 = (messages_g%base_addr)(2, ipar, 0)
 2135.                   $SC_g3_I125 = g3%dim_1%SM
 2135.                   $SC_g3_I124 = g3%dim_1%EX
 2135.                   $SC_g3_I126 = g3%dim_1%LB
 2135.                   $SC_g3_I128 = g3%dim_2%SM
 2135.                   $SC_g3_I127 = g3%dim_2%EX
 2135.                   $SC_g3_I129 = g3%dim_2%LB
 2135.                   $SC_g3_I131 = g3%dim_3%SM
 2135.                   $SC_g3_I130 = g3%dim_3%EX
 2135.                   $SC_g3_I132 = g3%dim_3%LB
 2135.                   $SC_ibperij_I109 = ibperij%dim_1%EX
 2135.                   $SC_ibperij_I110 = ibperij%dim_1%LB
 2135.                   $SC_ibperij_I112 = ibperij%dim_2%SM
 2135.                   $SC_ibperij_I111 = ibperij%dim_2%EX
 2135.                   $SC_ibperij_I113 = ibperij%dim_2%LB
 2135.                   $SC_jbperij_I117 = jbperij%dim_1%EX
 2135.                   $SC_jbperij_I118 = jbperij%dim_1%LB
 2135.                   $SC_jbperij_I119 = jbperij%dim_2%EX
 2132.                   $I_L2132_288 = 0
 2132.                   do
 2133.                      i = $SC_messages_I65
 2133.                      if ( $SC_messages_I66 + -$SC_messages_I65 >= 0 ) then
 2135.                         $SC_jbperij_I120 = jbperij%dim_2%SM
 2133.                         $I_L2133_264 = 0
 2133. !dir$ ivdep
 2133.                         do
 2135.                            (bufsend%base_addr)(ib + $I_L2133_264 + 1, 0) = (g3%base_addr)((ibperij%base_addr)($SC_messages_I65 + $I_L2133_264, $j_S10, 0), $t_S11 + $I_L2132_288, (jbperij%base_addr)($SC_messages_I65 + $I_L2133_264, $j_S10, 0), 0)
 2136.                            $I_L2133_264 = 1 + $I_L2133_264
 2133.                            if ( $I_L2133_264 >= $SC_messages_I66 + -$SC_messages_I65 + 1 ) exit
 2133.                         enddo
 2134.                         ib = ( ib + $SC_messages_I66 + -$SC_messages_I65 + 1 )
 2136.                         i = 1 + $SC_messages_I66
 2136.                      endif
 2137.                      $I_L2132_288 = 1 + $I_L2132_288
 2136.                      if ( $I_L2132_288 >= $t_S12 + -$t_S11 + 1 ) exit
 2136.                   enddo
 2136.                endif
 2136.             endif
 2138.          enddo
 2138.    30    continue
 2140.          _mt_barrier( 4, _mt_rw_list(...) )
 2141.          $snt_T3 = _mt_single( 5, _mt_rw_list(...) )
 2142.          t$887 = ibs(1 + n) + -ibs(n)
 2142.          call mpi_isend( (bufsend%base_addr)(ibs(n), 0), t$887, 1275070495, proc, 77, comm, (requests%base_addr)(n, 0), ierr )
 2144.          mglob = (messproc_g%base_addr)(2, n, 0)
 2145.          ipar2g = 1 + mglob
 2146.          ipar3g = 1 + mglob
 2147.          $snt_T3 = _mt_endsingle( 5, _mt_rw_list(...), $snt_T3 )
 2144.       enddo
 2144.    40 continue
 2149.       $snt_T4 = _mt_single( 6, _mt_rw_list(...) )
 2150.       iglob = 1
 2151.       jglob = max( myfirstlat, myfirstlat_f )
 2152.       $snt_T4 = _mt_endsingle( 6, _mt_rw_list(...), $snt_T4 )
 2156.       if ( max( myfirstlat, myfirstlat_f ) <= min( mylastlat, mylastlat_f ) ) then
 2180.          $SC_mylastlon_I139 = mylastlon%dim_1%EX
 2180.          $SC_mylastlon_I140 = mylastlon%dim_1%LB
 2180.          $SC_myfirstlon_I137 = myfirstlon%dim_1%EX
 2180.          $SC_myfirstlon_I138 = myfirstlon%dim_1%LB
 2179.          $SC_prevgrid_I135 = prevgrid%dim_1%EX
 2179.          $SC_prevgrid_I136 = prevgrid%dim_1%LB
 2179.          $SC_previousj_I133 = previousj%dim_1%EX
 2179.          $SC_previousj_I134 = previousj%dim_1%LB
 2181.          $SC_ibperij_I109 = ibperij%dim_1%EX
 2181.          $SC_ibperij_I110 = ibperij%dim_1%LB
 2181.          $SC_ibperij_I112 = ibperij%dim_2%SM
 2181.          $SC_ibperij_I111 = ibperij%dim_2%EX
 2181.          $SC_ibperij_I113 = ibperij%dim_2%LB
 2181.          $SC_jbperij_I117 = jbperij%dim_1%EX
 2181.          $SC_jbperij_I118 = jbperij%dim_1%LB
 2178.          $SC_grid2d_I104 = grid2d%dim_1%EX
 2178.          $SC_grid2d_I105 = grid2d%dim_1%LB
 2161.          $SC_surfgrid_I102 = surfgrid%dim_1%EX
 2161.          $SC_surfgrid_I103 = surfgrid%dim_1%LB
 2157.          do
 2158.             $snt_T5 = _mt_critical( 7, _mt_rw_list(...) )
 2161.             if ( myfirstlev /= 1 ) then
 2160.                if ( iglob <= ngridfields ) then
 2159.                   $I_iglob_266 = 0
 2159. !dir$ ivdep
 2159.                   do
 2161.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_266, 0) == 0 ) then
 2162.                         iglob = ( iglob + $I_iglob_266 )
 2162.                         goto 50
 2162.                      endif
 2160.                      $I_iglob_266 = 1 + $I_iglob_266
 2159.                      if ( $I_iglob_266 >= ngridfields + -iglob + 1 ) exit
 2159.                   enddo
 2162.                   iglob = ngridfields + -iglob + 1 + iglob
 2162.                endif
 2162.             endif
 2162.    50       continue
 2164.             $ig_S17 = iglob
 2165.             if ( iglob <= ngridfields ) then
 2166.                j = jglob
 2167.                if ( jglob >= min( mylastlat, mylastlat_f ) ) then
 2168.                   iglob = 1 + iglob
 2169.                   jglob = max( myfirstlat, myfirstlat_f )
 2169.                else
 2171.                   jglob = 1 + jglob
 2171.                endif
 2171.             endif
 2174.             $snt_T5 = _mt_endcritical( 7, _mt_rw_list(...), $snt_T5 )
 2175.             if ( $ig_S17 > ngridfields ) goto 60
 2177.             if ( (surfgrid%base_addr)($ig_S17, 0) ) then
 2178.                g2 = (grid2d%base_addr)($ig_S17, 0)%p
 2179.                $v0_S21 = (prevgrid%base_addr)($ig_S17, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 2180.                $t_S18 = (myfirstlon%base_addr)(j, 0)
 2180.                $t_S19 = (mylastlon%base_addr)(j, 0)
 2180.                i = $t_S18
 2180.                if ( $t_S19 + -$t_S18 >= 0 ) then
 2181.                   $SC_four_I141 = four%dim_1%EX
 2181.                   $SC_four_I142 = four%dim_1%LB
 2181.                   $SC_four_I144 = four%dim_2%SM
 2181.                   $SC_four_I143 = four%dim_2%EX
 2181.                   $SC_four_I145 = four%dim_2%LB
 2181.                   $SC_g2_I107 = g2%dim_1%SM
 2181.                   $SC_g2_I106 = g2%dim_1%EX
 2181.                   $SC_g2_I108 = g2%dim_1%LB
 2181.                   $SC_g2_I115 = g2%dim_2%SM
 2181.                   $SC_g2_I114 = g2%dim_2%EX
 2181.                   $SC_g2_I116 = g2%dim_2%LB
 2181.                   $SC_jbperij_I120 = jbperij%dim_2%SM
 2181.                   $SC_jbperij_I119 = jbperij%dim_2%EX
 2181.                   $SC_jbperij_I121 = jbperij%dim_2%LB
 2180.                   $I_L2180_268 = 0
 2180. !dir$ ivdep
 2180.                   do
 2181.                      (four%base_addr)(1 + $v0_S21, $t_S18 + $I_L2180_268, 0) = (g2%base_addr)((ibperij%base_addr)($t_S18 + $I_L2180_268, j, 0), (jbperij%base_addr)($t_S18 + $I_L2180_268, j, 0), 0)
 2182.                      $I_L2180_268 = 1 + $I_L2180_268
 2180.                      if ( $I_L2180_268 >= $t_S19 + -$t_S18 + 1 ) exit
 2180.                   enddo
 2182.                   i = 1 + $t_S19
 2182.                endif
 2182.             else
 2184.                g3 = (grid3d%base_addr)($ig_S17, 0)%p
 2185.                $v0_S22 = (prevgrid%base_addr)($ig_S17, 0) + nvertgrid * (previousj%base_addr)(j, 0)
 2186.                if ( mylastlev + -myfirstlev >= 0 ) then
 2186.                   $SCA_myfirstlon_I57 = (myfirstlon%base_addr)(j, 0)
 2186.                   $SCA_mylastlon_I58 = (mylastlon%base_addr)(j, 0)
 2189.                   $SC_four_I141 = four%dim_1%EX
 2189.                   $SC_four_I142 = four%dim_1%LB
 2189.                   $SC_four_I144 = four%dim_2%SM
 2189.                   $SC_four_I143 = four%dim_2%EX
 2189.                   $SC_four_I145 = four%dim_2%LB
 2189.                   $SC_g3_I125 = g3%dim_1%SM
 2189.                   $SC_g3_I124 = g3%dim_1%EX
 2189.                   $SC_g3_I126 = g3%dim_1%LB
 2189.                   $SC_g3_I128 = g3%dim_2%SM
 2189.                   $SC_g3_I127 = g3%dim_2%EX
 2189.                   $SC_g3_I129 = g3%dim_2%LB
 2189.                   $SC_g3_I131 = g3%dim_3%SM
 2189.                   $SC_g3_I130 = g3%dim_3%EX
 2189.                   $SC_g3_I132 = g3%dim_3%LB
 2189.                   $SC_jbperij_I120 = jbperij%dim_2%SM
 2189.                   $SC_jbperij_I119 = jbperij%dim_2%EX
 2189.                   $SC_jbperij_I121 = jbperij%dim_2%LB
 2186.                   $I_L2186_290 = 0
 2186.                   do
 2188.                      i = $SCA_myfirstlon_I57
 2188.                      if ( $SCA_mylastlon_I58 + -$SCA_myfirstlon_I57 >= 0 ) then
 2188.                         $I_L2188_270 = 0
 2188. !dir$ ivdep
 2188.                         do
 2189.                            (four%base_addr)($v0_S22 + $I_L2186_290 + 1, $SCA_myfirstlon_I57 + $I_L2188_270, 0) = (g3%base_addr)((ibperij%base_addr)($SCA_myfirstlon_I57 + $I_L2188_270, j, 0), myfirstlev + $I_L2186_290, (jbperij%base_addr)($SCA_myfirstlon_I57 + $I_L2188_270, j, 0), 0)
 2190.                            $I_L2188_270 = 1 + $I_L2188_270
 2188.                            if ( $I_L2188_270 >= $SCA_mylastlon_I58 + -$SCA_myfirstlon_I57 + 1 ) exit
 2188.                         enddo
 2190.                         i = 1 + $SCA_mylastlon_I58
 2190.                      endif
 2191.                      $I_L2186_290 = 1 + $I_L2186_290
 2190.                      if ( $I_L2186_290 >= mylastlev + -myfirstlev + 1 ) exit
 2190.                   enddo
 2190.                endif
 2190.             endif
 2192.          enddo
 2192.       endif
 2192.    60 continue
 2198.       $snt_T6 = _mt_single( 8, _mt_rw_list(...) )
 2199.       t$912 = 1 + 2 * imax
 2199.       t$913 = dip1
 2199.       i = 1 + 2 * imax
 2199.       if ( dip1 + -2 * imax > 0 ) then
 2199.          t$914 = ( dip1 + -2 * imax )
 2200.          $SC_four_I141 = four%dim_1%EX
 2200.          $SC_four_I142 = four%dim_1%LB
 2200.          $SC_four_I144 = four%dim_2%SM
 2200.          $SC_four_I143 = four%dim_2%EX
 2200.          $SC_four_I145 = four%dim_2%LB
 2199.          $I_L2199_292 = 0
 2199.          do
 2200.             $F_A33 = $SC_four_I141
 2200.             if ( $SC_four_I141 > 0 ) then
 2200.                $I_L2200_280 = 0
 2200. !dir$ ivdep
 2200.                do
 2200.                   (four%base_addr)($SC_four_I142 + $I_L2200_280, $I_L2199_292 + 2 * imax + 1, 0) = 0.0
 2200.                   $I_L2200_280 = 1 + $I_L2200_280
 2200.                   if ( $I_L2200_280 >= $F_A33 ) exit
 2200.                enddo
 2200.             endif
 2201.             $I_L2199_292 = 1 + $I_L2199_292
 2199.             if ( $I_L2199_292 >= ( dip1 + -2 * imax ) ) exit
 2199.          enddo
 2201.          t$915 = ( dip1 + -2 * imax )
 2201.          i = 1 + dip1
 2201.       endif
 2203.       t$916 = 1 + nvertgrid * myjmax_f
 2203.       t$917 = dvdlj
 2203.       j = 1 + nvertgrid * myjmax_f
 2203.       if ( dvdlj + -( nvertgrid * myjmax_f ) > 0 ) then
 2203.          t$918 = ( dvdlj + -( nvertgrid * myjmax_f ) )
 2204.          $SC_four_I141 = four%dim_1%EX
 2204.          $SC_four_I142 = four%dim_1%LB
 2204.          $SC_four_I144 = four%dim_2%SM
 2204.          $SC_four_I143 = four%dim_2%EX
 2204.          $SC_four_I145 = four%dim_2%LB
 2203.          $I_L2203_294 = 0
 2203.          do
 2204.             $F_A34 = $SC_four_I143
 2204.             if ( $SC_four_I143 > 0 ) then
 2204.                $I_L2204_282 = 0
 2204. !dir$ ivdep
 2204.                do
 2204.                   (four%base_addr)($I_L2203_294 + nvertgrid * myjmax_f + 1, $SC_four_I145 + $I_L2204_282, 0) = 0.0
 2204.                   $I_L2204_282 = 1 + $I_L2204_282
 2204.                   if ( $I_L2204_282 >= $F_A34 ) exit
 2204.                enddo
 2204.             endif
 2205.             $I_L2203_294 = 1 + $I_L2203_294
 2203.             if ( $I_L2203_294 >= ( dvdlj + -( nvertgrid * myjmax_f ) ) ) exit
 2203.          enddo
 2205.          t$919 = ( dvdlj + -( nvertgrid * myjmax_f ) )
 2205.          j = 1 + dvdlj
 2205.       endif
 2206.       kountg = 0
 2207.       $snt_T6 = _mt_endsingle( 8, _mt_rw_list(...), $snt_T6 )
 2209.       do
 2210.          $snt_T7 = _mt_single( 9, _mt_rw_list(...) )
 2211.          kountg = 1 + kountg
 2212.          $snt_T7 = _mt_endsingle( 9, _mt_rw_list(...), $snt_T7 )
 2213.          if ( kountg > nrecs_f ) goto 100
 2214.          $snt_T8 = _mt_single( 10, _mt_rw_list(...) )
 2215.          call mpi_waitany( nrecs_f, (requestr%base_addr)(1, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 2216.          ksg = (status%base_addr)(3, 0)
 2217.          t$920 = nrecs_f
 2217.          l = 1
 2217.          if ( nrecs_f > 0 ) then
 2217.             t$921 = nrecs_f
 2218.             $SC_messproc_I78 = messproc_f%dim_1%EX
 2218.             $SC_messproc_I79 = messproc_f%dim_1%LB
 2218.             $SC_messproc_I81 = messproc_f%dim_2%SM
 2218.             $SC_messproc_I80 = messproc_f%dim_2%EX
 2218.             $SC_messproc_I82 = messproc_f%dim_2%LB
 2217.             $I_L2217_272 = 0
 2217. !dir$ ivdep
 2217.             do
 2218.                if ( (messproc_f%base_addr)(1, 1 + $I_L2217_272, 0) + -ksg == 0 ) then
 2224.                   t$922 = $I_L2217_272
 2217.                   l = ( 1 + $I_L2217_272 )
 2219.                   nglob = ( 1 + $I_L2217_272 )
 2220.                   ibglob = -1 + ibr(1 + $I_L2217_272)
 2221.                   mglob = (messproc_f%base_addr)(2, $I_L2217_272, 0)
 2221.                   goto 70
 2221.                endif
 2224.                $I_L2217_272 = 1 + $I_L2217_272
 2223.                if ( $I_L2217_272 >= nrecs_f ) exit
 2223.             enddo
 2224.             t$922 = nrecs_f
 2224.             l = ( 1 + nrecs_f )
 2224.          endif
 2224.    70    continue
 2225.          iglob = 1
 2226.          ipar2g = 1 + mglob
 2227.          ipar3g = 1 + mglob
 2228.          $snt_T8 = _mt_endsingle( 10, _mt_rw_list(...), $snt_T8 )
 2269.          $SC_four_I141 = four%dim_1%EX
 2269.          $SC_four_I142 = four%dim_1%LB
 2269.          $SC_four_I144 = four%dim_2%SM
 2269.          $SC_four_I143 = four%dim_2%EX
 2269.          $SC_four_I145 = four%dim_2%LB
 2266.          $SC_prevgrid_I135 = prevgrid%dim_1%EX
 2266.          $SC_prevgrid_I136 = prevgrid%dim_1%LB
 2266.          $SC_previousj_I133 = previousj%dim_1%EX
 2266.          $SC_previousj_I134 = previousj%dim_1%LB
 2237.          $SC_surfgrid_I102 = surfgrid%dim_1%EX
 2237.          $SC_surfgrid_I103 = surfgrid%dim_1%LB
 2269.          $SC_bufrec_I146 = bufrec%dim_1%EX
 2269.          $SC_bufrec_I147 = bufrec%dim_1%LB
 2245.          $SC_messages_I83 = messages_f%dim_1%EX
 2245.          $SC_messages_I84 = messages_f%dim_1%LB
 2245.          $SC_messages_I86 = messages_f%dim_2%SM
 2245.          $SC_messages_I85 = messages_f%dim_2%EX
 2245.          $SC_messages_I87 = messages_f%dim_2%LB
 2247.          $SC_messproc_I78 = messproc_f%dim_1%EX
 2247.          $SC_messproc_I79 = messproc_f%dim_1%LB
 2247.          $SC_messproc_I81 = messproc_f%dim_2%SM
 2247.          $SC_messproc_I80 = messproc_f%dim_2%EX
 2247.          $SC_messproc_I82 = messproc_f%dim_2%LB
 2233.          do
 2234.             $snt_T9 = _mt_critical( 11, _mt_rw_list(...) )
 2237.             if ( havesurf == 0 ) then
 2236.                if ( iglob <= ngridfields ) then
 2235.                   $I_iglob_274 = 0
 2235. !dir$ ivdep
 2235.                   do
 2237.                      if ( (surfgrid%base_addr)(iglob + $I_iglob_274, 0) == 0 ) then
 2238.                         iglob = ( iglob + $I_iglob_274 )
 2238.                         goto 80
 2238.                      endif
 2236.                      $I_iglob_274 = 1 + $I_iglob_274
 2235.                      if ( $I_iglob_274 >= ngridfields + -iglob + 1 ) exit
 2235.                   enddo
 2238.                   iglob = ngridfields + -iglob + 1 + iglob
 2238.                endif
 2238.             endif
 2238.    80       continue
 2240.             $ig_S27 = iglob
 2241.             if ( iglob <= ngridfields ) then
 2242.                ib = ibglob
 2243.                if ( (surfgrid%base_addr)(iglob, 0) ) then
 2244.                   ipar = ipar2g
 2245.                   ibglob = ibglob + (messages_f%base_addr)(2, ipar2g, 0) + -(messages_f%base_addr)(1, ipar2g, 0) + 1
 2246.                   ipar2g = 1 + ipar2g
 2247.                   if ( ipar2g > (messproc_f%base_addr)(2, nglob, 0) ) then
 2248.                      ipar2g = 1 + mglob
 2249.                      iglob = 1 + iglob
 2249.                   endif
 2249.                else
 2252.                   ipar = ipar3g
 2253.                   ibglob = ibglob + kmaxloc + -( kmaxloc * (messages_f%base_addr)(1, ipar3g, 0) ) + kmaxloc * (messages_f%base_addr)(2, ipar3g, 0)
 2254.                   ipar3g = 1 + ipar3g
 2255.                   if ( ipar3g > (messproc_f%base_addr)(2, nglob, 0) ) then
 2256.                      ipar3g = 1 + mglob
 2257.                      iglob = 1 + iglob
 2257.                   endif
 2257.                endif
 2257.             endif
 2261.             $snt_T9 = _mt_endcritical( 11, _mt_rw_list(...), $snt_T9 )
 2262.             if ( $ig_S27 > ngridfields ) goto 90
 2264.             if ( (surfgrid%base_addr)($ig_S27, 0) ) then
 2265.                $j_S28 = (messages_f%base_addr)(3, ipar, 0)
 2266.                $v0_S31 = (prevgrid%base_addr)($ig_S27, 0) + nvertgrid * (previousj%base_addr)($j_S28, 0)
 2267.                $t_S29 = (messages_f%base_addr)(1, ipar, 0)
 2267.                $t_S30 = (messages_f%base_addr)(2, ipar, 0)
 2267.                if ( $t_S30 + -$t_S29 >= 0 ) then
 2267.                   $I_L2267_276 = 0
 2267. !dir$ ivdep
 2267.                   do
 2269.                      (four%base_addr)(1 + $v0_S31, $t_S29 + $I_L2267_276, 0) = (bufrec%base_addr)(ib + $I_L2267_276 + 1, 0)
 2270.                      $I_L2267_276 = 1 + $I_L2267_276
 2267.                      if ( $I_L2267_276 >= $t_S30 + -$t_S29 + 1 ) exit
 2267.                   enddo
 2268.                   ib = ( ib + $t_S30 + -$t_S29 + 1 )
 2268.                endif
 2268.             else
 2272.                $j_S28 = (messages_f%base_addr)(3, ipar, 0)
 2273.                $v0_S31 = (prevgrid%base_addr)($ig_S27, 0) + nvertgrid * (previousj%base_addr)($j_S28, 0)
 2274.                if ( kmaxloc > 0 ) then
 2275.                   $SC_messages_I77 = (messages_f%base_addr)(2, ipar, 0)
 2275.                   $SC_messages_I76 = (messages_f%base_addr)(1, ipar, 0)
 2274.                   $I_L2274_296 = 0
 2274.                   do
 2275.                      if ( $SC_messages_I77 + -$SC_messages_I76 >= 0 ) then
 2275.                         $I_L2275_278 = 0
 2275. !dir$ ivdep
 2275.                         do
 2277.                            (four%base_addr)($v0_S31 + $I_L2274_296 + 1, $SC_messages_I76 + $I_L2275_278, 0) = (bufrec%base_addr)(ib + $I_L2275_278 + 1, 0)
 2278.                            $I_L2275_278 = 1 + $I_L2275_278
 2275.                            if ( $I_L2275_278 >= $SC_messages_I77 + -$SC_messages_I76 + 1 ) exit
 2275.                         enddo
 2276.                         ib = ( ib + $SC_messages_I77 + -$SC_messages_I76 + 1 )
 2276.                      endif
 2279.                      $I_L2274_296 = 1 + $I_L2274_296
 2278.                      if ( $I_L2274_296 >= kmaxloc ) exit
 2278.                   enddo
 2278.                endif
 2278.             endif
 2280.          enddo
 2280.    90    continue
 2281.       enddo
 2281.   100 continue
 2284.       $snt_T10 = _mt_single( 12, _mt_rw_list(...) )
 2285.       call mpi_waitall( nrecs_g, (requests%base_addr)(1, 0), (stat%base_addr)(stat%dim_1%LB, stat%dim_2%LB, 0), ierr )
 2286.       $snt_T10 = _mt_endsingle( 12, _mt_rw_list(...), $snt_T10 )
 2014.       _free( t$251 )
 2288.       return
 2288.       end
 2288.       
 2293.       
 2293.       subroutine fourtospec
 2293.       t$132 = djh
 2293.       t$133 = dv
 2313.       t$257 = _zla( 0, djh )
 2293.       t$258 = _zla( 0, djh )
 2313.       t$259 = _zla( 0, dv )
 2293.       t$260 = _zla( 0, djh ) * _zla( 0, dv )
 2313.       t$263 = _zla( 0, djh ) * _zla( 0, dv ) * 8
 2314.       t$264 = _zla( 0, djh ) * _zla( 0, dv ) * 8
 2314.       t$266 = _zla( 0, djh ) * _zla( 0, dv ) * 16
 2293.       t$261 = int( _alloc( _zla( 0, djh ) * _zla( 0, dv ) * 16 ), 8 )
 2313.       t$262 = t$261
 2314.       t$265 = t$261 + _zla( 0, djh ) * _zla( 0, dv ) * 8
 2316.       kdim = nvertspec * myjmax_f * mmaxlocal * 2
 2317.       ldim = nvertspec * jmaxlocal_f * mymmax * 2
 2318.       $snt_T0 = _mt_single( 1, _mt_rw_list(...) )
 2319.       $F_A33 = mnodes%dim_1%EX
 2319.       if ( mnodes%dim_1%EX > 0 ) then
 2319.          $SC_mnodes_I51 = mnodes%dim_1%LB
 2319.          $I_L2319_260 = 0
 2319. !dir$ ivdep
 2319.          do
 2319.             (mnodes%base_addr)($SC_mnodes_I51 + $I_L2319_260, 0) = 0
 2319.             $I_L2319_260 = 1 + $I_L2319_260
 2319.             if ( $I_L2319_260 >= $F_A33 ) exit
 2319.          enddo
 2319.       endif
 2320.       mglob = 0
 2321.       if ( dimsendbuf < nvertspec * jmaxlocal_f * mymmax * maxnodes_four * 2 ) then
 2322.          dimsendbuf = nvertspec * jmaxlocal_f * mymmax * maxnodes_four * 2
 2323.          $_allo_P0(0) = 0x1000000000001L
 2323.          $_allo_P0(1) = loc( bufsend )
 2323.          call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 2323.          bufsend%header%assoc = 0
 2324.          bufsend%header%a_contig = 1
 2324.          bufsend%dim_1%LB = 1
 2324.          bufsend%dim_1%EX = ( max( 0, nvertspec * jmaxlocal_f * mymmax * maxnodes_four * 2 ) )
 2324.          bufsend%dim_1%SM = 1
 2324.          $_allo_P1(0) = 0x1000000000001L
 2324.          $_allo_P1(1) = loc( bufsend )
 2324.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 2324.       endif
 2326.       if ( dimrecbuf < nvertspec * myjmax_f * mmaxlocal * maxnodes_four * 2 ) then
 2327.          dimrecbuf = nvertspec * myjmax_f * mmaxlocal * maxnodes_four * 2
 2328.          $_allo_P2(0) = 0x1000000000001L
 2328.          $_allo_P2(1) = loc( bufrec )
 2328.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 2328.          bufrec%header%assoc = 0
 2329.          bufrec%header%a_contig = 1
 2329.          bufrec%dim_1%LB = 1
 2329.          bufrec%dim_1%EX = ( max( 0, nvertspec * myjmax_f * mmaxlocal * maxnodes_four * 2 ) )
 2329.          bufrec%dim_1%SM = 1
 2329.          $_allo_P3(0) = 0x1000000000001L
 2329.          $_allo_P3(1) = loc( bufrec )
 2329.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 2329.       endif
 2331.       $snt_T0 = _mt_endsingle( 1, _mt_rw_list(...), $snt_T0 )
 2348.       $SC_four_I62 = four%dim_1%EX
 2348.       $SC_four_I63 = four%dim_1%LB
 2348.       $SC_four_I65 = four%dim_2%SM
 2348.       $SC_four_I64 = four%dim_2%EX
 2348.       $SC_four_I66 = four%dim_2%LB
 2345.       $SC_jmaxperm_I60 = jmaxperm%dim_1%EX
 2345.       $SC_jmaxperm_I61 = jmaxperm%dim_1%LB
 2345.       $SC_jminperm_I58 = jminperm%dim_1%EX
 2345.       $SC_jminperm_I59 = jminperm%dim_1%LB
 2337.       $SC_nodehasm_I52 = nodehasm%dim_1%EX
 2337.       $SC_nodehasm_I53 = nodehasm%dim_1%LB
 2337.       $SC_nodehasm_I55 = nodehasm%dim_2%SM
 2337.       $SC_nodehasm_I54 = nodehasm%dim_2%EX
 2337.       $SC_nodehasm_I56 = nodehasm%dim_2%LB
 2348.       $SC_bufrec_I67 = bufrec%dim_1%EX
 2348.       $SC_bufrec_I68 = bufrec%dim_1%LB
 2358.       $SC_bufsend_I69 = bufsend%dim_1%EX
 2358.       $SC_bufsend_I70 = bufsend%dim_1%LB
 2338.       $SC_mnodes_I57 = mnodes%dim_1%EX
 2338.       $SC_mnodes_I51 = mnodes%dim_1%LB
 2332. !dir$ loop_info (automatic) cache_nt( nodehasm, mnodes )
 2332.       do
 2333.          $snt_T1 = _mt_critical( 2, _mt_rw_list(...) )
 2334.          mglob = 1 + mglob
 2335.          m = mglob
 2336.          if ( mglob <= mmax ) then
 2337.             kn = (nodehasm%base_addr)(mglob, mygroup_four, 0)
 2338.             (mnodes%base_addr)(kn, 0) = 1 + (mnodes%base_addr)(kn, 0)
 2339.             lm = (mnodes%base_addr)(kn, 0)
 2339.          endif
 2341.          $snt_T1 = _mt_endcritical( 2, _mt_rw_list(...), $snt_T1 )
 2342.          if ( m > mmax ) goto 10
 2343.          if ( myid_four + -kn /= 0 ) then
 2345.             $t_S0 = max( myfirstlat_f, (jminperm%base_addr)(m, 0) )
 2345.             $t_S1 = min( mylastlat_f, (jmaxperm%base_addr)(m, 0) )
 2345.             if ( $t_S1 + -$t_S0 >= 0 ) then
 2346.                if ( nvertspec > 0 ) then
 2345.                   $I_L2345_268 = 0
 2345.                   do
 2346.                      $CSVL_V1 = int( cvmg( myjmax_f * nvertgrid, 2, and( myjmax_f * nvertgrid > 0, and( myjmax_f * nvertgrid <= 2, myjmax_f * nvertgrid <= -1 + nvertspec ) ) ), 8 )
 2346.                      if ( $CSVL_V1 < 2 ) then
 2346.                         $I_L2346_244 = 0
 2346.                         do
 2348.                            (bufrec%base_addr)($I_L2346_244 + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + myjmax_f * nvertgrid * -2 + nvertspec * myjmax_f * mmaxlocal * kn * 2 + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, 0) = (four%base_addr)($I_L2346_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, -1 + 2 * m, 0)
 2350.                            (bufrec%base_addr)($I_L2346_244 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + nvertspec * myjmax_f * mmaxlocal * kn * 2 + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, 0) = (four%base_addr)($I_L2346_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, 2 * m, 0)
 2352.                            $I_L2346_244 = 1 + $I_L2346_244
 2346.                            if ( $I_L2346_244 >= nvertspec ) exit
 2346.                         enddo
 2346.                      else
 2346.                         $I_L2346_244 = 0
 2346. !dir$ ivdep safevl = $CSVL_V1 !   Guaranteed minimum :: 2
 2346.                         do
 2348.                            (bufrec%base_addr)($I_L2346_244 + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + myjmax_f * nvertgrid * -2 + nvertspec * myjmax_f * mmaxlocal * kn * 2 + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, 0) = (four%base_addr)($I_L2346_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, -1 + 2 * m, 0)
 2350.                            (bufrec%base_addr)($I_L2346_244 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + nvertspec * myjmax_f * mmaxlocal * kn * 2 + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, 0) = (four%base_addr)($I_L2346_244 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S0 + nvertgrid * $I_L2345_268 + 1, 2 * m, 0)
 2352.                            $I_L2346_244 = 1 + $I_L2346_244
 2346.                            if ( $I_L2346_244 >= nvertspec ) exit
 2346.                         enddo
 2346.                      endif
 2353.                      $I_L2345_268 = 1 + $I_L2345_268
 2352.                      if ( $I_L2345_268 >= $t_S1 + -$t_S0 + 1 ) exit
 2352.                   enddo
 2352.                endif
 2352.             endif
 2352.          else
 2355.             $t_S4 = max( myfirstlat_f, (jminperm%base_addr)(m, 0) )
 2355.             $t_S5 = min( mylastlat_f, (jmaxperm%base_addr)(m, 0) )
 2355.             if ( $t_S5 + -$t_S4 >= 0 ) then
 2356.                if ( nvertspec > 0 ) then
 2355.                   $I_L2355_266 = 0
 2355.                   do
 2356.                      $CSVL_V0 = int( cvmg( myjmax_f * nvertgrid, 2, and( myjmax_f * nvertgrid > 0, and( myjmax_f * nvertgrid <= 2, myjmax_f * nvertgrid <= -1 + nvertspec ) ) ), 8 )
 2356.                      if ( $CSVL_V0 < 2 ) then
 2356.                         $I_L2356_242 = 0
 2356.                         do
 2358.                            (bufsend%base_addr)($I_L2356_242 + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + myjmax_f * nvertgrid * -2 + nvertspec * jmaxlocal_f * mymmax * kn * 2 + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, 0) = (four%base_addr)($I_L2356_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, -1 + 2 * m, 0)
 2360.                            (bufsend%base_addr)($I_L2356_242 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + nvertspec * jmaxlocal_f * mymmax * kn * 2 + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, 0) = (four%base_addr)($I_L2356_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, 2 * m, 0)
 2362.                            $I_L2356_242 = 1 + $I_L2356_242
 2356.                            if ( $I_L2356_242 >= nvertspec ) exit
 2356.                         enddo
 2356.                      else
 2356.                         $I_L2356_242 = 0
 2356. !dir$ ivdep safevl = $CSVL_V0 !   Guaranteed minimum :: 2
 2356.                         do
 2358.                            (bufsend%base_addr)($I_L2356_242 + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + myjmax_f * nvertgrid * -2 + nvertspec * jmaxlocal_f * mymmax * kn * 2 + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, 0) = (four%base_addr)($I_L2356_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, -1 + 2 * m, 0)
 2360.                            (bufsend%base_addr)($I_L2356_242 + -( myjmax_f * nvertgrid ) + -( myfirstlat_f * nvertgrid ) + myjmax_f * lm * nvertgrid * 2 + nvertspec * jmaxlocal_f * mymmax * kn * 2 + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, 0) = (four%base_addr)($I_L2356_242 + -( myfirstlat_f * nvertgrid ) + nvertgrid * $t_S4 + nvertgrid * $I_L2355_266 + 1, 2 * m, 0)
 2362.                            $I_L2356_242 = 1 + $I_L2356_242
 2356.                            if ( $I_L2356_242 >= nvertspec ) exit
 2356.                         enddo
 2356.                      endif
 2363.                      $I_L2355_266 = 1 + $I_L2355_266
 2362.                      if ( $I_L2355_266 >= $t_S5 + -$t_S4 + 1 ) exit
 2362.                   enddo
 2362.                endif
 2362.             endif
 2362.          endif
 2364.       enddo
 2364.    10 continue
 2366.       _mt_barrier( 3, _mt_rw_list(...) )
 2367.       $snt_T2 = _mt_single( 4, _mt_rw_list(...) )
 2368.       comm = comm_four
 2369.       (requestr%base_addr)(myid_four, 0) = 738197504
 2370.       (requests%base_addr)(myid_four, 0) = 738197504
 2371.       t$948 = -1 + maxnodes_four
 2371.       if ( maxnodes_four > 0 ) then
 2371.          t$949 = maxnodes_four
 2371.          $I_L2371_246 = 0
 2371.          do
 2372.             if ( $I_L2371_246 + -myid_four /= 0 ) then
 2373.                t$951 = nvertspec * mymmax * (nlatsinproc_f%base_addr)($I_L2371_246, 0) * 2
 2374.                t$952 = $I_L2371_246
 2373.                call mpi_irecv( (bufsend%base_addr)(1 + ldim * $I_L2371_246, 0), t$951, 1275070495, t$952, 98, comm, (requestr%base_addr)($I_L2371_246, 0), ierr )
 2373.             endif
 2376.             $I_L2371_246 = 1 + $I_L2371_246
 2375.             if ( $I_L2371_246 >= 1 + t$948 ) exit
 2375.          enddo
 2376.          t$950 = 1 + t$948
 2376.       endif
 2377.       t$953 = -1 + maxnodes_four
 2377.       if ( maxnodes_four > 0 ) then
 2377.          t$954 = maxnodes_four
 2377.          $I_L2377_248 = 0
 2377.          do
 2378.             if ( $I_L2377_248 + -myid_four /= 0 ) then
 2379.                t$951 = nvertspec * myjmax_f * (msperproc%base_addr)($I_L2377_248, 0) * 2
 2380.                t$952 = $I_L2377_248
 2379.                call mpi_isend( (bufrec%base_addr)(1 + kdim * $I_L2377_248, 0), t$951, 1275070495, t$952, 98, comm, (requests%base_addr)($I_L2377_248, 0), ierr )
 2379.             endif
 2382.             $I_L2377_248 = 1 + $I_L2377_248
 2381.             if ( $I_L2377_248 >= 1 + t$953 ) exit
 2381.          enddo
 2382.          t$955 = 1 + t$953
 2382.       endif
 2383.       t$956 = -1 + maxnodes_four
 2383.       if ( -1 + maxnodes_four > 0 ) then
 2383.          t$957 = ( -1 + maxnodes_four )
 2383.          $I_L2383_250 = 0
 2383.          do
 2384.             call mpi_waitany( maxnodes_four, (requestr%base_addr)(0, 0), index, (status%base_addr)(status%dim_1%LB, 0), ierr )
 2385.             $I_L2383_250 = 1 + $I_L2383_250
 2385.             if ( $I_L2383_250 >= t$956 ) exit
 2385.          enddo
 2385.          t$958 = t$956
 2385.       endif
 2386.       t$959 = -1 + maxnodes_four
 2386.       k = 0
 2386.       if ( maxnodes_four > 0 ) then
 2386.          t$960 = maxnodes_four
 2386.          $I_L2386_252 = 0
 2386.          do
 2387.             if ( $I_L2386_252 + -myid_four /= 0 ) then
 2388.                call mpi_wait( (requests%base_addr)($I_L2386_252, 0), (status%base_addr)(status%dim_1%LB, 0), ierr )
 2388.             endif
 2390.             $I_L2386_252 = 1 + $I_L2386_252
 2389.             if ( $I_L2386_252 >= 1 + t$959 ) exit
 2389.          enddo
 2390.          t$961 = 1 + t$959
 2390.          k = 1 + t$959
 2390.       endif
 2391.       $snt_T2 = _mt_endsingle( 4, _mt_rw_list(...), $snt_T2 )
 2392.       $F_A34 = t$133
 2392.       $F_A35 = t$132
 2392.       if ( and( -$F_A35, -$F_A34 ) < 0 ) then
 2392.          $I_L2392_276 = 0
 2392.          do
 2392.             $I_L2392_262 = 0
 2392. !dir$ ivdep
 2392.             do
 2392.                foev(1 + $I_L2392_262, 1 + $I_L2392_276) = 0.0
 2392.                $I_L2392_262 = 1 + $I_L2392_262
 2392.                if ( $I_L2392_262 >= $F_A35 ) exit
 2392.             enddo
 2392.             $I_L2392_276 = 1 + $I_L2392_276
 2392.             if ( $I_L2392_276 >= $F_A34 ) exit
 2392.          enddo
 2392.       endif
 2393.       $F_A36 = t$133
 2393.       $F_A37 = t$132
 2393.       if ( and( -$F_A37, -$F_A36 ) < 0 ) then
 2393.          $I_L2393_278 = 0
 2393.          do
 2393.             $I_L2393_264 = 0
 2393. !dir$ ivdep
 2393.             do
 2393.                food(1 + $I_L2393_264, 1 + $I_L2393_278) = 0.0
 2393.                $I_L2393_264 = 1 + $I_L2393_264
 2393.                if ( $I_L2393_264 >= $F_A37 ) exit
 2393.             enddo
 2393.             $I_L2393_278 = 1 + $I_L2393_278
 2393.             if ( $I_L2393_278 >= $F_A36 ) exit
 2393.          enddo
 2393.       endif
 2395.       $snt_T3 = _mt_single( 5, _mt_rw_list(...) )
 2396.       mglob = 0
 2397.       $snt_T3 = _mt_endsingle( 5, _mt_rw_list(...), $snt_T3 )
 2424.       $SC_spec_I83 = spec%dim_1%EX
 2424.       $SC_spec_I84 = spec%dim_1%LB
 2422.       $SC_neven_I81 = neven%dim_1%EX
 2422.       $SC_neven_I82 = neven%dim_1%LB
 2422.       $SC_firstneven_I79 = firstneven%dim_1%EX
 2422.       $SC_firstneven_I80 = firstneven%dim_1%LB
 2411.       $SC_firstlatinproc_I75 = firstlatinproc_f%dim_1%EX
 2411.       $SC_firstlatinproc_I76 = firstlatinproc_f%dim_1%LB
 2409.       $SC_nodehasj_I73 = nodehasj_f%dim_1%EX
 2409.       $SC_nodehasj_I74 = nodehasj_f%dim_1%LB
 2404.       $SC_lm2m_I71 = lm2m%dim_1%EX
 2404.       $SC_lm2m_I72 = lm2m%dim_1%LB
 2411.       $SC_nlatsinproc_I77 = nlatsinproc_f%dim_1%EX
 2411.       $SC_nlatsinproc_I78 = nlatsinproc_f%dim_1%LB
 2407.       $SC_jminperm_I58 = jminperm%dim_1%EX
 2407.       $SC_jminperm_I59 = jminperm%dim_1%LB
 2416.       $SC_bufsend_I69 = bufsend%dim_1%EX
 2416.       $SC_bufsend_I70 = bufsend%dim_1%LB
 2398.       do
 2399.          $snt_T4 = _mt_critical( 6, _mt_rw_list(...) )
 2400.          mglob = 1 + mglob
 2401.          $lm_S8 = mglob
 2402.          $snt_T4 = _mt_endcritical( 6, _mt_rw_list(...), $snt_T4 )
 2403.          if ( $lm_S8 > mymmax ) then
 2293.             _free( t$261 )
 2443.             return
 2443.             goto <unknown>
 2443.          endif
 2404.          $m_S9 = (lm2m%base_addr)($lm_S8, 0)
 2407.          $t_S10 = (jminperm%base_addr)($m_S9, 0)
 2407.          if ( jmaxhalf + -$t_S10 >= 0 ) then
 2415.             if ( nvertspec > 0 ) then
 2407.                $I_L2407_270 = 0
 2407. !dir$ ivdep
 2407.                do
 2409.                   $kn_S12 = (nodehasj_f%base_addr)($t_S10 + $I_L2407_270, 0)
 2410.                   $ks_S14 = (nodehasj_f%base_addr)(jmax + -$t_S10 + -$I_L2407_270 + 1, 0)
 2411.                   $inin_S13 = ( -( nvertspec * (firstlatinproc_f%base_addr)($kn_S12, 0) ) + nvertspec * $t_S10 + nvertspec * (nlatsinproc_f%base_addr)($kn_S12, 0) * -2 + nvertspec * $lm_S8 * (nlatsinproc_f%base_addr)($kn_S12, 0) * 2 + nvertspec * $I_L2407_270 )
 2412.                   $inin1_S18 = $inin_S13 + nvertspec * (nlatsinproc_f%base_addr)($kn_S12, 0)
 2413.                   $inis_S15 = nvertspec + -( nvertspec * $t_S10 ) + -( nvertspec * (firstlatinproc_f%base_addr)($ks_S14, 0) ) + -( nvertspec * $I_L2407_270 ) + nvertspec * jmax + nvertspec * (nlatsinproc_f%base_addr)($ks_S14, 0) * -2 + nvertspec * $lm_S8 * (nlatsinproc_f%base_addr)($ks_S14, 0) * 2
 2414.                   $inis1_S17 = $inis_S15 + nvertspec * (nlatsinproc_f%base_addr)($ks_S14, 0)
 2415.                   $I_L2415_254 = 0
 2415. !dir$ unroll 2
 2415.                   do
 2416.                      foev($t_S10 + $I_L2407_270, 1 + $I_L2415_254) = (bufsend%base_addr)($inin_S13 + $I_L2415_254 + ldim * $kn_S12 + 1, 0) + (bufsend%base_addr)($inis_S15 + $I_L2415_254 + ldim * $ks_S14 + 1, 0)
 2417.                      foev($t_S10 + $I_L2407_270, nvertspec + $I_L2415_254 + 1) = (bufsend%base_addr)($inin1_S18 + $I_L2415_254 + ldim * $kn_S12 + 1, 0) + (bufsend%base_addr)($inis1_S17 + $I_L2415_254 + ldim * $ks_S14 + 1, 0)
 2418.                      food($t_S10 + $I_L2407_270, 1 + $I_L2415_254) = (bufsend%base_addr)($inin_S13 + $I_L2415_254 + ldim * $kn_S12 + 1, 0) + -(bufsend%base_addr)($inis_S15 + $I_L2415_254 + ldim * $ks_S14 + 1, 0)
 2419.                      food($t_S10 + $I_L2407_270, nvertspec + $I_L2415_254 + 1) = (bufsend%base_addr)($inin1_S18 + $I_L2415_254 + ldim * $kn_S12 + 1, 0) + -(bufsend%base_addr)($inis1_S17 + $I_L2415_254 + ldim * $ks_S14 + 1, 0)
 2420.                      $I_L2415_254 = 1 + $I_L2415_254
 2415.                      if ( $I_L2415_254 >= nvertspec ) exit
 2415.                   enddo
 2421.                   $I_L2407_270 = 1 + $I_L2407_270
 2420.                   if ( $I_L2407_270 >= jmaxhalf + -$t_S10 + 1 ) exit
 2420.                enddo
 2420.             endif
 2420.          endif
 2422.          if ( dv > 0 ) then
 2422.             $SCA_firstneven_I47 = (firstneven%base_addr)($lm_S8, 0)
 2422.             $SCA_neven_I48 = (neven%base_addr)($lm_S8, 0)
 2424.             $SC_spec_I86 = spec%dim_2%SM
 2424.             $SC_spec_I85 = spec%dim_2%EX
 2424.             $SC_spec_I87 = spec%dim_2%LB
 2422.             $I_L2422_272 = 0
 2422.             do
 2423.                if ( $SCA_neven_I48 > 0 ) then
 2423.                   $I_L2423_256 = 0
 2423. !dir$ ivdep
 2423.                   do
 2424.                      (spec%base_addr)($SCA_firstneven_I47 + $I_L2423_256, 1 + $I_L2422_272, 0) = 0.0
 2425.                      $I_L2423_256 = 1 + $I_L2423_256
 2423.                      if ( $I_L2423_256 >= $SCA_neven_I48 ) exit
 2423.                   enddo
 2423.                endif
 2426.                $I_L2422_272 = 1 + $I_L2422_272
 2425.                if ( $I_L2422_272 >= dv ) exit
 2425.             enddo
 2425.          endif
 2427.          ipa$288 = loc( (lf2s%base_addr)((firstneven%base_addr)($lm_S8, 0), $t_S10, 0) )
 2427.          a = _copyin( (lf2s%base_addr)((firstneven%base_addr)($lm_S8, 0), $t_S10, 0) )
 2427.          ipa$290 = loc( (spec%base_addr)((firstneven%base_addr)($lm_S8, 0), 1, 0) )
 2427.          c = _copyin( (spec%base_addr)((firstneven%base_addr)($lm_S8, 0), 1, 0) )
 2427.          t$134 = dlmn
 2427.          t$135 = ( jmaxhalf + -$t_S10 + 1 )
 2427.          t$267 = max( 0, dlmn )
 2427.          t$268 = dlmn
 2427.          t$269 = max( 0, jmaxhalf + -$t_S10 + 1 )
 2427.          t$270 = ( dlmn + -( dlmn * $t_S10 ) + jmaxhalf * dlmn )
 2427.          t$136 = djh
 2427.          t$137 = ( 2 * nvertspec )
 2427.          t$271 = max( 0, djh )
 2427.          t$272 = djh
 2427.          t$273 = max( 0, 2 * nvertspec )
 2427.          t$274 = ( djh * nvertspec * 2 )
 2427.          t$138 = dlmn
 2427.          t$139 = dv
 2427.          t$275 = max( 0, dlmn )
 2427.          t$276 = dlmn
 2427.          t$277 = max( 0, dv )
 2427.          t$278 = ( dv * dlmn )
 2427.          $t_S23 = (neven%base_addr)($lm_S8, 0)
 2427.          if ( $t_S23 > 0 ) then
 2427.             if ( 2 * nvertspec > 0 ) then
 2427.                if ( jmaxhalf + -$t_S10 >= 0 ) then
 2427.                    _substr($W0,1,1) = 'n'
 2427.                    _substr($W1,1,1) = 'n'
 2427.                   $W2 = $t_S23
 2427.                   $W3 = 2 * nvertspec
 2427.                   $W4 = jmaxhalf + -$t_S10 + 1
 2427.                   $W5 = 1.0
 2427.                   $W6 = dlmn
 2427.                   $W7 = t$132
 2427.                   $W8 = 1.0
 2427.                   $W9 = dlmn
 2427.                   _dgemm(  _substr($W0,1,1),  _substr($W1,1,1), $W2, $W3, $W4, $W5, a(1, 1), $W6, foev($t_S10, 1), $W7, $W8, c(1, 1), $W9 )
 2427.                endif
 2427.             endif
 2427.          endif
 2427.          (spec%base_addr)((firstneven%base_addr)($lm_S8, 0), 1, 0) = _copyout( c )
 2427.          (lf2s%base_addr)((firstneven%base_addr)($lm_S8, 0), $t_S10, 0) = _copyout( a )
 2432.          if ( dv > 0 ) then
 2432.             $SCA_firstnodd_I49 = (firstnodd%base_addr)($lm_S8, 0)
 2432.             $SCA_nodd_I50 = (nodd%base_addr)($lm_S8, 0)
 2434.             $SC_spec_I86 = spec%dim_2%SM
 2434.             $SC_spec_I85 = spec%dim_2%EX
 2434.             $SC_spec_I87 = spec%dim_2%LB
 2432.             $I_L2432_274 = 0
 2432.             do
 2433.                if ( $SCA_nodd_I50 > 0 ) then
 2433.                   $I_L2433_258 = 0
 2433. !dir$ ivdep
 2433.                   do
 2434.                      (spec%base_addr)($SCA_firstnodd_I49 + $I_L2433_258, 1 + $I_L2432_274, 0) = 0.0
 2435.                      $I_L2433_258 = 1 + $I_L2433_258
 2433.                      if ( $I_L2433_258 >= $SCA_nodd_I50 ) exit
 2433.                   enddo
 2433.                endif
 2436.                $I_L2432_274 = 1 + $I_L2432_274
 2435.                if ( $I_L2432_274 >= dv ) exit
 2435.             enddo
 2435.          endif
 2437.          ipa$306 = loc( (lf2s%base_addr)((firstnodd%base_addr)($lm_S8, 0), $t_S10, 0) )
 2437.          a = _copyin( (lf2s%base_addr)((firstnodd%base_addr)($lm_S8, 0), $t_S10, 0) )
 2437.          ipa$308 = loc( (spec%base_addr)((firstnodd%base_addr)($lm_S8, 0), 1, 0) )
 2437.          c = _copyin( (spec%base_addr)((firstnodd%base_addr)($lm_S8, 0), 1, 0) )
 2437.          t$134 = dlmn
 2437.          t$135 = ( jmaxhalf + -$t_S10 + 1 )
 2437.          t$267 = max( 0, dlmn )
 2437.          t$268 = dlmn
 2437.          t$269 = max( 0, jmaxhalf + -$t_S10 + 1 )
 2437.          t$270 = ( dlmn + -( dlmn * $t_S10 ) + jmaxhalf * dlmn )
 2437.          t$136 = djh
 2437.          t$137 = ( 2 * nvertspec )
 2437.          t$271 = max( 0, djh )
 2437.          t$272 = djh
 2437.          t$273 = max( 0, 2 * nvertspec )
 2437.          t$274 = ( djh * nvertspec * 2 )
 2437.          t$138 = dlmn
 2437.          t$139 = dv
 2437.          t$275 = max( 0, dlmn )
 2437.          t$276 = dlmn
 2437.          t$277 = max( 0, dv )
 2437.          t$278 = ( dv * dlmn )
 2437.          $t_S31 = (nodd%base_addr)($lm_S8, 0)
 2437.          if ( $t_S31 > 0 ) then
 2437.             if ( 2 * nvertspec > 0 ) then
 2437.                if ( jmaxhalf + -$t_S10 >= 0 ) then
 2437.                    _substr($W10,1,1) = 'n'
 2437.                    _substr($W11,1,1) = 'n'
 2437.                   $W12 = $t_S31
 2437.                   $W13 = 2 * nvertspec
 2437.                   $W14 = jmaxhalf + -$t_S10 + 1
 2437.                   $W15 = 1.0
 2437.                   $W16 = dlmn
 2437.                   $W17 = t$132
 2437.                   $W18 = 1.0
 2437.                   $W19 = dlmn
 2437.                   _dgemm(  _substr($W10,1,1),  _substr($W11,1,1), $W12, $W13, $W14, $W15, a(1, 1), $W16, food($t_S10, 1), $W17, $W18, c(1, 1), $W19 )
 2437.                endif
 2437.             endif
 2437.          endif
 2437.          (spec%base_addr)((firstnodd%base_addr)($lm_S8, 0), 1, 0) = _copyout( c )
 2437.       enddo
 2437.       end
 2437.       
 2459.       
 2459.       subroutine withdrawspectral( mnfirst, mnlast, mnextfirst, mnextlast )
 2460.       s1%dim_1%LB = 1
 2460.       s1%dim_1%EX = 0
 2460.       s1%dim_1%SM = 1
 2449.       s2%dim_1%LB = 1
 2449.       s2%dim_1%EX = 0
 2449.       s2%dim_1%SM = 1
 2449.       s2%dim_2%LB = 1
 2449.       s2%dim_2%EX = 0
 2449.       s2%dim_2%SM = 1
 2463.       if ( nspecfields > 0 ) then
 2463.          $I_L2463_68 = 0
 2463.          do
 2465.             if ( (surfspec%base_addr)(1 + $I_L2463_68, 0) ) then
 2466.                s1 = (spec1d%base_addr)(1 + $I_L2463_68, 0)%p
 2467.                $lastv_S2 = 1 + (prevspec%base_addr)(1 + $I_L2463_68, 0)
 2468.                if ( -s1%dim_1%EX + 2 * mymnextmax == 0 ) then
 2470.                   if ( mnextlast + -mnextfirst >= 0 ) then
 2470.                      $I_L2470_56 = 0
 2470. !dir$ ivdep
 2470.                      do
 2471.                         (s1%base_addr)(2 * mnextfirst + 2 * $I_L2470_56 + -1, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L2470_56, 0), $lastv_S2, 0)
 2472.                         (s1%base_addr)(2 * mnextfirst + 2 * $I_L2470_56, 0) = (spec%base_addr)((lmnextmap%base_addr)(mnextfirst + $I_L2470_56, 0), nvertspec + $lastv_S2, 0)
 2473.                         $I_L2470_56 = 1 + $I_L2470_56
 2470.                         if ( $I_L2470_56 >= mnextlast + -mnextfirst + 1 ) exit
 2470.                      enddo
 2470.                   endif
 2474.                else if ( mnlast + -mnfirst >= 0 ) then
 2476.                   $I_L2476_58 = 0
 2476. !dir$ ivdep
 2476.                   do
 2477.                      (s1%base_addr)(2 * mnfirst + 2 * $I_L2476_58 + -1, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L2476_58, 0), $lastv_S2, 0)
 2478.                      (s1%base_addr)(2 * mnfirst + 2 * $I_L2476_58, 0) = (spec%base_addr)((lmnmap%base_addr)(mnfirst + $I_L2476_58, 0), nvertspec + $lastv_S2, 0)
 2479.                      $I_L2476_58 = 1 + $I_L2476_58
 2476.                      if ( $I_L2476_58 >= mnlast + -mnfirst + 1 ) exit
 2476.                   enddo
 2476.                endif
 2476.             else
 2482.                s2 = (spec2d%base_addr)(1 + $I_L2463_68, 0)%p
 2483.                $lastv_S6 = (prevspec%base_addr)(1 + $I_L2463_68, 0)
 2484.                if ( -s2%dim_1%EX + 2 * mymnextmax == 0 ) then
 2485.                   if ( kmaxloc > 0 ) then
 2487.                      if ( mnextlast + -mnextfirst >= 0 ) then
 2485.                         $SI_L2485_62_G1 = 0
 2485.                         do
 2487.                            $I_L2487_66 = 0
 2487. !dir$ ivdep
 2487. !dir$ blocking_size( 0, 0 )
 2487.                            do
 2485.                               $SCA_lmnextmap_I17 = (lmnextmap%base_addr)(mnextfirst + $I_L2487_66, 0)
 2485.                               $I_L2485_73 = 0
 2485. !dir$ unroll 4
 2485. !dir$ blocking_size( 256, 256 )
 2485.                               do
 2488.                                  (s2%base_addr)(2 * mnextfirst + 2 * $I_L2487_66 + -1, $I_L2485_73 + 256 * $SI_L2485_62_G1 + 1, 0) = (spec%base_addr)($SCA_lmnextmap_I17, $lastv_S6 + $I_L2485_73 + 256 * $SI_L2485_62_G1 + 1, 0)
 2489.                                  (s2%base_addr)(2 * mnextfirst + 2 * $I_L2487_66, $I_L2485_73 + 256 * $SI_L2485_62_G1 + 1, 0) = (spec%base_addr)($SCA_lmnextmap_I17, nvertspec + $lastv_S6 + $I_L2485_73 + 256 * $SI_L2485_62_G1 + 1, 0)
 2485.                                  $I_L2485_73 = 1 + $I_L2485_73
 2487.                                  if ( $I_L2485_73 >= min( kmaxloc, 256 + 256 * $SI_L2485_62_G1 ) + -256 * $SI_L2485_62_G1 ) exit
 2487.                               enddo
 2490.                               $I_L2487_66 = 1 + $I_L2487_66
 2490.                               if ( $I_L2487_66 >= mnextlast + -mnextfirst + 1 ) exit
 2490.                            enddo
 2485.                            $SI_L2485_62_G1 = 1 + $SI_L2485_62_G1
 2490.                            if ( $SI_L2485_62_G1 >= _rsh( 255 + kmaxloc, 8 ) ) exit
 2490.                         enddo
 2490.                      endif
 2490.                   endif
 2492.                else if ( kmaxloc > 0 ) then
 2495.                   if ( mnlast + -mnfirst >= 0 ) then
 2493.                      $SI_L2493_60_G4 = 0
 2493.                      do
 2495.                         $I_L2495_64 = 0
 2495. !dir$ ivdep
 2495. !dir$ blocking_size( 0, 0 )
 2495.                         do
 2493.                            $SCA_lmnmap_I18 = (lmnmap%base_addr)(mnfirst + $I_L2495_64, 0)
 2493.                            $I_L2493_70 = 0
 2493. !dir$ unroll 4
 2493. !dir$ blocking_size( 256, 256 )
 2493.                            do
 2496.                               (s2%base_addr)(2 * mnfirst + 2 * $I_L2495_64 + -1, $I_L2493_70 + 256 * $SI_L2493_60_G4 + 1, 0) = (spec%base_addr)($SCA_lmnmap_I18, $lastv_S6 + $I_L2493_70 + 256 * $SI_L2493_60_G4 + 1, 0)
 2497.                               (s2%base_addr)(2 * mnfirst + 2 * $I_L2495_64, $I_L2493_70 + 256 * $SI_L2493_60_G4 + 1, 0) = (spec%base_addr)($SCA_lmnmap_I18, nvertspec + $lastv_S6 + $I_L2493_70 + 256 * $SI_L2493_60_G4 + 1, 0)
 2493.                               $I_L2493_70 = 1 + $I_L2493_70
 2495.                               if ( $I_L2493_70 >= min( kmaxloc, 256 + 256 * $SI_L2493_60_G4 ) + -256 * $SI_L2493_60_G4 ) exit
 2495.                            enddo
 2498.                            $I_L2495_64 = 1 + $I_L2495_64
 2498.                            if ( $I_L2495_64 >= mnlast + -mnfirst + 1 ) exit
 2498.                         enddo
 2493.                         $SI_L2493_60_G4 = 1 + $SI_L2493_60_G4
 2498.                         if ( $SI_L2493_60_G4 >= _rsh( 255 + kmaxloc, 8 ) ) exit
 2498.                      enddo
 2498.                   endif
 2498.                endif
 2498.             endif
 2502.             $I_L2463_68 = 1 + $I_L2463_68
 2501.             if ( $I_L2463_68 >= nspecfields ) exit
 2501.          enddo
 2501.       endif
 2504.       return
 2504.       end
 2504.       
 2507.       
 2507.       subroutine destroy
 2508.       $_allo_P0(0) = 0x1000000000001L
 2508.       $_allo_P0(1) = loc( spec )
 2508.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 2508.       spec%header%assoc = 0
 2509.       $_allo_P1(0) = 0x1000000000001L
 2509.       $_allo_P1(1) = loc( four )
 2509.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 2509.       four%header%assoc = 0
 2510.       if ( mnodes%header%assoc == 1 ) then
 2511.          $_allo_P2(0) = 0x1000000000001L
 2511.          $_allo_P2(1) = loc( mnodes )
 2511.          call __deallocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 2511.          mnodes%header%assoc = 0
 2511.       endif
 2513.       if ( surfspec%header%assoc == 1 ) then
 2514.          $_allo_P3(0) = 0x1000000000001L
 2514.          $_allo_P3(1) = loc( surfspec )
 2514.          call __deallocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 2514.          surfspec%header%assoc = 0
 2514.       endif
 2516.       if ( prevspec%header%assoc == 1 ) then
 2517.          $_allo_P4(0) = 0x1000000000001L
 2517.          $_allo_P4(1) = loc( prevspec )
 2517.          call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 2517.          prevspec%header%assoc = 0
 2517.       endif
 2519.       if ( spec1d%header%assoc == 1 ) then
 2520.          $_allo_P5(0) = 0x1000000000001L
 2520.          $_allo_P5(1) = loc( spec1d )
 2520.          call __deallocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 2520.          spec1d%header%assoc = 0
 2520.       endif
 2522.       if ( spec2d%header%assoc == 1 ) then
 2523.          $_allo_P6(0) = 0x1000000000001L
 2523.          $_allo_P6(1) = loc( spec2d )
 2523.          call __deallocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 2523.          spec2d%header%assoc = 0
 2523.       endif
 2526.       if ( surfgrid%header%assoc == 1 ) then
 2527.          $_allo_P7(0) = 0x1000000000001L
 2527.          $_allo_P7(1) = loc( surfgrid )
 2527.          call __deallocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 2527.          surfgrid%header%assoc = 0
 2527.       endif
 2529.       if ( prevgrid%header%assoc == 1 ) then
 2530.          $_allo_P8(0) = 0x1000000000001L
 2530.          $_allo_P8(1) = loc( prevgrid )
 2530.          call __deallocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 2530.          prevgrid%header%assoc = 0
 2530.       endif
 2532.       if ( grid2d%header%assoc == 1 ) then
 2533.          $_allo_P9(0) = 0x1000000000001L
 2533.          $_allo_P9(1) = loc( grid2d )
 2533.          call __deallocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 2533.          grid2d%header%assoc = 0
 2533.       endif
 2535.       if ( grid3d%header%assoc == 1 ) then
 2536.          $_allo_P10(0) = 0x1000000000001L
 2536.          $_allo_P10(1) = loc( grid3d )
 2536.          call __deallocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 2536.          grid3d%header%assoc = 0
 2536.       endif
 2538.       if ( fieldfordellam%header%assoc == 1 ) then
 2539.          $_allo_P11(0) = 0x1000000000001L
 2539.          $_allo_P11(1) = loc( fieldfordellam )
 2539.          call __deallocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 2539.          fieldfordellam%header%assoc = 0
 2539.       endif
 2541.       if ( prevvertdellamsource%header%assoc == 1 ) then
 2542.          $_allo_P12(0) = 0x1000000000001L
 2542.          $_allo_P12(1) = loc( prevvertdellamsource )
 2542.          call __deallocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 2542.          prevvertdellamsource%header%assoc = 0
 2542.       endif
 2544.       return
 2544.       end
 2544.       
 2551.       
 2551.       subroutine mmd( a, lda, b, ldb, c, ldc, tdc, ni, nj, nk )
 2551.       t$134 = lda
 2551.       t$135 = nk
 2554.       t$267 = _zla( 0, lda )
 2551.       t$268 = _zla( 0, lda )
 2554.       t$269 = _zla( 0, nk )
 2551.       t$270 = _zla( 0, lda ) * _zla( 0, nk )
 2551.       t$136 = ldb
 2551.       t$137 = nj
 2555.       t$271 = _zla( 0, ldb )
 2551.       t$272 = _zla( 0, ldb )
 2555.       t$273 = _zla( 0, nj )
 2551.       t$274 = _zla( 0, ldb ) * _zla( 0, nj )
 2551.       t$138 = ldc
 2551.       t$139 = tdc
 2556.       t$275 = _zla( 0, ldc )
 2551.       t$276 = _zla( 0, ldc )
 2556.       t$277 = _zla( 0, tdc )
 2551.       t$278 = _zla( 0, ldc ) * _zla( 0, tdc )
 2558.       if ( ni > 0 ) then
 2559.          if ( nj > 0 ) then
 2560.             if ( nk > 0 ) then
 2561.                 _substr($W0,1,1) = 'n'
 2561.                 _substr($W1,1,1) = 'n'
 2561.                $W2 = ni
 2561.                $W3 = nj
 2561.                $W4 = nk
 2561.                $W5 = 1.0
 2561.                $W6 = lda
 2561.                $W7 = ldb
 2561.                $W8 = 1.0
 2561.                $W9 = ldc
 2561.                _dgemm(  _substr($W0,1,1),  _substr($W1,1,1), $W2, $W3, $W4, $W5, a(1, 1), $W6, b(1, 1), $W7, $W8, c(1, 1), $W9 )
 2561.             endif
 2561.          endif
 2561.       endif
 2565.       return
 2565.       end
 2565.       
 2570.       
 2570.       subroutine mmt( a, lda, b, ldb, c, ldc, tdc, ni, nj, nk )
 2570.       t$140 = lda
 2570.       t$141 = nk
 2573.       t$279 = _zla( 0, lda )
 2570.       t$280 = _zla( 0, lda )
 2573.       t$281 = _zla( 0, nk )
 2570.       t$282 = _zla( 0, lda ) * _zla( 0, nk )
 2570.       t$142 = ldb
 2570.       t$143 = nj
 2574.       t$283 = _zla( 0, ldb )
 2570.       t$284 = _zla( 0, ldb )
 2574.       t$285 = _zla( 0, nj )
 2570.       t$286 = _zla( 0, ldb ) * _zla( 0, nj )
 2570.       t$144 = ldc
 2570.       t$145 = tdc
 2575.       t$287 = _zla( 0, ldc )
 2570.       t$288 = _zla( 0, ldc )
 2575.       t$289 = _zla( 0, tdc )
 2570.       t$290 = _zla( 0, ldc ) * _zla( 0, tdc )
 2578.       if ( ni > 0 ) then
 2579.          if ( nj > 0 ) then
 2580.             if ( nk > 0 ) then
 2581.                 _substr($W0,1,1) = 't'
 2581.                 _substr($W1,1,1) = 't'
 2581.                $W2 = nj
 2581.                $W3 = ni
 2581.                $W4 = nk
 2581.                $W5 = 1.0
 2581.                $W6 = ldb
 2581.                $W7 = lda
 2581.                $W8 = 1.0
 2581.                $W9 = ldc
 2581.                _dgemm(  _substr($W0,1,1),  _substr($W1,1,1), $W2, $W3, $W4, $W5, b(1, 1), $W6, a(1, 1), $W7, $W8, c(1, 1), $W9 )
 2581.             endif
 2581.          endif
 2581.       endif
 2585.       return
 2585.       end
 2585.       
 2600.       
 2600.       subroutine invffttrans( finout, ldinout, tdinout, n, lot, trigs, ntrigs, factors, nfactors )
 2600.       t$146 = ldinout
 2600.       t$147 = tdinout
 2602.       t$291 = _zla( 0, ldinout )
 2600.       t$292 = _zla( 0, ldinout )
 2602.       t$293 = _zla( 0, tdinout )
 2600.       t$294 = _zla( 0, ldinout ) * _zla( 0, tdinout )
 2600.       t$148 = ntrigs
 2606.       t$295 = _zla( 0, ntrigs )
 2600.       t$149 = nfactors
 2608.       t$296 = _zla( 0, nfactors )
 2600.       t$150 = lot
 2600.       t$151 = n / 2
 2616.       t$297 = _zla( 0, lot )
 2600.       t$298 = _zla( 0, lot )
 2616.       t$299 = _zla( 0, n / 2 )
 2600.       t$300 = _zla( 0, lot ) * _zla( 0, n / 2 )
 2616.       t$303 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 8
 2617.       t$304 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 8
 2617.       t$306 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 16
 2618.       t$307 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 16
 2618.       t$309 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 24
 2619.       t$310 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 24
 2619.       t$312 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 32
 2600.       t$301 = int( _alloc( _zla( 0, lot ) * _zla( 0, n / 2 ) * 32 ), 8 )
 2616.       t$302 = t$301
 2617.       t$305 = t$301 + _zla( 0, lot ) * _zla( 0, n / 2 ) * 8
 2618.       t$308 = t$301 + _zla( 0, lot ) * _zla( 0, n / 2 ) * 16
 2619.       t$311 = t$301 + _zla( 0, lot ) * _zla( 0, n / 2 ) * 24
 2622.       $nfax_S0 = factors(1)
 2623.       nh = n / 2
 2625.       call splitfourtrans( finout(1, 1), a(1, 1), b(1, 1), ldinout, tdinout, n, nh, lot, trigs(1), ntrigs )
 2627.       la = 1
 2628.       $ab2cd_S1 = .true.
 2629.       if ( $nfax_S0 > 0 ) then
 2629.          $I_L2629_4 = 0
 2629.          do
 2630.             if ( $ab2cd_S1 ) then
 2631.                call onepass( a(1, 1), b(1, 1), c(1, 1), d(1, 1), lot, nh, factors(2 + $I_L2629_4), la, trigs(1), ntrigs )
 2632.                $ab2cd_S1 = .false.
 2632.             else
 2634.                call onepass( c(1, 1), d(1, 1), a(1, 1), b(1, 1), lot, nh, factors(2 + $I_L2629_4), la, trigs(1), ntrigs )
 2635.                $ab2cd_S1 = .true.
 2635.             endif
 2637.             la = la * factors(2 + $I_L2629_4)
 2638.             $I_L2629_4 = 1 + $I_L2629_4
 2636.             if ( $I_L2629_4 >= $nfax_S0 ) exit
 2636.          enddo
 2636.       endif
 2640.       if ( $ab2cd_S1 ) then
 2641.          call joingridtrans( a(1, 1), b(1, 1), finout(1, 1), ldinout, tdinout, nh, lot )
 2641.       else
 2643.          call joingridtrans( c(1, 1), d(1, 1), finout(1, 1), ldinout, tdinout, nh, lot )
 2643.       endif
 2600.       _free( t$301 )
 2645.       return
 2645.       end
 2645.       
 2651.       
 2651.       subroutine splitfourtrans( fin, a, b, ldin, tdin, n, nh, lot, trigs, ntrigs )
 2651.       t$152 = ldin
 2651.       t$153 = tdin
 2657.       t$313 = _zla( 0, ldin )
 2651.       t$314 = _zla( 0, ldin )
 2657.       t$315 = _zla( 0, tdin )
 2651.       t$316 = _zla( 0, ldin ) * _zla( 0, tdin )
 2651.       t$154 = lot
 2651.       t$155 = nh
 2658.       t$317 = _zla( 0, lot )
 2651.       t$318 = _zla( 0, lot )
 2658.       t$319 = _zla( 0, nh )
 2651.       t$320 = _zla( 0, lot ) * _zla( 0, nh )
 2651.       t$156 = ntrigs
 2661.       t$321 = _zla( 0, ntrigs )
 2667.       if ( lot > 0 ) then
 2667.          $I_L2667_16 = 0
 2667. !dir$ ivdep
 2667.          do
 2668.             a(1 + $I_L2667_16, 1) = fin(1 + $I_L2667_16, 1) + fin(1 + $I_L2667_16, 1 + n)
 2669.             b(1 + $I_L2667_16, 1) = fin(1 + $I_L2667_16, 1) + -fin(1 + $I_L2667_16, 1 + n)
 2670.             $I_L2667_16 = 1 + $I_L2667_16
 2667.             if ( $I_L2667_16 >= lot ) exit
 2667.          enddo
 2667.       endif
 2672.       if ( -2 + ( 1 + nh ) / 2 >= 0 ) then
 2676.          if ( lot > 0 ) then
 2672.             $I_L2672_22 = 0
 2672.             do
 2673.                $c_S3 = trigs(n + 2 * $I_L2672_22 + 3)
 2674.                $s_S4 = trigs(n + 2 * $I_L2672_22 + 4)
 2676.                $I_L2676_18 = 0
 2676. !dir$ ivdep
 2676.                do
 2677.                   a(1 + $I_L2676_18, 2 + $I_L2672_22) = ( fin(1 + $I_L2676_18, 3 + 2 * $I_L2672_22) + fin(1 + $I_L2676_18, n + -2 * $I_L2672_22 + -1) ) + -( $s_S4 * ( fin(1 + $I_L2676_18, 3 + 2 * $I_L2672_22) + -fin(1 + $I_L2676_18, n + -2 * $I_L2672_22 + -1) ) + $c_S3 * ( fin(1 + $I_L2676_18, 4 + 2 * $I_L2672_22) + fin(1 + $I_L2676_18, n + -2 * $I_L2672_22) ) )
 2680.                   a(1 + $I_L2676_18, nh + -$I_L2672_22) = ( fin(1 + $I_L2676_18, 3 + 2 * $I_L2672_22) + fin(1 + $I_L2676_18, n + -2 * $I_L2672_22 + -1) ) + ( $s_S4 * ( fin(1 + $I_L2676_18, 3 + 2 * $I_L2672_22) + -fin(1 + $I_L2676_18, n + -2 * $I_L2672_22 + -1) ) + $c_S3 * ( fin(1 + $I_L2676_18, 4 + 2 * $I_L2672_22) + fin(1 + $I_L2676_18, n + -2 * $I_L2672_22) ) )
 2683.                   b(1 + $I_L2676_18, 2 + $I_L2672_22) = ( $c_S3 * ( fin(1 + $I_L2676_18, 3 + 2 * $I_L2672_22) + -fin(1 + $I_L2676_18, n + -2 * $I_L2672_22 + -1) ) + -( $s_S4 * ( fin(1 + $I_L2676_18, 4 + 2 * $I_L2672_22) + fin(1 + $I_L2676_18, n + -2 * $I_L2672_22) ) ) ) + ( fin(1 + $I_L2676_18, 4 + 2 * $I_L2672_22) + -fin(1 + $I_L2676_18, n + -2 * $I_L2672_22) )
 2686.                   b(1 + $I_L2676_18, nh + -$I_L2672_22) = ( $c_S3 * ( fin(1 + $I_L2676_18, 3 + 2 * $I_L2672_22) + -fin(1 + $I_L2676_18, n + -2 * $I_L2672_22 + -1) ) + -( $s_S4 * ( fin(1 + $I_L2676_18, 4 + 2 * $I_L2672_22) + fin(1 + $I_L2676_18, n + -2 * $I_L2672_22) ) ) ) + -( fin(1 + $I_L2676_18, 4 + 2 * $I_L2672_22) + -fin(1 + $I_L2676_18, n + -2 * $I_L2672_22) )
 2689.                   $I_L2676_18 = 1 + $I_L2676_18
 2676.                   if ( $I_L2676_18 >= lot ) exit
 2676.                enddo
 2690.                $I_L2672_22 = 1 + $I_L2672_22
 2689.                if ( $I_L2672_22 >= -1 + ( 1 + nh ) / 2 ) exit
 2689.             enddo
 2689.          endif
 2689.       endif
 2691.       if ( nh >= 2 ) then
 2691.          if ( mod( nh, 2 ) == 0 ) then
 2693.             if ( lot > 0 ) then
 2693.                $I_L2693_20 = 0
 2693. !dir$ ivdep
 2693.                do
 2694.                   a(1 + $I_L2693_20, 1 + nh / 2) = 2.0 * fin(1 + $I_L2693_20, 1 + nh)
 2695.                   b(1 + $I_L2693_20, 1 + nh / 2) = -2.0 * fin(1 + $I_L2693_20, 2 + nh)
 2696.                   $I_L2693_20 = 1 + $I_L2693_20
 2693.                   if ( $I_L2693_20 >= lot ) exit
 2693.                enddo
 2693.             endif
 2693.          endif
 2693.       endif
 2698.       return
 2698.       end
 2698.       
 2708.       
 2708.       subroutine joingridtrans( a, b, fout, ldout, tdout, nh, lot )
 2708.       t$159 = lot
 2708.       t$160 = nh
 2713.       t$322 = _zla( 0, lot )
 2708.       t$323 = _zla( 0, lot )
 2713.       t$324 = _zla( 0, nh )
 2708.       t$325 = _zla( 0, lot ) * _zla( 0, nh )
 2708.       t$157 = ldout
 2708.       t$158 = tdout
 2712.       t$326 = _zla( 0, ldout )
 2708.       t$327 = _zla( 0, ldout )
 2712.       t$328 = _zla( 0, tdout )
 2708.       t$329 = _zla( 0, ldout ) * _zla( 0, tdout )
 2718.       if ( nh > 0 ) then
 2719.          if ( lot > 0 ) then
 2718.             $I_L2718_10 = 0
 2718.             do
 2719.                $I_L2719_8 = 0
 2719. !dir$ ivdep
 2719.                do
 2720.                   fout(1 + $I_L2719_8, 1 + 2 * $I_L2718_10) = a(1 + $I_L2719_8, 1 + $I_L2718_10)
 2721.                   fout(1 + $I_L2719_8, 2 + 2 * $I_L2718_10) = b(1 + $I_L2719_8, 1 + $I_L2718_10)
 2722.                   $I_L2719_8 = 1 + $I_L2719_8
 2719.                   if ( $I_L2719_8 >= lot ) exit
 2719.                enddo
 2723.                $I_L2718_10 = 1 + $I_L2718_10
 2722.                if ( $I_L2718_10 >= nh ) exit
 2722.             enddo
 2722.          endif
 2722.       endif
 2727.       return
 2727.       end
 2727.       
 2734.       
 2734.       subroutine onepass( a, b, c, d, lot, nh, ifac, la, trigs, ntrigs )
 2734.       t$161 = lot
 2734.       t$162 = nh
 2737.       t$330 = _zla( 0, lot )
 2734.       t$331 = _zla( 0, lot )
 2737.       t$332 = _zla( 0, nh )
 2734.       t$333 = _zla( 0, lot ) * _zla( 0, nh )
 2734.       t$163 = ntrigs
 2744.       t$334 = _zla( 0, ntrigs )
 2763.       $m_S2 = nh / ifac
 2778.       if ( ifac == 2 ) then
 2779.          if ( la > 0 ) then
 2781.             if ( lot > 0 ) then
 2779.                $I_L2779_108 = 0
 2779.                do
 2781.                   $I_L2781_92 = 0
 2781. !dir$ ivdep
 2781.                   do
 2782.                      c(1 + $I_L2781_92, 1 + $I_L2779_108) = a(1 + $I_L2781_92, 1 + $I_L2779_108) + a(1 + $I_L2781_92, $m_S2 + $I_L2779_108 + 1)
 2783.                      c(1 + $I_L2781_92, la + $I_L2779_108 + 1) = a(1 + $I_L2781_92, 1 + $I_L2779_108) + -a(1 + $I_L2781_92, $m_S2 + $I_L2779_108 + 1)
 2784.                      d(1 + $I_L2781_92, 1 + $I_L2779_108) = b(1 + $I_L2781_92, 1 + $I_L2779_108) + b(1 + $I_L2781_92, $m_S2 + $I_L2779_108 + 1)
 2785.                      d(1 + $I_L2781_92, la + $I_L2779_108 + 1) = b(1 + $I_L2781_92, 1 + $I_L2779_108) + -b(1 + $I_L2781_92, $m_S2 + $I_L2779_108 + 1)
 2786.                      $I_L2781_92 = 1 + $I_L2781_92
 2781.                      if ( $I_L2781_92 >= lot ) exit
 2781.                   enddo
 2787.                   $I_L2779_108 = 1 + $I_L2779_108
 2786.                   if ( $I_L2779_108 >= la ) exit
 2786.                enddo
 2786.             endif
 2786.          endif
 2788.          if ( ( $m_S2 + -la /= 1 .and. xor( la, $m_S2 + -la + -1 ) < 0 ) == 0 ) then
 2788.             $t_S12 = ( -1 + $m_S2 ) / la
 2794.             if ( la > 0 ) then
 2796.                if ( lot > 0 ) then
 2788.                   $I_L2788_118 = 0
 2788. !dir$ loop_info (automatic) cache_nt( trigs )
 2788.                   do
 2790.                      $c1_S11 = trigs(2 * la + la * $I_L2788_118 * 2 + 1)
 2791.                      $s1_S9 = trigs(2 * la + la * $I_L2788_118 * 2 + 2)
 2794.                      $I_L2794_110 = 0
 2794.                      do
 2796.                         $I_L2796_94 = 0
 2796. !dir$ ivdep
 2796.                         do
 2797.                            $wka_S10 = a(1 + $I_L2796_94, la + $I_L2794_110 + la * $I_L2788_118 + 1) + -a(1 + $I_L2796_94, la + $m_S2 + $I_L2794_110 + la * $I_L2788_118 + 1)
 2798.                            c(1 + $I_L2796_94, $I_L2794_110 + 2 * la + la * $I_L2788_118 * 2 + 1) = a(1 + $I_L2796_94, la + $I_L2794_110 + la * $I_L2788_118 + 1) + a(1 + $I_L2796_94, la + $m_S2 + $I_L2794_110 + la * $I_L2788_118 + 1)
 2799.                            $wkb_S8 = b(1 + $I_L2796_94, la + $I_L2794_110 + la * $I_L2788_118 + 1) + -b(1 + $I_L2796_94, la + $m_S2 + $I_L2794_110 + la * $I_L2788_118 + 1)
 2800.                            d(1 + $I_L2796_94, $I_L2794_110 + 2 * la + la * $I_L2788_118 * 2 + 1) = b(1 + $I_L2796_94, la + $I_L2794_110 + la * $I_L2788_118 + 1) + b(1 + $I_L2796_94, la + $m_S2 + $I_L2794_110 + la * $I_L2788_118 + 1)
 2801.                            c(1 + $I_L2796_94, $I_L2794_110 + 3 * la + la * $I_L2788_118 * 2 + 1) = $c1_S11 * $wka_S10 + -( $s1_S9 * $wkb_S8 )
 2802.                            d(1 + $I_L2796_94, $I_L2794_110 + 3 * la + la * $I_L2788_118 * 2 + 1) = $s1_S9 * $wka_S10 + $c1_S11 * $wkb_S8
 2803.                            $I_L2796_94 = 1 + $I_L2796_94
 2796.                            if ( $I_L2796_94 >= lot ) exit
 2796.                         enddo
 2804.                         $I_L2794_110 = 1 + $I_L2794_110
 2803.                         if ( $I_L2794_110 >= la ) exit
 2803.                      enddo
 2805.                      $I_L2788_118 = 1 + $I_L2788_118
 2804.                      if ( $I_L2788_118 >= $t_S12 ) exit
 2804.                   enddo
 2804.                endif
 2804.             endif
 2804.          endif
 2806.       else if ( ifac == 3 ) then
 2807.          if ( la > 0 ) then
 2809.             if ( lot > 0 ) then
 2807.                $I_L2807_106 = 0
 2807.                do
 2809.                   $I_L2809_90 = 0
 2809. !dir$ ivdep
 2809.                   do
 2810.                      $wka_S15 = a(1 + $I_L2809_90, $m_S2 + $I_L2807_106 + 1) + a(1 + $I_L2809_90, $I_L2807_106 + 2 * $m_S2 + 1)
 2811.                      $wksina_S18 = sin60 * ( a(1 + $I_L2809_90, $m_S2 + $I_L2807_106 + 1) + -a(1 + $I_L2809_90, $I_L2807_106 + 2 * $m_S2 + 1) )
 2812.                      $wkb_S17 = b(1 + $I_L2809_90, $m_S2 + $I_L2807_106 + 1) + b(1 + $I_L2809_90, $I_L2807_106 + 2 * $m_S2 + 1)
 2813.                      $wksinb_S16 = sin60 * ( b(1 + $I_L2809_90, $m_S2 + $I_L2807_106 + 1) + -b(1 + $I_L2809_90, $I_L2807_106 + 2 * $m_S2 + 1) )
 2814.                      c(1 + $I_L2809_90, 1 + $I_L2807_106) = a(1 + $I_L2809_90, 1 + $I_L2807_106) + $wka_S15
 2815.                      c(1 + $I_L2809_90, la + $I_L2807_106 + 1) = ( a(1 + $I_L2809_90, 1 + $I_L2807_106) + -5.0e-1 * $wka_S15 ) + -$wksinb_S16
 2816.                      c(1 + $I_L2809_90, $I_L2807_106 + 2 * la + 1) = ( a(1 + $I_L2809_90, 1 + $I_L2807_106) + -5.0e-1 * $wka_S15 ) + $wksinb_S16
 2817.                      d(1 + $I_L2809_90, 1 + $I_L2807_106) = b(1 + $I_L2809_90, 1 + $I_L2807_106) + $wkb_S17
 2818.                      d(1 + $I_L2809_90, la + $I_L2807_106 + 1) = ( b(1 + $I_L2809_90, 1 + $I_L2807_106) + -5.0e-1 * $wkb_S17 ) + $wksina_S18
 2819.                      d(1 + $I_L2809_90, $I_L2807_106 + 2 * la + 1) = ( b(1 + $I_L2809_90, 1 + $I_L2807_106) + -5.0e-1 * $wkb_S17 ) + -$wksina_S18
 2820.                      $I_L2809_90 = 1 + $I_L2809_90
 2809.                      if ( $I_L2809_90 >= lot ) exit
 2809.                   enddo
 2821.                   $I_L2807_106 = 1 + $I_L2807_106
 2820.                   if ( $I_L2807_106 >= la ) exit
 2820.                enddo
 2820.             endif
 2820.          endif
 2822.          if ( ( $m_S2 + -la /= 1 .and. xor( la, $m_S2 + -la + -1 ) < 0 ) == 0 ) then
 2822.             $t_S31 = ( -1 + $m_S2 ) / la
 2832.             if ( la > 0 ) then
 2834.                if ( lot > 0 ) then
 2822.                   $I_L2822_120 = 0
 2822. !dir$ loop_info (automatic) cache_nt( trigs )
 2822.                   do
 2825.                      $c1_S28 = trigs(2 * la + la * $I_L2822_120 * 2 + 1)
 2826.                      $s1_S26 = trigs(2 * la + la * $I_L2822_120 * 2 + 2)
 2827.                      $c2_S30 = trigs(4 * la + la * $I_L2822_120 * 4 + 1)
 2828.                      $s2_S29 = trigs(4 * la + la * $I_L2822_120 * 4 + 2)
 2832.                      $I_L2832_112 = 0
 2832.                      do
 2834.                         $I_L2834_96 = 0
 2834. !dir$ ivdep
 2834.                         do
 2835.                            $wka_S23 = a(1 + $I_L2834_96, la + $m_S2 + $I_L2832_112 + la * $I_L2822_120 + 1) + a(1 + $I_L2834_96, la + $I_L2832_112 + 2 * $m_S2 + la * $I_L2822_120 + 1)
 2836.                            $wksina_S25 = sin60 * ( a(1 + $I_L2834_96, la + $m_S2 + $I_L2832_112 + la * $I_L2822_120 + 1) + -a(1 + $I_L2834_96, la + $I_L2832_112 + 2 * $m_S2 + la * $I_L2822_120 + 1) )
 2837.                            $wkb_S24 = b(1 + $I_L2834_96, la + $m_S2 + $I_L2832_112 + la * $I_L2822_120 + 1) + b(1 + $I_L2834_96, la + $I_L2832_112 + 2 * $m_S2 + la * $I_L2822_120 + 1)
 2838.                            $wksinb_S27 = sin60 * ( b(1 + $I_L2834_96, la + $m_S2 + $I_L2832_112 + la * $I_L2822_120 + 1) + -b(1 + $I_L2834_96, la + $I_L2832_112 + 2 * $m_S2 + la * $I_L2822_120 + 1) )
 2839.                            c(1 + $I_L2834_96, $I_L2832_112 + 3 * la + la * $I_L2822_120 * 3 + 1) = a(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + $wka_S23
 2840.                            d(1 + $I_L2834_96, $I_L2832_112 + 3 * la + la * $I_L2822_120 * 3 + 1) = b(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + $wkb_S24
 2841.                            c(1 + $I_L2834_96, $I_L2832_112 + 4 * la + la * $I_L2822_120 * 3 + 1) = $c1_S28 * ( ( a(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wka_S23 ) + -$wksinb_S27 ) + -( $s1_S26 * ( ( b(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wkb_S24 ) + $wksina_S25 ) )
 2843.                            d(1 + $I_L2834_96, $I_L2832_112 + 4 * la + la * $I_L2822_120 * 3 + 1) = $s1_S26 * ( ( a(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wka_S23 ) + -$wksinb_S27 ) + $c1_S28 * ( ( b(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wkb_S24 ) + $wksina_S25 )
 2845.                            c(1 + $I_L2834_96, $I_L2832_112 + 5 * la + la * $I_L2822_120 * 3 + 1) = $c2_S30 * ( ( a(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wka_S23 ) + $wksinb_S27 ) + -( $s2_S29 * ( ( b(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wkb_S24 ) + -$wksina_S25 ) )
 2847.                            d(1 + $I_L2834_96, $I_L2832_112 + 5 * la + la * $I_L2822_120 * 3 + 1) = $s2_S29 * ( ( a(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wka_S23 ) + $wksinb_S27 ) + $c2_S30 * ( ( b(1 + $I_L2834_96, la + $I_L2832_112 + la * $I_L2822_120 + 1) + -5.0e-1 * $wkb_S24 ) + -$wksina_S25 )
 2849.                            $I_L2834_96 = 1 + $I_L2834_96
 2834.                            if ( $I_L2834_96 >= lot ) exit
 2834.                         enddo
 2850.                         $I_L2832_112 = 1 + $I_L2832_112
 2849.                         if ( $I_L2832_112 >= la ) exit
 2849.                      enddo
 2851.                      $I_L2822_120 = 1 + $I_L2822_120
 2850.                      if ( $I_L2822_120 >= $t_S31 ) exit
 2850.                   enddo
 2850.                endif
 2850.             endif
 2850.          endif
 2850.       else if ( ifac == 4 ) then
 2853.          if ( la > 0 ) then
 2855.             if ( lot > 0 ) then
 2853.                $I_L2853_104 = 0
 2853.                do
 2855.                   $I_L2855_88 = 0
 2855. !dir$ ivdep
 2855.                   do
 2856.                      $wkaacp_S34 = a(1 + $I_L2855_88, 1 + $I_L2853_104) + a(1 + $I_L2855_88, $I_L2853_104 + 2 * $m_S2 + 1)
 2857.                      $wkaacm_S37 = a(1 + $I_L2855_88, 1 + $I_L2853_104) + -a(1 + $I_L2855_88, $I_L2853_104 + 2 * $m_S2 + 1)
 2858.                      $wkbacp_S36 = b(1 + $I_L2855_88, 1 + $I_L2853_104) + b(1 + $I_L2855_88, $I_L2853_104 + 2 * $m_S2 + 1)
 2859.                      $wkbacm_S35 = b(1 + $I_L2855_88, 1 + $I_L2853_104) + -b(1 + $I_L2855_88, $I_L2853_104 + 2 * $m_S2 + 1)
 2860.                      c(1 + $I_L2855_88, 1 + $I_L2853_104) = $wkaacp_S34 + ( a(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + a(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2861.                      c(1 + $I_L2855_88, $I_L2853_104 + 2 * la + 1) = $wkaacp_S34 + -( a(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + a(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2862.                      d(1 + $I_L2855_88, la + $I_L2853_104 + 1) = $wkbacm_S35 + ( a(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + -a(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2863.                      d(1 + $I_L2855_88, $I_L2853_104 + 3 * la + 1) = $wkbacm_S35 + -( a(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + -a(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2864.                      d(1 + $I_L2855_88, 1 + $I_L2853_104) = $wkbacp_S36 + ( b(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + b(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2865.                      d(1 + $I_L2855_88, $I_L2853_104 + 2 * la + 1) = $wkbacp_S36 + -( b(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + b(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2866.                      c(1 + $I_L2855_88, la + $I_L2853_104 + 1) = $wkaacm_S37 + -( b(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + -b(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2867.                      c(1 + $I_L2855_88, $I_L2853_104 + 3 * la + 1) = $wkaacm_S37 + ( b(1 + $I_L2855_88, $m_S2 + $I_L2853_104 + 1) + -b(1 + $I_L2855_88, $I_L2853_104 + 3 * $m_S2 + 1) )
 2868.                      $I_L2855_88 = 1 + $I_L2855_88
 2855.                      if ( $I_L2855_88 >= lot ) exit
 2855.                   enddo
 2869.                   $I_L2853_104 = 1 + $I_L2853_104
 2868.                   if ( $I_L2853_104 >= la ) exit
 2868.                enddo
 2868.             endif
 2868.          endif
 2870.          if ( ( $m_S2 + -la /= 1 .and. xor( la, $m_S2 + -la + -1 ) < 0 ) == 0 ) then
 2870.             $t_S52 = ( -1 + $m_S2 ) / la
 2884.             if ( la > 0 ) then
 2886.                if ( lot > 0 ) then
 2870.                   $I_L2870_122 = 0
 2870. !dir$ loop_info (automatic) cache_nt( trigs )
 2870.                   do
 2874.                      $c1_S49 = trigs(2 * la + la * $I_L2870_122 * 2 + 1)
 2875.                      $s1_S47 = trigs(2 * la + la * $I_L2870_122 * 2 + 2)
 2876.                      $c2_S45 = trigs(4 * la + la * $I_L2870_122 * 4 + 1)
 2877.                      $s2_S44 = trigs(4 * la + la * $I_L2870_122 * 4 + 2)
 2878.                      $c3_S51 = trigs(6 * la + la * $I_L2870_122 * 6 + 1)
 2879.                      $s3_S50 = trigs(6 * la + la * $I_L2870_122 * 6 + 2)
 2884.                      $I_L2884_114 = 0
 2884.                      do
 2886.                         $I_L2886_98 = 0
 2886. !dir$ ivdep
 2886.                         do
 2887.                            $wkaacp_S42 = a(1 + $I_L2886_98, la + $I_L2884_114 + la * $I_L2870_122 + 1) + a(1 + $I_L2886_98, la + $I_L2884_114 + 2 * $m_S2 + la * $I_L2870_122 + 1)
 2888.                            $wkbacp_S43 = b(1 + $I_L2886_98, la + $I_L2884_114 + la * $I_L2870_122 + 1) + b(1 + $I_L2886_98, la + $I_L2884_114 + 2 * $m_S2 + la * $I_L2870_122 + 1)
 2889.                            $wkaacm_S48 = a(1 + $I_L2886_98, la + $I_L2884_114 + la * $I_L2870_122 + 1) + -a(1 + $I_L2886_98, la + $I_L2884_114 + 2 * $m_S2 + la * $I_L2870_122 + 1)
 2890.                            $wkbacm_S46 = b(1 + $I_L2886_98, la + $I_L2884_114 + la * $I_L2870_122 + 1) + -b(1 + $I_L2886_98, la + $I_L2884_114 + 2 * $m_S2 + la * $I_L2870_122 + 1)
 2891.                            c(1 + $I_L2886_98, $I_L2884_114 + 4 * la + la * $I_L2870_122 * 4 + 1) = $wkaacp_S42 + ( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) )
 2892.                            d(1 + $I_L2886_98, $I_L2884_114 + 4 * la + la * $I_L2870_122 * 4 + 1) = $wkbacp_S43 + ( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) )
 2893.                            c(1 + $I_L2886_98, $I_L2884_114 + 6 * la + la * $I_L2870_122 * 4 + 1) = $c2_S45 * ( $wkaacp_S42 + -( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) + -( $s2_S44 * ( $wkbacp_S43 + -( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) )
 2895.                            d(1 + $I_L2886_98, $I_L2884_114 + 6 * la + la * $I_L2870_122 * 4 + 1) = $s2_S44 * ( $wkaacp_S42 + -( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) + $c2_S45 * ( $wkbacp_S43 + -( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) )
 2897.                            c(1 + $I_L2886_98, $I_L2884_114 + 5 * la + la * $I_L2870_122 * 4 + 1) = $c1_S49 * ( $wkaacm_S48 + -( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) + -( $s1_S47 * ( $wkbacm_S46 + ( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) )
 2899.                            d(1 + $I_L2886_98, $I_L2884_114 + 5 * la + la * $I_L2870_122 * 4 + 1) = $s1_S47 * ( $wkaacm_S48 + -( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) + $c1_S49 * ( $wkbacm_S46 + ( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) )
 2901.                            c(1 + $I_L2886_98, $I_L2884_114 + 7 * la + la * $I_L2870_122 * 4 + 1) = $c3_S51 * ( $wkaacm_S48 + ( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) + -( $s3_S50 * ( $wkbacm_S46 + -( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) )
 2903.                            d(1 + $I_L2886_98, $I_L2884_114 + 7 * la + la * $I_L2870_122 * 4 + 1) = $s3_S50 * ( $wkaacm_S48 + ( b(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -b(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) ) + $c3_S51 * ( $wkbacm_S46 + -( a(1 + $I_L2886_98, la + $m_S2 + $I_L2884_114 + la * $I_L2870_122 + 1) + -a(1 + $I_L2886_98, la + $I_L2884_114 + 3 * $m_S2 + la * $I_L2870_122 + 1) ) )
 2905.                            $I_L2886_98 = 1 + $I_L2886_98
 2886.                            if ( $I_L2886_98 >= lot ) exit
 2886.                         enddo
 2906.                         $I_L2884_114 = 1 + $I_L2884_114
 2905.                         if ( $I_L2884_114 >= la ) exit
 2905.                      enddo
 2907.                      $I_L2870_122 = 1 + $I_L2870_122
 2906.                      if ( $I_L2870_122 >= $t_S52 ) exit
 2906.                   enddo
 2906.                endif
 2906.             endif
 2906.          endif
 2906.       else if ( ifac == 5 ) then
 2909.          if ( la > 0 ) then
 2911.             if ( lot > 0 ) then
 2909.                $I_L2909_102 = 0
 2909.                do
 2911.                   $I_L2911_86 = 0
 2911. !dir$ ivdep
 2911.                   do
 2912.                      c(1 + $I_L2911_86, 1 + $I_L2909_102) = a(1 + $I_L2911_86, 1 + $I_L2909_102) + ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) )
 2913.                      d(1 + $I_L2911_86, 1 + $I_L2909_102) = b(1 + $I_L2911_86, 1 + $I_L2909_102) + ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) )
 2916.                      c(1 + $I_L2911_86, la + $I_L2909_102 + 1) = ( a(1 + $I_L2911_86, 1 + $I_L2909_102) + cos72 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( cos36 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) ) + -( sin72 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + sin36 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) )
 2921.                      c(1 + $I_L2911_86, $I_L2909_102 + 4 * la + 1) = ( a(1 + $I_L2911_86, 1 + $I_L2909_102) + cos72 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( cos36 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) ) + ( sin72 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + sin36 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) )
 2926.                      d(1 + $I_L2911_86, la + $I_L2909_102 + 1) = ( b(1 + $I_L2911_86, 1 + $I_L2909_102) + cos72 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( cos36 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) ) + ( sin72 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + sin36 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) )
 2931.                      d(1 + $I_L2911_86, $I_L2909_102 + 4 * la + 1) = ( b(1 + $I_L2911_86, 1 + $I_L2909_102) + cos72 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( cos36 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) ) + -( sin72 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + sin36 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) )
 2936.                      c(1 + $I_L2911_86, $I_L2909_102 + 2 * la + 1) = ( a(1 + $I_L2911_86, 1 + $I_L2909_102) + -( cos36 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) ) + cos72 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) + -( sin36 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( sin72 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) )
 2941.                      c(1 + $I_L2911_86, $I_L2909_102 + 3 * la + 1) = ( a(1 + $I_L2911_86, 1 + $I_L2909_102) + -( cos36 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) ) + cos72 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) + ( sin36 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( sin72 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) )
 2946.                      d(1 + $I_L2911_86, $I_L2909_102 + 2 * la + 1) = ( b(1 + $I_L2911_86, 1 + $I_L2909_102) + -( cos36 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) ) + cos72 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) + ( sin36 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( sin72 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) )
 2951.                      d(1 + $I_L2911_86, $I_L2909_102 + 3 * la + 1) = ( b(1 + $I_L2911_86, 1 + $I_L2909_102) + -( cos36 * ( b(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) ) + cos72 * ( b(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + b(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) + -( sin36 * ( a(1 + $I_L2911_86, $m_S2 + $I_L2909_102 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 4 * $m_S2 + 1) ) + -( sin72 * ( a(1 + $I_L2911_86, $I_L2909_102 + 2 * $m_S2 + 1) + -a(1 + $I_L2911_86, $I_L2909_102 + 3 * $m_S2 + 1) ) ) )
 2956.                      $I_L2911_86 = 1 + $I_L2911_86
 2911.                      if ( $I_L2911_86 >= lot ) exit
 2911.                   enddo
 2957.                   $I_L2909_102 = 1 + $I_L2909_102
 2956.                   if ( $I_L2909_102 >= la ) exit
 2956.                enddo
 2956.             endif
 2956.          endif
 2958.          if ( ( $m_S2 + -la /= 1 .and. xor( la, $m_S2 + -la + -1 ) < 0 ) == 0 ) then
 2958.             $t_S67 = ( -1 + $m_S2 ) / la
 2976.             if ( la > 0 ) then
 2978.                if ( lot > 0 ) then
 2958.                   $I_L2958_124 = 0
 2958. !dir$ loop_info (automatic) cache_nt( trigs )
 2958.                   do
 2963.                      $c1_S60 = trigs(2 * la + la * $I_L2958_124 * 2 + 1)
 2964.                      $s1_S59 = trigs(2 * la + la * $I_L2958_124 * 2 + 2)
 2965.                      $c2_S64 = trigs(4 * la + la * $I_L2958_124 * 4 + 1)
 2966.                      $s2_S63 = trigs(4 * la + la * $I_L2958_124 * 4 + 2)
 2967.                      $c3_S66 = trigs(6 * la + la * $I_L2958_124 * 6 + 1)
 2968.                      $s3_S65 = trigs(6 * la + la * $I_L2958_124 * 6 + 2)
 2969.                      $c4_S62 = trigs(8 * la + la * $I_L2958_124 * 8 + 1)
 2970.                      $s4_S61 = trigs(8 * la + la * $I_L2958_124 * 8 + 2)
 2976.                      $I_L2976_116 = 0
 2976.                      do
 2978.                         $I_L2978_100 = 0
 2978. !dir$ ivdep
 2978.                         do
 2979.                            c(1 + $I_L2978_100, $I_L2976_116 + 5 * la + la * $I_L2958_124 * 5 + 1) = a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) )
 2982.                            d(1 + $I_L2978_100, $I_L2976_116 + 5 * la + la * $I_L2958_124 * 5 + 1) = b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) )
 2985.                            c(1 + $I_L2978_100, $I_L2976_116 + 6 * la + la * $I_L2958_124 * 5 + 1) = $c1_S60 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + -( sin72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + -( $s1_S59 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + ( sin72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) )
 2995.                            d(1 + $I_L2978_100, $I_L2976_116 + 6 * la + la * $I_L2958_124 * 5 + 1) = $s1_S59 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + -( sin72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + $c1_S60 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + ( sin72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) )
 3005.                            c(1 + $I_L2978_100, $I_L2976_116 + 9 * la + la * $I_L2958_124 * 5 + 1) = $c4_S62 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + ( sin72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + -( $s4_S61 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + -( sin72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) )
 3015.                            d(1 + $I_L2978_100, $I_L2976_116 + 9 * la + la * $I_L2958_124 * 5 + 1) = $s4_S61 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + ( sin72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + $c4_S62 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + cos72 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( cos36 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) + -( sin72 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + sin36 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) )
 3025.                            c(1 + $I_L2978_100, $I_L2976_116 + 7 * la + la * $I_L2958_124 * 5 + 1) = $c2_S64 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + -( sin36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) ) + -( $s2_S63 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + ( sin36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) ) )
 3035.                            d(1 + $I_L2978_100, $I_L2976_116 + 7 * la + la * $I_L2958_124 * 5 + 1) = $s2_S63 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + -( sin36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) ) + $c2_S64 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + ( sin36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) )
 3045.                            c(1 + $I_L2978_100, $I_L2976_116 + 8 * la + la * $I_L2958_124 * 5 + 1) = $c3_S66 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + ( sin36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) ) + -( $s3_S65 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + -( sin36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) ) )
 3055.                            d(1 + $I_L2978_100, $I_L2976_116 + 8 * la + la * $I_L2958_124 * 5 + 1) = $s3_S65 * ( ( a(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + ( sin36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) ) + $c3_S66 * ( ( b(1 + $I_L2978_100, la + $I_L2976_116 + la * $I_L2958_124 + 1) + -( cos36 * ( b(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) ) + cos72 * ( b(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + b(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) + -( sin36 * ( a(1 + $I_L2978_100, la + $m_S2 + $I_L2976_116 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 4 * $m_S2 + la * $I_L2958_124 + 1) ) + -( sin72 * ( a(1 + $I_L2978_100, la + $I_L2976_116 + 2 * $m_S2 + la * $I_L2958_124 + 1) + -a(1 + $I_L2978_100, la + $I_L2976_116 + 3 * $m_S2 + la * $I_L2958_124 + 1) ) ) ) )
 3065.                            $I_L2978_100 = 1 + $I_L2978_100
 2978.                            if ( $I_L2978_100 >= lot ) exit
 2978.                         enddo
 3066.                         $I_L2976_116 = 1 + $I_L2976_116
 3065.                         if ( $I_L2976_116 >= la ) exit
 3065.                      enddo
 3067.                      $I_L2958_124 = 1 + $I_L2958_124
 3066.                      if ( $I_L2958_124 >= $t_S67 ) exit
 3066.                   enddo
 3066.                endif
 3066.             endif
 3066.          endif
 3066.       endif
 3069.       return
 3069.       end
 3069.       
 3084.       
 3084.       subroutine createfft( nin, factors, nfactors, trigs, ntrigs )
 3091.       t$164 = 4
 3091.       t$335 = 4
 3091.       t$338 = 16
 3091.       t$336 = int( _alloc( 16 ), 8 )
 3091.       t$337 = t$336
 3091.       if ( nin <= 0 ) then
 3091.          _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$174,  _substr(t$173,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3091.          _f90_adjustl(  _substr(t$1141,1,15),  _substr(charnin,1,15) )
 3091.          t$1142 = _ltrim(  _substr(t$1141,1,15) )
 3091.          t$1144 = int( _alloc( _zla( 0, t$1142 ) ), 8 )
 3091.           _substr(t$1143,1,_zla( 0, t$1142 )) =  _substr(t$1141,1,_ltrim(  _substr(t$1141,1,15) ))
 3091.          $Unit_temp_O0 = nfprt
 3091.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$176,  _substr(t$175,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1143,1,_zla( 0, t$1142 )), 0x800600000000L ) ) )
 3091.          _free( t$1144 )
 3091.           _substr(t$1145,1,4) = ' '
 3091.          call _stop(  _substr(t$1145,1,1) )
 3091.       else
 3091.          nout = cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 )
 3091.          $left_S1 = cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) / 2
 3091.          $I_L3091_47 = 0
 3091.          do
 3091.             $SC_base_I1 = base(1 + $I_L3091_47)
 3091.             do
 3091.                if ( mod( $left_S1, $SC_base_I1 ) /= 0 ) goto 10
 3091.             enddo
 3091.    10       continue
 3091.             $I_L3091_47 = 1 + $I_L3091_47
 3091.             if ( $I_L3091_47 >= 4 ) exit
 3091.          enddo
 3091.          if ( $left_S1 /= 1 ) then
 3091.             if ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) < 2147483646.0 ) then
 3091.                $Trips03_N21 = int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) + 2.0 ) ), 8 ) + -_rsh( .not.or( (boolean[64])( -2147483646.0 + cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + -2.0 + 2.0 * real( int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) + 2.0 ) ), 8 ), 8 ) ), -( (boolean[64])( -2147483646.0 + cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + -2.0 + 2.0 * real( int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) + 2.0 ) ), 8 ), 8 ) ) ) ), 63 )
 3091.                $I_nout_49 = 0
 3091.                do
 3091.                   $left_S1 = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $I_nout_49 + 2 ) / 2
 3091.                   $I_L3091_41 = 0
 3091.                   do
 3091.                      $SC_base_I2 = base(1 + $I_L3091_41)
 3091.                      do
 3091.                         if ( mod( $left_S1, $SC_base_I2 ) /= 0 ) goto 20
 3091.                      enddo
 3091.    20                continue
 3091.                      $I_L3091_41 = 1 + $I_L3091_41
 3091.                      if ( $I_L3091_41 >= 4 ) exit
 3091.                   enddo
 3091.                   if ( $left_S1 == 1 ) then
 3091.                      nout = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $I_nout_49 + 2 )
 3091.                      goto 40
 3091.                   endif
 3091.                   $I_nout_49 = 1 + $I_nout_49
 3091.                   if ( $I_nout_49 >= $Trips03_N21 ) exit
 3091.                enddo
 3091.                nout = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $Trips03_N21 )
 3091.                goto 30
 3091.             else
 3091.    30          continue
 3091.                _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$178,  _substr(t$177,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3091.                _f90_adjustl(  _substr(t$1147,1,15),  _substr(charnin,1,15) )
 3091.                t$1148 = _ltrim(  _substr(t$1147,1,15) )
 3091.                t$1150 = int( _alloc( max( 0, t$1148 ) ), 8 )
 3091.                 _substr(t$1149,1,max( 0, t$1148 )) =  _substr(t$1147,1,_ltrim(  _substr(t$1147,1,15) ))
 3091.                $Unit_temp_O1 = nfprt
 3091.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$180,  _substr(t$179,1,78), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1149,1,max( 0, t$1148 )), 0x800600000000L ) ) )
 3091.                _free( t$1150 )
 3091.                 _substr(t$1151,1,4) = ' '
 3091.                call _stop(  _substr(t$1151,1,1) )
 3091.             endif
 3091.          endif
 3091.       endif
 3091.    40 continue
 3091.       nout = nout
 3091.       if ( nout + -nin /= 0 ) then
 3091.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$166,  _substr(t$165,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3091.          _f90_adjustl(  _substr(t$1120,1,15),  _substr(c,1,15) )
 3091.          t$1121 = _ltrim(  _substr(t$1120,1,15) )
 3091.          t$1123 = int( _alloc( max( 0, t$1121 ) ), 8 )
 3091.           _substr(t$1122,1,max( 0, t$1121 )) =  _substr(t$1120,1,_ltrim(  _substr(t$1120,1,15) ))
 3091.          $Unit_temp_O2 = nfprt
 3091.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$168,  _substr(t$167,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1122,1,max( 0, t$1121 )), 0x800600000000L ) ) )
 3091.          _free( t$1123 )
 3091.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$170,  _substr(t$169,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nout, 0x2000200000000L ) ) )
 3091.          _f90_adjustl(  _substr(t$1124,1,15),  _substr(c,1,15) )
 3091.          t$1125 = _ltrim(  _substr(t$1124,1,15) )
 3091.          t$1127 = int( _alloc( max( 0, t$1125 ) ), 8 )
 3091.           _substr(t$1126,1,max( 0, t$1125 )) =  _substr(t$1124,1,_ltrim(  _substr(t$1124,1,15) ))
 3091.          $Unit_temp_O3 = nfprt
 3091.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$172,  _substr(t$171,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1126,1,max( 0, t$1125 )), 0x800600000000L ) ) )
 3091.          _free( t$1127 )
 3091.           _substr(t$1128,1,4) = ' '
 3091.          call _stop(  _substr(t$1128,1,1) )
 3091.       else
 3091.          $left_S3 = nout / 2
 3091.          $I_L3091_35 = 0
 3091. !dir$ ivdep
 3091.          do
 3091.             powers(1 + $I_L3091_35) = 0
 3091.             $I_L3091_35 = 1 + $I_L3091_35
 3091.             if ( $I_L3091_35 >= 4 ) exit
 3091.          enddo
 3091.          $I_L3091_43 = 0
 3091.          do
 3091.             $SC_base_I3 = base(1 + $I_L3091_43)
 3091.             do
 3091.                if ( mod( $left_S3, $SC_base_I3 ) /= 0 ) goto 50
 3091.                powers(1 + $I_L3091_43) = 1 + powers(1 + $I_L3091_43)
 3091.             enddo
 3091.    50       continue
 3091.             $I_L3091_43 = 1 + $I_L3091_43
 3091.             if ( $I_L3091_43 >= 4 ) exit
 3091.          enddo
 3091.          $Reduc_A34 = 0
 3091.          $I_L3091_37 = 0
 3091. !dir$ ivdep
 3091.          do
 3091.             $Reduc_A34 = $Reduc_A34 + powers(1 + $I_L3091_37)
 3091.             $I_L3091_37 = 1 + $I_L3091_37
 3091.             if ( $I_L3091_37 >= 4 ) exit
 3091.          enddo
 3091.          factors%header%a_contig = 1
 3091.          factors%dim_1%LB = 1
 3091.          factors%dim_1%EX = ( max( 0, 1 + $Reduc_A34 ) )
 3091.          factors%dim_1%SM = 1
 3091.          $_allo_P0(0) = 0x1000000000001L
 3091.          $_allo_P0(1) = loc( factors )
 3091.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 3091.          (factors%base_addr)(1, 0) = $Reduc_A34
 3091.          $ifac_S7 = 1
 3091.          $I_L3091_45 = 0
 3091. !dir$ loop_info (automatic) cache_nt( base )
 3091.          do
 3091.             $j_S6 = permutation(1 + $I_L3091_45)
 3091.             $F_A36 = powers($j_S6)
 3091.             if ( powers($j_S6) > 0 ) then
 3091.                $SCA_base_I0 = base($j_S6)
 3091.                $I_L3091_39 = 0
 3091. !dir$ ivdep
 3091.                do
 3091.                   (factors%base_addr)($ifac_S7 + $I_L3091_39 + 1, 0) = $SCA_base_I0
 3091.                   $I_L3091_39 = 1 + $I_L3091_39
 3091.                   if ( $I_L3091_39 >= $F_A36 ) exit
 3091.                enddo
 3091.             endif
 3091.             $ifac_S7 = $ifac_S7 + powers($j_S6)
 3091.             $I_L3091_45 = 1 + $I_L3091_45
 3091.             if ( $I_L3091_45 >= 4 ) exit
 3091.          enddo
 3091.          _free( t$336 )
 3091.       endif
 3092.       nfactors = ( max( 0, factors%dim_1%EX ) )
 3093.       call trigfactors( nin, trigs )
 3094.       ntrigs = ( max( 0, trigs%dim_1%EX ) )
 3095.       return
 3095.       end
 3095.       
 3103.       
 3103.       subroutine destroyfft( factors, trigs )
 3107.       $_allo_P0(0) = 0x1000000000001L
 3107.       $_allo_P0(1) = loc( factors )
 3107.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 3107.       factors%header%assoc = 0
 3107.       factors%header%assoc = 0
 3108.       $_allo_P1(0) = 0x1000000000001L
 3108.       $_allo_P1(1) = loc( trigs )
 3108.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 3108.       trigs%header%assoc = 0
 3108.       trigs%header%assoc = 0
 3109.       return
 3109.       end
 3109.       
 3118.       
 3118.       subroutine factorize( nin, factors, nbase, base )
 3118.       t$164 = nbase
 3124.       t$335 = _zla( 0, nbase )
 3128.       t$338 = 4 * _zla( 0, nbase )
 3118.       t$336 = int( _alloc( 4 * _zla( 0, nbase ) ), 8 )
 3128.       t$337 = t$336
 3136.       nout = nextsizefft( nin )
 3138.       if ( nout + -nin /= 0 ) then
 3139.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$166,  _substr(t$165,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3141.          _f90_adjustl(  _substr(t$1120,1,15),  _substr(c,1,15) )
 3140.          t$1121 = _ltrim(  _substr(t$1120,1,15) )
 3141.          t$1123 = int( _alloc( _zla( 0, t$1121 ) ), 8 )
 3141.           _substr(t$1122,1,_zla( 0, t$1121 )) =  _substr(t$1120,1,_ltrim(  _substr(t$1120,1,15) ))
 3140.          $Unit_temp_O0 = nfprt
 3140.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$168,  _substr(t$167,1,41), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1122,1,_zla( 0, t$1121 )), 0x800600000000L ) ) )
 3141.          _free( t$1123 )
 3142.          _fwrite( _clist( 0, 0, 3,  _substr(c,1,15), Null_Arg, Null_Arg, t$170,  _substr(t$169,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nout, 0x2000200000000L ) ) )
 3144.          _f90_adjustl(  _substr(t$1124,1,15),  _substr(c,1,15) )
 3143.          t$1125 = _ltrim(  _substr(t$1124,1,15) )
 3144.          t$1127 = int( _alloc( _zla( 0, t$1125 ) ), 8 )
 3144.           _substr(t$1126,1,_zla( 0, t$1125 )) =  _substr(t$1124,1,_ltrim(  _substr(t$1124,1,15) ))
 3143.          $Unit_temp_O1 = nfprt
 3143.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$172,  _substr(t$171,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(Factorize)**', 0x800600000000L ), _iotype(  _substr(t$1126,1,_zla( 0, t$1125 )), 0x800600000000L ) ) )
 3144.          _free( t$1127 )
 3145.           _substr(t$1128,1,4) = ' '
 3145.          call _stop(  _substr(t$1128,1,1) )
 3145.       else
 3150.          $left_S1 = nout / 2
 3151.          $F_A34 = nbase
 3151.          if ( nbase > 0 ) then
 3151.             $I_L3151_18 = 0
 3151. !dir$ ivdep
 3151.             do
 3151.                powers(1 + $I_L3151_18) = 0
 3151.                $I_L3151_18 = 1 + $I_L3151_18
 3151.                if ( $I_L3151_18 >= $F_A34 ) exit
 3151.             enddo
 3155.             $I_L3155_24 = 0
 3155.             do
 3157.                $SC_base_I1 = base(1 + $I_L3155_24)
 3156.                do
 3157.                   if ( mod( $left_S1, $SC_base_I1 ) /= 0 ) goto 10
 3158.                   powers(1 + $I_L3155_24) = 1 + powers(1 + $I_L3155_24)
 3158.                enddo
 3158.    10          continue
 3164.                $I_L3155_24 = 1 + $I_L3155_24
 3160.                if ( $I_L3155_24 >= nbase ) exit
 3160.             enddo
 3160.          endif
 3166.          $Reduc_A35 = 0
 3166.          $F_A37 = nbase
 3166.          if ( nbase > 0 ) then
 3166.             $I_L3166_20 = 0
 3166. !dir$ ivdep
 3166.             do
 3166.                $Reduc_A35 = $Reduc_A35 + powers(1 + $I_L3166_20)
 3166.                $I_L3166_20 = 1 + $I_L3166_20
 3166.                if ( $I_L3166_20 >= $F_A37 ) exit
 3166.             enddo
 3166.          endif
 3167.          factors%header%a_contig = 1
 3167.          factors%dim_1%LB = 1
 3167.          factors%dim_1%EX = ( max( 0, 1 + $Reduc_A35 ) )
 3167.          factors%dim_1%SM = 1
 3167.          $_allo_P0(0) = 0x1000000000001L
 3167.          $_allo_P0(1) = loc( factors )
 3167.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 3168.          (factors%base_addr)(1, 0) = $Reduc_A35
 3169.          $ifac_S5 = 1
 3170.          if ( nbase > 0 ) then
 3170.             $I_L3170_26 = 0
 3170. !dir$ loop_info (automatic) cache_nt( base )
 3170.             do
 3171.                $j_S4 = permutation(1 + $I_L3170_26)
 3172.                $F_A38 = powers($j_S4)
 3172.                if ( powers($j_S4) > 0 ) then
 3172.                   $SCA_base_I0 = base($j_S4)
 3172.                   $I_L3172_22 = 0
 3172. !dir$ ivdep
 3172.                   do
 3172.                      (factors%base_addr)($ifac_S5 + $I_L3172_22 + 1, 0) = $SCA_base_I0
 3172.                      $I_L3172_22 = 1 + $I_L3172_22
 3172.                      if ( $I_L3172_22 >= $F_A38 ) exit
 3172.                   enddo
 3172.                endif
 3173.                $ifac_S5 = $ifac_S5 + powers($j_S4)
 3174.                $I_L3170_26 = 1 + $I_L3170_26
 3170.                if ( $I_L3170_26 >= nbase ) exit
 3170.             enddo
 3170.          endif
 3118.          _free( t$336 )
 3118.       endif
 3175.       return
 3175.       end
 3175.       
 3183.       
 3183.       subroutine trigfactors( nin, trigs )
 3191.       trigs%header%a_contig = 1
 3191.       trigs%dim_1%LB = 1
 3191.       trigs%dim_1%EX = _zla( 0, ( 2 * ( nin / 2 ) + 2 * ( ( 1 + nin / 2 ) / 2 ) ) )
 3191.       trigs%dim_1%SM = 1
 3191.       $_allo_P2(0) = 0x1000000000001L
 3191.       $_allo_P2(1) = loc( trigs )
 3191.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 3194.       $del_S1 = ( 6.2831853071795862 * 1.0/( nin / 2 ) )
 3196.       if ( 2 * ( nin / 2 ) > 0 ) then
 3196.          $I_L3196_8 = 0
 3196. !dir$ ivdep
 3196.          do
 3198.             $Coss_P0 = coss( ( $del_S1 * real( 2 * $I_L3196_8, 8 ) * 5.0e-1 ) )
 3198.             (trigs%base_addr)(1 + 2 * $I_L3196_8, 0) = real( $Coss_P0, 8 )
 3199.             (trigs%base_addr)(2 + 2 * $I_L3196_8, 0) = cimag( $Coss_P0 )
 3200.             $I_L3196_8 = 1 + $I_L3196_8
 3196.             if ( $I_L3196_8 >= ( 1 + 2 * ( nin / 2 ) ) / 2 ) exit
 3196.          enddo
 3196.       endif
 3202.       $del_S3 = 5.0e-1 * $del_S1
 3203.       if ( 2 * ( ( 1 + nin / 2 ) / 2 ) > 0 ) then
 3203.          $I_L3203_10 = 0
 3203. !dir$ ivdep
 3203.          do
 3205.             $Coss_P1 = coss( ( $del_S3 * real( 2 * $I_L3203_10, 8 ) * 5.0e-1 ) )
 3205.             (trigs%base_addr)(2 * ( nin / 2 ) + 2 * $I_L3203_10 + 1, 0) = real( $Coss_P1, 8 )
 3206.             (trigs%base_addr)(2 * ( nin / 2 ) + 2 * $I_L3203_10 + 2, 0) = cimag( $Coss_P1 )
 3207.             $I_L3203_10 = 1 + $I_L3203_10
 3203.             if ( $I_L3203_10 >= ( 1 + 2 * ( ( 1 + nin / 2 ) / 2 ) ) / 2 ) exit
 3203.          enddo
 3203.       endif
 3208.       return
 3208.       end
 3208.       
 3216.       
 3216.       integer
 3216.       function nextsizefft( nin )
 3227.       if ( nin <= 0 ) then
 3228.          _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$174,  _substr(t$173,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3229.          _f90_adjustl(  _substr(t$1141,1,15),  _substr(charnin,1,15) )
 3229.          t$1142 = _ltrim(  _substr(t$1141,1,15) )
 3229.          t$1144 = int( _alloc( _zla( 0, t$1142 ) ), 8 )
 3229.           _substr(t$1143,1,_zla( 0, t$1142 )) =  _substr(t$1141,1,_ltrim(  _substr(t$1141,1,15) ))
 3229.          $Unit_temp_O0 = nfprt
 3229.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$176,  _substr(t$175,1,29), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1143,1,_zla( 0, t$1142 )), 0x800600000000L ) ) )
 3229.          _free( t$1144 )
 3230.           _substr(t$1145,1,4) = ' '
 3230.          call _stop(  _substr(t$1145,1,1) )
 3230.          return
 3230.       else
 3231.          nout = cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 )
 3241.          $left_S1 = cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) / 2
 3245.          $I_L3245_19 = 0
 3245.          do
 3247.             $SC_base_I0 = base(1 + $I_L3245_19)
 3246.             do
 3247.                if ( mod( $left_S1, $SC_base_I0 ) /= 0 ) goto 10
 3248.             enddo
 3248.    10       continue
 3253.             $I_L3245_19 = 1 + $I_L3245_19
 3249.             if ( $I_L3245_19 >= 4 ) exit
 3249.          enddo
 3255.          if ( $left_S1 /= 1 ) then
 3257.             if ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) < 2147483646.0 ) then
 3240.                $Trips03_N9 = int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) + 2.0 ) ), 8 ) + -_rsh( .not.or( (boolean[64])( -2147483646.0 + cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + -2.0 + 2.0 * real( int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) + 2.0 ) ), 8 ), 8 ) ), -( (boolean[64])( -2147483646.0 + cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + -2.0 + 2.0 * real( int( ( 5.0e-1 * ( 2147483646.0 + ( -cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) ) + 2.0 ) ), 8 ), 8 ) ) ) ), 63 )
 3240.                $I_nout_21 = 0
 3240.                do
 3241.                   $left_S1 = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $I_nout_21 + 2 ) / 2
 3245.                   $I_L3245_17 = 0
 3245.                   do
 3247.                      $SC_base_I1 = base(1 + $I_L3245_17)
 3246.                      do
 3247.                         if ( mod( $left_S1, $SC_base_I1 ) /= 0 ) goto 20
 3248.                      enddo
 3248.    20                continue
 3253.                      $I_L3245_17 = 1 + $I_L3245_17
 3249.                      if ( $I_L3245_17 >= 4 ) exit
 3249.                   enddo
 3255.                   if ( $left_S1 == 1 ) then
 3258.                      nout = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $I_nout_21 + 2 )
 3258.                      goto 40
 3258.                   endif
 3257.                   $I_nout_21 = 1 + $I_nout_21
 3257.                   if ( $I_nout_21 >= $Trips03_N9 ) exit
 3257.                enddo
 3258.                nout = ( cvmg( 1 + nin, nin, mod( nin, 2 ) /= 0 ) + 2 * $Trips03_N9 )
 3258.                goto 30
 3258.             else
 3258.    30          continue
 3260.                _fwrite( _clist( 0, 0, 3,  _substr(charnin,1,15), Null_Arg, Null_Arg, t$178,  _substr(t$177,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nin, 0x2000200000000L ) ) )
 3263.                _f90_adjustl(  _substr(t$1147,1,15),  _substr(charnin,1,15) )
 3261.                t$1148 = _ltrim(  _substr(t$1147,1,15) )
 3263.                t$1150 = int( _alloc( max( 0, t$1148 ) ), 8 )
 3263.                 _substr(t$1149,1,max( 0, t$1148 )) =  _substr(t$1147,1,_ltrim(  _substr(t$1147,1,15) ))
 3261.                $Unit_temp_O1 = nfprt
 3261.                _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$180,  _substr(t$179,1,78), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(NextSizeFFT)**     ', 0x800600000000L ), _iotype(  _substr(t$1149,1,max( 0, t$1148 )), 0x800600000000L ) ) )
 3263.                _free( t$1150 )
 3264.                 _substr(t$1151,1,4) = ' '
 3264.                call _stop(  _substr(t$1151,1,1) )
 3264.                return
 3264.             endif
 3264.          endif
 3264.       endif
 3264.    40 continue
 3267.       nextsizefft = nout
 3267.       return
 3267.       end
 3267.       
 3281.       
 3281.       subroutine dirffttrans( finout, ldinout, tdinout, n, lot, trigs, ntrigs, factors, nfactors )
 3281.       t$181 = ldinout
 3281.       t$182 = tdinout
 3283.       t$339 = _zla( 0, ldinout )
 3281.       t$340 = _zla( 0, ldinout )
 3283.       t$341 = _zla( 0, tdinout )
 3281.       t$342 = _zla( 0, ldinout ) * _zla( 0, tdinout )
 3281.       t$183 = ntrigs
 3287.       t$343 = _zla( 0, ntrigs )
 3281.       t$184 = nfactors
 3289.       t$344 = _zla( 0, nfactors )
 3281.       t$185 = lot
 3281.       t$186 = n / 2
 3297.       t$345 = _zla( 0, lot )
 3281.       t$346 = _zla( 0, lot )
 3297.       t$347 = _zla( 0, n / 2 )
 3281.       t$348 = _zla( 0, lot ) * _zla( 0, n / 2 )
 3297.       t$351 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 8
 3298.       t$352 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 8
 3298.       t$354 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 16
 3299.       t$355 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 16
 3299.       t$357 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 24
 3300.       t$358 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 24
 3300.       t$360 = _zla( 0, lot ) * _zla( 0, n / 2 ) * 32
 3281.       t$349 = int( _alloc( _zla( 0, lot ) * _zla( 0, n / 2 ) * 32 ), 8 )
 3297.       t$350 = t$349
 3298.       t$353 = t$349 + _zla( 0, lot ) * _zla( 0, n / 2 ) * 8
 3299.       t$356 = t$349 + _zla( 0, lot ) * _zla( 0, n / 2 ) * 16
 3300.       t$359 = t$349 + _zla( 0, lot ) * _zla( 0, n / 2 ) * 24
 3302.       $nfax_S0 = factors(1)
 3303.       nh = n / 2
 3305.       call splitgridtrans( finout(1, 1), a(1, 1), b(1, 1), ldinout, tdinout, nh, lot )
 3307.       la = 1
 3308.       $ab2cd_S1 = .true.
 3309.       if ( $nfax_S0 > 0 ) then
 3309.          $I_L3309_4 = 0
 3309.          do
 3310.             if ( $ab2cd_S1 ) then
 3311.                call onepass( a(1, 1), b(1, 1), c(1, 1), d(1, 1), lot, nh, factors(2 + $I_L3309_4), la, trigs(1), ntrigs )
 3312.                $ab2cd_S1 = .false.
 3312.             else
 3314.                call onepass( c(1, 1), d(1, 1), a(1, 1), b(1, 1), lot, nh, factors(2 + $I_L3309_4), la, trigs(1), ntrigs )
 3315.                $ab2cd_S1 = .true.
 3315.             endif
 3317.             la = la * factors(2 + $I_L3309_4)
 3318.             $I_L3309_4 = 1 + $I_L3309_4
 3316.             if ( $I_L3309_4 >= $nfax_S0 ) exit
 3316.          enddo
 3316.       endif
 3320.       if ( $ab2cd_S1 ) then
 3321.          call joinfourtrans( a(1, 1), b(1, 1), finout(1, 1), ldinout, tdinout, n, nh, lot, trigs(1), ntrigs )
 3321.       else
 3323.          call joinfourtrans( c(1, 1), d(1, 1), finout(1, 1), ldinout, tdinout, n, nh, lot, trigs(1), ntrigs )
 3323.       endif
 3281.       _free( t$349 )
 3325.       return
 3325.       end
 3325.       
 3334.       
 3334.       subroutine splitgridtrans( fin, a, b, ldin, tdin, nh, lot )
 3334.       t$187 = ldin
 3334.       t$188 = tdin
 3339.       t$361 = _zla( 0, ldin )
 3334.       t$362 = _zla( 0, ldin )
 3339.       t$363 = _zla( 0, tdin )
 3334.       t$364 = _zla( 0, ldin ) * _zla( 0, tdin )
 3334.       t$189 = lot
 3334.       t$190 = nh
 3340.       t$365 = _zla( 0, lot )
 3334.       t$366 = _zla( 0, lot )
 3340.       t$367 = _zla( 0, nh )
 3334.       t$368 = _zla( 0, lot ) * _zla( 0, nh )
 3345.       if ( nh > 0 ) then
 3346.          if ( lot > 0 ) then
 3345.             $I_L3345_10 = 0
 3345.             do
 3346.                $I_L3346_8 = 0
 3346. !dir$ ivdep
 3346.                do
 3347.                   a(1 + $I_L3346_8, 1 + $I_L3345_10) = fin(1 + $I_L3346_8, 1 + 2 * $I_L3345_10)
 3348.                   b(1 + $I_L3346_8, 1 + $I_L3345_10) = fin(1 + $I_L3346_8, 2 + 2 * $I_L3345_10)
 3349.                   $I_L3346_8 = 1 + $I_L3346_8
 3346.                   if ( $I_L3346_8 >= lot ) exit
 3346.                enddo
 3350.                $I_L3345_10 = 1 + $I_L3345_10
 3349.                if ( $I_L3345_10 >= nh ) exit
 3349.             enddo
 3349.          endif
 3349.       endif
 3352.       return
 3352.       end
 3352.       
 3361.       
 3361.       subroutine joinfourtrans( a, b, fout, ldout, tdout, n, nh, lot, trigs, ntrigs )
 3361.       t$193 = lot
 3361.       t$194 = nh
 3367.       t$369 = _zla( 0, lot )
 3361.       t$370 = _zla( 0, lot )
 3367.       t$371 = _zla( 0, nh )
 3361.       t$372 = _zla( 0, lot ) * _zla( 0, nh )
 3361.       t$191 = ldout
 3361.       t$192 = tdout
 3366.       t$373 = _zla( 0, ldout )
 3361.       t$374 = _zla( 0, ldout )
 3366.       t$375 = _zla( 0, tdout )
 3361.       t$376 = _zla( 0, ldout ) * _zla( 0, tdout )
 3361.       t$195 = ntrigs
 3370.       t$377 = _zla( 0, ntrigs )
 3376.       $scale_S1 = 1.0/n
 3377.       $scalh_S6 = 5.0e-1 * 1.0/n
 3380.       if ( lot > 0 ) then
 3380.          $I_L3380_16 = 0
 3380. !dir$ ivdep
 3380.          do
 3381.             fout(1 + $I_L3380_16, 1) = $scale_S1 * ( a(1 + $I_L3380_16, 1) + b(1 + $I_L3380_16, 1) )
 3382.             fout(1 + $I_L3380_16, 1 + n) = $scale_S1 * ( a(1 + $I_L3380_16, 1) + -b(1 + $I_L3380_16, 1) )
 3383.             fout(1 + $I_L3380_16, 2) = 0.0
 3384.             $I_L3380_16 = 1 + $I_L3380_16
 3380.             if ( $I_L3380_16 >= lot ) exit
 3380.          enddo
 3380.       endif
 3386.       if ( -2 + ( 1 + nh ) / 2 >= 0 ) then
 3390.          if ( lot > 0 ) then
 3386.             $I_L3386_22 = 0
 3386.             do
 3387.                $c_S5 = trigs(n + 2 * $I_L3386_22 + 3)
 3388.                $s_S4 = trigs(n + 2 * $I_L3386_22 + 4)
 3390.                $I_L3390_18 = 0
 3390. !dir$ ivdep
 3390.                do
 3391.                   fout(1 + $I_L3390_18, 3 + 2 * $I_L3386_22) = $scalh_S6 * ( ( a(1 + $I_L3390_18, 2 + $I_L3386_22) + a(1 + $I_L3390_18, nh + -$I_L3386_22) ) + ( $c_S5 * ( b(1 + $I_L3390_18, 2 + $I_L3386_22) + b(1 + $I_L3390_18, nh + -$I_L3386_22) ) + $s_S4 * ( a(1 + $I_L3390_18, 2 + $I_L3386_22) + -a(1 + $I_L3390_18, nh + -$I_L3386_22) ) ) )
 3394.                   fout(1 + $I_L3390_18, n + -2 * $I_L3386_22 + -1) = $scalh_S6 * ( ( a(1 + $I_L3390_18, 2 + $I_L3386_22) + a(1 + $I_L3390_18, nh + -$I_L3386_22) ) + -( $c_S5 * ( b(1 + $I_L3390_18, 2 + $I_L3386_22) + b(1 + $I_L3390_18, nh + -$I_L3386_22) ) + $s_S4 * ( a(1 + $I_L3390_18, 2 + $I_L3386_22) + -a(1 + $I_L3390_18, nh + -$I_L3386_22) ) ) )
 3397.                   fout(1 + $I_L3390_18, 4 + 2 * $I_L3386_22) = $scalh_S6 * ( ( $c_S5 * ( a(1 + $I_L3390_18, 2 + $I_L3386_22) + -a(1 + $I_L3390_18, nh + -$I_L3386_22) ) + -( $s_S4 * ( b(1 + $I_L3390_18, 2 + $I_L3386_22) + b(1 + $I_L3390_18, nh + -$I_L3386_22) ) ) ) + ( b(1 + $I_L3390_18, nh + -$I_L3386_22) + -b(1 + $I_L3390_18, 2 + $I_L3386_22) ) )
 3400.                   fout(1 + $I_L3390_18, n + -2 * $I_L3386_22) = $scalh_S6 * ( ( $c_S5 * ( a(1 + $I_L3390_18, 2 + $I_L3386_22) + -a(1 + $I_L3390_18, nh + -$I_L3386_22) ) + -( $s_S4 * ( b(1 + $I_L3390_18, 2 + $I_L3386_22) + b(1 + $I_L3390_18, nh + -$I_L3386_22) ) ) ) + -( b(1 + $I_L3390_18, nh + -$I_L3386_22) + -b(1 + $I_L3390_18, 2 + $I_L3386_22) ) )
 3403.                   $I_L3390_18 = 1 + $I_L3390_18
 3390.                   if ( $I_L3390_18 >= lot ) exit
 3390.                enddo
 3404.                $I_L3386_22 = 1 + $I_L3386_22
 3403.                if ( $I_L3386_22 >= -1 + ( 1 + nh ) / 2 ) exit
 3403.             enddo
 3403.          endif
 3403.       endif
 3406.       if ( nh >= 2 ) then
 3406.          if ( mod( nh, 2 ) == 0 ) then
 3408.             if ( lot > 0 ) then
 3408.                $I_L3408_20 = 0
 3408. !dir$ ivdep
 3408.                do
 3409.                   fout(1 + $I_L3408_20, 1 + nh) = $scale_S1 * a(1 + $I_L3408_20, 1 + nh / 2)
 3410.                   fout(1 + $I_L3408_20, 2 + nh) = -( $scale_S1 * b(1 + $I_L3408_20, 1 + nh / 2) )
 3411.                   $I_L3408_20 = 1 + $I_L3408_20
 3408.                   if ( $I_L3408_20 >= lot ) exit
 3408.                enddo
 3408.             endif
 3408.          endif
 3408.       endif
 3414.       return
 3414.       end
 3414.       
    6.       
    6.       module transform
 3415.       return
 3415.       end
 3415.       
