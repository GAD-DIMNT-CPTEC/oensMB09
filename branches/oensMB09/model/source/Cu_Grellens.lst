%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Cu_Grellens.f90
Compiled : 10/21/10  15:11:30
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmda -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Cu_Grellens.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Cu_Grellens.f90
Date     : 10/21/2010  15:13:29


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,nomodinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_28332/Cu_Grellens.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.               !
    2.               !  $Author: pkubota $
    3.               !  $Date: 2009/08/06 20:51:02 $
    4.               !  $Revision: 1.5 $
    5.               !
    6.               MODULE Cu_Grellens
    7.                 !
    8.                 ! grellens--|---grellens2-|
    9.                 !                         |cup_env
   10.                 !                         |  
   11.                 !                         |cup_env
   12.                 !                         |  
   13.                 !                         |cup_env_clev
   14.                 !                         |  
   15.                 !                         |cup_env_clev
   16.                 !                         |  
   17.                 !                         |cup_maximi
   18.                 !                         |  
   19.                 !                         |cup_kbcon
   20.                 !                         |  
   21.                 !                         |cup_minimi
   22.                 !                         |  
   23.                 !                         |cup_up_he
   24.                 !                         |  
   25.                 !                         |cup_up_he
   26.                 !                         |  
   27.                 !                         |cup_ktop
   28.                 !                         |  
   29.                 !                         |cup_minimi
   30.                 !                         |  
   31.                 !                         |cup_up_nms
   32.                 !                         |  
   33.                 !                         |cup_up_nms
   34.                 !                         |  
   35.                 !                         |cup_dd_nms
   36.                 !                         |  
   37.                 !                         |cup_dd_nms
   38.                 !                         |  
   39.                 !                         |cup_dd_he
   40.                 !                         |  
   41.                 !                         |cup_dd_he
   42.                 !                         |  
   43.                 !                         |cup_dd_moisture
   44.                 !                         |  
   45.                 !                         |cup_dd_moisture
   46.                 !                         |  
   47.                 !                         |cup_up_moisture
   48.                 !                         |  
   49.                 !                         |cup_up_moisture
   50.                 !                         |  
   51.                 !                         |cup_up_aa0
   52.                 !                         |  
   53.                 !                         |cup_up_aa0
   54.                 !                         |  
   55.                 !                         |cup_dd_edt
   56.                 !                         |  
   57.                 !                         |cup_dellabot
   58.                 !                         |  
   59.                 !                         |cup_dellabot
   60.                 !                         |  
   61.                 !                         |cup_dellas
   62.                 !                         |  
   63.                 !                         |cup_dellas
   64.                 !                         |  
   65.                 !                         |cup_env
   66.                 !                         |  
   67.                 !                         |cup_env_clev
   68.                 !                         |  
   69.                 !                         |cup_up_he
   70.                 !                         |  
   71.                 !                         |cup_up_nms
   72.                 !                         |  
   73.                 !                         |cup_dd_nms
   74.                 !                         |  
   75.                 !                         |cup_dd_he
   76.                 !                         |  
   77.                 !                         |cup_dd_moisture
   78.                 !                         |  
   79.                 !                         |cup_up_moisture
   80.                 !                         |  
   81.                 !                         |cup_up_aa0
   82.                 !                         |  
   83.                 !                         |cup_maximi
   84.                 !                         |  
   85.                 !                         |cup_kbcon
   86.                 !                         |  
   87.                 !                         |cup_forcing_ens_16
   88.                 !                         |  
   89.                 !                         |cup_output_ens
   90.                 ! 
   91.                 USE Constants, ONLY :  &
   92.                      r8  
   93.                 USE Options, ONLY :       &
   94.                      grepar1           , &! integer: 0 ensemble 1 GRE   4 OMG   7 KUO  10 Chappel 13 ARA   24 ensemble2     
   95.                      grepar2           , &
   96.                      grepar3           , &
   97.                      grepar4 
   98.               
   99.                 IMPLICIT NONE
  100.                 PRIVATE
  101.                 PUBLIC :: grellens,InitGrellens
  102.                 REAL(KIND=r8)   , PARAMETER :: cp   =1004.0_r8
  103.                 REAL(KIND=r8)   , PARAMETER :: xl   =2.5e06_r8
  104.                 REAL(KIND=r8)   , PARAMETER :: rv   =461.9_r8
  105.                 !----------------------------------------------------------------------------
  106.                 REAL(KIND=r8)   , PARAMETER :: detra = 10000.0_r8! detrainment value, original 12000. (10000-12000)
  107.                 REAL(KIND=r8)   , PARAMETER :: xfmax = 0.10_r8! xff max value ocean. 0.0---0.2  (best 0.05-0.10) 
  108.                 !----------------------------------------------------------------------------
  109.                 INTEGER, PARAMETER :: iens     =  1 
  110.                 INTEGER, PARAMETER :: iens_tmp =  1
  111.                 INTEGER, PARAMETER :: mjx      =  1 
  112.                 INTEGER, PARAMETER :: maxens   =  3 ! ensemble one on mbdt from PARAME(mm5)
  113.                 INTEGER, PARAMETER :: maxens2  =  3 ! ensemble two on precip efficiency
  114.                 INTEGER, PARAMETER :: maxens3  = 16 ! ensemble three done in cup_forcing
  115.                 INTEGER, PARAMETER :: ensdim   = 1*maxens*maxens2*maxens3 !144
  116.                 REAL(KIND=r8)   , PARAMETER :: tcrit    =   273.15_r8
  117.                 !
  118.                 ! workfunctions for downdraft
  119.                 !
  120.                 REAL(KIND=r8)   , PARAMETER :: beta1=0.0_r8
  121.                 REAL(KIND=r8)   , PARAMETER :: beta2=0.25_r8
  122.                 REAL(KIND=r8)   , PARAMETER :: beta3=0.50_r8
  123.                 REAL(KIND=r8)   , PARAMETER :: beta( 1:maxens3)=(/1.00_r8,1.00_r8,1.00_r8,1.00_r8, &
  124.                      1.00_r8,1.00_r8,0.00_r8,0.25_r8,&
  125.                      0.50_r8,1.00_r8,1.00_r8,1.00_r8,&
  126.                      1.00_r8,1.00_r8,1.00_r8,1.00_r8 /)
  127.                 INTEGER, PARAMETER :: mkxcrt=15
  128.                 REAL(KIND=r8)   , PARAMETER :: pcrit( 1:mkxcrt)=(/&
  129.                      850.0_r8,800.0_r8,750.0_r8,700.0_r8,650.0_r8,600.0_r8,550.0_r8,500.0_r8,450.0_r8,400.0_r8, &
  130.                       35.0_r8,300.0_r8,250.0_r8,200.0_r8,150.0_r8/)
  131.               
  132.                 REAL(KIND=r8)   , PARAMETER :: acrit( 1:mkxcrt)=(/&
  133.                      0.0633_r8,0.0445_r8,0.0553_r8,0.0664_r8,0.0750_r8,0.1082_r8,0.1521_r8,0.2216_r8, &
  134.                      0.3151_r8,0.3677_r8,0.4100_r8,0.5255_r8,0.7663_r8,1.1686_r8,1.6851_r8/)
  135.               
  136.                 ! GDAS derived acrit
  137.               
  138.                 REAL(KIND=r8)   , PARAMETER :: acritt (1:mkxcrt)=(/&
  139.                      0.203_r8,0.515_r8,0.521_r8,0.566_r8,0.625_r8,0.665_r8,0.659_r8,0.688_r8, &
  140.                      0.743_r8,0.813_r8,0.886_r8,0.947_r8,1.138_r8,1.377_r8,1.896_r8/)
  141.               
  142.                 REAL(KIND=r8)   , PARAMETER :: dec_fudge = -0.20_r8
  143.                 REAL(KIND=r8)            :: ae  (2)
  144.                 REAL(KIND=r8)            :: be  (2)
  145.                 REAL(KIND=r8)            :: ht  (2)
  146.               
  147.                 REAL(KIND=r8)               :: radius
  148.                 REAL(KIND=r8)               :: entr_rate
  149.                 REAL(KIND=r8)               :: mentrd_rate
  150.                 REAL(KIND=r8)               :: mentr_rate
  151.                 REAL(KIND=r8)               :: edtmin
  152.                 REAL(KIND=r8)               :: edtmax
  153.                 REAL(KIND=r8)               :: edtmax1
  154.                 REAL(KIND=r8)               :: effmax
  155.                 REAL(KIND=r8)               :: depth_min
  156.                 REAL(KIND=r8)               :: cap_maxs 
  157.                 REAL(KIND=r8)               :: cap_maxs_land 
  158.                 REAL(KIND=r8)               :: cap_max_increment
  159.                 REAL(KIND=r8)               :: zkbmax
  160.                 REAL(KIND=r8)               :: zcutdown
  161.                 REAL(KIND=r8)               :: z_detr
  162.               
  163.               
  164.                 INTERFACE COMPRESS
  165.                    MODULE PROCEDURE COMPRESS_R1D, COMPRESS_I1D, &
  166.                         COMPRESS_R2D, COMPRESS_I2D, &
  167.                         COMPRESS_R3D, COMPRESS_I3D
  168.                 END INTERFACE
  169.               
  170.                 INTERFACE UNCOMPRESS
  171.                    MODULE PROCEDURE UNCOMPRESS_R1D, UNCOMPRESS_I1D, &
  172.                         UNCOMPRESS_R2D, UNCOMPRESS_I2D, &
  173.                         UNCOMPRESS_R3D, UNCOMPRESS_I3D
  174.                 END INTERFACE
  175.               
  176.               CONTAINS
  177.                 SUBROUTINE InitGrellens()
  178.                   !
  179.                   ! specify entrainmentrate and detrainmentrate
  180.                   ! Larger radius will give less mass fluix and make cloud grow taller
  181.                   ! and shift heating. Recomend 10 km.
  182.                   ! snf        radius=12000.
  183.                   !
  184.                   radius=detra
  185.                   !
  186.                   !  gross entrainment rate
  187.                   !
  188.                   entr_rate=0.2_r8/radius
  189.                   !
  190.                   ! entrainment of mass
  191.                   !
  192.                   mentrd_rate=entr_rate
  193.                   mentr_rate =entr_rate
  194.                   !
  195.                   ! initial detrainmentrates
  196.                   !
  197.                   !
  198.                   ! max/min allowed value for epsilon (ratio downdraft base 
  199.                   ! mass flux/updraft base mass flux
  200.                   !
  201.                   edtmin=0.2_r8
  202.                   !
  203.                   ! snf   edtmax=0.60_r8
  204.                   ! snf   edtmax=0.75_r8
  205.                   !
  206.                   edtmax=0.99_r8    ! ok over land snf may 2004 
  207.                   edtmax1=0.99_r8   ! Ok testado no oceano... com 0.8_r8 fica mal na NINA8889 
  208.                   !---------------
  209.                   effmax=0.99_r8
  210.                   edtmax=effmax
  211.                   edtmax1=effmax 
  212.                   !
  213.                   !  minimum depth (m), clouds must have
  214.                   !
  215.                   depth_min=500.0_r8
  216.                   !
  217.                   ! maximum depth (mb) of capping
  218.                   ! larger cap = no convection    !!!!!!!not true
  219.                   !     if(iens == 3)cap_max2=50.0_r8
  220.                   !     if(iens == 2)cap_max2=75.0_r8 
  221.                   !     if(iens == 1)cap_max2=100.0_r8
  222.                   ! original    cap_maxs=125.0_r8 cap_max_increment=50.0_r8      !new
  223.                   !
  224.                   cap_maxs=grepar3
  225.                   cap_maxs_land=grepar3
  226.                   !--------------------------------
  227.                   !!    cap_max_increment=50.0_r8
  228.                   !!snf modified   
  229.                   cap_max_increment=grepar4
  230.               
  231.                   !
  232.                   ! max height(m) above ground where updraft air can originate
  233.                   !
  234.                   zkbmax=4000.0_r8
  235.                   !
  236.                   ! height(m) above which no downdrafts are allowed to originate
  237.                   !
  238.                   zcutdown=3000.0_r8
  239.                   !
  240.                   ! depth(m) over which downdraft detrains all its mass
  241.                   !
  242.                   z_detr=1250.0_r8
  243.                   !
  244.                   ht(1)=xl/cp
  245.                   
  246.                   ht(2)=2.834e6_r8/cp
  247.                   
  248.                   be(1)=0.622_r8*ht(1)/0.286_r8
  249.                   
  250.                   ae(1)=be(1)/273.0_r8+LOG(610.71_r8)
  251.                   
  252.                   be(2)=0.622_r8*ht(2)/0.286_r8
  253.                   
  254.                   ae(2)=be(2)/273.0_r8+LOG(610.71_r8)
  255.               
  256.                 END SUBROUTINE InitGrellens
  257.               
  258.                 SUBROUTINE grellens(&
  259.                      ps     ,sl     ,ua     ,va     ,omg    ,t2     ,tn1    , &
  260.                      q2     ,qn1    ,zz     ,xland  ,dtime  ,RAINCV , &
  261.                      kuo    ,ktop   ,kbot   ,plcl   ,nCols  ,kMax)
  262.               
  263.                   !--------------------------------------------------------------------
  264.                   !  This convection  f90 program subroutine has been modified by figueroa 
  265.                   !  in dec2003-jan2003 from mm5-Chemestry model and it has been adapted
  266.                   !  to CPTEC-GCM. 
  267.                   !- Some modification are:
  268.                   !- adapting the original parameters for T062L28 and T126L28 GCM.
  269.                   !- modified Betas in Kuo-clousure after testing 
  270.                   !- addition  some new changes from RAMS version (after testing)
  271.                   !- In April 2004 was added caps ensemble from Grell new code
  272.                   !- Omega closure was removed from ensemble closure. However it can be 
  273.                   !  use as single closure.
  274.                   !- This convection scheme was tested for different closures and 
  275.                   !  different
  276.                   !  parameters.  After several experiments and long integrations we 
  277.                   !  have suggested some
  278.                   !  critical values for CPTEC GCM. You can find them in the namelist.
  279.                   !
  280.                   !  NOTE: It is not official version yet!! It can be used only for tests
  281.                   !  more informations: nilo@cptec.inpe.br
  282.                   !-------------------------------------------------------------------
  283.               
  284.                   IMPLICIT NONE
  285.                   INTEGER, INTENT(IN   ) :: nCols
  286.                   INTEGER, INTENT(IN   ) :: kMax
  287.                   REAL(KIND=r8)   , INTENT(IN   ) :: dtime
  288.                   REAL(KIND=r8)   , INTENT(IN   ) :: ua    (1:nCols,1:kMax)
  289.                   REAL(KIND=r8)   , INTENT(IN   ) :: va    (1:nCols,1:kMax)
  290.                   REAL(KIND=r8)   , INTENT(IN   ) :: omg   (1:nCols,1:kMax)
  291.                   REAL(KIND=r8)   , INTENT(IN   ) :: t2    (1:nCols,1:kMax)
  292.                   REAL(KIND=r8)   , INTENT(IN   ) :: q2    (1:nCols,1:kMax)
  293.                   REAL(KIND=r8)   , INTENT(INOUT) :: tn1   (1:nCols,1:kMax)
  294.                   REAL(KIND=r8)   , INTENT(INOUT) :: qn1   (1:nCols,1:kMax)
  295.                   REAL(KIND=r8)   , INTENT(IN   ) :: ps    (1:nCols       )
  296.                   REAL(KIND=r8)   , INTENT(IN   ) :: zz    (1:nCols       )
  297.                   INTEGER, INTENT(IN   ) :: xland (1:nCols       )      
  298.                   REAL(KIND=r8)   , INTENT(IN   ) :: sl    (1:kMax        )
  299.                   INTEGER, INTENT(INOUT) :: kuo   (1:nCols       )
  300.                   INTEGER, INTENT(INOUT) :: ktop  (1:nCols       )
  301.                   INTEGER, INTENT(INOUT) :: kbot  (1:nCols       )
  302.                   !
  303.                   ! output variables after cumulus parameterization
  304.                   !
  305.                   REAL(KIND=r8)   , INTENT(INOUT) :: RAINCV(1:nCols       )
  306.                   REAL(KIND=r8)   , INTENT(INOUT) :: plcl  (1:nCols       ) 
  307.                   !
  308.                   ! local variables
  309.                   !
  310.                   REAL(KIND=r8)                   :: t        (nCols,kMax)
  311.                   REAL(KIND=r8)                   :: q        (nCols,kMax)
  312.                   REAL(KIND=r8)                   :: tn       (nCols,kMax)
  313.                   REAL(KIND=r8)                   :: qo       (nCols,kMax)
  314.                   REAL(KIND=r8)                   :: p        (nCols,kMax)
  315.                   REAL(KIND=r8)                   :: po       (nCols,kMax)
  316.                   REAL(KIND=r8)                   :: us       (nCols,kMax)
  317.                   REAL(KIND=r8)                   :: vs       (nCols,kMax)
  318.                   REAL(KIND=r8)                   :: omeg     (nCols,kMax)
  319.               !    REAL(KIND=r8)                   :: ter11    (nCols     )
  320.                   REAL(KIND=r8)                   :: psur     (nCols     )
  321.                   REAL(KIND=r8)                   :: outt     (nCols,kMax) 
  322.                   REAL(KIND=r8)                   :: outq     (nCols,kMax) 
  323.                   REAL(KIND=r8)                   :: pre1     (nCols     )
  324.               !    REAL(KIND=r8)                   :: prec     (nCols     )
  325.               !    REAL(KIND=r8)                   :: dt
  326.                   INTEGER                :: i
  327.                   INTEGER                :: k
  328.                   INTEGER                :: kk, kold
  329.                   !
  330.                   REAL(KIND=r8)                   :: cupclw   (nCols,kMax)
  331.                   REAL(KIND=r8)                   :: bncy     (nCols,kMax)
  332.                   REAL(KIND=r8)                   :: xmb      (nCols     )
  333.                   REAL(KIND=r8)                   :: massfln  (nCols,ensdim)
  334.                   REAL(KIND=r8)                   :: down_massflx(nCols)
  335.                   REAL(KIND=r8)                   :: cape     (nCols     )
  336.               
  337.                   !
  338.                   !    prepare input, erase output
  339.                   !
  340.  A----------<     DO i=1,nCols
  341.  A                   kuo (i)=0
  342.  A                   kbot(i)=1
  343.  A                   ktop(i)=1
  344.  A---------->     END DO
  345.                   !
  346.                   !move  variables from GCM to local variables
  347.                   !
  348.               !    dt=dtime
  349.               !    ter11(1:nCols) = zz(1:nCols)
  350.  V---------<>     psur (1:nCols) = ps(1:nCols)*10.0_r8
  351.  1----------<     DO k = 1, kMax
  352.  1 2--------<        DO i = 1,nCols
  353.  1 2                    po  (i,k) = ps(i)*sl(k)*10.0_r8               ! pressure in mbar
  354.  1 2                    p   (i,k) = po(i,k)
  355.  1 2 A-----<>           us  (i,k) = ua(i,k) 
  356.  1 2 A-----<>           vs  (i,k) = va(i,k) 
  357.  1 2 A-----<>           omeg(i,k) = omg(i,k)
  358.  1 2                    !
  359.  1 2                    !
  360.  1 2 A-----<>           q   (i,k) = q2(i,k)
  361.  1 2                    t   (i,k) = t2(i,k)
  362.  1 2                    qo  (i,k)=qn1(i,k)
  363.  1 2                    tn  (i,k)=tn1(i,k)
  364.  1 2                    IF(TN(I,K) < 200.0_r8)    TN(I,K) = T(I,K)
  365.  1 2                    IF(QO(I,K) < 1.E-08_r8)  QO(I,K) = 1.E-08_r8
  366.  1 2-------->        END DO
  367.  1---------->     END DO
  368.                   !
  369.                   ! call cumulus parameterization
  370.                   !
  371.  A---------<>     pre1   = 0.0_r8
  372.  A---------<>     outt   = 0.0_r8
  373.  A---------<>     outq   = 0.0_r8
  374.                   !new-2007
  375.  A---------<>     cupclw =0.0_r8  !new  cloud liquid water
  376.  A---------<>     xmb    =0.0_r8  !total base mass flux
  377.  A---------<>     massfln=0.0_r8  !downdraft mass flux  
  378.  A---------<>     bncy   =0.0_r8  !buoancy
  379.  A---------<>     cape   =0.0_r8  !work-function
  380.               
  381.                   CALL grellens2(&
  382.                        t      ,q      ,tn     ,qo     ,po     ,p      ,psur   ,us     , &
  383.                        vs     ,omeg   ,zz     ,dtime  ,outt   ,outq   ,pre1   ,ktop   , &
  384.                        kbot   ,nCols  ,kMax   ,xland  ,cupclw ,massfln,xmb,bncy,cape )
  385.                   !
  386.                   ! after cumulus parameterization
  387.                   ! out  tn1, qn1, prec, kuo,ktop, kbot
  388.                   !
  389.  1----------<     DO i = 1,nCols
  390.  1                    RAINCV(i)=dtime*pre1(i)      !in mm/sec(ditme),by 0.5_r8(if leap-frog or 2dt)
  391.  1                    RAINCV(i)=RAINCV(i)/1000.0_r8       !in m for gcm
  392.  1                    IF(RAINCV(i) >  0.0_r8)kuo(i)=1
  393.  1                    kk=kbot(i)
  394.  1                    plcl(i)=p(i,kk)/10.0_r8  ! from mb to cb for Shallow convection
  395.  1---------->     END DO
  396.               
  397.  1----------<     DO i=1,nCols   
  398.  1                   IF(RAINCV(i)>0.0_r8)then
  399.  1 r8-------<           DO k=1,kMax
  400.  1 r8                      tn1(i,k) = tn1(i,k)+ 2.0_r8*outt(i,k)*dtime
  401.  1 r8                      qn1(i,k) = qn1(i,k)+ 2.0_r8*outq(i,k)*dtime
  402.  1 r8                      IF (cupclw(i,k).lt.1.0e-8_r8) cupclw(i,k)=0.0_r8  !new
  403.  1 r8------->           END DO
  404.  1                   END IF
  405.  1---------->     END DO
  406.               
  407.                   RETURN
  408.                 END SUBROUTINE grellens
ftn-5002 ftn: NOTE File = Cu_Grellens.f90, Line = 408 
  Local variable "DOWN_MASSFLX" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Cu_Grellens.f90, Line = 408 
  Local variable "KOLD" is declared but neither defined nor used.

  409.               
  410.                 !*-------------------------
  411.                 SUBROUTINE grellens2(& 
  412.                      t      ,q      ,tn     ,qo     ,po     ,p      ,psur   ,us     , &
  413.                      vs     ,omeg   ,z1     ,dtime  ,outt   ,outq   ,pre    ,ktop   , &
  414.                      kbcon  ,nCols  ,kMax    ,mask  ,cupclw ,massfln,xmb,bncy,wf_cape  )
  415.                   IMPLICIT NONE
  416.                   !
  417.                   ! input variables
  418.                   ! IN
  419.                   INTEGER, INTENT(IN   )       :: nCols
  420.                   INTEGER, INTENT(IN   )       :: kMax
  421.                   REAL(KIND=r8)   , INTENT(IN   )       :: dtime
  422.                   REAL(KIND=r8)   , INTENT(IN   )       :: t    (nCols,kMax)
  423.                   REAL(KIND=r8)   , INTENT(INOUT)       :: q    (nCols,kMax)
  424.                   REAL(KIND=r8)   , INTENT(IN   )       :: tn   (nCols,kMax)
  425.                   REAL(KIND=r8)   , INTENT(INOUT)       :: qo   (nCols,kMax)
  426.                   REAL(KIND=r8)   , INTENT(IN   )       :: p    (nCols,kMax)
  427.                   REAL(KIND=r8)   , INTENT(IN   )       :: po   (nCols,kMax)
  428.                   REAL(KIND=r8)   , INTENT(IN   )       :: us   (nCols,kMax)
  429.                   REAL(KIND=r8)   , INTENT(IN   )       :: vs   (nCols,kMax)
  430.                   REAL(KIND=r8)   , INTENT(IN   )       :: omeg (nCols,kMax)
  431.                   REAL(KIND=r8)   , INTENT(IN   )       :: z1   (nCols)
  432.                   REAL(KIND=r8)   , INTENT(IN   )       :: psur (nCols)
  433.                   INTEGER, INTENT(IN   )       :: mask (nCols)
  434.                   REAL(KIND=r8)   , INTENT(INOUT)       :: massfln(nCols,ensdim) !new
  435.                   REAL(KIND=r8)   , INTENT(INOUT)       :: xmb(nCols)
  436.                   !
  437.                   ! output variables
  438.                   ! OUT
  439.               
  440.               
  441.                   REAL(KIND=r8)   , INTENT(INOUT)       :: outt (nCols,kMax)
  442.                   REAL(KIND=r8)   , INTENT(INOUT)       :: outq (nCols,kMax)
  443.                   REAL(KIND=r8)   , INTENT(INOUT)       :: pre  (nCols) 
  444.                   INTEGER, INTENT(OUT  )       :: ktop (nCols)
  445.                   INTEGER, INTENT(OUT  )       :: kbcon(nCols)       
  446.                   !new
  447.                    REAL(KIND=r8)   , INTENT(INOUT)      :: cupclw (nCols,kMax)
  448.                    REAL(KIND=r8)   , INTENT(INOUT)      :: bncy   (nCols,kMax)
  449.                    REAL(KIND=r8)   , INTENT(INOUT)      :: wf_cape(nCols)
  450.                   !
  451.                   ! LOCAL VARIABLES
  452.                   !
  453.                   INTEGER            :: i
  454.                   INTEGER            :: k
  455.               !not used    INTEGER            :: iedt
  456.                   INTEGER            :: istart 
  457.                   INTEGER            :: iend
  458.               
  459.                   INTEGER            :: kdet1     (nCols)
  460.                   INTEGER            :: kdet      (nCols)
  461.                   REAL(KIND=r8)               :: mconv     (nCols)
  462.                   REAL(KIND=r8)               :: outqc     (nCols,kMax)
  463.                   INTEGER            :: kzdown    (nCols)
  464.                   INTEGER            :: kbmax     (nCols)
  465.                   INTEGER            :: ierr      (nCols)
  466.                   INTEGER            :: k22       (nCols)
  467.                   INTEGER            :: jmin      (nCols)
  468.                   INTEGER            :: kstabi    (nCols)
  469.                   INTEGER            :: kstabm    (nCols)
  470.                   INTEGER            :: KZI       (nCols)
  471.               
  472.                   REAL(KIND=r8)               :: aaeq      (nCols)
  473.                   REAL(KIND=r8)               :: edt       (nCols)
  474.                   REAL(KIND=r8)               :: aa1       (nCols)
  475.                   REAL(KIND=r8)               :: aa0       (nCols)
  476.                   REAL(KIND=r8)               :: hkb       (nCols)
  477.                   REAL(KIND=r8)               :: hkbo      (nCols)
  478.                   !! snf REAL(KIND=r8)               :: xmb       (nCols)
  479.                   REAL(KIND=r8)               :: pwav      (nCols)
  480.                   REAL(KIND=r8)               :: pwev      (nCols)
  481.                   REAL(KIND=r8)               :: pwavo     (nCols)
  482.                   REAL(KIND=r8)               :: pwevo     (nCols)
  483.                   REAL(KIND=r8)               :: bu        (nCols)
  484.                   REAL(KIND=r8)               :: cap_max   (nCols)
  485.                   REAL(KIND=r8)               :: vshear    (nCols)
  486.                   REAL(KIND=r8)               :: sdp       (nCols)
  487.                   REAL(KIND=r8)               :: vws       (nCols)
  488.                   REAL(KIND=r8)               :: he        (nCols,kMax)
  489.                   REAL(KIND=r8)               :: hes       (nCols,kMax)
  490.                   REAL(KIND=r8)               :: qes       (nCols,kMax)
  491.                   REAL(KIND=r8)               :: z         (nCols,kMax)
  492.                   REAL(KIND=r8)               :: dby       (nCols,kMax)
  493.                   REAL(KIND=r8)               :: qc        (nCols,kMax)
  494.                   REAL(KIND=r8)               :: qrcd      (nCols,kMax)
  495.                   REAL(KIND=r8)               :: pwd       (nCols,kMax)
  496.                   REAL(KIND=r8)               :: pw        (nCols,kMax)
  497.                   REAL(KIND=r8)               :: heo       (nCols,kMax)
  498.                   REAL(KIND=r8)               :: heso      (nCols,kMax)
  499.                   REAL(KIND=r8)               :: qeso      (nCols,kMax)
  500.                   REAL(KIND=r8)               :: zo        (nCols,kMax)
  501.                   REAL(KIND=r8)               :: dbyo      (nCols,kMax)
  502.                   REAL(KIND=r8)               :: qco       (nCols,kMax)
  503.                   REAL(KIND=r8)               :: qrcdo     (nCols,kMax)
  504.                   REAL(KIND=r8)               :: pwdo      (nCols,kMax)
  505.                   REAL(KIND=r8)               :: pwo       (nCols,kMax)
  506.                   REAL(KIND=r8)               :: hcd       (nCols,kMax)
  507.                   REAL(KIND=r8)               :: hcdo      (nCols,kMax)
  508.                   REAL(KIND=r8)               :: qcd       (nCols,kMax)
  509.                   REAL(KIND=r8)               :: qcdo      (nCols,kMax)
  510.                   REAL(KIND=r8)               :: dbyd      (nCols,kMax)
  511.                   REAL(KIND=r8)               :: dbydo     (nCols,kMax)
  512.                   REAL(KIND=r8)               :: hc        (nCols,kMax)
  513.                   REAL(KIND=r8)               :: hco       (nCols,kMax)
  514.                   REAL(KIND=r8)               :: qrc       (nCols,kMax)
  515.                   REAL(KIND=r8)               :: qrco      (nCols,kMax)
  516.                   REAL(KIND=r8)               :: zu        (nCols,kMax)
  517.                   REAL(KIND=r8)               :: zuo       (nCols,kMax)
  518.                   REAL(KIND=r8)               :: zd        (nCols,kMax)
  519.                   REAL(KIND=r8)               :: zdo       (nCols,kMax)
  520.                   REAL(KIND=r8)               :: qes_cup   (nCols,kMax)
  521.                   REAL(KIND=r8)               :: q_cup     (nCols,kMax)
  522.                   REAL(KIND=r8)               :: he_cup    (nCols,kMax)
  523.                   REAL(KIND=r8)               :: hes_cup   (nCols,kMax)
  524.                   REAL(KIND=r8)               :: z_cup     (nCols,kMax)
  525.                   REAL(KIND=r8)               :: p_cup     (nCols,kMax)
  526.                   REAL(KIND=r8)               :: gamma_cup (nCols,kMax)
  527.                   REAL(KIND=r8)               :: t_cup     (nCols,kMax)
  528.                   REAL(KIND=r8)               :: qeso_cup  (nCols,kMax)
  529.                   REAL(KIND=r8)               :: qo_cup    (nCols,kMax)
  530.                   REAL(KIND=r8)               :: heo_cup   (nCols,kMax)
  531.                   REAL(KIND=r8)               :: heso_cup  (nCols,kMax)
  532.                   REAL(KIND=r8)               :: zo_cup    (nCols,kMax)
  533.                   REAL(KIND=r8)               :: po_cup    (nCols,kMax)
  534.                   REAL(KIND=r8)               :: gammao_cup(nCols,kMax)
  535.                   REAL(KIND=r8)               :: tn_cup    (nCols,kMax)
  536.                   REAL(KIND=r8)               :: cd        (nCols,kMax)
  537.                   REAL(KIND=r8)               :: cdd       (nCols,kMax)
  538.               
  539.                   REAL(KIND=r8)               :: dellat_ens (nCols,kMax, maxens2)
  540.                   REAL(KIND=r8)               :: dellaq_ens (nCols,kMax, maxens2)
  541.                   REAL(KIND=r8)               :: dellaqc_ens(nCols,kMax, maxens2)
  542.                   REAL(KIND=r8)               :: pwo_ens    (nCols,kMax, maxens2)
  543.                   REAL(KIND=r8)               :: xf_ens     (nCols,ensdim)
  544.                   REAL(KIND=r8)               :: outt_ens   (nCols,ensdim)
  545.                   REAL(KIND=r8)               :: pr_ens     (nCols,ensdim)
  546.                   !!!snf REAL(KIND=r8)               :: massfln    (nCols,ensdim)
  547.               
  548.                   REAL(KIND=r8)               :: edtc     (nCols,maxens2)
  549.               
  550.                   REAL(KIND=r8)               :: dq 
  551.                   REAL(KIND=r8)               :: mbdt
  552.                   REAL(KIND=r8)               :: zktop
  553.                   !-------
  554.                   !new
  555.                   !---------
  556.                   REAL(KIND=r8)               :: dh2         (nCols) 
  557.                   REAL(KIND=r8)               :: xfac1       (nCols) 
  558.                   REAL(KIND=r8)               :: xfac_for_dn (nCols)
  559.                   INTEGER            :: left        (nCols)
  560.                   INTEGER            :: nLeft,ib   !not used ,nNewLeft
  561.                   INTEGER            :: maxens22
  562.               
  563.               
  564.                   !
  565.                   ! Compress Local Variable 
  566.                   !
  567.                   INTEGER :: nCols_gz
  568.                   REAL(KIND=r8)    :: edtc_gz       (nCols,maxens2)
  569.                   INTEGER :: ierr_gz       (nCols)
  570.                   REAL(KIND=r8)    :: dellat_ens_gz (nCols,kMax, maxens2)
  571.                   REAL(KIND=r8)    :: dellaq_ens_gz (nCols,kMax, maxens2)
  572.                   REAL(KIND=r8)    :: dellaqc_ens_gz(nCols,kMax, maxens2)
  573.                   REAL(KIND=r8)    :: pwo_ens_gz    (nCols,kMax, maxens2)
  574.                   REAL(KIND=r8)    :: heo_cup_gz    (nCols,kMax)
  575.                   REAL(KIND=r8)    :: zo_cup_gz     (nCols,kMax)
  576.                   REAL(KIND=r8)    :: po_cup_gz     (nCols,kMax)
  577.                   REAL(KIND=r8)    :: hcdo_gz       (nCols,kMax)
  578.                   REAL(KIND=r8)    :: zdo_gz        (nCols,kMax)
  579.                   REAL(KIND=r8)    :: cdd_gz        (nCols,kMax)
  580.                   REAL(KIND=r8)    :: heo_gz        (nCols,kMax)
  581.                   REAL(KIND=r8)    :: qo_cup_gz     (nCols,kMax)
  582.                   REAL(KIND=r8)    :: qrcdo_gz      (nCols,kMax)
  583.                   REAL(KIND=r8)    :: qo_gz         (nCols,kMax)
  584.                   REAL(KIND=r8)    :: zuo_gz        (nCols,kMax)
  585.                   REAL(KIND=r8)    :: cd_gz         (nCols,kMax)
  586.                   REAL(KIND=r8)    :: hco_gz        (nCols,kMax)
  587.                   INTEGER :: ktop_gz       (nCols)
  588.                   INTEGER :: k22_gz        (nCols)
  589.                   INTEGER :: kbcon_gz      (nCols)
  590.                   INTEGER :: jmin_gz       (nCols)
  591.                   INTEGER :: kdet_gz       (nCols)
  592.                   REAL(KIND=r8)    :: qco_gz        (nCols,kMax)
  593.                   REAL(KIND=r8)    :: qrco_gz       (nCols,kMax)
  594.                   REAL(KIND=r8)    :: tn_gz         (nCols,kMax)
  595.                   REAL(KIND=r8)    :: po_gz         (nCols,kMax)
  596.                   REAL(KIND=r8)    :: z1_gz         (nCols)
  597.                   REAL(KIND=r8)    :: psur_gz       (nCols)
  598.                   REAL(KIND=r8)    :: gamma_cup_gz  (nCols,kMax)
  599.                   REAL(KIND=r8)    :: pr_ens_gz     (nCols,ensdim)
  600.                   REAL(KIND=r8)    :: pwo_gz        (nCols,kMax)
  601.                   REAL(KIND=r8)    :: pwdo_gz       (nCols,kMax)
  602.                   REAL(KIND=r8)    :: outt_ens_gz   (nCols,ensdim)    
  603.                   REAL(KIND=r8)    :: he_cup_gz     (nCols,kMax)
  604.                   INTEGER :: kbmax_gz      (nCols)
  605.                   REAL(KIND=r8)    :: heso_cup_gz   (nCols,kMax)
  606.                   REAL(KIND=r8)    :: cap_max_gz    (nCols)
  607.                   REAL(KIND=r8)    :: aa0_gz        (nCols)
  608.                   REAL(KIND=r8)    :: aa1_gz        (nCols)
  609.                   REAL(KIND=r8)    :: xmb_gz        (nCols)
  610.                   REAL(KIND=r8)    :: xf_ens_gz     (nCols,ensdim)
  611.                   INTEGER :: mask_gz       (nCols)
  612.                   REAL(KIND=r8)    :: mconv_gz      (nCols)
  613.                   REAL(KIND=r8)    :: omeg_gz       (nCols,kMax)
  614.                   REAL(KIND=r8)    :: massfln_gz    (nCols,ensdim)
  615.                   REAL(KIND=r8)    :: p_cup_gz      (nCols,kMax)
  616.               !
  617.               !***************** the following are your basic environmental
  618.               !                  variables. They carry a "_cup" if they are
  619.               !                  on model cloud levels (staggered). They carry
  620.               !                  an "o"-ending (z becomes zo), if they are the forced
  621.               !                  variables. They are preceded by x (z becomes xz)
  622.               !                  to indicate modification by some typ of cloud
  623.               !
  624.                 ! z           = heights of model levels
  625.                 ! q           = environmental mixing ratio
  626.                 ! qes         = environmental saturation mixing ratio
  627.                 ! t           = environmental temp
  628.                 ! p           = environmental pressure
  629.                 ! he          = environmental moist static energy
  630.                 ! hes         = environmental saturation moist static energy
  631.                 ! z_cup       = heights of model cloud levels
  632.                 ! q_cup       = environmental q on model cloud levels
  633.                 ! qes_cup     = saturation q on model cloud levels
  634.                 ! t_cup       = temperature (Kelvin) on model cloud levels
  635.                 ! p_cup       = environmental pressure
  636.                 ! he_cup = moist static energy on model cloud levels
  637.                 ! hes_cup = saturation moist static energy on model cloud levels
  638.                 ! gamma_cup = gamma on model cloud levels
  639.               !
  640.               !
  641.                 ! hcd = moist static energy in downdraft
  642.                 ! zd normalized downdraft mass flux
  643.                 ! dby = buoancy term
  644.                 ! entr = entrainment rate
  645.                 ! zd   = downdraft normalized mass flux
  646.                 ! entr= entrainment rate
  647.                 ! hcd = h in model cloud
  648.                 ! bu = buoancy term
  649.                 ! zd = normalized downdraft mass flux
  650.                 ! gamma_cup = gamma on model cloud levels
  651.                 ! mentr_rate = entrainment rate
  652.                 ! qcd = cloud q (including liquid water) after entrainment
  653.                 ! qrch = saturation q in cloud
  654.                 ! pwd = evaporate at that level
  655.                 ! pwev = total normalized integrated evaoprate (I2)
  656.                 ! entr= entrainment rate
  657.                 ! z1 = terrain elevation
  658.                 ! entr = downdraft entrainment rate
  659.                 ! jmin = downdraft originating level
  660.                 ! kdet = level above ground where downdraft start detraining
  661.                 ! psur        = surface pressure
  662.                 ! z1          = terrain elevation
  663.                 ! pr_ens = precipitation ensemble
  664.                 ! xf_ens = mass flux ensembles
  665.                 ! massfln = downdraft mass flux ensembles used in next timestep
  666.                 ! omeg = omega from large scale model
  667.                 ! mconv = moisture convergence from large scale model
  668.                 ! zd      = downdraft normalized mass flux
  669.                 ! zu      = updraft normalized mass flux
  670.                 ! dir     = "storm motion"
  671.                 ! mbdt    = arbitrary numerical parameter
  672.                 ! dtime   = dt over which forcing is applied
  673.                 ! iact_gr_old = flag to tell where convection was active
  674.                 ! kbcon       = LFC of parcel from k22
  675.                 ! k22         = updraft originating level
  676.                 ! icoic       = flag if only want one closure (usually set to zero!)
  677.                 ! dby = buoancy term
  678.                 ! ktop = cloud top (output)
  679.                 ! xmb    = total base mass flux
  680.                 ! hc = cloud moist static energy
  681.                 ! hkb = moist static energy at originating level
  682.                 ! mentr_rate = entrainment rate
  683.               
  684.                   !
  685.                   !snf parameter from namelist 
  686.                   !
  687.                   ! begin executable
  688.                   !
  689.                   istart=1
  690.                   iend=nCols
  691.                   maxens22=grepar2
  692.                   !
  693.                   !snf  is it necessary to save massfln for next step?.
  694.                   ! no it is not necessary
  695.                   !
  696.                   !!!! snf massfln=0.0_r8
  697.  A---------<>     mconv=0.0_r8
  698.  A---------<>     qrco=0.0_r8
  699.  A---------<>     qrco_gz=0.0_r8
  700.  Vfr4-------<     DO i=istart,iend
  701.  Vfr4                !
  702.  Vfr4                ! prepare input, erase output
  703.  Vfr4                !
  704.  Vfr4 A----<>        kdet  (i) =2
  705.  Vfr4 A----<>        kdet1 (i) =0
  706.  Vfr4 A----<>        pre   (I) =0.0_r8
  707.  Vfr4------->     END DO
  708.                   !
  709.                   ! calculate moisture convergence mconv
  710.                   !
  711.  br4--------<     DO k=2,kMax-1
  712.  br4 Vbr4---<        DO i = istart,iend
  713.  br4 Vbr4               dq      = 0.5_r8*(q(i,k+1)-q(i,k-1))
  714.  br4 Vbr4               mconv(i) = mconv(i) + omeg(i,k)*dq/9.81_r8
  715.  br4 Vbr4--->        END DO
  716.  br4-------->     END DO
  717.               
  718.  Vr4--------<     DO I = istart,iend
  719.  Vr4                 IF(mconv(I) < 0.0_r8)  mconv(I) = 0.0_r8
  720.  Vr4-------->     END DO
  721.                   !
  722.                   ! initial detrainmentrates
  723.                   !
  724.  1----------<     DO k=1,kMax
  725.  1 Vr4------<        DO i=istart,iend
  726.  1 Vr4                  !
  727.  1 Vr4                  ! snf with 0.5_r8 and 0.1_r8 does not difference..why?? 
  728.  1 Vr4                  !
  729.  1 Vr4                  cd (i,k) = 0.1_r8*entr_rate             !!!new2
  730.  1 Vr4 A---<>           cdd(i,k) = 0.0_r8
  731.  1 Vr4------>        END DO
  732.  1---------->     END DO
  733.               
  734.  f----------<     DO i=istart,iend
  735.  f A-------<>        aa0   (i)=0.0_r8                                   !snf1
  736.  f A-------<>        aa1   (i)=0.0_r8
  737.  f                   kstabm(i)=kMax-2
  738.  f                   aaeq  (i)=0.0_r8                            !added snf  
  739.  f A-------<>        IF(aaeq(i) <  0.0_r8)THEN
  740.  f                      ierr(i)=20
  741.  f                   ELSE
  742.  f                      ierr (i)=0
  743.  f                   END IF
  744.  f---------->     END DO
  745.                   !
  746.                   !snf3
  747.                   !--- initialize cap_max
  748.                   !
  749.  1----------<     DO i=istart,iend
  750.  1                   cap_max(i)=cap_maxs
  751.  1                   IF(mask(i).NE.1)cap_max(i)=cap_maxs_land
  752.  1---------->     END DO
  753.                   mbdt=(float(1)-3.0_r8)*dtime*1.e-3_r8 + dtime*5.e-03_r8  !new
  754.                   !
  755.                   ! environmental conditions, FIRST HEIGHTS
  756.                   !
  757.  b----------<     DO k=1,maxens*maxens22*maxens3
  758.  b b--------<        DO i=istart,iend
  759.  b b                    IF(ierr(i).NE.20)THEN
  760.  b b                       xf_ens  (i,(iens-1)*maxens*maxens22*maxens3+k)= 0.0_r8
  761.  b b                       pr_ens  (i,(iens-1)*maxens*maxens22*maxens3+k)= 0.0_r8
  762.  b b                       outt_ens(i,(iens-1)*maxens*maxens22*maxens3+k)= 0.0_r8
  763.  b b                    END IF
  764.  b b-------->        END DO
  765.  b---------->     END DO
  766.                   !
  767.                   ! calculate moist static energy, heights, qes
  768.                   !
  769.  br2 I------>     CALL cup_env(z      , & ! z      (out)
  770.                        qes    , & ! qes    (out)
  771.                        he     , & ! he     (inout)
  772.                        hes    , & ! hes    (out)
  773.                        t      , & ! t      (in)
  774.                        q      , & ! q      (inout)
  775.                        p      , & ! p      (in)
  776.                        z1     , & ! z1     (in)
  777.                        nCols  , & ! nCols  (in)
  778.                        kMax   , & ! kMax   (in)
  779.                        istart , & ! istart (in)
  780.                        iend   , & ! iend   (in)
  781.                        psur   , & ! psur   (in)
  782.                        ierr   , & ! ierr   (in)
  783.                        0        ) ! tcrit  (in)
  784.               
  785.  br2 I------>     CALL cup_env(zo     , & ! zo     (out)
  786.                        qeso   , & ! qeso   (out)
  787.                        heo    , & ! heo    (inout)
  788.                        heso   , & ! heso   (out)
  789.                        tn     , & ! tn     (in)
  790.                        qo     , & ! qo     (inout)
  791.                        po     , & ! po     (in)
  792.                        z1     , & ! z1     (in)
  793.                        nCols  , & ! nCols  (in)
  794.                        kMax   , & ! kMax   (in)
  795.                        istart , & ! istart (in)
  796.                        iend   , & ! iend   (in)
  797.                        psur   , & ! psur   (in)
  798.                        ierr   , & ! ierr   (in)
  799.                        0        ) ! tcrit  (in)
  800.                   !
  801.                   ! environmental values on cloud levels
  802.                   !
  803.  f I-------<>     CALL cup_env_clev(t        , & ! t         (in)
  804.                        qes      , & ! qes       (in)
  805.                        q        , & ! q         (in)
  806.                        he       , & ! he        (in)
  807.                        hes      , & ! hes       (in)
  808.                        z        , & ! z         (in)
  809.                        p        , & ! p         (in)
  810.                        qes_cup  , & ! qes_cup   (out)
  811.                        q_cup    , & ! q_cup     (out)
  812.                        he_cup   , & ! he_cup    (out)
  813.                        hes_cup  , & ! hes_cup   (out)
  814.                        z_cup    , & ! z_cup     (out)
  815.                        p_cup    , & ! p_cup     (out)
  816.                        gamma_cup, & ! gamma_cup (out)
  817.                        t_cup    , & ! t_cup     (out)
  818.                        psur     , & ! psur      (in)
  819.                        nCols    , & ! nCols     (in)
  820.                        kMax     , & ! kMax      (in)
  821.                        istart   , & ! istart    (in)
  822.                        iend     , & ! iend      (in)
  823.                        ierr     , & ! ierr      (in)
  824.                        z1         ) ! z1        (in)
  825.               
  826.  f I-------->     CALL cup_env_clev(tn        , &! tn        (in)
  827.                        qeso      , &! qeso      (in)
  828.                        qo        , &! qo        (in)
  829.                        heo       , &! heo       (in)
  830.                        heso      , &! heso      (in)
  831.                        zo        , &! zo        (in)
  832.                        po        , &! po        (in)
  833.                        qeso_cup  , &! qeso_cup  (out)
  834.                        qo_cup    , &! qo_cup    (out)
  835.                        heo_cup   , &! heo_cup   (out)
  836.                        heso_cup  , &! heso_cup  (out)
  837.                        zo_cup    , &! zo_cup    (out)
  838.                        po_cup    , &! po_cup    (out)
  839.                        gammao_cup, &! gammao_cup(out)
  840.                        tn_cup    , &! tn_cup    (out)
  841.                        psur      , &! psur      (in)
  842.                        nCols     , &! nCols     (in)
  843.                        kMax      , &! kMax      (in)
  844.                        istart    , &! istart    (in)
  845.                        iend      , &! iend      (in)
  846.                        ierr      , &! ierr      (in)
  847.                        z1          )! z1        (in)
  848.                   !
  849.                   !
  850.                   !
  851.  A---------<>     kbmax=0
  852.  b----------<     DO k=1,kMax
  853.  b b--------<        DO i=istart,iend
  854.  b b                    IF(ierr(i) == 0 .AND. zo_cup(i,k) >  zkbmax+z1(i) .AND. kbmax(i) ==0)THEN
  855.  b b                       kbmax(i)=k
  856.  b b                    END IF
  857.  b b-------->        END DO
  858.  b---------->     END DO
  859.                   !
  860.                   ! level where detrainment for downdraft starts
  861.                   !
  862.  A---------<>     kdet1=0
  863.  b----------<     DO k=1,kMax
  864.  b b--------<        DO i=istart,iend
  865.  b b                    IF(ierr(i) == 0 .AND. zo_cup(i,k) >  z_detr+z1(i) .AND.kdet1(i) ==0)THEN
  866.  b b                       kdet (i)=k
  867.  b b                       kdet1(i)=k
  868.  b b                    END IF
  869.  b b-------->        END DO
  870.  b---------->     END DO
  871.                   !
  872.                   !-------------------------------
  873.                   ! USE TKE  (it is still no used)
  874.                   !---------------------------------
  875.                   ! Determine PBL top using TKE (TKEG) and 
  876.                   ! liquid water mixing ratio (RCPG)
  877.                   !------------------------------------
  878.                   !!       call get_zi(nCols,kMax,istart,iend,j,ierr,kzi,TKEG &
  879.                   !!                   ,RCPG,zo,z1,tkmin)
  880.                   !
  881.                   !       DO  I=ISTART,IEND   
  882.                   !         IF(ierr(I) == 0)THEN
  883.                   !          tkemax(i) = 0.0_r8
  884.                   !          do k=1,kzi(i)
  885.                   !           tkemax(i) = max(tkemax(i),tkeg(i,k))
  886.                   !          enddo
  887.                   !          if(tkemax(i) < 1.5_r8 )  cap_max(i) = 75.0_r8  
  888.                   !          if(tkemax(i) < 0.5_r8 )  cap_max(i) = 25.0_r8
  889.                   !         endif
  890.                   !       enddo
  891.                   !------------------------------------
  892.                   !
  893.                   ! determine level with highest moist static energy content - k22
  894.                   ! kstart = 3 
  895.                   !
  896.  Ab I------->     CALL cup_maximi(heo_cup  , &  ! heo_cup (in)
  897.                        nCols    , &  ! nCols   (in)
  898.                        kMax     , &  ! kMax    (in) 
  899.                        3        , &  ! ks      (in) !era 3  
  900.                        kbmax    , &  ! kbmax   (in)
  901.                        k22      , &  ! k22     (out)
  902.                        istart   , &  ! istart  (in)
  903.                        iend     , &  ! iend    (in)
  904.                        ierr       )  ! ierr    (in)
  905.                   !                
  906.  1----------<     DO i=istart,iend
  907.  1                   IF(ierr(i) == 0)THEN
  908.  1                      kzi(i) = 1
  909.  1                      IF(k22(i) >= kbmax(i))ierr(i)=2
  910.  1                   END IF
  911.  1---------->     END DO
  912.                   !
  913.                   ! determine the level of convective cloud base  - kbcon
  914.                   !
  915.                   !snf8 cup_KBCOn is called first timE
  916.                   !  Cap_mas for 
  917.                   !-------------------------------------
  918.                   !snf  call cup_kbcon for cap_max=cap_max-(1-1)*cap_max_increment
  919.                   !---------------
  920.                   !
  921.  r4 I------->     CALL cup_kbcon(&
  922.                        cap_max_increment, & ! cap_max_increment (in)
  923.                        1                , & ! iloop             (in)
  924.                        k22              , & ! k22               (inout)
  925.                        kbcon            , & ! kbcon             (out)
  926.                        heo_cup          , & ! heo_cup           (in)
  927.                        heso_cup         , & ! heso_cup          (in)
  928.                        nCols            , & ! nCols             (in)
  929.                        kMax             , & ! kMax              (in)
  930.                        istart           , & ! istart            (in)
  931.                        iend             , & ! iend              (in)
  932.                        ierr             , & ! ierr              (inout)
  933.                        kbmax            , & ! kbmax             (in)
  934.                        po_cup           , & ! po_cup            (in)
  935.                        cap_max            ) ! cap_max           (in)
  936.  1----------<     DO I=ISTART,IEND
  937.  1                   IF(ierr(I) == 0)THEN
  938.  1                      hkb(i)=hkbo(i)
  939.  1                   END IF
  940.  1---------->     END DO
  941.                   !
  942.                   ! increase detrainment in stable layers
  943.                   !
  944.  b I-------->     CALL cup_minimi( &
  945.                        heso_cup , &  ! heso_cup (in)
  946.                        nCols    , &  ! nCols    (in)
  947.                        kMax     , &  ! kMax     (in)
  948.                        kbcon    , &  ! kbcon    (in)
  949.                        kstabm   , &  ! kstabm   (in)
  950.                        kstabi   , &  ! kstabi   (out)
  951.                        istart   , &  ! istart   (in)
  952.                        iend     , &  ! iend     (in)
  953.                        ierr       )  ! ierr     (in)
  954.  b----------<     DO k=MINVAL(kstabi),MAXVAL(kstabm)-1 
  955.  b b--------<        DO i=istart,iend
  956.  b b                    IF( ierr(i) == 0 .AND. kstabm(i)-1 > kstabi(i) .AND. &
  957.  b b                         k >= kstabi(i) .AND. k<= kstabm(i)-1 )THEN
  958.  b b                       cd(i,k)=cd(i,k-1)+1.5_r8*entr_rate
  959.  b b                       IF(iens >  4)THEN
  960.  b b                          cd(i,k)=cd(i,k-1)+float(iens-4)*entr_rate &
  961.  b b                               /float(kstabm(i)-kstabi(i))
  962.  b b                       ELSE
  963.  b b                          cd(i,k)=cd(i,k)
  964.  b b                       END IF
  965.  b b                       IF(cd(i,k) >  10.0_r8*entr_rate) cd(i,k)=10.0_r8*entr_rate !new
  966.  b b                    END IF
  967.  b b-------->        END DO
  968.  b---------->     END DO
  969.                   !
  970.                   ! calculate incloud moist static energy
  971.                   !
  972.  f I-------<>     CALL cup_up_he(  &
  973.                        k22       , & ! k22        (in)
  974.                        hkb       , & ! hkb        (out)
  975.                        z_cup     , & ! z_cup      (in)
  976.                        cd        , & ! cd         (in)
  977.                        mentr_rate, & ! mentr_rate (in)
  978.                        he_cup    , & ! he_cup     (in)
  979.                        hc        , & ! hc         (out)
  980.                        nCols     , & ! nCols      (in)
  981.                        kMax      , & ! kMax       (in)
  982.                        kbcon     , & ! kbcon      (in)
  983.                        ierr      , & ! ierr       (in)
  984.                        istart    , & ! istart     (in)
  985.                        iend      , & ! iend       (in)
  986.                        dby       , & ! dby        (out)
  987.                        he        , & ! he         (in)
  988.                        hes_cup     ) ! hes_cup    (in)
  989.                   !
  990.  f I-------->     CALL cup_up_he(  &
  991.                        k22       , & ! k22        (in)
  992.                        hkbo      , & ! hkbo       (out)
  993.                        zo_cup    , & ! zo_cup     (in)
  994.                        cd        , & ! cd         (in)
  995.                        mentr_rate, & ! mentr_rate (in)
  996.                        heo_cup   , & ! heo_cup    (in)
  997.                        hco       , & ! hco        (out)
  998.                        nCols     , & ! nCols      (in)
  999.                        kMax      , & ! kMax       (in)
 1000.                        kbcon     , & ! kbcon      (in)
 1001.                        ierr      , & ! ierr       (in)
 1002.                        istart    , & ! istart     (in)
 1003.                        iend      , & ! iend       (in)
 1004.                        dbyo      , & ! dbyo       (out)
 1005.                        heo       , & ! heo        (in)
 1006.                        heso_cup    ) ! heso_cup   (in)
 1007.                   !
 1008.                   ! determine cloud top - ktop
 1009.                   !
 1010.  Ab I------->     CALL cup_ktop(  &
 1011.                        1        , & ! ilo    (in)
 1012.                        dbyo     , & ! dbyo   (inout)
 1013.                        kbcon    , & ! kbcon  (in)
 1014.                        ktop     , & ! ktop   (out)
 1015.                        nCols    , & ! nCols  (in)
 1016.                        kMax     , & ! kMax   (in)
 1017.                        istart   , & ! istart (in)
 1018.                        iend     , & ! iend   (in)
 1019.                        ierr       ) ! ierr   (inout)
 1020.               
 1021.  A---------<>     kzdown(istart:iend)=0
 1022.  b----------<     DO k=1,kMax
 1023.  b b--------<        DO i=istart,iend
 1024.  b b                    IF(ierr(i) == 0)THEN
 1025.  b b                       zktop=(zo_cup(i,ktop(i))-z1(i))*0.6_r8
 1026.  b b                       zktop=MIN(zktop+z1(i),zcutdown+z1(i))
 1027.  b b                       IF(zo_cup(i,k) >  zktop .AND. kzdown(i) == 0 )THEN
 1028.  b b                          kzdown(i) = k
 1029.  b b                       END IF
 1030.  b b                    END IF
 1031.  b b-------->        END DO
 1032.  b---------->     END DO
 1033.                   !
 1034.                   ! downdraft originating level - jmin
 1035.                   ! jmin output from cup_minimi
 1036.                   !
 1037.  b I-------->     CALL cup_minimi( &
 1038.                        heso_cup  , &! heso_cup (in)
 1039.                        nCols     , &! nCols    (in)
 1040.                        kMax      , &! kMax     (in)
 1041.                        k22       , &! k22      (in)
 1042.                        kzdown    , &! kzdown   (in)
 1043.                        jmin      , &! jmin     (out)
 1044.                        istart    , &! istart   (in)
 1045.                        iend      , &! iend     (in)
 1046.                        ierr        )! ierr     (in)
 1047.                   !
 1048.                   ! check whether it would have buoyancy, if there where
 1049.                   ! no entrainment/detrainment
 1050.                   !
 1051.  A---------<>     dh2(istart:iend)=0.0_r8    
 1052.                   nLeft = 0
 1053.  1----------<     DO i=istart,iend
 1054.  1                   IF(ierr(i) == 0.0_r8)THEN
 1055.  1                      nLeft = nLeft + 1
 1056.  1                      left(nLeft) = i
 1057.  1                      IF (jmin(i)-1 <  kdet(i)) kdet(i)=jmin(i)-1
 1058.  1                      IF (jmin(i) >= ktop(i)-1) jmin(i)=ktop(i)-2
 1059.  1                   END IF
 1060.  1---------->     END DO
 1061.               
 1062.  1----------<     DO ib=1,nLeft
 1063.  1                   i=left(ib)
 1064.  1            101    CONTINUE
 1065.  1 2--------<        DO k=jmin(i)-1,1,-1
 1066.  1 2                    dh2(i)    = dh2(i) + (zo_cup  (i,k+1) - zo_cup  (i,k)) &
 1067.  1 2                         * (heso_cup(i,jmin(i)) - heso_cup(i,k))
 1068.  1 2                    IF(dh2(i) >  0.0_r8)THEN
 1069.  1 2                       jmin(i)=jmin(i)-1
 1070.  1 2                       IF(jmin(i) > 3)THEN
 1071.  1 2                          IF (jmin(i)-1 <  kdet(i)  ) kdet(i)=jmin(i)-1
 1072.  1 2                          IF (jmin(i)   >= ktop(i)-1) jmin(i)=ktop(i)-2
 1073.  1 2                          dh2(i)=0.0_r8
 1074.  1 2                          go to 101
 1075.  1 2                       ELSE IF(jmin(i) <= 3 .AND. ierr(i) /= 9 )THEN
 1076.  1 2                          ierr(i)=9
 1077.  1 2                       END IF
 1078.  1 2                    END IF
 1079.  1 2-------->        END DO
 1080.  1---------->     END DO
 1081.               
 1082.  f----------<     DO i=istart,iend
 1083.  f                   IF(ierr(i) == 0)THEN
 1084.  f                      IF(jmin(i) <= 3 .AND. ierr(i) /= 4 .AND. dh2(i) <= 0.0_r8)THEN
 1085.  f                         ierr(i)=4
 1086.  f                      END IF
 1087.  f                   END IF
 1088.  f---------->     END DO
 1089.                   !
 1090.                   ! Must have at least depth_min m between cloud convective base
 1091.                   ! and cloud top
 1092.                   !
 1093.  f----------<     DO i=istart,iend
 1094.  f                   IF(ierr(i) == 0)THEN
 1095.  f                      IF(-zo_cup(i,kbcon(i))+zo_cup(i,ktop(i)) <  depth_min)THEN
 1096.  f                         ierr(i)=6
 1097.  f                      END IF
 1098.  f                   END IF
 1099.  f---------->     END DO
 1100.                   !
 1101.                   ! normalized updraft mass flux profile
 1102.                   !
 1103.  fb I------<>     CALL cup_up_nms( &
 1104.                        zu        , & ! zu         (out)
 1105.                        z_cup     , & ! z_cup      (in)
 1106.                        mentr_rate, & ! mentr_rate (in)
 1107.                        cd        , & ! cd         (in)
 1108.                        kbcon     , & ! kbcon      (in)
 1109.                        ktop      , & ! ktop       (in)
 1110.                        nCols     , & ! nCols      (in)
 1111.                        kMax      , & ! kMax       (in)
 1112.                        istart    , & ! istart     (in)
 1113.                        iend      , & ! iend       (in)
 1114.                        ierr      , & ! ierr       (in)
 1115.                        k22         ) ! k22        (in)
 1116.               
 1117.  fb I------->     CALL cup_up_nms( &
 1118.                        zuo       , & ! zuo        (out)
 1119.                        zo_cup    , & ! zo_cup     (in)
 1120.                        mentr_rate, & ! mentr_rate (in)
 1121.                        cd        , & ! cd         (in)
 1122.                        kbcon     , & ! kbcon      (in)
 1123.                        ktop      , & ! ktop       (in)
 1124.                        nCols     , & ! nCols      (in)
 1125.                        kMax      , & ! kMax       (in)
 1126.                        istart    , & ! istart     (in)
 1127.                        iend      , & ! iend       (in)
 1128.                        ierr      , & ! ierr       (in)
 1129.                        k22         ) ! k22        (in)
 1130.                   !
 1131.                   ! normalized downdraft mass flux profile,also work on bottom
 1132.                   ! detrainment in this routin
 1133.                   !
 1134.  fb I------->     CALL cup_dd_nms(  &
 1135.                        zd         , & ! zd          (out)
 1136.                        z_cup      , & ! z_cup       (in)
 1137.                        cdd        , & ! cdd         (out)
 1138.                        mentrd_rate, & ! mentrd_rate (in)
 1139.                        jmin       , & ! jmin        (in)
 1140.                        ierr       , & ! ierr        (in)
 1141.                        nCols      , & ! nCols       (in)
 1142.                        kMax       , & ! kMax        (in)
 1143.                        istart     , & ! istart      (in)
 1144.                        iend       , & ! iend        (in)
 1145.                        0          , & ! itest       (in)
 1146.                        kdet       , & ! kdet        (in)
 1147.                        z1           ) ! z1          (in)
 1148.               
 1149.  fb I------->     CALL cup_dd_nms(  &
 1150.                        zdo        , & ! zdo         (out)
 1151.                        zo_cup     , & ! zo_cup      (in)
 1152.                        cdd        , & ! cdd         (out)
 1153.                        mentrd_rate, & ! mentrd_rate (in)
 1154.                        jmin       , & ! jmin        (in)
 1155.                        ierr       , & ! ierr        (in)
 1156.                        nCols      , & ! nCols       (in)
 1157.                        kMax       , & ! kMax        (in)
 1158.                        istart     , & ! istart      (in)
 1159.                        iend       , & ! iend        (in)
 1160.                        1          , & ! itest       (in)
 1161.                        kdet       , & ! kdet        (in)
 1162.                        z1           ) ! z1          (in)
 1163.                   !
 1164.                   !  downdraft moist static energy
 1165.                   !
 1166.  f I-------<>     CALL cup_dd_he (  &
 1167.                        hes_cup    , &! hes_cup     (in)  
 1168.                        hcd        , &! hcd         (out) 
 1169.                        z_cup      , &! z_cup       (in)  
 1170.                        cdd        , &! cdd         (in)  
 1171.                        mentrd_rate, &! mentrd_rate (in)  
 1172.                        jmin       , &! jmin        (in)  
 1173.                        ierr       , &! ierr        (in)  
 1174.                        nCols      , &! nCols       (in)  
 1175.                        kMax       , &! kMax        (in)  
 1176.                        istart     , &! istart      (in)  
 1177.                        iend       , &! iend        (in)  
 1178.                        he         , &! he          (in)  
 1179.                        dbyd         )! dbyd        (out) 
 1180.               
 1181.               
 1182.  f I-------->     CALL cup_dd_he (  &
 1183.                        heso_cup   , &! heso_cup    (in)
 1184.                        hcdo       , &! hcdo        (out)
 1185.                        zo_cup     , &! zo_cup      (in)
 1186.                        cdd        , &! cdd         (in)
 1187.                        mentrd_rate, &! mentrd_rate (in)
 1188.                        jmin       , &! jmin        (in)
 1189.                        ierr       , &! ierr        (in)
 1190.                        nCols      , &! nCols       (in)
 1191.                        kMax       , &! kMax        (in)
 1192.                        istart     , &! istart      (in)
 1193.                        iend       , &! iend        (in)
 1194.                        heo        , &! heo         (in)
 1195.                        dbydo        )! dbydo       (out)
 1196.                   !
 1197.                   !  calculate moisture properties of downdraft
 1198.                   !
 1199.                   !
 1200.                   !snf out  qcd = cloud q (including liquid water) after entrainment
 1201.  b I-------->     CALL cup_dd_moisture( &
 1202.                        zd         , & ! zd          (in)
 1203.                        hcd        , & ! hcd         (in)
 1204.                        hes_cup    , & ! hes_cup     (in)
 1205.                        qcd        , & ! qcd         (out)
 1206.                        qes_cup    , & ! qes_cup     (in)
 1207.                        pwd        , & ! pwd         (out)
 1208.                        q_cup      , & ! q_cup       (in)
 1209.                        z_cup      , & ! z_cup       (in)
 1210.                        cdd        , & ! cdd         (in)
 1211.                        mentrd_rate, & ! mentrd_rate (in)
 1212.                        jmin       , & ! jmin        (in)
 1213.                        ierr       , & ! ierr        (inout)
 1214.                        gamma_cup  , & ! gamma_cup   (in)
 1215.                        pwev       , & ! pwev        (out)
 1216.                        nCols      , & ! nCols       (in)
 1217.                        kMax       , & ! kMax        (in)
 1218.                        istart     , & ! istart      (in)
 1219.                        iend       , & ! iend        (in)
 1220.                        bu         , & ! bu          (out)
 1221.                        qrcd       , & ! qrcd        (out)
 1222.                        q          , & ! q           (in)
 1223.                        2            ) ! iloop       (in)
 1224.               
 1225.               
 1226.  f I-------<>     CALL cup_dd_moisture( &
 1227.                        zdo        , & ! zdo         (in)
 1228.                        hcdo       , & ! hcdo        (in)
 1229.                        heso_cup   , & ! heso_cup    (in)
 1230.                        qcdo       , & ! qcdo        (out)
 1231.                        qeso_cup   , & ! qeso_cup    (in)
 1232.                        pwdo       , & ! pwdo        (out)
 1233.                        qo_cup     , & ! qo_cup      (in)
 1234.                        zo_cup     , & ! zo_cup      (in)
 1235.                        cdd        , & ! cdd         (in)
 1236.                        mentrd_rate, & ! mentrd_rate (in)
 1237.                        jmin       , & ! jmin        (in)
 1238.                        ierr       , & ! ierr        (inout)
 1239.                        gammao_cup , & ! gammao_cup  (in)
 1240.                        pwevo      , & ! pwevo       (out)
 1241.                        nCols      , & ! nCols       (in)
 1242.                        kMax       , & ! kMax        (in)
 1243.                        istart     , & ! istart      (in)
 1244.                        iend       , & ! iend        (in)
 1245.                        bu         , & ! bu          (out)
 1246.                        qrcdo      , & ! qrcdo       (out)
 1247.                        qo         , & ! qo          (in)
 1248.                        1            ) ! iloop       (in)
 1249.                   !
 1250.                   ! calculate moisture properties of updraft
 1251.                   !
 1252.                   !snf 
 1253.                   !OUT
 1254.                 ! qc = cloud q (including liquid water) after entrainment
 1255.                 ! qrc = liquid water content in cloud after rainout
 1256.                 ! pw = condensate that will fall out at that level
 1257.               
 1258.  b I-------->     CALL cup_up_moisture( &
 1259.                        ierr       , & ! ierr       (in)
 1260.                        z_cup      , & ! z_cup      (in)
 1261.                        qc         , & ! qc         (out)
 1262.                        qrc        , & ! qrc        (out)
 1263.                        pw         , & ! pw         (out)
 1264.                        pwav       , & ! pwav       (out)
 1265.                        kbcon      , & ! kbcon      (in)
 1266.                        ktop       , & ! ktop       (in)
 1267.                        nCols      , & ! nCols      (in)
 1268.                        kMax       , & ! kMax       (in)
 1269.                        istart     , & ! istart     (in)
 1270.                        iend       , & ! iend       (in)
 1271.                        cd         , & ! cd         (in)
 1272.                        dby        , & ! dby        (inout)
 1273.                        mentr_rate , & ! mentr_rate (in)
 1274.                        q          , & ! q          (in)
 1275.                        gamma_cup  , & ! gamma_cup  (in)
 1276.                        zu         , & ! zu         (in)
 1277.                        qes_cup    , & ! qes_cup    (in)
 1278.                        k22        , & ! k22        (in)
 1279.                        q_cup        ) ! q_cup      (in)
 1280.               
 1281.                  !snf new
 1282.  1----------<       DO k=1,kMax
 1283.  1 A--------<          DO i=istart,iend
 1284.  1 A                      cupclw(i,k)=qrc(i,k)
 1285.  1 A-------->          END DO
 1286.  1---------->       END DO
 1287.               
 1288.  fb I------->     CALL cup_up_moisture( &
 1289.                        ierr       , & ! ierr       (in)
 1290.                        zo_cup     , & ! zo_cup     (in)
 1291.                        qco        , & ! qco        (out)
 1292.                        qrco       , & ! qrco       (out)
 1293.                        pwo        , & ! pwo        (out)
 1294.                        pwavo      , & ! pwavo      (out)
 1295.                        kbcon      , & ! kbcon      (in)
 1296.                        ktop       , & ! ktop       (in)
 1297.                        nCols      , & ! nCols      (in)
 1298.                        kMax       , & ! kMax       (in)
 1299.                        istart     , & ! istart     (in)
 1300.                        iend       , & ! iend       (in)
 1301.                        cd         , & ! cd         (in)
 1302.                        dbyo       , & ! dbyo       (inout)
 1303.                        mentr_rate , & ! mentr_rate (in)
 1304.                        q          , & ! q          (in)
 1305.                        gammao_cup , & ! gammao_cup (in)
 1306.                        zuo        , & ! zuo        (in)
 1307.                        qeso_cup   , & ! qeso_cup   (in)
 1308.                        k22        , & ! k22        (in)
 1309.                        qo_cup       ) ! qo_cup     (in)
 1310.               
 1311.                   !
 1312.                   ! calculate workfunctions for updrafts
 1313.                   !
 1314.  f I-------->     CALL cup_up_aa0(  &
 1315.                        aa0        , & ! aa0       (inout)
 1316.                        z          , & ! z         (in)
 1317.                        zu         , & ! zu        (in)
 1318.                        dby        , & ! dby       (in)
 1319.                        gamma_cup  , & ! gamma_cup (in)
 1320.                        t_cup      , & ! t_cup     (in)
 1321.                        kbcon      , & ! kbcon     (in)
 1322.                        ktop       , & ! ktop      (in)
 1323.                        kMax       , & ! kMax      (in)
 1324.                        nCols      , & ! nCols     (in)
 1325.                        istart     , & ! istart    (in)
 1326.                        iend       , & ! iend      (in)
 1327.                        ierr         ) ! ierr      (inout)
 1328.               
 1329.  f I-------->     CALL cup_up_aa0(  &
 1330.                        aa1        , & ! aa1       (inout)
 1331.                        zo         , & ! z0        (in)
 1332.                        zuo        , & ! zu0       (in)
 1333.                        dbyo       , & ! dbyo      (in)
 1334.                        gammao_cup , & ! gammao_cup(in)
 1335.                        tn_cup     , & ! tn_cup    (in)
 1336.                        kbcon      , & ! kbcon     (in)
 1337.                        ktop       , & ! ktop      (in)
 1338.                        kMax       , & ! kMax      (in)
 1339.                        nCols      , & ! nCols     (in)
 1340.                        istart     , & ! istart    (in)
 1341.                        iend       , & ! iend      (in)
 1342.                        ierr         ) ! ierr      (inout)
 1343.               !------------
 1344.               !snf new
 1345.               ! aa0 cloud work function
 1346.  iA---------<       do i=istart,iend
 1347.  iA                    wf_cape(i)=aa1(i)
 1348.  iA i-------<          do k=1,kMax
 1349.  iA i                  bncy(i,k)=dbyo(i,k)  
 1350.  iA i------->          enddo
 1351.  iA--------->       enddo
 1352.               !-------
 1353.               
 1354.               
 1355.  f----------<     DO i=istart,iend
 1356.  f                   IF(ierr(i) == 0)THEN
 1357.  f                      IF(aa1(i) == 0.0_r8)THEN
 1358.  f                         ierr(i)=17
 1359.  f                      END IF
 1360.  f                   END IF
 1361.  f---------->     END DO
 1362.                   !
 1363.                   ! determine downdraft strength in terms of windshear
 1364.                   !
 1365.  fbr4 I----->     CALL cup_dd_edt( &
 1366.                        ierr      , &! ierr    (in)
 1367.                        us        , &! us      (in)
 1368.                        vs        , &! vs      (in)
 1369.                        zo        , &! zo      (in)
 1370.                        ktop      , &! ktop    (in)
 1371.                        kbcon     , &! kbcon   (in)
 1372.                        edt       , &! edt     (out)
 1373.                        po        , &! po      (in)
 1374.                        pwavo     , &! pwavo   (in)
 1375.                        pwevo     , &! pwevo   (in)
 1376.                        nCols     , &! nCols   (in)
 1377.                        kMax      , &! kMax    (in)
 1378.                        istart    , &! istart  (in)
 1379.                        iend      , &! iend    (in)
 1380.                        edtmax    , &! edtmax  (in)
 1381.                        edtmin    , &! edtmin  (in)
 1382.                        maxens2   , &! maxens2 (in)
 1383.                        edtc      , &! edtc    (out)
 1384.                        vshear    , &! vshear  (out)
 1385.                        sdp       , &! sdp     (out)
 1386.                        vws       , &! vws     (out)
 1387.                        mask      , &! mask    (in)
 1388.                        edtmax1   , &! edtmax1 (in)
 1389.                        maxens22    )! maxens22(in)
 1390.               
 1391.               
 1392.                   nCols_gz=COUNT(ierr == 0 .OR. ierr > 995)
 1393.                   IF (nCols_gz > 0 ) THEN
 1394.               
 1395.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,edtc       ,edtc_gz       ) 
 1396.  I                   CALL COMPRESS  (istart,iend,ierr,ierr       ,ierr_gz       ) 
 1397.  br4 I------>        CALL COMPRESS  (istart,iend,ierr,dellat_ens ,dellat_ens_gz ) 
 1398.  br4 I------>        CALL COMPRESS  (istart,iend,ierr,dellaq_ens ,dellaq_ens_gz ) 
 1399.  br4 I------>        CALL COMPRESS  (istart,iend,ierr,dellaqc_ens,dellaqc_ens_gz)
 1400.  br4 I------>        CALL COMPRESS  (istart,iend,ierr,pwo_ens    ,pwo_ens_gz    )
 1401.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,heo_cup    ,heo_cup_gz    )
 1402.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,zo_cup     ,zo_cup_gz     )
 1403.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,po_cup     ,po_cup_gz     )
 1404.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,hcdo       ,hcdo_gz       )
 1405.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,zdo        ,zdo_gz        )
 1406.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,cdd        ,cdd_gz        )
 1407.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,heo        ,heo_gz        )
 1408.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,qo_cup     ,qo_cup_gz     )
 1409.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,qrcdo      ,qrcdo_gz      )
 1410.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,qo         ,qo_gz         )
 1411.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,zuo        ,zuo_gz        )
 1412.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,cd         ,cd_gz         )
 1413.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,hco        ,hco_gz        )
 1414.  I                   CALL COMPRESS  (istart,iend,ierr,ktop       ,ktop_gz       )
 1415.  I                   CALL COMPRESS  (istart,iend,ierr,k22        ,k22_gz        )
 1416.  I                   CALL COMPRESS  (istart,iend,ierr,kbcon      ,kbcon_gz      )
 1417.  I                   CALL COMPRESS  (istart,iend,ierr,jmin       ,jmin_gz       )
 1418.  I                   CALL COMPRESS  (istart,iend,ierr,kdet       ,kdet_gz       )
 1419.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,qco        ,qco_gz        )
 1420.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,qrco       ,qrco_gz       )
 1421.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,tn         ,tn_gz         )
 1422.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,po         ,po_gz         )
 1423.  I                   CALL COMPRESS  (istart,iend,ierr,z1         ,z1_gz         )
 1424.  I                   CALL COMPRESS  (istart,iend,ierr,psur       ,psur_gz       )
 1425.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,gamma_cup  ,gamma_cup_gz  )
 1426.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,pr_ens     ,pr_ens_gz     )
 1427.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,pwo        ,pwo_gz        )
 1428.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,pwdo       ,pwdo_gz       )
 1429.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,outt_ens   ,outt_ens_gz   )
 1430.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,he_cup     ,he_cup_gz     )
 1431.  I                   CALL COMPRESS  (istart,iend,ierr,kbmax      ,kbmax_gz      )
 1432.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,heso_cup   ,heso_cup_gz   )    
 1433.  I                   CALL COMPRESS  (istart,iend,ierr,cap_max    ,cap_max_gz    )
 1434.  I                   CALL COMPRESS  (istart,iend,ierr,aa0        ,aa0_gz        )
 1435.  I                   CALL COMPRESS  (istart,iend,ierr,aa1        ,aa1_gz        )
 1436.  I                   CALL COMPRESS  (istart,iend,ierr,xmb        ,xmb_gz        )
 1437.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,xf_ens     ,xf_ens_gz     )
 1438.  I                   CALL COMPRESS  (istart,iend,ierr,mask       ,mask_gz       )
 1439.  I                   CALL COMPRESS  (istart,iend,ierr,mconv      ,mconv_gz      )
 1440.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,omeg       ,omeg_gz       )
 1441.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,massfln    ,massfln_gz    )
 1442.  r4 I------->        CALL COMPRESS  (istart,iend,ierr,p_cup      ,p_cup_gz      )
 1443.               
 1444.                      CALL Ensemble(&
 1445.                           istart                        , &     !INTEGER,(IN   )
 1446.                           nCols_gz                      , &     !INTEGER,(IN   )
 1447.                           nCols_gz                      , &     !INTEGER,(IN   )
 1448.                           kMax                          , &     !INTEGER,(IN   )
 1449.                           maxens                        , &     !INTEGER,(IN   )
 1450.                           maxens2                       , &     !INTEGER,(IN   )
 1451.                           maxens22                      , &     !INTEGER,(IN   )
 1452.                           maxens3                       , &     !INTEGER,(IN   )
 1453.                           ensdim                        , &     !INTEGER,(IN   )
 1454.                           mbdt                          , &     !REAL   ,(IN   )
 1455.                           dtime                         , &     !REAL   ,(IN   )
 1456.                           edtc_gz       (1:nCols_gz,  :), &     !REAL   ,(IN   )(nCols,     maxens2)
 1457.                           ierr_gz       (1:nCols_gz    ), &     !INTEGER,(INOUT)(nCols             )
 1458.                           dellat_ens_gz (1:nCols_gz,:,:), &     !REAL   ,(OUT  )(nCols,kMax,maxens2)
 1459.                           dellaq_ens_gz (1:nCols_gz,:,:), &     !REAL   ,(OUT  )(nCols,kMax,maxens2)
 1460.                           dellaqc_ens_gz(1:nCols_gz,:,:), &     !REAL   ,(OUT  )(nCols,kMax,maxens2)
 1461.                           pwo_ens_gz    (1:nCols_gz,:,:), &     !REAL   ,(OUT  )(nCols,kMax,maxens2)
 1462.                           heo_cup_gz    (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1463.                           zo_cup_gz     (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1464.                           po_cup_gz     (1:nCols_gz,:  ), &     !REAL   ,(INOUT)(nCols,kMax        )
 1465.                           hcdo_gz       (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1466.                           zdo_gz        (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1467.                           cdd_gz        (1:nCols_gz,:  ), &     !REAL   ,(INOUT)(nCols,kMax        )
 1468.                           heo_gz        (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1469.                           qo_cup_gz     (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1470.                           qrcdo_gz      (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1471.                           qo_gz         (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1472.                           zuo_gz        (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1473.                           cd_gz         (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1474.                           hco_gz        (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1475.                           ktop_gz       (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1476.                           k22_gz        (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1477.                           kbcon_gz      (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1478.                           jmin_gz       (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1479.                           kdet_gz       (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1480.                           qco_gz        (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1481.                           qrco_gz       (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1482.                           tn_gz         (1:nCols_gz,:  ), &     !REAL   ,(IN   )(1:nCols_gz,kMax   )
 1483.                           po_gz         (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1484.                           z1_gz         (1:nCols_gz    ), &     !REAL   ,(IN   )(nCols             )
 1485.                           psur_gz       (1:nCols_gz    ), &     !REAL   ,(IN   )(nCols             )
 1486.                           gamma_cup_gz  (1:nCols_gz,:  ), &     !REAL   ,(INOUT)(nCols,kMax        )
 1487.                           pr_ens_gz     (1:nCols_gz,:  ), &     !REAL   ,(INOUT)(nCols,ensdim      )
 1488.                           pwo_gz        (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1489.                           pwdo_gz       (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1490.                           outt_ens_gz   (1:nCols_gz,:  ), &     !REAL   ,(OUT  )(nCols,ensdim      )    
 1491.                           he_cup_gz     (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1492.                           kbmax_gz      (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1493.                           heso_cup_gz   (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1494.                           cap_max_gz    (1:nCols_gz    ), &     !REAL   ,(IN   )(nCols             )
 1495.                           aa0_gz        (1:nCols_gz    ), &     !REAL   ,(INOUT)(nCols             )
 1496.                           aa1_gz        (1:nCols_gz    ), &     !REAL   ,(IN   )(nCols             )
 1497.                           xmb_gz        (1:nCols_gz    ), &     !REAL   ,(OUT  )(nCols             )
 1498.                           xf_ens_gz     (1:nCols_gz,:  ), &     !REAL   ,(OUT  )(nCols,ensdim      )
 1499.                           mask_gz       (1:nCols_gz    ), &     !INTEGER,(IN   )(nCols             )
 1500.                           mconv_gz      (1:nCols_gz    ), &     !REAL   ,(IN   )(nCols             )
 1501.                           omeg_gz       (1:nCols_gz,:  ), &     !REAL   ,(IN   )(nCols,kMax        )
 1502.                           massfln_gz    (1:nCols_gz,:  ), &     !REAL   ,(OUT  )(nCols,ensdim      )
 1503.                           p_cup_gz      (1:nCols_gz,:  )  )     !REAL   ,(IN   )(nCols,kMax        )
 1504.               
 1505.  I                   CALL UNCOMPRESS  (istart,iend,ierr,ierr_gz       ,ierr       ) 
 1506.  br4 I------>        CALL UNCOMPRESS  (istart,iend,ierr,dellat_ens_gz ,dellat_ens ) 
 1507.  br4 I------>        CALL UNCOMPRESS  (istart,iend,ierr,dellaq_ens_gz ,dellaq_ens ) 
 1508.  br4 I------>        CALL UNCOMPRESS  (istart,iend,ierr,dellaqc_ens_gz,dellaqc_ens)
 1509.  br4 I------>        CALL UNCOMPRESS  (istart,iend,ierr,pwo_ens_gz    ,pwo_ens    )    
 1510.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,po_cup_gz     ,po_cup     )
 1511.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,cdd_gz        ,cdd        )
 1512.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,gamma_cup_gz  ,gamma_cup  )
 1513.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,pr_ens_gz     ,pr_ens     )
 1514.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,outt_ens_gz   ,outt_ens   )
 1515.  I                   CALL UNCOMPRESS  (istart,iend,ierr,aa0_gz        ,aa0        )
 1516.  I                   CALL UNCOMPRESS  (istart,iend,ierr,xmb_gz        ,xmb        )
 1517.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,xf_ens_gz     ,xf_ens     )
 1518.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,massfln_gz    ,massfln    )      
 1519.  r4 I------->        CALL UNCOMPRESS  (istart,iend,ierr,qrco_gz       ,qrco       )      
 1520.                   END IF
 1521.               
 1522.                   !
 1523.                   !--- FEEDBACK
 1524.                   !
 1525.                   CALL cup_output_ens( &
 1526.                        xf_ens     , & ! xf_ens      (in)
 1527.                        ierr       , & ! ierr        (inout)
 1528.                        dellat_ens , & ! dellat_ens  (in)
 1529.                        dellaq_ens , & ! dellaq_ens  (in)
 1530.                        dellaqc_ens, & ! dellaqc_ens (in)
 1531.                        outt       , & ! outt        (inout) hmjb
 1532.                        outq       , & ! outq        (inout) hmjb
 1533.                        outqc      , & ! outqc       (out)
 1534.                        pre        , & ! pre         (out)
 1535.                        pwo_ens    , & ! pwo_ens     (in)
 1536.                        xmb        , & ! xmb         (out)
 1537.                        ktop       , & ! ktop        (in)
 1538.                        nCols      , & ! nCols       (in)
 1539.                        kMax       , & ! kMax        (in)
 1540.                        istart     , & ! istart      (in)
 1541.                        iend       , & ! iend        (in)
 1542.                        maxens2    , & ! maxens2     (in)
 1543.                        maxens     , & ! maxens      (in)
 1544.                        iens       , & ! iens        (in)
 1545.                        pr_ens     , & ! pr_ens      (inout)
 1546.                        outt_ens   , & ! outt_ens    (inout)
 1547.                        maxens3    , & ! maxens3     (in)
 1548.                        ensdim     , & ! ensdim      (in)
 1549.                        massfln    , & ! massfln     (inout)
 1550.                        xfac1      , & ! xfac1       (out)
 1551.                        xfac_for_dn, & ! xfac_for_dn (out) 
 1552.                        maxens22   ) ! maxens22    (in)
 1553.               
 1554.  Vr4--------<     DO i=istart,iend
 1555.  Vr4                 pre(i)=MAX(pre(i),0.0_r8)
 1556.  Vr4                 !snf
 1557.  Vr4-------->     END DO
 1558.               
 1559.                   RETURN
 1560.                 END SUBROUTINE grellens2
ftn-5001 ftn: NOTE File = Cu_Grellens.f90, Line = 1560 
  Local variable "KZI" is assigned a value but never used.

 1561.                 !
 1562.                 !END CUP
 1563.                 !
 1564.               
 1565.                 SUBROUTINE Ensemble(&
 1566.                      istart     , &
 1567.                      iend       , &
 1568.                      nCols      , &
 1569.                      kMax       , &
 1570.                      maxens     , & 
 1571.                      maxens2    , &
 1572.                      maxens22   , &
 1573.                      maxens3    , &
 1574.                      ensdim     , &
 1575.                      mbdt       , &
 1576.                      dtime      , & 
 1577.                      edtc       , &
 1578.                      ierr       , &
 1579.                      dellat_ens , &
 1580.                      dellaq_ens , &
 1581.                      dellaqc_ens, &
 1582.                      pwo_ens    , &
 1583.                      heo_cup    , &
 1584.                      zo_cup     , &
 1585.                      po_cup     , & 
 1586.                      hcdo       , &
 1587.                      zdo        , &
 1588.                      cdd        , &
 1589.                      heo        , &
 1590.                      qo_cup     , &
 1591.                      qrcdo      , &
 1592.                      qo         , &
 1593.                      zuo        , &
 1594.                      cd         , &
 1595.                      hco        , &
 1596.                      ktop       , &
 1597.                      k22        , &
 1598.                      kbcon      , &
 1599.                      jmin       , &
 1600.                      kdet       , &
 1601.                      qco        , &
 1602.                      qrco       , &
 1603.                      tn         , &
 1604.                      po         , & 
 1605.                      z1         , & 
 1606.                      psur       , & 
 1607.                      gamma_cup  , & 
 1608.                      pr_ens     , &
 1609.                      pwo        , &
 1610.                      pwdo       , &
 1611.                      outt_ens   , &
 1612.                      he_cup     , &
 1613.                      kbmax      , &
 1614.                      heso_cup   , &    
 1615.                      cap_max    , &
 1616.                      aa0        , &
 1617.                      aa1        , &
 1618.                      xmb        , &
 1619.                      xf_ens     , &
 1620.                      mask       , &
 1621.                      mconv      , &
 1622.                      omeg       , &
 1623.                      massfln    , &
 1624.                      p_cup      )
 1625.               
 1626.                   INTEGER :: iedt
 1627.                   INTEGER, INTENT(IN   ) :: istart
 1628.                   INTEGER, INTENT(IN   ) :: iend
 1629.                   INTEGER, INTENT(IN   ) :: nCols
 1630.                   INTEGER, INTENT(IN   ) :: kMax
 1631.                   INTEGER, INTENT(IN   ) :: maxens
 1632.                   INTEGER, INTENT(IN   ) :: maxens2,maxens22
 1633.                   INTEGER, INTENT(IN   ) :: maxens3
 1634.                   INTEGER, INTENT(IN   ) :: ensdim 
 1635.                   REAL(KIND=r8)   , INTENT(IN   ) :: mbdt
 1636.                   REAL(KIND=r8)   , INTENT(IN   ) :: dtime
 1637.                   REAL(KIND=r8)   , INTENT(IN   ) :: edtc       (nCols,maxens2)
 1638.                   INTEGER, INTENT(INOUT) :: ierr       (nCols)
 1639.                   REAL(KIND=r8)   , INTENT(OUT  ) :: dellat_ens (nCols,kMax, maxens2)
 1640.                   REAL(KIND=r8)   , INTENT(OUT  ) :: dellaq_ens (nCols,kMax, maxens2)
 1641.                   REAL(KIND=r8)   , INTENT(OUT  ) :: dellaqc_ens(nCols,kMax, maxens2)
 1642.                   REAL(KIND=r8)   , INTENT(OUT  ) :: pwo_ens    (nCols,kMax, maxens2)
 1643.                   REAL(KIND=r8)   , INTENT(IN   ) :: heo_cup    (nCols,kMax)
 1644.                   REAL(KIND=r8)   , INTENT(IN   ) :: zo_cup     (nCols,kMax)
 1645.                   REAL(KIND=r8)   , INTENT(INOUT) :: po_cup     (nCols,kMax)
 1646.                   REAL(KIND=r8)   , INTENT(IN   ) :: hcdo       (nCols,kMax)
 1647.                   REAL(KIND=r8)   , INTENT(IN   ) :: zdo        (nCols,kMax)
 1648.                   REAL(KIND=r8)   , INTENT(INOUT) :: cdd        (nCols,kMax)
 1649.                   REAL(KIND=r8)   , INTENT(IN   ) :: heo        (nCols,kMax)
 1650.                   REAL(KIND=r8)   , INTENT(IN   ) :: qo_cup     (nCols,kMax)
 1651.                   REAL(KIND=r8)   , INTENT(IN   ) :: qrcdo      (nCols,kMax)
 1652.                   REAL(KIND=r8)   , INTENT(IN   ) :: qo         (nCols,kMax)! water vapor mixing ratio (kg/kg) at time t+1
 1653.                   REAL(KIND=r8)   , INTENT(IN   ) :: zuo        (nCols,kMax)
 1654.                   REAL(KIND=r8)   , INTENT(IN   ) :: cd         (nCols,kMax)
 1655.                   REAL(KIND=r8)   , INTENT(IN   ) :: hco        (nCols,kMax)
 1656.                   INTEGER, INTENT(IN   ) :: ktop       (nCols)
 1657.                   INTEGER, INTENT(IN   ) :: k22        (nCols)
 1658.                   INTEGER, INTENT(IN   ) :: kbcon      (nCols)! level of convective cloud base       
 1659.                   INTEGER, INTENT(IN   ) :: jmin       (nCols)
 1660.                   INTEGER, INTENT(IN   ) :: kdet       (nCols)
 1661.                   REAL(KIND=r8)   , INTENT(IN   ) :: qco        (nCols,kMax)
 1662.                   REAL(KIND=r8)   , INTENT(IN   ) :: qrco       (nCols,kMax)
 1663.                   REAL(KIND=r8)   , INTENT(IN   ) :: tn         (nCols,kMax)! temperature (K) at time t+1
 1664.                   REAL(KIND=r8)   , INTENT(IN   ) :: po         (nCols,kMax)! pressao de superficie no tempo t mb
 1665.                   REAL(KIND=r8)   , INTENT(IN   ) :: z1         (nCols)! topography (m)
 1666.                   REAL(KIND=r8)   , INTENT(IN   ) :: psur       (nCols)! pressao de superficie no tempo t mb
 1667.                   REAL(KIND=r8)   , INTENT(INOUT) :: gamma_cup  (nCols,kMax)
 1668.                   REAL(KIND=r8)   , INTENT(INOUT) :: pr_ens     (nCols,ensdim)
 1669.                   REAL(KIND=r8)   , INTENT(IN   ) :: pwo        (nCols,kMax)
 1670.                   REAL(KIND=r8)   , INTENT(IN   ) :: pwdo       (nCols,kMax)
 1671.                   REAL(KIND=r8)   , INTENT(OUT  ) :: outt_ens   (nCols,ensdim)    
 1672.                   REAL(KIND=r8)   , INTENT(IN   ) :: he_cup     (nCols,kMax)
 1673.                   INTEGER, INTENT(IN   ) :: kbmax      (nCols)
 1674.                   REAL(KIND=r8)   , INTENT(IN   ) :: heso_cup   (nCols,kMax)
 1675.                   REAL(KIND=r8)   , INTENT(IN   ) :: cap_max    (nCols)
 1676.                   REAL(KIND=r8)   , INTENT(INOUT) :: aa0        (nCols)
 1677.                   REAL(KIND=r8)   , INTENT(IN   ) :: aa1        (nCols)
 1678.                   REAL(KIND=r8)   , INTENT(OUT  ) :: xmb        (nCols)
 1679.                   REAL(KIND=r8)   , INTENT(OUT  ) :: xf_ens     (nCols,ensdim)
 1680.                   INTEGER, INTENT(IN   ) :: mask       (nCols)
 1681.                   REAL(KIND=r8)   , INTENT(IN   ) :: mconv      (nCols)
 1682.                   REAL(KIND=r8)   , INTENT(IN   ) :: omeg       (nCols,kMax)
 1683.                   REAL(KIND=r8)   , INTENT(OUT  ) :: massfln    (nCols,ensdim)
 1684.                   REAL(KIND=r8)   , INTENT(IN   ) :: p_cup      (nCols,kMax)
 1685.                   !
 1686.                   ! LOCAL VARIABLE
 1687.                   !
 1688.                   REAL(KIND=r8)    :: dellat    (nCols,kMax)
 1689.                   REAL(KIND=r8)    :: dellaq    (nCols,kMax)
 1690.                   REAL(KIND=r8)    :: dellah    (nCols,kMax)
 1691.                   REAL(KIND=r8)    :: dellaqc   (nCols,kMax)
 1692.                   REAL(KIND=r8)    :: xhe       (nCols,kMax)
 1693.                   REAL(KIND=r8)    :: edt       (nCols)
 1694.                   REAL(KIND=r8)    :: bu        (nCols)    
 1695.                   INTEGER :: ierr2     (nCols)
 1696.                   INTEGER :: ierr3     (nCols)    
 1697.                   REAL(KIND=r8)    :: dbyd      (nCols,kMax)
 1698.                   REAL(KIND=r8)    :: xq        (nCols,kMax)
 1699.                   REAL(KIND=r8)    :: xt        (nCols,kMax)
 1700.                   REAL(KIND=r8)    :: xqes      (nCols,kMax)
 1701.                   REAL(KIND=r8)    :: edto      (nCols)
 1702.                   REAL(KIND=r8)    :: xhes      (nCols,kMax)
 1703.                   REAL(KIND=r8)    :: xff_ens3  (nCols,maxens3)
 1704.                   REAL(KIND=r8)    :: xk        (nCols,maxens) 
 1705.                   REAL(KIND=r8)    :: xaa0_ens  (nCols,maxens)
 1706.                   INTEGER :: k22x      (nCols)    
 1707.                   INTEGER :: kbconx    (nCols)
 1708.                   INTEGER :: nallp     
 1709.                   REAL(KIND=r8)    :: xaa0      (nCols)
 1710.                   REAL(KIND=r8)    :: xt_cup    (nCols,kMax)
 1711.                   REAL(KIND=r8)    :: xdby      (nCols,kMax)
 1712.                   REAL(KIND=r8)    :: xzu       (nCols,kMax)
 1713.                   REAL(KIND=r8)    :: xz        (nCols,kMax)
 1714.                   REAL(KIND=r8)    :: xq_cup    (nCols,kMax)
 1715.                   REAL(KIND=r8)    :: xqes_cup  (nCols,kMax)
 1716.                   REAL(KIND=r8)    :: xpwav     (nCols)
 1717.                   REAL(KIND=r8)    :: xpw       (nCols,kMax)
 1718.                   REAL(KIND=r8)    :: xqrc      (nCols,kMax)
 1719.                   REAL(KIND=r8)    :: xqc       (nCols,kMax)
 1720.                   REAL(KIND=r8)    :: xz_cup    (nCols,kMax)
 1721.                   REAL(KIND=r8)    :: xqrcd     (nCols,kMax)
 1722.                   REAL(KIND=r8)    :: xpwev     (nCols)
 1723.                   REAL(KIND=r8)    :: xpwd      (nCols,kMax)
 1724.                   REAL(KIND=r8)    :: xqcd      (nCols,kMax)
 1725.                   REAL(KIND=r8)    :: xhes_cup  (nCols,kMax)
 1726.                   REAL(KIND=r8)    :: xhcd      (nCols,kMax)
 1727.                   REAL(KIND=r8)    :: xzd       (nCols,kMax)
 1728.                   REAL(KIND=r8)    :: xhc       (nCols,kMax)
 1729.                   REAL(KIND=r8)    :: xhe_cup   (nCols,kMax)
 1730.                   REAL(KIND=r8)    :: xhkb      (nCols)
 1731.                   REAL(KIND=r8)    :: scr1      (nCols,kMax)
 1732.                   REAL(KIND=r8)    :: dz
 1733.                   REAL(KIND=r8)    :: massfld
 1734.                   INTEGER :: i
 1735.                   INTEGER :: k
 1736.                   INTEGER :: nens
 1737.                   INTEGER :: nens3
 1738.                   !
 1739.                   ! LOOP FOR ENSEMBLE MAXENS2
 1740.                   !
 1741.  1----------<     DO 250 iedt=1,maxens22
 1742.  1            
 1743.  1 2--------<        DO i=istart,iend
 1744.  1 2                    IF(ierr(i) == 0)THEN
 1745.  1 2                       edt (i)=edtc(i,iedt)
 1746.  1 2                       edto(i)=edtc(i,iedt)
 1747.  1 2                    END IF
 1748.  1 2-------->        END DO
 1749.  1            
 1750.  1 2--------<        DO k=1,kMax
 1751.  1 2 A------<           DO i=istart,iend
 1752.  1 2 A                     dellat_ens (i,k,iedt)=0.0_r8
 1753.  1 2 A                     dellaq_ens (i,k,iedt)=0.0_r8
 1754.  1 2 A                     dellaqc_ens(i,k,iedt)=0.0_r8
 1755.  1 2 A                     pwo_ens    (i,k,iedt)=0.0_r8
 1756.  1 2 A------>           END DO
 1757.  1 2-------->        END DO
 1758.  1                   !
 1759.  1                   !--- downdraft workfunctions
 1760.  1                   !
 1761.  1                   !
 1762.  1                   !--- change per unit mass that a model cloud would modify the environment
 1763.  1                   !
 1764.  1                   !--- 1.0_r8 in bottom layer
 1765.  1                   !
 1766.  1  I                CALL cup_dellabot( &
 1767.  1                        heo_cup    , &  ! heo_cup     (in)
 1768.  1                        ierr       , &  ! ierr        (in)
 1769.  1                        zo_cup     , &  ! zo_cup      (in)
 1770.  1                        po_cup     , &  ! po_cup      (in)
 1771.  1                        hcdo       , &  ! hcdo        (in)
 1772.  1                        edto       , &  ! edto        (in)
 1773.  1                        zdo        , &  ! zdo         (in)
 1774.  1                        cdd        , &  ! cdd         (in)
 1775.  1                        heo        , &  ! heo         (in)
 1776.  1                        nCols      , &  ! nCols       (in)
 1777.  1                        kMax       , &  ! kMax        (in)
 1778.  1                        istart     , &  ! istart      (in)
 1779.  1                        iend       , &  ! iend        (in)
 1780.  1                        dellah     , &  ! dellah      (out)
 1781.  1                        mentrd_rate  )  ! mentrd_rate (in)
 1782.  1            
 1783.  1  I                CALL cup_dellabot(&
 1784.  1                        qo_cup     , &  ! qo_cup      (in)
 1785.  1                        ierr       , &  ! ierr        (in)
 1786.  1                        zo_cup     , &  ! zo_cup      (in)
 1787.  1                        po_cup     , &  ! po_cup      (in)
 1788.  1                        qrcdo      , &  ! qrcdo       (in)
 1789.  1                        edto       , &  ! edto        (in)
 1790.  1                        zdo        , &  ! zdo         (in)
 1791.  1                        cdd        , &  ! cdd         (in)
 1792.  1                        qo         , &  ! qo          (in)
 1793.  1                        nCols      , &  ! nCols       (in)
 1794.  1                        kMax       , &  ! kMax        (in)
 1795.  1                        istart     , &  ! istart      (in)
 1796.  1                        iend       , &  ! iend        (in)
 1797.  1                        dellaq     , &  ! dellaq      (out)
 1798.  1                        mentrd_rate  )  ! mentrd_rate (in)
 1799.  1            
 1800.  1                   !
 1801.  1                   !--- 2. everywhere else
 1802.  1                   !
 1803.  1                   CALL cup_dellas(&
 1804.  1                        ierr       , &  ! ierr        (in)
 1805.  1                        zo_cup     , &  ! zo_cup      (in)
 1806.  1                        po_cup     , &  ! po_cup      (in)
 1807.  1                        hcdo       , &  ! hcdo        (in)
 1808.  1                        edto       , &  ! edto        (in)
 1809.  1                        zdo        , &  ! zdo         (in)
 1810.  1                        cdd        , &  ! cdd         (in)
 1811.  1                        heo        , &  ! heo         (in)
 1812.  1                        nCols      , &  ! nCols       (in)
 1813.  1                        kMax       , &  ! kMax        (in)
 1814.  1                        istart     , &  ! istart      (in)
 1815.  1                        iend       , &  ! iend        (in)
 1816.  1                        dellah     , &  ! dellah      (out)
 1817.  1                        mentrd_rate, &  ! mentrd_rate (in)
 1818.  1                        zuo        , &  ! zuo         (in)
 1819.  1                        cd         , &  ! cd          (in)
 1820.  1                        hco        , &  ! hco         (in)
 1821.  1                        ktop       , &  ! ktop        (in)
 1822.  1                        k22        , &  ! k22         (in)
 1823.  1                        kbcon      , &  ! kbcon       (in)
 1824.  1                        mentr_rate , &  ! mentr_rate  (in)
 1825.  1                        jmin       , &  ! jmin        (in)
 1826.  1                        heo_cup    , &  ! heo_cup     (in)
 1827.  1                        kdet       , &  ! kdet        (in)
 1828.  1                        k22        )    ! k22         (in)
 1829.  1            
 1830.  1                   !
 1831.  1                   !-- take out cloud liquid water for detrainment
 1832.  1                   !
 1833.  1 2--------<        DO k=1,kMax
 1834.  1 2 3------<           DO i=istart,iend
 1835.  1 2 3                     scr1   (i,k)=0.0_r8
 1836.  1 2 3                     dellaqc(i,k)=0.0_r8
 1837.  1 2 3                     IF(ierr(i) == 0)THEN
 1838.  1 2 3                        scr1(i,k)=qco(i,k)-qrco(i,k)
 1839.  1 2 3                        IF(k == ktop(i)-0)dellaqc(i,k)=                 &
 1840.  1 2 3                             0.01_r8*zuo(i,ktop(i))*qrco(i,ktop(i))*        &
 1841.  1 2 3                             9.81_r8/(po_cup(i,k  )-po_cup(i,k+1))
 1842.  1 2 3        
 1843.  1 2 3                        IF(k <  ktop(i)  .AND.k >  kbcon(i))THEN
 1844.  1 2 3                           dz=zo_cup(i,k+1)-zo_cup(i,k)
 1845.  1 2 3                           dellaqc(i,k)=0.01_r8*9.81_r8*cd(i,k)*dz*zuo(i,k)    &
 1846.  1 2 3                                *0.5_r8*(qrco(i,k)+qrco(i,k+1))/            &
 1847.  1 2 3                                (po_cup(i,k  )-po_cup(i,k+1))
 1848.  1 2 3                        END IF
 1849.  1 2 3                     END IF
 1850.  1 2 3------>           END DO
 1851.  1 2-------->        END DO
 1852.  1                   !
 1853.  1                   CALL cup_dellas( &
 1854.  1                        ierr       , &  ! ierr        (in)
 1855.  1                        zo_cup     , &  ! zo_cup      (in)
 1856.  1                        po_cup     , &  ! po_cup      (in)
 1857.  1                        qrcdo      , &  ! qrcdo       (in)
 1858.  1                        edto       , &  ! edto        (in)
 1859.  1                        zdo        , &  ! zdo         (in)
 1860.  1                        cdd        , &  ! cdd         (in)
 1861.  1                        qo         , &  ! qo          (in)
 1862.  1                        nCols      , &  ! nCols       (in)
 1863.  1                        kMax       , &  ! kMax        (in)
 1864.  1                        istart     , &  ! istart      (in)
 1865.  1                        iend       , &  ! iend        (in)
 1866.  1                        dellaq     , &  ! dellaq      (out)
 1867.  1                        mentrd_rate, &  ! mentrd_rate (in)
 1868.  1                        zuo        , &  ! zuo         (in)
 1869.  1                        cd         , &  ! cd          (in)
 1870.  1                        scr1       , &  ! scr1        (in)
 1871.  1                        ktop       , &  ! ktop        (in)
 1872.  1                        k22        , &  ! k22         (in)
 1873.  1                        kbcon      , &  ! kbcon       (in)
 1874.  1                        mentr_rate , &  ! mentr_rate  (in)
 1875.  1                        jmin       , &  ! jmin        (in)
 1876.  1                        qo_cup     , &  ! qo_cup      (in)
 1877.  1                        kdet       , &  ! kdet        (in)
 1878.  1                        k22          )  ! k22         (in)
 1879.  1                   !
 1880.  1                   !--- using dellas, calculate changed environmental profiles
 1881.  1                   !
 1882.  1                   !................second loop..........................start 200
 1883.  1            !!!old       do 200 nens=1,maxens
 1884.  1            !!!old           mbdt=mbdt_ens(nens)
 1885.  1                   !
 1886.  1 2--------<        DO k=1,maxens
 1887.  1 2 A------<           DO i=istart,iend
 1888.  1 2 A                     xaa0_ens(i,k)=0.0_r8
 1889.  1 2 A------>           END DO
 1890.  1 2-------->        END DO
 1891.  1                   !
 1892.  1                   !-----------------------------
 1893.  1                   !
 1894.  1 b--------<        DO k=1,kMax-1
 1895.  1 b b------<           DO i=istart,iend
 1896.  1 b b                     dellat(i,k)=0.0_r8
 1897.  1 b b                     IF(ierr(i) == 0)THEN
 1898.  1 b b                        xhe   (i,k)=dellah(i,k)*mbdt+heo(i,k)
 1899.  1 b b                        xq    (i,k)=dellaq(i,k)*mbdt+qo (i,k)
 1900.  1 b b                        dellat(i,k)=(1.0_r8/1004.0_r8)*(dellah(i,k)-2.5e06_r8*dellaq(i,k))
 1901.  1 b b                        xt    (i,k)= dellat(i,k)*mbdt+tn(i,k)
 1902.  1 b b                        IF(xq(i,k) <= 0.0_r8)xq(i,k)=1.e-08_r8
 1903.  1 b b                     END IF
 1904.  1 b b------>           END DO
 1905.  1 b-------->        END DO
 1906.  1                   !
 1907.  1                   !
 1908.  1 2--------<        DO i=istart,iend
 1909.  1 2                    IF(ierr(i) == 0)THEN
 1910.  1 2                       xhe(i,kMax)=heo(i,kMax)
 1911.  1 2                       xq (i,kMax)=qo (i,kMax)
 1912.  1 2                       xt (i,kMax)=tn (i,kMax)
 1913.  1 2                       IF(xq(i,kMax) <= 0.0_r8)xq(i,kMax)=1.e-08_r8
 1914.  1 2                    END IF
 1915.  1 2-------->        END DO
 1916.  1                   !
 1917.  1                   ! calculate moist static energy, heights, qes
 1918.  1                   !
 1919.  1 br2 I---->        CALL cup_env(&
 1920.  1                        xz        , &  ! xz     (out)
 1921.  1                        xqes      , &  ! xqes   (out)
 1922.  1                        xhe       , &  ! xhe    (inout)
 1923.  1                        xhes      , &  ! xhes   (out)
 1924.  1                        xt        , &  ! xt     (in)
 1925.  1                        xq        , &  ! xq     (inout)
 1926.  1                        po        , &  ! po     (in)
 1927.  1                        z1        , &  ! z1     (in)
 1928.  1                        nCols     , &  ! nCols  (in)
 1929.  1                        kMax      , &  ! kMax   (in)
 1930.  1                        istart    , &  ! istart (in)
 1931.  1                        iend      , &  ! iend   (in)
 1932.  1                        psur      , &  ! psur   (in)
 1933.  1                        ierr      , &  ! ierr   (in)
 1934.  1                        2           )  ! 2      (in)
 1935.  1                   !
 1936.  1                   ! environmental values on cloud levels
 1937.  1                   !
 1938.  1  I                CALL cup_env_clev( &
 1939.  1                        xt        , &  ! xt        (in)
 1940.  1                        xqes      , &  ! xqes      (in)
 1941.  1                        xq        , &  ! xq        (in)
 1942.  1                        xhe       , &  ! xhe       (in)
 1943.  1                        xhes      , &  ! xhes      (in)
 1944.  1                        xz        , &  ! xz        (in)
 1945.  1                        po        , &  ! po        (in)
 1946.  1                        xqes_cup  , &  ! xqes_cup  (out)
 1947.  1                        xq_cup    , &  ! xq_cup    (out)
 1948.  1                        xhe_cup   , &  ! xhe_cup   (out)
 1949.  1                        xhes_cup  , &  ! xhes_cup  (out)
 1950.  1                        xz_cup    , &  ! xz_cup    (out)
 1951.  1                        po_cup    , &  ! po_cup    (out)
 1952.  1                        gamma_cup , &  ! gamma_cup (out)
 1953.  1                        xt_cup    , &  ! xt_cup    (out)
 1954.  1                        psur      , &  ! psur      (in)
 1955.  1                        nCols     , &  ! nCols     (in)
 1956.  1                        kMax      , &  ! kMax      (in)
 1957.  1                        istart    , &  ! istart    (in)
 1958.  1                        iend      , &  ! iend      (in)
 1959.  1                        ierr      , &  ! ierr      (in)
 1960.  1                        z1          )  ! z1        (in)
 1961.  1                   !
 1962.  1                   !STATIC CONTROL
 1963.  1                   !
 1964.  1                   ! moist static energy inside cloud
 1965.  1                   !
 1966.  1 f--------<        DO i=istart,iend
 1967.  1 f                    IF(ierr(i) == 0)THEN
 1968.  1 f                       xhkb(i)=xhe(i,k22(i))
 1969.  1 f                    END IF
 1970.  1 f-------->        END DO
 1971.  1            
 1972.  1 f I------>        CALL cup_up_he(&
 1973.  1                        k22       , & ! k22        (in)
 1974.  1                        xhkb      , & ! xhkb       (out)
 1975.  1                        xz_cup    , & ! xz_cup     (in)
 1976.  1                        cd        , & ! cd         (in)
 1977.  1                        mentr_rate, & ! mentr_rate (in)
 1978.  1                        xhe_cup   , & ! xhe_cup    (in)
 1979.  1                        xhc       , & ! xhc        (out)
 1980.  1                        nCols     , & ! nCols      (in)
 1981.  1                        kMax      , & ! kMax       (in)
 1982.  1                        kbcon     , & ! kbcon      (in)
 1983.  1                        ierr      , & ! ierr       (in)
 1984.  1                        istart    , & ! istart     (in)
 1985.  1                        iend      , & ! iend       (in)
 1986.  1                        xdby      , & ! xdby       (out)
 1987.  1                        xhe       , & ! xhe        (in)
 1988.  1                        xhes_cup    ) ! xhes_cup   (in)
 1989.  1                   !
 1990.  1                   ! normalized mass flux profile
 1991.  1                   !
 1992.  1 b I------>        CALL cup_up_nms(&
 1993.  1                        xzu       , & ! xzu        (out)
 1994.  1                        xz_cup    , & ! xz_cup     (in)
 1995.  1                        mentr_rate, & ! mentr_rate (in)
 1996.  1                        cd        , & ! cd         (in)
 1997.  1                        kbcon     , & ! kbcon      (in)
 1998.  1                        ktop      , & ! ktop       (in)
 1999.  1                        nCols     , & ! nCols      (in)
 2000.  1                        kMax      , & ! kMax       (in)
 2001.  1                        istart    , & ! istart     (in)
 2002.  1                        iend      , & ! iend       (in)
 2003.  1                        ierr      , & ! ierr       (in)
 2004.  1                        k22         ) ! k22        (in)
 2005.  1            
 2006.  1 D I------>        CALL cup_dd_nms(xzd        , &! xzd        (out)
 2007.  1                        xz_cup     , &! xz_cup     (in)
 2008.  1                        cdd        , &! cdd        (out)
 2009.  1                        mentrd_rate, &! mentrd_rate(in)
 2010.  1                        jmin       , &! jmin       (in)
 2011.  1                        ierr       , &! ierr       (in)
 2012.  1                        nCols      , &! nCols      (in)
 2013.  1                        kMax       , &! kMax       (in)
 2014.  1                        istart     , &! istart     (in)
 2015.  1                        iend       , &! iend       (in)
 2016.  1                        1          , &! 1
 2017.  1                        kdet       , &! kdet       (in)
 2018.  1                        z1           )! z1         (in)
 2019.  1            
 2020.  1                   !
 2021.  1                   ! moisture downdraft
 2022.  1                   !
 2023.  1 D I------>        CALL cup_dd_he(xhes_cup   , &! xhes_cup    (in)
 2024.  1                        xhcd       , &! xhcd        (out)
 2025.  1                        xz_cup     , &! xz_cup      (in)
 2026.  1                        cdd        , &! cdd         (in)
 2027.  1                        mentrd_rate, &! mentrd_rate (in)
 2028.  1                        jmin       , &! jmin        (in)
 2029.  1                        ierr       , &! ierr        (in)
 2030.  1                        nCols      , &! nCols       (in)
 2031.  1                        kMax       , &! kMax        (in)
 2032.  1                        istart     , &! istart      (in)
 2033.  1                        iend       , &! iend        (in)
 2034.  1                        xhe        , &! xhe         (in)
 2035.  1                        dbyd         )! dbyd        (out)
 2036.  1            
 2037.  1 D I------>        CALL cup_dd_moisture(xzd        , &  ! xzd         (in)
 2038.  1                        xhcd       , &  ! xhcd        (in)
 2039.  1                        xhes_cup   , &  ! xhes_cup    (in)
 2040.  1                        xqcd       , &  ! xqcd        (out)
 2041.  1                        xqes_cup   , &  ! xqes_cup    (in)
 2042.  1                        xpwd       , &  ! xpwd        (out)
 2043.  1                        xq_cup     , &  ! xq_cup      (in)
 2044.  1                        xz_cup     , &  ! xz_cup      (in)
 2045.  1                        cdd        , &  ! cdd         (in)
 2046.  1                        mentrd_rate, &  ! mentrd_rate (in)
 2047.  1                        jmin       , &  ! jmin        (in)
 2048.  1                        ierr       , &  ! ierr        (inout)
 2049.  1                        gamma_cup  , &  ! gamma_cup   (in)
 2050.  1                        xpwev      , &  ! xpwev       (out)
 2051.  1                        nCols      , &  ! nCols       (in)
 2052.  1                        kMax       , &  ! kMax        (in)
 2053.  1                        istart     , &  ! istart      (in)
 2054.  1                        iend       , &  ! iend        (in)
 2055.  1                        bu         , &  ! bu          (out)
 2056.  1                        xqrcd      , &  ! xqrcd       (out)
 2057.  1                        xq         , &  ! xq          (in)
 2058.  1                        3            )  ! 3
 2059.  1            
 2060.  1                   !
 2061.  1                   ! moisture updraft
 2062.  1                   !
 2063.  1 D I------>        CALL cup_up_moisture(ierr       , &  ! ierr       (in)
 2064.  1                        xz_cup     , &  ! xz_cup     (in)
 2065.  1                        xqc        , &  ! xqc        (out)
 2066.  1                        xqrc       , &  ! xqrc       (out)
 2067.  1                        xpw        , &  ! xpw        (out)
 2068.  1                        xpwav      , &  ! xpwav      (out)
 2069.  1                        kbcon      , &  ! kbcon      (in)
 2070.  1                        ktop       , &  ! ktop       (in)
 2071.  1                        nCols      , &  ! nCols      (in)
 2072.  1                        kMax       , &  ! kMax       (in)
 2073.  1                        istart     , &  ! istart     (in)
 2074.  1                        iend       , &  ! iend       (in)
 2075.  1                        cd         , &  ! cd         (in)
 2076.  1                        xdby       , &  ! xdby       (inout)
 2077.  1                        mentr_rate , &  ! mentr_rate (in)
 2078.  1                        xq         , &  ! xq         (in)
 2079.  1                        gamma_cup  , &  ! gamma_cup  (in)
 2080.  1                        xzu        , &  ! xzu        (in)
 2081.  1                        xqes_cup   , &  ! xqes_cup   (in)
 2082.  1                        k22        , &  ! k22        (in)
 2083.  1                        xq_cup       )  ! xq_cup     (in)
 2084.  1                   !
 2085.  1                   ! workfunctions for updraft
 2086.  1                   !
 2087.  1 f I------>        CALL cup_up_aa0(xaa0       , & ! xaa0      (inout)
 2088.  1                        xz         , & ! xz        (in)
 2089.  1                        xzu        , & ! xzu       (in)
 2090.  1                        xdby       , & ! xdby      (in)
 2091.  1                        gamma_cup  , & ! gamma_cup (in)
 2092.  1                        xt_cup     , & ! xt_cup    (in)
 2093.  1                        kbcon      , & ! kbcon     (in)
 2094.  1                        ktop       , & ! ktop      (in)
 2095.  1                        kMax       , & ! kMax      (in)
 2096.  1                        nCols      , & ! nCols     (in)
 2097.  1                        istart     , & ! istart    (in)
 2098.  1                        iend       , & ! iend      (in)
 2099.  1                        ierr         ) ! ierr      (in)
 2100.  1            
 2101.  1                   !
 2102.  1                   ! workfunctions for downdraft
 2103.  1                   !---------0--------------
 2104.  1                   ! 
 2105.  1 2--------<        DO 200 nens=1,maxens
 2106.  1 2 3------<           DO i=istart,iend 
 2107.  1 2 3                     IF(ierr(i) == 0)THEN
 2108.  1 2 3                        xaa0_ens(i,nens)=xaa0(i)
 2109.  1 2 3                     END IF
 2110.  1 2 3------>           END DO
 2111.  1 2                    nallp=(iens-1)*maxens3*maxens*maxens22 &
 2112.  1 2                         +(iedt-1)*maxens*maxens3 &
 2113.  1 2                         +(nens-1)*maxens3
 2114.  1 2 3------<           DO nens3=1,maxens3
 2115.  1 2 3 b----<              DO k=1,MAXVAL(ktop)
 2116.  1 2 3 b b--<                 DO i=istart,iend              
 2117.  1 2 3 b b                       IF( k <= ktop(i) .AND. ierr(i) == 0 )THEN                
 2118.  1 2 3 b b                          pr_ens(i,nallp+nens3)=pr_ens(i,nallp+nens3)+&
 2119.  1 2 3 b b                               pwo(i,k)+beta(nens3)*edto(i)*pwdo(i,k)
 2120.  1 2 3 b b                       END IF
 2121.  1 2 3 b b-->                 END DO
 2122.  1 2 3 b---->              END DO
 2123.  1 2 3 4----<              DO i=istart,iend 
 2124.  1 2 3 4                      IF(ierr(i) == 0)THEN
 2125.  1 2 3 4                         outt_ens (i,nallp+nens3)=dellat(i,1)
 2126.  1 2 3 4                         IF(pr_ens(i,nallp+nens3) < 0.0_r8)THEN
 2127.  1 2 3 4                            pr_ens(i,nallp+nens3)= 0.0_r8
 2128.  1 2 3 4                         END IF
 2129.  1 2 3 4                      END IF
 2130.  1 2 3 4---->              END DO
 2131.  1 2 3------>           END DO
 2132.  1 2--------> 200    END DO
 2133.  1                   !...............end 200
 2134.  1                   !
 2135.  1                   ! LARGE SCALE FORCING
 2136.  1                   !
 2137.  1 Ab I----->        CALL cup_maximi(he_cup    , & ! he_cup (in)
 2138.  1                        nCols     , & ! nCols  (in)
 2139.  1                        kMax      , & ! kMax   (in) 
 2140.  1                        3         , & ! 3      (in)
 2141.  1                        kbmax     , & ! kbmax  (in)
 2142.  1                        k22x      , & ! k22x   (out)
 2143.  1                        istart    , & ! istart (in)
 2144.  1                        iend      , & ! iend   (in)
 2145.  1                        ierr        ) ! ierr   (in)
 2146.  1            
 2147.  1 2--------<        DO i=istart,iend
 2148.  1 2                    IF(ierr(i) == 0)THEN
 2149.  1 2                       k22x (i)=k22(i)
 2150.  1 2                    END IF
 2151.  1 2                    ierr2(i)=ierr(i)
 2152.  1 2                    ierr3(i)=ierr(i)
 2153.  1 2-------->        END DO
 2154.  1                   !
 2155.  1                   ! --- DETERMINE THE LEVEL OF CONVECTIVE CLOUD BASE  - KBCON
 2156.  1                   ! snf  call cup_kbcon for cap_max=cap_max-(2-1)*cap_max_increment
 2157.  1                   !
 2158.  1 r4 I----->        CALL cup_kbcon(&
 2159.  1                        cap_max_increment, &  ! cap_max_increment (in)
 2160.  1                        2         , &         ! 2
 2161.  1                        k22x      , &         ! k22x              (inout)
 2162.  1                        kbconx    , &         ! kbconx            (out)
 2163.  1                        heo_cup   , &         ! heo_cup           (in)
 2164.  1                        heso_cup  , &         ! heso_cup          (in)
 2165.  1                        nCols     , &         ! nCols             (in)
 2166.  1                        kMax      , &         ! kMax              (in)
 2167.  1                        istart    , &         ! istart            (in)
 2168.  1                        iend      , &         ! iend              (in)
 2169.  1                        ierr2     , &         ! ierr2             (inout)
 2170.  1                        kbmax     , &         ! kbmax             (in)
 2171.  1                        po_cup    , &         ! po_cup            (in)
 2172.  1                        cap_max     )         ! cap_max           (in)
 2173.  1                   !
 2174.  1                   ! snf  call cup_kbcon for cap_max=cap_max-(3-1)*cap_max_increment
 2175.  1                   !
 2176.  1 r4 I----->        CALL cup_kbcon(&
 2177.  1                        cap_max_increment, &  ! cap_max_increment (in)
 2178.  1                        3                , &  ! 3                 (in)
 2179.  1                        k22x             , &  ! k22x              (inout)
 2180.  1                        kbconx           , &  ! kbconx            (out)
 2181.  1                        heo_cup          , &  ! heo_cup           (in)
 2182.  1                        heso_cup         , &  ! heso_cup          (in)
 2183.  1                        nCols            , &  ! nCols             (in)
 2184.  1                        kMax             , &  ! kMax              (in)
 2185.  1                        istart           , &  ! istart            (in)
 2186.  1                        iend             , &  ! iend              (in)
 2187.  1                        ierr3            , &  ! ierr3             (inout)
 2188.  1                        kbmax            , &  ! kbmax             (in)
 2189.  1                        po_cup           , &  ! po_cup            (in)
 2190.  1                        cap_max            )  ! cap_max           (in)
 2191.  1            
 2192.  1                   IF(maxens3 == 16)THEN
 2193.  1                      CALL cup_forcing_ens_16( &
 2194.  1                           aa0       , & ! aa0      (inout)
 2195.  1                           aa1       , & ! aa1      (in)
 2196.  1                           xaa0_ens  , & ! xaa0_ens (in)
 2197.  1                           mbdt      , & ! mbdt     (in)
 2198.  1                           dtime     , & ! dtime    (in)
 2199.  1                           xmb       , & ! xmb      (out)
 2200.  1                           ierr      , & ! ierr     (inout)
 2201.  1                           nCols     , & ! nCols    (in)
 2202.  1                           kMax      , & ! kMax     (in)
 2203.  1                           istart    , & ! istart   (in)
 2204.  1                           iend      , & ! iend     (in)
 2205.  1                           xf_ens    , & ! xf_ens   (out)
 2206.  1                           'deeps'   , & ! 'deeps'  (in)
 2207.  1                           mask      , & ! mask     (in)
 2208.  1                           maxens    , & ! maxens   (in)
 2209.  1                           iens      , & ! iens     (in)
 2210.  1                           iedt      , & ! iedt     (in)
 2211.  1                           maxens3   , & ! maxens3  (in)
 2212.  1                           mconv     , & ! mconv    (in)
 2213.  1                           omeg      , & ! omeg     (in)
 2214.  1                           k22       , & ! k22      (in)
 2215.  1                           pr_ens    , & ! pr_ens   (in)
 2216.  1                           edto      , & ! edto     (in)
 2217.  1                           kbcon     , & ! kbcon    (in)
 2218.  1                           ensdim    , & ! ensdim   (in)
 2219.  1                           massfln   , & ! massfln  (out)
 2220.  1                           massfld   , & ! massfld  (inout)
 2221.  1                           xff_ens3  , & ! xff_ens3 (out)
 2222.  1                           xk        , & ! xk       (out)
 2223.  1                           p_cup     , & ! p_cup    (in)
 2224.  1                           ktop      , & ! ktop     (in)
 2225.  1                           ierr2     , & ! ierr2    (in)
 2226.  1                           ierr3     , & ! ierr3    (in)
 2227.  1                           grepar1   , & ! grepar1  (in)
 2228.  1                           xfmax     , & ! xfmax    (in)
 2229.  1                           maxens22    ) !maxens22  (in)
 2230.  1                   END IF
 2231.  1            
 2232.  1 2--------<        DO k=1,kMax
 2233.  1 2 3------<           DO i=istart,iend
 2234.  1 2 3                     IF(ierr(i) == 0)THEN
 2235.  1 2 3                        dellat_ens (i,k,iedt)=dellat (i,k)
 2236.  1 2 3                        dellaq_ens (i,k,iedt)=dellaq (i,k)
 2237.  1 2 3                        dellaqc_ens(i,k,iedt)=dellaqc(i,k)
 2238.  1 2 3                        pwo_ens    (i,k,iedt)=pwo    (i,k)+edt(i)*pwdo(i,k)
 2239.  1 2 3                     ELSE 
 2240.  1 2 3                        dellat_ens (i,k,iedt)=0.0_r8
 2241.  1 2 3                        dellaq_ens (i,k,iedt)=0.0_r8
 2242.  1 2 3                        dellaqc_ens(i,k,iedt)=0.0_r8
 2243.  1 2 3                        pwo_ens    (i,k,iedt)=0.0_r8
 2244.  1 2 3                     END IF
 2245.  1 2 3------>           END DO
 2246.  1 2-------->        END DO
 2247.  1----------> 250 END DO
 2248.               
 2249.                 END SUBROUTINE Ensemble
 2250.                 !
 2251.                 !END CUP
 2252.                 !-----------------------------------------------------------------------subroutines
 2253.                 !*-----------
 2254.                 SUBROUTINE cup_env( &
 2255.                      z      ,qes    ,he     ,hes    ,t      ,q      , &
 2256.                      p      ,z1     ,nCols  ,kMax   ,istart ,iend   ,psur   , &
 2257.                      ierr   ,itest                                    )
 2258.               
 2259.                   IMPLICIT NONE
 2260.                   INTEGER, INTENT(IN   )    :: nCols
 2261.                   INTEGER, INTENT(IN   )    :: kMax
 2262.                   REAL(KIND=r8)   , INTENT(OUT  )    :: z   (nCols,kMax)
 2263.                   REAL(KIND=r8)   , INTENT(OUT  )    :: qes (nCols,kMax)! pressure vapor
 2264.                   REAL(KIND=r8)   , INTENT(INOUT)    :: he  (nCols,kMax)
 2265.                   REAL(KIND=r8)   , INTENT(OUT  )    :: hes (nCols,kMax)
 2266.                   REAL(KIND=r8)   , INTENT(IN   )    :: t   (nCols,kMax)
 2267.                   REAL(KIND=r8)   , INTENT(INOUT)    :: q   (nCols,kMax)
 2268.                   REAL(KIND=r8)   , INTENT(IN   )    :: p   (nCols,kMax)
 2269.                   REAL(KIND=r8)   , INTENT(IN   )    :: z1  (nCols)
 2270.                   INTEGER, INTENT(IN   )    :: istart
 2271.                   INTEGER, INTENT(IN   )    :: iend
 2272.                   REAL(KIND=r8)   , INTENT(IN   )    :: psur(nCols)
 2273.                   INTEGER, INTENT(IN   )    :: ierr(nCols)
 2274.                   INTEGER, INTENT(IN   )    :: itest
 2275.                   !
 2276.                   ! local variables
 2277.                   !
 2278.                   INTEGER                   :: i
 2279.                   INTEGER                   :: k
 2280.                   REAL(KIND=r8)                      :: tv  (nCols,kMax) ! virtual temperature
 2281.  b----------<     DO k=1,kMax
 2282.  b br2------<        DO i=istart,iend
 2283.  b br2                  IF(ierr(i) == 0)THEN
 2284.  b br2                     !
 2285.  b br2                     ! sgb - IPH is for phase, dependent on TCRIT (water or ice)
 2286.  b br2                     ! calculation of the pressure vapor
 2287.  b br2                     !
 2288.  b br2  I                  qes(i,k) = 0.622_r8*es5(t(i,k))/(100.0_r8*p(i,k)-es5(t(i,k)))
 2289.  b br2                     IF(qes(i,k) <= 1.0e-08_r8  )      qes(i,k)=1.0e-08_r8
 2290.  b br2                     IF(q(i,k)   >  qes(i,k))        q(i,k)=qes(i,k)
 2291.  b br2                     !
 2292.  b br2                     ! calculation of virtual temperature
 2293.  b br2                     !
 2294.  b br2                     tv(i,k) = t(i,k)+0.608_r8*q(i,k)*t(i,k)
 2295.  b br2                  END IF
 2296.  b br2------>        END DO
 2297.  b---------->     END DO
 2298.                   !
 2299.                   ! z's are calculated with changed h's and q's and t's
 2300.                   ! if itest=2
 2301.                   !
 2302.                   !
 2303.                   ! calculate heights geopotential
 2304.                   !
 2305.                   IF(itest.NE.2)THEN
 2306.  1----------<        DO k=1,kMax
 2307.  1 2--------<           DO i=istart,iend
 2308.  1 2                       IF(ierr(i) == 0)THEN
 2309.  1 2                          IF (k==1) THEN   
 2310.  1 2                             z(i,1) = MAX(0.0_r8,z1(i))-(LOG(p(i,1))-LOG(psur(i)) )*287.0_r8 &
 2311.  1 2                                  * tv(i,1)/9.81_r8
 2312.  1 2                          ELSE
 2313.  1 2                             z(i,k) = z(i,k-1)     -(LOG(p(i,k))-LOG(p(i,k-1)))*287.0_r8 &
 2314.  1 2                                  * (0.5_r8*tv(i,k)+0.5_r8*tv(i,k-1) )/9.81_r8
 2315.  1 2                          END IF
 2316.  1 2                          he  (i,k)=9.81_r8*z(i,k)+1004.0_r8*t(i,k)+2.5e06_r8*q  (i,k)
 2317.  1 2                          hes (i,k)=9.81_r8*z(i,k)+1004.0_r8*t(i,k)+2.5e06_r8*qes(i,k)
 2318.  1 2                          IF(he(i,k) >= hes(i,k))he(i,k)=hes(i,k)
 2319.  1 2                       END IF
 2320.  1 2-------->           END DO
 2321.  1---------->        END DO
 2322.                   ELSE
 2323.  1----------<        DO k=1,kMax
 2324.  1 2--------<           DO i=istart,iend
 2325.  1 2                       IF(ierr(i) == 0)THEN
 2326.  1 2                          z(i,k)=(he(i,k)-1004.0_r8*t(i,k)-2.5e6_r8*q(i,k))/9.81_r8
 2327.  1 2                          z(i,k)=MAX(1.0e-3_r8,z(i,k))
 2328.  1 2                          hes(i,k)=9.81_r8*z(i,k)+1004.0_r8*t(i,k)+2.5e06_r8*qes(i,k)
 2329.  1 2                          IF(he(i,k) >= hes(i,k))he(i,k)=hes(i,k)
 2330.  1 2                       END IF
 2331.  1 2-------->           END DO
 2332.  1---------->        END DO
 2333.                   END IF
 2334.                   RETURN
 2335.                 END SUBROUTINE cup_env
 2336.               
 2337.                 !*--------
 2338.                 SUBROUTINE cup_env_clev( &
 2339.                      t        ,qes      ,q      ,he       ,hes     ,z      , &
 2340.                      p        ,qes_cup  ,q_cup  ,he_cup   ,hes_cup ,z_cup  ,p_cup  , &
 2341.                      gamma_cup,t_cup    ,psur   ,nCols    ,kMax    ,istart ,iend   , &
 2342.                      ierr     ,z1                                                 )
 2343.               
 2344.                   IMPLICIT NONE
 2345.                   INTEGER, INTENT(IN   )                  :: nCols
 2346.                   INTEGER, INTENT(IN   )                  :: kMax
 2347.                   INTEGER, INTENT(IN   )                  :: istart
 2348.                   INTEGER, INTENT(IN   )                  :: iend
 2349.                   INTEGER, INTENT(IN   )                  :: ierr(nCols)
 2350.                   REAL(KIND=r8)   , INTENT(IN   )                  :: t        (nCols,kMax)
 2351.                   REAL(KIND=r8)   , INTENT(IN   )                  :: qes      (nCols,kMax)
 2352.                   REAL(KIND=r8)   , INTENT(IN   )                  :: q        (nCols,kMax)
 2353.                   REAL(KIND=r8)   , INTENT(IN   )                  :: he       (nCols,kMax)
 2354.                   REAL(KIND=r8)   , INTENT(IN   )                  :: hes      (nCols,kMax)
 2355.                   REAL(KIND=r8)   , INTENT(IN   )                  :: z        (nCols,kMax)
 2356.                   REAL(KIND=r8)   , INTENT(IN   )                  :: p        (nCols,kMax)
 2357.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: qes_cup  (nCols,kMax)
 2358.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: q_cup    (nCols,kMax)
 2359.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: he_cup   (nCols,kMax)
 2360.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: hes_cup  (nCols,kMax)
 2361.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: z_cup    (nCols,kMax)
 2362.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: p_cup    (nCols,kMax)
 2363.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: gamma_cup(nCols,kMax)
 2364.                   REAL(KIND=r8)   , INTENT(OUT  )                  :: t_cup    (nCols,kMax)
 2365.                   REAL(KIND=r8)   , INTENT(IN   )                  :: psur     (nCols)    
 2366.                   REAL(KIND=r8)   , INTENT(IN   )                  :: z1       (nCols)    
 2367.               
 2368.                   INTEGER                  :: i
 2369.                   INTEGER                  :: k
 2370.               
 2371.                 ! ierr error value, maybe modified in this routine
 2372.                 ! q           = environmental mixing ratio
 2373.                 ! q_cup       = environmental mixing ratio on cloud levels
 2374.                 ! qes         = environmental saturation mixing ratio
 2375.                 ! qes_cup     = environmental saturation mixing ratio on cloud levels
 2376.                 ! t           = environmental temp
 2377.                 ! t_cup       = environmental temp on cloud levels
 2378.                 ! p           = environmental pressure
 2379.                 ! p_cup       = environmental pressure on cloud levels
 2380.                 ! z           = environmental heights
 2381.                 ! z_cup       = environmental heights on cloud levels
 2382.                 ! he          = environmental moist static energy
 2383.                 ! he_cup      = environmental moist static energy on cloud levels
 2384.                 ! hes         = environmental saturation moist static energy
 2385.                 ! hes_cup     = environmental saturation moist static energy on cloud levels
 2386.                 ! gamma_cup   = gamma on cloud levels
 2387.                 ! psur        = surface pressure
 2388.                 ! z1          = terrain elevation
 2389.               
 2390.               
 2391.  1----------<     DO k=2,kMax
 2392.  1 2--------<        DO i=istart,iend
 2393.  1 2                    IF(ierr(i) == 0)THEN
 2394.  1 2                       qes_cup(i,k) = 0.5_r8*(qes(i,k-1) + qes(i,k))
 2395.  1 2                       q_cup  (i,k) = 0.5_r8*(  q(i,k-1) +   q(i,k))
 2396.  1 2                       hes_cup(i,k) = 0.5_r8*(hes(i,k-1) + hes(i,k))
 2397.  1 2                       he_cup (i,k) = 0.5_r8*( he(i,k-1) +  he(i,k))
 2398.  1 2          
 2399.  1 2                       IF(he_cup(i,k)  >   hes_cup(i,k)) he_cup(i,k) = hes_cup(i,k)
 2400.  1 2                       z_cup    (i,k) = 0.5_r8*(z(i,k-1) + z(i,k))
 2401.  1 2                       p_cup    (i,k) = 0.5_r8*(p(i,k-1) + p(i,k))
 2402.  1 2                       t_cup    (i,k) = 0.5_r8*(t(i,k-1) + t(i,k))
 2403.  1 2                       gamma_cup(i,k) =(xl/cp)*(xl/(rv*t_cup(i,k)    &
 2404.  1 2                            *t_cup(i,k)))*qes_cup(i,k)
 2405.  1 2                    END IF
 2406.  1 2-------->        END DO
 2407.  1---------->     END DO
 2408.                   !
 2409.  1----------<     DO i=istart,iend
 2410.  1                   IF(ierr(i) == 0)THEN
 2411.  1                      qes_cup  (i,1) =  qes(i,1)
 2412.  1                      q_cup    (i,1) =    q(i,1)
 2413.  1                      hes_cup  (i,1) =  hes(i,1)
 2414.  1                      he_cup   (i,1) =   he(i,1)
 2415.  1            
 2416.  1                      z_cup    (i,1) = 0.5_r8*( z(i,1) +   z1(i))
 2417.  1                      p_cup    (i,1) = 0.5_r8*( p(i,1) + psur(i))
 2418.  1                      t_cup    (i,1) =      t(i,1)
 2419.  1                      gamma_cup(i,1) = xl/cp*(xl/(rv*t_cup(i,1)               &
 2420.  1                           *t_cup(i,1)))*qes_cup(i,1)
 2421.  1                   END IF
 2422.  1---------->     END DO
 2423.                 END SUBROUTINE cup_env_clev
 2424.               
 2425.                 !*--------
 2426.               
 2427.                 SUBROUTINE cup_maximi( &
 2428.                      array    ,nCols    ,kMax      ,ks       ,ke       , &
 2429.                      maxx     ,istart   ,iend     ,ierr)
 2430.               
 2431.                   IMPLICIT NONE
 2432.                   INTEGER, INTENT(IN   ) :: nCols 
 2433.                   INTEGER, INTENT(IN   ) :: kMax
 2434.                   INTEGER, INTENT(IN   ) :: ks
 2435.                   INTEGER, INTENT(IN   ) :: istart
 2436.                   INTEGER, INTENT(IN   ) :: iend
 2437.                   REAL(KIND=r8)   , INTENT(IN   ) :: array(nCols, kMax)
 2438.                   INTEGER, INTENT(IN   ) :: ierr (nCols) 
 2439.                   INTEGER, INTENT(OUT  ) :: maxx (nCols) 
 2440.                   INTEGER, INTENT(IN   ) :: ke   (nCols)
 2441.               
 2442.                   REAL(KIND=r8)                   :: x    (nCols)
 2443.                   INTEGER                :: i
 2444.                   INTEGER                :: k
 2445.               
 2446.  1----------<     DO i=istart,iend
 2447.  1                   maxx(i)=ks
 2448.  1                   IF(ierr(i) == 0)THEN
 2449.  1                      x(i)=array(i,ks)
 2450.  1                   END IF
 2451.  1---------->     END DO
 2452.  b----------<     DO k=ks,MAXVAL(ke)
 2453.  b b--------<        DO i=istart,iend
 2454.  b b                    IF(ierr(i) == 0 .AND.  k <= ke(i) ) THEN
 2455.  b b                       IF(array(i,k) >= x(i)) THEN
 2456.  b b                          x(i)=array(i,k)
 2457.  b b                          maxx(i)=k
 2458.  b b                       END IF
 2459.  b b                    END IF
 2460.  b b-------->        END DO
 2461.  b---------->     END DO
 2462.                   RETURN
 2463.                 END SUBROUTINE cup_maximi
 2464.               
 2465.                 !*------
 2466.               
 2467.                 SUBROUTINE cup_minimi(array     ,nCols    ,kMax       ,ks        ,kend      , &
 2468.                      kt        ,istart   ,iend      ,ierr)
 2469.               
 2470.                   IMPLICIT NONE
 2471.                   INTEGER, INTENT(IN   )   :: nCols 
 2472.                   INTEGER, INTENT(IN   )   :: kMax
 2473.                   INTEGER, INTENT(IN   )   :: istart
 2474.                   INTEGER, INTENT(IN   )   :: iend
 2475.                   REAL(KIND=r8)   , INTENT(IN   )   :: array(nCols, kMax)
 2476.                   INTEGER, INTENT(OUT  )   :: kt   (nCols)
 2477.                   INTEGER, INTENT(IN   )   :: ks   (nCols)
 2478.                   INTEGER, INTENT(IN   )   :: kend (nCols)
 2479.                   INTEGER, INTENT(IN   )   :: ierr (nCols)
 2480.               
 2481.                   REAL(KIND=r8)                     :: x    (nCols     )
 2482.                   INTEGER                  :: kstop(nCols     )
 2483.                   INTEGER                  :: i
 2484.                   INTEGER                  :: k 
 2485.               
 2486.  1----------<     DO i=istart,iend
 2487.  1                   kt(i)=ks(i)
 2488.  1                   IF(ierr(i) == 0)THEN
 2489.  1                      x    (i)=array(i,ks(i))
 2490.  1                      kstop(i)=MAX(ks(i)+1,kend(i))
 2491.  1                   END IF
 2492.  1---------->     END DO
 2493.               
 2494.  b----------<     DO k=1,kMax
 2495.  b b--------<        DO i=istart,iend
 2496.  b b                    IF(ierr(i) == 0)THEN
 2497.  b b                       IF (k >= ks(i)+1 .AND. k <= kstop(i)) THEN
 2498.  b b                          IF(array(i,k) <  x(i)) THEN
 2499.  b b                             x(i)=array(i,k)
 2500.  b b                             kt(i)=k
 2501.  b b                          END IF
 2502.  b b                       END IF
 2503.  b b                    END IF
 2504.  b b-------->        END DO
 2505.  b---------->     END DO
 2506.                   RETURN
 2507.                 END SUBROUTINE cup_minimi
 2508.               
 2509.                 SUBROUTINE cup_kbcon(cap_inc   ,&
 2510.                      iloop     ,k22       ,kbcon     ,he_cup    ,hes_cup   , &
 2511.                      nCols     ,kMax      ,istart    ,iend      ,ierr      , &
 2512.                      kbmax     ,p_cup     ,cap_max)
 2513.                   IMPLICIT NONE
 2514.                   INTEGER, INTENT(IN   )        :: nCols
 2515.                   INTEGER, INTENT(IN   )        :: kMax
 2516.                   INTEGER, INTENT(IN   )        :: istart
 2517.                   INTEGER, INTENT(IN   )        :: iend
 2518.                   INTEGER, INTENT(IN   )        :: iloop
 2519.                   INTEGER, INTENT(OUT  )        :: kbcon   (nCols)
 2520.                   INTEGER, INTENT(INOUT)        :: k22     (nCols)
 2521.                   INTEGER, INTENT(INOUT)        :: ierr    (nCols)
 2522.                   INTEGER, INTENT(IN   )        :: kbmax   (nCols)
 2523.                   REAL(KIND=r8)   , INTENT(IN   )        :: cap_max (nCols) 
 2524.                   REAL(KIND=r8)   , INTENT(IN   )        :: he_cup  (nCols, kMax)
 2525.                   REAL(KIND=r8)   , INTENT(IN   )        :: hes_cup (nCols, kMax)
 2526.                   REAL(KIND=r8)   , INTENT(IN   )        :: p_cup   (nCols, kMax)
 2527.                   REAL(KIND=r8)   , INTENT(IN   )        :: cap_inc
 2528.                   !
 2529.                   ! new
 2530.                   !
 2531.                   REAL(KIND=r8)                          :: plus
 2532.                   REAL(KIND=r8)                          :: pbcdif
 2533.                   INTEGER                       :: i
 2534.                   INTEGER :: left(iend-istart+1)
 2535.                   INTEGER :: nLeft
 2536.                   INTEGER :: nNewLeft
 2537.                   INTEGER :: toContinue(iend-istart+1)
 2538.                   INTEGER :: nToContinue
 2539.                   INTEGER :: cnt
 2540.                   !
 2541.                   ! determine the level of convective cloud base  - kbcon
 2542.                   !
 2543.                   nLeft = 0
 2544.  1----------<     DO i=istart,iend
 2545.  1                   IF(ierr(i) == 0 ) THEN
 2546.  1                      kbcon(i)=k22(i)
 2547.  1                      nLeft = nLeft + 1
 2548.  1                      left(nLeft) = i
 2549.  1                   ELSE
 2550.  1                      kbcon(i)=1
 2551.  1                   END IF
 2552.  1---------->     END DO
 2553.  1----------<     DO
 2554.  1                   IF (nLeft == 0) THEN
 2555.  1                      EXIT
 2556.  1                   ELSE
 2557.  1            
 2558.  1                      nNewLeft = 0
 2559.  1                      nToContinue = 0
 2560.  1                      !CDIR NODEP
 2561.  1 r4-------<           DO cnt = 1, nLeft
 2562.  1 r4                      i = left(cnt)
 2563.  1 r4                      IF(he_cup(i,k22(i)) <  hes_cup(i,kbcon(i))) THEN
 2564.  1 r4                         kbcon(i)=kbcon(i)+1
 2565.  1 r4                         IF(kbcon(i) >  kbmax(i)+2)THEN
 2566.  1 r4                            IF (iloop <  4) THEN
 2567.  1 r4                               ierr(i) =   3
 2568.  1 r4                            ELSE IF (iloop == 4) THEN
 2569.  1 r4                               ierr(i) = 997
 2570.  1 r4                            END IF
 2571.  1 r4                         ELSE
 2572.  1 r4                            nNewLeft = nNewLeft + 1
 2573.  1 r4                            left(nNewLeft) = i
 2574.  1 r4                         END IF
 2575.  1 r4                      ELSE
 2576.  1 r4                         nToContinue = nToContinue + 1
 2577.  1 r4                         toContinue(nToContinue) = i
 2578.  1 r4                      END IF
 2579.  1 r4------->           END DO
 2580.  1            
 2581.  1                      !CDIR NODEP
 2582.  1 r2-------<           DO cnt = 1, nToContinue
 2583.  1 r2                      i = toContinue(cnt)
 2584.  1 r2                      IF(kbcon(i)-k22(i) /= 1) THEN
 2585.  1 r2                         !
 2586.  1 r2                         ! cloud base pressure and max moist static energy pressure
 2587.  1 r2                         !
 2588.  1 r2                         ! i.e., the depth (in mb) of the layer of negative buoyancy                  
 2589.  1 r2                         !
 2590.  1 r2                         pbcdif=-p_cup(i,kbcon(i))+p_cup(i,k22(i))
 2591.  1 r2                         plus  =MAX(25.0_r8, cap_max(i)-float(iloop-1)*cap_inc)   !new
 2592.  1 r2                         IF(pbcdif > plus)THEN
 2593.  1 r2                            k22  (i)=k22(i)+1
 2594.  1 r2                            kbcon(i)=k22(i)
 2595.  1 r2                            nNewLeft = nNewLeft + 1
 2596.  1 r2                            left(nNewLeft) = i
 2597.  1 r2                         END IF
 2598.  1 r2                      END IF
 2599.  1 r2------->           END DO
 2600.  1            
 2601.  1                      nLeft = nNewLeft
 2602.  1            
 2603.  1                   END IF
 2604.  1---------->     END DO
 2605.                 END SUBROUTINE cup_kbcon
 2606.               
 2607.               
 2608.                 SUBROUTINE cup_up_he(k22       ,hkb       ,z_cup     ,cd        ,entr      , &
 2609.                      he_cup    ,hc        ,nCols     ,kMax      ,kbcon     , &
 2610.                      ierr      ,istart    ,iend      ,dby       ,he        , &
 2611.                      hes_cup)
 2612.               
 2613.                   IMPLICIT NONE
 2614.                   INTEGER, INTENT(IN   )                       :: nCols
 2615.                   INTEGER, INTENT(IN   )                       :: kMax
 2616.                   INTEGER, INTENT(IN   )                       :: istart
 2617.                   INTEGER, INTENT(IN   )                       :: iend
 2618.                   REAL(KIND=r8)   , INTENT(IN   )                       :: entr
 2619.                   INTEGER, INTENT(IN   )                       :: kbcon    (nCols)     
 2620.                   INTEGER, INTENT(IN   )                       :: ierr     (nCols)     
 2621.                   INTEGER, INTENT(IN   )                       :: k22      (nCols)     
 2622.                   REAL(KIND=r8)   , INTENT(OUT  )                       :: hkb      (nCols)     
 2623.                   REAL(KIND=r8)   , INTENT(IN   )                       :: he_cup   (nCols, kMax)
 2624.                   REAL(KIND=r8)   , INTENT(OUT  )                       :: hc       (nCols, kMax)
 2625.                   REAL(KIND=r8)   , INTENT(IN   )                       :: z_cup    (nCols, kMax)
 2626.                   REAL(KIND=r8)   , INTENT(IN   )                       :: cd       (nCols, kMax)
 2627.                   REAL(KIND=r8)   , INTENT(OUT  )                       :: dby      (nCols, kMax)
 2628.                   REAL(KIND=r8)   , INTENT(IN   )                       :: he       (nCols, kMax)
 2629.                   REAL(KIND=r8)   , INTENT(IN   )                       :: hes_cup  (nCols, kMax)
 2630.               
 2631.                   INTEGER                       :: i
 2632.                   INTEGER                       :: k
 2633.                   REAL(KIND=r8)                          :: dz
 2634.               !
 2635.                 ! hc = cloud moist static energy
 2636.                 ! hkb = moist static energy at originating level
 2637.                 ! he = moist static energy on model levels
 2638.                 ! he_cup = moist static energy on model cloud levels
 2639.                 ! hes_cup = saturation moist static energy on model cloud levels
 2640.                 ! dby = buoancy term
 2641.                 ! cd= detrainment function
 2642.                 ! z_cup = heights of model cloud levels
 2643.                 ! entr = entrainment rate
 2644.               
 2645.                   !
 2646.                   ! moist static energy inside cloud
 2647.                   !
 2648.  1----------<     DO i=istart,iend
 2649.  1                   IF(ierr(i) == 0)THEN
 2650.  1                      hkb(i)=he_cup(i,k22(i))
 2651.  1                   END IF
 2652.  1---------->     END DO
 2653.               
 2654.  1----------<     DO k=1,MAXVAL(kbcon)-1
 2655.  1 2--------<        DO i=istart,iend
 2656.  1 2                    IF( ierr(i) == 0 .AND. k < k22(i) )THEN
 2657.  1 2                       hc(i,k)=he_cup(i,k)
 2658.  1 2                       dby(i,k)=0.0_r8
 2659.  1 2                    END IF
 2660.  1 2                    IF(ierr(i) == 0 .AND. k >= k22(i)  .AND.k <= kbcon(i)-1)THEN
 2661.  1 2                       hc(i,k)=hkb(i)
 2662.  1 2                       dby(i,k)=0.0_r8
 2663.  1 2                    END IF
 2664.  1 2-------->        END DO
 2665.  1---------->     END DO
 2666.               
 2667.  1----------<     DO i=istart,iend
 2668.  1                   IF(ierr(i) == 0)THEN
 2669.  1                      hc (i,kbcon(i))= hkb(i)
 2670.  1                      dby(i,kbcon(i))= hkb(i)-hes_cup(i,kbcon(i))
 2671.  1                   END IF
 2672.  1---------->     END DO
 2673.               
 2674.  1----------<     DO k=MINVAL(kbcon),kMax-1
 2675.  1 2--------<        DO i=istart,iend
 2676.  1 2                    IF(k >= 2 .AND. k > kbcon(i).AND.ierr(i) == 0)THEN
 2677.  1 2                       dz=z_cup(i,k)-z_cup(i,k-1)
 2678.  1 2          
 2679.  1 2                       hc(i,k)=(hc(i,k-1)*(1.0_r8-0.5_r8*cd(i,k)*dz)+entr*          &
 2680.  1 2                            dz*he(i,k-1))/(1.0_r8+entr*dz-0.5_r8*cd(i,k)*dz)
 2681.  1 2          
 2682.  1 2                       dby(i,k)=hc(i,k)-hes_cup(i,k)
 2683.  1 2                    END IF
 2684.  1 2-------->        END DO
 2685.  1---------->     END DO
 2686.                   RETURN
 2687.                 END SUBROUTINE cup_up_he
 2688.               
 2689.               
 2690.                 SUBROUTINE cup_ktop( &
 2691.                      ilo      ,dby      ,kbcon    ,ktop     ,nCols     ,kMax     , &
 2692.                      istart   ,iend     ,ierr)
 2693.               
 2694.                   IMPLICIT NONE
 2695.                   INTEGER, INTENT(IN   ) :: nCols
 2696.                   INTEGER, INTENT(IN   ) :: kMax
 2697.                   INTEGER, INTENT(IN   ) :: istart
 2698.                   INTEGER, INTENT(IN   ) :: iend
 2699.                   INTEGER, INTENT(IN   ) :: ilo
 2700.                   INTEGER, INTENT(INOUT) :: ierr   (nCols)
 2701.                   INTEGER, INTENT(IN   ) :: kbcon  (nCols)
 2702.                   INTEGER, INTENT(OUT  ) :: ktop   (nCols)
 2703.                   REAL(KIND=r8)   , INTENT(INOUT) :: dby    (nCols,kMax)
 2704.               
 2705.                   INTEGER :: i
 2706.                   INTEGER :: k
 2707.               
 2708.  A---------<>     ktop (istart:iend)=1
 2709.  b----------<     DO k=MINVAL(kbcon)+1,kMax-2    
 2710.  b b--------<        DO i=istart,iend
 2711.  b b                    IF(ierr(i) == 0 .AND. k >= kbcon(i)+1 )THEN
 2712.  b b                       IF(dby(i,k) <= 0.0_r8 .AND. ktop(i) == 1) THEN
 2713.  b b                          ktop(i)=k-1
 2714.  b b                       END IF
 2715.  b b                    END IF
 2716.  b b-------->        END DO
 2717.  b---------->     END DO
 2718.               
 2719.  1----------<     DO i=istart,iend      
 2720.  1                   IF(ierr(i) == 0 .AND. ktop(i) == 1)THEN    
 2721.  1                      IF (ilo == 1) ierr(i)=5
 2722.  1                      IF (ilo == 2) ierr(i)=998
 2723.  1                   END IF
 2724.  1---------->     END DO
 2725.               
 2726.  b----------<     DO k=MINVAL(ktop)+1,kMax    
 2727.  b b--------<        DO i=istart,iend
 2728.  b b                    IF(ierr(i) == 0 .AND.k >= ktop(i)+1)THEN
 2729.  b b                       dby(i,k)=0.0_r8
 2730.  b b                    END IF
 2731.  b b-------->        END DO
 2732.  b---------->     END DO
 2733.                   RETURN
 2734.                 END SUBROUTINE cup_ktop
 2735.               
 2736.                 !*------
 2737.               
 2738.                 SUBROUTINE cup_up_nms( &
 2739.                      zu        ,z_cup     ,entr      ,cd        ,kbcon     , &
 2740.                      ktop      ,nCols     ,kMax      ,istart    ,iend      , &
 2741.                      ierr      ,k22                                          )
 2742.               
 2743.                   IMPLICIT NONE
 2744.                   INTEGER, INTENT(IN   ) :: nCols
 2745.                   INTEGER, INTENT(IN   ) :: kMax
 2746.                   INTEGER, INTENT(IN   ) :: istart
 2747.                   INTEGER, INTENT(IN   ) :: iend
 2748.                   REAL(KIND=r8)   , INTENT(IN   ) :: entr
 2749.                   REAL(KIND=r8)   , INTENT(OUT  ) :: zu   (nCols, kMax)
 2750.                   REAL(KIND=r8)   , INTENT(IN   ) :: z_cup(nCols, kMax)
 2751.                   REAL(KIND=r8)   , INTENT(IN   ) :: cd   (nCols, kMax)
 2752.                   INTEGER, INTENT(IN   ) :: kbcon(nCols  )
 2753.                   INTEGER, INTENT(IN   ) :: ktop (nCols  )
 2754.                   INTEGER, INTENT(IN   ) :: k22  (nCols  )
 2755.                   INTEGER, INTENT(IN   ) :: ierr (nCols  )
 2756.               
 2757.                   INTEGER                :: i
 2758.                   INTEGER                :: k
 2759.                   REAL(KIND=r8)                   :: dz
 2760.               
 2761.  b----------<     DO k=1,kMax
 2762.  b b--------<        DO i=istart,iend
 2763.  b b                    IF(ierr(i) == 0) THEN
 2764.  b b                       zu(i,k)=0.0_r8
 2765.  b b                    END IF
 2766.  b b-------->        END DO
 2767.  b---------->     END DO
 2768.               
 2769.  b----------<     DO k=MINVAL(k22),MAXVAL(kbcon)    
 2770.  b b--------<        DO i=istart,iend
 2771.  b b                    IF(ierr(i) == 0 .AND. k >= k22(i) .AND. k <= kbcon(i))THEN
 2772.  b b                       zu(i,k)=1.0_r8
 2773.  b b                    END IF
 2774.  b b-------->        END DO
 2775.  b---------->     END DO
 2776.               
 2777.  b----------<     DO k=MINVAL(kbcon)+1,MAXVAL(ktop)  
 2778.  b b--------<        DO i=istart,iend
 2779.  b b                    IF(ierr(i) == 0 .AND. k >= kbcon(i)+1 .AND. k <= ktop(i))THEN
 2780.  b b                       dz=z_cup(i,k)-z_cup(i,k-1)
 2781.  b b                       zu(i,k)=zu(i,k-1)*(1.0_r8+(entr-cd(i,k))*dz)
 2782.  b b                    END IF
 2783.  b b-------->        END DO
 2784.  b---------->     END DO
 2785.               
 2786.                   RETURN
 2787.                 END SUBROUTINE cup_up_nms
 2788.               
 2789.                 !*--------
 2790.               
 2791.                 SUBROUTINE cup_dd_nms(zd       ,z_cup     ,cdd       ,entr       ,jmin     , &
 2792.                      ierr     ,nCols     ,kMax       ,istart     ,iend     , &
 2793.                      itest    ,kdet      ,z1)
 2794.               
 2795.                   IMPLICIT NONE
 2796.                   INTEGER, INTENT(IN   ) :: nCols
 2797.                   INTEGER, INTENT(IN   ) :: kMax
 2798.                   INTEGER, INTENT(IN   ) :: istart
 2799.                   INTEGER, INTENT(IN   ) :: iend
 2800.                   INTEGER, INTENT(IN   ) :: itest
 2801.                   INTEGER, INTENT(IN   ) :: jmin   (nCols)
 2802.                   INTEGER, INTENT(IN   ) :: ierr   (nCols)
 2803.                   INTEGER, INTENT(IN   ) :: kdet   (nCols)
 2804.                   REAL(KIND=r8)   , INTENT(IN   ) :: entr
 2805.                   REAL(KIND=r8)   , INTENT(OUT  ) :: zd     (nCols,kMax)
 2806.                   REAL(KIND=r8)   , INTENT(IN   ) :: z_cup  (nCols,kMax)
 2807.                   REAL(KIND=r8)   , INTENT(OUT  ) :: cdd    (nCols,kMax)
 2808.                   REAL(KIND=r8)   , INTENT(IN   ) :: z1     (nCols    )
 2809.                   INTEGER                :: i
 2810.                   INTEGER                :: k
 2811.                   INTEGER                :: ki
 2812.                   REAL(KIND=r8)                   :: dz
 2813.                   REAL(KIND=r8)                   :: a
 2814.                   REAL(KIND=r8)                   :: perc
 2815.                   !
 2816.                 ! z_cup = height of cloud model level
 2817.                 ! z1 = terrain elevation
 2818.                 ! entr = downdraft entrainment rate
 2819.                 ! jmin = downdraft originating level
 2820.                 ! kdet = level above ground where downdraft start detraining
 2821.                 ! itest = flag to whether to calculate cdd
 2822.               
 2823.                   !
 2824.                   ! perc is the percentage of mass left when hitting the ground
 2825.                   !
 2826.                   !perc=0.2_r8
 2827.                   perc=0.03_r8       !it is ok - new.
 2828.  b----------<     DO k=1,kMax
 2829.  b b--------<        DO i=istart,iend
 2830.  b b                    IF(ierr(i) == 0) THEN
 2831.  b b                       zd(i,k)=0.0_r8
 2832.  b b                       IF(itest == 0)cdd(i,k)=0.0_r8
 2833.  b b                    END IF
 2834.  b b-------->        END DO
 2835.  b---------->     END DO
 2836.               
 2837.                   a=1.0_r8-perc
 2838.               
 2839.  1----------<     DO i=istart,iend
 2840.  1                   IF(ierr(i) == 0)THEN
 2841.  1                      zd(i,jmin(i))=1.0_r8
 2842.  1                   END IF
 2843.  1---------->     END DO
 2844.  b----------<     DO ki=MAXVAL(jmin)-1,1,-1
 2845.  b b--------<        DO i=istart,iend
 2846.  b b                    IF(ierr(i) == 0 .AND. ki <= jmin(i)-1 .AND. ki >= 1)THEN
 2847.  b b                       !
 2848.  b b                       ! integrate downward, specify detrainment(cdd)!
 2849.  b b                       !
 2850.  b b                       dz=z_cup(i,ki+1)-z_cup(i,ki)
 2851.  b b                       IF(ki <= kdet(i).AND.itest == 0)THEN
 2852.  b b                          cdd(i,ki)=entr+(1.0_r8- (a*(z_cup(i,ki)-z1(i))          &
 2853.  b b                               +perc*(z_cup(i,kdet(i))-z1(i)) )           &
 2854.  b b                               /(a*(z_cup(i,ki+1)-z1(i))                  &
 2855.  b b                               +perc*(z_cup(i,kdet(i))-z1(i))))/dz
 2856.  b b                       END IF
 2857.  b b                       zd(i,ki)=zd(i,ki+1)*(1.0_r8+(entr-cdd(i,ki))*dz)
 2858.  b b                       !
 2859.  b b                       !----------------------
 2860.  b b                       !
 2861.  b b                    END IF
 2862.  b b-------->        END DO
 2863.  b---------->     END DO
 2864.                   RETURN
 2865.                 END SUBROUTINE cup_dd_nms
 2866.               
 2867.                 !*------
 2868.               
 2869.                 SUBROUTINE cup_dd_he(hes_cup    ,hcd       ,z_cup     ,cdd        , &
 2870.                      entr       ,jmin      ,ierr      ,nCols      ,kMax    , &
 2871.                      istart     ,iend      ,he        ,dby     )
 2872.               
 2873.                   IMPLICIT NONE
 2874.                   INTEGER, INTENT(IN   ) :: nCols
 2875.                   INTEGER, INTENT(IN   ) :: kMax
 2876.                   INTEGER, INTENT(IN   ) :: istart
 2877.                   INTEGER, INTENT(IN   ) :: iend
 2878.                   REAL(KIND=r8)   , INTENT(IN   ) :: z_cup   (nCols,kMax)
 2879.                   REAL(KIND=r8)   , INTENT(IN   ) :: cdd     (nCols,kMax)
 2880.                   REAL(KIND=r8)   , INTENT(IN   ) :: he      (nCols,kMax)
 2881.                   REAL(KIND=r8)   , INTENT(OUT  ) :: dby     (nCols,kMax)
 2882.                   REAL(KIND=r8)   , INTENT(OUT  ) :: hcd     (nCols,kMax)
 2883.                   REAL(KIND=r8)   , INTENT(IN   ) :: hes_cup (nCols,kMax)
 2884.                   INTEGER, INTENT(IN   ) :: jmin    (nCols)
 2885.                   INTEGER, INTENT(IN   ) :: ierr    (nCols)
 2886.                   INTEGER                :: i
 2887.                   INTEGER                :: k
 2888.                   INTEGER                :: ki
 2889.                   REAL(KIND=r8)                   :: dz
 2890.                   REAL(KIND=r8)   , INTENT(IN   ) :: entr
 2891.                 !-------
 2892.                 ! hcd = downdraft moist static energy
 2893.                 ! he = moist static energy on model levels
 2894.                 ! he_cup = moist static energy on model cloud levels
 2895.                 ! hes_cup = saturation moist static energy on model cloud levels
 2896.                 ! dby = buoancy term
 2897.                 ! cdd= detrainment function
 2898.                 ! z_cup = heights of model cloud levels
 2899.                 ! entr = entrainment rate
 2900.                 ! zd   = downdraft normalized mass flux
 2901.               
 2902.               
 2903.               
 2904.  b----------<     DO k=2,kMax
 2905.  b b--------<        DO i=istart,iend
 2906.  b b A-----<>           dby(i,k)=0.0_r8
 2907.  b b                    IF(ierr(I) == 0)THEN
 2908.  b b                       hcd(i,k)=hes_cup(i,k)
 2909.  b b                    END IF
 2910.  b b-------->        END DO
 2911.  b---------->     END DO
 2912.               
 2913.  1----------<     DO i=istart,iend
 2914.  1                   IF(ierr(i) == 0)THEN
 2915.  1                      hcd(i,jmin(i)) = hes_cup(i,jmin(i))
 2916.  1                      dby(i,jmin(i)) = hcd    (i,jmin(i)) - hes_cup(i,jmin(i))
 2917.  1                   END IF
 2918.  1---------->     END DO
 2919.               
 2920.  1----------<     DO ki=MAXVAL(jmin)-1,1,-1
 2921.  1 2--------<        DO i=istart,iend
 2922.  1 2                    IF(ierr(i) == 0 .AND. ki <= jmin(i)-1 )THEN
 2923.  1 2                       dz        = z_cup(i,ki+1)-z_cup(i,ki)
 2924.  1 2                       hcd(i,ki) = (hcd(i,ki+1)*(1.0_r8-0.5_r8*cdd(i,ki)*dz)     &
 2925.  1 2                            + entr*dz*he(i,ki)  )                   &
 2926.  1 2                            / (1.0_r8+entr*dz-0.5_r8*cdd(i,ki)*dz)
 2927.  1 2                       dby(i,ki) = hcd(i,ki)-hes_cup(i,ki)
 2928.  1 2                    END IF
 2929.  1 2-------->        END DO
 2930.  1---------->     END DO
 2931.                   RETURN
 2932.                 END SUBROUTINE cup_dd_he
 2933.               
 2934.                 !*------
 2935.               
 2936.                 SUBROUTINE cup_dd_moisture( &
 2937.                      zd        ,hcd       ,hes_cup   ,qcd       , &
 2938.                      qes_cup    ,pwd       ,q_cup     ,z_cup     ,cdd       , &
 2939.                      entr       ,jmin      ,ierr      ,gamma_cup ,pwev      , &
 2940.                      nCols      ,kMax      ,istart    ,iend      ,bu        , &
 2941.                      qrcd       ,q         , &
 2942.                      iloop                                                    )
 2943.               
 2944.                   IMPLICIT NONE
 2945.                   INTEGER, INTENT(IN   ) :: nCols
 2946.                   INTEGER, INTENT(IN   ) :: kMax
 2947.                   INTEGER, INTENT(IN   ) :: istart
 2948.                   INTEGER, INTENT(IN   ) :: iend
 2949.                   INTEGER, INTENT(IN   ) :: iloop
 2950.                   REAL(KIND=r8)   , INTENT(IN   ) :: entr
 2951.                   INTEGER, INTENT(IN   ) :: jmin      (nCols     )
 2952.                   INTEGER, INTENT(INOUT) :: ierr      (nCols     )
 2953.                   REAL(KIND=r8)   , INTENT(OUT  ) :: bu        (nCols     )
 2954.                   REAL(KIND=r8)   , INTENT(OUT  ) :: pwev      (nCols     )
 2955.                   REAL(KIND=r8)   , INTENT(IN   ) :: zd        (nCols,kMax)
 2956.                   REAL(KIND=r8)   , INTENT(OUT  ) :: qcd       (nCols,kMax)
 2957.                   REAL(KIND=r8)   , INTENT(OUT  ) :: pwd       (nCols,kMax)
 2958.                   REAL(KIND=r8)   , INTENT(OUT  ) :: qrcd      (nCols,kMax)
 2959.                   REAL(KIND=r8)   , INTENT(IN   ) :: hes_cup   (nCols,kMax)
 2960.                   REAL(KIND=r8)   , INTENT(IN   ) :: hcd       (nCols,kMax)
 2961.                   REAL(KIND=r8)   , INTENT(IN   ) :: qes_cup   (nCols,kMax)
 2962.                   REAL(KIND=r8)   , INTENT(IN   ) :: q_cup     (nCols,kMax)
 2963.                   REAL(KIND=r8)   , INTENT(IN   ) :: z_cup     (nCols,kMax)
 2964.                   REAL(KIND=r8)   , INTENT(IN   ) :: cdd       (nCols,kMax)
 2965.                   REAL(KIND=r8)   , INTENT(IN   ) :: gamma_cup (nCols,kMax)
 2966.                   REAL(KIND=r8)   , INTENT(IN   ) :: q         (nCols,kMax)
 2967.               
 2968.                   INTEGER                :: i
 2969.                   INTEGER                :: k
 2970.                   INTEGER                :: ki
 2971.                   REAL(KIND=r8)                   :: dz
 2972.                   REAL(KIND=r8)                   :: dqeva
 2973.                   REAL(KIND=r8)                   :: dh
 2974.                 !------
 2975.                 ! cdd= detrainment function
 2976.                 ! q = environmental q on model levels
 2977.                 ! q_cup = environmental q on model cloud levels
 2978.                 ! qes_cup = saturation q on model cloud levels
 2979.                 ! hes_cup = saturation h on model cloud levels
 2980.                 ! hcd = h in model cloud
 2981.                 ! bu = buoancy term
 2982.                 ! zd = normalized downdraft mass flux
 2983.                 ! gamma_cup = gamma on model cloud levels
 2984.                 ! mentr_rate = entrainment rate
 2985.                 ! qcd = cloud q (including liquid water) after entrainment
 2986.                 ! qrch = saturation q in cloud
 2987.                 ! pwd = evaporate at that level
 2988.                 ! pwev = total normalized integrated evaoprate (I2)
 2989.                 ! entr= entrainment rate
 2990.               
 2991.               
 2992.  1----------<     DO i=istart,iend
 2993.  1                   IF(ierr(i) == 0) THEN
 2994.  1                      bu  (i) = 0.0_r8
 2995.  1                      pwev(i) = 0.0_r8
 2996.  1                   END IF
 2997.  1---------->     END DO
 2998.               
 2999.  b----------<     DO k=1,kMax
 3000.  b b--------<        DO i=istart,iend
 3001.  b b                    IF(ierr(i) == 0) THEN
 3002.  b b                       qcd (i,k) = 0.0_r8
 3003.  b b                       qrcd(i,k) = 0.0_r8
 3004.  b b                       pwd (i,k) = 0.0_r8
 3005.  b b                    END IF
 3006.  b b-------->        END DO
 3007.  b---------->     END DO
 3008.               
 3009.  1----------<     DO i=istart,iend
 3010.  1                   IF(ierr(i) == 0)THEN
 3011.  1                      k              = jmin(i)
 3012.  1                      dz             = z_cup(i,k+1)-z_cup(i,k)
 3013.  1                      qcd (i,k)      = q_cup(i,k)
 3014.  1                      qrcd(i,k)      = qes_cup(i,k)
 3015.  1                      pwd (i,jmin(i))= MIN(0.0_r8,qcd(i,k)-qrcd(i,k))
 3016.  1                      pwev(i)        = pwev(i)+pwd(i,jmin(i))
 3017.  1                      qcd (i,k)      = qes_cup(i,k)
 3018.  1                      dh             = hcd(i,k)-hes_cup(i,k)
 3019.  1                      bu(i)          = dz*dh
 3020.  1                   END IF
 3021.  1---------->     END DO
 3022.               
 3023.  1----------<     DO ki=MAXVAL(jmin)-1,1,-1
 3024.  1 2--------<        DO i=istart,iend
 3025.  1 2                    IF(ierr(i) == 0 .AND. ki <= jmin(i)-1)THEN
 3026.  1 2                       dz        = z_cup(i,ki+1)-z_cup(i,ki)
 3027.  1 2          
 3028.  1 2                       qcd(i,ki) = (qcd(i,ki+1)*(1.0_r8-0.5_r8*cdd(i,ki)*dz)     &
 3029.  1 2                                 + entr*dz*q(i,ki)   )                   &
 3030.  1 2                                 / (1.0_r8+entr*dz-0.5_r8*cdd(i,ki)*dz)
 3031.  1 2                       !
 3032.  1 2                       ! to be negatively buoyant, hcd should be smaller than hes!
 3033.  1 2                       !
 3034.  1 2                       dh         = hcd(i,ki)-hes_cup(i,ki)
 3035.  1 2                       bu  (i)    = bu(i)+dz*dh
 3036.  1 2                       qrcd(i,ki) = qes_cup(i,ki)+(1.0_r8/xl)*(gamma_cup(i,ki)           &
 3037.  1 2                                  / (1.0_r8+gamma_cup(i,ki)))*dh
 3038.  1 2                       dqeva      = qcd(i,ki)-qrcd(i,ki)
 3039.  1 2          
 3040.  1 2                       IF(dqeva >  0.0_r8) dqeva=0.0_r8
 3041.  1 2          
 3042.  1 2                       pwd (i,ki) = zd  (i,ki)*dqeva
 3043.  1 2                       qcd (i,ki) = qrcd(i,ki)
 3044.  1 2                       pwev(i)    = pwev(i)+pwd(i,ki)
 3045.  1 2                    END IF
 3046.  1 2-------->        END DO
 3047.  1---------->     END DO
 3048.               
 3049.  1----------<     DO i=istart,iend
 3050.  1                   IF(ierr(i) == 0)THEN
 3051.  1                      IF(bu(i) >= 0.0_r8 .AND. iloop == 1)THEN
 3052.  1                         ierr(i)=7
 3053.  1                      END IF
 3054.  1                   END IF
 3055.  1---------->     END DO
 3056.                   RETURN
 3057.                 END SUBROUTINE cup_dd_moisture
 3058.               
 3059.                 !*--------
 3060.               
 3061.                 SUBROUTINE cup_up_moisture( &
 3062.                      ierr       ,z_cup     ,qc        ,qrc        ,pw        , &
 3063.                      pwav       ,kbcon     ,ktop      ,nCols      ,kMax      , &
 3064.                      istart     ,iend      ,cd        ,dby        ,mentr_rate, &
 3065.                      q          ,gamma_cup ,zu        ,qes_cup    ,k22       , &
 3066.                      qe_cup                                                    )
 3067.               
 3068.                   IMPLICIT NONE
 3069.                   INTEGER, INTENT(IN   ) :: istart
 3070.                   INTEGER, INTENT(IN   ) :: iend
 3071.                   INTEGER, INTENT(IN   ) :: nCols
 3072.                   INTEGER, INTENT(IN   ) :: kMax
 3073.                   REAL(KIND=r8)   , INTENT(IN   ) :: mentr_rate
 3074.                   INTEGER, INTENT(IN   ) :: kbcon      (nCols)
 3075.                   INTEGER, INTENT(IN   ) :: ktop       (nCols)
 3076.                   INTEGER, INTENT(IN   ) :: ierr       (nCols)
 3077.                   INTEGER, INTENT(IN   ) :: k22        (nCols)
 3078.                   REAL(KIND=r8)   , INTENT(OUT  ) :: pwav       (nCols)     
 3079.                   REAL(KIND=r8)   , INTENT(IN   ) :: q          (nCols, kMax)
 3080.                   REAL(KIND=r8)   , INTENT(IN   ) :: zu         (nCols, kMax)
 3081.                   REAL(KIND=r8)   , INTENT(IN   ) :: gamma_cup  (nCols, kMax)
 3082.                   REAL(KIND=r8)   , INTENT(IN   ) :: qe_cup     (nCols, kMax)
 3083.                   REAL(KIND=r8)   , INTENT(INOUT) :: dby        (nCols, kMax)
 3084.                   REAL(KIND=r8)   , INTENT(IN   ) :: cd         (nCols, kMax)
 3085.                   REAL(KIND=r8)   , INTENT(IN   ) :: z_cup      (nCols, kMax)
 3086.                   REAL(KIND=r8)   , INTENT(IN   ) :: qes_cup    (nCols, kMax)
 3087.                   REAL(KIND=r8)   , INTENT(OUT  ) :: qc         (nCols, kMax)
 3088.                   REAL(KIND=r8)   , INTENT(OUT  ) :: qrc        (nCols, kMax)
 3089.                   REAL(KIND=r8)   , INTENT(OUT  ) :: pw         (nCols, kMax)
 3090.               
 3091.                   INTEGER                    :: i
 3092.                   INTEGER                    :: k
 3093.                   INTEGER                    :: IALL
 3094.                   REAL(KIND=r8)                       :: radius2
 3095.                   REAL(KIND=r8)                       :: dz
 3096.                   REAL(KIND=r8)                       :: qrch
 3097.                   REAL(KIND=r8)                       :: c0
 3098.               !---------
 3099.                 ! cd= detrainment function
 3100.                 ! q = environmental q on model levels
 3101.                 ! qe_cup = environmental q on model cloud levels
 3102.                 ! qes_cup = saturation q on model cloud levels
 3103.                 ! dby = buoancy term
 3104.                 ! cd= detrainment function
 3105.                 ! zu = normalized updraft mass flux
 3106.                 ! gamma_cup = gamma on model cloud levels
 3107.                 ! mentr_rate = entrainment rate
 3108.                 !
 3109.                 ! qc = cloud q (including liquid water) after entrainment
 3110.                 ! qrch = saturation q in cloud
 3111.                 ! qrc = liquid water content in cloud after rainout
 3112.                 ! pw = condensate that will fall out at that level
 3113.                 ! pwav = totan normalized integrated condensate (I1)
 3114.                 ! c0 = conversion rate (cloud to rain)
 3115.               
 3116.               
 3117.               
 3118.                   IALL=0
 3119.                   c0=0.002_r8
 3120.                   !
 3121.                   ! no precip for small clouds
 3122.                   !
 3123.                   IF(mentr_rate >  0.0_r8)THEN
 3124.                      radius2=0.2_r8/mentr_rate
 3125.                      IF(radius2 <  900.0_r8)c0=0
 3126.                   ENDIF
 3127.               
 3128.               
 3129.  1----------<     DO i=istart,iend
 3130.  1                   IF(ierr(i) == 0) THEN
 3131.  1                      pwav(i)=0.0_r8
 3132.  1                   END IF
 3133.  1---------->     END DO
 3134.               
 3135.  1----------<     DO k=1,kMax
 3136.  1 2--------<        DO i=istart,iend
 3137.  1 2                    IF(ierr(i) == 0) THEN
 3138.  1 2                       pw(i,k) =0.0_r8
 3139.  1 2                       !
 3140.  1 2                       !snf        qc(i,k) =qes_cup(i,k)
 3141.  1 2                       !
 3142.  1 2                       qc(i,k) =qe_cup(i,k)   !new
 3143.  1 2                       qrc(i,k)=0.0_r8
 3144.  1 2                    END IF
 3145.  1 2-------->        END DO
 3146.  1---------->     END DO
 3147.  b----------<     DO k=MINVAL(k22),MAXVAL(kbcon)-1
 3148.  b b--------<        DO i=istart,iend
 3149.  b b                    IF(ierr(i) == 0 .AND. k >= k22(i) .AND. k<= kbcon(i)-1)THEN
 3150.  b b                       qc(i,k)=qe_cup(i,k22(i))
 3151.  b b                    END IF
 3152.  b b-------->        END DO
 3153.  b---------->     END DO
 3154.               
 3155.                   !
 3156.               
 3157.  1----------<     DO  k=MINVAL(kbcon),MAXVAL(ktop)
 3158.  1 2--------<        DO  i=istart,iend
 3159.  1 2                    IF(ierr(i) == 0 .AND. k >= kbcon(i) .AND. k <= ktop(i) ) THEN
 3160.  1 2                       dz=z_cup(i,k)-z_cup(i,k-1)
 3161.  1 2                       !
 3162.  1 2                       ! 1. steady state plume equation, for what could
 3163.  1 2                       !    be in cloud without condensation
 3164.  1 2                       !
 3165.  1 2                       qc(i,k)=(qc(i,k-1)*(1.0_r8-0.5_r8*cd(i,k)*dz)+mentr_rate*       &
 3166.  1 2                            dz*q(i,k-1))/(1.0_r8+mentr_rate*dz-0.5_r8*cd(i,k)*dz)
 3167.  1 2                       !
 3168.  1 2                       !2. saturation  in cloud, this is what is allowed to be in it
 3169.  1 2                       !
 3170.  1 2                       qrch=qes_cup(i,k)+(1.0_r8/xl)*(gamma_cup(i,k)       &
 3171.  1 2                            /(1.0_r8+gamma_cup(i,k)))*dby(i,k)
 3172.  1 2                       !
 3173.  1 2                       ! liquid water content in cloud after rainout
 3174.  1 2                       !
 3175.  1 2                       qrc(i,k)=(qc(i,k)-qrch)/(1.0_r8+c0*dz)
 3176.  1 2                       IF(qrc(i,k) <  0.0_r8)THEN
 3177.  1 2                          qrc(i,k)=0.0_r8
 3178.  1 2                       END IF
 3179.  1 2                       !
 3180.  1 2                       ! 3.Condensation
 3181.  1 2                       !
 3182.  1 2                       pw(i,k)=c0*dz*qrc(i,k)*zu(i,k)
 3183.  1 2                       IF(IALL == 1)THEN
 3184.  1 2                          qrc(i,k)=0.0_r8
 3185.  1 2                          pw(i,k)=(qc(i,k)-qrch)*zu(i,k)
 3186.  1 2                          IF(pw(i,k) <  0.0_r8)pw(i,k)=0.0_r8
 3187.  1 2                       END IF
 3188.  1 2                       !
 3189.  1 2                       ! set next level
 3190.  1 2                       !
 3191.  1 2                       qc(i,k)=qrc(i,k)+qrch
 3192.  1 2                       !
 3193.  1 2                       ! integrated normalized ondensate
 3194.  1 2                       !
 3195.  1 2                       pwav(i)=pwav(i)+pw(i,k)
 3196.  1 2                    END IF
 3197.  1 2-------->        END DO
 3198.  1---------->     END DO
 3199.               
 3200.                   RETURN
 3201.                 END SUBROUTINE cup_up_moisture
 3202.               
 3203.                 !*---------- 
 3204.               
 3205.                 SUBROUTINE cup_up_aa0( &
 3206.                      aa0        ,z         ,zu        ,dby        ,gamma_cup , &
 3207.                      t_cup      ,kbcon     ,ktop      ,kMax       ,nCols     , &
 3208.                      istart     ,iend      ,ierr                              )
 3209.               
 3210.                   IMPLICIT NONE
 3211.                   INTEGER, INTENT(IN   ) :: nCols
 3212.                   INTEGER, INTENT(IN   ) :: kMax
 3213.                   INTEGER, INTENT(IN   ) :: istart
 3214.                   INTEGER, INTENT(IN   ) :: iend
 3215.                   INTEGER, INTENT(IN   ) :: kbcon     (nCols)     
 3216.                   INTEGER, INTENT(IN   ) :: ktop      (nCols)     
 3217.                   INTEGER, INTENT(IN   ) :: ierr      (nCols)     
 3218.                   REAL(KIND=r8)   , INTENT(INOUT) :: aa0       (nCols)     
 3219.                   REAL(KIND=r8)   , INTENT(IN   ) :: z         (nCols,kMax)
 3220.                   REAL(KIND=r8)   , INTENT(IN   ) :: zu        (nCols,kMax)
 3221.                   REAL(KIND=r8)   , INTENT(IN   ) :: gamma_cup (nCols,kMax)
 3222.                   REAL(KIND=r8)   , INTENT(IN   ) :: t_cup     (nCols,kMax)
 3223.                   REAL(KIND=r8)   , INTENT(IN   ) :: dby       (nCols,kMax)
 3224.               
 3225.                   REAL(KIND=r8)                         :: dz
 3226.                   REAL(KIND=r8)                         :: da
 3227.                   INTEGER                      :: i 
 3228.                   INTEGER                      :: k
 3229.               
 3230.               !
 3231.                 ! aa0 cloud work function
 3232.                 ! gamma_cup = gamma on model cloud levels
 3233.                 ! t_cup = temperature (Kelvin) on model cloud levels
 3234.                 ! dby = buoancy term
 3235.                 ! zu= normalized updraft mass flux
 3236.                 ! z = heights of model levels
 3237.                 ! ierr error value, maybe modified in this routine
 3238.                 !
 3239.               
 3240.               
 3241.  1----------<     DO i=istart,iend
 3242.  1                   IF(ierr(i) == 0) THEN
 3243.  1                      aa0(i)=0.0_r8
 3244.  1                   END IF
 3245.  1---------->     END DO
 3246.               
 3247.  1----------<     DO  k=2,kMax-1
 3248.  1 2--------<        DO  i=istart,iend
 3249.  1 2                    IF(ierr(i) == 0 .AND. k > kbcon(i) .AND. k <= ktop(i) ) THEN
 3250.  1 2                       dz=z(i,k)-z(i,k-1)
 3251.  1 2                       da=zu(i,k)*dz*(9.81_r8/(1004.0_r8*(   &
 3252.  1 2                            (t_cup(i,k)))))*dby(i,k-1)/ &
 3253.  1 2                            (1.0_r8+gamma_cup(i,k))
 3254.  1 2                       IF (k == ktop(i) .AND. da <= 0.0_r8) THEN
 3255.  1 2                          CYCLE
 3256.  1 2                       ELSE
 3257.  1 2                          aa0(i)=aa0(i)+da
 3258.  1 2                          IF(aa0(i) <  0.0_r8)aa0(i)=0.0_r8
 3259.  1 2                       END IF
 3260.  1 2                    END IF
 3261.  1 2-------->        END DO
 3262.  1---------->     END DO
 3263.                   RETURN
 3264.                 END SUBROUTINE cup_up_aa0
 3265.               
 3266.                 !*----------
 3267.               
 3268.                 SUBROUTINE cup_dd_edt(ierr      ,us        ,vs        ,z         ,ktop      , &
 3269.                      kbcon     ,edt       ,p         ,pwav      ,pwev      , &
 3270.                      nCols     ,kMax      ,istart    ,iend      ,edtmax    , &
 3271.                      edtmin    ,maxens2   ,edtc      ,vshear    ,sdp       , &
 3272.                      vws       ,mask      ,edtmax1,maxens22                        )
 3273.               
 3274.               
 3275.                   IMPLICIT NONE
 3276.                   INTEGER, INTENT(IN   ) :: nCols
 3277.                   INTEGER, INTENT(IN   ) :: kMax
 3278.                   INTEGER, INTENT(IN   ) :: istart
 3279.                   INTEGER, INTENT(IN   ) :: iend
 3280.                   INTEGER, INTENT(IN   ) :: maxens2,maxens22
 3281.                   REAL(KIND=r8)   , INTENT(IN   ) :: edtmax
 3282.                   REAL(KIND=r8)   , INTENT(IN   ) :: edtmin
 3283.                   INTEGER, INTENT(IN   ) :: ktop   (nCols)
 3284.                   INTEGER, INTENT(IN   ) :: kbcon  (nCols)
 3285.                   INTEGER, INTENT(IN   ) :: ierr   (nCols)
 3286.                   REAL(KIND=r8)   , INTENT(IN   ) :: us     (nCols, kMax)
 3287.                   REAL(KIND=r8)   , INTENT(IN   ) :: vs     (nCols, kMax)
 3288.                   REAL(KIND=r8)   , INTENT(IN   ) :: z      (nCols, kMax)
 3289.                   REAL(KIND=r8)   , INTENT(IN   ) :: p      (nCols, kMax)     
 3290.                   REAL(KIND=r8)   , INTENT(OUT  ) :: edt    (nCols     )
 3291.                   REAL(KIND=r8)   , INTENT(IN   ) :: pwav   (nCols     )
 3292.                   REAL(KIND=r8)   , INTENT(IN   ) :: pwev   (nCols     )
 3293.                   REAL(KIND=r8)   , INTENT(OUT  ) :: vshear (nCols     )
 3294.                   REAL(KIND=r8)   , INTENT(OUT  ) :: sdp    (nCols     )
 3295.                   REAL(KIND=r8)   , INTENT(OUT  ) :: vws    (nCols     )
 3296.                   REAL(KIND=r8)   , INTENT(OUT  ) :: edtc   (nCols, maxens2)                !new 
 3297.                   REAL(KIND=r8)   , INTENT(IN   ) :: edtmax1
 3298.                   INTEGER, INTENT(IN   ) :: mask   (nCols)    
 3299.               
 3300.                   REAL(KIND=r8)                         :: pefb
 3301.                   REAL(KIND=r8)                         :: prezk
 3302.                   REAL(KIND=r8)                         :: zkbc
 3303.                   REAL(KIND=r8)                         :: pef
 3304.                   REAL(KIND=r8)                         :: einc
 3305.                   REAL(KIND=r8)                         :: aa1
 3306.                   REAL(KIND=r8)                         :: aa2
 3307.                   INTEGER                      :: i
 3308.                   INTEGER                      :: kk
 3309.                   INTEGER                      :: k
 3310.                   !
 3311.                   ! determine downdraft strength in terms of windshear
 3312.                   ! calculate an average wind shear over the depth of the cloud
 3313.                   !
 3314.  1----------<     DO i=istart,iend
 3315.  1                   IF(ierr(i) == 0) THEN
 3316.  1                      edt   (i)=0.0_r8
 3317.  1                      vws   (i)=0.0_r8
 3318.  1                      sdp   (i)=0.0_r8
 3319.  1                      vshear(i)=0.0_r8
 3320.  1                   END IF
 3321.  1---------->     END DO
 3322.               
 3323.  1----------<     DO kk = 1,kMax-1
 3324.  1 2--------<        DO i=istart,iend
 3325.  1 2                    IF(ierr(i) == 0) THEN
 3326.  1 2                       IF(kk  <=  min0(ktop(i),kMax-1) .AND. kk  >=  kbcon(i)) THEN
 3327.  1 2                          aa1=ABS((us(i,kk+1)-us(i,kk))/(z(i,kk+1)-z(i,kk)))
 3328.  1 2                          aa2=ABS((vs(i,kk+1)-vs(i,kk))/(z(i,kk+1)-z(i,kk)))
 3329.  1 2                          vws(i) = vws(i)+(aa1+aa2)*(p(i,kk) - p(i,kk+1))
 3330.  1 2                          sdp(i) = sdp(i) + p(i,kk) - p(i,kk+1)
 3331.  1 2                       END IF
 3332.  1 2                       IF (kk  ==  kMax-1)vshear(i) = 1.0e3_r8 * vws(i) / sdp(i)
 3333.  1 2                    END IF
 3334.  1 2-------->        END DO
 3335.  1---------->     END DO
 3336.               
 3337.  1----------<     DO i=istart,iend
 3338.  1                   IF(ierr(i) == 0)THEN
 3339.  1                      pef=(1.591_r8-0.639_r8*vshear(i)+0.0953_r8*(vshear(i)**2)        &
 3340.  1                           -0.00496_r8*(vshear(i)**3))
 3341.  1                      !-------------------------------------------
 3342.  1                      !snf
 3343.  1                      IF(mask(i) == 1)THEN
 3344.  1                         IF(pef >  edtmax1)pef=edtmax1          
 3345.  1                      ELSE
 3346.  1                         IF(pef >  edtmax )pef=edtmax
 3347.  1                      END IF
 3348.  1                      !
 3349.  1                      !------------------
 3350.  1                      !
 3351.  1                      IF(pef <  edtmin)pef=edtmin
 3352.  1                      !
 3353.  1                      ! cloud base precip efficiency
 3354.  1                      !
 3355.  1                      zkbc=z(i,kbcon(i))*3.281e-3_r8
 3356.  1                      prezk=0.02_r8
 3357.  1                      IF(zkbc >  3.0_r8)THEN
 3358.  1                         prezk= 0.96729352_r8+zkbc*(-0.70034167_r8+zkbc*(0.162179896_r8+zkbc*(-  &
 3359.  1                              1.2569798e-2_r8+zkbc*(4.2772e-4_r8-zkbc*5.44e-6_r8))))
 3360.  1                      END IF
 3361.  1            
 3362.  1                      IF(zkbc >  25)THEN
 3363.  1                         prezk=2.4_r8
 3364.  1                      END IF
 3365.  1                      pefb=1.0_r8/(1.0_r8+prezk)
 3366.  1                      !
 3367.  1                      !          if(pefb >  edtmax)pefb=edtmax
 3368.  1                      !-------------------------------------------
 3369.  1                      !snf
 3370.  1                      IF(mask(i) == 1)THEN
 3371.  1                         IF(pefb >  edtmax1)pefb=edtmax1
 3372.  1                      ELSE
 3373.  1                         IF(pefb >  edtmax)pefb=edtmax
 3374.  1                      END IF
 3375.  1                      !------------------
 3376.  1            
 3377.  1                      IF(pefb <  edtmin)pefb=edtmin
 3378.  1                      edt(i)=1.0_r8-0.5_r8*(pefb+pef)
 3379.  1                      !
 3380.  1                      ! edt here is 1-precipeff
 3381.  1                      !
 3382.  1                   END IF
 3383.  1---------->     END DO
 3384.               
 3385.  b----------<     DO k=1,maxens22
 3386.  b b--------<        DO i=istart,iend
 3387.  b b                    IF(ierr(i) == 0)THEN
 3388.  b b                       einc      = edt(i) / float(maxens22+1    )
 3389.  b b                       edtc(i,k) = edt(i) - float(k)*einc
 3390.  b b                       !edtc(i,1) = edt(i)*0.75_r8
 3391.  b b                       !edtc(i,2) = edt(i)*0.50_r8
 3392.  b b          !snf-new     !edtc(i,3) =edt(i)*0.25_r8
 3393.  b b          ! forcando usar 0.25_r8 quando apenas 1 ensamble 
 3394.  b b          !        if(maxens22.eq.1)edtc(i,k) = edt(i)*0.25_r8
 3395.  b b                    END IF
 3396.  b b-------->        END DO
 3397.  b---------->     END DO
 3398.               
 3399.  b----------<     DO k=1,maxens22
 3400.  b br4------<        DO i=istart,iend
 3401.  b br4                  IF(ierr(i) == 0)THEN
 3402.  b br4                     edtc(i,k)=-edtc(i,k)*pwav(i)/pwev(i)
 3403.  b br4                     !
 3404.  b br4                     !             if(edtc(i,k) >  edtmax)edtc(i,k)=edtmax
 3405.  b br4                     !-------------------------------------------
 3406.  b br4                     !snf
 3407.  b br4                     IF(mask(i) == 1)THEN
 3408.  b br4                        IF(edtc(i,k) >  edtmax1)edtc(i,k)=edtmax1
 3409.  b br4                     ELSE
 3410.  b br4                        IF(edtc(i,k) >  edtmax )edtc(i,k)=edtmax
 3411.  b br4                     END IF
 3412.  b br4                     !------------------
 3413.  b br4                     IF(edtc(i,k) <  edtmin)edtc(i,k)=edtmin
 3414.  b br4                  END IF
 3415.  b br4------>        END DO
 3416.  b---------->     END DO
 3417.                   RETURN
 3418.                 END SUBROUTINE cup_dd_edt
 3419.               
 3420.                 !*--------
 3421.               
 3422.                 SUBROUTINE cup_dd_aa0( &
 3423.                      edt        ,ierr      ,aa0       ,jmin      ,gamma_cup , &
 3424.                      t_cup      ,hcd       ,hes_cup   ,z         ,nCols     , &
 3425.                      kMax       ,istart    ,iend      ,zd                     )
 3426.               
 3427.                   IMPLICIT NONE
 3428.                   INTEGER, INTENT(IN   ) :: nCols
 3429.                   INTEGER, INTENT(IN   ) :: kMax
 3430.                   INTEGER, INTENT(IN   ) :: istart
 3431.                   INTEGER, INTENT(IN   ) :: iend
 3432.                   INTEGER, INTENT(IN   ) :: jmin      (nCols)     
 3433.                   INTEGER, INTENT(IN   ) :: ierr      (nCols)     
 3434.                   REAL(KIND=r8)   , INTENT(IN   ) :: gamma_cup (nCols, kMax)
 3435.                   REAL(KIND=r8)   , INTENT(IN   ) :: t_cup     (nCols, kMax)
 3436.                   REAL(KIND=r8)   , INTENT(IN   ) :: z         (nCols, kMax)
 3437.                   REAL(KIND=r8)   , INTENT(IN   ) :: hes_cup   (nCols, kMax)
 3438.                   REAL(KIND=r8)   , INTENT(IN   ) :: zd        (nCols, kMax)
 3439.                   REAL(KIND=r8)   , INTENT(IN   ) :: hcd       (nCols, kMax)
 3440.                   REAL(KIND=r8)   , INTENT(IN   ) :: edt       (nCols     )
 3441.                   REAL(KIND=r8)   , INTENT(INOUT) :: aa0       (nCols     )
 3442.                   REAL(KIND=r8)    :: dz
 3443.                   INTEGER :: i
 3444.                   INTEGER :: k
 3445.                   INTEGER :: kk
 3446.               
 3447.               
 3448.  1----------<     DO k=1,kMax-1
 3449.  1 2--------<        DO i=istart,iend
 3450.  1 2                    IF(ierr(i) == 0 .AND. k <  jmin(i))THEN
 3451.  1 2                       kk=jmin(i)-k
 3452.  1 2                       !
 3453.  1 2                       ! original
 3454.  1 2                       !
 3455.  1 2                       dz=(z(i,kk)-z(i,kk+1))
 3456.  1 2                       aa0(i)=aa0(i)+zd(i,kk)*edt(i)*dz*(9.81_r8/(1004.0_r8*t_cup(i,kk)))  &
 3457.  1 2                            *((hcd(i,kk)-hes_cup(i,kk))/(1.0_r8+gamma_cup(i,kk)))
 3458.  1 2                    END IF
 3459.  1 2-------->        END DO
 3460.  1---------->     END DO
 3461.                   RETURN
 3462.                 END SUBROUTINE cup_dd_aa0
 3463.               
 3464.                 !*--------
 3465.               
 3466.                 SUBROUTINE cup_dellabot( &
 3467.                      he_cup    ,ierr       ,z_cup     ,p_cup     ,hcd         , &
 3468.                      edt       ,zd         ,cdd       ,he        ,nCols       , &
 3469.                      kMax       ,istart     ,iend      ,della    ,mentrd_rate)
 3470.               
 3471.                   IMPLICIT NONE
 3472.                   INTEGER, INTENT(IN   )                   :: nCols
 3473.                   INTEGER, INTENT(IN   )                   :: kMax
 3474.                   INTEGER, INTENT(IN   )                   :: istart
 3475.                   INTEGER, INTENT(IN   )                   :: iend
 3476.                   REAL(KIND=r8)   , INTENT(IN   )                   :: z_cup  (nCols,kMax)
 3477.                   REAL(KIND=r8)   , INTENT(IN   )                   :: p_cup  (nCols,kMax)
 3478.                   REAL(KIND=r8)   , INTENT(IN   )                   :: hcd    (nCols,kMax)
 3479.                   REAL(KIND=r8)   , INTENT(IN   )                   :: zd     (nCols,kMax)
 3480.                   REAL(KIND=r8)   , INTENT(IN   )                   :: cdd    (nCols,kMax)
 3481.                   REAL(KIND=r8)   , INTENT(IN   )                   :: he     (nCols,kMax)
 3482.                   REAL(KIND=r8)   , INTENT(OUT  )                   :: della  (nCols,kMax)
 3483.                   REAL(KIND=r8)   , INTENT(IN   )                   :: he_cup (nCols,kMax)
 3484.                   REAL(KIND=r8)   , INTENT(IN   )                   :: edt    (nCols)
 3485.                   INTEGER, INTENT(IN   )                   :: ierr   (nCols)
 3486.                   REAL(KIND=r8)   , INTENT(IN   )                   :: mentrd_rate
 3487.               
 3488.                   REAL(KIND=r8)                      :: detdo1
 3489.                   REAL(KIND=r8)                      :: detdo2
 3490.                   REAL(KIND=r8)                      :: entdo
 3491.                   REAL(KIND=r8)                      :: g
 3492.                   REAL(KIND=r8)                      :: dp
 3493.                   REAL(KIND=r8)                      :: dz
 3494.                   REAL(KIND=r8)                      :: subin
 3495.                   REAL(KIND=r8)                      :: detdo
 3496.                   INTEGER                   :: i
 3497.                   g=9.81_r8
 3498.  1----------<     DO i=istart,iend
 3499.  1                   della(i,1)=0.0_r8
 3500.  1                   IF(ierr(i) == 0) THEN
 3501.  1                      dz        =       z_cup(i,2)-z_cup(i,1)
 3502.  1                      dp        = 100.0_r8*(p_cup(i,1)-p_cup(i,2))
 3503.  1                      detdo1    = edt(i)*zd(i,2)*cdd(i,1)*dz
 3504.  1                      detdo2    = edt(i)*zd(i,1)
 3505.  1                      entdo     = edt(i)*zd(i,2)*mentrd_rate*dz
 3506.  1                      !snf
 3507.  1                      subin     =-edt(i)*zd(i,2)
 3508.  1                      detdo     = detdo1+detdo2-entdo+subin
 3509.  1                      della(i,1)= (  detdo1*0.5_r8*(hcd(i,1)+hcd(i,2))      &
 3510.  1                           + detdo2*    hcd(i,1)                   &
 3511.  1                           + subin *    he_cup(i,2)                &
 3512.  1                           - entdo *    he(i,1)    )*g/dp
 3513.  1                   END IF
 3514.  1---------->     END DO
 3515.                   RETURN
 3516.                 END SUBROUTINE cup_dellabot
ftn-5001 ftn: NOTE File = Cu_Grellens.f90, Line = 3516 
  Local variable "DETDO" is assigned a value but never used.

 3517.               
 3518.                 !*--------
 3519.               
 3520.                 SUBROUTINE cup_dellas( &
 3521.                      ierr       ,z_cup      ,p_cup     ,hcd       ,edt       , &
 3522.                      zd         ,cdd        ,he        ,nCols     ,kMax      , &
 3523.                      istart     ,iend       ,della     , &
 3524.                      mentrd_rate,zu         ,cd        ,hc        ,ktop      , &
 3525.                      k22        ,kbcon      ,mentr_rate,jmin      ,he_cup    , &
 3526.                      kdet       ,kpbl                                     )
 3527.               
 3528.                   IMPLICIT NONE
 3529.                   INTEGER, INTENT(IN   )           :: nCols
 3530.                   INTEGER, INTENT(IN   )           :: kMax
 3531.                   INTEGER, INTENT(IN   )           :: istart
 3532.                   INTEGER, INTENT(IN   )           :: iend
 3533.                   REAL(KIND=r8)   , INTENT(IN   )           :: z_cup (nCols,kMax)
 3534.                   REAL(KIND=r8)   , INTENT(IN   )           :: p_cup (nCols,kMax)
 3535.                   REAL(KIND=r8)   , INTENT(IN   )           :: hcd   (nCols,kMax)
 3536.                   REAL(KIND=r8)   , INTENT(IN   )           :: zd    (nCols,kMax)
 3537.                   REAL(KIND=r8)   , INTENT(IN   )           :: cdd   (nCols,kMax)
 3538.                   REAL(KIND=r8)   , INTENT(IN   )           :: he    (nCols,kMax)
 3539.                   REAL(KIND=r8)   , INTENT(OUT  )           :: della (nCols,kMax)
 3540.                   REAL(KIND=r8)   , INTENT(IN   )           :: hc    (nCols,kMax)
 3541.                   REAL(KIND=r8)   , INTENT(IN   )           :: cd    (nCols,kMax)
 3542.                   REAL(KIND=r8)   , INTENT(IN   )           :: zu    (nCols,kMax)
 3543.                   REAL(KIND=r8)   , INTENT(IN   )           :: he_cup(nCols,kMax)
 3544.                   INTEGER, INTENT(IN   )           :: kbcon (nCols )
 3545.                   INTEGER, INTENT(IN   )           :: ktop  (nCols )
 3546.                   INTEGER, INTENT(IN   )           :: k22   (nCols )
 3547.                   INTEGER, INTENT(IN   )           :: jmin  (nCols )
 3548.                   INTEGER, INTENT(IN   )           :: ierr  (nCols )
 3549.                   INTEGER, INTENT(IN   )           :: kdet  (nCols )
 3550.                   INTEGER, INTENT(IN   )           :: kpbl  (nCols )
 3551.                   REAL(KIND=r8)   , INTENT(IN   )           :: edt   (nCols )
 3552.                   REAL(KIND=r8)   , INTENT(IN   )           :: mentrd_rate
 3553.                   REAL(KIND=r8)   , INTENT(IN   )           :: mentr_rate
 3554.               
 3555.                   REAL(KIND=r8)                        :: entdo
 3556.                   REAL(KIND=r8)                        :: g
 3557.                   REAL(KIND=r8)                        :: dp
 3558.                   REAL(KIND=r8)                        :: dz
 3559.                   REAL(KIND=r8)                        :: subin
 3560.                   REAL(KIND=r8)                        :: detdo
 3561.                   REAL(KIND=r8)                        :: entup
 3562.                   REAL(KIND=r8)                        :: detup
 3563.                   REAL(KIND=r8)                        :: subdown
 3564.                   REAL(KIND=r8)                        :: entdoj
 3565.                   REAL(KIND=r8)                        :: entupk
 3566.                   REAL(KIND=r8)                        :: detupk
 3567.                   REAL(KIND=r8)                        :: totmas
 3568.                   INTEGER                     :: ier  (nCols)
 3569.                   INTEGER                     :: i
 3570.                   INTEGER                     :: k
 3571.               
 3572.                   g=9.81_r8
 3573.  A---------<>     ier=0
 3574.  1----------<     DO k=2,kMax
 3575.  1 A--------<        DO i=istart,iend
 3576.  1 A                    della(i,k)=0.0_r8
 3577.  1 A-------->        END DO
 3578.  1---------->     END DO
 3579.               
 3580.  1----------<     DO k=2,MAXVAL(ktop)
 3581.  1 2--------<        DO i=istart,iend
 3582.  1 2                    IF(ierr(i) == 0 .AND. k <= ktop(i) ) THEN 
 3583.  1 2                       !
 3584.  1 2                       ! specify detrainment of downdraft, has to be consistent
 3585.  1 2                       ! with zd calculations in soundd
 3586.  1 2                       !
 3587.  1 2                       dz    = z_cup(i,k+1)-z_cup(i,k)
 3588.  1 2                       detdo = edt(i)*cdd(i,k)   *dz*zd(i,k+1)
 3589.  1 2                       entdo = edt(i)*mentrd_rate*dz*zd(i,k+1)
 3590.  1 2                       subin = zu(i,k+1)-zd(i,k+1)*edt(i)
 3591.  1 2                       entup = 0.0_r8
 3592.  1 2                       detup = 0.0_r8
 3593.  1 2                       subdown = (zu(i,k)-zd(i,k)*edt(i))                 !new
 3594.  1 2                       entdoj  = 0.0_r8
 3595.  1 2                       entupk  = 0.0_r8
 3596.  1 2                       detupk  = 0.0_r8
 3597.  1 2                       !
 3598.  1 2                       !         if(k >= kbcon(i))entup=mentr_rate*dz*zu(i,k)     !old
 3599.  1 2                       !         subdown=(zu(i,k)-zd(i,k)*edt(i))                 !old
 3600.  1 2                       !
 3601.  1 2                       IF(k >= kbcon(i) .AND. k <  ktop(i))THEN
 3602.  1 2                          entup = mentr_rate*dz*zu(i,k)
 3603.  1 2                          detup = cd(i,k+1) *dz*zu(i,k)
 3604.  1 2                       END IF
 3605.  1 2          
 3606.  1 2                       IF(k == jmin(i))THEN
 3607.  1 2                          entdoj  =edt(i)*zd(i,k)
 3608.  1 2                       END IF
 3609.  1 2                       !
 3610.  1 2                       !         if(k == kpbl(i)-1)then                           !old
 3611.  1 2                       !
 3612.  1 2                       IF(k == k22(i)-1)THEN                            !new
 3613.  1 2                          entupk  = zu(i,kpbl(i))
 3614.  1 2                       END IF
 3615.  1 2          
 3616.  1 2                       IF(k >  kdet(i))THEN
 3617.  1 2                          detdo   = 0.0_r8
 3618.  1 2                       END IF
 3619.  1 2                       !
 3620.  1 2                       !         if(k == ktop(i)-1)then                          !old
 3621.  1 2                       !
 3622.  1 2                       IF(k == ktop(i)-0)THEN                          !new
 3623.  1 2                          detupk  = zu(i,ktop(i))
 3624.  1 2                          subin   = 0.0_r8
 3625.  1 2                       END IF
 3626.  1 2                       IF(k <  kbcon(i))THEN
 3627.  1 2                          detup   = 0.0_r8
 3628.  1 2                       END IF
 3629.  1 2                       !
 3630.  1 2                       !changed due to subsidence and entrainment
 3631.  1 2                       !
 3632.  1 2                       totmas=subin-subdown+detup-entup-entdo+                       &
 3633.  1 2                            detdo-entupk-entdoj+detupk
 3634.  1 2          
 3635.  1 2                       IF(ABS(totmas) >  1.e-6_r8)THEN                  !test new
 3636.  1 2                          ier(i)=1
 3637.  1 2                       END IF
 3638.  1 2                       !--
 3639.  1 2                       dp =  100.0_r8*( p_cup(i,k)-p_cup(i,k+1) )
 3640.  1 2                       della(i,k)=(                                                  &
 3641.  1 2                            subin  * he_cup(i,k+1)                                 &
 3642.  1 2                            - subdown* he_cup(i,k  )                                 &
 3643.  1 2                            + detup  * 0.5_r8*( hc(i,k+1)+ hc(i,k))                     &
 3644.  1 2                            + detdo  * 0.5_r8*(hcd(i,k+1)+hcd(i,k))                     &
 3645.  1 2                            - entup  * he    (i,k)                                       &
 3646.  1 2                            - entdo  * he    (i,k)                                       &
 3647.  1 2                            - entupk * he_cup(i,k22(i))                              &
 3648.  1 2                            - entdoj * he_cup(i,jmin(i))                             &
 3649.  1 2                            + detupk * hc(i,ktop(i))                                 &
 3650.  1 2                            )*g/dp
 3651.  1 2                    END IF
 3652.  1 2-------->        END DO
 3653.  1---------->     END DO
 3654.                   IF (ANY(ier /=0)) THEN
 3655.                      WRITE (0, '( " some ier /= 0; will stop")')
 3656.                      STOP "** ERROR AT cup_dellas **"
 3657.                   END IF
 3658.                   RETURN
 3659.                 END SUBROUTINE cup_dellas
 3660.               
 3661.                 !*------
 3662.               
 3663.                 SUBROUTINE cup_forcing_ens_16( &
 3664.                      aa0       ,aa1       ,xaa0      ,mbdt      ,dtime     , &
 3665.                      xmb       ,ierr      ,nCols     ,kMax      ,istart    , &
 3666.                      iend      ,xf        ,name      ,mask      ,maxens    , &
 3667.                      iens      ,iedt      ,maxens3   ,mconv     , &
 3668.                      omeg      ,k22       ,pr_ens    ,edt       ,kbcon     , &
 3669.                      ensdim    ,massfln   ,massfld   ,xff_ens3  ,xk        , &
 3670.                      p_cup     ,ktop      ,ierr2     ,ierr3     ,grepar1   , &
 3671.                      xfmax,maxens22       )
 3672.               
 3673.                   IMPLICIT NONE
 3674.                   CHARACTER (LEN=*), INTENT(IN) ::  name
 3675.                   INTEGER, INTENT(IN)    :: istart
 3676.                   INTEGER, INTENT(IN)    :: iend
 3677.                   INTEGER, INTENT(IN)    :: nCols
 3678.                   INTEGER, INTENT(IN)    :: kMax
 3679.                   INTEGER, INTENT(IN)    :: maxens
 3680.                   INTEGER, INTENT(IN)    :: maxens3
 3681.                   INTEGER, INTENT(IN)    :: ensdim
 3682.                   INTEGER, INTENT(IN)    :: iens
 3683.                   INTEGER, INTENT(IN)    :: iedt
 3684.                   INTEGER, INTENT(IN)    :: maxens22
 3685.                   INTEGER, INTENT(IN)    :: grepar1
 3686.                   INTEGER, INTENT(IN)    :: mask      (nCols)
 3687.                   INTEGER, INTENT(IN)    :: k22       (nCols)
 3688.                   INTEGER, INTENT(IN)    :: kbcon     (nCols)
 3689.                   INTEGER, INTENT(INOUT) :: ierr      (nCols)
 3690.                   INTEGER, INTENT(IN)    :: ierr2     (nCols)
 3691.                   INTEGER, INTENT(IN)    :: ierr3     (nCols)
 3692.                   REAL(KIND=r8)   , INTENT(INOUT) :: aa0       (nCols)       
 3693.                   REAL(KIND=r8)   , INTENT(IN)    :: aa1       (nCols)       
 3694.                   REAL(KIND=r8)   , INTENT(OUT)   :: xmb       (nCols)       
 3695.                   REAL(KIND=r8)   , INTENT(IN)    :: edt       (nCols)       
 3696.                   REAL(KIND=r8)   , INTENT(IN)    :: mconv     (nCols)       
 3697.                   REAL(KIND=r8)   , INTENT(IN)    :: mbdt        
 3698.                   REAL(KIND=r8)   , INTENT(OUT)   :: xk        (nCols,maxens )   
 3699.                   REAL(KIND=r8)   , INTENT(OUT)   :: xff_ens3  (nCols,maxens3)   
 3700.                   REAL(KIND=r8)   , INTENT(IN)    :: omeg      (nCols,kMax)   
 3701.                   REAL(KIND=r8)   , INTENT(IN)    :: xaa0      (nCols,maxens)
 3702.                   REAL(KIND=r8)   , INTENT(OUT)   :: xf        (nCols,ensdim)
 3703.                   REAL(KIND=r8)   , INTENT(IN)    :: pr_ens    (nCols,ensdim)
 3704.                   REAL(KIND=r8)   , INTENT(OUT)   :: massfln   (nCols,ensdim)
 3705.                   INTEGER, INTENT(IN)    :: ktop      (nCols)    
 3706.                   REAL(KIND=r8)   , INTENT(IN)    :: p_cup     (nCols,kMax)
 3707.                   REAL(KIND=r8)   , INTENT(IN)    :: xfmax
 3708.                   REAL(KIND=r8)   , INTENT(INOUT) :: massfld
 3709.                   REAL(KIND=r8)   , INTENT(IN)    :: dtime
 3710.               
 3711.                   !
 3712.                   ! new
 3713.                   !
 3714.               
 3715.                   !
 3716.                   !--
 3717.                   !
 3718.                   REAL(KIND=r8)                     :: xomg(nCols) 
 3719.                   REAL(KIND=r8)                     :: xff0(nCols) 
 3720.                   INTEGER                  :: nens
 3721.                   INTEGER                  :: n
 3722.                   INTEGER                  :: nens3
 3723.                   INTEGER                  :: iresult
 3724.                   INTEGER                  :: iresultd
 3725.                   INTEGER                  :: iresulte
 3726.                   INTEGER                  :: i
 3727.                   INTEGER                  :: k
 3728.                   INTEGER                  :: nall(nCols,maxens)
 3729.                   REAL(KIND=r8)                     :: xff_max
 3730.                   !
 3731.                   !------ ensemble 3 dimension = 16
 3732.                   !
 3733.                   REAL(KIND=r8)    :: a1   
 3734.                   INTEGER :: kclim(nCols) 
 3735.               
 3736.                   REAL(KIND=r8)    :: aclim1
 3737.                   REAL(KIND=r8)    :: aclim2
 3738.                   REAL(KIND=r8)    :: aclim3
 3739.                   REAL(KIND=r8)    :: aclim4
 3740.                   LOGICAL :: teste2(nCols,maxens)
 3741.                   LOGICAL :: teste3(nCols,maxens)
 3742.               
 3743.               !   
 3744.               !
 3745.                 ! ierr error value, maybe modified in this routine
 3746.                 ! pr_ens = precipitation ensemble
 3747.                 ! xf_ens = mass flux ensembles
 3748.                 ! massfln = downdraft mass flux ensembles used in next timestep
 3749.                 ! omeg = omega from large scale model
 3750.                 ! mconv = moisture convergence from large scale model
 3751.                 ! zd      = downdraft normalized mass flux
 3752.                 ! zu      = updraft normalized mass flux
 3753.                 ! aa0     = cloud work function without forcing effects
 3754.                 ! aa1     = cloud work function with forcing effects
 3755.                 ! xaa0    = cloud work function with cloud effects (ensemble dependent)
 3756.                 ! edt     = epsilon
 3757.                 ! dir     = "storm motion"
 3758.                 ! mbdt    = arbitrary numerical parameter
 3759.                 ! dtime   = dt over which forcing is applied
 3760.                 ! iact_gr_old = flag to tell where convection was active
 3761.                 ! kbcon       = LFC of parcel from k22
 3762.                 ! k22         = updraft originating level
 3763.                 ! icoic       = flag if only want one closure (usually set to zero!)
 3764.                 ! name        = deep or shallow convection flag
 3765.               
 3766.               
 3767.                   IF(name == 'deeps' ) THEN 
 3768.                      !++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 3769.                      !----------
 3770.                      ! below new
 3771.                      !-----------
 3772.                      ! dded for ensemble 3 with dimension = 16
 3773.                      !
 3774.  A---------<>        kclim(istart:iend)=0
 3775.  b----------<        DO k=mkxcrt,1,-1
 3776.  b b--------<           DO i=istart,iend
 3777.  b b                       IF(ierr(i) == 0)THEN
 3778.  b b                          IF(p_cup(i,ktop(i)) < pcrit(k) .AND. kclim(i)==0)THEN
 3779.  b b                             kclim(i)=k
 3780.  b b                          END IF
 3781.  b b                          IF(p_cup(i,ktop(i)) > pcrit(1)  .AND. kclim(i)==0)kclim(i)=1
 3782.  b b                       END IF
 3783.  b b-------->           END DO
 3784.  b---------->        END DO
 3785.                      !
 3786.                      !--- large scale forcing
 3787.                      !
 3788.  1----------<        DO i=istart,iend
 3789.  1 A-------<>           xmb(i)=0.0_r8
 3790.  1                      xomg(i) = -omeg(i,1)/9.81_r8
 3791.  1                      IF(ierr(i) > 995)THEN
 3792.  1                         aa0 (i)=0.0_r8
 3793.  1                         ierr(i)=0
 3794.  1                      END IF
 3795.  1---------->        END DO
 3796.               
 3797.  b----------<        DO k=2,MAXVAL(kbcon)
 3798.  b b--------<           DO i=istart,iend
 3799.  b b                       IF(ierr(i) == 0 .AND. k <= kbcon(i)-1)THEN
 3800.  b b                          IF(-omeg(i,k)/9.81_r8 > -omeg(i,1)/9.81_r8) THEN
 3801.  b b                             xomg(i) = -omeg(i,k)/9.81_r8
 3802.  b b                          END IF
 3803.  b b                       END IF
 3804.  b b-------->           END DO
 3805.  b---------->        END DO
 3806.               
 3807.               
 3808.  1----------<        DO i=istart,iend
 3809.  1                      IF(ierr(i) ==  0 )THEN
 3810.  1                         !
 3811.  1                         ! treatment different for this closure
 3812.  1                         !
 3813.  1                         !
 3814.  1                         !
 3815.  1                         !          grell scheme closure
 3816.  1                         !---------
 3817.  1                         !  GRE alone is better than others in GCM
 3818.  1                         !----------
 3819.  1                         xff0    (i)  =       (aa1(i)-aa0(i))/dtime
 3820.  1                         xff_ens3(i,1)=       (aa1(i)-aa0(i))/dtime
 3821.  1                         xff_ens3(i,2)=0.9_r8 * ((aa1(i)-aa0(i))/dtime) 
 3822.  1                         xff_ens3(i,3)=1.1_r8 * ((aa1(i)-aa0(i))/dtime)
 3823.  1                         !
 3824.  1                         !          omeg is in bar/s, mconv done with omeg in Pa/s
 3825.  1                         !
 3826.  1                         !           more like brown (1979), or frank-cohen (199?)
 3827.  1                         !---------
 3828.  1                         ! all omegas are very bad in GCM 
 3829.  1                         !  F4 is too bad 
 3830.  1                         !--------- 
 3831.  1                         !
 3832.  1                         xff_ens3(i,4)=     -omeg(i,k22(i))/9.81_r8
 3833.  1                         xff_ens3(i,5)=     -omeg(i,kbcon(i))/9.81_r8
 3834.  1                         xff_ens3(i,6)=      xomg(i)               !new
 3835.  1                         !
 3836.  1                         ! more like Krishnamurti et al.
 3837.  1                         ! for different betas 
 3838.  1                         !  beta=1 is found better than others in GCM
 3839.  1                         !  all betas are beta=1.0_r8
 3840.  1                         !--------
 3841.  1                         !
 3842.  1                         xff_ens3(i,7)=mconv(i)
 3843.  1                         xff_ens3(i,8)=mconv(i)
 3844.  1                         xff_ens3(i,9)=mconv(i)
 3845.  1                         !
 3846.  1                         ! more like Fritsch Chappel or Kain Fritsch (plus triggers)
 3847.  1                         ! here it was tested different DTs
 3848.  1                         !--------
 3849.  1                         !
 3850.  1                         xff_ens3(i,10)=aa1(i)/(60.0_r8*20.0_r8)
 3851.  1                         xff_ens3(i,11)=aa1(i)/(60.0_r8*45.0_r8)
 3852.  1                         xff_ens3(i,12)=aa1(i)/(60.0_r8*60.0_r8)
 3853.  1                         !
 3854.  1                         !-------------
 3855.  1                         !new below
 3856.  1                         !---------
 3857.  1                         !--- More original Arakawa-Schubert (climatologic value of aa0)
 3858.  1                         !
 3859.  1                         k= MAX(kclim(i)-1,1)
 3860.  1                         aclim1=- dec_fudge*acrit (kclim(i))*1.0e3_r8
 3861.  1                         aclim2=- dec_fudge*acrit (k)       *1.0e3_r8
 3862.  1                         aclim3=- dec_fudge*acritt(kclim(i))*1.0e3_r8
 3863.  1                         aclim4=- dec_fudge*acritt(k)       *1.0e3_r8
 3864.  1            
 3865.  1                         xff_ens3(i,13)=MAX(0.0_r8,(AA1(I)-aclim1)/dtime)
 3866.  1                         xff_ens3(i,14)=MAX(0.0_r8,(AA1(I)-aclim2)/dtime)
 3867.  1                         xff_ens3(i,15)=MAX(0.0_r8,(AA1(I)-aclim3)/dtime)
 3868.  1                         xff_ens3(i,16)=MAX(0.0_r8,(AA1(I)-aclim4)/dtime)
 3869.  1                         xff_ens3(i,14)=xff_ens3(i,13)
 3870.  1                      END IF
 3871.  1---------->        END DO
 3872.               
 3873.  b----------<        DO nens=1,maxens
 3874.  b b--------<           DO   i=istart,iend
 3875.  b b                       IF(ierr(i) == 0)THEN
 3876.  b b                          xk(i,nens)=(xaa0(i,nens)-aa1(i))/mbdt
 3877.  b b                          IF(xk(i,nens) <= 0 .AND. xk(i,nens) > -1.e-6_r8)xk(i,nens)=-1.e-6_r8
 3878.  b b                          IF(xk(i,nens) >  0 .AND. xk(i,nens) <  1.e-6_r8)xk(i,nens)= 1.e-6_r8
 3879.  b b                          nall(i,nens)=(iens-1)*maxens3*maxens*maxens22       &
 3880.  b b                                      +(iedt-1)*maxens3*maxens               &
 3881.  b b                                      +(nens-1)*maxens3
 3882.  b b                       END IF
 3883.  b b-------->           END DO
 3884.  b---------->        END DO
 3885.                      !
 3886.                      !  add up all ensembles
 3887.                      !
 3888.                      !*********************************************************************35
 3889.                      !-----------------------------------------------
 3890.                      ! observe the mass flux calculation:
 3891.                      !-----------------------------------------------!
 3892.                      ! ne   |     ierr     | mass flux               !
 3893.                      ! 1    |     ierr =0  |  mf1 = xff_ens3/xk (ne) !
 3894.                      ! 1    |     ierr >0  |  mf1 =  0               !
 3895.                      ! 2    |     ierr2=0  |  mf2 = mf1              !
 3896.                      ! 2    |     ierr2>0  |  mf2 =  0               !
 3897.                      ! 3    |     ierr3=0  |  mf3 = mf1              !
 3898.                      ! 3    |     ierr3>0  |  mf3 =  0               !
 3899.                      ! 
 3900.                      !
 3901.                      ! xk(ne) is the same for any 'ne'.    
 3902.                      !
 3903.                      ! if ierr2 > 0 (convection was not permited for that cap_max)
 3904.                      ! then equal to zero the mass flux for the second member of the ensemble (maxens)
 3905.                      !
 3906.  A---------<>        teste2=.TRUE.
 3907.  1----------<        DO nens3=1,maxens3
 3908.  1 2--------<           DO   i=istart,iend
 3909.  1 2                       IF(ierr(i) == 0 .AND. ierr2(i) > 0)THEN
 3910.  1 2                          xf     (i,nall(i,2)+nens3)=0.0_r8
 3911.  1 2                          massfln(i,nall(i,2)+nens3)=0.0_r8
 3912.  1 2                          teste2(i,2)=.FALSE.
 3913.  1 2                       END IF
 3914.  1 2-------->           END DO
 3915.  1---------->        END DO
 3916.               
 3917.  A---------<>        teste3=.TRUE.
 3918.  1----------<        DO nens3=1,maxens3
 3919.  1 2--------<           DO   i=istart,iend
 3920.  1 2                       IF(ierr(i) == 0 .AND. ierr3(i) > 0)THEN
 3921.  1 2                          xf(i,nall(i,3)+nens3)=0.0_r8
 3922.  1 2                          massfln(i,nall(i,3)+nens3)=0.0_r8
 3923.  1 2                          teste3(i,3)=.FALSE.
 3924.  1 2                       END IF
 3925.  1 2-------->           END DO
 3926.  1---------->        END DO
 3927.               
 3928.  1----------<        DO nens=1,maxens
 3929.  1 2--------<           DO i=istart,iend
 3930.  1 2                       IF(ierr(i) == 0 .AND. teste2(i,nens) .AND. teste3(i,nens) ) THEN
 3931.  1 2                          !
 3932.  1 2                          !---------------------------------------------------
 3933.  1 2                          !! for every xk, we have maxens3 xffs,
 3934.  1 2                          !! iens is from outermost ensemble (most expensive!
 3935.  1 2                          !! iedt (maxens2 belongs to it)
 3936.  1 2                          !! is from second, next outermost, not so expensive
 3937.  1 2                          !! so, for every outermost loop, we have maxens*maxens2*3
 3938.  1 2                          !! ensembles!!! nall would be 0, if everything is on first
 3939.  1 2                          !! loop index, then nens would start counting, then iedt, then iensi...
 3940.  1 2                          !------------------------------------------------
 3941.  1 2                          !
 3942.  1 2                          iresultd=0
 3943.  1 2                          iresulte=0
 3944.  1 2                          !
 3945.  1 2                          ! check for upwind convection
 3946.  1 2                          !
 3947.  1 2                          iresult=0
 3948.  1 2                          massfld=0.0_r8
 3949.  1 2          
 3950.  1 2                          IF(xk(i,nens) <  0 .AND. xff0(i) >  0.0_r8)iresultd=1
 3951.  1 2                          iresulte=MAX(iresult,iresultd)
 3952.  1 2                          IF(iresulte == 1)THEN
 3953.  1 2                             !
 3954.  1 2                             !  snf--------
 3955.  1 2                             !  xff_max=0.0_r8, 0.01_r8 0.05_r8 0.075_r8 0.10_r8
 3956.  1 2                             !  xff_max=0.05_r8     !!land good
 3957.  1 2                             !  xff_max=0.10_r8     !!ocean good
 3958.  1 2                             !
 3959.  1 2                             xff_max=0.05_r8
 3960.  1 2                             IF(mask(i) == 1)xff_max=xfmax    ! if ocean, copy value passed to subroutine (0.10_r8)   
 3961.  1 2                             !
 3962.  1 2                             !------------
 3963.  1 2                             ! xff_max=0.0_r8     original from Grell old1..increase preci over ITZ and Amazon
 3964.  1 2                             ! xff_max=0.01_r8  Pacific ZIT is strong, decrease Prec SPZ...does not increase in SACZ
 3965.  1 2                             ! xff_max=0.05_r8  SPZ is strong and eastward, weaker ZIT... 
 3966.  1 2                             ! xff_max=0.10_r8-0.20_r8  Increase precipitation on Amazon, decrease prec SPZ, SACZ And Indian
 3967.  1 2                             ! We suggest between 0.025_r8-0.10_r8
 3968.  1 2                             !
 3969.  1 2                             IF(xff0(i) >  xff_max)THEN 
 3970.  1 2                                xf(i,nall(i,nens)+1)=MAX(0.0_r8,-xff_ens3(i,1)/xk(i,nens))   &
 3971.  1 2                                     +massfld
 3972.  1 2                                xf(i,nall(i,nens)+2)=MAX(0.0_r8,-xff_ens3(i,2)/xk(i,nens))   &
 3973.  1 2                                     +massfld
 3974.  1 2                                xf(i,nall(i,nens)+3)=MAX(0.0_r8,-xff_ens3(i,3)/xk(i,nens))   &
 3975.  1 2                                     +massfld
 3976.  1 2                                !
 3977.  1 2                                !below is new
 3978.  1 2                                !-----------
 3979.  1 2                                !
 3980.  1 2                                xf(i,nall(i,nens)+13)=MAX(0.0_r8,-xff_ens3(i,13)/xk(i,nens)) &
 3981.  1 2                                     +massfld
 3982.  1 2                                xf(i,nall(i,nens)+14)=MAX(0.0_r8,-xff_ens3(i,14)/xk(i,nens)) &
 3983.  1 2                                     +massfld
 3984.  1 2                                xf(i,nall(i,nens)+15)=MAX(0.0_r8,-xff_ens3(i,15)/xk(i,nens)) &
 3985.  1 2                                     +massfld
 3986.  1 2                                xf(i,nall(i,nens)+16)=MAX(0.0_r8,-xff_ens3(i,16)/xk(i,nens)) &
 3987.  1 2                                     +massfld
 3988.  1 2          
 3989.  1 2                             ELSE
 3990.  1 2                                xf(i,nall(i,nens)+1)=massfld
 3991.  1 2                                xf(i,nall(i,nens)+2)=massfld
 3992.  1 2                                xf(i,nall(i,nens)+3)=massfld
 3993.  1 2                                !
 3994.  1 2                                !below is new
 3995.  1 2                                !--------------
 3996.  1 2                                !
 3997.  1 2                                xf(i,nall(i,nens)+13)=massfld
 3998.  1 2                                xf(i,nall(i,nens)+14)=massfld
 3999.  1 2                                xf(i,nall(i,nens)+15)=massfld
 4000.  1 2                                xf(i,nall(i,nens)+16)=massfld
 4001.  1 2          
 4002.  1 2                             END IF
 4003.  1 2                             !
 4004.  1 2                             ! if iresult == 1, following independent of xff
 4005.  1 2                             !
 4006.  1 2                             xf(i,nall(i,nens)+4)=MAX(0.0_r8,xff_ens3(i,4) &
 4007.  1 2                                  +massfld)
 4008.  1 2                             xf(i,nall(i,nens)+5)=MAX(0.0_r8,xff_ens3(i,5) &
 4009.  1 2                                  +massfld)
 4010.  1 2                             xf(i,nall(i,nens)+6)=MAX(0.0_r8,xff_ens3(i,6) &
 4011.  1 2                                  +massfld)
 4012.  1 2                             !     
 4013.  1 2                             !new below
 4014.  1 2                             !----------
 4015.  1 2                             !
 4016.  1 2                             a1 = MAX(1.e-9_r8,pr_ens(i,nall(i,nens)+7))
 4017.  1 2                             xf(i,nall(i,nens)+7)=MAX(0.0_r8,xff_ens3(i,7))/a1
 4018.  1 2                             a1 = MAX(1.e-9_r8,pr_ens(i,nall(i,nens)+8))
 4019.  1 2                             xf(i,nall(i,nens)+8)=MAX(0.0_r8,xff_ens3(i,8))/a1
 4020.  1 2                             a1 = MAX(1.e-9_r8,pr_ens(i,nall(i,nens)+9))
 4021.  1 2                             xf(i,nall(i,nens)+9)=MAX(0.0_r8,xff_ens3(i,9))/a1
 4022.  1 2                             !
 4023.  1 2                             ! old1            if(xk(i,ne) <  0.0_r8)then
 4024.  1 2                             !
 4025.  1 2                             ! old2            if(XK(i,ne) <  0.0_r8 .and. xff0(i) >  0.0_r8)then
 4026.  1 2                             !
 4027.  1 2                             ! below newer     if(XK(i,ne) <  0.0_r8 .and. xff0(i) >  0.05_r8)then
 4028.  1 2                             !
 4029.  1 2                             IF(XK(i,nens) <  0.0_r8 .AND. xff0(i) >  xff_max)THEN
 4030.  1 2          
 4031.  1 2                                xf(i,nall(i,nens)+10)=MAX(0.0_r8,-xff_ens3(i,10)/xk(i,nens)) &
 4032.  1 2                                     +massfld
 4033.  1 2                                xf(i,nall(i,nens)+11)=MAX(0.0_r8,-xff_ens3(i,11)/xk(i,nens)) &
 4034.  1 2                                     +massfld
 4035.  1 2                                xf(i,nall(i,nens)+12)=MAX(0.0_r8,-xff_ens3(i,12)/xk(i,nens)) &
 4036.  1 2                                     +massfld
 4037.  1 2                             ELSE
 4038.  1 2                                xf(i,nall(i,nens)+10)=massfld
 4039.  1 2                                xf(i,nall(i,nens)+11)=massfld
 4040.  1 2                                xf(i,nall(i,nens)+12)=massfld
 4041.  1 2                             END IF
 4042.  1 2                             !
 4043.  1 2                             !++++++++++++++++++++++++
 4044.  1 2                             ! snf  tests for T62L28
 4045.  1 2                             ! addition corrections
 4046.  1 2                             !  F14 is too bad in GCM too (in RAMS SRF found the same problem)
 4047.  1 2                             !  F16 is also bad in GCM
 4048.  1 2                             !  F15 and F13 are better than F14 and F16
 4049.  1 2                             !  F13 is bad over ocean.Over SA inproved pp.
 4050.  1 2                             !  OMEGAS are too bad in GCM.....  
 4051.  1 2          
 4052.  1 2                             IF(grepar1 == 24)THEN 
 4053.  1 2                                xf(i,nall(i,nens)+4)=xf(i,nall(i,nens)+1)
 4054.  1 2                                xf(i,nall(i,nens)+5)=xf(i,nall(i,nens)+2)
 4055.  1 2                                xf(i,nall(i,nens)+6)=xf(i,nall(i,nens)+3)
 4056.  1 2          
 4057.  1 2                                xf(i,nall(i,nens)+13)=xf(i,nall(i,nens)+1)
 4058.  1 2                                xf(i,nall(i,nens)+14)=xf(i,nall(i,nens)+2)
 4059.  1 2                                xf(i,nall(i,nens)+15)=xf(i,nall(i,nens)+3)
 4060.  1 2                                xf(i,nall(i,nens)+16)=xf(i,nall(i,nens)+1)
 4061.  1 2                             ENDIF
 4062.  1 2          
 4063.  1 2                          END IF
 4064.  1 2                       END IF
 4065.  1 2-------->           END DO
 4066.  1---------->        END DO
 4067.               
 4068.               
 4069.               
 4070.               
 4071.  1----------<        DO nens=1,maxens      
 4072.  1 2--------<           DO nens3=1,maxens3
 4073.  1 2 3------<              DO i=istart,iend
 4074.  1 2 3                        IF(ierr(i) == 0)THEN         
 4075.  1 2 3                           IF(teste2(i,nens) .AND. teste3(i,nens) ) THEN
 4076.  1 2 3                              iresultd=0
 4077.  1 2 3                              iresulte=0
 4078.  1 2 3                              !
 4079.  1 2 3                              ! check for upwind convection
 4080.  1 2 3                              !
 4081.  1 2 3                              iresult=0
 4082.  1 2 3                              massfld=0.0_r8
 4083.  1 2 3                              IF(xk(i,nens) <  0.0_r8 .AND. xff0(i) >  0.0_r8)iresultd=1
 4084.  1 2 3                              iresulte=MAX(iresult,iresultd)
 4085.  1 2 3                              IF(iresulte == 1)THEN
 4086.  1 2 3                                 !
 4087.  1 2 3                                 !****************************************************************
 4088.  1 2 3                                 !----- 1d closure ensemble -------------
 4089.  1 2 3                                 !
 4090.  1 2 3                                 IF(grepar1 >= 1 .AND. grepar1 <= 16)THEN
 4091.  1 2 3                                    xf(i,nall(i,nens)+nens3)=xf(i,nall(i,nens)+grepar1)
 4092.  1 2 3                                 END IF
 4093.  1 2 3                                 !
 4094.  1 2 3                                 !-------------------------
 4095.  1 2 3                                 ! store new for next time step
 4096.  1 2 3                                 !-------
 4097.  1 2 3                                 !
 4098.  1 2 3                                 massfln(i,nall(i,nens)+nens3)=edt(i)*xf(i,nall(i,nens)+nens3)
 4099.  1 2 3                                 massfln(i,nall(i,nens)+nens3)=MAX(0.0_r8,massfln(i,nall(i,nens)+nens3))
 4100.  1 2 3                              END IF
 4101.  1 2 3                           END IF
 4102.  1 2 3                        END IF
 4103.  1 2 3------>              END DO
 4104.  1 2-------->           END DO
 4105.  1---------->        END DO
 4106.               
 4107.                   END IF
 4108.               
 4109.                   IF( name /=  'deeps')THEN 
 4110.  b----------<        DO n=1,ensdim
 4111.  b b--------<           DO i=istart,iend
 4112.  b b                       IF(ierr(i) .NE. 20 .AND. ierr(i).NE.0)THEN
 4113.  b b                          xf     (i,n)=0.0_r8
 4114.  b b                          massfln(i,n)=0.0_r8
 4115.  b b                       END IF
 4116.  b b-------->           END DO
 4117.  b---------->        END DO
 4118.                   END IF
 4119.                   RETURN
 4120.                 END SUBROUTINE cup_forcing_ens_16
 4121.               
 4122.                 !------------------------------------------------------------------------
 4123.               
 4124.                 SUBROUTINE cup_output_ens( &
 4125.                      xf_ens    ,ierr      ,dellat    ,dellaq    ,dellaqc    , &
 4126.                      outt      ,outq      ,outqc     ,pre       ,pw         , &
 4127.                      xmb       ,ktop      ,nCols     ,kMax       , &
 4128.                      istart    ,iend      ,maxens2    , &
 4129.                      maxens    ,iens      ,pr_ens    ,outt_ens  ,maxens3    , &
 4130.                      ensdim    ,massfln   ,xfac1     ,xfac_for_dn,maxens22  )
 4131.               
 4132.                   IMPLICIT NONE
 4133.                   INTEGER, INTENT(IN   )         :: nCols
 4134.                   INTEGER, INTENT(IN   )         :: kMax
 4135.                   INTEGER, INTENT(IN   )         :: istart
 4136.                   INTEGER, INTENT(IN   )         :: iend
 4137.                   INTEGER, INTENT(IN   )         :: ensdim
 4138.                   INTEGER, INTENT(IN   )         :: maxens2,maxens22
 4139.                   INTEGER, INTENT(IN   )         :: maxens
 4140.                   INTEGER, INTENT(IN   )         :: iens
 4141.                   INTEGER, INTENT(IN   )         :: maxens3
 4142.                   REAL(KIND=r8)   , INTENT(OUT  )         :: pre     (nCols)            
 4143.                   REAL(KIND=r8)   , INTENT(OUT  )         :: xmb     (nCols)            
 4144.                   REAL(KIND=r8)   , INTENT(OUT  )         :: xfac1   (nCols)            
 4145.                   REAL(KIND=r8)   , INTENT(INOUT)         :: outt    (nCols,kMax)        
 4146.                   REAL(KIND=r8)   , INTENT(INOUT)         :: outq    (nCols,kMax)   
 4147.               !hmjb    REAL(KIND=r8)   , INTENT(OUT  )         :: outt    (nCols,kMax)        
 4148.               !hmjb    REAL(KIND=r8)   , INTENT(OUT  )         :: outq    (nCols,kMax)                 
 4149.                   REAL(KIND=r8)   , INTENT(OUT  )         :: outqc   (nCols,kMax)        
 4150.                   REAL(KIND=r8)   , INTENT(IN   )         :: dellat  (nCols,kMax,maxens2)
 4151.                   REAL(KIND=r8)   , INTENT(IN   )         :: dellaq  (nCols,kMax,maxens2)
 4152.                   REAL(KIND=r8)   , INTENT(IN   )         :: pw      (nCols,kMax,maxens2)
 4153.                   REAL(KIND=r8)   , INTENT(IN   )         :: xf_ens  (nCols,ensdim)     
 4154.                   REAL(KIND=r8)   , INTENT(INOUT)         :: pr_ens  (nCols,ensdim)     
 4155.                   REAL(KIND=r8)   , INTENT(INOUT)         :: massfln (nCols,ensdim)     
 4156.                   REAL(KIND=r8)   , INTENT(INOUT)         :: outt_ens(nCols,ensdim)
 4157.                   INTEGER, INTENT(IN   )         :: ktop    (nCols)
 4158.                   INTEGER, INTENT(INOUT)         :: ierr    (nCols)
 4159.                   REAL(KIND=r8)   , INTENT(OUT  )         :: xfac_for_dn(nCols)
 4160.                   !
 4161.                   ! new
 4162.                   !
 4163.                   INTEGER                     :: i
 4164.                   INTEGER                     :: k
 4165.                   INTEGER                     :: n
 4166.                   REAL(KIND=r8)                        :: outtes
 4167.                   REAL(KIND=r8)                        :: ddtes
 4168.                   REAL(KIND=r8)                        :: dtt     (nCols,kMax)
 4169.                   REAL(KIND=r8)                        :: dtq     (nCols,kMax)
 4170.                   REAL(KIND=r8)                        :: dtqc    (nCols,kMax)
 4171.                   REAL(KIND=r8)                        :: dtpw    (nCols,kMax)
 4172.                   REAL(KIND=r8)                        :: dellaqc (nCols,kMax,maxens2)
 4173.                   INTEGER                     :: ncount  (nCols)
 4174.               !
 4175.               ! xf_ens = ensemble mass fluxes
 4176.                 ! pr_ens = precipitation ensembles
 4177.                 ! dellat = change of temperature per unit mass flux of cloud ensemble
 4178.                 ! dellaq = change of q per unit mass flux of cloud ensemble
 4179.                 ! dellaqc = change of qc per unit mass flux of cloud ensemble
 4180.                 ! outtem = output temp tendency (per s)
 4181.                 ! outq   = output q tendency (per s)
 4182.                 ! outqc  = output qc tendency (per s)
 4183.                 ! pre    = output precip
 4184.                 ! xmb    = total base mass flux
 4185.                 ! xfac1  = correction factor
 4186.                 ! pw = pw -epsilon*pd (ensemble dependent)
 4187.                 ! ierr error value, maybe modified in this routine
 4188.               
 4189.               
 4190.  1----------<     DO k=1,kMax
 4191.  1 2--------<        DO i=istart,iend
 4192.  1 2                    IF(ierr(i) == 0)THEN
 4193.  1 2                       outt (i,k) = 0.0_r8
 4194.  1 2                       outq (i,k) = 0.0_r8
 4195.  1 2                       outqc(i,k) = 0.0_r8
 4196.  1 2                       dtt  (i,k) = 0.0_r8
 4197.  1 2                       dtq  (i,k) = 0.0_r8
 4198.  1 2                       dtqc (i,k) = 0.0_r8
 4199.  1 2                       dtpw (i,k) = 0.0_r8
 4200.  1 2                    END IF
 4201.  1 2-------->        END DO
 4202.  1---------->     END DO
 4203.               
 4204.  1----------<     DO i=istart,iend
 4205.  1                   IF(ierr(i) == 0)THEN
 4206.  1                      pre  (i)      = 0.0_r8
 4207.  1                      xmb  (i)      = 0.0_r8
 4208.  1                      xfac1(i)      = 1.0_r8
 4209.  1                      xfac_for_dn(i)= 1.0_r8
 4210.  1                      ncount(i)     = 0
 4211.  1                   END IF
 4212.  1---------->     END DO
 4213.                   !
 4214.                   ! calculate mass fluxes
 4215.                   !
 4216.                   ! Simple average  (OLD)
 4217.                   ! --------------
 4218.                   !
 4219.  1----------<     DO n=(iens-1)*maxens22*maxens*maxens3+1, iens*maxens22*maxens*maxens3 
 4220.  1 2--------<        DO i=istart,iend
 4221.  1 2                    IF(ierr(i) == 0)THEN
 4222.  1 2                       pr_ens  (i,n) = pr_ens  (i,n)*xf_ens (i,n)
 4223.  1 2                       outt_ens(i,n) = outt_ens(i,n)*xf_ens (i,n)
 4224.  1 2                       IF(xf_ens(i,n) >= 0.0_r8)THEN
 4225.  1 2                          xmb   (i) = xmb   (i) + xf_ens(i,n)
 4226.  1 2                          ncount(i) = ncount(i) + 1
 4227.  1 2                       END IF
 4228.  1 2                    END IF
 4229.  1 2-------->        END DO
 4230.  1---------->     END DO
 4231.               
 4232.  1----------<     DO i=istart,iend
 4233.  1                   IF(ierr(i) == 0)THEN          
 4234.  1                      IF(ncount(i) >  0)THEN
 4235.  1                         xmb (i)=xmb(i)/float(ncount(i))
 4236.  1                      ELSE
 4237.  1                         xmb (i)=0.0_r8
 4238.  1                         ierr(i)=13
 4239.  1                      END IF
 4240.  1                      xfac1(i)=xmb(i)!new1
 4241.  1                   END IF
 4242.  1---------->     END DO
 4243.                   !
 4244.                   !--------------------
 4245.                   !! now do feedback 
 4246.                   !----------------------
 4247.                   !
 4248.                   ddtes=250.0_r8   !new        For shall ddtes=500.0_r8
 4249.                   !
 4250.  1----------<     DO n=1,maxens22
 4251.  1 b--------<        DO k=1,MAXVAL(ktop)
 4252.  1 b b------<           DO i=istart,iend
 4253.  1 b b                     IF(ierr(i) == 0 .AND. k <= ktop(i))THEN
 4254.  1 b b                        dtt (i,k)  = dtt (i,k) + dellat (i,k,n)
 4255.  1 b b                        dtq (i,k)  = dtq (i,k) + dellaq (i,k,n)
 4256.  1 b b                        dtqc(i,k)  = dtqc(i,k) + dellaqc(i,k,n)
 4257.  1 b b                        dtpw(i,k)  = dtpw(i,k) + pw     (i,k,n)
 4258.  1 b b                     END IF
 4259.  1 b b------>           END DO
 4260.  1 b-------->        END DO
 4261.  1---------->     END DO
 4262.               
 4263.  1----------<     DO k=1,MAXVAL(ktop)
 4264.  1 2--------<        DO i=istart,iend
 4265.  1 2                    IF(ierr(i) == 0 .AND. k <= ktop(i))THEN
 4266.  1 2                       outtes = dtt(i,k)*xmb(i)*86400.0_r8/float(maxens22)
 4267.  1 2                       IF(outtes  >   2.0_r8*ddtes .AND. k >  2)THEN
 4268.  1 2                          xmb(i) = 2.0_r8*ddtes/outtes * xmb(i)
 4269.  1 2                          outtes = 1.0_r8*ddtes
 4270.  1 2                       END IF
 4271.  1 2          
 4272.  1 2          
 4273.  1 2                       IF(outtes  <   -ddtes)THEN
 4274.  1 2                          xmb(i) = -ddtes/outtes * xmb(i)
 4275.  1 2                          outtes = -ddtes
 4276.  1 2                       END IF
 4277.  1 2          
 4278.  1 2                       IF(outtes  >   0.5_r8*ddtes .AND. k <= 2)THEN
 4279.  1 2                          xmb(i) =    ddtes/outtes * xmb(i)
 4280.  1 2                          outtes = 0.5_r8*ddtes
 4281.  1 2                       END IF
 4282.  1 2          
 4283.  1 2                       outt (i,k) = outt (i,k) + xmb(i)*dtt (i,k)/float(maxens22)
 4284.  1 2                       outq (i,k) = outq (i,k) + xmb(i)*dtq (i,k)/float(maxens22)
 4285.  1 2                       outqc(i,k) = outqc(i,k) + xmb(i)*dtqc(i,k)/float(maxens22)
 4286.  1 2                       pre  (i)   = pre  (i)   + xmb(i)*dtpw(i,k)/float(maxens22)
 4287.  1 2                    END IF
 4288.  1 2-------->        END DO
 4289.  1---------->     END DO
 4290.                   !
 4291.                   ! below is new  it is only for statistics?
 4292.                   !
 4293.  1----------<     DO k=(iens-1)*maxens22*maxens*maxens3+1,iens*maxens22*maxens*maxens3
 4294.  1 2--------<        DO i=istart,iend
 4295.  1 2                    IF(ierr(i) == 0)THEN
 4296.  1 2                       xfac1    (i)  = xmb(i)        / (xfac1(i)+1.e-16_r8)
 4297.  1 2                       massfln (i,k) = massfln (i,k) * xfac1(i)*xfac_for_dn(i)
 4298.  1 2                       pr_ens  (i,k) = pr_ens  (i,k) * xfac1(i)
 4299.  1 2                       outt_ens(i,k) = outt_ens(i,k) * xfac1(i)
 4300.  1 2                    END IF
 4301.  1 2-------->        END DO
 4302.  1---------->     END DO
 4303.               
 4304.                   RETURN
 4305.                 END SUBROUTINE cup_output_ens
 4306.               
 4307.                 !  INTERFACE COMPRESS
 4308.                 !     MODULE PROCEDURE COMPRESS_R1D, COMPRESS_I1D, &
 4309.                 !                      COMPRESS_R2D, COMPRESS_I2D, &
 4310.                 !                      COMPRESS_R3D, COMPRESS_I3D
 4311.                 !  END INTERFACE
 4312.                 SUBROUTINE  COMPRESS_R1D(istart,iend,ierr,var_in,var_out) 
 4313.                   INTEGER, INTENT(IN) :: istart
 4314.                   INTEGER, INTENT(IN) :: iend   
 4315.                   INTEGER, INTENT(IN) :: ierr   (:)
 4316.                   REAL(KIND=r8)   , INTENT(IN) :: var_in (:)
 4317.                   REAL(KIND=r8)   , INTENT(OUT) :: var_out(:)
 4318.                   INTEGER :: nLeft
 4319.                   INTEGER :: i
 4320.               
 4321.                   nLeft = 0
 4322.  1----------<     DO i=istart,iend
 4323.  1                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4324.  1                      nLeft              =  nLeft + 1
 4325.  1                      var_out (nLeft)    =  var_in (i)     
 4326.  1                   END IF
 4327.  1---------->     END DO
 4328.                 END SUBROUTINE  COMPRESS_R1D
 4329.                 SUBROUTINE  COMPRESS_I1D(istart,iend,ierr,var_in,var_out) 
 4330.                   INTEGER, INTENT(IN) :: istart
 4331.                   INTEGER, INTENT(IN) :: iend   
 4332.                   INTEGER, INTENT(IN) :: ierr   (:)
 4333.                   INTEGER, INTENT(IN) :: var_in (:)
 4334.                   INTEGER, INTENT(OUT) :: var_out(:)
 4335.                   INTEGER :: nLeft
 4336.                   INTEGER :: i
 4337.               
 4338.                   nLeft = 0
 4339.  1----------<     DO i=istart,iend
 4340.  1                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4341.  1                      nLeft              =  nLeft + 1
 4342.  1                      var_out (nLeft)    =  var_in (i)     
 4343.  1                   END IF
 4344.  1---------->     END DO
 4345.                 END SUBROUTINE  COMPRESS_I1D
 4346.               
 4347.                 SUBROUTINE  COMPRESS_R2D(istart,iend,ierr,var_in,var_out) 
 4348.                   INTEGER, INTENT(IN) :: istart
 4349.                   INTEGER, INTENT(IN) :: iend   
 4350.                   INTEGER, INTENT(IN) :: ierr   (:)
 4351.                   REAL(KIND=r8)   , INTENT(IN) :: var_in (:,:)
 4352.                   REAL(KIND=r8)   , INTENT(OUT) :: var_out(:,:)
 4353.                   INTEGER :: nLeft
 4354.                   INTEGER :: i,k,kDims2
 4355.                   kDims2=SIZE(var_in,2)
 4356.  1----------<     DO k=1,kDims2
 4357.  1                   nLeft = 0
 4358.  1 r4-------<        DO i=istart,iend
 4359.  1 r4                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4360.  1 r4                      nLeft              =  nLeft + 1
 4361.  1 r4                      var_out (nLeft,k)    =  var_in (i,k)     
 4362.  1 r4                   END IF
 4363.  1 r4------->        END DO
 4364.  1---------->     END DO
 4365.                 END SUBROUTINE  COMPRESS_R2D
 4366.                 SUBROUTINE  COMPRESS_I2D(istart,iend,ierr,var_in,var_out) 
 4367.                   INTEGER, INTENT(IN) :: istart
 4368.                   INTEGER, INTENT(IN) :: iend   
 4369.                   INTEGER, INTENT(IN) :: ierr   (:)
 4370.                   INTEGER, INTENT(IN) :: var_in (:,:)
 4371.                   INTEGER, INTENT(OUT) :: var_out(:,:)
 4372.                   INTEGER :: nLeft
 4373.                   INTEGER :: i,k,kDims2
 4374.                   kDims2=SIZE(var_in,2)
 4375.  1----------<     DO k=1,kDims2
 4376.  1                   nLeft = 0
 4377.  1 r4-------<        DO i=istart,iend
 4378.  1 r4                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4379.  1 r4                      nLeft              =  nLeft + 1
 4380.  1 r4                      var_out (nLeft,k)    =  var_in (i,k)     
 4381.  1 r4                   END IF
 4382.  1 r4------->        END DO
 4383.  1---------->     END DO
 4384.                 END SUBROUTINE  COMPRESS_I2D
 4385.               
 4386.                 SUBROUTINE  COMPRESS_R3D(istart,iend,ierr,var_in,var_out) 
 4387.                   INTEGER, INTENT(IN) :: istart
 4388.                   INTEGER, INTENT(IN) :: iend   
 4389.                   INTEGER, INTENT(IN) :: ierr   (:)
 4390.                   REAL(KIND=r8)   , INTENT(IN) :: var_in (:,:,:)
 4391.                   REAL(KIND=r8)   , INTENT(OUT) :: var_out(:,:,:)
 4392.                   INTEGER :: nLeft
 4393.                   INTEGER :: i,k,j,kDims2,jDims3
 4394.                   kDims2=SIZE(var_in,2)
 4395.                   jDims3=SIZE(var_in,3)
 4396.  b----------<     DO j=1,jDims3
 4397.  b b--------<        DO k=1,kDims2
 4398.  b b                    nLeft = 0
 4399.  b b r4-----<           DO i=istart,iend
 4400.  b b r4                    IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4401.  b b r4                       nLeft              =  nLeft + 1
 4402.  b b r4                       var_out (nLeft,k,j)    =  var_in (i,k,j)     
 4403.  b b r4                    END IF
 4404.  b b r4----->           END DO
 4405.  b b-------->        END DO
 4406.  b---------->     END DO
 4407.                 END SUBROUTINE  COMPRESS_R3D
 4408.                 SUBROUTINE  COMPRESS_I3D(istart,iend,ierr,var_in,var_out) 
 4409.                   INTEGER, INTENT(IN) :: istart
 4410.                   INTEGER, INTENT(IN) :: iend   
 4411.                   INTEGER, INTENT(IN) :: ierr   (:)
 4412.                   INTEGER, INTENT(IN) :: var_in (:,:,:)
 4413.                   INTEGER, INTENT(OUT) :: var_out(:,:,:)
 4414.                   INTEGER :: nLeft
 4415.                   INTEGER :: i,k,j,kDims2,jDims3
 4416.                   kDims2=SIZE(var_in,2)
 4417.                   jDims3=SIZE(var_in,3)
 4418.  b----------<     DO j=1,jDims3 
 4419.  b b--------<        DO k=1,kDims2
 4420.  b b                    nLeft = 0
 4421.  b b r4-----<           DO i=istart,iend
 4422.  b b r4                    IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4423.  b b r4                       nLeft              =  nLeft + 1
 4424.  b b r4                       var_out (nLeft,k,j)    =  var_in (i,k,j)     
 4425.  b b r4                    END IF
 4426.  b b r4----->           END DO
 4427.  b b-------->        END DO
 4428.  b---------->     END DO
 4429.                 END SUBROUTINE  COMPRESS_I3D
 4430.                 !
 4431.                 !  INTERFACE UNCOMPRESS
 4432.                 !     MODULE PROCEDURE UNCOMPRESS_R1D, UNCOMPRESS_I1D, &
 4433.                 !                      UNCOMPRESS_R2D, UNCOMPRESS_I2D, &
 4434.                 !                      UNCOMPRESS_R3D, UNCOMPRESS_I3D
 4435.                 !  END INTERFACE
 4436.                 SUBROUTINE  UNCOMPRESS_R1D(istart,iend,ierr,var_in,var_out) 
 4437.                   INTEGER, INTENT(IN) :: istart
 4438.                   INTEGER, INTENT(IN) :: iend   
 4439.                   INTEGER, INTENT(IN) :: ierr   (:)
 4440.                   REAL(KIND=r8)   , INTENT(IN) :: var_in (:)
 4441.                   REAL(KIND=r8)   , INTENT(OUT) :: var_out(:)
 4442.                   INTEGER :: nLeft
 4443.                   INTEGER :: i
 4444.               
 4445.                   nLeft = 0
 4446.  1----------<     DO i=istart,iend
 4447.  1                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4448.  1                      nLeft              =  nLeft + 1
 4449.  1                      var_out (i)    =  var_in (nLeft)     
 4450.  1                   END IF
 4451.  1---------->     END DO
 4452.                 END SUBROUTINE  UNCOMPRESS_R1D
 4453.                 SUBROUTINE  UNCOMPRESS_I1D(istart,iend,ierr,var_in,var_out) 
 4454.                   INTEGER, INTENT(IN) :: istart
 4455.                   INTEGER, INTENT(IN) :: iend   
 4456.                   INTEGER, INTENT(IN) :: ierr   (:)
 4457.                   INTEGER, INTENT(IN) :: var_in (:)
 4458.                   INTEGER, INTENT(OUT) :: var_out(:)
 4459.                   INTEGER :: nLeft
 4460.                   INTEGER :: i
 4461.               
 4462.                   nLeft = 0
 4463.  1----------<     DO i=istart,iend
 4464.  1                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4465.  1                      nLeft              =  nLeft + 1
 4466.  1                      var_out (i)    =  var_in (nLeft)     
 4467.  1                   END IF
 4468.  1---------->     END DO
 4469.                 END SUBROUTINE  UNCOMPRESS_I1D
 4470.               
 4471.                 SUBROUTINE  UNCOMPRESS_R2D(istart,iend,ierr,var_in,var_out) 
 4472.                   INTEGER, INTENT(IN) :: istart
 4473.                   INTEGER, INTENT(IN) :: iend   
 4474.                   INTEGER, INTENT(IN) :: ierr   (:)
 4475.                   REAL(KIND=r8)   , INTENT(IN) :: var_in (:,:)
 4476.                   REAL(KIND=r8)   , INTENT(OUT) :: var_out(:,:)
 4477.                   INTEGER :: nLeft
 4478.                   INTEGER :: i,k,kDims2
 4479.                   kDims2=SIZE(var_in,2)
 4480.  1----------<     DO k=1,kDims2
 4481.  1                   nLeft = 0
 4482.  1 r4-------<        DO i=istart,iend
 4483.  1 r4                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4484.  1 r4                      nLeft              =  nLeft + 1
 4485.  1 r4                      var_out (i,k)    =  var_in (nLeft,k)     
 4486.  1 r4                   END IF
 4487.  1 r4------->        END DO
 4488.  1---------->     END DO
 4489.                 END SUBROUTINE  UNCOMPRESS_R2D
 4490.                 SUBROUTINE  UNCOMPRESS_I2D(istart,iend,ierr,var_in,var_out) 
 4491.                   INTEGER, INTENT(IN) :: istart
 4492.                   INTEGER, INTENT(IN) :: iend   
 4493.                   INTEGER, INTENT(IN) :: ierr   (:)
 4494.                   INTEGER, INTENT(IN) :: var_in (:,:)
 4495.                   INTEGER, INTENT(OUT) :: var_out(:,:)
 4496.                   INTEGER :: nLeft
 4497.                   INTEGER :: i,k,kDims2
 4498.                   kDims2=SIZE(var_in,2)
 4499.  1----------<     DO k=1,kDims2
 4500.  1                   nLeft = 0
 4501.  1 r4-------<        DO i=istart,iend
 4502.  1 r4                   IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4503.  1 r4                      nLeft              =  nLeft + 1
 4504.  1 r4                      var_out (i,k)    =  var_in (nLeft,k)     
 4505.  1 r4                   END IF
 4506.  1 r4------->        END DO
 4507.  1---------->     END DO
 4508.                 END SUBROUTINE  UNCOMPRESS_I2D
 4509.               
 4510.                 SUBROUTINE  UNCOMPRESS_R3D(istart,iend,ierr,var_in,var_out) 
 4511.                   INTEGER, INTENT(IN) :: istart
 4512.                   INTEGER, INTENT(IN) :: iend   
 4513.                   INTEGER, INTENT(IN) :: ierr   (:)
 4514.                   REAL(KIND=r8)   , INTENT(IN) :: var_in (:,:,:)
 4515.                   REAL(KIND=r8)   , INTENT(OUT) :: var_out(:,:,:)
 4516.                   INTEGER :: nLeft
 4517.                   INTEGER :: i,k,j,kDims2,jDims3
 4518.                   kDims2=SIZE(var_in,2)
 4519.                   jDims3=SIZE(var_in,3)
 4520.  b----------<     DO j=1,jDims3
 4521.  b b--------<        DO k=1,kDims2
 4522.  b b                    nLeft = 0
 4523.  b b r4-----<           DO i=istart,iend
 4524.  b b r4                    IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4525.  b b r4                       nLeft              =  nLeft + 1
 4526.  b b r4                       var_out (i,k,j)    =  var_in (nLeft,k,j)     
 4527.  b b r4                    END IF
 4528.  b b r4----->           END DO
 4529.  b b-------->        END DO
 4530.  b---------->     END DO
 4531.                 END SUBROUTINE  UNCOMPRESS_R3D
 4532.                 SUBROUTINE  UNCOMPRESS_I3D(istart,iend,ierr,var_in,var_out) 
 4533.                   INTEGER, INTENT(IN) :: istart
 4534.                   INTEGER, INTENT(IN) :: iend   
 4535.                   INTEGER, INTENT(IN) :: ierr   (:)
 4536.                   INTEGER, INTENT(IN) :: var_in (:,:,:)
 4537.                   INTEGER, INTENT(OUT) :: var_out(:,:,:)
 4538.                   INTEGER :: nLeft
 4539.                   INTEGER :: i,k,j,kDims2,jDims3
 4540.                   kDims2=SIZE(var_in,2)
 4541.                   jDims3=SIZE(var_in,3)
 4542.  b----------<     DO j=1,jDims3 
 4543.  b b--------<        DO k=1,kDims2
 4544.  b b                    nLeft = 0
 4545.  b b r4-----<           DO i=istart,iend
 4546.  b b r4                    IF (ierr(i) == 0 .OR. ierr(i) > 995) THEN
 4547.  b b r4                       nLeft              =  nLeft + 1
 4548.  b b r4                       var_out (i,k,j)    =  var_in (nLeft,k,j)     
 4549.  b b r4                    END IF
 4550.  b b r4----->           END DO
 4551.  b b-------->        END DO
 4552.  b---------->     END DO
 4553.                 END SUBROUTINE  UNCOMPRESS_I3D
 4554.                 !---------------------------------
 4555.                 REAL(KIND=r8) FUNCTION es5(t)
 4556.                   REAL(KIND=r8), INTENT(IN) :: t
 4557.               
 4558.                   IF (t <= tcrit) THEN
 4559.                      es5 = EXP(ae(2)-be(2)/t)
 4560.                   ELSE
 4561.                      es5 = EXP(ae(1)-be(1)/t)
 4562.                   END IF
 4563.                 END FUNCTION es5
 4564.               END MODULE Cu_Grellens

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 248 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 250 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 252 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 254 
  A divide was turned into a multiply by a reciprocal

ftn-6230 ftn: VECTOR File = Cu_Grellens.f90, Line = 340 
  A loop starting at line 340 was replaced with multiple library calls.

ftn-6204 ftn: VECTOR File = Cu_Grellens.f90, Line = 350 
  A loop starting at line 350 was vectorized.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 351 
  A loop starting at line 351 was not vectorized because a better candidate was found at line 352.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 352 
  A loop starting at line 352 was not vectorized because it contains a reference to a non-vector intrinsic on line 364.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 355 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 356 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 357 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 360 
  A statement was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 371 
  A loop starting at line 371 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 372 
  A loop starting at line 372 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 373 
  A loop starting at line 373 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 375 
  A loop starting at line 375 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 376 
  A loop starting at line 376 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 377 
  A loop starting at line 377 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 378 
  A loop starting at line 378 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 379 
  A loop starting at line 379 was replaced by a library call.

ftn-3163 ftn: IPA File = Cu_Grellens.f90, Line = 381 
  Routine CUP_DELLABOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3021 ftn: IPA File = Cu_Grellens.f90, Line = 381 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3022 ftn: IPA File = Cu_Grellens.f90, Line = 381 
  Routine GRELLENS2 was not inlined because the call nest is too large to expand. 

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 389 
  A loop starting at line 389 was not vectorized because it contains a reference to a non-vector intrinsic on line 392.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 391 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 394 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 397 
  A loop starting at line 397 was not vectorized because a better candidate was found at line 399.

ftn-6332 ftn: VECTOR File = Cu_Grellens.f90, Line = 399 
  A loop starting at line 399 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 399 
  A loop starting at line 399 was unrolled 8 times.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 697 
  A loop starting at line 697 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 698 
  A loop starting at line 698 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 699 
  A loop starting at line 699 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 700 
  A loop starting at line 700 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Cu_Grellens.f90, Line = 700 
  A loop starting at line 700 was vectorized.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 704 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 705 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 706 
  A statement was replaced by a library call.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 711 
  A loop starting at line 711 was not vectorized because a recurrence was found on "MCONV" at line 714.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 711 
  A loop starting at line 711 was blocked with block size 2.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 711 
  A loop starting at line 711 was unrolled 4 times.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 712 
  A loop starting at line 712 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 712 
  A loop starting at line 712 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Cu_Grellens.f90, Line = 712 
  A loop starting at line 712 was vectorized.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 714 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 718 
  A loop starting at line 718 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Cu_Grellens.f90, Line = 718 
  A loop starting at line 718 was vectorized.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 724 
  A loop starting at line 724 was not vectorized because a better candidate was found at line 725.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 725 
  A loop starting at line 725 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Cu_Grellens.f90, Line = 725 
  A loop starting at line 725 was vectorized.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 730 
  A statement was replaced by a library call.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 734 
  A loop starting at line 734 was fused with the loop starting at line 700.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 735 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 736 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 739 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 749 
  A loop starting at line 749 was not vectorized because it contains a reference to a non-vector intrinsic on line 751.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 757 
  A loop starting at line 757 was not vectorized because a better candidate was found at line 758.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 757 
  A loop starting at line 757 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 758 
  A loop starting at line 758 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 758 
  A loop starting at line 758 was not vectorized because it contains a reference to a non-vector intrinsic on line 760.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 769 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 769 
  A loop starting at line 769 was not vectorized because it contains a reference to a non-vector intrinsic on line 769.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 769 
  A loop starting at line 769 was blocked with block size 8.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 769 
  A loop starting at line 769 was unrolled 2 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 769 
  The call to CUP_ENV was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 769 
  The call to ES5 was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 769 
  The call to ES5 was textually inlined.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 785 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 785 
  A loop starting at line 785 was not vectorized because it contains a reference to a non-vector intrinsic on line 785.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 785 
  A loop starting at line 785 was blocked with block size 8.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 785 
  A loop starting at line 785 was unrolled 2 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 785 
  The call to CUP_ENV was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 785 
  The call to ES5 was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 785 
  The call to ES5 was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 803 
  A loop starting at line 803 was not vectorized because it contains a reference to a non-vector intrinsic on line 803.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 803 
  The call to CUP_ENV_CLEV was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 826 
  A loop starting at line 826 was fused with the loop starting at line 803.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 826 
  A loop starting at line 826 was not vectorized because it contains a reference to a non-vector intrinsic on line 826.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 826 
  The call to CUP_ENV_CLEV was textually inlined.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 851 
  A loop starting at line 851 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Cu_Grellens.f90, Line = 852 
  A loop starting at line 852 was not vectorized because a recurrence was found on "KBMAX" between lines 854 and 855.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 852 
  A loop starting at line 852 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 853 
  A loop starting at line 853 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 853 
  A loop starting at line 853 was not vectorized because it contains a reference to a non-vector intrinsic on line 854.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 862 
  A loop starting at line 862 was replaced by a library call.

ftn-6289 ftn: VECTOR File = Cu_Grellens.f90, Line = 863 
  A loop starting at line 863 was not vectorized because a recurrence was found on "KDET1" between lines 865 and 867.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 863 
  A loop starting at line 863 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 864 
  A loop starting at line 864 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 864 
  A loop starting at line 864 was not vectorized because it contains a reference to a non-vector intrinsic on line 865.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 896 
  A loop starting at line 896 was not vectorized because it contains a reference to a non-vector intrinsic on line 896.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 896 
  A loop starting at line 896 was blocked with block size 4.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 896 
  A statement was replaced by a library call.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 896 
  The call to CUP_MAXIMI was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 906 
  A loop starting at line 906 was not vectorized because it contains a reference to a non-vector intrinsic on line 909.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 921 
  A loop starting at line 921 was not vectorized because it contains a reference to a non-vector intrinsic on line 921.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 921 
  A loop starting at line 921 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 921 
  The call to CUP_KBCON was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 936 
  A loop starting at line 936 was not vectorized because it contains a reference to a non-vector intrinsic on line 938.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 944 
  A loop starting at line 944 was not vectorized because it contains a reference to a non-vector intrinsic on line 944.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 944 
  A loop starting at line 944 was blocked with block size 4.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 944 
  The call to CUP_MINIMI was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 954 
  A loop starting at line 954 was blocked with block size 4.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 954 
  A loop starting at line 954 was not vectorized because a recurrence was found on "CD" at line 958.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 955 
  A loop starting at line 955 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 955 
  A loop starting at line 955 was not vectorized because it contains a reference to a non-vector intrinsic on line 956.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 972 
  A loop starting at line 972 was not vectorized because it contains a reference to a non-vector intrinsic on line 972.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 972 
  The call to CUP_UP_HE was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 990 
  A loop starting at line 990 was fused with the loop starting at line 972.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 990 
  A loop starting at line 990 was not vectorized because it contains a reference to a non-vector intrinsic on line 990.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 990 
  The call to CUP_UP_HE was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1010 
  A loop starting at line 1010 was not vectorized because it contains a reference to a non-vector intrinsic on line 1010.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1010 
  A loop starting at line 1010 was blocked with block size 4.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1010 
  A loop starting at line 1010 was replaced by a library call.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1010 
  The call to CUP_KTOP was textually inlined.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1021 
  A loop starting at line 1021 was replaced by a library call.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 1022 
  A loop starting at line 1022 was not vectorized because a recurrence was found on "KZDOWN" at line 1028.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1022 
  A loop starting at line 1022 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1023 
  A loop starting at line 1023 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1023 
  A loop starting at line 1023 was not vectorized because it contains a reference to a non-vector intrinsic on line 1025.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1037 
  A loop starting at line 1037 was not vectorized because it contains a reference to a non-vector intrinsic on line 1037.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1037 
  A loop starting at line 1037 was blocked with block size 4.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1037 
  The call to CUP_MINIMI was textually inlined.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1051 
  A loop starting at line 1051 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1053 
  A loop starting at line 1053 was not vectorized because it contains a reference to a non-vector intrinsic on line 1056.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 1062 
  A loop starting at line 1062 was not vectorized because a recurrence was found on "DH2" at line 1066.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 1064 
  A loop starting at line 1064 was not vectorized because a recurrence was found on "DH2" at line 1066.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 1065 
  A loop starting at line 1065 was not vectorized because a recurrence was found on "DH2" at line 1066.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1082 
  A loop starting at line 1082 was not vectorized because it contains a reference to a non-vector intrinsic on line 1084.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1093 
  A loop starting at line 1093 was fused with the loop starting at line 1082.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1103 
  A loop starting at line 1103 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1103 
  A loop starting at line 1103 was not vectorized because it contains a reference to a non-vector intrinsic on line 1103.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1103 
  The call to CUP_UP_NMS was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1117 
  A loop starting at line 1117 was fused with the loop starting at line 1103.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1117 
  A loop starting at line 1117 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1117 
  A loop starting at line 1117 was not vectorized because it contains a reference to a non-vector intrinsic on line 1117.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1117 
  The call to CUP_UP_NMS was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1134 
  A loop starting at line 1134 was fused with the loop starting at line 1103.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1134 
  A loop starting at line 1134 was blocked with block size 2.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1134 
  A loop starting at line 1134 was not vectorized because it contains a reference to a non-vector intrinsic on line 1134.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1134 
  The call to CUP_DD_NMS was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1149 
  A loop starting at line 1149 was fused with the loop starting at line 1103.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1149 
  A loop starting at line 1149 was blocked with block size 2.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1149 
  A loop starting at line 1149 was not vectorized because it contains a reference to a non-vector intrinsic on line 1149.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1149 
  The call to CUP_DD_NMS was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1166 
  A loop starting at line 1166 was not vectorized because it contains a reference to a non-vector intrinsic on line 1166.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1166 
  The call to CUP_DD_HE was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1182 
  A loop starting at line 1182 was fused with the loop starting at line 1166.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1182 
  A loop starting at line 1182 was not vectorized because it contains a reference to a non-vector intrinsic on line 1182.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1182 
  The call to CUP_DD_HE was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1201 
  A loop starting at line 1201 was not vectorized because it contains a reference to a non-vector intrinsic on line 1201.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1201 
  A loop starting at line 1201 was blocked with block size 2.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1201 
  The call to CUP_DD_MOISTURE was textually inlined.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1226 
  A loop starting at line 1226 was fused with the loop starting at line 1103.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1226 
  A loop starting at line 1226 was not vectorized because it contains a reference to a non-vector intrinsic on line 1226.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1226 
  The call to CUP_DD_MOISTURE was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1258 
  A loop starting at line 1258 was blocked with block size 2.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1258 
  A loop starting at line 1258 was not vectorized because it contains a reference to a non-vector intrinsic on line 1258.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1258 
  The call to CUP_UP_MOISTURE was textually inlined.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 1282 
  A loop starting at line 1282 was not vectorized because a better candidate was found at line 1283.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1283 
  A loop starting at line 1283 was replaced by a library call.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1288 
  A loop starting at line 1288 was fused with the loop starting at line 1226.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1288 
  A loop starting at line 1288 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1288 
  A loop starting at line 1288 was not vectorized because it contains a reference to a non-vector intrinsic on line 1288.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1288 
  The call to CUP_UP_MOISTURE was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1314 
  A loop starting at line 1314 was not vectorized because it contains a reference to a non-vector intrinsic on line 1314.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1314 
  A loop starting at line 1314 was fused with the loop starting at line 1226.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1314 
  The call to CUP_UP_AA0 was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1329 
  A loop starting at line 1329 was not vectorized because it contains a reference to a non-vector intrinsic on line 1329.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1329 
  A loop starting at line 1329 was fused with the loop starting at line 1226.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1329 
  The call to CUP_UP_AA0 was textually inlined.

ftn-6007 ftn: SCALAR File = Cu_Grellens.f90, Line = 1346 
  A loop starting at line 1346 was interchanged with the loop starting at line 1348.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1346 
  A loop starting at line 1346 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1346 
  A loop starting at line 1346 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1346 
  A loop starting at line 1346 was replaced by a library call.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 1348 
  A loop starting at line 1348 was not vectorized because a better candidate was found at line 1346.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1355 
  A loop starting at line 1355 was not vectorized because it contains a reference to a non-vector intrinsic on line 1357.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1365 
  A loop starting at line 1365 was not vectorized because it contains a reference to a non-vector intrinsic on line 1365.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1365 
  A loop starting at line 1365 was fused with the loop starting at line 1355.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1365 
  A loop starting at line 1365 was blocked with block size 3.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1365 
  A loop starting at line 1365 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 1365 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1365 
  The call to CUP_DD_EDT was textually inlined.

ftn-6270 ftn: VECTOR File = Cu_Grellens.f90, Line = 1392 
  A loop starting at line 1392 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1395 
  A loop starting at line 1395 was not vectorized because it contains a reference to a non-vector intrinsic on line 1395.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1395 
  A loop starting at line 1395 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1395 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1396 
  A loop starting at line 1396 was not vectorized because it contains a reference to a non-vector intrinsic on line 1396.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1396 
  The call to COMPRESS_I1D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1397 
  A loop starting at line 1397 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1397 
  A loop starting at line 1397 was not vectorized because it contains a reference to a non-vector intrinsic on line 1397.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1397 
  A loop starting at line 1397 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1397 
  The call to COMPRESS_R3D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1398 
  A loop starting at line 1398 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1398 
  A loop starting at line 1398 was not vectorized because it contains a reference to a non-vector intrinsic on line 1398.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1398 
  A loop starting at line 1398 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1398 
  The call to COMPRESS_R3D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1399 
  A loop starting at line 1399 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1399 
  A loop starting at line 1399 was not vectorized because it contains a reference to a non-vector intrinsic on line 1399.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1399 
  A loop starting at line 1399 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1399 
  The call to COMPRESS_R3D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1400 
  A loop starting at line 1400 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1400 
  A loop starting at line 1400 was not vectorized because it contains a reference to a non-vector intrinsic on line 1400.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1400 
  A loop starting at line 1400 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1400 
  The call to COMPRESS_R3D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1401 
  A loop starting at line 1401 was not vectorized because it contains a reference to a non-vector intrinsic on line 1401.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1401 
  A loop starting at line 1401 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1401 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1402 
  A loop starting at line 1402 was not vectorized because it contains a reference to a non-vector intrinsic on line 1402.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1402 
  A loop starting at line 1402 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1402 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1403 
  A loop starting at line 1403 was not vectorized because it contains a reference to a non-vector intrinsic on line 1403.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1403 
  A loop starting at line 1403 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1403 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1404 
  A loop starting at line 1404 was not vectorized because it contains a reference to a non-vector intrinsic on line 1404.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1404 
  A loop starting at line 1404 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1404 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1405 
  A loop starting at line 1405 was not vectorized because it contains a reference to a non-vector intrinsic on line 1405.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1405 
  A loop starting at line 1405 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1405 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1406 
  A loop starting at line 1406 was not vectorized because it contains a reference to a non-vector intrinsic on line 1406.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1406 
  A loop starting at line 1406 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1406 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1407 
  A loop starting at line 1407 was not vectorized because it contains a reference to a non-vector intrinsic on line 1407.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1407 
  A loop starting at line 1407 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1407 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1408 
  A loop starting at line 1408 was not vectorized because it contains a reference to a non-vector intrinsic on line 1408.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1408 
  A loop starting at line 1408 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1408 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1409 
  A loop starting at line 1409 was not vectorized because it contains a reference to a non-vector intrinsic on line 1409.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1409 
  A loop starting at line 1409 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1409 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1410 
  A loop starting at line 1410 was not vectorized because it contains a reference to a non-vector intrinsic on line 1410.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1410 
  A loop starting at line 1410 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1410 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1411 
  A loop starting at line 1411 was not vectorized because it contains a reference to a non-vector intrinsic on line 1411.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1411 
  A loop starting at line 1411 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1411 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1412 
  A loop starting at line 1412 was not vectorized because it contains a reference to a non-vector intrinsic on line 1412.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1412 
  A loop starting at line 1412 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1412 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1413 
  A loop starting at line 1413 was not vectorized because it contains a reference to a non-vector intrinsic on line 1413.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1413 
  A loop starting at line 1413 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1413 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1414 
  A loop starting at line 1414 was not vectorized because it contains a reference to a non-vector intrinsic on line 1414.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1414 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1415 
  A loop starting at line 1415 was not vectorized because it contains a reference to a non-vector intrinsic on line 1415.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1415 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1416 
  A loop starting at line 1416 was not vectorized because it contains a reference to a non-vector intrinsic on line 1416.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1416 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1417 
  A loop starting at line 1417 was not vectorized because it contains a reference to a non-vector intrinsic on line 1417.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1417 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1418 
  A loop starting at line 1418 was not vectorized because it contains a reference to a non-vector intrinsic on line 1418.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1418 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1419 
  A loop starting at line 1419 was not vectorized because it contains a reference to a non-vector intrinsic on line 1419.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1419 
  A loop starting at line 1419 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1419 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1420 
  A loop starting at line 1420 was not vectorized because it contains a reference to a non-vector intrinsic on line 1420.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1420 
  A loop starting at line 1420 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1420 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1421 
  A loop starting at line 1421 was not vectorized because it contains a reference to a non-vector intrinsic on line 1421.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1421 
  A loop starting at line 1421 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1421 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1422 
  A loop starting at line 1422 was not vectorized because it contains a reference to a non-vector intrinsic on line 1422.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1422 
  A loop starting at line 1422 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1422 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1423 
  A loop starting at line 1423 was not vectorized because it contains a reference to a non-vector intrinsic on line 1423.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1423 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1424 
  A loop starting at line 1424 was not vectorized because it contains a reference to a non-vector intrinsic on line 1424.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1424 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1425 
  A loop starting at line 1425 was not vectorized because it contains a reference to a non-vector intrinsic on line 1425.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1425 
  A loop starting at line 1425 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1425 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1426 
  A loop starting at line 1426 was not vectorized because it contains a reference to a non-vector intrinsic on line 1426.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1426 
  A loop starting at line 1426 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1426 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1427 
  A loop starting at line 1427 was not vectorized because it contains a reference to a non-vector intrinsic on line 1427.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1427 
  A loop starting at line 1427 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1427 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1428 
  A loop starting at line 1428 was not vectorized because it contains a reference to a non-vector intrinsic on line 1428.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1428 
  A loop starting at line 1428 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1428 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1429 
  A loop starting at line 1429 was not vectorized because it contains a reference to a non-vector intrinsic on line 1429.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1429 
  A loop starting at line 1429 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1429 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1430 
  A loop starting at line 1430 was not vectorized because it contains a reference to a non-vector intrinsic on line 1430.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1430 
  A loop starting at line 1430 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1430 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1431 
  A loop starting at line 1431 was not vectorized because it contains a reference to a non-vector intrinsic on line 1431.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1431 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1432 
  A loop starting at line 1432 was not vectorized because it contains a reference to a non-vector intrinsic on line 1432.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1432 
  A loop starting at line 1432 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1432 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1433 
  A loop starting at line 1433 was not vectorized because it contains a reference to a non-vector intrinsic on line 1433.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1433 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1434 
  A loop starting at line 1434 was not vectorized because it contains a reference to a non-vector intrinsic on line 1434.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1434 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1435 
  A loop starting at line 1435 was not vectorized because it contains a reference to a non-vector intrinsic on line 1435.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1435 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1436 
  A loop starting at line 1436 was not vectorized because it contains a reference to a non-vector intrinsic on line 1436.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1436 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1437 
  A loop starting at line 1437 was not vectorized because it contains a reference to a non-vector intrinsic on line 1437.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1437 
  A loop starting at line 1437 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1437 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1438 
  A loop starting at line 1438 was not vectorized because it contains a reference to a non-vector intrinsic on line 1438.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1438 
  The call to COMPRESS_I1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1439 
  A loop starting at line 1439 was not vectorized because it contains a reference to a non-vector intrinsic on line 1439.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1439 
  The call to COMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1440 
  A loop starting at line 1440 was not vectorized because it contains a reference to a non-vector intrinsic on line 1440.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1440 
  A loop starting at line 1440 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1440 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1441 
  A loop starting at line 1441 was not vectorized because it contains a reference to a non-vector intrinsic on line 1441.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1441 
  A loop starting at line 1441 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1441 
  The call to COMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1442 
  A loop starting at line 1442 was not vectorized because it contains a reference to a non-vector intrinsic on line 1442.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1442 
  A loop starting at line 1442 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1442 
  The call to COMPRESS_R2D was textually inlined.

ftn-3021 ftn: IPA File = Cu_Grellens.f90, Line = 1444 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3022 ftn: IPA File = Cu_Grellens.f90, Line = 1444 
  Routine ENSEMBLE was not inlined because the call nest is too large to expand. 

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1505 
  A loop starting at line 1505 was not vectorized because it contains a reference to a non-vector intrinsic on line 1505.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1505 
  The call to UNCOMPRESS_I1D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1506 
  A loop starting at line 1506 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1506 
  A loop starting at line 1506 was not vectorized because it contains a reference to a non-vector intrinsic on line 1506.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1506 
  A loop starting at line 1506 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1506 
  The call to UNCOMPRESS_R3D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1507 
  A loop starting at line 1507 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1507 
  A loop starting at line 1507 was not vectorized because it contains a reference to a non-vector intrinsic on line 1507.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1507 
  A loop starting at line 1507 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1507 
  The call to UNCOMPRESS_R3D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1508 
  A loop starting at line 1508 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1508 
  A loop starting at line 1508 was not vectorized because it contains a reference to a non-vector intrinsic on line 1508.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1508 
  A loop starting at line 1508 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1508 
  The call to UNCOMPRESS_R3D was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1509 
  A loop starting at line 1509 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1509 
  A loop starting at line 1509 was not vectorized because it contains a reference to a non-vector intrinsic on line 1509.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1509 
  A loop starting at line 1509 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1509 
  The call to UNCOMPRESS_R3D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1510 
  A loop starting at line 1510 was not vectorized because it contains a reference to a non-vector intrinsic on line 1510.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1510 
  A loop starting at line 1510 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1510 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1511 
  A loop starting at line 1511 was not vectorized because it contains a reference to a non-vector intrinsic on line 1511.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1511 
  A loop starting at line 1511 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1511 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1512 
  A loop starting at line 1512 was not vectorized because it contains a reference to a non-vector intrinsic on line 1512.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1512 
  A loop starting at line 1512 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1512 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1513 
  A loop starting at line 1513 was not vectorized because it contains a reference to a non-vector intrinsic on line 1513.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1513 
  A loop starting at line 1513 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1513 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1514 
  A loop starting at line 1514 was not vectorized because it contains a reference to a non-vector intrinsic on line 1514.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1514 
  A loop starting at line 1514 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1514 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1515 
  A loop starting at line 1515 was not vectorized because it contains a reference to a non-vector intrinsic on line 1515.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1515 
  The call to UNCOMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1516 
  A loop starting at line 1516 was not vectorized because it contains a reference to a non-vector intrinsic on line 1516.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1516 
  The call to UNCOMPRESS_R1D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1517 
  A loop starting at line 1517 was not vectorized because it contains a reference to a non-vector intrinsic on line 1517.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1517 
  A loop starting at line 1517 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1517 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1518 
  A loop starting at line 1518 was not vectorized because it contains a reference to a non-vector intrinsic on line 1518.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1518 
  A loop starting at line 1518 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1518 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1519 
  A loop starting at line 1519 was not vectorized because it contains a reference to a non-vector intrinsic on line 1519.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1519 
  A loop starting at line 1519 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1519 
  The call to UNCOMPRESS_R2D was textually inlined.

ftn-3149 ftn: IPA File = Cu_Grellens.f90, Line = 1525 
  Routine CUP_OUTPUT_ENS was not inlined because it is a leaf routine which is too large to expand. 

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1554 
  A loop starting at line 1554 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Cu_Grellens.f90, Line = 1554 
  A loop starting at line 1554 was vectorized.

ftn-6288 ftn: VECTOR File = Cu_Grellens.f90, Line = 1741 
  A loop starting at line 1741 was not vectorized because it contains a call to subroutine "CUP_DELLAS" on line 1803.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1743 
  A loop starting at line 1743 was not vectorized because it contains a reference to a non-vector intrinsic on line 1745.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 1750 
  A loop starting at line 1750 was not vectorized because a better candidate was found at line 1751.

ftn-6230 ftn: VECTOR File = Cu_Grellens.f90, Line = 1751 
  A loop starting at line 1751 was replaced with multiple library calls.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1766 
  A loop starting at line 1766 was not vectorized because it contains a reference to a non-vector intrinsic on line 1766.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1766 
  The call to CUP_DELLABOT was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1783 
  A loop starting at line 1783 was not vectorized because it contains a reference to a non-vector intrinsic on line 1783.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1783 
  The call to CUP_DELLABOT was textually inlined.

ftn-3021 ftn: IPA File = Cu_Grellens.f90, Line = 1803 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 1833 
  A loop starting at line 1833 was not vectorized because a better candidate was found at line 1834.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1834 
  A loop starting at line 1834 was not vectorized because it contains a reference to a non-vector intrinsic on line 1838.

ftn-3021 ftn: IPA File = Cu_Grellens.f90, Line = 1853 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 1886 
  A loop starting at line 1886 was not vectorized because a better candidate was found at line 1887.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 1887 
  A loop starting at line 1887 was replaced by a library call.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1894 
  A loop starting at line 1894 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1894 
  A loop starting at line 1894 was not vectorized because it contains a reference to a non-vector intrinsic on line 1896.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 1895 
  A loop starting at line 1895 was not vectorized because a better candidate was found at line 1894.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1895 
  A loop starting at line 1895 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1908 
  A loop starting at line 1908 was not vectorized because it contains a reference to a non-vector intrinsic on line 1910.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 1919 
  A divide was turned into a multiply by a reciprocal

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1919 
  A loop starting at line 1919 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1919 
  A loop starting at line 1919 was not vectorized because it contains a reference to a non-vector intrinsic on line 1919.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 1919 
  A loop starting at line 1919 was unrolled 2 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1919 
  The call to CUP_ENV was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1919 
  The call to ES5 was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1919 
  The call to ES5 was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1938 
  A loop starting at line 1938 was not vectorized because it contains a reference to a non-vector intrinsic on line 1938.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1938 
  The call to CUP_ENV_CLEV was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1966 
  A loop starting at line 1966 was not vectorized because it contains a reference to a non-vector intrinsic on line 1968.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 1972 
  A loop starting at line 1972 was fused with the loop starting at line 1966.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1972 
  A loop starting at line 1972 was not vectorized because it contains a reference to a non-vector intrinsic on line 1972.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1972 
  The call to CUP_UP_HE was textually inlined.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 1992 
  A loop starting at line 1992 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 1992 
  A loop starting at line 1992 was not vectorized because it contains a reference to a non-vector intrinsic on line 1992.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 1992 
  The call to CUP_UP_NMS was textually inlined.

ftn-6002 ftn: SCALAR File = Cu_Grellens.f90, Line = 2006 
  A loop starting at line 2006 was eliminated by optimization.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2006 
  The call to CUP_DD_NMS was textually inlined.

ftn-6002 ftn: SCALAR File = Cu_Grellens.f90, Line = 2023 
  A loop starting at line 2023 was eliminated by optimization.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2023 
  The call to CUP_DD_HE was textually inlined.

ftn-6002 ftn: SCALAR File = Cu_Grellens.f90, Line = 2037 
  A loop starting at line 2037 was eliminated by optimization.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2037 
  The call to CUP_DD_MOISTURE was textually inlined.

ftn-6002 ftn: SCALAR File = Cu_Grellens.f90, Line = 2063 
  A loop starting at line 2063 was eliminated by optimization.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2063 
  The call to CUP_UP_MOISTURE was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2087 
  A loop starting at line 2087 was not vectorized because it contains a reference to a non-vector intrinsic on line 2087.

ftn-6004 ftn: SCALAR File = Cu_Grellens.f90, Line = 2087 
  A loop starting at line 2087 was fused with the loop starting at line 1966.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2087 
  The call to CUP_UP_AA0 was textually inlined.

ftn-6306 ftn: VECTOR File = Cu_Grellens.f90, Line = 2105 
  A loop starting at line 2105 was not vectorized because the iteration space is too irregular.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2106 
  A loop starting at line 2106 was not vectorized because it contains a reference to a non-vector intrinsic on line 2108.

ftn-6289 ftn: VECTOR File = Cu_Grellens.f90, Line = 2114 
  A loop starting at line 2114 was not vectorized because a recurrence was found on "PR_ENS" between lines 2118 and 2126.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2115 
  A loop starting at line 2115 was not vectorized because a recurrence was found on "PR_ENS" at line 2118.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2115 
  A loop starting at line 2115 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2116 
  A loop starting at line 2116 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2116 
  A loop starting at line 2116 was not vectorized because it contains a reference to a non-vector intrinsic on line 2117.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2123 
  A loop starting at line 2123 was not vectorized because it contains a reference to a non-vector intrinsic on line 2125.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2137 
  A loop starting at line 2137 was not vectorized because it contains a reference to a non-vector intrinsic on line 2137.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2137 
  A loop starting at line 2137 was blocked with block size 4.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 2137 
  A statement was replaced by a library call.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2137 
  The call to CUP_MAXIMI was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2147 
  A loop starting at line 2147 was not vectorized because it contains a reference to a non-vector intrinsic on line 2149.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2158 
  A loop starting at line 2158 was not vectorized because it contains a reference to a non-vector intrinsic on line 2158.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 2158 
  A loop starting at line 2158 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2158 
  The call to CUP_KBCON was textually inlined.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2176 
  A loop starting at line 2176 was not vectorized because it contains a reference to a non-vector intrinsic on line 2176.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 2176 
  A loop starting at line 2176 was unrolled 4 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2176 
  The call to CUP_KBCON was textually inlined.

ftn-3149 ftn: IPA File = Cu_Grellens.f90, Line = 2193 
  Routine CUP_FORCING_ENS_16 was not inlined because it is a leaf routine which is too large to expand. 

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2232 
  A loop starting at line 2232 was not vectorized because a better candidate was found at line 2233.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2233 
  A loop starting at line 2233 was not vectorized because it contains a reference to a non-vector intrinsic on line 2235.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2281 
  A loop starting at line 2281 was blocked with block size 8.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2281 
  A loop starting at line 2281 was not vectorized because it contains a reference to a non-vector intrinsic on line 2283.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2282 
  A loop starting at line 2282 was not vectorized because a better candidate was found at line 2281.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2282 
  A loop starting at line 2282 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 2282 
  A loop starting at line 2282 was unrolled 2 times.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2288 
  The call to ES5 was textually inlined.

ftn-3001 ftn: IPA File = Cu_Grellens.f90, Line = 2288 
  The call to ES5 was textually inlined.

ftn-6315 ftn: VECTOR File = Cu_Grellens.f90, Line = 2306 
  A loop starting at line 2306 was not vectorized because the target array (Z) would require rank expansion.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2307 
  A loop starting at line 2307 was not vectorized because it contains a reference to a non-vector intrinsic on line 2310.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 2310 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 2313 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2323 
  A loop starting at line 2323 was not vectorized because a better candidate was found at line 2324.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2324 
  A loop starting at line 2324 was not vectorized because it contains a reference to a non-vector intrinsic on line 2326.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 2326 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2391 
  A loop starting at line 2391 was not vectorized because a better candidate was found at line 2392.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2392 
  A loop starting at line 2392 was not vectorized because it contains a reference to a non-vector intrinsic on line 2394.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2409 
  A loop starting at line 2409 was not vectorized because it contains a reference to a non-vector intrinsic on line 2411.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2446 
  A loop starting at line 2446 was not vectorized because it contains a reference to a non-vector intrinsic on line 2449.

ftn-6289 ftn: VECTOR File = Cu_Grellens.f90, Line = 2452 
  A loop starting at line 2452 was not vectorized because a recurrence was found on "X" between lines 2455 and 2456.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2452 
  A loop starting at line 2452 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2453 
  A loop starting at line 2453 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2453 
  A loop starting at line 2453 was not vectorized because it contains a reference to a non-vector intrinsic on line 2454.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2486 
  A loop starting at line 2486 was not vectorized because it contains a reference to a non-vector intrinsic on line 2489.

ftn-6289 ftn: VECTOR File = Cu_Grellens.f90, Line = 2494 
  A loop starting at line 2494 was not vectorized because a recurrence was found on "X" between lines 2498 and 2499.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2494 
  A loop starting at line 2494 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2495 
  A loop starting at line 2495 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2495 
  A loop starting at line 2495 was not vectorized because it contains a reference to a non-vector intrinsic on line 2497.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2544 
  A loop starting at line 2544 was not vectorized because it contains a reference to a non-vector intrinsic on line 2546.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2553 
  A loop starting at line 2553 was not vectorized because a recurrence was found on "NLEFT" at line 2601.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 2561 
  A loop starting at line 2561 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2561 
  A loop starting at line 2561 was not vectorized because a recurrence was found on "KBCON" at line 2564.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 2582 
  A loop starting at line 2582 was unrolled 2 times.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2582 
  A loop starting at line 2582 was not vectorized because a recurrence was found on "K22" at line 2593.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2648 
  A loop starting at line 2648 was not vectorized because it contains a reference to a non-vector intrinsic on line 2650.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2654 
  A loop starting at line 2654 was not vectorized because a better candidate was found at line 2655.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2655 
  A loop starting at line 2655 was not vectorized because it contains a reference to a non-vector intrinsic on line 2656.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2667 
  A loop starting at line 2667 was not vectorized because it contains a reference to a non-vector intrinsic on line 2669.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2674 
  A loop starting at line 2674 was not vectorized because a recurrence was found on "HC" at line 2679.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2675 
  A loop starting at line 2675 was not vectorized because it contains a reference to a non-vector intrinsic on line 2676.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 2708 
  A loop starting at line 2708 was replaced by a library call.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2709 
  A loop starting at line 2709 was not vectorized because a recurrence was found on "KTOP" at line 2713.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2709 
  A loop starting at line 2709 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2710 
  A loop starting at line 2710 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2710 
  A loop starting at line 2710 was not vectorized because it contains a reference to a non-vector intrinsic on line 2711.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2719 
  A loop starting at line 2719 was not vectorized because it contains a reference to a non-vector intrinsic on line 2720.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2726 
  A loop starting at line 2726 was blocked with block size 32.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2726 
  A loop starting at line 2726 was not vectorized because it contains a reference to a non-vector intrinsic on line 2728.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2727 
  A loop starting at line 2727 was not vectorized because a better candidate was found at line 2726.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2727 
  A loop starting at line 2727 was blocked with block size 256.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2761 
  A loop starting at line 2761 was not vectorized because a better candidate was found at line 2762.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2761 
  A loop starting at line 2761 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2762 
  A loop starting at line 2762 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2762 
  A loop starting at line 2762 was not vectorized because it contains a reference to a non-vector intrinsic on line 2764.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2769 
  A loop starting at line 2769 was not vectorized because a better candidate was found at line 2770.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2769 
  A loop starting at line 2769 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2770 
  A loop starting at line 2770 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2770 
  A loop starting at line 2770 was not vectorized because it contains a reference to a non-vector intrinsic on line 2771.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2777 
  A loop starting at line 2777 was blocked with block size 2.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2777 
  A loop starting at line 2777 was not vectorized because a recurrence was found on "ZU" at line 2781.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2778 
  A loop starting at line 2778 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2778 
  A loop starting at line 2778 was not vectorized because it contains a reference to a non-vector intrinsic on line 2779.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2828 
  A loop starting at line 2828 was not vectorized because a better candidate was found at line 2829.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2828 
  A loop starting at line 2828 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2829 
  A loop starting at line 2829 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2829 
  A loop starting at line 2829 was not vectorized because it contains a reference to a non-vector intrinsic on line 2831.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2839 
  A loop starting at line 2839 was not vectorized because it contains a reference to a non-vector intrinsic on line 2841.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2844 
  A loop starting at line 2844 was blocked with block size 2.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2844 
  A loop starting at line 2844 was not vectorized because a recurrence was found on "ZD" at line 2857.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2845 
  A loop starting at line 2845 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2845 
  A loop starting at line 2845 was not vectorized because it contains a reference to a non-vector intrinsic on line 2846.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2904 
  A loop starting at line 2904 was not vectorized because a better candidate was found at line 2905.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2904 
  A loop starting at line 2904 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2905 
  A loop starting at line 2905 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2905 
  A loop starting at line 2905 was not vectorized because it contains a reference to a non-vector intrinsic on line 2908.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 2906 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2913 
  A loop starting at line 2913 was not vectorized because it contains a reference to a non-vector intrinsic on line 2915.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 2920 
  A loop starting at line 2920 was not vectorized because a recurrence was found on "HCD" at line 2924.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2921 
  A loop starting at line 2921 was not vectorized because it contains a reference to a non-vector intrinsic on line 2922.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 2992 
  A loop starting at line 2992 was not vectorized because it contains a reference to a non-vector intrinsic on line 2994.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 2999 
  A loop starting at line 2999 was not vectorized because a better candidate was found at line 3000.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 2999 
  A loop starting at line 2999 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3000 
  A loop starting at line 3000 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3000 
  A loop starting at line 3000 was not vectorized because it contains a reference to a non-vector intrinsic on line 3002.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3009 
  A loop starting at line 3009 was not vectorized because it contains a reference to a non-vector intrinsic on line 3011.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3023 
  A loop starting at line 3023 was not vectorized because a recurrence was found on "QCD" at line 3028.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3024 
  A loop starting at line 3024 was not vectorized because it contains a reference to a non-vector intrinsic on line 3025.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3049 
  A loop starting at line 3049 was not vectorized because it contains a reference to a non-vector intrinsic on line 3051.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3129 
  A loop starting at line 3129 was not vectorized because it contains a reference to a non-vector intrinsic on line 3131.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 3135 
  A loop starting at line 3135 was not vectorized because a better candidate was found at line 3136.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3136 
  A loop starting at line 3136 was not vectorized because it contains a reference to a non-vector intrinsic on line 3138.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 3147 
  A loop starting at line 3147 was not vectorized because a better candidate was found at line 3148.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3147 
  A loop starting at line 3147 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3148 
  A loop starting at line 3148 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3148 
  A loop starting at line 3148 was not vectorized because it contains a reference to a non-vector intrinsic on line 3149.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3157 
  A loop starting at line 3157 was not vectorized because a recurrence was found on "QC" at line 3165.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3158 
  A loop starting at line 3158 was not vectorized because it contains a reference to a non-vector intrinsic on line 3159.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3241 
  A loop starting at line 3241 was not vectorized because it contains a reference to a non-vector intrinsic on line 3243.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3247 
  A loop starting at line 3247 was not vectorized because a recurrence was found on "AA0" at line 3258.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3248 
  A loop starting at line 3248 was not vectorized because it contains a reference to a non-vector intrinsic on line 3249.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3314 
  A loop starting at line 3314 was not vectorized because it contains a reference to a non-vector intrinsic on line 3316.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3323 
  A loop starting at line 3323 was not vectorized because a recurrence was found on "VWS" at line 3329.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3324 
  A loop starting at line 3324 was not vectorized because it contains a reference to a non-vector intrinsic on line 3326.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3327 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3337 
  A loop starting at line 3337 was not vectorized because it contains a reference to a non-vector intrinsic on line 3339.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3365 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 3385 
  A loop starting at line 3385 was not vectorized because a better candidate was found at line 3386.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3385 
  A loop starting at line 3385 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3386 
  A loop starting at line 3386 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3386 
  A loop starting at line 3386 was not vectorized because it contains a reference to a non-vector intrinsic on line 3388.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3399 
  A loop starting at line 3399 was blocked with block size 16.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3399 
  A loop starting at line 3399 was not vectorized because it contains a reference to a non-vector intrinsic on line 3401.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 3400 
  A loop starting at line 3400 was not vectorized because a better candidate was found at line 3399.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3400 
  A loop starting at line 3400 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 3400 
  A loop starting at line 3400 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3448 
  A loop starting at line 3448 was not vectorized because a recurrence was found on "AA0" at line 3456.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3449 
  A loop starting at line 3449 was not vectorized because it contains a reference to a non-vector intrinsic on line 3450.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3498 
  A loop starting at line 3498 was not vectorized because it contains a reference to a non-vector intrinsic on line 3501.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 3573 
  A loop starting at line 3573 was replaced by a library call.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 3574 
  A loop starting at line 3574 was not vectorized because a better candidate was found at line 3575.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 3575 
  A loop starting at line 3575 was replaced by a library call.

ftn-6303 ftn: VECTOR File = Cu_Grellens.f90, Line = 3580 
  A loop starting at line 3580 was not vectorized because an inter-loop dependence relation is too complicated.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3581 
  A loop starting at line 3581 was not vectorized because it contains a reference to a non-vector intrinsic on line 3582.

ftn-6250 ftn: VECTOR File = Cu_Grellens.f90, Line = 3654 
  A loop starting at line 3654 was not vectorized for an unspecified reason.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 3774 
  A loop starting at line 3774 was replaced by a library call.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3775 
  A loop starting at line 3775 was not vectorized because a recurrence was found on "KCLIM" at line 3781.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3775 
  A loop starting at line 3775 was blocked with block size 8.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3776 
  A loop starting at line 3776 was blocked with block size 512.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3776 
  A loop starting at line 3776 was not vectorized because it contains a reference to a non-vector intrinsic on line 3778.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3788 
  A loop starting at line 3788 was not vectorized because it contains a reference to a non-vector intrinsic on line 3792.

ftn-6231 ftn: VECTOR File = Cu_Grellens.f90, Line = 3789 
  A statement was replaced by a library call.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3790 
  A divide was turned into a multiply by a reciprocal

ftn-6303 ftn: VECTOR File = Cu_Grellens.f90, Line = 3797 
  A loop starting at line 3797 was not vectorized because an inter-loop dependence relation is too complicated.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3797 
  A loop starting at line 3797 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3798 
  A loop starting at line 3798 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3798 
  A loop starting at line 3798 was not vectorized because it contains a reference to a non-vector intrinsic on line 3799.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3800 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3801 
  A divide was turned into a multiply by a reciprocal

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3808 
  A loop starting at line 3808 was not vectorized because it contains a reference to a non-vector intrinsic on line 3819.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3832 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3833 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3850 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3851 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 3852 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 3873 
  A loop starting at line 3873 was not vectorized because a better candidate was found at line 3874.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3873 
  A loop starting at line 3873 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 3874 
  A loop starting at line 3874 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3874 
  A loop starting at line 3874 was not vectorized because it contains a reference to a non-vector intrinsic on line 3876.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 3906 
  A loop starting at line 3906 was replaced by a library call.

ftn-6303 ftn: VECTOR File = Cu_Grellens.f90, Line = 3907 
  A loop starting at line 3907 was not vectorized because an inter-loop dependence relation is too complicated.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3908 
  A loop starting at line 3908 was not vectorized because it contains a reference to a non-vector intrinsic on line 3909.

ftn-6202 ftn: VECTOR File = Cu_Grellens.f90, Line = 3917 
  A loop starting at line 3917 was replaced by a library call.

ftn-6303 ftn: VECTOR File = Cu_Grellens.f90, Line = 3918 
  A loop starting at line 3918 was not vectorized because an inter-loop dependence relation is too complicated.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3919 
  A loop starting at line 3919 was not vectorized because it contains a reference to a non-vector intrinsic on line 3920.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 3928 
  A loop starting at line 3928 was not vectorized because a recurrence was found on "XF" at line 4053.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 3929 
  A loop starting at line 3929 was not vectorized because it contains a reference to a non-vector intrinsic on line 3930.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4071 
  A loop starting at line 4071 was not vectorized because a better candidate was found at line 4073.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4072 
  A loop starting at line 4072 was not vectorized because a better candidate was found at line 4073.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4073 
  A loop starting at line 4073 was not vectorized because it contains a reference to a non-vector intrinsic on line 4075.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4110 
  A loop starting at line 4110 was blocked with block size 16.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4110 
  A loop starting at line 4110 was not vectorized because it contains a reference to a non-vector intrinsic on line 4112.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4111 
  A loop starting at line 4111 was not vectorized because a better candidate was found at line 4110.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4111 
  A loop starting at line 4111 was blocked with block size 256.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4190 
  A loop starting at line 4190 was not vectorized because a better candidate was found at line 4191.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4191 
  A loop starting at line 4191 was not vectorized because it contains a reference to a non-vector intrinsic on line 4193.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4204 
  A loop starting at line 4204 was not vectorized because it contains a reference to a non-vector intrinsic on line 4206.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 4219 
  A loop starting at line 4219 was not vectorized because a recurrence was found on "XMB" at line 4225.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4220 
  A loop starting at line 4220 was not vectorized because it contains a reference to a non-vector intrinsic on line 4222.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4232 
  A loop starting at line 4232 was not vectorized because it contains a reference to a non-vector intrinsic on line 4234.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 4250 
  A loop starting at line 4250 was not vectorized because a recurrence was found on "DTT" at line 4254.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4251 
  A loop starting at line 4251 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4251 
  A loop starting at line 4251 was not vectorized because it contains a reference to a non-vector intrinsic on line 4253.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4252 
  A loop starting at line 4252 was not vectorized because a better candidate was found at line 4251.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4252 
  A loop starting at line 4252 was blocked with block size 256.

ftn-6254 ftn: VECTOR File = Cu_Grellens.f90, Line = 4263 
  A loop starting at line 4263 was not vectorized because a recurrence was found on "XMB" at line 4268.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4264 
  A loop starting at line 4264 was not vectorized because it contains a reference to a non-vector intrinsic on line 4265.

ftn-6010 ftn: SCALAR File = Cu_Grellens.f90, Line = 4266 
  A divide was turned into a multiply by a reciprocal

ftn-6315 ftn: VECTOR File = Cu_Grellens.f90, Line = 4293 
  A loop starting at line 4293 was not vectorized because the target array (XFAC1) would require rank expansion.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4294 
  A loop starting at line 4294 was not vectorized because it contains a reference to a non-vector intrinsic on line 4296.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4322 
  A loop starting at line 4322 was not vectorized because it contains a reference to a non-vector intrinsic on line 4323.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4339 
  A loop starting at line 4339 was not vectorized because it contains a reference to a non-vector intrinsic on line 4340.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4356 
  A loop starting at line 4356 was not vectorized because it contains a reference to a non-vector intrinsic on line 4359.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4358 
  A loop starting at line 4358 was not vectorized because a better candidate was found at line 4356.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4358 
  A loop starting at line 4358 was unrolled 4 times.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4375 
  A loop starting at line 4375 was not vectorized because it contains a reference to a non-vector intrinsic on line 4378.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4377 
  A loop starting at line 4377 was not vectorized because a better candidate was found at line 4375.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4377 
  A loop starting at line 4377 was unrolled 4 times.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4396 
  A loop starting at line 4396 was not vectorized because a better candidate was found at line 4397.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4396 
  A loop starting at line 4396 was blocked with block size 8.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4397 
  A loop starting at line 4397 was blocked with block size 16.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4397 
  A loop starting at line 4397 was not vectorized because it contains a reference to a non-vector intrinsic on line 4400.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4399 
  A loop starting at line 4399 was not vectorized because a better candidate was found at line 4397.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4399 
  A loop starting at line 4399 was unrolled 4 times.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4418 
  A loop starting at line 4418 was not vectorized because a better candidate was found at line 4419.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4418 
  A loop starting at line 4418 was blocked with block size 16.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4419 
  A loop starting at line 4419 was blocked with block size 32.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4419 
  A loop starting at line 4419 was not vectorized because it contains a reference to a non-vector intrinsic on line 4422.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4421 
  A loop starting at line 4421 was not vectorized because a better candidate was found at line 4419.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4421 
  A loop starting at line 4421 was unrolled 4 times.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4446 
  A loop starting at line 4446 was not vectorized because it contains a reference to a non-vector intrinsic on line 4447.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4463 
  A loop starting at line 4463 was not vectorized because it contains a reference to a non-vector intrinsic on line 4464.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4480 
  A loop starting at line 4480 was not vectorized because it contains a reference to a non-vector intrinsic on line 4483.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4482 
  A loop starting at line 4482 was not vectorized because a better candidate was found at line 4480.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4482 
  A loop starting at line 4482 was unrolled 4 times.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4499 
  A loop starting at line 4499 was not vectorized because it contains a reference to a non-vector intrinsic on line 4502.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4501 
  A loop starting at line 4501 was not vectorized because a better candidate was found at line 4499.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4501 
  A loop starting at line 4501 was unrolled 4 times.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4520 
  A loop starting at line 4520 was not vectorized because a better candidate was found at line 4521.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4520 
  A loop starting at line 4520 was blocked with block size 8.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4521 
  A loop starting at line 4521 was blocked with block size 16.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4521 
  A loop starting at line 4521 was not vectorized because it contains a reference to a non-vector intrinsic on line 4524.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4523 
  A loop starting at line 4523 was not vectorized because a better candidate was found at line 4521.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4523 
  A loop starting at line 4523 was unrolled 4 times.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4542 
  A loop starting at line 4542 was not vectorized because a better candidate was found at line 4543.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4542 
  A loop starting at line 4542 was blocked with block size 16.

ftn-6049 ftn: SCALAR File = Cu_Grellens.f90, Line = 4543 
  A loop starting at line 4543 was blocked with block size 32.

ftn-6263 ftn: VECTOR File = Cu_Grellens.f90, Line = 4543 
  A loop starting at line 4543 was not vectorized because it contains a reference to a non-vector intrinsic on line 4546.

ftn-6294 ftn: VECTOR File = Cu_Grellens.f90, Line = 4545 
  A loop starting at line 4545 was not vectorized because a better candidate was found at line 4543.

ftn-6005 ftn: SCALAR File = Cu_Grellens.f90, Line = 4545 
  A loop starting at line 4545 was unrolled 4 times.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
               C r o s s   R e f e r e n c e   for   CU_GRELLENS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

101                                                               Statement label
  Decl    1064
  Set 
  Used    1074

200                                                               Statement label
  Decl    2132
  Set 
  Used    2105

250                                                               Statement label
  Decl    2247
  Set 
  Used    1741

A                               Stack                             REAL(KIND=8)
  Decl    2813
  Set     2837
  Used    2852    2854

A1                              Stack                             REAL(KIND=8)
  Decl    3733
  Set     4016    4018    4020
  Used    4017    4019    4021

AA0                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     475
  Set      735
  Used    1315

AA0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1616    1676
  Set 
  Used    2194

AA0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3206    3218
  Set     3243    3257    3258
  Used    3258

AA0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3423    3441
  Set     3456
  Used

AA0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3664    3692
  Set     3792
  Used    3819    3820    3821    3822

AA0_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     607
  Set 
  Used    1495

AA1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     474
  Set      736
  Used    1330    1347    1357

AA1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1617    1677
  Set 
  Used    2195

AA1                             Stack                             REAL(KIND=8)
  Decl    3305
  Set     3327
  Used    3329

AA1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3664    3693
  Set 
  Used    3819    3820    3821    3822    3850    3851    3852    3865    3866    3867    3868    3876

AA1_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     608
  Set 
  Used    1496

AA2                             Stack                             REAL(KIND=8)
  Decl    3306
  Set     3328
  Used    3329

AAEQ                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     472
  Set      738
  Used     739

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3328    3635

ACLIM1                          Stack                             REAL(KIND=8)
  Decl    3736
  Set     3860
  Used    3865

ACLIM2                          Stack                             REAL(KIND=8)
  Decl    3737
  Set     3861
  Used    3866

ACLIM3                          Stack                             REAL(KIND=8)
  Decl    3738
  Set     3862
  Used    3867

ACLIM4                          Stack                             REAL(KIND=8)
  Decl    3739
  Set     3863
  Used    3868

ACRIT                                                             REAL(KIND=8), PARAMETER, DIMENSION(15), PRIVATE
  Decl     132
  Set 
  Used

ACRITT                                                            REAL(KIND=8), PARAMETER, DIMENSION(15), PRIVATE
  Decl     138
  Set 
  Used

AE                              Static offset=0                   REAL(KIND=8), DIMENSION(2), PRIVATE, SAVE
  Decl     143
  Set      250     254
  Used    4559    4561

ANY                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    3654

ARRAY                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2428    2437
  Set 
  Used    2449    2455    2456

ARRAY                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2467    2475
  Set 
  Used    2489    2498    2499

BE                              Static offset=512                 REAL(KIND=8), DIMENSION(2), PRIVATE, SAVE
  Decl     144
  Set      248     252
  Used     250     254    4559    4561

BETA                                                              REAL(KIND=8), PARAMETER, DIMENSION(16), PRIVATE
  Decl     123
  Set 
  Used

BETA1                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     120
  Set 
  Used

BETA2                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     121
  Set 
  Used

BETA3                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     122
  Set 
  Used

BNCY                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     331
  Set      378
  Used     384

BNCY                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     414     448
  Set     1349
  Used

BU                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     483
  Set 
  Used    1220    1245

BU                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1694
  Set 
  Used    2055

BU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2940    2953
  Set     2994    3019    3035
  Used

C0                              Stack                             REAL(KIND=8)
  Decl    3097
  Set     3119    3125
  Used    3175    3182

CAPE                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     335
  Set      379
  Used     384

CAP_INC                         Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2509    2527
  Set 
  Used    2591

CAP_MAX                         Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     484
  Set      750     751
  Used     935

CAP_MAX                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1615    1675
  Set 
  Used    2172    2190

CAP_MAX                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2512    2523
  Set 
  Used    2591

CAP_MAXS                        Static offset=640                 REAL(KIND=8), PRIVATE, SAVE
  Decl     156
  Set      224
  Used     750

CAP_MAXS_LAND                   Static offset=704                 REAL(KIND=8), PRIVATE, SAVE
  Decl     157
  Set      225
  Used     751

CAP_MAX_GZ                      Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     606
  Set 
  Used    1494

CAP_MAX_INCREMENT               Static offset=768                 REAL(KIND=8), PRIVATE, SAVE
  Decl     158
  Set      229
  Used     922    2159    2177

CD                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     536
  Set      729     958     960     963     965
  Used     965     976     994    1107    1121    1271    1301

CD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1594    1654
  Set 
  Used    1819    1845    1869    1976    1996    2075

CD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2608    2626
  Set 
  Used    2679    2680

CD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2739    2751
  Set 
  Used    2781

CD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3064    3084
  Set 
  Used    3165    3166

CD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3524    3541
  Set 
  Used    3603

CDD                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     537
  Set      730
  Used    1137    1152    1170    1186    1210    1235

CDD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1588    1648
  Set 
  Used    1774    1791    1810    1860    2008    2026    2045

CDD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2791    2807
  Set     2832    2852
  Used    2857

CDD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2869    2879
  Set 
  Used    2924    2926

CDD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2938    2964
  Set 
  Used    3028    3030

CDD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3468    3480
  Set 
  Used    3503

CDD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3522    3537
  Set 
  Used    3588

CDD_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     579
  Set 
  Used

CD_GZ                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     585
  Set 
  Used

CNT                             Stack                             INTEGER
  Decl    2539
  Set     2561    2582
  Used    2562    2583

COMPRESS                                                          Generic interface
  Decl     164
  Set 
  Used

COMPRESS_I1D                                                      Subroutine, Module procedure, PRIVATE
  Decl    4329
  Set 
  Used       0       0       0       0    1396    1415    1417    1431    1396    1414    1415    1416    1417    1418    1431
          1438

COMPRESS_I2D                                                      Subroutine, Module procedure, PRIVATE
  Decl    4366
  Set 
  Used

COMPRESS_I3D                                                      Subroutine, Module procedure, PRIVATE
  Decl    4408
  Set 
  Used

COMPRESS_R1D                                                      Subroutine, Module procedure, PRIVATE
  Decl    4312
  Set 
  Used       0       0       0       0    1424    1434    1436    1423    1424    1433    1434    1435    1436    1439

COMPRESS_R2D                                                      Subroutine, Module procedure, PRIVATE
  Decl    4347
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
          1401    1403    1405    1407    1409    1411    1413    1420    1422    1426    1428    1430    1437    1441    1395
          1401    1402    1403    1404    1405    1406    1407    1408    1409    1410    1411    1412    1413    1419    1420
          1421    1422    1425    1426    1427    1428    1429    1430    1432    1437    1440    1441    1442

COMPRESS_R3D                                                      Subroutine, Module procedure, PRIVATE
  Decl    4386
  Set 
  Used       0       0    1397    1399    1397    1398    1399    1400

CONSTANTS                                                         Module
  Decl
  Set 
  Used      91

COUNT                                                             Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    1392

CP                                                                REAL(KIND=8), PARAMETER, PRIVATE
  Decl     102
  Set 
  Used     244     246    2403    2419

CUPCLW                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     330
  Set      375     402
  Used     384     402

CUPCLW                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     414     447
  Set     1284
  Used

CUP_DD_AA0                                                        Subroutine, Module procedure, PRIVATE
  Decl    3422
  Set 
  Used

CUP_DD_EDT                                                        Subroutine, Module procedure, PRIVATE
  Decl    3268
  Set 
  Used    1365

CUP_DD_HE                                                         Subroutine, Module procedure, PRIVATE
  Decl    2869
  Set 
  Used       0    1182    2023

CUP_DD_MOISTURE                                                   Subroutine, Module procedure, PRIVATE
  Decl    2936
  Set 
  Used       0    1226    2037

CUP_DD_NMS                                                        Subroutine, Module procedure, PRIVATE
  Decl    2791
  Set 
  Used       0    1149    2006

CUP_DELLABOT                                                      Subroutine, Module procedure, PRIVATE
  Decl    3466
  Set 
  Used       0    1783

CUP_DELLAS                                                        Subroutine, Module procedure, PRIVATE
  Decl    3520
  Set 
  Used       0    1853

CUP_ENV                                                           Subroutine, Module procedure, PRIVATE
  Decl    2254
  Set 
  Used       0     785    1919

CUP_ENV_CLEV                                                      Subroutine, Module procedure, PRIVATE
  Decl    2338
  Set 
  Used       0     826    1938

CUP_FORCING_ENS_16                                                Subroutine, Module procedure, PRIVATE
  Decl    3663
  Set 
  Used    2193

CUP_KBCON                                                         Subroutine, Module procedure, PRIVATE
  Decl    2509
  Set 
  Used       0    2158    2176

CUP_KTOP                                                          Subroutine, Module procedure, PRIVATE
  Decl    2690
  Set 
  Used    1010

CUP_MAXIMI                                                        Subroutine, Module procedure, PRIVATE
  Decl    2427
  Set 
  Used       0    2137

CUP_MINIMI                                                        Subroutine, Module procedure, PRIVATE
  Decl    2467
  Set 
  Used       0    1037

CUP_OUTPUT_ENS                                                    Subroutine, Module procedure, PRIVATE
  Decl    4124
  Set 
  Used    1525

CUP_UP_AA0                                                        Subroutine, Module procedure, PRIVATE
  Decl    3205
  Set 
  Used       0    1329    2087

CUP_UP_HE                                                         Subroutine, Module procedure, PRIVATE
  Decl    2608
  Set 
  Used       0     990    1972

CUP_UP_MOISTURE                                                   Subroutine, Module procedure, PRIVATE
  Decl    3061
  Set 
  Used       0    1288    2063

CUP_UP_NMS                                                        Subroutine, Module procedure, PRIVATE
  Decl    2738
  Set 
  Used       0    1117    1992

CU_GRELLENS                                                       Module
  Decl       6
  Set 
  Used

DA                              Stack                             REAL(KIND=8)
  Decl    3226
  Set     3251
  Used    3254    3257

DBY                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     492
  Set 
  Used     986    1272    1318

DBY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2610    2627
  Set     2658    2662    2670    2682
  Used

DBY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2691    2703
  Set     2729
  Used

DBY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2871    2881
  Set     2906    2916    2927
  Used

DBY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    3064    3083
  Set 
  Used    3171

DBY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3206    3223
  Set 
  Used    3252

DBYD                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     510
  Set 
  Used    1179

DBYD                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1697
  Set 
  Used    2035

DBYDO                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     511
  Set 
  Used    1195

DBYO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     501
  Set 
  Used    1004    1012    1302    1333    1349

DDTES                           Stack                             REAL(KIND=8)
  Decl    4167
  Set     4248
  Used    4268    4269    4273    4274    4275    4279    4280

DEC_FUDGE                                                         REAL(KIND=8), PARAMETER, PRIVATE
  Decl     142
  Set 
  Used    3860    3861    3862    3863

DELLA                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3469    3482
  Set     3499    3509
  Used

DELLA                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3523    3539
  Set     3576    3640
  Used

DELLAH                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1690
  Set 
  Used    1780    1816    1898    1900

DELLAQ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1689
  Set 
  Used    1797    1866    1899    1900    2236

DELLAQ                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    4125    4151
  Set 
  Used    4255

DELLAQC                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1691
  Set     1836    1839    1845
  Used    2237

DELLAQC                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>)
  Decl    4125    4172
  Set 
  Used    4256

DELLAQC_ENS                     Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     541
  Set 
  Used    1530

DELLAQC_ENS                     Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    1581    1641
  Set     1754    2237    2242
  Used

DELLAQC_ENS_GZ                  Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     572
  Set 
  Used

DELLAQ_ENS                      Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     540
  Set 
  Used    1529

DELLAQ_ENS                      Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    1580    1640
  Set     1753    2236    2241
  Used

DELLAQ_ENS_GZ                   Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     571
  Set 
  Used

DELLAT                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1688
  Set     1896    1900
  Used    1901    2125    2235

DELLAT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    4125    4150
  Set 
  Used    4254

DELLAT_ENS                      Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     539
  Set 
  Used    1528

DELLAT_ENS                      Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    1579    1639
  Set     1752    2235    2240
  Used

DELLAT_ENS_GZ                   Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     570
  Set 
  Used

DEPTH_MIN                       Static offset=832                 REAL(KIND=8), PRIVATE, SAVE
  Decl     155
  Set      215
  Used    1095

DETDO                           Stack                             REAL(KIND=8)
  Decl    3495
  Set     3508
  Used

DETDO                           Stack                             REAL(KIND=8)
  Decl    3560
  Set     3588    3617
  Used    3633    3644

DETDO1                          Stack                             REAL(KIND=8)
  Decl    3488
  Set     3503
  Used    3508    3509

DETDO2                          Stack                             REAL(KIND=8)
  Decl    3489
  Set     3504
  Used    3508    3510

DETRA                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     106
  Set 
  Used     184

DETUP                           Stack                             REAL(KIND=8)
  Decl    3562
  Set     3592    3603    3627
  Used    3632    3643

DETUPK                          Stack                             REAL(KIND=8)
  Decl    3566
  Set     3596    3623
  Used    3633    3649

DH                              Stack                             REAL(KIND=8)
  Decl    2973
  Set     3018    3034
  Used    3019    3035    3037

DH2                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     556
  Set     1051    1066    1073
  Used    1068    1084

DOWN_MASSFLX                    Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     334
  Set 
  Used

DP                              Stack                             REAL(KIND=8)
  Decl    3492
  Set     3502
  Used    3512

DP                              Stack                             REAL(KIND=8)
  Decl    3557
  Set     3639
  Used    3650

DQ                              Stack                             REAL(KIND=8)
  Decl     550
  Set      713
  Used     714

DQEVA                           Stack                             REAL(KIND=8)
  Decl    2972
  Set     3038    3040
  Used    3040    3042

DTIME                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     260     287
  Set 
  Used     383     390     400     401

DTIME                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     413     421
  Set 
  Used     753    1455

DTIME                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1576    1636
  Set 
  Used    2198

DTIME                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3664    3709
  Set 
  Used    3819    3820    3821    3822    3865    3866    3867    3868

DTPW                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    4171
  Set     4199    4257
  Used    4286

DTQ                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    4169
  Set     4197    4255
  Used    4284

DTQC                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    4170
  Set     4198    4256
  Used    4285

DTT                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    4168
  Set     4196    4254
  Used    4266    4283

DZ                              Stack                             REAL(KIND=8)
  Decl    1732
  Set     1844
  Used    1845

DZ                              Stack                             REAL(KIND=8)
  Decl    2633
  Set     2677
  Used    2679    2680

DZ                              Stack                             REAL(KIND=8)
  Decl    2759
  Set     2780
  Used    2781

DZ                              Stack                             REAL(KIND=8)
  Decl    2812
  Set     2850
  Used    2855    2857

DZ                              Stack                             REAL(KIND=8)
  Decl    2889
  Set     2923
  Used    2924    2925    2926

DZ                              Stack                             REAL(KIND=8)
  Decl    2971
  Set     3012    3026
  Used    3019    3028    3029    3030    3035

DZ                              Stack                             REAL(KIND=8)
  Decl    3095
  Set     3160
  Used    3165    3166    3175    3182

DZ                              Stack                             REAL(KIND=8)
  Decl    3225
  Set     3250
  Used    3251

DZ                              Stack                             REAL(KIND=8)
  Decl    3442
  Set     3455
  Used    3456

DZ                              Stack                             REAL(KIND=8)
  Decl    3493
  Set     3501
  Used    3503    3505

DZ                              Stack                             REAL(KIND=8)
  Decl    3558
  Set     3587
  Used    3588    3589    3602    3603

EDT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     473
  Set 
  Used    1372

EDT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1693
  Set     1745
  Used    2238

EDT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3269    3290
  Set     3316    3378
  Used    3388    3389

EDT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3423    3440
  Set 
  Used    3456

EDT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3468    3484
  Set 
  Used    3503    3504    3505    3507

EDT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3521    3551
  Set 
  Used    3588    3589    3590    3593    3607

EDT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3668    3695
  Set 
  Used    4098

EDTC                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl     548
  Set 
  Used    1383

EDTC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1577    1637
  Set 
  Used    1745    1746

EDTC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3271    3296
  Set     3389    3402    3408    3410    3413
  Used    3408    3410    3413

EDTC_GZ                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl     568
  Set 
  Used

EDTMAX                          Static offset=896                 REAL(KIND=8), PRIVATE, SAVE
  Decl     152
  Set      206     210
  Used    1380

EDTMAX                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3270    3281
  Set 
  Used    3346    3373    3410

EDTMAX1                         Static offset=960                 REAL(KIND=8), PRIVATE, SAVE
  Decl     153
  Set      207     211
  Used    1388

EDTMAX1                         Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3272    3297
  Set 
  Used    3344    3371    3408

EDTMIN                          Static offset=1024                REAL(KIND=8), PRIVATE, SAVE
  Decl     151
  Set      201
  Used    1381

EDTMIN                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3271    3282
  Set 
  Used    3351    3377    3413

EDTO                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1701
  Set     1746
  Used    1772    1789    1808    1858    2119    2216

EFFMAX                          Static offset=1088                REAL(KIND=8), PRIVATE, SAVE
  Decl     154
  Set      209
  Used     210     211

EINC                            Stack                             REAL(KIND=8)
  Decl    3304
  Set     3388
  Used    3389

ENSDIM                                                            INTEGER, PARAMETER, PRIVATE
  Decl     115
  Set 
  Used     333     434     543     544     545     599     602     610     614    1453    1548

ENSDIM                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1574    1634
  Set 
  Used    1668    1671    1679    1683    2218

ENSDIM                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3669    3681
  Set 
  Used    3702    3703    3704    4110

ENSDIM                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4130    4137
  Set 
  Used    4153    4154    4155    4156

ENSEMBLE                                                          Subroutine, Module procedure, PRIVATE
  Decl    1565
  Set 
  Used    1444

ENTDO                           Stack                             REAL(KIND=8)
  Decl    3490
  Set     3505
  Used    3508    3512

ENTDO                           Stack                             REAL(KIND=8)
  Decl    3555
  Set     3589
  Used    3632    3646

ENTDOJ                          Stack                             REAL(KIND=8)
  Decl    3564
  Set     3594    3607
  Used    3633    3648

ENTR                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2608    2618
  Set 
  Used    2679    2680

ENTR                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2739    2748
  Set 
  Used    2781

ENTR                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2791    2804
  Set 
  Used    2852    2857

ENTR                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2870    2890
  Set 
  Used    2925    2926

ENTR                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2939    2950
  Set 
  Used    3029    3030

ENTR_RATE                       Static offset=1152                REAL(KIND=8), PRIVATE, SAVE
  Decl     148
  Set      188
  Used     192     193     729     958     960     965

ENTUP                           Stack                             REAL(KIND=8)
  Decl    3561
  Set     3591    3602
  Used    3632    3645

ENTUPK                          Stack                             REAL(KIND=8)
  Decl    3565
  Set     3595    3613
  Used    3633    3647

ES5                                                               Function, REAL(KIND=8), RESULT(ES5), Module procedure, PRIVATE
  Decl    4555
  Set 
  Used

ES5                             Register                          REAL(KIND=8), Function result
  Decl
  Set     4559    4561
  Used

EXP                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    4561

FLOAT                                                             Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0     753     961    3388    4235    4266    4283    4284    4285    4286

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

G                               Stack                             REAL(KIND=8)
  Decl    3491
  Set     3497
  Used    3512

G                               Stack                             REAL(KIND=8)
  Decl    3556
  Set     3572
  Used    3650

GAMMAO_CUP                      Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     534
  Set 
  Used     839    1239    1305    1334

GAMMA_CUP                       Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     526
  Set 
  Used     816    1214    1275    1319

GAMMA_CUP                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1607    1667
  Set 
  Used    1952    2049    2079    2091

GAMMA_CUP                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2341    2363
  Set     2403    2419
  Used

GAMMA_CUP                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2939    2965
  Set 
  Used    3036    3037

GAMMA_CUP                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3065    3081
  Set 
  Used    3170    3171

GAMMA_CUP                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3206    3221
  Set 
  Used    3253

GAMMA_CUP                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3423    3434
  Set 
  Used    3457

GAMMA_CUP_GZ                    Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     598
  Set 
  Used

GRELLENS                                                          Subroutine, Module procedure
  Decl     101     258
  Set 
  Used

GRELLENS2                                                         Subroutine, Module procedure, PRIVATE
  Decl     411
  Set 
  Used     381

GREPAR1                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3670    3685
  Set 
  Used    4052    4090    4091

GREPAR1                         Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    2227

GREPAR2                         Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     691

GREPAR3                         Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     224     225

GREPAR4                         Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     229

HC                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     512
  Set 
  Used     979

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2609    2624
  Set     2657    2661    2669    2679
  Used    2682

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3524    3540
  Set 
  Used    3643    3649

HCD                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     506
  Set 
  Used    1168    1203

HCD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2869    2882
  Set     2908    2915    2924
  Used    2916    2927

HCD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2937    2960
  Set 
  Used    3018    3034

HCD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3424    3439
  Set 
  Used    3457

HCD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3467    3478
  Set 
  Used    3509    3510

HCD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3521    3535
  Set 
  Used    3644

HCDO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     507
  Set 
  Used    1184    1228

HCDO                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1586    1646
  Set 
  Used    1771    1807

HCDO_GZ                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     577
  Set 
  Used

HCO                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     513
  Set 
  Used     997

HCO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1595    1655
  Set 
  Used    1820

HCO_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     586
  Set 
  Used

HE                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     488
  Set 
  Used     771     806     987    1178

HE                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2255    2264
  Set     2316    2318    2329
  Used    2318    2326    2329

HE                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2339    2353
  Set 
  Used    2397    2414

HE                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2610    2628
  Set 
  Used    2680

HE                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2871    2880
  Set 
  Used    2925

HE                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3468    3481
  Set 
  Used    3512

HE                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3522    3538
  Set 
  Used    3645    3646

HEO                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     497
  Set 
  Used     787     829    1005    1194

HEO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1589    1649
  Set 
  Used    1775    1811    1898    1910

HEO_CUP                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     530
  Set 
  Used     835     896     926     996

HEO_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1583    1643
  Set 
  Used    1767    1826    2163    2181

HEO_CUP_GZ                      Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     574
  Set 
  Used

HEO_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     580
  Set 
  Used

HES                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     489
  Set 
  Used     772     807

HES                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2255    2265
  Set     2317    2328
  Used    2318    2329

HES                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2339    2354
  Set 
  Used    2396    2413

HESO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     498
  Set 
  Used     788     830

HESO_CUP                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     531
  Set 
  Used     836     927     945    1006    1038    1067    1183    1229

HESO_CUP                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1614    1674
  Set 
  Used    2164    2182

HESO_CUP_GZ                     Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     605
  Set 
  Used

HES_CUP                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     523
  Set 
  Used     813     988    1167    1204

HES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2340    2360
  Set     2396    2413
  Used    2399

HES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2510    2525
  Set 
  Used    2563

HES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2611    2629
  Set 
  Used    2670    2682

HES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2869    2883
  Set 
  Used    2908    2915    2916    2927

HES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2937    2959
  Set 
  Used    3018    3034

HES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3424    3437
  Set 
  Used    3457

HE_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     522
  Set 
  Used     812     978

HE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1612    1672
  Set 
  Used    2137

HE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2340    2359
  Set     2397    2399    2414
  Used    2399

HE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2510    2524
  Set 
  Used    2563

HE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2609    2623
  Set 
  Used    2650    2657

HE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3467    3483
  Set 
  Used    3511

HE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3525    3543
  Set 
  Used    3641    3642    3647    3648

HE_CUP_GZ                       Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     603
  Set 
  Used

HKB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     476
  Set      938
  Used     974

HKB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2608    2622
  Set     2650
  Used    2661    2669    2670

HKBO                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     477
  Set 
  Used     938     992

HT                              Static offset=1536                REAL(KIND=8), DIMENSION(2), PRIVATE, SAVE
  Decl     145
  Set      244     246
  Used     248     252

I                               Stack                             INTEGER
  Decl     326
  Set      340     352     389     397
  Used     341     342     343     353     354     355     356     357     360     361     362     363     364     365     390
           391     392     393     394     398     400     401     402

I                               Stack                             INTEGER
  Decl     453
  Set      700     712     718     725     734     749     758     853     864     906     936     955    1023    1053    1063
          1082    1093    1283    1346    1355    1554
  Used     704     705     706     713     714     719     729     730     735     736     737     738     739     740     742
           750     751     759     760     761     762     854     855     865     866     867     907     908     909     937
           938     957     958     960     961     963     965    1024    1025    1026    1027    1028    1054    1056    1057
          1058    1066    1067    1068    1069    1070    1071    1072    1073    1075    1076    1083    1084    1085    1094
          1095    1096    1284    1347    1349    1356    1357    1358    1555

I                               Stack                             INTEGER
  Decl    1734
  Set     1743    1751    1834    1887    1895    1908    1966    2106    2116    2123    2147    2233
  Used    1744    1745    1746    1752    1753    1754    1755    1835    1836    1837    1838    1839    1840    1841    1843
          1844    1845    1846    1847    1888    1896    1897    1898    1899    1900    1901    1902    1909    1910    1911
          1912    1913    1967    1968    2107    2108    2117    2118    2119    2124    2125    2126    2127    2148    2149
          2151    2152    2234    2235    2236    2237    2238    2240    2241    2242    2243

I                               Stack                             INTEGER
  Decl    2278
  Set     2282    2307    2324
  Used    2283    2288    2289    2290    2294    2308    2310    2311    2313    2314    2316    2317    2318    2325    2326
          2327    2328    2329

I                               Stack                             INTEGER
  Decl    2368
  Set     2392    2409
  Used    2393    2394    2395    2396    2397    2399    2400    2401    2402    2403    2404    2410    2411    2412    2413
          2414    2416    2417    2418    2419    2420

I                               Stack                             INTEGER
  Decl    2443
  Set     2446    2453
  Used    2447    2448    2449    2454    2455    2456    2457

I                               Stack                             INTEGER
  Decl    2483
  Set     2486    2495
  Used    2487    2488    2489    2490    2496    2497    2498    2499    2500

I                               Stack                             INTEGER
  Decl    2533
  Set     2544    2562    2583
  Used    2545    2546    2548    2550    2563    2564    2565    2567    2569    2573    2577    2584    2590    2591    2593
          2594    2596

I                               Stack                             INTEGER
  Decl    2631
  Set     2648    2655    2667    2675
  Used    2649    2650    2656    2657    2658    2660    2661    2662    2668    2669    2670    2676    2677    2679    2680
          2682

I                               Stack                             INTEGER
  Decl    2705
  Set     2710    2719    2727
  Used    2711    2712    2713    2720    2721    2722    2728    2729

I                               Stack                             INTEGER
  Decl    2757
  Set     2762    2770    2778
  Used    2763    2764    2771    2772    2779    2780    2781

I                               Stack                             INTEGER
  Decl    2809
  Set     2829    2839    2845
  Used    2830    2831    2832    2840    2841    2850    2852    2853    2854    2855    2857

I                               Stack                             INTEGER
  Decl    2886
  Set     2905    2913    2921
  Used    2906    2907    2908    2914    2915    2916    2922    2923    2924    2925    2926    2927

I                               Stack                             INTEGER
  Decl    2968
  Set     2992    3000    3009    3024    3049
  Used    2993    2994    2995    3001    3002    3003    3004    3010    3011    3012    3013    3014    3015    3016    3017
          3018    3019    3025    3026    3028    3029    3030    3034    3035    3036    3037    3038    3042    3043    3044
          3050    3052

I                               Stack                             INTEGER
  Decl    3091
  Set     3129    3136    3148    3158
  Used    3130    3131    3137    3138    3142    3143    3149    3150    3159    3160    3165    3166    3170    3171    3175
          3176    3177    3182    3184    3185    3186    3191    3195

I                               Stack                             INTEGER
  Decl    3227
  Set     3241    3248
  Used    3242    3243    3249    3250    3251    3252    3253    3257    3258

I                               Stack                             INTEGER
  Decl    3307
  Set     3314    3324    3337    3386    3400
  Used    3315    3316    3317    3318    3319    3325    3326    3327    3328    3329    3330    3332    3338    3339    3340
          3343    3355    3370    3378    3387    3388    3389    3401    3402    3407    3408    3410    3413

I                               Stack                             INTEGER
  Decl    3443
  Set     3449
  Used    3450    3451    3455    3456    3457

I                               Stack                             INTEGER
  Decl    3496
  Set     3498
  Used    3499    3500    3501    3502    3503    3504    3505    3507    3509    3510    3511    3512

I                               Stack                             INTEGER
  Decl    3569
  Set     3575    3581
  Used    3576    3582    3587    3588    3589    3590    3593    3601    3602    3603    3606    3607    3612    3613    3616
          3622    3623    3626    3636    3639    3640    3641    3642    3643    3644    3645    3646    3647    3648    3649

I                               Stack                             INTEGER
  Decl    3726
  Set     3776    3788    3798    3808    3874    3908    3919    3929    4073    4111
  Used    3777    3778    3779    3781    3789    3790    3791    3792    3793    3799    3800    3801    3809    3819    3820
          3821    3822    3832    3833    3834    3842    3843    3844    3850    3851    3852    3859    3860    3862    3865
          3866    3867    3868    3869    3875    3876    3877    3878    3879    3909    3910    3911    3912    3920    3921
          3922    3923    3930    3950    3960    3969    3970    3972    3974    3980    3982    3984    3986    3990    3991
          3992    3997    3998    3999    4000    4006    4008    4010    4016    4017    4018    4019    4020    4021    4029
          4031    4033    4035    4038    4039    4040    4053    4054    4055    4057    4058    4059    4060    4074    4075
          4083    4091    4098    4099    4112    4113    4114

I                               Stack                             INTEGER
  Decl    4163
  Set     4191    4204    4220    4232    4252    4264    4294
  Used    4192    4193    4194    4195    4196    4197    4198    4199    4205    4206    4207    4208    4209    4210    4221
          4222    4223    4224    4225    4226    4233    4234    4235    4237    4238    4240    4253    4254    4255    4256
          4257    4265    4266    4268    4274    4279    4283    4284    4285    4286    4295    4296    4297    4298    4299

I                               Stack                             INTEGER
  Decl    4319
  Set     4322
  Used    4323    4325

I                               Stack                             INTEGER
  Decl    4336
  Set     4339
  Used    4340    4342

I                               Stack                             INTEGER
  Decl    4354
  Set     4358
  Used    4359    4361

I                               Stack                             INTEGER
  Decl    4373
  Set     4377
  Used    4378    4380

I                               Stack                             INTEGER
  Decl    4393
  Set     4399
  Used    4400    4402

I                               Stack                             INTEGER
  Decl    4415
  Set     4421
  Used    4422    4424

I                               Stack                             INTEGER
  Decl    4443
  Set     4446
  Used    4447    4449

I                               Stack                             INTEGER
  Decl    4460
  Set     4463
  Used    4464    4466

I                               Stack                             INTEGER
  Decl    4478
  Set     4482
  Used    4483    4485

I                               Stack                             INTEGER
  Decl    4497
  Set     4501
  Used    4502    4504

I                               Stack                             INTEGER
  Decl    4517
  Set     4523
  Used    4524    4526

I                               Stack                             INTEGER
  Decl    4539
  Set     4545
  Used    4546    4548

IALL                            Stack                             INTEGER
  Decl    3093
  Set     3118
  Used    3183

IB                              Stack                             INTEGER
  Decl     560
  Set     1062
  Used    1063

IEDT                            Stack                             INTEGER
  Decl    1626
  Set     1741
  Used    1745    1746    1752    1753    1754    1755    2112    2235    2236    2237    2238    2240    2241    2242    2243

IEDT                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3667    3683
  Set 
  Used    3880

IEND                            Stack                             INTEGER
  Decl     457
  Set      690
  Used     700     712     718     725     734     749     758     780     796     822     845     853     864     903     906
           931     936     952     955     985    1003    1018    1021    1023    1045    1051    1053    1082    1093    1113
          1127    1144    1159    1177    1193    1219    1244    1270    1283    1300    1326    1341    1346    1355    1379
          1395    1396    1397    1398    1399    1400    1401    1402    1403    1404    1405    1406    1407    1408    1409
          1410    1411    1412    1413    1414    1415    1416    1417    1418    1419    1420    1421    1422    1423    1424
          1425    1426    1427    1428    1429    1430    1431    1432    1433    1434    1435    1436    1437    1438    1439
          1440    1441    1442    1505    1506    1507    1508    1509    1510    1511    1512    1513    1514    1515    1516
          1517    1518    1519    1541    1554

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1567    1628
  Set 
  Used    1743    1751    1779    1796    1815    1834    1865    1887    1895    1908    1931    1958    1966    1985    2002
          2015    2033    2054    2074    2098    2106    2116    2123    2144    2147    2168    2186    2204    2233

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2256    2271
  Set 
  Used    2282    2307    2324

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2341    2348
  Set 
  Used    2392    2409

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2429    2436
  Set 
  Used    2446    2453

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2468    2474
  Set 
  Used    2486    2495

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2511    2517
  Set 
  Used    2534    2537    2544

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2610    2617
  Set 
  Used    2648    2655    2667    2675

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2692    2698
  Set 
  Used    2708    2710    2719    2727

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2740    2747
  Set 
  Used    2762    2770    2778

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2792    2799
  Set 
  Used    2829    2839    2845

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2871    2877
  Set 
  Used    2905    2913    2921

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2940    2948
  Set 
  Used    2992    3000    3009    3024    3049

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3064    3070
  Set 
  Used    3129    3136    3148    3158

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3208    3214
  Set 
  Used    3241    3248

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3270    3279
  Set 
  Used    3314    3324    3337    3386    3400

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3425    3431
  Set 
  Used    3449

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3469    3475
  Set 
  Used    3498

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3523    3532
  Set 
  Used    3575    3581

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3666    3676
  Set 
  Used    3774    3776    3788    3798    3808    3874    3908    3919    3929    4073    4111

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4128    4136
  Set 
  Used    4191    4204    4220    4232    4252    4264    4294

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4312    4314
  Set 
  Used    4322

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4329    4331
  Set 
  Used    4339

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4347    4349
  Set 
  Used    4358

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4366    4368
  Set 
  Used    4377

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4386    4388
  Set 
  Used    4399

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4408    4410
  Set 
  Used    4421

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4436    4438
  Set 
  Used    4446

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4453    4455
  Set 
  Used    4463

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4471    4473
  Set 
  Used    4482

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4490    4492
  Set 
  Used    4501

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4510    4512
  Set 
  Used    4523

IEND                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4532    4534
  Set 
  Used    4545

IENS                                                              INTEGER, PARAMETER, PRIVATE
  Decl     109
  Set 
  Used     760     761     762     959     960    1544    2111    2209

IENS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3667    3682
  Set 
  Used    3879

IENS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4129    4140
  Set 
  Used    4219    4293

IENS_TMP                                                          INTEGER, PARAMETER, PRIVATE
  Decl     110
  Set 
  Used

IER                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3568
  Set     3573    3636
  Used    3654

IERR                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl     465
  Set      740     742     909    1076    1085    1096    1358
  Used     759     782     798     823     846     904     907     932     937     953     983    1001    1019    1024    1046
          1054    1075    1083    1094    1114    1128    1140    1155    1173    1189    1213    1238    1259    1289    1327
          1342    1356    1366    1392    1527

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    1578    1638
  Set 
  Used    1744    1768    1785    1804    1837    1854    1897    1909    1933    1959    1967    1983    2003    2011    2029
          2048    2063    2099    2107    2117    2124    2145    2148    2151    2152    2200    2234

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2257    2273
  Set 
  Used    2283    2308    2325

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2342    2349
  Set 
  Used    2393    2410

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2429    2438
  Set 
  Used    2448

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2468    2479
  Set 
  Used    2488    2496

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    2511    2521
  Set     2567    2569
  Used    2545

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2610    2620
  Set 
  Used    2649    2668    2676

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    2692    2700
  Set     2721    2722
  Used

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2741    2755
  Set 
  Used    2763

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2792    2802
  Set 
  Used    2830    2840

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2870    2885
  Set 
  Used    2907    2914

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    2939    2952
  Set     3052
  Used    2993    3001    3010    3050

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3062    3076
  Set 
  Used    3130    3137

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3208    3217
  Set 
  Used    3242

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3268    3285
  Set 
  Used    3315    3325    3338    3387    3401

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3423    3433
  Set 
  Used

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3467    3485
  Set 
  Used    3500

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3521    3548
  Set 
  Used

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    3665    3689
  Set     3793
  Used    3777    3791    3809    3875    4074    4112

IERR                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    4125    4158
  Set     4238
  Used    4192    4205    4221    4233    4295

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4312    4315
  Set 
  Used    4323

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4329    4332
  Set 
  Used    4340

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4347    4350
  Set 
  Used    4359

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4366    4369
  Set 
  Used    4378

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4386    4389
  Set 
  Used    4400

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4408    4411
  Set 
  Used    4422

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4436    4439
  Set 
  Used    4447

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4453    4456
  Set 
  Used    4464

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4471    4474
  Set 
  Used    4483

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4490    4493
  Set 
  Used    4502

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4510    4513
  Set 
  Used    4524

IERR                            Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4532    4535
  Set 
  Used    4546

IERR2                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1695
  Set     2151
  Used    2169    2225

IERR2                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3670    3690
  Set 
  Used    3909

IERR3                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1696
  Set     2152
  Used    2187    2226

IERR3                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3670    3691
  Set 
  Used    3920

IERR_GZ                         Stack                             INTEGER, DIMENSION(<exp>)
  Decl     569
  Set 
  Used    1457

ILO                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2691    2699
  Set 
  Used    2721    2722

ILOOP                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2510    2518
  Set 
  Used    2566    2568    2591

ILOOP                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2942    2949
  Set 
  Used    3051

INITGRELLENS                                                      Subroutine, Module procedure
  Decl     101     177
  Set 
  Used

IRESULT                         Stack                             INTEGER
  Decl    3723
  Set     3947    4081
  Used    3951    4084

IRESULTD                        Stack                             INTEGER
  Decl    3724
  Set     3942    3950    4076    4083
  Used    3951    4084

IRESULTE                        Stack                             INTEGER
  Decl    3725
  Set     3943    3951    4077    4084
  Used    3952    4085

ISTART                          Stack                             INTEGER
  Decl     456
  Set      689
  Used     779     795     821     844     902     930     951     984    1002    1017    1021    1044    1051    1112    1126
          1143    1158    1176    1192    1218    1243    1269    1299    1325    1340    1378    1395    1396    1397    1398
          1399    1400    1401    1402    1403    1404    1405    1406    1407    1408    1409    1410    1411    1412    1413
          1414    1415    1416    1417    1418    1419    1420    1421    1422    1423    1424    1425    1426    1427    1428
          1429    1430    1431    1432    1433    1434    1435    1436    1437    1438    1439    1440    1441    1442    1445
          1505    1506    1507    1508    1509    1510    1511    1512    1513    1514    1515    1516    1517    1518    1519
          1540

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1566    1627
  Set 
  Used    1778    1795    1814    1864    1930    1957    1984    2001    2014    2032    2053    2073    2097    2143    2167
          2185    2203

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2256    2270
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2341    2347
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2429    2435
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2468    2473
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2511    2516
  Set 
  Used    2534    2537

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2610    2616
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2692    2697
  Set 
  Used    2708

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2740    2746
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2792    2798
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2871    2876
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2940    2947
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3064    3069
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3208    3213
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3270    3278
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3425    3430
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3469    3474
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3523    3531
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3665    3675
  Set 
  Used    3774

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4128    4135
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4312    4313
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4329    4330
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4347    4348
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4366    4367
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4386    4387
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4408    4409
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4436    4437
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4453    4454
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4471    4472
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4490    4491
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4510    4511
  Set 
  Used

ISTART                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4532    4533
  Set 
  Used

ITEST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2257    2274
  Set 
  Used    2305

ITEST                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2793    2800
  Set 
  Used    2832    2851

J                               Stack                             INTEGER
  Decl    4393
  Set     4396
  Used    4402

J                               Stack                             INTEGER
  Decl    4415
  Set     4418
  Used    4424

J                               Stack                             INTEGER
  Decl    4517
  Set     4520
  Used    4526

J                               Stack                             INTEGER
  Decl    4539
  Set     4542
  Used    4548

JDIMS3                          Stack                             INTEGER
  Decl    4393
  Set     4395
  Used    4396

JDIMS3                          Stack                             INTEGER
  Decl    4415
  Set     4417
  Used    4418

JDIMS3                          Stack                             INTEGER
  Decl    4517
  Set     4519
  Used    4520

JDIMS3                          Stack                             INTEGER
  Decl    4539
  Set     4541
  Used    4542

JMIN                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl     467
  Set     1058    1069    1072
  Used    1043    1057    1058    1067    1070    1071    1072    1139    1154    1172    1188    1212    1237

JMIN                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1599    1659
  Set 
  Used    1825    1875    2010    2028    2047

JMIN                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2791    2801
  Set 
  Used    2841

JMIN                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2870    2884
  Set 
  Used    2915    2916    2922

JMIN                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2939    2951
  Set 
  Used    3011    3015    3016    3025

JMIN                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3423    3432
  Set 
  Used    3450    3451

JMIN                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3525    3547
  Set 
  Used    3606    3648

JMIN_GZ                         Stack                             INTEGER, DIMENSION(<exp>)
  Decl     590
  Set 
  Used    1478

K                               Stack                             INTEGER
  Decl     327
  Set      351     399
  Used     353     354     355     356     357     360     361     362     363     364     365     400     401     402

K                               Stack                             INTEGER
  Decl     454
  Set      711     724     757     852     863     954    1022    1065    1282    1348
  Used     713     714     729     730     760     761     762     855     866     867     957     958     960     963     965
          1028    1066    1067    1284    1349

K                               Stack                             INTEGER
  Decl    1735
  Set     1750    1833    1886    1894    2115    2232
  Used    1752    1753    1754    1755    1835    1836    1838    1839    1841    1843    1844    1845    1846    1847    1888
          1896    1898    1899    1900    1901    1902    2119    2235    2236    2237    2238    2240    2241    2242    2243

K                               Stack                             INTEGER
  Decl    2279
  Set     2281    2306    2323
  Used    2288    2289    2290    2294    2309    2313    2314    2316    2317    2318    2326    2327    2328    2329

K                               Stack                             INTEGER
  Decl    2369
  Set     2391
  Used    2394    2395    2396    2397    2399    2400    2401    2402    2403    2404

K                               Stack                             INTEGER
  Decl    2444
  Set     2452
  Used    2454    2455    2456    2457

K                               Stack                             INTEGER
  Decl    2484
  Set     2494
  Used    2497    2498    2499    2500

K                               Stack                             INTEGER
  Decl    2632
  Set     2654    2674
  Used    2656    2657    2658    2660    2661    2662    2677    2679    2680    2682

K                               Stack                             INTEGER
  Decl    2706
  Set     2709    2726
  Used    2711    2713    2728    2729

K                               Stack                             INTEGER
  Decl    2758
  Set     2761    2769    2777
  Used    2764    2771    2772    2779    2780    2781

K                               Stack                             INTEGER
  Decl    2810
  Set     2828
  Used    2831    2832

K                               Stack                             INTEGER
  Decl    2887
  Set     2904
  Used    2906    2908

K                               Stack                             INTEGER
  Decl    2969
  Set     2999    3011
  Used    3002    3003    3004    3012    3013    3014    3015    3017    3018

K                               Stack                             INTEGER
  Decl    3092
  Set     3135    3147    3157
  Used    3138    3142    3143    3149    3150    3159    3160    3165    3166    3170    3171    3175    3176    3177    3182
          3184    3185    3186    3191    3195

K                               Stack                             INTEGER
  Decl    3228
  Set     3247
  Used    3249    3250    3251    3252    3253

K                               Stack                             INTEGER
  Decl    3309
  Set     3385    3399
  Used    3389    3402    3408    3410    3413

K                               Stack                             INTEGER
  Decl    3444
  Set     3448
  Used    3450    3451

K                               Stack                             INTEGER
  Decl    3570
  Set     3574    3580
  Used    3576    3582    3587    3588    3589    3590    3593    3601    3602    3603    3606    3607    3612    3616    3622
          3626    3639    3640    3641    3642    3643    3644    3645    3646

K                               Stack                             INTEGER
  Decl    3727
  Set     3775    3797    3859
  Used    3779    3799    3800    3801    3861    3863

K                               Stack                             INTEGER
  Decl    4164
  Set     4190    4251    4263    4293
  Used    4193    4194    4195    4196    4197    4198    4199    4253    4254    4255    4256    4257    4265    4266    4267
          4278    4283    4284    4285    4286    4297    4298    4299

K                               Stack                             INTEGER
  Decl    4354
  Set     4356
  Used    4361

K                               Stack                             INTEGER
  Decl    4373
  Set     4375
  Used    4380

K                               Stack                             INTEGER
  Decl    4393
  Set     4397
  Used    4402

K                               Stack                             INTEGER
  Decl    4415
  Set     4419
  Used    4424

K                               Stack                             INTEGER
  Decl    4478
  Set     4480
  Used    4485

K                               Stack                             INTEGER
  Decl    4497
  Set     4499
  Used    4504

K                               Stack                             INTEGER
  Decl    4517
  Set     4521
  Used    4526

K                               Stack                             INTEGER
  Decl    4539
  Set     4543
  Used    4548

K22                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl     466
  Set 
  Used     901     909     924     973     991    1041    1115    1129    1278    1308

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1597    1657
  Set 
  Used    1822    1828    1872    1878    1968    1973    2004    2082    2149    2214

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    2510    2520
  Set     2593
  Used    2546    2563    2584    2590    2594

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2608    2621
  Set 
  Used    2650    2656

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2741    2754
  Set 
  Used

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3065    3077
  Set 
  Used    3150

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3525    3546
  Set 
  Used    3612    3647

K22                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3668    3687
  Set 
  Used    3832

K22X                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1706
  Set     2149
  Used    2142    2161    2179

K22_GZ                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl     588
  Set 
  Used    1476

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl     414     445
  Set 
  Used     925     948     982    1000    1013    1095    1108    1122    1265    1295    1321    1336    1371

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1598    1658
  Set 
  Used    1823    1843    1873    1982    1997    2069    2093    2217

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    2510    2519
  Set     2546    2550    2564    2594
  Used    2563    2565    2584    2590

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2609    2619
  Set 
  Used    2654    2660    2669    2670

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2691    2701
  Set 
  Used    2711

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2739    2752
  Set 
  Used    2769    2771

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3063    3074
  Set 
  Used    3147    3149

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3207    3215
  Set 
  Used

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3269    3284
  Set 
  Used    3326    3355

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3525    3544
  Set 
  Used    3626

KBCON                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3668    3688
  Set 
  Used    3797    3799    3833

KBCONX                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1707
  Set 
  Used    2162    2180

KBCON_GZ                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     589
  Set 
  Used    1477

KBMAX                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl     464
  Set      851     855
  Used     854     900     909     933

KBMAX                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1613    1673
  Set 
  Used    2141    2170    2188

KBMAX                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2512    2522
  Set 
  Used    2565

KBMAX_GZ                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     604
  Set 
  Used    1492

KBOT                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     261     301
  Set      342
  Used     384     393

KCLIM                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3734
  Set     3774    3779    3781
  Used    3778    3781    3859    3860    3862

KDET                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl     460
  Set      704     866    1057    1071
  Used    1057    1071    1146    1161

KDET                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1600    1660
  Set 
  Used    1827    1877    2017

KDET                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2793    2803
  Set 
  Used    2853    2855

KDET                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3526    3549
  Set 
  Used    3616

KDET1                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl     459
  Set      705     862     867
  Used     865

KDET_GZ                         Stack                             INTEGER, DIMENSION(<exp>)
  Decl     591
  Set 
  Used    1479

KDIMS2                          Stack                             INTEGER
  Decl    4354
  Set     4355
  Used    4356

KDIMS2                          Stack                             INTEGER
  Decl    4373
  Set     4374
  Used    4375

KDIMS2                          Stack                             INTEGER
  Decl    4393
  Set     4394
  Used    4397

KDIMS2                          Stack                             INTEGER
  Decl    4415
  Set     4416
  Used    4419

KDIMS2                          Stack                             INTEGER
  Decl    4478
  Set     4479
  Used    4480

KDIMS2                          Stack                             INTEGER
  Decl    4497
  Set     4498
  Used    4499

KDIMS2                          Stack                             INTEGER
  Decl    4517
  Set     4518
  Used    4521

KDIMS2                          Stack                             INTEGER
  Decl    4539
  Set     4540
  Used    4543

KE                              Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2428    2440
  Set 
  Used    2452    2454

KEND                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2467    2478
  Set 
  Used    2490

KI                              Stack                             INTEGER
  Decl    2811
  Set     2844
  Used    2846    2850    2852    2854    2857

KI                              Stack                             INTEGER
  Decl    2888
  Set     2920
  Used    2922    2923    2924    2925    2926    2927

KI                              Stack                             INTEGER
  Decl    2970
  Set     3023
  Used    3025    3026    3028    3029    3030    3034    3036    3037    3038    3042    3043    3044

KK                              Stack                             INTEGER
  Decl     328
  Set      393
  Used     394

KK                              Stack                             INTEGER
  Decl    3308
  Set     3323
  Used    3326    3327    3328    3329    3330    3332

KK                              Stack                             INTEGER
  Decl    3445
  Set     3451
  Used    3455    3456    3457

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     261     286
  Set 
  Used     288     289     290     291     292     293     294     298     310     311     312     313     314     315     316
           317     318     321     322     330     331     351     384     399

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     420
  Set 
  Used     422     423     424     425     426     427     428     429     430     441     442     447     448     462     488
           489     490     491     492     493     494     495     496     497     498     499     500     501     502     503
           504     505     506     507     508     509     510     511     512     513     514     515     516     517     518
           519     520     521     522     523     524     525     526     527     528     529     530     531     532     533
           534     535     536     537     539     540     541     542     570     571     572     573     574     575     576
           577     578     579     580     581     582     583     584     585     586     592     593     594     595     598
           600     601     603     605     613     615     711     724     737     778     794     820     843     852     863
           898     929     947     981     999    1016    1022    1040    1111    1125    1142    1157    1175    1191    1217
          1242    1268    1282    1298    1323    1338    1348    1377    1448    1539

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1569    1630
  Set 
  Used    1639    1640    1641    1642    1643    1644    1645    1646    1647    1648    1649    1650    1651    1652    1653
          1654    1655    1661    1662    1663    1664    1667    1669    1670    1672    1674    1682    1684    1688    1689
          1690    1691    1692    1697    1698    1699    1700    1702    1710    1711    1712    1713    1714    1715    1717
          1718    1719    1720    1721    1723    1724    1725    1726    1727    1728    1729    1731    1750    1777    1794
          1813    1833    1863    1894    1910    1911    1912    1913    1929    1956    1981    2000    2013    2031    2052
          2072    2095    2139    2166    2184    2202    2232

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2256    2261
  Set 
  Used    2262    2263    2264    2265    2266    2267    2268    2280    2281    2306    2323

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2341    2346
  Set 
  Used    2350    2351    2352    2353    2354    2355    2356    2357    2358    2359    2360    2361    2362    2363    2364
          2391

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2428    2433
  Set 
  Used    2437

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2467    2472
  Set 
  Used    2475    2494

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2511    2515
  Set 
  Used    2524    2525    2526

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2609    2615
  Set 
  Used    2623    2624    2625    2626    2627    2628    2629    2674

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2691    2696
  Set 
  Used    2703    2709    2726

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2740    2745
  Set 
  Used    2749    2750    2751    2761

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2792    2797
  Set 
  Used    2805    2806    2807    2828

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2870    2875
  Set 
  Used    2878    2879    2880    2881    2882    2883    2904

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2940    2946
  Set 
  Used    2955    2956    2957    2958    2959    2960    2961    2962    2963    2964    2965    2966    2999

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3063    3072
  Set 
  Used    3079    3080    3081    3082    3083    3084    3085    3086    3087    3088    3089    3135

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3207    3212
  Set 
  Used    3219    3220    3221    3222    3223    3247

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3270    3277
  Set 
  Used    3286    3287    3288    3289    3323    3332

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3425    3429
  Set 
  Used    3434    3435    3436    3437    3438    3439    3448

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3469    3473
  Set 
  Used    3476    3477    3478    3479    3480    3481    3482    3483

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3522    3530
  Set 
  Used    3533    3534    3535    3536    3537    3538    3539    3540    3541    3542    3543    3574

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3665    3678
  Set 
  Used    3700    3706

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4127    4134
  Set 
  Used    4145    4146    4149    4150    4151    4152    4168    4169    4170    4171    4172    4190

KOLD                            Stack                             INTEGER
  Decl     328
  Set 
  Used

KPBL                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3526    3550
  Set 
  Used    3613

KS                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2428    2434
  Set 
  Used    2447    2449

KS                              Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2467    2477
  Set 
  Used    2487    2489    2490

KSTABI                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl     468
  Set 
  Used     950     961

KSTABM                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl     469
  Set      737
  Used     949     954     957     961

KSTOP                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    2482
  Set     2490
  Used    2497

KT                              Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    2468    2476
  Set     2487    2500
  Used

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     261     300
  Set      343
  Used     383

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl     413     444
  Set 
  Used    1014    1025    1058    1072    1095    1109    1123    1266    1296    1322    1337    1370    1537

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1596    1656
  Set 
  Used    1821    1839    1840    1871    1998    2070    2094    2115    2224

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    2691    2702
  Set     2708    2713
  Used    2712    2720    2728

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2740    2753
  Set 
  Used    2777    2779

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3063    3075
  Set 
  Used    3157    3159

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3207    3216
  Set 
  Used    3249

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3268    3283
  Set 
  Used

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3524    3545
  Set 
  Used    3580    3582    3601    3622    3623    3649

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3670    3705
  Set 
  Used

KTOP                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4127    4157
  Set 
  Used    4251    4253    4263    4265

KTOP_GZ                         Stack                             INTEGER, DIMENSION(<exp>)
  Decl     587
  Set 
  Used    1475

KUO                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     261     299
  Set      341     392
  Used

KZDOWN                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl     463
  Set     1021    1028
  Used    1027    1042

KZI                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl     470
  Set      908
  Used

LEFT                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl     559
  Set     1056
  Used    1063

LEFT                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    2534
  Set     2548    2573    2596
  Used    2562

LOG                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     250    2310    2313

MASK                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     414     433
  Set 
  Used     751    1387

MASK                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1620    1680
  Set 
  Used    2207

MASK                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3272    3298
  Set 
  Used    3343    3370    3407

MASK                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3666    3686
  Set 
  Used    3960

MASK_GZ                         Stack                             INTEGER, DIMENSION(<exp>)
  Decl     611
  Set 
  Used    1499

MASSFLD                         Stack                             REAL(KIND=8)
  Decl    1733
  Set 
  Used    2220

MASSFLD                         Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    3669    3708
  Set     3948    4082
  Used    3971    3973    3975    3981    3983    3985    3987    3990    3991    3992    3997    3998    3999    4000    4007
          4009    4011    4032    4034    4036    4038    4039    4040

MASSFLN                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     333
  Set      377
  Used     384

MASSFLN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 144), INTENT(INOUT)
  Decl     414     434
  Set 
  Used    1549

MASSFLN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1623    1683
  Set 
  Used    2219

MASSFLN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3669    3704
  Set     3911    3922    4098    4099    4114
  Used

MASSFLN                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    4130    4155
  Set     4297
  Used

MASSFLN_GZ                      Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     614
  Set 
  Used

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0    1555    2327    2591    3865    3867    3951    3972
          3980    3984    3986    4006    4008    4010    4016    4017    4018    4019    4020    4021    4031    4033    4035
          4084    4099

MAXENS                                                            INTEGER, PARAMETER, PRIVATE
  Decl     112
  Set 
  Used     115     757     760     761     762    1449    1543

MAXENS                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1570    1631
  Set 
  Used    1704    1705    1886    2105    2112    2208

MAXENS                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3666    3679
  Set 
  Used    3698    3701    3728    3740    3741    3873    3879    3880    3928    4071

MAXENS                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4129    4139
  Set 
  Used    4219    4293

MAXENS2                                                           INTEGER, PARAMETER, PRIVATE
  Decl     113
  Set 
  Used     115     539     540     541     542     548     568     570     571     572     573    1382    1450    1542

MAXENS2                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1571    1632
  Set 
  Used    1637    1639    1640    1641    1642

MAXENS2                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3271    3280
  Set 
  Used    3296

MAXENS2                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4128    4138
  Set 
  Used    4150    4151    4152    4172

MAXENS22                        Stack                             INTEGER
  Decl     561
  Set      691
  Used     757    1389    1451    1552

MAXENS22                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1572    1632
  Set 
  Used    1741    2229

MAXENS22                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3272    3280
  Set 
  Used    3385    3388    3399

MAXENS22                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3671    3684
  Set 
  Used    3879

MAXENS22                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4130    4138
  Set 
  Used    4219    4250    4266    4283    4284    4285    4286    4293

MAXENS3                                                           INTEGER, PARAMETER, PRIVATE
  Decl     114
  Set 
  Used     115     123     757     760     761     762    1452    1547

MAXENS3                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1573    1633
  Set 
  Used    1703    2112    2113    2114    2192    2211

MAXENS3                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3667    3680
  Set 
  Used    3699    3879    3880    3881    3907    3918    4072

MAXENS3                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4129    4141
  Set 
  Used    4219    4293

MAXVAL                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0    2115    2654    2777    2920    3023    3147    3157    3580    3797    4251    4263

MAXX                            Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(OUT)
  Decl    2429    2439
  Set     2447    2457
  Used

MBDT                            Stack                             REAL(KIND=8)
  Decl     551
  Set      753
  Used    1454

MBDT                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1575    1635
  Set 
  Used    1898    1899    1901    2197

MBDT                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3664    3697
  Set 
  Used    3876

MCONV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     461
  Set      697     714     719
  Used     719

MCONV                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1621    1681
  Set 
  Used    2212

MCONV                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3667    3696
  Set 
  Used    3842    3843    3844

MCONV_GZ                        Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     612
  Set 
  Used    1500

MENTRD_RATE                     Static offset=1664                REAL(KIND=8), PRIVATE, SAVE
  Decl     149
  Set      192
  Used    1138    1153    1171    1187    1211    1236    1781    1798    1817    1867    2009    2027    2046

MENTRD_RATE                     Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3469    3486
  Set 
  Used    3505

MENTRD_RATE                     Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3524    3552
  Set 
  Used    3589

MENTR_RATE                      Static offset=1728                REAL(KIND=8), PRIVATE, SAVE
  Decl     150
  Set      193
  Used     977     995    1106    1120    1273    1303    1824    1874    1977    1995    2077

MENTR_RATE                      Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3064    3073
  Set 
  Used    3123    3124    3165    3166

MENTR_RATE                      Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3525    3553
  Set 
  Used    3602

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3015

MIN0                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    3326

MINVAL                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     954    2709    2769    2777    3147    3157

MINVAL                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     954    2709    2769    2777    3147    3157

MINVAL                                                            Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     954    2709    2769    2777    3147    3157

MJX                                                               INTEGER, PARAMETER, PRIVATE
  Decl     111
  Set 
  Used

MKXCRT                                                            INTEGER, PARAMETER, PRIVATE
  Decl     127
  Set 
  Used     128     132     138    3775

N                               Stack                             INTEGER
  Decl    3721
  Set     4110
  Used    4113    4114

N                               Stack                             INTEGER
  Decl    4165
  Set     4219    4250
  Used    4222    4223    4224    4225    4254    4255    4256    4257

NALL                            Stack                             INTEGER, DIMENSION(<exp>, <exp>)
  Decl    3728
  Set     3879
  Used    3910    3911    3921    3922    3970    3972    3974    3980    3982    3984    3986    3990    3991    3992    3997
          3998    3999    4000    4006    4008    4010    4016    4017    4018    4019    4020    4021    4031    4033    4035
          4038    4039    4040    4053    4054    4055    4057    4058    4059    4060    4091    4098    4099

NALLP                           Stack                             INTEGER
  Decl    1708
  Set     2111
  Used    2118    2125    2126    2127

NAME                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    3666    3674
  Set 
  Used    3767    4109

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     261     285
  Set 
  Used     288     289     290     291     292     293     294     295     296     297     299     300     301     305     306
           310     311     312     313     314     315     316     317     318     320     321     322     323     330     331
           332     333     334     335     340     350     352     384     389     397

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     414     419
  Set 
  Used     422     423     424     425     426     427     428     429     430     431     432     433     434     435     441
           442     443     444     445     447     448     449     459     460     461     462     463     464     465     466
           467     468     469     470     472     473     474     475     476     477     479     480     481     482     483
           484     485     486     487     488     489     490     491     492     493     494     495     496     497     498
           499     500     501     502     503     504     505     506     507     508     509     510     511     512     513
           514     515     516     517     518     519     520     521     522     523     524     525     526     527     528
           529     530     531     532     533     534     535     536     537     539     540     541     542     543     544
           545     548     556     557     558     559     568     569     570     571     572     573     574     575     576
           577     578     579     580     581     582     583     584     585     586     587     588     589     590     591
           592     593     594     595     596     597     598     599     600     601     602     603     604     605     606
           607     608     609     610     611     612     613     614     615     690     777     793     819     842     897
           928     946     980     998    1015    1039    1110    1124    1141    1156    1174    1190    1216    1241    1267
          1297    1324    1339    1376    1538

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1568    1629
  Set 
  Used    1637    1638    1639    1640    1641    1642    1643    1644    1645    1646    1647    1648    1649    1650    1651
          1652    1653    1654    1655    1656    1657    1658    1659    1660    1661    1662    1663    1664    1665    1666
          1667    1668    1669    1670    1671    1672    1673    1674    1675    1676    1677    1678    1679    1680    1681
          1682    1683    1684    1688    1689    1690    1691    1692    1693    1694    1695    1696    1697    1698    1699
          1700    1701    1702    1703    1704    1705    1706    1707    1709    1710    1711    1712    1713    1714    1715
          1716    1717    1718    1719    1720    1721    1722    1723    1724    1725    1726    1727    1728    1729    1730
          1731    1776    1793    1812    1862    1928    1955    1980    1999    2012    2030    2051    2071    2096    2138
          2165    2183    2201

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2256    2260
  Set 
  Used    2262    2263    2264    2265    2266    2267    2268    2269    2272    2273    2280

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2341    2345
  Set 
  Used    2349    2350    2351    2352    2353    2354    2355    2356    2357    2358    2359    2360    2361    2362    2363
          2364    2365    2366

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2428    2432
  Set 
  Used    2437    2438    2439    2440    2442

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2467    2471
  Set 
  Used    2475    2476    2477    2478    2479    2481    2482

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2511    2514
  Set 
  Used    2519    2520    2521    2522    2523    2524    2525    2526

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2609    2614
  Set 
  Used    2619    2620    2621    2622    2623    2624    2625    2626    2627    2628    2629

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2691    2695
  Set 
  Used    2700    2701    2702    2703

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2740    2744
  Set 
  Used    2749    2750    2751    2752    2753    2754    2755

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2792    2796
  Set 
  Used    2801    2802    2803    2805    2806    2807    2808

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2870    2874
  Set 
  Used    2878    2879    2880    2881    2882    2883    2884    2885

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2940    2945
  Set 
  Used    2951    2952    2953    2954    2955    2956    2957    2958    2959    2960    2961    2962    2963    2964    2965
          2966

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3063    3071
  Set 
  Used    3074    3075    3076    3077    3078    3079    3080    3081    3082    3083    3084    3085    3086    3087    3088
          3089

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3207    3211
  Set 
  Used    3215    3216    3217    3218    3219    3220    3221    3222    3223

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3270    3276
  Set 
  Used    3283    3284    3285    3286    3287    3288    3289    3290    3291    3292    3293    3294    3295    3296    3298

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3424    3428
  Set 
  Used    3432    3433    3434    3435    3436    3437    3438    3439    3440    3441

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3468    3472
  Set 
  Used    3476    3477    3478    3479    3480    3481    3482    3483    3484    3485

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3522    3529
  Set 
  Used    3533    3534    3535    3536    3537    3538    3539    3540    3541    3542    3543    3544    3545    3546    3547
          3548    3549    3550    3551    3568

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3665    3677
  Set 
  Used    3686    3687    3688    3689    3690    3691    3692    3693    3694    3695    3696    3698    3699    3700    3701
          3702    3703    3704    3705    3706    3718    3719    3728    3734    3740    3741

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4127    4133
  Set 
  Used    4142    4143    4144    4145    4146    4149    4150    4151    4152    4153    4154    4155    4156    4157    4158
          4159    4168    4169    4170    4171    4172    4173

NCOLS_GZ                        Stack                             INTEGER
  Decl     567
  Set     1392
  Used    1393    1446    1447

NCOUNT                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    4173
  Set     4210    4226
  Used    4234    4235

NENS                            Stack                             INTEGER
  Decl    1736
  Set     2105
  Used    2108    2113

NENS                            Stack                             INTEGER
  Decl    3720
  Set     3873    3928    4071
  Used    3876    3877    3878    3879    3881    3930    3970    3972    3974    3980    3982    3984    3986    3990    3991
          3992    3997    3998    3999    4000    4006    4008    4010    4016    4017    4018    4019    4020    4021    4031
          4033    4035    4038    4039    4040    4053    4054    4055    4057    4058    4059    4060    4075    4091    4098
          4099

NENS3                           Stack                             INTEGER
  Decl    1737
  Set     2114
  Used    2118    2119    2125    2126    2127

NENS3                           Stack                             INTEGER
  Decl    3722
  Set     3907    3918    4072
  Used    3910    3911    3921    3922    4091    4098    4099

NLEFT                           Stack                             INTEGER
  Decl     560
  Set     1052    1055
  Used    1056    1062

NLEFT                           Stack                             INTEGER
  Decl    2535
  Set     2543    2547    2601
  Used    2548    2554    2561

NLEFT                           Stack                             INTEGER
  Decl    4318
  Set     4321    4324
  Used    4325

NLEFT                           Stack                             INTEGER
  Decl    4335
  Set     4338    4341
  Used    4342

NLEFT                           Stack                             INTEGER
  Decl    4353
  Set     4357    4360
  Used    4361

NLEFT                           Stack                             INTEGER
  Decl    4372
  Set     4376    4379
  Used    4380

NLEFT                           Stack                             INTEGER
  Decl    4392
  Set     4398    4401
  Used    4402

NLEFT                           Stack                             INTEGER
  Decl    4414
  Set     4420    4423
  Used    4424

NLEFT                           Stack                             INTEGER
  Decl    4442
  Set     4445    4448
  Used    4449

NLEFT                           Stack                             INTEGER
  Decl    4459
  Set     4462    4465
  Used    4466

NLEFT                           Stack                             INTEGER
  Decl    4477
  Set     4481    4484
  Used    4485

NLEFT                           Stack                             INTEGER
  Decl    4496
  Set     4500    4503
  Used    4504

NLEFT                           Stack                             INTEGER
  Decl    4516
  Set     4522    4525
  Used    4526

NLEFT                           Stack                             INTEGER
  Decl    4538
  Set     4544    4547
  Used    4548

NNEWLEFT                        Stack                             INTEGER
  Decl    2536
  Set     2558    2572    2595
  Used    2573    2596    2601

NTOCONTINUE                     Stack                             INTEGER
  Decl    2538
  Set     2559    2576
  Used    2577    2582

OMEG                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     318
  Set      357
  Used     383

OMEG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     413     430
  Set 
  Used     714

OMEG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1622    1682
  Set 
  Used    2213

OMEG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3668    3700
  Set 
  Used    3790    3800    3801    3832    3833

OMEG_GZ                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     613
  Set 
  Used

OMG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     259     290
  Set 
  Used     357

OPTIONS                                                           Module
  Decl
  Set 
  Used      93

OUTQ                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     322
  Set      373
  Used     383     401

OUTQ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     413     442
  Set 
  Used    1532

OUTQ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    4126    4146
  Set     4194    4284
  Used

OUTQC                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     462
  Set 
  Used    1533

OUTQC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    4126    4149
  Set     4195    4285
  Used

OUTT                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     321
  Set      372
  Used     383     400

OUTT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     413     441
  Set 
  Used    1531

OUTT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    4126    4145
  Set     4193    4283
  Used

OUTTES                          Stack                             REAL(KIND=8)
  Decl    4166
  Set     4266    4269    4275    4280
  Used    4268    4273    4274    4279

OUTT_ENS                        Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     544
  Set      762
  Used    1546

OUTT_ENS                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1611    1671
  Set     2125
  Used

OUTT_ENS                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    4129    4156
  Set     4223    4299
  Used

OUTT_ENS_GZ                     Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     602
  Set 
  Used

P                               Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     314
  Set      354
  Used     382     394

P                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     412     426
  Set 
  Used     775     809

P                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2256    2268
  Set 
  Used    2288    2310    2313

P                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2340    2356
  Set 
  Used    2401    2417

P                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3269    3289
  Set 
  Used    3329    3330

PBCDIF                          Stack                             REAL(KIND=8)
  Decl    2532
  Set     2590
  Used    2592

PCRIT                                                             REAL(KIND=8), PARAMETER, DIMENSION(15), PRIVATE
  Decl     128
  Set 
  Used

PEF                             Stack                             REAL(KIND=8)
  Decl    3303
  Set     3339    3344    3346    3351
  Used    3344    3346    3351    3378

PEFB                            Stack                             REAL(KIND=8)
  Decl    3300
  Set     3365    3371    3373    3377
  Used    3371    3373    3377    3378

PERC                            Stack                             REAL(KIND=8)
  Decl    2814
  Set     2827
  Used    2837    2853    2855

PLCL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     261     306
  Set      394
  Used

PLUS                            Stack                             REAL(KIND=8)
  Decl    2531
  Set     2591
  Used    2592

PO                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     315
  Set      353
  Used     354     382

PO                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     412     427
  Set 
  Used     791     832    1373

PO                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1604    1664
  Set 
  Used    1926    1945

PO_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     533
  Set 
  Used     838     934

PO_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1585    1645
  Set 
  Used    1770    1787    1806    1841    1847    1856    1951    2171    2189

PO_CUP_GZ                       Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     576
  Set 
  Used

PO_GZ                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     595
  Set 
  Used

PRE                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     413     443
  Set      706    1555
  Used    1534

PRE                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    4126    4142
  Set     4206    4286
  Used

PRE1                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     323
  Set      371
  Used     383     390

PREZK                           Stack                             REAL(KIND=8)
  Decl    3301
  Set     3356    3358    3363
  Used    3365

PR_ENS                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     545
  Set      761
  Used    1545

PR_ENS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1608    1668
  Set     2118    2127
  Used    2126    2215

PR_ENS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3668    3703
  Set 
  Used    4016    4018    4020

PR_ENS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    4129    4154
  Set     4222    4298
  Used

PR_ENS_GZ                       Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     599
  Set 
  Used

PS                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     259     295
  Set 
  Used     350     353

PSUR                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     320
  Set      350
  Used     382

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     412     432
  Set 
  Used     781     797     818     841

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1606    1666
  Set 
  Used    1932    1954

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2256    2272
  Set 
  Used    2310

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2341    2365
  Set 
  Used    2417

PSUR_GZ                         Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     597
  Set 
  Used    1485

PW                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     496
  Set 
  Used    1263

PW                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3062    3089
  Set     3138    3182    3185    3186
  Used    3186    3195

PW                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    4126    4152
  Set 
  Used    4257

PWAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     479
  Set 
  Used    1264

PWAV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3063    3078
  Set     3131    3195
  Used

PWAV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3269    3291
  Set 
  Used    3402

PWAVO                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     481
  Set 
  Used    1294    1374

PWD                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     495
  Set 
  Used    1207

PWD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2938    2957
  Set     3004    3015    3042
  Used    3016    3044

PWDO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     504
  Set 
  Used    1232

PWDO                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1610    1670
  Set 
  Used    2119    2238

PWDO_GZ                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     601
  Set 
  Used

PWEV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     480
  Set 
  Used    1215

PWEV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    2939    2954
  Set     2995    3016    3044
  Used

PWEV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3269    3292
  Set 
  Used    3402

PWEVO                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     482
  Set 
  Used    1240    1375

PWO                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     505
  Set 
  Used    1293

PWO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1609    1669
  Set 
  Used    2119    2238

PWO_ENS                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     542
  Set 
  Used    1535

PWO_ENS                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl    1582    1642
  Set     1755    2238    2243
  Used

PWO_ENS_GZ                      Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, 3)
  Decl     573
  Set 
  Used

PWO_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     600
  Set 
  Used

P_CUP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     525
  Set 
  Used     815

P_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1624    1684
  Set 
  Used    2223

P_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2340    2362
  Set     2401    2417
  Used

P_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2512    2526
  Set 
  Used    2590

P_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3467    3477
  Set 
  Used    3502

P_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3521    3534
  Set 
  Used    3639

P_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3670    3706
  Set 
  Used

P_CUP_GZ                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     615
  Set 
  Used

Q                               Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     311
  Set      360
  Used     382

Q                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     412     423
  Set 
  Used     713     774     805    1222    1274    1304

Q                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    2255    2267
  Set     2290
  Used    2290    2294    2316    2326

Q                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2339    2352
  Set 
  Used    2395    2412

Q                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2941    2966
  Set 
  Used    3029

Q                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3065    3079
  Set 
  Used    3166

Q2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     260     292
  Set 
  Used     360

QC                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     493
  Set 
  Used    1261

QC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3062    3087
  Set     3142    3150    3165    3191
  Used    3175    3185

QCD                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     508
  Set 
  Used    1205

QCD                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2937    2956
  Set     3002    3013    3017    3028    3043
  Used    3015    3038

QCDO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     509
  Set 
  Used    1230

QCO                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     502
  Set 
  Used    1291

QCO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1601    1661
  Set 
  Used    1838

QCO_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     592
  Set 
  Used

QES                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     490
  Set 
  Used     770     804

QES                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2255    2263
  Set     2288    2289
  Used    2289    2290    2317    2328

QES                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2339    2351
  Set 
  Used    2394    2411

QESO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     499
  Set 
  Used     786     827

QESO_CUP                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     528
  Set 
  Used     833    1231    1307

QES_CUP                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     520
  Set 
  Used     810    1206    1277

QES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2340    2357
  Set     2394    2411
  Used    2404    2420

QES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2938    2961
  Set 
  Used    3014    3017    3036

QES_CUP                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3065    3086
  Set 
  Used    3170

QE_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3066    3082
  Set 
  Used    3142    3150

QN1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     260     294
  Set      401
  Used     362

QO                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     313
  Set      362     365
  Used     365     382

QO                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     412     425
  Set 
  Used     790     828    1247

QO                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1592    1652
  Set 
  Used    1792    1861    1899    1911

QO_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     529
  Set 
  Used     834    1233    1309

QO_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1590    1650
  Set 
  Used    1784    1876

QO_CUP_GZ                       Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     581
  Set 
  Used

QO_GZ                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     583
  Set 
  Used

QRC                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     514
  Set 
  Used    1262    1284

QRC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3062    3088
  Set     3143    3175    3177    3184
  Used    3176    3182    3191

QRCD                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     494
  Set 
  Used    1221

QRCD                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2941    2958
  Set     3003    3014    3036
  Used    3015    3038    3043

QRCDO                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     503
  Set 
  Used    1246

QRCDO                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1591    1651
  Set 
  Used    1788    1857

QRCDO_GZ                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     582
  Set 
  Used

QRCH                            Stack                             REAL(KIND=8)
  Decl    3096
  Set     3170
  Used    3175    3185    3191

QRCO                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     515
  Set      698
  Used    1292

QRCO                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1602    1662
  Set 
  Used    1838    1840    1846

QRCO_GZ                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     593
  Set      699
  Used

Q_CUP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     521
  Set 
  Used     811    1208    1279

Q_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2340    2358
  Set     2395    2412
  Used

Q_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2938    2962
  Set 
  Used    3013

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     102     103     104     106     107     116     120     121     122     123     128     132     138     142     143
           144     145     147     148     149     150     151     152     153     154     155     156     157     158     159
           160     161     287     288     289     290     291     292     293     294     295     296     298     305     306
           310     311     312     313     314     315     316     317     318     320     321     322     323     330     331
           332     333     334     335     421     422     423     424     425     426     427     428     429     430     431
           432     434     435     441     442     443     447     448     449     461     462     472     473     474     475
           476     477     479     480     481     482     483     484     485     486     487     488     489     490     491
           492     493     494     495     496     497     498     499     500     501     502     503     504     505     506
           507     508     509     510     511     512     513     514     515     516     517     518     519     520     521
           522     523     524     525     526     527     528     529     530     531     532     533     534     535     536
           537     539     540     541     542     543     544     545     548     550     551     552     556     557     558
           568     570     571     572     573     574     575     576     577     578     579     580     581     582     583
           584     585     586     592     593     594     595     596     597     598     599     600     601     602     603
           605     606     607     608     609     610     612     613     614     615    1635    1636    1637    1639    1640
          1641    1642    1643    1644    1645    1646    1647    1648    1649    1650    1651    1652    1653    1654    1655
          1661    1662    1663    1664    1665    1666    1667    1668    1669    1670    1671    1672    1674    1675    1676
          1677    1678    1679    1681    1682    1683    1684    1688    1689    1690    1691    1692    1693    1694    1697
          1698    1699    1700    1701    1702    1703    1704    1705    1709    1710    1711    1712    1713    1714    1715
          1716    1717    1718    1719    1720    1721    1722    1723    1724    1725    1726    1727    1728    1729    1730
          1731    1732    1733    2262    2263    2264    2265    2266    2267    2268    2269    2272    2280    2350    2351
          2352    2353    2354    2355    2356    2357    2358    2359    2360    2361    2362    2363    2364    2365    2366
          2437    2442    2475    2481    2523    2524    2525    2526    2527    2531    2532    2618    2622    2623    2624
          2625    2626    2627    2628    2629    2633    2703    2748    2749    2750    2751    2759    2804    2805    2806
          2807    2808    2812    2813    2814    2878    2879    2880    2881    2882    2883    2889    2890    2950    2953
          2954    2955    2956    2957    2958    2959    2960    2961    2962    2963    2964    2965    2966    2971    2972
          2973    3073    3078    3079    3080    3081    3082    3083    3084    3085    3086    3087    3088    3089    3094
          3095    3096    3097    3218    3219    3220    3221    3222    3223    3225    3226    3281    3282    3286    3287
          3288    3289    3290    3291    3292    3293    3294    3295    3296    3297    3300    3301    3302    3303    3304
          3305    3306    3434    3435    3436    3437    3438    3439    3440    3441    3442    3476    3477    3478    3479
          3480    3481    3482    3483    3484    3486    3488    3489    3490    3491    3492    3493    3494    3495    3533
          3534    3535    3536    3537    3538    3539    3540    3541    3542    3543    3551    3552    3553    3555    3556
          3557    3558    3559    3560    3561    3562    3563    3564    3565    3566    3567    3692    3693    3694    3695
          3696    3697    3698    3699    3700    3701    3702    3703    3704    3706    3707    3708    3709    3718    3719
          3729    3733    3736    3737    3738    3739    4142    4143    4144    4145    4146    4149    4150    4151    4152
          4153    4154    4155    4156    4159    4166    4167    4168    4169    4170    4171    4172    4316    4317    4351
          4352    4390    4391    4440    4441    4475    4476    4514    4515    4555    4556

RADIUS                          Static offset=1792                REAL(KIND=8), PRIVATE, SAVE
  Decl     147
  Set      184
  Used     188

RADIUS2                         Stack                             REAL(KIND=8)
  Decl    3094
  Set     3124
  Used    3125

RAINCV                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     260     305
  Set      390     391
  Used     392     398

RV                                                                REAL(KIND=8), PARAMETER, PRIVATE
  Decl     104
  Set 
  Used    2403    2419

SCR1                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1731
  Set     1835    1838
  Used    1870

SDP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     486
  Set 
  Used    1385

SDP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3271    3294
  Set     3318    3330
  Used    3332

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    4394    4416    4518    4519    4540    4541

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    4355    4479    4498

SIZE                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    4394    4416    4518    4519    4540    4541

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     259     298
  Set 
  Used     353

SUBDOWN                         Stack                             REAL(KIND=8)
  Decl    3563
  Set     3593
  Used    3632    3642

SUBIN                           Stack                             REAL(KIND=8)
  Decl    3494
  Set     3507
  Used    3508    3511

SUBIN                           Stack                             REAL(KIND=8)
  Decl    3559
  Set     3590    3624
  Used    3632    3641

T                               Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     310
  Set      361
  Used     364     382

T                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     412     422
  Set 
  Used     773     803

T                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2255    2266
  Set 
  Used    2294    2316    2317    2326    2328

T                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2339    2350
  Set 
  Used    2402    2418

T                               Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    4555    4556
  Set 
  Used    4558    4559    4561

T2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     259     291
  Set 
  Used     361

TCRIT                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     116
  Set 
  Used    4558

TESTE2                          Stack                             LOGICAL, DIMENSION(<exp>, <exp>)
  Decl    3740
  Set     3906    3912
  Used

TESTE3                          Stack                             LOGICAL, DIMENSION(<exp>, <exp>)
  Decl    3741
  Set     3917    3923
  Used    3930    4075

TN                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     312
  Set      363     364
  Used     364     382

TN                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     412     424
  Set 
  Used     789     826

TN                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1603    1663
  Set 
  Used    1901    1912

TN1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     259     293
  Set      400
  Used     363

TN_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     535
  Set 
  Used     840    1335

TN_GZ                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     594
  Set 
  Used

TOCONTINUE                      Stack                             INTEGER, DIMENSION(<exp>)
  Decl    2537
  Set     2577
  Used    2583

TOTMAS                          Stack                             REAL(KIND=8)
  Decl    3567
  Set     3632
  Used    3635

TV                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    2280
  Set     2294
  Used    2311    2314

T_CUP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     527
  Set 
  Used     817    1320

T_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2341    2364
  Set     2402    2418
  Used    2403    2404    2419    2420

T_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3207    3222
  Set 
  Used    3252

T_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3424    3435
  Set 
  Used    3456

UA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     259     288
  Set 
  Used     355

UNCOMPRESS                                                        Generic interface
  Decl     170
  Set 
  Used

UNCOMPRESS_I1D                                                    Subroutine, Module procedure, PRIVATE
  Decl    4453
  Set 
  Used    1505

UNCOMPRESS_I2D                                                    Subroutine, Module procedure, PRIVATE
  Decl    4490
  Set 
  Used

UNCOMPRESS_I3D                                                    Subroutine, Module procedure, PRIVATE
  Decl    4532
  Set 
  Used

UNCOMPRESS_R1D                                                    Subroutine, Module procedure, PRIVATE
  Decl    4436
  Set 
  Used       0    1515    1515    1516

UNCOMPRESS_R2D                                                    Subroutine, Module procedure, PRIVATE
  Decl    4471
  Set 
  Used       0       0       0       0    1510    1512    1514    1518    1510    1511    1512    1513    1514    1517    1518
          1519

UNCOMPRESS_R3D                                                    Subroutine, Module procedure, PRIVATE
  Decl    4510
  Set 
  Used       0       0    1506    1508    1506    1507    1508    1509

US                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     316
  Set      355
  Used     382

US                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     412     428
  Set 
  Used    1367

US                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3268    3286
  Set 
  Used    3327

VA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     259     289
  Set 
  Used     356

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    4312    4316
  Set 
  Used    4325

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4329    4333
  Set 
  Used    4342

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    4347    4351
  Set 
  Used    4355    4361

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(IN)
  Decl    4366    4370
  Set 
  Used    4374    4380

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :, :), INTENT(IN)
  Decl    4386    4390
  Set 
  Used    4394    4395    4402

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:, :, :), INTENT(IN)
  Decl    4408    4412
  Set 
  Used    4416    4417    4424

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    4436    4440
  Set 
  Used    4449

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    4453    4457
  Set 
  Used    4466

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(IN)
  Decl    4471    4475
  Set 
  Used    4479    4485

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(IN)
  Decl    4490    4494
  Set 
  Used    4498    4504

VAR_IN                          Dummy Arg                         REAL(KIND=8), DIMENSION(:, :, :), INTENT(IN)
  Decl    4510    4514
  Set 
  Used    4518    4519    4526

VAR_IN                          Dummy Arg                         INTEGER, DIMENSION(:, :, :), INTENT(IN)
  Decl    4532    4536
  Set 
  Used    4540    4541    4548

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl    4312    4317
  Set     4325
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(OUT)
  Decl    4329    4334
  Set     4342
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    4347    4352
  Set     4361
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(OUT)
  Decl    4366    4371
  Set     4380
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:, :, :), INTENT(OUT)
  Decl    4386    4391
  Set     4402
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:, :, :), INTENT(OUT)
  Decl    4408    4413
  Set     4424
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(OUT)
  Decl    4436    4441
  Set     4449
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:), INTENT(OUT)
  Decl    4453    4458
  Set     4466
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:, :), INTENT(OUT)
  Decl    4471    4476
  Set     4485
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:, :), INTENT(OUT)
  Decl    4490    4495
  Set     4504
  Used

VAR_OUT                         Dummy Arg                         REAL(KIND=8), DIMENSION(:, :, :), INTENT(OUT)
  Decl    4510    4515
  Set     4526
  Used

VAR_OUT                         Dummy Arg                         INTEGER, DIMENSION(:, :, :), INTENT(OUT)
  Decl    4532    4537
  Set     4548
  Used

VS                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     317
  Set      356
  Used     383

VS                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     413     429
  Set 
  Used    1368

VS                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3268    3287
  Set 
  Used    3328

VSHEAR                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     485
  Set 
  Used    1384

VSHEAR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3271    3293
  Set     3319    3332
  Used    3339    3340

VWS                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     487
  Set 
  Used    1386

VWS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3272    3295
  Set     3317    3329
  Used    3332

WF_CAPE                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     414     449
  Set     1347
  Used

X                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2442
  Set     2449    2456
  Used    2455

X                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2481
  Set     2489    2499
  Used    2498

XAA0                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1709
  Set 
  Used    2087    2108

XAA0                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3664    3701
  Set 
  Used    3876

XAA0_ENS                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1705
  Set     1888    2108
  Used    2196

XDBY                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1711
  Set 
  Used    1986    2076    2090

XF                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3666    3702
  Set     3910    3921    3970    3972    3974    3980    3982    3984    3986    3990    3991    3992    3997    3998    3999
          4000    4006    4008    4010    4017    4019    4021    4031    4033    4035    4038    4039    4040    4053    4054
          4055    4057    4058    4059    4060    4091    4113
  Used    4098

XFAC1                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     557
  Set 
  Used    1550

XFAC1                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    4130    4144
  Set     4208    4240    4296
  Used    4297    4298    4299

XFAC_FOR_DN                     Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     558
  Set 
  Used    1551

XFAC_FOR_DN                     Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    4130    4159
  Set     4209
  Used    4297

XFF0                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3719
  Set     3819
  Used    3950    3969    4029    4083

XFF_ENS3                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1703
  Set 
  Used    2221

XFF_ENS3                        Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3669    3699
  Set     3820    3821    3822    3832    3833    3834    3842    3843    3844    3850    3851    3852    3865    3866    3867
          3868    3869
  Used    3970    3972    3974    3980    3982    3984    3986    4006    4008    4010    4017    4019    4021    4031    4033
          4035

XFF_MAX                         Stack                             REAL(KIND=8)
  Decl    3729
  Set     3959    3960
  Used    3969    4029

XFMAX                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     107
  Set 
  Used    2228

XFMAX                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3671    3707
  Set 
  Used    3960

XF_ENS                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     543
  Set      760
  Used    1526

XF_ENS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1619    1679
  Set 
  Used    2205

XF_ENS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    4125    4153
  Set 
  Used    4222    4223    4224    4225

XF_ENS_GZ                       Stack                             REAL(KIND=8), DIMENSION(<exp>, 144)
  Decl     610
  Set 
  Used

XHC                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1728
  Set 
  Used    1979

XHCD                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1726
  Set 
  Used    2024    2038

XHE                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1692
  Set     1898    1910
  Used    1922    1942    1968    1987    2034

XHES                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1702
  Set 
  Used    1923    1943

XHES_CUP                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1725
  Set 
  Used    1949    1988    2023    2039

XHE_CUP                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1729
  Set 
  Used    1948    1978

XHKB                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1730
  Set     1968
  Used    1974

XK                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1704
  Set 
  Used    2222

XK                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    3669    3698
  Set     3876    3877    3878
  Used    3877    3878    3970    3972    3974    3980    3982    3984    3986    4031    4033    4035

XL                                                                REAL(KIND=8), PARAMETER, PRIVATE
  Decl     103
  Set 
  Used     244    2403    2419    3036    3170

XLAND                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     260     297
  Set 
  Used     384

XMB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     332
  Set      376
  Used     384

XMB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     414     435
  Set 
  Used    1536

XMB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1618    1678
  Set 
  Used    2199

XMB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    3665    3694
  Set     3789
  Used

XMB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    4127    4143
  Set     4207    4225    4235    4237    4268    4274    4279
  Used    4240    4266    4283    4284    4285    4286    4296

XMB_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     609
  Set 
  Used    1497

XOMG                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3718
  Set     3790    3801
  Used    3834

XPW                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1717
  Set 
  Used    2067

XPWAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1716
  Set 
  Used    2068

XPWD                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1723
  Set 
  Used    2042

XPWEV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1722
  Set 
  Used    2050

XQ                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1698
  Set     1899    1902    1911    1913
  Used    1902    1913    1925    1941    2057    2078

XQC                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1719
  Set 
  Used    2065

XQCD                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1724
  Set 
  Used    2040

XQES                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1700
  Set 
  Used    1921    1940

XQES_CUP                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1715
  Set 
  Used    1946    2041    2081

XQRC                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1718
  Set 
  Used    2066

XQRCD                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1721
  Set 
  Used    2056

XQ_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1714
  Set 
  Used    1947    2043    2083

XT                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1699
  Set     1901    1912
  Used    1924    1939

XT_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1710
  Set 
  Used    1953    2092

XZ                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1713
  Set 
  Used    1920    1944    2088

XZD                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1727
  Set 
  Used    2006    2037

XZU                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1712
  Set 
  Used    1993    2080    2089

XZ_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1720
  Set 
  Used    1950    1975    1994    2007    2025    2044    2064

Z                               Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     491
  Set 
  Used     769     808    1316

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2255    2262
  Set     2310    2313    2326    2327
  Used    2316    2317    2328

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2339    2355
  Set 
  Used    2400    2416

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3206    3219
  Set 
  Used    3250

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3268    3288
  Set 
  Used    3327    3328    3355

Z                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3424    3436
  Set 
  Used    3455

Z1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     413     431
  Set 
  Used     776     792     824     847    1025    1026    1147    1162

Z1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1605    1665
  Set 
  Used    1927    1960    2018

Z1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2256    2269
  Set 
  Used    2310

Z1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2342    2366
  Set 
  Used    2416

Z1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2793    2808
  Set 
  Used    2852    2853    2854    2855

Z1_GZ                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     596
  Set 
  Used    1484

ZCUTDOWN                        Static offset=1856                REAL(KIND=8), PRIVATE, SAVE
  Decl     160
  Set      238
  Used    1026

ZD                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     518
  Set 
  Used    1135    1202

ZD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2791    2805
  Set     2831    2841    2857
  Used

ZD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2937    2955
  Set 
  Used    3042

ZD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3425    3438
  Set 
  Used    3456

ZD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3468    3479
  Set 
  Used    3503    3504    3505    3507

ZD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3522    3536
  Set 
  Used    3588    3589    3590    3593    3607

ZDO                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     519
  Set 
  Used    1150    1227

ZDO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1587    1647
  Set 
  Used    1773    1790    1809    1859

ZDO_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     578
  Set 
  Used

ZKBC                            Stack                             REAL(KIND=8)
  Decl    3302
  Set     3355
  Used    3357    3358    3359    3362

ZKBMAX                          Static offset=1920                REAL(KIND=8), PRIVATE, SAVE
  Decl     159
  Set      234
  Used

ZKTOP                           Stack                             REAL(KIND=8)
  Decl     552
  Set     1025    1026
  Used

ZO                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     500
  Set 
  Used     785     831    1331    1369

ZO_CUP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     532
  Set 
  Used     837     993    1025    1066    1095    1119    1151    1185    1234    1290

ZO_CUP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1584    1644
  Set 
  Used    1769    1786    1805    1844    1855

ZO_CUP_GZ                       Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     575
  Set 
  Used

ZU                              Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     516
  Set 
  Used    1104    1276    1317

ZU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2739    2749
  Set     2764    2772    2781
  Used

ZU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3065    3080
  Set 
  Used    3182    3185

ZU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3206    3220
  Set 
  Used    3251

ZU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3524    3542
  Set 
  Used    3590    3593    3602    3603    3613    3623

ZUO                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     517
  Set 
  Used    1118    1306    1332

ZUO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1593    1653
  Set 
  Used    1818    1840    1845    1868

ZUO_GZ                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     584
  Set 
  Used

ZZ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     260     296
  Set 
  Used     383

Z_CUP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     524
  Set 
  Used     814     975    1105    1136    1169    1209    1260

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    2340    2361
  Set     2400    2416
  Used

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2608    2625
  Set 
  Used    2677

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2739    2750
  Set 
  Used    2780

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2791    2806
  Set 
  Used    2850    2852    2853    2854    2855

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2869    2878
  Set 
  Used    2923

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    2938    2963
  Set 
  Used    3012    3026

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3062    3085
  Set 
  Used    3160

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3467    3476
  Set 
  Used    3501

Z_CUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    3521    3533
  Set 
  Used    3587

Z_DETR                          Static offset=1984                REAL(KIND=8), PRIVATE, SAVE
  Decl     161
  Set      242
  Used


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 3327, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3328, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3635, file Cu_Grellens.f90)

Name  Messages
----  --------
ANY(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 3654, file Cu_Grellens.f90)

Name  Messages
----  --------
COMPRESS_I1D in CU_GRELLENS
      Defined as:  Subroutine (line 4329, file Cu_Grellens.f90)

      Interface:   None

      Called By:   COMPRESS_I1D in CU_GRELLENS (Line 1396, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1414, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1415, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1416, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1417, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1418, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1431, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1438, file Cu_Grellens.f90)

      Calls:       COMPRESS_I1D in CU_GRELLENS (Line 1396, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1414, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1415, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1416, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1417, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1418, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1431, file Cu_Grellens.f90)
                   COMPRESS_I1D in CU_GRELLENS (Line 1438, file Cu_Grellens.f90)

Name  Messages
----  --------
COMPRESS_I2D in CU_GRELLENS
      Defined as:  Subroutine (line 4366, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
COMPRESS_I3D in CU_GRELLENS
      Defined as:  Subroutine (line 4408, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
COMPRESS_R1D in CU_GRELLENS
      Defined as:  Subroutine (line 4312, file Cu_Grellens.f90)

      Interface:   None

      Called By:   COMPRESS_R1D in CU_GRELLENS (Line 1423, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1424, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1433, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1434, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1435, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1436, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1439, file Cu_Grellens.f90)

      Calls:       COMPRESS_R1D in CU_GRELLENS (Line 1423, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1424, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1433, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1434, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1435, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1436, file Cu_Grellens.f90)
                   COMPRESS_R1D in CU_GRELLENS (Line 1439, file Cu_Grellens.f90)

Name  Messages
----  --------
COMPRESS_R2D in CU_GRELLENS
      Defined as:  Subroutine (line 4347, file Cu_Grellens.f90)

      Interface:   None

      Called By:   COMPRESS_R2D in CU_GRELLENS (Line 1395, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1401, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1402, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1403, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1404, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1405, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1406, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1407, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1408, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1409, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1410, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1411, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1412, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1413, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1419, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1420, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1421, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1422, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1425, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1426, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1427, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1428, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1429, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1430, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1432, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1437, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1440, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1441, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1442, file Cu_Grellens.f90)

      Calls:       COMPRESS_R2D in CU_GRELLENS (Line 1395, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1401, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1402, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1403, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1404, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1405, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1406, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1407, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1408, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1409, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1410, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1411, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1412, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1413, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1419, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1420, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1421, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1422, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1425, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1426, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1427, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1428, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1429, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1430, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1432, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1437, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1440, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1441, file Cu_Grellens.f90)
                   COMPRESS_R2D in CU_GRELLENS (Line 1442, file Cu_Grellens.f90)

Name  Messages
----  --------
COMPRESS_R3D in CU_GRELLENS
      Defined as:  Subroutine (line 4386, file Cu_Grellens.f90)

      Interface:   None

      Called By:   COMPRESS_R3D in CU_GRELLENS (Line 1397, file Cu_Grellens.f90)
                   COMPRESS_R3D in CU_GRELLENS (Line 1398, file Cu_Grellens.f90)
                   COMPRESS_R3D in CU_GRELLENS (Line 1399, file Cu_Grellens.f90)
                   COMPRESS_R3D in CU_GRELLENS (Line 1400, file Cu_Grellens.f90)

      Calls:       COMPRESS_R3D in CU_GRELLENS (Line 1397, file Cu_Grellens.f90)
                   COMPRESS_R3D in CU_GRELLENS (Line 1398, file Cu_Grellens.f90)
                   COMPRESS_R3D in CU_GRELLENS (Line 1399, file Cu_Grellens.f90)
                   COMPRESS_R3D in CU_GRELLENS (Line 1400, file Cu_Grellens.f90)

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     CU_GRELLENS

Name  Messages
----  --------
COUNT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 1392, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_DD_AA0 in CU_GRELLENS
      Defined as:  Subroutine (line 3422, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CUP_DD_EDT in CU_GRELLENS
      Defined as:  Subroutine (line 3268, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_DD_EDT in CU_GRELLENS (Line 1365, file Cu_Grellens.f90)

      Calls:       CUP_DD_EDT in CU_GRELLENS (Line 1365, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_DD_HE in CU_GRELLENS
      Defined as:  Subroutine (line 2869, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_DD_HE in CU_GRELLENS (Line 1166, file Cu_Grellens.f90)
                   CUP_DD_HE in CU_GRELLENS (Line 1182, file Cu_Grellens.f90)
                   CUP_DD_HE in CU_GRELLENS (Line 2023, file Cu_Grellens.f90)

      Calls:       CUP_DD_HE in CU_GRELLENS (Line 1166, file Cu_Grellens.f90)
                   CUP_DD_HE in CU_GRELLENS (Line 1182, file Cu_Grellens.f90)
                   CUP_DD_HE in CU_GRELLENS (Line 2023, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_DD_MOISTURE in CU_GRELLENS
      Defined as:  Subroutine (line 2936, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_DD_MOISTURE in CU_GRELLENS (Line 1201, file Cu_Grellens.f90)
                   CUP_DD_MOISTURE in CU_GRELLENS (Line 1226, file Cu_Grellens.f90)
                   CUP_DD_MOISTURE in CU_GRELLENS (Line 2037, file Cu_Grellens.f90)

      Calls:       CUP_DD_MOISTURE in CU_GRELLENS (Line 1201, file Cu_Grellens.f90)
                   CUP_DD_MOISTURE in CU_GRELLENS (Line 1226, file Cu_Grellens.f90)
                   CUP_DD_MOISTURE in CU_GRELLENS (Line 2037, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_DD_NMS in CU_GRELLENS
      Defined as:  Subroutine (line 2791, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_DD_NMS in CU_GRELLENS (Line 1134, file Cu_Grellens.f90)
                   CUP_DD_NMS in CU_GRELLENS (Line 1149, file Cu_Grellens.f90)
                   CUP_DD_NMS in CU_GRELLENS (Line 2006, file Cu_Grellens.f90)

      Calls:       CUP_DD_NMS in CU_GRELLENS (Line 1134, file Cu_Grellens.f90)
                   CUP_DD_NMS in CU_GRELLENS (Line 1149, file Cu_Grellens.f90)
                   CUP_DD_NMS in CU_GRELLENS (Line 2006, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_DELLABOT in CU_GRELLENS
      Defined as:  Subroutine (line 3466, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_DELLABOT in CU_GRELLENS (Line 1766, file Cu_Grellens.f90)
                   CUP_DELLABOT in CU_GRELLENS (Line 1783, file Cu_Grellens.f90)

      Calls:       CUP_DELLABOT in CU_GRELLENS (Line 1766, file Cu_Grellens.f90)
                   CUP_DELLABOT in CU_GRELLENS (Line 1783, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_DELLAS in CU_GRELLENS
      Defined as:  Subroutine (line 3520, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_DELLAS in CU_GRELLENS (Line 1803, file Cu_Grellens.f90)
                   CUP_DELLAS in CU_GRELLENS (Line 1853, file Cu_Grellens.f90)

      Calls:       CUP_DELLAS in CU_GRELLENS (Line 1803, file Cu_Grellens.f90)
                   CUP_DELLAS in CU_GRELLENS (Line 1853, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_ENV in CU_GRELLENS
      Defined as:  Subroutine (line 2254, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_ENV in CU_GRELLENS (Line 769, file Cu_Grellens.f90)
                   CUP_ENV in CU_GRELLENS (Line 785, file Cu_Grellens.f90)
                   CUP_ENV in CU_GRELLENS (Line 1919, file Cu_Grellens.f90)

      Calls:       CUP_ENV in CU_GRELLENS (Line 769, file Cu_Grellens.f90)
                   CUP_ENV in CU_GRELLENS (Line 785, file Cu_Grellens.f90)
                   CUP_ENV in CU_GRELLENS (Line 1919, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_ENV_CLEV in CU_GRELLENS
      Defined as:  Subroutine (line 2338, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_ENV_CLEV in CU_GRELLENS (Line 803, file Cu_Grellens.f90)
                   CUP_ENV_CLEV in CU_GRELLENS (Line 826, file Cu_Grellens.f90)
                   CUP_ENV_CLEV in CU_GRELLENS (Line 1938, file Cu_Grellens.f90)

      Calls:       CUP_ENV_CLEV in CU_GRELLENS (Line 803, file Cu_Grellens.f90)
                   CUP_ENV_CLEV in CU_GRELLENS (Line 826, file Cu_Grellens.f90)
                   CUP_ENV_CLEV in CU_GRELLENS (Line 1938, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_FORCING_ENS_16 in CU_GRELLENS
      Defined as:  Subroutine (line 3663, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_FORCING_ENS_16 in CU_GRELLENS (Line 2193, file Cu_Grellens.f90)

      Calls:       CUP_FORCING_ENS_16 in CU_GRELLENS (Line 2193, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_KBCON in CU_GRELLENS
      Defined as:  Subroutine (line 2509, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_KBCON in CU_GRELLENS (Line 921, file Cu_Grellens.f90)
                   CUP_KBCON in CU_GRELLENS (Line 2158, file Cu_Grellens.f90)
                   CUP_KBCON in CU_GRELLENS (Line 2176, file Cu_Grellens.f90)

      Calls:       CUP_KBCON in CU_GRELLENS (Line 921, file Cu_Grellens.f90)
                   CUP_KBCON in CU_GRELLENS (Line 2158, file Cu_Grellens.f90)
                   CUP_KBCON in CU_GRELLENS (Line 2176, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_KTOP in CU_GRELLENS
      Defined as:  Subroutine (line 2690, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_KTOP in CU_GRELLENS (Line 1010, file Cu_Grellens.f90)

      Calls:       CUP_KTOP in CU_GRELLENS (Line 1010, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_MAXIMI in CU_GRELLENS
      Defined as:  Subroutine (line 2427, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_MAXIMI in CU_GRELLENS (Line 896, file Cu_Grellens.f90)
                   CUP_MAXIMI in CU_GRELLENS (Line 2137, file Cu_Grellens.f90)

      Calls:       CUP_MAXIMI in CU_GRELLENS (Line 896, file Cu_Grellens.f90)
                   CUP_MAXIMI in CU_GRELLENS (Line 2137, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_MINIMI in CU_GRELLENS
      Defined as:  Subroutine (line 2467, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_MINIMI in CU_GRELLENS (Line 944, file Cu_Grellens.f90)
                   CUP_MINIMI in CU_GRELLENS (Line 1037, file Cu_Grellens.f90)

      Calls:       CUP_MINIMI in CU_GRELLENS (Line 944, file Cu_Grellens.f90)
                   CUP_MINIMI in CU_GRELLENS (Line 1037, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_OUTPUT_ENS in CU_GRELLENS
      Defined as:  Subroutine (line 4124, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_OUTPUT_ENS in CU_GRELLENS (Line 1525, file Cu_Grellens.f90)

      Calls:       CUP_OUTPUT_ENS in CU_GRELLENS (Line 1525, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_UP_AA0 in CU_GRELLENS
      Defined as:  Subroutine (line 3205, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_UP_AA0 in CU_GRELLENS (Line 1314, file Cu_Grellens.f90)
                   CUP_UP_AA0 in CU_GRELLENS (Line 1329, file Cu_Grellens.f90)
                   CUP_UP_AA0 in CU_GRELLENS (Line 2087, file Cu_Grellens.f90)

      Calls:       CUP_UP_AA0 in CU_GRELLENS (Line 1314, file Cu_Grellens.f90)
                   CUP_UP_AA0 in CU_GRELLENS (Line 1329, file Cu_Grellens.f90)
                   CUP_UP_AA0 in CU_GRELLENS (Line 2087, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_UP_HE in CU_GRELLENS
      Defined as:  Subroutine (line 2608, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_UP_HE in CU_GRELLENS (Line 972, file Cu_Grellens.f90)
                   CUP_UP_HE in CU_GRELLENS (Line 990, file Cu_Grellens.f90)
                   CUP_UP_HE in CU_GRELLENS (Line 1972, file Cu_Grellens.f90)

      Calls:       CUP_UP_HE in CU_GRELLENS (Line 972, file Cu_Grellens.f90)
                   CUP_UP_HE in CU_GRELLENS (Line 990, file Cu_Grellens.f90)
                   CUP_UP_HE in CU_GRELLENS (Line 1972, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_UP_MOISTURE in CU_GRELLENS
      Defined as:  Subroutine (line 3061, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_UP_MOISTURE in CU_GRELLENS (Line 1258, file Cu_Grellens.f90)
                   CUP_UP_MOISTURE in CU_GRELLENS (Line 1288, file Cu_Grellens.f90)
                   CUP_UP_MOISTURE in CU_GRELLENS (Line 2063, file Cu_Grellens.f90)

      Calls:       CUP_UP_MOISTURE in CU_GRELLENS (Line 1258, file Cu_Grellens.f90)
                   CUP_UP_MOISTURE in CU_GRELLENS (Line 1288, file Cu_Grellens.f90)
                   CUP_UP_MOISTURE in CU_GRELLENS (Line 2063, file Cu_Grellens.f90)

Name  Messages
----  --------
CUP_UP_NMS in CU_GRELLENS
      Defined as:  Subroutine (line 2738, file Cu_Grellens.f90)

      Interface:   None

      Called By:   CUP_UP_NMS in CU_GRELLENS (Line 1103, file Cu_Grellens.f90)
                   CUP_UP_NMS in CU_GRELLENS (Line 1117, file Cu_Grellens.f90)
                   CUP_UP_NMS in CU_GRELLENS (Line 1992, file Cu_Grellens.f90)

      Calls:       CUP_UP_NMS in CU_GRELLENS (Line 1103, file Cu_Grellens.f90)
                   CUP_UP_NMS in CU_GRELLENS (Line 1117, file Cu_Grellens.f90)
                   CUP_UP_NMS in CU_GRELLENS (Line 1992, file Cu_Grellens.f90)

Name  Messages
----  --------
CU_GRELLENS
      Defined as:  Module (line 6, file Cu_Grellens.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   CONSTANTS
                   OPTIONS

Name  Messages
----  --------
ENSEMBLE in CU_GRELLENS
      Defined as:  Subroutine (line 1565, file Cu_Grellens.f90)

      Interface:   None

      Called By:   ENSEMBLE in CU_GRELLENS (Line 1444, file Cu_Grellens.f90)

      Calls:       ENSEMBLE in CU_GRELLENS (Line 1444, file Cu_Grellens.f90)

Name  Messages
----  --------
ES5 in CU_GRELLENS
      Defined as:  Function (line 4555, file Cu_Grellens.f90)

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 2288, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2288, file Cu_Grellens.f90)

      Calls:       ES5 in CU_GRELLENS (Line 2288, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2288, file Cu_Grellens.f90)
                   LOG(Intrinsic) (Line 250, file Cu_Grellens.f90)
                   LOG(Intrinsic) (Line 254, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 753, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 960, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 961, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 954, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 954, file Cu_Grellens.f90)
                   MIN(Intrinsic) (Line 1026, file Cu_Grellens.f90)
                   COUNT(Intrinsic) (Line 1392, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 1555, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2115, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 2310, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 2327, file Cu_Grellens.f90)
                   LOG(Intrinsic) (Line 2310, file Cu_Grellens.f90)
                   LOG(Intrinsic) (Line 2310, file Cu_Grellens.f90)
                   LOG(Intrinsic) (Line 2313, file Cu_Grellens.f90)
                   LOG(Intrinsic) (Line 2313, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2452, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 2490, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 2591, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 2591, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2654, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 2674, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 2709, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 2726, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 2769, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 2777, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2769, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2777, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2844, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 2920, file Cu_Grellens.f90)
                   MIN(Intrinsic) (Line 3015, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 3023, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 3147, file Cu_Grellens.f90)
                   MINVAL(Intrinsic) (Line 3157, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 3147, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 3157, file Cu_Grellens.f90)
                   MIN0(Intrinsic) (Line 3326, file Cu_Grellens.f90)
                   ABS(Intrinsic) (Line 3327, file Cu_Grellens.f90)
                   ABS(Intrinsic) (Line 3328, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 3388, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 3389, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 3580, file Cu_Grellens.f90)
                   ABS(Intrinsic) (Line 3635, file Cu_Grellens.f90)
                   ANY(Intrinsic) (Line 3654, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 3797, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3859, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3865, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3866, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3867, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3868, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3951, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3970, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3972, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3974, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3980, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3982, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3984, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 3986, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4006, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4008, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4010, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4016, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4017, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4018, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4019, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4020, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4021, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4031, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4033, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4035, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4084, file Cu_Grellens.f90)
                   MAX(Intrinsic) (Line 4099, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 4235, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 4266, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 4283, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 4284, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 4285, file Cu_Grellens.f90)
                   FLOAT(Intrinsic) (Line 4286, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 4251, file Cu_Grellens.f90)
                   MAXVAL(Intrinsic) (Line 4263, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4355, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4374, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4394, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4395, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4416, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4417, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4479, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4498, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4518, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4519, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4540, file Cu_Grellens.f90)
                   SIZE(Intrinsic) (Line 4541, file Cu_Grellens.f90)
                   EXP(Intrinsic) (Line 4559, file Cu_Grellens.f90)
                   EXP(Intrinsic) (Line 4561, file Cu_Grellens.f90)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
EXP(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 4559, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4561, file Cu_Grellens.f90)

Name  Messages
----  --------
FLOAT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 753, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 960, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 961, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2591, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3388, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3389, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4235, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4266, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4283, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4284, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4285, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4286, file Cu_Grellens.f90)

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     CU_GRELLENS

Name  Messages
----  --------
GRELLENS in CU_GRELLENS
      Defined as:  Subroutine (line 101, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GRELLENS2 in CU_GRELLENS
      Defined as:  Subroutine (line 411, file Cu_Grellens.f90)

      Interface:   None

      Called By:   GRELLENS2 in CU_GRELLENS (Line 381, file Cu_Grellens.f90)

      Calls:       GRELLENS2 in CU_GRELLENS (Line 381, file Cu_Grellens.f90)

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INITGRELLENS in CU_GRELLENS
      Defined as:  Subroutine (line 101, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
LOG(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 250, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 254, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2310, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2310, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2313, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2313, file Cu_Grellens.f90)

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 1555, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2310, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2327, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2490, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2591, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3859, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3865, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3866, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3867, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3868, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3951, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3970, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3972, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3974, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3980, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3982, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3984, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3986, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4006, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4008, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4010, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4016, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4017, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4018, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4019, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4020, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4021, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4031, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4033, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4035, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4084, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4099, file Cu_Grellens.f90)

Name  Messages
----  --------
MAXVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 954, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2115, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2452, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2654, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2769, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2777, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2844, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2920, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3023, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3147, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3157, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3580, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3797, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4251, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4263, file Cu_Grellens.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 1026, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3015, file Cu_Grellens.f90)

Name  Messages
----  --------
MIN0(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 3326, file Cu_Grellens.f90)

Name  Messages
----  --------
MINVAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 954, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2674, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2709, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2726, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2769, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 2777, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3147, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 3157, file Cu_Grellens.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     CU_GRELLENS

Name  Messages
----  --------
SIZE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   ES5 in CU_GRELLENS (Line 4355, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4374, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4394, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4395, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4416, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4417, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4479, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4498, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4518, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4519, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4540, file Cu_Grellens.f90)
                   ES5 in CU_GRELLENS (Line 4541, file Cu_Grellens.f90)

Name  Messages
----  --------
UNCOMPRESS_I1D in CU_GRELLENS
      Defined as:  Subroutine (line 4453, file Cu_Grellens.f90)

      Interface:   None

      Called By:   UNCOMPRESS_I1D in CU_GRELLENS (Line 1505, file Cu_Grellens.f90)

      Calls:       UNCOMPRESS_I1D in CU_GRELLENS (Line 1505, file Cu_Grellens.f90)

Name  Messages
----  --------
UNCOMPRESS_I2D in CU_GRELLENS
      Defined as:  Subroutine (line 4490, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
UNCOMPRESS_I3D in CU_GRELLENS
      Defined as:  Subroutine (line 4532, file Cu_Grellens.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
UNCOMPRESS_R1D in CU_GRELLENS
      Defined as:  Subroutine (line 4436, file Cu_Grellens.f90)

      Interface:   None

      Called By:   UNCOMPRESS_R1D in CU_GRELLENS (Line 1515, file Cu_Grellens.f90)
                   UNCOMPRESS_R1D in CU_GRELLENS (Line 1516, file Cu_Grellens.f90)

      Calls:       UNCOMPRESS_R1D in CU_GRELLENS (Line 1515, file Cu_Grellens.f90)
                   UNCOMPRESS_R1D in CU_GRELLENS (Line 1516, file Cu_Grellens.f90)

Name  Messages
----  --------
UNCOMPRESS_R2D in CU_GRELLENS
      Defined as:  Subroutine (line 4471, file Cu_Grellens.f90)

      Interface:   None

      Called By:   UNCOMPRESS_R2D in CU_GRELLENS (Line 1510, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1511, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1512, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1513, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1514, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1517, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1518, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1519, file Cu_Grellens.f90)

      Calls:       UNCOMPRESS_R2D in CU_GRELLENS (Line 1510, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1511, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1512, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1513, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1514, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1517, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1518, file Cu_Grellens.f90)
                   UNCOMPRESS_R2D in CU_GRELLENS (Line 1519, file Cu_Grellens.f90)

Name  Messages
----  --------
UNCOMPRESS_R3D in CU_GRELLENS
      Defined as:  Subroutine (line 4510, file Cu_Grellens.f90)

      Interface:   None

      Called By:   UNCOMPRESS_R3D in CU_GRELLENS (Line 1506, file Cu_Grellens.f90)
                   UNCOMPRESS_R3D in CU_GRELLENS (Line 1507, file Cu_Grellens.f90)
                   UNCOMPRESS_R3D in CU_GRELLENS (Line 1508, file Cu_Grellens.f90)
                   UNCOMPRESS_R3D in CU_GRELLENS (Line 1509, file Cu_Grellens.f90)

      Calls:       UNCOMPRESS_R3D in CU_GRELLENS (Line 1506, file Cu_Grellens.f90)
                   UNCOMPRESS_R3D in CU_GRELLENS (Line 1507, file Cu_Grellens.f90)
                   UNCOMPRESS_R3D in CU_GRELLENS (Line 1508, file Cu_Grellens.f90)
                   UNCOMPRESS_R3D in CU_GRELLENS (Line 1509, file Cu_Grellens.f90)

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
