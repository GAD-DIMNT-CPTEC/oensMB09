%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Communications.f90
Compiled : 10/22/10  04:41:53
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmda -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Communications.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Communications.f90
Date     : 10/22/2010  04:42:00


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,nomodinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_16266/Communications.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.                 !
    2.                 !  $Author: pkubota $
    3.                 !  $Date: 2009/09/28 20:16:09 $
    4.                 !  $Revision: 1.10 $
    5.                 !
    6.                 MODULE Communications
    7.                 
    8.                   USE Parallelism, ONLY: &
    9.                        myId,             &
   10.                        maxNodes_four,    &
   11.                        myId_four,        &
   12.                        COMM_FOUR,        &
   13.                        mygroup_four,     &
   14.                        maxNodes
   15.                 
   16.                   USE Sizes, ONLY:     &
   17.                        mymmax,         &
   18.                        mymnmax,        &
   19.                        mymnextmax,     &
   20.                        kmax,           &
   21.                        kmaxloc,        &
   22.                        mmax,           &
   23.                        mmap,           &
   24.                        mnmax,          &
   25.                        mnmax_si,       &
   26.                        mnextmax,       &
   27.                        mnmaxlocal,     &
   28.                        mnextmaxlocal,  &
   29.                        ibmax,          &
   30.                        jbmax,          &
   31.                        jbMax_ext,      &
   32.                        ijmax,          &
   33.                        imax,           &
   34.                        jmax,           &
   35.                        ibmaxperjb,     &
   36.                        imaxperj,       &
   37.                        jbperij,        &
   38.                        ibperij,        &
   39.                        Msperproc,      &
   40.                        Msinproc,       &
   41.                        mnsPerProc,     &
   42.                        mnsExtPerProc,  &
   43.                        NodehasM,       &
   44.                        myfirstlat,     &
   45.                        mylastlat,      &
   46.                        mysendsgr,      &
   47.                        mysendspr,      &
   48.                        myrecsgr,       &
   49.                        myrecspr,       &
   50.                        firstlat,       &
   51.                        lastlat,        &
   52.                        firstlon,       &
   53.                        lastlon,        &
   54.                        myfirstlon,     &
   55.                        mylastlon,      &
   56.                        messages_f,     &
   57.                        messproc_f,     &
   58.                        messages_g,     &
   59.                        messproc_g,     &
   60.                        nrecs_diag,     &
   61.                        nsends_diag,    &
   62.                        myfirstlat_diag,&
   63.                        mylastlat_diag, &
   64.                        myjmax_d,       &
   65.                        firstandlastlat,&
   66.                        myrecs_diag,    &
   67.                        myrecspr_diag,  &
   68.                        mysends_diag,   &
   69.                        mysendspr_diag, &
   70.                        havesurf,       &
   71.                        mnsendsmap_si,  &
   72.                        mymnmap_si,     &
   73.                        myfirstlev,     &
   74.                        map_four,       &
   75.                        ngroups_four,   &
   76.                        kfirst_four,    &
   77.                        klast_four,     &
   78.                        nlevperg_four,  &
   79.                        first_proc_four,&
   80.                        nlatsinproc_d,  &
   81.                        gridmap,        &
   82.                        pointsinproc
   83.                    
   84.                   USE Options, ONLY:   &
   85.                        nfprt,          &
   86.                        reducedgrid,    &
   87.                        slagr
   88.                 
   89.                   USE Utils, ONLY:      &
   90.                        CyclicNearest_r, &
   91.                        CyclicLinear
   92.                 
   93.                   USE IOLowLevel, ONLY:  FWriteField
   94.                 
   95.                   USE Constants, ONLY:  i8,r8
   96.                 
   97.                   IMPLICIT NONE
   98.                 
   99.                   INCLUDE 'mpif.h'
  100.                 
  101.                   PRIVATE
  102.                 
  103.                   PUBLIC :: Collect_Grid_Red
  104.                   PUBLIC :: Collect_Grid_Sur
  105.                   PUBLIC :: Collect_Grid_Sur_Print
  106.                   PUBLIC :: Collect_Grid_His
  107.                   PUBLIC :: Collect_Grid_Full
  108.                   PUBLIC :: Collect_Grid_FullI
  109.                   PUBLIC :: Collect_Grid_d
  110.                   PUBLIC :: Collect_Gauss
  111.                   PUBLIC :: Collect_Spec
  112.                   PUBLIC :: Collect_Spec_Ext
  113.                   PUBLIC :: Exchange_Fields
  114.                   PUBLIC :: Exchange_Winds
  115.                   PUBLIC :: Exchange_Hallos
  116.                   PUBLIC :: Exchange_si
  117.                   PUBLIC :: Exchange_ftog
  118.                   PUBLIC :: Exchange_diag
  119.                   PUBLIC :: Set_Communic_buffer
  120.                   PUBLIC :: SpectoSi
  121.                   PUBLIC :: SitoSpec
  122.                   PUBLIC :: p2d
  123.                 
  124.                   REAL(KIND=r8), PUBLIC, ALLOCATABLE :: bufrec(:)
  125.                   REAL(KIND=r8), PUBLIC, ALLOCATABLE :: bufsend(:)
  126.                   INTEGER,         ALLOCATABLE :: isbrec(:)
  127.                   INTEGER,         ALLOCATABLE :: isbsend(:)
  128.                   INTEGER,         ALLOCATABLE :: ilrecbuf(:)
  129.                   INTEGER,         ALLOCATABLE :: ilsendbuf(:)
  130.                   INTEGER, PUBLIC              :: dimrecbuf 
  131.                   INTEGER, PUBLIC              :: dimsendbuf 
  132.                   TYPE p2d
  133.                      REAL(KIND=r8), POINTER :: p(:,:)
  134.                   END TYPE p2d
  135.                 
  136.                 CONTAINS
  137.                 
  138.                   SUBROUTINE Set_Communic_buffer
  139.                     !
  140.                     INTEGER :: ndim
  141.                 
  142.                     ndim = kmax*8*jmax*mmax*2/maxnodes
  143.                     dimrecbuf = ndim
  144.                     dimsendbuf = ndim
  145.                     ALLOCATE (bufrec(dimrecbuf))
  146.                     ALLOCATE (bufsend(dimsendbuf))
  147.                 
  148.                   END SUBROUTINE Set_Communic_buffer
  149.                 
  150.                   SUBROUTINE Collect_Grid_Red(field, fieldglob)
  151.                     !
  152.                     !   Processor 0 has output in fieldglob
  153.                     !
  154.                     REAL(KIND=r8)   , INTENT(IN) :: field(ibMax*jbMax)
  155.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(ijmax)
  156.                 
  157.                     INTEGER :: ij, j, i, ii
  158.                     INTEGER :: comm
  159.                     INTEGER :: ierr
  160.                     INTEGER :: index
  161.                     INTEGER :: request
  162.                     INTEGER :: requestr(0:MaxNodes-1)
  163.                     INTEGER :: ini(0:MaxNodes-1)
  164.                     INTEGER :: status(MPI_STATUS_SIZE)
  165.                 
  166.                     comm = MPI_COMM_WORLD
  167.                     IF (myid.ne.0) THEN
  168.                        CALL MPI_ISEND(field,pointsinproc(myid),MPI_DOUBLE_PRECISION,0, &
  169.                                       91,comm,request,ierr)
  170.                        CALL MPI_WAIT(request,status,ierr)
  171.                       ELSE
  172.                        requestr(0) = MPI_REQUEST_NULL
  173.                        ini(0) = 1
  174.                        ij=1+pointsinproc(0)
  175.  1------------<        DO ii=1,MaxNodes-1
  176.  1                        ini(ii) = ij
  177.  1                        CALL MPI_IRECV(bufrec(ij),pointsinproc(ii),MPI_DOUBLE_PRECISION,ii,91,&
  178.  1                                       comm,requestr(ii),ierr)
  179.  1                        ij = ij + pointsinproc(ii)
  180.  1------------>        ENDDO
  181.  V-----------<>        bufrec(1:pointsinproc(0)) = field(1:pointsinproc(0))
  182.  1------------<        DO ii=1,MaxNodes-1
  183.  1                        CALL MPI_WAITANY(MaxNodes-1,requestr(1),index,status,ierr)
  184.  1------------>        END DO
  185.                        ii = 1
  186.  1------------<        DO j = 1,jmax
  187.  1 r4---------<           DO i = 1,imaxperj(j)
  188.  1 r4                        ij = gridmap(i,j)
  189.  1 r4                        fieldglob(ii) = bufrec(ini(ij))
  190.  1 r4                        ii = ii + 1
  191.  1 r4                        ini(ij) = ini(ij) + 1
  192.  1 r4--------->           END DO
  193.  1------------>        END DO
  194.                     END IF
  195.                 
  196.                   END SUBROUTINE Collect_Grid_Red
  197.                 
  198.                 
  199.                   SUBROUTINE Collect_Grid_His(field, fieldglob, ngpts, ngptslocal, nproc, nf, &
  200.                                               ngptsperproc, mapglobal)
  201.                     !
  202.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  203.                     INTEGER, INTENT(IN) :: nf
  204.                     INTEGER, INTENT(IN) :: ngpts
  205.                     INTEGER, INTENT(IN) :: ngptslocal
  206.                     INTEGER, INTENT(IN) :: mapglobal(ngpts)
  207.                     REAL(KIND=r8)   , INTENT(IN) :: field(ngptslocal,nf)
  208.                     INTEGER, INTENT(IN) :: ngptsperproc(0:maxnodes-1)
  209.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(ngpts,nf)
  210.                 
  211.                     INTEGER :: ij, i, n, i1, i2
  212.                     INTEGER :: comm
  213.                     INTEGER :: ierr
  214.                     INTEGER :: index
  215.                     INTEGER :: request
  216.                     INTEGER :: requestr(0:MaxNodes-1)
  217.                     INTEGER :: ini(0:MaxNodes)
  218.                     INTEGER :: status(MPI_STATUS_SIZE)
  219.                 
  220.                     IF (dimrecbuf.lt.ngpts*nf) THEN
  221.                        dimrecbuf = ngpts*nf
  222.                        DEALLOCATE (bufrec)
  223.                        ALLOCATE (bufrec(dimrecbuf))
  224.                     ENDIF
  225.                     comm = MPI_COMM_WORLD
  226.                     IF (myid.ne.nproc) THEN
  227.                        CALL MPI_ISEND(field,ngptslocal*nf,MPI_DOUBLE_PRECISION,nproc,92,comm,request,ierr)
  228.                        CALL MPI_WAIT(request,status,ierr)
  229.                       ELSE
  230.                        requestr(nproc) = MPI_REQUEST_NULL
  231.                        ini(0) = 0
  232.                        ij = 1
  233.  1------------<        DO i=0,MaxNodes-1
  234.  1                        IF (i.ne.nproc) THEN
  235.  1                           CALL MPI_IRECV(bufrec(ij),ngptsperproc(i)*nf,MPI_DOUBLE_PRECISION,i,92,&
  236.  1                                          comm,requestr(i),ierr)
  237.  1                        ENDIF
  238.  1                        ini(i+1) = ini(i) + ngptsperproc(i)
  239.  1                        ij = ij + ngptsperproc(i)*nf
  240.  1------------>        ENDDO
  241.                        i1 = ini(nproc)+1
  242.                        i2 = ini(nproc+1)
  243.  b-----------<>        fieldglob(mapglobal(i1:i2),:) = field(1:ngptslocal,:)
  244.  1------------<        DO i=1,MaxNodes-1
  245.  1                        CALL MPI_WAITANY(MaxNodes,requestr(0),index,status,ierr)
  246.  1                        ij = status(MPI_SOURCE)
  247.  1                        i1 = ini(ij)*nf
  248.  1                        !CDIR NODEP
  249.  1 2----------<           DO n=1,nf
  250.  1 2                         fieldglob(mapglobal(ini(ij)+1:ini(ij+1)),n) = &
  251.  1 2                                                         bufrec(i1+1:i1+ngptsperproc(ij))
  252.  1 2                         i1 = i1 + ngptsperproc(ij)
  253.  1 2---------->           ENDDO
  254.  1------------>        ENDDO
  255.                     END IF
  256.                 
  257.                   END SUBROUTINE Collect_Grid_His
  258.                 
  259.                 
  260.                   SUBROUTINE Collect_Grid_Sur(field, fieldglob, nproc)
  261.                     !
  262.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  263.                     REAL(KIND=r8)   , INTENT(IN) :: field(imax,myjMax_d)
  264.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(imax,jmax)
  265.                 
  266.                     INTEGER :: ij, i
  267.                     INTEGER :: comm
  268.                     INTEGER :: ierr
  269.                     INTEGER :: request
  270.                     INTEGER :: requestr(0:MaxNodes-1)
  271.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
  272.                 
  273.                     comm = MPI_COMM_WORLD
  274.                     IF (myid.ne.nproc) THEN
  275.                        IF (myjmax_d.gt.0) THEN
  276.                           CALL MPI_ISEND(field,imax*myjmax_d,MPI_DOUBLE_PRECISION,nproc,93,comm,request,ierr)
  277.                           CALL MPI_WAIT(request,status,ierr)
  278.                        ENDIF
  279.                       ELSE
  280.  A-----------<>        requestr = MPI_REQUEST_NULL
  281.  A-----------<>        IF(myjmax_d.gt.0) fieldglob(:,myfirstlat_diag:mylastlat_diag) = field(:,:)
  282.                        ij=1
  283.  1------------<        DO i=0,MaxNodes-1
  284.  1                        IF (i.ne.nproc.and.nlatsinproc_d(i).gt.0) THEN
  285.  1                           CALL MPI_IRECV(fieldglob(1,ij),nlatsinproc_d(i)*imax,MPI_DOUBLE_PRECISION,i,93,&
  286.  1                                          comm,requestr(i),ierr)
  287.  1                        ENDIF
  288.  1                        ij = ij + nlatsinproc_d(i)
  289.  1------------>        ENDDO
  290.                        CALL MPI_WAITALL(MaxNodes,requestr(0),status,ierr)
  291.                     END IF
  292.                 
  293.                   END SUBROUTINE Collect_Grid_Sur
  294.                 
  295.                 
  296.                   SUBROUTINE Collect_Grid_d(field, fieldglob, levs, nproc)
  297.                     !
  298.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  299.                     INTEGER, INTENT(IN) :: levs
  300.                     REAL(KIND=r8)   , INTENT(IN) :: field(imax,myjMax_d,levs)
  301.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(imax,jmax,levs)
  302.                 
  303.                     INTEGER :: ij, i, nr, k, j, ip
  304.                     INTEGER :: comm
  305.                     INTEGER :: ierr
  306.                     INTEGER :: request
  307.                     INTEGER :: requestr(0:MaxNodes-1)
  308.                     INTEGER :: ini(0:MaxNodes)
  309.                     INTEGER :: index
  310.                     INTEGER :: status(MPI_STATUS_SIZE)
  311.                 
  312.                     comm = MPI_COMM_WORLD
  313.                     IF (myid.ne.nproc) THEN
  314.                        IF (myjmax_d.gt.0) THEN
  315.                           CALL MPI_ISEND(field,imax*myjmax_d*levs,MPI_DOUBLE_PRECISION,nproc,93,comm,request,ierr)
  316.                           CALL MPI_WAIT(request,status,ierr)
  317.                        ENDIF
  318.                       ELSE
  319.  A-----------<>        requestr = MPI_REQUEST_NULL
  320.  A-----------<>        IF(myjmax_d.gt.0) fieldglob(:,myfirstlat_diag:mylastlat_diag,:) = field(:,:,:)
  321.                        ij=1
  322.                        nr = 0
  323.  1------------<        DO i=0,MaxNodes-1
  324.  1                        ini(i) = ij
  325.  1                        IF (i.ne.nproc.and.nlatsinproc_d(i).gt.0) THEN
  326.  1                           CALL MPI_IRECV(bufrec(ij),nlatsinproc_d(i)*imax*levs, &
  327.  1                                          MPI_DOUBLE_PRECISION,i,93,comm,requestr(i),ierr)
  328.  1                           nr = nr + 1
  329.  1                           ij = ij + nlatsinproc_d(i)*imax*levs
  330.  1                        ENDIF
  331.  1------------>        ENDDO
  332.  1------------<        DO i=1,nr
  333.  1                        CALL MPI_WAITANY(MaxNodes,requestr(0),index,status,ierr)
  334.  1                        ij = status(MPI_SOURCE)
  335.  1                        ip = ini(ij) - 1
  336.  1 2----------<           DO k=1,levs
  337.  1 2                         !CDIR NODEP
  338.  1 2 3--------<              DO j=firstandlastlat(1,ij),firstandlastlat(2,ij)
  339.  1 2 3 V-----<>                 fieldglob(1:imax,j,k)= bufrec(ip+1:ip+imax)
  340.  1 2 3                          ip = ip + imax
  341.  1 2 3-------->              ENDDO
  342.  1 2---------->           ENDDO
  343.  1------------>        ENDDO
  344.                     END IF
  345.                 
  346.                   END SUBROUTINE Collect_Grid_d
  347.                 
  348.                 
  349.                 
  350.                   SUBROUTINE Collect_Grid_Full(field, fieldglob, levs, nproc)
  351.                     !
  352.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  353.                     INTEGER, INTENT(IN) :: levs
  354.                     REAL(KIND=r8)   , INTENT(IN) :: field(ibmax,levs,jbMax)
  355.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(imax,jmax*levs)
  356.                 
  357.                     INTEGER :: j, i, k, m, n, l, ic, iold, ks, j1, jc, js
  358.                     INTEGER :: comm
  359.                     INTEGER :: ierr
  360.                     INTEGER :: index
  361.                     INTEGER :: requests(nsends_diag+1)
  362.                     INTEGER :: requestr(0:maxnodes)
  363.                     INTEGER :: status(MPI_STATUS_SIZE)
  364.                     INTEGER :: stat(MPI_STATUS_SIZE,nsends_diag)
  365.                     INTEGER :: ib(0:maxnodes)
  366.                 
  367.                     comm = MPI_COMM_WORLD
  368.                     IF (dimrecbuf.lt.imax*jmax*levs) THEN
  369.                        dimrecbuf = imax*jmax*levs
  370.                        DEALLOCATE (bufrec)
  371.                        ALLOCATE (bufrec(dimrecbuf))
  372.                     ENDIF
  373.                     IF (myid.ne.nproc) THEN
  374.                        js = myfirstlat_diag - 1
  375.                        jc = (mylastlat_diag - js)
  376.                       ELSE
  377.                        js = 0
  378.                        jc = jmax
  379.                     ENDIF
  380.                     ib(0) = 1
  381.                     m = 0
  382.  1------------<     DO k=1,nrecs_diag
  383.  1                     ic = 0
  384.  1 Vp---------<        DO i=m+1,myrecspr_diag(2,k)
  385.  1 Vp                     ic = ic + myrecs_diag(2,i)-myrecs_diag(1,i)+1
  386.  1 Vp--------->        ENDDO
  387.  1                     m = myrecspr_diag(2,k)
  388.  1                     ib(k) = ib(k-1) + ic*levs
  389.  1                     CALL MPI_IRECV(bufrec(ib(k-1)),ib(k)-ib(k-1),MPI_DOUBLE_PRECISION, &
  390.  1                                    myrecspr_diag(1,k),88,comm,requestr(k),ierr)
  391.  1------------>     ENDDO
  392.                     m = 0
  393.                     ic = 0
  394.                     iold = 0
  395.  1------------<     DO k=1,nsends_diag
  396.  1 2----------<         DO l=m+1,mysendspr_diag(2,k)
  397.  1 2                       j = mysends_diag(3,l)
  398.  1 2 3--------<            DO i=mysends_diag(1,l),mysends_diag(2,l)
  399.  1 2 3 V-----<>               bufsend(ic+1:ic+levs) = field(ibperij(i,j),:,jbperij(i,j))
  400.  1 2 3                        ic = ic + levs
  401.  1 2 3-------->            ENDDO
  402.  1 2---------->         ENDDO
  403.  1                      CALL MPI_ISEND(bufsend(iold+1),ic-iold,MPI_DOUBLE_PRECISION,&
  404.  1                                     mysendspr_diag(1,k),88,comm,requests(k),ierr)
  405.  1                      m = mysendspr_diag(2,k)
  406.  1                      iold = ic
  407.  1------------>     ENDDO
  408.  1------------<     DO j=max(myfirstlat,myfirstlat_diag),min(mylastlat,mylastlat_diag)
  409.  1                     j1 = j-js
  410.  1 b----------<        DO k=1,levs
  411.  1 b b--------<           DO i=myfirstlon(j),mylastlon(j)
  412.  1 b b                       fieldglob(i,j1) = field(ibperij(i,j),k,jbperij(i,j))
  413.  1 b b-------->           ENDDO
  414.  1 b                      j1 = j1 + jc
  415.  1 b---------->        ENDDO
  416.  1------------>     ENDDO
  417.  1------------<     DO k=1,nrecs_diag
  418.  1                     CALL MPI_WAITANY(nrecs_diag,requestr(1),index,status,ierr)
  419.  1                     ks = status(MPI_SOURCE)
  420.  1 2----------<        DO l=1,nrecs_diag
  421.  1 2                      IF (ks.eq.myrecspr_diag(1,l)) THEN
  422.  1 2                         n = l
  423.  1 2                         ic = ib(n-1) - 1
  424.  1 2                         m = myrecspr_diag(2,n-1)
  425.  1 2                         EXIT
  426.  1 2                      ENDIF
  427.  1 2---------->        ENDDO
  428.  1 2----------<        DO l = m+1,myrecspr_diag(2,n)
  429.  1 2                      j = myrecs_diag(3,l)-js
  430.  1 2 iVcr4----<           DO i = myrecs_diag(1,l),myrecs_diag(2,l)
  431.  1 2 iVcr4                   j1 = j
  432.  1 2 iVcr4 i--<              DO ks=1,levs
  433.  1 2 iVcr4 i                    fieldglob(i,j1) = bufrec(ic+ks)
  434.  1 2 iVcr4 i                    j1 = j1 + jc
  435.  1 2 iVcr4 i-->              END DO
  436.  1 2 iVcr4                   ic = ic + levs
  437.  1 2 iVcr4---->           END DO
  438.  1 2---------->        END DO
  439.  1------------>     END DO
  440.                     IF(nsends_diag.gt.0) CALL MPI_WAITALL(nsends_diag,requests(1),stat,ierr)
  441.                     IF (myid.ne.nproc) THEN
  442.                         ic = (mylastlat_diag-myfirstlat_diag+1)*imax*levs
  443.                         
  444.                         IF (ic.gt.0) CALL MPI_ISEND(fieldglob,ic,MPI_DOUBLE_PRECISION,&
  445.                                                     nproc,89,comm,requests(1),ierr)
  446.                         CALL MPI_WAIT(requests(1),status,ierr)
  447.                       ELSE
  448.                         ib(0) = 1
  449.  A-----------<>         requestr = MPI_REQUEST_NULL
  450.                         n = 0
  451.  1------------<         DO k=0,maxnodes-1
  452.  1                         IF (k.ne.myid) THEN
  453.  1                            ic = (firstandlastlat(2,k)-firstandlastlat(1,k)+1)*imax*levs
  454.  1                            IF (ic.gt.0) THEN
  455.  1                               CALL MPI_IRECV(bufrec(ib(k)),ic,MPI_DOUBLE_PRECISION, &
  456.  1                                              k,89,comm,requestr(k),ierr)
  457.  1                               n = n + 1
  458.  1                            ENDIF
  459.  1                           ELSE
  460.  1                            ic = 0
  461.  1                         ENDIF
  462.  1                         ib(k+1) = ib(k) + ic
  463.  1------------>         ENDDO
  464.  1------------<         DO k=1,n
  465.  1                         CALL MPI_WAITANY(MaxNodes,requestr(0),index,status,ierr)
  466.  1                         ks = status(MPI_SOURCE)
  467.  1                         ic = ib(ks) - 1
  468.  1 2----------<            DO l=1,levs
  469.  1 2                          j1 = (l-1)*jmax
  470.  1 2 3--------<               DO j=firstandlastlat(1,ks),firstandlastlat(2,ks)
  471.  1 2 3 V-----<>                  Fieldglob(:,j1+j) = bufrec(ic+1:ic+imax)
  472.  1 2 3                           ic = ic + imax
  473.  1 2 3-------->               ENDDO
  474.  1 2---------->            ENDDO
  475.  1------------>         ENDDO
  476.                         j1 = 1
  477.  1------------<         do l=1,levs
  478.  1 2----------<            do j=1,jmax
  479.  1 2                        write(97,*) j,l,(Fieldglob(i,j1),i=1,imaxperj(j))
  480.  1 2                        j1 = j1 + 1
  481.  1 2---------->            enddo
  482.  1------------>         enddo
  483.                      ENDIF
  484.                      
  485.                   END SUBROUTINE Collect_Grid_Full
  486.                 
  487.                 
  488.                 
  489.                   SUBROUTINE Collect_Grid_FullI(imask, fieldglob, levs, nproc)
  490.                     !
  491.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  492.                     INTEGER, INTENT(IN) :: levs
  493.                     INTEGER(KIND=I8)   , INTENT(IN) :: imask(ibmax,levs,jbMax)
  494.                     INTEGER , INTENT(OUT):: fieldglob(imax,jmax*levs)
  495.                 
  496.                     INTEGER :: field(ibmax,levs,jbMax)
  497.                     INTEGER :: ibufrec(imax*jmax),ibufsend(imax*jmax)
  498.                     INTEGER :: j, i, k, m, n, l, ic, iold, ks, j1, jc, js
  499.                     INTEGER :: comm
  500.                     INTEGER :: ierr
  501.                     INTEGER :: index
  502.                     INTEGER :: requests(nsends_diag+1)
  503.                     INTEGER :: requestr(0:maxnodes)
  504.                     INTEGER :: status(MPI_STATUS_SIZE)
  505.                     INTEGER :: stat(MPI_STATUS_SIZE,nsends_diag)
  506.                     INTEGER :: ib(0:maxnodes)
  507.                 
  508.  V-----------<>     field = imask
  509.                     comm = MPI_COMM_WORLD
  510.                     IF (myid.ne.nproc) THEN
  511.                        js = myfirstlat_diag - 1
  512.                        jc = (mylastlat_diag - js)
  513.                       ELSE
  514.                        js = 0
  515.                        jc = jmax
  516.                     ENDIF
  517.                     ib(0) = 1
  518.                     m = 0
  519.  1------------<     DO k=1,nrecs_diag
  520.  1                     ic = 0
  521.  1 Vp---------<        DO i=m+1,myrecspr_diag(2,k)
  522.  1 Vp                     ic = ic + myrecs_diag(2,i)-myrecs_diag(1,i)+1
  523.  1 Vp--------->        ENDDO
  524.  1                     m = myrecspr_diag(2,k)
  525.  1                     ib(k) = ib(k-1) + ic*levs
  526.  1                     CALL MPI_IRECV(ibufrec(ib(k-1)),ib(k)-ib(k-1),MPI_INTEGER, &
  527.  1                                    myrecspr_diag(1,k),88,comm,requestr(k),ierr)
  528.  1------------>     ENDDO
  529.                     m = 0
  530.                     ic = 0
  531.                     iold = 0
  532.  1------------<     DO k=1,nsends_diag
  533.  1 2----------<         DO l=m+1,mysendspr_diag(2,k)
  534.  1 2                       j = mysends_diag(3,l)
  535.  1 2 3--------<            DO i=mysends_diag(1,l),mysends_diag(2,l)
  536.  1 2 3                        ibufsend(ic+1:ic+levs) = field(ibperij(i,j),:,jbperij(i,j))
  537.  1 2 3                        ic = ic + levs
  538.  1 2 3-------->            ENDDO
  539.  1 2---------->         ENDDO
  540.  1                      CALL MPI_ISEND(ibufsend(iold+1),ic-iold,MPI_INTEGER,&
  541.  1                                     mysendspr_diag(1,k),88,comm,requests(k),ierr)
  542.  1                      m = mysendspr_diag(2,k)
  543.  1                      iold = ic
  544.  1------------>     ENDDO
  545.  1------------<     DO j=max(myfirstlat,myfirstlat_diag),min(mylastlat,mylastlat_diag)
  546.  1                     j1 = j-js
  547.  1 b----------<        DO k=1,levs
  548.  1 b b--------<           DO i=myfirstlon(j),mylastlon(j)
  549.  1 b b                       fieldglob(i,j1) = field(ibperij(i,j),k,jbperij(i,j))
  550.  1 b b-------->           ENDDO
  551.  1 b                      j1 = j1 + jc
  552.  1 b---------->        ENDDO
  553.  1------------>     ENDDO
  554.  1------------<     DO k=1,nrecs_diag
  555.  1                     CALL MPI_WAITANY(nrecs_diag,requestr(1),index,status,ierr)
  556.  1                     ks = status(MPI_SOURCE)
  557.  1 2----------<        DO l=1,nrecs_diag
  558.  1 2                      IF (ks.eq.myrecspr_diag(1,l)) THEN
  559.  1 2                         n = l
  560.  1 2                         ic = ib(n-1) - 1
  561.  1 2                         m = myrecspr_diag(2,n-1)
  562.  1 2                         EXIT
  563.  1 2                      ENDIF
  564.  1 2---------->        ENDDO
  565.  1 2----------<        DO l = m+1,myrecspr_diag(2,n)
  566.  1 2                      j = myrecs_diag(3,l)-js
  567.  1 2 ir8------<           DO i = myrecs_diag(1,l),myrecs_diag(2,l)
  568.  1 2 ir8                     j1 = j
  569.  1 2 ir8 i----<              DO ks=1,levs
  570.  1 2 ir8 i                      fieldglob(i,j1) = ibufrec(ic+ks)
  571.  1 2 ir8 i                      j1 = j1 + jc
  572.  1 2 ir8 i---->              END DO
  573.  1 2 ir8                     ic = ic + levs
  574.  1 2 ir8------>           END DO
  575.  1 2---------->        END DO
  576.  1------------>     END DO
  577.                     IF(nsends_diag.gt.0) CALL MPI_WAITALL(nsends_diag,requests(1),stat,ierr)
  578.                     IF (myid.ne.nproc) THEN
  579.                         ic = (mylastlat_diag-myfirstlat_diag+1)*imax*levs
  580.                         
  581.                         IF (ic.gt.0) CALL MPI_ISEND(fieldglob,ic,MPI_INTEGER,&
  582.                                                     nproc,89,comm,requests(1),ierr)
  583.                         CALL MPI_WAIT(requests(1),status,ierr)
  584.                       ELSE
  585.                         ib(0) = 1
  586.  A-----------<>         requestr = MPI_REQUEST_NULL
  587.                         n = 0
  588.  1------------<         DO k=0,maxnodes-1
  589.  1                         IF (k.ne.myid) THEN
  590.  1                            ic = (firstandlastlat(2,k)-firstandlastlat(1,k)+1)*imax*levs
  591.  1                            IF (ic.gt.0) THEN
  592.  1                               CALL MPI_IRECV(ibufrec(ib(k)),ic,MPI_INTEGER, &
  593.  1                                              k,89,comm,requestr(k),ierr)
  594.  1                               n = n + 1
  595.  1                            ENDIF
  596.  1                           ELSE
  597.  1                            ic = 0
  598.  1                         ENDIF
  599.  1                         ib(k+1) = ib(k) + ic
  600.  1------------>         ENDDO
  601.  1------------<         DO k=1,n
  602.  1                         CALL MPI_WAITANY(MaxNodes,requestr(0),index,status,ierr)
  603.  1                         ks = status(MPI_SOURCE)
  604.  1                         ic = ib(ks) - 1
  605.  1 2----------<            DO l=1,levs
  606.  1 2                          j1 = (l-1)*jmax
  607.  1 2 3--------<               DO j=firstandlastlat(1,ks),firstandlastlat(2,ks)
  608.  1 2 3 A-----<>                  Fieldglob(:,j1+j) = ibufrec(ic+1:ic+imax)
  609.  1 2 3                           ic = ic + imax
  610.  1 2 3-------->               ENDDO
  611.  1 2---------->            ENDDO
  612.  1------------>         ENDDO
  613.                         j1 = 1
  614.  1------------<         do l=1,levs
  615.  1 2----------<            do j=1,jmax
  616.  1 2                        write(97,*) j,l,(Fieldglob(i,j1),i=1,imaxperj(j))
  617.  1 2                        j1 = j1 + 1
  618.  1 2---------->            enddo
  619.  1------------>         enddo
  620.                      ENDIF
  621.                      
  622.                   END SUBROUTINE Collect_Grid_FullI
  623.                 
  624.                 
  625.                   SUBROUTINE Collect_Grid_Sur_Print(fields,interp_type,nf,nproc,nunit)    
  626.                     !
  627.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  628.                     INTEGER, INTENT(IN) :: nf
  629.                     INTEGER, INTENT(IN) :: nunit
  630.                     INTEGER, INTENT(IN) :: interp_type(nf)
  631.                     TYPE(p2d), TARGET :: fields(nf)
  632.                     REAL(KIND=r8)   , POINTER   :: g(:,:)
  633.                     REAL(KIND=r8) :: fieldglob(imax,jmax*nf)
  634.                     REAL(KIND=r8) :: saux(imax)
  635.                 
  636.                     INTEGER :: j, i, k, m, n, l, ic, iold, ks, j1, j2, jc, js
  637.                     INTEGER :: comm
  638.                     INTEGER :: ierr
  639.                     INTEGER :: index
  640.                     INTEGER :: requests(nsends_diag+1)
  641.                     INTEGER :: requestr(0:maxnodes)
  642.                     INTEGER :: status(MPI_STATUS_SIZE)
  643.                     INTEGER :: stat(MPI_STATUS_SIZE,nsends_diag)
  644.                     INTEGER :: ib(0:maxnodes)
  645.                 
  646.                     comm = MPI_COMM_WORLD
  647.                     IF (dimrecbuf.lt.imax*jmax*nf) THEN
  648.                        dimrecbuf = imax*jmax*nf
  649.                        DEALLOCATE (bufrec)
  650.                        ALLOCATE (bufrec(dimrecbuf))
  651.                     ENDIF
  652.                     IF (myid.ne.nproc) THEN
  653.                        js = myfirstlat_diag - 1
  654.                        jc = (mylastlat_diag - js)
  655.                       ELSE
  656.                        js = 0
  657.                        jc = jmax
  658.                     ENDIF
  659.                     ib(0) = 1
  660.                     m = 0
  661.  1------------<     DO k=1,nrecs_diag
  662.  1                     ic = 0
  663.  1 Vp---------<        DO i=m+1,myrecspr_diag(2,k)
  664.  1 Vp                     ic = ic + myrecs_diag(2,i)-myrecs_diag(1,i)+1
  665.  1 Vp--------->        ENDDO
  666.  1                     m = myrecspr_diag(2,k)
  667.  1                     ib(k) = ib(k-1) + ic*nf
  668.  1                     CALL MPI_IRECV(bufrec(ib(k-1)),ib(k)-ib(k-1),MPI_DOUBLE_PRECISION, &
  669.  1                                    myrecspr_diag(1,k),88,comm,requestr(k),ierr)
  670.  1------------>     ENDDO
  671.                     m = 0
  672.                     ic = 1
  673.                     iold = 1
  674.  1------------<     DO k=1,nsends_diag
  675.  1 r8---------<         DO n=1,nf
  676.  1 r8                      g => fields(n)%p
  677.  1 r8 3-------<            DO l=m+1,mysendspr_diag(2,k)
  678.  1 r8 3                       j = mysends_diag(3,l)
  679.  1 r8 3 4-----<               DO i=mysends_diag(1,l),mysends_diag(2,l)
  680.  1 r8 3 4                        bufsend(ic) = g(ibperij(i,j),jbperij(i,j))
  681.  1 r8 3 4                        ic = ic + 1
  682.  1 r8 3 4----->               ENDDO
  683.  1 r8 3------->            ENDDO
  684.  1 r8--------->         ENDDO
  685.  1                      CALL MPI_ISEND(bufsend(iold),ic-iold,MPI_DOUBLE_PRECISION,&
  686.  1                                     mysendspr_diag(1,k),88,comm,requests(k),ierr)
  687.  1                      m = mysendspr_diag(2,k)
  688.  1                      iold = ic
  689.  1------------>     ENDDO
  690.  1------------<     DO k=1,nf
  691.  1                     g => fields(k)%p
  692.  1 2----------<        DO j=max(myfirstlat,myfirstlat_diag),min(mylastlat,mylastlat_diag)
  693.  1 2                      j1 = j-js+(k-1)*jc
  694.  1 2 r4-------<           DO i=myfirstlon(j),mylastlon(j)
  695.  1 2 r4                      fieldglob(i,j1) = g(ibperij(i,j),jbperij(i,j))
  696.  1 2 r4------->           ENDDO
  697.  1 2---------->        ENDDO
  698.  1------------>     ENDDO
  699.  1------------<     DO k=1,nrecs_diag
  700.  1                     CALL MPI_WAITANY(nrecs_diag,requestr(1),index,status,ierr)
  701.  1                     ks = status(MPI_SOURCE)
  702.  1 2----------<        DO l=1,nrecs_diag
  703.  1 2                      IF (ks.eq.myrecspr_diag(1,l)) THEN
  704.  1 2                         n = l
  705.  1 2                         ic = ib(n-1)
  706.  1 2                         m = myrecspr_diag(2,n-1)
  707.  1 2                         EXIT
  708.  1 2                      ENDIF
  709.  1 2---------->        ENDDO
  710.  1 2----------<        DO ks=1,nf
  711.  1 2 3--------<           DO l = m+1,myrecspr_diag(2,n)
  712.  1 2 3                       j = myrecs_diag(3,l)-js+(ks-1)*jc
  713.  1 2 3 Vr4----<              DO i = myrecs_diag(1,l),myrecs_diag(2,l)
  714.  1 2 3 Vr4                      fieldglob(i,j) = bufrec(ic)
  715.  1 2 3 Vr4                      ic = ic + 1
  716.  1 2 3 Vr4---->              END DO
  717.  1 2 3-------->           END DO
  718.  1 2---------->        END DO
  719.  1------------>     END DO
  720.                     IF(nsends_diag.gt.0) CALL MPI_WAITALL(nsends_diag,requests(1),stat,ierr)
  721.                     IF (reducedgrid) THEN
  722.  1------------<        DO k=1,nf
  723.  1 2----------<           DO j=myfirstlat_diag,mylastlat_diag
  724.  1 2                         j1 = j-js+(k-1)*jc
  725.  1 2 A-------<>              saux(1:imaxperj(j)) = fieldglob(1:imaxperj(j),j1)
  726.  1 2                         IF (interp_type(k).eq.1) THEN
  727.  1 2                            CALL CyclicLinear(iMaxPerJ(j), iMax, &
  728.  1 2                                              saux,fieldglob(1,j1),1,imax)
  729.  1 2                         ELSEIF (interp_type(k).eq.2) THEN
  730.  1 2                            CALL CyclicNearest_r(iMaxPerJ(j), iMax, &
  731.  1 2                                                 saux,fieldglob(1,j1),1,imax)
  732.  1 2                         END IF
  733.  1 2---------->           ENDDO
  734.  1------------>        ENDDO
  735.                     ENDIF
  736.                     IF (myid.ne.nproc) THEN
  737.                         ic = (mylastlat_diag-myfirstlat_diag+1)*imax*nf
  738.                         
  739.                         IF (ic.gt.0) CALL MPI_ISEND(fieldglob,ic,MPI_DOUBLE_PRECISION,&
  740.                                                     nproc,89,comm,requests(1),ierr)
  741.                         CALL MPI_WAIT(requests(1),status,ierr)
  742.                       ELSE
  743.                         ib(0) = 1
  744.  A-----------<>         requestr = MPI_REQUEST_NULL
  745.                         n = 0
  746.  1------------<         DO k=0,maxnodes-1
  747.  1                         IF (k.ne.myid) THEN
  748.  1                            ic = (firstandlastlat(2,k)-firstandlastlat(1,k)+1)*imax*nf
  749.  1                            IF (ic.gt.0) THEN
  750.  1                               CALL MPI_IRECV(bufrec(ib(k)),ic,MPI_DOUBLE_PRECISION, &
  751.  1                                              k,89,comm,requestr(k),ierr)
  752.  1                               n = n + 1
  753.  1                            ENDIF
  754.  1                           ELSE
  755.  1                            ic = 0
  756.  1                         ENDIF
  757.  1                         ib(k+1) = ib(k) + ic
  758.  1------------>         ENDDO
  759.  1------------<         DO k=1,n
  760.  1                         CALL MPI_WAITANY(MaxNodes,requestr(0),index,status,ierr)
  761.  1                         ks = status(MPI_SOURCE)
  762.  1                         ic = ib(ks) - 1
  763.  1 2----------<            DO l=1,nf
  764.  1 2                          j1 = (l-1)*jmax
  765.  1 2 3--------<               DO j=firstandlastlat(1,ks),firstandlastlat(2,ks)
  766.  1 2 3 V-----<>                  Fieldglob(:,j1+j) = bufrec(ic+1:ic+imax)
  767.  1 2 3                           ic = ic + imax
  768.  1 2 3-------->               ENDDO
  769.  1 2---------->            ENDDO
  770.  1------------>         ENDDO
  771.  1------------<         DO l=1,nf
  772.  1                         j1 = (l-1)*jmax+1
  773.  1                         j2 = l * jmax
  774.  1                         CALL FWriteField(nunit,Fieldglob(:,j1:j2))
  775.  1------------>         ENDDO
  776.                      ENDIF
  777.                      
  778.                   END SUBROUTINE Collect_Grid_Sur_Print
  779.                 
  780.                   SUBROUTINE Collect_Gauss(gauss, gauss_out, nf)  
  781.                     !
  782.                     INTEGER, INTENT(IN) :: nf
  783.                     REAL(KIND=r8), INTENT(IN)  :: gauss(ibmax,nf,jbmax)
  784.                     REAL(KIND=r8), INTENT(OUT) :: gauss_out(imax,myjmax_d,nf)
  785.                     REAL(KIND=r8) :: saux(imax)
  786.                 
  787.                     INTEGER :: j, i, k, m, n, l, ic, iold, ks, j1
  788.                     INTEGER :: comm
  789.                     INTEGER :: ierr
  790.                     INTEGER :: index
  791.                     INTEGER :: requests(nsends_diag+1)
  792.                     INTEGER :: requestr(0:maxnodes)
  793.                     INTEGER :: status(MPI_STATUS_SIZE)
  794.                     INTEGER :: stat(MPI_STATUS_SIZE,nsends_diag)
  795.                     INTEGER :: ib(0:maxnodes)
  796.                 
  797.                     comm = MPI_COMM_WORLD
  798.                     IF (dimrecbuf.lt.imax*jmax*nf) THEN
  799.                        dimrecbuf = imax*jmax*nf
  800.                        DEALLOCATE (bufrec)
  801.                        ALLOCATE (bufrec(dimrecbuf))
  802.                     ENDIF
  803.                     
  804.                     IF (dimsendbuf.lt.ibmax*jbmax*nf) THEN
  805.                        dimsendbuf = ibmax*jbmax*nf
  806.                        DEALLOCATE (bufsend)
  807.                        ALLOCATE (bufsend(dimsendbuf))
  808.                     ENDIF
  809.                     
  810.                     ib(0) = 1
  811.                     m = 0
  812.  1------------<     DO k=1,nrecs_diag
  813.  1                     ic = 0
  814.  1 Vp---------<        DO i=m+1,myrecspr_diag(2,k)
  815.  1 Vp                     ic = ic + myrecs_diag(2,i)-myrecs_diag(1,i)+1
  816.  1 Vp--------->        ENDDO
  817.  1                     m = myrecspr_diag(2,k)
  818.  1                     ib(k) = ib(k-1) + ic*nf
  819.  1                     CALL MPI_IRECV(bufrec(ib(k-1)),ib(k)-ib(k-1),MPI_DOUBLE_PRECISION, &
  820.  1                                    myrecspr_diag(1,k),88,comm,requestr(k),ierr)
  821.  1------------>     ENDDO
  822.                     m = 0
  823.                     ic = 1
  824.                     iold = 1
  825.  1------------<     DO k=1,nsends_diag
  826.  1 2----------<         DO n=1,nf
  827.  1 2 3--------<            DO l=m+1,mysendspr_diag(2,k)
  828.  1 2 3                        j = mysends_diag(3,l)
  829.  1 2 3 4------<               DO i=mysends_diag(1,l),mysends_diag(2,l)
  830.  1 2 3 4                         bufsend(ic) = gauss(ibperij(i,j),n,jbperij(i,j))
  831.  1 2 3 4                         ic = ic + 1
  832.  1 2 3 4------>               ENDDO
  833.  1 2 3-------->            ENDDO
  834.  1 2---------->         ENDDO
  835.  1                      CALL MPI_ISEND(bufsend(iold),ic-iold,MPI_DOUBLE_PRECISION,&
  836.  1                                     mysendspr_diag(1,k),88,comm,requests(k),ierr)
  837.  1                      m = mysendspr_diag(2,k)
  838.  1                      iold = ic
  839.  1------------>     ENDDO
  840.  1------------<     DO k=1,nf
  841.  1 2----------<        DO j=max(myfirstlat,myfirstlat_diag),min(mylastlat,mylastlat_diag)
  842.  1 2                      j1 = j-myfirstlat_diag+1
  843.  1 2 3--------<           DO i=myfirstlon(j),mylastlon(j)
  844.  1 2 3                       gauss_out(i,j1,k) = gauss(ibperij(i,j),k,jbperij(i,j))
  845.  1 2 3-------->           ENDDO
  846.  1 2---------->        ENDDO
  847.  1------------>     ENDDO
  848.  1------------<     DO k=1,nrecs_diag
  849.  1                     CALL MPI_WAITANY(nrecs_diag,requestr(1),index,status,ierr)
  850.  1                     ks = status(MPI_SOURCE)
  851.  1 2----------<        DO l=1,nrecs_diag
  852.  1 2                      IF (ks.eq.myrecspr_diag(1,l)) THEN
  853.  1 2                         n = l
  854.  1 2                         ic = ib(n-1)
  855.  1 2                         m = myrecspr_diag(2,n-1)
  856.  1 2                         EXIT
  857.  1 2                      ENDIF
  858.  1 2---------->        ENDDO
  859.  1 2----------<        DO ks=1,nf
  860.  1 2 3--------<           DO l = m+1,myrecspr_diag(2,n)
  861.  1 2 3                       j = myrecs_diag(3,l)-myfirstlat_diag+1
  862.  1 2 3 Vr4----<              DO i = myrecs_diag(1,l),myrecs_diag(2,l)
  863.  1 2 3 Vr4                      gauss_out(i,j,ks) = bufrec(ic)
  864.  1 2 3 Vr4                      ic = ic + 1
  865.  1 2 3 Vr4---->              END DO
  866.  1 2 3-------->           END DO
  867.  1 2---------->        END DO
  868.  1------------>     END DO
  869.                     IF(nsends_diag.gt.0) CALL MPI_WAITALL(nsends_diag,requests(1),stat,ierr)
  870.                     IF (reducedgrid) THEN
  871.  1------------<        DO k=1,nf
  872.  1 2----------<           DO j=myfirstlat_diag,mylastlat_diag
  873.  1 2                         j1 = j-myfirstlat_diag+1
  874.  1 2 A-------<>              saux(1:imaxperj(j)) = gauss_out(1:imaxperj(j),j1,k)
  875.  1 2                         CALL CyclicLinear(iMaxPerJ(j), iMax, &
  876.  1 2                                            saux,gauss_out(1,j1,k),1,imax)
  877.  1 2---------->           ENDDO
  878.  1------------>        ENDDO
  879.                     ENDIF
  880.                      
  881.                   END SUBROUTINE Collect_Gauss
  882.                 
  883.                 
  884.                 
  885.                   SUBROUTINE Collect_Spec(field, fieldglob, levs, levsg, nproc)
  886.                     !
  887.                     INTEGER, INTENT(IN) :: nproc ! destination processor (has to be the first 
  888.                                                  ! processor of one fourier group)
  889.                     INTEGER, INTENT(IN) :: levs
  890.                     INTEGER, INTENT(IN) :: levsg
  891.                     REAL(KIND=r8)   , INTENT(IN) :: field(2*mymnmax,levs)
  892.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(2*mnmax,levsg)
  893.                 
  894.                     CHARACTER(LEN=*), PARAMETER :: h="**(Collect_Spec)**"
  895.                     INTEGER :: j, i, m, mn, mnloc, ns, l, lev, kdim, kp, kl, ll
  896.                     INTEGER :: comm
  897.                     INTEGER :: ierr
  898.                     INTEGER :: index
  899.                     INTEGER :: request
  900.                     INTEGER :: requestr(0:MaxNodes)
  901.                     INTEGER :: statu(MPI_STATUS_SIZE)
  902.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
  903.                 
  904.                     !
  905.                     !   Collect inside fourier groups (to first processor in each group)
  906.                     !
  907.                     IF (.not.ANY(first_proc_four.eq.nproc)) THEN
  908.                        WRITE(nfprt,*) ' nproc ',nproc 
  909.                        WRITE(nfprt,"(a, ' Spectral fields should be collected to a first processor in a fourier group')") h
  910.                        STOP h
  911.                     ELSE IF (levsg.eq.1.and..not.havesurf) THEN
  912.                        WRITE(nfprt,*) ' myid  ',myid  
  913.                        WRITE(nfprt,"(a, ' should not be calling collect_spec of surface field')") h
  914.                        STOP h
  915.                     ELSE IF (levsg.ne.1.and.levsg.ne.kmax) THEN
  916.                        WRITE(nfprt,*) ' levsg ',levsg 
  917.                        WRITE(nfprt,"(a, ' collect_spec should be used for a global or a surface spectral field')") h
  918.                        STOP h
  919.                     END IF
  920.                     comm = COMM_FOUR
  921.                     kdim = 2*mnmaxlocal*levs
  922.                     IF (dimrecbuf.lt.kdim*maxnodes_four) THEN
  923.                        dimrecbuf = kdim*maxnodes_four
  924.                        DEALLOCATE (bufrec)
  925.                        ALLOCATE (bufrec(dimrecbuf))
  926.                     ENDIF
  927.                     IF (myid_four.ne.0) THEN
  928.                        CALL MPI_ISEND(field,2*levs*mymnmax,MPI_DOUBLE_PRECISION,0,95,comm,request,ierr)
  929.                        CALL MPI_WAIT(request,status,ierr)
  930.                       ELSE
  931.                        requestr(0) = MPI_REQUEST_NULL
  932.  1------------<        DO i=1,MaxNodes_four-1
  933.  1                        CALL MPI_IRECV(bufrec(1+i*kdim),2*mnsPerProc(i)*levs, &
  934.  1                                     MPI_DOUBLE_PRECISION,i,95,comm,requestr(i),ierr)
  935.  1------------>        ENDDO
  936.                        mnloc=0
  937.                        mn=0
  938.                        kl = myfirstlev - 1
  939.  1------------<        DO m=1,Mmax
  940.  1                        ns=2*(Mmax-m+1)
  941.  1                        IF(NodeHasM(m,mygroup_four).eq.0) THEN
  942.  1 2----------<              DO l=1,ns
  943.  1 2                            fieldglob(mn+l,kl+1:kl+levs) = field(mnloc+l,:)
  944.  1 2---------->              ENDDO
  945.  1                           mnloc = mnloc+ns
  946.  1                        ENDIF
  947.  1                        mn = mn + ns
  948.  1------------>        ENDDO
  949.  1------------<        DO i=1,MaxNodes_four-1
  950.  1                        CALL MPI_WAITANY(MaxNodes_four,requestr(0),index,statu,ierr)
  951.  1                        j = statu(MPI_SOURCE)
  952.  1 2----------<           DO lev=1,levs
  953.  1 2                         mnloc = 2*mnsPerProc(j)*(lev-1)
  954.  1 2                         mn=0
  955.  1 2 3--------<              DO m=1,Mmax
  956.  1 2 3                          ns=2*(Mmax-m+1)
  957.  1 2 3                          IF(NodeHasM(m,mygroup_four).eq.j) THEN
  958.  1 2 3 Vr4----<                    DO l=1,ns
  959.  1 2 3 Vr4                            fieldglob(mn+l,kl+lev) = bufrec(mnloc+l+j*kdim)
  960.  1 2 3 Vr4---->                    ENDDO
  961.  1 2 3                             mnloc = mnloc+ns
  962.  1 2 3                          ENDIF
  963.  1 2 3                          mn = mn + ns
  964.  1 2 3-------->              ENDDO
  965.  1 2---------->           ENDDO
  966.  1------------>        ENDDO
  967.                 
  968.                        IF (levsg.eq.1.or.Ngroups_four.eq.1) RETURN
  969.                        !   Collect Global Field
  970.                        !
  971.                        comm = MPI_COMM_WORLD
  972.                        IF (myid.ne.nproc) THEN
  973.                           CALL MPI_ISEND(fieldglob(1,kl+1),2*levs*mnmax,MPI_DOUBLE_PRECISION, &
  974.                                          nproc,96,comm,request,ierr)
  975.                           CALL MPI_WAIT(request,status,ierr)
  976.                          ELSE
  977.  A-----------<>           requestr(1:Ngroups_four) = MPI_REQUEST_NULL
  978.  1------------<           DO i=1,Ngroups_four
  979.  1                           kp = first_proc_four(i)
  980.  1                           kl = kfirst_four(kp)
  981.  1                           ll = nlevperg_four(i)
  982.  1                           IF (kp.ne.nproc) THEN
  983.  1                              CALL MPI_IRECV(fieldglob(1,kl),2*ll*mnmax, &
  984.  1                                             MPI_DOUBLE_PRECISION,kp,96,comm,requestr(i),ierr)
  985.  1                           ENDIF 
  986.  1------------>           ENDDO
  987.                           CALL MPI_WAITALL(Ngroups_four,requestr(1),status,ierr)
  988.                        ENDIF
  989.                     ENDIF
  990.                 
  991.                   END SUBROUTINE Collect_Spec
  992.                 
  993.                 
  994.                 
  995.                   SUBROUTINE Collect_Spec_Ext(field, fieldglob, levs, levsg, nproc)
  996.                     !
  997.                     INTEGER, INTENT(IN) :: nproc ! destination processor
  998.                     INTEGER, INTENT(IN) :: levs
  999.                     INTEGER, INTENT(IN) :: levsg
 1000.                     REAL(KIND=r8)   , INTENT(IN) :: field(2*mymnextmax,levs)
 1001.                     REAL(KIND=r8)   , INTENT(OUT):: fieldglob(2*mnextmax,levsg)
 1002.                 
 1003.                     CHARACTER(LEN=*), PARAMETER :: h="**(Collect_Spec_Ext)**"
 1004.                     INTEGER :: j, i, m, mn, mnloc, ns, l, lev, kdim, kp, kl, ll
 1005.                     INTEGER :: comm
 1006.                     INTEGER :: ierr
 1007.                     INTEGER :: index
 1008.                     INTEGER :: request
 1009.                     INTEGER :: requestr(0:MaxNodes)
 1010.                     INTEGER :: statu(MPI_STATUS_SIZE)
 1011.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1012.                 
 1013.                     !
 1014.                     !   Collect inside fourier groups (to first processor in each group)
 1015.                     !
 1016.                     IF (.not.ANY(first_proc_four.eq.nproc)) THEN
 1017.                        WRITE(nfprt,*) ' nproc ',nproc 
 1018.                        WRITE(nfprt,"(a, ' Spectral fields should be collected to a first processor in a fourier group')") h
 1019.                        STOP h
 1020.                     ELSE IF (levs.eq.1.and..not.havesurf) THEN
 1021.                        WRITE(nfprt,*) ' myid  ',myid  
 1022.                        WRITE(nfprt,"(a, ' should not be calling collect_spec_ext of surface field')") h
 1023.                        STOP h
 1024.                     ELSE IF (levsg.ne.1.and.levsg.ne.kmax) THEN
 1025.                        WRITE(nfprt,*) ' levsg ',levsg 
 1026.                        WRITE(nfprt,"(a, ' collect_spec_ext should be used for a global or a surface spectral field')") h
 1027.                        STOP h
 1028.                     END IF
 1029.                     comm = COMM_FOUR
 1030.                     kdim = 2*mnextmaxlocal*levs
 1031.                     IF (dimrecbuf.lt.kdim*maxnodes_four) THEN
 1032.                        dimrecbuf = kdim*maxnodes_four
 1033.                        DEALLOCATE (bufrec)
 1034.                        ALLOCATE (bufrec(dimrecbuf))
 1035.                     ENDIF
 1036.                     IF (myid_four.ne.0) THEN
 1037.                        CALL MPI_ISEND(field,2*levs*mymnextmax,MPI_DOUBLE_PRECISION, &
 1038.                                       0,95,comm,request,ierr)
 1039.                        CALL MPI_WAIT(request,status,ierr)
 1040.                       ELSE
 1041.                        requestr(0) = MPI_REQUEST_NULL
 1042.  1------------<        DO i=1,MaxNodes_four-1
 1043.  1                        CALL MPI_IRECV(bufrec(1+i*kdim),2*mnsExtPerProc(i)*levs, &
 1044.  1                                     MPI_DOUBLE_PRECISION,i,95,comm,requestr(i),ierr)
 1045.  1------------>        ENDDO
 1046.                        mnloc=0
 1047.                        mn=0
 1048.                        kl = myfirstlev - 1
 1049.  1------------<        DO m=1,Mmax
 1050.  1                        ns=2*(Mmax-m+2)
 1051.  1                        IF(NodeHasM(m,mygroup_four).eq.0) THEN
 1052.  1 2----------<              DO l=1,ns
 1053.  1 2                            fieldglob(mn+l,kl+1:kl+levs) = field(mnloc+l,:)
 1054.  1 2---------->              ENDDO
 1055.  1                           mnloc = mnloc+ns
 1056.  1                        ENDIF
 1057.  1                        mn = mn + ns
 1058.  1------------>        ENDDO
 1059.  1------------<        DO i=1,MaxNodes_four-1
 1060.  1                        CALL MPI_WAITANY(MaxNodes_four,requestr(0),index,statu,ierr)
 1061.  1                        j = statu(MPI_SOURCE)
 1062.  1 2----------<           DO lev=1,levs
 1063.  1 2                         mnloc = 2*mnsExtPerProc(j)*(lev-1)
 1064.  1 2                         mn=0
 1065.  1 2 3--------<              DO m=1,Mmax
 1066.  1 2 3                          ns=2*(Mmax-m+2)
 1067.  1 2 3                          IF(NodeHasM(m,mygroup_four).eq.j) THEN
 1068.  1 2 3 Vr4----<                    DO l=1,ns
 1069.  1 2 3 Vr4                            fieldglob(mn+l,kl+lev) = bufrec(mnloc+l+j*kdim)
 1070.  1 2 3 Vr4---->                    ENDDO
 1071.  1 2 3                             mnloc = mnloc+ns
 1072.  1 2 3                          ENDIF
 1073.  1 2 3                          mn = mn + ns
 1074.  1 2 3-------->              ENDDO
 1075.  1 2---------->           ENDDO
 1076.  1------------>        ENDDO
 1077.                 
 1078.                        IF (levsg.eq.1.or.Ngroups_four.eq.1) RETURN
 1079.                        !   Collect Global Field
 1080.                        !
 1081.                        comm = MPI_COMM_WORLD
 1082.                        IF (myid.ne.nproc) THEN
 1083.                           CALL MPI_ISEND(fieldglob(1,kl+1),2*levs*mnextmax,MPI_DOUBLE_PRECISION, &
 1084.                                          nproc,96,comm,request,ierr)
 1085.                           CALL MPI_WAIT(request,status,ierr)
 1086.                          ELSE
 1087.  A-----------<>           requestr(1:Ngroups_four) = MPI_REQUEST_NULL
 1088.  1------------<           DO i=1,Ngroups_four
 1089.  1                           kp = first_proc_four(i)
 1090.  1                           kl = kfirst_four(kp)
 1091.  1                           ll = nlevperg_four(i)
 1092.  1                           IF (kp.ne.nproc) THEN
 1093.  1                              CALL MPI_IRECV(fieldglob(1,kl),2*ll*mnextmax, &
 1094.  1                                             MPI_DOUBLE_PRECISION,kp,96,comm,requestr(i),ierr)
 1095.  1                           ENDIF 
 1096.  1------------>           ENDDO
 1097.                           CALL MPI_WAITALL(Ngroups_four,requestr(1),status,ierr)
 1098.                        ENDIF
 1099.                     ENDIF
 1100.                 
 1101.                   END SUBROUTINE Collect_Spec_Ext
 1102.                 
 1103.                   SUBROUTINE Exchange_ftog(nrecs_f,nrecs_g)
 1104.                     !
 1105.                     INTEGER, INTENT(IN) :: nrecs_f
 1106.                     INTEGER, INTENT(OUT) :: nrecs_g
 1107.                 
 1108.                     INTEGER :: i, m, k
 1109.                     INTEGER :: comm
 1110.                     INTEGER :: ierr
 1111.                     INTEGER :: ns(0:MaxNodes-1)
 1112.                     INTEGER :: requestr(0:MaxNodes-1)
 1113.                     INTEGER :: requests(0:MaxNodes-1)
 1114.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1115.                 
 1116.                     comm = MPI_COMM_WORLD
 1117.                     requestr(myid) = MPI_REQUEST_NULL
 1118.                     requests(myid) = MPI_REQUEST_NULL
 1119.                     messproc_g(2,0) = 0
 1120.  1------------<     DO i=0,MaxNodes-1
 1121.  1                     IF (i.ne.myid) THEN
 1122.  1                           CALL MPI_IRECV(messproc_g(2,i+1),1,MPI_INTEGER,i,18,&
 1123.  1                                          comm,requestr(i),ierr)
 1124.  1                        ELSE
 1125.  1                           messproc_g(2,i+1) = 0
 1126.  1                     ENDIF
 1127.  1------------>     ENDDO
 1128.                     m = 0
 1129.                     k = 1
 1130.  1------------<     DO i=0,MaxNodes-1
 1131.  1                     IF (i.ne.myid) THEN
 1132.  1                        IF (k.le.nrecs_f.and.i.eq.messproc_f(1,k)) THEN
 1133.  1                           ns(i) = messproc_f(2,k) - m
 1134.  1                           m = messproc_f(2,k)
 1135.  1                           k = k + 1
 1136.  1                          ELSE
 1137.  1                           ns(i) = 0
 1138.  1                        ENDIF
 1139.  1                        CALL MPI_ISEND(ns(i),1,MPI_INTEGER,i,18,comm,requests(i),ierr)
 1140.  1                     ENDIF
 1141.  1------------>     ENDDO
 1142.                     CALL MPI_WAITALL(MaxNodes,requestr(0),status,ierr)
 1143.                     CALL MPI_WAITALL(MaxNodes,requests(0),status,ierr)
 1144.                     k = 0
 1145.                     m = 0
 1146.  r4-----------<     DO i=0,MaxNodes-1
 1147.  r4                    IF (messproc_g(2,i+1).ne.0) THEN
 1148.  r4                       k = k + 1
 1149.  r4                       m = m + messproc_g(2,i+1)
 1150.  r4                       messproc_g(2,k) = m
 1151.  r4                       messproc_g(1,k) = i
 1152.  r4                    ENDIF
 1153.  r4----------->     ENDDO
 1154.                     nrecs_g = k
 1155.                     m = 0
 1156.  1------------<     DO i=1,nrecs_g
 1157.  1                     ns(i) = messproc_g(2,i) - m
 1158.  1                     CALL MPI_IRECV(messages_g(1,m+1),4*ns(i),MPI_INTEGER,messproc_g(1,i),19,&
 1159.  1                                          comm,requestr(i),ierr)
 1160.  1                     m = messproc_g(2,i)
 1161.  1------------>     ENDDO
 1162.                     m = 0
 1163.  1------------<     DO i=1,nrecs_f
 1164.  1                     ns(i) = messproc_f(2,i) - m
 1165.  1                     CALL MPI_ISEND(messages_f(1,m+1),ns(i)*4,MPI_INTEGER,messproc_f(1,i),19,&
 1166.  1                                          comm,requests(i),ierr)
 1167.  1                     m = messproc_f(2,i)
 1168.  1------------>     ENDDO
 1169.                     IF (nrecs_g.gt.0) CALL MPI_WAITALL(nrecs_g,requestr(1),status,ierr)
 1170.                     IF (nrecs_f.gt.0) CALL MPI_WAITALL(nrecs_f,requests(1),status,ierr)
 1171.                     
 1172.                   END SUBROUTINE Exchange_ftog  
 1173.                 
 1174.                   SUBROUTINE Exchange_diag(nrecs_diag,nsends_diag)
 1175.                     !
 1176.                     INTEGER, INTENT(IN) :: nrecs_diag
 1177.                     INTEGER, INTENT(OUT) :: nsends_diag
 1178.                 
 1179.                     INTEGER :: i, m, k
 1180.                     INTEGER :: comm
 1181.                     INTEGER :: ierr
 1182.                     INTEGER :: ns(0:MaxNodes)
 1183.                     INTEGER :: requestr(0:MaxNodes-1)
 1184.                     INTEGER :: requests(0:MaxNodes-1)
 1185.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1186.                 
 1187.                     comm = MPI_COMM_WORLD
 1188.                     requestr(myid) = MPI_REQUEST_NULL
 1189.                     requests(myid) = MPI_REQUEST_NULL
 1190.                     mysendspr_diag(2,0) = 0
 1191.  1------------<     DO i=0,MaxNodes-1
 1192.  1                     IF (i.ne.myid) THEN
 1193.  1                           CALL MPI_IRECV(mysendspr_diag(2,i+1),1,MPI_INTEGER,i,18,&
 1194.  1                                          comm,requestr(i),ierr)
 1195.  1                        ELSE
 1196.  1                           mysendspr_diag(2,i+1) = 0
 1197.  1                     ENDIF
 1198.  1------------>     ENDDO
 1199.                     m = 0
 1200.                     k = 1
 1201.  1------------<     DO i=0,MaxNodes-1
 1202.  1                     IF (i.ne.myid) THEN
 1203.  1                        IF (k.le.nrecs_diag.and.i.eq.myrecspr_diag(1,k)) THEN
 1204.  1                           ns(i) = myrecspr_diag(2,k) - m
 1205.  1                           m = myrecspr_diag(2,k)
 1206.  1                           k = k + 1
 1207.  1                          ELSE
 1208.  1                           ns(i) = 0
 1209.  1                        ENDIF
 1210.  1                        CALL MPI_ISEND(ns(i),1,MPI_INTEGER,i,18,comm,requests(i),ierr)
 1211.  1                     ENDIF
 1212.  1------------>     ENDDO
 1213.                     CALL MPI_WAITALL(MaxNodes,requestr(0),status,ierr)
 1214.                     CALL MPI_WAITALL(MaxNodes,requests(0),status,ierr)
 1215.                     k = 0
 1216.                     m = 0
 1217.  r4-----------<     DO i=0,MaxNodes-1
 1218.  r4                    IF (mysendspr_diag(2,i+1).ne.0) THEN
 1219.  r4                       k = k + 1
 1220.  r4                       m = m + mysendspr_diag(2,i+1)
 1221.  r4                       mysendspr_diag(2,k) = m
 1222.  r4                       mysendspr_diag(1,k) = i
 1223.  r4                    ENDIF
 1224.  r4----------->     ENDDO
 1225.                     nsends_diag = k
 1226.                     m = 0
 1227.  1------------<     DO i=1,nsends_diag
 1228.  1                     ns(i) = mysendspr_diag(2,i) - m
 1229.  1                     CALL MPI_IRECV(mysends_diag(1,m+1),4*ns(i),MPI_INTEGER,mysendspr_diag(1,i),19,&
 1230.  1                                          comm,requestr(i),ierr)
 1231.  1                     m = mysendspr_diag(2,i)
 1232.  1------------>     ENDDO
 1233.                     m = 0
 1234.  1------------<     DO i=1,nrecs_diag
 1235.  1                     ns(i) = myrecspr_diag(2,i) - m
 1236.  1                     CALL MPI_ISEND(myrecs_diag(1,m+1),ns(i)*4,MPI_INTEGER,myrecspr_diag(1,i),19,&
 1237.  1                                          comm,requests(i),ierr)
 1238.  1                     m = myrecspr_diag(2,i)
 1239.  1------------>     ENDDO
 1240.                     IF (nsends_diag.gt.0) CALL MPI_WAITALL(nsends_diag,requestr(1),status,ierr)
 1241.                     IF (nrecs_diag.gt.0) CALL MPI_WAITALL(nrecs_diag,requests(1),status,ierr)
 1242.                     
 1243.                   END SUBROUTINE Exchange_diag 
 1244.                 
 1245.                   SUBROUTINE Exchange_si(ibs,ibr,nsend,mysends)
 1246.                     !
 1247.                     INTEGER, INTENT(IN) :: nsend
 1248.                     INTEGER, INTENT(IN) :: ibs(nsend+1)
 1249.                     INTEGER, INTENT(IN) :: mysends(nsend)
 1250.                     INTEGER, INTENT(OUT) :: ibr(0:maxnodes-1)
 1251.                 
 1252.                     INTEGER :: i
 1253.                     INTEGER :: comm
 1254.                     INTEGER :: ierr
 1255.                     INTEGER :: ns(0:MaxNodes-1)
 1256.                     INTEGER :: requestr(0:MaxNodes-1)
 1257.                     INTEGER :: requests(0:MaxNodes-1)
 1258.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1259.                 
 1260.                     comm = MPI_COMM_WORLD
 1261.                     requestr(myid) = MPI_REQUEST_NULL
 1262.                     requests(myid) = MPI_REQUEST_NULL
 1263.  A-----------<>     ibr = 0
 1264.  1------------<     DO i=0,MaxNodes-1
 1265.  1                     IF (i.ne.myid) THEN
 1266.  1                           CALL MPI_IRECV(ibr(i),1,MPI_INTEGER,i,28,&
 1267.  1                                          comm,requestr(i),ierr)
 1268.  1                     ENDIF
 1269.  1------------>     ENDDO
 1270.  A-----------<>     ns = 0
 1271.  1------------<     DO i=1,nsend
 1272.  1                     ns(mysends(i)) = ibs(i+1)-ibs(i)
 1273.  1------------>     END DO
 1274.  1------------<     DO i=0,MaxNodes-1
 1275.  1                     IF (i.ne.myid) THEN
 1276.  1                        CALL MPI_ISEND(ns(i),1,MPI_INTEGER,i,28,comm,requests(i),ierr)
 1277.  1                      ELSE
 1278.  1                        ibr(i) = ns(i)
 1279.  1                     ENDIF
 1280.  1------------>     ENDDO
 1281.                     CALL MPI_WAITALL(MaxNodes,requestr(0),status,ierr)
 1282.                     CALL MPI_WAITALL(MaxNodes,requests(0),status,ierr)
 1283.                     
 1284.                   END SUBROUTINE Exchange_si
 1285.                 
 1286.                   SUBROUTINE SpectoSi(ibs,ibr,nsend,nrec,mysends,myrecs,maps,mapr,kmg,kml,&
 1287.                                       nlfour,q1,q2,q1_si,q2_si,q3,q3_si,qs1,qs1_si)
 1288.                     !
 1289.                     INTEGER, INTENT(IN) :: nsend
 1290.                     INTEGER, INTENT(IN) :: nrec
 1291.                     INTEGER, INTENT(IN) :: ibs(nsend+1)
 1292.                     INTEGER, INTENT(IN) :: ibr(nrec+1)
 1293.                     INTEGER, INTENT(IN) :: mysends(nsend)
 1294.                     INTEGER, INTENT(IN) :: myrecs(nrec)
 1295.                     INTEGER, INTENT(IN) :: maps(0:maxnodes-1)
 1296.                     INTEGER, INTENT(IN) :: mapr(0:maxnodes-1)
 1297.                     INTEGER, INTENT(IN) :: kml
 1298.                     INTEGER, INTENT(IN) :: kmg
 1299.                     INTEGER, INTENT(IN) :: nlfour(*)
 1300.                     REAL(KIND=r8)   , INTENT(IN) :: q1(2*mymnmax,kml)
 1301.                     REAL(KIND=r8)   , INTENT(IN) :: q2(2*mymnmax,kml)
 1302.                     REAL(KIND=r8)   , INTENT(OUT):: q1_si(2*mnmax_si,kmg)
 1303.                     REAL(KIND=r8)   , INTENT(OUT):: q2_si(2*mnmax_si,kmg)
 1304.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(IN) :: q3(2*mymnmax,kml)
 1305.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(IN) :: qs1(2*mymnmax)
 1306.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(OUT):: q3_si(2*mnmax_si,kmg)
 1307.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(OUT):: qs1_si(2*mnmax_si)
 1308.                 
 1309.                     INTEGER :: i, mn, mnr, idest, l, m, km, ndim
 1310.                     INTEGER :: iself, id, k, iproc, mng
 1311.                     INTEGER :: comm
 1312.                     INTEGER :: ierr
 1313.                     INTEGER :: ips(nsend)
 1314.                     INTEGER :: ipr(nrec)
 1315.                     INTEGER :: requestr(nrec)
 1316.                     INTEGER :: requests(nsend)
 1317.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1318.                     LOGICAL :: dosurf
 1319.                 
 1320.                     ndim = max(ibs(nsend+1),ibr(nrec+1))
 1321.                     IF (dimrecbuf.lt.ndim) THEN
 1322.                        dimrecbuf = ndim
 1323.                        DEALLOCATE (bufrec)
 1324.                        ALLOCATE (bufrec(dimrecbuf))
 1325.                     ENDIF
 1326.                  
 1327.                     IF (dimsendbuf.lt.ndim) THEN
 1328.                        dimsendbuf = ndim
 1329.                        DEALLOCATE (bufsend)
 1330.                        ALLOCATE (bufsend(dimsendbuf))
 1331.                     ENDIF
 1332.                     comm = MPI_COMM_WORLD
 1333.                 
 1334.  1------------<     DO i=1,nrec 
 1335.  1                     idest = myrecs(i)
 1336.  1                     IF (idest.ne.myid) THEN
 1337.  1                        CALL MPI_IRECV(bufrec(ibr(i)),ibr(i+1)-ibr(i),MPI_DOUBLE_PRECISION,&
 1338.  1                             idest,38,comm,requestr(i),ierr)
 1339.  1                      ELSE
 1340.  1                        requestr(i) = MPI_REQUEST_NULL
 1341.  1                        iself = i
 1342.  1                     ENDIF
 1343.  1------------>     ENDDO
 1344.                 
 1345.  V-----------<>     ips = ibs(1:nsend)-1
 1346.  V-----------<>     ipr = ibr(1:nrec)-1
 1347.                     dosurf = havesurf.and.PRESENT(qs1)
 1348.  1------------<     DO mn=1,mymnmax
 1349.  1                     idest = maps(mnsendsmap_si(mn))
 1350.  1                     mnr = 2 * mn
 1351.  1                     id = ips(idest)
 1352.  1 V---------<>        bufsend(id+1:id+kml) = q1(mnr-1,:)
 1353.  1                     id =id+kml
 1354.  1 V---------<>        bufsend(id+1:id+kml) = q1(mnr,:)
 1355.  1                     id =id+kml
 1356.  1 V---------<>        bufsend(id+1:id+kml) = q2(mnr-1,:)
 1357.  1                     id =id+kml
 1358.  1 V---------<>        bufsend(id+1:id+kml) = q2(mnr,:)
 1359.  1                     id =id+kml
 1360.  1                     IF (PRESENT(q3)) THEN
 1361.  1 V---------<>           bufsend(id+1:id+kml) = q3(mnr-1,:)
 1362.  1                        id =id+kml
 1363.  1 V---------<>           bufsend(id+1:id+kml) = q3(mnr,:)
 1364.  1                        id =id+kml
 1365.  1                     END IF
 1366.  1                     IF (dosurf) THEN
 1367.  1                        bufsend(id+1) = qs1(mnr-1)
 1368.  1                        bufsend(id+2) = qs1(mnr)
 1369.  1                        id =id+2
 1370.  1                     END IF
 1371.  1                     ips(idest) = id
 1372.  1------------>     END DO
 1373.  1------------<     DO i=1,nsend
 1374.  1                     idest = mysends(i)
 1375.  1                     IF (idest.ne.myid) THEN
 1376.  1                        CALL MPI_ISEND(bufsend(ibs(i)),ips(i)-ibs(i)+1,MPI_DOUBLE_PRECISION, &
 1377.  1                             idest,38,comm,requests(i),ierr)
 1378.  1                      ELSE
 1379.  1                        requests(i) = MPI_REQUEST_NULL
 1380.  1 V---------<>           bufrec(ibr(iself):ibr(iself)+ips(i)-ibs(i)) = bufsend(ibs(i):ips(i))
 1381.  1                     ENDIF
 1382.  1------------>     END DO
 1383.                     CALL MPI_WAITALL(nrec,requestr(1),status,ierr)
 1384.                 
 1385.                     i = 0
 1386.  1------------<     DO mn=1,mnmax_si
 1387.  1                     mnr = 2 * mn
 1388.  1                     mng = mymnmap_si(mn)
 1389.  1                     m = mmap(mng)
 1390.  1                     k = 0
 1391.  1 2----------<        DO l=1,ngroups_four
 1392.  1 2                      km = nlfour(l)
 1393.  1 2                      IF (km.gt.0) THEN
 1394.  1 2                         iproc = mapr(map_four(l,nodehasM(m,l)))
 1395.  1 2                         id = ipr(iproc)
 1396.  1 2 V-------<>              q1_si(mnr-1,k+1:k+km) =  bufrec(id+1:id+km)
 1397.  1 2                         id = id + km
 1398.  1 2 V-------<>              q1_si(mnr  ,k+1:k+km) =  bufrec(id+1:id+km)
 1399.  1 2                         id = id + km
 1400.  1 2 V-------<>              q2_si(mnr-1,k+1:k+km) =  bufrec(id+1:id+km)
 1401.  1 2                         id = id + km
 1402.  1 2 V-------<>              q2_si(mnr  ,k+1:k+km) =  bufrec(id+1:id+km)
 1403.  1 2                         id = id + km
 1404.  1 2                         IF (PRESENT(q3)) THEN
 1405.  1 2 V-------<>                 q3_si(mnr-1,k+1:k+km) =  bufrec(id+1:id+km)
 1406.  1 2                            id = id + km
 1407.  1 2 V-------<>                 q3_si(mnr  ,k+1:k+km) =  bufrec(id+1:id+km)
 1408.  1 2                            id = id + km
 1409.  1 2                         ENDIF
 1410.  1 2                         IF (l.eq.1.and.PRESENT(qs1)) THEN
 1411.  1 2                            qs1_si(mnr-1) =  bufrec(id+1)
 1412.  1 2                            qs1_si(mnr) =  bufrec(id+2)
 1413.  1 2                            id = id + 2
 1414.  1 2                         ENDIF
 1415.  1 2                         ipr(iproc) = id
 1416.  1 2                      ENDIF
 1417.  1 2                      k = k + km
 1418.  1 2---------->        END DO
 1419.  1------------>     END DO
 1420.                 
 1421.                     CALL MPI_WAITALL(nsend,requests(1),status,ierr)
 1422.                     
 1423.                   END SUBROUTINE SpectoSi
 1424.                 
 1425.                   SUBROUTINE SitoSpec(ibs,ibr,nsend,nrec,mysends,myrecs,maps,mapr,kmg,kml,&
 1426.                                       nlfour,toall,q1,q2,q1_si,q2_si,q3,q3_si,qs1,qs1_si)
 1427.                     !
 1428.                     INTEGER, INTENT(IN) :: nsend
 1429.                     INTEGER, INTENT(IN) :: nrec
 1430.                     INTEGER, INTENT(IN) :: ibs(nsend+1)
 1431.                     INTEGER, INTENT(IN) :: ibr(nrec+1)
 1432.                     INTEGER, INTENT(IN) :: mysends(nsend)
 1433.                     INTEGER, INTENT(IN) :: myrecs(nrec)
 1434.                     INTEGER, INTENT(IN) :: maps(0:maxnodes-1)
 1435.                     INTEGER, INTENT(IN) :: mapr(0:maxnodes-1)
 1436.                     INTEGER, INTENT(IN) :: kml
 1437.                     INTEGER, INTENT(IN) :: kmg
 1438.                     INTEGER, INTENT(IN) :: nlfour(*)
 1439.                     LOGICAL, INTENT(IN) :: toall
 1440.                     REAL(KIND=r8)   , INTENT(OUT):: q1(2*mymnmax,kml)
 1441.                     REAL(KIND=r8)   , INTENT(OUT):: q2(2*mymnmax,kml)
 1442.                     REAL(KIND=r8)   , INTENT(IN) :: q1_si(2*mnmax_si,kmg)
 1443.                     REAL(KIND=r8)   , INTENT(IN) :: q2_si(2*mnmax_si,kmg)
 1444.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(OUT):: q3(2*mymnmax,kml)
 1445.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(OUT):: qs1(2*mymnmax)
 1446.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(IN) :: q3_si(2*mnmax_si,kmg)
 1447.                     REAL(KIND=r8)   , OPTIONAL,   INTENT(IN) :: qs1_si(2*mnmax_si)
 1448.                 
 1449.                     INTEGER :: i, mn, mnr, idest, l, m, km, ndim
 1450.                     INTEGER :: iself, id, k, iproc, mng
 1451.                     INTEGER :: comm
 1452.                     INTEGER :: ierr
 1453.                     INTEGER :: ips(nsend)
 1454.                     INTEGER :: ipr(nrec)
 1455.                     INTEGER :: requestr(nrec)
 1456.                     INTEGER :: requests(nsend)
 1457.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1458.                 
 1459.                     ndim = max(ibs(nsend+1),ibr(nrec+1))
 1460.                     IF (dimrecbuf.lt.ndim) THEN
 1461.                        dimrecbuf = ndim
 1462.                        DEALLOCATE (bufrec)
 1463.                        ALLOCATE (bufrec(dimrecbuf))
 1464.                     ENDIF
 1465.                  
 1466.                     IF (dimsendbuf.lt.ndim) THEN
 1467.                        dimsendbuf = ndim
 1468.                        DEALLOCATE (bufsend)
 1469.                        ALLOCATE (bufsend(dimsendbuf))
 1470.                     ENDIF
 1471.                     comm = MPI_COMM_WORLD
 1472.                 
 1473.  1------------<     DO i=1,nrec 
 1474.  1                     idest = myrecs(i)
 1475.  1                     IF (idest.ne.myid) THEN
 1476.  1                        CALL MPI_IRECV(bufrec(ibr(i)),ibr(i+1)-ibr(i),MPI_DOUBLE_PRECISION,&
 1477.  1                             idest,39,comm,requestr(i),ierr)
 1478.  1                      ELSE
 1479.  1                        requestr(i) = MPI_REQUEST_NULL
 1480.  1                        iself = i
 1481.  1                     ENDIF
 1482.  1------------>     ENDDO
 1483.                 
 1484.  V-----------<>     ips = ibs(1:nsend)-1
 1485.  V-----------<>     ipr = ibr(1:nrec)-1
 1486.                 
 1487.  1------------<     DO mn=1,mnmax_si
 1488.  1                     mnr = 2 * mn
 1489.  1                     mng = mymnmap_si(mn)
 1490.  1                     m = mmap(mng)
 1491.  1                     k = 0
 1492.  1 2----------<        DO l=1,ngroups_four
 1493.  1 2                      iproc = maps(map_four(l,nodehasM(m,l)))
 1494.  1 2                      km = nlfour(l)
 1495.  1 2                      id = ips(iproc)
 1496.  1 2 V-------<>           bufsend(id+1:id+km) = q1_si(mnr-1,k+1:k+km)
 1497.  1 2                      id = id + km
 1498.  1 2 V-------<>           bufsend(id+1:id+km) = q1_si(mnr  ,k+1:k+km)
 1499.  1 2                      id = id + km
 1500.  1 2 V-------<>           bufsend(id+1:id+km) = q2_si(mnr-1,k+1:k+km)
 1501.  1 2                      id = id + km
 1502.  1 2 V-------<>           bufsend(id+1:id+km) = q2_si(mnr  ,k+1:k+km)
 1503.  1 2                      id = id + km
 1504.  1 2                      IF (PRESENT(q3)) THEN
 1505.  1 2 V-------<>              bufsend(id+1:id+km) = q3_si(mnr-1,k+1:k+km)
 1506.  1 2                         id = id + km
 1507.  1 2 V-------<>              bufsend(id+1:id+km) = q3_si(mnr  ,k+1:k+km)
 1508.  1 2                         id = id + km
 1509.  1 2                      ENDIF
 1510.  1 2                      IF ((l.eq.1.or.toall).and.PRESENT(qs1)) THEN
 1511.  1 2                         bufsend(id+1) = qs1_si(mnr-1)
 1512.  1 2                         bufsend(id+2) = qs1_si(mnr)
 1513.  1 2                         id = id + 2
 1514.  1 2                      ENDIF
 1515.  1 2                      ips(iproc) = id
 1516.  1 2                      k = k + km
 1517.  1 2---------->        END DO
 1518.  1------------>     END DO
 1519.                 
 1520.  1------------<     DO i=1,nsend
 1521.  1                     idest = mysends(i)
 1522.  1                     IF (idest.ne.myid) THEN
 1523.  1                        CALL MPI_ISEND(bufsend(ibs(i)),ips(i)-ibs(i)+1,MPI_DOUBLE_PRECISION, &
 1524.  1                             idest,39,comm,requests(i),ierr)
 1525.  1                      ELSE
 1526.  1                        requests(i) = MPI_REQUEST_NULL
 1527.  1 V---------<>           bufrec(ibr(iself):ibr(iself)+ips(i)-ibs(i)) = bufsend(ibs(i):ips(i))
 1528.  1                     ENDIF
 1529.  1------------>     END DO
 1530.                     CALL MPI_WAITALL(nrec,requestr(1),status,ierr)
 1531.                 
 1532.  1------------<     DO mn=1,mymnmax
 1533.  1                     idest = mapr(mnsendsmap_si(mn))
 1534.  1                     mnr = 2 * mn
 1535.  1                     id = ipr(idest)
 1536.  1 V---------<>        q1(mnr-1,:) = bufrec(id+1:id+kml)
 1537.  1                     id =id+kml
 1538.  1 V---------<>        q1(mnr,:) = bufrec(id+1:id+kml)
 1539.  1                     id =id+kml
 1540.  1 V---------<>        q2(mnr-1,:) = bufrec(id+1:id+kml)
 1541.  1                     id =id+kml
 1542.  1 V---------<>        q2(mnr,:) = bufrec(id+1:id+kml)
 1543.  1                     id =id+kml
 1544.  1                     IF (PRESENT(q3)) THEN
 1545.  1 V---------<>           q3(mnr-1,:) = bufrec(id+1:id+kml)
 1546.  1                        id =id+kml
 1547.  1 V---------<>           q3(mnr,:) = bufrec(id+1:id+kml)
 1548.  1                        id =id+kml
 1549.  1                     END IF
 1550.  1                     IF ((havesurf.or.toall).and.PRESENT(qs1)) THEN
 1551.  1                        qs1(mnr-1) = bufrec(id+1)
 1552.  1                        qs1(mnr) = bufrec(id+2)
 1553.  1                        id = id + 2
 1554.  1                     END IF
 1555.  1                     ipr(idest) = id
 1556.  1------------>     END DO
 1557.                     CALL MPI_WAITALL(nsend,requests(1),status,ierr)
 1558.                     
 1559.                   END SUBROUTINE SitoSpec
 1560.                 
 1561.                   SUBROUTINE Exchange_Hallos(nrec,nsend,nscalars)
 1562.                     !
 1563.                     INTEGER, INTENT(IN) :: nrec
 1564.                     INTEGER, INTENT(IN) :: nscalars
 1565.                     INTEGER, INTENT(OUT) :: nsend
 1566.                 
 1567.                     INTEGER :: i, m, k, irec, nlen, isnd
 1568.                     INTEGER :: comm
 1569.                     INTEGER :: ierr
 1570.                     INTEGER :: ns(0:MaxNodes-1)
 1571.                     INTEGER :: requestr(0:MaxNodes-1)
 1572.                     INTEGER :: requests(0:MaxNodes-1)
 1573.                     INTEGER :: status(MPI_STATUS_SIZE,maxnodes)
 1574.                 
 1575.                     comm = MPI_COMM_WORLD
 1576.                     requestr(myid) = MPI_REQUEST_NULL
 1577.                     requests(myid) = MPI_REQUEST_NULL
 1578.  1------------<     DO i=0,MaxNodes-1
 1579.  1                     IF (i.ne.myid) THEN
 1580.  1                        CALL MPI_IRECV(mysendspr(2,i+1),1,MPI_INTEGER,i,15,&
 1581.  1                                       comm,requestr(i),ierr)
 1582.  1                      ELSE
 1583.  1                        mysendspr(2,i+1) = 0
 1584.  1                     ENDIF
 1585.  1------------>     ENDDO
 1586.                     m = 0
 1587.                     k = 1
 1588.  1------------<     DO i=0,MaxNodes-1
 1589.  1                     IF (i.ne.myid) THEN
 1590.  1                        IF (k.le.nrec.and.i.eq.myrecspr(1,k)) THEN
 1591.  1                           ns(i) = myrecspr(2,k) - m
 1592.  1                           m = myrecspr(2,k)
 1593.  1                           k = k + 1
 1594.  1                          ELSE
 1595.  1                           ns(i) = 0
 1596.  1                        ENDIF
 1597.  1                        CALL MPI_ISEND(ns(i),1,MPI_INTEGER,i,15,comm,requests(i),ierr)
 1598.  1                     ENDIF
 1599.  1------------>     ENDDO
 1600.                     CALL MPI_WAITALL(MaxNodes,requestr(0),status,ierr)
 1601.                     CALL MPI_WAITALL(MaxNodes,requests(0),status,ierr)
 1602.                     k = 0
 1603.                     m = 0
 1604.  r4-----------<     DO i=0,MaxNodes-1
 1605.  r4                    IF (mysendspr(2,i+1).ne.0) THEN
 1606.  r4                       k = k + 1
 1607.  r4                       m = m + mysendspr(2,i+1)
 1608.  r4                       mysendspr(2,k) = m
 1609.  r4                       mysendspr(1,k) = i
 1610.  r4                    ENDIF
 1611.  r4----------->     ENDDO
 1612.                     nsend = k
 1613.                     m = 0
 1614.  1------------<     DO i=1,nsend
 1615.  1                     ns(i) = mysendspr(2,i) - m
 1616.  1                     CALL MPI_IRECV(mysendsgr(1,m+1),4*ns(i),MPI_INTEGER,mysendspr(1,i),16,&
 1617.  1                                          comm,requestr(i),ierr)
 1618.  1                     m = mysendspr(2,i)
 1619.  1------------>     ENDDO
 1620.                     ALLOCATE (isbrec (nrec))
 1621.                     ALLOCATE (ilrecbuf(nrec))
 1622.                     ALLOCATE (isbsend(nsend))
 1623.                     ALLOCATE (ilsendbuf(nsend))
 1624.                     m = 0
 1625.                     irec = 1
 1626.  1------------<     DO i=1,nrec
 1627.  1                     isbrec(i) = irec 
 1628.  1                     ns(i) = myrecspr(2,i) - m
 1629.  1                     CALL MPI_ISEND(myrecsgr(1,m+1),ns(i)*4,MPI_INTEGER,myrecspr(1,i),16,&
 1630.  1                                          comm,requests(i),ierr)
 1631.  1                     nlen = 0
 1632.  1 Vp---------<        do k=m+1,myrecspr(2,i)
 1633.  1 Vp                     nlen = nlen + myrecsgr(2,k) - myrecsgr(1,k) + 1
 1634.  1 Vp--------->        enddo
 1635.  1                     ilrecbuf(i) = nlen*(1+kmax*(nscalars+4))
 1636.  1                     irec = ilrecbuf(i) + irec
 1637.  1                     m = myrecspr(2,i)
 1638.  1------------>     ENDDO
 1639.                     CALL MPI_WAITALL(nsend,requestr(1),status,ierr)
 1640.                     CALL MPI_WAITALL(nrec,requests(1),status,ierr)
 1641.                     
 1642.                     m = 0
 1643.                     isnd = 1
 1644.  1------------<     DO i=1,nsend
 1645.  1                     isbsend(i) = isnd 
 1646.  1                     nlen = 0
 1647.  1 Vp---------<        do k=m+1,mysendspr(2,i)
 1648.  1 Vp                     nlen = nlen + mysendsgr(2,k) - mysendsgr(1,k) + 1
 1649.  1 Vp--------->        enddo
 1650.  1                     ilsendbuf(i) = nlen*(1+kmax*(nscalars+4))
 1651.  1                     isnd = ilsendbuf(i) + isnd
 1652.  1                     m = mysendspr(2,i)
 1653.  1------------>     ENDDO
 1654.                 
 1655.                   END SUBROUTINE Exchange_Hallos
 1656.                 
 1657.                   SUBROUTINE Exchange_Fields (u,v,t,q,lps,fgpass_scalar,nscalars,iold, &
 1658.                                               nrec,nsend)
 1659.                     !
 1660.                     INTEGER, INTENT(IN)    :: nsend
 1661.                     INTEGER, INTENT(IN)    :: nrec 
 1662.                     INTEGER, INTENT(IN)    :: nscalars
 1663.                     INTEGER, INTENT(IN)    :: iold
 1664.                     REAL(KIND=r8)   , INTENT(INOUT) :: u(ibMax,kmax,jbMax_ext)
 1665.                     REAL(KIND=r8)   , INTENT(INOUT) :: v(ibMax,kmax,jbMax_ext)
 1666.                     REAL(KIND=r8)   , INTENT(INOUT) :: t(ibMax,kmax,jbMax_ext)
 1667.                     REAL(KIND=r8)   , INTENT(INOUT) :: q(ibMax,kmax,jbMax_ext)
 1668.                     REAL(KIND=r8)   , INTENT(INOUT) :: &
 1669.                                       fgpass_scalar(ibMax,kmax,jbMax_ext,nscalars,3)
 1670.                     REAL(KIND=r8)   , INTENT(INOUT) :: lps(ibMax,jbMax_ext)
 1671.                     INTEGER :: index
 1672.                     INTEGER :: statu(MPI_STATUS_SIZE)
 1673.                     INTEGER :: status(MPI_STATUS_SIZE,nsend)
 1674.                     INTEGER :: requests(nsend)
 1675.                     INTEGER :: requestr(nrec)
 1676.                 
 1677.                     INTEGER :: j, ns, ibr, ibs, jbr, k
 1678.                     INTEGER :: m, i, kr, ks, n
 1679.                     INTEGER :: comm, ierr
 1680.                 
 1681.                     IF (dimrecbuf.lt.isbrec(nrec)+ilrecbuf(nrec)) THEN
 1682.                        dimrecbuf = isbrec(nrec)+ilrecbuf(nrec)
 1683.                        DEALLOCATE (bufrec)
 1684.                        ALLOCATE (bufrec(dimrecbuf))
 1685.                     ENDIF
 1686.                     IF (dimsendbuf.lt.isbsend(nsend)+ilsendbuf(nsend)) THEN
 1687.                        dimsendbuf = isbsend(nsend)+ilsendbuf(nsend)
 1688.                        DEALLOCATE (bufsend)
 1689.                        ALLOCATE (bufsend(dimsendbuf))
 1690.                     ENDIF
 1691.                     comm = MPI_COMM_WORLD
 1692.  1------------<     DO k=1,nrec
 1693.  1                     CALL MPI_IRECV(bufrec(isbrec(k)),ilrecbuf(k),MPI_DOUBLE_PRECISION,&
 1694.  1                                    myrecspr(1,k),75,comm,requestr(k),ierr)
 1695.  1------------>     ENDDO
 1696.                     m = 1
 1697.  1------------<     DO k=1,nsend
 1698.  1                     ibs = isbsend(k)-1
 1699.  1 2----------<        do ns=m,mysendspr(2,k)
 1700.  1 2                      j=mysendsgr(3,ns)
 1701.  1 2 3--------<           do i=mysendsgr(1,ns),mysendsgr(2,ns)
 1702.  1 2 3                       jbr = jbperij(i,j)
 1703.  1 2 3                       ibr = ibperij(i,j)
 1704.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=u(ibr,:,jbr)
 1705.  1 2 3                       ibs = ibs + kmax
 1706.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=v(ibr,:,jbr)
 1707.  1 2 3                       ibs = ibs + kmax
 1708.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=t(ibr,:,jbr)
 1709.  1 2 3                       ibs = ibs + kmax
 1710.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=q(ibr,:,jbr)
 1711.  1 2 3                       ibs = ibs + kmax + 1 
 1712.  1 2 3                       bufsend(ibs) = lps(ibr,jbr)
 1713.  1 2 3 4------<              do n=1,nscalars
 1714.  1 2 3 4 V---<>                 bufsend(ibs+1:ibs+kmax)=fgpass_scalar(ibr,:,jbr,n,iold)
 1715.  1 2 3 4                        ibs = ibs + kmax
 1716.  1 2 3 4------>              enddo
 1717.  1 2 3-------->           enddo
 1718.  1 2---------->        enddo
 1719.  1                     CALL MPI_ISEND(bufsend(isbsend(k)),ilsendbuf(k),MPI_DOUBLE_PRECISION, &
 1720.  1                                    mysendspr(1,k),75,comm,requests(k),ierr)
 1721.  1                     m = mysendspr(2,k)+1
 1722.  1------------>     ENDDO
 1723.  1------------<     DO k=1,nrec
 1724.  1                     CALL MPI_WAITANY(nrec,requestr,index,statu,ierr)
 1725.  1                     kr = statu(MPI_SOURCE)
 1726.  1 2----------<        do j=1,nrec
 1727.  1 2                      if(myrecspr(1,j).eq.kr) then
 1728.  1 2                         ks = j
 1729.  1 2                         exit
 1730.  1 2                      endif
 1731.  1 2---------->        enddo
 1732.  1                     ibs = isbrec(ks)-1
 1733.  1                     if(ks.eq.1) then 
 1734.  1                        m = 1
 1735.  1                       else
 1736.  1                        m = myrecspr(2,ks-1)+1
 1737.  1                     endif
 1738.  1 2----------<        do ns=m,myrecspr(2,ks)
 1739.  1 2                      j=myrecsgr(3,ns)
 1740.  1 2 3--------<           do i=myrecsgr(1,ns),myrecsgr(2,ns)
 1741.  1 2 3                       jbr = jbperij(i,j)
 1742.  1 2 3                       ibr = ibperij(i,j)
 1743.  1 2 3 V-----<>              u(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1744.  1 2 3                       ibs = ibs + kmax
 1745.  1 2 3 V-----<>              v(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1746.  1 2 3                       ibs = ibs + kmax
 1747.  1 2 3 V-----<>              t(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1748.  1 2 3                       ibs = ibs + kmax
 1749.  1 2 3 V-----<>              q(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1750.  1 2 3                       ibs = ibs + kmax + 1 
 1751.  1 2 3                       lps(ibr,jbr) = bufrec(ibs)
 1752.  1 2 3 4------<              do n=1,nscalars
 1753.  1 2 3 4 V---<>                 fgpass_scalar(ibr,:,jbr,n,iold) = bufrec(ibs+1:ibs+kmax)
 1754.  1 2 3 4                        ibs = ibs + kmax
 1755.  1 2 3 4------>              enddo
 1756.  1 2 3-------->           enddo
 1757.  1 2---------->        enddo
 1758.  1------------>     ENDDO
 1759.                     CALL MPI_WAITALL(nsend,requests,status,ierr)
 1760.                 
 1761.                   END SUBROUTINE Exchange_Fields
 1762.                 
 1763.                 
 1764.                   SUBROUTINE Exchange_Winds (u,v,w,um,vm,nrec,nsend)
 1765.                     !
 1766.                     INTEGER, INTENT(IN)    :: nsend
 1767.                     INTEGER, INTENT(IN)    :: nrec 
 1768.                     REAL(KIND=r8)   , INTENT(INOUT) :: u(ibMax,kmax,jbMax_ext)
 1769.                     REAL(KIND=r8)   , INTENT(INOUT) :: v(ibMax,kmax,jbMax_ext)
 1770.                     REAL(KIND=r8)   , INTENT(INOUT) :: w(ibMax,kmax,jbMax_ext)
 1771.                     REAL(KIND=r8)   , INTENT(INOUT) :: um(ibMax,jbMax_ext)
 1772.                     REAL(KIND=r8)   , INTENT(INOUT) :: vm(ibMax,jbMax_ext)
 1773.                     INTEGER :: index
 1774.                     INTEGER :: statu(MPI_STATUS_SIZE)
 1775.                     INTEGER :: status(MPI_STATUS_SIZE,nsend)
 1776.                     INTEGER :: requests(nsend)
 1777.                     INTEGER :: requestr(nrec)
 1778.                 
 1779.                     INTEGER :: j, ns, ibr, ibs, jbr, k
 1780.                     INTEGER :: m, i, kr, ks
 1781.                     INTEGER :: comm, ierr
 1782.                 
 1783.                     comm = MPI_COMM_WORLD
 1784.                     IF (dimrecbuf.lt.isbrec(nrec)+ilrecbuf(nrec)) THEN
 1785.                        dimrecbuf = isbrec(nrec)+ilrecbuf(nrec)
 1786.                        DEALLOCATE (bufrec)
 1787.                        ALLOCATE (bufrec(dimrecbuf))
 1788.                     ENDIF
 1789.                     IF (dimsendbuf.lt.isbsend(nsend)+ilsendbuf(nsend)) THEN
 1790.                        dimsendbuf = isbsend(nsend)+ilsendbuf(nsend)
 1791.                        DEALLOCATE (bufsend)
 1792.                        ALLOCATE (bufsend(dimsendbuf))
 1793.                     ENDIF
 1794.                 
 1795.  1------------<     DO k=1,nrec
 1796.  1                     CALL MPI_IRECV(bufrec(isbrec(k)),ilrecbuf(k),MPI_DOUBLE_PRECISION,&
 1797.  1                                    myrecspr(1,k),76,comm,requestr(k),ierr)
 1798.  1------------>     ENDDO
 1799.                     m = 1
 1800.  1------------<     DO k=1,nsend
 1801.  1                     ibs = isbsend(k)-1
 1802.  1 2----------<        DO ns=m,mysendspr(2,k)
 1803.  1 2                      j=mysendsgr(3,ns)
 1804.  1 2 3--------<           DO i=mysendsgr(1,ns),mysendsgr(2,ns)
 1805.  1 2 3                       jbr = jbperij(i,j)
 1806.  1 2 3                       ibr = ibperij(i,j)
 1807.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=u(ibr,:,jbr)
 1808.  1 2 3                       ibs = ibs + kmax
 1809.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=v(ibr,:,jbr)
 1810.  1 2 3                       ibs = ibs + kmax
 1811.  1 2 3 V-----<>              bufsend(ibs+1:ibs+kmax)=w(ibr,:,jbr)
 1812.  1 2 3                       ibs = ibs + kmax + 1 
 1813.  1 2 3                       bufsend(ibs) = um(ibr,jbr)
 1814.  1 2 3                       ibs = ibs + 1 
 1815.  1 2 3                       bufsend(ibs) = vm(ibr,jbr)
 1816.  1 2 3-------->           ENDDO
 1817.  1 2---------->        ENDDO
 1818.  1              
 1819.  1                     CALL MPI_ISEND(bufsend(isbsend(k)),ibs-isbsend(k)+1,MPI_DOUBLE_PRECISION, &
 1820.  1                                    mysendspr(1,k),76,comm,requests(k),ierr)
 1821.  1                     m = mysendspr(2,k)+1
 1822.  1------------>     ENDDO
 1823.  1------------<     DO k=1,nrec
 1824.  1                     CALL MPI_WAITANY(nrec,requestr,index,statu,ierr)
 1825.  1                     kr = statu(MPI_SOURCE)
 1826.  1              
 1827.  1 2----------<        do j=1,nrec
 1828.  1 2                      if(myrecspr(1,j).eq.kr) then
 1829.  1 2                         ks = j
 1830.  1 2                         exit
 1831.  1 2                      endif
 1832.  1 2---------->        enddo
 1833.  1                     ibs = isbrec(ks)-1
 1834.  1                     if(ks.eq.1) then 
 1835.  1                        m = 1
 1836.  1                       else
 1837.  1                        m = myrecspr(2,ks-1)+1
 1838.  1                     endif
 1839.  1 2----------<        do ns=m,myrecspr(2,ks)
 1840.  1 2                      j=myrecsgr(3,ns)
 1841.  1 2 3--------<           do i=myrecsgr(1,ns),myrecsgr(2,ns)
 1842.  1 2 3                       jbr = jbperij(i,j)
 1843.  1 2 3                       ibr = ibperij(i,j)
 1844.  1 2 3 V-----<>              u(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1845.  1 2 3                       ibs = ibs + kmax
 1846.  1 2 3 V-----<>              v(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1847.  1 2 3                       ibs = ibs + kmax
 1848.  1 2 3 V-----<>              w(ibr,:,jbr) = bufrec(ibs+1:ibs+kmax)
 1849.  1 2 3                       ibs = ibs + kmax + 1 
 1850.  1 2 3                       um(ibr,jbr) = bufrec(ibs)
 1851.  1 2 3                       ibs = ibs + 1 
 1852.  1 2 3                       vm(ibr,jbr) = bufrec(ibs)
 1853.  1 2 3-------->           enddo
 1854.  1 2---------->        enddo
 1855.  1------------>     ENDDO
 1856.                     CALL MPI_WAITALL(nsend,requests,status,ierr)
 1857.                 
 1858.                   END SUBROUTINE Exchange_Winds
 1859.                 
 1860.                 END MODULE Communications

ftn-3021 ftn: IPA File = Communications.f90, Line = 168 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 170 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 175 
  A loop starting at line 175 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 177.

ftn-3021 ftn: IPA File = Communications.f90, Line = 177 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 181 
  A loop starting at line 181 was vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 182 
  A loop starting at line 182 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 183.

ftn-3021 ftn: IPA File = Communications.f90, Line = 183 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 186 
  A loop starting at line 186 was not vectorized because a recurrence was found on "II" at line 190.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 187 
  A loop starting at line 187 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 187 
  A loop starting at line 187 was not vectorized because a recurrence was found on "INI" at line 191.

ftn-3021 ftn: IPA File = Communications.f90, Line = 227 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 228 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 233 
  A loop starting at line 233 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 235.

ftn-3021 ftn: IPA File = Communications.f90, Line = 235 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6049 ftn: SCALAR File = Communications.f90, Line = 243 
  A loop starting at line 243 was blocked with block size 4.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 243 
  A loop starting at line 243 was not vectorized because it contains a reference to a non-vector intrinsic on line 243.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 244 
  A loop starting at line 244 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 245.

ftn-3021 ftn: IPA File = Communications.f90, Line = 245 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 249 
  A loop starting at line 249 was not vectorized for an unspecified reason.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 250 
  A loop starting at line 250 was not vectorized because it contains a reference to a non-vector intrinsic on line 250.

ftn-3021 ftn: IPA File = Communications.f90, Line = 276 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 277 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 280 
  A loop starting at line 280 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 281 
  A loop starting at line 281 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 283 
  A loop starting at line 283 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 285.

ftn-3021 ftn: IPA File = Communications.f90, Line = 285 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 290 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 315 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 316 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 319 
  A loop starting at line 319 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 320 
  A loop starting at line 320 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 323 
  A loop starting at line 323 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 326.

ftn-3021 ftn: IPA File = Communications.f90, Line = 326 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 332 
  A loop starting at line 332 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 333.

ftn-3021 ftn: IPA File = Communications.f90, Line = 333 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = Communications.f90, Line = 336 
  A loop starting at line 336 was not vectorized because the iteration space is too irregular.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 338 
  A loop starting at line 338 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 339 
  A loop starting at line 339 was vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 382 
  A loop starting at line 382 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 389.

ftn-6209 ftn: VECTOR File = Communications.f90, Line = 384 
  A loop starting at line 384 was partially vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 389 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 395 
  A loop starting at line 395 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 403.

ftn-6270 ftn: VECTOR File = Communications.f90, Line = 396 
  A loop starting at line 396 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 398 
  A loop starting at line 398 was not vectorized because a recurrence was found on "BUFSEND" at line 399.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 399 
  A loop starting at line 399 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 403 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 408 
  A loop starting at line 408 was not vectorized because a recurrence was found on "FIELDGLOB" at line 412.

ftn-6294 ftn: VECTOR File = Communications.f90, Line = 410 
  A loop starting at line 410 was not vectorized because a better candidate was found at line 411.

ftn-6049 ftn: SCALAR File = Communications.f90, Line = 410 
  A loop starting at line 410 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Communications.f90, Line = 411 
  A loop starting at line 411 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 411 
  A loop starting at line 411 was not vectorized because it contains a reference to a non-vector intrinsic on line 412.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 417 
  A loop starting at line 417 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 418.

ftn-3021 ftn: IPA File = Communications.f90, Line = 418 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 420 
  A loop starting at line 420 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Communications.f90, Line = 428 
  A loop starting at line 428 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6007 ftn: SCALAR File = Communications.f90, Line = 430 
  A loop starting at line 430 was interchanged with the loop starting at line 432.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 430 
  A loop starting at line 430 was unrolled 4 times.

ftn-6213 ftn: VECTOR File = Communications.f90, Line = 430 
  A loop starting at line 430 was conditionally vectorized.

ftn-6294 ftn: VECTOR File = Communications.f90, Line = 432 
  A loop starting at line 432 was not vectorized because a better candidate was found at line 430.

ftn-3021 ftn: IPA File = Communications.f90, Line = 440 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 444 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 446 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 449 
  A loop starting at line 449 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 451 
  A loop starting at line 451 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 455.

ftn-3021 ftn: IPA File = Communications.f90, Line = 455 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 464 
  A loop starting at line 464 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 465.

ftn-3021 ftn: IPA File = Communications.f90, Line = 465 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 468 
  A loop starting at line 468 was not vectorized because a recurrence was found on "FIELDGLOB" at line 471.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 470 
  A loop starting at line 470 was not vectorized because a recurrence was found on "FIELDGLOB" at line 471.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 471 
  A loop starting at line 471 was vectorized.

ftn-6286 ftn: VECTOR File = Communications.f90, Line = 477 
  A loop starting at line 477 was not vectorized because it contains input/output operations at line 479.

ftn-6286 ftn: VECTOR File = Communications.f90, Line = 478 
  A loop starting at line 478 was not vectorized because it contains input/output operations at line 479.

ftn-6262 ftn: VECTOR File = Communications.f90, Line = 479 
  A loop starting at line 479 was not vectorized because it contains a call to a subroutine or function on line 479.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 508 
  A loop starting at line 508 was vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 519 
  A loop starting at line 519 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 526.

ftn-6209 ftn: VECTOR File = Communications.f90, Line = 521 
  A loop starting at line 521 was partially vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 526 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 532 
  A loop starting at line 532 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 540.

ftn-6270 ftn: VECTOR File = Communications.f90, Line = 533 
  A loop starting at line 533 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 535 
  A loop starting at line 535 was not vectorized because a recurrence was found on "IBUFSEND" at line 536.

ftn-6332 ftn: VECTOR File = Communications.f90, Line = 536 
  A loop starting at line 536 was not vectorized because it does not map well onto the target architecture.

ftn-3021 ftn: IPA File = Communications.f90, Line = 540 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 545 
  A loop starting at line 545 was not vectorized because a recurrence was found on "FIELDGLOB" at line 549.

ftn-6294 ftn: VECTOR File = Communications.f90, Line = 547 
  A loop starting at line 547 was not vectorized because a better candidate was found at line 548.

ftn-6049 ftn: SCALAR File = Communications.f90, Line = 547 
  A loop starting at line 547 was blocked with block size 8.

ftn-6049 ftn: SCALAR File = Communications.f90, Line = 548 
  A loop starting at line 548 was blocked with block size 256.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 548 
  A loop starting at line 548 was not vectorized because it contains a reference to a non-vector intrinsic on line 549.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 554 
  A loop starting at line 554 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 555.

ftn-3021 ftn: IPA File = Communications.f90, Line = 555 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 557 
  A loop starting at line 557 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Communications.f90, Line = 565 
  A loop starting at line 565 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6007 ftn: SCALAR File = Communications.f90, Line = 567 
  A loop starting at line 567 was interchanged with the loop starting at line 569.

ftn-6332 ftn: VECTOR File = Communications.f90, Line = 567 
  A loop starting at line 567 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 567 
  A loop starting at line 567 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = Communications.f90, Line = 569 
  A loop starting at line 569 was not vectorized because a better candidate was found at line 567.

ftn-3021 ftn: IPA File = Communications.f90, Line = 577 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 581 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 583 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 586 
  A loop starting at line 586 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 588 
  A loop starting at line 588 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 592.

ftn-3021 ftn: IPA File = Communications.f90, Line = 592 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 601 
  A loop starting at line 601 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 602.

ftn-3021 ftn: IPA File = Communications.f90, Line = 602 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 605 
  A loop starting at line 605 was not vectorized because a recurrence was found on "FIELDGLOB" at line 608.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 607 
  A loop starting at line 607 was not vectorized because a recurrence was found on "FIELDGLOB" at line 608.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 608 
  A loop starting at line 608 was replaced by a library call.

ftn-6286 ftn: VECTOR File = Communications.f90, Line = 614 
  A loop starting at line 614 was not vectorized because it contains input/output operations at line 616.

ftn-6286 ftn: VECTOR File = Communications.f90, Line = 615 
  A loop starting at line 615 was not vectorized because it contains input/output operations at line 616.

ftn-6262 ftn: VECTOR File = Communications.f90, Line = 616 
  A loop starting at line 616 was not vectorized because it contains a call to a subroutine or function on line 616.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 661 
  A loop starting at line 661 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 668.

ftn-6209 ftn: VECTOR File = Communications.f90, Line = 663 
  A loop starting at line 663 was partially vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 668 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 674 
  A loop starting at line 674 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 685.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 675 
  A loop starting at line 675 was not vectorized because a recurrence was found on "G" at line 676.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 675 
  A loop starting at line 675 was unrolled 8 times.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 677 
  A loop starting at line 677 was not vectorized because a recurrence was found on "IC" at line 681.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 679 
  A loop starting at line 679 was not vectorized because it contains a reference to a non-vector intrinsic on line 680.

ftn-3021 ftn: IPA File = Communications.f90, Line = 685 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6290 ftn: VECTOR File = Communications.f90, Line = 690 
  A loop starting at line 690 was not vectorized because a recurrence was found between "G" and "FIELDGLOB" at line 695.

ftn-6290 ftn: VECTOR File = Communications.f90, Line = 692 
  A loop starting at line 692 was not vectorized because a recurrence was found between "G" and "FIELDGLOB" at line 695.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 694 
  A loop starting at line 694 was unrolled 4 times.

ftn-6290 ftn: VECTOR File = Communications.f90, Line = 694 
  A loop starting at line 694 was not vectorized because a recurrence was found between "G" and "FIELDGLOB" at line 695.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 699 
  A loop starting at line 699 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 700.

ftn-3021 ftn: IPA File = Communications.f90, Line = 700 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 702 
  A loop starting at line 702 was not vectorized for an unspecified reason.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 710 
  A loop starting at line 710 was not vectorized because a recurrence was found on "FIELDGLOB" at line 714.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 711 
  A loop starting at line 711 was not vectorized because a recurrence was found on "IC" at line 715.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 713 
  A loop starting at line 713 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 713 
  A loop starting at line 713 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 720 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 722 
  A loop starting at line 722 was not vectorized because it contains a call to subroutine "CYCLICLINEAR" on line 727.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 723 
  A loop starting at line 723 was not vectorized because it contains a call to subroutine "CYCLICLINEAR" on line 727.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 725 
  A loop starting at line 725 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 725 
  A loop starting at line 725 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 725 
  A loop starting at line 725 was replaced by a library call.

ftn-3021 ftn: IPA File = Communications.f90, Line = 727 
  Routine CYCLICLINEAR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 730 
  Routine CYCLICNEAREST_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 739 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 741 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 744 
  A loop starting at line 744 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 746 
  A loop starting at line 746 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 750.

ftn-3021 ftn: IPA File = Communications.f90, Line = 750 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 759 
  A loop starting at line 759 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 760.

ftn-3021 ftn: IPA File = Communications.f90, Line = 760 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 763 
  A loop starting at line 763 was not vectorized because a recurrence was found on "FIELDGLOB" at line 766.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 765 
  A loop starting at line 765 was not vectorized because a recurrence was found on "FIELDGLOB" at line 766.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 766 
  A loop starting at line 766 was vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 771 
  A loop starting at line 771 was not vectorized because it contains a call to subroutine "FWRITEFIELD82D" on line 774.

ftn-3021 ftn: IPA File = Communications.f90, Line = 774 
  Routine FWRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 812 
  A loop starting at line 812 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 819.

ftn-6209 ftn: VECTOR File = Communications.f90, Line = 814 
  A loop starting at line 814 was partially vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 819 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 825 
  A loop starting at line 825 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 835.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 826 
  A loop starting at line 826 was not vectorized because a recurrence was found on "IC" at line 831.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 827 
  A loop starting at line 827 was not vectorized because a recurrence was found on "IC" at line 831.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 829 
  A loop starting at line 829 was not vectorized because it contains a reference to a non-vector intrinsic on line 830.

ftn-3021 ftn: IPA File = Communications.f90, Line = 835 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = Communications.f90, Line = 840 
  A loop starting at line 840 was not vectorized because the iteration space is too irregular.

ftn-6306 ftn: VECTOR File = Communications.f90, Line = 841 
  A loop starting at line 841 was not vectorized because the iteration space is too irregular.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 843 
  A loop starting at line 843 was not vectorized because it contains a reference to a non-vector intrinsic on line 844.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 848 
  A loop starting at line 848 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 849.

ftn-3021 ftn: IPA File = Communications.f90, Line = 849 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 851 
  A loop starting at line 851 was not vectorized for an unspecified reason.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 859 
  A loop starting at line 859 was not vectorized because a recurrence was found on "IC" at line 864.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 860 
  A loop starting at line 860 was not vectorized because a recurrence was found on "IC" at line 864.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 862 
  A loop starting at line 862 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 862 
  A loop starting at line 862 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 869 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 871 
  A loop starting at line 871 was not vectorized because it contains a call to subroutine "CYCLICLINEAR" on line 875.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 872 
  A loop starting at line 872 was not vectorized because it contains a call to subroutine "CYCLICLINEAR" on line 875.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 874 
  A loop starting at line 874 was replaced by a library call.

ftn-3021 ftn: IPA File = Communications.f90, Line = 875 
  Routine CYCLICLINEAR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 907 
  A loop starting at line 907 was not vectorized for an unspecified reason.

ftn-3021 ftn: IPA File = Communications.f90, Line = 928 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 929 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 932 
  A loop starting at line 932 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 933.

ftn-3021 ftn: IPA File = Communications.f90, Line = 933 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 939 
  A loop starting at line 939 was not vectorized because a recurrence was found on "MNLOC" at line 945.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 942 
  A loop starting at line 942 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Communications.f90, Line = 943 
  A loop starting at line 943 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 949 
  A loop starting at line 949 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 950.

ftn-3021 ftn: IPA File = Communications.f90, Line = 950 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = Communications.f90, Line = 952 
  A loop starting at line 952 was not vectorized because a better candidate was found at line 958.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 955 
  A loop starting at line 955 was not vectorized because a recurrence was found on "MNLOC" at line 961.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 958 
  A loop starting at line 958 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 958 
  A loop starting at line 958 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 973 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 975 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 977 
  A loop starting at line 977 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 978 
  A loop starting at line 978 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 983.

ftn-3021 ftn: IPA File = Communications.f90, Line = 983 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 987 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 1016 
  A loop starting at line 1016 was not vectorized for an unspecified reason.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1037 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1039 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1042 
  A loop starting at line 1042 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1043.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1043 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1049 
  A loop starting at line 1049 was not vectorized because a recurrence was found on "MNLOC" at line 1055.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 1052 
  A loop starting at line 1052 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Communications.f90, Line = 1053 
  A loop starting at line 1053 was not vectorized because it does not map well onto the target architecture.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1059 
  A loop starting at line 1059 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 1060.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1060 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6294 ftn: VECTOR File = Communications.f90, Line = 1062 
  A loop starting at line 1062 was not vectorized because a better candidate was found at line 1068.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1065 
  A loop starting at line 1065 was not vectorized because a recurrence was found on "MNLOC" at line 1071.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 1068 
  A loop starting at line 1068 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1068 
  A loop starting at line 1068 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1083 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1085 
  Routine MPI_WAIT was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 1087 
  A loop starting at line 1087 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1088 
  A loop starting at line 1088 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1093.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1093 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1097 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1120 
  A loop starting at line 1120 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1122.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1122 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1130 
  A loop starting at line 1130 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1139.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1139 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1142 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1143 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 1146 
  A loop starting at line 1146 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1146 
  A loop starting at line 1146 was not vectorized because a recurrence was found on "K" at line 1148.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1156 
  A loop starting at line 1156 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1158.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1158 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1163 
  A loop starting at line 1163 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1165.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1165 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1169 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1170 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1191 
  A loop starting at line 1191 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1193.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1193 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1201 
  A loop starting at line 1201 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1210.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1210 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1213 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1214 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 1217 
  A loop starting at line 1217 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1217 
  A loop starting at line 1217 was not vectorized because a recurrence was found on "K" at line 1219.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1227 
  A loop starting at line 1227 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1229.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1229 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1234 
  A loop starting at line 1234 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1236.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1236 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1240 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1241 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 1263 
  A loop starting at line 1263 was replaced by a library call.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1264 
  A loop starting at line 1264 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1266.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1266 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Communications.f90, Line = 1270 
  A loop starting at line 1270 was replaced by a library call.

ftn-6263 ftn: VECTOR File = Communications.f90, Line = 1271 
  A loop starting at line 1271 was not vectorized because it contains a reference to a non-vector intrinsic on line 1272.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1274 
  A loop starting at line 1274 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1276.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1276 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1281 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1282 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1334 
  A loop starting at line 1334 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1337.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1337 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1345 
  A loop starting at line 1345 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1346 
  A loop starting at line 1346 was vectorized.

ftn-6289 ftn: VECTOR File = Communications.f90, Line = 1348 
  A loop starting at line 1348 was not vectorized because a recurrence was found on "BUFSEND" between lines 1367 and 1368.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1352 
  A loop starting at line 1352 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1354 
  A loop starting at line 1354 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1356 
  A loop starting at line 1356 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1358 
  A loop starting at line 1358 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1361 
  A loop starting at line 1361 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1363 
  A loop starting at line 1363 was vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1373 
  A loop starting at line 1373 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1376.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1376 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1380 
  A loop starting at line 1380 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1383 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1386 
  A loop starting at line 1386 was not vectorized because a recurrence was found on "IPR" at line 1415.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1391 
  A loop starting at line 1391 was not vectorized because a recurrence was found on "IPR" at line 1415.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1396 
  A loop starting at line 1396 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1398 
  A loop starting at line 1398 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1400 
  A loop starting at line 1400 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1402 
  A loop starting at line 1402 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1405 
  A loop starting at line 1405 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1407 
  A loop starting at line 1407 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1421 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1473 
  A loop starting at line 1473 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1476.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1476 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1484 
  A loop starting at line 1484 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1485 
  A loop starting at line 1485 was vectorized.

ftn-6289 ftn: VECTOR File = Communications.f90, Line = 1487 
  A loop starting at line 1487 was not vectorized because a recurrence was found on "BUFSEND" between lines 1496 and 1498.

ftn-6289 ftn: VECTOR File = Communications.f90, Line = 1492 
  A loop starting at line 1492 was not vectorized because a recurrence was found on "BUFSEND" between lines 1511 and 1512.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1496 
  A loop starting at line 1496 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1498 
  A loop starting at line 1498 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1500 
  A loop starting at line 1500 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1502 
  A loop starting at line 1502 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1505 
  A loop starting at line 1505 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1507 
  A loop starting at line 1507 was vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1520 
  A loop starting at line 1520 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1523.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1523 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1527 
  A loop starting at line 1527 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1530 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1532 
  A loop starting at line 1532 was not vectorized because a recurrence was found on "IPR" at line 1555.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1536 
  A loop starting at line 1536 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1538 
  A loop starting at line 1538 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1540 
  A loop starting at line 1540 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1542 
  A loop starting at line 1542 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1545 
  A loop starting at line 1545 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1547 
  A loop starting at line 1547 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1557 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1578 
  A loop starting at line 1578 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1580.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1580 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1588 
  A loop starting at line 1588 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1597.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1597 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1600 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1601 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6005 ftn: SCALAR File = Communications.f90, Line = 1604 
  A loop starting at line 1604 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1604 
  A loop starting at line 1604 was not vectorized because a recurrence was found on "K" at line 1606.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1614 
  A loop starting at line 1614 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1616.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1616 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1626 
  A loop starting at line 1626 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1629.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1629 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6209 ftn: VECTOR File = Communications.f90, Line = 1632 
  A loop starting at line 1632 was partially vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1639 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1640 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1644 
  A loop starting at line 1644 was not vectorized because a recurrence was found on "M" at line 1652.

ftn-6209 ftn: VECTOR File = Communications.f90, Line = 1647 
  A loop starting at line 1647 was partially vectorized.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1692 
  A loop starting at line 1692 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1693.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1693 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1697 
  A loop starting at line 1697 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1719.

ftn-6289 ftn: VECTOR File = Communications.f90, Line = 1699 
  A loop starting at line 1699 was not vectorized because a recurrence was found on "BUFSEND" between lines 1704 and 1706.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1701 
  A loop starting at line 1701 was not vectorized because a recurrence was found on "BUFSEND" at line 1712.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1704 
  A loop starting at line 1704 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1706 
  A loop starting at line 1706 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1708 
  A loop starting at line 1708 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1710 
  A loop starting at line 1710 was vectorized.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1713 
  A loop starting at line 1713 was not vectorized because a recurrence was found on "BUFSEND" at line 1714.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1714 
  A loop starting at line 1714 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1719 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1723 
  A loop starting at line 1723 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 1724.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1724 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 1726 
  A loop starting at line 1726 was not vectorized for an unspecified reason.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1738 
  A loop starting at line 1738 was not vectorized because a recurrence was found on "U" at line 1743.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1740 
  A loop starting at line 1740 was not vectorized because a recurrence was found on "LPS" at line 1751.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1743 
  A loop starting at line 1743 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1745 
  A loop starting at line 1745 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1747 
  A loop starting at line 1747 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1749 
  A loop starting at line 1749 was vectorized.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 1752 
  A loop starting at line 1752 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1753 
  A loop starting at line 1753 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1759 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1795 
  A loop starting at line 1795 was not vectorized because it contains a call to subroutine "MPI_IRECV" on line 1796.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1796 
  Routine MPI_IRECV was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1800 
  A loop starting at line 1800 was not vectorized because it contains a call to subroutine "MPI_ISEND" on line 1819.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1802 
  A loop starting at line 1802 was not vectorized because a recurrence was found on "IBS" at line 1814.

ftn-6289 ftn: VECTOR File = Communications.f90, Line = 1804 
  A loop starting at line 1804 was not vectorized because a recurrence was found on "BUFSEND" between lines 1813 and 1815.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1807 
  A loop starting at line 1807 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1809 
  A loop starting at line 1809 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1811 
  A loop starting at line 1811 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1819 
  Routine MPI_ISEND was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = Communications.f90, Line = 1823 
  A loop starting at line 1823 was not vectorized because it contains a call to subroutine "MPI_WAITANY" on line 1824.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1824 
  Routine MPI_WAITANY was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Communications.f90, Line = 1827 
  A loop starting at line 1827 was not vectorized for an unspecified reason.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1839 
  A loop starting at line 1839 was not vectorized because a recurrence was found on "IBS" at line 1851.

ftn-6254 ftn: VECTOR File = Communications.f90, Line = 1841 
  A loop starting at line 1841 was not vectorized because a recurrence was found on "UM" at line 1850.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1844 
  A loop starting at line 1844 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1846 
  A loop starting at line 1846 was vectorized.

ftn-6204 ftn: VECTOR File = Communications.f90, Line = 1848 
  A loop starting at line 1848 was vectorized.

ftn-3021 ftn: IPA File = Communications.f90, Line = 1856 
  Routine MPI_WAITALL was not inlined because the compiler was unable to locate the routine to expand it inline.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
              C r o s s   R e f e r e n c e   for   COMMUNICATIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

ANY                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    1016

BUFREC                          Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     124
  Set      181    1380    1527
  Used     145     177     189     222     223     235     251     326     339     370     371     389     433     455     471
           649     650     668     714     750     766     800     801     819     863     924     925     933     959    1033
          1034    1043    1069    1323    1324    1337    1396    1398    1400    1402    1405    1407    1411    1412    1462
          1463    1476    1536    1538    1540    1542    1545    1547    1551    1552    1683    1684    1693    1743    1745
          1747    1749    1751    1753    1786    1787    1796    1844    1846    1848    1850    1852

BUFSEND                         Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, SAVE
  Decl     125
  Set      399     680     830    1352    1354    1356    1358    1361    1363    1367    1368    1496    1498    1500    1502
          1505    1507    1511    1512    1704    1706    1708    1710    1712    1714    1807    1809    1811    1813    1815
  Used     146     403     685     806     807     835    1329    1330    1376    1380    1468    1469    1523    1527    1688
          1689    1719    1791    1792    1819

COLLECT_GAUSS                                                     Subroutine, Module procedure
  Decl     110     780
  Set 
  Used

COLLECT_GRID_D                                                    Subroutine, Module procedure
  Decl     109     296
  Set 
  Used

COLLECT_GRID_FULL                                                 Subroutine, Module procedure
  Decl     107     350
  Set 
  Used

COLLECT_GRID_FULLI                                                Subroutine, Module procedure
  Decl     108     489
  Set 
  Used

COLLECT_GRID_HIS                                                  Subroutine, Module procedure
  Decl     106     199
  Set 
  Used

COLLECT_GRID_RED                                                  Subroutine, Module procedure
  Decl     103     150
  Set 
  Used

COLLECT_GRID_SUR                                                  Subroutine, Module procedure
  Decl     104     260
  Set 
  Used

COLLECT_GRID_SUR_PRINT                                            Subroutine, Module procedure
  Decl     105     625
  Set 
  Used

COLLECT_SPEC                                                      Subroutine, Module procedure
  Decl     111     885
  Set 
  Used

COLLECT_SPEC_EXT                                                  Subroutine, Module procedure
  Decl     112     995
  Set 
  Used

COMM                            Stack                             INTEGER
  Decl     158
  Set      166
  Used     169     178

COMM                            Stack                             INTEGER
  Decl     212
  Set      225
  Used     227     236

COMM                            Stack                             INTEGER
  Decl     267
  Set      273
  Used     276     286

COMM                            Stack                             INTEGER
  Decl     304
  Set      312
  Used     315     327

COMM                            Stack                             INTEGER
  Decl     358
  Set      367
  Used     390     404     445     456

COMM                            Stack                             INTEGER
  Decl     499
  Set      509
  Used     527     541     582     593

COMM                            Stack                             INTEGER
  Decl     637
  Set      646
  Used     669     686     740     751

COMM                            Stack                             INTEGER
  Decl     788
  Set      797
  Used     820     836

COMM                            Stack                             INTEGER
  Decl     896
  Set      920     971
  Used     928     934     974     984

COMM                            Stack                             INTEGER
  Decl    1005
  Set     1029    1081
  Used    1038    1044    1084    1094

COMM                            Stack                             INTEGER
  Decl    1109
  Set     1116
  Used    1123    1139    1159    1166

COMM                            Stack                             INTEGER
  Decl    1180
  Set     1187
  Used    1194    1210    1230    1237

COMM                            Stack                             INTEGER
  Decl    1253
  Set     1260
  Used    1267    1276

COMM                            Stack                             INTEGER
  Decl    1311
  Set     1332
  Used    1338    1377

COMM                            Stack                             INTEGER
  Decl    1451
  Set     1471
  Used    1477    1524

COMM                            Stack                             INTEGER
  Decl    1568
  Set     1575
  Used    1581    1597    1617    1630

COMM                            Stack                             INTEGER
  Decl    1679
  Set     1691
  Used    1694    1720

COMM                            Stack                             INTEGER
  Decl    1781
  Set     1783
  Used    1797    1820

COMMUNICATIONS                                                    Module
  Decl       6
  Set 
  Used

COMM_FOUR                       Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     920    1029

CONSTANTS                                                         Module
  Decl
  Set 
  Used      95

CYCLICLINEAR                    Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     875

CYCLICLINEAR                    Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     875

CYCLICNEAREST_R                 Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used     730

CYCLICNEAREST_R                 Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used     730

DIMRECBUF                       Static offset=0                   INTEGER, SAVE
  Decl     130
  Set      143     221     369     648     799     923    1032    1322    1461    1682    1785
  Used     220     368     647     798     922    1031    1321    1460    1681    1784

DIMSENDBUF                      Static offset=64                  INTEGER, SAVE
  Decl     131
  Set      144     805    1328    1467    1687    1790
  Used     804    1327    1466    1686    1789

DOSURF                          Stack                             LOGICAL
  Decl    1318
  Set     1347
  Used    1366

EXCHANGE_DIAG                                                     Subroutine, Module procedure
  Decl     118    1174
  Set 
  Used

EXCHANGE_FIELDS                                                   Subroutine, Module procedure
  Decl     113    1657
  Set 
  Used

EXCHANGE_FTOG                                                     Subroutine, Module procedure
  Decl     117    1103
  Set 
  Used

EXCHANGE_HALLOS                                                   Subroutine, Module procedure
  Decl     115    1561
  Set 
  Used

EXCHANGE_SI                                                       Subroutine, Module procedure
  Decl     116    1245
  Set 
  Used

EXCHANGE_WINDS                                                    Subroutine, Module procedure
  Decl     114    1764
  Set 
  Used

FGPASS_SCALAR                   Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>, <exp>, 3), INTENT(INOUT)
  Decl    1657    1669
  Set     1753
  Used    1714

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     150     154
  Set 
  Used     168     181

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     199     207
  Set 
  Used     227     243

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     260     263
  Set 
  Used     276     281

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl     296     300
  Set 
  Used     315     320

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl     350     354
  Set 
  Used     399     412

FIELD                           Stack                             INTEGER, DIMENSION(<exp>, <exp>, <exp>)
  Decl     496
  Set      508
  Used     536     549

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     885     891
  Set 
  Used     928     943

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     995    1000
  Set 
  Used    1037    1053

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl     150     155
  Set      189
  Used

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     199     209
  Set      243     250
  Used

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     260     264
  Set      281
  Used     285

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl     296     301
  Set      320     339
  Used

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     350     355
  Set      412     433     471
  Used     444

FIELDGLOB                       Dummy Arg                         INTEGER, DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     489     494
  Set      549     570     608
  Used     581

FIELDGLOB                       Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     633
  Set      695     714     766
  Used     725     728     731     739

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     885     892
  Set      943     959
  Used     973     983

FIELDGLOB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     995    1001
  Set     1053    1069
  Used    1083    1093

FIELDS                          Dummy Arg                         TYPE(P2D), DIMENSION(<exp>), TARGET
  Decl     625     631
  Set 
  Used

FIRSTANDLASTLAT                 Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     338     453     470     590     607     748     765

FIRST_PROC_FOUR                 Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     907     979    1016    1089

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

FWRITEFIELD82D                  Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used     774

G                               Stack                             REAL(KIND=8), DIMENSION(:, :), POINTER
  Decl     632
  Set 
  Used     680     695

GAUSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl     780     783
  Set 
  Used     830     844

GAUSS_OUT                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(OUT)
  Decl     780     784
  Set      844     863
  Used     874     876

GRIDMAP                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     188

H                                                                 CHARACTER(18), PARAMETER
  Decl     894
  Set 
  Used     909     910     913     914     917     918

H                                                                 CHARACTER(22), PARAMETER
  Decl    1003
  Set 
  Used    1018    1019    1022    1023    1026    1027

HAVESURF                        Use assoc                         LOGICAL, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     911    1020    1347

I                               Stack                             INTEGER
  Decl     157
  Set      187
  Used     188

I                               Stack                             INTEGER
  Decl     211
  Set      233     244
  Used     234     236     238     239

I                               Stack                             INTEGER
  Decl     266
  Set      283
  Used     284     286     288

I                               Stack                             INTEGER
  Decl     303
  Set      323     332
  Used     324     325     327     329

I                               Stack                             INTEGER
  Decl     357
  Set      384     398     411     430     479
  Used     385     399     412     433     479

I                               Stack                             INTEGER
  Decl     498
  Set      521     535     548     567     616
  Used     522     536     549     570     616

I                               Stack                             INTEGER
  Decl     636
  Set      663     679     694     713
  Used     664     680     695     714

I                               Stack                             INTEGER
  Decl     787
  Set      814     829     843     862
  Used     815     830     844     863

I                               Stack                             INTEGER
  Decl     895
  Set      932     949     978
  Used     933     934     979     981     984

I                               Stack                             INTEGER
  Decl    1004
  Set     1042    1059    1088
  Used    1043    1044    1089    1091    1094

I                               Stack                             INTEGER
  Decl    1108
  Set     1120    1130    1146    1156    1163
  Used    1121    1122    1123    1125    1131    1132    1133    1137    1139    1147    1149    1151    1157    1158    1159
          1160    1164    1165    1166    1167

I                               Stack                             INTEGER
  Decl    1179
  Set     1191    1201    1217    1227    1234
  Used    1192    1193    1194    1196    1202    1203    1204    1208    1210    1218    1220    1222    1228    1229    1230
          1231    1235    1236    1237    1238

I                               Stack                             INTEGER
  Decl    1252
  Set     1264    1271    1274
  Used    1265    1266    1267    1272    1275    1276    1278

I                               Stack                             INTEGER
  Decl    1309
  Set     1334    1373    1385
  Used    1335    1337    1338    1340    1341    1374    1376    1377    1379    1380

I                               Stack                             INTEGER
  Decl    1449
  Set     1473    1520
  Used    1474    1476    1477    1479    1480    1521    1523    1524    1526    1527

I                               Stack                             INTEGER
  Decl    1567
  Set     1578    1588    1604    1614    1626    1644
  Used    1579    1580    1581    1583    1589    1590    1591    1595    1597    1605    1607    1609    1615    1616    1617
          1618    1627    1628    1629    1630    1632    1635    1636    1637    1645    1647    1650    1651    1652

I                               Stack                             INTEGER
  Decl    1678
  Set     1701    1740
  Used    1702    1703    1741    1742

I                               Stack                             INTEGER
  Decl    1780
  Set     1804    1841
  Used    1805    1806    1842    1843

I1                              Stack                             INTEGER
  Decl     211
  Set      241     247     252
  Used     243     251

I2                              Stack                             INTEGER
  Decl     211
  Set      242
  Used     243

I8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     493

IB                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     365
  Set      380     388     448     462
  Used     389     423     455     467

IB                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     506
  Set      517     525     585     599
  Used     526     560     592     604

IB                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     644
  Set      659     667     743     757
  Used     668     705     750     762

IB                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     795
  Set      810     818
  Used     819     854

IBMAX                           Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     804     805

IBPERIJ                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     399     412     536     549     680     695     830     844    1703    1742    1806    1843

IBR                             Dummy Arg                         INTEGER, DIMENSION(0:<exp>), INTENT(OUT)
  Decl    1245    1250
  Set     1263    1278
  Used    1266

IBR                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1286    1292
  Set 
  Used    1320    1337    1346    1380

IBR                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1425    1431
  Set 
  Used    1459    1476    1485    1527

IBR                             Stack                             INTEGER
  Decl    1677
  Set     1703    1742
  Used    1704    1706    1708    1710    1712    1714    1743    1745    1747    1749    1751    1753

IBR                             Stack                             INTEGER
  Decl    1779
  Set     1806    1843
  Used    1807    1809    1811    1813    1815    1844    1846    1848    1850    1852

IBS                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1245    1248
  Set 
  Used    1272

IBS                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1286    1291
  Set 
  Used    1320    1345    1376    1380

IBS                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1425    1430
  Set 
  Used    1459    1484    1523    1527

IBS                             Stack                             INTEGER
  Decl    1677
  Set     1698    1705    1707    1709    1711    1715    1732    1744    1746    1748    1750    1754
  Used    1704    1706    1708    1710    1712    1714    1743    1745    1747    1749    1751    1753

IBS                             Stack                             INTEGER
  Decl    1779
  Set     1801    1808    1810    1812    1814    1833    1845    1847    1849    1851
  Used    1807    1809    1811    1813    1815    1844    1846    1848    1850    1852

IBUFREC                         Stack                             INTEGER, DIMENSION(<exp>)
  Decl     497
  Set 
  Used     526     570     592     608

IBUFSEND                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     497
  Set      536
  Used     540

IC                              Stack                             INTEGER
  Decl     357
  Set      383     385     393     400     423     436     442     453     460     467     472
  Used     388     399     406     433     444     454     455     462     471

IC                              Stack                             INTEGER
  Decl     498
  Set      520     522     530     537     560     573     579     590     597     604     609
  Used     525     536     543     570     581     591     592     599     608

IC                              Stack                             INTEGER
  Decl     636
  Set      662     664     672     681     705     715     737     748     755     762     767
  Used     667     680     688     714     739     749     750     757     766

IC                              Stack                             INTEGER
  Decl     787
  Set      813     815     823     831     854     864
  Used     818     830     838     863

ID                              Stack                             INTEGER
  Decl    1310
  Set     1351    1353    1355    1357    1359    1362    1364    1369    1395    1397    1399    1401    1403    1406    1408
          1413
  Used    1352    1354    1356    1358    1361    1363    1367    1368    1371    1396    1398    1400    1402    1405    1407
          1411    1412    1415

ID                              Stack                             INTEGER
  Decl    1450
  Set     1495    1497    1499    1501    1503    1506    1508    1513    1535    1537    1539    1541    1543    1546    1548
          1553
  Used    1496    1498    1500    1502    1505    1507    1511    1512    1515    1536    1538    1540    1542    1545    1547
          1551    1552    1555

IDEST                           Stack                             INTEGER
  Decl    1309
  Set     1335    1349    1374
  Used    1336    1338    1351    1371    1375    1377

IDEST                           Stack                             INTEGER
  Decl    1449
  Set     1474    1521    1533
  Used    1475    1477    1522    1524    1535    1555

IERR                            Stack                             INTEGER
  Decl     159
  Set 
  Used     169     170     178     183

IERR                            Stack                             INTEGER
  Decl     213
  Set 
  Used     227     228     236     245

IERR                            Stack                             INTEGER
  Decl     268
  Set 
  Used     276     277     286     290

IERR                            Stack                             INTEGER
  Decl     305
  Set 
  Used     315     316     327     333

IERR                            Stack                             INTEGER
  Decl     359
  Set 
  Used     390     404     418     440     445     446     456     465

IERR                            Stack                             INTEGER
  Decl     500
  Set 
  Used     527     541     555     577     582     583     593     602

IERR                            Stack                             INTEGER
  Decl     638
  Set 
  Used     669     686     700     720     740     741     751     760

IERR                            Stack                             INTEGER
  Decl     789
  Set 
  Used     820     836     849     869

IERR                            Stack                             INTEGER
  Decl     897
  Set 
  Used     928     929     934     950     974     975     984     987

IERR                            Stack                             INTEGER
  Decl    1006
  Set 
  Used    1038    1039    1044    1060    1084    1085    1094    1097

IERR                            Stack                             INTEGER
  Decl    1110
  Set 
  Used    1123    1139    1142    1143    1159    1166    1169    1170

IERR                            Stack                             INTEGER
  Decl    1181
  Set 
  Used    1194    1210    1213    1214    1230    1237    1240    1241

IERR                            Stack                             INTEGER
  Decl    1254
  Set 
  Used    1267    1276    1281    1282

IERR                            Stack                             INTEGER
  Decl    1312
  Set 
  Used    1338    1377    1383    1421

IERR                            Stack                             INTEGER
  Decl    1452
  Set 
  Used    1477    1524    1530    1557

IERR                            Stack                             INTEGER
  Decl    1569
  Set 
  Used    1581    1597    1600    1601    1617    1630    1639    1640

IERR                            Stack                             INTEGER
  Decl    1679
  Set 
  Used    1694    1720    1724    1759

IERR                            Stack                             INTEGER
  Decl    1781
  Set 
  Used    1797    1820    1824    1856

II                              Stack                             INTEGER
  Decl     157
  Set      175     182     185     190
  Used     176     177     178     179     189

IJ                              Stack                             INTEGER
  Decl     157
  Set      174     179     188
  Used     176     177     189     191

IJ                              Stack                             INTEGER
  Decl     211
  Set      232     239     246
  Used     235     247     250     251     252

IJ                              Stack                             INTEGER
  Decl     266
  Set      282     288
  Used     285

IJ                              Stack                             INTEGER
  Decl     303
  Set      321     329     334
  Used     324     326     335     338

ILRECBUF                        Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     128
  Set     1635
  Used    1621    1636    1681    1682    1693    1784    1785    1796

ILSENDBUF                       Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     129
  Set     1650
  Used    1623    1651    1686    1687    1719    1789    1790

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl     489     493
  Set 
  Used     508

IMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     329     339     340     368     369     442     453     471     472     579     590     608     609     647     648
           727     728     730     731     737     748     766     767     798     799     875     876

IMAXPERJ                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     187     725     727     730     874     875

INDEX                           Stack                             INTEGER
  Decl     160
  Set 
  Used     183

INDEX                           Stack                             INTEGER
  Decl     214
  Set 
  Used     245

INDEX                           Stack                             INTEGER
  Decl     309
  Set 
  Used     333

INDEX                           Stack                             INTEGER
  Decl     360
  Set 
  Used     418     465

INDEX                           Stack                             INTEGER
  Decl     501
  Set 
  Used     555     602

INDEX                           Stack                             INTEGER
  Decl     639
  Set 
  Used     700     760

INDEX                           Stack                             INTEGER
  Decl     790
  Set 
  Used     849

INDEX                           Stack                             INTEGER
  Decl     898
  Set 
  Used     950

INDEX                           Stack                             INTEGER
  Decl    1007
  Set 
  Used    1060

INDEX                           Stack                             INTEGER
  Decl    1671
  Set 
  Used    1724

INDEX                           Stack                             INTEGER
  Decl    1773
  Set 
  Used    1824

INI                             Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     163
  Set      173     176     191
  Used     189

INI                             Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     217
  Set      231     238
  Used     241     242     247     250

INI                             Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     308
  Set      324
  Used     335

INTERP_TYPE                     Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     625     630
  Set 
  Used     726     729

IOLD                            Stack                             INTEGER
  Decl     357
  Set      394     406
  Used     403

IOLD                            Stack                             INTEGER
  Decl     498
  Set      531     543
  Used     540

IOLD                            Stack                             INTEGER
  Decl     636
  Set      673     688
  Used     685

IOLD                            Stack                             INTEGER
  Decl     787
  Set      824     838
  Used     835

IOLD                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1657    1663
  Set 
  Used    1714    1753

IOLOWLEVEL                                                        Module
  Decl
  Set 
  Used      93

IP                              Stack                             INTEGER
  Decl     303
  Set      335     340
  Used     339

IPR                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1314
  Set     1346    1415
  Used    1395

IPR                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1454
  Set     1485    1555
  Used    1535

IPROC                           Stack                             INTEGER
  Decl    1310
  Set     1394
  Used    1395    1415

IPROC                           Stack                             INTEGER
  Decl    1450
  Set     1493
  Used    1495    1515

IPS                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1313
  Set     1345    1371
  Used    1351    1380

IPS                             Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1453
  Set     1484    1515
  Used    1495    1527

IREC                            Stack                             INTEGER
  Decl    1567
  Set     1625    1636
  Used    1627

ISBREC                          Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     126
  Set     1627
  Used    1620    1681    1682    1693    1732    1784    1785    1796    1833

ISBSEND                         Heap                              INTEGER, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     127
  Set     1645
  Used    1622    1686    1687    1698    1719    1789    1790    1801    1819

ISELF                           Stack                             INTEGER
  Decl    1310
  Set     1341
  Used    1380

ISELF                           Stack                             INTEGER
  Decl    1450
  Set     1480
  Used    1527

ISND                            Stack                             INTEGER
  Decl    1567
  Set     1643    1651
  Used    1645

J                               Stack                             INTEGER
  Decl     157
  Set      186
  Used     187     188

J                               Stack                             INTEGER
  Decl     303
  Set      338
  Used     339

J                               Stack                             INTEGER
  Decl     357
  Set      397     408     429     470     478
  Used     399     409     411     412     431     471     479

J                               Stack                             INTEGER
  Decl     498
  Set      534     545     566     607     615
  Used     536     546     548     549     568     608     616

J                               Stack                             INTEGER
  Decl     636
  Set      678     692     712     723     765
  Used     680     693     694     695     714     724     725     727     730     766

J                               Stack                             INTEGER
  Decl     787
  Set      828     841     861     872
  Used     830     842     843     844     863     873     874     875

J                               Stack                             INTEGER
  Decl     895
  Set      951
  Used     953     957     959

J                               Stack                             INTEGER
  Decl    1004
  Set     1061
  Used    1063    1067    1069

J                               Stack                             INTEGER
  Decl    1677
  Set     1700    1726    1739
  Used    1702    1703    1727    1728    1741    1742

J                               Stack                             INTEGER
  Decl    1779
  Set     1803    1827    1840
  Used    1805    1806    1828    1829    1842    1843

J1                              Stack                             INTEGER
  Decl     357
  Set      409     414     431     434     469     476     480
  Used     412     433     471

J1                              Stack                             INTEGER
  Decl     498
  Set      546     551     568     571     606     613     617
  Used     549     570     608

J1                              Stack                             INTEGER
  Decl     636
  Set      693     724     764     772
  Used     695     725     728     731     766

J1                              Stack                             INTEGER
  Decl     787
  Set      842     873
  Used     844     874     876

J2                              Stack                             INTEGER
  Decl     636
  Set      773
  Used

JBMAX                           Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     804     805

JBPERIJ                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     399     412     536     549     680     695     830     844    1702    1741    1805    1842

JBR                             Stack                             INTEGER
  Decl    1677
  Set     1702    1741
  Used    1704    1706    1708    1710    1712    1714    1743    1745    1747    1749    1751    1753

JBR                             Stack                             INTEGER
  Decl    1779
  Set     1805    1842
  Used    1807    1809    1811    1813    1815    1844    1846    1848    1850    1852

JC                              Stack                             INTEGER
  Decl     357
  Set      375     378
  Used     414     434

JC                              Stack                             INTEGER
  Decl     498
  Set      512     515
  Used     551     571

JC                              Stack                             INTEGER
  Decl     636
  Set      654     657
  Used     693     712     724

JMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     142     186     368     369     378     469     478     515     606     615     647     648     657     764     772
           773     798     799

JS                              Stack                             INTEGER
  Decl     357
  Set      374     377
  Used     375     409     429

JS                              Stack                             INTEGER
  Decl     498
  Set      511     514
  Used     512     546     566

JS                              Stack                             INTEGER
  Decl     636
  Set      653     656
  Used     654     693     712     724

K                               Stack                             INTEGER
  Decl     303
  Set      336
  Used     339

K                               Stack                             INTEGER
  Decl     357
  Set      382     395     410     417     451     464
  Used     384     387     388     389     390     396     404     405     412     452     453     455     456     462

K                               Stack                             INTEGER
  Decl     498
  Set      519     532     547     554     588     601
  Used     521     524     525     526     527     533     541     542     549     589     590     592     593     599

K                               Stack                             INTEGER
  Decl     636
  Set      661     674     690     699     722     746     759
  Used     663     666     667     668     669     677     686     687     693     724     726     729     747     748     750
           751     757

K                               Stack                             INTEGER
  Decl     787
  Set      812     825     840     848     871
  Used     814     817     818     819     820     827     836     837     844     874     876

K                               Stack                             INTEGER
  Decl    1108
  Set     1129    1135    1144    1148
  Used    1132    1133    1134    1150    1151    1154

K                               Stack                             INTEGER
  Decl    1179
  Set     1200    1206    1215    1219
  Used    1203    1204    1205    1221    1222    1225

K                               Stack                             INTEGER
  Decl    1310
  Set     1390    1417
  Used    1396    1398    1400    1402    1405    1407

K                               Stack                             INTEGER
  Decl    1450
  Set     1491    1516
  Used    1496    1498    1500    1502    1505    1507

K                               Stack                             INTEGER
  Decl    1567
  Set     1587    1593    1602    1606    1632    1647
  Used    1590    1591    1592    1608    1609    1612    1633    1648

K                               Stack                             INTEGER
  Decl    1677
  Set     1692    1697    1723
  Used    1693    1694    1698    1699    1719    1720    1721

K                               Stack                             INTEGER
  Decl    1779
  Set     1795    1800    1823
  Used    1796    1797    1801    1802    1819    1820    1821

KDIM                            Stack                             INTEGER
  Decl     895
  Set      921
  Used     922     923     933     959

KDIM                            Stack                             INTEGER
  Decl    1004
  Set     1030
  Used    1031    1032    1043    1069

KFIRST_FOUR                     Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     980    1090

KL                              Stack                             INTEGER
  Decl     895
  Set      938     980
  Used     943     959     973     983

KL                              Stack                             INTEGER
  Decl    1004
  Set     1048    1090
  Used    1053    1069    1083    1093

KM                              Stack                             INTEGER
  Decl    1309
  Set     1392
  Used    1393    1396    1397    1398    1399    1400    1401    1402    1403    1405    1406    1407    1408    1417

KM                              Stack                             INTEGER
  Decl    1449
  Set     1494
  Used    1496    1497    1498    1499    1500    1501    1502    1503    1505    1506    1507    1508    1516

KMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     142     915    1024    1635    1650    1704    1705    1706    1707    1708    1709    1710    1711    1714    1715
          1743    1744    1745    1746    1747    1748    1749    1750    1753    1754    1807    1808    1809    1810    1811
          1812    1844    1845    1846    1847    1848    1849

KMG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1286    1298
  Set 
  Used    1302    1303    1306

KMG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1425    1437
  Set 
  Used    1442    1443    1446

KML                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1286    1297
  Set 
  Used    1300    1301    1304    1352    1353    1354    1355    1356    1357    1358    1359    1361    1362    1363    1364

KML                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1425    1436
  Set 
  Used    1440    1441    1444    1536    1537    1538    1539    1540    1541    1542    1543    1545    1546    1547    1548

KP                              Stack                             INTEGER
  Decl     895
  Set      979
  Used     980     982     984

KP                              Stack                             INTEGER
  Decl    1004
  Set     1089
  Used    1090    1092    1094

KR                              Stack                             INTEGER
  Decl    1678
  Set     1725
  Used    1727

KR                              Stack                             INTEGER
  Decl    1780
  Set     1825
  Used    1828

KS                              Stack                             INTEGER
  Decl     357
  Set      419     432     466
  Used     421     433     467     470

KS                              Stack                             INTEGER
  Decl     498
  Set      556     569     603
  Used     558     570     604     607

KS                              Stack                             INTEGER
  Decl     636
  Set      701     710     761
  Used     703     712     762     765

KS                              Stack                             INTEGER
  Decl     787
  Set      850     859
  Used     852     863

KS                              Stack                             INTEGER
  Decl    1678
  Set     1728
  Used    1732    1733    1736    1738

KS                              Stack                             INTEGER
  Decl    1780
  Set     1829
  Used    1833    1834    1837    1839

L                               Stack                             INTEGER
  Decl     357
  Set      396     420     428     468     477
  Used     397     398     421     422     429     430     469     479

L                               Stack                             INTEGER
  Decl     498
  Set      533     557     565     605     614
  Used     534     535     558     559     566     567     606     616

L                               Stack                             INTEGER
  Decl     636
  Set      677     702     711     763     771
  Used     678     679     703     704     712     713     764     772     773

L                               Stack                             INTEGER
  Decl     787
  Set      827     851     860
  Used     828     829     852     853     861     862

L                               Stack                             INTEGER
  Decl     895
  Set      942     958
  Used     943     959

L                               Stack                             INTEGER
  Decl    1004
  Set     1052    1068
  Used    1053    1069

L                               Stack                             INTEGER
  Decl    1309
  Set     1391
  Used    1392    1394

L                               Stack                             INTEGER
  Decl    1449
  Set     1492
  Used    1493    1494

LEV                             Stack                             INTEGER
  Decl     895
  Set      952
  Used     953     959

LEV                             Stack                             INTEGER
  Decl    1004
  Set     1062
  Used    1063    1069

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     299
  Set 
  Used     300     301     329     336

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     350     353
  Set 
  Used     354     355     368     369     388     399     400     410     432     436     442     453     468     477

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     489     492
  Set 
  Used     493     494     496     525     536     537     547     569     573     579     590     605     614

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     885     889
  Set 
  Used     891     921     943     952

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     995     998
  Set 
  Used    1000    1030    1053    1062

LEVSG                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     885     890
  Set 
  Used     892     915     916

LEVSG                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     995     999
  Set 
  Used    1001    1024    1025

LL                              Stack                             INTEGER
  Decl     895
  Set      981
  Used

LL                              Stack                             INTEGER
  Decl    1004
  Set     1091
  Used

LPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1657    1670
  Set     1751
  Used    1712

M                               Stack                             INTEGER
  Decl     357
  Set      381     387     392     405     424
  Used

M                               Stack                             INTEGER
  Decl     498
  Set      518     524     529     542     561
  Used

M                               Stack                             INTEGER
  Decl     636
  Set      660     666     671     687     706
  Used

M                               Stack                             INTEGER
  Decl     787
  Set      811     817     822     837     855
  Used

M                               Stack                             INTEGER
  Decl     895
  Set      939     955
  Used     940     941     956     957

M                               Stack                             INTEGER
  Decl    1004
  Set     1049    1065
  Used    1050    1051    1066    1067

M                               Stack                             INTEGER
  Decl    1108
  Set     1128    1134    1145    1149    1155    1160    1162    1167
  Used    1133    1150    1157    1158    1164    1165

M                               Stack                             INTEGER
  Decl    1179
  Set     1199    1205    1216    1220    1226    1231    1233    1238
  Used    1204    1221    1228    1229    1235    1236

M                               Stack                             INTEGER
  Decl    1309
  Set     1389
  Used    1394

M                               Stack                             INTEGER
  Decl    1449
  Set     1490
  Used    1493

M                               Stack                             INTEGER
  Decl    1567
  Set     1586    1592    1603    1607    1613    1618    1624    1637    1642    1652
  Used    1591    1608    1615    1616    1628    1629

M                               Stack                             INTEGER
  Decl    1678
  Set     1696    1721    1734    1736
  Used

M                               Stack                             INTEGER
  Decl    1780
  Set     1799    1821    1835    1837
  Used

MAPGLOBAL                       Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     200     206
  Set 
  Used     243     250

MAPR                            Dummy Arg                         INTEGER, DIMENSION(0:<exp>), INTENT(IN)
  Decl    1286    1296
  Set 
  Used    1394

MAPR                            Dummy Arg                         INTEGER, DIMENSION(0:<exp>), INTENT(IN)
  Decl    1425    1435
  Set 
  Used    1533

MAPS                            Dummy Arg                         INTEGER, DIMENSION(0:<exp>), INTENT(IN)
  Decl    1286    1295
  Set 
  Used    1349

MAPS                            Dummy Arg                         INTEGER, DIMENSION(0:<exp>), INTENT(IN)
  Decl    1425    1434
  Set 
  Used    1493

MAP_FOUR                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1394    1493

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     545     841    1320    1459

MAXNODES                        Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     142     175     182     233     244     245     283     290     323     333     451     465     588     602     746
           760    1120    1130    1142    1143    1146    1191    1201    1213    1214    1217    1264    1274    1281    1282
          1578    1588    1600    1601    1604

MAXNODES_FOUR                   Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     922     923     932     949     950    1031    1032    1042    1059    1060

MESSAGES_F                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1165

MESSAGES_G                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1158

MESSPROC_F                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1132    1133    1134    1164    1165    1167

MESSPROC_G                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set     1119    1125    1150    1151
  Used    1122    1147    1149    1157    1158    1160

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     408     692     841

MMAP                            Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1389    1490

MMAX                            Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     142     939     940     955     956    1049    1050    1065    1066

MN                              Stack                             INTEGER
  Decl     895
  Set      937     947     954     963
  Used     943     959

MN                              Stack                             INTEGER
  Decl    1004
  Set     1047    1057    1064    1073
  Used    1053    1069

MN                              Stack                             INTEGER
  Decl    1309
  Set     1348    1386
  Used    1349    1350    1387    1388

MN                              Stack                             INTEGER
  Decl    1449
  Set     1487    1532
  Used    1488    1489    1533    1534

MNEXTMAXLOCAL                   Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1030

MNG                             Stack                             INTEGER
  Decl    1310
  Set     1388
  Used    1389

MNG                             Stack                             INTEGER
  Decl    1450
  Set     1489
  Used    1490

MNLOC                           Stack                             INTEGER
  Decl     895
  Set      936     945     953     961
  Used     943     959

MNLOC                           Stack                             INTEGER
  Decl    1004
  Set     1046    1055    1063    1071
  Used    1053    1069

MNMAXLOCAL                      Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     921

MNMAX_SI                        Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1386    1487

MNR                             Stack                             INTEGER
  Decl    1309
  Set     1350    1387
  Used    1352    1354    1356    1358    1361    1363    1367    1368    1396    1398    1400    1402    1405    1407    1411
          1412

MNR                             Stack                             INTEGER
  Decl    1449
  Set     1488    1534
  Used    1496    1498    1500    1502    1505    1507    1511    1512    1536    1538    1540    1542    1545    1547    1551
          1552

MNSENDSMAP_SI                   Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1349    1533

MNSEXTPERPROC                   Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1063

MNSPERPROC                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     953

MPIPRIV1                                                          Common block 
  Decl     494     497
  Set 
  Used

MPIPRIV2                                                          Common block 
  Decl     496     497
  Set 
  Used

MPIPRIVC                                                          Common block 
  Decl     499     500
  Set 
  Used

MPI_2COMPLEX                                                      INTEGER, PARAMETER, PRIVATE
  Decl     264     265
  Set 
  Used

MPI_2DOUBLE_COMPLEX                                               INTEGER, PARAMETER, PRIVATE
  Decl     270     271
  Set 
  Used

MPI_2DOUBLE_PRECISION                                             INTEGER, PARAMETER, PRIVATE
  Decl     266     267
  Set 
  Used

MPI_2INT                                                          INTEGER, PARAMETER, PRIVATE
  Decl     347     348
  Set 
  Used

MPI_2INTEGER                                                      INTEGER, PARAMETER, PRIVATE
  Decl     262     263
  Set 
  Used

MPI_2REAL                                                         INTEGER, PARAMETER, PRIVATE
  Decl     268     269
  Set 
  Used

MPI_ADDRESS_KIND                                                  INTEGER, PARAMETER, PRIVATE
  Decl     304     305
  Set 
  Used

MPI_AINT                                                          INTEGER, PARAMETER, PRIVATE
  Decl     377     378
  Set 
  Used

MPI_ANY_SOURCE                                                    INTEGER, PARAMETER, PRIVATE
  Decl     232     233
  Set 
  Used

MPI_ANY_TAG                                                       INTEGER, PARAMETER, PRIVATE
  Decl     234     235
  Set 
  Used

MPI_APPNUM                                                        INTEGER, PARAMETER, PRIVATE
  Decl     202     203
  Set 
  Used

MPI_ARGVS_NULL                  /MPIPRIVC/ offset=0               CHARACTER(1), DIMENSION(1, 1), PRIVATE
  Decl      16     499
  Set 
  Used

MPI_ARGV_NULL                   /MPIPRIVC/ offset=8               CHARACTER(1), DIMENSION(1), PRIVATE
  Decl      17     499
  Set 
  Used

MPI_BAND                                                          INTEGER, PARAMETER, PRIVATE
  Decl     150     151
  Set 
  Used

MPI_BOR                                                           INTEGER, PARAMETER, PRIVATE
  Decl     154     155
  Set 
  Used

MPI_BOTTOM                      /MPIPRIV1/ offset=0               INTEGER, PRIVATE
  Decl     479     494
  Set 
  Used

MPI_BSEND_OVERHEAD                                                INTEGER, PARAMETER, PRIVATE
  Decl     228     229
  Set 
  Used

MPI_BXOR                                                          INTEGER, PARAMETER, PRIVATE
  Decl     158     159
  Set 
  Used

MPI_BYTE                                                          INTEGER, PARAMETER, PRIVATE
  Decl     274     275
  Set 
  Used

MPI_CART                                                          INTEGER, PARAMETER, PRIVATE
  Decl     240     241
  Set 
  Used

MPI_CHAR                                                          INTEGER, PARAMETER, PRIVATE
  Decl     307     308
  Set 
  Used

MPI_CHARACTER                                                     INTEGER, PARAMETER, PRIVATE
  Decl     272     273
  Set 
  Used

MPI_COMBINER_CONTIGUOUS                                           INTEGER, PARAMETER, PRIVATE
  Decl     385     386
  Set 
  Used

MPI_COMBINER_DARRAY                                               INTEGER, PARAMETER, PRIVATE
  Decl     407     408
  Set 
  Used

MPI_COMBINER_DUP                                                  INTEGER, PARAMETER, PRIVATE
  Decl     383     384
  Set 
  Used

MPI_COMBINER_F90_COMPLEX                                          INTEGER, PARAMETER, PRIVATE
  Decl     411     412
  Set 
  Used

MPI_COMBINER_F90_INTEGER                                          INTEGER, PARAMETER, PRIVATE
  Decl     413     414
  Set 
  Used

MPI_COMBINER_F90_REAL                                             INTEGER, PARAMETER, PRIVATE
  Decl     409     410
  Set 
  Used

MPI_COMBINER_HINDEXED                                             INTEGER, PARAMETER, PRIVATE
  Decl     397     398
  Set 
  Used

MPI_COMBINER_HINDEXED_INTEGER                                     INTEGER, PARAMETER, PRIVATE
  Decl     395     396
  Set 
  Used

MPI_COMBINER_HVECTOR                                              INTEGER, PARAMETER, PRIVATE
  Decl     391     392
  Set 
  Used

MPI_COMBINER_HVECTOR_INTEGER                                      INTEGER, PARAMETER, PRIVATE
  Decl     389     390
  Set 
  Used

MPI_COMBINER_INDEXED                                              INTEGER, PARAMETER, PRIVATE
  Decl     393     394
  Set 
  Used

MPI_COMBINER_INDEXED_BLOCK                                        INTEGER, PARAMETER, PRIVATE
  Decl     399     400
  Set 
  Used

MPI_COMBINER_NAMED                                                INTEGER, PARAMETER, PRIVATE
  Decl     381     382
  Set 
  Used

MPI_COMBINER_RESIZED                                              INTEGER, PARAMETER, PRIVATE
  Decl     415     416
  Set 
  Used

MPI_COMBINER_STRUCT                                               INTEGER, PARAMETER, PRIVATE
  Decl     403     404
  Set 
  Used

MPI_COMBINER_STRUCT_INTEGER                                       INTEGER, PARAMETER, PRIVATE
  Decl     401     402
  Set 
  Used

MPI_COMBINER_SUBARRAY                                             INTEGER, PARAMETER, PRIVATE
  Decl     405     406
  Set 
  Used

MPI_COMBINER_VECTOR                                               INTEGER, PARAMETER, PRIVATE
  Decl     387     388
  Set 
  Used

MPI_COMM_DUP_FN                                                   Procedure
  Decl     483
  Set 
  Used

MPI_COMM_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     172     173
  Set 
  Used

MPI_COMM_NULL_COPY_FN                                             Procedure
  Decl     484
  Set 
  Used

MPI_COMM_NULL_DELETE_FN                                           Procedure
  Decl     483
  Set 
  Used

MPI_COMM_SELF                                                     INTEGER, PARAMETER, PRIVATE
  Decl     168     169
  Set 
  Used

MPI_COMM_WORLD                                                    INTEGER, PARAMETER, PRIVATE
  Decl     166     167
  Set 
  Used     166     225     273     312     367     509     646     797     971    1081    1116    1187    1260    1332    1471
          1575    1691    1783

MPI_COMPLEX                                                       INTEGER, PARAMETER, PRIVATE
  Decl     250     251
  Set 
  Used

MPI_COMPLEX16                                                     INTEGER, PARAMETER, PRIVATE
  Decl     300     301
  Set 
  Used

MPI_COMPLEX32                                                     INTEGER, PARAMETER, PRIVATE
  Decl     302     303
  Set 
  Used

MPI_COMPLEX8                                                      INTEGER, PARAMETER, PRIVATE
  Decl     298     299
  Set 
  Used

MPI_CONGRUENT                                                     INTEGER, PARAMETER, PRIVATE
  Decl     134     135
  Set 
  Used

MPI_CONVERSION_FN_NULL                                            Procedure
  Decl     489
  Set 
  Used

MPI_C_BOOL                                                        INTEGER, PARAMETER, PRIVATE
  Decl     367     368
  Set 
  Used

MPI_C_COMPLEX                                                     INTEGER, PARAMETER, PRIVATE
  Decl     371     372
  Set 
  Used

MPI_C_DOUBLE_COMPLEX                                              INTEGER, PARAMETER, PRIVATE
  Decl     373     374
  Set 
  Used

MPI_C_FLOAT_COMPLEX                                               INTEGER, PARAMETER, PRIVATE
  Decl     369     370
  Set 
  Used

MPI_C_LONG_DOUBLE_COMPLEX                                         INTEGER, PARAMETER, PRIVATE
  Decl     375     376
  Set 
  Used

MPI_DATATYPE_NULL                                                 INTEGER, PARAMETER, PRIVATE
  Decl     182     183
  Set 
  Used     291     297     303     332     350

MPI_DISPLACEMENT_CURRENT                                          INTEGER*8, PARAMETER, PRIVATE
  Decl     477     478
  Set 
  Used

MPI_DISTRIBUTE_BLOCK                                              INTEGER, PARAMETER, PRIVATE
  Decl     469     470
  Set 
  Used

MPI_DISTRIBUTE_CYCLIC                                             INTEGER, PARAMETER, PRIVATE
  Decl     471     472
  Set 
  Used

MPI_DISTRIBUTE_DFLT_DARG                                          INTEGER, PARAMETER, PRIVATE
  Decl     475     476
  Set 
  Used

MPI_DISTRIBUTE_NONE                                               INTEGER, PARAMETER, PRIVATE
  Decl     473     474
  Set 
  Used

MPI_DOUBLE                                                        INTEGER, PARAMETER, PRIVATE
  Decl     329     330
  Set 
  Used

MPI_DOUBLE_COMPLEX                                                INTEGER, PARAMETER, PRIVATE
  Decl     252     253
  Set 
  Used

MPI_DOUBLE_INT                                                    INTEGER, PARAMETER, PRIVATE
  Decl     341     342
  Set 
  Used

MPI_DOUBLE_PRECISION                                              INTEGER, PARAMETER, PRIVATE
  Decl     258     259
  Set 
  Used     168     177     227     235     276     285     315     327     389     403     444     455     668     685     739
           750     819     835     928     934     973     984    1037    1044    1083    1094    1337    1376    1476    1523
          1693    1719    1796    1819

MPI_DUP_FN                                                        Procedure
  Decl     480
  Set 
  Used

MPI_ERRCODES_IGNORE             /MPIPRIV2/ offset=160             INTEGER, DIMENSION(1), PRIVATE
  Decl      15     496
  Set 
  Used

MPI_ERRHANDLER_NULL                                               INTEGER, PARAMETER, PRIVATE
  Decl     186     187
  Set 
  Used

MPI_ERROR                                                         INTEGER, PARAMETER, PRIVATE
  Decl       9      10
  Set 
  Used

MPI_ERRORS_ARE_FATAL                                              INTEGER, PARAMETER, PRIVATE
  Decl     128     129
  Set 
  Used

MPI_ERRORS_RETURN                                                 INTEGER, PARAMETER, PRIVATE
  Decl     130     131
  Set 
  Used

MPI_ERR_ACCESS                                                    INTEGER, PARAMETER, PRIVATE
  Decl     122     123
  Set 
  Used

MPI_ERR_AMODE                                                     INTEGER, PARAMETER, PRIVATE
  Decl     106     107
  Set 
  Used

MPI_ERR_ARG                                                       INTEGER, PARAMETER, PRIVATE
  Decl      42      43
  Set 
  Used

MPI_ERR_ASSERT                                                    INTEGER, PARAMETER, PRIVATE
  Decl      64      65
  Set 
  Used

MPI_ERR_BAD_FILE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      96      97
  Set 
  Used

MPI_ERR_BASE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      30      31
  Set 
  Used

MPI_ERR_BUFFER                                                    INTEGER, PARAMETER, PRIVATE
  Decl      48      49
  Set 
  Used

MPI_ERR_COMM                                                      INTEGER, PARAMETER, PRIVATE
  Decl      70      71
  Set 
  Used

MPI_ERR_CONVERSION                                                INTEGER, PARAMETER, PRIVATE
  Decl     126     127
  Set 
  Used

MPI_ERR_COUNT                                                     INTEGER, PARAMETER, PRIVATE
  Decl      26      27
  Set 
  Used

MPI_ERR_DIMS                                                      INTEGER, PARAMETER, PRIVATE
  Decl     112     113
  Set 
  Used

MPI_ERR_DISP                                                      INTEGER, PARAMETER, PRIVATE
  Decl      58      59
  Set 
  Used

MPI_ERR_DUP_DATAREP                                               INTEGER, PARAMETER, PRIVATE
  Decl      50      51
  Set 
  Used

MPI_ERR_FILE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      24      25
  Set 
  Used

MPI_ERR_FILE_EXISTS                                               INTEGER, PARAMETER, PRIVATE
  Decl      66      67
  Set 
  Used

MPI_ERR_FILE_IN_USE                                               INTEGER, PARAMETER, PRIVATE
  Decl      98      99
  Set 
  Used

MPI_ERR_GROUP                                                     INTEGER, PARAMETER, PRIVATE
  Decl      78      79
  Set 
  Used

MPI_ERR_INFO                                                      INTEGER, PARAMETER, PRIVATE
  Decl      92      93
  Set 
  Used

MPI_ERR_INFO_KEY                                                  INTEGER, PARAMETER, PRIVATE
  Decl      36      37
  Set 
  Used

MPI_ERR_INFO_NOKEY                                                INTEGER, PARAMETER, PRIVATE
  Decl      62      63
  Set 
  Used

MPI_ERR_INFO_VALUE                                                INTEGER, PARAMETER, PRIVATE
  Decl      86      87
  Set 
  Used

MPI_ERR_INTERN                                                    INTEGER, PARAMETER, PRIVATE
  Decl     118     119
  Set 
  Used

MPI_ERR_IN_STATUS                                                 INTEGER, PARAMETER, PRIVATE
  Decl      34      35
  Set 
  Used

MPI_ERR_IO                                                        INTEGER, PARAMETER, PRIVATE
  Decl     120     121
  Set 
  Used

MPI_ERR_KEYVAL                                                    INTEGER, PARAMETER, PRIVATE
  Decl      72      73
  Set 
  Used

MPI_ERR_LASTCODE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      54      55
  Set 
  Used

MPI_ERR_LOCKTYPE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      38      39
  Set 
  Used

MPI_ERR_NAME                                                      INTEGER, PARAMETER, PRIVATE
  Decl      74      75
  Set 
  Used

MPI_ERR_NOT_SAME                                                  INTEGER, PARAMETER, PRIVATE
  Decl      88      89
  Set 
  Used

MPI_ERR_NO_MEM                                                    INTEGER, PARAMETER, PRIVATE
  Decl      94      95
  Set 
  Used

MPI_ERR_NO_SPACE                                                  INTEGER, PARAMETER, PRIVATE
  Decl     124     125
  Set 
  Used

MPI_ERR_NO_SUCH_FILE                                              INTEGER, PARAMETER, PRIVATE
  Decl     114     115
  Set 
  Used

MPI_ERR_OP                                                        INTEGER, PARAMETER, PRIVATE
  Decl      40      41
  Set 
  Used

MPI_ERR_OTHER                                                     INTEGER, PARAMETER, PRIVATE
  Decl      20      21
  Set 
  Used

MPI_ERR_PENDING                                                   INTEGER, PARAMETER, PRIVATE
  Decl      68      69
  Set 
  Used

MPI_ERR_PORT                                                      INTEGER, PARAMETER, PRIVATE
  Decl      60      61
  Set 
  Used

MPI_ERR_QUOTA                                                     INTEGER, PARAMETER, PRIVATE
  Decl     104     105
  Set 
  Used

MPI_ERR_RANK                                                      INTEGER, PARAMETER, PRIVATE
  Decl     110     111
  Set 
  Used

MPI_ERR_READ_ONLY                                                 INTEGER, PARAMETER, PRIVATE
  Decl      44      45
  Set 
  Used

MPI_ERR_REQUEST                                                   INTEGER, PARAMETER, PRIVATE
  Decl      76      77
  Set 
  Used

MPI_ERR_RMA_CONFLICT                                              INTEGER, PARAMETER, PRIVATE
  Decl      32      33
  Set 
  Used

MPI_ERR_RMA_SYNC                                                  INTEGER, PARAMETER, PRIVATE
  Decl      90      91
  Set 
  Used

MPI_ERR_ROOT                                                      INTEGER, PARAMETER, PRIVATE
  Decl     108     109
  Set 
  Used

MPI_ERR_SERVICE                                                   INTEGER, PARAMETER, PRIVATE
  Decl     116     117
  Set 
  Used

MPI_ERR_SIZE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      46      47
  Set 
  Used

MPI_ERR_SPAWN                                                     INTEGER, PARAMETER, PRIVATE
  Decl      28      29
  Set 
  Used

MPI_ERR_TAG                                                       INTEGER, PARAMETER, PRIVATE
  Decl      84      85
  Set 
  Used

MPI_ERR_TOPOLOGY                                                  INTEGER, PARAMETER, PRIVATE
  Decl      80      81
  Set 
  Used

MPI_ERR_TRUNCATE                                                  INTEGER, PARAMETER, PRIVATE
  Decl      56      57
  Set 
  Used

MPI_ERR_TYPE                                                      INTEGER, PARAMETER, PRIVATE
  Decl      82      83
  Set 
  Used

MPI_ERR_UNKNOWN                                                   INTEGER, PARAMETER, PRIVATE
  Decl     100     101
  Set 
  Used

MPI_ERR_UNSUPPORTED_DATAREP                                       INTEGER, PARAMETER, PRIVATE
  Decl      52      53
  Set 
  Used

MPI_ERR_UNSUPPORTED_OPERATION                                     INTEGER, PARAMETER, PRIVATE
  Decl     102     103
  Set 
  Used

MPI_ERR_WIN                                                       INTEGER, PARAMETER, PRIVATE
  Decl      22      23
  Set 
  Used

MPI_FILE_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     176     177
  Set 
  Used

MPI_FLOAT                                                         INTEGER, PARAMETER, PRIVATE
  Decl     327     328
  Set 
  Used

MPI_FLOAT_INT                                                     INTEGER, PARAMETER, PRIVATE
  Decl     339     340
  Set 
  Used

MPI_GRAPH                                                         INTEGER, PARAMETER, PRIVATE
  Decl     238     239
  Set 
  Used

MPI_GROUP_EMPTY                                                   INTEGER, PARAMETER, PRIVATE
  Decl     170     171
  Set 
  Used

MPI_GROUP_NULL                                                    INTEGER, PARAMETER, PRIVATE
  Decl     178     179
  Set 
  Used

MPI_HOST                                                          INTEGER, PARAMETER, PRIVATE
  Decl     192     193
  Set 
  Used

MPI_IDENT                                                         INTEGER, PARAMETER, PRIVATE
  Decl     132     133
  Set 
  Used

MPI_INFO_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     188     189
  Set 
  Used

MPI_INT                                                           INTEGER, PARAMETER, PRIVATE
  Decl     319     320
  Set 
  Used

MPI_INT16_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     353     354
  Set 
  Used

MPI_INT32_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     355     356
  Set 
  Used

MPI_INT64_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     357     358
  Set 
  Used

MPI_INT8_T                                                        INTEGER, PARAMETER, PRIVATE
  Decl     351     352
  Set 
  Used

MPI_INTEGER                                                       INTEGER, PARAMETER, PRIVATE
  Decl     260     261
  Set 
  Used     526     540     581     592    1122    1139    1158    1165    1193    1210    1229    1236    1266    1276    1580
          1597    1616    1629

MPI_INTEGER1                                                      INTEGER, PARAMETER, PRIVATE
  Decl     282     283
  Set 
  Used

MPI_INTEGER16                                                     INTEGER, PARAMETER, PRIVATE
  Decl     290     291
  Set 
  Used

MPI_INTEGER2                                                      INTEGER, PARAMETER, PRIVATE
  Decl     284     285
  Set 
  Used

MPI_INTEGER4                                                      INTEGER, PARAMETER, PRIVATE
  Decl     286     287
  Set 
  Used

MPI_INTEGER8                                                      INTEGER, PARAMETER, PRIVATE
  Decl     288     289
  Set 
  Used

MPI_IN_PLACE                    /MPIPRIV1/ offset=32              INTEGER, PRIVATE
  Decl     479     494
  Set 
  Used

MPI_IO                                                            INTEGER, PARAMETER, PRIVATE
  Decl     194     195
  Set 
  Used

MPI_IRECV                                                         Subroutine, EXTERNAL
  Decl
  Set 
  Used       0       0       0       0       0       0       0     592     819     983    1093    1158    1616     750     177
          1337     389     455     326    1266    1796    1193    1229     235     285    1476

MPI_ISEND                                                         Subroutine, EXTERNAL
  Decl
  Set 
  Used       0       0       0       0       0       0       0     276     444     739     928    1376    1719    1276    1597
          1629     315    1210    1236     540     581     227    1139    1165    1037    1083

MPI_KEYVAL_INVALID                                                INTEGER, PARAMETER, PRIVATE
  Decl     226     227
  Set 
  Used

MPI_LAND                                                          INTEGER, PARAMETER, PRIVATE
  Decl     148     149
  Set 
  Used

MPI_LASTUSEDCODE                                                  INTEGER, PARAMETER, PRIVATE
  Decl     200     201
  Set 
  Used

MPI_LB                                                            INTEGER, PARAMETER, PRIVATE
  Decl     278     279
  Set 
  Used

MPI_LOCK_EXCLUSIVE                                                INTEGER, PARAMETER, PRIVATE
  Decl     246     247
  Set 
  Used

MPI_LOCK_SHARED                                                   INTEGER, PARAMETER, PRIVATE
  Decl     248     249
  Set 
  Used

MPI_LOGICAL                                                       INTEGER, PARAMETER, PRIVATE
  Decl     254     255
  Set 
  Used

MPI_LONG                                                          INTEGER, PARAMETER, PRIVATE
  Decl     323     324
  Set 
  Used

MPI_LONG_DOUBLE                                                   INTEGER, PARAMETER, PRIVATE
  Decl     331     332
  Set 
  Used

MPI_LONG_DOUBLE_INT                                               INTEGER, PARAMETER, PRIVATE
  Decl     349     350
  Set 
  Used

MPI_LONG_INT                                                      INTEGER, PARAMETER, PRIVATE
  Decl     343     344
  Set 
  Used

MPI_LONG_LONG                                                     INTEGER, PARAMETER, PRIVATE
  Decl     337     338
  Set 
  Used

MPI_LONG_LONG_INT                                                 INTEGER, PARAMETER, PRIVATE
  Decl     333     334
  Set 
  Used

MPI_LOR                                                           INTEGER, PARAMETER, PRIVATE
  Decl     152     153
  Set 
  Used

MPI_LXOR                                                          INTEGER, PARAMETER, PRIVATE
  Decl     156     157
  Set 
  Used

MPI_MAX                                                           INTEGER, PARAMETER, PRIVATE
  Decl     140     141
  Set 
  Used

MPI_MAXLOC                                                        INTEGER, PARAMETER, PRIVATE
  Decl     162     163
  Set 
  Used

MPI_MAX_DATAREP_STRING                                            INTEGER, PARAMETER, PRIVATE
  Decl     222     223
  Set 
  Used

MPI_MAX_ERROR_STRING                                              INTEGER, PARAMETER, PRIVATE
  Decl     210     211
  Set 
  Used

MPI_MAX_INFO_KEY                                                  INTEGER, PARAMETER, PRIVATE
  Decl     216     217
  Set 
  Used

MPI_MAX_INFO_VAL                                                  INTEGER, PARAMETER, PRIVATE
  Decl     218     219
  Set 
  Used

MPI_MAX_OBJECT_NAME                                               INTEGER, PARAMETER, PRIVATE
  Decl     214     215
  Set 
  Used

MPI_MAX_PORT_NAME                                                 INTEGER, PARAMETER, PRIVATE
  Decl     212     213
  Set 
  Used

MPI_MAX_PROCESSOR_NAME                                            INTEGER, PARAMETER, PRIVATE
  Decl     220     221
  Set 
  Used

MPI_MIN                                                           INTEGER, PARAMETER, PRIVATE
  Decl     142     143
  Set 
  Used

MPI_MINLOC                                                        INTEGER, PARAMETER, PRIVATE
  Decl     160     161
  Set 
  Used

MPI_MODE_APPEND                                                   INTEGER, PARAMETER, PRIVATE
  Decl     455     456
  Set 
  Used

MPI_MODE_CREATE                                                   INTEGER, PARAMETER, PRIVATE
  Decl     451     452
  Set 
  Used

MPI_MODE_DELETE_ON_CLOSE                                          INTEGER, PARAMETER, PRIVATE
  Decl     447     448
  Set 
  Used

MPI_MODE_EXCL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     453     454
  Set 
  Used

MPI_MODE_NOCHECK                                                  INTEGER, PARAMETER, PRIVATE
  Decl     423     424
  Set 
  Used

MPI_MODE_NOPRECEDE                                                INTEGER, PARAMETER, PRIVATE
  Decl     429     430
  Set 
  Used

MPI_MODE_NOPUT                                                    INTEGER, PARAMETER, PRIVATE
  Decl     427     428
  Set 
  Used

MPI_MODE_NOSTORE                                                  INTEGER, PARAMETER, PRIVATE
  Decl     425     426
  Set 
  Used

MPI_MODE_NOSUCCEED                                                INTEGER, PARAMETER, PRIVATE
  Decl     431     432
  Set 
  Used

MPI_MODE_RDONLY                                                   INTEGER, PARAMETER, PRIVATE
  Decl     441     442
  Set 
  Used

MPI_MODE_RDWR                                                     INTEGER, PARAMETER, PRIVATE
  Decl     443     444
  Set 
  Used

MPI_MODE_SEQUENTIAL                                               INTEGER, PARAMETER, PRIVATE
  Decl     457     458
  Set 
  Used

MPI_MODE_UNIQUE_OPEN                                              INTEGER, PARAMETER, PRIVATE
  Decl     449     450
  Set 
  Used

MPI_MODE_WRONLY                                                   INTEGER, PARAMETER, PRIVATE
  Decl     445     446
  Set 
  Used

MPI_NULL_COPY_FN                                                  Procedure
  Decl     480
  Set 
  Used

MPI_NULL_DELETE_FN                                                Procedure
  Decl     480
  Set 
  Used

MPI_OFFSET                                                        INTEGER, PARAMETER, PRIVATE
  Decl     379     380
  Set 
  Used

MPI_OFFSET_KIND                                                   INTEGER, PARAMETER, PRIVATE
  Decl     304     306
  Set 
  Used

MPI_OP_NULL                                                       INTEGER, PARAMETER, PRIVATE
  Decl     180     181
  Set 
  Used

MPI_ORDER_C                                                       INTEGER, PARAMETER, PRIVATE
  Decl     465     466
  Set 
  Used

MPI_ORDER_FORTRAN                                                 INTEGER, PARAMETER, PRIVATE
  Decl     467     468
  Set 
  Used

MPI_PACKED                                                        INTEGER, PARAMETER, PRIVATE
  Decl     280     281
  Set 
  Used

MPI_PROC_NULL                                                     INTEGER, PARAMETER, PRIVATE
  Decl     230     231
  Set 
  Used

MPI_PROD                                                          INTEGER, PARAMETER, PRIVATE
  Decl     146     147
  Set 
  Used

MPI_REAL                                                          INTEGER, PARAMETER, PRIVATE
  Decl     256     257
  Set 
  Used

MPI_REAL16                                                        INTEGER, PARAMETER, PRIVATE
  Decl     296     297
  Set 
  Used

MPI_REAL4                                                         INTEGER, PARAMETER, PRIVATE
  Decl     292     293
  Set 
  Used

MPI_REAL8                                                         INTEGER, PARAMETER, PRIVATE
  Decl     294     295
  Set 
  Used

MPI_REPLACE                                                       INTEGER, PARAMETER, PRIVATE
  Decl     164     165
  Set 
  Used

MPI_REQUEST_NULL                                                  INTEGER, PARAMETER, PRIVATE
  Decl     184     185
  Set 
  Used     172     230     280     319     449     586     744     931     977    1041    1087    1117    1118    1188    1189
          1261    1262    1340    1379    1479    1526    1576    1577

MPI_ROOT                                                          INTEGER, PARAMETER, PRIVATE
  Decl     236     237
  Set 
  Used

MPI_SEEK_CUR                                                      INTEGER, PARAMETER, PRIVATE
  Decl     461     462
  Set 
  Used

MPI_SEEK_END                                                      INTEGER, PARAMETER, PRIVATE
  Decl     463     464
  Set 
  Used

MPI_SEEK_SET                                                      INTEGER, PARAMETER, PRIVATE
  Decl     459     460
  Set 
  Used

MPI_SHORT                                                         INTEGER, PARAMETER, PRIVATE
  Decl     315     316
  Set 
  Used

MPI_SHORT_INT                                                     INTEGER, PARAMETER, PRIVATE
  Decl     345     346
  Set 
  Used

MPI_SIGNED_CHAR                                                   INTEGER, PARAMETER, PRIVATE
  Decl     309     310
  Set 
  Used

MPI_SIMILAR                                                       INTEGER, PARAMETER, PRIVATE
  Decl     136     137
  Set 
  Used

MPI_SOURCE                                                        INTEGER, PARAMETER, PRIVATE
  Decl       9      10
  Set 
  Used     246     334     419     466     556     603     701     761     850     951    1061    1725    1825

MPI_STATUSES_IGNORE             /MPIPRIV2/ offset=0               INTEGER, DIMENSION(5, 1), PRIVATE
  Decl      14     496
  Set 
  Used

MPI_STATUS_IGNORE               /MPIPRIV1/ offset=64              INTEGER, DIMENSION(5), PRIVATE
  Decl      13     494
  Set 
  Used

MPI_STATUS_SIZE                                                   INTEGER, PARAMETER, PRIVATE
  Decl      11      12
  Set 
  Used     164     218     271     310     363     364     504     505     642     643     793     794     901     902    1010
          1011    1114    1185    1258    1317    1457    1573    1672    1673    1774    1775      13      14

MPI_SUBVERSION                                                    INTEGER, PARAMETER, PRIVATE
  Decl     244     245
  Set 
  Used

MPI_SUCCESS                                                       INTEGER, PARAMETER, PRIVATE
  Decl      18      19
  Set 
  Used

MPI_SUM                                                           INTEGER, PARAMETER, PRIVATE
  Decl     144     145
  Set 
  Used

MPI_TAG                                                           INTEGER, PARAMETER, PRIVATE
  Decl       9      10
  Set 
  Used

MPI_TAG_UB                                                        INTEGER, PARAMETER, PRIVATE
  Decl     190     191
  Set 
  Used

MPI_THREAD_FUNNELED                                               INTEGER, PARAMETER, PRIVATE
  Decl     435     436
  Set 
  Used

MPI_THREAD_MULTIPLE                                               INTEGER, PARAMETER, PRIVATE
  Decl     439     440
  Set 
  Used

MPI_THREAD_SERIALIZED                                             INTEGER, PARAMETER, PRIVATE
  Decl     437     438
  Set 
  Used

MPI_THREAD_SINGLE                                                 INTEGER, PARAMETER, PRIVATE
  Decl     433     434
  Set 
  Used

MPI_TYPECLASS_COMPLEX                                             INTEGER, PARAMETER, PRIVATE
  Decl     421     422
  Set 
  Used

MPI_TYPECLASS_INTEGER                                             INTEGER, PARAMETER, PRIVATE
  Decl     419     420
  Set 
  Used

MPI_TYPECLASS_REAL                                                INTEGER, PARAMETER, PRIVATE
  Decl     417     418
  Set 
  Used

MPI_TYPE_DUP_FN                                                   Procedure
  Decl     487
  Set 
  Used

MPI_TYPE_NULL_COPY_FN                                             Procedure
  Decl     488
  Set 
  Used

MPI_TYPE_NULL_DELETE_FN                                           Procedure
  Decl     487
  Set 
  Used

MPI_UB                                                            INTEGER, PARAMETER, PRIVATE
  Decl     276     277
  Set 
  Used

MPI_UINT16_T                                                      INTEGER, PARAMETER, PRIVATE
  Decl     361     362
  Set 
  Used

MPI_UINT32_T                                                      INTEGER, PARAMETER, PRIVATE
  Decl     363     364
  Set 
  Used

MPI_UINT64_T                                                      INTEGER, PARAMETER, PRIVATE
  Decl     365     366
  Set 
  Used

MPI_UINT8_T                                                       INTEGER, PARAMETER, PRIVATE
  Decl     359     360
  Set 
  Used

MPI_UNDEFINED                                                     INTEGER, PARAMETER, PRIVATE
  Decl     224     225
  Set 
  Used

MPI_UNEQUAL                                                       INTEGER, PARAMETER, PRIVATE
  Decl     138     139
  Set 
  Used

MPI_UNIVERSE_SIZE                                                 INTEGER, PARAMETER, PRIVATE
  Decl     198     199
  Set 
  Used

MPI_UNSIGNED                                                      INTEGER, PARAMETER, PRIVATE
  Decl     321     322
  Set 
  Used

MPI_UNSIGNED_CHAR                                                 INTEGER, PARAMETER, PRIVATE
  Decl     311     312
  Set 
  Used

MPI_UNSIGNED_LONG                                                 INTEGER, PARAMETER, PRIVATE
  Decl     325     326
  Set 
  Used

MPI_UNSIGNED_LONG_LONG                                            INTEGER, PARAMETER, PRIVATE
  Decl     335     336
  Set 
  Used

MPI_UNSIGNED_SHORT                                                INTEGER, PARAMETER, PRIVATE
  Decl     317     318
  Set 
  Used

MPI_VERSION                                                       INTEGER, PARAMETER, PRIVATE
  Decl     242     243
  Set 
  Used

MPI_WAIT                                                          Subroutine, EXTERNAL
  Decl
  Set 
  Used       0       0       0     446     975    1085     583     741     277     316     170

MPI_WAITALL                                                       Subroutine, EXTERNAL
  Decl
  Set 
  Used       0       0       0       0       0       0       0     987    1142    1169    1213    1240    1383    1759    1856
           869     720    1530    1557     290     577    1600    1601    1639    1640    1281    1282

MPI_WAITANY                                                       Subroutine, EXTERNAL
  Decl
  Set 
  Used       0       0       0       0     245     418     950     555     602    1824    1724     700     760     849

MPI_WCHAR                                                         INTEGER, PARAMETER, PRIVATE
  Decl     313     314
  Set 
  Used

MPI_WIN_BASE                                                      INTEGER, PARAMETER, PRIVATE
  Decl     204     205
  Set 
  Used

MPI_WIN_DISP_UNIT                                                 INTEGER, PARAMETER, PRIVATE
  Decl     208     209
  Set 
  Used

MPI_WIN_DUP_FN                                                    Procedure
  Decl     485
  Set 
  Used

MPI_WIN_NULL                                                      INTEGER, PARAMETER, PRIVATE
  Decl     174     175
  Set 
  Used

MPI_WIN_NULL_COPY_FN                                              Procedure
  Decl     486
  Set 
  Used

MPI_WIN_NULL_DELETE_FN                                            Procedure
  Decl     485
  Set 
  Used

MPI_WIN_SIZE                                                      INTEGER, PARAMETER, PRIVATE
  Decl     206     207
  Set 
  Used

MPI_WTICK                                                         Function, REAL*8, RESULT(MPI_WTICK), EXTERNAL
  Decl     481     490
  Set 
  Used

MPI_WTIME                                                         Function, REAL*8, RESULT(MPI_WTIME), EXTERNAL
  Decl     481     490
  Set 
  Used

MPI_WTIME_IS_GLOBAL                                               INTEGER, PARAMETER, PRIVATE
  Decl     196     197
  Set 
  Used

MYFIRSTLAT_DIAG                 Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     281     320     374     442     511     579     653     737     842     861     873

MYFIRSTLEV                      Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     938    1048

MYGROUP_FOUR                    Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     941     957    1051    1067

MYID                            Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     167     168     226     274     313     373     441     452     510     578     589     652     736     747     912
           972    1021    1082    1117    1118    1121    1131    1188    1189    1192    1202    1261    1262    1265    1275
          1336    1375    1475    1522    1576    1577    1579    1589

MYID_FOUR                       Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     927    1036

MYJMAX_D                        Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     275     281     314     320

MYLASTLAT                       Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     408     545     692     841

MYLASTLAT_DIAG                  Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     281     320     375     408     442     512     545     579     654     692     723     737     841     872

MYLASTLON                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     411     548     694     843

MYMNMAP_SI                      Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1388    1489

MYMNMAX                         Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1348    1532

MYRECS                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1286    1294
  Set 
  Used    1335

MYRECS                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1425    1433
  Set 
  Used    1474

MYRECSGR                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1629    1633    1739    1740    1840    1841

MYRECSPR                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1590    1591    1592    1628    1629    1632    1637    1694    1727    1736    1738    1797    1828    1837    1839

MYRECSPR_DIAG                   Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     384     387     390     421     424     428     521     524     527     558     561     565     663     666     669
           703     706     711     814     817     820     852     855     860    1203    1204    1205    1235    1236    1238

MYRECS_DIAG                     Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     385     429     430     522     566     567     664     712     713     815     861     862    1236

MYSENDS                         Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1245    1249
  Set 
  Used    1272

MYSENDS                         Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1286    1293
  Set 
  Used    1374

MYSENDS                         Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1425    1432
  Set 
  Used    1521

MYSENDSGR                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1616    1648    1700    1701    1803    1804

MYSENDSPR                       Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set     1583    1608    1609
  Used    1580    1605    1607    1615    1616    1618    1647    1652    1699    1720    1721    1802    1820    1821

MYSENDSPR_DIAG                  Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set     1190    1196    1221    1222
  Used     396     404     405     533     541     542     677     686     687     827     836     837    1193    1218    1220
          1228    1229    1231

MYSENDS_DIAG                    Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     397     398     534     535     678     679     828     829    1229

N                               Stack                             INTEGER
  Decl     211
  Set      249
  Used     250

N                               Stack                             INTEGER
  Decl     357
  Set      422     450     457
  Used     423     424     428     464

N                               Stack                             INTEGER
  Decl     498
  Set      559     587     594
  Used     560     561     565     601

N                               Stack                             INTEGER
  Decl     636
  Set      675     704     745     752
  Used     705     706     711     759

N                               Stack                             INTEGER
  Decl     787
  Set      826     853
  Used     830     854     855     860

N                               Stack                             INTEGER
  Decl    1678
  Set     1713    1752
  Used    1714    1753

NDIM                            Stack                             INTEGER
  Decl     140
  Set      142
  Used     143     144

NDIM                            Stack                             INTEGER
  Decl    1309
  Set     1320
  Used    1321    1322    1327    1328

NDIM                            Stack                             INTEGER
  Decl    1449
  Set     1459
  Used    1460    1461    1466    1467

NF                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     199     203
  Set 
  Used     207     209     220     221     239     247     249

NF                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     625     628
  Set 
  Used     630     631     633     647     648     667     675     690     710     722     737     748     763     771

NF                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     780     782
  Set 
  Used     783     784     798     799     804     805     818     826     840     859     871

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     908     909     912     913     916     917    1017    1018    1021    1022    1025    1026

NGPTS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     199     204
  Set 
  Used     206     209     220     221

NGPTSLOCAL                      Dummy Arg                         INTEGER, INTENT(IN)
  Decl     199     205
  Set 
  Used     207     243

NGPTSPERPROC                    Dummy Arg                         INTEGER, DIMENSION(0:<exp>), INTENT(IN)
  Decl     200     208
  Set 
  Used     238     239     251     252

NGROUPS_FOUR                    Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     968     977     978     987    1078    1087    1088    1097    1391    1492

NLATSINPROC_D                   Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     284     288     325     329

NLEN                            Stack                             INTEGER
  Decl    1567
  Set     1631    1633    1646    1648
  Used    1635    1650

NLEVPERG_FOUR                   Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     981    1091

NLFOUR                          Dummy Arg                         INTEGER, DIMENSION(1:*), INTENT(IN)
  Decl    1287    1299
  Set 
  Used    1392

NLFOUR                          Dummy Arg                         INTEGER, DIMENSION(1:*), INTENT(IN)
  Decl    1426    1438
  Set 
  Used    1494

NODEHASM                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     941     957    1051    1067    1394    1493

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     199     202
  Set 
  Used     226     227     230     234     241     242

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     260     262
  Set 
  Used     274     276

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     298
  Set 
  Used     313     315

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     350     352
  Set 
  Used     373     441     445

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     489     491
  Set 
  Used     510     578     582

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     625     627
  Set 
  Used     652     736     740

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     885     887
  Set 
  Used     907     908     972     974     982

NPROC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     995     997
  Set 
  Used    1016    1017    1082    1084    1092

NR                              Stack                             INTEGER
  Decl     303
  Set      322     328
  Used     332

NREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1286    1290
  Set 
  Used    1292    1294    1314    1315    1320    1334    1346    1383

NREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1425    1429
  Set 
  Used    1431    1433    1454    1455    1459    1473    1485    1530

NREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1561    1563
  Set 
  Used    1626    1640

NREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1658    1661
  Set 
  Used    1675    1681    1682    1692    1723    1724    1726

NREC                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1764    1767
  Set 
  Used    1777    1784    1785    1795    1823    1824    1827

NRECS_DIAG                      Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1174    1176
  Set 
  Used    1234    1241

NRECS_DIAG                      Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     382     417     418     420     519     554     555     557     661     699     700     702     812     848     849
           851

NRECS_F                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1103    1105
  Set 
  Used    1163    1170

NRECS_G                         Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1103    1106
  Set     1154
  Used    1156    1169

NS                              Stack                             INTEGER
  Decl     895
  Set      940     956
  Used     942     945     947     958     961     963

NS                              Stack                             INTEGER
  Decl    1004
  Set     1050    1066
  Used    1052    1055    1057    1068    1071    1073

NS                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1111
  Set     1133    1137    1157    1164
  Used    1139

NS                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1182
  Set     1204    1208    1228    1235
  Used    1210

NS                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1255
  Set     1270    1272
  Used    1276    1278

NS                              Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1570
  Set     1591    1595    1615    1628
  Used    1597

NS                              Stack                             INTEGER
  Decl    1677
  Set     1699    1738
  Used    1700    1701    1739    1740

NS                              Stack                             INTEGER
  Decl    1779
  Set     1802    1839
  Used    1803    1804    1840    1841

NSCALARS                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1561    1564
  Set 
  Used    1635    1650

NSCALARS                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1657    1662
  Set 
  Used    1669    1713    1752

NSEND                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1245    1247
  Set 
  Used    1248    1249    1271

NSEND                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1286    1289
  Set 
  Used    1291    1293    1313    1316    1320    1345    1373    1421

NSEND                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1425    1428
  Set 
  Used    1430    1432    1453    1456    1459    1484    1520    1557

NSEND                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1561    1565
  Set     1612
  Used    1614    1639    1644

NSEND                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1658    1660
  Set 
  Used    1673    1674    1686    1687    1697    1759

NSEND                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1764    1766
  Set 
  Used    1775    1776    1789    1790    1800    1856

NSENDS_DIAG                     Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1174    1177
  Set     1225
  Used    1227    1240

NSENDS_DIAG                     Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used     395     440     532     577     674     720     825     869

NUNIT                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     625     629
  Set 
  Used     774

OPTIONS                                                           Module
  Decl
  Set 
  Used      84

P                               Structure offset=0                REAL(KIND=8), Component of P2D, DIMENSION(:, :), POINTER
  Decl     133
  Set 
  Used

P2D                                                               Derived type
  Decl     122     132
  Set 
  Used

PARALLELISM                                                       Module
  Decl
  Set 
  Used       8

PMPI_WTICK                                                        Function, REAL*8, RESULT(PMPI_WTICK), EXTERNAL
  Decl     482     491
  Set 
  Used

PMPI_WTIME                                                        Function, REAL*8, RESULT(PMPI_WTIME), EXTERNAL
  Decl     482     491
  Set 
  Used

POINTSINPROC                    Use assoc                         INTEGER, From module SIZES, DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used     168     174     177     179     181

PRESENT                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1347    1404    1504    1510    1544    1550

Q                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1657    1667
  Set     1749
  Used    1710

Q1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1287    1300
  Set 
  Used    1352    1354

Q1                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1426    1440
  Set     1536    1538
  Used

Q1_SI                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1287    1302
  Set     1396    1398
  Used

Q1_SI                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1426    1442
  Set 
  Used    1496    1498

Q2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1287    1301
  Set 
  Used    1356    1358

Q2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1426    1441
  Set     1540    1542
  Used

Q2_SI                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1287    1303
  Set     1400    1402
  Used

Q2_SI                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1426    1443
  Set 
  Used    1500    1502

Q3                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN), OPTIONAL
  Decl    1287    1304
  Set 
  Used    1360    1361    1363    1404

Q3                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT), OPTIONAL
  Decl    1426    1444
  Set     1545    1547
  Used    1504    1544

Q3_SI                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT), OPTIONAL
  Decl    1287    1306
  Set     1405    1407
  Used

Q3_SI                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN), OPTIONAL
  Decl    1426    1446
  Set 
  Used    1505    1507

QS1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN), OPTIONAL
  Decl    1287    1305
  Set 
  Used    1347    1367    1368    1410

QS1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT), OPTIONAL
  Decl    1426    1445
  Set     1551    1552
  Used    1510    1550

QS1_SI                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT), OPTIONAL
  Decl    1287    1307
  Set     1411    1412
  Used

QS1_SI                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN), OPTIONAL
  Decl    1426    1447
  Set 
  Used    1511    1512

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     124     125     133     154     155     207     209     263     264     300     301     354     355     632     633
           634     783     784     785     891     892    1000    1001    1300    1301    1302    1303    1304    1305    1306
          1307    1440    1441    1442    1443    1444    1445    1446    1447    1664    1665    1666    1667    1668    1670
          1768    1769    1770    1771    1772

REDUCEDGRID                     Use assoc                         LOGICAL, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     721     870

REQUEST                         Stack                             INTEGER
  Decl     161
  Set 
  Used     169     170

REQUEST                         Stack                             INTEGER
  Decl     215
  Set 
  Used     227     228

REQUEST                         Stack                             INTEGER
  Decl     269
  Set 
  Used     276     277

REQUEST                         Stack                             INTEGER
  Decl     306
  Set 
  Used     315     316

REQUEST                         Stack                             INTEGER
  Decl     899
  Set 
  Used     928     929     974     975

REQUEST                         Stack                             INTEGER
  Decl    1008
  Set 
  Used    1038    1039    1084    1085

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     162
  Set      172
  Used     178     183

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     216
  Set      230
  Used     236     245

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     270
  Set      280
  Used     286     290

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     307
  Set      319
  Used     327     333

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     362
  Set      449
  Used     390     418     456     465

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     503
  Set      586
  Used     527     555     593     602

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     641
  Set      744
  Used     669     700     751     760

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     792
  Set 
  Used     820     849

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl     900
  Set      931     977
  Used     934     950     984     987

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1009
  Set     1041    1087
  Used    1044    1060    1094    1097

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1112
  Set     1117
  Used    1123    1142    1159    1169

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1183
  Set     1188
  Used    1194    1213    1230    1240

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1256
  Set     1261
  Used    1267    1281

REQUESTR                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1315
  Set     1340
  Used    1338    1383

REQUESTR                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1455
  Set     1479
  Used    1477    1530

REQUESTR                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1571
  Set     1576
  Used    1581    1600    1617    1639

REQUESTR                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1675
  Set 
  Used    1694    1724

REQUESTR                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1777
  Set 
  Used    1797    1824

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     361
  Set 
  Used     404     440     445     446

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     502
  Set 
  Used     541     577     582     583

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     640
  Set 
  Used     686     720     740     741

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl     791
  Set 
  Used     836     869

REQUESTS                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1113
  Set     1118
  Used    1139    1143    1166    1170

REQUESTS                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1184
  Set     1189
  Used    1210    1214    1237    1241

REQUESTS                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1257
  Set     1262
  Used    1276    1282

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1316
  Set     1379
  Used    1377    1421

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1456
  Set     1526
  Used    1524    1557

REQUESTS                        Stack                             INTEGER, DIMENSION(0:<exp>)
  Decl    1572
  Set     1577
  Used    1597    1601    1630    1640

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1674
  Set 
  Used    1720    1759

REQUESTS                        Stack                             INTEGER, DIMENSION(<exp>)
  Decl    1776
  Set 
  Used    1820    1856

SAUX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     634
  Set      725
  Used     728     731

SAUX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     785
  Set      874
  Used     876

SET_COMMUNIC_BUFFER                                               Subroutine, Module procedure
  Decl     119     138
  Set 
  Used

SITOSPEC                                                          Subroutine, Module procedure
  Decl     121    1425
  Set 
  Used

SIZES                                                             Module
  Decl
  Set 
  Used      16

SPECTOSI                                                          Subroutine, Module procedure
  Decl     120    1286
  Set 
  Used

STAT                            Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl     364
  Set 
  Used     440

STAT                            Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl     505
  Set 
  Used     577

STAT                            Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl     643
  Set 
  Used     720

STAT                            Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl     794
  Set 
  Used     869

STATU                           Stack                             INTEGER, DIMENSION(5)
  Decl     901
  Set 
  Used     950     951

STATU                           Stack                             INTEGER, DIMENSION(5)
  Decl    1010
  Set 
  Used    1060    1061

STATU                           Stack                             INTEGER, DIMENSION(5)
  Decl    1672
  Set 
  Used    1724    1725

STATU                           Stack                             INTEGER, DIMENSION(5)
  Decl    1774
  Set 
  Used    1824    1825

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     164
  Set 
  Used     170     183

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     218
  Set 
  Used     228     245     246

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl     271
  Set 
  Used     277     290

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     310
  Set 
  Used     316     333     334

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     363
  Set 
  Used     418     419     446     465     466

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     504
  Set 
  Used     555     556     583     602     603

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     642
  Set 
  Used     700     701     741     760     761

STATUS                          Stack                             INTEGER, DIMENSION(5)
  Decl     793
  Set 
  Used     849     850

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl     902
  Set 
  Used     929     975     987

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1011
  Set 
  Used    1039    1085    1097

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1114
  Set 
  Used    1142    1143    1169    1170

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1185
  Set 
  Used    1213    1214    1240    1241

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1258
  Set 
  Used    1281    1282

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1317
  Set 
  Used    1383    1421

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1457
  Set 
  Used    1530    1557

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1573
  Set 
  Used    1600    1601    1639    1640

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1673
  Set 
  Used    1759

STATUS                          Stack                             INTEGER, DIMENSION(5, <exp>)
  Decl    1775
  Set 
  Used    1856

T                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1657    1666
  Set     1747
  Used    1708

TOALL                           Dummy Arg                         LOGICAL, INTENT(IN)
  Decl    1426    1439
  Set 
  Used

U                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1657    1664
  Set     1743
  Used    1704

U                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1764    1768
  Set     1844
  Used    1807

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1764    1771
  Set     1850
  Used    1813

UTILS                                                             Module
  Decl
  Set 
  Used      89

V                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1657    1665
  Set     1745
  Used    1706

V                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1764    1769
  Set     1846
  Used    1809

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    1764    1772
  Set     1852
  Used    1815

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl    1764    1770
  Set     1848
  Used    1811


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                     C o m m o n   B l o c k   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV1/                            Length: 28 bytes

     COMMUNICATIONS                   Block is used from COMMUNICATIONS

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIV2/                            Length: 24 bytes

     COMMUNICATIONS                   Block is used from COMMUNICATIONS

Blk  Program Unit                     Messages
---  ------------                     --------
/MPIPRIVC/                            Length: 2 bytes

     COMMUNICATIONS                   Block is used from COMMUNICATIONS


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ANY(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   EXCHANGE_WINDS in COMMUNICATIONS (Line 1407, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1516, file Communications.f90)

Name  Messages
----  --------
COLLECT_GAUSS in COMMUNICATIONS
      Defined as:  Subroutine (line 610, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1319, file Communications.f90)
                   MPI_ISEND (Line 1335, file Communications.f90)
                   MPI_WAITANY (Line 1349, file Communications.f90)
                   MPI_WAITALL (Line 1369, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_D in COMMUNICATIONS
      Defined as:  Subroutine (line 609, file Communications.f90)

      Interface:   None

      Calls:       MPI_ISEND (Line 815, file Communications.f90)
                   MPI_WAIT (Line 816, file Communications.f90)
                   MPI_IRECV (Line 826, file Communications.f90)
                   MPI_WAITANY (Line 833, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_FULL in COMMUNICATIONS
      Defined as:  Subroutine (line 607, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 889, file Communications.f90)
                   MPI_IRECV (Line 955, file Communications.f90)
                   MPI_ISEND (Line 903, file Communications.f90)
                   MPI_ISEND (Line 944, file Communications.f90)
                   MPI_WAITANY (Line 918, file Communications.f90)
                   MPI_WAITANY (Line 965, file Communications.f90)
                   MPI_WAITALL (Line 940, file Communications.f90)
                   MPI_WAIT (Line 946, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_FULLI in COMMUNICATIONS
      Defined as:  Subroutine (line 608, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1026, file Communications.f90)
                   MPI_IRECV (Line 1092, file Communications.f90)
                   MPI_ISEND (Line 1040, file Communications.f90)
                   MPI_ISEND (Line 1081, file Communications.f90)
                   MPI_WAITANY (Line 1055, file Communications.f90)
                   MPI_WAITANY (Line 1102, file Communications.f90)
                   MPI_WAITALL (Line 1077, file Communications.f90)
                   MPI_WAIT (Line 1083, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_HIS in COMMUNICATIONS
      Defined as:  Subroutine (line 606, file Communications.f90)

      Interface:   None

      Calls:       MPI_ISEND (Line 727, file Communications.f90)
                   MPI_WAIT (Line 728, file Communications.f90)
                   MPI_IRECV (Line 735, file Communications.f90)
                   MPI_WAITANY (Line 745, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_RED in COMMUNICATIONS
      Defined as:  Subroutine (line 603, file Communications.f90)

      Interface:   None

      Calls:       MPI_ISEND (Line 668, file Communications.f90)
                   MPI_WAIT (Line 670, file Communications.f90)
                   MPI_IRECV (Line 677, file Communications.f90)
                   MPI_WAITANY (Line 683, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_SUR in COMMUNICATIONS
      Defined as:  Subroutine (line 604, file Communications.f90)

      Interface:   None

      Calls:       MPI_ISEND (Line 776, file Communications.f90)
                   MPI_WAIT (Line 777, file Communications.f90)
                   MPI_IRECV (Line 785, file Communications.f90)
                   MPI_WAITALL (Line 790, file Communications.f90)

Name  Messages
----  --------
COLLECT_GRID_SUR_PRINT in COMMUNICATIONS
      Defined as:  Subroutine (line 605, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1168, file Communications.f90)
                   MPI_IRECV (Line 1250, file Communications.f90)
                   MPI_ISEND (Line 1185, file Communications.f90)
                   MPI_ISEND (Line 1239, file Communications.f90)
                   MPI_WAITANY (Line 1200, file Communications.f90)
                   MPI_WAITANY (Line 1260, file Communications.f90)
                   MPI_WAITALL (Line 1220, file Communications.f90)
                   MPI_WAIT (Line 1241, file Communications.f90)

Name  Messages
----  --------
COLLECT_SPEC in COMMUNICATIONS
      Defined as:  Subroutine (line 611, file Communications.f90)

      Interface:   None

      Calls:       MPI_ISEND (Line 1428, file Communications.f90)
                   MPI_ISEND (Line 1473, file Communications.f90)
                   MPI_WAIT (Line 1429, file Communications.f90)
                   MPI_WAIT (Line 1475, file Communications.f90)
                   MPI_IRECV (Line 1433, file Communications.f90)
                   MPI_IRECV (Line 1483, file Communications.f90)
                   MPI_WAITANY (Line 1450, file Communications.f90)
                   MPI_WAITALL (Line 1487, file Communications.f90)

Name  Messages
----  --------
COLLECT_SPEC_EXT in COMMUNICATIONS
      Defined as:  Subroutine (line 612, file Communications.f90)

      Interface:   None

      Calls:       MPI_ISEND (Line 1537, file Communications.f90)
                   MPI_ISEND (Line 1583, file Communications.f90)
                   MPI_WAIT (Line 1539, file Communications.f90)
                   MPI_WAIT (Line 1585, file Communications.f90)
                   MPI_IRECV (Line 1543, file Communications.f90)
                   MPI_IRECV (Line 1593, file Communications.f90)
                   MPI_WAITANY (Line 1560, file Communications.f90)
                   MPI_WAITALL (Line 1597, file Communications.f90)

Name  Messages
----  --------
COMMUNICATIONS
      Defined as:  Module (line 6, file Communications.f90)

      Calls:       CYCLICLINEAR in UTILS (Line 1227, file Communications.f90)
                   CYCLICLINEAR in UTILS (Line 1375, file Communications.f90)
                   CYCLICNEAREST_R in UTILS (Line 1230, file Communications.f90)
                   FWRITEFIELD82D in IOLOWLEVEL (Line 1274, file Communications.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   PARALLELISM
                   SIZES
                   OPTIONS
                   UTILS
                   IOLOWLEVEL
                   CONSTANTS

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
CYCLICLINEAR in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   COMMUNICATIONS (Line 1227, file Communications.f90)
                   COMMUNICATIONS (Line 1375, file Communications.f90)

Name  Messages
----  --------
CYCLICNEAREST_R in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   COMMUNICATIONS (Line 1230, file Communications.f90)

Name  Messages
----  --------
EXCHANGE_DIAG in COMMUNICATIONS
      Defined as:  Subroutine (line 618, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1693, file Communications.f90)
                   MPI_IRECV (Line 1729, file Communications.f90)
                   MPI_ISEND (Line 1710, file Communications.f90)
                   MPI_ISEND (Line 1736, file Communications.f90)
                   MPI_WAITALL (Line 1713, file Communications.f90)
                   MPI_WAITALL (Line 1714, file Communications.f90)
                   MPI_WAITALL (Line 1740, file Communications.f90)
                   MPI_WAITALL (Line 1741, file Communications.f90)

Name  Messages
----  --------
EXCHANGE_FIELDS in COMMUNICATIONS
      Defined as:  Subroutine (line 613, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 2193, file Communications.f90)
                   MPI_ISEND (Line 2219, file Communications.f90)
                   MPI_WAITANY (Line 2224, file Communications.f90)
                   MPI_WAITALL (Line 2259, file Communications.f90)

Name  Messages
----  --------
EXCHANGE_FTOG in COMMUNICATIONS
      Defined as:  Subroutine (line 617, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1622, file Communications.f90)
                   MPI_IRECV (Line 1658, file Communications.f90)
                   MPI_ISEND (Line 1639, file Communications.f90)
                   MPI_ISEND (Line 1665, file Communications.f90)
                   MPI_WAITALL (Line 1642, file Communications.f90)
                   MPI_WAITALL (Line 1643, file Communications.f90)
                   MPI_WAITALL (Line 1669, file Communications.f90)
                   MPI_WAITALL (Line 1670, file Communications.f90)

Name  Messages
----  --------
EXCHANGE_HALLOS in COMMUNICATIONS
      Defined as:  Subroutine (line 615, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 2080, file Communications.f90)
                   MPI_IRECV (Line 2116, file Communications.f90)
                   MPI_ISEND (Line 2097, file Communications.f90)
                   MPI_ISEND (Line 2129, file Communications.f90)
                   MPI_WAITALL (Line 2100, file Communications.f90)
                   MPI_WAITALL (Line 2101, file Communications.f90)
                   MPI_WAITALL (Line 2139, file Communications.f90)
                   MPI_WAITALL (Line 2140, file Communications.f90)

Name  Messages
----  --------
EXCHANGE_SI in COMMUNICATIONS
      Defined as:  Subroutine (line 616, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1766, file Communications.f90)
                   MPI_ISEND (Line 1776, file Communications.f90)
                   MPI_WAITALL (Line 1781, file Communications.f90)
                   MPI_WAITALL (Line 1782, file Communications.f90)

Name  Messages
----  --------
EXCHANGE_WINDS in COMMUNICATIONS
      Defined as:  Subroutine (line 614, file Communications.f90)

      Interface:   None

      Calls:       MAX(Intrinsic) (Line 908, file Communications.f90)
                   MIN(Intrinsic) (Line 908, file Communications.f90)
                   MAX(Intrinsic) (Line 1045, file Communications.f90)
                   MIN(Intrinsic) (Line 1045, file Communications.f90)
                   MAX(Intrinsic) (Line 1192, file Communications.f90)
                   MIN(Intrinsic) (Line 1192, file Communications.f90)
                   MAX(Intrinsic) (Line 1341, file Communications.f90)
                   MIN(Intrinsic) (Line 1341, file Communications.f90)
                   ANY(Intrinsic) (Line 1407, file Communications.f90)
                   ANY(Intrinsic) (Line 1516, file Communications.f90)
                   MAX(Intrinsic) (Line 1820, file Communications.f90)
                   PRESENT(Intrinsic) (Line 1847, file Communications.f90)
                   PRESENT(Intrinsic) (Line 1860, file Communications.f90)
                   PRESENT(Intrinsic) (Line 1904, file Communications.f90)
                   PRESENT(Intrinsic) (Line 1910, file Communications.f90)
                   MAX(Intrinsic) (Line 1959, file Communications.f90)
                   PRESENT(Intrinsic) (Line 2004, file Communications.f90)
                   PRESENT(Intrinsic) (Line 2010, file Communications.f90)
                   PRESENT(Intrinsic) (Line 2044, file Communications.f90)
                   PRESENT(Intrinsic) (Line 2050, file Communications.f90)
                   MPI_IRECV (Line 2296, file Communications.f90)
                   MPI_ISEND (Line 2319, file Communications.f90)
                   MPI_WAITANY (Line 2324, file Communications.f90)
                   MPI_WAITALL (Line 2356, file Communications.f90)

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
FWRITEFIELD42D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FWRITEFIELD82D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   COMMUNICATIONS (Line 1274, file Communications.f90)

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IOLOWLEVEL
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   EXCHANGE_WINDS in COMMUNICATIONS (Line 908, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1045, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1192, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1341, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1820, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1959, file Communications.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   EXCHANGE_WINDS in COMMUNICATIONS (Line 908, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1045, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1192, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1341, file Communications.f90)

Name  Messages
----  --------
MPI_COMM_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_COMM_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_CONVERSION_FN_NULL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_IRECV
      Defined as:  No definitions.

      Interface:   None

      Called By:   COLLECT_GRID_RED in COMMUNICATIONS (Line 677, file Communications.f90)
                   COLLECT_GRID_HIS in COMMUNICATIONS (Line 735, file Communications.f90)
                   COLLECT_GRID_SUR in COMMUNICATIONS (Line 785, file Communications.f90)
                   COLLECT_GRID_D in COMMUNICATIONS (Line 826, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 889, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 955, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1026, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1092, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1168, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1250, file Communications.f90)
                   COLLECT_GAUSS in COMMUNICATIONS (Line 1319, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1433, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1483, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1543, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1593, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1622, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1658, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1693, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1729, file Communications.f90)
                   EXCHANGE_SI in COMMUNICATIONS (Line 1766, file Communications.f90)
                   SPECTOSI in COMMUNICATIONS (Line 1837, file Communications.f90)
                   SITOSPEC in COMMUNICATIONS (Line 1976, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2080, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2116, file Communications.f90)
                   EXCHANGE_FIELDS in COMMUNICATIONS (Line 2193, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2296, file Communications.f90)

Name  Messages
----  --------
MPI_ISEND
      Defined as:  No definitions.

      Interface:   None

      Called By:   COLLECT_GRID_RED in COMMUNICATIONS (Line 668, file Communications.f90)
                   COLLECT_GRID_HIS in COMMUNICATIONS (Line 727, file Communications.f90)
                   COLLECT_GRID_SUR in COMMUNICATIONS (Line 776, file Communications.f90)
                   COLLECT_GRID_D in COMMUNICATIONS (Line 815, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 903, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 944, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1040, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1081, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1185, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1239, file Communications.f90)
                   COLLECT_GAUSS in COMMUNICATIONS (Line 1335, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1428, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1473, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1537, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1583, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1639, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1665, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1710, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1736, file Communications.f90)
                   EXCHANGE_SI in COMMUNICATIONS (Line 1776, file Communications.f90)
                   SPECTOSI in COMMUNICATIONS (Line 1876, file Communications.f90)
                   SITOSPEC in COMMUNICATIONS (Line 2023, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2097, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2129, file Communications.f90)
                   EXCHANGE_FIELDS in COMMUNICATIONS (Line 2219, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2319, file Communications.f90)

Name  Messages
----  --------
MPI_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_TYPE_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WAIT
      Defined as:  No definitions.

      Interface:   None

      Called By:   COLLECT_GRID_RED in COMMUNICATIONS (Line 670, file Communications.f90)
                   COLLECT_GRID_HIS in COMMUNICATIONS (Line 728, file Communications.f90)
                   COLLECT_GRID_SUR in COMMUNICATIONS (Line 777, file Communications.f90)
                   COLLECT_GRID_D in COMMUNICATIONS (Line 816, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 946, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1083, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1241, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1429, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1475, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1539, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1585, file Communications.f90)

Name  Messages
----  --------
MPI_WAITALL
      Defined as:  No definitions.

      Interface:   None

      Called By:   COLLECT_GRID_SUR in COMMUNICATIONS (Line 790, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 940, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1077, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1220, file Communications.f90)
                   COLLECT_GAUSS in COMMUNICATIONS (Line 1369, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1487, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1597, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1642, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1643, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1669, file Communications.f90)
                   EXCHANGE_FTOG in COMMUNICATIONS (Line 1670, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1713, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1714, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1740, file Communications.f90)
                   EXCHANGE_DIAG in COMMUNICATIONS (Line 1741, file Communications.f90)
                   EXCHANGE_SI in COMMUNICATIONS (Line 1781, file Communications.f90)
                   EXCHANGE_SI in COMMUNICATIONS (Line 1782, file Communications.f90)
                   SPECTOSI in COMMUNICATIONS (Line 1883, file Communications.f90)
                   SPECTOSI in COMMUNICATIONS (Line 1921, file Communications.f90)
                   SITOSPEC in COMMUNICATIONS (Line 2030, file Communications.f90)
                   SITOSPEC in COMMUNICATIONS (Line 2057, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2100, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2101, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2139, file Communications.f90)
                   EXCHANGE_HALLOS in COMMUNICATIONS (Line 2140, file Communications.f90)
                   EXCHANGE_FIELDS in COMMUNICATIONS (Line 2259, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2356, file Communications.f90)

Name  Messages
----  --------
MPI_WAITANY
      Defined as:  No definitions.

      Interface:   None

      Called By:   COLLECT_GRID_RED in COMMUNICATIONS (Line 683, file Communications.f90)
                   COLLECT_GRID_HIS in COMMUNICATIONS (Line 745, file Communications.f90)
                   COLLECT_GRID_D in COMMUNICATIONS (Line 833, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 918, file Communications.f90)
                   COLLECT_GRID_FULL in COMMUNICATIONS (Line 965, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1055, file Communications.f90)
                   COLLECT_GRID_FULLI in COMMUNICATIONS (Line 1102, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1200, file Communications.f90)
                   COLLECT_GRID_SUR_PRINT in COMMUNICATIONS (Line 1260, file Communications.f90)
                   COLLECT_GAUSS in COMMUNICATIONS (Line 1349, file Communications.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1450, file Communications.f90)
                   COLLECT_SPEC_EXT in COMMUNICATIONS (Line 1560, file Communications.f90)
                   EXCHANGE_FIELDS in COMMUNICATIONS (Line 2224, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2324, file Communications.f90)

Name  Messages
----  --------
MPI_WIN_DUP_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_COPY_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WIN_NULL_DELETE_FN
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

Name  Messages
----  --------
MPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
MPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
PARALLELISM
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
PMPI_WTICK
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PMPI_WTIME
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
PRESENT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   EXCHANGE_WINDS in COMMUNICATIONS (Line 1847, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1860, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1904, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 1910, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2004, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2010, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2044, file Communications.f90)
                   EXCHANGE_WINDS in COMMUNICATIONS (Line 2050, file Communications.f90)

Name  Messages
----  --------
SET_COMMUNIC_BUFFER in COMMUNICATIONS
      Defined as:  Subroutine (line 619, file Communications.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SITOSPEC in COMMUNICATIONS
      Defined as:  Subroutine (line 621, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1976, file Communications.f90)
                   MPI_ISEND (Line 2023, file Communications.f90)
                   MPI_WAITALL (Line 2030, file Communications.f90)
                   MPI_WAITALL (Line 2057, file Communications.f90)

Name  Messages
----  --------
SIZES
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
SPECTOSI in COMMUNICATIONS
      Defined as:  Subroutine (line 620, file Communications.f90)

      Interface:   None

      Calls:       MPI_IRECV (Line 1837, file Communications.f90)
                   MPI_ISEND (Line 1876, file Communications.f90)
                   MPI_WAITALL (Line 1883, file Communications.f90)
                   MPI_WAITALL (Line 1921, file Communications.f90)

Name  Messages
----  --------
UTILS
      Defined as:  No definitions.

      Used By:     COMMUNICATIONS

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
