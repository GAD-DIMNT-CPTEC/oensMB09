%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Constants.f90
Compiled : 10/21/10  14:56:52
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmd -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Constants.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Constants.f90
Date     : 10/21/2010  14:56:52


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.        !
    2.        !  $Author: pkubota $
    3.        !  $Date: 2008/09/23 17:51:54 $
    4.        !  $Revision: 1.9 $
    5.        !
    6.        MODULE Constants
    7.        
    8.          IMPLICIT NONE
    9.        
   10.          ! Selecting Kinds
   11.          INTEGER, PARAMETER :: r4 = SELECTED_REAL_KIND(6)  ! Kind for 32-bits Real Numbers
   12.          INTEGER, PARAMETER :: i4 = SELECTED_INT_KIND(9)   ! Kind for 32-bits Integer Numbers
   13.          INTEGER, PARAMETER :: r8 = SELECTED_REAL_KIND(15) ! Kind for 64-bits Real Numbers
   14.          INTEGER, PARAMETER :: i8 = SELECTED_INT_KIND(14)  ! Kind for 64-bits Integer Numbers
   15.          INTEGER, PARAMETER :: r16 = SELECTED_REAL_KIND(15)! Kind for 128-bits Real Numbers
   16.        
   17.          ! Dimension for Diagnostics Arrays
   18.          INTEGER , PARAMETER :: ndavl = 106 ! Number of Available Diagnostics Fields
   19.          INTEGER , PARAMETER :: ndrq  = 100 ! Number of Desired Diagnostics Fields
   20.          INTEGER , PARAMETER :: ncdg  =  20 ! Number of Combined Field Components
   21.          INTEGER , PARAMETER :: jxavl = 150 ! Maximum Number of Available plus Combined Fields
   22.          INTEGER , PARAMETER :: jxcdg =  40 ! Maximum Number of Combined Field Components
   23.        
   24.          ! Dimension for Grid History Arrays
   25.          INTEGER , PARAMETER :: ngfld=83 ! Number of Available Grid History Fields
   26.        
   27.          ! Dimension for Units Arrays
   28.          INTEGER , PARAMETER :: nunits = 260        ! Number of Defined Units
   29.          INTEGER , PARAMETER :: numx   = nunits-1   ! Number of Defined Units minus 1
   30.          INTEGER , PARAMETER :: ngrp   = nunits/10  ! Number of Units Groups
   31.          INTEGER , PARAMETER :: ngrmx  = ngrp-1     ! Number of Units Groups minus 1
   32.          INTEGER , PARAMETER :: ncf    = 1000       ! Number of First Unit Conversion Coefficents
   33.          INTEGER , PARAMETER :: ncf2   = 500        ! Number of Second Unit Conversion Coefficents
   34.        
   35.          ! Dimension for Vegetation Arrays
   36.          INTEGER , PARAMETER :: ityp = 13 ! Number of Vegetation Types
   37.          INTEGER , PARAMETER :: imon = 12 ! Number of Months with Defined Vegetation Types
   38.          INTEGER , PARAMETER :: icg  = 2  ! Number of Vegetation Parameters
   39.          INTEGER , PARAMETER :: iwv  = 3  ! Number of Radiation Wavelengths
   40.          INTEGER , PARAMETER :: idp  = 3  ! Number of Soil Layer Parameters
   41.          INTEGER , PARAMETER :: ibd  = 2  ! Number of Vegetation Stage
   42.        
   43.        
   44.          ! Constants
   45.          REAL (KIND=r8), PARAMETER   :: pai   =        3.14159265358979_r8! constant pi=3.1415926e0
   46.          REAL (KIND=r8), PARAMETER   :: pihalf=                 pai/2.0_r8! constant pi / 2
   47.          REAL (KIND=r8), PARAMETER   :: tbar  =                   300.0_r8! 300 K
   48.          REAL (KIND=r8), PARAMETER   :: pscons=                  1000.0_r8! A constant value for surface pressure
   49.          REAL (KIND=r8), PARAMETER   :: cp    =                  1004.6_r8! specific heat of air           (j/kg/k)
   50.          REAL (KIND=r8), PARAMETER   :: gasr  =                  287.05_r8! gas constant of dry air        (j/kg/k)
   51.          REAL (KIND=r8), PARAMETER   :: er    =               6370000.0_r8! earth's radius                 (m)
   52.          REAL (KIND=r8), PARAMETER   :: eriv  =                  1.0_r8/er! earth's radius inverse         (1/m)
   53.          REAL (KIND=r8), PARAMETER   :: ersqiv=               1.0_r8/er**2! earth's radius square inverse  (1/m**2)
   54.          REAL (KIND=r8), PARAMETER   :: grav  =                   9.8e0_r8! gravity constant               (m/s**2)
   55.          REAL (KIND=r8), PARAMETER   :: ga2   =               grav/(er*er)!
   56.          REAL (KIND=r8), PARAMETER   :: rk    =                    gasr/cp!
   57.          REAL (KIND=r8), PARAMETER   :: raa   =                 gasr/er**2!
   58.          REAL (KIND=r8), PARAMETER   :: twomg =             1.458492e-4_r8!
   59.          REAL (KIND=r8), PARAMETER   :: tdelt =                   100.0_r8! equator to pole surface radiative equilibrium 
   60.          ! temperature difference (k)
   61.          REAL (KIND=r8), PARAMETER   :: tsfc0 =                   300.0_r8! equator surface radiative equilibrium temperature (k)
   62.          REAL (KIND=r8), PARAMETER   :: h0    =                   8.2e3_r8! h0 scale height of radiative equilibrium temperature
   63.          ! assuming isothermal atmosphere (m)
   64.          REAL (KIND=r8), PARAMETER   :: rlaps =                  6.5e-3_r8! rlaps radiative equilibrium temperature lapse rate (km)
   65.          ! from surface to stratosphere
   66.          REAL (KIND=r8), PARAMETER   :: tstrat=                   200.0_r8! tstrat    stratospheric radiative equilibrium 
   67.          ! temperature (k)
   68.          REAL (KIND=r8), PARAMETER   :: qmin  =                 1.0e-12_r8! minimum value relative humidity relhum
   69.          ! constant qmin = 1.0e-12 
   70.          REAL (KIND=r8)              :: root2                             ! SQRT(2.0)
   71.          REAL (KIND=r8)              :: coriol                            !
   72.          REAL (KIND=r8), PARAMETER   :: pie  =              3.1415926e0_r8! constant pi=3.1415926e0   
   73.          REAL (KIND=r8), PARAMETER   :: pai12  =              pie/12.0_r8 ! pi/12
   74.          REAL (KIND=r8), PARAMETER   :: hl  =                    2.52e6_r8! heat of evaporation of water     (j/kg) 
   75.          REAL (KIND=r8), PARAMETER   :: stefan =                5.67e-8_r8! stefan Stefan Boltzman constant 
   76.          REAL (KIND=r8), PARAMETER   :: solcon =              1365.00e0_r8! solar constant (wgne value)    (w/m**2) 
   77.          REAL (KIND=r8), PARAMETER   :: rmwmd  =                0.622e0_r8! fracao molar entre a agua e o ar 
   78.          REAL (KIND=r8), PARAMETER   :: rmwmdi =                 1.61e0_r8!
   79.          REAL (KIND=r8), PARAMETER   :: e0c  =                   6.11e0_r8!
   80.          REAL (KIND=r8), PARAMETER   :: t000   =                 299.e0_r8! Temp. global de ref. ao nivel do mar. (K)
   81.          REAL (KIND=r8), PARAMETER   :: p000   =                1013.e0_r8! Pressao de referencia ao nivel do mar (mb)
   82.          REAL (KIND=r8), PARAMETER   :: p00  =                  1000.e0_r8! Pressao de referencia ao nivel do mar (mb)
   83.          REAL (KIND=r8), PARAMETER   :: snomel= 333624.2e0_r8 *1000.0e0_r8! Calor latente de fusao is expressed in (j m-1)
   84.          REAL (KIND=r8), PARAMETER   :: tf  =                  273.16e0_r8! Temperatura de congelamento (K)=273.16e0
   85.          REAL (KIND=r8), PARAMETER   :: epsfac =                0.622e0_r8! Constante 0.622 Razao entre as massas 
   86.          !  moleculares do vapor e do ar seco
   87.          REAL (KIND=r8), PARAMETER   :: athird =         1.0e0_r8/3.0e0_r8!
   88.          REAL (KIND=r8), PARAMETER   :: clai   =   4.2e0_r8 *1000.0e0_r8 *0.2e0_r8! heat capacity of foliage    
   89.          REAL (KIND=r8), PARAMETER   :: cw  =4.2e0_r8 *1000.0e0_r8 *1000.0e0_r8! liquid water heat capacity     (j/m**3)
   90.          REAL (KIND=r8), PARAMETER   :: delq   =       0.608e0_r8! constant delq = 0.608e0
   91.          REAL (KIND=r8), PARAMETER   :: tice   =      271.16e0_r8! constant tice
   92.          REAL (KIND=r8), PARAMETER   :: icealv =         0.8e0_r8! constant icealv
   93.          REAL (KIND=r8), PARAMETER   :: icealn =         0.4e0_r8! constant icealn
   94.          REAL (KIND=r8), PARAMETER   :: oceald =      0.0419e0_r8! constant oceald
   95.          REAL (KIND=r8), PARAMETER   :: z0ice  =       0.001e0_r8! 
   96.        
   97.          ! Dobson Unit (DU): It is assumed, that the ozone of the column in pure
   98.          ! form is present at normal pressure (1013.15 hPa) and at 0deg C (273.15 K).
   99.          ! The thickness of this layer is than given in "milli-centimetre" (10-5 m).
  100.          ! For example 300 DU correspond to a layer of 3 mm thickness under the
  101.          ! conditions given above.
  102.          ! Conversion:
  103.          !      dp_ozone = -rho_ozone g dz_ozone
  104.          !      dz_ozone =  -dp_ozone/g/rho_ozone
  105.          !                          dp_air    R_ozone * To
  106.          !               = -o3mix * ------ * -------------- = -o3mix * dp_air/g * gm2dob
  107.          !                            g            Po
  108.          !
  109.          ! But R_ozone = R*/M_ozone = 8.316963 J/mol/K /(47.998 g/mol) = 173.28 W/kg/K
  110.          ! Therefore, the conversion constant (kg/m2 to dobson):
  111.          !                gm2dob = 46716.3694_r8
  112.          !
  113.          REAL(KIND=r8)   , PARAMETER :: gm2dob = 46716.3694_r8 ! hmjb
  114.          ! 
  115.          REAL (KIND=r8), ALLOCATABLE :: tdampr(:)                        !
  116.          REAL (KIND=r8), ALLOCATABLE :: tdampf(:)                        !
  117.          REAL (KIND=r8), ALLOCATABLE :: tov(:)                           ! 300 k at all levels (substituir tov por tbar)  
  118.        
  119.        CONTAINS
  120.        
  121.          SUBROUTINE InitConstants (kMax) 
  122.        
  123.            IMPLICIT NONE
  124.        
  125.            INTEGER , INTENT(IN) :: kMax
  126.        
  127.            coriol = SQRT(2.0_r8/3.0_r8)*twomg
  128.            root2  = SQRT(2.0_r8)
  129.            ALLOCATE(tov(kMax))
  130.  V--<>     tov = tbar
  131.            ALLOCATE(tdampr(kMax))
  132.  V--<>     tdampr=10.0_r8
  133.            ALLOCATE(tdampf(kMax))
  134.  V--<>     tdampf(1)=2.0_r8; tdampf(2)=5.0_r8; tdampf(3:kmax)=10.0_r8
  135.        
  136.          END SUBROUTINE InitConstants
  137.        END MODULE Constants

ftn-6204 ftn: VECTOR File = Constants.f90, Line = 130 
  A loop starting at line 130 was vectorized.

ftn-6204 ftn: VECTOR File = Constants.f90, Line = 132 
  A loop starting at line 132 was vectorized.

ftn-6204 ftn: VECTOR File = Constants.f90, Line = 134 
  A loop starting at line 134 was vectorized.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
