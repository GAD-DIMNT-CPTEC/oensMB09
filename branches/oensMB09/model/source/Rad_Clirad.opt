       !        
       !        Cray Inc. Decompilation
       !        Notice - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Rad_Clirad.f90
       !        File                  :  Rad_Clirad.opt
       !        Network               :  Gemini interconnect
       !        Target                :  X86, 64-bit, sse3
       !        
   67.       
   67.       subroutine cliradsw( ncols, kmax, nls, noz, icld, inalb, s0, cosz, pl20, dpl, tl, ql, o3l, gps, imask, alvdf, alndf, alvdr, alndr, swinc, radvbc, radvdc, radnbc, radndc, radvbl, radvdl, radnbl, radndl, dswclr, dswtop, ssclr, ss, aslclr, asl, cld, clu, fice, rei, rel, taud )
   67.       t$3 = ncols
  175.       t$112 = _zla( 0, ncols )
   67.       t$4 = kmax
   67.       t$113 = _zla( 0, ncols )
  178.       t$114 = _zla( 0, kmax )
   67.       t$115 = _zla( 0, ncols ) * _zla( 0, kmax )
   67.       t$5 = ( 1 + kmax )
  242.       t$116 = _zla( 0, ( 1 + kmax ) )
   67.       t$117 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) )
  242.       t$120 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8
  241.       t$121 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8
  241.       t$123 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16
  247.       t$124 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16
  247.       t$126 = 8 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16
  246.       t$127 = 8 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16
  246.       t$129 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 16 * _zla( 0, ncols )
  276.       t$131 = 16 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20
  275.       t$133 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols )
  263.       t$134 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  263.       t$136 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  221.       t$137 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  221.       t$139 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  262.       t$140 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  262.       t$142 = 8 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  222.       t$144 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  258.       t$145 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 )
  258.       t$147 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 )
  240.       t$148 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 )
  240.       t$150 = 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 )
  239.       t$151 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 )
  239.       t$153 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 )
  264.       t$154 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
  264.       t$156 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
  265.       t$157 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  265.       t$159 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  274.       t$161 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 4 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  273.       t$163 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  256.       t$164 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  256.       t$166 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  253.       t$167 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  253.       t$169 = 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
   67.       t$6 = ( 2 + kmax )
  257.       t$170 = _zla( 0, ( 2 + kmax ) )
   67.       t$171 = _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) )
  257.       t$172 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  257.       t$174 = _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  267.       t$175 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  267.       t$177 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  266.       t$178 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  266.       t$180 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  232.       t$181 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  232.       t$183 = 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  228.       t$184 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  228.       t$186 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  233.       t$187 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  233.       t$189 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  229.       t$190 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  229.       t$192 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  249.       t$193 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  249.       t$195 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  248.       t$196 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  248.       t$198 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  230.       t$199 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  230.       t$201 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  226.       t$202 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  226.       t$204 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  231.       t$205 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  231.       t$207 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  227.       t$208 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  227.       t$210 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  235.       t$211 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  235.       t$213 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  220.       t$214 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  220.       t$216 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  234.       t$217 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  234.       t$219 = 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  254.       t$220 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  254.       t$222 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  269.       t$223 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  269.       t$225 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  255.       t$226 = 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  255.       t$228 = _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
   67.       t$118 = int( _alloc( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
  242.       t$119 = t$118
  241.       t$122 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8
  247.       t$125 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16
  246.       t$128 = t$118 + 8 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16
  276.       t$130 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 16 * _zla( 0, ncols )
  275.       t$132 = t$118 + 16 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20
  263.       t$135 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  221.       t$138 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  262.       t$141 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  222.       t$143 = t$118 + 8 * _zla( 0, ncols ) + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 )
  258.       t$146 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 )
  240.       t$149 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 )
  239.       t$152 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 )
  264.       t$155 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
  265.       t$158 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  274.       t$160 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  273.       t$162 = t$118 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 4 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  256.       t$165 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  253.       t$168 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  257.       t$173 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  267.       t$176 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  266.       t$179 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  232.       t$182 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  228.       t$185 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  233.       t$188 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  229.       t$191 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  249.       t$194 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  248.       t$197 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  230.       t$200 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  226.       t$203 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  231.       t$206 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  227.       t$209 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  235.       t$212 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  220.       t$215 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  234.       t$218 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  254.       t$221 = t$118 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  269.       t$224 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  255.       t$227 = t$118 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 2 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 8 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 16 + 12 * _zla( 0, ncols ) + 8 * ( ( _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) * 20 + 20 * _zla( 0, ncols ) + 7 ) / 8 ) + 7 ) / 8 + _zla( 0, ncols ) * _zla( 0, ( 1 + kmax ) ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
  281.       $F_A34 = ncols
  281.       if ( ncols > 0 ) then
  281.          $I_L281_497 = 0
  281. !dir$ ivdep
  281.          do
  281.             cmu(1 + $I_L281_497) = 0.0
  281.             $I_L281_497 = 1 + $I_L281_497
  281.             if ( $I_L281_497 >= $F_A34 ) exit
  281.          enddo
  281.       endif
  282.       $F_A35 = ncols
  282.       if ( ncols > 0 ) then
  282.          $I_L282_499 = 0
  282. !dir$ ivdep
  282.          do
  282.             listim(1 + $I_L282_499) = 0
  282.             $I_L282_499 = 1 + $I_L282_499
  282.             if ( $I_L282_499 >= $F_A35 ) exit
  282.          enddo
  308.          $I_L308_460 = 0
  308. !dir$ ivdep
  308.          do
  309.             listim(1 + $I_L308_460) = ( 1 + $I_L308_460 )
  310.             $I_L308_460 = 1 + $I_L308_460
  308.             if ( $I_L308_460 >= ncols ) exit
  308.          enddo
  308.       endif
  283.       $F_A36 = ncols
  283.       if ( ncols > 0 ) then
  283.          $I_L283_501 = 0
  283. !dir$ ivdep
  283.          do
  283.             bitx(1 + $I_L283_501) = .false.
  283.             $I_L283_501 = 1 + $I_L283_501
  283.             if ( $I_L283_501 >= $F_A36 ) exit
  283.          enddo
  283.       endif
  285.       $F_A37 = ncols
  285.       if ( ncols > 0 ) then
  285.          $I_L285_503 = 0
  285. !dir$ ivdep
  285.          do
  285.             ps(1 + $I_L285_503) = 0.0
  285.             $I_L285_503 = 1 + $I_L285_503
  285.             if ( $I_L285_503 >= $F_A37 ) exit
  285.          enddo
  285.       endif
  291.       $F_A38 = ncols
  291.       if ( ncols > 0 ) then
  291.          $I_L291_505 = 0
  291. !dir$ ivdep
  291.          do
  291.             rsurfv(1 + $I_L291_505) = 0.0
  291.             $I_L291_505 = 1 + $I_L291_505
  291.             if ( $I_L291_505 >= $F_A38 ) exit
  291.          enddo
  291.       endif
  292.       $F_A39 = ncols
  292.       if ( ncols > 0 ) then
  292.          $I_L292_507 = 0
  292. !dir$ ivdep
  292.          do
  292.             rsurfn(1 + $I_L292_507) = 0.0
  292.             $I_L292_507 = 1 + $I_L292_507
  292.             if ( $I_L292_507 >= $F_A39 ) exit
  292.          enddo
  292.       endif
  293.       $F_A40 = ncols
  293.       if ( ncols > 0 ) then
  293.          $I_L293_509 = 0
  293. !dir$ ivdep
  293.          do
  293.             agv(1 + $I_L293_509) = 0.0
  293.             $I_L293_509 = 1 + $I_L293_509
  293.             if ( $I_L293_509 >= $F_A40 ) exit
  293.          enddo
  293.       endif
  294.       $F_A41 = ncols
  294.       if ( ncols > 0 ) then
  294.          $I_L294_511 = 0
  294. !dir$ ivdep
  294.          do
  294.             agn(1 + $I_L294_511) = 0.0
  294.             $I_L294_511 = 1 + $I_L294_511
  294.             if ( $I_L294_511 >= $F_A41 ) exit
  294.          enddo
  294.       endif
  299.       $F_A42 = ncols
  299.       if ( ncols > 0 ) then
  299.          $I_L299_513 = 0
  299. !dir$ ivdep
  299.          do
  299.             litx(1 + $I_L299_513) = 0
  299.             $I_L299_513 = 1 + $I_L299_513
  299.             if ( $I_L299_513 >= $F_A42 ) exit
  299.          enddo
  299.       endif
  300.       $F_A43 = ncols
  300.       if ( ncols > 0 ) then
  300.          $I_L300_515 = 0
  300. !dir$ ivdep
  300.          do
  300.             dmask(1 + $I_L300_515) = 0
  300.             $I_L300_515 = 1 + $I_L300_515
  300.             if ( $I_L300_515 >= $F_A43 ) exit
  300.          enddo
  300.       endif
  286.       $F_A44 = ( 1 + kmax )
  286.       $F_A45 = ncols
  286.       if ( and( -$F_A45, -$F_A44 ) < 0 ) then
  286.          $I_L286_619 = 0
  286.          do
  286.             $I_L286_517 = 0
  286. !dir$ ivdep
  286.             do
  286.                ta(1 + $I_L286_517, 1 + $I_L286_619) = 0.0
  286.                $I_L286_517 = 1 + $I_L286_517
  286.                if ( $I_L286_517 >= $F_A45 ) exit
  286.             enddo
  286.             $I_L286_619 = 1 + $I_L286_619
  286.             if ( $I_L286_619 >= $F_A44 ) exit
  286.          enddo
  286.       endif
  287.       $F_A46 = ( 1 + kmax )
  287.       $F_A47 = ncols
  287.       if ( and( -$F_A47, -$F_A46 ) < 0 ) then
  287.          $I_L287_621 = 0
  287.          do
  287.             $I_L287_519 = 0
  287. !dir$ ivdep
  287.             do
  287.                wa(1 + $I_L287_519, 1 + $I_L287_621) = 0.0
  287.                $I_L287_519 = 1 + $I_L287_519
  287.                if ( $I_L287_519 >= $F_A47 ) exit
  287.             enddo
  287.             $I_L287_621 = 1 + $I_L287_621
  287.             if ( $I_L287_621 >= $F_A46 ) exit
  287.          enddo
  287.       endif
  288.       $F_A48 = ( 1 + kmax )
  288.       $F_A49 = ncols
  288.       if ( and( -$F_A49, -$F_A48 ) < 0 ) then
  288.          $I_L288_623 = 0
  288.          do
  288.             $I_L288_521 = 0
  288. !dir$ ivdep
  288.             do
  288.                oa(1 + $I_L288_521, 1 + $I_L288_623) = 0.0
  288.                $I_L288_521 = 1 + $I_L288_521
  288.                if ( $I_L288_521 >= $F_A49 ) exit
  288.             enddo
  288.             $I_L288_623 = 1 + $I_L288_623
  288.             if ( $I_L288_623 >= $F_A48 ) exit
  288.          enddo
  288.       endif
  296.       $F_A50 = ( 1 + kmax )
  296.       $F_A51 = ncols
  296.       if ( and( -$F_A51, -$F_A50 ) < 0 ) then
  296.          $I_L296_625 = 0
  296.          do
  296.             $I_L296_523 = 0
  296. !dir$ ivdep
  296.             do
  296.                ccu(1 + $I_L296_523, 1 + $I_L296_625) = 0.0
  296.                $I_L296_523 = 1 + $I_L296_523
  296.                if ( $I_L296_523 >= $F_A51 ) exit
  296.             enddo
  296.             $I_L296_625 = 1 + $I_L296_625
  296.             if ( $I_L296_625 >= $F_A50 ) exit
  296.          enddo
  296.       endif
  297.       $F_A52 = ( 1 + kmax )
  297.       $F_A53 = ncols
  297.       if ( and( -$F_A53, -$F_A52 ) < 0 ) then
  297.          $I_L297_627 = 0
  297.          do
  297.             $I_L297_525 = 0
  297. !dir$ ivdep
  297.             do
  297.                css(1 + $I_L297_525, 1 + $I_L297_627) = 0.0
  297.                $I_L297_525 = 1 + $I_L297_525
  297.                if ( $I_L297_525 >= $F_A53 ) exit
  297.             enddo
  297.             $I_L297_627 = 1 + $I_L297_627
  297.             if ( $I_L297_627 >= $F_A52 ) exit
  297.          enddo
  297.       endif
  298.       $F_A54 = ( 1 + kmax )
  298.       $F_A55 = ncols
  298.       if ( and( -$F_A55, -$F_A54 ) < 0 ) then
  298.          $I_L298_629 = 0
  298.          do
  298.             $I_L298_527 = 0
  298. !dir$ ivdep
  298.             do
  298.                dp(1 + $I_L298_527, 1 + $I_L298_629) = 0.0
  298.                $I_L298_527 = 1 + $I_L298_527
  298.                if ( $I_L298_527 >= $F_A55 ) exit
  298.             enddo
  298.             $I_L298_629 = 1 + $I_L298_629
  298.             if ( $I_L298_629 >= $F_A54 ) exit
  298.          enddo
  298.       endif
  289.       $F_A56 = 2 + kmax
  289.       $F_A57 = ncols
  289.       if ( and( -$F_A57, -$F_A56 ) < 0 ) then
  289.          $I_L289_631 = 0
  289.          do
  289.             $I_L289_529 = 0
  289. !dir$ ivdep
  289.             do
  289.                pu(1 + $I_L289_529, 1 + $I_L289_631) = 0.0
  289.                $I_L289_529 = 1 + $I_L289_529
  289.                if ( $I_L289_529 >= $F_A57 ) exit
  289.             enddo
  289.             $I_L289_631 = 1 + $I_L289_631
  289.             if ( $I_L289_631 >= $F_A56 ) exit
  289.          enddo
  289.       endif
  316.       $nsol_S2 = 0
  317.       if ( ncols > 0 ) then
  317.          $I_L317_462 = 0
  317. !dir$ ivdep
  317.          do
  318.             if ( cosz(1 + $I_L317_462) >= 1.0e-2 ) then
  319.                $nsol_S2 = 1 + $nsol_S2
  320.                bitx(1 + $I_L317_462) = .true.
  320.             endif
  322.             $I_L317_462 = 1 + $I_L317_462
  321.             if ( $I_L317_462 >= ncols ) exit
  321.          enddo
  321.       endif
  330.       $F_A58 = ncols
  330.       if ( ncols > 0 ) then
  330.          $I_L330_531 = 0
  330. !dir$ ivdep
  330.          do
  330.             swinc(1 + $I_L330_531) = 0.0
  330.             $I_L330_531 = 1 + $I_L330_531
  330.             if ( $I_L330_531 >= $F_A58 ) exit
  330.          enddo
  330.       endif
  331.       $F_A59 = ncols
  331.       if ( ncols > 0 ) then
  331.          $I_L331_533 = 0
  331. !dir$ ivdep
  331.          do
  331.             ss(1 + $I_L331_533) = 0.0
  331.             $I_L331_533 = 1 + $I_L331_533
  331.             if ( $I_L331_533 >= $F_A59 ) exit
  331.          enddo
  331.       endif
  332.       $F_A60 = ncols
  332.       if ( ncols > 0 ) then
  332.          $I_L332_535 = 0
  332. !dir$ ivdep
  332.          do
  332.             ssclr(1 + $I_L332_535) = 0.0
  332.             $I_L332_535 = 1 + $I_L332_535
  332.             if ( $I_L332_535 >= $F_A60 ) exit
  332.          enddo
  332.       endif
  333.       $F_A61 = ncols
  333.       if ( ncols > 0 ) then
  333.          $I_L333_537 = 0
  333. !dir$ ivdep
  333.          do
  333.             dswtop(1 + $I_L333_537) = 0.0
  333.             $I_L333_537 = 1 + $I_L333_537
  333.             if ( $I_L333_537 >= $F_A61 ) exit
  333.          enddo
  333.       endif
  334.       $F_A62 = ncols
  334.       if ( ncols > 0 ) then
  334.          $I_L334_539 = 0
  334. !dir$ ivdep
  334.          do
  334.             dswclr(1 + $I_L334_539) = 0.0
  334.             $I_L334_539 = 1 + $I_L334_539
  334.             if ( $I_L334_539 >= $F_A62 ) exit
  334.          enddo
  334.       endif
  335.       $F_A63 = ncols
  335.       if ( ncols > 0 ) then
  335.          $I_L335_541 = 0
  335. !dir$ ivdep
  335.          do
  335.             radvbl(1 + $I_L335_541) = 0.0
  335.             $I_L335_541 = 1 + $I_L335_541
  335.             if ( $I_L335_541 >= $F_A63 ) exit
  335.          enddo
  335.       endif
  336.       $F_A64 = ncols
  336.       if ( ncols > 0 ) then
  336.          $I_L336_543 = 0
  336. !dir$ ivdep
  336.          do
  336.             radvdl(1 + $I_L336_543) = 0.0
  336.             $I_L336_543 = 1 + $I_L336_543
  336.             if ( $I_L336_543 >= $F_A64 ) exit
  336.          enddo
  336.       endif
  337.       $F_A65 = ncols
  337.       if ( ncols > 0 ) then
  337.          $I_L337_545 = 0
  337. !dir$ ivdep
  337.          do
  337.             radnbl(1 + $I_L337_545) = 0.0
  337.             $I_L337_545 = 1 + $I_L337_545
  337.             if ( $I_L337_545 >= $F_A65 ) exit
  337.          enddo
  337.       endif
  338.       $F_A66 = ncols
  338.       if ( ncols > 0 ) then
  338.          $I_L338_547 = 0
  338. !dir$ ivdep
  338.          do
  338.             radndl(1 + $I_L338_547) = 0.0
  338.             $I_L338_547 = 1 + $I_L338_547
  338.             if ( $I_L338_547 >= $F_A66 ) exit
  338.          enddo
  338.       endif
  339.       $F_A67 = ncols
  339.       if ( ncols > 0 ) then
  339.          $I_L339_549 = 0
  339. !dir$ ivdep
  339.          do
  339.             radvbc(1 + $I_L339_549) = 0.0
  339.             $I_L339_549 = 1 + $I_L339_549
  339.             if ( $I_L339_549 >= $F_A67 ) exit
  339.          enddo
  339.       endif
  340.       $F_A68 = ncols
  340.       if ( ncols > 0 ) then
  340.          $I_L340_551 = 0
  340. !dir$ ivdep
  340.          do
  340.             radvdc(1 + $I_L340_551) = 0.0
  340.             $I_L340_551 = 1 + $I_L340_551
  340.             if ( $I_L340_551 >= $F_A68 ) exit
  340.          enddo
  340.       endif
  341.       $F_A69 = ncols
  341.       if ( ncols > 0 ) then
  341.          $I_L341_553 = 0
  341. !dir$ ivdep
  341.          do
  341.             radnbc(1 + $I_L341_553) = 0.0
  341.             $I_L341_553 = 1 + $I_L341_553
  341.             if ( $I_L341_553 >= $F_A69 ) exit
  341.          enddo
  341.       endif
  342.       $F_A70 = ncols
  342.       if ( ncols > 0 ) then
  342.          $I_L342_555 = 0
  342. !dir$ ivdep
  342.          do
  342.             radndc(1 + $I_L342_555) = 0.0
  342.             $I_L342_555 = 1 + $I_L342_555
  342.             if ( $I_L342_555 >= $F_A70 ) exit
  342.          enddo
  342.       endif
  343.       $F_A71 = kmax
  343.       $F_A72 = ncols
  343.       if ( and( -$F_A72, -$F_A71 ) < 0 ) then
  343.          $I_L343_633 = 0
  343.          do
  343.             $I_L343_557 = 0
  343. !dir$ ivdep
  343.             do
  343.                asl(1 + $I_L343_557, 1 + $I_L343_633) = 0.0
  343.                $I_L343_557 = 1 + $I_L343_557
  343.                if ( $I_L343_557 >= $F_A72 ) exit
  343.             enddo
  343.             $I_L343_633 = 1 + $I_L343_633
  343.             if ( $I_L343_633 >= $F_A71 ) exit
  343.          enddo
  343.       endif
  344.       $F_A73 = kmax
  344.       $F_A74 = ncols
  344.       if ( and( -$F_A74, -$F_A73 ) < 0 ) then
  344.          $I_L344_635 = 0
  344.          do
  344.             $I_L344_559 = 0
  344. !dir$ ivdep
  344.             do
  344.                aslclr(1 + $I_L344_559, 1 + $I_L344_635) = 0.0
  344.                $I_L344_559 = 1 + $I_L344_559
  344.                if ( $I_L344_559 >= $F_A74 ) exit
  344.             enddo
  344.             $I_L344_635 = 1 + $I_L344_635
  344.             if ( $I_L344_635 >= $F_A73 ) exit
  344.          enddo
  344.       endif
  348.       if ( $nsol_S2 == 0 ) then
   67.          _free( t$118 )
   67.       else
  354.          nsol = 0
  355.          if ( ncols > 0 ) then
  355.             $I_L355_464 = 0
  355. !dir$ ivdep
  355.             do
  356.                if ( bitx(1 + $I_L355_464) ) then
  357.                   nsol = 1 + nsol
  358.                   litx(nsol) = listim(1 + $I_L355_464)
  358.                endif
  360.                $I_L355_464 = 1 + $I_L355_464
  359.                if ( $I_L355_464 >= ncols ) exit
  359.             enddo
  359.          endif
  369.          if ( kmax > 0 ) then
  370.             if ( nsol > 0 ) then
  369.                $I_L369_689 = 0
  369.                do
  370.                   $I_L370_683 = 0
  370. !dir$ ivdep
  370. !dir$ blocking_size( 0, 0 )
  370.                   do
  369.                      $SCA_litx_I0 = litx(1 + $I_L370_683)
  369.                      $SCA_gps_I1 = cvmg( gps($SCA_litx_I0), ps(1 + $I_L370_683), $I_L369_689 == 0 )
  369.                      $I_L369_466 = 0
  369. !dir$ blocking_size( 256, 256 )
  369.                      do
  371.                         pu(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 3) = pl20($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1)
  372.                         dp(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 2) = dpl($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1)
  373.                         ta(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 2) = tl($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1)
  374.                         wa(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 2) = max( 9.9999999999999996e-24, ql($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1) )
  375.                         oa(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 2) = max( 1.0e-10, o3l($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1) )
  376.                         css(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 2) = cld($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1)
  377.                         ccu(1 + $I_L370_683, $I_L369_466 + 256 * $I_L369_689 + 2) = clu($SCA_litx_I0, $I_L369_466 + 256 * $I_L369_689 + 1)
  369.                         $I_L369_466 = 1 + $I_L369_466
  370.                         if ( $I_L369_466 >= min( kmax, 256 + 256 * $I_L369_689 ) + -256 * $I_L369_689 ) exit
  370.                      enddo
  369.                      ps(1 + $I_L370_683) = $SCA_gps_I1
  379.                      $I_L370_683 = 1 + $I_L370_683
  379.                      if ( $I_L370_683 >= nsol ) exit
  379.                   enddo
  369.                   $I_L369_689 = 1 + $I_L369_689
  379.                   if ( $I_L369_689 >= 1 + max( 0, -1 + _rsh( 255 + kmax, 8 ) ) ) exit
  379.                enddo
  379.             endif
  379.          endif
  386.          if ( nsol > 0 ) then
  386.             $I_L386_469 = 0
  386. !dir$ ivdep
  386.             do
  387.                $pu_WR0_R0 = 5.0e-1 * pu(1 + $I_L386_469, 3)
  387.                pu(1 + $I_L386_469, 2) = $pu_WR0_R0
  388.                pu(1 + $I_L386_469, 1) = ( 1.0000000000000001e-1 * $pu_WR0_R0 )
  389.                dp(1 + $I_L386_469, 1) = $pu_WR0_R0 + -( 1.0000000000000001e-1 * $pu_WR0_R0 )
  390.                ta(1 + $I_L386_469, 1) = ta(1 + $I_L386_469, 2)
  391.                wa(1 + $I_L386_469, 1) = wa(1 + $I_L386_469, 2)
  392.                oa(1 + $I_L386_469, 1) = oa(1 + $I_L386_469, 2)
  394.                $I_L386_469 = 1 + $I_L386_469
  386.                if ( $I_L386_469 >= nsol ) exit
  386.             enddo
  413.             $I_L413_471 = 0
  413. !dir$ ivdep
  413.             do
  413.                if ( litx(1 + $I_L413_471) <= ncols ) then
  413.                   agv(1 + $I_L413_471) = alvdf(litx(1 + $I_L413_471))
  414.                   agn(1 + $I_L413_471) = alndf(litx(1 + $I_L413_471))
  415.                   cmu(1 + $I_L413_471) = cosz(litx(1 + $I_L413_471))
  416.                   dmask(1 + $I_L413_471) = imask(litx(1 + $I_L413_471))
  416.                endif
  413.                $I_L413_471 = 1 + $I_L413_471
  413.                if ( $I_L413_471 >= nsol ) exit
  413.             enddo
  455.             $I_L455_481 = 0
  455. !dir$ ivdep
  455.             do
  456.                $scosz_WR0_R2 = s0 * cmu(1 + $I_L455_481)
  461.                swinc(litx(1 + $I_L455_481)) = $scosz_WR0_R2
  457.                $I_L455_481 = 1 + $I_L455_481
  455.                if ( $I_L455_481 >= nsol ) exit
  455.             enddo
  455.          endif
  397.          if ( noz ) then
  397.             $F_A75 = ( 1 + kmax )
  397.             $F_A76 = ncols
  397.             if ( and( -$F_A76, -$F_A75 ) < 0 ) then
  397.                $I_L397_637 = 0
  397.                do
  397.                   $I_L397_561 = 0
  397. !dir$ ivdep
  397.                   do
  397.                      oa(1 + $I_L397_561, 1 + $I_L397_637) = 0.0
  397.                      $I_L397_561 = 1 + $I_L397_561
  397.                      if ( $I_L397_561 >= $F_A76 ) exit
  397.                   enddo
  397.                   $I_L397_637 = 1 + $I_L397_637
  397.                   if ( $I_L397_637 >= $F_A75 ) exit
  397.                enddo
  397.             endif
  397.          endif
  402.          $F_A77 = ( 1 + nls )
  402.          $F_A78 = nsol
  402.          if ( and( -$F_A78, -$F_A77 ) < 0 ) then
  402.             $I_L402_639 = 0
  402.             do
  402.                $I_L402_563 = 0
  402. !dir$ ivdep
  402.                do
  402.                   css(1 + $I_L402_563, 1 + $I_L402_639) = 0.0
  402.                   $I_L402_563 = 1 + $I_L402_563
  402.                   if ( $I_L402_563 >= $F_A78 ) exit
  402.                enddo
  402.                $I_L402_639 = 1 + $I_L402_639
  402.                if ( $I_L402_639 >= $F_A77 ) exit
  402.             enddo
  402.          endif
  403.          $F_A79 = ( 1 + nls )
  403.          $F_A80 = nsol
  403.          if ( and( -$F_A80, -$F_A79 ) < 0 ) then
  403.             $I_L403_641 = 0
  403.             do
  403.                $I_L403_565 = 0
  403. !dir$ ivdep
  403.                do
  403.                   ccu(1 + $I_L403_565, 1 + $I_L403_641) = 0.0
  403.                   $I_L403_565 = 1 + $I_L403_565
  403.                   if ( $I_L403_565 >= $F_A80 ) exit
  403.                enddo
  403.                $I_L403_641 = 1 + $I_L403_641
  403.                if ( $I_L403_641 >= $F_A79 ) exit
  403.             enddo
  403.          endif
  404.          $F_A81 = nls
  404.          $F_A82 = nsol
  404.          if ( and( -$F_A82, -$F_A81 ) < 0 ) then
  404.             $I_L404_643 = 0
  404.             do
  404.                $I_L404_567 = 0
  404. !dir$ ivdep
  404.                do
  404.                   wa(1 + $I_L404_567, 1 + $I_L404_643) = 3.0000000000000001e-6
  404.                   $I_L404_567 = 1 + $I_L404_567
  404.                   if ( $I_L404_567 >= $F_A82 ) exit
  404.                enddo
  404.                $I_L404_643 = 1 + $I_L404_643
  404.                if ( $I_L404_643 >= $F_A81 ) exit
  404.             enddo
  404.          endif
  424.          if ( inalb /= 2 ) then
  434.             $F_A83 = nsol
  434.             if ( nsol > 0 ) then
  434.                $I_L434_569 = 0
  434. !dir$ ivdep
  434.                do
  434.                   rvbl(1 + $I_L434_569) = acos( cmu(1 + $I_L434_569) )
  434.                   $I_L434_569 = 1 + $I_L434_569
  434.                   if ( $I_L434_569 >= $F_A83 ) exit
  434.                enddo
  435.                $I_L435_473 = 0
  435. !dir$ ivdep
  435.                do
  436.                   $rvdc_WR0_R3 = -5.7295779513082383 * ( 1.570796326794895 + -rvbl(1 + $I_L435_473) )
  437.                   $rvbc_WR0_R4 = _expn( $rvdc_WR0_R3 )
  437.                   rvbc(1 + $I_L435_473) = $rvbc_WR0_R4
  440.                   $rvdc_WR0_R3 = 1.0574323216878312 * ( -5.4313e-2 + agv(1 + $I_L435_473) )
  440.                   rvdc(1 + $I_L435_473) = $rvdc_WR0_R3
  441.                   $rndc_WR0_R5 = 1.0574323216878312 * ( -5.4313e-2 + agn(1 + $I_L435_473) )
  441.                   rndc(1 + $I_L435_473) = $rndc_WR0_R5
  442.                   rsurfv(1 + $I_L435_473) = $rvdc_WR0_R3 + ( 1.0 + -$rvdc_WR0_R3 ) * $rvbc_WR0_R4
  443.                   rsurfn(1 + $I_L435_473) = $rndc_WR0_R5 + ( 1.0 + -$rndc_WR0_R5 ) * $rvbc_WR0_R4
  438.                   $I_L435_473 = 1 + $I_L435_473
  435.                   if ( $I_L435_473 >= nsol ) exit
  435.                enddo
  435.             endif
  445.             if ( ncols > 0 ) then
  445.                $I_L445_475 = 0
  445. !dir$ ivdep
  445.                do
  446.                   alvdr(1 + $I_L445_475) = 0.0
  447.                   alndr(1 + $I_L445_475) = 0.0
  448.                   $I_L445_475 = 1 + $I_L445_475
  445.                   if ( $I_L445_475 >= ncols ) exit
  445.                enddo
  445.             endif
  449.             if ( nsol > 0 ) then
  449.                $I_L449_477 = 0
  449. !dir$ ivdep
  449.                do
  449.                   alvdr(litx(1 + $I_L449_477)) = rsurfv(1 + $I_L449_477)
  450.                   alndr(litx(1 + $I_L449_477)) = rsurfn(1 + $I_L449_477)
  449.                   $I_L449_477 = 1 + $I_L449_477
  449.                   if ( $I_L449_477 >= nsol ) exit
  449.                enddo
  449.             endif
  449.          else if ( nsol > 0 ) then
  426.             $I_L426_479 = 0
  426. !dir$ ivdep
  426.             do
  426.                if ( litx(1 + $I_L426_479) <= ncols ) then
  426.                   rsurfv(1 + $I_L426_479) = alvdr(litx(1 + $I_L426_479))
  427.                   rsurfn(1 + $I_L426_479) = alndr(litx(1 + $I_L426_479))
  427.                endif
  426.                $I_L426_479 = 1 + $I_L426_479
  426.                if ( $I_L426_479 >= nsol ) exit
  426.             enddo
  426.          endif
  472.          $F_A84 = ( 1 + kmax )
  472.          $F_A85 = ncols
  472.          if ( and( -$F_A85, -$F_A84 ) < 0 ) then
  472.             $I_L472_645 = 0
  472.             do
  472.                $I_L472_571 = 0
  472. !dir$ ivdep
  472.                do
  472.                   css(1 + $I_L472_571, 1 + $I_L472_645) = max( css(1 + $I_L472_571, 1 + $I_L472_645), ccu(1 + $I_L472_571, 1 + $I_L472_645) )
  472.                   $I_L472_571 = 1 + $I_L472_571
  472.                   if ( $I_L472_571 >= $F_A85 ) exit
  472.                enddo
  472.                $I_L472_645 = 1 + $I_L472_645
  472.                if ( $I_L472_645 >= $F_A84 ) exit
  472.             enddo
  472.          endif
  474.          if ( icld == 1 ) then
  476.             $F_A86 = ( 1 + kmax )
  476.             $F_A87 = nsol
  476.             if ( and( -$F_A87, -$F_A86 ) < 0 ) then
  476.                $I_L476_647 = 0
  476.                do
  476.                   $I_L476_573 = 0
  476. !dir$ ivdep
  476.                   do
  476.                      e0(1 + $I_L476_573, 1 + $I_L476_647) = 5.0000000000000003e-2
  476.                      $I_L476_573 = 1 + $I_L476_573
  476.                      if ( $I_L476_573 >= $F_A87 ) exit
  476.                   enddo
  476.                   $I_L476_647 = 1 + $I_L476_647
  476.                   if ( $I_L476_647 >= $F_A86 ) exit
  476.                enddo
  476.             endif
  477.             $F_A88 = ( 1 + kmax )
  477.             $F_A89 = nsol
  477.             if ( and( -$F_A89, -$F_A88 ) < 0 ) then
  477.                $I_L477_649 = 0
  477.                do
  477.                   $I_L477_575 = 0
  477. !dir$ ivdep
  477.                   do
  477.                      bitc(1 + $I_L477_575, 1 + $I_L477_649) = ta(1 + $I_L477_575, 1 + $I_L477_649) < 253.0 .and. ccu(1 + $I_L477_575, 1 + $I_L477_649) == 0.0
  477.                      $I_L477_575 = 1 + $I_L477_575
  477.                      if ( $I_L477_575 >= $F_A89 ) exit
  477.                   enddo
  477.                   $I_L477_649 = 1 + $I_L477_649
  477.                   if ( $I_L477_649 >= $F_A88 ) exit
  477.                enddo
  477.             endif
  480.             t$737 = ( max( 0, nsol ) )
  480.             t$738 = ( max( 0, 1 + kmax ) )
  480.             t$742 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 4 ) ), 8 )
  480.             $F_A90 = ( 1 + kmax )
  480.             $F_A91 = nsol
  480.             if ( and( -$F_A91, -$F_A90 ) < 0 ) then
  480.                $I_L480_651 = 0
  480.                do
  480.                   $I_L480_577 = 0
  480. !dir$ ivdep
  480.                   do
  480.                      t$741(1 + $I_L480_577, 1 + $I_L480_651) = bitc(1 + $I_L480_577, 1 + $I_L480_651)
  480.                      $I_L480_577 = 1 + $I_L480_577
  480.                      if ( $I_L480_577 >= $F_A91 ) exit
  480.                   enddo
  480.                   $I_L480_651 = 1 + $I_L480_651
  480.                   if ( $I_L480_651 >= $F_A90 ) exit
  480.                enddo
  480.             endif
  480.             $F_A92 = ( 1 + kmax )
  480.             $F_A93 = nsol
  480.             if ( and( -$F_A93, -$F_A92 ) < 0 ) then
  480.                $I_L480_653 = 0
  480.                do
  480.                   $I_L480_579 = 0
  480. !dir$ ivdep
  480.                   do
  480.                      if ( t$741(1 + $I_L480_579, 1 + $I_L480_653) ) then
  480.                         e0(1 + $I_L480_579, 1 + $I_L480_653) = 2.5000000000000001e-2
  480.                      endif
  480.                      $I_L480_579 = 1 + $I_L480_579
  480.                      if ( $I_L480_579 >= $F_A93 ) exit
  480.                   enddo
  480.                   $I_L480_653 = 1 + $I_L480_653
  480.                   if ( $I_L480_653 >= $F_A92 ) exit
  480.                enddo
  480.             endif
  480.             _free( t$742 )
  486.             t$743 = ( max( 0, nsol ) )
  486.             t$744 = ( max( 0, 1 + kmax ) )
  486.             t$748 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 4 ) ), 8 )
  486.             $F_A94 = ( 1 + kmax )
  486.             $F_A95 = nsol
  486.             if ( and( -$F_A95, -$F_A94 ) < 0 ) then
  486.                $I_L486_655 = 0
  486.                do
  486.                   $I_L486_581 = 0
  486. !dir$ ivdep
  486.                   do
  486.                      t$747(1 + $I_L486_581, 1 + $I_L486_655) = css(1 + $I_L486_581, 1 + $I_L486_655) > 0.0
  486.                      $I_L486_581 = 1 + $I_L486_581
  486.                      if ( $I_L486_581 >= $F_A95 ) exit
  486.                   enddo
  486.                   $I_L486_655 = 1 + $I_L486_655
  486.                   if ( $I_L486_655 >= $F_A94 ) exit
  486.                enddo
  486.             endif
  486.             $F_A96 = ( 1 + kmax )
  486.             $F_A97 = nsol
  486.             if ( and( -$F_A97, -$F_A96 ) < 0 ) then
  486.                $I_L486_657 = 0
  486.                do
  486.                   $I_L486_583 = 0
  486. !dir$ ivdep
  486.                   do
  486.                      if ( t$747(1 + $I_L486_583, 1 + $I_L486_657) ) then
  486.                         e0(1 + $I_L486_583, 1 + $I_L486_657) = e0(1 + $I_L486_583, 1 + $I_L486_657) * dp(1 + $I_L486_583, 1 + $I_L486_657)
  486.                      endif
  486.                      $I_L486_583 = 1 + $I_L486_583
  486.                      if ( $I_L486_583 >= $F_A97 ) exit
  486.                   enddo
  486.                   $I_L486_657 = 1 + $I_L486_657
  486.                   if ( $I_L486_657 >= $F_A96 ) exit
  486.                enddo
  486.             endif
  486.             _free( t$748 )
  486.             goto 10
  488.          else if ( icld == 4 ) then
  491.             if ( kmax > 0 ) then
  492.                if ( nsol > 0 ) then
  491.                   $I_L491_691 = 0
  491.                   do
  492.                      $I_L492_685 = 0
  492. !dir$ ivdep
  492. !dir$ blocking_size( 0, 0 )
  492.                      do
  491.                         $SCA_litx_I4 = litx(1 + $I_L492_685)
  491.                         $I_L491_483 = 0
  491. !dir$ unroll 2
  491. !dir$ blocking_size( 256, 256 )
  491.                         do
  493.                            tauk(1 + $I_L492_685, $I_L491_483 + 256 * $I_L491_691 + 2) = taud($SCA_litx_I4, $I_L491_483 + 256 * $I_L491_691 + 1)
  494.                            frcice(1 + $I_L492_685, $I_L491_483 + 256 * $I_L491_691 + 2) = fice($SCA_litx_I4, $I_L491_483 + 256 * $I_L491_691 + 1)
  495.                            radice(1 + $I_L492_685, $I_L491_483 + 256 * $I_L491_691 + 2) = rei($SCA_litx_I4, $I_L491_483 + 256 * $I_L491_691 + 1)
  496.                            radliq(1 + $I_L492_685, $I_L491_483 + 256 * $I_L491_691 + 2) = rel($SCA_litx_I4, $I_L491_483 + 256 * $I_L491_691 + 1)
  491.                            $I_L491_483 = 1 + $I_L491_483
  492.                            if ( $I_L491_483 >= min( kmax, 256 + 256 * $I_L491_691 ) + -256 * $I_L491_691 ) exit
  492.                         enddo
  497.                         $I_L492_685 = 1 + $I_L492_685
  497.                         if ( $I_L492_685 >= nsol ) exit
  497.                      enddo
  491.                      $I_L491_691 = 1 + $I_L491_691
  497.                      if ( $I_L491_691 >= 1 + max( 0, -1 + _rsh( 255 + kmax, 8 ) ) ) exit
  497.                   enddo
  497.                endif
  497.             endif
  499.             $F_A98 = nsol
  499.             if ( nsol > 0 ) then
  499.                $I_L499_585 = 0
  499. !dir$ ivdep
  499.                do
  499.                   tauk(1 + $I_L499_585, 1) = 0.0
  499.                   $I_L499_585 = 1 + $I_L499_585
  499.                   if ( $I_L499_585 >= $F_A98 ) exit
  499.                enddo
  499.             endif
  500.             $F_A99 = nsol
  500.             if ( nsol > 0 ) then
  500.                $I_L500_587 = 0
  500. !dir$ ivdep
  500.                do
  500.                   frcice(1 + $I_L500_587, 1) = frcice(1 + $I_L500_587, 2)
  500.                   $I_L500_587 = 1 + $I_L500_587
  500.                   if ( $I_L500_587 >= $F_A99 ) exit
  500.                enddo
  500.             endif
  501.             $F_A100 = nsol
  501.             if ( nsol > 0 ) then
  501.                $I_L501_589 = 0
  501. !dir$ ivdep
  501.                do
  501.                   radice(1 + $I_L501_589, 1) = radice(1 + $I_L501_589, 2)
  501.                   $I_L501_589 = 1 + $I_L501_589
  501.                   if ( $I_L501_589 >= $F_A100 ) exit
  501.                enddo
  501.             endif
  502.             $F_A101 = nsol
  502.             if ( nsol > 0 ) then
  502.                $I_L502_591 = 0
  502. !dir$ ivdep
  502.                do
  502.                   radliq(1 + $I_L502_591, 1) = radliq(1 + $I_L502_591, 2)
  502.                   $I_L502_591 = 1 + $I_L502_591
  502.                   if ( $I_L502_591 >= $F_A101 ) exit
  502.                enddo
  502.             endif
  506.             $F_A102 = ( 1 + kmax )
  506.             $F_A103 = nsol
  506.             if ( and( -$F_A103, -$F_A102 ) < 0 ) then
  506.                $I_L506_659 = 0
  506.                do
  506.                   $I_L506_593 = 0
  506. !dir$ ivdep
  506.                   do
  506.                      e0(1 + $I_L506_593, 1 + $I_L506_659) = tauk(1 + $I_L506_593, 1 + $I_L506_659)
  506.                      $I_L506_593 = 1 + $I_L506_593
  506.                      if ( $I_L506_593 >= $F_A103 ) exit
  506.                   enddo
  506.                   $I_L506_659 = 1 + $I_L506_659
  506.                   if ( $I_L506_659 >= $F_A102 ) exit
  506.                enddo
  506.             endif
  506.    10       continue
  517.             t$756 = 9.9999999999999995e-7 * co2val
  517.             t$757 = 1 + kmax
  518.             t$760 = ( max( 0, nsol ) )
  518.             t$761 = ( max( 0, 2 + kmax ) )
  518.             t$765 = int( _alloc( max( 0, max( 0, ( max( 0, nsol ) ) ) * max( 0, ( max( 0, 2 + kmax ) ) ) * 8 ) ), 8 )
  518.             $F_A104 = ( 2 + kmax )
  518.             $F_A105 = nsol
  518.             if ( and( -$F_A105, -$F_A104 ) < 0 ) then
  518.                $I_L518_661 = 0
  518.                do
  518.                   $I_L518_595 = 0
  518. !dir$ ivdep
  518.                   do
  518.                      t$764(1 + $I_L518_595, 1 + $I_L518_661) = pu(1 + $I_L518_595, 1 + $I_L518_661)
  518.                      $I_L518_595 = 1 + $I_L518_595
  518.                      if ( $I_L518_595 >= $F_A105 ) exit
  518.                   enddo
  518.                   $I_L518_661 = 1 + $I_L518_661
  518.                   if ( $I_L518_661 >= $F_A104 ) exit
  518.                enddo
  518.             endif
  518.             t$768 = ( max( 0, nsol ) )
  518.             t$769 = ( max( 0, 1 + kmax ) )
  518.             t$773 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  518.             $F_A106 = ( 1 + kmax )
  518.             $F_A107 = nsol
  518.             if ( and( -$F_A107, -$F_A106 ) < 0 ) then
  518.                $I_L518_663 = 0
  518.                do
  518.                   $I_L518_597 = 0
  518. !dir$ ivdep
  518.                   do
  518.                      t$772(1 + $I_L518_597, 1 + $I_L518_663) = ta(1 + $I_L518_597, 1 + $I_L518_663)
  518.                      $I_L518_597 = 1 + $I_L518_597
  518.                      if ( $I_L518_597 >= $F_A107 ) exit
  518.                   enddo
  518.                   $I_L518_663 = 1 + $I_L518_663
  518.                   if ( $I_L518_663 >= $F_A106 ) exit
  518.                enddo
  518.             endif
  518.             t$776 = ( max( 0, nsol ) )
  518.             t$777 = ( max( 0, 1 + kmax ) )
  518.             t$781 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  518.             $F_A108 = ( 1 + kmax )
  518.             $F_A109 = nsol
  518.             if ( and( -$F_A109, -$F_A108 ) < 0 ) then
  518.                $I_L518_665 = 0
  518.                do
  518.                   $I_L518_599 = 0
  518. !dir$ ivdep
  518.                   do
  518.                      t$780(1 + $I_L518_599, 1 + $I_L518_665) = wa(1 + $I_L518_599, 1 + $I_L518_665)
  518.                      $I_L518_599 = 1 + $I_L518_599
  518.                      if ( $I_L518_599 >= $F_A109 ) exit
  518.                   enddo
  518.                   $I_L518_665 = 1 + $I_L518_665
  518.                   if ( $I_L518_665 >= $F_A108 ) exit
  518.                enddo
  518.             endif
  518.             t$784 = ( max( 0, nsol ) )
  518.             t$785 = ( max( 0, 1 + kmax ) )
  518.             t$789 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  518.             $F_A110 = ( 1 + kmax )
  518.             $F_A111 = nsol
  518.             if ( and( -$F_A111, -$F_A110 ) < 0 ) then
  518.                $I_L518_667 = 0
  518.                do
  518.                   $I_L518_601 = 0
  518. !dir$ ivdep
  518.                   do
  518.                      t$788(1 + $I_L518_601, 1 + $I_L518_667) = oa(1 + $I_L518_601, 1 + $I_L518_667)
  518.                      $I_L518_601 = 1 + $I_L518_601
  518.                      if ( $I_L518_601 >= $F_A111 ) exit
  518.                   enddo
  518.                   $I_L518_667 = 1 + $I_L518_667
  518.                   if ( $I_L518_667 >= $F_A110 ) exit
  518.                enddo
  518.             endif
  516.             $t_S23 = nsol
  520.             t$792 = ( max( 0, nsol ) )
  520.             t$793 = ( max( 0, 1 + kmax ) )
  520.             t$797 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  516.             $t_S22 = nsol
  521.             t$800 = ( max( 0, nsol ) )
  521.             t$801 = ( max( 0, 1 + kmax ) )
  521.             t$805 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  522.             t$808 = ( max( 0, nsol ) )
  522.             t$809 = ( max( 0, 1 + kmax ) )
  522.             t$813 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  522.             $F_A112 = ( 1 + kmax )
  522.             $F_A113 = nsol
  522.             if ( and( -$F_A113, -$F_A112 ) < 0 ) then
  522.                $I_L522_669 = 0
  522.                do
  522.                   $I_L522_603 = 0
  522. !dir$ ivdep
  522.                   do
  522.                      t$812(1 + $I_L522_603, 1 + $I_L522_669) = e0(1 + $I_L522_603, 1 + $I_L522_669)
  522.                      $I_L522_603 = 1 + $I_L522_603
  522.                      if ( $I_L522_603 >= $F_A113 ) exit
  522.                   enddo
  522.                   $I_L522_669 = 1 + $I_L522_669
  522.                   if ( $I_L522_669 >= $F_A112 ) exit
  522.                enddo
  522.             endif
  522.             t$816 = ( max( 0, nsol ) )
  522.             t$817 = ( max( 0, 1 + kmax ) )
  522.             t$821 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  522.             $F_A114 = ( 1 + kmax )
  522.             $F_A115 = nsol
  522.             if ( and( -$F_A115, -$F_A114 ) < 0 ) then
  522.                $I_L522_671 = 0
  522.                do
  522.                   $I_L522_605 = 0
  522. !dir$ ivdep
  522.                   do
  522.                      t$820(1 + $I_L522_605, 1 + $I_L522_671) = css(1 + $I_L522_605, 1 + $I_L522_671)
  522.                      $I_L522_605 = 1 + $I_L522_605
  522.                      if ( $I_L522_605 >= $F_A115 ) exit
  522.                   enddo
  522.                   $I_L522_671 = 1 + $I_L522_671
  522.                   if ( $I_L522_671 >= $F_A114 ) exit
  522.                enddo
  522.             endif
  523.             t$824 = ( max( 0, nsol ) )
  523.             t$825 = ( max( 0, 1 + kmax ) )
  523.             t$829 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  523.             $F_A116 = ( 1 + kmax )
  523.             $F_A117 = nsol
  523.             if ( and( -$F_A117, -$F_A116 ) < 0 ) then
  523.                $I_L523_673 = 0
  523.                do
  523.                   $I_L523_607 = 0
  523. !dir$ ivdep
  523.                   do
  523.                      t$828(1 + $I_L523_607, 1 + $I_L523_673) = frcice(1 + $I_L523_607, 1 + $I_L523_673)
  523.                      $I_L523_607 = 1 + $I_L523_607
  523.                      if ( $I_L523_607 >= $F_A117 ) exit
  523.                   enddo
  523.                   $I_L523_673 = 1 + $I_L523_673
  523.                   if ( $I_L523_673 >= $F_A116 ) exit
  523.                enddo
  523.             endif
  523.             t$832 = ( max( 0, nsol ) )
  523.             t$833 = ( max( 0, 1 + kmax ) )
  523.             t$837 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  523.             $F_A118 = ( 1 + kmax )
  523.             $F_A119 = nsol
  523.             if ( and( -$F_A119, -$F_A118 ) < 0 ) then
  523.                $I_L523_675 = 0
  523.                do
  523.                   $I_L523_609 = 0
  523. !dir$ ivdep
  523.                   do
  523.                      t$836(1 + $I_L523_609, 1 + $I_L523_675) = radliq(1 + $I_L523_609, 1 + $I_L523_675)
  523.                      $I_L523_609 = 1 + $I_L523_609
  523.                      if ( $I_L523_609 >= $F_A119 ) exit
  523.                   enddo
  523.                   $I_L523_675 = 1 + $I_L523_675
  523.                   if ( $I_L523_675 >= $F_A118 ) exit
  523.                enddo
  523.             endif
  523.             t$840 = ( max( 0, nsol ) )
  523.             t$841 = ( max( 0, 1 + kmax ) )
  523.             t$845 = int( _alloc( max( 0, max( 0, ( max( 0, 1 + kmax ) ) ) * max( 0, ( max( 0, nsol ) ) ) * 8 ) ), 8 )
  523.             $F_A120 = ( 1 + kmax )
  523.             $F_A121 = nsol
  523.             if ( and( -$F_A121, -$F_A120 ) < 0 ) then
  523.                $I_L523_677 = 0
  523.                do
  523.                   $I_L523_611 = 0
  523. !dir$ ivdep
  523.                   do
  523.                      t$844(1 + $I_L523_611, 1 + $I_L523_677) = radice(1 + $I_L523_611, 1 + $I_L523_677)
  523.                      $I_L523_611 = 1 + $I_L523_611
  523.                      if ( $I_L523_611 >= $F_A121 ) exit
  523.                   enddo
  523.                   $I_L523_677 = 1 + $I_L523_677
  523.                   if ( $I_L523_677 >= $F_A120 ) exit
  523.                enddo
  523.             endif
  516.             call cloudy( s0, t$756, nsol, t$757, t$764(1, 1), t$772(1, 1), t$780(1, 1), t$788(1, 1), cmu(1), rsurfv(1), agv(1), rsurfn(1), agn(1), dscld(1), sc(1), t$796(1, 1), rvbc(1), rvdc(1), rnbc(1), rndc(1), dsclr(1), sl(1), t$804(1, 1), rvbl(1), rvdl(1), rnbl(1), rndl(1), t$812(1, 1), t$820(1, 1), ps(1), dmask(1), t$828(1, 1), t$836(1, 1), t$844(1, 1), icld )
  523.             _free( t$845 )
  523.             _free( t$837 )
  523.             _free( t$829 )
  522.             _free( t$821 )
  522.             _free( t$813 )
  516.             $F_A122 = ( 1 + kmax )
  516.             $F_A123 = $t_S22
  516.             if ( and( -$F_A123, -$F_A122 ) < 0 ) then
  516.                $I_L516_679 = 0
  516.                do
  516.                   $I_L516_613 = 0
  516. !dir$ ivdep
  516.                   do
  516.                      aclr(1 + $I_L516_613, 1 + $I_L516_679) = t$804(1 + $I_L516_613, 1 + $I_L516_679)
  516.                      $I_L516_613 = 1 + $I_L516_613
  516.                      if ( $I_L516_613 >= $F_A123 ) exit
  516.                   enddo
  516.                   $I_L516_679 = 1 + $I_L516_679
  516.                   if ( $I_L516_679 >= $F_A122 ) exit
  516.                enddo
  516.             endif
  521.             _free( t$805 )
  516.             $F_A124 = ( 1 + kmax )
  516.             $F_A125 = $t_S23
  516.             if ( and( -$F_A125, -$F_A124 ) < 0 ) then
  516.                $I_L516_681 = 0
  516.                do
  516.                   $I_L516_615 = 0
  516. !dir$ ivdep
  516.                   do
  516.                      acld(1 + $I_L516_615, 1 + $I_L516_681) = t$796(1 + $I_L516_615, 1 + $I_L516_681)
  516.                      $I_L516_615 = 1 + $I_L516_615
  516.                      if ( $I_L516_615 >= $F_A125 ) exit
  516.                   enddo
  516.                   $I_L516_681 = 1 + $I_L516_681
  516.                   if ( $I_L516_681 >= $F_A124 ) exit
  516.                enddo
  516.             endif
  520.             _free( t$797 )
  518.             _free( t$789 )
  518.             _free( t$781 )
  518.             _free( t$773 )
  518.             _free( t$765 )
  530.             if ( nsol > 0 ) then
  532.                $I_L532_486 = 0
  532. !dir$ ivdep
  532.                do
  532.                   ssclr(litx(1 + $I_L532_486)) = sl(1 + $I_L532_486)
  533.                   dswclr(litx(1 + $I_L532_486)) = dsclr(1 + $I_L532_486)
  534.                   radvbl(litx(1 + $I_L532_486)) = rvbl(1 + $I_L532_486)
  535.                   radvdl(litx(1 + $I_L532_486)) = rvdl(1 + $I_L532_486)
  536.                   radnbl(litx(1 + $I_L532_486)) = rnbl(1 + $I_L532_486)
  532.                   $I_L532_486 = 1 + $I_L532_486
  532.                   if ( $I_L532_486 >= nsol ) exit
  532.                enddo
  537.                $I_L537_488 = 0
  537. !dir$ ivdep
  537.                do
  537.                   radndl(litx(1 + $I_L537_488)) = rndl(1 + $I_L537_488)
  540.                   ss(litx(1 + $I_L537_488)) = sc(1 + $I_L537_488)
  541.                   dswtop(litx(1 + $I_L537_488)) = dscld(1 + $I_L537_488)
  542.                   radvbc(litx(1 + $I_L537_488)) = rvbc(1 + $I_L537_488)
  543.                   radvdc(litx(1 + $I_L537_488)) = rvdc(1 + $I_L537_488)
  537.                   $I_L537_488 = 1 + $I_L537_488
  537.                   if ( $I_L537_488 >= nsol ) exit
  537.                enddo
  544.                $I_L544_490 = 0
  544. !dir$ ivdep
  544.                do
  544.                   radnbc(litx(1 + $I_L544_490)) = rnbc(1 + $I_L544_490)
  545.                   radndc(litx(1 + $I_L544_490)) = rndc(1 + $I_L544_490)
  544.                   $I_L544_490 = 1 + $I_L544_490
  544.                   if ( $I_L544_490 >= nsol ) exit
  544.                enddo
  544.             endif
  548.             if ( kmax > 0 ) then
  549.                if ( nsol > 0 ) then
  548.                   $I_L548_693 = 0
  548.                   do
  549.                      $I_L549_687 = 0
  549.                      if ( nsol >= 4 ) then
  549.                         $I_L549_698 = 0
  549. !dir$ blocking_size( 0, 0 )
  549.                         do
  548.                            $SCA_litx#1_U0 = litx(1 + 4 * $I_L549_698)
  548.                            $SCA_litx#2_U1 = litx(2 + 4 * $I_L549_698)
  548.                            $SCA_litx#3_U2 = litx(3 + 4 * $I_L549_698)
  548.                            $SCA_litx#4_U3 = litx(4 + 4 * $I_L549_698)
  548.                            $I_L548_492 = 0
  548. !dir$ ivdep
  548. !dir$ blocking_size( 256, 256 )
  548.                            do
  550.                               aslclr($SCA_litx#1_U0, $I_L548_492 + 256 * $I_L548_693 + 1) = aclr(1 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  551.                               asl($SCA_litx#1_U0, $I_L548_492 + 256 * $I_L548_693 + 1) = acld(1 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  550.                               aslclr($SCA_litx#2_U1, $I_L548_492 + 256 * $I_L548_693 + 1) = aclr(2 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  551.                               asl($SCA_litx#2_U1, $I_L548_492 + 256 * $I_L548_693 + 1) = acld(2 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  550.                               aslclr($SCA_litx#3_U2, $I_L548_492 + 256 * $I_L548_693 + 1) = aclr(3 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  551.                               asl($SCA_litx#3_U2, $I_L548_492 + 256 * $I_L548_693 + 1) = acld(3 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  550.                               aslclr($SCA_litx#4_U3, $I_L548_492 + 256 * $I_L548_693 + 1) = aclr(4 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  551.                               asl($SCA_litx#4_U3, $I_L548_492 + 256 * $I_L548_693 + 1) = acld(4 + 4 * $I_L549_698, $I_L548_492 + 256 * $I_L548_693 + 2)
  548.                               $I_L548_492 = 1 + $I_L548_492
  549.                               if ( $I_L548_492 >= min( kmax, 256 + 256 * $I_L548_693 ) + -256 * $I_L548_693 ) exit
  549.                            enddo
  552.                            $I_L549_698 = 1 + $I_L549_698
  552.                            if ( $I_L549_698 >= _rsh( nsol, 2 ) ) exit
  552.                         enddo
  552.                         $I_L549_687 = and( 0xfffffffffffffffcUL, nsol )
  552.                      endif
  549.                      if ( $I_L549_687 < nsol ) then
  549.                         $I_L549_695 = 0
  549. !dir$ blocking_size( 0, 0 )
  549.                         do
  548.                            $SCA_litx_I3 = litx($I_L549_687 + $I_L549_695 + 1)
  548.                            $I_L548_492 = 0
  548. !dir$ ivdep
  548. !dir$ blocking_size( 256, 256 )
  548.                            do
  550.                               aslclr($SCA_litx_I3, $I_L548_492 + 256 * $I_L548_693 + 1) = aclr($I_L549_687 + $I_L549_695 + 1, $I_L548_492 + 256 * $I_L548_693 + 2)
  551.                               asl($SCA_litx_I3, $I_L548_492 + 256 * $I_L548_693 + 1) = acld($I_L549_687 + $I_L549_695 + 1, $I_L548_492 + 256 * $I_L548_693 + 2)
  548.                               $I_L548_492 = 1 + $I_L548_492
  549.                               if ( $I_L548_492 >= min( kmax, 256 + 256 * $I_L548_693 ) + -256 * $I_L548_693 ) exit
  549.                            enddo
  552.                            $I_L549_695 = 1 + $I_L549_695
  552.                            if ( $I_L549_695 >= nsol + -$I_L549_687 ) exit
  552.                         enddo
  552.                      endif
  548.                      $I_L548_693 = 1 + $I_L548_693
  552.                      if ( $I_L548_693 >= 1 + max( 0, -1 + _rsh( 255 + kmax, 8 ) ) ) exit
  552.                   enddo
  552.                endif
  559.                if ( ncols > 0 ) then
  558.                   $I_L558_617 = 0
  558.                   do
  559.                      $I_L559_495 = 0
  559. !dir$ ivdep
  559.                      do
  560.                         if ( aslclr(1 + $I_L559_495, 1 + $I_L558_617) < 1.0e-22 ) then
  560.                            aslclr(1 + $I_L559_495, 1 + $I_L558_617) = 0.0
  560.                         endif
  561.                         if ( asl(1 + $I_L559_495, 1 + $I_L558_617) < 1.0e-22 ) then
  561.                            asl(1 + $I_L559_495, 1 + $I_L558_617) = 0.0
  561.                         endif
  563.                         aslclr(1 + $I_L559_495, 1 + $I_L558_617) = 1.1574e-5 * aslclr(1 + $I_L559_495, 1 + $I_L558_617)
  564.                         asl(1 + $I_L559_495, 1 + $I_L558_617) = 1.1574e-5 * asl(1 + $I_L559_495, 1 + $I_L558_617)
  565.                         $I_L559_495 = 1 + $I_L559_495
  561.                         if ( $I_L559_495 >= ncols ) exit
  561.                      enddo
  566.                      $I_L558_617 = 1 + $I_L558_617
  565.                      if ( $I_L558_617 >= kmax ) exit
  565.                   enddo
  565.                endif
  565.             endif
   67.             _free( t$118 )
   67.          else
  508.             $Unit_temp_O0 = nfprt
  508.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'error! icld must be 1 or 4 with Clirad-sw-m ', 0x800600000000L ) ) )
  509.              _substr(t$755,1,4) = ' '
  509.             call _stop(  _substr(t$755,1,1) )
  509.          endif
  509.       endif
  568.       return
  568.       end
  568.       
  623.       
  623.       subroutine cloudy( s0, rco2, m, np, pl, ta, wa, oa, cosz, rsuvbm, rsuvdf, rsirbm, rsirdf, dscld1, sc1, acld1, rvbc1, rvdc1, rnbc1, rndc1, dsclr1, sl1, aclr1, rvbl1, rvdl1, rnbl1, rndl1, tauc, csscgp, psc, dmask, fice, rel, rei, icld )
  623.       t$13 = m
  623.       t$14 = ( 1 + np )
  671.       t$229 = _zla( 0, m )
  623.       t$230 = _zla( 0, m )
  671.       t$231 = _zla( 0, ( 1 + np ) )
  623.       t$232 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
  623.       t$15 = np
  672.       t$233 = _zla( 0, np )
  623.       t$234 = _zla( 0, m ) * _zla( 0, np )
  687.       t$237 = _zla( 0, m ) * _zla( 0, np ) * 8
  687.       t$238 = _zla( 0, m ) * _zla( 0, np ) * 8
  687.       t$240 = _zla( 0, m ) * _zla( 0, np ) * 16
  623.       t$241 = _zla( 0, m ) * _zla( 0, np )
  623.       t$242 = _zla( 0, m ) * _zla( 0, np ) * 11
  685.       t$243 = _zla( 0, m ) * _zla( 0, np ) * 16
  685.       t$245 = _zla( 0, m ) * _zla( 0, np ) * 104
  687.       t$246 = _zla( 0, m ) * _zla( 0, np ) * 104
  687.       t$248 = _zla( 0, m ) * _zla( 0, np ) * 112
  687.       t$249 = _zla( 0, m ) * _zla( 0, np ) * 112
  687.       t$251 = _zla( 0, m ) * _zla( 0, np ) * 120
  689.       t$252 = _zla( 0, m ) * _zla( 0, np ) * 120
  689.       t$254 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120
  691.       t$255 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120
  691.       t$257 = _zla( 0, m ) * _zla( 0, np ) * 120 + 16 * _zla( 0, m )
  689.       t$258 = _zla( 0, m ) * _zla( 0, np ) * 120 + 16 * _zla( 0, m )
  689.       t$260 = _zla( 0, m ) * _zla( 0, np ) * 120 + 24 * _zla( 0, m )
  691.       t$261 = _zla( 0, m ) * _zla( 0, np ) * 120 + 24 * _zla( 0, m )
  691.       t$263 = _zla( 0, m ) * _zla( 0, np ) * 120 + 32 * _zla( 0, m )
  689.       t$264 = _zla( 0, m ) * _zla( 0, np ) * 120 + 32 * _zla( 0, m )
  689.       t$266 = _zla( 0, m ) * _zla( 0, np ) * 120 + 40 * _zla( 0, m )
  691.       t$267 = _zla( 0, m ) * _zla( 0, np ) * 120 + 40 * _zla( 0, m )
  691.       t$269 = _zla( 0, m ) * _zla( 0, np ) * 120 + 48 * _zla( 0, m )
  689.       t$270 = _zla( 0, m ) * _zla( 0, np ) * 120 + 48 * _zla( 0, m )
  689.       t$272 = _zla( 0, m ) * _zla( 0, np ) * 120 + 56 * _zla( 0, m )
  691.       t$273 = _zla( 0, m ) * _zla( 0, np ) * 120 + 56 * _zla( 0, m )
  691.       t$275 = _zla( 0, m ) * _zla( 0, np ) * 120 + 64 * _zla( 0, m )
  689.       t$276 = _zla( 0, m ) * _zla( 0, np ) * 120 + 64 * _zla( 0, m )
  689.       t$278 = _zla( 0, m ) * _zla( 0, np ) * 120 + 72 * _zla( 0, m )
  691.       t$279 = _zla( 0, m ) * _zla( 0, np ) * 120 + 72 * _zla( 0, m )
  691.       t$281 = _zla( 0, m ) * _zla( 0, np ) * 120 + 80 * _zla( 0, m )
  689.       t$282 = _zla( 0, m ) * _zla( 0, np ) * 120 + 80 * _zla( 0, m )
  689.       t$284 = _zla( 0, m ) * _zla( 0, np ) * 120 + 88 * _zla( 0, m )
  691.       t$285 = _zla( 0, m ) * _zla( 0, np ) * 120 + 88 * _zla( 0, m )
  691.       t$287 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m )
  688.       t$288 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m )
  688.       t$290 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m )
  688.       t$291 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8
  688.       t$293 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
  688.       t$294 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16 + _zla( 0, m ) * _zla( 0, np ) * 120
  688.       t$296 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
  688.       t$297 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24 + _zla( 0, m ) * _zla( 0, np ) * 120
  688.       t$299 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32
  688.       t$300 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32 + _zla( 0, m ) * _zla( 0, np ) * 120
  688.       t$302 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40
  688.       t$303 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40 + _zla( 0, m ) * _zla( 0, np ) * 120
  688.       t$305 = _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48
  696.       t$306 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 120
  696.       t$308 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 128
  623.       t$309 = _zla( 0, m ) * _zla( 0, np ) * 3
  686.       t$310 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 128 + 96 * _zla( 0, m )
  686.       t$312 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 152
  685.       t$313 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 152 + 96 * _zla( 0, m )
  685.       t$315 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 240
  685.       t$316 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 240 + 96 * _zla( 0, m )
  685.       t$318 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 328
  686.       t$319 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 328 + 96 * _zla( 0, m )
  686.       t$321 = 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 352
  696.       t$322 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 352 + 96 * _zla( 0, m )
  696.       t$324 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 352 + 104 * _zla( 0, m )
  623.       t$235 = int( _alloc( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 352 + 104 * _zla( 0, m ) ), 8 )
  687.       t$236 = t$235
  687.       t$239 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 8
  685.       t$244 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 16
  687.       t$247 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 104
  687.       t$250 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 112
  689.       t$253 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120
  691.       t$256 = t$235 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120
  689.       t$259 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 16 * _zla( 0, m )
  691.       t$262 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 24 * _zla( 0, m )
  689.       t$265 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 32 * _zla( 0, m )
  691.       t$268 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 40 * _zla( 0, m )
  689.       t$271 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 48 * _zla( 0, m )
  691.       t$274 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 56 * _zla( 0, m )
  689.       t$277 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 64 * _zla( 0, m )
  691.       t$280 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 72 * _zla( 0, m )
  689.       t$283 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 80 * _zla( 0, m )
  691.       t$286 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 88 * _zla( 0, m )
  688.       t$289 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m )
  688.       t$292 = t$235 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m )
  688.       t$295 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
  688.       t$298 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
  688.       t$301 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32
  688.       t$304 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40
  696.       t$307 = t$235 + _zla( 0, m ) * _zla( 0, np ) * 120 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48
  686.       t$311 = t$235 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 128
  685.       t$314 = t$235 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 152
  685.       t$317 = t$235 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 240
  686.       t$320 = t$235 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 328
  696.       t$323 = t$235 + 96 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + _zla( 0, m ) * _zla( 0, np ) * 352
  702.       $F_A33 = m
  702.       if ( m > 0 ) then
  702.          $I_L702_205 = 0
  702. !dir$ ivdep
  702.          do
  702.             dscld1(1 + $I_L702_205) = 0.0
  702.             $I_L702_205 = 1 + $I_L702_205
  702.             if ( $I_L702_205 >= $F_A33 ) exit
  702.          enddo
  702.       endif
  703.       $F_A34 = m
  703.       if ( m > 0 ) then
  703.          $I_L703_207 = 0
  703. !dir$ ivdep
  703.          do
  703.             sc1(1 + $I_L703_207) = 0.0
  703.             $I_L703_207 = 1 + $I_L703_207
  703.             if ( $I_L703_207 >= $F_A34 ) exit
  703.          enddo
  703.       endif
  704.       $F_A35 = m
  704.       if ( m > 0 ) then
  704.          $I_L704_209 = 0
  704. !dir$ ivdep
  704.          do
  704.             rvbc1(1 + $I_L704_209) = 0.0
  704.             $I_L704_209 = 1 + $I_L704_209
  704.             if ( $I_L704_209 >= $F_A35 ) exit
  704.          enddo
  704.       endif
  705.       $F_A36 = m
  705.       if ( m > 0 ) then
  705.          $I_L705_211 = 0
  705. !dir$ ivdep
  705.          do
  705.             rvdc1(1 + $I_L705_211) = 0.0
  705.             $I_L705_211 = 1 + $I_L705_211
  705.             if ( $I_L705_211 >= $F_A36 ) exit
  705.          enddo
  705.       endif
  706.       $F_A37 = m
  706.       if ( m > 0 ) then
  706.          $I_L706_213 = 0
  706. !dir$ ivdep
  706.          do
  706.             rnbc1(1 + $I_L706_213) = 0.0
  706.             $I_L706_213 = 1 + $I_L706_213
  706.             if ( $I_L706_213 >= $F_A37 ) exit
  706.          enddo
  706.       endif
  707.       $F_A38 = m
  707.       if ( m > 0 ) then
  707.          $I_L707_215 = 0
  707. !dir$ ivdep
  707.          do
  707.             rndc1(1 + $I_L707_215) = 0.0
  707.             $I_L707_215 = 1 + $I_L707_215
  707.             if ( $I_L707_215 >= $F_A38 ) exit
  707.          enddo
  707.       endif
  710.       $F_A39 = m
  710.       if ( m > 0 ) then
  710.          $I_L710_217 = 0
  710. !dir$ ivdep
  710.          do
  710.             dsclr1(1 + $I_L710_217) = 0.0
  710.             $I_L710_217 = 1 + $I_L710_217
  710.             if ( $I_L710_217 >= $F_A39 ) exit
  710.          enddo
  710.       endif
  711.       $F_A40 = m
  711.       if ( m > 0 ) then
  711.          $I_L711_219 = 0
  711. !dir$ ivdep
  711.          do
  711.             sl1(1 + $I_L711_219) = 0.0
  711.             $I_L711_219 = 1 + $I_L711_219
  711.             if ( $I_L711_219 >= $F_A40 ) exit
  711.          enddo
  711.       endif
  712.       $F_A41 = m
  712.       if ( m > 0 ) then
  712.          $I_L712_221 = 0
  712. !dir$ ivdep
  712.          do
  712.             rvbl1(1 + $I_L712_221) = 0.0
  712.             $I_L712_221 = 1 + $I_L712_221
  712.             if ( $I_L712_221 >= $F_A41 ) exit
  712.          enddo
  712.       endif
  713.       $F_A42 = m
  713.       if ( m > 0 ) then
  713.          $I_L713_223 = 0
  713. !dir$ ivdep
  713.          do
  713.             rvdl1(1 + $I_L713_223) = 0.0
  713.             $I_L713_223 = 1 + $I_L713_223
  713.             if ( $I_L713_223 >= $F_A42 ) exit
  713.          enddo
  713.       endif
  714.       $F_A43 = m
  714.       if ( m > 0 ) then
  714.          $I_L714_225 = 0
  714. !dir$ ivdep
  714.          do
  714.             rnbl1(1 + $I_L714_225) = 0.0
  714.             $I_L714_225 = 1 + $I_L714_225
  714.             if ( $I_L714_225 >= $F_A43 ) exit
  714.          enddo
  714.       endif
  715.       $F_A44 = m
  715.       if ( m > 0 ) then
  715.          $I_L715_227 = 0
  715. !dir$ ivdep
  715.          do
  715.             rndl1(1 + $I_L715_227) = 0.0
  715.             $I_L715_227 = 1 + $I_L715_227
  715.             if ( $I_L715_227 >= $F_A44 ) exit
  715.          enddo
  715.       endif
  708.       $F_A45 = np
  708.       $F_A46 = m
  708.       if ( and( -$F_A46, -$F_A45 ) < 0 ) then
  708.          $I_L708_247 = 0
  708.          do
  708.             $I_L708_229 = 0
  708. !dir$ ivdep
  708.             do
  708.                acld1(1 + $I_L708_229, 1 + $I_L708_247) = 0.0
  708.                $I_L708_229 = 1 + $I_L708_229
  708.                if ( $I_L708_229 >= $F_A46 ) exit
  708.             enddo
  708.             $I_L708_247 = 1 + $I_L708_247
  708.             if ( $I_L708_247 >= $F_A45 ) exit
  708.          enddo
  708.       endif
  716.       $F_A47 = np
  716.       $F_A48 = m
  716.       if ( and( -$F_A48, -$F_A47 ) < 0 ) then
  716.          $I_L716_249 = 0
  716.          do
  716.             $I_L716_231 = 0
  716. !dir$ ivdep
  716.             do
  716.                aclr1(1 + $I_L716_231, 1 + $I_L716_249) = 0.0
  716.                $I_L716_231 = 1 + $I_L716_231
  716.                if ( $I_L716_231 >= $F_A48 ) exit
  716.             enddo
  716.             $I_L716_249 = 1 + $I_L716_249
  716.             if ( $I_L716_249 >= $F_A47 ) exit
  716.          enddo
  716.       endif
  725.       if ( np > 0 ) then
  726.          $SC_psc_I0 = psc(1)
  725.          $I_L725_184 = 0
  725. !dir$ ivdep
  725.          do
  726.             if ( ( pl(1, 1 + $I_L725_184) * 1.0/$SC_psc_I0 ) <= 4.0000000000000002e-1 ) then
  726.                if ( ( pl(1, 2 + $I_L725_184) * 1.0/$SC_psc_I0 ) > 4.0000000000000002e-1 ) then
  726.                   ict = ( 1 + $I_L725_184 )
  726.                endif
  726.             endif
  727.             if ( ( pl(1, 1 + $I_L725_184) * 1.0/$SC_psc_I0 ) <= 6.9999999999999996e-1 ) then
  727.                if ( ( pl(1, 2 + $I_L725_184) * 1.0/$SC_psc_I0 ) > 6.9999999999999996e-1 ) then
  727.                   icb = ( 1 + $I_L725_184 )
  727.                endif
  727.             endif
  728.             $I_L725_184 = 1 + $I_L725_184
  727.             if ( $I_L725_184 >= np ) exit
  727.          enddo
  727.       endif
  737.       if ( icld == 1 ) then
  738.          if ( np > 0 ) then
  739.             if ( m > 0 ) then
  738.                $I_L738_239 = 0
  738.                do
  739.                   $I_L739_188 = 0
  739. !dir$ ivdep
  739.                   do
  740.                      taucld(1 + $I_L739_188, 1 + $I_L738_239, 1) = 0.0
  741.                      taucld(1 + $I_L739_188, 1 + $I_L738_239, 2) = tauc(1 + $I_L739_188, 1 + $I_L738_239)
  742.                      reff(1 + $I_L739_188, 1 + $I_L738_239, 1) = 80.0
  743.                      reff(1 + $I_L739_188, 1 + $I_L738_239, 2) = 5.25
  744.                      $I_L739_188 = 1 + $I_L739_188
  739.                      if ( $I_L739_188 >= m ) exit
  739.                   enddo
  745.                   $I_L738_239 = 1 + $I_L738_239
  744.                   if ( $I_L738_239 >= np ) exit
  744.                enddo
  744.             endif
  744.          endif
  744.          goto 10
  746.       else if ( icld == 4 ) then
  747.          if ( np > 0 ) then
  748.             if ( m > 0 ) then
  747.                $I_L747_237 = 0
  747.                do
  748.                   $I_L748_186 = 0
  748. !dir$ ivdep
  748.                   do
  749.                      taucld(1 + $I_L748_186, 1 + $I_L747_237, 1) = tauc(1 + $I_L748_186, 1 + $I_L747_237) * fice(1 + $I_L748_186, 1 + $I_L747_237)
  750.                      taucld(1 + $I_L748_186, 1 + $I_L747_237, 2) = tauc(1 + $I_L748_186, 1 + $I_L747_237) * ( 1.0 + -fice(1 + $I_L748_186, 1 + $I_L747_237) )
  751.                      reff(1 + $I_L748_186, 1 + $I_L747_237, 1) = rei(1 + $I_L748_186, 1 + $I_L747_237)
  752.                      reff(1 + $I_L748_186, 1 + $I_L747_237, 2) = rel(1 + $I_L748_186, 1 + $I_L747_237)
  753.                      $I_L748_186 = 1 + $I_L748_186
  748.                      if ( $I_L748_186 >= m ) exit
  748.                   enddo
  754.                   $I_L747_237 = 1 + $I_L747_237
  753.                   if ( $I_L747_237 >= np ) exit
  753.                enddo
  753.             endif
  753.          endif
  753.    10    continue
  759.          if ( np > 0 ) then
  760.             if ( m > 0 ) then
  759.                $I_L759_241 = 0
  759.                do
  760.                   $I_L760_190 = 0
  760. !dir$ ivdep
  760.                   do
  761.                      taucld(1 + $I_L760_190, 1 + $I_L759_241, 3) = 0.0
  762.                      reff(1 + $I_L760_190, 1 + $I_L759_241, 3) = 0.0
  763.                      fcld(1 + $I_L760_190, 1 + $I_L759_241) = csscgp(1 + $I_L760_190, 1 + $I_L759_241)
  764.                      $I_L760_190 = 1 + $I_L760_190
  760.                      if ( $I_L760_190 >= m ) exit
  760.                   enddo
  765.                   $I_L759_241 = 1 + $I_L759_241
  764.                   if ( $I_L759_241 >= np ) exit
  764.                enddo
  764.             endif
  764.          endif
  770.          if ( m > 0 ) then
  771.             if ( np > 0 ) then
  770.                $I_L770_260 = 0
  770.                do
  771.                   $I_L771_253 = 0
  771.                   if ( np >= 4 ) then
  771.                      $I_L771_279 = 0
  771. !dir$ blocking_size( 0, 0 )
  771.                      do
  770.                         $I_L770_192 = 0
  770. !dir$ ivdep
  770. !dir$ blocking_size( 512, 512 )
  770.                         do
  772.                            dzint($I_L770_192 + 512 * $I_L770_260 + 1, 1 + 4 * $I_L771_279) = ta($I_L770_192 + 512 * $I_L770_260 + 1, 1 + 4 * $I_L771_279) * ( log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 2 + 4 * $I_L771_279) ) + -log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 1 + 4 * $I_L771_279) ) ) * 6.6033900000000006e-2
  772.                            dzint($I_L770_192 + 512 * $I_L770_260 + 1, 2 + 4 * $I_L771_279) = ta($I_L770_192 + 512 * $I_L770_260 + 1, 2 + 4 * $I_L771_279) * ( log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 3 + 4 * $I_L771_279) ) + -log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 2 + 4 * $I_L771_279) ) ) * 6.6033900000000006e-2
  772.                            dzint($I_L770_192 + 512 * $I_L770_260 + 1, 3 + 4 * $I_L771_279) = ta($I_L770_192 + 512 * $I_L770_260 + 1, 3 + 4 * $I_L771_279) * ( log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 4 + 4 * $I_L771_279) ) + -log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 3 + 4 * $I_L771_279) ) ) * 6.6033900000000006e-2
  772.                            dzint($I_L770_192 + 512 * $I_L770_260 + 1, 4 + 4 * $I_L771_279) = ta($I_L770_192 + 512 * $I_L770_260 + 1, 4 + 4 * $I_L771_279) * ( log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 5 + 4 * $I_L771_279) ) + -log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, 4 + 4 * $I_L771_279) ) ) * 6.6033900000000006e-2
  770.                            $I_L770_192 = 1 + $I_L770_192
  771.                            if ( $I_L770_192 >= min( m, 512 + 512 * $I_L770_260 ) + -512 * $I_L770_260 ) exit
  771.                         enddo
  773.                         $I_L771_279 = 1 + $I_L771_279
  773.                         if ( $I_L771_279 >= _rsh( np, 2 ) ) exit
  773.                      enddo
  773.                      $I_L771_253 = and( 0xfffffffffffffffcUL, np )
  773.                   endif
  771.                   if ( $I_L771_253 < np ) then
  771.                      $I_L771_273 = 0
  771. !dir$ blocking_size( 0, 0 )
  771.                      do
  770.                         $I_L770_192 = 0
  770. !dir$ ivdep
  770. !dir$ blocking_size( 512, 512 )
  770.                         do
  772.                            dzint($I_L770_192 + 512 * $I_L770_260 + 1, $I_L771_253 + $I_L771_273 + 1) = ta($I_L770_192 + 512 * $I_L770_260 + 1, $I_L771_253 + $I_L771_273 + 1) * ( log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, $I_L771_253 + $I_L771_273 + 2) ) + -log10( pl($I_L770_192 + 512 * $I_L770_260 + 1, $I_L771_253 + $I_L771_273 + 1) ) ) * 6.6033900000000006e-2
  770.                            $I_L770_192 = 1 + $I_L770_192
  771.                            if ( $I_L770_192 >= min( m, 512 + 512 * $I_L770_260 ) + -512 * $I_L770_260 ) exit
  771.                         enddo
  773.                         $I_L771_273 = 1 + $I_L771_273
  773.                         if ( $I_L771_273 >= np + -$I_L771_253 ) exit
  773.                      enddo
  773.                   endif
  770.                   $I_L770_260 = 1 + $I_L770_260
  773.                   if ( $I_L770_260 >= 1 + max( 0, -1 + _rsh( 511 + m, 9 ) ) ) exit
  773.                enddo
  773.             endif
  773.          endif
  784.          $F_A49 = np
  784.          $F_A50 = m
  784.          if ( and( -$F_A50, -$F_A49 ) < 0 ) then
  784.             $I_L784_251 = 0
  784.             do
  784.                $I_L784_233 = 0
  784. !dir$ ivdep
  784.                do
  784.                   hzmask(1 + $I_L784_233, 1 + $I_L784_251) = 0.0
  784.                   $I_L784_233 = 1 + $I_L784_233
  784.                   if ( $I_L784_233 >= $F_A50 ) exit
  784.                enddo
  784.                $I_L784_251 = 1 + $I_L784_251
  784.                if ( $I_L784_251 >= $F_A49 ) exit
  784.             enddo
  784.          endif
  785.          if ( m > 0 ) then
  785.             $I_L785_243 = 0
  785.             do
  786.                $k_S10 = 1 + np
  790.                $SC_topa_I1 = 0.0
  788.                do
  789.                   $k_S10 = -1 + $k_S10
  790.                   $SC_topa_I1 = $SC_topa_I1 + dzint(1 + $I_L785_243, $k_S10)
  790.                   if ( $SC_topa_I1 >= 2.0 ) exit
  790.                enddo
  792.                $F_A51 = ( np + -$k_S10 + 1 )
  792.                if ( np + -$k_S10 >= 0 ) then
  792.                   $I_L792_235 = 0
  792. !dir$ ivdep
  792.                   do
  792.                      hzmask(1 + $I_L785_243, $k_S10 + $I_L792_235) = 1.0
  792.                      $I_L792_235 = 1 + $I_L792_235
  792.                      if ( $I_L792_235 >= $F_A51 ) exit
  792.                   enddo
  792.                endif
  793.                $I_L785_243 = 1 + $I_L785_243
  791.                if ( $I_L785_243 >= m ) exit
  791.             enddo
  791.          endif
  808.          if ( np > 0 ) then
  809.             if ( m > 0 ) then
  808.                $I_L808_245 = 0
  808.                do
  809.                   $I_L809_195 = 0
  809. !dir$ ivdep
  809.                   do
  810.                      aotb_c(1 + $I_L809_195, 1 + $I_L808_245) = asolc * dzint(1 + $I_L809_195, 1 + $I_L808_245) * hzmask(1 + $I_L809_195, 1 + $I_L808_245) * 5.0e-1
  811.                      aotb_m(1 + $I_L809_195, 1 + $I_L808_245) = asolm * dzint(1 + $I_L809_195, 1 + $I_L808_245) * hzmask(1 + $I_L809_195, 1 + $I_L808_245) * 5.0e-1
  815.                      $I_L809_195 = 1 + $I_L809_195
  809.                      if ( $I_L809_195 >= m ) exit
  809.                   enddo
  816.                   $I_L808_245 = 1 + $I_L808_245
  815.                   if ( $I_L808_245 >= np ) exit
  815.                enddo
  822.                $I_L822_271 = 0
  822.                do
  823.                   $I_L823_269 = 0
  823.                   do
  824.                      $I_L824_267 = 0
  824.                      do
  822.                         $I_L822_262 = 0
  822. !dir$ shortloop16
  822. !dir$ ivdep
  822. !dir$ blocking_size( 4, 4 )
  822.                         do
  823.                            $I_L823_255 = 0
  823. !dir$ shortloop16
  823. !dir$ blocking_size( 2, 2 )
  823.                            do
  824.                               $I_L824_197 = 0
  824. !dir$ unroll 2
  824. !dir$ blocking_size( 256, 256 )
  824.                               do
  825.                                  if ( dmask($I_L824_197 + 256 * $I_L824_267 + 1) <= 0 ) then
  824.                                     goto 20
  825.                                  else if ( dmask($I_L824_197 + 256 * $I_L824_267 + 1) <= 12 ) then
  827.                                     taual($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1, $I_L823_255 + 2 * $I_L823_269 + 1) = tau_c($I_L823_255 + 2 * $I_L823_269 + 1) * aotb_c($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1) * hzmask($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1)
  828.                                     ssaal($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1, $I_L823_255 + 2 * $I_L823_269 + 1) = ssa_c($I_L823_255 + 2 * $I_L823_269 + 1)
  829.                                     asyal($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1, $I_L823_255 + 2 * $I_L823_269 + 1) = asym_c($I_L823_255 + 2 * $I_L823_269 + 1)
  829.                                  else
  829.    20                               continue
  832.                                     taual($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1, $I_L823_255 + 2 * $I_L823_269 + 1) = tau_m($I_L823_255 + 2 * $I_L823_269 + 1) * aotb_m($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1) * hzmask($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1)
  833.                                     ssaal($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1, $I_L823_255 + 2 * $I_L823_269 + 1) = ssa_m($I_L823_255 + 2 * $I_L823_269 + 1)
  834.                                     asyal($I_L824_197 + 256 * $I_L824_267 + 1, $I_L822_262 + 4 * $I_L822_271 + 1, $I_L823_255 + 2 * $I_L823_269 + 1) = asym_m($I_L823_255 + 2 * $I_L823_269 + 1)
  834.                                  endif
  824.                                  $I_L824_197 = 1 + $I_L824_197
  835.                                  if ( $I_L824_197 >= min( m, 256 + 256 * $I_L824_267 ) + -256 * $I_L824_267 ) exit
  835.                               enddo
  823.                               $I_L823_255 = 1 + $I_L823_255
  823.                               if ( $I_L823_255 >= cvmg( 2, 1, $I_L823_269 < 5 ) ) exit
  823.                            enddo
  822.                            $I_L822_262 = 1 + $I_L822_262
  836.                            if ( $I_L822_262 >= min( np, 4 + 4 * $I_L822_271 ) + -4 * $I_L822_271 ) exit
  836.                         enddo
  824.                         $I_L824_267 = 1 + $I_L824_267
  824.                         if ( $I_L824_267 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
  824.                      enddo
  823.                      $I_L823_269 = 1 + $I_L823_269
  837.                      if ( $I_L823_269 >= 6 ) exit
  837.                   enddo
  822.                   $I_L822_271 = 1 + $I_L822_271
  822.                   if ( $I_L822_271 >= 1 + max( 0, -1 + _rsh( 3 + np, 2 ) ) ) exit
  822.                enddo
  822.             endif
  822.          endif
  842.          call soradcld( m, np, pl(1, 1), ta(1, 1), wa(1, 1), oa(1, 1), rco2, taucld(1, 1, 1), reff(1, 1, 1), fcld(1, 1), ict, icb, taual(1, 1, 1), ssaal(1, 1, 1), asyal(1, 1, 1), cosz(1), rsuvbm(1), rsuvdf(1), rsirbm(1), rsirdf(1), flx(1, 1), flc(1, 1), fdiruv(1), fdifuv(1), fdirpar(1), fdifpar(1), fdirir(1), fdifir(1), fdiruv_c(1), fdifuv_c(1), fdirpar_c(1), fdifpar_c(1), fdirir_c(1), fdifir_c(1), flx_d(1, 1), flx_u(1, 1), flc_d(1, 1), flc_u(1, 1) )
  853.          if ( m > 0 ) then
  853.             $I_L853_200 = 0
  853. !dir$ ivdep
  853.             do
  854.                dscld1(1 + $I_L853_200) = flx(1 + $I_L853_200, 1) * s0 * cosz(1 + $I_L853_200)
  855.                sc1(1 + $I_L853_200) = flx(1 + $I_L853_200, 1 + np) * s0 * cosz(1 + $I_L853_200)
  856.                rvbc1(1 + $I_L853_200) = ( fdiruv(1 + $I_L853_200) + fdirpar(1 + $I_L853_200) ) * s0 * cosz(1 + $I_L853_200)
  857.                rvdc1(1 + $I_L853_200) = ( fdifuv(1 + $I_L853_200) + fdifpar(1 + $I_L853_200) ) * s0 * cosz(1 + $I_L853_200)
  858.                rnbc1(1 + $I_L853_200) = fdirir(1 + $I_L853_200) * s0 * cosz(1 + $I_L853_200)
  859.                rndc1(1 + $I_L853_200) = fdifir(1 + $I_L853_200) * s0 * cosz(1 + $I_L853_200)
  861.                dsclr1(1 + $I_L853_200) = flc(1 + $I_L853_200, 1) * s0 * cosz(1 + $I_L853_200)
  862.                sl1(1 + $I_L853_200) = flc(1 + $I_L853_200, 1 + np) * s0 * cosz(1 + $I_L853_200)
  863.                rvbl1(1 + $I_L853_200) = ( fdiruv_c(1 + $I_L853_200) + fdirpar_c(1 + $I_L853_200) ) * s0 * cosz(1 + $I_L853_200)
  864.                rvdl1(1 + $I_L853_200) = ( fdifuv_c(1 + $I_L853_200) + fdifpar_c(1 + $I_L853_200) ) * s0 * cosz(1 + $I_L853_200)
  865.                rnbl1(1 + $I_L853_200) = fdirir_c(1 + $I_L853_200) * s0 * cosz(1 + $I_L853_200)
  866.                rndl1(1 + $I_L853_200) = fdifir_c(1 + $I_L853_200) * s0 * cosz(1 + $I_L853_200)
  867.                $I_L853_200 = 1 + $I_L853_200
  853.                if ( $I_L853_200 >= m ) exit
  853.             enddo
  853.          endif
  872.          if ( np > 0 ) then
  873.             if ( m > 0 ) then
  873.                $I_L873_265 = 0
  873.                do
  872.                   $I_L872_258 = 0
  872.                   if ( np >= 4 ) then
  872.                      $I_L872_281 = 0
  872. !dir$ blocking_size( 0, 0 )
  872.                      do
  873.                         $I_L873_202 = 0
  873. !dir$ ivdep
  873. !dir$ blocking_size( 256, 256 )
  873.                         do
  874.                            $heat_S19 = ( cosz($I_L873_202 + 256 * $I_L873_265 + 1) * s0 * 1.0/( pl($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) + -pl($I_L873_202 + 256 * $I_L873_265 + 1, 1 + 4 * $I_L872_281) ) * 8.4410000000000007 )
  875.                            aclr1($I_L873_202 + 256 * $I_L873_265 + 1, 1 + 4 * $I_L872_281) = ( flc($I_L873_202 + 256 * $I_L873_265 + 1, 1 + 4 * $I_L872_281) + -flc($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) ) * $heat_S19
  876.                            acld1($I_L873_202 + 256 * $I_L873_265 + 1, 1 + 4 * $I_L872_281) = ( flx($I_L873_202 + 256 * $I_L873_265 + 1, 1 + 4 * $I_L872_281) + -flx($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) ) * $heat_S19
  874.                            $heat_S19 = ( cosz($I_L873_202 + 256 * $I_L873_265 + 1) * s0 * 1.0/( pl($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) + -pl($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) ) * 8.4410000000000007 )
  875.                            aclr1($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) = ( flc($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) + -flc($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) ) * $heat_S19
  876.                            acld1($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) = ( flx($I_L873_202 + 256 * $I_L873_265 + 1, 2 + 4 * $I_L872_281) + -flx($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) ) * $heat_S19
  874.                            $heat_S19 = ( cosz($I_L873_202 + 256 * $I_L873_265 + 1) * s0 * 1.0/( pl($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) + -pl($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) ) * 8.4410000000000007 )
  875.                            aclr1($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) = ( flc($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) + -flc($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) ) * $heat_S19
  876.                            acld1($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) = ( flx($I_L873_202 + 256 * $I_L873_265 + 1, 3 + 4 * $I_L872_281) + -flx($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) ) * $heat_S19
  874.                            $heat_S19 = ( cosz($I_L873_202 + 256 * $I_L873_265 + 1) * s0 * 1.0/( pl($I_L873_202 + 256 * $I_L873_265 + 1, 5 + 4 * $I_L872_281) + -pl($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) ) * 8.4410000000000007 )
  875.                            aclr1($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) = ( flc($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) + -flc($I_L873_202 + 256 * $I_L873_265 + 1, 5 + 4 * $I_L872_281) ) * $heat_S19
  876.                            acld1($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) = ( flx($I_L873_202 + 256 * $I_L873_265 + 1, 4 + 4 * $I_L872_281) + -flx($I_L873_202 + 256 * $I_L873_265 + 1, 5 + 4 * $I_L872_281) ) * $heat_S19
  873.                            $I_L873_202 = 1 + $I_L873_202
  873.                            if ( $I_L873_202 >= min( m, 256 + 256 * $I_L873_265 ) + -256 * $I_L873_265 ) exit
  873.                         enddo
  878.                         $I_L872_281 = 1 + $I_L872_281
  878.                         if ( $I_L872_281 >= _rsh( np, 2 ) ) exit
  878.                      enddo
  878.                      $I_L872_258 = and( 0xfffffffffffffffcUL, np )
  878.                   endif
  872.                   if ( $I_L872_258 < np ) then
  872.                      $I_L872_276 = 0
  872. !dir$ blocking_size( 0, 0 )
  872.                      do
  873.                         $I_L873_202 = 0
  873. !dir$ ivdep
  873. !dir$ blocking_size( 256, 256 )
  873.                         do
  874.                            $heat_S19 = ( cosz($I_L873_202 + 256 * $I_L873_265 + 1) * s0 * 1.0/( pl($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 2) + -pl($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 1) ) * 8.4410000000000007 )
  875.                            aclr1($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 1) = ( flc($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 1) + -flc($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 2) ) * $heat_S19
  876.                            acld1($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 1) = ( flx($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 1) + -flx($I_L873_202 + 256 * $I_L873_265 + 1, $I_L872_258 + $I_L872_276 + 2) ) * $heat_S19
  873.                            $I_L873_202 = 1 + $I_L873_202
  873.                            if ( $I_L873_202 >= min( m, 256 + 256 * $I_L873_265 ) + -256 * $I_L873_265 ) exit
  873.                         enddo
  878.                         $I_L872_276 = 1 + $I_L872_276
  878.                         if ( $I_L872_276 >= np + -$I_L872_258 ) exit
  878.                      enddo
  878.                   endif
  873.                   $I_L873_265 = 1 + $I_L873_265
  877.                   if ( $I_L873_265 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
  877.                enddo
  877.             endif
  877.          endif
  623.          _free( t$235 )
  623.       else
  756.          $Unit_temp_O0 = nfprt
  756.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'error! icld must be 1 or 4 with Clirad-sw-m ', 0x800600000000L ) ) )
  757.           _substr(t$899,1,4) = ' '
  757.          call _stop(  _substr(t$899,1,1) )
  757.       endif
  880.       return
  880.       end
  880.       
 1016.       
 1016.       subroutine soradcld( m, np, pl, ta, wa, oa, co2, taucld, reff, fcld, ict, icb, taual, ssaal, asyal, cosz, rsuvbm, rsuvdf, rsirbm, rsirdf, flx, flc, fdiruv, fdifuv, fdirpar, fdifpar, fdirir, fdifir, fdiruv_c, fdifuv_c, fdirpar_c, fdifpar_c, fdirir_c, fdifir_c, flx_d, flx_u, flc_d, flc_u )
 1016.       t$20 = m
 1016.       t$22 = ( 1 + np )
 1047.       t$325 = _zla( 0, m )
 1016.       t$326 = _zla( 0, m )
 1047.       t$327 = _zla( 0, ( 1 + np ) )
 1016.       t$328 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 1016.       t$21 = np
 1048.       t$329 = _zla( 0, np )
 1016.       t$330 = _zla( 0, m ) * _zla( 0, np )
 1016.       t$331 = _zla( 0, m ) * _zla( 0, np )
 1016.       t$332 = _zla( 0, m ) * _zla( 0, np ) * 3
 1016.       t$333 = _zla( 0, m ) * _zla( 0, np ) * 11
 1062.       t$336 = 8 * _zla( 0, m )
 1064.       t$337 = 8 * _zla( 0, m )
 1064.       t$339 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8
 1063.       t$340 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8
 1063.       t$342 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8
 1059.       t$344 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m )
 1063.       t$345 = 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 )
 1063.       t$347 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 )
 1063.       t$348 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 )
 1063.       t$350 = 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1062.       t$351 = 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1062.       t$353 = 8 * _zla( 0, m ) + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1064.       t$354 = 8 * _zla( 0, m ) + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1064.       t$356 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1064.       t$357 = 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 )
 1064.       t$359 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 )
 1064.       t$360 = 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 )
 1064.       t$362 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 )
 1063.       t$363 = 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 )
 1063.       t$365 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 )
 1016.       t$334 = int( _alloc( _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 1062.       t$335 = t$334
 1064.       t$338 = t$334 + 8 * _zla( 0, m )
 1063.       t$341 = t$334 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8
 1059.       t$343 = t$334 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8
 1063.       t$346 = t$334 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 )
 1063.       t$349 = t$334 + _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 )
 1062.       t$352 = t$334 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1064.       t$355 = t$334 + 8 * _zla( 0, m ) + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1064.       t$358 = t$334 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 )
 1064.       t$361 = t$334 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 )
 1063.       t$364 = t$334 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 8 * ( _zla( 0, m ) + ( _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + _zla( 0, m ) * _zla( 0, np ) * 8 + 12 * _zla( 0, m ) + 7 ) / 8 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) + _zla( 0, m ) * _zla( 0, np ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 )
 1068.       if ( m > 0 ) then
 1068.          $I_L1068_248 = 0
 1068. !dir$ ivdep
 1068.          do
 1069.             swh(1 + $I_L1068_248, 1) = 0.0
 1070.             so2(1 + $I_L1068_248, 1) = 0.0
 1071.             snt(1 + $I_L1068_248) = 1.0/cosz(1 + $I_L1068_248)
 1072.             $I_L1068_248 = 1 + $I_L1068_248
 1068.             if ( $I_L1068_248 >= m ) exit
 1068.          enddo
 1068.       endif
 1074.       if ( np > 0 ) then
 1075.          if ( m > 0 ) then
 1075.             $I_L1075_293 = 0
 1075.             do
 1074.                $I_L1074_291 = 0
 1074.                if ( np >= 2 ) then
 1074.                   $I_L1074_295 = 0
 1074. !dir$ blocking_size( 0, 0 )
 1074.                   do
 1075.                      $I_L1075_250 = 0
 1075. !dir$ ivdep
 1075. !dir$ blocking_size( 256, 256 )
 1075.                      do
 1079.                         $dp_WR0_R0 = pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) + -pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295)
 1079.                         dp($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) = $dp_WR0_R0
 1084.                         $scal_WR0_R1 = $dp_WR0_R0 * _exp3( log( abs( 1.6666666666666668e-3 * ( pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) + pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) ) ) ), ( 1.6666666666666668e-3 * ( pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) + pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) ) ), 8.0000000000000004e-1 )
 1084.                         scal($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) = $scal_WR0_R1
 1085.                         $wh_WR0_R2 = 9.9999999999999994e-12 + $scal_WR0_R1 * wa($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) * ( 1.0 + 1.3500000000000001e-3 * ( -240.0 + ta($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) ) ) * 1.02
 1085.                         wh($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) = $wh_WR0_R2
 1086.                         swh($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) = swh($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) + $wh_WR0_R2
 1092.                         oh($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) = 9.9999999999999994e-12 + $dp_WR0_R0 * oa($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + 2 * $I_L1074_295) * 476.03399999999999
 1079.                         $dp_WR0_R0 = pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 3 + 2 * $I_L1074_295) + -pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295)
 1079.                         dp($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) = $dp_WR0_R0
 1084.                         $scal_WR0_R1 = $dp_WR0_R0 * _exp3( log( abs( 1.6666666666666668e-3 * ( pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) + pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 3 + 2 * $I_L1074_295) ) ) ), ( 1.6666666666666668e-3 * ( pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) + pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 3 + 2 * $I_L1074_295) ) ), 8.0000000000000004e-1 )
 1084.                         scal($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) = $scal_WR0_R1
 1085.                         $wh_WR0_R2 = 9.9999999999999994e-12 + $scal_WR0_R1 * wa($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) * ( 1.0 + 1.3500000000000001e-3 * ( -240.0 + ta($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) ) ) * 1.02
 1085.                         wh($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) = $wh_WR0_R2
 1086.                         swh($I_L1075_250 + 256 * $I_L1075_293 + 1, 3 + 2 * $I_L1074_295) = swh($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) + $wh_WR0_R2
 1092.                         oh($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) = 9.9999999999999994e-12 + $dp_WR0_R0 * oa($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + 2 * $I_L1074_295) * 476.03399999999999
 1075.                         $I_L1075_250 = 1 + $I_L1075_250
 1075.                         if ( $I_L1075_250 >= min( m, 256 + 256 * $I_L1075_293 ) + -256 * $I_L1075_293 ) exit
 1075.                      enddo
 1103.                      $I_L1074_295 = 1 + $I_L1074_295
 1103.                      if ( $I_L1074_295 >= _rsh( np, 1 ) ) exit
 1103.                   enddo
 1103.                   $I_L1074_291 = and( 0xfffffffffffffffeUL, np )
 1103.                endif
 1074.                if ( $I_L1074_291 < np ) then
 1075.                   $I_L1075_250 = 0
 1075. !dir$ ivdep
 1075. !dir$ blocking_size( 256, 256 )
 1075.                   do
 1079.                      $dp_WR0_R0 = pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + $I_L1074_291) + -pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291)
 1079.                      dp($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) = $dp_WR0_R0
 1084.                      $scal_WR0_R1 = $dp_WR0_R0 * _exp3( log( abs( 1.6666666666666668e-3 * ( pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) + pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + $I_L1074_291) ) ) ), ( 1.6666666666666668e-3 * ( pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) + pl($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + $I_L1074_291) ) ), 8.0000000000000004e-1 )
 1084.                      scal($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) = $scal_WR0_R1
 1085.                      $wh_WR0_R2 = 9.9999999999999994e-12 + $scal_WR0_R1 * wa($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) * ( 1.0 + 1.3500000000000001e-3 * ( -240.0 + ta($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) ) ) * 1.02
 1085.                      wh($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) = $wh_WR0_R2
 1086.                      swh($I_L1075_250 + 256 * $I_L1075_293 + 1, 2 + $I_L1074_291) = swh($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) + $wh_WR0_R2
 1092.                      oh($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) = 9.9999999999999994e-12 + $dp_WR0_R0 * oa($I_L1075_250 + 256 * $I_L1075_293 + 1, 1 + $I_L1074_291) * 476.03399999999999
 1075.                      $I_L1075_250 = 1 + $I_L1075_250
 1075.                      if ( $I_L1075_250 >= min( m, 256 + 256 * $I_L1075_293 ) + -256 * $I_L1075_293 ) exit
 1075.                   enddo
 1075.                endif
 1075.                $I_L1075_293 = 1 + $I_L1075_293
 1102.                if ( $I_L1075_293 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 1102.             enddo
 1102.          endif
 1102.       endif
 1108.       if ( np >= 0 ) then
 1109.          if ( m > 0 ) then
 1108.             $I_L1108_279 = 0
 1108.             do
 1109.                $I_L1109_253 = 0
 1109. !dir$ ivdep
 1109.                do
 1110.                   flx(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1111.                   flx_d(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1112.                   flx_u(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1113.                   flc(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1114.                   flc_d(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1115.                   flc_u(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1116.                   df(1 + $I_L1109_253, 1 + $I_L1108_279) = 0.0
 1117.                   $I_L1109_253 = 1 + $I_L1109_253
 1109.                   if ( $I_L1109_253 >= m ) exit
 1109.                enddo
 1118.                $I_L1108_279 = 1 + $I_L1108_279
 1117.                if ( $I_L1108_279 >= 1 + np ) exit
 1117.             enddo
 1117.          endif
 1117.       endif
 1121.       call soluvcld( m, np, wh(1, 1), oh(1, 1), dp(1, 1), taucld(1, 1, 1), reff(1, 1, 1), ict, icb, fcld(1, 1), cosz(1), taual(1, 1, 1), ssaal(1, 1, 1), asyal(1, 1, 1), rsuvbm(1), rsuvdf(1), flx(1, 1), flc(1, 1), fdiruv(1), fdifuv(1), fdirpar(1), fdifpar(1), fdiruv_c(1), fdifuv_c(1), fdirpar_c(1), fdifpar_c(1), flx_d(1, 1), flx_u(1, 1), flc_d(1, 1), flc_u(1, 1) )
 1129.       call solircld( m, np, wh(1, 1), dp(1, 1), taucld(1, 1, 1), reff(1, 1, 1), ict, icb, fcld(1, 1), cosz(1), taual(1, 1, 1), ssaal(1, 1, 1), asyal(1, 1, 1), rsirbm(1), rsirdf(1), flx(1, 1), flc(1, 1), fdirir(1), fdifir(1), fdirir_c(1), fdifir_c(1), flx_d(1, 1), flx_u(1, 1), flc_d(1, 1), flc_u(1, 1) )
 1139.       if ( m > 0 ) then
 1139.          $I_L1139_255 = 0
 1139. !dir$ ivdep
 1139.          do
 1140.             cnt(1 + $I_L1139_255) = 165.22 * snt(1 + $I_L1139_255)
 1252.             nctop(1 + $I_L1139_255) = 1 + np
 1141.             $I_L1139_255 = 1 + $I_L1139_255
 1139.             if ( $I_L1139_255 >= m ) exit
 1139.          enddo
 1139.       endif
 1143.       if ( np > 0 ) then
 1144.          if ( m > 0 ) then
 1143.             $I_L1143_281 = 0
 1143.             do
 1144.                $I_L1144_257 = 0
 1144. !dir$ ivdep
 1144.                do
 1145.                   $so2_WR0_R3 = so2(1 + $I_L1144_257, 1 + $I_L1143_281) + scal(1 + $I_L1144_257, 1 + $I_L1143_281) * cnt(1 + $I_L1144_257)
 1145.                   so2(1 + $I_L1144_257, 2 + $I_L1143_281) = $so2_WR0_R3
 1156.                   df(1 + $I_L1144_257, 2 + $I_L1143_281) = 6.3299999999999995e-2 * ( 1.0 + -_expn( -1.45e-4 * _sqrt( $so2_WR0_R3 ) ) )
 1146.                   $I_L1144_257 = 1 + $I_L1144_257
 1144.                   if ( $I_L1144_257 >= m ) exit
 1144.                enddo
 1256.                $I_L1256_271 = 0
 1256. !dir$ ivdep
 1256.                do
 1257.                   if ( fcld(1 + $I_L1256_271, 1 + $I_L1143_281) > 2.0e-2 ) then
 1257.                      if ( np + -nctop(1 + $I_L1256_271) == -1 ) then
 1258.                         nctop(1 + $I_L1256_271) = ( 1 + $I_L1143_281 )
 1258.                      endif
 1258.                   endif
 1260.                   $I_L1256_271 = 1 + $I_L1256_271
 1259.                   if ( $I_L1256_271 >= m ) exit
 1259.                enddo
 1147.                $I_L1143_281 = 1 + $I_L1143_281
 1146.                if ( $I_L1143_281 >= np ) exit
 1146.             enddo
 1146.          endif
 1146.       endif
 1162.       if ( m > 0 ) then
 1162.          $I_L1162_259 = 0
 1162. !dir$ ivdep
 1162.          do
 1163.             cnt(1 + $I_L1162_259) = co2 * snt(1 + $I_L1162_259)
 1164.             $I_L1162_259 = 1 + $I_L1162_259
 1162.             if ( $I_L1162_259 >= m ) exit
 1162.          enddo
 1162.       endif
 1170.       if ( np > 0 ) then
 1171.          if ( m > 0 ) then
 1170.             $I_L1170_283 = 0
 1170.             if ( np >= 2 ) then
 1170.                $I_L1170_297 = 0
 1170. !dir$ blocking_size( 0, 0 )
 1170.                do
 1171.                   $I_L1171_261 = 0
 1171. !dir$ ivdep
 1171. !dir$ blocking_size( 0, 0 )
 1171.                   do
 1172.                      $x_S17 = 789.0 * cnt(1 + $I_L1171_261)
 1173.                      $so2_WR0_R4 = so2(1 + $I_L1171_261, 1 + 2 * $I_L1170_297) + $x_S17 * scal(1 + $I_L1171_261, 1 + 2 * $I_L1170_297) + 9.9999999999999994e-12
 1173.                      so2(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) = $so2_WR0_R4
 1189.                      $swu_WR0_R5 = log10( $so2_WR0_R4 )
 1189.                      swu(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) = $swu_WR0_R5
 1190.                      $swh_WR0_R6 = log10( swh(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) * snt(1 + $I_L1171_261) )
 1197.                      $ic_S24 = min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) )
 1197.                      $iw_S25 = min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) )
 1197.                      $x2_S26 = cah(-1 + $ic_S24, -1 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) )) + ( 6.666666666666667 * ( cah(-1 + $ic_S24, min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) )) + -cah(-1 + $ic_S24, -1 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) )) ) ) * ( $swh_WR0_R6 + -1.4999999999999999e-1 * real( -2 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) ) ) + 4.0 )
 1197.                      $y2_S27 = $x2_S26 + ( 6.666666666666667 * ( cah(min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ), -1 + $iw_S25) + -cah(-1 + ( min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ) ), -1 + $iw_S25) ) ) * ( $swu_WR0_R5 + -1.4999999999999999e-1 * real( -2 + ( min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ) ) ) + 3.0 )
 1197.                      df(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) = df(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) + $y2_S27
 1223.                      $swh_WR0_R6 = log10( pl(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) )
 1223.                      swh(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) = $swh_WR0_R6
 1172.                      $x_S17 = 789.0 * cnt(1 + $I_L1171_261)
 1173.                      $so2_WR0_R4 = $so2_WR0_R4 + $x_S17 * scal(1 + $I_L1171_261, 2 + 2 * $I_L1170_297) + 9.9999999999999994e-12
 1173.                      so2(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) = $so2_WR0_R4
 1189.                      $swu_WR0_R5 = log10( $so2_WR0_R4 )
 1189.                      swu(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) = $swu_WR0_R5
 1190.                      $swh_WR0_R6 = log10( swh(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) * snt(1 + $I_L1171_261) )
 1197.                      $ic_S24 = min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) )
 1197.                      $iw_S25 = min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) )
 1197.                      $x2_S26 = cah(-1 + $ic_S24, -1 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) )) + ( 6.666666666666667 * ( cah(-1 + $ic_S24, min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) )) + -cah(-1 + $ic_S24, -1 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) )) ) ) * ( $swh_WR0_R6 + -1.4999999999999999e-1 * real( -2 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) ) ) + 4.0 )
 1197.                      $y2_S27 = $x2_S26 + ( 6.666666666666667 * ( cah(min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ), -1 + $iw_S25) + -cah(-1 + ( min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ) ), -1 + $iw_S25) ) ) * ( $swu_WR0_R5 + -1.4999999999999999e-1 * real( -2 + ( min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ) ) ) + 3.0 )
 1197.                      df(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) = df(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) + $y2_S27
 1223.                      $swh_WR0_R6 = log10( pl(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) )
 1223.                      swh(1 + $I_L1171_261, 3 + 2 * $I_L1170_297) = $swh_WR0_R6
 1174.                      $I_L1171_261 = 1 + $I_L1171_261
 1171.                      if ( $I_L1171_261 >= m ) exit
 1171.                   enddo
 1175.                   $I_L1170_297 = 1 + $I_L1170_297
 1174.                   if ( $I_L1170_297 >= _rsh( np, 1 ) ) exit
 1174.                enddo
 1175.                $I_L1170_283 = and( 0xfffffffffffffffeUL, np )
 1175.             endif
 1170.             if ( $I_L1170_283 < np ) then
 1171.                $I_L1171_261 = 0
 1171. !dir$ ivdep
 1171. !dir$ blocking_size( 0, 0 )
 1171.                do
 1172.                   $x_S17 = 789.0 * cnt(1 + $I_L1171_261)
 1173.                   $so2_WR0_R4 = so2(1 + $I_L1171_261, 1 + $I_L1170_283) + $x_S17 * scal(1 + $I_L1171_261, 1 + $I_L1170_283) + 9.9999999999999994e-12
 1173.                   so2(1 + $I_L1171_261, 2 + $I_L1170_283) = $so2_WR0_R4
 1189.                   $swu_WR0_R5 = log10( $so2_WR0_R4 )
 1189.                   swu(1 + $I_L1171_261, 2 + $I_L1170_283) = $swu_WR0_R5
 1190.                   $swh_WR0_R6 = log10( swh(1 + $I_L1171_261, 2 + $I_L1170_283) * snt(1 + $I_L1171_261) )
 1197.                   $ic_S24 = min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) )
 1197.                   $iw_S25 = min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) )
 1197.                   $x2_S26 = cah(-1 + $ic_S24, -1 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) )) + ( 6.666666666666667 * ( cah(-1 + $ic_S24, min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) )) + -cah(-1 + $ic_S24, -1 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) )) ) ) * ( $swh_WR0_R6 + -1.4999999999999999e-1 * real( -2 + ( min( 37, max( 2, int( 1.0 + ( 6.666666666666667 * ( 4.0750000000000002 + $swh_WR0_R6 ) ) ) ) ) ) ) + 4.0 )
 1197.                   $y2_S27 = $x2_S26 + ( 6.666666666666667 * ( cah(min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ), -1 + $iw_S25) + -cah(-1 + ( min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ) ), -1 + $iw_S25) ) ) * ( $swu_WR0_R5 + -1.4999999999999999e-1 * real( -2 + ( min( 43, max( 2, int( 1.0 + ( 6.666666666666667 * ( 3.0750000000000002 + $swu_WR0_R5 ) ) ) ) ) ) ) + 3.0 )
 1197.                   df(1 + $I_L1171_261, 2 + $I_L1170_283) = df(1 + $I_L1171_261, 2 + $I_L1170_283) + $y2_S27
 1223.                   $swh_WR0_R6 = log10( pl(1 + $I_L1171_261, 2 + $I_L1170_283) )
 1223.                   swh(1 + $I_L1171_261, 2 + $I_L1170_283) = $swh_WR0_R6
 1174.                   $I_L1171_261 = 1 + $I_L1171_261
 1171.                   if ( $I_L1171_261 >= m ) exit
 1171.                enddo
 1171.             endif
 1171.          endif
 1171.       endif
 1197.       t$106 = m
 1197.       t$107 = ( 1 + np )
 1197.       t$623 = max( 0, m )
 1197.       t$624 = m
 1197.       t$625 = max( 0, ( 1 + np ) )
 1197.       t$626 = m * max( 0, ( 1 + np ) )
 1197.       t$108 = 43
 1197.       t$109 = 37
 1197.       t$627 = 43
 1197.       t$628 = 43
 1197.       t$629 = 37
 1197.       t$630 = 1591
 1207.       if ( m > 0 ) then
 1207.          $I_L1207_263 = 0
 1207. !dir$ ivdep
 1207.          do
 1208.             swu(1 + $I_L1207_263, 1) = co2 * snt(1 + $I_L1207_263)
 1209.             $I_L1207_263 = 1 + $I_L1207_263
 1207.             if ( $I_L1207_263 >= m ) exit
 1207.          enddo
 1207.       endif
 1213.       if ( np > 0 ) then
 1214.          if ( m > 0 ) then
 1213.             $I_L1213_285 = 0
 1213. !dir$ blocking_size( 0, 0 )
 1213.             do
 1214.                $I_L1214_265 = 0
 1214. !dir$ ivdep
 1214. !dir$ blocking_size( 0, 0 )
 1214.                do
 1215.                   $swu_WR0_R7 = swu(1 + $I_L1214_265, 1)
 1215.                   swu(1 + $I_L1214_265, 2 + $I_L1213_285) = $swu_WR0_R7
 1230.                   $wlog_S36 = swh(1 + $I_L1214_265, 2 + $I_L1213_285)
 1230.                   $ic_S37 = min( 62, ( max( 2, int( 1.0 + ( 20000.0 * ( -2.2499999999999999e-4 + $swu_WR0_R7 ) ) ) ) ) )
 1230.                   $iw_S38 = min( 101, ( max( 2, int( 1.0 + ( 20.0 * ( 2.0249999999999999 + $wlog_S36 ) ) ) ) ) )
 1230.                   $x2_S39 = coa(-1 + $ic_S37, -1 + ( min( 101, ( max( 2, int( 1.0 + ( 20.0 * ( 2.0249999999999999 + $wlog_S36 ) ) ) ) ) ) )) + ( 20.0 * ( coa(-1 + $ic_S37, min( 101, ( max( 2, int( 1.0 + ( 20.0 * ( 2.0249999999999999 + $wlog_S36 ) ) ) ) ) )) + -coa(-1 + $ic_S37, -1 + ( min( 101, ( max( 2, int( 1.0 + ( 20.0 * ( 2.0249999999999999 + $wlog_S36 ) ) ) ) ) ) )) ) ) * ( $wlog_S36 + -5.0000000000000003e-2 * real( -2 + ( min( 101, ( max( 2, int( 1.0 + ( 20.0 * ( 2.0249999999999999 + $wlog_S36 ) ) ) ) ) ) ) ) + 2.0 )
 1230.                   $y2_S40 = $x2_S39 + ( 20000.0 * ( coa(min( 62, ( max( 2, int( 1.0 + ( 20000.0 * ( -2.2499999999999999e-4 + $swu_WR0_R7 ) ) ) ) ) ), -1 + $iw_S38) + -coa(-1 + ( min( 62, ( max( 2, int( 1.0 + ( 20000.0 * ( -2.2499999999999999e-4 + $swu_WR0_R7 ) ) ) ) ) ) ), -1 + $iw_S38) ) ) * ( $swu_WR0_R7 + -5.0000000000000002e-5 * real( -2 + ( min( 62, ( max( 2, int( 1.0 + ( 20000.0 * ( -2.2499999999999999e-4 + $swu_WR0_R7 ) ) ) ) ) ) ) ) + -2.5000000000000001e-4 )
 1230.                   df(1 + $I_L1214_265, 2 + $I_L1213_285) = df(1 + $I_L1214_265, 2 + $I_L1213_285) + $y2_S40
 1216.                   $I_L1214_265 = 1 + $I_L1214_265
 1214.                   if ( $I_L1214_265 >= m ) exit
 1214.                enddo
 1217.                $I_L1213_285 = 1 + $I_L1213_285
 1216.                if ( $I_L1213_285 >= np ) exit
 1216.             enddo
 1216.          endif
 1216.       endif
 1230.       t$106 = m
 1230.       t$107 = ( 1 + np )
 1230.       t$623 = max( 0, m )
 1230.       t$624 = m
 1230.       t$625 = max( 0, ( 1 + np ) )
 1230.       t$626 = m * max( 0, ( 1 + np ) )
 1230.       t$108 = 62
 1230.       t$109 = 101
 1230.       t$627 = 62
 1230.       t$628 = 62
 1230.       t$629 = 101
 1230.       t$630 = 6262
 1235.       if ( np >= 0 ) then
 1236.          if ( m > 0 ) then
 1235.             $I_L1235_287 = 0
 1235.             do
 1236.                $I_L1236_267 = 0
 1236. !dir$ ivdep
 1236.                do
 1237.                   flc(1 + $I_L1236_267, 1 + $I_L1235_287) = flc(1 + $I_L1236_267, 1 + $I_L1235_287) + -df(1 + $I_L1236_267, 1 + $I_L1235_287)
 1238.                   flc_d(1 + $I_L1236_267, 1 + $I_L1235_287) = flc_d(1 + $I_L1236_267, 1 + $I_L1235_287) + -df(1 + $I_L1236_267, 1 + $I_L1235_287)
 1239.                   $I_L1236_267 = 1 + $I_L1236_267
 1236.                   if ( $I_L1236_267 >= m ) exit
 1236.                enddo
 1240.                $I_L1235_287 = 1 + $I_L1235_287
 1239.                if ( $I_L1235_287 >= 1 + np ) exit
 1239.             enddo
 1239.          endif
 1239.       endif
 1244.       if ( m > 0 ) then
 1244.          $I_L1244_269 = 0
 1244. !dir$ ivdep
 1244.          do
 1246.             fdirir_c(1 + $I_L1244_269) = max( 0.0, fdirir_c(1 + $I_L1244_269) + -df(1 + $I_L1244_269, 1 + np) )
 1247.             $I_L1244_269 = 1 + $I_L1244_269
 1244.             if ( $I_L1244_269 >= m ) exit
 1244.          enddo
 1263.          $I_L1263_289 = 0
 1263.          do
 1266.             $ntop_S45 = nctop(1 + $I_L1263_289)
 1269.             if ( $ntop_S45 > 0 ) then
 1269.                $I_L1269_273 = 0
 1269. !dir$ ivdep
 1269.                do
 1270.                   flx(1 + $I_L1263_289, 1 + $I_L1269_273) = flx(1 + $I_L1263_289, 1 + $I_L1269_273) + -df(1 + $I_L1263_289, 1 + $I_L1269_273)
 1271.                   flx_d(1 + $I_L1263_289, 1 + $I_L1269_273) = flx_d(1 + $I_L1263_289, 1 + $I_L1269_273) + -df(1 + $I_L1263_289, 1 + $I_L1269_273)
 1272.                   $I_L1269_273 = 1 + $I_L1269_273
 1269.                   if ( $I_L1269_273 >= $ntop_S45 ) exit
 1269.                enddo
 1269.             endif
 1274.             if ( $ntop_S45 < 1 + np ) then
 1275.                if ( np + -$ntop_S45 >= 0 ) then
 1275.                   $I_L1275_275 = 0
 1275. !dir$ ivdep
 1275.                   do
 1276.                      $df_WR0_R8 = df(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) * ( flx(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) * 1.0/flc(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) )
 1276.                      df(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) = $df_WR0_R8
 1277.                      flx(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) = flx(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) + -$df_WR0_R8
 1278.                      flx_d(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) = flx_d(1 + $I_L1263_289, $ntop_S45 + $I_L1275_275 + 1) + -$df_WR0_R8
 1279.                      $I_L1275_275 = 1 + $I_L1275_275
 1275.                      if ( $I_L1275_275 >= np + -$ntop_S45 + 1 ) exit
 1275.                   enddo
 1275.                endif
 1275.             endif
 1281.             $I_L1263_289 = 1 + $I_L1263_289
 1280.             if ( $I_L1263_289 >= m ) exit
 1280.          enddo
 1283.          $I_L1283_277 = 0
 1283. !dir$ ivdep
 1283.          do
 1285.             fdirir(1 + $I_L1283_277) = max( 0.0, fdirir(1 + $I_L1283_277) + -df(1 + $I_L1283_277, 1 + np) )
 1286.             $I_L1283_277 = 1 + $I_L1283_277
 1283.             if ( $I_L1283_277 >= m ) exit
 1283.          enddo
 1283.       endif
 1016.       _free( t$334 )
 1288.       return
 1288.       end
 1288.       
 1352.       
 1352.       subroutine solircld( m, np, wh, dp, taucld, reff, ict, icb, fcld, cosz, taual, ssaal, asyal, rsirbm, rsirdf, flx, flc, fdirir, fdifir, fdirir_c, fdifir_c, flx_d, flx_u, flc_d, flc_u )
 1352.       t$78 = m
 1352.       t$79 = np
 1439.       t$366 = _zla( 0, m )
 1352.       t$367 = _zla( 0, m )
 1439.       t$368 = _zla( 0, np )
 1352.       t$369 = _zla( 0, m ) * _zla( 0, np )
 1352.       t$370 = _zla( 0, m ) * _zla( 0, np )
 1352.       t$371 = _zla( 0, m ) * _zla( 0, np ) * 3
 1352.       t$372 = _zla( 0, m ) * _zla( 0, np ) * 11
 1352.       t$80 = ( 1 + np )
 1443.       t$373 = _zla( 0, ( 1 + np ) )
 1352.       t$374 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 1454.       t$377 = _zla( 0, m ) * _zla( 0, np ) * 8
 1452.       t$378 = _zla( 0, m ) * _zla( 0, np ) * 8
 1452.       t$380 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * _zla( 0, m )
 1455.       t$381 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * _zla( 0, m )
 1455.       t$383 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1455.       t$384 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1455.       t$386 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 24
 1454.       t$387 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 24
 1454.       t$389 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 32
 1352.       t$390 = 3 * _zla( 0, m )
 1453.       t$391 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 32
 1453.       t$393 = _zla( 0, m ) * _zla( 0, np ) * 32 + 32 * _zla( 0, m )
 1452.       t$394 = _zla( 0, m ) * _zla( 0, np ) * 32 + 32 * _zla( 0, m )
 1452.       t$396 = _zla( 0, m ) * _zla( 0, np ) * 32 + 40 * _zla( 0, m )
 1456.       t$397 = _zla( 0, m ) * _zla( 0, np ) * 32 + 40 * _zla( 0, m )
 1456.       t$399 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$400 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$402 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$403 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8
 1457.       t$405 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$406 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
 1457.       t$408 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 1457.       t$409 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24 + 40 * _zla( 0, m )
 1457.       t$411 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32
 1457.       t$412 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32 + 40 * _zla( 0, m )
 1457.       t$414 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40
 1457.       t$415 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40 + 40 * _zla( 0, m )
 1457.       t$417 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48
 1452.       t$418 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 40 * _zla( 0, m )
 1452.       t$420 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 48 * _zla( 0, m )
 1452.       t$421 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 48 * _zla( 0, m )
 1452.       t$423 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 56 * _zla( 0, m )
 1452.       t$424 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 56 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1452.       t$426 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 64 * _zla( 0, m )
 1452.       t$427 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 64 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1452.       t$429 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 72 * _zla( 0, m )
 1352.       t$430 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 1352.       t$431 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 2
 1458.       t$432 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1458.       t$434 = _zla( 0, m ) * _zla( 0, np ) * 40 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64
 1456.       t$435 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 40
 1456.       t$437 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 48
 1458.       t$438 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 48 + 72 * _zla( 0, m )
 1458.       t$440 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 48 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1456.       t$441 = _zla( 0, m ) * _zla( 0, np ) * 48 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 72 * _zla( 0, m )
 1456.       t$443 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 56
 1454.       t$444 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 56 + 72 * _zla( 0, m )
 1454.       t$446 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64
 1452.       t$447 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64 + 72 * _zla( 0, m )
 1452.       t$449 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64 + 80 * _zla( 0, m )
 1455.       t$450 = _zla( 0, m ) * _zla( 0, np ) * 64 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1455.       t$452 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 72
 1455.       t$453 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 72 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1455.       t$455 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 80
 1454.       t$456 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 80 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1454.       t$458 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 88
 1454.       t$459 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 88 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1454.       t$461 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 96
 1454.       t$462 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 96 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1454.       t$464 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 104
 1455.       t$465 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 104 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1455.       t$467 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 112
 1455.       t$468 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 112 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1455.       t$470 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120
 1454.       t$471 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120
 1454.       t$473 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128
 1458.       t$474 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1458.       t$476 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96
 1456.       t$477 = _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + 80 * _zla( 0, m )
 1456.       t$479 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + _zla( 0, m ) * _zla( 0, np ) * 136
 1458.       t$480 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + _zla( 0, m ) * _zla( 0, np ) * 136 + 80 * _zla( 0, m )
 1458.       t$482 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 136 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112
 1456.       t$483 = _zla( 0, m ) * _zla( 0, np ) * 136 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + 80 * _zla( 0, m )
 1456.       t$485 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + _zla( 0, m ) * _zla( 0, np ) * 144
 1458.       t$486 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + _zla( 0, m ) * _zla( 0, np ) * 144 + 80 * _zla( 0, m )
 1458.       t$488 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 144 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128
 1456.       t$489 = _zla( 0, m ) * _zla( 0, np ) * 144 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128 + 80 * _zla( 0, m )
 1456.       t$491 = 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128 + _zla( 0, m ) * _zla( 0, np ) * 152
 1352.       t$375 = int( _alloc( 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128 + _zla( 0, m ) * _zla( 0, np ) * 152 ), 8 )
 1454.       t$376 = t$375
 1452.       t$379 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 8
 1455.       t$382 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * _zla( 0, m )
 1455.       t$385 = t$375 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1454.       t$388 = t$375 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 24
 1453.       t$392 = t$375 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 32
 1452.       t$395 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 32 + 32 * _zla( 0, m )
 1456.       t$398 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 32 + 40 * _zla( 0, m )
 1457.       t$401 = t$375 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$404 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$407 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1457.       t$410 = t$375 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 1457.       t$413 = t$375 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32
 1457.       t$416 = t$375 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40
 1452.       t$419 = t$375 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48
 1452.       t$422 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 48 * _zla( 0, m )
 1452.       t$425 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 56 * _zla( 0, m )
 1452.       t$428 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 64 * _zla( 0, m )
 1458.       t$433 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 72 * _zla( 0, m )
 1456.       t$436 = t$375 + _zla( 0, m ) * _zla( 0, np ) * 40 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64
 1458.       t$439 = t$375 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 48
 1456.       t$442 = t$375 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 48 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1454.       t$445 = t$375 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 56
 1452.       t$448 = t$375 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64
 1455.       t$451 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64 + 80 * _zla( 0, m )
 1455.       t$454 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 72
 1454.       t$457 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 80
 1454.       t$460 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 88
 1454.       t$463 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 96
 1455.       t$466 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 104
 1455.       t$469 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 112
 1454.       t$472 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120
 1458.       t$475 = t$375 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128
 1456.       t$478 = t$375 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96
 1458.       t$481 = t$375 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + _zla( 0, m ) * _zla( 0, np ) * 136
 1456.       t$484 = t$375 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 136 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112
 1458.       t$487 = t$375 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + _zla( 0, m ) * _zla( 0, np ) * 144
 1456.       t$490 = t$375 + 80 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 144 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128
 1470.       $F_A33 = m
 1470.       if ( m > 0 ) then
 1470.          $I_L1470_242 = 0
 1470. !dir$ ivdep
 1470.          do
 1470.             dsm(1 + $I_L1470_242) = 6.0199999999999998e-1
 1470.             $I_L1470_242 = 1 + $I_L1470_242
 1470.             if ( $I_L1470_242 >= $F_A33 ) exit
 1470.          enddo
 1470.       endif
 1471.       $F_A34 = m
 1471.       if ( m > 0 ) then
 1471.          $I_L1471_244 = 0
 1471. !dir$ ivdep
 1471.          do
 1471.             fdirir(1 + $I_L1471_244) = 0.0
 1471.             $I_L1471_244 = 1 + $I_L1471_244
 1471.             if ( $I_L1471_244 >= $F_A34 ) exit
 1471.          enddo
 1471.       endif
 1472.       $F_A35 = m
 1472.       if ( m > 0 ) then
 1472.          $I_L1472_246 = 0
 1472. !dir$ ivdep
 1472.          do
 1472.             fdifir(1 + $I_L1472_246) = 0.0
 1472.             $I_L1472_246 = 1 + $I_L1472_246
 1472.             if ( $I_L1472_246 >= $F_A35 ) exit
 1472.          enddo
 1472.       endif
 1473.       $F_A36 = m
 1473.       if ( m > 0 ) then
 1473.          $I_L1473_248 = 0
 1473. !dir$ ivdep
 1473.          do
 1473.             fdirir_c(1 + $I_L1473_248) = 0.0
 1473.             $I_L1473_248 = 1 + $I_L1473_248
 1473.             if ( $I_L1473_248 >= $F_A36 ) exit
 1473.          enddo
 1473.       endif
 1474.       $F_A37 = m
 1474.       if ( m > 0 ) then
 1474.          $I_L1474_250 = 0
 1474. !dir$ ivdep
 1474.          do
 1474.             fdifir_c(1 + $I_L1474_250) = 0.0
 1474.             $I_L1474_250 = 1 + $I_L1474_250
 1474.             if ( $I_L1474_250 >= $F_A37 ) exit
 1474.          enddo
 1474.       endif
 1475.       $F_A38 = m
 1475.       if ( m > 0 ) then
 1475.          $I_L1475_252 = 0
 1475. !dir$ ivdep
 1475.          do
 1475.             rr(1 + $I_L1475_252, 1 + np, 1) = rsirbm(1 + $I_L1475_252)
 1475.             $I_L1475_252 = 1 + $I_L1475_252
 1475.             if ( $I_L1475_252 >= $F_A38 ) exit
 1475.          enddo
 1475.       endif
 1476.       $F_A39 = m
 1476.       if ( m > 0 ) then
 1476.          $I_L1476_254 = 0
 1476. !dir$ ivdep
 1476.          do
 1476.             rr(1 + $I_L1476_254, 1 + np, 2) = rsirbm(1 + $I_L1476_254)
 1476.             $I_L1476_254 = 1 + $I_L1476_254
 1476.             if ( $I_L1476_254 >= $F_A39 ) exit
 1476.          enddo
 1476.       endif
 1477.       $F_A40 = m
 1477.       if ( m > 0 ) then
 1477.          $I_L1477_256 = 0
 1477. !dir$ ivdep
 1477.          do
 1477.             rs(1 + $I_L1477_256, 1 + np, 1) = rsirdf(1 + $I_L1477_256)
 1477.             $I_L1477_256 = 1 + $I_L1477_256
 1477.             if ( $I_L1477_256 >= $F_A40 ) exit
 1477.          enddo
 1477.       endif
 1478.       $F_A41 = m
 1478.       if ( m > 0 ) then
 1478.          $I_L1478_258 = 0
 1478. !dir$ ivdep
 1478.          do
 1478.             rs(1 + $I_L1478_258, 1 + np, 2) = rsirdf(1 + $I_L1478_258)
 1478.             $I_L1478_258 = 1 + $I_L1478_258
 1478.             if ( $I_L1478_258 >= $F_A41 ) exit
 1478.          enddo
 1478.       endif
 1479.       $F_A42 = ( 1 + np )
 1479.       $F_A43 = m
 1479.       if ( and( -$F_A43, -$F_A42 ) < 0 ) then
 1479.          $I_L1479_300 = 0
 1479.          do
 1479.             $I_L1479_288 = 0
 1479.             do
 1479.                $I_L1479_260 = 0
 1479. !dir$ ivdep
 1479.                do
 1479.                   td(1 + $I_L1479_260, 1 + $I_L1479_288, 1 + $I_L1479_300) = 0.0
 1479.                   $I_L1479_260 = 1 + $I_L1479_260
 1479.                   if ( $I_L1479_260 >= $F_A43 ) exit
 1479.                enddo
 1479.                $I_L1479_288 = 1 + $I_L1479_288
 1479.                if ( $I_L1479_288 >= $F_A42 ) exit
 1479.             enddo
 1479.             $I_L1479_300 = 1 + $I_L1479_300
 1479.             if ( $I_L1479_300 >= 2 ) exit
 1479.          enddo
 1479.       endif
 1480.       $F_A44 = ( 1 + np )
 1480.       $F_A45 = m
 1480.       if ( and( -$F_A45, -$F_A44 ) < 0 ) then
 1480.          $I_L1480_302 = 0
 1480.          do
 1480.             $I_L1480_290 = 0
 1480.             do
 1480.                $I_L1480_262 = 0
 1480. !dir$ ivdep
 1480.                do
 1480.                   tt(1 + $I_L1480_262, 1 + $I_L1480_290, 1 + $I_L1480_302) = 0.0
 1480.                   $I_L1480_262 = 1 + $I_L1480_262
 1480.                   if ( $I_L1480_262 >= $F_A45 ) exit
 1480.                enddo
 1480.                $I_L1480_290 = 1 + $I_L1480_290
 1480.                if ( $I_L1480_290 >= $F_A44 ) exit
 1480.             enddo
 1480.             $I_L1480_302 = 1 + $I_L1480_302
 1480.             if ( $I_L1480_302 >= 2 ) exit
 1480.          enddo
 1480.       endif
 1481.       $F_A46 = ( 1 + np )
 1481.       $F_A47 = m
 1481.       if ( and( -$F_A47, -$F_A46 ) < 0 ) then
 1481.          $I_L1481_304 = 0
 1481.          do
 1481.             $I_L1481_292 = 0
 1481.             do
 1481.                $I_L1481_264 = 0
 1481. !dir$ ivdep
 1481.                do
 1481.                   ts(1 + $I_L1481_264, 1 + $I_L1481_292, 1 + $I_L1481_304) = 0.0
 1481.                   $I_L1481_264 = 1 + $I_L1481_264
 1481.                   if ( $I_L1481_264 >= $F_A47 ) exit
 1481.                enddo
 1481.                $I_L1481_292 = 1 + $I_L1481_292
 1481.                if ( $I_L1481_292 >= $F_A46 ) exit
 1481.             enddo
 1481.             $I_L1481_304 = 1 + $I_L1481_304
 1481.             if ( $I_L1481_304 >= 2 ) exit
 1481.          enddo
 1481.       endif
 1482.       $F_A48 = m
 1482.       if ( m > 0 ) then
 1482.          $I_L1482_294 = 0
 1482.          do
 1482.             $I_L1482_266 = 0
 1482. !dir$ ivdep
 1482.             do
 1482.                cc(1 + $I_L1482_266, 1 + $I_L1482_294) = 0.0
 1482.                $I_L1482_266 = 1 + $I_L1482_266
 1482.                if ( $I_L1482_266 >= $F_A48 ) exit
 1482.             enddo
 1482.             $I_L1482_294 = 1 + $I_L1482_294
 1482.             if ( $I_L1482_294 >= 3 ) exit
 1482.          enddo
 1482.       endif
 1485.       $I_L1485_306 = 0
 1485.       do
 1491.          t$102 = m
 1491.          t$612 = max( 0, m )
 1491.          t$103 = np
 1491.          t$613 = m
 1491.          t$614 = max( 0, np )
 1491.          t$615 = ( m * np )
 1491.          t$616 = np * m
 1491.          t$617 = ( m * np * 3 )
 1491.          t$618 = ( 3 * m )
 1491.          if ( m > 0 ) then
 1491.             $I_L1491_210 = 0
 1491. !dir$ ivdep
 1491.             do
 1491.                cc(1 + $I_L1491_210, 1) = 0.0
 1491.                cc(1 + $I_L1491_210, 2) = 0.0
 1491.                cc(1 + $I_L1491_210, 3) = 0.0
 1491.                $I_L1491_210 = 1 + $I_L1491_210
 1491.                if ( $I_L1491_210 >= m ) exit
 1491.             enddo
 1491.          endif
 1491.          if ( -1 + ict > 0 ) then
 1491.             if ( m > 0 ) then
 1491.                $I_L1491_270 = 0
 1491. !dir$ blocking_size( 0, 0 )
 1491.                do
 1491.                   $I_L1491_212 = 0
 1491. !dir$ ivdep
 1491. !dir$ blocking_size( 0, 0 )
 1491.                   do
 1491.                      cc(1 + $I_L1491_212, 1) = max( cc(1 + $I_L1491_212, 1), fcld(1 + $I_L1491_212, 1 + $I_L1491_270) )
 1491.                      $I_L1491_212 = 1 + $I_L1491_212
 1491.                      if ( $I_L1491_212 >= m ) exit
 1491.                   enddo
 1491.                   $I_L1491_270 = 1 + $I_L1491_270
 1491.                   if ( $I_L1491_270 >= -1 + ict ) exit
 1491.                enddo
 1491.             endif
 1491.          endif
 1491.          if ( icb + -ict > 0 ) then
 1491.             if ( m > 0 ) then
 1491.                $I_L1491_272 = 0
 1491. !dir$ blocking_size( 0, 0 )
 1491.                do
 1491.                   $I_L1491_214 = 0
 1491. !dir$ ivdep
 1491. !dir$ blocking_size( 0, 0 )
 1491.                   do
 1491.                      cc(1 + $I_L1491_214, 2) = max( cc(1 + $I_L1491_214, 2), fcld(1 + $I_L1491_214, ict + $I_L1491_272) )
 1491.                      $I_L1491_214 = 1 + $I_L1491_214
 1491.                      if ( $I_L1491_214 >= m ) exit
 1491.                   enddo
 1491.                   $I_L1491_272 = 1 + $I_L1491_272
 1491.                   if ( $I_L1491_272 >= ( icb + -ict ) ) exit
 1491.                enddo
 1491.             endif
 1491.          endif
 1491.          if ( np + -icb >= 0 ) then
 1491.             if ( m > 0 ) then
 1491.                $I_L1491_274 = 0
 1491. !dir$ blocking_size( 0, 0 )
 1491.                do
 1491.                   $I_L1491_216 = 0
 1491. !dir$ ivdep
 1491. !dir$ blocking_size( 0, 0 )
 1491.                   do
 1491.                      cc(1 + $I_L1491_216, 3) = max( cc(1 + $I_L1491_216, 3), fcld(1 + $I_L1491_216, icb + $I_L1491_274) )
 1491.                      $I_L1491_216 = 1 + $I_L1491_216
 1491.                      if ( $I_L1491_216 >= m ) exit
 1491.                   enddo
 1491.                   $I_L1491_274 = 1 + $I_L1491_274
 1491.                   if ( $I_L1491_274 >= np + -icb + 1 ) exit
 1491.                enddo
 1491.             endif
 1491.          endif
 1491.          if ( np > 0 ) then
 1491.             if ( m > 0 ) then
 1491.                $I_L1491_276 = 0
 1491.                do
 1491.                   $I_L1491_218 = 0
 1491. !dir$ ivdep
 1491.                   do
 1491.                      tauclb(1 + $I_L1491_218, 1 + $I_L1491_276) = 0.0
 1491.                      tauclf(1 + $I_L1491_218, 1 + $I_L1491_276) = 0.0
 1491.                      $taux_S9 = taucld(1 + $I_L1491_218, 1 + $I_L1491_276, 1) + taucld(1 + $I_L1491_218, 1 + $I_L1491_276, 2) + taucld(1 + $I_L1491_218, 1 + $I_L1491_276, 3)
 1491.                      if ( taucld(1 + $I_L1491_218, 1 + $I_L1491_276, 1) + taucld(1 + $I_L1491_218, 1 + $I_L1491_276, 2) + taucld(1 + $I_L1491_218, 1 + $I_L1491_276, 3) > 2.0e-2 ) then
 1491.                         if ( fcld(1 + $I_L1491_218, 1 + $I_L1491_276) > 1.0e-2 ) then
 1491.                            $fa_S11 = ( fcld(1 + $I_L1491_218, 1 + $I_L1491_276) * 1.0/cc(1 + $I_L1491_218, cvmg( cvmg( 3, 2, or( ( 1 + $I_L1491_276 ) < ict, ( 1 + $I_L1491_276 ) >= icb ) ), 1, ( 1 + $I_L1491_276 ) >= ict )) )
 1491.                            $fm_S12 = 10.0 * cosz(1 + $I_L1491_218)
 1491.                            $ft_S13 = 3.3219280470385009 * ( 9.0310000000000001e-1 + log10( ( min( 32.0, $taux_S9 ) ) ) )
 1491.                            $fa_S14 = 10.0 * $fa_S11
 1491.                            $im_S16 = min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) )
 1491.                            $it_S17 = min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) )
 1491.                            $ia_S18 = min( 10, ( max( 2, int( 1.5 + ( 10.0 * $fa_S11 ) ) ) ) )
 1491.                            $ft_S19 = $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) )
 1491.                            $fa_S21 = ( 10.0 * $fa_S11 ) + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + ( 10.0 * $fa_S11 ) ) ) ) ) ) ) )
 1491.                            $xai_S20 = ( -( caib(-1 + $im_S16, $it_S17, $ia_S18) * ( 1.0 + -( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) ) ) + caib(1 + $im_S16, $it_S17, $ia_S18) * ( 1.0 + ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) ) ) * ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) * 5.0e-1 + caib($im_S16, $it_S17, $ia_S18) * ( 1.0 + -( ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) * ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) ) )
 1491.                            $xai_S22 = max( 0.0, $xai_S20 + ( -( caib($im_S16, -1 + $it_S17, $ia_S18) * ( 1.0 + -$ft_S19 ) ) + caib($im_S16, 1 + $it_S17, $ia_S18) * ( 1.0 + $ft_S19 ) ) * $ft_S19 * 5.0e-1 + caib($im_S16, $it_S17, $ia_S18) * ( 1.0 + -( $ft_S19 * $ft_S19 ) ) + ( -( caib($im_S16, $it_S17, -1 + $ia_S18) * ( 1.0 + -$fa_S21 ) ) + caib($im_S16, $it_S17, 1 + $ia_S18) * ( 1.0 + $fa_S21 ) ) * $fa_S21 * 5.0e-1 + caib($im_S16, $it_S17, $ia_S18) * ( 1.0 + -( $fa_S21 * $fa_S21 ) ) + -2.0 * caib($im_S16, $it_S17, $ia_S18) )
 1491.                            tauclb(1 + $I_L1491_218, 1 + $I_L1491_276) = ( min( 32.0, $taux_S9 ) ) * $xai_S22
 1491.                            $xai_S23 = ( -( caif(-1 + $it_S17, $ia_S18) * ( 1.0 + -( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) ) ) + caif(1 + $it_S17, $ia_S18) * ( 1.0 + ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) ) ) * ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) * 5.0e-1 + caif($it_S17, $ia_S18) * ( 1.0 + -( ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) * ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) ) )
 1491.                            $xai_S24 = max( 0.0, $xai_S23 + ( -( caif($it_S17, -1 + $ia_S18) * ( 1.0 + -( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) ) ) + caif($it_S17, 1 + $ia_S18) * ( 1.0 + ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) ) ) * ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) * 5.0e-1 + caif($it_S17, $ia_S18) * ( 1.0 + -( ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) * ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) ) ) + -caif($it_S17, $ia_S18) )
 1491.                            tauclf(1 + $I_L1491_218, 1 + $I_L1491_276) = ( min( 32.0, $taux_S9 ) ) * $xai_S24
 1491.                         endif
 1491.                      endif
 1491.                      $I_L1491_218 = 1 + $I_L1491_218
 1491.                      if ( $I_L1491_218 >= m ) exit
 1491.                   enddo
 1496.                   $I_L1496_220 = 0
 1496. !dir$ ivdep
 1496.                   do
 1497.                      ssaclt(1 + $I_L1496_220) = 9.9999000000000005e-1
 1498.                      asyclt(1 + $I_L1496_220) = 1.0
 1500.                      $taux_S27 = taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 1) + taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 2) + taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 3)
 1501.                      if ( taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 1) + taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 2) + taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 3) > 2.0e-2 ) then
 1501.                         if ( fcld(1 + $I_L1496_220, 1 + $I_L1491_276) > 1.0e-2 ) then
 1502.                            $reff1_S28 = min( 130.0, reff(1 + $I_L1496_220, 1 + $I_L1491_276, 1) )
 1503.                            $reff2_S30 = min( 20.0, reff(1 + $I_L1496_220, 1 + $I_L1491_276, 2) )
 1505.                            $w1_S32 = ( 1.0 + -( aia(1 + $I_L1485_306, 1) + ( aia(1 + $I_L1485_306, 2) + aia(1 + $I_L1485_306, 3) * $reff1_S28 ) * $reff1_S28 ) ) * taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 1)
 1507.                            $w2_S31 = ( 1.0 + -( awa(1 + $I_L1485_306, 1) + ( awa(1 + $I_L1485_306, 2) + awa(1 + $I_L1485_306, 3) * $reff2_S30 ) * $reff2_S30 ) ) * taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 2)
 1509.                            $w3_S33 = ( 1.0 + -ara(1 + $I_L1485_306, 1) ) * taucld(1 + $I_L1496_220, 1 + $I_L1491_276, 3)
 1510.                            ssaclt(1 + $I_L1496_220) = ( ( $w1_S32 + $w2_S31 + $w3_S33 ) * 1.0/$taux_S27 )
 1512.                            $g1_S35 = ( aig(1 + $I_L1485_306, 1) + ( aig(1 + $I_L1485_306, 2) + aig(1 + $I_L1485_306, 3) * $reff1_S28 ) * $reff1_S28 ) * $w1_S32
 1513.                            $g2_S34 = ( awg(1 + $I_L1485_306, 1) + ( awg(1 + $I_L1485_306, 2) + awg(1 + $I_L1485_306, 3) * $reff2_S30 ) * $reff2_S30 ) * $w2_S31
 1514.                            $g3_S36 = arg(1 + $I_L1485_306, 1) * $w3_S33
 1515.                            asyclt(1 + $I_L1496_220) = ( ( $g1_S35 + $g2_S34 + $g3_S36 ) * 1.0/( $w1_S32 + $w2_S31 + $w3_S33 ) )
 1515.                         endif
 1515.                      endif
 1517.                      $I_L1496_220 = 1 + $I_L1496_220
 1516.                      if ( $I_L1496_220 >= m ) exit
 1516.                   enddo
 1519.                   $I_L1519_222 = 0
 1519. !dir$ ivdep
 1519.                   do
 1520.                      ssacl(1 + $I_L1519_222, 1 + $I_L1491_276) = ssaclt(1 + $I_L1519_222)
 1523.                      asycl(1 + $I_L1519_222, 1 + $I_L1491_276) = asyclt(1 + $I_L1519_222)
 1521.                      $I_L1519_222 = 1 + $I_L1519_222
 1519.                      if ( $I_L1519_222 >= m ) exit
 1519.                   enddo
 1491.                   $I_L1491_276 = 1 + $I_L1491_276
 1491.                   if ( $I_L1491_276 >= np ) exit
 1491.                enddo
 1491.             endif
 1491.          endif
 1528.          $I_L1528_298 = 0
 1528.          do
 1529.             if ( np > 0 ) then
 1530.                if ( m > 0 ) then
 1531.                   $SC_ry2_I1 = ry2(1 + $I_L1485_306)
 1532.                   $SC_xk2_I2 = xk2(1 + $I_L1528_298)
 1529.                   $I_L1529_278 = 0
 1529.                   do
 1530.                      $I_L1530_224 = 0
 1530. !dir$ ivdep
 1530.                      do
 1531.                         $taurs_S43 = $SC_ry2_I1 * dp(1 + $I_L1530_224, 1 + $I_L1529_278)
 1532.                         $tauwv_S42 = $SC_xk2_I2 * wh(1 + $I_L1530_224, 1 + $I_L1529_278)
 1535.                         $tausto_WR0_R0 = $taurs_S43 + $tauwv_S42 + taual(1 + $I_L1530_224, 1 + $I_L1529_278, 9 + $I_L1485_306) + 1.0e-8
 1535.                         tausto(1 + $I_L1530_224, 1 + $I_L1529_278) = $tausto_WR0_R0
 1536.                         $ssatau_WR0_R1 = ssaal(1 + $I_L1530_224, 1 + $I_L1529_278, 9 + $I_L1485_306) * taual(1 + $I_L1530_224, 1 + $I_L1529_278, 9 + $I_L1485_306) + $taurs_S43
 1536.                         ssatau(1 + $I_L1530_224, 1 + $I_L1529_278) = $ssatau_WR0_R1
 1537.                         $asysto_WR0_R2 = asyal(1 + $I_L1530_224, 1 + $I_L1529_278, 9 + $I_L1485_306) * ssaal(1 + $I_L1530_224, 1 + $I_L1529_278, 9 + $I_L1485_306) * taual(1 + $I_L1530_224, 1 + $I_L1529_278, 9 + $I_L1485_306)
 1537.                         asysto(1 + $I_L1530_224, 1 + $I_L1529_278) = $asysto_WR0_R2
 1540.                         tautob(1 + $I_L1530_224, 1 + $I_L1529_278) = $tausto_WR0_R0
 1542.                         ssatob(1 + $I_L1530_224, 1 + $I_L1529_278) = ( min( 9.9999899999999997e-1, ( 1.0e-8 + ( $ssatau_WR0_R1 * 1.0/$tausto_WR0_R0 ) ) ) )
 1543.                         asytob(1 + $I_L1530_224, 1 + $I_L1529_278) = ( $asysto_WR0_R2 * 1.0/( ( min( 9.9999899999999997e-1, ( 1.0e-8 + ( $ssatau_WR0_R1 * 1.0/$tausto_WR0_R0 ) ) ) ) * $tausto_WR0_R0 ) )
 1544.                         $I_L1530_224 = 1 + $I_L1530_224
 1530.                         if ( $I_L1530_224 >= m ) exit
 1530.                      enddo
 1549.                      $I_L1549_226 = 0
 1549. !dir$ ivdep
 1549.                      do
 1549.                         $zth_S50 = cosz(1 + $I_L1549_226)
 1549.                         $ff_S46 = asytob(1 + $I_L1549_226, 1 + $I_L1529_278) * asytob(1 + $I_L1549_226, 1 + $I_L1529_278)
 1549.                         $xx_S47 = 1.0 + -( $ff_S46 * ssatob(1 + $I_L1549_226, 1 + $I_L1529_278) )
 1549.                         $taup_S57 = tautob(1 + $I_L1549_226, 1 + $I_L1529_278) * $xx_S47
 1549.                         $sscp_S49 = ( ssatob(1 + $I_L1549_226, 1 + $I_L1529_278) * ( 1.0 + -$ff_S46 ) * 1.0/$xx_S47 )
 1549.                         $gp_S48 = ( asytob(1 + $I_L1549_226, 1 + $I_L1529_278) * 1.0/( 1.0 + asytob(1 + $I_L1549_226, 1 + $I_L1529_278) ) )
 1549.                         $gm1_S52 = 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) )
 1549.                         $gm2_S51 = -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) )
 1549.                         $akk_S56 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) )
 1549.                         $st7_S54 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) ) * $zth_S50 )
 1549.                         $st8_S53 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) ) * $zth_S50 )
 1549.                         $st3_S55 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) ) * $zth_S50 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) ) * $zth_S50 ) )
 1549.                         if ( abs( ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) ) * $zth_S50 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S49 * ( 4.0 + ( 3.0 * $gp_S48 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S49 * ( 4.0 + -( 3.0 * $gp_S48 ) ) ) ) ) ) ) * $zth_S50 ) ) ) < 1.0e-8 ) then
 1549.                            $zth_S50 = 1.0e-3 + $zth_S50
 1549.                            $st7_S54 = 1.0 + -( $akk_S56 * $zth_S50 )
 1549.                            $st8_S53 = 1.0 + ( $akk_S56 * $zth_S50 )
 1549.                            $st3_S55 = ( 1.0 + -( $akk_S56 * $zth_S50 ) ) * ( 1.0 + ( $akk_S56 * $zth_S50 ) )
 1549.                         endif
 1549.                         $tdt_WR0_R5 = _expn( -( $taup_S57 * 1.0/$zth_S50 ) )
 1549.                         tdt(1 + $I_L1549_226, 1 + $I_L1529_278) = $tdt_WR0_R5
 1549.                         $gm3_S58 = 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 )
 1549.                         $alf1_S61 = $gm1_S52 + -( ( 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 ) ) * ( $gm1_S52 + -$gm2_S51 ) )
 1549.                         $temp_all_S60 = ( ( 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 ) ) + -( ( $gm2_S51 + ( 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 ) ) * ( $gm1_S52 + -$gm2_S51 ) ) * $zth_S50 ) ) * ( 2.0 * $akk_S56 ) * $tdt_WR0_R5
 1549.                         $st2_S59 = _expn( -( $akk_S56 * $taup_S57 ) )
 1549.                         rrt(1 + $I_L1549_226, 1 + $I_L1529_278) = ( max( 0.0, ( ( ( ( ( $gm2_S51 + $gm3_S58 * ( $gm1_S52 + -$gm2_S51 ) ) + ( $akk_S56 * $gm3_S58 ) ) * $st7_S54 ) + -( ( ( ( $gm2_S51 + $gm3_S58 * ( $gm1_S52 + -$gm2_S51 ) ) + -( $akk_S56 * $gm3_S58 ) ) * $st8_S53 ) * ( $st2_S59 * $st2_S59 ) ) + -( $temp_all_S60 * $st2_S59 ) ) * ( $sscp_S49 * 1.0/( ( $akk_S56 + $gm1_S52 + ( $akk_S56 + -$gm1_S52 ) * ( $st2_S59 * $st2_S59 ) ) * $st3_S55 ) ) ) ) )
 1549.                         $ttt_WR0_R7 = max( 0.0, ( -( ( ( ( ( $alf1_S61 + ( $akk_S56 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 ) ) ) ) ) * $st8_S53 ) + -( ( ( $alf1_S61 + -( $akk_S56 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 ) ) ) ) ) * $st7_S54 ) * ( $st2_S59 * $st2_S59 ) ) ) * $tdt_WR0_R5 + -( ( ( $alf1_S61 * $zth_S50 + -( 2.5e-1 * ( 2.0 + $gp_S48 * $zth_S50 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S56 ) ) * $st2_S59 ) ) * ( $sscp_S49 * 1.0/( ( $akk_S56 + $gm1_S52 + ( $akk_S56 + -$gm1_S52 ) * ( $st2_S59 * $st2_S59 ) ) * $st3_S55 ) ) ) ) ) + $tdt_WR0_R5
 1549.                         ttt(1 + $I_L1549_226, 1 + $I_L1529_278) = $ttt_WR0_R7
 1549.                         $I_L1549_226 = 1 + $I_L1549_226
 1549.                         if ( $I_L1549_226 >= m ) exit
 1549.                      enddo
 1545.                      $I_L1529_278 = 1 + $I_L1529_278
 1544.                      if ( $I_L1529_278 >= np ) exit
 1544.                   enddo
 1554.                   $I_L1554_280 = 0
 1554. !dir$ blocking_size( 0, 0 )
 1554.                   do
 1554.                      $I_L1554_228 = 0
 1554. !dir$ ivdep
 1554. !dir$ blocking_size( 0, 0 )
 1554.                      do
 1554.                         $zth_S68 = dsm(1 + $I_L1554_228)
 1554.                         $ff_S64 = asytob(1 + $I_L1554_228, 1 + $I_L1554_280) * asytob(1 + $I_L1554_228, 1 + $I_L1554_280)
 1554.                         $xx_S65 = 1.0 + -( $ff_S64 * ssatob(1 + $I_L1554_228, 1 + $I_L1554_280) )
 1554.                         $taup_S74 = tautob(1 + $I_L1554_228, 1 + $I_L1554_280) * $xx_S65
 1554.                         $sscp_S67 = ( ssatob(1 + $I_L1554_228, 1 + $I_L1554_280) * ( 1.0 + -$ff_S64 ) * 1.0/$xx_S65 )
 1554.                         $gp_S66 = ( asytob(1 + $I_L1554_228, 1 + $I_L1554_280) * 1.0/( 1.0 + asytob(1 + $I_L1554_228, 1 + $I_L1554_280) ) )
 1554.                         $gm1_S70 = 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) )
 1554.                         $gm2_S69 = -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) )
 1554.                         $akk_S73 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) )
 1554.                         $st7_S72 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) ) * $zth_S68 )
 1554.                         $st8_S71 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) ) * $zth_S68 )
 1554.                         $st3_S76 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) ) * $zth_S68 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) ) * $zth_S68 ) )
 1554.                         if ( abs( ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) ) * $zth_S68 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S67 * ( 4.0 + ( 3.0 * $gp_S66 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S67 * ( 4.0 + -( 3.0 * $gp_S66 ) ) ) ) ) ) ) * $zth_S68 ) ) ) < 1.0e-8 ) then
 1554.                            $zth_S68 = 1.0e-3 + $zth_S68
 1554.                            $st7_S72 = 1.0 + -( $akk_S73 * $zth_S68 )
 1554.                            $st8_S71 = 1.0 + ( $akk_S73 * $zth_S68 )
 1554.                            $st3_S76 = ( 1.0 + -( $akk_S73 * $zth_S68 ) ) * ( 1.0 + ( $akk_S73 * $zth_S68 ) )
 1554.                         endif
 1554.                         $dum_WR0_R8 = _expn( -( $taup_S74 * 1.0/$zth_S68 ) )
 1554.                         $gm3_S75 = 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 )
 1554.                         $alf1_S79 = $gm1_S70 + -( ( 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 ) ) * ( $gm1_S70 + -$gm2_S69 ) )
 1554.                         $temp_all_S78 = ( ( 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 ) ) + -( ( $gm2_S69 + ( 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 ) ) * ( $gm1_S70 + -$gm2_S69 ) ) * $zth_S68 ) ) * ( 2.0 * $akk_S73 ) * $dum_WR0_R8
 1554.                         $st2_S77 = _expn( -( $akk_S73 * $taup_S74 ) )
 1554.                         rst(1 + $I_L1554_228, 1 + $I_L1554_280) = ( max( 0.0, ( ( ( ( ( $gm2_S69 + $gm3_S75 * ( $gm1_S70 + -$gm2_S69 ) ) + ( $akk_S73 * $gm3_S75 ) ) * $st7_S72 ) + -( ( ( ( $gm2_S69 + $gm3_S75 * ( $gm1_S70 + -$gm2_S69 ) ) + -( $akk_S73 * $gm3_S75 ) ) * $st8_S71 ) * ( $st2_S77 * $st2_S77 ) ) + -( $temp_all_S78 * $st2_S77 ) ) * ( $sscp_S67 * 1.0/( ( $akk_S73 + $gm1_S70 + ( $akk_S73 + -$gm1_S70 ) * ( $st2_S77 * $st2_S77 ) ) * $st3_S76 ) ) ) ) )
 1554.                         $tst_WR0_R10 = max( 0.0, ( -( ( ( ( ( $alf1_S79 + ( $akk_S73 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 ) ) ) ) ) * $st8_S71 ) + -( ( ( $alf1_S79 + -( $akk_S73 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 ) ) ) ) ) * $st7_S72 ) * ( $st2_S77 * $st2_S77 ) ) ) * $dum_WR0_R8 + -( ( ( $alf1_S79 * $zth_S68 + -( 2.5e-1 * ( 2.0 + $gp_S66 * $zth_S68 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S73 ) ) * $st2_S77 ) ) * ( $sscp_S67 * 1.0/( ( $akk_S73 + $gm1_S70 + ( $akk_S73 + -$gm1_S70 ) * ( $st2_S77 * $st2_S77 ) ) * $st3_S76 ) ) ) ) ) + $dum_WR0_R8
 1554.                         tst(1 + $I_L1554_228, 1 + $I_L1554_280) = $tst_WR0_R10
 1554.                         $I_L1554_228 = 1 + $I_L1554_228
 1554.                         if ( $I_L1554_228 >= m ) exit
 1554.                      enddo
 1554.                      $I_L1554_280 = 1 + $I_L1554_280
 1554.                      if ( $I_L1554_280 >= np ) exit
 1554.                   enddo
 1556.                   $I_L1556_282 = 0
 1556.                   do
 1557.                      $I_L1557_230 = 0
 1557. !dir$ ivdep
 1557.                      do
 1558.                         rr(1 + $I_L1557_230, 1 + $I_L1556_282, 1) = rrt(1 + $I_L1557_230, 1 + $I_L1556_282)
 1559.                         tt(1 + $I_L1557_230, 1 + $I_L1556_282, 1) = ttt(1 + $I_L1557_230, 1 + $I_L1556_282)
 1560.                         td(1 + $I_L1557_230, 1 + $I_L1556_282, 1) = tdt(1 + $I_L1557_230, 1 + $I_L1556_282)
 1561.                         rs(1 + $I_L1557_230, 1 + $I_L1556_282, 1) = rst(1 + $I_L1557_230, 1 + $I_L1556_282)
 1562.                         ts(1 + $I_L1557_230, 1 + $I_L1556_282, 1) = tst(1 + $I_L1557_230, 1 + $I_L1556_282)
 1563.                         $I_L1557_230 = 1 + $I_L1557_230
 1557.                         if ( $I_L1557_230 >= m ) exit
 1557.                      enddo
 1568.                      $I_L1568_232 = 0
 1568. !dir$ ivdep
 1568.                      do
 1570.                         $tautob_WR0_R11 = tausto(1 + $I_L1568_232, 1 + $I_L1556_282) + tauclb(1 + $I_L1568_232, 1 + $I_L1556_282)
 1570.                         tautob(1 + $I_L1568_232, 1 + $I_L1556_282) = $tautob_WR0_R11
 1571.                         $ssatob_WR0_R12 = 1.0e-8 + ( ( ssatau(1 + $I_L1568_232, 1 + $I_L1556_282) + ssacl(1 + $I_L1568_232, 1 + $I_L1556_282) * tauclb(1 + $I_L1568_232, 1 + $I_L1556_282) ) * 1.0/$tautob_WR0_R11 )
 1573.                         $ssatob_WR0_R12 = min( 9.9999899999999997e-1, $ssatob_WR0_R12 )
 1573.                         ssatob(1 + $I_L1568_232, 1 + $I_L1556_282) = $ssatob_WR0_R12
 1574.                         asytob(1 + $I_L1568_232, 1 + $I_L1556_282) = ( ( asysto(1 + $I_L1568_232, 1 + $I_L1556_282) + asycl(1 + $I_L1568_232, 1 + $I_L1556_282) * ssacl(1 + $I_L1568_232, 1 + $I_L1556_282) * tauclb(1 + $I_L1568_232, 1 + $I_L1556_282) ) * 1.0/( $ssatob_WR0_R12 * $tautob_WR0_R11 ) )
 1578.                         $tautof_WR0_R13 = tausto(1 + $I_L1568_232, 1 + $I_L1556_282) + tauclf(1 + $I_L1568_232, 1 + $I_L1556_282)
 1578.                         tautof(1 + $I_L1568_232, 1 + $I_L1556_282) = $tautof_WR0_R13
 1579.                         $ssatof_WR0_R14 = 1.0e-8 + ( ( ssatau(1 + $I_L1568_232, 1 + $I_L1556_282) + ssacl(1 + $I_L1568_232, 1 + $I_L1556_282) * tauclf(1 + $I_L1568_232, 1 + $I_L1556_282) ) * 1.0/$tautof_WR0_R13 )
 1581.                         $ssatof_WR0_R14 = min( 9.9999899999999997e-1, $ssatof_WR0_R14 )
 1581.                         ssatof(1 + $I_L1568_232, 1 + $I_L1556_282) = $ssatof_WR0_R14
 1582.                         asytof(1 + $I_L1568_232, 1 + $I_L1556_282) = ( ( asysto(1 + $I_L1568_232, 1 + $I_L1556_282) + asycl(1 + $I_L1568_232, 1 + $I_L1556_282) * ssacl(1 + $I_L1568_232, 1 + $I_L1556_282) * tauclf(1 + $I_L1568_232, 1 + $I_L1556_282) ) * 1.0/( $ssatof_WR0_R14 * $tautof_WR0_R13 ) )
 1584.                         $I_L1568_232 = 1 + $I_L1568_232
 1568.                         if ( $I_L1568_232 >= m ) exit
 1568.                      enddo
 1589.                      $I_L1589_234 = 0
 1589. !dir$ ivdep
 1589.                      do
 1589.                         $zth_S90 = cosz(1 + $I_L1589_234)
 1589.                         $ff_S86 = asytob(1 + $I_L1589_234, 1 + $I_L1556_282) * asytob(1 + $I_L1589_234, 1 + $I_L1556_282)
 1589.                         $xx_S87 = 1.0 + -( $ff_S86 * ssatob(1 + $I_L1589_234, 1 + $I_L1556_282) )
 1589.                         $taup_S94 = tautob(1 + $I_L1589_234, 1 + $I_L1556_282) * $xx_S87
 1589.                         $sscp_S89 = ( ssatob(1 + $I_L1589_234, 1 + $I_L1556_282) * ( 1.0 + -$ff_S86 ) * 1.0/$xx_S87 )
 1589.                         $gp_S88 = ( asytob(1 + $I_L1589_234, 1 + $I_L1556_282) * 1.0/( 1.0 + asytob(1 + $I_L1589_234, 1 + $I_L1556_282) ) )
 1589.                         $gm1_S92 = 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) )
 1589.                         $gm2_S91 = -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) )
 1589.                         $akk_S93 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) )
 1589.                         $st7_S99 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) ) * $zth_S90 )
 1589.                         $st8_S97 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) ) * $zth_S90 )
 1589.                         $st3_S95 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) ) * $zth_S90 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) ) * $zth_S90 ) )
 1589.                         if ( abs( ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) ) * $zth_S90 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S89 * ( 4.0 + ( 3.0 * $gp_S88 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S89 * ( 4.0 + -( 3.0 * $gp_S88 ) ) ) ) ) ) ) * $zth_S90 ) ) ) < 1.0e-8 ) then
 1589.                            $zth_S90 = 1.0e-3 + $zth_S90
 1589.                            $st7_S99 = 1.0 + -( $akk_S93 * $zth_S90 )
 1589.                            $st8_S97 = 1.0 + ( $akk_S93 * $zth_S90 )
 1589.                            $st3_S95 = ( 1.0 + -( $akk_S93 * $zth_S90 ) ) * ( 1.0 + ( $akk_S93 * $zth_S90 ) )
 1589.                         endif
 1589.                         $tdt_WR0_R15 = _expn( -( $taup_S94 * 1.0/$zth_S90 ) )
 1589.                         tdt(1 + $I_L1589_234, 1 + $I_L1556_282) = $tdt_WR0_R15
 1589.                         $gm3_S98 = 2.5e-1 * ( 2.0 + $gp_S88 * $zth_S90 * -3.0 )
 1589.                         $alf1_S101 = $gm1_S92 + -( ( 2.5e-1 * ( 2.0 + $gp_S88 * $zth_S90 * -3.0 ) ) * ( $gm1_S92 + -$gm2_S91 ) )
 1589.                         $temp_all_S100 = ( ( 2.5e-1 * ( 2.0 + $gp_S88 * $zth_S90 * -3.0 ) ) + -( ( $gm2_S91 + ( 2.5e-1 * ( 2.0 + $gp_S88 * $zth_S90 * -3.0 ) ) * ( $gm1_S92 + -$gm2_S91 ) ) * $zth_S90 ) ) * ( 2.0 * $akk_S93 ) * $tdt_WR0_R15
 1589.                         $st2_S96 = _expn( -( $akk_S93 * $taup_S94 ) )
 1589.                         $ttt_WR0_R17 = -( ( ( ( ( ( $gm1_S92 + -( $gm3_S98 * ( $gm1_S92 + -$gm2_S91 ) ) ) + ( $akk_S93 * ( 1.0 + -$gm3_S98 ) ) ) * $st8_S97 ) + -( ( ( ( $gm1_S92 + -( $gm3_S98 * ( $gm1_S92 + -$gm2_S91 ) ) ) + -( $akk_S93 * ( 1.0 + -$gm3_S98 ) ) ) * $st7_S99 ) * ( $st2_S96 * $st2_S96 ) ) ) * $tdt_WR0_R15 + -( ( ( $alf1_S101 * $zth_S90 + -$gm3_S98 + 1.0 ) * ( 2.0 * $akk_S93 ) ) * $st2_S96 ) ) * ( $sscp_S89 * 1.0/( ( $akk_S93 + $gm1_S92 + ( $akk_S93 + -$gm1_S92 ) * ( $st2_S96 * $st2_S96 ) ) * $st3_S95 ) ) )
 1589.                         $rrt_WR0_R16 = max( 0.0, ( ( ( ( ( $gm2_S91 + $gm3_S98 * ( $gm1_S92 + -$gm2_S91 ) ) + ( $akk_S93 * ( 2.5e-1 * ( 2.0 + $gp_S88 * $zth_S90 * -3.0 ) ) ) ) * $st7_S99 ) + -( ( ( ( $gm2_S91 + $gm3_S98 * ( $gm1_S92 + -$gm2_S91 ) ) + -( $akk_S93 * ( 2.5e-1 * ( 2.0 + $gp_S88 * $zth_S90 * -3.0 ) ) ) ) * $st8_S97 ) * ( $st2_S96 * $st2_S96 ) ) + -( $temp_all_S100 * $st2_S96 ) ) * ( $sscp_S89 * 1.0/( ( $akk_S93 + $gm1_S92 + ( $akk_S93 + -$gm1_S92 ) * ( $st2_S96 * $st2_S96 ) ) * $st3_S95 ) ) ) )
 1589.                         rrt(1 + $I_L1589_234, 1 + $I_L1556_282) = $rrt_WR0_R16
 1589.                         $ttt_WR0_R17 = max( 0.0, $ttt_WR0_R17 ) + $tdt_WR0_R15
 1589.                         ttt(1 + $I_L1589_234, 1 + $I_L1556_282) = $ttt_WR0_R17
 1589.                         $I_L1589_234 = 1 + $I_L1589_234
 1589.                         if ( $I_L1589_234 >= m ) exit
 1589.                      enddo
 1564.                      $I_L1556_282 = 1 + $I_L1556_282
 1563.                      if ( $I_L1556_282 >= np ) exit
 1563.                   enddo
 1594.                   $I_L1594_284 = 0
 1594. !dir$ blocking_size( 0, 0 )
 1594.                   do
 1594.                      $I_L1594_236 = 0
 1594. !dir$ ivdep
 1594. !dir$ blocking_size( 0, 0 )
 1594.                      do
 1594.                         $zth_S108 = dsm(1 + $I_L1594_236)
 1594.                         $ff_S104 = asytof(1 + $I_L1594_236, 1 + $I_L1594_284) * asytof(1 + $I_L1594_236, 1 + $I_L1594_284)
 1594.                         $xx_S105 = 1.0 + -( $ff_S104 * ssatof(1 + $I_L1594_236, 1 + $I_L1594_284) )
 1594.                         $taup_S111 = tautof(1 + $I_L1594_236, 1 + $I_L1594_284) * $xx_S105
 1594.                         $sscp_S107 = ( ssatof(1 + $I_L1594_236, 1 + $I_L1594_284) * ( 1.0 + -$ff_S104 ) * 1.0/$xx_S105 )
 1594.                         $gp_S106 = ( asytof(1 + $I_L1594_236, 1 + $I_L1594_284) * 1.0/( 1.0 + asytof(1 + $I_L1594_236, 1 + $I_L1594_284) ) )
 1594.                         $gm1_S113 = 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) )
 1594.                         $gm2_S112 = -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) )
 1594.                         $akk_S110 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) )
 1594.                         $st7_S116 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) ) * $zth_S108 )
 1594.                         $st8_S115 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) ) * $zth_S108 )
 1594.                         $st3_S109 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) ) * $zth_S108 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S107 * ( 4.0 + ( 3.0 * $gp_S106 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S107 * ( 4.0 + -( 3.0 * $gp_S106 ) ) ) ) ) ) ) * $zth_S108 ) )
 1594.                         if ( abs( $st3_S109 ) < 1.0e-8 ) then
 1594.                            $zth_S108 = 1.0e-3 + $zth_S108
 1594.                            $st7_S116 = 1.0 + -( $akk_S110 * $zth_S108 )
 1594.                            $st8_S115 = 1.0 + ( $akk_S110 * $zth_S108 )
 1594.                            $st3_S109 = ( 1.0 + -( $akk_S110 * $zth_S108 ) ) * ( 1.0 + ( $akk_S110 * $zth_S108 ) )
 1594.                         endif
 1594.                         $dum_WR0_R18 = _expn( -( $taup_S111 * 1.0/$zth_S108 ) )
 1594.                         $alf1_S119 = $gm1_S113 + -( ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) * ( $gm1_S113 + -$gm2_S112 ) )
 1594.                         $temp_all_S117 = ( ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) + -( ( $gm2_S112 + ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) * ( $gm1_S113 + -$gm2_S112 ) ) * $zth_S108 ) ) * ( 2.0 * $akk_S110 ) * $dum_WR0_R18
 1594.                         $bll_S118 = ( ( $gm1_S113 + -( ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) * ( $gm1_S113 + -$gm2_S112 ) ) ) * $zth_S108 + -( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S110 )
 1594.                         $st2_S114 = _expn( -( $akk_S110 * $taup_S111 ) )
 1594.                         $rst_WR0_R19 = max( 0.0, ( ( ( ( ( $gm2_S112 + ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) * ( $gm1_S113 + -$gm2_S112 ) ) + ( $akk_S110 * ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) ) ) * $st7_S116 ) + -( ( ( ( $gm2_S112 + ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) * ( $gm1_S113 + -$gm2_S112 ) ) + -( $akk_S110 * ( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) ) ) * $st8_S115 ) * ( $st2_S114 * $st2_S114 ) ) + -( $temp_all_S117 * $st2_S114 ) ) * ( $sscp_S107 * 1.0/( ( $akk_S110 + $gm1_S113 + ( $akk_S110 + -$gm1_S113 ) * ( $st2_S114 * $st2_S114 ) ) * $st3_S109 ) ) ) )
 1594.                         rst(1 + $I_L1594_236, 1 + $I_L1594_284) = $rst_WR0_R19
 1594.                         $tst_WR0_R20 = max( 0.0, ( -( ( ( ( ( $alf1_S119 + ( $akk_S110 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) ) ) ) * $st8_S115 ) + -( ( ( $alf1_S119 + -( $akk_S110 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S106 * $zth_S108 * -3.0 ) ) ) ) ) * $st7_S116 ) * ( $st2_S114 * $st2_S114 ) ) ) * $dum_WR0_R18 + -( $bll_S118 * $st2_S114 ) ) * ( $sscp_S107 * 1.0/( ( $akk_S110 + $gm1_S113 + ( $akk_S110 + -$gm1_S113 ) * ( $st2_S114 * $st2_S114 ) ) * $st3_S109 ) ) ) ) ) + $dum_WR0_R18
 1594.                         tst(1 + $I_L1594_236, 1 + $I_L1594_284) = $tst_WR0_R20
 1594.                         $I_L1594_236 = 1 + $I_L1594_236
 1594.                         if ( $I_L1594_236 >= m ) exit
 1594.                      enddo
 1594.                      $I_L1594_284 = 1 + $I_L1594_284
 1594.                      if ( $I_L1594_284 >= np ) exit
 1594.                   enddo
 1596.                   $I_L1596_286 = 0
 1596.                   do
 1597.                      $I_L1597_238 = 0
 1597. !dir$ ivdep
 1597.                      do
 1598.                         rr(1 + $I_L1597_238, 1 + $I_L1596_286, 2) = rrt(1 + $I_L1597_238, 1 + $I_L1596_286)
 1599.                         tt(1 + $I_L1597_238, 1 + $I_L1596_286, 2) = ttt(1 + $I_L1597_238, 1 + $I_L1596_286)
 1600.                         td(1 + $I_L1597_238, 1 + $I_L1596_286, 2) = tdt(1 + $I_L1597_238, 1 + $I_L1596_286)
 1601.                         rs(1 + $I_L1597_238, 1 + $I_L1596_286, 2) = rst(1 + $I_L1597_238, 1 + $I_L1596_286)
 1602.                         ts(1 + $I_L1597_238, 1 + $I_L1596_286, 2) = tst(1 + $I_L1597_238, 1 + $I_L1596_286)
 1603.                         $I_L1597_238 = 1 + $I_L1597_238
 1597.                         if ( $I_L1597_238 >= m ) exit
 1597.                      enddo
 1604.                      $I_L1596_286 = 1 + $I_L1596_286
 1603.                      if ( $I_L1596_286 >= np ) exit
 1603.                   enddo
 1603.                endif
 1603.             endif
 1549.             t$104 = m
 1549.             t$105 = np
 1549.             t$619 = max( 0, m )
 1549.             t$620 = m
 1549.             t$621 = max( 0, np )
 1549.             t$622 = ( m * np )
 1554.             t$104 = m
 1554.             t$105 = np
 1554.             t$619 = max( 0, m )
 1554.             t$620 = m
 1554.             t$621 = max( 0, np )
 1554.             t$622 = ( m * np )
 1589.             t$104 = m
 1589.             t$105 = np
 1589.             t$619 = max( 0, m )
 1589.             t$620 = m
 1589.             t$621 = max( 0, np )
 1589.             t$622 = ( m * np )
 1594.             t$104 = m
 1594.             t$105 = np
 1594.             t$619 = max( 0, m )
 1594.             t$620 = m
 1594.             t$621 = max( 0, np )
 1594.             t$622 = ( m * np )
 1626.             ih1 = 1
 1627.             ih2 = 2
 1628.             im1 = 1
 1629.             im2 = 2
 1630.             is1 = 1
 1631.             is2 = 2
 1633.             call cldflx( m, np, ict, icb, ih1, ih2, im1, im2, is1, is2, cc(1, 1), rr(1, 1, 1), tt(1, 1, 1), td(1, 1, 1), rs(1, 1, 1), ts(1, 1, 1), fclr(1, 1), fall(1, 1), fsdir(1), fsdif(1), fsdir_c(1), fsdif_c(1), fclr_d(1, 1), fclr_u(1, 1), fall_d(1, 1), fall_u(1, 1) )
 1639.             if ( np >= 0 ) then
 1640.                if ( m > 0 ) then
 1641.                   $SC_hk2_I3 = hk2(1 + $I_L1485_306, 1 + $I_L1528_298)
 1639.                   $I_L1639_296 = 0
 1639.                   do
 1640.                      $I_L1640_268 = 0
 1640. !dir$ ivdep
 1640.                      do
 1641.                         flx_d(1 + $I_L1640_268, 1 + $I_L1639_296) = flx_d(1 + $I_L1640_268, 1 + $I_L1639_296) + fall_d(1 + $I_L1640_268, 1 + $I_L1639_296) * $SC_hk2_I3
 1642.                         flx_u(1 + $I_L1640_268, 1 + $I_L1639_296) = flx_u(1 + $I_L1640_268, 1 + $I_L1639_296) + fall_u(1 + $I_L1640_268, 1 + $I_L1639_296) * $SC_hk2_I3
 1643.                         flx(1 + $I_L1640_268, 1 + $I_L1639_296) = flx(1 + $I_L1640_268, 1 + $I_L1639_296) + fall(1 + $I_L1640_268, 1 + $I_L1639_296) * $SC_hk2_I3
 1647.                         flc(1 + $I_L1640_268, 1 + $I_L1639_296) = flc(1 + $I_L1640_268, 1 + $I_L1639_296) + fclr(1 + $I_L1640_268, 1 + $I_L1639_296) * $SC_hk2_I3
 1648.                         flc_d(1 + $I_L1640_268, 1 + $I_L1639_296) = flc_d(1 + $I_L1640_268, 1 + $I_L1639_296) + fclr_d(1 + $I_L1640_268, 1 + $I_L1639_296) * $SC_hk2_I3
 1649.                         flc_u(1 + $I_L1640_268, 1 + $I_L1639_296) = flc_u(1 + $I_L1640_268, 1 + $I_L1639_296) + fclr_u(1 + $I_L1640_268, 1 + $I_L1639_296) * $SC_hk2_I3
 1644.                         $I_L1640_268 = 1 + $I_L1640_268
 1640.                         if ( $I_L1640_268 >= m ) exit
 1640.                      enddo
 1651.                      $I_L1639_296 = 1 + $I_L1639_296
 1650.                      if ( $I_L1639_296 >= 1 + np ) exit
 1650.                   enddo
 1650.                endif
 1650.             endif
 1655.             if ( m > 0 ) then
 1656.                $SC_hk2_I0 = hk2(1 + $I_L1485_306, 1 + $I_L1528_298)
 1655.                $I_L1655_240 = 0
 1655. !dir$ ivdep
 1655.                do
 1656.                   fdirir(1 + $I_L1655_240) = fdirir(1 + $I_L1655_240) + fsdir(1 + $I_L1655_240) * $SC_hk2_I0
 1657.                   fdifir(1 + $I_L1655_240) = fdifir(1 + $I_L1655_240) + fsdif(1 + $I_L1655_240) * $SC_hk2_I0
 1658.                   fdirir_c(1 + $I_L1655_240) = fdirir_c(1 + $I_L1655_240) + fsdir_c(1 + $I_L1655_240) * $SC_hk2_I0
 1659.                   fdifir_c(1 + $I_L1655_240) = fdifir_c(1 + $I_L1655_240) + fsdif_c(1 + $I_L1655_240) * $SC_hk2_I0
 1660.                   $I_L1655_240 = 1 + $I_L1655_240
 1655.                   if ( $I_L1655_240 >= m ) exit
 1655.                enddo
 1655.             endif
 1662.             $I_L1528_298 = 1 + $I_L1528_298
 1660.             if ( $I_L1528_298 >= 10 ) exit
 1660.          enddo
 1663.          $I_L1485_306 = 1 + $I_L1485_306
 1662.          if ( $I_L1485_306 >= 3 ) exit
 1662.       enddo
 1352.       _free( t$375 )
 1665.       return
 1665.       end
 1665.       
 1745.       
 1745.       subroutine soluvcld( m, np, wh, oh, dp, taucld, reff, ict, icb, fcld, cosz, taual, ssaal, asyal, rsuvbm, rsuvdf, flx, flc, fdiruv, fdifuv, fdirpar, fdifpar, fdiruv_c, fdifuv_c, fdirpar_c, fdifpar_c, flx_d, flx_u, flc_d, flc_u )
 1745.       t$96 = m
 1745.       t$97 = np
 1793.       t$492 = _zla( 0, m )
 1745.       t$493 = _zla( 0, m )
 1793.       t$494 = _zla( 0, np )
 1745.       t$495 = _zla( 0, m ) * _zla( 0, np )
 1745.       t$496 = _zla( 0, m ) * _zla( 0, np )
 1745.       t$497 = _zla( 0, m ) * _zla( 0, np ) * 3
 1745.       t$498 = _zla( 0, m ) * _zla( 0, np ) * 11
 1745.       t$98 = ( 1 + np )
 1797.       t$499 = _zla( 0, ( 1 + np ) )
 1745.       t$500 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 1809.       t$503 = _zla( 0, m ) * _zla( 0, np ) * 8
 1807.       t$504 = _zla( 0, m ) * _zla( 0, np ) * 8
 1807.       t$506 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * _zla( 0, m )
 1810.       t$507 = _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * _zla( 0, m )
 1810.       t$509 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1810.       t$510 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1810.       t$512 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 24
 1809.       t$513 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 24
 1809.       t$515 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 32
 1745.       t$516 = 3 * _zla( 0, m )
 1808.       t$517 = 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 32
 1808.       t$519 = _zla( 0, m ) * _zla( 0, np ) * 32 + 32 * _zla( 0, m )
 1807.       t$520 = _zla( 0, m ) * _zla( 0, np ) * 32 + 32 * _zla( 0, m )
 1807.       t$522 = _zla( 0, m ) * _zla( 0, np ) * 32 + 40 * _zla( 0, m )
 1811.       t$523 = _zla( 0, m ) * _zla( 0, np ) * 32 + 40 * _zla( 0, m )
 1811.       t$525 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$526 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$528 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$529 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8
 1812.       t$531 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$532 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
 1812.       t$534 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 1812.       t$535 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24 + 40 * _zla( 0, m )
 1812.       t$537 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32
 1812.       t$538 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32 + 40 * _zla( 0, m )
 1812.       t$540 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40
 1812.       t$541 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40 + 40 * _zla( 0, m )
 1812.       t$543 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48
 1807.       t$544 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 40 * _zla( 0, m )
 1807.       t$546 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 48 * _zla( 0, m )
 1807.       t$547 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 48 * _zla( 0, m )
 1807.       t$549 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 56 * _zla( 0, m )
 1807.       t$550 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 56 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1807.       t$552 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 64 * _zla( 0, m )
 1807.       t$553 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 64 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1807.       t$555 = _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 72 * _zla( 0, m )
 1745.       t$556 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 1745.       t$557 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 2
 1813.       t$558 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1813.       t$560 = _zla( 0, m ) * _zla( 0, np ) * 40 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64
 1811.       t$561 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 40
 1811.       t$563 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 48
 1813.       t$564 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 48 + 72 * _zla( 0, m )
 1813.       t$566 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 48 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1811.       t$567 = _zla( 0, m ) * _zla( 0, np ) * 48 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + 72 * _zla( 0, m )
 1811.       t$569 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 56
 1810.       t$570 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 56 + 72 * _zla( 0, m )
 1810.       t$572 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64
 1810.       t$573 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64 + 72 * _zla( 0, m )
 1810.       t$575 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 72
 1809.       t$576 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 72 + 72 * _zla( 0, m )
 1809.       t$578 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 80
 1809.       t$579 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 80 + 72 * _zla( 0, m )
 1809.       t$581 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 88
 1809.       t$582 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 88 + 72 * _zla( 0, m )
 1809.       t$584 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 96
 1810.       t$585 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 96 + 72 * _zla( 0, m )
 1810.       t$587 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 104
 1810.       t$588 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 104 + 72 * _zla( 0, m )
 1810.       t$590 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 112
 1809.       t$591 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 112 + 72 * _zla( 0, m )
 1809.       t$593 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 120
 1813.       t$594 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 120 + 72 * _zla( 0, m )
 1813.       t$596 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96
 1811.       t$597 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96
 1811.       t$599 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + _zla( 0, m ) * _zla( 0, np ) * 128
 1813.       t$600 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + _zla( 0, m ) * _zla( 0, np ) * 128 + 72 * _zla( 0, m )
 1813.       t$602 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112
 1811.       t$603 = _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + 72 * _zla( 0, m )
 1811.       t$605 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + _zla( 0, m ) * _zla( 0, np ) * 136
 1813.       t$606 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + _zla( 0, m ) * _zla( 0, np ) * 136 + 72 * _zla( 0, m )
 1813.       t$608 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 136 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128
 1811.       t$609 = _zla( 0, m ) * _zla( 0, np ) * 136 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128 + 72 * _zla( 0, m )
 1811.       t$611 = 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128 + _zla( 0, m ) * _zla( 0, np ) * 144
 1745.       t$501 = int( _alloc( 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128 + _zla( 0, m ) * _zla( 0, np ) * 144 ), 8 )
 1809.       t$502 = t$501
 1807.       t$505 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 8
 1810.       t$508 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 8 + 8 * _zla( 0, m )
 1810.       t$511 = t$501 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 16
 1809.       t$514 = t$501 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 24
 1808.       t$518 = t$501 + 8 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 32
 1807.       t$521 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 32 + 32 * _zla( 0, m )
 1811.       t$524 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 32 + 40 * _zla( 0, m )
 1812.       t$527 = t$501 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$530 = t$501 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$533 = t$501 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40
 1812.       t$536 = t$501 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 1812.       t$539 = t$501 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 32
 1812.       t$542 = t$501 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 40
 1807.       t$545 = t$501 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48
 1807.       t$548 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 48 * _zla( 0, m )
 1807.       t$551 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 56 * _zla( 0, m )
 1807.       t$554 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 64 * _zla( 0, m )
 1813.       t$559 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 40 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 48 + 72 * _zla( 0, m )
 1811.       t$562 = t$501 + _zla( 0, m ) * _zla( 0, np ) * 40 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64
 1813.       t$565 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 64 + _zla( 0, m ) * _zla( 0, np ) * 48
 1811.       t$568 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 48 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80
 1810.       t$571 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 56
 1810.       t$574 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 64
 1809.       t$577 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 72
 1809.       t$580 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 80
 1809.       t$583 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 88
 1810.       t$586 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 96
 1810.       t$589 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 104
 1809.       t$592 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 112
 1813.       t$595 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 80 + _zla( 0, m ) * _zla( 0, np ) * 120
 1811.       t$598 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 120 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96
 1813.       t$601 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 96 + _zla( 0, m ) * _zla( 0, np ) * 128
 1811.       t$604 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 128 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112
 1813.       t$607 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 112 + _zla( 0, m ) * _zla( 0, np ) * 136
 1811.       t$610 = t$501 + 72 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, np ) * 136 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 128
 1825.       $F_A33 = m
 1825.       if ( m > 0 ) then
 1825.          $I_L1825_174 = 0
 1825. !dir$ ivdep
 1825.          do
 1825.             dsm(1 + $I_L1825_174) = 6.0199999999999998e-1
 1825.             $I_L1825_174 = 1 + $I_L1825_174
 1825.             if ( $I_L1825_174 >= $F_A33 ) exit
 1825.          enddo
 1825.       endif
 1826.       $F_A34 = m
 1826.       if ( m > 0 ) then
 1826.          $I_L1826_176 = 0
 1826. !dir$ ivdep
 1826.          do
 1826.             fdiruv(1 + $I_L1826_176) = 0.0
 1826.             $I_L1826_176 = 1 + $I_L1826_176
 1826.             if ( $I_L1826_176 >= $F_A34 ) exit
 1826.          enddo
 1826.       endif
 1827.       $F_A35 = m
 1827.       if ( m > 0 ) then
 1827.          $I_L1827_178 = 0
 1827. !dir$ ivdep
 1827.          do
 1827.             fdifuv(1 + $I_L1827_178) = 0.0
 1827.             $I_L1827_178 = 1 + $I_L1827_178
 1827.             if ( $I_L1827_178 >= $F_A35 ) exit
 1827.          enddo
 1827.       endif
 1828.       $F_A36 = m
 1828.       if ( m > 0 ) then
 1828.          $I_L1828_180 = 0
 1828. !dir$ ivdep
 1828.          do
 1828.             fdirpar(1 + $I_L1828_180) = 0.0
 1828.             $I_L1828_180 = 1 + $I_L1828_180
 1828.             if ( $I_L1828_180 >= $F_A36 ) exit
 1828.          enddo
 1828.       endif
 1829.       $F_A37 = m
 1829.       if ( m > 0 ) then
 1829.          $I_L1829_182 = 0
 1829. !dir$ ivdep
 1829.          do
 1829.             fdifpar(1 + $I_L1829_182) = 0.0
 1829.             $I_L1829_182 = 1 + $I_L1829_182
 1829.             if ( $I_L1829_182 >= $F_A37 ) exit
 1829.          enddo
 1829.       endif
 1830.       $F_A38 = m
 1830.       if ( m > 0 ) then
 1830.          $I_L1830_184 = 0
 1830. !dir$ ivdep
 1830.          do
 1830.             fdiruv_c(1 + $I_L1830_184) = 0.0
 1830.             $I_L1830_184 = 1 + $I_L1830_184
 1830.             if ( $I_L1830_184 >= $F_A38 ) exit
 1830.          enddo
 1830.       endif
 1831.       $F_A39 = m
 1831.       if ( m > 0 ) then
 1831.          $I_L1831_186 = 0
 1831. !dir$ ivdep
 1831.          do
 1831.             fdifuv_c(1 + $I_L1831_186) = 0.0
 1831.             $I_L1831_186 = 1 + $I_L1831_186
 1831.             if ( $I_L1831_186 >= $F_A39 ) exit
 1831.          enddo
 1831.       endif
 1832.       $F_A40 = m
 1832.       if ( m > 0 ) then
 1832.          $I_L1832_188 = 0
 1832. !dir$ ivdep
 1832.          do
 1832.             fdirpar_c(1 + $I_L1832_188) = 0.0
 1832.             $I_L1832_188 = 1 + $I_L1832_188
 1832.             if ( $I_L1832_188 >= $F_A40 ) exit
 1832.          enddo
 1832.       endif
 1833.       $F_A41 = m
 1833.       if ( m > 0 ) then
 1833.          $I_L1833_190 = 0
 1833. !dir$ ivdep
 1833.          do
 1833.             fdifpar_c(1 + $I_L1833_190) = 0.0
 1833.             $I_L1833_190 = 1 + $I_L1833_190
 1833.             if ( $I_L1833_190 >= $F_A41 ) exit
 1833.          enddo
 1833.       endif
 1834.       $F_A42 = m
 1834.       if ( m > 0 ) then
 1834.          $I_L1834_192 = 0
 1834. !dir$ ivdep
 1834.          do
 1834.             rr(1 + $I_L1834_192, 1 + np, 1) = rsuvbm(1 + $I_L1834_192)
 1834.             $I_L1834_192 = 1 + $I_L1834_192
 1834.             if ( $I_L1834_192 >= $F_A42 ) exit
 1834.          enddo
 1834.       endif
 1835.       $F_A43 = m
 1835.       if ( m > 0 ) then
 1835.          $I_L1835_194 = 0
 1835. !dir$ ivdep
 1835.          do
 1835.             rr(1 + $I_L1835_194, 1 + np, 2) = rsuvbm(1 + $I_L1835_194)
 1835.             $I_L1835_194 = 1 + $I_L1835_194
 1835.             if ( $I_L1835_194 >= $F_A43 ) exit
 1835.          enddo
 1835.       endif
 1836.       $F_A44 = m
 1836.       if ( m > 0 ) then
 1836.          $I_L1836_196 = 0
 1836. !dir$ ivdep
 1836.          do
 1836.             rs(1 + $I_L1836_196, 1 + np, 1) = rsuvdf(1 + $I_L1836_196)
 1836.             $I_L1836_196 = 1 + $I_L1836_196
 1836.             if ( $I_L1836_196 >= $F_A44 ) exit
 1836.          enddo
 1836.       endif
 1837.       $F_A45 = m
 1837.       if ( m > 0 ) then
 1837.          $I_L1837_198 = 0
 1837. !dir$ ivdep
 1837.          do
 1837.             rs(1 + $I_L1837_198, 1 + np, 2) = rsuvdf(1 + $I_L1837_198)
 1837.             $I_L1837_198 = 1 + $I_L1837_198
 1837.             if ( $I_L1837_198 >= $F_A45 ) exit
 1837.          enddo
 1837.       endif
 1838.       $F_A46 = ( 1 + np )
 1838.       $F_A47 = m
 1838.       if ( and( -$F_A47, -$F_A46 ) < 0 ) then
 1838.          $I_L1838_234 = 0
 1838.          do
 1838.             $I_L1838_222 = 0
 1838.             do
 1838.                $I_L1838_200 = 0
 1838. !dir$ ivdep
 1838.                do
 1838.                   td(1 + $I_L1838_200, 1 + $I_L1838_222, 1 + $I_L1838_234) = 0.0
 1838.                   $I_L1838_200 = 1 + $I_L1838_200
 1838.                   if ( $I_L1838_200 >= $F_A47 ) exit
 1838.                enddo
 1838.                $I_L1838_222 = 1 + $I_L1838_222
 1838.                if ( $I_L1838_222 >= $F_A46 ) exit
 1838.             enddo
 1838.             $I_L1838_234 = 1 + $I_L1838_234
 1838.             if ( $I_L1838_234 >= 2 ) exit
 1838.          enddo
 1838.       endif
 1839.       $F_A48 = ( 1 + np )
 1839.       $F_A49 = m
 1839.       if ( and( -$F_A49, -$F_A48 ) < 0 ) then
 1839.          $I_L1839_236 = 0
 1839.          do
 1839.             $I_L1839_224 = 0
 1839.             do
 1839.                $I_L1839_202 = 0
 1839. !dir$ ivdep
 1839.                do
 1839.                   tt(1 + $I_L1839_202, 1 + $I_L1839_224, 1 + $I_L1839_236) = 0.0
 1839.                   $I_L1839_202 = 1 + $I_L1839_202
 1839.                   if ( $I_L1839_202 >= $F_A49 ) exit
 1839.                enddo
 1839.                $I_L1839_224 = 1 + $I_L1839_224
 1839.                if ( $I_L1839_224 >= $F_A48 ) exit
 1839.             enddo
 1839.             $I_L1839_236 = 1 + $I_L1839_236
 1839.             if ( $I_L1839_236 >= 2 ) exit
 1839.          enddo
 1839.       endif
 1840.       $F_A50 = ( 1 + np )
 1840.       $F_A51 = m
 1840.       if ( and( -$F_A51, -$F_A50 ) < 0 ) then
 1840.          $I_L1840_238 = 0
 1840.          do
 1840.             $I_L1840_226 = 0
 1840.             do
 1840.                $I_L1840_204 = 0
 1840. !dir$ ivdep
 1840.                do
 1840.                   ts(1 + $I_L1840_204, 1 + $I_L1840_226, 1 + $I_L1840_238) = 0.0
 1840.                   $I_L1840_204 = 1 + $I_L1840_204
 1840.                   if ( $I_L1840_204 >= $F_A51 ) exit
 1840.                enddo
 1840.                $I_L1840_226 = 1 + $I_L1840_226
 1840.                if ( $I_L1840_226 >= $F_A50 ) exit
 1840.             enddo
 1840.             $I_L1840_238 = 1 + $I_L1840_238
 1840.             if ( $I_L1840_238 >= 2 ) exit
 1840.          enddo
 1840.       endif
 1841.       $F_A52 = m
 1841.       if ( m > 0 ) then
 1841.          $I_L1841_228 = 0
 1841.          do
 1841.             $I_L1841_206 = 0
 1841. !dir$ ivdep
 1841.             do
 1841.                cc(1 + $I_L1841_206, 1 + $I_L1841_228) = 0.0
 1841.                $I_L1841_206 = 1 + $I_L1841_206
 1841.                if ( $I_L1841_206 >= $F_A52 ) exit
 1841.             enddo
 1841.             $I_L1841_228 = 1 + $I_L1841_228
 1841.             if ( $I_L1841_228 >= 3 ) exit
 1841.          enddo
 1841.       endif
 1848.       call cldscale( m, np, cosz(1), fcld(1, 1), taucld(1, 1, 1), ict, icb, cc(1, 1), tauclb(1, 1), tauclf(1, 1) )
 1853.       if ( np > 0 ) then
 1854.          if ( m > 0 ) then
 1853.             $I_L1853_210 = 0
 1853.             do
 1854.                $I_L1854_150 = 0
 1854. !dir$ ivdep
 1854.                do
 1856.                   asyclt(1 + $I_L1854_150) = 1.0
 1857.                   $taux_S2 = taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 1) + taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 2) + taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 3)
 1858.                   if ( taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 1) + taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 2) + taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 3) > 2.0e-2 ) then
 1858.                      if ( fcld(1 + $I_L1854_150, 1 + $I_L1853_210) > 1.0e-2 ) then
 1859.                         $reff1_S3 = min( 130.0, reff(1 + $I_L1854_150, 1 + $I_L1853_210, 1) )
 1860.                         $reff2_S4 = min( 20.0, reff(1 + $I_L1854_150, 1 + $I_L1853_210, 2) )
 1861.                         $g1_S6 = ( 7.4624999999999997e-1 + ( 1.0541000000000001e-3 + -2.6400000000000001e-6 * $reff1_S3 ) * $reff1_S3 ) * taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 1)
 1862.                         $g2_S5 = ( 8.2562000000000002e-1 + ( 5.2900000000000004e-3 + -1.4866e-4 * $reff2_S4 ) * $reff2_S4 ) * taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 2)
 1863.                         $g3_S7 = 8.8300000000000001e-1 * taucld(1 + $I_L1854_150, 1 + $I_L1853_210, 3)
 1864.                         asyclt(1 + $I_L1854_150) = ( ( $g1_S6 + $g2_S5 + $g3_S7 ) * 1.0/$taux_S2 )
 1864.                      endif
 1864.                   endif
 1866.                   $I_L1854_150 = 1 + $I_L1854_150
 1865.                   if ( $I_L1854_150 >= m ) exit
 1865.                enddo
 1868.                $I_L1868_152 = 0
 1868. !dir$ ivdep
 1868.                do
 1869.                   asycl(1 + $I_L1868_152, 1 + $I_L1853_210) = asyclt(1 + $I_L1868_152)
 1870.                   $I_L1868_152 = 1 + $I_L1868_152
 1868.                   if ( $I_L1868_152 >= m ) exit
 1868.                enddo
 1872.                $I_L1853_210 = 1 + $I_L1853_210
 1870.                if ( $I_L1853_210 >= np ) exit
 1870.             enddo
 1870.          endif
 1870.       endif
 1875.       $I_L1875_232 = 0
 1875.       do
 1876.          if ( np > 0 ) then
 1877.             if ( m > 0 ) then
 1881.                $SC_wk3_I3 = wk3(1 + $I_L1875_232)
 1880.                $SC_zk3_I2 = zk3(1 + $I_L1875_232)
 1879.                $SC_ry3_I1 = ry3(1 + $I_L1875_232)
 1876.                $I_L1876_212 = 0
 1876.                do
 1877.                   $I_L1877_154 = 0
 1877. !dir$ ivdep
 1877.                   do
 1879.                      $taurs_S13 = $SC_ry3_I1 * dp(1 + $I_L1877_154, 1 + $I_L1876_212)
 1880.                      $tauoz_S12 = $SC_zk3_I2 * oh(1 + $I_L1877_154, 1 + $I_L1876_212)
 1881.                      $tauwv_S14 = $SC_wk3_I3 * wh(1 + $I_L1877_154, 1 + $I_L1876_212)
 1885.                      $tausto_WR0_R0 = $taurs_S13 + $tauoz_S12 + $tauwv_S14 + taual(1 + $I_L1877_154, 1 + $I_L1876_212, 1 + $I_L1875_232) + 1.0e-8
 1885.                      tausto(1 + $I_L1877_154, 1 + $I_L1876_212) = $tausto_WR0_R0
 1886.                      $ssatau_WR0_R1 = ssaal(1 + $I_L1877_154, 1 + $I_L1876_212, 1 + $I_L1875_232) * taual(1 + $I_L1877_154, 1 + $I_L1876_212, 1 + $I_L1875_232) + $taurs_S13
 1886.                      ssatau(1 + $I_L1877_154, 1 + $I_L1876_212) = $ssatau_WR0_R1
 1887.                      $asysto_WR0_R2 = asyal(1 + $I_L1877_154, 1 + $I_L1876_212, 1 + $I_L1875_232) * ssaal(1 + $I_L1877_154, 1 + $I_L1876_212, 1 + $I_L1875_232) * taual(1 + $I_L1877_154, 1 + $I_L1876_212, 1 + $I_L1875_232)
 1887.                      asysto(1 + $I_L1877_154, 1 + $I_L1876_212) = $asysto_WR0_R2
 1890.                      tautob(1 + $I_L1877_154, 1 + $I_L1876_212) = $tausto_WR0_R0
 1892.                      ssatob(1 + $I_L1877_154, 1 + $I_L1876_212) = ( min( 9.9999899999999997e-1, ( 1.0e-8 + ( $ssatau_WR0_R1 * 1.0/$tausto_WR0_R0 ) ) ) )
 1893.                      asytob(1 + $I_L1877_154, 1 + $I_L1876_212) = ( $asysto_WR0_R2 * 1.0/( ( min( 9.9999899999999997e-1, ( 1.0e-8 + ( $ssatau_WR0_R1 * 1.0/$tausto_WR0_R0 ) ) ) ) * $tausto_WR0_R0 ) )
 1894.                      $I_L1877_154 = 1 + $I_L1877_154
 1877.                      if ( $I_L1877_154 >= m ) exit
 1877.                   enddo
 1898.                   $I_L1898_156 = 0
 1898. !dir$ ivdep
 1898.                   do
 1898.                      $zth_S21 = cosz(1 + $I_L1898_156)
 1898.                      $ff_S17 = asytob(1 + $I_L1898_156, 1 + $I_L1876_212) * asytob(1 + $I_L1898_156, 1 + $I_L1876_212)
 1898.                      $xx_S18 = 1.0 + -( $ff_S17 * ssatob(1 + $I_L1898_156, 1 + $I_L1876_212) )
 1898.                      $taup_S28 = tautob(1 + $I_L1898_156, 1 + $I_L1876_212) * $xx_S18
 1898.                      $sscp_S20 = ( ssatob(1 + $I_L1898_156, 1 + $I_L1876_212) * ( 1.0 + -$ff_S17 ) * 1.0/$xx_S18 )
 1898.                      $gp_S19 = ( asytob(1 + $I_L1898_156, 1 + $I_L1876_212) * 1.0/( 1.0 + asytob(1 + $I_L1898_156, 1 + $I_L1876_212) ) )
 1898.                      $gm1_S23 = 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) )
 1898.                      $gm2_S22 = -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) )
 1898.                      $akk_S27 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) )
 1898.                      $st7_S25 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) ) * $zth_S21 )
 1898.                      $st8_S24 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) ) * $zth_S21 )
 1898.                      $st3_S26 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) ) * $zth_S21 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) ) * $zth_S21 ) )
 1898.                      if ( abs( ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) ) * $zth_S21 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S20 * ( 4.0 + ( 3.0 * $gp_S19 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S20 * ( 4.0 + -( 3.0 * $gp_S19 ) ) ) ) ) ) ) * $zth_S21 ) ) ) < 1.0e-8 ) then
 1898.                         $zth_S21 = 1.0e-3 + $zth_S21
 1898.                         $st7_S25 = 1.0 + -( $akk_S27 * $zth_S21 )
 1898.                         $st8_S24 = 1.0 + ( $akk_S27 * $zth_S21 )
 1898.                         $st3_S26 = ( 1.0 + -( $akk_S27 * $zth_S21 ) ) * ( 1.0 + ( $akk_S27 * $zth_S21 ) )
 1898.                      endif
 1898.                      $tdt_WR0_R5 = _expn( -( $taup_S28 * 1.0/$zth_S21 ) )
 1898.                      tdt(1 + $I_L1898_156, 1 + $I_L1876_212) = $tdt_WR0_R5
 1898.                      $gm3_S29 = 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 )
 1898.                      $alf1_S32 = $gm1_S23 + -( ( 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 ) ) * ( $gm1_S23 + -$gm2_S22 ) )
 1898.                      $temp_all_S31 = ( ( 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 ) ) + -( ( $gm2_S22 + ( 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 ) ) * ( $gm1_S23 + -$gm2_S22 ) ) * $zth_S21 ) ) * ( 2.0 * $akk_S27 ) * $tdt_WR0_R5
 1898.                      $st2_S30 = _expn( -( $akk_S27 * $taup_S28 ) )
 1898.                      rrt(1 + $I_L1898_156, 1 + $I_L1876_212) = ( max( 0.0, ( ( ( ( ( $gm2_S22 + $gm3_S29 * ( $gm1_S23 + -$gm2_S22 ) ) + ( $akk_S27 * $gm3_S29 ) ) * $st7_S25 ) + -( ( ( ( $gm2_S22 + $gm3_S29 * ( $gm1_S23 + -$gm2_S22 ) ) + -( $akk_S27 * $gm3_S29 ) ) * $st8_S24 ) * ( $st2_S30 * $st2_S30 ) ) + -( $temp_all_S31 * $st2_S30 ) ) * ( $sscp_S20 * 1.0/( ( $akk_S27 + $gm1_S23 + ( $akk_S27 + -$gm1_S23 ) * ( $st2_S30 * $st2_S30 ) ) * $st3_S26 ) ) ) ) )
 1898.                      $ttt_WR0_R7 = max( 0.0, ( -( ( ( ( ( $alf1_S32 + ( $akk_S27 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 ) ) ) ) ) * $st8_S24 ) + -( ( ( $alf1_S32 + -( $akk_S27 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 ) ) ) ) ) * $st7_S25 ) * ( $st2_S30 * $st2_S30 ) ) ) * $tdt_WR0_R5 + -( ( ( $alf1_S32 * $zth_S21 + -( 2.5e-1 * ( 2.0 + $gp_S19 * $zth_S21 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S27 ) ) * $st2_S30 ) ) * ( $sscp_S20 * 1.0/( ( $akk_S27 + $gm1_S23 + ( $akk_S27 + -$gm1_S23 ) * ( $st2_S30 * $st2_S30 ) ) * $st3_S26 ) ) ) ) ) + $tdt_WR0_R5
 1898.                      ttt(1 + $I_L1898_156, 1 + $I_L1876_212) = $ttt_WR0_R7
 1898.                      $I_L1898_156 = 1 + $I_L1898_156
 1898.                      if ( $I_L1898_156 >= m ) exit
 1898.                   enddo
 1895.                   $I_L1876_212 = 1 + $I_L1876_212
 1894.                   if ( $I_L1876_212 >= np ) exit
 1894.                enddo
 1902.                $I_L1902_214 = 0
 1902. !dir$ blocking_size( 0, 0 )
 1902.                do
 1902.                   $I_L1902_158 = 0
 1902. !dir$ ivdep
 1902. !dir$ blocking_size( 0, 0 )
 1902.                   do
 1902.                      $zth_S39 = dsm(1 + $I_L1902_158)
 1902.                      $ff_S35 = asytob(1 + $I_L1902_158, 1 + $I_L1902_214) * asytob(1 + $I_L1902_158, 1 + $I_L1902_214)
 1902.                      $xx_S36 = 1.0 + -( $ff_S35 * ssatob(1 + $I_L1902_158, 1 + $I_L1902_214) )
 1902.                      $taup_S45 = tautob(1 + $I_L1902_158, 1 + $I_L1902_214) * $xx_S36
 1902.                      $sscp_S38 = ( ssatob(1 + $I_L1902_158, 1 + $I_L1902_214) * ( 1.0 + -$ff_S35 ) * 1.0/$xx_S36 )
 1902.                      $gp_S37 = ( asytob(1 + $I_L1902_158, 1 + $I_L1902_214) * 1.0/( 1.0 + asytob(1 + $I_L1902_158, 1 + $I_L1902_214) ) )
 1902.                      $gm1_S41 = 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) )
 1902.                      $gm2_S40 = -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) )
 1902.                      $akk_S44 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) )
 1902.                      $st7_S43 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) ) * $zth_S39 )
 1902.                      $st8_S42 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) ) * $zth_S39 )
 1902.                      $st3_S47 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) ) * $zth_S39 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) ) * $zth_S39 ) )
 1902.                      if ( abs( ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) ) * $zth_S39 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S38 * ( 4.0 + ( 3.0 * $gp_S37 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S38 * ( 4.0 + -( 3.0 * $gp_S37 ) ) ) ) ) ) ) * $zth_S39 ) ) ) < 1.0e-8 ) then
 1902.                         $zth_S39 = 1.0e-3 + $zth_S39
 1902.                         $st7_S43 = 1.0 + -( $akk_S44 * $zth_S39 )
 1902.                         $st8_S42 = 1.0 + ( $akk_S44 * $zth_S39 )
 1902.                         $st3_S47 = ( 1.0 + -( $akk_S44 * $zth_S39 ) ) * ( 1.0 + ( $akk_S44 * $zth_S39 ) )
 1902.                      endif
 1902.                      $dum_WR0_R8 = _expn( -( $taup_S45 * 1.0/$zth_S39 ) )
 1902.                      $gm3_S46 = 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 )
 1902.                      $alf1_S50 = $gm1_S41 + -( ( 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 ) ) * ( $gm1_S41 + -$gm2_S40 ) )
 1902.                      $temp_all_S49 = ( ( 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 ) ) + -( ( $gm2_S40 + ( 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 ) ) * ( $gm1_S41 + -$gm2_S40 ) ) * $zth_S39 ) ) * ( 2.0 * $akk_S44 ) * $dum_WR0_R8
 1902.                      $st2_S48 = _expn( -( $akk_S44 * $taup_S45 ) )
 1902.                      rst(1 + $I_L1902_158, 1 + $I_L1902_214) = ( max( 0.0, ( ( ( ( ( $gm2_S40 + $gm3_S46 * ( $gm1_S41 + -$gm2_S40 ) ) + ( $akk_S44 * $gm3_S46 ) ) * $st7_S43 ) + -( ( ( ( $gm2_S40 + $gm3_S46 * ( $gm1_S41 + -$gm2_S40 ) ) + -( $akk_S44 * $gm3_S46 ) ) * $st8_S42 ) * ( $st2_S48 * $st2_S48 ) ) + -( $temp_all_S49 * $st2_S48 ) ) * ( $sscp_S38 * 1.0/( ( $akk_S44 + $gm1_S41 + ( $akk_S44 + -$gm1_S41 ) * ( $st2_S48 * $st2_S48 ) ) * $st3_S47 ) ) ) ) )
 1902.                      $tst_WR0_R10 = max( 0.0, ( -( ( ( ( ( $alf1_S50 + ( $akk_S44 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 ) ) ) ) ) * $st8_S42 ) + -( ( ( $alf1_S50 + -( $akk_S44 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 ) ) ) ) ) * $st7_S43 ) * ( $st2_S48 * $st2_S48 ) ) ) * $dum_WR0_R8 + -( ( ( $alf1_S50 * $zth_S39 + -( 2.5e-1 * ( 2.0 + $gp_S37 * $zth_S39 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S44 ) ) * $st2_S48 ) ) * ( $sscp_S38 * 1.0/( ( $akk_S44 + $gm1_S41 + ( $akk_S44 + -$gm1_S41 ) * ( $st2_S48 * $st2_S48 ) ) * $st3_S47 ) ) ) ) ) + $dum_WR0_R8
 1902.                      tst(1 + $I_L1902_158, 1 + $I_L1902_214) = $tst_WR0_R10
 1902.                      $I_L1902_158 = 1 + $I_L1902_158
 1902.                      if ( $I_L1902_158 >= m ) exit
 1902.                   enddo
 1902.                   $I_L1902_214 = 1 + $I_L1902_214
 1902.                   if ( $I_L1902_214 >= np ) exit
 1902.                enddo
 1904.                $I_L1904_216 = 0
 1904.                do
 1905.                   $I_L1905_160 = 0
 1905. !dir$ ivdep
 1905.                   do
 1906.                      rr(1 + $I_L1905_160, 1 + $I_L1904_216, 1) = rrt(1 + $I_L1905_160, 1 + $I_L1904_216)
 1907.                      tt(1 + $I_L1905_160, 1 + $I_L1904_216, 1) = ttt(1 + $I_L1905_160, 1 + $I_L1904_216)
 1908.                      td(1 + $I_L1905_160, 1 + $I_L1904_216, 1) = tdt(1 + $I_L1905_160, 1 + $I_L1904_216)
 1909.                      rs(1 + $I_L1905_160, 1 + $I_L1904_216, 1) = rst(1 + $I_L1905_160, 1 + $I_L1904_216)
 1910.                      ts(1 + $I_L1905_160, 1 + $I_L1904_216, 1) = tst(1 + $I_L1905_160, 1 + $I_L1904_216)
 1911.                      $I_L1905_160 = 1 + $I_L1905_160
 1905.                      if ( $I_L1905_160 >= m ) exit
 1905.                   enddo
 1916.                   $I_L1916_162 = 0
 1916. !dir$ ivdep
 1916.                   do
 1920.                      $tautob_WR0_R11 = tausto(1 + $I_L1916_162, 1 + $I_L1904_216) + tauclb(1 + $I_L1916_162, 1 + $I_L1904_216)
 1920.                      tautob(1 + $I_L1916_162, 1 + $I_L1904_216) = $tautob_WR0_R11
 1921.                      $ssatob_WR0_R12 = 1.0e-8 + ( ( ssatau(1 + $I_L1916_162, 1 + $I_L1904_216) + tauclb(1 + $I_L1916_162, 1 + $I_L1904_216) ) * 1.0/$tautob_WR0_R11 )
 1922.                      $ssatob_WR0_R12 = min( 9.9999899999999997e-1, $ssatob_WR0_R12 )
 1922.                      ssatob(1 + $I_L1916_162, 1 + $I_L1904_216) = $ssatob_WR0_R12
 1923.                      asytob(1 + $I_L1916_162, 1 + $I_L1904_216) = ( ( asysto(1 + $I_L1916_162, 1 + $I_L1904_216) + asycl(1 + $I_L1916_162, 1 + $I_L1904_216) * tauclb(1 + $I_L1916_162, 1 + $I_L1904_216) ) * 1.0/( $ssatob_WR0_R12 * $tautob_WR0_R11 ) )
 1927.                      $tautof_WR0_R13 = tausto(1 + $I_L1916_162, 1 + $I_L1904_216) + tauclf(1 + $I_L1916_162, 1 + $I_L1904_216)
 1927.                      tautof(1 + $I_L1916_162, 1 + $I_L1904_216) = $tautof_WR0_R13
 1928.                      $ssatof_WR0_R14 = 1.0e-8 + ( ( ssatau(1 + $I_L1916_162, 1 + $I_L1904_216) + tauclf(1 + $I_L1916_162, 1 + $I_L1904_216) ) * 1.0/$tautof_WR0_R13 )
 1929.                      $ssatof_WR0_R14 = min( 9.9999899999999997e-1, $ssatof_WR0_R14 )
 1929.                      ssatof(1 + $I_L1916_162, 1 + $I_L1904_216) = $ssatof_WR0_R14
 1930.                      asytof(1 + $I_L1916_162, 1 + $I_L1904_216) = ( ( asysto(1 + $I_L1916_162, 1 + $I_L1904_216) + asycl(1 + $I_L1916_162, 1 + $I_L1904_216) * tauclf(1 + $I_L1916_162, 1 + $I_L1904_216) ) * 1.0/( $ssatof_WR0_R14 * $tautof_WR0_R13 ) )
 1932.                      $I_L1916_162 = 1 + $I_L1916_162
 1916.                      if ( $I_L1916_162 >= m ) exit
 1916.                   enddo
 1939.                   $I_L1939_164 = 0
 1939. !dir$ ivdep
 1939.                   do
 1939.                      $zth_S61 = cosz(1 + $I_L1939_164)
 1939.                      $ff_S57 = asytob(1 + $I_L1939_164, 1 + $I_L1904_216) * asytob(1 + $I_L1939_164, 1 + $I_L1904_216)
 1939.                      $xx_S58 = 1.0 + -( $ff_S57 * ssatob(1 + $I_L1939_164, 1 + $I_L1904_216) )
 1939.                      $taup_S65 = tautob(1 + $I_L1939_164, 1 + $I_L1904_216) * $xx_S58
 1939.                      $sscp_S60 = ( ssatob(1 + $I_L1939_164, 1 + $I_L1904_216) * ( 1.0 + -$ff_S57 ) * 1.0/$xx_S58 )
 1939.                      $gp_S59 = ( asytob(1 + $I_L1939_164, 1 + $I_L1904_216) * 1.0/( 1.0 + asytob(1 + $I_L1939_164, 1 + $I_L1904_216) ) )
 1939.                      $gm1_S63 = 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) )
 1939.                      $gm2_S62 = -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) )
 1939.                      $akk_S64 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) )
 1939.                      $st7_S70 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) ) * $zth_S61 )
 1939.                      $st8_S68 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) ) * $zth_S61 )
 1939.                      $st3_S66 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) ) * $zth_S61 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) ) * $zth_S61 ) )
 1939.                      if ( abs( ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) ) * $zth_S61 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S60 * ( 4.0 + ( 3.0 * $gp_S59 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S60 * ( 4.0 + -( 3.0 * $gp_S59 ) ) ) ) ) ) ) * $zth_S61 ) ) ) < 1.0e-8 ) then
 1939.                         $zth_S61 = 1.0e-3 + $zth_S61
 1939.                         $st7_S70 = 1.0 + -( $akk_S64 * $zth_S61 )
 1939.                         $st8_S68 = 1.0 + ( $akk_S64 * $zth_S61 )
 1939.                         $st3_S66 = ( 1.0 + -( $akk_S64 * $zth_S61 ) ) * ( 1.0 + ( $akk_S64 * $zth_S61 ) )
 1939.                      endif
 1939.                      $tdt_WR0_R15 = _expn( -( $taup_S65 * 1.0/$zth_S61 ) )
 1939.                      tdt(1 + $I_L1939_164, 1 + $I_L1904_216) = $tdt_WR0_R15
 1939.                      $gm3_S69 = 2.5e-1 * ( 2.0 + $gp_S59 * $zth_S61 * -3.0 )
 1939.                      $alf1_S72 = $gm1_S63 + -( ( 2.5e-1 * ( 2.0 + $gp_S59 * $zth_S61 * -3.0 ) ) * ( $gm1_S63 + -$gm2_S62 ) )
 1939.                      $temp_all_S71 = ( ( 2.5e-1 * ( 2.0 + $gp_S59 * $zth_S61 * -3.0 ) ) + -( ( $gm2_S62 + ( 2.5e-1 * ( 2.0 + $gp_S59 * $zth_S61 * -3.0 ) ) * ( $gm1_S63 + -$gm2_S62 ) ) * $zth_S61 ) ) * ( 2.0 * $akk_S64 ) * $tdt_WR0_R15
 1939.                      $st2_S67 = _expn( -( $akk_S64 * $taup_S65 ) )
 1939.                      $ttt_WR0_R17 = -( ( ( ( ( ( $gm1_S63 + -( $gm3_S69 * ( $gm1_S63 + -$gm2_S62 ) ) ) + ( $akk_S64 * ( 1.0 + -$gm3_S69 ) ) ) * $st8_S68 ) + -( ( ( ( $gm1_S63 + -( $gm3_S69 * ( $gm1_S63 + -$gm2_S62 ) ) ) + -( $akk_S64 * ( 1.0 + -$gm3_S69 ) ) ) * $st7_S70 ) * ( $st2_S67 * $st2_S67 ) ) ) * $tdt_WR0_R15 + -( ( ( $alf1_S72 * $zth_S61 + -$gm3_S69 + 1.0 ) * ( 2.0 * $akk_S64 ) ) * $st2_S67 ) ) * ( $sscp_S60 * 1.0/( ( $akk_S64 + $gm1_S63 + ( $akk_S64 + -$gm1_S63 ) * ( $st2_S67 * $st2_S67 ) ) * $st3_S66 ) ) )
 1939.                      $rrt_WR0_R16 = max( 0.0, ( ( ( ( ( $gm2_S62 + $gm3_S69 * ( $gm1_S63 + -$gm2_S62 ) ) + ( $akk_S64 * ( 2.5e-1 * ( 2.0 + $gp_S59 * $zth_S61 * -3.0 ) ) ) ) * $st7_S70 ) + -( ( ( ( $gm2_S62 + $gm3_S69 * ( $gm1_S63 + -$gm2_S62 ) ) + -( $akk_S64 * ( 2.5e-1 * ( 2.0 + $gp_S59 * $zth_S61 * -3.0 ) ) ) ) * $st8_S68 ) * ( $st2_S67 * $st2_S67 ) ) + -( $temp_all_S71 * $st2_S67 ) ) * ( $sscp_S60 * 1.0/( ( $akk_S64 + $gm1_S63 + ( $akk_S64 + -$gm1_S63 ) * ( $st2_S67 * $st2_S67 ) ) * $st3_S66 ) ) ) )
 1939.                      rrt(1 + $I_L1939_164, 1 + $I_L1904_216) = $rrt_WR0_R16
 1939.                      $ttt_WR0_R17 = max( 0.0, $ttt_WR0_R17 ) + $tdt_WR0_R15
 1939.                      ttt(1 + $I_L1939_164, 1 + $I_L1904_216) = $ttt_WR0_R17
 1939.                      $I_L1939_164 = 1 + $I_L1939_164
 1939.                      if ( $I_L1939_164 >= m ) exit
 1939.                   enddo
 1912.                   $I_L1904_216 = 1 + $I_L1904_216
 1911.                   if ( $I_L1904_216 >= np ) exit
 1911.                enddo
 1944.                $I_L1944_218 = 0
 1944. !dir$ blocking_size( 0, 0 )
 1944.                do
 1944.                   $I_L1944_166 = 0
 1944. !dir$ ivdep
 1944. !dir$ blocking_size( 0, 0 )
 1944.                   do
 1944.                      $zth_S79 = dsm(1 + $I_L1944_166)
 1944.                      $ff_S75 = asytof(1 + $I_L1944_166, 1 + $I_L1944_218) * asytof(1 + $I_L1944_166, 1 + $I_L1944_218)
 1944.                      $xx_S76 = 1.0 + -( $ff_S75 * ssatof(1 + $I_L1944_166, 1 + $I_L1944_218) )
 1944.                      $taup_S82 = tautof(1 + $I_L1944_166, 1 + $I_L1944_218) * $xx_S76
 1944.                      $sscp_S78 = ( ssatof(1 + $I_L1944_166, 1 + $I_L1944_218) * ( 1.0 + -$ff_S75 ) * 1.0/$xx_S76 )
 1944.                      $gp_S77 = ( asytof(1 + $I_L1944_166, 1 + $I_L1944_218) * 1.0/( 1.0 + asytof(1 + $I_L1944_166, 1 + $I_L1944_218) ) )
 1944.                      $gm1_S84 = 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) )
 1944.                      $gm2_S83 = -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) )
 1944.                      $akk_S81 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) )
 1944.                      $st7_S87 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) ) * $zth_S79 )
 1944.                      $st8_S86 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) ) * $zth_S79 )
 1944.                      $st3_S80 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) ) * $zth_S79 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S78 * ( 4.0 + ( 3.0 * $gp_S77 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S78 * ( 4.0 + -( 3.0 * $gp_S77 ) ) ) ) ) ) ) * $zth_S79 ) )
 1944.                      if ( abs( $st3_S80 ) < 1.0e-8 ) then
 1944.                         $zth_S79 = 1.0e-3 + $zth_S79
 1944.                         $st7_S87 = 1.0 + -( $akk_S81 * $zth_S79 )
 1944.                         $st8_S86 = 1.0 + ( $akk_S81 * $zth_S79 )
 1944.                         $st3_S80 = ( 1.0 + -( $akk_S81 * $zth_S79 ) ) * ( 1.0 + ( $akk_S81 * $zth_S79 ) )
 1944.                      endif
 1944.                      $dum_WR0_R18 = _expn( -( $taup_S82 * 1.0/$zth_S79 ) )
 1944.                      $alf1_S90 = $gm1_S84 + -( ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) * ( $gm1_S84 + -$gm2_S83 ) )
 1944.                      $temp_all_S88 = ( ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) + -( ( $gm2_S83 + ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) * ( $gm1_S84 + -$gm2_S83 ) ) * $zth_S79 ) ) * ( 2.0 * $akk_S81 ) * $dum_WR0_R18
 1944.                      $bll_S89 = ( ( $gm1_S84 + -( ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) * ( $gm1_S84 + -$gm2_S83 ) ) ) * $zth_S79 + -( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S81 )
 1944.                      $st2_S85 = _expn( -( $akk_S81 * $taup_S82 ) )
 1944.                      $rst_WR0_R19 = max( 0.0, ( ( ( ( ( $gm2_S83 + ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) * ( $gm1_S84 + -$gm2_S83 ) ) + ( $akk_S81 * ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) ) ) * $st7_S87 ) + -( ( ( ( $gm2_S83 + ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) * ( $gm1_S84 + -$gm2_S83 ) ) + -( $akk_S81 * ( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) ) ) * $st8_S86 ) * ( $st2_S85 * $st2_S85 ) ) + -( $temp_all_S88 * $st2_S85 ) ) * ( $sscp_S78 * 1.0/( ( $akk_S81 + $gm1_S84 + ( $akk_S81 + -$gm1_S84 ) * ( $st2_S85 * $st2_S85 ) ) * $st3_S80 ) ) ) )
 1944.                      rst(1 + $I_L1944_166, 1 + $I_L1944_218) = $rst_WR0_R19
 1944.                      $tst_WR0_R20 = max( 0.0, ( -( ( ( ( ( $alf1_S90 + ( $akk_S81 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) ) ) ) * $st8_S86 ) + -( ( ( $alf1_S90 + -( $akk_S81 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S77 * $zth_S79 * -3.0 ) ) ) ) ) * $st7_S87 ) * ( $st2_S85 * $st2_S85 ) ) ) * $dum_WR0_R18 + -( $bll_S89 * $st2_S85 ) ) * ( $sscp_S78 * 1.0/( ( $akk_S81 + $gm1_S84 + ( $akk_S81 + -$gm1_S84 ) * ( $st2_S85 * $st2_S85 ) ) * $st3_S80 ) ) ) ) ) + $dum_WR0_R18
 1944.                      tst(1 + $I_L1944_166, 1 + $I_L1944_218) = $tst_WR0_R20
 1944.                      $I_L1944_166 = 1 + $I_L1944_166
 1944.                      if ( $I_L1944_166 >= m ) exit
 1944.                   enddo
 1944.                   $I_L1944_218 = 1 + $I_L1944_218
 1944.                   if ( $I_L1944_218 >= np ) exit
 1944.                enddo
 1946.                $I_L1946_220 = 0
 1946.                do
 1947.                   $I_L1947_168 = 0
 1947. !dir$ ivdep
 1947.                   do
 1948.                      rr(1 + $I_L1947_168, 1 + $I_L1946_220, 2) = rrt(1 + $I_L1947_168, 1 + $I_L1946_220)
 1949.                      tt(1 + $I_L1947_168, 1 + $I_L1946_220, 2) = ttt(1 + $I_L1947_168, 1 + $I_L1946_220)
 1950.                      td(1 + $I_L1947_168, 1 + $I_L1946_220, 2) = tdt(1 + $I_L1947_168, 1 + $I_L1946_220)
 1951.                      rs(1 + $I_L1947_168, 1 + $I_L1946_220, 2) = rst(1 + $I_L1947_168, 1 + $I_L1946_220)
 1952.                      ts(1 + $I_L1947_168, 1 + $I_L1946_220, 2) = tst(1 + $I_L1947_168, 1 + $I_L1946_220)
 1953.                      $I_L1947_168 = 1 + $I_L1947_168
 1947.                      if ( $I_L1947_168 >= m ) exit
 1947.                   enddo
 1954.                   $I_L1946_220 = 1 + $I_L1946_220
 1953.                   if ( $I_L1946_220 >= np ) exit
 1953.                enddo
 1953.             endif
 1953.          endif
 1898.          t$104 = m
 1898.          t$105 = np
 1898.          t$619 = max( 0, m )
 1898.          t$620 = m
 1898.          t$621 = max( 0, np )
 1898.          t$622 = ( m * np )
 1902.          t$104 = m
 1902.          t$105 = np
 1902.          t$619 = max( 0, m )
 1902.          t$620 = m
 1902.          t$621 = max( 0, np )
 1902.          t$622 = ( m * np )
 1939.          t$104 = m
 1939.          t$105 = np
 1939.          t$619 = max( 0, m )
 1939.          t$620 = m
 1939.          t$621 = max( 0, np )
 1939.          t$622 = ( m * np )
 1944.          t$104 = m
 1944.          t$105 = np
 1944.          t$619 = max( 0, m )
 1944.          t$620 = m
 1944.          t$621 = max( 0, np )
 1944.          t$622 = ( m * np )
 1977.          ih1 = 1
 1978.          ih2 = 2
 1979.          im1 = 1
 1980.          im2 = 2
 1981.          is1 = 1
 1982.          is2 = 2
 1984.          call cldflx( m, np, ict, icb, ih1, ih2, im1, im2, is1, is2, cc(1, 1), rr(1, 1, 1), tt(1, 1, 1), td(1, 1, 1), rs(1, 1, 1), ts(1, 1, 1), fclr(1, 1), fall(1, 1), fsdir(1), fsdif(1), fsdir_c(1), fsdif_c(1), fclr_d(1, 1), fclr_u(1, 1), fall_d(1, 1), fall_u(1, 1) )
 1990.          if ( np >= 0 ) then
 1991.             if ( m > 0 ) then
 1992.                $SC_hk3_I4 = hk3(1 + $I_L1875_232)
 1990.                $I_L1990_230 = 0
 1990.                do
 1991.                   $I_L1991_208 = 0
 1991. !dir$ ivdep
 1991.                   do
 1992.                      flx(1 + $I_L1991_208, 1 + $I_L1990_230) = flx(1 + $I_L1991_208, 1 + $I_L1990_230) + fall(1 + $I_L1991_208, 1 + $I_L1990_230) * $SC_hk3_I4
 1993.                      flx_d(1 + $I_L1991_208, 1 + $I_L1990_230) = flx_d(1 + $I_L1991_208, 1 + $I_L1990_230) + fall_d(1 + $I_L1991_208, 1 + $I_L1990_230) * $SC_hk3_I4
 1994.                      flx_u(1 + $I_L1991_208, 1 + $I_L1990_230) = flx_u(1 + $I_L1991_208, 1 + $I_L1990_230) + fall_u(1 + $I_L1991_208, 1 + $I_L1990_230) * $SC_hk3_I4
 1998.                      flc(1 + $I_L1991_208, 1 + $I_L1990_230) = flc(1 + $I_L1991_208, 1 + $I_L1990_230) + fclr(1 + $I_L1991_208, 1 + $I_L1990_230) * $SC_hk3_I4
 1999.                      flc_d(1 + $I_L1991_208, 1 + $I_L1990_230) = flc_d(1 + $I_L1991_208, 1 + $I_L1990_230) + fclr_d(1 + $I_L1991_208, 1 + $I_L1990_230) * $SC_hk3_I4
 2000.                      flc_u(1 + $I_L1991_208, 1 + $I_L1990_230) = flc_u(1 + $I_L1991_208, 1 + $I_L1990_230) + fclr_u(1 + $I_L1991_208, 1 + $I_L1990_230) * $SC_hk3_I4
 1995.                      $I_L1991_208 = 1 + $I_L1991_208
 1991.                      if ( $I_L1991_208 >= m ) exit
 1991.                   enddo
 2002.                   $I_L1990_230 = 1 + $I_L1990_230
 2001.                   if ( $I_L1990_230 >= 1 + np ) exit
 2001.                enddo
 2001.             endif
 2001.          endif
 2006.          if ( ( 1 + $I_L1875_232 ) < 8 ) then
 2007.             if ( m > 0 ) then
 2008.                $SC_hk3_I0 = hk3(1 + $I_L1875_232)
 2007.                $I_L2007_170 = 0
 2007. !dir$ ivdep
 2007.                do
 2008.                   fdiruv(1 + $I_L2007_170) = fdiruv(1 + $I_L2007_170) + fsdir(1 + $I_L2007_170) * $SC_hk3_I0
 2009.                   fdifuv(1 + $I_L2007_170) = fdifuv(1 + $I_L2007_170) + fsdif(1 + $I_L2007_170) * $SC_hk3_I0
 2010.                   fdiruv_c(1 + $I_L2007_170) = fdiruv_c(1 + $I_L2007_170) + fsdir_c(1 + $I_L2007_170) * $SC_hk3_I0
 2011.                   fdifuv_c(1 + $I_L2007_170) = fdifuv_c(1 + $I_L2007_170) + fsdif_c(1 + $I_L2007_170) * $SC_hk3_I0
 2012.                   $I_L2007_170 = 1 + $I_L2007_170
 2007.                   if ( $I_L2007_170 >= m ) exit
 2007.                enddo
 2007.             endif
 2013.          else if ( m > 0 ) then
 2015.             $SC_hk3_I0 = hk3(1 + $I_L1875_232)
 2014.             $I_L2014_172 = 0
 2014. !dir$ ivdep
 2014.             do
 2015.                fdirpar(1 + $I_L2014_172) = fsdir(1 + $I_L2014_172) * $SC_hk3_I0
 2016.                fdifpar(1 + $I_L2014_172) = fsdif(1 + $I_L2014_172) * $SC_hk3_I0
 2017.                fdirpar_c(1 + $I_L2014_172) = fsdir_c(1 + $I_L2014_172) * $SC_hk3_I0
 2018.                fdifpar_c(1 + $I_L2014_172) = fsdif_c(1 + $I_L2014_172) * $SC_hk3_I0
 2019.                $I_L2014_172 = 1 + $I_L2014_172
 2014.                if ( $I_L2014_172 >= m ) exit
 2014.             enddo
 2014.          endif
 2022.          $I_L1875_232 = 1 + $I_L1875_232
 2020.          if ( $I_L1875_232 >= 8 ) exit
 2020.       enddo
 1745.       _free( t$501 )
 2024.       return
 2024.       end
 2024.       
 2063.       
 2063.       subroutine cldscale( m, np, cosz, fcld, taucld, ict, icb, cc, tauclb, tauclf )
 2063.       t$102 = m
 2095.       t$612 = _zla( 0, m )
 2063.       t$103 = np
 2063.       t$613 = _zla( 0, m )
 2096.       t$614 = _zla( 0, np )
 2063.       t$615 = _zla( 0, m ) * _zla( 0, np )
 2063.       t$616 = _zla( 0, m ) * _zla( 0, np )
 2063.       t$617 = _zla( 0, m ) * _zla( 0, np ) * 3
 2063.       t$618 = 3 * _zla( 0, m )
 2117.       if ( m > 0 ) then
 2117.          $I_L2117_36 = 0
 2117. !dir$ ivdep
 2117.          do
 2118.             cc(1 + $I_L2117_36, 1) = 0.0
 2119.             cc(1 + $I_L2117_36, 2) = 0.0
 2120.             cc(1 + $I_L2117_36, 3) = 0.0
 2121.             $I_L2117_36 = 1 + $I_L2117_36
 2117.             if ( $I_L2117_36 >= m ) exit
 2117.          enddo
 2117.       endif
 2123.       if ( -1 + ict > 0 ) then
 2124.          if ( m > 0 ) then
 2123.             $I_L2123_46 = 0
 2123. !dir$ blocking_size( 0, 0 )
 2123.             do
 2124.                $I_L2124_38 = 0
 2124. !dir$ ivdep
 2124. !dir$ blocking_size( 0, 0 )
 2124.                do
 2125.                   cc(1 + $I_L2124_38, 1) = max( cc(1 + $I_L2124_38, 1), fcld(1 + $I_L2124_38, 1 + $I_L2123_46) )
 2126.                   $I_L2124_38 = 1 + $I_L2124_38
 2124.                   if ( $I_L2124_38 >= m ) exit
 2124.                enddo
 2127.                $I_L2123_46 = 1 + $I_L2123_46
 2126.                if ( $I_L2123_46 >= -1 + ict ) exit
 2126.             enddo
 2126.          endif
 2126.       endif
 2129.       if ( icb + -ict > 0 ) then
 2130.          if ( m > 0 ) then
 2129.             $I_L2129_48 = 0
 2129. !dir$ blocking_size( 0, 0 )
 2129.             do
 2130.                $I_L2130_40 = 0
 2130. !dir$ ivdep
 2130. !dir$ blocking_size( 0, 0 )
 2130.                do
 2131.                   cc(1 + $I_L2130_40, 2) = max( cc(1 + $I_L2130_40, 2), fcld(1 + $I_L2130_40, ict + $I_L2129_48) )
 2132.                   $I_L2130_40 = 1 + $I_L2130_40
 2130.                   if ( $I_L2130_40 >= m ) exit
 2130.                enddo
 2133.                $I_L2129_48 = 1 + $I_L2129_48
 2132.                if ( $I_L2129_48 >= ( icb + -ict ) ) exit
 2132.             enddo
 2132.          endif
 2132.       endif
 2135.       if ( np + -icb >= 0 ) then
 2136.          if ( m > 0 ) then
 2135.             $I_L2135_50 = 0
 2135. !dir$ blocking_size( 0, 0 )
 2135.             do
 2136.                $I_L2136_42 = 0
 2136. !dir$ ivdep
 2136. !dir$ blocking_size( 0, 0 )
 2136.                do
 2137.                   cc(1 + $I_L2136_42, 3) = max( cc(1 + $I_L2136_42, 3), fcld(1 + $I_L2136_42, icb + $I_L2135_50) )
 2138.                   $I_L2136_42 = 1 + $I_L2136_42
 2136.                   if ( $I_L2136_42 >= m ) exit
 2136.                enddo
 2139.                $I_L2135_50 = 1 + $I_L2135_50
 2138.                if ( $I_L2135_50 >= np + -icb + 1 ) exit
 2138.             enddo
 2138.          endif
 2138.       endif
 2144.       if ( np > 0 ) then
 2154.          if ( m > 0 ) then
 2144.             $I_L2144_52 = 0
 2144. !dir$ blocking_size( 0, 0 )
 2144.             do
 2154.                $I_L2154_44 = 0
 2154. !dir$ ivdep
 2154. !dir$ blocking_size( 0, 0 )
 2154.                do
 2156.                   tauclb(1 + $I_L2154_44, 1 + $I_L2144_52) = 0.0
 2157.                   tauclf(1 + $I_L2154_44, 1 + $I_L2144_52) = 0.0
 2158.                   $taux_S9 = taucld(1 + $I_L2154_44, 1 + $I_L2144_52, 1) + taucld(1 + $I_L2154_44, 1 + $I_L2144_52, 2) + taucld(1 + $I_L2154_44, 1 + $I_L2144_52, 3)
 2160.                   if ( taucld(1 + $I_L2154_44, 1 + $I_L2144_52, 1) + taucld(1 + $I_L2154_44, 1 + $I_L2144_52, 2) + taucld(1 + $I_L2154_44, 1 + $I_L2144_52, 3) > 2.0e-2 ) then
 2160.                      if ( fcld(1 + $I_L2154_44, 1 + $I_L2144_52) > 1.0e-2 ) then
 2162.                         $fa_S11 = ( fcld(1 + $I_L2154_44, 1 + $I_L2144_52) * 1.0/cc(1 + $I_L2154_44, cvmg( cvmg( 3, 2, or( ( 1 + $I_L2144_52 ) >= icb, ( 1 + $I_L2144_52 ) < ict ) ), 1, ( 1 + $I_L2144_52 ) >= ict )) )
 2167.                         $fm_S12 = 10.0 * cosz(1 + $I_L2154_44)
 2168.                         $ft_S13 = 3.3219280470385009 * ( 9.0310000000000001e-1 + log10( ( min( 32.0, $taux_S9 ) ) ) )
 2169.                         $fa_S14 = 10.0 * $fa_S11
 2179.                         $im_S16 = min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) )
 2180.                         $it_S17 = min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) )
 2181.                         $ia_S18 = min( 10, ( max( 2, int( 1.5 + ( 10.0 * $fa_S11 ) ) ) ) )
 2184.                         $ft_S19 = $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) )
 2185.                         $fa_S21 = ( 10.0 * $fa_S11 ) + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + ( 10.0 * $fa_S11 ) ) ) ) ) ) ) )
 2191.                         $xai_S20 = ( -( caib(-1 + $im_S16, $it_S17, $ia_S18) * ( 1.0 + -( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) ) ) + caib(1 + $im_S16, $it_S17, $ia_S18) * ( 1.0 + ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) ) ) * ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) * 5.0e-1 + caib($im_S16, $it_S17, $ia_S18) * ( 1.0 + -( ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) * ( $fm_S12 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fm_S12 ) ) ) ) ) ) ) ) ) )
 2201.                         $xai_S22 = max( 0.0, $xai_S20 + ( -( caib($im_S16, -1 + $it_S17, $ia_S18) * ( 1.0 + -$ft_S19 ) ) + caib($im_S16, 1 + $it_S17, $ia_S18) * ( 1.0 + $ft_S19 ) ) * $ft_S19 * 5.0e-1 + caib($im_S16, $it_S17, $ia_S18) * ( 1.0 + -( $ft_S19 * $ft_S19 ) ) + ( -( caib($im_S16, $it_S17, -1 + $ia_S18) * ( 1.0 + -$fa_S21 ) ) + caib($im_S16, $it_S17, 1 + $ia_S18) * ( 1.0 + $fa_S21 ) ) * $fa_S21 * 5.0e-1 + caib($im_S16, $it_S17, $ia_S18) * ( 1.0 + -( $fa_S21 * $fa_S21 ) ) + -2.0 * caib($im_S16, $it_S17, $ia_S18) )
 2203.                         tauclb(1 + $I_L2154_44, 1 + $I_L2144_52) = ( min( 32.0, $taux_S9 ) ) * $xai_S22
 2208.                         $xai_S23 = ( -( caif(-1 + $it_S17, $ia_S18) * ( 1.0 + -( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) ) ) + caif(1 + $it_S17, $ia_S18) * ( 1.0 + ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) ) ) * ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) * 5.0e-1 + caif($it_S17, $ia_S18) * ( 1.0 + -( ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) * ( $ft_S13 + -( real( -1 + ( min( 8, ( max( 2, int( 1.5 + $ft_S13 ) ) ) ) ) ) ) ) ) )
 2215.                         $xai_S24 = max( 0.0, $xai_S23 + ( -( caif($it_S17, -1 + $ia_S18) * ( 1.0 + -( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) ) ) + caif($it_S17, 1 + $ia_S18) * ( 1.0 + ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) ) ) * ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) * 5.0e-1 + caif($it_S17, $ia_S18) * ( 1.0 + -( ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) * ( $fa_S14 + -( real( -1 + ( min( 10, ( max( 2, int( 1.5 + $fa_S14 ) ) ) ) ) ) ) ) ) ) + -caif($it_S17, $ia_S18) )
 2217.                         tauclf(1 + $I_L2154_44, 1 + $I_L2144_52) = ( min( 32.0, $taux_S9 ) ) * $xai_S24
 2217.                      endif
 2217.                   endif
 2219.                   $I_L2154_44 = 1 + $I_L2154_44
 2218.                   if ( $I_L2154_44 >= m ) exit
 2218.                enddo
 2220.                $I_L2144_52 = 1 + $I_L2144_52
 2219.                if ( $I_L2144_52 >= np ) exit
 2219.             enddo
 2219.          endif
 2219.       endif
 2221.       return
 2221.       end
 2221.       
 2248.       
 2248.       subroutine deledd( m, np, tau, ssc, g0, cza, rr, tt, td )
 2248.       t$104 = m
 2248.       t$105 = np
 2266.       t$619 = _zla( 0, m )
 2248.       t$620 = _zla( 0, m )
 2266.       t$621 = _zla( 0, np )
 2248.       t$622 = _zla( 0, m ) * _zla( 0, np )
 2284.       if ( np > 0 ) then
 2285.          if ( m > 0 ) then
 2284.             $I_L2284_14 = 0
 2284. !dir$ blocking_size( 0, 0 )
 2284.             do
 2285.                $I_L2285_12 = 0
 2285. !dir$ ivdep
 2285. !dir$ blocking_size( 0, 0 )
 2285.                do
 2286.                   $zth_S6 = cza(1 + $I_L2285_12)
 2291.                   $ff_S2 = g0(1 + $I_L2285_12, 1 + $I_L2284_14) * g0(1 + $I_L2285_12, 1 + $I_L2284_14)
 2292.                   $xx_S3 = 1.0 + -( $ff_S2 * ssc(1 + $I_L2285_12, 1 + $I_L2284_14) )
 2293.                   $taup_S9 = tau(1 + $I_L2285_12, 1 + $I_L2284_14) * $xx_S3
 2294.                   $sscp_S5 = ( ssc(1 + $I_L2285_12, 1 + $I_L2284_14) * ( 1.0 + -$ff_S2 ) * 1.0/$xx_S3 )
 2295.                   $gp_S4 = ( g0(1 + $I_L2285_12, 1 + $I_L2284_14) * 1.0/( 1.0 + g0(1 + $I_L2285_12, 1 + $I_L2284_14) ) )
 2302.                   $gm1_S11 = 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) )
 2303.                   $gm2_S10 = -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) )
 2307.                   $akk_S8 = _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) )
 2310.                   $st7_S14 = 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) ) * $zth_S6 )
 2311.                   $st8_S13 = 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) ) * $zth_S6 )
 2312.                   $st3_S7 = ( 1.0 + -( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) ) * $zth_S6 ) ) * ( 1.0 + ( _sqrt( ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + ( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) * ( ( 2.5e-1 * ( 7.0 + -( $sscp_S5 * ( 4.0 + ( 3.0 * $gp_S4 ) ) ) ) ) + -( -2.5e-1 * ( 1.0 + -( $sscp_S5 * ( 4.0 + -( 3.0 * $gp_S4 ) ) ) ) ) ) ) * $zth_S6 ) )
 2314.                   if ( abs( $st3_S7 ) < 1.0e-8 ) then
 2315.                      $zth_S6 = 1.0e-3 + $zth_S6
 2317.                      $st7_S14 = 1.0 + -( $akk_S8 * $zth_S6 )
 2318.                      $st8_S13 = 1.0 + ( $akk_S8 * $zth_S6 )
 2319.                      $st3_S7 = ( 1.0 + -( $akk_S8 * $zth_S6 ) ) * ( 1.0 + ( $akk_S8 * $zth_S6 ) )
 2319.                   endif
 2323.                   $td_WR0_R0 = _expn( -( $taup_S9 * 1.0/$zth_S6 ) )
 2323.                   td(1 + $I_L2285_12, 1 + $I_L2284_14) = $td_WR0_R0
 2335.                   $temp_all_S15 = ( ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) + -( ( $gm2_S10 + ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) * ( $gm1_S11 + -$gm2_S10 ) ) * $zth_S6 ) ) * ( 2.0 * $akk_S8 ) * $td_WR0_R0
 2336.                   $bll_S16 = ( ( $gm1_S11 + -( ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) * ( $gm1_S11 + -$gm2_S10 ) ) ) * $zth_S6 + -( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) + 1.0 ) * ( 2.0 * $akk_S8 )
 2346.                   $st2_S12 = _expn( -( $akk_S8 * $taup_S9 ) )
 2355.                   $tt_WR0_R2 = -( ( ( ( ( ( $gm1_S11 + -( ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) * ( $gm1_S11 + -$gm2_S10 ) ) ) + ( $akk_S8 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) ) ) ) * $st8_S13 ) + -( ( ( ( $gm1_S11 + -( ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) * ( $gm1_S11 + -$gm2_S10 ) ) ) + -( $akk_S8 * ( 1.0 + -( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) ) ) ) * $st7_S14 ) * ( $st2_S12 * $st2_S12 ) ) ) * $td_WR0_R0 + -( $bll_S16 * $st2_S12 ) ) * ( $sscp_S5 * 1.0/( ( $akk_S8 + $gm1_S11 + ( $akk_S8 + -$gm1_S11 ) * ( $st2_S12 * $st2_S12 ) ) * $st3_S7 ) ) )
 2357.                   $rr_WR0_R1 = max( 0.0, ( ( ( ( ( $gm2_S10 + ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) * ( $gm1_S11 + -$gm2_S10 ) ) + ( $akk_S8 * ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) ) ) * $st7_S14 ) + -( ( ( ( $gm2_S10 + ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) * ( $gm1_S11 + -$gm2_S10 ) ) + -( $akk_S8 * ( 2.5e-1 * ( 2.0 + $gp_S4 * $zth_S6 * -3.0 ) ) ) ) * $st8_S13 ) * ( $st2_S12 * $st2_S12 ) ) + -( $temp_all_S15 * $st2_S12 ) ) * ( $sscp_S5 * 1.0/( ( $akk_S8 + $gm1_S11 + ( $akk_S8 + -$gm1_S11 ) * ( $st2_S12 * $st2_S12 ) ) * $st3_S7 ) ) ) )
 2357.                   rr(1 + $I_L2285_12, 1 + $I_L2284_14) = $rr_WR0_R1
 2360.                   $tt_WR0_R2 = max( 0.0, $tt_WR0_R2 ) + $td_WR0_R0
 2360.                   tt(1 + $I_L2285_12, 1 + $I_L2284_14) = $tt_WR0_R2
 2361.                   $I_L2285_12 = 1 + $I_L2285_12
 2320.                   if ( $I_L2285_12 >= m ) exit
 2320.                enddo
 2362.                $I_L2284_14 = 1 + $I_L2284_14
 2361.                if ( $I_L2284_14 >= np ) exit
 2361.             enddo
 2361.          endif
 2361.       endif
 2364.       return
 2364.       end
 2364.       
 2378.       
 2378.       subroutine rflx( m, np, swc, u1, du, nu, swh, w1, dw, nw, tbl, df )
 2378.       t$106 = m
 2378.       t$107 = ( 1 + np )
 2392.       t$623 = _zla( 0, m )
 2378.       t$624 = _zla( 0, m )
 2392.       t$625 = _zla( 0, ( 1 + np ) )
 2378.       t$626 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 2378.       t$108 = nu
 2378.       t$109 = nw
 2394.       t$627 = _zla( 0, nu )
 2378.       t$628 = _zla( 0, nu )
 2394.       t$629 = _zla( 0, nw )
 2378.       t$630 = _zla( 0, nu ) * _zla( 0, nw )
 2406.       $x1_S2 = u1 + -5.0e-1 * du
 2407.       $y1_S4 = w1 + -5.0e-1 * dw
 2409.       if ( np > 0 ) then
 2410.          if ( m > 0 ) then
 2409.             $I_L2409_10 = 0
 2409.             do
 2410.                $I_L2410_8 = 0
 2410. !dir$ ivdep
 2410.                do
 2411.                   $temp_clog_S3 = swc(1 + $I_L2410_8, 2 + $I_L2409_10)
 2412.                   $wlog_S5 = swh(1 + $I_L2410_8, 2 + $I_L2409_10)
 2417.                   $ic_S6 = min( nu, ( max( 2, int( 1.0 + ( ( $temp_clog_S3 + -$x1_S2 ) * 1.0/du ) ) ) ) )
 2418.                   $iw_S7 = min( nw, ( max( 2, int( 1.0 + ( ( $wlog_S5 + -$y1_S4 ) * 1.0/dw ) ) ) ) )
 2421.                   $x2_S8 = tbl(-1 + $ic_S6, -1 + ( min( nw, ( max( 2, int( 1.0 + ( ( $wlog_S5 + -$y1_S4 ) * 1.0/dw ) ) ) ) ) )) + ( ( tbl(-1 + $ic_S6, min( nw, ( max( 2, int( 1.0 + ( ( $wlog_S5 + -$y1_S4 ) * 1.0/dw ) ) ) ) )) + -tbl(-1 + $ic_S6, -1 + ( min( nw, ( max( 2, int( 1.0 + ( ( $wlog_S5 + -$y1_S4 ) * 1.0/dw ) ) ) ) ) )) ) * 1.0/dw ) * ( $wlog_S5 + -( real( -2 + ( min( nw, ( max( 2, int( 1.0 + ( ( $wlog_S5 + -$y1_S4 ) * 1.0/dw ) ) ) ) ) ) ) * dw ) + -w1 )
 2422.                   $y2_S9 = $x2_S8 + ( ( tbl(min( nu, ( max( 2, int( 1.0 + ( ( $temp_clog_S3 + -$x1_S2 ) * 1.0/du ) ) ) ) ), -1 + $iw_S7) + -tbl(-1 + ( min( nu, ( max( 2, int( 1.0 + ( ( $temp_clog_S3 + -$x1_S2 ) * 1.0/du ) ) ) ) ) ), -1 + $iw_S7) ) * 1.0/du ) * ( $temp_clog_S3 + -( real( -2 + ( min( nu, ( max( 2, int( 1.0 + ( ( $temp_clog_S3 + -$x1_S2 ) * 1.0/du ) ) ) ) ) ) ) * du ) + -u1 )
 2423.                   df(1 + $I_L2410_8, 2 + $I_L2409_10) = df(1 + $I_L2410_8, 2 + $I_L2409_10) + $y2_S9
 2424.                   $I_L2410_8 = 1 + $I_L2410_8
 2410.                   if ( $I_L2410_8 >= m ) exit
 2410.                enddo
 2425.                $I_L2409_10 = 1 + $I_L2409_10
 2424.                if ( $I_L2409_10 >= np ) exit
 2424.             enddo
 2424.          endif
 2424.       endif
 2427.       return
 2427.       end
 2427.       
 2468.       
 2468.       subroutine cldflx( m, np, ict, icb, ih1, ih2, im1, im2, is1, is2, cc, rr, tt, td, rs, ts, fclr, fall, fsdir, fsdif, fsdir_c, fsdif_c, fclr_d, fclr_u, fall_d, fall_u )
 2468.       t$110 = m
 2477.       t$631 = _zla( 0, m )
 2468.       t$632 = _zla( 0, m )
 2468.       t$633 = 3 * _zla( 0, m )
 2468.       t$111 = ( 1 + np )
 2476.       t$634 = _zla( 0, ( 1 + np ) )
 2468.       t$635 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 2468.       t$636 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 2
 2468.       t$637 = _zla( 0, m ) * _zla( 0, ( 1 + np ) )
 2497.       t$640 = 8 * _zla( 0, m )
 2497.       t$641 = 8 * _zla( 0, m )
 2497.       t$643 = 16 * _zla( 0, m )
 2497.       t$644 = 16 * _zla( 0, m )
 2497.       t$646 = 24 * _zla( 0, m )
 2491.       t$647 = 24 * _zla( 0, m )
 2491.       t$649 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 24 * _zla( 0, m )
 2496.       t$650 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 24 * _zla( 0, m )
 2496.       t$652 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 32 * _zla( 0, m )
 2495.       t$653 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 32 * _zla( 0, m )
 2495.       t$655 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m )
 2493.       t$656 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m )
 2493.       t$658 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
 2492.       t$659 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
 2492.       t$661 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 2468.       t$662 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 2
 2468.       t$663 = _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 4
 2488.       t$664 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 2488.       t$666 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 56
 2487.       t$667 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 56
 2487.       t$669 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 88
 2489.       t$670 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 88
 2489.       t$672 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 120
 2486.       t$673 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 120
 2486.       t$675 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 152
 2485.       t$676 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 152
 2485.       t$678 = 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 184
 2468.       t$638 = int( _alloc( 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 184 ), 8 )
 2497.       t$639 = t$638
 2497.       t$642 = t$638 + 8 * _zla( 0, m )
 2497.       t$645 = t$638 + 16 * _zla( 0, m )
 2491.       t$648 = t$638 + 24 * _zla( 0, m )
 2496.       t$651 = t$638 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 24 * _zla( 0, m )
 2495.       t$654 = t$638 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 32 * _zla( 0, m )
 2493.       t$657 = t$638 + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 8 + 40 * _zla( 0, m )
 2492.       t$660 = t$638 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 16
 2488.       t$665 = t$638 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 24
 2487.       t$668 = t$638 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 56
 2489.       t$671 = t$638 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 88
 2486.       t$674 = t$638 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 120
 2485.       t$677 = t$638 + 40 * _zla( 0, m ) + _zla( 0, m ) * _zla( 0, ( 1 + np ) ) * 152
 2504.       $F_A33 = ( 1 + np )
 2504.       $F_A34 = m
 2504.       if ( and( -$F_A34, -$F_A33 ) < 0 ) then
 2504.          $I_L2504_484 = 0
 2504.          do
 2504.             $I_L2504_423 = 0
 2504. !dir$ ivdep
 2504.             do
 2504.                fclr(1 + $I_L2504_423, 1 + $I_L2504_484) = 0.0
 2504.                $I_L2504_423 = 1 + $I_L2504_423
 2504.                if ( $I_L2504_423 >= $F_A34 ) exit
 2504.             enddo
 2504.             $I_L2504_484 = 1 + $I_L2504_484
 2504.             if ( $I_L2504_484 >= $F_A33 ) exit
 2504.          enddo
 2504.       endif
 2505.       $F_A35 = ( 1 + np )
 2505.       $F_A36 = m
 2505.       if ( and( -$F_A36, -$F_A35 ) < 0 ) then
 2505.          $I_L2505_486 = 0
 2505.          do
 2505.             $I_L2505_425 = 0
 2505. !dir$ ivdep
 2505.             do
 2505.                fall(1 + $I_L2505_425, 1 + $I_L2505_486) = 0.0
 2505.                $I_L2505_425 = 1 + $I_L2505_425
 2505.                if ( $I_L2505_425 >= $F_A36 ) exit
 2505.             enddo
 2505.             $I_L2505_486 = 1 + $I_L2505_486
 2505.             if ( $I_L2505_486 >= $F_A35 ) exit
 2505.          enddo
 2505.       endif
 2506.       $F_A37 = ( 1 + np )
 2506.       $F_A38 = m
 2506.       if ( and( -$F_A38, -$F_A37 ) < 0 ) then
 2506.          $I_L2506_488 = 0
 2506.          do
 2506.             $I_L2506_427 = 0
 2506. !dir$ ivdep
 2506.             do
 2506.                fclr_d(1 + $I_L2506_427, 1 + $I_L2506_488) = 0.0
 2506.                $I_L2506_427 = 1 + $I_L2506_427
 2506.                if ( $I_L2506_427 >= $F_A38 ) exit
 2506.             enddo
 2506.             $I_L2506_488 = 1 + $I_L2506_488
 2506.             if ( $I_L2506_488 >= $F_A37 ) exit
 2506.          enddo
 2506.       endif
 2507.       $F_A39 = ( 1 + np )
 2507.       $F_A40 = m
 2507.       if ( and( -$F_A40, -$F_A39 ) < 0 ) then
 2507.          $I_L2507_490 = 0
 2507.          do
 2507.             $I_L2507_429 = 0
 2507. !dir$ ivdep
 2507.             do
 2507.                fclr_u(1 + $I_L2507_429, 1 + $I_L2507_490) = 0.0
 2507.                $I_L2507_429 = 1 + $I_L2507_429
 2507.                if ( $I_L2507_429 >= $F_A40 ) exit
 2507.             enddo
 2507.             $I_L2507_490 = 1 + $I_L2507_490
 2507.             if ( $I_L2507_490 >= $F_A39 ) exit
 2507.          enddo
 2507.       endif
 2508.       $F_A41 = ( 1 + np )
 2508.       $F_A42 = m
 2508.       if ( and( -$F_A42, -$F_A41 ) < 0 ) then
 2508.          $I_L2508_492 = 0
 2508.          do
 2508.             $I_L2508_431 = 0
 2508. !dir$ ivdep
 2508.             do
 2508.                fall_d(1 + $I_L2508_431, 1 + $I_L2508_492) = 0.0
 2508.                $I_L2508_431 = 1 + $I_L2508_431
 2508.                if ( $I_L2508_431 >= $F_A42 ) exit
 2508.             enddo
 2508.             $I_L2508_492 = 1 + $I_L2508_492
 2508.             if ( $I_L2508_492 >= $F_A41 ) exit
 2508.          enddo
 2508.       endif
 2509.       $F_A43 = ( 1 + np )
 2509.       $F_A44 = m
 2509.       if ( and( -$F_A44, -$F_A43 ) < 0 ) then
 2509.          $I_L2509_494 = 0
 2509.          do
 2509.             $I_L2509_433 = 0
 2509. !dir$ ivdep
 2509.             do
 2509.                fall_u(1 + $I_L2509_433, 1 + $I_L2509_494) = 0.0
 2509.                $I_L2509_433 = 1 + $I_L2509_433
 2509.                if ( $I_L2509_433 >= $F_A44 ) exit
 2509.             enddo
 2509.             $I_L2509_494 = 1 + $I_L2509_494
 2509.             if ( $I_L2509_494 >= $F_A43 ) exit
 2509.          enddo
 2509.       endif
 2511.       $F_A45 = m
 2511.       if ( m > 0 ) then
 2511.          $I_L2511_435 = 0
 2511. !dir$ ivdep
 2511.          do
 2511.             fsdir(1 + $I_L2511_435) = 0.0
 2511.             $I_L2511_435 = 1 + $I_L2511_435
 2511.             if ( $I_L2511_435 >= $F_A45 ) exit
 2511.          enddo
 2511.       endif
 2512.       $F_A46 = m
 2512.       if ( m > 0 ) then
 2512.          $I_L2512_437 = 0
 2512. !dir$ ivdep
 2512.          do
 2512.             fsdif(1 + $I_L2512_437) = 0.0
 2512.             $I_L2512_437 = 1 + $I_L2512_437
 2512.             if ( $I_L2512_437 >= $F_A46 ) exit
 2512.          enddo
 2512.       endif
 2513.       $F_A47 = m
 2513.       if ( m > 0 ) then
 2513.          $I_L2513_439 = 0
 2513. !dir$ ivdep
 2513.          do
 2513.             fsdir_c(1 + $I_L2513_439) = 0.0
 2513.             $I_L2513_439 = 1 + $I_L2513_439
 2513.             if ( $I_L2513_439 >= $F_A47 ) exit
 2513.          enddo
 2513.       endif
 2514.       $F_A48 = m
 2514.       if ( m > 0 ) then
 2514.          $I_L2514_441 = 0
 2514. !dir$ ivdep
 2514.          do
 2514.             fsdif_c(1 + $I_L2514_441) = 0.0
 2514.             $I_L2514_441 = 1 + $I_L2514_441
 2514.             if ( $I_L2514_441 >= $F_A48 ) exit
 2514.          enddo
 2514.       endif
 2522.       if ( ih2 + -ih1 >= 0 ) then
 2522.          $I_L2522_496 = 0
 2522.          do
 2524.             if ( m > 0 ) then
 2524.                $I_L2524_443 = 0
 2524. !dir$ ivdep
 2524.                do
 2525.                   tda(1 + $I_L2524_443, 1, ih1 + $I_L2522_496, 1) = td(1 + $I_L2524_443, 1, ih1 + $I_L2522_496)
 2526.                   tta(1 + $I_L2524_443, 1, ih1 + $I_L2522_496, 1) = tt(1 + $I_L2524_443, 1, ih1 + $I_L2522_496)
 2527.                   rsa(1 + $I_L2524_443, 1, ih1 + $I_L2522_496, 1) = rs(1 + $I_L2524_443, 1, ih1 + $I_L2522_496)
 2528.                   tda(1 + $I_L2524_443, 1, ih1 + $I_L2522_496, 2) = td(1 + $I_L2524_443, 1, ih1 + $I_L2522_496)
 2529.                   tta(1 + $I_L2524_443, 1, ih1 + $I_L2522_496, 2) = tt(1 + $I_L2524_443, 1, ih1 + $I_L2522_496)
 2530.                   rsa(1 + $I_L2524_443, 1, ih1 + $I_L2522_496, 2) = rs(1 + $I_L2524_443, 1, ih1 + $I_L2522_496)
 2531.                   $I_L2524_443 = 1 + $I_L2524_443
 2524.                   if ( $I_L2524_443 >= m ) exit
 2524.                enddo
 2524.             endif
 2566.             $I_L2522_496 = 1 + $I_L2522_496
 2565.             if ( $I_L2522_496 >= ih2 + -ih1 + 1 ) exit
 2565.          enddo
 2522.          $I_L2522_536 = 0
 2522.          do
 2533.             if ( -3 + ict >= 0 ) then
 2534.                if ( m > 0 ) then
 2534.                   $I_L2534_524 = 0
 2534.                   do
 2533.                      $I_L2533_510 = 0
 2533. !dir$ blocking_size( 0, 0 )
 2533.                      do
 2534.                         $I_L2534_445 = 0
 2534. !dir$ ivdep
 2534. !dir$ blocking_size( 256, 256 )
 2534.                         do
 2535.                            $denm_S4 = ( ts($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536) * 1.0/( 1.0 + -( rsa($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) * rs($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536) ) ) )
 2536.                            tda($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536, 1) = tda($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) * td($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536)
 2537.                            tta($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536, 1) = tda($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) * tt($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536) + ( tda($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) * rsa($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) * rr($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536) + tta($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) + -tda($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) ) * $denm_S4
 2540.                            rsa($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536, 1) = rs($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536) + ts($I_L2534_445 + 256 * $I_L2534_524 + 1, 2 + $I_L2533_510, ih1 + $I_L2522_536) * rsa($I_L2534_445 + 256 * $I_L2534_524 + 1, 1 + $I_L2533_510, ih1 + $I_L2522_536, 1) * $denm_S4
 2534.                            $I_L2534_445 = 1 + $I_L2534_445
 2534.                            if ( $I_L2534_445 >= min( m, 256 + 256 * $I_L2534_524 ) + -256 * $I_L2534_524 ) exit
 2534.                         enddo
 2547.                         $I_L2533_510 = 1 + $I_L2533_510
 2547.                         if ( $I_L2533_510 >= -2 + ict ) exit
 2547.                      enddo
 2534.                      $I_L2534_524 = 1 + $I_L2534_524
 2545.                      if ( $I_L2534_524 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 2545.                   enddo
 2533.                   $I_L2533_498 = 0
 2533.                   do
 2534.                      $I_L2534_448 = 0
 2534. !dir$ ivdep
 2534.                      do
 2542.                         tda(1 + $I_L2534_448, 2 + $I_L2533_498, ih1 + $I_L2522_536, 2) = tda(1 + $I_L2534_448, 2 + $I_L2533_498, ih1 + $I_L2522_536, 1)
 2545.                         $I_L2534_448 = 1 + $I_L2534_448
 2534.                         if ( $I_L2534_448 >= m ) exit
 2534.                      enddo
 2547.                      $I_L2533_498 = 1 + $I_L2533_498
 2545.                      if ( $I_L2533_498 >= -2 + ict ) exit
 2545.                   enddo
 2545.                endif
 2545.             endif
 2566.             $I_L2522_536 = 1 + $I_L2522_536
 2565.             if ( $I_L2522_536 >= ih2 + -ih1 + 1 ) exit
 2565.          enddo
 2522.          $I_L2522_548 = 0
 2522.          do
 2551.             if ( im2 + -im1 >= 0 ) then
 2553.                if ( icb + -ict > 0 ) then
 2554.                   if ( m > 0 ) then
 2551.                      $I_L2551_538 = 0
 2551.                      do
 2554.                         $I_L2554_526 = 0
 2554.                         do
 2553.                            $I_L2553_512 = 0
 2553.                            if ( icb + -ict >= 2 ) then
 2553.                               $I_L2553_565 = 0
 2553. !dir$ blocking_size( 0, 0 )
 2553.                               do
 2554.                                  $I_L2554_450 = 0
 2554. !dir$ ivdep
 2554. !dir$ blocking_size( 256, 256 )
 2554.                                  do
 2556.                                     tda($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + 2 * $I_L2553_565, ih1 + $I_L2522_548, im1 + $I_L2551_538) = tda($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + 2 * $I_L2553_565 + -1, ih1 + $I_L2522_548, im1 + $I_L2551_538) * td($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + 2 * $I_L2553_565, im1 + $I_L2551_538)
 2556.                                     tda($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + 2 * $I_L2553_565 + 1, ih1 + $I_L2522_548, im1 + $I_L2551_538) = tda($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + 2 * $I_L2553_565, ih1 + $I_L2522_548, im1 + $I_L2551_538) * td($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + 2 * $I_L2553_565 + 1, im1 + $I_L2551_538)
 2554.                                     $I_L2554_450 = 1 + $I_L2554_450
 2554.                                     if ( $I_L2554_450 >= min( m, 256 + 256 * $I_L2554_526 ) + -256 * $I_L2554_526 ) exit
 2554.                                  enddo
 2563.                                  $I_L2553_565 = 1 + $I_L2553_565
 2563.                                  if ( $I_L2553_565 >= _rsh( ( icb + -ict ), 1 ) ) exit
 2563.                               enddo
 2563.                               $I_L2553_512 = and( 0xfffffffffffffffeUL, ( icb + -ict ) )
 2563.                            endif
 2553.                            if ( $I_L2553_512 < icb + -ict ) then
 2554.                               $I_L2554_450 = 0
 2554. !dir$ ivdep
 2554. !dir$ blocking_size( 256, 256 )
 2554.                               do
 2556.                                  tda($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + $I_L2553_512, ih1 + $I_L2522_548, im1 + $I_L2551_538) = tda($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + $I_L2553_512 + -1, ih1 + $I_L2522_548, im1 + $I_L2551_538) * td($I_L2554_450 + 256 * $I_L2554_526 + 1, ict + $I_L2553_512, im1 + $I_L2551_538)
 2554.                                  $I_L2554_450 = 1 + $I_L2554_450
 2554.                                  if ( $I_L2554_450 >= min( m, 256 + 256 * $I_L2554_526 ) + -256 * $I_L2554_526 ) exit
 2554.                               enddo
 2554.                            endif
 2554.                            $I_L2554_526 = 1 + $I_L2554_526
 2562.                            if ( $I_L2554_526 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 2562.                         enddo
 2565.                         $I_L2551_538 = 1 + $I_L2551_538
 2563.                         if ( $I_L2551_538 >= im2 + -im1 + 1 ) exit
 2563.                      enddo
 2563.                   endif
 2563.                endif
 2563.             endif
 2533.             if ( -3 + ict >= 0 ) then
 2534.                if ( m > 0 ) then
 2533.                   $I_L2533_500 = 0
 2533.                   do
 2534.                      $I_L2534_453 = 0
 2534. !dir$ ivdep
 2534.                      do
 2543.                         tta(1 + $I_L2534_453, 2 + $I_L2533_500, ih1 + $I_L2522_548, 2) = tta(1 + $I_L2534_453, 2 + $I_L2533_500, ih1 + $I_L2522_548, 1)
 2545.                         $I_L2534_453 = 1 + $I_L2534_453
 2534.                         if ( $I_L2534_453 >= m ) exit
 2534.                      enddo
 2547.                      $I_L2533_500 = 1 + $I_L2533_500
 2545.                      if ( $I_L2533_500 >= -2 + ict ) exit
 2545.                   enddo
 2533.                   $I_L2533_502 = 0
 2533.                   do
 2534.                      $I_L2534_455 = 0
 2534. !dir$ ivdep
 2534.                      do
 2544.                         rsa(1 + $I_L2534_455, 2 + $I_L2533_502, ih1 + $I_L2522_548, 2) = rsa(1 + $I_L2534_455, 2 + $I_L2533_502, ih1 + $I_L2522_548, 1)
 2545.                         $I_L2534_455 = 1 + $I_L2534_455
 2534.                         if ( $I_L2534_455 >= m ) exit
 2534.                      enddo
 2547.                      $I_L2533_502 = 1 + $I_L2533_502
 2545.                      if ( $I_L2533_502 >= -2 + ict ) exit
 2545.                   enddo
 2545.                endif
 2545.             endif
 2566.             $I_L2522_548 = 1 + $I_L2522_548
 2565.             if ( $I_L2522_548 >= ih2 + -ih1 + 1 ) exit
 2565.          enddo
 2522.          $I_L2522_550 = 0
 2522.          do
 2551.             if ( im2 + -im1 >= 0 ) then
 2553.                if ( icb + -ict > 0 ) then
 2554.                   if ( m > 0 ) then
 2551.                      $I_L2551_540 = 0
 2551.                      do
 2554.                         $I_L2554_528 = 0
 2554.                         do
 2553.                            $I_L2553_514 = 0
 2553. !dir$ blocking_size( 0, 0 )
 2553.                            do
 2554.                               $I_L2554_457 = 0
 2554. !dir$ ivdep
 2554. !dir$ blocking_size( 256, 256 )
 2554.                               do
 2555.                                  $denm_S8 = ( ts($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, im1 + $I_L2551_540) * 1.0/( 1.0 + -( rsa($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) * rs($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, im1 + $I_L2551_540) ) ) )
 2557.                                  tta($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, ih1 + $I_L2522_550, im1 + $I_L2551_540) = tda($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) * tt($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, im1 + $I_L2551_540) + ( tda($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) * rsa($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) * rr($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, im1 + $I_L2551_540) + tta($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) + -tda($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) ) * $denm_S8
 2560.                                  rsa($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, ih1 + $I_L2522_550, im1 + $I_L2551_540) = rs($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, im1 + $I_L2551_540) + ts($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514, im1 + $I_L2551_540) * rsa($I_L2554_457 + 256 * $I_L2554_528 + 1, ict + $I_L2553_514 + -1, ih1 + $I_L2522_550, im1 + $I_L2551_540) * $denm_S8
 2554.                                  $I_L2554_457 = 1 + $I_L2554_457
 2554.                                  if ( $I_L2554_457 >= min( m, 256 + 256 * $I_L2554_528 ) + -256 * $I_L2554_528 ) exit
 2554.                               enddo
 2563.                               $I_L2553_514 = 1 + $I_L2553_514
 2563.                               if ( $I_L2553_514 >= ( icb + -ict ) ) exit
 2563.                            enddo
 2554.                            $I_L2554_528 = 1 + $I_L2554_528
 2562.                            if ( $I_L2554_528 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 2562.                         enddo
 2565.                         $I_L2551_540 = 1 + $I_L2551_540
 2563.                         if ( $I_L2551_540 >= im2 + -im1 + 1 ) exit
 2563.                      enddo
 2563.                   endif
 2563.                endif
 2563.             endif
 2566.             $I_L2522_550 = 1 + $I_L2522_550
 2565.             if ( $I_L2522_550 >= ih2 + -ih1 + 1 ) exit
 2565.          enddo
 2565.       endif
 2573.       if ( is2 + -is1 >= 0 ) then
 2573.          $I_L2573_504 = 0
 2573.          do
 2575.             if ( m > 0 ) then
 2575.                $I_L2575_460 = 0
 2575. !dir$ ivdep
 2575.                do
 2576.                   rra(1 + $I_L2575_460, 1 + np, 1, is1 + $I_L2573_504) = rr(1 + $I_L2575_460, 1 + np, is1 + $I_L2573_504)
 2577.                   rxa(1 + $I_L2575_460, 1 + np, 1, is1 + $I_L2573_504) = rs(1 + $I_L2575_460, 1 + np, is1 + $I_L2573_504)
 2578.                   rra(1 + $I_L2575_460, 1 + np, 2, is1 + $I_L2573_504) = rr(1 + $I_L2575_460, 1 + np, is1 + $I_L2573_504)
 2579.                   rxa(1 + $I_L2575_460, 1 + np, 2, is1 + $I_L2573_504) = rs(1 + $I_L2575_460, 1 + np, is1 + $I_L2573_504)
 2580.                   $I_L2575_460 = 1 + $I_L2575_460
 2575.                   if ( $I_L2575_460 >= m ) exit
 2575.                enddo
 2575.             endif
 2608.             $I_L2573_504 = 1 + $I_L2573_504
 2607.             if ( $I_L2573_504 >= is2 + -is1 + 1 ) exit
 2607.          enddo
 2573.          $I_L2573_542 = 0
 2573.          do
 2582.             if ( icb + -np <= 0 ) then
 2583.                if ( m > 0 ) then
 2583.                   $I_L2583_530 = 0
 2583.                   do
 2582.                      $I_L2582_516 = 0
 2582. !dir$ blocking_size( 0, 0 )
 2582.                      do
 2583.                         $I_L2583_462 = 0
 2583. !dir$ ivdep
 2583. !dir$ blocking_size( 256, 256 )
 2583.                         do
 2584.                            $denm_S13 = ( ts($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) * 1.0/( 1.0 + -( rs($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) * rxa($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516 + 1, 1, is1 + $I_L2573_542) ) ) )
 2585.                            rra($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, 1, is1 + $I_L2573_542) = rr($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) + ( td($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) * rra($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516 + 1, 1, is1 + $I_L2573_542) + ( tt($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) + -td($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) ) * rxa($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516 + 1, 1, is1 + $I_L2573_542) ) * $denm_S13
 2587.                            rxa($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, 1, is1 + $I_L2573_542) = rs($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) + ts($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516, is1 + $I_L2573_542) * rxa($I_L2583_462 + 256 * $I_L2583_530 + 1, np + -$I_L2582_516 + 1, 1, is1 + $I_L2573_542) * $denm_S13
 2583.                            $I_L2583_462 = 1 + $I_L2583_462
 2583.                            if ( $I_L2583_462 >= min( m, 256 + 256 * $I_L2583_530 ) + -256 * $I_L2583_530 ) exit
 2583.                         enddo
 2592.                         $I_L2582_516 = 1 + $I_L2582_516
 2592.                         if ( $I_L2582_516 >= np + -icb + 1 ) exit
 2592.                      enddo
 2583.                      $I_L2583_530 = 1 + $I_L2583_530
 2591.                      if ( $I_L2583_530 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 2591.                   enddo
 2582.                   $I_L2582_506 = 0
 2582.                   do
 2583.                      $I_L2583_465 = 0
 2583. !dir$ ivdep
 2583.                      do
 2589.                         rra(1 + $I_L2583_465, np + -$I_L2582_506, 2, is1 + $I_L2573_542) = rra(1 + $I_L2583_465, np + -$I_L2582_506, 1, is1 + $I_L2573_542)
 2591.                         $I_L2583_465 = 1 + $I_L2583_465
 2583.                         if ( $I_L2583_465 >= m ) exit
 2583.                      enddo
 2592.                      $I_L2582_506 = 1 + $I_L2582_506
 2591.                      if ( $I_L2582_506 >= np + -icb + 1 ) exit
 2591.                   enddo
 2582.                   $I_L2582_508 = 0
 2582.                   do
 2583.                      $I_L2583_467 = 0
 2583. !dir$ ivdep
 2583.                      do
 2590.                         rxa(1 + $I_L2583_467, np + -$I_L2582_508, 2, is1 + $I_L2573_542) = rxa(1 + $I_L2583_467, np + -$I_L2582_508, 1, is1 + $I_L2573_542)
 2591.                         $I_L2583_467 = 1 + $I_L2583_467
 2583.                         if ( $I_L2583_467 >= m ) exit
 2583.                      enddo
 2592.                      $I_L2582_508 = 1 + $I_L2582_508
 2591.                      if ( $I_L2582_508 >= np + -icb + 1 ) exit
 2591.                   enddo
 2591.                endif
 2591.             endif
 2608.             $I_L2573_542 = 1 + $I_L2573_542
 2607.             if ( $I_L2573_542 >= is2 + -is1 + 1 ) exit
 2607.          enddo
 2573.          $I_L2573_552 = 0
 2573.          do
 2595.             if ( im2 + -im1 >= 0 ) then
 2597.                if ( ict + -icb < 0 ) then
 2598.                   if ( m > 0 ) then
 2595.                      $I_L2595_544 = 0
 2595.                      do
 2598.                         $I_L2598_532 = 0
 2598.                         do
 2597.                            $I_L2597_518 = 0
 2597. !dir$ blocking_size( 0, 0 )
 2597.                            do
 2598.                               $I_L2598_469 = 0
 2598. !dir$ ivdep
 2598. !dir$ blocking_size( 256, 256 )
 2598.                               do
 2599.                                  $denm_S17 = ( ts($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) * 1.0/( 1.0 + -( rs($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) * rxa($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518, im1 + $I_L2595_544, is1 + $I_L2573_552) ) ) )
 2600.                                  rra($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544, is1 + $I_L2573_552) = rr($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) + ( td($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) * rra($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518, im1 + $I_L2595_544, is1 + $I_L2573_552) + ( tt($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) + -td($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) ) * rxa($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518, im1 + $I_L2595_544, is1 + $I_L2573_552) ) * $denm_S17
 2602.                                  rxa($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544, is1 + $I_L2573_552) = rs($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) + ts($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518 + -1, im1 + $I_L2595_544) * rxa($I_L2598_469 + 256 * $I_L2598_532 + 1, icb + -$I_L2597_518, im1 + $I_L2595_544, is1 + $I_L2573_552) * $denm_S17
 2598.                                  $I_L2598_469 = 1 + $I_L2598_469
 2598.                                  if ( $I_L2598_469 >= min( m, 256 + 256 * $I_L2598_532 ) + -256 * $I_L2598_532 ) exit
 2598.                               enddo
 2605.                               $I_L2597_518 = 1 + $I_L2597_518
 2605.                               if ( $I_L2597_518 >= ( icb + -ict ) ) exit
 2605.                            enddo
 2598.                            $I_L2598_532 = 1 + $I_L2598_532
 2604.                            if ( $I_L2598_532 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 2604.                         enddo
 2607.                         $I_L2595_544 = 1 + $I_L2595_544
 2605.                         if ( $I_L2595_544 >= im2 + -im1 + 1 ) exit
 2605.                      enddo
 2605.                   endif
 2605.                endif
 2605.             endif
 2608.             $I_L2573_552 = 1 + $I_L2573_552
 2607.             if ( $I_L2573_552 >= is2 + -is1 + 1 ) exit
 2607.          enddo
 2607.       endif
 2612.       if ( ih2 + -ih1 >= 0 ) then
 2612.          $I_L2612_554 = 0
 2612.          do
 2615.             if ( ih1 + $I_L2612_554 == 1 ) then
 2616.                if ( m > 0 ) then
 2616.                   $I_L2616_386 = 0
 2616. !dir$ ivdep
 2616.                   do
 2617.                      ch(1 + $I_L2616_386) = 1.0 + -cc(1 + $I_L2616_386, 1)
 2618.                      $I_L2616_386 = 1 + $I_L2616_386
 2616.                      if ( $I_L2616_386 >= m ) exit
 2616.                   enddo
 2616.                endif
 2619.             else if ( m > 0 ) then
 2621.                $I_L2621_388 = 0
 2621. !dir$ ivdep
 2621.                do
 2622.                   ch(1 + $I_L2621_388) = cc(1 + $I_L2621_388, 1)
 2623.                   $I_L2621_388 = 1 + $I_L2621_388
 2621.                   if ( $I_L2621_388 >= m ) exit
 2621.                enddo
 2621.             endif
 2626.             if ( im2 + -im1 >= 0 ) then
 2626.                $I_L2626_546 = 0
 2626.                do
 2628.                   if ( im1 + $I_L2626_546 == 1 ) then
 2629.                      if ( m > 0 ) then
 2629.                         $I_L2629_390 = 0
 2629. !dir$ ivdep
 2629.                         do
 2630.                            cm(1 + $I_L2629_390) = ch(1 + $I_L2629_390) * ( 1.0 + -cc(1 + $I_L2629_390, 2) )
 2631.                            $I_L2629_390 = 1 + $I_L2629_390
 2629.                            if ( $I_L2629_390 >= m ) exit
 2629.                         enddo
 2629.                      endif
 2632.                   else if ( m > 0 ) then
 2634.                      $I_L2634_392 = 0
 2634. !dir$ ivdep
 2634.                      do
 2635.                         cm(1 + $I_L2634_392) = ch(1 + $I_L2634_392) * cc(1 + $I_L2634_392, 2)
 2636.                         $I_L2634_392 = 1 + $I_L2634_392
 2634.                         if ( $I_L2634_392 >= m ) exit
 2634.                      enddo
 2634.                   endif
 2639.                   if ( is2 + -is1 >= 0 ) then
 2639.                      $I_L2639_534 = 0
 2639.                      do
 2641.                         if ( is1 + $I_L2639_534 == 1 ) then
 2642.                            if ( m > 0 ) then
 2642.                               $I_L2642_394 = 0
 2642. !dir$ ivdep
 2642.                               do
 2643.                                  ct(1 + $I_L2642_394) = cm(1 + $I_L2642_394) * ( 1.0 + -cc(1 + $I_L2642_394, 3) )
 2644.                                  $I_L2642_394 = 1 + $I_L2642_394
 2642.                                  if ( $I_L2642_394 >= m ) exit
 2642.                               enddo
 2642.                            endif
 2645.                         else if ( m > 0 ) then
 2647.                            $I_L2647_396 = 0
 2647. !dir$ ivdep
 2647.                            do
 2648.                               ct(1 + $I_L2647_396) = cm(1 + $I_L2647_396) * cc(1 + $I_L2647_396, 3)
 2649.                               $I_L2647_396 = 1 + $I_L2647_396
 2647.                               if ( $I_L2647_396 >= m ) exit
 2647.                            enddo
 2647.                         endif
 2653.                         if ( np + -icb >= 0 ) then
 2654.                            if ( m > 0 ) then
 2653.                               $I_L2653_472 = 0
 2653.                               do
 2654.                                  $I_L2654_398 = 0
 2654. !dir$ ivdep
 2654.                                  do
 2655.                                     $denm_S29 = ( ts(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534) * 1.0/( 1.0 + -( rsa(1 + $I_L2654_398, icb + $I_L2653_472 + -1, ih1 + $I_L2612_554, im1 + $I_L2626_546) * rs(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534) ) ) )
 2656.                                     tda(1 + $I_L2654_398, icb + $I_L2653_472, ih1 + $I_L2612_554, im1 + $I_L2626_546) = tda(1 + $I_L2654_398, icb + $I_L2653_472 + -1, ih1 + $I_L2612_554, im1 + $I_L2626_546) * td(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534)
 2657.                                     $LD_SPLT_P2 = tda(1 + $I_L2654_398, icb + $I_L2653_472 + -1, ih1 + $I_L2612_554, im1 + $I_L2626_546)
 2657.                                     tta(1 + $I_L2654_398, icb + $I_L2653_472, ih1 + $I_L2612_554, im1 + $I_L2626_546) = $LD_SPLT_P2 * tt(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534) + ( $LD_SPLT_P2 * rr(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534) * rsa(1 + $I_L2654_398, icb + $I_L2653_472 + -1, ih1 + $I_L2612_554, im1 + $I_L2626_546) + tta(1 + $I_L2654_398, icb + $I_L2653_472 + -1, ih1 + $I_L2612_554, im1 + $I_L2626_546) + -$LD_SPLT_P2 ) * $denm_S29
 2660.                                     rsa(1 + $I_L2654_398, icb + $I_L2653_472, ih1 + $I_L2612_554, im1 + $I_L2626_546) = rs(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534) + ts(1 + $I_L2654_398, icb + $I_L2653_472, is1 + $I_L2639_534) * rsa(1 + $I_L2654_398, icb + $I_L2653_472 + -1, ih1 + $I_L2612_554, im1 + $I_L2626_546) * $denm_S29
 2662.                                     $I_L2654_398 = 1 + $I_L2654_398
 2654.                                     if ( $I_L2654_398 >= m ) exit
 2654.                                  enddo
 2663.                                  $I_L2653_472 = 1 + $I_L2653_472
 2662.                                  if ( $I_L2653_472 >= np + -icb + 1 ) exit
 2662.                               enddo
 2662.                            endif
 2662.                         endif
 2666.                         if ( 1 + -ict < 0 ) then
 2667.                            if ( m > 0 ) then
 2667.                               $I_L2667_522 = 0
 2667.                               do
 2666.                                  $I_L2666_520 = 0
 2666. !dir$ blocking_size( 0, 0 )
 2666.                                  do
 2667.                                     $I_L2667_400 = 0
 2667. !dir$ ivdep
 2667. !dir$ blocking_size( 256, 256 )
 2667.                                     do
 2668.                                        $denm_S32 = ( ts($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) * 1.0/( 1.0 + -( rs($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) * rxa($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520, im1 + $I_L2626_546, is1 + $I_L2639_534) ) ) )
 2669.                                        rra($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, im1 + $I_L2626_546, is1 + $I_L2639_534) = rr($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) + ( td($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) * rra($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520, im1 + $I_L2626_546, is1 + $I_L2639_534) + ( tt($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) + -td($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) ) * rxa($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520, im1 + $I_L2626_546, is1 + $I_L2639_534) ) * $denm_S32
 2671.                                        rxa($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, im1 + $I_L2626_546, is1 + $I_L2639_534) = rs($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) + ts($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520 + -1, ih1 + $I_L2612_554) * rxa($I_L2667_400 + 256 * $I_L2667_522 + 1, ict + -$I_L2666_520, im1 + $I_L2626_546, is1 + $I_L2639_534) * $denm_S32
 2667.                                        $I_L2667_400 = 1 + $I_L2667_400
 2667.                                        if ( $I_L2667_400 >= min( m, 256 + 256 * $I_L2667_522 ) + -256 * $I_L2667_522 ) exit
 2667.                                     enddo
 2674.                                     $I_L2666_520 = 1 + $I_L2666_520
 2674.                                     if ( $I_L2666_520 >= -1 + ict ) exit
 2674.                                  enddo
 2667.                                  $I_L2667_522 = 1 + $I_L2667_522
 2673.                                  if ( $I_L2667_522 >= 1 + max( 0, -1 + _rsh( 255 + m, 8 ) ) ) exit
 2673.                               enddo
 2673.                            endif
 2673.                         endif
 2678.                         if ( np > 0 ) then
 2679.                            if ( m > 0 ) then
 2678.                               $I_L2678_474 = 0
 2678. !dir$ blocking_size( 0, 0 )
 2678.                               do
 2679.                                  $I_L2679_403 = 0
 2679. !dir$ ivdep
 2679. !dir$ blocking_size( 0, 0 )
 2679.                                  do
 2680.                                     $denm_S35 = 1.0/( 1.0 + -( rsa(1 + $I_L2679_403, 1 + $I_L2678_474, ih1 + $I_L2612_554, im1 + $I_L2626_546) * rxa(1 + $I_L2679_403, 2 + $I_L2678_474, im1 + $I_L2626_546, is1 + $I_L2639_534) ) )
 2681.                                     $fdndir_WR0_R0 = tda(1 + $I_L2679_403, 1 + $I_L2678_474, ih1 + $I_L2612_554, im1 + $I_L2626_546)
 2681.                                     fdndir(1 + $I_L2679_403) = $fdndir_WR0_R0
 2682.                                     $xx_S37 = $fdndir_WR0_R0 * rra(1 + $I_L2679_403, 2 + $I_L2678_474, im1 + $I_L2626_546, is1 + $I_L2639_534)
 2683.                                     $yy_S36 = tta(1 + $I_L2679_403, 1 + $I_L2678_474, ih1 + $I_L2612_554, im1 + $I_L2626_546) + -$fdndir_WR0_R0
 2684.                                     $fdndif_WR0_R1 = ( $xx_S37 * rsa(1 + $I_L2679_403, 1 + $I_L2678_474, ih1 + $I_L2612_554, im1 + $I_L2626_546) + $yy_S36 ) * $denm_S35
 2684.                                     fdndif(1 + $I_L2679_403) = $fdndif_WR0_R1
 2688.                                     $fupdif_S38 = ( $xx_S37 + $yy_S36 * rxa(1 + $I_L2679_403, 2 + $I_L2678_474, im1 + $I_L2626_546, is1 + $I_L2639_534) ) * $denm_S35
 2689.                                     flxdn(1 + $I_L2679_403, 2 + $I_L2678_474) = $fdndir_WR0_R0 + $fdndif_WR0_R1 + -$fupdif_S38
 2690.                                     fup(1 + $I_L2679_403, 2 + $I_L2678_474) = ( $xx_S37 + $yy_S36 * rxa(1 + $I_L2679_403, 2 + $I_L2678_474, im1 + $I_L2626_546, is1 + $I_L2639_534) ) * $denm_S35
 2691.                                     fdn(1 + $I_L2679_403, 2 + $I_L2678_474) = $fdndir_WR0_R0 + $fdndif_WR0_R1
 2692.                                     $I_L2679_403 = 1 + $I_L2679_403
 2679.                                     if ( $I_L2679_403 >= m ) exit
 2679.                                  enddo
 2693.                                  $I_L2678_474 = 1 + $I_L2678_474
 2692.                                  if ( $I_L2678_474 >= np ) exit
 2692.                               enddo
 2692.                            endif
 2692.                         endif
 2695.                         if ( m > 0 ) then
 2695.                            $I_L2695_405 = 0
 2695. !dir$ ivdep
 2695.                            do
 2696.                               flxdn(1 + $I_L2695_405, 1) = 1.0 + -rra(1 + $I_L2695_405, 1, im1 + $I_L2626_546, is1 + $I_L2639_534)
 2697.                               fdn(1 + $I_L2695_405, 1) = 1.0
 2698.                               fup(1 + $I_L2695_405, 1) = rra(1 + $I_L2695_405, 1, im1 + $I_L2626_546, is1 + $I_L2639_534)
 2699.                               $I_L2695_405 = 1 + $I_L2695_405
 2695.                               if ( $I_L2695_405 >= m ) exit
 2695.                            enddo
 2720.                            if ( ih1 + $I_L2612_554 /= 1 ) then
 2716.                               $I_L2716_411 = 0
 2716. !dir$ ivdep
 2716.                               do
 2717.                                  fsdir(1 + $I_L2716_411) = fsdir(1 + $I_L2716_411) + fdndir(1 + $I_L2716_411) * ct(1 + $I_L2716_411)
 2718.                                  fsdif(1 + $I_L2716_411) = fsdif(1 + $I_L2716_411) + fdndif(1 + $I_L2716_411) * ct(1 + $I_L2716_411)
 2724.                                  $I_L2716_411 = 1 + $I_L2716_411
 2723.                                  if ( $I_L2716_411 >= m ) exit
 2723.                               enddo
 2723.                            else if ( im1 + $I_L2626_546 /= 1 ) then
 2716.                               $I_L2716_415 = 0
 2716. !dir$ ivdep
 2716.                               do
 2717.                                  fsdir(1 + $I_L2716_415) = fsdir(1 + $I_L2716_415) + fdndir(1 + $I_L2716_415) * ct(1 + $I_L2716_415)
 2718.                                  fsdif(1 + $I_L2716_415) = fsdif(1 + $I_L2716_415) + fdndif(1 + $I_L2716_415) * ct(1 + $I_L2716_415)
 2724.                                  $I_L2716_415 = 1 + $I_L2716_415
 2723.                                  if ( $I_L2716_415 >= m ) exit
 2723.                               enddo
 2723.                            else if ( is1 + $I_L2639_534 == 1 ) then
 2716.                               $I_L2716_409 = 0
 2716. !dir$ ivdep
 2716.                               do
 2717.                                  fsdir(1 + $I_L2716_409) = fsdir(1 + $I_L2716_409) + fdndir(1 + $I_L2716_409) * ct(1 + $I_L2716_409)
 2718.                                  fsdif(1 + $I_L2716_409) = fsdif(1 + $I_L2716_409) + fdndif(1 + $I_L2716_409) * ct(1 + $I_L2716_409)
 2721.                                  fsdir_c(1 + $I_L2716_409) = fdndir(1 + $I_L2716_409)
 2722.                                  fsdif_c(1 + $I_L2716_409) = fdndif(1 + $I_L2716_409)
 2724.                                  $I_L2716_409 = 1 + $I_L2716_409
 2723.                                  if ( $I_L2716_409 >= m ) exit
 2723.                               enddo
 2723.                            else
 2716.                               $I_L2716_419 = 0
 2716. !dir$ ivdep
 2716.                               do
 2717.                                  fsdir(1 + $I_L2716_419) = fsdir(1 + $I_L2716_419) + fdndir(1 + $I_L2716_419) * ct(1 + $I_L2716_419)
 2718.                                  fsdif(1 + $I_L2716_419) = fsdif(1 + $I_L2716_419) + fdndif(1 + $I_L2716_419) * ct(1 + $I_L2716_419)
 2724.                                  $I_L2716_419 = 1 + $I_L2716_419
 2723.                                  if ( $I_L2716_419 >= m ) exit
 2723.                               enddo
 2723.                            endif
 2723.                         endif
 2703.                         if ( np >= 0 ) then
 2704.                            if ( m > 0 ) then
 2705.                               if ( ih1 + $I_L2612_554 /= 1 ) then
 2703.                                  $I_L2703_478 = 0
 2703.                                  if ( -3 + np >= 0 ) then
 2703.                                     $I_L2703_571 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                     do
 2704.                                        $I_L2704_413 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                        do
 2710.                                           fall(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) = fall(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) + flxdn(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2711.                                           fall_d(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) = fall_d(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) + fdn(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2712.                                           fall_u(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) = fall_u(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) + fup(1 + $I_L2704_413, 1 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2710.                                           fall(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) = fall(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) + flxdn(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2711.                                           fall_d(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) = fall_d(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) + fdn(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2712.                                           fall_u(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) = fall_u(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) + fup(1 + $I_L2704_413, 2 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2710.                                           fall(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) = fall(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) + flxdn(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2711.                                           fall_d(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) = fall_d(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) + fdn(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2712.                                           fall_u(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) = fall_u(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) + fup(1 + $I_L2704_413, 3 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2710.                                           fall(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) = fall(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) + flxdn(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2711.                                           fall_d(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) = fall_d(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) + fdn(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2712.                                           fall_u(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) = fall_u(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) + fup(1 + $I_L2704_413, 4 + 4 * $I_L2703_571) * ct(1 + $I_L2704_413)
 2713.                                           $I_L2704_413 = 1 + $I_L2704_413
 2709.                                           if ( $I_L2704_413 >= m ) exit
 2709.                                        enddo
 2714.                                        $I_L2703_571 = 1 + $I_L2703_571
 2713.                                        if ( $I_L2703_571 >= _rsh( 1 + np, 2 ) ) exit
 2713.                                     enddo
 2714.                                     $I_L2703_478 = and( 0xfffffffffffffffcUL, 1 + np )
 2714.                                  endif
 2703.                                  if ( $I_L2703_478 < 1 + np ) then
 2703.                                     $I_L2703_556 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                     do
 2704.                                        $I_L2704_413 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                        do
 2710.                                           fall(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) = fall(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) + flxdn(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) * ct(1 + $I_L2704_413)
 2711.                                           fall_d(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) = fall_d(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) + fdn(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) * ct(1 + $I_L2704_413)
 2712.                                           fall_u(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) = fall_u(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) + fup(1 + $I_L2704_413, $I_L2703_478 + $I_L2703_556 + 1) * ct(1 + $I_L2704_413)
 2713.                                           $I_L2704_413 = 1 + $I_L2704_413
 2709.                                           if ( $I_L2704_413 >= m ) exit
 2709.                                        enddo
 2714.                                        $I_L2703_556 = 1 + $I_L2703_556
 2713.                                        if ( $I_L2703_556 >= np + -$I_L2703_478 + 1 ) exit
 2713.                                     enddo
 2713.                                  endif
 2713.                               else if ( im1 + $I_L2626_546 /= 1 ) then
 2703.                                  $I_L2703_480 = 0
 2703.                                  if ( -3 + np >= 0 ) then
 2703.                                     $I_L2703_569 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                     do
 2704.                                        $I_L2704_417 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                        do
 2710.                                           fall(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) = fall(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) + flxdn(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2711.                                           fall_d(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) = fall_d(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) + fdn(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2712.                                           fall_u(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) = fall_u(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) + fup(1 + $I_L2704_417, 1 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2710.                                           fall(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) = fall(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) + flxdn(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2711.                                           fall_d(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) = fall_d(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) + fdn(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2712.                                           fall_u(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) = fall_u(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) + fup(1 + $I_L2704_417, 2 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2710.                                           fall(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) = fall(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) + flxdn(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2711.                                           fall_d(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) = fall_d(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) + fdn(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2712.                                           fall_u(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) = fall_u(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) + fup(1 + $I_L2704_417, 3 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2710.                                           fall(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) = fall(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) + flxdn(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2711.                                           fall_d(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) = fall_d(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) + fdn(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2712.                                           fall_u(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) = fall_u(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) + fup(1 + $I_L2704_417, 4 + 4 * $I_L2703_569) * ct(1 + $I_L2704_417)
 2713.                                           $I_L2704_417 = 1 + $I_L2704_417
 2709.                                           if ( $I_L2704_417 >= m ) exit
 2709.                                        enddo
 2714.                                        $I_L2703_569 = 1 + $I_L2703_569
 2713.                                        if ( $I_L2703_569 >= _rsh( 1 + np, 2 ) ) exit
 2713.                                     enddo
 2714.                                     $I_L2703_480 = and( 0xfffffffffffffffcUL, 1 + np )
 2714.                                  endif
 2703.                                  if ( $I_L2703_480 < 1 + np ) then
 2703.                                     $I_L2703_559 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                     do
 2704.                                        $I_L2704_417 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                        do
 2710.                                           fall(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) = fall(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) + flxdn(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) * ct(1 + $I_L2704_417)
 2711.                                           fall_d(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) = fall_d(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) + fdn(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) * ct(1 + $I_L2704_417)
 2712.                                           fall_u(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) = fall_u(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) + fup(1 + $I_L2704_417, $I_L2703_480 + $I_L2703_559 + 1) * ct(1 + $I_L2704_417)
 2713.                                           $I_L2704_417 = 1 + $I_L2704_417
 2709.                                           if ( $I_L2704_417 >= m ) exit
 2709.                                        enddo
 2714.                                        $I_L2703_559 = 1 + $I_L2703_559
 2713.                                        if ( $I_L2703_559 >= np + -$I_L2703_480 + 1 ) exit
 2713.                                     enddo
 2713.                                  endif
 2713.                               else if ( is1 + $I_L2639_534 == 1 ) then
 2703.                                  $I_L2703_476 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                  do
 2704.                                     $I_L2704_407 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                     do
 2706.                                        fclr(1 + $I_L2704_407, 1 + $I_L2703_476) = flxdn(1 + $I_L2704_407, 1 + $I_L2703_476)
 2707.                                        fclr_d(1 + $I_L2704_407, 1 + $I_L2703_476) = fdn(1 + $I_L2704_407, 1 + $I_L2703_476)
 2708.                                        fclr_u(1 + $I_L2704_407, 1 + $I_L2703_476) = fup(1 + $I_L2704_407, 1 + $I_L2703_476)
 2710.                                        fall(1 + $I_L2704_407, 1 + $I_L2703_476) = fall(1 + $I_L2704_407, 1 + $I_L2703_476) + flxdn(1 + $I_L2704_407, 1 + $I_L2703_476) * ct(1 + $I_L2704_407)
 2711.                                        fall_d(1 + $I_L2704_407, 1 + $I_L2703_476) = fall_d(1 + $I_L2704_407, 1 + $I_L2703_476) + fdn(1 + $I_L2704_407, 1 + $I_L2703_476) * ct(1 + $I_L2704_407)
 2712.                                        fall_u(1 + $I_L2704_407, 1 + $I_L2703_476) = fall_u(1 + $I_L2704_407, 1 + $I_L2703_476) + fup(1 + $I_L2704_407, 1 + $I_L2703_476) * ct(1 + $I_L2704_407)
 2713.                                        $I_L2704_407 = 1 + $I_L2704_407
 2709.                                        if ( $I_L2704_407 >= m ) exit
 2709.                                     enddo
 2714.                                     $I_L2703_476 = 1 + $I_L2703_476
 2713.                                     if ( $I_L2703_476 >= 1 + np ) exit
 2713.                                  enddo
 2713.                               else
 2703.                                  $I_L2703_482 = 0
 2703.                                  if ( -3 + np >= 0 ) then
 2703.                                     $I_L2703_567 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                     do
 2704.                                        $I_L2704_421 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                        do
 2710.                                           fall(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) = fall(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) + flxdn(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2711.                                           fall_d(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) = fall_d(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) + fdn(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2712.                                           fall_u(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) = fall_u(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) + fup(1 + $I_L2704_421, 1 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2710.                                           fall(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) = fall(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) + flxdn(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2711.                                           fall_d(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) = fall_d(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) + fdn(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2712.                                           fall_u(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) = fall_u(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) + fup(1 + $I_L2704_421, 2 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2710.                                           fall(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) = fall(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) + flxdn(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2711.                                           fall_d(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) = fall_d(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) + fdn(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2712.                                           fall_u(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) = fall_u(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) + fup(1 + $I_L2704_421, 3 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2710.                                           fall(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) = fall(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) + flxdn(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2711.                                           fall_d(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) = fall_d(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) + fdn(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2712.                                           fall_u(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) = fall_u(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) + fup(1 + $I_L2704_421, 4 + 4 * $I_L2703_567) * ct(1 + $I_L2704_421)
 2713.                                           $I_L2704_421 = 1 + $I_L2704_421
 2709.                                           if ( $I_L2704_421 >= m ) exit
 2709.                                        enddo
 2714.                                        $I_L2703_567 = 1 + $I_L2703_567
 2713.                                        if ( $I_L2703_567 >= _rsh( 1 + np, 2 ) ) exit
 2713.                                     enddo
 2714.                                     $I_L2703_482 = and( 0xfffffffffffffffcUL, 1 + np )
 2714.                                  endif
 2703.                                  if ( $I_L2703_482 < 1 + np ) then
 2703.                                     $I_L2703_562 = 0
 2703. !dir$ blocking_size( 0, 0 )
 2703.                                     do
 2704.                                        $I_L2704_421 = 0
 2704. !dir$ ivdep
 2704. !dir$ blocking_size( 0, 0 )
 2704.                                        do
 2710.                                           fall(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) = fall(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) + flxdn(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) * ct(1 + $I_L2704_421)
 2711.                                           fall_d(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) = fall_d(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) + fdn(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) * ct(1 + $I_L2704_421)
 2712.                                           fall_u(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) = fall_u(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) + fup(1 + $I_L2704_421, $I_L2703_482 + $I_L2703_562 + 1) * ct(1 + $I_L2704_421)
 2713.                                           $I_L2704_421 = 1 + $I_L2704_421
 2709.                                           if ( $I_L2704_421 >= m ) exit
 2709.                                        enddo
 2714.                                        $I_L2703_562 = 1 + $I_L2703_562
 2713.                                        if ( $I_L2703_562 >= np + -$I_L2703_482 + 1 ) exit
 2713.                                     enddo
 2713.                                  endif
 2713.                               endif
 2713.                            endif
 2713.                         endif
 2726.                         $I_L2639_534 = 1 + $I_L2639_534
 2724.                         if ( $I_L2639_534 >= is2 + -is1 + 1 ) exit
 2724.                      enddo
 2724.                   endif
 2727.                   $I_L2626_546 = 1 + $I_L2626_546
 2726.                   if ( $I_L2626_546 >= im2 + -im1 + 1 ) exit
 2726.                enddo
 2726.             endif
 2728.             $I_L2612_554 = 1 + $I_L2612_554
 2727.             if ( $I_L2612_554 >= ih2 + -ih1 + 1 ) exit
 2727.          enddo
 2727.       endif
 2468.       _free( t$638 )
 2730.       return
 2730.       end
 2730.       
    6.       
    6.       module rad_clirad
 2731.       return
 2731.       end
 2731.       
