%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Sfc_SSiB.f90
Compiled : 10/25/10  12:45:19
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Onomodinline
           -Othread0,noomp -hthread0,noomp -Ovector1,nopattern,unroll1 -rmda -c
           -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Sfc_SSiB.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Sfc_SSiB.f90
Date     : 10/25/2010  12:45:42


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,vector1,nomodinline,ipa3,noaggress,noautothread
           -O nodwarf,fusion2,nomsgs,negmsgs,nooverindex,nopattern,shortcircuit2
           -O unroll1,nozeroinc
           -h cache2,fp2,thread0,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,noomp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d acdgjlmnovwBDILPQRTZ 
           -e hkpqyS       
           -f free
           -m3
           -S /tmp/pe_3179/Sfc_SSiB.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.              !
    2.              !  $Author: pkubota $
    3.              !  $Date: 2009/03/03 16:36:38 $
    4.              !  $Revision: 1.14 $
    5.              !
    6.              MODULE SFC_SSiB
    7.              
    8.                ! InitSSiB
    9.                !
   10.                !fysiks -----| pbl ------| root
   11.                !            |           |
   12.                !            |           | raduse
   13.                !            |           |
   14.                !            |           | stomat
   15.                !            |           |
   16.                !            |           | interc
   17.                !            |           |
   18.                !            |           | sflxes ------| vntlax
   19.                !            |                          |
   20.                !            |                          | rbrd
   21.                !            |                          |
   22.                !            |                          | cut
   23.                !            |                          |
   24.                !            |                          | stres2
   25.                !            |                          |
   26.                !            |                          | temres
   27.                !            |                          |
   28.                !            |                          | update
   29.                !            |                          |
   30.                !            |                          | airmod
   31.                !            |
   32.                !            | snowm
   33.                !            |
   34.                !            | runoff
   35.                !            |
   36.                !            | seasfc ------| vntlt1
   37.                !            |
   38.                !            | sextrp
   39.                !            |
   40.                !            | sibwet ------| extrak
   41.                !            |
   42.                !            | sibwet_GLSM ------| extrak
   43.                !            | 
   44.                !            | Albedo --- radalb
   45.                !            |
   46.                !            | radalb
   47.                !            |
   48.                !            | vegin
   49.                !            |
   50.                !            |re_assign_sib_soil_prop
   51.                !            |
   52.                !            | wheat
   53.              
   54.                USE Constants, ONLY :     &
   55.                     ityp, imon, icg, iwv, idp, ibd, tice,&
   56.                     gasr,          &
   57.                     pie,           &
   58.                     cp,            &
   59.                     hl,            &
   60.                     grav,          &
   61.                     stefan,        &
   62.                     snomel,        &
   63.                     tf,            &
   64.                     epsfac,        &
   65.                     clai,          &
   66.                     athird,        &
   67.                     cw,            &
   68.                     z0ice,         &
   69.                     oceald   ,     &
   70.                     icealn   ,     &
   71.                     icealv   ,     &
   72.                     r8,i8,r4
   73.              
   74.                USE Options, ONLY: &
   75.                     nfprt, nfctrl, nfsibd, nfalb,filta,epsflt,istrt,Model1D,yrl   ,monl,schemes
   76.              
   77.              
   78.                IMPLICIT NONE
   79.              
   80.                PRIVATE
   81.              
   82.                PUBLIC :: InitSSiB
   83.                PUBLIC :: fysiks
   84.                PUBLIC :: seasfc
   85.                PUBLIC :: sextrp
   86.                PUBLIC :: radalb
   87.                PUBLIC :: Albedo
   88.                PUBLIC :: vegin
   89.                PUBLIC :: re_assign_sib_soil_prop
   90.                PUBLIC :: wheat
   91.                PUBLIC :: sibwet
   92.                PUBLIC :: sibwet_GLSM
   93.                PUBLIC :: x0x
   94.                PUBLIC :: xd
   95.                PUBLIC :: xdc
   96.                PUBLIC :: xbc
   97.                PUBLIC :: CopySurfaceData
   98.                PUBLIC :: SSiB_Driver
   99.                REAL(KIND=r8)   :: expcut
  100.                REAL(KIND=r8)   :: rbyg
  101.              
  102.                REAL(KIND=r8)   , ALLOCATABLE :: cedfu (:,:,:)
  103.                REAL(KIND=r8)   , ALLOCATABLE :: cedir (:,:,:,:)
  104.                REAL(KIND=r8)   , ALLOCATABLE :: cedfu1(:,:,:,:,:)
  105.                REAL(KIND=r8)   , ALLOCATABLE :: cedir1(:,:,:,:,:,:)
  106.                REAL(KIND=r8)   , ALLOCATABLE :: cedfu2(:,:,:,:,:)
  107.                REAL(KIND=r8)   , ALLOCATABLE :: cedir2(:,:,:,:,:,:)
  108.                REAL(KIND=r8)   , ALLOCATABLE :: cledfu(:,:,:)
  109.                REAL(KIND=r8)   , ALLOCATABLE :: cledir(:,:,:,:)
  110.                REAL(KIND=r8)   , ALLOCATABLE :: xmiu  (:,:)
  111.                REAL(KIND=r8)   , ALLOCATABLE :: cether(:,:,:)
  112.                REAL(KIND=r8)   , ALLOCATABLE :: xmiw  (:,:)
  113.              
  114.                REAL(KIND=r8)   , ALLOCATABLE :: ystpar(:,:)
  115.                REAL(KIND=r8)   , ALLOCATABLE :: yopt  (:)
  116.                REAL(KIND=r8)   , ALLOCATABLE :: yll   (:)
  117.                REAL(KIND=r8)   , ALLOCATABLE :: yu    (:)
  118.                REAL(KIND=r8)   , ALLOCATABLE :: yefac (:)
  119.                REAL(KIND=r8)   , ALLOCATABLE :: yh1   (:)
  120.                REAL(KIND=r8)   , ALLOCATABLE :: yh2   (:)
  121.                REAL(KIND=r8)   , ALLOCATABLE :: yootd (:)
  122.                REAL(KIND=r8)   , ALLOCATABLE :: yreen (:,:)
  123.                REAL(KIND=r8)   , ALLOCATABLE :: ycover(:,:)
  124.                REAL(KIND=r8)   , ALLOCATABLE :: ylt   (:,:)
  125.              
  126.              
  127.                REAL(KIND=r8)   , ALLOCATABLE :: rstpar_fixed    (:,:,:)
  128.                REAL(KIND=r8)   , ALLOCATABLE :: chil_fixed      (:,:)
  129.                REAL(KIND=r8)   , ALLOCATABLE :: topt_fixed      (:,:)
  130.                REAL(KIND=r8)   , ALLOCATABLE :: tll_fixed          (:,:)
  131.                REAL(KIND=r8)   , ALLOCATABLE :: tu_fixed          (:,:)
  132.                REAL(KIND=r8)   , ALLOCATABLE :: defac_fixed     (:,:)
  133.                REAL(KIND=r8)   , ALLOCATABLE :: ph1_fixed          (:,:)
  134.                REAL(KIND=r8)   , ALLOCATABLE :: ph2_fixed          (:,:)
  135.                REAL(KIND=r8)   , ALLOCATABLE :: rootd     (:,:)
  136.                REAL(KIND=r8)   , ALLOCATABLE :: bee          (:)
  137.                REAL(KIND=r8)   , ALLOCATABLE :: phsat     (:)
  138.                REAL(KIND=r8)   , ALLOCATABLE :: satco     (:)
  139.                REAL(KIND=r8)   , ALLOCATABLE :: poros     (:)
  140.                REAL(KIND=r8)   , ALLOCATABLE :: zdepth    (:,:)
  141.                REAL(KIND=r8)   , ALLOCATABLE :: green_fixed     (:,:,:)
  142.                REAL(KIND=r8)   , ALLOCATABLE :: xcover_fixed    (:,:,:)
  143.                REAL(KIND=r8)   , ALLOCATABLE :: zlt_fixed          (:,:,:)
  144.                REAL(KIND=r8)   , ALLOCATABLE :: x0x          (:,:)
  145.                REAL(KIND=r8)   , ALLOCATABLE :: xd          (:,:)
  146.                REAL(KIND=r8)   , ALLOCATABLE :: z2          (:,:)
  147.                REAL(KIND=r8)   , ALLOCATABLE :: z1          (:,:)
  148.                REAL(KIND=r8)   , ALLOCATABLE :: xdc          (:,:)
  149.                REAL(KIND=r8)   , ALLOCATABLE :: xbc          (:,:)
  150.                REAL(KIND=r8)   , ALLOCATABLE :: zlt(:, :, :)
  151.                REAL(KIND=r8)   , ALLOCATABLE :: xcover  (:, :, :)
  152.                REAL(KIND=r8)   , ALLOCATABLE :: ph2(:,:)
  153.                REAL(KIND=r8)   , ALLOCATABLE :: ph1(:,:)
  154.                REAL(KIND=r8)   , ALLOCATABLE :: green(:,:,:)
  155.                REAL(KIND=r8)   , ALLOCATABLE :: defac(:,:)
  156.                REAL(KIND=r8)   , ALLOCATABLE :: tu(:,:)
  157.                REAL(KIND=r8)   , ALLOCATABLE :: tll(:,:)
  158.                REAL(KIND=r8)   , ALLOCATABLE :: topt(:,:)
  159.                REAL(KIND=r8)   , ALLOCATABLE :: rstpar(:,:,:)
  160.                REAL(KIND=r8)   , ALLOCATABLE :: chil(:,:)
  161.              
  162.                REAL(KIND=r8)   , ALLOCATABLE :: vcover_gbl (:,:,:)
  163.                REAL(KIND=r8)   , ALLOCATABLE :: zlt_gbl    (:,:,:)
  164.                REAL(KIND=r8)   , ALLOCATABLE :: green_gbl  (:,:,:)
  165.                REAL(KIND=r8)   , ALLOCATABLE :: chil_gbl   (:,:,:)
  166.                REAL(KIND=r8)   , ALLOCATABLE :: topt_gbl   (:,:,:)
  167.                REAL(KIND=r8)   , ALLOCATABLE :: tll_gbl    (:,:,:)
  168.                REAL(KIND=r8)   , ALLOCATABLE :: tu_gbl     (:,:,:)
  169.                REAL(KIND=r8)   , ALLOCATABLE :: defac_gbl  (:,:,:)
  170.                REAL(KIND=r8)   , ALLOCATABLE :: ph2_gbl    (:,:,:)
  171.                REAL(KIND=r8)   , ALLOCATABLE :: ph1_gbl    (:,:,:)
  172.                REAL(KIND=r8)   , ALLOCATABLE :: rstpar_gbl (:,:,:,:)
  173.              
  174.              
  175.                CHARACTER(LEN=200) :: path_in
  176.                CHARACTER(LEN=200) :: fNameSibVeg
  177.                CHARACTER(LEN=200) :: fNameSibAlb
  178.              
  179.              
  180.              CONTAINS
  181.              
  182.              
  183.                SUBROUTINE InitSSiB(ibMax ,jbMax,delsig,path,fNameSibVeg_in,fNameSibAlb_in)
  184.                  INTEGER, INTENT(IN) :: ibMax
  185.                  INTEGER, INTENT(IN) :: jbMax
  186.                  REAL(KIND=r8), INTENT(IN   ) ::  delsig(:)
  187.                  CHARACTER(LEN=*), INTENT(IN   ) ::  path
  188.                  CHARACTER(LEN=*), INTENT(IN   ) ::  fNameSibVeg_in
  189.                  CHARACTER(LEN=*), INTENT(IN   ) ::  fNameSibAlb_in
  190.                  expcut=- LOG(1.0e53_r8)
  191.                  rbyg  =gasr/grav*delsig(1)*0.5_r8
  192.                  path_in=path
  193.                  fNameSibVeg = fNameSibVeg_in
  194.                  fNameSibAlb = fNameSibAlb_in
  195.                  ALLOCATE(vcover_gbl(ibMax,jbMax,icg) )
  196.                  ALLOCATE(zlt_gbl   (ibMax,jbMax,icg))
  197.                  ALLOCATE(green_gbl (ibMax,jbMax,icg))
  198.                  ALLOCATE(chil_gbl  (ibMax,jbMax,icg))
  199.                  ALLOCATE(topt_gbl  (ibMax,jbMax,icg))
  200.                  ALLOCATE(tll_gbl   (ibMax,jbMax,icg))
  201.                  ALLOCATE(tu_gbl    (ibMax,jbMax,icg))
  202.                  ALLOCATE(defac_gbl (ibMax,jbMax,icg))
  203.                  ALLOCATE(ph2_gbl   (ibMax,jbMax,icg))
  204.                  ALLOCATE(ph1_gbl   (ibMax,jbMax,icg))
  205.                  ALLOCATE(rstpar_gbl(ibMax,jbMax,icg,iwv) )
  206.                END SUBROUTINE InitSSiB
  207.              
  208.                SUBROUTINE SSiB_Driver(&
  209.                     jdt,latitu,bps,psb,dzm,em,gmt,gmq,&
  210.                     gmu,cu,cuni,ctni,ustar,cosz,sinclt,rhoair,&
  211.                     psy,rcp,wc,wg,fc,fg,hr,ect,&
  212.                     eci,egt,egi,egs,ec,eg,hc,hg,&
  213.                     ecidif,egidif,ecmass,egmass,etmass,hflux,chf,shf,&
  214.                     fluxef,roff,drag,ra,rb,rd,rc,rg,&
  215.                     tcta,tgta,ta,ea,etc,etg,btc,btg,&
  216.                     u2,radt,par,pd,rst,rsoil,phroot,hrr,&
  217.                     phsoil,cc,cg,satcap,snow,dtc,dtg,dtm,&
  218.                     dqm,stm,extk,radfac,closs,gloss,thermk,p1f,&
  219.                     p2f,tc,tg,td,capac,w,qm,tm,&
  220.                     um,vm,psur,ppc,ppl,radn,itype,dtc3x,&
  221.                     mon,nmax,ncols,zlwup,salb,tgeff,nsx ,tmtx,qmtx,&
  222.                     umtx,gt  ,gq,gu ,gv,gps,imask,kMax,ktm,initlz,tcm,tgm,tdm,wm ,&
  223.                     beam_visb,beam_visd,beam_nirb,beam_nird,cos2,dlwbot,capacm,td0,tg0, zenith,kt,iswrad,ilwrad,&
  224.                     xvisb,xvisd,xnirb,xnird,ppli,ppci,tsea, ssib, w0, tc0   ,capac0,intg,&
  225.                     slrad,tseam,tsurf,qsurf,colrad,sigki,delsig,sens,evap,umom,vmom,&
  226.                     zorl,rmi,rhi,cond,stor,z0x,speedm,Ustarm,z0sea,rho,d ,qsfc0,tsfc0, qsfcm,tsfcm,qsfc,tsfc,&
  227.                     qm0,qmm,tm0,tmm,mskant )
  228.              
  229.                  IMPLICIT NONE
  230.                  INTEGER, INTENT(in   ) :: nCols
  231.                  INTEGER, INTENT(in   ) :: nmax
  232.                  INTEGER, INTENT(in   ) :: kMax
  233.              
  234.                  REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
  235.                  INTEGER, INTENT(inout) :: mon(ncols)
  236.              
  237.                  INTEGER, INTENT(in   ) :: itype (ncols)
  238.                  !
  239.                  !     the size of working area is ncols*187
  240.                  !     atmospheric parameters as boudary values for sib
  241.                  !
  242.                  REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
  243.                  REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
  244.                  REAL(KIND=r8),    INTENT(inout) :: qm0 (ncols)
  245.                  REAL(KIND=r8),    INTENT(inout) :: qmm (ncols)
  246.                  REAL(KIND=r8),    INTENT(inout) :: tm0 (ncols)
  247.                  REAL(KIND=r8),    INTENT(inout) :: tmm (ncols)
  248.                  REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
  249.                  REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
  250.                  REAL(KIND=r8),    INTENT(in out) :: psur(ncols)
  251.                  REAL(KIND=r8),    INTENT(in out) :: ppc (ncols)
  252.                  REAL(KIND=r8),    INTENT(in out   ) :: ppl (ncols)
  253.                  REAL(KIND=r8),    INTENT(in out) :: radn(ncols,3,2)
  254.                  !
  255.                  !     prognostic variables
  256.                  !
  257.                  REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
  258.                  REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
  259.                  REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
  260.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
  261.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
  262.                  !
  263.                  !     variables calculated from above and ambient conditions
  264.                  !
  265.                  REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
  266.                  REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
  267.                  REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
  268.                  REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
  269.                  REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
  270.                  REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
  271.                  REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
  272.                  REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
  273.                  REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
  274.                  REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
  275.                  REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
  276.                  REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
  277.                  REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
  278.                  REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
  279.                  REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
  280.                  REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
  281.                  REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
  282.                  REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
  283.                  REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
  284.                  REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
  285.                  REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
  286.                  REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
  287.                  REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
  288.                  REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
  289.                  REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
  290.                  REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
  291.                  REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
  292.                  REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
  293.                  REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
  294.                  REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
  295.                  REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
  296.                  REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
  297.                  REAL(KIND=r8),    INTENT(inout) :: radfac(ncols,icg,iwv,ibd)
  298.                  REAL(KIND=r8),    INTENT(inout) :: closs (ncols)
  299.                  REAL(KIND=r8),    INTENT(inout) :: gloss (ncols)
  300.                  REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
  301.                  REAL(KIND=r8),    INTENT(inout) :: p1f   (ncols)
  302.                  REAL(KIND=r8),    INTENT(inout) :: p2f   (ncols)
  303.                  !
  304.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
  305.                  !
  306.                  REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
  307.                  REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
  308.                  REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
  309.                  REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
  310.                  REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
  311.                  REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
  312.                  REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
  313.                  REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
  314.                  REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
  315.                  REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
  316.                  REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
  317.                  REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
  318.                  REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
  319.                  REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
  320.                  REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
  321.                  REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
  322.                  REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
  323.                  REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
  324.                  REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
  325.                  REAL(KIND=r8),    INTENT(inout) :: drag  (ncols)
  326.                  !
  327.                  !     this is for coupling with closure turbulence model
  328.                  !
  329.                  REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
  330.                  REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
  331.                  REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
  332.                  REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
  333.                  REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
  334.                  REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
  335.                  REAL(KIND=r8),    INTENT(inout) :: gmu   (ncols,4)
  336.                  REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
  337.                  REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
  338.                  REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
  339.                  REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
  340.                  REAL(KIND=r8),    INTENT(inout) :: cosz  (ncols)
  341.                  REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
  342.                  REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
  343.                  REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
  344.                  REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
  345.                  REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
  346.                  REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
  347.                  REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
  348.                  REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
  349.                  REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
  350.              
  351.                  INTEGER, INTENT(in   ) :: jdt
  352.                  INTEGER, INTENT(in   ) :: latitu
  353.              
  354.                  REAL(KIND=r8)   , INTENT(INOUT) :: zlwup    (ncols)
  355.                  REAL(KIND=r8)   , INTENT(INOUT) :: salb     (ncols,2,2)
  356.                  REAL(KIND=r8)   , INTENT(INOUT) :: tgeff    (ncols)
  357.                  INTEGER         , INTENT(IN   ) :: nsx      (ncols)
  358.                  REAL(KIND=r8)   , INTENT(INOUT) :: tmtx     (nCols,kmax,3)
  359.                  REAL(KIND=r8)   , INTENT(INOUT) :: qmtx     (nCols,kmax,3)
  360.                  REAL(KIND=r8)   , INTENT(INOUT) :: umtx     (nCols,kmax,4)
  361.                  REAL(KIND=r8)   , INTENT(INOUT) :: gt       (nCols,kmax)
  362.                  REAL(KIND=r8)   , INTENT(INOUT) :: gq       (nCols,kmax)
  363.                  REAL(KIND=r8)   , INTENT(IN   ) :: gu       (nCols,kmax)
  364.                  REAL(KIND=r8)   , INTENT(IN   ) :: gv       (nCols,kmax)
  365.                  REAL(KIND=r8)   , INTENT(IN   ) :: gps      (nCols)
  366.                  INTEGER(KIND=i8), INTENT(IN   ) :: imask    (nCols)
  367.                  INTEGER         , INTENT(IN   ) :: ktm
  368.                  INTEGER         , INTENT(IN   ) :: initlz
  369.                  REAL(KIND=r8)   , INTENT(INOUT) :: tcm      (ncols)
  370.                  REAL(KIND=r8)   , INTENT(INOUT) :: tgm      (ncols)
  371.                  REAL(KIND=r8)   , INTENT(INOUT) :: tdm      (ncols)
  372.                  REAL(KIND=r8)   , INTENT(INOUT) :: wm       (ncols,3)
  373.                  REAL(KIND=r8)   , INTENT(INOUT) :: td0      (ncols)
  374.                  REAL(KIND=r8)   , INTENT(INOUT) :: tg0      (ncols)
  375.                  REAL(KIND=r8)   , INTENT(IN   ) :: zenith   (nCols)
  376.                  INTEGER         , INTENT(IN   ) :: kt
  377.                  CHARACTER(len=*), INTENT(IN   ) :: iswrad
  378.                  CHARACTER(len=*), INTENT(IN   ) :: ilwrad
  379.              
  380.                  REAL(KIND=r8), INTENT(IN   ) :: beam_visb(nCols)
  381.                  REAL(KIND=r8), INTENT(IN   ) :: beam_visd(nCols)
  382.                  REAL(KIND=r8), INTENT(IN   ) :: beam_nirb(nCols)
  383.                  REAL(KIND=r8), INTENT(IN   ) :: beam_nird(nCols)
  384.                  REAL(KIND=r8), INTENT(IN   ) :: cos2     (nCols)
  385.                  REAL(KIND=r8), INTENT(IN   ) :: dlwbot   (nCols)
  386.                  REAL(KIND=r8), INTENT(INOUT) :: capacm   (ncols,2)
  387.              
  388.                  REAL(KIND=r8), INTENT(IN   ) :: xvisb    (nCols)
  389.                  REAL(KIND=r8), INTENT(IN   ) :: xvisd    (nCols)
  390.                  REAL(KIND=r8), INTENT(IN   ) :: xnirb    (nCols)
  391.                  REAL(KIND=r8), INTENT(IN   ) :: xnird    (nCols)
  392.                  REAL(KIND=r8), INTENT(IN   ) :: ppli     (nCols)
  393.                  REAL(KIND=r8), INTENT(IN   ) :: ppci     (nCols)
  394.                  REAL(KIND=r8), INTENT(INOUT) :: tsea     (nCols)
  395.                  REAL(KIND=r8), INTENT(IN   ) :: ssib     (ncols)
  396.                  REAL(KIND=r8), INTENT(INOUT) :: w0       (ncols,3)
  397.                  REAL(KIND=r8), INTENT(INOUT) :: tc0      (ncols)
  398.                  REAL(KIND=r8), INTENT(INOUT) :: capac0   (ncols,2)
  399.                  INTEGER      , INTENT(IN   ) :: intg
  400.              
  401.                  REAL(KIND=r8), INTENT(IN   ) :: slrad    (nCols)
  402.                  REAL(KIND=r8), INTENT(INOUT) :: tseam    (nCols)
  403.                  REAL(KIND=r8), INTENT(INOUT) :: tsurf    (nCols)
  404.                  REAL(KIND=r8), INTENT(IN   ) :: qsurf    (nCols)
  405.              
  406.                  REAL(KIND=r8), INTENT(IN   ) :: colrad   (nCols)
  407.                  REAL(KIND=r8), INTENT(IN   ) :: sigki    (1)
  408.                  REAL(KIND=r8), INTENT(IN   ) :: delsig   (1)
  409.                  REAL(KIND=r8), INTENT(INOUT) :: sens     (nCols)
  410.                  REAL(KIND=r8), INTENT(INOUT) :: evap     (nCols)
  411.                  REAL(KIND=r8), INTENT(INOUT) :: umom     (nCols)
  412.                  REAL(KIND=r8), INTENT(INOUT) :: vmom     (nCols)
  413.                  REAL(KIND=r8), INTENT(INOUT) :: zorl     (nCols)
  414.              
  415.                  REAL(KIND=r8), INTENT(INOUT) :: rmi      (nCols)
  416.                  REAL(KIND=r8), INTENT(INOUT) :: rhi      (nCols)
  417.                  REAL(KIND=r8), INTENT(INOUT) :: cond     (nCols)
  418.                  REAL(KIND=r8), INTENT(INOUT) :: stor     (nCols)
  419.              
  420.                  REAL(KIND=r8), INTENT(INOUT) :: z0x      (nCols)
  421.                  REAL(KIND=r8), INTENT(INOUT) :: speedm   (nCols)
  422.                  REAL(KIND=r8), INTENT(INOUT) :: Ustarm   (nCols)
  423.                  REAL(KIND=r8), INTENT(INOUT) :: z0sea    (nCols)
  424.                  REAL(KIND=r8), INTENT(INOUT) :: rho      (nCols)
  425.                  REAL(KIND=r8), INTENT(INOUT) :: d        (ncols)
  426.                  REAL(KIND=r8), INTENT(INOUT) :: qsfc0    (ncols)
  427.                  REAL(KIND=r8), INTENT(INOUT) :: tsfc0    (ncols)
  428.                  REAL(KIND=r8), INTENT(INOUT) :: qsfcm    (ncols)
  429.                  REAL(KIND=r8), INTENT(INOUT) :: tsfcm    (ncols)
  430.                  REAL(KIND=r8), INTENT(INOUT) :: qsfc     (ncols)
  431.                  REAL(KIND=r8), INTENT(INOUT) :: tsfc     (ncols)
  432.                  INTEGER(KIND=i8)      , INTENT(IN   ) :: mskant   (ncols)
  433.                  
  434.                  REAL(KIND=r8) :: rstpar2 (ncols,icg,iwv)
  435.                  REAL(KIND=r8) :: zlt2    (ncols,icg)
  436.                  REAL(KIND=r8) :: green2  (ncols,icg)
  437.                  REAL(KIND=r8) :: chil2   (ncols,icg)
  438.                  REAL(KIND=r8) :: vcover  (ncols,icg)
  439.                  REAL(KIND=r8) :: rdc     (ncols)
  440.                  REAL(KIND=r8) :: rbc     (ncols)
  441.                  REAL(KIND=r8) :: z0      (ncols)
  442.                  REAL(KIND=r8) :: topt2   (ncols,icg)
  443.                  REAL(KIND=r8) :: tll2    (ncols,icg)
  444.                  REAL(KIND=r8) :: tu2     (ncols,icg)
  445.                  REAL(KIND=r8) :: defac2  (ncols,icg)
  446.                  REAL(KIND=r8) :: xsea    (nCols)
  447.                  REAL(KIND=r8) :: tmin    (ncols)
  448.                  REAL(KIND=r8) :: tmax    (ncols)
  449.                  REAL(KIND=r8) :: ph22    (ncols,icg)
  450.                  REAL(KIND=r8) :: ph12    (ncols,icg)
  451.              
  452.                  LOGICAL       :: InitMod
  453.                  INTEGER :: ncount,i,j,itr,ind,nint,IntSib
  454.  1---------<     DO j=1,icg
  455.  1 V-------<        DO i=1,nmax
  456.  1 V                   vcover     (i,j)   =  vcover_gbl (i,latitu,j)
  457.  1 V                   zlt2       (i,j)   =  zlt_gbl    (i,latitu,j)
  458.  1 V                   green2     (i,j)   =  green_gbl  (i,latitu,j)
  459.  1 V                   chil2      (i,j)   =  chil_gbl   (i,latitu,j)
  460.  1 V                   topt2      (i,j)   =  topt_gbl   (i,latitu,j)
  461.  1 V                   tll2       (i,j)   =  tll_gbl    (i,latitu,j)
  462.  1 V                   tu2        (i,j)   =  tu_gbl     (i,latitu,j)
  463.  1 V                   defac2     (i,j)   =  defac_gbl  (i,latitu,j)
  464.  1 V                   ph12       (i,j)   =  ph1_gbl    (i,latitu,j)
  465.  1 V                   ph22       (i,j)   =  ph2_gbl    (i,latitu,j)
  466.  1 V                   rstpar2    (i,j,1) =  rstpar_gbl (i,latitu,j,1)
  467.  1 V                   rstpar2    (i,j,2) =  rstpar_gbl (i,latitu,j,2)
  468.  1 V                   rstpar2    (i,j,3) =  rstpar_gbl (i,latitu,j,3)
  469.  1 V------->        END DO
  470.  1--------->     END DO
  471.              
  472.                  ncount=0
  473.  1---------<     DO i=1,nCols
  474.  1                  IF(imask(i).GE.1_i8) THEN
  475.  1                     ncount=ncount+1
  476.  1                     rbc        (ncount)     =  xbc   (itype(ncount),mon(ncount))
  477.  1                     rdc        (ncount)     =  xdc   (itype(ncount),mon(ncount))
  478.  1                     z0x        (ncount)     =  x0x   (itype(ncount),mon(ncount))
  479.  1                     d          (ncount)     =  xd    (itype(ncount),mon(ncount))
  480.  1                  END IF
  481.  1--------->     END DO
  482.              
  483.                  InitMod = (initlz >= 0 .AND. ktm == -1 .AND. kt == 0 .AND. nmax >= 1)
  484.              
  485.                  IF(InitMod)THEN
  486.                     nint=2
  487.                     IntSib=5
  488.                  ELSE
  489.                     nint=1
  490.                     IntSib=1
  491.                  END IF
  492.              
  493.                  IF(TRIM(iswrad).NE.'NON'.AND.TRIM(ilwrad).NE.'NON') THEN
  494.                     IF(InitMod)THEN
  495.              
  496.  1---------<           DO ind=1,nint
  497.  1                        ncount=0
  498.  1 2-------<              DO i=1,nCols
  499.  1 2                         IF(imask(i).GE.1_i8) THEN
  500.  1 2                            ncount=ncount+1
  501.  1 2                            IF(ind.EQ.1) THEN
  502.  1 2                               !
  503.  1 2                               !     night
  504.  1 2                               !
  505.  1 2                               radn(ncount,1,1)=0.0e0_r8
  506.  1 2                               radn(ncount,1,2)=0.0e0_r8
  507.  1 2                               radn(ncount,2,1)=0.0e0_r8
  508.  1 2                               radn(ncount,2,2)=0.0e0_r8
  509.  1 2                               cosz(ncount)    =0.0e0_r8
  510.  1 2                            ELSE
  511.  1 2                               !
  512.  1 2                               !     noon
  513.  1 2                               !
  514.  1 2                               radn(ncount,1,1)=beam_visb (i)
  515.  1 2                               radn(ncount,1,2)=beam_visd (i)
  516.  1 2                               radn(ncount,2,1)=beam_nirb (i)
  517.  1 2                               radn(ncount,2,2)=beam_nird (i)
  518.  1 2                               cosz(ncount)    =cos2(i)
  519.  1 2                            END IF
  520.  1 2                            radn(ncount,3,1)=0.0e0_r8
  521.  1 2                            radn(ncount,3,2)=dlwbot(i)
  522.  1 2                            !
  523.  1 2                            !     precipitation
  524.  1 2                            !
  525.  1 2                            ppl (ncount)    =0.0e0_r8
  526.  1 2                            ppc (ncount)    =0.0e0_r8
  527.  1 2                         END IF
  528.  1 2------->              END DO
  529.  1 2-------<              DO itr=1,IntSib
  530.  1 2                         CALL radalb( &
  531.  1 2                              nmax              ,mon(1:nmax)         ,nmax                ,itype(1:nmax)       , &
  532.  1 2                              tc(1:nmax)        ,tg(1:nmax)          ,capac(1:nmax,:)     , &
  533.  1 2                              satcap(1:nmax,:)  ,extk(1:nmax,:,:,:)  ,radfac(1:nmax,:,:,:),closs(1:nmax)       , &
  534.  1 2                              gloss(1:nmax)     ,thermk(1:nmax)      ,p1f(1:nmax)         ,p2f(1:nmax)         , &
  535.  1 2                              zlwup(1:nmax)     ,salb(1:nmax,:,:)    ,tgeff(1:nmax)       ,cosz(1:nmax)        , &
  536.  1 2                              nsx(1:nmax)       ,latitu  )
  537.  1 2         
  538.  1 2                         CALL fysiks(&
  539.  1 2                              vcover(1:nmax,:)  ,z0x(1:nmax)         ,d(1:nmax)       ,rdc(1:nmax)     ,&
  540.  1 2                              rbc(1:nmax)       ,z0(1:nmax)          ,jdt             ,latitu          ,&
  541.  1 2                              bps(1:nmax)       ,psb(1:nmax)         ,dzm(1:nmax)     ,em(1:nmax)      ,&
  542.  1 2                              gmt(1:nmax,:)     ,gmq(1:nmax,:)       ,gmu(1:nmax,:)   ,cu(1:nmax)      ,&
  543.  1 2                              cuni(1:nmax)      ,ctni(1:nmax)        ,ustar(1:nmax)   ,cosz(1:nmax)    ,&
  544.  1 2                              sinclt(1:nmax)    ,rhoair(1:nmax)      ,psy(1:nmax)     ,rcp(1:nmax)     ,&
  545.  1 2                              wc(1:nmax)        ,wg(1:nmax)          ,fc(1:nmax)      ,fg(1:nmax)      ,&
  546.  1 2                              hr(1:nmax)        ,ect(1:nmax)         ,eci(1:nmax)     ,egt(1:nmax)     ,&
  547.  1 2                              egi(1:nmax)       ,egs(1:nmax)         ,ec(1:nmax)      ,eg(1:nmax)      ,&
  548.  1 2                              hc(1:nmax)        ,hg(1:nmax)          ,ecidif(1:nmax)  ,egidif(1:nmax)  ,&
  549.  1 2                              ecmass(1:nmax)    ,egmass(1:nmax)      ,etmass(1:nmax)  ,hflux(1:nmax)   ,&
  550.  1 2                              chf(1:nmax)       ,shf(1:nmax)         ,fluxef(1:nmax)  ,roff(1:nmax)    ,&
  551.  1 2                              drag(1:nmax)      ,ra(1:nmax)          ,rb(1:nmax)      ,rd(1:nmax)      ,&
  552.  1 2                              rc(1:nmax)        ,rg(1:nmax)          ,tcta(1:nmax)    ,tgta(1:nmax)    ,&
  553.  1 2                              ta(1:nmax)        ,ea(1:nmax)          ,etc(1:nmax)     ,etg(1:nmax)     ,&
  554.  1 2                              btc(1:nmax)       ,btg(1:nmax)         ,u2(1:nmax)      ,radt(1:nmax,:)  ,&
  555.  1 2                              par(1:nmax,:)     ,pd(1:nmax,:)        ,rst(1:nmax,:)   ,rsoil(1:nmax)   ,&
  556.  1 2                              phroot(1:nmax,:)  ,hrr(1:nmax)         ,phsoil(1:nmax,:),cc(1:nmax)      ,&
  557.  1 2                              cg(1:nmax)        ,satcap(1:nmax,:)    ,snow(1:nmax,:)  ,dtc(1:nmax)     ,&
  558.  1 2                              dtg(1:nmax)       ,dtm(1:nmax)         ,dqm(1:nmax)     ,stm(1:nmax,:)   ,&
  559.  1 2                              extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)   ,gloss(1:nmax)   ,&
  560.  1 2                              thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)     ,tc(1:nmax)      ,&
  561.  1 2                              tg(1:nmax)        ,td(1:nmax)          ,capac(1:nmax,:) ,w(1:nmax,:)     ,&
  562.  1 2                              qm(1:nmax)        ,tm(1:nmax)          ,um(1:nmax)      ,vm(1:nmax)      ,&
  563.  1 2                              psur(1:nmax)      ,ppc(1:nmax)         ,ppl(1:nmax)     ,radn(1:nmax,:,:),&
  564.  1 2                              itype(1:nmax)     ,dtc3x               ,mon (1:nmax)    ,nmax            ,&
  565.  1 2                              nmax              ,zlt2(1:nmax,:)      ,green2(1:nmax,:),chil2(1:nmax,:) ,&
  566.  1 2                              rstpar2(1:nmax,:,:),topt2(1:nmax,:)    ,tll2(1:nmax,:)  ,tu2(1:nmax,:)   ,&
  567.  1 2                              defac2(1:nmax,:)  ,ph12(1:nmax,:)      ,ph22(1:nmax,:)  )
  568.  1 2                         ncount=0
  569.  1 2 3-----<                 DO i=1,nCols
  570.  1 2 3                          IF(imask(i).GE.1_i8) THEN
  571.  1 2 3                             ncount=ncount+1
  572.  1 2 3                             tm (ncount  )=gt  (i,1)
  573.  1 2 3                             qm (ncount  )=gq  (i,1)
  574.  1 2 3                             gmt(ncount,1)=tmtx(i,1,1)
  575.  1 2 3                             gmt(ncount,2)=tmtx(i,1,2)
  576.  1 2 3                             gmt(ncount,3)=tmtx(i,1,3)
  577.  1 2 3                             gmq(ncount,1)=qmtx(i,1,1)
  578.  1 2 3                             gmq(ncount,2)=qmtx(i,1,2)
  579.  1 2 3                             gmq(ncount,3)=qmtx(i,1,3)
  580.  1 2 3                             gmu(ncount,1)=umtx(i,1,1)
  581.  1 2 3                             gmu(ncount,2)=umtx(i,1,2)
  582.  1 2 3                             gmu(ncount,3)=umtx(i,1,3)
  583.  1 2 3                             gmu(ncount,4)=umtx(i,1,4)
  584.  1 2 3                          END IF
  585.  1 2 3----->                 END DO
  586.  1 2------->              END DO
  587.  1 V-------<              DO i=1,nmax
  588.  1 V                         capac(i,1)=capacm(i,1)
  589.  1 V                         capac(i,2)=capacm(i,2)
  590.  1 V                         w    (i,1)=wm    (i,1)
  591.  1 V                         w    (i,2)=wm    (i,2)
  592.  1 V                         w    (i,3)=wm    (i,3)
  593.  1 V                         td   (i)  =tdm   (i)
  594.  1 V                         tc   (i)  =tcm   (i)
  595.  1 V                         IF(ind.EQ.1) THEN
  596.  1 V                            tmin (i) =tg (i)
  597.  1 V                         ELSE
  598.  1 V                            tmax (i) =tg (i)
  599.  1 V                         END IF
  600.  1 V                         tg   (i) =tgm(i)
  601.  1 V------->              END DO
  602.  1--------->           END DO
  603.  V---------<           DO i=1,nmax
  604.  V                        td   (i) =0.9_r8*0.5_r8*(tmax(i)+tmin(i))+0.1_r8*tdm(i)
  605.  V                        tdm  (i) =td(i)
  606.  V                        td0  (i) =td(i)
  607.  V--------->           END DO
  608.                        !
  609.                        !     this is a start of equilibrium tg,tc comp.
  610.                        !
  611.                        ncount=0
  612.  1---------<           DO i=1,nCols
  613.  1                        IF(imask(i).GE.1_i8) THEN
  614.  1                           ncount=ncount+1
  615.  1                           cosz(ncount)    =zenith(i)
  616.  1                        END IF
  617.  1--------->           END DO
  618.  1---------<           DO i=1,nmax
  619.  1                        IF(cosz(i).LT.0.0e0_r8) THEN
  620.  1                           tgm  (i)  =tmin(i)
  621.  1                           tg0  (i)  =tmin(i)
  622.  1                        END IF
  623.  1--------->           END DO
  624.                        CALL radalb ( &
  625.                             nmax              ,mon(1:nmax)         ,nmax                ,itype(1:nmax)       , &
  626.                             tc(1:nmax)          ,tg(1:nmax)          ,capac(1:nmax,:)     , &
  627.                             satcap(1:nmax,:)  ,extk(1:nmax,:,:,:)  ,radfac(1:nmax,:,:,:),closs(1:nmax)       , &
  628.                             gloss(1:nmax)     ,thermk(1:nmax)      ,p1f(1:nmax)         ,p2f(1:nmax)         , &
  629.                             zlwup(1:nmax)     ,salb(1:nmax,:,:)    ,tgeff(1:nmax)       ,cosz(1:nmax)        , &
  630.                             nsx(1:nmax)       ,latitu    )
  631.                     END IF
  632.                  END IF
  633.                  IF(nmax.GE.1) THEN
  634.                     ncount=0
  635.  1---------<        DO i=1,nCols
  636.  1                     IF(imask(i).GE.1_i8) THEN
  637.  1                        ncount=ncount+1
  638.  1                        !
  639.  1                        !     this is for radiation interpolation
  640.  1                        !
  641.  1                        IF(cosz(ncount).GE.0.01746e0_r8 ) THEN
  642.  1                           radn(ncount,1,1)=xvisb (i)
  643.  1                           radn(ncount,1,2)=xvisd (i)
  644.  1                           radn(ncount,2,1)=xnirb (i)
  645.  1                           radn(ncount,2,2)=xnird (i)
  646.  1                        ELSE
  647.  1                           radn(ncount,1,1)=0.0e0_r8
  648.  1                           radn(ncount,1,2)=0.0e0_r8
  649.  1                           radn(ncount,2,1)=0.0e0_r8
  650.  1                           radn(ncount,2,2)=0.0e0_r8
  651.  1                        END IF
  652.  1                        radn(ncount,3,1)=0.0e0_r8
  653.  1                        radn(ncount,3,2)=dlwbot(i)
  654.  1                        !
  655.  1                        !     precipitation
  656.  1                        !
  657.  1                        ppl (ncount)    =ppli  (i)
  658.  1                        ppc (ncount)    =ppci  (i)
  659.  1                     END IF
  660.  1--------->        END DO
  661.                     CALL fysiks(&
  662.                          vcover(1:nmax,:)  ,z0x(1:nmax)         ,d(1:nmax)       ,rdc(1:nmax)     ,&
  663.                          rbc(1:nmax)       ,z0(1:nmax)          ,jdt             ,latitu          ,&
  664.                          bps(1:nmax)       ,psb(1:nmax)         ,dzm(1:nmax)     ,em(1:nmax)      ,&
  665.                          gmt(1:nmax,:)     ,gmq(1:nmax,:)       ,gmu(1:nmax,:)   ,cu(1:nmax)      ,&
  666.                          cuni(1:nmax)      ,ctni(1:nmax)        ,ustar(1:nmax)   ,cosz(1:nmax)    ,&
  667.                          sinclt(1:nmax)    ,rhoair(1:nmax)      ,psy(1:nmax)     ,rcp(1:nmax)     ,&
  668.                          wc(1:nmax)        ,wg(1:nmax)          ,fc(1:nmax)      ,fg(1:nmax)      ,&
  669.                          hr(1:nmax)        ,ect(1:nmax)         ,eci(1:nmax)     ,egt(1:nmax)     ,&
  670.                          egi(1:nmax)       ,egs(1:nmax)         ,ec(1:nmax)      ,eg(1:nmax)      ,&
  671.                          hc(1:nmax)        ,hg(1:nmax)          ,ecidif(1:nmax)  ,egidif(1:nmax)  ,&
  672.                          ecmass(1:nmax)    ,egmass(1:nmax)      ,etmass(1:nmax)  ,hflux(1:nmax)   ,&
  673.                          chf(1:nmax)       ,shf(1:nmax)         ,fluxef(1:nmax)  ,roff(1:nmax)    ,&
  674.                          drag(1:nmax)      ,ra(1:nmax)          ,rb(1:nmax)      ,rd(1:nmax)      ,&
  675.                          rc(1:nmax)        ,rg(1:nmax)          ,tcta(1:nmax)    ,tgta(1:nmax)    ,&
  676.                          ta(1:nmax)        ,ea(1:nmax)          ,etc(1:nmax)     ,etg(1:nmax)     ,&
  677.                          btc(1:nmax)       ,btg(1:nmax)         ,u2(1:nmax)      ,radt(1:nmax,:)  ,&
  678.                          par(1:nmax,:)     ,pd(1:nmax,:)        ,rst(1:nmax,:)   ,rsoil(1:nmax)   ,&
  679.                          phroot(1:nmax,:)  ,hrr(1:nmax)         ,phsoil(1:nmax,:),cc(1:nmax)      ,&
  680.                          cg(1:nmax)        ,satcap(1:nmax,:)    ,snow(1:nmax,:)  ,dtc(1:nmax)     ,&
  681.                          dtg(1:nmax)       ,dtm(1:nmax)         ,dqm(1:nmax)     ,stm(1:nmax,:)   ,&
  682.                          extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)   ,gloss(1:nmax)   ,&
  683.                          thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)     ,tc(1:nmax)      ,&
  684.                          tg(1:nmax)        ,td(1:nmax)          ,capac(1:nmax,:) ,w(1:nmax,:)     ,&
  685.                          qm(1:nmax)        ,tm(1:nmax)          ,um(1:nmax)      ,vm(1:nmax)      ,&
  686.                          psur(1:nmax)      ,ppc(1:nmax)         ,ppl(1:nmax)     ,radn(1:nmax,:,:),&
  687.                          itype(1:nmax)     ,dtc3x               ,mon (1:nmax)    ,nmax            ,&
  688.                          nmax              ,zlt2(1:nmax,:)      ,green2(1:nmax,:),chil2(1:nmax,:) ,&
  689.                          rstpar2(1:nmax,:,:),topt2(1:nmax,:)    ,tll2(1:nmax,:)  ,tu2(1:nmax,:)   ,&
  690.                          defac2(1:nmax,:)  ,ph12(1:nmax,:)      ,ph22(1:nmax,:)  )
  691.                  END IF
  692.                  !
  693.                  !     sib time integaration and time filter
  694.                  !
  695.  V---------<     DO i=1,nmax
  696.  V                  !tm(i)=ABS(ta(i))/bps(i)
  697.  V                  !qm(i)=0.622e0_r8*EXP(21.65605e0_r8 -5418.0e0_r8 /tm(i))/gps(i)
  698.  V                  qm(i)=MAX(1.0e-12_r8,qm(i))
  699.  V--------->     END DO
  700.                  CALL sextrp ( &
  701.                       td    ,tg    ,tc    ,w     ,capac ,td0   ,tg0   ,tc0   ,w0    , &
  702.                       capac0,tdm   ,tgm   ,tcm   ,wm    ,capacm,istrt ,ncols ,nmax  , &
  703.                       epsflt,intg  ,latitu,tm0    ,qm0    ,tm    ,qm    ,tmm    ,qmm    )
  704.                  !
  705.                  !     fix soil moisture at selected locations
  706.                  !
  707.  1---------<     DO i=1,nmax
  708.  1                  IF(ssib(i).GT.0.0_r8)THEN
  709.  1                     qm(i)=MAX(1.0e-12_r8,qm(i))
  710.  1                     w0(i,1)=ssib(i)
  711.  1                     w0(i,2)=ssib(i)
  712.  1                     w0(i,3)=ssib(i)
  713.  1                     wm(i,1)=ssib(i)
  714.  1                     wm(i,2)=ssib(i)
  715.  1                     wm(i,3)=ssib(i)
  716.  1                  END IF
  717.  1--------->     END DO
  718.                  ncount=0
  719.  1---------<     DO i=1,nCols
  720.  1                  IF(imask(i).GE.1_i8) THEN
  721.  1                     ncount=ncount+1
  722.  1                     tmtx(i,1,3)=gmt(ncount,3)
  723.  1                     qmtx(i,1,3)=gmq(ncount,3)
  724.  1                     umtx(i,1,3)=gmu(ncount,3)
  725.  1                     umtx(i,1,4)=gmu(ncount,4)
  726.  1                     tsea(i)    =tgeff(ncount)
  727.  1                     z0x(ncount)=z0(ncount)
  728.  1                  END IF
  729.  1--------->     END DO
  730.                  !
  731.                  !     sea or sea ice
  732.                  ! gu gv gps colrad sigki delsig sens evap umom vmom rmi rhi cond stor zorl rnet ztn2 THETA_2M VELC_2m MIXQ_2M
  733.                  ! THETA_10M VELC_10M MIXQ_10M
  734.                  ! including case 1D physics
  735.  1---------<     DO i=1,nCols
  736.  1                  IF(mskant(i) == 1_i8)THEN
  737.  1                     xsea (i) = tseam(i)
  738.  1                     tsfc (i) = tsfcm(i)
  739.  1                     qsfc (i) = qsfcm(i)
  740.  1                  END IF   
  741.  1--------->     END DO
  742.              
  743.                  CALL seasfc( &
  744.                          tmtx  (1:nCols,:,:)  ,umtx  (1:nCols,:,:),qmtx  (1:nCols,:,:)  ,&
  745.                          kmax                 ,kmax               ,slrad (1:nCols)      ,&
  746.                          tsurf (1:nCols)      ,qsurf (1:nCols)    ,gu    (1:nCols,1)    ,&
  747.                          gv    (1:nCols,1)    ,gt    (1:nCols,1)  ,gq    (1:nCols,1)    ,&
  748.                          gps   (1:nCols)      ,xsea  (1:nCols)    ,dtc3x                ,&
  749.                          SIN(colrad(1:nCols)) ,sigki (1)          ,delsig(1)            ,&
  750.                          sens  (1:nCols)      ,evap  (1:nCols)    ,umom  (1:nCols)      ,&
  751.                          vmom  (1:nCols)      ,rmi   (1:nCols)    ,rhi   (1:nCols)      ,&
  752.                          cond  (1:nCols)      ,stor  (1:nCols)    ,zorl  (1:nCols)      ,&
  753.                          nCols              ,speedm(1:nCols)      ,&
  754.                          Ustarm(1:nCols)      ,z0sea (1:nCols)    ,rho   (1:nCols)      ,&
  755.              	    qsfc  (1:nCols)      ,tsfc  (1:nCols)    ,mskant(1:nCols)       )
  756.              
  757.  1---------<     DO i=1,nCols
  758.  1                  IF(mskant(i) == 1_i8 .and. tsea(i).LE.0.0e0_r8.AND.tsurf(i).LT.tice+0.01e0_r8 ) THEN
  759.  1               	  IF(intg.EQ.2) THEN
  760.  1               	     IF(istrt.EQ.0) THEN
  761.  1               		tseam(i)=filta*tsea (i) + epsflt*(tseam(i)+xsea(i))
  762.  1               		qsfc (i)=MAX(1.0e-12_r8,qsfc(i))
  763.  1               		tsfcm(i)=filta*tsfc0 (i) + epsflt*(tsfcm(i)+tsfc(i))
  764.  1               		qsfcm(i)=filta*qsfc0 (i) + epsflt*(qsfcm(i)+qsfc(i))
  765.  1               	     END IF
  766.  1               	     tsea (i) = xsea(i)
  767.  1               	     qsfc (i) = MAX(1.0e-12_r8,qsfc(i))
  768.  1               	     tsfc0(i) = tsfc(i)
  769.  1               	     qsfc0(i) = qsfc(i)
  770.  1               	  ELSE
  771.  1               	     tsea (i) = xsea(i)
  772.  1               	     tseam(i) = xsea(i)
  773.  1               	     qsfc (i) = MAX(1.0e-12_r8,qsfc(i))
  774.  1               	     tsfc0(i) = tsfc(i)
  775.  1               	     qsfc0(i) = qsfc(i)
  776.  1               	     tsfcm(i) = tsfc(i)
  777.  1               	     qsfcm(i) = qsfc(i)
  778.  1               	  END IF
  779.  1                  END IF
  780.  1                  IF(mskant(i) == 1_i8 .and. tsea(i).LT.0.0e0_r8.AND.tsurf(i).GE.tice+0.01e0_r8) THEN
  781.  1               	  tseam(i) = tsea (i)
  782.  1               	  tsfcm(i) = tsfc0(i)
  783.  1               	  qsfcm(i) = qsfc0(i)
  784.  1                  END IF
  785.  1--------->     END DO
  786.              
  787.                END SUBROUTINE SSiB_Driver
  788.              
  789.                SUBROUTINE CopySurfaceData(itype,mon,colrad2,xday,idatec,nsx,nCols,nmax,latitu)
  790.                  INTEGER      , INTENT(IN   ) :: nCols
  791.                  INTEGER      , INTENT(IN   ) :: nmax
  792.                  INTEGER      , INTENT(IN   ) :: latitu
  793.                  INTEGER      , INTENT(in )   :: itype   (nCols)
  794.                  INTEGER      , INTENT(in )   :: mon     (nCols)
  795.                  REAL(KIND=r8), INTENT(in )   :: colrad2 (nCols)
  796.                  REAL(KIND=r8), INTENT(in )   :: xday
  797.                  INTEGER      , INTENT(in )   :: idatec(4)
  798.                  INTEGER      , INTENT(inout) :: nsx     (nCols)
  799.                  INTEGER :: i,j
  800.  V--------<>     xcover = xcover_fixed
  801.  V--------<>     zlt    = zlt_fixed
  802.  V--------<>     green  = green_fixed
  803.  V--------<>     ph2    = ph2_fixed
  804.  V--------<>     ph1    = ph1_fixed
  805.  V--------<>     defac  = defac_fixed
  806.  V--------<>     tu     = tu_fixed
  807.  V--------<>     tll    = tll_fixed
  808.  V--------<>     topt   = topt_fixed
  809.  V--------<>     rstpar = rstpar_fixed
  810.  V--------<>     chil   = chil_fixed
  811.  1---------<     DO j=1,icg
  812.  1 Vp------<        DO i=1,nmax
  813.  1 Vp                  vcover_gbl (i,latitu,j) =  xcover_fixed(itype(i),mon(i),j)
  814.  1 Vp                  zlt_gbl    (i,latitu,j) =  zlt_fixed   (itype(i),mon(i),j)
  815.  1 Vp                  green_gbl  (i,latitu,j) =  green_fixed (itype(i),mon(i),j)
  816.  1 Vp                  chil_gbl   (i,latitu,j) =  chil_fixed  (itype(i),j)
  817.  1 Vp                  topt_gbl   (i,latitu,j) =  topt_fixed  (itype(i),j)
  818.  1 Vp                  tll_gbl    (i,latitu,j) =  tll_fixed   (itype(i),j)
  819.  1 Vp                  tu_gbl     (i,latitu,j) =  tu_fixed    (itype(i),j)
  820.  1 Vp                  defac_gbl  (i,latitu,j) =  defac_fixed (itype(i),j)
  821.  1 Vp                  ph1_gbl    (i,latitu,j) =  ph1_fixed   (itype(i),j)
  822.  1 Vp                  ph2_gbl    (i,latitu,j) =  ph2_fixed   (itype(i),j)
  823.  1 Vp                  rstpar_gbl (i,latitu,j,1)= rstpar_fixed(itype(i),j,1)
  824.  1 Vp                  rstpar_gbl (i,latitu,j,2)= rstpar_fixed(itype(i),j,2)
  825.  1 Vp                  rstpar_gbl (i,latitu,j,3)= rstpar_fixed(itype(i),j,3)
  826.  1 Vp------>        END DO
  827.  1--------->     END DO
  828.                  CALL wheat (latitu,itype ,nmax  ,colrad2 ,mon ,xday   ,yrl   , &
  829.                       idatec,monl  ,nsx    )
  830.              
  831.                END SUBROUTINE CopySurfaceData
  832.                ! airmod :alteration of aerodynamic transfer properties in case of snow
  833.                !         accumulation.
  834.                !
  835.              
  836.              
  837.              
  838.                SUBROUTINE airmod (tg, capac, z0x, d, rdc, rbc, itype, &
  839.                     mon, nmax, ncols)
  840.                  !
  841.                  !
  842.                  !-----------------------------------------------------------------------
  843.                  !       input parameters
  844.                  !-----------------------------------------------------------------------
  845.                  !   tg............ground temperature
  846.                  !   tf............freezing point
  847.                  !   z2............height of canopy top
  848.                  !   capac(cg).....liquid water stored on canopy/ground cover foliage
  849.                  !                                                            (m)
  850.                  !   d.............displacement height                        (m)
  851.                  !   z0x...........roughness length                           (m)
  852.                  !   rdc...........constant related to aerodynamic resistance
  853.                  !                 between ground and canopy air space
  854.                  !   rbc...........constant related to bulk boundary layer
  855.                  !                 resistance
  856.                  !-----------------------------------------------------------------------
  857.                  !      output parameters
  858.                  !-----------------------------------------------------------------------
  859.                  !   d.............displacement height                        (m)
  860.                  !   z0x...........roughness length                           (m)
  861.                  !   rdc...........constant related to aerodynamic resistance
  862.                  !                 between ground and canopy air space
  863.                  !   rbc...........constant related to bulk boundary layer
  864.                  !                 resistance
  865.                  !-----------------------------------------------------------------------
  866.                  !=======================================================================
  867.                  !   ncols.........Numero de ponto por faixa de latitude
  868.                  !   ityp..........Numero do tipo de solo      13
  869.                  !   imon..........Numero maximo de meses no ano (12)
  870.                  !   mon...........Numero do mes do ano (1-12)
  871.                  !   nmax
  872.                  !   xd............Deslocamento do plano zero (m)
  873.                  !   itype.........Classe de textura do solo
  874.                  !=======================================================================
  875.                  INTEGER, INTENT(in   ) :: ncols
  876.                  INTEGER, INTENT(in   ) :: mon(ncols)
  877.                  INTEGER, INTENT(in   ) :: nmax
  878.                  !
  879.                  !     vegetation and soil parameters
  880.                  !
  881.                  INTEGER, INTENT(in   ) :: itype (ncols)
  882.                  REAL(KIND=r8),    INTENT(inout) :: z0x   (ncols)
  883.                  REAL(KIND=r8),    INTENT(inout) :: d     (ncols)
  884.                  REAL(KIND=r8),    INTENT(inout) :: rdc   (ncols)
  885.                  REAL(KIND=r8),    INTENT(inout) :: rbc   (ncols)
  886.                  !
  887.                  !     prognostic variables
  888.                  !
  889.                  REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
  890.                  REAL(KIND=r8),    INTENT(in   ) :: capac(ncols,2)
  891.                  !
  892.                  REAL(KIND=r8)    :: sdep(ncols)
  893.                  REAL(KIND=r8)    :: xz  (ncols)
  894.                  !
  895.                  INTEGER :: i
  896.                  INTEGER :: ntyp
  897.  1---------<     DO i = 1, nmax
  898.  1                  IF( (tg(i) <= tf) .AND. (capac(i,2) >= 0.001_r8) )THEN
  899.  1           !          ntyp=itype(i)
  900.  1                     xz  (i)=z2(itype(i),mon(i))
  901.  1                     sdep(i)=capac(i,2)*5.0_r8
  902.  1                     sdep(i)=MIN( sdep(i) , xz(i)*0.95_r8 )
  903.  1                     d  (i)=xz (i)-( xz(i)- d(i) )/xz(i)*(xz(i)-sdep(i))
  904.  1                     z0x(i)=z0x(i)/( xz(i)-xd(itype(i),mon(i)))*(xz(i)-d   (i))
  905.  1                     rdc(i)=rdc(i)*( xz(i)-sdep(i) )/xz(i)
  906.  1                     rbc(i)=rbc(i)*xz(i)/( xz(i)-sdep(i) )
  907.  1                  END IF
  908.  1--------->     END DO
  909.                END SUBROUTINE airmod
ftn-5002 ftn: NOTE File = Sfc_SSiB.f90, Line = 909 
  Local variable "NTYP" is declared but neither defined nor used.

  910.              
  911.              
  912.              
  913.              
  914.              
  915.                SUBROUTINE temres(&
  916.                     bps   ,psb   ,em    ,gmt   ,gmq   ,psy   ,rcp   ,wc    ,wg    , &
  917.                     fc    ,fg    ,hr    ,hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm , &
  918.                     egdtg ,egdtc ,egdqm ,ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm, &
  919.                     ect   ,eci   ,egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    , &
  920.                     ecidif,egidif,ra    ,rb    ,rd    ,rc    ,rg    ,ta    ,ea    , &
  921.                     etc   ,etg   ,btc   ,btg   ,radt  ,rst   ,rsoil ,hrr   ,cc    , &
  922.                     cg    ,satcap,dtc   ,dtg   ,dtm   ,dqm   ,thermk,tc    ,tg    , &
  923.                     td    ,capac ,qm    ,tm    ,psur  ,dtc3x , &
  924.                     nmax  ,vcover,ncols )
  925.                  !
  926.                  !-----------------------------------------------------------------------
  927.                  ! temres :performs temperature tendency equations with interception loss.
  928.                  !-----------------------------------------------------------------------
  929.                  !     ncols.......Numero de ponto por faixa de latitude
  930.                  !     ityp........numero das classes de solo 13
  931.                  !     imon........Numero maximo de meses no ano (12)
  932.                  !     icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
  933.                  !     pie.........Constante Pi=3.1415926e0
  934.                  !     stefan .....Constante de Stefan Boltzmann
  935.                  !     cp..........specific heat of air (j/kg/k)
  936.                  !     hl..........heat of evaporation of water   (j/kg)
  937.                  !     grav........gravity constant      (m/s**2)
  938.                  !     tf..........Temperatura de congelamento (K)
  939.                  !     epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
  940.                  !                 de agua e do ar seco
  941.                  !     dtc3x.......time increment dt
  942.                  !     nmax........
  943.                  !     xcover......Fracao de cobertura vegetal icg=1 topo
  944.                  !     xcover......Fracao de cobertura vegetal icg=2 base
  945.                  !     vcover......Fracao de cobertura vegetal icg=1 topo
  946.                  !     vcover......Fracao de cobertura vegetal icg=2 topo
  947.                  !     qm..........specific humidity of reference (fourier)
  948.                  !     tm..........Temperature of reference (fourier)
  949.                  !     psur........surface pressure in mb
  950.                  !     tc..........Temperatura da copa "dossel" canopy leaf temperature(K)
  951.                  !     tg..........Temperatura da superficie do solo ground temperature (K)
  952.                  !     td .........Temperatura do solo profundo (K)
  953.                  !     capac(iv)...Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
  954.                  !     capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
  955.                  !     ra..........Resistencia Aerodinamica (s/m)
  956.                  !     rb..........bulk boundary layer resistance             (s/m)
  957.                  !     rd..........aerodynamic resistance between ground
  958.                  !                 and canopy air space                       (s/m)
  959.                  !     rc..........Resistencia do topo da copa (s/m)
  960.                  !     rg..........Resistencia da base da copa (s/m)
  961.                  !     ta..........Temperatura no nivel de fonte de calor do dossel (K)
  962.                  !     ea..........Pressao de vapor
  963.                  !     etc.........Pressure of vapor at top of the copa
  964.                  !     etg.........Pressao de vapor no base da copa
  965.                  !     btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
  966.                  !     btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
  967.                  !     radt........net heat received by canopy/ground vegetation
  968.                  !     rst.........Resisttencia Estomatica "Stomatal resistence" (s/m)
  969.                  !     rsoil ......Resistencia do solo (s/m)
  970.                  !     hrr.........rel. humidity in top layer
  971.                  !     cc..........heat capacity of the canopy
  972.                  !     cg..........heat capacity of the ground
  973.                  !     satcap......saturation liquid water capacity         (m)
  974.                  !     dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
  975.                  !     dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
  976.                  !     dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
  977.                  !     dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
  978.                  !     thermk......canopy emissivity
  979.                  !     ect.........Transpiracao(J/m*m)
  980.                  !     eci.........Evaporacao da agua interceptada (J/m*m)
  981.                  !     egt.........Transpiracao na base da copa (J/m*m)
  982.                  !     egi.........Evaporacao da neve (J/m*m)
  983.                  !     egs.........Evaporacao do solo arido (J/m*m)
  984.                  !     ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
  985.                  !                 topo da copa   ec   (i)=eci(i)+ect(i)
  986.                  !     eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
  987.                  !                 +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
  988.                  !     hc..........total sensible heat lost of top from the veggies.
  989.                  !     hg..........total sensible heat lost of base from the veggies.
  990.                  !     ecidif......check if interception loss term has exceeded canopy storage
  991.                  !                 ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hl3 )
  992.                  !     egidif......check if interception loss term has exceeded canopy storage
  993.                  !                 ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hl3 )
  994.                  !     hgdtg ......n.b. fluxes expressed in joules m-2
  995.                  !     hgdtc.......n.b. fluxes expressed in joules m-2
  996.                  !     hgdtm.......n.b. fluxes expressed in joules m-2
  997.                  !     hcdtg.......n.b. fluxes expressed in joules m-2
  998.                  !     hcdtc.......n.b. fluxes expressed in joules m-2
  999.                  !     hcdtm.......n.b. fluxes expressed in joules m-2
 1000.                  !     egdtg.......partial derivative calculation for latent heat
 1001.                  !     egdtc.......partial derivative calculation for latent heat
 1002.                  !     egdqm.......partial derivative calculation for latent heat
 1003.                  !     ecdtg ......partial derivative calculation for latent heat
 1004.                  !     ecdtc ......partial derivative calculation for latent heat
 1005.                  !     ecdqm.......partial derivative calculation for latent heat
 1006.                  !     deadtg......
 1007.                  !     deadtc......
 1008.                  !     deadqm......
 1009.                  !     bps.........
 1010.                  !     psb.........
 1011.                  !     em..........Pressao de vapor da agua
 1012.                  !     gmt.........
 1013.                  !     gmq.........specific humidity of reference (fourier)
 1014.                  !     psy.........(cp/(hl*epsfac))*psur(i)
 1015.                  !     rcp.........densidade do ar vezes o calor especifico do ar
 1016.                  !     wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 1017.                  !                 indice de area foliar no topo da copa
 1018.                  !     wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 1019.                  !                 indice de area foliar na base da copa
 1020.                  !     fc..........Condicao de oravalho 0 ou 1 na topo da copa
 1021.                  !     fg..........Condicao de oravalho 0 ou 1 na base da copa
 1022.                  !     hr..........rel. humidity in top layer
 1023.                  !-----------------------------------------------------------------------
 1024.              
 1025.                  INTEGER, INTENT(in   ) :: ncols
 1026.              
 1027.                  REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 1028.                  INTEGER, INTENT(in   ) :: nmax
 1029.                  !
 1030.                  !     vegetation and soil parameters
 1031.                  !
 1032.                  REAL(KIND=r8),    INTENT(in) :: vcover(ncols,icg)
 1033.                  !
 1034.                  !     the size of working area is ncols*187
 1035.                  !     atmospheric parameters as boudary values for sib
 1036.                  !
 1037.                  REAL(KIND=r8), INTENT(in   ) :: qm  (ncols)
 1038.                  REAL(KIND=r8), INTENT(in   ) :: tm  (ncols)
 1039.                  REAL(KIND=r8), INTENT(in   ) :: psur(ncols)
 1040.                  !
 1041.                  !     prognostic variables
 1042.                  !
 1043.                  REAL(KIND=r8), INTENT(in   ) :: tc   (ncols)
 1044.                  REAL(KIND=r8), INTENT(in   ) :: tg   (ncols)
 1045.                  REAL(KIND=r8), INTENT(in   ) :: td   (ncols)
 1046.                  REAL(KIND=r8), INTENT(in   ) :: capac(ncols,2)
 1047.                  !
 1048.                  !     variables calculated from above and ambient conditions
 1049.                  !
 1050.                  REAL(KIND=r8), INTENT(in   ) :: ra    (ncols)
 1051.                  REAL(KIND=r8), INTENT(in   ) :: rb    (ncols)
 1052.                  REAL(KIND=r8), INTENT(in   ) :: rd    (ncols)
 1053.                  REAL(KIND=r8), INTENT(inout  ) :: rc    (ncols)
 1054.                  REAL(KIND=r8), INTENT(inout  ) :: rg    (ncols)
 1055.                  REAL(KIND=r8), INTENT(inout  ) :: ta    (ncols)
 1056.                  REAL(KIND=r8), INTENT(inout  ) :: ea    (ncols)
 1057.                  REAL(KIND=r8), INTENT(in   ) :: etc   (ncols)
 1058.                  REAL(KIND=r8), INTENT(in   ) :: etg   (ncols)
 1059.                  REAL(KIND=r8), INTENT(in   ) :: btc   (ncols)
 1060.                  REAL(KIND=r8), INTENT(in   ) :: btg   (ncols)
 1061.                  REAL(KIND=r8), INTENT(inout) :: radt  (ncols,icg)
 1062.                  REAL(KIND=r8), INTENT(inout) :: rst   (ncols,icg)
 1063.                  REAL(KIND=r8), INTENT(in   ) :: rsoil (ncols)
 1064.                  REAL(KIND=r8), INTENT(in   ) :: hrr   (ncols)
 1065.                  REAL(KIND=r8), INTENT(in   ) :: cc    (ncols)
 1066.                  REAL(KIND=r8), INTENT(in   ) :: cg    (ncols)
 1067.                  REAL(KIND=r8), INTENT(in   ) :: satcap(ncols,icg)
 1068.                  REAL(KIND=r8), INTENT(inout  ) :: dtc   (ncols)
 1069.                  REAL(KIND=r8), INTENT(inout  ) :: dtg   (ncols)
 1070.                  REAL(KIND=r8), INTENT(inout  ) :: dtm   (ncols)
 1071.                  REAL(KIND=r8), INTENT(inout  ) :: dqm   (ncols)
 1072.                  REAL(KIND=r8), INTENT(in   ) :: thermk(ncols)
 1073.                  !
 1074.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 1075.                  !
 1076.                  REAL(KIND=r8), INTENT(inout  ) :: ect   (ncols)
 1077.                  REAL(KIND=r8), INTENT(inout  ) :: eci   (ncols)
 1078.                  REAL(KIND=r8), INTENT(inout  ) :: egt   (ncols)
 1079.                  REAL(KIND=r8), INTENT(inout  ) :: egi   (ncols)
 1080.                  REAL(KIND=r8), INTENT(inout  ) :: egs   (ncols)
 1081.                  REAL(KIND=r8), INTENT(inout  ) :: ec    (ncols)
 1082.                  REAL(KIND=r8), INTENT(inout  ) :: eg    (ncols)
 1083.                  REAL(KIND=r8), INTENT(inout  ) :: hc    (ncols)
 1084.                  REAL(KIND=r8), INTENT(inout  ) :: hg    (ncols)
 1085.                  REAL(KIND=r8), INTENT(inout  ) :: ecidif(ncols)
 1086.                  REAL(KIND=r8), INTENT(inout  ) :: egidif(ncols)
 1087.                  !
 1088.                  !     derivatives
 1089.                  !
 1090.                  REAL(KIND=r8), INTENT(inout  ) :: hgdtg (ncols)
 1091.                  REAL(KIND=r8), INTENT(inout  ) :: hgdtc (ncols)
 1092.                  REAL(KIND=r8), INTENT(inout  ) :: hgdtm (ncols)
 1093.                  REAL(KIND=r8), INTENT(inout  ) :: hcdtg (ncols)
 1094.                  REAL(KIND=r8), INTENT(inout  ) :: hcdtc (ncols)
 1095.                  REAL(KIND=r8), INTENT(inout  ) :: hcdtm (ncols)
 1096.                  REAL(KIND=r8), INTENT(inout  ) :: egdtg (ncols)
 1097.                  REAL(KIND=r8), INTENT(inout  ) :: egdtc (ncols)
 1098.                  REAL(KIND=r8), INTENT(inout  ) :: egdqm (ncols)
 1099.                  REAL(KIND=r8), INTENT(inout  ) :: ecdtg (ncols)
 1100.                  REAL(KIND=r8), INTENT(inout  ) :: ecdtc (ncols)
 1101.                  REAL(KIND=r8), INTENT(inout  ) :: ecdqm (ncols)
 1102.                  REAL(KIND=r8), INTENT(inout  ) :: deadtg(ncols)
 1103.                  REAL(KIND=r8), INTENT(inout  ) :: deadtc(ncols)
 1104.                  REAL(KIND=r8), INTENT(inout  ) :: deadqm(ncols)
 1105.                  !
 1106.                  !     this is for coupling with closure turbulence model
 1107.                  !
 1108.                  REAL(KIND=r8), INTENT(in   ) :: bps   (ncols)
 1109.                  REAL(KIND=r8), INTENT(in   ) :: psb   (ncols)
 1110.                  REAL(KIND=r8), INTENT(in   ) :: em    (ncols)
 1111.                  REAL(KIND=r8), INTENT(in   ) :: gmt   (ncols,3)
 1112.                  REAL(KIND=r8), INTENT(in   ) :: gmq   (ncols,3)
 1113.                  REAL(KIND=r8), INTENT(in   ) :: psy   (ncols)
 1114.                  REAL(KIND=r8), INTENT(in   ) :: rcp   (ncols)
 1115.                  REAL(KIND=r8), INTENT(inout  ) :: wc    (ncols)
 1116.                  REAL(KIND=r8), INTENT(inout  ) :: wg    (ncols)
 1117.                  REAL(KIND=r8), INTENT(in   ) :: fc    (ncols)
 1118.                  REAL(KIND=r8), INTENT(in   ) :: fg    (ncols)
 1119.                  REAL(KIND=r8), INTENT(inout  ) :: hr    (ncols)
 1120.              
 1121.              
 1122.                  REAL(KIND=r8) :: vcover2(ncols,icg)
 1123.              
 1124.                  REAL(KIND=r8)    :: pblsib(ncols,4,5)
 1125.                  REAL(KIND=r8)    :: coc
 1126.                  REAL(KIND=r8)    :: rsurf
 1127.                  REAL(KIND=r8)    :: cog1
 1128.                  REAL(KIND=r8)    :: cog2
 1129.                  REAL(KIND=r8)    :: d1
 1130.                  REAL(KIND=r8)    :: d2
 1131.                  REAL(KIND=r8)    :: d1i
 1132.                  REAL(KIND=r8)    :: top
 1133.                  REAL(KIND=r8)    :: ak    (ncols)
 1134.                  REAL(KIND=r8)    :: ah    (ncols)
 1135.                  REAL(KIND=r8)    :: cci   (ncols)
 1136.                  REAL(KIND=r8)    :: cgi   (ncols)
 1137.                  REAL(KIND=r8)    :: ecpot (ncols)
 1138.                  REAL(KIND=r8)    :: egpot (ncols)
 1139.                  REAL(KIND=r8)    :: ecf
 1140.                  REAL(KIND=r8)    :: egf
 1141.                  REAL(KIND=r8)    :: coct
 1142.                  REAL(KIND=r8)    :: cogt
 1143.                  REAL(KIND=r8)    :: cogs1
 1144.                  REAL(KIND=r8)    :: cogs2
 1145.                  REAL(KIND=r8)    :: psyi  (ncols)
 1146.                  REAL(KIND=r8)    :: fac1
 1147.                  REAL(KIND=r8)    :: rcdtc (ncols)
 1148.                  REAL(KIND=r8)    :: rcdtg (ncols)
 1149.                  REAL(KIND=r8)    :: rgdtc (ncols)
 1150.                  REAL(KIND=r8)    :: rgdtg (ncols)
 1151.                  LOGICAL          :: LL(nCols)
 1152.                  REAL(KIND=r8), PARAMETER :: capi  =1.0_r8/4.0e-3_r8
 1153.                  REAL(KIND=r8)    :: timcon
 1154.                  REAL(KIND=r8)    :: timcn2
 1155.                  REAL(KIND=r8)    :: tim
 1156.                  REAL(KIND=r8)    :: dtc3xi
 1157.                  REAL(KIND=r8)    :: fak
 1158.                  REAL(KIND=r8)    :: fah
 1159.                  INTEGER :: i
 1160.                  REAL(KIND=r8)    :: stb4
 1161.                  REAL(KIND=r8)    :: stb8
 1162.                  REAL(KIND=r8)    :: hlat3
 1163.              
 1164.                  timcon = pie/86400.0_r8
 1165.                  timcn2 = 2.0_r8   * timcon
 1166.                  tim    = 1.0_r8   + timcn2*dtc3x
 1167.                  dtc3xi = 1.0_r8   / dtc3x
 1168.                  fak    = 0.01_r8  * grav/cp
 1169.                  fah    = 0.01_r8  * grav/hl
 1170.  V--------<>     vcover2=vcover
 1171.              
 1172.  1---------<     DO i = 1, nmax
 1173.  1                  !
 1174.  1                  !                  --                                                   --
 1175.  1                  !                 |      razao entre a agua interceptada no topo da copa  |
 1176.  1                  !     wc = Minimo*| 1 , --------------------------------------------------|
 1177.  1                  !                 |     indice de area foliar no topo da copa             |
 1178.  1                  !                  --                                                   --
 1179.  1                  !
 1180.  1                  wc  (i)=MIN( 1.0_r8   , capac(i,1)/satcap(i,1))
 1181.  1                  !                  --                                                    --
 1182.  1                  !                 |       razao entre a agua interceptada na base da copa  |
 1183.  1                  !     wg = Minimo*| 1  ,---------------------------------------------------|
 1184.  1                  !                 |      indice de area foliar na base da copa             |
 1185.  1                  !                  --                                                    --
 1186.  1                  !
 1187.  1                  wg  (i)=MIN( 1.0_r8   , capac(i,2)/satcap(i,2))
 1188.  1                  !
 1189.  1                  ! Temperatura de congelamento (K)
 1190.  1                  !
 1191.  1                  LL(i)=tg(i) <= tf
 1192.  1                  IF (LL(i)) THEN
 1193.  1                     vcover2(i,2)=1.0_r8
 1194.  1                     wg    (i)  =MIN(1.0_r8   ,capac(i,2)*capi)
 1195.  1                     !
 1196.  1                     !     rsoil ......Resistencia do solo (s/m)
 1197.  1                     !
 1198.  1                     rst   (i,2)=rsoil(i)
 1199.  1                  END IF
 1200.  1                  !
 1201.  1                  !
 1202.  1                  !  DT     d    d[w'T']
 1203.  1                  ! ---- = --   ----------
 1204.  1                  !  Dt     dt     dz
 1205.  1                  !
 1206.  1                  !H =rho*cp*w'T'
 1207.  1                  !
 1208.  1                  !          H
 1209.  1                  !w'T' = -------
 1210.  1                  !        rho*cp
 1211.  1                  !
 1212.  1                  !  DT     d     1          dH
 1213.  1                  ! ---- = ---- --------- * -----
 1214.  1                  !  Dt     dt    rho*cp      dz
 1215.  1                  !
 1216.  1                  ! P =rho*R*T and P = rho*g*Z
 1217.  1                  !
 1218.  1                  !                           P
 1219.  1                  ! DP = rho*g*DZ and rho = ----
 1220.  1                  !                          R*T
 1221.  1                  !
 1222.  1                  ! 1             1
 1223.  1                  !----= rho*g* -----
 1224.  1                  ! DZ            DP
 1225.  1                  !
 1226.  1                  ! 1     1         1
 1227.  1                  !--- * ---- = g* -----
 1228.  1                  !rho    DZ        DP
 1229.  1                  !
 1230.  1                  !
 1231.  1                  !  DT     d      g      dH
 1232.  1                  ! ---- = ---- *----- * -----
 1233.  1                  !  Dt     dt     cp     dP
 1234.  1                  !
 1235.  1                  !           g      d
 1236.  1                  ! ak(i) = ----- * -----
 1237.  1                  !           cp     dP
 1238.  1           
 1239.  1                  !                grav            1
 1240.  1                  !ak(i) = 0.01 * ------ * ------------------
 1241.  1                  !                 cp      (psb(i)*bps(i))
 1242.  1                  !
 1243.  1                  !                                        -(R/Cp)
 1244.  1                  !                  g               sl(k)
 1245.  1                  ! ak(i) = 0.01 * ------- * -------------------------------
 1246.  1                  !                  cp        (P * (si(k) - si(k+1)))
 1247.  1                  !
 1248.  1                  ak  (i) =fak/(psb(i)*bps(i))
 1249.  1                  !
 1250.  1                  !L =rho*hl*w'Q'
 1251.  1                  !
 1252.  1                  !
 1253.  1                  !                 g                1
 1254.  1                  !ah(i) = 0.01 * ------ * --------------------------
 1255.  1                  !                 hl       (P * (si(k) - si(k+1)))
 1256.  1                  !
 1257.  1                  ah  (i) =fah/ psb(i)
 1258.  1                  !
 1259.  1                  !     cc..........heat capacity of the canopy
 1260.  1                  !     cg..........heat capacity of the ground
 1261.  1                  !
 1262.  1                  cgi (i) =1.0_r8   / cg(i)
 1263.  1                  cci (i) =1.0_r8   / cc(i)
 1264.  1                  !
 1265.  1                  ! rcp ---- densidade do ar vezes o calor especifico do ar
 1266.  1                  !
 1267.  1                  !(cp/(hl*epsfac))*psur(i)
 1268.  1                  !
 1269.  1                  psyi(i) =rcp(i)/psy(i)
 1270.  1--------->     END DO
 1271.                  !
 1272.                  !     partial derivative calculations for sensible heat
 1273.                  !
 1274.  V---------<     DO i = 1, nmax
 1275.  V                  !
 1276.  V                  !           1          1          1
 1277.  V                  ! d1     =------- + -------- + --------
 1278.  V                  !          ra(i)      rb(i)      rd(i)
 1279.  V                  !
 1280.  V                  !            rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1281.  V                  ! d1     = --------------------------------------------
 1282.  V                  !                     ra(i)*rb(i)*rd(i)
 1283.  V                  !
 1284.  V                  d1     =1.0_r8/ra(i) + 1.0_r8/rb(i) + 1.0_r8/rd(i)
 1285.  V                  !
 1286.  V                  !          rcp(i)     rcp(i)     rcp(i)
 1287.  V                  ! d1i =  --------- + -------- + --------
 1288.  V                  !          ra(i)      rb(i)      rd(i)
 1289.  V                  !
 1290.  V                  !
 1291.  V                  !          rb(i)*rd(i)*rcp(i)  +   ra(i)*rd(i)*rcp(i)  +   ra(i)*rb(i)*rcp(i)
 1292.  V                  ! d1i =  ----------------------------------------------------------------------
 1293.  V                  !                              ra(i)*rb(i)*rd(i)
 1294.  V                  !
 1295.  V                  d1i    =rcp(i)/d1
 1296.  V                  !
 1297.  V                  !       --                                --
 1298.  V                  !      | tg(i)     tc(i)      tm(i)*bps(i)  |  /
 1299.  V                  !ta(i)=|------- + -------- + -------------- | /d1
 1300.  V                  !      | rd(i)      rb(i)         ra(i)     |/
 1301.  V                  !       --                                --
 1302.  V                  !
 1303.  V                  ta(i)=( tg(i)/rd(i) + tc(i)/rb(i) + tm(i)*bps(i)/ra(i) )/d1
 1304.  V                  !
 1305.  V                  !dtc3x = time increment dt
 1306.  V                  !rcp----densidade do ar vezes o calor especifico do ar
 1307.  V                  !
 1308.  V                  !
 1309.  V                  !   total sensible heat lost of top from the veggies.
 1310.  V                  !                  (tc(i)-ta(i))
 1311.  V                  !hc(i) = rcp(i) * ----------------*dt
 1312.  V                  !                      rb(i)
 1313.  V                  !
 1314.  V                  hc(i)=rcp(i) * ( tc(i) - ta(i) ) / rb(i) * dtc3x
 1315.  V                  !
 1316.  V                  !   total sensible heat lost of base from the veggies.
 1317.  V                  !
 1318.  V                  !                  (tg(i)-ta(i))
 1319.  V                  !hg(i) = rcp(i) * ---------------*dt
 1320.  V                  !                      rd(i)
 1321.  V                  !
 1322.  V                  hg(i)=rcp(i) * ( tg(i) - ta(i) ) / rd(i) * dtc3x
 1323.  V                  !                                              J
 1324.  V                  !     n.b. fluxes expressed in joules m-2  = ------
 1325.  V                  !                                             m^2
 1326.  V                  !          rcp(i)     rcp(i)     rcp(i)
 1327.  V                  ! d1i =  --------- + -------- + --------
 1328.  V                  !          ra(i)      rb(i)      rd(i)
 1329.  V                  !
 1330.  V                  !          rb(i)*rd(i)*rcp(i)  +   ra(i)*rd(i)*rcp(i)  +   ra(i)*rb(i)*rcp(i)
 1331.  V                  ! d1i =  ----------------------------------------------------------------------
 1332.  V                  !                              ra(i)*rb(i)*rd(i)
 1333.  V                  !
 1334.  V                  !                       --               --
 1335.  V                  !              d1i     |  1.0       1.0    |
 1336.  V                  !hcdtc(i) =  ------- * | ------ + -------- |
 1337.  V                  !             rb(i)    |  ra(i)     rd(i)  |
 1338.  V                  !                       --               --
 1339.  V                  !
 1340.  V                  hcdtc(i)= d1i   / rb(i)*( 1.0_r8/ra(i) + 1.0_r8/rd(i) )
 1341.  V                  !
 1342.  V                  !                -d1i
 1343.  V                  !hcdtg(i) =  ---------------
 1344.  V                  !             rb(i) * rd(i)
 1345.  V                  !
 1346.  V                  hcdtg(i)=-d1i   / ( rb(i)*rd(i) )
 1347.  V                  !
 1348.  V                  !                     ra(i)*rb(i)*rd(i)*rcp(i)
 1349.  V                  ! d1i     = --------------------------------------------
 1350.  V                  !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1351.  V                  !
 1352.  V                  !               -d1i
 1353.  V                  ! hcdtm(i)= ----------------- * bps(i)
 1354.  V                  !            ( rb(i)*ra(i) )
 1355.  V                  !
 1356.  V                  !                          - rd(i)*rcp(i)
 1357.  V                  ! hcdtm(i)= ---------------------------------------------- * bps(i)
 1358.  V                  !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1359.  V                  !
 1360.  V           
 1361.  V                  hcdtm(i)=-d1i   / ( rb(i)*ra(i) ) *bps(i)
 1362.  V                  !
 1363.  V                  !                        --               --
 1364.  V                  !               d1i     |  1.0       1.0    |
 1365.  V                  ! hgdtg(i) =  ------- * | ------ + -------- |
 1366.  V                  !              rd(i)    |  ra(i)     rb(i)  |
 1367.  V                  !                        --               --
 1368.  V                  !
 1369.  V                  hgdtg(i)= d1i   / rd(i)*( 1.0_r8/ra(i) + 1.0_r8/rb(i))
 1370.  V                  !
 1371.  V                  !                -d1i
 1372.  V                  !hgdtc(i) = -----------------
 1373.  V                  !            ( rd(i)*rb(i) )
 1374.  V                  !
 1375.  V                  !
 1376.  V                  hgdtc(i)=-d1i   / ( rd(i)*rb(i) )
 1377.  V                  !
 1378.  V                  !                    -d1i                (R/Cp)
 1379.  V                  ! hgdtm(i) = ----------------- *   sl(k)
 1380.  V                  !             ( rd(i)*ra(i) )
 1381.  V                  !
 1382.  V                  !
 1383.  V                  !                          - rb(i)*rcp(i)                          (R/Cp)
 1384.  V                  ! hgdtm(i)= ---------------------------------------------- * sl(k)
 1385.  V                  !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1386.  V           
 1387.  V                  hgdtm(i)=-d1i   / ( rd(i)*ra(i) ) *bps(i)
 1388.  V                  !
 1389.  V--------->     END DO
 1390.                  !
 1391.                  !     partial derivative calculations for longwave radiation flux
 1392.                  !
 1393.                  stb4  = 4.0_r8 * stefan
 1394.                  stb8  = 8.0_r8 * stefan
 1395.                  !
 1396.  V---------<     DO i = 1, nmax
 1397.  V                  fac1     = vcover2(i,1)*(1.0_r8  - thermk(i))
 1398.  V                  rcdtc(i) = fac1 * stb8 * tc(i)*tc(i)*tc(i)
 1399.  V                  rcdtg(i) =-fac1 * stb4 * tg(i)*tg(i)*tg(i)
 1400.  V                  rgdtc(i) =-fac1 * stb4 * tc(i)*tc(i)*tc(i)
 1401.  V                  rgdtg(i) =        stb4 * tg(i)*tg(i)*tg(i)
 1402.  V--------->     END DO
 1403.  V---------<     DO i = 1, nmax
 1404.  V                  !
 1405.  V                  !     partial derivative calculation for latent heat
 1406.  V                  !     modification for soil dryness : hr=rel. humidity in top layer
 1407.  V                  !
 1408.  V                  hr   (i)  = hrr(i)   * fg(i) + 1.0_r8 - fg(i)
 1409.  V                  !
 1410.  V                  !     fc = Condicao de oravalho 0 ou 1 na topo da copa
 1411.  V                  !
 1412.  V                  rc   (i)  = rst(i,1) * fc(i) + 2.0_r8 * rb(i)
 1413.  V                  !
 1414.  V                  !        ( 1.0_r8 - wc(i) )         wc(i)
 1415.  V                  ! coc = -------------------- + ------------------
 1416.  V                  !              rc(i)            (2.0_r8 * rb(i))
 1417.  V                  !
 1418.  V                  coc       = ( 1.0_r8 - wc(i) ) / rc(i) + wc(i)/(2.0_r8 * rb(i))
 1419.  V                  !
 1420.  V                  ! fg = Condicao de oravalho 0 ou 1 na base da copa
 1421.  V                  !
 1422.  V                  rg   (i)  = rst(i,2)*fg(i)
 1423.  V                  !
 1424.  V                  rsurf     = rsoil(i)*fg(i)
 1425.  V                  !
 1426.  V                  !     hr..........rel. humidity in top layer
 1427.  V                  !     vcover......Fracao de cobertura vegetal icg=1 topo
 1428.  V                  !     vcover......Fracao de cobertura vegetal icg=2 topo
 1429.  V                  !
 1430.  V                  !                      (1 - wg(i))            (1 - vcover(i,2))              vcover(i,2)
 1431.  V                  ! cog1 = vcover(i,2)*--------------- + hr(i)*------------------- + hr(i)*----------------------
 1432.  V                  !                     (rg(i)+rd(i))            (rsurf + rd(i))            (rsurf + rd(i) + 44)
 1433.  V                  !
 1434.  V                  cog1      =   vcover2(i,2)*(1.0_r8 - wg(i))/(rg(i)+rd(i)) &
 1435.  V                       + (1.0_r8 - vcover2(i,2))/(rsurf + rd(i)) * hr(i) &
 1436.  V                       + vcover2(i,2) / (rsurf + rd(i) + 44.0_r8) * hr(i)
 1437.  V                  !
 1438.  V                  !                      (1 - wg(i))      (1 - vcover(i,2))        vcover(i,2)
 1439.  V                  ! cog2 = vcover(i,2)*--------------- + ------------------- + ----------------------
 1440.  V                  !                     (rg(i)+rd(i))      (rsurf + rd(i))      (rsurf + rd(i) + 44)
 1441.  V                  !
 1442.  V                  cog2      = vcover2(i,2)*(1.0_r8 - wg(i))/(rg(i)+rd(i)) &
 1443.  V                       +     (1.0_r8 - vcover2(i,2))/(rsurf + rd(i)) &
 1444.  V                       +      vcover2(i,2)/(rsurf   +rd(i)+44.0_r8)
 1445.  V           
 1446.  V                  !                       (1 - wg(i))      hr(i)*(1 - vcover(i,2))      hr(i)*vcover(i,2)      wg(i)* vcover(i,2)
 1447.  V                  ! cog1 = vcover(i,2) * -------------- + ------------------------- + --------------------- + --------------------
 1448.  V                  !                      (rg(i)+rd(i))     (rsurf + rd(i))            (rsurf + rd(i) + 44)           rd(i)
 1449.  V                  !
 1450.  V                  !
 1451.  V                  cog1      = cog1 + wg(i) / rd(i)*vcover2(i,2)
 1452.  V                  !
 1453.  V                  !                      wg(i)
 1454.  V                  ! cog2      = cog2 + -------- * vcover(i,2)
 1455.  V                  !                      rd(i)
 1456.  V                  !
 1457.  V                  cog2      = cog2 + wg(i)/rd(i)*vcover2(i,2)
 1458.  V                  !
 1459.  V                  !        1.0       ( 1.0_r8 - wc(i) )         wc(i)
 1460.  V                  !d2 = --------- + -------------------- + ------------------ + cog2
 1461.  V                  !       ra(i)            rc(i)            (2.0_r8 * rb(i))
 1462.  V                  !
 1463.  V                  d2        = 1.0_r8/ra(i) + coc + cog2
 1464.  V                  !
 1465.  V                  !                                      em(i)
 1466.  V                  !top = coc * etc(i) + cog1 * etg(i) + -------
 1467.  V                  !                                      ra(i)
 1468.  V                  !
 1469.  V                  top       = coc * etc(i) + cog1 * etg(i) + em(i)/ra(i)
 1470.  V                  !
 1471.  V                  ea (i)    = top/d2
 1472.  V                  !
 1473.  V                  !       psyi(i) =rcp(i)/psy(i)
 1474.  V                  !
 1475.  V                  ! The rate of evaporation from the wetted portions of the vegetation
 1476.  V                  !
 1477.  V                  !        ( 1 - wc(i) )         wc(i)
 1478.  V                  ! coc = ---------------- + --------------
 1479.  V                  !            rc(i)          ( 2 * rb(i) )
 1480.  V                  !
 1481.  V                  !The latent heat fluxes from the canopy is defined by:
 1482.  V                  !
 1483.  V                  !
 1484.  V                  !            --        --                      --             --
 1485.  V                  !           |            |     rho(i) * cp    |  wc     1 - wc  |
 1486.  V                  !ec = LEc = | e[Tc] - ea | * -------------- * | ---- + ---------|
 1487.  V                  !           |            |       psy(i)       |  rb     rb + rc |
 1488.  V                  !            --        --                      --             --
 1489.  V                  !
 1490.  V                  ec (i)    = ( etc(i)-ea(i) )  *  coc * psyi(i) * dtc3x
 1491.  V                  !
 1492.  V                  !The latent heat fluxes from the ground is defined by:
 1493.  V                  !
 1494.  V                  !             --           --                       --        --
 1495.  V                  !            |               |      rho(i) * cp    |     1      |
 1496.  V                  ! eg = LEgs =|fh*e[Tgs] - ea | *  -------------- * |------------|
 1497.  V                  !            |               |        psy(i)       | rsurf + rd |
 1498.  V                  !             --           --                       --        --
 1499.  V                  !
 1500.  V                  eg (i)    = (etg(i)*cog1   - ea(i)*cog2   )*psyi(i)*dtc3x
 1501.  V                  !
 1502.  V                  deadtc(i) = btc(i) *  coc / d2
 1503.  V                  !
 1504.  V                  deadtg(i) = btg(i) * cog1 / d2
 1505.  V                  !
 1506.  V                  !                             psur(i)
 1507.  V                  ! deadqm(i) = epsfac * ------------------------------------------
 1508.  V                  !                       ( ( epsfac + qm(i) )**2  *  ra(i)*d2    )
 1509.  V                  !
 1510.  V                  deadqm(i) = epsfac * psur(i)/( (epsfac+qm(i))**2 * ra(i)*d2    )
 1511.  V                  !
 1512.  V                  ecdtc(i)  = (btc(i) - deadtc(i) ) * coc * psyi(i)
 1513.  V                  !
 1514.  V                  ecdtg(i)  = -deadtg(i) * coc   * psyi(i)
 1515.  V                  !
 1516.  V                  ecdqm(i)  = -deadqm(i) * coc   * psyi(i)
 1517.  V                  !
 1518.  V                  egdtg(i)  = ( btg(i) * cog1 - deadtg(i) * cog2 )*psyi(i)
 1519.  V                  !
 1520.  V                  egdtc(i)  = -deadtc(i) * cog2   * psyi(i)
 1521.  V                  !
 1522.  V                  egdqm(i)  = -deadqm(i) * cog2   * psyi(i)
 1523.  V                  !
 1524.  V--------->     END DO
 1525.                  !
 1526.                  !     solve for time changes of pbl and sib variables,
 1527.                  !     using a semi-implicit scheme.
 1528.                  !
 1529.  V---------<     DO i = 1, nmax
 1530.  V                  !
 1531.  V                  !     tg equation
 1532.  V                  !
 1533.  V                  !     cc..........heat capacity of the canopy
 1534.  V                  !     cg..........heat capacity of the ground
 1535.  V                  !
 1536.  V                  !            1.0                  1.0
 1537.  V                  ! cgi (i) = ----- = ---------------------------------
 1538.  V                  !           cg(i)     heat capacity of the ground
 1539.  V                  !
 1540.  V                  !           1.0                         1.0
 1541.  V                  ! cci (i) =------   =  --------------------------------------
 1542.  V                  !           cc(i)          heat capacity of the canopy
 1543.  V                  !
 1544.  V                  !             2 * pi * dt     s
 1545.  V                  !tim = 1.0 + ------------- = ---
 1546.  V                  !               86400.0       s
 1547.  V                  !
 1548.  V                  pblsib(i,1,1) = tim + dtc3x * cgi(i) * (hgdtg(i) + egdtg(i) + rgdtg(i))
 1549.  V                  pblsib(i,1,2) =       dtc3x * cgi(i) * (hgdtc(i) + egdtc(i) + rgdtc(i))
 1550.  V                  pblsib(i,1,3) =       dtc3x * cgi(i) * hgdtm(i)
 1551.  V                  pblsib(i,1,4) =       dtc3x * cgi(i) * egdqm(i)
 1552.  V                  !
 1553.  V                  !     tc equation
 1554.  V                  !
 1555.  V                  pblsib(i,2,1) =          dtc3x * cci(i) * ( hcdtg(i) + ecdtg(i) + rcdtg(i) )
 1556.  V                  !
 1557.  V                  pblsib(i,2,2) = 1.0_r8 + dtc3x * cci(i) * ( hcdtc(i) + ecdtc(i) + rcdtc(i) )
 1558.  V                  !
 1559.  V                  !
 1560.  V                  !               -d1i                  (R/Cp)
 1561.  V                  ! hcdtm(i)= ----------------- *  sl(k)
 1562.  V                  !            Cc(i)*( rb(i)*ra(i) )
 1563.  V                  !
 1564.  V                  pblsib(i,2,3) = dtc3x * cci(i) * hcdtm(i)
 1565.  V                  !
 1566.  V                  pblsib(i,2,4) = dtc3x * cci(i) * ecdqm(i)
 1567.  V                  !
 1568.  V                  !     tm equation
 1569.  V                  !
 1570.  V                  !                                        -(R/Cp)
 1571.  V                  !                  g               sl(k)
 1572.  V                  ! ak(i) = 0.01 * ------- * -------------------------------
 1573.  V                  !                  cp        (P * (si(k) - si(k+1)))
 1574.  V                  !
 1575.  V                  !
 1576.  V                  pblsib(i,3,1) = -dtc3x * ak(i) * ( hgdtg(i) + hcdtg(i) )
 1577.  V                  !
 1578.  V                  pblsib(i,3,2) = -dtc3x * ak(i) * ( hgdtc(i) + hcdtc(i) )
 1579.  V                  !
 1580.  V                  !
 1581.  V                  !      --   --  -(R/Cp)    --   --  -(R/Cp)
 1582.  V                  !     |  P    |           |       |
 1583.  V                  !bps  |-------|        == |sl(k)  |
 1584.  V                  !     |  P0   |           |       |
 1585.  V                  !      --   --             --   --
 1586.  V                  !
 1587.  V                  !             --   --  -(R/Cp)
 1588.  V                  !            |  P    |
 1589.  V                  !Tpot =  T * |-------|
 1590.  V                  !            |  P0   |
 1591.  V                  !             --   --
 1592.  V                  !
 1593.  V                  !
 1594.  V                  ! P =rho*R*T and P = rho*g*Z
 1595.  V                  !
 1596.  V                  !                           P
 1597.  V                  ! DP = rho*g*DZ and rho = ----
 1598.  V                  !                          R*T
 1599.  V                  !
 1600.  V                  !        P
 1601.  V                  ! DP = ----*g*DZ
 1602.  V                  !       R*T
 1603.  V                  !
 1604.  V                  !        R*T
 1605.  V                  ! DZ = ------*DP
 1606.  V                  !        g*P
 1607.  V                  !
 1608.  V                  !    1       g*P       1
 1609.  V                  !  ------ = ------ * ------
 1610.  V                  !    DZ      R*T       DP
 1611.  V                  !
 1612.  V                  !    T       g         P
 1613.  V                  !  ------ = ------ * ------
 1614.  V                  !    DZ      R         DP
 1615.  V                  !
 1616.  V                  !                                        -(R/Cp)
 1617.  V                  !                  g               sl(k)
 1618.  V                  ! ak(i) = 0.01 * ------- * -------------------------------
 1619.  V                  !                  cp        (P * (si(k) - si(k+1)))
 1620.  V                  !
 1621.  V                  !
 1622.  V                  ! pblsib(i,3,3) = gmt(i,2) - 2*dt*ak(i)*(hgdtm(i) + hcdtm(i))
 1623.  V                  !
 1624.  V                  !                             T      1
 1625.  V                  !Pbl_KMbyDZ_1  =   2*Dt * Km*---- * ----
 1626.  V                  !                             dZ     dZ
 1627.  V                  !
 1628.  V                  !                             T      1
 1629.  V                  !Pbl_KMbyDZ_1  =   2*Dt * Km*---- * ----
 1630.  V                  !                             dZ     dZ
 1631.  V                  !
 1632.  V                  !           --                                       --     --                                           --
 1633.  V                  !          |                                           |   |    Pbl_KMbyDZ_1(i,k)*Pbl_KMbyDZ_2(i,k+1)      |
 1634.  V                  !gmt(i,2) =|1.0 + Pbl_KMbyDZ_1(i,k) + Pbl_KMbyDZ_2(i,k)| - |-----------------------------------------------|
 1635.  V                  !          |                                           |   |1.0 + Pbl_KMbyDZ_1(i,k+1) + Pbl_KMbyDZ_2(i,k+1)|
 1636.  V                  !           --                                       --     --                                           --
 1637.  V           
 1638.  V                  pblsib(i,3,3) = gmt(i,2) - dtc3x * ak(i) * ( hgdtm(i) + hcdtm(i) )
 1639.  V                  pblsib(i,3,4) = 0.0_r8
 1640.  V                  !
 1641.  V                  !     qm equation
 1642.  V                  !
 1643.  V                  !
 1644.  V                  !                 g                1
 1645.  V                  !ah(i) = 0.01 * ------ * --------------------------
 1646.  V                  !                 hl       (P * (si(k) - si(k+1)))
 1647.  V                  !
 1648.  V                  pblsib(i,4,1) = - dtc3x * ah(i) * ( egdtg(i) + ecdtg(i) )
 1649.  V                  pblsib(i,4,2) = - dtc3x * ah(i) * ( egdtc(i) + ecdtc(i) )
 1650.  V                  pblsib(i,4,3) =   0.0_r8
 1651.  V                  !
 1652.  V                  pblsib(i,4,4) =   gmq(i,2) - dtc3x * ah(i) * ( egdqm(i) + ecdqm(i) )
 1653.  V                  !
 1654.  V                  !                                                           Rngs
 1655.  V                  ! radt = net heat received by canopy/ground vegetation  = --------
 1656.  V                  !                                                            dt
 1657.  V                  !
 1658.  V                  !      dTgs                          2*PI*Cgs
 1659.  V                  ! Cgs*------ = Rngs - Hgs - LHgs - ------------ * (Tgs - Td)
 1660.  V                  !      dt                            dayleg
 1661.  V                  !
 1662.  V                  !      dTgs     Rngs      Hgs     LHgs         2*PI
 1663.  V                  !     ------ = ------ - ------ - ------- - -------------- * (Tgs - Td)
 1664.  V                  !      dt       Cgs       Cgs      Cgs         dayleg
 1665.  V                  !
 1666.  V                  !               --                     --
 1667.  V                  !      dTgs    |  Rngs      Hgs     LHgs |        2*PI
 1668.  V                  !     ------ = | ------ - ------ - ------| - -------------- * (Tgs - Td)
 1669.  V                  !      dt      |  Cgs       Cgs      Cgs |        dayleg
 1670.  V                  !               --                     --
 1671.  V                  !
 1672.  V                  !               --                   --
 1673.  V                  !      dTgs    |                       |    1           2*PI
 1674.  V                  !     ------ = |  Rngs - ( Hgs + LHgs )| *------ - -------------- * (Tgs - Td)
 1675.  V                  !      dt      |                       |    Cgs        dayleg
 1676.  V                  !               --                   --
 1677.  V                  !
 1678.  V                  !                                                          cgi(i)         2*pi
 1679.  V                  !pblsib(i,1,5) = (radt(i,2)* cgi(i) - ( hg(i) + eg(i) ) * -------- )  - --------- * ( tg(i) - td(i) )
 1680.  V                  !                                                             dt          86400.0
 1681.  V                  !            2*pi
 1682.  V                  ! timcn2 = ---------
 1683.  V                  !           86400.0
 1684.  V                  pblsib(i,1,5) = (radt(i,2) - ( hg(i) + eg(i) ) * dtc3xi ) * cgi(i) - timcn2 * ( tg(i) - td(i) )
 1685.  V                  !
 1686.  V                  !      dTc
 1687.  V                  ! Cc*------ = Rnc - Hc - LHc
 1688.  V                  !      dt
 1689.  V                  !
 1690.  V                  !             --             --
 1691.  V                  !      dTc   |                 |     1
 1692.  V                  !    ------ =|Rnc - Hc - LHc   | * -----
 1693.  V                  !      dt    |                 |     Cc
 1694.  V                  !             --             --
 1695.  V                  !                 --                                     --
 1696.  V                  !                |                                   1     |     1
 1697.  V                  !pblsib(i,2,5) = |radt(i,1) - ( hc(i) + ec(i) ) * -------- | * -------
 1698.  V                  !                |                                   dt    |    cc(i)
 1699.  V                  !                 --                                     --
 1700.  V                  !                 --                                     --
 1701.  V                  !                |                                   1     |
 1702.  V                  !pblsib(i,2,5) = |radt(i,1) - ( hc(i) + ec(i) ) * -------- | * cci(i)
 1703.  V                  !                |                                   dt    |
 1704.  V                  !                 --                                     --
 1705.  V                  pblsib(i,2,5) = (radt(i,1) - ( hc(i) + ec(i) ) * dtc3xi ) * cci(i)
 1706.  V                  !
 1707.  V                  !                                         -(R/Cp)              --           --
 1708.  V                  !   dTm              g               sl(k)                    | hg(i) + hc(i) |
 1709.  V                  ! ------ =  0.01 * ------- * ------------------------------- *| --------------|
 1710.  V                  !   dt               cp        (P * (si(k) - si(k+1)))        |       dt      |
 1711.  V                  !                                                              --           --
 1712.  V                  !                                                                  --     --
 1713.  V                  !   dTm              m*kg*K                    1                  |   J     |
 1714.  V                  ! ------ =  0.01 * ----------- * ------------------------------- *| ------  |
 1715.  V                  !   dt              s^2*J                      Pa                 | m^2*s   |
 1716.  V                  !                                                                  --     --
 1717.  V                  !   dTm              m*kg*K                  m^2                  |   N*m   |
 1718.  V                  ! ------ =  0.01 * ----------- * ------------------------------- *| --------|
 1719.  V                  !   dt              s^2*N*m                   N                   | m^2*s   |
 1720.  V           
 1721.  V                  !   dTm              m*Kg*K*s^2         m^3
 1722.  V                  ! ------ =  0.01 * ------------- * ---------------
 1723.  V                  !   dt              s^2*kg*m*m          m^2*s
 1724.  V           
 1725.  V                  !   dTm                K            m
 1726.  V                  ! ------ =  0.01 * ------------- *-------
 1727.  V                  !   dt                 m            s
 1728.  V                  !
 1729.  V                  !   dTm             K
 1730.  V                  ! ------ =  0.01 * ----
 1731.  V                  !   dt              s
 1732.  V           
 1733.  V                  !
 1734.  V                  !                                               -(R/Cp)              --           --
 1735.  V                  !                          g               sl(k)                    | hg(i) + hc(i) |
 1736.  V                  ! pblsib(i,3,5) = 0.01 * ------- * ------------------------------- *| --------------|
 1737.  V                  !                          cp        (P * (si(k) - si(k+1)))        |       dt      |
 1738.  V                  !                                                                    --           --
 1739.  V                  !
 1740.  V                  pblsib(i,3,5) =  gmt(i,3) + ak(i) * ( hg(i) + hc(i) ) * dtc3xi
 1741.  V                  !
 1742.  V                  !                                                             --           --
 1743.  V                  !                         g                1                 | eg(i) + ec(i) |
 1744.  V                  !pblsib(i,4,5) = 0.01 * ------ * ------------------------- * | --------------|
 1745.  V                  !                         hl       (P * (si(k) - si(k+1)))   |       dt      |
 1746.  V                  !                                                             --           --
 1747.  V                  !
 1748.  V                  pblsib(i,4,5) =  gmq(i,3) + ah(i) * ( eg(i) + ec(i) ) * dtc3xi
 1749.  V--------->     END DO
 1750.                  !
 1751.                  !     solve 4 x 5 matrix equation
 1752.                  !
 1753.  V---------<     DO i = 1, nmax
 1754.  V                  pblsib(i,2,2) =  pblsib(i,2,2) - pblsib(i,2,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1755.  V                  pblsib(i,2,3) =  pblsib(i,2,3) - pblsib(i,2,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1756.  V                  pblsib(i,2,4) =  pblsib(i,2,4) - pblsib(i,2,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1757.  V                  pblsib(i,2,5) =  pblsib(i,2,5) - pblsib(i,2,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1758.  V                  pblsib(i,3,2) =  pblsib(i,3,2) - pblsib(i,3,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1759.  V                  pblsib(i,3,3) =  pblsib(i,3,3) - pblsib(i,3,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1760.  V                  pblsib(i,3,4) =  pblsib(i,3,4) - pblsib(i,3,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1761.  V                  pblsib(i,3,5) =  pblsib(i,3,5) - pblsib(i,3,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1762.  V                  pblsib(i,4,2) =  pblsib(i,4,2) - pblsib(i,4,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1763.  V                  pblsib(i,4,3) =  pblsib(i,4,3) - pblsib(i,4,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1764.  V                  pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1765.  V                  pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1766.  V                  pblsib(i,3,3) =  pblsib(i,3,3) - pblsib(i,3,2) * ( pblsib(i,2,3) / pblsib(i,2,2) )
 1767.  V                  pblsib(i,3,4) =  pblsib(i,3,4) - pblsib(i,3,2) * ( pblsib(i,2,4) / pblsib(i,2,2) )
 1768.  V                  pblsib(i,3,5) =  pblsib(i,3,5) - pblsib(i,3,2) * ( pblsib(i,2,5) / pblsib(i,2,2) )
 1769.  V                  pblsib(i,4,3) =  pblsib(i,4,3) - pblsib(i,4,2) * ( pblsib(i,2,3) / pblsib(i,2,2) )
 1770.  V                  pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,2) * ( pblsib(i,2,4) / pblsib(i,2,2) )
 1771.  V                  pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,2) * ( pblsib(i,2,5) / pblsib(i,2,2) )
 1772.  V                  pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,3) * ( pblsib(i,3,4) / pblsib(i,3,3) )
 1773.  V                  pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,3) * ( pblsib(i,3,5) / pblsib(i,3,3) )
 1774.  V           
 1775.  V                  pblsib(i,4,5) =     pblsib(i,4,5) / pblsib(i,4,4)
 1776.  V           
 1777.  V                  pblsib(i,3,5) =   ( pblsib(i,3,5) / pblsib(i,3,3) ) &
 1778.  V                       - ( pblsib(i,3,4) / pblsib(i,3,3) ) * pblsib(i,4,5)
 1779.  V           
 1780.  V                  pblsib(i,2,5) =   ( pblsib(i,2,5) / pblsib(i,2,2) ) &
 1781.  V                       - ( pblsib(i,2,4) / pblsib(i,2,2) ) * pblsib(i,4,5) &
 1782.  V                       - ( pblsib(i,2,3) / pblsib(i,2,2) ) * pblsib(i,3,5)
 1783.  V           
 1784.  V                  pblsib(i,1,5) =   ( pblsib(i,1,5) / pblsib(i,1,1) ) &
 1785.  V                       - ( pblsib(i,1,4) / pblsib(i,1,1) ) * pblsib(i,4,5) &
 1786.  V                       - ( pblsib(i,1,3) / pblsib(i,1,1) ) * pblsib(i,3,5) &
 1787.  V                       - ( pblsib(i,1,2) / pblsib(i,1,1) ) * pblsib(i,2,5)
 1788.  V--------->     END DO
 1789.  V---------<     DO i = 1, nmax
 1790.  V                  dtg(i) = pblsib(i,1,5) * dtc3x
 1791.  V                  dtc(i) = pblsib(i,2,5) * dtc3x
 1792.  V                  dtm(i) = pblsib(i,3,5) * dtc3x
 1793.  V                  dqm(i) = pblsib(i,4,5) * dtc3x
 1794.  V                  hc (i) = hc(i) + dtc3x * ( hcdtc(i) * dtc(i) + hcdtg(i) * dtg(i) + hcdtm(i) * dtm(i) )
 1795.  V                  hg (i) = hg(i) + dtc3x * ( hgdtc(i) * dtc(i) + hgdtg(i) * dtg(i) + hgdtm(i) * dtm(i) )
 1796.  V                  !
 1797.  V                  !     check if interception loss term has exceeded canopy storage
 1798.  V                  !
 1799.  V                  ecpot(i)=( etc(i) - ea(i) ) + ( btc(i) - deadtc(i) ) * dtc(i) &
 1800.  V                       -deadtg(i) * dtg(i) - deadqm(i) * dqm(i)
 1801.  V                  egpot(i)=( etg(i) - ea(i) ) + ( btg(i) - deadtg(i) ) * dtg(i) &
 1802.  V                       -deadtc(i) * dtc(i) - deadqm(i) * dqm(i)
 1803.  V--------->     END DO
 1804.                  !----------------------------------------------------------------------
 1805.                  !     EVAPORATION LOSSES ARE EXPRESSED IN J M-2 : WHEN DIVIDED BY
 1806.                  !     ( hl*1000.) LOSS IS IN M M-2 (hl(J/kg))(1 J/kg ==> 1000J/m-3)
 1807.                  !     MASS TERMS ARE IN KG M-2 DT-1
 1808.                  !----------------------------------------------------------------------
 1809.                  hlat3=1.0e+03_r8*hl
 1810.  V---------<     DO i = 1, nmax
 1811.  V                  eci   (i) = ecpot(i) * wc(i) * psyi(i) / ( 2.0_r8 * rb(i) ) * dtc3x
 1812.  V                  ecidif(i) = MAX( 0.0_r8   , eci(i) - capac(i,1) * hlat3 )
 1813.  V                  hc    (i) = hc(i) + ecidif(i)
 1814.  V                  eci   (i) = MIN( eci(i) , capac(i,1) * hlat3 )
 1815.  V                  egi   (i) = egpot(i) * vcover2(i,2) * wg(i) * psyi(i) / rd(i)*dtc3x
 1816.  V                  egidif(i) = MAX( 0.0_r8 , egi(i) - capac(i,2) * hlat3 )
 1817.  V                  hg    (i) = hg(i) + egidif(i)
 1818.  V                  egi   (i) = MIN( egi(i) , capac(i,2) * hlat3 )
 1819.  V                  !
 1820.  V                  !     evaporation is given in j m-2, calculated from gradients
 1821.  V                  !
 1822.  V                  rsurf     = rsoil(i) * fg(i)
 1823.  V                  coct      = ( 1.0_r8 - wc(i) )/rc(i)
 1824.  V                  cogt      = vcover2(i,2) * ( 1.0_r8 - wg(i) ) / ( rg(i) + rd(i) )
 1825.  V                  cogs1     = ( 1.0_r8 - vcover2(i,2) ) * hr(i)/( rd(i) + rsurf ) &
 1826.  V                       + vcover2(i,2) / ( rd(i) + rsurf + 44.0_r8 ) * hr(i)
 1827.  V                  cogs2     = cogs1/hr(i)
 1828.  V                  ect  (i)  = ecpot(i)*coct*psyi(i)*dtc3x
 1829.  V                  ec   (i)  = eci(i)+ect(i)
 1830.  V                  egt  (i)  = egpot(i)*cogt*psyi(i)*dtc3x
 1831.  V                  egs  (i)  = (etg(i)+btg(i)*dtg(i))*cogs1    &
 1832.  V                       -(ea(i)+deadtg(i)*dtg(i)+deadtc(i)*dtc(i)+deadqm(i)*dqm(i) &
 1833.  V                       )   *cogs2
 1834.  V                  egs  (i)  = egs(i)*psyi(i)*dtc3x
 1835.  V                  eg   (i)  = egt(i)+egs(i)+egi(i)
 1836.  V                  !vcover2(i,2)=xcover(itype(i),mon(i),2)
 1837.  V--------->     END DO
 1838.                  !
 1839.                  !     test of dew condition. recalculation ensues if necessary.
 1840.                  !
 1841.  1---------<     DO i = 1, nmax
 1842.  1                  radt(i,1) = radt(i,1) - rcdtc(i) * dtc(i) - rcdtg(i) * dtg(i)
 1843.  1                  radt(i,2) = radt(i,2) - rgdtc(i) * dtc(i) - rgdtg(i) * dtg(i)
 1844.  1                  ecf    = SIGN(1.0_r8   ,ecpot(i)) * ( fc(i) * 2.0_r8 - 1.0_r8 )
 1845.  1                  egf    = SIGN(1.0_r8   ,egpot(i)) * ( fg(i) * 2.0_r8 - 1.0_r8 )
 1846.  1                  IF ( ecf <= 0.0_r8 ) THEN
 1847.  1                     hc (i) = hc(i) + eci(i) + ect(i)
 1848.  1                     eci(i) = 0.0_r8
 1849.  1                     ect(i) = 0.0_r8
 1850.  1                     ec (i) = 0.0_r8
 1851.  1                  END IF
 1852.  1                  IF (egf    <= 0.0_r8) THEN
 1853.  1                     hg (i) = hg(i)+egi(i)+egt(i)+egs(i)
 1854.  1                     egi(i) = 0.0_r8
 1855.  1                     egt(i) = 0.0_r8
 1856.  1                     egs(i) = 0.0_r8
 1857.  1                     eg (i) = 0.0_r8
 1858.  1                  END IF
 1859.  1--------->     END DO
 1860.                END SUBROUTINE temres
 1861.              
 1862.              
 1863.              
 1864.                ! cut    :performs vapor pressure calculation at level "a".
 1865.              
 1866.              
 1867.              
 1868.                SUBROUTINE cut( &
 1869.                     icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 1870.                     ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 1871.                     rsoil ,vcover,nmax  ,ncols )
 1872.                  !
 1873.                  !-----------------------------------------------------------------------
 1874.                  !-----------------------------------------------------------------------
 1875.                  ! input parameters
 1876.                  !   fc      fg      hr      wc      wg      rhoair  cp
 1877.                  !   rst     ra      rb      rg      rd      rsurf   vcover
 1878.                  !   etc     etg     em
 1879.                  !-----------------------------------------------------------------------
 1880.                  ! output parameters
 1881.                  !   ea
 1882.                  !-----------------------------------------------------------------------
 1883.                  ! ncols......Numero de ponto por faixa de latitude
 1884.                  ! icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 1885.                  ! cp.........specific heat of air (j/kg/k)
 1886.                  ! nmax.......
 1887.                  ! vcover(iv).Fracao de cobertura da vegetacao iv=1 topo ()
 1888.                  ! vcover(iv).Fracao de cobertura da vegetacao iv=2 bottom ()
 1889.                  ! ra.........Resistencia Aerodinamica (s/m)
 1890.                  ! rb.........bulk boundary layer resistance             (s/m)
 1891.                  ! rd.........aerodynamic resistance between ground
 1892.                  !            and canopy air space                       (s/m)
 1893.                  ! rc.........Resistencia do topo da copa
 1894.                  ! rg.........Resistencia da base da copa
 1895.                  ! ea.........Pressao de vapor
 1896.                  ! etc........Pressao de vapor no topo da copa
 1897.                  ! etg........Pressao de vapor no base da copa
 1898.                  ! rst........Resistencia stomatal (s/m)
 1899.                  ! rsoil......Resistencia do solo (s/m)
 1900.                  ! em.........Pressao de vapor da agua
 1901.                  ! rhoair.....Desnsidade do ar
 1902.                  ! rcp........densidade do ar vezes o calor especifico do ar
 1903.                  ! wc.........Minimo entre 1 e a razao entre a agua interceptada pelo
 1904.                  !            indice de area foliar no topo da copa
 1905.                  ! wg.........Minimo entre 1 e a razao entre a agua interceptada pelo
 1906.                  !             indice de area foliar na parte inferior da copa
 1907.                  ! fc.........Condicao de oravalho 0 ou 1 no topo da copa
 1908.                  ! fg.........Condicao de oravalho 0 ou 1 na base da copa
 1909.                  ! hr.........Rel. humidity in top layer
 1910.                  ! icheck
 1911.                  !-----------------------------------------------------------------------
 1912.                  INTEGER, INTENT(in   ) :: ncols
 1913.                  INTEGER, INTENT(in   ) :: nmax
 1914.                  REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 1915.                  !
 1916.                  !     variables calculated from above and ambient conditions
 1917.                  !
 1918.                  REAL(KIND=r8),    INTENT(in   ) :: ra    (ncols)
 1919.                  REAL(KIND=r8),    INTENT(in   ) :: rb    (ncols)
 1920.                  REAL(KIND=r8),    INTENT(in   ) :: rd    (ncols)
 1921.                  REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 1922.                  REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 1923.                  REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 1924.                  REAL(KIND=r8),    INTENT(in   ) :: etc   (ncols)
 1925.                  REAL(KIND=r8),    INTENT(in   ) :: etg   (ncols)
 1926.                  REAL(KIND=r8),    INTENT(in   ) :: rst   (ncols,icg)
 1927.                  REAL(KIND=r8),    INTENT(in   ) :: rsoil (ncols)
 1928.                  !
 1929.                  !     this is for coupling with closure turbulence model
 1930.                  !
 1931.                  REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 1932.                  REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 1933.                  REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 1934.                  REAL(KIND=r8),    INTENT(in   ) :: wc    (ncols)
 1935.                  REAL(KIND=r8),    INTENT(in   ) :: wg    (ncols)
 1936.                  REAL(KIND=r8),    INTENT(in   ) :: fc    (ncols)
 1937.                  REAL(KIND=r8),    INTENT(in   ) :: fg    (ncols)
 1938.                  REAL(KIND=r8),    INTENT(in   ) :: hr    (ncols)
 1939.                  INTEGER, INTENT(in   ) :: icheck(ncols)
 1940.              
 1941.                  REAL(KIND=r8) :: coc
 1942.                  REAL(KIND=r8) :: rsurf
 1943.                  REAL(KIND=r8) :: cog1
 1944.                  REAL(KIND=r8) :: cog2
 1945.                  REAL(KIND=r8) :: d2
 1946.                  REAL(KIND=r8) :: top
 1947.                  REAL(KIND=r8) :: xnum
 1948.                  REAL(KIND=r8) :: tem
 1949.                  INTEGER :: i
 1950.              
 1951.  1---------<     DO i = 1, nmax
 1952.  1                  IF (icheck(i) == 1) THEN
 1953.  1                     rcp  (i) = rhoair(i)*cp
 1954.  1                     rc   (i) = rst(i,1)*fc(i)+rb(i)+rb(i)*fc(i)
 1955.  1                     coc      = (1.0_r8 -wc(i))/rc(i)+wc(i)/(2.0_r8 *rb(i))
 1956.  1                     rg   (i) = rst(i,2)*fg(i)
 1957.  1                     rsurf    = rsoil(i)*fg(i)
 1958.  1                     tem      = vcover(i,2)*(1.0_r8-wg(i))/(rg(i)+rd(i))
 1959.  1                     cog2     = tem    &
 1960.  1                          + (1.0_r8 -vcover(i,2))/(rsurf   +rd(i)) &
 1961.  1                          + vcover(i,2)/(rsurf   +rd(i)+44.0_r8)
 1962.  1                     cog1     = (cog2   -tem   )*hr(i)+tem
 1963.  1                     xnum     = wg(i)/rd(i)*vcover(i,2)
 1964.  1                     cog1     = cog1   +xnum
 1965.  1                     cog2     = cog2   +xnum
 1966.  1                     d2       = 1.0_r8 /ra(i)+coc+cog2
 1967.  1                     top      = coc*etc(i)+em(i)/ra(i)+cog1   *etg(i)
 1968.  1                     !
 1969.  1                     !     vapor pressure at level "a"
 1970.  1                     !
 1971.  1                     ea (i)  = top   /d2
 1972.  1                  END IF
 1973.  1--------->     END DO
 1974.                END SUBROUTINE cut
 1975.              
 1976.              
 1977.              
 1978.                ! rbrd   :calculates bulk boundary layer resistance and aerodynamic
 1979.                !         resistence betweenground and canopi air space4 as functions
 1980.                !         of wind speed at top of canopy and temperatures.
 1981.              
 1982.              
 1983.              
 1984.                SUBROUTINE rbrd(rb    ,rd    ,tcta  ,tgta  ,u2    ,tg    ,rdc   ,rbc   ,itype , &
 1985.                     z2    ,mon   ,nmax  ,ncols , zlt2)
 1986.                  !
 1987.                  !
 1988.                  !         rb and rd as functions of u2 and temperatures. simplified( xue et
 1989.                  !         al. 1991)
 1990.                  !
 1991.                  !-----------------------------------------------------------------------
 1992.                  !       input parameters
 1993.                  !-----------------------------------------------------------------------
 1994.                  !   tcta..........diferenca entre tc-ta                      (k)
 1995.                  !   tgta..........diferenca entre tg-ta                      (k)
 1996.                  !   tg............ground temperature                         (k)
 1997.                  !   u2............wind speed at top of canopy                (m/s)
 1998.                  !   z2............height of canopy top                       (m)
 1999.                  !   zlt(cg).......canopy/ground cover leaf and stem area density
 2000.                  !                                                            (m**2/m**3)
 2001.                  !   rbc...........constant related to bulk boundary layer
 2002.                  !                 resistance
 2003.                  !   rdc...........constant related to aerodynamic resistance
 2004.                  !                 between ground and canopy air space
 2005.                  !-----------------------------------------------------------------------
 2006.                  !      output parameters
 2007.                  !-----------------------------------------------------------------------
 2008.                  !   rb............bulk boundary layer resistance             (s/m)
 2009.                  !   rd............aerodynamic resistance between ground      (s/m)
 2010.                  !                 and canopy air space
 2011.                  !-----------------------------------------------------------------------
 2012.                  !   ncols.........Numero de ponto por faixa de latitude
 2013.                  !   ityp..........numero das classes de solo 13
 2014.                  !   imon...........Numero maximo de meses no ano (12)
 2015.                  !   icg...........Parametros da vegetacao (icg=1 topo e icg=2 base)
 2016.                  !   mon...........Numero do mes do ano (1-12)
 2017.                  !   nmax .........
 2018.                  !   itype.........Classe de textura do solo
 2019.                  !=======================================================================
 2020.                  INTEGER, INTENT(in   ) :: ncols
 2021.                  INTEGER, INTENT(in   ) :: mon (ncols)
 2022.                  INTEGER, INTENT(in   ) :: nmax
 2023.                  !
 2024.                  !     vegetation and soil parameters
 2025.                  !
 2026.                  REAL(KIND=r8),    INTENT(in   ) :: z2    (ityp,imon)
 2027.                  INTEGER, INTENT(in   ) :: itype (ncols)
 2028.                  REAL(KIND=r8),    INTENT(in   ) :: rdc   (ncols)
 2029.                  REAL(KIND=r8),    INTENT(in   ) :: rbc   (ncols)
 2030.                  !
 2031.                  !     prognostic variables
 2032.                  !
 2033.                  REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2034.                  !
 2035.                  !     variables calculated from above and ambient conditions
 2036.                  !
 2037.                  REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 2038.                  REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 2039.                  REAL(KIND=r8),    INTENT(in   ) :: tcta  (ncols)
 2040.                  REAL(KIND=r8),    INTENT(in   ) :: tgta  (ncols)
 2041.                  REAL(KIND=r8),    INTENT(in   ) :: u2    (ncols)
 2042.                  REAL(KIND=r8),    INTENT(in  ) :: zlt2(ncols,icg)
 2043.              
 2044.                  REAL(KIND=r8) :: temdif(ncols)
 2045.                  REAL(KIND=r8) :: fih   (ncols)
 2046.              
 2047.                  REAL(KIND=r8), PARAMETER :: factg=88.29_r8
 2048.                  INTEGER :: i
 2049.                  INTEGER :: ntyp
 2050.              
 2051.  1---------<     DO i = 1, nmax
 2052.  1                  ntyp=itype(i)
 2053.  1                  IF (tcta(i) > 0.0_r8 ) THEN
 2054.  1                     temdif(i)=tcta(i)+0.1_r8
 2055.  1                  ELSE
 2056.  1                     temdif(i)=        0.1_r8
 2057.  1                  END IF
 2058.  1                  rb (i)=1.0_r8  /(SQRT(u2(i))/rbc(i)+zlt2(i,1)*0.004_r8 )
 2059.  1                  IF (tgta(i) > 0) THEN
 2060.  1                     temdif(i)=tgta(i)+0.1_r8
 2061.  1                  ELSE
 2062.  1                     temdif(i)=        0.1_r8
 2063.  1                  END IF
 2064.  1                  fih(i)=sqrt &
 2065.  1                       (1.0_r8 +factg*temdif(i)*z2(ntyp,mon(i))/(tg(i)*u2(i)*u2(i)))
 2066.  1                  rd(i) =rdc(i)/(u2(i)*fih(i))
 2067.  1--------->     END DO
 2068.                END SUBROUTINE rbrd
 2069.              
 2070.              
 2071.              
 2072.                ! vntlax :performs ventilation mass flux, based on deardorff, mwr, 1972?.
 2073.              
 2074.              
 2075.                SUBROUTINE vntlax(ustarn, &
 2076.                     icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 2077.                     u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 2078.                     mon   ,nmax  ,jstneu,ncols )
 2079.                  !
 2080.                  !
 2081.                  !-----------------------------------------------------------------------
 2082.                  !         input parameters
 2083.                  !-----------------------------------------------------------------------
 2084.                  !
 2085.                  !   ea..........Pressao de vapor
 2086.                  !   ta..........Temperatura no nivel de fonte de calor do dossel (K)
 2087.                  !   um..........Razao entre zonal pseudo-wind (fourier) e seno da
 2088.                  !               colatitude
 2089.                  !   vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 2090.                  !               colatitude
 2091.                  !   qm..........specific humidity of reference (fourier)
 2092.                  !   tm..........Temperature of reference (fourier)
 2093.                  !   dzm  .......Altura media de referencia  para o vento para o calculo
 2094.                  !               da estabilidade do escoamento
 2095.                  !   grav........gravity constant      (m/s**2)
 2096.                  !   cpair.......specific heat of air (j/kg/k)
 2097.                  !   gasr........gas constant of dry air      (j/kg/k)
 2098.                  !   bps ........
 2099.                  !   z2..........height of canopy top
 2100.                  !   d...........displacement height                        (m)
 2101.                  !   epsfac......parametro para o gas 0.622
 2102.                  !
 2103.                  !
 2104.                  !
 2105.                  !-----------------------------------------------------------------------
 2106.                  !        output parameters
 2107.                  !-----------------------------------------------------------------------
 2108.                  !
 2109.                  !   ustar.........surface friction velocity  (m/s)
 2110.                  !   ra............Resistencia Aerodinamica (s/m)
 2111.                  !   u2............wind speed at top of canopy                (m/s)
 2112.                  !   ventmf........ventilation mass flux
 2113.                  !-----------------------------------------------------------------------
 2114.                  !=======================================================================
 2115.                  !   ncols........Numero de ponto por faixa de latitude
 2116.                  !   ityp.........Numero do tipo de solo
 2117.                  !   imon.........Numero maximo de meses no ano (12)
 2118.                  !   jstneu.......The first call to vntlat just gets the neutral values
 2119.                  !                of ustar and ventmf para jstneu=.TRUE..
 2120.                  !   mon..........Numero do mes do ano (1-12)
 2121.                  !   nmax.........
 2122.                  !   itype........Classe de textura do solo
 2123.                  !   z0...........roughness length
 2124.                  !   bps..........bps   (i)=sigki(1)=1.0e0/EXP(akappa*LOG(sig(k)))
 2125.                  !   cu...........friction  transfer coefficients.
 2126.                  !   ct...........heat transfer coefficients.
 2127.                  !   cuni.........neutral friction transfer  coefficients.
 2128.                  !   ctni.........neutral heat transfer coefficients.
 2129.                  !   icheck.......this version assumes dew-free conditions "icheck=1" to
 2130.                  !                estimate ea for buoyancy term in vntmf or ra.
 2131.                  !=======================================================================
 2132.                  INTEGER, INTENT(in   ) :: ncols
 2133.              
 2134.                  LOGICAL, INTENT(in   ) :: jstneu
 2135.                  INTEGER, INTENT(in   ) :: mon(ncols)
 2136.                  INTEGER, INTENT(in   ) :: nmax
 2137.                  !
 2138.                  !     vegetation and soil parameters
 2139.                  !
 2140.                  REAL(KIND=r8),    INTENT(in   ) :: z2    (ityp,imon)
 2141.                  INTEGER, INTENT(in   ) :: itype (ncols)
 2142.                  REAL(KIND=r8),    INTENT(in   ) :: d     (ncols)
 2143.                  REAL(KIND=r8),    INTENT(in   ) :: z0    (ncols)
 2144.                  !
 2145.                  !     the size of working area is ncols*187
 2146.                  !     atmospheric parameters as boudary values for sib
 2147.                  !
 2148.                  REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 2149.                  REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 2150.                  REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 2151.                  !
 2152.                  !     variables calculated from above and ambient conditions
 2153.                  !
 2154.                  REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 2155.                  REAL(KIND=r8),    INTENT(in   ) :: ta    (ncols)
 2156.                  REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 2157.                  !
 2158.                  !     this is for coupling with closure turbulence model
 2159.                  !
 2160.                  REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 2161.                  REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 2162.                  REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 2163.                  REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 2164.                  REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 2165.                  REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 2166.                  INTEGER, INTENT(in   ) :: icheck(ncols)
 2167.                  REAL(KIND=r8),    INTENT(inout) :: ustarn(ncols)
 2168.              
 2169.              
 2170.                  !REAL(KIND=r8) :: thm(ncols)      !**(JP)** scalar
 2171.                  REAL(KIND=r8) :: thm
 2172.                  !REAL(KIND=r8) :: ros(ncols)      !**(JP)** unused
 2173.                  REAL(KIND=r8) :: speedm(ncols)
 2174.                  !REAL(KIND=r8) :: thvgm(ncols)    !**(JP)** scalar
 2175.                  REAL(KIND=r8) :: thvgm
 2176.                  !REAL(KIND=r8) :: rib(ncols)      !**(JP)** scalar
 2177.                  REAL(KIND=r8) :: rib
 2178.                  !REAL(KIND=r8) :: cui(ncols)      !**(JP)** scalar
 2179.                  REAL(KIND=r8) :: cui
 2180.                  !REAL(KIND=r8) :: ran(ncols)      !**(JP)** unused
 2181.                  !REAL(KIND=r8) :: cti(ncols)      !**(JP)** scalar
 2182.                  REAL(KIND=r8) :: cti
 2183.                  !REAL(KIND=r8) :: ct      (ncols)      !**(JP)** unused
 2184.              
 2185.                  REAL(KIND=r8), PARAMETER ::  vkrmn=0.40_r8
 2186.                  REAL(KIND=r8), PARAMETER ::  fsc=66.85_r8
 2187.                  REAL(KIND=r8), PARAMETER ::  ftc=0.904_r8
 2188.                  REAL(KIND=r8), PARAMETER ::  fvc=0.315_r8
 2189.                  REAL(KIND=r8) :: rfac
 2190.                  REAL(KIND=r8) :: vkrmni
 2191.                  REAL(KIND=r8) :: g2
 2192.                  REAL(KIND=r8) :: zl
 2193.                  REAL(KIND=r8) :: xct1
 2194.                  REAL(KIND=r8) :: xct2
 2195.                  REAL(KIND=r8) :: xctu1
 2196.                  REAL(KIND=r8) :: xctu2
 2197.                  REAL(KIND=r8) :: grib
 2198.                  REAL(KIND=r8) :: grzl
 2199.                  REAL(KIND=r8) :: grz2
 2200.                  REAL(KIND=r8) :: fvv
 2201.                  REAL(KIND=r8) :: ftt
 2202.                  REAL(KIND=r8) :: rzl
 2203.                  REAL(KIND=r8) :: rz2
 2204.                  INTEGER :: i
 2205.                  INTEGER :: ntyp
 2206.              
 2207.              
 2208.                  rfac  =1.0e2_r8 /gasr
 2209.              
 2210.                  vkrmni=1.0_r8  /vkrmn
 2211.                  g2 = 0.75_r8
 2212.              
 2213.  1---------<     DO i = 1, nmax
 2214.  1                  IF (icheck(i) == 1) THEN
 2215.  1                     speedm(i)=SQRT(um(i)**2+vm(i)**2)
 2216.  1                     speedm(i)=MAX(2.0_r8  ,speedm(i))
 2217.  1                  END IF
 2218.  1--------->     END DO
 2219.                  !
 2220.                  !     cu and ct are the friction and heat transfer coefficients.
 2221.                  !     cun and ctn are the neutral friction and heat transfer
 2222.                  !     coefficients.
 2223.                  !
 2224.                  IF (jstneu) THEN
 2225.  1---------<        DO i = 1, nmax
 2226.  1                     ntyp=itype(i)
 2227.  1                     zl = z2(ntyp,mon(i)) + 11.785_r8  * z0(i)
 2228.  1                     cuni(i)=LOG((dzm(i)-d(i))/z0(i))*vkrmni
 2229.  1                     ustarn(i)=speedm(i)/cuni(i)
 2230.  1                     IF (zl < dzm(i)) THEN
 2231.  1                        xct1 = LOG((dzm(i)-d(i))/(zl-d(i)))
 2232.  1                        xct2 = LOG((zl-d(i))/z0(i))
 2233.  1                        xctu1 = xct1
 2234.  1                        xctu2 = LOG((zl-d(i))/(z2(ntyp,mon(i))-d(i)))
 2235.  1                        ctni(i) = (xct1 + g2 * xct2) *vkrmni
 2236.  1                     ELSE
 2237.  1                        xct2 =  LOG((dzm(i)-d(i))/z0(i))
 2238.  1                        xctu1 =  0.0_r8
 2239.  1                        xctu2 =  LOG((dzm(i)-d(i))/(z2(ntyp,mon(i))-d(i)))
 2240.  1                        ctni(i) = g2 * xct2 *vkrmni
 2241.  1                     END IF
 2242.  1                     !
 2243.  1                     !     neutral values of ustar and ventmf
 2244.  1                     !
 2245.  1                     u2(i) = speedm(i) - ustarn(i)*vkrmni*(xctu1 + g2*xctu2)
 2246.  1--------->        END DO
 2247.                     RETURN
 2248.                  END IF
 2249.                  !
 2250.                  !     stability branch based on bulk richardson number.
 2251.                  !
 2252.  1---------<     DO i = 1, nmax
 2253.  1                  IF (icheck(i) == 1) THEN
 2254.  1                     !
 2255.  1                     !     freelm(i)=.false.
 2256.  1                     !
 2257.  1                     thm= tm(i)*bps(i)
 2258.  1                     ntyp=itype(i)
 2259.  1                     zl = z2(ntyp,mon(i)) + 11.785_r8  * z0(i)
 2260.  1                     thvgm   = ta(i)-thm
 2261.  1                     rib     =-thvgm   *grav*(dzm(i)-d(i)) &
 2262.  1                          /(thm*(speedm(i)-u2(i))**2)
 2263.  1                     ! Manzi Suggestion:
 2264.  1                     ! rib   (i)=max(-10.0_r8  ,rib(i))
 2265.  1                     rib      =MAX(-1.5_r8  ,rib   )
 2266.  1                     rib      =MIN( 0.165_r8  ,rib   )
 2267.  1                     IF (rib    < 0.0_r8) THEN
 2268.  1                        grib = -rib
 2269.  1                        grzl = -rib   * (zl-d(i))/(dzm(i)-d(i))
 2270.  1                        grz2 = -rib   * z0(i)/(dzm(i)-d(i))
 2271.  1                        fvv = fvc*grib
 2272.  1                        IF (zl < dzm(i)) THEN
 2273.  1                           ftt = (ftc*grib) + (g2-1.0_r8) * (ftc*grzl) - g2 * (ftc*grz2)
 2274.  1                        ELSE
 2275.  1                           ftt = g2*((ftc*grib) - (ftc*grz2))
 2276.  1                        END IF
 2277.  1                        cui    = cuni(i) - fvv
 2278.  1                        cti    = ctni(i) - ftt
 2279.  1                     ELSE
 2280.  1                        rzl = rib   /(dzm(i)-d(i))*(zl-d(i))
 2281.  1                        rz2 = rib   /(dzm(i)-d(i))*z0(i)
 2282.  1                        fvv = fsc*rib
 2283.  1                        IF (zl < dzm(i)) THEN
 2284.  1                           ftt = (fsc*rib) + (g2-1) * (fsc*rzl) - g2 * (fsc*rz2)
 2285.  1                        ELSE
 2286.  1                           ftt = g2 * ((fsc*rib) - (fsc*rz2))
 2287.  1                        END IF
 2288.  1                        cui    = cuni(i) + fvv
 2289.  1                        cti    = ctni(i) + ftt
 2290.  1                     ENDIF
 2291.  1                     cu    (i)=1.0_r8/cui
 2292.  1                     !**(JP)** ct is not used anywhere else
 2293.  1                     !ct    (i)=1.0_r8/cti(i)
 2294.  1                     !
 2295.  1                     !
 2296.  1                     !     surface friction velocity and ventilation mass flux
 2297.  1                     !
 2298.  1                     ustar (i)=speedm(i)*cu(i)
 2299.  1                     ra(i) = cti    / ustar(i)
 2300.  1                     !**(JP)** ran is not used anywhere else
 2301.  1                     !ran(i) = ctni(i) / ustarn(i)
 2302.  1                     !ran(i) = MAX(ran(i), 0.8_r8 )
 2303.  1                     ra(i) = MAX(ra(i), 0.8_r8 )
 2304.  1                  END IF
 2305.  1--------->     END DO
 2306.                END SUBROUTINE vntlax
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 2306 
  Local variable "RFAC" is assigned a value but never used.

 2307.              
 2308.              
 2309.              
 2310.              
 2311.                ! runoff :performs inter-layer moisture exchanges.
 2312.              
 2313.              
 2314.              
 2315.                SUBROUTINE runoff( &
 2316.                     roff  ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols    )
 2317.                  !
 2318.                  !-----------------------------------------------------------------------
 2319.                  ! input parameters
 2320.                  !-----------------------------------------------------------------------
 2321.                  !   w(3)     roff     slope    bee      satco     zdepth
 2322.                  !   phsat    poros    pie      dtc3x    snomel
 2323.                  !   w(3)
 2324.                  !
 2325.                  !-----------------------------------------------------------------------
 2326.                  ! output parameters
 2327.                  !-----------------------------------------------------------------------
 2328.                  !   w(3)     roff
 2329.                  !-----------------------------------------------------------------------
 2330.                  !
 2331.                  ! roff.......Runoff (escoamente superficial e drenagem)(m)
 2332.                  ! slope......Inclinacao de perda hidraulica na camada profunda do solo
 2333.                  ! bee........Fator de retencao da umidade no solo (expoente da umidade do
 2334.                  !            solo)
 2335.                  ! satco......Condutividade hidraulica do solo saturado(m/s)
 2336.                  ! zdepth(id).Profundidade das camadas de solo id=1 superficial
 2337.                  ! zdepth(id).Profundidade das camadas de solo id=2 camada de raizes
 2338.                  ! zdepth(id).Profundidade das camadas de solo id=3 camada de drenagem
 2339.                  ! phsat......Potencial matricial do solo saturado(m) (tensao do solo em
 2340.                  !            saturacao)
 2341.                  ! poros......Porosidade do solo
 2342.                  ! pie........pi = 3.1415926e0
 2343.                  ! dtc3x......time increment dt
 2344.                  ! snomel.....Calor latente de fusao(J/kg)
 2345.                  ! w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 2346.                  ! w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 2347.                  ! w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 2348.                  ! capac(iv)..Agua interceptada iv=1 no dossel (m)
 2349.                  ! capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 2350.                  ! tg.........Temperatura da superficie do solo  (K)
 2351.                  ! td.........Temperatura do solo profundo (K)
 2352.                  ! itype......Classe de textura do solo
 2353.                  ! tf.........Temperatura de congelamento (K)
 2354.                  ! idp........Parametro para as camadas de solo idp=1->3
 2355.                  ! nmax.......
 2356.                  ! ncols......Numero de ponto por faixa de latitude
 2357.                  ! ityp.......13
 2358.                  !-----------------------------------------------------------------------
 2359.                  INTEGER, INTENT(in   ) :: ncols
 2360.              
 2361.                  REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 2362.                  INTEGER, INTENT(in   ) :: nmax
 2363.              
 2364.                  INTEGER, INTENT(in   ) :: itype (ncols)
 2365.                  !
 2366.                  !     prognostic variables
 2367.                  !
 2368.                  REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2369.                  REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 2370.                  REAL(KIND=r8),    INTENT(in   ) :: capac(ncols,2)
 2371.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 2372.                  !
 2373.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 2374.                  !
 2375.                  REAL(KIND=r8),    INTENT(inout) :: roff (ncols)
 2376.              
 2377.                  REAL(KIND=r8)    :: q3g   (ncols)
 2378.                  REAL(KIND=r8)    :: div   (ncols)
 2379.                  REAL(KIND=r8)    :: twi   (ncols,3)
 2380.                  REAL(KIND=r8)    :: twip  (ncols,3)
 2381.                  REAL(KIND=r8)    :: twipp (ncols,3)
 2382.                  REAL(KIND=r8)    :: avk   (ncols)
 2383.                  REAL(KIND=r8)    :: aaa_1, aaa_2
 2384.                  REAL(KIND=r8)    :: bbb_1, bbb_2
 2385.                  REAL(KIND=r8)    :: ccc_1, ccc_2
 2386.                  REAL(KIND=r8)    :: qqq_1, qqq_2
 2387.              
 2388.                  REAL(KIND=r8)    :: subdt
 2389.                  REAL(KIND=r8)    :: subdti
 2390.                  REAL(KIND=r8)    :: slop
 2391.                  REAL(KIND=r8)    :: pows
 2392.                  REAL(KIND=r8)    :: wmax
 2393.                  REAL(KIND=r8)    :: wmin
 2394.                  REAL(KIND=r8)    :: pmax
 2395.                  REAL(KIND=r8)    :: pmin
 2396.                  REAL(KIND=r8)    :: dpdw
 2397.                  REAL(KIND=r8)    :: rsame
 2398.                  REAL(KIND=r8)    :: tsnow
 2399.                  REAL(KIND=r8)    :: areas
 2400.                  REAL(KIND=r8)    :: tgs
 2401.                  REAL(KIND=r8)    :: ts
 2402.                  REAL(KIND=r8)    :: props
 2403.                  REAL(KIND=r8)    :: dpdwdz
 2404.                  REAL(KIND=r8)    :: denom
 2405.                  REAL(KIND=r8)    :: rdenom
 2406.                  REAL(KIND=r8)    :: qmax
 2407.                  REAL(KIND=r8)    :: qmin
 2408.                  REAL(KIND=r8)    :: excess
 2409.                  REAL(KIND=r8)    :: deficit
 2410.                  INTEGER :: n
 2411.                  INTEGER :: i
 2412.                  INTEGER :: ntyp
 2413.                  REAL(KIND=r8),    PARAMETER     :: smal2 = 1.0e-3_r8
 2414.              
 2415.                  subdt =dtc3x
 2416.                  subdti=1.0_r8 /dtc3x
 2417.  V--------<>     q3g=0.0_r8
 2418.                  !
 2419.                  !     eliinate negative soil moisture
 2420.                  !
 2421.  1---------<     DO n = 1, nmax
 2422.  1                  IF (w(n,1) < 0.0_r8) w(n,1)=smal2
 2423.  1                  IF (w(n,2) < 0.0_r8) w(n,2)=smal2
 2424.  1                  IF (w(n,3) < 0.0_r8) w(n,3)=smal2
 2425.  1--------->     END DO
 2426.              
 2427.  1---------<     DO i = 1, 3
 2428.  1 Vp------<        DO n = 1, nmax
 2429.  1 Vp                  ntyp      =itype(n)
 2430.  1 Vp                  twi(n,i)=MIN(1.0_r8, MAX(0.03_r8,w(n,i)))
 2431.  1 Vp                  twip(n,i) =EXP(-bee(ntyp)*LOG(twi(n,i)))
 2432.  1 Vp                  twipp(n,i)=EXP((2.0_r8*bee(ntyp)+3.0_r8)*LOG(MIN(1.0_r8,twi(n,i))))
 2433.  1 Vp------>        END DO
 2434.  1--------->     END DO
 2435.              
 2436.  1---------<     DO n = 1, nmax
 2437.  1                  ntyp = itype(n)
 2438.  1                  slop = 0.1736_r8
 2439.  1                  IF (poros(ntyp) == 0.4352_r8) slop = 0.0872_r8
 2440.  1                  IF (poros(ntyp) == 0.4577_r8) slop = 0.3420_r8
 2441.  1                  !
 2442.  1                  !     calculation of gravitationally driven drainage from w(3) : taken
 2443.  1                  !     as an integral of time varying conductivity.addition of liston
 2444.  1                  !     baseflow term to original q3g to insure flow in
 2445.  1                  !     dry season. modified liston baseflow constant scaled
 2446.  1                  !     by available water.
 2447.  1                  !
 2448.  1                  !     q3g (q3) : equation (62) , se-86
 2449.  1                  !
 2450.  1                  pows    = 2.0_r8 *bee(ntyp)+2.0_r8
 2451.  1                  q3g (n) = EXP(-pows*LOG(twi(n,3))) &
 2452.  1                       +satco(ntyp)/(zdepth(ntyp,3)*poros(ntyp))* &
 2453.  1                       slop*pows*subdt
 2454.  1                  q3g (n) = EXP(LOG(q3g(n))/pows)
 2455.  1                  q3g (n) =-(1.0_r8 /q3g(n)-w(n,3)) &
 2456.  1                       *poros(ntyp)*zdepth(ntyp,3)*subdti
 2457.  1                  q3g (n) = MAX(0.0_r8 ,q3g(n))
 2458.  1                  q3g (n) = MIN(q3g(n), w(n,3)*poros(ntyp)*zdepth(ntyp,3) &
 2459.  1                       *subdti)
 2460.  1                  q3g (n) = q3g(n)+0.002_r8*poros(ntyp)*zdepth(ntyp,3)*0.5_r8 &
 2461.  1                       /86400.0_r8*w(n,3)
 2462.  1--------->     END DO
 2463.                  !
 2464.                  !     calculation of inter-layer exchanges of water due to gravitation
 2465.                  !     and hydraulic gradient. the values of w(x) + dw(x) are used to
 2466.                  !     calculate the potential gradients between layers.
 2467.                  !     modified calculation of mean conductivities follows milly and
 2468.                  !     eagleson (1982 ), reduces recharge flux to top layer.
 2469.                  !
 2470.                  !      dpdw           : estimated derivative of soil moisture potential
 2471.                  !                       with respect to soil wetness. assumption of
 2472.                  !                       gravitational drainage used to estimate likely
 2473.                  !                       minimum wetness over the time step.
 2474.                  !
 2475.                  !      qqq  (q     )  : equation (61) , s-86
 2476.                  !             i,i+1
 2477.                  !            -
 2478.                  !      avk  (k     )  : equation (4.14) , milly and eagleson (1982)
 2479.                  !             i,i+1
 2480.                  !
 2481.  1---------<     DO n = 1, nmax
 2482.  1                  ntyp=itype(n)
 2483.  1                  wmax = MAX( w(n,1), w(n,2), w(n,3), 0.05_r8 )
 2484.  1                  wmax = MIN( wmax, 1.0_r8 )
 2485.  1                  pmax = EXP(-bee(ntyp)*LOG(wmax))
 2486.  1                  wmin = EXP(-1.0_r8/bee(ntyp)*LOG(pmax-2.0_r8/(phsat(ntyp) &
 2487.  1                       *(zdepth(ntyp,1)+2.0_r8*zdepth(ntyp,2)+zdepth(ntyp,3)))))
 2488.  1                  wmin = MIN( w(n,1), w(n,2), w(n,3), wmin )
 2489.  1                  wmin = MAX( wmin, 0.02_r8 )
 2490.  1                  pmin = EXP(-bee(ntyp)*LOG(wmin))
 2491.  1                  dpdw = phsat(ntyp)*( pmax-pmin )/( wmax-wmin )
 2492.  1           
 2493.  1                  ! hand unrolling of next do loop, first iteration
 2494.  1           
 2495.  1                  rsame = 0.0_r8
 2496.  1                  avk(n)    =twip(n,1)*twipp(n,1)-twip(n,1+1)*twipp(n,1+1)
 2497.  1                  div(n)    =twip(n,1+1) - twip(n,1)
 2498.  1                  IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2499.  1                  avk(n)=satco(ntyp)*avk(n)/ &
 2500.  1                       ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2501.  1                  avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,1),twipp(n,1+1)))
 2502.  1                  avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2503.  1                       *MAX(twipp(n,1),twipp(n,1+1))))
 2504.  1                  !
 2505.  1                  !     conductivities and base flow reduced when temperature drops below
 2506.  1                  !     freezing
 2507.  1                  !
 2508.  1                  tsnow = MIN (tf-0.01_r8, tg(n))
 2509.  1                  areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2510.  1                  tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2511.  1                  ts  = tgs*(2-1) + td(n)*(1-1)
 2512.  1                  props = (ts-(tf-10.0_r8))/10.0_r8
 2513.  1                  props = MAX(0.05_r8,MIN(1.0_r8, props))
 2514.  1                  avk(n) = avk(n) * props
 2515.  1                  q3g(n) = q3g(n) * props
 2516.  1                  !
 2517.  1                  !     backward implicit calculation of flows between soil layers
 2518.  1                  !
 2519.  1                  dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,1) + zdepth(ntyp,1+1) )
 2520.  1                  aaa_1=1.0_r8+avk(n)*dpdwdz* &
 2521.  1                       (1.0_r8/zdepth(ntyp,1)+1.0_r8/zdepth(ntyp,1+1))      &
 2522.  1                       *subdt/poros(ntyp)
 2523.  1                  bbb_1 =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2524.  1                  ccc_1 = avk(n) * (dpdwdz * ( w(n,1)-w(n,1+1) )+1.0_r8+(1-1) &
 2525.  1                       *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2526.  1           
 2527.  1                  ! hand unrolling of next do loop, second iteration
 2528.  1           
 2529.  1                  rsame = 0.0_r8
 2530.  1                  avk(n)    =twip(n,2)*twipp(n,2)-twip(n,2+1)*twipp(n,2+1)
 2531.  1                  div(n)    =twip(n,2+1) - twip(n,2)
 2532.  1                  IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2533.  1                  avk(n)=satco(ntyp)*avk(n)/ &
 2534.  1                       ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2535.  1                  avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,2),twipp(n,2+1)))
 2536.  1                  avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2537.  1                       *MAX(twipp(n,2),twipp(n,2+1))))
 2538.  1                  !
 2539.  1                  !     conductivities and base flow reduced when temperature drops below
 2540.  1                  !     freezing
 2541.  1                  !
 2542.  1                  tsnow = MIN (tf-0.01_r8, tg(n))
 2543.  1                  areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2544.  1                  tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2545.  1                  ts  = tgs*(2-2) + td(n)*(2-1)
 2546.  1                  props = (ts-(tf-10.0_r8))/10.0_r8
 2547.  1                  props = MAX(0.05_r8,MIN(1.0_r8, props))
 2548.  1                  avk(n) = avk(n) * props
 2549.  1                  q3g(n) = q3g(n) * props
 2550.  1                  !
 2551.  1                  !     backward implicit calculation of flows between soil layers
 2552.  1                  !
 2553.  1                  dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,2) + zdepth(ntyp,2+1) )
 2554.  1                  aaa_2=1.0_r8+avk(n)*dpdwdz* &
 2555.  1                       (1.0_r8/zdepth(ntyp,2)+1.0_r8/zdepth(ntyp,2+1))      &
 2556.  1                       *subdt/poros(ntyp)
 2557.  1                  bbb_2 =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2558.  1                  ccc_2 = avk(n) * (dpdwdz * ( w(n,2)-w(n,2+1) )+1.0_r8+(2-1) &
 2559.  1                       *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2560.  1           
 2561.  1           
 2562.  1                  !       DO i = 1, 2
 2563.  1                  !          rsame = 0.0_r8
 2564.  1                  !          avk(n)    =twip(n,i)*twipp(n,i)-twip(n,i+1)*twipp(n,i+1)
 2565.  1                  !          div(n)    =twip(n,i+1) - twip(n,i)
 2566.  1                  !          IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2567.  1                  !          avk(n)=satco(ntyp)*avk(n)/ &
 2568.  1                  !               ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2569.  1                  !          avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,i),twipp(n,i+1)))
 2570.  1                  !          avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2571.  1                  !               *MAX(twipp(n,i),twipp(n,i+1))))
 2572.  1                  !          !
 2573.  1                  !          !     conductivities and base flow reduced when temperature drops below
 2574.  1                  !          !     freezing
 2575.  1                  !          !
 2576.  1                  !          tsnow = MIN (tf-0.01_r8, tg(n))
 2577.  1                  !          areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2578.  1                  !          tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2579.  1                  !          ts  = tgs*(2-i) + td(n)*(i-1)
 2580.  1                  !          props = (ts-(tf-10.0_r8))/10.0_r8
 2581.  1                  !          props = MAX(0.05_r8,MIN(1.0_r8, props))
 2582.  1                  !          avk(n) = avk(n) * props
 2583.  1                  !          q3g(n) = q3g(n) * props
 2584.  1                  !          !
 2585.  1                  !          !     backward implicit calculation of flows between soil layers
 2586.  1                  !          !
 2587.  1                  !          dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,i) + zdepth(ntyp,i+1) )
 2588.  1                  !          aaa(i)=1.0_r8+avk(n)*dpdwdz* &
 2589.  1                  !               (1.0_r8/zdepth(ntyp,i)+1.0_r8/zdepth(ntyp,i+1))      &
 2590.  1                  !               *subdt/poros(ntyp)
 2591.  1                  !          bbb(i) =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2592.  1                  !          ccc(i) = avk(n) * (dpdwdz * ( w(n,i)-w(n,i+1) )+1.0_r8+(i-1) &
 2593.  1                  !               *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2594.  1                  !       END DO
 2595.  1                  denom    = ( aaa_1*aaa_2 - bbb_1*bbb_2 )
 2596.  1                  rdenom   = 0.0_r8
 2597.  1                  IF (ABS(denom) < 1.e-6_r8 ) rdenom = 1.0_r8
 2598.  1                  rdenom   = ( 1.0_r8-rdenom)/( denom + rdenom )
 2599.  1                  qqq_1   = ( aaa_2*ccc_1 - bbb_1*ccc_2 ) * rdenom
 2600.  1                  qqq_2   = ( aaa_1*ccc_2 - bbb_2*ccc_1 ) * rdenom
 2601.  1                  !
 2602.  1                  !     update wetness of each soil moisture layer due to layer interflow
 2603.  1                  !     and base flow.
 2604.  1                  !
 2605.  1                  w(n,3)  = w(n,3) - q3g(n)*subdt/(poros(ntyp)*zdepth(ntyp,3))
 2606.  1                  roff(n) = roff(n) + q3g(n) * subdt
 2607.  1           
 2608.  1                  ! hand unrolling of next do loop, first iteration
 2609.  1           
 2610.  1                  qmax     =  w(n,1)   * (poros(ntyp)*zdepth(ntyp,1)  /subdt)
 2611.  1                  qmin     = -w(n,1+1) * (poros(ntyp)*zdepth(ntyp,1+1)/subdt)
 2612.  1                  qqq_1   =  MIN( qqq_1,qmax)
 2613.  1                  qqq_1   =  MAX( qqq_1,qmin)
 2614.  1                  w(n,1)   =  w(n,1)  -qqq_1/(poros(ntyp)*zdepth(ntyp,1) /subdt)
 2615.  1                  w(n,1+1) =  w(n,1+1)+ &
 2616.  1                       qqq_1/(poros(ntyp)*zdepth(ntyp,1+1)/subdt)
 2617.  1           
 2618.  1                  ! hand unrolling of next do loop, second iteration
 2619.  1           
 2620.  1                  qmax     =  w(n,2)   * (poros(ntyp)*zdepth(ntyp,2)  /subdt)
 2621.  1                  qmin     = -w(n,2+1) * (poros(ntyp)*zdepth(ntyp,2+1)/subdt)
 2622.  1                  qqq_2   =  MIN( qqq_2,qmax)
 2623.  1                  qqq_2   =  MAX( qqq_2,qmin)
 2624.  1                  w(n,2)   =  w(n,2)  -qqq_2/(poros(ntyp)*zdepth(ntyp,2) /subdt)
 2625.  1                  w(n,2+1) =  w(n,2+1)+ &
 2626.  1                       qqq_2/(poros(ntyp)*zdepth(ntyp,2+1)/subdt)
 2627.  1                  !     DO i = 1, 2
 2628.  1                  !        qmax     =  w(n,i)   * (poros(ntyp)*zdepth(ntyp,i)  /subdt)
 2629.  1                  !        qmin     = -w(n,i+1) * (poros(ntyp)*zdepth(ntyp,i+1)/subdt)
 2630.  1                  !        qqq(i)   =  MIN( qqq(i),qmax)
 2631.  1                  !        qqq(i)   =  MAX( qqq(i),qmin)
 2632.  1                  !        w(n,i)   =  w(n,i)  -qqq(i)/(poros(ntyp)*zdepth(ntyp,i) /subdt)
 2633.  1                  !        w(n,i+1) =  w(n,i+1)+ &
 2634.  1                  !             qqq(i)/(poros(ntyp)*zdepth(ntyp,i+1)/subdt)
 2635.  1                  !     END DO
 2636.  1           
 2637.  1                  ! hand unrolling of next do loop, first iteration
 2638.  1           
 2639.  1                  excess   = MAX(0.0_r8,(w(n,1) - 1.0_r8))
 2640.  1                  w(n,1)   = w(n,1) - excess
 2641.  1                  roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,1)
 2642.  1           
 2643.  1                  ! hand unrolling of next do loop, second iteration
 2644.  1           
 2645.  1                  excess   = MAX(0.0_r8,(w(n,2) - 1.0_r8))
 2646.  1                  w(n,2)   = w(n,2) - excess
 2647.  1                  roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,2)
 2648.  1           
 2649.  1                  ! hand unrolling of next do loop, third iteration
 2650.  1           
 2651.  1                  excess   = MAX(0.0_r8,(w(n,3) - 1.0_r8))
 2652.  1                  w(n,3)   = w(n,3) - excess
 2653.  1                  roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,3)
 2654.  1           
 2655.  1                  !     DO i = 1, 3
 2656.  1                  !        excess   = MAX(0.0_r8,(w(n,i) - 1.0_r8))
 2657.  1                  !        w(n,i)   = w(n,i) - excess
 2658.  1                  !        roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,i)
 2659.  1                  !     END DO
 2660.  1           
 2661.  1                  ! hand unrolling of next do loop, first iteration
 2662.  1           
 2663.  1                  deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,1)))
 2664.  1                  w(n,1)    = w(n,1) + deficit
 2665.  1                  w(n,1+1)  = w(n,1+1)-deficit*zdepth(ntyp,1)/zdepth(ntyp,1+1)
 2666.  1           
 2667.  1                  ! hand unrolling of next do loop, second iteration
 2668.  1           
 2669.  1                  deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,2)))
 2670.  1                  w(n,2)    = w(n,2) + deficit
 2671.  1                  w(n,2+1)  = w(n,2+1)-deficit*zdepth(ntyp,2)/zdepth(ntyp,2+1)
 2672.  1           
 2673.  1                  !
 2674.  1                  !     prevent negative values of www(i)
 2675.  1                  !
 2676.  1           
 2677.  1                  !       DO i = 1,2
 2678.  1                  !          deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,i)))
 2679.  1                  !          w(n,i)    = w(n,i) + deficit
 2680.  1                  !          w(n,i+1)  = w(n,i+1)-deficit*zdepth(ntyp,i)/zdepth(ntyp,i+1)
 2681.  1                  !       END DO
 2682.  1           
 2683.  1                  w(n,3)      = MAX (w(n,3),1.0e-12_r8)
 2684.  1--------->     END DO
 2685.                END SUBROUTINE runoff
 2686.              
 2687.              
 2688.                ! stres2 :calculates the adjustment to light dependent stomatal resistance
 2689.                !         by temperature, humidity and stress factors (simplified).
 2690.              
 2691.              
 2692.              
 2693.                SUBROUTINE stres2( &
 2694.                     icount,ft1   ,fp1   ,icheck,ta    ,ea    ,rst   ,phsoil,stm   , &
 2695.                     tc    ,tg    ,w     ,vcover,itype , &
 2696.                     rootd ,zdepth,nmax  ,ncols ,topt2 ,tll2  ,tu2   , &
 2697.                     defac2,ph12  ,ph22)
 2698.                  !
 2699.                  !
 2700.                  !-----------------------------------------------------------------------
 2701.                  ! ityp........numero das classes de solo 13
 2702.                  ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 2703.                  ! idp.........Parametro para as camadas de solo idp=1->3
 2704.                  ! icount......
 2705.                  ! ft1.........temperature  factor   simplified
 2706.                  ! fp1.........soil water potential factor simplified
 2707.                  ! hl........heat of evaporation of water   (j/kg)
 2708.                  ! nmax........
 2709.                  ! topt........Temperatura ideal de funcionamento estomatico
 2710.                  ! tll.........Temperatura minima de funcionamento estomatico
 2711.                  ! tu..........Temperatura maxima de funcionamento estomatico
 2712.                  ! defac.......Parametro de deficit de pressao de vapor d'agua
 2713.                  ! ph1.........Coeficiente para o efeito da agua no solo
 2714.                  ! ph2 ........Potencial de agua no solo para ponto de Wilting
 2715.                  ! rootd.......Profundidade das raizes
 2716.                  ! zdepth......Profundidade para as tres camadas de solo
 2717.                  ! itype.......Classe de textura do solo
 2718.                  ! vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 2719.                  ! vcover(iv)..Fracao de cobertura de vegetacao iv=2 Bottom
 2720.                  ! tc..........Temperatura da copa "dossel"(K)
 2721.                  ! tg .........Temperatura da superficie do solo (K)
 2722.                  ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 2723.                  ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 2724.                  ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 2725.                  ! ta..........Temperatura no nivel de fonte de calor do dossel (K)
 2726.                  ! ea..........Pressao de vapor
 2727.                  ! rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 2728.                  ! phsoil......soil moisture potential of the i-th soil layer
 2729.                  ! stm.........Resisttencia Estomatica "Stomatal resistence" (s/m)
 2730.                  ! icheck......this version assumes dew-free conditions "icheck=1" to
 2731.                  !             estimate ea for buoyancy term in vntmf or ra.
 2732.                  !-----------------------------------------------------------------------
 2733.                  INTEGER, INTENT(IN   ) :: ncols
 2734.                  INTEGER, INTENT(IN   ) :: icount
 2735.                  REAL(KIND=r8),    INTENT(INOUT) :: ft1   (ncols)
 2736.                  REAL(KIND=r8),    INTENT(INOUT) :: fp1   (ncols)
 2737.                  !
 2738.                  INTEGER, INTENT(in   ) :: nmax
 2739.                  !
 2740.                  !     vegetation and soil parameters
 2741.                  !
 2742.                  REAL(KIND=r8),    INTENT(in   ) :: rootd (ityp,icg)
 2743.                  REAL(KIND=r8),    INTENT(in   ) :: zdepth(ityp,idp)
 2744.                  INTEGER, INTENT(in   ) :: itype (ncols)
 2745.                  REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 2746.                  !
 2747.                  !     prognostic variables
 2748.                  !
 2749.                  REAL(KIND=r8),    INTENT(in   ) :: tc   (ncols)
 2750.                  REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2751.                  REAL(KIND=r8),    INTENT(in   ) :: w    (ncols,3)
 2752.                  !
 2753.                  !     variables calculated from above and ambient conditions
 2754.                  !
 2755.                  REAL(KIND=r8),    INTENT(in   ) :: ta    (ncols)
 2756.                  REAL(KIND=r8),    INTENT(in   ) :: ea    (ncols)
 2757.                  REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 2758.                  REAL(KIND=r8),    INTENT(in   ) :: phsoil(ncols,idp)
 2759.                  REAL(KIND=r8),    INTENT(in   ) :: stm   (ncols,icg)
 2760.                  INTEGER, INTENT(in   ) :: icheck(ncols)
 2761.                  REAL(KIND=r8)   , INTENT(in   ) :: topt2 (ncols,icg)
 2762.                  REAL(KIND=r8)   , INTENT(in   ) :: tll2  (ncols,icg)
 2763.                  REAL(KIND=r8)   , INTENT(in   ) :: tu2   (ncols,icg)
 2764.                  REAL(KIND=r8)   , INTENT(in   ) :: defac2(ncols,icg)
 2765.                  REAL(KIND=r8)   , INTENT(in   ) :: ph12  (ncols,icg)
 2766.                  REAL(KIND=r8)   , INTENT(in   ) :: ph22  (ncols,icg)
 2767.                  !
 2768.                  REAL(KIND=r8)    :: tv  (ncols)
 2769.                  REAL(KIND=r8)    :: d2  (ncols)
 2770.                  REAL(KIND=r8)    :: ft  (ncols)
 2771.                  REAL(KIND=r8)    :: drop(ncols)
 2772.                  REAL(KIND=r8)    :: fd  (ncols)
 2773.                  REAL(KIND=r8)    :: fp  (ncols)
 2774.                  REAL(KIND=r8)    :: ftpd(ncols)
 2775.                  REAL(KIND=r8)    :: dep(3)
 2776.                  REAL(KIND=r8)    :: hl3i
 2777.                  REAL(KIND=r8)    :: xrot
 2778.                  REAL(KIND=r8)    :: xdr
 2779.                  REAL(KIND=r8)    :: arg
 2780.                  INTEGER :: iveg
 2781.                  INTEGER :: i
 2782.                  INTEGER :: ntyp
 2783.                  !
 2784.                  !     humidity, temperature and transpiration factors
 2785.                  !
 2786.  D--------<>     tv=0.0_r8   !  CALL reset(tv,ncols*13)
 2787.                  hl3i=1.0_r8   /(hl*1000.0_r8  )
 2788.                  iveg=1
 2789.              
 2790.                  IF (icount == 1) THEN
 2791.                     !cdir novector
 2792.  1---------<        DO i = 1, nmax
 2793.  1                     IF (icheck(i) == 1) THEN
 2794.  1                        ntyp=itype(i)
 2795.  1                        IF ((ntyp == 11) .OR. (ntyp == 13)) THEN
 2796.  1                           CONTINUE
 2797.  1                        ELSE
 2798.  1                           IF (iveg == 1) THEN
 2799.  1                              tv  (i)=tc(i)
 2800.  1                           ELSE
 2801.  1                              tv  (i)=tg(i)
 2802.  1                           END IF
 2803.  1                           tv(i)=MIN((tu2 (i,iveg)-0.1_r8   ),tv(i))
 2804.  1                           tv(i)=MAX((tll2(i,iveg)+0.1_r8   ),tv(i))
 2805.  1                           d2(i)=(tu2  (i,iveg)-topt2(i,iveg)) &
 2806.  1                                /(topt2(i,iveg)-tll2 (i,iveg))
 2807.  1                           ft(i)=(tv(i)-tll2(i,iveg))/ &
 2808.  1                                (topt2(i,iveg)-tll2(i,iveg)) &
 2809.  1                                *EXP(d2(i)*LOG( &
 2810.  1                                (tu2 (i,iveg)-tv(i))/ &
 2811.  1                                (tu2(i,iveg)-topt2(i,iveg)) ) )
 2812.  1                           ft(i) = MIN(ft(i), 1.e0_r8)
 2813.  1                           ft(i) = MAX(ft(i), 1.e-5_r8)
 2814.  1                           ft1(i) = ft(i)
 2815.  1                           !
 2816.  1                           !  simplified calculation of soil water potential factor, fp
 2817.  1                           !
 2818.  1                           xrot = rootd(ntyp,iveg)
 2819.  1                           dep(1) = 0.0e0_r8
 2820.  1                           dep(2) = 0.0e0_r8
 2821.  1                           dep(3) = 0.0e0_r8
 2822.  1                           dep(1) = MIN(zdepth(ntyp,1), xrot)
 2823.  1                           xrot = xrot - zdepth(ntyp,1)
 2824.  1                           IF (xrot > 0.0e0_r8) THEN
 2825.  1                              dep(2) = MIN(zdepth(ntyp,2), xrot)
 2826.  1                              xrot = xrot - zdepth(ntyp,2)
 2827.  1                           ENDIF
 2828.  1                           IF (xrot > 0.0e0_r8) THEN
 2829.  1                              dep(3) = MIN(zdepth(ntyp,3), xrot)
 2830.  1                              xrot = xrot - zdepth(ntyp,3)
 2831.  1                           ENDIF
 2832.  1                           xdr = (phsoil(i,1) * dep(1) + phsoil(i,2) * dep(2) &
 2833.  1                                +phsoil(i,3) * dep(3)) / rootd(ntyp,iveg)
 2834.  1                           xdr = - xdr
 2835.  1                           IF (xdr <= 1.0e-5_r8) xdr = 1.0e-5_r8
 2836.  1                           xdr = LOG (xdr)
 2837.  1                           arg = -ph12(i,1)*(ph22(i,1)-xdr)
 2838.  1                           arg = MIN(arg,0.0_r8)
 2839.  1                           fp(i) = 1.e0_r8 - EXP(arg)
 2840.  1                           IF ((w(i,2) > 0.15e0_r8) .AND. (fp(i) < 0.05e0_r8)) fp(i)=0.05e0_r8
 2841.  1                           fp(i) = MIN(fp(i), 1.e0_r8)
 2842.  1                           fp(i) = MAX(fp(i), 1.e-5_r8)
 2843.  1                           fp1(i) = fp(i)
 2844.  1                        END IF
 2845.  1                     END IF
 2846.  1--------->        END DO
 2847.                  END IF
 2848.              
 2849.  1---------<     DO i = 1, nmax
 2850.  1                  IF (icheck(i) == 1) THEN
 2851.  1                     ntyp=itype(i)
 2852.  1                     drop(i)=EXP(21.65605_r8   -5418.0_r8   /ta(i))      -ea(i)
 2853.  1                     fd(i) = MAX( 1.0e-5_r8,  1.0_r8/(1.0_r8+ defac2(i,iveg)*drop(i)))
 2854.  1                     fd(i) = MIN(fd(i), 1.e0_r8)
 2855.  1                  END IF
 2856.  1--------->     END DO
 2857.              
 2858.  1---------<     DO i = 1, nmax
 2859.  1                  IF (icheck(i) == 1) THEN
 2860.  1                     ntyp=itype(i)
 2861.  1                     rst(i,2) = 1.e5_r8
 2862.  1                     IF ((ntyp == 11) .OR. (ntyp == 13)) THEN
 2863.  1                        rst(i,1) = 1.0e5_r8
 2864.  1                        CYCLE
 2865.  1                     END IF
 2866.  1                     ftpd(i)    =  fd(i)* ft1(i) * fp1(i)
 2867.  1                     rst(i,iveg)=stm(i,iveg)/(ftpd(i)*vcover(i,iveg))
 2868.  1                     rst(i,iveg)=MIN(rst(i,iveg),1.0e5_r8)
 2869.  1                  END IF
 2870.  1--------->     END DO
 2871.              
 2872.                END SUBROUTINE stres2
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 2872 
  Local variable "HL3I" is assigned a value but never used.

 2873.              
 2874.              
 2875.              
 2876.                ! update :performs the updating of soil moisture stores
 2877.                !         and interception capacity.
 2878.              
 2879.              
 2880.                SUBROUTINE update( &
 2881.                     bps   ,deadtg,deadtc,deadqm,ect   ,eci   ,egt   ,egi   ,egs   , &
 2882.                     eg    ,hc    ,hg    ,ecmass,egmass,etmass,hflux ,chf   ,shf   , &
 2883.                     ra    ,rb    ,rd    ,ea    ,etc   ,etg   ,btc   ,btg   ,cc    , &
 2884.                     cg    ,dtc   ,dtg   ,dtm   ,dqm   ,tc    ,tg    ,td    ,capac , &
 2885.                     tm    ,nmax  ,dtc3x ,ncols)
 2886.                  !
 2887.                  !-----------------------------------------------------------------------
 2888.                  !-----------------------------------------------------------------------
 2889.                  !   ncols.......Numero de ponto por faixa de latitude
 2890.                  !   pie.........Constante Pi=3.1415926e0
 2891.                  !   hl..........heat of evaporation of water   (j/kg)
 2892.                  !   snomel......heat of melting
 2893.                  !   tf..........Temperatura de congelamento (K)
 2894.                  !   dtc3x.......time increment dt
 2895.                  !   nmax........
 2896.                  !   tm..........Temperature of reference (fourier)
 2897.                  !   tc..........Temperatura da copa "dossel" canopy leaf temperature(K)
 2898.                  !   tg..........Temperatura da superficie do solo ground temperature (K)
 2899.                  !   td..........Temperatura do solo profundo (K)
 2900.                  !   capac ......Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
 2901.                  !   capac.......Agua interceptada iv=2 na cobertura do solo (m)
 2902.                  !   ra..........Resistencia Aerodinamica (s/m)
 2903.                  !   rb .........bulk boundary layer resistance             (s/m)
 2904.                  !   rd..........aerodynamic resistance between ground
 2905.                  !               and canopy air space
 2906.                  !   ea..........Pressao de vapor
 2907.                  !   etc.........Pressure of vapor at top of the copa
 2908.                  !   etg.........Pressao de vapor no base da copa
 2909.                  !   btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i))
 2910.                  !   btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 2911.                  !   cc..........heat capacity of the canopy
 2912.                  !   cg..........heat capacity of the ground
 2913.                  !   dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 2914.                  !   dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 2915.                  !   dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 2916.                  !   dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
 2917.                  !   ect.........Transpiracao(J/m*m)
 2918.                  !   eci.........Evaporacao da interceptacao da agua (J/m*m)
 2919.                  !   egt ........Transpiracao na base da copa (J/m*m)  .
 2920.                  !   egi.........Evaporacao da neve (J/m*m)
 2921.                  !   egs.........Evaporacao do solo arido (J/m*m)
 2922.                  !   eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 2923.                  !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 2924.                  !   hc..........total sensible heat lost of top from the veggies.
 2925.                  !   hg..........total sensible heat lost of base from the veggies.
 2926.                  !   ecmass......Mass of water lost of top from the veggies.
 2927.                  !   egmass......Mass of water lost of base from the veggies.
 2928.                  !   etmass......total mass of water lost from the veggies.
 2929.                  !   hflux.......total sensible heat lost from the veggies.
 2930.                  !   chf.........heat fluxes into the canopy  in w/m**2
 2931.                  !   shf.........heat fluxes into the ground, in w/m**2
 2932.                  !   deadtg......
 2933.                  !   deadtc......
 2934.                  !   deadqm......
 2935.                  !   bps.........
 2936.                  !-----------------------------------------------------------------------
 2937.                  INTEGER, INTENT(in   ) :: ncols
 2938.              
 2939.                  REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 2940.                  INTEGER, INTENT(in   ) :: nmax
 2941.                  !
 2942.                  !     the size of working area is ncols*187
 2943.                  !     atmospheric parameters as boudary values for sib
 2944.                  !
 2945.                  REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 2946.                  !
 2947.                  !     prognostic variables
 2948.                  !
 2949.                  REAL(KIND=r8),    INTENT(in   ) :: tc   (ncols)
 2950.                  REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2951.                  REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 2952.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 2953.                  !
 2954.                  !     variables calculated from above and ambient conditions
 2955.                  !
 2956.                  REAL(KIND=r8),    INTENT(in   ) :: ra  (ncols)
 2957.                  REAL(KIND=r8),    INTENT(in   ) :: rb  (ncols)
 2958.                  REAL(KIND=r8),    INTENT(in   ) :: rd  (ncols)
 2959.                  REAL(KIND=r8),    INTENT(in   ) :: ea  (ncols)
 2960.                  REAL(KIND=r8),    INTENT(in   ) :: etc (ncols)
 2961.                  REAL(KIND=r8),    INTENT(in   ) :: etg (ncols)
 2962.                  REAL(KIND=r8),    INTENT(in   ) :: btc (ncols)
 2963.                  REAL(KIND=r8),    INTENT(in   ) :: btg (ncols)
 2964.                  REAL(KIND=r8),    INTENT(in   ) :: cc  (ncols)
 2965.                  REAL(KIND=r8),    INTENT(in   ) :: cg  (ncols)
 2966.                  REAL(KIND=r8),    INTENT(in   ) :: dtc (ncols)
 2967.                  REAL(KIND=r8),    INTENT(in   ) :: dtg (ncols)
 2968.                  REAL(KIND=r8),    INTENT(in   ) :: dtm (ncols)
 2969.                  REAL(KIND=r8),    INTENT(in   ) :: dqm (ncols)
 2970.                  !
 2971.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 2972.                  !
 2973.                  REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 2974.                  REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 2975.                  REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 2976.                  REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 2977.                  REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 2978.                  REAL(KIND=r8),    INTENT(in   ) :: eg    (ncols)
 2979.                  REAL(KIND=r8),    INTENT(in   ) :: hc    (ncols)
 2980.                  REAL(KIND=r8),    INTENT(in   ) :: hg    (ncols)
 2981.                  REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 2982.                  REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 2983.                  REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 2984.                  REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 2985.                  REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 2986.                  REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 2987.                  !
 2988.                  !     derivatives
 2989.                  !
 2990.                  REAL(KIND=r8),    INTENT(in   ) :: deadtg(ncols)
 2991.                  REAL(KIND=r8),    INTENT(in   ) :: deadtc(ncols)
 2992.                  REAL(KIND=r8),    INTENT(in   ) :: deadqm(ncols)
 2993.                  !
 2994.                  !     this is for coupling with closure turbulence model
 2995.                  !
 2996.                  REAL(KIND=r8),    INTENT(in   ) :: bps  (ncols)
 2997.              
 2998.              
 2999.              
 3000.              
 3001.                  REAL(KIND=r8) :: tgen  (ncols)
 3002.                  REAL(KIND=r8) :: tcen  (ncols)
 3003.                  REAL(KIND=r8) :: tmen  (ncols)
 3004.                  REAL(KIND=r8) :: taen  (ncols)
 3005.                  REAL(KIND=r8) :: eaen  (ncols)
 3006.                  REAL(KIND=r8) :: d1    (ncols)
 3007.                  REAL(KIND=r8) :: estarc(ncols)
 3008.                  REAL(KIND=r8) :: estarg(ncols)
 3009.                  REAL(KIND=r8) :: facks (ncols)
 3010.                  INTEGER :: i
 3011.                  REAL(KIND=r8) :: timcon
 3012.                  REAL(KIND=r8) :: dtc3xi
 3013.                  REAL(KIND=r8) :: hlati
 3014.                  REAL(KIND=r8) :: hlat3i
 3015.                  REAL(KIND=r8) :: snofac
 3016.                  !
 3017.                  !     adjustment of temperatures and vapor pressure ,
 3018.                  !     sensible heat fluxes. n.b. latent heat fluxes cannot be derived
 3019.                  !     from estarc, estarg, ea due to linear result of implicit method
 3020.                  !
 3021.                  !
 3022.                  !
 3023.                  !
 3024.  V---------<     DO i = 1, nmax
 3025.  V                  tgen(i)=tg(i)+dtg(i)
 3026.  V                  tcen(i)=tc(i)+dtc(i)
 3027.  V                  tmen(i)=tm(i)+dtm(i)
 3028.  V                  d1(i)=1.0_r8   /ra(i)+1.0_r8   /rb(i)+1.0_r8   /rd(i)
 3029.  V                  !
 3030.  V                  !     compute the fluxes consistent with the differencing scheme.
 3031.  V                  !
 3032.  V                  taen(i)=(tgen(i)/rd(i)+tcen(i)/ &
 3033.  V                       rb(i)+tmen(i)*bps(i)/ra(i))/d1(i)
 3034.  V                  eaen(i)=ea(i)+deadtc(i)*dtc(i)+deadtg(i)* &
 3035.  V                       dtg(i)+deadqm(i)*dqm(i)
 3036.  V                  !
 3037.  V                  !     vapor pressures within the canopy and the moss.
 3038.  V                  !
 3039.  V                  estarc(i)=etc(i)+btc(i)*dtc(i)
 3040.  V                  estarg(i)=etg(i)+btg(i)*dtg(i)
 3041.  V--------->     END DO
 3042.  f---------<     DO i = 1, nmax
 3043.  f                  IF (tgen(i) <= tf) THEN
 3044.  f                     egs(i)=eg(i)-egi(i)
 3045.  f                     egt(i)=0.0_r8
 3046.  f                  END IF
 3047.  f--------->     END DO
 3048.                  !
 3049.                  !     heat fluxes into the canopy and the ground, in w/m**2
 3050.                  !
 3051.                  timcon=2.0_r8   *pie/86400.0_r8
 3052.                  dtc3xi=1.0_r8   /dtc3x
 3053.                  hlati =1.0_r8   /        hl
 3054.                  hlat3i=1.0_r8   /(1.0e3_r8*hl)
 3055.  V---------<     DO i = 1, nmax
 3056.  V                  chf(i)=dtc3xi*cc(i)*dtc(i)
 3057.  V                  shf(i)=dtc3xi*cg(i)*dtg(i) + timcon*cg(i)*(tg(i)+dtg(i)-td(i))
 3058.  V--------->     END DO
 3059.                  !
 3060.                  !     evaporation losses are expressed in j m-2 : when divided by
 3061.                  !     ( hl*1000.0_r8) loss is in m m-2
 3062.                  !
 3063.                  snofac=1.0_r8   /( 1.0_r8   +snomel*hlat3i)
 3064.  f---------<     DO i = 1, nmax
 3065.  f                  facks(i)=1.0_r8
 3066.  f                  IF (tcen(i) <= tf) facks(i)=snofac
 3067.  f                  IF ((ect(i)+eci(i)) <= 0.0_r8) THEN
 3068.  f                     eci(i)  =ect(i)+eci(i)
 3069.  f                     ect(i)  =0.0_r8
 3070.  f                     facks(i)=1.0_r8   /facks(i)
 3071.  f                  END IF
 3072.  f--------->     END DO
 3073.  V---------<     DO i = 1, nmax
 3074.  V                  capac(i,1)=capac(i,1)-eci(i)*facks(i)*hlat3i
 3075.  V                  !
 3076.  V                  !     mass terms are in kg m-2 dt-1
 3077.  V                  !
 3078.  V                  ecmass(i)=(ect(i)+eci(i)*facks(i))*hlati
 3079.  V--------->     END DO
 3080.  1---------<     DO i = 1, nmax
 3081.  1                  facks(i)=1.0_r8
 3082.  1                  IF (tgen(i) <= tf) facks(i)=snofac
 3083.  1                  IF ((egt(i)+egi(i)) <= 0.0_r8) THEN
 3084.  1                     egi(i)  =egt(i)+egi(i)
 3085.  1                     egt(i)  =0.0_r8
 3086.  1                     facks(i)=1.0_r8  /facks(i)
 3087.  1                  END IF
 3088.  1--------->     END DO
 3089.  V---------<     DO i = 1, nmax
 3090.  V                  capac(i,2)=capac(i,2)-egi(i)*facks(i)*hlat3i
 3091.  V                  egmass(i)=(egt(i)+egs(i)+egi(i)*facks(i))*hlati
 3092.  V                  !
 3093.  V                  !     total mass of water and total sensible heat lost from the veggies.
 3094.  V                  !
 3095.  V                  etmass(i)=ecmass(i)+egmass(i)
 3096.  V                  hflux (i)=hc(i)+hg(i)
 3097.  V--------->     END DO
 3098.                END SUBROUTINE update
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3098 
  Local variable "ESTARC" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3098 
  Local variable "ESTARG" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3098 
  Local variable "EAEN" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3098 
  Local variable "TAEN" is assigned a value but never used.

 3099.              
 3100.              
 3101.              
 3102.              
 3103.              
 3104.                SUBROUTINE sflxes(&
 3105.                     hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm ,egdtg ,egdtc ,egdqm , &
 3106.                     ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm,icheck,bps   ,psb   , &
 3107.                     dzm   ,em    ,gmt   ,gmq   ,cu    ,cuni  ,ctni  ,ustar ,rhoair, &
 3108.                     psy   ,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    ,ect   ,eci   , &
 3109.                     egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    ,ecidif,egidif, &
 3110.                     ecmass,egmass,etmass,hflux ,chf   ,shf   ,ra    ,rb    ,rd    , &
 3111.                     rc    ,rg    ,tcta  ,tgta  ,ta    ,ea    ,etc   ,etg   ,btc   , &
 3112.                     btg   ,u2    ,radt  ,rst   ,rsoil ,hrr   ,phsoil,cc    ,cg    , &
 3113.                     satcap,dtc   ,dtg   ,dtm   ,dqm   ,stm   ,thermk,tc    ,tg    , &
 3114.                     td    ,capac ,w     ,qm    ,tm    ,um    ,vm    ,psur  ,vcover, &
 3115.                     z0x   ,d     ,rdc   ,rbc   ,z0    ,itype ,dtc3x ,mon   ,nmax  , &
 3116.                     jstneu,ncols ,zlt2 ,topt2  ,tll2  ,tu2   ,defac2,ph12  ,ph22  )
 3117.              
 3118.                  !-----------------------------------------------------------------------
 3119.                  ! sflxes :performs surface flux parameterization.
 3120.                  !-----------------------------------------------------------------------
 3121.                  !
 3122.                  !  ncols........Numero de ponto por faixa de latitude
 3123.                  !  ityp........numero das classes de solo 13
 3124.                  !  imon........Numero maximo de meses no ano (12)
 3125.                  !  icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 3126.                  !  idp.........Camadas de solo (1 a 3)
 3127.                  !  pie.........Constante Pi=3.1415926e0
 3128.                  !  stefan......Constante de Stefan Boltzmann
 3129.                  !  cp..........specific heat of air (j/kg/k)
 3130.                  !  hl..........heat of evaporation of water   (j/kg)
 3131.                  !  grav........gravity constant      (m/s**2)
 3132.                  !  snomel......heat of melting (j m-1)
 3133.                  !  tf..........Temperatura de congelamento (K)
 3134.                  !  gasr........Constant of dry air      (j/kg/k)
 3135.                  !  epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
 3136.                  !              de agua e do ar seco
 3137.                  !  jstneu......The first call to vntlat just gets the neutral values of ustar
 3138.                  !              and ventmf para jstneu=.TRUE..
 3139.                  !  dtc3x.......time increment dt
 3140.                  !  mon.........Number of month at year (1-12)
 3141.                  !  nmax........
 3142.                  !  topt........Temperatura ideal de funcionamento estomatico
 3143.                  !  tll.........Temperatura minima de funcionamento estomatico
 3144.                  !  tu..........Temperatura maxima de funcionamento estomatico
 3145.                  !  defac.......Parametro de deficit de pressao de vapor d'agua
 3146.                  !  ph1.........Coeficiente para o efeito da agua no solo
 3147.                  !  ph2.........Potencial de agua no solo para ponto de Wilting
 3148.                  !  rootd.......Profundidade das raizes
 3149.                  !  bee.........Expoente da curva de retencao "expoente para o solo umido"
 3150.                  !  phsat.......Tensao do solo saturado " Potencial de agua no solo saturado"
 3151.                  !  zdepth......Profundidade para as tres camadas de solo
 3152.                  !  zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 3153.                  !  zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 3154.                  !  x0x.........Comprimento de rugosidade
 3155.                  !  xd..........Deslocamento do plano zero
 3156.                  !  z2..........Altura do topo do dossel
 3157.                  !  xdc.........Constant related to aerodynamic resistance
 3158.                  !              between ground and canopy air space
 3159.                  !  xbc.........Constant related to bulk boundary layer resistance
 3160.                  !  itype.......Classe de textura do solo
 3161.                  !  vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 3162.                  !  vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 3163.                  !  z0x.........roughness length                           (m)
 3164.                  !  d...........Displacement height                        (m)
 3165.                  !  rdc.........Constant related to aerodynamic resistance
 3166.                  !              between ground and canopy air space
 3167.                  !  rbc.........Constant related to bulk boundary layer resistance
 3168.                  !  z0..........Roughness length
 3169.                  !  qm..........reference specific humidity (fourier)
 3170.                  !  tm .........reference temperature    (fourier)                (k)
 3171.                  !  um..........Razao entre zonal pseudo-wind (fourier) e seno da
 3172.                  !              colatitude
 3173.                  !  vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 3174.                  !              colatitude
 3175.                  !  psur........surface pressure in mb
 3176.                  !  tc..........Temperatura da copa "dossel"(K)
 3177.                  !  tg..........Temperatura da superficie do solo (K)
 3178.                  !  td..........Temperatura do solo profundo (K)
 3179.                  !  capac(iv)...Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
 3180.                  !  capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 3181.                  !  w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 3182.                  !  w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 3183.                  !  w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 3184.                  !  ra..........Resistencia Aerodinamica (s/m)
 3185.                  !  rb..........bulk boundary layer resistance             (s/m)
 3186.                  !  rd..........aerodynamic resistance between ground      (s/m)
 3187.                  !              and canopy air space
 3188.                  !  rc..........Resistencia do topo da copa
 3189.                  !  rg......... Resistencia da base da copa
 3190.                  !  tcta........Diferenca entre tc-ta                      (k)
 3191.                  !  tgta........Diferenca entre tg-ta                      (k)
 3192.                  !  ta..........Temperatura no nivel de fonte de calor do dossel (K)
 3193.                  !  ea..........Pressure of vapor
 3194.                  !  etc.........Pressure of vapor at top of the copa
 3195.                  !  etg.........Pressao de vapor no base da copa
 3196.                  !  btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 3197.                  !  btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 3198.                  !  u2..........wind speed at top of canopy                (m/s)
 3199.                  !  radt........net heat received by canopy/ground vegetation
 3200.                  !  rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 3201.                  !  rsoil ......Resistencia do solo (s/m)
 3202.                  !  hrr.........rel. humidity in top layer
 3203.                  !  phsoil......soil moisture potential of the i-th soil layer
 3204.                  !  cc..........heat capacity of the canopy
 3205.                  !  cg..........heat capacity of the ground
 3206.                  !  satcap......saturation liquid water capacity         (m)
 3207.                  !  dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 3208.                  !  dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 3209.                  !  dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 3210.                  !  dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
 3211.                  !  stm ........Variavel utilizada mo cal. da Resistencia
 3212.                  !  thermk......canopy emissivity
 3213.                  !  ect.........Transpiracao no topo da copa (J/m*m)
 3214.                  !  eci.........Evaporacao da agua interceptada no topo da copa (J/m*m)
 3215.                  !  egt.........Transpiracao na base da copa (J/m*m)
 3216.                  !  egi.........Evaporacao da neve (J/m*m)
 3217.                  !  egs.........Evaporacao do solo arido (J/m*m)
 3218.                  !  ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 3219.                  !              topo da copa   ec   (i)=eci(i)+ect(i)
 3220.                  !  eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 3221.                  !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 3222.                  !  hc..........total sensible heat lost of top from the veggies.
 3223.                  !  hg..........total sensible heat lost of base from the veggies.
 3224.                  !  ecidif......check if interception loss term has exceeded canopy storage
 3225.                  !              ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 3226.                  !  egidif......check if interception loss term has exceeded canopy storage
 3227.                  !              ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 3228.                  !  ecmass......Mass of water lost of top from the veggies.
 3229.                  !  egmass......Mass of water lost of base from the veggies.
 3230.                  !  etmass......total mass of water lost from the veggies.
 3231.                  !  hflux.......total sensible heat lost from the veggies.
 3232.                  !  chf.........heat fluxes into the canopy  in w/m**2
 3233.                  !  shf.........heat fluxes into the ground, in w/m**2
 3234.                  !  bps.........
 3235.                  !  psb.........
 3236.                  !  dzm.........Altura media de referencia  para o vento para o calculo
 3237.                  !               da estabilidade do escoamento
 3238.                  !  em..........Pressao de vapor da agua
 3239.                  !  gmt.........
 3240.                  !  gmq.........specific humidity of reference (fourier)
 3241.                  !  cu..........Friction  transfer coefficients.
 3242.                  !  cuni........neutral friction transfer  coefficients.
 3243.                  !  ctni........neutral heat transfer coefficients.
 3244.                  !  ustar.......surface friction velocity  (m/s)
 3245.                  !  rhoair......Desnsidade do ar
 3246.                  !  psy.........(cp/(hl*epsfac))*psur(i)
 3247.                  !  rcp.........densidade do ar vezes o calor especifico do ar
 3248.                  !  wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 3249.                  !              indice de area foliar no topo da copa
 3250.                  !  wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 3251.                  !              indice de area foliar na base da copa
 3252.                  !  fc..........Condicao de oravalho 0 ou 1 na topo da copa
 3253.                  !  fg..........Condicao de oravalho 0 ou 1 na base da copa
 3254.                  !  hr..........rel. humidity in top layer
 3255.                  !  icheck......this version assumes dew-free conditions "icheck=1" to
 3256.                  !              estimate ea for buoyancy term in vntmf or ra.
 3257.                  !  hgdtg.......n.b. fluxes expressed in joules m-2
 3258.                  !  hgdtc.......n.b. fluxes expressed in joules m-2
 3259.                  !  hgdtm.......n.b. fluxes expressed in joules m-2
 3260.                  !  hcdtg.......n.b. fluxes expressed in joules m-2
 3261.                  !  hcdtc.......n.b. fluxes expressed in joules m-2
 3262.                  !  hcdtm.......n.b. fluxes expressed in joules m-2
 3263.                  !  egdtg.......partial derivative calculation for latent heat
 3264.                  !  egdtc.......partial derivative calculation for latent heat
 3265.                  !  egdqm.......partial derivative calculation for latent heat
 3266.                  !  ecdtg.......partial derivative calculation for latent heat
 3267.                  !  ecdtc.......partial derivative calculation for latent heat
 3268.                  !  ecdqm.......partial derivative calculation for latent heat
 3269.                  !  deadtg......
 3270.                  !  deadtc......
 3271.                  !  deadqm......
 3272.                  !
 3273.                  !-----------------------------------------------------------------------
 3274.                  INTEGER, INTENT(in   ) :: ncols
 3275.              
 3276.                  LOGICAL, INTENT(inout  ) :: jstneu
 3277.              
 3278.                  REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 3279.                  INTEGER, INTENT(in   ) :: mon(ncols)
 3280.                  INTEGER, INTENT(in   ) :: nmax
 3281.                  !
 3282.                  INTEGER, INTENT(in   ) :: itype (ncols)
 3283.                  !
 3284.                  REAL(KIND=r8),    INTENT(in) :: vcover(ncols,icg)
 3285.                  REAL(KIND=r8),    INTENT(inout) :: z0x   (ncols)
 3286.                  REAL(KIND=r8),    INTENT(inout) :: d     (ncols)
 3287.                  REAL(KIND=r8),    INTENT(inout) :: rdc   (ncols)
 3288.                  REAL(KIND=r8),    INTENT(inout) :: rbc   (ncols)
 3289.                  REAL(KIND=r8),    INTENT(inout) :: z0    (ncols)
 3290.                  !
 3291.                  !     the size of working area is ncols*187
 3292.                  !     atmospheric parameters as boudary values for sib
 3293.                  !
 3294.                  REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 3295.                  REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 3296.                  REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 3297.                  REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 3298.                  REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 3299.                  !
 3300.                  !     prognostic variables
 3301.                  !
 3302.                  REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 3303.                  REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 3304.                  REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 3305.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 3306.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 3307.                  !
 3308.                  !     variables calculated from above and ambient conditions
 3309.                  !
 3310.                  REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 3311.                  REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 3312.                  REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 3313.                  REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 3314.                  REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 3315.                  REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
 3316.                  REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
 3317.                  REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
 3318.                  REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 3319.                  REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
 3320.                  REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
 3321.                  REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
 3322.                  REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
 3323.                  REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 3324.                  REAL(KIND=r8),    INTENT(inout) :: radt  (ncols,icg)
 3325.                  REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 3326.                  REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
 3327.                  REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
 3328.                  REAL(KIND=r8),    INTENT(inout) :: phsoil(ncols,idp)
 3329.                  REAL(KIND=r8),    INTENT(inout) :: cc    (ncols)
 3330.                  REAL(KIND=r8),    INTENT(inout) :: cg    (ncols)
 3331.                  REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 3332.                  REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
 3333.                  REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
 3334.                  REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
 3335.                  REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
 3336.                  REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
 3337.                  REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 3338.                  !
 3339.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 3340.                  !
 3341.                  REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 3342.                  REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 3343.                  REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 3344.                  REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 3345.                  REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 3346.                  REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 3347.                  REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 3348.                  REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 3349.                  REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 3350.                  REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 3351.                  REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 3352.                  REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 3353.                  REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 3354.                  REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 3355.                  REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 3356.                  REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 3357.                  REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 3358.                  !
 3359.                  !     this is for coupling with closure turbulence model
 3360.                  !
 3361.                  REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 3362.                  REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 3363.                  REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 3364.                  REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 3365.                  REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 3366.                  REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 3367.                  REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 3368.                  REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 3369.                  REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 3370.                  REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 3371.                  REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 3372.                  REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 3373.                  REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 3374.                  REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 3375.                  REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 3376.                  REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 3377.                  REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 3378.                  REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 3379.                  INTEGER, INTENT(inout  ) :: icheck(ncols)
 3380.                  !
 3381.                  !     derivatives
 3382.                  !
 3383.                  REAL(KIND=r8),    INTENT(inout  ) :: hgdtg (ncols)
 3384.                  REAL(KIND=r8),    INTENT(inout  ) :: hgdtc (ncols)
 3385.                  REAL(KIND=r8),    INTENT(inout  ) :: hgdtm (ncols)
 3386.                  REAL(KIND=r8),    INTENT(inout  ) :: hcdtg (ncols)
 3387.                  REAL(KIND=r8),    INTENT(inout  ) :: hcdtc (ncols)
 3388.                  REAL(KIND=r8),    INTENT(inout  ) :: hcdtm (ncols)
 3389.                  REAL(KIND=r8),    INTENT(inout  ) :: egdtg (ncols)
 3390.                  REAL(KIND=r8),    INTENT(inout  ) :: egdtc (ncols)
 3391.                  REAL(KIND=r8),    INTENT(inout  ) :: egdqm (ncols)
 3392.                  REAL(KIND=r8),    INTENT(inout  ) :: ecdtg (ncols)
 3393.                  REAL(KIND=r8),    INTENT(inout  ) :: ecdtc (ncols)
 3394.                  REAL(KIND=r8),    INTENT(inout  ) :: ecdqm (ncols)
 3395.                  REAL(KIND=r8),    INTENT(inout  ) :: deadtg(ncols)
 3396.                  REAL(KIND=r8),    INTENT(inout  ) :: deadtc(ncols)
 3397.                  REAL(KIND=r8),    INTENT(inout  ) :: deadqm(ncols)
 3398.                  !
 3399.                  REAL(KIND=r8),    INTENT(in   ) :: zlt2    (ncols,icg)
 3400.                  REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 3401.                  REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 3402.                  REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 3403.                  REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 3404.                  REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 3405.                  REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 3406.                  !
 3407.              
 3408.                  REAL(KIND=r8) :: ustarn(ncols)
 3409.              
 3410.                  REAL(KIND=r8) :: psit
 3411.                  REAL(KIND=r8) :: fac
 3412.                  REAL(KIND=r8) :: y1
 3413.                  REAL(KIND=r8) :: y2
 3414.                  REAL(KIND=r8) :: ecf (ncols)
 3415.                  REAL(KIND=r8) :: egf (ncols)
 3416.                  REAL(KIND=r8) :: dewc(ncols)
 3417.                  REAL(KIND=r8) :: dewg(ncols)
 3418.                  !
 3419.                  REAL(KIND=r8) :: tcsav (ncols)
 3420.                  REAL(KIND=r8) :: tgsav (ncols)
 3421.                  REAL(KIND=r8) :: tmsav (ncols)
 3422.                  REAL(KIND=r8) :: qmsav (ncols)
 3423.                  REAL(KIND=r8) :: tsav  (ncols)
 3424.                  REAL(KIND=r8) :: esav  (ncols)
 3425.                  REAL(KIND=r8) :: rdsav (ncols,2)
 3426.                  REAL(KIND=r8) :: wt
 3427.                  REAL(KIND=r8) :: ft1   (ncols)
 3428.                  REAL(KIND=r8) :: fp1   (ncols)
 3429.                  INTEGER :: idewco(ncols)
 3430.                  !
 3431.                  INTEGER, PARAMETER :: icmax = 10
 3432.                  REAL(KIND=r8),    PARAMETER :: small = 1.0e-3_r8
 3433.                  REAL(KIND=r8)    :: gxx
 3434.                  REAL(KIND=r8)    :: capaci
 3435.                  REAL(KIND=r8)    :: eee
 3436.                  REAL(KIND=r8)    :: dtmdt
 3437.                  REAL(KIND=r8)    :: dqmdt
 3438.                  REAL(KIND=r8)    :: vcover2(ncols,icg)
 3439.              
 3440.                  INTEGER :: i
 3441.                  INTEGER :: ntyp
 3442.                  INTEGER :: ncount
 3443.                  INTEGER :: icount
 3444.                  !
 3445.  V--------<>     vcover2=vcover
 3446.  V---------<     DO i = 1, nmax
 3447.  V                  tcsav(i)=tc(i)
 3448.  V                  tgsav(i)=tg(i)
 3449.  V                  tmsav(i)=tm(i)
 3450.  V                  qmsav(i)=qm(i)
 3451.  V                  rdsav(i,1)=radt(i,1)
 3452.  V                  rdsav(i,2)=radt(i,2)
 3453.  V                  stm(i,1)=rst(i,1)
 3454.  V                  stm(i,2)=rst(i,2)
 3455.  V--------->     END DO
 3456.                  !
 3457.                  !     airmod checks for the effects of snow
 3458.                  !
 3459.  I               CALL airmod( &
 3460.                       tg    ,capac ,z0x   ,d     ,rdc   ,rbc   ,itype , &
 3461.                       mon   ,nmax  ,ncols )
 3462.                  !
 3463.                  !     sib roughness length
 3464.                  !
 3465.  V---------<     DO i = 1, nmax
 3466.  V                  z0    (i)=z0x(i)
 3467.  V--------->     END DO
 3468.              
 3469.                  gxx   =grav/461.5_r8
 3470.                  capaci= 1.0_r8 /0.004_r8
 3471.              
 3472.  1---------<     DO i = 1, nmax
 3473.  1                  ntyp   =itype(i)
 3474.  1                  wc  (i)=MIN(1.0_r8 ,capac(i,1)/satcap(i,1))
 3475.  1                  wg  (i)=MIN(1.0_r8 ,capac(i,2)/satcap(i,2))
 3476.  1                  !
 3477.  1                  !     rsoil function from fit to camillo and gurney (1985) data.
 3478.  1                  !     wetness of upper 0.5 cm of soil calculated from approximation
 3479.  1                  !     to milly flow equation with reduced (1/50) conductivity in
 3480.  1                  !     top layer.
 3481.  1                  !
 3482.  1                  wt = MAX(small,w(i,1))
 3483.  1                  wt=wt+(0.75_r8*zdepth(ntyp,1)/(zdepth(ntyp,1)+ &
 3484.  1                       zdepth(ntyp,2)))*(wt-(w(i,2)*w(i,2)/wt))*0.5_r8*50.0_r8
 3485.  1                  fac   =MIN(wt,0.99_r8)
 3486.  1                  fac   =MAX(fac   ,small)
 3487.  1                  rsoil(i)=101840.0_r8*(1.0_r8 - EXP(0.0027_r8 * LOG(fac   )))
 3488.  1                  !
 3489.  1                  !phsat =  " Potencial de agua no solo saturado"
 3490.  1                  !
 3491.  1                  psit = phsat(ntyp) * EXP(-bee(ntyp) * LOG(fac   ))
 3492.  1                  !
 3493.  1                  !        --     --
 3494.  1                  !       |  PSI*g  |
 3495.  1                  ! eee = |---------|
 3496.  1                  !       |  Tg*R   |
 3497.  1                  !        --     --
 3498.  1                  !
 3499.  1                  eee = psit * gxx/tg(i)
 3500.  1                  !
 3501.  1                  !The relative humidity of air at the soil surface
 3502.  1                  !
 3503.  1                  !           --     --
 3504.  1                  !          |  PSI*g  |
 3505.  1                  ! fh = exp*|---------|
 3506.  1                  !          |  Tg*R   |
 3507.  1                  !           --     --
 3508.  1                  !
 3509.  1                  hrr  (i)=MAX (small,EXP(eee))
 3510.  1                  !
 3511.  1                  hr   (i)=hrr(i)
 3512.  1                  !
 3513.  1                  IF (tg(i) <= tf) THEN
 3514.  1                     vcover2(i,2)=1.0_r8
 3515.  1                     wg    (i)  =MIN(1.0_r8 ,capac(i,2)*capaci)
 3516.  1                     rst   (i,2)=rsoil(i)
 3517.  1                     stm   (i,2)=rsoil(i)
 3518.  1                  END IF
 3519.  1                  !
 3520.  1                  fc(i)=1.0_r8
 3521.  1                  fg(i)=1.0_r8
 3522.  1--------->     END DO
 3523.                  !
 3524.                  !     this is the start of iteration of time integration
 3525.                  !     to avoid oscillation
 3526.                  !
 3527.                  ncount=0
 3528.              7000 CONTINUE
 3529.                  ncount=ncount+1
 3530.  V---------<     DO i = 1, nmax
 3531.  V                  icheck(i)=1
 3532.  V                  !
 3533.  V                  !  etc.........Pressure of vapor at top of the copa
 3534.  V                  !  etg.........Pressao de vapor no base da copa
 3535.  V                  !
 3536.  V                  etc(i)=EXP(21.65605_r8  -5418.0_r8  / tc(i))
 3537.  V                  etg(i)=EXP(21.65605_r8  -5418.0_r8  / tg(i))
 3538.  V--------->     END DO
 3539.                  !
 3540.                  !     first guesses for ta and ea
 3541.                  !
 3542.                  IF (ncount == 1) THEN
 3543.  V---------<        DO i = 1, nmax
 3544.  V                     ta (i)=tc(i)
 3545.  V                     !
 3546.  V                     !  ea..........Pressure of vapor
 3547.  V                     !
 3548.  V                     ea (i)=qm(i)*psur(i)/(epsfac+qm(i))
 3549.  V--------->        END DO
 3550.                  END IF
 3551.                  !
 3552.                  !     the first call to vntlat just gets the neutral values of ustar
 3553.                  !     and ventmf.
 3554.                  !
 3555.                  jstneu=.TRUE.
 3556.              
 3557.  I               CALL vntlax(ustarn, &
 3558.                       icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3559.                       u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3560.                       mon   ,nmax  ,jstneu,ncols )
 3561.              
 3562.                  jstneu=.FALSE.
 3563.              
 3564.  I               CALL vntlax(ustarn, &
 3565.                       icheck ,bps  ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3566.                       u2     ,tm   ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3567.                       mon    ,nmax ,jstneu,ncols )
 3568.              
 3569.  V---------<     DO i = 1, nmax
 3570.  V                  tcta(i)=tc(i)/bps(i)-tm(i)
 3571.  V                  tgta(i)=tg(i)/bps(i)-tm(i)
 3572.  V--------->     END DO
 3573.  I               CALL rbrd( &
 3574.                       rb    ,rd    ,tcta  ,tgta  ,u2    ,tg    ,rdc   ,rbc   ,itype , &
 3575.                       z2    ,mon   ,nmax  ,ncols ,zlt2)
 3576.                  !
 3577.                  !     iterate for air temperature and ventilation mass flux
 3578.                  !     n.b. this version assumes dew-free conditions to estimate ea
 3579.                  !     for buoyancy term in vntmf or ra.
 3580.                  !
 3581.                  icount = 0
 3582.              2000 icount = icount + 1
 3583.  1---------<     DO i = 1, nmax
 3584.  1                  IF (icheck(i) == 1) THEN
 3585.  1                     tsav(i) = ta (i)
 3586.  1                     esav(i) = ea (i)
 3587.  1                  END IF
 3588.  1--------->     END DO
 3589.  I               CALL vntlax(ustarn, &
 3590.                       icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3591.                       u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3592.                       mon   ,nmax  ,jstneu,ncols )
 3593.              
 3594.  I               CALL cut( &
 3595.                       icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3596.                       ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3597.                       rsoil ,vcover2,nmax  ,ncols )
 3598.              
 3599.  I               CALL stres2( &
 3600.                       icount,ft1   ,fp1   ,icheck,ta    ,ea    ,rst   ,phsoil,stm   , &
 3601.                       tc    ,tg    ,w     ,vcover2,itype ,&
 3602.                       rootd ,zdepth,nmax  ,ncols ,topt2 ,tll2  ,tu2   , &
 3603.                       defac2,ph12  ,ph22)
 3604.              
 3605.  I               CALL cut(  &
 3606.                       icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3607.                       ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3608.                       rsoil ,vcover2,nmax  ,ncols )
 3609.              
 3610.  1---------<     DO i = 1, nmax
 3611.  1                  IF (icheck(i) == 1) THEN
 3612.  1                     ta(i)= (tg(i)/rd(i)+tc(i)/rb(i)+tm(i)/ra(i)*bps(i)) &
 3613.  1                          /(1.0_r8 /rd(i)+1.0_r8 /rb(i)+1.0_r8 /ra(i))
 3614.  1                  END IF
 3615.  1--------->     END DO
 3616.              
 3617.  1---------<     DO i = 1, nmax
 3618.  1                  IF (icheck(i) == 1) THEN
 3619.  1                     y1   =ABS(ta(i)-tsav(i))
 3620.  1                     y2   =ABS(ea(i)-esav(i))
 3621.  1                     IF((y1    <= 1.0e-2_r8 .AND. y2    <= 5.0e-3_r8) &
 3622.  1                          .OR. icount > icmax) THEN
 3623.  1                        icheck(i)=0
 3624.  1                     END IF
 3625.  1                  END IF
 3626.  1--------->     END DO
 3627.              
 3628.  1---------<     DO i = 1, nmax
 3629.  1                  IF (icheck(i) == 1) GOTO 2000
 3630.  1--------->     END DO
 3631.              
 3632.  V---------<     DO i = 1, nmax
 3633.  V                  fc    (i)=1.0_r8
 3634.  V                  fg    (i)=1.0_r8
 3635.  V                  idewco(i)=0
 3636.  V                  icheck(i)=1
 3637.  V--------->     END DO
 3638.              
 3639.  V---------<     DO i = 1, nmax
 3640.  V                  tc(i)    =tcsav(i)
 3641.  V                  tg(i)    =tgsav(i)
 3642.  V                  tm(i)    =tmsav(i)
 3643.  V                  qm(i)    =qmsav(i)
 3644.  V                  radt(i,1)=rdsav(i,1)
 3645.  V                  radt(i,2)=rdsav(i,2)
 3646.  V                  etc(i)=EXP(21.65605_r8  -5418.0_r8  /tc(i))
 3647.  V                  etg(i)=EXP(21.65605_r8  -5418.0_r8  /tg(i))
 3648.  V                  btc(i)=EXP(30.25353_r8  -5418.0_r8  /tc(i))/(tc(i)*tc(i))
 3649.  V                  btg(i)=EXP(30.25353_r8  -5418.0_r8  /tg(i))/(tg(i)*tg(i))
 3650.  V--------->     END DO
 3651.              
 3652.              3000 CONTINUE
 3653.              
 3654.  I               CALL cut( &
 3655.                       icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3656.                       ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3657.                       rsoil ,vcover2,nmax  ,ncols )
 3658.              
 3659.  1---------<     DO i = 1, nmax
 3660.  1                  IF (icheck(i) == 1) THEN
 3661.  1                     ecf (i)=SIGN(1.0_r8  ,etc(i)-ea(i))
 3662.  1                     egf (i)=SIGN(1.0_r8  ,etg(i)-ea(i))
 3663.  1                     dewc(i)=fc(i)*2.0_r8  -1.0_r8
 3664.  1                     dewg(i)=fg(i)*2.0_r8  -1.0_r8
 3665.  1                     ecf (i)=ecf(i)*dewc(i)
 3666.  1                     egf (i)=egf(i)*dewg(i)
 3667.  1                  END IF
 3668.  1--------->     END DO
 3669.              
 3670.  1---------<     DO i = 1, nmax
 3671.  1                  IF ( (ecf(i) > 0.0_r8  .AND. egf(i) > 0.0_r8 ).OR. &
 3672.  1                       idewco(i) == 3) THEN
 3673.  1                     icheck(i)=0
 3674.  1                  ELSE
 3675.  1                     idewco(i)=idewco(i)+1
 3676.  1                     IF (idewco(i) == 1) THEN
 3677.  1                        fc(i)=0.0_r8
 3678.  1                        fg(i)=1.0_r8
 3679.  1                     ELSE IF (idewco(i) == 2) THEN
 3680.  1                        fc(i)=1.0_r8
 3681.  1                        fg(i)=0.0_r8
 3682.  1                     ELSE IF (idewco(i) == 3) THEN
 3683.  1                        fc(i)=0.0_r8
 3684.  1                        fg(i)=0.0_r8
 3685.  1                     END IF
 3686.  1                  END IF
 3687.  1--------->     END DO
 3688.              
 3689.  1---------<     DO i=1,nmax
 3690.  1                  IF (icheck(i) == 1) go to 3000
 3691.  1--------->     END DO
 3692.              
 3693.                  CALL temres(&
 3694.                       bps   ,psb   ,em    ,gmt   ,gmq   ,psy   ,rcp   ,wc    ,wg    , &
 3695.                       fc    ,fg    ,hr    ,hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm , &
 3696.                       egdtg ,egdtc ,egdqm ,ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm, &
 3697.                       ect   ,eci   ,egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    , &
 3698.                       ecidif,egidif,ra    ,rb    ,rd    ,rc    ,rg    ,ta    ,ea    , &
 3699.                       etc   ,etg   ,btc   ,btg   ,radt  ,rst   ,rsoil ,hrr   ,cc    , &
 3700.                       cg    ,satcap,dtc   ,dtg   ,dtm   ,dqm   ,thermk,tc    ,tg    , &
 3701.                       td    ,capac ,qm    ,tm    ,psur  ,dtc3x , &
 3702.                       nmax  ,vcover2,ncols)
 3703.              
 3704.                  IF (ncount <= 1) THEN
 3705.  V---------<        DO i = 1, nmax
 3706.  V                     tc(i)=tc(i)+dtc(i)
 3707.  V                     tg(i)=tg(i)+dtg(i)
 3708.  V                     tm(i)=tm(i)+dtm(i)
 3709.  V                     qm(i)=qm(i)+dqm(i)
 3710.  V--------->        END DO
 3711.                     go to 7000
 3712.                  END IF
 3713.              
 3714.  Vp I------>     CALL update( &
 3715.                       bps   ,deadtg,deadtc,deadqm,ect   ,eci   ,egt   ,egi   ,egs   , &
 3716.                       eg    ,hc    ,hg    ,ecmass,egmass,etmass,hflux ,chf   ,shf   , &
 3717.                       ra    ,rb    ,rd    ,ea    ,etc   ,etg   ,btc   ,btg   ,cc    , &
 3718.                       cg    ,dtc   ,dtg   ,dtm   ,dqm   ,tc    ,tg    ,td    ,capac , &
 3719.                       tm    ,nmax  ,dtc3x ,ncols)
 3720.              
 3721.  V---------<     DO i = 1, nmax
 3722.  V                  fac     =grav/(100.0_r8 *psb(i)*dtc3x)
 3723.  V                  dtmdt   =(gmt(i,3) + hflux (i) * fac   /(cp*bps(i)))/gmt(i,2)
 3724.  V                  dqmdt   =(gmq(i,3) + etmass(i) * fac)  / gmq(i,2)
 3725.  V                  dtm  (i)=dtmdt   *   dtc3x
 3726.  V                  dqm  (i)=dqmdt   *   dtc3x
 3727.  V                  gmt(i,3)=dtmdt
 3728.  V                  gmq(i,3)=dqmdt
 3729.  V                  tm   (i)=tm(i)+dtm(i)
 3730.  V                  qm   (i)=qm(i)+dqm(i)
 3731.  V--------->     END DO
 3732.  Vp--------<     DO i = 1, nmax
 3733.  Vp                 ntyp=itype(i)
 3734.  Vp                 !vcover(i,2)=xcover(ntyp,mon(i),2)
 3735.  Vp                 d     (i)=xd (ntyp,mon(i))
 3736.  Vp                 z0x   (i)=x0x(ntyp,mon(i))
 3737.  Vp                 rdc   (i)=xdc(ntyp,mon(i))
 3738.  Vp                 rbc   (i)=xbc(ntyp,mon(i))
 3739.  Vp-------->     END DO
 3740.                END SUBROUTINE sflxes
 3741.                !
 3742.                !
 3743.                !
 3744.                ! interc :calculation of (1) interception and drainage of rainfall and snow
 3745.                !                        (2) specific heat terms fixed for time step
 3746.                !                        (3) modifications for 4-th order model may not
 3747.                !                            conserve energy;
 3748.                !         modification: non-uniform precipitation convective ppn
 3749.                !                       is described by area-intensity relationship :-
 3750.                !
 3751.                !                       f(x)=a*exp(-b*x)+c
 3752.                !
 3753.                !                       throughfall, interception and infiltration
 3754.                !                       excess are functional on this relationship
 3755.                !                       and proportion of large-scale ppn.
 3756.              
 3757.              
 3758.              
 3759.                SUBROUTINE interc( &
 3760.                     roff  ,cc    ,cg    ,satcap,snow  ,extk  ,tc    ,tg    ,td    , &
 3761.                     capac ,w     ,tm    ,ppc   ,ppl   ,vcover,itype ,dtc3x , &
 3762.                     nmax  ,ncols ,zlt2 )
 3763.                  !
 3764.                  !
 3765.                  !        input parameters
 3766.                  !-----------------------------------------------------------------------
 3767.                  !   ppc.............precipitation rate ( cumulus )           (mm/s)
 3768.                  !   ppl.............precipitation rate ( large scale )       (mm/s)
 3769.                  !   w(1)............soil wetnessof ground surface
 3770.                  !   poros...........porosity
 3771.                  !   pie.............pai=3.14159..
 3772.                  !   cw..............liquid water heat capacity               (j/m**3)
 3773.                  !   clai............heat capacity of foliage
 3774.                  !   capac(cg).......canopy/ground cover liquid water capacity(m)
 3775.                  !   satcap(cg)......saturation liquid water capacity         (m)
 3776.                  !   extk(cg,  ,  )..extinction coefficient
 3777.                  !   zlt(1)..........canopy leaf and stem area density        (m**2/m**3)
 3778.                  !   zlt(2)..........ground cover leaf and stem area index    (m**2/m**2)
 3779.                  !   vcover(cg)......vegetation cover
 3780.                  !   tm..............reference temperature                    (k)
 3781.                  !   tc..............canopy temperature                       (k)
 3782.                  !   tg..............ground temperature                       (k)
 3783.                  !   tf..............freezing point                           (k)
 3784.                  !   satco............mean soil hydraulic conductivity in the root zone
 3785.                  !                                                            (m/s)
 3786.                  !   dtc3x...........time increment dt
 3787.                  !   snomel..........heat of melting                          (j/kg)
 3788.                  !-----------------------------------------------------------------------
 3789.                  !     in subr. parameters
 3790.                  !-----------------------------------------------------------------------
 3791.                  !   chisl...........soil conductivity
 3792.                  !   difsl...........soil diffusivity
 3793.                  !-----------------------------------------------------------------------
 3794.                  !       output parameters
 3795.                  !-----------------------------------------------------------------------
 3796.                  !   roff............runoff
 3797.                  !   snow............snow amount
 3798.                  !   capac(cg).......canopy/ground cover liquid water capacity(m)
 3799.                  !   cc..............heat capacity of the canopy
 3800.                  !   cg..............heat capacity of the ground
 3801.                  !   w(1)............soil wetnessof ground surface
 3802.                  !-----------------------------------------------------------------------
 3803.                  !   ncols...........Numero de ponto por faixa de latitude
 3804.                  !   ityp............numero das classes de solo 13
 3805.                  !   imon............Numero maximo de meses no ano (12)
 3806.                  !   icg.............Parametros da vegetacao (icg=1 topo e icg=2 base)
 3807.                  !   iwv.............Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 3808.                  !                   proximo, iwv=3 infravermelho termal
 3809.                  !   idp.............Camadas de solo (1 a 3)
 3810.                  !   ibd.............Estado da vegetacao  ibd=1 verde / ibd=2 seco
 3811.                  !   mon.............Numero do mes do ano (1-12)
 3812.                  !   nmax
 3813.                  !   zdepth..........Profundidade para as tres camadas de solo
 3814.                  !   itype...........Classe de textura do solo
 3815.                  !   td..............Temperatura do solo profundo (K)
 3816.                  !-----------------------------------------------------------------------
 3817.                  INTEGER, INTENT(in   ) :: ncols
 3818.              
 3819.                  REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 3820.                  INTEGER, INTENT(in   ) :: nmax
 3821.              
 3822.                  INTEGER, INTENT(in   ) :: itype (ncols)
 3823.                  REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 3824.                  !
 3825.                  !     the size of working area is ncols*187
 3826.                  !
 3827.                  !     atmospheric parameters as boudary values for sib
 3828.                  !
 3829.                  REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 3830.                  REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 3831.                  REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 3832.                  !
 3833.                  !     prognostic variables
 3834.                  !
 3835.                  REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 3836.                  REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 3837.                  REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 3838.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 3839.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 3840.                  !
 3841.                  !     variables calculated from above and ambient conditions
 3842.                  !
 3843.                  REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
 3844.                  REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
 3845.                  REAL(KIND=r8),    INTENT(in   ) :: satcap(ncols,icg)
 3846.                  REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 3847.                  REAL(KIND=r8),    INTENT(in   ) :: extk  (ncols,icg,iwv,ibd)
 3848.                  !
 3849.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 3850.                  !
 3851.                  REAL(KIND=r8),   INTENT(inout) :: roff  (ncols)
 3852.                  REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 3853.              
 3854.                  !
 3855.                  REAL(KIND=r8)    :: ap         (ncols)
 3856.                  REAL(KIND=r8)    :: cp         (ncols)
 3857.                  REAL(KIND=r8)    :: totalp(ncols)
 3858.                  REAL(KIND=r8)    :: thru  (ncols)
 3859.                  REAL(KIND=r8)    :: fpi   (ncols)
 3860.                  REAL(KIND=r8)    :: chisl (ncols)
 3861.                  REAL(KIND=r8)    :: csoil (ncols)
 3862.                  REAL(KIND=r8)    :: p0         (ncols)
 3863.                  REAL(KIND=r8)    :: ts         (ncols)
 3864.                  REAL(KIND=r8)    :: specht(ncols)
 3865.                  REAL(KIND=r8)    :: spwet1(ncols)
 3866.                  REAL(KIND=r8)    :: zload (ncols)
 3867.                  REAL(KIND=r8)    :: ccp   (ncols)
 3868.                  REAL(KIND=r8)    :: cct   (ncols)
 3869.                  REAL(KIND=r8)    :: zmelt (ncols)
 3870.                  REAL(KIND=r8)    :: xsc   (ncols)
 3871.                  REAL(KIND=r8)    :: tti   (ncols)
 3872.                  REAL(KIND=r8)    :: xs         (ncols)
 3873.                  REAL(KIND=r8)    :: arg   (ncols)
 3874.                  REAL(KIND=r8)    :: tex   (ncols)
 3875.                  REAL(KIND=r8)    :: tsd   (ncols)
 3876.                  REAL(KIND=r8)    :: pinf  (ncols)
 3877.                  REAL(KIND=r8)    :: equdep(ncols)
 3878.                  REAL(KIND=r8)    :: roffo (ncols)
 3879.                  REAL(KIND=r8)    :: tsf   (ncols)
 3880.                  REAL(KIND=r8)    :: diff  (ncols)
 3881.                  REAL(KIND=r8)    :: freeze(ncols)
 3882.                  REAL(KIND=r8)    :: ccc   (ncols)
 3883.                  REAL(KIND=r8)    :: spwet (ncols)
 3884.                  REAL(KIND=r8)    :: snowp (ncols,2)
 3885.                  REAL(KIND=r8)    :: capacp(ncols,2)
 3886.              
 3887.                  REAL(KIND=r8), PARAMETER :: pcoefs(2,2) = RESHAPE ( &
 3888.                       (/20.0_r8    ,0.0001_r8  ,0.206e-8_r8,0.9999_r8  /), &
 3889.                       (/2,2/))
 3890.                  REAL(KIND=r8), PARAMETER :: bp = 20.0_r8
 3891.                  REAL(KIND=r8), PARAMETER :: difsl = 5.0e-7_r8
 3892.                  REAL(KIND=r8)    :: d1x
 3893.                  REAL(KIND=r8)    :: theta
 3894.                  INTEGER :: i
 3895.                  INTEGER :: iveg
 3896.                  INTEGER :: ntyp
 3897.                  !
 3898.                  !     diffusivity of the soil
 3899.                  !            --          --
 3900.                  !           |    86400.0   |
 3901.                  !d1x   =SQRT|--------------|*0.5
 3902.                  !           |  (pie*difsl  |
 3903.                  !            --          --
 3904.                  d1x   =SQRT(86400.0_r8 /(pie*difsl))*0.5_r8
 3905.                  !
 3906.  V--------<>     ap    = 0.0_r8 !  CALL reset(ap,ncols*33)
 3907.  1---------<     DO i = 1, nmax
 3908.  1                  ap(i)=pcoefs(2,1)
 3909.  1                  cp(i)=pcoefs(2,2)
 3910.  1                  totalp(i) = ppc(i) + ppl(i)
 3911.  1                  IF (totalp(i) >= 1.0e-8_r8) THEN
 3912.  1                     !
 3913.  1                     !       (ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))
 3914.  1                     !ap(i)=---------------------------------------------
 3915.  1                     !                     totalp(i)
 3916.  1                     !
 3917.  1                     ap(i)=(ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))/totalp(i)
 3918.  1                     !
 3919.  1                     !       (ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))
 3920.  1                     !ap(i)=---------------------------------------------
 3921.  1                     !                     totalp(i)
 3922.  1                     !
 3923.  1                     cp(i)=(ppc(i)*pcoefs(1,2) + ppl(i)*pcoefs(2,2))/totalp(i)
 3924.  1                     !
 3925.  1                  END IF
 3926.  1                  roff(i)=0.0_r8
 3927.  1                  thru(i)=0.0_r8
 3928.  1                  fpi (i)=0.0_r8
 3929.  1                  !
 3930.  1                  !     conductivity of the soil, taking into account porosity
 3931.  1                  !
 3932.  1                  ntyp    = itype(i)
 3933.  1                  !
 3934.  1                  theta   = w(i,1)*poros(ntyp)
 3935.  1                  !
 3936.  1                  !            ( 9.8e-4 + 1.2e-3 * theta )
 3937.  1                  !chisl(i) = -----------------------------
 3938.  1                  !             ( 1.1 - 0.4 * theta )
 3939.  1                  !
 3940.  1                  chisl(i) = ( 9.8e-4_r8 + 1.2e-3_r8 *theta ) / ( 1.1_r8 - 0.4_r8 *theta )
 3941.  1                  !
 3942.  1                  chisl(i) = chisl(i)*4.186e2_r8
 3943.  1                  !
 3944.  1                  !     heat capacity of the soil
 3945.  1                  !
 3946.  1                  !            --          --
 3947.  1                  !           |    86400.0   |
 3948.  1                  !d1x   =SQRT|--------------|*0.5
 3949.  1                  !           |  (pie*difsl) |
 3950.  1                  !            --          --
 3951.  1                  csoil(i)=chisl(i)*d1x
 3952.  1                  !
 3953.  1                  !     precipitation is given in mm
 3954.  1                  !
 3955.  1                  p0(i)=totalp(i)*0.001_r8
 3956.  1--------->     END DO
 3957.                  !
 3958.                  !
 3959.                  !
 3960.  1---------<     DO iveg = 1, 2
 3961.  1           
 3962.  1                  IF (iveg == 1) THEN
 3963.  1 V-------<           DO i = 1, nmax
 3964.  1 V                      ntyp     =itype(i)
 3965.  1 V                      ts    (i)=tc (i)
 3966.  1 V                      !  zlt(icg) = Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa /icg=2 base da copa
 3967.  1 V                      !  clai     = heat capacity of foliage
 3968.  1 V                      specht(i)=zlt2(i,1)*clai
 3969.  1 V------->           END DO
 3970.  1                  ELSE
 3971.  1 V-------<           DO i = 1, nmax
 3972.  1 V                      ts    (i)=tg (i)
 3973.  1 V                      specht(i)=csoil(i) !  heat capacity of the soil
 3974.  1 V------->           END DO
 3975.  1                  END IF
 3976.  1           
 3977.  1 Vc------<        DO i = 1, nmax
 3978.  1 Vc                  IF (iveg == 1 .OR. ts(i) > tf) THEN
 3979.  1 Vc                     !
 3980.  1 Vc                     ! capac(1/2) = canopy/ground cover liquid water capacity(m)
 3981.  1 Vc                     ! satcap(cg) = saturation liquid water capacity         (m)
 3982.  1 Vc                     !
 3983.  1 Vc                     xsc(i) = MAX(0.0_r8  , capac(i,iveg) - satcap(i,iveg))
 3984.  1 Vc                     !
 3985.  1 Vc                     capac(i,iveg) = capac(i,iveg) - xsc(i)
 3986.  1 Vc                     !
 3987.  1 Vc                     roff(i) = roff(i) + xsc(i)
 3988.  1 Vc                  END IF
 3989.  1 Vc------>        END DO
 3990.  1           
 3991.  1 2-------<        DO i = 1, nmax
 3992.  1 2                   ntyp=itype(i)
 3993.  1 2                   !
 3994.  1 2                   !   cw  = liquid water heat capacity (j/m**3)
 3995.  1 2                   !
 3996.  1 2                   spwet1(i)=MIN(0.05_r8 ,capac(i,iveg))*cw
 3997.  1 2                   !
 3998.  1 2                   capacp(i,iveg)=0.0_r8
 3999.  1 2                   !
 4000.  1 2                   snowp (i,iveg)=0.0_r8
 4001.  1 2                   !
 4002.  1 2                   IF (ts(i) > tf) THEN
 4003.  1 2                      capacp(i,iveg)=capac (i,iveg)
 4004.  1 2                   ELSE
 4005.  1 2                      snowp (i,iveg)=capac (i,iveg)
 4006.  1 2                   END IF
 4007.  1 2                   !
 4008.  1 2                   capac (i,iveg)=capacp(i,iveg)
 4009.  1 2                   !
 4010.  1 2                   snow  (i,iveg)=snowp (i,iveg)
 4011.  1 2                   !
 4012.  1 2                   zload (i)     =capac (i,iveg) + snow(i,iveg)
 4013.  1 2                   !
 4014.  1 2                   !                --                                            --
 4015.  1 2                   !               |             --                              -- |
 4016.  1 2                   !               |            | -extk(i,iveg,3,1) * zlt2(i,iveg) ||
 4017.  1 2                   !fpi   (i)     =| 1.0  -  EXP|----------------------------------|| * vcover(i,iveg)
 4018.  1 2                   !               |            |         vcover(i,iveg)           ||
 4019.  1 2                   !               |              --                              --|
 4020.  1 2                   !                --                                            --
 4021.  1 2                   !
 4022.  1 2                   fpi   (i)     =( 1.0_r8 -EXP(-extk(i,iveg,3,1)*zlt2(i,iveg) &
 4023.  1 2                        /vcover(i,iveg))) *vcover(i,iveg)
 4024.  1 2                   !
 4025.  1 2                   tti(i)=p0(i)*( 1.0_r8 -fpi(i) )
 4026.  1 2                   !
 4027.  1 2                   IF (iveg.EQ.2) tti(i) = p0(i)
 4028.  1 2------->        END DO
 4029.  1                  !
 4030.  1                  !     proportional saturated area (xs) and leaf drainage(tex)
 4031.  1                  !
 4032.  1 2-------<        DO i = 1, nmax
 4033.  1 2                   xs(i)=1.0_r8
 4034.  1 2                   IF (p0(i) >= 1.0e-9_r8) THEN
 4035.  1 2                      !
 4036.  1 2                      !        (satcap(i,iveg) - zload(i))      cp(i)
 4037.  1 2                      !arg(i)=----------------------------- - ---------
 4038.  1 2                      !          (p0(i)*fpi(i)*ap(i))           ap(i)
 4039.  1 2                      !
 4040.  1 2                      arg(i)=(satcap(i,iveg)-zload(i))/ &
 4041.  1 2                           (p0(i)*fpi(i)*ap(i)) - cp(i)/ap(i)
 4042.  1 2                      IF (arg(i) >= 1.0e-9_r8) THEN
 4043.  1 2                         !
 4044.  1 2                         !         -1.0
 4045.  1 2                         !xs(i) = ------ * LOG(arg(i))
 4046.  1 2                         !          bp
 4047.  1 2                         !
 4048.  1 2                         xs(i)=-1.0_r8/bp * LOG( arg(i) )
 4049.  1 2                         xs(i)= MIN ( xs(i) , 1.0_r8 )
 4050.  1 2                         xs(i)= MAX ( xs(i) , 0.0_r8 )
 4051.  1 2                      END IF
 4052.  1 2                   END IF
 4053.  1 2------->        END DO
 4054.  1           
 4055.  1 2-------<        DO i = 1, nmax
 4056.  1 2                   !                     --                                        --
 4057.  1 2                   !                    | ap(i)                                      |
 4058.  1 2                   !tex(i)=p0(i)*fpi(i)*|-------*(1.0 - EXP(-bp*xs(i))) + cp(i)*xs(i)|-(satcap(i,iveg) - zload(i))*xs(i)
 4059.  1 2                   !                    |  bp                                        |
 4060.  1 2                   !                     --                                        --
 4061.  1 2                   tex(i)=p0(i)*fpi(i)*(ap(i)/bp*(1.0_r8 -EXP(-bp*xs(i)))+cp(i)*xs(i)) &
 4062.  1 2                        -(satcap(i,iveg)-zload(i))*xs(i)
 4063.  1 2         
 4064.  1 2                   tex(i)= MAX ( tex(i), 0.0_r8 )
 4065.  1 2                   !
 4066.  1 2                   IF (iveg == 2) tex(i) = 0.0_r8
 4067.  1 2                   !
 4068.  1 2                   !     total throughfall (thru) and store augmentation
 4069.  1 2                   !
 4070.  1 2                   thru(i)=tti(i)+tex(i)
 4071.  1 2                   IF (iveg == 2 .AND. tg(i) <= tf) THEN
 4072.  1 2                      thru(i)=0.0_r8
 4073.  1 2                   END IF
 4074.  1 2         
 4075.  1 2                   pinf(i)=p0(i) - thru(i)
 4076.  1 2         
 4077.  1 2                   IF (tm(i) > tf) THEN
 4078.  1 2                      capac(i,iveg) = capac(i,iveg) + pinf(i)
 4079.  1 2                   ELSE
 4080.  1 2                      snow (i,iveg) = snow (i,iveg) + pinf(i)
 4081.  1 2                   END IF
 4082.  1 2------->        END DO
 4083.  1           
 4084.  1                  IF (iveg == 2)   THEN
 4085.  1 2-------<           DO i = 1, nmax
 4086.  1 2                      ntyp=itype(i)
 4087.  1 2                      IF (tm(i) <= tf) THEN
 4088.  1 2                         snow  (i,iveg) = snowp(i,iveg) + p0(i)
 4089.  1 2                         thru  (i)=0.0_r8
 4090.  1 2                      ELSE
 4091.  1 2                         !
 4092.  1 2                         !     instantaneous overland flow contribution ( roff )
 4093.  1 2                         !
 4094.  1 2                         equdep(i)=satco(ntyp)*dtc3x
 4095.  1 2                         xs(i)=1.0_r8
 4096.  1 2                         IF (thru(i) >= 1.0e-9_r8) THEN
 4097.  1 2                            arg(i)=equdep(i)/( thru(i)*ap(i) ) -cp(i)/ap(i)
 4098.  1 2                            IF (arg(i) >= 1.0e-9_r8) THEN
 4099.  1 2                               xs(i)=-1.0_r8 /bp* LOG( arg(i) )
 4100.  1 2                               xs(i)= MIN ( xs(i), 1.0_r8 )
 4101.  1 2                               xs(i)= MAX ( xs(i), 0.0_r8 )
 4102.  1 2                            END IF
 4103.  1 2                         END IF
 4104.  1 2                         roffo(i)=thru(i)* &
 4105.  1 2                              (ap(i)/bp*(1.0_r8 -EXP(-bp*xs(i)))+cp(i)*xs(i)) &
 4106.  1 2                              -equdep(i)*xs(i)
 4107.  1 2                         roffo(i)= MAX ( roffo(i), 0.0_r8 )
 4108.  1 2                         roff (i)= roff (i)+roffo(i)
 4109.  1 2                         w(i,1)=w(i,1)+(thru(i)-roffo(i))/ &
 4110.  1 2                              ( poros(ntyp)*zdepth(ntyp,1))
 4111.  1 2                      END IF
 4112.  1 2------->           END DO
 4113.  1                  END IF
 4114.  1                  !
 4115.  1                  !     temperature change due to addition of precipitation
 4116.  1                  !
 4117.  1 V-------<        DO i = 1, nmax
 4118.  1 V                   diff(i)=(capac (i,iveg)+snow (i,iveg) &
 4119.  1 V                        -capacp(i,iveg)-snowp(i,iveg))*cw
 4120.  1 V                   ccp(i)=specht(i)+spwet1(i)
 4121.  1 V                   cct(i)=specht(i)+spwet1(i)+diff(i)
 4122.  1 V                   tsd(i)=( ts(i)*ccp(i)+tm(i)*diff(i) )/cct(i)
 4123.  1 V                   tsf(i)=( ts(i)-tf)*( tm(i)-tf)
 4124.  1 V------->        END DO
 4125.  1 2-------<        DO i = 1, nmax
 4126.  1 2                   IF (tsf(i) < 0.0_r8) THEN
 4127.  1 2                      IF (tsd(i) <= tf) THEN
 4128.  1 2                         !
 4129.  1 2                         !     freezing of water on canopy or ground
 4130.  1 2                         !
 4131.  1 2                         ccc(i)=capacp(i,iveg)*snomel
 4132.  1 2                         IF (ts(i) < tm(i)) ccc(i)=diff(i)*snomel/cw
 4133.  1 2                         tsd   (i)=( ts(i)*ccp(i)+tm(i)*diff(i)+ccc(i) )/cct(i)
 4134.  1 2                         freeze(i)= tf*cct(i)-( ts(i)*ccp(i)+tm(i)*diff(i) )
 4135.  1 2                         freeze(i)=( MIN ( ccc(i), freeze(i) ))/snomel
 4136.  1 2                         IF (tsd(i) > tf) tsd(i) = tf - 0.1_r8
 4137.  1 2                         snow (i,iveg)=snow (i,iveg)+freeze(i)
 4138.  1 2                         capac(i,iveg)=capac(i,iveg)-freeze(i)
 4139.  1 2                      ELSE
 4140.  1 2                         !
 4141.  1 2                         !     melting of water on canopy or ground
 4142.  1 2                         !
 4143.  1 2                         ccc(i)=- snow(i,iveg)*snomel
 4144.  1 2                         IF (ts(i) > tm(i)) ccc(i)=- diff(i)*snomel/cw
 4145.  1 2                         tsd   (i)=( ts(i)*ccp(i)+tm(i)*diff(i)+ccc(i) )/cct(i)
 4146.  1 2                         freeze(i)=( tf*cct(i)-( ts(i)*ccp(i)+tm(i)*diff(i) ))
 4147.  1 2                         freeze(i)= MAX ( ccc(i), freeze(i) ) /snomel
 4148.  1 2                         IF (tsd(i) <= tf) tsd(i) = tf - 0.1_r8
 4149.  1 2                         snow (i,iveg)=snow (i,iveg)+freeze(i)
 4150.  1 2                         capac(i,iveg)=capac(i,iveg)-freeze(i)
 4151.  1 2                      END IF
 4152.  1 2                   END IF
 4153.  1 2------->        END DO
 4154.  1 V-------<        DO i = 1, nmax
 4155.  1 V                   IF (iveg == 1) THEN
 4156.  1 V                      tc(i)=tsd(i)
 4157.  1 V                   ELSE
 4158.  1 V                      tg(i)=tsd(i)
 4159.  1 V                   END IF
 4160.  1 V------->        END DO
 4161.  1 2-------<        DO i = 1, nmax
 4162.  1 2                   IF (snow(i,iveg) >= 0.0000001_r8 .OR. iveg == 2) THEN
 4163.  1 2                      zmelt(i) = 0.0_r8
 4164.  1 2                      IF (td(i) > tf) THEN
 4165.  1 2                         zmelt(i)=capac(i,iveg)
 4166.  1 2                      ELSE
 4167.  1 2                         roff (i)=roff(i)+capac(i,iveg)
 4168.  1 2                      END IF
 4169.  1 2                      capac(i,iveg)=0.0_r8
 4170.  1 2                      !
 4171.  1 2                      !     if tg is less than tf water accumulates as snowpack in capac(2)
 4172.  1 2                      !
 4173.  1 2                      ntyp=itype(i)
 4174.  1 2                      w(i,1)=w(i,1)+zmelt(i)/( poros(ntyp)*zdepth(ntyp,1))
 4175.  1 2                   END IF
 4176.  1 2------->        END DO
 4177.  1 V-------<        DO i = 1, nmax
 4178.  1 V                   !
 4179.  1 V                   !     these lines exist to eliminate a cray compiler error
 4180.  1 V                   !
 4181.  1 V                   IF (iveg == 2) THEN
 4182.  1 V                      IF (snow(i,2) > 0.0_r8 .AND. tg(i) > 273.16_r8) THEN
 4183.  1 V                      END IF
 4184.  1 V                      IF (capac(i,2) > 0.0_r8 .AND. tg(i) > 273.16_r8) THEN
 4185.  1 V                      END IF
 4186.  1 V                   END IF
 4187.  1 V                   capac(i,iveg)=capac(i,iveg)+snow(i,iveg)
 4188.  1 V                   snow (i,iveg)=0.0_r8
 4189.  1 V                   p0(i)=thru(i)
 4190.  1 V------->        END DO
 4191.  1--------->     END DO
 4192.                  !
 4193.                  !     calculation of canopy and ground heat capacities.
 4194.                  !
 4195.  V---------<     DO i = 1, nmax
 4196.  V                  ntyp=itype(i)
 4197.  V                  cc(i)=zlt2(i,1)*clai+capac(i,1)*cw
 4198.  V                  spwet(i)=MIN( 0.05_r8 , capac(i,2))*cw
 4199.  V                  cg(i)=csoil(i)+spwet(i)
 4200.  V--------->     END DO
 4201.                END SUBROUTINE interc
 4202.              
 4203.              
 4204.              
 4205.                ! stomat :performs stomatal resistance.
 4206.              
 4207.              
 4208.              
 4209.                SUBROUTINE stomat( &
 4210.                     cosz  ,par   ,pd    ,rst   ,extk  ,vcover,itype ,nmax  ,ncols ,&
 4211.                     zlt2  ,green2,chil2 ,rstpar2)
 4212.                  !
 4213.                  !
 4214.                  !-----------------------------------------------------------------------
 4215.                  !      input parameters
 4216.                  !-----------------------------------------------------------------------
 4217.                  !   cosz.............cosine of zenith angle
 4218.                  !   extk(cg,vnt,bd)..extinction coefficient
 4219.                  !   zlt   (cg).......leaf area index
 4220.                  !   vcover(cg).......fraction of vegetation cover
 4221.                  !   green (cg).......fraction of grenn leaves
 4222.                  !   chil  (cg).......leaf orientation pameter
 4223.                  !   rstpar(cg,3).....coefficints related to par influence on
 4224.                  !                    stomatal resistance
 4225.                  !   radn   (vnt,bd)..downward sw/lw radiation at the surface
 4226.                  !   par   (cg).......par( photo-synthetic active radiation)
 4227.                  !   pd    (cg).......ratio of par(beam) to par(beam+diffuse)
 4228.                  !-----------------------------------------------------------------------
 4229.                  !     output parameters
 4230.                  !-----------------------------------------------------------------------
 4231.                  !   rst(cg)..........stomatal reistance
 4232.                  !-----------------------------------------------------------------------
 4233.                  !   itype............Classe de textura do solo
 4234.                  !   nmax
 4235.                  !   pie..............Constante Pi=3.1415926e0
 4236.                  !   athird...........Constante athird=1.0e0 /3.0e0
 4237.                  !   ncols............Numero de ponto por faixa de latitude
 4238.                  !   ityp.............numero das classes de solo 13
 4239.                  !   imon.............Numero maximo de meses no ano (12)
 4240.                  !   icg..............Parametros da vegetacao (icg=1 topo e icg=2 base)
 4241.                  !   iwv..............Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4242.                  !                    proximo, iwv=3 infravermelho termal
 4243.                  !   ibd..............Estado da vegetacao ibd=1 verde / ibd=2 seco
 4244.                  !-----------------------------------------------------------------------
 4245.                  !
 4246.                  INTEGER, INTENT(in   ) :: ncols
 4247.                  INTEGER, INTENT(in   ) :: nmax
 4248.                  REAL(KIND=r8)   , INTENT(in   ) :: rstpar2(ncols,icg,iwv)
 4249.                  INTEGER, INTENT(in   ) :: itype (ncols)
 4250.                  REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 4251.                  REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 4252.                  REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 4253.                  REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 4254.              
 4255.                  !
 4256.                  !     variables calculated from above and ambient conditions
 4257.                  !
 4258.                  REAL(KIND=r8),    INTENT(in   ) :: par   (ncols,icg)
 4259.                  REAL(KIND=r8),    INTENT(in   ) :: pd    (ncols,icg)
 4260.                  REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
 4261.                  REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 4262.                  !
 4263.                  !     this is for coupling with closure turbulence model
 4264.                  !
 4265.                  REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 4266.                  !
 4267.                  REAL(KIND=r8)    :: f     (ncols)
 4268.                  REAL(KIND=r8)    :: gamma (ncols)
 4269.                  REAL(KIND=r8)    :: at    (ncols)
 4270.                  REAL(KIND=r8)    :: power1(ncols)
 4271.                  REAL(KIND=r8)    :: power2(ncols)
 4272.                  REAL(KIND=r8)    :: aa    (ncols)
 4273.                  REAL(KIND=r8)    :: bb    (ncols)
 4274.                  REAL(KIND=r8)    :: zat   (ncols)
 4275.                  REAL(KIND=r8)    :: zk    (ncols)
 4276.                  REAL(KIND=r8)    :: ekat  (ncols)
 4277.                  REAL(KIND=r8)    :: rho4  (ncols)
 4278.                  REAL(KIND=r8)    :: avflux(ncols)
 4279.                  !
 4280.                  INTEGER :: i
 4281.                  INTEGER :: iveg
 4282.                  INTEGER :: irad
 4283.                  REAL(KIND=r8)    :: fcon
 4284.                  REAL(KIND=r8)    :: xabc
 4285.                  REAL(KIND=r8)    :: xabd
 4286.                  REAL(KIND=r8)    :: ftemp
 4287.                  !
 4288.                  !
 4289.                  !     bounding of product of extinction coefficient and local l.a.i.
 4290.                  !
 4291.  V---------<     DO i = 1, nmax
 4292.  V                  f(i) = MAX( cosz(i), 0.01746_r8 )
 4293.  V--------->     END DO
 4294.                  !
 4295.  1---------<     DO iveg = 1, 2
 4296.  1 2-------<        DO irad = 1, 2 !Estado da vegetacao irad=1 verde / irad=2 seco
 4297.  1 2 V-----<           DO i = 1, nmax
 4298.  1 2 V                    !             --                   --
 4299.  1 2 V                    !            |             150       |
 4300.  1 2 V                    ! extk = MIN |  extk, -------------- |
 4301.  1 2 V                    !            |         zlt2 * vcover |
 4302.  1 2 V                    !             --                   --
 4303.  1 2 V                    !
 4304.  1 2 V                    extk(i,iveg,1,irad)=min(extk(i,iveg,1,irad),150.0_r8 / &
 4305.  1 2 V                         zlt2(i,iveg)*vcover(i,iveg))
 4306.  1 2 V----->           END DO
 4307.  1 2------->        END DO
 4308.  1--------->     END DO
 4309.                  !
 4310.                  fcon  =0.25_r8*pie + athird
 4311.                  iveg=1
 4312.                  !
 4313.  1---------<     DO i = 1, nmax
 4314.  1                  IF (itype(i) == 13 .OR. itype(i) == 11) THEN
 4315.  1                     rst(i,iveg) = 1.0e5_r8
 4316.  1                  ELSE
 4317.  1                     !
 4318.  1                     !        zlt2           leaf area index
 4319.  1                     ! at = -------- = ------------------------------
 4320.  1                     !       vcover     fraction of vegetation cover
 4321.  1                     !
 4322.  1                     !
 4323.  1                     at(i) = zlt2(i,iveg)/vcover(i,iveg)
 4324.  1                     !
 4325.  1                     IF (par(i,iveg) <= 0.00101_r8) THEN
 4326.  1                        !
 4327.  1                        ! iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4328.  1                        !             proximo, iwv=3 infravermelho termal
 4329.  1                        !
 4330.  1                        !            rstpar(visivel)
 4331.  1                        ! xabc = ------------------------- + rstpar(infravermelho termal)
 4332.  1                        !          rstpar(infravermelho)
 4333.  1                        !
 4334.  1                        xabc = rstpar2(i,iveg,1) / rstpar2(i,iveg,2) + rstpar2(i,iveg,3)
 4335.  1                        !
 4336.  1                        !        0.5
 4337.  1                        ! xabd =------ *  at(i)
 4338.  1                        !        xabc
 4339.  1                        !
 4340.  1                        xabd = 0.5_r8  / xabc * at(i)
 4341.  1                        !
 4342.  1                        !          1
 4343.  1                        ! rst  = ------
 4344.  1                        !         xabd
 4345.  1                        !
 4346.  1                        rst(i,iveg) = 1.0_r8 / xabd
 4347.  1                     ELSE
 4348.  1                        !
 4349.  1                        !         (rstpar2(visivel) + rstpar2(infravermelho)* rstpar2(infravermelho termal))
 4350.  1                        ! gamma =---------------------------------------------------------------------------
 4351.  1                        !                          rstpar2(infravermelho termal)
 4352.  1                        !
 4353.  1                        gamma(i)  = (rstpar2(i,iveg,1) + rstpar2(i,iveg,2) &
 4354.  1                             * rstpar2(i,iveg,3))/ rstpar2(i,iveg,3)
 4355.  1                        !
 4356.  1                        !     single extinction coefficient using weighted
 4357.  1                        !     values of direct and diffus contributions to p.a.r.
 4358.  1                        !
 4359.  1                        !
 4360.  1                        !        zlt            leaf area index
 4361.  1                        ! at = -------- = ------------------------------
 4362.  1                        !       vcover     fraction of vegetation cover
 4363.  1                        !
 4364.  1                        !
 4365.  1                        at(i)     = zlt2(i,iveg)/vcover(i,iveg)
 4366.  1                        !
 4367.  1                        !           zlt          150
 4368.  1                        !power1 = -------- * --------------
 4369.  1                        !          vcover     zlt2 * vcover
 4370.  1                        !
 4371.  1                        power1(i) = at(i)*extk(i,iveg,1,1)!Estado da vegetacao irad=1 verde
 4372.  1                        power2(i) = at(i)*extk(i,iveg,1,2)!Estado da vegetacao irad=2 seco
 4373.  1                        !
 4374.  1                        ! chil2   Leaf orientation parameter
 4375.  1                        !  icg    Parameters of vagetation (icg=1 top e icg=2 bottom)
 4376.  1                        !
 4377.  1                        ! aa(i)   = 0.5 - (0.633 + 0.33 * chil2(i,icg)) * chil2(i,icg)
 4378.  1                        !
 4379.  1                        aa(i)     = 0.5_r8 -(0.633_r8 + 0.33_r8 * chil2(i,iveg)) * chil2(i,iveg)
 4380.  1                        !
 4381.  1                        bb(i)     = 0.877_r8 -1.754_r8 *aa(i)
 4382.  1                        !
 4383.  1                        !
 4384.  1                        !        LOG(( EXP(-power1(i)) + 1 ) * 0.5 ) * pd(i,iveg)
 4385.  1                        !zat = ------------------------------------------------------
 4386.  1                        !                       extk(i,iveg,1,1)
 4387.  1                        !
 4388.  1                        !
 4389.  1                        zat(i)    = LOG(( EXP(-power1(i))+1.0_r8 )*0.5_r8 ) * pd(i,iveg) / extk(i,iveg,1,1)
 4390.  1                        !
 4391.  1                        zat(i)    = zat(i) + LOG((EXP(-power2(i)) + 1.0_r8 )*0.5_r8 )*( 1.0_r8 -pd(i,iveg))/extk(i,iveg,1,2)
 4392.  1                        !
 4393.  1                        zk(i)     = 1.0_r8 /zat(i) * LOG(pd(i,iveg) *EXP( power1(i)*zat(i)/at(i) ) &
 4394.  1                             + (1.0_r8 -pd(i,iveg))*EXP( power2(i)*zat(i)/at(i) ))
 4395.  1                        !
 4396.  1                        !     canopy and ground cover bulk resistances using
 4397.  1                        !     ross-goudriaan leaf function , total par flux (avflux) and
 4398.  1                        !     mean extinction coefficient (zk)
 4399.  1                        !
 4400.  1                        ftemp       = MIN( zk(i)*at(i),20.0_r8 )
 4401.  1                        ekat (i)    = EXP( ftemp )
 4402.  1                        !
 4403.  1                        !                                    --          --
 4404.  1                        !                                   |  aa(i)       |
 4405.  1                        !avflux = par(i,iveg) * (pd(i,iveg)*|------ + bb(i)| + (1 - pd(i,iveg))*(bb(i) * fcon + aa(i)*1.5))
 4406.  1                        !                                   |  f(i)        |
 4407.  1                        !                                    --          --
 4408.  1                        !
 4409.  1                        avflux(i)   = par(i,iveg)*( pd(i,iveg)*( aa(i)/f(i)+bb(i)) &
 4410.  1                             + ( 1.0_r8 -pd(i,iveg))*( bb(i)*fcon+aa(i)*1.5_r8 ))
 4411.  1                        !
 4412.  1                        !                 gamma(i)
 4413.  1                        !rho4(i)     = ----------------
 4414.  1                        !                 avflux(i)
 4415.  1                        !
 4416.  1                        rho4(i)     = gamma(i)/avflux(i)
 4417.  1                        !
 4418.  1                        !                         rstpar2(i,iveg,2)
 4419.  1                        !rst(i,iveg) = ----------------------------------------------
 4420.  1                        !                            --                        --
 4421.  1                        !                           |  (rho4(i) * ekat(i) + 1.0) |
 4422.  1                        !               gamma(i)*LOG|----------------------------|
 4423.  1                        !                           |   (rho4(i) + 1.0 )         |
 4424.  1                        !                            --                        --
 4425.  1                        !
 4426.  1                        rst(i,iveg) = rstpar2(i,iveg,2) / gamma(i)*LOG((rho4(i)*ekat(i)+1.0_r8 )/(rho4(i)+1.0_r8 ))
 4427.  1                        !
 4428.  1                        !
 4429.  1                        !
 4430.  1                        !
 4431.  1                        !
 4432.  1                        rst(i,iveg)=rst(i,iveg) - LOG((rho4(i)+1.0_r8 /ekat(i))/(rho4(i)+1.0_r8 ))
 4433.  1                        !
 4434.  1                        !             rst(i,iveg)
 4435.  1                        ! rst =----------------------------
 4436.  1                        !         zk(i) * rstpar2(i,iveg,3)
 4437.  1                        !
 4438.  1                        !
 4439.  1                        rst(i,iveg)=rst(i,iveg)/(zk(i)*rstpar2(i,iveg,3))
 4440.  1                        !
 4441.  1                        !                      1
 4442.  1                        ! rst = --------------------------------
 4443.  1                        !          rst(i,iveg) * green2(i,iveg)
 4444.  1                        !
 4445.  1                        rst(i,iveg)=1.0_r8 /( rst(i,iveg)*green2(i,iveg))
 4446.  1                     END IF
 4447.  1                  END IF
 4448.  1--------->     END DO
 4449.                  !
 4450.  V---------<     DO i = 1, nmax
 4451.  V                  rst(i,2) = 1.0e5_r8
 4452.  V--------->     END DO
 4453.                  !
 4454.                END SUBROUTINE stomat
 4455.              
 4456.              
 4457.              
 4458.                ! raduse :performs the absorption of radiation by surface.
 4459.              
 4460.              
 4461.              
 4462.                SUBROUTINE raduse(radt  ,par   ,pd    ,radfac,closs ,gloss ,thermk,p1f   , &
 4463.                     p2f   ,radn  ,vcover,nmax  ,ncols )
 4464.                  !
 4465.                  !-----------------------------------------------------------------------
 4466.                  ! input parameters
 4467.                  !-----------------------------------------------------------------------
 4468.                  !   tf...............freezing temperature
 4469.                  !   tg...............ground   temperature
 4470.                  !   polar............
 4471.                  !   radsav...........passesd from subr.radalb
 4472.                  !   radfac(cg,vn,bd).fractions of downward solar radiation at surface
 4473.                  !                    passed from subr.radalb
 4474.                  !   radn(vnt,bd).....downward sw/lw radiation at the surface
 4475.                  !   vcover(cg).......vegetation cover
 4476.                  !-----------------------------------------------------------------------
 4477.                  ! output parameters
 4478.                  !-----------------------------------------------------------------------
 4479.                  !   radt(cg).........net heat received by canopy/ground vegetation
 4480.                  !                    by radiation & conduction
 4481.                  !   par(cg)..........par incident on canopy
 4482.                  !   pd(cg)...........ratio of par beam to total par
 4483.                  !-----------------------------------------------------------------------
 4484.                  !
 4485.                  INTEGER, INTENT(in   ) :: ncols
 4486.                  INTEGER, INTENT(in   ) :: nmax
 4487.                  REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 4488.                  !
 4489.                  !     the size of working area is ncols*187
 4490.                  !     atmospheric parameters as boudary values for sib
 4491.                  !
 4492.                  REAL(KIND=r8),    INTENT(in   ) :: radn  (ncols,3,2)
 4493.                  !
 4494.                  !     variables calculated from above and ambient conditions
 4495.                  !
 4496.                  REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
 4497.                  REAL(KIND=r8),    INTENT(inout  ) :: par   (ncols,icg)
 4498.                  REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
 4499.                  REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 4500.                  REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 4501.                  REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 4502.                  REAL(KIND=r8),    INTENT(in   ) :: thermk(ncols)
 4503.                  REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 4504.                  REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 4505.              
 4506.              
 4507.                  REAL(KIND=r8) :: p1 (ncols)
 4508.                  REAL(KIND=r8) :: p2 (ncols)
 4509.              
 4510.              
 4511.                  INTEGER :: i
 4512.                  INTEGER :: iveg
 4513.                  INTEGER :: iwave
 4514.                  INTEGER :: irad
 4515.  V---------<     DO i = 1, nmax
 4516.  V                  radt(i,1)=0.0_r8
 4517.  V                  radt(i,2)=0.0_r8
 4518.  V--------->     END DO
 4519.                  !
 4520.                  ! radn(1,1)=!Downward Surface shortwave fluxe visible beam (cloudy)
 4521.                  ! radn(1,2)=!Downward Surface shortwave fluxe visible diffuse (cloudy)
 4522.                  ! radn(2,1)=!Downward Surface shortwave fluxe Near-IR beam (cloudy)
 4523.                  ! radn(2,2)=!Downward Surface shortwave fluxe Near-IR diffuse (cloudy)
 4524.                  ! radfac(cg,vn,bd).fractions of downward solar radiation at surface
 4525.                  !                    passed from subr.radalb
 4526.                  !
 4527.                  !     summation of radiation fractions for canopy and ground
 4528.                  !
 4529.  1---------<     DO iveg = 1, 2
 4530.  1 2-------<        DO iwave = 1, 2
 4531.  1 2 b-----<           DO irad = 1, 2
 4532.  1 2 b Vb--<              DO i = 1, nmax
 4533.  1 2 b Vb                    radt(i,iveg)=radt(i,iveg)+radfac(i,iveg,iwave,irad)*radn(i,iwave,irad)
 4534.  1 2 b Vb-->              END DO
 4535.  1 2 b----->           END DO
 4536.  1 2------->        END DO
 4537.  1--------->     END DO
 4538.                  !
 4539.                  !     total long wave ( and polar ice conduction ) adjustments to
 4540.                  !     canopy and ground net radiation terms
 4541.                  !     thermk = canopy emissivity
 4542.  V---------<     DO i = 1, nmax
 4543.  V                  radt(i,1) = radt(i,1) + radn(i,3,2) * vcover(i,1)*(1.0_r8 -thermk(i)) - closs(i)
 4544.  V                  radt(i,2) = radt(i,2) + radn(i,3,2) * (1.0_r8 - vcover(i,1)*(1.0_r8 -thermk(i))) - gloss(i)
 4545.  V                  par(i,1)  = radn(i,1,1) + radn(i,1,2) + 0.001_r8! total par incident on canopy
 4546.  V                  pd (i,1)  = (radn(i,1,1) + 0.001_r8 ) / par(i,1)! ratio of par beam on topo of the canopy to total par
 4547.  V                  p1(i)     = p1f(i)*radn(i,1,1) + 0.001_r8 ! net par beam on topo of the canopy
 4548.  V                  p2(i)     = p2f(i)*radn(i,1,2)            ! net par beam on base of the canopy
 4549.  V                  par(i,2)  = p1(i)+p2(i)! net par incident on canopy and ground
 4550.  V                  IF (par(i,1) <= 0.000001_r8) par(i,1) = 0.000001_r8
 4551.  V                  IF (par(i,2) <= 0.000001_r8) par(i,2) = 0.000001_r8
 4552.  V                  pd (i,2)  = p1(i)/par(i,2) !ratio of net par beam to net par incident on canopy and ground
 4553.  V--------->     END DO
 4554.                END SUBROUTINE raduse
 4555.              
 4556.              
 4557.              
 4558.                ! root   :performs soil moisture potentials in root zone of each
 4559.                !         vegetation layer and summed soil+root resistance.
 4560.              
 4561.              
 4562.              
 4563.                SUBROUTINE root(phroot,phsoil,w     ,itype ,nmax  , ncols )
 4564.                  !
 4565.                  ! input parameters
 4566.                  !-----------------------------------------------------------------------
 4567.                  !   w(1).............wetness of surface store
 4568.                  !   w(2).............wetness of root zone
 4569.                  !   w(3).............wetness of recharge zone
 4570.                  !   phsat............soil moisture potential at saturation   (m)
 4571.                  !   bee..............empirical constant
 4572.                  !   zdepth(3)........depth of the i-th soil layer            (m)
 4573.                  !   rootd (cg).......rooting depth                           (m)
 4574.                  !   satco............mean soil hydraulic conductivity in the root zone
 4575.                  !                                                            (m/s)
 4576.                  !   rootl(cg)........root density                            (m/m**3)
 4577.                  !   rootca(cg).......root cross section                      (m**2)
 4578.                  !   rdres(cg)........resistance per unit root length         (s/m)
 4579.                  !   rplant(cg).......area averaged resistance imposed by the plant
 4580.                  !                    vascular system                         (s)
 4581.                  !-----------------------------------------------------------------------
 4582.                  ! output parameters
 4583.                  !-----------------------------------------------------------------------
 4584.                  !   vroot............root volume density                     (m**3/m**3)
 4585.                  !-----------------------------------------------------------------------
 4586.                  ! output parameters
 4587.                  !-----------------------------------------------------------------------
 4588.                  !   phsoil(3)........soil moisture potential of the i-th soil layer
 4589.                  !                                                            (m)
 4590.                  !   rootr(cg)........root resistance                         (s)
 4591.                  !-----------------------------------------------------------------------
 4592.                  !
 4593.                  !   imax.............Numero de ponto por faixa de latitude
 4594.                  !   ityp.............numero das classes de solo 13
 4595.                  !   icg..............Parametros da vegetacao (icg=1 topo e icg=2 base)
 4596.                  !   idp..............Camadas de solo (1 a 3)
 4597.                  !   nmax.............
 4598.                  !   itype............Classe de textura do solo
 4599.                  !   phroot...........Soil moisture potentials in root zone of each
 4600.                  !                    vegetation layer and summed soil+root resistance.
 4601.                  !
 4602.                  INTEGER, INTENT(in   ) :: ncols
 4603.                  INTEGER, INTENT(in   ) :: nmax
 4604.              
 4605.                  INTEGER, INTENT(in   ) :: itype (ncols)
 4606.                  !
 4607.                  !     prognostic variables
 4608.                  !
 4609.                  REAL(KIND=r8),    INTENT(in   ) :: w    (ncols,3)
 4610.                  !
 4611.                  !     variables calculated from above and ambient conditions
 4612.                  !
 4613.                  REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
 4614.                  REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
 4615.              
 4616.              
 4617.                  REAL(KIND=r8)     :: www   (ncols,3)
 4618.                  INTEGER  :: i
 4619.                  INTEGER  :: n
 4620.              
 4621.  1---------<     DO i = 1, 3
 4622.  1 Vp------<        DO n = 1, nmax
 4623.  1 Vp                  !      0
 4624.  1 Vp                  !w = -----
 4625.  1 Vp                  !      0s
 4626.  1 Vp                  !
 4627.  1 Vp                  www   (n,i) = MAX(0.10_r8 ,w(n,i))
 4628.  1 Vp                  !                            --          --
 4629.  1 Vp                  !                           |         0    |
 4630.  1 Vp                  ! phsoil(n,i) = phsat * EXP |-b*LOG(-----) |
 4631.  1 Vp                  !                           |         0s   |
 4632.  1 Vp                  !                            --          --
 4633.  1 Vp                  phsoil(n,i) = phsat(itype(n)) * EXP(-bee( itype(n))*LOG(www(n,i)))
 4634.  1 Vp                  !
 4635.  1 Vp------>        END DO
 4636.  1--------->     END DO
 4637.                  !
 4638.                  !   Soil moisture potentials in root zone of each
 4639.                  !   vegetation layer and summed soil+root resistance.
 4640.                  !
 4641.                  !DO n = 1, nmax
 4642.                  !   phroot(n,1)   = phsoil(n,1) - 0.01_r8
 4643.                  !   DO i = 2, 3
 4644.                  !      phroot(n,1) = MAX( phroot(n,1), phsoil(n,i))
 4645.                  !   END DO
 4646.                  !   phroot(n,2)   = phroot(n,1)
 4647.                  !END DO
 4648.               
 4649.  V---------<     DO n = 1, nmax
 4650.  V                  phroot(n,1)   = phsoil(n,1) - 0.01_r8
 4651.  V--------->     END DO
 4652.  b---------<     DO i = 2, 3
 4653.  b Vb------<        DO n = 1, nmax
 4654.  b Vb                  phroot(n,1) = MAX( phroot(n,1), phsoil(n,i))
 4655.  b Vb------>        END DO
 4656.  b--------->     END DO
 4657.  V---------<     DO n = 1, nmax
 4658.  V                  phroot(n,2)   = phroot(n,1)
 4659.  V--------->     END DO
 4660.              
 4661.              
 4662.                END SUBROUTINE root
 4663.              
 4664.              
 4665.              
 4666.                ! pbl    :performs planetary boundary layer parameterization.
 4667.              
 4668.              
 4669.              
 4670.                SUBROUTINE pbl(jstneu, hgdtg , hgdtc , hgdtm , hcdtg , hcdtc , hcdtm , &
 4671.                     egdtg , egdtc , egdqm , ecdtg , ecdtc , ecdqm , deadtg, &
 4672.                     deadtc, deadqm,icheck , ect   , eci   , egt   , egi   , &
 4673.                     egs   , ec    , eg    , hc    , hg    , ecidif, egidif, &
 4674.                     ecmass, egmass, etmass, hflux , chf   , shf   , roff  , &
 4675.                     bps   , psb   , dzm   , em    , gmt   , gmq   ,  cu   , &
 4676.                     cuni  , ctni  , ustar , cosz  , rhoair, psy   , rcp   , &
 4677.                     wc    , wg    , fc    , fg    , hr    , vcover, z0x   , &
 4678.                     d     , rdc   , rbc   , z0    , qm    , tm    , um    , &
 4679.                     vm    , psur  , ppc   , ppl   , radn  , ra    , rb    , &
 4680.                     rd    , rc    , rg    , tcta  , tgta  , ta    , ea    , &
 4681.                     etc   , etg   , btc   , btg   , u2    , radt  , par   , &
 4682.                     pd    , rst   , rsoil , phroot,  hrr  , phsoil, cc    , &
 4683.                     cg    , satcap, snow  , dtc   , dtg   , dtm   , dqm   , &
 4684.                     stm   , extk  , radfac, closs , gloss , thermk, p1f   , &
 4685.                     p2f   , tc    , tg    , td    , capac , w     , itype , &
 4686.                     dtc3x , mon   , nmax  , ncols ,zlt2  ,green2,chil2,rstpar2,&
 4687.                     topt2,tll2  ,tu2   , defac2,ph12  ,ph22)
 4688.                  !
 4689.                  ! jstneu......The first call to vntlat just gets the neutral values of ustar
 4690.                  !              and ventmf para jstneu=.TRUE..
 4691.                  ! hgdtg.......n.b. fluxes expressed in joules m-2
 4692.                  ! hgdtc.......n.b. fluxes expressed in joules m-2
 4693.                  ! hgdtm.......n.b. fluxes expressed in joules m-2
 4694.                  ! hcdtg.......n.b. fluxes expressed in joules m-2
 4695.                  ! hcdtc.......n.b. fluxes expressed in joules m-2
 4696.                  ! hcdtm.......n.b. fluxes expressed in joules m-2
 4697.                  ! egdtg.......partial derivative calculation for latent heat
 4698.                  ! egdtc.......partial derivative calculation for latent heat
 4699.                  ! egdqm.......partial derivative calculation for latent heat
 4700.                  ! ecdtg.......partial derivative calculation for latent heat
 4701.                  ! ecdtc.......partial derivative calculation for latent heat
 4702.                  ! ecdqm.......partial derivative calculation for latent heat
 4703.                  ! deadtg
 4704.                  ! deadtc
 4705.                  ! deadqm
 4706.                  ! icheck......this version assumes dew-free conditions "icheck=1" to
 4707.                  !              estimate ea for buoyancy term in vntmf or ra.
 4708.                  ! ect.........Transpiracao no topo da copa (J/m*m)
 4709.                  ! eci.........Evaporacao da agua interceptada no topo da copa (J/m*m)
 4710.                  ! egt.........Transpiracao na base da copa (J/m*m)
 4711.                  ! egi.........Evaporacao da neve (J/m*m)
 4712.                  ! egs.........Evaporacao do solo arido (J/m*m)
 4713.                  ! ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 4714.                  !              topo da copa   ec   (i)=eci(i)+ect(i)
 4715.                  ! eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 4716.                  !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 4717.                  ! hc..........total sensible heat lost of top from the veggies.
 4718.                  ! hg..........total sensible heat lost of base from the veggies.
 4719.                  ! ecidif......check if interception loss term has exceeded canopy storage
 4720.                  !              ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 4721.                  ! egidif......check if interception loss term has exceeded canopy storage
 4722.                  !              ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 4723.                  ! ecmass......Mass of water lost of top from the veggies.
 4724.                  ! egmass......Mass of water lost of base from the veggies.
 4725.                  ! etmass......total mass of water lost from the veggies.
 4726.                  ! hflux.......total sensible heat lost from the veggies.
 4727.                  ! chf.........heat fluxes into the canopy  in w/m**2
 4728.                  ! shf.........heat fluxes into the ground, in w/m**2
 4729.                  ! roff........runoff
 4730.                  ! pie.........Constante Pi=3.1415926e0
 4731.                  ! stefan......Constante de Stefan Boltzmann
 4732.                  ! cpair.......specific heat of air (j/kg/k)
 4733.                  ! hlat........heat of evaporation of water   (j/kg)
 4734.                  ! grav........gravity constant      (m/s**2)
 4735.                  ! snomel......heat of melting (j m-1)
 4736.                  ! tf..........Temperatura de congelamento (K)
 4737.                  ! clai........heat capacity of foliage
 4738.                  ! cw..........liquid water heat capacity               (j/m**3)
 4739.                  ! gasr........Constant of dry air      (j/kg/k)
 4740.                  ! epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
 4741.                  !              de agua e do ar seco
 4742.                  ! athird......Constante athird=1.0e0 /3.0e0
 4743.                  ! bps
 4744.                  ! psb
 4745.                  ! dzm.........Altura media de referencia  para o vento para o calculo
 4746.                  !               da estabilidade do escoamento
 4747.                  ! em..........Pressao de vapor da agua
 4748.                  ! gmt(i,k,3)..virtual temperature tendency due to vertical diffusion
 4749.                  ! gmq.........specific humidity of reference (fourier)
 4750.                  ! cu..........Friction  transfer coefficients.
 4751.                  ! cuni........neutral friction transfer  coefficients.
 4752.                  ! ctni........neutral heat transfer coefficients.
 4753.                  ! ustar.......surface friction velocity  (m/s)
 4754.                  ! cosz........cosine of zenith angle
 4755.                  ! rhoair......Desnsidade do ar
 4756.                  ! psy ........(cp/(hl*epsfac))*psur(i)
 4757.                  ! rcp.........densidade do ar vezes o calor especifico do ar
 4758.                  ! wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 4759.                  !              indice de area foliar no topo da copa
 4760.                  ! wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 4761.                  !              indice de area foliar na base da copa
 4762.                  ! fc..........Condicao de oravalho 0 ou 1 na topo da copa
 4763.                  ! fg..........Condicao de oravalho 0 ou 1 na base da copa
 4764.                  ! hr..........rel. humidity in top layer
 4765.                  ! vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 4766.                  ! vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 4767.                  ! z0x.........roughness length
 4768.                  ! d...........Displacement height
 4769.                  ! rdc.........Constant related to aerodynamic resistance
 4770.                  !              between ground and canopy air space
 4771.                  ! rbc.........Constant related to bulk boundary layer resistance
 4772.                  ! z0..........Roughness length
 4773.                  ! qm..........reference specific humidity (fourier)
 4774.                  ! tm .........reference temperature    (fourier)                (k)
 4775.                  ! um..........Razao entre zonal pseudo-wind (fourier) e seno da
 4776.                  !              colatitude
 4777.                  ! vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 4778.                  !              colatitude
 4779.                  ! psur........surface pressure in mb
 4780.                  ! ppc.........precipitation rate ( cumulus )           (mm/s)
 4781.                  ! ppl.........precipitation rate ( large scale )       (mm/s)
 4782.                  ! radn........downward sw/lw radiation at the surface
 4783.                  ! ra..........Resistencia Aerodinamica (s/m)
 4784.                  ! rb..........bulk boundary layer resistance             (s/m)
 4785.                  ! rd..........aerodynamic resistance between ground      (s/m)
 4786.                  !              and canopy air space
 4787.                  ! rc..........Resistencia do topo da copa
 4788.                  ! rg......... Resistencia da base da copa
 4789.                  ! tcta........Diferenca entre tc-ta                      (k)
 4790.                  ! tgta........Diferenca entre tg-ta                      (k)
 4791.                  ! ta..........Temperatura no nivel de fonte de calor do dossel (K)
 4792.                  ! ea..........Pressure of vapor
 4793.                  ! etc.........Pressure of vapor at top of the copa
 4794.                  ! etg.........Pressao de vapor no base da copa
 4795.                  ! btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 4796.                  ! btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 4797.                  ! u2..........wind speed at top of canopy                (m/s)
 4798.                  ! radt........net heat received by canopy/ground vegetation
 4799.                  ! par.........par incident on canopy
 4800.                  ! pd..........ratio of par beam to total par
 4801.                  ! rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 4802.                  ! rsoil ......Resistencia do solo (s/m)
 4803.                  ! phroot......Soil moisture potentials in root zone of each
 4804.                  !                    vegetation layer and summed soil+root resistance.
 4805.                  ! hrr.........rel. humidity in top layer
 4806.                  ! phsoil......soil moisture potential of the i-th soil layer
 4807.                  ! cc..........heat capacity of the canopy
 4808.                  ! cg..........heat capacity of the ground
 4809.                  ! satcap......saturation liquid water capacity         (m)
 4810.                  ! snow........snow amount
 4811.                  ! dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 4812.                  ! dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 4813.                  ! dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 4814.                  ! dqm ........dqm(i)=pblsib(i,4,5)*dtc3x
 4815.                  ! stm ........Variavel utilizada mo cal. da Resisttencia
 4816.                  ! extk........extinction coefficient
 4817.                  ! radfac......fractions of downward solar radiation at surface
 4818.                  !             passed from subr.radalb
 4819.                  ! closs.......radiation loss from canopy
 4820.                  ! gloss.......radiation loss from ground
 4821.                  ! thermk......canopy emissivity
 4822.                  ! p1f
 4823.                  ! p2f
 4824.                  ! tc..........Temperatura da copa "dossel"(K)
 4825.                  ! tg..........Temperatura da superficie do solo (K)
 4826.                  ! td..........Temperatura do solo profundo (K)
 4827.                  ! capac(iv)...Agua interceptada iv=1 no dossel "water store capacity
 4828.                  !             of leaves"(m)
 4829.                  ! capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 4830.                  ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 4831.                  ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 4832.                  ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 4833.                  ! itype ......Classe de textura do solo
 4834.                  ! rstpar(cg,3).coefficints related to par influence on
 4835.                  !                    stomatal resistance
 4836.                  ! chil........leaf orientation pameter
 4837.                  ! topt........Temperatura ideal de funcionamento estomatico
 4838.                  ! tll.........Temperatura minima de funcionamento estomatico
 4839.                  ! tu..........Temperatura maxima de funcionamento estomatico
 4840.                  ! defac.......Parametro de deficit de pressao de vapor d'agua
 4841.                  ! ph1.........Coeficiente para o efeito da agua no solo
 4842.                  ! ph2.........Potencial de agua no solo para ponto de Wilting
 4843.                  ! rootd.......Profundidade das raizes
 4844.                  ! bee.........Expoente da curva de retencao "expoente para o solo umido"
 4845.                  ! phsat.......Tensao do solo saturado " Potencial de agua no solo saturado"
 4846.                  ! satco.......mean soil hydraulic conductivity in the root zone
 4847.                  ! poros.......porosity
 4848.                  ! zdepth......Profundidade para as tres camadas de solo
 4849.                  ! green.......fraction of grenn leaves
 4850.                  ! xcover(iv)..Fracao de cobertura de vegetacao iv=2 Bottom
 4851.                  ! zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 4852.                  ! zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 4853.                  ! x0x.........Comprimento de rugosidade
 4854.                  ! xd..........Deslocamento do plano zero
 4855.                  ! z2..........Altura do topo do dossel
 4856.                  ! xdc.........Constant related to aerodynamic resistance
 4857.                  !             between ground and canopy air space
 4858.                  ! xbc.........Constant related to bulk boundary layer resistance
 4859.                  ! dtc3x.......time increment dt
 4860.                  ! mon.........Number of month at year (1-12)
 4861.                  ! nmax
 4862.                  ! ityp........numero das classes de solo 13
 4863.                  ! imon........Numero maximo de meses no ano (12)
 4864.                  ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 4865.                  ! iwv.........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4866.                  !             proximo, iwv=3 infravermelho termal
 4867.                  ! idp.........Camadas de solo (1 a 3)
 4868.                  ! ibd.........Estado da vegetacao ibd=1 verde / ibd=2 seco
 4869.                  ! ncols.......Numero de ponto por faixa de latitude
 4870.                  !
 4871.                  !
 4872.                  INTEGER, INTENT(in   ) :: ncols
 4873.              
 4874.                  REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 4875.                  INTEGER, INTENT(in   ) :: mon(ncols)
 4876.                  INTEGER, INTENT(in   ) :: nmax
 4877.              
 4878.                  INTEGER, INTENT(in   ) :: itype(ncols)
 4879.                  !
 4880.                  !     prognostic variables
 4881.                  !
 4882.                  REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 4883.                  REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 4884.                  REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 4885.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 4886.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 4887.                  !
 4888.                  !     variables calculated from above and ambient conditions
 4889.                  !
 4890.                  REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 4891.                  REAL(KIND=r8),    INTENT(inout) :: rb    (ncols)
 4892.                  REAL(KIND=r8),    INTENT(inout) :: rd    (ncols)
 4893.                  REAL(KIND=r8),    INTENT(inout) :: rc    (ncols)
 4894.                  REAL(KIND=r8),    INTENT(inout) :: rg    (ncols)
 4895.                  REAL(KIND=r8),    INTENT(inout) :: tcta  (ncols)
 4896.                  REAL(KIND=r8),    INTENT(inout) :: tgta  (ncols)
 4897.                  REAL(KIND=r8),    INTENT(inout) :: ta    (ncols)
 4898.                  REAL(KIND=r8),    INTENT(inout) :: ea    (ncols)
 4899.                  REAL(KIND=r8),    INTENT(inout) :: etc   (ncols)
 4900.                  REAL(KIND=r8),    INTENT(inout) :: etg   (ncols)
 4901.                  REAL(KIND=r8),    INTENT(inout) :: btc   (ncols)
 4902.                  REAL(KIND=r8),    INTENT(inout) :: btg   (ncols)
 4903.                  REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 4904.                  REAL(KIND=r8),    INTENT(inout) :: radt  (ncols,icg)
 4905.                  REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
 4906.                  REAL(KIND=r8),    INTENT(inout) :: pd    (ncols,icg)
 4907.                  REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 4908.                  REAL(KIND=r8),    INTENT(inout) :: rsoil (ncols)
 4909.                  REAL(KIND=r8),    INTENT(inout) :: phroot(ncols,icg)
 4910.                  REAL(KIND=r8),    INTENT(inout) :: hrr   (ncols)
 4911.                  REAL(KIND=r8),    INTENT(inout) :: phsoil(ncols,idp)
 4912.                  REAL(KIND=r8),    INTENT(inout) :: cc    (ncols)
 4913.                  REAL(KIND=r8),    INTENT(inout) :: cg    (ncols)
 4914.                  REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 4915.                  REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 4916.                  REAL(KIND=r8),    INTENT(inout) :: dtc   (ncols)
 4917.                  REAL(KIND=r8),    INTENT(inout) :: dtg   (ncols)
 4918.                  REAL(KIND=r8),    INTENT(inout) :: dtm   (ncols)
 4919.                  REAL(KIND=r8),    INTENT(inout) :: dqm   (ncols)
 4920.                  REAL(KIND=r8),    INTENT(inout) :: stm   (ncols,icg)
 4921.                  REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 4922.                  REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 4923.                  REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 4924.                  REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 4925.                  REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 4926.                  REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 4927.                  REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 4928.                  !
 4929.                  !     the size of working area is ncols*187
 4930.                  !     atmospheric parameters as boudary values for sib
 4931.                  !
 4932.                  REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 4933.                  REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 4934.                  REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 4935.                  REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 4936.                  REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 4937.                  REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 4938.                  REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 4939.                  REAL(KIND=r8),    INTENT(in   ) :: radn(ncols,3,2)
 4940.              
 4941.                  REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 4942.                  REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 4943.                  REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 4944.                  REAL(KIND=r8)   , INTENT(in   ) :: rstpar2(ncols,icg,iwv)
 4945.                  REAL(KIND=r8),    INTENT(inout) :: vcover  (ncols,icg)
 4946.                  REAL(KIND=r8),    INTENT(inout) :: z0x(ncols)
 4947.                  REAL(KIND=r8),    INTENT(inout) :: d  (ncols)
 4948.                  REAL(KIND=r8),    INTENT(inout) :: rdc(ncols)
 4949.                  REAL(KIND=r8),    INTENT(inout) :: rbc(ncols)
 4950.                  REAL(KIND=r8),    INTENT(inout) :: z0 (ncols)
 4951.                  REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 4952.                  REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 4953.                  REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 4954.                  REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 4955.                  REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 4956.                  REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 4957.                  !
 4958.                  !     this is for coupling with closure turbulence model
 4959.                  !
 4960.                  REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 4961.                  REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 4962.                  REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 4963.                  REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 4964.                  REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 4965.                  REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 4966.                  REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 4967.                  REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 4968.                  REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 4969.                  REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 4970.                  REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 4971.                  REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 4972.                  REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 4973.                  REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 4974.                  REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 4975.                  REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 4976.                  REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 4977.                  REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 4978.                  REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 4979.              
 4980.                  REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 4981.                  REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 4982.                  REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 4983.                  REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 4984.                  REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 4985.                  REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 4986.                  REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 4987.                  REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 4988.                  REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 4989.                  REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 4990.                  REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 4991.                  REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 4992.                  REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 4993.                  REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 4994.                  REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 4995.                  REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 4996.                  REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 4997.                  REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 4998.              
 4999.                  INTEGER, INTENT(inout  ) :: icheck(ncols)
 5000.                  !
 5001.                  !     derivatives
 5002.                  !
 5003.                  REAL(KIND=r8),    INTENT(inout  ) :: hgdtg (ncols)
 5004.                  REAL(KIND=r8),    INTENT(inout  ) :: hgdtc (ncols)
 5005.                  REAL(KIND=r8),    INTENT(inout  ) :: hgdtm (ncols)
 5006.                  REAL(KIND=r8),    INTENT(inout  ) :: hcdtg (ncols)
 5007.                  REAL(KIND=r8),    INTENT(inout  ) :: hcdtc (ncols)
 5008.                  REAL(KIND=r8),    INTENT(inout  ) :: hcdtm (ncols)
 5009.                  REAL(KIND=r8),    INTENT(inout  ) :: egdtg (ncols)
 5010.                  REAL(KIND=r8),    INTENT(inout  ) :: egdtc (ncols)
 5011.                  REAL(KIND=r8),    INTENT(inout  ) :: egdqm (ncols)
 5012.                  REAL(KIND=r8),    INTENT(inout  ) :: ecdtg (ncols)
 5013.                  REAL(KIND=r8),    INTENT(inout  ) :: ecdtc (ncols)
 5014.                  REAL(KIND=r8),    INTENT(inout  ) :: ecdqm (ncols)
 5015.                  REAL(KIND=r8),    INTENT(inout  ) :: deadtg(ncols)
 5016.                  REAL(KIND=r8),    INTENT(inout  ) :: deadtc(ncols)
 5017.                  REAL(KIND=r8),    INTENT(inout  ) :: deadqm(ncols)
 5018.                  LOGICAL, INTENT(inout  ) :: jstneu
 5019.              
 5020.                  !
 5021.  Vb I------>     CALL root(phroot,phsoil,w     ,itype ,nmax  ,ncols  )
 5022.              
 5023.  Vb I------>     CALL raduse(radt  ,par   ,pd    ,radfac,closs ,gloss ,thermk,p1f   , &
 5024.                       p2f   ,radn  ,vcover,nmax  ,ncols   )
 5025.              
 5026.  Vc I------>     CALL stomat(cosz  ,par   ,pd    ,rst   ,extk  ,vcover,itype , &
 5027.                       nmax  ,ncols ,zlt2  ,green2,chil2 ,rstpar2)
 5028.              
 5029.                  CALL interc( &
 5030.                       roff  ,cc    ,cg    ,satcap,snow  ,extk  ,tc    ,tg    ,td    , &
 5031.                       capac ,w     ,tm    ,ppc   ,ppl   ,vcover,itype ,dtc3x , &
 5032.                       nmax  ,ncols ,zlt2 )
 5033.                  !
 5034.                  !     surface flux
 5035.                  !
 5036.                  CALL sflxes( &
 5037.                       hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm ,egdtg ,egdtc ,egdqm , &
 5038.                       ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm,icheck,bps   ,psb   , &
 5039.                       dzm   ,em    ,gmt   ,gmq   ,cu    ,cuni  ,ctni  ,ustar ,rhoair, &
 5040.                       psy   ,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    ,ect   ,eci   , &
 5041.                       egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    ,ecidif,egidif, &
 5042.                       ecmass,egmass,etmass,hflux ,chf   ,shf   ,ra    ,rb    ,rd    , &
 5043.                       rc    ,rg    ,tcta  ,tgta  ,ta    ,ea    ,etc   ,etg   ,btc   , &
 5044.                       btg   ,u2    ,radt  ,rst   ,rsoil ,hrr   ,phsoil,cc    ,cg    , &
 5045.                       satcap,dtc   ,dtg   ,dtm   ,dqm   ,stm   ,thermk,tc    ,tg    , &
 5046.                       td    ,capac ,w     ,qm    ,tm    ,um    ,vm    ,psur  ,vcover, &
 5047.                       z0x   ,d     ,rdc   ,rbc   ,z0    ,itype ,dtc3x ,mon   ,nmax  , &
 5048.                       jstneu,ncols ,zlt2  ,topt2 ,tll2  ,tu2   , defac2,ph12  ,ph22 )
 5049.                END SUBROUTINE pbl
 5050.              
 5051.              
 5052.              
 5053.              
 5054.              
 5055.              
 5056.                SUBROUTINE snowm(&
 5057.                     chf   ,shf   ,fluxef,roff  ,cc    ,cg    ,snow  ,dtc   ,dtg   , &
 5058.                     tc    ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols  )
 5059.                  !
 5060.                  ! snowm  :calculates snowmelt and modification of temperatures;
 5061.                  !         this version deals with refreezing of water;
 5062.                  !         version modified to use force-restore heat fluxes.
 5063.                  !
 5064.                  !-----------------------------------------------------------------------
 5065.                  ! chf.........Fluxo de calor na copa (J/m*m)
 5066.                  ! shf.........Fluxo de calor no solo (J/m*m)
 5067.                  ! fluxef......modified to use force-restore heat fluxes
 5068.                  !             fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi " Garrat pg. 227"
 5069.                  ! roff........runoff (escoamente superficial e drenagem)(m)
 5070.                  ! cc..........heat capacity of the canopy
 5071.                  ! cg..........heat capacity of the ground
 5072.                  ! snow........snow amount
 5073.                  ! dtc ........dtc(i)=pblsib(i,2,5)*dtc3x
 5074.                  ! dtg ........dtg(i)=pblsib(i,1,5)*dtc3x
 5075.                  ! tc..........Temperatura da copa "dossel"(K)
 5076.                  ! tg..........Temperatura da superficie do solo (K)
 5077.                  ! td..........Temperatura do solo profundo (K)
 5078.                  ! capac(iv)...Agua interceptada iv=1 no dossel (m)
 5079.                  ! capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 5080.                  ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 5081.                  ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5082.                  ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5083.                  ! poros.......Porosidade do solo (m"3/m"3)
 5084.                  ! zdepth(id)..Profundidade das camadas de solo id=1 superficial
 5085.                  ! zdepth(id)..Profundidade das camadas de solo id=2 camada de raizes
 5086.                  ! zdepth(id)..Profundidade das camadas de solo id=3 camada de drenagem
 5087.                  ! itype.......Classe de textura do solo
 5088.                  ! ncols.......Numero de ponto por faixa de latitude
 5089.                  ! ityp........13
 5090.                  ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 5091.                  ! idp.........Camadas de solo (1 a 3)
 5092.                  ! snomel......Calor latente de fusao(J/kg)
 5093.                  ! tf..........Temperatura de congelamento (K)
 5094.                  ! dtc3x.......time increment dt
 5095.                  ! nmax........
 5096.                  !-----------------------------------------------------------------------
 5097.                  INTEGER, INTENT(in   ) :: ncols
 5098.                  REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 5099.                  INTEGER, INTENT(in   ) :: nmax
 5100.              
 5101.                  INTEGER, INTENT(in   ) :: itype (ncols)
 5102.                  !
 5103.                  !     prognostic variables
 5104.                  !
 5105.                  REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 5106.                  REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 5107.                  REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 5108.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 5109.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 5110.                  !
 5111.                  !     variables calculated from above and ambient conditions
 5112.                  !
 5113.                  REAL(KIND=r8),    INTENT(in   ) :: cc    (ncols)
 5114.                  REAL(KIND=r8),    INTENT(in   ) :: cg    (ncols)
 5115.                  REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 5116.                  REAL(KIND=r8),    INTENT(in   ) :: dtc   (ncols)
 5117.                  REAL(KIND=r8),    INTENT(in   ) :: dtg   (ncols)
 5118.                  !
 5119.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 5120.                  !
 5121.                  REAL(KIND=r8),    INTENT(in   ) :: chf   (ncols)
 5122.                  REAL(KIND=r8),    INTENT(in   ) :: shf   (ncols)
 5123.                  REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
 5124.                  REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 5125.              
 5126.                  REAL(KIND=r8)    :: cct   (ncols)
 5127.                  REAL(KIND=r8)    :: ts         (ncols)
 5128.                  REAL(KIND=r8)    :: dts   (ncols)
 5129.                  REAL(KIND=r8)    :: flux  (ncols)
 5130.                  REAL(KIND=r8)    :: tta   (ncols)
 5131.                  REAL(KIND=r8)    :: ttb   (ncols)
 5132.                  REAL(KIND=r8)    :: dtf   (ncols)
 5133.                  REAL(KIND=r8)    :: work  (ncols)
 5134.                  REAL(KIND=r8)    :: hf         (ncols)
 5135.                  REAL(KIND=r8)    :: fcap  (ncols)
 5136.                  REAL(KIND=r8)    :: spwet (ncols)
 5137.                  REAL(KIND=r8)    :: dtf2  (ncols)
 5138.                  REAL(KIND=r8)    :: tn         (ncols)
 5139.                  REAL(KIND=r8)    :: change(ncols)
 5140.                  REAL(KIND=r8)    :: dtime1(ncols)
 5141.                  REAL(KIND=r8)    :: dtime2(ncols)
 5142.              
 5143.                  INTEGER :: i
 5144.                  INTEGER :: iveg
 5145.                  INTEGER :: ntyp
 5146.                  REAL(KIND=r8)    :: dtc3xi
 5147.              
 5148.              
 5149.  V--------<>     cct=0.0_r8
 5150.                  dtc3xi=1.0_r8 /dtc3x
 5151.              
 5152.  1---------<     DO iveg = 1, 2
 5153.  1                  IF (iveg == 1) THEN
 5154.  1           
 5155.  1 V-------<           DO i = 1, nmax
 5156.  1 V                      cct (i)=cc (i)
 5157.  1 V                      ts  (i)=tc (i)
 5158.  1 V                      dts (i)=dtc(i)
 5159.  1 V                      flux(i)=chf(i)
 5160.  1 V------->           END DO
 5161.  1           
 5162.  1                  ELSE
 5163.  1           
 5164.  1 V-------<           DO i = 1, nmax
 5165.  1 V                      cct (i)=cg (i)
 5166.  1 V                      ts  (i)=tg (i)
 5167.  1 V                      dts (i)=dtg(i)
 5168.  1 V                      flux(i)=cct(i)*dtg(i)*dtc3xi
 5169.  1 V------->           END DO
 5170.  1           
 5171.  1                  END IF
 5172.  1           
 5173.  1 V-------<        DO i = 1, nmax
 5174.  1 V                   tta(i) = ts(i) - dts(i)
 5175.  1 V                   ttb(i) = ts(i)
 5176.  1 V------->        END DO
 5177.  1           
 5178.  1 2-------<        DO i = 1, nmax
 5179.  1 2                   IF (tta(i) <= tf) THEN
 5180.  1 2                      snow (i,iveg) = capac(i,iveg)
 5181.  1 2                      capac(i,iveg) = 0.0_r8
 5182.  1 2                   ELSE
 5183.  1 2                      snow (i,iveg) = 0.0_r8
 5184.  1 2                   END IF
 5185.  1 2------->        END DO
 5186.  1           
 5187.  1 V-------<        DO i = 1, nmax
 5188.  1 V                   work(i)=(tta(i)-tf)*(ttb(i)-tf)
 5189.  1 V------->        END DO
 5190.  1           
 5191.  1 2-------<        DO i = 1, nmax
 5192.  1 2                   IF (work(i) < 0.0_r8) THEN
 5193.  1 2                      ntyp=itype(i)
 5194.  1 2                      dtf   (i)= tf - tta(i)
 5195.  1 2                      dtime1(i)= cct (i)* dtf(i)/ flux(i)
 5196.  1 2                      hf    (i)= flux(i)*(dtc3x-dtime1(i))
 5197.  1 2                      spwet (i)=  MIN ( 5.0_r8 , snow(i,iveg) )
 5198.  1 2                      IF (dts(i) <= 0.0_r8) THEN
 5199.  1 2                         fcap (i) =-capac(i,iveg)* snomel
 5200.  1 2                      ELSE
 5201.  1 2                         fcap (i) = spwet(i)     * snomel
 5202.  1 2                      END IF
 5203.  1 2                      dtime2(i)= fcap(i) / flux(i)
 5204.  1 2                      dtf2  (i)= flux(i) * (dtc3x-dtime1(i)-dtime2(i))/cct(i)
 5205.  1 2                      tn(i)    = tf + dtf2(i)
 5206.  1 2                      IF (ABS(hf(i)) < ABS(fcap(i))) THEN
 5207.  1 2                         ts(i)    = tf -0.1_r8
 5208.  1 2                      ELSE
 5209.  1 2                         ts(i)    = tn(i)
 5210.  1 2                      END IF
 5211.  1 2                      IF (ABS(hf(i)) < ABS(fcap(i))) THEN
 5212.  1 2                         change(i) = hf  (i)
 5213.  1 2                      ELSE
 5214.  1 2                         change(i) = fcap(i)
 5215.  1 2                      END IF
 5216.  1 2                      change(i)     =change(i)      / snomel
 5217.  1 2                      snow  (i,iveg)=snow  (i,iveg) - change(i)
 5218.  1 2                      capac (i,iveg)=capac (i,iveg) + change(i)
 5219.  1 2                      IF (snow(i,iveg) < 1.e-10_r8) snow(i,iveg)=0.0e0_r8
 5220.  1 2                      IF (iveg == 1)THEN
 5221.  1 2                         tc(i)=ts(i)
 5222.  1 2                      ELSE
 5223.  1 2                         tg(i)=ts(i)
 5224.  1 2                      END IF
 5225.  1 2                      IF (iveg == 2) THEN
 5226.  1 2                         IF (td(i) > tf) THEN
 5227.  1 2                            w (i,1)=w (i,1)+capac(i,iveg) &
 5228.  1 2                                 /(poros(ntyp)*zdepth(ntyp,1))
 5229.  1 2                         ELSE
 5230.  1 2                            roff(i)=roff(i)+capac(i,iveg)
 5231.  1 2                         END IF
 5232.  1 2                         capac(i,iveg) = 0.0_r8
 5233.  1 2                      END IF
 5234.  1 2                   END IF
 5235.  1 2------->        END DO
 5236.  1 V-------<        DO i = 1, nmax
 5237.  1 V                   capac(i,iveg) =  capac(i,iveg) + snow(i,iveg)
 5238.  1 V------->        END DO
 5239.  1--------->     END DO
 5240.              
 5241.                  !   modified to use force-restore heat fluxes
 5242.              
 5243.  V---------<     DO i = 1, nmax
 5244.  V                  fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi
 5245.  V--------->     END DO
 5246.              
 5247.                END SUBROUTINE snowm
 5248.              
 5249.              
 5250.              
 5251.              
 5252.                ! fysiks :it is a physics driver; performs the following:
 5253.                !         a) soil water budget prior to calling pbl
 5254.                !         b) planetary boundary layer (pbl) parameterization
 5255.                !         c) update sib variables
 5256.                !         d) dumping of small capac values onto soil surface store
 5257.                !         e) snowmelt/refreeze calculation
 5258.                !         f) update deep soil temperature using effective soil heat flux
 5259.                !         g) bare soil evaporation loss
 5260.                !         h) extraction of transpiration loss from root zone
 5261.                !         i) interflow, infiltration excess and loss to groundwater
 5262.                !         j) increment prognostic variables and
 5263.                !            adjust theta and sh to be consistent with dew formation
 5264.                !         k) calculates soil water budget after calling pbl
 5265.                !            and compares with previous budget.
 5266.              
 5267.                SUBROUTINE fysiks(vcover, z0x  , d    , rdc  , rbc  , z0   ,ndt   , &
 5268.                     latitu, bps  ,psb   ,dzm   ,em    ,gmt   ,gmq   , &
 5269.                     gmu   ,cu    , cuni ,ctni  ,ustar ,cosz  ,sinclt,rhoair, &
 5270.                     psy   ,rcp   , wc   ,wg    ,fc    ,fg    ,hr    , ect  , &
 5271.                     eci   , egt  , egi  , egs  , ec   , eg   , hc   , hg   , &
 5272.                     ecidif,egidif,ecmass,egmass,etmass,hflux , chf  , shf  , &
 5273.                     fluxef, roff , drag ,ra    , rb   , rd   , rc   , rg   , &
 5274.                     tcta  , tgta , ta   , ea   , etc  , etg  , btc  , btg  , &
 5275.                     u2    , radt , par  , pd   , rst  ,rsoil ,phroot, hrr  , &
 5276.                     phsoil, cc   , cg   ,satcap, snow , dtc  , dtg  , dtm  , &
 5277.                     dqm   , stm  , extk ,radfac, closs,gloss ,thermk, p1f  , &
 5278.                     p2f   , tc   , tg   , td   , capac, w    ,  qm  , tm   , &
 5279.                     um    , vm   , psur , ppc  , ppl  , radn ,itype ,dtc3x , &
 5280.                     mon   , nmax , ncols,zlt2  ,green2,chil2 ,rstpar2,topt2, &
 5281.                     tll2  ,tu2   , defac2,ph12  ,ph22 )
 5282.                  !
 5283.                  !
 5284.                  !-----------------------------------------------------------------------
 5285.                  !
 5286.                  !  roff.......Runoff (escoamente superficial e drenagem)(m)
 5287.                  !  slope......Inclinacao de perda hidraulica na camada profunda do solo
 5288.                  !  bee........Fator de retencao da umidade no solo (expoente da umidade do
 5289.                  !             solo)
 5290.                  !  satco......Condutividade hidraulica do solo saturado(m/s)
 5291.                  !  zdepth(id).Profundidade das camadas de solo id=1 superficial
 5292.                  !  zdepth(id).Profundidade das camadas de solo id=2 camada de raizes
 5293.                  !  zdepth(id).Profundidade das camadas de solo id=3 camada de drenagem
 5294.                  !  phsat......Potencial matricial do solo saturado(m) (tensao do solo em
 5295.                  !             saturacao)
 5296.                  !  poros......Porosidade do solo
 5297.                  !  dtc3x......time increment dt
 5298.                  !  snomel.....Calor latente de fusao(J/kg)
 5299.                  !  w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 5300.                  !  w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5301.                  !  w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5302.                  !  capac(iv)..Agua interceptada iv=1 no dossel (m)
 5303.                  !  capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 5304.                  !  tg.........Temperatura da superficie do solo  (K)
 5305.                  !  td.........Temperatura do solo profundo (K)
 5306.                  !  itype......Classe de textura do solo
 5307.                  !  tf.........Temperatura de congelamento (K)
 5308.                  !  idp........Parametro para as camadas de solo idp=1->3
 5309.                  !  nmax.......
 5310.                  !  ncols......Number of grid points on a gaussian latitude circle
 5311.                  !  ityp.......Numero das classes de solo 13
 5312.                  !  imon.......Numero maximo de meses no ano (12)
 5313.                  !  icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 5314.                  !  iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 5315.                  !             proximo, iwv=3 infravermelho termal
 5316.                  !  idp........Camadas de solo (1 a 3)
 5317.                  !  ibd........Estado da vegetacao ibd=1 verde / ibd=2 seco
 5318.                  !  pie........Constante Pi=3.1415926e0
 5319.                  !  stefan.....Constante de Stefan Boltzmann
 5320.                  !  cp.........specific heat of air (j/kg/k)
 5321.                  !  hl ........heat of evaporation of water   (j/kg)
 5322.                  !  grav.......gravity constant      (m/s**2)
 5323.                  !  snomel.....heat of melting (j m-1)
 5324.                  !  tf.........Temperatura de congelamento (K)
 5325.                  !  clai.......heat capacity of foliage
 5326.                  !  cw.........liquid water heat capacity               (j/m**3)
 5327.                  !  gasr.......Constant of dry air      (j/kg/k)
 5328.                  !  epsfac.....Constante 0.622 Razao entre as massas moleculares do vapor
 5329.                  !             de agua e do ar seco
 5330.                  !  athird.....Constante athird=1.0e0 /3.0e0
 5331.                  !  dtc3x......time increment dt
 5332.                  !  mon........Number of month at year (1-12)
 5333.                  !  nmax
 5334.                  !  rstpar.....Coefficints related to par influence on
 5335.                  !             stomatal resistance
 5336.                  !  chil.......Leaf orientation parameter
 5337.                  !  topt.......Temperatura ideal de funcionamento estomatico
 5338.                  !  tll........Temperatura minima de funcionamento estomatico
 5339.                  !  tu.........Temperatura maxima de funcionamento estomatico
 5340.                  !  defac......Parametro de deficit de pressao de vapor d'agua
 5341.                  !  ph1........Coeficiente para o efeito da agua no solo
 5342.                  !  ph2........Potencial de agua no solo para ponto de Wilting
 5343.                  !  rootd......Profundidade das raizes
 5344.                  !  bee........Expoente da curva de retencao "expoente para o solo umido"
 5345.                  !  phsat......Tensao do solo saturado " Potencial de agua no solo saturado"
 5346.                  !  satco......mean soil hydraulic conductivity in the root zone
 5347.                  !  poros......Porosity
 5348.                  !  zdepth.....Profundidade para as tres camadas de solo
 5349.                  !  green......Fraction of grenn leaves
 5350.                  !  xcover(iv).Fracao de cobertura de vegetacao iv=1 Top
 5351.                  !  xcover(iv).Fracao de cobertura de vegetacao iv=2 Bottom
 5352.                  !  zlt(icg)...Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 5353.                  !  zlt(icg)...Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 5354.                  !  x0x........Comprimento de rugosidade
 5355.                  !  xd.........Deslocamento do plano zero
 5356.                  !  z2.........Altura do topo do dossel
 5357.                  !  xdc........Constant related to aerodynamic resistance
 5358.                  !             between ground and canopy air space
 5359.                  !  xbc........Constant related to bulk boundary layer resistance
 5360.                  !  itype......Classe de textura do solo
 5361.                  !  qm.........Reference specific humidity (fourier)
 5362.                  !  tm.........Reference temperature    (fourier)                (k)
 5363.                  !  um.........Razao entre zonal pseudo-wind (fourier) e seno da
 5364.                  !             colatitude
 5365.                  !  vm.........Razao entre meridional pseudo-wind (fourier) e seno da
 5366.                  !             colatitude
 5367.                  !  psur.......Surface pressure in mb
 5368.                  !  ppc........Precipitation rate ( cumulus )           (mm/s)
 5369.                  !  ppl........Precipitation rate ( large scale )       (mm/s)
 5370.                  !  radn.......Downward sw/lw radiation at the surface
 5371.                  !  tc.........Temperatura da copa "dossel"(K)
 5372.                  !  tg.........Temperatura da superficie do solo (K)
 5373.                  !  td.........Temperatura do solo profundo (K)
 5374.                  !  capac(iv)..Agua interceptada iv=1 no dossel "water store capacity
 5375.                  !             of leaves"(m)
 5376.                  !  capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 5377.                  !  w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 5378.                  !  w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5379.                  !  w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5380.                  !  ra.........Resistencia Aerodinamica (s/m)
 5381.                  !  rb.........bulk boundary layer resistance
 5382.                  !  rd.........Aerodynamic resistance between ground      (s/m)
 5383.                  !             and canopy air space
 5384.                  !  rc.........Resistencia do topo da copa
 5385.                  !  rg.........Resistencia da base da copa
 5386.                  !  tcta.......Diferenca entre tc-ta                      (k)
 5387.                  !  tgta.......Diferenca entre tg-ta                      (k)
 5388.                  !  ta.........Temperatura no nivel de fonte de calor do dossel (K)
 5389.                  !  ea.........Pressure of vapor
 5390.                  !  etc........Pressure of vapor at top of the copa
 5391.                  !  etg........Pressao de vapor no base da copa
 5392.                  !  btc........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 5393.                  !  btg........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 5394.                  !  u2.........wind speed at top of canopy
 5395.                  !  radt.......net heat received by canopy/ground vegetation
 5396.                  !  par........par incident on canopy
 5397.                  !  pd.........ratio of par beam to total par
 5398.                  !  rst .......Resisttencia Estomatica "Stomatal resistence" (s/m)
 5399.                  !  rsoil......Resistencia do solo (s/m)
 5400.                  !  phroot.....Soil moisture potentials in root zone of each
 5401.                  !             vegetation layer and summed soil+root resistance.
 5402.                  !  hrr........rel. humidity in top layer
 5403.                  !  phsoil.....soil moisture potential of the i-th soil layer
 5404.                  !  cc.........heat capacity of the canopy
 5405.                  !  cg.........heat capacity of the ground
 5406.                  !  satcap.....saturation liquid water capacity         (m)
 5407.                  !  snow.......snow amount
 5408.                  !  dtc........dtc(i)=pblsib(i,2,5)*dtc3x
 5409.                  !  dtg........dtg(i)=pblsib(i,1,5)*dtc3x
 5410.                  !  dtm........dtm(i)=pblsib(i,3,5)*dtc3x
 5411.                  !  dqm .......dqm(i)=pblsib(i,4,5)*dtc3x
 5412.                  !  stm .......Variavel utilizada mo cal. da Resisttencia
 5413.                  !  extk.......extinction coefficient
 5414.                  !  radfac.....Fractions of downward solar radiation at surface
 5415.                  !             passed from subr.radalb
 5416.                  !  closs......Radiation loss from canopy
 5417.                  !  gloss......Radiation loss from ground
 5418.                  !  thermk.....Canopy emissivity
 5419.                  !  p1f
 5420.                  !  p2f
 5421.                  !  ect........Transpiracao no topo da copa (J/m*m)
 5422.                  !  eci........Evaporacao da agua interceptada no topo da copa (J/m*m)
 5423.                  !  egt........Transpiracao na base da copa (J/m*m)
 5424.                  !  egi........Evaporacao da neve (J/m*m)
 5425.                  !  egs........Evaporacao do solo arido (J/m*m)
 5426.                  !  ec.........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 5427.                  !             topo da copa   ec   (i)=eci(i)+ect(i)
 5428.                  !  eg.........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 5429.                  !             +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 5430.                  !  hc.........Total sensible heat lost of top from the veggies.
 5431.                  !  hg.........Total sensible heat lost of base from the veggies.
 5432.                  !  ecidif.....check if interception loss term has exceeded canopy storage
 5433.                  !             ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 5434.                  !  egidif.....check if interception loss term has exceeded canopy storage
 5435.                  !             ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 5436.                  !  ecmass.....Mass of water lost of top from the veggies.
 5437.                  !  egmass.....Mass of water lost of base from the veggies.
 5438.                  !  etmass.....Total mass of water lost from the veggies.
 5439.                  !  hflux......Total sensible heat lost from the veggies
 5440.                  !  chf........Heat fluxes into the canopy  in w/m**2
 5441.                  !  shf........Heat fluxes into the ground, in w/m**2
 5442.                  !  fluxef.....Modified to use force-restore heat fluxes
 5443.                  !             fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi " Garrat pg. 227"
 5444.                  !  roff.......runoff (escoamente superficial e drenagem)(m)
 5445.                  !  drag.......tensao superficial
 5446.                  !  bps
 5447.                  !  psb
 5448.                  !  dzm........Altura media de referencia  para o vento para o calculo
 5449.                  !             da estabilidade do escoamento
 5450.                  !  em.........Pressao de vapor da agua
 5451.                  !  gmt(i,k,3).temperature related matrix virtual temperature tendency
 5452.                  !             due to vertical diffusion
 5453.                  !  gmq........specific humidity related matrix specific humidity of
 5454.                  !             reference (fourier)
 5455.                  !  gmu........wind related matrix
 5456.                  !  cu.........Friction  transfer coefficients.
 5457.                  !  cuni.......Neutral friction transfer  coefficients.
 5458.                  !  ctni.......Neutral heat transfer coefficients.
 5459.                  !  ustar......Surface friction velocity  (m/s)
 5460.                  !  cosz.......Cosine of zenith angle
 5461.                  !  sinclt.....sinclt=SIN(colrad(latitu))"seno da colatitude"
 5462.                  !  rhoair.....Desnsidade do ar
 5463.                  !  psy........(cp/(hl*epsfac))*psur(i)
 5464.                  !  rcp........densidade do ar vezes o calor especifico do ar
 5465.                  !  wc.........Minimo entre 1 e a razao entre a agua interceptada pelo
 5466.                  !             indice de area foliar no topo da copa
 5467.                  !  wg.........Minimo entre 1 e a razao entre a agua interceptada pelo
 5468.                  !             indice de area foliar na base da copa
 5469.                  !  fc.........Condicao de oravalho 0 ou 1 na topo da copa
 5470.                  !  fg.........Condicao de oravalho 0 ou 1 na base da copa
 5471.                  !  hr.........rel. humidity in top layer
 5472.                  !  ndt
 5473.                  !  latitu
 5474.                  !  jstneu.....The first call to vntlat just gets the neutral values of ustar
 5475.                  !             and ventmf para jstneu=.TRUE..
 5476.                  !  hgdtg.......n.b. fluxes expressed in joules m-2
 5477.                  !  hgdtc.......n.b. fluxes expressed in joules m-2
 5478.                  !  hgdtm.......n.b. fluxes expressed in joules m-2
 5479.                  !  hcdtg.......n.b. fluxes expressed in joules m-2
 5480.                  !  hcdtc.......n.b. fluxes expressed in joules m-2
 5481.                  !  hcdtm.......n.b. fluxes expressed in joules m-2
 5482.                  !  egdtg.......partial derivative calculation for latent heat
 5483.                  !  egdtc.......partial derivative calculation for latent heat
 5484.                  !  egdqm.......partial derivative calculation for latent heat
 5485.                  !  ecdtg.......partial derivative calculation for latent heat
 5486.                  !  ecdtc.......partial derivative calculation for latent heat
 5487.                  !  ecdqm.......partial derivative calculation for latent heat
 5488.                  !  deadtg
 5489.                  !  deadtc
 5490.                  !  deadqm
 5491.                  !  icheck......this version assumes dew-free conditions "icheck=1" to
 5492.                  !              estimate ea for buoyancy term in vntmf or ra.
 5493.                  !  vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 5494.                  !  vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 5495.                  !  z0x.........roughness length
 5496.                  !  d...........Displacement height
 5497.                  !  rdc.........Constant related to aerodynamic resistance
 5498.                  !              between ground and canopy air space
 5499.                  !  rbc.........Constant related to bulk boundary layer resistance
 5500.                  !  z0..........Roughness length
 5501.                  !-----------------------------------------------------------------------
 5502.                  !
 5503.                  INTEGER, INTENT(in   ) :: ncols
 5504.              
 5505.                  REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 5506.                  INTEGER, INTENT(in   ) :: mon(ncols)
 5507.                  INTEGER, INTENT(in   ) :: nmax
 5508.              
 5509.                  INTEGER, INTENT(in   ) :: itype (ncols)
 5510.                  !
 5511.                  !     the size of working area is ncols*187
 5512.                  !     atmospheric parameters as boudary values for sib
 5513.                  !
 5514.                  REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 5515.                  REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 5516.                  REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 5517.                  REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 5518.                  REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 5519.                  REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 5520.                  REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 5521.                  REAL(KIND=r8),    INTENT(in   ) :: radn(ncols,3,2)
 5522.                  !
 5523.                  !     prognostic variables
 5524.                  !
 5525.                  REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 5526.                  REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 5527.                  REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 5528.                  REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 5529.                  REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 5530.                  !
 5531.                  !     variables calculated from above and ambient conditions
 5532.                  !
 5533.                  REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 5534.                  REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 5535.                  REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 5536.                  REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 5537.                  REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 5538.                  REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
 5539.                  REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
 5540.                  REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
 5541.                  REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 5542.                  REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
 5543.                  REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
 5544.                  REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
 5545.                  REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
 5546.                  REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 5547.                  REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
 5548.                  REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
 5549.                  REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
 5550.                  REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
 5551.                  REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
 5552.                  REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
 5553.                  REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
 5554.                  REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
 5555.                  REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
 5556.                  REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
 5557.                  REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 5558.                  REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 5559.                  REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
 5560.                  REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
 5561.                  REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
 5562.                  REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
 5563.                  REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
 5564.                  REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 5565.                  REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 5566.                  REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 5567.                  REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 5568.                  REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 5569.                  REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 5570.                  REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 5571.                  !
 5572.                  !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 5573.                  !
 5574.                  REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 5575.                  REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 5576.                  REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 5577.                  REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 5578.                  REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 5579.                  REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 5580.                  REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 5581.                  REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 5582.                  REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 5583.                  REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 5584.                  REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 5585.                  REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 5586.                  REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 5587.                  REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 5588.                  REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 5589.                  REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 5590.                  REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 5591.                  REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
 5592.                  REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 5593.                  REAL(KIND=r8),    INTENT(inout) :: drag  (ncols)
 5594.                  !
 5595.                  !     this is for coupling with closure turbulence model
 5596.                  !
 5597.                  REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 5598.                  REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 5599.                  REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 5600.                  REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 5601.                  REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 5602.                  REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 5603.                  REAL(KIND=r8),    INTENT(inout) :: gmu   (ncols,4)
 5604.                  REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 5605.                  REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 5606.                  REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 5607.                  REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 5608.                  REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 5609.                  REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
 5610.                  REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 5611.                  REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 5612.                  REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 5613.                  REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 5614.                  REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 5615.                  REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 5616.                  REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 5617.                  REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 5618.              
 5619.                  INTEGER, INTENT(in   ) :: ndt
 5620.                  INTEGER, INTENT(in   ) :: latitu
 5621.              
 5622.                  REAL(KIND=r8)   , INTENT(in   ) :: rstpar2 (ncols,icg,iwv)
 5623.                  REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 5624.                  REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 5625.                  REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 5626.                  REAL(KIND=r8),    INTENT(inout) :: vcover  (ncols,icg)
 5627.                  REAL(KIND=r8),    INTENT(inout) :: z0x(ncols)
 5628.                  REAL(KIND=r8),    INTENT(inout) :: d  (ncols)
 5629.                  REAL(KIND=r8),    INTENT(inout) :: rdc(ncols)
 5630.                  REAL(KIND=r8),    INTENT(inout) :: rbc(ncols)
 5631.                  REAL(KIND=r8),    INTENT(inout) :: z0 (ncols)
 5632.                  REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 5633.                  REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 5634.                  REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 5635.                  REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 5636.                  REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 5637.                  REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 5638.              
 5639.                  LOGICAL :: jstneu
 5640.                  INTEGER :: icheck(ncols)
 5641.              
 5642.                  !
 5643.                  !     derivatives
 5644.                  !
 5645.                  REAL(KIND=r8) :: hgdtg (ncols)
 5646.                  REAL(KIND=r8) :: hgdtc (ncols)
 5647.                  REAL(KIND=r8) :: hgdtm (ncols)
 5648.                  REAL(KIND=r8) :: hcdtg (ncols)
 5649.                  REAL(KIND=r8) :: hcdtc (ncols)
 5650.                  REAL(KIND=r8) :: hcdtm (ncols)
 5651.                  REAL(KIND=r8) :: egdtg (ncols)
 5652.                  REAL(KIND=r8) :: egdtc (ncols)
 5653.                  REAL(KIND=r8) :: egdqm (ncols)
 5654.                  REAL(KIND=r8) :: ecdtg (ncols)
 5655.                  REAL(KIND=r8) :: ecdtc (ncols)
 5656.                  REAL(KIND=r8) :: ecdqm (ncols)
 5657.                  REAL(KIND=r8) :: deadtg(ncols)
 5658.                  REAL(KIND=r8) :: deadtc(ncols)
 5659.                  REAL(KIND=r8) :: deadqm(ncols)
 5660.              
 5661.                  REAL(KIND=r8)    :: ef    (ncols,3)
 5662.                  REAL(KIND=r8)    :: absoil(ncols)
 5663.                  REAL(KIND=r8)    :: totdep(ncols)
 5664.                  REAL(KIND=r8)    :: div   (ncols)
 5665.                  REAL(KIND=r8)    :: eft   (ncols)
 5666.                  REAL(KIND=r8)    :: aaa   (ncols)
 5667.                  REAL(KIND=r8)    :: dep   (ncols)
 5668.              
 5669.              
 5670.                  INTEGER :: i
 5671.                  INTEGER :: il
 5672.                  INTEGER :: ntyp
 5673.                  INTEGER :: iveg
 5674.                  REAL(KIND=r8)    :: hlat3i
 5675.                  REAL(KIND=r8)    :: gby100
 5676.                  REAL(KIND=r8)    :: timcon
 5677.                  REAL(KIND=r8)    :: totwb(ncols)
 5678.                  REAL(KIND=r8)    :: endwb(ncols)
 5679.                  REAL(KIND=r8)    :: cbal (ncols)
 5680.                  REAL(KIND=r8)    :: gbal (ncols)
 5681.                  REAL(KIND=r8)    :: d1
 5682.                  !
 5683.                  !     calculates soil water budget prior to calling pbl
 5684.                  !
 5685.  Vp--------<     DO i = 1, nmax
 5686.  Vp                 !
 5687.  Vp                 !  capac(1)..Agua interceptada no dossel (m)
 5688.  Vp                 !  capac(2)..Agua interceptada na cobertura do solo (m)
 5689.  Vp                 !
 5690.  Vp                 totwb(i)=w(i,1)*poros(itype(i))*zdepth(itype(i),1) &
 5691.  Vp                      +w(i,2)*poros(itype(i))*zdepth(itype(i),2) &
 5692.  Vp                      +w(i,3)*poros(itype(i))*zdepth(itype(i),3) &
 5693.  Vp                      +capac(i,1) + capac(i,2)
 5694.  Vp-------->     END DO
 5695.                  !
 5696.                  !     planetary boundary layer parameterization
 5697.                  !
 5698.                  CALL pbl(jstneu, hgdtg , hgdtc , hgdtm , hcdtg , hcdtc , hcdtm , &
 5699.                       egdtg , egdtc , egdqm , ecdtg , ecdtc , ecdqm , deadtg, &
 5700.                       deadtc, deadqm,icheck , ect   , eci   , egt   , egi   , &
 5701.                       egs   , ec    , eg    , hc    , hg    , ecidif, egidif, &
 5702.                       ecmass, egmass, etmass, hflux , chf   , shf   , roff  , &
 5703.                       bps   , psb   , dzm   , em    , gmt   , gmq   ,  cu   , &
 5704.                       cuni  , ctni  , ustar , cosz  , rhoair, psy   , rcp   , &
 5705.                       wc   , wg       , fc       , fg       , hr       , vcover, z0x   , &
 5706.                       d       , rdc   , rbc   , z0       , qm       , tm       , um       , &
 5707.                       vm       , psur  , ppc   , ppl   , radn  , ra       , rb       , &
 5708.                       rd       , rc       , rg       , tcta  , tgta  , ta       , ea       , &
 5709.                       etc   , etg   , btc   , btg   , u2       , radt  , par   , &
 5710.                       pd       , rst   , rsoil , phroot,  hrr  , phsoil, cc       , &
 5711.                       cg       , satcap, snow  , dtc   , dtg   , dtm   , dqm   , &
 5712.                       stm   , extk  , radfac, closs , gloss , thermk, p1f   , &
 5713.                       p2f   , tc       , tg       , td       , capac , w       , itype , &
 5714.                       dtc3x , mon   , nmax  , ncols ,zlt2  ,green2,chil2 ,rstpar2,&
 5715.                       topt2 ,tll2  ,tu2   , defac2,ph12  ,ph22 )
 5716.              
 5717.                  !
 5718.                  !     continue to update sib variables
 5719.                  !
 5720.  V---------<     DO i = 1, nmax
 5721.  V                  tc(i) = tc(i) + dtc(i)
 5722.  V                  tg(i) = tg(i) + dtg(i)
 5723.  V--------->     END DO
 5724.                  !
 5725.                  !     dumping of small capac values onto soil surface store
 5726.                  !
 5727.  1---------<     DO iveg = 1, 2
 5728.  1 2-------<        DO i = 1, nmax
 5729.  1 2                   ntyp  =itype(i)
 5730.  1 2                   IF (capac(i,iveg) <= 1.e-6_r8)THEN
 5731.  1 2                      w(i,1)=w(i,1)+capac(i,iveg)/(poros(ntyp)*zdepth(ntyp,1))
 5732.  1 2                      capac(i,iveg)=0.0_r8
 5733.  1 2                   END IF
 5734.  1 2------->        END DO
 5735.  1--------->     END DO
 5736.                  !
 5737.                  !     snowmelt/refreeze calculation
 5738.                  !
 5739.                  CALL snowm(&
 5740.                       chf   ,shf   ,fluxef,roff  ,cc    ,cg    ,snow  ,dtc   ,dtg   , &
 5741.                       tc    ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols   )
 5742.                  !
 5743.                  !     update deep soil temperature using effective soil heat flux
 5744.                  !
 5745.                  timcon=dtc3x/(2.0_r8 *SQRT(pie*365.0_r8 ))
 5746.              
 5747.  Vpf-------<     DO i = 1, nmax
 5748.  Vpf                td(i)=td(i)+fluxef(i)/cg(i)*timcon
 5749.  Vpf------->     END DO
 5750.                  !
 5751.                  !     bare soil evaporation loss
 5752.                  !
 5753.                  hlat3i=1.0_r8/(hl*1000.0_r8 )
 5754.  f---------<     DO i = 1, nmax
 5755.  f                  ntyp=itype(i)
 5756.  f                  w(i,1)=w(i,1)-egs(i)*hlat3i/(poros(ntyp)*zdepth(ntyp,1))
 5757.  f--------->     END DO
 5758.                  !
 5759.                  !        extraction of transpiration loss from root zone
 5760.                  !
 5761.  1---------<     DO iveg = 1, 2
 5762.  1                  IF (iveg == 1) THEN
 5763.  1 V-------<           DO i = 1, nmax
 5764.  1 V                      absoil(i)=ect(i)*hlat3i
 5765.  1 V------->           END DO
 5766.  1                  ELSE
 5767.  1 V-------<           DO i = 1, nmax
 5768.  1 V                      absoil(i)=egt(i)*hlat3i
 5769.  1 V------->           END DO
 5770.  1                  END IF
 5771.  1 Vp------<        DO i = 1, nmax
 5772.  1 Vp                  ntyp=itype(i)
 5773.  1 Vp                  ef(i,2)=0.0_r8
 5774.  1 Vp                  ef(i,3)=0.0_r8
 5775.  1 Vp                  totdep(i)=zdepth(ntyp,1)
 5776.  1 Vp------>        END DO
 5777.  1 2-------<        DO il = 2, 3
 5778.  1 2 Vp----<           DO i = 1, nmax
 5779.  1 2 Vp                   ntyp=itype(i)
 5780.  1 2 Vp                   totdep(i)=totdep(i)+zdepth(ntyp,il)
 5781.  1 2 Vp                   div(i)=rootd(ntyp,iveg)
 5782.  1 2 Vp                   dep(i)=MAX(0.0_r8  ,rootd(ntyp,iveg)-totdep(i)+ &
 5783.  1 2 Vp                        zdepth(ntyp,il))
 5784.  1 2 Vp                   dep(i)=MIN(dep(i),zdepth(ntyp,il))
 5785.  1 2 Vp                   ef(i,il)=dep(i)/div(i)
 5786.  1 2 Vp---->           END DO
 5787.  1 2------->        END DO
 5788.  1 V-------<        DO i = 1, nmax
 5789.  1 V                   eft(i  )=ef(i,2)+ef (i,3)
 5790.  1 V                   eft(i) = MAX(eft(i),0.1e-5_r8)
 5791.  1 V                   ef (i,2)=ef(i,2)/eft(i)
 5792.  1 V                   ef (i,3)=ef(i,3)/eft(i)
 5793.  1 V------->        END DO
 5794.  1 2-------<        DO il = 2, 3
 5795.  1 2 Vp----<           DO i = 1, nmax
 5796.  1 2 Vp                   ntyp=itype(i)
 5797.  1 2 Vp                   w(i,il)=w(i,il)-absoil(i)*ef(i,il)/ &
 5798.  1 2 Vp                        (poros(ntyp)*zdepth(ntyp,il))
 5799.  1 2 Vp---->           END DO
 5800.  1 2------->        END DO
 5801.  1--------->     END DO
 5802.                  !
 5803.                  !     interflow, infiltration excess and loss to
 5804.                  !     groundwater .  all losses are assigned to variable 'roff' .
 5805.                  !
 5806.  b---------<     DO il = 1, 2
 5807.  b b-------<        DO i = 1, nmax
 5808.  b b                   IF (w(i,il) <= 0.0_r8) THEN
 5809.  b b                      ntyp=itype(i)
 5810.  b b                      w(i,il+1)=w(i,il+1)+w(i,il)* &
 5811.  b b                           zdepth(ntyp,il)/zdepth(ntyp,il+1)
 5812.  b b                      w(i,il  )=0.0_r8
 5813.  b b                   END IF
 5814.  b b------->        END DO
 5815.  b--------->     END DO
 5816.              
 5817.                  CALL runoff(&
 5818.                       roff  ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols )
 5819.              
 5820.  1---------<     DO i = 1, nmax
 5821.  1                  ntyp = itype(i)
 5822.  1                  IF (w(i,1) > 1.0_r8) THEN
 5823.  1                     w(i,2)=w(i,2)+(w(i,1)-1.0_r8 )*zdepth(ntyp,1)/zdepth(ntyp,2)
 5824.  1                     w(i,1)=1.0_r8
 5825.  1                  ENDIF
 5826.  1                  IF (w(i,2) > 1.0_r8) THEN
 5827.  1                     w(i,3)= w(i,3)+(w(i,2)-1.0_r8 )*zdepth(ntyp,2)/zdepth(ntyp,3)
 5828.  1                     w(i,2)=1.0_r8
 5829.  1                  ENDIF
 5830.  1                  IF (w(i,3) > 1.0_r8) THEN
 5831.  1                     roff(i)=roff(i)+(w(i,3)-1.0_r8 )*poros(ntyp)*zdepth(ntyp,3)
 5832.  1                     w(i,3)=1.0_r8
 5833.  1                  END IF
 5834.  1--------->     END DO
 5835.                  !
 5836.                  !     increment prognostic variables
 5837.                  !
 5838.                  !     adjust theta and sh to be consistent with dew formation
 5839.                  !
 5840.                  gby100 = 0.01_r8  * grav
 5841.              
 5842.  V---------<     DO i = 1, nmax
 5843.  V                  !
 5844.  V                  !     solve implicit system for winds
 5845.  V                  !
 5846.  V                  ! psb(i) = psur(i) * ( si(k) - si(k+1) )
 5847.  V                  !
 5848.  V                  drag(i)  =rhoair(i)*cu(i)*ustar(i)
 5849.  V                  !
 5850.  V                  ! P=rho*G*Z ===> DP=rho*G*DZ
 5851.  V                  !
 5852.  V                  ! D                D
 5853.  V                  !---- = rho * g * ----
 5854.  V                  ! DZ               DP
 5855.  V                  !                                D
 5856.  V                  ! aaa = cu * ustar *  rho * g * ----
 5857.  V                  !                                DP
 5858.  V                  !
 5859.  V                  !                                                   g
 5860.  V                  ! aaa (i)  = rhoair(i)*cu(i)*ustar(i) * -------------------------------
 5861.  V                  !                                       100*psur(i) * ( si(k) - si(k+1) )
 5862.  V                  !
 5863.  V                  aaa (i)  =drag  (i)*gby100/psb(i)
 5864.  V           
 5865.  V                  gmu (i,2) =  gmu(i,2) + dtc3x*aaa(i)
 5866.  V                  gmu (i,3) = (gmu(i,3) - aaa(i) * um(i)*sinclt(i) ) / gmu(i,2)
 5867.  V                  gmu (i,4) = (gmu(i,4) - aaa(i) * vm(i)*sinclt(i) ) / gmu(i,2)
 5868.  V           
 5869.  V                  d1     =1.0_r8/ra(i) + 1.0_r8/rb(i) + 1.0_r8/rd(i)
 5870.  V           
 5871.  V                  ta(i)  =( tg(i)/rd(i) + tc(i)/rb(i) + tm(i)*bps(i)/ra(i) )/d1
 5872.  V           
 5873.  V--------->     END DO
 5874.                  !
 5875.                  !     calculates soil water budget after calling pbl
 5876.                  !     and compares with previous budget
 5877.                  !
 5878.  Vp--------<     DO i = 1, nmax
 5879.  Vp                 ntyp=itype(i)
 5880.  Vp                 endwb(i)=w(i,1)*poros(ntyp)*zdepth(ntyp,1) &
 5881.  Vp                      +w(i,2)*poros(ntyp)*zdepth(ntyp,2) &
 5882.  Vp                      +w(i,3)*poros(ntyp)*zdepth(ntyp,3) &
 5883.  Vp                      +capac(i,1)+capac(i,2) &
 5884.  Vp                      -(ppl(i)+ppc(i))/1000.0_r8 + etmass(i)/1000.0_r8 + roff(i)
 5885.  Vp                 !IF (ABS(totwb(i)-endwb(i)) > 0.0001_r8) THEN
 5886.  Vp                 !  WRITE(UNIT=nfprt,FMT=998) latitu,i,ntyp,ndt, &
 5887.  Vp                 !       totwb(i),endwb(i),(totwb(i)-endwb(i)),w(i,1),w(i,2), &
 5888.  Vp                 !       w(i,3),capac(i,1),capac(i,2),ppl(i),ppc(i),etmass(i), &
 5889.  Vp                 !       roff(i),zlt(ntyp,12,1),zlt(ntyp,12,2), &
 5890.  Vp                 !       tc(i),tg(i),td(i),tm(i)
 5891.  Vp                 !END IF
 5892.  Vp                 !
 5893.  Vp                 !     calculates and compares energy budgets
 5894.  Vp                 !
 5895.  Vp                 cbal(i)=radt(i,1)-chf(i)-(ect(i)+hc(i)+eci(i))/dtc3x
 5896.  Vp                 gbal(i)=radt(i,2)-shf(i)-(egt(i)+egi(i)+hg(i)+egs(i))/dtc3x
 5897.  Vp                 !IF (ABS(cbal(i)-gbal(i)) > 5.0_r8) &
 5898.  Vp                 !    WRITE(UNIT=nfprt,FMT=999)latitu,i,ntyp,ndt, &
 5899.  Vp                 !    radt(i,1),radt(i,2),chf(i),shf(i),hflux(i), &
 5900.  Vp                 !    ect(i),eci(i),egt(i),egi(i),egs(i)
 5901.  Vp-------->     END DO
 5902.                  !cdir critical
 5903.  1---------<     DO i=1,nmax
 5904.  1                  ntyp=itype(i)
 5905.  1                  ! if(abs(totwb(i)-endwb(i)).gt.0.0001_r8) then
 5906.  1                  IF(ABS(totwb(i)-endwb(i)).GT.0.0005_r8) THEN
 5907.  1                     WRITE(UNIT=nfprt,FMT=998) latitu,i,ntyp,ndt, &
 5908.  1                          totwb(i),endwb(i),(totwb(i)-endwb(i)),w(i,1),w(i,2), &
 5909.  1                          w(i,3),capac(i,1),capac(i,2),ppl(i),ppc(i),etmass(i), &
 5910.  1                          roff(i),zlt(ntyp,12,1),zlt(ntyp,12,2), &
 5911.  1                          tc(i),tg(i),td(i),tm(i)
 5912.  1                  END IF
 5913.  1                  IF(ABS(cbal(i)-gbal(i)).GT.5.0_r8) &
 5914.  1                       WRITE(UNIT=nfprt,FMT=999)latitu,i,ntyp,ndt, &
 5915.  1                       radt(i,1),radt(i,2),chf(i),shf(i),hflux(i), &
 5916.  1                       ect(i),eci(i),egt(i),egi(i),egs(i)
 5917.  1--------->     END DO
 5918.                  !cdir end critical
 5919.              
 5920.              998    FORMAT(3I4,1X,'WATER BAL.',I8,/3E12.4/3E12.4/2E12.4/4E12.4/2E12.4/4E12.4)
 5921.              999    FORMAT(3I4,1X,'ENERGY BAL.',I8/4E12.3/6E12.3)
 5922.                END SUBROUTINE fysiks
 5923.              
 5924.              
 5925.              
 5926.                ! vntlt1 :performs ventilation mass flux, based on deardorff, mwr, 1972?.
 5927.              
 5928.              
 5929.              
 5930.                SUBROUTINE vntlt1 &
 5931.                     (rmi   ,rhi   ,gu    ,gv    ,gt    ,tsurf ,tsea  ,ncols , &
 5932.                     sigki ,cuni  ,cui   ,cu    ,ctni  ,cti   ,ct    ,speedm,tha   , &
 5933.                     thm   ,dzm   ,thvgm ,rib   ,z0    ,zorl  ,ustar ,sinclt,mskant  )
 5934.                  !
 5935.                  !==========================================================================
 5936.                  !==========================================================================
 5937.                  !==========================================================================
 5938.                  ! imax..........number of grid points on a gaussian latitude circle
 5939.                  ! z0ice.........Roughness length of ice
 5940.                  ! sinclt........sinclt=SIN(colrad(latitu))
 5941.                  ! rmi...........rmi   (i)=cu(i)*ustar(i), where
 5942.                  !               cu is friction  transfer coefficients
 5943.                  !               ustar is surface friction velocity  (m/s)
 5944.                  ! rhi...........rhi   (i)=ct(i)*ustar(i), where
 5945.                  !               ct is heat transfer coefficients.
 5946.                  !               ustar is surface friction velocity  (m/s)
 5947.                  ! gu............(zonal      velocity)*sin(colat)
 5948.                  ! gv............(meridional velocity)*sin(colat)
 5949.                  ! gt............temperature
 5950.                  ! tsurf.........earth's surface temperature used for radiation
 5951.                  !               for the first time step when ground temperature is not yet
 5952.                  !               computed (this is done by subr.tsinit ),
 5953.                  ! tsea..........effective surface radiative temperature ( tgeff )
 5954.                  ! zorl..........zorl (i)= 100.0 *zgrav*speedm(i)*rhi(i)
 5955.                  !               zgrav =0.032 /grav
 5956.                  ! delsig
 5957.                  ! sigki ........sigki (k)=1.0e0/EXP(akappa*LOG(sig(k))),  where "sig"
 5958.                  !               sigma coordinate at middle of layer and akappa=gasr/cp
 5959.                  ! cuni..........neutral friction transfer  coefficients.
 5960.                  ! cui...........cui   (i)=cuni(i)*EXP( aa-SQRT(aa*aa+bb*f))
 5961.                  !               cui   (i)=cuni(i)*EXP(-tt+SQRT(tt*tt+ss*f))
 5962.                  ! cu............Friction  transfer coefficients.
 5963.                  ! ctni..........neutral heat transfer coefficients.
 5964.                  ! cti...........cti   (i)=ctni(i)*EXP( qq-SQRT(qq*qq+rr*g))
 5965.                  !               cti   (i)=cui (i)
 5966.                  ! ct............heat transfer coefficients.
 5967.                  ! speedm........speedm(i)=SQRT(gu(i)**2+gv(i)**2)*sincli, where
 5968.                  !               sincli=1.0 /sinclt
 5969.                  ! tha...........tha   (i)= tsurf(i)
 5970.                  ! thm...........thm   (i)= gt(i)*sigki(1)
 5971.                  ! dzm...........dzm   (i)=gt(i)*rbyg
 5972.                  !               rbyg  =gasr/grav*delsig(1)*0.5
 5973.                  ! thvgm.........thvgm (i)= tha(i)-thm(i)
 5974.                  ! rib...........bulk richardson number.
 5975.                  ! z0............Roughness length
 5976.                  ! ustarr........surface friction velocity  (m/s)
 5977.                  ! gasr..........gas constant of dry air        (j/kg/k)
 5978.                  ! grav..........grav   gravity constant        (m/s**2)
 5979.                  !==========================================================================
 5980.                  !
 5981.                  INTEGER, INTENT(in   ) :: ncols
 5982.                  REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
 5983.                  REAL(KIND=r8),    INTENT(inout  ) :: rmi   (ncols)
 5984.                  REAL(KIND=r8),    INTENT(inout  ) :: rhi   (ncols)
 5985.                  REAL(KIND=r8),    INTENT(in   ) :: gu    (ncols)
 5986.                  REAL(KIND=r8),    INTENT(in   ) :: gv    (ncols)
 5987.                  REAL(KIND=r8),    INTENT(in   ) :: gt    (ncols)
 5988.                  REAL(KIND=r8),    INTENT(in   ) :: tsurf (ncols)
 5989.                  REAL(KIND=r8),    INTENT(in   ) :: tsea  (ncols)
 5990.                  REAL(KIND=r8),    INTENT(in   ) :: zorl  (ncols)
 5991.                  REAL(KIND=r8),    INTENT(in   ) :: sigki   (1)
 5992.                  REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 5993.                  REAL(KIND=r8),    INTENT(inout) :: cui   (ncols)
 5994.                  REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 5995.                  REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 5996.                  REAL(KIND=r8),    INTENT(inout) :: cti   (ncols)
 5997.                  REAL(KIND=r8),    INTENT(inout) :: ct    (ncols)
 5998.                  REAL(KIND=r8),    INTENT(inout) :: speedm(ncols)
 5999.                  REAL(KIND=r8),    INTENT(inout) :: tha   (ncols)
 6000.                  REAL(KIND=r8),    INTENT(inout) :: thm   (ncols)
 6001.                  REAL(KIND=r8),    INTENT(inout) :: dzm   (ncols)
 6002.                  REAL(KIND=r8),    INTENT(inout) :: thvgm (ncols)
 6003.                  REAL(KIND=r8),    INTENT(inout) :: rib   (ncols)
 6004.                  REAL(KIND=r8),    INTENT(inout) :: z0    (ncols)
 6005.                  REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 6006.                  INTEGER(KIND=i8), INTENT(in   ) :: mskant(ncols)
 6007.              
 6008.                  REAL(KIND=r8),        PARAMETER :: vkrmn=0.40_r8
 6009.                  REAL(KIND=r8),        PARAMETER :: ribc=3.05_r8
 6010.                  REAL(KIND=r8),        PARAMETER :: aa=1.2270_r8
 6011.                  REAL(KIND=r8),        PARAMETER :: bb=1.2642_r8
 6012.                  REAL(KIND=r8),        PARAMETER :: tt=1.8900_r8
 6013.                  REAL(KIND=r8),        PARAMETER :: ss=5.0519_r8
 6014.                  REAL(KIND=r8),        PARAMETER :: ee=1.2743_r8
 6015.                  REAL(KIND=r8),        PARAMETER :: ff=3.4805_r8
 6016.                  REAL(KIND=r8),        PARAMETER :: gg=0.87581_r8
 6017.                  REAL(KIND=r8),        PARAMETER :: hh=-1.5630_r8
 6018.                  REAL(KIND=r8),        PARAMETER :: pp=10.815_r8
 6019.                  REAL(KIND=r8),        PARAMETER :: qq=1.3462_r8
 6020.                  REAL(KIND=r8),        PARAMETER :: rr=1.8380_r8
 6021.                  REAL(KIND=r8)                   :: sincli(ncols)
 6022.                  REAL(KIND=r8)                   :: f
 6023.                  REAL(KIND=r8)                   :: g
 6024.                  INTEGER                :: i
 6025.              
 6026.  1---------<     DO i = 1, ncols
 6027.  1                  IF(mskant(i) == 1_i8)THEN
 6028.  1                     z0(i)=0.001_r8
 6029.  1                     IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) >= 271.17_r8) THEN
 6030.  1                        z0(i)=0.01_r8*zorl(i)
 6031.  1                     ELSE IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < 271.17_r8) THEN
 6032.  1                       z0(i)=z0ice
 6033.  1                     END IF
 6034.  1                     sincli(i)=1.0_r8 /sinclt(i)
 6035.  1                  END IF  
 6036.  1--------->     END DO
 6037.              
 6038.  1---------<     DO i = 1, ncols
 6039.  1                  IF(mskant(i) == 1_i8)THEN
 6040.  1                     IF (tsea(i) <= 0.0_r8) THEN
 6041.  1                        speedm(i)=SQRT(gu(i)**2+gv(i)**2)*sincli(i)
 6042.  1                        speedm(i)=MAX(2.0_r8 ,speedm(i))
 6043.  1                        dzm   (i)=gt(i)*rbyg
 6044.  1                        cuni(i)=LOG(dzm(i)/z0(i))/vkrmn*gg+hh
 6045.  1                        ctni(i)=cuni(i)
 6046.  1                        !
 6047.  1                        !     stability branch based on bulk richardson number.
 6048.  1                        !
 6049.  1                        thm   (i)= gt(i)*sigki(1)
 6050.  1                        tha   (i)= tsurf(i)
 6051.  1                        thvgm (i)= tha(i)-thm(i)
 6052.  1                        rib   (i)=-thvgm(i)*grav*dzm(i)/ (thm(i)*speedm(i)**2)
 6053.  1                        rib   (i)=MAX(-1.25_r8 ,rib(i))
 6054.  1                        rib   (i)=MIN( 1.25_r8 ,rib(i))
 6055.  1                        IF (rib(i) < 0.0_r8) THEN
 6056.  1                           f        =LOG(1.0_r8-ee*rib(i))
 6057.  1                           cui   (i)=cuni(i)*EXP( aa-SQRT(aa*aa+bb*f))
 6058.  1                           g        =LOG(1.0_r8-ff*rib(i))
 6059.  1                           cti   (i)=ctni(i)*EXP( qq-SQRT(qq*qq+rr*g))
 6060.  1                        ELSE
 6061.  1                           f        =LOG(1.0_r8+pp*rib(i))
 6062.  1                           cui   (i)=cuni(i)*EXP(-tt+SQRT(tt*tt+ss*f))
 6063.  1                           cti   (i)=cui (i)
 6064.  1                        END IF
 6065.  1                        cu    (i)=1.0_r8/cui(i)
 6066.  1                        ct    (i)=1.0_r8/cti(i)
 6067.  1                        !
 6068.  1                        !     surface friction velocity and ventilation mass flux
 6069.  1                        !
 6070.  1                        ustar (i)=speedm(i)*cu(i)
 6071.  1                        rmi   (i)=cu(i)*ustar(i)
 6072.  1                        rhi   (i)=ct(i)*ustar(i)
 6073.  1                     END IF
 6074.  1                  END IF
 6075.  1--------->     END DO
 6076.                END SUBROUTINE vntlt1
ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 6076 
  Named Constant "RIBC" is not used.

 6077.              
 6078.              
 6079.              
 6080.              
 6081.              
 6082.              
 6083.                SUBROUTINE seasfc( &
 6084.                     tmtx  ,umtx  ,qmtx  ,kpbl  ,kqpbl ,slrad ,tsurf ,qsurf , &
 6085.                     gu    ,gv    ,gt    ,gq    ,gps   ,tsea  ,dtc3x ,sinclt, &
 6086.                     sigki ,delsig,sens  ,evap  ,umom  ,vmom  ,rmi   ,rhi   , &
 6087.                     cond  ,stor  ,zorl  ,ncols ,speedm,Ustarm,z0    , &
 6088.                     rho   ,qsfc  ,tsfc  ,mskant  )
 6089.                  !
 6090.                  !==========================================================================
 6091.                  ! ncols......Number of grid points on a gaussian latitude circle
 6092.                  ! kpbl.......Number of layers pbl process is included( for u v,t )
 6093.                  ! kqpbl......Number of layers pbl process is included( for q     )
 6094.                  ! tmtx.......Temperature related matrix
 6095.                  !            gmt(i,k,1)*d(gt(i,k-1))/dt+gmt(i,k,2)*d(gt(i,k))/dt=gmt(i,k,3)
 6096.                  !            gmt(i,1,1)=0.
 6097.                  !            gmt(*,*,1)...dimensionless
 6098.                  !            gmt(*,*,2)...dimensionless
 6099.                  !            gmt(*,*,3)...deg/sec
 6100.                  ! umtx.......Wind related matrix
 6101.                  !            gmu(i,k,1)*d(gu(i,k-1))/dt+gmu(i,k,2)*d(gu(i,k))/dt=gmu(i,k,3)
 6102.                  !            gmu(i,k,1)*d(gv(i,k-1))/dt+gmu(i,k,2)*d(gv(i,k))/dt=gmu(i,k,4)
 6103.                  !            gmu(i,1,1)=0.
 6104.                  !            gmu(*,*,1)...dimensionless
 6105.                  !            gmu(*,*,2)...dimensionless
 6106.                  !            gmu(*,*,3)...m/sec**2
 6107.                  !            gmu(*,*,4)...m/sec**2
 6108.                  ! qmtx.......specific humidity related matrix
 6109.                  !            gmq(i,k,1)*d(gq(i,k-1))/dt+gmq(i,k,2)*d(gq(i,k))/dt=gmq(i,k,3)
 6110.                  !            gmq(i,1,1)=0.
 6111.                  !            gmq(*,*,1)...dimensionless
 6112.                  !            gmq(*,*,2)...dimensionless
 6113.                  !            gmq(*,*,3)...kg/kg/sec
 6114.                  ! slrad......radiation interpolation
 6115.                  ! tsurff.....earth's surface temperature used for radiation
 6116.                  !            for the first time step when ground temperature is not yet
 6117.                  !            computed (this is done by subr.tsinit ),
 6118.                  ! qsurf......qsurf(i)=0.622e0*EXP(21.65605e0 -5418.0e0 /tsurf(i))/gps(i)
 6119.                  ! gu.........(zonal      velocity)*sin(colat)
 6120.                  ! gv.........(meridional velocity)*sin(colat)
 6121.                  ! gt.........Temperature
 6122.                  ! gq.........Specific humidity
 6123.                  ! gps........Surface pressure in mb
 6124.                  ! tsea.......effective surface radiative temperature ( tgeff )
 6125.                  ! dtc3x......time increment dt
 6126.                  ! sinclt.....sinclt=SIN(colrad(latitu))
 6127.                  ! sigki......sigki (k)=1.0e0/EXP(akappa*LOG(sig(k))),  where "sig"
 6128.                  !            sigma coordinate at middle of layer and akappa=gasr/cp
 6129.                  ! delsig
 6130.                  ! sens.......sensible heat flux
 6131.                  ! evap.......latent heat flux  "evaporation"
 6132.                  ! umom.......umom(i)=fmom*um(ncount),
 6133.                  !            where .fmom  momentum flux      in n/m**2
 6134.                  !            fmom= rhoair(ncount)*cu(ncount)*ustar(ncount)
 6135.                  !            um  (ncount)=gu (i,1)/sinclt
 6136.                  !            gu          = (zonal velocity)*sin(colat)
 6137.                  ! vmom.......vmom(i)=rho(i)*gv(i)*rmi(i)
 6138.                  !            rho  (i)=gps(i)/(gr100*gt(i))
 6139.                  !            gr100 =gasr*0.01
 6140.                  ! z0ice.......Roughness length of ice
 6141.                  ! rmi.........rmi   (i)=cu(i)*ustar(i), where
 6142.                  !             cu is friction  transfer coefficients
 6143.                  !             ustar is surface friction velocity  (m/s)
 6144.                  ! rhi.........rhi   (i)=ct(i)*ustar(i), where
 6145.                  !             ct is heat transfer coefficients.
 6146.                  !             ustar is surface friction velocity  (m/s)
 6147.                  ! cond........cond(i)=gice*(tsurf(i)-tice) or
 6148.                  !             cond(i)=(2.03/2.0)*(tsurf(i)-271.16)
 6149.                  ! stor........stor(i)=hscap*c0(i)
 6150.                  ! zorl........zorl (i)= 100.0 *zgrav*speedm(i)*rhi(i)
 6151.                  !             zgrav =0.032 /grav
 6152.                  ! cp..........specific heat of air           (j/kg/k)
 6153.                  ! hl..........heat of evaporation of water     (j/kg)
 6154.                  ! gasr........gas constant of dry air        (j/kg/k)
 6155.                  ! grav........grav   gravity constant        (m/s**2)
 6156.                  ! stefan......Stefan Boltzman constant
 6157.                  !==========================================================================
 6158.                  !
 6159.                  INTEGER, INTENT(in   ) :: ncols
 6160.                  INTEGER, INTENT(IN   ) :: kpbl
 6161.                  INTEGER, INTENT(IN   ) :: kqpbl
 6162.                  REAL(KIND=r8),    INTENT(INOUT) :: tmtx (ncols,kpbl,3)
 6163.                  REAL(KIND=r8),    INTENT(INOUT) :: umtx (ncols,kpbl,4)
 6164.                  REAL(KIND=r8),    INTENT(INOUT) :: qmtx (ncols,kqpbl,3)
 6165.                  REAL(KIND=r8),    INTENT(IN   ) :: slrad(ncols)
 6166.                  REAL(KIND=r8),    INTENT(INOUT) :: tsurf(ncols)
 6167.                  REAL(KIND=r8),    INTENT(IN   ) :: qsurf(ncols)
 6168.                  REAL(KIND=r8),    INTENT(IN   ) :: gu   (ncols)
 6169.                  REAL(KIND=r8),    INTENT(IN   ) :: gv   (ncols)
 6170.                  REAL(KIND=r8),    INTENT(INOUT) :: gt   (ncols)
 6171.                  REAL(KIND=r8),    INTENT(INOUT) :: gq   (ncols)
 6172.                  REAL(KIND=r8),    INTENT(IN   ) :: gps  (ncols)
 6173.                  REAL(KIND=r8),    INTENT(INOUT) :: tsea (ncols)
 6174.                  REAL(KIND=r8),    INTENT(IN   ) :: dtc3x
 6175.                  REAL(KIND=r8),    INTENT(IN   ) :: sinclt(ncols)
 6176.                  REAL(KIND=r8),    INTENT(IN   ) :: sigki(1)
 6177.                  REAL(KIND=r8),    INTENT(IN   ) :: delsig(1)
 6178.                  REAL(KIND=r8),    INTENT(INOUT  ) :: sens (ncols)
 6179.                  REAL(KIND=r8),    INTENT(INOUT  ) :: evap (ncols)
 6180.                  REAL(KIND=r8),    INTENT(INOUT  ) :: umom (ncols)
 6181.                  REAL(KIND=r8),    INTENT(INOUT  ) :: vmom (ncols)
 6182.                  REAL(KIND=r8),    INTENT(INOUT  ) :: rmi  (ncols)
 6183.                  REAL(KIND=r8),    INTENT(INOUT  ) :: rhi  (ncols)
 6184.                  REAL(KIND=r8),    INTENT(INOUT  ) :: cond (ncols)
 6185.                  REAL(KIND=r8),    INTENT(INOUT  ) :: stor (ncols)
 6186.                  REAL(KIND=r8),    INTENT(INOUT  ) :: zorl (ncols)
 6187.                  REAL(KIND=r8) :: rnet (ncols)
 6188.                  REAL(KIND=r8),    INTENT(INOUT    ) :: speedm  (ncols)
 6189.                  REAL(KIND=r8),    INTENT(OUT    ) :: Ustarm  (ncols)
 6190.                  REAL(KIND=r8),    INTENT(INOUT    ) :: z0      (ncols)
 6191.                  REAL(KIND=r8),    INTENT(OUT    ) :: rho   (ncols)
 6192.                  REAL(KIND=r8),    INTENT(INOUT    ) :: qsfc (ncols)
 6193.                  REAL(KIND=r8),    INTENT(INOUT    ) ::  tsfc (ncols)
 6194.                  INTEGER(KIND=i8)      ,    INTENT(IN )       :: mskant(ncols)
 6195.                  REAL(KIND=r8)    :: ah    (ncols)
 6196.                  REAL(KIND=r8)    :: al    (ncols)
 6197.                  REAL(KIND=r8)    :: am    (ncols)
 6198.                  REAL(KIND=r8)    :: cuni  (ncols)
 6199.                  REAL(KIND=r8)    :: cui   (ncols)
 6200.                  REAL(KIND=r8)    :: cu    (ncols)
 6201.                  REAL(KIND=r8)    :: ctni  (ncols)
 6202.                  REAL(KIND=r8)    :: cti   (ncols)
 6203.                  REAL(KIND=r8)    :: ct    (ncols)
 6204.                  REAL(KIND=r8)    :: um    (ncols)
 6205.                  REAL(KIND=r8)    :: vm    (ncols)
 6206.                  REAL(KIND=r8)    :: tha   (ncols)
 6207.                  REAL(KIND=r8)    :: thm   (ncols)
 6208.                  REAL(KIND=r8)    :: dzm   (ncols)
 6209.                  REAL(KIND=r8)    :: thvgm (ncols)
 6210.                  REAL(KIND=r8)    :: rib   (ncols)
 6211.                  REAL(KIND=r8)    :: ustar (ncols)
 6212.                  REAL(KIND=r8)    :: gtsav (ncols)
 6213.                  REAL(KIND=r8)    :: gqsav (ncols)
 6214.                  REAL(KIND=r8)    :: tmsav (ncols)
 6215.                  REAL(KIND=r8)    :: qmsav (ncols)
 6216.                  REAL(KIND=r8)    :: tssav (ncols)
 6217.                  REAL(KIND=r8)    :: dqg0  (ncols)
 6218.                  REAL(KIND=r8)    :: b00   (ncols)
 6219.                  REAL(KIND=r8)    :: b03   (ncols)
 6220.                  REAL(KIND=r8)    :: b04   (ncols)
 6221.                  REAL(KIND=r8)    :: c0    (ncols)
 6222.                  REAL(KIND=r8)    :: b30   (ncols)
 6223.                  REAL(KIND=r8)    :: b33   (ncols)
 6224.                  REAL(KIND=r8)    :: c3    (ncols)
 6225.                  REAL(KIND=r8)    :: b40   (ncols)
 6226.                  REAL(KIND=r8)    :: b44   (ncols)
 6227.                  REAL(KIND=r8)    :: c4    (ncols)
 6228.              
 6229.                  INTEGER :: i
 6230.                  INTEGER :: ncount
 6231.                  REAL(KIND=r8)    :: gbyhl
 6232.                  REAL(KIND=r8)    :: gbycp
 6233.                  REAL(KIND=r8)    :: gr100
 6234.                  REAL(KIND=r8)    :: gb100
 6235.                  REAL(KIND=r8)    :: zgrav
 6236.                  REAL(KIND=r8)    :: gice
 6237.                  REAL(KIND=r8)    :: hscap
 6238.                  REAL(KIND=r8)    :: sl1kap
 6239.                  REAL(KIND=r8)    :: st4
 6240.                  REAL(KIND=r8)    :: dti
 6241.                  REAL(KIND=r8)    :: dtm
 6242.                  REAL(KIND=r8)    :: dtmdt
 6243.                  REAL(KIND=r8)    :: dqm
 6244.                  REAL(KIND=r8)    :: dqmdt
 6245.                  !*JPB REAL(KIND=r8), PARAMETER :: dd=0.05_r8
 6246.                  REAL(KIND=r8), PARAMETER :: dd=3.0_r8 ! Total depth of the ice slab (m), Using ECMWF value
 6247.                  REAL(KIND=r8), PARAMETER :: tice=271.16_r8
 6248.                  REAL(KIND=r8), PARAMETER :: dice=2.0_r8
 6249.                  REAL(KIND=r8), PARAMETER :: hice=2.03_r8
 6250.                  REAL(KIND=r8), PARAMETER :: rhoice=920.0_r8 ! Mean ice density (kg/m3)
 6251.                  REAL(KIND=r8), PARAMETER :: cice=2093.0_r8  ! Heat Capacity of Ice (J/Kg)
 6252.              
 6253.              
 6254.                  gr100 =gasr*0.01_r8
 6255.                  gbycp =grav/(cp*delsig(1)*100.0_r8 *sigki(1))
 6256.                  gbyhl =grav/(hl*delsig(1)*100.0_r8 )
 6257.                  gb100 =grav/(   delsig(1)*100.0_r8 )
 6258.                  zgrav =0.032_r8 /grav
 6259.                  gice  =hice/dice ! 2.03_r8/2.0_r8
 6260.                  hscap =rhoice*cice*dd/dtc3x
 6261.                  sl1kap=sigki(1)
 6262.                  st4   =stefan*4.0_r8
 6263.                  dti   =1.0_r8 /dtc3x
 6264.              
 6265.  1---------<     DO i = 1, ncols
 6266.  1                  IF(mskant(i) == 1_i8)THEN
 6267.  1                     rnet (i)=-697.58_r8*slrad(i)
 6268.  1                     rho  (i)=gps(i)/(gr100*gt(i))
 6269.  1                     ah   (i)=gbycp/gps(i)
 6270.  1                     al   (i)=gbyhl/gps(i)
 6271.  1                     dqg0 (i)=0.622_r8 *EXP(30.25353_r8 -5418.0_r8 /tsurf(i)) &
 6272.  1                          /(tsurf(i)*tsurf(i)*gps(i))
 6273.  1                     gtsav(i)=gt   (i)
 6274.  1                     gqsav(i)=gq   (i)
 6275.  1                     tssav(i)=tsurf(i)
 6276.  1                     tmsav(i)=tmtx (i,1,3)
 6277.  1                     qmsav(i)=qmtx (i,1,3)
 6278.  1                   END IF
 6279.  1--------->     END DO
 6280.              
 6281.  Vf-------<>     c0  =0.0_r8
 6282.  f--------<>     cond=0.0_r8
 6283.  f--------<>     stor=0.0_r8
 6284.              
 6285.                  ncount=0
 6286.              8000 CONTINUE
 6287.                  ncount=ncount+1
 6288.  I               CALL vntlt1 ( &
 6289.                       rmi   ,rhi   ,gu    ,gv    ,gt    ,tsurf ,tsea  ,ncols , &
 6290.                       sigki ,cuni  ,cui   ,cu    ,ctni  ,cti   ,ct    ,speedm,tha   , &
 6291.                       thm   ,dzm   ,thvgm ,rib   ,z0    ,zorl  ,ustar ,sinclt,mskant )
 6292.  1---------<     DO i = 1, ncols
 6293.  1                  IF(mskant(i) == 1_i8)THEN
 6294.  1                     gt  (i)    =gtsav(i)
 6295.  1                     gq  (i)    =gqsav(i)
 6296.  1                     tsurf(i)   =tssav(i)
 6297.  1                     tmtx(i,1,3)=tmsav(i)
 6298.  1                     qmtx(i,1,3)=qmsav(i)
 6299.  1                  END IF
 6300.  1--------->     END DO
 6301.  1---------<     DO i = 1, ncols
 6302.  1                  IF(mskant(i) == 1_i8)THEN
 6303.  1                     ! Solution of sea ice
 6304.  1                     IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < tice+0.01_r8) THEN
 6305.  1                        b00(i)=   hscap+cp*rho(i)*rhi(i) &
 6306.  1                             +hl*rho(i)*rhi(i)*dqg0(i) &
 6307.  1                             +gice+st4*tsurf(i)**3
 6308.  1                        b03(i)=        -cp*rho(i)*rhi(i)*sl1kap
 6309.  1                        b04(i)=-hl*rho(i)*rhi(i)
 6310.  1                        ! Right side of eq.41 section III.A 
 6311.  1                        ! COLA Physics Description Manual
 6312.  1                        c0 (i)=rnet(i) -cp*rho(i)*rhi(i)*(tsurf(i)-sl1kap*gt(i)) &
 6313.  1                             -hl*rho(i)*rhi(i)*(qsurf(i)-       gq(i)) &
 6314.  1                             -gice*(tsurf(i)-tice)-stefan*tsurf(i)**4
 6315.  1                        b30(i)=               -ah (i)*cp*rho(i)*rhi(i)
 6316.  1                        b33(i)=tmtx(i,1,2)*dti-b30(i)*          sl1kap
 6317.  1                        c3 (i)=tmtx(i,1,3)    -b30(i)*(tsurf(i)-sl1kap*gt(i))
 6318.  1                        b40(i)=               -al(i)*hl*rho(i)*rhi(i)* dqg0 (i)
 6319.  1                        b44(i)=qmtx(i,1,2)*dti+al(i)*hl*rho(i)*rhi(i)
 6320.  1                        c4 (i)=qmtx(i,1,3)    + &
 6321.  1                             al(i)*hl*rho(i)*rhi(i)*(qsurf(i)-gq(i))
 6322.  1                        b00(i)=b00(i)-b30(i)*b03(i)/b33(i)-b40(i)*b04(i)/b44(i)
 6323.  1                        c0 (i)=c0 (i)-c3 (i)*b03(i)/b33(i)-c4 (i)*b04(i)/b44(i)
 6324.  1                        c0 (i)=c0 (i)/b00(i)
 6325.  1                        tsurf(i)=tsurf(i)+c0(i)
 6326.  1                        tmtx(i,1,3)=(c3(i)-b30(i)*c0(i))/(b33(i)*dtc3x)
 6327.  1                        qmtx(i,1,3)=(c4(i)-b40(i)*c0(i))/(b44(i)*dtc3x)
 6328.  1                     ! Solution of sea water
 6329.  1                     ELSE IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) > tice+0.01_r8) THEN
 6330.  1                        zorl (i)= 100.0_r8 *zgrav*speedm(i)*rhi(i)
 6331.  1                        sens (i)= rho(i)*cp*(tsurf(i)-gt(i)*sigki(1))*rhi(i)
 6332.  1                        evap (i)= rho(i)*hl*(qsurf(i)-gq(i))*rhi(i)
 6333.  1                        tmtx(i,1,3)=(tmtx(i,1,3)+ah(i)*sens(i)) &
 6334.  1                             /(tmtx(i,1,2)+dtc3x*ah(i)*rho(i)*cp*rhi(i))
 6335.  1                        qmtx(i,1,3)=(qmtx(i,1,3)+al(i)*evap(i)) &
 6336.  1                             /(qmtx(i,1,2)+dtc3x*al(i)*rho(i)*hl*rhi(i))
 6337.  1                     END IF
 6338.  1                  END IF	  
 6339.  1--------->     END DO
 6340.              
 6341.  1---------<     DO i = 1, ncols
 6342.  1                  IF(mskant(i) == 1_i8)THEN
 6343.  1                     gt(i)=gt(i)+tmtx(i,1,3)*dtc3x
 6344.  1                     gq(i)=gq(i)+qmtx(i,1,3)*dtc3x
 6345.  1                  END IF
 6346.  1--------->     END DO
 6347.              
 6348.                  IF (ncount == 1) go to 8000
 6349.              
 6350.  1---------<     DO i = 1, ncols
 6351.  1                 IF(mskant(i) == 1_i8)THEN
 6352.  1                     sens(i)=rho(i)*cp*(tsurf(i)-gt(i)*sigki(1))*rhi(i)
 6353.  1                     evap(i)=rho(i)*hl*(qsurf(i)-gq(i)         )*rhi(i)
 6354.  1           
 6355.  1                     dtmdt=(ah(i)*sens(i))/(tmtx(i,1,2)+dtc3x*ah(i)*rho(i)*cp*rhi(i))
 6356.  1                     dqmdt=(al(i)*evap(i))/(qmtx(i,1,2)+dtc3x*al(i)*rho(i)*hl*rhi(i))
 6357.  1                     dtm=dtmdt*dtc3x
 6358.  1                     dqm=dqmdt*dtc3x
 6359.  1                     tsfc   (i)=gt(i)+dtm
 6360.  1                     qsfc   (i)=gq(i)+dqm
 6361.  1           
 6362.  1                     gt  (i)=gtsav(i)
 6363.  1                     gq  (i)=gqsav(i)
 6364.  1                     IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < tice+0.01_r8) THEN
 6365.  1                        cond(i)=gice*(tsurf(i)-tice)
 6366.  1                        stor(i)=hscap*c0(i)
 6367.  1                        tsurf(i)=MIN(tsurf(i),tice)
 6368.  1                        tsea (i)=-   tsurf(i)
 6369.  1                     END IF
 6370.  1                  END IF
 6371.  1--------->     END DO
 6372.              
 6373.  1---------<     DO i = 1, ncols
 6374.  1                  IF(mskant(i) == 1_i8)THEN
 6375.  1                     umom(i)=rho(i)*gu(i)*rmi(i)
 6376.  1                     vmom(i)=rho(i)*gv(i)*rmi(i)
 6377.  1                     am  (i)=gb100/gps(i)
 6378.  1                     umtx(i,1,3)=(umtx(i,1,3)-am(i)*umom(i)) &
 6379.  1                          /(umtx(i,1,2)+dtc3x*am(i)*rho(i)*rmi(i))
 6380.  1                     umtx(i,1,4)=(umtx(i,1,4)-am(i)*vmom(i)) &
 6381.  1                          /(umtx(i,1,2)+dtc3x*am(i)*rho(i)*rmi(i))
 6382.  1                     !
 6383.  1                        !     set surface stress use of pseudo winds to true winds
 6384.  1                     !     for output diagnostics
 6385.  1                     !
 6386.  1                     umom(i)=umom(i)/sinclt(i)
 6387.  1                     vmom(i)=vmom(i)/sinclt(i)
 6388.  1                     Ustarm(i) = sqrt(umom(i)**2 + vmom(i)**2)
 6389.  1                     IF(Ustarm(i)==0.0_r8)Ustarm(i)=0.007_r8
 6390.  1                     um  (i)=gu (i)/sinclt(i)
 6391.  1                     vm  (i)=gv (i)/sinclt(i)
 6392.  1                     speedm(i)=SQRT(um(i)**2 + vm(i)**2)
 6393.  1                     speedm(i)=MAX(2.0_r8 , speedm(i))
 6394.  1                  END IF
 6395.  1--------->     END DO
 6396.                END SUBROUTINE seasfc
 6397.              
 6398.              
 6399.                SUBROUTINE sextrp &
 6400.                     (td    ,tg    ,tc    ,w     ,capac ,td0   ,tg0   ,tc0   ,w0    , &
 6401.                     capac0,tdm   ,tgm   ,tcm   ,wm    ,capacm,istrt ,ncols ,nmax  , &
 6402.                     epsflt,intg  ,latitu,tm0   ,qm0   ,tm    ,qm    ,tmm    ,qmm     )
 6403.                  INTEGER, INTENT(in   ) :: istrt
 6404.                  INTEGER, INTENT(in   ) :: ncols
 6405.                  INTEGER, INTENT(in   ) :: nmax
 6406.                  REAL(KIND=r8)   , INTENT(in   ) :: epsflt
 6407.                  INTEGER, INTENT(in   ) :: intg
 6408.                  INTEGER, INTENT(in   ) :: latitu
 6409.                  REAL(KIND=r8),    INTENT(in   ) :: tm    (ncols)
 6410.                  REAL(KIND=r8),    INTENT(in   ) :: qm    (ncols)
 6411.                  REAL(KIND=r8),    INTENT(in   ) :: td    (ncols)
 6412.                  REAL(KIND=r8),    INTENT(in   ) :: tg    (ncols)
 6413.                  REAL(KIND=r8),    INTENT(in   ) :: tc    (ncols)
 6414.                  REAL(KIND=r8),    INTENT(in   ) :: w     (ncols,3)
 6415.                  REAL(KIND=r8),    INTENT(in   ) :: capac (ncols,2)
 6416.                  REAL(KIND=r8),    INTENT(inout) :: td0   (ncols)
 6417.                  REAL(KIND=r8),    INTENT(inout) :: tg0   (ncols)
 6418.                  REAL(KIND=r8),    INTENT(inout) :: tc0   (ncols)
 6419.                  REAL(KIND=r8),    INTENT(inout) :: w0    (ncols,3)
 6420.                  REAL(KIND=r8),    INTENT(inout) :: capac0(ncols,2)
 6421.                  REAL(KIND=r8),    INTENT(inout) :: tdm   (ncols)
 6422.                  REAL(KIND=r8),    INTENT(inout) :: tgm   (ncols)
 6423.                  REAL(KIND=r8),    INTENT(inout) :: tcm   (ncols)
 6424.                  REAL(KIND=r8),    INTENT(inout) :: wm    (ncols,3)
 6425.                  REAL(KIND=r8),    INTENT(inout) :: capacm(ncols,2)
 6426.                  REAL(KIND=r8),    INTENT(inout) :: tm0 (ncols)
 6427.                  REAL(KIND=r8),    INTENT(inout) :: qm0 (ncols)
 6428.                  REAL(KIND=r8),    INTENT(inout) :: tmm (ncols)
 6429.                  REAL(KIND=r8),    INTENT(inout) :: qmm (ncols)
 6430.                  INTEGER :: i, nc, ii
 6431.              
 6432.                  IF (intg == 2) THEN
 6433.                     IF (istrt >= 1) THEN
 6434.  1---------<           DO i = 1, nmax
 6435.  1                        tm0   (i)  =tm   (i)
 6436.  1                        qm0   (i)  =qm   (i)
 6437.  1                        td0   (i)  =td   (i)
 6438.  1                        tg0   (i)  =tg   (i)
 6439.  1                        tc0   (i)  =tc   (i)
 6440.  1                        w0    (i,1)=w    (i,1)
 6441.  1                        w0    (i,2)=w    (i,2)
 6442.  1                        w0    (i,3)=w    (i,3)
 6443.  1                        capac0(i,1)=capac(i,1)
 6444.  1                        capac0(i,2)=capac(i,2)
 6445.  1                        IF (capac0(i,2) > 0.0_r8 .AND. tg0(i) > 273.16_r8) THEN
 6446.  1                           nc=0
 6447.  1                           ii=0
 6448.  1                           !DO ii = 1, ncols
 6449.  1                           !   IF (imask(ii) >= 1) nc=nc+1
 6450.  1                           !   IF (nc == i) EXIT
 6451.  1                           !END DO
 6452.  1                           WRITE(UNIT=nfprt,FMT=200)ii,latitu,i,capac0(i,2),tg0(i)
 6453.  1                        END IF
 6454.  1--------->           END DO
 6455.                     ELSE
 6456.  1---------<           DO i = 1, nmax
 6457.  1                        td0(i)=td0(i)+epsflt*(td(i)+tdm(i)-2.0_r8  *td0(i))
 6458.  1                        tg0(i)=tg0(i)+epsflt*(tg(i)+tgm(i)-2.0_r8  *tg0(i))
 6459.  1                        tc0(i)=tc0(i)+epsflt*(tc(i)+tcm(i)-2.0_r8  *tc0(i))
 6460.  1           
 6461.  1                        tm0(i)=tm0(i)+epsflt*(tm(i)+tmm(i)-2.0_r8  *tm0(i))
 6462.  1                        qm0(i)=qm0(i)+epsflt*(qm(i)+qmm(i)-2.0_r8  *qm0(i))
 6463.  1           
 6464.  1                        IF(w0    (i,1) > 0.0_r8 ) THEN
 6465.  1                           w0(i,1)=w0(i,1)+epsflt*(w(i,1)+wm(i,1)-2.0_r8  *w0(i,1))
 6466.  1                        END IF
 6467.  1                        IF(w0    (i,2) > 0.0_r8 ) THEN
 6468.  1                           w0(i,2)=w0(i,2)+epsflt*(w(i,2)+wm(i,2)-2.0_r8  *w0(i,2))
 6469.  1                        END IF
 6470.  1                        IF(w0    (i,3) > 0.0_r8 ) THEN
 6471.  1                           w0(i,3)=w0(i,3)+epsflt*(w(i,3)+wm(i,3)-2.0_r8  *w0(i,3))
 6472.  1                        END IF
 6473.  1                        IF(capac0(i,1) > 0.0_r8 ) THEN
 6474.  1                           capac0(i,1)=capac0(i,1) &
 6475.  1                                +epsflt*(capac(i,1)+capacm(i,1)-2.0_r8*capac0(i,1))
 6476.  1                        END IF
 6477.  1                        IF(capac0(i,2) > 0.0_r8 ) THEN
 6478.  1                           capac0(i,2)=capac0(i,2) &
 6479.  1                                +epsflt*(capac(i,2)+capacm(i,2)-2.0_r8*capac0(i,2))
 6480.  1                        END IF
 6481.  1--------->           END DO
 6482.  1---------<           DO i = 1, nmax
 6483.  1                        tdm   (i)  =td0   (i)
 6484.  1                        tgm   (i)  =tg0   (i)
 6485.  1                        tcm   (i)  =tc0   (i)
 6486.  1                        tmm   (i)  =tm0   (i)
 6487.  1                        qmm   (i)  =qm0   (i)
 6488.  1                        wm    (i,1)=w0    (i,1)
 6489.  1                        wm    (i,2)=w0    (i,2)
 6490.  1                        wm    (i,3)=w0    (i,3)
 6491.  1                        capacm(i,1)=capac0(i,1)
 6492.  1                        capacm(i,2)=capac0(i,2)
 6493.  1                        IF (capacm(i,2) > 0.0_r8) tgm(i)=MIN(tgm(i),273.06_r8)
 6494.  1--------->           END DO
 6495.  1---------<           DO i = 1, nmax
 6496.  1                        td0   (i)  =td    (i)
 6497.  1                        tg0   (i)  =tg    (i)
 6498.  1                        tc0   (i)  =tc    (i)
 6499.  1                        tm0   (i)  =tm    (i)
 6500.  1                        qm0   (i)  =qm    (i)
 6501.  1                        w0    (i,1)=w     (i,1)
 6502.  1                        w0    (i,2)=w     (i,2)
 6503.  1                        w0    (i,3)=w     (i,3)
 6504.  1                        capac0(i,1)=capac (i,1)
 6505.  1                        capac0(i,2)=capac (i,2)
 6506.  1                        IF (capac0(i,2) > 0.0_r8 .AND. tg0(i) > 273.16_r8) THEN
 6507.  1                           nc=0
 6508.  1                           ii=0
 6509.  1                           !DO ii = 1, ncols
 6510.  1                           !   IF (imask(ii) >= 1) nc=nc+1
 6511.  1                           !   IF (nc == i) EXIT
 6512.  1                           !END DO
 6513.  1                           WRITE(UNIT=nfprt,FMT=200)ii,latitu,i,capac0(i,2),tg0(i)
 6514.  1                        END IF
 6515.  1--------->           END DO
 6516.                     END IF
 6517.                  ELSE
 6518.  1---------<        DO i = 1, nmax
 6519.  1                     tdm   (i)  =td   (i)
 6520.  1                     tgm   (i)  =tg   (i)
 6521.  1                     tcm   (i)  =tc   (i)
 6522.  1                     tmm   (i)  =tm   (i)
 6523.  1                     qmm   (i)  =qm   (i)
 6524.  1                     wm    (i,1)=w    (i,1)
 6525.  1                     wm    (i,2)=w    (i,2)
 6526.  1                     wm    (i,3)=w    (i,3)
 6527.  1                     capacm(i,1)=capac(i,1)
 6528.  1                     capacm(i,2)=capac(i,2)
 6529.  1                     IF (capacm(i,2) > 0.0_r8 .AND. tgm(i) > 273.16_r8) THEN
 6530.  1                        nc=0
 6531.  1                        ii=0
 6532.  1                        !DO ii = 1, ncols
 6533.  1                        !   IF (imask(ii) >= 1) nc=nc+1
 6534.  1                        !   IF (nc == i) EXIT
 6535.  1                        !END DO
 6536.  1                        WRITE(UNIT=nfprt,FMT=650)ii,latitu,i,capacm(i,2),tgm(i)
 6537.  1                     END IF
 6538.  1--------->        END DO
 6539.  V---------<        DO i = 1, nmax
 6540.  V                     td0   (i)  =td   (i)
 6541.  V                     tg0   (i)  =tg   (i)
 6542.  V                     tc0   (i)  =tc   (i)
 6543.  V                     tm0   (i)  =tm   (i)
 6544.  V                     qm0   (i)  =qm   (i)
 6545.  V                     w0    (i,1)=w    (i,1)
 6546.  V                     w0    (i,2)=w    (i,2)
 6547.  V                     w0    (i,3)=w    (i,3)
 6548.  V                     capac0(i,1)=capac(i,1)
 6549.  V                     capac0(i,2)=capac(i,2)
 6550.  V--------->        END DO
 6551.                  END IF
 6552.              200 FORMAT(' CAPAC0 AND TG0 NOT CONSISTENT AT I,J,IS=',3I4, &
 6553.                       ' CAPAC=',G16.8,' TG=',G16.8)
 6554.              650 FORMAT(' CAPACM AND TGM NOT CONSISTENT AT I,J,IS=',3I4, &
 6555.                       ' CAPAC=',G16.8,' TG=',G16.8)
 6556.                END SUBROUTINE sextrp
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 6556 
  Local variable "NC" is assigned a value but never used.

 6557.              
 6558.                SUBROUTINE Albedo( &
 6559.                          ncols     ,month2      ,nmax      ,itype      , &
 6560.                          tc        ,tg          ,tm        ,qm         , &
 6561.                          td        ,capac       ,w         ,tcm        , &
 6562.                          tgm       ,tmm         ,qmm       ,tdm        , &
 6563.                          capacm    ,wm          ,satcap    ,extk       , &
 6564.                          radfac    ,closs       ,gloss     ,thermk     , &
 6565.                          p1f       ,p2f         ,zlwup     ,salb       , &
 6566.                          tgeff     ,cosz        ,nsx       ,latco      , &
 6567.                          imask     ,avisb       ,avisd     ,anirb      , &
 6568.                          anird     ,tsea        ,zenith)
 6569.                 IMPLICIT NONE
 6570.                 INTEGER, INTENT(IN   ) :: ncols
 6571.                 INTEGER, INTENT(INOUT) :: month2     (ncols)
 6572.                 INTEGER, INTENT(IN   ) :: nmax
 6573.                 INTEGER, INTENT(IN   ) :: itype      (ncols)
 6574.                 REAL(KIND=r8),INTENT(OUT  ) :: tc	(ncols)
 6575.                 REAL(KIND=r8),INTENT(OUT  ) :: tg	(ncols)
 6576.                 REAL(KIND=r8),INTENT(OUT  ) :: tm    (ncols)
 6577.                 REAL(KIND=r8),INTENT(OUT  ) :: qm    (ncols)
 6578.                 REAL(KIND=r8),INTENT(OUT  ) :: td    (ncols)
 6579.                 REAL(KIND=r8),INTENT(OUT  ) :: capac (ncols,2)
 6580.                 REAL(KIND=r8),INTENT(OUT  ) :: w     (ncols,3)
 6581.                 REAL(KIND=r8),INTENT(IN   ) :: tcm   (ncols)
 6582.                 REAL(KIND=r8),INTENT(IN   ) :: tgm   (ncols)
 6583.                 REAL(KIND=r8),INTENT(IN   ) :: tmm   (ncols)
 6584.                 REAL(KIND=r8),INTENT(IN   ) :: qmm   (ncols)
 6585.                 REAL(KIND=r8),INTENT(IN   ) :: tdm   (ncols)
 6586.                 REAL(KIND=r8),INTENT(IN   ) :: capacm(ncols,2)
 6587.                 REAL(KIND=r8),INTENT(IN   ) :: wm    (ncols,3)
 6588.                 REAL(KIND=r8),INTENT(INOUT) :: satcap(ncols,icg)
 6589.                 REAL(KIND=r8),INTENT(INOUT) :: extk  (ncols,icg,iwv,ibd)
 6590.                 REAL(KIND=r8),INTENT(INOUT) :: radfac(ncols,icg,iwv,ibd)
 6591.                 REAL(KIND=r8),INTENT(INOUT) :: closs (ncols)
 6592.                 REAL(KIND=r8),INTENT(INOUT) :: gloss (ncols)
 6593.                 REAL(KIND=r8),INTENT(INOUT) :: thermk(ncols)
 6594.                 REAL(KIND=r8),INTENT(INOUT) :: p1f   (ncols)
 6595.                 REAL(KIND=r8),INTENT(INOUT) :: p2f   (ncols)
 6596.                 REAL(KIND=r8),INTENT(INOUT) :: zlwup (ncols)
 6597.                 REAL(KIND=r8),INTENT(INOUT) :: salb  (ncols,2,2)
 6598.                 REAL(KIND=r8),INTENT(INOUT) :: tgeff (ncols)
 6599.                 REAL(KIND=r8),INTENT(IN   ) :: cosz  (ncols)
 6600.                 INTEGER      ,INTENT(IN   ) :: nsx   (ncols)
 6601.                 INTEGER      ,INTENT(IN   ) :: latco
 6602.                 INTEGER(KIND=i8),INTENT(IN) :: imask (ncols)
 6603.                 REAL(KIND=r8),INTENT(OUT  ) :: avisb (ncols)
 6604.                 REAL(KIND=r8),INTENT(OUT  ) :: avisd (ncols)
 6605.                 REAL(KIND=r8),INTENT(OUT  ) :: anirb (ncols)
 6606.                 REAL(KIND=r8),INTENT(OUT  ) :: anird (ncols)
 6607.                 REAL(KIND=r8),INTENT(IN   ) :: tsea  (ncols)
 6608.                 REAL(KIND=r8),INTENT(IN   ) :: zenith(ncols)
 6609.                 INTEGER       :: i
 6610.                 REAL(KIND=r8) :: ocealb
 6611.                 REAL(KIND=r8) :: f
 6612.                 INTEGER       :: ncount
 6613.                 IF(nmax.GE.1) THEN
 6614.              
 6615.  V---------<        DO i=1,nmax
 6616.  V                     tm      (i)    = tmm   (i)
 6617.  V                     qm      (i)    = qmm   (i)
 6618.  V                     td      (i)    = tdm   (i)
 6619.  V                     tg      (i)    = tgm   (i)
 6620.  V                     tc      (i)    = tcm   (i)
 6621.  V                     capac   (i,1)  = capacm(i,1)
 6622.  V                     capac   (i,2)  = capacm(i,2)
 6623.  V                     w       (i,1)  = wm    (i,1)
 6624.  V                     w       (i,2)  = wm    (i,2)
 6625.  V                     w       (i,3)  = wm    (i,3)
 6626.  V--------->        END DO
 6627.              
 6628.                     CALL radalb ( &
 6629.                          nmax              ,month2(1:nmax)      ,nmax                ,itype(1:nmax)       , &
 6630.                          tc(1:nmax)        ,tg(1:nmax)          ,capac(1:nmax,:)     ,satcap(1:nmax,:)    , &
 6631.                          extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)       ,gloss(1:nmax)       , &
 6632.                          thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)         ,zlwup(1:nmax)       , &
 6633.                          salb(1:nmax,:,:)  ,tgeff(1:nmax)       ,cosz(1:nmax)        ,nsx(1:nmax)         , &
 6634.                          latco     )
 6635.                 END IF
 6636.                 ncount=0
 6637.  1---------<    DO i=1,ncols
 6638.  1                 IF(imask(i).GE.1_i8) THEN
 6639.  1                    ncount=ncount+1
 6640.  1                    avisb(i)=salb(ncount,1,1)
 6641.  1                    avisd(i)=salb(ncount,1,2)
 6642.  1                    anirb(i)=salb(ncount,2,1)
 6643.  1                    anird(i)=salb(ncount,2,2)
 6644.  1                 ELSE IF(ABS(tsea(i)).GE.271.16e0_r8 +0.01e0_r8) THEN
 6645.  1                    f=MAX(zenith(i),0.0e0_r8 )
 6646.  1                    ocealb=0.12347e0_r8 +f*(0.34667e0_r8+f*(-1.7485e0_r8 + &
 6647.  1                         f*(2.04630e0_r8 -0.74839e0_r8 *f)))
 6648.  1                    avisb(i)=ocealb
 6649.  1                    avisd(i)=oceald
 6650.  1                    anirb(i)=ocealb
 6651.  1                    anird(i)=oceald
 6652.  1                 ELSE
 6653.  1                    avisb(i)=icealv
 6654.  1                    avisd(i)=icealv
 6655.  1                    anirb(i)=icealn
 6656.  1                    anird(i)=icealn
 6657.  1                 END IF
 6658.  1--------->    END DO
 6659.              
 6660.                END SUBROUTINE Albedo
 6661.                
 6662.                ! radalb :surface albedos via two stream approximation (direct and diffuse).
 6663.              
 6664.              
 6665.              
 6666.                SUBROUTINE radalb ( &
 6667.                          ncols             ,mon                 ,nmax                ,itype               , &
 6668.                          tc                ,tg                  ,capac               ,satcap              , &
 6669.                          extk              ,radfac              ,closs               ,gloss               , &
 6670.                          thermk            ,p1f                 ,p2f                 ,zlwup               , &
 6671.                          salb              ,tgeff               ,cosz                ,nsx                 , &
 6672.                          latitu )
 6673.                  !
 6674.                  !
 6675.                  ! reference  : a simple biosphere model (xue et al 1991)
 6676.                  !-----------------------------------------------------------------------
 6677.                  !     *** indices ***
 6678.                  !   cg =1...canopy
 6679.                  !   cg =2...ground cover
 6680.                  !   vn =1...visible      (0.0-0.7 micron)
 6681.                  !   vn =2...near-infrared(0.7-3.0 micron)
 6682.                  !   bd =1...beam
 6683.                  !   bd =2...diffuse
 6684.                  !   ld =1...live leaves
 6685.                  !   ld =2...dead leaves
 6686.                  !   vnt=1...visible      (0.0-0.7 micron)
 6687.                  !   vnt=2...near-infrared(0.7-3.0 micron)
 6688.                  !   vnt=3...thermal
 6689.                  !-----------------------------------------------------------------------
 6690.                  !        input parameters
 6691.                  !-----------------------------------------------------------------------
 6692.                  !   zlt(cg)..........leaf area index
 6693.                  !   z1...............bottom height of canopy
 6694.                  !   z2...............top    height of canopy
 6695.                  !   ref (cg,vnt,ld)..reflectance   of vegetation
 6696.                  !   tran(cg,vnt,ld)..transmittance of vegetation
 6697.                  !   green (cg).......fraction of green leaf area
 6698.                  !   chil  (cg).......leaf orientation factor
 6699.                  !   vcover(cg).......fraction of vegetation cover
 6700.                  !   soref (vnt)......ground albedo
 6701.                  !   chil  (cg).......leaf orientation factor
 6702.                  !   cosz.............cosine of solar zenith angle
 6703.                  !   tf...............water freezing temperature
 6704.                  !   tg...............ground temperature
 6705.                  !   tc...............canopy leaf temperature
 6706.                  !   capac(cg)........water store capacity of leaves
 6707.                  !   stefan...........stefan-boltsman constant
 6708.                  !-----------------------------------------------------------------------
 6709.                  !     in-subr. parameters
 6710.                  !-----------------------------------------------------------------------
 6711.                  !   albedo(cg,vnt,bd)
 6712.                  !-----------------------------------------------------------------------
 6713.                  !       output parameters
 6714.                  !-----------------------------------------------------------------------
 6715.                  !   extk(cg,vnt,bd)..extinction coefficient
 6716.                  !                    passed to subr.raduse through radsave
 6717.                  !   radfac(cg,vn,bd).fractions of downward solar radiation at surface
 6718.                  !                    passed to subr.raduse
 6719.                  !   salb(vn,bd)......surface albedo
 6720.                  !                    passed to subr.spmrad
 6721.                  !   tgeff............effective ground temperature
 6722.                  !                    passed to subr.spmrad
 6723.                  !   thermk...........canopy emissivity
 6724.                  !   radsav(1)........beam    extinction coefficient (par)
 6725.                  !   radsav(2)........diffuse extinction coefficient (par)
 6726.                  !   closs............radiation loss from canopy
 6727.                  !   gloss............radiation loss from ground
 6728.                  !-----------------------------------------------------------------------
 6729.                  !
 6730.                  !   ityp.......Numero das classes de solo 13
 6731.                  !   imon.......Numero maximo de meses no ano (12)
 6732.                  !   icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 6733.                  !   iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 6734.                  !              proximo, iwv=3 infravermelho termal
 6735.                  !   ibd........Estado da vegetacao ibd=1 verde / ibd=2 seco
 6736.                  !   ncols......Number of grid points on a gaussian latitude circle
 6737.                  !   mon........Number of month at year (1-12)
 6738.                  !   nmax
 6739.                  !   itype......Classe de textura do solo
 6740.                  !   satcap.....saturation liquid water capacity         (m)
 6741.                  !   p1f........
 6742.                  !   p2f........
 6743.                  !   zlwup......zlwup(i)= stefan*( fac1(i)*tc4(i)+ &
 6744.                  !              (1.0  -vcover(i,1)*(1.0  -thermk(i)))*fac2(i)*tg4(i))
 6745.                  !   nsx........
 6746.                  !
 6747.              
 6748.                  INTEGER, INTENT(IN   ) :: ncols
 6749.                  INTEGER, INTENT(INOUT) :: mon(ncols)
 6750.                  INTEGER, INTENT(IN   ) :: nmax
 6751.                  INTEGER, INTENT(IN   ) :: itype (ncols)
 6752.                  REAL(KIND=r8),    INTENT(IN   ) :: tc    (ncols)
 6753.                  REAL(KIND=r8),    INTENT(IN   ) :: tg    (ncols)
 6754.                  REAL(KIND=r8),    INTENT(IN   ) :: capac (ncols,2)
 6755.                  REAL(KIND=r8),    INTENT(INOUT  ) :: satcap(ncols,icg)
 6756.                  REAL(KIND=r8),    INTENT(INOUT  ) :: extk  (ncols,icg,iwv,ibd)
 6757.                  REAL(KIND=r8),    INTENT(INOUT  ) :: radfac(ncols,icg,iwv,ibd)
 6758.                  REAL(KIND=r8),    INTENT(INOUT  ) :: closs (ncols)
 6759.                  REAL(KIND=r8),    INTENT(INOUT  ) :: gloss (ncols)
 6760.                  REAL(KIND=r8),    INTENT(INOUT  ) :: thermk(ncols)
 6761.                  REAL(KIND=r8),    INTENT(INOUT  ) :: p1f   (ncols)
 6762.                  REAL(KIND=r8),    INTENT(INOUT  ) :: p2f   (ncols)
 6763.                  REAL(KIND=r8),    INTENT(INOUT  ) :: zlwup (ncols)
 6764.                  REAL(KIND=r8),    INTENT(INOUT  ) :: salb  (ncols,2,2)
 6765.                  REAL(KIND=r8),    INTENT(INOUT  ) :: tgeff (ncols)
 6766.                  REAL(KIND=r8),    INTENT(IN   ) :: cosz  (ncols)
 6767.                  INTEGER, INTENT(IN   ) :: nsx  (ncols)
 6768.                  INTEGER, INTENT(IN   ) :: latitu
 6769.              
 6770.                  REAL(KIND=r8)   :: zlt2    (ncols,icg)
 6771.                  REAL(KIND=r8)   :: vcover  (ncols,icg)
 6772.              
 6773.              
 6774.                  REAL(KIND=r8) :: f     (ncols)
 6775.                  REAL(KIND=r8) :: deltg (ncols)
 6776.                  REAL(KIND=r8) :: fmelt (ncols)
 6777.                  REAL(KIND=r8) :: depcov(ncols)
 6778.                  REAL(KIND=r8) :: scov  (ncols)
 6779.                  REAL(KIND=r8) :: scov2 (ncols)
 6780.                  REAL(KIND=r8) :: tc4   (ncols)
 6781.                  REAL(KIND=r8) :: tg4   (ncols)
 6782.                  REAL(KIND=r8) :: fac1  (ncols)
 6783.                  REAL(KIND=r8) :: fac2  (ncols)
 6784.                  REAL(KIND=r8) :: zkat  (ncols)
 6785.              
 6786.                  INTEGER, PARAMETER :: nk=3
 6787.                  REAL(KIND=r8)    :: temp(nmax,18)
 6788.                  REAL(KIND=r8)    :: xmi1(12,nk)
 6789.                  INTEGER :: i
 6790.                  INTEGER :: ntyp(ncols)
 6791.                  INTEGER :: monx(ncols)
 6792.                  INTEGER :: jj
 6793.                  INTEGER :: i1
 6794.                  INTEGER :: ml(nmax)
 6795.                  INTEGER :: k1
 6796.                  INTEGER :: k2
 6797.                  INTEGER :: ik
 6798.                  REAL(KIND=r8)    :: capaci
 6799.                  !    REAL(KIND=r8)    :: xf
 6800.                  !    REAL(KIND=r8)    :: xf2
 6801.                  !    REAL(KIND=r8)    :: sc1
 6802.                  !    REAL(KIND=r8)    :: sc2
 6803.                  REAL(KIND=r8)    :: xm1
 6804.                  !    REAL(KIND=r8)    :: xm2
 6805.                  REAL(KIND=r8)    :: xtm1
 6806.                  REAL(KIND=r8)    :: xtm2
 6807.                  REAL(KIND=r8)    :: stbi
 6808.                  LOGICAL :: flagtyp(nmax)
 6809.                  LOGICAL :: flagscov(nmax)
 6810.              
 6811.  V---------<     DO i = 1, nmax
 6812.  V           
 6813.  V                  zlt2       (i,1)   =  zlt_gbl    (i,latitu,1) !zlt   (itype(i),mon(i),1)
 6814.  V                  zlt2       (i,2)   =  zlt_gbl    (i,latitu,2) !zlt   (itype(i),mon(i),2)
 6815.  V                  vcover     (i,1)   =  vcover_gbl (i,latitu,1) !xcover(itype(i),mon(i),1)
 6816.  V                  vcover     (i,2)   =  vcover_gbl (i,latitu,2) !xcover(itype(i),mon(i),2)
 6817.  V                  f(i)= MAX ( cosz(i), 0.01746_r8  )
 6818.  V--------->     END DO
 6819.                  !
 6820.                  !     maximum water storage values.
 6821.                  !
 6822.  f---------<     DO i = 1, nmax
 6823.  f                  deltg(i)=tf-tg(i)
 6824.  f                  fmelt(i)=1.0_r8
 6825.  f                  IF (ABS(deltg(i)) < 0.5_r8 .AND. deltg(i) > 0.0_r8) THEN
 6826.  f                     fmelt(i)=0.6_r8
 6827.  f                  END IF
 6828.  f--------->     END DO
 6829.  Vf-------<>     ntyp=itype
 6830.  Vp--------<     DO i = 1, nmax
 6831.  Vp                 !ntyp=itype(i)
 6832.  Vp                 satcap(i,1)=zlt2(i,1)*1.0e-4_r8
 6833.  Vp                 satcap(i,2)=zlt2(i,2)*1.0e-4_r8
 6834.  Vp                 depcov(i  )=MAX(0.0_r8  ,capac(i,2)*5.0_r8  -z1(ntyp(i),mon(i)))
 6835.  Vp                 depcov(i  )=MIN(depcov(i),(z2(ntyp(i),mon(i))-z1(ntyp(i),mon(i)))*0.95_r8  )
 6836.  Vp                 satcap(i,1)=satcap(i,1) &
 6837.  Vp                      *(1.0_r8  -depcov(i)/(z2(ntyp(i),mon(i))-z1(ntyp(i),mon(i))))
 6838.  Vp-------->     END DO
 6839.              
 6840.  1---------<     DO i = 1, nmax
 6841.  1                  scov(i)=0.0_r8
 6842.  1                  IF (tc(i) <= tf) THEN
 6843.  1                     scov(i)= MIN( 0.5_r8  , capac(i,1)/satcap(i,1))
 6844.  1                  END IF
 6845.  1--------->     END DO
 6846.                  capaci=1.0_r8  /0.004_r8
 6847.  f---------<     DO i = 1, nmax
 6848.  f                  IF (tg(i) > tf) THEN
 6849.  f                     scov2(i)=0.0_r8
 6850.  f                  ELSE
 6851.  f                     scov2(i)=MIN( 1.0_r8  , capac(i,2)*capaci)
 6852.  f                  END IF
 6853.  f--------->     END DO
 6854.                  !
 6855.                  !     terms which multiply incoming short wave fluxes
 6856.                  !     to give absorption of radiation by canopy and ground
 6857.                  !
 6858.  f--------<>     monx = mon
 6859.  1---------<     DO i = 1, nmax
 6860.  1                  IF (fmelt(i) == 1.0_r8) THEN
 6861.  1                     ml(i) = 1
 6862.  1                  ELSE
 6863.  1                     ml(i) = 2
 6864.  1                  END IF
 6865.  1--------->     END DO
 6866.  V--------<>     ntyp=itype
 6867.              
 6868.  1---------<     DO i = 1, nmax
 6869.  1                  mon(i) = monx(i)
 6870.  1                  flagtyp(i) = .TRUE.
 6871.  1                  IF (ntyp(i) == 13) ntyp(i) = 11
 6872.  1                  IF (ntyp(i) == 12 .AND. nsx(i) > 0) THEN
 6873.  1                     ntyp(i) = 13
 6874.  1                     mon(i) = nsx(i)
 6875.  1                     IF (nsx(i) == 1 .AND. (monx(i) >= 9 .AND. monx(i) <= 11)) mon(i) = 7
 6876.  1                     flagtyp(i) = .FALSE.
 6877.  1                  END IF
 6878.  1--------->     END DO
 6879.  b---------<     DO jj = 1, nk
 6880.  b b-------<        DO i=1, nmax
 6881.  b b                   xmi1(mon(i),jj) = xmiu(mon(i),jj)
 6882.  b b------->        END DO
 6883.  b--------->     END DO
 6884.  b---------<     DO jj = 1, nk
 6885.  b b-------<        DO i=1, nmax
 6886.  b b                   IF (.NOT.flagtyp(i))xmi1(mon(i),jj) = xmiw(mon(i),jj)
 6887.  b b------->        END DO
 6888.  b--------->     END DO
 6889.                  !
 6890.                  !        snow free case
 6891.                  !
 6892.  1---------<     DO i = 1, nmax
 6893.  1                  flagscov(i) = scov(i) < 0.025_r8 .AND. scov2(i) < 0.025_r8
 6894.  1--------->     END DO
 6895.              
 6896.  1---------<     DO i1 = 1, 9
 6897.  1 2-------<        DO i = 1, nmax
 6898.  1 2                   IF (flagscov(i)) THEN
 6899.  1 2                      temp(i,i1) = cledir(ntyp(i),mon(i),i1,1) + cledir(ntyp(i),mon(i),i1,2) &
 6900.  1 2                           * f(i) + cledir(ntyp(i),mon(i),i1,3) * (f(i)*f(i))
 6901.  1 2                      temp(i,i1+9) = cledfu(ntyp(i),mon(i),i1)
 6902.  1 2                   END IF
 6903.  1 2------->        END DO
 6904.  1--------->     END DO
 6905.                  flagscov = .NOT. flagscov
 6906.  1---------<     DO i1 = 1, 9
 6907.  1 2-------<        DO i = 1, nmax
 6908.  1 2                   IF (flagscov(i)) THEN
 6909.  1 2                      !
 6910.  1 2                      !     with snow cover
 6911.  1 2                      !
 6912.  1 2                      temp(i,i1) = cedir(ntyp(i),mon(i),i1,1) + f(i) * &
 6913.  1 2                           cedir(ntyp(i),mon(i),i1,2) + cedir(ntyp(i),mon(i),i1,3) * (f(i)*f(i))
 6914.  1 2                      temp(i,i1+9) = cedfu(ntyp(i),mon(i),i1)
 6915.  1 2                   END IF
 6916.  1 2------->        END DO
 6917.  1--------->     END DO
 6918.  1---------<     DO i1 = 1, 6
 6919.  1 2-------<        DO i = 1, nmax
 6920.  1 2                   IF (flagscov(i) .AND. ntyp(i) == 11) THEN
 6921.  1 2                      !sc2 = scov2(i) * scov2(i)
 6922.  1 2                      !sc1 = scov2(i)
 6923.  1 2                      temp(i,i1)=cedir2(ml(i),ntyp(i),mon(i),i1,nk,1)+ &
 6924.  1 2                           cedir2(ml(i),ntyp(i),mon(i),i1,nk,2) &
 6925.  1 2                           *scov2(i) + cedir2(ml(i),ntyp(i),mon(i),i1,nk,3) *(scov2(i) * scov2(i)) + temp(i,i1)
 6926.  1 2                      temp(i,i1+9) = cedfu2(ml(i),ntyp(i),mon(i),i1,1) +  &
 6927.  1 2                           cedfu2(ml(i),ntyp(i),mon(i),i1,2) &
 6928.  1 2                           * scov2(i) + cedfu2(ml(i),ntyp(i),mon(i),i1,3) * (scov2(i) * scov2(i)) + temp(i,i1+9)
 6929.  1 2                   END IF
 6930.  1 2------->        END DO
 6931.  1--------->     END DO
 6932.  1---------<     DO i = 1, nmax
 6933.  1                  IF (flagscov(i) .AND. ntyp(i) /= 11) THEN
 6934.  1                     k2 = 1
 6935.  1                     k1 = 2
 6936.  1 2-------<           DO ik = nk, 1, -1
 6937.  1 2                      IF (f(i) >= xmi1(mon(i),ik)) THEN
 6938.  1 2                         CONTINUE
 6939.  1 2                      ELSE
 6940.  1 2                         k1 = ik + 1
 6941.  1 2                         k2 = ik
 6942.  1 2                         EXIT
 6943.  1 2                      END IF
 6944.  1 2------->           END DO
 6945.  1                     !xm2 = xmi1(mon(i),k2)
 6946.  1                     IF (k1 <= nk) xm1 = xmi1(mon(i),k1)
 6947.  1                     !
 6948.  1                     !     snow cover at 1st layer
 6949.  1                     !
 6950.  1                     IF (scov(i) > 0.025_r8) THEN
 6951.  1                        !sc2 = scov(i) * scov(i)
 6952.  1                        !sc1 = scov(i)
 6953.  1                        IF (k2 >= nk .OR. k2 <= 1) THEN
 6954.  1 Vp------<                 DO i1 = 1, 6
 6955.  1 Vp                           temp(i,i1)=cedir1(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6956.  1 Vp                                cedir1(ml(i),ntyp(i),mon(i),i1,k2,2)*scov(i) + &
 6957.  1 Vp                                cedir1(ml(i),ntyp(i),mon(i),i1,k2,3)*(scov(i) * scov(i)) + temp(i,i1)
 6958.  1 Vp------>                 END DO
 6959.  1                        ELSE
 6960.  1 Vp------<                 DO i1 = 1, 6
 6961.  1 Vp                           xtm1=cedir1(ml(i),ntyp(i),mon(i),i1,k1,1)+ &
 6962.  1 Vp                                cedir1(ml(i),ntyp(i),mon(i),i1,k1,2)*scov(i) + &
 6963.  1 Vp                                cedir1(ml(i),ntyp(i),mon(i),i1,k1,3)*(scov(i) * scov(i))
 6964.  1 Vp                           xtm2=cedir1(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6965.  1 Vp                                cedir1(ml(i),ntyp(i),mon(i),i1,k2,2)*scov(i)+ &
 6966.  1 Vp                                cedir1(ml(i),ntyp(i),mon(i),i1,k2,3) *(scov(i) * scov(i))
 6967.  1 Vp                           temp(i,i1) = (xtm1*((xmi1(mon(i),k2))-f(i))+xtm2*(f(i)-xm1))/((xmi1(mon(i),k2))-xm1) &
 6968.  1 Vp                                + temp(i,i1)
 6969.  1 Vp------>                 END DO
 6970.  1                        END IF
 6971.  1 Vp------<              DO i1 = 1, 6
 6972.  1 Vp                        temp(i,i1+9) = cedfu1(ml(i),ntyp(i),mon(i),i1,1) +  &
 6973.  1 Vp                             cedfu1(ml(i),ntyp(i),mon(i),i1,2)*scov(i) + &
 6974.  1 Vp                             cedfu1(ml(i),ntyp(i),mon(i),i1,3) * (scov(i) * scov(i)) + temp(i,i1+9)
 6975.  1 Vp------>              END DO
 6976.  1                     END IF
 6977.  1                     !
 6978.  1                     !     snow cover on ground
 6979.  1                     !
 6980.  1                     IF (scov2(i) > 0.025_r8) THEN
 6981.  1                        !sc2 = scov2(i) * scov2(i)
 6982.  1                        !sc1 = scov2(i)
 6983.  1                        IF (k2 >= nk .OR. k2 <= 1) THEN
 6984.  1 Vp------<                 DO i1 = 1, 6
 6985.  1 Vp                           temp(i,i1)=cedir2(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6986.  1 Vp                                cedir2(ml(i),ntyp(i),mon(i),i1,k2,2)*scov2(i) +  &
 6987.  1 Vp                                cedir2(ml(i),ntyp(i),mon(i),i1,k2,3)*(scov2(i) * scov2(i)) + temp(i,i1)
 6988.  1 Vp------>                 END DO
 6989.  1                        ELSE
 6990.  1 Vp------<                 DO i1 = 1, 6
 6991.  1 Vp                           xtm1=cedir2(ml(i),ntyp(i),mon(i),i1,k1,1)+ &
 6992.  1 Vp                                cedir2(ml(i),ntyp(i),mon(i),i1,k1,2)*scov2(i) + &
 6993.  1 Vp                                cedir2(ml(i),ntyp(i),mon(i),i1,k1,3) *(scov2(i) * scov2(i))
 6994.  1 Vp                           xtm2=cedir2(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6995.  1 Vp                                cedir2(ml(i),ntyp(i),mon(i),i1,k2,2)*scov2(i)+ &
 6996.  1 Vp                                cedir2(ml(i),ntyp(i),mon(i),i1,k2,3) *(scov2(i) * scov2(i))
 6997.  1 Vp                           temp(i,i1) = (xtm1*((xmi1(mon(i),k2))-f(i))+xtm2*(f(i)-xm1))/((xmi1(mon(i),k2))-xm1) &
 6998.  1 Vp                                + temp(i,i1)
 6999.  1 Vp------>                 END DO
 7000.  1                        END IF
 7001.  1 Vp------<              DO i1 = 1, 6
 7002.  1 Vp                        temp(i,i1+9) = cedfu2(ml(i),ntyp(i),mon(i),i1,1) +  &
 7003.  1 Vp                             cedfu2(ml(i),ntyp(i),mon(i),i1,2)* scov2(i) +  &
 7004.  1 Vp                             cedfu2(ml(i),ntyp(i),mon(i),i1,3) * (scov2(i) * scov2(i)) + temp(i,i1+9)
 7005.  1 Vp------>              END DO
 7006.  1                     END IF
 7007.  1                  END IF
 7008.  1--------->     END DO
 7009.                  !500    CONTINUE
 7010.  Vp--------<     DO i = 1, nmax
 7011.  Vp                 radfac(i,1,1,2) = temp(i,10)
 7012.  Vp                 radfac(i,1,2,2) = temp(i,11)
 7013.  Vp                 radfac(i,2,1,2) = temp(i,12)
 7014.  Vp                 radfac(i,2,2,2) = temp(i,13)
 7015.  Vp                 salb(i,1,2) = temp(i,14)
 7016.  Vp                 salb(i,2,2) = temp(i,15)
 7017.  Vp                 p2f(i) =  temp(i,16)
 7018.  Vp                 extk(i,1,1,2) = temp(i,17)
 7019.  Vp                 extk(i,2,1,2) = temp(i,18)
 7020.  Vp                 radfac(i,1,1,1) = temp(i,1)
 7021.  Vp                 radfac(i,1,2,1) = temp(i,2)
 7022.  Vp                 radfac(i,2,1,1) = temp(i,3)
 7023.  Vp                 radfac(i,2,2,1) = temp(i,4)
 7024.  Vp                 salb(i,1,1) = temp(i,5)
 7025.  Vp                 salb(i,2,1) = temp(i,6)
 7026.  Vp                 p1f(i) =  temp(i,7)
 7027.  Vp                 extk(i,1,1,1) = temp(i,8) / f(i)
 7028.  Vp                 extk(i,2,1,1) = temp(i,9) / f(i)
 7029.  Vp                 extk(i,1,3,1) = cether(ntyp(i),mon(i),1)
 7030.  Vp                 extk(i,1,3,2) = cether(ntyp(i),mon(i),2)
 7031.  Vp                 extk(i,2,3,1) = cether(ntyp(i),mon(i),1)
 7032.  Vp                 extk(i,2,3,2) = cether(ntyp(i),mon(i),2)
 7033.  Vp-------->     END DO
 7034.  V--------<>     mon = monx
 7035.                  !
 7036.                  !     long-wave flux terms from canopy and ground
 7037.                  !
 7038.                  stbi=1.0_r8  /stefan
 7039.  V---------<     DO  i = 1, nmax
 7040.  V                  tc4(i)=tc(i)*tc(i)*tc(i)*tc(i)
 7041.  V                  tg4(i)=tg(i)*tg(i)*tg(i)*tg(i)
 7042.  V                  !ntyp=itype(i)
 7043.  V                  zkat(i)=extk(i,1,3,2)*zlt2(i,1)/vcover(i,1)
 7044.  V                  zkat(i)=MAX(expcut  ,-zkat(i) )
 7045.  V                  zkat(i)=MIN(-10.0e-5_r8, zkat(i) )
 7046.  V                  thermk(i)=EXP(zkat(i))
 7047.  V                  fac1 (i)=vcover(i,1)*( 1.0_r8  -thermk(i) )
 7048.  V                  fac2 (i)=1.0_r8
 7049.  V                  closs(i)=2.0_r8  *fac1(i)*stefan*tc4(i)
 7050.  V                  closs(i)=closs(i)-fac2(i)*fac1(i)*stefan*tg4(i)
 7051.  V                  gloss(i)= fac2(i)*stefan*tg4(i)
 7052.  V                  gloss(i)= gloss(i)-fac1(i)*fac2(i)*stefan*tc4(i)
 7053.  V                  !
 7054.  V                  !     effective surface radiative temperature ( tgeff )
 7055.  V                  !
 7056.  V                  zlwup(i) = stefan*( fac1(i)*tc4(i) + &
 7057.  V                       (1.0_r8  - vcover(i,1) * (1.0_r8  -thermk(i)))*fac2(i)*tg4(i))
 7058.  V                  tgeff(i)=SQRT ( SQRT (( zlwup(i)*stbi )))
 7059.  V--------->     END DO
 7060.                END SUBROUTINE radalb
 7061.              
 7062.              
 7063.              
 7064.                ! vegin  :reads vegetation morphoLOGICAL and physioLOGICAL data.
 7065.              
 7066.              
 7067.              
 7068.              
 7069.                SUBROUTINE vegin ( si1   , sl1)
 7070.              
 7071.                  REAL(KIND=r8),  INTENT(in   ) :: si1
 7072.                  REAL(KIND=r8),  INTENT(in   ) :: sl1
 7073.                  INTEGER, PARAMETER ::  njj=6,nj=9, nk=3,ild=2
 7074.              
 7075.                 ! Vegetation and Soil Parameters
 7076.              
 7077.                 REAL (KIND=r4) rstpar_r4(ityp,icg,iwv), &
 7078.                                chil_r4(ityp,icg), &
 7079.                                topt_r4(ityp,icg), &
 7080.                                tll_r4(ityp,icg), &
 7081.                                tu_r4(ityp,icg), &
 7082.                                defac_r4(ityp,icg), &
 7083.                                ph1_r4(ityp,icg), &
 7084.                                ph2_r4(ityp,icg), &
 7085.                                rootd_r4(ityp,icg), &
 7086.                                bee_r4(ityp), &
 7087.                                phsat_r4(ityp), &
 7088.                                satco_r4(ityp), &
 7089.                                poros_r4(ityp), &
 7090.                                zdepth_r4(ityp,idp), &
 7091.                                green_r4(ityp,imon,icg), &
 7092.                                xcover_r4(ityp,imon,icg), &
 7093.                                zlt_r4(ityp,imon,icg), &
 7094.                                x0x_r4(ityp,imon),&
 7095.                                xd_r4(ityp,imon), &
 7096.                                z2_r4   (ityp,imon), &
 7097.                                z1_r4   (ityp,imon), &
 7098.                                xdc_r4  (ityp,imon), &
 7099.                                xbc_r4  (ityp,imon)
 7100.              		  
 7101.                  REAL(KIND=r4) :: cedfu_r4 (ityp,imon,nj), &
 7102.                                   cedir_r4 (ityp,imon,nj,3), &
 7103.                                   cedfu1_r4(2,ityp,imon,njj,3), &
 7104.                                   cedir1_r4(2,ityp,imon,njj,nk,3), &
 7105.                                   cedfu2_r4(2,ityp,imon,njj,3), &
 7106.                                   cedir2_r4(2,ityp,imon,njj,nk,3), &
 7107.                                   cledfu_r4(ityp,imon,nj), &
 7108.                                   cledir_r4(ityp,imon,nj,3), &
 7109.                                   cether_r4(ityp,imon,2), &
 7110.                                   xmiu_r4  (imon,nk), &
 7111.                                   xmiw_r4  (imon,nk)
 7112.              
 7113.                  INTEGER :: jcg
 7114.                  INTEGER :: jmon
 7115.                  INTEGER :: jtyp
 7116.                  INTEGER :: iv
 7117.                  INTEGER :: im
 7118.                  INTEGER :: i
 7119.                  REAL(KIND=r8)    :: f0001
 7120.                  REAL(KIND=r8)    :: yhil (2)
 7121.                  REAL(KIND=r8)    :: dz
 7122.                  REAL(KIND=r8)    :: dzcut
 7123.                  REAL(KIND=r8)    :: tvsgm
 7124.                  INTEGER :: ierr
 7125.                  !
 7126.                  ALLOCATE(cedfu (13,12, 9)           )
 7127.                  ALLOCATE(cedir (13,12, 9,3)      )
 7128.                  ALLOCATE(cedfu1( 2,13,12,6,3)    )
 7129.                  ALLOCATE(cedir1( 2,13,12,6,3,3)  )
 7130.                  ALLOCATE(cedfu2( 2,13,12,6,3)    )
 7131.                  ALLOCATE(cedir2( 2,13,12,6,3,3)  )
 7132.                  ALLOCATE(cledfu(13,12, 9)           )
 7133.                  ALLOCATE(cledir(13,12, 9,3)      )
 7134.                  ALLOCATE(xmiu  (12, 3)           )
 7135.                  ALLOCATE(cether(13,12, 2)           )
 7136.                  ALLOCATE(xmiw  (12, 3)           )
 7137.                  !
 7138.                  ALLOCATE(ystpar(2,3)             )
 7139.                  ALLOCATE(yopt  (2)               )
 7140.                  ALLOCATE(yll   (2)               )
 7141.                  ALLOCATE(yu    (2)               )
 7142.                  ALLOCATE(yefac (2)               )
 7143.                  ALLOCATE(yh1   (2)               )
 7144.                  ALLOCATE(yh2   (2)               )
 7145.                  ALLOCATE(yootd (2)               )
 7146.                  ALLOCATE(yreen (12,2)            )
 7147.                  ALLOCATE(ycover(12,2)            )
 7148.                  ALLOCATE(ylt   (12,2)            )
 7149.                  !
 7150.                  !     vegetation and soil parameters
 7151.                  !
 7152.                  ALLOCATE(rstpar_fixed(ityp,icg,iwv)   )
 7153.                  ALLOCATE(chil_fixed  (ityp,icg)          )
 7154.                  ALLOCATE(topt_fixed  (ityp,icg)          )
 7155.                  ALLOCATE(tll_fixed   (ityp,icg)          )
 7156.                  ALLOCATE(tu_fixed    (ityp,icg)          )
 7157.                  ALLOCATE(defac_fixed (ityp,icg)          )
 7158.                  ALLOCATE(ph1_fixed   (ityp,icg)          )
 7159.                  ALLOCATE(ph2_fixed   (ityp,icg)          )
 7160.                  ALLOCATE(rootd (ityp,icg)          )
 7161.                  ALLOCATE(bee   (ityp)          )
 7162.                  ALLOCATE(phsat (ityp)          )
 7163.                  ALLOCATE(satco (ityp)          )
 7164.                  ALLOCATE(poros (ityp)          )
 7165.                  ALLOCATE(zdepth(ityp,idp)          )
 7166.                  ALLOCATE(green_fixed (ityp,imon,icg)  )
 7167.                  ALLOCATE(xcover_fixed(ityp,imon,icg)  )
 7168.                  ALLOCATE(zlt_fixed   (ityp,imon,icg)  )
 7169.                  ALLOCATE(x0x   (ityp,imon)      )
 7170.                  ALLOCATE(xd    (ityp,imon)      )
 7171.                  ALLOCATE(z2    (ityp,imon)      )
 7172.                  ALLOCATE(z1    (ityp,imon)      )
 7173.                  ALLOCATE(xdc   (ityp,imon)      )
 7174.                  ALLOCATE(xbc   (ityp,imon)      )
 7175.                  ALLOCATE(zlt   (ityp,imon,icg)  )
 7176.                  ALLOCATE(xcover  (ityp, imon, icg))
 7177.                  ALLOCATE(ph2    (ityp,icg))
 7178.                  ALLOCATE(ph1    (ityp,icg))
 7179.                  ALLOCATE(green(ityp,imon,icg))
 7180.                  ALLOCATE(defac(ityp,icg))
 7181.                  ALLOCATE(tu   (ityp,icg))
 7182.                  ALLOCATE(tll  (ityp,icg))
 7183.                  ALLOCATE(topt (ityp,icg))
 7184.                  ALLOCATE(rstpar(ityp,icg,iwv))
 7185.                  ALLOCATE(chil  (ityp,icg))
 7186.              
 7187.                  OPEN(UNIT=nfsibd, FILE=TRIM(fNameSibVeg),FORM='UNFORMATTED', ACCESS='SEQUENTIAL',&
 7188.                       ACTION='READ',STATUS='OLD', IOSTAT=ierr)
 7189.                  IF (ierr /= 0) THEN
 7190.                     WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 7191.                          TRIM(fNameSibVeg), ierr
 7192.                     STOP "**(ERROR)**"
 7193.                  END IF
 7194.              
 7195.                  OPEN (UNIT=nfalb, FILE=TRIM(fNameSibAlb),FORM='UNFORMATTED', ACCESS='SEQUENTIAL', &
 7196.                       ACTION='READ',STATUS='OLD', IOSTAT=ierr)
 7197.                  IF (ierr /= 0) THEN
 7198.                     WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 7199.                          TRIM(fNameSibAlb), ierr
 7200.                     STOP "**(ERROR)**"
 7201.                  END IF
 7202.                 
 7203.                  READ (UNIT=nfsibd) rstpar_r4, chil_r4, topt_r4, tll_r4, tu_r4, defac_r4, ph1_r4, ph2_r4, &
 7204.                                     rootd_r4, bee_r4, phsat_r4, satco_r4, poros_r4, zdepth_r4
 7205.                  READ (UNIT=nfsibd) green_r4, xcover_r4, zlt_r4, x0x_r4, xd_r4, z2_r4, z1_r4, xdc_r4, xbc_r4
 7206.              
 7207.  V--------<>     rstpar_fixed = rstpar_r4
 7208.  Vf-------<>     chil_fixed   = chil_r4
 7209.  f--------<>     topt_fixed   = topt_r4
 7210.  f--------<>     tll_fixed    = tll_r4
 7211.  f--------<>     tu_fixed     = tu_r4
 7212.  f--------<>     defac_fixed  = defac_r4
 7213.  f--------<>     ph1_fixed    = ph1_r4
 7214.  V--------<>     ph2_fixed    = ph2_r4
 7215.  V--------<>     rootd        = rootd_r4
 7216.  Vf-------<>     bee          = bee_r4
 7217.  f--------<>     phsat        = phsat_r4
 7218.  f--------<>     satco        = satco_r4
 7219.  f--------<>     poros        = poros_r4
 7220.  V--------<>     zdepth       = zdepth_r4
 7221.  Vf-------<>     green_fixed  = green_r4
 7222.  f--------<>     xcover_fixed = xcover_r4
 7223.  f--------<>     zlt_fixed    = zlt_r4
 7224.  Vf-------<>     x0x          = x0x_r4
 7225.  f--------<>     xd           = xd_r4
 7226.  f--------<>     z2           = z2_r4
 7227.  f--------<>     z1           = z1_r4
 7228.  f--------<>     xdc          = xdc_r4
 7229.  f--------<>     xbc          = xbc_r4
 7230.              
 7231.                  READ(UNIT=nfalb) cedfu_r4, cedir_r4, cedfu1_r4, cedir1_r4, cedfu2_r4, cedir2_r4, &
 7232.                       cledfu_r4, cledir_r4, xmiu_r4, cether_r4, xmiw_r4
 7233.  Vf-------<>     cedfu  = REAL(cedfu_r4 ,KIND=r8) 
 7234.  Vf-------<>     cedir  = REAL(cedir_r4 ,KIND=r8) 
 7235.  V--------<>     cedfu1 = REAL(cedfu1_r4,KIND=r8) 
 7236.  V--------<>     cedir1 = REAL(cedir1_r4,KIND=r8) 
 7237.  V--------<>     cedfu2 = REAL(cedfu2_r4,KIND=r8) 
 7238.  V--------<>     cedir2 = REAL(cedir2_r4,KIND=r8) 
 7239.  f--------<>     cledfu = REAL(cledfu_r4,KIND=r8) 
 7240.  f--------<>     cledir = REAL(cledir_r4,KIND=r8) 
 7241.  V--------<>     cether = REAL(cether_r4,KIND=r8) 
 7242.  V--------<>     xmiu   = REAL(xmiu_r4  ,KIND=r8) 
 7243.  V--------<>     xmiw   = REAL(xmiw_r4  ,KIND=r8) 
 7244.                  REWIND nfsibd
 7245.              
 7246.                  REWIND nfalb
 7247.              
 7248.                  f0001=0.0001_r8
 7249.              
 7250.  f---------<     DO jcg =1, 2
 7251.  f 2-------<        DO jmon=1,12
 7252.  f 2 V-----<           DO jtyp=1,ityp
 7253.  f 2 V                    green_fixed(jtyp,jmon,jcg)=MAX(f0001,green_fixed(jtyp,jmon,jcg))
 7254.  f 2 V----->           END DO
 7255.  f 2------->        END DO
 7256.  f--------->     END DO
 7257.              
 7258.  f---------<     DO iv =1, 2
 7259.  f                  jtyp = 12
 7260.  f                  IF (iv.EQ.2) jtyp = 13
 7261.  f           
 7262.  f 2-------<        DO  im = 1,3
 7263.  f 2                   ystpar(iv,im)=rstpar_fixed(jtyp,1,im)
 7264.  f 2------->        END DO
 7265.  f           
 7266.  f                  yhil  (iv)=chil_fixed  (jtyp,1)
 7267.  f                  yopt  (iv)=topt_fixed  (jtyp,1)
 7268.  f                  yll   (iv)=tll_fixed   (jtyp,1)
 7269.  f                  yu    (iv)=tu_fixed    (jtyp,1)
 7270.  f                  yefac (iv)=defac_fixed (jtyp,1)
 7271.  f                  yootd (iv)=rootd (jtyp,1)
 7272.  f                  yh1   (iv)=ph1_fixed   (jtyp,1)
 7273.  f                  yh2   (iv)=ph2_fixed   (jtyp,1)
 7274.  f           
 7275.  f--------->     END DO
 7276.              
 7277.  iVp-------<     DO jmon=1,12
 7278.  iVp i-----<        DO iv = 1,2
 7279.  iVp i                 jtyp = 12
 7280.  iVp i                 IF (iv.EQ.2) jtyp = 13
 7281.  iVp i                 ylt   (jmon,iv)=zlt_fixed(jtyp,jmon,1)
 7282.  iVp i                 yreen (jmon,iv)=green_fixed (jtyp,jmon,1)
 7283.  iVp i                 ycover(jmon,iv)=xcover_fixed(jtyp,jmon,1)
 7284.  iVp i----->        END DO
 7285.  iVp------->     END DO
 7286.              
 7287.  i---------<     DO iv = 1,2
 7288.  i i-------<        DO im = 1,3
 7289.  i i                   rstpar_fixed(13,iv,im) = 1000.0_r8
 7290.  i i------->        END DO
 7291.  i                  chil_fixed  (13,iv) = 0.01_r8
 7292.  i                  topt_fixed  (13,iv) = 310.0_r8
 7293.  i                  tll_fixed   (13,iv) = 300.0_r8
 7294.  i                  tu_fixed    (13,iv) = 320.0_r8
 7295.  i                  defac_fixed (13,iv) = 0.0_r8
 7296.  i                  ph1_fixed   (13,iv) = 3.0_r8
 7297.  i                  ph2_fixed   (13,iv) = 6.0_r8
 7298.  i                  rootd (13,iv) = 2.1_r8
 7299.  i--------->     END DO
 7300.              
 7301.                  bee(13) = 4.8_r8
 7302.                  phsat(13) = -0.167_r8
 7303.                  satco(13) = 0.762e-4_r8
 7304.                  poros(13) = 0.4352_r8
 7305.              
 7306.  f---------<     DO i = 1, imon
 7307.  f                  zlt_fixed(13,i,1) = 0.0001_r8
 7308.  f                  zlt_fixed(13,i,2) = 0.0001_r8
 7309.  f                  z2(13,i) = 0.1_r8
 7310.  f                  z1(13,i) = 0.0001_r8
 7311.  f                  xcover_fixed(13,i,1) = 0.0001_r8
 7312.  f                  xcover_fixed(13,i,2) = 0.0001_r8
 7313.  f                  x0x(13,i) = 0.01_r8
 7314.  f                  xd(13,i) = 0.0004_r8
 7315.  f                  xbc(13,i) = 35461.0_r8
 7316.  f                  xdc(13,i) = 28.5_r8
 7317.  f--------->     END DO
 7318.              
 7319.                  zdepth(13,1) = 1.0_r8
 7320.                  zdepth(13,2) = 1.0_r8
 7321.                  zdepth(13,3) = 1.0_r8
 7322.              
 7323.                  ! tvsgm - Global Mean Surface Virtual Temperature
 7324.                  ! dz - mean height of the first model layer
 7325.                  tvsgm=288.16_r8
 7326.                  dz=(gasr*tvsgm/grav)*LOG(si1/sl1)
 7327.                  ! Forest
 7328.                  !dzcut=0.75_r8*dz
 7329.                  dzcut=0.6_r8*dz
 7330.  f--------<>     xd(1,1:imon)=MIN(xd(1,1:imon),dzcut)
 7331.                  ! Other
 7332.                  ! SiB calibration values
 7333.                  ! 45 m - height of the first tower level of measurements
 7334.                  ! 27 m - maximum calibrated displacement height
 7335.                  dzcut=(27.0_r8/45.0_r8)*dz
 7336.  V--------<>     xd(2:ityp,1:imon)=MIN(xd(2:ityp,1:imon),dzcut)
 7337.                END SUBROUTINE vegin
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7337 
  Local variable "YHIL" is assigned a value but never used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7337 
  Named Constant "ILD" is not used.

 7338.              
 7339.                !
 7340.                !------------------------------------------------------------
 7341.                !
 7342.                SUBROUTINE re_assign_sib_soil_prop
 7343.                  IMPLICIT NONE
 7344.              
 7345.                  REAL(KIND=r8)    :: GSWP_soil_input_data(10,12)
 7346.                  INTEGER :: nnn
 7347.                  !
 7348.                  !-------------------------------Soil data from GSWP-2 -------------------------------------
 7349.                  !
 7350.                  DATA GSWP_soil_input_data/  &
 7351.                                              !1     2    3     4        5       6      7      8      9     10
 7352.                                              !SAND(%) SILT CLAY QUARTZ  Wfc    Wwilt  Wsat    b    PHIsat  Ksat
 7353.                       92.0_r8, 5.0_r8, 3.0_r8,0.92_r8,0.132_r8,0.033_r8,0.373_r8, 3.30_r8,-0.05_r8,2.45E-05_r8,&!1  Sand
 7354.                       82.0_r8,12.0_r8, 6.0_r8,0.82_r8,0.156_r8,0.051_r8,0.386_r8, 3.80_r8,-0.07_r8,1.75E-05_r8,&!2  Loamy Sand
 7355.                       58.0_r8,32.0_r8,10.0_r8,0.60_r8,0.196_r8,0.086_r8,0.419_r8, 4.34_r8,-0.16_r8,8.35E-06_r8,&!3  Sandy Loam
 7356.                       10.0_r8,85.0_r8, 5.0_r8,0.25_r8,0.361_r8,0.045_r8,0.471_r8, 3.63_r8,-0.84_r8,1.10E-06_r8,&!4  Silt Loam
 7357.                       17.0_r8,70.0_r8,13.0_r8,0.40_r8,0.270_r8,0.169_r8,0.476_r8, 5.25_r8,-0.65_r8,2.36E-06_r8,&!5  Loam
 7358.                       58.0_r8,15.0_r8,27.0_r8,0.60_r8,0.253_r8,0.156_r8,0.412_r8, 7.32_r8,-0.12_r8,6.31E-06_r8,&!6  Sandy Clay Loam
 7359.                       32.0_r8,34.0_r8,34.0_r8,0.10_r8,0.301_r8,0.211_r8,0.447_r8, 8.34_r8,-0.28_r8,2.72E-06_r8,&!7  Silty Clay Loam
 7360.                       10.0_r8,56.0_r8,34.0_r8,0.35_r8,0.334_r8,0.249_r8,0.478_r8, 8.41_r8,-0.63_r8,1.44E-06_r8,&!8  Clay Loam
 7361.                       52.0_r8, 6.0_r8,42.0_r8,0.52_r8,0.288_r8,0.199_r8,0.415_r8, 9.70_r8,-0.12_r8,4.25E-06_r8,&!9  Sandy Clay
 7362.                       6.0_r8,47.0_r8,47.0_r8,0.10_r8,0.363_r8,0.286_r8,0.478_r8,10.78_r8,-0.58_r8,1.02E-06_r8,&!10 Silty Clay
 7363.                       22.0_r8,20.0_r8,58.0_r8,0.25_r8,0.353_r8,0.276_r8,0.450_r8,12.93_r8,-0.27_r8,1.33E-06_r8,&!11 Clay
 7364.                       43.0_r8,39.0_r8,18.0_r8,0.10_r8,0.250_r8,0.148_r8,0.437_r8, 5.96_r8,-0.24_r8,4.66E-06_r8 /!12 Silt
 7365.                  !
 7366.                  !-srf: avoid this for now, only use it when all arrays above are used like:
 7367.                  ! bee(int(soil_type(lon,lat))) and not the usual way: bee(isurf(lon,lat))),
 7368.                  ! where isurf is the vegetation index
 7369.                  !
 7370.  D---------<     DO nnn = 1,12
 7371.  D                  !
 7372.  D                  !   sslfc(nnn)  = GSWP_soil_input_data(5,nnn)        !not in use
 7373.  D                  !   sswlts(nnn) = GSWP_soil_input_data(6,nnn)        !not in use
 7374.  D                  !   sswlts(nnn) = max(0.06_r8,GSWP_soil_input_data(6,n) !not in use nn)
 7375.  D                  !
 7376.  D                  ! print*,nnn,'poros bee phsat satco'
 7377.  D                  ! print*,poros(nnn) , GSWP_soil_input_data(7,nnn)
 7378.  D                  ! print*,bee(nnn)   ,GSWP_soil_input_data(8,nnn)
 7379.  D                  ! print*,phsat(nnn) ,GSWP_soil_input_data(9,nnn)
 7380.  D                  ! print*,satco(nnn) ,GSWP_soil_input_data(10,nnn)
 7381.  D           
 7382.  D                  ! poros(nnn) = GSWP_soil_input_data(7,nnn)
 7383.  D                  ! bee  (nnn) = GSWP_soil_input_data(8,nnn)
 7384.  D                  ! phsat(nnn) = GSWP_soil_input_data(9,nnn)
 7385.  D                  ! satco(nnn) = GSWP_soil_input_data(10,nnn)
 7386.  D--------->     END DO
 7387.                  !srf- original SSIB from MCGA requires 13 soil classes, while USDA/GSWP2 has only 12
 7388.                  !srf- the soil class 13 is not changed here (see vegin.f90)
 7389.                  !  bee(13) = 4.8_r8
 7390.                  !  phsat(13) = -0.167_r8
 7391.                  !  satco(13) = 0.762e-4_r8
 7392.                  !  poros(13) = 0.4352_r8
 7393.                  !  zdepth(13,1) = 1.0_r8
 7394.                  !  zdepth(13,2) = 1.0_r8
 7395.                  !  zdepth(13,3) = 1.0_r8
 7396.                  !
 7397.                  RETURN
 7398.                END SUBROUTINE re_assign_sib_soil_prop
 7399.              
 7400.                ! wheat  :determine wheat phenology for latitude and julian day?.
 7401.              
 7402.                SUBROUTINE wheat (latitu,itype ,nmax  ,colrad ,month ,xday   ,yrl   , &
 7403.                     idatec,monl  ,nsx    )
 7404.                  !==========================================================================
 7405.                  !==========================================================================
 7406.                  !  ityp.......Numero das classes de solo vegetacao 13
 7407.                  !  imon.......Number max of month at year (12)
 7408.                  !  icg........Parameters of vagetation (icg=1 top e icg=2 bottom)
 7409.                  !  iwv........Comprimento de onda iwv=1=visivel, iwv=2=infravermelho
 7410.                  !             proximo, iwv=3 infravermelho termal
 7411.                  !  nmax
 7412.                  !  itype......Classe de textura do solo ou classe de vegetacao
 7413.                  !  jmax.......Number of grid points on a gaussian longitude circle
 7414.                  !  colrad.....colatitude
 7415.                  !  month......Number of month at year (1-12)
 7416.                  !  xday.......is julian day - 1 with fraction of day
 7417.                  !  pie........Constante Pi=3.1415926e0
 7418.                  !  yrl........length of year in days
 7419.                  !  idatec.....idatec(1)=current hour of
 7420.                  !            idatec(2)=current day of month.
 7421.                  !            idatec(3)=current month of year.
 7422.                  !            idatec(4)=current year.
 7423.                  !  monl.......length of each month in days
 7424.                  !  ystpar.....Coefficints related to par influence on
 7425.                  !             stomatal resistance
 7426.                  !  yopt.......Temperatura ideal de funcionamento estomatico
 7427.                  !  yll........Temperatura minima de funcionamento estomatico
 7428.                  !  yu.........Temperatura maxima de funcionamento estomatico
 7429.                  !  yefac......Parametro de deficit de pressao de vapor d'agua
 7430.                  !  yh1........Coeficiente para o efeito da agua no solo
 7431.                  !  yh2........Potencial de agua no solo para ponto de Wilting
 7432.                  !  rstpar.....Coefficints related to par influence on
 7433.                  !             stomatal resistance
 7434.                  !  chil.......Leaf orientation parameter
 7435.                  !  topt.......Temperatura ideal de funcionamento estomatico
 7436.                  !  tll........Temperatura minima de funcionamento estomatico
 7437.                  !  tu.........Temperatura maxima de funcionamento estomatico
 7438.                  !  defac......Parametro de deficit de pressao de vapor d'agua
 7439.                  !  ph1........Coeficiente para o efeito da agua no solo
 7440.                  !  ph2........Potencial de agua no solo para ponto de Wilting
 7441.                  !  green......Fraction of grenn leaves
 7442.                  !  xcover(iv).Fracao de cobertura de vegetacao iv=1 Top
 7443.                  !  xcover(iv).Fracao de cobertura de vegetacao iv=2 Bottom
 7444.                  !  nsx........phenology dates to fall within one year period
 7445.                  !==========================================================================
 7446.                  INTEGER , PARAMETER :: itveg = 13 ! Number of Vegetation Types
 7447.                  INTEGER , PARAMETER :: isoil = 13 ! Number of Vegetation Types
 7448.                  INTEGER , PARAMETER :: imon = 12 ! Number of Months with Defined Vegetation Types
 7449.                  INTEGER , PARAMETER :: icg  = 2  ! Number of Vegetation Parameters
 7450.                  INTEGER , PARAMETER :: iwv  = 3  ! Number of Radiation Wavelengths
 7451.                  INTEGER , PARAMETER :: idp  = 3  ! Number of Soil Layer Parameters
 7452.                  INTEGER , PARAMETER :: ibd  = 2  ! Number of Vegetation Stage
 7453.              
 7454.                  INTEGER, INTENT(in ) :: nmax
 7455.                  INTEGER, INTENT(in ) :: latitu
 7456.                  INTEGER, INTENT(in ) :: itype (nmax)
 7457.                  REAL(KIND=r8),    INTENT(in ) :: colrad(nmax)
 7458.                  INTEGER, INTENT(in ) :: month (nmax)
 7459.                  REAL(KIND=r8),    INTENT(in ) :: xday
 7460.                  REAL(KIND=r8),    INTENT(in ) :: yrl
 7461.                  INTEGER, INTENT(in ) :: idatec(4)
 7462.                  INTEGER, INTENT(in ) :: monl  (12)
 7463.                  INTEGER, INTENT(inout) :: nsx(nmax)
 7464.                  REAL(KIND=r8)    :: rday
 7465.                  REAL(KIND=r8)    :: thrsh
 7466.                  REAL(KIND=r8)    :: phi(nmax)
 7467.                  REAL(KIND=r8)    :: flip
 7468.                  REAL(KIND=r8)    :: rootgc (nmax)
 7469.                  REAL(KIND=r8)    :: chilw (nmax)
 7470.                  REAL(KIND=r8)    :: tlai(nmax)
 7471.                  REAL(KIND=r8)    :: xcover2(nmax)
 7472.                  REAL(KIND=r8)    :: grlf (nmax)
 7473.                  REAL(KIND=r8)    :: diff1 (nmax)
 7474.                  REAL(KIND=r8)    :: diff2 (nmax)
 7475.                  REAL(KIND=r8)    :: perc
 7476.                  REAL(KIND=r8)    :: x1
 7477.                  REAL(KIND=r8)    :: xdif1
 7478.                  REAL(KIND=r8)    :: xdif2
 7479.                  INTEGER :: i
 7480.                  INTEGER :: kold
 7481.                  INTEGER :: i1
 7482.                  INTEGER :: ns
 7483.                  INTEGER :: mind (nmax)
 7484.                  INTEGER :: index (nmax)
 7485.                  INTEGER :: icond
 7486.                  INTEGER :: kk
 7487.                  INTEGER :: mnl
 7488.                  REAL(KIND=r8) :: pie=3.1415926e0_r8
 7489.                  REAL(KIND=r8)    :: phenst(nmax,9)
 7490.                  LOGICAL    :: test(nmax)
 7491.                  INTEGER, PARAMETER :: iimon=12
 7492.              
 7493.                  REAL(KIND=r8), PARAMETER :: wlai(9)=(/1.0_r8, 2.0_r8, 6.0_r8, 4.0_r8, 3.0_r8, 1.0_r8, 0.01_r8, 0.01_r8, 1.0_r8/)
 7494.              
 7495.                  REAL(KIND=r8), PARAMETER :: xgren(iimon+1)=(/0.55_r8,0.68_r8,0.8_r8,0.9_r8,0.9_r8,0.9_r8,0.9_r8,0.81_r8,0.64_r8,&
 7496.                       0.53_r8,0.49_r8,0.48_r8,0.55_r8/)
 7497.              
 7498.                  REAL(KIND=r8), PARAMETER :: vlt(iimon+1)=(/1.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,3.78_r8,&
 7499.                       1.63_r8,1.0_r8,1.0_r8/)
 7500.              
 7501.                  !    INTEGER, SAVE :: kmon(iimon+1)
 7502.              
 7503.                  REAL(KIND=r8) :: xgreen(nmax,iimon+1)
 7504.                  INTEGER :: kmon(imon+1)
 7505.              
 7506.                  INTEGER, PARAMETER :: ihead = 3
 7507.                  INTEGER, PARAMETER :: iwheat=12
 7508.                  REAL(KIND=r8),    PARAMETER :: syr   =365.25e0_r8
 7509.                  REAL(KIND=r8),    PARAMETER :: vcv   =0.569_r8
 7510.                  !
 7511.                  !     vlt and xgren are assumed to be correct at the beginning of the
 7512.                  !     month
 7513.                  !
 7514.  Vf-------<>     nsx = 0
 7515.  f--------<>     index= 0
 7516.  V--------<>     phenst=0.0_r8
 7517.                  !
 7518.                  !     xday is julian day - 1 with fraction of day
 7519.                  !
 7520.                  rday=xday
 7521.                  !
 7522.                  !     for standard length years, determine the offset for the year
 7523.                  !     within the leap year period
 7524.                  !
 7525.                  thrsh=-MOD(idatec(4)+3,4)*0.25e0_r8
 7526.  f--------<>     test=.TRUE.
 7527.  1---------<     DO i = 1, nmax
 7528.  1                  !pi === 180
 7529.  1                  !y  === x
 7530.  1                  !
 7531.  1                  ! X = (180 * Y)/pi
 7532.  1                  !
 7533.  1                  phi(i) = 90.0_r8-180.0e0_r8/pie * colrad(i)
 7534.  1                  !
 7535.  1                  !     constrain latitude range
 7536.  1                  !
 7537.  1                  !fixa o valor -55 ou +55 se o valor absoluto da latitude for maior que 55
 7538.  1                  IF (ABS(phi(i)) > 55.0_r8) phi(i)=SIGN(55.0_r8,phi(i))
 7539.  1                  !fixa o valor -20 ou +20 se a valor absoluto da latitude for menor que 20
 7540.  1                  IF (ABS(phi(i)) < 20.0_r8) phi(i)=SIGN(20.0_r8,phi(i))
 7541.  1           
 7542.  1--------->     ENDDO
 7543.  1---------<     DO i1 = 1, iimon+1
 7544.  1 V-------<        DO i = 1, nmax
 7545.  1 V                   xgreen(i,i1)=xgren(i1)
 7546.  1 V------->        END DO
 7547.  1--------->     END DO
 7548.                  !
 7549.                  !     search for any wheat vegetation points at this latitude
 7550.                  !     if found, set sib parameters for latitude and time of year
 7551.                  !
 7552.                  kold=0
 7553.  w---------<     DO i1 = 1, iimon
 7554.  w                  kmon(i1)=kold
 7555.  w                  !
 7556.  w                  !     add extra day for leap years if using standard length year
 7557.  w                  !
 7558.  w                  IF (MOD(idatec(4),4) == 0 .AND. i1 == 2)kmon(i1)=kmon(i1)+1
 7559.  w                  kold=kold+monl(i1)
 7560.  w--------->     END DO
 7561.  1---------<     DO i = 1, nmax
 7562.  1                  IF (itype(i) /= iwheat) CYCLE
 7563.  1                  flip =   0.0_r8
 7564.  1                  IF (phi(i)< 0.0e0_r8) flip = yrl/2.0_r8
 7565.  1                  !
 7566.  1                  !     determine julian day - 1 for each wheat phenology for this
 7567.  1                  !     latitude.  scale by length of year and adjust for south. hem.
 7568.  1                  !
 7569.  1                  phenst(i,2) = (4.50_r8 * ABS(phi(i)) - 65.0_r8) * (yrl/syr) + flip
 7570.  1                  phenst(i,3) = (4.74_r8 * ABS(phi(i)) - 47.2_r8) * (yrl/syr) + flip
 7571.  1                  phenst(i,4) = (4.86_r8 * ABS(phi(i)) - 31.8_r8) * (yrl/syr) + flip
 7572.  1                  phenst(i,5) = (4.55_r8 * ABS(phi(i)) -  2.0_r8) * (yrl/syr) + flip
 7573.  1                  phenst(i,6) = (4.35_r8 * ABS(phi(i)) + 10.5_r8) * (yrl/syr) + flip
 7574.  1           
 7575.  1           
 7576.  1                  phenst(i,7) = phenst(i,6) + 3.0_r8 * (yrl/syr)
 7577.  1                  phenst(i,1) = phenst(i,2) - ABS(5.21_r8 * ABS(phi(i)) - 0.3_r8)*(yrl/syr)
 7578.  1                  phenst(i,9) = phenst(i,1)
 7579.  1                  phenst(i,8) = phenst(i,9) - 5.0_r8*(yrl/syr)
 7580.  1--------->     END DO
 7581.  b---------<     DO ns = 1, 9
 7582.  b b-------<        DO i = 1, nmax
 7583.  b b                   IF (itype(i) /= iwheat) CYCLE
 7584.  b b                   !
 7585.  b b                   !     constrain phenology dates to fall within one year period
 7586.  b b                   !
 7587.  b b                   IF (phenst(i,ns) < 0.0e0_r8) phenst(i,ns) = phenst(i,ns) + yrl
 7588.  b b                   IF (phenst(i,ns) > yrl)      phenst(i,ns) = phenst(i,ns) - yrl
 7589.  b b------->        END DO
 7590.  b--------->     END DO
 7591.              
 7592.  b---------<     DO i1 = 1, 12
 7593.  b b-------<        DO i = 1, nmax
 7594.  b b                   IF (itype(i) /= iwheat) CYCLE
 7595.  b b                   !
 7596.  b b                   !     find month of the head phenology stage for this latitude
 7597.  b b                   !
 7598.  b b                   IF (phenst(i,ihead) <= kmon(i1+1)) THEN
 7599.  b b                      mind(i) = i1
 7600.  b b                      IF (i1 <= 4) THEN
 7601.  b b                         xgreen(i,i1+1) = 0.9_r8
 7602.  b b                         xgreen(i,i1+2) = 0.9_r8
 7603.  b b                      END IF
 7604.  b b                   END IF
 7605.  b b------->        END DO
 7606.  b--------->     END DO
 7607.              
 7608.  1---------<     DO ns = 1,8
 7609.  1 2-------<        DO i = 1, nmax
 7610.  1 2                   IF (itype(i) /= iwheat) CYCLE
 7611.  1 2                   rootgc(i) = 1.0_r8
 7612.  1 2                   chilw(i)  =-0.02_r8
 7613.  1 2                   tlai(i)   = 0.5_r8
 7614.  1 2                   grlf(i)   = 0.6_r8
 7615.  1 2                   xcover2(i)=xcover(iwheat,month(i),1)
 7616.  1 2                   !
 7617.  1 2                   !     find growth stage given latitude and day
 7618.  1 2                   !
 7619.  1 2                   IF(test(i))THEN
 7620.  1 2                      diff1(i) =  phenst(i,ns+1)- phenst(i,ns)
 7621.  1 2                      diff2(i) = rday- phenst(i,ns)
 7622.  1 2                      IF ( phenst(i,ns) >=  phenst(i,ns+1)) THEN
 7623.  1 2                         IF ((rday <  phenst(i,ns)) .OR. (rday >  phenst(i,ns+1))) THEN
 7624.  1 2                            !
 7625.  1 2                            !     phenology stages overlap the end of year?
 7626.  1 2                            !
 7627.  1 2                            icond = 0
 7628.  1 2                            IF (rday >=  phenst(i,ns)   .AND. rday <= yrl  ) icond = 1
 7629.  1 2                            IF (rday >= thrsh .AND. rday <=  phenst(i,ns+1)) icond = 2
 7630.  1 2                            IF (icond /= 2) THEN
 7631.  1 2                               diff1(i) = yrl    -  phenst(i,ns) +  phenst(i,ns+1)
 7632.  1 2                               diff2(i) = rday   -  phenst(i,ns)
 7633.  1 2                            ELSE
 7634.  1 2                               diff1(i) = yrl   -  phenst(i,ns) + phenst(i,ns+1)
 7635.  1 2                               diff2(i) = yrl   -  phenst(i,ns) + rday
 7636.  1 2                            END IF
 7637.  1 2                         END IF
 7638.  1 2                         IF (icond /= 0) THEN
 7639.  1 2                            !
 7640.  1 2                            !     date found in phenology stage
 7641.  1 2                            !
 7642.  1 2                            perc =  diff2(i)/diff1(i)
 7643.  1 2                            !
 7644.  1 2                            !     kk is current month number
 7645.  1 2                            !
 7646.  1 2                            kk=idatec(2)
 7647.  1 2                            mnl=monl(kk)
 7648.  1 2                            IF (MOD(idatec(4),4) == 0 .AND. kk == 2)mnl=mnl+1
 7649.  1 2                            IF (rday > phenst(i,ihead)) THEN
 7650.  1 2                               IF (kk /= mind(i)) THEN
 7651.  1 2                                  x1 = vlt(kk)
 7652.  1 2                                  xdif1 = mnl
 7653.  1 2                                  xdif2 = rday - kmon(kk)
 7654.  1 2                               ELSE
 7655.  1 2                                  x1    = wlai(ihead)
 7656.  1 2                                  xdif1 = kmon(kk+1) - phenst(i,ihead)
 7657.  1 2                                  xdif2 = rday - phenst(i,ihead)
 7658.  1 2                               END IF
 7659.  1 2                               tlai(i) = x1 - (x1-vlt(kk+1)) / xdif1 * xdif2
 7660.  1 2                            ELSE
 7661.  1 2                               tlai(i) =  perc*(wlai(ns+1)-wlai(ns)) + wlai(ns)
 7662.  1 2                            END IF
 7663.  1 2                            IF (rday > phenst(i,ihead+1)) THEN
 7664.  1 2                               xcover2(i)=vcv + (0.9_r8 - vcv) * (yrl - rday)/(yrl - phenst(i,ihead+1))
 7665.  1 2                            ELSE
 7666.  1 2                               xcover2(i)=0.90_r8*(1.0_r8 - EXP(-tlai(i)))
 7667.  1 2                            END IF
 7668.  1 2                            grlf(i)   = xgreen(i,kk)-(xgreen(i,kk)-xgreen(i,kk+1))/mnl*(rday-kmon(kk))
 7669.  1 2                            rootgc(i) = 2910.0_r8 * (0.5_r8 + 0.5_r8 * tlai(i)/ wlai(ihead) * grlf(i))
 7670.  1 2                            IF (ns /= 1 .AND. ns /= 2) chilw(i)=-0.2_r8
 7671.  1 2                            test(i)=.FALSE.
 7672.  1 2                            index(i)=ns
 7673.  1 2                         END IF
 7674.  1 2                      END IF
 7675.  1 2                   END IF
 7676.  1 2------->        END DO
 7677.  1--------->     END DO
 7678.              
 7679.  1---------<     DO i = 1, nmax
 7680.  1                  IF (itype(i) /= iwheat) CYCLE
 7681.  1                  nsx(i) = index(i)
 7682.  1                  IF (nsx(i) == 9) nsx(i) = 1
 7683.  1                  IF (nsx(i) >  6) nsx(i) = 6
 7684.  1                  vcover_gbl (i,latitu,1) =   xcover2(i) !xcover(itype(i),month(i),1)
 7685.  1                  zlt_gbl    (i,latitu,1) =   tlai(i)    !zlt   (itype(i),month(i),1)
 7686.  1                  green_gbl  (i,latitu,1) =   grlf(i)    !green (itype(i),month(i),1)
 7687.  1                  chil_gbl   (i,latitu,1) =   chilw(i)   !chil  (itype(i),1)
 7688.  1                  topt_gbl   (i,latitu,1) =   yopt (2)   !topt  (itype(i),1)
 7689.  1                  tll_gbl    (i,latitu,1) =   yll  (2)   !tll   (itype(i),1)
 7690.  1                  tu_gbl     (i,latitu,1) =   yu(2)   !tu    (itype(i),1)
 7691.  1                  defac_gbl  (i,latitu,1) =   yefac(2)   !defac (itype(i),1)
 7692.  1                  ph1_gbl    (i,latitu,1) =   yh1  (2)   !ph1   (itype(i),1)
 7693.  1                  ph2_gbl    (i,latitu,1) =   yh2  (2)   !ph2   (itype(i),1)
 7694.  1                  rstpar_gbl (i,latitu,1,1)=  ystpar(2,1)!rstpar(itype(i),1,1)
 7695.  1                  rstpar_gbl (i,latitu,1,2)=  ystpar(2,2)!rstpar(itype(i),1,2)
 7696.  1                  rstpar_gbl (i,latitu,1,3)=  ystpar(2,3)!rstpar(itype(i),1,3)
 7697.  1           
 7698.  1--------->     END DO
 7699.                  RETURN
 7700.                END SUBROUTINE wheat
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Local variable "ROOTGC" is assigned a value but never used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Named Constant "ICG" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Named Constant "ITVEG" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Named Constant "IWV" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Named Constant "IBD" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Named Constant "ISOIL" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7700 
  Named Constant "IDP" is not used.

 7701.              
 7702.              
 7703.              
 7704.                ! sibwet :transform mintz-serafini and national meteoroLOGICAL center fields
 7705.                !         of soil moisture into sib compatible fields of soil moisture.
 7706.              
 7707.              
 7708.              
 7709.              
 7710.                SUBROUTINE sibwet &
 7711.                     (ibmax,jbmax,sinp,sinmax,imask,wsib,ssib,mxiter,ibMaxPerJB)
 7712.                  !
 7713.                  !
 7714.                  !     piers sellers : 29 april 1987
 7715.                  !
 7716.                  !
 7717.                  !   input  :   sinp     = mintz-serafini or national meteoroLOGICAL
 7718.                  !                         center soil moisture (mm)
 7719.                  !              sinmax   = maximum value of sinp (mm)
 7720.                  !              wsinp    = m-s or nmc fractional wetness
 7721.                  !              ms       = 1, mintz-serafini
 7722.                  !              nmc      = 1, national meteoroLOGICAL center
 7723.                  !              bee      = sib : soil moisture potential factor
 7724.                  !              phsat    = sib : soil potential at saturation (m)
 7725.                  !              zdepth(3)= sib : depth of 3 soil layers (m)
 7726.                  !              poros    = Porosidade do solo (m"3/m"3)
 7727.                  !
 7728.                  !   output :   wsibt    = sib : fractional wetness
 7729.                  !              ssibt    = sib : soil moisture content (m)
 7730.                  !              psit     = sib : soil moisture potential (m)
 7731.                  !              factor   = sib : extraction factor
 7732.                  !
 7733.                  INTEGER, INTENT(in   ) :: ibmax
 7734.                  INTEGER, INTENT(in   ) :: jbmax
 7735.                  INTEGER, INTENT(in   ) :: mxiter
 7736.                  REAL(KIND=r8)   , INTENT(in   ) :: sinp(ibmax,jbmax)
 7737.                  REAL(KIND=r8)   , INTENT(in   ) :: sinmax
 7738.                  !
 7739.              
 7740.                  INTEGER(KIND=i8), INTENT(in   ) :: imask (ibmax,jbmax)
 7741.                  REAL(KIND=r8)   , INTENT(inout  ) :: wsib  (ibmax,jbmax)
 7742.                  REAL(KIND=r8)   , INTENT(inout  ) :: ssib  (ibmax,jbmax)
 7743.                  INTEGER, INTENT(in   ) :: ibMaxPerJB(:)
 7744.              
 7745.                  REAL(KIND=r8) :: sm(ityp,mxiter)
 7746.                  REAL(KIND=r8) :: time(ityp,mxiter)
 7747.                  REAL(KIND=r8) :: fact(ityp,mxiter)
 7748.              
 7749.                  REAL(KIND=r8), PARAMETER :: xph1(13,2) = RESHAPE( &
 7750.                       (/-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8,-120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8, &
 7751.                       -200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8,-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8, &
 7752.                       -120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8,-200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8/), &
 7753.                       (/13,2/))
 7754.                  REAL(KIND=r8), PARAMETER :: xph2(13,2) = RESHAPE( &
 7755.                       (/-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8, &
 7756.                       -400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8,-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8, &
 7757.                       -230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8,-400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8/) , &
 7758.                       (/13,2/))
 7759.              
 7760.                  REAL(KIND=r8)    :: tzdep(3)
 7761.                  REAL(KIND=r8)    :: tzltm(2)
 7762.                  REAL(KIND=r8)    :: sibmax(ityp)
 7763.                  REAL(KIND=r8)    :: tphsat
 7764.                  REAL(KIND=r8)    :: tbee
 7765.                  REAL(KIND=r8)    :: tporos
 7766.                  INTEGER :: imm1
 7767.                  INTEGER :: imm2
 7768.                  INTEGER :: is
 7769.                  INTEGER :: im
 7770.                  INTEGER :: imm
 7771.                  INTEGER :: ivegm
 7772.                  REAL(KIND=r8)    :: cover
 7773.                  REAL(KIND=r8)    :: tph1
 7774.                  REAL(KIND=r8)    :: tph2
 7775.                  REAL(KIND=r8)    :: sref
 7776.                  REAL(KIND=r8)    :: smin
 7777.                  REAL(KIND=r8)    :: dssib
 7778.                  REAL(KIND=r8)    :: dw
 7779.                  REAL(KIND=r8)    :: times
 7780.                  REAL(KIND=r8)    :: soilmo
 7781.                  REAL(KIND=r8)    :: w
 7782.                  REAL(KIND=r8)    :: rsoilm
 7783.                  INTEGER :: iter
 7784.                  INTEGER :: latmax
 7785.                  INTEGER :: lonmax
 7786.                  INTEGER :: lat
 7787.                  INTEGER :: lon
 7788.                  REAL(KIND=r8)    :: tsinp
 7789.                  REAL(KIND=r8)    :: etp
 7790.                  REAL(KIND=r8)    :: facmod
 7791.                  REAL(KIND=r8)    :: ssibt
 7792.                  REAL(KIND=r8)    :: psit
 7793.                  REAL(KIND=r8)    :: factor
 7794.                  REAL(KIND=r8)    :: dt
 7795.                  INTEGER :: itsoil
 7796.                  INTEGER :: itfac
 7797.              
 7798.  Vf-------<>     sm  =0.0_r8
 7799.  f--------<>     time=0.0_r8
 7800.  f--------<>     fact=0.0_r8
 7801.  Vf-------<>     ssib=0.0_r8
 7802.  f--------<>     wsib=0.0_r8
 7803.              
 7804.                  lonmax=ibmax
 7805.                  latmax=jbmax
 7806.              
 7807.  1---------<     DO is = 1,ityp
 7808.  1                  !zdepth(3)= sib : depth of 3 soil layers (m)
 7809.  1                  tzdep (1)= zdepth(is,1)
 7810.  1                  tzdep (2)= zdepth(is,2)
 7811.  1                  tzdep (3)= zdepth(is,3)
 7812.  1                  tphsat   = phsat (is)
 7813.  1                  tbee     = bee   (is)
 7814.  1                  tporos   = poros (is)
 7815.  1                  imm1=1
 7816.  1                  imm2=1
 7817.  1                  tzltm(1)=zlt_fixed(is,1,1)
 7818.  1                  tzltm(2)=zlt_fixed(is,1,2)
 7819.  1 2-------<        DO im=2,12
 7820.  1 2                   IF(tzltm(1).LE.zlt_fixed(is,im,1) ) THEN
 7821.  1 2                      imm1=im
 7822.  1 2                      tzltm(1)=zlt_fixed(is,im,1)
 7823.  1 2                   END IF
 7824.  1 2                   IF(tzltm(2).LE.zlt_fixed(is,im,2) )THEN
 7825.  1 2                      imm2=im
 7826.  1 2                      tzltm(2)=zlt_fixed(is,im,2)
 7827.  1 2                   END IF
 7828.  1 2------->        END DO
 7829.  1                  imm=imm1
 7830.  1                  ivegm=1
 7831.  1                  IF(tzltm(1).LE.tzltm(2)) THEN
 7832.  1                     imm=imm2
 7833.  1                     ivegm=2
 7834.  1                  END IF
 7835.  1                  !
 7836.  1                  !     xcover......Fracao de cobertura vegetal icg=1 topo
 7837.  1                  !     xcover......Fracao de cobertura vegetal icg=2 base
 7838.  1                  !
 7839.  1                  cover=xcover_fixed(is,imm,ivegm)
 7840.  1                  tph1=xph1         (is,ivegm)
 7841.  1                  tph2=xph2         (is,ivegm)
 7842.  1                  !
 7843.  1                  !                                                     m^3
 7844.  1                  ! sibmax(is) =(Z1 + Z2 + Z3) * poros = [m + m + m] * ----- = m = Os
 7845.  1                  !                                                     m^3
 7846.  1                  !
 7847.  1                  sibmax(is) = ( tzdep(1) + tzdep(2) + tzdep(3) ) * tporos
 7848.  1                  !
 7849.  1                  IF(nfctrl(83).GE.1)WRITE(UNIT=nfprt,FMT=999)is,sibmax(is),tzdep(1), &
 7850.  1                       tzdep(2),tzdep(3),tporos
 7851.  1                  !
 7852.  1                  !            bee      = soil moisture potential factor
 7853.  1                  !            phsat    = soil potential at saturation   (m)
 7854.  1                  !
 7855.  1                  !                   --              --
 7856.  1                  !                  | log ( - tphsat/1)|
 7857.  1                  !  O  = Os * EXP * | -----------------|
 7858.  1                  !                  |        b         |
 7859.  1                  !                   --              --
 7860.  1                  !
 7861.  1                  sref = sibmax(is) * EXP( LOG(tphsat /(-1.0e0_r8)) /tbee)
 7862.  1                  !                   --                          --
 7863.  1                  !                  | log ( - tphsat/(-1.0e10) )   |
 7864.  1                  !Omin = Os * EXP * | -----------------------------|
 7865.  1                  !                  |              b               |
 7866.  1                  !                   --                          --
 7867.  1                  !
 7868.  1                  smin    = sibmax(is) * EXP( LOG(tphsat /(-1.0e10_r8)) / tbee)
 7869.  1                  !
 7870.  1                  !             O - Omin
 7871.  1                  !dssib  = ------------------
 7872.  1                  !              mxiter
 7873.  1                  !
 7874.  1                  dssib   = (sref - smin) / REAL(mxiter,r8)
 7875.  1                  !
 7876.  1                  !              O - Omin
 7877.  1                  ! dw    =  ------------------
 7878.  1                  !             mxiter*Os
 7879.  1                  !
 7880.  1                  dw      = dssib / sibmax(is)
 7881.  1                  !
 7882.  1                  times   = 0.0e0_r8
 7883.  1                  soilmo  = sref
 7884.  1                  !
 7885.  1                  !       O
 7886.  1                  ! w = -----
 7887.  1                  !       Os
 7888.  1                  !
 7889.  1                  w = soilmo / sibmax(is)
 7890.  1                  !
 7891.  1                  !                      --             --
 7892.  1                  !                     |       0.0027    |
 7893.  1                  !rsoilm  = 101840.0 * |1.0 - w          |
 7894.  1                  !                     |                 |
 7895.  1                  !                      --             --
 7896.  1                  !
 7897.  1                  rsoilm  = 101840.0_r8 * (1.0_r8 - w**0.0027_r8)
 7898.  1 2-------<        DO iter = 1, mxiter
 7899.  1 2  I                CALL extrak( w   ,dw  ,tbee,tphsat, rsoilm, cover, &
 7900.  1 2                        tph1,tph2,psit,factor )
 7901.  1 2                   !
 7902.  1 2                   !       dssib
 7903.  1 2                   !dt = ----------
 7904.  1 2                   !       factor
 7905.  1 2                   !
 7906.  1 2                   dt            = dssib  / factor
 7907.  1 2                   !
 7908.  1 2                   soilmo        = soilmo - dssib
 7909.  1 2                   !
 7910.  1 2                   !       O
 7911.  1 2                   ! w = -----
 7912.  1 2                   !       Os
 7913.  1 2                   !
 7914.  1 2                   w             = soilmo / sibmax(is)
 7915.  1 2                   times         = times  + dt
 7916.  1 2                   sm  (is,iter) = soilmo
 7917.  1 2                   time(is,iter) = times
 7918.  1 2                   fact(is,iter) = factor
 7919.  1 2------->        END DO
 7920.  1           
 7921.  1--------->     END DO
 7922.                  !
 7923.                  !     input soil moisture map is now transformed to sib fields.
 7924.                  !
 7925.  1---------<     DO lat = 1, latmax
 7926.  1 2-------<        DO lon = 1, ibMaxPerJB(lat)
 7927.  1 2                   is=imask(lon,lat)
 7928.  1 2                   IF(is.NE.0)THEN
 7929.  1 2                      tsinp = sinp(lon,lat)
 7930.  1 2                      tsinp = MAX (sinmax/100.0e3_r8 , tsinp )
 7931.  1 2                      tsinp = MIN (sinmax,tsinp)
 7932.  1 2                      IF (tsinp .GT. 0.75e0_r8*sinmax ) etp = sinmax - tsinp
 7933.  1 2                      facmod=MIN(1.0e0_r8,tsinp/(0.75e0_r8*sinmax) )
 7934.  1 2                      IF (tsinp .LE. 0.75e0_r8*sinmax ) THEN
 7935.  1 2                         etp = 0.75e0_r8*sinmax*LOG(0.75e0_r8*sinmax/tsinp ) + 0.25e0_r8*sinmax
 7936.  1 2                      END IF
 7937.  1 2                      etp = etp / 1000.0e0_r8
 7938.  1 2 3-----<              DO iter = 1, mxiter
 7939.  1 2 3                       itsoil=iter
 7940.  1 2 3                       IF ( time(is,iter) - etp .GT. 0.0e0_r8  ) EXIT
 7941.  1 2 3----->              END DO
 7942.  1 2 3-----<              DO iter=1,mxiter
 7943.  1 2 3                       itfac=iter
 7944.  1 2 3                       IF( fact(is,iter)-facmod-0.01e0_r8.LT.0.0e0_r8)EXIT
 7945.  1 2 3----->              END DO
 7946.  1 2                      ssibt=MIN(sm(is,itsoil),sm(is,itfac))
 7947.  1 2 3-----<              DO iter=1,mxiter
 7948.  1 2 3                       IF(ssibt.GT.sm(is,iter))EXIT
 7949.  1 2 3----->              END DO
 7950.  1 2                      ssib(lon,lat) = sm(is,iter)
 7951.  1 2                      !
 7952.  1 2                      !          O
 7953.  1 2                      ! wsib = -----
 7954.  1 2                      !         Os
 7955.  1 2                      !
 7956.  1 2                      wsib(lon,lat) = sm(is,iter) / sibmax(is)
 7957.  1 2                   END IF
 7958.  1 2------->        END DO
 7959.  1--------->     END DO
 7960.              999 FORMAT(' IS,MAX,D1,D2,D3,POROS=',I2,1X,5E12.5)
 7961.                END SUBROUTINE sibwet
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7961 
  Local variable "LONMAX" is assigned a value but never used.

 7962.              
 7963.              
 7964.              
 7965.                SUBROUTINE sibwet_GLSM (ibMax          , & ! IN
 7966.                     jbMax          , & ! IN
 7967.                     imask          , & ! IN
 7968.                     wsib           , & ! IN
 7969.                     ssib           , & ! IN
 7970.                     mxiter         , & ! OUT
 7971.                     ibMaxPerJB     , & ! OUT
 7972.                     soilm          , & ! in
 7973.                     nzg         , & ! in
 7974.                     wsib3d         , & ! OUT
 7975.                     glsm_w)            ! IN
 7976.              
 7977.                  !
 7978.                  ! $Author: pkubota $
 7979.                  ! $Date: 2009/03/03 16:36:38 $
 7980.                  ! $Revision: 1.14 $
 7981.                  !
 7982.                  ! sibwet :transform mintz-serafini and national meteoroLOGICAL center fields
 7983.                  !         of soil moisture into sib compatible fields of soil moisture.
 7984.                  !
 7985.                  !     piers sellers : 29 april 1987
 7986.                  !
 7987.                  INTEGER, INTENT(IN   )            :: ibMax
 7988.                  INTEGER, INTENT(IN   )            :: jbMax
 7989.                  INTEGER, INTENT(IN   )            :: mxiter
 7990.                  REAL(KIND=r8)   , INTENT(OUT  )            :: soilm          (ibMax,jbMax)
 7991.                  INTEGER(KIND=i8), INTENT(IN   )            :: imask          (ibMax,jbMax)
 7992.                  REAL(KIND=r8)   , INTENT(OUT  )            :: wsib           (ibMax,jbMax)
 7993.                  REAL(KIND=r8)   , INTENT(OUT  )            :: ssib           (ibMax,jbMax)
 7994.                  INTEGER, INTENT(in   )            :: ibMaxPerJB     (:)
 7995.                  INTEGER, INTENT(in   )            :: nzg
 7996.                  REAL(KIND=r8)   , INTENT(OUT  )            :: wsib3d    (ibMax,jbMax,3       )
 7997.                  REAL(KIND=r8)   , INTENT(IN   )            :: glsm_w    (ibMax,jbMax,nzg     )
 7998.              
 7999.                  REAL(KIND=r8)               :: sm  (ityp,mxiter)
 8000.                  REAL(KIND=r8)               :: time(ityp,mxiter)
 8001.                  REAL(KIND=r8)               :: fact(ityp,mxiter)
 8002.                  !
 8003.                  !-srf
 8004.                  !
 8005.                  INTEGER, PARAMETER :: nzgmax=20
 8006.                  REAL(KIND=r8)               :: glsm_w1d  (0:nzgmax)     ! dummy 1d initial soil  wetness
 8007.                  REAL(KIND=r8)               :: glsm_tzdep(0:3)          ! sib soil levels
 8008.                  REAL(KIND=r8)               :: glsm_w_sib(0:3)          ! SIB dummy 1d initial and interpolated soil  wetness
 8009.                  !
 8010.                  !-srf
 8011.                  !
 8012.                  REAL(KIND=r8)               :: tzdep (3)
 8013.                  REAL(KIND=r8)               :: tzltm (2)
 8014.                  REAL(KIND=r8)               :: sibmax(ityp)
 8015.                  INTEGER            :: k
 8016.                  REAL(KIND=r8)               :: fx
 8017.                  INTEGER            :: lonmax
 8018.                  INTEGER            :: latmax
 8019.                  INTEGER            :: is
 8020.                  REAL(KIND=r8)               :: tphsat
 8021.                  REAL(KIND=r8)               :: tbee
 8022.                  REAL(KIND=r8)               :: tporos
 8023.                  INTEGER            :: imm1
 8024.                  INTEGER            :: imm2
 8025.                  INTEGER            :: im
 8026.                  INTEGER            :: imm
 8027.                  INTEGER            :: ivegm
 8028.                  REAL(KIND=r8)               :: cover
 8029.                  REAL(KIND=r8)               :: tph1
 8030.                  REAL(KIND=r8)               :: tph2
 8031.                  REAL(KIND=r8)               :: sref
 8032.                  REAL(KIND=r8)               :: smin
 8033.                  REAL(KIND=r8)               :: dssib
 8034.                  REAL(KIND=r8)               :: dw
 8035.                  REAL(KIND=r8)               :: times
 8036.                  REAL(KIND=r8)               :: soilmo
 8037.                  REAL(KIND=r8)               :: w
 8038.                  REAL(KIND=r8)               :: rsoilm
 8039.                  INTEGER            :: iter
 8040.                  REAL(KIND=r8)               :: psit
 8041.                  REAL(KIND=r8)               :: factor
 8042.                  REAL(KIND=r8)               :: dt
 8043.                  INTEGER            :: lat
 8044.                  INTEGER            :: lon
 8045.              
 8046.                  !
 8047.                  !              wsinp    = m-s or nmc fractional wetness
 8048.                  !              ms       = 1, mintz-serafini
 8049.                  !              nmc      = 1, national meteoroLOGICAL center
 8050.                  !              bee      = sib : soil moisture potential factor
 8051.                  !              phsat     = sib : soil potential at saturation (m)
 8052.                  !              zdepth(3)= sib : depth of 3 soil layers (m)
 8053.                  !              poros    = sib : soil porosity
 8054.                  !              ph1      = sib : leaf potential, stress onset (m)
 8055.                  !              ph2      = sib : leaf potential, no e-t (m)
 8056.                  !
 8057.                  !   output :   wsibt    = sib : fractional wetness
 8058.                  !              ssibt    = sib : soil moisture content (m)
 8059.                  !              psit     = sib : soil moisture potential (m)
 8060.                  !              factor   = sib : extraction factor
 8061.                  !
 8062.                  REAL(KIND=r8), PARAMETER :: xph1(13,2) = RESHAPE( &
 8063.                       (/-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8,-120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8, &
 8064.                       -200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8,-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8, &
 8065.                       -120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8,-200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8/), &
 8066.                       (/13,2/))
 8067.                  REAL(KIND=r8), PARAMETER :: xph2(13,2) = RESHAPE( &
 8068.                       (/-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8, &
 8069.                       -400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8,-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8, &
 8070.                       -230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8,-400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8/) , &
 8071.                       (/13,2/))
 8072.              
 8073.                  !-srf
 8074.                  !hmjb
 8075.                  !    REAL, PARAMETER :: glsm_slz(0:nzgmax) = (/  0., 0.1, 0.25, 0.5, 1., 2., 3.,& !7  values
 8076.                  !         0., 0.,  0.,   0.,  0., 0., 0., 0., 0., 0.,& !10 values
 8077.                  !         0., 0.,  0.,   0.                         /) !4  values
 8078.                  !versao para NZG=8 => 9 niveis no MCGA
 8079.                  REAL(KIND=r8), PARAMETER :: glsm_slz(0:nzgmax) = (/  0.0_r8, 0.05_r8, 0.13_r8, 0.25_r8, 0.5_r8, 1.0_r8, 1.75_r8,& !9  values
 8080.                       2.5_r8, 4.5_r8,  0.0_r8,   0.0_r8,  0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8,& !10 values
 8081.                       0.0_r8, 0.0_r8,  0.0_r8,   0.0_r8                         /) !4  values
 8082.                  !-srf
 8083.                  sm =0.0_r8
 8084.                  time  =0.0_r8
 8085.                  fact  =0.0_r8
 8086.  Vf-------<>     ssib  =0.0_r8
 8087.  f--------<>     wsib  =0.0_r8
 8088.              
 8089.                  lonmax=ibMax
 8090.                  latmax=jbMax
 8091.              
 8092.  1---------<     DO is = 1,ityp
 8093.  1                  tzdep (1)= zdepth(is,1)
 8094.  1                  tzdep (2)= zdepth(is,2)
 8095.  1                  tzdep (3)= zdepth(is,3)
 8096.  1                  tphsat   = phsat (is)
 8097.  1                  tbee     = bee   (is)
 8098.  1                  tporos   = poros (is)
 8099.  1                  imm1=1
 8100.  1                  imm2=1
 8101.  1                  tzltm(1)=zlt_fixed(is,1,1)
 8102.  1                  tzltm(2)=zlt_fixed(is,1,2)
 8103.  1 D-------<        DO im=2,12
 8104.  1 D                   IF (tzltm(1).le.zlt_fixed(is,im,1) ) THEN
 8105.  1 D                      imm1=im
 8106.  1 D                      tzltm(1)=zlt_fixed(is,im,1)
 8107.  1 D                   END IF
 8108.  1 D         
 8109.  1 D                   IF (tzltm(2).le.zlt_fixed(is,im,2) ) THEN
 8110.  1 D                      imm2=im
 8111.  1 D                      tzltm(2)=zlt_fixed(is,im,2)
 8112.  1 D                   END IF
 8113.  1 D------->        END DO
 8114.  1           
 8115.  1                  imm=imm1
 8116.  1                  ivegm=1
 8117.  1           
 8118.  1                  IF (tzltm(1).le.tzltm(2)) THEN
 8119.  1                     imm=imm2
 8120.  1                     ivegm=2
 8121.  1                  END IF
 8122.  1                  cover=xcover_fixed(is,imm,ivegm)
 8123.  1                  tph1=xph1(is,ivegm)
 8124.  1                  tph2=xph2(is,ivegm)
 8125.  1                  !
 8126.  1                  !srf- max water content
 8127.  1                  !
 8128.  1                  sibmax(is) = ( tzdep(1) + tzdep(2) + tzdep(3) ) * tporos
 8129.  1                  IF (nfctrl(83).ge.1) WRITE(UNIT=nfprt,FMT=999)is,sibmax(is),tzdep(1), &
 8130.  1                       tzdep(2),tzdep(3),tporos
 8131.  1                  sref = sibmax(is) * exp( log(tphsat /(-1.0e0_r8)) /tbee )
 8132.  1                  smin = sibmax(is) * exp( log(tphsat /(-1.0e10_r8)) /tbee )
 8133.  1                  dssib= (sref - smin) / REAL(mxiter,r8)
 8134.  1                  dw   = dssib / sibmax(is)
 8135.  1                  times  = 0.0e0_r8
 8136.  1                  soilmo = sref
 8137.  1                  w      = soilmo / sibmax(is)
 8138.  1                  rsoilm = 101840.0_r8 * (1.0_r8 - w**0.0027_r8)
 8139.  1           
 8140.  1 D-------<        DO iter = 1, mxiter
 8141.  1 D  I                CALL extrak      ( w     , &  ! IN
 8142.  1 D                        dw    , &  ! IN
 8143.  1 D                        tbee  , &  ! IN
 8144.  1 D                        tphsat, &  ! IN
 8145.  1 D                        rsoilm, &  ! IN
 8146.  1 D                        cover , &  ! IN
 8147.  1 D                        tph1  , &  ! IN
 8148.  1 D                        tph2  , &  ! IN
 8149.  1 D                        psit  , &  ! OUT
 8150.  1 D                        factor  )  ! OUT
 8151.  1 D                   dt            = dssib / factor
 8152.  1 D                   soilmo        = soilmo - dssib
 8153.  1 D                   w             = soilmo / sibmax(is)
 8154.  1 D                   times         = times + dt
 8155.  1 D                   sm  (is,iter) = soilmo
 8156.  1 D                   time(is,iter) = times
 8157.  1 D                   fact(is,iter) = factor
 8158.  1 D------->        END DO
 8159.  1--------->     END DO
 8160.                  !
 8161.                  !     input soil moisture map is now transformed to sib fields.
 8162.                  !
 8163.  1---------<     DO lat = 1, latmax
 8164.  1 2-------<        DO lon = 1, ibMaxPerJB(lat)
 8165.  1 2         
 8166.  1 2                   wsib3d(lon,lat,:) = 0.e0_r8
 8167.  1 2         
 8168.  1 2                   is=imask(lon,lat)
 8169.  1 2                   IF (is.ne.0) THEN
 8170.  1 2         
 8171.  1 2                      tzdep (1)= zdepth(is,1)
 8172.  1 2                      tzdep (2)= zdepth(is,2)
 8173.  1 2                      tzdep (3)= zdepth(is,3)
 8174.  1 2                      tphsat   = phsat (is)
 8175.  1 2                      tbee     = bee   (is)
 8176.  1 2                      tporos   = poros (is)
 8177.  1 2                      !
 8178.  1 2                      !-sib soil levels
 8179.  1 2                      !
 8180.  1 2                      glsm_tzdep(0) = 0.e0_r8
 8181.  1 2                      glsm_w_sib(0) = 0.e0_r8
 8182.  1 2         
 8183.  1 2 3-----<              DO k=1,3
 8184.  1 2 3                       glsm_tzdep (k) = zdepth(is,k) + glsm_tzdep (k-1)
 8185.  1 2 3                       glsm_w_sib (k) = 0.e0_r8
 8186.  1 2 3----->              END DO
 8187.  1 2                      !
 8188.  1 2                      !- copy 3d soil moisture array to 1d column array
 8189.  1 2                      !
 8190.  1 2 Vp----<              DO k=1,nzg
 8191.  1 2 Vp                      glsm_w1d(k)=glsm_w(lon,lat,k)
 8192.  1 2 Vp---->              END DO
 8193.  1 2                      !
 8194.  1 2                      !- performs vertical interpolation from soil moisture
 8195.  1 2                      !  levels to sib levels
 8196.  1 2                      !
 8197.  1 2 V I--->              CALL vert_interp(4               , &  ! IN
 8198.  1 2                           nzg+1           , &  ! IN
 8199.  1 2                           glsm_tzdep(0:3) , &  ! IN
 8200.  1 2                           glsm_slz(0:nzg) , &  ! IN
 8201.  1 2                           glsm_w1d(0:nzg) , &  ! IN
 8202.  1 2                           glsm_w_sib(0:3)  )   ! OUT
 8203.  1 2         
 8204.  1 2         
 8205.  1 2                      !endif
 8206.  1 2                      !
 8207.  1 2                      !- stores 1d sib soil moisture at 3d array
 8208.  1 2                      !
 8209.  1 2 Vpf---<              DO k=1,3
 8210.  1 2 Vpf                     wsib3d(lon,lat,k) = glsm_w_sib(k)
 8211.  1 2 Vpf--->              END DO
 8212.  1 2                      !
 8213.  1 2                      !------------------------- remove this later--------------------------------X
 8214.  1 2                      !- for now fix zero soil moisture inside the land
 8215.  1 2                      !- latter fix this at soil moisture original data
 8216.  1 2                      !
 8217.  1 2                      !IF (imask(lon,lat) > 0 ) THEN
 8218.  1 2                      !   ssm=0.
 8219.  1 2                      !   DO k=1,3
 8220.  1 2                      !      ssm=ssm+wsib3d(lon,lat,k)
 8221.  1 2                      !   END DO
 8222.  1 2                      !
 8223.  1 2                      !   IF (ssm < 0.15) THEN
 8224.  1 2                      !      !
 8225.  1 2                      !      !print*,'SM null inside land portion', imask(lon,lat)
 8226.  1 2                      !      !print*,'1',lon,lat,wsib3d(lon,lat,:)
 8227.  1 2                      !      !
 8228.  1 2                      !      ssm1d(:) = 0.
 8229.  1 2                      !      ncount = 0
 8230.  1 2                      !      DO i=max(1,lon-4),min(lonmax,lon+4)
 8231.  1 2                      !         DO j=max(1,lat-4),min(latmax,lat+4)
 8232.  1 2                      !    IF (imask(i,j) > 0) THEN !only points inside the land
 8233.  1 2                      !       ssm=0.
 8234.  1 2                      !       DO k=1,3
 8235.  1 2                      !  ssm=ssm+wsib3d(i,j,k)
 8236.  1 2                      !       END DO
 8237.  1 2                      !
 8238.  1 2                      !       IF (ssm > 0.15) THEN
 8239.  1 2                      !  ncount=ncount  + 1
 8240.  1 2                      !  ssm1d(:) = ssm1d(:) + wsib3d(i,j,:)
 8241.  1 2                      !       END IF
 8242.  1 2                      !    END IF
 8243.  1 2                      !         END DO
 8244.  1 2                      !      END DO
 8245.  1 2                      !
 8246.  1 2                      !     IF (ncount > 1) THEN
 8247.  1 2                      !         wsib3d(lon,lat,:)=ssm1d(:)/float(ncount)
 8248.  1 2                      !      ELSE
 8249.  1 2                      !         wsib3d(lon,lat,:)=0.5
 8250.  1 2                      !      END IF
 8251.  1 2                      !      !
 8252.  1 2                      !      !print*,'2',lon,lat,wsib3d(lon,lat,:)
 8253.  1 2                      !      !
 8254.  1 2                      !   END IF
 8255.  1 2                      !END IF
 8256.  1 2                      !
 8257.  1 2                      !-----------------------------------------------------------------------------X
 8258.  1 2                      !
 8259.  1 2                      ssib(lon,lat) = 0.0_r8
 8260.  1 2                      wsib(lon,lat) = 0.0_r8
 8261.  1 2         
 8262.  1 2 f-----<              DO k=1,3
 8263.  1 2 f       
 8264.  1 2 f                       fx            = ( glsm_tzdep(k)-glsm_tzdep(k-1) ) / glsm_tzdep(3)
 8265.  1 2 f                       wsib(lon,lat) = wsib(lon,lat) + glsm_w_sib(k) * fx
 8266.  1 2 f                       ssib(lon,lat) = ssib(lon,lat) + glsm_w_sib(k) * fx * tporos
 8267.  1 2 f       
 8268.  1 2 f----->              END DO
 8269.  1 2                      !
 8270.  1 2                      ! total water in mm
 8271.  1 2                      !
 8272.  1 2                      soilm(lon,lat) = ( tzdep(1)*wsib3d(lon,lat,1) + &
 8273.  1 2                           tzdep(2)*wsib3d(lon,lat,2) + &
 8274.  1 2                           tzdep(3)*wsib3d(lon,lat,3) ) * tporos
 8275.  1 2                      !
 8276.  1 2                   END IF
 8277.  1 2------->        END DO
 8278.  1--------->     END DO
 8279.              999 FORMAT(' IS,MAX,D1,D2,D3,POROS=',I2,1X,5E12.5)
 8280.                END SUBROUTINE sibwet_GLSM
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8280 
  Local variable "FACT" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8280 
  Local variable "LONMAX" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8280 
  Local variable "SM" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8280 
  Local variable "TIME" is assigned a value but never used.

 8281.              
 8282.                SUBROUTINE extrak( w, dw, tbee, tphsat, rsoilm, cover, tph1, tph2, &
 8283.                     psit, factor )
 8284.                  REAL(KIND=r8), INTENT(in   ) :: w
 8285.                  REAL(KIND=r8), INTENT(in   ) :: dw
 8286.                  REAL(KIND=r8), INTENT(in   ) :: tbee
 8287.                  REAL(KIND=r8), INTENT(in   ) :: tphsat
 8288.                  REAL(KIND=r8), INTENT(in   ) :: rsoilm
 8289.                  REAL(KIND=r8), INTENT(in   ) :: cover
 8290.                  REAL(KIND=r8), INTENT(in   ) :: tph1
 8291.                  REAL(KIND=r8), INTENT(in   ) :: tph2
 8292.                  REAL(KIND=r8), INTENT(inout  ) :: psit
 8293.                  REAL(KIND=r8), INTENT(inout  ) :: factor
 8294.                  REAL(KIND=r8) :: rsoil
 8295.                  REAL(KIND=r8) :: argg
 8296.                  REAL(KIND=r8) :: hr
 8297.                  REAL(KIND=r8) :: rplant
 8298.                  !                --     -- (-b)
 8299.                  !               |      dw |                  0
 8300.                  ! psit = PHYs * | w - --- |      where w = -----
 8301.                  !               |      2  |                  0s
 8302.                  !                --     --
 8303.                  psit   = tphsat * ( w-dw/2.0e0_r8 ) ** (-tbee)
 8304.                  !
 8305.                  !                      --                        --
 8306.                  !                     |       --     -- (0.0027)   |
 8307.                  !                     |      |      dw |           |
 8308.                  !rsoil   = 101840.0 * |1.0 - | w - --- |           |
 8309.                  !                     |      |      2  |           |
 8310.                  !                     |       --     --            |
 8311.                  !                      --                        --
 8312.                  !
 8313.                  rsoil  = 101840.0_r8 * (1.0_r8-( w-dw/2.0_r8) ** 0.0027_r8)
 8314.                  !
 8315.                  !                9.81       1
 8316.                  !argg = psit * -------- * -------
 8317.                  !               461.50     310.0
 8318.                  !
 8319.                  argg   = MAX ( -10.0e0_r8 , ((psit * 9.81e0_r8 / 461.5e0_r8) / 310.e0_r8))
 8320.                  !
 8321.                  !            --                       --
 8322.                  !           |         9.81       1      |
 8323.                  !hr   = EXP |psit * -------- * -------  |
 8324.                  !           |        461.50     310.0   |
 8325.                  !            --                       --
 8326.                  !
 8327.                  hr     = EXP ( argg )
 8328.                  !
 8329.                  !         rsoilm
 8330.                  ! rsoil =--------- * hr
 8331.                  !         rsoil
 8332.                  !
 8333.                  rsoil  = rsoilm /rsoil * hr
 8334.                  !
 8335.                  !          ( psit - tph2 - 50.0)
 8336.                  !rplant = -------------------------
 8337.                  !             ( tph1 - tph2 )
 8338.                  !
 8339.                  rplant = ( psit - tph2 -50.0_r8) / ( tph1 - tph2 )
 8340.                  rplant = MAX ( 0.0e0_r8, MIN ( 1.0e0_r8, rplant ) )
 8341.                  !                                                                     --                   --
 8342.                  !                  --                 --                             |     --     -- (0.0027)|
 8343.                  !                 |( psit - tph2 - 50)  |                            |    |      dw |        |
 8344.                  !factor = cover * |---------------------| + (1 - cover) * 101840.0 * |1 - | w - --- |        |
 8345.                  !                 |   ( tph1 - tph2 )   |                            |    |      2  |        |
 8346.                  !                  --                 --                             |     --     --         |
 8347.                  !                                                                     --                   --
 8348.                  factor = cover * rplant + ( 1.0e0_r8 - cover ) * rsoil
 8349.                  factor = MAX ( 1.e-6_r8, factor )
 8350.                END SUBROUTINE extrak
 8351.                !
 8352.                !------------------------------------------------------------
 8353.                !
 8354.                SUBROUTINE vert_interp(nsib      , & ! IN
 8355.                     nzg       , & ! IN
 8356.                     tzdep     , & ! IN
 8357.                     glsm_slz  , & ! IN
 8358.                     gl_sm     , & ! IN
 8359.                     glsm_w_sib  ) ! OUT
 8360.              
 8361.                  INTEGER, INTENT(IN   ) :: nsib
 8362.                  INTEGER, INTENT(IN   ) :: nzg
 8363.                  REAL(KIND=r8)   , INTENT(IN   ) :: tzdep     (nsib)
 8364.                  REAL(KIND=r8)   , INTENT(IN   ) :: glsm_slz  (: )
 8365.                  REAL(KIND=r8)   , INTENT(IN   ) :: gl_sm     (: )
 8366.                  REAL(KIND=r8)   , INTENT(OUT  ) :: glsm_w_sib(nsib)
 8367.              
 8368.                  REAL(KIND=r8)    :: zm        (nsib)
 8369.                  REAL(KIND=r8)    :: wf        (nsib)
 8370.                  REAL(KIND=r8)    :: zc        (nzg )
 8371.                  REAL(KIND=r8)    :: wi        (nzg )
 8372.                  REAL(KIND=r8)    :: dzlft
 8373.                  INTEGER :: ZDM
 8374.                  INTEGER :: k
 8375.                  INTEGER :: kstart
 8376.                  INTEGER :: L
 8377.              
 8378.  Vpf-------<     DO k=1,nzg
 8379.  Vpf                zc(k)=glsm_slz(k)
 8380.  Vpf------->     END DO
 8381.              
 8382.  Vf--------<     DO k=1,nsib
 8383.  Vf                 zm(k)=tzdep(k)
 8384.  Vf-------->     END DO
 8385.              
 8386.                  zdm=nsib
 8387.                  KSTART=3
 8388.                  !
 8389.                  ! Transfere valores da grade de MAIOR resolucao (WI)
 8390.                  !                     para a grade de MENOR resolucao (WF)
 8391.                  !
 8392.                  ! OS valores de WI devem estar definidos nos pontos de grade ZCS=zc/2
 8393.                  ! OS valores de WF saem nos niveis ZMS = ZM/2
 8394.                  !
 8395.                  !
 8396.                  !
 8397.                  !    Dados da grade de maior resolucao
 8398.                  !
 8399.  f---------<     DO K=1,NZG
 8400.  f                  WI(K) = gl_sm(k)
 8401.  f                  !print*,'wi=',k,wi(k)
 8402.  f--------->     END DO
 8403.                  !
 8404.                  !     Dado interpolado
 8405.                  !
 8406.  f--------<>     wf(:)=0.0_r8
 8407.                  !
 8408.                  !     Valor de superficie:
 8409.                  !
 8410.                  WF(1)=WI(2)
 8411.                  WF(2)=WI(2)
 8412.                  !
 8413.                  !
 8414.                  DZLFT=0.0_r8
 8415.                  L=2
 8416.  1---------<     DO K=KSTART,ZDM
 8417.  1                  !
 8418.  1                  !    if(k==4) print*,'0',l,WF(K),WI(L),DZLFT
 8419.  1                  !
 8420.  1                  IF(DZLFT.NE.0.0_r8) THEN
 8421.  1           
 8422.  1                     WF(K)=WF(K)+WI(L)*DZLFT
 8423.  1                     !    if(k==4) print*,'1',l,WF(K),WI(L),DZLFT
 8424.  1                     L=L+1
 8425.  1           
 8426.  1                  END IF
 8427.  1           
 8428.  1           70     CONTINUE
 8429.  1           
 8430.  1                  IF(ZC(L).LE.ZM(K)) THEN
 8431.  1           
 8432.  1                     WF(K)=WF(K)+WI(L)*(ZC(L)-ZC(L-1))
 8433.  1           
 8434.  1                     !   if(k==4) print*,'2',l,WF(K),WI(L),ZC(L),zm(k)
 8435.  1           
 8436.  1                     L=L+1
 8437.  1                     DZLFT=0.0_r8
 8438.  1                     IF (L>nzg) GO TO 1000
 8439.  1                     GO TO 70
 8440.  1                  ELSE
 8441.  1           
 8442.  1                     WF(K)=WF(K)+WI(L)*(ZM(K)-ZC(L-1))
 8443.  1                     DZLFT=ZC(L)-ZM(K)
 8444.  1                  ENDIF
 8445.  1--------->     ENDDO
 8446.              
 8447.              1000 CONTINUE
 8448.              
 8449.  1---------<     DO K=KSTART,ZDM
 8450.  1                  !
 8451.  1                  !   WF(K) =WF(K)/(ZM(K)-ZM(K-1))
 8452.  1                  !         if(k==4)print*,zm(k),zc(nzg),ZM(K-1),WF(K)
 8453.  1                  !
 8454.  1                  IF (ZM(K) > ZC(nzg)) THEN
 8455.  1                     WF(K) = WF(K)/(ZC(NZG)-ZM(K-1))
 8456.  1                  ELSE
 8457.  1                     WF(K)  = WF(K)/(ZM(K)-ZM(K-1))
 8458.  1                  END IF
 8459.  1--------->     END DO
 8460.                  !
 8461.                  !valores na grade do SIB
 8462.                  !
 8463.  V---------<     DO k=1,nsib
 8464.  V                  glsm_w_sib(k)=WF(k)
 8465.  V                  !print*,'SIB',k,glsm_w_sib(k)
 8466.  V--------->     END DO
 8467.                  !
 8468.                  !check conservacao
 8469.                  !srf - verifique se a integral de ambos calculos percorrem
 8470.                  !srf - o mesmo intervalo
 8471.                  !      print*,'        '
 8472.                  !      sumf=0.0_r8
 8473.                  !      DO K=2,ZDM
 8474.                  !       sumf=sumf+wf(k)*(ZM(K)-ZM(K-1))
 8475.                  !       print*,sumf,wf(k),zm(k),ZM(K)-ZM(K-1)
 8476.                  !      ENDDO
 8477.                  !      print*,'--------sumf-----',sumf
 8478.                  !      sumi=0.0_r8
 8479.                  !      DO K=2,nzg
 8480.                  !       sumi=sumi+wi(k)*(glsm_slz(K)-glsm_slz(K-1))
 8481.                  !       print*,k,sumi,wi(k),glsm_slz(K),(glsm_slz(K)-glsm_slz(K-1))
 8482.                  !      ENDDO
 8483.                  !      print*,'--------sumi-----',sumi, 100*(sumf-sumi)/sumi
 8484.                  !
 8485.                  RETURN
 8486.                END SUBROUTINE vert_interp
 8487.              END MODULE SFC_SSiB

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 454 
  A loop starting at line 454 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 455 
  A loop starting at line 455 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 473 
  A loop starting at line 473 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 496 
  A loop starting at line 496 was not vectorized because it contains a reference to a non-vector intrinsic on line 532.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 498 
  A loop starting at line 498 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 529 
  A loop starting at line 529 was not vectorized because it contains a reference to a non-vector intrinsic on line 532.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 530 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 538 
  Routine ROOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 538 
  Routine FYSIKS was not inlined because the call nest is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 569 
  A loop starting at line 569 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 587 
  A loop starting at line 587 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 603 
  A loop starting at line 603 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 612 
  A loop starting at line 612 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 618 
  A loop starting at line 618 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 624 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 635 
  A loop starting at line 635 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 661 
  Routine ROOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 661 
  Routine FYSIKS was not inlined because the call nest is too large to expand. 

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 695 
  A loop starting at line 695 was vectorized.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 700 
  Routine SEXTRP was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 707 
  A loop starting at line 707 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 719 
  A loop starting at line 719 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 735 
  A loop starting at line 735 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 743 
  Routine SEASFC was not inlined because the call nest is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 757 
  A loop starting at line 757 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 800 
  A loop starting at line 800 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 801 
  A loop starting at line 801 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 802 
  A loop starting at line 802 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 803 
  A loop starting at line 803 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 804 
  A loop starting at line 804 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 805 
  A loop starting at line 805 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 806 
  A loop starting at line 806 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 807 
  A loop starting at line 807 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 808 
  A loop starting at line 808 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 809 
  A loop starting at line 809 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 810 
  A loop starting at line 810 was vectorized.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 811 
  A loop starting at line 811 was not vectorized for an unspecified reason.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 812 
  A loop starting at line 812 was partially vectorized.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 828 
  Routine WHEAT was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 897 
  A loop starting at line 897 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 903 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1167 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1170 
  A loop starting at line 1170 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1172 
  A loop starting at line 1172 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1262 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1263 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1274 
  A loop starting at line 1274 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1284 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1295 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1396 
  A loop starting at line 1396 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1403 
  A loop starting at line 1403 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1463 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1471 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1529 
  A loop starting at line 1529 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1753 
  A loop starting at line 1753 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1757 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1759 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1763 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1766 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1772 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1784 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1789 
  A loop starting at line 1789 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1810 
  A loop starting at line 1810 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1841 
  A loop starting at line 1841 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1951 
  A loop starting at line 1951 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1966 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2051 
  A loop starting at line 2051 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2058 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2213 
  A loop starting at line 2213 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2225 
  A loop starting at line 2225 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2228 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2252 
  A loop starting at line 2252 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2269 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2291 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2416 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2417 
  A loop starting at line 2417 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2421 
  A loop starting at line 2421 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2427 
  A loop starting at line 2427 was not vectorized for an unspecified reason.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2428 
  A loop starting at line 2428 was partially vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2436 
  A loop starting at line 2436 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2460 
  A divide was turned into a multiply by a reciprocal

ftn-6383 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2481 
  A loop starting at line 2481 requires an estimated 14 vector registers at line 2624; 2 of these have been preemptively forced to
  memory.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2481 
  A loop starting at line 2481 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2512 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2520 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2546 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2554 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2610 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2615 
  A divide was turned into a multiply by a reciprocal

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2786 
  A loop starting at line 2786 was eliminated by optimization.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2792 
  A loop starting at line 2792 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2805 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2849 
  A loop starting at line 2849 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2853 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2858 
  A loop starting at line 2858 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3024 
  A loop starting at line 3024 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3042 
  A loop starting at line 3042 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3052 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3055 
  A loop starting at line 3055 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3064 
  A loop starting at line 3064 was fused with the loop starting at line 3042.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3070 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3073 
  A loop starting at line 3073 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3080 
  A loop starting at line 3080 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3086 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3089 
  A loop starting at line 3089 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3445 
  A loop starting at line 3445 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3446 
  A loop starting at line 3446 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3459 
  A loop starting at line 3459 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3459 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3459 
  The call to AIRMOD was textually inlined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3465 
  A loop starting at line 3465 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3472 
  A loop starting at line 3472 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3528 
  A loop starting at line 3528 was not vectorized because it contains a reference to a non-vector intrinsic on line 3557.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3530 
  A loop starting at line 3530 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3543 
  A loop starting at line 3543 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3557 
  A loop starting at line 3557 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3557 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3557 
  The call to VNTLAX was inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3564 
  A loop starting at line 3564 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3564 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3564 
  The call to VNTLAX was inlined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3569 
  A loop starting at line 3569 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3570 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3573 
  A loop starting at line 3573 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3573 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3573 
  The call to RBRD was inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3582 
  A loop starting at line 3582 was not vectorized because it contains a reference to a non-vector intrinsic on line 3589.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3583 
  A loop starting at line 3583 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3589 
  A loop starting at line 3589 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3589 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3589 
  The call to VNTLAX was inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3594 
  A loop starting at line 3594 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3594 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3594 
  The call to CUT was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3599 
  A loop starting at line 3599 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3599 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3599 
  The call to STRES2 was inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3605 
  A loop starting at line 3605 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3605 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3605 
  The call to CUT was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3610 
  A loop starting at line 3610 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3612 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3617 
  A loop starting at line 3617 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3628 
  A loop starting at line 3628 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3632 
  A loop starting at line 3632 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3639 
  A loop starting at line 3639 was vectorized.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3652 
  A loop starting at line 3652 was not vectorized because a recurrence was found on "FC" between lines 3654 and 3677.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3654 
  A loop starting at line 3654 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3654 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3654 
  The call to CUT was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3659 
  A loop starting at line 3659 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3670 
  A loop starting at line 3670 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3689 
  A loop starting at line 3689 was not vectorized for an unspecified reason.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 3693 
  Routine TEMRES was not inlined because it is a leaf routine which is too large to expand. 

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3705 
  A loop starting at line 3705 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3714 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3714 
  A loop starting at line 3714 was partially vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3714 
  The call to UPDATE was textually inlined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3721 
  A loop starting at line 3721 was vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3732 
  A loop starting at line 3732 was partially vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3906 
  A loop starting at line 3906 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3907 
  A loop starting at line 3907 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3917 
  A divide was turned into a multiply by a reciprocal

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3960 
  A loop starting at line 3960 was not vectorized because the target array (XSC) would require rank expansion.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3963 
  A loop starting at line 3963 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3971 
  A loop starting at line 3971 was vectorized.

ftn-6213 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3977 
  A loop starting at line 3977 was conditionally vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3991 
  A loop starting at line 3991 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4032 
  A loop starting at line 4032 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4055 
  A loop starting at line 4055 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4061 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4085 
  A loop starting at line 4085 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4104 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4117 
  A loop starting at line 4117 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4125 
  A loop starting at line 4125 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4132 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4135 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4144 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4147 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4154 
  A loop starting at line 4154 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4161 
  A loop starting at line 4161 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4177 
  A loop starting at line 4177 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4195 
  A loop starting at line 4195 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4291 
  A loop starting at line 4291 was vectorized.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4295 
  A loop starting at line 4295 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4296 
  A loop starting at line 4296 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4297 
  A loop starting at line 4297 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4313 
  A loop starting at line 4313 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4346 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4426 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4445 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4450 
  A loop starting at line 4450 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4515 
  A loop starting at line 4515 was vectorized.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4529 
  A loop starting at line 4529 was not vectorized for an unspecified reason.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4530 
  A loop starting at line 4530 was not vectorized because a recurrence was found on "RADT" at line 4533.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4531 
  A loop starting at line 4531 was blocked with block size 0.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4531 
  A loop starting at line 4531 was not vectorized because a recurrence was found on "RADT" at line 4533.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4532 
  A loop starting at line 4532 was blocked with block size 256.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4532 
  A loop starting at line 4532 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4542 
  A loop starting at line 4542 was vectorized.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4621 
  A loop starting at line 4621 was not vectorized for an unspecified reason.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4622 
  A loop starting at line 4622 was partially vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4649 
  A loop starting at line 4649 was vectorized.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4652 
  A loop starting at line 4652 was blocked with block size 0.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4652 
  A loop starting at line 4652 was not vectorized because a recurrence was found on "PHROOT" at line 4654.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4653 
  A loop starting at line 4653 was blocked with block size 512.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4653 
  A loop starting at line 4653 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4657 
  A loop starting at line 4657 was vectorized.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5021 
  A loop starting at line 5021 was blocked with block size 0.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5021 
  A loop starting at line 5021 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5021 
  The call to ROOT was textually inlined.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5023 
  A loop starting at line 5023 was blocked with block size 0.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5023 
  A loop starting at line 5023 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5023 
  The call to RADUSE was textually inlined.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5026 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5026 
  A loop starting at line 5026 was conditionally vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5026 
  The call to STOMAT was textually inlined.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5029 
  Routine INTERC was not inlined because it is a leaf routine which is too large to expand. 

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 5036 
  Routine SFLXES was not inlined because the call nest is too large to expand. 

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5149 
  A loop starting at line 5149 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5150 
  A divide was turned into a multiply by a reciprocal

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5152 
  A loop starting at line 5152 was not vectorized because the target array (TTA) would require rank expansion.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5155 
  A loop starting at line 5155 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5164 
  A loop starting at line 5164 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5173 
  A loop starting at line 5173 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5178 
  A loop starting at line 5178 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5187 
  A loop starting at line 5187 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5191 
  A loop starting at line 5191 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5216 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5236 
  A loop starting at line 5236 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5243 
  A loop starting at line 5243 was vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5685 
  A loop starting at line 5685 was partially vectorized.

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 5698 
  Routine AIRMOD was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 5698 
  Routine PBL was not inlined because the call nest is too large to expand. 

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5720 
  A loop starting at line 5720 was vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5727 
  A loop starting at line 5727 was not vectorized because a recurrence was found on "W" at line 5731.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5728 
  A loop starting at line 5728 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5739 
  Routine SNOWM was not inlined because it is a leaf routine which is too large to expand. 

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5745 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5747 
  A loop starting at line 5747 was partially vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5754 
  A loop starting at line 5754 was fused with the loop starting at line 5747.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5761 
  A loop starting at line 5761 was not vectorized because the target array (EF) would require rank expansion.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5763 
  A loop starting at line 5763 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5767 
  A loop starting at line 5767 was vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5771 
  A loop starting at line 5771 was partially vectorized.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5777 
  A loop starting at line 5777 was not vectorized because the target array (DIV) would require rank expansion.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5778 
  A loop starting at line 5778 was partially vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5788 
  A loop starting at line 5788 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5791 
  A divide was turned into a multiply by a reciprocal

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5794 
  A loop starting at line 5794 was not vectorized for an unspecified reason.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5795 
  A loop starting at line 5795 was partially vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5806 
  A loop starting at line 5806 was not vectorized because a recurrence was found on "W" at line 5810.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5806 
  A loop starting at line 5806 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5807 
  A loop starting at line 5807 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5807 
  A loop starting at line 5807 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5817 
  Routine RUNOFF was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5820 
  A loop starting at line 5820 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5842 
  A loop starting at line 5842 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5866 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5869 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5878 
  A loop starting at line 5878 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5880 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5895 
  A divide was turned into a multiply by a reciprocal

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5903 
  A loop starting at line 5903 was not vectorized because it contains input/output operations at line 5907.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6026 
  A loop starting at line 6026 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6034 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6038 
  A loop starting at line 6038 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6044 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6065 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6066 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6256 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6260 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6265 
  A loop starting at line 6265 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6269 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6281 
  A loop starting at line 6281 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6282 
  A loop starting at line 6282 was fused with the loop starting at line 6281.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6283 
  A loop starting at line 6283 was fused with the loop starting at line 6281.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6286 
  A loop starting at line 6286 was not vectorized because it contains a reference to a non-vector intrinsic on line 6288.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6288 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6288 
  A loop starting at line 6288 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 6288 
  The call to VNTLT1 was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6292 
  A loop starting at line 6292 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6301 
  A loop starting at line 6301 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6322 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6341 
  A loop starting at line 6341 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6350 
  A loop starting at line 6350 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6373 
  A loop starting at line 6373 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6387 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6390 
  A divide was turned into a multiply by a reciprocal

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6434 
  A loop starting at line 6434 was not vectorized because it contains input/output operations at line 6452.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6456 
  A loop starting at line 6456 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6482 
  A loop starting at line 6482 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6495 
  A loop starting at line 6495 was not vectorized because it contains input/output operations at line 6513.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6518 
  A loop starting at line 6518 was not vectorized because it contains input/output operations at line 6536.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6539 
  A loop starting at line 6539 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6615 
  A loop starting at line 6615 was vectorized.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 6628 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6637 
  A loop starting at line 6637 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6811 
  A loop starting at line 6811 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6822 
  A loop starting at line 6822 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6829 
  A loop starting at line 6829 was vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6830 
  A loop starting at line 6830 was partially vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6840 
  A loop starting at line 6840 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6847 
  A loop starting at line 6847 was fused with the loop starting at line 6822.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6858 
  A loop starting at line 6858 was fused with the loop starting at line 6829.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6859 
  A loop starting at line 6859 was not vectorized because it required a vector test not supported on this architecture.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6866 
  A loop starting at line 6866 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6868 
  A loop starting at line 6868 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6879 
  A loop starting at line 6879 was blocked with block size 0.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6879 
  A loop starting at line 6879 was not vectorized for an unspecified reason.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6880 
  A loop starting at line 6880 was blocked with block size 256.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6880 
  A loop starting at line 6880 was not vectorized because it does not map well onto the target architecture.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6884 
  A loop starting at line 6884 was blocked with block size 0.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6884 
  A loop starting at line 6884 was not vectorized for an unspecified reason.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6885 
  A loop starting at line 6885 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6885 
  A loop starting at line 6885 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6892 
  A loop starting at line 6892 was not vectorized because it required a vector test not supported on this architecture.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6896 
  A loop starting at line 6896 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6897 
  A loop starting at line 6897 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6905 
  A loop starting at line 6905 was not vectorized because it required a vector test not supported on this architecture.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6906 
  A loop starting at line 6906 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6907 
  A loop starting at line 6907 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6918 
  A loop starting at line 6918 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6919 
  A loop starting at line 6919 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6932 
  A loop starting at line 6932 was not vectorized because a recurrence was found on "XM1" between lines 6946 and 6967.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6936 
  A loop starting at line 6936 was not vectorized for an unspecified reason.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6954 
  A loop starting at line 6954 was partially vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6960 
  A loop starting at line 6960 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6967 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6971 
  A loop starting at line 6971 was partially vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6984 
  A loop starting at line 6984 was partially vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6990 
  A loop starting at line 6990 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6997 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7001 
  A loop starting at line 7001 was partially vectorized.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7010 
  A loop starting at line 7010 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7027 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7034 
  A loop starting at line 7034 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7039 
  A loop starting at line 7039 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7207 
  A loop starting at line 7207 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7208 
  A loop starting at line 7208 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7209 
  A loop starting at line 7209 was fused with the loop starting at line 7208.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7210 
  A loop starting at line 7210 was fused with the loop starting at line 7208.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7211 
  A loop starting at line 7211 was fused with the loop starting at line 7208.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7212 
  A loop starting at line 7212 was fused with the loop starting at line 7208.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7213 
  A loop starting at line 7213 was fused with the loop starting at line 7208.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7214 
  A loop starting at line 7214 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7215 
  A loop starting at line 7215 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7216 
  A loop starting at line 7216 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7217 
  A loop starting at line 7217 was fused with the loop starting at line 7216.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7218 
  A loop starting at line 7218 was fused with the loop starting at line 7216.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7219 
  A loop starting at line 7219 was fused with the loop starting at line 7216.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7220 
  A loop starting at line 7220 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7221 
  A loop starting at line 7221 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7222 
  A loop starting at line 7222 was fused with the loop starting at line 7221.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7223 
  A loop starting at line 7223 was fused with the loop starting at line 7221.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7224 
  A loop starting at line 7224 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7225 
  A loop starting at line 7225 was fused with the loop starting at line 7224.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7226 
  A loop starting at line 7226 was fused with the loop starting at line 7224.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7227 
  A loop starting at line 7227 was fused with the loop starting at line 7224.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7228 
  A loop starting at line 7228 was fused with the loop starting at line 7224.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7229 
  A loop starting at line 7229 was fused with the loop starting at line 7224.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7233 
  A loop starting at line 7233 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7234 
  A loop starting at line 7234 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7235 
  A loop starting at line 7235 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7236 
  A loop starting at line 7236 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7237 
  A loop starting at line 7237 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7238 
  A loop starting at line 7238 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7239 
  A loop starting at line 7239 was fused with the loop starting at line 7233.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7240 
  A loop starting at line 7240 was fused with the loop starting at line 7234.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7241 
  A loop starting at line 7241 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7242 
  A loop starting at line 7242 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7243 
  A loop starting at line 7243 was vectorized.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7250 
  A loop starting at line 7250 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7251 
  A loop starting at line 7251 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7252 
  A loop starting at line 7252 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7258 
  A loop starting at line 7258 was fused with the loop starting at line 7250.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7262 
  A loop starting at line 7262 was not vectorized because it does not map well onto the target architecture.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7277 
  A loop starting at line 7277 was interchanged with the loop starting at line 7278.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7277 
  A loop starting at line 7277 was partially vectorized.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7278 
  A loop starting at line 7278 was not vectorized for an unspecified reason.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7287 
  A loop starting at line 7287 was interchanged with the loop starting at line 7288.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7287 
  A loop starting at line 7287 was not vectorized because it does not map well onto the target architecture.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7288 
  A loop starting at line 7288 was not vectorized for an unspecified reason.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7306 
  A loop starting at line 7306 was not vectorized because it does not map well onto the target architecture.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7326 
  A divide was turned into a multiply by a reciprocal

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7330 
  A loop starting at line 7330 was fused with the loop starting at line 7306.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7336 
  A loop starting at line 7336 was vectorized.

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7370 
  A loop starting at line 7370 was eliminated by optimization.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7514 
  A loop starting at line 7514 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7515 
  A loop starting at line 7515 was fused with the loop starting at line 7514.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7516 
  A loop starting at line 7516 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7526 
  A loop starting at line 7526 was fused with the loop starting at line 7514.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7527 
  A loop starting at line 7527 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7543 
  A loop starting at line 7543 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7544 
  A loop starting at line 7544 was vectorized.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7553 
  A loop starting at line 7553 was unwound.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7553 
  A loop starting at line 7553 was not vectorized because a recurrence was found on "KMON" between lines 7554 and 7558.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7561 
  A loop starting at line 7561 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7564 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7569 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7570 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7571 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7572 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7573 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7576 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7577 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7579 
  A divide was turned into a multiply by a reciprocal

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7581 
  A loop starting at line 7581 was blocked with block size 4.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7581 
  A loop starting at line 7581 was not vectorized for an unspecified reason.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7582 
  A loop starting at line 7582 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7582 
  A loop starting at line 7582 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7592 
  A loop starting at line 7592 was blocked with block size 2.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7592 
  A loop starting at line 7592 was not vectorized because a recurrence was found on "XGREEN" between lines 7601 and 7602.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7593 
  A loop starting at line 7593 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7593 
  A loop starting at line 7593 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7608 
  A loop starting at line 7608 was not vectorized because the target array (DIFF1) would require rank expansion.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7609 
  A loop starting at line 7609 was not vectorized because a recurrence was found on "ICOND" between lines 7627 and 7638.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7669 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7679 
  A loop starting at line 7679 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7798 
  A loop starting at line 7798 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7799 
  A loop starting at line 7799 was fused with the loop starting at line 7798.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7800 
  A loop starting at line 7800 was fused with the loop starting at line 7798.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7801 
  A loop starting at line 7801 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7802 
  A loop starting at line 7802 was fused with the loop starting at line 7801.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7807 
  A loop starting at line 7807 was not vectorized because it contains input/output operations at line 7849.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7819 
  A loop starting at line 7819 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7861 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7868 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7874 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7880 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7898 
  A loop starting at line 7898 was not vectorized because a recurrence was found on "TIMES" at line 7915.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7899 
  A divide was turned into a multiply by a reciprocal

ftn-6009 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7899 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7899 
  An exponentiation was replaced with a faster code sequence.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 7899 
  The call to EXTRAK was textually inlined.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7915 
  A divide was turned into a multiply by a reciprocal

ftn-6009 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7916 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7925 
  A loop starting at line 7925 was not vectorized because a recurrence was found on "ITSOIL" between lines 7939 and 7946.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7926 
  A loop starting at line 7926 was not vectorized because a recurrence was found on "ITSOIL" between lines 7939 and 7946.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7930 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7937 
  A divide was turned into a multiply by a reciprocal

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7938 
  A loop starting at line 7938 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7942 
  A loop starting at line 7942 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7947 
  A loop starting at line 7947 was not vectorized for an unspecified reason.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8086 
  A loop starting at line 8086 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8087 
  A loop starting at line 8087 was fused with the loop starting at line 8086.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8092 
  A loop starting at line 8092 was not vectorized because it contains input/output operations at line 8129.

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8103 
  A loop starting at line 8103 was eliminated by optimization.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8132 
  A divide was turned into a multiply by a reciprocal

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8140 
  A loop starting at line 8140 was eliminated by optimization.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8141 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 8141 
  The call to EXTRAK was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8163 
  A loop starting at line 8163 was not vectorized because it contains a reference to a non-vector intrinsic on line 8200.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8164 
  A loop starting at line 8164 was not vectorized because it contains a reference to a non-vector intrinsic on line 8200.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8166 
  A loop starting at line 8166 was not vectorized because it does not map well onto the target architecture.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8183 
  A loop starting at line 8183 was not vectorized because a recurrence was found on "GLSM_TZDEP" at line 8184.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8190 
  A loop starting at line 8190 was partially vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8197 
  A loop starting at line 8197 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 8197 
  The call to VERT_INTERP was textually inlined.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8209 
  A loop starting at line 8209 was partially vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8262 
  A loop starting at line 8262 was fused with the loop starting at line 8209.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8264 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8303 
  A divide was turned into a multiply by a reciprocal

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8303 
  An exponentiation was replaced with a faster code sequence.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8313 
  A divide was turned into a multiply by a reciprocal

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8313 
  An exponentiation was replaced with a faster code sequence.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8319 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8378 
  A loop starting at line 8378 was partially vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8382 
  A loop starting at line 8382 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8399 
  A loop starting at line 8399 was fused with the loop starting at line 8378.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8406 
  A loop starting at line 8406 was fused with the loop starting at line 8382.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8416 
  A loop starting at line 8416 was not vectorized because a recurrence was found on "DZLFT" at line 8443.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8428 
  A loop starting at line 8428 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8449 
  A loop starting at line 8449 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8463 
  A loop starting at line 8463 was vectorized.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 C r o s s   R e f e r e n c e   for   SFC_SSIB
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

1000                                                              Statement label
  Decl    8447
  Set 
  Used    8438

200                                                               FORMAT label
  Decl    6552
  Set 
  Used

2000                                                              Statement label
  Decl    3582
  Set 
  Used    3629

3000                                                              Statement label
  Decl    3652
  Set 
  Used    3690

650                                                               FORMAT label
  Decl    6554
  Set 
  Used

70                                                                Statement label
  Decl    8428
  Set 
  Used    8439

7000                                                              Statement label
  Decl    3528
  Set 
  Used    3711

8000                                                              Statement label
  Decl    6286
  Set 
  Used    6348

998                                                               FORMAT label
  Decl    5920
  Set 
  Used

999                                                               FORMAT label
  Decl    5921
  Set 
  Used

999                                                               FORMAT label
  Decl    8279
  Set 
  Used

999                                                               FORMAT label
  Decl    7960
  Set 
  Used

AA                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4272
  Set     4379
  Used    4381    4409    4410

AA                                                                REAL(KIND=8), PARAMETER
  Decl    6010
  Set 
  Used    6057

AAA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5666
  Set     5863
  Used    5865    5866    5867

AAA_1                           Stack                             REAL(KIND=8)
  Decl    2383
  Set     2520
  Used    2595    2600

AAA_2                           Stack                             REAL(KIND=8)
  Decl    2383
  Set     2554
  Used    2595    2599

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0    2498    2597    3620    5211    5913    6031    6329    6364    6644
          6825    7538    7540    7569    7570    7571    7572    7573    7577

ABSOIL                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5662
  Set     5764    5768
  Used    5797

AH                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1134
  Set     1257
  Used    1648    1649    1652    1748

AH                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6195
  Set     6269
  Used    6315    6333    6334    6355

AIRMOD                                                            Subroutine, Module procedure, PRIVATE
  Decl     838
  Set 
  Used    3459

AK                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1133
  Set     1248
  Used    1576    1578    1638    1740

AL                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6196
  Set     6270
  Used    6318    6319    6321    6335    6336    6356

ALBEDO                                                            Subroutine, Module procedure
  Decl      87    6558
  Set 
  Used

AM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6197
  Set     6377
  Used    6378    6379    6380    6381

ANIRB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6567    6605
  Set     6642    6650    6655
  Used

ANIRD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6568    6606
  Set     6643    6651    6656
  Used

AP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3855
  Set     3906    3908    3917
  Used    4041    4061    4097    4105

AREAS                           Stack                             REAL(KIND=8)
  Decl    2399
  Set     2509    2543
  Used    2510    2544

ARG                             Stack                             REAL(KIND=8)
  Decl    2779
  Set     2837    2838
  Used    2839

ARG                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3873
  Set     4040    4097
  Used    4042    4048    4098    4099

ARGG                            Stack                             REAL(KIND=8)
  Decl    8295
  Set     8319
  Used    8327

AT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4269
  Set     4323    4365
  Used    4340    4371    4372    4393    4394    4400

ATHIRD                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    4310

AVFLUX                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4278
  Set     4409
  Used    4416

AVISB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6567    6603
  Set     6640    6648    6653
  Used

AVISD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6567    6604
  Set     6641    6649    6654
  Used

AVK                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2382
  Set     2496    2499    2501    2502    2514    2530    2533    2535    2536    2548
  Used    2520    2523    2524    2554    2557    2558

B00                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6218
  Set     6305    6322
  Used    6324

B03                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6219
  Set     6308
  Used    6322    6323

B04                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6220
  Set     6309
  Used    6322    6323

B30                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6222
  Set     6315
  Used    6316    6317    6322    6326

B33                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6223
  Set     6316
  Used    6322    6323    6326

B40                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6225
  Set     6318
  Used    6322    6327

B44                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6226
  Set     6319
  Used    6322    6323    6327

BB                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4273
  Set     4381
  Used    4409    4410

BB                                                                REAL(KIND=8), PARAMETER
  Decl    6011
  Set 
  Used    6057

BBB_1                           Stack                             REAL(KIND=8)
  Decl    2384
  Set     2523
  Used    2595    2599

BBB_2                           Stack                             REAL(KIND=8)
  Decl    2384
  Set     2557
  Used    2595    2600

BEAM_NIRB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     382
  Set 
  Used     516

BEAM_NIRD                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     383
  Set 
  Used     517

BEAM_VISB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     380
  Set 
  Used     514

BEAM_VISD                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     381
  Set 
  Used     515

BEE                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     136
  Set     7216    7301
  Used    2431    2432    2450    2485    2486    2490    2500    2534    3491    4633    7161    7813    8097    8175

BEE_R4                          Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7086
  Set 
  Used    7204    7216

BP                                                                REAL(KIND=8), PARAMETER
  Decl    3890
  Set 
  Used    4048    4061    4099    4105

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     329
  Set 
  Used     541     664

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     916    1108
  Set 
  Used    1248    1303    1361    1387

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2160
  Set 
  Used    2257

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2996
  Set 
  Used    3033

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3106    3361
  Set 
  Used    3558    3565    3570    3571    3590    3612    3694    3715    3723

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4675    4960
  Set 
  Used    5038

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5268    5597
  Set 
  Used    5703    5871

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     276
  Set 
  Used     554     677

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1059
  Set 
  Used    1502    1512    1799

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2962
  Set 
  Used    3039

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3321
  Set     3648
  Used    3699    3717

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4901
  Set 
  Used    5043

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5544
  Set 
  Used    5709

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     277
  Set 
  Used     554     677

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1060
  Set 
  Used    1504    1518    1801    1831

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2963
  Set 
  Used    3040

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3322
  Set     3649
  Used    3699    3717

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4902
  Set 
  Used    5044

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5545
  Set 
  Used    5709

C0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6221
  Set     6281    6312    6323    6324
  Used    6325    6326    6327    6366

C3                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6224
  Set     6317
  Used    6323    6326

C4                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6227
  Set     6320
  Used    6323    6327

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     219     260
  Set      588     589
  Used     701

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     838     890
  Set 
  Used     898     901

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     923    1046
  Set 
  Used    1180    1187    1194    1812    1814    1816    1818

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2316    2370
  Set 
  Used    2509    2543

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    2884    2952
  Set     3074    3090
  Used

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3114    3305
  Set 
  Used    3460    3474    3475    3515    3701    3718

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3761    3838
  Set     3985    4008    4078    4138    4150    4169    4187
  Used    3983    3996    4003    4005    4012    4118    4165    4167    4197    4198

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4685    4885
  Set 
  Used    5031    5046

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5058    5108
  Set     5181    5218    5232    5237
  Used    5180    5199    5227    5230

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5278    5528
  Set     5732
  Used    5693    5713    5730    5731    5741    5818    5883    5909

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6400    6415
  Set 
  Used    6443    6444    6475    6479    6504    6505    6527    6528    6548    6549

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(OUT)
  Decl    6561    6579
  Set     6621    6622
  Used

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6668    6754
  Set 
  Used    6834    6843    6851

CAPAC0                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     224     398
  Set 
  Used     702

CAPAC0                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6401    6420
  Set     6443    6444    6474    6478    6504    6505    6548    6549
  Used    6452    6473    6477    6491    6492    6513

CAPACI                          Stack                             REAL(KIND=8)
  Decl    3434
  Set     3470
  Used    3515

CAPACI                          Stack                             REAL(KIND=8)
  Decl    6798
  Set     6846
  Used    6851

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     223     386
  Set 
  Used     588     589     702

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6401    6425
  Set     6491    6492    6527    6528
  Used    6475    6479    6493    6536

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6563    6586
  Set 
  Used    6621    6622

CAPACP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3885
  Set     3998    4003
  Used    4008    4119    4131

CAPI                                                              REAL(KIND=8), PARAMETER
  Decl    1152
  Set 
  Used    1194

CBAL                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5679
  Set     5895
  Used    5913

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     287
  Set 
  Used     556     679

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1065
  Set 
  Used    1263

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2964
  Set 
  Used    3056

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3329
  Set 
  Used    3699    3717

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3760    3843
  Set     4197
  Used

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4682    4912
  Set 
  Used    5030    5044

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5057    5113
  Set 
  Used    5156

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5555
  Set 
  Used    5710    5740

CCC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3882
  Set     4131    4132    4143    4144
  Used    4133    4135    4145    4147

CCC_1                           Stack                             REAL(KIND=8)
  Decl    2385
  Set     2524
  Used    2599    2600

CCC_2                           Stack                             REAL(KIND=8)
  Decl    2385
  Set     2558
  Used    2599    2600

CCI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1135
  Set     1263
  Used    1555    1557    1564    1566    1705

CCP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3867
  Set     4120
  Used    4122    4133    4134    4145    4146

CCT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3868
  Set     4121
  Used    4122    4133    4134    4145    4146

CCT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5126
  Set     5149    5156    5165
  Used    5168    5195    5204

CEDFU                           Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     102
  Set     7233
  Used    6914    7126

CEDFU1                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     104
  Set     7235
  Used    6972    6973    6974    7128

CEDFU1_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3)
  Decl    7103
  Set 
  Used    7231    7235

CEDFU2                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     106
  Set     7237
  Used    6926    6927    6928    7002    7003    7004    7130

CEDFU2_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3)
  Decl    7105
  Set 
  Used    7231    7237

CEDFU_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 9)
  Decl    7101
  Set 
  Used    7231    7233

CEDIR                           Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     103
  Set     7234
  Used    6912    6913    7127

CEDIR1                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     105
  Set     7236
  Used    6955    6956    6957    6961    6962    6963    6964    6965    6966    7129

CEDIR1_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3, 3)
  Decl    7104
  Set 
  Used    7231    7236

CEDIR2                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     107
  Set     7238
  Used    6923    6924    6925    6985    6986    6987    6991    6992    6993    6994    6995    6996    7131

CEDIR2_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3, 3)
  Decl    7106
  Set 
  Used    7231    7238

CEDIR_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 9, 3)
  Decl    7102
  Set 
  Used    7231    7234

CETHER                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     111
  Set     7241
  Used    7029    7030    7031    7032    7135

CETHER_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7109
  Set 
  Used    7232    7241

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     288
  Set 
  Used     557     680

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1066
  Set 
  Used    1262

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2965
  Set 
  Used    3057

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3330
  Set 
  Used    3700    3718

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3760    3844
  Set     4199
  Used

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4913
  Set 
  Used    5030    5044

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5057    5114
  Set 
  Used    5165    5244

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5556
  Set 
  Used    5711    5740    5748

CGI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1136
  Set     1262
  Used    1548    1549    1550    1551    1684

CHANGE                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5139
  Set     5212    5214    5216
  Used    5217    5218

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     321
  Set 
  Used     550     673

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2882    2985
  Set     3056
  Used

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3356
  Set 
  Used    3716

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4995
  Set 
  Used    5042

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5057    5121
  Set 
  Used    5159

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5589
  Set 
  Used    5702    5740    5895    5915

CHIL                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     160
  Set      810
  Used    7185

CHIL2                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     437
  Set      459
  Used

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4211    4253
  Set 
  Used    4379

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4686    4943
  Set 
  Used    5027

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5280    5625
  Set 
  Used    5714

CHILW                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7469
  Set     7612    7670
  Used    7687

CHIL_FIXED                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     128
  Set     7208    7291
  Used     810     816    7153    7266

CHIL_GBL                        Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     165
  Set      816    7687
  Used     198     459

CHIL_R4                         Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7078
  Set 
  Used    7203    7208

CHISL                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3860
  Set     3940    3942
  Used    3951

CICE                                                              REAL(KIND=8), PARAMETER
  Decl    6251
  Set 
  Used    6260

CLAI                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3968    4197

CLEDFU                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     108
  Set     7239
  Used    6901    7132

CLEDFU_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 9)
  Decl    7107
  Set 
  Used    7232    7239

CLEDIR                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     109
  Set     7240
  Used    6899    6900    7133

CLEDIR_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 9, 3)
  Decl    7108
  Set 
  Used    7232    7240

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     298
  Set 
  Used     533     559     627     682

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4462    4500
  Set 
  Used    4543

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4684    4923
  Set 
  Used    5023

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5566
  Set 
  Used    5712

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6564    6591
  Set 
  Used    6631

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6669    6758
  Set     7049    7050
  Used

COC                             Stack                             REAL(KIND=8)
  Decl    1125
  Set     1418
  Used    1463    1469    1490    1502    1512    1514    1516

COC                             Stack                             REAL(KIND=8)
  Decl    1941
  Set     1955
  Used    1966    1967

COCT                            Stack                             REAL(KIND=8)
  Decl    1141
  Set     1823
  Used    1828

COG1                            Stack                             REAL(KIND=8)
  Decl    1127
  Set     1434    1451
  Used    1469    1500    1504    1518

COG1                            Stack                             REAL(KIND=8)
  Decl    1943
  Set     1962    1964
  Used    1967

COG2                            Stack                             REAL(KIND=8)
  Decl    1128
  Set     1442    1457
  Used    1463    1500    1518    1520    1522

COG2                            Stack                             REAL(KIND=8)
  Decl    1944
  Set     1959    1965
  Used    1962    1966

COGS1                           Stack                             REAL(KIND=8)
  Decl    1143
  Set     1825
  Used    1827    1831

COGS2                           Stack                             REAL(KIND=8)
  Decl    1144
  Set     1827
  Used    1833

COGT                            Stack                             REAL(KIND=8)
  Decl    1142
  Set     1824
  Used    1830

COLRAD                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     406
  Set 
  Used

COLRAD                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    7402    7457
  Set 
  Used    7533

COLRAD2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     789     795
  Set 
  Used     828

COND                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     417
  Set 
  Used     752

COND                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6087    6184
  Set     6282    6365
  Used

CONSTANTS                                                         Module
  Decl
  Set 
  Used      54

COPYSURFACEDATA                                                   Subroutine, Module procedure
  Decl      97     789
  Set 
  Used

COS2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     384
  Set 
  Used     518

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     340
  Set      509     518     615
  Used     535     543     619     629     641     666

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4210    4265
  Set 
  Used    4292

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4676    4970
  Set 
  Used    5026

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5269    5608
  Set 
  Used    5704

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6566    6599
  Set 
  Used    6633

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6671    6766
  Set 
  Used    6817

COVER                           Stack                             REAL(KIND=8)
  Decl    7772
  Set     7839
  Used    7899

COVER                           Stack                             REAL(KIND=8)
  Decl    8028
  Set     8122
  Used    8146

COVER                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8289
  Set 
  Used    8348

CP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3856
  Set     3909    3923
  Used    4041    4061    4097    4105

CP                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1168    1953    3723    6255    6305    6308    6312    6315    6331    6334    6352    6355

CSOIL                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3861
  Set     3951
  Used    3973    4199

CT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5997
  Set     6066
  Used    6072

CT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6203
  Set 
  Used    6290

CTI                             Stack                             REAL(KIND=8)
  Decl    2182
  Set     2278    2289
  Used    2299

CTI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5996
  Set     6059    6063
  Used    6066

CTI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6202
  Set 
  Used    6290

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     338
  Set 
  Used     543     666

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2076    2164
  Set     2235    2240
  Used    2278    2289

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3369
  Set 
  Used    3558    3565    3590

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4968
  Set 
  Used    5039

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5606
  Set 
  Used    5704

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5995
  Set     6045
  Used    6059

CTNI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6201
  Set 
  Used    6290

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     336
  Set 
  Used     542     665

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2076    2162
  Set     2291
  Used    2298

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3367
  Set 
  Used    3558    3565    3590

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4675    4966
  Set 
  Used    5039

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5604
  Set 
  Used    5703    5848

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5994
  Set     6065
  Used    6070    6071

CU                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6200
  Set 
  Used    6290

CUI                             Stack                             REAL(KIND=8)
  Decl    2179
  Set     2277    2288
  Used    2291

CUI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5993
  Set     6057    6062
  Used    6063    6065

CUI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6199
  Set 
  Used    6290

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     337
  Set 
  Used     543     666

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2076    2163
  Set     2228
  Used    2229    2277    2288

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3368
  Set 
  Used    3558    3565    3590

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4967
  Set 
  Used    5039

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5605
  Set 
  Used    5704

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5992
  Set     6044
  Used    6045    6057    6062

CUNI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6198
  Set 
  Used    6290

CUT                                                               Subroutine, Module procedure, PRIVATE
  Decl    1868
  Set 
  Used       0    3605    3654

CW                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3996    4119    4132    4144    4197    4198

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     425
  Set      479
  Used     539     662

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     883
  Set      903
  Used     904

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2142
  Set 
  Used    2228    2231    2232    2234    2237    2239    2261    2269    2270    2280    2281

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3115    3286
  Set     3735
  Used    3460    3559    3566    3591

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4947
  Set 
  Used    5047

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5628
  Set 
  Used    5706

D1                              Stack                             REAL(KIND=8)
  Decl    1129
  Set     1284
  Used    1295    1303

D1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3006
  Set     3028
  Used    3033

D1                              Stack                             REAL(KIND=8)
  Decl    5681
  Set     5869
  Used    5871

D1I                             Stack                             REAL(KIND=8)
  Decl    1131
  Set     1295
  Used    1340    1346    1361    1369    1376    1387

D1X                             Stack                             REAL(KIND=8)
  Decl    3892
  Set     3904
  Used    3951

D2                              Stack                             REAL(KIND=8)
  Decl    1130
  Set     1463
  Used    1471    1502    1504    1510

D2                              Stack                             REAL(KIND=8)
  Decl    1945
  Set     1966
  Used    1971

D2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2769
  Set     2805
  Used    2809

DD                                                                REAL(KIND=8), PARAMETER
  Decl    6246
  Set 
  Used    6260

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1104
  Set     1510
  Used    1516    1522    1800    1802    1832

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2992
  Set 
  Used    3035

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3397
  Set 
  Used    3696    3715

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    5017
  Set 
  Used    5038

DEADQM                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5659
  Set 
  Used    5700

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1103
  Set     1502
  Used    1512    1520    1799    1802    1832

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2991
  Set 
  Used    3034

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3396
  Set 
  Used    3696    3715

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    5016
  Set 
  Used    5038

DEADTC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5658
  Set 
  Used    5700

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1102
  Set     1504
  Used    1514    1518    1800    1801    1832

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2990
  Set 
  Used    3034

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3395
  Set 
  Used    3696    3715

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5015
  Set 
  Used    5038

DEADTG                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5657
  Set 
  Used    5699

DEFAC                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     155
  Set      805
  Used    7180

DEFAC2                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     445
  Set      463
  Used

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2697    2764
  Set 
  Used    2853

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3403
  Set 
  Used    3603

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4687    4954
  Set 
  Used    5048

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5281    5635
  Set 
  Used    5715

DEFAC_FIXED                     Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     132
  Set     7212    7295
  Used     805     820    7157    7270

DEFAC_GBL                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     169
  Set      820    7691
  Used     202     463

DEFAC_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7082
  Set 
  Used    7203    7212

DEFICIT                         Stack                             REAL(KIND=8)
  Decl    2409
  Set     2663    2669
  Used    2664    2665    2670    2671

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     183     186
  Set 
  Used     191

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl     225     408
  Set 
  Used     749

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    6086    6177
  Set 
  Used    6255    6256    6257

DELTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6775
  Set     6823
  Used    6825

DENOM                           Stack                             REAL(KIND=8)
  Decl    2404
  Set     2595
  Used    2597    2598

DEP                             Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    2775
  Set     2819    2820    2821    2822    2825    2829
  Used    2832    2833

DEP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5667
  Set     5782    5784
  Used    5785

DEPCOV                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6777
  Set     6834    6835
  Used    6837

DEWC                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3416
  Set     3663
  Used    3665

DEWG                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3417
  Set     3664
  Used    3666

DICE                                                              REAL(KIND=8), PARAMETER
  Decl    6248
  Set 
  Used    6259

DIFF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3880
  Set     4118
  Used    4121    4122    4132    4133    4134    4144    4145    4146

DIFF1                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7473
  Set     7620    7631    7634
  Used    7642

DIFF2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7474
  Set     7621    7632    7635
  Used    7642

DIFSL                                                             REAL(KIND=8), PARAMETER
  Decl    3891
  Set 
  Used    3904

DIV                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2378
  Set     2497    2531
  Used    2498    2500    2532    2534

DIV                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5664
  Set     5781
  Used    5785

DLWBOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     385
  Set 
  Used     521     653

DPDW                            Stack                             REAL(KIND=8)
  Decl    2396
  Set     2491
  Used    2519    2553

DPDWDZ                          Stack                             REAL(KIND=8)
  Decl    2403
  Set     2519    2553
  Used    2520    2523    2524    2525    2554    2557    2558    2559

DQG0                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6217
  Set     6271
  Used    6306    6318

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     294
  Set 
  Used     558     681

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     922    1071
  Set     1793
  Used    1800    1802    1832

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2969
  Set 
  Used    3035

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3335
  Set     3726
  Used    3700    3709    3718    3730

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4919
  Set 
  Used    5045

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5277    5562
  Set 
  Used    5711

DQM                             Stack                             REAL(KIND=8)
  Decl    6243
  Set     6358
  Used    6360

DQMDT                           Stack                             REAL(KIND=8)
  Decl    3437
  Set     3724
  Used    3726    3728

DQMDT                           Stack                             REAL(KIND=8)
  Decl    6244
  Set     6356
  Used    6358

DRAG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     325
  Set 
  Used     551     674

DRAG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5593
  Set     5848
  Used    5863

DROP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2771
  Set     2852
  Used    2853

DSSIB                           Stack                             REAL(KIND=8)
  Decl    7777
  Set     7874
  Used    7880    7906    7908

DSSIB                           Stack                             REAL(KIND=8)
  Decl    8033
  Set     8133
  Used    8134    8151    8152

DT                              Stack                             REAL(KIND=8)
  Decl    7794
  Set     7906
  Used    7915

DT                              Stack                             REAL(KIND=8)
  Decl    8042
  Set     8151
  Used    8154

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     291
  Set 
  Used     557     680

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     922    1068
  Set     1791
  Used    1794    1795    1799    1802    1832    1842    1843

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2966
  Set 
  Used    3026    3034    3039    3056

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3332
  Set 
  Used    3700    3706    3718

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4916
  Set 
  Used    5045

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5057    5116
  Set 
  Used    5158

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5559
  Set 
  Used    5711    5721    5740

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     220     234
  Set 
  Used     564     687     748

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     923    1027
  Set 
  Used    1166    1167    1314    1322    1490    1500    1548    1549    1550    1551    1555    1557    1564    1566    1576
          1578    1638    1648    1649    1652    1790    1791    1792    1793    1794    1795    1811    1815    1828    1830
          1834

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2316    2361
  Set 
  Used    2415    2416

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2885    2939
  Set 
  Used    3052

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3115    3278
  Set 
  Used    3701    3719    3722    3725    3726

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3761    3819
  Set 
  Used    4094

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    4686    4874
  Set 
  Used    5031    5047

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    5058    5098
  Set 
  Used    5150    5196    5204

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    5279    5505
  Set 
  Used    5714    5741    5745    5818    5865    5895    5896

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    6085    6174
  Set 
  Used    6260    6263    6326    6327    6334    6336    6343    6344    6355    6356    6357    6358    6379    6381

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    1156
  Set     1167
  Used    1684    1705    1740    1748

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    3012
  Set     3052
  Used    3056    3057

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    5146
  Set     5150
  Used    5168    5244

DTF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5132
  Set     5194
  Used    5195

DTF2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5137
  Set     5204
  Used    5205

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     292
  Set 
  Used     558     681

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     922    1069
  Set     1790
  Used    1794    1795    1800    1801    1831    1832    1842    1843

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2967
  Set 
  Used    3025    3035    3040    3057

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3333
  Set 
  Used    3700    3707    3718

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4917
  Set 
  Used    5045

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5057    5117
  Set 
  Used    5167    5168    5244

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5560
  Set 
  Used    5711    5722    5740

DTI                             Stack                             REAL(KIND=8)
  Decl    6240
  Set     6263
  Used    6316    6319

DTIME1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5140
  Set     5195
  Used    5196    5204

DTIME2                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5141
  Set     5203
  Used    5204

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     293
  Set 
  Used     558     681

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     922    1070
  Set     1792
  Used    1794    1795

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2968
  Set 
  Used    3027

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3334
  Set     3725
  Used    3700    3708    3718    3729

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4683    4918
  Set 
  Used    5045

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5276    5561
  Set 
  Used    5711

DTM                             Stack                             REAL(KIND=8)
  Decl    6241
  Set     6357
  Used    6359

DTMDT                           Stack                             REAL(KIND=8)
  Decl    3436
  Set     3723
  Used    3725    3727

DTMDT                           Stack                             REAL(KIND=8)
  Decl    6242
  Set     6355
  Used    6357

DTS                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5128
  Set     5158    5167
  Used    5174    5198

DW                              Stack                             REAL(KIND=8)
  Decl    7778
  Set     7880
  Used    7899

DW                              Stack                             REAL(KIND=8)
  Decl    8034
  Set     8134
  Used    8142

DW                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8285
  Set 
  Used    8303    8313

DZ                              Stack                             REAL(KIND=8)
  Decl    7121
  Set     7326
  Used    7329    7335

DZCUT                           Stack                             REAL(KIND=8)
  Decl    7122
  Set     7329    7335
  Used    7330    7336

DZLFT                           Stack                             REAL(KIND=8)
  Decl    8372
  Set     8414    8437    8443
  Used    8420    8422

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     331
  Set 
  Used     541     664

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2161
  Set 
  Used    2228    2230    2231    2237    2239    2261    2269    2270    2272    2280    2281    2283

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3107    3363
  Set 
  Used    3558    3565    3590

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4675    4962
  Set 
  Used    5039

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5268    5599
  Set 
  Used    5703

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5933    6001
  Set     6043
  Used    6044    6052

DZM                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6208
  Set 
  Used    6291

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     273
  Set 
  Used     553     676

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1056
  Set     1471
  Used    1490    1500    1799    1801    1832

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1870    1923
  Set     1971
  Used

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2694    2756
  Set 
  Used    2852

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2959
  Set 
  Used    3034

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3318
  Set     3548
  Used    3586    3596    3600    3607    3620    3656    3661    3662    3698    3717

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4898
  Set 
  Used    5043

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5541
  Set 
  Used    5708

EAEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3005
  Set     3034
  Used

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     311
  Set 
  Used     547     670

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1081
  Set     1490    1829    1850
  Used    1705    1748

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3346
  Set 
  Used    3697

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4985
  Set 
  Used    5041

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5579
  Set 
  Used    5701

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1101
  Set     1516
  Used    1566    1652

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3394
  Set 
  Used    3696

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5014
  Set 
  Used    5038

ECDQM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5656
  Set 
  Used    5699

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1100
  Set     1512
  Used    1557    1649

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3393
  Set 
  Used    3696

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5013
  Set 
  Used    5038

ECDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5655
  Set 
  Used    5699

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1099
  Set     1514
  Used    1555    1648

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3392
  Set 
  Used    3696

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5012
  Set 
  Used    5038

ECDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5654
  Set 
  Used    5699

ECF                             Stack                             REAL(KIND=8)
  Decl    1139
  Set     1844
  Used    1846

ECF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3414
  Set     3661    3665
  Used

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     307
  Set 
  Used     546     669

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1077
  Set     1811    1814    1848
  Used    1812    1829    1847

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2974
  Set     3068
  Used    3067    3074    3078

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3342
  Set 
  Used    3697    3715

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4981
  Set 
  Used    5040

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5575
  Set 
  Used    5700    5895    5916

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     315
  Set 
  Used     548     671

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1085
  Set     1812
  Used    1813

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3350
  Set 
  Used    3698

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4989
  Set 
  Used    5041

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5583
  Set 
  Used    5701

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     317
  Set 
  Used     549     672

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2882    2981
  Set     3078
  Used    3095

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3352
  Set 
  Used    3716

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4991
  Set 
  Used    5042

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5585
  Set 
  Used    5702

ECPOT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1137
  Set     1799
  Used    1811    1828    1844

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     306
  Set 
  Used     546     669

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1076
  Set     1828    1849
  Used    1829    1847

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2973
  Set     3069
  Used    3067    3068    3078

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3341
  Set 
  Used    3697    3715

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4980
  Set 
  Used    5040

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5574
  Set 
  Used    5700    5764    5895    5916

EE                                                                REAL(KIND=8), PARAMETER
  Decl    6014
  Set 
  Used    6056

EEE                             Stack                             REAL(KIND=8)
  Decl    3435
  Set     3499
  Used    3509

EF                              Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    5661
  Set     5773    5774    5785    5791    5792
  Used    5789    5797

EFT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5665
  Set     5789    5790
  Used    5791    5792

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     312
  Set 
  Used     547     670

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1082
  Set     1500    1835    1857
  Used    1684    1748

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2978
  Set 
  Used    3044

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3347
  Set 
  Used    3697    3716

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4986
  Set 
  Used    5041

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5580
  Set 
  Used    5701

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1098
  Set     1522
  Used    1551    1652

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3391
  Set 
  Used    3696

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5011
  Set 
  Used    5037

EGDQM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5653
  Set 
  Used    5699

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1097
  Set     1520
  Used    1549    1649

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3390
  Set 
  Used    3696

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5010
  Set 
  Used    5037

EGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5652
  Set 
  Used    5699

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1096
  Set     1518
  Used    1548    1648

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3389
  Set 
  Used    3696

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    5009
  Set 
  Used    5037

EGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5651
  Set 
  Used    5699

EGF                             Stack                             REAL(KIND=8)
  Decl    1140
  Set     1845
  Used    1852

EGF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3415
  Set     3662    3666
  Used

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     309
  Set 
  Used     547     670

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1079
  Set     1815    1818    1854
  Used    1816    1835    1853

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2976
  Set     3084
  Used    3044    3083    3090    3091

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3344
  Set 
  Used    3697    3715

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4983
  Set 
  Used    5041

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5577
  Set 
  Used    5700    5896    5916

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     316
  Set 
  Used     548     671

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1086
  Set     1816
  Used    1817

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3351
  Set 
  Used    3698

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4990
  Set 
  Used    5041

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5584
  Set 
  Used    5701

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     318
  Set 
  Used     549     672

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2882    2982
  Set     3091
  Used    3095

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3353
  Set 
  Used    3716

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4992
  Set 
  Used    5042

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5586
  Set 
  Used    5702

EGPOT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1138
  Set     1801
  Used    1815    1830    1845

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     310
  Set 
  Used     547     670

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1080
  Set     1831    1834    1856
  Used    1835    1853

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2977
  Set     3044
  Used    3091

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3345
  Set 
  Used    3697    3715

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4984
  Set 
  Used    5041

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5578
  Set 
  Used    5701    5756    5896    5916

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     308
  Set 
  Used     546     669

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1078
  Set     1830    1855
  Used    1835    1853

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2975
  Set     3045    3085
  Used    3083    3084    3091

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3343
  Set 
  Used    3697    3715

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4982
  Set 
  Used    5041

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5576
  Set 
  Used    5700    5768    5896    5916

EKAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4276
  Set     4401
  Used    4426    4432

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     332
  Set 
  Used     541     664

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     916    1110
  Set 
  Used    1469

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1931
  Set 
  Used    1967

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3107    3364
  Set 
  Used    3595    3606    3655    3694

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4675    4963
  Set 
  Used    5039

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5268    5600
  Set 
  Used    5703

ENDWB                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5678
  Set     5880
  Used    5906    5908

EPSFAC                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1510    3548

EPSFLT                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    6402    6406
  Set 
  Used    6457    6458    6459    6461    6462    6465    6468    6471    6475    6479

EPSFLT                          Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     703     761     763     764

EQUDEP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3877
  Set     4094
  Used    4097    4106

ESAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3424
  Set     3586
  Used    3620

ESTARC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3007
  Set     3039
  Used

ESTARG                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3008
  Set     3040
  Used

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     274
  Set 
  Used     553     676

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1057
  Set 
  Used    1469    1490    1799

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1870    1924
  Set 
  Used    1967

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2960
  Set 
  Used    3039

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3319
  Set     3536    3646
  Used    3596    3607    3656    3661    3699    3717

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4899
  Set 
  Used    5043

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5542
  Set 
  Used    5709

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     275
  Set 
  Used     553     676

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1058
  Set 
  Used    1469    1500    1801    1831

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1870    1925
  Set 
  Used    1967

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2961
  Set 
  Used    3040

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3320
  Set     3537    3647
  Used    3596    3607    3656    3662    3699    3717

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4900
  Set 
  Used    5043

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5543
  Set 
  Used    5709

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     319
  Set 
  Used     549     672

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2882    2983
  Set     3095
  Used

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3354
  Set 
  Used    3716    3724

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4993
  Set 
  Used    5042

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5587
  Set 
  Used    5702    5884    5909

ETP                             Stack                             REAL(KIND=8)
  Decl    7789
  Set     7932    7935    7937
  Used    7940

EVAP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     410
  Set 
  Used     750

EVAP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6179
  Set     6332    6353
  Used    6335    6356

EXCESS                          Stack                             REAL(KIND=8)
  Decl    2408
  Set     2639    2645    2651
  Used    2640    2641    2646    2647    2652    2653

EXP                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0    2432    2454    2486    2809    2852
          3491    3536    3646    3648    4022    4061    4105    4389    4391    4393    4394    4401    4633    6057    6059
          6062    6271    7046    7666    7861    7868    8131    8132    8327

EXPCUT                          Static offset=0                   REAL(KIND=8), PRIVATE, SAVE
  Decl      99
  Set      190
  Used    7044

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl     218     296
  Set 
  Used

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    3760    3847
  Set 
  Used    4022

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    4210    4261
  Set     4304
  Used    4371    4372    4389    4391

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    4684    4921
  Set 
  Used    5026    5030

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    5277    5564
  Set 
  Used    5712

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6563    6589
  Set 
  Used

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6669    6756
  Set     7018    7019    7027    7028    7029    7030    7031    7032
  Used    7043

EXTRAK                                                            Subroutine, Module procedure, PRIVATE
  Decl    8282
  Set 
  Used       0    8141

F                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4267
  Set     4292
  Used    4409

F                               Stack                             REAL(KIND=8)
  Decl    6022
  Set     6056    6061
  Used    6057    6062

F                               Stack                             REAL(KIND=8)
  Decl    6611
  Set     6645
  Used    6646    6647

F                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6774
  Set     6817
  Used    6900    6912    6913    6937    6967    6997    7027    7028

F0001                           Stack                             REAL(KIND=8)
  Decl    7119
  Set     7248
  Used    7253

FAC                             Stack                             REAL(KIND=8)
  Decl    3411
  Set     3485    3486    3722
  Used    3487    3491    3723    3724

FAC1                            Stack                             REAL(KIND=8)
  Decl    1146
  Set     1397
  Used    1398    1399    1400

FAC1                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6782
  Set     7047
  Used    7049    7050    7052    7056

FAC2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6783
  Set     7048
  Used    7050    7051    7052    7057

FACKS                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3009
  Set     3065    3066    3070    3081    3082    3086
  Used    3074    3078    3090    3091

FACMOD                          Stack                             REAL(KIND=8)
  Decl    7790
  Set     7933
  Used    7944

FACT                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7747
  Set     7800    7918
  Used    7944

FACT                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    8001
  Set     8085    8157
  Used

FACTG                                                             REAL(KIND=8), PARAMETER
  Decl    2047
  Set 
  Used    2065

FACTOR                          Stack                             REAL(KIND=8)
  Decl    7793
  Set 
  Used    7900    7906    7918

FACTOR                          Stack                             REAL(KIND=8)
  Decl    8041
  Set 
  Used    8150    8151    8157

FACTOR                          Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    8283    8293
  Set     8348    8349
  Used

FAH                             Stack                             REAL(KIND=8)
  Decl    1158
  Set     1169
  Used    1257

FAK                             Stack                             REAL(KIND=8)
  Decl    1157
  Set     1168
  Used    1248

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     347
  Set 
  Used     545     668

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1117
  Set 
  Used    1412    1844

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1936
  Set 
  Used    1954

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3376
  Set     3520    3633    3677    3680    3683
  Used    3595    3606    3655    3663    3695

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4976
  Set 
  Used    5040

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5615
  Set 
  Used    5705

FCAP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5135
  Set     5199    5201
  Used    5203    5206    5211    5214

FCON                            Stack                             REAL(KIND=8)
  Decl    4283
  Set     4310
  Used    4410

FD                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2772
  Set     2853    2854
  Used    2866

FF                                                                REAL(KIND=8), PARAMETER
  Decl    6015
  Set 
  Used    6058

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     348
  Set 
  Used     545     668

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1118
  Set 
  Used    1408    1422    1424    1822    1845

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1937
  Set 
  Used    1956    1957

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3377
  Set     3521    3634    3678    3681    3684
  Used    3595    3606    3655    3664    3695

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4977
  Set 
  Used    5040

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5616
  Set 
  Used    5705

FIH                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2045
  Set     2064
  Used    2066

FILTA                           Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     761     763     764

FLAGSCOV                        Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    6809
  Set     6893    6905
  Used    6898    6908

FLAGTYP                         Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    6808
  Set     6870    6876
  Used    6886

FLIP                            Stack                             REAL(KIND=8)
  Decl    7467
  Set     7563    7564
  Used    7569    7570    7571    7572    7573

FLUX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5129
  Set     5159    5168
  Used    5195    5196    5203    5204

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     323
  Set 
  Used     550     673

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5057    5123
  Set     5244
  Used

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5591
  Set 
  Used    5740    5748

FMELT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6776
  Set     6824    6826
  Used    6860

FNAMESIBALB                     Static offset=64                  CHARACTER(200), PRIVATE, SAVE
  Decl     177
  Set      194
  Used    7199

FNAMESIBALB_IN                  Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     189
  Set 
  Used     194

FNAMESIBVEG                     Static offset=1664                CHARACTER(200), PRIVATE, SAVE
  Decl     176
  Set      193
  Used    7191

FNAMESIBVEG_IN                  Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     188
  Set 
  Used     193

FP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2773
  Set     2839    2840    2841    2842
  Used    2840    2843

FP1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2694    2736
  Set     2843
  Used    2866

FP1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3428
  Set 
  Used    3600

FPI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3859
  Set     3928    4022
  Used    4025    4041    4061

FREEZE                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3881
  Set     4134    4135    4146    4147
  Used    4137    4138    4149    4150

FSC                                                               REAL(KIND=8), PARAMETER
  Decl    2186
  Set 
  Used    2282    2284    2286

FT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2770
  Set     2807    2812    2813
  Used    2814

FT1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2694    2735
  Set     2814
  Used    2866

FT1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3427
  Set 
  Used    3600

FTC                                                               REAL(KIND=8), PARAMETER
  Decl    2187
  Set 
  Used    2273    2275

FTEMP                           Stack                             REAL(KIND=8)
  Decl    4286
  Set     4400
  Used    4401

FTPD                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2774
  Set     2866
  Used    2867

FTT                             Stack                             REAL(KIND=8)
  Decl    2201
  Set     2273    2275    2284    2286
  Used    2278    2289

FVC                                                               REAL(KIND=8), PARAMETER
  Decl    2188
  Set 
  Used    2271

FVV                             Stack                             REAL(KIND=8)
  Decl    2200
  Set     2271    2282
  Used    2277    2288

FX                              Stack                             REAL(KIND=8)
  Decl    8016
  Set     8264
  Used    8265    8266

FYSIKS                                                            Subroutine, Module procedure
  Decl      83    5267
  Set 
  Used       0     661

G                               Stack                             REAL(KIND=8)
  Decl    6023
  Set     6058
  Used    6059

G2                              Stack                             REAL(KIND=8)
  Decl    2191
  Set     2211
  Used    2235    2240    2245    2273    2275    2284    2286

GAMMA                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4268
  Set     4353
  Used    4416    4426

GASR                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191    2208    6254    7326

GB100                           Stack                             REAL(KIND=8)
  Decl    6234
  Set     6257
  Used    6377

GBAL                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5680
  Set     5896
  Used    5913

GBY100                          Stack                             REAL(KIND=8)
  Decl    5675
  Set     5840
  Used    5863

GBYCP                           Stack                             REAL(KIND=8)
  Decl    6232
  Set     6255
  Used    6269

GBYHL                           Stack                             REAL(KIND=8)
  Decl    6231
  Set     6256
  Used    6270

GG                                                                REAL(KIND=8), PARAMETER
  Decl    6016
  Set 
  Used    6044

GICE                            Stack                             REAL(KIND=8)
  Decl    6236
  Set     6259
  Used    6307    6314    6365

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     299
  Set 
  Used     534     559     628     682

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4462    4501
  Set 
  Used    4544

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4684    4924
  Set 
  Used    5023

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5567
  Set 
  Used    5712

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6564    6592
  Set 
  Used    6631

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6669    6759
  Set     7051    7052
  Used

GLSM_SLZ                                                          REAL(KIND=8), PARAMETER, DIMENSION(0:20)
  Decl    8079
  Set 
  Used

GLSM_SLZ                        Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    8357    8364
  Set 
  Used    8379

GLSM_TZDEP                      Stack                             REAL(KIND=8), DIMENSION(0:3)
  Decl    8007
  Set     8180    8184
  Used    8199    8264

GLSM_W                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    7975    7997
  Set 
  Used    8191

GLSM_W1D                        Stack                             REAL(KIND=8), DIMENSION(0:20)
  Decl    8006
  Set     8191
  Used

GLSM_W_SIB                      Stack                             REAL(KIND=8), DIMENSION(0:3)
  Decl    8008
  Set     8181    8185
  Used    8202    8210    8265    8266

GLSM_W_SIB                      Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    8359    8366
  Set     8464
  Used

GL_SM                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    8358    8365
  Set 
  Used    8400

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     209     334
  Set      577     578     579
  Used     723

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl     916    1112
  Set 
  Used    1652    1748

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3107    3366
  Set     3728
  Used    3694    3724

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4675    4965
  Set 
  Used    5039

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5268    5602
  Set 
  Used    5703

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     209     333
  Set      574     575     576
  Used     722

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl     916    1111
  Set 
  Used    1638    1740

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3107    3365
  Set     3727
  Used    3694    3723

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4675    4964
  Set 
  Used    5039

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5268    5601
  Set 
  Used    5703

GMU                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 4), INTENT(INOUT)
  Decl     210     335
  Set      580     581     582     583
  Used     724     725

GMU                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 4), INTENT(INOUT)
  Decl    5269    5603
  Set     5865    5866    5867
  Used

GPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     222     365
  Set 
  Used     748

GPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6085    6172
  Set 
  Used    6268    6269    6270    6272    6377

GQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     222     362
  Set 
  Used     573     747

GQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6171
  Set     6295    6344    6363
  Used    6274    6313    6321    6332    6353    6360

GQSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6213
  Set     6274
  Used    6295    6363

GR100                           Stack                             REAL(KIND=8)
  Decl    6233
  Set     6254
  Used    6268

GRAV                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191    1168    1169    2261    3469    3722    5840    6052    6255    6256    6257    6258    7326

GREEN                           Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     154
  Set      802
  Used    7179

GREEN2                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     436
  Set      458
  Used

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4211    4252
  Set 
  Used    4445

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4686    4942
  Set 
  Used    5027

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5280    5624
  Set 
  Used    5714

GREEN_FIXED                     Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     141
  Set     7221    7253
  Used     802     815    7166    7282

GREEN_GBL                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     164
  Set      815    7686
  Used     197     458

GREEN_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7091
  Set 
  Used    7205    7221

GRIB                            Stack                             REAL(KIND=8)
  Decl    2197
  Set     2268
  Used    2271    2273    2275

GRLF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7472
  Set     7614    7668
  Used    7669    7686

GRZ2                            Stack                             REAL(KIND=8)
  Decl    2199
  Set     2270
  Used    2273    2275

GRZL                            Stack                             REAL(KIND=8)
  Decl    2198
  Set     2269
  Used    2273

GSWP_SOIL_INPUT_DATA            Static offset=0                   REAL(KIND=8), DIMENSION(10, 12), SAVE, Initialized
  Decl    7345
  Set 
  Used

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     222     361
  Set 
  Used     572     747

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5987
  Set 
  Used    6043    6049

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6170
  Set     6294    6343    6362
  Used    6268    6273    6289    6312    6317    6331    6352    6359

GTSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6212
  Set     6273
  Used    6294    6362

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     222     363
  Set 
  Used     746

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5985
  Set 
  Used    6041

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6085    6168
  Set 
  Used    6289    6375    6390

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     222     364
  Set 
  Used     747

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5986
  Set 
  Used    6041

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6085    6169
  Set 
  Used    6289    6376    6391

GXX                             Stack                             REAL(KIND=8)
  Decl    3433
  Set     3469
  Used    3499

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     313
  Set 
  Used     548     671

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1083
  Set     1314    1794    1813    1847
  Used    1705    1740

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2979
  Set 
  Used    3096

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3348
  Set 
  Used    3697    3716

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4987
  Set 
  Used    5041

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5581
  Set 
  Used    5701    5895

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1094
  Set     1340
  Used    1557    1578    1794

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3387
  Set 
  Used    3695

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5007
  Set 
  Used    5037

HCDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5649
  Set 
  Used    5698

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1093
  Set     1346
  Used    1555    1576    1794

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3386
  Set 
  Used    3695

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5006
  Set 
  Used    5037

HCDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5648
  Set 
  Used    5698

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1095
  Set     1361
  Used    1564    1638    1794

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3388
  Set 
  Used    3695

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5008
  Set 
  Used    5037

HCDTM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5650
  Set 
  Used    5698

HF                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5134
  Set     5196
  Used    5206    5211    5212

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     320
  Set 
  Used     549     672

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2882    2984
  Set     3096
  Used

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3355
  Set 
  Used    3716    3723

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4994
  Set 
  Used    5042

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5588
  Set 
  Used    5702    5915

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     314
  Set 
  Used     548     671

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1084
  Set     1322    1795    1817    1853
  Used    1684    1740

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2980
  Set 
  Used    3096

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3349
  Set 
  Used    3697    3716

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4673    4988
  Set 
  Used    5041

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5271    5582
  Set 
  Used    5701    5896

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1091
  Set     1376
  Used    1549    1578    1795

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3384
  Set 
  Used    3695

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5004
  Set 
  Used    5037

HGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5646
  Set 
  Used    5698

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1090
  Set     1369
  Used    1548    1576    1795

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3383
  Set 
  Used    3695

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5003
  Set 
  Used    5037

HGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5645
  Set 
  Used    5698

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1092
  Set     1387
  Used    1550    1638    1795

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3385
  Set 
  Used    3695

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    5005
  Set 
  Used    5037

HGDTM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5647
  Set 
  Used    5698

HH                                                                REAL(KIND=8), PARAMETER
  Decl    6017
  Set 
  Used    6044

HICE                                                              REAL(KIND=8), PARAMETER
  Decl    6249
  Set 
  Used    6259

HL                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1169    1809    2787    3053    3054    5753    6256    6306    6309    6313    6318    6319    6321    6332    6336
          6353    6356

HL3I                            Stack                             REAL(KIND=8)
  Decl    2776
  Set     2787
  Used

HLAT3                           Stack                             REAL(KIND=8)
  Decl    1162
  Set     1809
  Used    1812    1814    1816    1818

HLAT3I                          Stack                             REAL(KIND=8)
  Decl    3014
  Set     3054
  Used    3063    3074    3090

HLAT3I                          Stack                             REAL(KIND=8)
  Decl    5674
  Set     5753
  Used    5756    5764    5768

HLATI                           Stack                             REAL(KIND=8)
  Decl    3013
  Set     3053
  Used    3078    3091

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     349
  Set 
  Used     546     669

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1119
  Set     1408
  Used    1435    1436    1825    1826    1827

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1938
  Set 
  Used    1962

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3378
  Set     3511
  Used    3595    3606    3655    3695

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4978
  Set 
  Used    5040

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5617
  Set 
  Used    5705

HR                              Stack                             REAL(KIND=8)
  Decl    8296
  Set     8327
  Used    8333

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     285
  Set 
  Used     556     679

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1064
  Set 
  Used    1408

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3327
  Set     3509
  Used    3511    3699

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4682    4910
  Set 
  Used    5044

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5275    5553
  Set 
  Used    5710

HSCAP                           Stack                             REAL(KIND=8)
  Decl    6237
  Set     6260
  Used    6305    6366

I                               Stack                             INTEGER
  Decl     453
  Set      455     473     498     569     587     603     612     618     635     695     707     719     735     757
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468     474     499
           514     515     516     517     518     521     570     572     573     574     575     576     577     578     579
           580     581     582     583     588     589     590     591     592     593     594     596     598     600     604
           605     606     613     615     619     620     621     636     642     643     644     645     653     657     658
           698     708     709     710     711     712     713     714     715     720     722     723     724     725     726
           736     737     738     739     758     761     762     763     764     766     767     768     769     771     772
           773     774     775     776     777     780     781     782     783

I                               Stack                             INTEGER
  Decl     799
  Set      812
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825

I                               Stack                             INTEGER
  Decl     895
  Set      897
  Used     898     900     901     902     903     904     905     906

I                               Stack                             INTEGER
  Decl    1159
  Set     1172    1274    1396    1403    1529    1753    1789    1810    1841
  Used    1180    1187    1191    1192    1193    1194    1198    1248    1257    1262    1263    1269    1284    1295    1303
          1314    1322    1340    1346    1361    1369    1376    1387    1397    1398    1399    1400    1401    1408    1412
          1418    1422    1424    1434    1435    1436    1442    1443    1444    1451    1457    1463    1469    1471    1490
          1500    1502    1504    1510    1512    1514    1516    1518    1520    1522    1548    1549    1550    1551    1555
          1557    1564    1566    1576    1578    1638    1639    1648    1649    1650    1652    1684    1705    1740    1748
          1754    1755    1756    1757    1758    1759    1760    1761    1762    1763    1764    1765    1766    1767    1768
          1769    1770    1771    1772    1773    1775    1777    1778    1780    1781    1782    1784    1785    1786    1787
          1790    1791    1792    1793    1794    1795    1799    1800    1801    1802    1811    1812    1813    1814    1815
          1816    1817    1818    1822    1823    1824    1825    1826    1827    1828    1829    1830    1831    1832    1834
          1835    1842    1843    1844    1845    1847    1848    1849    1850    1853    1854    1855    1856    1857

I                               Stack                             INTEGER
  Decl    1949
  Set     1951
  Used    1952    1953    1954    1955    1956    1957    1958    1960    1961    1962    1963    1966    1967    1971

I                               Stack                             INTEGER
  Decl    2048
  Set     2051
  Used    2052    2053    2054    2056    2058    2059    2060    2062    2064    2065    2066

I                               Stack                             INTEGER
  Decl    2204
  Set     2213    2225    2252
  Used    2214    2215    2216    2226    2227    2228    2229    2230    2231    2232    2234    2235    2237    2239    2240
          2245    2253    2257    2258    2259    2260    2261    2262    2269    2270    2272    2277    2278    2280    2281
          2283    2288    2289    2291    2298    2299    2303

I                               Stack                             INTEGER
  Decl    2411
  Set     2427
  Used    2430    2431    2432

I                               Stack                             INTEGER
  Decl    2781
  Set     2792    2849    2858
  Used    2793    2794    2799    2801    2803    2804    2805    2806    2807    2808    2809    2810    2811    2812    2813
          2814    2832    2833    2837    2839    2840    2841    2842    2843    2850    2851    2852    2853    2854    2859
          2860    2861    2863    2866    2867    2868

I                               Stack                             INTEGER
  Decl    3010
  Set     3024    3042    3055    3064    3073    3080    3089
  Used    3025    3026    3027    3028    3032    3033    3034    3035    3039    3040    3043    3044    3045    3056    3057
          3065    3066    3067    3068    3069    3070    3074    3078    3081    3082    3083    3084    3085    3086    3090
          3091    3095    3096

I                               Stack                             INTEGER
  Decl    3440
  Set     3446    3465    3472    3530    3543    3569    3583    3610    3617    3628    3632    3639    3659    3670    3689
          3705    3721    3732
  Used    3447    3448    3449    3450    3451    3452    3453    3454    3466    3473    3474    3475    3482    3484    3487
          3499    3509    3511    3513    3514    3515    3516    3517    3520    3521    3531    3536    3537    3544    3548
          3570    3571    3584    3585    3586    3611    3612    3613    3618    3619    3620    3623    3629    3633    3634
          3635    3636    3640    3641    3642    3643    3644    3645    3646    3647    3648    3649    3660    3661    3662
          3663    3664    3665    3666    3672    3673    3675    3676    3677    3678    3679    3680    3681    3682    3683
          3684    3690    3706    3707    3708    3709    3722    3723    3724    3725    3726    3727    3728    3729    3730
          3733    3735    3736    3737    3738

I                               Stack                             INTEGER
  Decl    3894
  Set     3907    3963    3971    3977    3991    4032    4055    4085    4117    4125    4154    4161    4177    4195
  Used    3908    3909    3910    3911    3917    3923    3926    3927    3928    3932    3934    3940    3942    3951    3955
          3964    3965    3968    3972    3973    3978    3983    3985    3987    3992    3996    3998    4000    4002    4003
          4005    4008    4010    4012    4022    4023    4025    4027    4033    4034    4040    4041    4042    4048    4049
          4050    4061    4062    4064    4066    4070    4071    4072    4075    4077    4078    4080    4086    4087    4088
          4089    4094    4095    4096    4097    4098    4099    4100    4101    4104    4105    4106    4107    4108    4109
          4118    4119    4120    4121    4122    4123    4126    4127    4131    4132    4133    4134    4135    4136    4137
          4138    4143    4144    4145    4146    4147    4148    4149    4150    4156    4158    4163    4164    4165    4167
          4169    4173    4174    4182    4184    4187    4188    4189    4196    4197    4198    4199

I                               Stack                             INTEGER
  Decl    4280
  Set     4291    4297    4313    4450
  Used    4292    4304    4305    4314    4315    4323    4325    4334    4340    4346    4353    4354    4365    4371    4372
          4379    4381    4389    4391    4393    4394    4400    4401    4409    4410    4416    4426    4432    4439    4445
          4451

I                               Stack                             INTEGER
  Decl    4511
  Set     4515    4532    4542
  Used    4516    4517    4533    4543    4544    4545    4546    4547    4548    4549    4550    4551    4552

I                               Stack                             INTEGER
  Decl    4618
  Set     4621    4652
  Used    4627    4633    4654

I                               Stack                             INTEGER
  Decl    5143
  Set     5155    5164    5173    5178    5187    5191    5236    5243
  Used    5156    5157    5158    5159    5165    5166    5167    5168    5174    5175    5179    5180    5181    5183    5188
          5192    5193    5194    5195    5196    5197    5198    5199    5201    5203    5204    5205    5206    5207    5209
          5211    5212    5214    5216    5217    5218    5219    5221    5223    5226    5227    5230    5232    5237    5244

I                               Stack                             INTEGER
  Decl    5670
  Set     5685    5720    5728    5747    5754    5763    5767    5771    5778    5788    5795    5807    5820    5842    5878
          5903
  Used    5690    5691    5692    5693    5721    5722    5729    5730    5731    5732    5748    5755    5756    5764    5768
          5772    5773    5774    5775    5779    5780    5781    5782    5784    5785    5789    5790    5791    5792    5796
          5797    5808    5809    5810    5812    5821    5822    5823    5824    5826    5827    5828    5830    5831    5832
          5848    5863    5865    5866    5867    5869    5871    5879    5880    5881    5882    5883    5884    5895    5896
          5904    5906    5907    5908    5909    5910    5911    5913    5914    5915    5916

I                               Stack                             INTEGER
  Decl    6024
  Set     6026    6038
  Used    6027    6028    6029    6030    6031    6032    6034    6039    6040    6041    6042    6043    6044    6045    6049
          6050    6051    6052    6053    6054    6055    6056    6057    6058    6059    6061    6062    6063    6065    6066
          6070    6071    6072

I                               Stack                             INTEGER
  Decl    6229
  Set     6265    6292    6301    6341    6350    6373
  Used    6266    6267    6268    6269    6270    6271    6272    6273    6274    6275    6276    6277    6293    6294    6295
          6296    6297    6298    6302    6304    6305    6306    6307    6308    6309    6312    6313    6314    6315    6316
          6317    6318    6319    6320    6321    6322    6323    6324    6325    6326    6327    6329    6330    6331    6332
          6333    6334    6335    6336    6342    6343    6344    6351    6352    6353    6355    6356    6359    6360    6362
          6363    6364    6365    6366    6367    6368    6374    6375    6376    6377    6378    6379    6380    6381    6386
          6387    6388    6389    6390    6391    6392    6393

I                               Stack                             INTEGER
  Decl    6430
  Set     6434    6456    6482    6495    6518    6539
  Used    6435    6436    6437    6438    6439    6440    6441    6442    6443    6444    6445    6452    6457    6458    6459
          6461    6462    6464    6465    6467    6468    6470    6471    6473    6474    6475    6477    6478    6479    6483
          6484    6485    6486    6487    6488    6489    6490    6491    6492    6493    6496    6497    6498    6499    6500
          6501    6502    6503    6504    6505    6506    6513    6519    6520    6521    6522    6523    6524    6525    6526
          6527    6528    6529    6536    6540    6541    6542    6543    6544    6545    6546    6547    6548    6549

I                               Stack                             INTEGER
  Decl    6609
  Set     6615    6637
  Used    6616    6617    6618    6619    6620    6621    6622    6623    6624    6625    6638    6640    6641    6642    6643
          6644    6645    6648    6649    6650    6651    6653    6654    6655    6656

I                               Stack                             INTEGER
  Decl    6789
  Set     6811    6822    6830    6840    6847    6859    6868    6880    6885    6892    6897    6907    6919    6932    7010
          7039
  Used    6813    6814    6815    6816    6817    6823    6824    6825    6826    6832    6833    6834    6835    6836    6837
          6841    6842    6843    6848    6849    6851    6860    6861    6863    6869    6870    6871    6872    6873    6874
          6875    6876    6881    6886    6893    6898    6899    6900    6901    6908    6912    6913    6914    6920    6923
          6924    6925    6926    6927    6928    6933    6937    6946    6950    6955    6956    6957    6961    6962    6963
          6964    6965    6966    6967    6968    6972    6973    6974    6980    6985    6986    6987    6991    6992    6993
          6994    6995    6996    6997    6998    7002    7003    7004    7011    7012    7013    7014    7015    7016    7017
          7018    7019    7020    7021    7022    7023    7024    7025    7026    7027    7028    7029    7030    7031    7032
          7040    7041    7043    7044    7045    7046    7047    7048    7049    7050    7051    7052    7056    7057    7058

I                               Stack                             INTEGER
  Decl    7118
  Set     7306
  Used    7307    7308    7309    7310    7311    7312    7313    7314    7315    7316

I                               Stack                             INTEGER
  Decl    7479
  Set     7527    7544    7561    7582    7593    7609    7679
  Used    7533    7538    7540    7545    7562    7564    7569    7570    7571    7572    7573    7576    7577    7578    7579
          7583    7587    7588    7594    7598    7599    7601    7602    7610    7611    7612    7613    7614    7615    7619
          7620    7621    7622    7623    7629    7631    7632    7634    7635    7642    7649    7650    7656    7657    7659
          7661    7663    7664    7666    7668    7669    7670    7671    7672    7680    7681    7682    7683    7684    7685
          7686    7687    7688    7689    7690    7691    7692    7693    7694    7695    7696

I1                              Stack                             INTEGER
  Decl    6793
  Set     6896    6906    6918    6954    6960    6971    6984    6990    7001
  Used    6899    6900    6901    6912    6913    6914    6923    6924    6925    6926    6927    6928    6955    6956    6957
          6961    6962    6963    6964    6965    6966    6967    6968    6972    6973    6974    6985    6986    6987    6991
          6992    6993    6994    6995    6996    6997    6998    7002    7003    7004

I1                              Stack                             INTEGER
  Decl    7481
  Set     7543    7553    7592
  Used    7545    7554    7558    7559    7598    7599    7600    7601    7602

I8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     366     432    6006    6194    6602    7740    7991

IBD                                                               INTEGER, PARAMETER
  Decl    7452
  Set 
  Used

IBD                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     296     297    3847    4261    4499    4921    4922    5564    5565    6589    6590    6756    6757

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     183     184
  Set 
  Used

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7711    7733
  Set 
  Used    7736    7740    7741    7742    7804

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7965    7987
  Set 
  Used    7990    7991    7992    7993    7996    7997    8089

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    7711    7743
  Set 
  Used    7926

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    7971    7994
  Set 
  Used    8164

ICEALN                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6655    6656

ICEALV                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6653    6654

ICG                                                               INTEGER, PARAMETER
  Decl    7449
  Set 
  Used

ICG                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     195     196     197     198     199     200     201     202     203     204     205     279     280     281     282
           284     289     290     295     296     297     434     435     436     437     438     442     443     444     445
           449     450     454     811    1032    1061    1062    1067    1122    1914    1926    2042    2742    2745    2757
          2759    2761    2762    2763    2764    2765    2766    3284    3324    3325    3331    3336    3399    3400    3401
          3402    3403    3404    3405    3438    3823    3845    3846    3847    3852    4248    4250    4251    4252    4253
          4258    4259    4260    4261    4487    4496    4497    4498    4499    4613    4904    4905    4906    4907    4909
          4914    4915    4920    4921    4922    4941    4942    4943    4944    4945    4951    4952    4953    4954    4955
          4956    5115    5547    5548    5549    5550    5552    5557    5558    5563    5564    5565    5622    5623    5624
          5625    5626    5632    5633    5634    5635    5636    5637    6588    6589    6590    6755    6756    6757    6770
          6771    7077    7078    7079    7080    7081    7082    7083    7084    7085    7091    7092    7093    7152    7153
          7154    7155    7156    7157    7158    7159    7160    7166    7167    7168    7175    7176    7177    7178    7179
          7180    7181    7182    7183    7184    7185

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1939
  Set 
  Used    1952

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2166
  Set 
  Used    2214    2253

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2694    2760
  Set 
  Used    2793    2850    2859

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3379
  Set     3531    3623    3636    3673
  Used    3558    3565    3584    3590    3595    3600    3606    3611    3618    3629    3655    3660    3690

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    4672    4999
  Set 
  Used    5038

ICHECK                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    5640
  Set 
  Used    5700

ICMAX                                                             INTEGER, PARAMETER
  Decl    3431
  Set 
  Used    3622

ICOND                           Stack                             INTEGER
  Decl    7485
  Set     7627    7628    7629
  Used    7630    7638

ICOUNT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2694    2734
  Set 
  Used    2790

ICOUNT                          Stack                             INTEGER
  Decl    3443
  Set     3581    3582
  Used    3600    3622

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     789     797
  Set 
  Used     829

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    7403    7461
  Set 
  Used    7525    7646

IDEWCO                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3429
  Set     3635    3675
  Used    3672    3676    3679    3682

IDP                                                               INTEGER, PARAMETER
  Decl    7451
  Set 
  Used

IDP                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     286    2743    2758    3328    4614    4911    5554    7090    7165

IERR                            Stack                             INTEGER
  Decl    7124
  Set 
  Used    7189    7191    7197    7199

IHEAD                                                             INTEGER, PARAMETER
  Decl    7506
  Set 
  Used    7598    7649    7655    7656    7657    7663    7664    7669

II                              Stack                             INTEGER
  Decl    6430
  Set     6447    6508    6531
  Used    6452    6513    6536

IIMON                                                             INTEGER, PARAMETER
  Decl    7491
  Set 
  Used    7495    7498    7503    7543    7553

IK                              Stack                             INTEGER
  Decl    6797
  Set     6936
  Used    6937    6940    6941

IL                              Stack                             INTEGER
  Decl    5671
  Set     5777    5794    5806
  Used    5780    5783    5784    5785    5797    5798    5808    5810    5811    5812

ILD                                                               INTEGER, PARAMETER
  Decl    7073
  Set 
  Used

ILWRAD                          Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     223     378
  Set 
  Used     493

IM                              Stack                             INTEGER
  Decl    7117
  Set     7262    7288
  Used    7263    7289

IM                              Stack                             INTEGER
  Decl    7769
  Set     7819
  Used    7820    7821    7822    7824    7825    7826

IM                              Stack                             INTEGER
  Decl    8025
  Set     8103
  Used    8104    8105    8106    8109    8110    8111

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     222     366
  Set 
  Used     474     499     570     613     636     720

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6567    6602
  Set 
  Used    6638

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7711    7740
  Set 
  Used    7927

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7967    7991
  Set 
  Used    8168

IMM                             Stack                             INTEGER
  Decl    7770
  Set     7829    7832
  Used    7839

IMM                             Stack                             INTEGER
  Decl    8026
  Set     8115    8119
  Used    8122

IMM1                            Stack                             INTEGER
  Decl    7766
  Set     7815    7821
  Used    7829

IMM1                            Stack                             INTEGER
  Decl    8023
  Set     8099    8105
  Used    8115

IMM2                            Stack                             INTEGER
  Decl    7767
  Set     7816    7825
  Used    7832

IMM2                            Stack                             INTEGER
  Decl    8024
  Set     8100    8110
  Used    8119

IMON                                                              INTEGER, PARAMETER
  Decl    7448
  Set 
  Used    7504

IMON                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2026    2140    7091    7092    7093    7094    7095    7096    7097    7098    7099    7101    7102    7103    7104
          7105    7106    7107    7108    7109    7110    7111    7166    7167    7168    7169    7170    7171    7172    7173
          7174    7175    7176    7179    7306    7330    7336

IND                             Stack                             INTEGER
  Decl     453
  Set      496
  Used     501     595

INDEX                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    7484
  Set     7515    7672
  Used    7681

INITLZ                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     368
  Set 
  Used     483

INITMOD                         Stack                             LOGICAL
  Decl     452
  Set      483
  Used     485     494

INITSSIB                                                          Subroutine, Module procedure
  Decl      82     183
  Set 
  Used

INTERC                                                            Subroutine, Module procedure, PRIVATE
  Decl    3759
  Set 
  Used    5029

INTG                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     224     399
  Set 
  Used     703     759

INTG                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6402    6407
  Set 
  Used    6432

INTSIB                          Stack                             INTEGER
  Decl     453
  Set      487     490
  Used     529

IRAD                            Stack                             INTEGER
  Decl    4282
  Set     4296
  Used    4304

IRAD                            Stack                             INTEGER
  Decl    4514
  Set     4531
  Used    4533

IS                              Stack                             INTEGER
  Decl    7768
  Set     7807    7927
  Used    7809    7810    7811    7812    7813    7814    7817    7818    7820    7822    7824    7826    7839    7840    7841
          7847    7849    7861    7868    7880    7889    7914    7916    7917    7918    7928    7940    7944    7946    7948
          7950    7956

IS                              Stack                             INTEGER
  Decl    8019
  Set     8092    8168
  Used    8093    8094    8095    8096    8097    8098    8101    8102    8104    8106    8109    8111    8122    8123    8124
          8128    8129    8131    8132    8134    8137    8153    8155    8156    8157    8169    8171    8172    8173    8174
          8175    8176    8184

ISOIL                                                             INTEGER, PARAMETER
  Decl    7447
  Set 
  Used

ISTRT                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6401    6403
  Set 
  Used    6433

ISTRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     702     760

ISWRAD                          Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     223     377
  Set 
  Used

ITER                            Stack                             INTEGER
  Decl    7783
  Set     7898    7938    7942    7947
  Used    7916    7917    7918    7939    7940    7943    7944    7948    7950    7956

ITER                            Stack                             INTEGER
  Decl    8039
  Set     8140
  Used    8155    8156    8157

ITFAC                           Stack                             INTEGER
  Decl    7796
  Set     7943
  Used    7946

ITR                             Stack                             INTEGER
  Decl     453
  Set      529
  Used

ITSOIL                          Stack                             INTEGER
  Decl    7795
  Set     7939
  Used    7946

ITVEG                                                             INTEGER, PARAMETER
  Decl    7446
  Set 
  Used

ITYP                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2026    2140    2742    2743    7077    7078    7079    7080    7081    7082    7083    7084    7085    7086    7087
          7088    7089    7090    7091    7092    7093    7094    7095    7096    7097    7098    7099    7101    7102    7103
          7104    7105    7106    7107    7108    7109    7152    7153    7154    7155    7156    7157    7158    7159    7160
          7161    7162    7163    7164    7165    7166    7167    7168    7169    7170    7171    7172    7173    7174    7175
          7176    7177    7178    7179    7180    7181    7182    7183    7184    7185    7252    7336    7745    7746    7747
          7762    7807    7999    8000    8001    8014    8092

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     220     237
  Set 
  Used     476     477     478     479     531     564     625     687

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     789     793
  Set 
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825     828

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     838     881
  Set 
  Used     900     904

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2027
  Set 
  Used    2052

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2141
  Set 
  Used    2226    2258

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2316    2364
  Set 
  Used    2429    2437    2482

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2695    2744
  Set 
  Used    2794    2851    2860

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3115    3282
  Set 
  Used    3460    3473    3559    3566    3574    3591    3601    3733

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3761    3822
  Set 
  Used    3932    3964    3992    4086    4173    4196

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4210    4249
  Set 
  Used    4314

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4563    4605
  Set 
  Used    4633

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4685    4878
  Set 
  Used    5021    5026    5031    5047

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5058    5101
  Set 
  Used    5193

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5279    5509
  Set 
  Used    5690    5691    5692    5713    5729    5741    5755    5772    5779    5796    5809    5818    5821    5879    5904

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6559    6573
  Set 
  Used    6629

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6667    6751
  Set 
  Used    6829    6866

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    7402    7456
  Set 
  Used    7562    7583    7594    7610    7680

IV                              Stack                             INTEGER
  Decl    7116
  Set     7258    7278    7287
  Used    7260    7263    7266    7267    7268    7269    7270    7271    7272    7273    7280    7281    7282    7283    7289
          7291    7292    7293    7294    7295    7296    7297    7298

IVEG                            Stack                             INTEGER
  Decl    2780
  Set     2788
  Used    2798    2803    2804    2805    2806    2807    2808    2810    2811    2818    2833    2853    2867    2868

IVEG                            Stack                             INTEGER
  Decl    3895
  Set     3960
  Used    3962    3983    3985    3996    3998    4000    4003    4005    4008    4010    4012    4022    4023    4027    4040
          4062    4066    4078    4080    4084    4088    4118    4119    4131    4137    4138    4143    4149    4150    4155
          4162    4165    4167    4169    4181    4187    4188

IVEG                            Stack                             INTEGER
  Decl    4281
  Set     4295    4311
  Used    4304    4305    4315    4323    4325    4334    4346    4353    4354    4365    4371    4372    4379    4389    4391
          4393    4394    4409    4410    4426    4432    4439    4445

IVEG                            Stack                             INTEGER
  Decl    4512
  Set     4529
  Used    4533

IVEG                            Stack                             INTEGER
  Decl    5144
  Set     5152
  Used    5153    5180    5181    5183    5197    5199    5217    5218    5219    5220    5225    5227    5230    5232    5237

IVEG                            Stack                             INTEGER
  Decl    5673
  Set     5727    5761
  Used    5730    5731    5732    5762    5781    5782

IVEGM                           Stack                             INTEGER
  Decl    7771
  Set     7830    7833
  Used    7839    7840    7841

IVEGM                           Stack                             INTEGER
  Decl    8027
  Set     8116    8120
  Used    8122    8123    8124

IWAVE                           Stack                             INTEGER
  Decl    4513
  Set     4530
  Used    4533

IWHEAT                                                            INTEGER, PARAMETER
  Decl    7507
  Set 
  Used    7562    7583    7594    7610    7615    7680

IWV                                                               INTEGER, PARAMETER
  Decl    7450
  Set 
  Used

IWV                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     205     296     297     434    3847    4248    4261    4499    4921    4922    4944    5564    5565    5622    6589
          6590    6756    6757    7077    7152    7184

J                               Stack                             INTEGER
  Decl     453
  Set      454
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468

J                               Stack                             INTEGER
  Decl     799
  Set      811
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     183     185
  Set 
  Used

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7711    7734
  Set 
  Used    7736    7740    7741    7742    7805

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7966    7988
  Set 
  Used    7990    7991    7992    7993    7996    7997    8090

JCG                             Stack                             INTEGER
  Decl    7113
  Set     7250
  Used    7253

JDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     209     351
  Set 
  Used     540     663

JJ                              Stack                             INTEGER
  Decl    6792
  Set     6879    6884
  Used    6881    6886

JMON                            Stack                             INTEGER
  Decl    7114
  Set     7251    7277
  Used    7253    7281    7282    7283

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(IN)
  Decl    2078    2134
  Set 
  Used    2224

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(INOUT)
  Decl    3116    3276
  Set     3555    3562
  Used    3560    3567    3592

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(INOUT)
  Decl    4670    5018
  Set 
  Used    5048

JSTNEU                          Stack                             LOGICAL
  Decl    5639
  Set 
  Used    5698

JTYP                            Stack                             INTEGER
  Decl    7115
  Set     7252    7259    7260    7279    7280
  Used    7253    7263    7266    7267    7268    7269    7270    7271    7272    7273    7281    7282    7283

K                               Stack                             INTEGER
  Decl    8015
  Set     8183    8190    8209    8262
  Used    8184    8185    8191    8210    8264    8265    8266

K                               Stack                             INTEGER
  Decl    8374
  Set     8378    8382    8399    8416    8449    8463
  Used    8379    8383    8400    8422    8430    8432    8442    8443    8454    8455    8457    8464

K1                              Stack                             INTEGER
  Decl    6795
  Set     6935    6940
  Used    6946    6961    6962    6963    6991    6992    6993

K2                              Stack                             INTEGER
  Decl    6796
  Set     6934    6941
  Used    6953    6955    6956    6957    6964    6965    6966    6967    6983    6985    6986    6987    6994    6995    6996
          6997

KK                              Stack                             INTEGER
  Decl    7486
  Set     7646
  Used    7647    7648    7650    7651    7653    7656    7659    7668

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     232
  Set 
  Used     358     359     360     361     362     363     364     745

KMON                            Stack                             INTEGER, DIMENSION(13)
  Decl    7504
  Set     7554    7558
  Used    7598    7653    7656    7668

KOLD                            Stack                             INTEGER
  Decl    7480
  Set     7552    7559
  Used    7554

KPBL                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6084    6160
  Set 
  Used    6162    6163

KQPBL                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6084    6161
  Set 
  Used    6164

KSTART                          Stack                             INTEGER
  Decl    8375
  Set     8387
  Used

KT                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     223     376
  Set 
  Used     483

KTM                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     367
  Set 
  Used     483

L                               Stack                             INTEGER
  Decl    8376
  Set     8415    8424    8436
  Used    8422    8430    8432    8438    8442    8443

LAT                             Stack                             INTEGER
  Decl    7786
  Set     7925
  Used    7926    7927    7929    7950    7956

LAT                             Stack                             INTEGER
  Decl    8043
  Set     8163
  Used    8164    8166    8168    8191    8210    8259    8260    8265    8266    8272    8273    8274

LATCO                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6566    6601
  Set 
  Used    6634

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     209     352
  Set 
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468     536     540
           630     663     703

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     789     792
  Set 
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825     828

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5268    5620
  Set 
  Used    5907    5914

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6402    6408
  Set 
  Used    6452    6513    6536

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6672    6768
  Set 
  Used    6813    6814    6815    6816

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7402    7455
  Set 
  Used    7684    7685    7686    7687    7688    7689    7690    7691    7692    7693    7694    7695    7696

LATMAX                          Stack                             INTEGER
  Decl    7784
  Set     7805
  Used    7925

LATMAX                          Stack                             INTEGER
  Decl    8018
  Set     8090
  Used    8163

LL                              Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    1151
  Set     1191
  Used    1192

LOG                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0     190    2231    2234    2239    2432    2454
          2486    2809    3487    4048    4099    4389    4391    4393    4426    4432    4633    6044    6056    6058    6061
          7326    7861    7868    7935    8131    8132

LON                             Stack                             INTEGER
  Decl    7787
  Set     7926
  Used    7927    7929    7950    7956

LON                             Stack                             INTEGER
  Decl    8044
  Set     8164
  Used    8166    8168    8191    8210    8259    8260    8265    8266    8272    8273    8274

LONMAX                          Stack                             INTEGER
  Decl    7785
  Set     7804
  Used

LONMAX                          Stack                             INTEGER
  Decl    8017
  Set     8089
  Used

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
           709     767    1812    2216    2303    2457    2489    2503    2535    2547    2623    2645    2663    2683    2813
          2842    2853    3482    3486    3509    3983    4050    4064    4101    4107    4147    4292    4627    4654    5782
          5790    6042    6053    6393    6645    6817    6834    7044    7253    7930    8319    8340    8349

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
          1180    1194    1818    2430    2458    2488    2502    2509    2535    2542    2547    2622    2812    2825    2838
          2841    2854    2868    3474    3475    3485    3515    3996    4049    4100    4135    4198    4304    4400    5197
          5784    6054    6367    6493    6835    6843    6851    7045    7330    7336    7931    7933    7946    8340

MIND                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    7483
  Set     7599
  Used    7650

ML                              Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6794
  Set     6861    6863
  Used    6923    6924    6925    6926    6927    6928    6955    6956    6957    6961    6962    6963    6964    6965    6966
          6972    6973    6974    6985    6986    6987    6991    6992    6993    6994    6995    6996    7002    7003    7004

MNL                             Stack                             INTEGER
  Decl    7487
  Set     7647    7648
  Used    7652    7668

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    7558    7648

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     235
  Set 
  Used     476     477     478     479     531     564     625     687

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     789     794
  Set 
  Used     813     814     815     828

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     839     876
  Set 
  Used     900     904

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1985    2021
  Set 
  Used    2065

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2078    2135
  Set 
  Used    2227    2234    2239    2259

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3115    3279
  Set 
  Used    3461    3560    3567    3575    3592    3735    3736    3737    3738

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4686    4875
  Set 
  Used    5047

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5280    5506
  Set 
  Used    5714

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    6667    6749
  Set     6869    6874    6875    7034
  Used    6834    6835    6837    6858    6881    6886    6899    6900    6901    6912    6913    6914    6923    6924    6925
          6926    6927    6928    6937    6946    6955    6956    6957    6961    6962    6963    6964    6965    6966    6967
          6972    6973    6974    6985    6986    6987    6991    6992    6993    6994    6995    6996    6997    7002    7003
          7004    7029    7030    7031    7032

MONL                            Dummy Arg                         INTEGER, DIMENSION(12), INTENT(IN)
  Decl    7403    7462
  Set 
  Used    7559    7647

MONL                            Use assoc                         INTEGER, From module OPTIONS, DIMENSION(12), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     829

MONTH                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    7402    7458
  Set 
  Used    7615

MONTH2                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    6559    6571
  Set 
  Used    6629

MONX                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6791
  Set     6858
  Used    6869    6875    7034

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     227     432
  Set 
  Used     736     755

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5933    6006
  Set 
  Used    6027    6039

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6088    6194
  Set 
  Used    6266    6291    6293    6302    6342    6351    6374

MXITER                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7711    7735
  Set 
  Used    7745    7746    7747    7874    7898    7938    7942    7947

MXITER                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7970    7989
  Set 
  Used    7999    8000    8001    8133    8140

N                               Stack                             INTEGER
  Decl    2410
  Set     2421    2428    2436    2481
  Used    2422    2423    2424    2429    2430    2431    2432    2437    2451    2454    2455    2457    2458    2460    2461
          2482    2483    2488    2496    2497    2498    2499    2500    2501    2502    2503    2508    2509    2510    2511
          2514    2515    2520    2523    2524    2525    2530    2531    2532    2533    2534    2535    2536    2537    2542
          2543    2544    2545    2548    2549    2554    2557    2558    2559    2605    2606    2610    2611    2614    2615
          2620    2621    2624    2625    2639    2640    2641    2645    2646    2647    2651    2652    2653    2663    2664
          2665    2669    2670    2671    2683

N                               Stack                             INTEGER
  Decl    4619
  Set     4622    4649    4653    4657
  Used    4627    4633    4650    4654    4658

NC                              Stack                             INTEGER
  Decl    6430
  Set     6446    6507    6530
  Used

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     221     230
  Set 
  Used     235     237     242     243     244     245     246     247     248     249     250     251     252     253     257
           258     259     260     261     265     266     267     268     269     270     271     272     273     274     275
           276     277     278     279     280     281     282     283     284     285     286     287     288     289     290
           291     292     293     294     295     296     297     298     299     300     301     302     306     307     308
           309     310     311     312     313     314     315     316     317     318     319     320     321     322     323
           324     325     329     330     331     332     333     334     335     336     337     338     339     340     341
           342     343     344     345     346     347     348     349     354     355     356     357     358     359     360
           361     362     363     364     365     366     369     370     371     372     373     374     375     380     381
           382     383     384     385     386     388     389     390     391     392     393     394     395     396     397
           398     401     402     403     404     406     409     410     411     412     413     415     416     417     418
           420     421     422     423     424     425     426     427     428     429     430     431     432     434     435
           436     437     438     439     440     441     442     443     444     445     446     447     448     449     450
           473     498     569     612     635     702     719     735     753     757

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     789     790
  Set 
  Used     793     794     795     798

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     839     875
  Set 
  Used     876     881     882     883     884     885     889     890     892     893

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     924    1025
  Set 
  Used    1032    1037    1038    1039    1043    1044    1045    1046    1050    1051    1052    1053    1054    1055    1056
          1057    1058    1059    1060    1061    1062    1063    1064    1065    1066    1067    1068    1069    1070    1071
          1072    1076    1077    1078    1079    1080    1081    1082    1083    1084    1085    1086    1090    1091    1092
          1093    1094    1095    1096    1097    1098    1099    1100    1101    1102    1103    1104    1108    1109    1110
          1111    1112    1113    1114    1115    1116    1117    1118    1119    1122    1124    1133    1134    1135    1136
          1137    1138    1145    1147    1148    1149    1150    1151

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1871    1912
  Set 
  Used    1914    1918    1919    1920    1921    1922    1923    1924    1925    1926    1927    1931    1932    1933    1934
          1935    1936    1937    1938    1939

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1985    2020
  Set 
  Used    2021    2027    2028    2029    2033    2037    2038    2039    2040    2041    2042    2044    2045

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2078    2132
  Set 
  Used    2135    2141    2142    2143    2148    2149    2150    2154    2155    2156    2160    2161    2162    2163    2164
          2165    2166    2167    2173

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2316    2359
  Set 
  Used    2364    2368    2369    2370    2371    2375    2377    2378    2379    2380    2381    2382

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2696    2733
  Set 
  Used    2735    2736    2744    2745    2749    2750    2751    2755    2756    2757    2758    2759    2760    2761    2762
          2763    2764    2765    2766    2768    2769    2770    2771    2772    2773    2774

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2885    2937
  Set 
  Used    2945    2949    2950    2951    2952    2956    2957    2958    2959    2960    2961    2962    2963    2964    2965
          2966    2967    2968    2969    2973    2974    2975    2976    2977    2978    2979    2980    2981    2982    2983
          2984    2985    2986    2990    2991    2992    2996    3001    3002    3003    3004    3005    3006    3007    3008
          3009

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3116    3274
  Set 
  Used    3279    3282    3284    3285    3286    3287    3288    3289    3294    3295    3296    3297    3298    3302    3303
          3304    3305    3306    3310    3311    3312    3313    3314    3315    3316    3317    3318    3319    3320    3321
          3322    3323    3324    3325    3326    3327    3328    3329    3330    3331    3332    3333    3334    3335    3336
          3337    3341    3342    3343    3344    3345    3346    3347    3348    3349    3350    3351    3352    3353    3354
          3355    3356    3357    3361    3362    3363    3364    3365    3366    3367    3368    3369    3370    3371    3372
          3373    3374    3375    3376    3377    3378    3379    3383    3384    3385    3386    3387    3388    3389    3390
          3391    3392    3393    3394    3395    3396    3397    3399    3400    3401    3402    3403    3404    3405    3408
          3414    3415    3416    3417    3419    3420    3421    3422    3423    3424    3425    3427    3428    3429    3438
          3461    3560    3567    3575    3592    3597    3602    3608    3657    3702    3719

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3762    3817
  Set 
  Used    3822    3823    3829    3830    3831    3835    3836    3837    3838    3839    3843    3844    3845    3846    3847
          3851    3852    3855    3856    3857    3858    3859    3860    3861    3862    3863    3864    3865    3866    3867
          3868    3869    3870    3871    3872    3873    3874    3875    3876    3877    3878    3879    3880    3881    3882
          3883    3884    3885

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4210    4246
  Set 
  Used    4248    4249    4250    4251    4252    4253    4258    4259    4260    4261    4265    4267    4268    4269    4270
          4271    4272    4273    4274    4275    4276    4277    4278

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4463    4485
  Set 
  Used    4487    4492    4496    4497    4498    4499    4500    4501    4502    4503    4504    4507    4508

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4563    4602
  Set 
  Used    4605    4609    4613    4614    4617

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4686    4872
  Set 
  Used    4875    4878    4882    4883    4884    4885    4886    4890    4891    4892    4893    4894    4895    4896    4897
          4898    4899    4900    4901    4902    4903    4904    4905    4906    4907    4908    4909    4910    4911    4912
          4913    4914    4915    4916    4917    4918    4919    4920    4921    4922    4923    4924    4925    4926    4927
          4932    4933    4934    4935    4936    4937    4938    4939    4941    4942    4943    4944    4945    4946    4947
          4948    4949    4950    4951    4952    4953    4954    4955    4956    4960    4961    4962    4963    4964    4965
          4966    4967    4968    4969    4970    4971    4972    4973    4974    4975    4976    4977    4978    4980    4981
          4982    4983    4984    4985    4986    4987    4988    4989    4990    4991    4992    4993    4994    4995    4996
          4997    4999    5003    5004    5005    5006    5007    5008    5009    5010    5011    5012    5013    5014    5015
          5016    5017    5021    5024    5027    5032    5048

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5058    5097
  Set 
  Used    5101    5105    5106    5107    5108    5109    5113    5114    5115    5116    5117    5121    5122    5123    5124
          5126    5127    5128    5129    5130    5131    5132    5133    5134    5135    5136    5137    5138    5139    5140
          5141

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5280    5503
  Set 
  Used    5506    5509    5514    5515    5516    5517    5518    5519    5520    5521    5525    5526    5527    5528    5529
          5533    5534    5535    5536    5537    5538    5539    5540    5541    5542    5543    5544    5545    5546    5547
          5548    5549    5550    5551    5552    5553    5554    5555    5556    5557    5558    5559    5560    5561    5562
          5563    5564    5565    5566    5567    5568    5569    5570    5574    5575    5576    5577    5578    5579    5580
          5581    5582    5583    5584    5585    5586    5587    5588    5589    5590    5591    5592    5593    5597    5598
          5599    5600    5601    5602    5603    5604    5605    5606    5607    5608    5609    5610    5611    5612    5613
          5614    5615    5616    5617    5622    5623    5624    5625    5626    5627    5628    5629    5630    5631    5632
          5633    5634    5635    5636    5637    5640    5645    5646    5647    5648    5649    5650    5651    5652    5653
          5654    5655    5656    5657    5658    5659    5661    5662    5663    5664    5665    5666    5667    5677    5678
          5679    5680    5714    5741    5818

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5931    5981
  Set 
  Used    5982    5983    5984    5985    5986    5987    5988    5989    5990    5992    5993    5994    5995    5996    5997
          5998    5999    6000    6001    6002    6003    6004    6005    6006    6021    6026    6038

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6087    6159
  Set 
  Used    6162    6163    6164    6165    6166    6167    6168    6169    6170    6171    6172    6173    6175    6178    6179
          6180    6181    6182    6183    6184    6185    6186    6187    6188    6189    6190    6191    6192    6193    6194
          6195    6196    6197    6198    6199    6200    6201    6202    6203    6204    6205    6206    6207    6208    6209
          6210    6211    6212    6213    6214    6215    6216    6217    6218    6219    6220    6221    6222    6223    6224
          6225    6226    6227    6265    6289    6292    6301    6341    6350    6373

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6401    6404
  Set 
  Used    6409    6410    6411    6412    6413    6414    6415    6416    6417    6418    6419    6420    6421    6422    6423
          6424    6425    6426    6427    6428    6429

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6559    6570
  Set 
  Used    6571    6573    6574    6575    6576    6577    6578    6579    6580    6581    6582    6583    6584    6585    6586
          6587    6588    6589    6590    6591    6592    6593    6594    6595    6596    6597    6598    6599    6600    6602
          6603    6604    6605    6606    6607    6608    6637

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6667    6748
  Set 
  Used    6749    6751    6752    6753    6754    6755    6756    6757    6758    6759    6760    6761    6762    6763    6764
          6765    6766    6767    6770    6771    6774    6775    6776    6777    6778    6779    6780    6781    6782    6783
          6784    6790    6791

NCOUNT                          Stack                             INTEGER
  Decl     453
  Set      472     475     497     500     568     571     611     614     634     637     718     721
  Used     476     477     478     479     505     506     507     508     509     514     515     516     517     518     520
           521     525     526     572     573     574     575     576     577     578     579     580     581     582     583
           615     641     642     643     644     645     647     648     649     650     652     653     657     658     722
           723     724     725     726     727

NCOUNT                          Stack                             INTEGER
  Decl    3442
  Set     3527    3529
  Used    3542    3704

NCOUNT                          Stack                             INTEGER
  Decl    6230
  Set     6285    6287
  Used    6348

NCOUNT                          Stack                             INTEGER
  Decl    6612
  Set     6636    6639
  Used    6640    6641    6642    6643

NDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5267    5619
  Set 
  Used    5907    5914

NFALB                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7231

NFCTRL                          Use assoc                         INTEGER, From module OPTIONS, DIMENSION(100), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7849    8129

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    5907    5914    6452    6513    6536    7190    7198    7849    8129

NFSIBD                          Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7203    7205

NINT                            Stack                             INTEGER
  Decl     453
  Set      486     489
  Used     496

NJ                                                                INTEGER, PARAMETER
  Decl    7073
  Set 
  Used    7101    7102    7107    7108

NJJ                                                               INTEGER, PARAMETER
  Decl    7073
  Set 
  Used    7103    7104    7105    7106

NK                                                                INTEGER, PARAMETER
  Decl    6786
  Set 
  Used    6788    6879    6884    6923    6924    6925    6936    6946    6953    6983

NK                                                                INTEGER, PARAMETER
  Decl    7073
  Set 
  Used    7104    7106    7110    7111

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     221     231
  Set 
  Used     455     483     531     564     565     587     603     618     625     633     687     688     695     702     707

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     789     791
  Set 
  Used     812     828

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     839     877
  Set 
  Used     897

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     924    1028
  Set 
  Used    1172    1274    1396    1403    1529    1753    1789    1810    1841

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1871    1913
  Set 
  Used    1951

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1985    2022
  Set 
  Used    2051

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2078    2136
  Set 
  Used    2213    2225    2252

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2316    2362
  Set 
  Used    2421    2428    2436    2481

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2696    2738
  Set 
  Used    2792    2849    2858

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2885    2940
  Set 
  Used    3024    3042    3055    3064    3073    3080    3089

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3115    3280
  Set 
  Used    3446    3461    3465    3472    3530    3543    3560    3567    3569    3575    3583    3592    3597    3602    3608
          3610    3617    3628    3632    3639    3657    3659    3670    3689    3702    3705    3719    3721    3732

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3762    3820
  Set 
  Used    3907    3963    3971    3977    3991    4032    4055    4085    4117    4125    4154    4161    4177    4195

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4210    4247
  Set 
  Used    4291    4297    4313    4450

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4463    4486
  Set 
  Used    4515    4532    4542

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4563    4603
  Set 
  Used    4622    4649    4653    4657

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4686    4876
  Set 
  Used    5021    5024    5027    5032    5047

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5058    5099
  Set 
  Used    5155    5164    5173    5178    5187    5191    5236    5243

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5280    5507
  Set 
  Used    5685    5714    5720    5728    5741    5747    5754    5763    5767    5771    5778    5788    5795    5807    5818
          5820    5842    5878    5903

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6401    6405
  Set 
  Used    6434    6456    6482    6495    6518    6539

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6559    6572
  Set 
  Used    6613    6615    6629

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6667    6750
  Set 
  Used    6787    6794    6808    6809    6811    6822    6830    6840    6847    6859    6868    6880    6885    6892    6897
          6907    6919    6932    7010    7039

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7402    7454
  Set 
  Used    7456    7457    7458    7463    7466    7468    7469    7470    7471    7472    7473    7474    7483    7484    7489
          7490    7503    7527    7544    7561    7582    7593    7609    7679

NNN                             Stack                             INTEGER
  Decl    7346
  Set     7370
  Used

NS                              Stack                             INTEGER
  Decl    7482
  Set     7581    7608
  Used    7587    7588    7620    7621    7622    7623    7629    7631    7632    7634    7635    7661    7670    7672

NSIB                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    8354    8361
  Set 
  Used    8363    8366    8368    8369    8382    8386    8463

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     221     357
  Set 
  Used     536     630

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     789     798
  Set 
  Used     829

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6566    6600
  Set 
  Used    6633

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6671    6767
  Set 
  Used    6872    6874

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    7403    7463
  Set     7514    7681    7682    7683
  Used    7682    7683

NTYP                            Stack                             INTEGER
  Decl     896
  Set 
  Used

NTYP                            Stack                             INTEGER
  Decl    2049
  Set     2052
  Used    2065

NTYP                            Stack                             INTEGER
  Decl    2205
  Set     2226    2258
  Used    2227    2234    2239    2259

NTYP                            Stack                             INTEGER
  Decl    2412
  Set     2429    2437    2482
  Used    2431    2432    2439    2440    2450    2452    2456    2458    2460    2485    2486    2487    2490    2491    2499
          2500    2501    2502    2519    2521    2522    2523    2525    2533    2534    2535    2536    2553    2555    2556
          2557    2559    2605    2610    2611    2614    2616    2620    2621    2624    2626    2641    2647    2653    2665
          2671

NTYP                            Stack                             INTEGER
  Decl    2782
  Set     2794    2851    2860
  Used    2795    2818    2822    2823    2825    2826    2829    2830    2833    2862

NTYP                            Stack                             INTEGER
  Decl    3441
  Set     3473    3733
  Used    3483    3484    3491    3735    3736    3737    3738

NTYP                            Stack                             INTEGER
  Decl    3896
  Set     3932    3964    3992    4086    4173    4196
  Used    3934    4094    4110    4174

NTYP                            Stack                             INTEGER
  Decl    5145
  Set     5193
  Used    5228

NTYP                            Stack                             INTEGER
  Decl    5672
  Set     5729    5755    5772    5779    5796    5809    5821    5879    5904
  Used    5731    5756    5775    5780    5781    5782    5783    5784    5798    5811    5823    5827    5831    5880    5881
          5882    5907    5910    5914

NTYP                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6790
  Set     6829    6866    6871    6873
  Used    6834    6835    6837    6871    6899    6900    6901    6912    6913    6914    6920    6923    6924    6925    6926
          6927    6928    6933    6955    6956    6957    6961    6962    6963    6964    6965    6966    6972    6973    6974
          6985    6986    6987    6991    6992    6993    6994    6995    6996    7002    7003    7004    7029    7030    7031
          7032

NZG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7973    7995
  Set 
  Used    7997    8190

NZG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    8355    8362
  Set 
  Used    8370    8371    8378    8399    8438    8454    8455

NZGMAX                                                            INTEGER, PARAMETER
  Decl    8005
  Set 
  Used    8006    8079

OCEALB                          Stack                             REAL(KIND=8)
  Decl    6610
  Set     6646
  Used    6648    6650

OCEALD                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6649    6651

OPTIONS                                                           Module
  Decl
  Set 
  Used      74

P0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3862
  Set     3955    4189
  Used    4025    4027    4034    4041    4061    4075    4088

P1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4507
  Set     4547
  Used    4549    4552

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     301
  Set 
  Used     534     560     628     683

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4462    4503
  Set 
  Used    4547

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4684    4926
  Set 
  Used    5023

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5277    5569
  Set 
  Used    5712

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6565    6594
  Set 
  Used    6632

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6670    6761
  Set     7026
  Used

P2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4508
  Set     4548
  Used    4549

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     302
  Set 
  Used     534     560     628     683

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4463    4504
  Set 
  Used    4548

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4685    4927
  Set 
  Used    5024

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5278    5570
  Set 
  Used    5713

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6565    6595
  Set 
  Used    6632

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6670    6762
  Set     7017
  Used

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     280
  Set 
  Used

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4210    4258
  Set 
  Used    4325    4409

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4462    4497
  Set     4545    4549    4550    4551
  Used    4546    4550    4551    4552

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4681    4905
  Set 
  Used    5023    5026

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5275    5548
  Set 
  Used    5709

PATH                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     187
  Set 
  Used     192

PATH_IN                         Static offset=3264                CHARACTER(200), PRIVATE, SAVE
  Decl     175
  Set      192
  Used

PBL                                                               Subroutine, Module procedure, PRIVATE
  Decl    4670
  Set 
  Used    5698

PBLSIB                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 4, 5)
  Decl    1124
  Set     1548    1549    1550    1551    1555    1557    1564    1566    1576    1578    1638    1639    1648    1649    1650
          1652    1684    1705    1740    1748    1754    1755    1756    1757    1758    1759    1760    1761    1762    1763
          1764    1765    1766    1767    1768    1769    1770    1771    1772    1773    1775    1777    1780    1784
  Used    1790    1791    1792    1793

PCOEFS                                                            REAL(KIND=8), PARAMETER, DIMENSION(2, 2)
  Decl    3887
  Set 
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     281
  Set 
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4210    4259
  Set 
  Used    4389    4391    4393    4394    4409    4410

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4462    4498
  Set     4546    4552
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4682    4906
  Set 
  Used    5023    5026

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5275    5549
  Set 
  Used    5710

PERC                            Stack                             REAL(KIND=8)
  Decl    7475
  Set     7642
  Used    7661

PH1                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     153
  Set      804
  Used    7178

PH12                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     450
  Set      464
  Used

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2697    2765
  Set 
  Used    2837

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3404
  Set 
  Used    3603

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4687    4955
  Set 
  Used    5048

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5281    5636
  Set 
  Used    5715

PH1_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     133
  Set     7213    7296
  Used     804     821    7158    7272

PH1_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     171
  Set      821    7692
  Used     204     464

PH1_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7083
  Set 
  Used    7203    7213

PH2                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     152
  Set      803
  Used    7177

PH22                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     449
  Set      465
  Used

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2697    2766
  Set 
  Used    2837

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3405
  Set 
  Used    3603

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4687    4956
  Set 
  Used    5048

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5281    5637
  Set 
  Used    5715

PH2_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     134
  Set     7214    7297
  Used     803     822    7159    7273

PH2_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     170
  Set      822    7693
  Used     203     465

PH2_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7084
  Set 
  Used    7203    7214

PHENST                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 9)
  Decl    7489
  Set     7516    7569    7570    7571    7572    7573    7576    7577    7578    7579    7587    7588
  Used    7587    7588    7598    7620    7621    7622    7623    7629    7631    7632    7634    7635    7649    7656    7657
          7663    7664

PHI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7466
  Set     7533    7538    7540
  Used    7538    7540    7564    7569    7570    7571    7572    7573    7577

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     284
  Set 
  Used

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4563    4613
  Set     4650    4654    4658
  Used

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4682    4909
  Set 
  Used    5021

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5275    5552
  Set 
  Used    5710

PHSAT                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     137
  Set     7217    7302
  Used    2486    2491    3491    4633    7162    7812    8096    8174

PHSAT_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7087
  Set 
  Used    7204    7217

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     217     286
  Set 
  Used

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    2694    2758
  Set 
  Used    2832    2833

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3112    3328
  Set 
  Used    3600

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4563    4614
  Set     4633
  Used    4650    4654

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4682    4911
  Set 
  Used    5021    5044

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5276    5554
  Set 
  Used    5710

PIE                             Static offset=0                   REAL(KIND=8), SAVE, Initialized
  Decl    7488
  Set 
  Used    7533

PIE                             Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1164    3051    3904    4310    5745

PINF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3876
  Set     4075
  Used    4078    4080

PMAX                            Stack                             REAL(KIND=8)
  Decl    2394
  Set     2485
  Used    2486    2491

PMIN                            Stack                             REAL(KIND=8)
  Decl    2395
  Set     2490
  Used    2491

POROS                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     139
  Set     7219    7304
  Used    2439    2440    2452    2456    2458    2460    2522    2523    2525    2556    2557    2559    2605    2610    2611
          2614    2616    2620    2621    2624    2626    2641    2647    2653    3934    4110    4174    5228    5690    5691
          5692    5731    5756    5798    5831    5880    5881    5882    7164    7814    8098    8176

POROS_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7089
  Set 
  Used    7204    7219

POWER1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4270
  Set     4371
  Used    4389    4393

POWER2                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4271
  Set     4372
  Used    4391    4394

POWS                            Stack                             REAL(KIND=8)
  Decl    2391
  Set     2450
  Used    2451    2453    2454

PP                                                                REAL(KIND=8), PARAMETER
  Decl    6018
  Set 
  Used    6061

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     251
  Set      526     658
  Used     563     686

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3761    3830
  Set 
  Used    3910    3917    3923

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4679    4937
  Set 
  Used    5031

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5279    5519
  Set 
  Used    5707    5884    5909

PPCI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     393
  Set 
  Used     658

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     252
  Set      525     657
  Used     563     686

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3761    3831
  Set 
  Used    3910    3917    3923

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4679    4938
  Set 
  Used    5031

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5279    5520
  Set 
  Used    5707    5884    5909

PPLI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     392
  Set 
  Used     657

PROPS                           Stack                             REAL(KIND=8)
  Decl    2402
  Set     2512    2513    2546    2547
  Used    2514    2515    2548    2549

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     330
  Set 
  Used     541     664

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     916    1109
  Set 
  Used    1248    1257

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3106    3362
  Set 
  Used    3694    3722

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4675    4961
  Set 
  Used    5038

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5268    5598
  Set 
  Used    5703    5863

PSIT                            Stack                             REAL(KIND=8)
  Decl    3410
  Set     3491
  Used    3499

PSIT                            Stack                             REAL(KIND=8)
  Decl    7792
  Set 
  Used    7900

PSIT                            Stack                             REAL(KIND=8)
  Decl    8040
  Set 
  Used    8149

PSIT                            Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    8283    8292
  Set     8303
  Used    8319    8339

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     250
  Set 
  Used     563     686

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1039
  Set 
  Used    1510

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3298
  Set 
  Used    3548    3701

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4936
  Set 
  Used    5046

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5279    5518
  Set 
  Used    5707

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     211     343
  Set 
  Used     544     667

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     916    1113
  Set 
  Used    1269

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3108    3372
  Set 
  Used    3694

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4676    4972
  Set 
  Used    5040

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5270    5611
  Set 
  Used    5704

PSYI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1145
  Set     1269
  Used    1490    1500    1512    1514    1516    1518    1520    1522    1811    1815    1828    1830    1834

Q3G                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2377
  Set     2417    2451    2454    2455    2457    2458    2460    2515    2549
  Used    2525    2559    2605    2606

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     242
  Set      573     698     709
  Used     562     685     703

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1037
  Set 
  Used    1510

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3294
  Set     3643    3709    3730
  Used    3450    3548    3701

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4932
  Set 
  Used    5046

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5278    5514
  Set 
  Used    5706

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6402    6410
  Set 
  Used    6436    6462    6500    6523    6544

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6560    6577
  Set     6617
  Used

QM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     244
  Set 
  Used     703

QM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6402    6427
  Set     6436    6462    6500    6544
  Used    6487

QMAX                            Stack                             REAL(KIND=8)
  Decl    2406
  Set     2610    2620
  Used    2612    2622

QMIN                            Stack                             REAL(KIND=8)
  Decl    2407
  Set     2611    2621
  Used    2613    2623

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     245
  Set 
  Used     703

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6402    6429
  Set     6487    6523
  Used    6462

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6562    6584
  Set 
  Used    6617

QMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3422
  Set     3450
  Used    3643

QMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6215
  Set     6277
  Used    6298

QMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl     221     359
  Set      723
  Used     577     578     579

QMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl    6084    6164
  Set     6298    6327    6335
  Used    6277    6319    6320    6344    6356

QQ                                                                REAL(KIND=8), PARAMETER
  Decl    6019
  Set 
  Used    6059

QQQ_1                           Stack                             REAL(KIND=8)
  Decl    2386
  Set     2599    2612    2613
  Used    2614    2616

QQQ_2                           Stack                             REAL(KIND=8)
  Decl    2386
  Set     2600    2622    2623
  Used    2624    2626

QSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     430
  Set      739     762     767     773
  Used     755     764     769     775     777

QSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6088    6192
  Set     6360
  Used

QSFC0                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     426
  Set      769     775
  Used     764     783

QSFCM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     428
  Set      764     777     783
  Used     739

QSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     404
  Set 
  Used     746

QSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6084    6167
  Set 
  Used    6313    6321    6332    6353

R4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    7077    7101

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used      99     100     102     103     104     105     106     107     108     109     110     111     112     114     115
           116     117     118     119     120     121     122     123     124     127     128     129     130     131     132
           133     134     135     136     137     138     139     140     141     142     143     144     145     146     147
           148     149     150     151     152     153     154     155     156     157     158     159     160     162     163
           164     165     166     167     168     169     170     171     172     186     234     242     243     244     245
           246     247     248     249     250     251     252     253     257     258     259     260     261     265     266
           267     268     269     270     271     272     273     274     275     276     277     278     279     280     281
           282     283     284     285     286     287     288     289     290     291     292     293     294     295     296
           297     298     299     300     301     302     306     307     308     309     310     311     312     313     314
           315     316     317     318     319     320     321     322     323     324     325     329     330     331     332
           333     334     335     336     337     338     339     340     341     342     343     344     345     346     347
           348     349     354     355     356     358     359     360     361     362     363     364     365     369     370
           371     372     373     374     375     380     381     382     383     384     385     386     388     389     390
           391     392     393     394     395     396     397     398     401     402     403     404     406     407     408
           409     410     411     412     413     415     416     417     418     420     421     422     423     424     425
           426     427     428     429     430     431     434     435     436     437     438     439     440     441     442
           443     444     445     446     447     448     449     450     795     796     882     883     884     885     889
           890     892     893    1027    1032    1037    1038    1039    1043    1044    1045    1046    1050    1051    1052
          1053    1054    1055    1056    1057    1058    1059    1060    1061    1062    1063    1064    1065    1066    1067
          1068    1069    1070    1071    1072    1076    1077    1078    1079    1080    1081    1082    1083    1084    1085
          1086    1090    1091    1092    1093    1094    1095    1096    1097    1098    1099    1100    1101    1102    1103
          1104    1108    1109    1110    1111    1112    1113    1114    1115    1116    1117    1118    1119    1122    1124
          1125    1126    1127    1128    1129    1130    1131    1132    1133    1134    1135    1136    1137    1138    1139
          1140    1141    1142    1143    1144    1145    1146    1147    1148    1149    1150    1152    1153    1154    1155
          1156    1157    1158    1160    1161    1162    1914    1918    1919    1920    1921    1922    1923    1924    1925
          1926    1927    1931    1932    1933    1934    1935    1936    1937    1938    1941    1942    1943    1944    1945
          1946    1947    1948    2026    2028    2029    2033    2037    2038    2039    2040    2041    2042    2044    2045
          2047    2140    2142    2143    2148    2149    2150    2154    2155    2156    2160    2161    2162    2163    2164
          2165    2167    2171    2173    2175    2177    2179    2182    2185    2186    2187    2188    2189    2190    2191
          2192    2193    2194    2195    2196    2197    2198    2199    2200    2201    2202    2203    2361    2368    2369
          2370    2371    2375    2377    2378    2379    2380    2381    2382    2383    2384    2385    2386    2388    2389
          2390    2391    2392    2393    2394    2395    2396    2397    2398    2399    2400    2401    2402    2403    2404
          2405    2406    2407    2408    2409    2413    2735    2736    2742    2743    2745    2749    2750    2751    2755
          2756    2757    2758    2759    2761    2762    2763    2764    2765    2766    2768    2769    2770    2771    2772
          2773    2774    2775    2776    2777    2778    2779    2939    2945    2949    2950    2951    2952    2956    2957
          2958    2959    2960    2961    2962    2963    2964    2965    2966    2967    2968    2969    2973    2974    2975
          2976    2977    2978    2979    2980    2981    2982    2983    2984    2985    2986    2990    2991    2992    2996
          3001    3002    3003    3004    3005    3006    3007    3008    3009    3011    3012    3013    3014    3015    3278
          3284    3285    3286    3287    3288    3289    3294    3295    3296    3297    3298    3302    3303    3304    3305
          3306    3310    3311    3312    3313    3314    3315    3316    3317    3318    3319    3320    3321    3322    3323
          3324    3325    3326    3327    3328    3329    3330    3331    3332    3333    3334    3335    3336    3337    3341
          3342    3343    3344    3345    3346    3347    3348    3349    3350    3351    3352    3353    3354    3355    3356
          3357    3361    3362    3363    3364    3365    3366    3367    3368    3369    3370    3371    3372    3373    3374
          3375    3376    3377    3378    3383    3384    3385    3386    3387    3388    3389    3390    3391    3392    3393
          3394    3395    3396    3397    3399    3400    3401    3402    3403    3404    3405    3408    3410    3411    3412
          3413    3414    3415    3416    3417    3419    3420    3421    3422    3423    3424    3425    3426    3427    3428
          3432    3433    3434    3435    3436    3437    3438    3819    3823    3829    3830    3831    3835    3836    3837
          3838    3839    3843    3844    3845    3846    3847    3851    3852    3855    3856    3857    3858    3859    3860
          3861    3862    3863    3864    3865    3866    3867    3868    3869    3870    3871    3872    3873    3874    3875
          3876    3877    3878    3879    3880    3881    3882    3883    3884    3885    3887    3890    3891    3892    3893
          4248    4250    4251    4252    4253    4258    4259    4260    4261    4265    4267    4268    4269    4270    4271
          4272    4273    4274    4275    4276    4277    4278    4283    4284    4285    4286    4487    4492    4496    4497
          4498    4499    4500    4501    4502    4503    4504    4507    4508    4609    4613    4614    4617    4874    4882
          4883    4884    4885    4886    4890    4891    4892    4893    4894    4895    4896    4897    4898    4899    4900
          4901    4902    4903    4904    4905    4906    4907    4908    4909    4910    4911    4912    4913    4914    4915
          4916    4917    4918    4919    4920    4921    4922    4923    4924    4925    4926    4927    4932    4933    4934
          4935    4936    4937    4938    4939    4941    4942    4943    4944    4945    4946    4947    4948    4949    4950
          4951    4952    4953    4954    4955    4956    4960    4961    4962    4963    4964    4965    4966    4967    4968
          4969    4970    4971    4972    4973    4974    4975    4976    4977    4978    4980    4981    4982    4983    4984
          4985    4986    4987    4988    4989    4990    4991    4992    4993    4994    4995    4996    4997    5003    5004
          5005    5006    5007    5008    5009    5010    5011    5012    5013    5014    5015    5016    5017    5098    5105
          5106    5107    5108    5109    5113    5114    5115    5116    5117    5121    5122    5123    5124    5126    5127
          5128    5129    5130    5131    5132    5133    5134    5135    5136    5137    5138    5139    5140    5141    5146
          5505    5514    5515    5516    5517    5518    5519    5520    5521    5525    5526    5527    5528    5529    5533
          5534    5535    5536    5537    5538    5539    5540    5541    5542    5543    5544    5545    5546    5547    5548
          5549    5550    5551    5552    5553    5554    5555    5556    5557    5558    5559    5560    5561    5562    5563
          5564    5565    5566    5567    5568    5569    5570    5574    5575    5576    5577    5578    5579    5580    5581
          5582    5583    5584    5585    5586    5587    5588    5589    5590    5591    5592    5593    5597    5598    5599
          5600    5601    5602    5603    5604    5605    5606    5607    5608    5609    5610    5611    5612    5613    5614
          5615    5616    5617    5622    5623    5624    5625    5626    5627    5628    5629    5630    5631    5632    5633
          5634    5635    5636    5637    5645    5646    5647    5648    5649    5650    5651    5652    5653    5654    5655
          5656    5657    5658    5659    5661    5662    5663    5664    5665    5666    5667    5674    5675    5676    5677
          5678    5679    5680    5681    5982    5983    5984    5985    5986    5987    5988    5989    5990    5991    5992
          5993    5994    5995    5996    5997    5998    5999    6000    6001    6002    6003    6004    6005    6008    6009
          6010    6011    6012    6013    6014    6015    6016    6017    6018    6019    6020    6021    6022    6023    6162
          6163    6164    6165    6166    6167    6168    6169    6170    6171    6172    6173    6174    6175    6176    6177
          6178    6179    6180    6181    6182    6183    6184    6185    6186    6187    6188    6189    6190    6191    6192
          6193    6195    6196    6197    6198    6199    6200    6201    6202    6203    6204    6205    6206    6207    6208
          6209    6210    6211    6212    6213    6214    6215    6216    6217    6218    6219    6220    6221    6222    6223
          6224    6225    6226    6227    6231    6232    6233    6234    6235    6236    6237    6238    6239    6240    6241
          6242    6243    6244    6246    6247    6248    6249    6250    6251    6406    6409    6410    6411    6412    6413
          6414    6415    6416    6417    6418    6419    6420    6421    6422    6423    6424    6425    6426    6427    6428
          6429    6574    6575    6576    6577    6578    6579    6580    6581    6582    6583    6584    6585    6586    6587
          6588    6589    6590    6591    6592    6593    6594    6595    6596    6597    6598    6599    6603    6604    6605
          6606    6607    6608    6610    6611    6752    6753    6754    6755    6756    6757    6758    6759    6760    6761
          6762    6763    6764    6765    6766    6770    6771    6774    6775    6776    6777    6778    6779    6780    6781
          6782    6783    6784    6787    6788    6798    6803    6805    6806    6807    7071    7072    7119    7120    7121
          7122    7123    7233    7234    7235    7236    7237    7238    7239    7240    7241    7242    7243    7345    7457
          7459    7460    7464    7465    7466    7467    7468    7469    7470    7471    7472    7473    7474    7475    7476
          7477    7478    7488    7489    7493    7495    7498    7503    7508    7509    7736    7737    7741    7742    7745
          7746    7747    7749    7754    7760    7761    7762    7763    7764    7765    7772    7773    7774    7775    7776
          7777    7778    7779    7780    7781    7782    7788    7789    7790    7791    7792    7793    7794    7874    7990
          7992    7993    7996    7997    7999    8000    8001    8006    8007    8008    8012    8013    8014    8016    8020
          8021    8022    8028    8029    8030    8031    8032    8033    8034    8035    8036    8037    8038    8040    8041
          8042    8062    8067    8079    8133    8284    8285    8286    8287    8288    8289    8290    8291    8292    8293
          8294    8295    8296    8297    8363    8364    8365    8366    8368    8369    8370    8371    8372

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     265
  Set 
  Used     551     674

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1050
  Set 
  Used    1284    1303    1340    1361    1369    1387    1463    1469    1510

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1870    1918
  Set 
  Used    1966    1967

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2076    2154
  Set     2299    2303
  Used

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2956
  Set 
  Used    3028    3033

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3310
  Set 
  Used    3558    3565    3590    3596    3607    3612    3613    3656    3698    3717

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4890
  Set 
  Used    5042

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5533
  Set 
  Used    5707    5869    5871

RADALB                                                            Subroutine, Module procedure
  Decl      86    6666
  Set 
  Used       0     624    6628

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl     218     297
  Set 
  Used

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    4462    4499
  Set 
  Used    4533

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    4684    4922
  Set 
  Used    5023

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    5277    5565
  Set 
  Used    5712

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6564    6590
  Set 
  Used

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6669    6757
  Set     7011    7012    7013    7014    7020    7021    7022    7023
  Used

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(INOUT)
  Decl     220     253
  Set      505     506     507     508     514     515     516     517     520     521     642     643     644     645     647
           648     649     650     652     653
  Used

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    4463    4492
  Set 
  Used    4533    4543    4544    4545    4546    4547    4548

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    4679    4939
  Set 
  Used    5024

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    5279    5521
  Set 
  Used    5707

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     279
  Set 
  Used

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     921    1061
  Set     1842    1843
  Used    1684    1705

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3112    3324
  Set     3644    3645
  Used    3451    3452    3699

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4462    4496
  Set     4516    4517    4533    4543    4544
  Used

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4681    4904
  Set 
  Used    5023    5044

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5275    5547
  Set 
  Used    5709    5895    5896    5915

RADUSE                                                            Subroutine, Module procedure, PRIVATE
  Decl    4462
  Set 
  Used    5023

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     266
  Set 
  Used     551     674

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1051
  Set 
  Used    1284    1303    1314    1340    1346    1361    1369    1376    1412    1418    1811

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1870    1919
  Set 
  Used    1954    1955

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1984    2037
  Set     2058
  Used

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2957
  Set 
  Used    3028    3033

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3311
  Set 
  Used    3574    3596    3607    3612    3613    3656    3698    3717

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4679    4891
  Set 
  Used    5042

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5534
  Set 
  Used    5707    5869    5871

RBC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     440
  Set      476
  Used     540     663

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     885
  Set      906
  Used

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2029
  Set 
  Used    2058

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3115    3288
  Set     3738
  Used    3460    3574

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4949
  Set 
  Used    5047

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5630
  Set 
  Used    5706

RBRD                                                              Subroutine, Module procedure, PRIVATE
  Decl    1984
  Set 
  Used    3573

RBYG                            Static offset=4864                REAL(KIND=8), PRIVATE, SAVE
  Decl     100
  Set      191
  Used    6043

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     268
  Set 
  Used     552     675

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1053
  Set     1412
  Used    1418    1823

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1870    1921
  Set     1954
  Used    1955

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3313
  Set 
  Used    3596    3607    3656    3698

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4893
  Set 
  Used    5043

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5536
  Set 
  Used    5708

RCDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1147
  Set     1398
  Used    1557    1842

RCDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1148
  Set     1399
  Used    1555    1842

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     344
  Set 
  Used     544     667

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     916    1114
  Set 
  Used    1269    1295    1314    1322

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1869    1933
  Set     1953
  Used

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3373
  Set 
  Used    3595    3606    3655    3694

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4973
  Set 
  Used    5040

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5612
  Set 
  Used    5704

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     267
  Set 
  Used     551     674

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     920    1052
  Set 
  Used    1284    1303    1322    1340    1346    1369    1376    1387    1434    1435    1436    1442    1443    1444    1451
          1457    1815    1824    1825    1826

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1870    1920
  Set 
  Used    1958    1960    1961    1963

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1984    2038
  Set     2066
  Used

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2958
  Set 
  Used    3028    3032

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3312
  Set 
  Used    3574    3596    3607    3612    3613    3656    3698    3717

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4892
  Set 
  Used    5042

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5535
  Set 
  Used    5708    5869    5871

RDAY                            Stack                             REAL(KIND=8)
  Decl    7464
  Set     7520
  Used    7621    7623    7628    7629    7632    7635    7649    7653    7657    7663    7664    7668

RDC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     439
  Set      477
  Used     539     662

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     884
  Set      905
  Used

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2028
  Set 
  Used    2066

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3115    3287
  Set     3737
  Used    3460    3574

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4948
  Set 
  Used    5047

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5629
  Set 
  Used    5706

RDENOM                          Stack                             REAL(KIND=8)
  Decl    2405
  Set     2596    2597    2598
  Used    2599    2600

RDSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3425
  Set     3451    3452
  Used    3644    3645

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    7233    7235    7237    7239    7240    7241    7242    7243    7874    8133

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3887    7754    8062    8067

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3887    7754    8062    8067

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3887    7754    8062    8067

RE_ASSIGN_SIB_SOIL_PROP                                           Subroutine, Module procedure
  Decl      89    7342
  Set 
  Used

RFAC                            Stack                             REAL(KIND=8)
  Decl    2189
  Set     2208
  Used

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     269
  Set 
  Used     552     675

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1054
  Set     1422
  Used    1434    1442    1824

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1870    1922
  Set     1956
  Used    1958

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3314
  Set 
  Used    3596    3607    3656    3698

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4894
  Set 
  Used    5043

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5537
  Set 
  Used    5708

RGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1149
  Set     1400
  Used    1549    1843

RGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1150
  Set     1401
  Used    1548    1843

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     416
  Set 
  Used     751

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    5984
  Set     6072
  Used

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6183
  Set 
  Used    6289    6305    6306    6308    6309    6312    6313    6315    6318    6319    6321    6330    6331    6332    6334
          6336    6352    6353    6355    6356

RHO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     424
  Set 
  Used     754

RHO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6088    6191
  Set     6268
  Used    6305    6306    6308    6309    6312    6313    6315    6318    6319    6321    6331    6332    6334    6336    6352
          6353    6355    6356    6375    6376    6379    6381

RHO4                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4277
  Set     4416
  Used    4426    4432

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     210     342
  Set 
  Used     544     667

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1932
  Set 
  Used    1953

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3107    3371
  Set 
  Used    3595    3606    3655

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4676    4971
  Set 
  Used    5039

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5269    5610
  Set 
  Used    5704    5848

RHOICE                                                            REAL(KIND=8), PARAMETER
  Decl    6250
  Set 
  Used    6260

RIB                             Stack                             REAL(KIND=8)
  Decl    2177
  Set     2261    2265    2266
  Used    2267    2268    2269    2270    2280    2281    2282    2284    2286

RIB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5933    6003
  Set     6052    6053    6054
  Used    6055    6056    6058    6061

RIB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6210
  Set 
  Used    6291

RIBC                                                              REAL(KIND=8), PARAMETER
  Decl    6009
  Set 
  Used

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     415
  Set 
  Used     751

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5931    5983
  Set     6071
  Used

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6182
  Set 
  Used    6289    6375    6376    6379    6381

RNET                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6187
  Set     6267
  Used    6312

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     324
  Set 
  Used     550     673

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2316    2375
  Set     2606    2641    2647    2653
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3760    3851
  Set     3926    3987    4108    4167
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4997
  Set 
  Used    5030

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5057    5124
  Set     5230
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5273    5592
  Set     5831
  Used    5702    5740    5818    5884    5910

ROFFO                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3878
  Set     4104    4107
  Used    4108    4109

ROOT                                                              Subroutine, Module procedure, PRIVATE
  Decl    4563
  Set 
  Used    5021

ROOTD                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     135
  Set     7215    7298
  Used    3602    5781    5782    7160    7271

ROOTD                           Dummy Arg                         REAL(KIND=8), DIMENSION(13, 2), INTENT(IN)
  Decl    2696    2742
  Set 
  Used    2818    2833

ROOTD_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7085
  Set 
  Used    7204    7215

ROOTGC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7468
  Set     7611    7669
  Used

RPLANT                          Stack                             REAL(KIND=8)
  Decl    8297
  Set     8339    8340
  Used    8348

RR                                                                REAL(KIND=8), PARAMETER
  Decl    6020
  Set 
  Used    6059

RSAME                           Stack                             REAL(KIND=8)
  Decl    2397
  Set     2495    2498    2529    2532
  Used    2500    2534

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     283
  Set 
  Used     555     678

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1063
  Set 
  Used    1198    1424    1822

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1871    1927
  Set 
  Used    1957

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3326
  Set     3487
  Used    3516    3517    3597    3608    3657    3699

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4682    4908
  Set 
  Used    5044

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5275    5551
  Set 
  Used    5710

RSOIL                           Stack                             REAL(KIND=8)
  Decl    8294
  Set     8313    8333
  Used    8348

RSOILM                          Stack                             REAL(KIND=8)
  Decl    7782
  Set     7897
  Used    7899

RSOILM                          Stack                             REAL(KIND=8)
  Decl    8038
  Set     8138
  Used    8145

RSOILM                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8288
  Set 
  Used    8333

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     282
  Set 
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     921    1062
  Set     1198
  Used    1412    1422

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1870    1926
  Set 
  Used    1954    1956

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    2694    2757
  Set     2861    2863    2867    2868
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3112    3325
  Set     3516
  Used    3453    3454    3596    3600    3607    3656    3699

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4210    4260
  Set     4315    4346    4426    4432    4439    4445    4451
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4682    4907
  Set 
  Used    5026    5044

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5275    5550
  Set 
  Used    5710

RSTPAR                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     159
  Set      809
  Used    7184

RSTPAR2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2, 3)
  Decl     434
  Set      466     467     468
  Used

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    4211    4248
  Set 
  Used    4334    4353    4354    4426    4439

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    4686    4944
  Set 
  Used    5027

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    5280    5622
  Set 
  Used    5714

RSTPAR_FIXED                    Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     127
  Set     7207    7289
  Used     809     823     824     825    7152    7263

RSTPAR_GBL                      Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     172
  Set      823     824     825    7694    7695    7696
  Used     205     466     467     468

RSTPAR_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 2, 3)
  Decl    7077
  Set 
  Used    7203    7207

RSURF                           Stack                             REAL(KIND=8)
  Decl    1126
  Set     1424    1822
  Used    1435    1436    1443    1444    1825    1826

RSURF                           Stack                             REAL(KIND=8)
  Decl    1942
  Set     1957
  Used    1960    1961

RUNOFF                                                            Subroutine, Module procedure, PRIVATE
  Decl    2315
  Set 
  Used    5817

RZ2                             Stack                             REAL(KIND=8)
  Decl    2203
  Set     2281
  Used    2284    2286

RZL                             Stack                             REAL(KIND=8)
  Decl    2202
  Set     2280
  Used    2284

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl     221     355
  Set 
  Used

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl    6565    6597
  Set 
  Used    6640    6641    6642    6643

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl    6671    6764
  Set     7015    7016    7024    7025
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     217     289
  Set 
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     922    1067
  Set 
  Used    1180    1187

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3113    3331
  Set 
  Used    3474    3475    3700

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3760    3845
  Set 
  Used    3983    4040    4062

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4683    4914
  Set 
  Used    5030    5045

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5276    5557
  Set 
  Used    5711

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6563    6588
  Set 
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6668    6755
  Set     6832    6833    6836
  Used    6843

SATCO                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     138
  Set     7218    7303
  Used    2452    2499    2501    2502    2533    2535    2536    4094    7163

SATCO_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7088
  Set 
  Used    7204    7218

SCOV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6778
  Set     6841    6843
  Used    6893    6950    6956    6957    6962    6963    6965    6966    6973    6974

SCOV2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6779
  Set     6849    6851
  Used    6893    6925    6928    6980    6986    6987    6992    6993    6995    6996    7003    7004

SDEP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     892
  Set      901     902
  Used     903     905     906

SEASFC                                                            Subroutine, Module procedure
  Decl      84    6083
  Set 
  Used     743

SENS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     409
  Set 
  Used     750

SENS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6178
  Set     6331    6352
  Used    6333    6355

SEXTRP                                                            Subroutine, Module procedure
  Decl      85    6399
  Set 
  Used     700

SFC_SSIB                                                          Module
  Decl       6
  Set 
  Used

SFLXES                                                            Subroutine, Module procedure, PRIVATE
  Decl    3104
  Set 
  Used    5036

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     322
  Set 
  Used     550     673

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2882    2986
  Set     3057
  Used

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3357
  Set 
  Used    3716

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4674    4996
  Set 
  Used    5042

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5057    5122
  Set 
  Used    5244

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5272    5590
  Set 
  Used    5702    5740    5896    5915

SI1                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7069    7071
  Set 
  Used    7326

SIBMAX                          Stack                             REAL(KIND=8), DIMENSION(13)
  Decl    7762
  Set     7847
  Used    7849    7861    7868    7880    7889    7914    7956

SIBMAX                          Stack                             REAL(KIND=8), DIMENSION(13)
  Decl    8014
  Set     8128
  Used    8129    8131    8132    8134    8137    8153

SIBWET                                                            Subroutine, Module procedure
  Decl      91    7710
  Set 
  Used

SIBWET_GLSM                                                       Subroutine, Module procedure
  Decl      92    7965
  Set 
  Used

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl     225     407
  Set 
  Used     749

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    5932    5991
  Set 
  Used    6049

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    6086    6176
  Set 
  Used    6255    6261    6290    6331    6352

SIGN                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1845    3662    7538    7540

SIN                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used     749

SINCLI                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6021
  Set     6034
  Used    6041

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     210     341
  Set 
  Used     544     667

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5269    5609
  Set 
  Used    5866    5867

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5933    5982
  Set 
  Used    6034

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6085    6175
  Set 
  Used    6291    6386    6387    6390    6391

SINMAX                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7711    7737
  Set 
  Used    7930    7931    7932    7933    7934    7935

SINP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7711    7736
  Set 
  Used    7929

SL1                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7069    7072
  Set 
  Used    7326

SL1KAP                          Stack                             REAL(KIND=8)
  Decl    6238
  Set     6261
  Used    6308    6312    6316    6317

SLOP                            Stack                             REAL(KIND=8)
  Decl    2390
  Set     2438    2439    2440
  Used    2453

SLRAD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     401
  Set 
  Used     745

SLRAD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6084    6165
  Set 
  Used    6267

SM                              Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7745
  Set     7798    7916
  Used    7946    7948    7950    7956

SM                              Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7999
  Set     8083    8155
  Used

SMAL2                                                             REAL(KIND=8), PARAMETER
  Decl    2413
  Set 
  Used    2422    2423    2424

SMALL                                                             REAL(KIND=8), PARAMETER
  Decl    3432
  Set 
  Used    3482    3486    3509

SMIN                            Stack                             REAL(KIND=8)
  Decl    7776
  Set     7868
  Used    7874

SMIN                            Stack                             REAL(KIND=8)
  Decl    8032
  Set     8132
  Used    8133

SNOFAC                          Stack                             REAL(KIND=8)
  Decl    3015
  Set     3063
  Used    3066    3082

SNOMEL                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3063    4131    4132    4135    4143    4144    4147    5199    5201    5216

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     217     290
  Set 
  Used

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3760    3846
  Set     4010    4080    4088    4137    4149    4188
  Used    4012    4118    4143    4187

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4683    4915
  Set 
  Used    5030

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5057    5115
  Set     5180    5183    5217    5219
  Used    5197    5219    5237

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5276    5558
  Set 
  Used    5711    5740

SNOWM                                                             Subroutine, Module procedure, PRIVATE
  Decl    5056
  Set 
  Used    5739

SNOWP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3884
  Set     4000    4005
  Used    4010    4088    4119

SOILM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7972    7990
  Set     8272
  Used

SOILMO                          Stack                             REAL(KIND=8)
  Decl    7780
  Set     7883    7908
  Used    7889    7914    7916

SOILMO                          Stack                             REAL(KIND=8)
  Decl    8036
  Set     8136    8152
  Used    8137    8153    8155

SPECHT                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3864
  Set     3968    3973
  Used    4120    4121

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     421
  Set 
  Used     753

SPEEDM                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2173
  Set     2215    2216
  Used    2229    2245    2262    2298

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5998
  Set     6041    6042
  Used    6052    6070

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6087    6188
  Set     6392    6393
  Used    6290    6330

SPWET                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3883
  Set     4198
  Used    4199

SPWET                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5136
  Set     5197
  Used    5201

SPWET1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3865
  Set     3996
  Used    4120    4121

SQRT                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    2058    2215    5745    6057    6059    6062    6388    6392    7058

SREF                            Stack                             REAL(KIND=8)
  Decl    7775
  Set     7861
  Used    7874    7883

SREF                            Stack                             REAL(KIND=8)
  Decl    8031
  Set     8131
  Used    8133    8136

SS                                                                REAL(KIND=8), PARAMETER
  Decl    6013
  Set 
  Used    6062

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     395
  Set 
  Used     708     710     711     712     713     714     715

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    7711    7742
  Set     7801    7950
  Used

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7969    7993
  Set     8086    8259    8266
  Used

SSIBT                           Stack                             REAL(KIND=8)
  Decl    7791
  Set     7946
  Used    7948

SSIB_DRIVER                                                       Subroutine, Module procedure
  Decl      98     208
  Set 
  Used

ST4                             Stack                             REAL(KIND=8)
  Decl    6239
  Set     6262
  Used    6307

STB4                            Stack                             REAL(KIND=8)
  Decl    1160
  Set     1393
  Used    1399    1400    1401

STB8                            Stack                             REAL(KIND=8)
  Decl    1161
  Set     1394
  Used    1398

STBI                            Stack                             REAL(KIND=8)
  Decl    6807
  Set     7038
  Used    7058

STEFAN                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1393    1394    6262    6314    7038    7049    7050    7051    7052    7056

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     218     295
  Set 
  Used

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2694    2759
  Set 
  Used    2867

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3113    3336
  Set     3453    3454    3517
  Used    3600

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4684    4920
  Set 
  Used    5045

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5277    5563
  Set 
  Used    5712

STOMAT                                                            Subroutine, Module procedure, PRIVATE
  Decl    4209
  Set 
  Used    5026

STOR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     418
  Set 
  Used     752

STOR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6087    6185
  Set     6283    6366
  Used

STRES2                                                            Subroutine, Module procedure, PRIVATE
  Decl    2693
  Set 
  Used    3599

SUBDT                           Stack                             REAL(KIND=8)
  Decl    2388
  Set     2415
  Used    2453    2522    2523    2525    2556    2557    2559    2605    2606    2610    2611    2614    2616    2620    2621
          2624    2626

SUBDTI                          Stack                             REAL(KIND=8)
  Decl    2389
  Set     2416
  Used    2456    2459

SYR                                                               REAL(KIND=8), PARAMETER
  Decl    7508
  Set 
  Used    7569    7570    7571    7572    7573    7576    7577    7579

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     272
  Set 
  Used     553     676

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1055
  Set     1303
  Used    1314    1322

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2155
  Set 
  Used    2260

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2694    2755
  Set 
  Used    2852

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3317
  Set     3544    3612
  Used    3558    3565    3585    3590    3600    3619    3698

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4897
  Set 
  Used    5043

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5540
  Set     5871
  Used    5708

TAEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3004
  Set     3032
  Used

TBEE                            Stack                             REAL(KIND=8)
  Decl    7764
  Set     7813
  Used    7861    7868    7899

TBEE                            Stack                             REAL(KIND=8)
  Decl    8021
  Set     8097    8175
  Used    8131    8132    8143

TBEE                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8286
  Set 
  Used    8303

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     257
  Set      594
  Used     532     560     626     683     701

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1043
  Set 
  Used    1303    1314    1398    1400

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2695    2749
  Set 
  Used    2799

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2949
  Set 
  Used    3026

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3302
  Set     3640    3706
  Used    3447    3536    3544    3570    3601    3612    3646    3648    3700    3718

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3760    3835
  Set     4156
  Used    3965

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4685    4882
  Set 
  Used    5030    5045

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5058    5105
  Set     5221
  Used    5157

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5278    5525
  Set     5721
  Used    5713    5741    5871    5911

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6400    6413
  Set 
  Used    6439    6459    6498    6521    6542

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6560    6574
  Set     6620
  Used    6630

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6668    6752
  Set 
  Used    6842    7040

TC0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     224     397
  Set 
  Used     701

TC0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6418
  Set     6439    6459    6498    6542
  Used    6485

TC4                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6780
  Set     7040
  Used    7049    7052    7056

TCEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3002
  Set     3026
  Used    3032    3066

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     369
  Set 
  Used     594     702

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6401    6423
  Set     6485    6521
  Used    6459

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6561    6581
  Set 
  Used    6620

TCSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3419
  Set     3447
  Used    3640

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     270
  Set 
  Used     552     675

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2039
  Set 
  Used    2053    2054

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3315
  Set     3570
  Used    3574

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4895
  Set 
  Used    5043

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5538
  Set 
  Used    5708

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     259
  Set      593     604
  Used     561     605     606     684     701

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1045
  Set 
  Used    1684

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2316    2369
  Set 
  Used    2511    2545

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2951
  Set 
  Used    3057

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3304
  Set 
  Used    3701    3718

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3760    3837
  Set 
  Used    4164

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4685    4884
  Set 
  Used    5030    5046

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5058    5107
  Set 
  Used    5226

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5278    5527
  Set     5748
  Used    5713    5741    5818    5911

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6400    6411
  Set 
  Used    6437    6457    6496    6519    6540

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6561    6578
  Set     6618
  Used

TD0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     223     373
  Set      606
  Used     701

TD0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6416
  Set     6437    6457    6496    6540
  Used    6483

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     371
  Set      605
  Used     593     604     702

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6401    6421
  Set     6483    6519
  Used    6457

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6562    6585
  Set 
  Used    6618

TEM                             Stack                             REAL(KIND=8)
  Decl    1948
  Set     1958
  Used    1959    1962

TEMDIF                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2044
  Set     2054    2056    2060    2062
  Used    2065

TEMP                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 18)
  Decl    6787
  Set     6899    6901    6912    6914    6923    6926    6955    6967    6972    6985    6997    7002
  Used    7011    7012    7013    7014    7015    7016    7017    7018    7019    7020    7021    7022    7023    7024    7025
          7026    7027    7028

TEMRES                                                            Subroutine, Module procedure, PRIVATE
  Decl     915
  Set 
  Used    3693

TEST                            Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    7490
  Set     7526    7671
  Used    7619

TEX                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3874
  Set     4061    4064    4066
  Used    4070

TF                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     898    1191    2508    2512    2542    2546    3043    3066    3082    3513    3978    4002    4071    4077    4087
          4123    4127    4134    4136    4146    4148    4164    5179    5188    5194    5205    5207    5226    6823    6842
          6848

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     258
  Set      600
  Used     532     561     596     598     626     684     701

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     838     889
  Set 
  Used

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1044
  Set 
  Used    1191    1303    1322    1399    1401    1684

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2033
  Set 
  Used    2065

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2316    2368
  Set 
  Used    2508    2510    2542    2544

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2695    2750
  Set 
  Used    2801

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2950
  Set 
  Used    3025    3057

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3303
  Set     3641    3707
  Used    3448    3460    3499    3513    3537    3571    3574    3601    3612    3647    3649    3700    3718

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3760    3836
  Set     4158
  Used    3972    4071    4182    4184

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4685    4883
  Set 
  Used    5030    5045

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5058    5106
  Set     5223
  Used    5166

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5278    5526
  Set     5722
  Used    5713    5741    5818    5871    5911

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6400    6412
  Set 
  Used    6438    6458    6497    6520    6541

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6560    6575
  Set     6619
  Used    6630

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6668    6753
  Set 
  Used    6823    6848    7041

TG0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     223     374
  Set      621
  Used     701

TG0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6400    6417
  Set     6438    6458    6497    6541
  Used    6445    6452    6484    6506    6513

TG4                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6781
  Set     7041
  Used    7050    7051    7057

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     356
  Set 
  Used     535     629     726

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6566    6598
  Set 
  Used    6633

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6671    6765
  Set     7058
  Used

TGEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3001
  Set     3025
  Used    3032    3043    3082

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     370
  Set      620
  Used     600     702

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6401    6422
  Set     6484    6493    6520
  Used    6458    6529    6536

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6562    6582
  Set 
  Used    6619

TGS                             Stack                             REAL(KIND=8)
  Decl    2400
  Set     2510    2544
  Used    2511    2545

TGSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3420
  Set     3448
  Used    3641

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     271
  Set 
  Used     552     675

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2040
  Set 
  Used    2059    2060

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3316
  Set     3571
  Used    3574

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4680    4896
  Set 
  Used    5043

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5274    5539
  Set 
  Used    5708

THA                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5932    5999
  Set     6050
  Used    6051

THA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6206
  Set 
  Used    6290

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     300
  Set 
  Used     534     560     628     683

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1072
  Set 
  Used    1397

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3337
  Set 
  Used    3700

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4462    4502
  Set 
  Used    4543    4544

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4684    4925
  Set 
  Used    5023    5045

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5277    5568
  Set 
  Used    5712

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6564    6593
  Set 
  Used    6632

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6670    6760
  Set     7046
  Used    7047    7057

THETA                           Stack                             REAL(KIND=8)
  Decl    3893
  Set     3934
  Used    3940

THM                             Stack                             REAL(KIND=8)
  Decl    2171
  Set     2257
  Used    2260    2262

THM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5933    6000
  Set     6049
  Used    6051    6052

THM                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6207
  Set 
  Used    6291

THRSH                           Stack                             REAL(KIND=8)
  Decl    7465
  Set     7525
  Used

THRU                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3858
  Set     3927    4070    4072    4089
  Used    4075    4096    4097    4104    4109    4189

THVGM                           Stack                             REAL(KIND=8)
  Decl    2175
  Set     2260
  Used    2261

THVGM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5933    6002
  Set     6051
  Used    6052

THVGM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6209
  Set 
  Used    6291

TICE                                                              REAL(KIND=8), PARAMETER
  Decl    6247
  Set 
  Used    6304    6314    6329    6364    6365    6367

TICE                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     758     780

TIM                             Stack                             REAL(KIND=8)
  Decl    1155
  Set     1166
  Used    1548

TIMCN2                          Stack                             REAL(KIND=8)
  Decl    1154
  Set     1165
  Used    1166    1684

TIMCON                          Stack                             REAL(KIND=8)
  Decl    1153
  Set     1164
  Used    1165

TIMCON                          Stack                             REAL(KIND=8)
  Decl    3011
  Set     3051
  Used    3057

TIMCON                          Stack                             REAL(KIND=8)
  Decl    5676
  Set     5745
  Used    5748

TIME                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7746
  Set     7799    7917
  Used    7940

TIME                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    8000
  Set     8084    8156
  Used

TIMES                           Stack                             REAL(KIND=8)
  Decl    7779
  Set     7882    7915
  Used    7917

TIMES                           Stack                             REAL(KIND=8)
  Decl    8035
  Set     8135    8154
  Used    8156

TLAI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7470
  Set     7613    7659    7661
  Used    7666    7669    7685

TLL                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     157
  Set      807
  Used    7182

TLL2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     443
  Set      461
  Used

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2696    2762
  Set 
  Used    2804    2806    2807    2808

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3401
  Set 
  Used    3602

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4687    4952
  Set 
  Used    5048

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5281    5633
  Set 
  Used    5715

TLL_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     130
  Set     7210    7293
  Used     807     818    7155    7268

TLL_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     167
  Set      818    7689
  Used     200     461

TLL_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7080
  Set 
  Used    7203    7210

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     243
  Set      572
  Used     562     685     703

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1038
  Set 
  Used    1303

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2148
  Set 
  Used    2257

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2885    2945
  Set 
  Used    3027

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3295
  Set     3642    3708    3729
  Used    3449    3559    3566    3570    3571    3591    3612    3701    3719

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3761    3829
  Set 
  Used    4077    4087    4122    4123    4132    4133    4134    4144    4145    4146

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4933
  Set 
  Used    5031    5046

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5278    5515
  Set 
  Used    5706    5871    5911

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6402    6409
  Set 
  Used    6435    6461    6499    6522    6543

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6560    6576
  Set     6616
  Used

TM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     246
  Set 
  Used     703

TM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6402    6426
  Set     6435    6461    6499    6543
  Used    6486

TMAX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     448
  Set      598
  Used     604

TMEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3003
  Set     3027
  Used    3033

TMIN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     447
  Set      596
  Used     604     620     621

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     247
  Set 
  Used     703

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6402    6428
  Set     6486    6522
  Used    6461

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6562    6583
  Set 
  Used    6616

TMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3421
  Set     3449
  Used    3642

TMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6214
  Set     6276
  Used    6297

TMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl     221     358
  Set      722
  Used     574     575     576

TMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl    6084    6162
  Set     6297    6326    6333
  Used    6276    6316    6317    6343    6355

TN                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5138
  Set     5205
  Used    5209

TOP                             Stack                             REAL(KIND=8)
  Decl    1132
  Set     1469
  Used    1471

TOP                             Stack                             REAL(KIND=8)
  Decl    1946
  Set     1967
  Used    1971

TOPT                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     158
  Set      808
  Used    7183

TOPT2                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     442
  Set      460
  Used

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2696    2761
  Set 
  Used    2805    2806    2808    2811

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3400
  Set 
  Used    3602

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4687    4951
  Set 
  Used    5048

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5280    5632
  Set 
  Used    5715

TOPT_FIXED                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     129
  Set     7209    7292
  Used     808     817    7154    7267

TOPT_GBL                        Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     166
  Set      817    7688
  Used     199     460

TOPT_R4                         Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7079
  Set 
  Used    7203    7209

TOTALP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3857
  Set     3910
  Used    3911    3917    3923    3955

TOTDEP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5663
  Set     5775    5780
  Used    5782

TOTWB                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5677
  Set     5690
  Used    5906    5908

TPH1                            Stack                             REAL(KIND=8)
  Decl    7773
  Set     7840
  Used    7900

TPH1                            Stack                             REAL(KIND=8)
  Decl    8029
  Set     8123
  Used    8147

TPH1                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8290
  Set 
  Used    8339

TPH2                            Stack                             REAL(KIND=8)
  Decl    7774
  Set     7841
  Used    7900

TPH2                            Stack                             REAL(KIND=8)
  Decl    8030
  Set     8124
  Used    8148

TPH2                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8291
  Set 
  Used    8339

TPHSAT                          Stack                             REAL(KIND=8)
  Decl    7763
  Set     7812
  Used    7861    7868    7899

TPHSAT                          Stack                             REAL(KIND=8)
  Decl    8020
  Set     8096    8174
  Used    8131    8132    8144

TPHSAT                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8287
  Set 
  Used    8303

TPOROS                          Stack                             REAL(KIND=8)
  Decl    7765
  Set     7814
  Used    7847    7850

TPOROS                          Stack                             REAL(KIND=8)
  Decl    8022
  Set     8098    8176
  Used    8128    8130    8266    8274

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     493    7191    7195    7199

TS                              Stack                             REAL(KIND=8)
  Decl    2401
  Set     2511    2545
  Used    2512    2546

TS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3863
  Set     3965    3972
  Used    3978    4002    4122    4123    4132    4133    4134    4144    4145    4146

TS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5127
  Set     5157    5166    5207    5209
  Used    5174    5175    5221    5223

TSAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3423
  Set     3585
  Used    3619

TSD                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3875
  Set     4122    4133    4136    4145    4148
  Used    4127    4136    4148    4156    4158

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     224     394
  Set      726     766     771
  Used     761     781

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5989
  Set 
  Used    6029    6031    6040

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6085    6173
  Set     6368
  Used    6289    6304    6329    6364

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6568    6607
  Set 
  Used    6644

TSEAM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     402
  Set      761     772     781
  Used     737

TSF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3879
  Set     4123
  Used    4126

TSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     431
  Set      738
  Used     755     763     768     774     776

TSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6088    6193
  Set     6359
  Used

TSFC0                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     427
  Set      768     774
  Used     763     782

TSFCM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     429
  Set      763     776     782
  Used     738

TSINP                           Stack                             REAL(KIND=8)
  Decl    7788
  Set     7929    7930    7931
  Used    7932    7933    7934    7935

TSNOW                           Stack                             REAL(KIND=8)
  Decl    2398
  Set     2508    2542
  Used    2510    2544

TSSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6216
  Set     6275
  Used    6296

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     403
  Set 
  Used     746     758     780

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5931    5988
  Set 
  Used    6050

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6084    6166
  Set     6296    6325    6367
  Used    6271    6272    6275    6289    6307    6312    6314    6317    6331    6352    6365    6368

TT                                                                REAL(KIND=8), PARAMETER
  Decl    6012
  Set 
  Used    6062

TTA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5130
  Set     5174
  Used    5179    5188    5194

TTB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5131
  Set     5175
  Used    5188

TTI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3871
  Set     4025    4027
  Used    4070

TU                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     156
  Set      806
  Used    7181

TU2                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     444
  Set      462
  Used

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2696    2763
  Set 
  Used    2803    2805    2810    2811

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3402
  Set 
  Used    3602

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4687    4953
  Set 
  Used    5048

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5281    5634
  Set 
  Used    5715

TU_FIXED                        Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     131
  Set     7211    7294
  Used     806     819    7156    7269

TU_GBL                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     168
  Set      819    7690
  Used     201     462

TU_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7081
  Set 
  Used    7203    7211

TV                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2768
  Set     2786    2799    2801    2803    2804
  Used    2807    2810

TVSGM                           Stack                             REAL(KIND=8)
  Decl    7123
  Set     7325
  Used    7326

TWI                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2379
  Set     2430
  Used    2431    2432    2451

TWIP                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2380
  Set     2431
  Used    2496    2497    2530    2531

TWIPP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2381
  Set     2432
  Used    2496    2501    2503    2530    2535    2537

TZDEP                           Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    7760
  Set     7809    7810    7811
  Used    7847    7849    7850

TZDEP                           Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    8012
  Set     8093    8094    8095    8171    8172    8173
  Used    8128    8129    8130    8272    8273    8274

TZDEP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    8356    8363
  Set 
  Used    8383

TZLTM                           Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7761
  Set     7817    7818    7822    7826
  Used    7820    7824    7831

TZLTM                           Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    8013
  Set     8101    8102    8106    8111
  Used    8104    8109    8118

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     278
  Set 
  Used     554     677

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2041
  Set 
  Used    2058    2065    2066

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2077    2156
  Set     2245
  Used    2262

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3323
  Set 
  Used    3559    3566    3574    3591

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4681    4903
  Set 
  Used    5044

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5275    5546
  Set 
  Used    5709

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     220     248
  Set 
  Used     562     685

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2149
  Set 
  Used    2215

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3114    3296
  Set 
  Used    3559    3566    3591

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4678    4934
  Set 
  Used    5046

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5279    5516
  Set 
  Used    5706    5866

UM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6204
  Set     6390
  Used    6392

UMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     411
  Set 
  Used     750

UMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6180
  Set     6375    6386
  Used    6378    6388

UMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 4), INTENT(INOUT)
  Decl     222     360
  Set      724     725
  Used     580     581     582     583

UMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 4), INTENT(INOUT)
  Decl    6084    6163
  Set     6378    6380
  Used

UPDATE                                                            Subroutine, Module procedure, PRIVATE
  Decl    2880
  Set 
  Used    3714

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     339
  Set 
  Used     543     666

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2076    2165
  Set     2298
  Used    2299

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3370
  Set 
  Used    3558    3565    3590

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4676    4969
  Set 
  Used    5039

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5269    5607
  Set 
  Used    5704    5848

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5933    6005
  Set     6070
  Used    6071    6072

USTAR                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6211
  Set 
  Used    6291

USTARM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     422
  Set 
  Used     754

USTARM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6087    6189
  Set     6388    6389
  Used    6389

USTARN                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2167
  Set     2229
  Used    2245

USTARN                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3408
  Set 
  Used    3557    3564    3589

VCOVER                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     438
  Set      456
  Used

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     924    1032
  Set 
  Used    1170

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1871    1914
  Set 
  Used    1958    1960    1961    1963

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2745
  Set 
  Used    2867

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3114    3284
  Set 
  Used    3445

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3761    3823
  Set 
  Used    4023

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4210    4250
  Set 
  Used    4305    4323    4365

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4463    4487
  Set 
  Used    4543    4544

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4677    4945
  Set 
  Used    5024    5026    5031    5046

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5267    5626
  Set 
  Used    5705

VCOVER                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    6771
  Set     6815    6816
  Used    7043    7047    7057

VCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    1122
  Set     1170    1193
  Used    1397    1434    1435    1436    1442    1443    1444    1451    1457    1815    1824    1825    1826

VCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3438
  Set     3445    3514
  Used    3597    3601    3608    3657    3702

VCOVER_GBL                      Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     162
  Set      813    7684
  Used     195     456    6815    6816

VCV                                                               REAL(KIND=8), PARAMETER
  Decl    7509
  Set 
  Used    7664

VEGIN                                                             Subroutine, Module procedure
  Decl      88    7069
  Set 
  Used

VERT_INTERP                                                       Subroutine, Module procedure, PRIVATE
  Decl    8354
  Set 
  Used    8197

VKRMN                                                             REAL(KIND=8), PARAMETER
  Decl    2185
  Set 
  Used    2210

VKRMN                                                             REAL(KIND=8), PARAMETER
  Decl    6008
  Set 
  Used    6044

VKRMNI                          Stack                             REAL(KIND=8)
  Decl    2190
  Set     2210
  Used    2228    2235    2240    2245

VLT                                                               REAL(KIND=8), PARAMETER, DIMENSION(13)
  Decl    7498
  Set 
  Used

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     220     249
  Set 
  Used     562     685

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2150
  Set 
  Used    2215

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3114    3297
  Set 
  Used    3559    3566    3591

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4679    4935
  Set 
  Used    5046

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5279    5517
  Set 
  Used    5707    5867

VM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6205
  Set     6391
  Used    6392

VMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     412
  Set 
  Used     751

VMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6086    6181
  Set     6376    6387
  Used    6380    6388

VNTLAX                                                            Subroutine, Module procedure, PRIVATE
  Decl    2075
  Set 
  Used       0    3564    3589

VNTLT1                                                            Subroutine, Module procedure, PRIVATE
  Decl    5930
  Set 
  Used    6288

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     219     261
  Set      590     591     592
  Used     701

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    2316    2371
  Set     2422    2423    2424    2605    2614    2615    2624    2625    2640    2646    2652    2664    2665    2670    2671
          2683
  Used    2422    2423    2424    2430    2455    2458    2461    2483    2488    2524    2558    2610    2611    2620    2621
          2639    2645    2651    2663    2669

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    2695    2751
  Set 
  Used

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3114    3306
  Set 
  Used    3482    3484    3601

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3761    3839
  Set     4109    4174
  Used    3934

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    4563    4609
  Set 
  Used    4627

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4685    4886
  Set 
  Used    5021    5031    5046

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5058    5109
  Set     5227
  Used

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5278    5529
  Set     5731    5756    5797    5810    5812    5823    5824    5827    5828    5832
  Used    5690    5691    5692    5713    5741    5808    5818    5822    5826    5830    5831    5880    5881    5882    5908
          5909

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    6400    6414
  Set 
  Used    6440    6441    6442    6465    6468    6471    6501    6502    6503    6524    6525    6526    6545    6546    6547

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(OUT)
  Decl    6561    6580
  Set     6623    6624    6625
  Used

W                               Stack                             REAL(KIND=8)
  Decl    7781
  Set     7889    7914
  Used    7897    7899

W                               Stack                             REAL(KIND=8)
  Decl    8037
  Set     8137    8153
  Used    8138    8141

W                               Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8282    8284
  Set 
  Used    8303    8313

W0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     224     396
  Set      710     711     712
  Used     701

W0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    6400    6419
  Set     6440    6441    6442    6465    6468    6471    6501    6502    6503    6545    6546    6547
  Used    6464    6467    6470    6488    6489    6490

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     345
  Set 
  Used     545     668

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1115
  Set     1180
  Used    1418    1811    1823

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1934
  Set 
  Used    1955

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3374
  Set     3474
  Used    3595    3606    3655    3694

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4974
  Set 
  Used    5040

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5613
  Set 
  Used    5705

WF                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8369
  Set     8406    8410    8411    8422    8432    8442    8455    8457
  Used    8464

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     346
  Set 
  Used     545     668

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     916    1116
  Set     1187    1194
  Used    1434    1442    1451    1457    1815    1824

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1935
  Set 
  Used    1958    1963

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3375
  Set     3475    3515
  Used    3595    3606    3655    3694

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4975
  Set 
  Used    5040

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5270    5614
  Set 
  Used    5705

WHEAT                                                             Subroutine, Module procedure
  Decl      90    7402
  Set 
  Used     828

WI                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8371
  Set     8400
  Used    8410    8411    8422    8432    8442

WLAI                                                              REAL(KIND=8), PARAMETER, DIMENSION(9)
  Decl    7493
  Set 
  Used

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     222     372
  Set      713     714     715
  Used     590     591     592     702

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    6401    6424
  Set     6488    6489    6490    6524    6525    6526
  Used    6465    6468    6471

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    6563    6587
  Set 
  Used    6623    6624    6625

WMAX                            Stack                             REAL(KIND=8)
  Decl    2392
  Set     2483    2484
  Used    2485    2491

WMIN                            Stack                             REAL(KIND=8)
  Decl    2393
  Set     2486    2488    2489
  Used    2490    2491

WORK                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5133
  Set     5188
  Used    5192

WSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    7711    7741
  Set     7802    7956
  Used

WSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7968    7992
  Set     8087    8260    8265
  Used

WSIB3D                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(OUT)
  Decl    7974    7996
  Set     8166    8210
  Used    8272    8273    8274

WT                              Stack                             REAL(KIND=8)
  Decl    3426
  Set     3482    3483
  Used    3485

WWW                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    4617
  Set     4627
  Used    4633

X0X                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      93     144
  Set     7224    7313
  Used     478    3736    7169

X0X_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7094
  Set 
  Used    7205    7224

X1                              Stack                             REAL(KIND=8)
  Decl    7476
  Set     7651    7655
  Used    7659

XABC                            Stack                             REAL(KIND=8)
  Decl    4284
  Set     4334
  Used    4340

XABD                            Stack                             REAL(KIND=8)
  Decl    4285
  Set     4340
  Used    4346

XBC                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      96     149
  Set     7229    7315
  Used     476    3738    7174

XBC_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7099
  Set 
  Used    7205    7229

XCOVER                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     151
  Set      800
  Used    7176    7615

XCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7471
  Set     7615    7664    7666
  Used    7684

XCOVER_FIXED                    Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     142
  Set     7222    7311    7312
  Used     800     813    7167    7283    7839    8122

XCOVER_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7092
  Set 
  Used    7205    7222

XCT1                            Stack                             REAL(KIND=8)
  Decl    2193
  Set     2231
  Used    2233    2235

XCT2                            Stack                             REAL(KIND=8)
  Decl    2194
  Set     2232    2237
  Used    2235    2240

XCTU1                           Stack                             REAL(KIND=8)
  Decl    2195
  Set     2233    2238
  Used    2245

XCTU2                           Stack                             REAL(KIND=8)
  Decl    2196
  Set     2234    2239
  Used    2245

XD                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      94     145
  Set     7225    7314    7330    7336
  Used     479     904    3735    7170

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     789     796
  Set 
  Used     828

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7402    7459
  Set 
  Used    7520

XDC                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      95     148
  Set     7228    7316
  Used     477    3737    7173

XDC_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7098
  Set 
  Used    7205    7228

XDIF1                           Stack                             REAL(KIND=8)
  Decl    7477
  Set     7652    7656
  Used    7659

XDIF2                           Stack                             REAL(KIND=8)
  Decl    7478
  Set     7653    7657
  Used    7659

XDR                             Stack                             REAL(KIND=8)
  Decl    2778
  Set     2832    2834    2835    2836
  Used    2835    2837

XD_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7095
  Set 
  Used    7205    7225

XGREEN                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 13)
  Decl    7503
  Set     7545    7601    7602
  Used    7668

XGREN                                                             REAL(KIND=8), PARAMETER, DIMENSION(13)
  Decl    7495
  Set 
  Used

XM1                             Stack                             REAL(KIND=8)
  Decl    6803
  Set     6946
  Used    6967    6997

XMI1                            Stack                             REAL(KIND=8), DIMENSION(12, 3)
  Decl    6788
  Set     6881    6886
  Used    6937    6946    6967    6997

XMIU                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     110
  Set     7242
  Used    6881    7134

XMIU_R4                         Stack                             REAL(KIND=4), DIMENSION(12, 3)
  Decl    7110
  Set 
  Used    7232    7242

XMIW                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     112
  Set     7243
  Used    6886    7136

XMIW_R4                         Stack                             REAL(KIND=4), DIMENSION(12, 3)
  Decl    7111
  Set 
  Used    7232    7243

XNIRB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     390
  Set 
  Used     644

XNIRD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     391
  Set 
  Used     645

XNUM                            Stack                             REAL(KIND=8)
  Decl    1947
  Set     1963
  Used    1964    1965

XPH1                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    7749
  Set 
  Used

XPH1                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    8062
  Set 
  Used

XPH2                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    7754
  Set 
  Used

XPH2                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    8067
  Set 
  Used

XROT                            Stack                             REAL(KIND=8)
  Decl    2777
  Set     2818    2823    2826    2830
  Used    2822    2824    2825    2828    2829

XS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3872
  Set     4033    4048    4049    4050    4095    4099    4100    4101
  Used    4061    4062    4105    4106

XSC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3870
  Set     3983
  Used    3985    3987

XSEA                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     446
  Set      737
  Used     748     761     766     771     772

XTM1                            Stack                             REAL(KIND=8)
  Decl    6805
  Set     6961    6991
  Used    6967    6997

XTM2                            Stack                             REAL(KIND=8)
  Decl    6806
  Set     6964    6994
  Used    6967    6997

XVISB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     388
  Set 
  Used     642

XVISD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     389
  Set 
  Used     643

XZ                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     893
  Set      900
  Used     902     903     904     905     906

Y1                              Stack                             REAL(KIND=8)
  Decl    3412
  Set     3619
  Used

Y2                              Stack                             REAL(KIND=8)
  Decl    3413
  Set     3620
  Used

YCOVER                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     123
  Set     7283
  Used    7147

YEFAC                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     118
  Set     7270
  Used    7142    7691

YH1                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     119
  Set     7272
  Used    7143    7692

YH2                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     120
  Set     7273
  Used    7144    7693

YHIL                            Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7120
  Set     7266
  Used

YLL                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     116
  Set     7268
  Used    7140    7689

YLT                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     124
  Set     7281
  Used    7148

YOOTD                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     121
  Set     7271
  Used    7145

YOPT                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     115
  Set     7267
  Used    7139    7688

YREEN                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     122
  Set     7282
  Used    7146

YRL                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7402    7460
  Set 
  Used    7564    7569    7570    7571    7572    7573    7576    7577    7579    7587    7588    7628    7631    7634    7635
          7664

YRL                             Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     828

YSTPAR                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     114
  Set     7263
  Used    7138    7694    7695    7696

YU                              Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     117
  Set     7269
  Used    7141    7690

Z0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     441
  Set 
  Used     540     663     727

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2143
  Set 
  Used    2227    2228    2232    2237    2259    2270    2281

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3115    3289
  Set     3466
  Used    3559    3566    3591

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4678    4950
  Set 
  Used    5047

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5631
  Set 
  Used    5706

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5933    6004
  Set     6028    6030    6032
  Used    6044

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6087    6190
  Set 
  Used    6291

Z0ICE                           Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6032

Z0SEA                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     423
  Set 
  Used     754

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     420
  Set      478     727
  Used     539     662

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     882
  Set      904
  Used

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3115    3285
  Set     3736
  Used    3460    3466

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4677    4946
  Set 
  Used    5047

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5267    5627
  Set 
  Used    5705

Z1                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     147
  Set     7227    7310
  Used    6834    6835    6837    7172

Z1_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7097
  Set 
  Used    7205    7227

Z2                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     146
  Set     7226    7309
  Used     900    3559    3566    3575    3591    6835    6837    7171

Z2                              Dummy Arg                         REAL(KIND=8), DIMENSION(13, 12), INTENT(IN)
  Decl    1985    2026
  Set 
  Used    2065

Z2                              Dummy Arg                         REAL(KIND=8), DIMENSION(13, 12), INTENT(IN)
  Decl    2077    2140
  Set 
  Used    2227    2234    2239    2259

Z2_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7096
  Set 
  Used    7205    7226

ZAT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4274
  Set     4389    4391
  Used    4393    4394

ZC                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8370
  Set     8379
  Used    8430    8432    8442    8443    8454    8455

ZDEPTH                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     140
  Set     7220    7319    7320    7321
  Used    2452    2456    2458    2460    2487    2519    2521    2523    2525    2553    2555    2557    2559    2605    2610
          2611    2614    2616    2620    2621    2624    2626    2641    2647    2653    2665    2671    3483    3484    3602
          4110    4174    5228    5690    5691    5692    5731    5756    5775    5780    5783    5784    5798    5811    5823
          5827    5831    5880    5881    5882    7165    7809    7810    7811    8093    8094    8095    8171    8172    8173
          8184

ZDEPTH                          Dummy Arg                         REAL(KIND=8), DIMENSION(13, 3), INTENT(IN)
  Decl    2696    2743
  Set 
  Used    2822    2823    2825    2826    2829    2830

ZDEPTH_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 3)
  Decl    7090
  Set 
  Used    7204    7220

ZDM                             Stack                             INTEGER
  Decl    8373
  Set     8386
  Used    8416    8449

ZENITH                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     375
  Set 
  Used     615

ZENITH                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6568    6608
  Set 
  Used    6645

ZGRAV                           Stack                             REAL(KIND=8)
  Decl    6235
  Set     6258
  Used    6330

ZK                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4275
  Set     4393
  Used    4400    4439

ZKAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6784
  Set     7043    7044    7045
  Used    7046

ZL                              Stack                             REAL(KIND=8)
  Decl    2192
  Set     2227    2259
  Used    2230    2231    2232    2234    2269    2272    2280    2283

ZLOAD                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3866
  Set     4012
  Used    4040    4062

ZLT                             Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     150
  Set      801
  Used    5910    7175

ZLT2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     435
  Set      457
  Used

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1985    2042
  Set 
  Used    2058

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3116    3399
  Set 
  Used    3575

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3762    3852
  Set 
  Used    3968    4022    4197

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4211    4251
  Set 
  Used    4305    4323    4365

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4686    4941
  Set 
  Used    5027    5032    5048

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5280    5623
  Set 
  Used    5714

ZLT2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    6770
  Set     6813    6814
  Used    6832    6833    7043

ZLT_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     143
  Set     7223    7307    7308
  Used     801     814    7168    7281    7817    7818    7820    7822    7824    7826    8101    8102    8104    8106    8109
          8111

ZLT_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     163
  Set      814    7685
  Used     196     457    6813    6814

ZLT_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7093
  Set 
  Used    7205    7223

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     354
  Set 
  Used     535     629

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6565    6596
  Set 
  Used    6632

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6670    6763
  Set     7056
  Used    7058

ZM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8368
  Set     8383
  Used    8430    8442    8443    8454    8455    8457

ZMELT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3869
  Set     4163    4165
  Used    4174

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     413
  Set 
  Used     752

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5933    5990
  Set 
  Used    6030

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6087    6186
  Set     6330
  Used    6291


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2498, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2532, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2597, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3619, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3620, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5206, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5206, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5211, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5211, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5906, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5913, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6029, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6031, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6304, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6329, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6364, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6644, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6825, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7538, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7540, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7569, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7570, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7571, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7572, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7573, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7577, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7577, file Sfc_SSiB.f90)

Name  Messages
----  --------
AIRMOD in SFC_SSIB
      Defined as:  Subroutine (line 838, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   AIRMOD in SFC_SSIB (Line 3459, file Sfc_SSiB.f90)

      Calls:       AIRMOD in SFC_SSIB (Line 3459, file Sfc_SSiB.f90)

Name  Messages
----  --------
ALBEDO in SFC_SSIB
      Defined as:  Subroutine (line 87, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
COPYSURFACEDATA in SFC_SSIB
      Defined as:  Subroutine (line 97, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CUT in SFC_SSIB
      Defined as:  Subroutine (line 1868, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   CUT in SFC_SSIB (Line 3594, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3605, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3654, file Sfc_SSiB.f90)

      Calls:       CUT in SFC_SSIB (Line 3594, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3605, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3654, file Sfc_SSiB.f90)

Name  Messages
----  --------
EXP(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2431, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2432, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2451, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2454, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2490, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2809, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2839, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2852, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3487, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3491, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3509, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3536, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3537, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3646, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3647, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3648, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3649, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4022, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4061, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4105, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4389, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4391, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4393, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4394, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4401, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4633, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6057, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6059, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6062, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6271, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7046, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7666, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7861, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7868, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8131, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8132, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8327, file Sfc_SSiB.f90)

Name  Messages
----  --------
EXTRAK in SFC_SSIB
      Defined as:  Subroutine (line 8282, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   EXTRAK in SFC_SSIB (Line 7899, file Sfc_SSiB.f90)
                   EXTRAK in SFC_SSIB (Line 8141, file Sfc_SSiB.f90)

      Calls:       EXTRAK in SFC_SSIB (Line 7899, file Sfc_SSiB.f90)
                   EXTRAK in SFC_SSIB (Line 8141, file Sfc_SSiB.f90)

Name  Messages
----  --------
FYSIKS in SFC_SSIB
      Defined as:  Subroutine (line 83, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   FYSIKS in SFC_SSIB (Line 538, file Sfc_SSiB.f90)
                   FYSIKS in SFC_SSIB (Line 661, file Sfc_SSiB.f90)

      Calls:       FYSIKS in SFC_SSIB (Line 538, file Sfc_SSiB.f90)
                   FYSIKS in SFC_SSIB (Line 661, file Sfc_SSiB.f90)

Name  Messages
----  --------
INITSSIB in SFC_SSIB
      Defined as:  Subroutine (line 82, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INTERC in SFC_SSIB
      Defined as:  Subroutine (line 3759, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   INTERC in SFC_SSIB (Line 5029, file Sfc_SSiB.f90)

      Calls:       INTERC in SFC_SSIB (Line 5029, file Sfc_SSiB.f90)

Name  Messages
----  --------
LOG(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 190, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2228, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2231, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2232, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2234, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2237, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2239, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2431, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2432, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2451, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2454, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2490, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2809, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2836, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3487, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3491, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4048, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4099, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4389, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4391, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4393, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4426, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4432, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4633, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6044, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6056, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6058, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6061, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7326, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7861, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7868, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7935, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8131, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8132, file Sfc_SSiB.f90)

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 698, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 709, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 762, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 767, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 773, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1812, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1816, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2216, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2265, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2303, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2457, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2489, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2501, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2503, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2513, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2535, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2537, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2547, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2613, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2623, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2639, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2645, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2651, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2663, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2669, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2683, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2804, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2813, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2842, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2853, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3482, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3509, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3983, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4050, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4064, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4101, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4107, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4147, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4292, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4627, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4654, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5782, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5790, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6042, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6053, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6393, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6645, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6817, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6834, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7044, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7253, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7930, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8319, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8340, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8349, file Sfc_SSiB.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 902, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1180, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1187, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1194, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1814, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1818, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2266, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2432, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2458, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2488, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2488, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2488, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2501, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2502, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2508, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2509, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2513, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2535, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2536, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2542, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2543, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2547, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2612, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2622, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2803, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2812, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2822, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2825, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2829, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2838, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2841, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2854, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2868, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3474, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3475, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3515, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3996, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4049, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4100, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4135, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4198, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4304, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4400, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5197, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5784, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6054, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6367, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6493, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6835, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6843, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6851, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7045, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7330, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7336, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7931, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7933, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7946, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8340, file Sfc_SSiB.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 7525, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7558, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7648, file Sfc_SSiB.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
PBL in SFC_SSIB
      Defined as:  Subroutine (line 4670, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   PBL in SFC_SSIB (Line 5698, file Sfc_SSiB.f90)

      Calls:       PBL in SFC_SSIB (Line 5698, file Sfc_SSiB.f90)

Name  Messages
----  --------
RADALB in SFC_SSIB
      Defined as:  Subroutine (line 86, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RADALB in SFC_SSIB (Line 530, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 624, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 6628, file Sfc_SSiB.f90)

      Calls:       RADALB in SFC_SSIB (Line 530, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 624, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 6628, file Sfc_SSiB.f90)

Name  Messages
----  --------
RADUSE in SFC_SSIB
      Defined as:  Subroutine (line 4462, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RADUSE in SFC_SSIB (Line 5023, file Sfc_SSiB.f90)

      Calls:       RADUSE in SFC_SSIB (Line 5023, file Sfc_SSiB.f90)

Name  Messages
----  --------
RBRD in SFC_SSIB
      Defined as:  Subroutine (line 1984, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RBRD in SFC_SSIB (Line 3573, file Sfc_SSiB.f90)

      Calls:       RBRD in SFC_SSIB (Line 3573, file Sfc_SSiB.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 7233, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7234, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7235, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7236, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7237, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7238, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7239, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7240, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7241, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7242, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7243, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7874, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8133, file Sfc_SSiB.f90)

Name  Messages
----  --------
RESHAPE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 3887, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7749, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7754, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8062, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8067, file Sfc_SSiB.f90)

Name  Messages
----  --------
RE_ASSIGN_SIB_SOIL_PROP in SFC_SSIB
      Defined as:  Subroutine (line 89, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ROOT in SFC_SSIB
      Defined as:  Subroutine (line 4563, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   ROOT in SFC_SSIB (Line 5021, file Sfc_SSiB.f90)

      Calls:       ROOT in SFC_SSIB (Line 5021, file Sfc_SSiB.f90)

Name  Messages
----  --------
RUNOFF in SFC_SSIB
      Defined as:  Subroutine (line 2315, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RUNOFF in SFC_SSIB (Line 5817, file Sfc_SSiB.f90)

      Calls:       RUNOFF in SFC_SSIB (Line 5817, file Sfc_SSiB.f90)

Name  Messages
----  --------
SEASFC in SFC_SSIB
      Defined as:  Subroutine (line 84, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SEASFC in SFC_SSIB (Line 743, file Sfc_SSiB.f90)

      Calls:       SEASFC in SFC_SSIB (Line 743, file Sfc_SSiB.f90)

Name  Messages
----  --------
SEXTRP in SFC_SSIB
      Defined as:  Subroutine (line 85, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SEXTRP in SFC_SSIB (Line 700, file Sfc_SSiB.f90)

      Calls:       SEXTRP in SFC_SSIB (Line 700, file Sfc_SSiB.f90)

Name  Messages
----  --------
SFC_SSIB
      Defined as:  Module (line 6, file Sfc_SSiB.f90)

        Uses:      CONSTANTS
                   OPTIONS

Name  Messages
----  --------
SFLXES in SFC_SSIB
      Defined as:  Subroutine (line 3104, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SFLXES in SFC_SSIB (Line 5036, file Sfc_SSiB.f90)

      Calls:       SFLXES in SFC_SSIB (Line 5036, file Sfc_SSiB.f90)

Name  Messages
----  --------
SIBWET in SFC_SSIB
      Defined as:  Subroutine (line 91, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIBWET_GLSM in SFC_SSIB
      Defined as:  Subroutine (line 92, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 1844, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1845, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3661, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3662, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7538, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7540, file Sfc_SSiB.f90)

Name  Messages
----  --------
SIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 749, file Sfc_SSiB.f90)

Name  Messages
----  --------
SNOWM in SFC_SSIB
      Defined as:  Subroutine (line 5056, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SNOWM in SFC_SSIB (Line 5739, file Sfc_SSiB.f90)

      Calls:       SNOWM in SFC_SSIB (Line 5739, file Sfc_SSiB.f90)

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2058, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2064, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2215, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3904, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5745, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6041, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6057, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6059, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6062, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6388, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6392, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7058, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7058, file Sfc_SSiB.f90)

Name  Messages
----  --------
SSIB_DRIVER in SFC_SSIB
      Defined as:  Subroutine (line 98, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
STOMAT in SFC_SSIB
      Defined as:  Subroutine (line 4209, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   STOMAT in SFC_SSIB (Line 5026, file Sfc_SSiB.f90)

      Calls:       STOMAT in SFC_SSIB (Line 5026, file Sfc_SSiB.f90)

Name  Messages
----  --------
STRES2 in SFC_SSIB
      Defined as:  Subroutine (line 2693, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   STRES2 in SFC_SSIB (Line 3599, file Sfc_SSiB.f90)

      Calls:       STRES2 in SFC_SSIB (Line 3599, file Sfc_SSiB.f90)

Name  Messages
----  --------
TEMRES in SFC_SSIB
      Defined as:  Subroutine (line 915, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   TEMRES in SFC_SSIB (Line 3693, file Sfc_SSiB.f90)

      Calls:       TEMRES in SFC_SSIB (Line 3693, file Sfc_SSiB.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 493, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 493, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7187, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7191, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7195, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7199, file Sfc_SSiB.f90)

Name  Messages
----  --------
UPDATE in SFC_SSIB
      Defined as:  Subroutine (line 2880, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   UPDATE in SFC_SSIB (Line 3714, file Sfc_SSiB.f90)

      Calls:       UPDATE in SFC_SSIB (Line 3714, file Sfc_SSiB.f90)

Name  Messages
----  --------
VEGIN in SFC_SSIB
      Defined as:  Subroutine (line 88, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
VERT_INTERP in SFC_SSIB
      Defined as:  Subroutine (line 8354, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 8197, file Sfc_SSiB.f90)

      Calls:       RESHAPE(Intrinsic) (Line 3887, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 7749, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 7754, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 8062, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 8067, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8197, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 190, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 493, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 493, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 698, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 709, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 762, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 767, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 773, file Sfc_SSiB.f90)
                   SIN(Intrinsic) (Line 749, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 902, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1180, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1187, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1194, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1814, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1818, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 1812, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 1816, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 1844, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 1845, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2058, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2064, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2215, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2216, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2265, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2303, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2228, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2231, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2232, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2234, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2237, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2239, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2266, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2457, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2483, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2483, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2483, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2489, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2501, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2503, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2513, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2535, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2537, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2547, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2613, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2623, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2639, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2645, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2651, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2663, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2669, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2683, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2432, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2458, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2484, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2488, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2488, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2488, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2501, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2502, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2508, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2509, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2513, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2535, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2536, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2542, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2543, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2547, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2612, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2622, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2431, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2432, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2451, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2454, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2485, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2486, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2490, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2431, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2432, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2451, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2454, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2485, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2486, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2490, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2498, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2532, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2597, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2803, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2812, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2822, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2825, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2829, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2838, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2841, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2854, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2868, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2804, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2813, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2842, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2853, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2809, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2836, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2809, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2839, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2852, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3474, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3475, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3485, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3515, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3482, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3486, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3509, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 3487, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 3491, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3487, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3491, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3509, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3536, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3537, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3646, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3647, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3648, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3649, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 3619, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 3620, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 3661, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 3662, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 3904, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3983, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4050, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4064, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4101, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4107, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4147, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3996, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4049, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4100, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4135, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4198, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4022, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4061, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4105, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4048, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4099, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4292, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4304, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4400, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4389, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4391, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4393, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4394, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4401, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4389, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4391, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4393, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4426, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4432, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4627, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4654, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4633, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4633, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 5197, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5206, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5206, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5211, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5211, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 5745, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 5782, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 5790, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 5784, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5906, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5913, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6029, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6031, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6041, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6057, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6059, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6062, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6042, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6053, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6044, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6056, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6058, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6061, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6054, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6057, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6059, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6062, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6271, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6304, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6329, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6364, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6367, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6388, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6392, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6393, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6493, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6644, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6645, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6817, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6834, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7044, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6825, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6835, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6843, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6851, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7045, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7046, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 7058, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 7058, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7187, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7191, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7195, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7199, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7233, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7234, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7235, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7236, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7237, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7238, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7239, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7240, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7241, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7242, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7243, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7253, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7326, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7330, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7336, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7525, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7558, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7648, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7538, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7540, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7569, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7570, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7571, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7572, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7573, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7577, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7577, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 7538, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 7540, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7666, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7861, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7868, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7935, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7861, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7868, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7874, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7930, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7931, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7933, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7946, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 8131, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 8132, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8131, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8132, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 8133, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8319, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8340, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8349, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8327, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 8340, file Sfc_SSiB.f90)

Name  Messages
----  --------
VNTLAX in SFC_SSIB
      Defined as:  Subroutine (line 2075, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VNTLAX in SFC_SSIB (Line 3557, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3564, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3589, file Sfc_SSiB.f90)

      Calls:       VNTLAX in SFC_SSIB (Line 3557, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3564, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3589, file Sfc_SSiB.f90)

Name  Messages
----  --------
VNTLT1 in SFC_SSIB
      Defined as:  Subroutine (line 5930, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VNTLT1 in SFC_SSIB (Line 6288, file Sfc_SSiB.f90)

      Calls:       VNTLT1 in SFC_SSIB (Line 6288, file Sfc_SSiB.f90)

Name  Messages
----  --------
WHEAT in SFC_SSIB
      Defined as:  Subroutine (line 90, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   WHEAT in SFC_SSIB (Line 828, file Sfc_SSiB.f90)

      Calls:       WHEAT in SFC_SSIB (Line 828, file Sfc_SSiB.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
