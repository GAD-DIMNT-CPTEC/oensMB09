       !        
       !        Cray Inc. Decompilation
       !        Notice - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Rad_UKMO.f90
       !        File                  :  Rad_UKMO.opt
       !        Network               :  Gemini interconnect
       !        Target                :  X86, 64-bit, sse3
       !        
    9.       
    9.       module realtype_rd
   11.       return
   11.       end
   11.       
   14.       
   14.       module dimensions_spec_ucf
   78.       return
   78.       end
   78.       
   81.       
   81.       module aerosol_component_pcf
  180.       return
  180.       end
  180.       
  183.       
  183.       module aerosol_parametrization_pcf
  215.       return
  215.       end
  215.       
  218.       
  218.       module angular_integration_pcf
  253.       return
  253.       end
  253.       
  256.       
  256.       module cloud_component_pcf
  291.       return
  291.       end
  291.       
  294.       
  294.       module cloud_parametrization_pcf
  341.       return
  341.       end
  341.       
  344.       
  344.       module cloud_region_pcf
  381.       return
  381.       end
  381.       
  384.       
  384.       module cloud_representation_pcf
  431.       return
  431.       end
  431.       
  434.       
  434.       module cloud_scheme_pcf
  485.       return
  485.       end
  485.       
  488.       
  488.       module cloud_type_pcf
  540.       return
  540.       end
  540.       
  543.       
  543.       module continuum_pcf
  572.       return
  572.       end
  572.       
  575.       
  575.       module def_spectrum
  840.       return
  840.       end
  840.       
  843.       
  843.       module def_ss_prop
  930.       return
  930.       end
  930.       
  933.       
  933.       module def_std_io_icf
  965.       return
  965.       end
  965.       
  968.       
  968.       module def_um_nml
 1198.       return
 1198.       end
 1198.       
 1201.       
 1201.       module diff_elsasser_ccf
 1237.       return
 1237.       end
 1237.       
 1240.       
 1240.       module diff_keqv_ucf
 1278.       return
 1278.       end
 1278.       
 1281.       
 1281.       module dimensions_field_ucf
 1332.       return
 1332.       end
 1332.       
 1336.       
 1336.       module dimensions_fixed_pcf
 1367.       return
 1367.       end
 1367.       
 1370.       
 1370.       module error_pcf
 1407.       return
 1407.       end
 1407.       
 1410.       
 1410.       module gas_list_pcf
 1497.       return
 1497.       end
 1497.       
 1500.       
 1500.       module gas_overlap_pcf
 1540.       return
 1540.       end
 1540.       
 1543.       
 1543.       module gaussian_weight_pcf
 1663.       return
 1663.       end
 1663.       
 1666.       
 1666.       module ice_cloud_parametrization_pcf
 1718.       return
 1718.       end
 1718.       
 1721.       
 1721.       module k_scale_pcf
 1754.       return
 1754.       end
 1754.       
 1757.       
 1757.       module math_cnst_ccf
 1784.       return
 1784.       end
 1784.       
 1787.       
 1787.       module phase_pcf
 1819.       return
 1819.       end
 1819.       
 1822.       
 1822.       module physical_constants_0_ccf
 1866.       return
 1866.       end
 1866.       
 1869.       
 1869.       module physical_constants_1_ccf
 1916.       return
 1916.       end
 1916.       
 1919.       
 1919.       module scale_fnc_pcf
 1959.       return
 1959.       end
 1959.       
 1962.       
 1962.       module scatter_method_pcf
 2005.       return
 2005.       end
 2005.       
 2008.       
 2008.       module solver_pcf
 2090.       return
 2090.       end
 2090.       
 2093.       
 2093.       module source_coeff_pointer_pcf
 2133.       return
 2133.       end
 2133.       
 2136.       
 2136.       module spectral_region_pcf
 2163.       return
 2163.       end
 2163.       
 2166.       
 2166.       module sph_algorithm_pcf
 2205.       return
 2205.       end
 2205.       
 2208.       
 2208.       module sph_mode_pcf
 2250.       return
 2250.       end
 2250.       
 2253.       
 2253.       module sph_qr_iter_acf
 2292.       return
 2292.       end
 2292.       
 2295.       
 2295.       module sph_truncation_pcf
 2335.       return
 2335.       end
 2335.       
 2338.       
 2338.       module surface_spec_pcf
 2392.       return
 2392.       end
 2392.       
 2395.       
 2395.       module two_stream_scheme_pcf
 2456.       return
 2456.       end
 2456.       
 4441.       
 4441.       subroutine radiance_calc( ierr, l_rayleigh, l_aerosol, l_gas, l_continuum, l_cloud, l_drop, l_ice, i_angular_integration, l_rescale, n_order_forward, i_2stream, n_order_gauss, i_truncation, ls_global_trunc, ms_min, ms_max, accuracy_adaptive, euler_factor, l_henyey_greenstein_pf, ls_brdf_trunc, i_sph_algorithm, n_order_phase_solar, n_direction, direction, n_viewing_level, viewing_level, i_sph_mode, i_scatter_method, l_global_cloud_top, n_global_cloud_top, i_solver, map_channel, n_band, i_first_band, i_last_band, weight_band, n_profile, n_layer, p, t, t_ground, t_level, d_mass, isolir, zen_0, solar_irrad, solar_flux_band, rayleigh_coefficient, n_deg_fit, thermal_coefficient, t_ref_planck, l_ir_source_quad, i_gas_overlap, i_gas, gas_mix_ratio, n_band_absorb, index_absorb, i_band_esft, w_esft, k_esft, i_scale_esft, i_scale_fnc, scale_vector, p_reference, t_reference, l_doppler, doppler_correction, n_brdf_basis_fnc, rho_alb, f_brdf, l_tile, n_point_tile, n_tile, list_tile, rho_alb_tile, frac_tile, t_tile, n_band_continuum, index_continuum, index_water, k_continuum, i_scale_fnc_cont, scale_continuum, p_ref_continuum, t_ref_continuum, n_aerosol, aerosol_mix_ratio, aerosol_absorption, aerosol_scattering, n_aerosol_phf_term, aerosol_phase_fnc, i_aerosol_parametrization, nhumidity, humidities, n_opt_level_aerosol_prsc, n_phase_term_aerosol_prsc, aerosol_pressure_prsc, aerosol_absorption_prsc, aerosol_scattering_prsc, aerosol_phase_fnc_prsc, n_condensed, type_condensed, i_cloud, i_cloud_representation, w_cloud, n_cloud_type, frac_cloud, condensed_mix_ratio, condensed_dim_char, i_condensed_param, condensed_n_phf, condensed_param_list, dp_corr_strat, dp_corr_conv, n_opt_level_drop_prsc, n_phase_term_drop_prsc, drop_pressure_prsc, drop_absorption_prsc, drop_scattering_prsc, drop_phase_fnc_prsc, n_opt_level_ice_prsc, n_phase_term_ice_prsc, ice_pressure_prsc, ice_absorption_prsc, ice_scattering_prsc, ice_phase_fnc_prsc, flux_direct, flux_down, flux_up, radiance, photolysis, l_clear, i_solver_clear, flux_direct_clear, flux_down_clear, flux_up_clear, l_blue_flux_surf, weight_blue, flux_direct_blue_surf, flux_down_blue_surf, flux_up_blue_surf, flux_up_tile, flux_up_blue_tile, nd_profile, nd_layer, nd_column, nd_layer_clr, id_ct, nd_2sg_profile, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_channel, nd_band, nd_species, nd_esft_term, nd_scale_variable, nd_continuum, nd_aerosol_species, nd_humidities, nd_cloud_parameter, nd_thermal_coeff, nd_source_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_profile_aerosol_prsc, nd_profile_cloud_prsc, nd_opt_level_aerosol_prsc, nd_opt_level_cloud_prsc, nd_phase_term, nd_max_order, nd_sph_coeff, nd_direction, nd_viewing_level, nd_region, nd_cloud_type, nd_cloud_component, nd_overlap_coeff, nd_point_tile, nd_tile )
 2485.       t$99 = nd_radiance_profile
 2485.       t$100 = nd_direction
 2775.       t$1381 = _zla( 0, nd_radiance_profile )
 2485.       t$1382 = _zla( 0, nd_radiance_profile )
 2775.       t$1383 = _zla( 0, nd_direction )
 2485.       t$1384 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
 2485.       t$1385 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
 2485.       t$101 = nd_viewing_level
 2777.       t$1386 = _zla( 0, nd_viewing_level )
 2485.       t$98 = nd_band
 3102.       t$1387 = _zla( 0, nd_band )
 2485.       t$102 = nd_profile
 2485.       t$103 = nd_layer
 2811.       t$1388 = _zla( 0, nd_profile )
 2485.       t$1389 = _zla( 0, nd_profile )
 2811.       t$1390 = _zla( 0, nd_layer )
 2485.       t$1391 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 2485.       t$1392 = 1 + nd_layer
 2817.       t$1393 = _zla( 0, 1 + nd_layer )
 2485.       t$1394 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
 2485.       t$124 = ( -1 + nd_thermal_coeff )
 2485.       t$1395 = nd_thermal_coeff
 3084.       t$1396 = _zla( 0, nd_thermal_coeff )
 2485.       t$1397 = _zla( 0, nd_thermal_coeff )
 2485.       t$1398 = _zla( 0, nd_band ) * _zla( 0, nd_thermal_coeff )
 2485.       t$104 = nd_species
 2485.       t$1399 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 2821.       t$1400 = _zla( 0, nd_species )
 2485.       t$1401 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species )
 2485.       t$1402 = _zla( 0, nd_species )
 2485.       t$1403 = _zla( 0, nd_band ) * _zla( 0, nd_species )
 2485.       t$1404 = _zla( 0, nd_band )
 2485.       t$1405 = _zla( 0, nd_band ) * _zla( 0, nd_species )
 2485.       t$110 = nd_esft_term
 2887.       t$1406 = _zla( 0, nd_esft_term )
 2485.       t$1407 = _zla( 0, nd_esft_term )
 2485.       t$1408 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term )
 2485.       t$1409 = _zla( 0, nd_band ) * _zla( 0, nd_species ) * _zla( 0, nd_esft_term )
 2485.       t$111 = nd_scale_variable
 2891.       t$1410 = _zla( 0, nd_scale_variable )
 2485.       t$1411 = _zla( 0, nd_scale_variable )
 2485.       t$1412 = _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
 2485.       t$1413 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
 2485.       t$1414 = _zla( 0, nd_band ) * _zla( 0, nd_species ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
 2485.       t$105 = nd_brdf_basis_fnc
 2829.       t$1415 = _zla( 0, nd_brdf_basis_fnc )
 2485.       t$1416 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 2485.       t$1417 = _zla( 0, nd_band ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 2485.       t$106 = nd_brdf_trunc / 2
 2485.       t$107 = nd_brdf_trunc
 2485.       t$1418 = _zla( 0, nd_brdf_basis_fnc )
 2485.       t$1419 = 1 + nd_brdf_trunc / 2
 2831.       t$1420 = _zla( 0, 1 + nd_brdf_trunc / 2 )
 2485.       t$1421 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 2485.       t$1422 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 2485.       t$1423 = 1 + nd_brdf_trunc
 2831.       t$1424 = _zla( 0, 1 + nd_brdf_trunc )
 2485.       t$1425 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
 2485.       t$108 = nd_point_tile
 2844.       t$1426 = _zla( 0, nd_point_tile )
 2485.       t$109 = nd_tile
 2485.       t$1427 = _zla( 0, nd_point_tile )
 2485.       t$1428 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile )
 2847.       t$1429 = _zla( 0, nd_tile )
 2485.       t$1430 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2485.       t$1431 = _zla( 0, nd_band ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2485.       t$1432 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2485.       t$112 = nd_continuum
 2906.       t$1433 = _zla( 0, nd_continuum )
 2485.       t$1434 = _zla( 0, nd_band ) * _zla( 0, nd_continuum )
 2485.       t$1435 = _zla( 0, nd_band ) * _zla( 0, nd_scale_variable )
 2485.       t$1436 = _zla( 0, nd_band ) * _zla( 0, nd_scale_variable ) * _zla( 0, nd_continuum )
 2485.       t$1437 = _zla( 0, nd_continuum )
 2485.       t$1438 = _zla( 0, nd_band ) * _zla( 0, nd_continuum )
 2485.       t$120 = nd_aerosol_species
 3038.       t$1439 = _zla( 0, nd_aerosol_species )
 2485.       t$1440 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_aerosol_species )
 2485.       t$121 = nd_humidities
 3042.       t$1441 = _zla( 0, nd_humidities )
 2485.       t$1442 = _zla( 0, nd_humidities )
 2485.       t$1443 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities )
 2485.       t$1444 = _zla( 0, nd_band ) * _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities )
 2485.       t$119 = nd_phase_term
 3048.       t$1445 = _zla( 0, nd_phase_term )
 2485.       t$1446 = _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
 2485.       t$1447 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
 2485.       t$1448 = _zla( 0, nd_band ) * _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
 2485.       t$1449 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities )
 2485.       t$122 = nd_profile_aerosol_prsc
 2485.       t$123 = nd_opt_level_aerosol_prsc
 3063.       t$1450 = _zla( 0, nd_profile_aerosol_prsc )
 2485.       t$1451 = _zla( 0, nd_profile_aerosol_prsc )
 3063.       t$1452 = _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1453 = _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1454 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1455 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1456 = _zla( 0, nd_band ) * _zla( 0, nd_aerosol_species ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1457 = _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1458 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$1459 = _zla( 0, nd_band ) * _zla( 0, nd_aerosol_species ) * _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
 2485.       t$115 = nd_cloud_component
 2951.       t$1460 = _zla( 0, nd_cloud_component )
 2485.       t$113 = id_ct
 2485.       t$1461 = nd_layer + -id_ct + 1
 2928.       t$1462 = _zla( 0, nd_layer + -id_ct + 1 )
 2485.       t$1463 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 2485.       t$114 = nd_cloud_type
 2485.       t$1464 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 2930.       t$1465 = _zla( 0, nd_cloud_type )
 2485.       t$1466 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_type ) * _zla( 0, nd_layer + -id_ct + 1 )
 2485.       t$1467 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_component ) * _zla( 0, nd_layer + -id_ct + 1 )
 2485.       t$116 = nd_cloud_parameter
 2971.       t$1468 = _zla( 0, nd_cloud_parameter )
 2485.       t$1469 = _zla( 0, nd_cloud_parameter )
 2485.       t$1470 = _zla( 0, nd_cloud_component ) * _zla( 0, nd_cloud_parameter )
 2485.       t$1471 = _zla( 0, nd_band ) * _zla( 0, nd_cloud_component ) * _zla( 0, nd_cloud_parameter )
 2485.       t$117 = nd_profile_cloud_prsc
 2485.       t$118 = nd_opt_level_cloud_prsc
 2986.       t$1472 = _zla( 0, nd_profile_cloud_prsc )
 2485.       t$1473 = _zla( 0, nd_profile_cloud_prsc )
 2986.       t$1474 = _zla( 0, nd_opt_level_cloud_prsc )
 2485.       t$1475 = _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
 2485.       t$1476 = _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
 2485.       t$1477 = _zla( 0, nd_band ) * _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
 2485.       t$1478 = _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
 2485.       t$1479 = _zla( 0, nd_band ) * _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
 2485.       t$125 = nd_flux_profile
 2485.       t$126 = nd_channel
 3107.       t$1480 = _zla( 0, nd_flux_profile )
 2485.       t$1481 = _zla( 0, nd_flux_profile )
 2485.       t$1482 = _zla( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
 3107.       t$1483 = _zla( 0, nd_channel )
 2485.       t$1484 = _zla( 0, nd_flux_profile ) * _zla( 0, nd_channel ) * _zla( 0, 1 + nd_layer )
 2485.       t$1485 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
 2485.       t$1486 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
 2485.       t$1487 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_channel )
 2485.       t$128 = nd_j_profile
 3122.       t$1488 = _zla( 0, nd_j_profile )
 2485.       t$1489 = _zla( 0, nd_j_profile )
 2485.       t$1490 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_j_profile )
 2485.       t$1491 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_channel ) * _zla( 0, nd_j_profile )
 2485.       t$127 = nd_2sg_profile
 3113.       t$1492 = _zla( 0, nd_2sg_profile )
 2485.       t$1493 = _zla( 0, nd_2sg_profile )
 2485.       t$1494 = _zla( 0, nd_2sg_profile ) * _zla( 0, 1 + nd_layer )
 2485.       t$1495 = _zla( 0, nd_channel ) * _zla( 0, nd_2sg_profile ) * _zla( 0, 1 + nd_layer )
 2485.       t$1496 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2485.       t$1497 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * _zla( 0, nd_channel )
 2485.       t$1498 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum )
 3247.       t$1501 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8
 2485.       t$134 = nd_column
 3365.       t$1502 = _zla( 0, nd_column )
 2485.       t$1503 = _zla( 0, nd_profile ) * _zla( 0, nd_column )
 3365.       t$1504 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8
 3365.       t$1506 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8
 2485.       t$1507 = _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 3272.       t$1508 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8
 3272.       t$1510 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 8
 3269.       t$1511 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 8
 3269.       t$1513 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16
 2485.       t$131 = nd_sph_coeff
 3310.       t$1514 = _zla( 0, nd_sph_coeff )
 3310.       t$1515 = _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8
 3310.       t$1517 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + 8 * _zla( 0, nd_sph_coeff ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16
 2485.       t$132 = ( -1 + id_ct )
 2485.       t$133 = nd_overlap_coeff
 2485.       t$1518 = nd_layer + -id_ct + 2
 3344.       t$1519 = _zla( 0, nd_layer + -id_ct + 2 )
 2485.       t$1520 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
 3344.       t$1521 = _zla( 0, nd_overlap_coeff )
 2485.       t$1522 = _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 )
 3344.       t$1523 = 8 * _zla( 0, nd_sph_coeff ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8
 3344.       t$1525 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + 8 * _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16
 2485.       t$1526 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
 3316.       t$1527 = 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 )
 3316.       t$1529 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 )
 3281.       t$1530 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 )
 3281.       t$1532 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 )
 3275.       t$1533 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
 3275.       t$1535 = 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
 3256.       t$1536 = 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3256.       t$1538 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3258.       t$1539 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3258.       t$1541 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3325.       t$1542 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3325.       t$1544 = 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2485.       t$129 = nd_region
 3213.       t$1545 = _zla( 0, nd_region )
 2485.       t$1546 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 )
 3213.       t$1547 = 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3213.       t$1549 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3245.       t$1550 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3245.       t$1552 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2485.       t$130 = nd_max_order
 2485.       t$1553 = 1 + nd_max_order
 3307.       t$1554 = _zla( 0, 1 + nd_max_order )
 3307.       t$1556 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3362.       t$1558 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3360.       t$1560 = _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3192.       t$1562 = _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3202.       t$1564 = _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3162.       t$1566 = _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2485.       t$1567 = _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer )
 3329.       t$1568 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3329.       t$1570 = _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3218.       t$1572 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3200.       t$1574 = 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3322.       t$1576 = 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3208.       t$1578 = 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3249.       t$1579 = 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3249.       t$1581 = 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3358.       t$1583 = _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3303.       t$1585 = 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3197.       t$1587 = 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3292.       t$1588 = 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3292.       t$1590 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3285.       t$1591 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3285.       t$1593 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3283.       t$1594 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3283.       t$1596 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3305.       t$1598 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3190.       t$1600 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3353.       t$1602 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 4 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3356.       t$1604 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3254.       t$1605 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3254.       t$1607 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3261.       t$1608 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3261.       t$1610 = 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3378.       t$1611 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3378.       t$1613 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2485.       t$1614 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
 3334.       t$1615 = 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3334.       t$1617 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3242.       t$1618 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3242.       t$1620 = 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2600.       if ( t$30 == 0 ) then
 2600.          t$1626(1) = 4
 2600.          t$1627(1) = 0
 2600.          t$1628(1) = 16
 2600.          t$1623(1) = int( loc( t$29 ), 8 )
 2600.          t$1624(1) = 0
 2600.          t$1625(1) = int( loc( t$1621 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$1623(1), t$1626(1), 1, t$1624(1), t$1625(1), t$1627(1), t$1628(1) )
 2600.       endif
 3296.       ss_prop%k_grey_tot_clr%header%el_len = 64
 3296.       ss_prop%k_grey_tot_clr%header%assoc = 0
 3296.       ss_prop%k_grey_tot_clr%header%ptr_alloc = 0
 3296.       ss_prop%k_grey_tot_clr%header%p_or_a = 1
 3296.       ss_prop%k_grey_tot_clr%header%a_contig = 0
 3296.       ss_prop%k_grey_tot_clr%header%dv_versn = 2
 3296.       ss_prop%k_grey_tot_clr%header%dv_smunit = 64
 3296.       ss_prop%k_grey_tot_clr%header%d_type = 0
 3296.       ss_prop%k_grey_tot_clr%header%n_params = 0
 3296.       ss_prop%k_grey_tot_clr%header%pad_codim = 0
 3296.       ss_prop%k_grey_tot_clr%header%n_codim = 0
 3296.       ss_prop%k_grey_tot_clr%header%pad_dim = 0
 3296.       ss_prop%k_grey_tot_clr%header%n_dim = 2
 3296.       ss_prop%k_grey_tot_clr%header%d_type_idx = 13
 3296.       ss_prop%k_grey_tot_clr%header%typ_code = 134481411
 3296.       ss_prop%k_grey_tot_clr%header%orig_base = 0
 3296.       ss_prop%k_grey_tot_clr%header%orig_size = 0
 3296.       ss_prop%k_grey_tot_clr%dim_1%LB = 1
 3296.       ss_prop%k_grey_tot_clr%dim_1%EX = 0
 3296.       ss_prop%k_grey_tot_clr%dim_1%SM = 1
 3296.       ss_prop%k_grey_tot_clr%dim_2%LB = 1
 3296.       ss_prop%k_grey_tot_clr%dim_2%EX = 0
 3296.       ss_prop%k_grey_tot_clr%dim_2%SM = 1
 3296.       ss_prop%k_ext_scat_clr%header%el_len = 64
 3296.       ss_prop%k_ext_scat_clr%header%assoc = 0
 3296.       ss_prop%k_ext_scat_clr%header%ptr_alloc = 0
 3296.       ss_prop%k_ext_scat_clr%header%p_or_a = 1
 3296.       ss_prop%k_ext_scat_clr%header%a_contig = 0
 3296.       ss_prop%k_ext_scat_clr%header%dv_versn = 2
 3296.       ss_prop%k_ext_scat_clr%header%dv_smunit = 64
 3296.       ss_prop%k_ext_scat_clr%header%d_type = 0
 3296.       ss_prop%k_ext_scat_clr%header%n_params = 0
 3296.       ss_prop%k_ext_scat_clr%header%pad_codim = 0
 3296.       ss_prop%k_ext_scat_clr%header%n_codim = 0
 3296.       ss_prop%k_ext_scat_clr%header%pad_dim = 0
 3296.       ss_prop%k_ext_scat_clr%header%n_dim = 2
 3296.       ss_prop%k_ext_scat_clr%header%d_type_idx = 13
 3296.       ss_prop%k_ext_scat_clr%header%typ_code = 134481411
 3296.       ss_prop%k_ext_scat_clr%header%orig_base = 0
 3296.       ss_prop%k_ext_scat_clr%header%orig_size = 0
 3296.       ss_prop%k_ext_scat_clr%dim_1%LB = 1
 3296.       ss_prop%k_ext_scat_clr%dim_1%EX = 0
 3296.       ss_prop%k_ext_scat_clr%dim_1%SM = 1
 3296.       ss_prop%k_ext_scat_clr%dim_2%LB = 1
 3296.       ss_prop%k_ext_scat_clr%dim_2%EX = 0
 3296.       ss_prop%k_ext_scat_clr%dim_2%SM = 1
 3296.       ss_prop%tau_clr%header%el_len = 64
 3296.       ss_prop%tau_clr%header%assoc = 0
 3296.       ss_prop%tau_clr%header%ptr_alloc = 0
 3296.       ss_prop%tau_clr%header%p_or_a = 1
 3296.       ss_prop%tau_clr%header%a_contig = 0
 3296.       ss_prop%tau_clr%header%dv_versn = 2
 3296.       ss_prop%tau_clr%header%dv_smunit = 64
 3296.       ss_prop%tau_clr%header%d_type = 0
 3296.       ss_prop%tau_clr%header%n_params = 0
 3296.       ss_prop%tau_clr%header%pad_codim = 0
 3296.       ss_prop%tau_clr%header%n_codim = 0
 3296.       ss_prop%tau_clr%header%pad_dim = 0
 3296.       ss_prop%tau_clr%header%n_dim = 2
 3296.       ss_prop%tau_clr%header%d_type_idx = 13
 3296.       ss_prop%tau_clr%header%typ_code = 134481411
 3296.       ss_prop%tau_clr%header%orig_base = 0
 3296.       ss_prop%tau_clr%header%orig_size = 0
 3296.       ss_prop%tau_clr%dim_1%LB = 1
 3296.       ss_prop%tau_clr%dim_1%EX = 0
 3296.       ss_prop%tau_clr%dim_1%SM = 1
 3296.       ss_prop%tau_clr%dim_2%LB = 1
 3296.       ss_prop%tau_clr%dim_2%EX = 0
 3296.       ss_prop%tau_clr%dim_2%SM = 1
 3296.       ss_prop%omega_clr%header%el_len = 64
 3296.       ss_prop%omega_clr%header%assoc = 0
 3296.       ss_prop%omega_clr%header%ptr_alloc = 0
 3296.       ss_prop%omega_clr%header%p_or_a = 1
 3296.       ss_prop%omega_clr%header%a_contig = 0
 3296.       ss_prop%omega_clr%header%dv_versn = 2
 3296.       ss_prop%omega_clr%header%dv_smunit = 64
 3296.       ss_prop%omega_clr%header%d_type = 0
 3296.       ss_prop%omega_clr%header%n_params = 0
 3296.       ss_prop%omega_clr%header%pad_codim = 0
 3296.       ss_prop%omega_clr%header%n_codim = 0
 3296.       ss_prop%omega_clr%header%pad_dim = 0
 3296.       ss_prop%omega_clr%header%n_dim = 2
 3296.       ss_prop%omega_clr%header%d_type_idx = 13
 3296.       ss_prop%omega_clr%header%typ_code = 134481411
 3296.       ss_prop%omega_clr%header%orig_base = 0
 3296.       ss_prop%omega_clr%header%orig_size = 0
 3296.       ss_prop%omega_clr%dim_1%LB = 1
 3296.       ss_prop%omega_clr%dim_1%EX = 0
 3296.       ss_prop%omega_clr%dim_1%SM = 1
 3296.       ss_prop%omega_clr%dim_2%LB = 1
 3296.       ss_prop%omega_clr%dim_2%EX = 0
 3296.       ss_prop%omega_clr%dim_2%SM = 1
 3296.       ss_prop%phase_fnc_clr%header%el_len = 64
 3296.       ss_prop%phase_fnc_clr%header%assoc = 0
 3296.       ss_prop%phase_fnc_clr%header%ptr_alloc = 0
 3296.       ss_prop%phase_fnc_clr%header%p_or_a = 1
 3296.       ss_prop%phase_fnc_clr%header%a_contig = 0
 3296.       ss_prop%phase_fnc_clr%header%dv_versn = 2
 3296.       ss_prop%phase_fnc_clr%header%dv_smunit = 64
 3296.       ss_prop%phase_fnc_clr%header%d_type = 0
 3296.       ss_prop%phase_fnc_clr%header%n_params = 0
 3296.       ss_prop%phase_fnc_clr%header%pad_codim = 0
 3296.       ss_prop%phase_fnc_clr%header%n_codim = 0
 3296.       ss_prop%phase_fnc_clr%header%pad_dim = 0
 3296.       ss_prop%phase_fnc_clr%header%n_dim = 3
 3296.       ss_prop%phase_fnc_clr%header%d_type_idx = 13
 3296.       ss_prop%phase_fnc_clr%header%typ_code = 134481411
 3296.       ss_prop%phase_fnc_clr%header%orig_base = 0
 3296.       ss_prop%phase_fnc_clr%header%orig_size = 0
 3296.       ss_prop%phase_fnc_clr%dim_1%LB = 1
 3296.       ss_prop%phase_fnc_clr%dim_1%EX = 0
 3296.       ss_prop%phase_fnc_clr%dim_1%SM = 1
 3296.       ss_prop%phase_fnc_clr%dim_2%LB = 1
 3296.       ss_prop%phase_fnc_clr%dim_2%EX = 0
 3296.       ss_prop%phase_fnc_clr%dim_2%SM = 1
 3296.       ss_prop%phase_fnc_clr%dim_3%LB = 1
 3296.       ss_prop%phase_fnc_clr%dim_3%EX = 0
 3296.       ss_prop%phase_fnc_clr%dim_3%SM = 1
 3296.       ss_prop%forward_scatter_clr%header%el_len = 64
 3296.       ss_prop%forward_scatter_clr%header%assoc = 0
 3296.       ss_prop%forward_scatter_clr%header%ptr_alloc = 0
 3296.       ss_prop%forward_scatter_clr%header%p_or_a = 1
 3296.       ss_prop%forward_scatter_clr%header%a_contig = 0
 3296.       ss_prop%forward_scatter_clr%header%dv_versn = 2
 3296.       ss_prop%forward_scatter_clr%header%dv_smunit = 64
 3296.       ss_prop%forward_scatter_clr%header%d_type = 0
 3296.       ss_prop%forward_scatter_clr%header%n_params = 0
 3296.       ss_prop%forward_scatter_clr%header%pad_codim = 0
 3296.       ss_prop%forward_scatter_clr%header%n_codim = 0
 3296.       ss_prop%forward_scatter_clr%header%pad_dim = 0
 3296.       ss_prop%forward_scatter_clr%header%n_dim = 2
 3296.       ss_prop%forward_scatter_clr%header%d_type_idx = 13
 3296.       ss_prop%forward_scatter_clr%header%typ_code = 134481411
 3296.       ss_prop%forward_scatter_clr%header%orig_base = 0
 3296.       ss_prop%forward_scatter_clr%header%orig_size = 0
 3296.       ss_prop%forward_scatter_clr%dim_1%LB = 1
 3296.       ss_prop%forward_scatter_clr%dim_1%EX = 0
 3296.       ss_prop%forward_scatter_clr%dim_1%SM = 1
 3296.       ss_prop%forward_scatter_clr%dim_2%LB = 1
 3296.       ss_prop%forward_scatter_clr%dim_2%EX = 0
 3296.       ss_prop%forward_scatter_clr%dim_2%SM = 1
 3296.       ss_prop%forward_solar_clr%header%el_len = 64
 3296.       ss_prop%forward_solar_clr%header%assoc = 0
 3296.       ss_prop%forward_solar_clr%header%ptr_alloc = 0
 3296.       ss_prop%forward_solar_clr%header%p_or_a = 1
 3296.       ss_prop%forward_solar_clr%header%a_contig = 0
 3296.       ss_prop%forward_solar_clr%header%dv_versn = 2
 3296.       ss_prop%forward_solar_clr%header%dv_smunit = 64
 3296.       ss_prop%forward_solar_clr%header%d_type = 0
 3296.       ss_prop%forward_solar_clr%header%n_params = 0
 3296.       ss_prop%forward_solar_clr%header%pad_codim = 0
 3296.       ss_prop%forward_solar_clr%header%n_codim = 0
 3296.       ss_prop%forward_solar_clr%header%pad_dim = 0
 3296.       ss_prop%forward_solar_clr%header%n_dim = 2
 3296.       ss_prop%forward_solar_clr%header%d_type_idx = 13
 3296.       ss_prop%forward_solar_clr%header%typ_code = 134481411
 3296.       ss_prop%forward_solar_clr%header%orig_base = 0
 3296.       ss_prop%forward_solar_clr%header%orig_size = 0
 3296.       ss_prop%forward_solar_clr%dim_1%LB = 1
 3296.       ss_prop%forward_solar_clr%dim_1%EX = 0
 3296.       ss_prop%forward_solar_clr%dim_1%SM = 1
 3296.       ss_prop%forward_solar_clr%dim_2%LB = 1
 3296.       ss_prop%forward_solar_clr%dim_2%EX = 0
 3296.       ss_prop%forward_solar_clr%dim_2%SM = 1
 3296.       ss_prop%phase_fnc_solar_clr%header%el_len = 64
 3296.       ss_prop%phase_fnc_solar_clr%header%assoc = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%ptr_alloc = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%p_or_a = 1
 3296.       ss_prop%phase_fnc_solar_clr%header%a_contig = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%dv_versn = 2
 3296.       ss_prop%phase_fnc_solar_clr%header%dv_smunit = 64
 3296.       ss_prop%phase_fnc_solar_clr%header%d_type = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%n_params = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%pad_codim = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%n_codim = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%pad_dim = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%n_dim = 3
 3296.       ss_prop%phase_fnc_solar_clr%header%d_type_idx = 13
 3296.       ss_prop%phase_fnc_solar_clr%header%typ_code = 134481411
 3296.       ss_prop%phase_fnc_solar_clr%header%orig_base = 0
 3296.       ss_prop%phase_fnc_solar_clr%header%orig_size = 0
 3296.       ss_prop%phase_fnc_solar_clr%dim_1%LB = 1
 3296.       ss_prop%phase_fnc_solar_clr%dim_1%EX = 0
 3296.       ss_prop%phase_fnc_solar_clr%dim_1%SM = 1
 3296.       ss_prop%phase_fnc_solar_clr%dim_2%LB = 1
 3296.       ss_prop%phase_fnc_solar_clr%dim_2%EX = 0
 3296.       ss_prop%phase_fnc_solar_clr%dim_2%SM = 1
 3296.       ss_prop%phase_fnc_solar_clr%dim_3%LB = 1
 3296.       ss_prop%phase_fnc_solar_clr%dim_3%EX = 0
 3296.       ss_prop%phase_fnc_solar_clr%dim_3%SM = 1
 3296.       ss_prop%k_grey_tot%header%el_len = 64
 3296.       ss_prop%k_grey_tot%header%assoc = 0
 3296.       ss_prop%k_grey_tot%header%ptr_alloc = 0
 3296.       ss_prop%k_grey_tot%header%p_or_a = 1
 3296.       ss_prop%k_grey_tot%header%a_contig = 0
 3296.       ss_prop%k_grey_tot%header%dv_versn = 2
 3296.       ss_prop%k_grey_tot%header%dv_smunit = 64
 3296.       ss_prop%k_grey_tot%header%d_type = 0
 3296.       ss_prop%k_grey_tot%header%n_params = 0
 3296.       ss_prop%k_grey_tot%header%pad_codim = 0
 3296.       ss_prop%k_grey_tot%header%n_codim = 0
 3296.       ss_prop%k_grey_tot%header%pad_dim = 0
 3296.       ss_prop%k_grey_tot%header%n_dim = 3
 3296.       ss_prop%k_grey_tot%header%d_type_idx = 13
 3296.       ss_prop%k_grey_tot%header%typ_code = 134481411
 3296.       ss_prop%k_grey_tot%header%orig_base = 0
 3296.       ss_prop%k_grey_tot%header%orig_size = 0
 3296.       ss_prop%k_grey_tot%dim_1%LB = 1
 3296.       ss_prop%k_grey_tot%dim_1%EX = 0
 3296.       ss_prop%k_grey_tot%dim_1%SM = 1
 3296.       ss_prop%k_grey_tot%dim_2%LB = 1
 3296.       ss_prop%k_grey_tot%dim_2%EX = 0
 3296.       ss_prop%k_grey_tot%dim_2%SM = 1
 3296.       ss_prop%k_grey_tot%dim_3%LB = 1
 3296.       ss_prop%k_grey_tot%dim_3%EX = 0
 3296.       ss_prop%k_grey_tot%dim_3%SM = 1
 3296.       ss_prop%k_ext_scat%header%el_len = 64
 3296.       ss_prop%k_ext_scat%header%assoc = 0
 3296.       ss_prop%k_ext_scat%header%ptr_alloc = 0
 3296.       ss_prop%k_ext_scat%header%p_or_a = 1
 3296.       ss_prop%k_ext_scat%header%a_contig = 0
 3296.       ss_prop%k_ext_scat%header%dv_versn = 2
 3296.       ss_prop%k_ext_scat%header%dv_smunit = 64
 3296.       ss_prop%k_ext_scat%header%d_type = 0
 3296.       ss_prop%k_ext_scat%header%n_params = 0
 3296.       ss_prop%k_ext_scat%header%pad_codim = 0
 3296.       ss_prop%k_ext_scat%header%n_codim = 0
 3296.       ss_prop%k_ext_scat%header%pad_dim = 0
 3296.       ss_prop%k_ext_scat%header%n_dim = 3
 3296.       ss_prop%k_ext_scat%header%d_type_idx = 13
 3296.       ss_prop%k_ext_scat%header%typ_code = 134481411
 3296.       ss_prop%k_ext_scat%header%orig_base = 0
 3296.       ss_prop%k_ext_scat%header%orig_size = 0
 3296.       ss_prop%k_ext_scat%dim_1%LB = 1
 3296.       ss_prop%k_ext_scat%dim_1%EX = 0
 3296.       ss_prop%k_ext_scat%dim_1%SM = 1
 3296.       ss_prop%k_ext_scat%dim_2%LB = 1
 3296.       ss_prop%k_ext_scat%dim_2%EX = 0
 3296.       ss_prop%k_ext_scat%dim_2%SM = 1
 3296.       ss_prop%k_ext_scat%dim_3%LB = 1
 3296.       ss_prop%k_ext_scat%dim_3%EX = 0
 3296.       ss_prop%k_ext_scat%dim_3%SM = 1
 3296.       ss_prop%tau%header%el_len = 64
 3296.       ss_prop%tau%header%assoc = 0
 3296.       ss_prop%tau%header%ptr_alloc = 0
 3296.       ss_prop%tau%header%p_or_a = 1
 3296.       ss_prop%tau%header%a_contig = 0
 3296.       ss_prop%tau%header%dv_versn = 2
 3296.       ss_prop%tau%header%dv_smunit = 64
 3296.       ss_prop%tau%header%d_type = 0
 3296.       ss_prop%tau%header%n_params = 0
 3296.       ss_prop%tau%header%pad_codim = 0
 3296.       ss_prop%tau%header%n_codim = 0
 3296.       ss_prop%tau%header%pad_dim = 0
 3296.       ss_prop%tau%header%n_dim = 3
 3296.       ss_prop%tau%header%d_type_idx = 13
 3296.       ss_prop%tau%header%typ_code = 134481411
 3296.       ss_prop%tau%header%orig_base = 0
 3296.       ss_prop%tau%header%orig_size = 0
 3296.       ss_prop%tau%dim_1%LB = 1
 3296.       ss_prop%tau%dim_1%EX = 0
 3296.       ss_prop%tau%dim_1%SM = 1
 3296.       ss_prop%tau%dim_2%LB = 1
 3296.       ss_prop%tau%dim_2%EX = 0
 3296.       ss_prop%tau%dim_2%SM = 1
 3296.       ss_prop%tau%dim_3%LB = 1
 3296.       ss_prop%tau%dim_3%EX = 0
 3296.       ss_prop%tau%dim_3%SM = 1
 3296.       ss_prop%omega%header%el_len = 64
 3296.       ss_prop%omega%header%assoc = 0
 3296.       ss_prop%omega%header%ptr_alloc = 0
 3296.       ss_prop%omega%header%p_or_a = 1
 3296.       ss_prop%omega%header%a_contig = 0
 3296.       ss_prop%omega%header%dv_versn = 2
 3296.       ss_prop%omega%header%dv_smunit = 64
 3296.       ss_prop%omega%header%d_type = 0
 3296.       ss_prop%omega%header%n_params = 0
 3296.       ss_prop%omega%header%pad_codim = 0
 3296.       ss_prop%omega%header%n_codim = 0
 3296.       ss_prop%omega%header%pad_dim = 0
 3296.       ss_prop%omega%header%n_dim = 3
 3296.       ss_prop%omega%header%d_type_idx = 13
 3296.       ss_prop%omega%header%typ_code = 134481411
 3296.       ss_prop%omega%header%orig_base = 0
 3296.       ss_prop%omega%header%orig_size = 0
 3296.       ss_prop%omega%dim_1%LB = 1
 3296.       ss_prop%omega%dim_1%EX = 0
 3296.       ss_prop%omega%dim_1%SM = 1
 3296.       ss_prop%omega%dim_2%LB = 1
 3296.       ss_prop%omega%dim_2%EX = 0
 3296.       ss_prop%omega%dim_2%SM = 1
 3296.       ss_prop%omega%dim_3%LB = 1
 3296.       ss_prop%omega%dim_3%EX = 0
 3296.       ss_prop%omega%dim_3%SM = 1
 3296.       ss_prop%phase_fnc%header%el_len = 64
 3296.       ss_prop%phase_fnc%header%assoc = 0
 3296.       ss_prop%phase_fnc%header%ptr_alloc = 0
 3296.       ss_prop%phase_fnc%header%p_or_a = 1
 3296.       ss_prop%phase_fnc%header%a_contig = 0
 3296.       ss_prop%phase_fnc%header%dv_versn = 2
 3296.       ss_prop%phase_fnc%header%dv_smunit = 64
 3296.       ss_prop%phase_fnc%header%d_type = 0
 3296.       ss_prop%phase_fnc%header%n_params = 0
 3296.       ss_prop%phase_fnc%header%pad_codim = 0
 3296.       ss_prop%phase_fnc%header%n_codim = 0
 3296.       ss_prop%phase_fnc%header%pad_dim = 0
 3296.       ss_prop%phase_fnc%header%n_dim = 4
 3296.       ss_prop%phase_fnc%header%d_type_idx = 13
 3296.       ss_prop%phase_fnc%header%typ_code = 134481411
 3296.       ss_prop%phase_fnc%header%orig_base = 0
 3296.       ss_prop%phase_fnc%header%orig_size = 0
 3296.       ss_prop%phase_fnc%dim_1%LB = 1
 3296.       ss_prop%phase_fnc%dim_1%EX = 0
 3296.       ss_prop%phase_fnc%dim_1%SM = 1
 3296.       ss_prop%phase_fnc%dim_2%LB = 1
 3296.       ss_prop%phase_fnc%dim_2%EX = 0
 3296.       ss_prop%phase_fnc%dim_2%SM = 1
 3296.       ss_prop%phase_fnc%dim_3%LB = 1
 3296.       ss_prop%phase_fnc%dim_3%EX = 0
 3296.       ss_prop%phase_fnc%dim_3%SM = 1
 3296.       ss_prop%phase_fnc%dim_4%LB = 1
 3296.       ss_prop%phase_fnc%dim_4%EX = 0
 3296.       ss_prop%phase_fnc%dim_4%SM = 1
 3296.       ss_prop%forward_scatter%header%el_len = 64
 3296.       ss_prop%forward_scatter%header%assoc = 0
 3296.       ss_prop%forward_scatter%header%ptr_alloc = 0
 3296.       ss_prop%forward_scatter%header%p_or_a = 1
 3296.       ss_prop%forward_scatter%header%a_contig = 0
 3296.       ss_prop%forward_scatter%header%dv_versn = 2
 3296.       ss_prop%forward_scatter%header%dv_smunit = 64
 3296.       ss_prop%forward_scatter%header%d_type = 0
 3296.       ss_prop%forward_scatter%header%n_params = 0
 3296.       ss_prop%forward_scatter%header%pad_codim = 0
 3296.       ss_prop%forward_scatter%header%n_codim = 0
 3296.       ss_prop%forward_scatter%header%pad_dim = 0
 3296.       ss_prop%forward_scatter%header%n_dim = 3
 3296.       ss_prop%forward_scatter%header%d_type_idx = 13
 3296.       ss_prop%forward_scatter%header%typ_code = 134481411
 3296.       ss_prop%forward_scatter%header%orig_base = 0
 3296.       ss_prop%forward_scatter%header%orig_size = 0
 3296.       ss_prop%forward_scatter%dim_1%LB = 1
 3296.       ss_prop%forward_scatter%dim_1%EX = 0
 3296.       ss_prop%forward_scatter%dim_1%SM = 1
 3296.       ss_prop%forward_scatter%dim_2%LB = 1
 3296.       ss_prop%forward_scatter%dim_2%EX = 0
 3296.       ss_prop%forward_scatter%dim_2%SM = 1
 3296.       ss_prop%forward_scatter%dim_3%LB = 1
 3296.       ss_prop%forward_scatter%dim_3%EX = 0
 3296.       ss_prop%forward_scatter%dim_3%SM = 1
 3296.       ss_prop%forward_solar%header%el_len = 64
 3296.       ss_prop%forward_solar%header%assoc = 0
 3296.       ss_prop%forward_solar%header%ptr_alloc = 0
 3296.       ss_prop%forward_solar%header%p_or_a = 1
 3296.       ss_prop%forward_solar%header%a_contig = 0
 3296.       ss_prop%forward_solar%header%dv_versn = 2
 3296.       ss_prop%forward_solar%header%dv_smunit = 64
 3296.       ss_prop%forward_solar%header%d_type = 0
 3296.       ss_prop%forward_solar%header%n_params = 0
 3296.       ss_prop%forward_solar%header%pad_codim = 0
 3296.       ss_prop%forward_solar%header%n_codim = 0
 3296.       ss_prop%forward_solar%header%pad_dim = 0
 3296.       ss_prop%forward_solar%header%n_dim = 3
 3296.       ss_prop%forward_solar%header%d_type_idx = 13
 3296.       ss_prop%forward_solar%header%typ_code = 134481411
 3296.       ss_prop%forward_solar%header%orig_base = 0
 3296.       ss_prop%forward_solar%header%orig_size = 0
 3296.       ss_prop%forward_solar%dim_1%LB = 1
 3296.       ss_prop%forward_solar%dim_1%EX = 0
 3296.       ss_prop%forward_solar%dim_1%SM = 1
 3296.       ss_prop%forward_solar%dim_2%LB = 1
 3296.       ss_prop%forward_solar%dim_2%EX = 0
 3296.       ss_prop%forward_solar%dim_2%SM = 1
 3296.       ss_prop%forward_solar%dim_3%LB = 1
 3296.       ss_prop%forward_solar%dim_3%EX = 0
 3296.       ss_prop%forward_solar%dim_3%SM = 1
 2600.       ss_prop%phase_fnc_solar%header%el_len = 64
 2600.       ss_prop%phase_fnc_solar%header%assoc = 0
 2600.       ss_prop%phase_fnc_solar%header%ptr_alloc = 0
 2600.       ss_prop%phase_fnc_solar%header%p_or_a = 1
 2600.       ss_prop%phase_fnc_solar%header%a_contig = 0
 2600.       ss_prop%phase_fnc_solar%header%dv_versn = 2
 2600.       ss_prop%phase_fnc_solar%header%dv_smunit = 64
 2600.       ss_prop%phase_fnc_solar%header%d_type = 0
 2600.       ss_prop%phase_fnc_solar%header%n_params = 0
 2600.       ss_prop%phase_fnc_solar%header%pad_codim = 0
 2600.       ss_prop%phase_fnc_solar%header%n_codim = 0
 2600.       ss_prop%phase_fnc_solar%header%pad_dim = 0
 2600.       ss_prop%phase_fnc_solar%header%n_dim = 4
 2600.       ss_prop%phase_fnc_solar%header%d_type_idx = 13
 2600.       ss_prop%phase_fnc_solar%header%typ_code = 134481411
 2600.       ss_prop%phase_fnc_solar%header%orig_base = 0
 2600.       ss_prop%phase_fnc_solar%header%orig_size = 0
 2600.       ss_prop%phase_fnc_solar%dim_1%LB = 1
 2600.       ss_prop%phase_fnc_solar%dim_1%EX = 0
 2600.       ss_prop%phase_fnc_solar%dim_1%SM = 1
 2600.       ss_prop%phase_fnc_solar%dim_2%LB = 1
 2600.       ss_prop%phase_fnc_solar%dim_2%EX = 0
 2600.       ss_prop%phase_fnc_solar%dim_2%SM = 1
 2600.       ss_prop%phase_fnc_solar%dim_3%LB = 1
 2600.       ss_prop%phase_fnc_solar%dim_3%EX = 0
 2600.       ss_prop%phase_fnc_solar%dim_3%SM = 1
 2600.       ss_prop%phase_fnc_solar%dim_4%LB = 1
 2600.       ss_prop%phase_fnc_solar%dim_4%EX = 0
 2600.       ss_prop%phase_fnc_solar%dim_4%SM = 1
 3204.       t$1631 = 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2485.       t$1632 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff )
 3314.       t$1633 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3314.       t$1635 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3312.       t$1636 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3312.       t$1638 = 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3348.       t$1639 = 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3348.       t$1641 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3370.       t$1642 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3370.       t$1644 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 2485.       t$1499 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 3247.       t$1500 = t$1499
 3365.       t$1505 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8
 3272.       t$1509 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8
 3269.       t$1512 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 8
 3310.       t$1516 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16
 3344.       t$1524 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + 8 * _zla( 0, nd_sph_coeff ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 16
 3316.       t$1528 = t$1499 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 )
 3281.       t$1531 = t$1499 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 )
 3275.       t$1534 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
 3256.       t$1537 = t$1499 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3258.       t$1540 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3325.       t$1543 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3213.       t$1548 = t$1499 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3245.       t$1551 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3307.       t$1555 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3362.       t$1557 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3360.       t$1559 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3192.       t$1561 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3202.       t$1563 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3162.       t$1565 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3329.       t$1569 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3218.       t$1571 = t$1499 + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3200.       t$1573 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3322.       t$1575 = t$1499 + 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3208.       t$1577 = t$1499 + 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3249.       t$1580 = t$1499 + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3358.       t$1582 = t$1499 + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3303.       t$1584 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3197.       t$1586 = t$1499 + 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3292.       t$1589 = t$1499 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3285.       t$1592 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3283.       t$1595 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3305.       t$1597 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3190.       t$1599 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3353.       t$1601 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3356.       t$1603 = t$1499 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 4 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3254.       t$1606 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3261.       t$1609 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3378.       t$1612 = t$1499 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3334.       t$1616 = t$1499 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3242.       t$1619 = t$1499 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3204.       t$1630 = t$1499 + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3314.       t$1634 = t$1499 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3312.       t$1637 = t$1499 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3348.       t$1640 = t$1499 + 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3370.       t$1643 = t$1499 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_sph_coeff ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_sph_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 4 * _zla( 0, nd_region ) + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * 8 + 8 * ( ( _zla( 0, nd_point_tile ) * _zla( 0, nd_tile ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_layer + -id_ct + 1 ) + 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, 1 + nd_max_order ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 4 + 4 * _zla( 0, nd_cloud_component ) + 8 * _zla( 0, nd_continuum ) + 8 * ( ( 4 * _zla( 0, nd_cloud_component ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 4 + 4 * _zla( 0, nd_viewing_level ) + 4 * _zla( 0, nd_cloud_type ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_column ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species ) * 8 + 4 * _zla( 0, 1 + nd_max_order ) + 4 * _zla( 0, nd_cloud_component ) + 4 * _zla( 0, nd_continuum ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 4 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 8 * _zla( 0, nd_viewing_level ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_brdf_basis_fnc ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 ) + _zla( 0, nd_direction ) * _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * 2 + _zla( 0, nd_sph_coeff ) + _zla( 0, nd_profile ) * _zla( 0, nd_column ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 3408.       if ( nd_layer > 0 ) then
 3409.          if ( nd_profile > 0 ) then
 3408.             $I_L3408_529 = 0
 3408.             if ( nd_layer >= 4 ) then
 3408.                $I_L3408_627 = 0
 3408. !dir$ blocking_size( 0, 0 )
 3408.                do
 3409.                   $I_L3409_458 = 0
 3409. !dir$ ivdep
 3409. !dir$ blocking_size( 0, 0 )
 3409.                   do
 3410.                      zen_00(1 + $I_L3409_458, 1 + 4 * $I_L3408_627) = zen_0(1 + $I_L3409_458)
 3410.                      zen_00(1 + $I_L3409_458, 2 + 4 * $I_L3408_627) = zen_0(1 + $I_L3409_458)
 3410.                      zen_00(1 + $I_L3409_458, 3 + 4 * $I_L3408_627) = zen_0(1 + $I_L3409_458)
 3410.                      zen_00(1 + $I_L3409_458, 4 + 4 * $I_L3408_627) = zen_0(1 + $I_L3409_458)
 3411.                      $I_L3409_458 = 1 + $I_L3409_458
 3409.                      if ( $I_L3409_458 >= nd_profile ) exit
 3409.                   enddo
 3412.                   $I_L3408_627 = 1 + $I_L3408_627
 3411.                   if ( $I_L3408_627 >= _rsh( nd_layer, 2 ) ) exit
 3411.                enddo
 3412.                $I_L3408_529 = and( 0xfffffffffffffffcUL, nd_layer )
 3412.             endif
 3408.             if ( $I_L3408_529 < nd_layer ) then
 3408.                $I_L3408_621 = 0
 3408. !dir$ blocking_size( 0, 0 )
 3408.                do
 3409.                   $I_L3409_458 = 0
 3409. !dir$ ivdep
 3409. !dir$ blocking_size( 0, 0 )
 3409.                   do
 3410.                      zen_00(1 + $I_L3409_458, $I_L3408_529 + $I_L3408_621 + 1) = zen_0(1 + $I_L3409_458)
 3411.                      $I_L3409_458 = 1 + $I_L3409_458
 3409.                      if ( $I_L3409_458 >= nd_profile ) exit
 3409.                   enddo
 3412.                   $I_L3408_621 = 1 + $I_L3408_621
 3411.                   if ( $I_L3408_621 >= nd_layer + -$I_L3408_529 ) exit
 3411.                enddo
 3411.             endif
 3411.          endif
 3411.       endif
 3418.       if ( i_angular_integration == 1 ) then
 3421.          n_order_phase = 1
 3423.          l_solar_phf = .false.
 3424.          l_rescale_solar_phf = .false.
 3426.       else if ( i_angular_integration == 3 ) then
 3429.          call set_truncation( ierr, i_truncation, ls_global_trunc, ls_max_order, ls_local_trunc(0), ms_min, ms_max, ms_trunc(0), ia_sph_mm(0), n_order_phase, nd_max_order )
 3439.          l_solar_phf = isolir == 1 .and. i_sph_algorithm == 2
 3441.          l_rescale_solar_phf = l_rescale .and. isolir == 1 .and. i_sph_algorithm == 2
 3444.          if ( isolir == 1 .and. i_sph_algorithm == 2 ) then
 3445.             call sol_scat_cos( n_profile, n_direction, zen_0(1), direction(1, 1, 1), cos_sol_view(1, 1), nd_profile, nd_direction )
 3445.          endif
 3451.          call calc_cg_coeff( ls_max_order, ia_sph_mm(0), ms_min, ms_trunc(0), cg_coeff(1), nd_max_order, nd_sph_coeff )
 3458.          call calc_uplm_zero( ms_min, ms_max, ia_sph_mm(0), ls_local_trunc(0), uplm_zero(1), nd_max_order, nd_sph_coeff )
 3462.          if ( isolir == 1 ) then
 3464.             call calc_uplm_sol( n_profile, ms_min, ms_max, ia_sph_mm(0), ls_local_trunc(0), zen_0(1), uplm_sol(1, 1), nd_profile, nd_max_order, nd_sph_coeff )
 3464.          endif
 3469.          if ( i_sph_algorithm == 2 ) then
 3471.             call calc_brdf( isolir, ms_min, ms_max, ia_sph_mm(0), uplm_sol(1, 1), uplm_zero(1), n_brdf_basis_fnc, ls_brdf_trunc, f_brdf(1, 0, 0, 0), n_profile, n_direction, direction(1, 1, 1), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), nd_profile, nd_radiance_profile, nd_direction, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc )
 3471.          endif
 3483.          l_diff_alb = .false.
 3484.          if ( n_band > 0 ) then
 3484.             $I_L3484_460 = 0
 3484. !dir$ ivdep
 3484.             do
 3485.                l_diff_alb = l_diff_alb .or. i_gas_overlap(1 + $I_L3484_460) == 5
 3487.                $I_L3484_460 = 1 + $I_L3484_460
 3484.                if ( $I_L3484_460 >= n_band ) exit
 3484.             enddo
 3484.          endif
 3488.          if ( isolir == 2 ) then
 3488.             if ( l_diff_alb ) then
 3489.                call diff_albedo_basis( n_brdf_basis_fnc, ls_brdf_trunc, f_brdf(1, 0, 0, 0), uplm_zero(ia_sph_mm(0)), diffuse_alb_basis(1), nd_brdf_basis_fnc, nd_brdf_trunc, nd_sph_coeff )
 3489.             endif
 3489.          endif
 3498.          call set_rad_layer( ierr, n_layer, n_viewing_level, viewing_level(1), i_rad_layer(1), frac_rad_layer(1), nd_viewing_level )
 3498.       endif
 3509.       i_top = 1
 3516.       l_moist_aerosol = .false.
 3517.       if ( n_aerosol > 0 ) then
 3517.          $I_L3517_462 = 0
 3517. !dir$ ivdep
 3517.          do
 3518.             l_moist_aerosol = l_moist_aerosol .or. i_aerosol_parametrization(1 + $I_L3517_462) == 2
 3521.             $I_L3517_462 = 1 + $I_L3517_462
 3517.             if ( $I_L3517_462 >= n_aerosol ) exit
 3517.          enddo
 3517.       endif
 3523.       if ( l_moist_aerosol ) then
 3524.          call set_moist_aerosol_properties( ierr, n_profile, n_layer, n_aerosol, i_aerosol_parametrization(1), nhumidity(1), gas_mix_ratio(1, 1, index_water), t(1, 1), p(1, 1), delta_humidity, mean_rel_humidity(1, 1), i_humidity_pointer(1, 1), nd_profile, nd_layer, nd_aerosol_species )
 3531.          if ( ierr /= 0 ) then
 2485.             _free( t$1499 )
 2485.          else
 2485.             goto 10
 2485.          endif
 2485.       else
 2485.    10    continue
 3537.          l_aerosol_density = .false.
 3538.          if ( l_aerosol ) then
 3539.             if ( n_aerosol > 0 ) then
 3539.                $I_L3539_464 = 0
 3539. !dir$ ivdep
 3539.                do
 3540.                   l_aerosol_density = l_aerosol_density .or. i_aerosol_parametrization(1 + $I_L3539_464) == 2 .or. i_aerosol_parametrization(1 + $I_L3539_464) == 3
 3545.                   $I_L3539_464 = 1 + $I_L3539_464
 3539.                   if ( $I_L3539_464 >= n_aerosol ) exit
 3539.                enddo
 3539.             endif
 3539.          endif
 3552.          if ( l_cloud ) then
 3555.             call set_cloud_pointer( ierr, n_condensed, type_condensed(1), i_cloud_representation, l_drop, l_ice, i_phase_cmp(1), i_cloud_type(1), l_cloud_cmp(1), nd_cloud_component )
 3561.             if ( ierr /= 0 ) then
 2485.                _free( t$1499 )
 2485.             else
 3565.                call set_cloud_geometry( n_profile, n_layer, l_global_cloud_top, n_global_cloud_top, w_cloud(1, id_ct), n_cloud_top, n_cloud_profile(id_ct), i_cloud_profile(1, id_ct), nd_profile, nd_layer, id_ct )
 3571.                k_clr = 1
 3572.                if ( i_cloud == 6 .orelse. i_cloud == 8 ) then
 3577.                   n_region = 3
 3578.                   type_region(1) = 1
 3579.                   type_region(2) = 2
 3580.                   type_region(3) = 3
 3581.                   call aggregate_cloud( ierr, n_profile, n_layer, n_cloud_top, i_cloud, i_cloud_representation, n_cloud_type, frac_cloud(1, id_ct, 1), i_region_cloud(1), frac_region(1, id_ct, 1), nd_profile, nd_layer, nd_cloud_type, nd_region, id_ct )
 3581.                else
 3589.                   if ( i_cloud == 2 ) then
 3589.                      goto 20
 3589.                   else if ( i_cloud == 4 ) then
 3589.                      goto 20
 3589.                   else if ( i_cloud == 7 ) then
 3589.    20                continue
 3593.                      n_region = 2
 3594.                      type_region(1) = 1
 3595.                      type_region(2) = 2
 3596.                      if ( n_layer + -n_cloud_top >= 0 ) then
 3597.                         if ( n_profile > 0 ) then
 3596.                            $I_L3596_531 = 0
 3596.                            do
 3597.                               $I_L3597_466 = 0
 3597. !dir$ ivdep
 3597.                               do
 3598.                                  frac_region(1 + $I_L3597_466, n_cloud_top + $I_L3596_531, 2) = 1.0
 3599.                                  $I_L3597_466 = 1 + $I_L3597_466
 3597.                                  if ( $I_L3597_466 >= n_profile ) exit
 3597.                               enddo
 3600.                               $I_L3596_531 = 1 + $I_L3596_531
 3599.                               if ( $I_L3596_531 >= n_layer + -n_cloud_top + 1 ) exit
 3599.                            enddo
 3599.                         endif
 3599.                      endif
 3599.                   endif
 3599.                endif
 3606.                if ( i_cloud == 2 .orelse. i_cloud == 4 .orelse. i_cloud == 6 .orelse. i_cloud == 7 .orelse. i_cloud == 8 ) then
 3612.                   call overlap_coupled( n_profile, n_layer, n_cloud_top, w_cloud(1, id_ct), w_free(1, 1), n_region, type_region(1), frac_region(1, id_ct, 1), p(1, 1), i_cloud, cloud_overlap(1, -1 + id_ct, 1), nd_profile, nd_layer, nd_overlap_coeff, nd_region, id_ct, dp_corr_strat, dp_corr_conv )
 3612.                else
 3620.                   if ( i_cloud == 3 ) then
 3622.                      call cloud_maxcs_split( ierr, n_profile, n_layer, n_cloud_top, w_cloud(1, id_ct), frac_cloud(1, id_ct, 1), n_cloud_type, n_column_cld(1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), nd_profile, nd_layer, id_ct, nd_column, nd_cloud_type )
 3622.                   endif
 3622.                endif
 3622.                goto 30
 3622.             endif
 3622.          else
 3634.             n_cloud_top = 1 + n_layer
 3634.    30       continue
 3641.             if ( l_continuum .orelse. l_aerosol_density ) then
 3641.                goto 40
 3641.             else
 3641.                if ( l_cloud ) then
 3644.                   t$748 = nd_cloud_component
 3644.                   t$2607 = max( 0, nd_cloud_component )
 3644.                   l_cloud_density = .false.
 3644.                   if ( n_condensed > 0 ) then
 3644.                      $I_L3644_468 = 0
 3644. !dir$ ivdep
 3644.                      do
 3644.                         l_cloud_density = l_cloud_density .or. l_cloud_cmp(1 + $I_L3644_468) .and. i_phase_cmp(1 + $I_L3644_468) == 2 .and. ( i_condensed_param(1 + $I_L3644_468) == 4 .or. i_condensed_param(1 + $I_L3644_468) == 5 ) .or. i_phase_cmp(1 + $I_L3644_468) == 1 .and. i_condensed_param(1 + $I_L3644_468) == 3 .or. i_phase_cmp(1 + $I_L3644_468) == 2 .and. i_condensed_param(1 + $I_L3644_468) == 3
 3644.                         $I_L3644_468 = 1 + $I_L3644_468
 3644.                         if ( $I_L3644_468 >= n_condensed ) exit
 3644.                      enddo
 3644.                   endif
 3641.                   if ( l_cloud_density ) then
 3644.    40                continue
 3653.                      call calculate_density( n_profile, n_layer, l_continuum, gas_mix_ratio(1, 1, max( 1, index_water )), p(1, 1), t(1, 1), i_top, density(1, 1), molar_density_water(1, 1), molar_density_frn(1, 1), nd_profile, nd_layer )
 3653.                   endif
 3653.                endif
 3653.             endif
 3671.             if ( i_angular_integration == 3 ) then
 3672.                call check_phf_term( ierr, l_aerosol, n_aerosol, i_aerosol_parametrization(1), n_aerosol_phf_term(1), n_phase_term_aerosol_prsc(1), l_cloud, n_condensed, i_condensed_param(1), i_phase_cmp(1), condensed_n_phf(1), n_phase_term_drop_prsc, n_phase_term_ice_prsc, n_order_phase, l_henyey_greenstein_pf, l_rescale, n_order_forward, l_solar_phf, n_order_phase_solar, nd_aerosol_species, nd_cloud_component )
 3688.                if ( ierr /= 0 ) then
 2485.                   _free( t$1499 )
 2485.                else
 2485.                   goto 50
 2485.                endif
 2485.             else
 2485.    50          continue
 3698.                if ( i_last_band + -i_first_band >= 0 ) then
 3698.                   $I_L3698_619 = 0
 3698.                   do
 3701.                      if ( -$I_L3698_619 == 0 ) then
 3702.                         l_initial = .true.
 3702.                      else
 3704.                         l_initial = map_channel(i_first_band + $I_L3698_619) > map_channel(i_first_band + $I_L3698_619 + -1)
 3704.                      endif
 3709.                      if ( l_gas == 0 ) then
 3786.                         $l_gas_band_S46 = .false.
 3793.                         if ( l_continuum ) then
 3794.                            n_continuum = n_band_continuum(i_first_band + $I_L3698_619)
 3795.                            if ( n_continuum > 0 ) then
 3795.                               $I_L3795_590 = 0
 3795.                               do
 3796.                                  i_continuum_pointer(1 + $I_L3795_590) = index_continuum(i_first_band + $I_L3698_619, 1 + $I_L3795_590)
 3797.                                  $i_continuum_S25 = i_continuum_pointer(1 + $I_L3795_590)
 3798.                                  k_continuum_mono($i_continuum_S25) = k_continuum(i_first_band + $I_L3698_619, $i_continuum_S25)
 3800.                                  t$937 = nd_profile
 3800.                                  t$938 = nd_layer
 3800.                                  t$3183 = max( 0, nd_profile )
 3800.                                  t$3184 = nd_profile
 3800.                                  t$3185 = max( 0, nd_layer )
 3800.                                  t$3186 = ( nd_profile * nd_layer )
 3800.                                  t$939 = nd_scale_variable
 3800.                                  t$3187 = max( 0, nd_scale_variable )
 3800.                                  if ( i_scale_fnc_cont(i_first_band + $I_L3698_619, $i_continuum_S25) == 1 ) then
 3800.                                     if ( nd_layer > 0 ) then
 3800.                                        if ( nd_profile > 0 ) then
 3800.                                           $SCA_p_ref_continuum_I8 = p_ref_continuum($i_continuum_S25, i_first_band + $I_L3698_619)
 3800.                                           $SCA_scale_continuum_I9 = scale_continuum(2, i_first_band + $I_L3698_619, $i_continuum_S25)
 3800.                                           $SCA_t_ref_continuum_I10 = t_ref_continuum($i_continuum_S25, i_first_band + $I_L3698_619)
 3800.                                           $SCA_scale_continuum_I16 = scale_continuum(1, i_first_band + $I_L3698_619, $i_continuum_S25)
 3800.                                           $I_L3800_545 = 0
 3800.                                           do
 3800.                                              $I_L3800_484 = 0
 3800. !dir$ ivdep
 3800.                                              do
 3800.                                                 amount_continuum(1 + $I_L3800_484, 1 + $I_L3800_545, $i_continuum_S25) = _expn( $SCA_scale_continuum_I16 * log( ( p(1 + $I_L3800_484, 1 + $I_L3800_545) * 1.0/$SCA_p_ref_continuum_I8 ) ) + $SCA_scale_continuum_I9 * log( ( t(1 + $I_L3800_484, 1 + $I_L3800_545) * 1.0/$SCA_t_ref_continuum_I10 ) ) )
 3800.                                                 $I_L3800_484 = 1 + $I_L3800_484
 3800.                                                 if ( $I_L3800_484 >= nd_profile ) exit
 3800.                                              enddo
 3800.                                              $I_L3800_545 = 1 + $I_L3800_545
 3800.                                              if ( $I_L3800_545 >= nd_layer ) exit
 3800.                                           enddo
 3800.                                        endif
 3800.                                     endif
 3800.                                  else if ( i_scale_fnc_cont(i_first_band + $I_L3698_619, $i_continuum_S25) == 2 ) then
 3800.                                     if ( nd_layer > 0 ) then
 3800.                                        if ( nd_profile > 0 ) then
 3800.                                           $SCA_t_ref_continuum_I11 = t_ref_continuum($i_continuum_S25, i_first_band + $I_L3698_619)
 3800.                                           $SCA_scale_continuum_I12 = scale_continuum(2, i_first_band + $I_L3698_619, $i_continuum_S25)
 3800.                                           $SCA_p_ref_continuum_I13 = p_ref_continuum($i_continuum_S25, i_first_band + $I_L3698_619)
 3800.                                           $SCA_scale_continuum_I14 = scale_continuum(1, i_first_band + $I_L3698_619, $i_continuum_S25)
 3800.                                           $SCA_scale_continuum_I15 = scale_continuum(3, i_first_band + $I_L3698_619, $i_continuum_S25)
 3800.                                           $I_L3800_543 = 0
 3800.                                           do
 3800.                                              $I_L3800_482 = 0
 3800. !dir$ ivdep
 3800.                                              do
 3800.                                                 amount_continuum(1 + $I_L3800_482, 1 + $I_L3800_543, $i_continuum_S25) = _expn( $SCA_scale_continuum_I14 * log( ( p(1 + $I_L3800_482, 1 + $I_L3800_543) * 1.0/$SCA_p_ref_continuum_I13 ) ) ) * ( ( -1.0 + ( t(1 + $I_L3800_482, 1 + $I_L3800_543) * 1.0/$SCA_t_ref_continuum_I11 ) ) * ( -1.0 + ( t(1 + $I_L3800_482, 1 + $I_L3800_543) * 1.0/$SCA_t_ref_continuum_I11 ) ) * $SCA_scale_continuum_I15 + $SCA_scale_continuum_I12 * ( -1.0 + ( t(1 + $I_L3800_482, 1 + $I_L3800_543) * 1.0/$SCA_t_ref_continuum_I11 ) ) + 1.0 )
 3800.                                                 $I_L3800_482 = 1 + $I_L3800_482
 3800.                                                 if ( $I_L3800_482 >= nd_profile ) exit
 3800.                                              enddo
 3800.                                              $I_L3800_543 = 1 + $I_L3800_543
 3800.                                              if ( $I_L3800_543 >= nd_layer ) exit
 3800.                                           enddo
 3800.                                        endif
 3800.                                     endif
 3800.                                  endif
 3800.                                  if ( $i_continuum_S25 == 1 ) then
 3800.                                     if ( nd_layer > 0 ) then
 3800.                                        if ( nd_profile > 0 ) then
 3800.                                           $I_L3800_551 = 0
 3800.                                           do
 3800.                                              $I_L3800_490 = 0
 3800. !dir$ ivdep
 3800.                                              do
 3800.                                                 amount_continuum(1 + $I_L3800_490, 1 + $I_L3800_551, 1) = amount_continuum(1 + $I_L3800_490, 1 + $I_L3800_551, 1) * molar_density_water(1 + $I_L3800_490, 1 + $I_L3800_551) * gas_mix_ratio(1 + $I_L3800_490, 1 + $I_L3800_551, index_water)
 3800.                                                 $I_L3800_490 = 1 + $I_L3800_490
 3800.                                                 if ( $I_L3800_490 >= nd_profile ) exit
 3800.                                              enddo
 3800.                                              $I_L3800_551 = 1 + $I_L3800_551
 3800.                                              if ( $I_L3800_551 >= nd_layer ) exit
 3800.                                           enddo
 3800.                                        endif
 3800.                                     endif
 3800.                                  else if ( $i_continuum_S25 == 2 ) then
 3800.                                     if ( nd_layer > 0 ) then
 3800.                                        if ( nd_profile > 0 ) then
 3800.                                           $I_L3800_549 = 0
 3800.                                           do
 3800.                                              $I_L3800_488 = 0
 3800. !dir$ ivdep
 3800.                                              do
 3800.                                                 amount_continuum(1 + $I_L3800_488, 1 + $I_L3800_549, 2) = amount_continuum(1 + $I_L3800_488, 1 + $I_L3800_549, 2) * molar_density_frn(1 + $I_L3800_488, 1 + $I_L3800_549) * gas_mix_ratio(1 + $I_L3800_488, 1 + $I_L3800_549, index_water)
 3800.                                                 $I_L3800_488 = 1 + $I_L3800_488
 3800.                                                 if ( $I_L3800_488 >= nd_profile ) exit
 3800.                                              enddo
 3800.                                              $I_L3800_549 = 1 + $I_L3800_549
 3800.                                              if ( $I_L3800_549 >= nd_layer ) exit
 3800.                                           enddo
 3800.                                        endif
 3800.                                     endif
 3800.                                  else if ( $i_continuum_S25 == 3 ) then
 3800.                                     if ( nd_layer > 0 ) then
 3800.                                        if ( nd_profile > 0 ) then
 3800.                                           $I_L3800_547 = 0
 3800.                                           do
 3800.                                              $I_L3800_486 = 0
 3800. !dir$ ivdep
 3800.                                              do
 3800.                                                 amount_continuum(1 + $I_L3800_486, 1 + $I_L3800_547, 3) = density(1 + $I_L3800_486, 1 + $I_L3800_547) * amount_continuum(1 + $I_L3800_486, 1 + $I_L3800_547, 3) * 7.8100000000000003e-1
 3800.                                                 $I_L3800_486 = 1 + $I_L3800_486
 3800.                                                 if ( $I_L3800_486 >= nd_profile ) exit
 3800.                                              enddo
 3800.                                              $I_L3800_547 = 1 + $I_L3800_547
 3800.                                              if ( $I_L3800_547 >= nd_layer ) exit
 3800.                                           enddo
 3800.                                        endif
 3800.                                     endif
 3800.                                  endif
 3812.                                  $I_L3795_590 = 1 + $I_L3795_590
 3800.                                  if ( $I_L3795_590 >= n_continuum ) exit
 3800.                               enddo
 3800.                            endif
 3800.                         endif
 3817.                         ss_prop%k_grey_tot_clr%header%a_contig = 1
 3817.                         ss_prop%k_grey_tot_clr%dim_1%LB = 1
 3817.                         ss_prop%k_grey_tot_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3817.                         ss_prop%k_grey_tot_clr%dim_1%SM = 1
 3817.                         ss_prop%k_grey_tot_clr%dim_2%LB = 1
 3817.                         ss_prop%k_grey_tot_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3817.                         ss_prop%k_grey_tot_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3817.                         $_allo_P0(0) = 0x1000000000001L
 3817.                         $_allo_P0(1) = loc( ss_prop%k_grey_tot_clr )
 3817.                         call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 3819.                         ss_prop%k_ext_scat_clr%header%a_contig = 1
 3819.                         ss_prop%k_ext_scat_clr%dim_1%LB = 1
 3819.                         ss_prop%k_ext_scat_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3819.                         ss_prop%k_ext_scat_clr%dim_1%SM = 1
 3819.                         ss_prop%k_ext_scat_clr%dim_2%LB = 1
 3819.                         ss_prop%k_ext_scat_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3819.                         ss_prop%k_ext_scat_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3819.                         $_allo_P1(0) = 0x1000000000001L
 3819.                         $_allo_P1(1) = loc( ss_prop%k_ext_scat_clr )
 3819.                         call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 3821.                         ss_prop%tau_clr%header%a_contig = 1
 3821.                         ss_prop%tau_clr%dim_1%LB = 1
 3821.                         ss_prop%tau_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3821.                         ss_prop%tau_clr%dim_1%SM = 1
 3821.                         ss_prop%tau_clr%dim_2%LB = 1
 3821.                         ss_prop%tau_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3821.                         ss_prop%tau_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3821.                         $_allo_P2(0) = 0x1000000000001L
 3821.                         $_allo_P2(1) = loc( ss_prop%tau_clr )
 3821.                         call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 3823.                         ss_prop%omega_clr%header%a_contig = 1
 3823.                         ss_prop%omega_clr%dim_1%LB = 1
 3823.                         ss_prop%omega_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3823.                         ss_prop%omega_clr%dim_1%SM = 1
 3823.                         ss_prop%omega_clr%dim_2%LB = 1
 3823.                         ss_prop%omega_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3823.                         ss_prop%omega_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3823.                         $_allo_P3(0) = 0x1000000000001L
 3823.                         $_allo_P3(1) = loc( ss_prop%omega_clr )
 3823.                         call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 3825.                         ss_prop%phase_fnc_clr%header%a_contig = 1
 3825.                         ss_prop%phase_fnc_clr%dim_1%LB = 1
 3825.                         ss_prop%phase_fnc_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3825.                         ss_prop%phase_fnc_clr%dim_1%SM = 1
 3825.                         ss_prop%phase_fnc_clr%dim_2%LB = 1
 3825.                         ss_prop%phase_fnc_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3825.                         ss_prop%phase_fnc_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3825.                         ss_prop%phase_fnc_clr%dim_3%LB = 1
 3825.                         ss_prop%phase_fnc_clr%dim_3%EX = ( max( 0, nd_max_order ) )
 3825.                         ss_prop%phase_fnc_clr%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer_clr ) )
 3825.                         $_allo_P4(0) = 0x1000000000001L
 3825.                         $_allo_P4(1) = loc( ss_prop%phase_fnc_clr )
 3825.                         call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 3827.                         ss_prop%forward_scatter_clr%header%a_contig = 1
 3827.                         ss_prop%forward_scatter_clr%dim_1%LB = 1
 3827.                         ss_prop%forward_scatter_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3827.                         ss_prop%forward_scatter_clr%dim_1%SM = 1
 3827.                         ss_prop%forward_scatter_clr%dim_2%LB = 1
 3827.                         ss_prop%forward_scatter_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3827.                         ss_prop%forward_scatter_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3827.                         $_allo_P5(0) = 0x1000000000001L
 3827.                         $_allo_P5(1) = loc( ss_prop%forward_scatter_clr )
 3827.                         call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 3829.                         ss_prop%forward_solar_clr%header%a_contig = 1
 3829.                         ss_prop%forward_solar_clr%dim_1%LB = 1
 3829.                         ss_prop%forward_solar_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3829.                         ss_prop%forward_solar_clr%dim_1%SM = 1
 3829.                         ss_prop%forward_solar_clr%dim_2%LB = 1
 3829.                         ss_prop%forward_solar_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3829.                         ss_prop%forward_solar_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3829.                         $_allo_P6(0) = 0x1000000000001L
 3829.                         $_allo_P6(1) = loc( ss_prop%forward_solar_clr )
 3829.                         call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 3831.                         ss_prop%phase_fnc_solar_clr%header%a_contig = 1
 3831.                         ss_prop%phase_fnc_solar_clr%dim_1%LB = 1
 3831.                         ss_prop%phase_fnc_solar_clr%dim_1%EX = ( max( 0, nd_profile ) )
 3831.                         ss_prop%phase_fnc_solar_clr%dim_1%SM = 1
 3831.                         ss_prop%phase_fnc_solar_clr%dim_2%LB = 1
 3831.                         ss_prop%phase_fnc_solar_clr%dim_2%EX = ( max( 0, nd_layer_clr ) )
 3831.                         ss_prop%phase_fnc_solar_clr%dim_2%SM = ( max( 0, nd_profile ) )
 3831.                         ss_prop%phase_fnc_solar_clr%dim_3%LB = 1
 3831.                         ss_prop%phase_fnc_solar_clr%dim_3%EX = ( max( 0, nd_direction ) )
 3831.                         ss_prop%phase_fnc_solar_clr%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer_clr ) )
 3831.                         $_allo_P7(0) = 0x1000000000001L
 3831.                         $_allo_P7(1) = loc( ss_prop%phase_fnc_solar_clr )
 3831.                         call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 3834.                         ss_prop%k_grey_tot%header%a_contig = 1
 3834.                         ss_prop%k_grey_tot%dim_1%LB = 1
 3834.                         ss_prop%k_grey_tot%dim_1%EX = ( max( 0, nd_profile ) )
 3834.                         ss_prop%k_grey_tot%dim_1%SM = 1
 3834.                         ss_prop%k_grey_tot%dim_2%LB = id_ct
 3834.                         ss_prop%k_grey_tot%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3834.                         ss_prop%k_grey_tot%dim_2%SM = ( max( 0, nd_profile ) )
 3834.                         ss_prop%k_grey_tot%dim_3%LB = 0
 3834.                         ss_prop%k_grey_tot%dim_3%EX = ( max( 0, 1 + nd_cloud_type ) )
 3834.                         ss_prop%k_grey_tot%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3834.                         $_allo_P8(0) = 0x1000000000001L
 3834.                         $_allo_P8(1) = loc( ss_prop%k_grey_tot )
 3834.                         call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 3836.                         ss_prop%k_ext_scat%header%a_contig = 1
 3836.                         ss_prop%k_ext_scat%dim_1%LB = 1
 3836.                         ss_prop%k_ext_scat%dim_1%EX = ( max( 0, nd_profile ) )
 3836.                         ss_prop%k_ext_scat%dim_1%SM = 1
 3836.                         ss_prop%k_ext_scat%dim_2%LB = id_ct
 3836.                         ss_prop%k_ext_scat%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3836.                         ss_prop%k_ext_scat%dim_2%SM = ( max( 0, nd_profile ) )
 3836.                         ss_prop%k_ext_scat%dim_3%LB = 0
 3836.                         ss_prop%k_ext_scat%dim_3%EX = ( max( 0, 1 + nd_cloud_type ) )
 3836.                         ss_prop%k_ext_scat%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3836.                         $_allo_P9(0) = 0x1000000000001L
 3836.                         $_allo_P9(1) = loc( ss_prop%k_ext_scat )
 3836.                         call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 3838.                         ss_prop%tau%header%a_contig = 1
 3838.                         ss_prop%tau%dim_1%LB = 1
 3838.                         ss_prop%tau%dim_1%EX = ( max( 0, nd_profile ) )
 3838.                         ss_prop%tau%dim_1%SM = 1
 3838.                         ss_prop%tau%dim_2%LB = id_ct
 3838.                         ss_prop%tau%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3838.                         ss_prop%tau%dim_2%SM = ( max( 0, nd_profile ) )
 3838.                         ss_prop%tau%dim_3%LB = 0
 3838.                         ss_prop%tau%dim_3%EX = ( max( 0, 1 + nd_cloud_type ) )
 3838.                         ss_prop%tau%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3838.                         $_allo_P10(0) = 0x1000000000001L
 3838.                         $_allo_P10(1) = loc( ss_prop%tau )
 3838.                         call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 3840.                         ss_prop%omega%header%a_contig = 1
 3840.                         ss_prop%omega%dim_1%LB = 1
 3840.                         ss_prop%omega%dim_1%EX = ( max( 0, nd_profile ) )
 3840.                         ss_prop%omega%dim_1%SM = 1
 3840.                         ss_prop%omega%dim_2%LB = id_ct
 3840.                         ss_prop%omega%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3840.                         ss_prop%omega%dim_2%SM = ( max( 0, nd_profile ) )
 3840.                         ss_prop%omega%dim_3%LB = 0
 3840.                         ss_prop%omega%dim_3%EX = ( max( 0, 1 + nd_cloud_type ) )
 3840.                         ss_prop%omega%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3840.                         $_allo_P11(0) = 0x1000000000001L
 3840.                         $_allo_P11(1) = loc( ss_prop%omega )
 3840.                         call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 3842.                         ss_prop%phase_fnc%header%a_contig = 1
 3842.                         ss_prop%phase_fnc%dim_1%LB = 1
 3842.                         ss_prop%phase_fnc%dim_1%EX = ( max( 0, nd_profile ) )
 3842.                         ss_prop%phase_fnc%dim_1%SM = 1
 3842.                         ss_prop%phase_fnc%dim_2%LB = id_ct
 3842.                         ss_prop%phase_fnc%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3842.                         ss_prop%phase_fnc%dim_2%SM = ( max( 0, nd_profile ) )
 3842.                         ss_prop%phase_fnc%dim_3%LB = 1
 3842.                         ss_prop%phase_fnc%dim_3%EX = ( max( 0, nd_max_order ) )
 3842.                         ss_prop%phase_fnc%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3842.                         ss_prop%phase_fnc%dim_4%LB = 0
 3842.                         ss_prop%phase_fnc%dim_4%EX = ( max( 0, 1 + nd_cloud_type ) )
 3842.                         ss_prop%phase_fnc%dim_4%SM = ( max( 0, nd_profile ) * max( 0, nd_max_order ) * max( 0, nd_layer + -id_ct + 1 ) )
 3842.                         $_allo_P12(0) = 0x1000000000001L
 3842.                         $_allo_P12(1) = loc( ss_prop%phase_fnc )
 3842.                         call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 3845.                         ss_prop%forward_scatter%header%a_contig = 1
 3845.                         ss_prop%forward_scatter%dim_1%LB = 1
 3845.                         ss_prop%forward_scatter%dim_1%EX = ( max( 0, nd_profile ) )
 3845.                         ss_prop%forward_scatter%dim_1%SM = 1
 3845.                         ss_prop%forward_scatter%dim_2%LB = id_ct
 3845.                         ss_prop%forward_scatter%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3845.                         ss_prop%forward_scatter%dim_2%SM = ( max( 0, nd_profile ) )
 3845.                         ss_prop%forward_scatter%dim_3%LB = 0
 3845.                         ss_prop%forward_scatter%dim_3%EX = ( max( 0, 1 + nd_cloud_type ) )
 3845.                         ss_prop%forward_scatter%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3845.                         $_allo_P13(0) = 0x1000000000001L
 3845.                         $_allo_P13(1) = loc( ss_prop%forward_scatter )
 3845.                         call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
 3847.                         ss_prop%forward_solar%header%a_contig = 1
 3847.                         ss_prop%forward_solar%dim_1%LB = 1
 3847.                         ss_prop%forward_solar%dim_1%EX = ( max( 0, nd_profile ) )
 3847.                         ss_prop%forward_solar%dim_1%SM = 1
 3847.                         ss_prop%forward_solar%dim_2%LB = id_ct
 3847.                         ss_prop%forward_solar%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3847.                         ss_prop%forward_solar%dim_2%SM = ( max( 0, nd_profile ) )
 3847.                         ss_prop%forward_solar%dim_3%LB = 0
 3847.                         ss_prop%forward_solar%dim_3%EX = ( max( 0, 1 + nd_cloud_type ) )
 3847.                         ss_prop%forward_solar%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3847.                         $_allo_P14(0) = 0x1000000000001L
 3847.                         $_allo_P14(1) = loc( ss_prop%forward_solar )
 3847.                         call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
 3849.                         ss_prop%phase_fnc_solar%header%a_contig = 1
 3849.                         ss_prop%phase_fnc_solar%dim_1%LB = 1
 3849.                         ss_prop%phase_fnc_solar%dim_1%EX = ( max( 0, nd_profile ) )
 3849.                         ss_prop%phase_fnc_solar%dim_1%SM = 1
 3849.                         ss_prop%phase_fnc_solar%dim_2%LB = id_ct
 3849.                         ss_prop%phase_fnc_solar%dim_2%EX = ( max( 0, nd_layer + -id_ct + 1 ) )
 3849.                         ss_prop%phase_fnc_solar%dim_2%SM = ( max( 0, nd_profile ) )
 3849.                         ss_prop%phase_fnc_solar%dim_3%LB = 1
 3849.                         ss_prop%phase_fnc_solar%dim_3%EX = ( max( 0, nd_direction ) )
 3849.                         ss_prop%phase_fnc_solar%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) )
 3849.                         ss_prop%phase_fnc_solar%dim_4%LB = 0
 3849.                         ss_prop%phase_fnc_solar%dim_4%EX = ( max( 0, 1 + nd_cloud_type ) )
 3849.                         ss_prop%phase_fnc_solar%dim_4%SM = ( max( 0, nd_profile ) * max( 0, nd_direction ) * max( 0, nd_layer + -id_ct + 1 ) )
 3849.                         $_allo_P15(0) = 0x1000000000001L
 3849.                         $_allo_P15(1) = loc( ss_prop%phase_fnc_solar )
 3849.                         call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 3857.                         call grey_opt_prop( ierr, n_profile, n_layer, p(1, 1), t(1, 1), density(1, 1), n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view(1, 1), l_rayleigh, rayleigh_coefficient(i_first_band + $I_L3698_619), l_continuum, n_continuum, i_continuum_pointer(1), k_continuum_mono(1), amount_continuum(1, 1, 1), l_aerosol, n_aerosol, aerosol_mix_ratio(1, 1, 1), i_aerosol_parametrization(1), i_humidity_pointer(1, 1), humidities(1, 1), delta_humidity, mean_rel_humidity(1, 1), aerosol_absorption(1, 1, i_first_band + $I_L3698_619), aerosol_scattering(1, 1, i_first_band + $I_L3698_619), aerosol_phase_fnc(1, 1, 1, i_first_band + $I_L3698_619), n_opt_level_aerosol_prsc(1), aerosol_pressure_prsc(1, 1, 1), aerosol_absorption_prsc(1, 1, 1, i_first_band + $I_L3698_619), aerosol_scattering_prsc(1, 1, 1, i_first_band + $I_L3698_619), aerosol_phase_fnc_prsc(1, 1, 1, 1, i_first_band + $I_L3698_619), l_cloud, n_cloud_profile(id_ct), i_cloud_profile(1, id_ct), n_cloud_top, n_condensed, l_cloud_cmp(1), i_phase_cmp(1), i_condensed_param(1), condensed_param_list(1, 1, i_first_band + $I_L3698_619), condensed_mix_ratio(1, id_ct, 1), condensed_dim_char(1, id_ct, 1), n_cloud_type, i_cloud_type(1), n_opt_level_drop_prsc, drop_pressure_prsc(1, 1), drop_absorption_prsc(1, 1, i_first_band + $I_L3698_619), drop_scattering_prsc(1, 1, i_first_band + $I_L3698_619), drop_phase_fnc_prsc(1, 1, 1, i_first_band + $I_L3698_619), n_opt_level_ice_prsc, ice_pressure_prsc(1, 1), ice_absorption_prsc(1, 1, i_first_band + $I_L3698_619), ice_scattering_prsc(1, 1, i_first_band + $I_L3698_619), ice_phase_fnc_prsc(1, 1, 1, i_first_band + $I_L3698_619), ss_prop, nd_profile, nd_radiance_profile, nd_layer, nd_layer_clr, id_ct, nd_continuum, nd_aerosol_species, nd_humidities, nd_cloud_parameter, nd_cloud_component, nd_phase_term, nd_max_order, nd_direction, nd_profile_aerosol_prsc, nd_profile_cloud_prsc, nd_opt_level_aerosol_prsc, nd_opt_level_cloud_prsc )
 3905.                         if ( ierr /= 0 ) then
 2485.                            _free( t$1499 )
 2485.                            goto 80
 2485.                         endif
 3908.                         if ( i_angular_integration == 1 ) then
 3908.                            goto 60
 3908.                         else if ( i_angular_integration == 3 ) then
 3908.    60                      continue
 3915.                            if ( l_rescale ) then
 3945.                               if ( l_cloud == 0 ) then
 3967.                                  t$4842 = 0
 3967.                                  t$4843 = 0
 3967.                                  t$4844 = 0
 3967.                                  $t_S43 = 0
 3967.                                  $t_S44 = 0
 3967.                                  t$4849 = 0
 3967.                                  if ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%EX * ss_prop%phase_fnc%dim_1%SM == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%EX * ss_prop%phase_fnc%dim_2%SM == 0 ) then
 3967. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 0, 0)
 3967.                                     t$4841 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 0, 0) )
 3967.                                  else
 3967.                                     t$4842 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
 3967.                                     t$4843 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) )
 3967.                                     t$4844 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) )
 3967.                                     $t_S43 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
 3967.                                     $t_S44 = max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) * ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
 3967.                                     t$4849 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3967.                                     $F_A49 = -1 + ss_prop%phase_fnc%dim_3%EX + 1
 3967.                                     $F_A50 = -1 + ss_prop%phase_fnc%dim_2%EX + 1
 3967.                                     $F_A51 = -1 + ss_prop%phase_fnc%dim_1%EX + 1
 3967.                                     if ( and( and( -$F_A50, -$F_A49 ), -$F_A51 ) < 0 ) then
 3967.                                        $SC_ss_prop_I147 = ss_prop%phase_fnc%dim_4%SM
 3967.                                        $SC_ss_prop_I146 = ss_prop%phase_fnc%dim_4%EX
 3967.                                        $SC_ss_prop_I148 = ss_prop%phase_fnc%dim_4%LB
 3967.                                        $SC_ss_prop_I144 = ss_prop%phase_fnc%dim_3%SM
 3967.                                        $SC_ss_prop_I143 = ss_prop%phase_fnc%dim_3%EX
 3967.                                        $SC_ss_prop_I145 = ss_prop%phase_fnc%dim_3%LB
 3967.                                        $SC_ss_prop_I141 = ss_prop%phase_fnc%dim_2%SM
 3967.                                        $SC_ss_prop_I140 = ss_prop%phase_fnc%dim_2%EX
 3967.                                        $SC_ss_prop_I142 = ss_prop%phase_fnc%dim_2%LB
 3967.                                        $SC_ss_prop_I138 = ss_prop%phase_fnc%dim_1%SM
 3967.                                        $SC_ss_prop_I137 = ss_prop%phase_fnc%dim_1%EX
 3967.                                        $SC_ss_prop_I139 = ss_prop%phase_fnc%dim_1%LB
 3967.                                        $I_L3967_603 = 0
 3967.                                        do
 3967.                                           $I_L3967_573 = 0
 3967.                                           do
 3967.                                              $I_L3967_517 = 0
 3967. !dir$ ivdep
 3967.                                              do
 3967.                                                 t$4848(1 + $I_L3967_517, 1 + $I_L3967_573, 1 + $I_L3967_603) = (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I139 + $I_L3967_517, $SC_ss_prop_I142 + $I_L3967_573, $SC_ss_prop_I145 + $I_L3967_603, 0, 0)
 3967.                                                 $I_L3967_517 = 1 + $I_L3967_517
 3967.                                                 if ( $I_L3967_517 >= $F_A51 ) exit
 3967.                                              enddo
 3967.                                              $I_L3967_573 = 1 + $I_L3967_573
 3967.                                              if ( $I_L3967_573 >= $F_A50 ) exit
 3967.                                           enddo
 3967.                                           $I_L3967_603 = 1 + $I_L3967_603
 3967.                                           if ( $I_L3967_603 >= $F_A49 ) exit
 3967.                                        enddo
 3967.                                     endif
 3967. !dir$ suppress t$4848
 3967.                                     t$4841 = loc( t$4848 )
 3967.                                  endif
 3968.                                  t$4851 = 0
 3968.                                  t$4852 = 0
 3968.                                  t$4856 = 0
 3968.                                  if ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%EX * ss_prop%forward_scatter%dim_1%SM == 0 ) then
 3968. !dir$ suppress (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, 0, 0)
 3968.                                     t$4850 = loc( (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, 0, 0) )
 3968.                                  else
 3968.                                     t$4851 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) )
 3968.                                     t$4852 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) )
 3968.                                     t$4856 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3968.                                     $F_A52 = -1 + ss_prop%forward_scatter%dim_2%EX + 1
 3968.                                     $F_A53 = -1 + ss_prop%forward_scatter%dim_1%EX + 1
 3968.                                     if ( and( -$F_A53, -$F_A52 ) < 0 ) then
 3968.                                        $SC_ss_prop_I156 = ss_prop%forward_scatter%dim_3%SM
 3968.                                        $SC_ss_prop_I155 = ss_prop%forward_scatter%dim_3%EX
 3968.                                        $SC_ss_prop_I157 = ss_prop%forward_scatter%dim_3%LB
 3968.                                        $SC_ss_prop_I153 = ss_prop%forward_scatter%dim_2%SM
 3968.                                        $SC_ss_prop_I152 = ss_prop%forward_scatter%dim_2%EX
 3968.                                        $SC_ss_prop_I154 = ss_prop%forward_scatter%dim_2%LB
 3968.                                        $SC_ss_prop_I150 = ss_prop%forward_scatter%dim_1%SM
 3968.                                        $SC_ss_prop_I149 = ss_prop%forward_scatter%dim_1%EX
 3968.                                        $SC_ss_prop_I151 = ss_prop%forward_scatter%dim_1%LB
 3968.                                        $I_L3968_575 = 0
 3968.                                        do
 3968.                                           $I_L3968_519 = 0
 3968. !dir$ ivdep
 3968.                                           do
 3968.                                              t$4855(1 + $I_L3968_519, 1 + $I_L3968_575) = (ss_prop%forward_scatter%base_addr)($SC_ss_prop_I151 + $I_L3968_519, $SC_ss_prop_I154 + $I_L3968_575, 0, 0)
 3968.                                              $I_L3968_519 = 1 + $I_L3968_519
 3968.                                              if ( $I_L3968_519 >= $F_A53 ) exit
 3968.                                           enddo
 3968.                                           $I_L3968_575 = 1 + $I_L3968_575
 3968.                                           if ( $I_L3968_575 >= $F_A52 ) exit
 3968.                                        enddo
 3968.                                     endif
 3968. !dir$ suppress t$4855
 3968.                                     t$4850 = loc( t$4855 )
 3968.                                  endif
 3969.                                  t$4858 = 0
 3969.                                  t$4859 = 0
 3969.                                  t$4863 = 0
 3969.                                  if ( ss_prop%forward_solar%header%a_contig == 1 .or. -ss_prop%forward_solar%header%el_len + ss_prop%forward_solar%dim_1%SM * ss_prop%forward_solar%header%dv_smunit == 0 .and. -ss_prop%forward_solar%dim_2%SM + ss_prop%forward_solar%dim_1%EX * ss_prop%forward_solar%dim_1%SM == 0 ) then
 3969. !dir$ suppress (ss_prop%forward_solar%base_addr)(ss_prop%forward_solar%dim_1%LB, ss_prop%forward_solar%dim_2%LB, 0, 0)
 3969.                                     t$4857 = loc( (ss_prop%forward_solar%base_addr)(ss_prop%forward_solar%dim_1%LB, ss_prop%forward_solar%dim_2%LB, 0, 0) )
 3969.                                  else
 3969.                                     t$4858 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) )
 3969.                                     t$4859 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_2%EX + 1 ) ) )
 3969.                                     t$4863 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_solar%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3969.                                     $F_A54 = -1 + ss_prop%forward_solar%dim_2%EX + 1
 3969.                                     $F_A55 = -1 + ss_prop%forward_solar%dim_1%EX + 1
 3969.                                     if ( and( -$F_A55, -$F_A54 ) < 0 ) then
 3969.                                        $SC_ss_prop_I165 = ss_prop%forward_solar%dim_3%SM
 3969.                                        $SC_ss_prop_I164 = ss_prop%forward_solar%dim_3%EX
 3969.                                        $SC_ss_prop_I166 = ss_prop%forward_solar%dim_3%LB
 3969.                                        $SC_ss_prop_I162 = ss_prop%forward_solar%dim_2%SM
 3969.                                        $SC_ss_prop_I161 = ss_prop%forward_solar%dim_2%EX
 3969.                                        $SC_ss_prop_I163 = ss_prop%forward_solar%dim_2%LB
 3969.                                        $SC_ss_prop_I159 = ss_prop%forward_solar%dim_1%SM
 3969.                                        $SC_ss_prop_I158 = ss_prop%forward_solar%dim_1%EX
 3969.                                        $SC_ss_prop_I160 = ss_prop%forward_solar%dim_1%LB
 3969.                                        $I_L3969_577 = 0
 3969.                                        do
 3969.                                           $I_L3969_521 = 0
 3969. !dir$ ivdep
 3969.                                           do
 3969.                                              t$4862(1 + $I_L3969_521, 1 + $I_L3969_577) = (ss_prop%forward_solar%base_addr)($SC_ss_prop_I160 + $I_L3969_521, $SC_ss_prop_I163 + $I_L3969_577, 0, 0)
 3969.                                              $I_L3969_521 = 1 + $I_L3969_521
 3969.                                              if ( $I_L3969_521 >= $F_A55 ) exit
 3969.                                           enddo
 3969.                                           $I_L3969_577 = 1 + $I_L3969_577
 3969.                                           if ( $I_L3969_577 >= $F_A54 ) exit
 3969.                                        enddo
 3969.                                     endif
 3969. !dir$ suppress t$4862
 3969.                                     t$4857 = loc( t$4862 )
 3969.                                  endif
 3971.                                  t$4865 = 0
 3971.                                  t$4866 = 0
 3971.                                  t$4867 = 0
 3971.                                  $t_S41 = 0
 3971.                                  $t_S42 = 0
 3971.                                  t$4872 = 0
 3971.                                  if ( ss_prop%phase_fnc_solar%header%a_contig == 1 .or. -ss_prop%phase_fnc_solar%header%el_len + ss_prop%phase_fnc_solar%dim_1%SM * ss_prop%phase_fnc_solar%header%dv_smunit == 0 .and. -ss_prop%phase_fnc_solar%dim_2%SM + ss_prop%phase_fnc_solar%dim_1%EX * ss_prop%phase_fnc_solar%dim_1%SM == 0 .and. -ss_prop%phase_fnc_solar%dim_3%SM + ss_prop%phase_fnc_solar%dim_2%EX * ss_prop%phase_fnc_solar%dim_2%SM == 0 ) then
 3971. !dir$ suppress (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, 0, 0)
 3971.                                     t$4864 = loc( (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, 0, 0) )
 3971.                                  else
 3971.                                     t$4865 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
 3971.                                     t$4866 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) )
 3971.                                     t$4867 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1 ) ) )
 3971.                                     $t_S41 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
 3971.                                     $t_S42 = max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) * ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
 3971.                                     t$4872 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3971.                                     $F_A56 = -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1
 3971.                                     $F_A57 = -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1
 3971.                                     $F_A58 = -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1
 3971.                                     if ( and( and( -$F_A57, -$F_A56 ), -$F_A58 ) < 0 ) then
 3971.                                        $SC_ss_prop_I174 = ss_prop%phase_fnc_solar%dim_3%SM
 3971.                                        $SC_ss_prop_I173 = ss_prop%phase_fnc_solar%dim_3%EX
 3971.                                        $SC_ss_prop_I175 = ss_prop%phase_fnc_solar%dim_3%LB
 3971.                                        $SC_ss_prop_I171 = ss_prop%phase_fnc_solar%dim_2%SM
 3971.                                        $SC_ss_prop_I170 = ss_prop%phase_fnc_solar%dim_2%EX
 3971.                                        $SC_ss_prop_I172 = ss_prop%phase_fnc_solar%dim_2%LB
 3971.                                        $SC_ss_prop_I168 = ss_prop%phase_fnc_solar%dim_1%SM
 3971.                                        $SC_ss_prop_I167 = ss_prop%phase_fnc_solar%dim_1%EX
 3971.                                        $SC_ss_prop_I169 = ss_prop%phase_fnc_solar%dim_1%LB
 3971.                                        $I_L3971_605 = 0
 3971.                                        do
 3971.                                           $SC_ss_prop_I176 = ss_prop%phase_fnc_solar%dim_4%EX
 3971.                                           $I_L3971_579 = 0
 3971.                                           do
 3971.                                              $SC_ss_prop_I177 = ss_prop%phase_fnc_solar%dim_4%SM
 3971.                                              $I_L3971_523 = 0
 3971. !dir$ ivdep
 3971.                                              do
 3971.                                                 t$4871(1 + $I_L3971_523, 1 + $I_L3971_579, 1 + $I_L3971_605) = (ss_prop%phase_fnc_solar%base_addr)($SC_ss_prop_I169 + $I_L3971_523, $SC_ss_prop_I172 + $I_L3971_579, $SC_ss_prop_I175 + $I_L3971_605, 0, 0)
 3971.                                                 $I_L3971_523 = 1 + $I_L3971_523
 3971.                                                 if ( $I_L3971_523 >= $F_A58 ) exit
 3971.                                              enddo
 3971.                                              $I_L3971_579 = 1 + $I_L3971_579
 3971.                                              if ( $I_L3971_579 >= $F_A57 ) exit
 3971.                                           enddo
 3971.                                           $I_L3971_605 = 1 + $I_L3971_605
 3971.                                           if ( $I_L3971_605 >= $F_A56 ) exit
 3971.                                        enddo
 3971.                                     endif
 3971. !dir$ suppress t$4871
 3971.                                     t$4864 = loc( t$4871 )
 3971.                                  endif
 3964.                                  ipa$868 = 1
 3964.                                  call rescale_phase_fnc( n_profile, ipa$868, n_layer, n_direction, cos_sol_view(1, 1), n_order_phase, t$4841, t$4850, t$4857, l_rescale_solar_phf, n_order_phase_solar, t$4864, nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_direction, nd_max_order )
 3971.                                  if ( ( ss_prop%phase_fnc_solar%header%a_contig == 1 .or. -ss_prop%phase_fnc_solar%header%el_len + ss_prop%phase_fnc_solar%dim_1%SM * ss_prop%phase_fnc_solar%header%dv_smunit == 0 .and. -ss_prop%phase_fnc_solar%dim_2%SM + ss_prop%phase_fnc_solar%dim_1%EX * ss_prop%phase_fnc_solar%dim_1%SM == 0 .and. -ss_prop%phase_fnc_solar%dim_3%SM + ss_prop%phase_fnc_solar%dim_2%EX * ss_prop%phase_fnc_solar%dim_2%SM == 0 ) == 0 ) then
 3964.                                     $F_A59 = t$4867
 3964.                                     $F_A60 = t$4866
 3964.                                     $F_A61 = t$4865
 3964.                                     if ( and( and( -$F_A60, -$F_A59 ), -$F_A61 ) < 0 ) then
 3964.                                        $SC_ss_prop_I168 = ss_prop%phase_fnc_solar%dim_1%SM
 3964.                                        $I_L3964_607 = 0
 3964.                                        do
 3964.                                           $SC_ss_prop_I169 = ss_prop%phase_fnc_solar%dim_1%LB
 3964.                                           $I_L3964_581 = 0
 3964.                                           do
 3964.                                              $SC_ss_prop_I171 = ss_prop%phase_fnc_solar%dim_2%SM
 3964.                                              $I_L3964_525 = 0
 3964. !dir$ ivdep
 3964.                                              do
 3964.                                                 (ss_prop%phase_fnc_solar%base_addr)($SC_ss_prop_I169 + $I_L3964_525, ss_prop%phase_fnc_solar%dim_2%LB + $I_L3964_581, ss_prop%phase_fnc_solar%dim_3%LB + $I_L3964_607, 0, 0) = t$4871(1 + $I_L3964_525, 1 + $I_L3964_581, 1 + $I_L3964_607)
 3964.                                                 $I_L3964_525 = 1 + $I_L3964_525
 3964.                                                 if ( $I_L3964_525 >= $F_A61 ) exit
 3964.                                              enddo
 3964.                                              $I_L3964_581 = 1 + $I_L3964_581
 3964.                                              if ( $I_L3964_581 >= $F_A60 ) exit
 3964.                                           enddo
 3964.                                           $I_L3964_607 = 1 + $I_L3964_607
 3964.                                           if ( $I_L3964_607 >= $F_A59 ) exit
 3964.                                        enddo
 3964.                                     endif
 3971.                                     _free( t$4872 )
 3971.                                  endif
 3969.                                  if ( ( ss_prop%forward_solar%header%a_contig == 1 .or. -ss_prop%forward_solar%header%el_len + ss_prop%forward_solar%dim_1%SM * ss_prop%forward_solar%header%dv_smunit == 0 .and. -ss_prop%forward_solar%dim_2%SM + ss_prop%forward_solar%dim_1%EX * ss_prop%forward_solar%dim_1%SM == 0 ) == 0 ) then
 3969.                                     _free( t$4863 )
 3969.                                  endif
 3968.                                  if ( ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%EX * ss_prop%forward_scatter%dim_1%SM == 0 ) == 0 ) then
 3968.                                     _free( t$4856 )
 3968.                                  endif
 3967.                                  if ( ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%EX * ss_prop%phase_fnc%dim_1%SM == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%EX * ss_prop%phase_fnc%dim_2%SM == 0 ) == 0 ) then
 3964.                                     $F_A62 = t$4844
 3964.                                     $F_A63 = t$4843
 3964.                                     $F_A64 = t$4842
 3964.                                     if ( and( and( -$F_A63, -$F_A62 ), -$F_A64 ) < 0 ) then
 3964.                                        $SC_ss_prop_I138 = ss_prop%phase_fnc%dim_1%SM
 3964.                                        $I_L3964_609 = 0
 3964.                                        do
 3964.                                           $SC_ss_prop_I139 = ss_prop%phase_fnc%dim_1%LB
 3964.                                           $I_L3964_583 = 0
 3964.                                           do
 3964.                                              $SC_ss_prop_I141 = ss_prop%phase_fnc%dim_2%SM
 3964.                                              $I_L3964_527 = 0
 3964. !dir$ ivdep
 3964.                                              do
 3964.                                                 (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I139 + $I_L3964_527, ss_prop%phase_fnc%dim_2%LB + $I_L3964_583, ss_prop%phase_fnc%dim_3%LB + $I_L3964_609, 0, 0) = t$4848(1 + $I_L3964_527, 1 + $I_L3964_583, 1 + $I_L3964_609)
 3964.                                                 $I_L3964_527 = 1 + $I_L3964_527
 3964.                                                 if ( $I_L3964_527 >= $F_A64 ) exit
 3964.                                              enddo
 3964.                                              $I_L3964_583 = 1 + $I_L3964_583
 3964.                                              if ( $I_L3964_583 >= $F_A63 ) exit
 3964.                                           enddo
 3964.                                           $I_L3964_609 = 1 + $I_L3964_609
 3964.                                           if ( $I_L3964_609 >= $F_A62 ) exit
 3964.                                        enddo
 3964.                                     endif
 3967.                                     _free( t$4849 )
 3967.                                  endif
 3950.                               else if ( n_cloud_type >= 0 ) then
 3950.                                  $I_L3950_611 = 0
 3950.                                  do
 3954.                                     t$4807 = 0
 3954.                                     t$4808 = 0
 3954.                                     t$4809 = 0
 3954.                                     $t_S39 = 0
 3954.                                     $t_S40 = 0
 3954.                                     t$4814 = 0
 3954.                                     if ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%EX * ss_prop%phase_fnc%dim_1%SM == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%EX * ss_prop%phase_fnc%dim_2%SM == 0 ) then
 3954. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, t$4805, 0)
 3954.                                        t$4806 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, $I_L3950_611, 0) )
 3954.                                     else
 3954.                                        t$4807 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
 3954.                                        t$4808 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) )
 3954.                                        t$4809 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) )
 3954.                                        $t_S39 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
 3954.                                        $t_S40 = max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) * ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
 3954.                                        t$4814 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3954.                                        $F_A33 = -1 + ss_prop%phase_fnc%dim_3%EX + 1
 3954.                                        $F_A34 = -1 + ss_prop%phase_fnc%dim_2%EX + 1
 3954.                                        $F_A35 = -1 + ss_prop%phase_fnc%dim_1%EX + 1
 3954.                                        if ( and( and( -$F_A34, -$F_A33 ), -$F_A35 ) < 0 ) then
 3954.                                           $SC_ss_prop_I147 = ss_prop%phase_fnc%dim_4%SM
 3954.                                           $SC_ss_prop_I146 = ss_prop%phase_fnc%dim_4%EX
 3954.                                           $SC_ss_prop_I148 = ss_prop%phase_fnc%dim_4%LB
 3954.                                           $SC_ss_prop_I144 = ss_prop%phase_fnc%dim_3%SM
 3954.                                           $SC_ss_prop_I143 = ss_prop%phase_fnc%dim_3%EX
 3954.                                           $SC_ss_prop_I145 = ss_prop%phase_fnc%dim_3%LB
 3954.                                           $SC_ss_prop_I141 = ss_prop%phase_fnc%dim_2%SM
 3954.                                           $SC_ss_prop_I140 = ss_prop%phase_fnc%dim_2%EX
 3954.                                           $SC_ss_prop_I142 = ss_prop%phase_fnc%dim_2%LB
 3954.                                           $SC_ss_prop_I138 = ss_prop%phase_fnc%dim_1%SM
 3954.                                           $SC_ss_prop_I137 = ss_prop%phase_fnc%dim_1%EX
 3954.                                           $SC_ss_prop_I139 = ss_prop%phase_fnc%dim_1%LB
 3954.                                           $I_L3954_595 = 0
 3954.                                           do
 3954.                                              $I_L3954_561 = 0
 3954.                                              do
 3954.                                                 $I_L3954_505 = 0
 3954. !dir$ ivdep
 3954.                                                 do
 3954.                                                    t$4813(1 + $I_L3954_505, 1 + $I_L3954_561, 1 + $I_L3954_595) = (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I139 + $I_L3954_505, $SC_ss_prop_I142 + $I_L3954_561, $SC_ss_prop_I145 + $I_L3954_595, $I_L3950_611, 0)
 3954.                                                    $I_L3954_505 = 1 + $I_L3954_505
 3954.                                                    if ( $I_L3954_505 >= $F_A35 ) exit
 3954.                                                 enddo
 3954.                                                 $I_L3954_561 = 1 + $I_L3954_561
 3954.                                                 if ( $I_L3954_561 >= $F_A34 ) exit
 3954.                                              enddo
 3954.                                              $I_L3954_595 = 1 + $I_L3954_595
 3954.                                              if ( $I_L3954_595 >= $F_A33 ) exit
 3954.                                           enddo
 3954.                                        endif
 3954. !dir$ suppress t$4813
 3954.                                        t$4806 = loc( t$4813 )
 3954.                                     endif
 3955.                                     t$4817 = 0
 3955.                                     t$4818 = 0
 3955.                                     t$4822 = 0
 3955.                                     if ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%EX * ss_prop%forward_scatter%dim_1%SM == 0 ) then
 3955. !dir$ suppress (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, t$4815, 0)
 3955.                                        t$4816 = loc( (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, $I_L3950_611, 0) )
 3955.                                     else
 3955.                                        t$4817 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) )
 3955.                                        t$4818 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) )
 3955.                                        t$4822 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3955.                                        $F_A36 = -1 + ss_prop%forward_scatter%dim_2%EX + 1
 3955.                                        $F_A37 = -1 + ss_prop%forward_scatter%dim_1%EX + 1
 3955.                                        if ( and( -$F_A37, -$F_A36 ) < 0 ) then
 3955.                                           $SC_ss_prop_I156 = ss_prop%forward_scatter%dim_3%SM
 3955.                                           $SC_ss_prop_I155 = ss_prop%forward_scatter%dim_3%EX
 3955.                                           $SC_ss_prop_I157 = ss_prop%forward_scatter%dim_3%LB
 3955.                                           $SC_ss_prop_I153 = ss_prop%forward_scatter%dim_2%SM
 3955.                                           $SC_ss_prop_I152 = ss_prop%forward_scatter%dim_2%EX
 3955.                                           $SC_ss_prop_I154 = ss_prop%forward_scatter%dim_2%LB
 3955.                                           $SC_ss_prop_I150 = ss_prop%forward_scatter%dim_1%SM
 3955.                                           $SC_ss_prop_I149 = ss_prop%forward_scatter%dim_1%EX
 3955.                                           $SC_ss_prop_I151 = ss_prop%forward_scatter%dim_1%LB
 3955.                                           $I_L3955_563 = 0
 3955.                                           do
 3955.                                              $I_L3955_507 = 0
 3955. !dir$ ivdep
 3955.                                              do
 3955.                                                 t$4821(1 + $I_L3955_507, 1 + $I_L3955_563) = (ss_prop%forward_scatter%base_addr)($SC_ss_prop_I151 + $I_L3955_507, $SC_ss_prop_I154 + $I_L3955_563, $I_L3950_611, 0)
 3955.                                                 $I_L3955_507 = 1 + $I_L3955_507
 3955.                                                 if ( $I_L3955_507 >= $F_A37 ) exit
 3955.                                              enddo
 3955.                                              $I_L3955_563 = 1 + $I_L3955_563
 3955.                                              if ( $I_L3955_563 >= $F_A36 ) exit
 3955.                                           enddo
 3955.                                        endif
 3955. !dir$ suppress t$4821
 3955.                                        t$4816 = loc( t$4821 )
 3955.                                     endif
 3956.                                     t$4825 = 0
 3956.                                     t$4826 = 0
 3956.                                     t$4830 = 0
 3956.                                     if ( ss_prop%forward_solar%header%a_contig == 1 .or. -ss_prop%forward_solar%header%el_len + ss_prop%forward_solar%dim_1%SM * ss_prop%forward_solar%header%dv_smunit == 0 .and. -ss_prop%forward_solar%dim_2%SM + ss_prop%forward_solar%dim_1%EX * ss_prop%forward_solar%dim_1%SM == 0 ) then
 3956. !dir$ suppress (ss_prop%forward_solar%base_addr)(ss_prop%forward_solar%dim_1%LB, ss_prop%forward_solar%dim_2%LB, t$4823, 0)
 3956.                                        t$4824 = loc( (ss_prop%forward_solar%base_addr)(ss_prop%forward_solar%dim_1%LB, ss_prop%forward_solar%dim_2%LB, $I_L3950_611, 0) )
 3956.                                     else
 3956.                                        t$4825 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) )
 3956.                                        t$4826 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_2%EX + 1 ) ) )
 3956.                                        t$4830 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_solar%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3956.                                        $F_A38 = -1 + ss_prop%forward_solar%dim_2%EX + 1
 3956.                                        $F_A39 = -1 + ss_prop%forward_solar%dim_1%EX + 1
 3956.                                        if ( and( -$F_A39, -$F_A38 ) < 0 ) then
 3956.                                           $SC_ss_prop_I165 = ss_prop%forward_solar%dim_3%SM
 3956.                                           $SC_ss_prop_I164 = ss_prop%forward_solar%dim_3%EX
 3956.                                           $SC_ss_prop_I166 = ss_prop%forward_solar%dim_3%LB
 3956.                                           $SC_ss_prop_I162 = ss_prop%forward_solar%dim_2%SM
 3956.                                           $SC_ss_prop_I161 = ss_prop%forward_solar%dim_2%EX
 3956.                                           $SC_ss_prop_I163 = ss_prop%forward_solar%dim_2%LB
 3956.                                           $SC_ss_prop_I159 = ss_prop%forward_solar%dim_1%SM
 3956.                                           $SC_ss_prop_I158 = ss_prop%forward_solar%dim_1%EX
 3956.                                           $SC_ss_prop_I160 = ss_prop%forward_solar%dim_1%LB
 3956.                                           $I_L3956_565 = 0
 3956.                                           do
 3956.                                              $I_L3956_509 = 0
 3956. !dir$ ivdep
 3956.                                              do
 3956.                                                 t$4829(1 + $I_L3956_509, 1 + $I_L3956_565) = (ss_prop%forward_solar%base_addr)($SC_ss_prop_I160 + $I_L3956_509, $SC_ss_prop_I163 + $I_L3956_565, $I_L3950_611, 0)
 3956.                                                 $I_L3956_509 = 1 + $I_L3956_509
 3956.                                                 if ( $I_L3956_509 >= $F_A39 ) exit
 3956.                                              enddo
 3956.                                              $I_L3956_565 = 1 + $I_L3956_565
 3956.                                              if ( $I_L3956_565 >= $F_A38 ) exit
 3956.                                           enddo
 3956.                                        endif
 3956. !dir$ suppress t$4829
 3956.                                        t$4824 = loc( t$4829 )
 3956.                                     endif
 3958.                                     t$4833 = 0
 3958.                                     t$4834 = 0
 3958.                                     t$4835 = 0
 3958.                                     $t_S37 = 0
 3958.                                     $t_S38 = 0
 3958.                                     t$4840 = 0
 3958.                                     if ( ss_prop%phase_fnc_solar%header%a_contig == 1 .or. -ss_prop%phase_fnc_solar%header%el_len + ss_prop%phase_fnc_solar%dim_1%SM * ss_prop%phase_fnc_solar%header%dv_smunit == 0 .and. -ss_prop%phase_fnc_solar%dim_2%SM + ss_prop%phase_fnc_solar%dim_1%EX * ss_prop%phase_fnc_solar%dim_1%SM == 0 .and. -ss_prop%phase_fnc_solar%dim_3%SM + ss_prop%phase_fnc_solar%dim_2%EX * ss_prop%phase_fnc_solar%dim_2%SM == 0 ) then
 3958. !dir$ suppress (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, t$4831, 0)
 3958.                                        t$4832 = loc( (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, $I_L3950_611, 0) )
 3958.                                     else
 3958.                                        t$4833 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
 3958.                                        t$4834 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) )
 3958.                                        t$4835 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1 ) ) )
 3958.                                        $t_S37 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
 3958.                                        $t_S38 = max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) * ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
 3958.                                        t$4840 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
 3958.                                        $F_A40 = -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1
 3958.                                        $F_A41 = -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1
 3958.                                        $F_A42 = -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1
 3958.                                        if ( and( and( -$F_A41, -$F_A40 ), -$F_A42 ) < 0 ) then
 3958.                                           $SC_ss_prop_I177 = ss_prop%phase_fnc_solar%dim_4%SM
 3958.                                           $SC_ss_prop_I176 = ss_prop%phase_fnc_solar%dim_4%EX
 3958.                                           $SC_ss_prop_I178 = ss_prop%phase_fnc_solar%dim_4%LB
 3958.                                           $SC_ss_prop_I174 = ss_prop%phase_fnc_solar%dim_3%SM
 3958.                                           $SC_ss_prop_I173 = ss_prop%phase_fnc_solar%dim_3%EX
 3958.                                           $SC_ss_prop_I175 = ss_prop%phase_fnc_solar%dim_3%LB
 3958.                                           $SC_ss_prop_I171 = ss_prop%phase_fnc_solar%dim_2%SM
 3958.                                           $SC_ss_prop_I170 = ss_prop%phase_fnc_solar%dim_2%EX
 3958.                                           $SC_ss_prop_I172 = ss_prop%phase_fnc_solar%dim_2%LB
 3958.                                           $SC_ss_prop_I168 = ss_prop%phase_fnc_solar%dim_1%SM
 3958.                                           $SC_ss_prop_I167 = ss_prop%phase_fnc_solar%dim_1%EX
 3958.                                           $SC_ss_prop_I169 = ss_prop%phase_fnc_solar%dim_1%LB
 3958.                                           $I_L3958_597 = 0
 3958.                                           do
 3958.                                              $I_L3958_567 = 0
 3958.                                              do
 3958.                                                 $I_L3958_511 = 0
 3958. !dir$ ivdep
 3958.                                                 do
 3958.                                                    t$4839(1 + $I_L3958_511, 1 + $I_L3958_567, 1 + $I_L3958_597) = (ss_prop%phase_fnc_solar%base_addr)($SC_ss_prop_I169 + $I_L3958_511, $SC_ss_prop_I172 + $I_L3958_567, $SC_ss_prop_I175 + $I_L3958_597, $I_L3950_611, 0)
 3958.                                                    $I_L3958_511 = 1 + $I_L3958_511
 3958.                                                    if ( $I_L3958_511 >= $F_A42 ) exit
 3958.                                                 enddo
 3958.                                                 $I_L3958_567 = 1 + $I_L3958_567
 3958.                                                 if ( $I_L3958_567 >= $F_A41 ) exit
 3958.                                              enddo
 3958.                                              $I_L3958_597 = 1 + $I_L3958_597
 3958.                                              if ( $I_L3958_597 >= $F_A40 ) exit
 3958.                                           enddo
 3958.                                        endif
 3958. !dir$ suppress t$4839
 3958.                                        t$4832 = loc( t$4839 )
 3958.                                     endif
 3951.                                     ipa$863 = 1
 3951.                                     call rescale_phase_fnc( n_profile, ipa$863, n_layer, n_direction, cos_sol_view(1, 1), n_order_phase, t$4806, t$4816, t$4824, l_rescale_solar_phf, n_order_phase_solar, t$4832, nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_direction, nd_max_order )
 3958.                                     if ( ( ss_prop%phase_fnc_solar%header%a_contig == 1 .or. -ss_prop%phase_fnc_solar%header%el_len + ss_prop%phase_fnc_solar%dim_1%SM * ss_prop%phase_fnc_solar%header%dv_smunit == 0 .and. -ss_prop%phase_fnc_solar%dim_2%SM + ss_prop%phase_fnc_solar%dim_1%EX * ss_prop%phase_fnc_solar%dim_1%SM == 0 .and. -ss_prop%phase_fnc_solar%dim_3%SM + ss_prop%phase_fnc_solar%dim_2%EX * ss_prop%phase_fnc_solar%dim_2%SM == 0 ) == 0 ) then
 3951.                                        $F_A43 = t$4835
 3951.                                        $F_A44 = t$4834
 3951.                                        $F_A45 = t$4833
 3951.                                        if ( and( and( -$F_A44, -$F_A43 ), -$F_A45 ) < 0 ) then
 3951.                                           $SC_ss_prop_I177 = ss_prop%phase_fnc_solar%dim_4%SM
 3951.                                           $SC_ss_prop_I176 = ss_prop%phase_fnc_solar%dim_4%EX
 3951.                                           $SC_ss_prop_I178 = ss_prop%phase_fnc_solar%dim_4%LB
 3951.                                           $SC_ss_prop_I174 = ss_prop%phase_fnc_solar%dim_3%SM
 3951.                                           $SC_ss_prop_I175 = ss_prop%phase_fnc_solar%dim_3%LB
 3951.                                           $SC_ss_prop_I171 = ss_prop%phase_fnc_solar%dim_2%SM
 3951.                                           $SC_ss_prop_I172 = ss_prop%phase_fnc_solar%dim_2%LB
 3951.                                           $SC_ss_prop_I168 = ss_prop%phase_fnc_solar%dim_1%SM
 3951.                                           $SC_ss_prop_I169 = ss_prop%phase_fnc_solar%dim_1%LB
 3951.                                           $I_L3951_599 = 0
 3951.                                           do
 3951.                                              $I_L3951_569 = 0
 3951.                                              do
 3951.                                                 $I_L3951_513 = 0
 3951. !dir$ ivdep
 3951.                                                 do
 3951.                                                    (ss_prop%phase_fnc_solar%base_addr)($SC_ss_prop_I169 + $I_L3951_513, $SC_ss_prop_I172 + $I_L3951_569, $SC_ss_prop_I175 + $I_L3951_599, $I_L3950_611, 0) = t$4839(1 + $I_L3951_513, 1 + $I_L3951_569, 1 + $I_L3951_599)
 3951.                                                    $I_L3951_513 = 1 + $I_L3951_513
 3951.                                                    if ( $I_L3951_513 >= $F_A45 ) exit
 3951.                                                 enddo
 3951.                                                 $I_L3951_569 = 1 + $I_L3951_569
 3951.                                                 if ( $I_L3951_569 >= $F_A44 ) exit
 3951.                                              enddo
 3951.                                              $I_L3951_599 = 1 + $I_L3951_599
 3951.                                              if ( $I_L3951_599 >= $F_A43 ) exit
 3951.                                           enddo
 3951.                                        endif
 3958.                                        _free( t$4840 )
 3958.                                     endif
 3956.                                     if ( ( ss_prop%forward_solar%header%a_contig == 1 .or. -ss_prop%forward_solar%header%el_len + ss_prop%forward_solar%dim_1%SM * ss_prop%forward_solar%header%dv_smunit == 0 .and. -ss_prop%forward_solar%dim_2%SM + ss_prop%forward_solar%dim_1%EX * ss_prop%forward_solar%dim_1%SM == 0 ) == 0 ) then
 3956.                                        _free( t$4830 )
 3956.                                     endif
 3955.                                     if ( ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%EX * ss_prop%forward_scatter%dim_1%SM == 0 ) == 0 ) then
 3955.                                        _free( t$4822 )
 3955.                                     endif
 3954.                                     if ( ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%EX * ss_prop%phase_fnc%dim_1%SM == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%EX * ss_prop%phase_fnc%dim_2%SM == 0 ) == 0 ) then
 3951.                                        $F_A46 = t$4809
 3951.                                        $F_A47 = t$4808
 3951.                                        $F_A48 = t$4807
 3951.                                        if ( and( and( -$F_A47, -$F_A46 ), -$F_A48 ) < 0 ) then
 3951.                                           $SC_ss_prop_I147 = ss_prop%phase_fnc%dim_4%SM
 3951.                                           $SC_ss_prop_I146 = ss_prop%phase_fnc%dim_4%EX
 3951.                                           $SC_ss_prop_I148 = ss_prop%phase_fnc%dim_4%LB
 3951.                                           $SC_ss_prop_I144 = ss_prop%phase_fnc%dim_3%SM
 3951.                                           $SC_ss_prop_I145 = ss_prop%phase_fnc%dim_3%LB
 3951.                                           $SC_ss_prop_I141 = ss_prop%phase_fnc%dim_2%SM
 3951.                                           $SC_ss_prop_I142 = ss_prop%phase_fnc%dim_2%LB
 3951.                                           $SC_ss_prop_I138 = ss_prop%phase_fnc%dim_1%SM
 3951.                                           $SC_ss_prop_I139 = ss_prop%phase_fnc%dim_1%LB
 3951.                                           $I_L3951_601 = 0
 3951.                                           do
 3951.                                              $I_L3951_571 = 0
 3951.                                              do
 3951.                                                 $I_L3951_515 = 0
 3951. !dir$ ivdep
 3951.                                                 do
 3951.                                                    (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I139 + $I_L3951_515, $SC_ss_prop_I142 + $I_L3951_571, $SC_ss_prop_I145 + $I_L3951_601, $I_L3950_611, 0) = t$4813(1 + $I_L3951_515, 1 + $I_L3951_571, 1 + $I_L3951_601)
 3951.                                                    $I_L3951_515 = 1 + $I_L3951_515
 3951.                                                    if ( $I_L3951_515 >= $F_A48 ) exit
 3951.                                                 enddo
 3951.                                                 $I_L3951_571 = 1 + $I_L3951_571
 3951.                                                 if ( $I_L3951_571 >= $F_A47 ) exit
 3951.                                              enddo
 3951.                                              $I_L3951_601 = 1 + $I_L3951_601
 3951.                                              if ( $I_L3951_601 >= $F_A46 ) exit
 3951.                                           enddo
 3951.                                        endif
 3954.                                        _free( t$4814 )
 3954.                                     endif
 3962.                                     $I_L3950_611 = 1 + $I_L3950_611
 3954.                                     if ( $I_L3950_611 >= 1 + n_cloud_type ) exit
 3954.                                  enddo
 3954.                               endif
 3954.                            endif
 3954.                         endif
 3987.                         if ( isolir == 1 ) then
 3989.                            if ( n_profile > 0 ) then
 3990.                               $SC_solar_flux_band_I1 = solar_flux_band(i_first_band + $I_L3698_619)
 3989.                               $I_L3989_492 = 0
 3989. !dir$ ivdep
 3989.                               do
 3990.                                  solar_irrad_band(1 + $I_L3989_492) = solar_irrad(1 + $I_L3989_492) * $SC_solar_flux_band_I1
 3992.                                  $I_L3989_492 = 1 + $I_L3989_492
 3989.                                  if ( $I_L3989_492 >= n_profile ) exit
 3989.                               enddo
 3989.                            endif
 3994.                         else if ( isolir == 2 ) then
 3999.                            call diff_planck_source( n_profile, n_layer, n_deg_fit, thermal_coefficient(0, i_first_band + $I_L3698_619), t_ref_planck, t_level(1, 0), t_ground(1), planck_flux_band(1, 0), diff_planck_band(1, 1), planck_flux_ground(1), l_ir_source_quad, t(1, 1), diff_planck_band_2(1, 1), i_angular_integration, n_viewing_level, i_rad_layer(1), frac_rad_layer(1), planck_radiance_band(1, 1), l_tile, n_point_tile, n_tile, list_tile(1), frac_tile(1, 1), t_tile(1, 1), planck_flux_tile(1, 1), nd_profile, nd_layer, nd_thermal_coeff, nd_radiance_profile, nd_viewing_level, nd_point_tile, nd_tile )
 3999.                         endif
 4025.                         if ( $l_gas_band_S46 == 0 ) then
 4030.                            call solve_band_without_gas( ierr, n_profile, n_layer, d_mass(1, 1), i_angular_integration, i_2stream, n_order_phase, l_rescale, n_order_gauss, ms_min, ms_max, i_truncation, ls_local_trunc(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), i_scatter_method(i_first_band + $I_L3698_619), i_solver, isolir, zen_0(1), zen_00(1, 1), solar_irrad_band(1), planck_flux_band(1, 0), planck_flux_band(1, n_layer), diff_planck_band(1, 1), l_ir_source_quad, diff_planck_band_2(1, 1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1, i_first_band + $I_L3698_619), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), planck_flux_ground(1), l_tile, n_point_tile, n_tile, list_tile(1), rho_alb_tile(1, 1, 1, i_first_band + $I_L3698_619), planck_flux_tile(1, 1), ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, k_clr, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, 1), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), weight_band(i_first_band + $I_L3698_619), l_initial, flux_direct(1, 0, map_channel(i_first_band + $I_L3698_619)), flux_down(1, 0, map_channel(i_first_band + $I_L3698_619)), flux_up(1, 0, map_channel(i_first_band + $I_L3698_619)), i_direct(1, 0), radiance(1, 1, 1, map_channel(i_first_band + $I_L3698_619)), photolysis(1, 1, map_channel(i_first_band + $I_L3698_619)), l_clear, i_solver_clear, flux_direct_clear(1, 0, map_channel(i_first_band + $I_L3698_619)), flux_down_clear(1, 0, map_channel(i_first_band + $I_L3698_619)), flux_up_clear(1, 0, map_channel(i_first_band + $I_L3698_619)), flux_up_tile(1, 1, map_channel(i_first_band + $I_L3698_619)), flux_up_blue_tile(1, 1, map_channel(i_first_band + $I_L3698_619)), l_blue_flux_surf, weight_blue(i_first_band + $I_L3698_619), flux_direct_blue_surf(1), flux_down_blue_surf(1), flux_up_blue_surf(1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff, nd_point_tile, nd_tile )
 4106.                            if ( ierr /= 0 ) then
 2485.                               _free( t$1499 )
 2485.                               goto 80
 2485.                            endif
 4398.                            $_allo_P16(0) = 0x1000000000001L
 4398.                            $_allo_P16(1) = loc( ss_prop%k_grey_tot_clr )
 4398.                            call __deallocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 4398.                            ss_prop%k_grey_tot_clr%header%assoc = 0
 4399.                            $_allo_P17(0) = 0x1000000000001L
 4399.                            $_allo_P17(1) = loc( ss_prop%k_ext_scat_clr )
 4399.                            call __deallocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
 4399.                            ss_prop%k_ext_scat_clr%header%assoc = 0
 4400.                            $_allo_P18(0) = 0x1000000000001L
 4400.                            $_allo_P18(1) = loc( ss_prop%tau_clr )
 4400.                            call __deallocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
 4400.                            ss_prop%tau_clr%header%assoc = 0
 4401.                            $_allo_P19(0) = 0x1000000000001L
 4401.                            $_allo_P19(1) = loc( ss_prop%omega_clr )
 4401.                            call __deallocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
 4401.                            ss_prop%omega_clr%header%assoc = 0
 4402.                            $_allo_P20(0) = 0x1000000000001L
 4402.                            $_allo_P20(1) = loc( ss_prop%phase_fnc_clr )
 4402.                            call __deallocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
 4402.                            ss_prop%phase_fnc_clr%header%assoc = 0
 4403.                            $_allo_P21(0) = 0x1000000000001L
 4403.                            $_allo_P21(1) = loc( ss_prop%forward_scatter_clr )
 4403.                            call __deallocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
 4403.                            ss_prop%forward_scatter_clr%header%assoc = 0
 4404.                            $_allo_P22(0) = 0x1000000000001L
 4404.                            $_allo_P22(1) = loc( ss_prop%forward_solar_clr )
 4404.                            call __deallocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
 4404.                            ss_prop%forward_solar_clr%header%assoc = 0
 4405.                            $_allo_P23(0) = 0x1000000000001L
 4405.                            $_allo_P23(1) = loc( ss_prop%phase_fnc_solar_clr )
 4405.                            call __deallocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
 4405.                            ss_prop%phase_fnc_solar_clr%header%assoc = 0
 4407.                            $_allo_P24(0) = 0x1000000000001L
 4407.                            $_allo_P24(1) = loc( ss_prop%k_grey_tot )
 4407.                            call __deallocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
 4407.                            ss_prop%k_grey_tot%header%assoc = 0
 4408.                            $_allo_P25(0) = 0x1000000000001L
 4408.                            $_allo_P25(1) = loc( ss_prop%k_ext_scat )
 4408.                            call __deallocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
 4408.                            ss_prop%k_ext_scat%header%assoc = 0
 4409.                            $_allo_P26(0) = 0x1000000000001L
 4409.                            $_allo_P26(1) = loc( ss_prop%tau )
 4409.                            call __deallocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
 4409.                            ss_prop%tau%header%assoc = 0
 4410.                            $_allo_P27(0) = 0x1000000000001L
 4410.                            $_allo_P27(1) = loc( ss_prop%omega )
 4410.                            call __deallocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
 4410.                            ss_prop%omega%header%assoc = 0
 4411.                            $_allo_P28(0) = 0x1000000000001L
 4411.                            $_allo_P28(1) = loc( ss_prop%phase_fnc )
 4411.                            call __deallocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
 4411.                            ss_prop%phase_fnc%header%assoc = 0
 4412.                            $_allo_P29(0) = 0x1000000000001L
 4412.                            $_allo_P29(1) = loc( ss_prop%forward_scatter )
 4412.                            call __deallocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
 4412.                            ss_prop%forward_scatter%header%assoc = 0
 4413.                            $_allo_P30(0) = 0x1000000000001L
 4413.                            $_allo_P30(1) = loc( ss_prop%forward_solar )
 4413.                            call __deallocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
 4413.                            ss_prop%forward_solar%header%assoc = 0
 4414.                            $_allo_P31(0) = 0x1000000000001L
 4414.                            $_allo_P31(1) = loc( ss_prop%phase_fnc_solar )
 4414.                            call __deallocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
 4414.                            ss_prop%phase_fnc_solar%header%assoc = 0
 4421.                            if ( isolir == 2 ) then
 4422.                               $ipa_S47 = map_channel(i_first_band + $I_L3698_619)
 4422.                               ipa$10264 = loc( planck_flux_band(1, 0) )
 4422.                               planck_flux = _copyin( planck_flux_band(1, 0) )
 4422.                               ipa$10269 = loc( flux_down_clear(1, 0, $ipa_S47) )
 4422.                               flux_down_clear = _copyin( flux_down_clear(1, 0, $ipa_S47) )
 4422.                               ipa$10271 = loc( flux_up_clear(1, 0, $ipa_S47) )
 4422.                               flux_up_clear = _copyin( flux_up_clear(1, 0, $ipa_S47) )
 4422.                               t$142 = nd_flux_profile
 4422.                               t$143 = nd_layer
 4422.                               t$1645 = max( 0, nd_flux_profile )
 4422.                               t$1646 = nd_flux_profile
 4422.                               t$1647 = 1 + nd_layer
 4422.                               t$1648 = max( 0, 1 + nd_layer )
 4422.                               t$1649 = nd_flux_profile * max( 0, 1 + nd_layer )
 4422.                               t$144 = nd_radiance_profile
 4422.                               t$145 = nd_viewing_level
 4422.                               t$1650 = max( 0, nd_radiance_profile )
 4422.                               t$1651 = nd_radiance_profile
 4422.                               t$1652 = max( 0, nd_viewing_level )
 4422.                               t$1653 = ( nd_radiance_profile * nd_viewing_level )
 4422.                               t$146 = nd_direction
 4422.                               t$1654 = nd_viewing_level * nd_radiance_profile
 4422.                               t$1655 = max( 0, nd_direction )
 4422.                               t$1656 = ( nd_radiance_profile * nd_direction * nd_viewing_level )
 4422.                               if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
 4422.                                  if ( nd_layer >= 0 ) then
 4422.                                     if ( nd_flux_profile > 0 ) then
 4422.                                        $I_L4422_557 = 0
 4422.                                        do
 4422.                                           $I_L4422_498 = 0
 4422. !dir$ ivdep
 4422.                                           do
 4422.                                              flux_up(1 + $I_L4422_498, $I_L4422_557, $ipa_S47) = flux_up(1 + $I_L4422_498, $I_L4422_557, $ipa_S47) + planck_flux(1 + $I_L4422_498, $I_L4422_557)
 4422.                                              flux_down(1 + $I_L4422_498, $I_L4422_557, $ipa_S47) = flux_down(1 + $I_L4422_498, $I_L4422_557, $ipa_S47) + planck_flux(1 + $I_L4422_498, $I_L4422_557)
 4422.                                              $I_L4422_498 = 1 + $I_L4422_498
 4422.                                              if ( $I_L4422_498 >= nd_flux_profile ) exit
 4422.                                           enddo
 4422.                                           $I_L4422_557 = 1 + $I_L4422_557
 4422.                                           if ( $I_L4422_557 >= 1 + nd_layer ) exit
 4422.                                        enddo
 4422.                                     endif
 4422.                                  endif
 4422.                                  if ( l_clear ) then
 4422.                                     if ( nd_layer >= 0 ) then
 4422.                                        if ( nd_flux_profile > 0 ) then
 4422.                                           $I_L4422_559 = 0
 4422.                                           do
 4422.                                              $I_L4422_500 = 0
 4422. !dir$ ivdep
 4422.                                              do
 4422.                                                 flux_up_clear(1 + $I_L4422_500, $I_L4422_559) = flux_up_clear(1 + $I_L4422_500, $I_L4422_559) + planck_flux(1 + $I_L4422_500, $I_L4422_559)
 4422.                                                 flux_down_clear(1 + $I_L4422_500, $I_L4422_559) = flux_down_clear(1 + $I_L4422_500, $I_L4422_559) + planck_flux(1 + $I_L4422_500, $I_L4422_559)
 4422.                                                 $I_L4422_500 = 1 + $I_L4422_500
 4422.                                                 if ( $I_L4422_500 >= nd_flux_profile ) exit
 4422.                                              enddo
 4422.                                              $I_L4422_559 = 1 + $I_L4422_559
 4422.                                              if ( $I_L4422_559 >= 1 + nd_layer ) exit
 4422.                                           enddo
 4422.                                        endif
 4422.                                     endif
 4422.                                  endif
 4422.                               else
 4422.                                  if ( i_angular_integration == 3 ) then
 4422.                                     if ( i_sph_mode == 2 ) then
 4422.                                        if ( nd_layer >= 0 ) then
 4422.                                           if ( nd_flux_profile > 0 ) then
 4422.                                              $I_L4422_553 = 0
 4422.                                              do
 4422.                                                 $I_L4422_494 = 0
 4422. !dir$ ivdep
 4422.                                                 do
 4422.                                                    flux_up(1 + $I_L4422_494, $I_L4422_553, $ipa_S47) = flux_up(1 + $I_L4422_494, $I_L4422_553, $ipa_S47) + 3.1415926535897931 * planck_radiance_band(1 + $I_L4422_494, 1 + $I_L4422_553)
 4422.                                                    flux_down(1 + $I_L4422_494, $I_L4422_553, $ipa_S47) = flux_down(1 + $I_L4422_494, $I_L4422_553, $ipa_S47) + 3.1415926535897931 * planck_radiance_band(1 + $I_L4422_494, 1 + $I_L4422_553)
 4422.                                                    $I_L4422_494 = 1 + $I_L4422_494
 4422.                                                    if ( $I_L4422_494 >= nd_flux_profile ) exit
 4422.                                                 enddo
 4422.                                                 $I_L4422_553 = 1 + $I_L4422_553
 4422.                                                 if ( $I_L4422_553 >= 1 + nd_layer ) exit
 4422.                                              enddo
 4422.                                           endif
 4422.                                        endif
 4422.                                        if ( l_clear ) then
 4422.                                           if ( nd_layer >= 0 ) then
 4422.                                              if ( nd_flux_profile > 0 ) then
 4422.                                                 $I_L4422_555 = 0
 4422.                                                 do
 4422.                                                    $I_L4422_496 = 0
 4422. !dir$ ivdep
 4422.                                                    do
 4422.                                                       flux_up_clear(1 + $I_L4422_496, $I_L4422_555) = flux_up_clear(1 + $I_L4422_496, $I_L4422_555) + 3.1415926535897931 * planck_radiance_band(1 + $I_L4422_496, 1 + $I_L4422_555)
 4422.                                                       flux_down_clear(1 + $I_L4422_496, $I_L4422_555) = flux_down_clear(1 + $I_L4422_496, $I_L4422_555) + 3.1415926535897931 * planck_radiance_band(1 + $I_L4422_496, 1 + $I_L4422_555)
 4422.                                                       $I_L4422_496 = 1 + $I_L4422_496
 4422.                                                       if ( $I_L4422_496 >= nd_flux_profile ) exit
 4422.                                                    enddo
 4422.                                                    $I_L4422_555 = 1 + $I_L4422_555
 4422.                                                    if ( $I_L4422_555 >= 1 + nd_layer ) exit
 4422.                                                 enddo
 4422.                                              endif
 4422.                                           endif
 4422.                                        endif
 4422.                                     else if ( i_sph_mode == 1 ) then
 4422.                                        if ( nd_direction > 0 ) then
 4422.                                           if ( nd_viewing_level > 0 ) then
 4422.                                              if ( nd_radiance_profile > 0 ) then
 4422.                                                 $I_L4422_617 = 0
 4422.                                                 do
 4422.                                                    $I_L4422_615 = 0
 4422.                                                    do
 4422.                                                       $I_L4422_613 = 0
 4422.                                                       do
 4422.                                                          $I_L4422_592 = 0
 4422. !dir$ shortloop16
 4422. !dir$ blocking_size( 8, 8 )
 4422.                                                          do
 4422.                                                             $I_L4422_585 = 0
 4422.                                                             if ( min( nd_direction, 8 + 8 * $I_L4422_615 ) + -8 * $I_L4422_615 >= 4 ) then
 4422.                                                                $I_L4422_629 = 0
 4422. !dir$ shortloop16
 4422. !dir$ blocking_size( 8, 8 )
 4422.                                                                do
 4422.                                                                   $I_L4422_502 = 0
 4422. !dir$ ivdep
 4422. !dir$ blocking_size( 256, 256 )
 4422.                                                                   do
 4422.                                                                      radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 1, $ipa_S47) = radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 1, $ipa_S47) + planck_radiance_band($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1)
 4422.                                                                      radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 2, $ipa_S47) = radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 2, $ipa_S47) + planck_radiance_band($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1)
 4422.                                                                      radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 3, $ipa_S47) = radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 3, $ipa_S47) + planck_radiance_band($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1)
 4422.                                                                      radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 4, $ipa_S47) = radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, 8 * $I_L4422_615 + 4 * $I_L4422_629 + 4, $ipa_S47) + planck_radiance_band($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1)
 4422.                                                                      $I_L4422_502 = 1 + $I_L4422_502
 4422.                                                                      if ( $I_L4422_502 >= min( nd_radiance_profile, 256 + 256 * $I_L4422_613 ) + -256 * $I_L4422_613 ) exit
 4422.                                                                   enddo
 4422.                                                                   $I_L4422_629 = 1 + $I_L4422_629
 4422.                                                                   if ( $I_L4422_629 >= _rsh( min( nd_direction, 8 + 8 * $I_L4422_615 ) + -8 * $I_L4422_615, 2 ) ) exit
 4422.                                                                enddo
 4422.                                                                $I_L4422_585 = and( 0xfffffffffffffffcUL, min( nd_direction, 8 + 8 * $I_L4422_615 ) + -8 * $I_L4422_615 )
 4422.                                                             endif
 4422.                                                             if ( $I_L4422_585 < min( nd_direction, 8 + 8 * $I_L4422_615 ) + -8 * $I_L4422_615 ) then
 4422.                                                                $I_L4422_624 = 0
 4422. !dir$ shortloop16
 4422. !dir$ blocking_size( 8, 8 )
 4422.                                                                do
 4422.                                                                   $I_L4422_502 = 0
 4422. !dir$ ivdep
 4422. !dir$ blocking_size( 256, 256 )
 4422.                                                                   do
 4422.                                                                      radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, $I_L4422_585 + $I_L4422_624 + 8 * $I_L4422_615 + 1, $ipa_S47) = radiance($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1, $I_L4422_585 + $I_L4422_624 + 8 * $I_L4422_615 + 1, $ipa_S47) + planck_radiance_band($I_L4422_502 + 256 * $I_L4422_613 + 1, $I_L4422_592 + 8 * $I_L4422_617 + 1)
 4422.                                                                      $I_L4422_502 = 1 + $I_L4422_502
 4422.                                                                      if ( $I_L4422_502 >= min( nd_radiance_profile, 256 + 256 * $I_L4422_613 ) + -256 * $I_L4422_613 ) exit
 4422.                                                                   enddo
 4422.                                                                   $I_L4422_624 = 1 + $I_L4422_624
 4422.                                                                   if ( $I_L4422_624 >= min( nd_direction, 8 + 8 * $I_L4422_615 ) + -$I_L4422_585 + -8 * $I_L4422_615 ) exit
 4422.                                                                enddo
 4422.                                                             endif
 4422.                                                             $I_L4422_592 = 1 + $I_L4422_592
 4422.                                                             if ( $I_L4422_592 >= min( nd_viewing_level, 8 + 8 * $I_L4422_617 ) + -8 * $I_L4422_617 ) exit
 4422.                                                          enddo
 4422.                                                          $I_L4422_613 = 1 + $I_L4422_613
 4422.                                                          if ( $I_L4422_613 >= 1 + max( 0, -1 + _rsh( 255 + nd_radiance_profile, 8 ) ) ) exit
 4422.                                                       enddo
 4422.                                                       $I_L4422_615 = 1 + $I_L4422_615
 4422.                                                       if ( $I_L4422_615 >= 1 + max( 0, -1 + _rsh( 7 + nd_direction, 3 ) ) ) exit
 4422.                                                    enddo
 4422.                                                    $I_L4422_617 = 1 + $I_L4422_617
 4422.                                                    if ( $I_L4422_617 >= 1 + max( 0, -1 + _rsh( 7 + nd_viewing_level, 3 ) ) ) exit
 4422.                                                 enddo
 4422.                                              endif
 4422.                                           endif
 4422.                                        endif
 4422.                                     endif
 4422.                                  endif
 4422.                               endif
 4422.                               flux_up_clear(1, 0, $ipa_S47) = _copyout( flux_up_clear )
 4422.                               flux_down_clear(1, 0, $ipa_S47) = _copyout( flux_down_clear )
 4422.                               planck_flux_band(1, 0) = _copyout( planck_flux )
 4422.                            endif
 4437.                            $I_L3698_619 = 1 + $I_L3698_619
 4434.                         else
 4434.                         endif
 3709.                      else if ( n_band_absorb(i_first_band + $I_L3698_619) > 0 ) then
 3709.                      else
 3709.                      endif
 3709.                      if ( $I_L3698_619 >= i_last_band + -i_first_band + 1 ) exit
 3709.                   enddo
 3709.                   goto 70
 3709.                else
 3709.    70             continue
 2485.                   _free( t$1499 )
 2485.                endif
 2485.             endif
 2485.          endif
 2485.       endif
 2485.    80 continue
 4441.       return
 4441.       end
 4441.       
 4610.       
 4610.       subroutine adjust_ir_radiance( n_profile, n_layer, n_viewing_level, n_direction, i_angular_integration, i_sph_mode, planck_flux, planck_radiance, flux_down, flux_up, radiance, l_clear, flux_down_clear, flux_up_clear, nd_2sg_profile, nd_flux_profile, nd_radiance_profile, nd_layer, nd_direction, nd_viewing_level )
 4463.       t$142 = nd_flux_profile
 4463.       t$143 = nd_layer
 4519.       t$1645 = _zla( 0, nd_flux_profile )
 4463.       t$1646 = _zla( 0, nd_flux_profile )
 4463.       t$1647 = 1 + nd_layer
 4519.       t$1648 = _zla( 0, 1 + nd_layer )
 4463.       t$1649 = _zla( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
 4463.       t$144 = nd_radiance_profile
 4463.       t$145 = nd_viewing_level
 4521.       t$1650 = _zla( 0, nd_radiance_profile )
 4463.       t$1651 = _zla( 0, nd_radiance_profile )
 4521.       t$1652 = _zla( 0, nd_viewing_level )
 4463.       t$1653 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
 4463.       t$146 = nd_direction
 4463.       t$1654 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
 4532.       t$1655 = _zla( 0, nd_direction )
 4463.       t$1656 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_direction )
 4551.       if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
 4554.          if ( nd_layer >= 0 ) then
 4555.             if ( nd_flux_profile > 0 ) then
 4554.                $I_L4554_81 = 0
 4554.                do
 4555.                   $I_L4555_70 = 0
 4555. !dir$ ivdep
 4555.                   do
 4556.                      flux_up(1 + $I_L4555_70, $I_L4554_81) = flux_up(1 + $I_L4555_70, $I_L4554_81) + planck_flux(1 + $I_L4555_70, $I_L4554_81)
 4557.                      flux_down(1 + $I_L4555_70, $I_L4554_81) = flux_down(1 + $I_L4555_70, $I_L4554_81) + planck_flux(1 + $I_L4555_70, $I_L4554_81)
 4558.                      $I_L4555_70 = 1 + $I_L4555_70
 4555.                      if ( $I_L4555_70 >= nd_flux_profile ) exit
 4555.                   enddo
 4559.                   $I_L4554_81 = 1 + $I_L4554_81
 4558.                   if ( $I_L4554_81 >= 1 + nd_layer ) exit
 4558.                enddo
 4558.             endif
 4558.          endif
 4560.          if ( l_clear ) then
 4561.             if ( nd_layer >= 0 ) then
 4562.                if ( nd_flux_profile > 0 ) then
 4561.                   $I_L4561_83 = 0
 4561.                   do
 4562.                      $I_L4562_72 = 0
 4562. !dir$ ivdep
 4562.                      do
 4563.                         flux_up_clear(1 + $I_L4562_72, $I_L4561_83) = flux_up_clear(1 + $I_L4562_72, $I_L4561_83) + planck_flux(1 + $I_L4562_72, $I_L4561_83)
 4564.                         flux_down_clear(1 + $I_L4562_72, $I_L4561_83) = flux_down_clear(1 + $I_L4562_72, $I_L4561_83) + planck_flux(1 + $I_L4562_72, $I_L4561_83)
 4565.                         $I_L4562_72 = 1 + $I_L4562_72
 4562.                         if ( $I_L4562_72 >= nd_flux_profile ) exit
 4562.                      enddo
 4566.                      $I_L4561_83 = 1 + $I_L4561_83
 4565.                      if ( $I_L4561_83 >= 1 + nd_layer ) exit
 4565.                   enddo
 4565.                endif
 4565.             endif
 4565.          endif
 4565.       else
 4569.          if ( i_angular_integration == 3 ) then
 4574.             if ( i_sph_mode == 2 ) then
 4575.                if ( nd_layer >= 0 ) then
 4576.                   if ( nd_flux_profile > 0 ) then
 4575.                      $I_L4575_77 = 0
 4575.                      do
 4576.                         $I_L4576_66 = 0
 4576. !dir$ ivdep
 4576.                         do
 4577.                            flux_up(1 + $I_L4576_66, $I_L4575_77) = flux_up(1 + $I_L4576_66, $I_L4575_77) + 3.1415926535897931 * planck_radiance(1 + $I_L4576_66, 1 + $I_L4575_77)
 4578.                            flux_down(1 + $I_L4576_66, $I_L4575_77) = flux_down(1 + $I_L4576_66, $I_L4575_77) + 3.1415926535897931 * planck_radiance(1 + $I_L4576_66, 1 + $I_L4575_77)
 4580.                            $I_L4576_66 = 1 + $I_L4576_66
 4576.                            if ( $I_L4576_66 >= nd_flux_profile ) exit
 4576.                         enddo
 4581.                         $I_L4575_77 = 1 + $I_L4575_77
 4580.                         if ( $I_L4575_77 >= 1 + nd_layer ) exit
 4580.                      enddo
 4580.                   endif
 4580.                endif
 4583.                if ( l_clear ) then
 4584.                   if ( nd_layer >= 0 ) then
 4585.                      if ( nd_flux_profile > 0 ) then
 4584.                         $I_L4584_79 = 0
 4584.                         do
 4585.                            $I_L4585_68 = 0
 4585. !dir$ ivdep
 4585.                            do
 4586.                               flux_up_clear(1 + $I_L4585_68, $I_L4584_79) = flux_up_clear(1 + $I_L4585_68, $I_L4584_79) + 3.1415926535897931 * planck_radiance(1 + $I_L4585_68, 1 + $I_L4584_79)
 4588.                               flux_down_clear(1 + $I_L4585_68, $I_L4584_79) = flux_down_clear(1 + $I_L4585_68, $I_L4584_79) + 3.1415926535897931 * planck_radiance(1 + $I_L4585_68, 1 + $I_L4584_79)
 4590.                               $I_L4585_68 = 1 + $I_L4585_68
 4585.                               if ( $I_L4585_68 >= nd_flux_profile ) exit
 4585.                            enddo
 4591.                            $I_L4584_79 = 1 + $I_L4584_79
 4590.                            if ( $I_L4584_79 >= 1 + nd_layer ) exit
 4590.                         enddo
 4590.                      endif
 4590.                   endif
 4590.                endif
 4594.             else if ( i_sph_mode == 1 ) then
 4595.                if ( nd_direction > 0 ) then
 4596.                   if ( nd_viewing_level > 0 ) then
 4597.                      if ( nd_radiance_profile > 0 ) then
 4596.                         $I_L4596_95 = 0
 4596.                         do
 4595.                            $I_L4595_93 = 0
 4595.                            do
 4597.                               $I_L4597_91 = 0
 4597.                               do
 4596.                                  $I_L4596_88 = 0
 4596. !dir$ shortloop16
 4596. !dir$ blocking_size( 8, 8 )
 4596.                                  do
 4595.                                     $I_L4595_85 = 0
 4595.                                     if ( min( nd_direction, 8 + 8 * $I_L4595_93 ) + -8 * $I_L4595_93 >= 4 ) then
 4595.                                        $I_L4595_100 = 0
 4595. !dir$ shortloop16
 4595. !dir$ blocking_size( 8, 8 )
 4595.                                        do
 4597.                                           $I_L4597_74 = 0
 4597. !dir$ ivdep
 4597. !dir$ blocking_size( 256, 256 )
 4597.                                           do
 4598.                                              radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 1) = radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 1) + planck_radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1)
 4598.                                              radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 2) = radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 2) + planck_radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1)
 4598.                                              radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 3) = radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 3) + planck_radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1)
 4598.                                              radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 4) = radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, 8 * $I_L4595_93 + 4 * $I_L4595_100 + 4) + planck_radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1)
 4597.                                              $I_L4597_74 = 1 + $I_L4597_74
 4597.                                              if ( $I_L4597_74 >= min( nd_radiance_profile, 256 + 256 * $I_L4597_91 ) + -256 * $I_L4597_91 ) exit
 4597.                                           enddo
 4595.                                           $I_L4595_100 = 1 + $I_L4595_100
 4595.                                           if ( $I_L4595_100 >= _rsh( min( nd_direction, 8 + 8 * $I_L4595_93 ) + -8 * $I_L4595_93, 2 ) ) exit
 4595.                                        enddo
 4595.                                        $I_L4595_85 = and( 0xfffffffffffffffcUL, min( nd_direction, 8 + 8 * $I_L4595_93 ) + -8 * $I_L4595_93 )
 4595.                                     endif
 4595.                                     if ( $I_L4595_85 < min( nd_direction, 8 + 8 * $I_L4595_93 ) + -8 * $I_L4595_93 ) then
 4595.                                        $I_L4595_97 = 0
 4595. !dir$ shortloop16
 4595. !dir$ blocking_size( 8, 8 )
 4595.                                        do
 4597.                                           $I_L4597_74 = 0
 4597. !dir$ ivdep
 4597. !dir$ blocking_size( 256, 256 )
 4597.                                           do
 4598.                                              radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, $I_L4595_85 + $I_L4595_97 + 8 * $I_L4595_93 + 1) = radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1, $I_L4595_85 + $I_L4595_97 + 8 * $I_L4595_93 + 1) + planck_radiance($I_L4597_74 + 256 * $I_L4597_91 + 1, $I_L4596_88 + 8 * $I_L4596_95 + 1)
 4597.                                              $I_L4597_74 = 1 + $I_L4597_74
 4597.                                              if ( $I_L4597_74 >= min( nd_radiance_profile, 256 + 256 * $I_L4597_91 ) + -256 * $I_L4597_91 ) exit
 4597.                                           enddo
 4595.                                           $I_L4595_97 = 1 + $I_L4595_97
 4595.                                           if ( $I_L4595_97 >= min( nd_direction, 8 + 8 * $I_L4595_93 ) + -$I_L4595_85 + -8 * $I_L4595_93 ) exit
 4595.                                        enddo
 4595.                                     endif
 4596.                                     $I_L4596_88 = 1 + $I_L4596_88
 4600.                                     if ( $I_L4596_88 >= min( nd_viewing_level, 8 + 8 * $I_L4596_95 ) + -8 * $I_L4596_95 ) exit
 4600.                                  enddo
 4597.                                  $I_L4597_91 = 1 + $I_L4597_91
 4597.                                  if ( $I_L4597_91 >= 1 + max( 0, -1 + _rsh( 255 + nd_radiance_profile, 8 ) ) ) exit
 4597.                               enddo
 4595.                               $I_L4595_93 = 1 + $I_L4595_93
 4601.                               if ( $I_L4595_93 >= 1 + max( 0, -1 + _rsh( 7 + nd_direction, 3 ) ) ) exit
 4601.                            enddo
 4596.                            $I_L4596_95 = 1 + $I_L4596_95
 4596.                            if ( $I_L4596_95 >= 1 + max( 0, -1 + _rsh( 7 + nd_viewing_level, 3 ) ) ) exit
 4596.                         enddo
 4596.                      endif
 4596.                   endif
 4596.                endif
 4596.             endif
 4596.          endif
 4596.       endif
 4610.       return
 4610.       end
 4610.       
 4778.       
 4778.       subroutine aggregate_cloud( ierr, n_profile, n_layer, n_cloud_top, i_cloud, i_cloud_representation, n_cloud_type, frac_cloud, i_region_cloud, frac_region, nd_profile, nd_layer, nd_cloud_type, nd_region, id_ct )
 4631.       t$154 = nd_profile
 4631.       t$155 = id_ct
 4631.       t$156 = nd_layer
 4631.       t$157 = nd_cloud_type
 4690.       t$1657 = _zla( 0, nd_profile )
 4631.       t$1658 = _zla( 0, nd_profile )
 4631.       t$1659 = nd_layer + -id_ct + 1
 4690.       t$1660 = _zla( 0, nd_layer + -id_ct + 1 )
 4631.       t$1661 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 4690.       t$1662 = _zla( 0, nd_cloud_type )
 4631.       t$1663 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_type ) * _zla( 0, nd_layer + -id_ct + 1 )
 4631.       t$158 = nd_region
 4697.       t$1664 = _zla( 0, nd_region )
 4631.       t$1665 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 )
 4712.       if ( i_cloud == 6 ) then
 4778.          goto 10
 4712.       else if ( i_cloud == 8 ) then
 4712.    10    continue
 4715.          if ( i_cloud_representation == 4 ) then
 4717.             if ( n_cloud_type > 0 ) then
 4725.                $SC_i_region_cloud_I3 = i_region_cloud(4)
 4723.                $SC_i_region_cloud_I2 = i_region_cloud(3)
 4721.                $SC_i_region_cloud_I1 = i_region_cloud(2)
 4727.                if ( 1 < n_cloud_type ) then
 4717.                   $I_L4717_44 = 0
 4717. !dir$ ivdep
 4717.                   do
 4720.                      if ( $I_L4717_44 == 0 ) then
 4721.                         $SC_i_region_cloud_I1 = 2
 4722.                      else if ( -1 + $I_L4717_44 == 0 ) then
 4723.                         $SC_i_region_cloud_I2 = 3
 4723.                      else if ( -2 + $I_L4717_44 == 0 ) then
 4725.                         $SC_i_region_cloud_I3 = 3
 4725.                      endif
 4727.                      $I_L4717_44 = 1 + $I_L4717_44
 4726.                      if ( $I_L4717_44 >= -1 + n_cloud_type ) exit
 4726.                   enddo
 4726.                endif
 4725.                i_region_cloud(4) = $SC_i_region_cloud_I3
 4723.                i_region_cloud(3) = $SC_i_region_cloud_I2
 4721.                i_region_cloud(2) = $SC_i_region_cloud_I1
 4719.                i_region_cloud(1) = 2
 4719.             endif
 4733.             if ( nd_layer > 0 ) then
 4734.                if ( nd_profile > 0 ) then
 4733.                   $I_L4733_50 = 0
 4733.                   do
 4734.                      $I_L4734_46 = 0
 4734. !dir$ ivdep
 4734.                      do
 4735.                         frac_region(1 + $I_L4734_46, 1 + $I_L4733_50, 2) = frac_cloud(1 + $I_L4734_46, 1 + $I_L4733_50, 1) + frac_cloud(1 + $I_L4734_46, 1 + $I_L4733_50, 2)
 4738.                         frac_region(1 + $I_L4734_46, 1 + $I_L4733_50, 3) = frac_cloud(1 + $I_L4734_46, 1 + $I_L4733_50, 3) + frac_cloud(1 + $I_L4734_46, 1 + $I_L4733_50, 4)
 4741.                         $I_L4734_46 = 1 + $I_L4734_46
 4734.                         if ( $I_L4734_46 >= nd_profile ) exit
 4734.                      enddo
 4742.                      $I_L4733_50 = 1 + $I_L4733_50
 4741.                      if ( $I_L4733_50 >= nd_layer ) exit
 4741.                   enddo
 4741.                endif
 4741.             endif
 4744.          else if ( i_cloud_representation == 3 ) then
 4746.             if ( n_cloud_type > 0 ) then
 4750.                $SC_i_region_cloud_I1 = i_region_cloud(2)
 4752.                if ( 1 < n_cloud_type ) then
 4750.                   $SC_i_region_cloud_I1 = 3
 4750.                endif
 4750.                i_region_cloud(2) = $SC_i_region_cloud_I1
 4748.                i_region_cloud(1) = 2
 4748.             endif
 4754.             if ( nd_layer > 0 ) then
 4755.                if ( nd_profile > 0 ) then
 4754.                   $I_L4754_48 = 0
 4754.                   do
 4755.                      $I_L4755_42 = 0
 4755. !dir$ ivdep
 4755.                      do
 4756.                         frac_region(1 + $I_L4755_42, 1 + $I_L4754_48, 2) = frac_cloud(1 + $I_L4755_42, 1 + $I_L4754_48, 1)
 4758.                         frac_region(1 + $I_L4755_42, 1 + $I_L4754_48, 3) = frac_cloud(1 + $I_L4755_42, 1 + $I_L4754_48, 2)
 4760.                         $I_L4755_42 = 1 + $I_L4755_42
 4755.                         if ( $I_L4755_42 >= nd_profile ) exit
 4755.                      enddo
 4761.                      $I_L4754_48 = 1 + $I_L4754_48
 4760.                      if ( $I_L4754_48 >= nd_layer ) exit
 4760.                   enddo
 4760.                endif
 4760.             endif
 4760.          else
 4765.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$160,  _substr(t$159,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: This representation of clouds is not compatible with separate ', 0x800600000000L ), _iotype( 'convective and stratiform and overlap.', 0x800600000000L ) ) )
 4769.             ierr = 1
 4769.          endif
 4769.       endif
 4778.       return
 4778.       end
 4778.       
 5138.       
 5138.       subroutine augment_radiance( n_profile, n_layer, i_angular_integration, i_sph_mode, n_viewing_level, n_direction, isolir, l_clear, l_initial, weight_incr, l_blue_flux_surf, weight_blue, flux_direct, flux_down, flux_up, flux_direct_blue_surf, flux_down_blue_surf, flux_up_blue_surf, i_direct, radiance, photolysis, flux_direct_clear, flux_down_clear, flux_up_clear, flux_direct_incr, flux_total_incr, i_direct_incr, radiance_incr, photolysis_incr, flux_direct_incr_clear, flux_total_incr_clear, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_layer, nd_viewing_level, nd_direction )
 4799.       t$166 = nd_flux_profile
 4799.       t$167 = nd_layer
 4899.       t$1666 = _zla( 0, nd_flux_profile )
 4799.       t$1667 = _zla( 0, nd_flux_profile )
 4799.       t$1668 = 1 + nd_layer
 4899.       t$1669 = _zla( 0, 1 + nd_layer )
 4799.       t$1670 = _zla( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
 4799.       t$169 = nd_radiance_profile
 4913.       t$1671 = _zla( 0, nd_radiance_profile )
 4799.       t$1672 = _zla( 0, nd_radiance_profile )
 4799.       t$1673 = _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer )
 4799.       t$170 = nd_viewing_level
 4799.       t$171 = nd_direction
 4915.       t$1674 = _zla( 0, nd_viewing_level )
 4799.       t$1675 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
 4915.       t$1676 = _zla( 0, nd_direction )
 4799.       t$1677 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_direction )
 4799.       t$172 = nd_j_profile
 4920.       t$1678 = _zla( 0, nd_j_profile )
 4799.       t$1679 = _zla( 0, nd_j_profile )
 4799.       t$1680 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_j_profile )
 4799.       t$168 = ( 2 + 2 * nd_layer )
 4879.       t$1681 = _zla( 0, ( 2 + 2 * nd_layer ) )
 4799.       t$1682 = _zla( 0, nd_flux_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
 4951.       if ( l_initial == 0 ) then
 4956.          if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
 4956.             goto 10
 4956.          else
 4956.             if ( i_angular_integration /= 3 .orelse. i_sph_mode /= 2 ) then
 5012.                if ( i_angular_integration /= 3 ) then
 5012.                   goto 20
 5012.                else if ( i_sph_mode == 1 ) then
 5015.                   if ( nd_direction > 0 ) then
 5016.                      if ( nd_viewing_level > 0 ) then
 5017.                         if ( nd_radiance_profile > 0 ) then
 5015.                            $I_L5015_266 = 0
 5015.                            do
 5016.                               $I_L5016_260 = 0
 5016.                               do
 5017.                                  $I_L5017_232 = 0
 5017. !dir$ ivdep
 5017.                                  do
 5018.                                     radiance(1 + $I_L5017_232, 1 + $I_L5016_260, 1 + $I_L5015_266) = radiance(1 + $I_L5017_232, 1 + $I_L5016_260, 1 + $I_L5015_266) + weight_incr * radiance_incr(1 + $I_L5017_232, 1 + $I_L5016_260, 1 + $I_L5015_266)
 5020.                                     $I_L5017_232 = 1 + $I_L5017_232
 5017.                                     if ( $I_L5017_232 >= nd_radiance_profile ) exit
 5017.                                  enddo
 5021.                                  $I_L5016_260 = 1 + $I_L5016_260
 5020.                                  if ( $I_L5016_260 >= nd_viewing_level ) exit
 5020.                               enddo
 5022.                               $I_L5015_266 = 1 + $I_L5015_266
 5021.                               if ( $I_L5015_266 >= nd_direction ) exit
 5021.                            enddo
 5021.                         endif
 5021.                      endif
 5021.                   endif
 5024.                   if ( isolir == 1 ) then
 5025.                      if ( nd_layer >= 0 ) then
 5026.                         if ( nd_flux_profile > 0 ) then
 5025.                            $I_L5025_262 = 0
 5025.                            do
 5026.                               $I_L5026_234 = 0
 5026. !dir$ ivdep
 5026.                               do
 5027.                                  i_direct(1 + $I_L5026_234, $I_L5025_262) = i_direct(1 + $I_L5026_234, $I_L5025_262) + weight_incr * i_direct_incr(1 + $I_L5026_234, $I_L5025_262)
 5029.                                  $I_L5026_234 = 1 + $I_L5026_234
 5026.                                  if ( $I_L5026_234 >= nd_flux_profile ) exit
 5026.                               enddo
 5030.                               $I_L5025_262 = 1 + $I_L5025_262
 5029.                               if ( $I_L5025_262 >= 1 + nd_layer ) exit
 5029.                            enddo
 5029.                         endif
 5029.                      endif
 5029.                   endif
 5029.                else
 5029.    20             continue
 5033.                   if ( i_angular_integration == 3 ) then
 5033.                      if ( i_sph_mode == 3 ) then
 5036.                         if ( nd_viewing_level > 0 ) then
 5037.                            if ( nd_j_profile > 0 ) then
 5036.                               $I_L5036_246 = 0
 5036.                               do
 5037.                                  $I_L5037_216 = 0
 5037. !dir$ ivdep
 5037.                                  do
 5038.                                     photolysis(1 + $I_L5037_216, 1 + $I_L5036_246) = photolysis(1 + $I_L5037_216, 1 + $I_L5036_246) + weight_incr * photolysis_incr(1 + $I_L5037_216, 1 + $I_L5036_246)
 5040.                                     $I_L5037_216 = 1 + $I_L5037_216
 5037.                                     if ( $I_L5037_216 >= nd_j_profile ) exit
 5037.                                  enddo
 5041.                                  $I_L5036_246 = 1 + $I_L5036_246
 5040.                                  if ( $I_L5036_246 >= nd_viewing_level ) exit
 5040.                               enddo
 5040.                            endif
 5040.                         endif
 5040.                      endif
 5040.                   endif
 5040.                endif
 5040.             else
 5040.    10          continue
 4962.                if ( isolir == 1 ) then
 4963.                   if ( nd_layer >= 0 ) then
 4964.                      if ( nd_flux_profile > 0 ) then
 4963.                         $I_L4963_248 = 0
 4963.                         do
 4964.                            $I_L4964_218 = 0
 4964. !dir$ ivdep
 4964.                            do
 4965.                               flux_direct(1 + $I_L4964_218, $I_L4963_248) = flux_direct(1 + $I_L4964_218, $I_L4963_248) + weight_incr * flux_direct_incr(1 + $I_L4964_218, $I_L4963_248)
 4967.                               $I_L4964_218 = 1 + $I_L4964_218
 4964.                               if ( $I_L4964_218 >= nd_flux_profile ) exit
 4964.                            enddo
 4968.                            $I_L4963_248 = 1 + $I_L4963_248
 4967.                            if ( $I_L4963_248 >= 1 + nd_layer ) exit
 4967.                         enddo
 4967.                      endif
 4967.                   endif
 4969.                   if ( l_blue_flux_surf ) then
 4970.                      if ( nd_flux_profile > 0 ) then
 4970.                         $I_L4970_220 = 0
 4970. !dir$ ivdep
 4970.                         do
 4971.                            flux_up_blue_surf(1 + $I_L4970_220) = flux_up_blue_surf(1 + $I_L4970_220) + weight_blue * flux_total_incr(1 + $I_L4970_220, 1 + 2 * n_layer)
 4973.                            flux_down_blue_surf(1 + $I_L4970_220) = flux_down_blue_surf(1 + $I_L4970_220) + weight_blue * flux_total_incr(1 + $I_L4970_220, 2 + 2 * n_layer)
 4978.                            flux_direct_blue_surf(1 + $I_L4970_220) = flux_direct_blue_surf(1 + $I_L4970_220) + weight_blue * flux_direct_incr(1 + $I_L4970_220, n_layer)
 4975.                            $I_L4970_220 = 1 + $I_L4970_220
 4970.                            if ( $I_L4970_220 >= nd_flux_profile ) exit
 4970.                         enddo
 4970.                      endif
 4970.                   endif
 4970.                endif
 4984.                if ( nd_layer >= 0 ) then
 4985.                   if ( nd_flux_profile > 0 ) then
 4984.                      $I_L4984_250 = 0
 4984.                      do
 4985.                         $I_L4985_222 = 0
 4985. !dir$ ivdep
 4985.                         do
 4986.                            flux_up(1 + $I_L4985_222, $I_L4984_250) = flux_up(1 + $I_L4985_222, $I_L4984_250) + weight_incr * flux_total_incr(1 + $I_L4985_222, 1 + 2 * $I_L4984_250)
 4988.                            flux_down(1 + $I_L4985_222, $I_L4984_250) = flux_down(1 + $I_L4985_222, $I_L4984_250) + weight_incr * flux_total_incr(1 + $I_L4985_222, 2 + 2 * $I_L4984_250)
 4990.                            $I_L4985_222 = 1 + $I_L4985_222
 4985.                            if ( $I_L4985_222 >= nd_flux_profile ) exit
 4985.                         enddo
 4991.                         $I_L4984_250 = 1 + $I_L4984_250
 4990.                         if ( $I_L4984_250 >= 1 + nd_layer ) exit
 4990.                      enddo
 4990.                   endif
 4990.                endif
 4993.                if ( l_clear ) then
 4994.                   if ( isolir == 1 ) then
 4995.                      if ( nd_layer >= 0 ) then
 4996.                         if ( nd_flux_profile > 0 ) then
 4995.                            $I_L4995_252 = 0
 4995.                            do
 4996.                               $I_L4996_224 = 0
 4996. !dir$ ivdep
 4996.                               do
 4997.                                  flux_direct_clear(1 + $I_L4996_224, $I_L4995_252) = flux_direct_clear(1 + $I_L4996_224, $I_L4995_252) + weight_incr * flux_direct_incr_clear(1 + $I_L4996_224, $I_L4995_252)
 4999.                                  $I_L4996_224 = 1 + $I_L4996_224
 4996.                                  if ( $I_L4996_224 >= nd_flux_profile ) exit
 4996.                               enddo
 5000.                               $I_L4995_252 = 1 + $I_L4995_252
 4999.                               if ( $I_L4995_252 >= 1 + nd_layer ) exit
 4999.                            enddo
 4999.                         endif
 4999.                      endif
 4999.                   endif
 5002.                   if ( nd_layer >= 0 ) then
 5003.                      if ( nd_flux_profile > 0 ) then
 5002.                         $I_L5002_254 = 0
 5002.                         do
 5003.                            $I_L5003_226 = 0
 5003. !dir$ ivdep
 5003.                            do
 5004.                               flux_up_clear(1 + $I_L5003_226, $I_L5002_254) = flux_up_clear(1 + $I_L5003_226, $I_L5002_254) + weight_incr * flux_total_incr_clear(1 + $I_L5003_226, 1 + 2 * $I_L5002_254)
 5006.                               flux_down_clear(1 + $I_L5003_226, $I_L5002_254) = flux_down_clear(1 + $I_L5003_226, $I_L5002_254) + weight_incr * flux_total_incr_clear(1 + $I_L5003_226, 2 + 2 * $I_L5002_254)
 5008.                               $I_L5003_226 = 1 + $I_L5003_226
 5003.                               if ( $I_L5003_226 >= nd_flux_profile ) exit
 5003.                            enddo
 5009.                            $I_L5002_254 = 1 + $I_L5002_254
 5008.                            if ( $I_L5002_254 >= 1 + nd_layer ) exit
 5008.                         enddo
 5008.                      endif
 5008.                   endif
 5008.                endif
 5008.             endif
 5008.          endif
 5045.       else if ( i_angular_integration == 1 ) then
 5045.          goto 30
 5045.       else if ( i_angular_integration == 2 ) then
 5045.          goto 30
 5045.       else if ( i_angular_integration /= 3 ) then
 5045.          goto 40
 5045.       else if ( i_sph_mode == 2 ) then
 5045.    30    continue
 5055.          if ( isolir == 1 ) then
 5056.             if ( nd_layer >= 0 ) then
 5057.                if ( nd_flux_profile > 0 ) then
 5056.                   $I_L5056_238 = 0
 5056.                   do
 5057.                      $I_L5057_206 = 0
 5057. !dir$ ivdep
 5057.                      do
 5058.                         flux_direct(1 + $I_L5057_206, $I_L5056_238) = weight_incr * flux_direct_incr(1 + $I_L5057_206, $I_L5056_238)
 5059.                         $I_L5057_206 = 1 + $I_L5057_206
 5057.                         if ( $I_L5057_206 >= nd_flux_profile ) exit
 5057.                      enddo
 5060.                      $I_L5056_238 = 1 + $I_L5056_238
 5059.                      if ( $I_L5056_238 >= 1 + nd_layer ) exit
 5059.                   enddo
 5059.                endif
 5059.             endif
 5061.             if ( l_blue_flux_surf ) then
 5062.                if ( nd_flux_profile > 0 ) then
 5062.                   $I_L5062_208 = 0
 5062. !dir$ ivdep
 5062.                   do
 5063.                      flux_up_blue_surf(1 + $I_L5062_208) = weight_blue * flux_total_incr(1 + $I_L5062_208, 1 + 2 * n_layer)
 5065.                      flux_down_blue_surf(1 + $I_L5062_208) = weight_blue * flux_total_incr(1 + $I_L5062_208, 2 + 2 * n_layer)
 5070.                      flux_direct_blue_surf(1 + $I_L5062_208) = weight_blue * flux_direct_incr(1 + $I_L5062_208, n_layer)
 5067.                      $I_L5062_208 = 1 + $I_L5062_208
 5062.                      if ( $I_L5062_208 >= nd_flux_profile ) exit
 5062.                   enddo
 5062.                endif
 5062.             endif
 5062.          endif
 5076.          if ( nd_layer >= 0 ) then
 5077.             if ( nd_flux_profile > 0 ) then
 5076.                $I_L5076_240 = 0
 5076.                do
 5077.                   $I_L5077_210 = 0
 5077. !dir$ ivdep
 5077.                   do
 5078.                      flux_up(1 + $I_L5077_210, $I_L5076_240) = weight_incr * flux_total_incr(1 + $I_L5077_210, 1 + 2 * $I_L5076_240)
 5079.                      flux_down(1 + $I_L5077_210, $I_L5076_240) = weight_incr * flux_total_incr(1 + $I_L5077_210, 2 + 2 * $I_L5076_240)
 5080.                      $I_L5077_210 = 1 + $I_L5077_210
 5077.                      if ( $I_L5077_210 >= nd_flux_profile ) exit
 5077.                   enddo
 5081.                   $I_L5076_240 = 1 + $I_L5076_240
 5080.                   if ( $I_L5076_240 >= 1 + nd_layer ) exit
 5080.                enddo
 5080.             endif
 5080.          endif
 5083.          if ( l_clear ) then
 5084.             if ( isolir == 1 ) then
 5085.                if ( nd_layer >= 0 ) then
 5086.                   if ( nd_flux_profile > 0 ) then
 5085.                      $I_L5085_242 = 0
 5085.                      do
 5086.                         $I_L5086_212 = 0
 5086. !dir$ ivdep
 5086.                         do
 5087.                            flux_direct_clear(1 + $I_L5086_212, $I_L5085_242) = weight_incr * flux_direct_incr_clear(1 + $I_L5086_212, $I_L5085_242)
 5089.                            $I_L5086_212 = 1 + $I_L5086_212
 5086.                            if ( $I_L5086_212 >= nd_flux_profile ) exit
 5086.                         enddo
 5090.                         $I_L5085_242 = 1 + $I_L5085_242
 5089.                         if ( $I_L5085_242 >= 1 + nd_layer ) exit
 5089.                      enddo
 5089.                   endif
 5089.                endif
 5089.             endif
 5092.             if ( nd_layer >= 0 ) then
 5093.                if ( nd_flux_profile > 0 ) then
 5092.                   $I_L5092_244 = 0
 5092.                   do
 5093.                      $I_L5093_214 = 0
 5093. !dir$ ivdep
 5093.                      do
 5094.                         flux_up_clear(1 + $I_L5093_214, $I_L5092_244) = weight_incr * flux_total_incr_clear(1 + $I_L5093_214, 1 + 2 * $I_L5092_244)
 5096.                         flux_down_clear(1 + $I_L5093_214, $I_L5092_244) = weight_incr * flux_total_incr_clear(1 + $I_L5093_214, 2 + 2 * $I_L5092_244)
 5098.                         $I_L5093_214 = 1 + $I_L5093_214
 5093.                         if ( $I_L5093_214 >= nd_flux_profile ) exit
 5093.                      enddo
 5099.                      $I_L5092_244 = 1 + $I_L5092_244
 5098.                      if ( $I_L5092_244 >= 1 + nd_layer ) exit
 5098.                   enddo
 5098.                endif
 5098.             endif
 5098.          endif
 5098.       else
 5098.    40    continue
 5102.          if ( i_angular_integration /= 3 ) then
 5102.             goto 50
 5102.          else if ( i_sph_mode == 1 ) then
 5106.             if ( nd_direction > 0 ) then
 5107.                if ( nd_viewing_level > 0 ) then
 5108.                   if ( nd_radiance_profile > 0 ) then
 5106.                      $I_L5106_264 = 0
 5106.                      do
 5107.                         $I_L5107_256 = 0
 5107.                         do
 5108.                            $I_L5108_228 = 0
 5108. !dir$ ivdep
 5108.                            do
 5109.                               radiance(1 + $I_L5108_228, 1 + $I_L5107_256, 1 + $I_L5106_264) = weight_incr * radiance_incr(1 + $I_L5108_228, 1 + $I_L5107_256, 1 + $I_L5106_264)
 5110.                               $I_L5108_228 = 1 + $I_L5108_228
 5108.                               if ( $I_L5108_228 >= nd_radiance_profile ) exit
 5108.                            enddo
 5111.                            $I_L5107_256 = 1 + $I_L5107_256
 5110.                            if ( $I_L5107_256 >= nd_viewing_level ) exit
 5110.                         enddo
 5112.                         $I_L5106_264 = 1 + $I_L5106_264
 5111.                         if ( $I_L5106_264 >= nd_direction ) exit
 5111.                      enddo
 5111.                   endif
 5111.                endif
 5111.             endif
 5114.             if ( isolir == 1 ) then
 5115.                if ( nd_layer >= 0 ) then
 5116.                   if ( nd_radiance_profile > 0 ) then
 5115.                      $I_L5115_258 = 0
 5115.                      do
 5116.                         $I_L5116_230 = 0
 5116. !dir$ ivdep
 5116.                         do
 5117.                            i_direct(1 + $I_L5116_230, $I_L5115_258) = weight_incr * i_direct_incr(1 + $I_L5116_230, $I_L5115_258)
 5118.                            $I_L5116_230 = 1 + $I_L5116_230
 5116.                            if ( $I_L5116_230 >= nd_radiance_profile ) exit
 5116.                         enddo
 5119.                         $I_L5115_258 = 1 + $I_L5115_258
 5118.                         if ( $I_L5115_258 >= 1 + nd_layer ) exit
 5118.                      enddo
 5118.                   endif
 5118.                endif
 5118.             endif
 5118.          else
 5118.    50       continue
 5122.             if ( i_angular_integration == 3 ) then
 5122.                if ( i_sph_mode == 3 ) then
 5125.                   if ( nd_viewing_level > 0 ) then
 5126.                      if ( nd_j_profile > 0 ) then
 5125.                         $I_L5125_236 = 0
 5125.                         do
 5126.                            $I_L5126_204 = 0
 5126. !dir$ ivdep
 5126.                            do
 5127.                               photolysis(1 + $I_L5126_204, 1 + $I_L5125_236) = weight_incr * photolysis_incr(1 + $I_L5126_204, 1 + $I_L5125_236)
 5128.                               $I_L5126_204 = 1 + $I_L5126_204
 5126.                               if ( $I_L5126_204 >= nd_j_profile ) exit
 5126.                            enddo
 5129.                            $I_L5125_236 = 1 + $I_L5125_236
 5128.                            if ( $I_L5125_236 >= nd_viewing_level ) exit
 5128.                         enddo
 5128.                      endif
 5128.                   endif
 5128.                endif
 5128.             endif
 5128.          endif
 5128.       endif
 5138.       return
 5138.       end
 5138.       
 5398.       
 5398.       subroutine augment_tiled_radiance( ierr, n_point_tile, n_tile, list_tile, i_angular_integration, isolir, l_initial, weight_incr, l_blue_flux_surf, weight_blue_incr, rho_alb, flux_up_tile, flux_up_blue_tile, flux_direct_incr, flux_down_incr, planck_flux_tile, planck_flux_air, nd_flux_profile, nd_point_tile, nd_tile, nd_brdf_basis_fnc )
 5159.       t$179 = nd_point_tile
 5210.       t$1683 = _zla( 0, nd_point_tile )
 5159.       t$180 = nd_brdf_basis_fnc
 5159.       t$181 = nd_tile
 5159.       t$1684 = _zla( 0, nd_point_tile )
 5231.       t$1685 = _zla( 0, nd_brdf_basis_fnc )
 5159.       t$1686 = _zla( 0, nd_point_tile ) * _zla( 0, nd_brdf_basis_fnc )
 5231.       t$1687 = _zla( 0, nd_tile )
 5159.       t$1688 = _zla( 0, nd_point_tile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_tile )
 5159.       t$1689 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 5159.       t$182 = nd_flux_profile
 5236.       t$1690 = _zla( 0, nd_flux_profile )
 5269.       if ( l_initial == 0 ) then
 5274.          if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
 5278.             if ( isolir == 1 ) then
 5280.                if ( n_tile > 0 ) then
 5281.                   if ( n_point_tile > 0 ) then
 5280.                      $I_L5280_92 = 0
 5280.                      if ( n_tile >= 4 ) then
 5280.                         $I_L5280_114 = 0
 5280. !dir$ blocking_size( 0, 0 )
 5280.                         do
 5281.                            $I_L5281_80 = 0
 5281. !dir$ ivdep
 5281. !dir$ blocking_size( 0, 0 )
 5281.                            do
 5282.                               $l_S1 = list_tile(1 + $I_L5281_80)
 5283.                               flux_up_tile(1 + $I_L5281_80, 1 + 4 * $I_L5280_114) = flux_up_tile(1 + $I_L5281_80, 1 + 4 * $I_L5280_114) + weight_incr * ( rho_alb(1 + $I_L5281_80, 1, 1 + 4 * $I_L5280_114) * flux_down_incr($l_S1) + ( rho_alb(1 + $I_L5281_80, 2, 1 + 4 * $I_L5280_114) + -rho_alb(1 + $I_L5281_80, 1, 1 + 4 * $I_L5280_114) ) * flux_direct_incr($l_S1) )
 5282.                               $l_S1 = list_tile(1 + $I_L5281_80)
 5283.                               flux_up_tile(1 + $I_L5281_80, 2 + 4 * $I_L5280_114) = flux_up_tile(1 + $I_L5281_80, 2 + 4 * $I_L5280_114) + weight_incr * ( rho_alb(1 + $I_L5281_80, 1, 2 + 4 * $I_L5280_114) * flux_down_incr($l_S1) + ( rho_alb(1 + $I_L5281_80, 2, 2 + 4 * $I_L5280_114) + -rho_alb(1 + $I_L5281_80, 1, 2 + 4 * $I_L5280_114) ) * flux_direct_incr($l_S1) )
 5282.                               $l_S1 = list_tile(1 + $I_L5281_80)
 5283.                               flux_up_tile(1 + $I_L5281_80, 3 + 4 * $I_L5280_114) = flux_up_tile(1 + $I_L5281_80, 3 + 4 * $I_L5280_114) + weight_incr * ( rho_alb(1 + $I_L5281_80, 1, 3 + 4 * $I_L5280_114) * flux_down_incr($l_S1) + ( rho_alb(1 + $I_L5281_80, 2, 3 + 4 * $I_L5280_114) + -rho_alb(1 + $I_L5281_80, 1, 3 + 4 * $I_L5280_114) ) * flux_direct_incr($l_S1) )
 5282.                               $l_S1 = list_tile(1 + $I_L5281_80)
 5283.                               flux_up_tile(1 + $I_L5281_80, 4 + 4 * $I_L5280_114) = flux_up_tile(1 + $I_L5281_80, 4 + 4 * $I_L5280_114) + weight_incr * ( rho_alb(1 + $I_L5281_80, 1, 4 + 4 * $I_L5280_114) * flux_down_incr($l_S1) + ( rho_alb(1 + $I_L5281_80, 2, 4 + 4 * $I_L5280_114) + -rho_alb(1 + $I_L5281_80, 1, 4 + 4 * $I_L5280_114) ) * flux_direct_incr($l_S1) )
 5289.                               $I_L5281_80 = 1 + $I_L5281_80
 5281.                               if ( $I_L5281_80 >= n_point_tile ) exit
 5281.                            enddo
 5290.                            $I_L5280_114 = 1 + $I_L5280_114
 5289.                            if ( $I_L5280_114 >= _rsh( n_tile, 2 ) ) exit
 5289.                         enddo
 5290.                         $I_L5280_92 = and( 0xfffffffffffffffcUL, n_tile )
 5290.                      endif
 5280.                      if ( $I_L5280_92 < n_tile ) then
 5280.                         $I_L5280_108 = 0
 5280. !dir$ blocking_size( 0, 0 )
 5280.                         do
 5281.                            $I_L5281_80 = 0
 5281. !dir$ ivdep
 5281. !dir$ blocking_size( 0, 0 )
 5281.                            do
 5282.                               $l_S1 = list_tile(1 + $I_L5281_80)
 5283.                               flux_up_tile(1 + $I_L5281_80, $I_L5280_92 + $I_L5280_108 + 1) = flux_up_tile(1 + $I_L5281_80, $I_L5280_92 + $I_L5280_108 + 1) + weight_incr * ( rho_alb(1 + $I_L5281_80, 1, $I_L5280_92 + $I_L5280_108 + 1) * flux_down_incr($l_S1) + ( rho_alb(1 + $I_L5281_80, 2, $I_L5280_92 + $I_L5280_108 + 1) + -rho_alb(1 + $I_L5281_80, 1, $I_L5280_92 + $I_L5280_108 + 1) ) * flux_direct_incr($l_S1) )
 5289.                               $I_L5281_80 = 1 + $I_L5281_80
 5281.                               if ( $I_L5281_80 >= n_point_tile ) exit
 5281.                            enddo
 5290.                            $I_L5280_108 = 1 + $I_L5280_108
 5289.                            if ( $I_L5280_108 >= n_tile + -$I_L5280_92 ) exit
 5289.                         enddo
 5289.                      endif
 5289.                   endif
 5289.                endif
 5292.                if ( l_blue_flux_surf ) then
 5293.                   if ( n_tile > 0 ) then
 5294.                      if ( n_point_tile > 0 ) then
 5293.                         $I_L5293_94 = 0
 5293.                         if ( n_tile >= 4 ) then
 5293.                            $I_L5293_116 = 0
 5293. !dir$ blocking_size( 0, 0 )
 5293.                            do
 5294.                               $I_L5294_82 = 0
 5294. !dir$ ivdep
 5294. !dir$ blocking_size( 0, 0 )
 5294.                               do
 5295.                                  $l_S4 = list_tile(1 + $I_L5294_82)
 5296.                                  flux_up_blue_tile(1 + $I_L5294_82, 1 + 4 * $I_L5293_116) = flux_up_blue_tile(1 + $I_L5294_82, 1 + 4 * $I_L5293_116) + weight_blue_incr * ( rho_alb(1 + $I_L5294_82, 1, 1 + 4 * $I_L5293_116) * flux_down_incr($l_S4) + ( rho_alb(1 + $I_L5294_82, 2, 1 + 4 * $I_L5293_116) + -rho_alb(1 + $I_L5294_82, 1, 1 + 4 * $I_L5293_116) ) * flux_direct_incr($l_S4) )
 5295.                                  $l_S4 = list_tile(1 + $I_L5294_82)
 5296.                                  flux_up_blue_tile(1 + $I_L5294_82, 2 + 4 * $I_L5293_116) = flux_up_blue_tile(1 + $I_L5294_82, 2 + 4 * $I_L5293_116) + weight_blue_incr * ( rho_alb(1 + $I_L5294_82, 1, 2 + 4 * $I_L5293_116) * flux_down_incr($l_S4) + ( rho_alb(1 + $I_L5294_82, 2, 2 + 4 * $I_L5293_116) + -rho_alb(1 + $I_L5294_82, 1, 2 + 4 * $I_L5293_116) ) * flux_direct_incr($l_S4) )
 5295.                                  $l_S4 = list_tile(1 + $I_L5294_82)
 5296.                                  flux_up_blue_tile(1 + $I_L5294_82, 3 + 4 * $I_L5293_116) = flux_up_blue_tile(1 + $I_L5294_82, 3 + 4 * $I_L5293_116) + weight_blue_incr * ( rho_alb(1 + $I_L5294_82, 1, 3 + 4 * $I_L5293_116) * flux_down_incr($l_S4) + ( rho_alb(1 + $I_L5294_82, 2, 3 + 4 * $I_L5293_116) + -rho_alb(1 + $I_L5294_82, 1, 3 + 4 * $I_L5293_116) ) * flux_direct_incr($l_S4) )
 5295.                                  $l_S4 = list_tile(1 + $I_L5294_82)
 5296.                                  flux_up_blue_tile(1 + $I_L5294_82, 4 + 4 * $I_L5293_116) = flux_up_blue_tile(1 + $I_L5294_82, 4 + 4 * $I_L5293_116) + weight_blue_incr * ( rho_alb(1 + $I_L5294_82, 1, 4 + 4 * $I_L5293_116) * flux_down_incr($l_S4) + ( rho_alb(1 + $I_L5294_82, 2, 4 + 4 * $I_L5293_116) + -rho_alb(1 + $I_L5294_82, 1, 4 + 4 * $I_L5293_116) ) * flux_direct_incr($l_S4) )
 5303.                                  $I_L5294_82 = 1 + $I_L5294_82
 5294.                                  if ( $I_L5294_82 >= n_point_tile ) exit
 5294.                               enddo
 5304.                               $I_L5293_116 = 1 + $I_L5293_116
 5303.                               if ( $I_L5293_116 >= _rsh( n_tile, 2 ) ) exit
 5303.                            enddo
 5304.                            $I_L5293_94 = and( 0xfffffffffffffffcUL, n_tile )
 5304.                         endif
 5293.                         if ( $I_L5293_94 < n_tile ) then
 5293.                            $I_L5293_111 = 0
 5293. !dir$ blocking_size( 0, 0 )
 5293.                            do
 5294.                               $I_L5294_82 = 0
 5294. !dir$ ivdep
 5294. !dir$ blocking_size( 0, 0 )
 5294.                               do
 5295.                                  $l_S4 = list_tile(1 + $I_L5294_82)
 5296.                                  flux_up_blue_tile(1 + $I_L5294_82, $I_L5293_94 + $I_L5293_111 + 1) = flux_up_blue_tile(1 + $I_L5294_82, $I_L5293_94 + $I_L5293_111 + 1) + weight_blue_incr * ( rho_alb(1 + $I_L5294_82, 1, $I_L5293_94 + $I_L5293_111 + 1) * flux_down_incr($l_S4) + ( rho_alb(1 + $I_L5294_82, 2, $I_L5293_94 + $I_L5293_111 + 1) + -rho_alb(1 + $I_L5294_82, 1, $I_L5293_94 + $I_L5293_111 + 1) ) * flux_direct_incr($l_S4) )
 5303.                                  $I_L5294_82 = 1 + $I_L5294_82
 5294.                                  if ( $I_L5294_82 >= n_point_tile ) exit
 5294.                               enddo
 5304.                               $I_L5293_111 = 1 + $I_L5293_111
 5303.                               if ( $I_L5293_111 >= n_tile + -$I_L5293_94 ) exit
 5303.                            enddo
 5303.                         endif
 5303.                      endif
 5303.                   endif
 5303.                endif
 5307.             else if ( isolir == 2 ) then
 5309.                if ( n_tile > 0 ) then
 5310.                   if ( n_point_tile > 0 ) then
 5309.                      $I_L5309_90 = 0
 5309.                      if ( n_tile >= 4 ) then
 5309.                         $I_L5309_118 = 0
 5309. !dir$ blocking_size( 0, 0 )
 5309.                         do
 5310.                            $I_L5310_78 = 0
 5310. !dir$ ivdep
 5310. !dir$ blocking_size( 0, 0 )
 5310.                            do
 5311.                               $l_S7 = list_tile(1 + $I_L5310_78)
 5312.                               flux_up_tile(1 + $I_L5310_78, 1 + 4 * $I_L5309_118) = flux_up_tile(1 + $I_L5310_78, 1 + 4 * $I_L5309_118) + weight_incr * ( planck_flux_tile(1 + $I_L5310_78, 1 + 4 * $I_L5309_118) + rho_alb(1 + $I_L5310_78, 1, 1 + 4 * $I_L5309_118) * ( flux_down_incr($l_S7) + planck_flux_air($l_S7) + -planck_flux_tile(1 + $I_L5310_78, 1 + 4 * $I_L5309_118) ) )
 5311.                               $l_S7 = list_tile(1 + $I_L5310_78)
 5312.                               flux_up_tile(1 + $I_L5310_78, 2 + 4 * $I_L5309_118) = flux_up_tile(1 + $I_L5310_78, 2 + 4 * $I_L5309_118) + weight_incr * ( planck_flux_tile(1 + $I_L5310_78, 2 + 4 * $I_L5309_118) + rho_alb(1 + $I_L5310_78, 1, 2 + 4 * $I_L5309_118) * ( flux_down_incr($l_S7) + planck_flux_air($l_S7) + -planck_flux_tile(1 + $I_L5310_78, 2 + 4 * $I_L5309_118) ) )
 5311.                               $l_S7 = list_tile(1 + $I_L5310_78)
 5312.                               flux_up_tile(1 + $I_L5310_78, 3 + 4 * $I_L5309_118) = flux_up_tile(1 + $I_L5310_78, 3 + 4 * $I_L5309_118) + weight_incr * ( planck_flux_tile(1 + $I_L5310_78, 3 + 4 * $I_L5309_118) + rho_alb(1 + $I_L5310_78, 1, 3 + 4 * $I_L5309_118) * ( flux_down_incr($l_S7) + planck_flux_air($l_S7) + -planck_flux_tile(1 + $I_L5310_78, 3 + 4 * $I_L5309_118) ) )
 5311.                               $l_S7 = list_tile(1 + $I_L5310_78)
 5312.                               flux_up_tile(1 + $I_L5310_78, 4 + 4 * $I_L5309_118) = flux_up_tile(1 + $I_L5310_78, 4 + 4 * $I_L5309_118) + weight_incr * ( planck_flux_tile(1 + $I_L5310_78, 4 + 4 * $I_L5309_118) + rho_alb(1 + $I_L5310_78, 1, 4 + 4 * $I_L5309_118) * ( flux_down_incr($l_S7) + planck_flux_air($l_S7) + -planck_flux_tile(1 + $I_L5310_78, 4 + 4 * $I_L5309_118) ) )
 5317.                               $I_L5310_78 = 1 + $I_L5310_78
 5310.                               if ( $I_L5310_78 >= n_point_tile ) exit
 5310.                            enddo
 5318.                            $I_L5309_118 = 1 + $I_L5309_118
 5317.                            if ( $I_L5309_118 >= _rsh( n_tile, 2 ) ) exit
 5317.                         enddo
 5318.                         $I_L5309_90 = and( 0xfffffffffffffffcUL, n_tile )
 5318.                      endif
 5309.                      if ( $I_L5309_90 < n_tile ) then
 5309.                         $I_L5309_105 = 0
 5309. !dir$ blocking_size( 0, 0 )
 5309.                         do
 5310.                            $I_L5310_78 = 0
 5310. !dir$ ivdep
 5310. !dir$ blocking_size( 0, 0 )
 5310.                            do
 5311.                               $l_S7 = list_tile(1 + $I_L5310_78)
 5312.                               flux_up_tile(1 + $I_L5310_78, $I_L5309_90 + $I_L5309_105 + 1) = flux_up_tile(1 + $I_L5310_78, $I_L5309_90 + $I_L5309_105 + 1) + weight_incr * ( planck_flux_tile(1 + $I_L5310_78, $I_L5309_90 + $I_L5309_105 + 1) + rho_alb(1 + $I_L5310_78, 1, $I_L5309_90 + $I_L5309_105 + 1) * ( flux_down_incr($l_S7) + planck_flux_air($l_S7) + -planck_flux_tile(1 + $I_L5310_78, $I_L5309_90 + $I_L5309_105 + 1) ) )
 5317.                               $I_L5310_78 = 1 + $I_L5310_78
 5310.                               if ( $I_L5310_78 >= n_point_tile ) exit
 5310.                            enddo
 5318.                            $I_L5309_105 = 1 + $I_L5309_105
 5317.                            if ( $I_L5309_105 >= n_tile + -$I_L5309_90 ) exit
 5317.                         enddo
 5317.                      endif
 5317.                   endif
 5317.                endif
 5317.             endif
 5317.          else
 5321.             if ( i_angular_integration == 3 ) then
 5323.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$184,  _substr(t$183,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
 5326.                ierr = 1
 5326.             endif
 5326.          endif
 5331.       else if ( i_angular_integration == 1 ) then
 5331.          goto 10
 5331.          goto 20
 5331.       else if ( i_angular_integration == 2 ) then
 5331.    10    continue
 5339.          if ( isolir == 1 ) then
 5340.             if ( n_tile > 0 ) then
 5341.                if ( n_point_tile > 0 ) then
 5340.                   $I_L5340_86 = 0
 5340.                   if ( n_tile >= 4 ) then
 5340.                      $I_L5340_120 = 0
 5340. !dir$ blocking_size( 0, 0 )
 5340.                      do
 5341.                         $I_L5341_74 = 0
 5341. !dir$ ivdep
 5341. !dir$ blocking_size( 0, 0 )
 5341.                         do
 5342.                            $l_S10 = list_tile(1 + $I_L5341_74)
 5343.                            flux_up_tile(1 + $I_L5341_74, 1 + 4 * $I_L5340_120) = weight_incr * ( rho_alb(1 + $I_L5341_74, 1, 1 + 4 * $I_L5340_120) * flux_down_incr($l_S10) + ( rho_alb(1 + $I_L5341_74, 2, 1 + 4 * $I_L5340_120) + -rho_alb(1 + $I_L5341_74, 1, 1 + 4 * $I_L5340_120) ) * flux_direct_incr($l_S10) )
 5342.                            $l_S10 = list_tile(1 + $I_L5341_74)
 5343.                            flux_up_tile(1 + $I_L5341_74, 2 + 4 * $I_L5340_120) = weight_incr * ( rho_alb(1 + $I_L5341_74, 1, 2 + 4 * $I_L5340_120) * flux_down_incr($l_S10) + ( rho_alb(1 + $I_L5341_74, 2, 2 + 4 * $I_L5340_120) + -rho_alb(1 + $I_L5341_74, 1, 2 + 4 * $I_L5340_120) ) * flux_direct_incr($l_S10) )
 5342.                            $l_S10 = list_tile(1 + $I_L5341_74)
 5343.                            flux_up_tile(1 + $I_L5341_74, 3 + 4 * $I_L5340_120) = weight_incr * ( rho_alb(1 + $I_L5341_74, 1, 3 + 4 * $I_L5340_120) * flux_down_incr($l_S10) + ( rho_alb(1 + $I_L5341_74, 2, 3 + 4 * $I_L5340_120) + -rho_alb(1 + $I_L5341_74, 1, 3 + 4 * $I_L5340_120) ) * flux_direct_incr($l_S10) )
 5342.                            $l_S10 = list_tile(1 + $I_L5341_74)
 5343.                            flux_up_tile(1 + $I_L5341_74, 4 + 4 * $I_L5340_120) = weight_incr * ( rho_alb(1 + $I_L5341_74, 1, 4 + 4 * $I_L5340_120) * flux_down_incr($l_S10) + ( rho_alb(1 + $I_L5341_74, 2, 4 + 4 * $I_L5340_120) + -rho_alb(1 + $I_L5341_74, 1, 4 + 4 * $I_L5340_120) ) * flux_direct_incr($l_S10) )
 5348.                            $I_L5341_74 = 1 + $I_L5341_74
 5341.                            if ( $I_L5341_74 >= n_point_tile ) exit
 5341.                         enddo
 5349.                         $I_L5340_120 = 1 + $I_L5340_120
 5348.                         if ( $I_L5340_120 >= _rsh( n_tile, 2 ) ) exit
 5348.                      enddo
 5349.                      $I_L5340_86 = and( 0xfffffffffffffffcUL, n_tile )
 5349.                   endif
 5340.                   if ( $I_L5340_86 < n_tile ) then
 5340.                      $I_L5340_99 = 0
 5340. !dir$ blocking_size( 0, 0 )
 5340.                      do
 5341.                         $I_L5341_74 = 0
 5341. !dir$ ivdep
 5341. !dir$ blocking_size( 0, 0 )
 5341.                         do
 5342.                            $l_S10 = list_tile(1 + $I_L5341_74)
 5343.                            flux_up_tile(1 + $I_L5341_74, $I_L5340_86 + $I_L5340_99 + 1) = weight_incr * ( rho_alb(1 + $I_L5341_74, 1, $I_L5340_86 + $I_L5340_99 + 1) * flux_down_incr($l_S10) + ( rho_alb(1 + $I_L5341_74, 2, $I_L5340_86 + $I_L5340_99 + 1) + -rho_alb(1 + $I_L5341_74, 1, $I_L5340_86 + $I_L5340_99 + 1) ) * flux_direct_incr($l_S10) )
 5348.                            $I_L5341_74 = 1 + $I_L5341_74
 5341.                            if ( $I_L5341_74 >= n_point_tile ) exit
 5341.                         enddo
 5349.                         $I_L5340_99 = 1 + $I_L5340_99
 5348.                         if ( $I_L5340_99 >= n_tile + -$I_L5340_86 ) exit
 5348.                      enddo
 5348.                   endif
 5348.                endif
 5348.             endif
 5351.             if ( l_blue_flux_surf ) then
 5352.                if ( n_tile > 0 ) then
 5353.                   if ( n_point_tile > 0 ) then
 5352.                      $I_L5352_88 = 0
 5352.                      if ( n_tile >= 4 ) then
 5352.                         $I_L5352_122 = 0
 5352. !dir$ blocking_size( 0, 0 )
 5352.                         do
 5353.                            $I_L5353_76 = 0
 5353. !dir$ ivdep
 5353. !dir$ blocking_size( 0, 0 )
 5353.                            do
 5354.                               $l_S13 = list_tile(1 + $I_L5353_76)
 5355.                               flux_up_blue_tile(1 + $I_L5353_76, 1 + 4 * $I_L5352_122) = weight_blue_incr * ( rho_alb(1 + $I_L5353_76, 1, 1 + 4 * $I_L5352_122) * flux_down_incr($l_S13) + ( rho_alb(1 + $I_L5353_76, 2, 1 + 4 * $I_L5352_122) + -rho_alb(1 + $I_L5353_76, 1, 1 + 4 * $I_L5352_122) ) * flux_direct_incr($l_S13) )
 5354.                               $l_S13 = list_tile(1 + $I_L5353_76)
 5355.                               flux_up_blue_tile(1 + $I_L5353_76, 2 + 4 * $I_L5352_122) = weight_blue_incr * ( rho_alb(1 + $I_L5353_76, 1, 2 + 4 * $I_L5352_122) * flux_down_incr($l_S13) + ( rho_alb(1 + $I_L5353_76, 2, 2 + 4 * $I_L5352_122) + -rho_alb(1 + $I_L5353_76, 1, 2 + 4 * $I_L5352_122) ) * flux_direct_incr($l_S13) )
 5354.                               $l_S13 = list_tile(1 + $I_L5353_76)
 5355.                               flux_up_blue_tile(1 + $I_L5353_76, 3 + 4 * $I_L5352_122) = weight_blue_incr * ( rho_alb(1 + $I_L5353_76, 1, 3 + 4 * $I_L5352_122) * flux_down_incr($l_S13) + ( rho_alb(1 + $I_L5353_76, 2, 3 + 4 * $I_L5352_122) + -rho_alb(1 + $I_L5353_76, 1, 3 + 4 * $I_L5352_122) ) * flux_direct_incr($l_S13) )
 5354.                               $l_S13 = list_tile(1 + $I_L5353_76)
 5355.                               flux_up_blue_tile(1 + $I_L5353_76, 4 + 4 * $I_L5352_122) = weight_blue_incr * ( rho_alb(1 + $I_L5353_76, 1, 4 + 4 * $I_L5352_122) * flux_down_incr($l_S13) + ( rho_alb(1 + $I_L5353_76, 2, 4 + 4 * $I_L5352_122) + -rho_alb(1 + $I_L5353_76, 1, 4 + 4 * $I_L5352_122) ) * flux_direct_incr($l_S13) )
 5361.                               $I_L5353_76 = 1 + $I_L5353_76
 5353.                               if ( $I_L5353_76 >= n_point_tile ) exit
 5353.                            enddo
 5362.                            $I_L5352_122 = 1 + $I_L5352_122
 5361.                            if ( $I_L5352_122 >= _rsh( n_tile, 2 ) ) exit
 5361.                         enddo
 5362.                         $I_L5352_88 = and( 0xfffffffffffffffcUL, n_tile )
 5362.                      endif
 5352.                      if ( $I_L5352_88 < n_tile ) then
 5352.                         $I_L5352_102 = 0
 5352. !dir$ blocking_size( 0, 0 )
 5352.                         do
 5353.                            $I_L5353_76 = 0
 5353. !dir$ ivdep
 5353. !dir$ blocking_size( 0, 0 )
 5353.                            do
 5354.                               $l_S13 = list_tile(1 + $I_L5353_76)
 5355.                               flux_up_blue_tile(1 + $I_L5353_76, $I_L5352_88 + $I_L5352_102 + 1) = weight_blue_incr * ( rho_alb(1 + $I_L5353_76, 1, $I_L5352_88 + $I_L5352_102 + 1) * flux_down_incr($l_S13) + ( rho_alb(1 + $I_L5353_76, 2, $I_L5352_88 + $I_L5352_102 + 1) + -rho_alb(1 + $I_L5353_76, 1, $I_L5352_88 + $I_L5352_102 + 1) ) * flux_direct_incr($l_S13) )
 5361.                               $I_L5353_76 = 1 + $I_L5353_76
 5353.                               if ( $I_L5353_76 >= n_point_tile ) exit
 5353.                            enddo
 5362.                            $I_L5352_102 = 1 + $I_L5352_102
 5361.                            if ( $I_L5352_102 >= n_tile + -$I_L5352_88 ) exit
 5361.                         enddo
 5361.                      endif
 5361.                   endif
 5361.                endif
 5361.             endif
 5365.          else if ( isolir == 2 ) then
 5367.             if ( n_tile > 0 ) then
 5368.                if ( n_point_tile > 0 ) then
 5367.                   $I_L5367_84 = 0
 5367.                   if ( n_tile >= 4 ) then
 5367.                      $I_L5367_124 = 0
 5367. !dir$ blocking_size( 0, 0 )
 5367.                      do
 5368.                         $I_L5368_72 = 0
 5368. !dir$ ivdep
 5368. !dir$ blocking_size( 0, 0 )
 5368.                         do
 5369.                            $l_S16 = list_tile(1 + $I_L5368_72)
 5370.                            flux_up_tile(1 + $I_L5368_72, 1 + 4 * $I_L5367_124) = weight_incr * ( planck_flux_tile(1 + $I_L5368_72, 1 + 4 * $I_L5367_124) + rho_alb(1 + $I_L5368_72, 1, 1 + 4 * $I_L5367_124) * ( flux_down_incr($l_S16) + planck_flux_air($l_S16) + -planck_flux_tile(1 + $I_L5368_72, 1 + 4 * $I_L5367_124) ) )
 5369.                            $l_S16 = list_tile(1 + $I_L5368_72)
 5370.                            flux_up_tile(1 + $I_L5368_72, 2 + 4 * $I_L5367_124) = weight_incr * ( planck_flux_tile(1 + $I_L5368_72, 2 + 4 * $I_L5367_124) + rho_alb(1 + $I_L5368_72, 1, 2 + 4 * $I_L5367_124) * ( flux_down_incr($l_S16) + planck_flux_air($l_S16) + -planck_flux_tile(1 + $I_L5368_72, 2 + 4 * $I_L5367_124) ) )
 5369.                            $l_S16 = list_tile(1 + $I_L5368_72)
 5370.                            flux_up_tile(1 + $I_L5368_72, 3 + 4 * $I_L5367_124) = weight_incr * ( planck_flux_tile(1 + $I_L5368_72, 3 + 4 * $I_L5367_124) + rho_alb(1 + $I_L5368_72, 1, 3 + 4 * $I_L5367_124) * ( flux_down_incr($l_S16) + planck_flux_air($l_S16) + -planck_flux_tile(1 + $I_L5368_72, 3 + 4 * $I_L5367_124) ) )
 5369.                            $l_S16 = list_tile(1 + $I_L5368_72)
 5370.                            flux_up_tile(1 + $I_L5368_72, 4 + 4 * $I_L5367_124) = weight_incr * ( planck_flux_tile(1 + $I_L5368_72, 4 + 4 * $I_L5367_124) + rho_alb(1 + $I_L5368_72, 1, 4 + 4 * $I_L5367_124) * ( flux_down_incr($l_S16) + planck_flux_air($l_S16) + -planck_flux_tile(1 + $I_L5368_72, 4 + 4 * $I_L5367_124) ) )
 5375.                            $I_L5368_72 = 1 + $I_L5368_72
 5368.                            if ( $I_L5368_72 >= n_point_tile ) exit
 5368.                         enddo
 5376.                         $I_L5367_124 = 1 + $I_L5367_124
 5375.                         if ( $I_L5367_124 >= _rsh( n_tile, 2 ) ) exit
 5375.                      enddo
 5376.                      $I_L5367_84 = and( 0xfffffffffffffffcUL, n_tile )
 5376.                   endif
 5367.                   if ( $I_L5367_84 < n_tile ) then
 5367.                      $I_L5367_96 = 0
 5367. !dir$ blocking_size( 0, 0 )
 5367.                      do
 5368.                         $I_L5368_72 = 0
 5368. !dir$ ivdep
 5368. !dir$ blocking_size( 0, 0 )
 5368.                         do
 5369.                            $l_S16 = list_tile(1 + $I_L5368_72)
 5370.                            flux_up_tile(1 + $I_L5368_72, $I_L5367_84 + $I_L5367_96 + 1) = weight_incr * ( planck_flux_tile(1 + $I_L5368_72, $I_L5367_84 + $I_L5367_96 + 1) + rho_alb(1 + $I_L5368_72, 1, $I_L5367_84 + $I_L5367_96 + 1) * ( flux_down_incr($l_S16) + planck_flux_air($l_S16) + -planck_flux_tile(1 + $I_L5368_72, $I_L5367_84 + $I_L5367_96 + 1) ) )
 5375.                            $I_L5368_72 = 1 + $I_L5368_72
 5368.                            if ( $I_L5368_72 >= n_point_tile ) exit
 5368.                         enddo
 5376.                         $I_L5367_96 = 1 + $I_L5367_96
 5375.                         if ( $I_L5367_96 >= n_tile + -$I_L5367_84 ) exit
 5375.                      enddo
 5375.                   endif
 5375.                endif
 5375.             endif
 5375.          endif
 5375.          goto 20
 5375.       else if ( i_angular_integration == 3 ) then
 5382.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$186,  _substr(t$185,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
 5385.          ierr = 1
 5385.       else
 5385.    20    continue
 5391.          l_initial = .false.
 5391.       endif
 5398.       return
 5398.       end
 5398.       
 5541.       
 5541.       subroutine band_solver( n_matrix, n_equation, iu, il, a, b, x, rho, nd_matrix, nd_diagonal, nd_equation )
 5418.       t$188 = nd_matrix
 5418.       t$189 = nd_diagonal
 5418.       t$190 = nd_equation
 5455.       t$1691 = _zla( 0, nd_matrix )
 5418.       t$1692 = _zla( 0, nd_matrix )
 5455.       t$1693 = _zla( 0, nd_diagonal )
 5418.       t$1694 = _zla( 0, nd_matrix ) * _zla( 0, nd_diagonal )
 5455.       t$1695 = _zla( 0, nd_equation )
 5418.       t$1696 = _zla( 0, nd_matrix ) * _zla( 0, nd_diagonal ) * _zla( 0, nd_equation )
 5418.       t$1697 = _zla( 0, nd_matrix ) * _zla( 0, nd_equation )
 5482.       if ( 2 + -n_equation <= 0 ) then
 5482.          $I_L5482_108 = 0
 5482.          do
 5483.             if ( min( iu, ( n_equation + -$I_L5482_108 + -1 ) ) > 0 ) then
 5483.                $I_L5483_104 = 0
 5483.                do
 5484.                   if ( n_matrix > 0 ) then
 5484.                      $I_L5484_84 = 0
 5484. !dir$ ivdep
 5484.                      do
 5485.                         $rho_WR0_R0 = ( a(1 + $I_L5484_84, iu + -$I_L5483_104, n_equation + -$I_L5483_104 + -$I_L5482_108 + -1) * 1.0/a(1 + $I_L5484_84, 1 + iu, n_equation + -$I_L5482_108) )
 5485.                         rho(1 + $I_L5484_84) = $rho_WR0_R0
 5486.                         b(1 + $I_L5484_84, n_equation + -$I_L5483_104 + -$I_L5482_108 + -1) = b(1 + $I_L5484_84, n_equation + -$I_L5483_104 + -$I_L5482_108 + -1) + -( $rho_WR0_R0 * b(1 + $I_L5484_84, n_equation + -$I_L5482_108) )
 5487.                         $I_L5484_84 = 1 + $I_L5484_84
 5484.                         if ( $I_L5484_84 >= n_matrix ) exit
 5484.                      enddo
 5484.                   endif
 5488.                   if ( min( il, ( n_equation + -$I_L5482_108 + -1 ) ) > 0 ) then
 5489.                      if ( n_matrix > 0 ) then
 5488.                         $I_L5488_98 = 0
 5488. !dir$ blocking_size( 0, 0 )
 5488.                         do
 5489.                            $I_L5489_86 = 0
 5489. !dir$ ivdep
 5489. !dir$ blocking_size( 0, 0 )
 5489.                            do
 5490.                               a(1 + $I_L5489_86, iu + $I_L5488_98 + -$I_L5483_104 + 1, n_equation + -$I_L5483_104 + -$I_L5482_108 + -1) = a(1 + $I_L5489_86, iu + $I_L5488_98 + -$I_L5483_104 + 1, n_equation + -$I_L5483_104 + -$I_L5482_108 + -1) + -( rho(1 + $I_L5489_86) * a(1 + $I_L5489_86, iu + $I_L5488_98 + 2, n_equation + -$I_L5482_108) )
 5492.                               $I_L5489_86 = 1 + $I_L5489_86
 5489.                               if ( $I_L5489_86 >= n_matrix ) exit
 5489.                            enddo
 5493.                            $I_L5488_98 = 1 + $I_L5488_98
 5492.                            if ( $I_L5488_98 >= ( min( il, ( n_equation + -$I_L5482_108 + -1 ) ) ) ) exit
 5492.                         enddo
 5492.                      endif
 5492.                   endif
 5494.                   $I_L5483_104 = 1 + $I_L5483_104
 5493.                   if ( $I_L5483_104 >= ( min( iu, ( n_equation + -$I_L5482_108 + -1 ) ) ) ) exit
 5493.                enddo
 5493.             endif
 5495.             $I_L5482_108 = 1 + $I_L5482_108
 5494.             if ( $I_L5482_108 >= -1 + n_equation ) exit
 5494.          enddo
 5494.       endif
 5499.       if ( iu /= 2 ) then
 5495.          goto 10
 5495.       else if ( il == 2 ) then
 5505.          if ( n_matrix > 0 ) then
 5505.             $I_L5505_88 = 0
 5505. !dir$ ivdep
 5505.             do
 5506.                $x_WR0_R1 = ( b(1 + $I_L5505_88, 1) * 1.0/a(1 + $I_L5505_88, 3, 1) )
 5506.                x(1 + $I_L5505_88, 1) = $x_WR0_R1
 5510.                x(1 + $I_L5505_88, 2) = ( ( b(1 + $I_L5505_88, 2) + -( a(1 + $I_L5505_88, 4, 2) * $x_WR0_R1 ) ) * 1.0/a(1 + $I_L5505_88, 3, 2) )
 5507.                $I_L5505_88 = 1 + $I_L5505_88
 5505.                if ( $I_L5505_88 >= n_matrix ) exit
 5505.             enddo
 5505.          endif
 5513.          if ( -3 + n_equation >= 0 ) then
 5514.             if ( n_matrix > 0 ) then
 5514.                $SI_L5514_90_G1 = 0
 5514.                do
 5513.                   $I_L5513_100 = 0
 5513. !dir$ blocking_size( 0, 0 )
 5513.                   do
 5514.                      $I_L5514_110 = 0
 5514. !dir$ ivdep
 5514. !dir$ blocking_size( 256, 256 )
 5514.                      do
 5515.                         x($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 3 + $I_L5513_100) = ( ( b($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 3 + $I_L5513_100) + -( a($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 4, 3 + $I_L5513_100) * x($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 2 + $I_L5513_100) ) + -( a($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 5, 3 + $I_L5513_100) * x($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 1 + $I_L5513_100) ) ) * 1.0/a($I_L5514_110 + 256 * $SI_L5514_90_G1 + 1, 3, 3 + $I_L5513_100) )
 5514.                         $I_L5514_110 = 1 + $I_L5514_110
 5514.                         if ( $I_L5514_110 >= min( n_matrix, 256 + 256 * $SI_L5514_90_G1 ) + -256 * $SI_L5514_90_G1 ) exit
 5514.                      enddo
 5518.                      $I_L5513_100 = 1 + $I_L5513_100
 5518.                      if ( $I_L5513_100 >= -2 + n_equation ) exit
 5518.                   enddo
 5514.                   $SI_L5514_90_G1 = 1 + $SI_L5514_90_G1
 5517.                   if ( $SI_L5514_90_G1 >= _rsh( 255 + n_matrix, 8 ) ) exit
 5517.                enddo
 5517.             endif
 5517.          endif
 5517.       else
 5517.    10    continue
 5522.          if ( n_equation > 0 ) then
 5522.             $I_L5522_106 = 0
 5522.             do
 5523.                if ( n_matrix > 0 ) then
 5523.                   $I_L5523_92 = 0
 5523. !dir$ ivdep
 5523.                   do
 5524.                      x(1 + $I_L5523_92, 1 + $I_L5522_106) = b(1 + $I_L5523_92, 1 + $I_L5522_106)
 5525.                      $I_L5523_92 = 1 + $I_L5523_92
 5523.                      if ( $I_L5523_92 >= n_matrix ) exit
 5523.                   enddo
 5523.                endif
 5526.                if ( min( il, $I_L5522_106 ) > 0 ) then
 5527.                   if ( n_matrix > 0 ) then
 5526.                      $I_L5526_102 = 0
 5526. !dir$ blocking_size( 0, 0 )
 5526.                      do
 5527.                         $I_L5527_94 = 0
 5527. !dir$ ivdep
 5527. !dir$ blocking_size( 0, 0 )
 5527.                         do
 5528.                            x(1 + $I_L5527_94, 1 + $I_L5522_106) = x(1 + $I_L5527_94, 1 + $I_L5522_106) + -( a(1 + $I_L5527_94, iu + $I_L5526_102 + 2, 1 + $I_L5522_106) * x(1 + $I_L5527_94, $I_L5522_106 + -$I_L5526_102) )
 5529.                            $I_L5527_94 = 1 + $I_L5527_94
 5527.                            if ( $I_L5527_94 >= n_matrix ) exit
 5527.                         enddo
 5530.                         $I_L5526_102 = 1 + $I_L5526_102
 5529.                         if ( $I_L5526_102 >= ( min( il, $I_L5522_106 ) ) ) exit
 5529.                      enddo
 5529.                   endif
 5529.                endif
 5531.                if ( n_matrix > 0 ) then
 5531.                   $I_L5531_96 = 0
 5531. !dir$ ivdep
 5531.                   do
 5532.                      x(1 + $I_L5531_96, 1 + $I_L5522_106) = ( x(1 + $I_L5531_96, 1 + $I_L5522_106) * 1.0/a(1 + $I_L5531_96, 1 + iu, 1 + $I_L5522_106) )
 5533.                      $I_L5531_96 = 1 + $I_L5531_96
 5531.                      if ( $I_L5531_96 >= n_matrix ) exit
 5531.                   enddo
 5531.                endif
 5534.                $I_L5522_106 = 1 + $I_L5522_106
 5533.                if ( $I_L5522_106 >= n_equation ) exit
 5533.             enddo
 5533.          endif
 5533.       endif
 5541.       return
 5541.       end
 5541.       
 6479.       
 6479.       subroutine build_sph_matrix( i_sph_algorithm, euler_factor, n_profile, n_layer, ls_trunc, ms, n_red_eigensystem, cg_coeff, kappa, up_lm, isolir, i_direct, mu_0, uplm_sol, azim_factor, diff_planck, l_ir_source_quad, diff_planck_2, flux_down_inc, tau, omega, phase_fnc, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, cgk, d_planck_flux_surface, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, mu_v, a, b, c_ylm, weight_u, radiance, nd_profile, nd_radiance_profile, nd_layer, nd_viewing_level, nd_direction, nd_max_order, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range )
 5595.       t$199 = ( ls_trunc + -ms + 1 )
 5727.       t$1698 = _zla( 0, ( ls_trunc + -ms + 1 ) )
 5595.       t$200 = nd_max_order / 2
 5729.       t$1699 = _zla( 0, nd_max_order / 2 )
 5595.       t$1700 = _zla( 0, nd_max_order / 2 )
 5595.       t$1701 = _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 )
 5595.       t$195 = nd_profile
 5595.       t$202 = ( 1 + nd_max_order )
 5595.       t$203 = nd_direction
 5735.       t$1702 = _zla( 0, nd_profile )
 5595.       t$1703 = _zla( 0, nd_profile )
 5735.       t$1704 = _zla( 0, ( 1 + nd_max_order ) )
 5595.       t$1705 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) )
 5735.       t$1706 = _zla( 0, nd_direction )
 5595.       t$1707 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) ) * _zla( 0, nd_direction )
 5595.       t$196 = nd_layer
 5595.       t$1708 = 1 + nd_layer
 5710.       t$1709 = _zla( 0, 1 + nd_layer )
 5595.       t$1710 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
 5595.       t$198 = ( ls_trunc + -ms + 2 )
 5712.       t$1711 = _zla( 0, ( ls_trunc + -ms + 2 ) )
 5595.       t$1712 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) )
 5595.       t$1713 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
 5720.       t$1714 = _zla( 0, nd_layer )
 5595.       t$1715 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 5595.       t$197 = nd_max_order
 5595.       t$1716 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 5703.       t$1717 = _zla( 0, nd_max_order )
 5595.       t$1718 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_max_order )
 5595.       t$204 = nd_brdf_basis_fnc
 5749.       t$1719 = _zla( 0, nd_brdf_basis_fnc )
 5595.       t$1720 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 5595.       t$205 = nd_brdf_trunc / 2
 5595.       t$206 = nd_brdf_trunc
 5595.       t$1721 = _zla( 0, nd_brdf_basis_fnc )
 5595.       t$1722 = 1 + nd_brdf_trunc / 2
 5751.       t$1723 = _zla( 0, 1 + nd_brdf_trunc / 2 )
 5595.       t$1724 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 5595.       t$1725 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 5595.       t$1726 = 1 + nd_brdf_trunc
 5751.       t$1727 = _zla( 0, 1 + nd_brdf_trunc )
 5595.       t$1728 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
 5595.       t$1729 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 5595.       t$1730 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_brdf_basis_fnc )
 5595.       t$201 = ( 1 + nd_brdf_trunc / 2 )
 5732.       t$1731 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 5595.       t$1732 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 5595.       t$1733 = _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 5595.       t$207 = nd_viewing_level
 5767.       t$1734 = _zla( 0, nd_viewing_level )
 5595.       t$209 = nd_sph_equation
 5595.       t$210 = nd_sph_diagonal
 5787.       t$1735 = _zla( 0, nd_sph_equation )
 5595.       t$1736 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation )
 5787.       t$1737 = _zla( 0, nd_sph_diagonal )
 5595.       t$1738 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal )
 5595.       t$1739 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation )
 5595.       t$1740 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
 5595.       t$1741 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
 5595.       t$211 = nd_sph_cf_weight
 5595.       t$212 = nd_sph_u_range
 5791.       t$1742 = _zla( 0, nd_sph_cf_weight )
 5595.       t$1743 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight )
 5791.       t$1744 = _zla( 0, nd_sph_u_range )
 5595.       t$1745 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight ) * _zla( 0, nd_sph_u_range )
 5595.       t$208 = nd_radiance_profile
 5779.       t$1746 = _zla( 0, nd_radiance_profile )
 5595.       t$1747 = _zla( 0, nd_radiance_profile )
 5595.       t$1748 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_radiance_profile )
 5595.       t$1749 = _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_radiance_profile )
 5875.       t$1752 = 8 * _zla( 0, nd_profile )
 5595.       t$214 = ( 2 * nd_red_eigensystem )
 5595.       t$213 = nd_red_eigensystem
 5861.       t$1753 = _zla( 0, ( 2 * nd_red_eigensystem ) )
 5595.       t$1754 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
 5861.       t$1755 = _zla( 0, nd_red_eigensystem )
 5595.       t$1756 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem )
 5595.       t$1757 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 2
 5861.       t$1758 = 8 * _zla( 0, nd_profile )
 5861.       t$1760 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16
 5897.       t$1762 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile )
 5595.       t$1763 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem )
 5595.       t$1764 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2
 5859.       t$1765 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5859.       t$1767 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5892.       t$1768 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5892.       t$1770 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5894.       t$1771 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 ) + 8 * _zla( 0, nd_profile )
 5894.       t$1773 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 ) + 16 * _zla( 0, nd_profile )
 5595.       t$1774 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile )
 5595.       t$1775 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2
 5870.       t$1776 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 ) + 16 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
 5870.       t$1778 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 ) + 16 * _zla( 0, nd_profile )
 5868.       t$1779 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 )
 5868.       t$1781 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 )
 5595.       t$1782 = 1 + nd_max_order
 5854.       t$1783 = _zla( 0, 1 + nd_max_order )
 5595.       t$1784 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order )
 5854.       t$1785 = 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + 2 * _zla( 0, nd_profile ) ) + 7 ) / 8 )
 5854.       t$1787 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 )
 5856.       t$1788 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
 5856.       t$1790 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
 5595.       t$1791 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile )
 5873.       t$1792 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5873.       t$1794 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5866.       t$1795 = 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5866.       t$1797 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5595.       t$1798 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
 5901.       t$1799 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5901.       t$1801 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5888.       t$1802 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5888.       t$1804 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5595.       t$1750 = int( _alloc( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 5875.       t$1751 = t$1750
 5861.       t$1759 = t$1750 + 8 * _zla( 0, nd_profile )
 5897.       t$1761 = t$1750 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16
 5859.       t$1766 = t$1750 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5892.       t$1769 = t$1750 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5894.       t$1772 = t$1750 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 )
 5870.       t$1777 = t$1750 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 ) + 16 * _zla( 0, nd_profile )
 5868.       t$1780 = t$1750 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 )
 5854.       t$1786 = t$1750 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 )
 5856.       t$1789 = t$1750 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
 5873.       t$1793 = t$1750 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5866.       t$1796 = t$1750 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5901.       t$1800 = t$1750 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5888.       t$1803 = t$1750 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order ) * 8 + 8 * ( ( _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 16 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem ) * 16 + 12 * _zla( 0, nd_profile ) + 7 ) / 8 + 2 * _zla( 0, nd_profile ) + _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * 2 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 2 + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 5912.       $ie_S52 = 1
 5912.       if ( n_layer * n_red_eigensystem * 2 > 0 ) then
 5913.          if ( 6 * n_red_eigensystem > 0 ) then
 5914.             if ( n_profile > 0 ) then
 5913.                $I_L5913_1052 = 0
 5913.                do
 5912.                   $I_L5912_982 = 0
 5912.                   do
 5914.                      $I_L5914_866 = 0
 5914. !dir$ ivdep
 5914.                      do
 5915.                         a(1 + $I_L5914_866, 1 + $I_L5912_982, 1 + $I_L5913_1052) = 0.0
 5916.                         $I_L5914_866 = 1 + $I_L5914_866
 5914.                         if ( $I_L5914_866 >= n_profile ) exit
 5914.                      enddo
 5918.                      $I_L5912_982 = 1 + $I_L5912_982
 5916.                      if ( $I_L5912_982 >= ( n_layer * n_red_eigensystem * 2 ) ) exit
 5916.                   enddo
 5917.                   $I_L5913_1052 = 1 + $I_L5913_1052
 5917.                   if ( $I_L5913_1052 >= ( 6 * n_red_eigensystem ) ) exit
 5917.                enddo
 5917.             endif
 5917.          endif
 5918.          $ie_S52 = ( 1 + n_layer * n_red_eigensystem * 2 )
 5918.       endif
 5926.       $i_assign_level_S20 = 1
 5932.       $i_below_S41 = 1
 5937.       if ( ms == 0 ) then
 5938.          if ( n_profile > 0 ) then
 5938.             $I_L5938_868 = 0
 5938. !dir$ ivdep
 5938.             do
 5939.                $ss_WR0_R0 = 1.0 + -omega(1 + $I_L5938_868, 1)
 5939.                ss(1 + $I_L5938_868, 0) = $ss_WR0_R0
 5940.                ssrt(1 + $I_L5938_868, 0) = _sqrt( $ss_WR0_R0 )
 5941.                $I_L5938_868 = 1 + $I_L5938_868
 5938.                if ( $I_L5938_868 >= n_profile ) exit
 5938.             enddo
 5938.          endif
 5938.       endif
 5943.       if ( ls_trunc + -max( 1, ms ) >= 0 ) then
 5944.          if ( n_profile > 0 ) then
 5943.             $I_L5943_984 = 0
 5943.             if ( ls_trunc + -max( 1, ms ) + -3 >= 0 ) then
 5943.                $I_L5943_1156 = 0
 5943. !dir$ blocking_size( 0, 0 )
 5943.                do
 5944.                   $I_L5944_870 = 0
 5944. !dir$ ivdep
 5944. !dir$ blocking_size( 0, 0 )
 5944.                   do
 5945.                      $ss_WR0_R1 = 1.0 + -( omega(1 + $I_L5944_870, 1) * phase_fnc(1 + $I_L5944_870, 1, max( 1, ms ) + 4 * $I_L5943_1156) )
 5945.                      ss(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156) = $ss_WR0_R1
 5946.                      ssrt(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156) = _sqrt( $ss_WR0_R1 )
 5945.                      $ss_WR0_R1 = 1.0 + -( omega(1 + $I_L5944_870, 1) * phase_fnc(1 + $I_L5944_870, 1, max( 1, ms ) + 4 * $I_L5943_1156 + 1) )
 5945.                      ss(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156 + 1) = $ss_WR0_R1
 5946.                      ssrt(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156 + 1) = _sqrt( $ss_WR0_R1 )
 5945.                      $ss_WR0_R1 = 1.0 + -( omega(1 + $I_L5944_870, 1) * phase_fnc(1 + $I_L5944_870, 1, max( 1, ms ) + 4 * $I_L5943_1156 + 2) )
 5945.                      ss(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156 + 2) = $ss_WR0_R1
 5946.                      ssrt(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156 + 2) = _sqrt( $ss_WR0_R1 )
 5945.                      $ss_WR0_R1 = 1.0 + -( omega(1 + $I_L5944_870, 1) * phase_fnc(1 + $I_L5944_870, 1, max( 1, ms ) + 4 * $I_L5943_1156 + 3) )
 5945.                      ss(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156 + 3) = $ss_WR0_R1
 5946.                      ssrt(1 + $I_L5944_870, max( 1, ms ) + 4 * $I_L5943_1156 + 3) = _sqrt( $ss_WR0_R1 )
 5947.                      $I_L5944_870 = 1 + $I_L5944_870
 5944.                      if ( $I_L5944_870 >= n_profile ) exit
 5944.                   enddo
 5948.                   $I_L5943_1156 = 1 + $I_L5943_1156
 5947.                   if ( $I_L5943_1156 >= _rsh( ls_trunc + -max( 1, ms ) + 1, 2 ) ) exit
 5947.                enddo
 5948.                $I_L5943_984 = and( 0xfffffffffffffffcUL, ls_trunc + -max( 1, ms ) + 1 )
 5948.             endif
 5943.             if ( $I_L5943_984 < ls_trunc + -max( 1, ms ) + 1 ) then
 5943.                $I_L5943_1129 = 0
 5943. !dir$ blocking_size( 0, 0 )
 5943.                do
 5944.                   $I_L5944_870 = 0
 5944. !dir$ ivdep
 5944. !dir$ blocking_size( 0, 0 )
 5944.                   do
 5945.                      $ss_WR0_R1 = 1.0 + -( omega(1 + $I_L5944_870, 1) * phase_fnc(1 + $I_L5944_870, 1, $I_L5943_984 + $I_L5943_1129 + max( 1, ms )) )
 5945.                      ss(1 + $I_L5944_870, $I_L5943_984 + $I_L5943_1129 + max( 1, ms )) = $ss_WR0_R1
 5946.                      ssrt(1 + $I_L5944_870, $I_L5943_984 + $I_L5943_1129 + max( 1, ms )) = _sqrt( $ss_WR0_R1 )
 5947.                      $I_L5944_870 = 1 + $I_L5944_870
 5944.                      if ( $I_L5944_870 >= n_profile ) exit
 5944.                   enddo
 5948.                   $I_L5943_1129 = 1 + $I_L5943_1129
 5947.                   if ( $I_L5943_1129 >= ls_trunc + -max( 1, ms ) + -$I_L5943_984 + 1 ) exit
 5947.                enddo
 5947.             endif
 5947.          endif
 5947.       endif
 5951.       call eig_sys( n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff(1), ssrt(1, 0), mu(1, 1, 1), eig_vec(1, 1, 1, 1), nd_profile, nd_red_eigensystem, nd_max_order )
 5958.       if ( n_red_eigensystem > 0 ) then
 5959.          if ( n_profile > 0 ) then
 5958.             $I_L5958_986 = 0
 5958.             if ( n_red_eigensystem >= 4 ) then
 5958.                $I_L5958_1158 = 0
 5958. !dir$ blocking_size( 0, 0 )
 5958.                do
 5959.                   $I_L5959_872 = 0
 5959. !dir$ ivdep
 5959. !dir$ blocking_size( 0, 0 )
 5959.                   do
 5960.                      theta(1 + $I_L5959_872, 1 + 4 * $I_L5958_1158, 1) = _expn( -( tau(1 + $I_L5959_872, 1) * 1.0/mu(1 + $I_L5959_872, 1 + 4 * $I_L5958_1158, 1) ) )
 5960.                      theta(1 + $I_L5959_872, 2 + 4 * $I_L5958_1158, 1) = _expn( -( tau(1 + $I_L5959_872, 1) * 1.0/mu(1 + $I_L5959_872, 2 + 4 * $I_L5958_1158, 1) ) )
 5960.                      theta(1 + $I_L5959_872, 3 + 4 * $I_L5958_1158, 1) = _expn( -( tau(1 + $I_L5959_872, 1) * 1.0/mu(1 + $I_L5959_872, 3 + 4 * $I_L5958_1158, 1) ) )
 5960.                      theta(1 + $I_L5959_872, 4 + 4 * $I_L5958_1158, 1) = _expn( -( tau(1 + $I_L5959_872, 1) * 1.0/mu(1 + $I_L5959_872, 4 + 4 * $I_L5958_1158, 1) ) )
 5961.                      $I_L5959_872 = 1 + $I_L5959_872
 5959.                      if ( $I_L5959_872 >= n_profile ) exit
 5959.                   enddo
 5962.                   $I_L5958_1158 = 1 + $I_L5958_1158
 5961.                   if ( $I_L5958_1158 >= _rsh( n_red_eigensystem, 2 ) ) exit
 5961.                enddo
 5962.                $I_L5958_986 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
 5962.             endif
 5958.             if ( $I_L5958_986 < n_red_eigensystem ) then
 5958.                $I_L5958_1132 = 0
 5958. !dir$ blocking_size( 0, 0 )
 5958.                do
 5959.                   $I_L5959_872 = 0
 5959. !dir$ ivdep
 5959. !dir$ blocking_size( 0, 0 )
 5959.                   do
 5960.                      theta(1 + $I_L5959_872, $I_L5958_986 + $I_L5958_1132 + 1, 1) = _expn( -( tau(1 + $I_L5959_872, 1) * 1.0/mu(1 + $I_L5959_872, $I_L5958_986 + $I_L5958_1132 + 1, 1) ) )
 5961.                      $I_L5959_872 = 1 + $I_L5959_872
 5959.                      if ( $I_L5959_872 >= n_profile ) exit
 5959.                   enddo
 5962.                   $I_L5958_1132 = 1 + $I_L5958_1132
 5961.                   if ( $I_L5958_1132 >= n_red_eigensystem + -$I_L5958_986 ) exit
 5961.                enddo
 5961.             endif
 5961.          endif
 5961.       endif
 5965.       call layer_part_integ( n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff(1), mu(1, 1, 1), eig_vec(1, 1, 1, 1), theta(1, 1, 1), isolir, i_direct(1, 0), mu_0(1), uplm_sol(1, 1), diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), tau(1, 1), ss(1, 0), source_top(1, 1, 1), source_bottom(1, 1, 1), upm_c(1, 1), k_sol(1), z_sol(1, 1), q_0(1), q_1(1), nd_profile, nd_max_order, nd_red_eigensystem )
 5984.       if ( ls_trunc + -ms > 0 ) then
 5989.          if ( n_profile > 0 ) then
 5984.             $I_L5984_1030 = 0
 5984.             do
 5989.                $I_L5989_960 = 0
 5989. !dir$ ivdep
 5989.                do
 5990.                   b(1 + $I_L5989_960, 1 + $I_L5984_1030) = -5.0e-1 * source_top(1 + $I_L5989_960, 2 + 2 * $I_L5984_1030, 1)
 5991.                   $I_L5989_960 = 1 + $I_L5989_960
 5989.                   if ( $I_L5989_960 >= n_profile ) exit
 5989.                enddo
 6042.                $I_L5984_1030 = 1 + $I_L5984_1030
 6041.                if ( $I_L5984_1030 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
 6041.             enddo
 6041.          endif
 5996.          if ( ms == 0 ) then
 5997.             if ( n_profile > 0 ) then
 5984.                $I_L5984_1032 = 0
 5984.                if ( ( 1 + ls_trunc ) / 2 >= 4 ) then
 5984.                   $I_L5984_1160 = 0
 5984. !dir$ blocking_size( 0, 0 )
 5984.                   do
 5997.                      $SCA_kappa#1_U0 = kappa(1 + 4 * $I_L5984_1160, 1)
 5997.                      $SCA_kappa#2_U1 = kappa(2 + 4 * $I_L5984_1160, 1)
 5997.                      $SCA_kappa#3_U2 = kappa(3 + 4 * $I_L5984_1160, 1)
 5997.                      $SCA_kappa#4_U3 = kappa(4 + 4 * $I_L5984_1160, 1)
 5997.                      $I_L5997_962 = 0
 5997. !dir$ ivdep
 5997. !dir$ blocking_size( 0, 0 )
 5997.                      do
 5998.                         b(1 + $I_L5997_962, 1 + 4 * $I_L5984_1160) = b(1 + $I_L5997_962, 1 + 4 * $I_L5984_1160) + $SCA_kappa#1_U0 * ( 1.1283791670955126 * flux_down_inc(1 + $I_L5997_962) + -source_top(1 + $I_L5997_962, 1, 1) )
 5998.                         b(1 + $I_L5997_962, 2 + 4 * $I_L5984_1160) = b(1 + $I_L5997_962, 2 + 4 * $I_L5984_1160) + $SCA_kappa#2_U1 * ( 1.1283791670955126 * flux_down_inc(1 + $I_L5997_962) + -source_top(1 + $I_L5997_962, 1, 1) )
 5998.                         b(1 + $I_L5997_962, 3 + 4 * $I_L5984_1160) = b(1 + $I_L5997_962, 3 + 4 * $I_L5984_1160) + $SCA_kappa#3_U2 * ( 1.1283791670955126 * flux_down_inc(1 + $I_L5997_962) + -source_top(1 + $I_L5997_962, 1, 1) )
 5998.                         b(1 + $I_L5997_962, 4 + 4 * $I_L5984_1160) = b(1 + $I_L5997_962, 4 + 4 * $I_L5984_1160) + $SCA_kappa#4_U3 * ( 1.1283791670955126 * flux_down_inc(1 + $I_L5997_962) + -source_top(1 + $I_L5997_962, 1, 1) )
 6001.                         $I_L5997_962 = 1 + $I_L5997_962
 5997.                         if ( $I_L5997_962 >= n_profile ) exit
 5997.                      enddo
 6042.                      $I_L5984_1160 = 1 + $I_L5984_1160
 6041.                      if ( $I_L5984_1160 >= _rsh( ( 1 + ls_trunc ) / 2, 2 ) ) exit
 6041.                   enddo
 6042.                   $I_L5984_1032 = and( 0xfffffffffffffffcUL, ( 1 + ls_trunc ) / 2 )
 6042.                endif
 5984.                if ( $I_L5984_1032 < ( 1 + ls_trunc ) / 2 ) then
 5984.                   $I_L5984_1153 = 0
 5984. !dir$ blocking_size( 0, 0 )
 5984.                   do
 5997.                      $SCA_kappa_I2 = kappa($I_L5984_1032 + $I_L5984_1153 + 1, 1)
 5997.                      $I_L5997_962 = 0
 5997. !dir$ ivdep
 5997. !dir$ blocking_size( 0, 0 )
 5997.                      do
 5998.                         b(1 + $I_L5997_962, $I_L5984_1032 + $I_L5984_1153 + 1) = b(1 + $I_L5997_962, $I_L5984_1032 + $I_L5984_1153 + 1) + $SCA_kappa_I2 * ( 1.1283791670955126 * flux_down_inc(1 + $I_L5997_962) + -source_top(1 + $I_L5997_962, 1, 1) )
 6001.                         $I_L5997_962 = 1 + $I_L5997_962
 5997.                         if ( $I_L5997_962 >= n_profile ) exit
 5997.                      enddo
 6042.                      $I_L5984_1153 = 1 + $I_L5984_1153
 6041.                      if ( $I_L5984_1153 >= ( 1 + ls_trunc ) / 2 + -$I_L5984_1032 ) exit
 6041.                   enddo
 6041.                endif
 6041.             endif
 6041.          endif
 6003.          if ( ls_trunc + -ms + -max( 1, 3 + -2 * ms ) >= 0 ) then
 6004.             if ( n_profile > 0 ) then
 5984.                $I_L5984_1113 = 0
 5984.                do
 6003.                   $I_L6003_1101 = 0
 6003.                   do
 6004.                      $I_L6004_1092 = 0
 6004.                      do
 5984.                         $I_L5984_1066 = 0
 5984.                         if ( min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1113 ) + -8 * $I_L5984_1113 >= 4 ) then
 5984.                            $I_L5984_1180 = 0
 5984. !dir$ shortloop16
 5984. !dir$ blocking_size( 8, 8 )
 5984.                            do
 6003.                               $I_L6003_1040 = 0
 6003. !dir$ blocking_size( 32, 32 )
 6003.                               do
 6004.                                  $SCA_kappa#1_U4 = kappa(8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 1, ( max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101 + 1 ) / 2)
 6004.                                  $SCA_kappa#2_U5 = kappa(8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 2, ( max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101 + 1 ) / 2)
 6004.                                  $SCA_kappa#3_U6 = kappa(8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 3, ( max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101 + 1 ) / 2)
 6004.                                  $SCA_kappa#4_U7 = kappa(8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 4, ( max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101 + 1 ) / 2)
 6004.                                  $I_L6004_964 = 0
 6004. !dir$ ivdep
 6004. !dir$ blocking_size( 256, 256 )
 6004.                                  do
 6005.                                     b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 1) = b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 1) + -( $SCA_kappa#1_U4 * source_top($I_L6004_964 + 256 * $I_L6004_1092 + 1, max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101, 1) )
 6005.                                     b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 2) = b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 2) + -( $SCA_kappa#2_U5 * source_top($I_L6004_964 + 256 * $I_L6004_1092 + 1, max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101, 1) )
 6005.                                     b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 3) = b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 3) + -( $SCA_kappa#3_U6 * source_top($I_L6004_964 + 256 * $I_L6004_1092 + 1, max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101, 1) )
 6005.                                     b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 4) = b($I_L6004_964 + 256 * $I_L6004_1092 + 1, 8 * $I_L5984_1113 + 4 * $I_L5984_1180 + 4) + -( $SCA_kappa#4_U7 * source_top($I_L6004_964 + 256 * $I_L6004_1092 + 1, max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101, 1) )
 6004.                                     $I_L6004_964 = 1 + $I_L6004_964
 6004.                                     if ( $I_L6004_964 >= min( n_profile, 256 + 256 * $I_L6004_1092 ) + -256 * $I_L6004_1092 ) exit
 6004.                                  enddo
 6003.                                  $I_L6003_1040 = 1 + $I_L6003_1040
 6003.                                  if ( $I_L6003_1040 >= min( ( ls_trunc + -ms + -max( 1, 3 + -2 * ms ) + 2 ) / 2, 32 + 32 * $I_L6003_1101 ) + -32 * $I_L6003_1101 ) exit
 6003.                               enddo
 5984.                               $I_L5984_1180 = 1 + $I_L5984_1180
 6007.                               if ( $I_L5984_1180 >= _rsh( min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1113 ) + -8 * $I_L5984_1113, 2 ) ) exit
 6007.                            enddo
 5984.                            $I_L5984_1066 = and( 0xfffffffffffffffcUL, min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1113 ) + -8 * $I_L5984_1113 )
 5984.                         endif
 5984.                         if ( $I_L5984_1066 < min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1113 ) + -8 * $I_L5984_1113 ) then
 5984.                            $I_L5984_1174 = 0
 5984. !dir$ shortloop16
 5984. !dir$ blocking_size( 8, 8 )
 5984.                            do
 6003.                               $I_L6003_1040 = 0
 6003. !dir$ blocking_size( 32, 32 )
 6003.                               do
 6004.                                  $SCA_kappa_I3 = kappa($I_L5984_1066 + $I_L5984_1174 + 8 * $I_L5984_1113 + 1, ( max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101 + 1 ) / 2)
 6004.                                  $I_L6004_964 = 0
 6004. !dir$ ivdep
 6004. !dir$ blocking_size( 256, 256 )
 6004.                                  do
 6005.                                     b($I_L6004_964 + 256 * $I_L6004_1092 + 1, $I_L5984_1066 + $I_L5984_1174 + 8 * $I_L5984_1113 + 1) = b($I_L6004_964 + 256 * $I_L6004_1092 + 1, $I_L5984_1066 + $I_L5984_1174 + 8 * $I_L5984_1113 + 1) + -( $SCA_kappa_I3 * source_top($I_L6004_964 + 256 * $I_L6004_1092 + 1, max( 1, 3 + -2 * ms ) + 2 * $I_L6003_1040 + 64 * $I_L6003_1101, 1) )
 6004.                                     $I_L6004_964 = 1 + $I_L6004_964
 6004.                                     if ( $I_L6004_964 >= min( n_profile, 256 + 256 * $I_L6004_1092 ) + -256 * $I_L6004_1092 ) exit
 6004.                                  enddo
 6003.                                  $I_L6003_1040 = 1 + $I_L6003_1040
 6003.                                  if ( $I_L6003_1040 >= min( ( ls_trunc + -ms + -max( 1, 3 + -2 * ms ) + 2 ) / 2, 32 + 32 * $I_L6003_1101 ) + -32 * $I_L6003_1101 ) exit
 6003.                               enddo
 5984.                               $I_L5984_1174 = 1 + $I_L5984_1174
 6007.                               if ( $I_L5984_1174 >= min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1113 ) + -$I_L5984_1066 + -8 * $I_L5984_1113 ) exit
 6007.                            enddo
 6007.                         endif
 6004.                         $I_L6004_1092 = 1 + $I_L6004_1092
 6004.                         if ( $I_L6004_1092 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
 6004.                      enddo
 6003.                      $I_L6003_1101 = 1 + $I_L6003_1101
 6041.                      if ( $I_L6003_1101 >= 1 + max( 0, -1 + _rsh( 31 + ( ls_trunc + -ms + -max( 1, 3 + -2 * ms ) + 2 ) / 2, 5 ) ) ) exit
 6041.                   enddo
 5984.                   $I_L5984_1113 = 1 + $I_L5984_1113
 5984.                   if ( $I_L5984_1113 >= 1 + max( 0, -1 + _rsh( 7 + ( ls_trunc + -ms + 1 ) / 2, 3 ) ) ) exit
 5984.                enddo
 5984.             endif
 5984.          endif
 6012.          if ( n_red_eigensystem > 0 ) then
 6025.             if ( n_profile > 0 ) then
 5984.                $I_L5984_1069 = 0
 5984.                do
 6012.                   $I_L6012_1034 = 0
 6012.                   do
 6025.                      $I_L6025_967 = 0
 6025. !dir$ ivdep
 6025.                      do
 6026.                         a(1 + $I_L6025_967, 1 + $I_L5984_1069, $I_L6012_1034 + 3 * n_red_eigensystem + 1) = 5.0e-1 * eig_vec(1 + $I_L6025_967, 2 + 2 * $I_L5984_1069, 1 + $I_L6012_1034, 1)
 6027.                         $I_L6025_967 = 1 + $I_L6025_967
 6025.                         if ( $I_L6025_967 >= n_profile ) exit
 6025.                      enddo
 6041.                      $I_L6012_1034 = 1 + $I_L6012_1034
 6040.                      if ( $I_L6012_1034 >= n_red_eigensystem ) exit
 6040.                   enddo
 6042.                   $I_L5984_1069 = 1 + $I_L5984_1069
 6041.                   if ( $I_L5984_1069 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
 6041.                enddo
 5984.                $I_L5984_1127 = 0
 5984.                do
 6012.                   $I_L6012_1125 = 0
 6012.                   do
 6028.                      $I_L6028_1115 = 0
 6028.                      do
 6030.                         $I_L6030_1103 = 0
 6030.                         do
 5984.                            $I_L5984_1094 = 0
 5984.                            if ( min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1127 ) + -8 * $I_L5984_1127 >= 4 ) then
 5984.                               $I_L5984_1187 = 0
 5984. !dir$ shortloop16
 5984. !dir$ blocking_size( 8, 8 )
 5984.                               do
 6012.                                  $I_L6012_1071 = 0
 6012. !dir$ shortloop16
 6012. !dir$ blocking_size( 8, 8 )
 6012.                                  do
 6028.                                     $I_L6028_1043 = 0
 6028. !dir$ shortloop16
 6028. !dir$ blocking_size( 8, 8 )
 6028.                                     do
 6030.                                        $SCA_kappa#1_U8 = kappa(8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 1, $I_L6028_1043 + 8 * $I_L6028_1115 + 1)
 6030.                                        $SCA_kappa#2_U9 = kappa(8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 2, $I_L6028_1043 + 8 * $I_L6028_1115 + 1)
 6030.                                        $SCA_kappa#3_U10 = kappa(8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 3, $I_L6028_1043 + 8 * $I_L6028_1115 + 1)
 6030.                                        $SCA_kappa#4_U11 = kappa(8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 4, $I_L6028_1043 + 8 * $I_L6028_1115 + 1)
 6030.                                        $I_L6030_969 = 0
 6030. !dir$ ivdep
 6030. !dir$ blocking_size( 256, 256 )
 6030.                                        do
 6031.                                           a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 1, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) = a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 1, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) + $SCA_kappa#1_U8 * eig_vec($I_L6030_969 + 256 * $I_L6030_1103 + 1, 2 * $I_L6028_1043 + 16 * $I_L6028_1115 + 1, $I_L6012_1071 + 8 * $I_L6012_1125 + 1, 1)
 6031.                                           a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 2, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) = a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 2, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) + $SCA_kappa#2_U9 * eig_vec($I_L6030_969 + 256 * $I_L6030_1103 + 1, 2 * $I_L6028_1043 + 16 * $I_L6028_1115 + 1, $I_L6012_1071 + 8 * $I_L6012_1125 + 1, 1)
 6031.                                           a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 3, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) = a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 3, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) + $SCA_kappa#3_U10 * eig_vec($I_L6030_969 + 256 * $I_L6030_1103 + 1, 2 * $I_L6028_1043 + 16 * $I_L6028_1115 + 1, $I_L6012_1071 + 8 * $I_L6012_1125 + 1, 1)
 6031.                                           a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 4, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) = a($I_L6030_969 + 256 * $I_L6030_1103 + 1, 8 * $I_L5984_1127 + 4 * $I_L5984_1187 + 4, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) + $SCA_kappa#4_U11 * eig_vec($I_L6030_969 + 256 * $I_L6030_1103 + 1, 2 * $I_L6028_1043 + 16 * $I_L6028_1115 + 1, $I_L6012_1071 + 8 * $I_L6012_1125 + 1, 1)
 6030.                                           $I_L6030_969 = 1 + $I_L6030_969
 6030.                                           if ( $I_L6030_969 >= min( n_profile, 256 + 256 * $I_L6030_1103 ) + -256 * $I_L6030_1103 ) exit
 6030.                                        enddo
 6028.                                        $I_L6028_1043 = 1 + $I_L6028_1043
 6028.                                        if ( $I_L6028_1043 >= min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L6028_1115 ) + -8 * $I_L6028_1115 ) exit
 6028.                                     enddo
 6012.                                     $I_L6012_1071 = 1 + $I_L6012_1071
 6034.                                     if ( $I_L6012_1071 >= min( n_red_eigensystem, 8 + 8 * $I_L6012_1125 ) + -8 * $I_L6012_1125 ) exit
 6034.                                  enddo
 5984.                                  $I_L5984_1187 = 1 + $I_L5984_1187
 5984.                                  if ( $I_L5984_1187 >= _rsh( min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1127 ) + -8 * $I_L5984_1127, 2 ) ) exit
 5984.                               enddo
 5984.                               $I_L5984_1094 = and( 0xfffffffffffffffcUL, min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1127 ) + -8 * $I_L5984_1127 )
 5984.                            endif
 5984.                            if ( $I_L5984_1094 < min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1127 ) + -8 * $I_L5984_1127 ) then
 5984.                               $I_L5984_1184 = 0
 5984. !dir$ shortloop16
 5984. !dir$ blocking_size( 8, 8 )
 5984.                               do
 6012.                                  $I_L6012_1071 = 0
 6012. !dir$ shortloop16
 6012. !dir$ blocking_size( 8, 8 )
 6012.                                  do
 6028.                                     $I_L6028_1043 = 0
 6028. !dir$ shortloop16
 6028. !dir$ blocking_size( 8, 8 )
 6028.                                     do
 6030.                                        $SCA_kappa_I4 = kappa($I_L5984_1094 + $I_L5984_1184 + 8 * $I_L5984_1127 + 1, $I_L6028_1043 + 8 * $I_L6028_1115 + 1)
 6030.                                        $I_L6030_969 = 0
 6030. !dir$ ivdep
 6030. !dir$ blocking_size( 256, 256 )
 6030.                                        do
 6031.                                           a($I_L6030_969 + 256 * $I_L6030_1103 + 1, $I_L5984_1094 + $I_L5984_1184 + 8 * $I_L5984_1127 + 1, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) = a($I_L6030_969 + 256 * $I_L6030_1103 + 1, $I_L5984_1094 + $I_L5984_1184 + 8 * $I_L5984_1127 + 1, $I_L6012_1071 + 3 * n_red_eigensystem + 8 * $I_L6012_1125 + 1) + $SCA_kappa_I4 * eig_vec($I_L6030_969 + 256 * $I_L6030_1103 + 1, 2 * $I_L6028_1043 + 16 * $I_L6028_1115 + 1, $I_L6012_1071 + 8 * $I_L6012_1125 + 1, 1)
 6030.                                           $I_L6030_969 = 1 + $I_L6030_969
 6030.                                           if ( $I_L6030_969 >= min( n_profile, 256 + 256 * $I_L6030_1103 ) + -256 * $I_L6030_1103 ) exit
 6030.                                        enddo
 6028.                                        $I_L6028_1043 = 1 + $I_L6028_1043
 6028.                                        if ( $I_L6028_1043 >= min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L6028_1115 ) + -8 * $I_L6028_1115 ) exit
 6028.                                     enddo
 6012.                                     $I_L6012_1071 = 1 + $I_L6012_1071
 6034.                                     if ( $I_L6012_1071 >= min( n_red_eigensystem, 8 + 8 * $I_L6012_1125 ) + -8 * $I_L6012_1125 ) exit
 6034.                                  enddo
 5984.                                  $I_L5984_1184 = 1 + $I_L5984_1184
 5984.                                  if ( $I_L5984_1184 >= min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1127 ) + -$I_L5984_1094 + -8 * $I_L5984_1127 ) exit
 5984.                               enddo
 5984.                            endif
 6030.                            $I_L6030_1103 = 1 + $I_L6030_1103
 6040.                            if ( $I_L6030_1103 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
 6040.                         enddo
 6028.                         $I_L6028_1115 = 1 + $I_L6028_1115
 6028.                         if ( $I_L6028_1115 >= 1 + max( 0, -1 + _rsh( 7 + ( ls_trunc + -ms + 1 ) / 2, 3 ) ) ) exit
 6028.                      enddo
 6012.                      $I_L6012_1125 = 1 + $I_L6012_1125
 6041.                      if ( $I_L6012_1125 >= 1 + max( 0, -1 + _rsh( 7 + n_red_eigensystem, 3 ) ) ) exit
 6041.                   enddo
 5984.                   $I_L5984_1127 = 1 + $I_L5984_1127
 5984.                   if ( $I_L5984_1127 >= 1 + max( 0, -1 + _rsh( 7 + ( ls_trunc + -ms + 1 ) / 2, 3 ) ) ) exit
 5984.                enddo
 5984.                $I_L5984_1117 = 0
 5984.                do
 6012.                   $I_L6012_1105 = 0
 6012.                   do
 6036.                      $I_L6036_1097 = 0
 6036.                      do
 5984.                         $I_L5984_1074 = 0
 5984.                         if ( min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1117 ) + -8 * $I_L5984_1117 >= 4 ) then
 5984.                            $I_L5984_1182 = 0
 5984. !dir$ shortloop16
 5984. !dir$ blocking_size( 8, 8 )
 5984.                            do
 6012.                               $I_L6012_1046 = 0
 6012. !dir$ shortloop16
 6012. !dir$ blocking_size( 8, 8 )
 6012.                               do
 6036.                                  $I_L6036_972 = 0
 6036. !dir$ ivdep
 6036. !dir$ loop_info (automatic) cache_nt( eig_vec )
 6036. !dir$ blocking_size( 256, 256 )
 6036.                                  do
 6037.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 1, $I_L6012_1046 + 2 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 1, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) + -eig_vec($I_L6036_972 + 256 * $I_L6036_1097 + 1, 16 * $I_L5984_1117 + 8 * $I_L5984_1182 + 2, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6039.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 1, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 1, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) * theta($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6037.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 2, $I_L6012_1046 + 2 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 2, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) + -eig_vec($I_L6036_972 + 256 * $I_L6036_1097 + 1, 16 * $I_L5984_1117 + 8 * $I_L5984_1182 + 4, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6039.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 2, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 2, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) * theta($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6037.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 3, $I_L6012_1046 + 2 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 3, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) + -eig_vec($I_L6036_972 + 256 * $I_L6036_1097 + 1, 16 * $I_L5984_1117 + 8 * $I_L5984_1182 + 6, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6039.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 3, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 3, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) * theta($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6037.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 4, $I_L6012_1046 + 2 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 4, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) + -eig_vec($I_L6036_972 + 256 * $I_L6036_1097 + 1, 16 * $I_L5984_1117 + 8 * $I_L5984_1182 + 8, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6039.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 4, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, 8 * $I_L5984_1117 + 4 * $I_L5984_1182 + 4, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) * theta($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6036.                                     $I_L6036_972 = 1 + $I_L6036_972
 6036.                                     if ( $I_L6036_972 >= min( n_profile, 256 + 256 * $I_L6036_1097 ) + -256 * $I_L6036_1097 ) exit
 6036.                                  enddo
 6012.                                  $I_L6012_1046 = 1 + $I_L6012_1046
 6012.                                  if ( $I_L6012_1046 >= min( n_red_eigensystem, 8 + 8 * $I_L6012_1105 ) + -8 * $I_L6012_1105 ) exit
 6012.                               enddo
 5984.                               $I_L5984_1182 = 1 + $I_L5984_1182
 6040.                               if ( $I_L5984_1182 >= _rsh( min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1117 ) + -8 * $I_L5984_1117, 2 ) ) exit
 6040.                            enddo
 5984.                            $I_L5984_1074 = and( 0xfffffffffffffffcUL, min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1117 ) + -8 * $I_L5984_1117 )
 5984.                         endif
 5984.                         if ( $I_L5984_1074 < min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1117 ) + -8 * $I_L5984_1117 ) then
 5984.                            $I_L5984_1177 = 0
 5984. !dir$ shortloop16
 5984. !dir$ blocking_size( 8, 8 )
 5984.                            do
 6012.                               $I_L6012_1046 = 0
 6012. !dir$ shortloop16
 6012. !dir$ blocking_size( 8, 8 )
 6012.                               do
 6036.                                  $I_L6036_972 = 0
 6036. !dir$ ivdep
 6036. !dir$ loop_info (automatic) cache_nt( eig_vec )
 6036. !dir$ blocking_size( 256, 256 )
 6036.                                  do
 6037.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L5984_1074 + $I_L5984_1177 + 8 * $I_L5984_1117 + 1, $I_L6012_1046 + 2 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L5984_1074 + $I_L5984_1177 + 8 * $I_L5984_1117 + 1, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) + -eig_vec($I_L6036_972 + 256 * $I_L6036_1097 + 1, 2 * $I_L5984_1074 + 16 * $I_L5984_1117 + 2 * $I_L5984_1177 + 2, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6039.                                     a($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L5984_1074 + $I_L5984_1177 + 8 * $I_L5984_1117 + 1, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) = a($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L5984_1074 + $I_L5984_1177 + 8 * $I_L5984_1117 + 1, $I_L6012_1046 + 3 * n_red_eigensystem + 8 * $I_L6012_1105 + 1) * theta($I_L6036_972 + 256 * $I_L6036_1097 + 1, $I_L6012_1046 + 8 * $I_L6012_1105 + 1, 1)
 6036.                                     $I_L6036_972 = 1 + $I_L6036_972
 6036.                                     if ( $I_L6036_972 >= min( n_profile, 256 + 256 * $I_L6036_1097 ) + -256 * $I_L6036_1097 ) exit
 6036.                                  enddo
 6012.                                  $I_L6012_1046 = 1 + $I_L6012_1046
 6012.                                  if ( $I_L6012_1046 >= min( n_red_eigensystem, 8 + 8 * $I_L6012_1105 ) + -8 * $I_L6012_1105 ) exit
 6012.                               enddo
 5984.                               $I_L5984_1177 = 1 + $I_L5984_1177
 6040.                               if ( $I_L5984_1177 >= min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L5984_1117 ) + -$I_L5984_1074 + -8 * $I_L5984_1117 ) exit
 6040.                            enddo
 6040.                         endif
 6036.                         $I_L6036_1097 = 1 + $I_L6036_1097
 6036.                         if ( $I_L6036_1097 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
 6036.                      enddo
 6012.                      $I_L6012_1105 = 1 + $I_L6012_1105
 6041.                      if ( $I_L6012_1105 >= 1 + max( 0, -1 + _rsh( 7 + n_red_eigensystem, 3 ) ) ) exit
 6041.                   enddo
 5984.                   $I_L5984_1117 = 1 + $I_L5984_1117
 5984.                   if ( $I_L5984_1117 >= 1 + max( 0, -1 + _rsh( 7 + ( ls_trunc + -ms + 1 ) / 2, 3 ) ) ) exit
 5984.                enddo
 5984.             endif
 5984.          endif
 5986.          $ie_S52 = ( 2 * ( ( ls_trunc + -ms + 1 ) / 2 ) ) / 2
 5986.       endif
 6046.       if ( i_sph_algorithm == 1 ) then
 6052.          $l_assign_S18 = 0 < n_viewing_level
 6053.          if ( 0 < n_viewing_level ) then
 6053.             $l_assign_S18 = i_rad_layer(1) == 1
 6053.          endif
 6055.          ipa$10442 = loc( eig_vec(1, 1, 1, 1) )
 6055.          eig_vec = _copyin( eig_vec(1, 1, 1, 1) )
 6055.          t$989 = ( ls_trunc + -ms + 1 )
 6055.          t$3292 = max( 0, ( ls_trunc + -ms + 1 ) )
 6055.          t$988 = nd_profile
 6055.          t$992 = nd_red_eigensystem
 6055.          t$3293 = max( 0, nd_profile )
 6055.          t$3294 = nd_profile
 6055.          t$3295 = max( 0, nd_red_eigensystem )
 6055.          t$3296 = ( nd_profile * nd_red_eigensystem )
 6055.          t$990 = ( 2 * nd_red_eigensystem )
 6055.          t$3297 = max( 0, ( 2 * nd_red_eigensystem ) )
 6055.          t$3298 = nd_profile * max( 0, ( 2 * nd_red_eigensystem ) )
 6055.          t$3299 = nd_profile * nd_red_eigensystem * max( 0, ( 2 * nd_red_eigensystem ) )
 6055.          t$3300 = nd_profile * max( 0, ( ls_trunc + -ms + 1 ) )
 6055.          t$3301 = nd_profile * max( 0, ( 2 * nd_red_eigensystem ) )
 6055.          t$991 = nd_max_order
 6055.          t$3302 = 1 + nd_max_order
 6055.          t$3303 = max( 0, 1 + nd_max_order )
 6055.          t$3304 = nd_profile * max( 0, 1 + nd_max_order )
 6055.          t$993 = nd_viewing_level
 6055.          t$3305 = max( 0, nd_viewing_level )
 6055.          t$3306 = nd_viewing_level * nd_profile
 6055.          t$3307 = nd_profile * nd_viewing_level * max( 0, ( ls_trunc + -ms + 1 ) )
 6055.          t$994 = nd_sph_cf_weight
 6055.          t$3308 = max( 0, nd_sph_cf_weight )
 6055.          t$3309 = nd_profile * nd_viewing_level * nd_sph_cf_weight
 6055.          t$3310 = nd_profile * nd_viewing_level * max( 0, ( 2 * nd_red_eigensystem ) ) * nd_sph_cf_weight
 6055.          t$3313 = nd_profile * nd_red_eigensystem * 8
 6055.          t$3314 = 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 )
 6055.          t$3316 = nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 )
 6055.          t$3317 = 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 )
 6055.          t$3319 = 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 )
 6055.          t$3320 = 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6055.          t$3322 = 8 * nd_profile + 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6055.          t$3311 = int( _alloc( 8 * nd_profile + 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 6055.          t$3312 = t$3311
 6055.          t$3315 = t$3311 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 )
 6055.          t$3318 = t$3311 + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 )
 6055.          t$3321 = t$3311 + 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6055.          if ( $l_assign_S18 ) then
 6055.             $SC_cg_coeff_I1 = cg_coeff(2)
 6055.             $SC_cg_coeff_I0 = cg_coeff(1)
 6055. !dir$ loop_info (automatic) cache_nt( i_rad_layer )
 6055.             do
 6055.                if ( n_red_eigensystem > 0 ) then
 6055.                   if ( n_profile > 0 ) then
 6055.                      $SCA_frac_rad_layer_I7 = frac_rad_layer($i_assign_level_S20)
 6055.                      $I_L6055_988 = 0
 6055.                      if ( n_red_eigensystem >= 4 ) then
 6055.                         $I_L6055_1162 = 0
 6055. !dir$ blocking_size( 0, 0 )
 6055.                         do
 6055.                            $I_L6055_874 = 0
 6055. !dir$ ivdep
 6055. !dir$ blocking_size( 0, 0 )
 6055.                            do
 6055.                               exp_minus(1 + $I_L6055_874, 1 + 4 * $I_L6055_1162) = _expn( -( $SCA_frac_rad_layer_I7 * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 1 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_plus(1 + $I_L6055_874, 1 + 4 * $I_L6055_1162) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I7 ) * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 1 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_minus(1 + $I_L6055_874, 2 + 4 * $I_L6055_1162) = _expn( -( $SCA_frac_rad_layer_I7 * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 2 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_plus(1 + $I_L6055_874, 2 + 4 * $I_L6055_1162) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I7 ) * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 2 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_minus(1 + $I_L6055_874, 3 + 4 * $I_L6055_1162) = _expn( -( $SCA_frac_rad_layer_I7 * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 3 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_plus(1 + $I_L6055_874, 3 + 4 * $I_L6055_1162) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I7 ) * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 3 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_minus(1 + $I_L6055_874, 4 + 4 * $I_L6055_1162) = _expn( -( $SCA_frac_rad_layer_I7 * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 4 + 4 * $I_L6055_1162, 1) ) )
 6055.                               exp_plus(1 + $I_L6055_874, 4 + 4 * $I_L6055_1162) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I7 ) * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, 4 + 4 * $I_L6055_1162, 1) ) )
 6055.                               $I_L6055_874 = 1 + $I_L6055_874
 6055.                               if ( $I_L6055_874 >= n_profile ) exit
 6055.                            enddo
 6055.                            $I_L6055_1162 = 1 + $I_L6055_1162
 6055.                            if ( $I_L6055_1162 >= _rsh( n_red_eigensystem, 2 ) ) exit
 6055.                         enddo
 6055.                         $I_L6055_988 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
 6055.                      endif
 6055.                      if ( $I_L6055_988 < n_red_eigensystem ) then
 6055.                         $I_L6055_1135 = 0
 6055. !dir$ blocking_size( 0, 0 )
 6055.                         do
 6055.                            $I_L6055_874 = 0
 6055. !dir$ ivdep
 6055. !dir$ blocking_size( 0, 0 )
 6055.                            do
 6055.                               exp_minus(1 + $I_L6055_874, $I_L6055_988 + $I_L6055_1135 + 1) = _expn( -( $SCA_frac_rad_layer_I7 * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, $I_L6055_988 + $I_L6055_1135 + 1, 1) ) )
 6055.                               exp_plus(1 + $I_L6055_874, $I_L6055_988 + $I_L6055_1135 + 1) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I7 ) * tau(1 + $I_L6055_874, 1) * 1.0/mu(1 + $I_L6055_874, $I_L6055_988 + $I_L6055_1135 + 1, 1) ) )
 6055.                               $I_L6055_874 = 1 + $I_L6055_874
 6055.                               if ( $I_L6055_874 >= n_profile ) exit
 6055.                            enddo
 6055.                            $I_L6055_1135 = 1 + $I_L6055_1135
 6055.                            if ( $I_L6055_1135 >= n_red_eigensystem + -$I_L6055_988 ) exit
 6055.                         enddo
 6055.                      endif
 6055.                   endif
 6055.                   if ( ls_trunc + -ms >= 0 ) then
 6055.                      if ( n_profile > 0 ) then
 6055.                         $I_L6055_1109 = 0
 6055.                         do
 6055.                            $I_L6055_1086 = 0
 6055.                            do
 6055.                               $I_L6055_1080 = 0
 6055. !dir$ shortloop16
 6055. !dir$ blocking_size( 16, 16 )
 6055.                               do
 6055.                                  $I_L6055_996 = 0
 6055. !dir$ shortloop16
 6055. !dir$ blocking_size( 16, 16 )
 6055.                                  do
 6055.                                     $m1ls_S40 = int( real( 1 + -2 * mod( ( $I_L6055_996 + 16 * $I_L6055_1086 ), 2 ), 8 ) )
 6055.                                     $I_L6055_894 = 0
 6055. !dir$ ivdep
 6055. !dir$ loop_info (automatic) cache_nt( weight_u )
 6055.                                     do
 6055.                                        weight_u(1 + $I_L6055_894, $i_assign_level_S20, $I_L6055_996 + 16 * $I_L6055_1086 + 1, $I_L6055_1080 + 16 * $I_L6055_1109 + 1) = eig_vec(1 + $I_L6055_894, $I_L6055_996 + 16 * $I_L6055_1086 + 1, $I_L6055_1080 + 16 * $I_L6055_1109 + 1) * exp_minus(1 + $I_L6055_894, $I_L6055_1080 + 16 * $I_L6055_1109 + 1) * $m1ls_S40
 6055.                                        weight_u(1 + $I_L6055_894, $i_assign_level_S20, $I_L6055_996 + 16 * $I_L6055_1086 + 1, n_red_eigensystem + $I_L6055_1080 + 16 * $I_L6055_1109 + 1) = eig_vec(1 + $I_L6055_894, $I_L6055_996 + 16 * $I_L6055_1086 + 1, $I_L6055_1080 + 16 * $I_L6055_1109 + 1) * exp_plus(1 + $I_L6055_894, $I_L6055_1080 + 16 * $I_L6055_1109 + 1)
 6055.                                        $I_L6055_894 = 1 + $I_L6055_894
 6055.                                        if ( $I_L6055_894 >= n_profile ) exit
 6055.                                     enddo
 6055.                                     $I_L6055_996 = 1 + $I_L6055_996
 6055.                                     if ( $I_L6055_996 >= min( ls_trunc + -ms + 1, 16 + 16 * $I_L6055_1086 ) + -16 * $I_L6055_1086 ) exit
 6055.                                  enddo
 6055.                                  $I_L6055_1080 = 1 + $I_L6055_1080
 6055.                                  if ( $I_L6055_1080 >= min( n_red_eigensystem, 16 + 16 * $I_L6055_1109 ) + -16 * $I_L6055_1109 ) exit
 6055.                               enddo
 6055.                               $I_L6055_1086 = 1 + $I_L6055_1086
 6055.                               if ( $I_L6055_1086 >= 1 + max( 0, -1 + _rsh( ls_trunc + -ms + 16, 4 ) ) ) exit
 6055.                            enddo
 6055.                            $I_L6055_1109 = 1 + $I_L6055_1109
 6055.                            if ( $I_L6055_1109 >= 1 + max( 0, -1 + _rsh( 15 + n_red_eigensystem, 4 ) ) ) exit
 6055.                         enddo
 6055.                      endif
 6055.                   endif
 6055.                endif
 6055.                if ( isolir == 1 ) then
 6055.                   if ( n_profile > 0 ) then
 6055.                      $SCA_frac_rad_layer_I6 = frac_rad_layer($i_assign_level_S20)
 6055.                      $I_L6055_876 = 0
 6055. !dir$ ivdep
 6055.                      do
 6055.                         x_m(1 + $I_L6055_876) = _expn( -( $SCA_frac_rad_layer_I6 * tau(1 + $I_L6055_876, 1) * 1.0/mu_0(1 + $I_L6055_876) ) )
 6055.                         $I_L6055_876 = 1 + $I_L6055_876
 6055.                         if ( $I_L6055_876 >= n_profile ) exit
 6055.                      enddo
 6055.                   endif
 6055.                   if ( ls_trunc + -ms >= 0 ) then
 6055.                      if ( n_profile > 0 ) then
 6055.                         $I_L6055_990 = 0
 6055.                         if ( ls_trunc + -ms + -3 >= 0 ) then
 6055.                            $I_L6055_1164 = 0
 6055. !dir$ blocking_size( 0, 0 )
 6055.                            do
 6055.                               $I_L6055_884 = 0
 6055. !dir$ ivdep
 6055. !dir$ blocking_size( 0, 0 )
 6055.                               do
 6055.                                  c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 1 + 4 * $I_L6055_1164) = c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 1 + 4 * $I_L6055_1164) + x_m(1 + $I_L6055_884) * z_sol(1 + $I_L6055_884, 1 + 4 * $I_L6055_1164)
 6055.                                  c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 2 + 4 * $I_L6055_1164) = c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 2 + 4 * $I_L6055_1164) + x_m(1 + $I_L6055_884) * z_sol(1 + $I_L6055_884, 2 + 4 * $I_L6055_1164)
 6055.                                  c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 3 + 4 * $I_L6055_1164) = c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 3 + 4 * $I_L6055_1164) + x_m(1 + $I_L6055_884) * z_sol(1 + $I_L6055_884, 3 + 4 * $I_L6055_1164)
 6055.                                  c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 4 + 4 * $I_L6055_1164) = c_ylm(1 + $I_L6055_884, $i_assign_level_S20, 4 + 4 * $I_L6055_1164) + x_m(1 + $I_L6055_884) * z_sol(1 + $I_L6055_884, 4 + 4 * $I_L6055_1164)
 6055.                                  $I_L6055_884 = 1 + $I_L6055_884
 6055.                                  if ( $I_L6055_884 >= n_profile ) exit
 6055.                               enddo
 6055.                               $I_L6055_1164 = 1 + $I_L6055_1164
 6055.                               if ( $I_L6055_1164 >= _rsh( ls_trunc + -ms + 1, 2 ) ) exit
 6055.                            enddo
 6055.                            $I_L6055_990 = and( 0xfffffffffffffffcUL, ls_trunc + -ms + 1 )
 6055.                         endif
 6055.                         if ( $I_L6055_990 < ls_trunc + -ms + 1 ) then
 6055.                            $I_L6055_1138 = 0
 6055. !dir$ blocking_size( 0, 0 )
 6055.                            do
 6055.                               $I_L6055_884 = 0
 6055. !dir$ ivdep
 6055. !dir$ blocking_size( 0, 0 )
 6055.                               do
 6055.                                  c_ylm(1 + $I_L6055_884, $i_assign_level_S20, $I_L6055_990 + $I_L6055_1138 + 1) = c_ylm(1 + $I_L6055_884, $i_assign_level_S20, $I_L6055_990 + $I_L6055_1138 + 1) + x_m(1 + $I_L6055_884) * z_sol(1 + $I_L6055_884, $I_L6055_990 + $I_L6055_1138 + 1)
 6055.                                  $I_L6055_884 = 1 + $I_L6055_884
 6055.                                  if ( $I_L6055_884 >= n_profile ) exit
 6055.                               enddo
 6055.                               $I_L6055_1138 = 1 + $I_L6055_1138
 6055.                               if ( $I_L6055_1138 >= ls_trunc + -ms + -$I_L6055_990 + 1 ) exit
 6055.                            enddo
 6055.                         endif
 6055.                      endif
 6055.                   endif
 6055.                   if ( n_profile > 0 ) then
 6055.                      $I_L6055_886 = 0
 6055. !dir$ ivdep
 6055.                      do
 6055.                         x_m(1 + $I_L6055_886) = upm_c(1 + $I_L6055_886, k_sol(1 + $I_L6055_886)) * exp_minus(1 + $I_L6055_886, k_sol(1 + $I_L6055_886))
 6055.                         $I_L6055_886 = 1 + $I_L6055_886
 6055.                         if ( $I_L6055_886 >= n_profile ) exit
 6055.                      enddo
 6055.                   endif
 6055.                   if ( ls_trunc + -ms >= 0 ) then
 6055.                      if ( n_profile > 0 ) then
 6055.                         $I_L6055_992 = 0
 6055. !dir$ ivdep
 6055.                         do
 6055.                            $m1ls_S27 = int( real( 1 + -2 * mod( $I_L6055_992, 2 ), 8 ) )
 6055.                            $I_L6055_888 = 0
 6055. !dir$ unroll 4
 6055.                            do
 6055.                               c_ylm(1 + $I_L6055_888, $i_assign_level_S20, 1 + $I_L6055_992) = c_ylm(1 + $I_L6055_888, $i_assign_level_S20, 1 + $I_L6055_992) + x_m(1 + $I_L6055_888) * $m1ls_S27 * eig_vec(1 + $I_L6055_888, 1 + $I_L6055_992, k_sol(1 + $I_L6055_888))
 6055.                               $I_L6055_888 = 1 + $I_L6055_888
 6055.                               if ( $I_L6055_888 >= n_profile ) exit
 6055.                            enddo
 6055.                            $I_L6055_992 = 1 + $I_L6055_992
 6055.                            if ( $I_L6055_992 >= ls_trunc + -ms + 1 ) exit
 6055.                         enddo
 6055.                      endif
 6055.                   endif
 6055.                else if ( isolir == 2 ) then
 6055.                   if ( ms == 0 ) then
 6055.                      if ( l_ir_source_quad ) then
 6055.                         if ( n_profile > 0 ) then
 6055.                            $SCA_frac_rad_layer_I5 = frac_rad_layer($i_assign_level_S20)
 6055.                            $I_L6055_878 = 0
 6055. !dir$ ivdep
 6055.                            do
 6055.                               c_ylm(1 + $I_L6055_878, $i_assign_level_S20, 1) = c_ylm(1 + $I_L6055_878, $i_assign_level_S20, 1) + ( $SC_cg_coeff_I0 * q_1(1 + $I_L6055_878) * 1.0/ss(1 + $I_L6055_878, 0) )
 6055.                               c_ylm(1 + $I_L6055_878, $i_assign_level_S20, 2) = c_ylm(1 + $I_L6055_878, $i_assign_level_S20, 2) + q_0(1 + $I_L6055_878) + q_1(1 + $I_L6055_878) * ( -5.0e-1 + $SCA_frac_rad_layer_I5 )
 6055.                               $I_L6055_878 = 1 + $I_L6055_878
 6055.                               if ( $I_L6055_878 >= n_profile ) exit
 6055.                            enddo
 6055.                         endif
 6055.                         if ( ls_trunc > 1 ) then
 6055.                            if ( n_profile > 0 ) then
 6055.                               $I_L6055_880 = 0
 6055. !dir$ ivdep
 6055.                               do
 6055.                                  c_ylm(1 + $I_L6055_880, $i_assign_level_S20, 3) = ( c_ylm(1 + $I_L6055_880, $i_assign_level_S20, 3) * $SC_cg_coeff_I1 * q_1(1 + $I_L6055_880) * 1.0/ss(1 + $I_L6055_880, 2) )
 6055.                                  $I_L6055_880 = 1 + $I_L6055_880
 6055.                                  if ( $I_L6055_880 >= n_profile ) exit
 6055.                               enddo
 6055.                            endif
 6055.                         endif
 6055.                      else
 6055.                         if ( n_profile > 0 ) then
 6055.                            $I_L6055_882 = 0
 6055. !dir$ ivdep
 6055.                            do
 6055.                               c_ylm(1 + $I_L6055_882, $i_assign_level_S20, 2) = c_ylm(1 + $I_L6055_882, $i_assign_level_S20, 2) + q_0(1 + $I_L6055_882)
 6055.                               $I_L6055_882 = 1 + $I_L6055_882
 6055.                               if ( $I_L6055_882 >= n_profile ) exit
 6055.                            enddo
 6055.                         endif
 6055.                         if ( n_red_eigensystem > 0 ) then
 6055.                            $I_L6055_1054 = 0
 6055.                            do
 6055.                               if ( n_profile > 0 ) then
 6055.                                  $I_L6055_890 = 0
 6055. !dir$ ivdep
 6055.                                  do
 6055.                                     x_m(1 + $I_L6055_890) = upm_c(1 + $I_L6055_890, 1 + $I_L6055_1054) * exp_minus(1 + $I_L6055_890, 1 + $I_L6055_1054)
 6055.                                     x_p(1 + $I_L6055_890) = upm_c(1 + $I_L6055_890, n_red_eigensystem + $I_L6055_1054 + 1) * exp_plus(1 + $I_L6055_890, 1 + $I_L6055_1054)
 6055.                                     $I_L6055_890 = 1 + $I_L6055_890
 6055.                                     if ( $I_L6055_890 >= n_profile ) exit
 6055.                                  enddo
 6055.                               endif
 6055.                               if ( ls_trunc >= 0 ) then
 6055.                                  if ( n_profile > 0 ) then
 6055.                                     $I_L6055_994 = 0
 6055.                                     do
 6055.                                        $m1ls_S36 = int( real( 1 + -2 * mod( $I_L6055_994, 2 ), 8 ) )
 6055.                                        $I_L6055_892 = 0
 6055. !dir$ ivdep
 6055.                                        do
 6055.                                           c_ylm(1 + $I_L6055_892, $i_assign_level_S20, 1 + $I_L6055_994) = c_ylm(1 + $I_L6055_892, $i_assign_level_S20, 1 + $I_L6055_994) + ( x_m(1 + $I_L6055_892) * $m1ls_S36 + x_p(1 + $I_L6055_892) ) * eig_vec(1 + $I_L6055_892, 1 + $I_L6055_994, 1 + $I_L6055_1054)
 6055.                                           $I_L6055_892 = 1 + $I_L6055_892
 6055.                                           if ( $I_L6055_892 >= n_profile ) exit
 6055.                                        enddo
 6055.                                        $I_L6055_994 = 1 + $I_L6055_994
 6055.                                        if ( $I_L6055_994 >= 1 + ls_trunc ) exit
 6055.                                     enddo
 6055.                                  endif
 6055.                               endif
 6055.                               $I_L6055_1054 = 1 + $I_L6055_1054
 6055.                               if ( $I_L6055_1054 >= n_red_eigensystem ) exit
 6055.                            enddo
 6055.                         endif
 6055.                      endif
 6055.                   endif
 6055.                endif
 6055.                $i_assign_level_S20 = 1 + $i_assign_level_S20
 6055.                if ( $i_assign_level_S20 > n_viewing_level ) then
 6055.                   $l_assign_S18 = .false.
 6055.                else if ( i_rad_layer($i_assign_level_S20) > 1 ) then
 6055.                   $l_assign_S18 = .false.
 6055.                endif
 6055.                if ( $l_assign_S18 == 0 ) exit
 6055.             enddo
 6055.          endif
 6055.          _free( t$3311 )
 6055.          eig_vec(1, 1, 1, 1) = _copyout( eig_vec )
 6069.       else if ( i_sph_algorithm == 2 ) then
 6072.          ipa$10453 = 1
 6072.          call set_dirn_weights( n_profile, ms, ls_trunc, up_lm(1, 1, 1), n_direction, mu_v(1, 1), azim_factor(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), ipa$10453, n_red_eigensystem, mu(1, 1, 1), eig_vec(1, 1, 1, 1), isolir, z_sol(1, 1), mu_0(1), l_ir_source_quad, diff_planck(1, 1), upm_c(1, 1), k_sol(1), tau(1, 1), omega(1, 1), phase_fnc(1, 1, 1), weight_u(1, 1, 1, 1), radiance(1, 1, 1), nd_profile, nd_layer, nd_direction, nd_viewing_level, nd_red_eigensystem, nd_max_order )
 6072.       endif
 6102.       if ( -2 + n_layer >= 0 ) then
 6102.          $I_L6102_1121 = 0
 6102.          do
 6105.             $i_above_S51 = $i_below_S41
 6106.             $i_below_S41 = 3 + -$i_below_S41
 6110.             if ( ms == 0 ) then
 6111.                if ( n_profile > 0 ) then
 6111.                   $I_L6111_896 = 0
 6111. !dir$ ivdep
 6111.                   do
 6112.                      $ss_WR0_R2 = 1.0 + -omega(1 + $I_L6111_896, 2 + $I_L6102_1121)
 6112.                      ss(1 + $I_L6111_896, 0) = $ss_WR0_R2
 6113.                      ssrt(1 + $I_L6111_896, 0) = _sqrt( $ss_WR0_R2 )
 6114.                      $I_L6111_896 = 1 + $I_L6111_896
 6111.                      if ( $I_L6111_896 >= n_profile ) exit
 6111.                   enddo
 6111.                endif
 6111.             endif
 6116.             if ( ls_trunc + -max( 1, ms ) >= 0 ) then
 6117.                if ( n_profile > 0 ) then
 6116.                   $I_L6116_999 = 0
 6116.                   if ( ls_trunc + -max( 1, ms ) + -3 >= 0 ) then
 6116.                      $I_L6116_1166 = 0
 6116. !dir$ blocking_size( 0, 0 )
 6116.                      do
 6117.                         $I_L6117_898 = 0
 6117. !dir$ ivdep
 6117. !dir$ blocking_size( 0, 0 )
 6117.                         do
 6118.                            $ss_WR0_R3 = 1.0 + -( omega(1 + $I_L6117_898, 2 + $I_L6102_1121) * phase_fnc(1 + $I_L6117_898, 2 + $I_L6102_1121, max( 1, ms ) + 4 * $I_L6116_1166) )
 6118.                            ss(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166) = $ss_WR0_R3
 6119.                            ssrt(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166) = _sqrt( $ss_WR0_R3 )
 6118.                            $ss_WR0_R3 = 1.0 + -( omega(1 + $I_L6117_898, 2 + $I_L6102_1121) * phase_fnc(1 + $I_L6117_898, 2 + $I_L6102_1121, max( 1, ms ) + 4 * $I_L6116_1166 + 1) )
 6118.                            ss(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166 + 1) = $ss_WR0_R3
 6119.                            ssrt(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166 + 1) = _sqrt( $ss_WR0_R3 )
 6118.                            $ss_WR0_R3 = 1.0 + -( omega(1 + $I_L6117_898, 2 + $I_L6102_1121) * phase_fnc(1 + $I_L6117_898, 2 + $I_L6102_1121, max( 1, ms ) + 4 * $I_L6116_1166 + 2) )
 6118.                            ss(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166 + 2) = $ss_WR0_R3
 6119.                            ssrt(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166 + 2) = _sqrt( $ss_WR0_R3 )
 6118.                            $ss_WR0_R3 = 1.0 + -( omega(1 + $I_L6117_898, 2 + $I_L6102_1121) * phase_fnc(1 + $I_L6117_898, 2 + $I_L6102_1121, max( 1, ms ) + 4 * $I_L6116_1166 + 3) )
 6118.                            ss(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166 + 3) = $ss_WR0_R3
 6119.                            ssrt(1 + $I_L6117_898, max( 1, ms ) + 4 * $I_L6116_1166 + 3) = _sqrt( $ss_WR0_R3 )
 6120.                            $I_L6117_898 = 1 + $I_L6117_898
 6117.                            if ( $I_L6117_898 >= n_profile ) exit
 6117.                         enddo
 6121.                         $I_L6116_1166 = 1 + $I_L6116_1166
 6120.                         if ( $I_L6116_1166 >= _rsh( ls_trunc + -max( 1, ms ) + 1, 2 ) ) exit
 6120.                      enddo
 6121.                      $I_L6116_999 = and( 0xfffffffffffffffcUL, ls_trunc + -max( 1, ms ) + 1 )
 6121.                   endif
 6116.                   if ( $I_L6116_999 < ls_trunc + -max( 1, ms ) + 1 ) then
 6116.                      $I_L6116_1141 = 0
 6116. !dir$ blocking_size( 0, 0 )
 6116.                      do
 6117.                         $I_L6117_898 = 0
 6117. !dir$ ivdep
 6117. !dir$ blocking_size( 0, 0 )
 6117.                         do
 6118.                            $ss_WR0_R3 = 1.0 + -( omega(1 + $I_L6117_898, 2 + $I_L6102_1121) * phase_fnc(1 + $I_L6117_898, 2 + $I_L6102_1121, $I_L6116_999 + $I_L6116_1141 + max( 1, ms )) )
 6118.                            ss(1 + $I_L6117_898, $I_L6116_999 + $I_L6116_1141 + max( 1, ms )) = $ss_WR0_R3
 6119.                            ssrt(1 + $I_L6117_898, $I_L6116_999 + $I_L6116_1141 + max( 1, ms )) = _sqrt( $ss_WR0_R3 )
 6120.                            $I_L6117_898 = 1 + $I_L6117_898
 6117.                            if ( $I_L6117_898 >= n_profile ) exit
 6117.                         enddo
 6121.                         $I_L6116_1141 = 1 + $I_L6116_1141
 6120.                         if ( $I_L6116_1141 >= ls_trunc + -max( 1, ms ) + -$I_L6116_999 + 1 ) exit
 6120.                      enddo
 6120.                   endif
 6120.                endif
 6120.             endif
 6125.             call eig_sys( n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff(1), ssrt(1, 0), mu(1, 1, $i_below_S41), eig_vec(1, 1, 1, $i_below_S41), nd_profile, nd_red_eigensystem, nd_max_order )
 6132.             if ( n_red_eigensystem > 0 ) then
 6133.                if ( n_profile > 0 ) then
 6132.                   $I_L6132_1001 = 0
 6132.                   if ( n_red_eigensystem >= 4 ) then
 6132.                      $I_L6132_1168 = 0
 6132. !dir$ blocking_size( 0, 0 )
 6132.                      do
 6133.                         $I_L6133_900 = 0
 6133. !dir$ ivdep
 6133. !dir$ blocking_size( 0, 0 )
 6133.                         do
 6134.                            theta(1 + $I_L6133_900, 1 + 4 * $I_L6132_1168, $i_below_S41) = _expn( -( tau(1 + $I_L6133_900, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6133_900, 1 + 4 * $I_L6132_1168, $i_below_S41) ) )
 6134.                            theta(1 + $I_L6133_900, 2 + 4 * $I_L6132_1168, $i_below_S41) = _expn( -( tau(1 + $I_L6133_900, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6133_900, 2 + 4 * $I_L6132_1168, $i_below_S41) ) )
 6134.                            theta(1 + $I_L6133_900, 3 + 4 * $I_L6132_1168, $i_below_S41) = _expn( -( tau(1 + $I_L6133_900, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6133_900, 3 + 4 * $I_L6132_1168, $i_below_S41) ) )
 6134.                            theta(1 + $I_L6133_900, 4 + 4 * $I_L6132_1168, $i_below_S41) = _expn( -( tau(1 + $I_L6133_900, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6133_900, 4 + 4 * $I_L6132_1168, $i_below_S41) ) )
 6135.                            $I_L6133_900 = 1 + $I_L6133_900
 6133.                            if ( $I_L6133_900 >= n_profile ) exit
 6133.                         enddo
 6136.                         $I_L6132_1168 = 1 + $I_L6132_1168
 6135.                         if ( $I_L6132_1168 >= _rsh( n_red_eigensystem, 2 ) ) exit
 6135.                      enddo
 6136.                      $I_L6132_1001 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
 6136.                   endif
 6132.                   if ( $I_L6132_1001 < n_red_eigensystem ) then
 6132.                      $I_L6132_1144 = 0
 6132. !dir$ blocking_size( 0, 0 )
 6132.                      do
 6133.                         $I_L6133_900 = 0
 6133. !dir$ ivdep
 6133. !dir$ blocking_size( 0, 0 )
 6133.                         do
 6134.                            theta(1 + $I_L6133_900, $I_L6132_1001 + $I_L6132_1144 + 1, $i_below_S41) = _expn( -( tau(1 + $I_L6133_900, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6133_900, $I_L6132_1001 + $I_L6132_1144 + 1, $i_below_S41) ) )
 6135.                            $I_L6133_900 = 1 + $I_L6133_900
 6133.                            if ( $I_L6133_900 >= n_profile ) exit
 6133.                         enddo
 6136.                         $I_L6132_1144 = 1 + $I_L6132_1144
 6135.                         if ( $I_L6132_1144 >= n_red_eigensystem + -$I_L6132_1001 ) exit
 6135.                      enddo
 6135.                   endif
 6135.                endif
 6135.             endif
 6139.             call layer_part_integ( n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff(1), mu(1, 1, $i_below_S41), eig_vec(1, 1, 1, $i_below_S41), theta(1, 1, $i_below_S41), isolir, i_direct(1, 1 + $I_L6102_1121), mu_0(1), uplm_sol(1, 1), diff_planck(1, 2 + $I_L6102_1121), l_ir_source_quad, diff_planck_2(1, 2 + $I_L6102_1121), tau(1, 2 + $I_L6102_1121), ss(1, 0), source_top(1, 1, $i_below_S41), source_bottom(1, 1, $i_below_S41), upm_c(1, 1), k_sol(1), z_sol(1, 1), q_0(1), q_1(1), nd_profile, nd_max_order, nd_red_eigensystem )
 6153.             if ( 2 * n_red_eigensystem > 0 ) then
 6153.                $I_L6153_1056 = 0
 6153.                do
 6156.                   if ( mod( ( 1 + $I_L6153_1056 ), 2 ) == 1 ) then
 6157.                      $ie_S52 = ( n_red_eigensystem + ( 2 + $I_L6153_1056 ) / 2 + n_red_eigensystem * $I_L6102_1121 * 2 )
 6158.                   else if ( mod( ( 1 + $I_L6153_1056 ), 2 ) == 0 ) then
 6159.                      $ie_S52 = ( ( 1 + $I_L6153_1056 ) / 2 + 2 * n_red_eigensystem + n_red_eigensystem * $I_L6102_1121 * 2 )
 6159.                   endif
 6163.                   if ( n_red_eigensystem > 0 ) then
 6169.                      if ( n_profile > 0 ) then
 6163.                         $I_L6163_1003 = 0
 6163.                         do
 6169.                            $I_L6169_902 = 0
 6169. !dir$ ivdep
 6169.                            do
 6170.                               a(1 + $I_L6169_902, $ie_S52, 1 + $I_L6163_1003) = eig_vec(1 + $I_L6169_902, 1 + $I_L6153_1056, 1 + $I_L6163_1003, $i_above_S51) * theta(1 + $I_L6169_902, 1 + $I_L6163_1003, $i_above_S51) * real( 1 + -2 * mod( $I_L6153_1056, 2 ), 8 )
 6172.                               a(1 + $I_L6169_902, $ie_S52, n_red_eigensystem + $I_L6163_1003 + 1) = eig_vec(1 + $I_L6169_902, 1 + $I_L6153_1056, 1 + $I_L6163_1003, $i_above_S51)
 6173.                               a(1 + $I_L6169_902, $ie_S52, $I_L6163_1003 + 2 * n_red_eigensystem + 1) = -( eig_vec(1 + $I_L6169_902, 1 + $I_L6153_1056, 1 + $I_L6163_1003, $i_below_S41) * real( 1 + -2 * mod( $I_L6153_1056, 2 ), 8 ) )
 6175.                               a(1 + $I_L6169_902, $ie_S52, $I_L6163_1003 + 3 * n_red_eigensystem + 1) = -( eig_vec(1 + $I_L6169_902, 1 + $I_L6153_1056, 1 + $I_L6163_1003, $i_below_S41) * theta(1 + $I_L6169_902, 1 + $I_L6163_1003, $i_below_S41) )
 6177.                               $I_L6169_902 = 1 + $I_L6169_902
 6169.                               if ( $I_L6169_902 >= n_profile ) exit
 6169.                            enddo
 6178.                            $I_L6163_1003 = 1 + $I_L6163_1003
 6177.                            if ( $I_L6163_1003 >= n_red_eigensystem ) exit
 6177.                         enddo
 6177.                      endif
 6177.                   endif
 6180.                   if ( n_profile > 0 ) then
 6180.                      $I_L6180_904 = 0
 6180. !dir$ ivdep
 6180.                      do
 6181.                         b(1 + $I_L6180_904, $ie_S52) = source_top(1 + $I_L6180_904, 1 + $I_L6153_1056, $i_below_S41) + -source_bottom(1 + $I_L6180_904, 1 + $I_L6153_1056, $i_above_S51)
 6183.                         $I_L6180_904 = 1 + $I_L6180_904
 6180.                         if ( $I_L6180_904 >= n_profile ) exit
 6180.                      enddo
 6180.                   endif
 6185.                   $I_L6153_1056 = 1 + $I_L6153_1056
 6183.                   if ( $I_L6153_1056 >= ( 2 * n_red_eigensystem ) ) exit
 6183.                enddo
 6183.             endif
 6187.             if ( i_sph_algorithm == 1 ) then
 6195.                $l_assign_S54 = $i_assign_level_S20 <= n_viewing_level
 6196.                if ( $i_assign_level_S20 <= n_viewing_level ) then
 6196.                   $l_assign_S54 = $I_L6102_1121 + -i_rad_layer($i_assign_level_S20) + 2 == 0
 6196.                endif
 6206.                ipa$10702 = loc( eig_vec(1, 1, 1, $i_below_S41) )
 6206.                eig_vec = _copyin( eig_vec(1, 1, 1, $i_below_S41) )
 6206.                t$989 = ( ls_trunc + -ms + 1 )
 6206.                t$3292 = max( 0, ( ls_trunc + -ms + 1 ) )
 6206.                t$988 = nd_profile
 6206.                t$992 = nd_red_eigensystem
 6206.                t$3293 = max( 0, nd_profile )
 6206.                t$3294 = nd_profile
 6206.                t$3295 = max( 0, nd_red_eigensystem )
 6206.                t$3296 = ( nd_profile * nd_red_eigensystem )
 6206.                t$990 = ( 2 * nd_red_eigensystem )
 6206.                t$3297 = max( 0, ( 2 * nd_red_eigensystem ) )
 6206.                t$3298 = nd_profile * max( 0, ( 2 * nd_red_eigensystem ) )
 6206.                t$3299 = nd_profile * nd_red_eigensystem * max( 0, ( 2 * nd_red_eigensystem ) )
 6206.                t$3300 = nd_profile * max( 0, ( ls_trunc + -ms + 1 ) )
 6206.                t$3301 = nd_profile * max( 0, ( 2 * nd_red_eigensystem ) )
 6206.                t$991 = nd_max_order
 6206.                t$3302 = 1 + nd_max_order
 6206.                t$3303 = max( 0, 1 + nd_max_order )
 6206.                t$3304 = nd_profile * max( 0, 1 + nd_max_order )
 6206.                t$993 = nd_viewing_level
 6206.                t$3305 = max( 0, nd_viewing_level )
 6206.                t$3306 = nd_viewing_level * nd_profile
 6206.                t$3307 = nd_profile * nd_viewing_level * max( 0, ( ls_trunc + -ms + 1 ) )
 6206.                t$994 = nd_sph_cf_weight
 6206.                t$3308 = max( 0, nd_sph_cf_weight )
 6206.                t$3309 = nd_profile * nd_viewing_level * nd_sph_cf_weight
 6206.                t$3310 = nd_profile * nd_viewing_level * max( 0, ( 2 * nd_red_eigensystem ) ) * nd_sph_cf_weight
 6206.                t$3313 = nd_profile * nd_red_eigensystem * 8
 6206.                t$3314 = 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 )
 6206.                t$3316 = nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 )
 6206.                t$3317 = 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 )
 6206.                t$3319 = 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 )
 6206.                t$3320 = 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6206.                t$3322 = 8 * nd_profile + 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6206.                t$3311 = int( _alloc( 8 * nd_profile + 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 6206.                t$3312 = t$3311
 6206.                t$3315 = t$3311 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 )
 6206.                t$3318 = t$3311 + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 )
 6206.                t$3321 = t$3311 + 8 * ( ( 8 * nd_profile + 8 * ( ( nd_profile * nd_red_eigensystem * 8 + 8 * ( ( 7 + nd_profile * nd_red_eigensystem * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6206.                if ( $l_assign_S54 ) then
 6206.                   $SC_cg_coeff_I1 = cg_coeff(2)
 6206.                   $SC_cg_coeff_I0 = cg_coeff(1)
 6206. !dir$ loop_info (automatic) cache_nt( i_rad_layer )
 6206.                   do
 6206.                      if ( n_red_eigensystem > 0 ) then
 6206.                         if ( n_profile > 0 ) then
 6206.                            $SCA_frac_rad_layer_I10 = frac_rad_layer($i_assign_level_S20)
 6206.                            $I_L6206_1005 = 0
 6206.                            if ( n_red_eigensystem >= 4 ) then
 6206.                               $I_L6206_1170 = 0
 6206. !dir$ blocking_size( 0, 0 )
 6206.                               do
 6206.                                  $I_L6206_906 = 0
 6206. !dir$ ivdep
 6206. !dir$ blocking_size( 0, 0 )
 6206.                                  do
 6206.                                     exp_minus(1 + $I_L6206_906, 1 + 4 * $I_L6206_1170) = _expn( -( $SCA_frac_rad_layer_I10 * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 1 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_plus(1 + $I_L6206_906, 1 + 4 * $I_L6206_1170) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I10 ) * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 1 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_minus(1 + $I_L6206_906, 2 + 4 * $I_L6206_1170) = _expn( -( $SCA_frac_rad_layer_I10 * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 2 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_plus(1 + $I_L6206_906, 2 + 4 * $I_L6206_1170) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I10 ) * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 2 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_minus(1 + $I_L6206_906, 3 + 4 * $I_L6206_1170) = _expn( -( $SCA_frac_rad_layer_I10 * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 3 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_plus(1 + $I_L6206_906, 3 + 4 * $I_L6206_1170) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I10 ) * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 3 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_minus(1 + $I_L6206_906, 4 + 4 * $I_L6206_1170) = _expn( -( $SCA_frac_rad_layer_I10 * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 4 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     exp_plus(1 + $I_L6206_906, 4 + 4 * $I_L6206_1170) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I10 ) * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, 4 + 4 * $I_L6206_1170, $i_below_S41) ) )
 6206.                                     $I_L6206_906 = 1 + $I_L6206_906
 6206.                                     if ( $I_L6206_906 >= n_profile ) exit
 6206.                                  enddo
 6206.                                  $I_L6206_1170 = 1 + $I_L6206_1170
 6206.                                  if ( $I_L6206_1170 >= _rsh( n_red_eigensystem, 2 ) ) exit
 6206.                               enddo
 6206.                               $I_L6206_1005 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
 6206.                            endif
 6206.                            if ( $I_L6206_1005 < n_red_eigensystem ) then
 6206.                               $I_L6206_1147 = 0
 6206. !dir$ blocking_size( 0, 0 )
 6206.                               do
 6206.                                  $I_L6206_906 = 0
 6206. !dir$ ivdep
 6206. !dir$ blocking_size( 0, 0 )
 6206.                                  do
 6206.                                     exp_minus(1 + $I_L6206_906, $I_L6206_1005 + $I_L6206_1147 + 1) = _expn( -( $SCA_frac_rad_layer_I10 * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, $I_L6206_1005 + $I_L6206_1147 + 1, $i_below_S41) ) )
 6206.                                     exp_plus(1 + $I_L6206_906, $I_L6206_1005 + $I_L6206_1147 + 1) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I10 ) * tau(1 + $I_L6206_906, 2 + $I_L6102_1121) * 1.0/mu(1 + $I_L6206_906, $I_L6206_1005 + $I_L6206_1147 + 1, $i_below_S41) ) )
 6206.                                     $I_L6206_906 = 1 + $I_L6206_906
 6206.                                     if ( $I_L6206_906 >= n_profile ) exit
 6206.                                  enddo
 6206.                                  $I_L6206_1147 = 1 + $I_L6206_1147
 6206.                                  if ( $I_L6206_1147 >= n_red_eigensystem + -$I_L6206_1005 ) exit
 6206.                               enddo
 6206.                            endif
 6206.                         endif
 6206.                         if ( ls_trunc + -ms >= 0 ) then
 6206.                            if ( n_profile > 0 ) then
 6206.                               $I_L6206_1111 = 0
 6206.                               do
 6206.                                  $I_L6206_1088 = 0
 6206.                                  do
 6206.                                     $I_L6206_1083 = 0
 6206. !dir$ shortloop16
 6206. !dir$ blocking_size( 16, 16 )
 6206.                                     do
 6206.                                        $I_L6206_1013 = 0
 6206. !dir$ shortloop16
 6206. !dir$ blocking_size( 16, 16 )
 6206.                                        do
 6206.                                           $m1ls_S75 = int( real( 1 + -2 * mod( ( $I_L6206_1013 + 16 * $I_L6206_1088 ), 2 ), 8 ) )
 6206.                                           $I_L6206_926 = 0
 6206. !dir$ ivdep
 6206. !dir$ loop_info (automatic) cache_nt( weight_u )
 6206.                                           do
 6206.                                              weight_u(1 + $I_L6206_926, $i_assign_level_S20, $I_L6206_1013 + 16 * $I_L6206_1088 + 1, $I_L6206_1083 + 16 * $I_L6206_1111 + 1) = eig_vec(1 + $I_L6206_926, $I_L6206_1013 + 16 * $I_L6206_1088 + 1, $I_L6206_1083 + 16 * $I_L6206_1111 + 1) * exp_minus(1 + $I_L6206_926, $I_L6206_1083 + 16 * $I_L6206_1111 + 1) * $m1ls_S75
 6206.                                              weight_u(1 + $I_L6206_926, $i_assign_level_S20, $I_L6206_1013 + 16 * $I_L6206_1088 + 1, n_red_eigensystem + $I_L6206_1083 + 16 * $I_L6206_1111 + 1) = eig_vec(1 + $I_L6206_926, $I_L6206_1013 + 16 * $I_L6206_1088 + 1, $I_L6206_1083 + 16 * $I_L6206_1111 + 1) * exp_plus(1 + $I_L6206_926, $I_L6206_1083 + 16 * $I_L6206_1111 + 1)
 6206.                                              $I_L6206_926 = 1 + $I_L6206_926
 6206.                                              if ( $I_L6206_926 >= n_profile ) exit
 6206.                                           enddo
 6206.                                           $I_L6206_1013 = 1 + $I_L6206_1013
 6206.                                           if ( $I_L6206_1013 >= min( ls_trunc + -ms + 1, 16 + 16 * $I_L6206_1088 ) + -16 * $I_L6206_1088 ) exit
 6206.                                        enddo
 6206.                                        $I_L6206_1083 = 1 + $I_L6206_1083
 6206.                                        if ( $I_L6206_1083 >= min( n_red_eigensystem, 16 + 16 * $I_L6206_1111 ) + -16 * $I_L6206_1111 ) exit
 6206.                                     enddo
 6206.                                     $I_L6206_1088 = 1 + $I_L6206_1088
 6206.                                     if ( $I_L6206_1088 >= 1 + max( 0, -1 + _rsh( ls_trunc + -ms + 16, 4 ) ) ) exit
 6206.                                  enddo
 6206.                                  $I_L6206_1111 = 1 + $I_L6206_1111
 6206.                                  if ( $I_L6206_1111 >= 1 + max( 0, -1 + _rsh( 15 + n_red_eigensystem, 4 ) ) ) exit
 6206.                               enddo
 6206.                            endif
 6206.                         endif
 6206.                      endif
 6206.                      if ( isolir == 1 ) then
 6206.                         if ( n_profile > 0 ) then
 6206.                            $SCA_frac_rad_layer_I9 = frac_rad_layer($i_assign_level_S20)
 6206.                            $I_L6206_908 = 0
 6206. !dir$ ivdep
 6206.                            do
 6206.                               x_m(1 + $I_L6206_908) = _expn( -( $SCA_frac_rad_layer_I9 * tau(1 + $I_L6206_908, 2 + $I_L6102_1121) * 1.0/mu_0(1 + $I_L6206_908) ) )
 6206.                               $I_L6206_908 = 1 + $I_L6206_908
 6206.                               if ( $I_L6206_908 >= n_profile ) exit
 6206.                            enddo
 6206.                         endif
 6206.                         if ( ls_trunc + -ms >= 0 ) then
 6206.                            if ( n_profile > 0 ) then
 6206.                               $I_L6206_1007 = 0
 6206.                               if ( ls_trunc + -ms + -3 >= 0 ) then
 6206.                                  $I_L6206_1172 = 0
 6206. !dir$ blocking_size( 0, 0 )
 6206.                                  do
 6206.                                     $I_L6206_916 = 0
 6206. !dir$ ivdep
 6206. !dir$ blocking_size( 0, 0 )
 6206.                                     do
 6206.                                        c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 1 + 4 * $I_L6206_1172) = c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 1 + 4 * $I_L6206_1172) + x_m(1 + $I_L6206_916) * z_sol(1 + $I_L6206_916, 1 + 4 * $I_L6206_1172)
 6206.                                        c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 2 + 4 * $I_L6206_1172) = c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 2 + 4 * $I_L6206_1172) + x_m(1 + $I_L6206_916) * z_sol(1 + $I_L6206_916, 2 + 4 * $I_L6206_1172)
 6206.                                        c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 3 + 4 * $I_L6206_1172) = c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 3 + 4 * $I_L6206_1172) + x_m(1 + $I_L6206_916) * z_sol(1 + $I_L6206_916, 3 + 4 * $I_L6206_1172)
 6206.                                        c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 4 + 4 * $I_L6206_1172) = c_ylm(1 + $I_L6206_916, $i_assign_level_S20, 4 + 4 * $I_L6206_1172) + x_m(1 + $I_L6206_916) * z_sol(1 + $I_L6206_916, 4 + 4 * $I_L6206_1172)
 6206.                                        $I_L6206_916 = 1 + $I_L6206_916
 6206.                                        if ( $I_L6206_916 >= n_profile ) exit
 6206.                                     enddo
 6206.                                     $I_L6206_1172 = 1 + $I_L6206_1172
 6206.                                     if ( $I_L6206_1172 >= _rsh( ls_trunc + -ms + 1, 2 ) ) exit
 6206.                                  enddo
 6206.                                  $I_L6206_1007 = and( 0xfffffffffffffffcUL, ls_trunc + -ms + 1 )
 6206.                               endif
 6206.                               if ( $I_L6206_1007 < ls_trunc + -ms + 1 ) then
 6206.                                  $I_L6206_1150 = 0
 6206. !dir$ blocking_size( 0, 0 )
 6206.                                  do
 6206.                                     $I_L6206_916 = 0
 6206. !dir$ ivdep
 6206. !dir$ blocking_size( 0, 0 )
 6206.                                     do
 6206.                                        c_ylm(1 + $I_L6206_916, $i_assign_level_S20, $I_L6206_1007 + $I_L6206_1150 + 1) = c_ylm(1 + $I_L6206_916, $i_assign_level_S20, $I_L6206_1007 + $I_L6206_1150 + 1) + x_m(1 + $I_L6206_916) * z_sol(1 + $I_L6206_916, $I_L6206_1007 + $I_L6206_1150 + 1)
 6206.                                        $I_L6206_916 = 1 + $I_L6206_916
 6206.                                        if ( $I_L6206_916 >= n_profile ) exit
 6206.                                     enddo
 6206.                                     $I_L6206_1150 = 1 + $I_L6206_1150
 6206.                                     if ( $I_L6206_1150 >= ls_trunc + -ms + -$I_L6206_1007 + 1 ) exit
 6206.                                  enddo
 6206.                               endif
 6206.                            endif
 6206.                         endif
 6206.                         if ( n_profile > 0 ) then
 6206.                            $I_L6206_918 = 0
 6206. !dir$ ivdep
 6206.                            do
 6206.                               x_m(1 + $I_L6206_918) = upm_c(1 + $I_L6206_918, k_sol(1 + $I_L6206_918)) * exp_minus(1 + $I_L6206_918, k_sol(1 + $I_L6206_918))
 6206.                               $I_L6206_918 = 1 + $I_L6206_918
 6206.                               if ( $I_L6206_918 >= n_profile ) exit
 6206.                            enddo
 6206.                         endif
 6206.                         if ( ls_trunc + -ms >= 0 ) then
 6206.                            if ( n_profile > 0 ) then
 6206.                               $I_L6206_1009 = 0
 6206. !dir$ ivdep
 6206.                               do
 6206.                                  $m1ls_S62 = int( real( 1 + -2 * mod( $I_L6206_1009, 2 ), 8 ) )
 6206.                                  $I_L6206_920 = 0
 6206. !dir$ unroll 4
 6206.                                  do
 6206.                                     c_ylm(1 + $I_L6206_920, $i_assign_level_S20, 1 + $I_L6206_1009) = c_ylm(1 + $I_L6206_920, $i_assign_level_S20, 1 + $I_L6206_1009) + x_m(1 + $I_L6206_920) * $m1ls_S62 * eig_vec(1 + $I_L6206_920, 1 + $I_L6206_1009, k_sol(1 + $I_L6206_920))
 6206.                                     $I_L6206_920 = 1 + $I_L6206_920
 6206.                                     if ( $I_L6206_920 >= n_profile ) exit
 6206.                                  enddo
 6206.                                  $I_L6206_1009 = 1 + $I_L6206_1009
 6206.                                  if ( $I_L6206_1009 >= ls_trunc + -ms + 1 ) exit
 6206.                               enddo
 6206.                            endif
 6206.                         endif
 6206.                      else if ( isolir == 2 ) then
 6206.                         if ( ms == 0 ) then
 6206.                            if ( l_ir_source_quad ) then
 6206.                               if ( n_profile > 0 ) then
 6206.                                  $SCA_frac_rad_layer_I8 = frac_rad_layer($i_assign_level_S20)
 6206.                                  $I_L6206_910 = 0
 6206. !dir$ ivdep
 6206.                                  do
 6206.                                     c_ylm(1 + $I_L6206_910, $i_assign_level_S20, 1) = c_ylm(1 + $I_L6206_910, $i_assign_level_S20, 1) + ( $SC_cg_coeff_I0 * q_1(1 + $I_L6206_910) * 1.0/ss(1 + $I_L6206_910, 0) )
 6206.                                     c_ylm(1 + $I_L6206_910, $i_assign_level_S20, 2) = c_ylm(1 + $I_L6206_910, $i_assign_level_S20, 2) + q_0(1 + $I_L6206_910) + q_1(1 + $I_L6206_910) * ( -5.0e-1 + $SCA_frac_rad_layer_I8 )
 6206.                                     $I_L6206_910 = 1 + $I_L6206_910
 6206.                                     if ( $I_L6206_910 >= n_profile ) exit
 6206.                                  enddo
 6206.                               endif
 6206.                               if ( ls_trunc > 1 ) then
 6206.                                  if ( n_profile > 0 ) then
 6206.                                     $I_L6206_912 = 0
 6206. !dir$ ivdep
 6206.                                     do
 6206.                                        c_ylm(1 + $I_L6206_912, $i_assign_level_S20, 3) = ( c_ylm(1 + $I_L6206_912, $i_assign_level_S20, 3) * $SC_cg_coeff_I1 * q_1(1 + $I_L6206_912) * 1.0/ss(1 + $I_L6206_912, 2) )
 6206.                                        $I_L6206_912 = 1 + $I_L6206_912
 6206.                                        if ( $I_L6206_912 >= n_profile ) exit
 6206.                                     enddo
 6206.                                  endif
 6206.                               endif
 6206.                            else
 6206.                               if ( n_profile > 0 ) then
 6206.                                  $I_L6206_914 = 0
 6206. !dir$ ivdep
 6206.                                  do
 6206.                                     c_ylm(1 + $I_L6206_914, $i_assign_level_S20, 2) = c_ylm(1 + $I_L6206_914, $i_assign_level_S20, 2) + q_0(1 + $I_L6206_914)
 6206.                                     $I_L6206_914 = 1 + $I_L6206_914
 6206.                                     if ( $I_L6206_914 >= n_profile ) exit
 6206.                                  enddo
 6206.                               endif
 6206.                               if ( n_red_eigensystem > 0 ) then
 6206.                                  $I_L6206_1058 = 0
 6206.                                  do
 6206.                                     if ( n_profile > 0 ) then
 6206.                                        $I_L6206_922 = 0
 6206. !dir$ ivdep
 6206.                                        do
 6206.                                           x_m(1 + $I_L6206_922) = upm_c(1 + $I_L6206_922, 1 + $I_L6206_1058) * exp_minus(1 + $I_L6206_922, 1 + $I_L6206_1058)
 6206.                                           x_p(1 + $I_L6206_922) = upm_c(1 + $I_L6206_922, n_red_eigensystem + $I_L6206_1058 + 1) * exp_plus(1 + $I_L6206_922, 1 + $I_L6206_1058)
 6206.                                           $I_L6206_922 = 1 + $I_L6206_922
 6206.                                           if ( $I_L6206_922 >= n_profile ) exit
 6206.                                        enddo
 6206.                                     endif
 6206.                                     if ( ls_trunc >= 0 ) then
 6206.                                        if ( n_profile > 0 ) then
 6206.                                           $I_L6206_1011 = 0
 6206.                                           do
 6206.                                              $m1ls_S71 = int( real( 1 + -2 * mod( $I_L6206_1011, 2 ), 8 ) )
 6206.                                              $I_L6206_924 = 0
 6206. !dir$ ivdep
 6206.                                              do
 6206.                                                 c_ylm(1 + $I_L6206_924, $i_assign_level_S20, 1 + $I_L6206_1011) = c_ylm(1 + $I_L6206_924, $i_assign_level_S20, 1 + $I_L6206_1011) + ( x_m(1 + $I_L6206_924) * $m1ls_S71 + x_p(1 + $I_L6206_924) ) * eig_vec(1 + $I_L6206_924, 1 + $I_L6206_1011, 1 + $I_L6206_1058)
 6206.                                                 $I_L6206_924 = 1 + $I_L6206_924
 6206.                                                 if ( $I_L6206_924 >= n_profile ) exit
 6206.                                              enddo
 6206.                                              $I_L6206_1011 = 1 + $I_L6206_1011
 6206.                                              if ( $I_L6206_1011 >= 1 + ls_trunc ) exit
 6206.                                           enddo
 6206.                                        endif
 6206.                                     endif
 6206.                                     $I_L6206_1058 = 1 + $I_L6206_1058
 6206.                                     if ( $I_L6206_1058 >= n_red_eigensystem ) exit
 6206.                                  enddo
 6206.                               endif
 6206.                            endif
 6206.                         endif
 6206.                      endif
 6206.                      $i_assign_level_S20 = 1 + $i_assign_level_S20
 6206.                      if ( $i_assign_level_S20 > n_viewing_level ) then
 6206.                         $l_assign_S54 = .false.
 6206.                      else if ( i_rad_layer($i_assign_level_S20) > ( 2 + $I_L6102_1121 ) ) then
 6206.                         $l_assign_S54 = .false.
 6206.                      endif
 6206.                      if ( $l_assign_S54 == 0 ) exit
 6206.                   enddo
 6206.                endif
 6206.                _free( t$3311 )
 6206.                eig_vec(1, 1, 1, $i_below_S41) = _copyout( eig_vec )
 6220.             else if ( i_sph_algorithm == 2 ) then
 6226.                t$5196 = ( 2 + $I_L6102_1121 )
 6223.                call set_dirn_weights( n_profile, ms, ls_trunc, up_lm(1, 1, 1), n_direction, mu_v(1, 1), azim_factor(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), t$5196, n_red_eigensystem, mu(1, 1, $i_below_S41), eig_vec(1, 1, 1, $i_below_S41), isolir, z_sol(1, 1), mu_0(1), l_ir_source_quad, diff_planck(1, 1), upm_c(1, 1), k_sol(1), tau(1, 1), omega(1, 1), phase_fnc(1, 1, 1), weight_u(1, 1, 1, 2 * n_red_eigensystem + n_red_eigensystem * $I_L6102_1121 * 2 + 1), radiance(1, 1, 1), nd_profile, nd_layer, nd_direction, nd_viewing_level, nd_red_eigensystem, nd_max_order )
 6223.             endif
 6240.             $I_L6102_1121 = 1 + $I_L6102_1121
 6237.             if ( $I_L6102_1121 >= -1 + n_layer ) exit
 6237.          enddo
 6237.       endif
 6251.       if ( ls_trunc + -ms > 0 ) then
 6251.          $I_L6251_1123 = 0
 6251.          do
 6258.             if ( n_profile > 0 ) then
 6258.                $I_L6258_928 = 0
 6258. !dir$ ivdep
 6258.                do
 6269.                   $b_WR0_R4 = source_bottom(1 + $I_L6258_928, 2 + 2 * $I_L6251_1123, $i_below_S41) * real( 1 + -2 * mod( ( ms + 2 * $I_L6251_1123 + 1 ), 2 ), 8 ) * -5.0e-1
 6269.                   b(1 + $I_L6258_928, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) = $b_WR0_R4
 6260.                   $I_L6258_928 = 1 + $I_L6258_928
 6258.                   if ( $I_L6258_928 >= n_profile ) exit
 6258.                enddo
 6258.             endif
 6282.             $I_L6282_1016 = 0
 6282.             do
 6283.                if ( n_profile > 0 ) then
 6283.                   $SCA_kappa_I11 = kappa(1 + $I_L6251_1123, 1 + $I_L6282_1016)
 6283.                   $I_L6283_930 = 0
 6283. !dir$ ivdep
 6283.                   do
 6284.                      b(1 + $I_L6283_930, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) = b(1 + $I_L6283_930, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) + -( real( 1 + -2 * mod( ( ms + 2 * $I_L6282_1016 ), 2 ), 8 ) * $SCA_kappa_I11 * source_bottom(1 + $I_L6283_930, 1 + 2 * $I_L6282_1016, $i_below_S41) )
 6288.                      $I_L6283_930 = 1 + $I_L6283_930
 6283.                      if ( $I_L6283_930 >= n_profile ) exit
 6283.                   enddo
 6283.                endif
 6289.                if ( isolir == 2 ) then
 6289.                   if ( ms == 0 ) then
 6289.                      if ( 2 * $I_L6282_1016 == 0 ) then
 6291.                         if ( n_profile > 0 ) then
 6292.                            $SC_kappa_I13 = kappa(1 + $I_L6251_1123, 1)
 6291.                            $I_L6291_932 = 0
 6291. !dir$ ivdep
 6291.                            do
 6292.                               b(1 + $I_L6291_932, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) = b(1 + $I_L6291_932, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) + $SC_kappa_I13 * d_planck_flux_surface(1 + $I_L6291_932) * 1.1283791670955126
 6294.                               $I_L6291_932 = 1 + $I_L6291_932
 6291.                               if ( $I_L6291_932 >= n_profile ) exit
 6291.                            enddo
 6291.                         endif
 6291.                      endif
 6291.                   endif
 6291.                endif
 6296.                $I_L6282_1016 = 1 + $I_L6282_1016
 6295.                if ( $I_L6282_1016 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
 6295.             enddo
 6300.             if ( n_red_eigensystem > 0 ) then
 6311.                if ( n_profile > 0 ) then
 6300.                   $I_L6300_1036 = 0
 6300.                   do
 6311.                      $I_L6311_975 = 0
 6311. !dir$ ivdep
 6311.                      do
 6312.                         a(1 + $I_L6311_975, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6300_1036 + 1) = a(1 + $I_L6311_975, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6300_1036 + 1) + eig_vec(1 + $I_L6311_975, 2 + 2 * $I_L6251_1123, 1 + $I_L6300_1036, $i_below_S41) * real( 1 + -2 * mod( ( ms + 2 * $I_L6251_1123 + 1 ), 2 ), 8 ) * 5.0e-1
 6314.                         $I_L6311_975 = 1 + $I_L6311_975
 6311.                         if ( $I_L6311_975 >= n_profile ) exit
 6311.                      enddo
 6328.                      $I_L6300_1036 = 1 + $I_L6300_1036
 6326.                      if ( $I_L6300_1036 >= n_red_eigensystem ) exit
 6326.                   enddo
 6300.                   $I_L6300_1119 = 0
 6300.                   do
 6315.                      $I_L6315_1107 = 0
 6315.                      do
 6317.                         $I_L6317_1099 = 0
 6317.                         do
 6300.                            $I_L6300_1077 = 0
 6300. !dir$ shortloop16
 6300. !dir$ blocking_size( 8, 8 )
 6300.                            do
 6315.                               $I_L6315_1049 = 0
 6315. !dir$ shortloop16
 6315. !dir$ blocking_size( 8, 8 )
 6315.                               do
 6317.                                  $SCA_kappa_I12 = kappa(1 + $I_L6251_1123, $I_L6315_1049 + 8 * $I_L6315_1107 + 1)
 6317.                                  $I_L6317_977 = 0
 6317. !dir$ ivdep
 6317. !dir$ blocking_size( 256, 256 )
 6317.                                  do
 6318.                                     a($I_L6317_977 + 256 * $I_L6317_1099 + 1, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6300_1077 + 8 * $I_L6300_1119 + 1) = a($I_L6317_977 + 256 * $I_L6317_1099 + 1, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6300_1077 + 8 * $I_L6300_1119 + 1) + real( 1 + -2 * mod( ( ms + 2 * $I_L6315_1049 + 16 * $I_L6315_1107 ), 2 ), 8 ) * $SCA_kappa_I12 * eig_vec($I_L6317_977 + 256 * $I_L6317_1099 + 1, 2 * $I_L6315_1049 + 16 * $I_L6315_1107 + 1, $I_L6300_1077 + 8 * $I_L6300_1119 + 1, $i_below_S41)
 6317.                                     $I_L6317_977 = 1 + $I_L6317_977
 6317.                                     if ( $I_L6317_977 >= min( n_profile, 256 + 256 * $I_L6317_1099 ) + -256 * $I_L6317_1099 ) exit
 6317.                                  enddo
 6315.                                  $I_L6315_1049 = 1 + $I_L6315_1049
 6315.                                  if ( $I_L6315_1049 >= min( ( ls_trunc + -ms + 1 ) / 2, 8 + 8 * $I_L6315_1107 ) + -8 * $I_L6315_1107 ) exit
 6315.                               enddo
 6300.                               $I_L6300_1077 = 1 + $I_L6300_1077
 6320.                               if ( $I_L6300_1077 >= min( n_red_eigensystem, 8 + 8 * $I_L6300_1119 ) + -8 * $I_L6300_1119 ) exit
 6320.                            enddo
 6317.                            $I_L6317_1099 = 1 + $I_L6317_1099
 6317.                            if ( $I_L6317_1099 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
 6317.                         enddo
 6315.                         $I_L6315_1107 = 1 + $I_L6315_1107
 6326.                         if ( $I_L6315_1107 >= 1 + max( 0, -1 + _rsh( 7 + ( ls_trunc + -ms + 1 ) / 2, 3 ) ) ) exit
 6326.                      enddo
 6300.                      $I_L6300_1119 = 1 + $I_L6300_1119
 6300.                      if ( $I_L6300_1119 >= 1 + max( 0, -1 + _rsh( 7 + n_red_eigensystem, 3 ) ) ) exit
 6300.                   enddo
 6300.                   $I_L6300_1038 = 0
 6300.                   do
 6323.                      $I_L6323_980 = 0
 6323. !dir$ ivdep
 6323.                      do
 6324.                         a(1 + $I_L6323_980, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, 1 + $I_L6300_1038) = a(1 + $I_L6323_980, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6300_1038 + 1) + real( 1 + -2 * mod( ms, 2 ), 8 ) * eig_vec(1 + $I_L6323_980, 2 + 2 * $I_L6251_1123, 1 + $I_L6300_1038, $i_below_S41)
 6326.                         $I_L6323_980 = 1 + $I_L6323_980
 6323.                         if ( $I_L6323_980 >= n_profile ) exit
 6323.                      enddo
 6328.                      $I_L6300_1038 = 1 + $I_L6300_1038
 6326.                      if ( $I_L6300_1038 >= n_red_eigensystem ) exit
 6326.                   enddo
 6326.                endif
 6326.             endif
 6334.             if ( ms <= ls_brdf_trunc ) then
 6337.                if ( isolir == 1 ) then
 6339.                   if ( n_brdf_basis_fnc > 0 ) then
 6339.                      $I_L6339_1062 = 0
 6339.                      do
 6340.                         if ( n_profile > 0 ) then
 6340.                            $I_L6340_938 = 0
 6340. !dir$ ivdep
 6340.                            do
 6341.                               b_factor(1 + $I_L6340_938) = 0.0
 6342.                               $I_L6340_938 = 1 + $I_L6340_938
 6340.                               if ( $I_L6340_938 >= n_profile ) exit
 6340.                            enddo
 6340.                         endif
 6343.                         if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) >= 0 ) then
 6346.                            if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + -2 >= 0 ) then
 6351.                               if ( n_profile > 0 ) then
 6345.                                  $SC_kappa_I13 = kappa(1 + $I_L6251_1123, 1)
 6343.                                  $I_L6343_1020 = 0
 6343.                                  do
 6345.                                     ksi = $SC_kappa_I13 * f_brdf(1 + $I_L6339_1062, 0, ( ms + 2 * $I_L6343_1020 ) / 2, ms)
 6346.                                     $I_L6346_940 = 0
 6346. !dir$ ivdep
 6346.                                     do
 6348.                                        ksi = ksi + kappa(1 + $I_L6251_1123, 2 + $I_L6346_940) * f_brdf(1 + $I_L6339_1062, ( ms + 2 * $I_L6346_940 + 2 ) / 2, ( ms + 2 * $I_L6343_1020 ) / 2, ms)
 6350.                                        $I_L6346_940 = 1 + $I_L6346_940
 6346.                                        if ( $I_L6346_940 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) ) / 2 ) exit
 6346.                                     enddo
 6351.                                     $I_L6351_942 = 0
 6351. !dir$ ivdep
 6351.                                     do
 6352.                                        b_factor(1 + $I_L6351_942) = b_factor(1 + $I_L6351_942) + ksi * uplm_sol(1 + $I_L6351_942, 1 + 2 * $I_L6343_1020)
 6353.                                        $I_L6351_942 = 1 + $I_L6351_942
 6351.                                        if ( $I_L6351_942 >= n_profile ) exit
 6351.                                     enddo
 6354.                                     $I_L6343_1020 = 1 + $I_L6343_1020
 6353.                                     if ( $I_L6343_1020 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 6353.                                  enddo
 6353.                               endif
 6353.                            else if ( n_profile > 0 ) then
 6345.                               $SC_kappa_I13 = kappa(1 + $I_L6251_1123, 1)
 6343.                               $I_L6343_1028 = 0
 6343.                               do
 6345.                                  ksi = $SC_kappa_I13 * f_brdf(1 + $I_L6339_1062, 0, ( ms + 2 * $I_L6343_1028 ) / 2, ms)
 6351.                                  $I_L6351_958 = 0
 6351. !dir$ ivdep
 6351.                                  do
 6352.                                     b_factor(1 + $I_L6351_958) = b_factor(1 + $I_L6351_958) + ksi * uplm_sol(1 + $I_L6351_958, 1 + 2 * $I_L6343_1028)
 6353.                                     $I_L6351_958 = 1 + $I_L6351_958
 6351.                                     if ( $I_L6351_958 >= n_profile ) exit
 6351.                                  enddo
 6354.                                  $I_L6343_1028 = 1 + $I_L6343_1028
 6353.                                  if ( $I_L6343_1028 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 6353.                               enddo
 6353.                            endif
 6353.                         endif
 6355.                         if ( n_profile > 0 ) then
 6355.                            $I_L6355_944 = 0
 6355. !dir$ ivdep
 6355.                            do
 6356.                               b(1 + $I_L6355_944, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) = b(1 + $I_L6355_944, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) + i_direct(1 + $I_L6355_944, n_layer) * mu_0(1 + $I_L6355_944) * real( 1 + -2 * mod( ms, 2 ), 8 ) * rho_alb(1 + $I_L6355_944, 1 + $I_L6339_1062) * b_factor(1 + $I_L6355_944)
 6359.                               $I_L6355_944 = 1 + $I_L6355_944
 6355.                               if ( $I_L6355_944 >= n_profile ) exit
 6355.                            enddo
 6355.                         endif
 6360.                         $I_L6339_1062 = 1 + $I_L6339_1062
 6359.                         if ( $I_L6339_1062 >= n_brdf_basis_fnc ) exit
 6359.                      enddo
 6359.                   endif
 6362.                else if ( isolir == 2 ) then
 6363.                   if ( ms == 0 ) then
 6364.                      if ( n_brdf_basis_fnc > 0 ) then
 6366.                         if ( ls_brdf_trunc >= 0 ) then
 6364.                            $I_L6364_1060 = 0
 6364.                            do
 6365.                               lambda = 0.0
 6366.                               $I_L6366_1018 = 0
 6366. !dir$ ivdep
 6366.                               do
 6368.                                  lambda_d = 0.0
 6369.                                  $I_L6369_934 = 0
 6369. !dir$ unroll 4
 6369.                                  do
 6371.                                     lambda_d = lambda_d + kappa(1 + $I_L6251_1123, 1 + $I_L6369_934) * f_brdf(1 + $I_L6364_1060, $I_L6369_934, $I_L6366_1018, 0)
 6373.                                     $I_L6369_934 = 1 + $I_L6369_934
 6369.                                     if ( $I_L6369_934 >= ( 2 + ls_brdf_trunc ) / 2 ) exit
 6369.                                  enddo
 6374.                                  lambda = lambda + kappa(1, 1 + $I_L6366_1018) * lambda_d
 6375.                                  $I_L6366_1018 = 1 + $I_L6366_1018
 6373.                                  if ( $I_L6366_1018 >= ( 2 + ls_brdf_trunc ) / 2 ) exit
 6373.                               enddo
 6376.                               if ( n_profile > 0 ) then
 6376.                                  $I_L6376_936 = 0
 6376. !dir$ ivdep
 6376.                                  do
 6377.                                     b(1 + $I_L6376_936, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) = b(1 + $I_L6376_936, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) + rho_alb(1 + $I_L6376_936, 1 + $I_L6364_1060) * lambda * d_planck_flux_surface(1 + $I_L6376_936) * 6.5147001587055997e-1
 6381.                                     $I_L6376_936 = 1 + $I_L6376_936
 6376.                                     if ( $I_L6376_936 >= n_profile ) exit
 6376.                                  enddo
 6376.                               endif
 6382.                               $I_L6364_1060 = 1 + $I_L6364_1060
 6381.                               if ( $I_L6364_1060 >= n_brdf_basis_fnc ) exit
 6381.                            enddo
 6381.                         endif
 6381.                      endif
 6381.                   endif
 6381.                endif
 6386.                $I_L6386_1090 = 0
 6386.                do
 6390.                   if ( n_profile > 0 ) then
 6390.                      $I_L6390_946 = 0
 6390. !dir$ ivdep
 6390.                      do
 6391.                         surface_term(1 + $I_L6390_946, 1 + $I_L6386_1090) = 0.0
 6392.                         $I_L6390_946 = 1 + $I_L6390_946
 6390.                         if ( $I_L6390_946 >= n_profile ) exit
 6390.                      enddo
 6390.                   endif
 6393.                   if ( n_brdf_basis_fnc > 0 ) then
 6395.                      if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) >= 0 ) then
 6393.                         $I_L6393_1064 = 0
 6393.                         do
 6394.                            phi = 0.0
 6395.                            $I_L6395_1022 = 0
 6395. !dir$ ivdep
 6395.                            do
 6397.                               phi_d = 0.0
 6398.                               $I_L6398_948 = 0
 6398. !dir$ unroll 4
 6398.                               do
 6400.                                  phi_d = phi_d + cgk(1 + $I_L6398_948, 1 + $I_L6386_1090) * f_brdf(1 + $I_L6393_1064, ( ms + 2 * $I_L6395_1022 ) / 2, ( ms + 2 * $I_L6398_948 ) / 2, ms)
 6402.                                  $I_L6398_948 = 1 + $I_L6398_948
 6398.                                  if ( $I_L6398_948 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 6398.                               enddo
 6403.                               phi = phi + kappa(1 + $I_L6251_1123, 1 + $I_L6395_1022) * phi_d
 6404.                               $I_L6395_1022 = 1 + $I_L6395_1022
 6402.                               if ( $I_L6395_1022 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 6402.                            enddo
 6405.                            if ( n_profile > 0 ) then
 6405.                               $I_L6405_950 = 0
 6405. !dir$ ivdep
 6405.                               do
 6406.                                  surface_term(1 + $I_L6405_950, 1 + $I_L6386_1090) = surface_term(1 + $I_L6405_950, 1 + $I_L6386_1090) + rho_alb(1 + $I_L6405_950, 1 + $I_L6393_1064) * phi * real( 1 + -2 * mod( ms, 2 ), 8 )
 6408.                                  $I_L6405_950 = 1 + $I_L6405_950
 6405.                                  if ( $I_L6405_950 >= n_profile ) exit
 6405.                               enddo
 6405.                            endif
 6409.                            $I_L6393_1064 = 1 + $I_L6393_1064
 6408.                            if ( $I_L6393_1064 >= n_brdf_basis_fnc ) exit
 6408.                         enddo
 6408.                      endif
 6408.                   endif
 6412.                   if ( n_profile > 0 ) then
 6412.                      $I_L6412_952 = 0
 6412. !dir$ ivdep
 6412.                      do
 6413.                         b(1 + $I_L6412_952, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) = b(1 + $I_L6412_952, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1) + -( source_bottom(1 + $I_L6412_952, 1 + $I_L6386_1090, $i_below_S41) * surface_term(1 + $I_L6412_952, 1 + $I_L6386_1090) )
 6415.                         $I_L6412_952 = 1 + $I_L6412_952
 6412.                         if ( $I_L6412_952 >= n_profile ) exit
 6412.                      enddo
 6412.                   endif
 6417.                   if ( n_red_eigensystem > 0 ) then
 6421.                      if ( n_profile > 0 ) then
 6417.                         $I_L6417_1024 = 0
 6417. !dir$ blocking_size( 0, 0 )
 6417.                         do
 6421.                            $I_L6421_954 = 0
 6421. !dir$ ivdep
 6421. !dir$ blocking_size( 0, 0 )
 6421.                            do
 6422.                               a(1 + $I_L6421_954, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, 1 + $I_L6417_1024) = a(1 + $I_L6421_954, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, 1 + $I_L6417_1024) + surface_term(1 + $I_L6421_954, 1 + $I_L6386_1090) * real( 1 + -2 * mod( $I_L6386_1090, 2 ), 8 ) * eig_vec(1 + $I_L6421_954, 1 + $I_L6386_1090, 1 + $I_L6417_1024, $i_below_S41)
 6425.                               a(1 + $I_L6421_954, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6417_1024 + 1) = a(1 + $I_L6421_954, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, n_red_eigensystem + $I_L6417_1024 + 1) + surface_term(1 + $I_L6421_954, 1 + $I_L6386_1090) * eig_vec(1 + $I_L6421_954, 1 + $I_L6386_1090, 1 + $I_L6417_1024, $i_below_S41)
 6427.                               $I_L6421_954 = 1 + $I_L6421_954
 6421.                               if ( $I_L6421_954 >= n_profile ) exit
 6421.                            enddo
 6429.                            $I_L6417_1024 = 1 + $I_L6417_1024
 6427.                            if ( $I_L6417_1024 >= n_red_eigensystem ) exit
 6427.                         enddo
 6427.                      endif
 6427.                   endif
 6431.                   $I_L6386_1090 = 1 + $I_L6386_1090
 6429.                   if ( $I_L6386_1090 >= ls_trunc + -ms + 1 ) exit
 6429.                enddo
 6429.             endif
 6435.             if ( n_red_eigensystem > 0 ) then
 6437.                if ( n_profile > 0 ) then
 6435.                   $I_L6435_1026 = 0
 6435.                   do
 6437.                      $I_L6437_956 = 0
 6437. !dir$ ivdep
 6437.                      do
 6438.                         a(1 + $I_L6437_956, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, 1 + $I_L6435_1026) = a(1 + $I_L6437_956, $I_L6251_1123 + -n_red_eigensystem + n_layer * n_red_eigensystem * 2 + 1, 1 + $I_L6435_1026) * theta(1 + $I_L6437_956, 1 + $I_L6435_1026, $i_below_S41)
 6439.                         $I_L6437_956 = 1 + $I_L6437_956
 6437.                         if ( $I_L6437_956 >= n_profile ) exit
 6437.                      enddo
 6440.                      $I_L6435_1026 = 1 + $I_L6435_1026
 6439.                      if ( $I_L6435_1026 >= n_red_eigensystem ) exit
 6439.                   enddo
 6439.                endif
 6439.             endif
 6442.             $I_L6251_1123 = 1 + $I_L6251_1123
 6440.             if ( $I_L6251_1123 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
 6440.          enddo
 6440.       endif
 6445.       if ( i_sph_algorithm == 2 ) then
 6448.          call calc_surf_rad( n_profile, n_layer, tau(1, 1), ms, ls_trunc, euler_factor, isolir, i_direct(1, n_layer), mu_0(1), d_planck_flux_surface(1), n_brdf_basis_fnc, ls_brdf_trunc, f_brdf(1, 0, 0, 0), rho_alb(1, 1), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), cgk(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, mu_v(1, 1), up_lm(1, 1, 1), azim_factor(1, 1), n_red_eigensystem, eig_vec(1, 1, 1, $i_below_S41), theta(1, 1, $i_below_S41), source_bottom(1, 1, $i_below_S41), radiance(1, 1, 1), weight_u(1, 1, 1, n_layer * n_red_eigensystem * 2 + -2 * n_red_eigensystem + 1), nd_profile, nd_layer, nd_direction, nd_viewing_level, nd_red_eigensystem, nd_max_order, nd_brdf_basis_fnc, nd_brdf_trunc )
 6465.          if ( ms == 0 ) then
 6466.             call calc_top_rad( n_profile, tau(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, mu_v(1, 1), flux_down_inc(1), radiance(1, 1, 1), nd_profile, nd_layer, nd_direction, nd_viewing_level )
 6466.          endif
 6466.       endif
 5595.       _free( t$1750 )
 6479.       return
 6479.       end
 6479.       
 6768.       
 6768.       subroutine calc_brdf( isolir, ms_min, ms_max, ia_sph_mm, uplm_sol, uplm_zero, n_brdf_basis_fnc, ls_brdf_trunc, f_brdf, n_profile, n_direction, direction, brdf_sol, brdf_hemi, nd_profile, nd_radiance_profile, nd_direction, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc )
 6516.       t$218 = nd_max_order
 6516.       t$1805 = 1 + nd_max_order
 6569.       t$1806 = _zla( 0, 1 + nd_max_order )
 6516.       t$225 = nd_profile
 6516.       t$219 = nd_sph_coeff
 6590.       t$1807 = _zla( 0, nd_profile )
 6516.       t$1808 = _zla( 0, nd_profile )
 6590.       t$1809 = _zla( 0, nd_sph_coeff )
 6516.       t$1810 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_coeff )
 6516.       t$220 = nd_brdf_basis_fnc
 6516.       t$221 = nd_brdf_trunc / 2
 6516.       t$222 = nd_brdf_trunc
 6580.       t$1811 = _zla( 0, nd_brdf_basis_fnc )
 6516.       t$1812 = _zla( 0, nd_brdf_basis_fnc )
 6516.       t$1813 = 1 + nd_brdf_trunc / 2
 6580.       t$1814 = _zla( 0, 1 + nd_brdf_trunc / 2 )
 6516.       t$1815 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 6516.       t$1816 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 6516.       t$1817 = 1 + nd_brdf_trunc
 6580.       t$1818 = _zla( 0, 1 + nd_brdf_trunc )
 6516.       t$1819 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
 6516.       t$223 = nd_radiance_profile
 6516.       t$224 = nd_direction
 6587.       t$1820 = _zla( 0, nd_radiance_profile )
 6516.       t$1821 = _zla( 0, nd_radiance_profile )
 6587.       t$1822 = _zla( 0, nd_direction )
 6516.       t$1823 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
 6516.       t$1824 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
 6516.       t$1825 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 6516.       t$1826 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
 6516.       t$1827 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
 6627.       t$1830 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
 6516.       t$226 = ( 1 + nd_brdf_trunc )
 6632.       t$1831 = _zla( 0, ( 1 + nd_brdf_trunc ) )
 6632.       t$1832 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
 6632.       t$1834 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 8 * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6629.       t$1835 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 8 * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6629.       t$1837 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6516.       t$1838 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_brdf_trunc )
 6625.       t$1839 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6625.       t$1841 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_brdf_trunc ) * 8
 6516.       t$1842 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6516.       t$1843 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6622.       t$1844 = 16 * _zla( 0, ( 1 + nd_brdf_trunc ) ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_brdf_trunc ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
 6622.       t$1846 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_brdf_trunc ) ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_brdf_trunc ) * 8
 6516.       t$1828 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_brdf_trunc ) ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_brdf_trunc ) * 8 ), 8 )
 6627.       t$1829 = t$1828
 6632.       t$1833 = t$1828 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
 6629.       t$1836 = t$1828 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 8 * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6625.       t$1840 = t$1828 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) )
 6622.       t$1845 = t$1828 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + 16 * _zla( 0, ( 1 + nd_brdf_trunc ) ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_brdf_trunc ) * 8
 6641.       if ( isolir == 1 ) then
 6644.          if ( n_direction > 0 ) then
 6645.             if ( n_brdf_basis_fnc > 0 ) then
 6646.                if ( n_profile > 0 ) then
 6644.                   $I_L6644_477 = 0
 6644.                   do
 6645.                      $I_L6645_451 = 0
 6645.                      do
 6646.                         $I_L6646_404 = 0
 6646. !dir$ ivdep
 6646. !dir$ loop_info (automatic) cache_nt( brdf_sol )
 6646.                         do
 6647.                            brdf_sol(1 + $I_L6646_404, 1 + $I_L6645_451, 1 + $I_L6644_477) = 0.0
 6648.                            $I_L6646_404 = 1 + $I_L6646_404
 6646.                            if ( $I_L6646_404 >= n_profile ) exit
 6646.                         enddo
 6649.                         $I_L6645_451 = 1 + $I_L6645_451
 6648.                         if ( $I_L6645_451 >= n_brdf_basis_fnc ) exit
 6648.                      enddo
 6650.                      $I_L6644_477 = 1 + $I_L6644_477
 6649.                      if ( $I_L6644_477 >= n_direction ) exit
 6649.                   enddo
 6649.                endif
 6649.             endif
 6649.          endif
 6653.          if ( min( ms_max, ls_brdf_trunc ) + -ms_min >= 0 ) then
 6653.             $I_L6653_511 = 0
 6653.             do
 6656.                if ( ms_min + $I_L6653_511 == 0 ) then
 6657.                   if ( n_direction > 0 ) then
 6658.                      if ( n_profile > 0 ) then
 6657.                         $I_L6657_455 = 0
 6657.                         do
 6658.                            $I_L6658_408 = 0
 6658. !dir$ ivdep
 6658. !dir$ loop_info (automatic) cache_nt( azim_factor )
 6658.                            do
 6659.                               azim_factor(1 + $I_L6658_408, 1 + $I_L6657_455) = 1.0
 6660.                               $I_L6658_408 = 1 + $I_L6658_408
 6658.                               if ( $I_L6658_408 >= n_profile ) exit
 6658.                            enddo
 6661.                            $I_L6657_455 = 1 + $I_L6657_455
 6660.                            if ( $I_L6657_455 >= n_direction ) exit
 6660.                         enddo
 6660.                      endif
 6660.                   endif
 6662.                else if ( n_direction > 0 ) then
 6664.                   if ( n_profile > 0 ) then
 6663.                      $I_L6663_453 = 0
 6663.                      do
 6664.                         $I_L6664_406 = 0
 6664. !dir$ ivdep
 6664. !dir$ loop_info (automatic) cache_nt( azim_factor )
 6664.                         do
 6665.                            azim_factor(1 + $I_L6664_406, 1 + $I_L6663_453) = 2.0 * cos( real( ms_min + $I_L6653_511, 8 ) * direction(1 + $I_L6664_406, 1 + $I_L6663_453, 2) )
 6667.                            $I_L6664_406 = 1 + $I_L6664_406
 6664.                            if ( $I_L6664_406 >= n_profile ) exit
 6664.                         enddo
 6668.                         $I_L6663_453 = 1 + $I_L6663_453
 6667.                         if ( $I_L6663_453 >= n_direction ) exit
 6667.                      enddo
 6667.                   endif
 6667.                endif
 6673.                if ( n_direction > 0 ) then
 6673.                   $I_L6673_479 = 0
 6673.                   do
 6674.                      ipa$10932 = loc( direction(1, 1 + $I_L6673_479, 1) )
 6674.                      x = _copyin( direction(1, 1 + $I_L6673_479, 1) )
 6674.                      ipa$10934 = loc( up_lm(1, 1, 1 + $I_L6673_479) )
 6674.                      up_lm = _copyin( up_lm(1, 1, 1 + $I_L6673_479) )
 6674.                      t$402 = nd_profile
 6674.                      t$2327 = max( 0, nd_profile )
 6674.                      t$403 = ls_brdf_trunc + -ms_min + -$I_L6653_511 + 1
 6674.                      t$2328 = nd_profile
 6674.                      t$2329 = max( 0, ls_brdf_trunc + -ms_min + -$I_L6653_511 + 1 )
 6674.                      t$2330 = nd_profile * max( 0, ls_brdf_trunc + -ms_min + -$I_L6653_511 + 1 )
 6674.                      product = 1.0
 6674.                      if ( ( ms_min + $I_L6653_511 ) > 0 ) then
 6674.                         $I_L6674_410 = 0
 6674. !dir$ ivdep
 6674.                         do
 6674.                            product = ( 1.0 + -( 5.0e-1 * 1.0/( ( 1 + $I_L6674_410 ) ) ) ) * product
 6674.                            $I_L6674_410 = 1 + $I_L6674_410
 6674.                            if ( $I_L6674_410 >= ms_min + $I_L6653_511 ) exit
 6674.                         enddo
 6674.                         if ( n_profile > 0 ) then
 6674.                            $I_L6674_412 = 0
 6674. !dir$ ivdep
 6674.                            do
 6674.                               up_lm(1 + $I_L6674_412, 1) = cvmg( -1.0, 1.0, and( 1, ( ms_min + $I_L6653_511 ) ) /= 0 ) * _sqrt( ( 1.0 + -( x(1 + $I_L6674_412) * x(1 + $I_L6674_412) ) ) ** ( ms_min + $I_L6653_511 ) * product * ( 1.0 + 2.0 * real( ms_min + $I_L6653_511, 8 ) ) * 7.9577471545947673e-2 )
 6674.                               $I_L6674_412 = 1 + $I_L6674_412
 6674.                               if ( $I_L6674_412 >= n_profile ) exit
 6674.                            enddo
 6674.                         endif
 6674.                      else if ( n_profile > 0 ) then
 6674.                         $I_L6674_414 = 0
 6674. !dir$ ivdep
 6674.                         do
 6674.                            up_lm(1 + $I_L6674_414, 1) = 2.8209479177387814e-1
 6674.                            $I_L6674_414 = 1 + $I_L6674_414
 6674.                            if ( $I_L6674_414 >= n_profile ) exit
 6674.                         enddo
 6674.                      endif
 6674.                      if ( ( ms_min + $I_L6653_511 ) < ls_brdf_trunc ) then
 6674.                         if ( n_profile > 0 ) then
 6674.                            $I_L6674_416 = 0
 6674. !dir$ ivdep
 6674.                            do
 6674.                               up_lm(1 + $I_L6674_416, 2) = x(1 + $I_L6674_416) * _sqrt( 3.0 + 2.0 * real( ms_min + $I_L6653_511, 8 ) ) * up_lm(1 + $I_L6674_416, 1)
 6674.                               $I_L6674_416 = 1 + $I_L6674_416
 6674.                               if ( $I_L6674_416 >= n_profile ) exit
 6674.                            enddo
 6674.                         endif
 6674.                      endif
 6674.                      if ( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + -2 ) >= 0 ) then
 6674.                         if ( n_profile > 0 ) then
 6674.                            $I_L6674_457 = 0
 6674.                            do
 6674.                               $I_L6674_418 = 0
 6674. !dir$ ivdep
 6674.                               do
 6674.                                  up_lm(1 + $I_L6674_418, 3 + $I_L6674_457) = x(1 + $I_L6674_418) * _sqrt( ( ( -1.0 + 2.0 * real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) ) * ( 1.0 + 2.0 * real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) ) ) * 1.0/( ( real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) + real( ms_min + $I_L6653_511, 8 ) ) * ( real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) + -( real( ms_min + $I_L6653_511, 8 ) ) ) ) ) * up_lm(1 + $I_L6674_418, 2 + $I_L6674_457) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) ) * ( -( real( ms_min + $I_L6653_511, 8 ) ) + real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) + -1.0 ) * ( real( ms_min + $I_L6653_511, 8 ) + real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) ) * ( real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) + real( ms_min + $I_L6653_511, 8 ) ) * ( real( ms_min + $I_L6674_457 + $I_L6653_511 + 2, 8 ) + -( real( ms_min + $I_L6653_511, 8 ) ) ) ) ) * up_lm(1 + $I_L6674_418, 1 + $I_L6674_457) )
 6674.                                  $I_L6674_418 = 1 + $I_L6674_418
 6674.                                  if ( $I_L6674_418 >= n_profile ) exit
 6674.                               enddo
 6674.                               $I_L6674_457 = 1 + $I_L6674_457
 6674.                               if ( $I_L6674_457 >= ls_brdf_trunc + -ms_min + -$I_L6653_511 + -1 ) exit
 6674.                            enddo
 6674.                         endif
 6674.                      endif
 6674.                      up_lm(1, 1, 1 + $I_L6673_479) = _copyout( up_lm )
 6674.                      direction(1, 1 + $I_L6673_479, 1) = _copyout( x )
 6677.                      $I_L6673_479 = 1 + $I_L6673_479
 6674.                      if ( $I_L6673_479 >= n_direction ) exit
 6674.                   enddo
 6674.                endif
 6680.                if ( n_brdf_basis_fnc > 0 ) then
 6680.                   $I_L6680_507 = 0
 6680.                   do
 6685.                      if ( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 ) >= 0 ) then
 6685.                         $I_L6685_481 = 0
 6685.                         do
 6686.                            if ( n_profile > 0 ) then
 6686.                               $SCA_f_brdf_I6 = f_brdf(1 + $I_L6680_507, ( ms_min + $I_L6653_511 + 2 * $I_L6685_481 ) / 2, ( ms_min + $I_L6653_511 ) / 2, ms_min + $I_L6653_511)
 6687.                               $SC_ia_sph_mm_I8 = ia_sph_mm(ms_min + $I_L6653_511)
 6686.                               $I_L6686_420 = 0
 6686. !dir$ ivdep
 6686.                               do
 6687.                                  ss1(1 + $I_L6686_420, ms_min + $I_L6653_511 + 2 * $I_L6685_481) = $SCA_f_brdf_I6 * uplm_sol(1 + $I_L6686_420, $SC_ia_sph_mm_I8)
 6689.                                  $I_L6686_420 = 1 + $I_L6686_420
 6686.                                  if ( $I_L6686_420 >= n_profile ) exit
 6686.                               enddo
 6686.                            endif
 6690.                            if ( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + -2 ) >= 0 ) then
 6691.                               if ( n_profile > 0 ) then
 6692.                                  $SC_ia_sph_mm_I8 = ia_sph_mm(ms_min + $I_L6653_511)
 6690.                                  $I_L6690_459 = 0
 6690. !dir$ blocking_size( 0, 0 )
 6690.                                  do
 6691.                                     $SCA_f_brdf_I7 = f_brdf(1 + $I_L6680_507, ( ms_min + $I_L6653_511 + 2 * $I_L6685_481 ) / 2, ( ms_min + $I_L6653_511 + 2 * $I_L6690_459 + 2 ) / 2, ms_min + $I_L6653_511)
 6691.                                     $I_L6691_422 = 0
 6691. !dir$ ivdep
 6691. !dir$ blocking_size( 0, 0 )
 6691.                                     do
 6692.                                        ss1(1 + $I_L6691_422, ms_min + $I_L6653_511 + 2 * $I_L6685_481) = $SCA_f_brdf_I7 * uplm_sol(1 + $I_L6691_422, $SC_ia_sph_mm_I8 + 2 * $I_L6690_459 + 2)
 6694.                                        $I_L6691_422 = 1 + $I_L6691_422
 6691.                                        if ( $I_L6691_422 >= n_profile ) exit
 6691.                                     enddo
 6695.                                     $I_L6690_459 = 1 + $I_L6690_459
 6694.                                     if ( $I_L6690_459 >= ( ls_brdf_trunc + -ms_min + -$I_L6653_511 ) / 2 ) exit
 6694.                                  enddo
 6694.                               endif
 6694.                            endif
 6696.                            $I_L6685_481 = 1 + $I_L6685_481
 6695.                            if ( $I_L6685_481 >= ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2 ) exit
 6695.                         enddo
 6695.                      endif
 6700.                      if ( n_direction > 0 ) then
 6701.                         if ( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 ) >= 0 ) then
 6702.                            if ( n_profile > 0 ) then
 6700.                               $I_L6700_505 = 0
 6700.                               do
 6701.                                  $I_L6701_499 = 0
 6701.                                  do
 6702.                                     $I_L6702_497 = 0
 6702.                                     do
 6700.                                        $I_L6700_483 = 0
 6700.                                        if ( min( n_direction, 8 + 8 * $I_L6700_505 ) + -8 * $I_L6700_505 >= 2 ) then
 6700.                                           $I_L6700_517 = 0
 6700. !dir$ shortloop16
 6700. !dir$ blocking_size( 8, 8 )
 6700.                                           do
 6701.                                              $I_L6701_472 = 0
 6701.                                              if ( min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499 >= 2 ) then
 6701.                                                 $I_L6701_513 = 0
 6701. !dir$ shortloop16
 6701. !dir$ blocking_size( 8, 8 )
 6701.                                                 do
 6702.                                                    $I_L6702_424 = 0
 6702. !dir$ ivdep
 6702. !dir$ blocking_size( 256, 256 )
 6702.                                                    do
 6703.                                                       brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 16 * $I_L6701_499 + 4 * $I_L6701_513) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 16 * $I_L6701_499 + 4 * $I_L6701_513 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1)
 6703.                                                       brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 16 * $I_L6701_499 + 4 * $I_L6701_513) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 16 * $I_L6701_499 + 4 * $I_L6701_513 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2)
 6703.                                                       brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 16 * $I_L6701_499 + 4 * $I_L6701_513 + 2) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 16 * $I_L6701_499 + 4 * $I_L6701_513 + 3, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1)
 6703.                                                       brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 16 * $I_L6701_499 + 4 * $I_L6701_513 + 2) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 16 * $I_L6701_499 + 4 * $I_L6701_513 + 3, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2)
 6702.                                                       $I_L6702_424 = 1 + $I_L6702_424
 6702.                                                       if ( $I_L6702_424 >= min( n_profile, 256 + 256 * $I_L6702_497 ) + -256 * $I_L6702_497 ) exit
 6702.                                                    enddo
 6701.                                                    $I_L6701_513 = 1 + $I_L6701_513
 6701.                                                    if ( $I_L6701_513 >= _rsh( min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499, 1 ) ) exit
 6701.                                                 enddo
 6701.                                                 $I_L6701_472 = and( 0xfffffffffffffffeUL, min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499 )
 6701.                                              endif
 6701.                                              if ( $I_L6701_472 < min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499 ) then
 6702.                                                 $I_L6702_424 = 0
 6702. !dir$ ivdep
 6702. !dir$ blocking_size( 256, 256 )
 6702.                                                 do
 6703.                                                    brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 2 * $I_L6701_472 + 16 * $I_L6701_499) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 2 * $I_L6701_472 + 16 * $I_L6701_499 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 1)
 6703.                                                    brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 2 * $I_L6701_472 + 16 * $I_L6701_499) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 2 * $I_L6701_472 + 16 * $I_L6701_499 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, 8 * $I_L6700_505 + 2 * $I_L6700_517 + 2)
 6702.                                                    $I_L6702_424 = 1 + $I_L6702_424
 6702.                                                    if ( $I_L6702_424 >= min( n_profile, 256 + 256 * $I_L6702_497 ) + -256 * $I_L6702_497 ) exit
 6702.                                                 enddo
 6702.                                              endif
 6700.                                              $I_L6700_517 = 1 + $I_L6700_517
 6706.                                              if ( $I_L6700_517 >= _rsh( min( n_direction, 8 + 8 * $I_L6700_505 ) + -8 * $I_L6700_505, 1 ) ) exit
 6706.                                           enddo
 6700.                                           $I_L6700_483 = and( 0xfffffffffffffffeUL, min( n_direction, 8 + 8 * $I_L6700_505 ) + -8 * $I_L6700_505 )
 6700.                                        endif
 6700.                                        if ( $I_L6700_483 < min( n_direction, 8 + 8 * $I_L6700_505 ) + -8 * $I_L6700_505 ) then
 6701.                                           $I_L6701_472 = 0
 6701.                                           if ( min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499 >= 2 ) then
 6701.                                              $I_L6701_515 = 0
 6701. !dir$ shortloop16
 6701. !dir$ blocking_size( 8, 8 )
 6701.                                              do
 6702.                                                 $I_L6702_424 = 0
 6702. !dir$ ivdep
 6702. !dir$ blocking_size( 256, 256 )
 6702.                                                 do
 6703.                                                    brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, $I_L6700_483 + 8 * $I_L6700_505 + 1) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, $I_L6700_483 + 8 * $I_L6700_505 + 1) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 16 * $I_L6701_499 + 4 * $I_L6701_515) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 16 * $I_L6701_499 + 4 * $I_L6701_515 + 1, $I_L6700_483 + 8 * $I_L6700_505 + 1) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, $I_L6700_483 + 8 * $I_L6700_505 + 1) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 16 * $I_L6701_499 + 4 * $I_L6701_515 + 2) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 16 * $I_L6701_499 + 4 * $I_L6701_515 + 3, $I_L6700_483 + 8 * $I_L6700_505 + 1) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, $I_L6700_483 + 8 * $I_L6700_505 + 1)
 6702.                                                    $I_L6702_424 = 1 + $I_L6702_424
 6702.                                                    if ( $I_L6702_424 >= min( n_profile, 256 + 256 * $I_L6702_497 ) + -256 * $I_L6702_497 ) exit
 6702.                                                 enddo
 6701.                                                 $I_L6701_515 = 1 + $I_L6701_515
 6701.                                                 if ( $I_L6701_515 >= _rsh( min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499, 1 ) ) exit
 6701.                                              enddo
 6701.                                              $I_L6701_472 = and( 0xfffffffffffffffeUL, min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499 )
 6701.                                           endif
 6701.                                           if ( $I_L6701_472 < min( ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 8 + 8 * $I_L6701_499 ) + -8 * $I_L6701_499 ) then
 6702.                                              $I_L6702_424 = 0
 6702. !dir$ ivdep
 6702. !dir$ blocking_size( 256, 256 )
 6702.                                              do
 6703.                                                 brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, $I_L6700_483 + 8 * $I_L6700_505 + 1) = brdf_sol($I_L6702_424 + 256 * $I_L6702_497 + 1, 1 + $I_L6680_507, $I_L6700_483 + 8 * $I_L6700_505 + 1) + ss1($I_L6702_424 + 256 * $I_L6702_497 + 1, ms_min + $I_L6653_511 + 2 * $I_L6701_472 + 16 * $I_L6701_499) * up_lm($I_L6702_424 + 256 * $I_L6702_497 + 1, 2 * $I_L6701_472 + 16 * $I_L6701_499 + 1, $I_L6700_483 + 8 * $I_L6700_505 + 1) * azim_factor($I_L6702_424 + 256 * $I_L6702_497 + 1, $I_L6700_483 + 8 * $I_L6700_505 + 1)
 6702.                                                 $I_L6702_424 = 1 + $I_L6702_424
 6702.                                                 if ( $I_L6702_424 >= min( n_profile, 256 + 256 * $I_L6702_497 ) + -256 * $I_L6702_497 ) exit
 6702.                                              enddo
 6702.                                           endif
 6702.                                        endif
 6702.                                        $I_L6702_497 = 1 + $I_L6702_497
 6702.                                        if ( $I_L6702_497 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
 6702.                                     enddo
 6701.                                     $I_L6701_499 = 1 + $I_L6701_499
 6707.                                     if ( $I_L6701_499 >= 1 + max( 0, -1 + _rsh( 7 + ( ls_brdf_trunc + -ms_min + -$I_L6653_511 + 2 ) / 2, 3 ) ) ) exit
 6707.                                  enddo
 6700.                                  $I_L6700_505 = 1 + $I_L6700_505
 6700.                                  if ( $I_L6700_505 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
 6700.                               enddo
 6700.                            endif
 6700.                         endif
 6700.                      endif
 6710.                      $I_L6680_507 = 1 + $I_L6680_507
 6708.                      if ( $I_L6680_507 >= n_brdf_basis_fnc ) exit
 6708.                   enddo
 6708.                endif
 6712.                $I_L6653_511 = 1 + $I_L6653_511
 6710.                if ( $I_L6653_511 >= min( ms_max, ls_brdf_trunc ) + -ms_min + 1 ) exit
 6710.             enddo
 6710.          endif
 6714.       else if ( isolir == 2 ) then
 6717.          if ( n_direction > 0 ) then
 6718.             if ( n_brdf_basis_fnc > 0 ) then
 6719.                if ( n_profile > 0 ) then
 6717.                   $I_L6717_475 = 0
 6717.                   do
 6718.                      $I_L6718_449 = 0
 6718.                      do
 6719.                         $I_L6719_402 = 0
 6719. !dir$ ivdep
 6719.                         do
 6720.                            brdf_hemi(1 + $I_L6719_402, 1 + $I_L6718_449, 1 + $I_L6717_475) = 0.0
 6721.                            $I_L6719_402 = 1 + $I_L6719_402
 6719.                            if ( $I_L6719_402 >= n_profile ) exit
 6719.                         enddo
 6722.                         $I_L6718_449 = 1 + $I_L6718_449
 6721.                         if ( $I_L6718_449 >= n_brdf_basis_fnc ) exit
 6721.                      enddo
 6723.                      $I_L6717_475 = 1 + $I_L6717_475
 6722.                      if ( $I_L6717_475 >= n_direction ) exit
 6722.                   enddo
 6722.                endif
 6722.             endif
 6722.          endif
 6726.          if ( ms_min <= 0 ) then
 6729.             $SC_uplm_zero_I1 = uplm_zero(2)
 6729.             $SC_ia_sph_mm_I0 = ia_sph_mm(0)
 6726.             $I_L6726_509 = 0
 6726.             do
 6728.                if ( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 1 ) > 0 ) then
 6728.                   $I_L6728_427 = 0
 6728. !dir$ ivdep
 6728. !dir$ loop_info (automatic) cache_nt( uplm_zero, kappa )
 6728.                   do
 6729.                      kappa(1 + 2 * $I_L6728_427) = ( $SC_uplm_zero_I1 * uplm_zero($SC_ia_sph_mm_I0 + 2 * $I_L6728_427) * 1.0/( ( -lsr + -2 * ms_min + 2 * $I_L6728_427 + lsr * $I_L6728_427 * 2 + ms_min * $I_L6728_427 * 4 + -2 * $I_L6726_509 + $I_L6728_427 * $I_L6726_509 * 4 + -1 ) ) * 6.2831853071795862 )
 6732.                      $I_L6728_427 = 1 + $I_L6728_427
 6728.                      if ( $I_L6728_427 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6728.                   enddo
 6728.                endif
 6736.                if ( n_direction > 0 ) then
 6736.                   $I_L6736_486 = 0
 6736.                   do
 6737.                      ipa$10948 = loc( direction(1, 1 + $I_L6736_486, 1) )
 6737.                      x = _copyin( direction(1, 1 + $I_L6736_486, 1) )
 6737.                      ipa$10950 = loc( up_lm(1, 1, 1 + $I_L6736_486) )
 6737.                      up_lm = _copyin( up_lm(1, 1, 1 + $I_L6736_486) )
 6737.                      t$402 = nd_profile
 6737.                      t$2327 = max( 0, nd_profile )
 6737.                      t$403 = ls_brdf_trunc + -ms_min + -$I_L6726_509 + 1
 6737.                      t$2328 = nd_profile
 6737.                      t$2329 = max( 0, ls_brdf_trunc + -ms_min + -$I_L6726_509 + 1 )
 6737.                      t$2330 = nd_profile * max( 0, ls_brdf_trunc + -ms_min + -$I_L6726_509 + 1 )
 6737.                      if ( n_profile > 0 ) then
 6737.                         $I_L6737_429 = 0
 6737. !dir$ ivdep
 6737.                         do
 6737.                            up_lm(1 + $I_L6737_429, 1) = 2.8209479177387814e-1
 6737.                            $I_L6737_429 = 1 + $I_L6737_429
 6737.                            if ( $I_L6737_429 >= n_profile ) exit
 6737.                         enddo
 6737.                      endif
 6737.                      if ( ( ms_min + $I_L6726_509 ) < ls_brdf_trunc ) then
 6737.                         if ( n_profile > 0 ) then
 6737.                            $I_L6737_431 = 0
 6737. !dir$ ivdep
 6737.                            do
 6737.                               up_lm(1 + $I_L6737_431, 2) = x(1 + $I_L6737_431) * _sqrt( 3.0 + 2.0 * real( ms_min + $I_L6726_509, 8 ) ) * up_lm(1 + $I_L6737_431, 1)
 6737.                               $I_L6737_431 = 1 + $I_L6737_431
 6737.                               if ( $I_L6737_431 >= n_profile ) exit
 6737.                            enddo
 6737.                         endif
 6737.                      endif
 6737.                      if ( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + -2 ) >= 0 ) then
 6737.                         if ( n_profile > 0 ) then
 6737.                            $I_L6737_461 = 0
 6737.                            do
 6737.                               $I_L6737_433 = 0
 6737. !dir$ ivdep
 6737.                               do
 6737.                                  up_lm(1 + $I_L6737_433, 3 + $I_L6737_461) = x(1 + $I_L6737_433) * _sqrt( ( ( -1.0 + 2.0 * real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) ) * ( 1.0 + 2.0 * real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) ) ) * 1.0/( ( real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) + real( ms_min + $I_L6726_509, 8 ) ) * ( real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) + -( real( ms_min + $I_L6726_509, 8 ) ) ) ) ) * up_lm(1 + $I_L6737_433, 2 + $I_L6737_461) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) ) * ( -( real( ms_min + $I_L6726_509, 8 ) ) + real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) + -1.0 ) * ( real( ms_min + $I_L6726_509, 8 ) + real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) ) * ( real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) + real( ms_min + $I_L6726_509, 8 ) ) * ( real( ms_min + $I_L6737_461 + $I_L6726_509 + 2, 8 ) + -( real( ms_min + $I_L6726_509, 8 ) ) ) ) ) * up_lm(1 + $I_L6737_433, 1 + $I_L6737_461) )
 6737.                                  $I_L6737_433 = 1 + $I_L6737_433
 6737.                                  if ( $I_L6737_433 >= n_profile ) exit
 6737.                               enddo
 6737.                               $I_L6737_461 = 1 + $I_L6737_461
 6737.                               if ( $I_L6737_461 >= ls_brdf_trunc + -ms_min + -$I_L6726_509 + -1 ) exit
 6737.                            enddo
 6737.                         endif
 6737.                      endif
 6737.                      up_lm(1, 1, 1 + $I_L6736_486) = _copyout( up_lm )
 6737.                      direction(1, 1 + $I_L6736_486, 1) = _copyout( x )
 6740.                      $I_L6736_486 = 1 + $I_L6736_486
 6737.                      if ( $I_L6736_486 >= n_direction ) exit
 6737.                   enddo
 6737.                endif
 6743.                if ( n_brdf_basis_fnc > 0 ) then
 6745.                   if ( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 1 ) <= 0 ) then
 6745.                      lsr = 1
 6745.                   else if ( n_direction <= 0 ) then
 6743.                      $I_L6743_488 = 0
 6743.                      do
 6745.                         $I_L6745_441 = 0
 6745. !dir$ ivdep
 6745.                         do
 6746.                            fk(1 + 2 * $I_L6745_441) = 0.0
 6757.                            $I_L6745_441 = 1 + $I_L6745_441
 6756.                            if ( $I_L6745_441 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6756.                         enddo
 6747.                         $I_L6747_468 = 0
 6747.                         do
 6745.                            $SCA_kappa_I3 = kappa(1 + 2 * $I_L6747_468)
 6745.                            $I_L6745_443 = 0
 6745. !dir$ ivdep
 6745.                            do
 6748.                               fk(1 + 2 * $I_L6745_443) = fk(1 + 2 * $I_L6745_443) + $SCA_kappa_I3 * f_brdf(1 + $I_L6743_488, ( ms_min + $I_L6726_509 + 2 * $I_L6745_443 ) / 2, ( ms_min + $I_L6726_509 + 2 * $I_L6747_468 ) / 2, ms_min + $I_L6726_509)
 6757.                               $I_L6745_443 = 1 + $I_L6745_443
 6747.                               if ( $I_L6745_443 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6747.                            enddo
 6750.                            $I_L6747_468 = 1 + $I_L6747_468
 6756.                            if ( $I_L6747_468 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6756.                         enddo
 6759.                         $I_L6743_488 = 1 + $I_L6743_488
 6757.                         if ( $I_L6743_488 >= n_brdf_basis_fnc ) exit
 6757.                      enddo
 6757.                      lsr = ( 1 + 2 * ( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) )
 6757.                   else if ( n_profile > 0 ) then
 6743.                      $I_L6743_503 = 0
 6743.                      do
 6745.                         $I_L6745_435 = 0
 6745. !dir$ ivdep
 6745.                         do
 6746.                            fk(1 + 2 * $I_L6745_435) = 0.0
 6757.                            $I_L6745_435 = 1 + $I_L6745_435
 6756.                            if ( $I_L6745_435 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6756.                         enddo
 6747.                         $I_L6747_463 = 0
 6747.                         do
 6745.                            $SCA_kappa_I5 = kappa(1 + 2 * $I_L6747_463)
 6745.                            $I_L6745_437 = 0
 6745. !dir$ ivdep
 6745.                            do
 6748.                               fk(1 + 2 * $I_L6745_437) = fk(1 + 2 * $I_L6745_437) + $SCA_kappa_I5 * f_brdf(1 + $I_L6743_503, ( ms_min + $I_L6726_509 + 2 * $I_L6745_437 ) / 2, ( ms_min + $I_L6726_509 + 2 * $I_L6747_463 ) / 2, ms_min + $I_L6726_509)
 6757.                               $I_L6745_437 = 1 + $I_L6745_437
 6747.                               if ( $I_L6745_437 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6747.                            enddo
 6750.                            $I_L6747_463 = 1 + $I_L6747_463
 6756.                            if ( $I_L6747_463 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6756.                         enddo
 6751.                         $I_L6751_501 = 0
 6751.                         do
 6745.                            $I_L6745_495 = 0
 6745.                            do
 6751.                               $I_L6751_492 = 0
 6751. !dir$ shortloop16
 6751. !dir$ blocking_size( 16, 16 )
 6751.                               do
 6745.                                  $I_L6745_465 = 0
 6745. !dir$ shortloop16
 6745. !dir$ blocking_size( 16, 16 )
 6745.                                  do
 6752.                                     $SCA_fk_I4 = fk(2 * $I_L6745_465 + 32 * $I_L6745_495 + 1)
 6752.                                     $I_L6752_439 = 0
 6752. !dir$ ivdep
 6752.                                     do
 6753.                                        brdf_hemi(1 + $I_L6752_439, 1 + $I_L6743_503, $I_L6751_492 + 16 * $I_L6751_501 + 1) = brdf_hemi(1 + $I_L6752_439, 1 + $I_L6743_503, $I_L6751_492 + 16 * $I_L6751_501 + 1) + $SCA_fk_I4 * up_lm(1 + $I_L6752_439, 2 * $I_L6745_465 + 32 * $I_L6745_495 + 1, $I_L6751_492 + 16 * $I_L6751_501 + 1)
 6755.                                        $I_L6752_439 = 1 + $I_L6752_439
 6752.                                        if ( $I_L6752_439 >= n_profile ) exit
 6752.                                     enddo
 6745.                                     $I_L6745_465 = 1 + $I_L6745_465
 6755.                                     if ( $I_L6745_465 >= min( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2, 16 + 16 * $I_L6745_495 ) + -16 * $I_L6745_495 ) exit
 6755.                                  enddo
 6751.                                  $I_L6751_492 = 1 + $I_L6751_492
 6751.                                  if ( $I_L6751_492 >= min( n_direction, 16 + 16 * $I_L6751_501 ) + -16 * $I_L6751_501 ) exit
 6751.                               enddo
 6745.                               $I_L6745_495 = 1 + $I_L6745_495
 6756.                               if ( $I_L6745_495 >= 1 + max( 0, -1 + _rsh( 15 + ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2, 4 ) ) ) exit
 6756.                            enddo
 6751.                            $I_L6751_501 = 1 + $I_L6751_501
 6751.                            if ( $I_L6751_501 >= 1 + max( 0, -1 + _rsh( 15 + n_direction, 4 ) ) ) exit
 6751.                         enddo
 6759.                         $I_L6743_503 = 1 + $I_L6743_503
 6757.                         if ( $I_L6743_503 >= n_brdf_basis_fnc ) exit
 6757.                      enddo
 6757.                      lsr = ( 1 + 2 * ( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) )
 6757.                   else
 6743.                      $I_L6743_490 = 0
 6743.                      do
 6745.                         $I_L6745_445 = 0
 6745. !dir$ ivdep
 6745.                         do
 6746.                            fk(1 + 2 * $I_L6745_445) = 0.0
 6757.                            $I_L6745_445 = 1 + $I_L6745_445
 6756.                            if ( $I_L6745_445 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6756.                         enddo
 6747.                         $I_L6747_470 = 0
 6747.                         do
 6745.                            $SCA_kappa_I2 = kappa(1 + 2 * $I_L6747_470)
 6745.                            $I_L6745_447 = 0
 6745. !dir$ ivdep
 6745.                            do
 6748.                               fk(1 + 2 * $I_L6745_447) = fk(1 + 2 * $I_L6745_447) + $SCA_kappa_I2 * f_brdf(1 + $I_L6743_490, ( ms_min + $I_L6726_509 + 2 * $I_L6745_447 ) / 2, ( ms_min + $I_L6726_509 + 2 * $I_L6747_470 ) / 2, ms_min + $I_L6726_509)
 6757.                               $I_L6745_447 = 1 + $I_L6745_447
 6747.                               if ( $I_L6745_447 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6747.                            enddo
 6750.                            $I_L6747_470 = 1 + $I_L6747_470
 6756.                            if ( $I_L6747_470 >= ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) exit
 6756.                         enddo
 6759.                         $I_L6743_490 = 1 + $I_L6743_490
 6757.                         if ( $I_L6743_490 >= n_brdf_basis_fnc ) exit
 6757.                      enddo
 6757.                      lsr = ( 1 + 2 * ( ( ls_brdf_trunc + -ms_min + -$I_L6726_509 + 2 ) / 2 ) )
 6757.                   endif
 6757.                endif
 6761.                $I_L6726_509 = 1 + $I_L6726_509
 6759.                if ( $I_L6726_509 >= 1 + -ms_min ) exit
 6759.             enddo
 6759.          endif
 6759.       endif
 6516.       _free( t$1828 )
 6768.       return
 6768.       end
 6768.       
 6851.       
 6851.       subroutine calc_cg_coeff( ls_max_order, ia_sph_mm, ms_min, ms_trunc, cg_coeff, nd_max_order, nd_sph_coeff )
 6794.       t$228 = nd_max_order
 6794.       t$1847 = 1 + nd_max_order
 6821.       t$1848 = _zla( 0, 1 + nd_max_order )
 6794.       t$229 = nd_sph_coeff
 6825.       t$1849 = _zla( 0, nd_sph_coeff )
 6840.       if ( ls_max_order >= 0 ) then
 6840.          $I_L6840_10 = 0
 6840.          do
 6841.             $inv_S2 = 1.0/( ( 8 * $I_L6840_10 + $I_L6840_10 * $I_L6840_10 * 4 + 3 ) )
 6842.             $t_S1 = ms_trunc($I_L6840_10)
 6842.             if ( $t_S1 + -ms_min >= 0 ) then
 6842.                $I_L6842_8 = 0
 6842. !dir$ ivdep
 6842.                do
 6843.                   cg_coeff(ia_sph_mm(ms_min + $I_L6842_8) + $I_L6840_10 + -ms_min + -$I_L6842_8) = _sqrt( real( -( ( ms_min + $I_L6842_8 ) * ( ms_min + $I_L6842_8 ) ) + $I_L6840_10 * $I_L6840_10 + 2 * $I_L6840_10 + 1, 8 ) * $inv_S2 )
 6845.                   $I_L6842_8 = 1 + $I_L6842_8
 6842.                   if ( $I_L6842_8 >= $t_S1 + -ms_min + 1 ) exit
 6842.                enddo
 6842.             endif
 6846.             $I_L6840_10 = 1 + $I_L6840_10
 6845.             if ( $I_L6840_10 >= 1 + ls_max_order ) exit
 6845.          enddo
 6845.       endif
 6851.       return
 6851.       end
 6851.       
 7369.       
 7369.       subroutine calc_flux_ipa( ierr, n_profile, n_layer, n_cloud_top, l_scale_solar, adjust_solar_ke, i_2stream, i_solver, isolir, diff_planck, l_ir_source_quad, diff_planck_2, flux_inc_down, flux_inc_direct, sec_00, d_planck_flux_surface, rho_alb, ss_prop, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, flux_direct, flux_total, l_clear, i_solver_clear, flux_direct_clear, flux_total_clear, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_profile_column, nd_source_coeff )
 6871.       t$237 = nd_profile
 6871.       t$238 = nd_layer
 6965.       t$1850 = _zla( 0, nd_profile )
 6871.       t$1851 = _zla( 0, nd_profile )
 6965.       t$1852 = _zla( 0, nd_layer )
 6871.       t$1853 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 6871.       t$1854 = 2 * _zla( 0, nd_profile )
 2600.       if ( t$30 == 0 ) then
 2600.          t$1860(1) = 4
 2600.          t$1861(1) = 0
 2600.          t$1862(1) = 16
 2600.          t$1857(1) = int( loc( t$29 ), 8 )
 2600.          t$1858(1) = 0
 2600.          t$1859(1) = int( loc( t$1855 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$1857(1), t$1860(1), 1, t$1858(1), t$1859(1), t$1861(1), t$1862(1) )
 2600.       endif
 6871.       t$239 = nd_column
 6999.       t$1864 = max( 0, nd_column )
 6871.       t$1865 = _zla( 0, nd_profile ) * max( 0, nd_column )
 6871.       t$1866 = 1 + nd_layer
 7011.       t$1867 = max( 0, 1 + nd_layer )
 6871.       t$1868 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer )
 6871.       t$240 = ( 2 + 2 * nd_layer )
 7013.       t$1869 = max( 0, ( 2 + 2 * nd_layer ) )
 6871.       t$1870 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
 6871.       t$241 = nd_profile_column
 7074.       t$1871 = max( 0, nd_profile_column )
 6871.       t$1872 = max( 0, nd_profile_column )
 6871.       t$1873 = _zla( 0, nd_layer ) * max( 0, nd_profile_column )
 7074.       t$1876 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8
 7072.       t$1877 = 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 )
 7072.       t$1879 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 )
 7080.       t$1880 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 )
 7080.       t$1882 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 )
 7078.       t$1883 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7078.       t$1885 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7086.       t$1886 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7086.       t$1888 = 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6871.       t$1889 = max( 0, nd_profile_column ) * max( 0, 1 + nd_layer )
 7094.       t$1890 = 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7094.       t$1892 = max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7082.       t$1893 = 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7082.       t$1895 = 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7084.       t$1896 = 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7084.       t$1898 = 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6871.       t$1899 = max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column )
 7096.       t$1900 = 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7103.       t$1902 = max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7096.       omega_clr_f%header%el_len = 64
 7096.       omega_clr_f%header%assoc = 0
 7096.       omega_clr_f%header%ptr_alloc = 0
 7096.       omega_clr_f%header%p_or_a = 2
 7096.       omega_clr_f%header%a_contig = 1
 7096.       omega_clr_f%header%dv_versn = 2
 7096.       omega_clr_f%header%dv_smunit = 64
 7096.       omega_clr_f%header%d_type = 0
 7096.       omega_clr_f%header%n_params = 0
 7096.       omega_clr_f%header%pad_codim = 0
 7096.       omega_clr_f%header%n_codim = 0
 7096.       omega_clr_f%header%pad_dim = 0
 7096.       omega_clr_f%header%n_dim = 2
 7096.       omega_clr_f%header%d_type_idx = 13
 7096.       omega_clr_f%header%typ_code = 134481411
 7096.       omega_clr_f%header%orig_base = 0
 7096.       omega_clr_f%header%orig_size = 0
 7096.       omega_clr_f%dim_1%LB = 1
 7096.       omega_clr_f%dim_1%EX = 0
 7096.       omega_clr_f%dim_1%SM = 1
 7096.       omega_clr_f%dim_2%LB = 1
 7096.       omega_clr_f%dim_2%EX = 0
 7096.       omega_clr_f%dim_2%SM = 1
 7070.       t$1903 = 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7105.       t$1905 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7070.       phase_fnc_clr_f%header%el_len = 64
 7070.       phase_fnc_clr_f%header%assoc = 0
 7070.       phase_fnc_clr_f%header%ptr_alloc = 0
 7070.       phase_fnc_clr_f%header%p_or_a = 2
 7070.       phase_fnc_clr_f%header%a_contig = 1
 7070.       phase_fnc_clr_f%header%dv_versn = 2
 7070.       phase_fnc_clr_f%header%dv_smunit = 64
 7070.       phase_fnc_clr_f%header%d_type = 0
 7070.       phase_fnc_clr_f%header%n_params = 0
 7070.       phase_fnc_clr_f%header%pad_codim = 0
 7070.       phase_fnc_clr_f%header%n_codim = 0
 7070.       phase_fnc_clr_f%header%pad_dim = 0
 7070.       phase_fnc_clr_f%header%n_dim = 3
 7070.       phase_fnc_clr_f%header%d_type_idx = 13
 7070.       phase_fnc_clr_f%header%typ_code = 134481411
 7070.       phase_fnc_clr_f%header%orig_base = 0
 7070.       phase_fnc_clr_f%header%orig_size = 0
 7070.       phase_fnc_clr_f%dim_1%LB = 1
 7070.       phase_fnc_clr_f%dim_1%EX = 0
 7070.       phase_fnc_clr_f%dim_1%SM = 1
 7070.       phase_fnc_clr_f%dim_2%LB = 1
 7070.       phase_fnc_clr_f%dim_2%EX = 0
 7070.       phase_fnc_clr_f%dim_2%SM = 1
 7070.       phase_fnc_clr_f%dim_3%LB = 1
 7070.       phase_fnc_clr_f%dim_3%EX = 0
 7070.       phase_fnc_clr_f%dim_3%SM = 1
 6871.       t$1906 = 2 * max( 0, nd_profile_column )
 7089.       t$1907 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7089.       t$1909 = 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7076.       t$1910 = 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7076.       t$1912 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7101.       t$1914 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7057.       tau_clr_f%header%el_len = 64
 7057.       tau_clr_f%header%assoc = 0
 7057.       tau_clr_f%header%ptr_alloc = 0
 7057.       tau_clr_f%header%p_or_a = 2
 7057.       tau_clr_f%header%a_contig = 1
 7057.       tau_clr_f%header%dv_versn = 2
 7057.       tau_clr_f%header%dv_smunit = 64
 7057.       tau_clr_f%header%d_type = 0
 7057.       tau_clr_f%header%n_params = 0
 7057.       tau_clr_f%header%pad_codim = 0
 7057.       tau_clr_f%header%n_codim = 0
 7057.       tau_clr_f%header%pad_dim = 0
 7057.       tau_clr_f%header%n_dim = 2
 7057.       tau_clr_f%header%d_type_idx = 13
 7057.       tau_clr_f%header%typ_code = 134481411
 7057.       tau_clr_f%header%orig_base = 0
 7057.       tau_clr_f%header%orig_size = 0
 7057.       tau_clr_f%dim_1%LB = 1
 7057.       tau_clr_f%dim_1%EX = 0
 7057.       tau_clr_f%dim_1%SM = 1
 7057.       tau_clr_f%dim_2%LB = 1
 7057.       tau_clr_f%dim_2%EX = 0
 7057.       tau_clr_f%dim_2%SM = 1
 7068.       t$1915 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7068.       t$1917 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7060.       t$1918 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7060.       t$1920 = 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 6871.       t$1874 = int( _alloc( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 7074.       t$1875 = t$1874
 7072.       t$1878 = t$1874 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 )
 7080.       t$1881 = t$1874 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 )
 7078.       t$1884 = t$1874 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7086.       t$1887 = t$1874 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7094.       t$1891 = t$1874 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7082.       t$1894 = t$1874 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7084.       t$1897 = t$1874 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7096.       t$1901 = t$1874 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7070.       t$1904 = t$1874 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7089.       t$1908 = t$1874 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7076.       t$1911 = t$1874 + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7057.       t$1913 = t$1874 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7068.       t$1916 = t$1874 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7060.       t$1919 = t$1874 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( 16 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7121.       if ( 2 + 2 * n_layer > 0 ) then
 7122.          if ( n_profile > 0 ) then
 7121.             $I_L7121_143 = 0
 7121.             do
 7122.                $I_L7122_107 = 0
 7122. !dir$ ivdep
 7122.                do
 7123.                   flux_total(1 + $I_L7122_107, 1 + $I_L7121_143) = 0.0
 7124.                   $I_L7122_107 = 1 + $I_L7122_107
 7122.                   if ( $I_L7122_107 >= n_profile ) exit
 7122.                enddo
 7125.                $I_L7121_143 = 1 + $I_L7121_143
 7124.                if ( $I_L7121_143 >= 2 + 2 * n_layer ) exit
 7124.             enddo
 7124.          endif
 7124.       endif
 7127.       if ( isolir == 1 ) then
 7128.          if ( n_layer >= 0 ) then
 7129.             if ( n_profile > 0 ) then
 7128.                $I_L7128_145 = 0
 7128.                do
 7129.                   $I_L7129_109 = 0
 7129. !dir$ ivdep
 7129.                   do
 7130.                      flux_direct(1 + $I_L7129_109, $I_L7128_145) = 0.0
 7131.                      $I_L7129_109 = 1 + $I_L7129_109
 7129.                      if ( $I_L7129_109 >= n_profile ) exit
 7129.                   enddo
 7132.                   $I_L7128_145 = 1 + $I_L7128_145
 7131.                   if ( $I_L7128_145 >= 1 + n_layer ) exit
 7131.                enddo
 7131.             endif
 7131.          endif
 7131.       endif
 7139.       $lp_S4 = 1
 7140.       $l_new_S6 = .true.
 7142.       if ( 0 < n_profile ) then
 7142.          do
 7144.             $ll_S5 = 0
 7146.             if ( 0 < nd_profile_column .and. $lp_S4 <= n_profile ) then
 7146.                do
 7148.                   $ll_S5 = 1 + $ll_S5
 7149.                   target($ll_S5) = $lp_S4
 7151.                   if ( $l_new_S6 ) then
 7155.                      icl = 1
 7156.                      ics = 1
 7157.                      if ( -1 + n_cloud_top > 0 ) then
 7157.                         $I_L7157_111 = 0
 7157. !dir$ ivdep
 7157.                         do
 7158.                            tau_long($ll_S5, 1 + $I_L7157_111) = (ss_prop%tau_clr%base_addr)($lp_S4, 1 + $I_L7157_111, 0)
 7159.                            omega_long($ll_S5, 1 + $I_L7157_111) = (ss_prop%omega_clr%base_addr)($lp_S4, 1 + $I_L7157_111, 0)
 7160.                            asymmetry_long($ll_S5, 1 + $I_L7157_111) = (ss_prop%phase_fnc_clr%base_addr)($lp_S4, 1 + $I_L7157_111, 1, 0)
 7161.                            $I_L7157_111 = 1 + $I_L7157_111
 7157.                            if ( $I_L7157_111 >= -1 + n_cloud_top ) exit
 7157.                         enddo
 7157.                      endif
 7162.                      if ( n_layer + -n_cloud_top >= 0 ) then
 7165.                         $SC_ss_prop_I100 = ss_prop%phase_fnc%dim_4%SM
 7165.                         $SC_ss_prop_I99 = ss_prop%phase_fnc%dim_4%EX
 7165.                         $SC_ss_prop_I101 = ss_prop%phase_fnc%dim_4%LB
 7162.                         $I_L7162_113 = 0
 7162. !dir$ ivdep
 7162.                         do
 7163.                            tau_long($ll_S5, n_cloud_top + $I_L7162_113) = (ss_prop%tau%base_addr)($lp_S4, n_cloud_top + $I_L7162_113, 0, 0)
 7164.                            omega_long($ll_S5, n_cloud_top + $I_L7162_113) = (ss_prop%omega%base_addr)($lp_S4, n_cloud_top + $I_L7162_113, 0, 0)
 7165.                            asymmetry_long($ll_S5, n_cloud_top + $I_L7162_113) = (ss_prop%phase_fnc%base_addr)($lp_S4, n_cloud_top + $I_L7162_113, 1, 0, 0)
 7166.                            $I_L7162_113 = 1 + $I_L7162_113
 7162.                            if ( $I_L7162_113 >= n_layer + -n_cloud_top + 1 ) exit
 7162.                         enddo
 7162.                      endif
 7168.                      $l_new_S6 = .false.
 7168.                   else if ( n_layer > 0 ) then
 7182.                      $I_L7182_115 = 0
 7182. !dir$ ivdep
 7182.                      do
 7183.                         tau_long($ll_S5, 1 + $I_L7182_115) = tau_long(cvmg( n_long, -1 + $ll_S5, $ll_S5 <= 1 ), 1 + $I_L7182_115)
 7184.                         omega_long($ll_S5, 1 + $I_L7182_115) = omega_long(cvmg( n_long, -1 + $ll_S5, $ll_S5 <= 1 ), 1 + $I_L7182_115)
 7185.                         asymmetry_long($ll_S5, 1 + $I_L7182_115) = asymmetry_long(cvmg( n_long, -1 + $ll_S5, $ll_S5 <= 1 ), 1 + $I_L7182_115)
 7187.                         $I_L7182_115 = 1 + $I_L7182_115
 7182.                         if ( $I_L7182_115 >= n_layer ) exit
 7182.                      enddo
 7182.                   endif
 7194.                   if ( icl < list_column_slv($lp_S4, ics) ) then
 7194.                      $Trips01_N11 = ( list_column_slv($lp_S4, ics) + -icl )
 7200.                      $SC_ss_prop_I100 = ss_prop%phase_fnc%dim_4%SM
 7200.                      $SC_ss_prop_I99 = ss_prop%phase_fnc%dim_4%EX
 7200.                      $SC_ss_prop_I101 = ss_prop%phase_fnc%dim_4%LB
 7194.                      $I_icl_117 = 0
 7194. !dir$ ivdep
 7194.                      do
 7195.                         $icc_S10 = i_clm_lyr_chn($lp_S4, icl + $I_icl_117)
 7196.                         $ict_S11 = i_clm_cld_typ($lp_S4, icl + $I_icl_117)
 7198.                         tau_long($ll_S5, $icc_S10) = (ss_prop%tau%base_addr)($lp_S4, $icc_S10, $ict_S11, 0)
 7199.                         omega_long($ll_S5, $icc_S10) = (ss_prop%omega%base_addr)($lp_S4, $icc_S10, $ict_S11, 0)
 7200.                         asymmetry_long($ll_S5, $icc_S10) = (ss_prop%phase_fnc%base_addr)($lp_S4, $icc_S10, 1, $ict_S11, 0)
 7204.                         $I_icl_117 = 1 + $I_icl_117
 7194.                         if ( $I_icl_117 >= $Trips01_N11 ) exit
 7194.                      enddo
 7203.                      icl = ( icl + $Trips01_N11 )
 7203.                   endif
 7208.                   if ( isolir == 1 ) then
 7210.                      if ( l_scale_solar ) then
 7211.                         if ( n_layer > 0 ) then
 7211.                            $I_L7211_119 = 0
 7211. !dir$ ivdep
 7211.                            do
 7212.                               adjust_solar_ke_long($ll_S5, 1 + $I_L7211_119) = adjust_solar_ke($lp_S4, 1 + $I_L7211_119)
 7213.                               $I_L7211_119 = 1 + $I_L7211_119
 7211.                               if ( $I_L7211_119 >= n_layer ) exit
 7211.                            enddo
 7211.                         endif
 7211.                      endif
 7216.                      $F_A33 = nd_layer
 7216.                      if ( nd_layer > 0 ) then
 7216.                         $I_L7216_129 = 0
 7216. !dir$ ivdep
 7216.                         do
 7216.                            sec_00_long($ll_S5, 1 + $I_L7216_129) = sec_00($lp_S4, 1 + $I_L7216_129)
 7216.                            $I_L7216_129 = 1 + $I_L7216_129
 7216.                            if ( $I_L7216_129 >= $F_A33 ) exit
 7216.                         enddo
 7216.                      endif
 7217.                      flux_inc_direct_long($ll_S5) = flux_inc_direct($lp_S4)
 7218.                      d_planck_flux_surface_long($ll_S5) = 0.0
 7220.                   else if ( isolir == 2 ) then
 7222.                      d_planck_flux_surface_long($ll_S5) = d_planck_flux_surface($lp_S4)
 7224.                      if ( n_layer > 0 ) then
 7224.                         $I_L7224_121 = 0
 7224. !dir$ ivdep
 7224.                         do
 7225.                            diff_planck_long($ll_S5, 1 + $I_L7224_121) = diff_planck($lp_S4, 1 + $I_L7224_121)
 7226.                            $I_L7224_121 = 1 + $I_L7224_121
 7224.                            if ( $I_L7224_121 >= n_layer ) exit
 7224.                         enddo
 7224.                      endif
 7227.                      if ( l_ir_source_quad ) then
 7228.                         if ( n_layer > 0 ) then
 7228.                            $I_L7228_123 = 0
 7228. !dir$ ivdep
 7228.                            do
 7229.                               diff_planck_2_long($ll_S5, 1 + $I_L7228_123) = diff_planck_2($lp_S4, 1 + $I_L7228_123)
 7230.                               $I_L7228_123 = 1 + $I_L7228_123
 7228.                               if ( $I_L7228_123 >= n_layer ) exit
 7228.                            enddo
 7228.                         endif
 7228.                      endif
 7228.                   endif
 7235.                   flux_inc_down_long($ll_S5) = flux_inc_down($lp_S4)
 7236.                   rho_alb_long($ll_S5, 2) = rho_alb($lp_S4, 2)
 7238.                   rho_alb_long($ll_S5, 1) = rho_alb($lp_S4, 1)
 7243.                   weight_long($ll_S5) = area_column($lp_S4, icl)
 7248.                   ics = 1 + ics
 7249.                   if ( ics > n_column_slv($lp_S4) ) then
 7250.                      $lp_S4 = 1 + $lp_S4
 7251.                      $l_new_S6 = .true.
 7251.                   endif
 7252.                   if ( ( $ll_S5 < nd_profile_column .and. $lp_S4 <= n_profile ) == 0 ) exit
 7252.                enddo
 7252.             endif
 7258.             n_long = $ll_S5
 7262.             call two_stream( ierr, n_long, n_layer, i_2stream, i_solver, l_scale_solar, adjust_solar_ke_long(1, 1), isolir, diff_planck_long(1, 1), l_ir_source_quad, diff_planck_2_long(1, 1), flux_inc_down_long(1), flux_inc_direct_long(1), sec_00_long(1, 1), rho_alb_long(1, 1), rho_alb_long(1, 2), d_planck_flux_surface_long(1), tau_long(1, 1), omega_long(1, 1), asymmetry_long(1, 1), flux_direct_long(1, 0), flux_total_long(1, 1), nd_profile_column, nd_layer, nd_source_coeff )
 7294.             if ( 2 + 2 * n_layer > 0 ) then
 7295.                if ( n_long > 0 ) then
 7294.                   $I_L7294_147 = 0
 7294. !dir$ blocking_size( 0, 0 )
 7294.                   do
 7295.                      $I_L7295_125 = 0
 7295. !dir$ ivdep
 7295. !dir$ blocking_size( 0, 0 )
 7295.                      do
 7296.                         $l_S17 = target(1 + $I_L7295_125)
 7297.                         flux_total($l_S17, 1 + $I_L7294_147) = _vu_plus( flux_total($l_S17, 1 + $I_L7294_147), weight_long(1 + $I_L7295_125) * flux_total_long(1 + $I_L7295_125, 1 + $I_L7294_147) )
 7299.                         $I_L7295_125 = 1 + $I_L7295_125
 7295.                         if ( $I_L7295_125 >= n_long ) exit
 7295.                      enddo
 7300.                      $I_L7294_147 = 1 + $I_L7294_147
 7299.                      if ( $I_L7294_147 >= 2 + 2 * n_layer ) exit
 7299.                   enddo
 7299.                endif
 7299.             endif
 7302.             if ( isolir == 1 ) then
 7303.                if ( n_layer >= 0 ) then
 7304.                   if ( n_long > 0 ) then
 7303.                      $I_L7303_149 = 0
 7303. !dir$ blocking_size( 0, 0 )
 7303.                      do
 7304.                         $I_L7304_127 = 0
 7304. !dir$ ivdep
 7304. !dir$ blocking_size( 0, 0 )
 7304.                         do
 7305.                            $l_S20 = target(1 + $I_L7304_127)
 7306.                            flux_direct($l_S20, $I_L7303_149) = _vu_plus( flux_direct($l_S20, $I_L7303_149), weight_long(1 + $I_L7304_127) * flux_direct_long(1 + $I_L7304_127, $I_L7303_149) )
 7308.                            $I_L7304_127 = 1 + $I_L7304_127
 7304.                            if ( $I_L7304_127 >= n_long ) exit
 7304.                         enddo
 7309.                         $I_L7303_149 = 1 + $I_L7303_149
 7308.                         if ( $I_L7303_149 >= 1 + n_layer ) exit
 7308.                      enddo
 7308.                   endif
 7308.                endif
 7308.             endif
 7310.             if ( $lp_S4 > n_profile ) exit
 7310.          enddo
 7310.       endif
 7316.       if ( l_clear ) then
 7320.          tau_clr_f%header%a_contig = 1
 7320.          tau_clr_f%dim_1%LB = 1
 7320.          tau_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
 7320.          tau_clr_f%dim_1%SM = 1
 7320.          tau_clr_f%dim_2%LB = 1
 7320.          tau_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
 7320.          tau_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
 7320.          $_allo_P0(0) = 0x1000000000001L
 7320.          $_allo_P0(1) = loc( tau_clr_f )
 7320.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
 7321.          omega_clr_f%header%a_contig = 1
 7321.          omega_clr_f%dim_1%LB = 1
 7321.          omega_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
 7321.          omega_clr_f%dim_1%SM = 1
 7321.          omega_clr_f%dim_2%LB = 1
 7321.          omega_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
 7321.          omega_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
 7321.          $_allo_P1(0) = 0x1000000000001L
 7321.          $_allo_P1(1) = loc( omega_clr_f )
 7321.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
 7322.          phase_fnc_clr_f%header%a_contig = 1
 7322.          phase_fnc_clr_f%dim_1%LB = 1
 7322.          phase_fnc_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
 7322.          phase_fnc_clr_f%dim_1%SM = 1
 7322.          phase_fnc_clr_f%dim_2%LB = 1
 7322.          phase_fnc_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
 7322.          phase_fnc_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
 7322.          phase_fnc_clr_f%dim_3%LB = 1
 7322.          phase_fnc_clr_f%dim_3%EX = 1
 7322.          phase_fnc_clr_f%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer ) )
 7322.          $_allo_P2(0) = 0x1000000000001L
 7322.          $_allo_P2(1) = loc( phase_fnc_clr_f )
 7322.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 7325.          t$5442 = 0
 7325.          t$5443 = 0
 7325.          t$5447 = 0
 7325.          if ( ss_prop%tau_clr%header%a_contig == 1 ) then
 7325. !dir$ suppress (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0)
 7325.             t$5441 = loc( (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0) )
 7325.          else
 7325.             t$5442 = ss_prop%tau_clr%dim_1%EX
 7325.             t$5443 = ss_prop%tau_clr%dim_2%EX
 7325.             t$5447 = int( _alloc( max( 0, max( 0, ss_prop%tau_clr%dim_2%EX ) * max( 0, ss_prop%tau_clr%dim_1%EX ) * 8 ) ), 8 )
 7325.             $F_A34 = ss_prop%tau_clr%dim_2%EX
 7325.             $F_A35 = ss_prop%tau_clr%dim_1%EX
 7325.             if ( and( -$F_A35, -$F_A34 ) < 0 ) then
 7325.                $SC_ss_prop_I102 = ss_prop%tau_clr%dim_1%SM
 7325.                $SC_ss_prop_I106 = ss_prop%tau_clr%dim_1%EX
 7325.                $SC_ss_prop_I103 = ss_prop%tau_clr%dim_1%LB
 7325.                $SC_ss_prop_I104 = ss_prop%tau_clr%dim_2%SM
 7325.                $SC_ss_prop_I105 = ss_prop%tau_clr%dim_2%LB
 7325.                $I_L7325_151 = 0
 7325.                do
 7325.                   $I_L7325_131 = 0
 7325. !dir$ ivdep
 7325.                   do
 7325.                      t$5446(1 + $I_L7325_131, 1 + $I_L7325_151) = (ss_prop%tau_clr%base_addr)($SC_ss_prop_I103 + $I_L7325_131, $SC_ss_prop_I105 + $I_L7325_151, 0)
 7325.                      $I_L7325_131 = 1 + $I_L7325_131
 7325.                      if ( $I_L7325_131 >= $F_A35 ) exit
 7325.                   enddo
 7325.                   $I_L7325_151 = 1 + $I_L7325_151
 7325.                   if ( $I_L7325_151 >= $F_A34 ) exit
 7325.                enddo
 7325.             endif
 7325. !dir$ suppress t$5446
 7325.             t$5441 = loc( t$5446 )
 7325.          endif
 7325.          t$5449 = 0
 7325.          t$5450 = 0
 7325.          t$5454 = 0
 7325.          if ( ss_prop%omega_clr%header%a_contig == 1 ) then
 7325. !dir$ suppress (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0)
 7325.             t$5448 = loc( (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0) )
 7325.          else
 7325.             t$5449 = ss_prop%omega_clr%dim_1%EX
 7325.             t$5450 = ss_prop%omega_clr%dim_2%EX
 7325.             t$5454 = int( _alloc( max( 0, max( 0, ss_prop%omega_clr%dim_2%EX ) * max( 0, ss_prop%omega_clr%dim_1%EX ) * 8 ) ), 8 )
 7325.             $F_A36 = ss_prop%omega_clr%dim_2%EX
 7325.             $F_A37 = ss_prop%omega_clr%dim_1%EX
 7325.             if ( and( -$F_A37, -$F_A36 ) < 0 ) then
 7325.                $SC_ss_prop_I107 = ss_prop%omega_clr%dim_1%SM
 7325.                $SC_ss_prop_I111 = ss_prop%omega_clr%dim_1%EX
 7325.                $SC_ss_prop_I108 = ss_prop%omega_clr%dim_1%LB
 7325.                $SC_ss_prop_I109 = ss_prop%omega_clr%dim_2%SM
 7325.                $SC_ss_prop_I110 = ss_prop%omega_clr%dim_2%LB
 7325.                $I_L7325_153 = 0
 7325.                do
 7325.                   $I_L7325_133 = 0
 7325. !dir$ ivdep
 7325.                   do
 7325.                      t$5453(1 + $I_L7325_133, 1 + $I_L7325_153) = (ss_prop%omega_clr%base_addr)($SC_ss_prop_I108 + $I_L7325_133, $SC_ss_prop_I110 + $I_L7325_153, 0)
 7325.                      $I_L7325_133 = 1 + $I_L7325_133
 7325.                      if ( $I_L7325_133 >= $F_A37 ) exit
 7325.                   enddo
 7325.                   $I_L7325_153 = 1 + $I_L7325_153
 7325.                   if ( $I_L7325_153 >= $F_A36 ) exit
 7325.                enddo
 7325.             endif
 7325. !dir$ suppress t$5453
 7325.             t$5448 = loc( t$5453 )
 7325.          endif
 7325.          t$5456 = 0
 7325.          t$5457 = 0
 7325.          t$5458 = 0
 7325.          t$5463 = 0
 7325.          if ( ss_prop%phase_fnc_clr%header%a_contig == 1 ) then
 7325. !dir$ suppress (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0)
 7325.             t$5455 = loc( (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0) )
 7325.          else
 7325.             t$5456 = ss_prop%phase_fnc_clr%dim_1%EX
 7325.             t$5457 = ss_prop%phase_fnc_clr%dim_2%EX
 7325.             t$5458 = ss_prop%phase_fnc_clr%dim_3%EX
 7325.             t$5463 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc_clr%dim_2%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_1%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_3%EX ) * 8 ) ), 8 )
 7325.             $F_A38 = ss_prop%phase_fnc_clr%dim_3%EX
 7325.             $F_A39 = ss_prop%phase_fnc_clr%dim_2%EX
 7325.             $F_A40 = ss_prop%phase_fnc_clr%dim_1%EX
 7325.             if ( and( and( -$F_A39, -$F_A38 ), -$F_A40 ) < 0 ) then
 7325.                $SC_ss_prop_I112 = ss_prop%phase_fnc_clr%dim_1%SM
 7325.                $SC_ss_prop_I118 = ss_prop%phase_fnc_clr%dim_1%EX
 7325.                $SC_ss_prop_I113 = ss_prop%phase_fnc_clr%dim_1%LB
 7325.                $SC_ss_prop_I114 = ss_prop%phase_fnc_clr%dim_2%SM
 7325.                $SC_ss_prop_I119 = ss_prop%phase_fnc_clr%dim_2%EX
 7325.                $SC_ss_prop_I115 = ss_prop%phase_fnc_clr%dim_2%LB
 7325.                $SC_ss_prop_I116 = ss_prop%phase_fnc_clr%dim_3%SM
 7325.                $SC_ss_prop_I117 = ss_prop%phase_fnc_clr%dim_3%LB
 7325.                $I_L7325_163 = 0
 7325.                do
 7325.                   $I_L7325_155 = 0
 7325.                   do
 7325.                      $I_L7325_135 = 0
 7325. !dir$ ivdep
 7325.                      do
 7325.                         t$5462(1 + $I_L7325_135, 1 + $I_L7325_155, 1 + $I_L7325_163) = (ss_prop%phase_fnc_clr%base_addr)($SC_ss_prop_I113 + $I_L7325_135, $SC_ss_prop_I115 + $I_L7325_155, $SC_ss_prop_I117 + $I_L7325_163, 0)
 7325.                         $I_L7325_135 = 1 + $I_L7325_135
 7325.                         if ( $I_L7325_135 >= $F_A40 ) exit
 7325.                      enddo
 7325.                      $I_L7325_155 = 1 + $I_L7325_155
 7325.                      if ( $I_L7325_155 >= $F_A39 ) exit
 7325.                   enddo
 7325.                   $I_L7325_163 = 1 + $I_L7325_163
 7325.                   if ( $I_L7325_163 >= $F_A38 ) exit
 7325.                enddo
 7325.             endif
 7325. !dir$ suppress t$5462
 7325.             t$5455 = loc( t$5462 )
 7325.          endif
 7326.          t$5465 = 0
 7326.          t$5466 = 0
 7326.          t$5467 = 0
 7326.          t$5472 = 0
 7326.          if ( ss_prop%tau%header%a_contig == 1 ) then
 7326. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0)
 7326.             t$5464 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0) )
 7326.          else
 7326.             t$5465 = ss_prop%tau%dim_1%EX
 7326.             t$5466 = ss_prop%tau%dim_2%EX
 7326.             t$5467 = ss_prop%tau%dim_3%EX
 7326.             t$5472 = int( _alloc( max( 0, max( 0, ss_prop%tau%dim_2%EX ) * max( 0, ss_prop%tau%dim_1%EX ) * max( 0, ss_prop%tau%dim_3%EX ) * 8 ) ), 8 )
 7326.             $F_A41 = ss_prop%tau%dim_3%EX
 7326.             $F_A42 = ss_prop%tau%dim_2%EX
 7326.             $F_A43 = ss_prop%tau%dim_1%EX
 7326.             if ( and( and( -$F_A42, -$F_A41 ), -$F_A43 ) < 0 ) then
 7326.                $SC_ss_prop_I120 = ss_prop%tau%dim_1%SM
 7326.                $SC_ss_prop_I126 = ss_prop%tau%dim_1%EX
 7326.                $SC_ss_prop_I121 = ss_prop%tau%dim_1%LB
 7326.                $SC_ss_prop_I122 = ss_prop%tau%dim_2%SM
 7326.                $SC_ss_prop_I127 = ss_prop%tau%dim_2%EX
 7326.                $SC_ss_prop_I123 = ss_prop%tau%dim_2%LB
 7326.                $SC_ss_prop_I124 = ss_prop%tau%dim_3%SM
 7326.                $SC_ss_prop_I125 = ss_prop%tau%dim_3%LB
 7326.                $I_L7326_165 = 0
 7326.                do
 7326.                   $I_L7326_157 = 0
 7326.                   do
 7326.                      $I_L7326_137 = 0
 7326. !dir$ ivdep
 7326.                      do
 7326.                         t$5471(1 + $I_L7326_137, 1 + $I_L7326_157, 1 + $I_L7326_165) = (ss_prop%tau%base_addr)($SC_ss_prop_I121 + $I_L7326_137, $SC_ss_prop_I123 + $I_L7326_157, $SC_ss_prop_I125 + $I_L7326_165, 0)
 7326.                         $I_L7326_137 = 1 + $I_L7326_137
 7326.                         if ( $I_L7326_137 >= $F_A43 ) exit
 7326.                      enddo
 7326.                      $I_L7326_157 = 1 + $I_L7326_157
 7326.                      if ( $I_L7326_157 >= $F_A42 ) exit
 7326.                   enddo
 7326.                   $I_L7326_165 = 1 + $I_L7326_165
 7326.                   if ( $I_L7326_165 >= $F_A41 ) exit
 7326.                enddo
 7326.             endif
 7326. !dir$ suppress t$5471
 7326.             t$5464 = loc( t$5471 )
 7326.          endif
 7326.          t$5474 = 0
 7326.          t$5475 = 0
 7326.          t$5476 = 0
 7326.          t$5481 = 0
 7326.          if ( ss_prop%omega%header%a_contig == 1 ) then
 7326. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0)
 7326.             t$5473 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0) )
 7326.          else
 7326.             t$5474 = ss_prop%omega%dim_1%EX
 7326.             t$5475 = ss_prop%omega%dim_2%EX
 7326.             t$5476 = ss_prop%omega%dim_3%EX
 7326.             t$5481 = int( _alloc( max( 0, max( 0, ss_prop%omega%dim_2%EX ) * max( 0, ss_prop%omega%dim_1%EX ) * max( 0, ss_prop%omega%dim_3%EX ) * 8 ) ), 8 )
 7326.             $F_A44 = ss_prop%omega%dim_3%EX
 7326.             $F_A45 = ss_prop%omega%dim_2%EX
 7326.             $F_A46 = ss_prop%omega%dim_1%EX
 7326.             if ( and( and( -$F_A45, -$F_A44 ), -$F_A46 ) < 0 ) then
 7326.                $SC_ss_prop_I128 = ss_prop%omega%dim_1%SM
 7326.                $SC_ss_prop_I134 = ss_prop%omega%dim_1%EX
 7326.                $SC_ss_prop_I129 = ss_prop%omega%dim_1%LB
 7326.                $SC_ss_prop_I130 = ss_prop%omega%dim_2%SM
 7326.                $SC_ss_prop_I135 = ss_prop%omega%dim_2%EX
 7326.                $SC_ss_prop_I131 = ss_prop%omega%dim_2%LB
 7326.                $SC_ss_prop_I132 = ss_prop%omega%dim_3%SM
 7326.                $SC_ss_prop_I133 = ss_prop%omega%dim_3%LB
 7326.                $I_L7326_167 = 0
 7326.                do
 7326.                   $I_L7326_159 = 0
 7326.                   do
 7326.                      $I_L7326_139 = 0
 7326. !dir$ ivdep
 7326.                      do
 7326.                         t$5480(1 + $I_L7326_139, 1 + $I_L7326_159, 1 + $I_L7326_167) = (ss_prop%omega%base_addr)($SC_ss_prop_I129 + $I_L7326_139, $SC_ss_prop_I131 + $I_L7326_159, $SC_ss_prop_I133 + $I_L7326_167, 0)
 7326.                         $I_L7326_139 = 1 + $I_L7326_139
 7326.                         if ( $I_L7326_139 >= $F_A46 ) exit
 7326.                      enddo
 7326.                      $I_L7326_159 = 1 + $I_L7326_159
 7326.                      if ( $I_L7326_159 >= $F_A45 ) exit
 7326.                   enddo
 7326.                   $I_L7326_167 = 1 + $I_L7326_167
 7326.                   if ( $I_L7326_167 >= $F_A44 ) exit
 7326.                enddo
 7326.             endif
 7326. !dir$ suppress t$5480
 7326.             t$5473 = loc( t$5480 )
 7326.          endif
 7326.          t$5483 = 0
 7326.          t$5484 = 0
 7326.          t$5485 = 0
 7326.          t$5486 = 0
 7326.          t$5492 = 0
 7326.          if ( ss_prop%phase_fnc%header%a_contig == 1 ) then
 7326. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0)
 7326.             t$5482 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0) )
 7326.          else
 7326.             t$5483 = ss_prop%phase_fnc%dim_1%EX
 7326.             t$5484 = ss_prop%phase_fnc%dim_2%EX
 7326.             t$5485 = ss_prop%phase_fnc%dim_3%EX
 7326.             t$5486 = ss_prop%phase_fnc%dim_4%EX
 7326.             t$5492 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc%dim_2%EX ) * max( 0, ss_prop%phase_fnc%dim_1%EX ) * max( 0, ss_prop%phase_fnc%dim_3%EX ) * max( 0, ss_prop%phase_fnc%dim_4%EX ) * 8 ) ), 8 )
 7326.             $F_A47 = ss_prop%phase_fnc%dim_4%EX
 7326.             $F_A48 = ss_prop%phase_fnc%dim_3%EX
 7326.             $F_A49 = ss_prop%phase_fnc%dim_2%EX
 7326.             $F_A50 = ss_prop%phase_fnc%dim_1%EX
 7326.             if ( and( and( and( -$F_A48, -$F_A47 ), -$F_A49 ), -$F_A50 ) < 0 ) then
 7326.                $SC_ss_prop_I136 = ss_prop%phase_fnc%dim_1%SM
 7326.                $SC_ss_prop_I142 = ss_prop%phase_fnc%dim_1%EX
 7326.                $SC_ss_prop_I137 = ss_prop%phase_fnc%dim_1%LB
 7326.                $SC_ss_prop_I138 = ss_prop%phase_fnc%dim_2%SM
 7326.                $SC_ss_prop_I143 = ss_prop%phase_fnc%dim_2%EX
 7326.                $SC_ss_prop_I139 = ss_prop%phase_fnc%dim_2%LB
 7326.                $SC_ss_prop_I140 = ss_prop%phase_fnc%dim_3%SM
 7326.                $SC_ss_prop_I144 = ss_prop%phase_fnc%dim_3%EX
 7326.                $SC_ss_prop_I141 = ss_prop%phase_fnc%dim_3%LB
 7326.                $SC_ss_prop_I100 = ss_prop%phase_fnc%dim_4%SM
 7326.                $SC_ss_prop_I101 = ss_prop%phase_fnc%dim_4%LB
 7326.                $I_L7326_171 = 0
 7326.                do
 7326.                   $I_L7326_169 = 0
 7326.                   do
 7326.                      $I_L7326_161 = 0
 7326.                      do
 7326.                         $I_L7326_141 = 0
 7326. !dir$ ivdep
 7326.                         do
 7326.                            t$5491(1 + $I_L7326_141, 1 + $I_L7326_161, 1 + $I_L7326_169, 1 + $I_L7326_171) = (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I137 + $I_L7326_141, $SC_ss_prop_I139 + $I_L7326_161, $SC_ss_prop_I141 + $I_L7326_169, $SC_ss_prop_I101 + $I_L7326_171, 0)
 7326.                            $I_L7326_141 = 1 + $I_L7326_141
 7326.                            if ( $I_L7326_141 >= $F_A50 ) exit
 7326.                         enddo
 7326.                         $I_L7326_161 = 1 + $I_L7326_161
 7326.                         if ( $I_L7326_161 >= $F_A49 ) exit
 7326.                      enddo
 7326.                      $I_L7326_169 = 1 + $I_L7326_169
 7326.                      if ( $I_L7326_169 >= $F_A48 ) exit
 7326.                   enddo
 7326.                   $I_L7326_171 = 1 + $I_L7326_171
 7326.                   if ( $I_L7326_171 >= $F_A47 ) exit
 7326.                enddo
 7326.             endif
 7326. !dir$ suppress t$5491
 7326.             t$5482 = loc( t$5491 )
 7326.          endif
 7324.          ipa$11135 = 1
 7324.          ipa$11143 = 1
 7324.          call copy_clr_full( n_profile, n_layer, n_cloud_top, ipa$11135, t$5441, t$5448, t$5455, t$5464, t$5473, t$5482, (tau_clr_f%base_addr)(1, 1, 0), (omega_clr_f%base_addr)(1, 1, 0), (phase_fnc_clr_f%base_addr)(1, 1, 1, 0), nd_profile, nd_layer, nd_layer_clr, id_ct, ipa$11143 )
 7326.          if ( ss_prop%phase_fnc%header%a_contig /= 1 ) then
 7326.             _free( t$5492 )
 7326.          endif
 7326.          if ( ss_prop%omega%header%a_contig /= 1 ) then
 7326.             _free( t$5481 )
 7326.          endif
 7326.          if ( ss_prop%tau%header%a_contig /= 1 ) then
 7326.             _free( t$5472 )
 7326.          endif
 7325.          if ( ss_prop%phase_fnc_clr%header%a_contig /= 1 ) then
 7325.             _free( t$5463 )
 7325.          endif
 7325.          if ( ss_prop%omega_clr%header%a_contig /= 1 ) then
 7325.             _free( t$5454 )
 7325.          endif
 7325.          if ( ss_prop%tau_clr%header%a_contig /= 1 ) then
 7325.             _free( t$5447 )
 7325.          endif
 7332.          call two_stream( ierr, n_profile, n_layer, i_2stream, i_solver_clear, l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), flux_inc_direct(1), sec_00(1, 1), rho_alb(1, 1), rho_alb(1, 2), d_planck_flux_surface(1), (tau_clr_f%base_addr)(1, 1, 0), (omega_clr_f%base_addr)(1, 1, 0), (phase_fnc_clr_f%base_addr)(1, 1, 1, 0), flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_source_coeff )
 7360.          $_allo_P3(0) = 0x1000000000001L
 7360.          $_allo_P3(1) = loc( tau_clr_f )
 7360.          call __deallocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 7360.          tau_clr_f%header%assoc = 0
 7361.          $_allo_P4(0) = 0x1000000000001L
 7361.          $_allo_P4(1) = loc( omega_clr_f )
 7361.          call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 7361.          omega_clr_f%header%assoc = 0
 7362.          $_allo_P5(0) = 0x1000000000001L
 7362.          $_allo_P5(1) = loc( phase_fnc_clr_f )
 7362.          call __deallocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 7362.          phase_fnc_clr_f%header%assoc = 0
 7362.       endif
 7103.       $_allo_P6(0) = 0x3000000000001L
 7103.       $_allo_P6(1) = loc( tau_clr_f )
 7103.       $_allo_P6(2) = loc( phase_fnc_clr_f )
 7103.       $_allo_P6(3) = loc( omega_clr_f )
 7103.       call _dealloc( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 6871.       _free( t$1874 )
 7369.       return
 7369.       end
 7369.       
 8107.       
 8107.       subroutine calc_radiance_ipa( ierr, n_profile, n_layer, n_cloud_top, n_order_phase, ms_min, ms_max, ls_local_trunc, i_truncation, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, l_rescale, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, flux_inc_down, zen_0, d_planck_flux_surface, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, ss_prop, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, flux_direct, flux_total, i_direct, radiance, j_radiance, nd_profile, nd_layer, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range, nd_viewing_level, nd_direction, nd_profile_column )
 7389.       t$250 = nd_max_order
 7389.       t$1921 = 1 + nd_max_order
 7521.       t$1922 = _zla( 0, 1 + nd_max_order )
 7389.       t$251 = nd_sph_coeff
 7524.       t$1923 = _zla( 0, nd_sph_coeff )
 7389.       t$252 = nd_profile
 7528.       t$1924 = _zla( 0, nd_profile )
 7389.       t$1925 = _zla( 0, nd_profile )
 7389.       t$1926 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_profile )
 7389.       t$253 = nd_layer
 7548.       t$1927 = _zla( 0, nd_layer )
 7389.       t$1928 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 7389.       t$254 = nd_brdf_basis_fnc
 7578.       t$1929 = _zla( 0, nd_brdf_basis_fnc )
 7389.       t$1930 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 7389.       t$255 = nd_brdf_trunc / 2
 7389.       t$256 = nd_brdf_trunc
 7389.       t$1931 = _zla( 0, nd_brdf_basis_fnc )
 7389.       t$1932 = 1 + nd_brdf_trunc / 2
 7580.       t$1933 = _zla( 0, 1 + nd_brdf_trunc / 2 )
 7389.       t$1934 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 7389.       t$1935 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 7389.       t$1936 = 1 + nd_brdf_trunc
 7580.       t$1937 = _zla( 0, 1 + nd_brdf_trunc )
 7389.       t$1938 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
 7389.       t$257 = nd_direction
 7389.       t$1939 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 7583.       t$1940 = _zla( 0, nd_direction )
 7389.       t$1941 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
 2600.       if ( t$30 == 0 ) then
 2600.          t$1947(1) = 4
 2600.          t$1948(1) = 0
 2600.          t$1949(1) = 16
 2600.          t$1944(1) = int( loc( t$29 ), 8 )
 2600.          t$1945(1) = 0
 2600.          t$1946(1) = int( loc( t$1942 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$1944(1), t$1947(1), 1, t$1945(1), t$1946(1), t$1948(1), t$1949(1) )
 2600.       endif
 7389.       t$258 = nd_column
 7594.       t$1951 = max( 0, nd_column )
 7389.       t$1952 = _zla( 0, nd_profile ) * max( 0, nd_column )
 7389.       t$259 = nd_viewing_level
 7608.       t$1953 = max( 0, nd_viewing_level )
 7389.       t$260 = nd_radiance_profile
 7619.       t$1954 = max( 0, nd_radiance_profile )
 7389.       t$1955 = max( 0, nd_radiance_profile )
 7389.       t$1956 = _zla( 0, nd_direction ) * max( 0, nd_radiance_profile )
 7389.       t$1957 = _zla( 0, nd_direction ) * max( 0, nd_radiance_profile ) * 2
 7389.       t$261 = nd_flux_profile
 7627.       t$1958 = max( 0, nd_flux_profile )
 7389.       t$1959 = max( 0, nd_flux_profile )
 7389.       t$1960 = 1 + nd_layer
 7627.       t$1961 = max( 0, 1 + nd_layer )
 7389.       t$1962 = max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer )
 7389.       t$262 = ( 2 + 2 * nd_layer )
 7629.       t$1963 = max( 0, ( 2 + 2 * nd_layer ) )
 7389.       t$1964 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
 7389.       t$1965 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer )
 7389.       t$1966 = max( 0, nd_viewing_level ) * max( 0, nd_radiance_profile )
 7389.       t$1967 = _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_radiance_profile )
 7389.       t$263 = nd_j_profile
 7633.       t$1968 = max( 0, nd_j_profile )
 7389.       t$1969 = max( 0, nd_j_profile )
 7389.       t$1970 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
 7389.       t$264 = nd_profile_column
 7695.       t$1971 = max( 0, nd_profile_column )
 7389.       t$1972 = max( 0, nd_profile_column )
 7389.       t$1973 = _zla( 0, nd_layer ) * max( 0, nd_profile_column )
 7695.       t$1976 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8
 7389.       t$1977 = _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column )
 7389.       t$1978 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column )
 7716.       t$1979 = 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 )
 7716.       t$1981 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 )
 7712.       t$1982 = 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 )
 7712.       t$1984 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 )
 7703.       t$1985 = 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7703.       t$1987 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7701.       t$1988 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7701.       t$1990 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$1991 = _zla( 0, nd_direction ) * max( 0, nd_profile_column )
 7389.       t$1992 = _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 2
 7720.       t$1993 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7720.       t$1995 = _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7707.       t$1996 = 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7707.       t$1998 = 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$1999 = max( 0, nd_profile_column ) * max( 0, 1 + nd_layer )
 7725.       t$2000 = 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7725.       t$2002 = max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7705.       t$2003 = 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7705.       t$2005 = 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2006 = max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column )
 7727.       t$2007 = 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7727.       t$2009 = max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7693.       t$2010 = 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7693.       t$2012 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7729.       t$2013 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7729.       t$2015 = max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7686.       t$2016 = 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7686.       t$2018 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2019 = _zla( 0, nd_layer ) * max( 0, nd_profile_column )
 7688.       t$2020 = max( 0, nd_max_order )
 7389.       t$2021 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order )
 7688.       t$2022 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7688.       t$2024 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2025 = _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column )
 7690.       t$2026 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7690.       t$2028 = _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2029 = max( 0, nd_viewing_level ) * max( 0, nd_profile_column )
 7734.       t$2030 = 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7734.       t$2032 = max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2033 = max( 0, nd_viewing_level ) * max( 0, nd_profile_column )
 7389.       t$2034 = _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column )
 7731.       t$2035 = 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7731.       t$2037 = _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2038 = _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column )
 7710.       t$2039 = 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7710.       t$2041 = _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7673.       t$2043 = _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7684.       t$2044 = 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7684.       t$2046 = _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$2047 = _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column )
 7699.       t$2048 = 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7699.       t$2050 = _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7676.       t$2051 = 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7676.       t$2053 = 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7697.       t$2054 = 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7697.       t$2056 = 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7389.       t$1974 = int( _alloc( 8 * max( 0, nd_profile_column ) + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
 7695.       t$1975 = t$1974
 7716.       t$1980 = t$1974 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 )
 7712.       t$1983 = t$1974 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 )
 7703.       t$1986 = t$1974 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7701.       t$1989 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7720.       t$1994 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7707.       t$1997 = t$1974 + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7725.       t$2001 = t$1974 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7705.       t$2004 = t$1974 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7727.       t$2008 = t$1974 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7693.       t$2011 = t$1974 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7729.       t$2014 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7686.       t$2017 = t$1974 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7688.       t$2023 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7690.       t$2027 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7734.       t$2031 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7731.       t$2036 = t$1974 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7710.       t$2040 = t$1974 + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7673.       t$2042 = t$1974 + _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7684.       t$2045 = t$1974 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7699.       t$2049 = t$1974 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7676.       t$2052 = t$1974 + 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7697.       t$2055 = t$1974 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_sph_coeff ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * max( 0, nd_profile_column ) * 8 + 4 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * max( 0, nd_max_order ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( max( 0, ( 2 + 2 * nd_layer ) ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( max( 0, nd_profile_column ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( 8 * max( 0, nd_profile_column ) + 8 * ( ( _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 16 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction ) * max( 0, nd_profile_column ) * 8 + 8 * ( ( 7 + _zla( 0, nd_layer ) * max( 0, nd_profile_column ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
 7749.       if ( i_sph_mode == 2 ) then
 7751.          if ( 2 + 2 * n_layer > 0 ) then
 7752.             if ( n_profile > 0 ) then
 7751.                $I_L7751_431 = 0
 7751.                do
 7752.                   $I_L7752_353 = 0
 7752. !dir$ ivdep
 7752.                   do
 7753.                      flux_total(1 + $I_L7752_353, 1 + $I_L7751_431) = 0.0
 7754.                      $I_L7752_353 = 1 + $I_L7752_353
 7752.                      if ( $I_L7752_353 >= n_profile ) exit
 7752.                   enddo
 7755.                   $I_L7751_431 = 1 + $I_L7751_431
 7754.                   if ( $I_L7751_431 >= 2 + 2 * n_layer ) exit
 7754.                enddo
 7754.             endif
 7754.          endif
 7757.          if ( isolir == 1 ) then
 7758.             if ( n_layer >= 0 ) then
 7759.                if ( n_profile > 0 ) then
 7758.                   $I_L7758_433 = 0
 7758.                   do
 7759.                      $I_L7759_355 = 0
 7759. !dir$ ivdep
 7759.                      do
 7760.                         flux_direct(1 + $I_L7759_355, $I_L7758_433) = 0.0
 7761.                         $I_L7759_355 = 1 + $I_L7759_355
 7759.                         if ( $I_L7759_355 >= n_profile ) exit
 7759.                      enddo
 7762.                      $I_L7758_433 = 1 + $I_L7758_433
 7761.                      if ( $I_L7758_433 >= 1 + n_layer ) exit
 7761.                   enddo
 7761.                endif
 7761.             endif
 7761.          endif
 7761.       else
 7767.          if ( n_direction > 0 ) then
 7768.             if ( n_viewing_level > 0 ) then
 7769.                if ( n_profile > 0 ) then
 7767.                   $I_L7767_479 = 0
 7767.                   do
 7768.                      $I_L7768_435 = 0
 7768.                      do
 7769.                         $I_L7769_357 = 0
 7769. !dir$ ivdep
 7769.                         do
 7770.                            radiance(1 + $I_L7769_357, 1 + $I_L7768_435, 1 + $I_L7767_479) = 0.0
 7771.                            $I_L7769_357 = 1 + $I_L7769_357
 7769.                            if ( $I_L7769_357 >= n_profile ) exit
 7769.                         enddo
 7772.                         $I_L7768_435 = 1 + $I_L7768_435
 7771.                         if ( $I_L7768_435 >= n_viewing_level ) exit
 7771.                      enddo
 7773.                      $I_L7767_479 = 1 + $I_L7767_479
 7772.                      if ( $I_L7767_479 >= n_direction ) exit
 7772.                   enddo
 7772.                endif
 7772.             endif
 7772.          endif
 7775.          if ( n_viewing_level > 0 ) then
 7776.             if ( n_profile > 0 ) then
 7775.                $I_L7775_437 = 0
 7775.                do
 7776.                   $I_L7776_359 = 0
 7776. !dir$ ivdep
 7776.                   do
 7777.                      j_radiance(1 + $I_L7776_359, 1 + $I_L7775_437) = 0.0
 7778.                      $I_L7776_359 = 1 + $I_L7776_359
 7776.                      if ( $I_L7776_359 >= n_profile ) exit
 7776.                   enddo
 7779.                   $I_L7775_437 = 1 + $I_L7775_437
 7778.                   if ( $I_L7775_437 >= n_viewing_level ) exit
 7778.                enddo
 7778.             endif
 7778.          endif
 7781.          if ( isolir == 1 ) then
 7784.             if ( n_layer > 0 ) then
 7785.                if ( n_profile > 0 ) then
 7784.                   $I_L7784_439 = 0
 7784.                   do
 7785.                      $I_L7785_361 = 0
 7785. !dir$ ivdep
 7785.                      do
 7786.                         i_direct(1 + $I_L7785_361, 1 + $I_L7784_439) = 0.0
 7787.                         $I_L7785_361 = 1 + $I_L7785_361
 7785.                         if ( $I_L7785_361 >= n_profile ) exit
 7785.                      enddo
 7788.                      $I_L7784_439 = 1 + $I_L7784_439
 7787.                      if ( $I_L7784_439 >= n_layer ) exit
 7787.                   enddo
 7787.                endif
 7787.             endif
 7787.          endif
 7787.       endif
 7798.       $lp_S11 = 1
 7799.       $l_new_S13 = .true.
 7801.       if ( 0 < n_profile ) then
 7801.          do
 7803.             $ll_S12 = 0
 7805.             if ( 0 < nd_profile_column .and. $lp_S11 <= n_profile ) then
 7805. !dir$ loop_info (automatic) cache_nt( i_direct, area_column, n_column_slv, d_planck_flux_surface, zen_0, flux_inc_down, weight_column, flux_inc_down_long, d_planck_flux_surface_long, i_direct_column, zen_0_long, target )
 7805.                do
 7807.                   $ll_S12 = 1 + $ll_S12
 7808.                   target($ll_S12) = $lp_S11
 7810.                   if ( $l_new_S13 ) then
 7814.                      icl = 1
 7815.                      ics = 1
 7816.                      if ( -1 + n_cloud_top > 0 ) then
 7819.                         if ( n_order_phase > 0 ) then
 7816.                            $I_L7816_419 = 0
 7816. !dir$ ivdep
 7816.                            do
 7817.                               tau_long($ll_S12, 1 + $I_L7816_419) = (ss_prop%tau_clr%base_addr)($lp_S11, 1 + $I_L7816_419, 0)
 7818.                               omega_long($ll_S12, 1 + $I_L7816_419) = (ss_prop%omega_clr%base_addr)($lp_S11, 1 + $I_L7816_419, 0)
 7823.                               $I_L7816_419 = 1 + $I_L7816_419
 7822.                               if ( $I_L7816_419 >= -1 + n_cloud_top ) exit
 7822.                            enddo
 7819.                            $I_L7819_473 = 0
 7819.                            do
 7816.                               $I_L7816_421 = 0
 7816. !dir$ ivdep
 7816.                               do
 7820.                                  phase_fnc_long($ll_S12, 1 + $I_L7816_421, 1 + $I_L7819_473) = (ss_prop%phase_fnc_clr%base_addr)($lp_S11, 1 + $I_L7816_421, 1 + $I_L7819_473, 0)
 7823.                                  $I_L7816_421 = 1 + $I_L7816_421
 7819.                                  if ( $I_L7816_421 >= -1 + n_cloud_top ) exit
 7819.                               enddo
 7822.                               $I_L7819_473 = 1 + $I_L7819_473
 7822.                               if ( $I_L7819_473 >= n_order_phase ) exit
 7822.                            enddo
 7822.                         else
 7816.                            $I_L7816_397 = 0
 7816. !dir$ ivdep
 7816.                            do
 7817.                               tau_long($ll_S12, 1 + $I_L7816_397) = (ss_prop%tau_clr%base_addr)($lp_S11, 1 + $I_L7816_397, 0)
 7818.                               omega_long($ll_S12, 1 + $I_L7816_397) = (ss_prop%omega_clr%base_addr)($lp_S11, 1 + $I_L7816_397, 0)
 7823.                               $I_L7816_397 = 1 + $I_L7816_397
 7822.                               if ( $I_L7816_397 >= -1 + n_cloud_top ) exit
 7822.                            enddo
 7822.                         endif
 7822.                      endif
 7824.                      if ( n_layer + -n_cloud_top >= 0 ) then
 7827.                         if ( n_order_phase > 0 ) then
 7824.                            $I_L7824_423 = 0
 7824. !dir$ ivdep
 7824.                            do
 7825.                               tau_long($ll_S12, n_cloud_top + $I_L7824_423) = (ss_prop%tau%base_addr)($lp_S11, n_cloud_top + $I_L7824_423, 0, 0)
 7826.                               omega_long($ll_S12, n_cloud_top + $I_L7824_423) = (ss_prop%omega%base_addr)($lp_S11, n_cloud_top + $I_L7824_423, 0, 0)
 7831.                               $I_L7824_423 = 1 + $I_L7824_423
 7830.                               if ( $I_L7824_423 >= n_layer + -n_cloud_top + 1 ) exit
 7830.                            enddo
 7827.                            $I_L7827_475 = 0
 7827.                            do
 7824.                               $I_L7824_425 = 0
 7824. !dir$ ivdep
 7824.                               do
 7828.                                  phase_fnc_long($ll_S12, n_cloud_top + $I_L7824_425, 1 + $I_L7827_475) = (ss_prop%phase_fnc%base_addr)($lp_S11, n_cloud_top + $I_L7824_425, 1 + $I_L7827_475, 0, 0)
 7831.                                  $I_L7824_425 = 1 + $I_L7824_425
 7827.                                  if ( $I_L7824_425 >= n_layer + -n_cloud_top + 1 ) exit
 7827.                               enddo
 7830.                               $I_L7827_475 = 1 + $I_L7827_475
 7830.                               if ( $I_L7827_475 >= n_order_phase ) exit
 7830.                            enddo
 7830.                         else
 7824.                            $I_L7824_399 = 0
 7824. !dir$ ivdep
 7824.                            do
 7825.                               tau_long($ll_S12, n_cloud_top + $I_L7824_399) = (ss_prop%tau%base_addr)($lp_S11, n_cloud_top + $I_L7824_399, 0, 0)
 7826.                               omega_long($ll_S12, n_cloud_top + $I_L7824_399) = (ss_prop%omega%base_addr)($lp_S11, n_cloud_top + $I_L7824_399, 0, 0)
 7831.                               $I_L7824_399 = 1 + $I_L7824_399
 7830.                               if ( $I_L7824_399 >= n_layer + -n_cloud_top + 1 ) exit
 7830.                            enddo
 7830.                         endif
 7830.                      endif
 7832.                      if ( i_sph_algorithm == 2 ) then
 7833.                         if ( n_direction > 0 ) then
 7834.                            if ( -1 + n_cloud_top > 0 ) then
 7838.                               if ( n_layer + -n_cloud_top >= 0 ) then
 7833.                                  $I_L7833_477 = 0
 7833.                                  do
 7834.                                     $I_L7834_427 = 0
 7834. !dir$ ivdep
 7834.                                     do
 7835.                                        phase_fnc_solar_long($ll_S12, 1 + $I_L7834_427, 1 + $I_L7833_477) = (ss_prop%phase_fnc_solar_clr%base_addr)($lp_S11, 1 + $I_L7834_427, 1 + $I_L7833_477, 0)
 7837.                                        $I_L7834_427 = 1 + $I_L7834_427
 7834.                                        if ( $I_L7834_427 >= -1 + n_cloud_top ) exit
 7834.                                     enddo
 7838.                                     $I_L7838_429 = 0
 7838. !dir$ ivdep
 7838.                                     do
 7839.                                        phase_fnc_solar_long($ll_S12, n_cloud_top + $I_L7838_429, 1 + $I_L7833_477) = (ss_prop%phase_fnc_solar%base_addr)($lp_S11, n_cloud_top + $I_L7838_429, 1 + $I_L7833_477, 0, 0)
 7841.                                        $I_L7838_429 = 1 + $I_L7838_429
 7838.                                        if ( $I_L7838_429 >= n_layer + -n_cloud_top + 1 ) exit
 7838.                                     enddo
 7842.                                     $I_L7833_477 = 1 + $I_L7833_477
 7841.                                     if ( $I_L7833_477 >= n_direction ) exit
 7841.                                  enddo
 7841.                               else
 7833.                                  $I_L7833_465 = 0
 7833.                                  do
 7834.                                     $I_L7834_405 = 0
 7834. !dir$ ivdep
 7834.                                     do
 7835.                                        phase_fnc_solar_long($ll_S12, 1 + $I_L7834_405, 1 + $I_L7833_465) = (ss_prop%phase_fnc_solar_clr%base_addr)($lp_S11, 1 + $I_L7834_405, 1 + $I_L7833_465, 0)
 7837.                                        $I_L7834_405 = 1 + $I_L7834_405
 7834.                                        if ( $I_L7834_405 >= -1 + n_cloud_top ) exit
 7834.                                     enddo
 7842.                                     $I_L7833_465 = 1 + $I_L7833_465
 7841.                                     if ( $I_L7833_465 >= n_direction ) exit
 7841.                                  enddo
 7841.                               endif
 7841.                            else if ( n_layer + -n_cloud_top >= 0 ) then
 7833.                               $I_L7833_461 = 0
 7833.                               do
 7838.                                  $I_L7838_401 = 0
 7838. !dir$ ivdep
 7838.                                  do
 7839.                                     phase_fnc_solar_long($ll_S12, n_cloud_top + $I_L7838_401, 1 + $I_L7833_461) = (ss_prop%phase_fnc_solar%base_addr)($lp_S11, n_cloud_top + $I_L7838_401, 1 + $I_L7833_461, 0, 0)
 7841.                                     $I_L7838_401 = 1 + $I_L7838_401
 7838.                                     if ( $I_L7838_401 >= n_layer + -n_cloud_top + 1 ) exit
 7838.                                  enddo
 7842.                                  $I_L7833_461 = 1 + $I_L7833_461
 7841.                                  if ( $I_L7833_461 >= n_direction ) exit
 7841.                               enddo
 7841.                            endif
 7841.                         endif
 7841.                      endif
 7856.                      $l_new_S13 = .false.
 7856.                   else
 7870.                      if ( n_layer > 0 ) then
 7873.                         if ( n_order_phase > 0 ) then
 7870.                            $I_L7870_415 = 0
 7870. !dir$ ivdep
 7870.                            do
 7871.                               tau_long($ll_S12, 1 + $I_L7870_415) = tau_long(cvmg( n_long, -1 + $ll_S12, $ll_S12 <= 1 ), 1 + $I_L7870_415)
 7872.                               omega_long($ll_S12, 1 + $I_L7870_415) = omega_long(cvmg( n_long, -1 + $ll_S12, $ll_S12 <= 1 ), 1 + $I_L7870_415)
 7877.                               $I_L7870_415 = 1 + $I_L7870_415
 7876.                               if ( $I_L7870_415 >= n_layer ) exit
 7876.                            enddo
 7873.                            $I_L7873_471 = 0
 7873.                            do
 7870.                               $I_L7870_417 = 0
 7870. !dir$ ivdep
 7870.                               do
 7874.                                  phase_fnc_long($ll_S12, 1 + $I_L7870_417, 1 + $I_L7873_471) = phase_fnc_long(cvmg( n_long, -1 + $ll_S12, $ll_S12 <= 1 ), 1 + $I_L7870_417, 1 + $I_L7873_471)
 7877.                                  $I_L7870_417 = 1 + $I_L7870_417
 7873.                                  if ( $I_L7870_417 >= n_layer ) exit
 7873.                               enddo
 7876.                               $I_L7873_471 = 1 + $I_L7873_471
 7876.                               if ( $I_L7873_471 >= n_order_phase ) exit
 7876.                            enddo
 7876.                         else
 7870.                            $I_L7870_395 = 0
 7870. !dir$ ivdep
 7870.                            do
 7871.                               tau_long($ll_S12, 1 + $I_L7870_395) = tau_long(cvmg( n_long, -1 + $ll_S12, $ll_S12 <= 1 ), 1 + $I_L7870_395)
 7872.                               omega_long($ll_S12, 1 + $I_L7870_395) = omega_long(cvmg( n_long, -1 + $ll_S12, $ll_S12 <= 1 ), 1 + $I_L7870_395)
 7877.                               $I_L7870_395 = 1 + $I_L7870_395
 7876.                               if ( $I_L7870_395 >= n_layer ) exit
 7876.                            enddo
 7876.                         endif
 7876.                      endif
 7878.                      if ( i_sph_algorithm == 2 ) then
 7879.                         if ( n_direction > 0 ) then
 7880.                            if ( n_layer > 0 ) then
 7879.                               $I_L7879_441 = 0
 7879.                               do
 7880.                                  $I_L7880_363 = 0
 7880. !dir$ ivdep
 7880.                                  do
 7881.                                     phase_fnc_solar_long($ll_S12, 1 + $I_L7880_363, 1 + $I_L7879_441) = phase_fnc_solar_long(cvmg( n_long, -1 + $ll_S12, $ll_S12 <= 1 ), 1 + $I_L7880_363, 1 + $I_L7879_441)
 7883.                                     $I_L7880_363 = 1 + $I_L7880_363
 7880.                                     if ( $I_L7880_363 >= n_layer ) exit
 7880.                                  enddo
 7884.                                  $I_L7879_441 = 1 + $I_L7879_441
 7883.                                  if ( $I_L7879_441 >= n_direction ) exit
 7883.                               enddo
 7883.                            endif
 7883.                         endif
 7883.                      endif
 7883.                   endif
 7898.                   if ( icl < list_column_slv($lp_S11, ics) ) then
 7898.                      $Trips02_N79 = ( list_column_slv($lp_S11, ics) + -icl )
 7904.                      if ( n_order_phase > 0 ) then
 7908.                         if ( i_sph_algorithm /= 2 ) then
 7898.                            $I_icl_467 = 0
 7898.                            do
 7899.                               $icc_S28 = i_clm_lyr_chn($lp_S11, icl + $I_icl_467)
 7900.                               $ict_S29 = i_clm_cld_typ($lp_S11, icl + $I_icl_467)
 7902.                               tau_long($ll_S12, $icc_S28) = (ss_prop%tau%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7903.                               omega_long($ll_S12, $icc_S28) = (ss_prop%omega%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7904.                               $I_L7904_407 = 0
 7904. !dir$ ivdep
 7904.                               do
 7905.                                  phase_fnc_long($ll_S12, $icc_S28, 1 + $I_L7904_407) = (ss_prop%phase_fnc%base_addr)($lp_S11, $icc_S28, 1 + $I_L7904_407, $ict_S29, 0)
 7907.                                  $I_L7904_407 = 1 + $I_L7904_407
 7904.                                  if ( $I_L7904_407 >= n_order_phase ) exit
 7904.                               enddo
 7920.                               $I_icl_467 = 1 + $I_icl_467
 7917.                               if ( $I_icl_467 >= $Trips02_N79 ) exit
 7917.                            enddo
 7917.                         else if ( n_direction > 0 ) then
 7898.                            $I_icl_443 = 0
 7898.                            do
 7899.                               $icc_S28 = i_clm_lyr_chn($lp_S11, icl + $I_icl_443)
 7900.                               $ict_S29 = i_clm_cld_typ($lp_S11, icl + $I_icl_443)
 7902.                               tau_long($ll_S12, $icc_S28) = (ss_prop%tau%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7903.                               omega_long($ll_S12, $icc_S28) = (ss_prop%omega%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7904.                               $I_L7904_365 = 0
 7904. !dir$ ivdep
 7904.                               do
 7905.                                  phase_fnc_long($ll_S12, $icc_S28, 1 + $I_L7904_365) = (ss_prop%phase_fnc%base_addr)($lp_S11, $icc_S28, 1 + $I_L7904_365, $ict_S29, 0)
 7907.                                  $I_L7904_365 = 1 + $I_L7904_365
 7904.                                  if ( $I_L7904_365 >= n_order_phase ) exit
 7904.                               enddo
 7909.                               $I_L7909_367 = 0
 7909. !dir$ ivdep
 7909.                               do
 7910.                                  phase_fnc_solar_long($ll_S12, $icc_S28, 1 + $I_L7909_367) = (ss_prop%phase_fnc_solar%base_addr)($lp_S11, $icc_S28, 1 + $I_L7909_367, $ict_S29, 0)
 7912.                                  $I_L7909_367 = 1 + $I_L7909_367
 7909.                                  if ( $I_L7909_367 >= n_direction ) exit
 7909.                               enddo
 7920.                               $I_icl_443 = 1 + $I_icl_443
 7917.                               if ( $I_icl_443 >= $Trips02_N79 ) exit
 7917.                            enddo
 7917.                         else
 7898.                            $I_icl_469 = 0
 7898.                            do
 7899.                               $icc_S28 = i_clm_lyr_chn($lp_S11, icl + $I_icl_469)
 7900.                               $ict_S29 = i_clm_cld_typ($lp_S11, icl + $I_icl_469)
 7902.                               tau_long($ll_S12, $icc_S28) = (ss_prop%tau%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7903.                               omega_long($ll_S12, $icc_S28) = (ss_prop%omega%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7904.                               $I_L7904_411 = 0
 7904. !dir$ ivdep
 7904.                               do
 7905.                                  phase_fnc_long($ll_S12, $icc_S28, 1 + $I_L7904_411) = (ss_prop%phase_fnc%base_addr)($lp_S11, $icc_S28, 1 + $I_L7904_411, $ict_S29, 0)
 7907.                                  $I_L7904_411 = 1 + $I_L7904_411
 7904.                                  if ( $I_L7904_411 >= n_order_phase ) exit
 7904.                               enddo
 7920.                               $I_icl_469 = 1 + $I_icl_469
 7917.                               if ( $I_icl_469 >= $Trips02_N79 ) exit
 7917.                            enddo
 7917.                         endif
 7917.                      else if ( i_sph_algorithm /= 2 ) then
 7898.                         $I_icl_409 = 0
 7898. !dir$ ivdep
 7898.                         do
 7899.                            $icc_S28 = i_clm_lyr_chn($lp_S11, icl + $I_icl_409)
 7900.                            $ict_S29 = i_clm_cld_typ($lp_S11, icl + $I_icl_409)
 7902.                            tau_long($ll_S12, $icc_S28) = (ss_prop%tau%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7903.                            omega_long($ll_S12, $icc_S28) = (ss_prop%omega%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7920.                            $I_icl_409 = 1 + $I_icl_409
 7917.                            if ( $I_icl_409 >= $Trips02_N79 ) exit
 7917.                         enddo
 7917.                      else if ( n_direction > 0 ) then
 7898.                         $I_icl_463 = 0
 7898.                         do
 7899.                            $icc_S28 = i_clm_lyr_chn($lp_S11, icl + $I_icl_463)
 7900.                            $ict_S29 = i_clm_cld_typ($lp_S11, icl + $I_icl_463)
 7902.                            tau_long($ll_S12, $icc_S28) = (ss_prop%tau%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7903.                            omega_long($ll_S12, $icc_S28) = (ss_prop%omega%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7909.                            $I_L7909_403 = 0
 7909. !dir$ ivdep
 7909.                            do
 7910.                               phase_fnc_solar_long($ll_S12, $icc_S28, 1 + $I_L7909_403) = (ss_prop%phase_fnc_solar%base_addr)($lp_S11, $icc_S28, 1 + $I_L7909_403, $ict_S29, 0)
 7912.                               $I_L7909_403 = 1 + $I_L7909_403
 7909.                               if ( $I_L7909_403 >= n_direction ) exit
 7909.                            enddo
 7920.                            $I_icl_463 = 1 + $I_icl_463
 7917.                            if ( $I_icl_463 >= $Trips02_N79 ) exit
 7917.                         enddo
 7917.                      else
 7898.                         $I_icl_413 = 0
 7898. !dir$ ivdep
 7898.                         do
 7899.                            $icc_S28 = i_clm_lyr_chn($lp_S11, icl + $I_icl_413)
 7900.                            $ict_S29 = i_clm_cld_typ($lp_S11, icl + $I_icl_413)
 7902.                            tau_long($ll_S12, $icc_S28) = (ss_prop%tau%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7903.                            omega_long($ll_S12, $icc_S28) = (ss_prop%omega%base_addr)($lp_S11, $icc_S28, $ict_S29, 0)
 7920.                            $I_icl_413 = 1 + $I_icl_413
 7917.                            if ( $I_icl_413 >= $Trips02_N79 ) exit
 7917.                         enddo
 7917.                      endif
 7919.                      icl = ( icl + $Trips02_N79 )
 7919.                   endif
 7924.                   if ( isolir == 1 ) then
 7926.                      if ( l_scale_solar ) then
 7927.                         if ( n_layer > 0 ) then
 7927.                            $I_L7927_369 = 0
 7927. !dir$ ivdep
 7927.                            do
 7928.                               adjust_solar_ke_long($ll_S12, 1 + $I_L7927_369) = adjust_solar_ke($lp_S11, 1 + $I_L7927_369)
 7929.                               $I_L7927_369 = 1 + $I_L7927_369
 7927.                               if ( $I_L7927_369 >= n_layer ) exit
 7927.                            enddo
 7927.                         endif
 7927.                      endif
 7932.                      zen_0_long($ll_S12) = zen_0($lp_S11)
 7933.                      i_direct_column($ll_S12, 0) = i_direct($lp_S11, 0)
 7934.                      if ( ms_max + -ms_min >= 0 ) then
 7934.                         $I_L7934_447 = 0
 7934.                         do
 7935.                            $t_S34 = 1 + ls_local_trunc(ms_min + $I_L7934_447)
 7935.                            if ( ( $t_S34 + -ms_min + -$I_L7934_447 ) >= 0 ) then
 7935.                               $SCA_ia_sph_mm_I72 = ia_sph_mm(ms_min + $I_L7934_447)
 7935.                               $I_L7935_377 = 0
 7935. !dir$ ivdep
 7935.                               do
 7937.                                  uplm_sol_long($ll_S12, $SCA_ia_sph_mm_I72 + $I_L7935_377) = uplm_sol($lp_S11, $SCA_ia_sph_mm_I72 + $I_L7935_377)
 7938.                                  $I_L7935_377 = 1 + $I_L7935_377
 7935.                                  if ( $I_L7935_377 >= $t_S34 + -ms_min + -$I_L7934_447 + 1 ) exit
 7935.                               enddo
 7935.                            endif
 7939.                            $I_L7934_447 = 1 + $I_L7934_447
 7938.                            if ( $I_L7934_447 >= ms_max + -ms_min + 1 ) exit
 7938.                         enddo
 7938.                      endif
 7941.                      if ( i_sph_algorithm == 2 ) then
 7942.                         if ( n_direction > 0 ) then
 7943.                            if ( n_brdf_basis_fnc > 0 ) then
 7942.                               $I_L7942_449 = 0
 7942.                               do
 7943.                                  $I_L7943_379 = 0
 7943. !dir$ ivdep
 7943.                                  do
 7944.                                     brdf_sol_long($ll_S12, 1 + $I_L7943_379, 1 + $I_L7942_449) = brdf_sol($lp_S11, 1 + $I_L7943_379, 1 + $I_L7942_449)
 7945.                                     $I_L7943_379 = 1 + $I_L7943_379
 7943.                                     if ( $I_L7943_379 >= n_brdf_basis_fnc ) exit
 7943.                                  enddo
 7946.                                  $I_L7942_449 = 1 + $I_L7942_449
 7945.                                  if ( $I_L7942_449 >= n_direction ) exit
 7945.                               enddo
 7945.                            endif
 7945.                         endif
 7945.                      endif
 7949.                   else if ( isolir == 2 ) then
 7951.                      d_planck_flux_surface_long($ll_S12) = d_planck_flux_surface($lp_S11)
 7953.                      if ( n_layer > 0 ) then
 7953.                         $I_L7953_371 = 0
 7953. !dir$ ivdep
 7953.                         do
 7954.                            diff_planck_long($ll_S12, 1 + $I_L7953_371) = diff_planck($lp_S11, 1 + $I_L7953_371)
 7955.                            $I_L7953_371 = 1 + $I_L7953_371
 7953.                            if ( $I_L7953_371 >= n_layer ) exit
 7953.                         enddo
 7953.                      endif
 7956.                      if ( l_ir_source_quad ) then
 7957.                         if ( n_layer > 0 ) then
 7957.                            $I_L7957_373 = 0
 7957. !dir$ ivdep
 7957.                            do
 7958.                               diff_planck_2_long($ll_S12, 1 + $I_L7957_373) = diff_planck_2($lp_S11, 1 + $I_L7957_373)
 7959.                               $I_L7957_373 = 1 + $I_L7957_373
 7957.                               if ( $I_L7957_373 >= n_layer ) exit
 7957.                            enddo
 7957.                         endif
 7957.                      endif
 7961.                      if ( i_sph_algorithm == 2 ) then
 7962.                         if ( n_direction > 0 ) then
 7963.                            if ( n_brdf_basis_fnc > 0 ) then
 7962.                               $I_L7962_445 = 0
 7962.                               do
 7963.                                  $I_L7963_375 = 0
 7963. !dir$ ivdep
 7963.                                  do
 7964.                                     brdf_hemi_long($ll_S12, 1 + $I_L7963_375, 1 + $I_L7962_445) = brdf_hemi($lp_S11, 1 + $I_L7963_375, 1 + $I_L7962_445)
 7965.                                     $I_L7963_375 = 1 + $I_L7963_375
 7963.                                     if ( $I_L7963_375 >= n_brdf_basis_fnc ) exit
 7963.                                  enddo
 7966.                                  $I_L7962_445 = 1 + $I_L7962_445
 7965.                                  if ( $I_L7962_445 >= n_direction ) exit
 7965.                               enddo
 7965.                            endif
 7965.                         endif
 7965.                      endif
 7965.                   endif
 7972.                   if ( i_sph_mode == 1 ) then
 7973.                      if ( n_direction > 0 ) then
 7973.                         $I_L7973_381 = 0
 7973. !dir$ ivdep
 7973.                         do
 7974.                            direction_long($ll_S12, 1 + $I_L7973_381, 1) = direction($lp_S11, 1 + $I_L7973_381, 1)
 7975.                            direction_long($ll_S12, 1 + $I_L7973_381, 2) = direction($lp_S11, 1 + $I_L7973_381, 2)
 7976.                            $I_L7973_381 = 1 + $I_L7973_381
 7973.                            if ( $I_L7973_381 >= n_direction ) exit
 7973.                         enddo
 7973.                      endif
 7973.                   endif
 7979.                   flux_inc_down_long($ll_S12) = flux_inc_down($lp_S11)
 7980.                   if ( n_brdf_basis_fnc > 0 ) then
 7980.                      $I_L7980_383 = 0
 7980. !dir$ ivdep
 7980.                      do
 7981.                         rho_alb_long($ll_S12, 1 + $I_L7980_383) = rho_alb($lp_S11, 1 + $I_L7980_383)
 7982.                         $I_L7980_383 = 1 + $I_L7980_383
 7980.                         if ( $I_L7980_383 >= n_brdf_basis_fnc ) exit
 7980.                      enddo
 7980.                   endif
 7986.                   weight_column($ll_S12) = area_column($lp_S11, icl)
 7991.                   ics = 1 + ics
 7992.                   if ( ics > n_column_slv($lp_S11) ) then
 7993.                      $lp_S11 = 1 + $lp_S11
 7994.                      $l_new_S13 = .true.
 7994.                   endif
 7995.                   if ( ( $ll_S12 < nd_profile_column .and. $lp_S11 <= n_profile ) == 0 ) exit
 7995.                enddo
 7995.             endif
 8001.             n_long = $ll_S12
 8004.             call sph_solver( ierr, n_long, n_layer, ms_min, ms_max, i_truncation, ls_local_trunc(0), cg_coeff(1), uplm_zero(1), ia_sph_mm(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, isolir, l_scale_solar, adjust_solar_ke_long(1, 1), i_direct_column(1, 0), zen_0_long(1), uplm_sol_long(1, 1), diff_planck_long(1, 1), flux_inc_down_long(1), l_ir_source_quad, diff_planck_2_long(1, 1), tau_long(1, 1), omega_long(1, 1), phase_fnc_long(1, 1, 1), phase_fnc_solar_long(1, 1, 1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb_long(1, 1), f_brdf(1, 0, 0, 0), brdf_sol_long(1, 1, 1), brdf_hemi_long(1, 1, 1), d_planck_flux_surface_long(1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction_long(1, 1, 1), flux_direct_column(1, 0), flux_total_column(1, 1), radiance_column(1, 1, 1), photolysis_column(1, 1), nd_profile_column, nd_layer, nd_profile_column, nd_profile_column, nd_profile_column, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range, nd_viewing_level, nd_direction )
 8049.             if ( i_sph_mode == 2 ) then
 8051.                if ( 2 + 2 * n_layer > 0 ) then
 8052.                   if ( n_long > 0 ) then
 8051.                      $I_L8051_451 = 0
 8051. !dir$ blocking_size( 0, 0 )
 8051.                      do
 8052.                         $I_L8052_385 = 0
 8052. !dir$ ivdep
 8052. !dir$ blocking_size( 0, 0 )
 8052.                         do
 8053.                            $l_S47 = target(1 + $I_L8052_385)
 8054.                            flux_total($l_S47, 1 + $I_L8051_451) = _vu_plus( flux_total($l_S47, 1 + $I_L8051_451), weight_column(1 + $I_L8052_385) * flux_total_column(1 + $I_L8052_385, 1 + $I_L8051_451) )
 8056.                            $I_L8052_385 = 1 + $I_L8052_385
 8052.                            if ( $I_L8052_385 >= n_long ) exit
 8052.                         enddo
 8057.                         $I_L8051_451 = 1 + $I_L8051_451
 8056.                         if ( $I_L8051_451 >= 2 + 2 * n_layer ) exit
 8056.                      enddo
 8056.                   endif
 8056.                endif
 8059.                if ( isolir == 1 ) then
 8060.                   if ( n_layer >= 0 ) then
 8061.                      if ( n_long > 0 ) then
 8060.                         $I_L8060_453 = 0
 8060. !dir$ blocking_size( 0, 0 )
 8060.                         do
 8061.                            $I_L8061_387 = 0
 8061. !dir$ ivdep
 8061. !dir$ blocking_size( 0, 0 )
 8061.                            do
 8062.                               $l_S50 = target(1 + $I_L8061_387)
 8063.                               flux_direct($l_S50, $I_L8060_453) = _vu_plus( flux_direct($l_S50, $I_L8060_453), weight_column(1 + $I_L8061_387) * flux_direct_column(1 + $I_L8061_387, $I_L8060_453) )
 8065.                               $I_L8061_387 = 1 + $I_L8061_387
 8061.                               if ( $I_L8061_387 >= n_long ) exit
 8061.                            enddo
 8066.                            $I_L8060_453 = 1 + $I_L8060_453
 8065.                            if ( $I_L8060_453 >= 1 + n_layer ) exit
 8065.                         enddo
 8065.                      endif
 8065.                   endif
 8065.                endif
 8065.             else
 8071.                if ( n_direction > 0 ) then
 8072.                   if ( n_viewing_level > 0 ) then
 8073.                      if ( n_long > 0 ) then
 8071.                         $SI_L8071_481_G10 = 0
 8071.                         do
 8072.                            $SI_L8072_455_G13 = 0
 8072.                            do
 8073.                               $SI_L8073_389_G16 = 0
 8073.                               do
 8071.                                  $I_L8071_489 = 0
 8071. !dir$ shortloop16
 8071. !dir$ blocking_size( 8, 8 )
 8071.                                  do
 8072.                                     $I_L8072_486 = 0
 8072. !dir$ shortloop16
 8072. !dir$ blocking_size( 8, 8 )
 8072.                                     do
 8073.                                        $I_L8073_483 = 0
 8073. !dir$ ivdep
 8073. !dir$ blocking_size( 256, 256 )
 8073.                                        do
 8074.                                           $l_S54 = target($I_L8073_483 + 256 * $SI_L8073_389_G16 + 1)
 8075.                                           radiance($l_S54, $I_L8072_486 + 8 * $SI_L8072_455_G13 + 1, $I_L8071_489 + 8 * $SI_L8071_481_G10 + 1) = _vu_plus( radiance($l_S54, $I_L8072_486 + 8 * $SI_L8072_455_G13 + 1, $I_L8071_489 + 8 * $SI_L8071_481_G10 + 1), weight_column($I_L8073_483 + 256 * $SI_L8073_389_G16 + 1) * radiance_column($I_L8073_483 + 256 * $SI_L8073_389_G16 + 1, $I_L8072_486 + 8 * $SI_L8072_455_G13 + 1, $I_L8071_489 + 8 * $SI_L8071_481_G10 + 1) )
 8073.                                           $I_L8073_483 = 1 + $I_L8073_483
 8073.                                           if ( $I_L8073_483 >= min( n_long, 256 + 256 * $SI_L8073_389_G16 ) + -256 * $SI_L8073_389_G16 ) exit
 8073.                                        enddo
 8072.                                        $I_L8072_486 = 1 + $I_L8072_486
 8072.                                        if ( $I_L8072_486 >= min( n_viewing_level, 8 + 8 * $SI_L8072_455_G13 ) + -8 * $SI_L8072_455_G13 ) exit
 8072.                                     enddo
 8071.                                     $I_L8071_489 = 1 + $I_L8071_489
 8077.                                     if ( $I_L8071_489 >= min( n_direction, 8 + 8 * $SI_L8071_481_G10 ) + -8 * $SI_L8071_481_G10 ) exit
 8077.                                  enddo
 8073.                                  $SI_L8073_389_G16 = 1 + $SI_L8073_389_G16
 8073.                                  if ( $SI_L8073_389_G16 >= _rsh( 255 + n_long, 8 ) ) exit
 8073.                               enddo
 8072.                               $SI_L8072_455_G13 = 1 + $SI_L8072_455_G13
 8078.                               if ( $SI_L8072_455_G13 >= _rsh( 7 + n_viewing_level, 3 ) ) exit
 8078.                            enddo
 8071.                            $SI_L8071_481_G10 = 1 + $SI_L8071_481_G10
 8071.                            if ( $SI_L8071_481_G10 >= _rsh( 7 + n_direction, 3 ) ) exit
 8071.                         enddo
 8071.                      endif
 8071.                   endif
 8071.                endif
 8081.                if ( n_viewing_level > 0 ) then
 8082.                   if ( n_long > 0 ) then
 8081.                      $I_L8081_457 = 0
 8081. !dir$ blocking_size( 0, 0 )
 8081.                      do
 8082.                         $I_L8082_391 = 0
 8082. !dir$ ivdep
 8082. !dir$ blocking_size( 0, 0 )
 8082.                         do
 8083.                            $l_S57 = target(1 + $I_L8082_391)
 8084.                            j_radiance($l_S57, 1 + $I_L8081_457) = _vu_plus( j_radiance($l_S57, 1 + $I_L8081_457), weight_column(1 + $I_L8082_391) * photolysis_column(1 + $I_L8082_391, 1 + $I_L8081_457) )
 8086.                            $I_L8082_391 = 1 + $I_L8082_391
 8082.                            if ( $I_L8082_391 >= n_long ) exit
 8082.                         enddo
 8087.                         $I_L8081_457 = 1 + $I_L8081_457
 8086.                         if ( $I_L8081_457 >= n_viewing_level ) exit
 8086.                      enddo
 8086.                   endif
 8086.                endif
 8089.                if ( isolir == 1 ) then
 8090.                   if ( n_layer > 0 ) then
 8091.                      if ( n_long > 0 ) then
 8090.                         $I_L8090_459 = 0
 8090. !dir$ blocking_size( 0, 0 )
 8090.                         do
 8091.                            $I_L8091_393 = 0
 8091. !dir$ ivdep
 8091. !dir$ blocking_size( 0, 0 )
 8091.                            do
 8092.                               $l_S60 = target(1 + $I_L8091_393)
 8093.                               i_direct($l_S60, 1 + $I_L8090_459) = _vu_plus( i_direct($l_S60, 1 + $I_L8090_459), weight_column(1 + $I_L8091_393) * i_direct_column(1 + $I_L8091_393, 1 + $I_L8090_459) )
 8095.                               $I_L8091_393 = 1 + $I_L8091_393
 8091.                               if ( $I_L8091_393 >= n_long ) exit
 8091.                            enddo
 8096.                            $I_L8090_459 = 1 + $I_L8090_459
 8095.                            if ( $I_L8090_459 >= n_layer ) exit
 8095.                         enddo
 8095.                      endif
 8095.                   endif
 8095.                endif
 8095.             endif
 8099.             if ( $lp_S11 > n_profile ) exit
 8099.          enddo
 8099.       endif
 7389.       _free( t$1974 )
 8107.       return
 8107.       end
 8107.       
 8542.       
 8542.       subroutine calc_surf_rad( n_profile, n_layer, tau, ms, ls_trunc, euler_factor, isolir, i_direct_surf, mu_0, d_planck_flux_surface, n_brdf_basis_fnc, ls_brdf_trunc, f_brdf, rho_alb, brdf_sol, brdf_hemi, cgk, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, mu_v, up_lm, azim_factor, n_red_eigensystem, eig_vec, theta, source_base, radiance, weight_u, nd_profile, nd_layer, nd_direction, nd_viewing_level, nd_red_eigensystem, nd_max_order, nd_brdf_basis_fnc, nd_brdf_trunc )
 8138.       t$268 = nd_profile
 8138.       t$269 = nd_layer
 8192.       t$2057 = _zla( 0, nd_profile )
 8138.       t$2058 = _zla( 0, nd_profile )
 8192.       t$2059 = _zla( 0, nd_layer )
 8138.       t$2060 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 8138.       t$270 = nd_brdf_basis_fnc
 8138.       t$271 = nd_brdf_trunc / 2
 8138.       t$272 = nd_brdf_trunc
 8225.       t$2061 = _zla( 0, nd_brdf_basis_fnc )
 8138.       t$2062 = _zla( 0, nd_brdf_basis_fnc )
 8138.       t$2063 = 1 + nd_brdf_trunc / 2
 8225.       t$2064 = _zla( 0, 1 + nd_brdf_trunc / 2 )
 8138.       t$2065 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 8138.       t$2066 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
 8138.       t$2067 = 1 + nd_brdf_trunc
 8225.       t$2068 = _zla( 0, 1 + nd_brdf_trunc )
 8138.       t$2069 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
 8138.       t$2070 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 8138.       t$273 = nd_direction
 8138.       t$2071 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
 8230.       t$2072 = _zla( 0, nd_direction )
 8138.       t$2073 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
 8138.       t$274 = ( 1 + nd_brdf_trunc / 2 )
 8138.       t$275 = nd_max_order
 8237.       t$2074 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 8138.       t$2075 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 8237.       t$2076 = _zla( 0, nd_max_order )
 8138.       t$2077 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) * _zla( 0, nd_max_order )
 8138.       t$276 = nd_viewing_level
 8248.       t$2078 = _zla( 0, nd_viewing_level )
 8138.       t$2079 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
 8138.       t$277 = ( 1 + nd_max_order )
 8258.       t$2080 = _zla( 0, ( 1 + nd_max_order ) )
 8138.       t$2081 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) )
 8138.       t$2082 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) )
 8138.       t$278 = ( 2 * nd_red_eigensystem )
 8138.       t$279 = nd_red_eigensystem
 8265.       t$2083 = _zla( 0, ( 2 * nd_red_eigensystem ) )
 8138.       t$2084 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
 8265.       t$2085 = _zla( 0, nd_red_eigensystem )
 8138.       t$2086 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_red_eigensystem )
 8138.       t$2087 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem )
 8138.       t$280 = ( ls_trunc + -ms + 1 )
 8271.       t$2088 = _zla( 0, ( ls_trunc + -ms + 1 ) )
 8138.       t$2089 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) )
 8138.       t$2090 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
 8138.       t$2091 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
 8138.       t$2092 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
 8138.       t$2093 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
 8346.       t$2096 = 8 * _zla( 0, nd_profile )
 8318.       t$2098 = 12 * _zla( 0, nd_profile )
 8343.       t$2099 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8343.       t$2101 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8335.       t$2102 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8335.       t$2104 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8339.       t$2105 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8339.       t$2107 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
 8138.       t$281 = ( ls_trunc + -ms + 1 )
 8332.       t$2108 = _zla( 0, ( ls_trunc + -ms + 1 ) )
 8138.       t$2109 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) )
 8332.       t$2110 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 8 * _zla( 0, nd_profile )
 8332.       t$2112 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
 8321.       t$2113 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * _zla( 0, nd_profile )
 8321.       t$2115 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 16 * _zla( 0, nd_profile )
 8328.       t$2116 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 16 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8
 8328.       t$2118 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 24 * _zla( 0, nd_profile )
 8138.       t$2094 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 24 * _zla( 0, nd_profile ) ), 8 )
 8346.       t$2095 = t$2094
 8318.       t$2097 = t$2094 + 8 * _zla( 0, nd_profile )
 8343.       t$2100 = t$2094 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8335.       t$2103 = t$2094 + 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8339.       t$2106 = t$2094 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
 8332.       t$2111 = t$2094 + 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
 8321.       t$2114 = t$2094 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
 8328.       t$2117 = t$2094 + _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 16 * _zla( 0, nd_profile )
 8355.       if ( n_direction > 0 ) then
 8355.          $I_L8355_208 = 0
 8355.          do
 8358.             $n_list_up_S2 = 0
 8359.             if ( n_profile > 0 ) then
 8359.                $I_L8359_136 = 0
 8359. !dir$ ivdep
 8359. !dir$ loop_info (automatic) cache_nt( mu_v, list_up )
 8359.                do
 8360.                   if ( mu_v(1 + $I_L8359_136, 1 + $I_L8355_208) > 0.0 ) then
 8361.                      $n_list_up_S2 = 1 + $n_list_up_S2
 8362.                      list_up($n_list_up_S2) = ( 1 + $I_L8359_136 )
 8362.                   endif
 8364.                   $I_L8359_136 = 1 + $I_L8359_136
 8363.                   if ( $I_L8359_136 >= n_profile ) exit
 8363.                enddo
 8363.             endif
 8371.             if ( ms <= ls_brdf_trunc + -mod( ms, 2 ) ) then
 8373.                if ( n_brdf_basis_fnc > 0 ) then
 8374.                   if ( ls_trunc + -ms >= 0 ) then
 8373.                      $SI_L8373_200_G5 = 0
 8373.                      do
 8374.                         $SI_L8374_194_G8 = 0
 8374.                         do
 8373.                            $I_L8373_213 = 0
 8373. !dir$ shortloop16
 8373. !dir$ blocking_size( 8, 8 )
 8373.                            do
 8374.                               $I_L8374_210 = 0
 8374. !dir$ shortloop16
 8374. !dir$ blocking_size( 16, 16 )
 8374.                               do
 8376.                                  if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) >= 0 ) then
 8376.                                     $I_L8376_180 = 0
 8376.                                     do
 8378.                                        x = 0.0
 8379.                                        $I_L8379_138 = 0
 8379. !dir$ ivdep
 8379.                                        do
 8381.                                           x = x + -( cgk(1 + $I_L8379_138, $I_L8374_210 + 16 * $SI_L8374_194_G8 + 1) * f_brdf($I_L8373_213 + 8 * $SI_L8373_200_G5 + 1, ms + 2 * $I_L8376_180, ms + 2 * $I_L8379_138, ms) )
 8382.                                           $I_L8379_138 = 1 + $I_L8379_138
 8379.                                           if ( $I_L8379_138 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 8379.                                        enddo
 8383.                                        if ( 2 * $I_L8376_180 == 0 ) then
 8385.                                           if ( n_profile > 0 ) then
 8385.                                              $I_L8385_140 = 0
 8385. !dir$ ivdep
 8385.                                              do
 8386.                                                 xy(1 + $I_L8385_140) = x * up_lm(1 + $I_L8385_140, 1 + 2 * $I_L8376_180, 1 + $I_L8355_208)
 8387.                                                 $I_L8385_140 = 1 + $I_L8385_140
 8385.                                                 if ( $I_L8385_140 >= n_profile ) exit
 8385.                                              enddo
 8385.                                           endif
 8388.                                        else if ( n_profile > 0 ) then
 8390.                                           $I_L8390_142 = 0
 8390. !dir$ ivdep
 8390.                                           do
 8391.                                              xy(1 + $I_L8390_142) = xy(1 + $I_L8390_142) + x * up_lm(1 + $I_L8390_142, 1 + 2 * $I_L8376_180, 1 + $I_L8355_208)
 8392.                                              $I_L8390_142 = 1 + $I_L8390_142
 8390.                                              if ( $I_L8390_142 >= n_profile ) exit
 8390.                                           enddo
 8390.                                        endif
 8394.                                        $I_L8376_180 = 1 + $I_L8376_180
 8393.                                        if ( $I_L8376_180 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 8393.                                     enddo
 8393.                                  endif
 8395.                                  if ( $I_L8373_213 + 8 * $SI_L8373_200_G5 == 0 ) then
 8397.                                     if ( n_profile > 0 ) then
 8397.                                        $I_L8397_144 = 0
 8397. !dir$ ivdep
 8397.                                        do
 8398.                                           ryx(1 + $I_L8397_144, $I_L8374_210 + 16 * $SI_L8374_194_G8 + 1) = rho_alb(1 + $I_L8397_144, 1) * xy(1 + $I_L8397_144)
 8399.                                           $I_L8397_144 = 1 + $I_L8397_144
 8397.                                           if ( $I_L8397_144 >= n_profile ) exit
 8397.                                        enddo
 8397.                                     endif
 8400.                                  else if ( n_profile > 0 ) then
 8402.                                     $I_L8402_146 = 0
 8402. !dir$ ivdep
 8402.                                     do
 8403.                                        ryx(1 + $I_L8402_146, $I_L8374_210 + 16 * $SI_L8374_194_G8 + 1) = ryx(1 + $I_L8402_146, $I_L8374_210 + 16 * $SI_L8374_194_G8 + 1) + rho_alb(1 + $I_L8402_146, $I_L8373_213 + 8 * $SI_L8373_200_G5 + 1) * xy(1 + $I_L8402_146)
 8404.                                        $I_L8402_146 = 1 + $I_L8402_146
 8402.                                        if ( $I_L8402_146 >= n_profile ) exit
 8402.                                     enddo
 8402.                                  endif
 8374.                                  $I_L8374_210 = 1 + $I_L8374_210
 8405.                                  if ( $I_L8374_210 >= min( ls_trunc + -ms + 1, 16 + 16 * $SI_L8374_194_G8 ) + -16 * $SI_L8374_194_G8 ) exit
 8405.                               enddo
 8373.                               $I_L8373_213 = 1 + $I_L8373_213
 8373.                               if ( $I_L8373_213 >= min( n_brdf_basis_fnc, 8 + 8 * $SI_L8373_200_G5 ) + -8 * $SI_L8373_200_G5 ) exit
 8373.                            enddo
 8374.                            $SI_L8374_194_G8 = 1 + $SI_L8374_194_G8
 8406.                            if ( $SI_L8374_194_G8 >= _rsh( ls_trunc + -ms + 16, 4 ) ) exit
 8406.                         enddo
 8373.                         $SI_L8373_200_G5 = 1 + $SI_L8373_200_G5
 8373.                         if ( $SI_L8373_200_G5 >= _rsh( 7 + n_brdf_basis_fnc, 3 ) ) exit
 8373.                      enddo
 8373.                   endif
 8373.                endif
 8409.                if ( n_red_eigensystem > 0 ) then
 8409.                   $I_L8409_196 = 0
 8409.                   do
 8410.                      if ( n_profile > 0 ) then
 8410.                         $I_L8410_148 = 0
 8410. !dir$ ivdep
 8410.                         do
 8411.                            $x_S13 = euler_factor * ryx(1 + $I_L8410_148, ls_trunc + -ms + 1) * eig_vec(1 + $I_L8410_148, ls_trunc + -ms + 1, 1 + $I_L8409_196)
 8413.                            rvyx_m(1 + $I_L8410_148, 1 + $I_L8409_196) = $x_S13
 8414.                            rvyx_p(1 + $I_L8410_148, 1 + $I_L8409_196) = $x_S13
 8415.                            $I_L8410_148 = 1 + $I_L8410_148
 8410.                            if ( $I_L8410_148 >= n_profile ) exit
 8410.                         enddo
 8410.                      endif
 8427.                      $I_L8409_196 = 1 + $I_L8409_196
 8426.                      if ( $I_L8409_196 >= n_red_eigensystem ) exit
 8426.                   enddo
 8409.                   $I_L8409_196 = 0
 8409.                   do
 8416.                      if ( ms + -ls_trunc < 0 ) then
 8417.                         if ( n_profile > 0 ) then
 8416.                            $I_L8416_182 = 0
 8416. !dir$ blocking_size( 0, 0 )
 8416.                            do
 8417.                               $I_L8417_150 = 0
 8417. !dir$ ivdep
 8417. !dir$ blocking_size( 0, 0 )
 8417.                               do
 8418.                                  $x_S16 = ryx(1 + $I_L8417_150, ls_trunc + -ms + -$I_L8416_182) * eig_vec(1 + $I_L8417_150, ls_trunc + -ms + -$I_L8416_182, 1 + $I_L8409_196)
 8419.                                  rvyx_m(1 + $I_L8417_150, 1 + $I_L8409_196) = rvyx_m(1 + $I_L8417_150, 1 + $I_L8409_196) + $x_S16 * real( 1 + -2 * mod( ( ls_trunc + -ms + -$I_L8416_182 + -1 ), 2 ), 8 )
 8421.                                  rvyx_p(1 + $I_L8417_150, 1 + $I_L8409_196) = rvyx_p(1 + $I_L8417_150, 1 + $I_L8409_196) + $x_S16
 8422.                                  $I_L8417_150 = 1 + $I_L8417_150
 8417.                                  if ( $I_L8417_150 >= n_profile ) exit
 8417.                               enddo
 8423.                               $I_L8416_182 = 1 + $I_L8416_182
 8422.                               if ( $I_L8416_182 >= ( ls_trunc + -ms ) ) exit
 8422.                            enddo
 8422.                         endif
 8422.                      endif
 8427.                      $I_L8409_196 = 1 + $I_L8409_196
 8426.                      if ( $I_L8409_196 >= n_red_eigensystem ) exit
 8426.                   enddo
 8409.                   $I_L8409_196 = 0
 8409.                   do
 8424.                      if ( n_profile > 0 ) then
 8424.                         $I_L8424_152 = 0
 8424. !dir$ ivdep
 8424. !dir$ loop_info (automatic) cache_nt( theta, rvyx_m )
 8424.                         do
 8425.                            rvyx_m(1 + $I_L8424_152, 1 + $I_L8409_196) = rvyx_m(1 + $I_L8424_152, 1 + $I_L8409_196) * theta(1 + $I_L8424_152, 1 + $I_L8409_196)
 8426.                            $I_L8424_152 = 1 + $I_L8424_152
 8424.                            if ( $I_L8424_152 >= n_profile ) exit
 8424.                         enddo
 8424.                      endif
 8427.                      $I_L8409_196 = 1 + $I_L8409_196
 8426.                      if ( $I_L8409_196 >= n_red_eigensystem ) exit
 8426.                   enddo
 8426.                endif
 8429.                if ( n_profile > 0 ) then
 8429.                   $I_L8429_154 = 0
 8429. !dir$ ivdep
 8429.                   do
 8430.                      rsyx(1 + $I_L8429_154) = euler_factor * ryx(1 + $I_L8429_154, ls_trunc + -ms + 1) * source_base(1 + $I_L8429_154, ls_trunc + -ms + 1)
 8432.                      $I_L8429_154 = 1 + $I_L8429_154
 8429.                      if ( $I_L8429_154 >= n_profile ) exit
 8429.                   enddo
 8429.                endif
 8433.                if ( ms + -ls_trunc < 0 ) then
 8434.                   if ( n_profile > 0 ) then
 8433.                      $I_L8433_184 = 0
 8433. !dir$ blocking_size( 0, 0 )
 8433.                      do
 8434.                         $I_L8434_156 = 0
 8434. !dir$ ivdep
 8434. !dir$ blocking_size( 0, 0 )
 8434.                         do
 8435.                            rsyx(1 + $I_L8434_156) = rsyx(1 + $I_L8434_156) + ryx(1 + $I_L8434_156, ls_trunc + -ms + -$I_L8433_184) * source_base(1 + $I_L8434_156, ls_trunc + -ms + -$I_L8433_184)
 8436.                            $I_L8434_156 = 1 + $I_L8434_156
 8434.                            if ( $I_L8434_156 >= n_profile ) exit
 8434.                         enddo
 8437.                         $I_L8433_184 = 1 + $I_L8433_184
 8436.                         if ( $I_L8433_184 >= ( ls_trunc + -ms ) ) exit
 8436.                      enddo
 8436.                   endif
 8436.                endif
 8436.             endif
 8442.             if ( n_viewing_level > 0 ) then
 8442.                $I_L8442_206 = 0
 8442. !dir$ loop_info (automatic) cache_nt( frac_rad_layer )
 8442.                do
 8447.                   if ( $n_list_up_S2 > 0 ) then
 8447.                      $SCA_i_rad_layer_I0 = i_rad_layer(1 + $I_L8442_206)
 8447.                      $SCA_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L8442_206)
 8447.                      $I_L8447_204 = 0
 8447. !dir$ ivdep
 8447.                      do
 8448.                         $l_S22 = list_up(1 + $I_L8447_204)
 8449.                         trans($l_S22) = ( 1.0 + -$SCA_frac_rad_layer_I1 ) * tau($l_S22, $SCA_i_rad_layer_I0)
 8452.                         $I_L8447_204 = 1 + $I_L8447_204
 8447.                         if ( $I_L8447_204 >= $n_list_up_S2 ) exit
 8447.                      enddo
 8447.                   endif
 8453.                   $t_S24 = 1 + i_rad_layer(1 + $I_L8442_206)
 8453.                   if ( n_layer + -$t_S24 >= 0 ) then
 8454.                      if ( $n_list_up_S2 > 0 ) then
 8453.                         $I_L8453_186 = 0
 8453.                         do
 8454.                            $I_L8454_160 = 0
 8454. !dir$ ivdep
 8454.                            do
 8455.                               $l_S26 = list_up(1 + $I_L8454_160)
 8456.                               trans($l_S26) = _vu_plus( trans($l_S26), tau($l_S26, $t_S24 + $I_L8453_186) )
 8457.                               $I_L8454_160 = 1 + $I_L8454_160
 8454.                               if ( $I_L8454_160 >= $n_list_up_S2 ) exit
 8454.                            enddo
 8458.                            $I_L8453_186 = 1 + $I_L8453_186
 8457.                            if ( $I_L8453_186 >= n_layer + -$t_S24 + 1 ) exit
 8457.                         enddo
 8457.                      endif
 8457.                   endif
 8459.                   if ( $n_list_up_S2 > 0 ) then
 8459.                      $I_L8459_162 = 0
 8459.                      do
 8460.                         $l_S29 = list_up(1 + $I_L8459_162)
 8461.                         trans($l_S29) = _expn( -( trans($l_S29) * 1.0/mu_v($l_S29, 1 + $I_L8355_208) ) )
 8463.                         $I_L8459_162 = 1 + $I_L8459_162
 8459.                         if ( $I_L8459_162 >= $n_list_up_S2 ) exit
 8459.                      enddo
 8459.                   endif
 8466.                   if ( ms <= ls_brdf_trunc + -mod( ms, 2 ) ) then
 8468.                      if ( $n_list_up_S2 > 0 ) then
 8468.                         $I_L8468_164 = 0
 8468. !dir$ ivdep
 8468.                         do
 8469.                            $l_S31 = list_up(1 + $I_L8468_164)
 8472.                            radiance($l_S31, 1 + $I_L8442_206, 1 + $I_L8355_208) = _vu_plus( radiance($l_S31, 1 + $I_L8442_206, 1 + $I_L8355_208), trans($l_S31) * rsyx($l_S31) * azim_factor($l_S31, 1 + $I_L8355_208) )
 8474.                            $I_L8468_164 = 1 + $I_L8468_164
 8468.                            if ( $I_L8468_164 >= $n_list_up_S2 ) exit
 8468.                         enddo
 8468.                      endif
 8477.                      if ( n_red_eigensystem > 0 ) then
 8478.                         if ( $n_list_up_S2 > 0 ) then
 8477.                            $I_L8477_188 = 0
 8477. !dir$ blocking_size( 0, 0 )
 8477.                            do
 8478.                               $I_L8478_166 = 0
 8478. !dir$ ivdep
 8478. !dir$ blocking_size( 0, 0 )
 8478.                               do
 8479.                                  $l_S33 = list_up(1 + $I_L8478_166)
 8480.                                  weight_u($l_S33, 1 + $I_L8442_206, 1 + $I_L8355_208, 1 + $I_L8477_188) = _vu_plus( weight_u($l_S33, 1 + $I_L8442_206, 1 + $I_L8355_208, 1 + $I_L8477_188), trans($l_S33) * rvyx_m($l_S33, 1 + $I_L8477_188) )
 8482.                                  weight_u($l_S33, 1 + $I_L8442_206, 1 + $I_L8355_208, n_red_eigensystem + $I_L8477_188 + 1) = _vu_plus( weight_u($l_S33, 1 + $I_L8442_206, 1 + $I_L8355_208, n_red_eigensystem + $I_L8477_188 + 1), trans($l_S33) * rvyx_p($l_S33, 1 + $I_L8477_188) )
 8485.                                  $I_L8478_166 = 1 + $I_L8478_166
 8478.                                  if ( $I_L8478_166 >= $n_list_up_S2 ) exit
 8478.                               enddo
 8486.                               $I_L8477_188 = 1 + $I_L8477_188
 8485.                               if ( $I_L8477_188 >= n_red_eigensystem ) exit
 8485.                            enddo
 8485.                         endif
 8485.                      endif
 8485.                   endif
 8495.                   if ( ms == 0 ) then
 8496.                      if ( isolir == 1 ) then
 8497.                         if ( $n_list_up_S2 > 0 ) then
 8497.                            $I_L8497_168 = 0
 8497. !dir$ ivdep
 8497.                            do
 8498.                               $l_S36 = list_up(1 + $I_L8497_168)
 8499.                               brdf_full($l_S36) = rho_alb($l_S36, 1) * brdf_sol($l_S36, 1, 1 + $I_L8355_208)
 8500.                               $I_L8497_168 = 1 + $I_L8497_168
 8497.                               if ( $I_L8497_168 >= $n_list_up_S2 ) exit
 8497.                            enddo
 8497.                         endif
 8501.                         if ( -2 + n_brdf_basis_fnc >= 0 ) then
 8502.                            if ( $n_list_up_S2 > 0 ) then
 8501.                               $I_L8501_192 = 0
 8501.                               do
 8502.                                  $I_L8502_176 = 0
 8502. !dir$ ivdep
 8502.                                  do
 8503.                                     $l_S38 = list_up(1 + $I_L8502_176)
 8504.                                     brdf_full($l_S38) = _vu_plus( brdf_full($l_S38), rho_alb($l_S38, 2 + $I_L8501_192) * brdf_sol($l_S38, 2 + $I_L8501_192, 1 + $I_L8355_208) )
 8506.                                     $I_L8502_176 = 1 + $I_L8502_176
 8502.                                     if ( $I_L8502_176 >= $n_list_up_S2 ) exit
 8502.                                  enddo
 8507.                                  $I_L8501_192 = 1 + $I_L8501_192
 8506.                                  if ( $I_L8501_192 >= -1 + n_brdf_basis_fnc ) exit
 8506.                               enddo
 8506.                            endif
 8506.                         endif
 8508.                         if ( $n_list_up_S2 > 0 ) then
 8508.                            $I_L8508_178 = 0
 8508. !dir$ ivdep
 8508.                            do
 8509.                               $l_S41 = list_up(1 + $I_L8508_178)
 8510.                               radiance($l_S41, 1 + $I_L8442_206, 1 + $I_L8355_208) = _vu_plus( radiance($l_S41, 1 + $I_L8442_206, 1 + $I_L8355_208), trans($l_S41) * i_direct_surf($l_S41) * mu_0($l_S41) * brdf_full($l_S41) )
 8513.                               $I_L8508_178 = 1 + $I_L8508_178
 8508.                               if ( $I_L8508_178 >= $n_list_up_S2 ) exit
 8508.                            enddo
 8508.                         endif
 8514.                      else if ( isolir == 2 ) then
 8515.                         if ( $n_list_up_S2 > 0 ) then
 8515.                            $I_L8515_170 = 0
 8515. !dir$ ivdep
 8515.                            do
 8516.                               $l_S43 = list_up(1 + $I_L8515_170)
 8517.                               brdf_full($l_S43) = rho_alb($l_S43, 1) * brdf_hemi($l_S43, 1, 1 + $I_L8355_208)
 8518.                               $I_L8515_170 = 1 + $I_L8515_170
 8515.                               if ( $I_L8515_170 >= $n_list_up_S2 ) exit
 8515.                            enddo
 8515.                         endif
 8519.                         if ( -2 + n_brdf_basis_fnc >= 0 ) then
 8520.                            if ( $n_list_up_S2 > 0 ) then
 8519.                               $I_L8519_190 = 0
 8519.                               do
 8520.                                  $I_L8520_172 = 0
 8520. !dir$ ivdep
 8520.                                  do
 8521.                                     $l_S45 = list_up(1 + $I_L8520_172)
 8522.                                     brdf_full($l_S45) = _vu_plus( brdf_full($l_S45), rho_alb($l_S45, 2 + $I_L8519_190) * brdf_hemi($l_S45, 2 + $I_L8519_190, 1 + $I_L8355_208) )
 8524.                                     $I_L8520_172 = 1 + $I_L8520_172
 8520.                                     if ( $I_L8520_172 >= $n_list_up_S2 ) exit
 8520.                                  enddo
 8525.                                  $I_L8519_190 = 1 + $I_L8519_190
 8524.                                  if ( $I_L8519_190 >= -1 + n_brdf_basis_fnc ) exit
 8524.                               enddo
 8524.                            endif
 8524.                         endif
 8526.                         if ( $n_list_up_S2 > 0 ) then
 8526.                            $I_L8526_174 = 0
 8526. !dir$ ivdep
 8526.                            do
 8527.                               $l_S48 = list_up(1 + $I_L8526_174)
 8528.                               radiance($l_S48, 1 + $I_L8442_206, 1 + $I_L8355_208) = _vu_plus( radiance($l_S48, 1 + $I_L8442_206, 1 + $I_L8355_208), trans($l_S48) * ( 1.0 + -brdf_full($l_S48) ) * d_planck_flux_surface($l_S48) * 3.1830988618379069e-1 )
 8532.                               $I_L8526_174 = 1 + $I_L8526_174
 8526.                               if ( $I_L8526_174 >= $n_list_up_S2 ) exit
 8526.                            enddo
 8526.                         endif
 8526.                      endif
 8526.                   endif
 8536.                   $I_L8442_206 = 1 + $I_L8442_206
 8534.                   if ( $I_L8442_206 >= n_viewing_level ) exit
 8534.                enddo
 8534.             endif
 8537.             $I_L8355_208 = 1 + $I_L8355_208
 8536.             if ( $I_L8355_208 >= n_direction ) exit
 8536.          enddo
 8536.       endif
 8138.       _free( t$2094 )
 8542.       return
 8542.       end
 8542.       
 8694.       
 8694.       subroutine calc_top_rad( n_profile, tau, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, mu_v, flux_inc_down, radiance, nd_profile, nd_layer, nd_direction, nd_viewing_level )
 8567.       t$284 = nd_profile
 8567.       t$285 = nd_layer
 8604.       t$2119 = _zla( 0, nd_profile )
 8567.       t$2120 = _zla( 0, nd_profile )
 8604.       t$2121 = _zla( 0, nd_layer )
 8567.       t$2122 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 8567.       t$286 = nd_viewing_level
 8613.       t$2123 = _zla( 0, nd_viewing_level )
 8567.       t$287 = nd_direction
 8619.       t$2124 = _zla( 0, nd_direction )
 8567.       t$2125 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
 8567.       t$2126 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
 8567.       t$2127 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_direction )
 8645.       t$2130 = 4 * _zla( 0, nd_profile )
 8567.       t$2131 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
 8648.       t$2132 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
 8648.       t$2134 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * 8
 8567.       t$2128 = int( _alloc( 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * 8 ), 8 )
 8645.       t$2129 = t$2128
 8648.       t$2133 = t$2128 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
 8655.       if ( n_viewing_level > 0 ) then
 8655.          $I_L8655_50 = 0
 8655.          do
 8657.             if ( n_profile > 0 ) then
 8657.                $SCA_i_rad_layer_I0 = i_rad_layer(1 + $I_L8655_50)
 8657.                $SCA_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L8655_50)
 8657.                $I_L8657_48 = 0
 8657. !dir$ ivdep
 8657.                do
 8658.                   tau_c(1 + $I_L8657_48, 1 + $I_L8655_50) = $SCA_frac_rad_layer_I1 * tau(1 + $I_L8657_48, $SCA_i_rad_layer_I0)
 8660.                   $I_L8657_48 = 1 + $I_L8657_48
 8657.                   if ( $I_L8657_48 >= n_profile ) exit
 8657.                enddo
 8657.             endif
 8661.             $t_S2 = -1 + i_rad_layer(1 + $I_L8655_50)
 8661.             if ( -1 + i_rad_layer(1 + $I_L8655_50) > 0 ) then
 8662.                if ( n_profile > 0 ) then
 8661.                   $I_L8661_40 = 0
 8661. !dir$ blocking_size( 0, 0 )
 8661.                   do
 8662.                      $I_L8662_34 = 0
 8662. !dir$ ivdep
 8662. !dir$ blocking_size( 0, 0 )
 8662.                      do
 8663.                         tau_c(1 + $I_L8662_34, 1 + $I_L8655_50) = tau_c(1 + $I_L8662_34, 1 + $I_L8655_50) + tau(1 + $I_L8662_34, $t_S2 + -$I_L8661_40)
 8664.                         $I_L8662_34 = 1 + $I_L8662_34
 8662.                         if ( $I_L8662_34 >= n_profile ) exit
 8662.                      enddo
 8665.                      $I_L8661_40 = 1 + $I_L8661_40
 8664.                      if ( $I_L8661_40 >= $t_S2 ) exit
 8664.                   enddo
 8664.                endif
 8664.             endif
 8667.             $I_L8655_50 = 1 + $I_L8655_50
 8665.             if ( $I_L8655_50 >= n_viewing_level ) exit
 8665.          enddo
 8665.       endif
 8670.       if ( n_direction > 0 ) then
 8670.          $I_L8670_46 = 0
 8670.          do
 8673.             $n_list_down_S7 = 0
 8674.             if ( n_profile > 0 ) then
 8674.                $I_L8674_36 = 0
 8674. !dir$ ivdep
 8674.                do
 8675.                   if ( mu_v(1 + $I_L8674_36, 1 + $I_L8670_46) < 0.0 ) then
 8676.                      $n_list_down_S7 = 1 + $n_list_down_S7
 8677.                      list_down($n_list_down_S7) = ( 1 + $I_L8674_36 )
 8677.                   endif
 8679.                   $I_L8674_36 = 1 + $I_L8674_36
 8678.                   if ( $I_L8674_36 >= n_profile ) exit
 8678.                enddo
 8678.             endif
 8681.             if ( n_viewing_level > 0 ) then
 8682.                if ( $n_list_down_S7 > 0 ) then
 8681.                   $I_L8681_42 = 0
 8681. !dir$ blocking_size( 0, 0 )
 8681.                   do
 8682.                      $I_L8682_38 = 0
 8682. !dir$ ivdep
 8682. !dir$ blocking_size( 0, 0 )
 8682.                      do
 8683.                         $l_S9 = list_down(1 + $I_L8682_38)
 8684.                         radiance($l_S9, 1 + $I_L8681_42, 1 + $I_L8670_46) = _vu_plus( radiance($l_S9, 1 + $I_L8681_42, 1 + $I_L8670_46), ( 3.1830988618379069e-1 * flux_inc_down($l_S9) ) * _expn( ( tau_c($l_S9, 1 + $I_L8681_42) * 1.0/mu_v($l_S9, 1 + $I_L8670_46) ) ) )
 8686.                         $I_L8682_38 = 1 + $I_L8682_38
 8682.                         if ( $I_L8682_38 >= $n_list_down_S7 ) exit
 8682.                      enddo
 8687.                      $I_L8681_42 = 1 + $I_L8681_42
 8686.                      if ( $I_L8681_42 >= n_viewing_level ) exit
 8686.                   enddo
 8686.                endif
 8686.             endif
 8689.             $I_L8670_46 = 1 + $I_L8670_46
 8687.             if ( $I_L8670_46 >= n_direction ) exit
 8687.          enddo
 8687.       endif
 8567.       _free( t$2128 )
 8694.       return
 8694.       end
 8694.       
 8810.       
 8810.       subroutine calculate_density( n_profile, n_layer, l_continuum, water_frac, p, t, i_top, density, molar_density_water, molar_density_frn, nd_profile, nd_layer )
 8715.       t$291 = nd_profile
 8715.       t$292 = nd_layer
 8758.       t$2135 = _zla( 0, nd_profile )
 8715.       t$2136 = _zla( 0, nd_profile )
 8758.       t$2137 = _zla( 0, nd_layer )
 8715.       t$2138 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 8782.       if ( nd_layer > 0 ) then
 8783.          if ( nd_profile > 0 ) then
 8782.             $I_L8782_20 = 0
 8782.             do
 8783.                $I_L8783_16 = 0
 8783. !dir$ ivdep
 8783.                do
 8784.                   density(1 + $I_L8783_16, 1 + $I_L8782_20) = ( 1.0/( ( 1.0 + 6.0785554500896466e-1 * water_frac(1 + $I_L8783_16, 1 + $I_L8782_20) ) * t(1 + $I_L8783_16, 1 + $I_L8782_20) ) * p(1 + $I_L8783_16, 1 + $I_L8782_20) * 3.4840049333509857e-3 )
 8787.                   $I_L8783_16 = 1 + $I_L8783_16
 8783.                   if ( $I_L8783_16 >= nd_profile ) exit
 8783.                enddo
 8788.                $I_L8782_20 = 1 + $I_L8782_20
 8787.                if ( $I_L8782_20 >= nd_layer ) exit
 8787.             enddo
 8787.          endif
 8787.       endif
 8790.       if ( l_continuum ) then
 8791.          if ( nd_layer > 0 ) then
 8792.             if ( nd_profile > 0 ) then
 8791.                $I_L8791_22 = 0
 8791.                do
 8792.                   $I_L8792_18 = 0
 8792. !dir$ ivdep
 8792.                   do
 8793.                      molar_density_frn(1 + $I_L8792_18, 1 + $I_L8791_22) = density(1 + $I_L8792_18, 1 + $I_L8791_22) * ( 1.0 + -water_frac(1 + $I_L8792_18, 1 + $I_L8791_22) ) * 34.523234136573919
 8796.                      molar_density_water(1 + $I_L8792_18, 1 + $I_L8791_22) = density(1 + $I_L8792_18, 1 + $I_L8791_22) * water_frac(1 + $I_L8792_18, 1 + $I_L8791_22) * 55.508373438133148
 8803.                      $I_L8792_18 = 1 + $I_L8792_18
 8792.                      if ( $I_L8792_18 >= nd_profile ) exit
 8792.                   enddo
 8804.                   $I_L8791_22 = 1 + $I_L8791_22
 8803.                   if ( $I_L8791_22 >= nd_layer ) exit
 8803.                enddo
 8803.             endif
 8803.          endif
 8803.       endif
 8810.       return
 8810.       end
 8810.       
 8954.       
 8954.       subroutine calc_uplm_sol( n_profile, ms_min, ms_max, ia_sph_mm, ls_local_trunc, zen_0, uplm_sol, nd_profile, nd_max_order, nd_sph_coeff )
 8833.       t$295 = nd_max_order
 8833.       t$2139 = 1 + nd_max_order
 8864.       t$2140 = _zla( 0, 1 + nd_max_order )
 8833.       t$296 = nd_profile
 8869.       t$2141 = _zla( 0, nd_profile )
 8833.       t$297 = nd_sph_coeff
 8833.       t$2142 = _zla( 0, nd_profile )
 8872.       t$2143 = _zla( 0, nd_sph_coeff )
 8833.       t$2144 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_coeff )
 8900.       if ( ms_max + -ms_min >= 0 ) then
 8900.          $I_L8900_40 = 0
 8900.          do
 8903.             $j_S3 = ia_sph_mm(ms_min + $I_L8900_40)
 8905.             product = 1.0
 8907.             if ( ( ms_min + $I_L8900_40 ) > 0 ) then
 8908.                $I_L8908_28 = 0
 8908. !dir$ ivdep
 8908.                do
 8909.                   product = ( 1.0 + -( 5.0e-1 * 1.0/( ( 1 + $I_L8908_28 ) ) ) ) * product
 8910.                   $I_L8908_28 = 1 + $I_L8908_28
 8908.                   if ( $I_L8908_28 >= ms_min + $I_L8900_40 ) exit
 8908.                enddo
 8911.                if ( n_profile > 0 ) then
 8911.                   $I_L8911_30 = 0
 8911. !dir$ ivdep
 8911.                   do
 8912.                      uplm_sol(1 + $I_L8911_30, $j_S3) = cvmg( -1.0, 1.0, and( 1, ( ms_min + $I_L8900_40 ) ) /= 0 ) * _sqrt( ( 1.0 + -( zen_0(1 + $I_L8911_30) * zen_0(1 + $I_L8911_30) ) ) ** ( ms_min + $I_L8900_40 ) * product * ( 1.0 + 2.0 * real( ms_min + $I_L8900_40, 8 ) ) * 7.9577471545947673e-2 )
 8915.                      $I_L8911_30 = 1 + $I_L8911_30
 8911.                      if ( $I_L8911_30 >= n_profile ) exit
 8911.                   enddo
 8911.                endif
 8916.             else if ( n_profile > 0 ) then
 8917.                $I_L8917_32 = 0
 8917. !dir$ ivdep
 8917.                do
 8918.                   uplm_sol(1 + $I_L8917_32, $j_S3) = 2.8209479177387814e-1
 8919.                   $I_L8917_32 = 1 + $I_L8917_32
 8917.                   if ( $I_L8917_32 >= n_profile ) exit
 8917.                enddo
 8917.             endif
 8924.             if ( ( ms_min + $I_L8900_40 ) <= 1 + ls_local_trunc(ms_min + $I_L8900_40) ) then
 8925.                if ( n_profile > 0 ) then
 8925.                   $I_L8925_34 = 0
 8925. !dir$ ivdep
 8925.                   do
 8926.                      uplm_sol(1 + $I_L8925_34, 1 + $j_S3) = -( zen_0(1 + $I_L8925_34) * _sqrt( 3.0 + 2.0 * real( ms_min + $I_L8900_40, 8 ) ) * uplm_sol(1 + $I_L8925_34, $j_S3) )
 8929.                      $I_L8925_34 = 1 + $I_L8925_34
 8925.                      if ( $I_L8925_34 >= n_profile ) exit
 8925.                   enddo
 8925.                endif
 8925.             endif
 8933.             $t_S6 = 1 + ls_local_trunc(ms_min + $I_L8900_40)
 8933.             if ( ( $t_S6 + -ms_min + -$I_L8900_40 + -2 ) >= 0 ) then
 8936.                if ( n_profile > 0 ) then
 8933.                   $I_L8933_38 = 0
 8933.                   do
 8936.                      $I_L8936_36 = 0
 8936. !dir$ ivdep
 8936.                      do
 8937.                         uplm_sol(1 + $I_L8936_36, $j_S3 + $I_L8933_38 + 2) = _sqrt( ( ( -1.0 + 2.0 * real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) ) * ( 1.0 + 2.0 * real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) ) ) * 1.0/( ( real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) + real( ms_min + $I_L8900_40, 8 ) ) * ( real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) + -( real( ms_min + $I_L8900_40, 8 ) ) ) ) ) * ( -zen_0(1 + $I_L8936_36) ) * uplm_sol(1 + $I_L8936_36, $j_S3 + $I_L8933_38 + 1) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) ) * ( -( real( ms_min + $I_L8900_40, 8 ) ) + real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) + -1.0 ) * ( real( ms_min + $I_L8900_40, 8 ) + real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) ) * ( real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) + -( real( ms_min + $I_L8900_40, 8 ) ) ) * ( real( ms_min + $I_L8933_38 + $I_L8900_40 + 2, 8 ) + real( ms_min + $I_L8900_40, 8 ) ) ) ) * uplm_sol(1 + $I_L8936_36, $j_S3 + $I_L8933_38) )
 8946.                         $I_L8936_36 = 1 + $I_L8936_36
 8936.                         if ( $I_L8936_36 >= n_profile ) exit
 8936.                      enddo
 8947.                      $I_L8933_38 = 1 + $I_L8933_38
 8946.                      if ( $I_L8933_38 >= $t_S6 + -ms_min + -$I_L8900_40 + -1 ) exit
 8946.                   enddo
 8946.                endif
 8946.             endif
 8949.             $I_L8900_40 = 1 + $I_L8900_40
 8947.             if ( $I_L8900_40 >= ms_max + -ms_min + 1 ) exit
 8947.          enddo
 8947.       endif
 8954.       return
 8954.       end
 8954.       
 9067.       
 9067.       subroutine calc_uplm_zero( ms_min, ms_max, ia_sph_mm, ls_local_trunc, uplm_zero, nd_max_order, nd_sph_coeff )
 8978.       t$300 = nd_max_order
 8978.       t$2145 = 1 + nd_max_order
 9005.       t$2146 = _zla( 0, 1 + nd_max_order )
 8978.       t$301 = nd_sph_coeff
 9010.       t$2147 = _zla( 0, nd_sph_coeff )
 9027.       if ( ms_max + -ms_min >= 0 ) then
 9027.          $I_L9027_36 = 0
 9027.          do
 9030.             $j_S1 = ia_sph_mm(ms_min + $I_L9027_36)
 9031.             uplm_zero($j_S1) = 7.9577471545947673e-2
 9032.             if ( ( 2 * ms_min + 2 * $I_L9027_36 + -2 ) >= 0 ) then
 9032.                $SCA_uplm_zero_I1 = 7.9577471545947673e-2
 9032.                $I_L9032_30 = 0
 9032. !dir$ ivdep
 9032.                do
 9033.                   $SCA_uplm_zero_I1 = ( $SCA_uplm_zero_I1 * real( 3 + 2 * $I_L9032_30, 8 ) * 1.0/( ( 2 + 2 * $I_L9032_30 ) ) )
 9034.                   $I_L9032_30 = 1 + $I_L9032_30
 9032.                   if ( $I_L9032_30 >= ( 2 * ms_min + 2 * $I_L9027_36 ) / 2 ) exit
 9032.                enddo
 9032.                uplm_zero($j_S1) = $SCA_uplm_zero_I1
 9032.             endif
 9035.             uplm_zero($j_S1) = real( 1 + -2 * mod( ( ms_min + $I_L9027_36 ), 2 ), 8 ) * _sqrt( uplm_zero($j_S1) )
 9041.             uplm_zero(1 + $j_S1) = 2.38732414637843e-1
 9042.             if ( ( 2 * ms_min + 2 * $I_L9027_36 + -2 ) >= 0 ) then
 9042.                $SCA_uplm_zero_I0 = 2.38732414637843e-1
 9042.                $I_L9042_32 = 0
 9042. !dir$ ivdep
 9042.                do
 9043.                   $SCA_uplm_zero_I0 = ( $SCA_uplm_zero_I0 * real( 5 + 2 * $I_L9042_32, 8 ) * 1.0/( ( 2 + 2 * $I_L9042_32 ) ) )
 9044.                   $I_L9042_32 = 1 + $I_L9042_32
 9042.                   if ( $I_L9042_32 >= ( 2 * ms_min + 2 * $I_L9027_36 ) / 2 ) exit
 9042.                enddo
 9042.                uplm_zero(1 + $j_S1) = $SCA_uplm_zero_I0
 9042.             endif
 9045.             uplm_zero(1 + $j_S1) = real( 1 + -2 * mod( ( ms_min + $I_L9027_36 ), 2 ), 8 ) * _sqrt( uplm_zero(1 + $j_S1) )
 9048.             $t_S5 = -1 + ls_local_trunc(ms_min + $I_L9027_36)
 9048.             if ( ( $t_S5 + -ms_min + -$I_L9027_36 + -2 ) >= 0 ) then
 9048.                $I_L9048_34 = 0
 9048.                do
 9052.                   uplm_zero($j_S1 + 2 * $I_L9048_34 + 2) = -( uplm_zero($j_S1 + 2 * $I_L9048_34) * _sqrt( real( -( ( ms_min + $I_L9027_36 ) * ( ms_min + $I_L9027_36 ) ) + ms_min * $I_L9048_34 * ms_min * -4 + -2 * ( ms_min * ms_min * 2 + ms_min * ms_min * ms_min + $I_L9027_36 * $I_L9027_36 * 2 + $I_L9027_36 * $I_L9027_36 * $I_L9027_36 + ms_min * $I_L9027_36 * 4 + ms_min * $I_L9027_36 * $I_L9027_36 * 3 + ms_min * $I_L9027_36 * ms_min * 3 ) + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 * -4 + ms_min * $I_L9048_34 * $I_L9027_36 * -8 + 2 * ( ms_min * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9027_36 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9048_34 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) * 2 + 2 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) ) + 4 * ( ms_min * ms_min * $I_L9048_34 + 4 * $I_L9048_34 + $I_L9048_34 * $I_L9048_34 * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9048_34 * 8 + ms_min * $I_L9048_34 * $I_L9048_34 * 4 + ms_min * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 + $I_L9048_34 * $I_L9027_36 * 4 + $I_L9048_34 * $I_L9048_34 * $I_L9027_36 * 4 + ms_min * $I_L9048_34 * $I_L9027_36 * 2 ) + ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * -3 + 1, 8 ) * 1.0/( real( ms_min * $I_L9048_34 * ms_min * -4 + ( ms_min + $I_L9027_36 ) * ( ms_min + $I_L9027_36 ) * 3 + -2 * ( ms_min * ms_min * 2 + ms_min * ms_min * ms_min + $I_L9027_36 * $I_L9027_36 * 2 + $I_L9027_36 * $I_L9027_36 * $I_L9027_36 + ms_min * $I_L9027_36 * 4 + ms_min * $I_L9027_36 * $I_L9027_36 * 3 + ms_min * $I_L9027_36 * ms_min * 3 ) + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 * -4 + ms_min * $I_L9048_34 * $I_L9027_36 * -8 + 2 * ( ms_min * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9027_36 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9048_34 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) * 2 + 2 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) ) + 4 * ( ms_min * ms_min * $I_L9048_34 + 4 * $I_L9048_34 + $I_L9048_34 * $I_L9048_34 * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9048_34 * 8 + ms_min * $I_L9048_34 * $I_L9048_34 * 4 + ms_min * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 + $I_L9048_34 * $I_L9027_36 * 4 + $I_L9048_34 * $I_L9048_34 * $I_L9027_36 * 4 + ms_min * $I_L9048_34 * $I_L9027_36 * 2 ) + ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * -3, 8 ) ) ) )
 9057.                   uplm_zero($j_S1 + 2 * $I_L9048_34 + 3) = -( uplm_zero($j_S1 + 2 * $I_L9048_34 + 1) * _sqrt( real( 8 * ms_min + ms_min * $I_L9048_34 * ms_min * -4 + 16 * $I_L9048_34 + -2 * ( ms_min * ms_min * 2 + ms_min * ms_min * ms_min + $I_L9027_36 * $I_L9027_36 * 2 + $I_L9027_36 * $I_L9027_36 * $I_L9027_36 + ms_min * $I_L9027_36 * 4 + ms_min * $I_L9027_36 * $I_L9027_36 * 3 + ms_min * $I_L9027_36 * ms_min * 3 ) + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 * -4 + ms_min * $I_L9048_34 * $I_L9027_36 * -8 + 2 * ( ms_min * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9027_36 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9048_34 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) * 2 + 2 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) ) + 4 * ( ms_min * ms_min * $I_L9048_34 + 4 * $I_L9048_34 + $I_L9048_34 * $I_L9048_34 * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9048_34 * 8 + ms_min * $I_L9048_34 * $I_L9048_34 * 4 + ms_min * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 + $I_L9048_34 * $I_L9027_36 * 4 + $I_L9048_34 * $I_L9048_34 * $I_L9027_36 * 4 + ms_min * $I_L9048_34 * $I_L9027_36 * 2 ) + 8 * $I_L9027_36 + ( ms_min + $I_L9027_36 ) * ( ms_min + $I_L9027_36 ) * -3 + ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * 7 + 19, 8 ) * 1.0/( real( -( ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) * ( ms_min + $I_L9027_36 + 2 * $I_L9048_34 + 2 ) ) + ms_min * $I_L9048_34 * ms_min * -4 + ( ms_min + $I_L9027_36 ) * ( ms_min + $I_L9027_36 ) + -2 * ( ms_min * ms_min * 2 + ms_min * ms_min * ms_min + $I_L9027_36 * $I_L9027_36 * 2 + $I_L9027_36 * $I_L9027_36 * $I_L9027_36 + ms_min * $I_L9027_36 * 4 + ms_min * $I_L9027_36 * $I_L9027_36 * 3 + ms_min * $I_L9027_36 * ms_min * 3 ) + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 * -4 + ms_min * $I_L9048_34 * $I_L9027_36 * -8 + 2 * ( ms_min * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9027_36 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) + $I_L9048_34 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) * 2 + 2 * ( ms_min * ms_min + 4 * ms_min + 4 * $I_L9048_34 + ms_min * $I_L9048_34 * 2 + $I_L9027_36 * $I_L9027_36 + 4 * $I_L9027_36 + ms_min * $I_L9027_36 * 2 + $I_L9048_34 * $I_L9027_36 * 2 + 4 ) ) + 4 * ( ms_min * ms_min * $I_L9048_34 + 4 * $I_L9048_34 + $I_L9048_34 * $I_L9048_34 * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9048_34 * 8 + ms_min * $I_L9048_34 * $I_L9048_34 * 4 + ms_min * $I_L9048_34 * 4 + $I_L9048_34 * $I_L9027_36 * $I_L9027_36 + $I_L9048_34 * $I_L9027_36 * 4 + $I_L9048_34 * $I_L9048_34 * $I_L9027_36 * 4 + ms_min * $I_L9048_34 * $I_L9027_36 * 2 ), 8 ) ) ) )
 9061.                   $I_L9048_34 = 1 + $I_L9048_34
 9048.                   if ( $I_L9048_34 >= ( $t_S5 + -ms_min + -$I_L9027_36 ) / 2 ) exit
 9048.                enddo
 9048.             endif
 9062.             $I_L9027_36 = 1 + $I_L9027_36
 9061.             if ( $I_L9027_36 >= ms_max + -ms_min + 1 ) exit
 9061.          enddo
 9061.       endif
 9067.       return
 9067.       end
 9067.       
 9185.       
 9185.       subroutine cg_kappa_ms( ms, ls_trunc, ls_brdf_trunc, cg_coeff, kappa, cgk, nd_max_order, nd_brdf_trunc )
 9099.       t$303 = ( ls_trunc + -ms + 1 )
 9131.       t$2148 = _zla( 0, ( ls_trunc + -ms + 1 ) )
 9099.       t$304 = nd_max_order / 2
 9133.       t$2149 = _zla( 0, nd_max_order / 2 )
 9099.       t$2150 = _zla( 0, nd_max_order / 2 )
 9099.       t$2151 = _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 )
 9099.       t$305 = ( 1 + nd_brdf_trunc / 2 )
 9099.       t$306 = nd_max_order
 9138.       t$2152 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 9099.       t$2153 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
 9138.       t$2154 = _zla( 0, nd_max_order )
 9099.       t$2155 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) * _zla( 0, nd_max_order )
 9155.       if ( ls_trunc + -ms >= 0 ) then
 9156.          $SC_cg_coeff_I0 = cg_coeff(1)
 9157.          if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + -2 >= 0 ) then
 9155.             $I_L9155_64 = 0
 9155. !dir$ ivdep
 9155.             do
 9156.                cgk(1, 1 + 2 * $I_L9155_64) = $SC_cg_coeff_I0 * kappa(1, 1 + $I_L9155_64)
 9162.                $I_L9155_64 = 1 + $I_L9155_64
 9161.                if ( $I_L9155_64 >= ( ls_trunc + -ms + 2 ) / 2 ) exit
 9161.             enddo
 9157.             $I_L9157_73 = 0
 9157.             do
 9155.                $I_L9155_71 = 0
 9155.                if ( ( ls_trunc + -ms + 2 ) / 2 >= 4 ) then
 9155.                   $I_L9155_78 = 0
 9155. !dir$ blocking_size( 0, 0 )
 9155.                   do
 9157.                      $I_L9157_66 = 0
 9157. !dir$ ivdep
 9157. !dir$ blocking_size( 256, 256 )
 9157.                      do
 9158.                         cgk($I_L9157_66 + 256 * $I_L9157_73 + 2, 1 + 8 * $I_L9155_78) = cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 3) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 2, 1 + 4 * $I_L9155_78) + cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 2) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 1, 1 + 4 * $I_L9155_78)
 9158.                         cgk($I_L9157_66 + 256 * $I_L9157_73 + 2, 3 + 8 * $I_L9155_78) = cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 3) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 2, 2 + 4 * $I_L9155_78) + cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 2) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 1, 2 + 4 * $I_L9155_78)
 9158.                         cgk($I_L9157_66 + 256 * $I_L9157_73 + 2, 5 + 8 * $I_L9155_78) = cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 3) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 2, 3 + 4 * $I_L9155_78) + cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 2) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 1, 3 + 4 * $I_L9155_78)
 9158.                         cgk($I_L9157_66 + 256 * $I_L9157_73 + 2, 7 + 8 * $I_L9155_78) = cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 3) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 2, 4 + 4 * $I_L9155_78) + cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 2) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 1, 4 + 4 * $I_L9155_78)
 9157.                         $I_L9157_66 = 1 + $I_L9157_66
 9157.                         if ( $I_L9157_66 >= min( ( ls_brdf_trunc + -ms + -mod( ms, 2 ) ) / 2, 256 + 256 * $I_L9157_73 ) + -256 * $I_L9157_73 ) exit
 9157.                      enddo
 9162.                      $I_L9155_78 = 1 + $I_L9155_78
 9162.                      if ( $I_L9155_78 >= _rsh( ( ls_trunc + -ms + 2 ) / 2, 2 ) ) exit
 9162.                   enddo
 9162.                   $I_L9155_71 = and( 0xfffffffffffffffcUL, ( ls_trunc + -ms + 2 ) / 2 )
 9162.                endif
 9155.                if ( $I_L9155_71 < ( ls_trunc + -ms + 2 ) / 2 ) then
 9155.                   $I_L9155_75 = 0
 9155. !dir$ blocking_size( 0, 0 )
 9155.                   do
 9157.                      $I_L9157_66 = 0
 9157. !dir$ ivdep
 9157. !dir$ blocking_size( 256, 256 )
 9157.                      do
 9158.                         cgk($I_L9157_66 + 256 * $I_L9157_73 + 2, 2 * $I_L9155_71 + 2 * $I_L9155_75 + 1) = cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 3) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 2, $I_L9155_71 + $I_L9155_75 + 1) + cg_coeff(2 * $I_L9157_66 + 512 * $I_L9157_73 + 2) * kappa($I_L9157_66 + 256 * $I_L9157_73 + 1, $I_L9155_71 + $I_L9155_75 + 1)
 9157.                         $I_L9157_66 = 1 + $I_L9157_66
 9157.                         if ( $I_L9157_66 >= min( ( ls_brdf_trunc + -ms + -mod( ms, 2 ) ) / 2, 256 + 256 * $I_L9157_73 ) + -256 * $I_L9157_73 ) exit
 9157.                      enddo
 9162.                      $I_L9155_75 = 1 + $I_L9155_75
 9162.                      if ( $I_L9155_75 >= ( ls_trunc + -ms + 2 ) / 2 + -$I_L9155_71 ) exit
 9162.                   enddo
 9162.                endif
 9157.                $I_L9157_73 = 1 + $I_L9157_73
 9161.                if ( $I_L9157_73 >= 1 + max( 0, -1 + _rsh( 255 + ( ls_brdf_trunc + -ms + -mod( ms, 2 ) ) / 2, 8 ) ) ) exit
 9161.             enddo
 9161.          else
 9155.             $I_L9155_62 = 0
 9155. !dir$ ivdep
 9155.             do
 9156.                cgk(1, 1 + 2 * $I_L9155_62) = $SC_cg_coeff_I0 * kappa(1, 1 + $I_L9155_62)
 9162.                $I_L9155_62 = 1 + $I_L9155_62
 9161.                if ( $I_L9155_62 >= ( ls_trunc + -ms + 2 ) / 2 ) exit
 9161.             enddo
 9161.          endif
 9161.       endif
 9168.       if ( ls_trunc + -ms > 0 ) then
 9169.          if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) >= 0 ) then
 9168.             $I_L9168_69 = 0
 9168.             do
 9169.                $I_L9169_56 = 0
 9169. !dir$ ivdep
 9169.                do
 9170.                   cgk(1 + $I_L9169_56, 2 + 2 * $I_L9168_69) = 0.0
 9171.                   $I_L9169_56 = 1 + $I_L9169_56
 9169.                   if ( $I_L9169_56 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 9169.                enddo
 9172.                $I_L9168_69 = 1 + $I_L9168_69
 9171.                if ( $I_L9168_69 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
 9171.             enddo
 9171.          endif
 9171.       endif
 9174.       if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) >= 0 ) then
 9174.          $I_L9174_58 = 0
 9174. !dir$ ivdep
 9174.          do
 9175.             cgk(1 + $I_L9174_58, 2 + 2 * $I_L9174_58) = 5.0e-1 * cg_coeff(1 + 2 * $I_L9174_58)
 9176.             $I_L9174_58 = 1 + $I_L9174_58
 9174.             if ( $I_L9174_58 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + 2 ) / 2 ) exit
 9174.          enddo
 9174.       endif
 9178.       if ( ls_brdf_trunc + -ms + -mod( ms, 2 ) + -2 >= 0 ) then
 9178.          $I_L9178_60 = 0
 9178. !dir$ ivdep
 9178.          do
 9179.             cgk(2 + $I_L9178_60, 2 + 2 * $I_L9178_60) = 5.0e-1 * cg_coeff(2 + 2 * $I_L9178_60)
 9180.             $I_L9178_60 = 1 + $I_L9178_60
 9178.             if ( $I_L9178_60 >= ( ls_brdf_trunc + -ms + -mod( ms, 2 ) ) / 2 ) exit
 9178.          enddo
 9178.       endif
 9185.       return
 9185.       end
 9185.       
 9437.       
 9437.       subroutine check_phf_term( ierr, l_aerosol, n_aerosol, i_aerosol_parametrization, n_aerosol_phf_term, n_phase_term_aerosol_prsc, l_cloud, n_condensed, i_condensed_param, i_phase_cmp, condensed_n_phf, n_phase_term_drop_prsc, n_phase_term_ice_prsc, n_order_phase, l_henyey_greenstein_pf, l_rescale, n_order_forward, l_solar_phf, n_order_phase_solar, nd_aerosol_species, nd_condensed )
 9208.       t$314 = nd_aerosol_species
 9277.       t$2156 = _zla( 0, nd_aerosol_species )
 9208.       t$315 = nd_condensed
 9294.       t$2157 = _zla( 0, nd_condensed )
 9324.       if ( l_henyey_greenstein_pf ) then
 9325.          $n_order_required_S1 = 1
 9325.       else
 9327.          $n_order_required_S1 = cvmg( max( n_order_phase, n_order_forward ), n_order_phase, l_rescale )
 9334.          if ( l_solar_phf ) then
 9335.             $n_order_required_S1 = max( n_order_phase, n_order_phase_solar )
 9336.             if ( l_rescale ) then
 9336.                $n_order_required_S1 = 1 + max( n_order_phase, n_order_phase_solar )
 9336.             endif
 9336.          endif
 9336.       endif
 9341.       if ( l_aerosol ) then
 9342.          $l_inadequate_S2 = .false.
 9343.          if ( n_aerosol > 0 ) then
 9343.             $I_L9343_8 = 0
 9343.             do
 9344.                if ( i_aerosol_parametrization(1 + $I_L9343_8) /= 1 ) then
 9344.                   if ( i_aerosol_parametrization(1 + $I_L9343_8) /= 2 ) then
 9352.                      if ( i_aerosol_parametrization(1 + $I_L9343_8) == 4 .orelse. i_aerosol_parametrization(1 + $I_L9343_8) == 5 ) then
 9356.                         $l_inadequate_S2 = $n_order_required_S1 > n_aerosol_phf_term(1 + $I_L9343_8)
 9356.                      else
 9358.                         if ( i_aerosol_parametrization(1 + $I_L9343_8) == 3 ) then
 9360.                            $l_inadequate_S2 = $n_order_required_S1 > n_phase_term_aerosol_prsc(1 + $I_L9343_8)
 9360.                         endif
 9360.                      endif
 9360.                   endif
 9360.                endif
 9365.                if ( $l_inadequate_S2 ) then
 9343.                   j = ( 1 + $I_L9343_8 )
 9366.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$317,  _substr(t$316,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: There is not enough information to define', 0x800600000000L ), _iotype( 'the phase function for aerosol ', 0x800600000000L ), _iotype( j, 0x2000200000000L ), _iotype( ' to the desired order.', 0x800600000000L ) ) )
 9370.                   ierr = 1
 9370.                   goto 20
 9370.                endif
 9373.                $I_L9343_8 = 1 + $I_L9343_8
 9372.                if ( $I_L9343_8 >= n_aerosol ) exit
 9372.             enddo
 9372.             goto 10
 9372.          else
 9372.             goto 10
 9372.          endif
 9372.       else
 9372.    10    continue
 9376.          if ( l_cloud ) then
 9377.             $l_inadequate_S4 = .false.
 9378.             if ( n_condensed > 0 ) then
 9378.                $I_L9378_10 = 0
 9378.                do
 9379.                   if ( i_phase_cmp(1 + $I_L9378_10) == 1 ) then
 9380.                      if ( i_condensed_param(1 + $I_L9378_10) /= 1 ) then
 9380.                         if ( i_condensed_param(1 + $I_L9378_10) /= 2 ) then
 9380.                            if ( i_condensed_param(1 + $I_L9378_10) /= 5 ) then
 9388.                               if ( i_condensed_param(1 + $I_L9378_10) == 3 ) then
 9390.                                  $l_inadequate_S4 = $n_order_required_S1 > n_phase_term_drop_prsc
 9390.                               endif
 9390.                            endif
 9390.                         endif
 9390.                      endif
 9393.                      if ( $l_inadequate_S4 ) then
 9378.                         j = ( 1 + $I_L9378_10 )
 9394.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$319,  _substr(t$318,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: There is not enough information to define', 0x800600000000L ), _iotype( 'the phase function for condensed species ', 0x800600000000L ), _iotype( j, 0x2000200000000L ), _iotype( ' (water droplets) ', 0x800600000000L ), _iotype( 'to the desired order.', 0x800600000000L ) ) )
 9398.                         ierr = 1
 9398.                         goto 20
 9398.                      endif
 9431.                      $I_L9378_10 = 1 + $I_L9378_10
 9401.                   else if ( i_phase_cmp(1 + $I_L9378_10) == 2 ) then
 9401.                   else
 9401.                   endif
 9401.                   if ( $I_L9378_10 >= n_condensed ) exit
 9401.                enddo
 9401.             endif
 9401.          endif
 9401.       endif
 9401.    20 continue
 9437.       return
 9437.       end
 9437.       
 9625.       
 9625.       subroutine clear_supplement( ierr, n_profile, n_layer, i_solver_clear, trans_free, reflect_free, trans_0_free, source_coeff_free, isolir, flux_inc_direct, flux_inc_down, s_down_free, s_up_free, albedo_surface_diff, albedo_surface_dir, source_ground, l_scale_solar, adjust_solar_ke, flux_direct_clear, flux_total_clear, nd_profile, nd_layer, nd_source_coeff )
 9457.       t$327 = nd_profile
 9457.       t$328 = nd_layer
 9509.       t$2158 = _zla( 0, nd_profile )
 9457.       t$2159 = _zla( 0, nd_profile )
 9509.       t$2160 = _zla( 0, nd_layer )
 9457.       t$2161 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 9457.       t$329 = nd_source_coeff
 9457.       t$2162 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 9515.       t$2163 = _zla( 0, nd_source_coeff )
 9457.       t$2164 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
 9457.       t$2165 = 1 + nd_layer
 9537.       t$2166 = _zla( 0, 1 + nd_layer )
 9457.       t$2167 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
 9457.       t$330 = ( 2 + 2 * nd_layer )
 9539.       t$2168 = _zla( 0, ( 2 + 2 * nd_layer ) )
 9457.       t$2169 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
 9457.       t$2170 = 5 * _zla( 0, nd_profile )
 9457.       t$2171 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 5
 9548.       t$2174 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 40
 9550.       t$2175 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 40
 9550.       t$2177 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
 9552.       t$2178 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
 9552.       t$2180 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 56
 9457.       t$2172 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 56 ), 8 )
 9548.       t$2173 = t$2172
 9550.       t$2176 = t$2172 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 40
 9552.       t$2179 = t$2172 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
 9563.       if ( isolir == 1 ) then
 9564.          call solar_source( n_profile, n_layer, flux_inc_direct(1), trans_0_free(1, 1), source_coeff_free(1, 1, 1), l_scale_solar, adjust_solar_ke(1, 1), flux_direct_clear(1, 0), s_down_free(1, 1), s_up_free(1, 1), nd_profile, nd_layer, nd_source_coeff )
 9564.       endif
 9577.       if ( i_solver_clear == 1 ) then
 9580.          call set_matrix_pentadiagonal( n_profile, n_layer, trans_free(1, 1), reflect_free(1, 1), s_down_free(1, 1), s_up_free(1, 1), albedo_surface_diff(1), albedo_surface_dir(1), flux_direct_clear(1, n_layer), flux_inc_down(1), source_ground(1), a5(1, 1, 1), b(1, 1), nd_profile, nd_layer )
 9591.          t$188 = nd_profile
 9591.          t$189 = 5
 9591.          t$190 = ( 2 + 2 * nd_layer )
 9591.          t$1691 = max( 0, nd_profile )
 9591.          t$1692 = nd_profile
 9591.          t$1693 = 5
 9591.          t$1694 = 5 * nd_profile
 9591.          t$1695 = max( 0, 2 + 2 * nd_layer )
 9591.          t$1696 = nd_profile * ( 2 + 2 * nd_layer ) * 5
 9591.          t$1697 = ( 2 * nd_profile + nd_profile * nd_layer * 2 )
 9591.          if ( -2 * n_layer <= 0 ) then
 9591.             if ( n_profile > 0 ) then
 9591.                $I_L9591_68 = 0
 9591.                do
 9591.                   $I_L9591_66 = 0
 9591.                   do
 9591.                      $I_L9591_54 = 0
 9591. !dir$ ivdep
 9591.                      do
 9591.                         $work_1_WR0_R0 = ( a5(1 + $I_L9591_54, 2 + -$I_L9591_66, -$I_L9591_66 + -$I_L9591_68 + 2 * n_layer + 1) * 1.0/a5(1 + $I_L9591_54, 3, -$I_L9591_68 + 2 * n_layer + 2) )
 9591.                         work_1(1 + $I_L9591_54, 1) = $work_1_WR0_R0
 9591.                         b(1 + $I_L9591_54, -$I_L9591_66 + -$I_L9591_68 + 2 * n_layer + 1) = b(1 + $I_L9591_54, -$I_L9591_66 + -$I_L9591_68 + 2 * n_layer + 1) + -( $work_1_WR0_R0 * b(1 + $I_L9591_54, -$I_L9591_68 + 2 * n_layer + 2) )
 9591.                         $I_L9591_54 = 1 + $I_L9591_54
 9591.                         if ( $I_L9591_54 >= n_profile ) exit
 9591.                      enddo
 9591.                      $I_L9591_62 = 0
 9591. !dir$ blocking_size( 0, 0 )
 9591.                      do
 9591.                         $I_L9591_56 = 0
 9591. !dir$ ivdep
 9591. !dir$ blocking_size( 0, 0 )
 9591.                         do
 9591.                            a5(1 + $I_L9591_56, $I_L9591_62 + -$I_L9591_66 + 3, -$I_L9591_66 + -$I_L9591_68 + 2 * n_layer + 1) = a5(1 + $I_L9591_56, $I_L9591_62 + -$I_L9591_66 + 3, -$I_L9591_66 + -$I_L9591_68 + 2 * n_layer + 1) + -( work_1(1 + $I_L9591_56, 1) * a5(1 + $I_L9591_56, 4 + $I_L9591_62, -$I_L9591_68 + 2 * n_layer + 2) )
 9591.                            $I_L9591_56 = 1 + $I_L9591_56
 9591.                            if ( $I_L9591_56 >= n_profile ) exit
 9591.                         enddo
 9591.                         $I_L9591_62 = 1 + $I_L9591_62
 9591.                         if ( $I_L9591_62 >= ( min( 2, ( -$I_L9591_68 + 2 * n_layer + 1 ) ) ) ) exit
 9591.                      enddo
 9591.                      $I_L9591_66 = 1 + $I_L9591_66
 9591.                      if ( $I_L9591_66 >= ( min( 2, ( -$I_L9591_68 + 2 * n_layer + 1 ) ) ) ) exit
 9591.                   enddo
 9591.                   $I_L9591_68 = 1 + $I_L9591_68
 9591.                   if ( $I_L9591_68 >= 1 + 2 * n_layer ) exit
 9591.                enddo
 9591.             endif
 9591.          endif
 9591.          if ( n_profile > 0 ) then
 9591.             $I_L9591_58 = 0
 9591. !dir$ ivdep
 9591.             do
 9591.                $flux_total_clear_WR0_R1 = ( b(1 + $I_L9591_58, 1) * 1.0/a5(1 + $I_L9591_58, 3, 1) )
 9591.                flux_total_clear(1 + $I_L9591_58, 1) = $flux_total_clear_WR0_R1
 9591.                flux_total_clear(1 + $I_L9591_58, 2) = ( ( b(1 + $I_L9591_58, 2) + -( a5(1 + $I_L9591_58, 4, 2) * $flux_total_clear_WR0_R1 ) ) * 1.0/a5(1 + $I_L9591_58, 3, 2) )
 9591.                $I_L9591_58 = 1 + $I_L9591_58
 9591.                if ( $I_L9591_58 >= n_profile ) exit
 9591.             enddo
 9591.          endif
 9591.          if ( 2 * n_layer > 0 ) then
 9591.             if ( n_profile > 0 ) then
 9591.                $SI_L9591_60_G1 = 0
 9591.                do
 9591.                   $I_L9591_64 = 0
 9591. !dir$ blocking_size( 0, 0 )
 9591.                   do
 9591.                      $I_L9591_70 = 0
 9591. !dir$ ivdep
 9591. !dir$ blocking_size( 256, 256 )
 9591.                      do
 9591.                         flux_total_clear($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 3 + $I_L9591_64) = ( ( b($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 3 + $I_L9591_64) + -( a5($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 4, 3 + $I_L9591_64) * flux_total_clear($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 2 + $I_L9591_64) ) + -( a5($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 5, 3 + $I_L9591_64) * flux_total_clear($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 1 + $I_L9591_64) ) ) * 1.0/a5($I_L9591_70 + 256 * $SI_L9591_60_G1 + 1, 3, 3 + $I_L9591_64) )
 9591.                         $I_L9591_70 = 1 + $I_L9591_70
 9591.                         if ( $I_L9591_70 >= min( n_profile, 256 + 256 * $SI_L9591_60_G1 ) + -256 * $SI_L9591_60_G1 ) exit
 9591.                      enddo
 9591.                      $I_L9591_64 = 1 + $I_L9591_64
 9591.                      if ( $I_L9591_64 >= ( 2 * n_layer ) ) exit
 9591.                   enddo
 9591.                   $SI_L9591_60_G1 = 1 + $SI_L9591_60_G1
 9591.                   if ( $SI_L9591_60_G1 >= _rsh( 255 + n_profile, 8 ) ) exit
 9591.                enddo
 9591.             endif
 9591.          endif
 9591.          goto 10
 9599.       else if ( i_solver_clear == 13 ) then
 9602.          call solver_homogen_direct( n_profile, n_layer, trans_free(1, 1), reflect_free(1, 1), s_down_free(1, 1), s_up_free(1, 1), isolir, albedo_surface_diff(1), albedo_surface_dir(1), flux_direct_clear(1, n_layer), flux_inc_down(1), source_ground(1), flux_total_clear(1, 1), nd_profile, nd_layer )
 9602.    10    continue
 9457.          _free( t$2172 )
 9457.       else
 9614.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$332,  _substr(t$331,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: The solver specified for clear-sky fluxes is not valid.', 0x800600000000L ) ) )
 9617.          ierr = 1
 9457.          _free( t$2172 )
 9457.       endif
 9625.       return
 9625.       end
 9625.       
 9959.       
 9959.       subroutine cloud_maxcs_split( ierr, n_profile, n_layer, n_cloud_top, w_cloud, frac_cloud, n_cloud_type, n_column_cld, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, nd_profile, nd_layer, id_ct, nd_column, nd_cloud_type )
 9645.       t$337 = nd_profile
 9645.       t$338 = id_ct
 9645.       t$339 = nd_layer
 9693.       t$2181 = _zla( 0, nd_profile )
 9645.       t$2182 = _zla( 0, nd_profile )
 9645.       t$2183 = nd_layer + -id_ct + 1
 9693.       t$2184 = _zla( 0, nd_layer + -id_ct + 1 )
 9645.       t$2185 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 9645.       t$340 = nd_cloud_type
 9645.       t$2186 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 9695.       t$2187 = _zla( 0, nd_cloud_type )
 9645.       t$2188 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_type ) * _zla( 0, nd_layer + -id_ct + 1 )
 9645.       t$341 = nd_column
 9704.       t$2189 = _zla( 0, nd_column )
 9645.       t$2190 = _zla( 0, nd_profile ) * _zla( 0, nd_column )
 9645.       t$342 = ( nd_layer + -id_ct + 1 )
 9742.       t$2191 = _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9742.       t$2194 = 8 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9734.       t$2196 = 12 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9731.       t$2198 = 16 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9744.       t$2199 = 16 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9744.       t$2201 = 24 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9645.       t$2192 = int( _alloc( 24 * _zla( 0, ( nd_layer + -id_ct + 1 ) ) ), 8 )
 9742.       t$2193 = t$2192
 9734.       t$2195 = t$2192 + 8 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9731.       t$2197 = t$2192 + 12 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9744.       t$2200 = t$2192 + 16 * _zla( 0, ( nd_layer + -id_ct + 1 ) )
 9769.       if ( n_cloud_type == 2 ) then
 9774.          $ptr_cnv_S2 = 2
 9774.          goto 10
 9782.       else if ( n_cloud_type == 1 ) then
 9784.          $ptr_cnv_S2 = 0
 9784.    10    continue
 9798.          if ( n_profile > 0 ) then
 9798.             $I_L9798_66 = 0
 9798.             do
 9804.                if ( n_layer + -n_cloud_top >= 0 ) then
 9807.                   if ( n_cloud_type == 2 ) then
 9804.                      $I_L9804_52 = 0
 9804. !dir$ ivdep
 9804. !dir$ loop_info (automatic) cache_nt( frac_cloud, w_cloud )
 9804.                      do
 9810.                         cnv_right(1 + $I_L9804_52) = w_cloud(1 + $I_L9798_66, n_cloud_top + $I_L9804_52) * frac_cloud(1 + $I_L9798_66, n_cloud_top + $I_L9804_52, $ptr_cnv_S2)
 9816.                         strat_left(1 + $I_L9804_52) = 1.0 + -( w_cloud(1 + $I_L9798_66, n_cloud_top + $I_L9804_52) * frac_cloud(1 + $I_L9798_66, n_cloud_top + $I_L9804_52, 1) )
 9819.                         key_st(1 + $I_L9804_52) = ( 1 + $I_L9804_52 )
 9820.                         key_cnv(1 + $I_L9804_52) = ( 1 + $I_L9804_52 )
 9821.                         $I_L9804_52 = 1 + $I_L9804_52
 9814.                         if ( $I_L9804_52 >= n_layer + -n_cloud_top + 1 ) exit
 9814.                      enddo
 9814.                   else
 9804.                      $I_L9804_60 = 0
 9804. !dir$ ivdep
 9804. !dir$ loop_info (automatic) cache_nt( frac_cloud, w_cloud )
 9804.                      do
 9813.                         cnv_right(1 + $I_L9804_60) = 0.0
 9816.                         strat_left(1 + $I_L9804_60) = 1.0 + -( w_cloud(1 + $I_L9798_66, n_cloud_top + $I_L9804_60) * frac_cloud(1 + $I_L9798_66, n_cloud_top + $I_L9804_60, 1) )
 9819.                         key_st(1 + $I_L9804_60) = ( 1 + $I_L9804_60 )
 9820.                         key_cnv(1 + $I_L9804_60) = ( 1 + $I_L9804_60 )
 9821.                         $I_L9804_60 = 1 + $I_L9804_60
 9814.                         if ( $I_L9804_60 >= n_layer + -n_cloud_top + 1 ) exit
 9814.                      enddo
 9814.                   endif
 9814.                endif
 9824.                t$1028 = ( n_layer + -n_cloud_top + 1 )
 9824.                t$3342 = max( 0, n_layer + -n_cloud_top + 1 )
 9824.                if ( n_layer + -n_cloud_top == 0 ) then
 9824.                   key_cnv(1) = 1
 9825.                   key_st(1) = 1
 9825.                else
 9824.                   $gap_S5 = n_layer + -n_cloud_top + 1
 9824.                   if ( n_layer + -n_cloud_top > 0 ) then
 9824.                      do
 9824.                         $gap_S5 = $gap_S5 / 2
 9824.                         if ( n_layer + -n_cloud_top + -$gap_S5 >= 0 ) then
 9824.                            $I_L9824_62 = 0
 9824.                            do
 9824.                               if ( ( $I_L9824_62 /= 0 .and. xor( -$gap_S5, -$I_L9824_62 ) < 0 ) == 0 ) then
 9824.                                  $t_S9 = ( $gap_S5 + $I_L9824_62 ) / $gap_S5
 9824.                                  $I_L9824_54 = 0
 9824. !dir$ unroll 4
 9824.                                  do
 9824.                                     if ( cnv_right(key_cnv($I_L9824_62 + -( $gap_S5 * $I_L9824_54 ) + 1)) > cnv_right(key_cnv($gap_S5 + $I_L9824_62 + -( $gap_S5 * $I_L9824_54 ) + 1)) ) then
 9824.                                        $pointer_temp_S8 = key_cnv($I_L9824_62 + -( $gap_S5 * $I_L9824_54 ) + 1)
 9824.                                        key_cnv($I_L9824_62 + -( $gap_S5 * $I_L9824_54 ) + 1) = key_cnv($gap_S5 + $I_L9824_62 + -( $gap_S5 * $I_L9824_54 ) + 1)
 9824.                                        key_cnv($gap_S5 + $I_L9824_62 + -( $gap_S5 * $I_L9824_54 ) + 1) = $pointer_temp_S8
 9824.                                     endif
 9824.                                     $I_L9824_54 = 1 + $I_L9824_54
 9824.                                     if ( $I_L9824_54 >= $t_S9 ) exit
 9824.                                  enddo
 9824.                               endif
 9824.                               $I_L9824_62 = 1 + $I_L9824_62
 9824.                               if ( $I_L9824_62 >= n_layer + -n_cloud_top + -$gap_S5 + 1 ) exit
 9824.                            enddo
 9824.                         endif
 9824.                         if ( $gap_S5 < 2 ) exit
 9824.                      enddo
 9824.                   endif
 9825.                   $gap_S10 = n_layer + -n_cloud_top + 1
 9825.                   if ( n_layer + -n_cloud_top > 0 ) then
 9825.                      do
 9825.                         $gap_S10 = $gap_S10 / 2
 9825.                         if ( n_layer + -n_cloud_top + -$gap_S10 >= 0 ) then
 9825.                            $I_L9825_64 = 0
 9825.                            do
 9825.                               if ( ( $I_L9825_64 /= 0 .and. xor( -$gap_S10, -$I_L9825_64 ) < 0 ) == 0 ) then
 9825.                                  $t_S14 = ( $gap_S10 + $I_L9825_64 ) / $gap_S10
 9825.                                  $I_L9825_56 = 0
 9825. !dir$ unroll 4
 9825.                                  do
 9825.                                     if ( strat_left(key_st($I_L9825_64 + -( $gap_S10 * $I_L9825_56 ) + 1)) > strat_left(key_st($gap_S10 + $I_L9825_64 + -( $gap_S10 * $I_L9825_56 ) + 1)) ) then
 9825.                                        $pointer_temp_S13 = key_st($I_L9825_64 + -( $gap_S10 * $I_L9825_56 ) + 1)
 9825.                                        key_st($I_L9825_64 + -( $gap_S10 * $I_L9825_56 ) + 1) = key_st($gap_S10 + $I_L9825_64 + -( $gap_S10 * $I_L9825_56 ) + 1)
 9825.                                        key_st($gap_S10 + $I_L9825_64 + -( $gap_S10 * $I_L9825_56 ) + 1) = $pointer_temp_S13
 9825.                                     endif
 9825.                                     $I_L9825_56 = 1 + $I_L9825_56
 9825.                                     if ( $I_L9825_56 >= $t_S14 ) exit
 9825.                                  enddo
 9825.                               endif
 9825.                               $I_L9825_64 = 1 + $I_L9825_64
 9825.                               if ( $I_L9825_64 >= n_layer + -n_cloud_top + -$gap_S10 + 1 ) exit
 9825.                            enddo
 9825.                         endif
 9825.                         if ( $gap_S10 < 2 ) exit
 9825.                      enddo
 9825.                   endif
 9825.                endif
 9825.                t$1028 = ( n_layer + -n_cloud_top + 1 )
 9825.                t$3342 = max( 0, n_layer + -n_cloud_top + 1 )
 9830.                n_column_cld(1 + $I_L9798_66) = 0
 9831.                n_column_slv(1 + $I_L9798_66) = 0
 9834.                if ( n_layer + -n_cloud_top >= 0 ) then
 9834.                   $I_L9834_58 = 0
 9834.                   do
 9836.                      if ( cnv_right(1 + $I_L9834_58) <= 2.2204460492503131e-12 ) then
 9850.                         if ( strat_left(1 + $I_L9834_58) > 2.2204460492503131e-12 ) then
 9864.                            $I_L9834_58 = 1 + $I_L9834_58
 9851.                         else if ( n_column_cld(1 + $I_L9798_66) < nd_column ) then
 9851.                         else
 9851.                         endif
 9837.                      else if ( n_column_cld(1 + $I_L9798_66) < nd_column ) then
 9837.                      else
 9837.                      endif
 9837.                      if ( $I_L9834_58 >= n_layer + -n_cloud_top + 1 ) exit
 9837.                   enddo
 9868.                   $x_done_S20 = 0.0
 9871.                   $i_key_cnv_S17 = 1
 9872.                   $x_cnv_S16 = cnv_right(key_cnv(1))
 9873.                   if ( n_layer + -n_cloud_top > 0 .and. $x_cnv_S16 < 2.2204460492503131e-12 ) then
 9873.                      do
 9874.                         $i_key_cnv_S17 = 1 + $i_key_cnv_S17
 9875.                         $x_cnv_S16 = cnv_right(key_cnv($i_key_cnv_S17))
 9875.                         if ( ( $i_key_cnv_S17 < n_layer + -n_cloud_top + 1 .and. $x_cnv_S16 < 2.2204460492503131e-12 ) == 0 ) exit
 9875.                      enddo
 9875.                   endif
 9877.                   $i_key_st_S19 = 1
 9878.                   $x_st_S18 = strat_left(key_st(1))
 9879.                   if ( n_layer + -n_cloud_top > 0 .and. $x_st_S18 < 2.2204460492503131e-12 ) then
 9879.                      do
 9880.                         $i_key_st_S19 = 1 + $i_key_st_S19
 9881.                         $x_st_S18 = strat_left(key_st($i_key_st_S19))
 9881.                         if ( ( $i_key_st_S19 < n_layer + -n_cloud_top + 1 .and. $x_st_S18 < 2.2204460492503131e-12 ) == 0 ) exit
 9881.                      enddo
 9881.                   endif
 9885. !dir$ loop_info (automatic) cache_nt( list_column_slv )
 9885.                   do
 9887.                      if ( $x_cnv_S16 <= $x_st_S18 ) then
 9889.                         if ( n_column_cld(1 + $I_L9798_66) < nd_column ) then
 9890.                            n_column_cld(1 + $I_L9798_66) = 1 + n_column_cld(1 + $I_L9798_66)
 9898.                            i_clm_lyr_chn(1 + $I_L9798_66, n_column_cld(1 + $I_L9798_66)) = n_cloud_top + key_cnv($i_key_cnv_S17) + -1
 9900.                            i_clm_cld_typ(1 + $I_L9798_66, n_column_cld(1 + $I_L9798_66)) = 0
 9901.                            $x_new_done_S21 = $x_cnv_S16
 9902.                            $i_key_cnv_S17 = 1 + $i_key_cnv_S17
 9903.                            if ( $i_key_cnv_S17 <= n_layer + -n_cloud_top + 1 ) then
 9904.                               $x_cnv_S16 = cnv_right(key_cnv($i_key_cnv_S17))
 9904.                            else
 9908.                               $x_cnv_S16 = 1.0
 9908.                            endif
 9937.                            if ( $x_st_S18 > 9.9999999999777955e-1 ) then
 9937.                               if ( $x_cnv_S16 > 9.9999999999777955e-1 ) then
 9939.                                  $x_new_done_S21 = 1.0
 9939.                               endif
 9939.                            endif
 9942.                            $dx_col_S22 = $x_new_done_S21 + -$x_done_S20
 9943.                            if ( ( $x_new_done_S21 + -$x_done_S20 ) > 2.2204460492503131e-12 ) then
 9944.                               n_column_slv(1 + $I_L9798_66) = 1 + n_column_slv(1 + $I_L9798_66)
 9945.                               list_column_slv(1 + $I_L9798_66, n_column_slv(1 + $I_L9798_66)) = n_column_cld(1 + $I_L9798_66)
 9946.                               area_column(1 + $I_L9798_66, n_column_cld(1 + $I_L9798_66)) = $dx_col_S22
 9947.                               $x_done_S20 = $x_new_done_S21
 9947.                            else
 9949.                               area_column(1 + $I_L9798_66, n_column_cld(1 + $I_L9798_66)) = 0.0
 9949.                            endif
 9950.                         else
 9950.                         endif
 9912.                      else if ( n_column_cld(1 + $I_L9798_66) < nd_column ) then
 9912.                      else
 9912.                      endif
 9912.                      if ( $x_done_S20 >= 9.9999999999777955e-1 ) exit
 9912.                   enddo
 9954.                   $I_L9798_66 = 1 + $I_L9798_66
 9952.                else
 9952.                endif
 9952.                if ( $I_L9798_66 >= n_profile ) exit
 9952.             enddo
 9952.             goto 20
 9952.          else
 9952.    20       continue
 9645.             _free( t$2192 )
 9645.          endif
 9645.       else
 9787.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$346,  _substr(t$345,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: There are too many types of cloud for the type of overlap.', 0x800600000000L ) ) )
 9790.          ierr = 1
 9645.          _free( t$2192 )
 9645.       endif
 9959.       return
 9959.       end
 9959.       
10093.       
10093.       subroutine copy_clr_full( n_profile, n_layer, n_cloud_top, n_order_phase, tau_clr, omega_clr, phase_fnc_clr, tau, omega, phase_fnc, tau_clr_f, omega_clr_f, phase_fnc_clr_f, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order )
 9980.       t$356 = nd_profile
 9980.       t$357 = nd_layer_clr
10024.       t$2202 = _zla( 0, nd_profile )
 9980.       t$2203 = _zla( 0, nd_profile )
10024.       t$2204 = _zla( 0, nd_layer_clr )
 9980.       t$2205 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
 9980.       t$358 = nd_max_order
 9980.       t$2206 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
10028.       t$2207 = _zla( 0, nd_max_order )
 9980.       t$2208 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr ) * _zla( 0, nd_max_order )
 9980.       t$359 = id_ct
 9980.       t$360 = nd_layer
 9980.       t$2209 = nd_layer + -id_ct + 1
10031.       t$2210 = _zla( 0, nd_layer + -id_ct + 1 )
 9980.       t$2211 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 9980.       t$2212 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
 9980.       t$2213 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
10040.       t$2214 = _zla( 0, nd_layer )
 9980.       t$2215 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 9980.       t$2216 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 9980.       t$2217 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer )
10075.       if ( nd_layer > 0 ) then
10076.          if ( nd_profile > 0 ) then
10075.             $I_L10075_24 = 0
10075.             do
10076.                $I_L10076_20 = 0
10076. !dir$ ivdep
10076.                do
10077.                   tau_clr_f(1 + $I_L10076_20, 1 + $I_L10075_24) = tau(1 + $I_L10076_20, 1 + $I_L10075_24)
10078.                   omega_clr_f(1 + $I_L10076_20, 1 + $I_L10075_24) = omega(1 + $I_L10076_20, 1 + $I_L10075_24)
10079.                   phase_fnc_clr_f(1 + $I_L10076_20, 1 + $I_L10075_24, 1) = phase_fnc(1 + $I_L10076_20, 1 + $I_L10075_24, 1)
10080.                   $I_L10076_20 = 1 + $I_L10076_20
10076.                   if ( $I_L10076_20 >= nd_profile ) exit
10076.                enddo
10081.                $I_L10075_24 = 1 + $I_L10075_24
10080.                if ( $I_L10075_24 >= nd_layer ) exit
10080.             enddo
10080.          endif
10080.       endif
10082.       if ( -2 + n_order_phase >= 0 ) then
10083.          if ( nd_layer > 0 ) then
10084.             if ( nd_profile > 0 ) then
10082.                $I_L10082_28 = 0
10082.                do
10083.                   $I_L10083_26 = 0
10083.                   do
10084.                      $I_L10084_22 = 0
10084. !dir$ ivdep
10084.                      do
10085.                         phase_fnc_clr_f(1 + $I_L10084_22, 1 + $I_L10083_26, 2 + $I_L10082_28) = phase_fnc(1 + $I_L10084_22, 1 + $I_L10083_26, 2 + $I_L10082_28)
10086.                         $I_L10084_22 = 1 + $I_L10084_22
10084.                         if ( $I_L10084_22 >= nd_profile ) exit
10084.                      enddo
10087.                      $I_L10083_26 = 1 + $I_L10083_26
10086.                      if ( $I_L10083_26 >= nd_layer ) exit
10086.                   enddo
10088.                   $I_L10082_28 = 1 + $I_L10082_28
10087.                   if ( $I_L10082_28 >= -1 + n_order_phase ) exit
10087.                enddo
10087.             endif
10087.          endif
10087.       endif
10093.       return
10093.       end
10093.       
10224.       
10224.       subroutine copy_clr_sol( n_profile, n_layer, n_cloud_top, n_direction, l_rescale, forward_scatter_clr, phase_fnc_solar_clr, forward_scatter, phase_fnc_solar, forward_scatter_clr_f, phase_fnc_solar_clr_f, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_direction )
10115.       t$362 = nd_profile
10115.       t$363 = nd_layer_clr
10163.       t$2218 = _zla( 0, nd_profile )
10115.       t$2219 = _zla( 0, nd_profile )
10163.       t$2220 = _zla( 0, nd_layer_clr )
10115.       t$2221 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
10115.       t$364 = nd_direction
10115.       t$2222 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
10165.       t$2223 = _zla( 0, nd_direction )
10115.       t$2224 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr ) * _zla( 0, nd_direction )
10115.       t$365 = id_ct
10115.       t$366 = nd_layer
10115.       t$2225 = nd_layer + -id_ct + 1
10168.       t$2226 = _zla( 0, nd_layer + -id_ct + 1 )
10115.       t$2227 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
10115.       t$2228 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
10115.       t$2229 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_ct + 1 )
10175.       t$2230 = _zla( 0, nd_layer )
10115.       t$2231 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
10115.       t$2232 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
10115.       t$2233 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer )
10194.       if ( -1 + n_cloud_top > 0 ) then
10194.          $I_L10194_60 = 0
10194.          do
10195.             if ( l_rescale ) then
10196.                if ( n_profile > 0 ) then
10196.                   $I_L10196_48 = 0
10196. !dir$ ivdep
10196.                   do
10197.                      forward_scatter_clr_f(1 + $I_L10196_48, 1 + $I_L10194_60) = forward_scatter_clr(1 + $I_L10196_48, 1 + $I_L10194_60)
10198.                      $I_L10196_48 = 1 + $I_L10196_48
10196.                      if ( $I_L10196_48 >= n_profile ) exit
10196.                   enddo
10196.                endif
10196.             endif
10200.             if ( n_direction > 0 ) then
10201.                if ( n_profile > 0 ) then
10200.                   $I_L10200_56 = 0
10200.                   do
10201.                      $I_L10201_50 = 0
10201. !dir$ ivdep
10201.                      do
10202.                         phase_fnc_solar_clr_f(1 + $I_L10201_50, 1 + $I_L10194_60, 1 + $I_L10200_56) = phase_fnc_solar_clr(1 + $I_L10201_50, 1 + $I_L10194_60, 1 + $I_L10200_56)
10203.                         $I_L10201_50 = 1 + $I_L10201_50
10201.                         if ( $I_L10201_50 >= n_profile ) exit
10201.                      enddo
10204.                      $I_L10200_56 = 1 + $I_L10200_56
10203.                      if ( $I_L10200_56 >= n_direction ) exit
10203.                   enddo
10203.                endif
10203.             endif
10205.             $I_L10194_60 = 1 + $I_L10194_60
10204.             if ( $I_L10194_60 >= -1 + n_cloud_top ) exit
10204.          enddo
10204.       endif
10208.       if ( n_layer + -n_cloud_top >= 0 ) then
10208.          $I_L10208_62 = 0
10208.          do
10209.             if ( l_rescale ) then
10210.                if ( n_profile > 0 ) then
10210.                   $I_L10210_52 = 0
10210. !dir$ ivdep
10210.                   do
10211.                      forward_scatter_clr_f(1 + $I_L10210_52, n_cloud_top + $I_L10208_62) = forward_scatter(1 + $I_L10210_52, n_cloud_top + $I_L10208_62)
10212.                      $I_L10210_52 = 1 + $I_L10210_52
10210.                      if ( $I_L10210_52 >= n_profile ) exit
10210.                   enddo
10210.                endif
10210.             endif
10214.             if ( n_direction > 0 ) then
10215.                if ( n_profile > 0 ) then
10214.                   $I_L10214_58 = 0
10214.                   do
10215.                      $I_L10215_54 = 0
10215. !dir$ ivdep
10215.                      do
10216.                         phase_fnc_solar_clr_f(1 + $I_L10215_54, n_cloud_top + $I_L10208_62, 1 + $I_L10214_58) = phase_fnc_solar(1 + $I_L10215_54, n_cloud_top + $I_L10208_62, 1 + $I_L10214_58)
10217.                         $I_L10215_54 = 1 + $I_L10215_54
10215.                         if ( $I_L10215_54 >= n_profile ) exit
10215.                      enddo
10218.                      $I_L10214_58 = 1 + $I_L10214_58
10217.                      if ( $I_L10214_58 >= n_direction ) exit
10217.                   enddo
10217.                endif
10217.             endif
10219.             $I_L10208_62 = 1 + $I_L10208_62
10218.             if ( $I_L10208_62 >= n_layer + -n_cloud_top + 1 ) exit
10218.          enddo
10218.       endif
10224.       return
10224.       end
10224.       
10346.       
10346.       subroutine diff_albedo_basis( n_brdf_basis_fnc, ls_brdf_trunc, f_brdf, uplm_zero, diffuse_alb_basis, nd_brdf_basis_fnc, nd_brdf_trunc, nd_sph_coeff )
10250.       t$370 = nd_brdf_basis_fnc
10250.       t$371 = nd_brdf_trunc / 2
10250.       t$372 = nd_brdf_trunc
10291.       t$2234 = _zla( 0, nd_brdf_basis_fnc )
10250.       t$2235 = _zla( 0, nd_brdf_basis_fnc )
10250.       t$2236 = 1 + nd_brdf_trunc / 2
10291.       t$2237 = _zla( 0, 1 + nd_brdf_trunc / 2 )
10250.       t$2238 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
10250.       t$2239 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
10250.       t$2240 = 1 + nd_brdf_trunc
10291.       t$2241 = _zla( 0, 1 + nd_brdf_trunc )
10250.       t$2242 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
10250.       t$369 = nd_sph_coeff
10283.       t$2243 = _zla( 0, nd_sph_coeff )
10250.       t$373 = ( 1 + nd_brdf_trunc )
10311.       t$2244 = _zla( 0, ( 1 + nd_brdf_trunc ) )
10311.       t$2247 = 8 * _zla( 0, ( 1 + nd_brdf_trunc ) )
10313.       t$2248 = 8 * _zla( 0, ( 1 + nd_brdf_trunc ) )
10313.       t$2250 = 16 * _zla( 0, ( 1 + nd_brdf_trunc ) )
10250.       t$2245 = int( _alloc( 16 * _zla( 0, ( 1 + nd_brdf_trunc ) ) ), 8 )
10311.       t$2246 = t$2245
10313.       t$2249 = t$2245 + 8 * _zla( 0, ( 1 + nd_brdf_trunc ) )
10319.       if ( n_brdf_basis_fnc > 0 ) then
10322.          if ( ls_brdf_trunc >= 0 ) then
10319.             $I_L10319_38 = 0
10319. !dir$ ivdep
10319.             do
10320.                diffuse_alb_basis(1 + $I_L10319_38) = 0.0
10341.                $I_L10319_38 = 1 + $I_L10319_38
10337.                if ( $I_L10319_38 >= n_brdf_basis_fnc ) exit
10337.             enddo
10319.             $I_L10319_50 = 0
10319.             do
10322.                $I_L10322_40 = 0
10322. !dir$ ivdep
10322.                do
10323.                   factor(1 + 2 * $I_L10322_40) = ( uplm_zero(1 + 2 * $I_L10322_40) * real( 1 + -2 * mod( ( 2 * $I_L10322_40 ), 2 ), 8 ) * 1.0/( ( -2 * $I_L10322_40 + ( 1 + 2 * $I_L10322_40 ) * ( 1 + 2 * $I_L10322_40 ) + -3 ) ) )
10329.                   sum_p(1 + 2 * $I_L10322_40) = 0.0
10326.                   $I_L10322_40 = 1 + $I_L10322_40
10322.                   if ( $I_L10322_40 >= ( 2 + ls_brdf_trunc ) / 2 ) exit
10322.                enddo
10330.                $I_L10330_48 = 0
10330. !dir$ blocking_size( 0, 0 )
10330.                do
10328.                   $SCA_factor_I1 = factor(1 + 2 * $I_L10330_48)
10328.                   $I_L10328_42 = 0
10328. !dir$ ivdep
10328. !dir$ blocking_size( 0, 0 )
10328.                   do
10331.                      sum_p(1 + 2 * $I_L10328_42) = sum_p(1 + 2 * $I_L10328_42) + $SCA_factor_I1 * f_brdf(1 + $I_L10319_50, $I_L10328_42, $I_L10330_48, 0)
10337.                      $I_L10328_42 = 1 + $I_L10328_42
10330.                      if ( $I_L10328_42 >= ( 2 + ls_brdf_trunc ) / 2 ) exit
10330.                   enddo
10333.                   $I_L10330_48 = 1 + $I_L10330_48
10333.                   if ( $I_L10330_48 >= ( 2 + ls_brdf_trunc ) / 2 ) exit
10333.                enddo
10328.                $SCA_diffuse_alb_basis_I0 = diffuse_alb_basis(1 + $I_L10319_50)
10328.                $I_L10328_44 = 0
10328. !dir$ ivdep
10328.                do
10334.                   $SCA_diffuse_alb_basis_I0 = $SCA_diffuse_alb_basis_I0 + ( sum_p(1 + 2 * $I_L10328_44) * uplm_zero(1 + 2 * $I_L10328_44) * 1.0/( ( ( 1 + 2 * $I_L10328_44 ) * ( 1 + 2 * $I_L10328_44 ) + -2 * $I_L10328_44 + -3 ) ) )
10337.                   $I_L10328_44 = 1 + $I_L10328_44
10333.                   if ( $I_L10328_44 >= ( 2 + ls_brdf_trunc ) / 2 ) exit
10333.                enddo
10328.                diffuse_alb_basis(1 + $I_L10319_50) = $SCA_diffuse_alb_basis_I0
10341.                $I_L10319_50 = 1 + $I_L10319_50
10337.                if ( $I_L10319_50 >= n_brdf_basis_fnc ) exit
10337.             enddo
10319.             $I_L10319_46 = 0
10319. !dir$ ivdep
10319.             do
10339.                diffuse_alb_basis(1 + $I_L10319_46) = 12.566370614359172 * diffuse_alb_basis(1 + $I_L10319_46)
10341.                $I_L10319_46 = 1 + $I_L10319_46
10337.                if ( $I_L10319_46 >= n_brdf_basis_fnc ) exit
10337.             enddo
10337.          else
10319.             $I_L10319_36 = 0
10319. !dir$ ivdep
10319.             do
10339.                diffuse_alb_basis(1 + $I_L10319_36) = 0.0
10341.                $I_L10319_36 = 1 + $I_L10319_36
10337.                if ( $I_L10319_36 >= n_brdf_basis_fnc ) exit
10337.             enddo
10337.          endif
10337.       endif
10250.       _free( t$2245 )
10346.       return
10346.       end
10346.       
10696.       
10696.       subroutine diff_planck_source( n_profile, n_layer, n_deg_fit, thermal_coefficient, t_ref_planck, t_level, t_ground, planck_flux, diff_planck, planck_ground, l_ir_source_quad, t, diff_planck_2, i_angular_integration, n_viewing_level, i_rad_layer, frac_rad_layer, planck_radiance, l_tile, n_point_tile, n_tile, list_tile, frac_tile, t_tile, planck_flux_tile, nd_profile, nd_layer, nd_thermal_coeff, nd_radiance_profile, nd_viewing_level, nd_point_tile, nd_tile )
10368.       t$378 = ( -1 + nd_thermal_coeff )
10368.       t$2251 = nd_thermal_coeff
10437.       t$2252 = _zla( 0, nd_thermal_coeff )
10368.       t$379 = nd_profile
10368.       t$380 = nd_layer
10441.       t$2253 = _zla( 0, nd_profile )
10368.       t$2254 = _zla( 0, nd_profile )
10368.       t$2255 = 1 + nd_layer
10441.       t$2256 = _zla( 0, 1 + nd_layer )
10368.       t$2257 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
10468.       t$2258 = _zla( 0, nd_layer )
10368.       t$2259 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
10368.       t$377 = nd_viewing_level
10423.       t$2260 = _zla( 0, nd_viewing_level )
10368.       t$383 = nd_radiance_profile
10474.       t$2261 = _zla( 0, nd_radiance_profile )
10368.       t$2262 = _zla( 0, nd_radiance_profile )
10368.       t$2263 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_radiance_profile )
10368.       t$381 = nd_point_tile
10457.       t$2264 = _zla( 0, nd_point_tile )
10368.       t$382 = nd_tile
10368.       t$2265 = _zla( 0, nd_point_tile )
10460.       t$2266 = _zla( 0, nd_tile )
10368.       t$2267 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
10491.       t$2270 = 8 * _zla( 0, nd_profile )
10492.       t$2271 = 8 * _zla( 0, nd_profile )
10492.       t$2273 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
10368.       t$2268 = int( _alloc( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 ), 8 )
10491.       t$2269 = t$2268
10492.       t$2272 = t$2268 + 8 * _zla( 0, nd_profile )
10497.       if ( i_angular_integration == 3 ) then
10500.          if ( n_viewing_level > 0 ) then
10500.             $I_L10500_342 = 0
10500.             do
10501.                if ( n_profile > 0 ) then
10501.                   $SCA_frac_rad_layer_I12 = frac_rad_layer(1 + $I_L10500_342)
10501.                   $SCA_i_rad_layer_I13 = i_rad_layer(1 + $I_L10500_342)
10508.                   $SC_thermal_coefficient_I14 = thermal_coefficient(n_deg_fit)
10501.                   $I_L10501_306 = 0
10501. !dir$ ivdep
10501.                   do
10503.                      t_ratio(1 + $I_L10501_306) = ( ( t_level(1 + $I_L10501_306, -1 + $SCA_i_rad_layer_I13) + ( t_level(1 + $I_L10501_306, $SCA_i_rad_layer_I13) + -t_level(1 + $I_L10501_306, -1 + $SCA_i_rad_layer_I13) ) * $SCA_frac_rad_layer_I12 ) * 1.0/t_ref_planck )
10508.                      planck_radiance(1 + $I_L10501_306, 1 + $I_L10500_342) = $SC_thermal_coefficient_I14
10510.                      $I_L10501_306 = 1 + $I_L10501_306
10501.                      if ( $I_L10501_306 >= n_profile ) exit
10501.                   enddo
10501.                endif
10511.                if ( n_deg_fit > 0 ) then
10512.                   if ( n_profile > 0 ) then
10512.                      $I_L10512_328 = 0
10512. !dir$ ivdep
10512.                      do
10511.                         $SCA_t_ratio_I6 = t_ratio(1 + $I_L10512_328)
10511.                         $SCA_planck_radiance_I7 = planck_radiance(1 + $I_L10512_328, 1 + $I_L10500_342)
10511.                         $I_L10511_308 = 0
10511.                         do
10513.                            $SCA_planck_radiance_I7 = $SCA_planck_radiance_I7 * $SCA_t_ratio_I6 + thermal_coefficient(n_deg_fit + -$I_L10511_308 + -1)
10517.                            $I_L10511_308 = 1 + $I_L10511_308
10512.                            if ( $I_L10511_308 >= n_deg_fit ) exit
10512.                         enddo
10511.                         planck_radiance(1 + $I_L10512_328, 1 + $I_L10500_342) = $SCA_planck_radiance_I7
10516.                         $I_L10512_328 = 1 + $I_L10512_328
10516.                         if ( $I_L10512_328 >= n_profile ) exit
10516.                      enddo
10516.                   endif
10516.                endif
10523.                $I_L10500_342 = 1 + $I_L10500_342
10521.                if ( $I_L10500_342 >= n_viewing_level ) exit
10521.             enddo
10519.             if ( n_profile > 0 ) then
10500.                $I_L10500_330 = 0
10500.                do
10519.                   $I_L10519_310 = 0
10519. !dir$ ivdep
10519.                   do
10520.                      planck_radiance(1 + $I_L10519_310, 1 + $I_L10500_330) = 3.1830988618379069e-1 * planck_radiance(1 + $I_L10519_310, 1 + $I_L10500_330)
10521.                      $I_L10519_310 = 1 + $I_L10519_310
10519.                      if ( $I_L10519_310 >= n_profile ) exit
10519.                   enddo
10523.                   $I_L10500_330 = 1 + $I_L10500_330
10521.                   if ( $I_L10500_330 >= n_viewing_level ) exit
10521.                enddo
10521.             endif
10521.          endif
10521.       endif
10562.       if ( nd_layer >= 0 ) then
10563.          if ( nd_profile > 0 ) then
10570.             $SC_thermal_coefficient_I1 = thermal_coefficient(n_deg_fit)
10562.             $I_L10562_312 = 0
10562.             do
10563.                $I_L10563_280 = 0
10563. !dir$ ivdep
10563.                do
10564.                   t_ratio2(1 + $I_L10563_280, $I_L10562_312) = ( t_level(1 + $I_L10563_280, $I_L10562_312) * 1.0/t_ref_planck )
10570.                   planck_flux(1 + $I_L10563_280, $I_L10562_312) = $SC_thermal_coefficient_I1
10565.                   $I_L10563_280 = 1 + $I_L10563_280
10563.                   if ( $I_L10563_280 >= nd_profile ) exit
10563.                enddo
10566.                $I_L10562_312 = 1 + $I_L10562_312
10565.                if ( $I_L10562_312 >= 1 + nd_layer ) exit
10565.             enddo
10565.          endif
10565.       endif
10575.       if ( n_deg_fit > 0 ) then
10576.          if ( nd_layer >= 0 ) then
10577.             if ( nd_profile > 0 ) then
10576.                $I_L10576_354 = 0
10576.                do
10577.                   $I_L10577_350 = 0
10577.                   do
10576.                      $I_L10576_344 = 0
10576. !dir$ blocking_size( 64, 64 )
10576.                      do
10577.                         $I_L10577_314 = 0
10577. !dir$ ivdep
10577. !dir$ blocking_size( 64, 64 )
10577.                         do
10575.                            $SCA_t_ratio2_I8 = t_ratio2($I_L10577_314 + 64 * $I_L10577_350 + 1, $I_L10576_344 + 64 * $I_L10576_354)
10575.                            $SCA_planck_flux_I9 = planck_flux($I_L10577_314 + 64 * $I_L10577_350 + 1, $I_L10576_344 + 64 * $I_L10576_354)
10575.                            $I_L10575_282 = 0
10575.                            do
10578.                               $SCA_planck_flux_I9 = $SCA_planck_flux_I9 * $SCA_t_ratio2_I8 + thermal_coefficient(n_deg_fit + -$I_L10575_282 + -1)
10583.                               $I_L10575_282 = 1 + $I_L10575_282
10577.                               if ( $I_L10575_282 >= n_deg_fit ) exit
10577.                            enddo
10575.                            planck_flux($I_L10577_314 + 64 * $I_L10577_350 + 1, $I_L10576_344 + 64 * $I_L10576_354) = $SCA_planck_flux_I9
10577.                            $I_L10577_314 = 1 + $I_L10577_314
10581.                            if ( $I_L10577_314 >= min( nd_profile, 64 + 64 * $I_L10577_350 ) + -64 * $I_L10577_350 ) exit
10581.                         enddo
10576.                         $I_L10576_344 = 1 + $I_L10576_344
10576.                         if ( $I_L10576_344 >= min( 1 + nd_layer, 64 + 64 * $I_L10576_354 ) + -64 * $I_L10576_354 ) exit
10576.                      enddo
10577.                      $I_L10577_350 = 1 + $I_L10577_350
10582.                      if ( $I_L10577_350 >= 1 + max( 0, -1 + _rsh( 63 + nd_profile, 6 ) ) ) exit
10582.                   enddo
10576.                   $I_L10576_354 = 1 + $I_L10576_354
10576.                   if ( $I_L10576_354 >= 1 + max( 0, -1 + _rsh( 64 + nd_layer, 6 ) ) ) exit
10576.                enddo
10576.             endif
10576.          endif
10576.       endif
10585.       if ( nd_layer > 0 ) then
10586.          if ( nd_profile > 0 ) then
10586.             $I_L10586_336 = 0
10586.             do
10585.                $I_L10585_332 = 0
10585.                if ( nd_layer >= 4 ) then
10585.                   $I_L10585_364 = 0
10585. !dir$ blocking_size( 0, 0 )
10585.                   do
10586.                      $I_L10586_284 = 0
10586. !dir$ ivdep
10586. !dir$ blocking_size( 1024, 1024 )
10586.                      do
10587.                         diff_planck($I_L10586_284 + 1024 * $I_L10586_336 + 1, 1 + 4 * $I_L10585_364) = planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 1 + 4 * $I_L10585_364) + -planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 4 * $I_L10585_364)
10587.                         diff_planck($I_L10586_284 + 1024 * $I_L10586_336 + 1, 2 + 4 * $I_L10585_364) = planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 2 + 4 * $I_L10585_364) + -planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 1 + 4 * $I_L10585_364)
10587.                         diff_planck($I_L10586_284 + 1024 * $I_L10586_336 + 1, 3 + 4 * $I_L10585_364) = planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 3 + 4 * $I_L10585_364) + -planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 2 + 4 * $I_L10585_364)
10587.                         diff_planck($I_L10586_284 + 1024 * $I_L10586_336 + 1, 4 + 4 * $I_L10585_364) = planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 4 + 4 * $I_L10585_364) + -planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, 3 + 4 * $I_L10585_364)
10586.                         $I_L10586_284 = 1 + $I_L10586_284
10586.                         if ( $I_L10586_284 >= min( nd_profile, 1024 + 1024 * $I_L10586_336 ) + -1024 * $I_L10586_336 ) exit
10586.                      enddo
10590.                      $I_L10585_364 = 1 + $I_L10585_364
10590.                      if ( $I_L10585_364 >= _rsh( nd_layer, 2 ) ) exit
10590.                   enddo
10590.                   $I_L10585_332 = and( 0xfffffffffffffffcUL, nd_layer )
10590.                endif
10585.                if ( $I_L10585_332 < nd_layer ) then
10585.                   $I_L10585_358 = 0
10585. !dir$ blocking_size( 0, 0 )
10585.                   do
10586.                      $I_L10586_284 = 0
10586. !dir$ ivdep
10586. !dir$ blocking_size( 1024, 1024 )
10586.                      do
10587.                         diff_planck($I_L10586_284 + 1024 * $I_L10586_336 + 1, $I_L10585_332 + $I_L10585_358 + 1) = planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, $I_L10585_332 + $I_L10585_358 + 1) + -planck_flux($I_L10586_284 + 1024 * $I_L10586_336 + 1, $I_L10585_332 + $I_L10585_358)
10586.                         $I_L10586_284 = 1 + $I_L10586_284
10586.                         if ( $I_L10586_284 >= min( nd_profile, 1024 + 1024 * $I_L10586_336 ) + -1024 * $I_L10586_336 ) exit
10586.                      enddo
10590.                      $I_L10585_358 = 1 + $I_L10585_358
10590.                      if ( $I_L10585_358 >= nd_layer + -$I_L10585_332 ) exit
10590.                   enddo
10590.                endif
10586.                $I_L10586_336 = 1 + $I_L10586_336
10589.                if ( $I_L10586_336 >= 1 + max( 0, -1 + _rsh( 1023 + nd_profile, 10 ) ) ) exit
10589.             enddo
10589.          endif
10589.       endif
10594.       if ( l_ir_source_quad ) then
10620.          if ( nd_layer > 0 ) then
10621.             if ( nd_profile > 0 ) then
10623.                $SC_thermal_coefficient_I1 = thermal_coefficient(n_deg_fit)
10620.                $I_L10620_317 = 0
10620.                do
10621.                   $I_L10621_287 = 0
10621. !dir$ ivdep
10621.                   do
10622.                      t_ratio2(1 + $I_L10621_287, 1 + $I_L10620_317) = ( t(1 + $I_L10621_287, 1 + $I_L10620_317) * 1.0/t_ref_planck )
10623.                      diff_planck_2(1 + $I_L10621_287, 1 + $I_L10620_317) = $SC_thermal_coefficient_I1
10625.                      $I_L10621_287 = 1 + $I_L10621_287
10621.                      if ( $I_L10621_287 >= nd_profile ) exit
10621.                   enddo
10626.                   $I_L10620_317 = 1 + $I_L10620_317
10625.                   if ( $I_L10620_317 >= nd_layer ) exit
10625.                enddo
10625.             endif
10625.          endif
10628.          if ( n_deg_fit > 0 ) then
10629.             if ( nd_layer > 0 ) then
10630.                if ( nd_profile > 0 ) then
10629.                   $I_L10629_356 = 0
10629.                   do
10630.                      $I_L10630_352 = 0
10630.                      do
10629.                         $I_L10629_347 = 0
10629. !dir$ blocking_size( 64, 64 )
10629.                         do
10630.                            $I_L10630_319 = 0
10630. !dir$ ivdep
10630. !dir$ blocking_size( 64, 64 )
10630.                            do
10628.                               $SCA_diff_planck_I2 = diff_planck_2($I_L10630_319 + 64 * $I_L10630_352 + 1, $I_L10629_347 + 64 * $I_L10629_356 + 1)
10628.                               $SCA_t_ratio2_I10 = t_ratio2($I_L10630_319 + 64 * $I_L10630_352 + 1, $I_L10629_347 + 64 * $I_L10629_356 + 1)
10628.                               $I_L10628_289 = 0
10628.                               do
10631.                                  $SCA_diff_planck_I2 = $SCA_diff_planck_I2 * $SCA_t_ratio2_I10 + thermal_coefficient(n_deg_fit + -$I_L10628_289 + -1)
10636.                                  $I_L10628_289 = 1 + $I_L10628_289
10630.                                  if ( $I_L10628_289 >= n_deg_fit ) exit
10630.                               enddo
10628.                               diff_planck_2($I_L10630_319 + 64 * $I_L10630_352 + 1, $I_L10629_347 + 64 * $I_L10629_356 + 1) = $SCA_diff_planck_I2
10630.                               $I_L10630_319 = 1 + $I_L10630_319
10634.                               if ( $I_L10630_319 >= min( nd_profile, 64 + 64 * $I_L10630_352 ) + -64 * $I_L10630_352 ) exit
10634.                            enddo
10629.                            $I_L10629_347 = 1 + $I_L10629_347
10629.                            if ( $I_L10629_347 >= min( nd_layer, 64 + 64 * $I_L10629_356 ) + -64 * $I_L10629_356 ) exit
10629.                         enddo
10630.                         $I_L10630_352 = 1 + $I_L10630_352
10635.                         if ( $I_L10630_352 >= 1 + max( 0, -1 + _rsh( 63 + nd_profile, 6 ) ) ) exit
10635.                      enddo
10629.                      $I_L10629_356 = 1 + $I_L10629_356
10629.                      if ( $I_L10629_356 >= 1 + max( 0, -1 + _rsh( 63 + nd_layer, 6 ) ) ) exit
10629.                   enddo
10629.                endif
10629.             endif
10629.          endif
10638.          if ( nd_layer > 0 ) then
10639.             if ( nd_profile > 0 ) then
10639.                $I_L10639_338 = 0
10639.                do
10638.                   $I_L10638_334 = 0
10638.                   if ( nd_layer >= 4 ) then
10638.                      $I_L10638_366 = 0
10638. !dir$ blocking_size( 0, 0 )
10638.                      do
10639.                         $I_L10639_291 = 0
10639. !dir$ ivdep
10639. !dir$ blocking_size( 512, 512 )
10639.                         do
10640.                            diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 1 + 4 * $I_L10638_366) = 2.0 * ( planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 1 + 4 * $I_L10638_366) + planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 4 * $I_L10638_366) + -2.0 * diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 1 + 4 * $I_L10638_366) )
10640.                            diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 2 + 4 * $I_L10638_366) = 2.0 * ( planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 2 + 4 * $I_L10638_366) + planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 1 + 4 * $I_L10638_366) + -2.0 * diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 2 + 4 * $I_L10638_366) )
10640.                            diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 3 + 4 * $I_L10638_366) = 2.0 * ( planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 3 + 4 * $I_L10638_366) + planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 2 + 4 * $I_L10638_366) + -2.0 * diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 3 + 4 * $I_L10638_366) )
10640.                            diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 4 + 4 * $I_L10638_366) = 2.0 * ( planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 4 + 4 * $I_L10638_366) + planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, 3 + 4 * $I_L10638_366) + -2.0 * diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, 4 + 4 * $I_L10638_366) )
10639.                            $I_L10639_291 = 1 + $I_L10639_291
10639.                            if ( $I_L10639_291 >= min( nd_profile, 512 + 512 * $I_L10639_338 ) + -512 * $I_L10639_338 ) exit
10639.                         enddo
10643.                         $I_L10638_366 = 1 + $I_L10638_366
10643.                         if ( $I_L10638_366 >= _rsh( nd_layer, 2 ) ) exit
10643.                      enddo
10643.                      $I_L10638_334 = and( 0xfffffffffffffffcUL, nd_layer )
10643.                   endif
10638.                   if ( $I_L10638_334 < nd_layer ) then
10638.                      $I_L10638_361 = 0
10638. !dir$ blocking_size( 0, 0 )
10638.                      do
10639.                         $I_L10639_291 = 0
10639. !dir$ ivdep
10639. !dir$ blocking_size( 512, 512 )
10639.                         do
10640.                            diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, $I_L10638_334 + $I_L10638_361 + 1) = 2.0 * ( planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, $I_L10638_334 + $I_L10638_361 + 1) + planck_flux($I_L10639_291 + 512 * $I_L10639_338 + 1, $I_L10638_334 + $I_L10638_361) + -2.0 * diff_planck_2($I_L10639_291 + 512 * $I_L10639_338 + 1, $I_L10638_334 + $I_L10638_361 + 1) )
10639.                            $I_L10639_291 = 1 + $I_L10639_291
10639.                            if ( $I_L10639_291 >= min( nd_profile, 512 + 512 * $I_L10639_338 ) + -512 * $I_L10639_338 ) exit
10639.                         enddo
10643.                         $I_L10638_361 = 1 + $I_L10638_361
10643.                         if ( $I_L10638_361 >= nd_layer + -$I_L10638_334 ) exit
10643.                      enddo
10643.                   endif
10639.                   $I_L10639_338 = 1 + $I_L10639_338
10642.                   if ( $I_L10639_338 >= 1 + max( 0, -1 + _rsh( 511 + nd_profile, 9 ) ) ) exit
10642.                enddo
10642.             endif
10642.          endif
10642.       endif
10648.       if ( n_profile > 0 ) then
10650.          $SC_thermal_coefficient_I0 = thermal_coefficient(n_deg_fit)
10648.          $I_L10648_294 = 0
10648. !dir$ ivdep
10648.          do
10649.             t_ratio(1 + $I_L10648_294) = ( t_ground(1 + $I_L10648_294) * 1.0/t_ref_planck )
10650.             planck_ground(1 + $I_L10648_294) = $SC_thermal_coefficient_I0
10651.             $I_L10648_294 = 1 + $I_L10648_294
10648.             if ( $I_L10648_294 >= n_profile ) exit
10648.          enddo
10648.       endif
10652.       if ( n_deg_fit > 0 ) then
10653.          if ( n_profile > 0 ) then
10653.             $I_L10653_322 = 0
10653. !dir$ ivdep
10653.             do
10652.                $SCA_planck_ground_I3 = planck_ground(1 + $I_L10653_322)
10652.                $SCA_t_ratio_I11 = t_ratio(1 + $I_L10653_322)
10652.                $I_L10652_296 = 0
10652.                do
10654.                   $SCA_planck_ground_I3 = $SCA_planck_ground_I3 * $SCA_t_ratio_I11 + thermal_coefficient(n_deg_fit + -$I_L10652_296 + -1)
10657.                   $I_L10652_296 = 1 + $I_L10652_296
10653.                   if ( $I_L10652_296 >= n_deg_fit ) exit
10653.                enddo
10652.                planck_ground(1 + $I_L10653_322) = $SCA_planck_ground_I3
10656.                $I_L10653_322 = 1 + $I_L10653_322
10656.                if ( $I_L10653_322 >= n_profile ) exit
10656.             enddo
10656.          endif
10656.       endif
10665.       if ( l_tile ) then
10667.          if ( n_tile > 0 ) then
10667.             $I_L10667_340 = 0
10667.             do
10668.                if ( n_point_tile > 0 ) then
10670.                   $SC_thermal_coefficient_I14 = thermal_coefficient(n_deg_fit)
10668.                   $I_L10668_298 = 0
10668. !dir$ ivdep
10668.                   do
10669.                      t_ratio(1 + $I_L10668_298) = ( t_tile(1 + $I_L10668_298, 1 + $I_L10667_340) * 1.0/t_ref_planck )
10670.                      planck_flux_tile(1 + $I_L10668_298, 1 + $I_L10667_340) = $SC_thermal_coefficient_I14
10671.                      $I_L10668_298 = 1 + $I_L10668_298
10668.                      if ( $I_L10668_298 >= n_point_tile ) exit
10668.                   enddo
10668.                endif
10672.                if ( n_deg_fit > 0 ) then
10673.                   if ( n_point_tile > 0 ) then
10673.                      $I_L10673_324 = 0
10673. !dir$ ivdep
10673.                      do
10672.                         $SCA_t_ratio_I4 = t_ratio(1 + $I_L10673_324)
10672.                         $SCA_planck_flux_tile_I5 = planck_flux_tile(1 + $I_L10673_324, 1 + $I_L10667_340)
10672.                         $I_L10672_300 = 0
10672.                         do
10674.                            $SCA_planck_flux_tile_I5 = $SCA_planck_flux_tile_I5 * $SCA_t_ratio_I4 + thermal_coefficient(n_deg_fit + -$I_L10672_300 + -1)
10677.                            $I_L10672_300 = 1 + $I_L10672_300
10673.                            if ( $I_L10672_300 >= n_deg_fit ) exit
10673.                         enddo
10672.                         planck_flux_tile(1 + $I_L10673_324, 1 + $I_L10667_340) = $SCA_planck_flux_tile_I5
10676.                         $I_L10673_324 = 1 + $I_L10673_324
10676.                         if ( $I_L10673_324 >= n_point_tile ) exit
10676.                      enddo
10676.                   endif
10676.                endif
10678.                $I_L10667_340 = 1 + $I_L10667_340
10677.                if ( $I_L10667_340 >= n_tile ) exit
10677.             enddo
10677.          endif
10680.          if ( n_point_tile > 0 ) then
10680.             $I_L10680_302 = 0
10680. !dir$ ivdep
10680.             do
10681.                planck_ground(list_tile(1 + $I_L10680_302)) = frac_tile(1 + $I_L10680_302, 1) * planck_flux_tile(1 + $I_L10680_302, 1)
10683.                $I_L10680_302 = 1 + $I_L10680_302
10680.                if ( $I_L10680_302 >= n_point_tile ) exit
10680.             enddo
10680.          endif
10684.          if ( -2 + n_tile >= 0 ) then
10685.             if ( n_point_tile > 0 ) then
10684.                $I_L10684_326 = 0
10684.                do
10685.                   $I_L10685_304 = 0
10685. !dir$ ivdep
10685.                   do
10686.                      planck_ground(list_tile(1 + $I_L10685_304)) = _vu_plus( planck_ground(list_tile(1 + $I_L10685_304)), frac_tile(1 + $I_L10685_304, 2 + $I_L10684_326) * planck_flux_tile(1 + $I_L10685_304, 2 + $I_L10684_326) )
10688.                      $I_L10685_304 = 1 + $I_L10685_304
10685.                      if ( $I_L10685_304 >= n_point_tile ) exit
10685.                   enddo
10689.                   $I_L10684_326 = 1 + $I_L10684_326
10688.                   if ( $I_L10684_326 >= -1 + n_tile ) exit
10688.                enddo
10688.             endif
10688.          endif
10688.       endif
10368.       _free( t$2268 )
10696.       return
10696.       end
10696.       
10966.       
10966.       subroutine eigenvalue_tri( n_matrix, n_in, d, e, tol, n_max_iteration, nd_matrix )
10720.       t$386 = nd_matrix
10720.       t$387 = n_in
10754.       t$2274 = _zla( 0, nd_matrix )
10720.       t$2275 = _zla( 0, nd_matrix )
10754.       t$2276 = _zla( 0, n_in )
10720.       t$2277 = _zla( 0, nd_matrix ) * _zla( 0, n_in )
10720.       t$388 = n_matrix
10794.       t$2278 = _zla( 0, n_matrix )
10794.       t$2281 = 8 * _zla( 0, n_matrix )
10776.       t$2282 = 8 * _zla( 0, n_matrix )
10776.       t$2284 = 16 * _zla( 0, n_matrix )
10774.       t$2285 = 16 * _zla( 0, n_matrix )
10774.       t$2287 = 24 * _zla( 0, n_matrix )
10792.       t$2288 = 24 * _zla( 0, n_matrix )
10792.       t$2290 = 32 * _zla( 0, n_matrix )
10800.       t$2291 = 32 * _zla( 0, n_matrix )
10800.       t$2293 = 40 * _zla( 0, n_matrix )
10802.       t$2294 = 40 * _zla( 0, n_matrix )
10802.       t$2296 = 48 * _zla( 0, n_matrix )
10720.       t$2279 = int( _alloc( 48 * _zla( 0, n_matrix ) ), 8 )
10794.       t$2280 = t$2279
10776.       t$2283 = t$2279 + 8 * _zla( 0, n_matrix )
10774.       t$2286 = t$2279 + 16 * _zla( 0, n_matrix )
10792.       t$2289 = t$2279 + 24 * _zla( 0, n_matrix )
10800.       t$2292 = t$2279 + 32 * _zla( 0, n_matrix )
10802.       t$2295 = t$2279 + 40 * _zla( 0, n_matrix )
10816.       $n_S2 = n_in
10817.       abs_e = 0.0
10818.       if ( n_matrix > 0 ) then
10818.          $I_L10818_116 = 0
10818. !dir$ ivdep
10818.          do
10819.             abs_e = max( abs_e, abs( e(1 + $I_L10818_116, n_in) ) )
10830.             shift(1 + $I_L10818_116) = 0.0
10820.             $I_L10818_116 = 1 + $I_L10818_116
10818.             if ( $I_L10818_116 >= n_matrix ) exit
10818.          enddo
10818.       endif
10821.       if ( n_in > 1 .and. abs_e < tol ) then
10823.          if ( n_matrix > 0 ) then
10821.             do
10822.                $n_S2 = -1 + $n_S2
10823.                $I_L10823_118 = 0
10823. !dir$ ivdep
10823.                do
10824.                   abs_e = max( abs_e, abs( e(1 + $I_L10823_118, $n_S2) ) )
10825.                   $I_L10823_118 = 1 + $I_L10823_118
10823.                   if ( $I_L10823_118 >= n_matrix ) exit
10823.                enddo
10825.                if ( ( $n_S2 > 1 .and. abs_e < tol ) == 0 ) exit
10825.             enddo
10825.          else
10821.             do
10822.                $n_S2 = -1 + $n_S2
10822.                if ( ( $n_S2 > 1 .and. abs_e < tol ) == 0 ) exit
10822.             enddo
10822.          endif
10822.       endif
10828.       $iteration_S4 = 0
10834.       if ( $n_S2 > 1 .and. 0 < n_max_iteration ) then
10834.          do
10837.             $iteration_S4 = 1 + $iteration_S4
10842.             if ( n_matrix > 0 ) then
10842.                $I_L10842_120 = 0
10842. !dir$ ivdep
10842.                do
10843.                   $b_S6 = d(1 + $I_L10842_120, -1 + $n_S2) + d(1 + $I_L10842_120, $n_S2)
10844.                   $c_S7 = d(1 + $I_L10842_120, -1 + $n_S2) * d(1 + $I_L10842_120, $n_S2) + -( e(1 + $I_L10842_120, $n_S2) * e(1 + $I_L10842_120, $n_S2) )
10856.                   $d_shift_WR0_R0 = cvmg( ( $c_S7 * 1.0/( 5.0e-1 * ( $b_S6 + sign( _sqrt( $b_S6 * $b_S6 + -4.0 * $c_S7 ), $b_S6 ) ) ) ), ( 5.0e-1 * ( $b_S6 + sign( _sqrt( $b_S6 * $b_S6 + -4.0 * $c_S7 ), $b_S6 ) ) ), abs( ( 5.0e-1 * ( $b_S6 + sign( _sqrt( $b_S6 * $b_S6 + -4.0 * $c_S7 ), $b_S6 ) ) ) + -d(1 + $I_L10842_120, $n_S2) ) >= abs( ( $c_S7 * 1.0/( 5.0e-1 * ( $b_S6 + sign( _sqrt( $b_S6 * $b_S6 + -4.0 * $c_S7 ), $b_S6 ) ) ) ) + -d(1 + $I_L10842_120, $n_S2) ) )
10856.                   d_shift(1 + $I_L10842_120) = $d_shift_WR0_R0
10862.                   shift(1 + $I_L10842_120) = shift(1 + $I_L10842_120) + $d_shift_WR0_R0
10886.                   sup_diag(1 + $I_L10842_120) = e(1 + $I_L10842_120, 2)
10887.                   cosr(1 + $I_L10842_120) = 1.0
10888.                   sinr(1 + $I_L10842_120) = 0.0
10863.                   $I_L10842_120 = 1 + $I_L10842_120
10842.                   if ( $I_L10842_120 >= n_matrix ) exit
10842.                enddo
10842.             endif
10866.             if ( $n_S2 > 0 ) then
10867.                if ( n_matrix > 0 ) then
10866.                   $I_L10866_139 = 0
10866.                   if ( $n_S2 >= 4 ) then
10866.                      $I_L10866_148 = 0
10866. !dir$ blocking_size( 0, 0 )
10866.                      do
10867.                         $I_L10867_122 = 0
10867. !dir$ ivdep
10867. !dir$ blocking_size( 0, 0 )
10867.                         do
10868.                            d(1 + $I_L10867_122, 1 + 4 * $I_L10866_148) = d(1 + $I_L10867_122, 1 + 4 * $I_L10866_148) + -d_shift(1 + $I_L10867_122)
10868.                            d(1 + $I_L10867_122, 2 + 4 * $I_L10866_148) = d(1 + $I_L10867_122, 2 + 4 * $I_L10866_148) + -d_shift(1 + $I_L10867_122)
10868.                            d(1 + $I_L10867_122, 3 + 4 * $I_L10866_148) = d(1 + $I_L10867_122, 3 + 4 * $I_L10866_148) + -d_shift(1 + $I_L10867_122)
10868.                            d(1 + $I_L10867_122, 4 + 4 * $I_L10866_148) = d(1 + $I_L10867_122, 4 + 4 * $I_L10866_148) + -d_shift(1 + $I_L10867_122)
10869.                            $I_L10867_122 = 1 + $I_L10867_122
10867.                            if ( $I_L10867_122 >= n_matrix ) exit
10867.                         enddo
10870.                         $I_L10866_148 = 1 + $I_L10866_148
10869.                         if ( $I_L10866_148 >= _rsh( $n_S2, 2 ) ) exit
10869.                      enddo
10870.                      $I_L10866_139 = and( 0xfffffffffffffffcUL, $n_S2 )
10870.                   endif
10866.                   if ( $I_L10866_139 < $n_S2 ) then
10866.                      $I_L10866_145 = 0
10866. !dir$ blocking_size( 0, 0 )
10866.                      do
10867.                         $I_L10867_122 = 0
10867. !dir$ ivdep
10867. !dir$ blocking_size( 0, 0 )
10867.                         do
10868.                            d(1 + $I_L10867_122, $I_L10866_139 + $I_L10866_145 + 1) = d(1 + $I_L10867_122, $I_L10866_139 + $I_L10866_145 + 1) + -d_shift(1 + $I_L10867_122)
10869.                            $I_L10867_122 = 1 + $I_L10867_122
10867.                            if ( $I_L10867_122 >= n_matrix ) exit
10867.                         enddo
10870.                         $I_L10866_145 = 1 + $I_L10866_145
10869.                         if ( $I_L10866_145 >= $n_S2 + -$I_L10866_139 ) exit
10869.                      enddo
10869.                   endif
10869.                endif
10869.             endif
10891.             if ( -2 + $n_S2 >= 0 ) then
10893.                if ( n_matrix > 0 ) then
10922.                   if ( 0 < -2 + $n_S2 ) then
10893.                      $I_L10893_143 = 0
10893.                      do
10891.                         $I_L10891_141 = 0
10891.                         if ( -4 + $n_S2 >= 0 ) then
10891.                            $I_L10891_150 = 0
10891. !dir$ blocking_size( 0, 0 )
10891.                            do
10893.                               $I_L10893_124 = 0
10893. !dir$ ivdep
10893. !dir$ blocking_size( 256, 256 )
10893.                               do
10902.                                  $sq_S13 = _sqrt( d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + 2 * $I_L10891_150) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + 2 * $I_L10891_150) + e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) * e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) )
10903.                                  e($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + 2 * $I_L10891_150) = sinr($I_L10893_124 + 256 * $I_L10893_143 + 1) * $sq_S13
10904.                                  $LD_SPLT_P1 = e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150)
10904.                                  sinr($I_L10893_124 + 256 * $I_L10893_143 + 1) = ( $LD_SPLT_P1 * 1.0/$sq_S13 )
10905.                                  $cosr_temp_S14 = ( d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + 2 * $I_L10891_150) * 1.0/$sq_S13 )
10911.                                  $sup_diag_old_WR0_R2 = sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1)
10911.                                  sup_diag_old($I_L10893_124 + 256 * $I_L10893_143 + 1) = $sup_diag_old_WR0_R2
10912.                                  $sup_diag_WR0_R1 = $cosr_temp_S14 * $sup_diag_old_WR0_R2 + ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150)
10912.                                  sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1) = $sup_diag_WR0_R1
10913.                                  d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + 2 * $I_L10891_150) = cosr($I_L10893_124 + 256 * $I_L10893_143 + 1) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + 2 * $I_L10891_150) + ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_WR0_R1
10914.                                  cosr($I_L10893_124 + 256 * $I_L10893_143 + 1) = $cosr_temp_S14
10917.                                  $LD_SPLT_P7 = d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150)
10917.                                  d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) = -( ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_old_WR0_R2 ) + $cosr_temp_S14 * $LD_SPLT_P7
10918.                                  $LD_SPLT_P2 = e($I_L10893_124 + 256 * $I_L10893_143 + 1, 3 + 2 * $I_L10891_150)
10918.                                  sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1) = ( $cosr_temp_S14 * $LD_SPLT_P2 )
10902.                                  $sq_S13 = _sqrt( ( -( ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_old_WR0_R2 ) + $cosr_temp_S14 * $LD_SPLT_P7 ) * ( -( ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_old_WR0_R2 ) + $cosr_temp_S14 * $LD_SPLT_P7 ) + $LD_SPLT_P2 * $LD_SPLT_P2 )
10903.                                  e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) = sinr($I_L10893_124 + 256 * $I_L10893_143 + 1) * $sq_S13
10904.                                  $LD_SPLT_P1 = e($I_L10893_124 + 256 * $I_L10893_143 + 1, 3 + 2 * $I_L10891_150)
10904.                                  sinr($I_L10893_124 + 256 * $I_L10893_143 + 1) = ( $LD_SPLT_P1 * 1.0/$sq_S13 )
10905.                                  $cosr_temp_S14 = ( d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) * 1.0/$sq_S13 )
10911.                                  $sup_diag_old_WR0_R2 = sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1)
10911.                                  sup_diag_old($I_L10893_124 + 256 * $I_L10893_143 + 1) = $sup_diag_old_WR0_R2
10912.                                  $sup_diag_WR0_R1 = $cosr_temp_S14 * $sup_diag_old_WR0_R2 + ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 3 + 2 * $I_L10891_150)
10912.                                  sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1) = $sup_diag_WR0_R1
10913.                                  d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) = cosr($I_L10893_124 + 256 * $I_L10893_143 + 1) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + 2 * $I_L10891_150) + ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_WR0_R1
10914.                                  cosr($I_L10893_124 + 256 * $I_L10893_143 + 1) = $cosr_temp_S14
10917.                                  $LD_SPLT_P7 = d($I_L10893_124 + 256 * $I_L10893_143 + 1, 3 + 2 * $I_L10891_150)
10917.                                  d($I_L10893_124 + 256 * $I_L10893_143 + 1, 3 + 2 * $I_L10891_150) = -( ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_old_WR0_R2 ) + $cosr_temp_S14 * $LD_SPLT_P7
10918.                                  $LD_SPLT_P2 = e($I_L10893_124 + 256 * $I_L10893_143 + 1, 4 + 2 * $I_L10891_150)
10918.                                  sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1) = ( $cosr_temp_S14 * $LD_SPLT_P2 )
10893.                                  $I_L10893_124 = 1 + $I_L10893_124
10918.                                  if ( $I_L10893_124 >= min( n_matrix, 256 + 256 * $I_L10893_143 ) + -256 * $I_L10893_143 ) exit
10918.                               enddo
10922.                               $I_L10891_150 = 1 + $I_L10891_150
10922.                               if ( $I_L10891_150 >= _rsh( -2 + $n_S2, 1 ) ) exit
10922.                            enddo
10922.                            $I_L10891_141 = and( 0xfffffffffffffffeUL, -2 + $n_S2 )
10922.                         endif
10891.                         if ( $I_L10891_141 < -2 + $n_S2 ) then
10893.                            $I_L10893_124 = 0
10893. !dir$ ivdep
10893. !dir$ blocking_size( 256, 256 )
10893.                            do
10902.                               $sq_S13 = _sqrt( d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + $I_L10891_141) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + $I_L10891_141) + e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + $I_L10891_141) * e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + $I_L10891_141) )
10903.                               e($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + $I_L10891_141) = sinr($I_L10893_124 + 256 * $I_L10893_143 + 1) * $sq_S13
10904.                               $LD_SPLT_P1 = e($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + $I_L10891_141)
10904.                               sinr($I_L10893_124 + 256 * $I_L10893_143 + 1) = ( $LD_SPLT_P1 * 1.0/$sq_S13 )
10905.                               $cosr_temp_S14 = ( d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + $I_L10891_141) * 1.0/$sq_S13 )
10911.                               $sup_diag_old_WR0_R2 = sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1)
10911.                               sup_diag_old($I_L10893_124 + 256 * $I_L10893_143 + 1) = $sup_diag_old_WR0_R2
10912.                               $sup_diag_WR0_R1 = $cosr_temp_S14 * $sup_diag_old_WR0_R2 + ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + $I_L10891_141)
10912.                               sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1) = $sup_diag_WR0_R1
10913.                               d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + $I_L10891_141) = cosr($I_L10893_124 + 256 * $I_L10893_143 + 1) * d($I_L10893_124 + 256 * $I_L10893_143 + 1, 1 + $I_L10891_141) + ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_WR0_R1
10914.                               cosr($I_L10893_124 + 256 * $I_L10893_143 + 1) = $cosr_temp_S14
10917.                               $LD_SPLT_P7 = d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + $I_L10891_141)
10917.                               d($I_L10893_124 + 256 * $I_L10893_143 + 1, 2 + $I_L10891_141) = -( ( $LD_SPLT_P1 * 1.0/$sq_S13 ) * $sup_diag_old_WR0_R2 ) + $cosr_temp_S14 * $LD_SPLT_P7
10918.                               $LD_SPLT_P2 = e($I_L10893_124 + 256 * $I_L10893_143 + 1, 3 + $I_L10891_141)
10918.                               sup_diag($I_L10893_124 + 256 * $I_L10893_143 + 1) = ( $cosr_temp_S14 * $LD_SPLT_P2 )
10893.                               $I_L10893_124 = 1 + $I_L10893_124
10918.                               if ( $I_L10893_124 >= min( n_matrix, 256 + 256 * $I_L10893_143 ) + -256 * $I_L10893_143 ) exit
10918.                            enddo
10918.                         endif
10893.                         $I_L10893_143 = 1 + $I_L10893_143
10920.                         if ( $I_L10893_143 >= 1 + max( 0, -1 + _rsh( 255 + n_matrix, 8 ) ) ) exit
10920.                      enddo
10920.                   endif
10893.                   $I_L10893_137 = 0
10893. !dir$ ivdep
10893.                   do
10902.                      $sq_S13 = _sqrt( d(1 + $I_L10893_137, -1 + $n_S2) * d(1 + $I_L10893_137, -1 + $n_S2) + e(1 + $I_L10893_137, $n_S2) * e(1 + $I_L10893_137, $n_S2) )
10903.                      e(1 + $I_L10893_137, -1 + $n_S2) = sinr(1 + $I_L10893_137) * $sq_S13
10904.                      $LD_SPLT_P8 = e(1 + $I_L10893_137, $n_S2)
10904.                      sinr(1 + $I_L10893_137) = ( $LD_SPLT_P8 * 1.0/$sq_S13 )
10905.                      $cosr_temp_S14 = ( d(1 + $I_L10893_137, -1 + $n_S2) * 1.0/$sq_S13 )
10911.                      sup_diag_old(1 + $I_L10893_137) = sup_diag(1 + $I_L10893_137)
10912.                      $sup_diag_WR0_R3 = $cosr_temp_S14 * sup_diag(1 + $I_L10893_137) + ( $LD_SPLT_P8 * 1.0/$sq_S13 ) * d(1 + $I_L10893_137, $n_S2)
10912.                      sup_diag(1 + $I_L10893_137) = $sup_diag_WR0_R3
10913.                      d(1 + $I_L10893_137, -1 + $n_S2) = cosr(1 + $I_L10893_137) * d(1 + $I_L10893_137, -1 + $n_S2) + ( $LD_SPLT_P8 * 1.0/$sq_S13 ) * $sup_diag_WR0_R3
10914.                      cosr(1 + $I_L10893_137) = $cosr_temp_S14
10917.                      $LD_SPLT_P12 = sup_diag_old(1 + $I_L10893_137)
10917.                      $LD_SPLT_P14 = d(1 + $I_L10893_137, $n_S2)
10917.                      d(1 + $I_L10893_137, $n_S2) = -( ( $LD_SPLT_P8 * 1.0/$sq_S13 ) * $LD_SPLT_P12 ) + $cosr_temp_S14 * $LD_SPLT_P14
10920.                      $I_L10893_137 = 1 + $I_L10893_137
10918.                      if ( $I_L10893_137 >= n_matrix ) exit
10918.                   enddo
10918.                endif
10918.             endif
10924.             if ( n_matrix > 0 ) then
10924.                $I_L10924_127 = 0
10924. !dir$ ivdep
10924.                do
10925.                   e(1 + $I_L10924_127, $n_S2) = sinr(1 + $I_L10924_127) * d(1 + $I_L10924_127, $n_S2)
10926.                   d(1 + $I_L10924_127, $n_S2) = cosr(1 + $I_L10924_127) * d(1 + $I_L10924_127, $n_S2)
10927.                   $I_L10924_127 = 1 + $I_L10924_127
10924.                   if ( $I_L10924_127 >= n_matrix ) exit
10924.                enddo
10924.             endif
10932.             abs_e = 0.0
10933.             if ( n_matrix > 0 ) then
10933.                $I_L10933_129 = 0
10933. !dir$ ivdep
10933.                do
10934.                   abs_e = max( abs_e, abs( e(1 + $I_L10933_129, $n_S2) ) )
10935.                   $I_L10933_129 = 1 + $I_L10933_129
10933.                   if ( $I_L10933_129 >= n_matrix ) exit
10933.                enddo
10933.             endif
10936.             if ( $n_S2 > 1 .and. abs_e < tol ) then
10937.                if ( n_matrix > 0 ) then
10936.                   do
10937.                      $I_L10937_131 = 0
10937. !dir$ ivdep
10937.                      do
10938.                         d(1 + $I_L10937_131, $n_S2) = d(1 + $I_L10937_131, $n_S2) + shift(1 + $I_L10937_131)
10939.                         $I_L10937_131 = 1 + $I_L10937_131
10937.                         if ( $I_L10937_131 >= n_matrix ) exit
10937.                      enddo
10940.                      $n_S2 = -1 + $n_S2
10941.                      $I_L10941_133 = 0
10941. !dir$ ivdep
10941.                      do
10942.                         abs_e = max( abs_e, abs( e(1 + $I_L10941_133, $n_S2) ) )
10943.                         $I_L10941_133 = 1 + $I_L10941_133
10941.                         if ( $I_L10941_133 >= n_matrix ) exit
10941.                      enddo
10943.                      if ( ( $n_S2 > 1 .and. abs_e < tol ) == 0 ) exit
10943.                   enddo
10943.                else
10936.                   do
10940.                      $n_S2 = -1 + $n_S2
10940.                      if ( ( $n_S2 > 1 .and. abs_e < tol ) == 0 ) exit
10940.                   enddo
10940.                endif
10940.             endif
10944.             if ( ( $n_S2 > 1 .and. $iteration_S4 < n_max_iteration ) == 0 ) exit
10944.          enddo
10944.       endif
10951.       if ( $n_S2 > 1 ) then
10952.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$390,  _substr(t$389,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Warning: Convergence has not occurred while calculating eigenvalues.', 0x800600000000L ), _iotype( 'the calculation continues.', 0x800600000000L ) ) )
10956.       else if ( n_matrix > 0 ) then
10958.          $I_L10958_135 = 0
10958. !dir$ ivdep
10958.          do
10959.             d(1 + $I_L10958_135, 1) = d(1 + $I_L10958_135, 1) + shift(1 + $I_L10958_135)
10960.             $I_L10958_135 = 1 + $I_L10958_135
10958.             if ( $I_L10958_135 >= n_matrix ) exit
10958.          enddo
10958.       endif
10720.       _free( t$2279 )
10966.       return
10966.       end
10966.       
11189.       
11189.       subroutine eig_sys( n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff, sqs, mu, eig_vec, nd_profile, nd_red_eigensystem, nd_max_order )
10992.       t$393 = ( ls_trunc + -ms + 1 )
11029.       t$2297 = _zla( 0, ( ls_trunc + -ms + 1 ) )
10992.       t$394 = nd_profile
10992.       t$395 = nd_max_order
11031.       t$2298 = _zla( 0, nd_profile )
10992.       t$2299 = _zla( 0, nd_profile )
10992.       t$2300 = 1 + nd_max_order
11031.       t$2301 = _zla( 0, 1 + nd_max_order )
10992.       t$2302 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order )
10992.       t$396 = nd_red_eigensystem
11034.       t$2303 = _zla( 0, nd_red_eigensystem )
10992.       t$2304 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem )
10992.       t$397 = ( 2 * nd_red_eigensystem )
11036.       t$2305 = _zla( 0, ( 2 * nd_red_eigensystem ) )
10992.       t$2306 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
10992.       t$2307 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
11061.       t$2310 = 8 * _zla( 0, nd_profile )
10992.       t$399 = n_red_eigensystem
11057.       t$2311 = _zla( 0, n_red_eigensystem )
10992.       t$2312 = _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem )
11057.       t$2313 = 8 * _zla( 0, nd_profile )
11057.       t$2315 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8
10992.       t$398 = ( 2 * n_red_eigensystem )
11055.       t$2316 = _zla( 0, ( 2 * n_red_eigensystem ) )
10992.       t$2317 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) )
11055.       t$2318 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8
11055.       t$2320 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8
11059.       t$2321 = _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8 + 8 * _zla( 0, nd_profile )
11059.       t$2323 = _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8 + 16 * _zla( 0, nd_profile )
11064.       t$2324 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8 + 16 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8
11064.       t$2326 = _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8 + 24 * _zla( 0, nd_profile )
10992.       t$2308 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8 + 24 * _zla( 0, nd_profile ) ), 8 )
11061.       t$2309 = t$2308
11057.       t$2314 = t$2308 + 8 * _zla( 0, nd_profile )
11055.       t$2319 = t$2308 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8
11059.       t$2322 = t$2308 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8
11064.       t$2325 = t$2308 + _zla( 0, nd_profile ) * _zla( 0, n_red_eigensystem ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 * n_red_eigensystem ) ) * 8 + 16 * _zla( 0, nd_profile )
11072.       tol = 2.2204460492503131e-14
11080.       if ( ls_trunc + -ms > 0 ) then
11082.          if ( n_profile > 0 ) then
11082.             $I_L11082_179 = 0
11082.             do
11080.                $I_L11080_173 = 0
11080.                if ( ls_trunc + -ms >= 4 ) then
11080.                   $I_L11080_196 = 0
11080. !dir$ blocking_size( 0, 0 )
11080.                   do
11082.                      $SCA_cg_coeff#1_U0 = cg_coeff(1 + 4 * $I_L11080_196)
11082.                      $SCA_cg_coeff#2_U1 = cg_coeff(2 + 4 * $I_L11080_196)
11082.                      $SCA_cg_coeff#3_U2 = cg_coeff(3 + 4 * $I_L11080_196)
11082.                      $SCA_cg_coeff#4_U3 = cg_coeff(4 + 4 * $I_L11080_196)
11082.                      $I_L11082_146 = 0
11082. !dir$ ivdep
11082. !dir$ blocking_size( 512, 512 )
11082.                      do
11083.                         ec($I_L11082_146 + 512 * $I_L11082_179 + 1, 2 + 4 * $I_L11080_196) = ( $SCA_cg_coeff#1_U0 * 1.0/( sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 1) * sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196) ) )
11083.                         ec($I_L11082_146 + 512 * $I_L11082_179 + 1, 3 + 4 * $I_L11080_196) = ( $SCA_cg_coeff#2_U1 * 1.0/( sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 2) * sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 1) ) )
11083.                         ec($I_L11082_146 + 512 * $I_L11082_179 + 1, 4 + 4 * $I_L11080_196) = ( $SCA_cg_coeff#3_U2 * 1.0/( sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 3) * sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 2) ) )
11083.                         ec($I_L11082_146 + 512 * $I_L11082_179 + 1, 5 + 4 * $I_L11080_196) = ( $SCA_cg_coeff#4_U3 * 1.0/( sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 4) * sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + 4 * $I_L11080_196 + 3) ) )
11082.                         $I_L11082_146 = 1 + $I_L11082_146
11082.                         if ( $I_L11082_146 >= min( n_profile, 512 + 512 * $I_L11082_179 ) + -512 * $I_L11082_179 ) exit
11082.                      enddo
11085.                      $I_L11080_196 = 1 + $I_L11080_196
11085.                      if ( $I_L11080_196 >= _rsh( ( ls_trunc + -ms ), 2 ) ) exit
11085.                   enddo
11085.                   $I_L11080_173 = and( 0xfffffffffffffffcUL, ( ls_trunc + -ms ) )
11085.                endif
11080.                if ( $I_L11080_173 < ls_trunc + -ms ) then
11080.                   $I_L11080_190 = 0
11080. !dir$ blocking_size( 0, 0 )
11080.                   do
11082.                      $SCA_cg_coeff_I0 = cg_coeff($I_L11080_173 + $I_L11080_190 + 1)
11082.                      $I_L11082_146 = 0
11082. !dir$ ivdep
11082. !dir$ blocking_size( 512, 512 )
11082.                      do
11083.                         ec($I_L11082_146 + 512 * $I_L11082_179 + 1, $I_L11080_173 + $I_L11080_190 + 2) = ( $SCA_cg_coeff_I0 * 1.0/( sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + $I_L11080_173 + $I_L11080_190 + 1) * sqs($I_L11082_146 + 512 * $I_L11082_179 + 1, ms + $I_L11080_173 + $I_L11080_190) ) )
11082.                         $I_L11082_146 = 1 + $I_L11082_146
11082.                         if ( $I_L11082_146 >= min( n_profile, 512 + 512 * $I_L11082_179 ) + -512 * $I_L11082_179 ) exit
11082.                      enddo
11085.                      $I_L11080_190 = 1 + $I_L11080_190
11085.                      if ( $I_L11080_190 >= ls_trunc + -ms + -$I_L11080_173 ) exit
11085.                   enddo
11085.                endif
11082.                $I_L11082_179 = 1 + $I_L11082_179
11084.                if ( $I_L11082_179 >= 1 + max( 0, -1 + _rsh( 511 + n_profile, 9 ) ) ) exit
11084.             enddo
11084.          endif
11084.       endif
11090.       if ( n_profile > 0 ) then
11090.          $I_L11090_149 = 0
11090. !dir$ ivdep
11090.          do
11091.             mu(1 + $I_L11090_149, 1) = ec(1 + $I_L11090_149, 2) * ec(1 + $I_L11090_149, 2)
11092.             $I_L11090_149 = 1 + $I_L11090_149
11090.             if ( $I_L11090_149 >= n_profile ) exit
11090.          enddo
11090.       endif
11093.       if ( -2 + n_red_eigensystem >= 0 ) then
11094.          if ( n_profile > 0 ) then
11094.             $I_L11094_181 = 0
11094.             do
11093.                $I_L11093_175 = 0
11093.                if ( -5 + n_red_eigensystem >= 0 ) then
11093.                   $I_L11093_198 = 0
11093. !dir$ blocking_size( 0, 0 )
11093.                   do
11094.                      $I_L11094_151 = 0
11094. !dir$ ivdep
11094. !dir$ blocking_size( 512, 512 )
11094.                      do
11095.                         mu($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 3 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 3 + 8 * $I_L11093_198) + ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 4 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 4 + 8 * $I_L11093_198)
11096.                         e($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 3 + 8 * $I_L11093_198)
11095.                         mu($I_L11094_151 + 512 * $I_L11094_181 + 1, 3 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 5 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 5 + 8 * $I_L11093_198) + ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 6 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 6 + 8 * $I_L11093_198)
11096.                         e($I_L11094_151 + 512 * $I_L11094_181 + 1, 3 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 4 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 5 + 8 * $I_L11093_198)
11095.                         mu($I_L11094_151 + 512 * $I_L11094_181 + 1, 4 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 7 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 7 + 8 * $I_L11093_198) + ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 8 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 8 + 8 * $I_L11093_198)
11096.                         e($I_L11094_151 + 512 * $I_L11094_181 + 1, 4 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 6 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 7 + 8 * $I_L11093_198)
11095.                         mu($I_L11094_151 + 512 * $I_L11094_181 + 1, 5 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 9 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 9 + 8 * $I_L11093_198) + ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 10 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 10 + 8 * $I_L11093_198)
11096.                         e($I_L11094_151 + 512 * $I_L11094_181 + 1, 5 + 4 * $I_L11093_198) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 8 + 8 * $I_L11093_198) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 9 + 8 * $I_L11093_198)
11094.                         $I_L11094_151 = 1 + $I_L11094_151
11094.                         if ( $I_L11094_151 >= min( n_profile, 512 + 512 * $I_L11094_181 ) + -512 * $I_L11094_181 ) exit
11094.                      enddo
11098.                      $I_L11093_198 = 1 + $I_L11093_198
11098.                      if ( $I_L11093_198 >= _rsh( -1 + n_red_eigensystem, 2 ) ) exit
11098.                   enddo
11098.                   $I_L11093_175 = and( 0xfffffffffffffffcUL, -1 + n_red_eigensystem )
11098.                endif
11093.                if ( $I_L11093_175 < -1 + n_red_eigensystem ) then
11093.                   $I_L11093_193 = 0
11093. !dir$ blocking_size( 0, 0 )
11093.                   do
11094.                      $I_L11094_151 = 0
11094. !dir$ ivdep
11094. !dir$ blocking_size( 512, 512 )
11094.                      do
11095.                         mu($I_L11094_151 + 512 * $I_L11094_181 + 1, $I_L11093_175 + $I_L11093_193 + 2) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 * $I_L11093_175 + 2 * $I_L11093_193 + 3) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 * $I_L11093_175 + 2 * $I_L11093_193 + 3) + ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 * $I_L11093_175 + 2 * $I_L11093_193 + 4) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 * $I_L11093_175 + 2 * $I_L11093_193 + 4)
11096.                         e($I_L11094_151 + 512 * $I_L11094_181 + 1, $I_L11093_175 + $I_L11093_193 + 2) = ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 * $I_L11093_175 + 2 * $I_L11093_193 + 2) * ec($I_L11094_151 + 512 * $I_L11094_181 + 1, 2 * $I_L11093_175 + 2 * $I_L11093_193 + 3)
11094.                         $I_L11094_151 = 1 + $I_L11094_151
11094.                         if ( $I_L11094_151 >= min( n_profile, 512 + 512 * $I_L11094_181 ) + -512 * $I_L11094_181 ) exit
11094.                      enddo
11098.                      $I_L11093_193 = 1 + $I_L11093_193
11098.                      if ( $I_L11093_193 >= n_red_eigensystem + -$I_L11093_175 + -1 ) exit
11098.                   enddo
11098.                endif
11094.                $I_L11094_181 = 1 + $I_L11094_181
11097.                if ( $I_L11094_181 >= 1 + max( 0, -1 + _rsh( 511 + n_profile, 9 ) ) ) exit
11097.             enddo
11097.          endif
11097.       endif
11104.       if ( n_red_eigensystem > 1 ) then
11108.          n_max_qr_iteration = 25 + ls_trunc
11109.          call eigenvalue_tri( n_profile, n_red_eigensystem, mu(1, 1), e(1, 1), tol, n_max_qr_iteration, nd_profile )
11109.       endif
11114.       if ( n_red_eigensystem > 0 ) then
11114.          $I_L11114_185 = 0
11114.          do
11115.             if ( n_profile > 0 ) then
11115.                $I_L11115_154 = 0
11115. !dir$ ivdep
11115.                do
11116.                   $mu_WR0_R0 = _sqrt( mu(1 + $I_L11115_154, 1 + $I_L11114_185) )
11116.                   mu(1 + $I_L11115_154, 1 + $I_L11114_185) = $mu_WR0_R0
11117.                   if ( $mu_WR0_R0 > 1.0 ) then
11118.                      c_ratio(1 + $I_L11115_154) = ( 5.0e-1 * 1.0/$mu_WR0_R0 )
11118.                   else
11120.                      c_ratio(1 + $I_L11115_154) = 1.0
11120.                   endif
11122.                   $I_L11115_154 = 1 + $I_L11115_154
11121.                   if ( $I_L11115_154 >= n_profile ) exit
11121.                enddo
11142.                $I_L11142_156 = 0
11142. !dir$ ivdep
11142.                do
11143.                   eig_vec(1 + $I_L11142_156, 2 * n_red_eigensystem, 1 + $I_L11114_185) = 1.0
11147.                   eig_vec(1 + $I_L11142_156, -1 + 2 * n_red_eigensystem, 1 + $I_L11114_185) = ( c_ratio(1 + $I_L11142_156) * mu(1 + $I_L11142_156, 1 + $I_L11114_185) * 1.0/ec(1 + $I_L11142_156, 2 * n_red_eigensystem) )
11144.                   $I_L11142_156 = 1 + $I_L11142_156
11142.                   if ( $I_L11142_156 >= n_profile ) exit
11142.                enddo
11142.             endif
11149.             if ( -2 + 2 * n_red_eigensystem > 0 ) then
11151.                if ( n_profile > 0 ) then
11151.                   $I_L11151_183 = 0
11151.                   do
11149.                      if ( -4 + 2 * n_red_eigensystem >= 0 ) then
11149.                         $I_j_200 = 0
11149. !dir$ blocking_size( 0, 0 )
11149.                         do
11151.                            $I_L11151_158 = 0
11151. !dir$ ivdep
11151. !dir$ blocking_size( 256, 256 )
11151.                            do
11152.                               eig_vec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -2, 1 + $I_L11114_185) = ( ( mu($I_L11151_158 + 256 * $I_L11151_183 + 1, 1 + $I_L11114_185) * eig_vec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -1, 1 + $I_L11114_185) + -( c_ratio($I_L11151_158 + 256 * $I_L11151_183 + 1) * ec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200) * eig_vec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200, 1 + $I_L11114_185) ) ) * c_ratio($I_L11151_158 + 256 * $I_L11151_183 + 1) * 1.0/ec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -1) )
11152.                               eig_vec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -3, 1 + $I_L11114_185) = ( ( mu($I_L11151_158 + 256 * $I_L11151_183 + 1, 1 + $I_L11114_185) * eig_vec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -2, 1 + $I_L11114_185) + -( c_ratio($I_L11151_158 + 256 * $I_L11151_183 + 1) * ec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -1) * eig_vec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -1, 1 + $I_L11114_185) ) ) * c_ratio($I_L11151_158 + 256 * $I_L11151_183 + 1) * 1.0/ec($I_L11151_158 + 256 * $I_L11151_183 + 1, 2 * n_red_eigensystem + -2 * $I_j_200 + -2) )
11151.                               $I_L11151_158 = 1 + $I_L11151_158
11151.                               if ( $I_L11151_158 >= min( n_profile, 256 + 256 * $I_L11151_183 ) + -256 * $I_L11151_183 ) exit
11151.                            enddo
11157.                            $I_j_200 = 1 + $I_j_200
11157.                            if ( $I_j_200 >= _rsh( -2 + 2 * n_red_eigensystem, 1 ) ) exit
11157.                         enddo
11157.                      endif
11151.                      $I_L11151_183 = 1 + $I_L11151_183
11156.                      if ( $I_L11151_183 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
11156.                   enddo
11156.                endif
11156.             endif
11161.             if ( n_profile > 0 ) then
11161.                $I_L11161_161 = 0
11161. !dir$ ivdep
11161.                do
11162.                   $rescale_WR0_R1 = c_ratio(1 + $I_L11161_161)
11162.                   rescale(1 + $I_L11161_161) = $rescale_WR0_R1
11163.                   $eig_vec_WR0_R2 = eig_vec(1 + $I_L11161_161, 1, 1 + $I_L11114_185) * $rescale_WR0_R1
11163.                   eig_vec(1 + $I_L11161_161, 1, 1 + $I_L11114_185) = $eig_vec_WR0_R2
11164.                   normalization(1 + $I_L11161_161) = $eig_vec_WR0_R2 * $eig_vec_WR0_R2
11165.                   $I_L11161_161 = 1 + $I_L11161_161
11161.                   if ( $I_L11161_161 >= n_profile ) exit
11161.                enddo
11161.             endif
11166.             if ( -2 + 2 * n_red_eigensystem >= 0 ) then
11167.                if ( n_profile > 0 ) then
11167.                   $I_L11167_169 = 0
11167. !dir$ ivdep
11167.                   do
11166.                      $SCA_rescale_I1 = rescale(1 + $I_L11167_169)
11166.                      $SCA_normalization_I2 = normalization(1 + $I_L11167_169)
11166.                      $SCA_c_ratio_I3 = c_ratio(1 + $I_L11167_169)
11168.                      $$SCA_rescale_I1_N107 = $SCA_rescale_I1
11166.                      $I_L11166_163 = 0
11166. !dir$ unroll 4
11166.                      do
11168.                         $SCA_rescale_I1 = $$SCA_rescale_I1_N107 * $SCA_c_ratio_I3 ** ( 1 + $I_L11166_163 )
11169.                         $eig_vec_WR0_R3 = eig_vec(1 + $I_L11167_169, 2 + $I_L11166_163, 1 + $I_L11114_185) * $SCA_rescale_I1
11169.                         eig_vec(1 + $I_L11167_169, 2 + $I_L11166_163, 1 + $I_L11114_185) = $eig_vec_WR0_R3
11170.                         $SCA_normalization_I2 = $SCA_normalization_I2 + $eig_vec_WR0_R3 * $eig_vec_WR0_R3
11173.                         $I_L11166_163 = 1 + $I_L11166_163
11167.                         if ( $I_L11166_163 >= -1 + 2 * n_red_eigensystem ) exit
11167.                      enddo
11166.                      normalization(1 + $I_L11167_169) = $SCA_normalization_I2
11172.                      $I_L11167_169 = 1 + $I_L11167_169
11172.                      if ( $I_L11167_169 >= n_profile ) exit
11172.                   enddo
11172.                endif
11172.             endif
11174.             if ( n_profile > 0 ) then
11174.                $I_L11174_165 = 0
11174. !dir$ ivdep
11174.                do
11175.                   normalization(1 + $I_L11174_165) = _sqrt( 1.0/normalization(1 + $I_L11174_165) )
11176.                   $I_L11174_165 = 1 + $I_L11174_165
11174.                   if ( $I_L11174_165 >= n_profile ) exit
11174.                enddo
11174.             endif
11177.             if ( 2 * n_red_eigensystem > 0 ) then
11178.                if ( n_profile > 0 ) then
11177.                   $I_L11177_171 = 0
11177.                   if ( 2 * n_red_eigensystem >= 4 ) then
11177.                      $I_L11177_202 = 0
11177. !dir$ blocking_size( 0, 0 )
11177.                      do
11178.                         $I_L11178_167 = 0
11178. !dir$ ivdep
11178. !dir$ blocking_size( 0, 0 )
11178.                         do
11179.                            eig_vec(1 + $I_L11178_167, 1 + 4 * $I_L11177_202, 1 + $I_L11114_185) = ( eig_vec(1 + $I_L11178_167, 1 + 4 * $I_L11177_202, 1 + $I_L11114_185) * normalization(1 + $I_L11178_167) * 1.0/sqs(1 + $I_L11178_167, ms + 4 * $I_L11177_202) )
11179.                            eig_vec(1 + $I_L11178_167, 2 + 4 * $I_L11177_202, 1 + $I_L11114_185) = ( eig_vec(1 + $I_L11178_167, 2 + 4 * $I_L11177_202, 1 + $I_L11114_185) * normalization(1 + $I_L11178_167) * 1.0/sqs(1 + $I_L11178_167, ms + 4 * $I_L11177_202 + 1) )
11179.                            eig_vec(1 + $I_L11178_167, 3 + 4 * $I_L11177_202, 1 + $I_L11114_185) = ( eig_vec(1 + $I_L11178_167, 3 + 4 * $I_L11177_202, 1 + $I_L11114_185) * normalization(1 + $I_L11178_167) * 1.0/sqs(1 + $I_L11178_167, ms + 4 * $I_L11177_202 + 2) )
11179.                            eig_vec(1 + $I_L11178_167, 4 + 4 * $I_L11177_202, 1 + $I_L11114_185) = ( eig_vec(1 + $I_L11178_167, 4 + 4 * $I_L11177_202, 1 + $I_L11114_185) * normalization(1 + $I_L11178_167) * 1.0/sqs(1 + $I_L11178_167, ms + 4 * $I_L11177_202 + 3) )
11181.                            $I_L11178_167 = 1 + $I_L11178_167
11178.                            if ( $I_L11178_167 >= n_profile ) exit
11178.                         enddo
11182.                         $I_L11177_202 = 1 + $I_L11177_202
11181.                         if ( $I_L11177_202 >= _rsh( ( 2 * n_red_eigensystem ), 2 ) ) exit
11181.                      enddo
11182.                      $I_L11177_171 = and( 0xfffffffffffffffcUL, ( 2 * n_red_eigensystem ) )
11182.                   endif
11177.                   if ( $I_L11177_171 < 2 * n_red_eigensystem ) then
11177.                      $I_L11177_187 = 0
11177. !dir$ blocking_size( 0, 0 )
11177.                      do
11178.                         $I_L11178_167 = 0
11178. !dir$ ivdep
11178. !dir$ blocking_size( 0, 0 )
11178.                         do
11179.                            eig_vec(1 + $I_L11178_167, $I_L11177_171 + $I_L11177_187 + 1, 1 + $I_L11114_185) = ( eig_vec(1 + $I_L11178_167, $I_L11177_171 + $I_L11177_187 + 1, 1 + $I_L11114_185) * normalization(1 + $I_L11178_167) * 1.0/sqs(1 + $I_L11178_167, ms + $I_L11177_171 + $I_L11177_187) )
11181.                            $I_L11178_167 = 1 + $I_L11178_167
11178.                            if ( $I_L11178_167 >= n_profile ) exit
11178.                         enddo
11182.                         $I_L11177_187 = 1 + $I_L11177_187
11181.                         if ( $I_L11177_187 >= -$I_L11177_171 + 2 * n_red_eigensystem ) exit
11181.                      enddo
11181.                   endif
11181.                endif
11181.             endif
11184.             $I_L11114_185 = 1 + $I_L11114_185
11182.             if ( $I_L11114_185 >= n_red_eigensystem ) exit
11182.          enddo
11182.       endif
10992.       _free( t$2308 )
11189.       return
11189.       end
11189.       
11314.       
11314.       subroutine eval_uplm( ms, n_max_order, n_direction, x, up_lm, nd_direction )
11211.       t$402 = nd_direction
11243.       t$2327 = _zla( 0, nd_direction )
11211.       t$403 = ( n_max_order + -ms + 1 )
11211.       t$2328 = _zla( 0, nd_direction )
11246.       t$2329 = _zla( 0, ( n_max_order + -ms + 1 ) )
11211.       t$2330 = _zla( 0, nd_direction ) * _zla( 0, ( n_max_order + -ms + 1 ) )
11269.       product = 1.0
11271.       if ( ms > 0 ) then
11272.          $I_L11272_36 = 0
11272. !dir$ ivdep
11272.          do
11273.             product = ( 1.0 + -( 5.0e-1 * 1.0/( ( 1 + $I_L11272_36 ) ) ) ) * product
11274.             $I_L11272_36 = 1 + $I_L11272_36
11272.             if ( $I_L11272_36 >= ms ) exit
11272.          enddo
11275.          if ( n_direction > 0 ) then
11275.             $I_L11275_38 = 0
11275. !dir$ ivdep
11275.             do
11276.                up_lm(1 + $I_L11275_38, 1) = cvmg( -1.0, 1.0, and( 1, ms ) /= 0 ) * _sqrt( ( 1.0 + -( x(1 + $I_L11275_38) * x(1 + $I_L11275_38) ) ) ** ms * product * ( 1.0 + 2.0 * real( ms, 8 ) ) * 7.9577471545947673e-2 )
11279.                $I_L11275_38 = 1 + $I_L11275_38
11275.                if ( $I_L11275_38 >= n_direction ) exit
11275.             enddo
11275.          endif
11280.       else if ( n_direction > 0 ) then
11281.          $I_L11281_40 = 0
11281. !dir$ ivdep
11281.          do
11282.             up_lm(1 + $I_L11281_40, 1) = 2.8209479177387814e-1
11283.             $I_L11281_40 = 1 + $I_L11281_40
11281.             if ( $I_L11281_40 >= n_direction ) exit
11281.          enddo
11281.       endif
11288.       if ( ms < n_max_order ) then
11289.          if ( n_direction > 0 ) then
11289.             $I_L11289_42 = 0
11289. !dir$ ivdep
11289.             do
11290.                up_lm(1 + $I_L11289_42, 2) = x(1 + $I_L11289_42) * _sqrt( 3.0 + 2.0 * real( ms, 8 ) ) * up_lm(1 + $I_L11289_42, 1)
11292.                $I_L11289_42 = 1 + $I_L11289_42
11289.                if ( $I_L11289_42 >= n_direction ) exit
11289.             enddo
11289.          endif
11289.       endif
11297.       if ( n_max_order + -ms + -2 >= 0 ) then
11299.          if ( n_direction > 0 ) then
11299.             $I_L11299_49 = 0
11299.             do
11297.                $I_L11297_47 = 0
11297.                if ( n_max_order + -ms + -3 >= 0 ) then
11297.                   $I_L11297_51 = 0
11297. !dir$ blocking_size( 0, 0 )
11297.                   do
11299.                      $I_L11299_44 = 0
11299. !dir$ ivdep
11299. !dir$ blocking_size( 256, 256 )
11299.                      do
11300.                         up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 3 + 2 * $I_L11297_51) = x($I_L11299_44 + 256 * $I_L11299_49 + 1) * _sqrt( ( ( -1.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 2, 8 ) ) * ( 1.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 2, 8 ) ) ) * 1.0/( ( real( ms + 2 * $I_L11297_51 + 2, 8 ) + real( ms, 8 ) ) * ( real( ms + 2 * $I_L11297_51 + 2, 8 ) + -( real( ms, 8 ) ) ) ) ) * up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 2 + 2 * $I_L11297_51) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 2, 8 ) ) * ( -( real( ms, 8 ) ) + real( ms + 2 * $I_L11297_51 + 2, 8 ) + -1.0 ) * ( real( ms, 8 ) + real( ms + 2 * $I_L11297_51 + 2, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 2, 8 ) ) * ( real( ms + 2 * $I_L11297_51 + 2, 8 ) + real( ms, 8 ) ) * ( real( ms + 2 * $I_L11297_51 + 2, 8 ) + -( real( ms, 8 ) ) ) ) ) * up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 1 + 2 * $I_L11297_51) )
11300.                         up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 4 + 2 * $I_L11297_51) = x($I_L11299_44 + 256 * $I_L11299_49 + 1) * _sqrt( ( ( -1.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 3, 8 ) ) * ( 1.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 3, 8 ) ) ) * 1.0/( ( real( ms + 2 * $I_L11297_51 + 3, 8 ) + real( ms, 8 ) ) * ( real( ms + 2 * $I_L11297_51 + 3, 8 ) + -( real( ms, 8 ) ) ) ) ) * up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 3 + 2 * $I_L11297_51) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 3, 8 ) ) * ( -( real( ms, 8 ) ) + real( ms + 2 * $I_L11297_51 + 3, 8 ) + -1.0 ) * ( real( ms, 8 ) + real( ms + 2 * $I_L11297_51 + 3, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms + 2 * $I_L11297_51 + 3, 8 ) ) * ( real( ms + 2 * $I_L11297_51 + 3, 8 ) + real( ms, 8 ) ) * ( real( ms + 2 * $I_L11297_51 + 3, 8 ) + -( real( ms, 8 ) ) ) ) ) * up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 2 + 2 * $I_L11297_51) )
11299.                         $I_L11299_44 = 1 + $I_L11299_44
11299.                         if ( $I_L11299_44 >= min( n_direction, 256 + 256 * $I_L11299_49 ) + -256 * $I_L11299_49 ) exit
11299.                      enddo
11309.                      $I_L11297_51 = 1 + $I_L11297_51
11309.                      if ( $I_L11297_51 >= _rsh( n_max_order + -ms + -1, 1 ) ) exit
11309.                   enddo
11309.                   $I_L11297_47 = and( 0xfffffffffffffffeUL, n_max_order + -ms + -1 )
11309.                endif
11297.                if ( $I_L11297_47 < n_max_order + -ms + -1 ) then
11299.                   $I_L11299_44 = 0
11299. !dir$ ivdep
11299. !dir$ blocking_size( 256, 256 )
11299.                   do
11300.                      up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 3 + $I_L11297_47) = x($I_L11299_44 + 256 * $I_L11299_49 + 1) * _sqrt( ( ( -1.0 + 2.0 * real( ms + $I_L11297_47 + 2, 8 ) ) * ( 1.0 + 2.0 * real( ms + $I_L11297_47 + 2, 8 ) ) ) * 1.0/( ( real( ms + $I_L11297_47 + 2, 8 ) + real( ms, 8 ) ) * ( real( ms + $I_L11297_47 + 2, 8 ) + -( real( ms, 8 ) ) ) ) ) * up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 2 + $I_L11297_47) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms + $I_L11297_47 + 2, 8 ) ) * ( -( real( ms, 8 ) ) + real( ms + $I_L11297_47 + 2, 8 ) + -1.0 ) * ( real( ms, 8 ) + real( ms + $I_L11297_47 + 2, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms + $I_L11297_47 + 2, 8 ) ) * ( real( ms + $I_L11297_47 + 2, 8 ) + real( ms, 8 ) ) * ( real( ms + $I_L11297_47 + 2, 8 ) + -( real( ms, 8 ) ) ) ) ) * up_lm($I_L11299_44 + 256 * $I_L11299_49 + 1, 1 + $I_L11297_47) )
11299.                      $I_L11299_44 = 1 + $I_L11299_44
11299.                      if ( $I_L11299_44 >= min( n_direction, 256 + 256 * $I_L11299_49 ) + -256 * $I_L11299_49 ) exit
11299.                   enddo
11299.                endif
11299.                $I_L11299_49 = 1 + $I_L11299_49
11308.                if ( $I_L11299_49 >= 1 + max( 0, -1 + _rsh( 255 + n_direction, 8 ) ) ) exit
11308.             enddo
11308.          endif
11308.       endif
11314.       return
11314.       end
11314.       
11371.       
11371.       subroutine exp_v( n, a, b )
11334.       t$405 = n
11350.       t$2331 = _zla( 0, n )
11364.       if ( n > 0 ) then
11364.          $I_L11364_4 = 0
11364. !dir$ ivdep
11364.          do
11365.             b(1 + $I_L11364_4) = _expn( a(1 + $I_L11364_4) )
11366.             $I_L11364_4 = 1 + $I_L11364_4
11364.             if ( $I_L11364_4 >= n ) exit
11364.          enddo
11364.       endif
11371.       return
11371.       end
11371.       
11464.       
11464.       subroutine gas_optical_properties( n_profile, n_layer, n_gas, i_gas_pointer, k_esft_mono, gas_mix_ratio, k_gas_abs, nd_profile, nd_layer, nd_species )
11389.       t$407 = nd_species
11420.       t$2332 = _zla( 0, nd_species )
11389.       t$408 = nd_profile
11389.       t$409 = nd_layer
11425.       t$2333 = _zla( 0, nd_profile )
11389.       t$2334 = _zla( 0, nd_profile )
11425.       t$2335 = _zla( 0, nd_layer )
11389.       t$2336 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
11389.       t$2337 = _zla( 0, nd_species ) * _zla( 0, nd_profile ) * _zla( 0, nd_layer )
11389.       t$2338 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
11444.       $i_gas_S2 = i_gas_pointer(1)
11445.       if ( nd_layer > 0 ) then
11446.          if ( nd_profile > 0 ) then
11447.             $SC_k_esft_mono_I0 = k_esft_mono($i_gas_S2)
11445.             $I_L11445_38 = 0
11445.             do
11446.                $I_L11446_34 = 0
11446. !dir$ ivdep
11446.                do
11447.                   k_gas_abs(1 + $I_L11446_34, 1 + $I_L11445_38) = $SC_k_esft_mono_I0 * gas_mix_ratio(1 + $I_L11446_34, 1 + $I_L11445_38, $i_gas_S2)
11449.                   $I_L11446_34 = 1 + $I_L11446_34
11446.                   if ( $I_L11446_34 >= nd_profile ) exit
11446.                enddo
11450.                $I_L11445_38 = 1 + $I_L11445_38
11449.                if ( $I_L11445_38 >= nd_layer ) exit
11449.             enddo
11449.          endif
11449.       endif
11451.       if ( -2 + n_gas >= 0 ) then
11453.          if ( nd_layer > 0 ) then
11454.             if ( nd_profile > 0 ) then
11451.                $SI_L11451_42_G2 = 0
11451.                do
11453.                   $SI_L11453_40_G5 = 0
11453.                   do
11454.                      $SI_L11454_36_G8 = 0
11454.                      do
11451.                         $I_L11451_50 = 0
11451. !dir$ shortloop16
11451. !dir$ blocking_size( 8, 8 )
11451.                         do
11452.                            $i_gas_S6 = i_gas_pointer($I_L11451_50 + 8 * $SI_L11451_42_G2 + 2)
11453.                            $SCA_k_esft_mono_I1 = k_esft_mono($i_gas_S6)
11453.                            $I_L11453_47 = 0
11453. !dir$ shortloop16
11453. !dir$ blocking_size( 8, 8 )
11453.                            do
11454.                               $I_L11454_44 = 0
11454. !dir$ ivdep
11454. !dir$ blocking_size( 256, 256 )
11454.                               do
11455.                                  k_gas_abs($I_L11454_44 + 256 * $SI_L11454_36_G8 + 1, $I_L11453_47 + 8 * $SI_L11453_40_G5 + 1) = k_gas_abs($I_L11454_44 + 256 * $SI_L11454_36_G8 + 1, $I_L11453_47 + 8 * $SI_L11453_40_G5 + 1) + $SCA_k_esft_mono_I1 * gas_mix_ratio($I_L11454_44 + 256 * $SI_L11454_36_G8 + 1, $I_L11453_47 + 8 * $SI_L11453_40_G5 + 1, $i_gas_S6)
11454.                                  $I_L11454_44 = 1 + $I_L11454_44
11454.                                  if ( $I_L11454_44 >= min( nd_profile, 256 + 256 * $SI_L11454_36_G8 ) + -256 * $SI_L11454_36_G8 ) exit
11454.                               enddo
11453.                               $I_L11453_47 = 1 + $I_L11453_47
11453.                               if ( $I_L11453_47 >= min( nd_layer, 8 + 8 * $SI_L11453_40_G5 ) + -8 * $SI_L11453_40_G5 ) exit
11453.                            enddo
11451.                            $I_L11451_50 = 1 + $I_L11451_50
11457.                            if ( $I_L11451_50 >= min( -1 + n_gas, 8 + 8 * $SI_L11451_42_G2 ) + -8 * $SI_L11451_42_G2 ) exit
11457.                         enddo
11454.                         $SI_L11454_36_G8 = 1 + $SI_L11454_36_G8
11454.                         if ( $SI_L11454_36_G8 >= _rsh( 255 + nd_profile, 8 ) ) exit
11454.                      enddo
11453.                      $SI_L11453_40_G5 = 1 + $SI_L11453_40_G5
11458.                      if ( $SI_L11453_40_G5 >= _rsh( 7 + nd_layer, 3 ) ) exit
11458.                   enddo
11451.                   $SI_L11451_42_G2 = 1 + $SI_L11451_42_G2
11451.                   if ( $SI_L11451_42_G2 >= _rsh( 6 + n_gas, 3 ) ) exit
11451.                enddo
11451.             endif
11451.          endif
11451.       endif
11464.       return
11464.       end
11464.       
11632.       
11632.       subroutine gauss_angle( n_profile, n_layer, n_order_gauss, tau, flux_inc_down, diff_planck, source_ground, albedo_surface_diff, flux_diffuse, l_ir_source_quad, diff_planck_2, nd_profile, nd_layer )
11489.       t$415 = nd_profile
11489.       t$416 = nd_layer
11531.       t$2339 = _zla( 0, nd_profile )
11489.       t$2340 = _zla( 0, nd_profile )
11531.       t$2341 = _zla( 0, nd_layer )
11489.       t$2342 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
11489.       t$417 = ( 2 + 2 * nd_layer )
11544.       t$2343 = _zla( 0, ( 2 + 2 * nd_layer ) )
11489.       t$2344 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
11560.       t$2347 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
11562.       t$2348 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
11562.       t$2350 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11556.       t$2351 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11556.       t$2353 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11566.       t$2354 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11566.       t$2356 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11564.       t$2357 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8
11564.       t$2359 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 16 * _zla( 0, nd_profile )
11489.       t$2345 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 16 * _zla( 0, nd_profile ) ), 8 )
11560.       t$2346 = t$2345
11562.       t$2349 = t$2345 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
11556.       t$2352 = t$2345 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11566.       t$2355 = t$2345 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11564.       t$2358 = t$2345 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
11579.       if ( n_profile > 0 ) then
11579.          $I_L11579_142 = 0
11579. !dir$ ivdep
11579.          do
11580.             source_ground_rad(1 + $I_L11579_142) = 3.1830988618379069e-1 * source_ground(1 + $I_L11579_142)
11581.             radiance_inc(1 + $I_L11579_142) = 3.1830988618379069e-1 * flux_inc_down(1 + $I_L11579_142)
11582.             $I_L11579_142 = 1 + $I_L11579_142
11579.             if ( $I_L11579_142 >= n_profile ) exit
11579.          enddo
11579.       endif
11583.       if ( n_layer > 0 ) then
11584.          if ( n_profile > 0 ) then
11583.             $I_L11583_160 = 0
11583.             do
11584.                $I_L11584_144 = 0
11584. !dir$ ivdep
11584.                do
11585.                   diff_planck_rad(1 + $I_L11584_144, 1 + $I_L11583_160) = 3.1830988618379069e-1 * diff_planck(1 + $I_L11584_144, 1 + $I_L11583_160)
11586.                   $I_L11584_144 = 1 + $I_L11584_144
11584.                   if ( $I_L11584_144 >= n_profile ) exit
11584.                enddo
11587.                $I_L11583_160 = 1 + $I_L11583_160
11586.                if ( $I_L11583_160 >= n_layer ) exit
11586.             enddo
11586.          endif
11586.       endif
11588.       if ( 2 + 2 * n_layer > 0 ) then
11589.          if ( n_profile > 0 ) then
11588.             $I_L11588_162 = 0
11588.             do
11589.                $I_L11589_146 = 0
11589. !dir$ ivdep
11589.                do
11590.                   flux_diffuse(1 + $I_L11589_146, 1 + $I_L11588_162) = 0.0
11591.                   $I_L11589_146 = 1 + $I_L11589_146
11589.                   if ( $I_L11589_146 >= n_profile ) exit
11589.                enddo
11592.                $I_L11588_162 = 1 + $I_L11588_162
11591.                if ( $I_L11588_162 >= 2 + 2 * n_layer ) exit
11591.             enddo
11591.          endif
11591.       endif
11603.       if ( n_order_gauss > 0 ) then
11603.          $I_L11603_172 = 0
11603.          do
11604.             $secant_ray_S10 = ( 2.0 * 1.0/( 1.0 + gauss_point(1 + $I_L11603_172, n_order_gauss) ) )
11608.             t$782 = nd_profile
11608.             t$783 = nd_layer
11608.             t$2761 = max( 0, nd_profile )
11608.             t$2762 = nd_profile
11608.             t$2763 = max( 0, nd_layer )
11608.             t$2764 = ( nd_profile * nd_layer )
11608.             t$784 = ( 2 + 2 * nd_layer )
11608.             t$2765 = max( 0, ( 2 + 2 * nd_layer ) )
11608.             t$2766 = nd_profile * max( 0, ( 2 + 2 * nd_layer ) )
11608.             t$2769 = nd_profile * nd_layer * 8
11608.             t$2770 = 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 )
11608.             t$2772 = nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 )
11608.             t$2773 = 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 )
11608.             t$2775 = nd_profile * nd_layer * 8 + 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 )
11608.             t$2767 = int( _alloc( nd_profile * nd_layer * 8 + 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 ) ), 8 )
11608.             t$2768 = t$2767
11608.             t$2771 = t$2767 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 )
11608.             t$2774 = t$2767 + 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 )
11608.             if ( n_layer > 0 ) then
11608.                if ( n_profile > 0 ) then
11608.                   $I_L11608_164 = 0
11608.                   do
11608.                      $I_L11608_148 = 0
11608. !dir$ ivdep
11608.                      do
11608.                         $trans_WR0_R0 = _expn( -( $secant_ray_S10 * tau(1 + $I_L11608_148, 1 + $I_L11608_164) ) )
11608.                         trans(1 + $I_L11608_148, 1 + $I_L11608_164) = $trans_WR0_R0
11608.                         $source_up_WR0_R1 = ( ( 1.0000000149011612 + -$trans_WR0_R0 ) * diff_planck_rad(1 + $I_L11608_148, 1 + $I_L11608_164) * 1.0/( 1.4901161193847656e-8 + $secant_ray_S10 * tau(1 + $I_L11608_148, 1 + $I_L11608_164) ) )
11608.                         source_up(1 + $I_L11608_148, 1 + $I_L11608_164) = $source_up_WR0_R1
11608.                         source_down(1 + $I_L11608_148, 1 + $I_L11608_164) = -$source_up_WR0_R1
11608.                         $I_L11608_148 = 1 + $I_L11608_148
11608.                         if ( $I_L11608_148 >= n_profile ) exit
11608.                      enddo
11608.                      $I_L11608_164 = 1 + $I_L11608_164
11608.                      if ( $I_L11608_164 >= n_layer ) exit
11608.                   enddo
11608.                endif
11608.             endif
11608.             if ( n_profile > 0 ) then
11608.                $I_L11608_150 = 0
11608. !dir$ ivdep
11608.                do
11608.                   flux_stream(1 + $I_L11608_150, 2) = radiance_inc(1 + $I_L11608_150)
11608.                   $I_L11608_150 = 1 + $I_L11608_150
11608.                   if ( $I_L11608_150 >= n_profile ) exit
11608.                enddo
11608.             endif
11608.             if ( n_layer > 0 ) then
11608.                if ( n_profile > 0 ) then
11608.                   $I_L11608_166 = 0
11608.                   if ( n_layer >= 2 ) then
11608.                      $I_L11608_174 = 0
11608.                      do
11608.                         $I_L11608_152 = 0
11608. !dir$ ivdep
11608.                         do
11608.                            flux_stream(1 + $I_L11608_152, 4 + 4 * $I_L11608_174) = trans(1 + $I_L11608_152, 1 + 2 * $I_L11608_174) * flux_stream(1 + $I_L11608_152, 2 + 4 * $I_L11608_174) + source_down(1 + $I_L11608_152, 1 + 2 * $I_L11608_174)
11608.                            flux_stream(1 + $I_L11608_152, 6 + 4 * $I_L11608_174) = trans(1 + $I_L11608_152, 2 + 2 * $I_L11608_174) * flux_stream(1 + $I_L11608_152, 4 + 4 * $I_L11608_174) + source_down(1 + $I_L11608_152, 2 + 2 * $I_L11608_174)
11608.                            $I_L11608_152 = 1 + $I_L11608_152
11608.                            if ( $I_L11608_152 >= n_profile ) exit
11608.                         enddo
11608.                         $I_L11608_174 = 1 + $I_L11608_174
11608.                         if ( $I_L11608_174 >= _rsh( n_layer, 1 ) ) exit
11608.                      enddo
11608.                      $I_L11608_166 = and( 0xfffffffffffffffeUL, n_layer )
11608.                   endif
11608.                   if ( $I_L11608_166 < n_layer ) then
11608.                      $I_L11608_152 = 0
11608. !dir$ ivdep
11608.                      do
11608.                         flux_stream(1 + $I_L11608_152, 4 + 2 * $I_L11608_166) = trans(1 + $I_L11608_152, 1 + $I_L11608_166) * flux_stream(1 + $I_L11608_152, 2 + 2 * $I_L11608_166) + source_down(1 + $I_L11608_152, 1 + $I_L11608_166)
11608.                         $I_L11608_152 = 1 + $I_L11608_152
11608.                         if ( $I_L11608_152 >= n_profile ) exit
11608.                      enddo
11608.                   endif
11608.                endif
11608.             endif
11608.             if ( n_profile > 0 ) then
11608.                $I_L11608_154 = 0
11608. !dir$ ivdep
11608.                do
11608.                   flux_stream(1 + $I_L11608_154, 1 + 2 * n_layer) = source_ground_rad(1 + $I_L11608_154) + albedo_surface_diff(1 + $I_L11608_154) * flux_stream(1 + $I_L11608_154, 2 + 2 * n_layer)
11608.                   $I_L11608_154 = 1 + $I_L11608_154
11608.                   if ( $I_L11608_154 >= n_profile ) exit
11608.                enddo
11608.             endif
11608.             if ( n_layer > 0 ) then
11608.                if ( n_profile > 0 ) then
11608.                   $I_L11608_168 = 0
11608.                   if ( n_layer >= 2 ) then
11608.                      $I_L11608_176 = 0
11608.                      do
11608.                         $I_L11608_156 = 0
11608. !dir$ ivdep
11608.                         do
11608.                            flux_stream(1 + $I_L11608_156, 2 * n_layer + -4 * $I_L11608_176 + -1) = trans(1 + $I_L11608_156, n_layer + -2 * $I_L11608_176) * flux_stream(1 + $I_L11608_156, 2 * n_layer + -4 * $I_L11608_176 + 1) + source_up(1 + $I_L11608_156, n_layer + -2 * $I_L11608_176)
11608.                            flux_stream(1 + $I_L11608_156, 2 * n_layer + -4 * $I_L11608_176 + -3) = trans(1 + $I_L11608_156, n_layer + -2 * $I_L11608_176 + -1) * flux_stream(1 + $I_L11608_156, 2 * n_layer + -4 * $I_L11608_176 + -1) + source_up(1 + $I_L11608_156, n_layer + -2 * $I_L11608_176 + -1)
11608.                            $I_L11608_156 = 1 + $I_L11608_156
11608.                            if ( $I_L11608_156 >= n_profile ) exit
11608.                         enddo
11608.                         $I_L11608_176 = 1 + $I_L11608_176
11608.                         if ( $I_L11608_176 >= _rsh( n_layer, 1 ) ) exit
11608.                      enddo
11608.                      $I_L11608_168 = and( 0xfffffffffffffffeUL, n_layer )
11608.                   endif
11608.                   if ( $I_L11608_168 < n_layer ) then
11608.                      $I_L11608_156 = 0
11608. !dir$ ivdep
11608.                      do
11608.                         flux_stream(1 + $I_L11608_156, 2 * n_layer + -2 * $I_L11608_168 + -1) = trans(1 + $I_L11608_156, n_layer + -$I_L11608_168) * flux_stream(1 + $I_L11608_156, 2 * n_layer + -2 * $I_L11608_168 + 1) + source_up(1 + $I_L11608_156, n_layer + -$I_L11608_168)
11608.                         $I_L11608_156 = 1 + $I_L11608_156
11608.                         if ( $I_L11608_156 >= n_profile ) exit
11608.                      enddo
11608.                   endif
11608.                endif
11608.             endif
11608.             _free( t$2767 )
11618.             $weight_stream_S21 = ( 1.0 + gauss_point(1 + $I_L11603_172, n_order_gauss) ) * gauss_weight(1 + $I_L11603_172, n_order_gauss) * 1.5707963267948966
11620.             if ( 2 + 2 * n_layer > 0 ) then
11621.                if ( n_profile > 0 ) then
11620.                   $I_L11620_170 = 0
11620.                   do
11621.                      $I_L11621_158 = 0
11621. !dir$ ivdep
11621.                      do
11622.                         flux_diffuse(1 + $I_L11621_158, 1 + $I_L11620_170) = flux_diffuse(1 + $I_L11621_158, 1 + $I_L11620_170) + $weight_stream_S21 * flux_stream(1 + $I_L11621_158, 1 + $I_L11620_170)
11624.                         $I_L11621_158 = 1 + $I_L11621_158
11621.                         if ( $I_L11621_158 >= n_profile ) exit
11621.                      enddo
11625.                      $I_L11620_170 = 1 + $I_L11620_170
11624.                      if ( $I_L11620_170 >= 2 + 2 * n_layer ) exit
11624.                   enddo
11624.                endif
11624.             endif
11627.             $I_L11603_172 = 1 + $I_L11603_172
11625.             if ( $I_L11603_172 >= n_order_gauss ) exit
11625.          enddo
11625.       endif
11489.       _free( t$2345 )
11632.       return
11632.       end
11632.       
11700.       
11700.       subroutine get_free_unit( ierr, iunit )
11682.       ierr = 0
11683.       iunit = 20
11684.       t$6166 = 20
11684.       t$6167(1) = 0x100000000000000L
11684. !dir$ suppress t$6166
11684.       t$6167(2) = int( loc( t$6166 ), 8 )
11684.       t$6167(3) = 0
11684.       t$6167(5) = 0
11684.       t$6167(6) = 0
11684.       t$6167(7) = 0
11684. !dir$ suppress l_open
11684.       t$6167(8) = int( loc( l_open ), 8 )
11684.       t$6167(9) = 0
11684.       t$6167(10) = 0
11684.       t$6167(11) = 0
11684.       t$6167(13) = 0
11684.       t$6167(15) = 0
11684.       t$6167(17) = 0
11684.       t$6167(19) = 0
11684.       t$6167(21) = 0
11684.       t$6167(23) = 0
11684.       t$6167(25) = 0
11684.       t$6167(26) = 0
11684.       t$6167(27) = 0
11684.       t$6167(29) = 0
11684.       t$6167(31) = 0
11684.       t$6167(33) = 0
11684.       t$6167(35) = 0
11684.       t$6167(37) = 0
11684.       t$6167(39) = 0
11684.       t$6167(41) = 0
11684.       t$6167(43) = 0
11684.       t$6167(44) = 0
11684.       t$6167(45) = 0x2000500000000L
11684.       t$6167(46) = 0
11684.       t$6167(47) = 0
11684.       t$6167(48) = 0
11684.       t$6167(49) = 0
11684.       t$6167(50) = 0
11684.       t$6167(52) = 0
11684.       t$6167(54) = 0
11684.       t$6167(56) = 0
11684.       t$6167(57) = 0
11684.       t$6167(58) = 0
11684.       t$6167(60) = 0
11684.       t$6167(61) = 0
11684.       t$6167(62) = 0
11684.       t$6167(63) = 0
11684.       t$6167(64) = 0
11684.       t$6167(66) = 0
11684.       t$6167(68) = 0
11684.       t$6167(69) = 0
11684.       t$6167(70) = 0
11684.       t$6165 = _inquire( t$6167 )
11685.       if ( l_open ) then
11685.          do
11686.             if ( l_open ) then
11686.                iunit = 1 + iunit
11686.             endif
11687.             t$6166 = iunit
11687.             t$6169(1) = 0x100000000000000L
11687. !dir$ suppress t$6166
11687.             t$6169(2) = int( loc( t$6166 ), 8 )
11687.             t$6169(3) = 0
11687.             t$6169(5) = 0
11687.             t$6169(6) = 0
11687.             t$6169(7) = 0
11687. !dir$ suppress l_open
11687.             t$6169(8) = int( loc( l_open ), 8 )
11687.             t$6169(9) = 0
11687.             t$6169(10) = 0
11687.             t$6169(11) = 0
11687.             t$6169(13) = 0
11687.             t$6169(15) = 0
11687.             t$6169(17) = 0
11687.             t$6169(19) = 0
11687.             t$6169(21) = 0
11687.             t$6169(23) = 0
11687.             t$6169(25) = 0
11687.             t$6169(26) = 0
11687.             t$6169(27) = 0
11687.             t$6169(29) = 0
11687.             t$6169(31) = 0
11687.             t$6169(33) = 0
11687.             t$6169(35) = 0
11687.             t$6169(37) = 0
11687.             t$6169(39) = 0
11687.             t$6169(41) = 0
11687.             t$6169(43) = 0
11687.             t$6169(44) = 0
11687.             t$6169(45) = 0x2000500000000L
11687.             t$6169(46) = 0
11687.             t$6169(47) = 0
11687.             t$6169(48) = 0
11687.             t$6169(49) = 0
11687.             t$6169(50) = 0
11687.             t$6169(52) = 0
11687.             t$6169(54) = 0
11687.             t$6169(56) = 0
11687.             t$6169(57) = 0
11687.             t$6169(58) = 0
11687.             t$6169(60) = 0
11687.             t$6169(61) = 0
11687.             t$6169(62) = 0
11687.             t$6169(63) = 0
11687.             t$6169(64) = 0
11687.             t$6169(66) = 0
11687.             t$6169(68) = 0
11687.             t$6169(69) = 0
11687.             t$6169(70) = 0
11687.             t$6168 = _inquire( t$6169 )
11688.             if ( ( l_open .and. iunit < 100 ) == 0 ) exit
11688.          enddo
11688.       endif
11690.       if ( iunit > 100 ) then
11691.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$422,  _substr(t$421,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: No free units are available for i/o.', 0x800600000000L ) ) )
11693.          ierr = 4
11693.       endif
11700.       return
11700.       end
11700.       
12718.       
12718.       subroutine grey_opt_prop( ierr, n_profile, n_layer, p, t, density, n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view, l_rayleigh, rayleigh_coeff, l_continuum, n_continuum, i_continuum_pointer, k_continuum, amount_continuum, l_aerosol, n_aerosol, aerosol_mix_ratio, i_aerosol_parametrization, i_humidity_pointer, humidities, delta_humidity, mean_rel_humidity, aerosol_absorption, aerosol_scattering, aerosol_phase_fnc, n_opt_level_aerosol_prsc, aerosol_pressure_prsc, aerosol_absorption_prsc, aerosol_scattering_prsc, aerosol_phase_fnc_prsc, l_cloud, n_cloud_profile, i_cloud_profile, n_cloud_top, n_condensed, l_cloud_cmp, i_phase_cmp, i_condensed_param, condensed_param_list, condensed_mix_ratio, condensed_dim_char, n_cloud_type, i_cloud_type, n_opt_level_drop_prsc, drop_pressure_prsc, drop_absorption_prsc, drop_scattering_prsc, drop_phase_fnc_prsc, n_opt_level_ice_prsc, ice_pressure_prsc, ice_absorption_prsc, ice_scattering_prsc, ice_phase_fnc_prsc, ss_prop, nd_profile, nd_radiance_profile, nd_layer, nd_layer_clr, id_ct, nd_continuum, nd_aerosol_species, nd_humidities, nd_cloud_parameter, nd_cloud_component, nd_phase_term, nd_max_order, nd_direction, nd_profile_aerosol_prsc, nd_profile_cloud_prsc, nd_opt_level_aerosol_prsc, nd_opt_level_cloud_prsc )
11737.       t$430 = nd_profile
11737.       t$431 = nd_layer
11858.       t$2360 = _zla( 0, nd_profile )
11737.       t$2361 = _zla( 0, nd_profile )
11858.       t$2362 = _zla( 0, nd_layer )
11737.       t$2363 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
11737.       t$432 = nd_radiance_profile
11737.       t$433 = nd_direction
11888.       t$2364 = _zla( 0, nd_radiance_profile )
11737.       t$2365 = _zla( 0, nd_radiance_profile )
11888.       t$2366 = _zla( 0, nd_direction )
11737.       t$2367 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
11737.       t$434 = nd_continuum
11912.       t$2368 = _zla( 0, nd_continuum )
11737.       t$2369 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
11737.       t$2370 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_continuum )
11737.       t$435 = nd_aerosol_species
11937.       t$2371 = _zla( 0, nd_aerosol_species )
11737.       t$2372 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_aerosol_species )
11737.       t$436 = nd_humidities
11947.       t$2373 = _zla( 0, nd_humidities )
11737.       t$2374 = _zla( 0, nd_humidities )
11737.       t$2375 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities )
11737.       t$437 = nd_phase_term
11944.       t$2376 = _zla( 0, nd_phase_term )
11737.       t$2377 = _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
11737.       t$2378 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
11737.       t$438 = nd_profile_aerosol_prsc
11737.       t$439 = nd_opt_level_aerosol_prsc
11962.       t$2379 = _zla( 0, nd_profile_aerosol_prsc )
11737.       t$2380 = _zla( 0, nd_profile_aerosol_prsc )
11962.       t$2381 = _zla( 0, nd_opt_level_aerosol_prsc )
11737.       t$2382 = _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
11737.       t$2383 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
11737.       t$2384 = _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
11737.       t$2385 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_aerosol_prsc ) * _zla( 0, nd_opt_level_aerosol_prsc )
11737.       t$440 = id_ct
11737.       t$2386 = nd_layer + -id_ct + 1
11992.       t$2387 = _zla( 0, nd_layer + -id_ct + 1 )
11737.       t$2388 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
11737.       t$441 = nd_cloud_component
12009.       t$2389 = _zla( 0, nd_cloud_component )
11737.       t$442 = nd_cloud_parameter
12013.       t$2390 = _zla( 0, nd_cloud_parameter )
11737.       t$2391 = _zla( 0, nd_cloud_parameter )
11737.       t$2392 = _zla( 0, nd_cloud_component ) * _zla( 0, nd_cloud_parameter )
11737.       t$2393 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
11737.       t$2394 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_component ) * _zla( 0, nd_layer + -id_ct + 1 )
11737.       t$443 = nd_profile_cloud_prsc
11737.       t$444 = nd_opt_level_cloud_prsc
12034.       t$2395 = _zla( 0, nd_profile_cloud_prsc )
11737.       t$2396 = _zla( 0, nd_profile_cloud_prsc )
12034.       t$2397 = _zla( 0, nd_opt_level_cloud_prsc )
11737.       t$2398 = _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
11737.       t$2399 = _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
11737.       t$2400 = _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_cloud_prsc ) * _zla( 0, nd_opt_level_cloud_prsc )
 2600.       if ( t$30 == 0 ) then
 2600.          t$2406(1) = 4
 2600.          t$2407(1) = 0
 2600.          t$2408(1) = 16
 2600.          t$2403(1) = int( loc( t$29 ), 8 )
 2600.          t$2404(1) = 0
 2600.          t$2405(1) = int( loc( t$2401 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$2403(1), t$2406(1), 1, t$2404(1), t$2405(1), t$2407(1), t$2408(1) )
 2600.       endif
12108.       t$2412 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
12110.       t$2413 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
12110.       t$2415 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16
12091.       t$2417 = 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16
12097.       t$2418 = 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12097.       t$2420 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12099.       t$2421 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12099.       t$2423 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
11737.       t$445 = nd_max_order
12101.       t$2424 = max( 0, nd_max_order )
11737.       t$2425 = _zla( 0, nd_profile ) * max( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
12101.       t$2426 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12101.       t$2428 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + _zla( 0, nd_profile ) * max( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
11737.       t$2429 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
11737.       t$2430 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_ct + 1 )
12104.       t$2431 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + _zla( 0, nd_profile ) * max( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 ) + 7 ) / 8 )
12104.       t$2433 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + _zla( 0, nd_profile ) * max( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 ) + 7 ) / 8 )
11737.       t$2410 = int( _alloc( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
12108.       t$2411 = t$2410
12110.       t$2414 = t$2410 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
12091.       t$2416 = t$2410 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16
12097.       t$2419 = t$2410 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12099.       t$2422 = t$2410 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12101.       t$2427 = t$2410 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 )
12104.       t$2432 = t$2410 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + _zla( 0, nd_profile ) * max( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 8 * ( ( 4 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 16 + 7 ) / 8 ) + 7 ) / 8 )
12128.       if ( nd_layer + -id_ct >= 0 ) then
12129.          if ( nd_profile > 0 ) then
12128.             $I_L12128_678 = 0
12128.             do
12129.                $I_L12129_604 = 0
12129. !dir$ ivdep
12129.                do
12130.                   (ss_prop%k_grey_tot%base_addr)(1 + $I_L12129_604, id_ct + $I_L12128_678, 0, 0) = 0.0
12131.                   (ss_prop%k_ext_scat%base_addr)(1 + $I_L12129_604, id_ct + $I_L12128_678, 0, 0) = 0.0
12132.                   $I_L12129_604 = 1 + $I_L12129_604
12129.                   if ( $I_L12129_604 >= nd_profile ) exit
12129.                enddo
12133.                $I_L12128_678 = 1 + $I_L12128_678
12132.                if ( $I_L12128_678 >= nd_layer + -id_ct + 1 ) exit
12132.             enddo
12132.          endif
12132.       endif
12135.       if ( n_order_phase > 0 ) then
12141.          if ( nd_layer > 0 ) then
12142.             if ( nd_profile + -id_ct >= 0 ) then
12135.                $I_L12135_752 = 0
12135.                do
12141.                   $I_L12141_680 = 0
12141.                   do
12142.                      $I_L12142_606 = 0
12142. !dir$ ivdep
12142.                      do
12143.                         (ss_prop%phase_fnc%base_addr)(id_ct + $I_L12142_606, 1 + $I_L12141_680, 1 + $I_L12135_752, 0, 0) = 0.0
12144.                         $I_L12142_606 = 1 + $I_L12142_606
12142.                         if ( $I_L12142_606 >= nd_profile + -id_ct + 1 ) exit
12142.                      enddo
12145.                      $I_L12141_680 = 1 + $I_L12141_680
12144.                      if ( $I_L12141_680 >= nd_layer ) exit
12144.                   enddo
12146.                   $I_L12135_752 = 1 + $I_L12135_752
12145.                   if ( $I_L12135_752 >= n_order_phase ) exit
12145.                enddo
12145.             endif
12145.          endif
12145.       endif
12149.       if ( l_rescale ) then
12156.          if ( nd_layer + -id_ct >= 0 ) then
12157.             if ( nd_profile > 0 ) then
12156.                $I_L12156_682 = 0
12156.                do
12157.                   $I_L12157_608 = 0
12157. !dir$ ivdep
12157.                   do
12158.                      (ss_prop%forward_scatter%base_addr)(1 + $I_L12157_608, id_ct + $I_L12156_682, 0, 0) = 0.0
12159.                      $I_L12157_608 = 1 + $I_L12157_608
12157.                      if ( $I_L12157_608 >= nd_profile ) exit
12157.                   enddo
12160.                   $I_L12156_682 = 1 + $I_L12156_682
12159.                   if ( $I_L12156_682 >= nd_layer + -id_ct + 1 ) exit
12159.                enddo
12159.             endif
12159.          endif
12159.       endif
12163.       if ( l_solar_phf ) then
12165.          if ( n_direction > 0 ) then
12171.             if ( nd_layer + -id_ct >= 0 ) then
12172.                if ( nd_profile > 0 ) then
12165.                   $I_L12165_754 = 0
12165.                   do
12171.                      $I_L12171_684 = 0
12171.                      do
12172.                         $I_L12172_610 = 0
12172. !dir$ ivdep
12172.                         do
12173.                            (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12172_610, id_ct + $I_L12171_684, 1 + $I_L12165_754, 0, 0) = 0.0
12174.                            $I_L12172_610 = 1 + $I_L12172_610
12172.                            if ( $I_L12172_610 >= nd_profile ) exit
12172.                         enddo
12175.                         $I_L12171_684 = 1 + $I_L12171_684
12174.                         if ( $I_L12171_684 >= nd_layer + -id_ct + 1 ) exit
12174.                      enddo
12176.                      $I_L12165_754 = 1 + $I_L12165_754
12175.                      if ( $I_L12165_754 >= n_direction ) exit
12175.                   enddo
12175.                endif
12175.             endif
12175.          endif
12183.          if ( nd_layer + -id_ct >= 0 ) then
12184.             if ( nd_profile > 0 ) then
12183.                $I_L12183_686 = 0
12183.                do
12184.                   $I_L12184_612 = 0
12184. !dir$ ivdep
12184.                   do
12185.                      (ss_prop%forward_solar%base_addr)(1 + $I_L12184_612, id_ct + $I_L12183_686, 0, 0) = 0.0
12186.                      $I_L12184_612 = 1 + $I_L12184_612
12184.                      if ( $I_L12184_612 >= nd_profile ) exit
12184.                   enddo
12187.                   $I_L12183_686 = 1 + $I_L12183_686
12186.                   if ( $I_L12183_686 >= nd_layer + -id_ct + 1 ) exit
12186.                enddo
12186.             endif
12186.          endif
12186.       endif
12198.       if ( l_rayleigh ) then
12206.          if ( nd_layer + -id_ct >= 0 ) then
12207.             if ( nd_profile > 0 ) then
12206.                $I_L12206_688 = 0
12206.                do
12207.                   $I_L12207_614 = 0
12207. !dir$ ivdep
12207.                   do
12208.                      (ss_prop%k_ext_scat%base_addr)(1 + $I_L12207_614, id_ct + $I_L12206_688, 0, 0) = (ss_prop%k_ext_scat%base_addr)(1 + $I_L12207_614, id_ct + $I_L12206_688, 0, 0) + rayleigh_coeff
12210.                      $I_L12207_614 = 1 + $I_L12207_614
12207.                      if ( $I_L12207_614 >= nd_profile ) exit
12207.                   enddo
12211.                   $I_L12206_688 = 1 + $I_L12206_688
12210.                   if ( $I_L12206_688 >= nd_layer + -id_ct + 1 ) exit
12210.                enddo
12210.             endif
12210.          endif
12214.          if ( n_order_phase >= 2 ) then
12223.             if ( nd_layer + -id_ct >= 0 ) then
12224.                if ( nd_profile > 0 ) then
12223.                   $I_L12223_690 = 0
12223.                   do
12224.                      $I_L12224_616 = 0
12224. !dir$ ivdep
12224.                      do
12225.                         (ss_prop%phase_fnc%base_addr)(1 + $I_L12224_616, id_ct + $I_L12223_690, 2, 0, 0) = (ss_prop%phase_fnc%base_addr)(1 + $I_L12224_616, id_ct + $I_L12223_690, 2, 0, 0) + 1.0000000000000001e-1 * rayleigh_coeff
12228.                         $I_L12224_616 = 1 + $I_L12224_616
12224.                         if ( $I_L12224_616 >= nd_profile ) exit
12224.                      enddo
12229.                      $I_L12223_690 = 1 + $I_L12223_690
12228.                      if ( $I_L12223_690 >= nd_layer + -id_ct + 1 ) exit
12228.                   enddo
12228.                endif
12228.             endif
12228.          endif
12235.          if ( l_solar_phf ) then
12237.             if ( n_direction > 0 ) then
12247.                if ( nd_layer + -id_ct >= 0 ) then
12248.                   if ( nd_profile > 0 ) then
12237.                      $I_L12237_802 = 0
12237.                      do
12247.                         $I_L12247_798 = 0
12247.                         do
12248.                            $I_L12248_794 = 0
12248.                            do
12237.                               $I_L12237_756 = 0
12237. !dir$ shortloop16
12237. !dir$ blocking_size( 8, 8 )
12237.                               do
12247.                                  $I_L12247_746 = 0
12247.                                  if ( min( nd_layer + -id_ct + 1, 8 + 8 * $I_L12247_798 ) + -8 * $I_L12247_798 >= 4 ) then
12247.                                     $I_L12247_809 = 0
12247. !dir$ shortloop16
12247. !dir$ blocking_size( 8, 8 )
12247.                                     do
12248.                                        $I_L12248_618 = 0
12248. !dir$ ivdep
12248. !dir$ blocking_size( 256, 256 )
12248.                                        do
12249.                                           (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) = (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) + ( 1.0 + cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) * cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) ) * rayleigh_coeff * 7.5e-1
12249.                                           (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) = (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) + ( 1.0 + cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) * cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) ) * rayleigh_coeff * 7.5e-1
12249.                                           (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809 + 2, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) = (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809 + 2, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) + ( 1.0 + cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) * cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) ) * rayleigh_coeff * 7.5e-1
12249.                                           (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809 + 3, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) = (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + 8 * $I_L12247_798 + 4 * $I_L12247_809 + 3, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) + ( 1.0 + cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) * cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) ) * rayleigh_coeff * 7.5e-1
12248.                                           $I_L12248_618 = 1 + $I_L12248_618
12248.                                           if ( $I_L12248_618 >= min( nd_profile, 256 + 256 * $I_L12248_794 ) + -256 * $I_L12248_794 ) exit
12248.                                        enddo
12247.                                        $I_L12247_809 = 1 + $I_L12247_809
12247.                                        if ( $I_L12247_809 >= _rsh( min( nd_layer + -id_ct + 1, 8 + 8 * $I_L12247_798 ) + -8 * $I_L12247_798, 2 ) ) exit
12247.                                     enddo
12247.                                     $I_L12247_746 = and( 0xfffffffffffffffcUL, min( nd_layer + -id_ct + 1, 8 + 8 * $I_L12247_798 ) + -8 * $I_L12247_798 )
12247.                                  endif
12247.                                  if ( $I_L12247_746 < min( nd_layer + -id_ct + 1, 8 + 8 * $I_L12247_798 ) + -8 * $I_L12247_798 ) then
12247.                                     $I_L12247_806 = 0
12247. !dir$ shortloop16
12247. !dir$ blocking_size( 8, 8 )
12247.                                     do
12248.                                        $I_L12248_618 = 0
12248. !dir$ ivdep
12248. !dir$ blocking_size( 256, 256 )
12248.                                        do
12249.                                           (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + $I_L12247_746 + $I_L12247_806 + 8 * $I_L12247_798, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) = (ss_prop%phase_fnc_solar%base_addr)($I_L12248_618 + 256 * $I_L12248_794 + 1, id_ct + $I_L12247_746 + $I_L12247_806 + 8 * $I_L12247_798, $I_L12237_756 + 8 * $I_L12237_802 + 1, 0, 0) + ( 1.0 + cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) * cos_sol_view($I_L12248_618 + 256 * $I_L12248_794 + 1, $I_L12237_756 + 8 * $I_L12237_802 + 1) ) * rayleigh_coeff * 7.5e-1
12248.                                           $I_L12248_618 = 1 + $I_L12248_618
12248.                                           if ( $I_L12248_618 >= min( nd_profile, 256 + 256 * $I_L12248_794 ) + -256 * $I_L12248_794 ) exit
12248.                                        enddo
12247.                                        $I_L12247_806 = 1 + $I_L12247_806
12247.                                        if ( $I_L12247_806 >= min( nd_layer + -id_ct + 1, 8 + 8 * $I_L12247_798 ) + -$I_L12247_746 + -8 * $I_L12247_798 ) exit
12247.                                     enddo
12247.                                  endif
12237.                                  $I_L12237_756 = 1 + $I_L12237_756
12253.                                  if ( $I_L12237_756 >= min( n_direction, 8 + 8 * $I_L12237_802 ) + -8 * $I_L12237_802 ) exit
12253.                               enddo
12248.                               $I_L12248_794 = 1 + $I_L12248_794
12248.                               if ( $I_L12248_794 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
12248.                            enddo
12247.                            $I_L12247_798 = 1 + $I_L12247_798
12254.                            if ( $I_L12247_798 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_ct + 8, 3 ) ) ) exit
12254.                         enddo
12237.                         $I_L12237_802 = 1 + $I_L12237_802
12237.                         if ( $I_L12237_802 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
12237.                      enddo
12237.                   endif
12237.                endif
12237.             endif
12237.          endif
12237.       endif
12261.       if ( l_aerosol ) then
12288.          t$6236 = 0
12288.          t$6237 = 0
12288.          $t_S24 = 0
12288.          t$6241 = 0
12288.          if ( ss_prop%k_grey_tot%header%a_contig == 1 .or. -ss_prop%k_grey_tot%header%el_len + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%header%dv_smunit == 0 .and. -ss_prop%k_grey_tot%dim_2%SM + ss_prop%k_grey_tot%dim_1%EX * ss_prop%k_grey_tot%dim_1%SM == 0 ) then
12288. !dir$ suppress (ss_prop%k_grey_tot%base_addr)(ss_prop%k_grey_tot%dim_1%LB, ss_prop%k_grey_tot%dim_2%LB, 0, 0)
12288.             t$6235 = loc( (ss_prop%k_grey_tot%base_addr)(ss_prop%k_grey_tot%dim_1%LB, ss_prop%k_grey_tot%dim_2%LB, 0, 0) )
12288.          else
12288.             t$6236 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) )
12288.             t$6237 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_2%EX + 1 ) ) )
12288.             $t_S24 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) )
12288.             t$6241 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
12288.             $F_A33 = -1 + ss_prop%k_grey_tot%dim_2%EX + 1
12288.             $F_A34 = -1 + ss_prop%k_grey_tot%dim_1%EX + 1
12288.             if ( and( -$F_A34, -$F_A33 ) < 0 ) then
12288.                $SC_ss_prop_I160 = ss_prop%k_grey_tot%dim_1%SM
12288.                $SC_ss_prop_I159 = ss_prop%k_grey_tot%dim_1%EX
12288.                $SC_ss_prop_I161 = ss_prop%k_grey_tot%dim_1%LB
12288.                $SC_ss_prop_I163 = ss_prop%k_grey_tot%dim_2%SM
12288.                $SC_ss_prop_I162 = ss_prop%k_grey_tot%dim_2%EX
12288.                $SC_ss_prop_I164 = ss_prop%k_grey_tot%dim_2%LB
12288.                $SC_ss_prop_I166 = ss_prop%k_grey_tot%dim_3%SM
12288.                $SC_ss_prop_I165 = ss_prop%k_grey_tot%dim_3%EX
12288.                $SC_ss_prop_I167 = ss_prop%k_grey_tot%dim_3%LB
12288.                $I_L12288_726 = 0
12288.                do
12288.                   $I_L12288_658 = 0
12288. !dir$ ivdep
12288.                   do
12288.                      t$6240(1 + $I_L12288_658, 1 + $I_L12288_726) = (ss_prop%k_grey_tot%base_addr)($SC_ss_prop_I161 + $I_L12288_658, $SC_ss_prop_I164 + $I_L12288_726, 0, 0)
12288.                      $I_L12288_658 = 1 + $I_L12288_658
12288.                      if ( $I_L12288_658 >= $F_A34 ) exit
12288.                   enddo
12288.                   $I_L12288_726 = 1 + $I_L12288_726
12288.                   if ( $I_L12288_726 >= $F_A33 ) exit
12288.                enddo
12288.             endif
12288. !dir$ suppress t$6240
12288.             t$6235 = loc( t$6240 )
12288.          endif
12289.          t$6243 = 0
12289.          t$6244 = 0
12289.          $t_S23 = 0
12289.          t$6248 = 0
12289.          if ( ss_prop%k_ext_scat%header%a_contig == 1 .or. -ss_prop%k_ext_scat%header%el_len + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%header%dv_smunit == 0 .and. -ss_prop%k_ext_scat%dim_2%SM + ss_prop%k_ext_scat%dim_1%EX * ss_prop%k_ext_scat%dim_1%SM == 0 ) then
12289. !dir$ suppress (ss_prop%k_ext_scat%base_addr)(ss_prop%k_ext_scat%dim_1%LB, ss_prop%k_ext_scat%dim_2%LB, 0, 0)
12289.             t$6242 = loc( (ss_prop%k_ext_scat%base_addr)(ss_prop%k_ext_scat%dim_1%LB, ss_prop%k_ext_scat%dim_2%LB, 0, 0) )
12289.          else
12289.             t$6243 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) )
12289.             t$6244 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_2%EX + 1 ) ) )
12289.             $t_S23 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) )
12289.             t$6248 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
12289.             $F_A35 = -1 + ss_prop%k_ext_scat%dim_2%EX + 1
12289.             $F_A36 = -1 + ss_prop%k_ext_scat%dim_1%EX + 1
12289.             if ( and( -$F_A36, -$F_A35 ) < 0 ) then
12289.                $SC_ss_prop_I169 = ss_prop%k_ext_scat%dim_1%SM
12289.                $SC_ss_prop_I168 = ss_prop%k_ext_scat%dim_1%EX
12289.                $SC_ss_prop_I170 = ss_prop%k_ext_scat%dim_1%LB
12289.                $SC_ss_prop_I172 = ss_prop%k_ext_scat%dim_2%SM
12289.                $SC_ss_prop_I171 = ss_prop%k_ext_scat%dim_2%EX
12289.                $SC_ss_prop_I173 = ss_prop%k_ext_scat%dim_2%LB
12289.                $SC_ss_prop_I175 = ss_prop%k_ext_scat%dim_3%SM
12289.                $SC_ss_prop_I174 = ss_prop%k_ext_scat%dim_3%EX
12289.                $SC_ss_prop_I176 = ss_prop%k_ext_scat%dim_3%LB
12289.                $I_L12289_728 = 0
12289.                do
12289.                   $I_L12289_660 = 0
12289. !dir$ ivdep
12289.                   do
12289.                      t$6247(1 + $I_L12289_660, 1 + $I_L12289_728) = (ss_prop%k_ext_scat%base_addr)($SC_ss_prop_I170 + $I_L12289_660, $SC_ss_prop_I173 + $I_L12289_728, 0, 0)
12289.                      $I_L12289_660 = 1 + $I_L12289_660
12289.                      if ( $I_L12289_660 >= $F_A36 ) exit
12289.                   enddo
12289.                   $I_L12289_728 = 1 + $I_L12289_728
12289.                   if ( $I_L12289_728 >= $F_A35 ) exit
12289.                enddo
12289.             endif
12289. !dir$ suppress t$6247
12289.             t$6242 = loc( t$6247 )
12289.          endif
12290.          t$6250 = 0
12290.          t$6251 = 0
12290.          t$6252 = 0
12290.          $t_S21 = 0
12290.          $t_S22 = 0
12290.          t$6257 = 0
12290.          if ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%EX * ss_prop%phase_fnc%dim_1%SM == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%EX * ss_prop%phase_fnc%dim_2%SM == 0 ) then
12290. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 0, 0)
12290.             t$6249 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 0, 0) )
12290.          else
12290.             t$6250 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
12290.             t$6251 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) )
12290.             t$6252 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) )
12290.             $t_S21 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
12290.             $t_S22 = max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) * ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
12290.             t$6257 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
12290.             $F_A37 = -1 + ss_prop%phase_fnc%dim_3%EX + 1
12290.             $F_A38 = -1 + ss_prop%phase_fnc%dim_2%EX + 1
12290.             $F_A39 = -1 + ss_prop%phase_fnc%dim_1%EX + 1
12290.             if ( and( and( -$F_A38, -$F_A37 ), -$F_A39 ) < 0 ) then
12290.                $SC_ss_prop_I178 = ss_prop%phase_fnc%dim_1%SM
12290.                $SC_ss_prop_I177 = ss_prop%phase_fnc%dim_1%EX
12290.                $SC_ss_prop_I179 = ss_prop%phase_fnc%dim_1%LB
12290.                $SC_ss_prop_I181 = ss_prop%phase_fnc%dim_2%SM
12290.                $SC_ss_prop_I180 = ss_prop%phase_fnc%dim_2%EX
12290.                $SC_ss_prop_I182 = ss_prop%phase_fnc%dim_2%LB
12290.                $SC_ss_prop_I184 = ss_prop%phase_fnc%dim_3%SM
12290.                $SC_ss_prop_I183 = ss_prop%phase_fnc%dim_3%EX
12290.                $SC_ss_prop_I185 = ss_prop%phase_fnc%dim_3%LB
12290.                $SC_ss_prop_I187 = ss_prop%phase_fnc%dim_4%SM
12290.                $SC_ss_prop_I186 = ss_prop%phase_fnc%dim_4%EX
12290.                $SC_ss_prop_I188 = ss_prop%phase_fnc%dim_4%LB
12290.                $I_L12290_782 = 0
12290.                do
12290.                   $I_L12290_730 = 0
12290.                   do
12290.                      $I_L12290_662 = 0
12290. !dir$ ivdep
12290.                      do
12290.                         t$6256(1 + $I_L12290_662, 1 + $I_L12290_730, 1 + $I_L12290_782) = (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I179 + $I_L12290_662, $SC_ss_prop_I182 + $I_L12290_730, $SC_ss_prop_I185 + $I_L12290_782, 0, 0)
12290.                         $I_L12290_662 = 1 + $I_L12290_662
12290.                         if ( $I_L12290_662 >= $F_A39 ) exit
12290.                      enddo
12290.                      $I_L12290_730 = 1 + $I_L12290_730
12290.                      if ( $I_L12290_730 >= $F_A38 ) exit
12290.                   enddo
12290.                   $I_L12290_782 = 1 + $I_L12290_782
12290.                   if ( $I_L12290_782 >= $F_A37 ) exit
12290.                enddo
12290.             endif
12290. !dir$ suppress t$6256
12290.             t$6249 = loc( t$6256 )
12290.          endif
12291.          t$6259 = 0
12291.          t$6260 = 0
12291.          $t_S20 = 0
12291.          t$6264 = 0
12291.          if ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%EX * ss_prop%forward_scatter%dim_1%SM == 0 ) then
12291. !dir$ suppress (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, 0, 0)
12291.             t$6258 = loc( (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, 0, 0) )
12291.          else
12291.             t$6259 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) )
12291.             t$6260 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) )
12291.             $t_S20 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) )
12291.             t$6264 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
12291.             $F_A40 = -1 + ss_prop%forward_scatter%dim_2%EX + 1
12291.             $F_A41 = -1 + ss_prop%forward_scatter%dim_1%EX + 1
12291.             if ( and( -$F_A41, -$F_A40 ) < 0 ) then
12291.                $SC_ss_prop_I190 = ss_prop%forward_scatter%dim_1%SM
12291.                $SC_ss_prop_I189 = ss_prop%forward_scatter%dim_1%EX
12291.                $SC_ss_prop_I191 = ss_prop%forward_scatter%dim_1%LB
12291.                $SC_ss_prop_I193 = ss_prop%forward_scatter%dim_2%SM
12291.                $SC_ss_prop_I192 = ss_prop%forward_scatter%dim_2%EX
12291.                $SC_ss_prop_I194 = ss_prop%forward_scatter%dim_2%LB
12291.                $SC_ss_prop_I196 = ss_prop%forward_scatter%dim_3%SM
12291.                $SC_ss_prop_I195 = ss_prop%forward_scatter%dim_3%EX
12291.                $SC_ss_prop_I197 = ss_prop%forward_scatter%dim_3%LB
12291.                $I_L12291_732 = 0
12291.                do
12291.                   $I_L12291_664 = 0
12291. !dir$ ivdep
12291.                   do
12291.                      t$6263(1 + $I_L12291_664, 1 + $I_L12291_732) = (ss_prop%forward_scatter%base_addr)($SC_ss_prop_I191 + $I_L12291_664, $SC_ss_prop_I194 + $I_L12291_732, 0, 0)
12291.                      $I_L12291_664 = 1 + $I_L12291_664
12291.                      if ( $I_L12291_664 >= $F_A41 ) exit
12291.                   enddo
12291.                   $I_L12291_732 = 1 + $I_L12291_732
12291.                   if ( $I_L12291_732 >= $F_A40 ) exit
12291.                enddo
12291.             endif
12291. !dir$ suppress t$6263
12291.             t$6258 = loc( t$6263 )
12291.          endif
12292.          t$6266 = 0
12292.          t$6267 = 0
12292.          $t_S19 = 0
12292.          t$6271 = 0
12292.          if ( ss_prop%forward_solar%header%a_contig == 1 .or. -ss_prop%forward_solar%header%el_len + ss_prop%forward_solar%dim_1%SM * ss_prop%forward_solar%header%dv_smunit == 0 .and. -ss_prop%forward_solar%dim_2%SM + ss_prop%forward_solar%dim_1%EX * ss_prop%forward_solar%dim_1%SM == 0 ) then
12292. !dir$ suppress (ss_prop%forward_solar%base_addr)(ss_prop%forward_solar%dim_1%LB, ss_prop%forward_solar%dim_2%LB, 0, 0)
12292.             t$6265 = loc( (ss_prop%forward_solar%base_addr)(ss_prop%forward_solar%dim_1%LB, ss_prop%forward_solar%dim_2%LB, 0, 0) )
12292.          else
12292.             t$6266 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) )
12292.             t$6267 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_2%EX + 1 ) ) )
12292.             $t_S19 = ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) )
12292.             t$6271 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_solar%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_solar%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
12292.             $F_A42 = -1 + ss_prop%forward_solar%dim_2%EX + 1
12292.             $F_A43 = -1 + ss_prop%forward_solar%dim_1%EX + 1
12292.             if ( and( -$F_A43, -$F_A42 ) < 0 ) then
12292.                $SC_ss_prop_I199 = ss_prop%forward_solar%dim_1%SM
12292.                $SC_ss_prop_I198 = ss_prop%forward_solar%dim_1%EX
12292.                $SC_ss_prop_I200 = ss_prop%forward_solar%dim_1%LB
12292.                $SC_ss_prop_I202 = ss_prop%forward_solar%dim_2%SM
12292.                $SC_ss_prop_I201 = ss_prop%forward_solar%dim_2%EX
12292.                $SC_ss_prop_I203 = ss_prop%forward_solar%dim_2%LB
12292.                $SC_ss_prop_I205 = ss_prop%forward_solar%dim_3%SM
12292.                $SC_ss_prop_I204 = ss_prop%forward_solar%dim_3%EX
12292.                $SC_ss_prop_I206 = ss_prop%forward_solar%dim_3%LB
12292.                $I_L12292_734 = 0
12292.                do
12292.                   $I_L12292_666 = 0
12292. !dir$ ivdep
12292.                   do
12292.                      t$6270(1 + $I_L12292_666, 1 + $I_L12292_734) = (ss_prop%forward_solar%base_addr)($SC_ss_prop_I200 + $I_L12292_666, $SC_ss_prop_I203 + $I_L12292_734, 0, 0)
12292.                      $I_L12292_666 = 1 + $I_L12292_666
12292.                      if ( $I_L12292_666 >= $F_A43 ) exit
12292.                   enddo
12292.                   $I_L12292_734 = 1 + $I_L12292_734
12292.                   if ( $I_L12292_734 >= $F_A42 ) exit
12292.                enddo
12292.             endif
12292. !dir$ suppress t$6270
12292.             t$6265 = loc( t$6270 )
12292.          endif
12293.          t$6273 = 0
12293.          t$6274 = 0
12293.          t$6275 = 0
12293.          t$6280 = 0
12293.          if ( ss_prop%phase_fnc_solar%header%a_contig == 1 .or. -ss_prop%phase_fnc_solar%header%el_len + ss_prop%phase_fnc_solar%dim_1%SM * ss_prop%phase_fnc_solar%header%dv_smunit == 0 .and. -ss_prop%phase_fnc_solar%dim_2%SM + ss_prop%phase_fnc_solar%dim_1%EX * ss_prop%phase_fnc_solar%dim_1%SM == 0 .and. -ss_prop%phase_fnc_solar%dim_3%SM + ss_prop%phase_fnc_solar%dim_2%EX * ss_prop%phase_fnc_solar%dim_2%SM == 0 ) then
12293. !dir$ suppress (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, 0, 0)
12293.             t$6272 = loc( (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, 0, 0) )
12293.          else
12293.             t$6273 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) )
12293.             t$6274 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) )
12293.             t$6275 = ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1 ) ) )
12293.             t$6280 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc_solar%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
12272.             call _f90_copy_from_dv( t$6279, ss_prop%phase_fnc_solar )
12293. !dir$ suppress t$6279
12293.             t$6272 = loc( t$6279 )
12293.          endif
12272.          ipa$12027 = 1
12272.          call opt_prop_aerosol( ierr, n_profile, ipa$12027, n_layer, n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, n_aerosol, aerosol_mix_ratio(1, 1, 1), i_aerosol_parametrization(1), i_humidity_pointer(1, 1), humidities(1, 1), delta_humidity, mean_rel_humidity(1, 1), aerosol_absorption(1, 1), aerosol_scattering(1, 1), aerosol_phase_fnc(1, 1, 1), l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view(1, 1), p(1, 1), density(1, 1), n_opt_level_aerosol_prsc(1), aerosol_pressure_prsc(1, 1, 1), aerosol_absorption_prsc(1, 1, 1), aerosol_scattering_prsc(1, 1, 1), aerosol_phase_fnc_prsc(1, 1, 1, 1), t$6235, t$6242, t$6249, t$6258, t$6265, t$6272, nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_layer, nd_aerosol_species, nd_humidities, nd_phase_term, nd_max_order, nd_direction, nd_profile_aerosol_prsc, nd_opt_level_aerosol_prsc )
12293.          if ( ( ss_prop%phase_fnc_solar%header%a_contig == 1 .or. -ss_prop%phase_fnc_solar%header%el_len + ss_prop%phase_fnc_solar%dim_1%SM * ss_prop%phase_fnc_solar%header%dv_smunit == 0 .and. -ss_prop%phase_fnc_solar%dim_2%SM + ss_prop%phase_fnc_solar%dim_1%EX * ss_prop%phase_fnc_solar%dim_1%SM == 0 .and. -ss_prop%phase_fnc_solar%dim_3%SM + ss_prop%phase_fnc_solar%dim_2%EX * ss_prop%phase_fnc_solar%dim_2%SM == 0 ) == 0 ) then
12272.             call _f90_copy_to_dv( ss_prop%phase_fnc_solar, t$6279 )
12293.             _free( t$6280 )
12293.          endif
12292.          if ( ( ss_prop%forward_solar%header%a_contig == 1 .or. -ss_prop%forward_solar%header%el_len + ss_prop%forward_solar%dim_1%SM * ss_prop%forward_solar%header%dv_smunit == 0 .and. -ss_prop%forward_solar%dim_2%SM + ss_prop%forward_solar%dim_1%EX * ss_prop%forward_solar%dim_1%SM == 0 ) == 0 ) then
12272.             $F_A44 = t$6267
12272.             $F_A45 = t$6266
12272.             if ( and( -$F_A45, -$F_A44 ) < 0 ) then
12272.                $SC_ss_prop_I199 = ss_prop%forward_solar%dim_1%SM
12272.                $SC_ss_prop_I200 = ss_prop%forward_solar%dim_1%LB
12272.                $SC_ss_prop_I202 = ss_prop%forward_solar%dim_2%SM
12272.                $SC_ss_prop_I203 = ss_prop%forward_solar%dim_2%LB
12272.                $SC_ss_prop_I205 = ss_prop%forward_solar%dim_3%SM
12272.                $SC_ss_prop_I204 = ss_prop%forward_solar%dim_3%EX
12272.                $SC_ss_prop_I206 = ss_prop%forward_solar%dim_3%LB
12272.                $I_L12272_736 = 0
12272.                do
12272.                   $I_L12272_668 = 0
12272. !dir$ ivdep
12272.                   do
12272.                      (ss_prop%forward_solar%base_addr)($SC_ss_prop_I200 + $I_L12272_668, $SC_ss_prop_I203 + $I_L12272_736, 0, 0) = t$6270(1 + $I_L12272_668, 1 + $I_L12272_736)
12272.                      $I_L12272_668 = 1 + $I_L12272_668
12272.                      if ( $I_L12272_668 >= $F_A45 ) exit
12272.                   enddo
12272.                   $I_L12272_736 = 1 + $I_L12272_736
12272.                   if ( $I_L12272_736 >= $F_A44 ) exit
12272.                enddo
12272.             endif
12292.             _free( t$6271 )
12292.          endif
12291.          if ( ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%EX * ss_prop%forward_scatter%dim_1%SM == 0 ) == 0 ) then
12272.             $F_A46 = t$6260
12272.             $F_A47 = t$6259
12272.             if ( and( -$F_A47, -$F_A46 ) < 0 ) then
12272.                $SC_ss_prop_I190 = ss_prop%forward_scatter%dim_1%SM
12272.                $SC_ss_prop_I191 = ss_prop%forward_scatter%dim_1%LB
12272.                $SC_ss_prop_I193 = ss_prop%forward_scatter%dim_2%SM
12272.                $SC_ss_prop_I194 = ss_prop%forward_scatter%dim_2%LB
12272.                $SC_ss_prop_I196 = ss_prop%forward_scatter%dim_3%SM
12272.                $SC_ss_prop_I195 = ss_prop%forward_scatter%dim_3%EX
12272.                $SC_ss_prop_I197 = ss_prop%forward_scatter%dim_3%LB
12272.                $I_L12272_738 = 0
12272.                do
12272.                   $I_L12272_670 = 0
12272. !dir$ ivdep
12272.                   do
12272.                      (ss_prop%forward_scatter%base_addr)($SC_ss_prop_I191 + $I_L12272_670, $SC_ss_prop_I194 + $I_L12272_738, 0, 0) = t$6263(1 + $I_L12272_670, 1 + $I_L12272_738)
12272.                      $I_L12272_670 = 1 + $I_L12272_670
12272.                      if ( $I_L12272_670 >= $F_A47 ) exit
12272.                   enddo
12272.                   $I_L12272_738 = 1 + $I_L12272_738
12272.                   if ( $I_L12272_738 >= $F_A46 ) exit
12272.                enddo
12272.             endif
12291.             _free( t$6264 )
12291.          endif
12290.          if ( ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%EX * ss_prop%phase_fnc%dim_1%SM == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%EX * ss_prop%phase_fnc%dim_2%SM == 0 ) == 0 ) then
12272.             $F_A48 = t$6252
12272.             $F_A49 = t$6251
12272.             $F_A50 = t$6250
12272.             if ( and( and( -$F_A49, -$F_A48 ), -$F_A50 ) < 0 ) then
12272.                $SC_ss_prop_I178 = ss_prop%phase_fnc%dim_1%SM
12272.                $SC_ss_prop_I179 = ss_prop%phase_fnc%dim_1%LB
12272.                $SC_ss_prop_I181 = ss_prop%phase_fnc%dim_2%SM
12272.                $SC_ss_prop_I182 = ss_prop%phase_fnc%dim_2%LB
12272.                $SC_ss_prop_I184 = ss_prop%phase_fnc%dim_3%SM
12272.                $SC_ss_prop_I185 = ss_prop%phase_fnc%dim_3%LB
12272.                $SC_ss_prop_I187 = ss_prop%phase_fnc%dim_4%SM
12272.                $SC_ss_prop_I186 = ss_prop%phase_fnc%dim_4%EX
12272.                $SC_ss_prop_I188 = ss_prop%phase_fnc%dim_4%LB
12272.                $I_L12272_784 = 0
12272.                do
12272.                   $I_L12272_740 = 0
12272.                   do
12272.                      $I_L12272_672 = 0
12272. !dir$ ivdep
12272.                      do
12272.                         (ss_prop%phase_fnc%base_addr)($SC_ss_prop_I179 + $I_L12272_672, $SC_ss_prop_I182 + $I_L12272_740, $SC_ss_prop_I185 + $I_L12272_784, 0, 0) = t$6256(1 + $I_L12272_672, 1 + $I_L12272_740, 1 + $I_L12272_784)
12272.                         $I_L12272_672 = 1 + $I_L12272_672
12272.                         if ( $I_L12272_672 >= $F_A50 ) exit
12272.                      enddo
12272.                      $I_L12272_740 = 1 + $I_L12272_740
12272.                      if ( $I_L12272_740 >= $F_A49 ) exit
12272.                   enddo
12272.                   $I_L12272_784 = 1 + $I_L12272_784
12272.                   if ( $I_L12272_784 >= $F_A48 ) exit
12272.                enddo
12272.             endif
12290.             _free( t$6257 )
12290.          endif
12289.          if ( ( ss_prop%k_ext_scat%header%a_contig == 1 .or. -ss_prop%k_ext_scat%header%el_len + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%header%dv_smunit == 0 .and. -ss_prop%k_ext_scat%dim_2%SM + ss_prop%k_ext_scat%dim_1%EX * ss_prop%k_ext_scat%dim_1%SM == 0 ) == 0 ) then
12272.             $F_A51 = t$6244
12272.             $F_A52 = t$6243
12272.             if ( and( -$F_A52, -$F_A51 ) < 0 ) then
12272.                $SC_ss_prop_I169 = ss_prop%k_ext_scat%dim_1%SM
12272.                $SC_ss_prop_I170 = ss_prop%k_ext_scat%dim_1%LB
12272.                $SC_ss_prop_I172 = ss_prop%k_ext_scat%dim_2%SM
12272.                $SC_ss_prop_I173 = ss_prop%k_ext_scat%dim_2%LB
12272.                $SC_ss_prop_I175 = ss_prop%k_ext_scat%dim_3%SM
12272.                $SC_ss_prop_I174 = ss_prop%k_ext_scat%dim_3%EX
12272.                $SC_ss_prop_I176 = ss_prop%k_ext_scat%dim_3%LB
12272.                $I_L12272_742 = 0
12272.                do
12272.                   $I_L12272_674 = 0
12272. !dir$ ivdep
12272.                   do
12272.                      (ss_prop%k_ext_scat%base_addr)($SC_ss_prop_I170 + $I_L12272_674, $SC_ss_prop_I173 + $I_L12272_742, 0, 0) = t$6247(1 + $I_L12272_674, 1 + $I_L12272_742)
12272.                      $I_L12272_674 = 1 + $I_L12272_674
12272.                      if ( $I_L12272_674 >= $F_A52 ) exit
12272.                   enddo
12272.                   $I_L12272_742 = 1 + $I_L12272_742
12272.                   if ( $I_L12272_742 >= $F_A51 ) exit
12272.                enddo
12272.             endif
12289.             _free( t$6248 )
12289.          endif
12288.          if ( ( ss_prop%k_grey_tot%header%a_contig == 1 .or. -ss_prop%k_grey_tot%header%el_len + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%header%dv_smunit == 0 .and. -ss_prop%k_grey_tot%dim_2%SM + ss_prop%k_grey_tot%dim_1%EX * ss_prop%k_grey_tot%dim_1%SM == 0 ) == 0 ) then
12272.             $F_A53 = t$6237
12272.             $F_A54 = t$6236
12272.             if ( and( -$F_A54, -$F_A53 ) < 0 ) then
12272.                $SC_ss_prop_I160 = ss_prop%k_grey_tot%dim_1%SM
12272.                $SC_ss_prop_I161 = ss_prop%k_grey_tot%dim_1%LB
12272.                $SC_ss_prop_I163 = ss_prop%k_grey_tot%dim_2%SM
12272.                $SC_ss_prop_I164 = ss_prop%k_grey_tot%dim_2%LB
12272.                $SC_ss_prop_I166 = ss_prop%k_grey_tot%dim_3%SM
12272.                $SC_ss_prop_I165 = ss_prop%k_grey_tot%dim_3%EX
12272.                $SC_ss_prop_I167 = ss_prop%k_grey_tot%dim_3%LB
12272.                $I_L12272_744 = 0
12272.                do
12272.                   $I_L12272_676 = 0
12272. !dir$ ivdep
12272.                   do
12272.                      (ss_prop%k_grey_tot%base_addr)($SC_ss_prop_I161 + $I_L12272_676, $SC_ss_prop_I164 + $I_L12272_744, 0, 0) = t$6240(1 + $I_L12272_676, 1 + $I_L12272_744)
12272.                      $I_L12272_676 = 1 + $I_L12272_676
12272.                      if ( $I_L12272_676 >= $F_A54 ) exit
12272.                   enddo
12272.                   $I_L12272_744 = 1 + $I_L12272_744
12272.                   if ( $I_L12272_744 >= $F_A53 ) exit
12272.                enddo
12272.             endif
12288.             _free( t$6241 )
12288.          endif
12288.       endif
12304.       if ( l_continuum ) then
12307.          if ( n_continuum > 0 ) then
12316.             if ( nd_layer + -id_ct >= 0 ) then
12317.                if ( nd_profile > 0 ) then
12307.                   $I_L12307_804 = 0
12307.                   do
12316.                      $I_L12316_800 = 0
12316.                      do
12317.                         $I_L12317_796 = 0
12317.                         do
12307.                            $I_L12307_759 = 0
12307. !dir$ shortloop16
12307. !dir$ blocking_size( 8, 8 )
12307.                            do
12308.                               $i_continuum_S28 = i_continuum_pointer($I_L12307_759 + 8 * $I_L12307_804 + 1)
12316.                               $SCA_k_continuum_I146 = k_continuum($i_continuum_S28)
12316.                               $I_L12316_749 = 0
12316. !dir$ shortloop16
12316. !dir$ blocking_size( 8, 8 )
12316.                               do
12317.                                  $I_L12317_621 = 0
12317. !dir$ ivdep
12317. !dir$ blocking_size( 256, 256 )
12317.                                  do
12318.                                     (ss_prop%k_grey_tot%base_addr)($I_L12317_621 + 256 * $I_L12317_796 + 1, id_ct + $I_L12316_749 + 8 * $I_L12316_800, 0, 0) = (ss_prop%k_grey_tot%base_addr)($I_L12317_621 + 256 * $I_L12317_796 + 1, id_ct + $I_L12316_749 + 8 * $I_L12316_800, 0, 0) + $SCA_k_continuum_I146 * amount_continuum($I_L12317_621 + 256 * $I_L12317_796 + 1, id_ct + $I_L12316_749 + 8 * $I_L12316_800, $i_continuum_S28)
12317.                                     $I_L12317_621 = 1 + $I_L12317_621
12317.                                     if ( $I_L12317_621 >= min( nd_profile, 256 + 256 * $I_L12317_796 ) + -256 * $I_L12317_796 ) exit
12317.                                  enddo
12316.                                  $I_L12316_749 = 1 + $I_L12316_749
12316.                                  if ( $I_L12316_749 >= min( nd_layer + -id_ct + 1, 8 + 8 * $I_L12316_800 ) + -8 * $I_L12316_800 ) exit
12316.                               enddo
12307.                               $I_L12307_759 = 1 + $I_L12307_759
12321.                               if ( $I_L12307_759 >= min( n_continuum, 8 + 8 * $I_L12307_804 ) + -8 * $I_L12307_804 ) exit
12321.                            enddo
12317.                            $I_L12317_796 = 1 + $I_L12317_796
12317.                            if ( $I_L12317_796 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
12317.                         enddo
12316.                         $I_L12316_800 = 1 + $I_L12316_800
12322.                         if ( $I_L12316_800 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_ct + 8, 3 ) ) ) exit
12322.                      enddo
12307.                      $I_L12307_804 = 1 + $I_L12307_804
12307.                      if ( $I_L12307_804 >= 1 + max( 0, -1 + _rsh( 7 + n_continuum, 3 ) ) ) exit
12307.                   enddo
12307.                endif
12307.             endif
12307.          endif
12307.       endif
12338.       if ( nd_layer + -id_ct >= 0 ) then
12339.          if ( nd_profile > 0 ) then
12338.             $I_L12338_692 = 0
12338.             do
12339.                $I_L12339_624 = 0
12339. !dir$ unroll 4
12339.                do
12340.                   (ss_prop%k_grey_tot%base_addr)(1 + $I_L12339_624, id_ct + $I_L12338_692, 0, 0) = (ss_prop%k_grey_tot%base_addr)(1 + $I_L12339_624, id_ct + $I_L12338_692, 0, 0) + (ss_prop%k_ext_scat%base_addr)(1 + $I_L12339_624, id_ct + $I_L12338_692, 0, 0)
12342.                   $I_L12339_624 = 1 + $I_L12339_624
12339.                   if ( $I_L12339_624 >= nd_profile ) exit
12339.                enddo
12343.                $I_L12338_692 = 1 + $I_L12338_692
12342.                if ( $I_L12338_692 >= nd_layer + -id_ct + 1 ) exit
12342.             enddo
12342.          endif
12342.       endif
12349.       if ( l_cloud == 0 ) then
12352.          if ( n_order_phase > 0 ) then
12362.             if ( nd_layer + -id_ct >= 0 ) then
12363.                if ( nd_profile > 0 ) then
12352.                   $I_L12352_770 = 0
12352.                   do
12362.                      $I_L12362_710 = 0
12362.                      do
12363.                         $I_L12363_642 = 0
12363. !dir$ unroll 4
12363.                         do
12364.                            if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12363_642, id_ct + $I_L12362_710, 0, 0) > 0.0 ) then
12365.                               (ss_prop%phase_fnc%base_addr)(1 + $I_L12363_642, id_ct + $I_L12362_710, 1 + $I_L12352_770, 0, 0) = ( (ss_prop%phase_fnc%base_addr)(1 + $I_L12363_642, id_ct + $I_L12362_710, 1 + $I_L12352_770, 0, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12363_642, id_ct + $I_L12362_710, 0, 0) )
12365.                            endif
12369.                            $I_L12363_642 = 1 + $I_L12363_642
12368.                            if ( $I_L12363_642 >= nd_profile ) exit
12368.                         enddo
12370.                         $I_L12362_710 = 1 + $I_L12362_710
12369.                         if ( $I_L12362_710 >= nd_layer + -id_ct + 1 ) exit
12369.                      enddo
12371.                      $I_L12352_770 = 1 + $I_L12352_770
12370.                      if ( $I_L12352_770 >= n_order_phase ) exit
12370.                   enddo
12370.                endif
12370.             endif
12370.          endif
12373.          if ( l_rescale ) then
12384.             if ( nd_layer + -id_ct >= 0 ) then
12385.                if ( nd_profile > 0 ) then
12384.                   $I_L12384_712 = 0
12384.                   do
12385.                      $I_L12385_644 = 0
12385. !dir$ unroll 4
12385.                      do
12386.                         if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12385_644, id_ct + $I_L12384_712, 0, 0) > 0.0 ) then
12387.                            (ss_prop%forward_scatter%base_addr)(1 + $I_L12385_644, id_ct + $I_L12384_712, 0, 0) = ( (ss_prop%forward_scatter%base_addr)(1 + $I_L12385_644, id_ct + $I_L12384_712, 0, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12385_644, id_ct + $I_L12384_712, 0, 0) )
12387.                         endif
12391.                         $I_L12385_644 = 1 + $I_L12385_644
12390.                         if ( $I_L12385_644 >= nd_profile ) exit
12390.                      enddo
12392.                      $I_L12384_712 = 1 + $I_L12384_712
12391.                      if ( $I_L12384_712 >= nd_layer + -id_ct + 1 ) exit
12391.                   enddo
12391.                endif
12391.             endif
12391.          endif
12396.          if ( l_solar_phf ) then
12408.             if ( nd_layer + -id_ct >= 0 ) then
12409.                if ( nd_profile > 0 ) then
12408.                   $I_L12408_714 = 0
12408.                   do
12409.                      $I_L12409_646 = 0
12409. !dir$ unroll 4
12409.                      do
12410.                         if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12409_646, id_ct + $I_L12408_714, 0, 0) > 0.0 ) then
12411.                            (ss_prop%forward_solar%base_addr)(1 + $I_L12409_646, id_ct + $I_L12408_714, 0, 0) = ( (ss_prop%forward_solar%base_addr)(1 + $I_L12409_646, id_ct + $I_L12408_714, 0, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12409_646, id_ct + $I_L12408_714, 0, 0) )
12411.                         endif
12415.                         $I_L12409_646 = 1 + $I_L12409_646
12414.                         if ( $I_L12409_646 >= nd_profile ) exit
12414.                      enddo
12416.                      $I_L12408_714 = 1 + $I_L12408_714
12415.                      if ( $I_L12408_714 >= nd_layer + -id_ct + 1 ) exit
12415.                   enddo
12415.                endif
12415.             endif
12419.             if ( n_direction > 0 ) then
12428.                if ( nd_layer + -id_ct >= 0 ) then
12429.                   if ( nd_profile > 0 ) then
12419.                      $I_L12419_772 = 0
12419.                      do
12428.                         $I_L12428_716 = 0
12428.                         do
12429.                            $I_L12429_648 = 0
12429. !dir$ unroll 4
12429.                            do
12430.                               if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12429_648, id_ct + $I_L12428_716, 0, 0) > 0.0 ) then
12431.                                  (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12429_648, id_ct + $I_L12428_716, 1 + $I_L12419_772, 0, 0) = ( (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12429_648, id_ct + $I_L12428_716, 1 + $I_L12419_772, 0, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12429_648, id_ct + $I_L12428_716, 0, 0) )
12431.                               endif
12434.                               $I_L12429_648 = 1 + $I_L12429_648
12430.                               if ( $I_L12429_648 >= nd_profile ) exit
12430.                            enddo
12435.                            $I_L12428_716 = 1 + $I_L12428_716
12434.                            if ( $I_L12428_716 >= nd_layer + -id_ct + 1 ) exit
12434.                         enddo
12436.                         $I_L12419_772 = 1 + $I_L12419_772
12435.                         if ( $I_L12419_772 >= n_direction ) exit
12435.                      enddo
12435.                   endif
12435.                endif
12435.             endif
12435.          endif
11737.          _free( t$2410 )
11737.       else
12456.          if ( n_cloud_type > 0 ) then
12456.             $I_L12456_786 = 0
12456.             do
12457.                if ( nd_layer + -id_ct >= 0 ) then
12458.                   if ( nd_profile > 0 ) then
12457.                      $I_L12457_694 = 0
12457.                      do
12458.                         $I_L12458_626 = 0
12458. !dir$ unroll 2
12458.                         do
12459.                            (ss_prop%k_grey_tot%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 1 + $I_L12456_786, 0) = (ss_prop%k_grey_tot%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 0, 0)
12460.                            (ss_prop%k_ext_scat%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 1 + $I_L12456_786, 0) = (ss_prop%k_ext_scat%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 0, 0)
12461.                            (ss_prop%forward_scatter%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 1 + $I_L12456_786, 0) = (ss_prop%forward_scatter%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 0, 0)
12463.                            (ss_prop%forward_solar%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 1 + $I_L12456_786, 0) = (ss_prop%forward_solar%base_addr)(1 + $I_L12458_626, id_ct + $I_L12457_694, 0, 0)
12465.                            $I_L12458_626 = 1 + $I_L12458_626
12458.                            if ( $I_L12458_626 >= nd_profile ) exit
12458.                         enddo
12466.                         $I_L12457_694 = 1 + $I_L12457_694
12465.                         if ( $I_L12457_694 >= nd_layer + -id_ct + 1 ) exit
12465.                      enddo
12465.                   endif
12465.                endif
12467.                if ( n_order_phase > 0 ) then
12468.                   if ( nd_layer + -id_ct >= 0 ) then
12469.                      if ( nd_profile > 0 ) then
12467.                         $I_L12467_762 = 0
12467.                         do
12468.                            $I_L12468_696 = 0
12468.                            do
12469.                               $I_L12469_628 = 0
12469. !dir$ ivdep
12469.                               do
12470.                                  (ss_prop%phase_fnc%base_addr)(1 + $I_L12469_628, id_ct + $I_L12468_696, 1 + $I_L12467_762, 1 + $I_L12456_786, 0) = (ss_prop%phase_fnc%base_addr)(1 + $I_L12469_628, id_ct + $I_L12468_696, 1 + $I_L12467_762, 0, 0)
12472.                                  $I_L12469_628 = 1 + $I_L12469_628
12469.                                  if ( $I_L12469_628 >= nd_profile ) exit
12469.                               enddo
12473.                               $I_L12468_696 = 1 + $I_L12468_696
12472.                               if ( $I_L12468_696 >= nd_layer + -id_ct + 1 ) exit
12472.                            enddo
12474.                            $I_L12467_762 = 1 + $I_L12467_762
12473.                            if ( $I_L12467_762 >= n_order_phase ) exit
12473.                         enddo
12473.                      endif
12473.                   endif
12473.                endif
12477.                if ( l_solar_phf ) then
12478.                   if ( n_direction > 0 ) then
12479.                      if ( nd_layer + -id_ct >= 0 ) then
12480.                         if ( nd_profile > 0 ) then
12478.                            $I_L12478_764 = 0
12478.                            do
12479.                               $I_L12479_698 = 0
12479.                               do
12480.                                  $I_L12480_630 = 0
12480. !dir$ ivdep
12480.                                  do
12481.                                     (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12480_630, id_ct + $I_L12479_698, 1 + $I_L12478_764, 1 + $I_L12456_786, 0) = (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12480_630, id_ct + $I_L12479_698, 1 + $I_L12478_764, 0, 0)
12483.                                     $I_L12480_630 = 1 + $I_L12480_630
12480.                                     if ( $I_L12480_630 >= nd_profile ) exit
12480.                                  enddo
12484.                                  $I_L12479_698 = 1 + $I_L12479_698
12483.                                  if ( $I_L12479_698 >= nd_layer + -id_ct + 1 ) exit
12483.                               enddo
12485.                               $I_L12478_764 = 1 + $I_L12478_764
12484.                               if ( $I_L12478_764 >= n_direction ) exit
12484.                            enddo
12484.                         endif
12484.                      endif
12484.                   endif
12484.                endif
12487.                $I_L12456_786 = 1 + $I_L12456_786
12486.                if ( $I_L12456_786 >= n_cloud_type ) exit
12486.             enddo
12486.          endif
12497.          if ( n_condensed > 0 ) then
12497.             $I_L12497_788 = 0
12497.             do
12505.                if ( l_cloud_cmp(1 + $I_L12497_788) ) then
12507.                   if ( i_phase_cmp(1 + $I_L12497_788) == 1 ) then
12511.                      call opt_prop_water_cloud( ierr, n_profile, n_layer, n_cloud_top, n_cloud_profile(id_ct), i_cloud_profile(1, id_ct), n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view(1, 1), i_condensed_param(1 + $I_L12497_788), condensed_param_list(1, 1 + $I_L12497_788), condensed_mix_ratio(1, id_ct, 1 + $I_L12497_788), condensed_dim_char(1, id_ct, 1 + $I_L12497_788), p(1, 1), density(1, 1), n_opt_level_drop_prsc, drop_pressure_prsc(1, 1), drop_absorption_prsc(1, 1), drop_scattering_prsc(1, 1), drop_phase_fnc_prsc(1, 1, 1), k_ext_tot_cloud_comp(1, id_ct), k_ext_scat_cloud_comp(1, id_ct), phase_fnc_cloud_comp(1, id_ct, 1), forward_scatter_cloud_comp(1, id_ct), forward_solar_cloud_comp(1, id_ct), phase_fnc_solar_cloud_comp(1, id_ct, 1), nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_direction, nd_phase_term, nd_max_order, nd_cloud_parameter, nd_profile_cloud_prsc, nd_opt_level_cloud_prsc )
12538.                   else if ( i_phase_cmp(1 + $I_L12497_788) == 2 ) then
12542.                      call opt_prop_ice_cloud( ierr, n_profile, n_layer, n_cloud_top, n_cloud_profile(id_ct), i_cloud_profile(1, id_ct), n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view(1, 1), i_condensed_param(1 + $I_L12497_788), condensed_param_list(1, 1 + $I_L12497_788), condensed_mix_ratio(1, id_ct, 1 + $I_L12497_788), condensed_dim_char(1, id_ct, 1 + $I_L12497_788), p(1, 1), t(1, 1), density(1, 1), n_opt_level_ice_prsc, ice_pressure_prsc(1, 1), ice_absorption_prsc(1, 1), ice_scattering_prsc(1, 1), ice_phase_fnc_prsc(1, 1, 1), k_ext_tot_cloud_comp(1, id_ct), k_ext_scat_cloud_comp(1, id_ct), phase_fnc_cloud_comp(1, id_ct, 1), forward_scatter_cloud_comp(1, id_ct), forward_solar_cloud_comp(1, id_ct), phase_fnc_solar_cloud_comp(1, id_ct, 1), nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_direction, nd_phase_term, nd_max_order, nd_cloud_parameter, nd_profile_cloud_prsc, nd_opt_level_cloud_prsc )
12542.                   endif
12580.                   if ( nd_layer + -id_ct >= 0 ) then
12581.                      if ( nd_profile > 0 ) then
12582.                         $SC_i_cloud_type_I60 = i_cloud_type(1 + $I_L12497_788)
12580.                         $I_L12580_700 = 0
12580.                         do
12581.                            $I_L12581_632 = 0
12581. !dir$ unroll 2
12581.                            do
12582.                               (ss_prop%k_grey_tot%base_addr)(1 + $I_L12581_632, id_ct + $I_L12580_700, $SC_i_cloud_type_I60, 0) = (ss_prop%k_grey_tot%base_addr)(1 + $I_L12581_632, id_ct + $I_L12580_700, $SC_i_cloud_type_I60, 0) + k_ext_tot_cloud_comp(1 + $I_L12581_632, id_ct + $I_L12580_700)
12585.                               $LD_SPLT_P4 = (ss_prop%k_ext_scat%base_addr)(1 + $I_L12581_632, id_ct + $I_L12580_700, $SC_i_cloud_type_I60, 0)
12585.                               (ss_prop%k_ext_scat%base_addr)(1 + $I_L12581_632, id_ct + $I_L12580_700, $SC_i_cloud_type_I60, 0) = $LD_SPLT_P4 + k_ext_scat_cloud_comp(1 + $I_L12581_632, id_ct + $I_L12580_700)
12588.                               $I_L12581_632 = 1 + $I_L12581_632
12581.                               if ( $I_L12581_632 >= nd_profile ) exit
12581.                            enddo
12589.                            $I_L12580_700 = 1 + $I_L12580_700
12588.                            if ( $I_L12580_700 >= nd_layer + -id_ct + 1 ) exit
12588.                         enddo
12588.                      endif
12588.                   endif
12591.                   if ( n_order_phase > 0 ) then
12592.                      if ( nd_layer + -id_ct >= 0 ) then
12593.                         if ( nd_profile > 0 ) then
12594.                            $SC_i_cloud_type_I60 = i_cloud_type(1 + $I_L12497_788)
12591.                            $I_L12591_766 = 0
12591.                            do
12592.                               $I_L12592_702 = 0
12592.                               do
12593.                                  $I_L12593_634 = 0
12593. !dir$ ivdep
12593.                                  do
12594.                                     (ss_prop%phase_fnc%base_addr)(1 + $I_L12593_634, id_ct + $I_L12592_702, 1 + $I_L12591_766, $SC_i_cloud_type_I60, 0) = (ss_prop%phase_fnc%base_addr)(1 + $I_L12593_634, id_ct + $I_L12592_702, 1 + $I_L12591_766, $SC_i_cloud_type_I60, 0) + phase_fnc_cloud_comp(1 + $I_L12593_634, id_ct + $I_L12592_702, 1 + $I_L12591_766)
12597.                                     $I_L12593_634 = 1 + $I_L12593_634
12593.                                     if ( $I_L12593_634 >= nd_profile ) exit
12593.                                  enddo
12598.                                  $I_L12592_702 = 1 + $I_L12592_702
12597.                                  if ( $I_L12592_702 >= nd_layer + -id_ct + 1 ) exit
12597.                               enddo
12599.                               $I_L12591_766 = 1 + $I_L12591_766
12598.                               if ( $I_L12591_766 >= n_order_phase ) exit
12598.                            enddo
12598.                         endif
12598.                      endif
12598.                   endif
12600.                   if ( l_rescale ) then
12602.                      if ( nd_layer + -id_ct >= 0 ) then
12603.                         if ( nd_profile > 0 ) then
12604.                            $SC_i_cloud_type_I60 = i_cloud_type(1 + $I_L12497_788)
12602.                            $I_L12602_704 = 0
12602.                            do
12603.                               $I_L12603_636 = 0
12603. !dir$ ivdep
12603.                               do
12604.                                  (ss_prop%forward_scatter%base_addr)(1 + $I_L12603_636, id_ct + $I_L12602_704, $SC_i_cloud_type_I60, 0) = (ss_prop%forward_scatter%base_addr)(1 + $I_L12603_636, id_ct + $I_L12602_704, $SC_i_cloud_type_I60, 0) + forward_scatter_cloud_comp(1 + $I_L12603_636, id_ct + $I_L12602_704)
12607.                                  $I_L12603_636 = 1 + $I_L12603_636
12603.                                  if ( $I_L12603_636 >= nd_profile ) exit
12603.                               enddo
12608.                               $I_L12602_704 = 1 + $I_L12602_704
12607.                               if ( $I_L12602_704 >= nd_layer + -id_ct + 1 ) exit
12607.                            enddo
12607.                         endif
12607.                      endif
12607.                   endif
12610.                   if ( l_solar_phf ) then
12612.                      if ( nd_layer + -id_ct >= 0 ) then
12613.                         if ( nd_profile > 0 ) then
12614.                            $SC_i_cloud_type_I60 = i_cloud_type(1 + $I_L12497_788)
12612.                            $I_L12612_706 = 0
12612.                            do
12613.                               $I_L12613_638 = 0
12613. !dir$ ivdep
12613.                               do
12614.                                  (ss_prop%forward_solar%base_addr)(1 + $I_L12613_638, id_ct + $I_L12612_706, $SC_i_cloud_type_I60, 0) = (ss_prop%forward_solar%base_addr)(1 + $I_L12613_638, id_ct + $I_L12612_706, $SC_i_cloud_type_I60, 0) + forward_solar_cloud_comp(1 + $I_L12613_638, id_ct + $I_L12612_706)
12617.                                  $I_L12613_638 = 1 + $I_L12613_638
12613.                                  if ( $I_L12613_638 >= nd_profile ) exit
12613.                               enddo
12618.                               $I_L12612_706 = 1 + $I_L12612_706
12617.                               if ( $I_L12612_706 >= nd_layer + -id_ct + 1 ) exit
12617.                            enddo
12617.                         endif
12617.                      endif
12620.                      if ( n_direction > 0 ) then
12621.                         if ( nd_layer + -id_ct >= 0 ) then
12622.                            if ( nd_profile > 0 ) then
12623.                               $SC_i_cloud_type_I60 = i_cloud_type(1 + $I_L12497_788)
12620.                               $I_L12620_768 = 0
12620.                               do
12621.                                  $I_L12621_708 = 0
12621.                                  do
12622.                                     $I_L12622_640 = 0
12622. !dir$ ivdep
12622.                                     do
12623.                                        (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12622_640, id_ct + $I_L12621_708, 1 + $I_L12620_768, $SC_i_cloud_type_I60, 0) = (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12622_640, id_ct + $I_L12621_708, 1 + $I_L12620_768, $SC_i_cloud_type_I60, 0) + phase_fnc_solar_cloud_comp(1 + $I_L12622_640, id_ct + $I_L12621_708, 1 + $I_L12620_768)
12626.                                        $I_L12622_640 = 1 + $I_L12622_640
12622.                                        if ( $I_L12622_640 >= nd_profile ) exit
12622.                                     enddo
12627.                                     $I_L12621_708 = 1 + $I_L12621_708
12626.                                     if ( $I_L12621_708 >= nd_layer + -id_ct + 1 ) exit
12626.                                  enddo
12628.                                  $I_L12620_768 = 1 + $I_L12620_768
12627.                                  if ( $I_L12620_768 >= n_direction ) exit
12627.                               enddo
12627.                            endif
12627.                         endif
12627.                      endif
12627.                   endif
12627.                endif
12633.                $I_L12497_788 = 1 + $I_L12497_788
12631.                if ( $I_L12497_788 >= n_condensed ) exit
12631.             enddo
12631.          endif
12656.          if ( n_cloud_type >= 0 ) then
12657.             if ( n_order_phase > 0 ) then
12658.                if ( nd_layer + -id_ct >= 0 ) then
12659.                   if ( nd_profile > 0 ) then
12656.                      $I_L12656_790 = 0
12656.                      do
12657.                         $I_L12657_774 = 0
12657.                         do
12658.                            $I_L12658_718 = 0
12658.                            do
12659.                               $I_L12659_650 = 0
12659. !dir$ unroll 4
12659.                               do
12660.                                  if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12659_650, id_ct + $I_L12658_718, $I_L12656_790, 0) > 0.0 ) then
12661.                                     (ss_prop%phase_fnc%base_addr)(1 + $I_L12659_650, id_ct + $I_L12658_718, 1 + $I_L12657_774, $I_L12656_790, 0) = ( (ss_prop%phase_fnc%base_addr)(1 + $I_L12659_650, id_ct + $I_L12658_718, 1 + $I_L12657_774, $I_L12656_790, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12659_650, id_ct + $I_L12658_718, $I_L12656_790, 0) )
12661.                                  endif
12665.                                  $I_L12659_650 = 1 + $I_L12659_650
12664.                                  if ( $I_L12659_650 >= nd_profile ) exit
12664.                               enddo
12666.                               $I_L12658_718 = 1 + $I_L12658_718
12665.                               if ( $I_L12658_718 >= nd_layer + -id_ct + 1 ) exit
12665.                            enddo
12667.                            $I_L12657_774 = 1 + $I_L12657_774
12666.                            if ( $I_L12657_774 >= n_order_phase ) exit
12666.                         enddo
12668.                         $I_L12656_790 = 1 + $I_L12656_790
12667.                         if ( $I_L12656_790 >= 1 + n_cloud_type ) exit
12667.                      enddo
12667.                   endif
12667.                endif
12667.             endif
12667.          endif
12670.          if ( l_rescale ) then
12672.             if ( n_cloud_type >= 0 ) then
12673.                if ( nd_layer + -id_ct >= 0 ) then
12674.                   if ( nd_profile > 0 ) then
12672.                      $I_L12672_776 = 0
12672.                      do
12673.                         $I_L12673_720 = 0
12673.                         do
12674.                            $I_L12674_652 = 0
12674. !dir$ unroll 4
12674.                            do
12675.                               if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12674_652, id_ct + $I_L12673_720, $I_L12672_776, 0) > 0.0 ) then
12676.                                  (ss_prop%forward_scatter%base_addr)(1 + $I_L12674_652, id_ct + $I_L12673_720, $I_L12672_776, 0) = ( (ss_prop%forward_scatter%base_addr)(1 + $I_L12674_652, id_ct + $I_L12673_720, $I_L12672_776, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12674_652, id_ct + $I_L12673_720, $I_L12672_776, 0) )
12676.                               endif
12680.                               $I_L12674_652 = 1 + $I_L12674_652
12679.                               if ( $I_L12674_652 >= nd_profile ) exit
12679.                            enddo
12681.                            $I_L12673_720 = 1 + $I_L12673_720
12680.                            if ( $I_L12673_720 >= nd_layer + -id_ct + 1 ) exit
12680.                         enddo
12682.                         $I_L12672_776 = 1 + $I_L12672_776
12681.                         if ( $I_L12672_776 >= 1 + n_cloud_type ) exit
12681.                      enddo
12681.                   endif
12681.                endif
12681.             endif
12681.          endif
12685.          if ( l_solar_phf ) then
12687.             if ( n_cloud_type >= 0 ) then
12688.                if ( nd_layer + -id_ct >= 0 ) then
12689.                   if ( nd_profile > 0 ) then
12687.                      $I_L12687_778 = 0
12687.                      do
12688.                         $I_L12688_722 = 0
12688.                         do
12689.                            $I_L12689_654 = 0
12689. !dir$ unroll 4
12689.                            do
12690.                               if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12689_654, id_ct + $I_L12688_722, $I_L12687_778, 0) > 0.0 ) then
12691.                                  (ss_prop%forward_solar%base_addr)(1 + $I_L12689_654, id_ct + $I_L12688_722, $I_L12687_778, 0) = ( (ss_prop%forward_solar%base_addr)(1 + $I_L12689_654, id_ct + $I_L12688_722, $I_L12687_778, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12689_654, id_ct + $I_L12688_722, $I_L12687_778, 0) )
12691.                               endif
12695.                               $I_L12689_654 = 1 + $I_L12689_654
12694.                               if ( $I_L12689_654 >= nd_profile ) exit
12694.                            enddo
12696.                            $I_L12688_722 = 1 + $I_L12688_722
12695.                            if ( $I_L12688_722 >= nd_layer + -id_ct + 1 ) exit
12695.                         enddo
12697.                         $I_L12687_778 = 1 + $I_L12687_778
12696.                         if ( $I_L12687_778 >= 1 + n_cloud_type ) exit
12696.                      enddo
12696.                   endif
12696.                endif
12700.                if ( n_direction > 0 ) then
12701.                   if ( nd_layer + -id_ct >= 0 ) then
12702.                      if ( nd_profile > 0 ) then
12699.                         $I_L12699_792 = 0
12699.                         do
12700.                            $I_L12700_780 = 0
12700.                            do
12701.                               $I_L12701_724 = 0
12701.                               do
12702.                                  $I_L12702_656 = 0
12702. !dir$ unroll 4
12702.                                  do
12703.                                     if ( (ss_prop%k_ext_scat%base_addr)(1 + $I_L12702_656, id_ct + $I_L12701_724, $I_L12699_792, 0) > 0.0 ) then
12704.                                        (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12702_656, id_ct + $I_L12701_724, 1 + $I_L12700_780, $I_L12699_792, 0) = ( (ss_prop%phase_fnc_solar%base_addr)(1 + $I_L12702_656, id_ct + $I_L12701_724, 1 + $I_L12700_780, $I_L12699_792, 0) * 1.0/(ss_prop%k_ext_scat%base_addr)(1 + $I_L12702_656, id_ct + $I_L12701_724, $I_L12699_792, 0) )
12704.                                     endif
12708.                                     $I_L12702_656 = 1 + $I_L12702_656
12707.                                     if ( $I_L12702_656 >= nd_profile ) exit
12707.                                  enddo
12709.                                  $I_L12701_724 = 1 + $I_L12701_724
12708.                                  if ( $I_L12701_724 >= nd_layer + -id_ct + 1 ) exit
12708.                               enddo
12710.                               $I_L12700_780 = 1 + $I_L12700_780
12709.                               if ( $I_L12700_780 >= n_direction ) exit
12709.                            enddo
12711.                            $I_L12699_792 = 1 + $I_L12699_792
12710.                            if ( $I_L12699_792 >= 1 + n_cloud_type ) exit
12710.                         enddo
12710.                      endif
12710.                   endif
12710.                endif
12710.             endif
12710.          endif
11737.          _free( t$2410 )
11737.       endif
12718.       return
12718.       end
12718.       
12813.       
12813.       subroutine hemi_sph_integ( ls_trunc, ms, uplm_zero, kappa, nd_max_order )
12752.       t$448 = ( ls_trunc + -ms + 1 )
12780.       t$2434 = _zla( 0, ( ls_trunc + -ms + 1 ) )
12752.       t$449 = nd_max_order / 2
12785.       t$2435 = _zla( 0, nd_max_order / 2 )
12752.       t$2436 = _zla( 0, nd_max_order / 2 )
12752.       t$2437 = _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 )
12801.       if ( ls_trunc + -ms > 0 ) then
12802.          $I_L12802_18 = 0
12802.          if ( ( ls_trunc + -ms + 1 ) / 2 >= 4 ) then
12802.             $I_L12802_23 = 0
12802. !dir$ blocking_size( 0, 0 )
12802.             do
12801.                $SCA_uplm_zero#1_U0 = uplm_zero(1 + 8 * $I_L12802_23)
12801.                $SCA_uplm_zero#2_U1 = uplm_zero(3 + 8 * $I_L12802_23)
12801.                $SCA_uplm_zero#3_U2 = uplm_zero(5 + 8 * $I_L12802_23)
12801.                $SCA_uplm_zero#4_U3 = uplm_zero(7 + 8 * $I_L12802_23)
12801.                $I_L12801_16 = 0
12801. !dir$ ivdep
12801. !dir$ blocking_size( 0, 0 )
12801.                do
12803.                   kappa(1 + $I_L12801_16, 1 + 4 * $I_L12802_23) = ( $SCA_uplm_zero#1_U0 * real( 1 + -2 * mod( ( 2 + 2 * $I_L12801_16 ), 2 ), 8 ) * uplm_zero(2 + 2 * $I_L12801_16) * 1.0/( ( -( ( 2 + 2 * $I_L12801_16 ) * ( 2 + 2 * $I_L12801_16 ) ) + -2 * ms + 2 * $I_L12801_16 + ms * $I_L12801_16 * -4 + ( 1 + 8 * $I_L12802_23 ) * ( 1 + 8 * $I_L12802_23 ) + ms * $I_L12802_23 * 16 + -8 * $I_L12802_23 + 1 ) ) * 6.2831853071795862 )
12803.                   kappa(1 + $I_L12801_16, 2 + 4 * $I_L12802_23) = ( $SCA_uplm_zero#2_U1 * real( 1 + -2 * mod( ( 2 + 2 * $I_L12801_16 ), 2 ), 8 ) * uplm_zero(2 + 2 * $I_L12801_16) * 1.0/( ( -( ( 2 + 2 * $I_L12801_16 ) * ( 2 + 2 * $I_L12801_16 ) ) + 2 * $I_L12801_16 + ms * $I_L12801_16 * -4 + 2 * ms + ms * $I_L12802_23 * 16 + -8 * $I_L12802_23 + ( 3 + 8 * $I_L12802_23 ) * ( 3 + 8 * $I_L12802_23 ) + -1 ) ) * 6.2831853071795862 )
12803.                   kappa(1 + $I_L12801_16, 3 + 4 * $I_L12802_23) = ( $SCA_uplm_zero#3_U2 * real( 1 + -2 * mod( ( 2 + 2 * $I_L12801_16 ), 2 ), 8 ) * uplm_zero(2 + 2 * $I_L12801_16) * 1.0/( ( -( ( 2 + 2 * $I_L12801_16 ) * ( 2 + 2 * $I_L12801_16 ) ) + 2 * $I_L12801_16 + ms * $I_L12801_16 * -4 + 6 * ms + ms * $I_L12802_23 * 16 + -8 * $I_L12802_23 + ( 5 + 8 * $I_L12802_23 ) * ( 5 + 8 * $I_L12802_23 ) + -3 ) ) * 6.2831853071795862 )
12803.                   kappa(1 + $I_L12801_16, 4 + 4 * $I_L12802_23) = ( $SCA_uplm_zero#4_U3 * real( 1 + -2 * mod( ( 2 + 2 * $I_L12801_16 ), 2 ), 8 ) * uplm_zero(2 + 2 * $I_L12801_16) * 1.0/( ( -( ( 2 + 2 * $I_L12801_16 ) * ( 2 + 2 * $I_L12801_16 ) ) + 2 * $I_L12801_16 + ms * $I_L12801_16 * -4 + 10 * ms + ms * $I_L12802_23 * 16 + -8 * $I_L12802_23 + ( 7 + 8 * $I_L12802_23 ) * ( 7 + 8 * $I_L12802_23 ) + -5 ) ) * 6.2831853071795862 )
12808.                   $I_L12801_16 = 1 + $I_L12801_16
12802.                   if ( $I_L12801_16 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
12802.                enddo
12807.                $I_L12802_23 = 1 + $I_L12802_23
12807.                if ( $I_L12802_23 >= _rsh( ( ls_trunc + -ms + 1 ) / 2, 2 ) ) exit
12807.             enddo
12807.             $I_L12802_18 = and( 0xfffffffffffffffcUL, ( ls_trunc + -ms + 1 ) / 2 )
12807.          endif
12802.          if ( $I_L12802_18 < ( ls_trunc + -ms + 1 ) / 2 ) then
12802.             $I_L12802_20 = 0
12802. !dir$ blocking_size( 0, 0 )
12802.             do
12801.                $SCA_uplm_zero_I0 = uplm_zero(2 * $I_L12802_18 + 2 * $I_L12802_20 + 1)
12801.                $I_L12801_16 = 0
12801. !dir$ ivdep
12801. !dir$ blocking_size( 0, 0 )
12801.                do
12803.                   kappa(1 + $I_L12801_16, $I_L12802_18 + $I_L12802_20 + 1) = ( $SCA_uplm_zero_I0 * real( 1 + -2 * mod( ( 2 + 2 * $I_L12801_16 ), 2 ), 8 ) * uplm_zero(2 + 2 * $I_L12801_16) * 1.0/( ( -( ( 2 + 2 * $I_L12801_16 ) * ( 2 + 2 * $I_L12801_16 ) ) + -2 * ms + 2 * $I_L12801_16 + ms * $I_L12801_16 * -4 + ms * $I_L12802_18 * 4 + -2 * $I_L12802_18 + ms * $I_L12802_20 * 4 + -2 * $I_L12802_20 + ( 2 * $I_L12802_18 + 2 * $I_L12802_20 + 1 ) * ( 2 * $I_L12802_18 + 2 * $I_L12802_20 + 1 ) + 1 ) ) * 6.2831853071795862 )
12808.                   $I_L12801_16 = 1 + $I_L12801_16
12802.                   if ( $I_L12801_16 >= ( ls_trunc + -ms + 1 ) / 2 ) exit
12802.                enddo
12807.                $I_L12802_20 = 1 + $I_L12802_20
12807.                if ( $I_L12802_20 >= ( ls_trunc + -ms + 1 ) / 2 + -$I_L12802_18 ) exit
12807.             enddo
12807.          endif
12807.       endif
12813.       return
12813.       end
12813.       
13126.       
13126.       subroutine increment_rad_cf( n_profile, n_direction, azim_factor, n_viewing_level, i_rad_layer, i_sph_mode, i_sph_algorithm, ms, ls_trunc, euler_factor, isolir, mu_0, kappa, up_lm, n_red_eigensystem, n_equation, weight_u, upm, i_direct, c_ylm, flux_direct, flux_total, radiance, j_radiance, nd_profile, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_layer, nd_direction, nd_viewing_level, nd_max_order, nd_sph_equation, nd_sph_cf_weight, nd_sph_u_range )
12836.       t$456 = nd_profile
12836.       t$457 = nd_direction
12911.       t$2438 = _zla( 0, nd_profile )
12836.       t$2439 = _zla( 0, nd_profile )
12911.       t$2440 = _zla( 0, nd_direction )
12836.       t$2441 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
12836.       t$455 = nd_viewing_level
12908.       t$2442 = _zla( 0, nd_viewing_level )
12836.       t$458 = nd_max_order / 2
12915.       t$2443 = _zla( 0, nd_max_order / 2 )
12836.       t$2444 = _zla( 0, nd_max_order / 2 )
12836.       t$2445 = _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 )
12836.       t$459 = ( 1 + nd_max_order )
12917.       t$2446 = _zla( 0, ( 1 + nd_max_order ) )
12836.       t$2447 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) )
12836.       t$2448 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) )
12836.       t$460 = nd_sph_cf_weight
12836.       t$461 = nd_sph_u_range
12836.       t$2449 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
12941.       t$2450 = _zla( 0, nd_sph_cf_weight )
12836.       t$2451 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight )
12941.       t$2452 = _zla( 0, nd_sph_u_range )
12836.       t$2453 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight ) * _zla( 0, nd_sph_u_range )
12836.       t$462 = nd_sph_equation
12944.       t$2454 = _zla( 0, nd_sph_equation )
12836.       t$2455 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation )
12836.       t$463 = nd_layer
12836.       t$2456 = 1 + nd_layer
12948.       t$2457 = _zla( 0, 1 + nd_layer )
12836.       t$2458 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
12836.       t$464 = ( ls_trunc + -ms + 1 )
12951.       t$2459 = _zla( 0, ( ls_trunc + -ms + 1 ) )
12836.       t$2460 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( ls_trunc + -ms + 1 ) )
12836.       t$466 = nd_flux_profile
12959.       t$2461 = _zla( 0, nd_flux_profile )
12836.       t$2462 = _zla( 0, nd_flux_profile )
12836.       t$2463 = _zla( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
12836.       t$467 = ( 2 + 2 * nd_layer )
12961.       t$2464 = _zla( 0, ( 2 + 2 * nd_layer ) )
12836.       t$2465 = _zla( 0, nd_flux_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
12836.       t$465 = nd_radiance_profile
12956.       t$2466 = _zla( 0, nd_radiance_profile )
12836.       t$2467 = _zla( 0, nd_radiance_profile )
12836.       t$2468 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_radiance_profile )
12836.       t$2469 = _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_radiance_profile )
12836.       t$468 = nd_j_profile
12966.       t$2470 = _zla( 0, nd_j_profile )
12836.       t$2471 = _zla( 0, nd_j_profile )
12836.       t$2472 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_j_profile )
13001.       if ( i_sph_algorithm == 1 ) then
13008.          if ( n_viewing_level > 0 ) then
13010.             if ( 2 * n_red_eigensystem > 0 ) then
13011.                if ( ls_trunc + -ms >= 0 ) then
13012.                   if ( n_profile > 0 ) then
13008.                      $I_L13008_301 = 0
13008. !dir$ ivdep
13008. !dir$ loop_info (automatic) cache_nt( i_rad_layer )
13008.                      do
13009.                         $offset_S3 = -2 * n_red_eigensystem + n_red_eigensystem * i_rad_layer(1 + $I_L13008_301) * 2
13011.                         $I_L13011_291 = 0
13011.                         do
13010.                            $I_L13010_285 = 0
13010.                            do
13012.                               $I_L13012_274 = 0
13012.                               do
13011.                                  $I_L13011_263 = 0
13011.                                  if ( min( ls_trunc + -ms + 1, 4 + 4 * $I_L13011_291 ) + -4 * $I_L13011_291 >= 4 ) then
13011.                                     $I_L13011_328 = 0
13011. !dir$ shortloop16
13011. !dir$ blocking_size( 4, 4 )
13011.                                     do
13010.                                        $I_L13010_248 = 0
13010. !dir$ shortloop16
13010. !dir$ blocking_size( 4, 4 )
13010.                                        do
13012.                                           $I_L13012_215 = 0
13012. !dir$ blocking_size( 256, 256 )
13012.                                           do
13013.                                              c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 1) = c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 1) + weight_u($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 1, $I_L13010_248 + 4 * $I_L13010_285 + 1) * upm($I_L13012_215 + 256 * $I_L13012_274 + 1, $offset_S3 + $I_L13010_248 + 4 * $I_L13010_285 + 1)
13013.                                              c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 2) = c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 2) + weight_u($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 2, $I_L13010_248 + 4 * $I_L13010_285 + 1) * upm($I_L13012_215 + 256 * $I_L13012_274 + 1, $offset_S3 + $I_L13010_248 + 4 * $I_L13010_285 + 1)
13013.                                              c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 3) = c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 3) + weight_u($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 3, $I_L13010_248 + 4 * $I_L13010_285 + 1) * upm($I_L13012_215 + 256 * $I_L13012_274 + 1, $offset_S3 + $I_L13010_248 + 4 * $I_L13010_285 + 1)
13013.                                              c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 4) = c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 4) + weight_u($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, 4 * $I_L13011_291 + 4 * $I_L13011_328 + 4, $I_L13010_248 + 4 * $I_L13010_285 + 1) * upm($I_L13012_215 + 256 * $I_L13012_274 + 1, $offset_S3 + $I_L13010_248 + 4 * $I_L13010_285 + 1)
13012.                                              $I_L13012_215 = 1 + $I_L13012_215
13012.                                              if ( $I_L13012_215 >= min( n_profile, 256 + 256 * $I_L13012_274 ) + -256 * $I_L13012_274 ) exit
13012.                                           enddo
13010.                                           $I_L13010_248 = 1 + $I_L13010_248
13010.                                           if ( $I_L13010_248 >= min( ( 2 * n_red_eigensystem ), 4 + 4 * $I_L13010_285 ) + -4 * $I_L13010_285 ) exit
13010.                                        enddo
13011.                                        $I_L13011_328 = 1 + $I_L13011_328
13015.                                        if ( $I_L13011_328 >= _rsh( min( ls_trunc + -ms + 1, 4 + 4 * $I_L13011_291 ) + -4 * $I_L13011_291, 2 ) ) exit
13015.                                     enddo
13011.                                     $I_L13011_263 = and( 0xfffffffffffffffcUL, min( ls_trunc + -ms + 1, 4 + 4 * $I_L13011_291 ) + -4 * $I_L13011_291 )
13011.                                  endif
13011.                                  if ( $I_L13011_263 < min( ls_trunc + -ms + 1, 4 + 4 * $I_L13011_291 ) + -4 * $I_L13011_291 ) then
13011.                                     $I_L13011_325 = 0
13011. !dir$ shortloop16
13011. !dir$ blocking_size( 4, 4 )
13011.                                     do
13010.                                        $I_L13010_248 = 0
13010. !dir$ shortloop16
13010. !dir$ blocking_size( 4, 4 )
13010.                                        do
13012.                                           $I_L13012_215 = 0
13012. !dir$ blocking_size( 256, 256 )
13012.                                           do
13013.                                              c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, $I_L13011_263 + $I_L13011_325 + 4 * $I_L13011_291 + 1) = c_ylm($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, $I_L13011_263 + $I_L13011_325 + 4 * $I_L13011_291 + 1) + weight_u($I_L13012_215 + 256 * $I_L13012_274 + 1, 1 + $I_L13008_301, $I_L13011_263 + $I_L13011_325 + 4 * $I_L13011_291 + 1, $I_L13010_248 + 4 * $I_L13010_285 + 1) * upm($I_L13012_215 + 256 * $I_L13012_274 + 1, $offset_S3 + $I_L13010_248 + 4 * $I_L13010_285 + 1)
13012.                                              $I_L13012_215 = 1 + $I_L13012_215
13012.                                              if ( $I_L13012_215 >= min( n_profile, 256 + 256 * $I_L13012_274 ) + -256 * $I_L13012_274 ) exit
13012.                                           enddo
13010.                                           $I_L13010_248 = 1 + $I_L13010_248
13010.                                           if ( $I_L13010_248 >= min( ( 2 * n_red_eigensystem ), 4 + 4 * $I_L13010_285 ) + -4 * $I_L13010_285 ) exit
13010.                                        enddo
13011.                                        $I_L13011_325 = 1 + $I_L13011_325
13015.                                        if ( $I_L13011_325 >= min( ls_trunc + -ms + 1, 4 + 4 * $I_L13011_291 ) + -$I_L13011_263 + -4 * $I_L13011_291 ) exit
13015.                                     enddo
13015.                                  endif
13012.                                  $I_L13012_274 = 1 + $I_L13012_274
13012.                                  if ( $I_L13012_274 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
13012.                               enddo
13010.                               $I_L13010_285 = 1 + $I_L13010_285
13016.                               if ( $I_L13010_285 >= 1 + max( 0, -1 + _rsh( 3 + 2 * n_red_eigensystem, 2 ) ) ) exit
13016.                            enddo
13011.                            $I_L13011_291 = 1 + $I_L13011_291
13011.                            if ( $I_L13011_291 >= 1 + max( 0, -1 + _rsh( ls_trunc + -ms + 4, 2 ) ) ) exit
13011.                         enddo
13018.                         $I_L13008_301 = 1 + $I_L13008_301
13017.                         if ( $I_L13008_301 >= n_viewing_level ) exit
13017.                      enddo
13017.                   endif
13017.                endif
13017.             endif
13017.          endif
13020.          if ( i_sph_mode == 2 ) then
13026.             if ( n_viewing_level > 0 ) then
13027.                if ( n_profile > 0 ) then
13026.                   $I_L13026_240 = 0
13026.                   do
13027.                      $I_L13027_222 = 0
13027. !dir$ ivdep
13027.                      do
13028.                         $contribution_S7 = 1.0233267079464885 * c_ylm(1 + $I_L13027_222, 1 + $I_L13026_240, 2)
13030.                         flux_total(1 + $I_L13027_222, 1 + 2 * $I_L13026_240) = $contribution_S7
13032.                         flux_total(1 + $I_L13027_222, 2 + 2 * $I_L13026_240) = -$contribution_S7
13033.                         $I_L13027_222 = 1 + $I_L13027_222
13027.                         if ( $I_L13027_222 >= n_profile ) exit
13027.                      enddo
13034.                      $I_L13026_240 = 1 + $I_L13026_240
13033.                      if ( $I_L13026_240 >= n_viewing_level ) exit
13033.                   enddo
13033.                endif
13033.             endif
13035.             if ( ls_trunc >= 0 ) then
13038.                if ( n_viewing_level > 0 ) then
13039.                   if ( n_profile > 0 ) then
13035.                      $I_L13035_266 = 0
13035.                      do
13036.                         $cnst_ls_S11 = 2.046653415892977 * kappa(1, 1 + $I_L13035_266)
13038.                         $I_L13038_242 = 0
13038.                         do
13039.                            $I_L13039_224 = 0
13039. !dir$ ivdep
13039.                            do
13040.                               $contribution_S12 = $cnst_ls_S11 * c_ylm(1 + $I_L13039_224, 1 + $I_L13038_242, 1 + 2 * $I_L13035_266)
13041.                               flux_total(1 + $I_L13039_224, 1 + 2 * $I_L13038_242) = flux_total(1 + $I_L13039_224, 1 + 2 * $I_L13038_242) + -$contribution_S12
13043.                               flux_total(1 + $I_L13039_224, 2 + 2 * $I_L13038_242) = flux_total(1 + $I_L13039_224, 2 + 2 * $I_L13038_242) + -$contribution_S12
13045.                               $I_L13039_224 = 1 + $I_L13039_224
13039.                               if ( $I_L13039_224 >= n_profile ) exit
13039.                            enddo
13046.                            $I_L13038_242 = 1 + $I_L13038_242
13045.                            if ( $I_L13038_242 >= n_viewing_level ) exit
13045.                         enddo
13047.                         $I_L13035_266 = 1 + $I_L13035_266
13046.                         if ( $I_L13035_266 >= ( 2 + ls_trunc ) / 2 ) exit
13046.                      enddo
13046.                   endif
13046.                endif
13046.             endif
13049.             if ( isolir == 1 ) then
13050.                if ( n_viewing_level > 0 ) then
13051.                   if ( n_profile > 0 ) then
13050.                      $I_L13050_244 = 0
13050.                      if ( n_viewing_level >= 4 ) then
13050.                         $I_L13050_313 = 0
13050. !dir$ blocking_size( 0, 0 )
13050.                         do
13051.                            $I_L13051_226 = 0
13051. !dir$ ivdep
13051. !dir$ blocking_size( 0, 0 )
13051.                            do
13052.                               $flux_direct_WR0_R0 = i_direct(1 + $I_L13051_226, 4 * $I_L13050_313) * mu_0(1 + $I_L13051_226)
13052.                               flux_direct(1 + $I_L13051_226, 4 * $I_L13050_313) = $flux_direct_WR0_R0
13053.                               flux_total(1 + $I_L13051_226, 2 + 8 * $I_L13050_313) = flux_total(1 + $I_L13051_226, 2 + 8 * $I_L13050_313) + $flux_direct_WR0_R0
13052.                               $flux_direct_WR0_R0 = i_direct(1 + $I_L13051_226, 1 + 4 * $I_L13050_313) * mu_0(1 + $I_L13051_226)
13052.                               flux_direct(1 + $I_L13051_226, 1 + 4 * $I_L13050_313) = $flux_direct_WR0_R0
13053.                               flux_total(1 + $I_L13051_226, 4 + 8 * $I_L13050_313) = flux_total(1 + $I_L13051_226, 4 + 8 * $I_L13050_313) + $flux_direct_WR0_R0
13052.                               $flux_direct_WR0_R0 = i_direct(1 + $I_L13051_226, 2 + 4 * $I_L13050_313) * mu_0(1 + $I_L13051_226)
13052.                               flux_direct(1 + $I_L13051_226, 2 + 4 * $I_L13050_313) = $flux_direct_WR0_R0
13053.                               flux_total(1 + $I_L13051_226, 6 + 8 * $I_L13050_313) = flux_total(1 + $I_L13051_226, 6 + 8 * $I_L13050_313) + $flux_direct_WR0_R0
13052.                               $flux_direct_WR0_R0 = i_direct(1 + $I_L13051_226, 3 + 4 * $I_L13050_313) * mu_0(1 + $I_L13051_226)
13052.                               flux_direct(1 + $I_L13051_226, 3 + 4 * $I_L13050_313) = $flux_direct_WR0_R0
13053.                               flux_total(1 + $I_L13051_226, 8 + 8 * $I_L13050_313) = flux_total(1 + $I_L13051_226, 8 + 8 * $I_L13050_313) + $flux_direct_WR0_R0
13055.                               $I_L13051_226 = 1 + $I_L13051_226
13051.                               if ( $I_L13051_226 >= n_profile ) exit
13051.                            enddo
13056.                            $I_L13050_313 = 1 + $I_L13050_313
13055.                            if ( $I_L13050_313 >= _rsh( n_viewing_level, 2 ) ) exit
13055.                         enddo
13056.                         $I_L13050_244 = and( 0xfffffffffffffffcUL, n_viewing_level )
13056.                      endif
13050.                      if ( $I_L13050_244 < n_viewing_level ) then
13050.                         $I_L13050_307 = 0
13050. !dir$ blocking_size( 0, 0 )
13050.                         do
13051.                            $I_L13051_226 = 0
13051. !dir$ ivdep
13051. !dir$ blocking_size( 0, 0 )
13051.                            do
13052.                               $flux_direct_WR0_R0 = i_direct(1 + $I_L13051_226, $I_L13050_244 + $I_L13050_307) * mu_0(1 + $I_L13051_226)
13052.                               flux_direct(1 + $I_L13051_226, $I_L13050_244 + $I_L13050_307) = $flux_direct_WR0_R0
13053.                               flux_total(1 + $I_L13051_226, 2 * $I_L13050_244 + 2 * $I_L13050_307 + 2) = flux_total(1 + $I_L13051_226, 2 * $I_L13050_244 + 2 * $I_L13050_307 + 2) + $flux_direct_WR0_R0
13055.                               $I_L13051_226 = 1 + $I_L13051_226
13051.                               if ( $I_L13051_226 >= n_profile ) exit
13051.                            enddo
13056.                            $I_L13050_307 = 1 + $I_L13050_307
13055.                            if ( $I_L13050_307 >= n_viewing_level + -$I_L13050_244 ) exit
13055.                         enddo
13055.                      endif
13055.                   endif
13055.                endif
13055.             endif
13059.          else if ( i_sph_mode == 3 ) then
13065.             if ( n_viewing_level > 0 ) then
13066.                if ( n_profile > 0 ) then
13065.                   $I_L13065_236 = 0
13065.                   do
13066.                      $I_L13066_218 = 0
13066. !dir$ ivdep
13066.                      do
13067.                         j_radiance(1 + $I_L13066_218, 1 + $I_L13065_236) = 3.5449077018110318 * c_ylm(1 + $I_L13066_218, 1 + $I_L13065_236, 2)
13068.                         $I_L13066_218 = 1 + $I_L13066_218
13066.                         if ( $I_L13066_218 >= n_profile ) exit
13066.                      enddo
13069.                      $I_L13065_236 = 1 + $I_L13065_236
13068.                      if ( $I_L13065_236 >= n_viewing_level ) exit
13068.                   enddo
13068.                endif
13068.             endif
13071.             if ( isolir == 1 ) then
13072.                if ( n_viewing_level > 0 ) then
13073.                   if ( n_profile > 0 ) then
13072.                      $I_L13072_238 = 0
13072.                      do
13073.                         $I_L13073_220 = 0
13073. !dir$ ivdep
13073.                         do
13074.                            j_radiance(1 + $I_L13073_220, 1 + $I_L13072_238) = j_radiance(1 + $I_L13073_220, 1 + $I_L13072_238) + i_direct(1 + $I_L13073_220, 1 + $I_L13072_238)
13076.                            $I_L13073_220 = 1 + $I_L13073_220
13073.                            if ( $I_L13073_220 >= n_profile ) exit
13073.                         enddo
13077.                         $I_L13072_238 = 1 + $I_L13072_238
13076.                         if ( $I_L13072_238 >= n_viewing_level ) exit
13076.                      enddo
13076.                   endif
13076.                endif
13076.             endif
13076.          else if ( i_sph_mode == 1 ) then
13084.             if ( n_direction > 0 ) then
13089.                if ( n_viewing_level > 0 ) then
13090.                   if ( ls_trunc + -ms > 0 ) then
13091.                      if ( n_profile > 0 ) then
13084.                         $I_L13084_303 = 0
13084.                         do
13089.                            $I_L13089_293 = 0
13089.                            do
13090.                               $I_L13090_289 = 0
13090.                               do
13091.                                  $I_L13091_276 = 0
13091.                                  do
13089.                                     $I_L13089_271 = 0
13089.                                     if ( min( n_viewing_level, 8 + 8 * $I_L13089_293 ) + -8 * $I_L13089_293 >= 2 ) then
13089.                                        $I_L13089_330 = 0
13089. !dir$ shortloop16
13089. !dir$ blocking_size( 8, 8 )
13089.                                        do
13090.                                           $I_L13090_251 = 0
13090.                                           if ( min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289 >= 2 ) then
13090.                                              $I_L13090_315 = 0
13090. !dir$ shortloop16
13090. !dir$ blocking_size( 8, 8 )
13090.                                              do
13091.                                                 $I_L13091_231 = 0
13091. !dir$ ivdep
13091. !dir$ blocking_size( 256, 256 )
13091.                                                 do
13092.                                                    radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 1) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 1, 1 + $I_L13084_303)
13092.                                                    radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 1) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 1, 1 + $I_L13084_303)
13092.                                                    radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 2) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 2, 1 + $I_L13084_303)
13092.                                                    radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 2) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_315 + 2, 1 + $I_L13084_303)
13091.                                                    $I_L13091_231 = 1 + $I_L13091_231
13091.                                                    if ( $I_L13091_231 >= min( n_profile, 256 + 256 * $I_L13091_276 ) + -256 * $I_L13091_276 ) exit
13091.                                                 enddo
13090.                                                 $I_L13090_315 = 1 + $I_L13090_315
13090.                                                 if ( $I_L13090_315 >= _rsh( min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289, 1 ) ) exit
13090.                                              enddo
13090.                                              $I_L13090_251 = and( 0xfffffffffffffffeUL, min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289 )
13090.                                           endif
13090.                                           if ( $I_L13090_251 < min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289 ) then
13091.                                              $I_L13091_231 = 0
13091. !dir$ ivdep
13091. !dir$ blocking_size( 256, 256 )
13091.                                              do
13092.                                                 radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 1, $I_L13090_251 + 8 * $I_L13090_289 + 1) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13090_251 + 8 * $I_L13090_289 + 1, 1 + $I_L13084_303)
13092.                                                 radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13089_293 + 2 * $I_L13089_330 + 2, $I_L13090_251 + 8 * $I_L13090_289 + 1) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13090_251 + 8 * $I_L13090_289 + 1, 1 + $I_L13084_303)
13091.                                                 $I_L13091_231 = 1 + $I_L13091_231
13091.                                                 if ( $I_L13091_231 >= min( n_profile, 256 + 256 * $I_L13091_276 ) + -256 * $I_L13091_276 ) exit
13091.                                              enddo
13091.                                           endif
13089.                                           $I_L13089_330 = 1 + $I_L13089_330
13095.                                           if ( $I_L13089_330 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L13089_293 ) + -8 * $I_L13089_293, 1 ) ) exit
13095.                                        enddo
13089.                                        $I_L13089_271 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L13089_293 ) + -8 * $I_L13089_293 )
13089.                                     endif
13089.                                     if ( $I_L13089_271 < min( n_viewing_level, 8 + 8 * $I_L13089_293 ) + -8 * $I_L13089_293 ) then
13090.                                        $I_L13090_251 = 0
13090.                                        if ( min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289 >= 2 ) then
13090.                                           $I_L13090_317 = 0
13090. !dir$ shortloop16
13090. !dir$ blocking_size( 8, 8 )
13090.                                           do
13091.                                              $I_L13091_231 = 0
13091. !dir$ ivdep
13091. !dir$ blocking_size( 256, 256 )
13091.                                              do
13092.                                                 radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_317 + 1) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_317 + 1, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_317 + 2) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, 8 * $I_L13090_289 + 2 * $I_L13090_317 + 2, 1 + $I_L13084_303)
13091.                                                 $I_L13091_231 = 1 + $I_L13091_231
13091.                                                 if ( $I_L13091_231 >= min( n_profile, 256 + 256 * $I_L13091_276 ) + -256 * $I_L13091_276 ) exit
13091.                                              enddo
13090.                                              $I_L13090_317 = 1 + $I_L13090_317
13090.                                              if ( $I_L13090_317 >= _rsh( min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289, 1 ) ) exit
13090.                                           enddo
13090.                                           $I_L13090_251 = and( 0xfffffffffffffffeUL, min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289 )
13090.                                        endif
13090.                                        if ( $I_L13090_251 < min( ( ls_trunc + -ms ), 8 + 8 * $I_L13090_289 ) + -8 * $I_L13090_289 ) then
13091.                                           $I_L13091_231 = 0
13091. !dir$ ivdep
13091. !dir$ blocking_size( 256, 256 )
13091.                                           do
13092.                                              radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, 1 + $I_L13084_303) = radiance($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, 1 + $I_L13084_303) + azim_factor($I_L13091_231 + 256 * $I_L13091_276 + 1, 1 + $I_L13084_303) * c_ylm($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13089_271 + 8 * $I_L13089_293 + 1, $I_L13090_251 + 8 * $I_L13090_289 + 1) * up_lm($I_L13091_231 + 256 * $I_L13091_276 + 1, $I_L13090_251 + 8 * $I_L13090_289 + 1, 1 + $I_L13084_303)
13091.                                              $I_L13091_231 = 1 + $I_L13091_231
13091.                                              if ( $I_L13091_231 >= min( n_profile, 256 + 256 * $I_L13091_276 ) + -256 * $I_L13091_276 ) exit
13091.                                           enddo
13091.                                        endif
13091.                                     endif
13091.                                     $I_L13091_276 = 1 + $I_L13091_276
13091.                                     if ( $I_L13091_276 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
13091.                                  enddo
13090.                                  $I_L13090_289 = 1 + $I_L13090_289
13101.                                  if ( $I_L13090_289 >= 1 + max( 0, -1 + _rsh( ls_trunc + -ms + 7, 3 ) ) ) exit
13101.                               enddo
13089.                               $I_L13089_293 = 1 + $I_L13089_293
13089.                               if ( $I_L13089_293 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
13089.                            enddo
13089.                            $I_L13089_246 = 0
13089.                            if ( n_viewing_level >= 4 ) then
13089.                               $I_L13089_319 = 0
13089. !dir$ blocking_size( 0, 0 )
13089.                               do
13097.                                  $I_L13097_234 = 0
13097. !dir$ ivdep
13097. !dir$ blocking_size( 0, 0 )
13097.                                  do
13098.                                     radiance(1 + $I_L13097_234, 1 + 4 * $I_L13089_319, 1 + $I_L13084_303) = radiance(1 + $I_L13097_234, 1 + 4 * $I_L13089_319, 1 + $I_L13084_303) + euler_factor * azim_factor(1 + $I_L13097_234, 1 + $I_L13084_303) * c_ylm(1 + $I_L13097_234, 1 + 4 * $I_L13089_319, ls_trunc + -ms + 1) * up_lm(1 + $I_L13097_234, ls_trunc + -ms + 1, 1 + $I_L13084_303)
13098.                                     radiance(1 + $I_L13097_234, 2 + 4 * $I_L13089_319, 1 + $I_L13084_303) = radiance(1 + $I_L13097_234, 2 + 4 * $I_L13089_319, 1 + $I_L13084_303) + euler_factor * azim_factor(1 + $I_L13097_234, 1 + $I_L13084_303) * c_ylm(1 + $I_L13097_234, 2 + 4 * $I_L13089_319, ls_trunc + -ms + 1) * up_lm(1 + $I_L13097_234, ls_trunc + -ms + 1, 1 + $I_L13084_303)
13098.                                     radiance(1 + $I_L13097_234, 3 + 4 * $I_L13089_319, 1 + $I_L13084_303) = radiance(1 + $I_L13097_234, 3 + 4 * $I_L13089_319, 1 + $I_L13084_303) + euler_factor * azim_factor(1 + $I_L13097_234, 1 + $I_L13084_303) * c_ylm(1 + $I_L13097_234, 3 + 4 * $I_L13089_319, ls_trunc + -ms + 1) * up_lm(1 + $I_L13097_234, ls_trunc + -ms + 1, 1 + $I_L13084_303)
13098.                                     radiance(1 + $I_L13097_234, 4 + 4 * $I_L13089_319, 1 + $I_L13084_303) = radiance(1 + $I_L13097_234, 4 + 4 * $I_L13089_319, 1 + $I_L13084_303) + euler_factor * azim_factor(1 + $I_L13097_234, 1 + $I_L13084_303) * c_ylm(1 + $I_L13097_234, 4 + 4 * $I_L13089_319, ls_trunc + -ms + 1) * up_lm(1 + $I_L13097_234, ls_trunc + -ms + 1, 1 + $I_L13084_303)
13101.                                     $I_L13097_234 = 1 + $I_L13097_234
13097.                                     if ( $I_L13097_234 >= n_profile ) exit
13097.                                  enddo
13102.                                  $I_L13089_319 = 1 + $I_L13089_319
13101.                                  if ( $I_L13089_319 >= _rsh( n_viewing_level, 2 ) ) exit
13101.                               enddo
13102.                               $I_L13089_246 = and( 0xfffffffffffffffcUL, n_viewing_level )
13102.                            endif
13089.                            if ( $I_L13089_246 < n_viewing_level ) then
13089.                               $I_L13089_310 = 0
13089. !dir$ blocking_size( 0, 0 )
13089.                               do
13097.                                  $I_L13097_234 = 0
13097. !dir$ ivdep
13097. !dir$ blocking_size( 0, 0 )
13097.                                  do
13098.                                     radiance(1 + $I_L13097_234, $I_L13089_246 + $I_L13089_310 + 1, 1 + $I_L13084_303) = radiance(1 + $I_L13097_234, $I_L13089_246 + $I_L13089_310 + 1, 1 + $I_L13084_303) + euler_factor * azim_factor(1 + $I_L13097_234, 1 + $I_L13084_303) * c_ylm(1 + $I_L13097_234, $I_L13089_246 + $I_L13089_310 + 1, ls_trunc + -ms + 1) * up_lm(1 + $I_L13097_234, ls_trunc + -ms + 1, 1 + $I_L13084_303)
13101.                                     $I_L13097_234 = 1 + $I_L13097_234
13097.                                     if ( $I_L13097_234 >= n_profile ) exit
13097.                                  enddo
13102.                                  $I_L13089_310 = 1 + $I_L13089_310
13101.                                  if ( $I_L13089_310 >= n_viewing_level + -$I_L13089_246 ) exit
13101.                               enddo
13101.                            endif
13104.                            $I_L13084_303 = 1 + $I_L13084_303
13102.                            if ( $I_L13084_303 >= n_direction ) exit
13102.                         enddo
13102.                      endif
13102.                   else if ( n_profile > 0 ) then
13084.                      $I_L13084_295 = 0
13084.                      do
13089.                         $I_L13089_287 = 0
13089.                         do
13097.                            $I_L13097_278 = 0
13097.                            do
13084.                               $I_L13084_268 = 0
13084.                               if ( min( n_direction, 8 + 8 * $I_L13084_295 ) + -8 * $I_L13084_295 >= 2 ) then
13084.                                  $I_L13084_332 = 0
13084. !dir$ shortloop16
13084. !dir$ blocking_size( 8, 8 )
13084.                                  do
13089.                                     $I_L13089_254 = 0
13089.                                     if ( min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287 >= 2 ) then
13089.                                        $I_L13089_321 = 0
13089. !dir$ shortloop16
13089. !dir$ blocking_size( 8, 8 )
13089.                                        do
13097.                                           $I_L13097_228 = 0
13097. !dir$ ivdep
13097. !dir$ blocking_size( 256, 256 )
13097.                                           do
13098.                                              radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 1, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1)
13098.                                              radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 1, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2)
13098.                                              radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 2, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 2, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 2, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1)
13098.                                              radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 2, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 2, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_321 + 2, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2)
13097.                                              $I_L13097_228 = 1 + $I_L13097_228
13097.                                              if ( $I_L13097_228 >= min( n_profile, 256 + 256 * $I_L13097_278 ) + -256 * $I_L13097_278 ) exit
13097.                                           enddo
13089.                                           $I_L13089_321 = 1 + $I_L13089_321
13089.                                           if ( $I_L13089_321 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287, 1 ) ) exit
13089.                                        enddo
13089.                                        $I_L13089_254 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287 )
13089.                                     endif
13089.                                     if ( $I_L13089_254 < min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287 ) then
13097.                                        $I_L13097_228 = 0
13097. !dir$ ivdep
13097. !dir$ blocking_size( 256, 256 )
13097.                                        do
13098.                                           radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 1)
13098.                                           radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, 8 * $I_L13084_295 + 2 * $I_L13084_332 + 2)
13097.                                           $I_L13097_228 = 1 + $I_L13097_228
13097.                                           if ( $I_L13097_228 >= min( n_profile, 256 + 256 * $I_L13097_278 ) + -256 * $I_L13097_278 ) exit
13097.                                        enddo
13097.                                     endif
13084.                                     $I_L13084_332 = 1 + $I_L13084_332
13101.                                     if ( $I_L13084_332 >= _rsh( min( n_direction, 8 + 8 * $I_L13084_295 ) + -8 * $I_L13084_295, 1 ) ) exit
13101.                                  enddo
13084.                                  $I_L13084_268 = and( 0xfffffffffffffffeUL, min( n_direction, 8 + 8 * $I_L13084_295 ) + -8 * $I_L13084_295 )
13084.                               endif
13084.                               if ( $I_L13084_268 < min( n_direction, 8 + 8 * $I_L13084_295 ) + -8 * $I_L13084_295 ) then
13089.                                  $I_L13089_254 = 0
13089.                                  if ( min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287 >= 2 ) then
13089.                                     $I_L13089_323 = 0
13089. !dir$ shortloop16
13089. !dir$ blocking_size( 8, 8 )
13089.                                     do
13097.                                        $I_L13097_228 = 0
13097. !dir$ ivdep
13097. !dir$ blocking_size( 256, 256 )
13097.                                        do
13098.                                           radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_323 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_323 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_323 + 1, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1)
13098.                                           radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_323 + 2, $I_L13084_268 + 8 * $I_L13084_295 + 1) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_323 + 2, $I_L13084_268 + 8 * $I_L13084_295 + 1) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, 8 * $I_L13089_287 + 2 * $I_L13089_323 + 2, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1)
13097.                                           $I_L13097_228 = 1 + $I_L13097_228
13097.                                           if ( $I_L13097_228 >= min( n_profile, 256 + 256 * $I_L13097_278 ) + -256 * $I_L13097_278 ) exit
13097.                                        enddo
13089.                                        $I_L13089_323 = 1 + $I_L13089_323
13089.                                        if ( $I_L13089_323 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287, 1 ) ) exit
13089.                                     enddo
13089.                                     $I_L13089_254 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287 )
13089.                                  endif
13089.                                  if ( $I_L13089_254 < min( n_viewing_level, 8 + 8 * $I_L13089_287 ) + -8 * $I_L13089_287 ) then
13097.                                     $I_L13097_228 = 0
13097. !dir$ ivdep
13097. !dir$ blocking_size( 256, 256 )
13097.                                     do
13098.                                        radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) = radiance($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) + euler_factor * azim_factor($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1) * c_ylm($I_L13097_228 + 256 * $I_L13097_278 + 1, $I_L13089_254 + 8 * $I_L13089_287 + 1, ls_trunc + -ms + 1) * up_lm($I_L13097_228 + 256 * $I_L13097_278 + 1, ls_trunc + -ms + 1, $I_L13084_268 + 8 * $I_L13084_295 + 1)
13097.                                        $I_L13097_228 = 1 + $I_L13097_228
13097.                                        if ( $I_L13097_228 >= min( n_profile, 256 + 256 * $I_L13097_278 ) + -256 * $I_L13097_278 ) exit
13097.                                     enddo
13097.                                  endif
13097.                               endif
13097.                               $I_L13097_278 = 1 + $I_L13097_278
13097.                               if ( $I_L13097_278 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
13097.                            enddo
13089.                            $I_L13089_287 = 1 + $I_L13089_287
13102.                            if ( $I_L13089_287 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
13102.                         enddo
13084.                         $I_L13084_295 = 1 + $I_L13084_295
13084.                         if ( $I_L13084_295 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
13084.                      enddo
13084.                   endif
13084.                endif
13084.             endif
13084.          endif
13107.       else if ( i_sph_algorithm == 2 ) then
13109.          if ( n_direction > 0 ) then
13110.             if ( n_viewing_level > 0 ) then
13111.                if ( n_equation > 0 ) then
13112.                   if ( n_profile > 0 ) then
13109.                      $I_L13109_305 = 0
13109.                      do
13110.                         $I_L13110_299 = 0
13110.                         do
13111.                            $I_L13111_297 = 0
13111.                            do
13112.                               $I_L13112_283 = 0
13112.                               do
13109.                                  $I_L13109_280 = 0
13109.                                  if ( min( n_direction, 8 + 8 * $I_L13109_305 ) + -8 * $I_L13109_305 >= 2 ) then
13109.                                     $I_L13109_338 = 0
13109. !dir$ shortloop16
13109. !dir$ blocking_size( 8, 8 )
13109.                                     do
13110.                                        $I_L13110_260 = 0
13110.                                        if ( min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299 >= 2 ) then
13110.                                           $I_L13110_334 = 0
13110. !dir$ shortloop16
13110. !dir$ blocking_size( 8, 8 )
13110.                                           do
13111.                                              $I_L13111_257 = 0
13111. !dir$ shortloop16
13111. !dir$ blocking_size( 8, 8 )
13111.                                              do
13112.                                                 $I_L13112_212 = 0
13112. !dir$ ivdep
13112. !dir$ loop_info (automatic) cache_nt( weight_u )
13112. !dir$ blocking_size( 256, 256 )
13112.                                                 do
13113.                                                    radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13113.                                                    radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13113.                                                    radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 2, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 2, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 2, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13113.                                                    radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 2, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 2, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_334 + 2, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13112.                                                    $I_L13112_212 = 1 + $I_L13112_212
13112.                                                    if ( $I_L13112_212 >= min( n_profile, 256 + 256 * $I_L13112_283 ) + -256 * $I_L13112_283 ) exit
13112.                                                 enddo
13111.                                                 $I_L13111_257 = 1 + $I_L13111_257
13111.                                                 if ( $I_L13111_257 >= min( n_equation, 8 + 8 * $I_L13111_297 ) + -8 * $I_L13111_297 ) exit
13111.                                              enddo
13110.                                              $I_L13110_334 = 1 + $I_L13110_334
13116.                                              if ( $I_L13110_334 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299, 1 ) ) exit
13116.                                           enddo
13110.                                           $I_L13110_260 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299 )
13110.                                        endif
13110.                                        if ( $I_L13110_260 < min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299 ) then
13111.                                           $I_L13111_257 = 0
13111. !dir$ shortloop16
13111. !dir$ blocking_size( 8, 8 )
13111.                                           do
13112.                                              $I_L13112_212 = 0
13112. !dir$ ivdep
13112. !dir$ loop_info (automatic) cache_nt( weight_u )
13112. !dir$ blocking_size( 256, 256 )
13112.                                              do
13113.                                                 radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13113.                                                 radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, 8 * $I_L13109_305 + 2 * $I_L13109_338 + 2, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13112.                                                 $I_L13112_212 = 1 + $I_L13112_212
13112.                                                 if ( $I_L13112_212 >= min( n_profile, 256 + 256 * $I_L13112_283 ) + -256 * $I_L13112_283 ) exit
13112.                                              enddo
13111.                                              $I_L13111_257 = 1 + $I_L13111_257
13111.                                              if ( $I_L13111_257 >= min( n_equation, 8 + 8 * $I_L13111_297 ) + -8 * $I_L13111_297 ) exit
13111.                                           enddo
13111.                                        endif
13109.                                        $I_L13109_338 = 1 + $I_L13109_338
13109.                                        if ( $I_L13109_338 >= _rsh( min( n_direction, 8 + 8 * $I_L13109_305 ) + -8 * $I_L13109_305, 1 ) ) exit
13109.                                     enddo
13109.                                     $I_L13109_280 = and( 0xfffffffffffffffeUL, min( n_direction, 8 + 8 * $I_L13109_305 ) + -8 * $I_L13109_305 )
13109.                                  endif
13109.                                  if ( $I_L13109_280 < min( n_direction, 8 + 8 * $I_L13109_305 ) + -8 * $I_L13109_305 ) then
13110.                                     $I_L13110_260 = 0
13110.                                     if ( min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299 >= 2 ) then
13110.                                        $I_L13110_336 = 0
13110. !dir$ shortloop16
13110. !dir$ blocking_size( 8, 8 )
13110.                                        do
13111.                                           $I_L13111_257 = 0
13111. !dir$ shortloop16
13111. !dir$ blocking_size( 8, 8 )
13111.                                           do
13112.                                              $I_L13112_212 = 0
13112. !dir$ ivdep
13112. !dir$ loop_info (automatic) cache_nt( weight_u )
13112. !dir$ blocking_size( 256, 256 )
13112.                                              do
13113.                                                 radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_336 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_336 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_336 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13113.                                                 radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_336 + 2, $I_L13109_280 + 8 * $I_L13109_305 + 1) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_336 + 2, $I_L13109_280 + 8 * $I_L13109_305 + 1) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, 8 * $I_L13110_299 + 2 * $I_L13110_336 + 2, $I_L13109_280 + 8 * $I_L13109_305 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13112.                                                 $I_L13112_212 = 1 + $I_L13112_212
13112.                                                 if ( $I_L13112_212 >= min( n_profile, 256 + 256 * $I_L13112_283 ) + -256 * $I_L13112_283 ) exit
13112.                                              enddo
13111.                                              $I_L13111_257 = 1 + $I_L13111_257
13111.                                              if ( $I_L13111_257 >= min( n_equation, 8 + 8 * $I_L13111_297 ) + -8 * $I_L13111_297 ) exit
13111.                                           enddo
13110.                                           $I_L13110_336 = 1 + $I_L13110_336
13116.                                           if ( $I_L13110_336 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299, 1 ) ) exit
13116.                                        enddo
13110.                                        $I_L13110_260 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299 )
13110.                                     endif
13110.                                     if ( $I_L13110_260 < min( n_viewing_level, 8 + 8 * $I_L13110_299 ) + -8 * $I_L13110_299 ) then
13111.                                        $I_L13111_257 = 0
13111. !dir$ shortloop16
13111. !dir$ blocking_size( 8, 8 )
13111.                                        do
13112.                                           $I_L13112_212 = 0
13112. !dir$ ivdep
13112. !dir$ loop_info (automatic) cache_nt( weight_u )
13112. !dir$ blocking_size( 256, 256 )
13112.                                           do
13113.                                              radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) = radiance($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) + azim_factor($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1) * weight_u($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13110_260 + 8 * $I_L13110_299 + 1, $I_L13109_280 + 8 * $I_L13109_305 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1) * upm($I_L13112_212 + 256 * $I_L13112_283 + 1, $I_L13111_257 + 8 * $I_L13111_297 + 1)
13112.                                              $I_L13112_212 = 1 + $I_L13112_212
13112.                                              if ( $I_L13112_212 >= min( n_profile, 256 + 256 * $I_L13112_283 ) + -256 * $I_L13112_283 ) exit
13112.                                           enddo
13111.                                           $I_L13111_257 = 1 + $I_L13111_257
13111.                                           if ( $I_L13111_257 >= min( n_equation, 8 + 8 * $I_L13111_297 ) + -8 * $I_L13111_297 ) exit
13111.                                        enddo
13111.                                     endif
13111.                                  endif
13112.                                  $I_L13112_283 = 1 + $I_L13112_283
13117.                                  if ( $I_L13112_283 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
13117.                               enddo
13111.                               $I_L13111_297 = 1 + $I_L13111_297
13111.                               if ( $I_L13111_297 >= 1 + max( 0, -1 + _rsh( 7 + n_equation, 3 ) ) ) exit
13111.                            enddo
13110.                            $I_L13110_299 = 1 + $I_L13110_299
13118.                            if ( $I_L13110_299 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
13118.                         enddo
13109.                         $I_L13109_305 = 1 + $I_L13109_305
13109.                         if ( $I_L13109_305 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
13109.                      enddo
13109.                   endif
13109.                endif
13109.             endif
13109.          endif
13109.       endif
13126.       return
13126.       end
13126.       
13360.       
13360.       subroutine read_block_int
13373.       $l_block_read_S0 = .false.
13377.       if ( i_type == 0 ) then
13378.          if ( i_subtype == 0 ) then
13379.             if ( i_version == 1 ) then
13380.                call read_block_0_0_1_int
13381.                $l_block_read_S0 = .true.
13381.             endif
13381.          endif
13381.          goto 10
13384.       else if ( i_type == 1 ) then
13385.          if ( i_subtype == 0 ) then
13386.             if ( i_version == 0 ) then
13387.                call read_block_1_0_0_int
13388.                $l_block_read_S0 = .true.
13388.             endif
13388.          endif
13388.          goto 10
13388.       else if ( i_type == 2 ) then
13392.          if ( i_subtype /= 0 ) then
13392.             goto 10
13392.          else if ( i_version == 0 ) then
13394.             call read_block_2_0_0_int
13395.             if ( seat_ierr == 0 ) then
13396.                $l_block_read_S0 = .true.
13396.                goto 10
13396.             endif
13396.          else
13396.             goto 10
13396.          endif
13396.       else if ( i_type == 3 ) then
13400.          if ( i_subtype /= 0 ) then
13400.             goto 10
13400.          else if ( i_version == 0 ) then
13402.             call read_block_3_0_0_int
13403.             if ( seat_ierr == 0 ) then
13404.                $l_block_read_S0 = .true.
13404.                goto 10
13404.             endif
13404.          else
13404.             goto 10
13404.          endif
13404.       else if ( i_type == 4 ) then
13408.          if ( i_subtype /= 0 ) then
13408.             goto 10
13408.          else if ( i_version == 0 ) then
13410.             call read_block_4_0_0_int
13411.             if ( seat_ierr == 0 ) then
13412.                $l_block_read_S0 = .true.
13412.                goto 10
13412.             endif
13412.          else
13412.             goto 10
13412.          endif
13412.       else if ( i_type == 5 ) then
13416.          if ( i_subtype /= 0 ) then
13416.             goto 10
13416.          else if ( i_version == 0 ) then
13418.             call read_block_5_0_0_int
13419.             if ( seat_ierr == 0 ) then
13420.                $l_block_read_S0 = .true.
13420.                goto 10
13420.             endif
13420.          else
13420.             goto 10
13420.          endif
13420.       else if ( i_type == 6 ) then
13424.          if ( i_subtype /= 0 ) then
13424.             goto 10
13424.          else if ( i_version == 0 ) then
13426.             call read_block_6_0_0_int
13427.             if ( seat_ierr == 0 ) then
13428.                $l_block_read_S0 = .true.
13428.                goto 10
13428.             endif
13428.          else
13428.             goto 10
13428.          endif
13428.       else if ( i_type == 7 ) then
13432.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$497,  _substr(t$496,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Warning: Obsolete block.', 0x800600000000L ), _iotype( 'Surface characteristics must be specified using a .surf file:', 0x800600000000L ), _iotype( 'this block will be ignored.', 0x800600000000L ) ) )
13432.          goto 10
13432.       else if ( i_type == 8 ) then
13438.          if ( i_subtype /= 0 ) then
13438.             goto 10
13438.          else if ( i_version == 0 ) then
13440.             call read_block_8_0_0_int
13441.             if ( seat_ierr == 0 ) then
13442.                $l_block_read_S0 = .true.
13442.                goto 10
13442.             endif
13442.          else
13442.             goto 10
13442.          endif
13442.       else if ( i_type == 9 ) then
13446.          if ( i_subtype /= 0 ) then
13446.             goto 10
13446.          else if ( i_version == 0 ) then
13448.             call read_block_9_0_0_int
13449.             if ( seat_ierr == 0 ) then
13450.                $l_block_read_S0 = .true.
13450.                goto 10
13450.             endif
13450.          else
13450.             goto 10
13450.          endif
13450.       else if ( i_type == 10 ) then
13454.          if ( i_subtype /= 0 ) then
13454.             goto 10
13454.          else if ( i_version == 0 ) then
13456.             call read_block_10_0_0_int
13457.             if ( seat_ierr == 0 ) then
13458.                $l_block_read_S0 = .true.
13458.                goto 10
13458.             endif
13458.          else if ( i_version == 1 ) then
13462.             call read_block_10_0_1_int
13463.             if ( seat_ierr == 0 ) then
13464.                $l_block_read_S0 = .true.
13464.                goto 10
13464.             endif
13464.          else if ( i_version == 2 ) then
13469.             call read_block_10_0_2_int
13470.             if ( seat_ierr == 0 ) then
13471.                $l_block_read_S0 = .true.
13471.                goto 10
13471.             endif
13471.          else
13471.             goto 10
13471.          endif
13471.       else if ( i_type /= 11 ) then
13501.          if ( i_type == 12 ) then
13502.             if ( i_subtype == 0 ) then
13503.                if ( i_version == 0 ) then
13504.                   call read_block_12_0_0_int
13505.                   $l_block_read_S0 = .true.
13506.                else if ( i_version == 1 ) then
13507.                   call read_block_12_0_1_int
13508.                   $l_block_read_S0 = .true.
13508.                else if ( i_version == 2 ) then
13510.                   call read_block_12_0_2_int
13511.                   $l_block_read_S0 = .true.
13511.                endif
13511.             endif
13514.          else if ( i_type == 14 ) then
13515.             if ( i_subtype == 0 ) then
13516.                if ( i_version == 0 ) then
13517.                   call read_block_14_0_0_int
13518.                   $l_block_read_S0 = .true.
13518.                endif
13518.             endif
13518.          endif
13518.          goto 10
13518.       else if ( i_subtype == 0 ) then
13477.          if ( i_version == 1 ) then
13478.             call read_block_11_0_1_int
13479.             if ( seat_ierr == 0 ) then
13480.                $l_block_read_S0 = .true.
13480.                goto 10
13480.             endif
13481.          else if ( i_version == 2 ) then
13482.             call read_block_11_0_2_int
13483.             if ( seat_ierr == 0 ) then
13484.                $l_block_read_S0 = .true.
13484.                goto 10
13484.             endif
13484.          else
13484.             goto 10
13484.          endif
13484.       else if ( i_subtype /= 1 ) then
13484.          goto 10
13484.       else if ( i_version == 0 ) then
13488.          call read_block_11_1_0_int
13489.          if ( seat_ierr == 0 ) then
13490.             $l_block_read_S0 = .true.
13490.             goto 10
13490.          endif
13490.       else if ( i_version == 1 ) then
13492.          call read_block_11_1_1_int
13493.          if ( seat_ierr == 0 ) then
13494.             $l_block_read_S0 = .true.
13494.             goto 10
13494.          endif
13494.       else if ( i_version == 2 ) then
13496.          call read_block_11_1_2_int
13497.          if ( seat_ierr == 0 ) then
13498.             $l_block_read_S0 = .true.
13498.             goto 10
13498.          endif
13498.       else
13498.    10    continue
13523.          if ( seat_ierr == 0 ) then
13528.             if ( $l_block_read_S0 == 0 ) then
13530.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$499,  _substr(t$498,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Warning: This sort of block is not permitted.', 0x800600000000L ), _iotype( 'Type', 0x800600000000L ), _iotype( ' = ', 0x800600000000L ), _iotype( i_type, 0x2000200000000L ), _iotype( 'Subtype', 0x800600000000L ), _iotype( ' = ', 0x800600000000L ), _iotype( i_subtype, 0x2000200000000L ), _iotype( 'Version', 0x800600000000L ), _iotype( ' = ', 0x800600000000L ), _iotype( i_version, 0x2000200000000L ) ) )
13536.                do
13537.                   $Unit_temp_O0 = iu_spc
13537.                   _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$501,  _substr(t$500,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(line_temp,1,80), 0x800600000000L ) ) )
13538.                   if (  _substr(line_temp,1,4) == '*END' ) exit
13538.                enddo
13539.                t$6544 = iu_spc
13539.                t$6543 = __back( t$6544, 0, 0, 0x100000000000000L, 0, 0 )
13539.             endif
13539.          endif
13539.       endif
13548.       return
13548.       end
13548.       
13553.       
13553.       subroutine read_block_0_0_1_int
13566.       $Unit_temp_O0 = iu_spc
13566.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13570.       $Unit_temp_O1 = iu_spc
13570.       t$6545 = _fread( _clist( 0, 1, 3, $Unit_temp_O1, ios, Null_Arg, t$503,  _substr(t$502,1,9), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O16, 0x2000200000000L ) ) )
13570.       seat_spectrum%basic%n_band = $IOitem_O16
13571.       if ( ios /= 0 ) then
13572.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$505,  _substr(t$504,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_0_0_1', 0x800600000000L ) ) )
13574.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Number of bands could not be read.', 0x800600000000L ) ) )
13575.          seat_ierr = 1
13575.       else
13578.          (nd_band%base_addr)(0) = $IOitem_O16
13579.          seat_spectrum%basic%n_band_exclude%header%a_contig = 1
13579.          seat_spectrum%basic%n_band_exclude%dim_1%LB = 1
13579.          seat_spectrum%basic%n_band_exclude%dim_1%EX = _zla( 0, $IOitem_O16 )
13579.          seat_spectrum%basic%n_band_exclude%dim_1%SM = 1
13579.          $_allo_P0(0) = 0x1000000000001L
13579.          $_allo_P0(1) = loc( seat_spectrum%basic%n_band_exclude )
13579.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13582.          $F_A33 = $IOitem_O16
13582.          if ( $IOitem_O16 > 0 ) then
13582.             $I_A1 = 0
13582. !dir$ ivdep
13582.             do
13582.                (seat_spectrum%basic%n_band_exclude%base_addr)(1 + $I_A1, 0) = 0
13582.                $I_A1 = 1 + $I_A1
13582.                if ( $I_A1 >= $F_A33 ) exit
13582.             enddo
13582.          endif
13584.          $Unit_temp_O2 = iu_spc
13584.          t$6546 = _fread( _clist( 0, 1, 3, $Unit_temp_O2, ios, Null_Arg, t$507,  _substr(t$506,1,9), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O17, 0x2000200000000L ) ) )
13584.          seat_spectrum%gas%n_absorb = $IOitem_O17
13585.          if ( ios /= 0 ) then
13586.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$509,  _substr(t$508,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_0_0_1', 0x800600000000L ) ) )
13588.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Number of absorbers could not be read.', 0x800600000000L ) ) )
13589.             seat_ierr = 1
13589.          else
13592.             (nd_species%base_addr)(0) = $IOitem_O17
13594.             $Unit_temp_O3 = iu_spc
13594.             t$6547 = _fread( _clist( 0, 1, 3, $Unit_temp_O3, ios, Null_Arg, t$511,  _substr(t$510,1,9), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O18, 0x2000200000000L ) ) )
13594.             seat_spectrum%aerosol%n_aerosol = $IOitem_O18
13595.             if ( ios /= 0 ) then
13596.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$513,  _substr(t$512,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_0_0_1', 0x800600000000L ) ) )
13598.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Number of aerosols could not be read.', 0x800600000000L ) ) )
13599.                seat_ierr = 1
13599.             else
13602.                (nd_aerosol_species%base_addr)(0) = $IOitem_O18
13606.                seat_spectrum%gas%type_absorb%header%a_contig = 1
13606.                seat_spectrum%gas%type_absorb%dim_1%LB = 1
13606.                seat_spectrum%gas%type_absorb%dim_1%EX = ( max( 0, (nd_species%base_addr)(0) ) )
13606.                seat_spectrum%gas%type_absorb%dim_1%SM = 1
13606.                $_allo_P1(0) = 0x1000000000001L
13606.                $_allo_P1(1) = loc( seat_spectrum%gas%type_absorb )
13606.                call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
13607.                $Unit_temp_O4 = iu_spc
13607.                _fread( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$515,  _substr(t$514,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13608.                if ( $IOitem_O17 > 0 ) then
13608.                   $I_L13608_8 = 0
13608.                   do
13608.                      i = ( 1 + $I_L13608_8 )
13609.                      $Unit_temp_O5 = iu_spc
13609.                      _fread( _clist( 0, 0, 2, $Unit_temp_O5, Null_Arg, Null_Arg, t$517,  _substr(t$516,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13609.                      $Unit_temp_O6 = iu_spc
13609.                      _fread( _clist( 0, 0, 0, $Unit_temp_O6, Null_Arg, Null_Arg, t$517,  _substr(t$516,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13610.                      if ( ( 1 + $I_L13608_8 ) < seat_spectrum%gas%type_absorb%dim_1%LB .or. ( 1 + $I_L13608_8 ) > seat_spectrum%gas%type_absorb%dim_1%LB + seat_spectrum%gas%type_absorb%dim_1%EX + -1 ) then
13610.                          _substr(t$6552,1,13) = 'Rad_UKMO.f90'
13610.                          _substr(t$6553,1,12) = 'TYPE_ABSORB'
13610.                         t$6554 = seat_spectrum%gas%type_absorb%dim_1%LB
13610.                         t$6555 = seat_spectrum%gas%type_absorb%dim_1%LB + seat_spectrum%gas%type_absorb%dim_1%EX + -1
13610.                         t$6556 = 1 + $I_L13608_8
13610.                         call _bounds_error(  _substr(t$6552,1,13), 13610,  _substr(t$6553,1,12), 1, t$6554, t$6555, t$6556, t$6551 )
13610.                      endif
13609.                      $Unit_temp_O7 = iu_spc
13609.                      _fread( _clist( 0, 0, 0, $Unit_temp_O7, Null_Arg, Null_Arg, t$517,  _substr(t$516,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%type_absorb%base_addr)(i, 0), 0x2000200000000L ), _iotype(  _substr(chdum,1,1), 0x800600000000L ) ) )
13609.                      $Unit_temp_O9 = iu_spc
13609.                      _fread( _clist( 0, 0, 1, $Unit_temp_O9, Null_Arg, Null_Arg, t$517,  _substr(t$516,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13611.                      $I_L13608_8 = 1 + $I_L13608_8
13611.                      if ( $I_L13608_8 >= $IOitem_O17 ) exit
13611.                   enddo
13611.                endif
13614.                seat_spectrum%aerosol%type_aerosol%header%a_contig = 1
13614.                seat_spectrum%aerosol%type_aerosol%dim_1%LB = 1
13614.                seat_spectrum%aerosol%type_aerosol%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
13614.                seat_spectrum%aerosol%type_aerosol%dim_1%SM = 1
13614.                $_allo_P2(0) = 0x1000000000001L
13614.                $_allo_P2(1) = loc( seat_spectrum%aerosol%type_aerosol )
13614.                call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
13615.                $Unit_temp_O10 = iu_spc
13615.                _fread( _clist( 0, 0, 3, $Unit_temp_O10, Null_Arg, Null_Arg, t$519,  _substr(t$518,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13616.                $t_S3 = seat_spectrum%aerosol%n_aerosol
13616.                i = 1
13616.                if ( seat_spectrum%aerosol%n_aerosol > 0 ) then
13616.                   $I_L13616_10 = 0
13616.                   do
13616.                      i = ( 1 + $I_L13616_10 )
13617.                      $Unit_temp_O11 = iu_spc
13617.                      _fread( _clist( 0, 0, 2, $Unit_temp_O11, Null_Arg, Null_Arg, t$521,  _substr(t$520,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13617.                      $Unit_temp_O12 = iu_spc
13617.                      _fread( _clist( 0, 0, 0, $Unit_temp_O12, Null_Arg, Null_Arg, t$521,  _substr(t$520,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13618.                      if ( ( 1 + $I_L13616_10 ) < seat_spectrum%aerosol%type_aerosol%dim_1%LB .or. ( 1 + $I_L13616_10 ) > seat_spectrum%aerosol%type_aerosol%dim_1%LB + seat_spectrum%aerosol%type_aerosol%dim_1%EX + -1 ) then
13618.                          _substr(t$6561,1,13) = 'Rad_UKMO.f90'
13618.                          _substr(t$6562,1,13) = 'TYPE_AEROSOL'
13618.                         t$6554 = seat_spectrum%aerosol%type_aerosol%dim_1%LB
13618.                         t$6555 = seat_spectrum%aerosol%type_aerosol%dim_1%LB + seat_spectrum%aerosol%type_aerosol%dim_1%EX + -1
13618.                         t$6556 = 1 + $I_L13616_10
13618.                         call _bounds_error(  _substr(t$6561,1,13), 13618,  _substr(t$6562,1,13), 1, t$6554, t$6555, t$6556, t$6560 )
13618.                      endif
13617.                      $Unit_temp_O13 = iu_spc
13617.                      _fread( _clist( 0, 0, 0, $Unit_temp_O13, Null_Arg, Null_Arg, t$521,  _substr(t$520,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%type_aerosol%base_addr)(i, 0), 0x2000200000000L ), _iotype(  _substr(chdum,1,1), 0x800600000000L ) ) )
13617.                      $Unit_temp_O15 = iu_spc
13617.                      _fread( _clist( 0, 0, 1, $Unit_temp_O15, Null_Arg, Null_Arg, t$521,  _substr(t$520,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13619.                      $I_L13616_10 = 1 + $I_L13616_10
13619.                      if ( $I_L13616_10 >= $t_S3 ) exit
13619.                   enddo
13619.                   i = ( 1 + $t_S3 )
13619.                endif
13619.             endif
13619.          endif
13619.       endif
13624.       return
13624.       end
13624.       
13629.       
13629.       subroutine read_block_1_0_0_int
13640.       $Unit_temp_O0 = iu_spc
13640.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$523,  _substr(t$522,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13643.       seat_spectrum%basic%wavelength_short%header%a_contig = 1
13643.       seat_spectrum%basic%wavelength_short%dim_1%LB = 1
13643.       seat_spectrum%basic%wavelength_short%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13643.       seat_spectrum%basic%wavelength_short%dim_1%SM = 1
13643.       $_allo_P0(0) = 0x1000000000001L
13643.       $_allo_P0(1) = loc( seat_spectrum%basic%wavelength_short )
13643.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13644.       seat_spectrum%basic%wavelength_long%header%a_contig = 1
13644.       seat_spectrum%basic%wavelength_long%dim_1%LB = 1
13644.       seat_spectrum%basic%wavelength_long%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13644.       seat_spectrum%basic%wavelength_long%dim_1%SM = 1
13644.       $_allo_P1(0) = 0x1000000000001L
13644.       $_allo_P1(1) = loc( seat_spectrum%basic%wavelength_long )
13644.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
13645.       $t_S1 = seat_spectrum%basic%n_band
13645.       i = 1
13645.       if ( seat_spectrum%basic%n_band > 0 ) then
13645.          $I_L13645_4 = 0
13645.          do
13645.             i = ( 1 + $I_L13645_4 )
13646.             $Unit_temp_O1 = iu_spc
13646.             t$6566 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$525,  _substr(t$524,1,30), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13646.             if ( t$6566 == 0 ) then
13646.                $Unit_temp_O2 = iu_spc
13646.                t$6566 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$525,  _substr(t$524,1,30), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13646.                if ( t$6566 == 0 ) then
13647.                   if ( ( 1 + $I_L13645_4 ) < seat_spectrum%basic%wavelength_short%dim_1%LB .or. ( 1 + $I_L13645_4 ) > seat_spectrum%basic%wavelength_short%dim_1%LB + seat_spectrum%basic%wavelength_short%dim_1%EX + -1 ) then
13647.                       _substr(t$6568,1,13) = 'Rad_UKMO.f90'
13647.                       _substr(t$6569,1,17) = 'WAVELENGTH_SHORT'
13647.                      t$6570 = seat_spectrum%basic%wavelength_short%dim_1%LB
13647.                      t$6571 = seat_spectrum%basic%wavelength_short%dim_1%LB + seat_spectrum%basic%wavelength_short%dim_1%EX + -1
13647.                      t$6572 = 1 + $I_L13645_4
13647.                      call _bounds_error(  _substr(t$6568,1,13), 13647,  _substr(t$6569,1,17), 1, t$6570, t$6571, t$6572, t$6567 )
13647.                   endif
13646.                   $Unit_temp_O3 = iu_spc
13646.                   t$6566 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$525,  _substr(t$524,1,30), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%basic%wavelength_short%base_addr)(i, 0), 0x804060300000000L ) ) )
13646.                   if ( t$6566 == 0 ) then
13648.                      if ( i < seat_spectrum%basic%wavelength_long%dim_1%LB .or. i > seat_spectrum%basic%wavelength_long%dim_1%LB + seat_spectrum%basic%wavelength_long%dim_1%EX + -1 ) then
13648.                          _substr(t$6574,1,13) = 'Rad_UKMO.f90'
13648.                          _substr(t$6575,1,16) = 'WAVELENGTH_LONG'
13648.                         t$6576 = seat_spectrum%basic%wavelength_long%dim_1%LB
13648.                         t$6577 = seat_spectrum%basic%wavelength_long%dim_1%LB + seat_spectrum%basic%wavelength_long%dim_1%EX + -1
13648.                         t$6578 = i
13648.                         call _bounds_error(  _substr(t$6574,1,13), 13648,  _substr(t$6575,1,16), 1, t$6576, t$6577, t$6578, t$6573 )
13648.                      endif
13646.                      $Unit_temp_O5 = iu_spc
13646.                      t$6566 = _fread( _clist( 0, 1, 0, $Unit_temp_O5, ios, Null_Arg, t$525,  _substr(t$524,1,30), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%basic%wavelength_long%base_addr)(i, 0), 0x804060300000000L ) ) )
13646.                      if ( t$6566 == 0 ) then
13646.                         $Unit_temp_O7 = iu_spc
13646.                         t$6566 = _fread( _clist( 0, 1, 1, $Unit_temp_O7, ios, Null_Arg, t$525,  _substr(t$524,1,30), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13646.                      endif
13646.                   endif
13646.                endif
13646.             endif
13649.             if ( ios /= 0 ) then
13650.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$527,  _substr(t$526,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_1_0_0.', 0x800600000000L ), _iotype( 'Wavelength limits of bands could not be read.', 0x800600000000L ) ) )
13653.                seat_ierr = 1
13653.                goto 10
13653.             endif
13656.             $I_L13645_4 = 1 + $I_L13645_4
13656.             if ( $I_L13645_4 >= $t_S1 ) exit
13656.          enddo
13656.          i = ( 1 + $t_S1 )
13656.       endif
13656.    10 continue
13660.       return
13660.       end
13660.       
13665.       
13665.       subroutine read_block_2_0_0_int
13675.       $Unit_temp_O0 = iu_spc
13675.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$529,  _substr(t$528,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13678.       seat_spectrum%solar%solar_flux_band%header%a_contig = 1
13678.       seat_spectrum%solar%solar_flux_band%dim_1%LB = 1
13678.       seat_spectrum%solar%solar_flux_band%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13678.       seat_spectrum%solar%solar_flux_band%dim_1%SM = 1
13678.       $_allo_P0(0) = 0x1000000000001L
13678.       $_allo_P0(1) = loc( seat_spectrum%solar%solar_flux_band )
13678.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13679.       $t_S1 = seat_spectrum%basic%n_band
13679.       i = 1
13679.       if ( seat_spectrum%basic%n_band > 0 ) then
13679.          $I_L13679_4 = 0
13679.          do
13679.             i = ( 1 + $I_L13679_4 )
13680.             $Unit_temp_O1 = iu_spc
13680.             t$6582 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$531,  _substr(t$530,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13680.             if ( t$6582 == 0 ) then
13680.                $Unit_temp_O2 = iu_spc
13680.                t$6582 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$531,  _substr(t$530,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13680.                if ( t$6582 == 0 ) then
13681.                   if ( ( 1 + $I_L13679_4 ) < seat_spectrum%solar%solar_flux_band%dim_1%LB .or. ( 1 + $I_L13679_4 ) > seat_spectrum%solar%solar_flux_band%dim_1%LB + seat_spectrum%solar%solar_flux_band%dim_1%EX + -1 ) then
13681.                       _substr(t$6584,1,13) = 'Rad_UKMO.f90'
13681.                       _substr(t$6585,1,16) = 'SOLAR_FLUX_BAND'
13681.                      t$6586 = seat_spectrum%solar%solar_flux_band%dim_1%LB
13681.                      t$6587 = seat_spectrum%solar%solar_flux_band%dim_1%LB + seat_spectrum%solar%solar_flux_band%dim_1%EX + -1
13681.                      t$6588 = 1 + $I_L13679_4
13681.                      call _bounds_error(  _substr(t$6584,1,13), 13681,  _substr(t$6585,1,16), 1, t$6586, t$6587, t$6588, t$6583 )
13681.                   endif
13680.                   $Unit_temp_O3 = iu_spc
13680.                   t$6582 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$531,  _substr(t$530,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%solar%solar_flux_band%base_addr)(i, 0), 0x804060300000000L ) ) )
13680.                   if ( t$6582 == 0 ) then
13680.                      $Unit_temp_O5 = iu_spc
13680.                      t$6582 = _fread( _clist( 0, 1, 1, $Unit_temp_O5, ios, Null_Arg, t$531,  _substr(t$530,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13680.                   endif
13680.                endif
13680.             endif
13682.             if ( ios /= 0 ) then
13683.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$533,  _substr(t$532,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: solar spectral data are not correct.', 0x800600000000L ) ) )
13685.                seat_ierr = 1
13685.                goto 10
13685.             endif
13688.             $I_L13679_4 = 1 + $I_L13679_4
13688.             if ( $I_L13679_4 >= $t_S1 ) exit
13688.          enddo
13688.          i = ( 1 + $t_S1 )
13688.       endif
13688.    10 continue
13693.       return
13693.       end
13693.       
13698.       
13698.       subroutine read_block_3_0_0_int
13708.       $Unit_temp_O0 = iu_spc
13708.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$535,  _substr(t$534,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13711.       seat_spectrum%rayleigh%rayleigh_coeff%header%a_contig = 1
13711.       seat_spectrum%rayleigh%rayleigh_coeff%dim_1%LB = 1
13711.       seat_spectrum%rayleigh%rayleigh_coeff%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13711.       seat_spectrum%rayleigh%rayleigh_coeff%dim_1%SM = 1
13711.       $_allo_P0(0) = 0x1000000000001L
13711.       $_allo_P0(1) = loc( seat_spectrum%rayleigh%rayleigh_coeff )
13711.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13712.       $t_S1 = seat_spectrum%basic%n_band
13712.       i = 1
13712.       if ( seat_spectrum%basic%n_band > 0 ) then
13712.          $I_L13712_4 = 0
13712.          do
13712.             i = ( 1 + $I_L13712_4 )
13713.             $Unit_temp_O1 = iu_spc
13713.             t$6592 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$537,  _substr(t$536,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13713.             if ( t$6592 == 0 ) then
13713.                $Unit_temp_O2 = iu_spc
13713.                t$6592 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$537,  _substr(t$536,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13713.                if ( t$6592 == 0 ) then
13714.                   if ( ( 1 + $I_L13712_4 ) < seat_spectrum%rayleigh%rayleigh_coeff%dim_1%LB .or. ( 1 + $I_L13712_4 ) > seat_spectrum%rayleigh%rayleigh_coeff%dim_1%LB + seat_spectrum%rayleigh%rayleigh_coeff%dim_1%EX + -1 ) then
13714.                       _substr(t$6594,1,13) = 'Rad_UKMO.f90'
13714.                       _substr(t$6595,1,15) = 'RAYLEIGH_COEFF'
13714.                      t$6596 = seat_spectrum%rayleigh%rayleigh_coeff%dim_1%LB
13714.                      t$6597 = seat_spectrum%rayleigh%rayleigh_coeff%dim_1%LB + seat_spectrum%rayleigh%rayleigh_coeff%dim_1%EX + -1
13714.                      t$6598 = 1 + $I_L13712_4
13714.                      call _bounds_error(  _substr(t$6594,1,13), 13714,  _substr(t$6595,1,15), 1, t$6596, t$6597, t$6598, t$6593 )
13714.                   endif
13713.                   $Unit_temp_O3 = iu_spc
13713.                   t$6592 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$537,  _substr(t$536,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%rayleigh%rayleigh_coeff%base_addr)(i, 0), 0x804060300000000L ) ) )
13713.                   if ( t$6592 == 0 ) then
13713.                      $Unit_temp_O5 = iu_spc
13713.                      t$6592 = _fread( _clist( 0, 1, 1, $Unit_temp_O5, ios, Null_Arg, t$537,  _substr(t$536,1,17), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13713.                   endif
13713.                endif
13713.             endif
13715.             if ( ios /= 0 ) then
13716.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$539,  _substr(t$538,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: rayleigh scattering data are not correct.', 0x800600000000L ) ) )
13718.                seat_ierr = 1
13718.                goto 10
13718.             endif
13721.             $I_L13712_4 = 1 + $I_L13712_4
13721.             if ( $I_L13712_4 >= $t_S1 ) exit
13721.          enddo
13721.          i = ( 1 + $t_S1 )
13721.       endif
13721.    10 continue
13726.       return
13726.       end
13726.       
13731.       
13731.       subroutine read_block_4_0_0_int
13743.       $Unit_temp_O0 = iu_spc
13743.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$541,  _substr(t$540,1,6), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13746.       seat_spectrum%gas%n_band_absorb%header%a_contig = 1
13746.       seat_spectrum%gas%n_band_absorb%dim_1%LB = 1
13746.       seat_spectrum%gas%n_band_absorb%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13746.       seat_spectrum%gas%n_band_absorb%dim_1%SM = 1
13746.       $_allo_P0(0) = 0x1000000000001L
13746.       $_allo_P0(1) = loc( seat_spectrum%gas%n_band_absorb )
13746.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13747.       seat_spectrum%gas%index_absorb%header%a_contig = 1
13747.       seat_spectrum%gas%index_absorb%dim_1%LB = 1
13747.       seat_spectrum%gas%index_absorb%dim_1%EX = _zla( 0, (nd_species%base_addr)(0) )
13747.       seat_spectrum%gas%index_absorb%dim_1%SM = 1
13747.       seat_spectrum%gas%index_absorb%dim_2%LB = 1
13747.       seat_spectrum%gas%index_absorb%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
13747.       seat_spectrum%gas%index_absorb%dim_2%SM = _zla( 0, (nd_species%base_addr)(0) )
13747.       $_allo_P1(0) = 0x1000000000001L
13747.       $_allo_P1(1) = loc( seat_spectrum%gas%index_absorb )
13747.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
13748.       $t_S2 = seat_spectrum%basic%n_band
13748.       i = 1
13748.       if ( seat_spectrum%basic%n_band > 0 ) then
13748.          $I_L13748_10 = 0
13748.          do
13748.             i = ( 1 + $I_L13748_10 )
13749.             $Unit_temp_O1 = iu_spc
13749.             t$6602 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$543,  _substr(t$542,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13749.             if ( t$6602 == 0 ) then
13749.                $Unit_temp_O2 = iu_spc
13749.                t$6602 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$543,  _substr(t$542,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13749.                if ( t$6602 == 0 ) then
13750.                   if ( ( 1 + $I_L13748_10 ) < seat_spectrum%gas%n_band_absorb%dim_1%LB .or. ( 1 + $I_L13748_10 ) > seat_spectrum%gas%n_band_absorb%dim_1%LB + seat_spectrum%gas%n_band_absorb%dim_1%EX + -1 ) then
13750.                       _substr(t$6604,1,13) = 'Rad_UKMO.f90'
13750.                       _substr(t$6605,1,14) = 'N_BAND_ABSORB'
13750.                      t$6606 = seat_spectrum%gas%n_band_absorb%dim_1%LB
13750.                      t$6607 = seat_spectrum%gas%n_band_absorb%dim_1%LB + seat_spectrum%gas%n_band_absorb%dim_1%EX + -1
13750.                      t$6608 = 1 + $I_L13748_10
13750.                      call _bounds_error(  _substr(t$6604,1,13), 13750,  _substr(t$6605,1,14), 1, t$6606, t$6607, t$6608, t$6603 )
13750.                   endif
13749.                   $Unit_temp_O3 = iu_spc
13749.                   t$6602 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$543,  _substr(t$542,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%n_band_absorb%base_addr)(i, 0), 0x2000200000000L ) ) )
13749.                   if ( t$6602 == 0 ) then
13749.                      $Unit_temp_O5 = iu_spc
13749.                      t$6602 = _fread( _clist( 0, 1, 1, $Unit_temp_O5, ios, Null_Arg, t$543,  _substr(t$542,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13749.                   endif
13749.                endif
13749.             endif
13751.             if ( ios /= 0 ) then
13752.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$545,  _substr(t$544,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_4_0_0', 0x800600000000L ) ) )
13754.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'The list of absorbers is not correct.', 0x800600000000L ) ) )
13755.                seat_ierr = 1
13755.                goto 10
13755.             endif
13758.             if ( (seat_spectrum%gas%n_band_absorb%base_addr)(i, 0) > 0 ) then
13759.                $Unit_temp_O6 = iu_spc
13759.                _fread( _clist( 0, 0, 2, $Unit_temp_O6, Null_Arg, Null_Arg, t$547,  _substr(t$546,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13761.                if ( i < seat_spectrum%gas%n_band_absorb%dim_1%LB .or. i > seat_spectrum%gas%n_band_absorb%dim_1%LB + seat_spectrum%gas%n_band_absorb%dim_1%EX + -1 ) then
13761.                    _substr(t$6610,1,13) = 'Rad_UKMO.f90'
13761.                    _substr(t$6611,1,14) = 'N_BAND_ABSORB'
13761.                   t$6606 = seat_spectrum%gas%n_band_absorb%dim_1%LB
13761.                   t$6607 = seat_spectrum%gas%n_band_absorb%dim_1%LB + seat_spectrum%gas%n_band_absorb%dim_1%EX + -1
13761.                   t$6608 = i
13761.                   call _bounds_error(  _substr(t$6610,1,13), 13761,  _substr(t$6611,1,14), 1, t$6606, t$6607, t$6608, t$6609 )
13761.                endif
13759.                $t_S1 = (seat_spectrum%gas%n_band_absorb%base_addr)(i, 0)
13759.                if ( $t_S1 > 0 ) then
13759.                   $I_L13759_8 = 0
13759.                   do
13760.                      if ( ( 1 + $I_L13759_8 ) < seat_spectrum%gas%index_absorb%dim_1%LB .or. ( 1 + $I_L13759_8 ) > seat_spectrum%gas%index_absorb%dim_1%LB + seat_spectrum%gas%index_absorb%dim_1%EX + -1 ) then
13760.                          _substr(t$6616,1,13) = 'Rad_UKMO.f90'
13760.                          _substr(t$6617,1,13) = 'INDEX_ABSORB'
13760.                         t$6618 = seat_spectrum%gas%index_absorb%dim_1%LB
13760.                         t$6619 = seat_spectrum%gas%index_absorb%dim_1%LB + seat_spectrum%gas%index_absorb%dim_1%EX + -1
13760.                         t$6620 = 1 + $I_L13759_8
13760.                         call _bounds_error(  _substr(t$6616,1,13), 13760,  _substr(t$6617,1,13), 1, t$6618, t$6619, t$6620, t$6615 )
13760.                      endif
13760.                      if ( i < seat_spectrum%gas%index_absorb%dim_2%LB .or. i > seat_spectrum%gas%index_absorb%dim_2%LB + seat_spectrum%gas%index_absorb%dim_2%EX + -1 ) then
13760.                          _substr(t$6622,1,13) = 'Rad_UKMO.f90'
13760.                          _substr(t$6623,1,13) = 'INDEX_ABSORB'
13760.                         t$6624 = seat_spectrum%gas%index_absorb%dim_2%LB
13760.                         t$6625 = seat_spectrum%gas%index_absorb%dim_2%LB + seat_spectrum%gas%index_absorb%dim_2%EX + -1
13760.                         t$6626 = i
13760.                         call _bounds_error(  _substr(t$6622,1,13), 13760,  _substr(t$6623,1,13), 2, t$6624, t$6625, t$6626, t$6621 )
13760.                      endif
13759.                      $Unit_temp_O7 = iu_spc
13759.                      _fread( _clist( 0, 0, 0, $Unit_temp_O7, Null_Arg, Null_Arg, t$547,  _substr(t$546,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%index_absorb%base_addr)(1 + $I_L13759_8, i, 0), 0x2000200000000L ) ) )
13759.                      $I_L13759_8 = 1 + $I_L13759_8
13759.                      if ( $I_L13759_8 >= $t_S1 ) exit
13759.                   enddo
13759.                endif
13759.                $Unit_temp_O10 = iu_spc
13759.                _fread( _clist( 0, 0, 1, $Unit_temp_O10, Null_Arg, Null_Arg, t$547,  _substr(t$546,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13759.             endif
13763.             if ( ios /= 0 ) then
13764.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$549,  _substr(t$548,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_4_0_0', 0x800600000000L ) ) )
13766.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'The list of absorbers is not correct.', 0x800600000000L ) ) )
13767.                seat_ierr = 1
13767.                goto 10
13767.             endif
13770.             $I_L13748_10 = 1 + $I_L13748_10
13770.             if ( $I_L13748_10 >= $t_S2 ) exit
13770.          enddo
13770.          i = ( 1 + $t_S2 )
13770.       endif
13770.    10 continue
13775.       return
13775.       end
13775.       
13780.       
13780.       subroutine read_block_5_0_0_int
13805.       seat_spectrum%gas%i_band_k%header%a_contig = 1
13805.       seat_spectrum%gas%i_band_k%dim_1%LB = 1
13805.       seat_spectrum%gas%i_band_k%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13805.       seat_spectrum%gas%i_band_k%dim_1%SM = 1
13805.       seat_spectrum%gas%i_band_k%dim_2%LB = 1
13805.       seat_spectrum%gas%i_band_k%dim_2%EX = _zla( 0, (nd_species%base_addr)(0) )
13805.       seat_spectrum%gas%i_band_k%dim_2%SM = _zla( 0, (nd_band%base_addr)(0) )
13805.       $_allo_P1(0) = 0x1000000000001L
13805.       $_allo_P1(1) = loc( seat_spectrum%gas%i_band_k )
13805.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
13806.       seat_spectrum%gas%i_scale_k%header%a_contig = 1
13806.       seat_spectrum%gas%i_scale_k%dim_1%LB = 1
13806.       seat_spectrum%gas%i_scale_k%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13806.       seat_spectrum%gas%i_scale_k%dim_1%SM = 1
13806.       seat_spectrum%gas%i_scale_k%dim_2%LB = 1
13806.       seat_spectrum%gas%i_scale_k%dim_2%EX = _zla( 0, (nd_species%base_addr)(0) )
13806.       seat_spectrum%gas%i_scale_k%dim_2%SM = _zla( 0, (nd_band%base_addr)(0) )
13806.       $_allo_P2(0) = 0x1000000000001L
13806.       $_allo_P2(1) = loc( seat_spectrum%gas%i_scale_k )
13806.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
13807.       seat_spectrum%gas%i_scale_fnc%header%a_contig = 1
13807.       seat_spectrum%gas%i_scale_fnc%dim_1%LB = 1
13807.       seat_spectrum%gas%i_scale_fnc%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13807.       seat_spectrum%gas%i_scale_fnc%dim_1%SM = 1
13807.       seat_spectrum%gas%i_scale_fnc%dim_2%LB = 1
13807.       seat_spectrum%gas%i_scale_fnc%dim_2%EX = _zla( 0, (nd_species%base_addr)(0) )
13807.       seat_spectrum%gas%i_scale_fnc%dim_2%SM = _zla( 0, (nd_band%base_addr)(0) )
13807.       $_allo_P3(0) = 0x1000000000001L
13807.       $_allo_P3(1) = loc( seat_spectrum%gas%i_scale_fnc )
13807.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
13808.       seat_spectrum%gas%k%header%a_contig = 1
13808.       seat_spectrum%gas%k%dim_1%LB = 1
13808.       seat_spectrum%gas%k%dim_1%EX = _zla( 0, (nd_k_term%base_addr)(0) )
13808.       seat_spectrum%gas%k%dim_1%SM = 1
13808.       seat_spectrum%gas%k%dim_2%LB = 1
13808.       seat_spectrum%gas%k%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
13808.       seat_spectrum%gas%k%dim_2%SM = _zla( 0, (nd_k_term%base_addr)(0) )
13808.       seat_spectrum%gas%k%dim_3%LB = 1
13808.       seat_spectrum%gas%k%dim_3%EX = _zla( 0, (nd_species%base_addr)(0) )
13808.       seat_spectrum%gas%k%dim_3%SM = ( _zla( 0, (nd_k_term%base_addr)(0) ) * _zla( 0, (nd_band%base_addr)(0) ) )
13808.       $_allo_P4(0) = 0x1000000000001L
13808.       $_allo_P4(1) = loc( seat_spectrum%gas%k )
13808.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
13809.       seat_spectrum%gas%w%header%a_contig = 1
13809.       seat_spectrum%gas%w%dim_1%LB = 1
13809.       seat_spectrum%gas%w%dim_1%EX = _zla( 0, (nd_k_term%base_addr)(0) )
13809.       seat_spectrum%gas%w%dim_1%SM = 1
13809.       seat_spectrum%gas%w%dim_2%LB = 1
13809.       seat_spectrum%gas%w%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
13809.       seat_spectrum%gas%w%dim_2%SM = _zla( 0, (nd_k_term%base_addr)(0) )
13809.       seat_spectrum%gas%w%dim_3%LB = 1
13809.       seat_spectrum%gas%w%dim_3%EX = _zla( 0, (nd_species%base_addr)(0) )
13809.       seat_spectrum%gas%w%dim_3%SM = ( _zla( 0, (nd_k_term%base_addr)(0) ) * _zla( 0, (nd_band%base_addr)(0) ) )
13809.       $_allo_P5(0) = 0x1000000000001L
13809.       $_allo_P5(1) = loc( seat_spectrum%gas%w )
13809.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
13810.       seat_spectrum%gas%p_ref%header%a_contig = 1
13810.       seat_spectrum%gas%p_ref%dim_1%LB = 1
13810.       seat_spectrum%gas%p_ref%dim_1%EX = _zla( 0, (nd_species%base_addr)(0) )
13810.       seat_spectrum%gas%p_ref%dim_1%SM = 1
13810.       seat_spectrum%gas%p_ref%dim_2%LB = 1
13810.       seat_spectrum%gas%p_ref%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
13810.       seat_spectrum%gas%p_ref%dim_2%SM = _zla( 0, (nd_species%base_addr)(0) )
13810.       $_allo_P6(0) = 0x1000000000001L
13810.       $_allo_P6(1) = loc( seat_spectrum%gas%p_ref )
13810.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
13811.       seat_spectrum%gas%t_ref%header%a_contig = 1
13811.       seat_spectrum%gas%t_ref%dim_1%LB = 1
13811.       seat_spectrum%gas%t_ref%dim_1%EX = _zla( 0, (nd_species%base_addr)(0) )
13811.       seat_spectrum%gas%t_ref%dim_1%SM = 1
13811.       seat_spectrum%gas%t_ref%dim_2%LB = 1
13811.       seat_spectrum%gas%t_ref%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
13811.       seat_spectrum%gas%t_ref%dim_2%SM = _zla( 0, (nd_species%base_addr)(0) )
13811.       $_allo_P7(0) = 0x1000000000001L
13811.       $_allo_P7(1) = loc( seat_spectrum%gas%t_ref )
13811.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
13812.       seat_spectrum%gas%scale%header%a_contig = 1
13812.       seat_spectrum%gas%scale%dim_1%LB = 1
13812.       seat_spectrum%gas%scale%dim_1%EX = _zla( 0, (nd_scale_variable%base_addr)(0) )
13812.       seat_spectrum%gas%scale%dim_1%SM = 1
13812.       seat_spectrum%gas%scale%dim_2%LB = 1
13812.       seat_spectrum%gas%scale%dim_2%EX = _zla( 0, (nd_k_term%base_addr)(0) )
13812.       seat_spectrum%gas%scale%dim_2%SM = _zla( 0, (nd_scale_variable%base_addr)(0) )
13812.       seat_spectrum%gas%scale%dim_3%LB = 1
13812.       seat_spectrum%gas%scale%dim_3%EX = _zla( 0, (nd_band%base_addr)(0) )
13812.       seat_spectrum%gas%scale%dim_3%SM = ( _zla( 0, (nd_k_term%base_addr)(0) ) * _zla( 0, (nd_scale_variable%base_addr)(0) ) )
13812.       seat_spectrum%gas%scale%dim_4%LB = 1
13812.       seat_spectrum%gas%scale%dim_4%EX = _zla( 0, (nd_species%base_addr)(0) )
13812.       seat_spectrum%gas%scale%dim_4%SM = ( _zla( 0, (nd_k_term%base_addr)(0) ) * _zla( 0, (nd_band%base_addr)(0) ) * _zla( 0, (nd_scale_variable%base_addr)(0) ) )
13812.       $_allo_P8(0) = 0x1000000000001L
13812.       $_allo_P8(1) = loc( seat_spectrum%gas%scale )
13812.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
13816.       $Unit_temp_O0 = iu_spc
13816.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$551,  _substr(t$550,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13819.       $t_S4 = seat_spectrum%basic%n_band
13819.       i = 1
13819.       if ( seat_spectrum%basic%n_band > 0 ) then
13819.          $I_L13819_22 = 0
13819.          do
13819.             i = ( 1 + $I_L13819_22 )
13820.             $t_S1 = (seat_spectrum%gas%n_band_absorb%base_addr)(1 + $I_L13819_22, 0)
13820.             if ( $t_S1 > 0 ) then
13820.                $I_L13820_20 = 0
13820.                do
13821.                   $Unit_temp_O1 = iu_spc
13821.                   t$6633 = _fread( _clist( 0, 1, 3, $Unit_temp_O1, ios, Null_Arg, t$553,  _substr(t$552,1,15), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 4, 1 )), 0x2000200000000L ) ) )
13821.                   idum_band = $_IOitem_P0(0)
13821.                   idum_species = $_IOitem_P0(1)
13821.                   number_term = $_IOitem_P0(2)
13821.                   idum_scale = $_IOitem_P0(3)
13821.                   idum_fnc = $_IOitem_P0(4)
13823.                   if ( ios /= 0 ) then
13824.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$555,  _substr(t$554,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_5_0_0', 0x800600000000L ), _iotype( 'k-distribution data are not consistent with the summary.', 0x800600000000L ) ) )
13827.                      seat_ierr = 1
13827.                      goto 30
13827.                   endif
13830.                   if ( idum_fnc == 1 .orelse. idum_fnc == 2 .orelse. idum_fnc == 3 .orelse. idum_fnc == 0 ) then
13840.                      if ( number_term > (nd_k_term%base_addr)(0) ) then
13841.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$559,  _substr(t$558,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_5_0_0', 0x800600000000L ), _iotype( 'Too many esft terms have been given.', 0x800600000000L ), _iotype( 'increase NPD_k_term and recompile.', 0x800600000000L ) ) )
13845.                         seat_ierr = 1
13845.                         goto 30
13845.                      endif
13848.                      (seat_spectrum%gas%i_band_k%base_addr)(idum_band, idum_species, 0) = number_term
13849.                      (seat_spectrum%gas%i_scale_k%base_addr)(idum_band, idum_species, 0) = idum_scale
13850.                      (seat_spectrum%gas%i_scale_fnc%base_addr)(idum_band, idum_species, 0) = idum_fnc
13853.                      $Unit_temp_O2 = iu_spc
13853.                      _fread( _clist( 0, 0, 2, $Unit_temp_O2, Null_Arg, Null_Arg, t$561,  _substr(t$560,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13854.                      if ( idum_species < seat_spectrum%gas%p_ref%dim_1%LB .or. idum_species > seat_spectrum%gas%p_ref%dim_1%LB + seat_spectrum%gas%p_ref%dim_1%EX + -1 ) then
13854.                          _substr(t$6635,1,13) = 'Rad_UKMO.f90'
13854.                          _substr(t$6636,1,6) = 'P_REF'
13854.                         t$6637 = seat_spectrum%gas%p_ref%dim_1%LB
13854.                         t$6638 = seat_spectrum%gas%p_ref%dim_1%LB + seat_spectrum%gas%p_ref%dim_1%EX + -1
13854.                         t$6639 = idum_species
13854.                         call _bounds_error(  _substr(t$6635,1,13), 13854,  _substr(t$6636,1,6), 1, t$6637, t$6638, t$6639, t$6634 )
13854.                      endif
13854.                      if ( idum_band < seat_spectrum%gas%p_ref%dim_2%LB .or. idum_band > seat_spectrum%gas%p_ref%dim_2%LB + seat_spectrum%gas%p_ref%dim_2%EX + -1 ) then
13854.                          _substr(t$6641,1,13) = 'Rad_UKMO.f90'
13854.                          _substr(t$6642,1,6) = 'P_REF'
13854.                         t$6643 = seat_spectrum%gas%p_ref%dim_2%LB
13854.                         t$6644 = seat_spectrum%gas%p_ref%dim_2%LB + seat_spectrum%gas%p_ref%dim_2%EX + -1
13854.                         t$6645 = idum_band
13854.                         call _bounds_error(  _substr(t$6641,1,13), 13854,  _substr(t$6642,1,6), 2, t$6643, t$6644, t$6645, t$6640 )
13854.                      endif
13853.                      $Unit_temp_O3 = iu_spc
13853.                      _fread( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$561,  _substr(t$560,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%p_ref%base_addr)(idum_species, idum_band, 0), 0x804060300000000L ) ) )
13855.                      if ( idum_species < seat_spectrum%gas%t_ref%dim_1%LB .or. idum_species > seat_spectrum%gas%t_ref%dim_1%LB + seat_spectrum%gas%t_ref%dim_1%EX + -1 ) then
13855.                          _substr(t$6647,1,13) = 'Rad_UKMO.f90'
13855.                          _substr(t$6648,1,6) = 'T_REF'
13855.                         t$6649 = seat_spectrum%gas%t_ref%dim_1%LB
13855.                         t$6650 = seat_spectrum%gas%t_ref%dim_1%LB + seat_spectrum%gas%t_ref%dim_1%EX + -1
13855.                         t$6651 = idum_species
13855.                         call _bounds_error(  _substr(t$6647,1,13), 13855,  _substr(t$6648,1,6), 1, t$6649, t$6650, t$6651, t$6646 )
13855.                      endif
13855.                      if ( idum_band < seat_spectrum%gas%t_ref%dim_2%LB .or. idum_band > seat_spectrum%gas%t_ref%dim_2%LB + seat_spectrum%gas%t_ref%dim_2%EX + -1 ) then
13855.                          _substr(t$6653,1,13) = 'Rad_UKMO.f90'
13855.                          _substr(t$6654,1,6) = 'T_REF'
13855.                         t$6655 = seat_spectrum%gas%t_ref%dim_2%LB
13855.                         t$6656 = seat_spectrum%gas%t_ref%dim_2%LB + seat_spectrum%gas%t_ref%dim_2%EX + -1
13855.                         t$6657 = idum_band
13855.                         call _bounds_error(  _substr(t$6653,1,13), 13855,  _substr(t$6654,1,6), 2, t$6655, t$6656, t$6657, t$6652 )
13855.                      endif
13853.                      $Unit_temp_O6 = iu_spc
13853.                      _fread( _clist( 0, 0, 0, $Unit_temp_O6, Null_Arg, Null_Arg, t$561,  _substr(t$560,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%t_ref%base_addr)(idum_species, idum_band, 0), 0x804060300000000L ) ) )
13853.                      $Unit_temp_O9 = iu_spc
13853.                      _fread( _clist( 0, 0, 1, $Unit_temp_O9, Null_Arg, Null_Arg, t$561,  _substr(t$560,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13857.                      if ( number_term > 0 ) then
13857.                         $I_L13857_18 = 0
13857.                         do
13858.                            $Unit_temp_O10 = iu_spc
13858.                            t$6661 = _fread( _clist( 0, 1, 2, $Unit_temp_O10, ios, Null_Arg, t$563,  _substr(t$562,1,38), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13858.                            if ( t$6661 == 0 ) then
13860.                               if ( ( 1 + $I_L13857_18 ) < seat_spectrum%gas%k%dim_1%LB .or. ( 1 + $I_L13857_18 ) > seat_spectrum%gas%k%dim_1%LB + seat_spectrum%gas%k%dim_1%EX + -1 ) then
13860.                                   _substr(t$6663,1,13) = 'Rad_UKMO.f90'
13860.                                   _substr(t$6664,1,4) = 'K'
13860.                                  t$6637 = seat_spectrum%gas%k%dim_1%LB
13860.                                  t$6638 = seat_spectrum%gas%k%dim_1%LB + seat_spectrum%gas%k%dim_1%EX + -1
13860.                                  t$6639 = 1 + $I_L13857_18
13860.                                  call _bounds_error(  _substr(t$6663,1,13), 13860,  _substr(t$6664,1,2), 1, t$6637, t$6638, t$6639, t$6662 )
13860.                               endif
13860.                               if ( idum_band < seat_spectrum%gas%k%dim_2%LB .or. idum_band > seat_spectrum%gas%k%dim_2%LB + seat_spectrum%gas%k%dim_2%EX + -1 ) then
13860.                                   _substr(t$6666,1,13) = 'Rad_UKMO.f90'
13860.                                   _substr(t$6667,1,4) = 'K'
13860.                                  t$6643 = seat_spectrum%gas%k%dim_2%LB
13860.                                  t$6644 = seat_spectrum%gas%k%dim_2%LB + seat_spectrum%gas%k%dim_2%EX + -1
13860.                                  t$6645 = idum_band
13860.                                  call _bounds_error(  _substr(t$6666,1,13), 13860,  _substr(t$6667,1,2), 2, t$6643, t$6644, t$6645, t$6665 )
13860.                               endif
13860.                               if ( idum_species < seat_spectrum%gas%k%dim_3%LB .or. idum_species > seat_spectrum%gas%k%dim_3%LB + seat_spectrum%gas%k%dim_3%EX + -1 ) then
13860.                                   _substr(t$6669,1,13) = 'Rad_UKMO.f90'
13860.                                   _substr(t$6670,1,4) = 'K'
13860.                                  t$6649 = seat_spectrum%gas%k%dim_3%LB
13860.                                  t$6650 = seat_spectrum%gas%k%dim_3%LB + seat_spectrum%gas%k%dim_3%EX + -1
13860.                                  t$6651 = idum_species
13860.                                  call _bounds_error(  _substr(t$6669,1,13), 13860,  _substr(t$6670,1,2), 3, t$6649, t$6650, t$6651, t$6668 )
13860.                               endif
13858.                               $Unit_temp_O11 = iu_spc
13858.                               t$6661 = _fread( _clist( 0, 1, 0, $Unit_temp_O11, ios, Null_Arg, t$563,  _substr(t$562,1,38), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%k%base_addr)(1 + $I_L13857_18, idum_band, idum_species, 0), 0x804060300000000L ) ) )
13858.                               if ( t$6661 == 0 ) then
13861.                                  if ( ( 1 + $I_L13857_18 ) < seat_spectrum%gas%w%dim_1%LB .or. ( 1 + $I_L13857_18 ) > seat_spectrum%gas%w%dim_1%LB + seat_spectrum%gas%w%dim_1%EX + -1 ) then
13861.                                      _substr(t$6672,1,13) = 'Rad_UKMO.f90'
13861.                                      _substr(t$6673,1,4) = 'W'
13861.                                     t$6655 = seat_spectrum%gas%w%dim_1%LB
13861.                                     t$6656 = seat_spectrum%gas%w%dim_1%LB + seat_spectrum%gas%w%dim_1%EX + -1
13861.                                     t$6657 = 1 + $I_L13857_18
13861.                                     call _bounds_error(  _substr(t$6672,1,13), 13861,  _substr(t$6673,1,2), 1, t$6655, t$6656, t$6657, t$6671 )
13861.                                  endif
13861.                                  if ( idum_band < seat_spectrum%gas%w%dim_2%LB .or. idum_band > seat_spectrum%gas%w%dim_2%LB + seat_spectrum%gas%w%dim_2%EX + -1 ) then
13861.                                      _substr(t$6675,1,13) = 'Rad_UKMO.f90'
13861.                                      _substr(t$6676,1,4) = 'W'
13861.                                     t$6677 = seat_spectrum%gas%w%dim_2%LB
13861.                                     t$6678 = seat_spectrum%gas%w%dim_2%LB + seat_spectrum%gas%w%dim_2%EX + -1
13861.                                     t$6679 = idum_band
13861.                                     call _bounds_error(  _substr(t$6675,1,13), 13861,  _substr(t$6676,1,2), 2, t$6677, t$6678, t$6679, t$6674 )
13861.                                  endif
13861.                                  if ( idum_species < seat_spectrum%gas%w%dim_3%LB .or. idum_species > seat_spectrum%gas%w%dim_3%LB + seat_spectrum%gas%w%dim_3%EX + -1 ) then
13861.                                      _substr(t$6681,1,13) = 'Rad_UKMO.f90'
13861.                                      _substr(t$6682,1,4) = 'W'
13861.                                     t$6683 = seat_spectrum%gas%w%dim_3%LB
13861.                                     t$6684 = seat_spectrum%gas%w%dim_3%LB + seat_spectrum%gas%w%dim_3%EX + -1
13861.                                     t$6685 = idum_species
13861.                                     call _bounds_error(  _substr(t$6681,1,13), 13861,  _substr(t$6682,1,2), 3, t$6683, t$6684, t$6685, t$6680 )
13861.                                  endif
13858.                                  $Unit_temp_O14 = iu_spc
13858.                                  t$6661 = _fread( _clist( 0, 1, 0, $Unit_temp_O14, ios, Null_Arg, t$563,  _substr(t$562,1,38), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%w%base_addr)(1 + $I_L13857_18, idum_band, idum_species, 0), 0x804060300000000L ) ) )
13858.                                  if ( t$6661 == 0 ) then
13858.                                     $t_S2 = n_scale_variable(idum_fnc)
13858.                                     if ( $t_S2 > 0 ) then
13858.                                        $I_L13858_16 = 0
13858.                                        do
13862.                                           if ( ( 1 + $I_L13858_16 ) < seat_spectrum%gas%scale%dim_1%LB .or. ( 1 + $I_L13858_16 ) > seat_spectrum%gas%scale%dim_1%LB + seat_spectrum%gas%scale%dim_1%EX + -1 ) then
13862.                                               _substr(t$6690,1,13) = 'Rad_UKMO.f90'
13862.                                               _substr(t$6691,1,6) = 'SCALE'
13862.                                              t$6692 = seat_spectrum%gas%scale%dim_1%LB
13862.                                              t$6693 = seat_spectrum%gas%scale%dim_1%LB + seat_spectrum%gas%scale%dim_1%EX + -1
13862.                                              t$6694 = 1 + $I_L13858_16
13862.                                              call _bounds_error(  _substr(t$6690,1,13), 13862,  _substr(t$6691,1,6), 1, t$6692, t$6693, t$6694, t$6689 )
13862.                                           endif
13862.                                           if ( ( 1 + $I_L13857_18 ) < seat_spectrum%gas%scale%dim_2%LB .or. ( 1 + $I_L13857_18 ) > seat_spectrum%gas%scale%dim_2%LB + seat_spectrum%gas%scale%dim_2%EX + -1 ) then
13862.                                               _substr(t$6696,1,13) = 'Rad_UKMO.f90'
13862.                                               _substr(t$6697,1,6) = 'SCALE'
13862.                                              t$6698 = seat_spectrum%gas%scale%dim_2%LB
13862.                                              t$6699 = seat_spectrum%gas%scale%dim_2%LB + seat_spectrum%gas%scale%dim_2%EX + -1
13862.                                              t$6700 = 1 + $I_L13857_18
13862.                                              call _bounds_error(  _substr(t$6696,1,13), 13862,  _substr(t$6697,1,6), 2, t$6698, t$6699, t$6700, t$6695 )
13862.                                           endif
13862.                                           if ( idum_band < seat_spectrum%gas%scale%dim_3%LB .or. idum_band > seat_spectrum%gas%scale%dim_3%LB + seat_spectrum%gas%scale%dim_3%EX + -1 ) then
13862.                                               _substr(t$6702,1,13) = 'Rad_UKMO.f90'
13862.                                               _substr(t$6703,1,6) = 'SCALE'
13862.                                              t$6704 = seat_spectrum%gas%scale%dim_3%LB
13862.                                              t$6705 = seat_spectrum%gas%scale%dim_3%LB + seat_spectrum%gas%scale%dim_3%EX + -1
13862.                                              t$6706 = idum_band
13862.                                              call _bounds_error(  _substr(t$6702,1,13), 13862,  _substr(t$6703,1,6), 3, t$6704, t$6705, t$6706, t$6701 )
13862.                                           endif
13862.                                           if ( idum_species < seat_spectrum%gas%scale%dim_4%LB .or. idum_species > seat_spectrum%gas%scale%dim_4%LB + seat_spectrum%gas%scale%dim_4%EX + -1 ) then
13862.                                               _substr(t$6708,1,13) = 'Rad_UKMO.f90'
13862.                                               _substr(t$6709,1,6) = 'SCALE'
13862.                                              t$6710 = seat_spectrum%gas%scale%dim_4%LB
13862.                                              t$6711 = seat_spectrum%gas%scale%dim_4%LB + seat_spectrum%gas%scale%dim_4%EX + -1
13862.                                              t$6712 = idum_species
13862.                                              call _bounds_error(  _substr(t$6708,1,13), 13862,  _substr(t$6709,1,6), 4, t$6710, t$6711, t$6712, t$6707 )
13862.                                           endif
13858.                                           $Unit_temp_O17 = iu_spc
13858.                                           t$6661 = _fread( _clist( 0, 1, 0, $Unit_temp_O17, ios, Null_Arg, t$563,  _substr(t$562,1,38), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%gas%scale%base_addr)(1 + $I_L13858_16, 1 + $I_L13857_18, idum_band, idum_species, 0), 0x804060300000000L ) ) )
13858.                                           if ( t$6661 /= 0 ) goto 20
13858.                                           $I_L13858_16 = 1 + $I_L13858_16
13858.                                           if ( $I_L13858_16 >= $t_S2 ) exit
13858.                                        enddo
13858.                                        goto 10
13858.                                     else
13858.    10                                  continue
13858.                                        $Unit_temp_O21 = iu_spc
13858.                                        t$6661 = _fread( _clist( 0, 1, 1, $Unit_temp_O21, ios, Null_Arg, t$563,  _substr(t$562,1,38), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13858.                                     endif
13858.                                  endif
13858.                               endif
13858.                            endif
13858.    20                      continue
13864.                            if ( ios /= 0 ) then
13865.                               _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$565,  _substr(t$564,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_5_0_0', 0x800600000000L ), _iotype( 'k-distribution data are not consistent with the summary.', 0x800600000000L ) ) )
13868.                               seat_ierr = 1
13868.                               goto 30
13868.                            endif
13871.                            $I_L13857_18 = 1 + $I_L13857_18
13871.                            if ( $I_L13857_18 >= number_term ) exit
13871.                         enddo
13872.                         $I_L13820_20 = 1 + $I_L13820_20
13871.                      else
13871.                      endif
13871.                   else
13871.                   endif
13871.                   if ( $I_L13820_20 >= $t_S1 ) exit
13871.                enddo
13873.                $I_L13819_22 = 1 + $I_L13819_22
13872.             else
13872.             endif
13872.             if ( $I_L13819_22 >= $t_S4 ) exit
13872.          enddo
13873.          i = ( 1 + $t_S4 )
13873.       endif
13873.    30 continue
13878.       return
13878.       end
13878.       
13883.       
13883.       subroutine read_block_6_0_0_int
13894.       $Unit_temp_O0 = iu_spc
13894.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$567,  _substr(t$566,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O8, 0x2000200000000L ), _iotype( $IOitem_O9, 0x804060300000000L ) ) )
13894.       seat_spectrum%planck%n_deg_fit = $IOitem_O8
13894.       seat_spectrum%planck%t_ref_planck = $IOitem_O9
13896.       (nd_thermal_coeff%base_addr)(0) = 1 + $IOitem_O8
13897.       seat_spectrum%planck%thermal_coeff%header%a_contig = 1
13897.       seat_spectrum%planck%thermal_coeff%dim_1%LB = 0
13897.       seat_spectrum%planck%thermal_coeff%dim_1%EX = _zla( 0, ( 1 + $IOitem_O8 ) )
13897.       seat_spectrum%planck%thermal_coeff%dim_1%SM = 1
13897.       seat_spectrum%planck%thermal_coeff%dim_2%LB = 1
13897.       seat_spectrum%planck%thermal_coeff%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
13897.       seat_spectrum%planck%thermal_coeff%dim_2%SM = _zla( 0, ( 1 + $IOitem_O8 ) )
13897.       $_allo_P0(0) = 0x1000000000001L
13897.       $_allo_P0(1) = loc( seat_spectrum%planck%thermal_coeff )
13897.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13899.       $Unit_temp_O1 = iu_spc
13899.       _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$569,  _substr(t$568,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13900.       $t_S2 = seat_spectrum%basic%n_band
13900.       i = 1
13900.       if ( seat_spectrum%basic%n_band > 0 ) then
13900.          $I_L13900_10 = 0
13900.          do
13900.             i = ( 1 + $I_L13900_10 )
13901.             $Unit_temp_O2 = iu_spc
13901.             t$6716 = _fread( _clist( 0, 1, 2, $Unit_temp_O2, ios, Null_Arg, t$571,  _substr(t$570,1,31), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13901.             if ( t$6716 == 0 ) then
13901.                $Unit_temp_O3 = iu_spc
13901.                t$6716 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$571,  _substr(t$570,1,31), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i_band, 0x2000200000000L ) ) )
13901.                if ( t$6716 == 0 ) then
13901.                   $t_S1 = seat_spectrum%planck%n_deg_fit
13901.                   if ( seat_spectrum%planck%n_deg_fit >= 0 ) then
13901.                      $I_L13901_8 = 0
13901.                      do
13902.                         if ( $I_L13901_8 < seat_spectrum%planck%thermal_coeff%dim_1%LB .or. $I_L13901_8 > seat_spectrum%planck%thermal_coeff%dim_1%LB + seat_spectrum%planck%thermal_coeff%dim_1%EX + -1 ) then
13902.                             _substr(t$6721,1,13) = 'Rad_UKMO.f90'
13902.                             _substr(t$6722,1,14) = 'THERMAL_COEFF'
13902.                            t$6723 = seat_spectrum%planck%thermal_coeff%dim_1%LB
13902.                            t$6724 = seat_spectrum%planck%thermal_coeff%dim_1%LB + seat_spectrum%planck%thermal_coeff%dim_1%EX + -1
13902.                            t$6725 = $I_L13901_8
13902.                            call _bounds_error(  _substr(t$6721,1,13), 13902,  _substr(t$6722,1,14), 1, t$6723, t$6724, t$6725, t$6720 )
13902.                         endif
13902.                         if ( i < seat_spectrum%planck%thermal_coeff%dim_2%LB .or. i > seat_spectrum%planck%thermal_coeff%dim_2%LB + seat_spectrum%planck%thermal_coeff%dim_2%EX + -1 ) then
13902.                             _substr(t$6727,1,13) = 'Rad_UKMO.f90'
13902.                             _substr(t$6728,1,14) = 'THERMAL_COEFF'
13902.                            t$6729 = seat_spectrum%planck%thermal_coeff%dim_2%LB
13902.                            t$6730 = seat_spectrum%planck%thermal_coeff%dim_2%LB + seat_spectrum%planck%thermal_coeff%dim_2%EX + -1
13902.                            t$6731 = i
13902.                            call _bounds_error(  _substr(t$6727,1,13), 13902,  _substr(t$6728,1,14), 2, t$6729, t$6730, t$6731, t$6726 )
13902.                         endif
13901.                         $Unit_temp_O4 = iu_spc
13901.                         t$6716 = _fread( _clist( 0, 1, 0, $Unit_temp_O4, ios, Null_Arg, t$571,  _substr(t$570,1,31), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%planck%thermal_coeff%base_addr)($I_L13901_8, i, 0), 0x804060300000000L ) ) )
13901.                         if ( t$6716 /= 0 ) goto 20
13901.                         $I_L13901_8 = 1 + $I_L13901_8
13901.                         if ( $I_L13901_8 >= 1 + max( 0, $t_S1 ) ) exit
13901.                      enddo
13901.                      goto 10
13901.                   else
13901.    10                continue
13901.                      $Unit_temp_O7 = iu_spc
13901.                      t$6716 = _fread( _clist( 0, 1, 1, $Unit_temp_O7, ios, Null_Arg, t$571,  _substr(t$570,1,31), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13901.                   endif
13901.                endif
13901.             endif
13901.    20       continue
13904.             if ( ios /= 0 ) then
13905.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$573,  _substr(t$572,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_6_0_0', 0x800600000000L ), _iotype( 'The data for the thermal source function could not be read.', 0x800600000000L ) ) )
13908.                seat_ierr = 1
13908.                goto 30
13908.             endif
13911.             $I_L13900_10 = 1 + $I_L13900_10
13911.             if ( $I_L13900_10 >= $t_S2 ) exit
13911.          enddo
13911.          i = ( 1 + $t_S2 )
13911.       endif
13911.    30 continue
13916.       return
13916.       end
13916.       
13921.       
13921.       subroutine read_block_8_0_0_int
13934.       seat_spectrum%cont%n_band_continuum%header%a_contig = 1
13934.       seat_spectrum%cont%n_band_continuum%dim_1%LB = 1
13934.       seat_spectrum%cont%n_band_continuum%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13934.       seat_spectrum%cont%n_band_continuum%dim_1%SM = 1
13934.       $_allo_P0(0) = 0x1000000000001L
13934.       $_allo_P0(1) = loc( seat_spectrum%cont%n_band_continuum )
13934.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
13935.       seat_spectrum%cont%index_continuum%header%a_contig = 1
13935.       seat_spectrum%cont%index_continuum%dim_1%LB = 1
13935.       seat_spectrum%cont%index_continuum%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
13935.       seat_spectrum%cont%index_continuum%dim_1%SM = 1
13935.       seat_spectrum%cont%index_continuum%dim_2%LB = 1
13935.       seat_spectrum%cont%index_continuum%dim_2%EX = _zla( 0, (nd_continuum%base_addr)(0) )
13935.       seat_spectrum%cont%index_continuum%dim_2%SM = _zla( 0, (nd_band%base_addr)(0) )
13935.       $_allo_P1(0) = 0x1000000000001L
13935.       $_allo_P1(1) = loc( seat_spectrum%cont%index_continuum )
13935.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
13937.       $F_A33 = seat_spectrum%cont%n_band_continuum%dim_1%EX
13937.       if ( seat_spectrum%cont%n_band_continuum%dim_1%EX > 0 ) then
13937.          $I_L13937_16 = 0
13937. !dir$ ivdep
13937.          do
13937.             (seat_spectrum%cont%n_band_continuum%base_addr)(1 + $I_L13937_16, 0) = 0
13937.             $I_L13937_16 = 1 + $I_L13937_16
13937.             if ( $I_L13937_16 >= $F_A33 ) exit
13937.          enddo
13937.       endif
13938.       $F_A34 = seat_spectrum%cont%index_continuum%dim_2%EX
13938.       $F_A35 = seat_spectrum%cont%index_continuum%dim_1%EX
13938.       if ( and( -$F_A35, -$F_A34 ) < 0 ) then
13938.          $SC_spectrum_I1 = seat_spectrum%cont%index_continuum%dim_2%SM
13938.          $I_L13938_22 = 0
13938.          do
13938.             $I_L13938_18 = 0
13938. !dir$ ivdep
13938.             do
13938.                (seat_spectrum%cont%index_continuum%base_addr)(1 + $I_L13938_18, 1 + $I_L13938_22, 0) = 0
13938.                $I_L13938_18 = 1 + $I_L13938_18
13938.                if ( $I_L13938_18 >= $F_A35 ) exit
13938.             enddo
13938.             $I_L13938_22 = 1 + $I_L13938_22
13938.             if ( $I_L13938_22 >= $F_A34 ) exit
13938.          enddo
13938.       endif
13940.       $Unit_temp_O0 = iu_spc
13940.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$575,  _substr(t$574,1,6), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13943.       $t_S2 = seat_spectrum%basic%n_band
13943.       i = 1
13943.       if ( seat_spectrum%basic%n_band > 0 ) then
13943.          $I_L13943_20 = 0
13943.          do
13943.             i = ( 1 + $I_L13943_20 )
13944.             $Unit_temp_O1 = iu_spc
13944.             t$6735 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$577,  _substr(t$576,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13944.             if ( t$6735 == 0 ) then
13944.                $Unit_temp_O2 = iu_spc
13944.                t$6735 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$577,  _substr(t$576,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
13944.                if ( t$6735 == 0 ) then
13945.                   if ( ( 1 + $I_L13943_20 ) < seat_spectrum%cont%n_band_continuum%dim_1%LB .or. ( 1 + $I_L13943_20 ) > seat_spectrum%cont%n_band_continuum%dim_1%LB + seat_spectrum%cont%n_band_continuum%dim_1%EX + -1 ) then
13945.                       _substr(t$6737,1,13) = 'Rad_UKMO.f90'
13945.                       _substr(t$6738,1,17) = 'N_BAND_CONTINUUM'
13945.                      t$6739 = seat_spectrum%cont%n_band_continuum%dim_1%LB
13945.                      t$6740 = seat_spectrum%cont%n_band_continuum%dim_1%LB + seat_spectrum%cont%n_band_continuum%dim_1%EX + -1
13945.                      t$6741 = 1 + $I_L13943_20
13945.                      call _bounds_error(  _substr(t$6737,1,13), 13945,  _substr(t$6738,1,17), 1, t$6739, t$6740, t$6741, t$6736 )
13945.                   endif
13944.                   $Unit_temp_O3 = iu_spc
13944.                   t$6735 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$577,  _substr(t$576,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%cont%n_band_continuum%base_addr)(i, 0), 0x2000200000000L ) ) )
13944.                   if ( t$6735 == 0 ) then
13944.                      $Unit_temp_O5 = iu_spc
13944.                      t$6735 = _fread( _clist( 0, 1, 1, $Unit_temp_O5, ios, Null_Arg, t$577,  _substr(t$576,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13944.                   endif
13944.                endif
13944.             endif
13946.             if ( ios /= 0 ) then
13947.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$579,  _substr(t$578,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_8_0_0', 0x800600000000L ), _iotype( 'the list of continua is not correct.', 0x800600000000L ) ) )
13950.                seat_ierr = 1
13950.                goto 20
13950.             endif
13953.             if ( (seat_spectrum%cont%n_band_continuum%base_addr)(i, 0) > (nd_continuum%base_addr)(0) ) then
13954.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$581,  _substr(t$580,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_8_0_0', 0x800600000000L ), _iotype( 'There are too many continua:', 0x800600000000L ), _iotype( 'increase npd_continuum and recompile.', 0x800600000000L ) ) )
13958.                seat_ierr = 1
13958.                goto 20
13958.             endif
13961.             if ( (seat_spectrum%cont%n_band_continuum%base_addr)(i, 0) > 0 ) then
13962.                $Unit_temp_O6 = iu_spc
13962.                _fread( _clist( 0, 0, 2, $Unit_temp_O6, Null_Arg, Null_Arg, t$583,  _substr(t$582,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13964.                if ( i < seat_spectrum%cont%n_band_continuum%dim_1%LB .or. i > seat_spectrum%cont%n_band_continuum%dim_1%LB + seat_spectrum%cont%n_band_continuum%dim_1%EX + -1 ) then
13964.                    _substr(t$6743,1,13) = 'Rad_UKMO.f90'
13964.                    _substr(t$6744,1,17) = 'N_BAND_CONTINUUM'
13964.                   t$6739 = seat_spectrum%cont%n_band_continuum%dim_1%LB
13964.                   t$6740 = seat_spectrum%cont%n_band_continuum%dim_1%LB + seat_spectrum%cont%n_band_continuum%dim_1%EX + -1
13964.                   t$6741 = i
13964.                   call _bounds_error(  _substr(t$6743,1,13), 13964,  _substr(t$6744,1,17), 1, t$6739, t$6740, t$6741, t$6742 )
13964.                endif
13962.                $t_S1 = (seat_spectrum%cont%n_band_continuum%base_addr)(i, 0)
13962.                if ( $t_S1 > 0 ) then
13962.                   $I_L13962_14 = 0
13962.                   do
13963.                      if ( i < seat_spectrum%cont%index_continuum%dim_1%LB .or. i > seat_spectrum%cont%index_continuum%dim_1%LB + seat_spectrum%cont%index_continuum%dim_1%EX + -1 ) then
13963.                          _substr(t$6749,1,13) = 'Rad_UKMO.f90'
13963.                          _substr(t$6750,1,16) = 'INDEX_CONTINUUM'
13963.                         t$6751 = seat_spectrum%cont%index_continuum%dim_1%LB
13963.                         t$6752 = seat_spectrum%cont%index_continuum%dim_1%LB + seat_spectrum%cont%index_continuum%dim_1%EX + -1
13963.                         t$6753 = i
13963.                         call _bounds_error(  _substr(t$6749,1,13), 13963,  _substr(t$6750,1,16), 1, t$6751, t$6752, t$6753, t$6748 )
13963.                      endif
13963.                      if ( ( 1 + $I_L13962_14 ) < seat_spectrum%cont%index_continuum%dim_2%LB .or. ( 1 + $I_L13962_14 ) > seat_spectrum%cont%index_continuum%dim_2%LB + seat_spectrum%cont%index_continuum%dim_2%EX + -1 ) then
13963.                          _substr(t$6755,1,13) = 'Rad_UKMO.f90'
13963.                          _substr(t$6756,1,16) = 'INDEX_CONTINUUM'
13963.                         t$6757 = seat_spectrum%cont%index_continuum%dim_2%LB
13963.                         t$6758 = seat_spectrum%cont%index_continuum%dim_2%LB + seat_spectrum%cont%index_continuum%dim_2%EX + -1
13963.                         t$6759 = 1 + $I_L13962_14
13963.                         call _bounds_error(  _substr(t$6755,1,13), 13963,  _substr(t$6756,1,16), 2, t$6757, t$6758, t$6759, t$6754 )
13963.                      endif
13962.                      $Unit_temp_O7 = iu_spc
13962.                      _fread( _clist( 0, 0, 0, $Unit_temp_O7, Null_Arg, Null_Arg, t$583,  _substr(t$582,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%cont%index_continuum%base_addr)(i, 1 + $I_L13962_14, 0), 0x2000200000000L ) ) )
13962.                      $I_L13962_14 = 1 + $I_L13962_14
13962.                      if ( $I_L13962_14 >= $t_S1 ) exit
13962.                   enddo
13962.                endif
13962.                $Unit_temp_O10 = iu_spc
13962.                _fread( _clist( 0, 0, 1, $Unit_temp_O10, Null_Arg, Null_Arg, t$583,  _substr(t$582,1,15), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
13962.             endif
13966.             if ( ios /= 0 ) then
13967.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$585,  _substr(t$584,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_8_0_0', 0x800600000000L ), _iotype( 'the list of continua is not correct.', 0x800600000000L ) ) )
13970.                seat_ierr = 1
13970.                goto 20
13970.             endif
13973.             $I_L13943_20 = 1 + $I_L13943_20
13973.             if ( $I_L13943_20 >= $t_S2 ) exit
13973.          enddo
13973.          i = ( 1 + $t_S2 )
13973.          goto 10
13973.       else
13973.    10    continue
13976.          $Unit_temp_O11 = iu_spc
13976.          _fread( _clist( 0, 0, 3, $Unit_temp_O11, Null_Arg, Null_Arg, t$587,  _substr(t$586,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O12, 0x2000200000000L ) ) )
13976.          seat_spectrum%cont%index_water = $IOitem_O12
13976.       endif
13976.    20 continue
13981.       return
13981.       end
13981.       
13986.       
13986.       subroutine read_block_9_0_0_int
14005.       seat_spectrum%cont%k_cont%header%a_contig = 1
14005.       seat_spectrum%cont%k_cont%dim_1%LB = 1
14005.       seat_spectrum%cont%k_cont%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
14005.       seat_spectrum%cont%k_cont%dim_1%SM = 1
14005.       seat_spectrum%cont%k_cont%dim_2%LB = 1
14005.       seat_spectrum%cont%k_cont%dim_2%EX = _zla( 0, (nd_continuum%base_addr)(0) )
14005.       seat_spectrum%cont%k_cont%dim_2%SM = _zla( 0, (nd_band%base_addr)(0) )
14005.       $_allo_P1(0) = 0x1000000000001L
14005.       $_allo_P1(1) = loc( seat_spectrum%cont%k_cont )
14005.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14006.       seat_spectrum%cont%i_scale_fnc_cont%header%a_contig = 1
14006.       seat_spectrum%cont%i_scale_fnc_cont%dim_1%LB = 1
14006.       seat_spectrum%cont%i_scale_fnc_cont%dim_1%EX = _zla( 0, (nd_band%base_addr)(0) )
14006.       seat_spectrum%cont%i_scale_fnc_cont%dim_1%SM = 1
14006.       seat_spectrum%cont%i_scale_fnc_cont%dim_2%LB = 1
14006.       seat_spectrum%cont%i_scale_fnc_cont%dim_2%EX = _zla( 0, (nd_continuum%base_addr)(0) )
14006.       seat_spectrum%cont%i_scale_fnc_cont%dim_2%SM = _zla( 0, (nd_band%base_addr)(0) )
14006.       $_allo_P2(0) = 0x1000000000001L
14006.       $_allo_P2(1) = loc( seat_spectrum%cont%i_scale_fnc_cont )
14006.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14007.       seat_spectrum%cont%scale_cont%header%a_contig = 1
14007.       seat_spectrum%cont%scale_cont%dim_1%LB = 1
14007.       seat_spectrum%cont%scale_cont%dim_1%EX = _zla( 0, (nd_scale_variable%base_addr)(0) )
14007.       seat_spectrum%cont%scale_cont%dim_1%SM = 1
14007.       seat_spectrum%cont%scale_cont%dim_2%LB = 1
14007.       seat_spectrum%cont%scale_cont%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
14007.       seat_spectrum%cont%scale_cont%dim_2%SM = _zla( 0, (nd_scale_variable%base_addr)(0) )
14007.       seat_spectrum%cont%scale_cont%dim_3%LB = 1
14007.       seat_spectrum%cont%scale_cont%dim_3%EX = _zla( 0, (nd_continuum%base_addr)(0) )
14007.       seat_spectrum%cont%scale_cont%dim_3%SM = ( _zla( 0, (nd_scale_variable%base_addr)(0) ) * _zla( 0, (nd_band%base_addr)(0) ) )
14007.       $_allo_P3(0) = 0x1000000000001L
14007.       $_allo_P3(1) = loc( seat_spectrum%cont%scale_cont )
14007.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14009.       seat_spectrum%cont%t_ref_cont%header%a_contig = 1
14009.       seat_spectrum%cont%t_ref_cont%dim_1%LB = 1
14009.       seat_spectrum%cont%t_ref_cont%dim_1%EX = _zla( 0, (nd_continuum%base_addr)(0) )
14009.       seat_spectrum%cont%t_ref_cont%dim_1%SM = 1
14009.       seat_spectrum%cont%t_ref_cont%dim_2%LB = 1
14009.       seat_spectrum%cont%t_ref_cont%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
14009.       seat_spectrum%cont%t_ref_cont%dim_2%SM = _zla( 0, (nd_continuum%base_addr)(0) )
14009.       $_allo_P4(0) = 0x1000000000001L
14009.       $_allo_P4(1) = loc( seat_spectrum%cont%t_ref_cont )
14009.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14010.       seat_spectrum%cont%p_ref_cont%header%a_contig = 1
14010.       seat_spectrum%cont%p_ref_cont%dim_1%LB = 1
14010.       seat_spectrum%cont%p_ref_cont%dim_1%EX = _zla( 0, (nd_continuum%base_addr)(0) )
14010.       seat_spectrum%cont%p_ref_cont%dim_1%SM = 1
14010.       seat_spectrum%cont%p_ref_cont%dim_2%LB = 1
14010.       seat_spectrum%cont%p_ref_cont%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
14010.       seat_spectrum%cont%p_ref_cont%dim_2%SM = _zla( 0, (nd_continuum%base_addr)(0) )
14010.       $_allo_P5(0) = 0x1000000000001L
14010.       $_allo_P5(1) = loc( seat_spectrum%cont%p_ref_cont )
14010.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14012.       $F_A33 = seat_spectrum%cont%k_cont%dim_2%EX
14012.       $F_A34 = seat_spectrum%cont%k_cont%dim_1%EX
14012.       if ( and( -$F_A34, -$F_A33 ) < 0 ) then
14012.          $SC_spectrum_I5 = seat_spectrum%cont%k_cont%dim_2%SM
14012.          $I_L14012_38 = 0
14012.          do
14012.             $I_L14012_28 = 0
14012. !dir$ ivdep
14012.             do
14012.                (seat_spectrum%cont%k_cont%base_addr)(1 + $I_L14012_28, 1 + $I_L14012_38, 0) = 0.0
14012.                $I_L14012_28 = 1 + $I_L14012_28
14012.                if ( $I_L14012_28 >= $F_A34 ) exit
14012.             enddo
14012.             $I_L14012_38 = 1 + $I_L14012_38
14012.             if ( $I_L14012_38 >= $F_A33 ) exit
14012.          enddo
14012.       endif
14013.       $F_A35 = seat_spectrum%cont%i_scale_fnc_cont%dim_2%EX
14013.       $F_A36 = seat_spectrum%cont%i_scale_fnc_cont%dim_1%EX
14013.       if ( and( -$F_A36, -$F_A35 ) < 0 ) then
14013.          $SC_spectrum_I6 = seat_spectrum%cont%i_scale_fnc_cont%dim_2%SM
14013.          $I_L14013_40 = 0
14013.          do
14013.             $I_L14013_30 = 0
14013. !dir$ ivdep
14013.             do
14013.                (seat_spectrum%cont%i_scale_fnc_cont%base_addr)(1 + $I_L14013_30, 1 + $I_L14013_40, 0) = 0
14013.                $I_L14013_30 = 1 + $I_L14013_30
14013.                if ( $I_L14013_30 >= $F_A36 ) exit
14013.             enddo
14013.             $I_L14013_40 = 1 + $I_L14013_40
14013.             if ( $I_L14013_40 >= $F_A35 ) exit
14013.          enddo
14013.       endif
14014.       $F_A37 = seat_spectrum%cont%scale_cont%dim_3%EX
14014.       $F_A38 = seat_spectrum%cont%scale_cont%dim_2%EX
14014.       $F_A39 = seat_spectrum%cont%scale_cont%dim_1%EX
14014.       if ( and( and( -$F_A38, -$F_A37 ), -$F_A39 ) < 0 ) then
14014.          $SC_spectrum_I8 = seat_spectrum%cont%scale_cont%dim_3%SM
14014.          $SC_spectrum_I7 = seat_spectrum%cont%scale_cont%dim_2%SM
14014.          $I_L14014_48 = 0
14014.          do
14014.             $I_L14014_42 = 0
14014.             do
14014.                $I_L14014_32 = 0
14014. !dir$ ivdep
14014.                do
14014.                   (seat_spectrum%cont%scale_cont%base_addr)(1 + $I_L14014_32, 1 + $I_L14014_42, 1 + $I_L14014_48, 0) = 0.0
14014.                   $I_L14014_32 = 1 + $I_L14014_32
14014.                   if ( $I_L14014_32 >= $F_A39 ) exit
14014.                enddo
14014.                $I_L14014_42 = 1 + $I_L14014_42
14014.                if ( $I_L14014_42 >= $F_A38 ) exit
14014.             enddo
14014.             $I_L14014_48 = 1 + $I_L14014_48
14014.             if ( $I_L14014_48 >= $F_A37 ) exit
14014.          enddo
14014.       endif
14015.       $F_A40 = seat_spectrum%cont%p_ref_cont%dim_2%EX
14015.       $F_A41 = seat_spectrum%cont%p_ref_cont%dim_1%EX
14015.       if ( and( -$F_A41, -$F_A40 ) < 0 ) then
14015.          $SC_spectrum_I9 = seat_spectrum%cont%p_ref_cont%dim_2%SM
14015.          $I_L14015_44 = 0
14015.          do
14015.             $I_L14015_34 = 0
14015. !dir$ ivdep
14015.             do
14015.                (seat_spectrum%cont%p_ref_cont%base_addr)(1 + $I_L14015_34, 1 + $I_L14015_44, 0) = 0.0
14015.                $I_L14015_34 = 1 + $I_L14015_34
14015.                if ( $I_L14015_34 >= $F_A41 ) exit
14015.             enddo
14015.             $I_L14015_44 = 1 + $I_L14015_44
14015.             if ( $I_L14015_44 >= $F_A40 ) exit
14015.          enddo
14015.       endif
14018.       $Unit_temp_O0 = iu_spc
14018.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$589,  _substr(t$588,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14020.       $t_S4 = seat_spectrum%basic%n_band
14020.       i = 1
14020.       if ( seat_spectrum%basic%n_band > 0 ) then
14020.          $I_L14020_46 = 0
14020.          do
14020.             i = ( 1 + $I_L14020_46 )
14021.             $t_S1 = (seat_spectrum%cont%n_band_continuum%base_addr)(1 + $I_L14020_46, 0)
14021.             if ( $t_S1 > 0 ) then
14021.                $I_L14021_36 = 0
14021.                do
14022.                   $Unit_temp_O1 = iu_spc
14022.                   t$6766 = _fread( _clist( 0, 1, 3, $Unit_temp_O1, ios, Null_Arg, t$591,  _substr(t$590,1,15), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14022.                   idum_band = $_IOitem_P0(0)
14022.                   idum_continuum = $_IOitem_P0(1)
14022.                   idum_fnc = $_IOitem_P0(2)
14024.                   if ( ios /= 0 ) then
14025.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$593,  _substr(t$592,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_9_0_0', 0x800600000000L ), _iotype( 'continua in band could not be read.', 0x800600000000L ) ) )
14028.                      seat_ierr = 1
14028.                      goto 30
14028.                   endif
14031.                   (seat_spectrum%cont%i_scale_fnc_cont%base_addr)(idum_band, idum_continuum, 0) = idum_fnc
14033.                   $Unit_temp_O2 = iu_spc
14033.                   _fread( _clist( 0, 0, 2, $Unit_temp_O2, Null_Arg, Null_Arg, t$595,  _substr(t$594,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14034.                   if ( idum_continuum < seat_spectrum%cont%p_ref_cont%dim_1%LB .or. idum_continuum > seat_spectrum%cont%p_ref_cont%dim_1%LB + seat_spectrum%cont%p_ref_cont%dim_1%EX + -1 ) then
14034.                       _substr(t$6768,1,13) = 'Rad_UKMO.f90'
14034.                       _substr(t$6769,1,11) = 'P_REF_CONT'
14034.                      t$6770 = seat_spectrum%cont%p_ref_cont%dim_1%LB
14034.                      t$6771 = seat_spectrum%cont%p_ref_cont%dim_1%LB + seat_spectrum%cont%p_ref_cont%dim_1%EX + -1
14034.                      t$6772 = idum_continuum
14034.                      call _bounds_error(  _substr(t$6768,1,13), 14034,  _substr(t$6769,1,11), 1, t$6770, t$6771, t$6772, t$6767 )
14034.                   endif
14034.                   if ( idum_band < seat_spectrum%cont%p_ref_cont%dim_2%LB .or. idum_band > seat_spectrum%cont%p_ref_cont%dim_2%LB + seat_spectrum%cont%p_ref_cont%dim_2%EX + -1 ) then
14034.                       _substr(t$6774,1,13) = 'Rad_UKMO.f90'
14034.                       _substr(t$6775,1,11) = 'P_REF_CONT'
14034.                      t$6776 = seat_spectrum%cont%p_ref_cont%dim_2%LB
14034.                      t$6777 = seat_spectrum%cont%p_ref_cont%dim_2%LB + seat_spectrum%cont%p_ref_cont%dim_2%EX + -1
14034.                      t$6778 = idum_band
14034.                      call _bounds_error(  _substr(t$6774,1,13), 14034,  _substr(t$6775,1,11), 2, t$6776, t$6777, t$6778, t$6773 )
14034.                   endif
14033.                   $Unit_temp_O3 = iu_spc
14033.                   _fread( _clist( 0, 0, 0, $Unit_temp_O3, Null_Arg, Null_Arg, t$595,  _substr(t$594,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%cont%p_ref_cont%base_addr)(idum_continuum, idum_band, 0), 0x804060300000000L ) ) )
14035.                   if ( idum_continuum < seat_spectrum%cont%t_ref_cont%dim_1%LB .or. idum_continuum > seat_spectrum%cont%t_ref_cont%dim_1%LB + seat_spectrum%cont%t_ref_cont%dim_1%EX + -1 ) then
14035.                       _substr(t$6780,1,13) = 'Rad_UKMO.f90'
14035.                       _substr(t$6781,1,11) = 'T_REF_CONT'
14035.                      t$6782 = seat_spectrum%cont%t_ref_cont%dim_1%LB
14035.                      t$6783 = seat_spectrum%cont%t_ref_cont%dim_1%LB + seat_spectrum%cont%t_ref_cont%dim_1%EX + -1
14035.                      t$6784 = idum_continuum
14035.                      call _bounds_error(  _substr(t$6780,1,13), 14035,  _substr(t$6781,1,11), 1, t$6782, t$6783, t$6784, t$6779 )
14035.                   endif
14035.                   if ( idum_band < seat_spectrum%cont%t_ref_cont%dim_2%LB .or. idum_band > seat_spectrum%cont%t_ref_cont%dim_2%LB + seat_spectrum%cont%t_ref_cont%dim_2%EX + -1 ) then
14035.                       _substr(t$6786,1,13) = 'Rad_UKMO.f90'
14035.                       _substr(t$6787,1,11) = 'T_REF_CONT'
14035.                      t$6788 = seat_spectrum%cont%t_ref_cont%dim_2%LB
14035.                      t$6789 = seat_spectrum%cont%t_ref_cont%dim_2%LB + seat_spectrum%cont%t_ref_cont%dim_2%EX + -1
14035.                      t$6790 = idum_band
14035.                      call _bounds_error(  _substr(t$6786,1,13), 14035,  _substr(t$6787,1,11), 2, t$6788, t$6789, t$6790, t$6785 )
14035.                   endif
14033.                   $Unit_temp_O6 = iu_spc
14033.                   _fread( _clist( 0, 0, 0, $Unit_temp_O6, Null_Arg, Null_Arg, t$595,  _substr(t$594,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%cont%t_ref_cont%base_addr)(idum_continuum, idum_band, 0), 0x804060300000000L ) ) )
14033.                   $Unit_temp_O9 = iu_spc
14033.                   _fread( _clist( 0, 0, 1, $Unit_temp_O9, Null_Arg, Null_Arg, t$595,  _substr(t$594,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14037.                   $Unit_temp_O10 = iu_spc
14037.                   t$6791 = _fread( _clist( 0, 1, 2, $Unit_temp_O10, ios, Null_Arg, t$597,  _substr(t$596,1,36), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14037.                   if ( t$6791 == 0 ) then
14039.                      if ( idum_band < seat_spectrum%cont%k_cont%dim_1%LB .or. idum_band > seat_spectrum%cont%k_cont%dim_1%LB + seat_spectrum%cont%k_cont%dim_1%EX + -1 ) then
14039.                          _substr(t$6793,1,13) = 'Rad_UKMO.f90'
14039.                          _substr(t$6794,1,7) = 'K_CONT'
14039.                         t$6770 = seat_spectrum%cont%k_cont%dim_1%LB
14039.                         t$6771 = seat_spectrum%cont%k_cont%dim_1%LB + seat_spectrum%cont%k_cont%dim_1%EX + -1
14039.                         t$6772 = idum_band
14039.                         call _bounds_error(  _substr(t$6793,1,13), 14039,  _substr(t$6794,1,7), 1, t$6770, t$6771, t$6772, t$6792 )
14039.                      endif
14039.                      if ( idum_continuum < seat_spectrum%cont%k_cont%dim_2%LB .or. idum_continuum > seat_spectrum%cont%k_cont%dim_2%LB + seat_spectrum%cont%k_cont%dim_2%EX + -1 ) then
14039.                          _substr(t$6796,1,13) = 'Rad_UKMO.f90'
14039.                          _substr(t$6797,1,7) = 'K_CONT'
14039.                         t$6776 = seat_spectrum%cont%k_cont%dim_2%LB
14039.                         t$6777 = seat_spectrum%cont%k_cont%dim_2%LB + seat_spectrum%cont%k_cont%dim_2%EX + -1
14039.                         t$6778 = idum_continuum
14039.                         call _bounds_error(  _substr(t$6796,1,13), 14039,  _substr(t$6797,1,7), 2, t$6776, t$6777, t$6778, t$6795 )
14039.                      endif
14037.                      $Unit_temp_O11 = iu_spc
14037.                      t$6791 = _fread( _clist( 0, 1, 0, $Unit_temp_O11, ios, Null_Arg, t$597,  _substr(t$596,1,36), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%cont%k_cont%base_addr)(idum_band, idum_continuum, 0), 0x804060300000000L ) ) )
14037.                      if ( t$6791 == 0 ) then
14037.                         $t_S2 = n_scale_variable(idum_fnc)
14037.                         if ( $t_S2 > 0 ) then
14037.                            $I_L14037_26 = 0
14037.                            do
14040.                               if ( ( 1 + $I_L14037_26 ) < seat_spectrum%cont%scale_cont%dim_1%LB .or. ( 1 + $I_L14037_26 ) > seat_spectrum%cont%scale_cont%dim_1%LB + seat_spectrum%cont%scale_cont%dim_1%EX + -1 ) then
14040.                                   _substr(t$6802,1,13) = 'Rad_UKMO.f90'
14040.                                   _substr(t$6803,1,11) = 'SCALE_CONT'
14040.                                  t$6782 = seat_spectrum%cont%scale_cont%dim_1%LB
14040.                                  t$6783 = seat_spectrum%cont%scale_cont%dim_1%LB + seat_spectrum%cont%scale_cont%dim_1%EX + -1
14040.                                  t$6784 = 1 + $I_L14037_26
14040.                                  call _bounds_error(  _substr(t$6802,1,13), 14040,  _substr(t$6803,1,11), 1, t$6782, t$6783, t$6784, t$6801 )
14040.                               endif
14040.                               if ( idum_band < seat_spectrum%cont%scale_cont%dim_2%LB .or. idum_band > seat_spectrum%cont%scale_cont%dim_2%LB + seat_spectrum%cont%scale_cont%dim_2%EX + -1 ) then
14040.                                   _substr(t$6805,1,13) = 'Rad_UKMO.f90'
14040.                                   _substr(t$6806,1,11) = 'SCALE_CONT'
14040.                                  t$6788 = seat_spectrum%cont%scale_cont%dim_2%LB
14040.                                  t$6789 = seat_spectrum%cont%scale_cont%dim_2%LB + seat_spectrum%cont%scale_cont%dim_2%EX + -1
14040.                                  t$6790 = idum_band
14040.                                  call _bounds_error(  _substr(t$6805,1,13), 14040,  _substr(t$6806,1,11), 2, t$6788, t$6789, t$6790, t$6804 )
14040.                               endif
14040.                               if ( idum_continuum < seat_spectrum%cont%scale_cont%dim_3%LB .or. idum_continuum > seat_spectrum%cont%scale_cont%dim_3%LB + seat_spectrum%cont%scale_cont%dim_3%EX + -1 ) then
14040.                                   _substr(t$6808,1,13) = 'Rad_UKMO.f90'
14040.                                   _substr(t$6809,1,11) = 'SCALE_CONT'
14040.                                  t$6810 = seat_spectrum%cont%scale_cont%dim_3%LB
14040.                                  t$6811 = seat_spectrum%cont%scale_cont%dim_3%LB + seat_spectrum%cont%scale_cont%dim_3%EX + -1
14040.                                  t$6812 = idum_continuum
14040.                                  call _bounds_error(  _substr(t$6808,1,13), 14040,  _substr(t$6809,1,11), 3, t$6810, t$6811, t$6812, t$6807 )
14040.                               endif
14037.                               $Unit_temp_O14 = iu_spc
14037.                               t$6791 = _fread( _clist( 0, 1, 0, $Unit_temp_O14, ios, Null_Arg, t$597,  _substr(t$596,1,36), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%cont%scale_cont%base_addr)(1 + $I_L14037_26, idum_band, idum_continuum, 0), 0x804060300000000L ) ) )
14037.                               if ( t$6791 /= 0 ) goto 20
14037.                               $I_L14037_26 = 1 + $I_L14037_26
14037.                               if ( $I_L14037_26 >= $t_S2 ) exit
14037.                            enddo
14037.                            goto 10
14037.                         else
14037.    10                      continue
14037.                            $Unit_temp_O18 = iu_spc
14037.                            t$6791 = _fread( _clist( 0, 1, 1, $Unit_temp_O18, ios, Null_Arg, t$597,  _substr(t$596,1,36), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14037.                         endif
14037.                      endif
14037.                   endif
14037.    20             continue
14042.                   if ( ios /= 0 ) then
14043.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$599,  _substr(t$598,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_9_0_0', 0x800600000000L ), _iotype( 'continuum data could not be read.', 0x800600000000L ) ) )
14046.                      seat_ierr = 1
14046.                      goto 30
14046.                   endif
14049.                   $I_L14021_36 = 1 + $I_L14021_36
14049.                   if ( $I_L14021_36 >= $t_S1 ) exit
14049.                enddo
14050.                $I_L14020_46 = 1 + $I_L14020_46
14049.             else
14049.             endif
14049.             if ( $I_L14020_46 >= $t_S4 ) exit
14049.          enddo
14050.          i = ( 1 + $t_S4 )
14050.       endif
14050.    30 continue
14055.       return
14055.       end
14055.       
14060.       
14060.       subroutine read_block_10_0_0_int
14080.       if ( seat_spectrum%drop%l_drop_type%header%assoc /= 1 ) then
14081.          seat_spectrum%drop%l_drop_type%header%a_contig = 1
14081.          seat_spectrum%drop%l_drop_type%dim_1%LB = 1
14081.          seat_spectrum%drop%l_drop_type%dim_1%EX = _zla( 0, (nd_drop_type%base_addr)(0) )
14081.          seat_spectrum%drop%l_drop_type%dim_1%SM = 1
14081.          $_allo_P1(0) = 0x1000000000001L
14081.          $_allo_P1(1) = loc( seat_spectrum%drop%l_drop_type )
14081.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14082.          $F_A34 = (nd_drop_type%base_addr)(0)
14082.          if ( (nd_drop_type%base_addr)(0) > 0 ) then
14082.             $SC_spectrum_I2 = seat_spectrum%drop%l_drop_type%dim_1%EX
14082.             $I_L14082_22 = 0
14082. !dir$ ivdep
14082.             do
14082.                (seat_spectrum%drop%l_drop_type%base_addr)(1 + $I_L14082_22, 0) = .false.
14082.                $I_L14082_22 = 1 + $I_L14082_22
14082.                if ( $I_L14082_22 >= $F_A34 ) exit
14082.             enddo
14082.          endif
14083.          seat_spectrum%drop%i_drop_parm%header%a_contig = 1
14083.          seat_spectrum%drop%i_drop_parm%dim_1%LB = 1
14083.          seat_spectrum%drop%i_drop_parm%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14083.          seat_spectrum%drop%i_drop_parm%dim_1%SM = 1
14083.          $_allo_P2(0) = 0x1000000000001L
14083.          $_allo_P2(1) = loc( seat_spectrum%drop%i_drop_parm )
14083.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14084.          seat_spectrum%drop%parm_min_dim%header%a_contig = 1
14084.          seat_spectrum%drop%parm_min_dim%dim_1%LB = 1
14084.          seat_spectrum%drop%parm_min_dim%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14084.          seat_spectrum%drop%parm_min_dim%dim_1%SM = 1
14084.          $_allo_P3(0) = 0x1000000000001L
14084.          $_allo_P3(1) = loc( seat_spectrum%drop%parm_min_dim )
14084.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14085.          seat_spectrum%drop%parm_max_dim%header%a_contig = 1
14085.          seat_spectrum%drop%parm_max_dim%dim_1%LB = 1
14085.          seat_spectrum%drop%parm_max_dim%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14085.          seat_spectrum%drop%parm_max_dim%dim_1%SM = 1
14085.          $_allo_P4(0) = 0x1000000000001L
14085.          $_allo_P4(1) = loc( seat_spectrum%drop%parm_max_dim )
14085.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14086.          seat_spectrum%drop%n_phf%header%a_contig = 1
14086.          seat_spectrum%drop%n_phf%dim_1%LB = 1
14086.          seat_spectrum%drop%n_phf%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14086.          seat_spectrum%drop%n_phf%dim_1%SM = 1
14086.          $_allo_P5(0) = 0x1000000000001L
14086.          $_allo_P5(1) = loc( seat_spectrum%drop%n_phf )
14086.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14087.          seat_spectrum%drop%parm_list%header%a_contig = 1
14087.          seat_spectrum%drop%parm_list%dim_1%LB = 1
14087.          seat_spectrum%drop%parm_list%dim_1%EX = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14087.          seat_spectrum%drop%parm_list%dim_1%SM = 1
14087.          seat_spectrum%drop%parm_list%dim_2%LB = 1
14087.          seat_spectrum%drop%parm_list%dim_2%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14087.          seat_spectrum%drop%parm_list%dim_2%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14087.          seat_spectrum%drop%parm_list%dim_3%LB = 1
14087.          seat_spectrum%drop%parm_list%dim_3%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14087.          seat_spectrum%drop%parm_list%dim_3%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) * max( 0, (nd_band%base_addr)(0) ) )
14087.          $_allo_P6(0) = 0x1000000000001L
14087.          $_allo_P6(1) = loc( seat_spectrum%drop%parm_list )
14087.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14087.       endif
14092.       $Unit_temp_O0 = iu_spc
14092.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$601,  _substr(t$600,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14092.       i_drop = $_IOitem_P0(0)
14092.       i_parametrization_drop = $_IOitem_P0(1)
14092.       i_dummy = $_IOitem_P0(2)
14094.       if ( i_drop > (nd_drop_type%base_addr)(0) ) then
14095.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$603,  _substr(t$602,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_0', 0x800600000000L ), _iotype( 'Indexing number of droplet exceeds maximum permitted value:', 0x800600000000L ), _iotype( 'Increase npd_drop_type and recompile.', 0x800600000000L ) ) )
14099.          seat_ierr = 1
14101.       else if ( i_parametrization_drop == 1 ) then
14101.          goto 10
14101.       else if ( i_parametrization_drop == 2 ) then
14101.          goto 10
14101.       else if ( i_parametrization_drop == 5 ) then
14101.    10    continue
14111.          (seat_spectrum%drop%parm_min_dim%base_addr)(i_drop, 0) = 0.0
14112.          (seat_spectrum%drop%parm_max_dim%base_addr)(i_drop, 0) = 0.0
14114.          (seat_spectrum%drop%n_phf%base_addr)(i_drop, 0) = 1
14119.          $t_S1 = seat_spectrum%basic%n_band
14119.          i = 1
14119.          if ( seat_spectrum%basic%n_band <= 0 ) then
14103.             goto 20
14103.          else if ( i_dummy > 0 ) then
14119.             $I_L14119_24 = 0
14119.             do
14119.                i = ( 1 + $I_L14119_24 )
14120.                $Unit_temp_O1 = iu_spc
14120.                t$6816 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$605,  _substr(t$604,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14120.                if ( t$6816 == 0 ) then
14120.                   $I_L14120_18 = 0
14120.                   do
14121.                      if ( ( 1 + $I_L14120_18 ) < seat_spectrum%drop%parm_list%dim_1%LB .or. ( 1 + $I_L14120_18 ) > seat_spectrum%drop%parm_list%dim_1%LB + seat_spectrum%drop%parm_list%dim_1%EX + -1 ) then
14121.                          _substr(t$6821,1,13) = 'Rad_UKMO.f90'
14121.                          _substr(t$6822,1,10) = 'PARM_LIST'
14121.                         t$6823 = seat_spectrum%drop%parm_list%dim_1%LB
14121.                         t$6824 = seat_spectrum%drop%parm_list%dim_1%LB + seat_spectrum%drop%parm_list%dim_1%EX + -1
14121.                         t$6825 = 1 + $I_L14120_18
14121.                         call _bounds_error(  _substr(t$6821,1,13), 14121,  _substr(t$6822,1,10), 1, t$6823, t$6824, t$6825, t$6820 )
14121.                      endif
14121.                      if ( i < seat_spectrum%drop%parm_list%dim_2%LB .or. i > seat_spectrum%drop%parm_list%dim_2%LB + seat_spectrum%drop%parm_list%dim_2%EX + -1 ) then
14121.                          _substr(t$6827,1,13) = 'Rad_UKMO.f90'
14121.                          _substr(t$6828,1,10) = 'PARM_LIST'
14121.                         t$6829 = seat_spectrum%drop%parm_list%dim_2%LB
14121.                         t$6830 = seat_spectrum%drop%parm_list%dim_2%LB + seat_spectrum%drop%parm_list%dim_2%EX + -1
14121.                         t$6831 = i
14121.                         call _bounds_error(  _substr(t$6827,1,13), 14121,  _substr(t$6828,1,10), 2, t$6829, t$6830, t$6831, t$6826 )
14121.                      endif
14121.                      if ( i_drop < seat_spectrum%drop%parm_list%dim_3%LB .or. i_drop > seat_spectrum%drop%parm_list%dim_3%LB + seat_spectrum%drop%parm_list%dim_3%EX + -1 ) then
14121.                          _substr(t$6833,1,13) = 'Rad_UKMO.f90'
14121.                          _substr(t$6834,1,10) = 'PARM_LIST'
14121.                         t$6835 = seat_spectrum%drop%parm_list%dim_3%LB
14121.                         t$6836 = seat_spectrum%drop%parm_list%dim_3%LB + seat_spectrum%drop%parm_list%dim_3%EX + -1
14121.                         t$6837 = i_drop
14121.                         call _bounds_error(  _substr(t$6833,1,13), 14121,  _substr(t$6834,1,10), 3, t$6835, t$6836, t$6837, t$6832 )
14121.                      endif
14120.                      $Unit_temp_O2 = iu_spc
14120.                      t$6816 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$605,  _substr(t$604,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_list%base_addr)(1 + $I_L14120_18, i, i_drop, 0), 0x804060300000000L ) ) )
14120.                      if ( t$6816 /= 0 ) goto 30
14120.                      $I_L14120_18 = 1 + $I_L14120_18
14120.                      if ( $I_L14120_18 >= i_dummy ) exit
14120.                   enddo
14120.                   $Unit_temp_O6 = iu_spc
14120.                   t$6816 = _fread( _clist( 0, 1, 1, $Unit_temp_O6, ios, Null_Arg, t$605,  _substr(t$604,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14120.                endif
14120.    30          continue
14124.                if ( ios /= 0 ) then
14120.                   goto 40
14120.                endif
14131.                $I_L14119_24 = 1 + $I_L14119_24
14131.                if ( $I_L14119_24 >= $t_S1 ) exit
14131.             enddo
14131.             goto 50
14131.          else
14119.             $I_L14119_20 = 0
14119.             do
14120.                $Unit_temp_O1 = iu_spc
14120.                t$6816 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$605,  _substr(t$604,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14120.                if ( t$6816 == 0 ) then
14120.                   $Unit_temp_O6 = iu_spc
14120.                   t$6816 = _fread( _clist( 0, 1, 1, $Unit_temp_O6, ios, Null_Arg, t$605,  _substr(t$604,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14120.                endif
14124.                if ( ios /= 0 ) then
14119.                   i = ( 1 + $I_L14119_20 )
14119.    40             continue
14125.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$607,  _substr(t$606,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_0', 0x800600000000L ), _iotype( 'data for droplets are not in the correct format.', 0x800600000000L ) ) )
14128.                   seat_ierr = 1
14128.                   goto 60
14128.                endif
14131.                $I_L14119_20 = 1 + $I_L14119_20
14131.                if ( $I_L14119_20 >= seat_spectrum%basic%n_band ) exit
14131.             enddo
14131.    50       continue
14131.             i = ( 1 + $t_S1 )
14131.    20       continue
14143.             (seat_spectrum%drop%l_drop_type%base_addr)(i_drop, 0) = .true.
14144.             (seat_spectrum%drop%i_drop_parm%base_addr)(i_drop, 0) = i_parametrization_drop
14144.          endif
14144.       else
14134.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$609,  _substr(t$608,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_0', 0x800600000000L ), _iotype( 'an unknown parametrization scheme has been specified.', 0x800600000000L ) ) )
14137.          seat_ierr = 1
14137.       endif
14137.    60 continue
14149.       return
14149.       end
14149.       
14154.       
14154.       subroutine read_block_10_0_1_int
14178.       if ( seat_spectrum%drop%l_drop_type%header%assoc /= 1 ) then
14179.          seat_spectrum%drop%l_drop_type%header%a_contig = 1
14179.          seat_spectrum%drop%l_drop_type%dim_1%LB = 1
14179.          seat_spectrum%drop%l_drop_type%dim_1%EX = _zla( 0, (nd_drop_type%base_addr)(0) )
14179.          seat_spectrum%drop%l_drop_type%dim_1%SM = 1
14179.          $_allo_P1(0) = 0x1000000000001L
14179.          $_allo_P1(1) = loc( seat_spectrum%drop%l_drop_type )
14179.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14180.          $F_A34 = (nd_drop_type%base_addr)(0)
14180.          if ( (nd_drop_type%base_addr)(0) > 0 ) then
14180.             $SC_spectrum_I2 = seat_spectrum%drop%l_drop_type%dim_1%EX
14180.             $I_L14180_22 = 0
14180. !dir$ ivdep
14180.             do
14180.                (seat_spectrum%drop%l_drop_type%base_addr)(1 + $I_L14180_22, 0) = .false.
14180.                $I_L14180_22 = 1 + $I_L14180_22
14180.                if ( $I_L14180_22 >= $F_A34 ) exit
14180.             enddo
14180.          endif
14181.          seat_spectrum%drop%i_drop_parm%header%a_contig = 1
14181.          seat_spectrum%drop%i_drop_parm%dim_1%LB = 1
14181.          seat_spectrum%drop%i_drop_parm%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14181.          seat_spectrum%drop%i_drop_parm%dim_1%SM = 1
14181.          $_allo_P2(0) = 0x1000000000001L
14181.          $_allo_P2(1) = loc( seat_spectrum%drop%i_drop_parm )
14181.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14182.          seat_spectrum%drop%parm_min_dim%header%a_contig = 1
14182.          seat_spectrum%drop%parm_min_dim%dim_1%LB = 1
14182.          seat_spectrum%drop%parm_min_dim%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14182.          seat_spectrum%drop%parm_min_dim%dim_1%SM = 1
14182.          $_allo_P3(0) = 0x1000000000001L
14182.          $_allo_P3(1) = loc( seat_spectrum%drop%parm_min_dim )
14182.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14183.          seat_spectrum%drop%parm_max_dim%header%a_contig = 1
14183.          seat_spectrum%drop%parm_max_dim%dim_1%LB = 1
14183.          seat_spectrum%drop%parm_max_dim%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14183.          seat_spectrum%drop%parm_max_dim%dim_1%SM = 1
14183.          $_allo_P4(0) = 0x1000000000001L
14183.          $_allo_P4(1) = loc( seat_spectrum%drop%parm_max_dim )
14183.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14184.          seat_spectrum%drop%n_phf%header%a_contig = 1
14184.          seat_spectrum%drop%n_phf%dim_1%LB = 1
14184.          seat_spectrum%drop%n_phf%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14184.          seat_spectrum%drop%n_phf%dim_1%SM = 1
14184.          $_allo_P5(0) = 0x1000000000001L
14184.          $_allo_P5(1) = loc( seat_spectrum%drop%n_phf )
14184.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14185.          seat_spectrum%drop%parm_list%header%a_contig = 1
14185.          seat_spectrum%drop%parm_list%dim_1%LB = 1
14185.          seat_spectrum%drop%parm_list%dim_1%EX = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14185.          seat_spectrum%drop%parm_list%dim_1%SM = 1
14185.          seat_spectrum%drop%parm_list%dim_2%LB = 1
14185.          seat_spectrum%drop%parm_list%dim_2%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14185.          seat_spectrum%drop%parm_list%dim_2%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14185.          seat_spectrum%drop%parm_list%dim_3%LB = 1
14185.          seat_spectrum%drop%parm_list%dim_3%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14185.          seat_spectrum%drop%parm_list%dim_3%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) * max( 0, (nd_band%base_addr)(0) ) )
14185.          $_allo_P6(0) = 0x1000000000001L
14185.          $_allo_P6(1) = loc( seat_spectrum%drop%parm_list )
14185.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14185.       endif
14190.       $Unit_temp_O0 = iu_spc
14190.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$611,  _substr(t$610,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14190.       i_drop = $_IOitem_P0(0)
14190.       i_parametrization_drop = $_IOitem_P0(1)
14190.       i_dummy = $_IOitem_P0(2)
14192.       if ( i_drop > (nd_drop_type%base_addr)(0) ) then
14193.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$613,  _substr(t$612,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_1', 0x800600000000L ), _iotype( 'The indexing number of a droplet exceeds the maximum permitted value:', 0x800600000000L ), _iotype( 'increase npd_drop_type and recompile.', 0x800600000000L ) ) )
14198.          seat_ierr = 1
14200.       else if ( i_parametrization_drop == 1 ) then
14200.          goto 10
14200.       else if ( i_parametrization_drop == 2 ) then
14200.          goto 10
14200.       else if ( i_parametrization_drop == 5 ) then
14200.    10    continue
14209.          (seat_spectrum%drop%n_phf%base_addr)(i_drop, 0) = 1
14211.          $Unit_temp_O1 = iu_spc
14211.          _fread( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$615,  _substr(t$614,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14212.          if ( i_drop < seat_spectrum%drop%parm_min_dim%dim_1%LB .or. i_drop > seat_spectrum%drop%parm_min_dim%dim_1%LB + seat_spectrum%drop%parm_min_dim%dim_1%EX + -1 ) then
14212.              _substr(t$6839,1,13) = 'Rad_UKMO.f90'
14212.              _substr(t$6840,1,13) = 'PARM_MIN_DIM'
14212.             t$6841 = seat_spectrum%drop%parm_min_dim%dim_1%LB
14212.             t$6842 = seat_spectrum%drop%parm_min_dim%dim_1%LB + seat_spectrum%drop%parm_min_dim%dim_1%EX + -1
14212.             t$6843 = i_drop
14212.             call _bounds_error(  _substr(t$6839,1,13), 14212,  _substr(t$6840,1,13), 1, t$6841, t$6842, t$6843, t$6838 )
14212.          endif
14211.          $Unit_temp_O2 = iu_spc
14211.          _fread( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$615,  _substr(t$614,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_min_dim%base_addr)(i_drop, 0), 0x804060300000000L ) ) )
14213.          if ( i_drop < seat_spectrum%drop%parm_max_dim%dim_1%LB .or. i_drop > seat_spectrum%drop%parm_max_dim%dim_1%LB + seat_spectrum%drop%parm_max_dim%dim_1%EX + -1 ) then
14213.              _substr(t$6845,1,13) = 'Rad_UKMO.f90'
14213.              _substr(t$6846,1,13) = 'PARM_MAX_DIM'
14213.             t$6847 = seat_spectrum%drop%parm_max_dim%dim_1%LB
14213.             t$6848 = seat_spectrum%drop%parm_max_dim%dim_1%LB + seat_spectrum%drop%parm_max_dim%dim_1%EX + -1
14213.             t$6849 = i_drop
14213.             call _bounds_error(  _substr(t$6845,1,13), 14213,  _substr(t$6846,1,13), 1, t$6847, t$6848, t$6849, t$6844 )
14213.          endif
14211.          $Unit_temp_O4 = iu_spc
14211.          _fread( _clist( 0, 0, 0, $Unit_temp_O4, Null_Arg, Null_Arg, t$615,  _substr(t$614,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_max_dim%base_addr)(i_drop, 0), 0x804060300000000L ) ) )
14211.          $Unit_temp_O6 = iu_spc
14211.          _fread( _clist( 0, 0, 1, $Unit_temp_O6, Null_Arg, Null_Arg, t$615,  _substr(t$614,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14217.          $t_S0 = seat_spectrum%basic%n_band
14217.          if ( seat_spectrum%basic%n_band <= 0 ) then
14215.             goto 20
14215.          else if ( i_dummy > 0 ) then
14217.             $I_L14217_24 = 0
14217.             do
14218.                $Unit_temp_O7 = iu_spc
14218.                t$6853 = _fread( _clist( 0, 1, 2, $Unit_temp_O7, ios, Null_Arg, t$617,  _substr(t$616,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14218.                if ( t$6853 == 0 ) then
14218.                   $I_L14218_18 = 0
14218.                   do
14219.                      if ( ( 1 + $I_L14218_18 ) < seat_spectrum%drop%parm_list%dim_1%LB .or. ( 1 + $I_L14218_18 ) > seat_spectrum%drop%parm_list%dim_1%LB + seat_spectrum%drop%parm_list%dim_1%EX + -1 ) then
14219.                          _substr(t$6858,1,13) = 'Rad_UKMO.f90'
14219.                          _substr(t$6859,1,10) = 'PARM_LIST'
14219.                         t$6841 = seat_spectrum%drop%parm_list%dim_1%LB
14219.                         t$6842 = seat_spectrum%drop%parm_list%dim_1%LB + seat_spectrum%drop%parm_list%dim_1%EX + -1
14219.                         t$6843 = 1 + $I_L14218_18
14219.                         call _bounds_error(  _substr(t$6858,1,13), 14219,  _substr(t$6859,1,10), 1, t$6841, t$6842, t$6843, t$6857 )
14219.                      endif
14219.                      if ( ( 1 + $I_L14217_24 ) < seat_spectrum%drop%parm_list%dim_2%LB .or. ( 1 + $I_L14217_24 ) > seat_spectrum%drop%parm_list%dim_2%LB + seat_spectrum%drop%parm_list%dim_2%EX + -1 ) then
14219.                          _substr(t$6861,1,13) = 'Rad_UKMO.f90'
14219.                          _substr(t$6862,1,10) = 'PARM_LIST'
14219.                         t$6847 = seat_spectrum%drop%parm_list%dim_2%LB
14219.                         t$6848 = seat_spectrum%drop%parm_list%dim_2%LB + seat_spectrum%drop%parm_list%dim_2%EX + -1
14219.                         t$6849 = 1 + $I_L14217_24
14219.                         call _bounds_error(  _substr(t$6861,1,13), 14219,  _substr(t$6862,1,10), 2, t$6847, t$6848, t$6849, t$6860 )
14219.                      endif
14219.                      if ( i_drop < seat_spectrum%drop%parm_list%dim_3%LB .or. i_drop > seat_spectrum%drop%parm_list%dim_3%LB + seat_spectrum%drop%parm_list%dim_3%EX + -1 ) then
14219.                          _substr(t$6864,1,13) = 'Rad_UKMO.f90'
14219.                          _substr(t$6865,1,10) = 'PARM_LIST'
14219.                         t$6866 = seat_spectrum%drop%parm_list%dim_3%LB
14219.                         t$6867 = seat_spectrum%drop%parm_list%dim_3%LB + seat_spectrum%drop%parm_list%dim_3%EX + -1
14219.                         t$6868 = i_drop
14219.                         call _bounds_error(  _substr(t$6864,1,13), 14219,  _substr(t$6865,1,10), 3, t$6866, t$6867, t$6868, t$6863 )
14219.                      endif
14218.                      $Unit_temp_O8 = iu_spc
14218.                      t$6853 = _fread( _clist( 0, 1, 0, $Unit_temp_O8, ios, Null_Arg, t$617,  _substr(t$616,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_list%base_addr)(1 + $I_L14218_18, 1 + $I_L14217_24, i_drop, 0), 0x804060300000000L ) ) )
14218.                      if ( t$6853 /= 0 ) goto 30
14218.                      $I_L14218_18 = 1 + $I_L14218_18
14218.                      if ( $I_L14218_18 >= i_dummy ) exit
14218.                   enddo
14218.                   $Unit_temp_O11 = iu_spc
14218.                   t$6853 = _fread( _clist( 0, 1, 1, $Unit_temp_O11, ios, Null_Arg, t$617,  _substr(t$616,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14218.                endif
14218.    30          continue
14221.                if ( ios /= 0 ) then
14218.                   goto 40
14218.                endif
14228.                $I_L14217_24 = 1 + $I_L14217_24
14228.                if ( $I_L14217_24 >= $t_S0 ) exit
14228.             enddo
14228.             goto 20
14228.          else
14217.             $I_L14217_20 = 0
14217.             do
14218.                $Unit_temp_O7 = iu_spc
14218.                t$6853 = _fread( _clist( 0, 1, 2, $Unit_temp_O7, ios, Null_Arg, t$617,  _substr(t$616,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14218.                if ( t$6853 == 0 ) then
14218.                   $Unit_temp_O11 = iu_spc
14218.                   t$6853 = _fread( _clist( 0, 1, 1, $Unit_temp_O11, ios, Null_Arg, t$617,  _substr(t$616,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14218.                endif
14221.                if ( ios /= 0 ) then
14218.    40             continue
14222.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$619,  _substr(t$618,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_1', 0x800600000000L ), _iotype( 'Data for droplets are not in the correct format.', 0x800600000000L ) ) )
14225.                   seat_ierr = 1
14225.                   goto 50
14225.                endif
14228.                $I_L14217_20 = 1 + $I_L14217_20
14228.                if ( $I_L14217_20 >= seat_spectrum%basic%n_band ) exit
14228.             enddo
14228.    20       continue
14240.             (seat_spectrum%drop%l_drop_type%base_addr)(i_drop, 0) = .true.
14241.             (seat_spectrum%drop%i_drop_parm%base_addr)(i_drop, 0) = i_parametrization_drop
14241.          endif
14241.       else
14231.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$621,  _substr(t$620,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_1', 0x800600000000L ), _iotype( 'An unknown parametrization scheme has been specified.', 0x800600000000L ) ) )
14234.          seat_ierr = 1
14234.       endif
14234.    50 continue
14246.       return
14246.       end
14246.       
14251.       
14251.       subroutine read_block_10_0_2_int
14275.       if ( seat_spectrum%drop%l_drop_type%header%assoc /= 1 ) then
14276.          seat_spectrum%drop%l_drop_type%header%a_contig = 1
14276.          seat_spectrum%drop%l_drop_type%dim_1%LB = 1
14276.          seat_spectrum%drop%l_drop_type%dim_1%EX = _zla( 0, (nd_drop_type%base_addr)(0) )
14276.          seat_spectrum%drop%l_drop_type%dim_1%SM = 1
14276.          $_allo_P1(0) = 0x1000000000001L
14276.          $_allo_P1(1) = loc( seat_spectrum%drop%l_drop_type )
14276.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14277.          $F_A34 = (nd_drop_type%base_addr)(0)
14277.          if ( (nd_drop_type%base_addr)(0) > 0 ) then
14277.             $SC_spectrum_I2 = seat_spectrum%drop%l_drop_type%dim_1%EX
14277.             $I_L14277_22 = 0
14277. !dir$ ivdep
14277.             do
14277.                (seat_spectrum%drop%l_drop_type%base_addr)(1 + $I_L14277_22, 0) = .false.
14277.                $I_L14277_22 = 1 + $I_L14277_22
14277.                if ( $I_L14277_22 >= $F_A34 ) exit
14277.             enddo
14277.          endif
14278.          seat_spectrum%drop%i_drop_parm%header%a_contig = 1
14278.          seat_spectrum%drop%i_drop_parm%dim_1%LB = 1
14278.          seat_spectrum%drop%i_drop_parm%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14278.          seat_spectrum%drop%i_drop_parm%dim_1%SM = 1
14278.          $_allo_P2(0) = 0x1000000000001L
14278.          $_allo_P2(1) = loc( seat_spectrum%drop%i_drop_parm )
14278.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14279.          seat_spectrum%drop%parm_min_dim%header%a_contig = 1
14279.          seat_spectrum%drop%parm_min_dim%dim_1%LB = 1
14279.          seat_spectrum%drop%parm_min_dim%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14279.          seat_spectrum%drop%parm_min_dim%dim_1%SM = 1
14279.          $_allo_P3(0) = 0x1000000000001L
14279.          $_allo_P3(1) = loc( seat_spectrum%drop%parm_min_dim )
14279.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14280.          seat_spectrum%drop%parm_max_dim%header%a_contig = 1
14280.          seat_spectrum%drop%parm_max_dim%dim_1%LB = 1
14280.          seat_spectrum%drop%parm_max_dim%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14280.          seat_spectrum%drop%parm_max_dim%dim_1%SM = 1
14280.          $_allo_P4(0) = 0x1000000000001L
14280.          $_allo_P4(1) = loc( seat_spectrum%drop%parm_max_dim )
14280.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14281.          seat_spectrum%drop%n_phf%header%a_contig = 1
14281.          seat_spectrum%drop%n_phf%dim_1%LB = 1
14281.          seat_spectrum%drop%n_phf%dim_1%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14281.          seat_spectrum%drop%n_phf%dim_1%SM = 1
14281.          $_allo_P5(0) = 0x1000000000001L
14281.          $_allo_P5(1) = loc( seat_spectrum%drop%n_phf )
14281.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14282.          seat_spectrum%drop%parm_list%header%a_contig = 1
14282.          seat_spectrum%drop%parm_list%dim_1%LB = 1
14282.          seat_spectrum%drop%parm_list%dim_1%EX = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14282.          seat_spectrum%drop%parm_list%dim_1%SM = 1
14282.          seat_spectrum%drop%parm_list%dim_2%LB = 1
14282.          seat_spectrum%drop%parm_list%dim_2%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14282.          seat_spectrum%drop%parm_list%dim_2%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14282.          seat_spectrum%drop%parm_list%dim_3%LB = 1
14282.          seat_spectrum%drop%parm_list%dim_3%EX = ( max( 0, (nd_drop_type%base_addr)(0) ) )
14282.          seat_spectrum%drop%parm_list%dim_3%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) * max( 0, (nd_band%base_addr)(0) ) )
14282.          $_allo_P6(0) = 0x1000000000001L
14282.          $_allo_P6(1) = loc( seat_spectrum%drop%parm_list )
14282.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14282.       endif
14287.       $Unit_temp_O0 = iu_spc
14287.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$623,  _substr(t$622,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14287.       i_drop = $_IOitem_P0(0)
14287.       i_parametrization_drop = $_IOitem_P0(1)
14287.       i_dummy = $_IOitem_P0(2)
14289.       if ( i_drop > (nd_drop_type%base_addr)(0) ) then
14290.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$625,  _substr(t$624,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_2', 0x800600000000L ), _iotype( 'The indexing number of a droplet exceeds the maximum permitted value:', 0x800600000000L ), _iotype( 'increase npd_drop_type and recompile.', 0x800600000000L ) ) )
14295.          seat_ierr = 1
14297.       else if ( i_parametrization_drop == 1 ) then
14297.          goto 10
14297.       else if ( i_parametrization_drop == 6 ) then
14297.          goto 10
14297.       else if ( i_parametrization_drop == 2 ) then
14297.          goto 10
14297.       else if ( i_parametrization_drop == 5 ) then
14297.    10    continue
14305.          if ( i_drop < seat_spectrum%drop%n_phf%dim_1%LB .or. i_drop > seat_spectrum%drop%n_phf%dim_1%LB + seat_spectrum%drop%n_phf%dim_1%EX + -1 ) then
14305.              _substr(t$6870,1,13) = 'Rad_UKMO.f90'
14305.              _substr(t$6871,1,6) = 'N_PHF'
14305.             t$6872 = seat_spectrum%drop%n_phf%dim_1%LB
14305.             t$6873 = seat_spectrum%drop%n_phf%dim_1%LB + seat_spectrum%drop%n_phf%dim_1%EX + -1
14305.             t$6874 = i_drop
14305.             call _bounds_error(  _substr(t$6870,1,13), 14305,  _substr(t$6871,1,6), 1, t$6872, t$6873, t$6874, t$6869 )
14305.          endif
14305.          $Unit_temp_O1 = iu_spc
14305.          _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$627,  _substr(t$626,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%n_phf%base_addr)(i_drop, 0), 0x2000200000000L ) ) )
14307.          $Unit_temp_O3 = iu_spc
14307.          _fread( _clist( 0, 0, 2, $Unit_temp_O3, Null_Arg, Null_Arg, t$629,  _substr(t$628,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14308.          if ( i_drop < seat_spectrum%drop%parm_min_dim%dim_1%LB .or. i_drop > seat_spectrum%drop%parm_min_dim%dim_1%LB + seat_spectrum%drop%parm_min_dim%dim_1%EX + -1 ) then
14308.              _substr(t$6876,1,13) = 'Rad_UKMO.f90'
14308.              _substr(t$6877,1,13) = 'PARM_MIN_DIM'
14308.             t$6872 = seat_spectrum%drop%parm_min_dim%dim_1%LB
14308.             t$6873 = seat_spectrum%drop%parm_min_dim%dim_1%LB + seat_spectrum%drop%parm_min_dim%dim_1%EX + -1
14308.             t$6874 = i_drop
14308.             call _bounds_error(  _substr(t$6876,1,13), 14308,  _substr(t$6877,1,13), 1, t$6872, t$6873, t$6874, t$6875 )
14308.          endif
14307.          $Unit_temp_O4 = iu_spc
14307.          _fread( _clist( 0, 0, 0, $Unit_temp_O4, Null_Arg, Null_Arg, t$629,  _substr(t$628,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_min_dim%base_addr)(i_drop, 0), 0x804060300000000L ) ) )
14309.          if ( i_drop < seat_spectrum%drop%parm_max_dim%dim_1%LB .or. i_drop > seat_spectrum%drop%parm_max_dim%dim_1%LB + seat_spectrum%drop%parm_max_dim%dim_1%EX + -1 ) then
14309.              _substr(t$6879,1,13) = 'Rad_UKMO.f90'
14309.              _substr(t$6880,1,13) = 'PARM_MAX_DIM'
14309.             t$6881 = seat_spectrum%drop%parm_max_dim%dim_1%LB
14309.             t$6882 = seat_spectrum%drop%parm_max_dim%dim_1%LB + seat_spectrum%drop%parm_max_dim%dim_1%EX + -1
14309.             t$6883 = i_drop
14309.             call _bounds_error(  _substr(t$6879,1,13), 14309,  _substr(t$6880,1,13), 1, t$6881, t$6882, t$6883, t$6878 )
14309.          endif
14307.          $Unit_temp_O6 = iu_spc
14307.          _fread( _clist( 0, 0, 0, $Unit_temp_O6, Null_Arg, Null_Arg, t$629,  _substr(t$628,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_max_dim%base_addr)(i_drop, 0), 0x804060300000000L ) ) )
14307.          $Unit_temp_O8 = iu_spc
14307.          _fread( _clist( 0, 0, 1, $Unit_temp_O8, Null_Arg, Null_Arg, t$629,  _substr(t$628,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14313.          $t_S0 = seat_spectrum%basic%n_band
14313.          if ( seat_spectrum%basic%n_band <= 0 ) then
14311.             goto 20
14311.          else if ( i_dummy > 0 ) then
14313.             $I_L14313_24 = 0
14313.             do
14314.                $Unit_temp_O9 = iu_spc
14314.                t$6887 = _fread( _clist( 0, 1, 2, $Unit_temp_O9, ios, Null_Arg, t$631,  _substr(t$630,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14314.                if ( t$6887 == 0 ) then
14314.                   $I_L14314_18 = 0
14314.                   do
14315.                      if ( ( 1 + $I_L14314_18 ) < seat_spectrum%drop%parm_list%dim_1%LB .or. ( 1 + $I_L14314_18 ) > seat_spectrum%drop%parm_list%dim_1%LB + seat_spectrum%drop%parm_list%dim_1%EX + -1 ) then
14315.                          _substr(t$6892,1,13) = 'Rad_UKMO.f90'
14315.                          _substr(t$6893,1,10) = 'PARM_LIST'
14315.                         t$6872 = seat_spectrum%drop%parm_list%dim_1%LB
14315.                         t$6873 = seat_spectrum%drop%parm_list%dim_1%LB + seat_spectrum%drop%parm_list%dim_1%EX + -1
14315.                         t$6874 = 1 + $I_L14314_18
14315.                         call _bounds_error(  _substr(t$6892,1,13), 14315,  _substr(t$6893,1,10), 1, t$6872, t$6873, t$6874, t$6891 )
14315.                      endif
14315.                      if ( ( 1 + $I_L14313_24 ) < seat_spectrum%drop%parm_list%dim_2%LB .or. ( 1 + $I_L14313_24 ) > seat_spectrum%drop%parm_list%dim_2%LB + seat_spectrum%drop%parm_list%dim_2%EX + -1 ) then
14315.                          _substr(t$6895,1,13) = 'Rad_UKMO.f90'
14315.                          _substr(t$6896,1,10) = 'PARM_LIST'
14315.                         t$6881 = seat_spectrum%drop%parm_list%dim_2%LB
14315.                         t$6882 = seat_spectrum%drop%parm_list%dim_2%LB + seat_spectrum%drop%parm_list%dim_2%EX + -1
14315.                         t$6883 = 1 + $I_L14313_24
14315.                         call _bounds_error(  _substr(t$6895,1,13), 14315,  _substr(t$6896,1,10), 2, t$6881, t$6882, t$6883, t$6894 )
14315.                      endif
14315.                      if ( i_drop < seat_spectrum%drop%parm_list%dim_3%LB .or. i_drop > seat_spectrum%drop%parm_list%dim_3%LB + seat_spectrum%drop%parm_list%dim_3%EX + -1 ) then
14315.                          _substr(t$6898,1,13) = 'Rad_UKMO.f90'
14315.                          _substr(t$6899,1,10) = 'PARM_LIST'
14315.                         t$6900 = seat_spectrum%drop%parm_list%dim_3%LB
14315.                         t$6901 = seat_spectrum%drop%parm_list%dim_3%LB + seat_spectrum%drop%parm_list%dim_3%EX + -1
14315.                         t$6902 = i_drop
14315.                         call _bounds_error(  _substr(t$6898,1,13), 14315,  _substr(t$6899,1,10), 3, t$6900, t$6901, t$6902, t$6897 )
14315.                      endif
14314.                      $Unit_temp_O10 = iu_spc
14314.                      t$6887 = _fread( _clist( 0, 1, 0, $Unit_temp_O10, ios, Null_Arg, t$631,  _substr(t$630,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%drop%parm_list%base_addr)(1 + $I_L14314_18, 1 + $I_L14313_24, i_drop, 0), 0x804060300000000L ) ) )
14314.                      if ( t$6887 /= 0 ) goto 30
14314.                      $I_L14314_18 = 1 + $I_L14314_18
14314.                      if ( $I_L14314_18 >= i_dummy ) exit
14314.                   enddo
14314.                   $Unit_temp_O13 = iu_spc
14314.                   t$6887 = _fread( _clist( 0, 1, 1, $Unit_temp_O13, ios, Null_Arg, t$631,  _substr(t$630,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14314.                endif
14314.    30          continue
14317.                if ( ios /= 0 ) then
14314.                   goto 40
14314.                endif
14324.                $I_L14313_24 = 1 + $I_L14313_24
14324.                if ( $I_L14313_24 >= $t_S0 ) exit
14324.             enddo
14324.             goto 20
14324.          else
14313.             $I_L14313_20 = 0
14313.             do
14314.                $Unit_temp_O9 = iu_spc
14314.                t$6887 = _fread( _clist( 0, 1, 2, $Unit_temp_O9, ios, Null_Arg, t$631,  _substr(t$630,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14314.                if ( t$6887 == 0 ) then
14314.                   $Unit_temp_O13 = iu_spc
14314.                   t$6887 = _fread( _clist( 0, 1, 1, $Unit_temp_O13, ios, Null_Arg, t$631,  _substr(t$630,1,21), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14314.                endif
14317.                if ( ios /= 0 ) then
14314.    40             continue
14318.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$633,  _substr(t$632,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_2', 0x800600000000L ), _iotype( 'Data for droplets are not in the correct format.', 0x800600000000L ) ) )
14321.                   seat_ierr = 1
14321.                   goto 50
14321.                endif
14324.                $I_L14313_20 = 1 + $I_L14313_20
14324.                if ( $I_L14313_20 >= seat_spectrum%basic%n_band ) exit
14324.             enddo
14324.    20       continue
14336.             (seat_spectrum%drop%l_drop_type%base_addr)(i_drop, 0) = .true.
14337.             (seat_spectrum%drop%i_drop_parm%base_addr)(i_drop, 0) = i_parametrization_drop
14337.          endif
14337.       else
14327.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$635,  _substr(t$634,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_10_0_2', 0x800600000000L ), _iotype( 'An unknown parametrization scheme has been specified.', 0x800600000000L ) ) )
14330.          seat_ierr = 1
14330.       endif
14330.    50 continue
14342.       return
14342.       end
14342.       
14347.       
14347.       subroutine read_block_11_0_1_int
14360.       if ( seat_spectrum%aerosol%l_aero_spec%header%assoc /= 1 ) then
14361.          (nd_phase_term%base_addr)(0) = 1
14362.          seat_spectrum%aerosol%l_aero_spec%header%a_contig = 1
14362.          seat_spectrum%aerosol%l_aero_spec%dim_1%LB = 1
14362.          seat_spectrum%aerosol%l_aero_spec%dim_1%EX = _zla( 0, (nd_aerosol_species%base_addr)(0) )
14362.          seat_spectrum%aerosol%l_aero_spec%dim_1%SM = 1
14362.          $_allo_P0(0) = 0x1000000000001L
14362.          $_allo_P0(1) = loc( seat_spectrum%aerosol%l_aero_spec )
14362.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
14363.          $F_A34 = (nd_aerosol_species%base_addr)(0)
14363.          if ( (nd_aerosol_species%base_addr)(0) > 0 ) then
14363.             $SC_spectrum_I1 = seat_spectrum%aerosol%l_aero_spec%dim_1%EX
14363.             $I_L14363_10 = 0
14363. !dir$ ivdep
14363.             do
14363.                (seat_spectrum%aerosol%l_aero_spec%base_addr)(1 + $I_L14363_10, 0) = .false.
14363.                $I_L14363_10 = 1 + $I_L14363_10
14363.                if ( $I_L14363_10 >= $F_A34 ) exit
14363.             enddo
14363.          endif
14364.          seat_spectrum%aerosol%i_aerosol_parm%header%a_contig = 1
14364.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%LB = 1
14364.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14364.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%SM = 1
14364.          $_allo_P1(0) = 0x1000000000001L
14364.          $_allo_P1(1) = loc( seat_spectrum%aerosol%i_aerosol_parm )
14364.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14365.          seat_spectrum%aerosol%nhumidity%header%a_contig = 1
14365.          seat_spectrum%aerosol%nhumidity%dim_1%LB = 1
14365.          seat_spectrum%aerosol%nhumidity%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14365.          seat_spectrum%aerosol%nhumidity%dim_1%SM = 1
14365.          $_allo_P2(0) = 0x1000000000001L
14365.          $_allo_P2(1) = loc( seat_spectrum%aerosol%nhumidity )
14365.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14366.          seat_spectrum%aerosol%humidities%header%a_contig = 1
14366.          seat_spectrum%aerosol%humidities%dim_1%LB = 1
14366.          seat_spectrum%aerosol%humidities%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14366.          seat_spectrum%aerosol%humidities%dim_1%SM = 1
14366.          seat_spectrum%aerosol%humidities%dim_2%LB = 1
14366.          seat_spectrum%aerosol%humidities%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14366.          seat_spectrum%aerosol%humidities%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14366.          $_allo_P3(0) = 0x1000000000001L
14366.          $_allo_P3(1) = loc( seat_spectrum%aerosol%humidities )
14366.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14367.          seat_spectrum%aerosol%n_aerosol_phf_term%header%a_contig = 1
14367.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB = 1
14367.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14367.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%SM = 1
14367.          $_allo_P4(0) = 0x1000000000001L
14367.          $_allo_P4(1) = loc( seat_spectrum%aerosol%n_aerosol_phf_term )
14367.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14368.          seat_spectrum%aerosol%abs%header%a_contig = 1
14368.          seat_spectrum%aerosol%abs%dim_1%LB = 1
14368.          seat_spectrum%aerosol%abs%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14368.          seat_spectrum%aerosol%abs%dim_1%SM = 1
14368.          seat_spectrum%aerosol%abs%dim_2%LB = 1
14368.          seat_spectrum%aerosol%abs%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14368.          seat_spectrum%aerosol%abs%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14368.          seat_spectrum%aerosol%abs%dim_3%LB = 1
14368.          seat_spectrum%aerosol%abs%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14368.          seat_spectrum%aerosol%abs%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14368.          $_allo_P5(0) = 0x1000000000001L
14368.          $_allo_P5(1) = loc( seat_spectrum%aerosol%abs )
14368.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14369.          seat_spectrum%aerosol%scat%header%a_contig = 1
14369.          seat_spectrum%aerosol%scat%dim_1%LB = 1
14369.          seat_spectrum%aerosol%scat%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14369.          seat_spectrum%aerosol%scat%dim_1%SM = 1
14369.          seat_spectrum%aerosol%scat%dim_2%LB = 1
14369.          seat_spectrum%aerosol%scat%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14369.          seat_spectrum%aerosol%scat%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14369.          seat_spectrum%aerosol%scat%dim_3%LB = 1
14369.          seat_spectrum%aerosol%scat%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14369.          seat_spectrum%aerosol%scat%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14369.          $_allo_P6(0) = 0x1000000000001L
14369.          $_allo_P6(1) = loc( seat_spectrum%aerosol%scat )
14369.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14370.          seat_spectrum%aerosol%phf_fnc%header%a_contig = 1
14370.          seat_spectrum%aerosol%phf_fnc%dim_1%LB = 1
14370.          seat_spectrum%aerosol%phf_fnc%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14370.          seat_spectrum%aerosol%phf_fnc%dim_1%SM = 1
14370.          seat_spectrum%aerosol%phf_fnc%dim_2%LB = 1
14370.          seat_spectrum%aerosol%phf_fnc%dim_2%EX = ( max( 0, (nd_phase_term%base_addr)(0) ) )
14370.          seat_spectrum%aerosol%phf_fnc%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14370.          seat_spectrum%aerosol%phf_fnc%dim_3%LB = 1
14370.          seat_spectrum%aerosol%phf_fnc%dim_3%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14370.          seat_spectrum%aerosol%phf_fnc%dim_3%SM = ( max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14370.          seat_spectrum%aerosol%phf_fnc%dim_4%LB = 1
14370.          seat_spectrum%aerosol%phf_fnc%dim_4%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14370.          seat_spectrum%aerosol%phf_fnc%dim_4%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14370.          $_allo_P7(0) = 0x1000000000001L
14370.          $_allo_P7(1) = loc( seat_spectrum%aerosol%phf_fnc )
14370.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
14370.       endif
14373.       $Unit_temp_O0 = iu_spc
14373.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$637,  _substr(t$636,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i_species, 0x2000200000000L ) ) )
14376.       $t_S1 = seat_spectrum%basic%n_band
14376.       i = 1
14376.       if ( seat_spectrum%basic%n_band > 0 ) then
14376.          $I_L14376_8 = 0
14376.          do
14376.             i = ( 1 + $I_L14376_8 )
14377.             $Unit_temp_O1 = iu_spc
14377.             t$6906 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14377.             if ( t$6906 == 0 ) then
14377.                $Unit_temp_O2 = iu_spc
14377.                t$6906 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
14377.                if ( t$6906 == 0 ) then
14378.                   if ( 1 < seat_spectrum%aerosol%abs%dim_1%LB .or. 0 >= seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1 ) then
14378.                       _substr(t$6908,1,13) = 'Rad_UKMO.f90'
14378.                       _substr(t$6909,1,4) = 'ABS'
14378.                      t$6910 = seat_spectrum%aerosol%abs%dim_1%LB
14378.                      t$6911 = seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1
14378.                      call _bounds_error(  _substr(t$6908,1,13), 14378,  _substr(t$6909,1,4), 1, t$6910, t$6911, 1, t$6907 )
14378.                   endif
14378.                   if ( i_species < seat_spectrum%aerosol%abs%dim_2%LB .or. i_species > seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1 ) then
14378.                       _substr(t$6913,1,13) = 'Rad_UKMO.f90'
14378.                       _substr(t$6914,1,4) = 'ABS'
14378.                      t$6915 = seat_spectrum%aerosol%abs%dim_2%LB
14378.                      t$6916 = seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1
14378.                      t$6917 = i_species
14378.                      call _bounds_error(  _substr(t$6913,1,13), 14378,  _substr(t$6914,1,4), 2, t$6915, t$6916, t$6917, t$6912 )
14378.                   endif
14378.                   if ( i < seat_spectrum%aerosol%abs%dim_3%LB .or. i > seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1 ) then
14378.                       _substr(t$6919,1,13) = 'Rad_UKMO.f90'
14378.                       _substr(t$6920,1,4) = 'ABS'
14378.                      t$6921 = seat_spectrum%aerosol%abs%dim_3%LB
14378.                      t$6922 = seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1
14378.                      t$6923 = i
14378.                      call _bounds_error(  _substr(t$6919,1,13), 14378,  _substr(t$6920,1,4), 3, t$6921, t$6922, t$6923, t$6918 )
14378.                   endif
14377.                   $Unit_temp_O3 = iu_spc
14377.                   t$6906 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%abs%base_addr)(1, i_species, i, 0), 0x804060300000000L ) ) )
14377.                   if ( t$6906 == 0 ) then
14379.                      if ( 1 < seat_spectrum%aerosol%scat%dim_1%LB .or. 0 >= seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1 ) then
14379.                          _substr(t$6925,1,13) = 'Rad_UKMO.f90'
14379.                          _substr(t$6926,1,5) = 'SCAT'
14379.                         t$6927 = seat_spectrum%aerosol%scat%dim_1%LB
14379.                         t$6928 = seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1
14379.                         call _bounds_error(  _substr(t$6925,1,13), 14379,  _substr(t$6926,1,5), 1, t$6927, t$6928, 1, t$6924 )
14379.                      endif
14379.                      if ( i_species < seat_spectrum%aerosol%scat%dim_2%LB .or. i_species > seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1 ) then
14379.                          _substr(t$6930,1,13) = 'Rad_UKMO.f90'
14379.                          _substr(t$6931,1,5) = 'SCAT'
14379.                         t$6932 = seat_spectrum%aerosol%scat%dim_2%LB
14379.                         t$6933 = seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1
14379.                         t$6934 = i_species
14379.                         call _bounds_error(  _substr(t$6930,1,13), 14379,  _substr(t$6931,1,5), 2, t$6932, t$6933, t$6934, t$6929 )
14379.                      endif
14379.                      if ( i < seat_spectrum%aerosol%scat%dim_3%LB .or. i > seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1 ) then
14379.                          _substr(t$6936,1,13) = 'Rad_UKMO.f90'
14379.                          _substr(t$6937,1,5) = 'SCAT'
14379.                         t$6938 = seat_spectrum%aerosol%scat%dim_3%LB
14379.                         t$6939 = seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1
14379.                         t$6940 = i
14379.                         call _bounds_error(  _substr(t$6936,1,13), 14379,  _substr(t$6937,1,5), 3, t$6938, t$6939, t$6940, t$6935 )
14379.                      endif
14377.                      $Unit_temp_O6 = iu_spc
14377.                      t$6906 = _fread( _clist( 0, 1, 0, $Unit_temp_O6, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%scat%base_addr)(1, i_species, i, 0), 0x804060300000000L ) ) )
14377.                      if ( t$6906 == 0 ) then
14380.                         if ( 1 < seat_spectrum%aerosol%phf_fnc%dim_1%LB .or. 0 >= seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1 ) then
14380.                             _substr(t$6942,1,13) = 'Rad_UKMO.f90'
14380.                             _substr(t$6943,1,8) = 'PHF_FNC'
14380.                            t$6944 = seat_spectrum%aerosol%phf_fnc%dim_1%LB
14380.                            t$6945 = seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1
14380.                            call _bounds_error(  _substr(t$6942,1,13), 14380,  _substr(t$6943,1,8), 1, t$6944, t$6945, 1, t$6941 )
14380.                         endif
14380.                         if ( 1 < seat_spectrum%aerosol%phf_fnc%dim_2%LB .or. 0 >= seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1 ) then
14380.                             _substr(t$6947,1,13) = 'Rad_UKMO.f90'
14380.                             _substr(t$6948,1,8) = 'PHF_FNC'
14380.                            t$6949 = seat_spectrum%aerosol%phf_fnc%dim_2%LB
14380.                            t$6950 = seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1
14380.                            call _bounds_error(  _substr(t$6947,1,13), 14380,  _substr(t$6948,1,8), 2, t$6949, t$6950, 1, t$6946 )
14380.                         endif
14380.                         if ( i_species < seat_spectrum%aerosol%phf_fnc%dim_3%LB .or. i_species > seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1 ) then
14380.                             _substr(t$6952,1,13) = 'Rad_UKMO.f90'
14380.                             _substr(t$6953,1,8) = 'PHF_FNC'
14380.                            t$6954 = seat_spectrum%aerosol%phf_fnc%dim_3%LB
14380.                            t$6955 = seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1
14380.                            t$6956 = i_species
14380.                            call _bounds_error(  _substr(t$6952,1,13), 14380,  _substr(t$6953,1,8), 3, t$6954, t$6955, t$6956, t$6951 )
14380.                         endif
14380.                         if ( i < seat_spectrum%aerosol%phf_fnc%dim_4%LB .or. i > seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1 ) then
14380.                             _substr(t$6958,1,13) = 'Rad_UKMO.f90'
14380.                             _substr(t$6959,1,8) = 'PHF_FNC'
14380.                            t$6960 = seat_spectrum%aerosol%phf_fnc%dim_4%LB
14380.                            t$6961 = seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1
14380.                            t$6962 = i
14380.                            call _bounds_error(  _substr(t$6958,1,13), 14380,  _substr(t$6959,1,8), 4, t$6960, t$6961, t$6962, t$6957 )
14380.                         endif
14377.                         $Unit_temp_O9 = iu_spc
14377.                         t$6906 = _fread( _clist( 0, 1, 0, $Unit_temp_O9, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%phf_fnc%base_addr)(1, 1, i_species, i, 0), 0x804060300000000L ) ) )
14377.                         if ( t$6906 == 0 ) then
14377.                            $Unit_temp_O12 = iu_spc
14377.                            t$6906 = _fread( _clist( 0, 1, 1, $Unit_temp_O12, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14377.                         endif
14377.                      endif
14377.                   endif
14377.                endif
14377.             endif
14381.             if ( ios /= 0 ) then
14382.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$639,  _substr(t$638,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_11_0_1', 0x800600000000L ) ) )
14384.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$641,  _substr(t$640,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Dry aerosol scattering data are not in the correct format.', 0x800600000000L ) ) )
14386.                seat_ierr = 1
14386.                goto 20
14386.             endif
14389.             $I_L14376_8 = 1 + $I_L14376_8
14389.             if ( $I_L14376_8 >= $t_S1 ) exit
14389.          enddo
14389.          i = ( 1 + $t_S1 )
14389.          goto 10
14389.       else
14389.    10    continue
14390.          (seat_spectrum%aerosol%nhumidity%base_addr)(i_species, 0) = 0
14391.          (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_species, 0) = 1
14392.          (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0) = 1
14395.          (seat_spectrum%aerosol%l_aero_spec%base_addr)(i_species, 0) = .true.
14395.       endif
14395.    20 continue
14400.       return
14400.       end
14400.       
14405.       
14405.       subroutine read_block_11_0_2_int
14420.       if ( seat_spectrum%aerosol%l_aero_spec%header%assoc /= 1 ) then
14421.          seat_spectrum%aerosol%l_aero_spec%header%a_contig = 1
14421.          seat_spectrum%aerosol%l_aero_spec%dim_1%LB = 1
14421.          seat_spectrum%aerosol%l_aero_spec%dim_1%EX = _zla( 0, (nd_aerosol_species%base_addr)(0) )
14421.          seat_spectrum%aerosol%l_aero_spec%dim_1%SM = 1
14421.          $_allo_P0(0) = 0x1000000000001L
14421.          $_allo_P0(1) = loc( seat_spectrum%aerosol%l_aero_spec )
14421.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
14422.          $F_A34 = (nd_aerosol_species%base_addr)(0)
14422.          if ( (nd_aerosol_species%base_addr)(0) > 0 ) then
14422.             $SC_spectrum_I1 = seat_spectrum%aerosol%l_aero_spec%dim_1%EX
14422.             $I_L14422_16 = 0
14422. !dir$ ivdep
14422.             do
14422.                (seat_spectrum%aerosol%l_aero_spec%base_addr)(1 + $I_L14422_16, 0) = .false.
14422.                $I_L14422_16 = 1 + $I_L14422_16
14422.                if ( $I_L14422_16 >= $F_A34 ) exit
14422.             enddo
14422.          endif
14423.          seat_spectrum%aerosol%i_aerosol_parm%header%a_contig = 1
14423.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%LB = 1
14423.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14423.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%SM = 1
14423.          $_allo_P1(0) = 0x1000000000001L
14423.          $_allo_P1(1) = loc( seat_spectrum%aerosol%i_aerosol_parm )
14423.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14424.          seat_spectrum%aerosol%nhumidity%header%a_contig = 1
14424.          seat_spectrum%aerosol%nhumidity%dim_1%LB = 1
14424.          seat_spectrum%aerosol%nhumidity%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14424.          seat_spectrum%aerosol%nhumidity%dim_1%SM = 1
14424.          $_allo_P2(0) = 0x1000000000001L
14424.          $_allo_P2(1) = loc( seat_spectrum%aerosol%nhumidity )
14424.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14425.          seat_spectrum%aerosol%n_aerosol_phf_term%header%a_contig = 1
14425.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB = 1
14425.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14425.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%SM = 1
14425.          $_allo_P3(0) = 0x1000000000001L
14425.          $_allo_P3(1) = loc( seat_spectrum%aerosol%n_aerosol_phf_term )
14425.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14426.          seat_spectrum%aerosol%humidities%header%a_contig = 1
14426.          seat_spectrum%aerosol%humidities%dim_1%LB = 1
14426.          seat_spectrum%aerosol%humidities%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14426.          seat_spectrum%aerosol%humidities%dim_1%SM = 1
14426.          seat_spectrum%aerosol%humidities%dim_2%LB = 1
14426.          seat_spectrum%aerosol%humidities%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14426.          seat_spectrum%aerosol%humidities%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14426.          $_allo_P4(0) = 0x1000000000001L
14426.          $_allo_P4(1) = loc( seat_spectrum%aerosol%humidities )
14426.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14426.       endif
14429.       $Unit_temp_O0 = iu_spc
14429.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$643,  _substr(t$642,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i_species, 0x2000200000000L ) ) )
14431.       if ( i_species < seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB .or. i_species > seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1 ) then
14431.           _substr(t$6964,1,13) = 'Rad_UKMO.f90'
14431.           _substr(t$6965,1,19) = 'N_AEROSOL_PHF_TERM'
14431.          t$6966 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB
14431.          t$6967 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1
14431.          t$6968 = i_species
14431.          call _bounds_error(  _substr(t$6964,1,13), 14431,  _substr(t$6965,1,19), 1, t$6966, t$6967, t$6968, t$6963 )
14431.       endif
14430.       $Unit_temp_O1 = iu_spc
14430.       _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$645,  _substr(t$644,1,13), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0), 0x2000200000000L ) ) )
14433.       (nd_phase_term%base_addr)(0) = (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0)
14434.       if ( seat_spectrum%aerosol%abs%header%assoc /= 1 ) then
14435.          seat_spectrum%aerosol%abs%header%a_contig = 1
14435.          seat_spectrum%aerosol%abs%dim_1%LB = 1
14435.          seat_spectrum%aerosol%abs%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14435.          seat_spectrum%aerosol%abs%dim_1%SM = 1
14435.          seat_spectrum%aerosol%abs%dim_2%LB = 1
14435.          seat_spectrum%aerosol%abs%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14435.          seat_spectrum%aerosol%abs%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14435.          seat_spectrum%aerosol%abs%dim_3%LB = 1
14435.          seat_spectrum%aerosol%abs%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14435.          seat_spectrum%aerosol%abs%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14435.          $_allo_P5(0) = 0x1000000000001L
14435.          $_allo_P5(1) = loc( seat_spectrum%aerosol%abs )
14435.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14437.          seat_spectrum%aerosol%scat%header%a_contig = 1
14437.          seat_spectrum%aerosol%scat%dim_1%LB = 1
14437.          seat_spectrum%aerosol%scat%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14437.          seat_spectrum%aerosol%scat%dim_1%SM = 1
14437.          seat_spectrum%aerosol%scat%dim_2%LB = 1
14437.          seat_spectrum%aerosol%scat%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14437.          seat_spectrum%aerosol%scat%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14437.          seat_spectrum%aerosol%scat%dim_3%LB = 1
14437.          seat_spectrum%aerosol%scat%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14437.          seat_spectrum%aerosol%scat%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14437.          $_allo_P6(0) = 0x1000000000001L
14437.          $_allo_P6(1) = loc( seat_spectrum%aerosol%scat )
14437.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14439.          seat_spectrum%aerosol%phf_fnc%header%a_contig = 1
14439.          seat_spectrum%aerosol%phf_fnc%dim_1%LB = 1
14439.          seat_spectrum%aerosol%phf_fnc%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14439.          seat_spectrum%aerosol%phf_fnc%dim_1%SM = 1
14439.          seat_spectrum%aerosol%phf_fnc%dim_2%LB = 1
14439.          seat_spectrum%aerosol%phf_fnc%dim_2%EX = ( max( 0, (nd_phase_term%base_addr)(0) ) )
14439.          seat_spectrum%aerosol%phf_fnc%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14439.          seat_spectrum%aerosol%phf_fnc%dim_3%LB = 1
14439.          seat_spectrum%aerosol%phf_fnc%dim_3%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14439.          seat_spectrum%aerosol%phf_fnc%dim_3%SM = ( max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14439.          seat_spectrum%aerosol%phf_fnc%dim_4%LB = 1
14439.          seat_spectrum%aerosol%phf_fnc%dim_4%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14439.          seat_spectrum%aerosol%phf_fnc%dim_4%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14439.          $_allo_P7(0) = 0x1000000000001L
14439.          $_allo_P7(1) = loc( seat_spectrum%aerosol%phf_fnc )
14439.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
14439.       endif
14444.       $t_S2 = seat_spectrum%basic%n_band
14444.       i = 1
14444.       if ( seat_spectrum%basic%n_band > 0 ) then
14444.          $I_L14444_18 = 0
14444.          do
14444.             i = ( 1 + $I_L14444_18 )
14445.             $Unit_temp_O3 = iu_spc
14445.             t$6972 = _fread( _clist( 0, 1, 2, $Unit_temp_O3, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14445.             if ( t$6972 == 0 ) then
14445.                $Unit_temp_O4 = iu_spc
14445.                t$6972 = _fread( _clist( 0, 1, 0, $Unit_temp_O4, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
14445.                if ( t$6972 == 0 ) then
14446.                   if ( 1 < seat_spectrum%aerosol%abs%dim_1%LB .or. 0 >= seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1 ) then
14446.                       _substr(t$6974,1,13) = 'Rad_UKMO.f90'
14446.                       _substr(t$6975,1,4) = 'ABS'
14446.                      t$6966 = seat_spectrum%aerosol%abs%dim_1%LB
14446.                      t$6967 = seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1
14446.                      call _bounds_error(  _substr(t$6974,1,13), 14446,  _substr(t$6975,1,4), 1, t$6966, t$6967, 1, t$6973 )
14446.                   endif
14446.                   if ( i_species < seat_spectrum%aerosol%abs%dim_2%LB .or. i_species > seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1 ) then
14446.                       _substr(t$6977,1,13) = 'Rad_UKMO.f90'
14446.                       _substr(t$6978,1,4) = 'ABS'
14446.                      t$6968 = seat_spectrum%aerosol%abs%dim_2%LB
14446.                      t$6979 = seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1
14446.                      t$6980 = i_species
14446.                      call _bounds_error(  _substr(t$6977,1,13), 14446,  _substr(t$6978,1,4), 2, t$6968, t$6979, t$6980, t$6976 )
14446.                   endif
14446.                   if ( i < seat_spectrum%aerosol%abs%dim_3%LB .or. i > seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1 ) then
14446.                       _substr(t$6982,1,13) = 'Rad_UKMO.f90'
14446.                       _substr(t$6983,1,4) = 'ABS'
14446.                      t$6984 = seat_spectrum%aerosol%abs%dim_3%LB
14446.                      t$6985 = seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1
14446.                      t$6986 = i
14446.                      call _bounds_error(  _substr(t$6982,1,13), 14446,  _substr(t$6983,1,4), 3, t$6984, t$6985, t$6986, t$6981 )
14446.                   endif
14445.                   $Unit_temp_O5 = iu_spc
14445.                   t$6972 = _fread( _clist( 0, 1, 0, $Unit_temp_O5, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%abs%base_addr)(1, i_species, i, 0), 0x804060300000000L ) ) )
14445.                   if ( t$6972 == 0 ) then
14447.                      if ( 1 < seat_spectrum%aerosol%scat%dim_1%LB .or. 0 >= seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1 ) then
14447.                          _substr(t$6988,1,13) = 'Rad_UKMO.f90'
14447.                          _substr(t$6989,1,5) = 'SCAT'
14447.                         t$6990 = seat_spectrum%aerosol%scat%dim_1%LB
14447.                         t$6991 = seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1
14447.                         call _bounds_error(  _substr(t$6988,1,13), 14447,  _substr(t$6989,1,5), 1, t$6990, t$6991, 1, t$6987 )
14447.                      endif
14447.                      if ( i_species < seat_spectrum%aerosol%scat%dim_2%LB .or. i_species > seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1 ) then
14447.                          _substr(t$6993,1,13) = 'Rad_UKMO.f90'
14447.                          _substr(t$6994,1,5) = 'SCAT'
14447.                         t$6995 = seat_spectrum%aerosol%scat%dim_2%LB
14447.                         t$6996 = seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1
14447.                         t$6997 = i_species
14447.                         call _bounds_error(  _substr(t$6993,1,13), 14447,  _substr(t$6994,1,5), 2, t$6995, t$6996, t$6997, t$6992 )
14447.                      endif
14447.                      if ( i < seat_spectrum%aerosol%scat%dim_3%LB .or. i > seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1 ) then
14447.                          _substr(t$6999,1,13) = 'Rad_UKMO.f90'
14447.                          _substr(t$7000,1,5) = 'SCAT'
14447.                         t$7001 = seat_spectrum%aerosol%scat%dim_3%LB
14447.                         t$7002 = seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1
14447.                         t$7003 = i
14447.                         call _bounds_error(  _substr(t$6999,1,13), 14447,  _substr(t$7000,1,5), 3, t$7001, t$7002, t$7003, t$6998 )
14447.                      endif
14445.                      $Unit_temp_O8 = iu_spc
14445.                      t$6972 = _fread( _clist( 0, 1, 0, $Unit_temp_O8, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%scat%base_addr)(1, i_species, i, 0), 0x804060300000000L ) ) )
14445.                      if ( t$6972 == 0 ) then
14449.                         if ( i_species < seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB .or. i_species > seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1 ) then
14449.                             _substr(t$7005,1,13) = 'Rad_UKMO.f90'
14449.                             _substr(t$7006,1,19) = 'N_AEROSOL_PHF_TERM'
14449.                            t$7007 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB
14449.                            t$7008 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1
14449.                            t$7009 = i_species
14449.                            call _bounds_error(  _substr(t$7005,1,13), 14449,  _substr(t$7006,1,19), 1, t$7007, t$7008, t$7009, t$7004 )
14449.                         endif
14445.                         $t_S1 = (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0)
14445.                         if ( $t_S1 > 0 ) then
14445.                            $I_L14445_14 = 0
14445.                            do
14448.                               if ( 1 < seat_spectrum%aerosol%phf_fnc%dim_1%LB .or. 0 >= seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1 ) then
14448.                                   _substr(t$7014,1,13) = 'Rad_UKMO.f90'
14448.                                   _substr(t$7015,1,8) = 'PHF_FNC'
14448.                                  t$7016 = seat_spectrum%aerosol%phf_fnc%dim_1%LB
14448.                                  t$7017 = seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1
14448.                                  call _bounds_error(  _substr(t$7014,1,13), 14448,  _substr(t$7015,1,8), 1, t$7016, t$7017, 1, t$7013 )
14448.                               endif
14448.                               if ( ( 1 + $I_L14445_14 ) < seat_spectrum%aerosol%phf_fnc%dim_2%LB .or. ( 1 + $I_L14445_14 ) > seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1 ) then
14448.                                   _substr(t$7019,1,13) = 'Rad_UKMO.f90'
14448.                                   _substr(t$7020,1,8) = 'PHF_FNC'
14448.                                  t$7021 = seat_spectrum%aerosol%phf_fnc%dim_2%LB
14448.                                  t$7022 = seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1
14448.                                  t$7023 = 1 + $I_L14445_14
14448.                                  call _bounds_error(  _substr(t$7019,1,13), 14448,  _substr(t$7020,1,8), 2, t$7021, t$7022, t$7023, t$7018 )
14448.                               endif
14448.                               if ( i_species < seat_spectrum%aerosol%phf_fnc%dim_3%LB .or. i_species > seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1 ) then
14448.                                   _substr(t$7025,1,13) = 'Rad_UKMO.f90'
14448.                                   _substr(t$7026,1,8) = 'PHF_FNC'
14448.                                  t$7027 = seat_spectrum%aerosol%phf_fnc%dim_3%LB
14448.                                  t$7028 = seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1
14448.                                  t$7029 = i_species
14448.                                  call _bounds_error(  _substr(t$7025,1,13), 14448,  _substr(t$7026,1,8), 3, t$7027, t$7028, t$7029, t$7024 )
14448.                               endif
14448.                               if ( i < seat_spectrum%aerosol%phf_fnc%dim_4%LB .or. i > seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1 ) then
14448.                                   _substr(t$7031,1,13) = 'Rad_UKMO.f90'
14448.                                   _substr(t$7032,1,8) = 'PHF_FNC'
14448.                                  t$7033 = seat_spectrum%aerosol%phf_fnc%dim_4%LB
14448.                                  t$7034 = seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1
14448.                                  t$7035 = i
14448.                                  call _bounds_error(  _substr(t$7031,1,13), 14448,  _substr(t$7032,1,8), 4, t$7033, t$7034, t$7035, t$7030 )
14448.                               endif
14445.                               $Unit_temp_O11 = iu_spc
14445.                               t$6972 = _fread( _clist( 0, 1, 0, $Unit_temp_O11, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%phf_fnc%base_addr)(1, 1 + $I_L14445_14, i_species, i, 0), 0x804060300000000L ) ) )
14445.                               if ( t$6972 /= 0 ) goto 20
14445.                               $I_L14445_14 = 1 + $I_L14445_14
14445.                               if ( $I_L14445_14 >= $t_S1 ) exit
14445.                            enddo
14445.                            goto 10
14445.                         else
14445.    10                      continue
14445.                            $Unit_temp_O15 = iu_spc
14445.                            t$6972 = _fread( _clist( 0, 1, 1, $Unit_temp_O15, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14445.                         endif
14445.                      endif
14445.                   endif
14445.                endif
14445.             endif
14445.    20       continue
14450.             if ( ios /= 0 ) then
14451.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$647,  _substr(t$646,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_11_0_2', 0x800600000000L ) ) )
14453.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$649,  _substr(t$648,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Dry aerosol scattering data are not in the correct format.', 0x800600000000L ) ) )
14455.                seat_ierr = 1
14455.                goto 40
14455.             endif
14458.             $I_L14444_18 = 1 + $I_L14444_18
14458.             if ( $I_L14444_18 >= $t_S2 ) exit
14458.          enddo
14458.          i = ( 1 + $t_S2 )
14458.          goto 30
14458.       else
14458.    30    continue
14459.          (seat_spectrum%aerosol%nhumidity%base_addr)(i_species, 0) = 0
14460.          if ( (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0) == 1 ) then
14461.             (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_species, 0) = 1
14462.          else if ( (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0) > 1 ) then
14463.             (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_species, 0) = 4
14463.          endif
14467.          (seat_spectrum%aerosol%l_aero_spec%base_addr)(i_species, 0) = .true.
14467.       endif
14467.    40 continue
14472.       return
14472.       end
14472.       
14477.       
14477.       subroutine read_block_11_1_0_int
14490.       (nd_phase_term%base_addr)(0) = 1
14491.       if ( seat_spectrum%aerosol%l_aero_spec%header%assoc /= 1 ) then
14492.          seat_spectrum%aerosol%l_aero_spec%header%a_contig = 1
14492.          seat_spectrum%aerosol%l_aero_spec%dim_1%LB = 1
14492.          seat_spectrum%aerosol%l_aero_spec%dim_1%EX = _zla( 0, (nd_aerosol_species%base_addr)(0) )
14492.          seat_spectrum%aerosol%l_aero_spec%dim_1%SM = 1
14492.          $_allo_P0(0) = 0x1000000000001L
14492.          $_allo_P0(1) = loc( seat_spectrum%aerosol%l_aero_spec )
14492.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
14493.          $F_A34 = (nd_aerosol_species%base_addr)(0)
14493.          if ( (nd_aerosol_species%base_addr)(0) > 0 ) then
14493.             $SC_spectrum_I1 = seat_spectrum%aerosol%l_aero_spec%dim_1%EX
14493.             $I_L14493_16 = 0
14493. !dir$ ivdep
14493.             do
14493.                (seat_spectrum%aerosol%l_aero_spec%base_addr)(1 + $I_L14493_16, 0) = .false.
14493.                $I_L14493_16 = 1 + $I_L14493_16
14493.                if ( $I_L14493_16 >= $F_A34 ) exit
14493.             enddo
14493.          endif
14494.          seat_spectrum%aerosol%i_aerosol_parm%header%a_contig = 1
14494.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%LB = 1
14494.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14494.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%SM = 1
14494.          $_allo_P1(0) = 0x1000000000001L
14494.          $_allo_P1(1) = loc( seat_spectrum%aerosol%i_aerosol_parm )
14494.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14495.          seat_spectrum%aerosol%n_aerosol_phf_term%header%a_contig = 1
14495.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB = 1
14495.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14495.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%SM = 1
14495.          $_allo_P2(0) = 0x1000000000001L
14495.          $_allo_P2(1) = loc( seat_spectrum%aerosol%n_aerosol_phf_term )
14495.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14496.          seat_spectrum%aerosol%nhumidity%header%a_contig = 1
14496.          seat_spectrum%aerosol%nhumidity%dim_1%LB = 1
14496.          seat_spectrum%aerosol%nhumidity%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14496.          seat_spectrum%aerosol%nhumidity%dim_1%SM = 1
14496.          $_allo_P3(0) = 0x1000000000001L
14496.          $_allo_P3(1) = loc( seat_spectrum%aerosol%nhumidity )
14496.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14497.          seat_spectrum%aerosol%humidities%header%a_contig = 1
14497.          seat_spectrum%aerosol%humidities%dim_1%LB = 1
14497.          seat_spectrum%aerosol%humidities%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14497.          seat_spectrum%aerosol%humidities%dim_1%SM = 1
14497.          seat_spectrum%aerosol%humidities%dim_2%LB = 1
14497.          seat_spectrum%aerosol%humidities%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14497.          seat_spectrum%aerosol%humidities%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14497.          $_allo_P4(0) = 0x1000000000001L
14497.          $_allo_P4(1) = loc( seat_spectrum%aerosol%humidities )
14497.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14497.       endif
14500.       $Unit_temp_O0 = iu_spc
14500.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$651,  _substr(t$650,1,13), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i_component, 0x2000200000000L ) ) )
14501.       if ( i_component < seat_spectrum%aerosol%nhumidity%dim_1%LB .or. i_component > seat_spectrum%aerosol%nhumidity%dim_1%LB + seat_spectrum%aerosol%nhumidity%dim_1%EX + -1 ) then
14501.           _substr(t$7037,1,13) = 'Rad_UKMO.f90'
14501.           _substr(t$7038,1,10) = 'NHUMIDITY'
14501.          t$7039 = seat_spectrum%aerosol%nhumidity%dim_1%LB
14501.          t$7040 = seat_spectrum%aerosol%nhumidity%dim_1%LB + seat_spectrum%aerosol%nhumidity%dim_1%EX + -1
14501.          t$7041 = i_component
14501.          call _bounds_error(  _substr(t$7037,1,13), 14501,  _substr(t$7038,1,10), 1, t$7039, t$7040, t$7041, t$7036 )
14501.       endif
14501.       $Unit_temp_O1 = iu_spc
14501.       _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$653,  _substr(t$652,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%nhumidity%base_addr)(i_component, 0), 0x2000200000000L ) ) )
14505.       if ( seat_spectrum%aerosol%abs%header%assoc /= 1 ) then
14506.          seat_spectrum%aerosol%abs%header%a_contig = 1
14506.          seat_spectrum%aerosol%abs%dim_1%LB = 1
14506.          seat_spectrum%aerosol%abs%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14506.          seat_spectrum%aerosol%abs%dim_1%SM = 1
14506.          seat_spectrum%aerosol%abs%dim_2%LB = 1
14506.          seat_spectrum%aerosol%abs%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14506.          seat_spectrum%aerosol%abs%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14506.          seat_spectrum%aerosol%abs%dim_3%LB = 1
14506.          seat_spectrum%aerosol%abs%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14506.          seat_spectrum%aerosol%abs%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14506.          $_allo_P5(0) = 0x1000000000001L
14506.          $_allo_P5(1) = loc( seat_spectrum%aerosol%abs )
14506.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14508.          seat_spectrum%aerosol%scat%header%a_contig = 1
14508.          seat_spectrum%aerosol%scat%dim_1%LB = 1
14508.          seat_spectrum%aerosol%scat%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14508.          seat_spectrum%aerosol%scat%dim_1%SM = 1
14508.          seat_spectrum%aerosol%scat%dim_2%LB = 1
14508.          seat_spectrum%aerosol%scat%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14508.          seat_spectrum%aerosol%scat%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14508.          seat_spectrum%aerosol%scat%dim_3%LB = 1
14508.          seat_spectrum%aerosol%scat%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14508.          seat_spectrum%aerosol%scat%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14508.          $_allo_P6(0) = 0x1000000000001L
14508.          $_allo_P6(1) = loc( seat_spectrum%aerosol%scat )
14508.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14510.          seat_spectrum%aerosol%phf_fnc%header%a_contig = 1
14510.          seat_spectrum%aerosol%phf_fnc%dim_1%LB = 1
14510.          seat_spectrum%aerosol%phf_fnc%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14510.          seat_spectrum%aerosol%phf_fnc%dim_1%SM = 1
14510.          seat_spectrum%aerosol%phf_fnc%dim_2%LB = 1
14510.          seat_spectrum%aerosol%phf_fnc%dim_2%EX = ( max( 0, (nd_phase_term%base_addr)(0) ) )
14510.          seat_spectrum%aerosol%phf_fnc%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14510.          seat_spectrum%aerosol%phf_fnc%dim_3%LB = 1
14510.          seat_spectrum%aerosol%phf_fnc%dim_3%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14510.          seat_spectrum%aerosol%phf_fnc%dim_3%SM = ( max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14510.          seat_spectrum%aerosol%phf_fnc%dim_4%LB = 1
14510.          seat_spectrum%aerosol%phf_fnc%dim_4%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14510.          seat_spectrum%aerosol%phf_fnc%dim_4%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14510.          $_allo_P7(0) = 0x1000000000001L
14510.          $_allo_P7(1) = loc( seat_spectrum%aerosol%phf_fnc )
14510.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
14510.       endif
14515.       $t_S2 = seat_spectrum%basic%n_band
14515.       i = 1
14515.       if ( seat_spectrum%basic%n_band > 0 ) then
14515.          $I_L14515_18 = 0
14515.          do
14515.             i = ( 1 + $I_L14515_18 )
14516.             $Unit_temp_O3 = iu_spc
14516.             _fread( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$655,  _substr(t$654,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14517.             $t_S1 = (seat_spectrum%aerosol%nhumidity%base_addr)(i_component, 0)
14517.             if ( $t_S1 > 0 ) then
14517.                $I_L14517_14 = 0
14517.                do
14518.                   $Unit_temp_O4 = iu_spc
14518.                   t$7048 = _fread( _clist( 0, 1, 2, $Unit_temp_O4, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14518.                   if ( t$7048 == 0 ) then
14519.                      if ( ( 1 + $I_L14517_14 ) < seat_spectrum%aerosol%humidities%dim_1%LB .or. ( 1 + $I_L14517_14 ) > seat_spectrum%aerosol%humidities%dim_1%LB + seat_spectrum%aerosol%humidities%dim_1%EX + -1 ) then
14519.                          _substr(t$7050,1,13) = 'Rad_UKMO.f90'
14519.                          _substr(t$7051,1,11) = 'HUMIDITIES'
14519.                         t$7039 = seat_spectrum%aerosol%humidities%dim_1%LB
14519.                         t$7040 = seat_spectrum%aerosol%humidities%dim_1%LB + seat_spectrum%aerosol%humidities%dim_1%EX + -1
14519.                         t$7041 = 1 + $I_L14517_14
14519.                         call _bounds_error(  _substr(t$7050,1,13), 14519,  _substr(t$7051,1,11), 1, t$7039, t$7040, t$7041, t$7049 )
14519.                      endif
14519.                      if ( i_component < seat_spectrum%aerosol%humidities%dim_2%LB .or. i_component > seat_spectrum%aerosol%humidities%dim_2%LB + seat_spectrum%aerosol%humidities%dim_2%EX + -1 ) then
14519.                          _substr(t$7053,1,13) = 'Rad_UKMO.f90'
14519.                          _substr(t$7054,1,11) = 'HUMIDITIES'
14519.                         t$7055 = seat_spectrum%aerosol%humidities%dim_2%LB
14519.                         t$7056 = seat_spectrum%aerosol%humidities%dim_2%LB + seat_spectrum%aerosol%humidities%dim_2%EX + -1
14519.                         t$7057 = i_component
14519.                         call _bounds_error(  _substr(t$7053,1,13), 14519,  _substr(t$7054,1,11), 2, t$7055, t$7056, t$7057, t$7052 )
14519.                      endif
14518.                      $Unit_temp_O5 = iu_spc
14518.                      t$7048 = _fread( _clist( 0, 1, 0, $Unit_temp_O5, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%humidities%base_addr)(1 + $I_L14517_14, i_component, 0), 0x804060300000000L ) ) )
14518.                      if ( t$7048 == 0 ) then
14520.                         if ( ( 1 + $I_L14517_14 ) < seat_spectrum%aerosol%abs%dim_1%LB .or. ( 1 + $I_L14517_14 ) > seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1 ) then
14520.                             _substr(t$7059,1,13) = 'Rad_UKMO.f90'
14520.                             _substr(t$7060,1,4) = 'ABS'
14520.                            t$7061 = seat_spectrum%aerosol%abs%dim_1%LB
14520.                            t$7062 = seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1
14520.                            t$7063 = 1 + $I_L14517_14
14520.                            call _bounds_error(  _substr(t$7059,1,13), 14520,  _substr(t$7060,1,4), 1, t$7061, t$7062, t$7063, t$7058 )
14520.                         endif
14520.                         if ( i_component < seat_spectrum%aerosol%abs%dim_2%LB .or. i_component > seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1 ) then
14520.                             _substr(t$7065,1,13) = 'Rad_UKMO.f90'
14520.                             _substr(t$7066,1,4) = 'ABS'
14520.                            t$7067 = seat_spectrum%aerosol%abs%dim_2%LB
14520.                            t$7068 = seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1
14520.                            t$7069 = i_component
14520.                            call _bounds_error(  _substr(t$7065,1,13), 14520,  _substr(t$7066,1,4), 2, t$7067, t$7068, t$7069, t$7064 )
14520.                         endif
14520.                         if ( i < seat_spectrum%aerosol%abs%dim_3%LB .or. i > seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1 ) then
14520.                             _substr(t$7071,1,13) = 'Rad_UKMO.f90'
14520.                             _substr(t$7072,1,4) = 'ABS'
14520.                            t$7073 = seat_spectrum%aerosol%abs%dim_3%LB
14520.                            t$7074 = seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1
14520.                            t$7075 = i
14520.                            call _bounds_error(  _substr(t$7071,1,13), 14520,  _substr(t$7072,1,4), 3, t$7073, t$7074, t$7075, t$7070 )
14520.                         endif
14518.                         $Unit_temp_O7 = iu_spc
14518.                         t$7048 = _fread( _clist( 0, 1, 0, $Unit_temp_O7, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%abs%base_addr)(1 + $I_L14517_14, i_component, i, 0), 0x804060300000000L ) ) )
14518.                         if ( t$7048 == 0 ) then
14521.                            if ( ( 1 + $I_L14517_14 ) < seat_spectrum%aerosol%scat%dim_1%LB .or. ( 1 + $I_L14517_14 ) > seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1 ) then
14521.                                _substr(t$7077,1,13) = 'Rad_UKMO.f90'
14521.                                _substr(t$7078,1,5) = 'SCAT'
14521.                               t$7079 = seat_spectrum%aerosol%scat%dim_1%LB
14521.                               t$7080 = seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1
14521.                               t$7081 = 1 + $I_L14517_14
14521.                               call _bounds_error(  _substr(t$7077,1,13), 14521,  _substr(t$7078,1,5), 1, t$7079, t$7080, t$7081, t$7076 )
14521.                            endif
14521.                            if ( i_component < seat_spectrum%aerosol%scat%dim_2%LB .or. i_component > seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1 ) then
14521.                                _substr(t$7083,1,13) = 'Rad_UKMO.f90'
14521.                                _substr(t$7084,1,5) = 'SCAT'
14521.                               t$7085 = seat_spectrum%aerosol%scat%dim_2%LB
14521.                               t$7086 = seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1
14521.                               t$7087 = i_component
14521.                               call _bounds_error(  _substr(t$7083,1,13), 14521,  _substr(t$7084,1,5), 2, t$7085, t$7086, t$7087, t$7082 )
14521.                            endif
14521.                            if ( i < seat_spectrum%aerosol%scat%dim_3%LB .or. i > seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1 ) then
14521.                                _substr(t$7089,1,13) = 'Rad_UKMO.f90'
14521.                                _substr(t$7090,1,5) = 'SCAT'
14521.                               t$7091 = seat_spectrum%aerosol%scat%dim_3%LB
14521.                               t$7092 = seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1
14521.                               t$7093 = i
14521.                               call _bounds_error(  _substr(t$7089,1,13), 14521,  _substr(t$7090,1,5), 3, t$7091, t$7092, t$7093, t$7088 )
14521.                            endif
14518.                            $Unit_temp_O10 = iu_spc
14518.                            t$7048 = _fread( _clist( 0, 1, 0, $Unit_temp_O10, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%scat%base_addr)(1 + $I_L14517_14, i_component, i, 0), 0x804060300000000L ) ) )
14518.                            if ( t$7048 == 0 ) then
14522.                               if ( ( 1 + $I_L14517_14 ) < seat_spectrum%aerosol%phf_fnc%dim_1%LB .or. ( 1 + $I_L14517_14 ) > seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1 ) then
14522.                                   _substr(t$7095,1,13) = 'Rad_UKMO.f90'
14522.                                   _substr(t$7096,1,8) = 'PHF_FNC'
14522.                                  t$7097 = seat_spectrum%aerosol%phf_fnc%dim_1%LB
14522.                                  t$7098 = seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1
14522.                                  t$7099 = 1 + $I_L14517_14
14522.                                  call _bounds_error(  _substr(t$7095,1,13), 14522,  _substr(t$7096,1,8), 1, t$7097, t$7098, t$7099, t$7094 )
14522.                               endif
14522.                               if ( 1 < seat_spectrum%aerosol%phf_fnc%dim_2%LB .or. 0 >= seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1 ) then
14522.                                   _substr(t$7101,1,13) = 'Rad_UKMO.f90'
14522.                                   _substr(t$7102,1,8) = 'PHF_FNC'
14522.                                  t$7103 = seat_spectrum%aerosol%phf_fnc%dim_2%LB
14522.                                  t$7104 = seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1
14522.                                  call _bounds_error(  _substr(t$7101,1,13), 14522,  _substr(t$7102,1,8), 2, t$7103, t$7104, 1, t$7100 )
14522.                               endif
14522.                               if ( i_component < seat_spectrum%aerosol%phf_fnc%dim_3%LB .or. i_component > seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1 ) then
14522.                                   _substr(t$7106,1,13) = 'Rad_UKMO.f90'
14522.                                   _substr(t$7107,1,8) = 'PHF_FNC'
14522.                                  t$7108 = seat_spectrum%aerosol%phf_fnc%dim_3%LB
14522.                                  t$7109 = seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1
14522.                                  t$7110 = i_component
14522.                                  call _bounds_error(  _substr(t$7106,1,13), 14522,  _substr(t$7107,1,8), 3, t$7108, t$7109, t$7110, t$7105 )
14522.                               endif
14522.                               if ( i < seat_spectrum%aerosol%phf_fnc%dim_4%LB .or. i > seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1 ) then
14522.                                   _substr(t$7112,1,13) = 'Rad_UKMO.f90'
14522.                                   _substr(t$7113,1,8) = 'PHF_FNC'
14522.                                  t$7114 = seat_spectrum%aerosol%phf_fnc%dim_4%LB
14522.                                  t$7115 = seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1
14522.                                  t$7116 = i
14522.                                  call _bounds_error(  _substr(t$7112,1,13), 14522,  _substr(t$7113,1,8), 4, t$7114, t$7115, t$7116, t$7111 )
14522.                               endif
14518.                               $Unit_temp_O13 = iu_spc
14518.                               t$7048 = _fread( _clist( 0, 1, 0, $Unit_temp_O13, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%phf_fnc%base_addr)(1 + $I_L14517_14, 1, i_component, i, 0), 0x804060300000000L ) ) )
14518.                               if ( t$7048 == 0 ) then
14518.                                  $Unit_temp_O16 = iu_spc
14518.                                  t$7048 = _fread( _clist( 0, 1, 1, $Unit_temp_O16, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14518.                               endif
14518.                            endif
14518.                         endif
14518.                      endif
14518.                   endif
14523.                   if ( ios /= 0 ) then
14524.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$657,  _substr(t$656,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_11_1_0', 0x800600000000L ) ) )
14526.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$659,  _substr(t$658,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Moist aerosol scattering data are not in the correct format.', 0x800600000000L ) ) )
14528.                      seat_ierr = 1
14528.                      goto 20
14528.                   endif
14531.                   $I_L14517_14 = 1 + $I_L14517_14
14531.                   if ( $I_L14517_14 >= $t_S1 ) exit
14531.                enddo
14532.                $I_L14515_18 = 1 + $I_L14515_18
14531.             else
14531.             endif
14531.             if ( $I_L14515_18 >= $t_S2 ) exit
14531.          enddo
14532.          i = ( 1 + $t_S2 )
14532.          goto 10
14532.       else
14532.    10    continue
14534.          (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_component, 0) = 2
14535.          (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_component, 0) = 1
14539.          (seat_spectrum%aerosol%l_aero_spec%base_addr)(i_component, 0) = .true.
14539.       endif
14539.    20 continue
14544.       return
14544.       end
14544.       
14549.       
14549.       subroutine read_block_11_1_1_int
14560.       (nd_phase_term%base_addr)(0) = 1
14561.       if ( seat_spectrum%aerosol%l_aero_spec%header%assoc /= 1 ) then
14562.          seat_spectrum%aerosol%l_aero_spec%header%a_contig = 1
14562.          seat_spectrum%aerosol%l_aero_spec%dim_1%LB = 1
14562.          seat_spectrum%aerosol%l_aero_spec%dim_1%EX = _zla( 0, (nd_aerosol_species%base_addr)(0) )
14562.          seat_spectrum%aerosol%l_aero_spec%dim_1%SM = 1
14562.          $_allo_P0(0) = 0x1000000000001L
14562.          $_allo_P0(1) = loc( seat_spectrum%aerosol%l_aero_spec )
14562.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
14563.          $F_A34 = (nd_aerosol_species%base_addr)(0)
14563.          if ( (nd_aerosol_species%base_addr)(0) > 0 ) then
14563.             $SC_spectrum_I1 = seat_spectrum%aerosol%l_aero_spec%dim_1%EX
14563.             $I_L14563_16 = 0
14563. !dir$ ivdep
14563.             do
14563.                (seat_spectrum%aerosol%l_aero_spec%base_addr)(1 + $I_L14563_16, 0) = .false.
14563.                $I_L14563_16 = 1 + $I_L14563_16
14563.                if ( $I_L14563_16 >= $F_A34 ) exit
14563.             enddo
14563.          endif
14564.          seat_spectrum%aerosol%i_aerosol_parm%header%a_contig = 1
14564.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%LB = 1
14564.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14564.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%SM = 1
14564.          $_allo_P1(0) = 0x1000000000001L
14564.          $_allo_P1(1) = loc( seat_spectrum%aerosol%i_aerosol_parm )
14564.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14565.          seat_spectrum%aerosol%n_aerosol_phf_term%header%a_contig = 1
14565.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB = 1
14565.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14565.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%SM = 1
14565.          $_allo_P2(0) = 0x1000000000001L
14565.          $_allo_P2(1) = loc( seat_spectrum%aerosol%n_aerosol_phf_term )
14565.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14566.          seat_spectrum%aerosol%nhumidity%header%a_contig = 1
14566.          seat_spectrum%aerosol%nhumidity%dim_1%LB = 1
14566.          seat_spectrum%aerosol%nhumidity%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14566.          seat_spectrum%aerosol%nhumidity%dim_1%SM = 1
14566.          $_allo_P3(0) = 0x1000000000001L
14566.          $_allo_P3(1) = loc( seat_spectrum%aerosol%nhumidity )
14566.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14567.          seat_spectrum%aerosol%humidities%header%a_contig = 1
14567.          seat_spectrum%aerosol%humidities%dim_1%LB = 1
14567.          seat_spectrum%aerosol%humidities%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14567.          seat_spectrum%aerosol%humidities%dim_1%SM = 1
14567.          seat_spectrum%aerosol%humidities%dim_2%LB = 1
14567.          seat_spectrum%aerosol%humidities%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14567.          seat_spectrum%aerosol%humidities%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14567.          $_allo_P4(0) = 0x1000000000001L
14567.          $_allo_P4(1) = loc( seat_spectrum%aerosol%humidities )
14567.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14567.       endif
14570.       $Unit_temp_O0 = iu_spc
14570.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$661,  _substr(t$660,1,13), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i_species, 0x2000200000000L ) ) )
14571.       if ( i_species < seat_spectrum%aerosol%nhumidity%dim_1%LB .or. i_species > seat_spectrum%aerosol%nhumidity%dim_1%LB + seat_spectrum%aerosol%nhumidity%dim_1%EX + -1 ) then
14571.           _substr(t$7118,1,13) = 'Rad_UKMO.f90'
14571.           _substr(t$7119,1,10) = 'NHUMIDITY'
14571.          t$7120 = seat_spectrum%aerosol%nhumidity%dim_1%LB
14571.          t$7121 = seat_spectrum%aerosol%nhumidity%dim_1%LB + seat_spectrum%aerosol%nhumidity%dim_1%EX + -1
14571.          t$7122 = i_species
14571.          call _bounds_error(  _substr(t$7118,1,13), 14571,  _substr(t$7119,1,10), 1, t$7120, t$7121, t$7122, t$7117 )
14571.       endif
14571.       $Unit_temp_O1 = iu_spc
14571.       _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$663,  _substr(t$662,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%nhumidity%base_addr)(i_species, 0), 0x2000200000000L ) ) )
14575.       if ( seat_spectrum%aerosol%abs%header%assoc /= 1 ) then
14576.          seat_spectrum%aerosol%abs%header%a_contig = 1
14576.          seat_spectrum%aerosol%abs%dim_1%LB = 1
14576.          seat_spectrum%aerosol%abs%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14576.          seat_spectrum%aerosol%abs%dim_1%SM = 1
14576.          seat_spectrum%aerosol%abs%dim_2%LB = 1
14576.          seat_spectrum%aerosol%abs%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14576.          seat_spectrum%aerosol%abs%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14576.          seat_spectrum%aerosol%abs%dim_3%LB = 1
14576.          seat_spectrum%aerosol%abs%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14576.          seat_spectrum%aerosol%abs%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14576.          $_allo_P5(0) = 0x1000000000001L
14576.          $_allo_P5(1) = loc( seat_spectrum%aerosol%abs )
14576.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14578.          seat_spectrum%aerosol%scat%header%a_contig = 1
14578.          seat_spectrum%aerosol%scat%dim_1%LB = 1
14578.          seat_spectrum%aerosol%scat%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14578.          seat_spectrum%aerosol%scat%dim_1%SM = 1
14578.          seat_spectrum%aerosol%scat%dim_2%LB = 1
14578.          seat_spectrum%aerosol%scat%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14578.          seat_spectrum%aerosol%scat%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14578.          seat_spectrum%aerosol%scat%dim_3%LB = 1
14578.          seat_spectrum%aerosol%scat%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14578.          seat_spectrum%aerosol%scat%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14578.          $_allo_P6(0) = 0x1000000000001L
14578.          $_allo_P6(1) = loc( seat_spectrum%aerosol%scat )
14578.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14580.          seat_spectrum%aerosol%phf_fnc%header%a_contig = 1
14580.          seat_spectrum%aerosol%phf_fnc%dim_1%LB = 1
14580.          seat_spectrum%aerosol%phf_fnc%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14580.          seat_spectrum%aerosol%phf_fnc%dim_1%SM = 1
14580.          seat_spectrum%aerosol%phf_fnc%dim_2%LB = 1
14580.          seat_spectrum%aerosol%phf_fnc%dim_2%EX = ( max( 0, (nd_phase_term%base_addr)(0) ) )
14580.          seat_spectrum%aerosol%phf_fnc%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14580.          seat_spectrum%aerosol%phf_fnc%dim_3%LB = 1
14580.          seat_spectrum%aerosol%phf_fnc%dim_3%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14580.          seat_spectrum%aerosol%phf_fnc%dim_3%SM = ( max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14580.          seat_spectrum%aerosol%phf_fnc%dim_4%LB = 1
14580.          seat_spectrum%aerosol%phf_fnc%dim_4%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14580.          seat_spectrum%aerosol%phf_fnc%dim_4%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14580.          $_allo_P7(0) = 0x1000000000001L
14580.          $_allo_P7(1) = loc( seat_spectrum%aerosol%phf_fnc )
14580.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
14580.       endif
14586.       $t_S2 = seat_spectrum%basic%n_band
14586.       i = 1
14586.       if ( seat_spectrum%basic%n_band > 0 ) then
14586.          $I_L14586_18 = 0
14586.          do
14586.             i = ( 1 + $I_L14586_18 )
14587.             $Unit_temp_O3 = iu_spc
14587.             _fread( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$665,  _substr(t$664,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14588.             $t_S1 = (seat_spectrum%aerosol%nhumidity%base_addr)(i_species, 0)
14588.             if ( $t_S1 > 0 ) then
14588.                $I_L14588_14 = 0
14588.                do
14589.                   $Unit_temp_O4 = iu_spc
14589.                   t$7129 = _fread( _clist( 0, 1, 2, $Unit_temp_O4, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14589.                   if ( t$7129 == 0 ) then
14590.                      if ( ( 1 + $I_L14588_14 ) < seat_spectrum%aerosol%humidities%dim_1%LB .or. ( 1 + $I_L14588_14 ) > seat_spectrum%aerosol%humidities%dim_1%LB + seat_spectrum%aerosol%humidities%dim_1%EX + -1 ) then
14590.                          _substr(t$7131,1,13) = 'Rad_UKMO.f90'
14590.                          _substr(t$7132,1,11) = 'HUMIDITIES'
14590.                         t$7120 = seat_spectrum%aerosol%humidities%dim_1%LB
14590.                         t$7121 = seat_spectrum%aerosol%humidities%dim_1%LB + seat_spectrum%aerosol%humidities%dim_1%EX + -1
14590.                         t$7122 = 1 + $I_L14588_14
14590.                         call _bounds_error(  _substr(t$7131,1,13), 14590,  _substr(t$7132,1,11), 1, t$7120, t$7121, t$7122, t$7130 )
14590.                      endif
14590.                      if ( i_species < seat_spectrum%aerosol%humidities%dim_2%LB .or. i_species > seat_spectrum%aerosol%humidities%dim_2%LB + seat_spectrum%aerosol%humidities%dim_2%EX + -1 ) then
14590.                          _substr(t$7134,1,13) = 'Rad_UKMO.f90'
14590.                          _substr(t$7135,1,11) = 'HUMIDITIES'
14590.                         t$7136 = seat_spectrum%aerosol%humidities%dim_2%LB
14590.                         t$7137 = seat_spectrum%aerosol%humidities%dim_2%LB + seat_spectrum%aerosol%humidities%dim_2%EX + -1
14590.                         t$7138 = i_species
14590.                         call _bounds_error(  _substr(t$7134,1,13), 14590,  _substr(t$7135,1,11), 2, t$7136, t$7137, t$7138, t$7133 )
14590.                      endif
14589.                      $Unit_temp_O5 = iu_spc
14589.                      t$7129 = _fread( _clist( 0, 1, 0, $Unit_temp_O5, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%humidities%base_addr)(1 + $I_L14588_14, i_species, 0), 0x804060300000000L ) ) )
14589.                      if ( t$7129 == 0 ) then
14591.                         if ( ( 1 + $I_L14588_14 ) < seat_spectrum%aerosol%abs%dim_1%LB .or. ( 1 + $I_L14588_14 ) > seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1 ) then
14591.                             _substr(t$7140,1,13) = 'Rad_UKMO.f90'
14591.                             _substr(t$7141,1,4) = 'ABS'
14591.                            t$7142 = seat_spectrum%aerosol%abs%dim_1%LB
14591.                            t$7143 = seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1
14591.                            t$7144 = 1 + $I_L14588_14
14591.                            call _bounds_error(  _substr(t$7140,1,13), 14591,  _substr(t$7141,1,4), 1, t$7142, t$7143, t$7144, t$7139 )
14591.                         endif
14591.                         if ( i_species < seat_spectrum%aerosol%abs%dim_2%LB .or. i_species > seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1 ) then
14591.                             _substr(t$7146,1,13) = 'Rad_UKMO.f90'
14591.                             _substr(t$7147,1,4) = 'ABS'
14591.                            t$7148 = seat_spectrum%aerosol%abs%dim_2%LB
14591.                            t$7149 = seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1
14591.                            t$7150 = i_species
14591.                            call _bounds_error(  _substr(t$7146,1,13), 14591,  _substr(t$7147,1,4), 2, t$7148, t$7149, t$7150, t$7145 )
14591.                         endif
14591.                         if ( i < seat_spectrum%aerosol%abs%dim_3%LB .or. i > seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1 ) then
14591.                             _substr(t$7152,1,13) = 'Rad_UKMO.f90'
14591.                             _substr(t$7153,1,4) = 'ABS'
14591.                            t$7154 = seat_spectrum%aerosol%abs%dim_3%LB
14591.                            t$7155 = seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1
14591.                            t$7156 = i
14591.                            call _bounds_error(  _substr(t$7152,1,13), 14591,  _substr(t$7153,1,4), 3, t$7154, t$7155, t$7156, t$7151 )
14591.                         endif
14589.                         $Unit_temp_O7 = iu_spc
14589.                         t$7129 = _fread( _clist( 0, 1, 0, $Unit_temp_O7, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%abs%base_addr)(1 + $I_L14588_14, i_species, i, 0), 0x804060300000000L ) ) )
14589.                         if ( t$7129 == 0 ) then
14592.                            if ( ( 1 + $I_L14588_14 ) < seat_spectrum%aerosol%scat%dim_1%LB .or. ( 1 + $I_L14588_14 ) > seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1 ) then
14592.                                _substr(t$7158,1,13) = 'Rad_UKMO.f90'
14592.                                _substr(t$7159,1,5) = 'SCAT'
14592.                               t$7160 = seat_spectrum%aerosol%scat%dim_1%LB
14592.                               t$7161 = seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1
14592.                               t$7162 = 1 + $I_L14588_14
14592.                               call _bounds_error(  _substr(t$7158,1,13), 14592,  _substr(t$7159,1,5), 1, t$7160, t$7161, t$7162, t$7157 )
14592.                            endif
14592.                            if ( i_species < seat_spectrum%aerosol%scat%dim_2%LB .or. i_species > seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1 ) then
14592.                                _substr(t$7164,1,13) = 'Rad_UKMO.f90'
14592.                                _substr(t$7165,1,5) = 'SCAT'
14592.                               t$7166 = seat_spectrum%aerosol%scat%dim_2%LB
14592.                               t$7167 = seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1
14592.                               t$7168 = i_species
14592.                               call _bounds_error(  _substr(t$7164,1,13), 14592,  _substr(t$7165,1,5), 2, t$7166, t$7167, t$7168, t$7163 )
14592.                            endif
14592.                            if ( i < seat_spectrum%aerosol%scat%dim_3%LB .or. i > seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1 ) then
14592.                                _substr(t$7170,1,13) = 'Rad_UKMO.f90'
14592.                                _substr(t$7171,1,5) = 'SCAT'
14592.                               t$7172 = seat_spectrum%aerosol%scat%dim_3%LB
14592.                               t$7173 = seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1
14592.                               t$7174 = i
14592.                               call _bounds_error(  _substr(t$7170,1,13), 14592,  _substr(t$7171,1,5), 3, t$7172, t$7173, t$7174, t$7169 )
14592.                            endif
14589.                            $Unit_temp_O10 = iu_spc
14589.                            t$7129 = _fread( _clist( 0, 1, 0, $Unit_temp_O10, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%scat%base_addr)(1 + $I_L14588_14, i_species, i, 0), 0x804060300000000L ) ) )
14589.                            if ( t$7129 == 0 ) then
14593.                               if ( ( 1 + $I_L14588_14 ) < seat_spectrum%aerosol%phf_fnc%dim_1%LB .or. ( 1 + $I_L14588_14 ) > seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1 ) then
14593.                                   _substr(t$7176,1,13) = 'Rad_UKMO.f90'
14593.                                   _substr(t$7177,1,8) = 'PHF_FNC'
14593.                                  t$7178 = seat_spectrum%aerosol%phf_fnc%dim_1%LB
14593.                                  t$7179 = seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1
14593.                                  t$7180 = 1 + $I_L14588_14
14593.                                  call _bounds_error(  _substr(t$7176,1,13), 14593,  _substr(t$7177,1,8), 1, t$7178, t$7179, t$7180, t$7175 )
14593.                               endif
14593.                               if ( 1 < seat_spectrum%aerosol%phf_fnc%dim_2%LB .or. 0 >= seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1 ) then
14593.                                   _substr(t$7182,1,13) = 'Rad_UKMO.f90'
14593.                                   _substr(t$7183,1,8) = 'PHF_FNC'
14593.                                  t$7184 = seat_spectrum%aerosol%phf_fnc%dim_2%LB
14593.                                  t$7185 = seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1
14593.                                  call _bounds_error(  _substr(t$7182,1,13), 14593,  _substr(t$7183,1,8), 2, t$7184, t$7185, 1, t$7181 )
14593.                               endif
14593.                               if ( i_species < seat_spectrum%aerosol%phf_fnc%dim_3%LB .or. i_species > seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1 ) then
14593.                                   _substr(t$7187,1,13) = 'Rad_UKMO.f90'
14593.                                   _substr(t$7188,1,8) = 'PHF_FNC'
14593.                                  t$7189 = seat_spectrum%aerosol%phf_fnc%dim_3%LB
14593.                                  t$7190 = seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1
14593.                                  t$7191 = i_species
14593.                                  call _bounds_error(  _substr(t$7187,1,13), 14593,  _substr(t$7188,1,8), 3, t$7189, t$7190, t$7191, t$7186 )
14593.                               endif
14593.                               if ( i < seat_spectrum%aerosol%phf_fnc%dim_4%LB .or. i > seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1 ) then
14593.                                   _substr(t$7193,1,13) = 'Rad_UKMO.f90'
14593.                                   _substr(t$7194,1,8) = 'PHF_FNC'
14593.                                  t$7195 = seat_spectrum%aerosol%phf_fnc%dim_4%LB
14593.                                  t$7196 = seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1
14593.                                  t$7197 = i
14593.                                  call _bounds_error(  _substr(t$7193,1,13), 14593,  _substr(t$7194,1,8), 4, t$7195, t$7196, t$7197, t$7192 )
14593.                               endif
14589.                               $Unit_temp_O13 = iu_spc
14589.                               t$7129 = _fread( _clist( 0, 1, 0, $Unit_temp_O13, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%phf_fnc%base_addr)(1 + $I_L14588_14, 1, i_species, i, 0), 0x804060300000000L ) ) )
14589.                               if ( t$7129 == 0 ) then
14589.                                  $Unit_temp_O16 = iu_spc
14589.                                  t$7129 = _fread( _clist( 0, 1, 1, $Unit_temp_O16, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14589.                               endif
14589.                            endif
14589.                         endif
14589.                      endif
14589.                   endif
14594.                   if ( ios /= 0 ) then
14595.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$667,  _substr(t$666,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_11_1_1', 0x800600000000L ) ) )
14597.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$669,  _substr(t$668,1,3), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Moist aerosol scattering data are not in the correct format.', 0x800600000000L ) ) )
14599.                      seat_ierr = 1
14599.                      goto 20
14599.                   endif
14602.                   $I_L14588_14 = 1 + $I_L14588_14
14602.                   if ( $I_L14588_14 >= $t_S1 ) exit
14602.                enddo
14603.                $I_L14586_18 = 1 + $I_L14586_18
14602.             else
14602.             endif
14602.             if ( $I_L14586_18 >= $t_S2 ) exit
14602.          enddo
14603.          i = ( 1 + $t_S2 )
14603.          goto 10
14603.       else
14603.    10    continue
14605.          (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_species, 0) = 2
14606.          (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0) = 1
14609.          (seat_spectrum%aerosol%l_aero_spec%base_addr)(i_species, 0) = .true.
14609.       endif
14609.    20 continue
14614.       return
14614.       end
14614.       
14619.       
14619.       subroutine read_block_11_1_2_int
14633.       if ( seat_spectrum%aerosol%l_aero_spec%header%assoc /= 1 ) then
14634.          seat_spectrum%aerosol%l_aero_spec%header%a_contig = 1
14634.          seat_spectrum%aerosol%l_aero_spec%dim_1%LB = 1
14634.          seat_spectrum%aerosol%l_aero_spec%dim_1%EX = _zla( 0, (nd_aerosol_species%base_addr)(0) )
14634.          seat_spectrum%aerosol%l_aero_spec%dim_1%SM = 1
14634.          $_allo_P0(0) = 0x1000000000001L
14634.          $_allo_P0(1) = loc( seat_spectrum%aerosol%l_aero_spec )
14634.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
14635.          $F_A34 = (nd_aerosol_species%base_addr)(0)
14635.          if ( (nd_aerosol_species%base_addr)(0) > 0 ) then
14635.             $SC_spectrum_I1 = seat_spectrum%aerosol%l_aero_spec%dim_1%EX
14635.             $I_L14635_22 = 0
14635. !dir$ ivdep
14635.             do
14635.                (seat_spectrum%aerosol%l_aero_spec%base_addr)(1 + $I_L14635_22, 0) = .false.
14635.                $I_L14635_22 = 1 + $I_L14635_22
14635.                if ( $I_L14635_22 >= $F_A34 ) exit
14635.             enddo
14635.          endif
14636.          seat_spectrum%aerosol%i_aerosol_parm%header%a_contig = 1
14636.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%LB = 1
14636.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14636.          seat_spectrum%aerosol%i_aerosol_parm%dim_1%SM = 1
14636.          $_allo_P1(0) = 0x1000000000001L
14636.          $_allo_P1(1) = loc( seat_spectrum%aerosol%i_aerosol_parm )
14636.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14637.          seat_spectrum%aerosol%n_aerosol_phf_term%header%a_contig = 1
14637.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB = 1
14637.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14637.          seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%SM = 1
14637.          $_allo_P2(0) = 0x1000000000001L
14637.          $_allo_P2(1) = loc( seat_spectrum%aerosol%n_aerosol_phf_term )
14637.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14638.          seat_spectrum%aerosol%nhumidity%header%a_contig = 1
14638.          seat_spectrum%aerosol%nhumidity%dim_1%LB = 1
14638.          seat_spectrum%aerosol%nhumidity%dim_1%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14638.          seat_spectrum%aerosol%nhumidity%dim_1%SM = 1
14638.          $_allo_P3(0) = 0x1000000000001L
14638.          $_allo_P3(1) = loc( seat_spectrum%aerosol%nhumidity )
14638.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14639.          seat_spectrum%aerosol%humidities%header%a_contig = 1
14639.          seat_spectrum%aerosol%humidities%dim_1%LB = 1
14639.          seat_spectrum%aerosol%humidities%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14639.          seat_spectrum%aerosol%humidities%dim_1%SM = 1
14639.          seat_spectrum%aerosol%humidities%dim_2%LB = 1
14639.          seat_spectrum%aerosol%humidities%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14639.          seat_spectrum%aerosol%humidities%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14639.          $_allo_P4(0) = 0x1000000000001L
14639.          $_allo_P4(1) = loc( seat_spectrum%aerosol%humidities )
14639.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14639.       endif
14642.       $Unit_temp_O0 = iu_spc
14642.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$671,  _substr(t$670,1,13), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( i_species, 0x2000200000000L ) ) )
14643.       if ( i_species < seat_spectrum%aerosol%nhumidity%dim_1%LB .or. i_species > seat_spectrum%aerosol%nhumidity%dim_1%LB + seat_spectrum%aerosol%nhumidity%dim_1%EX + -1 ) then
14643.           _substr(t$7199,1,13) = 'Rad_UKMO.f90'
14643.           _substr(t$7200,1,10) = 'NHUMIDITY'
14643.          t$7201 = seat_spectrum%aerosol%nhumidity%dim_1%LB
14643.          t$7202 = seat_spectrum%aerosol%nhumidity%dim_1%LB + seat_spectrum%aerosol%nhumidity%dim_1%EX + -1
14643.          t$7203 = i_species
14643.          call _bounds_error(  _substr(t$7199,1,13), 14643,  _substr(t$7200,1,10), 1, t$7201, t$7202, t$7203, t$7198 )
14643.       endif
14643.       $Unit_temp_O1 = iu_spc
14643.       _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$673,  _substr(t$672,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%nhumidity%base_addr)(i_species, 0), 0x2000200000000L ) ) )
14644.       if ( i_species < seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB .or. i_species > seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1 ) then
14644.           _substr(t$7205,1,13) = 'Rad_UKMO.f90'
14644.           _substr(t$7206,1,19) = 'N_AEROSOL_PHF_TERM'
14644.          t$7201 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB
14644.          t$7202 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1
14644.          t$7203 = i_species
14644.          call _bounds_error(  _substr(t$7205,1,13), 14644,  _substr(t$7206,1,19), 1, t$7201, t$7202, t$7203, t$7204 )
14644.       endif
14644.       $Unit_temp_O3 = iu_spc
14644.       _fread( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$675,  _substr(t$674,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0), 0x2000200000000L ) ) )
14646.       if ( seat_spectrum%aerosol%abs%header%assoc /= 1 ) then
14647.          seat_spectrum%aerosol%abs%header%a_contig = 1
14647.          seat_spectrum%aerosol%abs%dim_1%LB = 1
14647.          seat_spectrum%aerosol%abs%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14647.          seat_spectrum%aerosol%abs%dim_1%SM = 1
14647.          seat_spectrum%aerosol%abs%dim_2%LB = 1
14647.          seat_spectrum%aerosol%abs%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14647.          seat_spectrum%aerosol%abs%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14647.          seat_spectrum%aerosol%abs%dim_3%LB = 1
14647.          seat_spectrum%aerosol%abs%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14647.          seat_spectrum%aerosol%abs%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14647.          $_allo_P5(0) = 0x1000000000001L
14647.          $_allo_P5(1) = loc( seat_spectrum%aerosol%abs )
14647.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14649.          seat_spectrum%aerosol%scat%header%a_contig = 1
14649.          seat_spectrum%aerosol%scat%dim_1%LB = 1
14649.          seat_spectrum%aerosol%scat%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14649.          seat_spectrum%aerosol%scat%dim_1%SM = 1
14649.          seat_spectrum%aerosol%scat%dim_2%LB = 1
14649.          seat_spectrum%aerosol%scat%dim_2%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14649.          seat_spectrum%aerosol%scat%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14649.          seat_spectrum%aerosol%scat%dim_3%LB = 1
14649.          seat_spectrum%aerosol%scat%dim_3%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14649.          seat_spectrum%aerosol%scat%dim_3%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) )
14649.          $_allo_P6(0) = 0x1000000000001L
14649.          $_allo_P6(1) = loc( seat_spectrum%aerosol%scat )
14649.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14651.          seat_spectrum%aerosol%phf_fnc%header%a_contig = 1
14651.          seat_spectrum%aerosol%phf_fnc%dim_1%LB = 1
14651.          seat_spectrum%aerosol%phf_fnc%dim_1%EX = ( max( 0, (nd_humidity%base_addr)(0) ) )
14651.          seat_spectrum%aerosol%phf_fnc%dim_1%SM = 1
14651.          seat_spectrum%aerosol%phf_fnc%dim_2%LB = 1
14651.          seat_spectrum%aerosol%phf_fnc%dim_2%EX = ( max( 0, (nd_phase_term%base_addr)(0) ) )
14651.          seat_spectrum%aerosol%phf_fnc%dim_2%SM = ( max( 0, (nd_humidity%base_addr)(0) ) )
14651.          seat_spectrum%aerosol%phf_fnc%dim_3%LB = 1
14651.          seat_spectrum%aerosol%phf_fnc%dim_3%EX = ( max( 0, (nd_aerosol_species%base_addr)(0) ) )
14651.          seat_spectrum%aerosol%phf_fnc%dim_3%SM = ( max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14651.          seat_spectrum%aerosol%phf_fnc%dim_4%LB = 1
14651.          seat_spectrum%aerosol%phf_fnc%dim_4%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14651.          seat_spectrum%aerosol%phf_fnc%dim_4%SM = ( max( 0, (nd_aerosol_species%base_addr)(0) ) * max( 0, (nd_humidity%base_addr)(0) ) * max( 0, (nd_phase_term%base_addr)(0) ) )
14651.          $_allo_P7(0) = 0x1000000000001L
14651.          $_allo_P7(1) = loc( seat_spectrum%aerosol%phf_fnc )
14651.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
14651.       endif
14656.       $t_S3 = seat_spectrum%basic%n_band
14656.       i = 1
14656.       if ( seat_spectrum%basic%n_band > 0 ) then
14656.          $I_L14656_26 = 0
14656.          do
14656.             i = ( 1 + $I_L14656_26 )
14657.             $Unit_temp_O5 = iu_spc
14657.             _fread( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$677,  _substr(t$676,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14658.             $t_S1 = (seat_spectrum%aerosol%nhumidity%base_addr)(i_species, 0)
14658.             if ( $t_S1 > 0 ) then
14658.                $I_L14658_24 = 0
14658.                do
14659.                   $Unit_temp_O6 = iu_spc
14659.                   t$7213 = _fread( _clist( 0, 1, 2, $Unit_temp_O6, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14659.                   if ( t$7213 == 0 ) then
14660.                      if ( ( 1 + $I_L14658_24 ) < seat_spectrum%aerosol%humidities%dim_1%LB .or. ( 1 + $I_L14658_24 ) > seat_spectrum%aerosol%humidities%dim_1%LB + seat_spectrum%aerosol%humidities%dim_1%EX + -1 ) then
14660.                          _substr(t$7215,1,13) = 'Rad_UKMO.f90'
14660.                          _substr(t$7216,1,11) = 'HUMIDITIES'
14660.                         t$7201 = seat_spectrum%aerosol%humidities%dim_1%LB
14660.                         t$7202 = seat_spectrum%aerosol%humidities%dim_1%LB + seat_spectrum%aerosol%humidities%dim_1%EX + -1
14660.                         t$7203 = 1 + $I_L14658_24
14660.                         call _bounds_error(  _substr(t$7215,1,13), 14660,  _substr(t$7216,1,11), 1, t$7201, t$7202, t$7203, t$7214 )
14660.                      endif
14660.                      if ( i_species < seat_spectrum%aerosol%humidities%dim_2%LB .or. i_species > seat_spectrum%aerosol%humidities%dim_2%LB + seat_spectrum%aerosol%humidities%dim_2%EX + -1 ) then
14660.                          _substr(t$7218,1,13) = 'Rad_UKMO.f90'
14660.                          _substr(t$7219,1,11) = 'HUMIDITIES'
14660.                         t$7220 = seat_spectrum%aerosol%humidities%dim_2%LB
14660.                         t$7221 = seat_spectrum%aerosol%humidities%dim_2%LB + seat_spectrum%aerosol%humidities%dim_2%EX + -1
14660.                         t$7222 = i_species
14660.                         call _bounds_error(  _substr(t$7218,1,13), 14660,  _substr(t$7219,1,11), 2, t$7220, t$7221, t$7222, t$7217 )
14660.                      endif
14659.                      $Unit_temp_O7 = iu_spc
14659.                      t$7213 = _fread( _clist( 0, 1, 0, $Unit_temp_O7, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%humidities%base_addr)(1 + $I_L14658_24, i_species, 0), 0x804060300000000L ) ) )
14659.                      if ( t$7213 == 0 ) then
14661.                         if ( ( 1 + $I_L14658_24 ) < seat_spectrum%aerosol%abs%dim_1%LB .or. ( 1 + $I_L14658_24 ) > seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1 ) then
14661.                             _substr(t$7224,1,13) = 'Rad_UKMO.f90'
14661.                             _substr(t$7225,1,4) = 'ABS'
14661.                            t$7226 = seat_spectrum%aerosol%abs%dim_1%LB
14661.                            t$7227 = seat_spectrum%aerosol%abs%dim_1%LB + seat_spectrum%aerosol%abs%dim_1%EX + -1
14661.                            t$7228 = 1 + $I_L14658_24
14661.                            call _bounds_error(  _substr(t$7224,1,13), 14661,  _substr(t$7225,1,4), 1, t$7226, t$7227, t$7228, t$7223 )
14661.                         endif
14661.                         if ( i_species < seat_spectrum%aerosol%abs%dim_2%LB .or. i_species > seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1 ) then
14661.                             _substr(t$7230,1,13) = 'Rad_UKMO.f90'
14661.                             _substr(t$7231,1,4) = 'ABS'
14661.                            t$7232 = seat_spectrum%aerosol%abs%dim_2%LB
14661.                            t$7233 = seat_spectrum%aerosol%abs%dim_2%LB + seat_spectrum%aerosol%abs%dim_2%EX + -1
14661.                            t$7234 = i_species
14661.                            call _bounds_error(  _substr(t$7230,1,13), 14661,  _substr(t$7231,1,4), 2, t$7232, t$7233, t$7234, t$7229 )
14661.                         endif
14661.                         if ( i < seat_spectrum%aerosol%abs%dim_3%LB .or. i > seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1 ) then
14661.                             _substr(t$7236,1,13) = 'Rad_UKMO.f90'
14661.                             _substr(t$7237,1,4) = 'ABS'
14661.                            t$7238 = seat_spectrum%aerosol%abs%dim_3%LB
14661.                            t$7239 = seat_spectrum%aerosol%abs%dim_3%LB + seat_spectrum%aerosol%abs%dim_3%EX + -1
14661.                            t$7240 = i
14661.                            call _bounds_error(  _substr(t$7236,1,13), 14661,  _substr(t$7237,1,4), 3, t$7238, t$7239, t$7240, t$7235 )
14661.                         endif
14659.                         $Unit_temp_O9 = iu_spc
14659.                         t$7213 = _fread( _clist( 0, 1, 0, $Unit_temp_O9, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%abs%base_addr)(1 + $I_L14658_24, i_species, i, 0), 0x804060300000000L ) ) )
14659.                         if ( t$7213 == 0 ) then
14662.                            if ( ( 1 + $I_L14658_24 ) < seat_spectrum%aerosol%scat%dim_1%LB .or. ( 1 + $I_L14658_24 ) > seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1 ) then
14662.                                _substr(t$7242,1,13) = 'Rad_UKMO.f90'
14662.                                _substr(t$7243,1,5) = 'SCAT'
14662.                               t$7244 = seat_spectrum%aerosol%scat%dim_1%LB
14662.                               t$7245 = seat_spectrum%aerosol%scat%dim_1%LB + seat_spectrum%aerosol%scat%dim_1%EX + -1
14662.                               t$7246 = 1 + $I_L14658_24
14662.                               call _bounds_error(  _substr(t$7242,1,13), 14662,  _substr(t$7243,1,5), 1, t$7244, t$7245, t$7246, t$7241 )
14662.                            endif
14662.                            if ( i_species < seat_spectrum%aerosol%scat%dim_2%LB .or. i_species > seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1 ) then
14662.                                _substr(t$7248,1,13) = 'Rad_UKMO.f90'
14662.                                _substr(t$7249,1,5) = 'SCAT'
14662.                               t$7250 = seat_spectrum%aerosol%scat%dim_2%LB
14662.                               t$7251 = seat_spectrum%aerosol%scat%dim_2%LB + seat_spectrum%aerosol%scat%dim_2%EX + -1
14662.                               t$7252 = i_species
14662.                               call _bounds_error(  _substr(t$7248,1,13), 14662,  _substr(t$7249,1,5), 2, t$7250, t$7251, t$7252, t$7247 )
14662.                            endif
14662.                            if ( i < seat_spectrum%aerosol%scat%dim_3%LB .or. i > seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1 ) then
14662.                                _substr(t$7254,1,13) = 'Rad_UKMO.f90'
14662.                                _substr(t$7255,1,5) = 'SCAT'
14662.                               t$7256 = seat_spectrum%aerosol%scat%dim_3%LB
14662.                               t$7257 = seat_spectrum%aerosol%scat%dim_3%LB + seat_spectrum%aerosol%scat%dim_3%EX + -1
14662.                               t$7258 = i
14662.                               call _bounds_error(  _substr(t$7254,1,13), 14662,  _substr(t$7255,1,5), 3, t$7256, t$7257, t$7258, t$7253 )
14662.                            endif
14659.                            $Unit_temp_O12 = iu_spc
14659.                            t$7213 = _fread( _clist( 0, 1, 0, $Unit_temp_O12, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%scat%base_addr)(1 + $I_L14658_24, i_species, i, 0), 0x804060300000000L ) ) )
14659.                            if ( t$7213 == 0 ) then
14664.                               if ( i_species < seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB .or. i_species > seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1 ) then
14664.                                   _substr(t$7260,1,13) = 'Rad_UKMO.f90'
14664.                                   _substr(t$7261,1,19) = 'N_AEROSOL_PHF_TERM'
14664.                                  t$7262 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB
14664.                                  t$7263 = seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%LB + seat_spectrum%aerosol%n_aerosol_phf_term%dim_1%EX + -1
14664.                                  t$7264 = i_species
14664.                                  call _bounds_error(  _substr(t$7260,1,13), 14664,  _substr(t$7261,1,19), 1, t$7262, t$7263, t$7264, t$7259 )
14664.                               endif
14659.                               $t_S2 = (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0)
14659.                               if ( $t_S2 > 0 ) then
14659.                                  $I_L14659_20 = 0
14659.                                  do
14663.                                     if ( ( 1 + $I_L14658_24 ) < seat_spectrum%aerosol%phf_fnc%dim_1%LB .or. ( 1 + $I_L14658_24 ) > seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1 ) then
14663.                                         _substr(t$7269,1,13) = 'Rad_UKMO.f90'
14663.                                         _substr(t$7270,1,8) = 'PHF_FNC'
14663.                                        t$7271 = seat_spectrum%aerosol%phf_fnc%dim_1%LB
14663.                                        t$7272 = seat_spectrum%aerosol%phf_fnc%dim_1%LB + seat_spectrum%aerosol%phf_fnc%dim_1%EX + -1
14663.                                        t$7273 = 1 + $I_L14658_24
14663.                                        call _bounds_error(  _substr(t$7269,1,13), 14663,  _substr(t$7270,1,8), 1, t$7271, t$7272, t$7273, t$7268 )
14663.                                     endif
14663.                                     if ( ( 1 + $I_L14659_20 ) < seat_spectrum%aerosol%phf_fnc%dim_2%LB .or. ( 1 + $I_L14659_20 ) > seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1 ) then
14663.                                         _substr(t$7275,1,13) = 'Rad_UKMO.f90'
14663.                                         _substr(t$7276,1,8) = 'PHF_FNC'
14663.                                        t$7277 = seat_spectrum%aerosol%phf_fnc%dim_2%LB
14663.                                        t$7278 = seat_spectrum%aerosol%phf_fnc%dim_2%LB + seat_spectrum%aerosol%phf_fnc%dim_2%EX + -1
14663.                                        t$7279 = 1 + $I_L14659_20
14663.                                        call _bounds_error(  _substr(t$7275,1,13), 14663,  _substr(t$7276,1,8), 2, t$7277, t$7278, t$7279, t$7274 )
14663.                                     endif
14663.                                     if ( i_species < seat_spectrum%aerosol%phf_fnc%dim_3%LB .or. i_species > seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1 ) then
14663.                                         _substr(t$7281,1,13) = 'Rad_UKMO.f90'
14663.                                         _substr(t$7282,1,8) = 'PHF_FNC'
14663.                                        t$7283 = seat_spectrum%aerosol%phf_fnc%dim_3%LB
14663.                                        t$7284 = seat_spectrum%aerosol%phf_fnc%dim_3%LB + seat_spectrum%aerosol%phf_fnc%dim_3%EX + -1
14663.                                        t$7285 = i_species
14663.                                        call _bounds_error(  _substr(t$7281,1,13), 14663,  _substr(t$7282,1,8), 3, t$7283, t$7284, t$7285, t$7280 )
14663.                                     endif
14663.                                     if ( i < seat_spectrum%aerosol%phf_fnc%dim_4%LB .or. i > seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1 ) then
14663.                                         _substr(t$7287,1,13) = 'Rad_UKMO.f90'
14663.                                         _substr(t$7288,1,8) = 'PHF_FNC'
14663.                                        t$7289 = seat_spectrum%aerosol%phf_fnc%dim_4%LB
14663.                                        t$7290 = seat_spectrum%aerosol%phf_fnc%dim_4%LB + seat_spectrum%aerosol%phf_fnc%dim_4%EX + -1
14663.                                        t$7291 = i
14663.                                        call _bounds_error(  _substr(t$7287,1,13), 14663,  _substr(t$7288,1,8), 4, t$7289, t$7290, t$7291, t$7286 )
14663.                                     endif
14659.                                     $Unit_temp_O15 = iu_spc
14659.                                     t$7213 = _fread( _clist( 0, 1, 0, $Unit_temp_O15, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%aerosol%phf_fnc%base_addr)(1 + $I_L14658_24, 1 + $I_L14659_20, i_species, i, 0), 0x804060300000000L ) ) )
14659.                                     if ( t$7213 /= 0 ) goto 20
14659.                                     $I_L14659_20 = 1 + $I_L14659_20
14659.                                     if ( $I_L14659_20 >= $t_S2 ) exit
14659.                                  enddo
14659.                                  goto 10
14659.                               else
14659.    10                            continue
14659.                                  $Unit_temp_O19 = iu_spc
14659.                                  t$7213 = _fread( _clist( 0, 1, 1, $Unit_temp_O19, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14659.                               endif
14659.                            endif
14659.                         endif
14659.                      endif
14659.                   endif
14659.    20             continue
14665.                   if ( ios /= 0 ) then
14666.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$679,  _substr(t$678,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_11_1_2', 0x800600000000L ), _iotype( 'Moist aerosol scattering data are not in the correct format.', 0x800600000000L ) ) )
14669.                      seat_ierr = 1
14669.                      goto 40
14669.                   endif
14672.                   $I_L14658_24 = 1 + $I_L14658_24
14672.                   if ( $I_L14658_24 >= $t_S1 ) exit
14672.                enddo
14673.                $I_L14656_26 = 1 + $I_L14656_26
14672.             else
14672.             endif
14672.             if ( $I_L14656_26 >= $t_S3 ) exit
14672.          enddo
14673.          i = ( 1 + $t_S3 )
14673.          goto 30
14673.       else
14673.    30    continue
14675.          if ( (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0) == 1 ) then
14676.             (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_species, 0) = 2
14677.          else if ( (seat_spectrum%aerosol%n_aerosol_phf_term%base_addr)(i_species, 0) > 1 ) then
14678.             (seat_spectrum%aerosol%i_aerosol_parm%base_addr)(i_species, 0) = 5
14678.          endif
14682.          (seat_spectrum%aerosol%l_aero_spec%base_addr)(i_species, 0) = .true.
14682.       endif
14682.    40 continue
14687.       return
14687.       end
14687.       
14692.       
14692.       subroutine read_block_12_0_0_int
14711.       if ( seat_spectrum%ice%l_ice_type%header%assoc /= 1 ) then
14712.          seat_spectrum%ice%l_ice_type%header%a_contig = 1
14712.          seat_spectrum%ice%l_ice_type%dim_1%LB = 1
14712.          seat_spectrum%ice%l_ice_type%dim_1%EX = _zla( 0, (nd_ice_type%base_addr)(0) )
14712.          seat_spectrum%ice%l_ice_type%dim_1%SM = 1
14712.          $_allo_P1(0) = 0x1000000000001L
14712.          $_allo_P1(1) = loc( seat_spectrum%ice%l_ice_type )
14712.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14713.          $F_A34 = (nd_ice_type%base_addr)(0)
14713.          if ( (nd_ice_type%base_addr)(0) > 0 ) then
14713.             $SC_spectrum_I2 = seat_spectrum%ice%l_ice_type%dim_1%EX
14713.             $I_L14713_22 = 0
14713. !dir$ ivdep
14713.             do
14713.                (seat_spectrum%ice%l_ice_type%base_addr)(1 + $I_L14713_22, 0) = .false.
14713.                $I_L14713_22 = 1 + $I_L14713_22
14713.                if ( $I_L14713_22 >= $F_A34 ) exit
14713.             enddo
14713.          endif
14714.          seat_spectrum%ice%i_ice_parm%header%a_contig = 1
14714.          seat_spectrum%ice%i_ice_parm%dim_1%LB = 1
14714.          seat_spectrum%ice%i_ice_parm%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14714.          seat_spectrum%ice%i_ice_parm%dim_1%SM = 1
14714.          $_allo_P2(0) = 0x1000000000001L
14714.          $_allo_P2(1) = loc( seat_spectrum%ice%i_ice_parm )
14714.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14715.          seat_spectrum%ice%parm_min_dim%header%a_contig = 1
14715.          seat_spectrum%ice%parm_min_dim%dim_1%LB = 1
14715.          seat_spectrum%ice%parm_min_dim%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14715.          seat_spectrum%ice%parm_min_dim%dim_1%SM = 1
14715.          $_allo_P3(0) = 0x1000000000001L
14715.          $_allo_P3(1) = loc( seat_spectrum%ice%parm_min_dim )
14715.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14716.          seat_spectrum%ice%parm_max_dim%header%a_contig = 1
14716.          seat_spectrum%ice%parm_max_dim%dim_1%LB = 1
14716.          seat_spectrum%ice%parm_max_dim%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14716.          seat_spectrum%ice%parm_max_dim%dim_1%SM = 1
14716.          $_allo_P4(0) = 0x1000000000001L
14716.          $_allo_P4(1) = loc( seat_spectrum%ice%parm_max_dim )
14716.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14717.          seat_spectrum%ice%n_phf%header%a_contig = 1
14717.          seat_spectrum%ice%n_phf%dim_1%LB = 1
14717.          seat_spectrum%ice%n_phf%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14717.          seat_spectrum%ice%n_phf%dim_1%SM = 1
14717.          $_allo_P5(0) = 0x1000000000001L
14717.          $_allo_P5(1) = loc( seat_spectrum%ice%n_phf )
14717.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14718.          seat_spectrum%ice%parm_list%header%a_contig = 1
14718.          seat_spectrum%ice%parm_list%dim_1%LB = 1
14718.          seat_spectrum%ice%parm_list%dim_1%EX = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14718.          seat_spectrum%ice%parm_list%dim_1%SM = 1
14718.          seat_spectrum%ice%parm_list%dim_2%LB = 1
14718.          seat_spectrum%ice%parm_list%dim_2%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14718.          seat_spectrum%ice%parm_list%dim_2%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14718.          seat_spectrum%ice%parm_list%dim_3%LB = 1
14718.          seat_spectrum%ice%parm_list%dim_3%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14718.          seat_spectrum%ice%parm_list%dim_3%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) * max( 0, (nd_band%base_addr)(0) ) )
14718.          $_allo_P6(0) = 0x1000000000001L
14718.          $_allo_P6(1) = loc( seat_spectrum%ice%parm_list )
14718.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14718.       endif
14723.       $Unit_temp_O0 = iu_spc
14723.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$681,  _substr(t$680,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14723.       i_ice = $_IOitem_P0(0)
14723.       i_parametrization_ice = $_IOitem_P0(1)
14723.       i_dummy = $_IOitem_P0(2)
14725.       if ( i_ice > (nd_ice_type%base_addr)(0) ) then
14726.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$683,  _substr(t$682,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_0', 0x800600000000L ), _iotype( 'Type of ice crystal exceeds maximum permitted value:', 0x800600000000L ), _iotype( 'Increase npd_ice_type and recompile.', 0x800600000000L ) ) )
14730.          seat_ierr = 1
14732.       else if ( i_parametrization_ice == 1 ) then
14732.          goto 10
14732.       else if ( i_parametrization_ice == 6 ) then
14732.          goto 10
14732.       else if ( i_parametrization_ice == 7 ) then
14732.          goto 10
14732.       else if ( i_parametrization_ice == 9 ) then
14732.          goto 10
14732.       else if ( i_parametrization_ice == 10 ) then
14732.          goto 10
14732.       else if ( i_parametrization_ice == 4 ) then
14732.          goto 10
14732.       else if ( i_parametrization_ice == 5 ) then
14732.    10    continue
14747.          (seat_spectrum%ice%parm_min_dim%base_addr)(i_ice, 0) = 0.0
14748.          (seat_spectrum%ice%parm_max_dim%base_addr)(i_ice, 0) = 0.0
14750.          (seat_spectrum%ice%n_phf%base_addr)(i_ice, 0) = 1
14753.          $t_S1 = seat_spectrum%basic%n_band
14753.          i = 1
14753.          if ( seat_spectrum%basic%n_band <= 0 ) then
14734.             goto 20
14734.          else if ( i_dummy > 0 ) then
14753.             $I_L14753_24 = 0
14753.             do
14753.                i = ( 1 + $I_L14753_24 )
14754.                $Unit_temp_O1 = iu_spc
14754.                _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$685,  _substr(t$684,1,2), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14755.                $Unit_temp_O2 = iu_spc
14755.                t$7295 = _fread( _clist( 0, 1, 2, $Unit_temp_O2, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14755.                if ( t$7295 == 0 ) then
14755.                   $I_L14755_18 = 0
14755.                   do
14756.                      if ( ( 1 + $I_L14755_18 ) < seat_spectrum%ice%parm_list%dim_1%LB .or. ( 1 + $I_L14755_18 ) > seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1 ) then
14756.                          _substr(t$7300,1,13) = 'Rad_UKMO.f90'
14756.                          _substr(t$7301,1,10) = 'PARM_LIST'
14756.                         t$7302 = seat_spectrum%ice%parm_list%dim_1%LB
14756.                         t$7303 = seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1
14756.                         t$7304 = 1 + $I_L14755_18
14756.                         call _bounds_error(  _substr(t$7300,1,13), 14756,  _substr(t$7301,1,10), 1, t$7302, t$7303, t$7304, t$7299 )
14756.                      endif
14756.                      if ( i < seat_spectrum%ice%parm_list%dim_2%LB .or. i > seat_spectrum%ice%parm_list%dim_2%LB + seat_spectrum%ice%parm_list%dim_2%EX + -1 ) then
14756.                          _substr(t$7306,1,13) = 'Rad_UKMO.f90'
14756.                          _substr(t$7307,1,10) = 'PARM_LIST'
14756.                         t$7308 = seat_spectrum%ice%parm_list%dim_2%LB
14756.                         t$7309 = seat_spectrum%ice%parm_list%dim_2%LB + seat_spectrum%ice%parm_list%dim_2%EX + -1
14756.                         t$7310 = i
14756.                         call _bounds_error(  _substr(t$7306,1,13), 14756,  _substr(t$7307,1,10), 2, t$7308, t$7309, t$7310, t$7305 )
14756.                      endif
14756.                      if ( i_ice < seat_spectrum%ice%parm_list%dim_3%LB .or. i_ice > seat_spectrum%ice%parm_list%dim_3%LB + seat_spectrum%ice%parm_list%dim_3%EX + -1 ) then
14756.                          _substr(t$7312,1,13) = 'Rad_UKMO.f90'
14756.                          _substr(t$7313,1,10) = 'PARM_LIST'
14756.                         t$7314 = seat_spectrum%ice%parm_list%dim_3%LB
14756.                         t$7315 = seat_spectrum%ice%parm_list%dim_3%LB + seat_spectrum%ice%parm_list%dim_3%EX + -1
14756.                         t$7316 = i_ice
14756.                         call _bounds_error(  _substr(t$7312,1,13), 14756,  _substr(t$7313,1,10), 3, t$7314, t$7315, t$7316, t$7311 )
14756.                      endif
14755.                      $Unit_temp_O3 = iu_spc
14755.                      t$7295 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_list%base_addr)(1 + $I_L14755_18, i, i_ice, 0), 0x804060300000000L ) ) )
14755.                      if ( t$7295 /= 0 ) goto 30
14755.                      $I_L14755_18 = 1 + $I_L14755_18
14755.                      if ( $I_L14755_18 >= i_dummy ) exit
14755.                   enddo
14755.                   $Unit_temp_O7 = iu_spc
14755.                   t$7295 = _fread( _clist( 0, 1, 1, $Unit_temp_O7, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14755.                endif
14755.    30          continue
14758.                if ( ios /= 0 ) then
14755.                   goto 40
14755.                endif
14765.                $I_L14753_24 = 1 + $I_L14753_24
14765.                if ( $I_L14753_24 >= $t_S1 ) exit
14765.             enddo
14765.             goto 50
14765.          else
14753.             $I_L14753_20 = 0
14753.             do
14754.                $Unit_temp_O1 = iu_spc
14754.                _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$685,  _substr(t$684,1,2), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14755.                $Unit_temp_O2 = iu_spc
14755.                t$7295 = _fread( _clist( 0, 1, 2, $Unit_temp_O2, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14755.                if ( t$7295 == 0 ) then
14755.                   $Unit_temp_O7 = iu_spc
14755.                   t$7295 = _fread( _clist( 0, 1, 1, $Unit_temp_O7, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14755.                endif
14758.                if ( ios /= 0 ) then
14753.                   i = ( 1 + $I_L14753_20 )
14753.    40             continue
14759.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$687,  _substr(t$686,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_0', 0x800600000000L ), _iotype( 'Data for ice crystals are not in the correct format.', 0x800600000000L ) ) )
14762.                   seat_ierr = 1
14762.                   goto 60
14762.                endif
14765.                $I_L14753_20 = 1 + $I_L14753_20
14765.                if ( $I_L14753_20 >= seat_spectrum%basic%n_band ) exit
14765.             enddo
14765.    50       continue
14765.             i = ( 1 + $t_S1 )
14765.    20       continue
14777.             (seat_spectrum%ice%l_ice_type%base_addr)(i_ice, 0) = .true.
14778.             (seat_spectrum%ice%i_ice_parm%base_addr)(i_ice, 0) = i_parametrization_ice
14778.          endif
14778.       else
14768.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$689,  _substr(t$688,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** error in subroutine read_block_12_0_0', 0x800600000000L ), _iotype( 'An unknown parametrization scheme has been specified.', 0x800600000000L ) ) )
14771.          seat_ierr = 1
14771.       endif
14771.    60 continue
14783.       return
14783.       end
14783.       
14788.       
14788.       subroutine read_block_12_0_1_int
14805.       if ( seat_spectrum%ice%l_ice_type%header%assoc /= 1 ) then
14806.          seat_spectrum%ice%l_ice_type%header%a_contig = 1
14806.          seat_spectrum%ice%l_ice_type%dim_1%LB = 1
14806.          seat_spectrum%ice%l_ice_type%dim_1%EX = _zla( 0, (nd_ice_type%base_addr)(0) )
14806.          seat_spectrum%ice%l_ice_type%dim_1%SM = 1
14806.          $_allo_P1(0) = 0x1000000000001L
14806.          $_allo_P1(1) = loc( seat_spectrum%ice%l_ice_type )
14806.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14807.          $F_A34 = (nd_ice_type%base_addr)(0)
14807.          if ( (nd_ice_type%base_addr)(0) > 0 ) then
14807.             $SC_spectrum_I1 = seat_spectrum%ice%l_ice_type%dim_1%EX
14807.             $I_L14807_10 = 0
14807. !dir$ ivdep
14807.             do
14807.                (seat_spectrum%ice%l_ice_type%base_addr)(1 + $I_L14807_10, 0) = .false.
14807.                $I_L14807_10 = 1 + $I_L14807_10
14807.                if ( $I_L14807_10 >= $F_A34 ) exit
14807.             enddo
14807.          endif
14808.          seat_spectrum%ice%i_ice_parm%header%a_contig = 1
14808.          seat_spectrum%ice%i_ice_parm%dim_1%LB = 1
14808.          seat_spectrum%ice%i_ice_parm%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14808.          seat_spectrum%ice%i_ice_parm%dim_1%SM = 1
14808.          $_allo_P2(0) = 0x1000000000001L
14808.          $_allo_P2(1) = loc( seat_spectrum%ice%i_ice_parm )
14808.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14809.          seat_spectrum%ice%parm_min_dim%header%a_contig = 1
14809.          seat_spectrum%ice%parm_min_dim%dim_1%LB = 1
14809.          seat_spectrum%ice%parm_min_dim%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14809.          seat_spectrum%ice%parm_min_dim%dim_1%SM = 1
14809.          $_allo_P3(0) = 0x1000000000001L
14809.          $_allo_P3(1) = loc( seat_spectrum%ice%parm_min_dim )
14809.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14810.          seat_spectrum%ice%parm_max_dim%header%a_contig = 1
14810.          seat_spectrum%ice%parm_max_dim%dim_1%LB = 1
14810.          seat_spectrum%ice%parm_max_dim%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14810.          seat_spectrum%ice%parm_max_dim%dim_1%SM = 1
14810.          $_allo_P4(0) = 0x1000000000001L
14810.          $_allo_P4(1) = loc( seat_spectrum%ice%parm_max_dim )
14810.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14811.          seat_spectrum%ice%n_phf%header%a_contig = 1
14811.          seat_spectrum%ice%n_phf%dim_1%LB = 1
14811.          seat_spectrum%ice%n_phf%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14811.          seat_spectrum%ice%n_phf%dim_1%SM = 1
14811.          $_allo_P5(0) = 0x1000000000001L
14811.          $_allo_P5(1) = loc( seat_spectrum%ice%n_phf )
14811.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14812.          seat_spectrum%ice%parm_list%header%a_contig = 1
14812.          seat_spectrum%ice%parm_list%dim_1%LB = 1
14812.          seat_spectrum%ice%parm_list%dim_1%EX = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14812.          seat_spectrum%ice%parm_list%dim_1%SM = 1
14812.          seat_spectrum%ice%parm_list%dim_2%LB = 1
14812.          seat_spectrum%ice%parm_list%dim_2%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14812.          seat_spectrum%ice%parm_list%dim_2%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14812.          seat_spectrum%ice%parm_list%dim_3%LB = 1
14812.          seat_spectrum%ice%parm_list%dim_3%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14812.          seat_spectrum%ice%parm_list%dim_3%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) * max( 0, (nd_band%base_addr)(0) ) )
14812.          $_allo_P6(0) = 0x1000000000001L
14812.          $_allo_P6(1) = loc( seat_spectrum%ice%parm_list )
14812.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14812.       endif
14817.       $Unit_temp_O0 = iu_spc
14817.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$691,  _substr(t$690,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14817.       i_ice = $_IOitem_P0(0)
14817.       i_parametrization_ice = $_IOitem_P0(1)
14817.       i_dummy = $_IOitem_P0(2)
14819.       if ( i_ice > (nd_ice_type%base_addr)(0) ) then
14820.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$693,  _substr(t$692,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_1', 0x800600000000L ), _iotype( 'The indexing number of an ice crystal exceeds the maximum permitted value:', 0x800600000000L ), _iotype( 'Increase npd_ice_type and recompile.', 0x800600000000L ) ) )
14825.          seat_ierr = 1
14827.       else if ( i_parametrization_ice == 1 ) then
14827.          goto 10
14827.       else if ( i_parametrization_ice == 6 ) then
14827.          goto 10
14827.       else if ( i_parametrization_ice == 7 ) then
14827.          goto 10
14827.       else if ( i_parametrization_ice == 9 ) then
14827.          goto 10
14827.       else if ( i_parametrization_ice == 10 ) then
14827.          goto 10
14827.       else if ( i_parametrization_ice == 4 ) then
14827.          goto 10
14827.       else if ( i_parametrization_ice == 5 ) then
14827.    10    continue
14841.          (seat_spectrum%ice%n_phf%base_addr)(i_ice, 0) = 1
14843.          $Unit_temp_O1 = iu_spc
14843.          _fread( _clist( 0, 0, 2, $Unit_temp_O1, Null_Arg, Null_Arg, t$695,  _substr(t$694,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14844.          if ( i_ice < seat_spectrum%ice%parm_min_dim%dim_1%LB .or. i_ice > seat_spectrum%ice%parm_min_dim%dim_1%LB + seat_spectrum%ice%parm_min_dim%dim_1%EX + -1 ) then
14844.              _substr(t$7318,1,13) = 'Rad_UKMO.f90'
14844.              _substr(t$7319,1,13) = 'PARM_MIN_DIM'
14844.             t$7320 = seat_spectrum%ice%parm_min_dim%dim_1%LB
14844.             t$7321 = seat_spectrum%ice%parm_min_dim%dim_1%LB + seat_spectrum%ice%parm_min_dim%dim_1%EX + -1
14844.             t$7322 = i_ice
14844.             call _bounds_error(  _substr(t$7318,1,13), 14844,  _substr(t$7319,1,13), 1, t$7320, t$7321, t$7322, t$7317 )
14844.          endif
14843.          $Unit_temp_O2 = iu_spc
14843.          _fread( _clist( 0, 0, 0, $Unit_temp_O2, Null_Arg, Null_Arg, t$695,  _substr(t$694,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_min_dim%base_addr)(i_ice, 0), 0x804060300000000L ) ) )
14845.          if ( i_ice < seat_spectrum%ice%parm_max_dim%dim_1%LB .or. i_ice > seat_spectrum%ice%parm_max_dim%dim_1%LB + seat_spectrum%ice%parm_max_dim%dim_1%EX + -1 ) then
14845.              _substr(t$7324,1,13) = 'Rad_UKMO.f90'
14845.              _substr(t$7325,1,13) = 'PARM_MAX_DIM'
14845.             t$7326 = seat_spectrum%ice%parm_max_dim%dim_1%LB
14845.             t$7327 = seat_spectrum%ice%parm_max_dim%dim_1%LB + seat_spectrum%ice%parm_max_dim%dim_1%EX + -1
14845.             t$7328 = i_ice
14845.             call _bounds_error(  _substr(t$7324,1,13), 14845,  _substr(t$7325,1,13), 1, t$7326, t$7327, t$7328, t$7323 )
14845.          endif
14843.          $Unit_temp_O4 = iu_spc
14843.          _fread( _clist( 0, 0, 0, $Unit_temp_O4, Null_Arg, Null_Arg, t$695,  _substr(t$694,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_max_dim%base_addr)(i_ice, 0), 0x804060300000000L ) ) )
14843.          $Unit_temp_O6 = iu_spc
14843.          _fread( _clist( 0, 0, 1, $Unit_temp_O6, Null_Arg, Null_Arg, t$695,  _substr(t$694,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14847.          $t_S1 = seat_spectrum%basic%n_band
14847.          i = 1
14847.          if ( seat_spectrum%basic%n_band > 0 ) then
14847.             $I_L14847_8 = 0
14847.             do
14847.                i = ( 1 + $I_L14847_8 )
14848.                $Unit_temp_O7 = iu_spc
14848.                _fread( _clist( 0, 0, 3, $Unit_temp_O7, Null_Arg, Null_Arg, t$697,  _substr(t$696,1,2), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14850.                if ( ( 1 < seat_spectrum%ice%parm_list%dim_1%LB .or. 0 >= seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1 .or. i_dummy < seat_spectrum%ice%parm_list%dim_1%LB .or. i_dummy > seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1 ) .and. i_dummy > 0 ) then
14850.                    _substr(t$7334,1,13) = 'Rad_UKMO.f90'
14850.                    _substr(t$7335,1,10) = 'PARM_LIST'
14850.                   t$7320 = seat_spectrum%ice%parm_list%dim_1%LB
14850.                   t$7321 = seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1
14850.                   t$7322 = i_dummy
14850.                   call _rbounds_error(  _substr(t$7334,1,13), 14850,  _substr(t$7335,1,10), 1, t$7320, t$7321, 1, t$7322, 1, t$7333 )
14850.                endif
14850.                if ( i < seat_spectrum%ice%parm_list%dim_2%LB .or. i > seat_spectrum%ice%parm_list%dim_2%LB + seat_spectrum%ice%parm_list%dim_2%EX + -1 ) then
14850.                    _substr(t$7337,1,13) = 'Rad_UKMO.f90'
14850.                    _substr(t$7338,1,10) = 'PARM_LIST'
14850.                   t$7326 = seat_spectrum%ice%parm_list%dim_2%LB
14850.                   t$7327 = seat_spectrum%ice%parm_list%dim_2%LB + seat_spectrum%ice%parm_list%dim_2%EX + -1
14850.                   t$7328 = i
14850.                   call _bounds_error(  _substr(t$7337,1,13), 14850,  _substr(t$7338,1,10), 2, t$7326, t$7327, t$7328, t$7336 )
14850.                endif
14850.                if ( i_ice < seat_spectrum%ice%parm_list%dim_3%LB .or. i_ice > seat_spectrum%ice%parm_list%dim_3%LB + seat_spectrum%ice%parm_list%dim_3%EX + -1 ) then
14850.                    _substr(t$7340,1,13) = 'Rad_UKMO.f90'
14850.                    _substr(t$7341,1,10) = 'PARM_LIST'
14850.                   t$7342 = seat_spectrum%ice%parm_list%dim_3%LB
14850.                   t$7343 = seat_spectrum%ice%parm_list%dim_3%LB + seat_spectrum%ice%parm_list%dim_3%EX + -1
14850.                   t$7344 = i_ice
14850.                   call _bounds_error(  _substr(t$7340,1,13), 14850,  _substr(t$7341,1,10), 3, t$7342, t$7343, t$7344, t$7339 )
14850.                endif
14849.                $Unit_temp_O8 = iu_spc
14849.                t$7332 = _fread( _clist( 0, 1, 3, $Unit_temp_O8, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_list%base_addr)(:( 1, i_dummy, 1 ), i, i_ice, 0), 0x804060300000000L ) ) )
14852.                if ( ios /= 0 ) then
14853.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$699,  _substr(t$698,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_1', 0x800600000000L ) ) )
14855.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Data for ice crystals are not in the correct format.', 0x800600000000L ) ) )
14857.                   seat_ierr = 1
14857.                   goto 30
14857.                endif
14860.                $I_L14847_8 = 1 + $I_L14847_8
14860.                if ( $I_L14847_8 >= $t_S1 ) exit
14860.             enddo
14860.             i = ( 1 + $t_S1 )
14860.             goto 20
14860.          else
14860.    20       continue
14873.             (seat_spectrum%ice%l_ice_type%base_addr)(i_ice, 0) = .true.
14874.             (seat_spectrum%ice%i_ice_parm%base_addr)(i_ice, 0) = i_parametrization_ice
14874.          endif
14874.       else
14863.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$701,  _substr(t$700,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_1', 0x800600000000L ) ) )
14865.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$703,  _substr(t$702,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'An unknown parametrization scheme has been specified.', 0x800600000000L ) ) )
14867.          seat_ierr = 1
14867.       endif
14867.    30 continue
14879.       return
14879.       end
14879.       
14884.       
14884.       subroutine read_block_12_0_2_int
14901.       if ( seat_spectrum%ice%l_ice_type%header%assoc /= 1 ) then
14902.          seat_spectrum%ice%l_ice_type%header%a_contig = 1
14902.          seat_spectrum%ice%l_ice_type%dim_1%LB = 1
14902.          seat_spectrum%ice%l_ice_type%dim_1%EX = _zla( 0, (nd_ice_type%base_addr)(0) )
14902.          seat_spectrum%ice%l_ice_type%dim_1%SM = 1
14902.          $_allo_P1(0) = 0x1000000000001L
14902.          $_allo_P1(1) = loc( seat_spectrum%ice%l_ice_type )
14902.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
14903.          $F_A34 = (nd_ice_type%base_addr)(0)
14903.          if ( (nd_ice_type%base_addr)(0) > 0 ) then
14903.             $SC_spectrum_I1 = seat_spectrum%ice%l_ice_type%dim_1%EX
14903.             $I_L14903_10 = 0
14903. !dir$ ivdep
14903.             do
14903.                (seat_spectrum%ice%l_ice_type%base_addr)(1 + $I_L14903_10, 0) = .false.
14903.                $I_L14903_10 = 1 + $I_L14903_10
14903.                if ( $I_L14903_10 >= $F_A34 ) exit
14903.             enddo
14903.          endif
14904.          seat_spectrum%ice%i_ice_parm%header%a_contig = 1
14904.          seat_spectrum%ice%i_ice_parm%dim_1%LB = 1
14904.          seat_spectrum%ice%i_ice_parm%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14904.          seat_spectrum%ice%i_ice_parm%dim_1%SM = 1
14904.          $_allo_P2(0) = 0x1000000000001L
14904.          $_allo_P2(1) = loc( seat_spectrum%ice%i_ice_parm )
14904.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
14905.          seat_spectrum%ice%parm_min_dim%header%a_contig = 1
14905.          seat_spectrum%ice%parm_min_dim%dim_1%LB = 1
14905.          seat_spectrum%ice%parm_min_dim%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14905.          seat_spectrum%ice%parm_min_dim%dim_1%SM = 1
14905.          $_allo_P3(0) = 0x1000000000001L
14905.          $_allo_P3(1) = loc( seat_spectrum%ice%parm_min_dim )
14905.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
14906.          seat_spectrum%ice%parm_max_dim%header%a_contig = 1
14906.          seat_spectrum%ice%parm_max_dim%dim_1%LB = 1
14906.          seat_spectrum%ice%parm_max_dim%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14906.          seat_spectrum%ice%parm_max_dim%dim_1%SM = 1
14906.          $_allo_P4(0) = 0x1000000000001L
14906.          $_allo_P4(1) = loc( seat_spectrum%ice%parm_max_dim )
14906.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
14907.          seat_spectrum%ice%n_phf%header%a_contig = 1
14907.          seat_spectrum%ice%n_phf%dim_1%LB = 1
14907.          seat_spectrum%ice%n_phf%dim_1%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14907.          seat_spectrum%ice%n_phf%dim_1%SM = 1
14907.          $_allo_P5(0) = 0x1000000000001L
14907.          $_allo_P5(1) = loc( seat_spectrum%ice%n_phf )
14907.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
14908.          seat_spectrum%ice%parm_list%header%a_contig = 1
14908.          seat_spectrum%ice%parm_list%dim_1%LB = 1
14908.          seat_spectrum%ice%parm_list%dim_1%EX = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14908.          seat_spectrum%ice%parm_list%dim_1%SM = 1
14908.          seat_spectrum%ice%parm_list%dim_2%LB = 1
14908.          seat_spectrum%ice%parm_list%dim_2%EX = ( max( 0, (nd_band%base_addr)(0) ) )
14908.          seat_spectrum%ice%parm_list%dim_2%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) )
14908.          seat_spectrum%ice%parm_list%dim_3%LB = 1
14908.          seat_spectrum%ice%parm_list%dim_3%EX = ( max( 0, (nd_ice_type%base_addr)(0) ) )
14908.          seat_spectrum%ice%parm_list%dim_3%SM = ( max( 0, (nd_cloud_parameter%base_addr)(0) ) * max( 0, (nd_band%base_addr)(0) ) )
14908.          $_allo_P6(0) = 0x1000000000001L
14908.          $_allo_P6(1) = loc( seat_spectrum%ice%parm_list )
14908.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
14908.       endif
14913.       $Unit_temp_O0 = iu_spc
14913.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$705,  _substr(t$704,1,33), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
14913.       i_ice = $_IOitem_P0(0)
14913.       i_parametrization_ice = $_IOitem_P0(1)
14913.       i_dummy = $_IOitem_P0(2)
14915.       if ( i_ice > (nd_ice_type%base_addr)(0) ) then
14916.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$707,  _substr(t$706,1,12), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_2', 0x800600000000L ), _iotype( 'The indexing number of an ice crystal exceeds the maximum permitted value:', 0x800600000000L ), _iotype( 'Increase npd_ice_type and recompile.', 0x800600000000L ) ) )
14921.          seat_ierr = 1
14923.       else if ( i_parametrization_ice == 1 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 6 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 7 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 9 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 10 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 11 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 12 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 4 ) then
14923.          goto 10
14923.       else if ( i_parametrization_ice == 5 ) then
14923.    10    continue
14937.          if ( i_ice < seat_spectrum%ice%n_phf%dim_1%LB .or. i_ice > seat_spectrum%ice%n_phf%dim_1%LB + seat_spectrum%ice%n_phf%dim_1%EX + -1 ) then
14937.              _substr(t$7346,1,13) = 'Rad_UKMO.f90'
14937.              _substr(t$7347,1,6) = 'N_PHF'
14937.             t$7348 = seat_spectrum%ice%n_phf%dim_1%LB
14937.             t$7349 = seat_spectrum%ice%n_phf%dim_1%LB + seat_spectrum%ice%n_phf%dim_1%EX + -1
14937.             t$7350 = i_ice
14937.             call _bounds_error(  _substr(t$7346,1,13), 14937,  _substr(t$7347,1,6), 1, t$7348, t$7349, t$7350, t$7345 )
14937.          endif
14937.          $Unit_temp_O1 = iu_spc
14937.          _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$709,  _substr(t$708,1,9), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%n_phf%base_addr)(i_ice, 0), 0x2000200000000L ) ) )
14939.          $Unit_temp_O3 = iu_spc
14939.          _fread( _clist( 0, 0, 2, $Unit_temp_O3, Null_Arg, Null_Arg, t$711,  _substr(t$710,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14940.          if ( i_ice < seat_spectrum%ice%parm_min_dim%dim_1%LB .or. i_ice > seat_spectrum%ice%parm_min_dim%dim_1%LB + seat_spectrum%ice%parm_min_dim%dim_1%EX + -1 ) then
14940.              _substr(t$7352,1,13) = 'Rad_UKMO.f90'
14940.              _substr(t$7353,1,13) = 'PARM_MIN_DIM'
14940.             t$7348 = seat_spectrum%ice%parm_min_dim%dim_1%LB
14940.             t$7349 = seat_spectrum%ice%parm_min_dim%dim_1%LB + seat_spectrum%ice%parm_min_dim%dim_1%EX + -1
14940.             t$7350 = i_ice
14940.             call _bounds_error(  _substr(t$7352,1,13), 14940,  _substr(t$7353,1,13), 1, t$7348, t$7349, t$7350, t$7351 )
14940.          endif
14939.          $Unit_temp_O4 = iu_spc
14939.          _fread( _clist( 0, 0, 0, $Unit_temp_O4, Null_Arg, Null_Arg, t$711,  _substr(t$710,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_min_dim%base_addr)(i_ice, 0), 0x804060300000000L ) ) )
14941.          if ( i_ice < seat_spectrum%ice%parm_max_dim%dim_1%LB .or. i_ice > seat_spectrum%ice%parm_max_dim%dim_1%LB + seat_spectrum%ice%parm_max_dim%dim_1%EX + -1 ) then
14941.              _substr(t$7355,1,13) = 'Rad_UKMO.f90'
14941.              _substr(t$7356,1,13) = 'PARM_MAX_DIM'
14941.             t$7357 = seat_spectrum%ice%parm_max_dim%dim_1%LB
14941.             t$7358 = seat_spectrum%ice%parm_max_dim%dim_1%LB + seat_spectrum%ice%parm_max_dim%dim_1%EX + -1
14941.             t$7359 = i_ice
14941.             call _bounds_error(  _substr(t$7355,1,13), 14941,  _substr(t$7356,1,13), 1, t$7357, t$7358, t$7359, t$7354 )
14941.          endif
14939.          $Unit_temp_O6 = iu_spc
14939.          _fread( _clist( 0, 0, 0, $Unit_temp_O6, Null_Arg, Null_Arg, t$711,  _substr(t$710,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_max_dim%base_addr)(i_ice, 0), 0x804060300000000L ) ) )
14939.          $Unit_temp_O8 = iu_spc
14939.          _fread( _clist( 0, 0, 1, $Unit_temp_O8, Null_Arg, Null_Arg, t$711,  _substr(t$710,1,27), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14943.          $t_S1 = seat_spectrum%basic%n_band
14943.          i = 1
14943.          if ( seat_spectrum%basic%n_band > 0 ) then
14943.             $I_L14943_8 = 0
14943.             do
14943.                i = ( 1 + $I_L14943_8 )
14944.                $Unit_temp_O9 = iu_spc
14944.                _fread( _clist( 0, 0, 3, $Unit_temp_O9, Null_Arg, Null_Arg, t$713,  _substr(t$712,1,2), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
14946.                if ( ( 1 < seat_spectrum%ice%parm_list%dim_1%LB .or. 0 >= seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1 .or. i_dummy < seat_spectrum%ice%parm_list%dim_1%LB .or. i_dummy > seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1 ) .and. i_dummy > 0 ) then
14946.                    _substr(t$7365,1,13) = 'Rad_UKMO.f90'
14946.                    _substr(t$7366,1,10) = 'PARM_LIST'
14946.                   t$7348 = seat_spectrum%ice%parm_list%dim_1%LB
14946.                   t$7349 = seat_spectrum%ice%parm_list%dim_1%LB + seat_spectrum%ice%parm_list%dim_1%EX + -1
14946.                   t$7350 = i_dummy
14946.                   call _rbounds_error(  _substr(t$7365,1,13), 14946,  _substr(t$7366,1,10), 1, t$7348, t$7349, 1, t$7350, 1, t$7364 )
14946.                endif
14946.                if ( i < seat_spectrum%ice%parm_list%dim_2%LB .or. i > seat_spectrum%ice%parm_list%dim_2%LB + seat_spectrum%ice%parm_list%dim_2%EX + -1 ) then
14946.                    _substr(t$7368,1,13) = 'Rad_UKMO.f90'
14946.                    _substr(t$7369,1,10) = 'PARM_LIST'
14946.                   t$7357 = seat_spectrum%ice%parm_list%dim_2%LB
14946.                   t$7358 = seat_spectrum%ice%parm_list%dim_2%LB + seat_spectrum%ice%parm_list%dim_2%EX + -1
14946.                   t$7359 = i
14946.                   call _bounds_error(  _substr(t$7368,1,13), 14946,  _substr(t$7369,1,10), 2, t$7357, t$7358, t$7359, t$7367 )
14946.                endif
14946.                if ( i_ice < seat_spectrum%ice%parm_list%dim_3%LB .or. i_ice > seat_spectrum%ice%parm_list%dim_3%LB + seat_spectrum%ice%parm_list%dim_3%EX + -1 ) then
14946.                    _substr(t$7371,1,13) = 'Rad_UKMO.f90'
14946.                    _substr(t$7372,1,10) = 'PARM_LIST'
14946.                   t$7373 = seat_spectrum%ice%parm_list%dim_3%LB
14946.                   t$7374 = seat_spectrum%ice%parm_list%dim_3%LB + seat_spectrum%ice%parm_list%dim_3%EX + -1
14946.                   t$7375 = i_ice
14946.                   call _bounds_error(  _substr(t$7371,1,13), 14946,  _substr(t$7372,1,10), 3, t$7373, t$7374, t$7375, t$7370 )
14946.                endif
14945.                $Unit_temp_O10 = iu_spc
14945.                t$7363 = _fread( _clist( 0, 1, 3, $Unit_temp_O10, ios, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%ice%parm_list%base_addr)(:( 1, i_dummy, 1 ), i, i_ice, 0), 0x804060300000000L ) ) )
14948.                if ( ios /= 0 ) then
14949.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$715,  _substr(t$714,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_2', 0x800600000000L ) ) )
14951.                   _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'Data for ice crystals are not in the correct format.', 0x800600000000L ) ) )
14953.                   seat_ierr = 1
14953.                   goto 30
14953.                endif
14956.                $I_L14943_8 = 1 + $I_L14943_8
14956.                if ( $I_L14943_8 >= $t_S1 ) exit
14956.             enddo
14956.             i = ( 1 + $t_S1 )
14956.             goto 20
14956.          else
14956.    20       continue
14969.             (seat_spectrum%ice%l_ice_type%base_addr)(i_ice, 0) = .true.
14970.             (seat_spectrum%ice%i_ice_parm%base_addr)(i_ice, 0) = i_parametrization_ice
14970.          endif
14970.       else
14959.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$717,  _substr(t$716,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_12_0_2', 0x800600000000L ) ) )
14961.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$719,  _substr(t$718,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'An unknown parametrization scheme has been specified.', 0x800600000000L ) ) )
14963.          seat_ierr = 1
14963.       endif
14963.    30 continue
14975.       return
14975.       end
14975.       
14980.       
14980.       subroutine read_block_14_0_0_int
14994.       (nd_exclude%base_addr)(0) = 2
14995.       seat_spectrum%basic%index_exclude%header%a_contig = 1
14995.       seat_spectrum%basic%index_exclude%dim_1%LB = 1
14995.       seat_spectrum%basic%index_exclude%dim_1%EX = 2
14995.       seat_spectrum%basic%index_exclude%dim_1%SM = 1
14995.       seat_spectrum%basic%index_exclude%dim_2%LB = 1
14995.       seat_spectrum%basic%index_exclude%dim_2%EX = _zla( 0, (nd_band%base_addr)(0) )
14995.       seat_spectrum%basic%index_exclude%dim_2%SM = 2
14995.       $_allo_P0(0) = 0x1000000000001L
14995.       $_allo_P0(1) = loc( seat_spectrum%basic%index_exclude )
14995.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
14997.       $Unit_temp_O0 = iu_spc
14997.       _fread( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$721,  _substr(t$720,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
15000.       $t_S2 = seat_spectrum%basic%n_band
15000.       i = 1
15000.       if ( seat_spectrum%basic%n_band > 0 ) then
15000.          $I_L15000_10 = 0
15000.          do
15000.             i = ( 1 + $I_L15000_10 )
15001.             $Unit_temp_O1 = iu_spc
15001.             t$7379 = _fread( _clist( 0, 1, 2, $Unit_temp_O1, ios, Null_Arg, t$723,  _substr(t$722,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
15001.             if ( t$7379 == 0 ) then
15001.                $Unit_temp_O2 = iu_spc
15001.                t$7379 = _fread( _clist( 0, 1, 0, $Unit_temp_O2, ios, Null_Arg, t$723,  _substr(t$722,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( idum, 0x2000200000000L ) ) )
15001.                if ( t$7379 == 0 ) then
15002.                   if ( ( 1 + $I_L15000_10 ) < seat_spectrum%basic%n_band_exclude%dim_1%LB .or. ( 1 + $I_L15000_10 ) > seat_spectrum%basic%n_band_exclude%dim_1%EX + seat_spectrum%basic%n_band_exclude%dim_1%LB + -1 ) then
15002.                       _substr(t$7381,1,13) = 'Rad_UKMO.f90'
15002.                       _substr(t$7382,1,15) = 'N_BAND_EXCLUDE'
15002.                      t$7383 = seat_spectrum%basic%n_band_exclude%dim_1%LB
15002.                      t$7384 = seat_spectrum%basic%n_band_exclude%dim_1%EX + seat_spectrum%basic%n_band_exclude%dim_1%LB + -1
15002.                      t$7385 = 1 + $I_L15000_10
15002.                      call _bounds_error(  _substr(t$7381,1,13), 15002,  _substr(t$7382,1,15), 1, t$7383, t$7384, t$7385, t$7380 )
15002.                   endif
15001.                   $Unit_temp_O3 = iu_spc
15001.                   t$7379 = _fread( _clist( 0, 1, 0, $Unit_temp_O3, ios, Null_Arg, t$723,  _substr(t$722,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%basic%n_band_exclude%base_addr)(i, 0), 0x2000200000000L ) ) )
15001.                   if ( t$7379 == 0 ) then
15001.                      $Unit_temp_O5 = iu_spc
15001.                      t$7379 = _fread( _clist( 0, 1, 1, $Unit_temp_O5, ios, Null_Arg, t$723,  _substr(t$722,1,12), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
15001.                   endif
15001.                endif
15001.             endif
15003.             if ( ios /= 0 ) then
15004.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$725,  _substr(t$724,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error in subroutine read_block_14_0_0', 0x800600000000L ) ) )
15006.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'The list of excluded bands is not correct.', 0x800600000000L ) ) )
15008.                seat_ierr = 1
15008.                goto 10
15008.             endif
15011.             if ( (seat_spectrum%basic%n_band_exclude%base_addr)(i, 0) > 0 ) then
15012.                $Unit_temp_O6 = iu_spc
15012.                _fread( _clist( 0, 0, 2, $Unit_temp_O6, Null_Arg, Null_Arg, t$727,  _substr(t$726,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
15014.                if ( i < seat_spectrum%basic%n_band_exclude%dim_1%LB .or. i > seat_spectrum%basic%n_band_exclude%dim_1%EX + seat_spectrum%basic%n_band_exclude%dim_1%LB + -1 ) then
15014.                    _substr(t$7387,1,13) = 'Rad_UKMO.f90'
15014.                    _substr(t$7388,1,15) = 'N_BAND_EXCLUDE'
15014.                   t$7383 = seat_spectrum%basic%n_band_exclude%dim_1%LB
15014.                   t$7384 = seat_spectrum%basic%n_band_exclude%dim_1%EX + seat_spectrum%basic%n_band_exclude%dim_1%LB + -1
15014.                   t$7385 = i
15014.                   call _bounds_error(  _substr(t$7387,1,13), 15014,  _substr(t$7388,1,15), 1, t$7383, t$7384, t$7385, t$7386 )
15014.                endif
15012.                $t_S1 = (seat_spectrum%basic%n_band_exclude%base_addr)(i, 0)
15012.                if ( $t_S1 > 0 ) then
15012.                   $I_L15012_8 = 0
15012.                   do
15013.                      if ( ( 1 + $I_L15012_8 ) < seat_spectrum%basic%index_exclude%dim_1%LB .or. ( 1 + $I_L15012_8 ) > seat_spectrum%basic%index_exclude%dim_1%LB + seat_spectrum%basic%index_exclude%dim_1%EX + -1 ) then
15013.                          _substr(t$7393,1,13) = 'Rad_UKMO.f90'
15013.                          _substr(t$7394,1,14) = 'INDEX_EXCLUDE'
15013.                         t$7395 = seat_spectrum%basic%index_exclude%dim_1%LB
15013.                         t$7396 = seat_spectrum%basic%index_exclude%dim_1%LB + seat_spectrum%basic%index_exclude%dim_1%EX + -1
15013.                         t$7397 = 1 + $I_L15012_8
15013.                         call _bounds_error(  _substr(t$7393,1,13), 15013,  _substr(t$7394,1,14), 1, t$7395, t$7396, t$7397, t$7392 )
15013.                      endif
15013.                      if ( i < seat_spectrum%basic%index_exclude%dim_2%LB .or. i > seat_spectrum%basic%index_exclude%dim_2%LB + seat_spectrum%basic%index_exclude%dim_2%EX + -1 ) then
15013.                          _substr(t$7399,1,13) = 'Rad_UKMO.f90'
15013.                          _substr(t$7400,1,14) = 'INDEX_EXCLUDE'
15013.                         t$7401 = seat_spectrum%basic%index_exclude%dim_2%LB
15013.                         t$7402 = seat_spectrum%basic%index_exclude%dim_2%LB + seat_spectrum%basic%index_exclude%dim_2%EX + -1
15013.                         t$7403 = i
15013.                         call _bounds_error(  _substr(t$7399,1,13), 15013,  _substr(t$7400,1,14), 2, t$7401, t$7402, t$7403, t$7398 )
15013.                      endif
15012.                      $Unit_temp_O7 = iu_spc
15012.                      _fread( _clist( 0, 0, 0, $Unit_temp_O7, Null_Arg, Null_Arg, t$727,  _substr(t$726,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( (seat_spectrum%basic%index_exclude%base_addr)(1 + $I_L15012_8, i, 0), 0x2000200000000L ) ) )
15012.                      $I_L15012_8 = 1 + $I_L15012_8
15012.                      if ( $I_L15012_8 >= $t_S1 ) exit
15012.                   enddo
15012.                endif
15012.                $Unit_temp_O10 = iu_spc
15012.                _fread( _clist( 0, 0, 1, $Unit_temp_O10, Null_Arg, Null_Arg, t$727,  _substr(t$726,1,16), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), Null_Arg )
15012.             endif
15016.             if ( ios /= 0 ) then
15017.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$729,  _substr(t$728,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** error in subroutine read_block_14_0_0', 0x800600000000L ) ) )
15019.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'The list of excluded bands is not correct.', 0x800600000000L ) ) )
15021.                seat_ierr = 1
15021.                goto 10
15021.             endif
15024.             $I_L15000_10 = 1 + $I_L15000_10
15024.             if ( $I_L15000_10 >= $t_S2 ) exit
15024.          enddo
15024.          i = ( 1 + $t_S2 )
15024.       endif
15024.    10 continue
15029.       return
15029.       end
15029.       
15032.       
15032.       subroutine read_spectrum_90( file_spectral, spectrum, ierr )
15032.       seatp_ierr = loc( ierr )
15032.       seatp_spectrum = loc( spectrum )
13154.       if ( t$23 == 0 ) then
13154.          t$2477(1) = 4
13154.          t$2478(1) = 0
13154.          t$2479(1) = 0
13154.          t$2474(1) = int( loc( t$10 ), 8 )
13154.          t$2475(1) = 0
13154.          t$2476(1) = int( loc( t$2473 ), 8 )
13154.          t$23 = __get_dynamic_type( 3, t$2474(1), t$2477(1), 1, t$2475(1), t$2476(1), t$2478(1), t$2479(1) )
13154.       endif
13154.       if ( t$26 == 0 ) then
13154.          t$2486(1) = 4
13154.          t$2487(1) = 0
13154.          t$2488(1) = 4
13154.          t$2483(1) = int( loc( t$7 ), 8 )
13154.          t$2484(1) = 0
13154.          t$2485(1) = int( loc( t$2481 ), 8 )
13154.          t$26 = __get_dynamic_type( 3, t$2483(1), t$2486(1), 1, t$2484(1), t$2485(1), t$2487(1), t$2488(1) )
13154.       endif
13154.       if ( t$17 == 0 ) then
13154.          t$2495(1) = 4
13154.          t$2496(1) = 0
13154.          t$2497(1) = 1
13154.          t$2492(1) = int( loc( t$11 ), 8 )
13154.          t$2493(1) = 0
13154.          t$2494(1) = int( loc( t$2490 ), 8 )
13154.          t$17 = __get_dynamic_type( 3, t$2492(1), t$2495(1), 1, t$2493(1), t$2494(1), t$2496(1), t$2497(1) )
13154.       endif
13154.       if ( t$18 == 0 ) then
13154.          t$2504(1) = 4
13154.          t$2505(1) = 0
13154.          t$2506(1) = 1
13154.          t$2501(1) = int( loc( t$12 ), 8 )
13154.          t$2502(1) = 0
13154.          t$2503(1) = int( loc( t$2499 ), 8 )
13154.          t$18 = __get_dynamic_type( 3, t$2501(1), t$2504(1), 1, t$2502(1), t$2503(1), t$2505(1), t$2506(1) )
13154.       endif
13154.       if ( t$21 == 0 ) then
13154.          t$2513(1) = 4
13154.          t$2514(1) = 0
13154.          t$2515(1) = 11
13154.          t$2510(1) = int( loc( t$13 ), 8 )
13154.          t$2511(1) = 0
13154.          t$2512(1) = int( loc( t$2508 ), 8 )
13154.          t$21 = __get_dynamic_type( 3, t$2510(1), t$2513(1), 1, t$2511(1), t$2512(1), t$2514(1), t$2515(1) )
13154.       endif
13154.       if ( t$19 == 0 ) then
13154.          t$2522(1) = 4
13154.          t$2523(1) = 0
13154.          t$2524(1) = 1
13154.          t$2519(1) = int( loc( t$14 ), 8 )
13154.          t$2520(1) = 0
13154.          t$2521(1) = int( loc( t$2517 ), 8 )
13154.          t$19 = __get_dynamic_type( 3, t$2519(1), t$2522(1), 1, t$2520(1), t$2521(1), t$2523(1), t$2524(1) )
13154.       endif
13154.       if ( t$25 == 0 ) then
13154.          t$2531(1) = 4
13154.          t$2532(1) = 0
13154.          t$2533(1) = 7
13154.          t$2528(1) = int( loc( t$8 ), 8 )
13154.          t$2529(1) = 0
13154.          t$2530(1) = int( loc( t$2526 ), 8 )
13154.          t$25 = __get_dynamic_type( 3, t$2528(1), t$2531(1), 1, t$2529(1), t$2530(1), t$2532(1), t$2533(1) )
13154.       endif
13154.       if ( t$24 == 0 ) then
13154.          t$2540(1) = 4
13154.          t$2541(1) = 0
13154.          t$2542(1) = 9
13154.          t$2537(1) = int( loc( t$6 ), 8 )
13154.          t$2538(1) = 0
13154.          t$2539(1) = int( loc( t$2535 ), 8 )
13154.          t$24 = __get_dynamic_type( 3, t$2537(1), t$2540(1), 1, t$2538(1), t$2539(1), t$2541(1), t$2542(1) )
13154.       endif
13154.       if ( t$22 == 0 ) then
13154.          t$2549(1) = 4
13154.          t$2550(1) = 0
13154.          t$2551(1) = 6
13154.          t$2546(1) = int( loc( t$15 ), 8 )
13154.          t$2547(1) = 0
13154.          t$2548(1) = int( loc( t$2544 ), 8 )
13154.          t$22 = __get_dynamic_type( 3, t$2546(1), t$2549(1), 1, t$2547(1), t$2548(1), t$2550(1), t$2551(1) )
13154.       endif
13154.       if ( t$20 == 0 ) then
13154.          t$2558(1) = 4
13154.          t$2559(1) = 0
13154.          t$2560(1) = 6
13154.          t$2555(1) = int( loc( t$16 ), 8 )
13154.          t$2556(1) = 0
13154.          t$2557(1) = int( loc( t$2553 ), 8 )
13154.          t$20 = __get_dynamic_type( 3, t$2555(1), t$2558(1), 1, t$2556(1), t$2557(1), t$2559(1), t$2560(1) )
13154.       endif
13154.       if ( t$27 == 0 ) then
13154.          t$2566(1) = 4
13154.          t$2567(1) = 0
13154.          t$2568(1) = 0
13154.          t$2563(1) = int( loc( t$9 ), 8 )
13154.          t$2564(1) = 0
13154.          t$2565(1) = int( loc( t$2562 ), 8 )
13154.          t$27 = __get_dynamic_type( 3, t$2563(1), t$2566(1), 1, t$2564(1), t$2565(1), t$2567(1), t$2568(1) )
13154.       endif
13199.       nd_aerosol_species%header%el_len = 32
13199.       nd_aerosol_species%header%assoc = 0
13199.       nd_aerosol_species%header%ptr_alloc = 0
13199.       nd_aerosol_species%header%p_or_a = 1
13199.       nd_aerosol_species%header%a_contig = 0
13199.       nd_aerosol_species%header%dv_versn = 2
13199.       nd_aerosol_species%header%dv_smunit = 32
13199.       nd_aerosol_species%header%d_type = 0
13199.       nd_aerosol_species%header%n_params = 0
13199.       nd_aerosol_species%header%pad_codim = 0
13199.       nd_aerosol_species%header%n_codim = 0
13199.       nd_aerosol_species%header%pad_dim = 0
13199.       nd_aerosol_species%header%n_dim = 0
13199.       nd_aerosol_species%header%d_type_idx = 10
13199.       nd_aerosol_species%header%typ_code = 131074
13199.       nd_aerosol_species%header%orig_base = 0
13199.       nd_aerosol_species%header%orig_size = 0
13219.       nd_band%header%el_len = 32
13219.       nd_band%header%assoc = 0
13219.       nd_band%header%ptr_alloc = 0
13219.       nd_band%header%p_or_a = 1
13219.       nd_band%header%a_contig = 0
13219.       nd_band%header%dv_versn = 2
13219.       nd_band%header%dv_smunit = 32
13219.       nd_band%header%d_type = 0
13219.       nd_band%header%n_params = 0
13219.       nd_band%header%pad_codim = 0
13219.       nd_band%header%n_codim = 0
13219.       nd_band%header%pad_dim = 0
13219.       nd_band%header%n_dim = 0
13219.       nd_band%header%d_type_idx = 10
13219.       nd_band%header%typ_code = 131074
13219.       nd_band%header%orig_base = 0
13219.       nd_band%header%orig_size = 0
13209.       nd_cloud_parameter%header%el_len = 32
13209.       nd_cloud_parameter%header%assoc = 0
13209.       nd_cloud_parameter%header%ptr_alloc = 0
13209.       nd_cloud_parameter%header%p_or_a = 1
13209.       nd_cloud_parameter%header%a_contig = 0
13209.       nd_cloud_parameter%header%dv_versn = 2
13209.       nd_cloud_parameter%header%dv_smunit = 32
13209.       nd_cloud_parameter%header%d_type = 0
13209.       nd_cloud_parameter%header%n_params = 0
13209.       nd_cloud_parameter%header%pad_codim = 0
13209.       nd_cloud_parameter%header%n_codim = 0
13209.       nd_cloud_parameter%header%pad_dim = 0
13209.       nd_cloud_parameter%header%n_dim = 0
13209.       nd_cloud_parameter%header%d_type_idx = 10
13209.       nd_cloud_parameter%header%typ_code = 131074
13209.       nd_cloud_parameter%header%orig_base = 0
13209.       nd_cloud_parameter%header%orig_size = 0
13211.       nd_continuum%header%el_len = 32
13211.       nd_continuum%header%assoc = 0
13211.       nd_continuum%header%ptr_alloc = 0
13211.       nd_continuum%header%p_or_a = 1
13211.       nd_continuum%header%a_contig = 0
13211.       nd_continuum%header%dv_versn = 2
13211.       nd_continuum%header%dv_smunit = 32
13211.       nd_continuum%header%d_type = 0
13211.       nd_continuum%header%n_params = 0
13211.       nd_continuum%header%pad_codim = 0
13211.       nd_continuum%header%n_codim = 0
13211.       nd_continuum%header%pad_dim = 0
13211.       nd_continuum%header%n_dim = 0
13211.       nd_continuum%header%d_type_idx = 10
13211.       nd_continuum%header%typ_code = 131074
13211.       nd_continuum%header%orig_base = 0
13211.       nd_continuum%header%orig_size = 0
13201.       nd_drop_type%header%el_len = 32
13201.       nd_drop_type%header%assoc = 0
13201.       nd_drop_type%header%ptr_alloc = 0
13201.       nd_drop_type%header%p_or_a = 1
13201.       nd_drop_type%header%a_contig = 0
13201.       nd_drop_type%header%dv_versn = 2
13201.       nd_drop_type%header%dv_smunit = 32
13201.       nd_drop_type%header%d_type = 0
13201.       nd_drop_type%header%n_params = 0
13201.       nd_drop_type%header%pad_codim = 0
13201.       nd_drop_type%header%n_codim = 0
13201.       nd_drop_type%header%pad_dim = 0
13201.       nd_drop_type%header%n_dim = 0
13201.       nd_drop_type%header%d_type_idx = 10
13201.       nd_drop_type%header%typ_code = 131074
13201.       nd_drop_type%header%orig_base = 0
13201.       nd_drop_type%header%orig_size = 0
13221.       nd_exclude%header%el_len = 32
13221.       nd_exclude%header%assoc = 0
13221.       nd_exclude%header%ptr_alloc = 0
13221.       nd_exclude%header%p_or_a = 1
13221.       nd_exclude%header%a_contig = 0
13221.       nd_exclude%header%dv_versn = 2
13221.       nd_exclude%header%dv_smunit = 32
13221.       nd_exclude%header%d_type = 0
13221.       nd_exclude%header%n_params = 0
13221.       nd_exclude%header%pad_codim = 0
13221.       nd_exclude%header%n_codim = 0
13221.       nd_exclude%header%pad_dim = 0
13221.       nd_exclude%header%n_dim = 0
13221.       nd_exclude%header%d_type_idx = 10
13221.       nd_exclude%header%typ_code = 131074
13221.       nd_exclude%header%orig_base = 0
13221.       nd_exclude%header%orig_size = 0
13213.       nd_humidity%header%el_len = 32
13213.       nd_humidity%header%assoc = 0
13213.       nd_humidity%header%ptr_alloc = 0
13213.       nd_humidity%header%p_or_a = 1
13213.       nd_humidity%header%a_contig = 0
13213.       nd_humidity%header%dv_versn = 2
13213.       nd_humidity%header%dv_smunit = 32
13213.       nd_humidity%header%d_type = 0
13213.       nd_humidity%header%n_params = 0
13213.       nd_humidity%header%pad_codim = 0
13213.       nd_humidity%header%n_codim = 0
13213.       nd_humidity%header%pad_dim = 0
13213.       nd_humidity%header%n_dim = 0
13213.       nd_humidity%header%d_type_idx = 10
13213.       nd_humidity%header%typ_code = 131074
13213.       nd_humidity%header%orig_base = 0
13213.       nd_humidity%header%orig_size = 0
13203.       nd_ice_type%header%el_len = 32
13203.       nd_ice_type%header%assoc = 0
13203.       nd_ice_type%header%ptr_alloc = 0
13203.       nd_ice_type%header%p_or_a = 1
13203.       nd_ice_type%header%a_contig = 0
13203.       nd_ice_type%header%dv_versn = 2
13203.       nd_ice_type%header%dv_smunit = 32
13203.       nd_ice_type%header%d_type = 0
13203.       nd_ice_type%header%n_params = 0
13203.       nd_ice_type%header%pad_codim = 0
13203.       nd_ice_type%header%n_codim = 0
13203.       nd_ice_type%header%pad_dim = 0
13203.       nd_ice_type%header%n_dim = 0
13203.       nd_ice_type%header%d_type_idx = 10
13203.       nd_ice_type%header%typ_code = 131074
13203.       nd_ice_type%header%orig_base = 0
13203.       nd_ice_type%header%orig_size = 0
13223.       nd_k_term%header%el_len = 32
13223.       nd_k_term%header%assoc = 0
13223.       nd_k_term%header%ptr_alloc = 0
13223.       nd_k_term%header%p_or_a = 1
13223.       nd_k_term%header%a_contig = 0
13223.       nd_k_term%header%dv_versn = 2
13223.       nd_k_term%header%dv_smunit = 32
13223.       nd_k_term%header%d_type = 0
13223.       nd_k_term%header%n_params = 0
13223.       nd_k_term%header%pad_codim = 0
13223.       nd_k_term%header%n_codim = 0
13223.       nd_k_term%header%pad_dim = 0
13223.       nd_k_term%header%n_dim = 0
13223.       nd_k_term%header%d_type_idx = 10
13223.       nd_k_term%header%typ_code = 131074
13223.       nd_k_term%header%orig_base = 0
13223.       nd_k_term%header%orig_size = 0
13207.       nd_phase_term%header%el_len = 32
13207.       nd_phase_term%header%assoc = 0
13207.       nd_phase_term%header%ptr_alloc = 0
13207.       nd_phase_term%header%p_or_a = 1
13207.       nd_phase_term%header%a_contig = 0
13207.       nd_phase_term%header%dv_versn = 2
13207.       nd_phase_term%header%dv_smunit = 32
13207.       nd_phase_term%header%d_type = 0
13207.       nd_phase_term%header%n_params = 0
13207.       nd_phase_term%header%pad_codim = 0
13207.       nd_phase_term%header%n_codim = 0
13207.       nd_phase_term%header%pad_dim = 0
13207.       nd_phase_term%header%n_dim = 0
13207.       nd_phase_term%header%d_type_idx = 10
13207.       nd_phase_term%header%typ_code = 131074
13207.       nd_phase_term%header%orig_base = 0
13207.       nd_phase_term%header%orig_size = 0
13205.       nd_scale_variable%header%el_len = 32
13205.       nd_scale_variable%header%assoc = 0
13205.       nd_scale_variable%header%ptr_alloc = 0
13205.       nd_scale_variable%header%p_or_a = 1
13205.       nd_scale_variable%header%a_contig = 0
13205.       nd_scale_variable%header%dv_versn = 2
13205.       nd_scale_variable%header%dv_smunit = 32
13205.       nd_scale_variable%header%d_type = 0
13205.       nd_scale_variable%header%n_params = 0
13205.       nd_scale_variable%header%pad_codim = 0
13205.       nd_scale_variable%header%n_codim = 0
13205.       nd_scale_variable%header%pad_dim = 0
13205.       nd_scale_variable%header%n_dim = 0
13205.       nd_scale_variable%header%d_type_idx = 10
13205.       nd_scale_variable%header%typ_code = 131074
13205.       nd_scale_variable%header%orig_base = 0
13205.       nd_scale_variable%header%orig_size = 0
13217.       nd_species%header%el_len = 32
13217.       nd_species%header%assoc = 0
13217.       nd_species%header%ptr_alloc = 0
13217.       nd_species%header%p_or_a = 1
13217.       nd_species%header%a_contig = 0
13217.       nd_species%header%dv_versn = 2
13217.       nd_species%header%dv_smunit = 32
13217.       nd_species%header%d_type = 0
13217.       nd_species%header%n_params = 0
13217.       nd_species%header%pad_codim = 0
13217.       nd_species%header%n_codim = 0
13217.       nd_species%header%pad_dim = 0
13217.       nd_species%header%n_dim = 0
13217.       nd_species%header%d_type_idx = 10
13217.       nd_species%header%typ_code = 131074
13217.       nd_species%header%orig_base = 0
13217.       nd_species%header%orig_size = 0
13154.       nd_thermal_coeff%header%el_len = 32
13154.       nd_thermal_coeff%header%assoc = 0
13154.       nd_thermal_coeff%header%ptr_alloc = 0
13154.       nd_thermal_coeff%header%p_or_a = 1
13154.       nd_thermal_coeff%header%a_contig = 0
13154.       nd_thermal_coeff%header%dv_versn = 2
13154.       nd_thermal_coeff%header%dv_smunit = 32
13154.       nd_thermal_coeff%header%d_type = 0
13154.       nd_thermal_coeff%header%n_params = 0
13154.       nd_thermal_coeff%header%pad_codim = 0
13154.       nd_thermal_coeff%header%n_codim = 0
13154.       nd_thermal_coeff%header%pad_dim = 0
13154.       nd_thermal_coeff%header%n_dim = 0
13154.       nd_thermal_coeff%header%d_type_idx = 10
13154.       nd_thermal_coeff%header%typ_code = 131074
13154.       nd_thermal_coeff%header%orig_base = 0
13154.       nd_thermal_coeff%header%orig_size = 0
13229.       nd_band%header%a_contig = 0
13229.       nd_band%header%assoc = 1
13229.       nd_band%header%d_type_idx = 10
13229.       nd_band%header%ptr_alloc = 0
13229.       nd_band%header%orig_base = 0
13229.       nd_band%header%orig_size = 0
13229.       nd_band%base_addr = loc( seat_spectrum%dim%nd_band )
13230.       nd_exclude%header%a_contig = 0
13230.       nd_exclude%header%assoc = 1
13230.       nd_exclude%header%d_type_idx = 10
13230.       nd_exclude%header%ptr_alloc = 0
13230.       nd_exclude%header%orig_base = 0
13230.       nd_exclude%header%orig_size = 0
13230.       nd_exclude%base_addr = loc( seat_spectrum%dim%nd_exclude )
13231.       nd_k_term%header%a_contig = 0
13231.       nd_k_term%header%assoc = 1
13231.       nd_k_term%header%d_type_idx = 10
13231.       nd_k_term%header%ptr_alloc = 0
13231.       nd_k_term%header%orig_base = 0
13231.       nd_k_term%header%orig_size = 0
13231.       nd_k_term%base_addr = loc( seat_spectrum%dim%nd_k_term )
13232.       nd_species%header%a_contig = 0
13232.       nd_species%header%assoc = 1
13232.       nd_species%header%d_type_idx = 10
13232.       nd_species%header%ptr_alloc = 0
13232.       nd_species%header%orig_base = 0
13232.       nd_species%header%orig_size = 0
13232.       nd_species%base_addr = loc( seat_spectrum%dim%nd_species )
13233.       nd_scale_variable%header%a_contig = 0
13233.       nd_scale_variable%header%assoc = 1
13233.       nd_scale_variable%header%d_type_idx = 10
13233.       nd_scale_variable%header%ptr_alloc = 0
13233.       nd_scale_variable%header%orig_base = 0
13233.       nd_scale_variable%header%orig_size = 0
13233.       nd_scale_variable%base_addr = loc( seat_spectrum%dim%nd_scale_variable )
13234.       nd_continuum%header%a_contig = 0
13234.       nd_continuum%header%assoc = 1
13234.       nd_continuum%header%d_type_idx = 10
13234.       nd_continuum%header%ptr_alloc = 0
13234.       nd_continuum%header%orig_base = 0
13234.       nd_continuum%header%orig_size = 0
13234.       nd_continuum%base_addr = loc( seat_spectrum%dim%nd_continuum )
13235.       nd_drop_type%header%a_contig = 0
13235.       nd_drop_type%header%assoc = 1
13235.       nd_drop_type%header%d_type_idx = 10
13235.       nd_drop_type%header%ptr_alloc = 0
13235.       nd_drop_type%header%orig_base = 0
13235.       nd_drop_type%header%orig_size = 0
13235.       nd_drop_type%base_addr = loc( seat_spectrum%dim%nd_drop_type )
13236.       nd_ice_type%header%a_contig = 0
13236.       nd_ice_type%header%assoc = 1
13236.       nd_ice_type%header%d_type_idx = 10
13236.       nd_ice_type%header%ptr_alloc = 0
13236.       nd_ice_type%header%orig_base = 0
13236.       nd_ice_type%header%orig_size = 0
13236.       nd_ice_type%base_addr = loc( seat_spectrum%dim%nd_ice_type )
13237.       nd_aerosol_species%header%a_contig = 0
13237.       nd_aerosol_species%header%assoc = 1
13237.       nd_aerosol_species%header%d_type_idx = 10
13237.       nd_aerosol_species%header%ptr_alloc = 0
13237.       nd_aerosol_species%header%orig_base = 0
13237.       nd_aerosol_species%header%orig_size = 0
13237.       nd_aerosol_species%base_addr = loc( seat_spectrum%dim%nd_aerosol_species )
13238.       nd_thermal_coeff%header%a_contig = 0
13238.       nd_thermal_coeff%header%assoc = 1
13238.       nd_thermal_coeff%header%d_type_idx = 10
13238.       nd_thermal_coeff%header%ptr_alloc = 0
13238.       nd_thermal_coeff%header%orig_base = 0
13238.       nd_thermal_coeff%header%orig_size = 0
13238.       nd_thermal_coeff%base_addr = loc( seat_spectrum%dim%nd_thermal_coeff )
13239.       nd_cloud_parameter%header%a_contig = 0
13239.       nd_cloud_parameter%header%assoc = 1
13239.       nd_cloud_parameter%header%d_type_idx = 10
13239.       nd_cloud_parameter%header%ptr_alloc = 0
13239.       nd_cloud_parameter%header%orig_base = 0
13239.       nd_cloud_parameter%header%orig_size = 0
13239.       nd_cloud_parameter%base_addr = loc( seat_spectrum%dim%nd_cloud_parameter )
13240.       nd_humidity%header%a_contig = 0
13240.       nd_humidity%header%assoc = 1
13240.       nd_humidity%header%d_type_idx = 10
13240.       nd_humidity%header%ptr_alloc = 0
13240.       nd_humidity%header%orig_base = 0
13240.       nd_humidity%header%orig_size = 0
13240.       nd_humidity%base_addr = loc( seat_spectrum%dim%nd_humidity )
13241.       nd_phase_term%header%a_contig = 0
13241.       nd_phase_term%header%assoc = 1
13241.       nd_phase_term%header%d_type_idx = 10
13241.       nd_phase_term%header%ptr_alloc = 0
13241.       nd_phase_term%header%orig_base = 0
13241.       nd_phase_term%header%orig_size = 0
13241.       nd_phase_term%base_addr = loc( seat_spectrum%dim%nd_phase_term )
13246.       seat_spectrum%dim%nd_k_term = 25
13247.       seat_spectrum%dim%nd_scale_variable = 4
13248.       seat_spectrum%dim%nd_continuum = 3
13249.       seat_spectrum%dim%nd_drop_type = 6
13250.       seat_spectrum%dim%nd_ice_type = 10
13251.       seat_spectrum%dim%nd_cloud_parameter = 501
13252.       seat_spectrum%dim%nd_humidity = 21
13258.       seat_spectrum%cont%index_water = 0
13261.       $I_L13261_8 = 0
13261. !dir$ ivdep
13261.       do
13261.          (seat_spectrum%basic%l_present)($I_L13261_8) = .false.
13261.          $I_L13261_8 = 1 + $I_L13261_8
13261.          if ( $I_L13261_8 >= 21 ) exit
13261.       enddo
13264.       t$6531(1) = 0x100000000000000L
13264.       t$6531(2) = 0
13264. !dir$ suppress  _substr(file_spectral,1,80)
13264.       t$6531(3) = int( loc(  _substr(file_spectral,1,80) ), 8 )
13264.       t$6531(4) = 80
13264.       t$6531(5) = 0
13264.       t$6531(6) = 0
13264. !dir$ suppress l_exist
13264.       t$6531(7) = int( loc( l_exist ), 8 )
13264.       t$6531(8) = 0
13264.       t$6531(9) = 0
13264.       t$6531(10) = 0
13264.       t$6531(11) = 0
13264.       t$6531(13) = 0
13264.       t$6531(15) = 0
13264.       t$6531(17) = 0
13264.       t$6531(19) = 0
13264.       t$6531(21) = 0
13264.       t$6531(23) = 0
13264.       t$6531(25) = 0
13264.       t$6531(26) = 0
13264.       t$6531(27) = 0
13264.       t$6531(29) = 0
13264.       t$6531(31) = 0
13264.       t$6531(33) = 0
13264.       t$6531(35) = 0
13264.       t$6531(37) = 0
13264.       t$6531(39) = 0
13264.       t$6531(41) = 0
13264.       t$6531(43) = 0
13264.       t$6531(44) = 0x2000500000000L
13264.       t$6531(45) = 0
13264.       t$6531(46) = 0
13264.       t$6531(47) = 0
13264.       t$6531(48) = 0
13264.       t$6531(49) = 0
13264.       t$6531(50) = 0
13264.       t$6531(52) = 0
13264.       t$6531(54) = 0
13264.       t$6531(56) = 0
13264.       t$6531(57) = 0
13264.       t$6531(58) = 0
13264.       t$6531(60) = 0
13264.       t$6531(61) = 0
13264.       t$6531(62) = 0
13264.       t$6531(63) = 0
13264.       t$6531(64) = 0
13264.       t$6531(66) = 0
13264.       t$6531(68) = 0
13264.       t$6531(69) = 0
13264.       t$6531(70) = 0
13264.       t$6530 = _inquire( t$6531 )
13265.       if ( l_exist == 0 ) then
13266.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$481,  _substr(t$480,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Spectral file does not exist.', 0x800600000000L ) ) )
13267.          seat_ierr = 6
13267.       else
13272.          call get_free_unit( seat_ierr, iu_spc )
13273.          if ( seat_ierr == 0 ) then
13276.             ios = 0
13276.             t$6533 = iu_spc
13276.              _substr(t$6534,1,4) = 'OLD'
13276.             t$6535(1) = 0x100000000000000L
13276. !dir$ suppress t$6533
13276.             t$6535(2) = int( loc( t$6533 ), 8 )
13276. !dir$ suppress ios
13276.             t$6535(3) = int( loc( ios ), 8 )
13276.             t$6535(4) = 0
13276. !dir$ suppress  _substr(file_spectral,1,80)
13276.             t$6535(5) = int( loc(  _substr(file_spectral,1,80) ), 8 )
13276.             t$6535(6) = 80
13276. !dir$ suppress  _substr(t$6534,1,3)
13276.             t$6535(7) = int( loc(  _substr(t$6534,1,3) ), 8 )
13276.             t$6535(8) = 3
13276.             t$6535(9) = 0
13276.             t$6535(11) = 0
13276.             t$6535(13) = 0
13276.             t$6535(14) = 0
13276.             t$6535(16) = 0
13276.             t$6535(18) = 0
13276.             t$6535(20) = 0
13276.             t$6535(22) = 0
13276.             t$6535(24) = 0x2000200000000L
13276.             t$6535(25) = 0
13276.             t$6535(27) = 0
13276.             t$6535(29) = 0
13276.             t$6535(31) = 0
13276.             t$6535(33) = 0
13276.             t$6535(35) = 0
13276.             t$6532 = _open( t$6535 )
13277.             if ( ios /= 0 ) then
13278.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$483,  _substr(t$482,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Spectral file could not be opened.', 0x800600000000L ) ) )
13280.                seat_ierr = 1
13280.             else
13289.                do
13290.                   $Unit_temp_O0 = iu_spc
13290.                   t$6536 = _fread( _clist( 0, 1, 3, $Unit_temp_O0, ios, Null_Arg, t$485,  _substr(t$484,1,5), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(line,1,80), 0x800600000000L ) ) )
13292.                   if ( ios /= 0 ) then
13329.                      t$6533 = iu_spc
13329.                      t$6539(1) = 0x100000000000000L
13329. !dir$ suppress t$6533
13329.                      t$6539(2) = int( loc( t$6533 ), 8 )
13329.                      t$6539(3) = 0
13329.                      t$6539(4) = 0
13329.                      t$6539(5) = 0
13329.                      t$6539(7) = 0
13329.                      t$6539(8) = 0
13329.                      t$6538 = _close( t$6539 )
13332.                      i = 1
13332.                      if ( seat_spectrum%gas%n_absorb > 0 ) then
13333.                         $SC_spectrum_I3 = seat_spectrum%cont%index_water
13332.                         $I_L13332_6 = 0
13332. !dir$ ivdep
13332.                         do
13333.                            if ( (seat_spectrum%gas%type_absorb%base_addr)(1 + $I_L13332_6, 0) == 1 ) then
13333.                               $SC_spectrum_I3 = ( 1 + $I_L13332_6 )
13333.                            endif
13334.                            $I_L13332_6 = 1 + $I_L13332_6
13333.                            if ( $I_L13332_6 >= seat_spectrum%gas%n_absorb ) exit
13333.                         enddo
13333.                         seat_spectrum%cont%index_water = $SC_spectrum_I3
13334.                         i = ( 1 + seat_spectrum%gas%n_absorb )
13334.                      endif
13337.                      nd_band%header%assoc = 0
13338.                      nd_exclude%header%assoc = 0
13339.                      nd_k_term%header%assoc = 0
13340.                      nd_species%header%assoc = 0
13341.                      nd_scale_variable%header%assoc = 0
13342.                      nd_continuum%header%assoc = 0
13343.                      nd_drop_type%header%assoc = 0
13344.                      nd_ice_type%header%assoc = 0
13345.                      nd_aerosol_species%header%assoc = 0
13346.                      nd_thermal_coeff%header%assoc = 0
13347.                      nd_cloud_parameter%header%assoc = 0
13348.                      nd_humidity%header%assoc = 0
13349.                      nd_phase_term%header%assoc = 0
13349.                      goto 10
13349.                   endif
13295.                   if (  _substr(line,1,6) == '*BLOCK' ) then
13296.                      t$6537 = _fread( _clist( 0, 1, 3,  _substr(line,1,80), ios, Null_Arg, t$487,  _substr(t$486,1,27), Null_Arg, Null_Arg, Null_Arg, 0x2000200000000L, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(char_dum,1,80), 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 2, 1 )), 0x2000200000000L ) ) )
13296.                      i_type = $_IOitem_P0(0)
13296.                      i_subtype = $_IOitem_P0(1)
13296.                      i_version = $_IOitem_P0(2)
13298.                      if ( ios == 0 ) then
13306.                         call read_block_int
13307.                         if ( seat_ierr == 0 ) then
13310.                            $Unit_temp_O1 = iu_spc
13310.                            _fread( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$491,  _substr(t$490,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype(  _substr(char_dum,1,80), 0x800600000000L ) ) )
13311.                            if (  _substr(char_dum,1,4) == '*END' ) then
13323.                               (seat_spectrum%basic%l_present)(i_type) = .true.
13325.                            else
13325.                            endif
13325.                         endif
13325.                      else
13325.                      endif
13325.                   else
13325.                   endif
13325.                enddo
13325.             endif
13325.          endif
13325.       endif
13325.    10 continue
15032.       return
15032.       end
15032.       
15153.       
15153.       subroutine ir_source( n_profile, i_layer_first, i_layer_last, source_coeff, del_planck, l_ir_source_quad, diff_planck_2, s_down, s_up, nd_profile, nd_layer, nd_source_coeff )
15055.       t$732 = nd_profile
15055.       t$733 = nd_layer
15055.       t$734 = nd_source_coeff
15095.       t$2570 = _zla( 0, nd_profile )
15055.       t$2571 = _zla( 0, nd_profile )
15095.       t$2572 = _zla( 0, nd_layer )
15055.       t$2573 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
15095.       t$2574 = _zla( 0, nd_source_coeff )
15055.       t$2575 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
15055.       t$2576 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
15122.       if ( l_ir_source_quad ) then
15124.          if ( nd_layer > 0 ) then
15125.             if ( nd_profile > 0 ) then
15124.                $I_L15124_30 = 0
15124.                do
15125.                   $I_L15125_26 = 0
15125. !dir$ ivdep
15125.                   do
15126.                      s_up(1 + $I_L15125_26, 1 + $I_L15124_30) = source_coeff(1 + $I_L15125_26, 1 + $I_L15124_30, 1) * del_planck(1 + $I_L15125_26, 1 + $I_L15124_30) + source_coeff(1 + $I_L15125_26, 1 + $I_L15124_30, 2) * diff_planck_2(1 + $I_L15125_26, 1 + $I_L15124_30)
15130.                      s_down(1 + $I_L15125_26, 1 + $I_L15124_30) = -( source_coeff(1 + $I_L15125_26, 1 + $I_L15124_30, 1) * del_planck(1 + $I_L15125_26, 1 + $I_L15124_30) ) + source_coeff(1 + $I_L15125_26, 1 + $I_L15124_30, 2) * diff_planck_2(1 + $I_L15125_26, 1 + $I_L15124_30)
15134.                      $I_L15125_26 = 1 + $I_L15125_26
15125.                      if ( $I_L15125_26 >= nd_profile ) exit
15125.                   enddo
15136.                   $I_L15124_30 = 1 + $I_L15124_30
15134.                   if ( $I_L15124_30 >= nd_layer ) exit
15134.                enddo
15134.             endif
15134.          endif
15134.       else if ( nd_layer > 0 ) then
15141.          if ( nd_profile > 0 ) then
15140.             $I_L15140_28 = 0
15140.             do
15141.                $I_L15141_24 = 0
15141. !dir$ ivdep
15141.                do
15142.                   $s_up_WR0_R0 = source_coeff(1 + $I_L15141_24, 1 + $I_L15140_28, 1) * del_planck(1 + $I_L15141_24, 1 + $I_L15140_28)
15142.                   s_up(1 + $I_L15141_24, 1 + $I_L15140_28) = $s_up_WR0_R0
15144.                   s_down(1 + $I_L15141_24, 1 + $I_L15140_28) = -$s_up_WR0_R0
15145.                   $I_L15141_24 = 1 + $I_L15141_24
15141.                   if ( $I_L15141_24 >= nd_profile ) exit
15141.                enddo
15146.                $I_L15140_28 = 1 + $I_L15140_28
15145.                if ( $I_L15140_28 >= nd_layer ) exit
15145.             enddo
15145.          endif
15145.       endif
15153.       return
15153.       end
15153.       
15549.       
15549.       subroutine layer_part_integ( n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff, mu, eig_vec, theta, isolir, i_direct_top, mu_0, uplm_sol, diff_planck, l_ir_source_quad, diff_planck_2, tau, sqs2, source_top, source_bottom, upm_c, k_sol, z_sol, q_0, q_1, nd_profile, nd_max_order, nd_red_eigensystem )
15180.       t$738 = ( ls_trunc + -ms + 1 )
15233.       t$2577 = _zla( 0, ( ls_trunc + -ms + 1 ) )
15180.       t$739 = nd_profile
15180.       t$740 = nd_red_eigensystem
15235.       t$2578 = _zla( 0, nd_profile )
15180.       t$2579 = _zla( 0, nd_profile )
15235.       t$2580 = _zla( 0, nd_red_eigensystem )
15180.       t$2581 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem )
15180.       t$741 = ( 2 * nd_red_eigensystem )
15237.       t$2582 = _zla( 0, ( 2 * nd_red_eigensystem ) )
15180.       t$2583 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
15180.       t$2584 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
15180.       t$743 = ( ls_trunc + -ms + 2 )
15254.       t$2585 = _zla( 0, ( ls_trunc + -ms + 2 ) )
15180.       t$2586 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) )
15180.       t$742 = nd_max_order
15180.       t$2587 = 1 + nd_max_order
15247.       t$2588 = _zla( 0, 1 + nd_max_order )
15180.       t$2589 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order )
15180.       t$2590 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile )
15180.       t$2591 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
15303.       t$2594 = 8 * _zla( 0, nd_profile )
15306.       t$2595 = 8 * _zla( 0, nd_profile )
15306.       t$2597 = 16 * _zla( 0, nd_profile )
15297.       t$2598 = 16 * _zla( 0, nd_profile )
15297.       t$2600 = 24 * _zla( 0, nd_profile )
15295.       t$2601 = 24 * _zla( 0, nd_profile )
15295.       t$2603 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) ) * 8 + 24 * _zla( 0, nd_profile )
15299.       t$2604 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) ) * 8 + 24 * _zla( 0, nd_profile )
15299.       t$2606 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) ) * 8 + 32 * _zla( 0, nd_profile )
15180.       t$2592 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) ) * 8 + 32 * _zla( 0, nd_profile ) ), 8 )
15303.       t$2593 = t$2592
15306.       t$2596 = t$2592 + 8 * _zla( 0, nd_profile )
15297.       t$2599 = t$2592 + 16 * _zla( 0, nd_profile )
15295.       t$2602 = t$2592 + 24 * _zla( 0, nd_profile )
15299.       t$2605 = t$2592 + _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 2 ) ) * 8 + 24 * _zla( 0, nd_profile )
15314.       $F_A33 = 2 * nd_red_eigensystem
15314.       $F_A34 = nd_profile
15314.       if ( and( -$F_A34, -$F_A33 ) < 0 ) then
15314.          $I_L15314_264 = 0
15314.          do
15314.             $I_L15314_252 = 0
15314. !dir$ ivdep
15314.             do
15314.                upm_c(1 + $I_L15314_252, 1 + $I_L15314_264) = 0.0
15314.                $I_L15314_252 = 1 + $I_L15314_252
15314.                if ( $I_L15314_252 >= $F_A34 ) exit
15314.             enddo
15314.             $I_L15314_264 = 1 + $I_L15314_264
15314.             if ( $I_L15314_264 >= $F_A33 ) exit
15314.          enddo
15314.       endif
15316.       if ( isolir == 1 ) then
15325.          if ( n_profile > 0 ) then
15325.             $I_L15325_216 = 0
15325. !dir$ ivdep
15325.             do
15326.                k_sol(1 + $I_L15325_216) = 1
15327.                eig_sep(1 + $I_L15325_216) = abs( mu(1 + $I_L15325_216, 1) + -mu_0(1 + $I_L15325_216) )
15328.                $I_L15325_216 = 1 + $I_L15325_216
15325.                if ( $I_L15325_216 >= n_profile ) exit
15325.             enddo
15325.          endif
15329.          if ( n_red_eigensystem > 0 ) then
15330.             if ( n_profile > 0 ) then
15330.                $I_L15330_262 = 0
15330. !dir$ ivdep
15330.                do
15329.                   $SCA_eig_sep_I3 = eig_sep(1 + $I_L15330_262)
15329.                   $SCA_mu_I4 = mu_0(1 + $I_L15330_262)
15329.                   $I_L15329_240 = 0
15329. !dir$ unroll 4
15329.                   do
15331.                      $SCA_eig_sep_tmp_I5 = abs( mu(1 + $I_L15330_262, 1 + $I_L15329_240) + -$SCA_mu_I4 )
15332.                      if ( $SCA_eig_sep_tmp_I5 < $SCA_eig_sep_I3 ) then
15333.                         k_sol(1 + $I_L15330_262) = ( 1 + $I_L15329_240 )
15334.                         $SCA_eig_sep_I3 = $SCA_eig_sep_tmp_I5
15334.                      endif
15337.                      $I_L15329_240 = 1 + $I_L15329_240
15335.                      if ( $I_L15329_240 >= n_red_eigensystem ) exit
15335.                   enddo
15329.                   eig_sep(1 + $I_L15330_262) = $SCA_eig_sep_I3
15336.                   $I_L15330_262 = 1 + $I_L15330_262
15336.                   if ( $I_L15330_262 >= n_profile ) exit
15336.                enddo
15336.             endif
15336.          endif
15342.          if ( n_profile > 0 ) then
15347.             $SC_cg_coeff_I0 = cg_coeff(1)
15342.             $I_L15342_242 = 0
15342. !dir$ ivdep
15342.             do
15343.                v_dif(1 + $I_L15342_242, 1) = 0.0
15347.                v_dif(1 + $I_L15342_242, 2) = ( ( -( eig_vec(1 + $I_L15342_242, 1, k_sol(1 + $I_L15342_242)) * sqs2(1 + $I_L15342_242, ms) ) ) * 1.0/$SC_cg_coeff_I0 )
15350.                $I_L15342_242 = 1 + $I_L15342_242
15342.                if ( $I_L15342_242 >= n_profile ) exit
15342.             enddo
15342.          endif
15355.          if ( ls_trunc + -ms > 0 ) then
15356.             if ( n_profile > 0 ) then
15356.                $I_L15356_272 = 0
15356.                do
15355.                   $I_L15355_266 = 0
15355.                   if ( ls_trunc + -ms >= 2 ) then
15355.                      $I_L15355_279 = 0
15355. !dir$ blocking_size( 0, 0 )
15355.                      do
15356.                         $SCA_cg_coeff#1_U0 = cg_coeff(2 + 2 * $I_L15355_279)
15356.                         $SCA_cg_coeff#1_U2 = cg_coeff(1 + 2 * $I_L15355_279)
15356.                         $SCA_cg_coeff#2_U1 = cg_coeff(3 + 2 * $I_L15355_279)
15356.                         $I_L15356_244 = 0
15356. !dir$ ivdep
15356. !dir$ blocking_size( 256, 256 )
15356.                         do
15360.                            v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 3 + 2 * $I_L15355_279) = ( ( -( mu_0($I_L15356_244 + 256 * $I_L15356_272 + 1) * sqs2($I_L15356_244 + 256 * $I_L15356_272 + 1, ms + 2 * $I_L15355_279 + 1) * v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 2 + 2 * $I_L15355_279) ) + -( $SCA_cg_coeff#1_U2 * v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 1 + 2 * $I_L15355_279) ) + sqs2($I_L15356_244 + 256 * $I_L15356_272 + 1, ms + 2 * $I_L15355_279 + 1) * real( 1 + -2 * mod( ( 2 + 2 * $I_L15355_279 ), 2 ), 8 ) * eig_vec($I_L15356_244 + 256 * $I_L15356_272 + 1, 2 + 2 * $I_L15355_279, k_sol($I_L15356_244 + 256 * $I_L15356_272 + 1)) ) * 1.0/$SCA_cg_coeff#1_U0 )
15360.                            v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 4 + 2 * $I_L15355_279) = ( ( -( mu_0($I_L15356_244 + 256 * $I_L15356_272 + 1) * sqs2($I_L15356_244 + 256 * $I_L15356_272 + 1, ms + 2 * $I_L15355_279 + 2) * v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 3 + 2 * $I_L15355_279) ) + -( $SCA_cg_coeff#1_U0 * v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 2 + 2 * $I_L15355_279) ) + sqs2($I_L15356_244 + 256 * $I_L15356_272 + 1, ms + 2 * $I_L15355_279 + 2) * real( 1 + -2 * mod( ( 3 + 2 * $I_L15355_279 ), 2 ), 8 ) * eig_vec($I_L15356_244 + 256 * $I_L15356_272 + 1, 3 + 2 * $I_L15355_279, k_sol($I_L15356_244 + 256 * $I_L15356_272 + 1)) ) * 1.0/$SCA_cg_coeff#2_U1 )
15356.                            $I_L15356_244 = 1 + $I_L15356_244
15356.                            if ( $I_L15356_244 >= min( n_profile, 256 + 256 * $I_L15356_272 ) + -256 * $I_L15356_272 ) exit
15356.                         enddo
15367.                         $I_L15355_279 = 1 + $I_L15355_279
15367.                         if ( $I_L15355_279 >= _rsh( ( ls_trunc + -ms ), 1 ) ) exit
15367.                      enddo
15367.                      $I_L15355_266 = and( 0xfffffffffffffffeUL, ( ls_trunc + -ms ) )
15367.                   endif
15355.                   if ( $I_L15355_266 < ls_trunc + -ms ) then
15356.                      $SCA_cg_coeff_I6 = cg_coeff(2 + $I_L15355_266)
15356.                      $SCA_cg_coeff_I7 = cg_coeff(1 + $I_L15355_266)
15356.                      $I_L15356_244 = 0
15356. !dir$ ivdep
15356. !dir$ blocking_size( 256, 256 )
15356.                      do
15360.                         v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 3 + $I_L15355_266) = ( ( -( mu_0($I_L15356_244 + 256 * $I_L15356_272 + 1) * sqs2($I_L15356_244 + 256 * $I_L15356_272 + 1, ms + $I_L15355_266 + 1) * v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 2 + $I_L15355_266) ) + -( $SCA_cg_coeff_I7 * v_dif($I_L15356_244 + 256 * $I_L15356_272 + 1, 1 + $I_L15355_266) ) + sqs2($I_L15356_244 + 256 * $I_L15356_272 + 1, ms + $I_L15355_266 + 1) * real( 1 + -2 * mod( ( 2 + $I_L15355_266 ), 2 ), 8 ) * eig_vec($I_L15356_244 + 256 * $I_L15356_272 + 1, 2 + $I_L15355_266, k_sol($I_L15356_244 + 256 * $I_L15356_272 + 1)) ) * 1.0/$SCA_cg_coeff_I6 )
15356.                         $I_L15356_244 = 1 + $I_L15356_244
15356.                         if ( $I_L15356_244 >= min( n_profile, 256 + 256 * $I_L15356_272 ) + -256 * $I_L15356_272 ) exit
15356.                      enddo
15356.                   endif
15356.                   $I_L15356_272 = 1 + $I_L15356_272
15366.                   if ( $I_L15356_272 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
15366.                enddo
15366.             endif
15366.          endif
15368.          if ( n_profile > 0 ) then
15368.             $I_L15368_247 = 0
15368. !dir$ ivdep
15368.             do
15369.                gamma(1 + $I_L15368_247) = ( uplm_sol(1 + $I_L15368_247, ls_trunc + -ms + 2) * 1.0/v_dif(1 + $I_L15368_247, ls_trunc + -ms + 2) )
15370.                $I_L15368_247 = 1 + $I_L15368_247
15368.                if ( $I_L15368_247 >= n_profile ) exit
15368.             enddo
15368.          endif
15383.          if ( ls_trunc + -ms >= 0 ) then
15384.             if ( n_profile > 0 ) then
15383.                $I_L15383_274 = 0
15383.                do
15384.                   $I_L15384_268 = 0
15384. !dir$ ivdep
15384. !dir$ blocking_size( 0, 0 )
15384.                   do
15383.                      $SCA_gamma_I8 = gamma(1 + $I_L15384_268)
15383.                      $SCA_i_direct_top_I9 = i_direct_top(1 + $I_L15384_268)
15383.                      $SCA_eig_sep_I10 = eig_sep(1 + $I_L15384_268)
15383.                      $SCA_k_sol_I11 = k_sol(1 + $I_L15384_268)
15383.                      $SCA_mu_I12 = mu_0(1 + $I_L15384_268)
15383.                      $SCA_tau_I13 = tau(1 + $I_L15384_268)
15396.                      $SC_mu_I14 = mu(1 + $I_L15384_268, $SCA_k_sol_I11)
15383.                      $I_L15383_249 = 0
15383. !dir$ unroll 2
15383. !dir$ blocking_size( 256, 256 )
15383.                      do
15386.                         z_sol(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) = $SCA_i_direct_top_I9 * ( $SCA_gamma_I8 * v_dif(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) + -uplm_sol(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) )
15389.                         source_top(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) = $SCA_i_direct_top_I9 * ( $SCA_gamma_I8 * v_dif(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) + -uplm_sol(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) )
15393.                         if ( $SCA_eig_sep_I10 < 1.0e-6 ) then
15398.                            $const_S11 = -( $SCA_gamma_I8 * _expn( -( $SCA_tau_I13 * 1.0/$SCA_mu_I12 ) ) * ( ( $SCA_tau_I13 * 1.0/( $SCA_mu_I12 * $SC_mu_I14 ) ) + ( $SCA_tau_I13 * 1.0/( $SCA_mu_I12 * $SC_mu_I14 ) ) * ( $SCA_tau_I13 * 1.0/( $SCA_mu_I12 * $SC_mu_I14 ) ) * ( $SC_mu_I14 + -$SCA_mu_I12 ) * 5.0e-1 ) )
15398.                         else
15404.                            $eig_diff_S10 = $SCA_tau_I13 * ( 1.0/$SC_mu_I14 + -( 1.0/$SCA_mu_I12 ) )
15406.                            if ( $SCA_tau_I13 * ( 1.0/$SC_mu_I14 + -( 1.0/$SCA_mu_I12 ) ) < 0.0 ) then
15408.                               $const_S11 = ( $SCA_gamma_I8 * _expn( -( $SCA_tau_I13 * 1.0/$SC_mu_I14 ) ) * ( -1.0 + _expn( $eig_diff_S10 ) ) * 1.0/( $SC_mu_I14 + -$SCA_mu_I12 ) )
15408.                            else
15414.                               $const_S11 = ( $SCA_gamma_I8 * _expn( -( $SCA_tau_I13 * 1.0/$SCA_mu_I12 ) ) * ( 1.0 + -_expn( -$eig_diff_S10 ) ) * 1.0/( $SC_mu_I14 + -$SCA_mu_I12 ) )
15414.                            endif
15414.                         endif
15423.                         source_bottom(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) = $SCA_i_direct_top_I9 * _expn( -( $SCA_tau_I13 * 1.0/$SCA_mu_I12 ) ) * ( $SCA_gamma_I8 * v_dif(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) + -uplm_sol(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1) ) + $SCA_i_direct_top_I9 * eig_vec(1 + $I_L15384_268, $I_L15383_249 + 256 * $I_L15383_274 + 1, $SCA_k_sol_I11) * real( 1 + -2 * mod( ( $I_L15383_249 + 256 * $I_L15383_274 ), 2 ), 8 ) * $const_S11
15383.                         $I_L15383_249 = 1 + $I_L15383_249
15419.                         if ( $I_L15383_249 >= min( ls_trunc + -ms + 1, 256 + 256 * $I_L15383_274 ) + -256 * $I_L15383_274 ) exit
15419.                      enddo
15428.                      $I_L15384_268 = 1 + $I_L15384_268
15428.                      if ( $I_L15384_268 >= n_profile ) exit
15428.                   enddo
15383.                   $I_L15383_274 = 1 + $I_L15383_274
15428.                   if ( $I_L15383_274 >= 1 + max( 0, -1 + _rsh( ls_trunc + -ms + 256, 8 ) ) ) exit
15428.                enddo
15428.             endif
15428.          endif
15431.       else if ( isolir == 2 ) then
15448.          if ( ms == 0 ) then
15450.             if ( n_profile > 0 ) then
15450.                $I_L15450_218 = 0
15450. !dir$ ivdep
15450.                do
15451.                   q_0(1 + $I_L15450_218) = ( 1.0/( 2.2204460492503131e-16 + sqs2(1 + $I_L15450_218, 1) * tau(1 + $I_L15450_218) ) * diff_planck(1 + $I_L15450_218) * 6.5147001587055997e-1 )
15453.                   $I_L15450_218 = 1 + $I_L15450_218
15450.                   if ( $I_L15450_218 >= n_profile ) exit
15450.                enddo
15450.             endif
15455.             if ( l_ir_source_quad ) then
15457.                if ( n_profile > 0 ) then
15461.                   $SC_cg_coeff_I1 = cg_coeff(1)
15457.                   $I_L15457_220 = 0
15457. !dir$ ivdep
15457.                   do
15458.                      $q_1_WR0_R0 = ( 1.0/( 2.2204460492503131e-16 + tau(1 + $I_L15457_220) * tau(1 + $I_L15457_220) * sqs2(1 + $I_L15457_220, 1) ) * diff_planck_2(1 + $I_L15457_220) * 1.3029400317411199 )
15458.                      q_1(1 + $I_L15457_220) = $q_1_WR0_R0
15461.                      $source_top_WR0_R1 = ( $SC_cg_coeff_I1 * $q_1_WR0_R0 * 1.0/sqs2(1 + $I_L15457_220, 0) )
15461.                      source_top(1 + $I_L15457_220, 1) = $source_top_WR0_R1
15463.                      source_bottom(1 + $I_L15457_220, 1) = $source_top_WR0_R1
15464.                      source_top(1 + $I_L15457_220, 2) = q_0(1 + $I_L15457_220) + -5.0e-1 * $q_1_WR0_R0
15465.                      source_bottom(1 + $I_L15457_220, 2) = q_0(1 + $I_L15457_220) + 5.0e-1 * $q_1_WR0_R0
15466.                      $I_L15457_220 = 1 + $I_L15457_220
15457.                      if ( $I_L15457_220 >= n_profile ) exit
15457.                   enddo
15457.                endif
15467.                if ( ls_trunc > 1 ) then
15468.                   if ( n_profile > 0 ) then
15469.                      $SC_cg_coeff_I2 = cg_coeff(2)
15468.                      $I_L15468_222 = 0
15468. !dir$ ivdep
15468.                      do
15469.                         $source_top_WR0_R2 = ( $SC_cg_coeff_I2 * q_1(1 + $I_L15468_222) * 1.0/sqs2(1 + $I_L15468_222, 2) )
15469.                         source_top(1 + $I_L15468_222, 3) = $source_top_WR0_R2
15470.                         source_bottom(1 + $I_L15468_222, 3) = $source_top_WR0_R2
15471.                         $I_L15468_222 = 1 + $I_L15468_222
15468.                         if ( $I_L15468_222 >= n_profile ) exit
15468.                      enddo
15468.                   endif
15468.                endif
15468.             else
15476.                if ( n_profile > 0 ) then
15476.                   $I_L15476_224 = 0
15476. !dir$ ivdep
15476.                   do
15477.                      source_top(1 + $I_L15476_224, 1) = 0.0
15478.                      source_bottom(1 + $I_L15476_224, 1) = 0.0
15479.                      $source_top_WR0_R3 = q_0(1 + $I_L15476_224)
15479.                      source_top(1 + $I_L15476_224, 2) = $source_top_WR0_R3
15480.                      source_bottom(1 + $I_L15476_224, 2) = $source_top_WR0_R3
15481.                      $I_L15476_224 = 1 + $I_L15476_224
15476.                      if ( $I_L15476_224 >= n_profile ) exit
15476.                   enddo
15476.                endif
15482.                if ( ls_trunc > 1 ) then
15483.                   if ( n_profile > 0 ) then
15483.                      $I_L15483_226 = 0
15483. !dir$ ivdep
15483.                      do
15484.                         source_top(1 + $I_L15483_226, 3) = 0.0
15485.                         source_bottom(1 + $I_L15483_226, 3) = 0.0
15486.                         $I_L15483_226 = 1 + $I_L15483_226
15483.                         if ( $I_L15483_226 >= n_profile ) exit
15483.                      enddo
15483.                   endif
15483.                endif
15483.             endif
15492.             if ( -3 + ls_trunc >= 0 ) then
15493.                if ( n_profile > 0 ) then
15492.                   $I_L15492_256 = 0
15492.                   do
15493.                      $I_L15493_230 = 0
15493. !dir$ ivdep
15493.                      do
15494.                         source_top(1 + $I_L15493_230, 4 + $I_L15492_256) = 0.0
15495.                         source_bottom(1 + $I_L15493_230, 4 + $I_L15492_256) = 0.0
15496.                         $I_L15493_230 = 1 + $I_L15493_230
15493.                         if ( $I_L15493_230 >= n_profile ) exit
15493.                      enddo
15497.                      $I_L15492_256 = 1 + $I_L15492_256
15496.                      if ( $I_L15492_256 >= -2 + ls_trunc ) exit
15496.                   enddo
15496.                endif
15496.             endif
15501.             if ( n_red_eigensystem > 0 ) then
15502.                if ( n_profile > 0 ) then
15501.                   $I_L15501_258 = 0
15501.                   if ( n_red_eigensystem >= 4 ) then
15501.                      $I_L15501_281 = 0
15501. !dir$ blocking_size( 0, 0 )
15501.                      do
15502.                         $I_L15502_232 = 0
15502. !dir$ ivdep
15502. !dir$ blocking_size( 0, 0 )
15502.                         do
15503.                            $upm_c_WR0_R4 = -( q_0(1 + $I_L15502_232) * sqs2(1 + $I_L15502_232, 1) * eig_vec(1 + $I_L15502_232, 2, 1 + 4 * $I_L15501_281) )
15503.                            upm_c(1 + $I_L15502_232, n_red_eigensystem + 4 * $I_L15501_281 + 1) = $upm_c_WR0_R4
15505.                            upm_c(1 + $I_L15502_232, 1 + 4 * $I_L15501_281) = -$upm_c_WR0_R4
15503.                            $upm_c_WR0_R4 = -( q_0(1 + $I_L15502_232) * sqs2(1 + $I_L15502_232, 1) * eig_vec(1 + $I_L15502_232, 2, 2 + 4 * $I_L15501_281) )
15503.                            upm_c(1 + $I_L15502_232, n_red_eigensystem + 4 * $I_L15501_281 + 2) = $upm_c_WR0_R4
15505.                            upm_c(1 + $I_L15502_232, 2 + 4 * $I_L15501_281) = -$upm_c_WR0_R4
15503.                            $upm_c_WR0_R4 = -( q_0(1 + $I_L15502_232) * sqs2(1 + $I_L15502_232, 1) * eig_vec(1 + $I_L15502_232, 2, 3 + 4 * $I_L15501_281) )
15503.                            upm_c(1 + $I_L15502_232, n_red_eigensystem + 4 * $I_L15501_281 + 3) = $upm_c_WR0_R4
15505.                            upm_c(1 + $I_L15502_232, 3 + 4 * $I_L15501_281) = -$upm_c_WR0_R4
15503.                            $upm_c_WR0_R4 = -( q_0(1 + $I_L15502_232) * sqs2(1 + $I_L15502_232, 1) * eig_vec(1 + $I_L15502_232, 2, 4 + 4 * $I_L15501_281) )
15503.                            upm_c(1 + $I_L15502_232, n_red_eigensystem + 4 * $I_L15501_281 + 4) = $upm_c_WR0_R4
15505.                            upm_c(1 + $I_L15502_232, 4 + 4 * $I_L15501_281) = -$upm_c_WR0_R4
15506.                            $I_L15502_232 = 1 + $I_L15502_232
15502.                            if ( $I_L15502_232 >= n_profile ) exit
15502.                         enddo
15507.                         $I_L15501_281 = 1 + $I_L15501_281
15506.                         if ( $I_L15501_281 >= _rsh( n_red_eigensystem, 2 ) ) exit
15506.                      enddo
15507.                      $I_L15501_258 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
15507.                   endif
15501.                   if ( $I_L15501_258 < n_red_eigensystem ) then
15501.                      $I_L15501_276 = 0
15501. !dir$ blocking_size( 0, 0 )
15501.                      do
15502.                         $I_L15502_232 = 0
15502. !dir$ ivdep
15502. !dir$ blocking_size( 0, 0 )
15502.                         do
15503.                            $upm_c_WR0_R4 = -( q_0(1 + $I_L15502_232) * sqs2(1 + $I_L15502_232, 1) * eig_vec(1 + $I_L15502_232, 2, $I_L15501_258 + $I_L15501_276 + 1) )
15503.                            upm_c(1 + $I_L15502_232, n_red_eigensystem + $I_L15501_258 + $I_L15501_276 + 1) = $upm_c_WR0_R4
15505.                            upm_c(1 + $I_L15502_232, $I_L15501_258 + $I_L15501_276 + 1) = -$upm_c_WR0_R4
15506.                            $I_L15502_232 = 1 + $I_L15502_232
15502.                            if ( $I_L15502_232 >= n_profile ) exit
15502.                         enddo
15507.                         $I_L15501_276 = 1 + $I_L15501_276
15506.                         if ( $I_L15501_276 >= n_red_eigensystem + -$I_L15501_258 ) exit
15506.                      enddo
15506.                   endif
15506.                endif
15506.             endif
15512.             if ( ls_trunc >= 0 ) then
15512.                $I_L15512_270 = 0
15512.                do
15514.                   if ( n_profile > 0 ) then
15514.                      $I_L15514_234 = 0
15514. !dir$ ivdep
15514.                      do
15515.                         x(1 + $I_L15514_234) = upm_c(1 + $I_L15514_234, 1 + n_red_eigensystem) * ( theta(1 + $I_L15514_234, 1) + -( real( 1 + -2 * mod( $I_L15512_270, 2 ), 8 ) ) ) * eig_vec(1 + $I_L15514_234, 1 + $I_L15512_270, 1)
15517.                         $I_L15514_234 = 1 + $I_L15514_234
15514.                         if ( $I_L15514_234 >= n_profile ) exit
15514.                      enddo
15514.                   endif
15518.                   if ( -2 + n_red_eigensystem >= 0 ) then
15519.                      if ( n_profile > 0 ) then
15518.                         $I_L15518_260 = 0
15518. !dir$ blocking_size( 0, 0 )
15518.                         do
15519.                            $I_L15519_236 = 0
15519. !dir$ ivdep
15519. !dir$ blocking_size( 0, 0 )
15519.                            do
15520.                               x(1 + $I_L15519_236) = x(1 + $I_L15519_236) + upm_c(1 + $I_L15519_236, n_red_eigensystem + $I_L15518_260 + 2) * ( theta(1 + $I_L15519_236, 2 + $I_L15518_260) + -( real( 1 + -2 * mod( $I_L15512_270, 2 ), 8 ) ) ) * eig_vec(1 + $I_L15519_236, 1 + $I_L15512_270, 2 + $I_L15518_260)
15523.                               $I_L15519_236 = 1 + $I_L15519_236
15519.                               if ( $I_L15519_236 >= n_profile ) exit
15519.                            enddo
15524.                            $I_L15518_260 = 1 + $I_L15518_260
15523.                            if ( $I_L15518_260 >= -1 + n_red_eigensystem ) exit
15523.                         enddo
15523.                      endif
15523.                   endif
15525.                   if ( n_profile > 0 ) then
15525.                      $I_L15525_238 = 0
15525. !dir$ ivdep
15525.                      do
15526.                         source_top(1 + $I_L15525_238, 1 + $I_L15512_270) = source_top(1 + $I_L15525_238, 1 + $I_L15512_270) + x(1 + $I_L15525_238)
15527.                         source_bottom(1 + $I_L15525_238, 1 + $I_L15512_270) = source_bottom(1 + $I_L15525_238, 1 + $I_L15512_270) + -( real( 1 + -2 * mod( $I_L15512_270, 2 ), 8 ) * x(1 + $I_L15525_238) )
15528.                         $I_L15525_238 = 1 + $I_L15525_238
15525.                         if ( $I_L15525_238 >= n_profile ) exit
15525.                      enddo
15525.                   endif
15529.                   $I_L15512_270 = 1 + $I_L15512_270
15528.                   if ( $I_L15512_270 >= 1 + ls_trunc ) exit
15528.                enddo
15528.             endif
15531.          else if ( ls_trunc + -ms >= 0 ) then
15537.             if ( n_profile > 0 ) then
15536.                $I_L15536_254 = 0
15536.                do
15537.                   $I_L15537_228 = 0
15537. !dir$ ivdep
15537.                   do
15538.                      source_top(1 + $I_L15537_228, 1 + $I_L15536_254) = 0.0
15539.                      source_bottom(1 + $I_L15537_228, 1 + $I_L15536_254) = 0.0
15540.                      $I_L15537_228 = 1 + $I_L15537_228
15537.                      if ( $I_L15537_228 >= n_profile ) exit
15537.                   enddo
15541.                   $I_L15536_254 = 1 + $I_L15536_254
15540.                   if ( $I_L15536_254 >= ls_trunc + -ms + 1 ) exit
15540.                enddo
15540.             endif
15540.          endif
15540.       endif
15180.       _free( t$2592 )
15549.       return
15549.       end
15549.       
15631.       
15631.       logical
15631.       function l_cloud_density( n_condensed, i_phase_cmp, l_cloud_cmp, i_condensed_param, nd_cloud_component )
15566.       t$748 = nd_cloud_component
15593.       t$2607 = _zla( 0, nd_cloud_component )
15611.       l_cloud_density = .false.
15615.       if ( n_condensed > 0 ) then
15615.          $I_L15615_4 = 0
15615. !dir$ ivdep
15615.          do
15616.             l_cloud_density = l_cloud_density .or. l_cloud_cmp(1 + $I_L15615_4) .and. i_phase_cmp(1 + $I_L15615_4) == 2 .and. ( i_condensed_param(1 + $I_L15615_4) == 4 .or. i_condensed_param(1 + $I_L15615_4) == 5 ) .or. i_phase_cmp(1 + $I_L15615_4) == 1 .and. i_condensed_param(1 + $I_L15615_4) == 3 .or. i_phase_cmp(1 + $I_L15615_4) == 2 .and. i_condensed_param(1 + $I_L15615_4) == 3
15626.             $I_L15615_4 = 1 + $I_L15615_4
15615.             if ( $I_L15615_4 >= n_condensed ) exit
15615.          enddo
15615.       endif
15631.       l_cloud_density = l_cloud_density
15631.       return
15631.       end
15631.       
15875.       
15875.       subroutine mix_app_scat( n_profile, n_layer, n_cloud_top, t_free, r_free, s_down_free, s_up_free, t_cloud, r_cloud, s_down_cloud, s_up_cloud, g_ff, g_fc, g_cf, g_cc, b_ff, b_fc, b_cf, b_cc, flux_inc_down, source_ground, albedo_surface_diff, flux_diffuse, nd_profile, nd_layer, id_ct )
15653.       t$750 = nd_profile
15653.       t$751 = nd_layer
15691.       t$2608 = _zla( 0, nd_profile )
15653.       t$2609 = _zla( 0, nd_profile )
15691.       t$2610 = _zla( 0, nd_layer )
15653.       t$2611 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
15653.       t$752 = ( -1 + id_ct )
15653.       t$2612 = nd_layer + -id_ct + 2
15708.       t$2613 = _zla( 0, nd_layer + -id_ct + 2 )
15653.       t$2614 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
15653.       t$753 = ( 2 + 2 * nd_layer )
15732.       t$2615 = _zla( 0, ( 2 + 2 * nd_layer ) )
15653.       t$2616 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
15755.       t$2619 = 8 * _zla( 0, nd_profile )
15653.       t$2620 = 1 + nd_layer
15743.       t$2621 = _zla( 0, 1 + nd_layer )
15653.       t$2622 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
15743.       t$2623 = 8 * _zla( 0, nd_profile )
15743.       t$2625 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
15745.       t$2626 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
15745.       t$2628 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
15747.       t$2629 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
15747.       t$2631 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
15749.       t$2632 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
15749.       t$2634 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
15653.       t$2617 = int( _alloc( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 ), 8 )
15755.       t$2618 = t$2617
15743.       t$2624 = t$2617 + 8 * _zla( 0, nd_profile )
15745.       t$2627 = t$2617 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
15747.       t$2630 = t$2617 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
15749.       t$2633 = t$2617 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
15769.       if ( n_profile > 0 ) then
15769.          $I_L15769_126 = 0
15769. !dir$ ivdep
15769.          do
15770.             flux_down(1 + $I_L15769_126, 0) = flux_inc_down(1 + $I_L15769_126)
15771.             $I_L15769_126 = 1 + $I_L15769_126
15769.             if ( $I_L15769_126 >= n_profile ) exit
15769.          enddo
15769.       endif
15772.       if ( -1 + n_cloud_top > 0 ) then
15773.          if ( n_profile > 0 ) then
15773.             $I_L15773_160 = 0
15773.             do
15772.                $I_L15772_152 = 0
15772.                if ( -3 + n_cloud_top >= 0 ) then
15772.                   $I_L15772_168 = 0
15772. !dir$ blocking_size( 0, 0 )
15772.                   do
15773.                      $I_L15773_128 = 0
15773. !dir$ ivdep
15773. !dir$ blocking_size( 256, 256 )
15773.                      do
15774.                         flux_down($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + 2 * $I_L15772_168) = t_free($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + 2 * $I_L15772_168) * flux_down($I_L15773_128 + 256 * $I_L15773_160 + 1, 2 * $I_L15772_168) + s_down_free($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + 2 * $I_L15772_168)
15774.                         flux_down($I_L15773_128 + 256 * $I_L15773_160 + 1, 2 + 2 * $I_L15772_168) = t_free($I_L15773_128 + 256 * $I_L15773_160 + 1, 2 + 2 * $I_L15772_168) * flux_down($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + 2 * $I_L15772_168) + s_down_free($I_L15773_128 + 256 * $I_L15773_160 + 1, 2 + 2 * $I_L15772_168)
15773.                         $I_L15773_128 = 1 + $I_L15773_128
15773.                         if ( $I_L15773_128 >= min( n_profile, 256 + 256 * $I_L15773_160 ) + -256 * $I_L15773_160 ) exit
15773.                      enddo
15777.                      $I_L15772_168 = 1 + $I_L15772_168
15777.                      if ( $I_L15772_168 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
15777.                   enddo
15777.                   $I_L15772_152 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
15777.                endif
15772.                if ( $I_L15772_152 < -1 + n_cloud_top ) then
15773.                   $I_L15773_128 = 0
15773. !dir$ ivdep
15773. !dir$ blocking_size( 256, 256 )
15773.                   do
15774.                      flux_down($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + $I_L15772_152) = t_free($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + $I_L15772_152) * flux_down($I_L15773_128 + 256 * $I_L15773_160 + 1, $I_L15772_152) + s_down_free($I_L15773_128 + 256 * $I_L15773_160 + 1, 1 + $I_L15772_152)
15773.                      $I_L15773_128 = 1 + $I_L15773_128
15773.                      if ( $I_L15773_128 >= min( n_profile, 256 + 256 * $I_L15773_160 ) + -256 * $I_L15773_160 ) exit
15773.                   enddo
15773.                endif
15773.                $I_L15773_160 = 1 + $I_L15773_160
15776.                if ( $I_L15773_160 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
15776.             enddo
15776.          endif
15776.       endif
15778.       if ( n_profile > 0 ) then
15778.          $I_L15778_131 = 0
15778. !dir$ ivdep
15778.          do
15779.             $flux_cloud_top_WR0_R0 = flux_down(1 + $I_L15778_131, -1 + n_cloud_top)
15784.             flux_down(1 + $I_L15778_131, -1 + n_cloud_top) = g_ff(1 + $I_L15778_131, -1 + n_cloud_top) * $flux_cloud_top_WR0_R0
15786.             flux_down_cloud(1 + $I_L15778_131, -1 + n_cloud_top) = g_fc(1 + $I_L15778_131, -1 + n_cloud_top) * $flux_cloud_top_WR0_R0
15780.             $I_L15778_131 = 1 + $I_L15778_131
15778.             if ( $I_L15778_131 >= n_profile ) exit
15778.          enddo
15778.       endif
15790.       if ( n_layer + -n_cloud_top > 0 ) then
15791.          if ( n_profile > 0 ) then
15791.             $I_L15791_162 = 0
15791.             do
15790.                $I_L15790_154 = 0
15790.                if ( n_layer + -n_cloud_top >= 2 ) then
15790.                   $I_L15790_170 = 0
15790. !dir$ blocking_size( 0, 0 )
15790.                   do
15791.                      $I_L15791_133 = 0
15791. !dir$ ivdep
15791. !dir$ blocking_size( 256, 256 )
15791.                      do
15794.                         $flux_propagated_S8 = t_free($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) * flux_down($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + -1) + s_down_free($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170)
15796.                         $flux_propagated_cloud_S7 = t_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) * flux_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + -1) + s_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170)
15799.                         flux_down($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) = g_ff($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) * $flux_propagated_S8 + g_cf($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) * $flux_propagated_cloud_S7
15802.                         flux_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) = g_cc($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) * $flux_propagated_cloud_S7 + g_fc($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) * $flux_propagated_S8
15794.                         $flux_propagated_S8 = t_free($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) * flux_down($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) + s_down_free($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1)
15796.                         $flux_propagated_cloud_S7 = t_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) * flux_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170) + s_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1)
15799.                         flux_down($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) = g_ff($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) * $flux_propagated_S8 + g_cf($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) * $flux_propagated_cloud_S7
15802.                         flux_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) = g_cc($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) * $flux_propagated_cloud_S7 + g_fc($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + 2 * $I_L15790_170 + 1) * $flux_propagated_S8
15791.                         $I_L15791_133 = 1 + $I_L15791_133
15791.                         if ( $I_L15791_133 >= min( n_profile, 256 + 256 * $I_L15791_162 ) + -256 * $I_L15791_162 ) exit
15791.                      enddo
15807.                      $I_L15790_170 = 1 + $I_L15790_170
15807.                      if ( $I_L15790_170 >= _rsh( ( n_layer + -n_cloud_top ), 1 ) ) exit
15807.                   enddo
15807.                   $I_L15790_154 = and( 0xfffffffffffffffeUL, ( n_layer + -n_cloud_top ) )
15807.                endif
15790.                if ( $I_L15790_154 < n_layer + -n_cloud_top ) then
15791.                   $I_L15791_133 = 0
15791. !dir$ ivdep
15791. !dir$ blocking_size( 256, 256 )
15791.                   do
15794.                      $flux_propagated_S8 = t_free($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) * flux_down($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154 + -1) + s_down_free($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154)
15796.                      $flux_propagated_cloud_S7 = t_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) * flux_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154 + -1) + s_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154)
15799.                      flux_down($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) = g_ff($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) * $flux_propagated_S8 + g_cf($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) * $flux_propagated_cloud_S7
15802.                      flux_down_cloud($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) = g_cc($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) * $flux_propagated_cloud_S7 + g_fc($I_L15791_133 + 256 * $I_L15791_162 + 1, n_cloud_top + $I_L15790_154) * $flux_propagated_S8
15791.                      $I_L15791_133 = 1 + $I_L15791_133
15791.                      if ( $I_L15791_133 >= min( n_profile, 256 + 256 * $I_L15791_162 ) + -256 * $I_L15791_162 ) exit
15791.                   enddo
15791.                endif
15791.                $I_L15791_162 = 1 + $I_L15791_162
15806.                if ( $I_L15791_162 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
15806.             enddo
15806.          endif
15806.       endif
15811.       if ( n_profile > 0 ) then
15811.          $I_L15811_136 = 0
15811. !dir$ ivdep
15811.          do
15813.             $flux_down_WR0_R1 = t_free(1 + $I_L15811_136, n_layer) * flux_down(1 + $I_L15811_136, -1 + n_layer) + s_down_free(1 + $I_L15811_136, n_layer)
15813.             flux_down(1 + $I_L15811_136, n_layer) = $flux_down_WR0_R1
15816.             $flux_down_cloud_WR0_R2 = t_cloud(1 + $I_L15811_136, n_layer) * flux_down_cloud(1 + $I_L15811_136, -1 + n_layer) + s_down_cloud(1 + $I_L15811_136, n_layer)
15816.             flux_down_cloud(1 + $I_L15811_136, n_layer) = $flux_down_cloud_WR0_R2
15819.             flux_up(1 + $I_L15811_136, n_layer) = albedo_surface_diff(1 + $I_L15811_136) * $flux_down_WR0_R1 + b_ff(1 + $I_L15811_136, n_layer) * source_ground(1 + $I_L15811_136)
15822.             flux_up_cloud(1 + $I_L15811_136, n_layer) = albedo_surface_diff(1 + $I_L15811_136) * $flux_down_cloud_WR0_R2 + b_cf(1 + $I_L15811_136, n_layer) * source_ground(1 + $I_L15811_136)
15825.             $I_L15811_136 = 1 + $I_L15811_136
15811.             if ( $I_L15811_136 >= n_profile ) exit
15811.          enddo
15811.       endif
15830.       if ( n_cloud_top + -n_layer <= 0 ) then
15831.          if ( n_profile > 0 ) then
15831.             $I_L15831_164 = 0
15831.             do
15830.                $I_L15830_156 = 0
15830.                if ( n_layer + -n_cloud_top > 0 ) then
15830.                   $I_L15830_172 = 0
15830. !dir$ blocking_size( 0, 0 )
15830.                   do
15831.                      $I_L15831_138 = 0
15831. !dir$ ivdep
15831. !dir$ blocking_size( 256, 256 )
15831.                      do
15834.                         $flux_propagated_S13 = t_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) * flux_up($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) + s_up_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) + r_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) * flux_down($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1)
15836.                         $flux_propagated_cloud_S12 = t_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) * flux_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) + s_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) + r_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172) * flux_down_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1)
15839.                         flux_up($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) = b_ff($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * $flux_propagated_S13 + b_fc($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * $flux_propagated_cloud_S12
15841.                         flux_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) = b_cc($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * $flux_propagated_cloud_S12 + b_cf($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * $flux_propagated_S13
15834.                         $flux_propagated_S13 = t_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * flux_up($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) + s_up_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) + r_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * flux_down($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2)
15836.                         $flux_propagated_cloud_S12 = t_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * flux_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) + s_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) + r_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -1) * flux_down_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2)
15839.                         flux_up($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2) = b_ff($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2) * $flux_propagated_S13 + b_fc($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2) * $flux_propagated_cloud_S12
15841.                         flux_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2) = b_cc($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2) * $flux_propagated_cloud_S12 + b_cf($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -2 * $I_L15830_172 + -2) * $flux_propagated_S13
15831.                         $I_L15831_138 = 1 + $I_L15831_138
15831.                         if ( $I_L15831_138 >= min( n_profile, 256 + 256 * $I_L15831_164 ) + -256 * $I_L15831_164 ) exit
15831.                      enddo
15845.                      $I_L15830_172 = 1 + $I_L15830_172
15845.                      if ( $I_L15830_172 >= _rsh( n_layer + -n_cloud_top + 1, 1 ) ) exit
15845.                   enddo
15845.                   $I_L15830_156 = and( 0xfffffffffffffffeUL, n_layer + -n_cloud_top + 1 )
15845.                endif
15830.                if ( $I_L15830_156 < n_layer + -n_cloud_top + 1 ) then
15831.                   $I_L15831_138 = 0
15831. !dir$ ivdep
15831. !dir$ blocking_size( 256, 256 )
15831.                   do
15834.                      $flux_propagated_S13 = t_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) * flux_up($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) + s_up_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) + r_free($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) * flux_down($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1)
15836.                      $flux_propagated_cloud_S12 = t_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) * flux_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) + s_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) + r_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156) * flux_down_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1)
15839.                      flux_up($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1) = b_ff($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1) * $flux_propagated_S13 + b_fc($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1) * $flux_propagated_cloud_S12
15841.                      flux_up_cloud($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1) = b_cc($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1) * $flux_propagated_cloud_S12 + b_cf($I_L15831_138 + 256 * $I_L15831_164 + 1, n_layer + -$I_L15830_156 + -1) * $flux_propagated_S13
15831.                      $I_L15831_138 = 1 + $I_L15831_138
15831.                      if ( $I_L15831_138 >= min( n_profile, 256 + 256 * $I_L15831_164 ) + -256 * $I_L15831_164 ) exit
15831.                   enddo
15831.                endif
15831.                $I_L15831_164 = 1 + $I_L15831_164
15844.                if ( $I_L15831_164 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
15844.             enddo
15844.          endif
15844.       endif
15848.       if ( 1 + -n_cloud_top < 0 ) then
15849.          if ( n_profile > 0 ) then
15849.             $I_L15849_166 = 0
15849.             do
15848.                $I_L15848_158 = 0
15848.                if ( -3 + n_cloud_top >= 0 ) then
15848.                   $I_L15848_174 = 0
15848. !dir$ blocking_size( 0, 0 )
15848.                   do
15849.                      $I_L15849_141 = 0
15849. !dir$ ivdep
15849. !dir$ blocking_size( 256, 256 )
15849.                      do
15850.                         flux_up($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -2) = t_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -1) * flux_up($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -1) + s_up_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -1) + r_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -1) * flux_down($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -2)
15850.                         flux_up($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -3) = t_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -2) * flux_up($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -2) + s_up_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -2) + r_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -2) * flux_down($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -2 * $I_L15848_174 + -3)
15849.                         $I_L15849_141 = 1 + $I_L15849_141
15849.                         if ( $I_L15849_141 >= min( n_profile, 256 + 256 * $I_L15849_166 ) + -256 * $I_L15849_166 ) exit
15849.                      enddo
15853.                      $I_L15848_174 = 1 + $I_L15848_174
15853.                      if ( $I_L15848_174 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
15853.                   enddo
15853.                   $I_L15848_158 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
15853.                endif
15848.                if ( $I_L15848_158 < -1 + n_cloud_top ) then
15849.                   $I_L15849_141 = 0
15849. !dir$ ivdep
15849. !dir$ blocking_size( 256, 256 )
15849.                   do
15850.                      flux_up($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -$I_L15848_158 + -2) = t_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -$I_L15848_158 + -1) * flux_up($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -$I_L15848_158 + -1) + s_up_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -$I_L15848_158 + -1) + r_free($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -$I_L15848_158 + -1) * flux_down($I_L15849_141 + 256 * $I_L15849_166 + 1, n_cloud_top + -$I_L15848_158 + -2)
15849.                      $I_L15849_141 = 1 + $I_L15849_141
15849.                      if ( $I_L15849_141 >= min( n_profile, 256 + 256 * $I_L15849_166 ) + -256 * $I_L15849_166 ) exit
15849.                   enddo
15849.                endif
15849.                $I_L15849_166 = 1 + $I_L15849_166
15852.                if ( $I_L15849_166 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
15852.             enddo
15852.          endif
15852.       endif
15858.       if ( -2 + n_cloud_top >= 0 ) then
15859.          if ( n_profile > 0 ) then
15858.             $I_L15858_148 = 0
15858.             do
15859.                $I_L15859_144 = 0
15859. !dir$ ivdep
15859.                do
15860.                   flux_diffuse(1 + $I_L15859_144, 1 + 2 * $I_L15858_148) = flux_up(1 + $I_L15859_144, $I_L15858_148)
15861.                   flux_diffuse(1 + $I_L15859_144, 2 + 2 * $I_L15858_148) = flux_down(1 + $I_L15859_144, $I_L15858_148)
15862.                   $I_L15859_144 = 1 + $I_L15859_144
15859.                   if ( $I_L15859_144 >= n_profile ) exit
15859.                enddo
15863.                $I_L15858_148 = 1 + $I_L15858_148
15862.                if ( $I_L15858_148 >= -1 + n_cloud_top ) exit
15862.             enddo
15862.          endif
15862.       endif
15864.       if ( n_layer + -n_cloud_top + 1 >= 0 ) then
15865.          if ( n_profile > 0 ) then
15864.             $I_L15864_150 = 0
15864.             do
15865.                $I_L15865_146 = 0
15865. !dir$ ivdep
15865.                do
15866.                   flux_diffuse(1 + $I_L15865_146, 2 * n_cloud_top + 2 * $I_L15864_150 + -1) = flux_up(1 + $I_L15865_146, n_cloud_top + $I_L15864_150 + -1) + flux_up_cloud(1 + $I_L15865_146, n_cloud_top + $I_L15864_150 + -1)
15867.                   flux_diffuse(1 + $I_L15865_146, 2 * n_cloud_top + 2 * $I_L15864_150) = flux_down(1 + $I_L15865_146, n_cloud_top + $I_L15864_150 + -1) + flux_down_cloud(1 + $I_L15865_146, n_cloud_top + $I_L15864_150 + -1)
15869.                   $I_L15865_146 = 1 + $I_L15865_146
15865.                   if ( $I_L15865_146 >= n_profile ) exit
15865.                enddo
15870.                $I_L15864_150 = 1 + $I_L15864_150
15869.                if ( $I_L15864_150 >= n_layer + -n_cloud_top + 2 ) exit
15869.             enddo
15869.          endif
15869.       endif
15653.       _free( t$2617 )
15875.       return
15875.       end
15875.       
16413.       
16413.       subroutine mix_column( ierr, n_profile, n_layer, k_clr, i_2stream, i_solver, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, flux_inc_down, flux_inc_direct, sec_00, diffuse_albedo, direct_albedo, d_planck_flux_surface, ss_prop, n_cloud_top, n_cloud_type, frac_cloud, w_free, w_cloud, cloud_overlap, flux_direct, flux_total, l_clear, i_solver_clear, flux_direct_clear, flux_total_clear, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type, nd_overlap_coeff )
15898.       t$760 = nd_profile
15898.       t$762 = nd_layer
16030.       t$2635 = _zla( 0, nd_profile )
15898.       t$2636 = _zla( 0, nd_profile )
16030.       t$2637 = _zla( 0, nd_layer )
15898.       t$2638 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 2600.       if ( t$30 == 0 ) then
 2600.          t$2644(1) = 4
 2600.          t$2645(1) = 0
 2600.          t$2646(1) = 16
 2600.          t$2641(1) = int( loc( t$29 ), 8 )
 2600.          t$2642(1) = 0
 2600.          t$2643(1) = int( loc( t$2639 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$2641(1), t$2644(1), 1, t$2642(1), t$2643(1), t$2645(1), t$2646(1) )
 2600.       endif
15898.       t$761 = id_ct
15898.       t$763 = nd_cloud_type
15898.       t$2648 = nd_layer + -id_ct + 1
16010.       t$2649 = max( 0, nd_layer + -id_ct + 1 )
15898.       t$2650 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
16010.       t$2651 = max( 0, nd_cloud_type )
15898.       t$2652 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
15898.       t$2653 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
15898.       t$764 = ( -1 + id_ct )
15898.       t$765 = nd_overlap_coeff
15898.       t$2654 = nd_layer + -id_ct + 2
16012.       t$2655 = max( 0, nd_layer + -id_ct + 2 )
15898.       t$2656 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
16012.       t$2657 = max( 0, nd_overlap_coeff )
15898.       t$2658 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
15898.       t$2659 = 1 + nd_layer
16037.       t$2660 = max( 0, 1 + nd_layer )
15898.       t$2661 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer )
15898.       t$766 = ( 2 + 2 * nd_layer )
16039.       t$2662 = max( 0, ( 2 + 2 * nd_layer ) )
15898.       t$2663 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
16130.       t$2666 = 8 * _zla( 0, nd_profile )
16113.       t$2667 = 8 * _zla( 0, nd_profile )
16113.       t$2669 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16094.       t$2670 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16094.       t$2672 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
15898.       t$767 = nd_source_coeff
15898.       t$2673 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
16117.       t$2674 = max( 0, nd_source_coeff )
15898.       t$2675 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff )
16117.       t$2676 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16117.       t$2678 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16098.       t$2679 = 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 )
16098.       t$2681 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 )
16128.       t$2682 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 )
16128.       t$2684 = 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 )
16126.       t$2685 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16126.       t$2687 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16104.       t$2688 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16104.       t$2690 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16119.       t$2691 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16119.       t$2693 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16100.       t$2694 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16100.       t$2696 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16106.       t$2697 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16106.       t$2699 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16121.       t$2700 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16121.       t$2702 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16102.       t$2703 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16102.       t$2705 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16115.       t$2706 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16115.       t$2708 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16096.       t$2709 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16096.       t$2711 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16111.       t$2712 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16111.       t$2714 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16092.       t$2715 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16092.       t$2717 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
15898.       t$2664 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
16130.       t$2665 = t$2664
16113.       t$2668 = t$2664 + 8 * _zla( 0, nd_profile )
16094.       t$2671 = t$2664 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16117.       t$2677 = t$2664 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16098.       t$2680 = t$2664 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 )
16128.       t$2683 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 )
16126.       t$2686 = t$2664 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16104.       t$2689 = t$2664 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16119.       t$2692 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16100.       t$2695 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16106.       t$2698 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16121.       t$2701 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16102.       t$2704 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16115.       t$2707 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16096.       t$2710 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16111.       t$2713 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16092.       t$2716 = t$2664 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
16159.       n_source_coeff = set_n_source_coeff( isolir, l_ir_source_quad )
16184.       t$7547 = 0
16184.       t$7548 = 0
16184.       t$7549 = 0
16184.       t$7554 = 0
16184.       if ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%dim_1%EX == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%SM * ss_prop%phase_fnc%dim_2%EX == 0 ) then
16184. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 0, 0)
16184.          t$7546 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 0, 0) )
16184.       else
16184.          t$7547 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
16184.          t$7548 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) )
16184.          t$7549 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) )
16184.          t$7554 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) ) ) * 8 ) ), 8 )
16181.          call _f90_copy_from_dv( t$7553, ss_prop%phase_fnc )
16184. !dir$ suppress t$7553
16184.          t$7546 = loc( t$7553 )
16184.       endif
16185.       t$7556 = 0
16185.       t$7557 = 0
16185.       t$7561 = 0
16185.       if ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) then
16185. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 0, 0)
16185.          t$7555 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 0, 0) )
16185.       else
16185.          t$7556 = ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) )
16185.          t$7557 = ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) )
16185.          t$7561 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
16181.          call _f90_copy_from_dv( t$7560, ss_prop%omega )
16185. !dir$ suppress t$7560
16185.          t$7555 = loc( t$7560 )
16185.       endif
16185.       t$7563 = 0
16185.       t$7564 = 0
16185.       t$7568 = 0
16185.       if ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) then
16185. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 0, 0)
16185.          t$7562 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 0, 0) )
16185.       else
16185.          t$7563 = ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) )
16185.          t$7564 = ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) )
16185.          t$7568 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
16181.          call _f90_copy_from_dv( t$7567, ss_prop%tau )
16185. !dir$ suppress t$7567
16185.          t$7562 = loc( t$7567 )
16185.       endif
16181.       ipa$12570 = 1
16181.       ipa$12582 = 1
16181.       call two_coeff( ierr, n_profile, ipa$12570, n_layer, i_2stream, l_ir_source_quad, t$7546, t$7555, t$7562, isolir, sec_00(1, 1), trans_free(1, 1), reflect_free(1, 1), trans_0_free(1, 1), source_coeff_free(1, 1, 1), nd_profile, id_ct, nd_layer, ipa$12582, nd_layer, nd_source_coeff )
16185.       if ( ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) == 0 ) then
16185.          _free( t$7568 )
16185.       endif
16185.       if ( ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) == 0 ) then
16185.          _free( t$7561 )
16185.       endif
16184.       if ( ( ss_prop%phase_fnc%header%a_contig == 1 .or. -ss_prop%phase_fnc%header%el_len + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%header%dv_smunit == 0 .and. -ss_prop%phase_fnc%dim_2%SM + ss_prop%phase_fnc%dim_1%SM * ss_prop%phase_fnc%dim_1%EX == 0 .and. -ss_prop%phase_fnc%dim_3%SM + ss_prop%phase_fnc%dim_2%SM * ss_prop%phase_fnc%dim_2%EX == 0 ) == 0 ) then
16184.          _free( t$7554 )
16184.       endif
16191.       if ( ierr /= 0 ) then
15898.          _free( t$2664 )
15898.       else
16198.          if ( isolir == 2 ) then
16200.             t$732 = nd_profile
16200.             t$733 = nd_layer
16200.             t$734 = nd_source_coeff
16200.             t$2570 = max( 0, nd_profile )
16200.             t$2571 = nd_profile
16200.             t$2572 = max( 0, nd_layer )
16200.             t$2573 = nd_layer * nd_profile
16200.             t$2574 = max( 0, nd_source_coeff )
16200.             t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
16200.             t$2576 = ( nd_profile * nd_layer )
16200.             if ( l_ir_source_quad ) then
16200.                if ( nd_layer > 0 ) then
16200.                   if ( nd_profile > 0 ) then
16200.                      $I_L16200_88 = 0
16200.                      do
16200.                         $I_L16200_74 = 0
16200. !dir$ ivdep
16200.                         do
16200.                            s_up_free(1 + $I_L16200_74, 1 + $I_L16200_88) = source_coeff_free(1 + $I_L16200_74, 1 + $I_L16200_88, 1) * diff_planck(1 + $I_L16200_74, 1 + $I_L16200_88) + source_coeff_free(1 + $I_L16200_74, 1 + $I_L16200_88, 2) * diff_planck_2(1 + $I_L16200_74, 1 + $I_L16200_88)
16200.                            s_down_free(1 + $I_L16200_74, 1 + $I_L16200_88) = -( source_coeff_free(1 + $I_L16200_74, 1 + $I_L16200_88, 1) * diff_planck(1 + $I_L16200_74, 1 + $I_L16200_88) ) + source_coeff_free(1 + $I_L16200_74, 1 + $I_L16200_88, 2) * diff_planck_2(1 + $I_L16200_74, 1 + $I_L16200_88)
16200.                            $I_L16200_74 = 1 + $I_L16200_74
16200.                            if ( $I_L16200_74 >= nd_profile ) exit
16200.                         enddo
16200.                         $I_L16200_88 = 1 + $I_L16200_88
16200.                         if ( $I_L16200_88 >= nd_layer ) exit
16200.                      enddo
16200.                   endif
16200.                endif
16200.             else if ( nd_layer > 0 ) then
16200.                if ( nd_profile > 0 ) then
16200.                   $I_L16200_86 = 0
16200.                   do
16200.                      $I_L16200_72 = 0
16200. !dir$ ivdep
16200.                      do
16200.                         $s_up_free_WR0_R0 = source_coeff_free(1 + $I_L16200_72, 1 + $I_L16200_86, 1) * diff_planck(1 + $I_L16200_72, 1 + $I_L16200_86)
16200.                         s_up_free(1 + $I_L16200_72, 1 + $I_L16200_86) = $s_up_free_WR0_R0
16200.                         s_down_free(1 + $I_L16200_72, 1 + $I_L16200_86) = -$s_up_free_WR0_R0
16200.                         $I_L16200_72 = 1 + $I_L16200_72
16200.                         if ( $I_L16200_72 >= nd_profile ) exit
16200.                      enddo
16200.                      $I_L16200_86 = 1 + $I_L16200_86
16200.                      if ( $I_L16200_86 >= nd_layer ) exit
16200.                   enddo
16200.                endif
16200.             endif
16209.             if ( l_clear ) then
16210.                if ( n_layer > 0 ) then
16211.                   if ( n_profile > 0 ) then
16210.                      $I_L16210_90 = 0
16210.                      do
16211.                         $I_L16211_76 = 0
16211. !dir$ ivdep
16211.                         do
16212.                            s_down_clear(1 + $I_L16211_76, 1 + $I_L16210_90) = s_down_free(1 + $I_L16211_76, 1 + $I_L16210_90)
16213.                            s_up_clear(1 + $I_L16211_76, 1 + $I_L16210_90) = s_up_free(1 + $I_L16211_76, 1 + $I_L16210_90)
16214.                            $I_L16211_76 = 1 + $I_L16211_76
16211.                            if ( $I_L16211_76 >= n_profile ) exit
16211.                         enddo
16215.                         $I_L16210_90 = 1 + $I_L16210_90
16214.                         if ( $I_L16210_90 >= n_layer ) exit
16214.                      enddo
16214.                   endif
16214.                endif
16214.             endif
16220.             if ( n_layer + -n_cloud_top >= 0 ) then
16221.                if ( n_profile > 0 ) then
16220.                   $I_L16220_92 = 0
16220.                   do
16221.                      $I_L16221_78 = 0
16221. !dir$ ivdep
16221.                      do
16222.                         s_down_free(1 + $I_L16221_78, n_cloud_top + $I_L16220_92) = w_free(1 + $I_L16221_78, n_cloud_top + $I_L16220_92) * s_down_free(1 + $I_L16221_78, n_cloud_top + $I_L16220_92)
16223.                         s_up_free(1 + $I_L16221_78, n_cloud_top + $I_L16220_92) = w_free(1 + $I_L16221_78, n_cloud_top + $I_L16220_92) * s_up_free(1 + $I_L16221_78, n_cloud_top + $I_L16220_92)
16224.                         $I_L16221_78 = 1 + $I_L16221_78
16221.                         if ( $I_L16221_78 >= n_profile ) exit
16221.                      enddo
16225.                      $I_L16220_92 = 1 + $I_L16220_92
16224.                      if ( $I_L16220_92 >= n_layer + -n_cloud_top + 1 ) exit
16224.                   enddo
16224.                endif
16224.             endif
16224.          endif
16241.          t$7583 = 0
16241.          t$7584 = 0
16241.          t$7585 = 0
16241.          t$7586 = 0
16241.          t$7592 = 0
16241.          if ( ss_prop%phase_fnc%header%a_contig == 1 ) then
16241. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 1, 0)
16241.             t$7582 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, 1, 0) )
16241.          else
16241.             t$7583 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) )
16241.             t$7584 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) )
16241.             t$7585 = ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) )
16241.             t$7586 = ( max( 0, ( ss_prop%phase_fnc%dim_4%LB + ss_prop%phase_fnc%dim_4%EX + -2 + 1 ) ) )
16241.             t$7592 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%phase_fnc%dim_3%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( ss_prop%phase_fnc%dim_4%LB + ss_prop%phase_fnc%dim_4%EX + -2 + 1 ) ) ) ) * 8 ) ), 8 )
16237.             call _f90_copy_from_dv( t$7591, ss_prop%phase_fnc )
16241. !dir$ suppress t$7591
16241.             t$7582 = loc( t$7591 )
16241.          endif
16242.          t$7594 = 0
16242.          t$7595 = 0
16242.          t$7596 = 0
16242.          t$7601 = 0
16242.          if ( ss_prop%omega%header%a_contig == 1 ) then
16242. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 1, 0)
16242.             t$7593 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 1, 0) )
16242.          else
16242.             t$7594 = ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) )
16242.             t$7595 = ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) )
16242.             t$7596 = ( max( 0, ( ss_prop%omega%dim_3%LB + ss_prop%omega%dim_3%EX + -2 + 1 ) ) )
16242.             t$7601 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( ss_prop%omega%dim_3%LB + ss_prop%omega%dim_3%EX + -2 + 1 ) ) ) ) * 8 ) ), 8 )
16237.             call _f90_copy_from_dv( t$7600, ss_prop%omega )
16242. !dir$ suppress t$7600
16242.             t$7593 = loc( t$7600 )
16242.          endif
16242.          t$7603 = 0
16242.          t$7604 = 0
16242.          t$7605 = 0
16242.          t$7610 = 0
16242.          if ( ss_prop%tau%header%a_contig == 1 ) then
16242. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 1, 0)
16242.             t$7602 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 1, 0) )
16242.          else
16242.             t$7603 = ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) )
16242.             t$7604 = ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) )
16242.             t$7605 = ( max( 0, ( ss_prop%tau%dim_3%LB + ss_prop%tau%dim_3%EX + -2 + 1 ) ) )
16242.             t$7610 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( ss_prop%tau%dim_3%LB + ss_prop%tau%dim_3%EX + -2 + 1 ) ) ) ) * 8 ) ), 8 )
16237.             call _f90_copy_from_dv( t$7609, ss_prop%tau )
16242. !dir$ suppress t$7609
16242.             t$7602 = loc( t$7609 )
16242.          endif
16237.          call two_coeff_cloud( ierr, n_profile, n_cloud_top, n_layer, i_2stream, l_ir_source_quad, n_source_coeff, n_cloud_type, frac_cloud(1, id_ct, 1), t$7582, t$7593, t$7602, isolir, sec_00(1, 1), trans_cloud(1, 1), reflect_cloud(1, 1), trans_0_cloud(1, 1), source_coeff_cloud(1, 1, 1), nd_profile, nd_layer, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type )
16242.          if ( ss_prop%tau%header%a_contig /= 1 ) then
16242.             _free( t$7610 )
16242.          endif
16242.          if ( ss_prop%omega%header%a_contig /= 1 ) then
16242.             _free( t$7601 )
16242.          endif
16241.          if ( ss_prop%phase_fnc%header%a_contig /= 1 ) then
16241.             _free( t$7592 )
16241.          endif
16249.          if ( ierr /= 0 ) then
15898.             _free( t$2664 )
15898.          else
16252.             if ( isolir == 2 ) then
16254.                call ir_source( n_profile, n_cloud_top, n_layer, source_coeff_cloud(1, 1, 1), diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), s_down_cloud(1, 1), s_up_cloud(1, 1), nd_profile, nd_layer, nd_source_coeff )
16261.                if ( n_layer + -n_cloud_top >= 0 ) then
16262.                   if ( n_profile > 0 ) then
16261.                      $I_L16261_94 = 0
16261.                      do
16262.                         $I_L16262_80 = 0
16262. !dir$ ivdep
16262.                         do
16263.                            s_down_cloud(1 + $I_L16262_80, n_cloud_top + $I_L16261_94) = w_cloud(1 + $I_L16262_80, n_cloud_top + $I_L16261_94) * s_down_cloud(1 + $I_L16262_80, n_cloud_top + $I_L16261_94)
16264.                            s_up_cloud(1 + $I_L16262_80, n_cloud_top + $I_L16261_94) = w_cloud(1 + $I_L16262_80, n_cloud_top + $I_L16261_94) * s_up_cloud(1 + $I_L16262_80, n_cloud_top + $I_L16261_94)
16265.                            $I_L16262_80 = 1 + $I_L16262_80
16262.                            if ( $I_L16262_80 >= n_profile ) exit
16262.                         enddo
16266.                         $I_L16261_94 = 1 + $I_L16261_94
16265.                         if ( $I_L16261_94 >= n_layer + -n_cloud_top + 1 ) exit
16265.                      enddo
16265.                   endif
16265.                endif
16265.             endif
16274.             if ( isolir == 1 ) then
16276.                call mixed_solar_source( n_profile, n_layer, n_cloud_top, flux_inc_direct(1), l_scale_solar, adjust_solar_ke(1, 1), trans_0_free(1, 1), source_coeff_free(1, 1, 1), cloud_overlap(1, -1 + id_ct, -2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 4 + -k_clr), cloud_overlap(1, -1 + id_ct, 1 + k_clr), cloud_overlap(1, -1 + id_ct, 7 + -3 * k_clr), trans_0_cloud(1, 1), source_coeff_cloud(1, 1, 1), flux_direct(1, 0), flux_direct_ground_cloud(1), s_up_free(1, 1), s_down_free(1, 1), s_up_cloud(1, 1), s_down_cloud(1, 1), nd_profile, nd_layer, id_ct, nd_source_coeff )
16276.             endif
16297.             if ( i_solver == 16 ) then
16291.                goto 10
16291.                goto 20
16319.             else if ( i_solver == 11 ) then
16319.    10          continue
16322.                if ( isolir == 1 ) then
16323.                   if ( n_profile > 0 ) then
16323.                      $I_L16323_82 = 0
16323. !dir$ ivdep
16323.                      do
16324.                         source_ground_free(1 + $I_L16323_82) = ( direct_albedo(1 + $I_L16323_82) + -diffuse_albedo(1 + $I_L16323_82) ) * ( flux_direct(1 + $I_L16323_82, n_layer) + -flux_direct_ground_cloud(1 + $I_L16323_82) )
16328.                         source_ground_cloud(1 + $I_L16323_82) = ( direct_albedo(1 + $I_L16323_82) + -diffuse_albedo(1 + $I_L16323_82) ) * flux_direct_ground_cloud(1 + $I_L16323_82)
16331.                         $I_L16323_82 = 1 + $I_L16323_82
16323.                         if ( $I_L16323_82 >= n_profile ) exit
16323.                      enddo
16323.                   endif
16332.                else if ( n_profile > 0 ) then
16333.                   $I_L16333_84 = 0
16333. !dir$ ivdep
16333.                   do
16334.                      source_ground_free(1 + $I_L16333_84) = cloud_overlap(1 + $I_L16333_84, n_layer, 2 + 3 * k_clr) * ( 1.0 + -diffuse_albedo(1 + $I_L16333_84) ) * d_planck_flux_surface(1 + $I_L16333_84)
16337.                      source_ground_cloud(1 + $I_L16333_84) = cloud_overlap(1 + $I_L16333_84, n_layer, 8 + -k_clr) * ( 1.0 + -diffuse_albedo(1 + $I_L16333_84) ) * d_planck_flux_surface(1 + $I_L16333_84)
16340.                      $I_L16333_84 = 1 + $I_L16333_84
16333.                      if ( $I_L16333_84 >= n_profile ) exit
16333.                   enddo
16333.                endif
16343.                if ( i_solver == 11 ) then
16344.                   call solver_mix_direct( n_profile, n_layer, n_cloud_top, trans_free(1, 1), reflect_free(1, 1), s_down_free(1, 1), s_up_free(1, 1), trans_cloud(1, 1), reflect_cloud(1, 1), s_down_cloud(1, 1), s_up_cloud(1, 1), cloud_overlap(1, -1 + id_ct, -2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 4 + -k_clr), cloud_overlap(1, -1 + id_ct, 1 + k_clr), cloud_overlap(1, -1 + id_ct, 7 + -3 * k_clr), cloud_overlap(1, -1 + id_ct, 2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 5 + k_clr), cloud_overlap(1, -1 + id_ct, 8 + -k_clr), cloud_overlap(1, -1 + id_ct, 11 + -3 * k_clr), flux_inc_down(1), source_ground_free(1), source_ground_cloud(1), diffuse_albedo(1), flux_total(1, 1), nd_profile, nd_layer, id_ct )
16363.                else if ( i_solver == 16 ) then
16364.                   call solver_mix_direct_hogan( n_profile, n_layer, n_cloud_top, trans_free(1, 1), reflect_free(1, 1), s_down_free(1, 1), s_up_free(1, 1), trans_cloud(1, 1), reflect_cloud(1, 1), s_down_cloud(1, 1), s_up_cloud(1, 1), cloud_overlap(1, -1 + id_ct, -2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 4 + -k_clr), cloud_overlap(1, -1 + id_ct, 1 + k_clr), cloud_overlap(1, -1 + id_ct, 7 + -3 * k_clr), cloud_overlap(1, -1 + id_ct, 2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 5 + k_clr), cloud_overlap(1, -1 + id_ct, 8 + -k_clr), cloud_overlap(1, -1 + id_ct, 11 + -3 * k_clr), flux_inc_down(1), source_ground_free(1), source_ground_cloud(1), diffuse_albedo(1), flux_total(1, 1), nd_profile, nd_layer, id_ct )
16364.                endif
16364.                goto 20
16364.             else if ( i_solver == 9 ) then
16301.                call mix_app_scat( n_profile, n_layer, n_cloud_top, trans_free(1, 1), reflect_free(1, 1), s_down_free(1, 1), s_up_free(1, 1), trans_cloud(1, 1), reflect_cloud(1, 1), s_down_cloud(1, 1), s_up_cloud(1, 1), cloud_overlap(1, -1 + id_ct, -2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 4 + -k_clr), cloud_overlap(1, -1 + id_ct, 1 + k_clr), cloud_overlap(1, -1 + id_ct, 7 + -3 * k_clr), cloud_overlap(1, -1 + id_ct, 2 + 3 * k_clr), cloud_overlap(1, -1 + id_ct, 5 + k_clr), cloud_overlap(1, -1 + id_ct, 8 + -k_clr), cloud_overlap(1, -1 + id_ct, 11 + -3 * k_clr), flux_inc_down(1), d_planck_flux_surface(1), diffuse_albedo(1), flux_total(1, 1), nd_profile, nd_layer, id_ct )
16301.    20          continue
16396.                if ( l_clear ) then
16398.                   call clear_supplement( ierr, n_profile, n_layer, i_solver_clear, trans_free(1, 1), reflect_free(1, 1), trans_0_free(1, 1), source_coeff_free(1, 1, 1), isolir, flux_inc_direct(1), flux_inc_down(1), s_down_clear(1, 1), s_up_clear(1, 1), diffuse_albedo(1), direct_albedo(1), d_planck_flux_surface(1), l_scale_solar, adjust_solar_ke(1, 1), flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_source_coeff )
16398.                endif
15898.                _free( t$2664 )
15898.             else
16387.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$769,  _substr(t$768,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: The solver specified is not valid here.', 0x800600000000L ) ) )
16389.                ierr = 1
15898.                _free( t$2664 )
15898.             endif
15898.          endif
15898.       endif
16413.       return
16413.       end
16413.       
16680.       
16680.       subroutine mixed_solar_source( n_profile, n_layer, n_cloud_top, flux_inc_direct, l_scale_solar, adjust_solar_ke, trans_0_free, source_coeff_free, g_ff, g_fc, g_cf, g_cc, trans_0_cloud, source_coeff_cloud, flux_direct, flux_direct_ground_cloud, s_up_free, s_down_free, s_up_cloud, s_down_cloud, nd_profile, nd_layer, id_ct, nd_source_coeff )
16433.       t$772 = nd_profile
16487.       t$2718 = _zla( 0, nd_profile )
16433.       t$773 = nd_layer
16433.       t$2719 = _zla( 0, nd_profile )
16483.       t$2720 = _zla( 0, nd_layer )
16433.       t$2721 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
16433.       t$774 = nd_source_coeff
16433.       t$2722 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
16494.       t$2723 = _zla( 0, nd_source_coeff )
16433.       t$2724 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
16433.       t$775 = ( -1 + id_ct )
16433.       t$2725 = nd_layer + -id_ct + 2
16506.       t$2726 = _zla( 0, nd_layer + -id_ct + 2 )
16433.       t$2727 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
16433.       t$2728 = 1 + nd_layer
16517.       t$2729 = _zla( 0, 1 + nd_layer )
16433.       t$2730 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
16545.       t$2733 = 8 * _zla( 0, nd_profile )
16543.       t$2734 = 8 * _zla( 0, nd_profile )
16543.       t$2736 = 16 * _zla( 0, nd_profile )
16541.       t$2737 = 16 * _zla( 0, nd_profile )
16541.       t$2739 = 24 * _zla( 0, nd_profile )
16539.       t$2740 = 24 * _zla( 0, nd_profile )
16539.       t$2742 = 32 * _zla( 0, nd_profile )
16433.       t$2731 = int( _alloc( 32 * _zla( 0, nd_profile ) ), 8 )
16545.       t$2732 = t$2731
16543.       t$2735 = t$2731 + 8 * _zla( 0, nd_profile )
16541.       t$2738 = t$2731 + 16 * _zla( 0, nd_profile )
16539.       t$2741 = t$2731 + 24 * _zla( 0, nd_profile )
16554.       if ( n_profile > 0 ) then
16554.          $I_L16554_96 = 0
16554. !dir$ ivdep
16554.          do
16555.             flux_direct(1 + $I_L16554_96, 0) = flux_inc_direct(1 + $I_L16554_96)
16556.             $I_L16554_96 = 1 + $I_L16554_96
16554.             if ( $I_L16554_96 >= n_profile ) exit
16554.          enddo
16554.       endif
16561.       if ( l_scale_solar ) then
16563.          if ( -1 + n_cloud_top > 0 ) then
16564.             if ( n_profile > 0 ) then
16564.                $I_L16564_124 = 0
16564.                do
16563.                   $I_L16563_118 = 0
16563.                   if ( -3 + n_cloud_top >= 0 ) then
16563.                      $I_L16563_126 = 0
16563. !dir$ blocking_size( 0, 0 )
16563.                      do
16564.                         $I_L16564_101 = 0
16564. !dir$ ivdep
16564. !dir$ blocking_size( 256, 256 )
16564.                         do
16565.                            $flux_direct_WR0_R0 = flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 * $I_L16563_126) * trans_0_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126) * adjust_solar_ke($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126)
16565.                            flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126) = $flux_direct_WR0_R0
16568.                            s_up_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126) = source_coeff_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126, 1) * flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 * $I_L16563_126)
16570.                            s_down_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126) = ( source_coeff_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126, 2) + -trans_0_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126) ) * flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 * $I_L16563_126) + $flux_direct_WR0_R0
16565.                            $flux_direct_WR0_R0 = $flux_direct_WR0_R0 * trans_0_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126) * adjust_solar_ke($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126)
16565.                            flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126) = $flux_direct_WR0_R0
16568.                            s_up_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126) = source_coeff_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126, 1) * flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126)
16570.                            s_down_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126) = ( source_coeff_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126, 2) + -trans_0_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 2 + 2 * $I_L16563_126) ) * flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + 2 * $I_L16563_126) + $flux_direct_WR0_R0
16564.                            $I_L16564_101 = 1 + $I_L16564_101
16564.                            if ( $I_L16564_101 >= min( n_profile, 256 + 256 * $I_L16564_124 ) + -256 * $I_L16564_124 ) exit
16564.                         enddo
16575.                         $I_L16563_126 = 1 + $I_L16563_126
16575.                         if ( $I_L16563_126 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
16575.                      enddo
16575.                      $I_L16563_118 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
16575.                   endif
16563.                   if ( $I_L16563_118 < -1 + n_cloud_top ) then
16564.                      $I_L16564_101 = 0
16564. !dir$ ivdep
16564. !dir$ blocking_size( 256, 256 )
16564.                      do
16565.                         $flux_direct_WR0_R0 = flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, $I_L16563_118) * trans_0_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118) * adjust_solar_ke($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118)
16565.                         flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118) = $flux_direct_WR0_R0
16568.                         s_up_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118) = source_coeff_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118, 1) * flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, $I_L16563_118)
16570.                         s_down_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118) = ( source_coeff_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118, 2) + -trans_0_free($I_L16564_101 + 256 * $I_L16564_124 + 1, 1 + $I_L16563_118) ) * flux_direct($I_L16564_101 + 256 * $I_L16564_124 + 1, $I_L16563_118) + $flux_direct_WR0_R0
16564.                         $I_L16564_101 = 1 + $I_L16564_101
16564.                         if ( $I_L16564_101 >= min( n_profile, 256 + 256 * $I_L16564_124 ) + -256 * $I_L16564_124 ) exit
16564.                      enddo
16564.                   endif
16564.                   $I_L16564_124 = 1 + $I_L16564_124
16574.                   if ( $I_L16564_124 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
16574.                enddo
16574.             endif
16574.          endif
16574.       else if ( -1 + n_cloud_top > 0 ) then
16580.          if ( n_profile > 0 ) then
16580.             $I_L16580_122 = 0
16580.             do
16579.                $I_L16579_120 = 0
16579.                if ( -3 + n_cloud_top >= 0 ) then
16579.                   $I_L16579_128 = 0
16579. !dir$ blocking_size( 0, 0 )
16579.                   do
16580.                      $I_L16580_98 = 0
16580. !dir$ ivdep
16580. !dir$ blocking_size( 256, 256 )
16580.                      do
16581.                         flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128) = flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 * $I_L16579_128) * trans_0_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128)
16583.                         s_up_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128) = source_coeff_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128, 1) * flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 * $I_L16579_128)
16585.                         s_down_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128) = source_coeff_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128, 2) * flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 * $I_L16579_128)
16581.                         flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 + 2 * $I_L16579_128) = flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128) * trans_0_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 + 2 * $I_L16579_128)
16583.                         s_up_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 + 2 * $I_L16579_128) = source_coeff_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 + 2 * $I_L16579_128, 1) * flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128)
16585.                         s_down_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 + 2 * $I_L16579_128) = source_coeff_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 2 + 2 * $I_L16579_128, 2) * flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + 2 * $I_L16579_128)
16580.                         $I_L16580_98 = 1 + $I_L16580_98
16580.                         if ( $I_L16580_98 >= min( n_profile, 256 + 256 * $I_L16580_122 ) + -256 * $I_L16580_122 ) exit
16580.                      enddo
16589.                      $I_L16579_128 = 1 + $I_L16579_128
16589.                      if ( $I_L16579_128 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
16589.                   enddo
16589.                   $I_L16579_120 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
16589.                endif
16579.                if ( $I_L16579_120 < -1 + n_cloud_top ) then
16580.                   $I_L16580_98 = 0
16580. !dir$ ivdep
16580. !dir$ blocking_size( 256, 256 )
16580.                   do
16581.                      flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + $I_L16579_120) = flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, $I_L16579_120) * trans_0_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + $I_L16579_120)
16583.                      s_up_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + $I_L16579_120) = source_coeff_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + $I_L16579_120, 1) * flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, $I_L16579_120)
16585.                      s_down_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + $I_L16579_120) = source_coeff_free($I_L16580_98 + 256 * $I_L16580_122 + 1, 1 + $I_L16579_120, 2) * flux_direct($I_L16580_98 + 256 * $I_L16580_122 + 1, $I_L16579_120)
16580.                      $I_L16580_98 = 1 + $I_L16580_98
16580.                      if ( $I_L16580_98 >= min( n_profile, 256 + 256 * $I_L16580_122 ) + -256 * $I_L16580_122 ) exit
16580.                   enddo
16580.                endif
16580.                $I_L16580_122 = 1 + $I_L16580_122
16588.                if ( $I_L16580_122 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
16588.             enddo
16588.          endif
16588.       endif
16597.       if ( n_profile > 0 ) then
16597.          $I_L16597_104 = 0
16597. !dir$ ivdep
16597.          do
16598.             solar_base_free(1 + $I_L16597_104) = flux_direct(1 + $I_L16597_104, -1 + n_cloud_top)
16599.             solar_base_cloud(1 + $I_L16597_104) = 0.0
16600.             $I_L16597_104 = 1 + $I_L16597_104
16597.             if ( $I_L16597_104 >= n_profile ) exit
16597.          enddo
16597.       endif
16603.       if ( n_layer + -n_cloud_top >= 0 ) then
16603.          $I_L16603_116 = 0
16603.          do
16609.             if ( n_profile > 0 ) then
16609.                $I_L16609_106 = 0
16609. !dir$ ivdep
16609.                do
16610.                   solar_top_cloud(1 + $I_L16609_106) = g_cc(1 + $I_L16609_106, n_cloud_top + $I_L16603_116 + -1) * solar_base_cloud(1 + $I_L16609_106) + g_fc(1 + $I_L16609_106, n_cloud_top + $I_L16603_116 + -1) * solar_base_free(1 + $I_L16609_106)
16612.                   solar_top_free(1 + $I_L16609_106) = g_ff(1 + $I_L16609_106, n_cloud_top + $I_L16603_116 + -1) * solar_base_free(1 + $I_L16609_106) + g_cf(1 + $I_L16609_106, n_cloud_top + $I_L16603_116 + -1) * solar_base_cloud(1 + $I_L16609_106)
16614.                   $I_L16609_106 = 1 + $I_L16609_106
16609.                   if ( $I_L16609_106 >= n_profile ) exit
16609.                enddo
16609.             endif
16619.             if ( l_scale_solar ) then
16621.                if ( n_profile > 0 ) then
16621.                   $I_L16621_108 = 0
16621. !dir$ ivdep
16621.                   do
16622.                      $solar_base_free_WR0_R1 = solar_top_free(1 + $I_L16621_108) * trans_0_free(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) * adjust_solar_ke(1 + $I_L16621_108, n_cloud_top + $I_L16603_116)
16622.                      solar_base_free(1 + $I_L16621_108) = $solar_base_free_WR0_R1
16624.                      $solar_base_cloud_WR0_R2 = solar_top_cloud(1 + $I_L16621_108) * trans_0_cloud(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) * adjust_solar_ke(1 + $I_L16621_108, n_cloud_top + $I_L16603_116)
16624.                      solar_base_cloud(1 + $I_L16621_108) = $solar_base_cloud_WR0_R2
16626.                      s_up_free(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) = source_coeff_free(1 + $I_L16621_108, n_cloud_top + $I_L16603_116, 1) * solar_top_free(1 + $I_L16621_108)
16628.                      s_down_free(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) = ( source_coeff_free(1 + $I_L16621_108, n_cloud_top + $I_L16603_116, 2) + -trans_0_free(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) ) * solar_top_free(1 + $I_L16621_108) + $solar_base_free_WR0_R1
16632.                      s_up_cloud(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) = source_coeff_cloud(1 + $I_L16621_108, n_cloud_top + $I_L16603_116, 1) * solar_top_cloud(1 + $I_L16621_108)
16635.                      s_down_cloud(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) = ( source_coeff_cloud(1 + $I_L16621_108, n_cloud_top + $I_L16603_116, 2) + -trans_0_cloud(1 + $I_L16621_108, n_cloud_top + $I_L16603_116) ) * solar_top_cloud(1 + $I_L16621_108) + $solar_base_cloud_WR0_R2
16639.                      $I_L16621_108 = 1 + $I_L16621_108
16621.                      if ( $I_L16621_108 >= n_profile ) exit
16621.                   enddo
16621.                endif
16621.             else if ( n_profile > 0 ) then
16643.                $I_L16643_110 = 0
16643. !dir$ ivdep
16643.                do
16644.                   solar_base_free(1 + $I_L16643_110) = solar_top_free(1 + $I_L16643_110) * trans_0_free(1 + $I_L16643_110, n_cloud_top + $I_L16603_116)
16646.                   solar_base_cloud(1 + $I_L16643_110) = solar_top_cloud(1 + $I_L16643_110) * trans_0_cloud(1 + $I_L16643_110, n_cloud_top + $I_L16603_116)
16648.                   s_up_free(1 + $I_L16643_110, n_cloud_top + $I_L16603_116) = source_coeff_free(1 + $I_L16643_110, n_cloud_top + $I_L16603_116, 1) * solar_top_free(1 + $I_L16643_110)
16650.                   s_down_free(1 + $I_L16643_110, n_cloud_top + $I_L16603_116) = source_coeff_free(1 + $I_L16643_110, n_cloud_top + $I_L16603_116, 2) * solar_top_free(1 + $I_L16643_110)
16653.                   s_up_cloud(1 + $I_L16643_110, n_cloud_top + $I_L16603_116) = source_coeff_cloud(1 + $I_L16643_110, n_cloud_top + $I_L16603_116, 1) * solar_top_cloud(1 + $I_L16643_110)
16656.                   s_down_cloud(1 + $I_L16643_110, n_cloud_top + $I_L16603_116) = source_coeff_cloud(1 + $I_L16643_110, n_cloud_top + $I_L16603_116, 2) * solar_top_cloud(1 + $I_L16643_110)
16659.                   $I_L16643_110 = 1 + $I_L16643_110
16643.                   if ( $I_L16643_110 >= n_profile ) exit
16643.                enddo
16643.             endif
16666.             if ( n_profile > 0 ) then
16666.                $I_L16666_112 = 0
16666. !dir$ ivdep
16666.                do
16667.                   flux_direct(1 + $I_L16666_112, n_cloud_top + $I_L16603_116) = solar_base_free(1 + $I_L16666_112) + solar_base_cloud(1 + $I_L16666_112)
16668.                   $I_L16666_112 = 1 + $I_L16666_112
16666.                   if ( $I_L16666_112 >= n_profile ) exit
16666.                enddo
16666.             endif
16670.             $I_L16603_116 = 1 + $I_L16603_116
16668.             if ( $I_L16603_116 >= n_layer + -n_cloud_top + 1 ) exit
16668.          enddo
16668.       endif
16673.       if ( n_profile > 0 ) then
16673.          $I_L16673_114 = 0
16673. !dir$ ivdep
16673.          do
16674.             flux_direct_ground_cloud(1 + $I_L16673_114) = solar_base_cloud(1 + $I_L16673_114)
16675.             $I_L16673_114 = 1 + $I_L16673_114
16673.             if ( $I_L16673_114 >= n_profile ) exit
16673.          enddo
16673.       endif
16433.       _free( t$2731 )
16680.       return
16680.       end
16680.       
16868.       
16868.       subroutine monochromatic_gas_flux( n_profile, n_layer, tau_gas, isolir, sec_0, flux_inc_direct, flux_inc_down, diff_planck, d_planck_flux_surface, diffuse_albedo, direct_albedo, diffusivity_factor, flux_direct, flux_diffuse, nd_profile, nd_layer )
16701.       t$778 = nd_profile
16701.       t$779 = nd_layer
16737.       t$2743 = _zla( 0, nd_profile )
16701.       t$2744 = _zla( 0, nd_profile )
16737.       t$2745 = _zla( 0, nd_layer )
16701.       t$2746 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
16701.       t$2747 = 1 + nd_layer
16757.       t$2748 = _zla( 0, 1 + nd_layer )
16701.       t$2749 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
16701.       t$780 = ( 2 + 2 * nd_layer )
16759.       t$2750 = _zla( 0, ( 2 + 2 * nd_layer ) )
16701.       t$2751 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
16773.       t$2754 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16771.       t$2755 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16771.       t$2757 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16769.       t$2758 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16769.       t$2760 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
16701.       t$2752 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 ), 8 )
16773.       t$2753 = t$2752
16771.       t$2756 = t$2752 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16769.       t$2759 = t$2752 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16792.       if ( nd_layer > 0 ) then
16793.          if ( nd_profile > 0 ) then
16792.             $I_L16792_148 = 0
16792.             do
16793.                $I_L16793_128 = 0
16793. !dir$ ivdep
16793.                do
16794.                   trans(1 + $I_L16793_128, 1 + $I_L16792_148) = _expn( -( diffusivity_factor * tau_gas(1 + $I_L16793_128, 1 + $I_L16792_148) ) )
16795.                   $I_L16793_128 = 1 + $I_L16793_128
16793.                   if ( $I_L16793_128 >= nd_profile ) exit
16793.                enddo
16796.                $I_L16792_148 = 1 + $I_L16792_148
16795.                if ( $I_L16792_148 >= nd_layer ) exit
16795.             enddo
16795.          endif
16795.       endif
16798.       if ( isolir == 1 ) then
16800.          if ( nd_layer > 0 ) then
16801.             if ( nd_profile > 0 ) then
16800.                $I_L16800_152 = 0
16800.                do
16801.                   $I_L16801_132 = 0
16801. !dir$ ivdep
16801.                   do
16802.                      source_up(1 + $I_L16801_132, 1 + $I_L16800_152) = 0.0
16803.                      source_down(1 + $I_L16801_132, 1 + $I_L16800_152) = 0.0
16804.                      $I_L16801_132 = 1 + $I_L16801_132
16801.                      if ( $I_L16801_132 >= nd_profile ) exit
16801.                   enddo
16805.                   $I_L16800_152 = 1 + $I_L16800_152
16804.                   if ( $I_L16800_152 >= nd_layer ) exit
16804.                enddo
16804.             endif
16804.          endif
16820.          if ( nd_profile > 0 ) then
16820.             $I_L16820_134 = 0
16820. !dir$ ivdep
16820.             do
16821.                flux_direct(1 + $I_L16820_134, 0) = flux_inc_direct(1 + $I_L16820_134)
16822.                $I_L16820_134 = 1 + $I_L16820_134
16820.                if ( $I_L16820_134 >= nd_profile ) exit
16820.             enddo
16820.          endif
16824.          if ( nd_layer > 0 ) then
16825.             if ( nd_profile > 0 ) then
16824.                $I_L16824_154 = 0
16824.                if ( nd_layer >= 4 ) then
16824.                   $I_L16824_163 = 0
16824. !dir$ blocking_size( 0, 0 )
16824.                   do
16825.                      $I_L16825_136 = 0
16825. !dir$ ivdep
16825. !dir$ blocking_size( 0, 0 )
16825.                      do
16826.                         flux_direct(1 + $I_L16825_136, 1 + 4 * $I_L16824_163) = flux_direct(1 + $I_L16825_136, 4 * $I_L16824_163) * _expn( -( tau_gas(1 + $I_L16825_136, 1 + 4 * $I_L16824_163) * sec_0(1 + $I_L16825_136) ) )
16826.                         flux_direct(1 + $I_L16825_136, 2 + 4 * $I_L16824_163) = flux_direct(1 + $I_L16825_136, 1 + 4 * $I_L16824_163) * _expn( -( tau_gas(1 + $I_L16825_136, 2 + 4 * $I_L16824_163) * sec_0(1 + $I_L16825_136) ) )
16826.                         flux_direct(1 + $I_L16825_136, 3 + 4 * $I_L16824_163) = flux_direct(1 + $I_L16825_136, 2 + 4 * $I_L16824_163) * _expn( -( tau_gas(1 + $I_L16825_136, 3 + 4 * $I_L16824_163) * sec_0(1 + $I_L16825_136) ) )
16826.                         flux_direct(1 + $I_L16825_136, 4 + 4 * $I_L16824_163) = flux_direct(1 + $I_L16825_136, 3 + 4 * $I_L16824_163) * _expn( -( tau_gas(1 + $I_L16825_136, 4 + 4 * $I_L16824_163) * sec_0(1 + $I_L16825_136) ) )
16828.                         $I_L16825_136 = 1 + $I_L16825_136
16825.                         if ( $I_L16825_136 >= nd_profile ) exit
16825.                      enddo
16829.                      $I_L16824_163 = 1 + $I_L16824_163
16828.                      if ( $I_L16824_163 >= _rsh( nd_layer, 2 ) ) exit
16828.                   enddo
16829.                   $I_L16824_154 = and( 0xfffffffffffffffcUL, nd_layer )
16829.                endif
16824.                if ( $I_L16824_154 < nd_layer ) then
16824.                   $I_L16824_160 = 0
16824. !dir$ blocking_size( 0, 0 )
16824.                   do
16825.                      $I_L16825_136 = 0
16825. !dir$ ivdep
16825. !dir$ blocking_size( 0, 0 )
16825.                      do
16826.                         flux_direct(1 + $I_L16825_136, $I_L16824_154 + $I_L16824_160 + 1) = flux_direct(1 + $I_L16825_136, $I_L16824_154 + $I_L16824_160) * _expn( -( tau_gas(1 + $I_L16825_136, $I_L16824_154 + $I_L16824_160 + 1) * sec_0(1 + $I_L16825_136) ) )
16828.                         $I_L16825_136 = 1 + $I_L16825_136
16825.                         if ( $I_L16825_136 >= nd_profile ) exit
16825.                      enddo
16829.                      $I_L16824_160 = 1 + $I_L16824_160
16828.                      if ( $I_L16824_160 >= nd_layer + -$I_L16824_154 ) exit
16828.                   enddo
16828.                endif
16828.             endif
16828.          endif
16806.       else if ( isolir == 2 ) then
16808.          if ( nd_layer > 0 ) then
16809.             if ( nd_profile > 0 ) then
16808.                $I_L16808_150 = 0
16808.                do
16809.                   $I_L16809_130 = 0
16809. !dir$ ivdep
16809.                   do
16810.                      $source_up_WR0_R0 = ( ( 1.0000000149011612 + -trans(1 + $I_L16809_130, 1 + $I_L16808_150) ) * diff_planck(1 + $I_L16809_130, 1 + $I_L16808_150) * 1.0/( 1.4901161193847656e-8 + diffusivity_factor * tau_gas(1 + $I_L16809_130, 1 + $I_L16808_150) ) )
16810.                      source_up(1 + $I_L16809_130, 1 + $I_L16808_150) = $source_up_WR0_R0
16813.                      source_down(1 + $I_L16809_130, 1 + $I_L16808_150) = -$source_up_WR0_R0
16814.                      $I_L16809_130 = 1 + $I_L16809_130
16809.                      if ( $I_L16809_130 >= nd_profile ) exit
16809.                   enddo
16815.                   $I_L16808_150 = 1 + $I_L16808_150
16814.                   if ( $I_L16808_150 >= nd_layer ) exit
16814.                enddo
16814.             endif
16814.          endif
16814.       endif
16833.       if ( nd_profile > 0 ) then
16833.          $I_L16833_138 = 0
16833. !dir$ ivdep
16833.          do
16834.             flux_diffuse(1 + $I_L16833_138, 2) = flux_inc_down(1 + $I_L16833_138)
16835.             $I_L16833_138 = 1 + $I_L16833_138
16833.             if ( $I_L16833_138 >= nd_profile ) exit
16833.          enddo
16833.       endif
16837.       if ( nd_layer > 0 ) then
16838.          if ( nd_profile > 0 ) then
16837.             $I_L16837_156 = 0
16837.             if ( nd_layer >= 2 ) then
16837.                $I_L16837_165 = 0
16837.                do
16838.                   $I_L16838_140 = 0
16838. !dir$ ivdep
16838.                   do
16839.                      flux_diffuse(1 + $I_L16838_140, 4 + 4 * $I_L16837_165) = trans(1 + $I_L16838_140, 1 + 2 * $I_L16837_165) * flux_diffuse(1 + $I_L16838_140, 2 + 4 * $I_L16837_165) + source_down(1 + $I_L16838_140, 1 + 2 * $I_L16837_165)
16839.                      flux_diffuse(1 + $I_L16838_140, 6 + 4 * $I_L16837_165) = trans(1 + $I_L16838_140, 2 + 2 * $I_L16837_165) * flux_diffuse(1 + $I_L16838_140, 4 + 4 * $I_L16837_165) + source_down(1 + $I_L16838_140, 2 + 2 * $I_L16837_165)
16841.                      $I_L16838_140 = 1 + $I_L16838_140
16838.                      if ( $I_L16838_140 >= nd_profile ) exit
16838.                   enddo
16842.                   $I_L16837_165 = 1 + $I_L16837_165
16841.                   if ( $I_L16837_165 >= _rsh( nd_layer, 1 ) ) exit
16841.                enddo
16842.                $I_L16837_156 = and( 0xfffffffffffffffeUL, nd_layer )
16842.             endif
16837.             if ( $I_L16837_156 < nd_layer ) then
16838.                $I_L16838_140 = 0
16838. !dir$ ivdep
16838.                do
16839.                   flux_diffuse(1 + $I_L16838_140, 4 + 2 * $I_L16837_156) = trans(1 + $I_L16838_140, 1 + $I_L16837_156) * flux_diffuse(1 + $I_L16838_140, 2 + 2 * $I_L16837_156) + source_down(1 + $I_L16838_140, 1 + $I_L16837_156)
16841.                   $I_L16838_140 = 1 + $I_L16838_140
16838.                   if ( $I_L16838_140 >= nd_profile ) exit
16838.                enddo
16838.             endif
16838.          endif
16838.       endif
16845.       if ( isolir == 1 ) then
16846.          if ( nd_profile > 0 ) then
16846.             $I_L16846_142 = 0
16846. !dir$ ivdep
16846.             do
16847.                flux_diffuse(1 + $I_L16846_142, 1 + 2 * n_layer) = diffuse_albedo(1 + $I_L16846_142) * flux_diffuse(1 + $I_L16846_142, 2 + 2 * n_layer) + direct_albedo(1 + $I_L16846_142) * flux_direct(1 + $I_L16846_142, n_layer)
16850.                $I_L16846_142 = 1 + $I_L16846_142
16846.                if ( $I_L16846_142 >= nd_profile ) exit
16846.             enddo
16846.          endif
16851.       else if ( nd_profile > 0 ) then
16852.          $I_L16852_144 = 0
16852. !dir$ ivdep
16852.          do
16853.             flux_diffuse(1 + $I_L16852_144, 1 + 2 * n_layer) = d_planck_flux_surface(1 + $I_L16852_144) + diffuse_albedo(1 + $I_L16852_144) * flux_diffuse(1 + $I_L16852_144, 2 + 2 * n_layer)
16855.             $I_L16852_144 = 1 + $I_L16852_144
16852.             if ( $I_L16852_144 >= nd_profile ) exit
16852.          enddo
16852.       endif
16858.       if ( nd_layer > 0 ) then
16859.          if ( nd_profile > 0 ) then
16858.             $I_L16858_158 = 0
16858.             if ( nd_layer >= 2 ) then
16858.                $I_L16858_167 = 0
16858.                do
16859.                   $I_L16859_146 = 0
16859. !dir$ ivdep
16859.                   do
16860.                      flux_diffuse(1 + $I_L16859_146, 2 * nd_layer + -4 * $I_L16858_167 + -1) = trans(1 + $I_L16859_146, nd_layer + -2 * $I_L16858_167) * flux_diffuse(1 + $I_L16859_146, 2 * nd_layer + -4 * $I_L16858_167 + 1) + source_up(1 + $I_L16859_146, nd_layer + -2 * $I_L16858_167)
16860.                      flux_diffuse(1 + $I_L16859_146, 2 * nd_layer + -4 * $I_L16858_167 + -3) = trans(1 + $I_L16859_146, nd_layer + -2 * $I_L16858_167 + -1) * flux_diffuse(1 + $I_L16859_146, 2 * nd_layer + -4 * $I_L16858_167 + -1) + source_up(1 + $I_L16859_146, nd_layer + -2 * $I_L16858_167 + -1)
16862.                      $I_L16859_146 = 1 + $I_L16859_146
16859.                      if ( $I_L16859_146 >= nd_profile ) exit
16859.                   enddo
16863.                   $I_L16858_167 = 1 + $I_L16858_167
16862.                   if ( $I_L16858_167 >= _rsh( nd_layer, 1 ) ) exit
16862.                enddo
16863.                $I_L16858_158 = and( 0xfffffffffffffffeUL, nd_layer )
16863.             endif
16858.             if ( $I_L16858_158 < nd_layer ) then
16859.                $I_L16859_146 = 0
16859. !dir$ ivdep
16859.                do
16860.                   flux_diffuse(1 + $I_L16859_146, 2 * nd_layer + -2 * $I_L16858_158 + -1) = trans(1 + $I_L16859_146, nd_layer + -$I_L16858_158) * flux_diffuse(1 + $I_L16859_146, 2 * nd_layer + -2 * $I_L16858_158 + 1) + source_up(1 + $I_L16859_146, nd_layer + -$I_L16858_158)
16862.                   $I_L16859_146 = 1 + $I_L16859_146
16859.                   if ( $I_L16859_146 >= nd_profile ) exit
16859.                enddo
16859.             endif
16859.          endif
16859.       endif
16701.       _free( t$2752 )
16868.       return
16868.       end
16868.       
17007.       
17007.       subroutine monochromatic_ir_radiance( n_profile, n_layer, tau, rad_inc_down, diff_planck, source_ground, albedo_surface_diff, secant_ray, radiance, nd_profile, nd_layer )
16889.       t$782 = nd_profile
16889.       t$783 = nd_layer
16921.       t$2761 = _zla( 0, nd_profile )
16889.       t$2762 = _zla( 0, nd_profile )
16921.       t$2763 = _zla( 0, nd_layer )
16889.       t$2764 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
16889.       t$784 = ( 2 + 2 * nd_layer )
16934.       t$2765 = _zla( 0, ( 2 + 2 * nd_layer ) )
16889.       t$2766 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
16948.       t$2769 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16946.       t$2770 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16946.       t$2772 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16944.       t$2773 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16944.       t$2775 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
16889.       t$2767 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 ), 8 )
16948.       t$2768 = t$2767
16946.       t$2771 = t$2767 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
16944.       t$2774 = t$2767 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
16966.       if ( n_layer > 0 ) then
16967.          if ( n_profile > 0 ) then
16966.             $I_L16966_86 = 0
16966.             do
16967.                $I_L16967_76 = 0
16967. !dir$ ivdep
16967.                do
16968.                   $trans_WR0_R0 = _expn( -( secant_ray * tau(1 + $I_L16967_76, 1 + $I_L16966_86) ) )
16968.                   trans(1 + $I_L16967_76, 1 + $I_L16966_86) = $trans_WR0_R0
16974.                   $source_up_WR0_R1 = ( ( 1.0000000149011612 + -$trans_WR0_R0 ) * diff_planck(1 + $I_L16967_76, 1 + $I_L16966_86) * 1.0/( 1.4901161193847656e-8 + secant_ray * tau(1 + $I_L16967_76, 1 + $I_L16966_86) ) )
16974.                   source_up(1 + $I_L16967_76, 1 + $I_L16966_86) = $source_up_WR0_R1
16977.                   source_down(1 + $I_L16967_76, 1 + $I_L16966_86) = -$source_up_WR0_R1
16969.                   $I_L16967_76 = 1 + $I_L16967_76
16967.                   if ( $I_L16967_76 >= n_profile ) exit
16967.                enddo
16970.                $I_L16966_86 = 1 + $I_L16966_86
16969.                if ( $I_L16966_86 >= n_layer ) exit
16969.             enddo
16969.          endif
16969.       endif
16982.       if ( n_profile > 0 ) then
16982.          $I_L16982_78 = 0
16982. !dir$ ivdep
16982.          do
16983.             radiance(1 + $I_L16982_78, 2) = rad_inc_down(1 + $I_L16982_78)
16984.             $I_L16982_78 = 1 + $I_L16982_78
16982.             if ( $I_L16982_78 >= n_profile ) exit
16982.          enddo
16982.       endif
16985.       if ( n_layer > 0 ) then
16986.          if ( n_profile > 0 ) then
16985.             $I_L16985_88 = 0
16985.             if ( n_layer >= 2 ) then
16985.                $I_L16985_92 = 0
16985.                do
16986.                   $I_L16986_80 = 0
16986. !dir$ ivdep
16986.                   do
16987.                      radiance(1 + $I_L16986_80, 4 + 4 * $I_L16985_92) = trans(1 + $I_L16986_80, 1 + 2 * $I_L16985_92) * radiance(1 + $I_L16986_80, 2 + 4 * $I_L16985_92) + source_down(1 + $I_L16986_80, 1 + 2 * $I_L16985_92)
16987.                      radiance(1 + $I_L16986_80, 6 + 4 * $I_L16985_92) = trans(1 + $I_L16986_80, 2 + 2 * $I_L16985_92) * radiance(1 + $I_L16986_80, 4 + 4 * $I_L16985_92) + source_down(1 + $I_L16986_80, 2 + 2 * $I_L16985_92)
16989.                      $I_L16986_80 = 1 + $I_L16986_80
16986.                      if ( $I_L16986_80 >= n_profile ) exit
16986.                   enddo
16990.                   $I_L16985_92 = 1 + $I_L16985_92
16989.                   if ( $I_L16985_92 >= _rsh( n_layer, 1 ) ) exit
16989.                enddo
16990.                $I_L16985_88 = and( 0xfffffffffffffffeUL, n_layer )
16990.             endif
16985.             if ( $I_L16985_88 < n_layer ) then
16986.                $I_L16986_80 = 0
16986. !dir$ ivdep
16986.                do
16987.                   radiance(1 + $I_L16986_80, 4 + 2 * $I_L16985_88) = trans(1 + $I_L16986_80, 1 + $I_L16985_88) * radiance(1 + $I_L16986_80, 2 + 2 * $I_L16985_88) + source_down(1 + $I_L16986_80, 1 + $I_L16985_88)
16989.                   $I_L16986_80 = 1 + $I_L16986_80
16986.                   if ( $I_L16986_80 >= n_profile ) exit
16986.                enddo
16986.             endif
16986.          endif
16986.       endif
16993.       if ( n_profile > 0 ) then
16993.          $I_L16993_82 = 0
16993. !dir$ ivdep
16993.          do
16994.             radiance(1 + $I_L16993_82, 1 + 2 * n_layer) = source_ground(1 + $I_L16993_82) + albedo_surface_diff(1 + $I_L16993_82) * radiance(1 + $I_L16993_82, 2 + 2 * n_layer)
16996.             $I_L16993_82 = 1 + $I_L16993_82
16993.             if ( $I_L16993_82 >= n_profile ) exit
16993.          enddo
16993.       endif
16997.       if ( n_layer > 0 ) then
16998.          if ( n_profile > 0 ) then
16997.             $I_L16997_90 = 0
16997.             if ( n_layer >= 2 ) then
16997.                $I_L16997_94 = 0
16997.                do
16998.                   $I_L16998_84 = 0
16998. !dir$ ivdep
16998.                   do
16999.                      radiance(1 + $I_L16998_84, 2 * n_layer + -4 * $I_L16997_94 + -1) = trans(1 + $I_L16998_84, n_layer + -2 * $I_L16997_94) * radiance(1 + $I_L16998_84, 2 * n_layer + -4 * $I_L16997_94 + 1) + source_up(1 + $I_L16998_84, n_layer + -2 * $I_L16997_94)
16999.                      radiance(1 + $I_L16998_84, 2 * n_layer + -4 * $I_L16997_94 + -3) = trans(1 + $I_L16998_84, n_layer + -2 * $I_L16997_94 + -1) * radiance(1 + $I_L16998_84, 2 * n_layer + -4 * $I_L16997_94 + -1) + source_up(1 + $I_L16998_84, n_layer + -2 * $I_L16997_94 + -1)
17001.                      $I_L16998_84 = 1 + $I_L16998_84
16998.                      if ( $I_L16998_84 >= n_profile ) exit
16998.                   enddo
17002.                   $I_L16997_94 = 1 + $I_L16997_94
17001.                   if ( $I_L16997_94 >= _rsh( n_layer, 1 ) ) exit
17001.                enddo
17002.                $I_L16997_90 = and( 0xfffffffffffffffeUL, n_layer )
17002.             endif
16997.             if ( $I_L16997_90 < n_layer ) then
16998.                $I_L16998_84 = 0
16998. !dir$ ivdep
16998.                do
16999.                   radiance(1 + $I_L16998_84, 2 * n_layer + -2 * $I_L16997_90 + -1) = trans(1 + $I_L16998_84, n_layer + -$I_L16997_90) * radiance(1 + $I_L16998_84, 2 * n_layer + -2 * $I_L16997_90 + 1) + source_up(1 + $I_L16998_84, n_layer + -$I_L16997_90)
17001.                   $I_L16998_84 = 1 + $I_L16998_84
16998.                   if ( $I_L16998_84 >= n_profile ) exit
16998.                enddo
16998.             endif
16998.          endif
16998.       endif
16889.       _free( t$2767 )
17007.       return
17007.       end
17007.       
17581.       
17581.       subroutine monochromatic_radiance( ierr, n_profile, n_layer, d_mass, i_angular_integration, i_2stream, l_rescale, n_order_gauss, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, i_scatter_method, i_solver, k_gas_abs, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, zen_0, zen_00, flux_inc_direct, flux_inc_down, i_direct, d_planck_flux_surface, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud, n_region, k_clr, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, flux_direct, flux_total, radiance, j_radiance, l_clear, i_solver_clear, flux_direct_clear, flux_total_clear, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff )
17028.       t$789 = nd_profile
17028.       t$790 = nd_layer
17157.       t$2776 = _zla( 0, nd_profile )
17028.       t$2777 = _zla( 0, nd_profile )
17157.       t$2778 = _zla( 0, nd_layer )
17028.       t$2779 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
17028.       t$791 = nd_max_order
17028.       t$2780 = 1 + nd_max_order
17178.       t$2781 = _zla( 0, 1 + nd_max_order )
17028.       t$792 = nd_sph_coeff
17188.       t$2782 = _zla( 0, nd_sph_coeff )
17028.       t$793 = nd_radiance_profile
17192.       t$2783 = _zla( 0, nd_radiance_profile )
17028.       t$2784 = _zla( 0, nd_radiance_profile )
17028.       t$2785 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_radiance_profile )
17028.       t$2786 = 1 + nd_layer
17248.       t$2787 = _zla( 0, 1 + nd_layer )
17028.       t$2788 = _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer )
17028.       t$794 = nd_brdf_basis_fnc
17262.       t$2789 = _zla( 0, nd_brdf_basis_fnc )
17028.       t$2790 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
17028.       t$795 = nd_brdf_trunc / 2
17028.       t$796 = nd_brdf_trunc
17028.       t$2791 = _zla( 0, nd_brdf_basis_fnc )
17028.       t$2792 = 1 + nd_brdf_trunc / 2
17264.       t$2793 = _zla( 0, 1 + nd_brdf_trunc / 2 )
17028.       t$2794 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
17028.       t$2795 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
17028.       t$2796 = 1 + nd_brdf_trunc
17264.       t$2797 = _zla( 0, 1 + nd_brdf_trunc )
17028.       t$2798 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
17028.       t$797 = nd_direction
17028.       t$2799 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
17267.       t$2800 = _zla( 0, nd_direction )
17028.       t$2801 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
 2600.       if ( t$30 == 0 ) then
 2600.          t$2807(1) = 4
 2600.          t$2808(1) = 0
 2600.          t$2809(1) = 16
 2600.          t$2804(1) = int( loc( t$29 ), 8 )
 2600.          t$2805(1) = 0
 2600.          t$2806(1) = int( loc( t$2802 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$2804(1), t$2807(1), 1, t$2805(1), t$2806(1), t$2808(1), t$2809(1) )
 2600.       endif
17028.       t$800 = id_ct
17028.       t$798 = nd_cloud_type
17028.       t$2811 = nd_layer + -id_ct + 1
17312.       t$2812 = max( 0, nd_layer + -id_ct + 1 )
17028.       t$2813 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
17312.       t$2814 = max( 0, nd_cloud_type )
17028.       t$2815 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
17028.       t$803 = nd_region
17321.       t$2816 = max( 0, nd_region )
17028.       t$2817 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
17028.       t$2818 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
17028.       t$801 = ( -1 + id_ct )
17028.       t$802 = nd_overlap_coeff
17028.       t$2819 = nd_layer + -id_ct + 2
17316.       t$2820 = max( 0, nd_layer + -id_ct + 2 )
17028.       t$2821 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
17316.       t$2822 = max( 0, nd_overlap_coeff )
17028.       t$2823 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
17028.       t$799 = nd_column
17303.       t$2824 = max( 0, nd_column )
17028.       t$2825 = _zla( 0, nd_profile ) * max( 0, nd_column )
17028.       t$804 = nd_viewing_level
17329.       t$2826 = max( 0, nd_viewing_level )
17028.       t$2827 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
17028.       t$2828 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
17028.       t$805 = nd_flux_profile
17345.       t$2829 = max( 0, nd_flux_profile )
17028.       t$2830 = max( 0, nd_flux_profile )
17028.       t$2831 = max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
17028.       t$806 = ( 2 + 2 * nd_layer )
17347.       t$2832 = max( 0, ( 2 + 2 * nd_layer ) )
17028.       t$2833 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
17028.       t$2834 = _zla( 0, nd_radiance_profile ) * max( 0, nd_viewing_level )
17028.       t$2835 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level )
17028.       t$807 = nd_j_profile
17356.       t$2836 = max( 0, nd_j_profile )
17028.       t$2837 = max( 0, nd_j_profile )
17385.       t$2838 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
17028.       tau_clr_f%header%el_len = 64
17028.       tau_clr_f%header%assoc = 0
17028.       tau_clr_f%header%ptr_alloc = 0
17028.       tau_clr_f%header%p_or_a = 2
17028.       tau_clr_f%header%a_contig = 1
17028.       tau_clr_f%header%dv_versn = 2
17028.       tau_clr_f%header%dv_smunit = 64
17028.       tau_clr_f%header%d_type = 0
17028.       tau_clr_f%header%n_params = 0
17028.       tau_clr_f%header%pad_codim = 0
17028.       tau_clr_f%header%n_codim = 0
17028.       tau_clr_f%header%pad_dim = 0
17028.       tau_clr_f%header%n_dim = 2
17028.       tau_clr_f%header%d_type_idx = 13
17028.       tau_clr_f%header%typ_code = 134481411
17028.       tau_clr_f%header%orig_base = 0
17028.       tau_clr_f%header%orig_size = 0
17028.       tau_clr_f%dim_1%LB = 1
17028.       tau_clr_f%dim_1%EX = 0
17028.       tau_clr_f%dim_1%SM = 1
17028.       tau_clr_f%dim_2%LB = 1
17028.       tau_clr_f%dim_2%EX = 0
17028.       tau_clr_f%dim_2%SM = 1
17402.       call single_scattering_all( i_scatter_method, n_profile, n_layer, d_mass(1, 1), l_cloud, n_cloud_top, n_cloud_type, ss_prop, k_gas_abs(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct )
17417.       if ( i_angular_integration == 1 ) then
17417.          goto 10
17417.       else if ( i_angular_integration == 3 ) then
17417.    10    continue
17422.          if ( l_rescale ) then
17425.             if ( l_cloud == 0 ) then
17440.                t$7767 = 0
17440.                t$7768 = 0
17440.                t$7772 = 0
17440.                if ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) then
17440. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 0, 0)
17440.                   t$7766 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 0, 0) )
17440.                else
17440.                   t$7767 = ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) )
17440.                   t$7768 = ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) )
17440.                   t$7772 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
17438.                   call _f90_copy_from_dv( t$7771, ss_prop%tau )
17440. !dir$ suppress t$7771
17440.                   t$7766 = loc( t$7771 )
17440.                endif
17440.                t$7774 = 0
17440.                t$7775 = 0
17440.                t$7779 = 0
17440.                if ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) then
17440. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 0, 0)
17440.                   t$7773 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 0, 0) )
17440.                else
17440.                   t$7774 = ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) )
17440.                   t$7775 = ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) )
17440.                   t$7779 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
17438.                   call _f90_copy_from_dv( t$7778, ss_prop%omega )
17440. !dir$ suppress t$7778
17440.                   t$7773 = loc( t$7778 )
17440.                endif
17441.                t$7781 = 0
17441.                t$7782 = 0
17441.                t$7786 = 0
17441.                if ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%dim_1%EX == 0 ) then
17441. !dir$ suppress (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, 0, 0)
17441.                   t$7780 = loc( (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, 0, 0) )
17441.                else
17441.                   t$7781 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) )
17441.                   t$7782 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) )
17441.                   t$7786 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
17438.                   call _f90_copy_from_dv( t$7785, ss_prop%forward_scatter )
17441. !dir$ suppress t$7785
17441.                   t$7780 = loc( t$7785 )
17441.                endif
17438.                ipa$13302 = 1
17438.                call rescale_tau_omega( n_profile, ipa$13302, n_layer, t$7766, t$7773, t$7780, nd_profile, nd_layer, id_ct )
17441.                if ( ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%dim_1%EX == 0 ) == 0 ) then
17441.                   _free( t$7786 )
17441.                endif
17440.                if ( ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) == 0 ) then
17438.                   call _f90_copy_to_dv( ss_prop%omega, t$7778 )
17440.                   _free( t$7779 )
17440.                endif
17440.                if ( ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) == 0 ) then
17438.                   call _f90_copy_to_dv( ss_prop%tau, t$7771 )
17440.                   _free( t$7772 )
17440.                endif
17428.             else if ( n_cloud_type >= 0 ) then
17428.                $I_L17428_30 = 0
17428.                do
17431.                   t$7744 = 0
17431.                   t$7745 = 0
17431.                   t$7749 = 0
17431.                   if ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) then
17431. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, t$7742, 0)
17431.                      t$7743 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, $I_L17428_30, 0) )
17431.                   else
17431.                      t$7744 = ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) )
17431.                      t$7745 = ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) )
17431.                      t$7749 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
17429.                      call _f90_copy_from_dv( t$7748, ss_prop%tau )
17431. !dir$ suppress t$7748
17431.                      t$7743 = loc( t$7748 )
17431.                   endif
17431.                   t$7752 = 0
17431.                   t$7753 = 0
17431.                   t$7757 = 0
17431.                   if ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) then
17431. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, t$7750, 0)
17431.                      t$7751 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, $I_L17428_30, 0) )
17431.                   else
17431.                      t$7752 = ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) )
17431.                      t$7753 = ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) )
17431.                      t$7757 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
17429.                      call _f90_copy_from_dv( t$7756, ss_prop%omega )
17431. !dir$ suppress t$7756
17431.                      t$7751 = loc( t$7756 )
17431.                   endif
17432.                   t$7760 = 0
17432.                   t$7761 = 0
17432.                   t$7765 = 0
17432.                   if ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%dim_1%EX == 0 ) then
17432. !dir$ suppress (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, t$7758, 0)
17432.                      t$7759 = loc( (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, $I_L17428_30, 0) )
17432.                   else
17432.                      t$7760 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) )
17432.                      t$7761 = ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) )
17432.                      t$7765 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%forward_scatter%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
17429.                      call _f90_copy_from_dv( t$7764, ss_prop%forward_scatter )
17432. !dir$ suppress t$7764
17432.                      t$7759 = loc( t$7764 )
17432.                   endif
17429.                   ipa$13301 = 1
17429.                   call rescale_tau_omega( n_profile, ipa$13301, n_layer, t$7743, t$7751, t$7759, nd_profile, nd_layer, id_ct )
17432.                   if ( ( ss_prop%forward_scatter%header%a_contig == 1 .or. -ss_prop%forward_scatter%header%el_len + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%header%dv_smunit == 0 .and. -ss_prop%forward_scatter%dim_2%SM + ss_prop%forward_scatter%dim_1%SM * ss_prop%forward_scatter%dim_1%EX == 0 ) == 0 ) then
17432.                      _free( t$7765 )
17432.                   endif
17431.                   if ( ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) == 0 ) then
17429.                      call _f90_copy_to_dv( ss_prop%omega, t$7756 )
17431.                      _free( t$7757 )
17431.                   endif
17431.                   if ( ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) == 0 ) then
17429.                      call _f90_copy_to_dv( ss_prop%tau, t$7748 )
17431.                      _free( t$7749 )
17431.                   endif
17435.                   $I_L17428_30 = 1 + $I_L17428_30
17431.                   if ( $I_L17428_30 >= 1 + n_cloud_type ) exit
17431.                enddo
17431.             endif
17431.          endif
17431.       endif
17454.       if ( i_angular_integration == 1 ) then
17457.          call monochromatic_radiance_tseq( ierr, n_profile, n_layer, i_2stream, i_solver, i_scatter_method, l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), zen_0(1), zen_00(1, 1), flux_inc_direct(1), flux_inc_down(1), d_planck_flux_surface(1), rho_alb(1, 1), ss_prop, i_cloud, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, k_clr, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), flux_direct(1, 0), flux_total(1, 1), l_clear, i_solver_clear, flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_cloud_type, nd_region, nd_overlap_coeff, nd_source_coeff, nd_max_order )
17496.       else if ( i_angular_integration == 3 ) then
17499.          call monochromatic_radiance_sph( ierr, n_profile, n_layer, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, l_rescale, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), zen_0(1), zen_00(1, 1), flux_inc_down(1), i_direct(1, 0), d_planck_flux_surface(1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), ss_prop, i_cloud, n_cloud_top, n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct(1, 0), flux_total(1, 1), radiance(1, 1, 1), j_radiance(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction )
17499.       else if ( i_angular_integration == 2 ) then
17551.          tau_clr_f%header%a_contig = 1
17551.          tau_clr_f%dim_1%LB = 1
17551.          tau_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
17551.          tau_clr_f%dim_1%SM = 1
17551.          tau_clr_f%dim_2%LB = 1
17551.          tau_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
17551.          tau_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
17551.          $_allo_P0(0) = 0x1000000000001L
17551.          $_allo_P0(1) = loc( tau_clr_f )
17551.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
17552.          if ( -1 + n_cloud_top > 0 ) then
17553.             if ( n_profile > 0 ) then
17552.                $I_L17552_36 = 0
17552.                do
17553.                   $I_L17553_32 = 0
17553. !dir$ ivdep
17553.                   do
17554.                      (tau_clr_f%base_addr)(1 + $I_L17553_32, 1 + $I_L17552_36, 0) = (ss_prop%tau_clr%base_addr)(1 + $I_L17553_32, 1 + $I_L17552_36, 0)
17555.                      $I_L17553_32 = 1 + $I_L17553_32
17553.                      if ( $I_L17553_32 >= n_profile ) exit
17553.                   enddo
17556.                   $I_L17552_36 = 1 + $I_L17552_36
17555.                   if ( $I_L17552_36 >= -1 + n_cloud_top ) exit
17555.                enddo
17555.             endif
17555.          endif
17557.          if ( n_layer + -n_cloud_top >= 0 ) then
17558.             if ( n_profile > 0 ) then
17557.                $I_L17557_38 = 0
17557.                do
17558.                   $I_L17558_34 = 0
17558. !dir$ ivdep
17558.                   do
17559.                      (tau_clr_f%base_addr)(1 + $I_L17558_34, n_cloud_top + $I_L17557_38, 0) = (ss_prop%tau_clr%base_addr)(1 + $I_L17558_34, n_cloud_top + $I_L17557_38, 0)
17560.                      $I_L17558_34 = 1 + $I_L17558_34
17558.                      if ( $I_L17558_34 >= n_profile ) exit
17558.                   enddo
17561.                   $I_L17557_38 = 1 + $I_L17557_38
17560.                   if ( $I_L17557_38 >= n_layer + -n_cloud_top + 1 ) exit
17560.                enddo
17560.             endif
17560.          endif
17563.          call gauss_angle( n_profile, n_layer, n_order_gauss, (tau_clr_f%base_addr)(1, 1, 0), flux_inc_down(1), diff_planck(1, 1), d_planck_flux_surface(1), rho_alb(1, 1), flux_total(1, 1), l_ir_source_quad, diff_planck_2(1, 1), nd_profile, nd_layer )
17574.          $_allo_P1(0) = 0x1000000000001L
17574.          $_allo_P1(1) = loc( tau_clr_f )
17574.          call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
17574.          tau_clr_f%header%assoc = 0
17574.       endif
17385.       $_allo_P2(0) = 0x1000000000001L
17385.       $_allo_P2(1) = loc( tau_clr_f )
17385.       call _dealloc( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
17581.       return
17581.       end
17581.       
18164.       
18164.       subroutine monochromatic_radiance_sph( ierr, n_profile, n_layer, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, l_rescale, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, zen_0, zen_00, flux_inc_down, i_direct, d_planck_flux_surface, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, ss_prop, i_cloud, n_cloud_top, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, flux_direct, flux_total, radiance, j_radiance, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction )
17602.       t$818 = nd_max_order
17602.       t$2839 = 1 + nd_max_order
17725.       t$2840 = _zla( 0, 1 + nd_max_order )
17602.       t$819 = nd_sph_coeff
17735.       t$2841 = _zla( 0, nd_sph_coeff )
17602.       t$820 = nd_profile
17739.       t$2842 = _zla( 0, nd_profile )
17602.       t$2843 = _zla( 0, nd_profile )
17602.       t$2844 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_profile )
17602.       t$821 = nd_layer
17752.       t$2845 = _zla( 0, nd_layer )
17602.       t$2846 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
17602.       t$2847 = 1 + nd_layer
17779.       t$2848 = _zla( 0, 1 + nd_layer )
17602.       t$2849 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
17602.       t$822 = nd_brdf_basis_fnc
17793.       t$2850 = _zla( 0, nd_brdf_basis_fnc )
17602.       t$2851 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
17602.       t$823 = nd_brdf_trunc / 2
17602.       t$824 = nd_brdf_trunc
17602.       t$2852 = _zla( 0, nd_brdf_basis_fnc )
17602.       t$2853 = 1 + nd_brdf_trunc / 2
17795.       t$2854 = _zla( 0, 1 + nd_brdf_trunc / 2 )
17602.       t$2855 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
17602.       t$2856 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
17602.       t$2857 = 1 + nd_brdf_trunc
17795.       t$2858 = _zla( 0, 1 + nd_brdf_trunc )
17602.       t$2859 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
17602.       t$825 = nd_direction
17602.       t$2860 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
17798.       t$2861 = _zla( 0, nd_direction )
17602.       t$2862 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
 2600.       if ( t$30 == 0 ) then
 2600.          t$2868(1) = 4
 2600.          t$2869(1) = 0
 2600.          t$2870(1) = 16
 2600.          t$2865(1) = int( loc( t$29 ), 8 )
 2600.          t$2866(1) = 0
 2600.          t$2867(1) = int( loc( t$2863 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$2865(1), t$2868(1), 1, t$2866(1), t$2867(1), t$2869(1), t$2870(1) )
 2600.       endif
17602.       t$826 = nd_column
17822.       t$2872 = max( 0, nd_column )
17602.       t$2873 = _zla( 0, nd_profile ) * max( 0, nd_column )
17602.       t$827 = nd_viewing_level
17837.       t$2874 = max( 0, nd_viewing_level )
17602.       t$828 = nd_radiance_profile
17848.       t$2875 = max( 0, nd_radiance_profile )
17602.       t$2876 = max( 0, nd_radiance_profile )
17602.       t$2877 = _zla( 0, nd_direction ) * max( 0, nd_radiance_profile )
17602.       t$2878 = _zla( 0, nd_direction ) * max( 0, nd_radiance_profile ) * 2
17602.       t$829 = nd_flux_profile
17853.       t$2879 = max( 0, nd_flux_profile )
17602.       t$2880 = max( 0, nd_flux_profile )
17602.       t$2881 = max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
17602.       t$830 = ( 2 + 2 * nd_layer )
17855.       t$2882 = max( 0, ( 2 + 2 * nd_layer ) )
17602.       t$2883 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
17602.       t$2884 = max( 0, nd_viewing_level ) * max( 0, nd_radiance_profile )
17602.       t$2885 = _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * max( 0, nd_radiance_profile )
17602.       t$831 = nd_j_profile
17865.       t$2886 = max( 0, nd_j_profile )
17602.       t$2887 = max( 0, nd_j_profile )
17897.       t$2888 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
17893.       forward_scatter_clr_f%header%el_len = 64
17893.       forward_scatter_clr_f%header%assoc = 0
17893.       forward_scatter_clr_f%header%ptr_alloc = 0
17893.       forward_scatter_clr_f%header%p_or_a = 2
17893.       forward_scatter_clr_f%header%a_contig = 1
17893.       forward_scatter_clr_f%header%dv_versn = 2
17893.       forward_scatter_clr_f%header%dv_smunit = 64
17893.       forward_scatter_clr_f%header%d_type = 0
17893.       forward_scatter_clr_f%header%n_params = 0
17893.       forward_scatter_clr_f%header%pad_codim = 0
17893.       forward_scatter_clr_f%header%n_codim = 0
17893.       forward_scatter_clr_f%header%pad_dim = 0
17893.       forward_scatter_clr_f%header%n_dim = 2
17893.       forward_scatter_clr_f%header%d_type_idx = 13
17893.       forward_scatter_clr_f%header%typ_code = 134481411
17893.       forward_scatter_clr_f%header%orig_base = 0
17893.       forward_scatter_clr_f%header%orig_size = 0
17893.       forward_scatter_clr_f%dim_1%LB = 1
17893.       forward_scatter_clr_f%dim_1%EX = 0
17893.       forward_scatter_clr_f%dim_1%SM = 1
17893.       forward_scatter_clr_f%dim_2%LB = 1
17893.       forward_scatter_clr_f%dim_2%EX = 0
17893.       forward_scatter_clr_f%dim_2%SM = 1
17895.       omega_clr_f%header%el_len = 64
17895.       omega_clr_f%header%assoc = 0
17895.       omega_clr_f%header%ptr_alloc = 0
17895.       omega_clr_f%header%p_or_a = 2
17895.       omega_clr_f%header%a_contig = 1
17895.       omega_clr_f%header%dv_versn = 2
17895.       omega_clr_f%header%dv_smunit = 64
17895.       omega_clr_f%header%d_type = 0
17895.       omega_clr_f%header%n_params = 0
17895.       omega_clr_f%header%pad_codim = 0
17895.       omega_clr_f%header%n_codim = 0
17895.       omega_clr_f%header%pad_dim = 0
17895.       omega_clr_f%header%n_dim = 2
17895.       omega_clr_f%header%d_type_idx = 13
17895.       omega_clr_f%header%typ_code = 134481411
17895.       omega_clr_f%header%orig_base = 0
17895.       omega_clr_f%header%orig_size = 0
17895.       omega_clr_f%dim_1%LB = 1
17895.       omega_clr_f%dim_1%EX = 0
17895.       omega_clr_f%dim_1%SM = 1
17895.       omega_clr_f%dim_2%LB = 1
17895.       omega_clr_f%dim_2%EX = 0
17895.       omega_clr_f%dim_2%SM = 1
17899.       phase_fnc_clr_f%header%el_len = 64
17899.       phase_fnc_clr_f%header%assoc = 0
17899.       phase_fnc_clr_f%header%ptr_alloc = 0
17899.       phase_fnc_clr_f%header%p_or_a = 2
17899.       phase_fnc_clr_f%header%a_contig = 1
17899.       phase_fnc_clr_f%header%dv_versn = 2
17899.       phase_fnc_clr_f%header%dv_smunit = 64
17899.       phase_fnc_clr_f%header%d_type = 0
17899.       phase_fnc_clr_f%header%n_params = 0
17899.       phase_fnc_clr_f%header%pad_codim = 0
17899.       phase_fnc_clr_f%header%n_codim = 0
17899.       phase_fnc_clr_f%header%pad_dim = 0
17899.       phase_fnc_clr_f%header%n_dim = 3
17899.       phase_fnc_clr_f%header%d_type_idx = 13
17899.       phase_fnc_clr_f%header%typ_code = 134481411
17899.       phase_fnc_clr_f%header%orig_base = 0
17899.       phase_fnc_clr_f%header%orig_size = 0
17899.       phase_fnc_clr_f%dim_1%LB = 1
17899.       phase_fnc_clr_f%dim_1%EX = 0
17899.       phase_fnc_clr_f%dim_1%SM = 1
17899.       phase_fnc_clr_f%dim_2%LB = 1
17899.       phase_fnc_clr_f%dim_2%EX = 0
17899.       phase_fnc_clr_f%dim_2%SM = 1
17899.       phase_fnc_clr_f%dim_3%LB = 1
17899.       phase_fnc_clr_f%dim_3%EX = 0
17899.       phase_fnc_clr_f%dim_3%SM = 1
17891.       phase_fnc_solar_clr_f%header%el_len = 64
17891.       phase_fnc_solar_clr_f%header%assoc = 0
17891.       phase_fnc_solar_clr_f%header%ptr_alloc = 0
17891.       phase_fnc_solar_clr_f%header%p_or_a = 2
17891.       phase_fnc_solar_clr_f%header%a_contig = 1
17891.       phase_fnc_solar_clr_f%header%dv_versn = 2
17891.       phase_fnc_solar_clr_f%header%dv_smunit = 64
17891.       phase_fnc_solar_clr_f%header%d_type = 0
17891.       phase_fnc_solar_clr_f%header%n_params = 0
17891.       phase_fnc_solar_clr_f%header%pad_codim = 0
17891.       phase_fnc_solar_clr_f%header%n_codim = 0
17891.       phase_fnc_solar_clr_f%header%pad_dim = 0
17891.       phase_fnc_solar_clr_f%header%n_dim = 3
17891.       phase_fnc_solar_clr_f%header%d_type_idx = 13
17891.       phase_fnc_solar_clr_f%header%typ_code = 134481411
17891.       phase_fnc_solar_clr_f%header%orig_base = 0
17891.       phase_fnc_solar_clr_f%header%orig_size = 0
17891.       phase_fnc_solar_clr_f%dim_1%LB = 1
17891.       phase_fnc_solar_clr_f%dim_1%EX = 0
17891.       phase_fnc_solar_clr_f%dim_1%SM = 1
17891.       phase_fnc_solar_clr_f%dim_2%LB = 1
17891.       phase_fnc_solar_clr_f%dim_2%EX = 0
17891.       phase_fnc_solar_clr_f%dim_2%SM = 1
17891.       phase_fnc_solar_clr_f%dim_3%LB = 1
17891.       phase_fnc_solar_clr_f%dim_3%EX = 0
17891.       phase_fnc_solar_clr_f%dim_3%SM = 1
17602.       tau_clr_f%header%el_len = 64
17602.       tau_clr_f%header%assoc = 0
17602.       tau_clr_f%header%ptr_alloc = 0
17602.       tau_clr_f%header%p_or_a = 2
17602.       tau_clr_f%header%a_contig = 1
17602.       tau_clr_f%header%dv_versn = 2
17602.       tau_clr_f%header%dv_smunit = 64
17602.       tau_clr_f%header%d_type = 0
17602.       tau_clr_f%header%n_params = 0
17602.       tau_clr_f%header%pad_codim = 0
17602.       tau_clr_f%header%n_codim = 0
17602.       tau_clr_f%header%pad_dim = 0
17602.       tau_clr_f%header%n_dim = 2
17602.       tau_clr_f%header%d_type_idx = 13
17602.       tau_clr_f%header%typ_code = 134481411
17602.       tau_clr_f%header%orig_base = 0
17602.       tau_clr_f%header%orig_size = 0
17602.       tau_clr_f%dim_1%LB = 1
17602.       tau_clr_f%dim_1%EX = 0
17602.       tau_clr_f%dim_1%SM = 1
17602.       tau_clr_f%dim_2%LB = 1
17602.       tau_clr_f%dim_2%EX = 0
17602.       tau_clr_f%dim_2%SM = 1
17912.       if ( i_cloud == 5 ) then
17916.          nd_red_eigensystem = ( 1 + nd_max_order ) / 2
17917.          nd_sph_equation = nd_layer * ( ( 1 + nd_max_order ) / 2 ) * 2
17918.          nd_sph_diagonal = 6 * ( ( 1 + nd_max_order ) / 2 )
17919.          if ( i_sph_algorithm == 1 ) then
17920.             nd_sph_cf_weight = 1 + nd_max_order
17921.             nd_sph_u_range = 2 * ( ( 1 + nd_max_order ) / 2 )
17922.          else if ( i_sph_algorithm == 2 ) then
17923.             nd_sph_cf_weight = nd_direction
17924.             nd_sph_u_range = nd_layer * ( ( 1 + nd_max_order ) / 2 ) * 2
17924.          endif
17928.          tau_clr_f%header%a_contig = 1
17928.          tau_clr_f%dim_1%LB = 1
17928.          tau_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
17928.          tau_clr_f%dim_1%SM = 1
17928.          tau_clr_f%dim_2%LB = 1
17928.          tau_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
17928.          tau_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
17928.          $_allo_P0(0) = 0x1000000000001L
17928.          $_allo_P0(1) = loc( tau_clr_f )
17928.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
17929.          omega_clr_f%header%a_contig = 1
17929.          omega_clr_f%dim_1%LB = 1
17929.          omega_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
17929.          omega_clr_f%dim_1%SM = 1
17929.          omega_clr_f%dim_2%LB = 1
17929.          omega_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
17929.          omega_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
17929.          $_allo_P1(0) = 0x1000000000001L
17929.          $_allo_P1(1) = loc( omega_clr_f )
17929.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
17930.          phase_fnc_clr_f%header%a_contig = 1
17930.          phase_fnc_clr_f%dim_1%LB = 1
17930.          phase_fnc_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
17930.          phase_fnc_clr_f%dim_1%SM = 1
17930.          phase_fnc_clr_f%dim_2%LB = 1
17930.          phase_fnc_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
17930.          phase_fnc_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
17930.          phase_fnc_clr_f%dim_3%LB = 1
17930.          phase_fnc_clr_f%dim_3%EX = ( max( 0, nd_max_order ) )
17930.          phase_fnc_clr_f%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer ) )
17930.          $_allo_P2(0) = 0x1000000000001L
17930.          $_allo_P2(1) = loc( phase_fnc_clr_f )
17930.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
17931.          forward_scatter_clr_f%header%a_contig = 1
17931.          forward_scatter_clr_f%dim_1%LB = 1
17931.          forward_scatter_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
17931.          forward_scatter_clr_f%dim_1%SM = 1
17931.          forward_scatter_clr_f%dim_2%LB = 1
17931.          forward_scatter_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
17931.          forward_scatter_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
17931.          $_allo_P3(0) = 0x1000000000001L
17931.          $_allo_P3(1) = loc( forward_scatter_clr_f )
17931.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
17932.          phase_fnc_solar_clr_f%header%a_contig = 1
17932.          phase_fnc_solar_clr_f%dim_1%LB = 1
17932.          phase_fnc_solar_clr_f%dim_1%EX = ( max( 0, nd_radiance_profile ) )
17932.          phase_fnc_solar_clr_f%dim_1%SM = 1
17932.          phase_fnc_solar_clr_f%dim_2%LB = 1
17932.          phase_fnc_solar_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
17932.          phase_fnc_solar_clr_f%dim_2%SM = ( max( 0, nd_radiance_profile ) )
17932.          phase_fnc_solar_clr_f%dim_3%LB = 1
17932.          phase_fnc_solar_clr_f%dim_3%EX = ( max( 0, nd_direction ) )
17932.          phase_fnc_solar_clr_f%dim_3%SM = ( max( 0, nd_layer ) * max( 0, nd_radiance_profile ) )
17932.          $_allo_P4(0) = 0x1000000000001L
17932.          $_allo_P4(1) = loc( phase_fnc_solar_clr_f )
17932.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
17937.          t$7801 = 0
17937.          t$7802 = 0
17937.          t$7806 = 0
17937.          if ( ss_prop%tau_clr%header%a_contig == 1 ) then
17937. !dir$ suppress (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0)
17937.             t$7800 = loc( (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0) )
17937.          else
17937.             t$7801 = ss_prop%tau_clr%dim_1%EX
17937.             t$7802 = ss_prop%tau_clr%dim_2%EX
17937.             t$7806 = int( _alloc( max( 0, max( 0, ss_prop%tau_clr%dim_2%EX ) * max( 0, ss_prop%tau_clr%dim_1%EX ) * 8 ) ), 8 )
17935.             call _f90_copy_from_dv( t$7805, ss_prop%tau_clr )
17937. !dir$ suppress t$7805
17937.             t$7800 = loc( t$7805 )
17937.          endif
17937.          t$7808 = 0
17937.          t$7809 = 0
17937.          t$7813 = 0
17937.          if ( ss_prop%omega_clr%header%a_contig == 1 ) then
17937. !dir$ suppress (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0)
17937.             t$7807 = loc( (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0) )
17937.          else
17937.             t$7808 = ss_prop%omega_clr%dim_1%EX
17937.             t$7809 = ss_prop%omega_clr%dim_2%EX
17937.             t$7813 = int( _alloc( max( 0, max( 0, ss_prop%omega_clr%dim_2%EX ) * max( 0, ss_prop%omega_clr%dim_1%EX ) * 8 ) ), 8 )
17935.             call _f90_copy_from_dv( t$7812, ss_prop%omega_clr )
17937. !dir$ suppress t$7812
17937.             t$7807 = loc( t$7812 )
17937.          endif
17937.          t$7815 = 0
17937.          t$7816 = 0
17937.          t$7817 = 0
17937.          t$7822 = 0
17937.          if ( ss_prop%phase_fnc_clr%header%a_contig == 1 ) then
17937. !dir$ suppress (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0)
17937.             t$7814 = loc( (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0) )
17937.          else
17937.             t$7815 = ss_prop%phase_fnc_clr%dim_1%EX
17937.             t$7816 = ss_prop%phase_fnc_clr%dim_2%EX
17937.             t$7817 = ss_prop%phase_fnc_clr%dim_3%EX
17937.             t$7822 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc_clr%dim_2%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_1%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_3%EX ) * 8 ) ), 8 )
17935.             call _f90_copy_from_dv( t$7821, ss_prop%phase_fnc_clr )
17937. !dir$ suppress t$7821
17937.             t$7814 = loc( t$7821 )
17937.          endif
17938.          t$7824 = 0
17938.          t$7825 = 0
17938.          t$7826 = 0
17938.          t$7831 = 0
17938.          if ( ss_prop%tau%header%a_contig == 1 ) then
17938. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0)
17938.             t$7823 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0) )
17938.          else
17938.             t$7824 = ss_prop%tau%dim_1%EX
17938.             t$7825 = ss_prop%tau%dim_2%EX
17938.             t$7826 = ss_prop%tau%dim_3%EX
17938.             t$7831 = int( _alloc( max( 0, max( 0, ss_prop%tau%dim_2%EX ) * max( 0, ss_prop%tau%dim_1%EX ) * max( 0, ss_prop%tau%dim_3%EX ) * 8 ) ), 8 )
17935.             call _f90_copy_from_dv( t$7830, ss_prop%tau )
17938. !dir$ suppress t$7830
17938.             t$7823 = loc( t$7830 )
17938.          endif
17938.          t$7833 = 0
17938.          t$7834 = 0
17938.          t$7835 = 0
17938.          t$7840 = 0
17938.          if ( ss_prop%omega%header%a_contig == 1 ) then
17938. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0)
17938.             t$7832 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0) )
17938.          else
17938.             t$7833 = ss_prop%omega%dim_1%EX
17938.             t$7834 = ss_prop%omega%dim_2%EX
17938.             t$7835 = ss_prop%omega%dim_3%EX
17938.             t$7840 = int( _alloc( max( 0, max( 0, ss_prop%omega%dim_2%EX ) * max( 0, ss_prop%omega%dim_1%EX ) * max( 0, ss_prop%omega%dim_3%EX ) * 8 ) ), 8 )
17935.             call _f90_copy_from_dv( t$7839, ss_prop%omega )
17938. !dir$ suppress t$7839
17938.             t$7832 = loc( t$7839 )
17938.          endif
17938.          t$7842 = 0
17938.          t$7843 = 0
17938.          t$7844 = 0
17938.          t$7845 = 0
17938.          t$7851 = 0
17938.          if ( ss_prop%phase_fnc%header%a_contig == 1 ) then
17938. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0)
17938.             t$7841 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0) )
17938.          else
17938.             t$7842 = ss_prop%phase_fnc%dim_1%EX
17938.             t$7843 = ss_prop%phase_fnc%dim_2%EX
17938.             t$7844 = ss_prop%phase_fnc%dim_3%EX
17938.             t$7845 = ss_prop%phase_fnc%dim_4%EX
17938.             t$7851 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc%dim_2%EX ) * max( 0, ss_prop%phase_fnc%dim_1%EX ) * max( 0, ss_prop%phase_fnc%dim_3%EX ) * max( 0, ss_prop%phase_fnc%dim_4%EX ) * 8 ) ), 8 )
17935.             call _f90_copy_from_dv( t$7850, ss_prop%phase_fnc )
17938. !dir$ suppress t$7850
17938.             t$7841 = loc( t$7850 )
17938.          endif
17935.          call copy_clr_full( n_profile, n_layer, n_cloud_top, n_order_phase, t$7800, t$7807, t$7814, t$7823, t$7832, t$7841, (tau_clr_f%base_addr)(1, 1, 0), (omega_clr_f%base_addr)(1, 1, 0), (phase_fnc_clr_f%base_addr)(1, 1, 1, 0), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order )
17938.          if ( ss_prop%phase_fnc%header%a_contig /= 1 ) then
17938.             _free( t$7851 )
17938.          endif
17938.          if ( ss_prop%omega%header%a_contig /= 1 ) then
17938.             _free( t$7840 )
17938.          endif
17938.          if ( ss_prop%tau%header%a_contig /= 1 ) then
17938.             _free( t$7831 )
17938.          endif
17937.          if ( ss_prop%phase_fnc_clr%header%a_contig /= 1 ) then
17937.             _free( t$7822 )
17937.          endif
17937.          if ( ss_prop%omega_clr%header%a_contig /= 1 ) then
17937.             _free( t$7813 )
17937.          endif
17937.          if ( ss_prop%tau_clr%header%a_contig /= 1 ) then
17937.             _free( t$7806 )
17937.          endif
17943.          if ( i_sph_algorithm == 2 ) then
17943.             if ( isolir == 1 ) then
17947.                t$7853 = 0
17947.                t$7854 = 0
17947.                t$7858 = 0
17947.                if ( ss_prop%forward_scatter_clr%header%a_contig == 1 ) then
17947. !dir$ suppress (ss_prop%forward_scatter_clr%base_addr)(ss_prop%forward_scatter_clr%dim_1%LB, ss_prop%forward_scatter_clr%dim_2%LB, 0)
17947.                   t$7852 = loc( (ss_prop%forward_scatter_clr%base_addr)(ss_prop%forward_scatter_clr%dim_1%LB, ss_prop%forward_scatter_clr%dim_2%LB, 0) )
17947.                else
17947.                   t$7853 = ss_prop%forward_scatter_clr%dim_1%EX
17947.                   t$7854 = ss_prop%forward_scatter_clr%dim_2%EX
17947.                   t$7858 = int( _alloc( max( 0, max( 0, ss_prop%forward_scatter_clr%dim_2%EX ) * max( 0, ss_prop%forward_scatter_clr%dim_1%EX ) * 8 ) ), 8 )
17945.                   call _f90_copy_from_dv( t$7857, ss_prop%forward_scatter_clr )
17947. !dir$ suppress t$7857
17947.                   t$7852 = loc( t$7857 )
17947.                endif
17948.                t$7860 = 0
17948.                t$7861 = 0
17948.                t$7862 = 0
17948.                t$7867 = 0
17948.                if ( ss_prop%phase_fnc_solar_clr%header%a_contig == 1 ) then
17948. !dir$ suppress (ss_prop%phase_fnc_solar_clr%base_addr)(ss_prop%phase_fnc_solar_clr%dim_1%LB, ss_prop%phase_fnc_solar_clr%dim_2%LB, ss_prop%phase_fnc_solar_clr%dim_3%LB, 0)
17948.                   t$7859 = loc( (ss_prop%phase_fnc_solar_clr%base_addr)(ss_prop%phase_fnc_solar_clr%dim_1%LB, ss_prop%phase_fnc_solar_clr%dim_2%LB, ss_prop%phase_fnc_solar_clr%dim_3%LB, 0) )
17948.                else
17948.                   t$7860 = ss_prop%phase_fnc_solar_clr%dim_1%EX
17948.                   t$7861 = ss_prop%phase_fnc_solar_clr%dim_2%EX
17948.                   t$7862 = ss_prop%phase_fnc_solar_clr%dim_3%EX
17948.                   t$7867 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc_solar_clr%dim_2%EX ) * max( 0, ss_prop%phase_fnc_solar_clr%dim_1%EX ) * max( 0, ss_prop%phase_fnc_solar_clr%dim_3%EX ) * 8 ) ), 8 )
17945.                   call _f90_copy_from_dv( t$7866, ss_prop%phase_fnc_solar_clr )
17948. !dir$ suppress t$7866
17948.                   t$7859 = loc( t$7866 )
17948.                endif
17949.                t$7869 = 0
17949.                t$7870 = 0
17949.                t$7871 = 0
17949.                t$7876 = 0
17949.                if ( ss_prop%forward_scatter%header%a_contig == 1 ) then
17949. !dir$ suppress (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, ss_prop%forward_scatter%dim_3%LB, 0)
17949.                   t$7868 = loc( (ss_prop%forward_scatter%base_addr)(ss_prop%forward_scatter%dim_1%LB, ss_prop%forward_scatter%dim_2%LB, ss_prop%forward_scatter%dim_3%LB, 0) )
17949.                else
17949.                   t$7869 = ss_prop%forward_scatter%dim_1%EX
17949.                   t$7870 = ss_prop%forward_scatter%dim_2%EX
17949.                   t$7871 = ss_prop%forward_scatter%dim_3%EX
17949.                   t$7876 = int( _alloc( max( 0, max( 0, ss_prop%forward_scatter%dim_2%EX ) * max( 0, ss_prop%forward_scatter%dim_1%EX ) * max( 0, ss_prop%forward_scatter%dim_3%EX ) * 8 ) ), 8 )
17945.                   call _f90_copy_from_dv( t$7875, ss_prop%forward_scatter )
17949. !dir$ suppress t$7875
17949.                   t$7868 = loc( t$7875 )
17949.                endif
17949.                t$7878 = 0
17949.                t$7879 = 0
17949.                t$7880 = 0
17949.                t$7881 = 0
17949.                t$7887 = 0
17949.                if ( ss_prop%phase_fnc_solar%header%a_contig == 1 ) then
17949. !dir$ suppress (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, ss_prop%phase_fnc_solar%dim_4%LB, 0)
17949.                   t$7877 = loc( (ss_prop%phase_fnc_solar%base_addr)(ss_prop%phase_fnc_solar%dim_1%LB, ss_prop%phase_fnc_solar%dim_2%LB, ss_prop%phase_fnc_solar%dim_3%LB, ss_prop%phase_fnc_solar%dim_4%LB, 0) )
17949.                else
17949.                   t$7878 = ss_prop%phase_fnc_solar%dim_1%EX
17949.                   t$7879 = ss_prop%phase_fnc_solar%dim_2%EX
17949.                   t$7880 = ss_prop%phase_fnc_solar%dim_3%EX
17949.                   t$7881 = ss_prop%phase_fnc_solar%dim_4%EX
17949.                   t$7887 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc_solar%dim_2%EX ) * max( 0, ss_prop%phase_fnc_solar%dim_1%EX ) * max( 0, ss_prop%phase_fnc_solar%dim_3%EX ) * max( 0, ss_prop%phase_fnc_solar%dim_4%EX ) * 8 ) ), 8 )
17945.                   call _f90_copy_from_dv( t$7886, ss_prop%phase_fnc_solar )
17949. !dir$ suppress t$7886
17949.                   t$7877 = loc( t$7886 )
17949.                endif
17945.                call copy_clr_sol( n_profile, n_layer, n_cloud_top, n_direction, l_rescale, t$7852, t$7859, t$7868, t$7877, (forward_scatter_clr_f%base_addr)(1, 1, 0), (phase_fnc_solar_clr_f%base_addr)(1, 1, 1, 0), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_direction )
17949.                if ( ss_prop%phase_fnc_solar%header%a_contig /= 1 ) then
17949.                   _free( t$7887 )
17949.                endif
17949.                if ( ss_prop%forward_scatter%header%a_contig /= 1 ) then
17949.                   _free( t$7876 )
17949.                endif
17948.                if ( ss_prop%phase_fnc_solar_clr%header%a_contig /= 1 ) then
17948.                   _free( t$7867 )
17948.                endif
17947.                if ( ss_prop%forward_scatter_clr%header%a_contig /= 1 ) then
17947.                   _free( t$7858 )
17947.                endif
17947.             endif
17947.          endif
17957.          call sph_solver( ierr, n_profile, n_layer, ms_min, ms_max, i_truncation, ls_local_trunc(0), cg_coeff(1), uplm_zero(1), ia_sph_mm(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, isolir, l_scale_solar, adjust_solar_ke(1, 1), i_direct(1, 0), zen_0(1), uplm_sol(1, 1), diff_planck(1, 1), flux_inc_down(1), l_ir_source_quad, diff_planck_2(1, 1), (tau_clr_f%base_addr)(1, 1, 0), (omega_clr_f%base_addr)(1, 1, 0), (phase_fnc_clr_f%base_addr)(1, 1, 1, 0), (phase_fnc_solar_clr_f%base_addr)(1, 1, 1, 0), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), d_planck_flux_surface(1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct(1, 0), flux_total(1, 1), radiance(1, 1, 1), j_radiance(1, 1), nd_profile, nd_layer, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range, nd_viewing_level, nd_direction )
17997.          if ( ierr /= 0 ) then
17897.             $_allo_P5(0) = 0x5000000000001L
17897.             $_allo_P5(1) = loc( tau_clr_f )
17897.             $_allo_P5(2) = loc( phase_fnc_solar_clr_f )
17897.             $_allo_P5(3) = loc( phase_fnc_clr_f )
17897.             $_allo_P5(4) = loc( omega_clr_f )
17897.             $_allo_P5(5) = loc( forward_scatter_clr_f )
17897.             call _dealloc( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
17897.          else
17897.             goto 10
17897.          endif
17999.       else if ( i_cloud == 2 ) then
17999.          goto 20
17999.       else if ( i_cloud == 4 ) then
17999.          goto 20
17999.       else if ( i_cloud == 6 ) then
17999.          goto 20
17999.       else if ( i_cloud == 7 ) then
17999.          goto 20
17999.       else if ( i_cloud == 8 ) then
17999.    20    continue
18005.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$833,  _substr(t$832,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Radiances cannot yet be computed using coupled overlaps.', 0x800600000000L ) ) )
18008.          ierr = 1
17897.          $_allo_P8(0) = 0x5000000000001L
17897.          $_allo_P8(1) = loc( tau_clr_f )
17897.          $_allo_P8(2) = loc( phase_fnc_solar_clr_f )
17897.          $_allo_P8(3) = loc( phase_fnc_clr_f )
17897.          $_allo_P8(4) = loc( omega_clr_f )
17897.          $_allo_P8(5) = loc( forward_scatter_clr_f )
17897.          call _dealloc( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
17897.       else if ( i_cloud == 3 ) then
18092.          nd_profile_column = max( 1, n_profile )
18093.          if ( n_profile > 0 ) then
18093.             $I_L18093_4 = 0
18093. !dir$ ivdep
18093.             do
18094.                nd_profile_column = max( nd_profile_column, n_column_slv(1 + $I_L18093_4) )
18095.                $I_L18093_4 = 1 + $I_L18093_4
18093.                if ( $I_L18093_4 >= n_profile ) exit
18093.             enddo
18093.          endif
18099.          nd_red_eigensystem = ( 1 + nd_max_order ) / 2
18100.          nd_sph_equation = nd_layer * ( ( 1 + nd_max_order ) / 2 ) * 2
18101.          nd_sph_diagonal = 6 * ( ( 1 + nd_max_order ) / 2 )
18102.          if ( i_sph_algorithm == 1 ) then
18103.             nd_sph_cf_weight = 1 + nd_max_order
18104.             nd_sph_u_range = 2 * ( ( 1 + nd_max_order ) / 2 )
18105.          else if ( i_sph_algorithm == 2 ) then
18106.             nd_sph_cf_weight = nd_direction
18107.             nd_sph_u_range = nd_layer * ( ( 1 + nd_max_order ) / 2 ) * 2
18107.          endif
18111.          call calc_radiance_ipa( ierr, n_profile, n_layer, n_cloud_top, n_order_phase, ms_min, ms_max, ls_local_trunc(0), i_truncation, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, l_rescale, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), zen_0(1), d_planck_flux_surface(1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), ss_prop, n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct(1, 0), flux_total(1, 1), i_direct(1, 0), radiance(1, 1, 1), j_radiance(1, 1), nd_profile, nd_layer, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range, nd_viewing_level, nd_direction, nd_profile_column )
18156.          if ( ierr /= 0 ) then
17897.             $_allo_P6(0) = 0x5000000000001L
17897.             $_allo_P6(1) = loc( tau_clr_f )
17897.             $_allo_P6(2) = loc( phase_fnc_solar_clr_f )
17897.             $_allo_P6(3) = loc( phase_fnc_clr_f )
17897.             $_allo_P6(4) = loc( omega_clr_f )
17897.             $_allo_P6(5) = loc( forward_scatter_clr_f )
17897.             call _dealloc( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
17897.          else
17897.             goto 10
17897.          endif
17897.       else
17897.    10    continue
17897.          $_allo_P7(0) = 0x5000000000001L
17897.          $_allo_P7(1) = loc( tau_clr_f )
17897.          $_allo_P7(2) = loc( phase_fnc_solar_clr_f )
17897.          $_allo_P7(3) = loc( phase_fnc_clr_f )
17897.          $_allo_P7(4) = loc( omega_clr_f )
17897.          $_allo_P7(5) = loc( forward_scatter_clr_f )
17897.          call _dealloc( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
17897.       endif
18164.       return
18164.       end
18164.       
18663.       
18663.       subroutine monochromatic_radiance_tseq( ierr, n_profile, n_layer, i_2stream, i_solver, i_scatter_method, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, sec_0, sec_00, flux_inc_direct, flux_inc_down, d_planck_flux_surface, rho_alb, ss_prop, i_cloud, n_cloud_top, n_cloud_type, frac_cloud, n_region, k_clr, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, flux_direct, flux_total, l_clear, i_solver_clear, flux_direct_clear, flux_total_clear, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_cloud_type, nd_region, nd_overlap_coeff, nd_source_coeff, nd_max_order )
18185.       t$842 = nd_profile
18185.       t$843 = nd_layer
18294.       t$2889 = _zla( 0, nd_profile )
18185.       t$2890 = _zla( 0, nd_profile )
18294.       t$2891 = _zla( 0, nd_layer )
18185.       t$2892 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
18185.       t$2893 = 2 * _zla( 0, nd_profile )
 2600.       if ( t$30 == 0 ) then
 2600.          t$2899(1) = 4
 2600.          t$2900(1) = 0
 2600.          t$2901(1) = 16
 2600.          t$2896(1) = int( loc( t$29 ), 8 )
 2600.          t$2897(1) = 0
 2600.          t$2898(1) = int( loc( t$2894 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$2896(1), t$2899(1), 1, t$2897(1), t$2898(1), t$2900(1), t$2901(1) )
 2600.       endif
18185.       t$846 = id_ct
18185.       t$844 = nd_cloud_type
18185.       t$2903 = nd_layer + -id_ct + 1
18366.       t$2904 = max( 0, nd_layer + -id_ct + 1 )
18185.       t$2905 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
18366.       t$2906 = max( 0, nd_cloud_type )
18185.       t$2907 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
18185.       t$849 = nd_region
18375.       t$2908 = max( 0, nd_region )
18185.       t$2909 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
18185.       t$2910 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
18185.       t$847 = ( -1 + id_ct )
18185.       t$848 = nd_overlap_coeff
18185.       t$2911 = nd_layer + -id_ct + 2
18370.       t$2912 = max( 0, nd_layer + -id_ct + 2 )
18185.       t$2913 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
18370.       t$2914 = max( 0, nd_overlap_coeff )
18185.       t$2915 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
18185.       t$845 = nd_column
18357.       t$2916 = max( 0, nd_column )
18185.       t$2917 = _zla( 0, nd_profile ) * max( 0, nd_column )
18185.       t$2918 = 1 + nd_layer
18392.       t$2919 = max( 0, 1 + nd_layer )
18185.       t$2920 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer )
18185.       t$850 = ( 2 + 2 * nd_layer )
18394.       t$2921 = max( 0, ( 2 + 2 * nd_layer ) )
18428.       t$2922 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
18430.       omega_clr_f%header%el_len = 64
18430.       omega_clr_f%header%assoc = 0
18430.       omega_clr_f%header%ptr_alloc = 0
18430.       omega_clr_f%header%p_or_a = 2
18430.       omega_clr_f%header%a_contig = 1
18430.       omega_clr_f%header%dv_versn = 2
18430.       omega_clr_f%header%dv_smunit = 64
18430.       omega_clr_f%header%d_type = 0
18430.       omega_clr_f%header%n_params = 0
18430.       omega_clr_f%header%pad_codim = 0
18430.       omega_clr_f%header%n_codim = 0
18430.       omega_clr_f%header%pad_dim = 0
18430.       omega_clr_f%header%n_dim = 2
18430.       omega_clr_f%header%d_type_idx = 13
18430.       omega_clr_f%header%typ_code = 134481411
18430.       omega_clr_f%header%orig_base = 0
18430.       omega_clr_f%header%orig_size = 0
18430.       omega_clr_f%dim_1%LB = 1
18430.       omega_clr_f%dim_1%EX = 0
18430.       omega_clr_f%dim_1%SM = 1
18430.       omega_clr_f%dim_2%LB = 1
18430.       omega_clr_f%dim_2%EX = 0
18430.       omega_clr_f%dim_2%SM = 1
18426.       phase_fnc_clr_f%header%el_len = 64
18426.       phase_fnc_clr_f%header%assoc = 0
18426.       phase_fnc_clr_f%header%ptr_alloc = 0
18426.       phase_fnc_clr_f%header%p_or_a = 2
18426.       phase_fnc_clr_f%header%a_contig = 1
18426.       phase_fnc_clr_f%header%dv_versn = 2
18426.       phase_fnc_clr_f%header%dv_smunit = 64
18426.       phase_fnc_clr_f%header%d_type = 0
18426.       phase_fnc_clr_f%header%n_params = 0
18426.       phase_fnc_clr_f%header%pad_codim = 0
18426.       phase_fnc_clr_f%header%n_codim = 0
18426.       phase_fnc_clr_f%header%pad_dim = 0
18426.       phase_fnc_clr_f%header%n_dim = 3
18426.       phase_fnc_clr_f%header%d_type_idx = 13
18426.       phase_fnc_clr_f%header%typ_code = 134481411
18426.       phase_fnc_clr_f%header%orig_base = 0
18426.       phase_fnc_clr_f%header%orig_size = 0
18426.       phase_fnc_clr_f%dim_1%LB = 1
18426.       phase_fnc_clr_f%dim_1%EX = 0
18426.       phase_fnc_clr_f%dim_1%SM = 1
18426.       phase_fnc_clr_f%dim_2%LB = 1
18426.       phase_fnc_clr_f%dim_2%EX = 0
18426.       phase_fnc_clr_f%dim_2%SM = 1
18426.       phase_fnc_clr_f%dim_3%LB = 1
18426.       phase_fnc_clr_f%dim_3%EX = 0
18426.       phase_fnc_clr_f%dim_3%SM = 1
18185.       tau_clr_f%header%el_len = 64
18185.       tau_clr_f%header%assoc = 0
18185.       tau_clr_f%header%ptr_alloc = 0
18185.       tau_clr_f%header%p_or_a = 2
18185.       tau_clr_f%header%a_contig = 1
18185.       tau_clr_f%header%dv_versn = 2
18185.       tau_clr_f%header%dv_smunit = 64
18185.       tau_clr_f%header%d_type = 0
18185.       tau_clr_f%header%n_params = 0
18185.       tau_clr_f%header%pad_codim = 0
18185.       tau_clr_f%header%n_codim = 0
18185.       tau_clr_f%header%pad_dim = 0
18185.       tau_clr_f%header%n_dim = 2
18185.       tau_clr_f%header%d_type_idx = 13
18185.       tau_clr_f%header%typ_code = 134481411
18185.       tau_clr_f%header%orig_base = 0
18185.       tau_clr_f%header%orig_size = 0
18185.       tau_clr_f%dim_1%LB = 1
18185.       tau_clr_f%dim_1%EX = 0
18185.       tau_clr_f%dim_1%SM = 1
18185.       tau_clr_f%dim_2%LB = 1
18185.       tau_clr_f%dim_2%EX = 0
18185.       tau_clr_f%dim_2%SM = 1
18443.       if ( i_cloud == 5 ) then
18445.          tau_clr_f%header%a_contig = 1
18445.          tau_clr_f%dim_1%LB = 1
18445.          tau_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
18445.          tau_clr_f%dim_1%SM = 1
18445.          tau_clr_f%dim_2%LB = 1
18445.          tau_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
18445.          tau_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
18445.          $_allo_P0(0) = 0x1000000000001L
18445.          $_allo_P0(1) = loc( tau_clr_f )
18445.          call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
18446.          omega_clr_f%header%a_contig = 1
18446.          omega_clr_f%dim_1%LB = 1
18446.          omega_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
18446.          omega_clr_f%dim_1%SM = 1
18446.          omega_clr_f%dim_2%LB = 1
18446.          omega_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
18446.          omega_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
18446.          $_allo_P1(0) = 0x1000000000001L
18446.          $_allo_P1(1) = loc( omega_clr_f )
18446.          call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
18447.          phase_fnc_clr_f%header%a_contig = 1
18447.          phase_fnc_clr_f%dim_1%LB = 1
18447.          phase_fnc_clr_f%dim_1%EX = ( max( 0, nd_profile ) )
18447.          phase_fnc_clr_f%dim_1%SM = 1
18447.          phase_fnc_clr_f%dim_2%LB = 1
18447.          phase_fnc_clr_f%dim_2%EX = ( max( 0, nd_layer ) )
18447.          phase_fnc_clr_f%dim_2%SM = ( max( 0, nd_profile ) )
18447.          phase_fnc_clr_f%dim_3%LB = 1
18447.          phase_fnc_clr_f%dim_3%EX = 1
18447.          phase_fnc_clr_f%dim_3%SM = ( max( 0, nd_profile ) * max( 0, nd_layer ) )
18447.          $_allo_P2(0) = 0x1000000000001L
18447.          $_allo_P2(1) = loc( phase_fnc_clr_f )
18447.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
18451.          t$7892 = 0
18451.          t$7893 = 0
18451.          t$7897 = 0
18451.          if ( ss_prop%tau_clr%header%a_contig == 1 ) then
18451. !dir$ suppress (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0)
18451.             t$7891 = loc( (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0) )
18451.          else
18451.             t$7892 = ss_prop%tau_clr%dim_1%EX
18451.             t$7893 = ss_prop%tau_clr%dim_2%EX
18451.             t$7897 = int( _alloc( max( 0, max( 0, ss_prop%tau_clr%dim_2%EX ) * max( 0, ss_prop%tau_clr%dim_1%EX ) * 8 ) ), 8 )
18449.             call _f90_copy_from_dv( t$7896, ss_prop%tau_clr )
18451. !dir$ suppress t$7896
18451.             t$7891 = loc( t$7896 )
18451.          endif
18451.          t$7899 = 0
18451.          t$7900 = 0
18451.          t$7904 = 0
18451.          if ( ss_prop%omega_clr%header%a_contig == 1 ) then
18451. !dir$ suppress (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0)
18451.             t$7898 = loc( (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0) )
18451.          else
18451.             t$7899 = ss_prop%omega_clr%dim_1%EX
18451.             t$7900 = ss_prop%omega_clr%dim_2%EX
18451.             t$7904 = int( _alloc( max( 0, max( 0, ss_prop%omega_clr%dim_2%EX ) * max( 0, ss_prop%omega_clr%dim_1%EX ) * 8 ) ), 8 )
18449.             call _f90_copy_from_dv( t$7903, ss_prop%omega_clr )
18451. !dir$ suppress t$7903
18451.             t$7898 = loc( t$7903 )
18451.          endif
18452.          t$7906 = 0
18452.          t$7907 = 0
18452.          t$7908 = 0
18452.          t$7913 = 0
18452.          if ( ss_prop%phase_fnc_clr%header%a_contig == 1 ) then
18452. !dir$ suppress (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0)
18452.             t$7905 = loc( (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0) )
18452.          else
18452.             t$7906 = ss_prop%phase_fnc_clr%dim_1%EX
18452.             t$7907 = ss_prop%phase_fnc_clr%dim_2%EX
18452.             t$7908 = ss_prop%phase_fnc_clr%dim_3%EX
18452.             t$7913 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc_clr%dim_2%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_1%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_3%EX ) * 8 ) ), 8 )
18449.             call _f90_copy_from_dv( t$7912, ss_prop%phase_fnc_clr )
18452. !dir$ suppress t$7912
18452.             t$7905 = loc( t$7912 )
18452.          endif
18453.          t$7915 = 0
18453.          t$7916 = 0
18453.          t$7917 = 0
18453.          t$7922 = 0
18453.          if ( ss_prop%tau%header%a_contig == 1 ) then
18453. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0)
18453.             t$7914 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0) )
18453.          else
18453.             t$7915 = ss_prop%tau%dim_1%EX
18453.             t$7916 = ss_prop%tau%dim_2%EX
18453.             t$7917 = ss_prop%tau%dim_3%EX
18453.             t$7922 = int( _alloc( max( 0, max( 0, ss_prop%tau%dim_2%EX ) * max( 0, ss_prop%tau%dim_1%EX ) * max( 0, ss_prop%tau%dim_3%EX ) * 8 ) ), 8 )
18449.             call _f90_copy_from_dv( t$7921, ss_prop%tau )
18453. !dir$ suppress t$7921
18453.             t$7914 = loc( t$7921 )
18453.          endif
18453.          t$7924 = 0
18453.          t$7925 = 0
18453.          t$7926 = 0
18453.          t$7931 = 0
18453.          if ( ss_prop%omega%header%a_contig == 1 ) then
18453. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0)
18453.             t$7923 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0) )
18453.          else
18453.             t$7924 = ss_prop%omega%dim_1%EX
18453.             t$7925 = ss_prop%omega%dim_2%EX
18453.             t$7926 = ss_prop%omega%dim_3%EX
18453.             t$7931 = int( _alloc( max( 0, max( 0, ss_prop%omega%dim_2%EX ) * max( 0, ss_prop%omega%dim_1%EX ) * max( 0, ss_prop%omega%dim_3%EX ) * 8 ) ), 8 )
18449.             call _f90_copy_from_dv( t$7930, ss_prop%omega )
18453. !dir$ suppress t$7930
18453.             t$7923 = loc( t$7930 )
18453.          endif
18453.          t$7933 = 0
18453.          t$7934 = 0
18453.          t$7935 = 0
18453.          t$7936 = 0
18453.          t$7942 = 0
18453.          if ( ss_prop%phase_fnc%header%a_contig == 1 ) then
18453. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0)
18453.             t$7932 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0) )
18453.          else
18453.             t$7933 = ss_prop%phase_fnc%dim_1%EX
18453.             t$7934 = ss_prop%phase_fnc%dim_2%EX
18453.             t$7935 = ss_prop%phase_fnc%dim_3%EX
18453.             t$7936 = ss_prop%phase_fnc%dim_4%EX
18453.             t$7942 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc%dim_2%EX ) * max( 0, ss_prop%phase_fnc%dim_1%EX ) * max( 0, ss_prop%phase_fnc%dim_3%EX ) * max( 0, ss_prop%phase_fnc%dim_4%EX ) * 8 ) ), 8 )
18449.             call _f90_copy_from_dv( t$7941, ss_prop%phase_fnc )
18453. !dir$ suppress t$7941
18453.             t$7932 = loc( t$7941 )
18453.          endif
18449.          ipa$16426 = 1
18449.          ipa$16434 = 1
18449.          call copy_clr_full( n_profile, n_layer, n_cloud_top, ipa$16426, t$7891, t$7898, t$7905, t$7914, t$7923, t$7932, (tau_clr_f%base_addr)(1, 1, 0), (omega_clr_f%base_addr)(1, 1, 0), (phase_fnc_clr_f%base_addr)(1, 1, 1, 0), nd_profile, nd_layer, nd_layer_clr, id_ct, ipa$16434 )
18453.          if ( ss_prop%phase_fnc%header%a_contig /= 1 ) then
18453.             _free( t$7942 )
18453.          endif
18453.          if ( ss_prop%omega%header%a_contig /= 1 ) then
18453.             _free( t$7931 )
18453.          endif
18453.          if ( ss_prop%tau%header%a_contig /= 1 ) then
18453.             _free( t$7922 )
18453.          endif
18452.          if ( ss_prop%phase_fnc_clr%header%a_contig /= 1 ) then
18452.             _free( t$7913 )
18452.          endif
18451.          if ( ss_prop%omega_clr%header%a_contig /= 1 ) then
18451.             _free( t$7904 )
18451.          endif
18451.          if ( ss_prop%tau_clr%header%a_contig /= 1 ) then
18451.             _free( t$7897 )
18451.          endif
18460.          call two_stream( ierr, n_profile, n_layer, i_2stream, i_solver, l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), flux_inc_direct(1), sec_00(1, 1), rho_alb(1, 1), rho_alb(1, 2), d_planck_flux_surface(1), (tau_clr_f%base_addr)(1, 1, 0), (omega_clr_f%base_addr)(1, 1, 0), (phase_fnc_clr_f%base_addr)(1, 1, 1, 0), flux_direct(1, 0), flux_total(1, 1), nd_profile, nd_layer, nd_source_coeff )
18488.          $_allo_P3(0) = 0x1000000000001L
18488.          $_allo_P3(1) = loc( tau_clr_f )
18488.          call __deallocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
18488.          tau_clr_f%header%assoc = 0
18489.          $_allo_P4(0) = 0x1000000000001L
18489.          $_allo_P4(1) = loc( omega_clr_f )
18489.          call __deallocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
18489.          omega_clr_f%header%assoc = 0
18490.          $_allo_P5(0) = 0x1000000000001L
18490.          $_allo_P5(1) = loc( phase_fnc_clr_f )
18490.          call __deallocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
18490.          phase_fnc_clr_f%header%assoc = 0
18492.          if ( l_clear ) then
18495.             if ( isolir == 1 ) then
18498.                if ( nd_layer >= 0 ) then
18499.                   if ( nd_profile > 0 ) then
18498.                      $I_L18498_26 = 0
18498.                      do
18499.                         $I_L18499_22 = 0
18499. !dir$ ivdep
18499.                         do
18500.                            flux_direct_clear(1 + $I_L18499_22, $I_L18498_26) = flux_direct(1 + $I_L18499_22, $I_L18498_26)
18501.                            $I_L18499_22 = 1 + $I_L18499_22
18499.                            if ( $I_L18499_22 >= nd_profile ) exit
18499.                         enddo
18502.                         $I_L18498_26 = 1 + $I_L18498_26
18501.                         if ( $I_L18498_26 >= 1 + nd_layer ) exit
18501.                      enddo
18501.                   endif
18501.                endif
18501.             endif
18506.             if ( 2 + 2 * nd_layer > 0 ) then
18507.                if ( nd_profile > 0 ) then
18506.                   $I_L18506_28 = 0
18506.                   do
18507.                      $I_L18507_24 = 0
18507. !dir$ ivdep
18507.                      do
18508.                         flux_total_clear(1 + $I_L18507_24, 1 + $I_L18506_28) = flux_total(1 + $I_L18507_24, 1 + $I_L18506_28)
18509.                         $I_L18507_24 = 1 + $I_L18507_24
18507.                         if ( $I_L18507_24 >= nd_profile ) exit
18507.                      enddo
18510.                      $I_L18506_28 = 1 + $I_L18506_28
18509.                      if ( $I_L18506_28 >= 2 + 2 * nd_layer ) exit
18509.                   enddo
18509.                endif
18509.             endif
18509.          endif
18509.          goto 10
18513.       else if ( i_cloud == 2 ) then
18513.          goto 20
18513.       else if ( i_cloud == 4 ) then
18513.          goto 20
18513.       else if ( i_cloud /= 7 ) then
18513.          goto 30
18513.       else if ( n_region == 2 ) then
18513.    20    continue
18521.          call mix_column( ierr, n_profile, n_layer, k_clr, i_2stream, i_solver, l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), flux_inc_direct(1), sec_00(1, 1), rho_alb(1, 1), rho_alb(1, 2), d_planck_flux_surface(1), ss_prop, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), flux_direct(1, 0), flux_total(1, 1), l_clear, i_solver_clear, flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type, nd_overlap_coeff )
18558.          if ( ierr /= 0 ) then
18428.             $_allo_P8(0) = 0x3000000000001L
18428.             $_allo_P8(1) = loc( tau_clr_f )
18428.             $_allo_P8(2) = loc( phase_fnc_clr_f )
18428.             $_allo_P8(3) = loc( omega_clr_f )
18428.             call _dealloc( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
18428.          else
18428.             goto 10
18428.          endif
18428.       else
18428.    30    continue
18560.          if ( i_cloud == 6 ) then
18560.             goto 40
18560.          else if ( i_cloud /= 8 ) then
18560.             goto 50
18560.          else if ( n_region == 3 ) then
18560.    40       continue
18567.             call triple_column( ierr, n_profile, n_layer, i_2stream, i_solver, i_scatter_method, l_scale_solar, adjust_solar_ke(1, 1), isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), flux_inc_direct(1), sec_00(1, 1), rho_alb(1, 1), rho_alb(1, 2), d_planck_flux_surface(1), ss_prop, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), flux_direct(1, 0), flux_total(1, 1), l_clear, i_solver_clear, flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type, nd_region, nd_overlap_coeff )
18605.             if ( ierr /= 0 ) then
18428.                $_allo_P7(0) = 0x3000000000001L
18428.                $_allo_P7(1) = loc( tau_clr_f )
18428.                $_allo_P7(2) = loc( phase_fnc_clr_f )
18428.                $_allo_P7(3) = loc( omega_clr_f )
18428.                call _dealloc( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
18428.             else
18428.                goto 10
18428.             endif
18428.          else
18428.    50       continue
18608.             if ( i_cloud == 3 ) then
18620.                nd_profile_column = max( 1, n_profile )
18621.                if ( nd_profile > 0 ) then
18621.                   $I_L18621_20 = 0
18621. !dir$ ivdep
18621.                   do
18622.                      nd_profile_column = max( nd_profile_column, n_column_slv(1 + $I_L18621_20) )
18623.                      $I_L18621_20 = 1 + $I_L18621_20
18621.                      if ( $I_L18621_20 >= nd_profile ) exit
18621.                   enddo
18621.                endif
18625.                call calc_flux_ipa( ierr, n_profile, n_layer, n_cloud_top, l_scale_solar, adjust_solar_ke(1, 1), i_2stream, i_solver, isolir, diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), flux_inc_direct(1), sec_00(1, 1), d_planck_flux_surface(1), rho_alb(1, 1), ss_prop, n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), flux_direct(1, 0), flux_total(1, 1), l_clear, i_solver_clear, flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_profile_column, nd_source_coeff )
18656.                if ( ierr /= 0 ) then
18428.                   $_allo_P6(0) = 0x3000000000001L
18428.                   $_allo_P6(1) = loc( tau_clr_f )
18428.                   $_allo_P6(2) = loc( phase_fnc_clr_f )
18428.                   $_allo_P6(3) = loc( omega_clr_f )
18428.                   call _dealloc( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
18428.                else
18428.                   goto 10
18428.                endif
18428.             else
18428.    10          continue
18428.                $_allo_P9(0) = 0x3000000000001L
18428.                $_allo_P9(1) = loc( tau_clr_f )
18428.                $_allo_P9(2) = loc( phase_fnc_clr_f )
18428.                $_allo_P9(3) = loc( omega_clr_f )
18428.                call _dealloc( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
18428.             endif
18428.          endif
18428.       endif
18663.       return
18663.       end
18663.       
19393.       
19393.       subroutine opt_prop_aerosol( ierr, n_profile, first_layer, last_layer, n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, n_aerosol, aerosol_mix_ratio, i_aerosol_parametrization, i_humidity_pointer, humidities, delta_humidity, mean_rel_humidity, aerosol_absorption, aerosol_scattering, aerosol_phase_fnc, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view, p, density, n_opt_level_aerosol_prsc, aerosol_pressure_prsc, aerosol_absorption_prsc, aerosol_scattering_prsc, aerosol_phase_fnc_prsc, k_ext_tot, k_ext_scat, phase_fnc, forward_scatter, forward_solar, phase_fnc_solar, nd_profile, nd_radiance_profile, nd_layer, id_lt, id_lb, nd_aerosol_species, nd_humidities, nd_phase_term, nd_max_order, nd_direction, nd_profile_prsc, nd_opt_level_prsc )
18686.       t$856 = nd_profile
18686.       t$857 = nd_layer
18686.       t$855 = nd_aerosol_species
18798.       t$2923 = _zla( 0, nd_profile )
18686.       t$2924 = _zla( 0, nd_profile )
18798.       t$2925 = _zla( 0, nd_layer )
18686.       t$2926 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
18798.       t$2927 = _zla( 0, nd_aerosol_species )
18686.       t$2928 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_aerosol_species )
18686.       t$2929 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
18686.       t$860 = nd_humidities
18808.       t$2930 = _zla( 0, nd_humidities )
18686.       t$2931 = _zla( 0, nd_humidities )
18686.       t$2932 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities )
18686.       t$861 = nd_phase_term
18805.       t$2933 = _zla( 0, nd_phase_term )
18686.       t$2934 = _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
18686.       t$2935 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_humidities ) * _zla( 0, nd_phase_term )
18686.       t$858 = nd_radiance_profile
18686.       t$859 = nd_direction
18793.       t$2936 = _zla( 0, nd_radiance_profile )
18686.       t$2937 = _zla( 0, nd_radiance_profile )
18793.       t$2938 = _zla( 0, nd_direction )
18686.       t$2939 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
18686.       t$862 = nd_profile_prsc
18686.       t$863 = nd_opt_level_prsc
18825.       t$2940 = _zla( 0, nd_profile_prsc )
18686.       t$2941 = _zla( 0, nd_profile_prsc )
18825.       t$2942 = _zla( 0, nd_opt_level_prsc )
18686.       t$2943 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
18686.       t$2944 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
18686.       t$2945 = _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
18686.       t$2946 = _zla( 0, nd_aerosol_species ) * _zla( 0, nd_phase_term ) * _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
18686.       t$864 = id_lt
18686.       t$865 = id_lb
18686.       t$2947 = id_lb + -id_lt + 1
18841.       t$2948 = _zla( 0, id_lb + -id_lt + 1 )
18686.       t$2949 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 )
18686.       t$866 = nd_max_order
18686.       t$2950 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 )
18843.       t$2951 = _zla( 0, nd_max_order )
18686.       t$2952 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 )
18686.       t$2953 = _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 )
18686.       t$2954 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 )
18876.       t$2957 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8
18902.       t$2958 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8
18902.       t$2960 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 16
18904.       t$2961 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 16
18904.       t$2963 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 24
18878.       t$2964 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 24
18878.       t$2966 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 32
18893.       t$2967 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 32
18893.       t$2969 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 40
18895.       t$2970 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 40
18895.       t$2972 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 48
18874.       t$2973 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 48
18874.       t$2975 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18897.       t$2976 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18897.       t$2978 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18899.       t$2979 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18899.       t$2981 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18686.       t$2982 = _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 )
18918.       t$2983 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56 + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8
18918.       t$2985 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18881.       t$2986 = 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 )
18881.       t$2988 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 )
18912.       t$2989 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 )
18912.       t$2991 = _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 )
18914.       t$2992 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
18914.       t$2994 = _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
18916.       t$2995 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
18916.       t$2997 = _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
18885.       t$2998 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
18885.       t$3000 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
18686.       t$2955 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
18876.       t$2956 = t$2955
18902.       t$2959 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8
18904.       t$2962 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 16
18878.       t$2965 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 24
18893.       t$2968 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 32
18895.       t$2971 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 40
18874.       t$2974 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 48
18897.       t$2977 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18899.       t$2980 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18918.       t$2984 = t$2955 + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 56
18881.       t$2987 = t$2955 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 )
18912.       t$2990 = t$2955 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 )
18914.       t$2993 = t$2955 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
18916.       t$2996 = t$2955 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
18885.       t$2999 = t$2955 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, id_lb + -id_lt + 1 ) + _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 7 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
18929.       if ( n_aerosol > 0 ) then
18929.          $I_L18929_707 = 0
18929.          do
18934.             $l_use_hg_phf_S22 = l_henyey_greenstein_pf .or. i_aerosol_parametrization(1 + $I_L18929_707) == 1 .or. i_aerosol_parametrization(1 + $I_L18929_707) == 2
18939.             $l_interpolate_hum_S13 = i_aerosol_parametrization(1 + $I_L18929_707) == 2 .or. i_aerosol_parametrization(1 + $I_L18929_707) == 5
18943.             if ( i_aerosol_parametrization(1 + $I_L18929_707) == 1 ) then
18953.                if ( $l_interpolate_hum_S13 ) then
18958.                   if ( nd_layer > 0 ) then
18959.                      if ( nd_profile > 0 ) then
18958.                         $I_L18958_633 = 0
18958.                         do
18959.                            $I_L18959_562 = 0
18959. !dir$ ivdep
18959.                            do
18960.                               $i_pointer_S16 = i_humidity_pointer(1 + $I_L18959_562, 1 + $I_L18958_633)
18961.                               $weight_upper_WR0_R0 = ( ( mean_rel_humidity(1 + $I_L18959_562, 1 + $I_L18958_633) + -humidities($i_pointer_S16, 1 + $I_L18929_707) ) * 1.0/delta_humidity )
18961.                               weight_upper(1 + $I_L18959_562, 1 + $I_L18958_633) = $weight_upper_WR0_R0
18972.                               k_ext_tot(1 + $I_L18959_562, 1 + $I_L18958_633) = k_ext_tot(1 + $I_L18959_562, 1 + $I_L18958_633) + aerosol_mix_ratio(1 + $I_L18959_562, 1 + $I_L18958_633, 1 + $I_L18929_707) * ( aerosol_absorption($i_pointer_S16, 1 + $I_L18929_707) + $weight_upper_WR0_R0 * ( aerosol_absorption(1 + $i_pointer_S16, 1 + $I_L18929_707) + -aerosol_absorption($i_pointer_S16, 1 + $I_L18929_707) ) )
18978.                               $k_scatter_WR0_R1 = aerosol_mix_ratio(1 + $I_L18959_562, 1 + $I_L18958_633, 1 + $I_L18929_707) * ( aerosol_scattering($i_pointer_S16, 1 + $I_L18929_707) + $weight_upper_WR0_R0 * ( aerosol_scattering(1 + $i_pointer_S16, 1 + $I_L18929_707) + -aerosol_scattering($i_pointer_S16, 1 + $I_L18929_707) ) )
18978.                               k_scatter(1 + $I_L18959_562, 1 + $I_L18958_633) = $k_scatter_WR0_R1
18983.                               k_ext_scat(1 + $I_L18959_562, 1 + $I_L18958_633) = k_ext_scat(1 + $I_L18959_562, 1 + $I_L18958_633) + $k_scatter_WR0_R1
18964.                               $I_L18959_562 = 1 + $I_L18959_562
18959.                               if ( $I_L18959_562 >= nd_profile ) exit
18959.                            enddo
18965.                            $I_L18958_633 = 1 + $I_L18958_633
18964.                            if ( $I_L18958_633 >= nd_layer ) exit
18964.                         enddo
18964.                      endif
18964.                   endif
18964.                else if ( nd_layer > 0 ) then
18992.                   if ( nd_profile > 0 ) then
18999.                      $SC_aerosol_scattering_I1 = aerosol_scattering(1, 1 + $I_L18929_707)
18996.                      $SC_aerosol_absorption_I0 = aerosol_absorption(1, 1 + $I_L18929_707)
18991.                      $I_L18991_631 = 0
18991.                      do
18992.                         $I_L18992_560 = 0
18992. !dir$ ivdep
18992.                         do
18996.                            k_ext_tot(1 + $I_L18992_560, 1 + $I_L18991_631) = k_ext_tot(1 + $I_L18992_560, 1 + $I_L18991_631) + aerosol_mix_ratio(1 + $I_L18992_560, 1 + $I_L18991_631, 1 + $I_L18929_707) * $SC_aerosol_absorption_I0
18999.                            $k_scatter_WR0_R2 = aerosol_mix_ratio(1 + $I_L18992_560, 1 + $I_L18991_631, 1 + $I_L18929_707) * $SC_aerosol_scattering_I1
18999.                            k_scatter(1 + $I_L18992_560, 1 + $I_L18991_631) = $k_scatter_WR0_R2
19001.                            k_ext_scat(1 + $I_L18992_560, 1 + $I_L18991_631) = k_ext_scat(1 + $I_L18992_560, 1 + $I_L18991_631) + $k_scatter_WR0_R2
19004.                            $I_L18992_560 = 1 + $I_L18992_560
18992.                            if ( $I_L18992_560 >= nd_profile ) exit
18992.                         enddo
19005.                         $I_L18991_631 = 1 + $I_L18991_631
19004.                         if ( $I_L18991_631 >= nd_layer ) exit
19004.                      enddo
19004.                   endif
19004.                endif
19011.                if ( $l_use_hg_phf_S22 ) then
19024.                   if ( $l_interpolate_hum_S13 ) then
19026.                      if ( nd_layer > 0 ) then
19027.                         if ( nd_profile > 0 ) then
19026.                            $I_L19026_637 = 0
19026.                            do
19027.                               $I_L19027_566 = 0
19027. !dir$ ivdep
19027. !dir$ loop_info (automatic) cache_nt( weight_upper, i_humidity_pointer )
19027.                               do
19028.                                  $i_pointer_S25 = i_humidity_pointer(1 + $I_L19027_566, 1 + $I_L19026_637)
19029.                                  asymmetry(1 + $I_L19027_566, 1 + $I_L19026_637) = aerosol_phase_fnc($i_pointer_S25, 1, 1 + $I_L18929_707) + weight_upper(1 + $I_L19027_566, 1 + $I_L19026_637) * ( aerosol_phase_fnc(1 + $i_pointer_S25, 1, 1 + $I_L18929_707) + -aerosol_phase_fnc($i_pointer_S25, 1, 1 + $I_L18929_707) )
19034.                                  $I_L19027_566 = 1 + $I_L19027_566
19027.                                  if ( $I_L19027_566 >= nd_profile ) exit
19027.                               enddo
19035.                               $I_L19026_637 = 1 + $I_L19026_637
19034.                               if ( $I_L19026_637 >= nd_layer ) exit
19034.                            enddo
19034.                         endif
19034.                      endif
19034.                   else if ( nd_layer > 0 ) then
19039.                      if ( nd_profile > 0 ) then
19040.                         $SC_aerosol_phase_fnc_I2 = aerosol_phase_fnc(1, 1, 1 + $I_L18929_707)
19038.                         $I_L19038_635 = 0
19038.                         do
19039.                            $I_L19039_564 = 0
19039. !dir$ ivdep
19039.                            do
19040.                               asymmetry(1 + $I_L19039_564, 1 + $I_L19038_635) = $SC_aerosol_phase_fnc_I2
19041.                               $I_L19039_564 = 1 + $I_L19039_564
19039.                               if ( $I_L19039_564 >= nd_profile ) exit
19039.                            enddo
19042.                            $I_L19038_635 = 1 + $I_L19038_635
19041.                            if ( $I_L19038_635 >= nd_layer ) exit
19041.                         enddo
19041.                      endif
19041.                   endif
19048.                   if ( nd_layer > 0 ) then
19049.                      if ( nd_profile > 0 ) then
19048.                         $I_L19048_639 = 0
19048.                         do
19049.                            $I_L19049_568 = 0
19049. !dir$ ivdep
19049.                            do
19050.                               phase_fnc(1 + $I_L19049_568, 1 + $I_L19048_639, 1) = phase_fnc(1 + $I_L19049_568, 1 + $I_L19048_639, 1) + k_scatter(1 + $I_L19049_568, 1 + $I_L19048_639) * asymmetry(1 + $I_L19049_568, 1 + $I_L19048_639)
19052.                               $I_L19049_568 = 1 + $I_L19049_568
19049.                               if ( $I_L19049_568 >= nd_profile ) exit
19049.                            enddo
19053.                            $I_L19048_639 = 1 + $I_L19048_639
19052.                            if ( $I_L19048_639 >= nd_layer ) exit
19052.                         enddo
19052.                      endif
19052.                   endif
19059.                   if ( l_rescale ) then
19053.                      goto 10
19059.                   else if ( n_order_phase >= 2 ) then
19059.    10                continue
19061.                      if ( nd_layer > 0 ) then
19062.                         if ( nd_profile > 0 ) then
19061.                            $I_L19061_641 = 0
19061.                            do
19062.                               $I_L19062_570 = 0
19062. !dir$ ivdep
19062.                               do
19063.                                  ks_phf(1 + $I_L19062_570, 1 + $I_L19061_641) = k_scatter(1 + $I_L19062_570, 1 + $I_L19061_641) * asymmetry(1 + $I_L19062_570, 1 + $I_L19061_641)
19064.                                  $I_L19062_570 = 1 + $I_L19062_570
19062.                                  if ( $I_L19062_570 >= nd_profile ) exit
19062.                               enddo
19065.                               $I_L19061_641 = 1 + $I_L19061_641
19064.                               if ( $I_L19061_641 >= nd_layer ) exit
19064.                            enddo
19064.                         endif
19064.                      endif
19064.                   endif
19069.                   if ( -2 + n_order_phase >= 0 ) then
19071.                      if ( nd_layer > 0 ) then
19072.                         if ( nd_profile > 0 ) then
19071.                            $I_L19071_703 = 0
19071.                            do
19069.                               $I_L19069_699 = 0
19069.                               do
19072.                                  $I_L19072_694 = 0
19072.                                  do
19071.                                     $I_L19071_682 = 0
19071. !dir$ shortloop16
19071. !dir$ blocking_size( 8, 8 )
19071.                                     do
19069.                                        $I_L19069_679 = 0
19069.                                        if ( min( -1 + n_order_phase, 8 + 8 * $I_L19069_699 ) + -8 * $I_L19069_699 >= 4 ) then
19069.                                           $I_L19069_712 = 0
19069. !dir$ shortloop16
19069. !dir$ blocking_size( 8, 8 )
19069.                                           do
19072.                                              $I_L19072_572 = 0
19072. !dir$ ivdep
19072. !dir$ blocking_size( 256, 256 )
19072.                                              do
19073.                                                 $ks_phf_WR0_R3 = ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) * asymmetry($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1)
19073.                                                 ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) = $ks_phf_WR0_R3
19074.                                                 phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 2) = phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 2) + $ks_phf_WR0_R3
19073.                                                 $ks_phf_WR0_R3 = $ks_phf_WR0_R3 * asymmetry($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1)
19073.                                                 ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) = $ks_phf_WR0_R3
19074.                                                 phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 3) = phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 3) + $ks_phf_WR0_R3
19073.                                                 $ks_phf_WR0_R3 = $ks_phf_WR0_R3 * asymmetry($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1)
19073.                                                 ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) = $ks_phf_WR0_R3
19074.                                                 phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 4) = phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 4) + $ks_phf_WR0_R3
19073.                                                 $ks_phf_WR0_R3 = $ks_phf_WR0_R3 * asymmetry($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1)
19073.                                                 ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) = $ks_phf_WR0_R3
19074.                                                 phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 5) = phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, 8 * $I_L19069_699 + 4 * $I_L19069_712 + 5) + $ks_phf_WR0_R3
19072.                                                 $I_L19072_572 = 1 + $I_L19072_572
19072.                                                 if ( $I_L19072_572 >= min( nd_profile, 256 + 256 * $I_L19072_694 ) + -256 * $I_L19072_694 ) exit
19072.                                              enddo
19069.                                              $I_L19069_712 = 1 + $I_L19069_712
19069.                                              if ( $I_L19069_712 >= _rsh( min( -1 + n_order_phase, 8 + 8 * $I_L19069_699 ) + -8 * $I_L19069_699, 2 ) ) exit
19069.                                           enddo
19069.                                           $I_L19069_679 = and( 0xfffffffffffffffcUL, min( -1 + n_order_phase, 8 + 8 * $I_L19069_699 ) + -8 * $I_L19069_699 )
19069.                                        endif
19069.                                        if ( $I_L19069_679 < min( -1 + n_order_phase, 8 + 8 * $I_L19069_699 ) + -8 * $I_L19069_699 ) then
19069.                                           $I_L19069_709 = 0
19069. !dir$ shortloop16
19069. !dir$ blocking_size( 8, 8 )
19069.                                           do
19072.                                              $I_L19072_572 = 0
19072. !dir$ ivdep
19072. !dir$ blocking_size( 256, 256 )
19072.                                              do
19073.                                                 $ks_phf_WR0_R3 = ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) * asymmetry($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1)
19073.                                                 ks_phf($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1) = $ks_phf_WR0_R3
19074.                                                 phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, $I_L19069_679 + $I_L19069_709 + 8 * $I_L19069_699 + 2) = phase_fnc($I_L19072_572 + 256 * $I_L19072_694 + 1, $I_L19071_682 + 8 * $I_L19071_703 + 1, $I_L19069_679 + $I_L19069_709 + 8 * $I_L19069_699 + 2) + $ks_phf_WR0_R3
19072.                                                 $I_L19072_572 = 1 + $I_L19072_572
19072.                                                 if ( $I_L19072_572 >= min( nd_profile, 256 + 256 * $I_L19072_694 ) + -256 * $I_L19072_694 ) exit
19072.                                              enddo
19069.                                              $I_L19069_709 = 1 + $I_L19069_709
19069.                                              if ( $I_L19069_709 >= min( -1 + n_order_phase, 8 + 8 * $I_L19069_699 ) + -$I_L19069_679 + -8 * $I_L19069_699 ) exit
19069.                                           enddo
19069.                                        endif
19071.                                        $I_L19071_682 = 1 + $I_L19071_682
19076.                                        if ( $I_L19071_682 >= min( nd_layer, 8 + 8 * $I_L19071_703 ) + -8 * $I_L19071_703 ) exit
19076.                                     enddo
19072.                                     $I_L19072_694 = 1 + $I_L19072_694
19072.                                     if ( $I_L19072_694 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
19072.                                  enddo
19069.                                  $I_L19069_699 = 1 + $I_L19069_699
19077.                                  if ( $I_L19069_699 >= 1 + max( 0, -1 + _rsh( 6 + n_order_phase, 3 ) ) ) exit
19077.                               enddo
19071.                               $I_L19071_703 = 1 + $I_L19071_703
19071.                               if ( $I_L19071_703 >= 1 + max( 0, -1 + _rsh( 7 + nd_layer, 3 ) ) ) exit
19071.                            enddo
19071.                         endif
19071.                      endif
19071.                   endif
19084.                   if ( l_rescale ) then
19086.                      if ( n_order_forward + -n_order_phase == 0 ) then
19088.                         if ( nd_layer > 0 ) then
19089.                            if ( nd_profile > 0 ) then
19088.                               $I_L19088_647 = 0
19088.                               do
19089.                                  $I_L19089_579 = 0
19089. !dir$ ivdep
19089.                                  do
19090.                                     forward_scatter(1 + $I_L19089_579, 1 + $I_L19088_647) = forward_scatter(1 + $I_L19089_579, 1 + $I_L19088_647) + ks_phf(1 + $I_L19089_579, 1 + $I_L19088_647)
19092.                                     $I_L19089_579 = 1 + $I_L19089_579
19089.                                     if ( $I_L19089_579 >= nd_profile ) exit
19089.                                  enddo
19093.                                  $I_L19088_647 = 1 + $I_L19088_647
19092.                                  if ( $I_L19088_647 >= nd_layer ) exit
19092.                               enddo
19092.                            endif
19092.                         endif
19094.                      else if ( n_order_phase + -n_order_forward == -1 ) then
19096.                         if ( nd_layer > 0 ) then
19097.                            if ( nd_profile > 0 ) then
19096.                               $I_L19096_645 = 0
19096.                               do
19097.                                  $I_L19097_577 = 0
19097. !dir$ ivdep
19097. !dir$ loop_info (automatic) cache_nt( asymmetry )
19097.                                  do
19098.                                     forward_scatter(1 + $I_L19097_577, 1 + $I_L19096_645) = forward_scatter(1 + $I_L19097_577, 1 + $I_L19096_645) + ks_phf(1 + $I_L19097_577, 1 + $I_L19096_645) * asymmetry(1 + $I_L19097_577, 1 + $I_L19096_645)
19100.                                     $I_L19097_577 = 1 + $I_L19097_577
19097.                                     if ( $I_L19097_577 >= nd_profile ) exit
19097.                                  enddo
19101.                                  $I_L19096_645 = 1 + $I_L19096_645
19100.                                  if ( $I_L19096_645 >= nd_layer ) exit
19100.                               enddo
19100.                            endif
19100.                         endif
19100.                      else if ( nd_layer > 0 ) then
19107.                         if ( nd_profile > 0 ) then
19106.                            $I_L19106_643 = 0
19106.                            do
19107.                               $I_L19107_575 = 0
19107. !dir$ ivdep
19107. !dir$ loop_info (automatic) cache_nt( k_scatter, asymmetry )
19107.                               do
19108.                                  forward_scatter(1 + $I_L19107_575, 1 + $I_L19106_643) = forward_scatter(1 + $I_L19107_575, 1 + $I_L19106_643) + k_scatter(1 + $I_L19107_575, 1 + $I_L19106_643) * asymmetry(1 + $I_L19107_575, 1 + $I_L19106_643) ** n_order_forward
19111.                                  $I_L19107_575 = 1 + $I_L19107_575
19107.                                  if ( $I_L19107_575 >= nd_profile ) exit
19107.                               enddo
19112.                               $I_L19106_643 = 1 + $I_L19106_643
19111.                               if ( $I_L19106_643 >= nd_layer ) exit
19111.                            enddo
19111.                         endif
19111.                      endif
19111.                   endif
19111.                else
19124.                   if ( n_order_phase > 0 ) then
19124.                      $I_L19124_685 = 0
19124.                      do
19125.                         if ( $l_interpolate_hum_S13 ) then
19127.                            if ( nd_layer > 0 ) then
19128.                               if ( nd_profile > 0 ) then
19127.                                  $I_L19127_651 = 0
19127.                                  do
19128.                                     $I_L19128_583 = 0
19128. !dir$ ivdep
19128.                                     do
19129.                                        $i_pointer_S43 = i_humidity_pointer(1 + $I_L19128_583, 1 + $I_L19127_651)
19130.                                        phf_coeff(1 + $I_L19128_583, 1 + $I_L19127_651) = aerosol_phase_fnc($i_pointer_S43, 1 + $I_L19124_685, 1 + $I_L18929_707) + weight_upper(1 + $I_L19128_583, 1 + $I_L19127_651) * ( aerosol_phase_fnc(1 + $i_pointer_S43, 1 + $I_L19124_685, 1 + $I_L18929_707) + -aerosol_phase_fnc($i_pointer_S43, 1 + $I_L19124_685, 1 + $I_L18929_707) )
19134.                                        $I_L19128_583 = 1 + $I_L19128_583
19128.                                        if ( $I_L19128_583 >= nd_profile ) exit
19128.                                     enddo
19135.                                     $I_L19127_651 = 1 + $I_L19127_651
19134.                                     if ( $I_L19127_651 >= nd_layer ) exit
19134.                                  enddo
19134.                               endif
19134.                            endif
19134.                         else if ( nd_layer > 0 ) then
19139.                            if ( nd_profile > 0 ) then
19138.                               $SCA_aerosol_phase_fnc_I4 = aerosol_phase_fnc(1, 1 + $I_L19124_685, 1 + $I_L18929_707)
19138.                               $I_L19138_649 = 0
19138.                               do
19139.                                  $I_L19139_581 = 0
19139. !dir$ ivdep
19139.                                  do
19140.                                     phf_coeff(1 + $I_L19139_581, 1 + $I_L19138_649) = $SCA_aerosol_phase_fnc_I4
19141.                                     $I_L19139_581 = 1 + $I_L19139_581
19139.                                     if ( $I_L19139_581 >= nd_profile ) exit
19139.                                  enddo
19142.                                  $I_L19138_649 = 1 + $I_L19138_649
19141.                                  if ( $I_L19138_649 >= nd_layer ) exit
19141.                               enddo
19141.                            endif
19141.                         endif
19145.                         if ( nd_layer > 0 ) then
19146.                            if ( nd_profile > 0 ) then
19145.                               $I_L19145_653 = 0
19145.                               do
19146.                                  $I_L19146_585 = 0
19146. !dir$ ivdep
19146. !dir$ loop_info (automatic) cache_nt( phase_fnc )
19146.                                  do
19147.                                     phase_fnc(1 + $I_L19146_585, 1 + $I_L19145_653, 1 + $I_L19124_685) = phase_fnc(1 + $I_L19146_585, 1 + $I_L19145_653, 1 + $I_L19124_685) + k_scatter(1 + $I_L19146_585, 1 + $I_L19145_653) * phf_coeff(1 + $I_L19146_585, 1 + $I_L19145_653)
19149.                                     $I_L19146_585 = 1 + $I_L19146_585
19146.                                     if ( $I_L19146_585 >= nd_profile ) exit
19146.                                  enddo
19150.                                  $I_L19145_653 = 1 + $I_L19145_653
19149.                                  if ( $I_L19145_653 >= nd_layer ) exit
19149.                               enddo
19149.                            endif
19149.                         endif
19151.                         $I_L19124_685 = 1 + $I_L19124_685
19150.                         if ( $I_L19124_685 >= n_order_phase ) exit
19150.                      enddo
19150.                   endif
19153.                   if ( l_rescale ) then
19154.                      if ( $l_interpolate_hum_S13 ) then
19156.                         if ( nd_layer > 0 ) then
19157.                            if ( nd_profile > 0 ) then
19156.                               $I_L19156_657 = 0
19156.                               do
19157.                                  $I_L19157_589 = 0
19157. !dir$ ivdep
19157. !dir$ loop_info (automatic) cache_nt( weight_upper, i_humidity_pointer )
19157.                                  do
19158.                                     $i_pointer_S51 = i_humidity_pointer(1 + $I_L19157_589, 1 + $I_L19156_657)
19159.                                     phf_coeff(1 + $I_L19157_589, 1 + $I_L19156_657) = aerosol_phase_fnc($i_pointer_S51, n_order_forward, 1 + $I_L18929_707) + weight_upper(1 + $I_L19157_589, 1 + $I_L19156_657) * ( aerosol_phase_fnc(1 + $i_pointer_S51, n_order_forward, 1 + $I_L18929_707) + -aerosol_phase_fnc($i_pointer_S51, n_order_forward, 1 + $I_L18929_707) )
19166.                                     $I_L19157_589 = 1 + $I_L19157_589
19157.                                     if ( $I_L19157_589 >= nd_profile ) exit
19157.                                  enddo
19167.                                  $I_L19156_657 = 1 + $I_L19156_657
19166.                                  if ( $I_L19156_657 >= nd_layer ) exit
19166.                               enddo
19166.                            endif
19166.                         endif
19166.                      else if ( nd_layer > 0 ) then
19171.                         if ( nd_profile > 0 ) then
19172.                            $SC_aerosol_phase_fnc_I3 = aerosol_phase_fnc(1, n_order_forward, 1 + $I_L18929_707)
19170.                            $I_L19170_655 = 0
19170.                            do
19171.                               $I_L19171_587 = 0
19171. !dir$ ivdep
19171.                               do
19172.                                  phf_coeff(1 + $I_L19171_587, 1 + $I_L19170_655) = $SC_aerosol_phase_fnc_I3
19174.                                  $I_L19171_587 = 1 + $I_L19171_587
19171.                                  if ( $I_L19171_587 >= nd_profile ) exit
19171.                               enddo
19175.                               $I_L19170_655 = 1 + $I_L19170_655
19174.                               if ( $I_L19170_655 >= nd_layer ) exit
19174.                            enddo
19174.                         endif
19174.                      endif
19178.                      if ( nd_layer > 0 ) then
19179.                         if ( nd_profile > 0 ) then
19178.                            $I_L19178_659 = 0
19178.                            do
19179.                               $I_L19179_591 = 0
19179. !dir$ ivdep
19179. !dir$ loop_info (automatic) cache_nt( phf_coeff, k_scatter )
19179.                               do
19180.                                  forward_scatter(1 + $I_L19179_591, 1 + $I_L19178_659) = forward_scatter(1 + $I_L19179_591, 1 + $I_L19178_659) + k_scatter(1 + $I_L19179_591, 1 + $I_L19178_659) * phf_coeff(1 + $I_L19179_591, 1 + $I_L19178_659)
19183.                                  $I_L19179_591 = 1 + $I_L19179_591
19179.                                  if ( $I_L19179_591 >= nd_profile ) exit
19179.                               enddo
19184.                               $I_L19178_659 = 1 + $I_L19178_659
19183.                               if ( $I_L19178_659 >= nd_layer ) exit
19183.                            enddo
19183.                         endif
19183.                      endif
19183.                   endif
19183.                endif
19189.                if ( last_layer + -first_layer >= 0 ) then
19190.                   if ( l_solar_phf ) then
19192.                      if ( n_direction > 0 ) then
19189.                         $I_L19189_705 = 0
19189.                         do
19192.                            $I_L19192_701 = 0
19192.                            do
19189.                               $I_L19189_696 = 0
19189. !dir$ shortloop16
19189. !dir$ blocking_size( 8, 8 )
19189.                               do
19192.                                  $I_L19192_691 = 0
19192. !dir$ shortloop16
19192. !dir$ blocking_size( 8, 8 )
19192.                                  do
19196.                                     if ( $l_interpolate_hum_S13 ) then
19197.                                        if ( n_profile > 0 ) then
19197.                                           $I_L19197_601 = 0
19197. !dir$ ivdep
19197.                                           do
19198.                                              $i_pointer_S58 = i_humidity_pointer(1 + $I_L19197_601, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19199.                                              phf_coeff(1 + $I_L19197_601, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = aerosol_phase_fnc($i_pointer_S58, 1, 1 + $I_L18929_707) + weight_upper(1 + $I_L19197_601, first_layer + $I_L19189_696 + 8 * $I_L19189_705) * ( aerosol_phase_fnc(1 + $i_pointer_S58, 1, 1 + $I_L18929_707) + -aerosol_phase_fnc($i_pointer_S58, 1, 1 + $I_L18929_707) )
19203.                                              $I_L19197_601 = 1 + $I_L19197_601
19197.                                              if ( $I_L19197_601 >= n_profile ) exit
19197.                                           enddo
19197.                                        endif
19197.                                     else if ( n_profile > 0 ) then
19206.                                        $SC_aerosol_phase_fnc_I6 = aerosol_phase_fnc(1, 1, 1 + $I_L18929_707)
19205.                                        $I_L19205_603 = 0
19205. !dir$ ivdep
19205.                                        do
19206.                                           phf_coeff(1 + $I_L19205_603, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = $SC_aerosol_phase_fnc_I6
19207.                                           $I_L19205_603 = 1 + $I_L19205_603
19205.                                           if ( $I_L19205_603 >= n_profile ) exit
19205.                                        enddo
19205.                                     endif
19209.                                     if ( n_profile > 0 ) then
19209.                                        $I_L19209_605 = 0
19209. !dir$ ivdep
19209.                                        do
19212.                                           p_legendre_ls_m1(1 + $I_L19209_605, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = 1.0
19213.                                           $p_legendre_ls_WR0_R4 = cos_sol_view(1 + $I_L19209_605, $I_L19192_691 + 8 * $I_L19192_701 + 1)
19213.                                           p_legendre_ls(1 + $I_L19209_605, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = $p_legendre_ls_WR0_R4
19214.                                           phase_fnc_solar_tmp(1 + $I_L19209_605, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = 1.0 + phf_coeff(1 + $I_L19209_605, first_layer + $I_L19189_696 + 8 * $I_L19189_705) * $p_legendre_ls_WR0_R4 * 3.0
19216.                                           $I_L19209_605 = 1 + $I_L19209_605
19209.                                           if ( $I_L19209_605 >= n_profile ) exit
19209.                                        enddo
19209.                                     endif
19218.                                     if ( $l_use_hg_phf_S22 ) then
19220.                                        if ( n_profile > 0 ) then
19220.                                           $I_L19220_607 = 0
19220. !dir$ ivdep
19220.                                           do
19221.                                              asymmetry(1 + $I_L19220_607, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = phf_coeff(1 + $I_L19220_607, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19222.                                              $I_L19220_607 = 1 + $I_L19220_607
19220.                                              if ( $I_L19220_607 >= n_profile ) exit
19220.                                           enddo
19220.                                        endif
19220.                                     endif
19225.                                     if ( -2 + n_order_phase_solar >= 0 ) then
19225.                                        $I_L19225_669 = 0
19225.                                        do
19227.                                           $cnst1_S65 = 1.0 + -( 1.0/( ( 2 + $I_L19225_669 ) ) )
19228.                                           if ( n_profile > 0 ) then
19228.                                              $I_L19228_609 = 0
19228. !dir$ ivdep
19228.                                              do
19229.                                                 $p_legendre_tmp_WR0_R5 = p_legendre_ls(1 + $I_L19228_609, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19230.                                                 p_legendre_ls(1 + $I_L19228_609, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = ( 1.0 + $cnst1_S65 ) * $p_legendre_tmp_WR0_R5 * cos_sol_view(1 + $I_L19228_609, $I_L19192_691 + 8 * $I_L19192_701 + 1) + -( $cnst1_S65 * p_legendre_ls_m1(1 + $I_L19228_609, first_layer + $I_L19189_696 + 8 * $I_L19189_705) )
19233.                                                 p_legendre_ls_m1(1 + $I_L19228_609, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = $p_legendre_tmp_WR0_R5
19234.                                                 $I_L19228_609 = 1 + $I_L19228_609
19228.                                                 if ( $I_L19228_609 >= n_profile ) exit
19228.                                              enddo
19228.                                           endif
19237.                                           if ( $l_use_hg_phf_S22 ) then
19238.                                              if ( n_profile > 0 ) then
19238.                                                 $I_L19238_611 = 0
19238. !dir$ ivdep
19238.                                                 do
19239.                                                    phf_coeff(1 + $I_L19238_611, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = phf_coeff(1 + $I_L19238_611, first_layer + $I_L19189_696 + 8 * $I_L19189_705) * asymmetry(1 + $I_L19238_611, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19240.                                                    $I_L19238_611 = 1 + $I_L19238_611
19238.                                                    if ( $I_L19238_611 >= n_profile ) exit
19238.                                                 enddo
19238.                                              endif
19238.                                           else if ( $l_interpolate_hum_S13 ) then
19243.                                              if ( n_profile > 0 ) then
19243.                                                 $I_L19243_613 = 0
19243. !dir$ ivdep
19243.                                                 do
19244.                                                    $i_pointer_S68 = i_humidity_pointer(1 + $I_L19243_613, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19245.                                                    phf_coeff(1 + $I_L19243_613, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = aerosol_phase_fnc($i_pointer_S68, 2 + $I_L19225_669, 1 + $I_L18929_707) + weight_upper(1 + $I_L19243_613, first_layer + $I_L19189_696 + 8 * $I_L19189_705) * ( aerosol_phase_fnc(1 + $i_pointer_S68, 2 + $I_L19225_669, 1 + $I_L18929_707) + -aerosol_phase_fnc($i_pointer_S68, 2 + $I_L19225_669, 1 + $I_L18929_707) )
19250.                                                    $I_L19243_613 = 1 + $I_L19243_613
19243.                                                    if ( $I_L19243_613 >= n_profile ) exit
19243.                                                 enddo
19243.                                              endif
19243.                                           else if ( n_profile > 0 ) then
19252.                                              $SCA_aerosol_phase_fnc_I5 = aerosol_phase_fnc(1, 2 + $I_L19225_669, 1 + $I_L18929_707)
19252.                                              $I_L19252_615 = 0
19252. !dir$ ivdep
19252.                                              do
19253.                                                 phf_coeff(1 + $I_L19252_615, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = $SCA_aerosol_phase_fnc_I5
19254.                                                 $I_L19252_615 = 1 + $I_L19252_615
19252.                                                 if ( $I_L19252_615 >= n_profile ) exit
19252.                                              enddo
19252.                                           endif
19257.                                           if ( n_profile > 0 ) then
19257.                                              $I_L19257_617 = 0
19257. !dir$ ivdep
19257.                                              do
19258.                                                 phase_fnc_solar_tmp(1 + $I_L19257_617, first_layer + $I_L19189_696 + 8 * $I_L19189_705) = phase_fnc_solar_tmp(1 + $I_L19257_617, first_layer + $I_L19189_696 + 8 * $I_L19189_705) + phf_coeff(1 + $I_L19257_617, first_layer + $I_L19189_696 + 8 * $I_L19189_705) * real( 5 + 2 * $I_L19225_669, 8 ) * p_legendre_ls(1 + $I_L19257_617, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19261.                                                 $I_L19257_617 = 1 + $I_L19257_617
19257.                                                 if ( $I_L19257_617 >= n_profile ) exit
19257.                                              enddo
19257.                                           endif
19262.                                           $I_L19225_669 = 1 + $I_L19225_669
19261.                                           if ( $I_L19225_669 >= -1 + n_order_phase_solar ) exit
19261.                                        enddo
19261.                                     endif
19264.                                     if ( n_profile > 0 ) then
19264.                                        $I_L19264_619 = 0
19264. !dir$ ivdep
19264. !dir$ loop_info (automatic) cache_nt( phase_fnc_solar )
19264.                                        do
19265.                                           phase_fnc_solar(1 + $I_L19264_619, first_layer + $I_L19189_696 + 8 * $I_L19189_705, $I_L19192_691 + 8 * $I_L19192_701 + 1) = phase_fnc_solar(1 + $I_L19264_619, first_layer + $I_L19189_696 + 8 * $I_L19189_705, $I_L19192_691 + 8 * $I_L19192_701 + 1) + k_scatter(1 + $I_L19264_619, first_layer + $I_L19189_696 + 8 * $I_L19189_705) * phase_fnc_solar_tmp(1 + $I_L19264_619, first_layer + $I_L19189_696 + 8 * $I_L19189_705)
19268.                                           $I_L19264_619 = 1 + $I_L19264_619
19264.                                           if ( $I_L19264_619 >= n_profile ) exit
19264.                                        enddo
19264.                                     endif
19192.                                     $I_L19192_691 = 1 + $I_L19192_691
19268.                                     if ( $I_L19192_691 >= min( n_direction, 8 + 8 * $I_L19192_701 ) + -8 * $I_L19192_701 ) exit
19268.                                  enddo
19189.                                  $I_L19189_696 = 1 + $I_L19189_696
19189.                                  if ( $I_L19189_696 >= min( last_layer + -first_layer + 1, 8 + 8 * $I_L19189_705 ) + -8 * $I_L19189_705 ) exit
19189.                               enddo
19192.                               $I_L19192_701 = 1 + $I_L19192_701
19301.                               if ( $I_L19192_701 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
19301.                            enddo
19189.                            $I_L19189_705 = 1 + $I_L19189_705
19189.                            if ( $I_L19189_705 >= 1 + max( 0, -1 + _rsh( last_layer + -first_layer + 8, 3 ) ) ) exit
19189.                         enddo
19189.                      endif
19273.                      if ( l_rescale ) then
19274.                         if ( $l_use_hg_phf_S22 ) then
19275.                            if ( n_profile > 0 ) then
19189.                               $I_L19189_671 = 0
19189.                               do
19275.                                  $I_L19275_621 = 0
19275. !dir$ ivdep
19275.                                  do
19276.                                     phf_coeff(1 + $I_L19275_621, first_layer + $I_L19189_671) = phf_coeff(1 + $I_L19275_621, first_layer + $I_L19189_671) * asymmetry(1 + $I_L19275_621, first_layer + $I_L19189_671)
19277.                                     $I_L19275_621 = 1 + $I_L19275_621
19275.                                     if ( $I_L19275_621 >= n_profile ) exit
19275.                                  enddo
19303.                                  $I_L19189_671 = 1 + $I_L19189_671
19301.                                  if ( $I_L19189_671 >= last_layer + -first_layer + 1 ) exit
19301.                               enddo
19301.                            endif
19301.                         endif
19274.                         if ( $l_use_hg_phf_S22 == 0 ) then
19280.                            if ( $l_interpolate_hum_S13 ) then
19281.                               if ( n_profile > 0 ) then
19189.                                  $I_L19189_673 = 0
19189.                                  do
19281.                                     $I_L19281_623 = 0
19281. !dir$ ivdep
19281.                                     do
19282.                                        $i_pointer_S74 = i_humidity_pointer(1 + $I_L19281_623, first_layer + $I_L19189_673)
19283.                                        phf_coeff(1 + $I_L19281_623, first_layer + $I_L19189_673) = aerosol_phase_fnc($i_pointer_S74, 1 + n_order_phase_solar, 1 + $I_L18929_707) + weight_upper(1 + $I_L19281_623, first_layer + $I_L19189_673) * ( aerosol_phase_fnc(1 + $i_pointer_S74, 1 + n_order_phase_solar, 1 + $I_L18929_707) + -aerosol_phase_fnc($i_pointer_S74, 1 + n_order_phase_solar, 1 + $I_L18929_707) )
19288.                                        $I_L19281_623 = 1 + $I_L19281_623
19281.                                        if ( $I_L19281_623 >= n_profile ) exit
19281.                                     enddo
19303.                                     $I_L19189_673 = 1 + $I_L19189_673
19301.                                     if ( $I_L19189_673 >= last_layer + -first_layer + 1 ) exit
19301.                                  enddo
19301.                               endif
19301.                            endif
19280.                            if ( $l_interpolate_hum_S13 == 0 ) then
19290.                               if ( n_profile > 0 ) then
19291.                                  $SC_aerosol_phase_fnc_I8 = aerosol_phase_fnc(1, 1 + n_order_phase_solar, 1 + $I_L18929_707)
19189.                                  $I_L19189_675 = 0
19189.                                  do
19290.                                     $I_L19290_625 = 0
19290. !dir$ ivdep
19290.                                     do
19291.                                        phf_coeff(1 + $I_L19290_625, first_layer + $I_L19189_675) = $SC_aerosol_phase_fnc_I8
19292.                                        $I_L19290_625 = 1 + $I_L19290_625
19290.                                        if ( $I_L19290_625 >= n_profile ) exit
19290.                                     enddo
19303.                                     $I_L19189_675 = 1 + $I_L19189_675
19301.                                     if ( $I_L19189_675 >= last_layer + -first_layer + 1 ) exit
19301.                                  enddo
19301.                               endif
19301.                            endif
19301.                         endif
19295.                         if ( n_profile > 0 ) then
19189.                            $I_L19189_677 = 0
19189.                            do
19295.                               $I_L19295_627 = 0
19295. !dir$ ivdep
19295.                               do
19296.                                  forward_solar(1 + $I_L19295_627, first_layer + $I_L19189_677) = forward_solar(1 + $I_L19295_627, first_layer + $I_L19189_677) + k_scatter(1 + $I_L19295_627, first_layer + $I_L19189_677) * phf_coeff(1 + $I_L19295_627, first_layer + $I_L19189_677)
19298.                                  $I_L19295_627 = 1 + $I_L19295_627
19295.                                  if ( $I_L19295_627 >= n_profile ) exit
19295.                               enddo
19303.                               $I_L19189_677 = 1 + $I_L19189_677
19301.                               if ( $I_L19189_677 >= last_layer + -first_layer + 1 ) exit
19301.                            enddo
19301.                         endif
19301.                      endif
19301.                   endif
19301.                endif
19388.                $I_L18929_707 = 1 + $I_L18929_707
18943.             else if ( i_aerosol_parametrization(1 + $I_L18929_707) == 4 ) then
18943.             else if ( i_aerosol_parametrization(1 + $I_L18929_707) == 2 ) then
18943.             else if ( i_aerosol_parametrization(1 + $I_L18929_707) == 5 ) then
18943.             else if ( i_aerosol_parametrization(1 + $I_L18929_707) == 3 ) then
18943.             else
18943.             endif
18943.             if ( $I_L18929_707 >= n_aerosol ) exit
18943.          enddo
18943.          goto 20
18943.       else
18943.    20    continue
18686.          _free( t$2955 )
18686.       endif
19393.       return
19393.       end
19393.       
20249.       
20249.       subroutine opt_prop_ice_cloud( ierr, n_profile, n_layer, n_cloud_top, n_cloud_profile, i_cloud_profile, n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view, i_parametrization_ice, ice_cloud_parameter, ice_mass_frac, dim_char_ice, p, t, density, n_opt_level_cloud_prsc, ice_pressure_prsc, ice_absorption_prsc, ice_scattering_prsc, ice_phase_fnc_prsc, k_ext_tot_cloud, k_ext_scat_cloud, phase_fnc_cloud, forward_scatter_cloud, forward_solar_cloud, phase_fnc_solar_cloud, nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_direction, nd_phase_term, nd_max_order, nd_cloud_parameter, nd_profile_prsc, nd_opt_level_prsc )
19416.       t$873 = id_ct
19416.       t$874 = nd_layer
19416.       t$3001 = nd_layer + -id_ct + 1
19504.       t$3002 = _zla( 0, nd_layer + -id_ct + 1 )
19416.       t$875 = nd_profile
19506.       t$3003 = _zla( 0, nd_profile )
19416.       t$3004 = _zla( 0, nd_profile )
19416.       t$3005 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
19416.       t$876 = nd_radiance_profile
19416.       t$877 = nd_direction
19522.       t$3006 = _zla( 0, nd_radiance_profile )
19416.       t$3007 = _zla( 0, nd_radiance_profile )
19522.       t$3008 = _zla( 0, nd_direction )
19416.       t$3009 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
19416.       t$878 = nd_cloud_parameter
19527.       t$3010 = _zla( 0, nd_cloud_parameter )
19539.       t$3011 = _zla( 0, nd_layer )
19416.       t$3012 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
19416.       t$879 = nd_profile_prsc
19416.       t$880 = nd_opt_level_prsc
19541.       t$3013 = _zla( 0, nd_profile_prsc )
19416.       t$3014 = _zla( 0, nd_profile_prsc )
19541.       t$3015 = _zla( 0, nd_opt_level_prsc )
19416.       t$3016 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
19416.       t$881 = nd_phase_term
19416.       t$3017 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
19547.       t$3018 = _zla( 0, nd_phase_term )
19416.       t$3019 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc ) * _zla( 0, nd_phase_term )
19416.       t$882 = nd_max_order
19416.       t$3020 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
19556.       t$3021 = _zla( 0, nd_max_order )
19416.       t$3022 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
19416.       t$3023 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
19416.       t$3024 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_ct + 1 )
19579.       t$3027 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
19604.       t$3028 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
19604.       t$3030 = 8 * _zla( 0, nd_radiance_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
19598.       t$3031 = 8 * _zla( 0, nd_radiance_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
19598.       t$3033 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 16 * _zla( 0, nd_radiance_profile )
19600.       t$3034 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 16 * _zla( 0, nd_radiance_profile )
19600.       t$3036 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 24 * _zla( 0, nd_radiance_profile )
19602.       t$3037 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 24 * _zla( 0, nd_radiance_profile )
19602.       t$3039 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 32 * _zla( 0, nd_radiance_profile )
19416.       t$3025 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 32 * _zla( 0, nd_radiance_profile ) ), 8 )
19579.       t$3026 = t$3025
19604.       t$3029 = t$3025 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
19598.       t$3032 = t$3025 + 8 * _zla( 0, nd_radiance_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
19600.       t$3035 = t$3025 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 16 * _zla( 0, nd_radiance_profile )
19602.       t$3038 = t$3025 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 24 * _zla( 0, nd_radiance_profile )
19616.       if ( i_parametrization_ice == 1 .orelse. i_parametrization_ice == 6 .orelse. i_parametrization_ice == 7 .orelse. i_parametrization_ice == 9 .orelse. i_parametrization_ice == 10 .orelse. i_parametrization_ice == 5 ) then
19616.          goto 10
19616.       else
19616.          if ( l_henyey_greenstein_pf == 0 .orelse. i_parametrization_ice /= 11 ) then
19616.             if ( l_henyey_greenstein_pf == 0 .orelse. i_parametrization_ice /= 12 ) then
20009.                if ( l_henyey_greenstein_pf == 0 ) then
20009.                   if ( i_parametrization_ice == 11 ) then
20009.                      goto 30
20009.                   else if ( i_parametrization_ice == 12 ) then
20009.    30                continue
20020.                      if ( i_parametrization_ice == 11 ) then
20023.                         if ( nd_layer + -id_ct >= 0 ) then
20028.                            $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
20028.                            $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
20025.                            $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
20025.                            $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
20024.                            if ( nd_profile > 0 ) then
20047.                               $SC_ice_cloud_parameter_I37 = ice_cloud_parameter(3 + 2 * n_order_forward)
20047.                               $SC_ice_cloud_parameter_I36 = ice_cloud_parameter(4 + 2 * n_order_forward)
20023.                               $I_L20023_643 = 0
20023.                               do
20024.                                  $I_L20024_574 = 0
20024. !dir$ ivdep
20024.                                  do
20025.                                     $k_ext_tot_cloud_WR0_R0 = ice_mass_frac(1 + $I_L20024_574, id_ct + $I_L20023_643) * ( $SC_ice_cloud_parameter_I1 + ( $SC_ice_cloud_parameter_I0 * 1.0/dim_char_ice(1 + $I_L20024_574, id_ct + $I_L20023_643) ) )
20025.                                     k_ext_tot_cloud(1 + $I_L20024_574, id_ct + $I_L20023_643) = $k_ext_tot_cloud_WR0_R0
20028.                                     $k_ext_scat_cloud_WR0_R1 = $k_ext_tot_cloud_WR0_R0 * ( -( $SC_ice_cloud_parameter_I3 * dim_char_ice(1 + $I_L20024_574, id_ct + $I_L20023_643) ) + -$SC_ice_cloud_parameter_I2 + 1.0 )
20028.                                     k_ext_scat_cloud(1 + $I_L20024_574, id_ct + $I_L20023_643) = $k_ext_scat_cloud_WR0_R1
20047.                                     forward_scatter_cloud(1 + $I_L20024_574, id_ct + $I_L20023_643) = $k_ext_scat_cloud_WR0_R1 * ( $SC_ice_cloud_parameter_I37 + $SC_ice_cloud_parameter_I36 * dim_char_ice(1 + $I_L20024_574, id_ct + $I_L20023_643) )
20031.                                     $I_L20024_574 = 1 + $I_L20024_574
20024.                                     if ( $I_L20024_574 >= nd_profile ) exit
20024.                                  enddo
20032.                                  $I_L20023_643 = 1 + $I_L20023_643
20031.                                  if ( $I_L20023_643 >= nd_layer + -id_ct + 1 ) exit
20031.                               enddo
20031.                            endif
20031.                         endif
20033.                         if ( n_order_phase > 0 ) then
20035.                            if ( nd_layer + -id_ct >= 0 ) then
20036.                               if ( nd_profile > 0 ) then
20035.                                  $I_L20035_729 = 0
20035.                                  do
20033.                                     $I_L20033_723 = 0
20033.                                     do
20036.                                        $I_L20036_717 = 0
20036.                                        do
20035.                                           $I_L20035_692 = 0
20035. !dir$ shortloop16
20035. !dir$ blocking_size( 8, 8 )
20035.                                           do
20033.                                              $I_L20033_683 = 0
20033.                                              if ( min( n_order_phase, 8 + 8 * $I_L20033_723 ) + -8 * $I_L20033_723 >= 4 ) then
20033.                                                 $I_L20033_744 = 0
20033. !dir$ shortloop16
20033. !dir$ blocking_size( 8, 8 )
20033.                                                 do
20036.                                                    $SCA_ice_cloud_parameter#1_U0 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 6)
20036.                                                    $SCA_ice_cloud_parameter#1_U4 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 5)
20036.                                                    $SCA_ice_cloud_parameter#2_U1 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 8)
20036.                                                    $SCA_ice_cloud_parameter#2_U5 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 7)
20036.                                                    $SCA_ice_cloud_parameter#3_U2 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 10)
20036.                                                    $SCA_ice_cloud_parameter#3_U6 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 9)
20036.                                                    $SCA_ice_cloud_parameter#4_U3 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 12)
20036.                                                    $SCA_ice_cloud_parameter#4_U7 = ice_cloud_parameter(16 * $I_L20033_723 + 8 * $I_L20033_744 + 11)
20036.                                                    $I_L20036_590 = 0
20036. !dir$ ivdep
20036. !dir$ blocking_size( 256, 256 )
20036.                                                    do
20037.                                                       phase_fnc_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729, 8 * $I_L20033_723 + 4 * $I_L20033_744 + 1) = k_ext_scat_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) * ( $SCA_ice_cloud_parameter#1_U4 + $SCA_ice_cloud_parameter#1_U0 * dim_char_ice($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) )
20037.                                                       phase_fnc_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729, 8 * $I_L20033_723 + 4 * $I_L20033_744 + 2) = k_ext_scat_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) * ( $SCA_ice_cloud_parameter#2_U5 + $SCA_ice_cloud_parameter#2_U1 * dim_char_ice($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) )
20037.                                                       phase_fnc_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729, 8 * $I_L20033_723 + 4 * $I_L20033_744 + 3) = k_ext_scat_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) * ( $SCA_ice_cloud_parameter#3_U6 + $SCA_ice_cloud_parameter#3_U2 * dim_char_ice($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) )
20037.                                                       phase_fnc_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729, 8 * $I_L20033_723 + 4 * $I_L20033_744 + 4) = k_ext_scat_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) * ( $SCA_ice_cloud_parameter#4_U7 + $SCA_ice_cloud_parameter#4_U3 * dim_char_ice($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) )
20036.                                                       $I_L20036_590 = 1 + $I_L20036_590
20036.                                                       if ( $I_L20036_590 >= min( nd_profile, 256 + 256 * $I_L20036_717 ) + -256 * $I_L20036_717 ) exit
20036.                                                    enddo
20033.                                                    $I_L20033_744 = 1 + $I_L20033_744
20033.                                                    if ( $I_L20033_744 >= _rsh( min( n_order_phase, 8 + 8 * $I_L20033_723 ) + -8 * $I_L20033_723, 2 ) ) exit
20033.                                                 enddo
20033.                                                 $I_L20033_683 = and( 0xfffffffffffffffcUL, min( n_order_phase, 8 + 8 * $I_L20033_723 ) + -8 * $I_L20033_723 )
20033.                                              endif
20033.                                              if ( $I_L20033_683 < min( n_order_phase, 8 + 8 * $I_L20033_723 ) + -8 * $I_L20033_723 ) then
20033.                                                 $I_L20033_738 = 0
20033. !dir$ shortloop16
20033. !dir$ blocking_size( 8, 8 )
20033.                                                 do
20036.                                                    $SCA_ice_cloud_parameter_I46 = ice_cloud_parameter(2 * $I_L20033_683 + 16 * $I_L20033_723 + 2 * $I_L20033_738 + 6)
20036.                                                    $SCA_ice_cloud_parameter_I47 = ice_cloud_parameter(2 * $I_L20033_683 + 16 * $I_L20033_723 + 2 * $I_L20033_738 + 5)
20036.                                                    $I_L20036_590 = 0
20036. !dir$ ivdep
20036. !dir$ blocking_size( 256, 256 )
20036.                                                    do
20037.                                                       phase_fnc_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729, $I_L20033_683 + $I_L20033_738 + 8 * $I_L20033_723 + 1) = k_ext_scat_cloud($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) * ( $SCA_ice_cloud_parameter_I47 + $SCA_ice_cloud_parameter_I46 * dim_char_ice($I_L20036_590 + 256 * $I_L20036_717 + 1, id_ct + $I_L20035_692 + 8 * $I_L20035_729) )
20036.                                                       $I_L20036_590 = 1 + $I_L20036_590
20036.                                                       if ( $I_L20036_590 >= min( nd_profile, 256 + 256 * $I_L20036_717 ) + -256 * $I_L20036_717 ) exit
20036.                                                    enddo
20033.                                                    $I_L20033_738 = 1 + $I_L20033_738
20033.                                                    if ( $I_L20033_738 >= min( n_order_phase, 8 + 8 * $I_L20033_723 ) + -$I_L20033_683 + -8 * $I_L20033_723 ) exit
20033.                                                 enddo
20033.                                              endif
20035.                                              $I_L20035_692 = 1 + $I_L20035_692
20040.                                              if ( $I_L20035_692 >= min( nd_layer + -id_ct + 1, 8 + 8 * $I_L20035_729 ) + -8 * $I_L20035_729 ) exit
20040.                                           enddo
20036.                                           $I_L20036_717 = 1 + $I_L20036_717
20036.                                           if ( $I_L20036_717 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
20036.                                        enddo
20033.                                        $I_L20033_723 = 1 + $I_L20033_723
20041.                                        if ( $I_L20033_723 >= 1 + max( 0, -1 + _rsh( 7 + n_order_phase, 3 ) ) ) exit
20041.                                     enddo
20035.                                     $I_L20035_729 = 1 + $I_L20035_729
20035.                                     if ( $I_L20035_729 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_ct + 8, 3 ) ) ) exit
20035.                                  enddo
20035.                               endif
20035.                            endif
20035.                         endif
20053.                      else if ( i_parametrization_ice == 12 ) then
20056.                         if ( nd_layer + -id_ct >= 0 ) then
20064.                            $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
20064.                            $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
20064.                            $SC_ice_cloud_parameter_I6 = ice_cloud_parameter(7)
20064.                            $SC_ice_cloud_parameter_I5 = ice_cloud_parameter(8)
20063.                            $SC_ice_cloud_parameter_I4 = ice_cloud_parameter(9)
20058.                            $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
20059.                            $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
20059.                            $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
20059.                            $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
20057.                            if ( nd_profile > 0 ) then
20090.                               $SC_ice_cloud_parameter_I42 = ice_cloud_parameter(5 + 5 * n_order_forward)
20090.                               $SC_ice_cloud_parameter_I41 = ice_cloud_parameter(6 + 5 * n_order_forward)
20090.                               $SC_ice_cloud_parameter_I40 = ice_cloud_parameter(7 + 5 * n_order_forward)
20090.                               $SC_ice_cloud_parameter_I39 = ice_cloud_parameter(8 + 5 * n_order_forward)
20089.                               $SC_ice_cloud_parameter_I38 = ice_cloud_parameter(9 + 5 * n_order_forward)
20056.                               $I_L20056_641 = 0
20056.                               do
20057.                                  $I_L20057_572 = 0
20057. !dir$ ivdep
20057.                                  do
20058.                                     $x_S9 = ( dim_char_ice(1 + $I_L20057_572, id_ct + $I_L20056_641) * 1.0/$SC_ice_cloud_parameter_I3 )
20059.                                     $k_ext_tot_cloud_WR0_R2 = ice_mass_frac(1 + $I_L20057_572, id_ct + $I_L20056_641) * ( ( ( ( $SC_ice_cloud_parameter_I2 * 1.0/$x_S9 ) + $SC_ice_cloud_parameter_I0 ) * 1.0/$x_S9 ) + $SC_ice_cloud_parameter_I1 )
20059.                                     k_ext_tot_cloud(1 + $I_L20057_572, id_ct + $I_L20056_641) = $k_ext_tot_cloud_WR0_R2
20063.                                     $x_S10 = ( dim_char_ice(1 + $I_L20057_572, id_ct + $I_L20056_641) * 1.0/$SC_ice_cloud_parameter_I4 )
20064.                                     k_ext_scat_cloud(1 + $I_L20057_572, id_ct + $I_L20056_641) = ( $k_ext_tot_cloud_WR0_R2 * ( 1.0 + -( $SC_ice_cloud_parameter_I8 + $x_S10 * ( $SC_ice_cloud_parameter_I7 + $x_S10 * ( $SC_ice_cloud_parameter_I6 + $x_S10 * $SC_ice_cloud_parameter_I5 ) ) ) ) )
20089.                                     $x_S17 = ( dim_char_ice(1 + $I_L20057_572, id_ct + $I_L20056_641) * 1.0/$SC_ice_cloud_parameter_I38 )
20090.                                     forward_scatter_cloud(1 + $I_L20057_572, id_ct + $I_L20056_641) = ( $k_ext_tot_cloud_WR0_R2 * ( 1.0 + -( $SC_ice_cloud_parameter_I8 + $x_S10 * ( $SC_ice_cloud_parameter_I7 + $x_S10 * ( $SC_ice_cloud_parameter_I6 + $x_S10 * $SC_ice_cloud_parameter_I5 ) ) ) ) ) * ( $SC_ice_cloud_parameter_I42 + $x_S17 * ( $SC_ice_cloud_parameter_I41 + $x_S17 * ( $SC_ice_cloud_parameter_I40 + $x_S17 * $SC_ice_cloud_parameter_I39 ) ) )
20070.                                     $I_L20057_572 = 1 + $I_L20057_572
20057.                                     if ( $I_L20057_572 >= nd_profile ) exit
20057.                                  enddo
20071.                                  $I_L20056_641 = 1 + $I_L20056_641
20070.                                  if ( $I_L20056_641 >= nd_layer + -id_ct + 1 ) exit
20070.                               enddo
20070.                            endif
20070.                         endif
20072.                         if ( n_order_phase > 0 ) then
20074.                            if ( nd_layer + -id_ct >= 0 ) then
20075.                               if ( nd_profile > 0 ) then
20074.                                  $I_L20074_731 = 0
20074.                                  do
20075.                                     $I_L20075_725 = 0
20075.                                     do
20072.                                        $I_L20072_719 = 0
20072.                                        do
20074.                                           $I_L20074_695 = 0
20074.                                           if ( min( nd_layer + -id_ct + 1, 4 + 4 * $I_L20074_731 ) + -4 * $I_L20074_731 >= 4 ) then
20074.                                              $I_L20074_753 = 0
20074. !dir$ shortloop16
20074. !dir$ blocking_size( 4, 4 )
20074.                                              do
20075.                                                 $I_L20075_686 = 0
20075. !dir$ shortloop16
20075. !dir$ ivdep
20075. !dir$ blocking_size( 4, 4 )
20075.                                                 do
20072.                                                    $SCA_dim_char_ice#1_U8 = dim_char_ice($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753)
20072.                                                    $SCA_k_ext_scat_cloud#1_U12 = k_ext_scat_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753)
20072.                                                    $SCA_dim_char_ice#2_U9 = dim_char_ice($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 1)
20072.                                                    $SCA_k_ext_scat_cloud#2_U13 = k_ext_scat_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 1)
20072.                                                    $SCA_dim_char_ice#3_U10 = dim_char_ice($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 2)
20072.                                                    $SCA_k_ext_scat_cloud#3_U14 = k_ext_scat_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 2)
20072.                                                    $SCA_dim_char_ice#4_U11 = dim_char_ice($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 3)
20072.                                                    $SCA_k_ext_scat_cloud#4_U15 = k_ext_scat_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 3)
20072.                                                    $I_L20072_593 = 0
20072. !dir$ blocking_size( 256, 256 )
20072.                                                    do
20076.                                                       $x_S14 = ( $SCA_dim_char_ice#1_U8 * 1.0/ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 14) )
20077.                                                       phase_fnc_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753, $I_L20072_593 + 256 * $I_L20072_719 + 1) = $SCA_k_ext_scat_cloud#1_U12 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 10) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 11) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 12) + $x_S14 * ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 13) ) ) )
20076.                                                       $x_S14 = ( $SCA_dim_char_ice#2_U9 * 1.0/ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 14) )
20077.                                                       phase_fnc_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 1, $I_L20072_593 + 256 * $I_L20072_719 + 1) = $SCA_k_ext_scat_cloud#2_U13 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 10) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 11) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 12) + $x_S14 * ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 13) ) ) )
20076.                                                       $x_S14 = ( $SCA_dim_char_ice#3_U10 * 1.0/ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 14) )
20077.                                                       phase_fnc_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 2, $I_L20072_593 + 256 * $I_L20072_719 + 1) = $SCA_k_ext_scat_cloud#3_U14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 10) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 11) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 12) + $x_S14 * ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 13) ) ) )
20076.                                                       $x_S14 = ( $SCA_dim_char_ice#4_U11 * 1.0/ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 14) )
20077.                                                       phase_fnc_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + 4 * $I_L20074_731 + 4 * $I_L20074_753 + 3, $I_L20072_593 + 256 * $I_L20072_719 + 1) = $SCA_k_ext_scat_cloud#4_U15 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 10) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 11) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 12) + $x_S14 * ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 13) ) ) )
20072.                                                       $I_L20072_593 = 1 + $I_L20072_593
20075.                                                       if ( $I_L20072_593 >= min( n_order_phase, 256 + 256 * $I_L20072_719 ) + -256 * $I_L20072_719 ) exit
20075.                                                    enddo
20075.                                                    $I_L20075_686 = 1 + $I_L20075_686
20075.                                                    if ( $I_L20075_686 >= min( nd_profile, 4 + 4 * $I_L20075_725 ) + -4 * $I_L20075_725 ) exit
20075.                                                 enddo
20074.                                                 $I_L20074_753 = 1 + $I_L20074_753
20082.                                                 if ( $I_L20074_753 >= _rsh( min( nd_layer + -id_ct + 1, 4 + 4 * $I_L20074_731 ) + -4 * $I_L20074_731, 2 ) ) exit
20082.                                              enddo
20074.                                              $I_L20074_695 = and( 0xfffffffffffffffcUL, min( nd_layer + -id_ct + 1, 4 + 4 * $I_L20074_731 ) + -4 * $I_L20074_731 )
20074.                                           endif
20074.                                           if ( $I_L20074_695 < min( nd_layer + -id_ct + 1, 4 + 4 * $I_L20074_731 ) + -4 * $I_L20074_731 ) then
20074.                                              $I_L20074_750 = 0
20074. !dir$ shortloop16
20074. !dir$ blocking_size( 4, 4 )
20074.                                              do
20075.                                                 $I_L20075_686 = 0
20075. !dir$ shortloop16
20075. !dir$ ivdep
20075. !dir$ blocking_size( 4, 4 )
20075.                                                 do
20072.                                                    $SCA_dim_char_ice_I48 = dim_char_ice($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + $I_L20074_695 + $I_L20074_750 + 4 * $I_L20074_731)
20072.                                                    $SCA_k_ext_scat_cloud_I49 = k_ext_scat_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + $I_L20074_695 + $I_L20074_750 + 4 * $I_L20074_731)
20072.                                                    $I_L20072_593 = 0
20072. !dir$ blocking_size( 256, 256 )
20072.                                                    do
20076.                                                       $x_S14 = ( $SCA_dim_char_ice_I48 * 1.0/ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 14) )
20077.                                                       phase_fnc_cloud($I_L20075_686 + 4 * $I_L20075_725 + 1, id_ct + $I_L20074_695 + $I_L20074_750 + 4 * $I_L20074_731, $I_L20072_593 + 256 * $I_L20072_719 + 1) = $SCA_k_ext_scat_cloud_I49 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 10) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 11) + $x_S14 * ( ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 12) + $x_S14 * ice_cloud_parameter(5 * $I_L20072_593 + 1280 * $I_L20072_719 + 13) ) ) )
20072.                                                       $I_L20072_593 = 1 + $I_L20072_593
20075.                                                       if ( $I_L20072_593 >= min( n_order_phase, 256 + 256 * $I_L20072_719 ) + -256 * $I_L20072_719 ) exit
20075.                                                    enddo
20075.                                                    $I_L20075_686 = 1 + $I_L20075_686
20075.                                                    if ( $I_L20075_686 >= min( nd_profile, 4 + 4 * $I_L20075_725 ) + -4 * $I_L20075_725 ) exit
20075.                                                 enddo
20074.                                                 $I_L20074_750 = 1 + $I_L20074_750
20082.                                                 if ( $I_L20074_750 >= min( nd_layer + -id_ct + 1, 4 + 4 * $I_L20074_731 ) + -$I_L20074_695 + -4 * $I_L20074_731 ) exit
20082.                                              enddo
20082.                                           endif
20072.                                           $I_L20072_719 = 1 + $I_L20072_719
20072.                                           if ( $I_L20072_719 >= 1 + max( 0, -1 + _rsh( 255 + n_order_phase, 8 ) ) ) exit
20072.                                        enddo
20075.                                        $I_L20075_725 = 1 + $I_L20075_725
20083.                                        if ( $I_L20075_725 >= 1 + max( 0, -1 + _rsh( 3 + nd_profile, 2 ) ) ) exit
20083.                                     enddo
20074.                                     $I_L20074_731 = 1 + $I_L20074_731
20074.                                     if ( $I_L20074_731 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_ct + 4, 2 ) ) ) exit
20074.                                  enddo
20074.                               endif
20074.                            endif
20074.                         endif
20074.                      endif
20102.                      if ( l_solar_phf ) then
20103.                         if ( n_layer + -n_cloud_top >= 0 ) then
20103.                            $I_L20103_715 = 0
20103. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
20103.                            do
20105.                               if ( n_direction > 0 ) then
20119.                                  if ( -2 + n_order_phase_solar < 0 ) then
20105.                                     $SCA_n_cloud_profile_I45 = n_cloud_profile(n_cloud_top + $I_L20103_715)
20109.                                     if ( $SCA_n_cloud_profile_I45 > 0 ) then
20105.                                        $I_L20105_671 = 0
20105.                                        do
20109.                                           $I_L20109_619 = 0
20109. !dir$ ivdep
20109. !dir$ loop_info (automatic) cache_nt( p_legendre_ls_m1 )
20109.                                           do
20110.                                              $l_S21 = i_cloud_profile(1 + $I_L20109_619, n_cloud_top + $I_L20103_715)
20113.                                              p_legendre_ls_m1($l_S21) = 1.0
20114.                                              $SVU_P12 = cos_sol_view($l_S21, 1 + $I_L20105_671)
20114.                                              p_legendre_ls($l_S21) = $SVU_P12
20115.                                              phase_fnc_solar_cloud($l_S21, n_cloud_top + $I_L20103_715, 1 + $I_L20105_671) = k_ext_scat_cloud($l_S21, n_cloud_top + $I_L20103_715) + phase_fnc_cloud($l_S21, n_cloud_top + $I_L20103_715, 1) * $SVU_P12 * 3.0
20118.                                              $I_L20109_619 = 1 + $I_L20109_619
20109.                                              if ( $I_L20109_619 >= $SCA_n_cloud_profile_I45 ) exit
20109.                                           enddo
20156.                                           $I_L20105_671 = 1 + $I_L20105_671
20155.                                           if ( $I_L20105_671 >= n_direction ) exit
20155.                                        enddo
20155.                                     endif
20155.                                  else if ( i_parametrization_ice == 12 ) then
20105.                                     $SCA_n_cloud_profile_I44 = n_cloud_profile(n_cloud_top + $I_L20103_715)
20109.                                     if ( $SCA_n_cloud_profile_I44 > 0 ) then
20105.                                        $I_L20105_709 = 0
20105.                                        do
20109.                                           $I_L20109_633 = 0
20109. !dir$ ivdep
20109.                                           do
20110.                                              $l_S21 = i_cloud_profile(1 + $I_L20109_633, n_cloud_top + $I_L20103_715)
20113.                                              p_legendre_ls_m1($l_S21) = 1.0
20114.                                              $SVU_P9 = cos_sol_view($l_S21, 1 + $I_L20105_709)
20114.                                              p_legendre_ls($l_S21) = $SVU_P9
20115.                                              phase_fnc_solar_cloud($l_S21, n_cloud_top + $I_L20103_715, 1 + $I_L20105_709) = k_ext_scat_cloud($l_S21, n_cloud_top + $I_L20103_715) + phase_fnc_cloud($l_S21, n_cloud_top + $I_L20103_715, 1) * $SVU_P9 * 3.0
20118.                                              $I_L20109_633 = 1 + $I_L20109_633
20109.                                              if ( $I_L20109_633 >= $SCA_n_cloud_profile_I44 ) exit
20109.                                           enddo
20119.                                           $I_L20119_679 = 0
20119.                                           do
20123.                                              $cnst1_S26 = 1.0 + -( 1.0/( ( 2 + $I_L20119_679 ) ) )
20124.                                              $SCA_ice_cloud_parameter_I53 = ice_cloud_parameter(19 + 5 * $I_L20119_679)
20124.                                              $SCA_ice_cloud_parameter_I54 = ice_cloud_parameter(18 + 5 * $I_L20119_679)
20124.                                              $SCA_ice_cloud_parameter_I55 = ice_cloud_parameter(17 + 5 * $I_L20119_679)
20124.                                              $SCA_ice_cloud_parameter_I56 = ice_cloud_parameter(16 + 5 * $I_L20119_679)
20124.                                              $SCA_ice_cloud_parameter_I57 = ice_cloud_parameter(15 + 5 * $I_L20119_679)
20124.                                              $I_L20124_635 = 0
20124.                                              do
20125.                                                 $l_S25 = i_cloud_profile(1 + $I_L20124_635, n_cloud_top + $I_L20103_715)
20126.                                                 $SVU_P10 = p_legendre_ls($l_S25)
20127.                                                 $SCF_P22 = ( 1.0 + $cnst1_S26 ) * $SVU_P10 * cos_sol_view($l_S25, 1 + $I_L20105_709)
20127.                                                 $SVU_P26 = -( $cnst1_S26 * p_legendre_ls_m1($l_S25) ) + $SCF_P22
20127.                                                 p_legendre_ls($l_S25) = $SVU_P26
20130.                                                 p_legendre_ls_m1($l_S25) = $SVU_P10
20140.                                                 $x_S27 = ( dim_char_ice($l_S25, n_cloud_top + $I_L20103_715) * 1.0/$SCA_ice_cloud_parameter_I53 )
20149.                                                 $SVU_P11 = k_ext_scat_cloud($l_S25, n_cloud_top + $I_L20103_715) * ( $SCA_ice_cloud_parameter_I57 + $x_S27 * ( $SCA_ice_cloud_parameter_I56 + $x_S27 * ( $SCA_ice_cloud_parameter_I55 + $x_S27 * $SCA_ice_cloud_parameter_I54 ) ) )
20150.                                                 phase_fnc_solar_cloud($l_S25, n_cloud_top + $I_L20103_715, 1 + $I_L20105_709) = phase_fnc_solar_cloud($l_S25, n_cloud_top + $I_L20103_715, 1 + $I_L20105_709) + $SVU_P11 * $SVU_P26 * real( 5 + 2 * $I_L20119_679, 8 )
20154.                                                 $I_L20124_635 = 1 + $I_L20124_635
20147.                                                 if ( $I_L20124_635 >= $SCA_n_cloud_profile_I44 ) exit
20147.                                              enddo
20155.                                              $I_L20119_679 = 1 + $I_L20119_679
20154.                                              if ( $I_L20119_679 >= -1 + n_order_phase_solar ) exit
20154.                                           enddo
20156.                                           $I_L20105_709 = 1 + $I_L20105_709
20155.                                           if ( $I_L20105_709 >= n_direction ) exit
20155.                                        enddo
20141.                                        phf_tmp = ( $SCA_ice_cloud_parameter_I57 + $x_S27 * ( $SCA_ice_cloud_parameter_I56 + $x_S27 * ( $SCA_ice_cloud_parameter_I55 + $x_S27 * $SCA_ice_cloud_parameter_I54 ) ) )
20141.                                     endif
20141.                                  else if ( i_parametrization_ice == 11 ) then
20105.                                     $SCA_n_cloud_profile_I50 = n_cloud_profile(n_cloud_top + $I_L20103_715)
20109.                                     if ( $SCA_n_cloud_profile_I50 > 0 ) then
20105.                                        $I_L20105_703 = 0
20105.                                        do
20109.                                           $I_L20109_611 = 0
20109. !dir$ ivdep
20109.                                           do
20110.                                              $l_S21 = i_cloud_profile(1 + $I_L20109_611, n_cloud_top + $I_L20103_715)
20113.                                              p_legendre_ls_m1($l_S21) = 1.0
20114.                                              $SVU_P3 = cos_sol_view($l_S21, 1 + $I_L20105_703)
20114.                                              p_legendre_ls($l_S21) = $SVU_P3
20115.                                              phase_fnc_solar_cloud($l_S21, n_cloud_top + $I_L20103_715, 1 + $I_L20105_703) = k_ext_scat_cloud($l_S21, n_cloud_top + $I_L20103_715) + phase_fnc_cloud($l_S21, n_cloud_top + $I_L20103_715, 1) * $SVU_P3 * 3.0
20118.                                              $I_L20109_611 = 1 + $I_L20109_611
20109.                                              if ( $I_L20109_611 >= $SCA_n_cloud_profile_I50 ) exit
20109.                                           enddo
20119.                                           $I_L20119_667 = 0
20119.                                           do
20123.                                              $cnst1_S26 = 1.0 + -( 1.0/( ( 2 + $I_L20119_667 ) ) )
20124.                                              $SCA_ice_cloud_parameter_I51 = ice_cloud_parameter(8 + 2 * $I_L20119_667)
20124.                                              $SCA_ice_cloud_parameter_I52 = ice_cloud_parameter(7 + 2 * $I_L20119_667)
20124.                                              $I_L20124_613 = 0
20124. !dir$ unroll 2
20124.                                              do
20125.                                                 $l_S25 = i_cloud_profile(1 + $I_L20124_613, n_cloud_top + $I_L20103_715)
20126.                                                 $SVU_P4 = p_legendre_ls($l_S25)
20127.                                                 $SCF_P20 = ( 1.0 + $cnst1_S26 ) * $SVU_P4 * cos_sol_view($l_S25, 1 + $I_L20105_703)
20127.                                                 $SVU_P24 = -( $cnst1_S26 * p_legendre_ls_m1($l_S25) ) + $SCF_P20
20127.                                                 p_legendre_ls($l_S25) = $SVU_P24
20130.                                                 p_legendre_ls_m1($l_S25) = $SVU_P4
20135.                                                 phf_tmp = $SCA_ice_cloud_parameter_I52 + dim_char_ice($l_S25, n_cloud_top + $I_L20103_715) * $SCA_ice_cloud_parameter_I51
20149.                                                 $SVU_P5 = k_ext_scat_cloud($l_S25, n_cloud_top + $I_L20103_715) * phf_tmp
20150.                                                 phase_fnc_solar_cloud($l_S25, n_cloud_top + $I_L20103_715, 1 + $I_L20105_703) = phase_fnc_solar_cloud($l_S25, n_cloud_top + $I_L20103_715, 1 + $I_L20105_703) + $SVU_P5 * $SVU_P24 * real( 5 + 2 * $I_L20119_667, 8 )
20154.                                                 $I_L20124_613 = 1 + $I_L20124_613
20147.                                                 if ( $I_L20124_613 >= $SCA_n_cloud_profile_I50 ) exit
20147.                                              enddo
20155.                                              $I_L20119_667 = 1 + $I_L20119_667
20154.                                              if ( $I_L20119_667 >= -1 + n_order_phase_solar ) exit
20154.                                           enddo
20156.                                           $I_L20105_703 = 1 + $I_L20105_703
20155.                                           if ( $I_L20105_703 >= n_direction ) exit
20155.                                        enddo
20155.                                     endif
20155.                                  else
20105.                                     $SCA_n_cloud_profile_I43 = n_cloud_profile(n_cloud_top + $I_L20103_715)
20109.                                     if ( $SCA_n_cloud_profile_I43 > 0 ) then
20105.                                        $I_L20105_711 = 0
20105.                                        do
20109.                                           $I_L20109_637 = 0
20109. !dir$ ivdep
20109.                                           do
20110.                                              $l_S21 = i_cloud_profile(1 + $I_L20109_637, n_cloud_top + $I_L20103_715)
20113.                                              p_legendre_ls_m1($l_S21) = 1.0
20114.                                              $SVU_P6 = cos_sol_view($l_S21, 1 + $I_L20105_711)
20114.                                              p_legendre_ls($l_S21) = $SVU_P6
20115.                                              phase_fnc_solar_cloud($l_S21, n_cloud_top + $I_L20103_715, 1 + $I_L20105_711) = k_ext_scat_cloud($l_S21, n_cloud_top + $I_L20103_715) + phase_fnc_cloud($l_S21, n_cloud_top + $I_L20103_715, 1) * $SVU_P6 * 3.0
20118.                                              $I_L20109_637 = 1 + $I_L20109_637
20109.                                              if ( $I_L20109_637 >= $SCA_n_cloud_profile_I43 ) exit
20109.                                           enddo
20119.                                           $I_L20119_681 = 0
20119.                                           do
20123.                                              $cnst1_S26 = 1.0 + -( 1.0/( ( 2 + $I_L20119_681 ) ) )
20124.                                              $I_L20124_639 = 0
20124. !dir$ unroll 2
20124.                                              do
20125.                                                 $l_S25 = i_cloud_profile(1 + $I_L20124_639, n_cloud_top + $I_L20103_715)
20126.                                                 $SVU_P7 = p_legendre_ls($l_S25)
20127.                                                 $SCF_P21 = ( 1.0 + $cnst1_S26 ) * $SVU_P7 * cos_sol_view($l_S25, 1 + $I_L20105_711)
20127.                                                 $SVU_P25 = -( $cnst1_S26 * p_legendre_ls_m1($l_S25) ) + $SCF_P21
20127.                                                 p_legendre_ls($l_S25) = $SVU_P25
20130.                                                 p_legendre_ls_m1($l_S25) = $SVU_P7
20149.                                                 $SVU_P8 = k_ext_scat_cloud($l_S25, n_cloud_top + $I_L20103_715) * phf_tmp
20150.                                                 phase_fnc_solar_cloud($l_S25, n_cloud_top + $I_L20103_715, 1 + $I_L20105_711) = phase_fnc_solar_cloud($l_S25, n_cloud_top + $I_L20103_715, 1 + $I_L20105_711) + $SVU_P8 * $SVU_P25 * real( 5 + 2 * $I_L20119_681, 8 )
20154.                                                 $I_L20124_639 = 1 + $I_L20124_639
20147.                                                 if ( $I_L20124_639 >= $SCA_n_cloud_profile_I43 ) exit
20147.                                              enddo
20155.                                              $I_L20119_681 = 1 + $I_L20119_681
20154.                                              if ( $I_L20119_681 >= -1 + n_order_phase_solar ) exit
20154.                                           enddo
20156.                                           $I_L20105_711 = 1 + $I_L20105_711
20155.                                           if ( $I_L20105_711 >= n_direction ) exit
20155.                                        enddo
20155.                                     endif
20155.                                  endif
20155.                               endif
20160.                               if ( l_rescale ) then
20162.                                  $t_S28 = n_cloud_profile(n_cloud_top + $I_L20103_715)
20162.                                  if ( $t_S28 > 0 ) then
20165.                                     if ( i_parametrization_ice == 12 ) then
20174.                                        $SC_ice_cloud_parameter_I67 = ice_cloud_parameter(10 + 5 * n_order_phase_solar)
20174.                                        $SC_ice_cloud_parameter_I66 = ice_cloud_parameter(11 + 5 * n_order_phase_solar)
20174.                                        $SC_ice_cloud_parameter_I65 = ice_cloud_parameter(12 + 5 * n_order_phase_solar)
20174.                                        $SC_ice_cloud_parameter_I64 = ice_cloud_parameter(13 + 5 * n_order_phase_solar)
20173.                                        $SC_ice_cloud_parameter_I63 = ice_cloud_parameter(14 + 5 * n_order_phase_solar)
20162.                                        $I_L20162_621 = 0
20162. !dir$ ivdep
20162. !dir$ loop_info (automatic) cache_nt( k_ext_scat_cloud, i_cloud_profile, forward_solar_cloud )
20162.                                        do
20163.                                           $l_S30 = i_cloud_profile(1 + $I_L20162_621, n_cloud_top + $I_L20103_715)
20173.                                           $x_S31 = ( dim_char_ice($l_S30, n_cloud_top + $I_L20103_715) * 1.0/$SC_ice_cloud_parameter_I63 )
20182.                                           forward_solar_cloud($l_S30, n_cloud_top + $I_L20103_715) = k_ext_scat_cloud($l_S30, n_cloud_top + $I_L20103_715) * ( $SC_ice_cloud_parameter_I67 + $x_S31 * ( $SC_ice_cloud_parameter_I66 + $x_S31 * ( $SC_ice_cloud_parameter_I65 + $x_S31 * $SC_ice_cloud_parameter_I64 ) ) )
20184.                                           $I_L20162_621 = 1 + $I_L20162_621
20180.                                           if ( $I_L20162_621 >= $t_S28 ) exit
20180.                                        enddo
20174.                                        phf_tmp = ( $SC_ice_cloud_parameter_I67 + $x_S31 * ( $SC_ice_cloud_parameter_I66 + $x_S31 * ( $SC_ice_cloud_parameter_I65 + $x_S31 * $SC_ice_cloud_parameter_I64 ) ) )
20174.                                     else if ( i_parametrization_ice == 11 ) then
20168.                                        $SC_ice_cloud_parameter_I62 = ice_cloud_parameter(5 + 2 * n_order_phase_solar)
20168.                                        $SC_ice_cloud_parameter_I61 = ice_cloud_parameter(6 + 2 * n_order_phase_solar)
20162.                                        $I_L20162_615 = 0
20162. !dir$ ivdep
20162. !dir$ loop_info (automatic) cache_nt( k_ext_scat_cloud, i_cloud_profile, forward_solar_cloud )
20162.                                        do
20163.                                           $l_S30 = i_cloud_profile(1 + $I_L20162_615, n_cloud_top + $I_L20103_715)
20168.                                           phf_tmp = $SC_ice_cloud_parameter_I62 + dim_char_ice($l_S30, n_cloud_top + $I_L20103_715) * $SC_ice_cloud_parameter_I61
20182.                                           forward_solar_cloud($l_S30, n_cloud_top + $I_L20103_715) = k_ext_scat_cloud($l_S30, n_cloud_top + $I_L20103_715) * phf_tmp
20184.                                           $I_L20162_615 = 1 + $I_L20162_615
20180.                                           if ( $I_L20162_615 >= $t_S28 ) exit
20180.                                        enddo
20180.                                     else
20162.                                        $I_L20162_623 = 0
20162. !dir$ ivdep
20162. !dir$ loop_info (automatic) cache_nt( k_ext_scat_cloud, i_cloud_profile, forward_solar_cloud )
20162.                                        do
20163.                                           $l_S30 = i_cloud_profile(1 + $I_L20162_623, n_cloud_top + $I_L20103_715)
20182.                                           forward_solar_cloud($l_S30, n_cloud_top + $I_L20103_715) = k_ext_scat_cloud($l_S30, n_cloud_top + $I_L20103_715) * phf_tmp
20184.                                           $I_L20162_623 = 1 + $I_L20162_623
20180.                                           if ( $I_L20162_623 >= $t_S28 ) exit
20180.                                        enddo
20180.                                     endif
20180.                                  endif
20180.                               endif
20187.                               $I_L20103_715 = 1 + $I_L20103_715
20185.                               if ( $I_L20103_715 >= n_layer + -n_cloud_top + 1 ) exit
20185.                            enddo
20185.                         endif
20185.                      endif
20185.                   endif
20185.                endif
20185.             else
20185.                goto 10
20185.             endif
20185.          else
20185.    10       continue
19637.             if ( i_parametrization_ice /= 12 ) then
19637.                if ( i_parametrization_ice /= 10 ) then
19637.                   if ( i_parametrization_ice /= 9 ) then
19637.                      if ( i_parametrization_ice /= 5 ) then
19637.                         if ( i_parametrization_ice /= 4 ) then
19637.                            if ( i_parametrization_ice /= 7 ) then
19637.                               if ( i_parametrization_ice /= 6 ) then
19637.                                  if ( i_parametrization_ice == 11 ) then
19639.                                     goto 20
19639.                                  else if ( i_parametrization_ice == 1 ) then
19639.    20                               continue
19643.                                     if ( nd_layer + -id_ct >= 0 ) then
19651.                                        $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19651.                                        $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19648.                                        $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19648.                                        $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19645.                                        $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19645.                                        $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19644.                                        if ( nd_profile > 0 ) then
19643.                                           $I_L19643_657 = 0
19643.                                           do
19644.                                              $I_L19644_588 = 0
19644. !dir$ ivdep
19644.                                              do
19645.                                                 $k_ext_tot_cloud_WR0_R4 = ice_mass_frac(1 + $I_L19644_588, id_ct + $I_L19643_657) * ( $SC_ice_cloud_parameter_I1 + ( $SC_ice_cloud_parameter_I0 * 1.0/dim_char_ice(1 + $I_L19644_588, id_ct + $I_L19643_657) ) )
19645.                                                 k_ext_tot_cloud(1 + $I_L19644_588, id_ct + $I_L19643_657) = $k_ext_tot_cloud_WR0_R4
19648.                                                 $k_ext_scat_cloud_WR0_R5 = $k_ext_tot_cloud_WR0_R4 * ( -( $SC_ice_cloud_parameter_I3 * dim_char_ice(1 + $I_L19644_588, id_ct + $I_L19643_657) ) + -$SC_ice_cloud_parameter_I2 + 1.0 )
19648.                                                 k_ext_scat_cloud(1 + $I_L19644_588, id_ct + $I_L19643_657) = $k_ext_scat_cloud_WR0_R5
19651.                                                 $asymmetry_process_WR0_R6 = $SC_ice_cloud_parameter_I8 + $SC_ice_cloud_parameter_I7 * dim_char_ice(1 + $I_L19644_588, id_ct + $I_L19643_657)
19651.                                                 asymmetry_process(1 + $I_L19644_588, id_ct + $I_L19643_657) = $asymmetry_process_WR0_R6
19654.                                                 phase_fnc_cloud(1 + $I_L19644_588, id_ct + $I_L19643_657, 1) = $k_ext_scat_cloud_WR0_R5 * $asymmetry_process_WR0_R6
19656.                                                 $I_L19644_588 = 1 + $I_L19644_588
19644.                                                 if ( $I_L19644_588 >= nd_profile ) exit
19644.                                              enddo
19657.                                              $I_L19643_657 = 1 + $I_L19643_657
19656.                                              if ( $I_L19643_657 >= nd_layer + -id_ct + 1 ) exit
19656.                                           enddo
19656.                                        endif
19656.                                     endif
19656.                                  endif
19656.                               else if ( nd_layer + -id_ct >= 0 ) then
19712.                                  $SC_ice_cloud_parameter_I29 = ice_cloud_parameter(26)
19712.                                  $SC_ice_cloud_parameter_I28 = ice_cloud_parameter(27)
19712.                                  $SC_ice_cloud_parameter_I27 = ice_cloud_parameter(28)
19712.                                  $SC_ice_cloud_parameter_I26 = ice_cloud_parameter(29)
19705.                                  $SC_ice_cloud_parameter_I25 = ice_cloud_parameter(21)
19705.                                  $SC_ice_cloud_parameter_I24 = ice_cloud_parameter(22)
19705.                                  $SC_ice_cloud_parameter_I23 = ice_cloud_parameter(23)
19705.                                  $SC_ice_cloud_parameter_I22 = ice_cloud_parameter(24)
19705.                                  $SC_ice_cloud_parameter_I21 = ice_cloud_parameter(25)
19702.                                  $SC_ice_cloud_parameter_I20 = ice_cloud_parameter(30)
19695.                                  $SC_ice_cloud_parameter_I19 = ice_cloud_parameter(16)
19695.                                  $SC_ice_cloud_parameter_I18 = ice_cloud_parameter(17)
19695.                                  $SC_ice_cloud_parameter_I17 = ice_cloud_parameter(18)
19695.                                  $SC_ice_cloud_parameter_I16 = ice_cloud_parameter(19)
19687.                                  $SC_ice_cloud_parameter_I15 = ice_cloud_parameter(11)
19687.                                  $SC_ice_cloud_parameter_I14 = ice_cloud_parameter(12)
19687.                                  $SC_ice_cloud_parameter_I13 = ice_cloud_parameter(13)
19687.                                  $SC_ice_cloud_parameter_I12 = ice_cloud_parameter(14)
19687.                                  $SC_ice_cloud_parameter_I11 = ice_cloud_parameter(15)
19684.                                  $SC_ice_cloud_parameter_I10 = ice_cloud_parameter(20)
19666.                                  $SC_ice_cloud_parameter_I9 = ice_cloud_parameter(10)
19669.                                  $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19677.                                  $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19677.                                  $SC_ice_cloud_parameter_I6 = ice_cloud_parameter(7)
19677.                                  $SC_ice_cloud_parameter_I5 = ice_cloud_parameter(8)
19677.                                  $SC_ice_cloud_parameter_I4 = ice_cloud_parameter(9)
19669.                                  $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19669.                                  $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19669.                                  $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19669.                                  $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19665.                                  if ( nd_profile > 0 ) then
19664.                                     $I_L19664_659 = 0
19664.                                     do
19665.                                        $I_L19665_596 = 0
19665. !dir$ ivdep
19665.                                        do
19666.                                           $x_S36 = log( ( dim_char_ice(1 + $I_L19665_596, id_ct + $I_L19664_659) * 1.0/$SC_ice_cloud_parameter_I9 ) )
19667.                                           if ( log( ( dim_char_ice(1 + $I_L19665_596, id_ct + $I_L19664_659) * 1.0/$SC_ice_cloud_parameter_I9 ) ) > 0.0 ) then
19669.                                              k_ext_tot_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) = ice_mass_frac(1 + $I_L19665_596, id_ct + $I_L19664_659) * _expn( $SC_ice_cloud_parameter_I1 + $x_S36 * ( $SC_ice_cloud_parameter_I0 + $x_S36 * ( $SC_ice_cloud_parameter_I2 + $x_S36 * ( $SC_ice_cloud_parameter_I3 + $x_S36 * $SC_ice_cloud_parameter_I8 ) ) ) )
19669.                                           else
19677.                                              k_ext_tot_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) = ice_mass_frac(1 + $I_L19665_596, id_ct + $I_L19664_659) * _expn( $SC_ice_cloud_parameter_I1 + $x_S36 * ( $SC_ice_cloud_parameter_I7 + $x_S36 * ( $SC_ice_cloud_parameter_I6 + $x_S36 * ( $SC_ice_cloud_parameter_I5 + $x_S36 * $SC_ice_cloud_parameter_I4 ) ) ) )
19677.                                           endif
19684.                                           $x_S37 = log( ( dim_char_ice(1 + $I_L19665_596, id_ct + $I_L19664_659) * 1.0/$SC_ice_cloud_parameter_I10 ) )
19685.                                           if ( log( ( dim_char_ice(1 + $I_L19665_596, id_ct + $I_L19664_659) * 1.0/$SC_ice_cloud_parameter_I10 ) ) > 0.0 ) then
19687.                                              k_ext_scat_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) = k_ext_tot_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) * ( 1.0 + -( $SC_ice_cloud_parameter_I15 + $x_S37 * ( $SC_ice_cloud_parameter_I14 + $x_S37 * ( $SC_ice_cloud_parameter_I13 + $x_S37 * ( $SC_ice_cloud_parameter_I12 + $x_S37 * $SC_ice_cloud_parameter_I11 ) ) ) ) )
19687.                                           else
19695.                                              k_ext_scat_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) = k_ext_tot_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) * ( 1.0 + -( $SC_ice_cloud_parameter_I15 + $x_S37 * ( $SC_ice_cloud_parameter_I19 + $x_S37 * ( $SC_ice_cloud_parameter_I18 + $x_S37 * ( $SC_ice_cloud_parameter_I17 + $x_S37 * $SC_ice_cloud_parameter_I16 ) ) ) ) )
19695.                                           endif
19702.                                           $x_S38 = log( ( dim_char_ice(1 + $I_L19665_596, id_ct + $I_L19664_659) * 1.0/$SC_ice_cloud_parameter_I20 ) )
19703.                                           if ( log( ( dim_char_ice(1 + $I_L19665_596, id_ct + $I_L19664_659) * 1.0/$SC_ice_cloud_parameter_I20 ) ) > 0.0 ) then
19705.                                              asymmetry_process(1 + $I_L19665_596, id_ct + $I_L19664_659) = $SC_ice_cloud_parameter_I25 + $x_S38 * ( $SC_ice_cloud_parameter_I24 + $x_S38 * ( $SC_ice_cloud_parameter_I23 + $x_S38 * ( $SC_ice_cloud_parameter_I22 + $x_S38 * $SC_ice_cloud_parameter_I21 ) ) )
19705.                                           else
19712.                                              asymmetry_process(1 + $I_L19665_596, id_ct + $I_L19664_659) = $SC_ice_cloud_parameter_I25 + $x_S38 * ( $SC_ice_cloud_parameter_I29 + $x_S38 * ( $SC_ice_cloud_parameter_I28 + $x_S38 * ( $SC_ice_cloud_parameter_I27 + $x_S38 * $SC_ice_cloud_parameter_I26 ) ) )
19712.                                           endif
19718.                                           phase_fnc_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659, 1) = k_ext_scat_cloud(1 + $I_L19665_596, id_ct + $I_L19664_659) * asymmetry_process(1 + $I_L19665_596, id_ct + $I_L19664_659)
19720.                                           $I_L19665_596 = 1 + $I_L19665_596
19717.                                           if ( $I_L19665_596 >= nd_profile ) exit
19717.                                        enddo
19721.                                        $I_L19664_659 = 1 + $I_L19664_659
19720.                                        if ( $I_L19664_659 >= nd_layer + -id_ct + 1 ) exit
19720.                                     enddo
19720.                                  endif
19720.                               endif
19720.                            else if ( nd_layer + -id_ct >= 0 ) then
19759.                               $SC_ice_cloud_parameter_I35 = ice_cloud_parameter(31)
19759.                               $SC_ice_cloud_parameter_I34 = ice_cloud_parameter(32)
19759.                               $SC_ice_cloud_parameter_I33 = ice_cloud_parameter(33)
19759.                               $SC_ice_cloud_parameter_I32 = ice_cloud_parameter(34)
19759.                               $SC_ice_cloud_parameter_I31 = ice_cloud_parameter(35)
19758.                               $SC_ice_cloud_parameter_I30 = ice_cloud_parameter(36)
19765.                               $SC_ice_cloud_parameter_I29 = ice_cloud_parameter(26)
19765.                               $SC_ice_cloud_parameter_I28 = ice_cloud_parameter(27)
19765.                               $SC_ice_cloud_parameter_I27 = ice_cloud_parameter(28)
19765.                               $SC_ice_cloud_parameter_I26 = ice_cloud_parameter(29)
19745.                               $SC_ice_cloud_parameter_I25 = ice_cloud_parameter(21)
19745.                               $SC_ice_cloud_parameter_I24 = ice_cloud_parameter(22)
19745.                               $SC_ice_cloud_parameter_I23 = ice_cloud_parameter(23)
19744.                               $SC_ice_cloud_parameter_I22 = ice_cloud_parameter(24)
19765.                               $SC_ice_cloud_parameter_I21 = ice_cloud_parameter(25)
19759.                               $SC_ice_cloud_parameter_I20 = ice_cloud_parameter(30)
19751.                               $SC_ice_cloud_parameter_I19 = ice_cloud_parameter(16)
19751.                               $SC_ice_cloud_parameter_I18 = ice_cloud_parameter(17)
19745.                               $SC_ice_cloud_parameter_I17 = ice_cloud_parameter(18)
19745.                               $SC_ice_cloud_parameter_I16 = ice_cloud_parameter(19)
19731.                               $SC_ice_cloud_parameter_I15 = ice_cloud_parameter(11)
19730.                               $SC_ice_cloud_parameter_I14 = ice_cloud_parameter(12)
19751.                               $SC_ice_cloud_parameter_I13 = ice_cloud_parameter(13)
19751.                               $SC_ice_cloud_parameter_I12 = ice_cloud_parameter(14)
19751.                               $SC_ice_cloud_parameter_I11 = ice_cloud_parameter(15)
19745.                               $SC_ice_cloud_parameter_I10 = ice_cloud_parameter(20)
19731.                               $SC_ice_cloud_parameter_I9 = ice_cloud_parameter(10)
19737.                               $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19731.                               $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19731.                               $SC_ice_cloud_parameter_I6 = ice_cloud_parameter(7)
19731.                               $SC_ice_cloud_parameter_I5 = ice_cloud_parameter(8)
19731.                               $SC_ice_cloud_parameter_I4 = ice_cloud_parameter(9)
19737.                               $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19737.                               $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19737.                               $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19737.                               $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19729.                               if ( nd_profile > 0 ) then
19728.                                  $I_L19728_655 = 0
19728.                                  do
19729.                                     $I_L19729_586 = 0
19729. !dir$ ivdep
19729.                                     do
19730.                                        $x_S41 = ( dim_char_ice(1 + $I_L19729_586, id_ct + $I_L19728_655) * 1.0/$SC_ice_cloud_parameter_I14 )
19737.                                        $k_ext_tot_cloud_WR0_R7 = ice_mass_frac(1 + $I_L19729_586, id_ct + $I_L19728_655) * _expn( $SC_ice_cloud_parameter_I1 + $x_S41 * ( $SC_ice_cloud_parameter_I0 + $x_S41 * ( $SC_ice_cloud_parameter_I2 + $x_S41 * ( $SC_ice_cloud_parameter_I3 + $x_S41 * ( $SC_ice_cloud_parameter_I8 + $x_S41 * ( $SC_ice_cloud_parameter_I7 + $x_S41 * ( $SC_ice_cloud_parameter_I6 + $x_S41 * ( $SC_ice_cloud_parameter_I5 + $x_S41 * ( $SC_ice_cloud_parameter_I4 + $x_S41 * ( $SC_ice_cloud_parameter_I9 + $x_S41 * $SC_ice_cloud_parameter_I15 ) ) ) ) ) ) ) ) ) )
19737.                                        k_ext_tot_cloud(1 + $I_L19729_586, id_ct + $I_L19728_655) = $k_ext_tot_cloud_WR0_R7
19744.                                        $x_S43 = ( dim_char_ice(1 + $I_L19729_586, id_ct + $I_L19728_655) * 1.0/$SC_ice_cloud_parameter_I22 )
19751.                                        k_ext_scat_cloud(1 + $I_L19729_586, id_ct + $I_L19728_655) = ( $k_ext_tot_cloud_WR0_R7 * ( 1.0 + -( $SC_ice_cloud_parameter_I13 + $x_S43 * ( $SC_ice_cloud_parameter_I12 + $x_S43 * ( $SC_ice_cloud_parameter_I11 + $x_S43 * ( $SC_ice_cloud_parameter_I19 + $x_S43 * ( $SC_ice_cloud_parameter_I18 + $x_S43 * ( $SC_ice_cloud_parameter_I17 + $x_S43 * ( $SC_ice_cloud_parameter_I16 + $x_S43 * ( $SC_ice_cloud_parameter_I10 + $x_S43 * ( $SC_ice_cloud_parameter_I25 + $x_S43 * ( $SC_ice_cloud_parameter_I24 + $x_S43 * $SC_ice_cloud_parameter_I23 ) ) ) ) ) ) ) ) ) ) ) )
19758.                                        $x_S45 = ( dim_char_ice(1 + $I_L19729_586, id_ct + $I_L19728_655) * 1.0/$SC_ice_cloud_parameter_I30 )
19765.                                        asymmetry_process(1 + $I_L19729_586, id_ct + $I_L19728_655) = ( $SC_ice_cloud_parameter_I21 + $x_S45 * ( $SC_ice_cloud_parameter_I29 + $x_S45 * ( $SC_ice_cloud_parameter_I28 + $x_S45 * ( $SC_ice_cloud_parameter_I27 + $x_S45 * ( $SC_ice_cloud_parameter_I26 + $x_S45 * ( $SC_ice_cloud_parameter_I20 + $x_S45 * ( $SC_ice_cloud_parameter_I35 + $x_S45 * ( $SC_ice_cloud_parameter_I34 + $x_S45 * ( $SC_ice_cloud_parameter_I33 + $x_S45 * ( $SC_ice_cloud_parameter_I32 + $x_S45 * $SC_ice_cloud_parameter_I31 ) ) ) ) ) ) ) ) ) )
19771.                                        phase_fnc_cloud(1 + $I_L19729_586, id_ct + $I_L19728_655, 1) = ( $k_ext_tot_cloud_WR0_R7 * ( 1.0 + -( $SC_ice_cloud_parameter_I13 + $x_S43 * ( $SC_ice_cloud_parameter_I12 + $x_S43 * ( $SC_ice_cloud_parameter_I11 + $x_S43 * ( $SC_ice_cloud_parameter_I19 + $x_S43 * ( $SC_ice_cloud_parameter_I18 + $x_S43 * ( $SC_ice_cloud_parameter_I17 + $x_S43 * ( $SC_ice_cloud_parameter_I16 + $x_S43 * ( $SC_ice_cloud_parameter_I10 + $x_S43 * ( $SC_ice_cloud_parameter_I25 + $x_S43 * ( $SC_ice_cloud_parameter_I24 + $x_S43 * $SC_ice_cloud_parameter_I23 ) ) ) ) ) ) ) ) ) ) ) ) * ( $SC_ice_cloud_parameter_I21 + $x_S45 * ( $SC_ice_cloud_parameter_I29 + $x_S45 * ( $SC_ice_cloud_parameter_I28 + $x_S45 * ( $SC_ice_cloud_parameter_I27 + $x_S45 * ( $SC_ice_cloud_parameter_I26 + $x_S45 * ( $SC_ice_cloud_parameter_I20 + $x_S45 * ( $SC_ice_cloud_parameter_I35 + $x_S45 * ( $SC_ice_cloud_parameter_I34 + $x_S45 * ( $SC_ice_cloud_parameter_I33 + $x_S45 * ( $SC_ice_cloud_parameter_I32 + $x_S45 * $SC_ice_cloud_parameter_I31 ) ) ) ) ) ) ) ) ) )
19773.                                        $I_L19729_586 = 1 + $I_L19729_586
19729.                                        if ( $I_L19729_586 >= nd_profile ) exit
19729.                                     enddo
19774.                                     $I_L19728_655 = 1 + $I_L19728_655
19773.                                     if ( $I_L19728_655 >= nd_layer + -id_ct + 1 ) exit
19773.                                  enddo
19773.                               endif
19773.                            endif
19773.                         else if ( nd_layer + -id_ct >= 0 ) then
19790.                            $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19796.                            $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19796.                            $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19796.                            $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19790.                            $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19790.                            $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19782.                            if ( nd_profile > 0 ) then
19781.                               $I_L19781_653 = 0
19781.                               do
19782.                                  $I_L19782_584 = 0
19782. !dir$ ivdep
19782.                                  do
19783.                                     $t_celsius_S49 = -273.16000000000003 + t(1 + $I_L19782_584, id_ct + $I_L19781_653)
19787.                                     $k_ext_tot_cloud_WR0_R10 = ( ( 1.0469999999999999 + $t_celsius_S49 * ( -9.1299999999999997e-5 + $t_celsius_S49 * ( 2.0259999999999999e-4 + -1.0560000000000001e-5 * $t_celsius_S49 ) ) ) * ice_mass_frac(1 + $I_L19782_584, id_ct + $I_L19781_653) * 1.0/( 3.05548e-2 + ice_mass_frac(1 + $I_L19782_584, id_ct + $I_L19781_653) * density(1 + $I_L19782_584, id_ct + $I_L19781_653) * 254.80199999999999 ) )
19787.                                     k_ext_tot_cloud(1 + $I_L19782_584, id_ct + $I_L19781_653) = $k_ext_tot_cloud_WR0_R10
19790.                                     $k_ext_scat_cloud_WR0_R11 = $k_ext_tot_cloud_WR0_R10 * ( 1.0 + -( $SC_ice_cloud_parameter_I1 * _expn( $SC_ice_cloud_parameter_I0 * log( 9.9999999999999998e-13 + density(1 + $I_L19782_584, id_ct + $I_L19781_653) * ice_mass_frac(1 + $I_L19782_584, id_ct + $I_L19781_653) ) ) ) ) * ( 1.0 + ( $SC_ice_cloud_parameter_I8 * ( 4.6999999999999931e-2 + ( $t_celsius_S49 * ( -9.1299999999999997e-5 + $t_celsius_S49 * ( 2.0259999999999999e-4 + -1.0560000000000001e-5 * $t_celsius_S49 ) ) ) ) * 1.0/( 1.0469999999999999 + $t_celsius_S49 * ( -9.1299999999999997e-5 + $t_celsius_S49 * ( 2.0259999999999999e-4 + -1.0560000000000001e-5 * $t_celsius_S49 ) ) ) ) )
19790.                                     k_ext_scat_cloud(1 + $I_L19782_584, id_ct + $I_L19781_653) = $k_ext_scat_cloud_WR0_R11
19796.                                     $asymmetry_process_WR0_R12 = $SC_ice_cloud_parameter_I2 * _expn( $SC_ice_cloud_parameter_I3 * log( 9.9999999999999998e-13 + density(1 + $I_L19782_584, id_ct + $I_L19781_653) * ice_mass_frac(1 + $I_L19782_584, id_ct + $I_L19781_653) ) ) * ( 1.0 + ( $SC_ice_cloud_parameter_I7 * ( 4.6999999999999931e-2 + ( $t_celsius_S49 * ( -9.1299999999999997e-5 + $t_celsius_S49 * ( 2.0259999999999999e-4 + -1.0560000000000001e-5 * $t_celsius_S49 ) ) ) ) * 1.0/( 1.0469999999999999 + $t_celsius_S49 * ( -9.1299999999999997e-5 + $t_celsius_S49 * ( 2.0259999999999999e-4 + -1.0560000000000001e-5 * $t_celsius_S49 ) ) ) ) )
19796.                                     asymmetry_process(1 + $I_L19782_584, id_ct + $I_L19781_653) = $asymmetry_process_WR0_R12
19801.                                     phase_fnc_cloud(1 + $I_L19782_584, id_ct + $I_L19781_653, 1) = $k_ext_scat_cloud_WR0_R11 * $asymmetry_process_WR0_R12
19803.                                     $I_L19782_584 = 1 + $I_L19782_584
19782.                                     if ( $I_L19782_584 >= nd_profile ) exit
19782.                                  enddo
19804.                                  $I_L19781_653 = 1 + $I_L19781_653
19803.                                  if ( $I_L19781_653 >= nd_layer + -id_ct + 1 ) exit
19803.                               enddo
19803.                            endif
19803.                         endif
19803.                      else if ( nd_layer + -id_ct >= 0 ) then
19812.                         if ( nd_profile > 0 ) then
19811.                            $I_L19811_651 = 0
19811.                            do
19812.                               $I_L19812_582 = 0
19812. !dir$ ivdep
19812.                               do
19813.                                  $t_celsius_S53 = -273.16000000000003 + t(1 + $I_L19812_582, id_ct + $I_L19811_651)
19817.                                  k_ext_tot_cloud(1 + $I_L19812_582, id_ct + $I_L19811_651) = ( ( 1.0469999999999999 + $t_celsius_S53 * ( -9.1299999999999997e-5 + $t_celsius_S53 * ( 2.0259999999999999e-4 + -1.0560000000000001e-5 * $t_celsius_S53 ) ) ) * ice_mass_frac(1 + $I_L19812_582, id_ct + $I_L19811_651) * 1.0/( 6.3068899999999997e-2 + ice_mass_frac(1 + $I_L19812_582, id_ct + $I_L19811_651) * density(1 + $I_L19812_582, id_ct + $I_L19811_651) * 265.87400000000002 ) )
19820.                                  $I_L19812_582 = 1 + $I_L19812_582
19812.                                  if ( $I_L19812_582 >= nd_profile ) exit
19812.                               enddo
19821.                               $I_L19811_651 = 1 + $I_L19811_651
19820.                               if ( $I_L19811_651 >= nd_layer + -id_ct + 1 ) exit
19820.                            enddo
19820.                         endif
19820.                      endif
19820.                   else if ( nd_layer + -id_ct >= 0 ) then
19846.                      $SC_ice_cloud_parameter_I15 = ice_cloud_parameter(11)
19846.                      $SC_ice_cloud_parameter_I14 = ice_cloud_parameter(12)
19846.                      $SC_ice_cloud_parameter_I13 = ice_cloud_parameter(13)
19846.                      $SC_ice_cloud_parameter_I12 = ice_cloud_parameter(14)
19838.                      $SC_ice_cloud_parameter_I9 = ice_cloud_parameter(10)
19833.                      $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19833.                      $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19838.                      $SC_ice_cloud_parameter_I6 = ice_cloud_parameter(7)
19838.                      $SC_ice_cloud_parameter_I5 = ice_cloud_parameter(8)
19838.                      $SC_ice_cloud_parameter_I4 = ice_cloud_parameter(9)
19833.                      $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19833.                      $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19830.                      $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19830.                      $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19829.                      if ( nd_profile > 0 ) then
19828.                         $I_L19828_649 = 0
19828.                         do
19829.                            $I_L19829_580 = 0
19829. !dir$ ivdep
19829.                            do
19830.                               $k_ext_tot_cloud_WR0_R13 = ice_mass_frac(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I1 + ( $SC_ice_cloud_parameter_I0 * 1.0/dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) ) )
19830.                               k_ext_tot_cloud(1 + $I_L19829_580, id_ct + $I_L19828_649) = $k_ext_tot_cloud_WR0_R13
19833.                               $omega_S56 = 1.0 + -( $SC_ice_cloud_parameter_I2 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I3 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I8 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * $SC_ice_cloud_parameter_I7 ) ) )
19837.                               $k_ext_scat_cloud_WR0_R14 = $k_ext_tot_cloud_WR0_R13 * $omega_S56
19837.                               k_ext_scat_cloud(1 + $I_L19829_580, id_ct + $I_L19828_649) = ( $k_ext_tot_cloud_WR0_R13 * $omega_S56 )
19838.                               $asymmetry_process_WR0_R15 = $SC_ice_cloud_parameter_I6 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I5 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I4 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * $SC_ice_cloud_parameter_I9 ) )
19838.                               asymmetry_process(1 + $I_L19829_580, id_ct + $I_L19828_649) = $asymmetry_process_WR0_R15
19843.                               phase_fnc_cloud(1 + $I_L19829_580, id_ct + $I_L19828_649, 1) = ( $k_ext_tot_cloud_WR0_R13 * $omega_S56 ) * $asymmetry_process_WR0_R15
19846.                               forward_scatter_cloud(1 + $I_L19829_580, id_ct + $I_L19828_649) = $k_ext_scat_cloud_WR0_R14 * ( 1.0/max( 1.0, 2.0 * $omega_S56 ) + $SC_ice_cloud_parameter_I15 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I14 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * ( $SC_ice_cloud_parameter_I13 + dim_char_ice(1 + $I_L19829_580, id_ct + $I_L19828_649) * $SC_ice_cloud_parameter_I12 ) ) )
19853.                               $I_L19829_580 = 1 + $I_L19829_580
19829.                               if ( $I_L19829_580 >= nd_profile ) exit
19829.                            enddo
19854.                            $I_L19828_649 = 1 + $I_L19828_649
19853.                            if ( $I_L19828_649 >= nd_layer + -id_ct + 1 ) exit
19853.                         enddo
19853.                      endif
19853.                   endif
19853.                else if ( nd_layer + -id_ct >= 0 ) then
19873.                   $SC_ice_cloud_parameter_I15 = ice_cloud_parameter(11)
19873.                   $SC_ice_cloud_parameter_I9 = ice_cloud_parameter(10)
19867.                   $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19867.                   $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19867.                   $SC_ice_cloud_parameter_I6 = ice_cloud_parameter(7)
19873.                   $SC_ice_cloud_parameter_I5 = ice_cloud_parameter(8)
19873.                   $SC_ice_cloud_parameter_I4 = ice_cloud_parameter(9)
19867.                   $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19863.                   $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19863.                   $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19863.                   $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19862.                   if ( nd_profile > 0 ) then
19861.                      $I_L19861_647 = 0
19861.                      do
19862.                         $I_L19862_578 = 0
19862. !dir$ ivdep
19862.                         do
19863.                            $k_ext_tot_cloud_WR0_R16 = ice_mass_frac(1 + $I_L19862_578, id_ct + $I_L19861_647) * ( ( ( ( $SC_ice_cloud_parameter_I2 * 1.0/dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) ) + $SC_ice_cloud_parameter_I0 ) * 1.0/dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) ) + $SC_ice_cloud_parameter_I1 )
19863.                            k_ext_tot_cloud(1 + $I_L19862_578, id_ct + $I_L19861_647) = $k_ext_tot_cloud_WR0_R16
19867.                            $k_ext_scat_cloud_WR0_R17 = $k_ext_tot_cloud_WR0_R16 + -( ( ice_mass_frac(1 + $I_L19862_578, id_ct + $I_L19861_647) * 1.0/dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) ) * ( $SC_ice_cloud_parameter_I3 + dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) * ( $SC_ice_cloud_parameter_I8 + dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) * ( $SC_ice_cloud_parameter_I7 + dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) * $SC_ice_cloud_parameter_I6 ) ) ) )
19867.                            k_ext_scat_cloud(1 + $I_L19862_578, id_ct + $I_L19861_647) = $k_ext_scat_cloud_WR0_R17
19873.                            $asymmetry_process_WR0_R18 = $SC_ice_cloud_parameter_I5 + dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) * ( $SC_ice_cloud_parameter_I4 + dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) * ( $SC_ice_cloud_parameter_I9 + dim_char_ice(1 + $I_L19862_578, id_ct + $I_L19861_647) * $SC_ice_cloud_parameter_I15 ) )
19873.                            asymmetry_process(1 + $I_L19862_578, id_ct + $I_L19861_647) = $asymmetry_process_WR0_R18
19878.                            phase_fnc_cloud(1 + $I_L19862_578, id_ct + $I_L19861_647, 1) = $k_ext_scat_cloud_WR0_R17 * $asymmetry_process_WR0_R18
19880.                            $I_L19862_578 = 1 + $I_L19862_578
19862.                            if ( $I_L19862_578 >= nd_profile ) exit
19862.                         enddo
19881.                         $I_L19861_647 = 1 + $I_L19861_647
19880.                         if ( $I_L19861_647 >= nd_layer + -id_ct + 1 ) exit
19880.                      enddo
19880.                   endif
19880.                endif
19880.             else if ( nd_layer + -id_ct >= 0 ) then
19903.                $SC_ice_cloud_parameter_I15 = ice_cloud_parameter(11)
19903.                $SC_ice_cloud_parameter_I14 = ice_cloud_parameter(12)
19903.                $SC_ice_cloud_parameter_I13 = ice_cloud_parameter(13)
19902.                $SC_ice_cloud_parameter_I12 = ice_cloud_parameter(14)
19903.                $SC_ice_cloud_parameter_I9 = ice_cloud_parameter(10)
19896.                $SC_ice_cloud_parameter_I8 = ice_cloud_parameter(5)
19896.                $SC_ice_cloud_parameter_I7 = ice_cloud_parameter(6)
19896.                $SC_ice_cloud_parameter_I6 = ice_cloud_parameter(7)
19896.                $SC_ice_cloud_parameter_I5 = ice_cloud_parameter(8)
19895.                $SC_ice_cloud_parameter_I4 = ice_cloud_parameter(9)
19890.                $SC_ice_cloud_parameter_I3 = ice_cloud_parameter(4)
19891.                $SC_ice_cloud_parameter_I2 = ice_cloud_parameter(3)
19891.                $SC_ice_cloud_parameter_I1 = ice_cloud_parameter(1)
19891.                $SC_ice_cloud_parameter_I0 = ice_cloud_parameter(2)
19889.                if ( nd_profile > 0 ) then
19888.                   $I_L19888_645 = 0
19888.                   do
19889.                      $I_L19889_576 = 0
19889. !dir$ ivdep
19889.                      do
19890.                         $x_S61 = ( dim_char_ice(1 + $I_L19889_576, id_ct + $I_L19888_645) * 1.0/$SC_ice_cloud_parameter_I3 )
19891.                         $k_ext_tot_cloud_WR0_R19 = ice_mass_frac(1 + $I_L19889_576, id_ct + $I_L19888_645) * ( ( ( ( $SC_ice_cloud_parameter_I2 * 1.0/$x_S61 ) + $SC_ice_cloud_parameter_I0 ) * 1.0/$x_S61 ) + $SC_ice_cloud_parameter_I1 )
19891.                         k_ext_tot_cloud(1 + $I_L19889_576, id_ct + $I_L19888_645) = $k_ext_tot_cloud_WR0_R19
19895.                         $x_S62 = ( dim_char_ice(1 + $I_L19889_576, id_ct + $I_L19888_645) * 1.0/$SC_ice_cloud_parameter_I4 )
19896.                         k_ext_scat_cloud(1 + $I_L19889_576, id_ct + $I_L19888_645) = ( $k_ext_tot_cloud_WR0_R19 * ( 1.0 + -( $SC_ice_cloud_parameter_I8 + $x_S62 * ( $SC_ice_cloud_parameter_I7 + $x_S62 * ( $SC_ice_cloud_parameter_I6 + $x_S62 * $SC_ice_cloud_parameter_I5 ) ) ) ) )
19902.                         $x_S63 = ( dim_char_ice(1 + $I_L19889_576, id_ct + $I_L19888_645) * 1.0/$SC_ice_cloud_parameter_I12 )
19903.                         asymmetry_process(1 + $I_L19889_576, id_ct + $I_L19888_645) = ( $SC_ice_cloud_parameter_I9 + $x_S63 * ( $SC_ice_cloud_parameter_I15 + $x_S63 * ( $SC_ice_cloud_parameter_I14 + $x_S63 * $SC_ice_cloud_parameter_I13 ) ) )
19907.                         phase_fnc_cloud(1 + $I_L19889_576, id_ct + $I_L19888_645, 1) = ( $k_ext_tot_cloud_WR0_R19 * ( 1.0 + -( $SC_ice_cloud_parameter_I8 + $x_S62 * ( $SC_ice_cloud_parameter_I7 + $x_S62 * ( $SC_ice_cloud_parameter_I6 + $x_S62 * $SC_ice_cloud_parameter_I5 ) ) ) ) ) * ( $SC_ice_cloud_parameter_I9 + $x_S63 * ( $SC_ice_cloud_parameter_I15 + $x_S63 * ( $SC_ice_cloud_parameter_I14 + $x_S63 * $SC_ice_cloud_parameter_I13 ) ) )
19909.                         $I_L19889_576 = 1 + $I_L19889_576
19889.                         if ( $I_L19889_576 >= nd_profile ) exit
19889.                      enddo
19910.                      $I_L19888_645 = 1 + $I_L19888_645
19909.                      if ( $I_L19888_645 >= nd_layer + -id_ct + 1 ) exit
19909.                   enddo
19909.                endif
19909.             endif
19920.             if ( -2 + n_order_phase >= 0 ) then
19922.                if ( nd_layer + -id_ct >= 0 ) then
19923.                   if ( nd_profile > 0 ) then
19922.                      $I_L19922_733 = 0
19922.                      do
19920.                         $I_L19920_727 = 0
19920.                         do
19923.                            $I_L19923_721 = 0
19923.                            do
19922.                               $I_L19922_698 = 0
19922. !dir$ shortloop16
19922. !dir$ blocking_size( 8, 8 )
19922.                               do
19920.                                  $I_L19920_689 = 0
19920.                                  if ( min( -1 + n_order_phase, 8 + 8 * $I_L19920_727 ) + -8 * $I_L19920_727 >= 4 ) then
19920.                                     $I_L19920_746 = 0
19920. !dir$ shortloop16
19920. !dir$ blocking_size( 8, 8 )
19920.                                     do
19923.                                        $I_L19923_598 = 0
19923. !dir$ ivdep
19923. !dir$ blocking_size( 256, 256 )
19923.                                        do
19924.                                           phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 2) = phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 1) * asymmetry_process($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733)
19924.                                           phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 3) = phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 2) * asymmetry_process($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733)
19924.                                           phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 4) = phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 3) * asymmetry_process($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733)
19924.                                           phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 5) = phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, 8 * $I_L19920_727 + 4 * $I_L19920_746 + 4) * asymmetry_process($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733)
19923.                                           $I_L19923_598 = 1 + $I_L19923_598
19923.                                           if ( $I_L19923_598 >= min( nd_profile, 256 + 256 * $I_L19923_721 ) + -256 * $I_L19923_721 ) exit
19923.                                        enddo
19920.                                        $I_L19920_746 = 1 + $I_L19920_746
19920.                                        if ( $I_L19920_746 >= _rsh( min( -1 + n_order_phase, 8 + 8 * $I_L19920_727 ) + -8 * $I_L19920_727, 2 ) ) exit
19920.                                     enddo
19920.                                     $I_L19920_689 = and( 0xfffffffffffffffcUL, min( -1 + n_order_phase, 8 + 8 * $I_L19920_727 ) + -8 * $I_L19920_727 )
19920.                                  endif
19920.                                  if ( $I_L19920_689 < min( -1 + n_order_phase, 8 + 8 * $I_L19920_727 ) + -8 * $I_L19920_727 ) then
19920.                                     $I_L19920_741 = 0
19920. !dir$ shortloop16
19920. !dir$ blocking_size( 8, 8 )
19920.                                     do
19923.                                        $I_L19923_598 = 0
19923. !dir$ ivdep
19923. !dir$ blocking_size( 256, 256 )
19923.                                        do
19924.                                           phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, $I_L19920_689 + $I_L19920_741 + 8 * $I_L19920_727 + 2) = phase_fnc_cloud($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733, $I_L19920_689 + $I_L19920_741 + 8 * $I_L19920_727 + 1) * asymmetry_process($I_L19923_598 + 256 * $I_L19923_721 + 1, id_ct + $I_L19922_698 + 8 * $I_L19922_733)
19923.                                           $I_L19923_598 = 1 + $I_L19923_598
19923.                                           if ( $I_L19923_598 >= min( nd_profile, 256 + 256 * $I_L19923_721 ) + -256 * $I_L19923_721 ) exit
19923.                                        enddo
19920.                                        $I_L19920_741 = 1 + $I_L19920_741
19920.                                        if ( $I_L19920_741 >= min( -1 + n_order_phase, 8 + 8 * $I_L19920_727 ) + -$I_L19920_689 + -8 * $I_L19920_727 ) exit
19920.                                     enddo
19920.                                  endif
19922.                                  $I_L19922_698 = 1 + $I_L19922_698
19926.                                  if ( $I_L19922_698 >= min( nd_layer + -id_ct + 1, 8 + 8 * $I_L19922_733 ) + -8 * $I_L19922_733 ) exit
19926.                               enddo
19923.                               $I_L19923_721 = 1 + $I_L19923_721
19923.                               if ( $I_L19923_721 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
19923.                            enddo
19920.                            $I_L19920_727 = 1 + $I_L19920_727
19927.                            if ( $I_L19920_727 >= 1 + max( 0, -1 + _rsh( 6 + n_order_phase, 3 ) ) ) exit
19927.                         enddo
19922.                         $I_L19922_733 = 1 + $I_L19922_733
19922.                         if ( $I_L19922_733 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_ct + 8, 3 ) ) ) exit
19922.                      enddo
19922.                   endif
19922.                endif
19922.             endif
19930.             if ( l_rescale ) then
19936.                if ( i_parametrization_ice == 9 ) then
19938.                   if ( nd_layer + -id_ct >= 0 ) then
19939.                      if ( nd_profile > 0 ) then
19938.                         $I_L19938_663 = 0
19938.                         do
19939.                            $I_L19939_603 = 0
19939. !dir$ ivdep
19939.                            do
19940.                               forward_scatter_cloud(1 + $I_L19939_603, id_ct + $I_L19938_663) = min( forward_scatter_cloud(1 + $I_L19939_603, id_ct + $I_L19938_663), k_ext_scat_cloud(1 + $I_L19939_603, id_ct + $I_L19938_663) * asymmetry_process(1 + $I_L19939_603, id_ct + $I_L19938_663) ** ( -1 + n_order_forward ) )
19944.                               $I_L19939_603 = 1 + $I_L19939_603
19939.                               if ( $I_L19939_603 >= nd_profile ) exit
19939.                            enddo
19945.                            $I_L19938_663 = 1 + $I_L19938_663
19944.                            if ( $I_L19938_663 >= nd_layer + -id_ct + 1 ) exit
19944.                         enddo
19944.                      endif
19944.                   endif
19946.                else if ( nd_layer + -id_ct >= 0 ) then
19949.                   if ( nd_profile > 0 ) then
19948.                      $I_L19948_661 = 0
19948.                      do
19949.                         $I_L19949_601 = 0
19949. !dir$ ivdep
19949.                         do
19950.                            forward_scatter_cloud(1 + $I_L19949_601, id_ct + $I_L19948_661) = k_ext_scat_cloud(1 + $I_L19949_601, id_ct + $I_L19948_661) * asymmetry_process(1 + $I_L19949_601, id_ct + $I_L19948_661) ** n_order_forward
19953.                            $I_L19949_601 = 1 + $I_L19949_601
19949.                            if ( $I_L19949_601 >= nd_profile ) exit
19949.                         enddo
19954.                         $I_L19948_661 = 1 + $I_L19948_661
19953.                         if ( $I_L19948_661 >= nd_layer + -id_ct + 1 ) exit
19953.                      enddo
19953.                   endif
19953.                endif
19953.             endif
19959.             if ( l_solar_phf ) then
19960.                if ( n_layer + -n_cloud_top >= 0 ) then
19962.                   if ( n_direction > 0 ) then
19976.                      if ( -2 + n_order_phase_solar >= 0 ) then
19960.                         $I_L19960_713 = 0
19960. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
19960.                         do
19962.                            $SCA_n_cloud_profile_I58 = n_cloud_profile(n_cloud_top + $I_L19960_713)
19966.                            if ( $SCA_n_cloud_profile_I58 > 0 ) then
19962.                               $I_L19962_701 = 0
19962.                               do
19966.                                  $I_L19966_605 = 0
19966. !dir$ ivdep
19966.                                  do
19967.                                     $l_S74 = i_cloud_profile(1 + $I_L19966_605, n_cloud_top + $I_L19960_713)
19970.                                     p_legendre_ls_m1($l_S74) = 1.0
19971.                                     $SVU_P13 = cos_sol_view($l_S74, 1 + $I_L19962_701)
19971.                                     p_legendre_ls($l_S74) = $SVU_P13
19972.                                     $SVU_P14 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_713) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_713)
19972.                                     ks_phf($l_S74) = $SVU_P14
19973.                                     phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_713, 1 + $I_L19962_701) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_713) + $SVU_P14 * $SVU_P13 * 3.0
19975.                                     $I_L19966_605 = 1 + $I_L19966_605
19966.                                     if ( $I_L19966_605 >= $SCA_n_cloud_profile_I58 ) exit
19966.                                  enddo
19976.                                  $I_L19976_665 = 0
19976.                                  do
19978.                                     $cnst1_S79 = 1.0 + -( 1.0/( ( 2 + $I_L19976_665 ) ) )
19979.                                     $I_L19979_607 = 0
19979. !dir$ unroll 2
19979.                                     do
19980.                                        $l_S78 = i_cloud_profile(1 + $I_L19979_607, n_cloud_top + $I_L19960_713)
19981.                                        $SVU_P15 = p_legendre_ls($l_S78)
19982.                                        $SCF_P23 = ( 1.0 + $cnst1_S79 ) * $SVU_P15 * cos_sol_view($l_S78, 1 + $I_L19962_701)
19982.                                        $SVU_P27 = -( $cnst1_S79 * p_legendre_ls_m1($l_S78) ) + $SCF_P23
19982.                                        p_legendre_ls($l_S78) = $SVU_P27
19985.                                        p_legendre_ls_m1($l_S78) = $SVU_P15
19986.                                        ks_phf($l_S78) = ks_phf($l_S78) * asymmetry_process($l_S78, n_cloud_top + $I_L19960_713)
19987.                                        phase_fnc_solar_cloud($l_S78, n_cloud_top + $I_L19960_713, 1 + $I_L19962_701) = phase_fnc_solar_cloud($l_S78, n_cloud_top + $I_L19960_713, 1 + $I_L19962_701) + ks_phf($l_S78) * $SVU_P27 * real( 5 + 2 * $I_L19976_665, 8 )
19991.                                        $I_L19979_607 = 1 + $I_L19979_607
19979.                                        if ( $I_L19979_607 >= $SCA_n_cloud_profile_I58 ) exit
19979.                                     enddo
19992.                                     $I_L19976_665 = 1 + $I_L19976_665
19991.                                     if ( $I_L19976_665 >= -1 + n_order_phase_solar ) exit
19991.                                  enddo
19993.                                  $I_L19962_701 = 1 + $I_L19962_701
19992.                                  if ( $I_L19962_701 >= n_direction ) exit
19992.                               enddo
19992.                            endif
19997.                            if ( l_rescale ) then
19998.                               if ( $SCA_n_cloud_profile_I58 > 0 ) then
19998.                                  $I_L19998_609 = 0
19998. !dir$ ivdep
19998. !dir$ loop_info (automatic) cache_nt( ks_phf, asymmetry_process, i_cloud_profile, forward_solar_cloud )
19998.                                  do
19999.                                     $l_S82 = i_cloud_profile(1 + $I_L19998_609, n_cloud_top + $I_L19960_713)
20000.                                     forward_solar_cloud($l_S82, n_cloud_top + $I_L19960_713) = ks_phf($l_S82) * asymmetry_process($l_S82, n_cloud_top + $I_L19960_713)
20002.                                     $I_L19998_609 = 1 + $I_L19998_609
19998.                                     if ( $I_L19998_609 >= $SCA_n_cloud_profile_I58 ) exit
19998.                                  enddo
19998.                               endif
19998.                            endif
20005.                            $I_L19960_713 = 1 + $I_L19960_713
20003.                            if ( $I_L19960_713 >= n_layer + -n_cloud_top + 1 ) exit
20003.                         enddo
20003.                      else if ( l_rescale ) then
19960.                         $I_L19960_705 = 0
19960. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
19960.                         do
19962.                            $SCA_n_cloud_profile_I59 = n_cloud_profile(n_cloud_top + $I_L19960_705)
19966.                            if ( $SCA_n_cloud_profile_I59 > 0 ) then
19962.                               $I_L19962_675 = 0
19962.                               do
19966.                                  $I_L19966_627 = 0
19966. !dir$ ivdep
19966.                                  do
19967.                                     $l_S74 = i_cloud_profile(1 + $I_L19966_627, n_cloud_top + $I_L19960_705)
19971.                                     $SVU_P16 = cos_sol_view($l_S74, 1 + $I_L19962_675)
19972.                                     $SVU_P17 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_705) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_705)
19972.                                     ks_phf($l_S74) = $SVU_P17
19973.                                     phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_705, 1 + $I_L19962_675) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_705) + $SVU_P17 * $SVU_P16 * 3.0
19975.                                     $I_L19966_627 = 1 + $I_L19966_627
19966.                                     if ( $I_L19966_627 >= $SCA_n_cloud_profile_I59 ) exit
19966.                                  enddo
19993.                                  $I_L19962_675 = 1 + $I_L19962_675
19992.                                  if ( $I_L19962_675 >= n_direction ) exit
19992.                               enddo
19998.                               $I_L19998_629 = 0
19998. !dir$ ivdep
19998.                               do
19999.                                  $l_S82 = i_cloud_profile(1 + $I_L19998_629, n_cloud_top + $I_L19960_705)
20000.                                  forward_solar_cloud($l_S82, n_cloud_top + $I_L19960_705) = ks_phf($l_S82) * asymmetry_process($l_S82, n_cloud_top + $I_L19960_705)
20002.                                  $I_L19998_629 = 1 + $I_L19998_629
19998.                                  if ( $I_L19998_629 >= $SCA_n_cloud_profile_I59 ) exit
19998.                               enddo
19998.                            endif
20005.                            $I_L19960_705 = 1 + $I_L19960_705
20003.                            if ( $I_L19960_705 >= n_layer + -n_cloud_top + 1 ) exit
20003.                         enddo
20003.                      else
19960.                         $I_L19960_707 = 0
19960. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
19960.                         do
19962.                            $SCA_n_cloud_profile_I60 = n_cloud_profile(n_cloud_top + $I_L19960_707)
19966.                            if ( $SCA_n_cloud_profile_I60 > 0 ) then
19962.                               $I_L19962_677 = 0
19962.                               if ( n_direction >= 4 ) then
19962.                                  $I_L19962_748 = 0
19962. !dir$ blocking_size( 0, 0 )
19962.                                  do
19966.                                     $I_L19966_631 = 0
19966. !dir$ ivdep
19966. !dir$ blocking_size( 0, 0 )
19966.                                     do
19967.                                        $l_S74 = i_cloud_profile(1 + $I_L19966_631, n_cloud_top + $I_L19960_707)
19971.                                        $SVU_P18 = cos_sol_view($l_S74, 1 + 4 * $I_L19962_748)
19972.                                        $SVU_P19 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_707)
19973.                                        phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_707, 1 + 4 * $I_L19962_748) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) + $SVU_P19 * $SVU_P18 * 3.0
19967.                                        $l_S74 = i_cloud_profile(1 + $I_L19966_631, n_cloud_top + $I_L19960_707)
19971.                                        $SVU_P18 = cos_sol_view($l_S74, 2 + 4 * $I_L19962_748)
19972.                                        $SVU_P19 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_707)
19973.                                        phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_707, 2 + 4 * $I_L19962_748) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) + $SVU_P19 * $SVU_P18 * 3.0
19967.                                        $l_S74 = i_cloud_profile(1 + $I_L19966_631, n_cloud_top + $I_L19960_707)
19971.                                        $SVU_P18 = cos_sol_view($l_S74, 3 + 4 * $I_L19962_748)
19972.                                        $SVU_P19 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_707)
19973.                                        phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_707, 3 + 4 * $I_L19962_748) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) + $SVU_P19 * $SVU_P18 * 3.0
19967.                                        $l_S74 = i_cloud_profile(1 + $I_L19966_631, n_cloud_top + $I_L19960_707)
19971.                                        $SVU_P18 = cos_sol_view($l_S74, 4 + 4 * $I_L19962_748)
19972.                                        $SVU_P19 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_707)
19973.                                        phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_707, 4 + 4 * $I_L19962_748) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) + $SVU_P19 * $SVU_P18 * 3.0
19975.                                        $I_L19966_631 = 1 + $I_L19966_631
19966.                                        if ( $I_L19966_631 >= $SCA_n_cloud_profile_I60 ) exit
19966.                                     enddo
19993.                                     $I_L19962_748 = 1 + $I_L19962_748
19992.                                     if ( $I_L19962_748 >= _rsh( n_direction, 2 ) ) exit
19992.                                  enddo
19993.                                  $I_L19962_677 = and( 0xfffffffffffffffcUL, n_direction )
19993.                               endif
19962.                               if ( $I_L19962_677 < n_direction ) then
19962.                                  $I_L19962_735 = 0
19962. !dir$ blocking_size( 0, 0 )
19962.                                  do
19966.                                     $I_L19966_631 = 0
19966. !dir$ ivdep
19966. !dir$ blocking_size( 0, 0 )
19966.                                     do
19967.                                        $l_S74 = i_cloud_profile(1 + $I_L19966_631, n_cloud_top + $I_L19960_707)
19971.                                        $SVU_P18 = cos_sol_view($l_S74, $I_L19962_677 + $I_L19962_735 + 1)
19972.                                        $SVU_P19 = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) * asymmetry_process($l_S74, n_cloud_top + $I_L19960_707)
19973.                                        phase_fnc_solar_cloud($l_S74, n_cloud_top + $I_L19960_707, $I_L19962_677 + $I_L19962_735 + 1) = k_ext_scat_cloud($l_S74, n_cloud_top + $I_L19960_707) + $SVU_P19 * $SVU_P18 * 3.0
19975.                                        $I_L19966_631 = 1 + $I_L19966_631
19966.                                        if ( $I_L19966_631 >= $SCA_n_cloud_profile_I60 ) exit
19966.                                     enddo
19993.                                     $I_L19962_735 = 1 + $I_L19962_735
19992.                                     if ( $I_L19962_735 >= n_direction + -$I_L19962_677 ) exit
19992.                                  enddo
19992.                               endif
19992.                            endif
20005.                            $I_L19960_707 = 1 + $I_L19960_707
20003.                            if ( $I_L19960_707 >= n_layer + -n_cloud_top + 1 ) exit
20003.                         enddo
20003.                      endif
20003.                   else if ( l_rescale ) then
19960.                      $I_L19960_673 = 0
19960.                      do
19998.                         $t_S80 = n_cloud_profile(n_cloud_top + $I_L19960_673)
19998.                         if ( $t_S80 > 0 ) then
19998.                            $I_L19998_625 = 0
19998. !dir$ ivdep
19998.                            do
19999.                               $l_S82 = i_cloud_profile(1 + $I_L19998_625, n_cloud_top + $I_L19960_673)
20000.                               forward_solar_cloud($l_S82, n_cloud_top + $I_L19960_673) = ks_phf($l_S82) * asymmetry_process($l_S82, n_cloud_top + $I_L19960_673)
20002.                               $I_L19998_625 = 1 + $I_L19998_625
19998.                               if ( $I_L19998_625 >= $t_S80 ) exit
19998.                            enddo
19998.                         endif
20005.                         $I_L19960_673 = 1 + $I_L19960_673
20003.                         if ( $I_L19960_673 >= n_layer + -n_cloud_top + 1 ) exit
20003.                      enddo
20003.                   endif
20003.                endif
20003.             endif
20003.          endif
20003.       endif
20195.       if ( i_parametrization_ice == 3 ) then
20197.          call prsc_opt_prop( ierr, n_profile, n_cloud_top, n_layer, l_rescale, n_order_forward, l_henyey_greenstein_pf, n_order_phase, p(1, 1), density(1, 1), n_opt_level_cloud_prsc, ice_pressure_prsc(1, 1), ice_absorption_prsc(1, 1), ice_scattering_prsc(1, 1), ice_phase_fnc_prsc(1, 1, 1), k_ext_tot_cloud(1, id_ct), k_ext_scat_cloud(1, id_ct), phase_fnc_cloud(1, id_ct, 1), forward_scatter_cloud(1, id_ct), forward_solar_cloud(1, id_ct), l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view(1, 1), phase_fnc_solar_cloud(1, id_ct, 1), nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_layer, nd_direction, nd_profile_prsc, nd_opt_level_prsc, nd_phase_term, nd_max_order )
20217.          if ( n_layer + -n_cloud_top >= 0 ) then
20217.             $I_L20217_669 = 0
20217.             do
20218.                $t_S84 = n_cloud_profile(n_cloud_top + $I_L20217_669)
20218.                if ( $t_S84 > 0 ) then
20218.                   $I_L20218_617 = 0
20218. !dir$ ivdep
20218.                   do
20219.                      $l_S86 = i_cloud_profile(1 + $I_L20218_617, n_cloud_top + $I_L20217_669)
20220.                      k_ext_tot_cloud($l_S86, n_cloud_top + $I_L20217_669) = _vu_plus( k_ext_tot_cloud($l_S86, n_cloud_top + $I_L20217_669), k_ext_scat_cloud($l_S86, n_cloud_top + $I_L20217_669) )
20222.                      $I_L20218_617 = 1 + $I_L20218_617
20218.                      if ( $I_L20218_617 >= $t_S84 ) exit
20218.                   enddo
20218.                endif
20223.                $I_L20217_669 = 1 + $I_L20217_669
20222.                if ( $I_L20217_669 >= n_layer + -n_cloud_top + 1 ) exit
20222.             enddo
20222.          endif
20222.       endif
20228.       if ( i_parametrization_ice == 1 ) then
20225.          goto 40
20228.       else if ( i_parametrization_ice == 6 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 7 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 4 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 5 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 9 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 10 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 11 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice == 12 ) then
20228.          goto 40
20228.       else if ( i_parametrization_ice /= 3 ) then
20239.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$884,  _substr(t$883,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An invalid parametrization of ice crystals has been used.', 0x800600000000L ) ) )
20241.          ierr = 1
19416.          _free( t$3025 )
19416.       else
19416.    40    continue
19416.          _free( t$3025 )
19416.       endif
20249.       return
20249.       end
20249.       
20681.       
20681.       subroutine opt_prop_water_cloud( ierr, n_profile, n_layer, n_cloud_top, n_cloud_profile, i_cloud_profile, n_order_phase, l_rescale, n_order_forward, l_henyey_greenstein_pf, l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view, i_parametrization_drop, cloud_parameter, liq_water_mass_frac, radius_effect, p, density, n_opt_level_cloud_prsc, drop_pressure_prsc, drop_absorption_prsc, drop_scattering_prsc, drop_phase_fnc_prsc, k_ext_tot_cloud, k_ext_scat_cloud, phase_fnc_cloud, forward_scatter_cloud, forward_solar_cloud, phase_fnc_solar_cloud, nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_direction, nd_phase_term, nd_max_order, nd_cloud_parameter, nd_profile_prsc, nd_opt_level_prsc )
20275.       t$889 = id_ct
20275.       t$890 = nd_layer
20275.       t$3040 = nd_layer + -id_ct + 1
20362.       t$3041 = _zla( 0, nd_layer + -id_ct + 1 )
20275.       t$891 = nd_profile
20364.       t$3042 = _zla( 0, nd_profile )
20275.       t$3043 = _zla( 0, nd_profile )
20275.       t$3044 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
20275.       t$892 = nd_radiance_profile
20275.       t$893 = nd_direction
20380.       t$3045 = _zla( 0, nd_radiance_profile )
20275.       t$3046 = _zla( 0, nd_radiance_profile )
20380.       t$3047 = _zla( 0, nd_direction )
20275.       t$3048 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
20275.       t$894 = nd_cloud_parameter
20385.       t$3049 = _zla( 0, nd_cloud_parameter )
20393.       t$3050 = _zla( 0, nd_layer )
20275.       t$3051 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
20275.       t$895 = nd_profile_prsc
20275.       t$896 = nd_opt_level_prsc
20397.       t$3052 = _zla( 0, nd_profile_prsc )
20275.       t$3053 = _zla( 0, nd_profile_prsc )
20397.       t$3054 = _zla( 0, nd_opt_level_prsc )
20275.       t$3055 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
20275.       t$897 = nd_phase_term
20275.       t$3056 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
20403.       t$3057 = _zla( 0, nd_phase_term )
20275.       t$3058 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc ) * _zla( 0, nd_phase_term )
20275.       t$898 = nd_max_order
20275.       t$3059 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
20412.       t$3060 = _zla( 0, nd_max_order )
20275.       t$3061 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
20275.       t$3062 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
20275.       t$3063 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_ct + 1 )
20435.       t$3066 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
20448.       t$3067 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
20448.       t$3069 = 8 * _zla( 0, nd_radiance_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
20442.       t$3070 = 8 * _zla( 0, nd_radiance_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
20442.       t$3072 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 16 * _zla( 0, nd_radiance_profile )
20444.       t$3073 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 16 * _zla( 0, nd_radiance_profile )
20444.       t$3075 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 24 * _zla( 0, nd_radiance_profile )
20446.       t$3076 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 24 * _zla( 0, nd_radiance_profile )
20446.       t$3078 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 32 * _zla( 0, nd_radiance_profile )
20275.       t$3064 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 32 * _zla( 0, nd_radiance_profile ) ), 8 )
20435.       t$3065 = t$3064
20448.       t$3068 = t$3064 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
20442.       t$3071 = t$3064 + 8 * _zla( 0, nd_radiance_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8
20444.       t$3074 = t$3064 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 16 * _zla( 0, nd_radiance_profile )
20446.       t$3077 = t$3064 + _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * 8 + 24 * _zla( 0, nd_radiance_profile )
20460.       if ( i_parametrization_drop == 1 ) then
20435.          goto 10
20460.       else if ( i_parametrization_drop == 2 ) then
20460.          goto 10
20460.       else if ( i_parametrization_drop == 5 ) then
20460.    10    continue
20473.          if ( i_parametrization_drop == 1 ) then
20476.             if ( nd_layer + -id_ct >= 0 ) then
20484.                $SC_cloud_parameter_I5 = cloud_parameter(5)
20484.                $SC_cloud_parameter_I4 = cloud_parameter(6)
20481.                $SC_cloud_parameter_I3 = cloud_parameter(4)
20481.                $SC_cloud_parameter_I2 = cloud_parameter(3)
20478.                $SC_cloud_parameter_I1 = cloud_parameter(1)
20478.                $SC_cloud_parameter_I0 = cloud_parameter(2)
20477.                if ( nd_profile > 0 ) then
20476.                   $I_L20476_249 = 0
20476.                   do
20477.                      $I_L20477_222 = 0
20477. !dir$ ivdep
20477.                      do
20478.                         $k_ext_tot_cloud_WR0_R0 = liq_water_mass_frac(1 + $I_L20477_222, id_ct + $I_L20476_249) * ( $SC_cloud_parameter_I1 + ( $SC_cloud_parameter_I0 * 1.0/radius_effect(1 + $I_L20477_222, id_ct + $I_L20476_249) ) )
20478.                         k_ext_tot_cloud(1 + $I_L20477_222, id_ct + $I_L20476_249) = $k_ext_tot_cloud_WR0_R0
20481.                         $k_ext_scat_cloud_WR0_R1 = $k_ext_tot_cloud_WR0_R0 * ( -( $SC_cloud_parameter_I3 * radius_effect(1 + $I_L20477_222, id_ct + $I_L20476_249) ) + -$SC_cloud_parameter_I2 + 1.0 )
20481.                         k_ext_scat_cloud(1 + $I_L20477_222, id_ct + $I_L20476_249) = $k_ext_scat_cloud_WR0_R1
20484.                         $asymmetry_process_WR0_R2 = $SC_cloud_parameter_I5 + $SC_cloud_parameter_I4 * radius_effect(1 + $I_L20477_222, id_ct + $I_L20476_249)
20484.                         asymmetry_process(1 + $I_L20477_222, id_ct + $I_L20476_249) = $asymmetry_process_WR0_R2
20487.                         phase_fnc_cloud(1 + $I_L20477_222, id_ct + $I_L20476_249, 1) = $k_ext_scat_cloud_WR0_R1 * $asymmetry_process_WR0_R2
20489.                         $I_L20477_222 = 1 + $I_L20477_222
20477.                         if ( $I_L20477_222 >= nd_profile ) exit
20477.                      enddo
20490.                      $I_L20476_249 = 1 + $I_L20476_249
20489.                      if ( $I_L20476_249 >= nd_layer + -id_ct + 1 ) exit
20489.                   enddo
20489.                endif
20489.             endif
20493.          else if ( i_parametrization_drop == 2 ) then
20497.             if ( nd_layer + -id_ct >= 0 ) then
20506.                $SC_cloud_parameter_I8 = cloud_parameter(7)
20506.                $SC_cloud_parameter_I7 = cloud_parameter(8)
20506.                $SC_cloud_parameter_I6 = cloud_parameter(9)
20502.                $SC_cloud_parameter_I5 = cloud_parameter(5)
20502.                $SC_cloud_parameter_I4 = cloud_parameter(6)
20502.                $SC_cloud_parameter_I3 = cloud_parameter(4)
20499.                $SC_cloud_parameter_I2 = cloud_parameter(3)
20499.                $SC_cloud_parameter_I1 = cloud_parameter(1)
20499.                $SC_cloud_parameter_I0 = cloud_parameter(2)
20498.                if ( nd_profile > 0 ) then
20497.                   $I_L20497_247 = 0
20497.                   do
20498.                      $I_L20498_220 = 0
20498. !dir$ ivdep
20498.                      do
20499.                         $k_ext_tot_cloud_WR0_R3 = liq_water_mass_frac(1 + $I_L20498_220, id_ct + $I_L20497_247) * ( $SC_cloud_parameter_I1 + $SC_cloud_parameter_I0 * _expn( $SC_cloud_parameter_I2 * log( radius_effect(1 + $I_L20498_220, id_ct + $I_L20497_247) ) ) )
20499.                         k_ext_tot_cloud(1 + $I_L20498_220, id_ct + $I_L20497_247) = $k_ext_tot_cloud_WR0_R3
20502.                         $k_ext_scat_cloud_WR0_R4 = $k_ext_tot_cloud_WR0_R3 * ( -( $SC_cloud_parameter_I5 * _expn( $SC_cloud_parameter_I4 * log( radius_effect(1 + $I_L20498_220, id_ct + $I_L20497_247) ) ) ) + -$SC_cloud_parameter_I3 + 1.0 )
20502.                         k_ext_scat_cloud(1 + $I_L20498_220, id_ct + $I_L20497_247) = $k_ext_scat_cloud_WR0_R4
20506.                         $asymmetry_process_WR0_R5 = $SC_cloud_parameter_I8 + $SC_cloud_parameter_I7 * _expn( $SC_cloud_parameter_I6 * log( radius_effect(1 + $I_L20498_220, id_ct + $I_L20497_247) ) )
20506.                         asymmetry_process(1 + $I_L20498_220, id_ct + $I_L20497_247) = $asymmetry_process_WR0_R5
20509.                         phase_fnc_cloud(1 + $I_L20498_220, id_ct + $I_L20497_247, 1) = $k_ext_scat_cloud_WR0_R4 * $asymmetry_process_WR0_R5
20511.                         $I_L20498_220 = 1 + $I_L20498_220
20498.                         if ( $I_L20498_220 >= nd_profile ) exit
20498.                      enddo
20512.                      $I_L20497_247 = 1 + $I_L20497_247
20511.                      if ( $I_L20497_247 >= nd_layer + -id_ct + 1 ) exit
20511.                   enddo
20511.                endif
20511.             endif
20511.          else if ( i_parametrization_drop == 5 ) then
20519.             if ( nd_layer + -id_ct >= 0 ) then
20537.                $SC_cloud_parameter_I15 = cloud_parameter(12)
20537.                $SC_cloud_parameter_I14 = cloud_parameter(13)
20537.                $SC_cloud_parameter_I13 = cloud_parameter(14)
20537.                $SC_cloud_parameter_I12 = cloud_parameter(15)
20537.                $SC_cloud_parameter_I11 = cloud_parameter(16)
20529.                $SC_cloud_parameter_I10 = cloud_parameter(10)
20529.                $SC_cloud_parameter_I9 = cloud_parameter(11)
20529.                $SC_cloud_parameter_I8 = cloud_parameter(7)
20529.                $SC_cloud_parameter_I7 = cloud_parameter(8)
20529.                $SC_cloud_parameter_I6 = cloud_parameter(9)
20521.                $SC_cloud_parameter_I5 = cloud_parameter(5)
20521.                $SC_cloud_parameter_I4 = cloud_parameter(6)
20521.                $SC_cloud_parameter_I3 = cloud_parameter(4)
20521.                $SC_cloud_parameter_I2 = cloud_parameter(3)
20521.                $SC_cloud_parameter_I1 = cloud_parameter(1)
20521.                $SC_cloud_parameter_I0 = cloud_parameter(2)
20520.                if ( nd_profile > 0 ) then
20519.                   $I_L20519_245 = 0
20519.                   do
20520.                      $I_L20520_218 = 0
20520. !dir$ ivdep
20520.                      do
20521.                         $k_ext_tot_cloud_WR0_R6 = ( liq_water_mass_frac(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I1 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I0 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * $SC_cloud_parameter_I2 ) ) * 1.0/( 1.0 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I3 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I5 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * $SC_cloud_parameter_I4 ) ) ) )
20521.                         k_ext_tot_cloud(1 + $I_L20520_218, id_ct + $I_L20519_245) = $k_ext_tot_cloud_WR0_R6
20529.                         $k_ext_scat_cloud_WR0_R7 = $k_ext_tot_cloud_WR0_R6 * ( 1.0 + -( ( $SC_cloud_parameter_I8 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I7 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * $SC_cloud_parameter_I6 ) ) * 1.0/( 1.0 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I10 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * $SC_cloud_parameter_I9 ) ) ) )
20529.                         k_ext_scat_cloud(1 + $I_L20520_218, id_ct + $I_L20519_245) = $k_ext_scat_cloud_WR0_R7
20537.                         $asymmetry_process_WR0_R8 = ( ( $SC_cloud_parameter_I15 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I14 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * $SC_cloud_parameter_I13 ) ) * 1.0/( 1.0 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * ( $SC_cloud_parameter_I12 + radius_effect(1 + $I_L20520_218, id_ct + $I_L20519_245) * $SC_cloud_parameter_I11 ) ) )
20537.                         asymmetry_process(1 + $I_L20520_218, id_ct + $I_L20519_245) = $asymmetry_process_WR0_R8
20544.                         phase_fnc_cloud(1 + $I_L20520_218, id_ct + $I_L20519_245, 1) = $k_ext_scat_cloud_WR0_R7 * $asymmetry_process_WR0_R8
20546.                         $I_L20520_218 = 1 + $I_L20520_218
20520.                         if ( $I_L20520_218 >= nd_profile ) exit
20520.                      enddo
20547.                      $I_L20519_245 = 1 + $I_L20519_245
20546.                      if ( $I_L20519_245 >= nd_layer + -id_ct + 1 ) exit
20546.                   enddo
20546.                endif
20546.             endif
20546.          endif
20557.          if ( -2 + n_order_phase >= 0 ) then
20559.             if ( nd_layer + -id_ct >= 0 ) then
20560.                if ( nd_profile > 0 ) then
20559.                   $I_L20559_281 = 0
20559.                   do
20557.                      $I_L20557_279 = 0
20557.                      do
20560.                         $I_L20560_277 = 0
20560.                         do
20559.                            $I_L20559_266 = 0
20559. !dir$ shortloop16
20559. !dir$ blocking_size( 8, 8 )
20559.                            do
20557.                               $I_L20557_263 = 0
20557.                               if ( min( -1 + n_order_phase, 8 + 8 * $I_L20557_279 ) + -8 * $I_L20557_279 >= 4 ) then
20557.                                  $I_L20557_289 = 0
20557. !dir$ shortloop16
20557. !dir$ blocking_size( 8, 8 )
20557.                                  do
20560.                                     $I_L20560_224 = 0
20560. !dir$ ivdep
20560. !dir$ blocking_size( 256, 256 )
20560.                                     do
20561.                                        phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 2) = phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 1) * asymmetry_process($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281)
20561.                                        phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 3) = phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 2) * asymmetry_process($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281)
20561.                                        phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 4) = phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 3) * asymmetry_process($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281)
20561.                                        phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 5) = phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, 8 * $I_L20557_279 + 4 * $I_L20557_289 + 4) * asymmetry_process($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281)
20560.                                        $I_L20560_224 = 1 + $I_L20560_224
20560.                                        if ( $I_L20560_224 >= min( nd_profile, 256 + 256 * $I_L20560_277 ) + -256 * $I_L20560_277 ) exit
20560.                                     enddo
20557.                                     $I_L20557_289 = 1 + $I_L20557_289
20557.                                     if ( $I_L20557_289 >= _rsh( min( -1 + n_order_phase, 8 + 8 * $I_L20557_279 ) + -8 * $I_L20557_279, 2 ) ) exit
20557.                                  enddo
20557.                                  $I_L20557_263 = and( 0xfffffffffffffffcUL, min( -1 + n_order_phase, 8 + 8 * $I_L20557_279 ) + -8 * $I_L20557_279 )
20557.                               endif
20557.                               if ( $I_L20557_263 < min( -1 + n_order_phase, 8 + 8 * $I_L20557_279 ) + -8 * $I_L20557_279 ) then
20557.                                  $I_L20557_286 = 0
20557. !dir$ shortloop16
20557. !dir$ blocking_size( 8, 8 )
20557.                                  do
20560.                                     $I_L20560_224 = 0
20560. !dir$ ivdep
20560. !dir$ blocking_size( 256, 256 )
20560.                                     do
20561.                                        phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, $I_L20557_263 + $I_L20557_286 + 8 * $I_L20557_279 + 2) = phase_fnc_cloud($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281, $I_L20557_263 + $I_L20557_286 + 8 * $I_L20557_279 + 1) * asymmetry_process($I_L20560_224 + 256 * $I_L20560_277 + 1, id_ct + $I_L20559_266 + 8 * $I_L20559_281)
20560.                                        $I_L20560_224 = 1 + $I_L20560_224
20560.                                        if ( $I_L20560_224 >= min( nd_profile, 256 + 256 * $I_L20560_277 ) + -256 * $I_L20560_277 ) exit
20560.                                     enddo
20557.                                     $I_L20557_286 = 1 + $I_L20557_286
20557.                                     if ( $I_L20557_286 >= min( -1 + n_order_phase, 8 + 8 * $I_L20557_279 ) + -$I_L20557_263 + -8 * $I_L20557_279 ) exit
20557.                                  enddo
20557.                               endif
20559.                               $I_L20559_266 = 1 + $I_L20559_266
20563.                               if ( $I_L20559_266 >= min( nd_layer + -id_ct + 1, 8 + 8 * $I_L20559_281 ) + -8 * $I_L20559_281 ) exit
20563.                            enddo
20560.                            $I_L20560_277 = 1 + $I_L20560_277
20560.                            if ( $I_L20560_277 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
20560.                         enddo
20557.                         $I_L20557_279 = 1 + $I_L20557_279
20564.                         if ( $I_L20557_279 >= 1 + max( 0, -1 + _rsh( 6 + n_order_phase, 3 ) ) ) exit
20564.                      enddo
20559.                      $I_L20559_281 = 1 + $I_L20559_281
20559.                      if ( $I_L20559_281 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_ct + 8, 3 ) ) ) exit
20559.                   enddo
20559.                endif
20559.             endif
20559.          endif
20567.          if ( l_rescale ) then
20569.             if ( nd_layer + -id_ct >= 0 ) then
20570.                if ( nd_profile > 0 ) then
20569.                   $I_L20569_251 = 0
20569.                   do
20570.                      $I_L20570_227 = 0
20570. !dir$ ivdep
20570.                      do
20571.                         forward_scatter_cloud(1 + $I_L20570_227, id_ct + $I_L20569_251) = k_ext_scat_cloud(1 + $I_L20570_227, id_ct + $I_L20569_251) * asymmetry_process(1 + $I_L20570_227, id_ct + $I_L20569_251) ** n_order_forward
20574.                         $I_L20570_227 = 1 + $I_L20570_227
20570.                         if ( $I_L20570_227 >= nd_profile ) exit
20570.                      enddo
20575.                      $I_L20569_251 = 1 + $I_L20569_251
20574.                      if ( $I_L20569_251 >= nd_layer + -id_ct + 1 ) exit
20574.                   enddo
20574.                endif
20574.             endif
20574.          endif
20579.          if ( l_solar_phf ) then
20580.             if ( n_layer + -n_cloud_top >= 0 ) then
20582.                if ( n_direction > 0 ) then
20596.                   if ( -2 + n_order_phase_solar >= 0 ) then
20580.                      $I_L20580_275 = 0
20580. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
20580.                      do
20582.                         $SCA_n_cloud_profile_I16 = n_cloud_profile(n_cloud_top + $I_L20580_275)
20586.                         if ( $SCA_n_cloud_profile_I16 > 0 ) then
20582.                            $I_L20582_269 = 0
20582.                            do
20586.                               $I_L20586_229 = 0
20586. !dir$ ivdep
20586.                               do
20587.                                  $l_S14 = i_cloud_profile(1 + $I_L20586_229, n_cloud_top + $I_L20580_275)
20590.                                  p_legendre_ls_m1($l_S14) = 1.0
20591.                                  $SVU_P0 = cos_sol_view($l_S14, 1 + $I_L20582_269)
20591.                                  p_legendre_ls($l_S14) = $SVU_P0
20592.                                  $SVU_P1 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_275) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_275)
20592.                                  ks_phf($l_S14) = $SVU_P1
20593.                                  phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_275, 1 + $I_L20582_269) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_275) + $SVU_P1 * $SVU_P0 * 3.0
20595.                                  $I_L20586_229 = 1 + $I_L20586_229
20586.                                  if ( $I_L20586_229 >= $SCA_n_cloud_profile_I16 ) exit
20586.                               enddo
20596.                               $I_L20596_253 = 0
20596.                               do
20598.                                  $cnst1_S19 = 1.0 + -( 1.0/( ( 2 + $I_L20596_253 ) ) )
20599.                                  $I_L20599_231 = 0
20599. !dir$ unroll 2
20599.                                  do
20600.                                     $l_S18 = i_cloud_profile(1 + $I_L20599_231, n_cloud_top + $I_L20580_275)
20601.                                     $SVU_P2 = p_legendre_ls($l_S18)
20602.                                     $SCF_P7 = ( 1.0 + $cnst1_S19 ) * $SVU_P2 * cos_sol_view($l_S18, 1 + $I_L20582_269)
20602.                                     $SVU_P8 = -( $cnst1_S19 * p_legendre_ls_m1($l_S18) ) + $SCF_P7
20602.                                     p_legendre_ls($l_S18) = $SVU_P8
20605.                                     p_legendre_ls_m1($l_S18) = $SVU_P2
20606.                                     ks_phf($l_S18) = ks_phf($l_S18) * asymmetry_process($l_S18, n_cloud_top + $I_L20580_275)
20607.                                     phase_fnc_solar_cloud($l_S18, n_cloud_top + $I_L20580_275, 1 + $I_L20582_269) = phase_fnc_solar_cloud($l_S18, n_cloud_top + $I_L20580_275, 1 + $I_L20582_269) + ks_phf($l_S18) * $SVU_P8 * real( 5 + 2 * $I_L20596_253, 8 )
20611.                                     $I_L20599_231 = 1 + $I_L20599_231
20599.                                     if ( $I_L20599_231 >= $SCA_n_cloud_profile_I16 ) exit
20599.                                  enddo
20612.                                  $I_L20596_253 = 1 + $I_L20596_253
20611.                                  if ( $I_L20596_253 >= -1 + n_order_phase_solar ) exit
20611.                               enddo
20614.                               $I_L20582_269 = 1 + $I_L20582_269
20612.                               if ( $I_L20582_269 >= n_direction ) exit
20612.                            enddo
20612.                         endif
20618.                         if ( l_rescale ) then
20619.                            if ( $SCA_n_cloud_profile_I16 > 0 ) then
20619.                               $I_L20619_233 = 0
20619. !dir$ ivdep
20619. !dir$ loop_info (automatic) cache_nt( ks_phf, asymmetry_process, i_cloud_profile, forward_solar_cloud )
20619.                               do
20620.                                  $l_S22 = i_cloud_profile(1 + $I_L20619_233, n_cloud_top + $I_L20580_275)
20621.                                  forward_solar_cloud($l_S22, n_cloud_top + $I_L20580_275) = ks_phf($l_S22) * asymmetry_process($l_S22, n_cloud_top + $I_L20580_275)
20623.                                  $I_L20619_233 = 1 + $I_L20619_233
20619.                                  if ( $I_L20619_233 >= $SCA_n_cloud_profile_I16 ) exit
20619.                               enddo
20619.                            endif
20619.                         endif
20626.                         $I_L20580_275 = 1 + $I_L20580_275
20624.                         if ( $I_L20580_275 >= n_layer + -n_cloud_top + 1 ) exit
20624.                      enddo
20624.                   else if ( l_rescale ) then
20580.                      $I_L20580_271 = 0
20580. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
20580.                      do
20582.                         $SCA_n_cloud_profile_I17 = n_cloud_profile(n_cloud_top + $I_L20580_271)
20586.                         if ( $SCA_n_cloud_profile_I17 > 0 ) then
20582.                            $I_L20582_259 = 0
20582.                            do
20586.                               $I_L20586_239 = 0
20586. !dir$ ivdep
20586.                               do
20587.                                  $l_S14 = i_cloud_profile(1 + $I_L20586_239, n_cloud_top + $I_L20580_271)
20591.                                  $SVU_P3 = cos_sol_view($l_S14, 1 + $I_L20582_259)
20592.                                  $SVU_P4 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_271) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_271)
20592.                                  ks_phf($l_S14) = $SVU_P4
20593.                                  phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_271, 1 + $I_L20582_259) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_271) + $SVU_P4 * $SVU_P3 * 3.0
20595.                                  $I_L20586_239 = 1 + $I_L20586_239
20586.                                  if ( $I_L20586_239 >= $SCA_n_cloud_profile_I17 ) exit
20586.                               enddo
20614.                               $I_L20582_259 = 1 + $I_L20582_259
20612.                               if ( $I_L20582_259 >= n_direction ) exit
20612.                            enddo
20619.                            $I_L20619_241 = 0
20619. !dir$ ivdep
20619.                            do
20620.                               $l_S22 = i_cloud_profile(1 + $I_L20619_241, n_cloud_top + $I_L20580_271)
20621.                               forward_solar_cloud($l_S22, n_cloud_top + $I_L20580_271) = ks_phf($l_S22) * asymmetry_process($l_S22, n_cloud_top + $I_L20580_271)
20623.                               $I_L20619_241 = 1 + $I_L20619_241
20619.                               if ( $I_L20619_241 >= $SCA_n_cloud_profile_I17 ) exit
20619.                            enddo
20619.                         endif
20626.                         $I_L20580_271 = 1 + $I_L20580_271
20624.                         if ( $I_L20580_271 >= n_layer + -n_cloud_top + 1 ) exit
20624.                      enddo
20624.                   else
20580.                      $I_L20580_273 = 0
20580. !dir$ loop_info (automatic) cache_nt( n_cloud_profile )
20580.                      do
20582.                         $SCA_n_cloud_profile_I18 = n_cloud_profile(n_cloud_top + $I_L20580_273)
20586.                         if ( $SCA_n_cloud_profile_I18 > 0 ) then
20582.                            $I_L20582_261 = 0
20582.                            if ( n_direction >= 4 ) then
20582.                               $I_L20582_291 = 0
20582. !dir$ blocking_size( 0, 0 )
20582.                               do
20586.                                  $I_L20586_243 = 0
20586. !dir$ ivdep
20586. !dir$ blocking_size( 0, 0 )
20586.                                  do
20587.                                     $l_S14 = i_cloud_profile(1 + $I_L20586_243, n_cloud_top + $I_L20580_273)
20591.                                     $SVU_P5 = cos_sol_view($l_S14, 1 + 4 * $I_L20582_291)
20592.                                     $SVU_P6 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_273)
20593.                                     phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_273, 1 + 4 * $I_L20582_291) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) + $SVU_P6 * $SVU_P5 * 3.0
20587.                                     $l_S14 = i_cloud_profile(1 + $I_L20586_243, n_cloud_top + $I_L20580_273)
20591.                                     $SVU_P5 = cos_sol_view($l_S14, 2 + 4 * $I_L20582_291)
20592.                                     $SVU_P6 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_273)
20593.                                     phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_273, 2 + 4 * $I_L20582_291) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) + $SVU_P6 * $SVU_P5 * 3.0
20587.                                     $l_S14 = i_cloud_profile(1 + $I_L20586_243, n_cloud_top + $I_L20580_273)
20591.                                     $SVU_P5 = cos_sol_view($l_S14, 3 + 4 * $I_L20582_291)
20592.                                     $SVU_P6 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_273)
20593.                                     phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_273, 3 + 4 * $I_L20582_291) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) + $SVU_P6 * $SVU_P5 * 3.0
20587.                                     $l_S14 = i_cloud_profile(1 + $I_L20586_243, n_cloud_top + $I_L20580_273)
20591.                                     $SVU_P5 = cos_sol_view($l_S14, 4 + 4 * $I_L20582_291)
20592.                                     $SVU_P6 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_273)
20593.                                     phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_273, 4 + 4 * $I_L20582_291) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) + $SVU_P6 * $SVU_P5 * 3.0
20595.                                     $I_L20586_243 = 1 + $I_L20586_243
20586.                                     if ( $I_L20586_243 >= $SCA_n_cloud_profile_I18 ) exit
20586.                                  enddo
20614.                                  $I_L20582_291 = 1 + $I_L20582_291
20612.                                  if ( $I_L20582_291 >= _rsh( n_direction, 2 ) ) exit
20612.                               enddo
20614.                               $I_L20582_261 = and( 0xfffffffffffffffcUL, n_direction )
20614.                            endif
20582.                            if ( $I_L20582_261 < n_direction ) then
20582.                               $I_L20582_283 = 0
20582. !dir$ blocking_size( 0, 0 )
20582.                               do
20586.                                  $I_L20586_243 = 0
20586. !dir$ ivdep
20586. !dir$ blocking_size( 0, 0 )
20586.                                  do
20587.                                     $l_S14 = i_cloud_profile(1 + $I_L20586_243, n_cloud_top + $I_L20580_273)
20591.                                     $SVU_P5 = cos_sol_view($l_S14, $I_L20582_261 + $I_L20582_283 + 1)
20592.                                     $SVU_P6 = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) * asymmetry_process($l_S14, n_cloud_top + $I_L20580_273)
20593.                                     phase_fnc_solar_cloud($l_S14, n_cloud_top + $I_L20580_273, $I_L20582_261 + $I_L20582_283 + 1) = k_ext_scat_cloud($l_S14, n_cloud_top + $I_L20580_273) + $SVU_P6 * $SVU_P5 * 3.0
20595.                                     $I_L20586_243 = 1 + $I_L20586_243
20586.                                     if ( $I_L20586_243 >= $SCA_n_cloud_profile_I18 ) exit
20586.                                  enddo
20614.                                  $I_L20582_283 = 1 + $I_L20582_283
20612.                                  if ( $I_L20582_283 >= n_direction + -$I_L20582_261 ) exit
20612.                               enddo
20612.                            endif
20612.                         endif
20626.                         $I_L20580_273 = 1 + $I_L20580_273
20624.                         if ( $I_L20580_273 >= n_layer + -n_cloud_top + 1 ) exit
20624.                      enddo
20624.                   endif
20624.                else if ( l_rescale ) then
20580.                   $I_L20580_257 = 0
20580.                   do
20619.                      $t_S20 = n_cloud_profile(n_cloud_top + $I_L20580_257)
20619.                      if ( $t_S20 > 0 ) then
20619.                         $I_L20619_237 = 0
20619. !dir$ ivdep
20619.                         do
20620.                            $l_S22 = i_cloud_profile(1 + $I_L20619_237, n_cloud_top + $I_L20580_257)
20621.                            forward_solar_cloud($l_S22, n_cloud_top + $I_L20580_257) = ks_phf($l_S22) * asymmetry_process($l_S22, n_cloud_top + $I_L20580_257)
20623.                            $I_L20619_237 = 1 + $I_L20619_237
20619.                            if ( $I_L20619_237 >= $t_S20 ) exit
20619.                         enddo
20619.                      endif
20626.                      $I_L20580_257 = 1 + $I_L20580_257
20624.                      if ( $I_L20580_257 >= n_layer + -n_cloud_top + 1 ) exit
20624.                   enddo
20624.                endif
20624.             endif
20624.          endif
20624.       endif
20633.       if ( i_parametrization_drop == 3 ) then
20636.          call prsc_opt_prop( ierr, n_profile, n_cloud_top, n_layer, l_rescale, n_order_forward, l_henyey_greenstein_pf, n_order_phase, p(1, 1), density(1, 1), n_opt_level_cloud_prsc, drop_pressure_prsc(1, 1), drop_absorption_prsc(1, 1), drop_scattering_prsc(1, 1), drop_phase_fnc_prsc(1, 1, 1), k_ext_tot_cloud(1, id_ct), k_ext_scat_cloud(1, id_ct), phase_fnc_cloud(1, id_ct, 1), forward_scatter_cloud(1, id_ct), forward_solar_cloud(1, id_ct), l_solar_phf, n_order_phase_solar, n_direction, cos_sol_view(1, 1), phase_fnc_solar_cloud(1, id_ct, 1), nd_profile, nd_radiance_profile, nd_layer, id_ct, nd_layer, nd_direction, nd_profile_prsc, nd_opt_level_prsc, nd_phase_term, nd_max_order )
20656.          if ( n_layer + -n_cloud_top >= 0 ) then
20656.             $I_L20656_255 = 0
20656.             do
20657.                $t_S24 = n_cloud_profile(n_cloud_top + $I_L20656_255)
20657.                if ( $t_S24 > 0 ) then
20657.                   $I_L20657_235 = 0
20657. !dir$ ivdep
20657.                   do
20658.                      $l_S26 = i_cloud_profile(1 + $I_L20657_235, n_cloud_top + $I_L20656_255)
20659.                      k_ext_tot_cloud($l_S26, n_cloud_top + $I_L20656_255) = _vu_plus( k_ext_tot_cloud($l_S26, n_cloud_top + $I_L20656_255), k_ext_scat_cloud($l_S26, n_cloud_top + $I_L20656_255) )
20661.                      $I_L20657_235 = 1 + $I_L20657_235
20657.                      if ( $I_L20657_235 >= $t_S24 ) exit
20657.                   enddo
20657.                endif
20662.                $I_L20656_255 = 1 + $I_L20656_255
20661.                if ( $I_L20656_255 >= n_layer + -n_cloud_top + 1 ) exit
20661.             enddo
20661.          endif
20661.       endif
20667.       if ( i_parametrization_drop == 1 ) then
20664.          goto 20
20667.       else if ( i_parametrization_drop == 2 ) then
20667.          goto 20
20667.       else if ( i_parametrization_drop == 3 ) then
20667.          goto 20
20667.       else if ( i_parametrization_drop /= 5 ) then
20671.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$900,  _substr(t$899,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An invalid parametrization of cloud droplets has been selected.', 0x800600000000L ) ) )
20673.          ierr = 1
20275.          _free( t$3064 )
20275.       else
20275.    20    continue
20275.          _free( t$3064 )
20275.       endif
20681.       return
20681.       end
20681.       
21076.       
21076.       subroutine overlap_coupled( n_profile, n_layer, n_cloud_top, w_cloud, w_free, n_region, type_region, frac_region, p, i_cloud, cloud_overlap, nd_profile, nd_layer, nd_overlap_coeff, nd_region, id_ct, dp_corr_strat, dp_corr_conv )
20712.       t$905 = nd_profile
20712.       t$906 = id_ct
20712.       t$907 = nd_layer
20760.       t$3079 = _zla( 0, nd_profile )
20712.       t$3080 = _zla( 0, nd_profile )
20712.       t$3081 = nd_layer + -id_ct + 1
20760.       t$3082 = _zla( 0, nd_layer + -id_ct + 1 )
20712.       t$3083 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
20712.       t$904 = nd_region
20755.       t$3084 = _zla( 0, nd_region )
20712.       t$3085 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
20712.       t$3086 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 )
20765.       t$3087 = _zla( 0, nd_layer )
20712.       t$3088 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
20712.       t$908 = ( -1 + id_ct )
20712.       t$909 = nd_overlap_coeff
20712.       t$3089 = nd_layer + -id_ct + 2
20775.       t$3090 = _zla( 0, nd_layer + -id_ct + 2 )
20712.       t$3091 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
20775.       t$3092 = _zla( 0, nd_overlap_coeff )
20712.       t$3093 = _zla( 0, nd_profile ) * _zla( 0, nd_overlap_coeff ) * _zla( 0, nd_layer + -id_ct + 2 )
20712.       t$3094 = _zla( 0, nd_profile ) * _zla( 0, nd_region )
20803.       t$3097 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 8
20712.       t$3098 = _zla( 0, nd_profile ) * _zla( 0, nd_region )
20712.       t$3099 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region )
20807.       t$3100 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 8
20807.       t$3102 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8
20813.       t$3103 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8
20813.       t$3105 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 16
20816.       t$3106 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 16
20816.       t$3108 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 16
20810.       t$3109 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8
20810.       t$3111 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 24
20805.       t$3112 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8
20805.       t$3114 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 32
20797.       t$3115 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8
20797.       t$3117 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 40
20712.       t$3095 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 40 ), 8 )
20803.       t$3096 = t$3095
20807.       t$3101 = t$3095 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 8
20813.       t$3104 = t$3095 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8
20816.       t$3107 = t$3095 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 16
20810.       t$3110 = t$3095 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 16
20805.       t$3113 = t$3095 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 24
20797.       t$3116 = t$3095 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_region ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * 32
20827.       if ( nd_layer > 0 ) then
20828.          if ( nd_profile > 0 ) then
20827.             $I_L20827_374 = 0
20827.             do
20828.                $I_L20828_318 = 0
20828. !dir$ ivdep
20828. !dir$ loop_info (automatic) cache_nt( w_cloud, w_free )
20828.                do
20829.                   w_free(1 + $I_L20828_318, 1 + $I_L20827_374) = 1.0 + -w_cloud(1 + $I_L20828_318, 1 + $I_L20827_374)
20830.                   $I_L20828_318 = 1 + $I_L20828_318
20828.                   if ( $I_L20828_318 >= nd_profile ) exit
20828.                enddo
20831.                $I_L20827_374 = 1 + $I_L20827_374
20830.                if ( $I_L20827_374 >= nd_layer ) exit
20830.             enddo
20830.          endif
20830.       endif
20840.       if ( n_region > 0 ) then
20842.          if ( n_profile > 0 ) then
20840.             $I_L20840_406 = 0
20840.             do
20841.                if ( type_region(1 + $I_L20840_406) == 1 ) then
20842.                   $I_L20842_366 = 0
20842. !dir$ ivdep
20842.                   do
20843.                      area_upper(1 + $I_L20842_366, 1 + $I_L20840_406) = 1.0
20844.                      $I_L20842_366 = 1 + $I_L20842_366
20842.                      if ( $I_L20842_366 >= n_profile ) exit
20842.                   enddo
20842.                else
20846.                   $I_L20846_368 = 0
20846. !dir$ ivdep
20846.                   do
20847.                      area_upper(1 + $I_L20846_368, 1 + $I_L20840_406) = 0.0
20848.                      $I_L20846_368 = 1 + $I_L20846_368
20846.                      if ( $I_L20846_368 >= n_profile ) exit
20846.                   enddo
20846.                endif
20850.                $I_L20840_406 = 1 + $I_L20840_406
20849.                if ( $I_L20840_406 >= n_region ) exit
20849.             enddo
20849.          endif
20849.       endif
20852.       if ( n_layer + -n_cloud_top + 1 >= 0 ) then
20852.          $I_L20852_422 = 0
20852.          do
20856.             if ( i_cloud == 6 .orelse. i_cloud == 2 ) then
20860.                if ( nd_region > 0 ) then
20861.                   if ( nd_profile > 0 ) then
20860.                      $I_L20860_380 = 0
20860.                      do
20861.                         $I_L20861_326 = 0
20861. !dir$ ivdep
20861.                         do
20862.                            corr_factor(1 + $I_L20861_326, 1 + $I_L20860_380) = 1.0
20863.                            $I_L20861_326 = 1 + $I_L20861_326
20861.                            if ( $I_L20861_326 >= nd_profile ) exit
20861.                         enddo
20864.                         $I_L20860_380 = 1 + $I_L20860_380
20863.                         if ( $I_L20860_380 >= nd_region ) exit
20863.                      enddo
20863.                   endif
20863.                endif
20863.             else
20866.                if ( i_cloud == 4 ) then
20869.                   if ( nd_region > 0 ) then
20870.                      if ( nd_profile > 0 ) then
20869.                         $I_L20869_378 = 0
20869.                         do
20870.                            $I_L20870_324 = 0
20870. !dir$ ivdep
20870.                            do
20871.                               corr_factor(1 + $I_L20870_324, 1 + $I_L20869_378) = 0.0
20872.                               $I_L20870_324 = 1 + $I_L20870_324
20870.                               if ( $I_L20870_324 >= nd_profile ) exit
20870.                            enddo
20873.                            $I_L20869_378 = 1 + $I_L20869_378
20872.                            if ( $I_L20869_378 >= nd_region ) exit
20872.                         enddo
20872.                      endif
20872.                   endif
20875.                else if ( i_cloud == 7 ) then
20875.                   goto 10
20875.                else if ( i_cloud == 8 ) then
20875.    10             continue
20878.                   if ( n_region > 0 ) then
20878.                      $I_L20878_376 = 0
20878.                      do
20882.                         if ( type_region(1 + $I_L20878_376) == 1 ) then
20883.                            dp_corr = 1.0
20884.                         else if ( type_region(1 + $I_L20878_376) == 2 ) then
20885.                            dp_corr = dp_corr_strat
20885.                         else if ( type_region(1 + $I_L20878_376) == 3 ) then
20887.                            dp_corr = dp_corr_conv
20887.                         endif
20890.                         if ( ( n_cloud_top + $I_L20852_422 + -1 ) >= n_layer .orelse. ( n_cloud_top + $I_L20852_422 + -1 ) <= 1 ) then
20897.                            if ( n_profile > 0 ) then
20897.                               $I_L20897_322 = 0
20897. !dir$ ivdep
20897.                               do
20898.                                  corr_factor(1 + $I_L20897_322, 1 + $I_L20878_376) = 1.0
20899.                                  $I_L20897_322 = 1 + $I_L20897_322
20897.                                  if ( $I_L20897_322 >= n_profile ) exit
20897.                               enddo
20897.                            endif
20897.                         else
20891.                            if ( n_profile > 0 ) then
20891.                               $I_L20891_320 = 0
20891. !dir$ ivdep
20891.                               do
20892.                                  corr_factor(1 + $I_L20891_320, 1 + $I_L20878_376) = _expn( ( ( p(1 + $I_L20891_320, n_cloud_top + $I_L20852_422 + -1) + -p(1 + $I_L20891_320, n_cloud_top + $I_L20852_422) ) * 1.0/dp_corr ) )
20893.                                  $I_L20891_320 = 1 + $I_L20891_320
20891.                                  if ( $I_L20891_320 >= n_profile ) exit
20891.                               enddo
20891.                            endif
20891.                         endif
20902.                         $I_L20878_376 = 1 + $I_L20878_376
20900.                         if ( $I_L20878_376 >= n_region ) exit
20900.                      enddo
20900.                   endif
20900.                endif
20900.             endif
20907.             if ( n_region > 0 ) then
20908.                if ( ( n_cloud_top + $I_L20852_422 + -1 ) < n_layer ) then
20910.                   if ( n_profile > 0 ) then
20907.                      $I_L20907_398 = 0
20907.                      do
20909.                         if ( type_region(1 + $I_L20907_398) == 1 ) then
20910.                            $I_L20910_350 = 0
20910. !dir$ ivdep
20910.                            do
20911.                               area_lower(1 + $I_L20910_350, 1 + $I_L20907_398) = w_free(1 + $I_L20910_350, n_cloud_top + $I_L20852_422)
20912.                               $I_L20910_350 = 1 + $I_L20910_350
20910.                               if ( $I_L20910_350 >= n_profile ) exit
20910.                            enddo
20910.                         else
20914.                            $I_L20914_352 = 0
20914. !dir$ ivdep
20914. !dir$ loop_info (automatic) cache_nt( frac_region )
20914.                            do
20915.                               area_lower(1 + $I_L20914_352, 1 + $I_L20907_398) = w_cloud(1 + $I_L20914_352, n_cloud_top + $I_L20852_422) * frac_region(1 + $I_L20914_352, n_cloud_top + $I_L20852_422, 1 + $I_L20907_398)
20917.                               $I_L20914_352 = 1 + $I_L20914_352
20914.                               if ( $I_L20914_352 >= n_profile ) exit
20914.                            enddo
20914.                         endif
20938.                         $I_L20938_354 = 0
20938. !dir$ ivdep
20938.                         do
20939.                            area_overlap(1 + $I_L20938_354, 1 + $I_L20907_398, 1 + $I_L20907_398) = corr_factor(1 + $I_L20938_354, 1 + $I_L20907_398) * min( area_upper(1 + $I_L20938_354, 1 + $I_L20907_398), area_lower(1 + $I_L20938_354, 1 + $I_L20907_398) )
20941.                            $I_L20938_354 = 1 + $I_L20938_354
20938.                            if ( $I_L20938_354 >= n_profile ) exit
20938.                         enddo
20943.                         $I_L20907_398 = 1 + $I_L20907_398
20941.                         if ( $I_L20907_398 >= n_region ) exit
20941.                      enddo
20941.                   endif
20941.                else if ( n_profile > 0 ) then
20907.                   $I_L20907_404 = 0
20907.                   do
20922.                      if ( type_region(1 + $I_L20907_404) == 1 ) then
20923.                         $I_L20923_360 = 0
20923. !dir$ ivdep
20923.                         do
20924.                            area_lower(1 + $I_L20923_360, 1 + $I_L20907_404) = 1.0
20925.                            $I_L20923_360 = 1 + $I_L20923_360
20923.                            if ( $I_L20923_360 >= n_profile ) exit
20923.                         enddo
20923.                      else
20927.                         $I_L20927_362 = 0
20927. !dir$ ivdep
20927.                         do
20928.                            area_lower(1 + $I_L20927_362, 1 + $I_L20907_404) = 0.0
20929.                            $I_L20927_362 = 1 + $I_L20927_362
20927.                            if ( $I_L20927_362 >= n_profile ) exit
20927.                         enddo
20927.                      endif
20938.                      $I_L20938_364 = 0
20938. !dir$ ivdep
20938.                      do
20939.                         area_overlap(1 + $I_L20938_364, 1 + $I_L20907_404, 1 + $I_L20907_404) = corr_factor(1 + $I_L20938_364, 1 + $I_L20907_404) * min( area_upper(1 + $I_L20938_364, 1 + $I_L20907_404), area_lower(1 + $I_L20938_364, 1 + $I_L20907_404) )
20941.                         $I_L20938_364 = 1 + $I_L20938_364
20938.                         if ( $I_L20938_364 >= n_profile ) exit
20938.                      enddo
20943.                      $I_L20907_404 = 1 + $I_L20907_404
20941.                      if ( $I_L20907_404 >= n_region ) exit
20941.                   enddo
20941.                endif
20950.                if ( n_profile > 0 ) then
20955.                   if ( 1 < n_region ) then
20948.                      $I_L20948_418 = 0
20948.                      do
20949.                         $I_L20949_400 = 0
20949.                         do
20950.                            $I_L20950_356 = 0
20950. !dir$ ivdep
20950.                            do
20951.                               area_overlap(1 + $I_L20950_356, 2 + $I_L20948_418, 1 + $I_L20949_400) = 0.0
20953.                               $I_L20950_356 = 1 + $I_L20950_356
20950.                               if ( $I_L20950_356 >= n_profile ) exit
20950.                            enddo
20954.                            $I_L20949_400 = 1 + $I_L20949_400
20953.                            if ( $I_L20949_400 >= 1 + $I_L20948_418 ) exit
20953.                         enddo
20955.                         $I_L20948_418 = 1 + $I_L20948_418
20954.                         if ( $I_L20948_418 >= -1 + n_region ) exit
20954.                      enddo
20948.                      $I_L20948_420 = 0
20948.                      do
20949.                         $I_L20949_402 = 0
20949.                         do
20950.                            $I_L20950_358 = 0
20950. !dir$ ivdep
20950.                            do
20952.                               area_overlap(1 + $I_L20950_358, 1 + $I_L20949_402, 2 + $I_L20948_420) = 0.0
20953.                               $I_L20950_358 = 1 + $I_L20950_358
20950.                               if ( $I_L20950_358 >= n_profile ) exit
20950.                            enddo
20954.                            $I_L20949_402 = 1 + $I_L20949_402
20953.                            if ( $I_L20949_402 >= 1 + $I_L20948_420 ) exit
20953.                         enddo
20955.                         $I_L20948_420 = 1 + $I_L20948_420
20954.                         if ( $I_L20948_420 >= -1 + n_region ) exit
20954.                      enddo
20954.                   endif
20954.                endif
20954.             endif
20957.             if ( n_profile > 0 ) then
20957.                $I_L20957_328 = 0
20957. !dir$ ivdep
20957.                do
20958.                   area_random_tot(1 + $I_L20957_328) = 1.0 + -area_overlap(1 + $I_L20957_328, 1, 1)
20959.                   $I_L20957_328 = 1 + $I_L20957_328
20957.                   if ( $I_L20957_328 >= n_profile ) exit
20957.                enddo
20957.             endif
20960.             if ( -2 + n_region >= 0 ) then
20961.                if ( n_profile > 0 ) then
20960.                   $I_L20960_382 = 0
20960. !dir$ blocking_size( 0, 0 )
20960.                   do
20961.                      $I_L20961_330 = 0
20961. !dir$ ivdep
20961. !dir$ blocking_size( 0, 0 )
20961.                      do
20962.                         area_random_tot(1 + $I_L20961_330) = area_random_tot(1 + $I_L20961_330) + -area_overlap(1 + $I_L20961_330, 2 + $I_L20960_382, 2 + $I_L20960_382)
20963.                         $I_L20961_330 = 1 + $I_L20961_330
20961.                         if ( $I_L20961_330 >= n_profile ) exit
20961.                      enddo
20964.                      $I_L20960_382 = 1 + $I_L20960_382
20963.                      if ( $I_L20960_382 >= -1 + n_region ) exit
20963.                   enddo
20963.                endif
20963.             endif
20966.             if ( nd_region > 0 ) then
20967.                if ( nd_profile > 0 ) then
20966.                   $I_L20966_384 = 0
20966.                   do
20967.                      $I_L20967_332 = 0
20967. !dir$ ivdep
20967.                      do
20968.                         area_random_upper(1 + $I_L20967_332, 1 + $I_L20966_384) = area_upper(1 + $I_L20967_332, 1 + $I_L20966_384) + -area_overlap(1 + $I_L20967_332, 1 + $I_L20966_384, 1 + $I_L20966_384)
20970.                         area_random_lower(1 + $I_L20967_332, 1 + $I_L20966_384) = area_lower(1 + $I_L20967_332, 1 + $I_L20966_384) + -area_overlap(1 + $I_L20967_332, 1 + $I_L20966_384, 1 + $I_L20966_384)
20972.                         $I_L20967_332 = 1 + $I_L20967_332
20967.                         if ( $I_L20967_332 >= nd_profile ) exit
20967.                      enddo
20973.                      $I_L20966_384 = 1 + $I_L20966_384
20972.                      if ( $I_L20966_384 >= nd_region ) exit
20972.                   enddo
20986.                   $SI_L20986_408_G7 = 0
20986.                   do
20985.                      $SI_L20985_386_G10 = 0
20985.                      do
20987.                         $SI_L20987_334_G13 = 0
20987.                         do
20986.                            $I_L20986_430 = 0
20986. !dir$ shortloop16
20986. !dir$ blocking_size( 8, 8 )
20986.                            do
20985.                               $I_L20985_427 = 0
20985. !dir$ shortloop16
20985. !dir$ blocking_size( 8, 8 )
20985.                               do
20987.                                  $I_L20987_424 = 0
20987. !dir$ ivdep
20987. !dir$ blocking_size( 256, 256 )
20987.                                  do
20988.                                     if ( area_random_tot($I_L20987_424 + 256 * $SI_L20987_334_G13 + 1) > 2.2204460492503131e-14 ) then
20989.                                        area_overlap($I_L20987_424 + 256 * $SI_L20987_334_G13 + 1, $I_L20985_427 + 8 * $SI_L20985_386_G10 + 1, $I_L20986_430 + 8 * $SI_L20986_408_G7 + 1) = area_overlap($I_L20987_424 + 256 * $SI_L20987_334_G13 + 1, $I_L20985_427 + 8 * $SI_L20985_386_G10 + 1, $I_L20986_430 + 8 * $SI_L20986_408_G7 + 1) + ( area_random_upper($I_L20987_424 + 256 * $SI_L20987_334_G13 + 1, $I_L20985_427 + 8 * $SI_L20985_386_G10 + 1) * area_random_lower($I_L20987_424 + 256 * $SI_L20987_334_G13 + 1, $I_L20986_430 + 8 * $SI_L20986_408_G7 + 1) * 1.0/area_random_tot($I_L20987_424 + 256 * $SI_L20987_334_G13 + 1) )
20989.                                     endif
20987.                                     $I_L20987_424 = 1 + $I_L20987_424
20992.                                     if ( $I_L20987_424 >= min( nd_profile, 256 + 256 * $SI_L20987_334_G13 ) + -256 * $SI_L20987_334_G13 ) exit
20992.                                  enddo
20985.                                  $I_L20985_427 = 1 + $I_L20985_427
20985.                                  if ( $I_L20985_427 >= min( nd_region, 8 + 8 * $SI_L20985_386_G10 ) + -8 * $SI_L20985_386_G10 ) exit
20985.                               enddo
20986.                               $I_L20986_430 = 1 + $I_L20986_430
20993.                               if ( $I_L20986_430 >= min( nd_region, 8 + 8 * $SI_L20986_408_G7 ) + -8 * $SI_L20986_408_G7 ) exit
20993.                            enddo
20987.                            $SI_L20987_334_G13 = 1 + $SI_L20987_334_G13
20987.                            if ( $SI_L20987_334_G13 >= _rsh( 255 + nd_profile, 8 ) ) exit
20987.                         enddo
20985.                         $SI_L20985_386_G10 = 1 + $SI_L20985_386_G10
20994.                         if ( $SI_L20985_386_G10 >= _rsh( 7 + nd_region, 3 ) ) exit
20994.                      enddo
20986.                      $SI_L20986_408_G7 = 1 + $SI_L20986_408_G7
20986.                      if ( $SI_L20986_408_G7 >= _rsh( 7 + nd_region, 3 ) ) exit
20986.                   enddo
21006.                   $I_L21006_372 = 0
21006. !dir$ ivdep
21006.                   do
21007.                      cloud_overlap(1 + $I_L21006_372, n_cloud_top + $I_L20852_422 + -1, 1) = 1.0
21008.                      $I_L21006_372 = 1 + $I_L21006_372
21006.                      if ( $I_L21006_372 >= nd_profile ) exit
21006.                   enddo
21006.                endif
21015.                if ( 1 < nd_region ) then
21006.                   if ( nd_profile > 0 ) then
21005.                      $I_L21005_410 = 0
21005.                      do
21006.                         $I_L21006_336 = 0
21006. !dir$ ivdep
21006.                         do
21007.                            cloud_overlap(1 + $I_L21006_336, n_cloud_top + $I_L20852_422 + -1, n_region + $I_L21005_410 + n_region * $I_L21005_410 + 2) = 1.0
21008.                            $I_L21006_336 = 1 + $I_L21006_336
21006.                            if ( $I_L21006_336 >= nd_profile ) exit
21006.                         enddo
21009.                         $I_L21009_388 = 0
21009.                         do
21010.                            $I_L21010_338 = 0
21010. !dir$ ivdep
21010.                            do
21011.                               cloud_overlap(1 + $I_L21010_338, n_cloud_top + $I_L20852_422 + -1, $I_L21005_410 + n_region * $I_L21009_388 + 2) = 0.0
21012.                               cloud_overlap(1 + $I_L21010_338, n_cloud_top + $I_L20852_422 + -1, n_region + $I_L21009_388 + n_region * $I_L21005_410 + 1) = 0.0
21013.                               $I_L21010_338 = 1 + $I_L21010_338
21010.                               if ( $I_L21010_338 >= nd_profile ) exit
21010.                            enddo
21014.                            $I_L21009_388 = 1 + $I_L21009_388
21013.                            if ( $I_L21009_388 >= 1 + $I_L21005_410 ) exit
21013.                         enddo
21015.                         $I_L21005_410 = 1 + $I_L21005_410
21014.                         if ( $I_L21005_410 >= -1 + nd_region ) exit
21014.                      enddo
21014.                   endif
21014.                endif
21019.                if ( nd_profile > 0 ) then
21018.                   $I_L21018_412 = 0
21018.                   do
21019.                      $I_L21019_390 = 0
21019.                      do
21020.                         if ( area_upper(1 + $I_L21019_390, 1 + $I_L21018_412) > 2.2204460492503131e-14 ) then
21021.                            $SCA_area_upper_I1 = area_upper(1 + $I_L21019_390, 1 + $I_L21018_412)
21021.                            $I_L21021_340 = 0
21021. !dir$ ivdep
21021.                            do
21022.                               cloud_overlap(1 + $I_L21019_390, n_cloud_top + $I_L20852_422 + -1, $I_L21018_412 + n_region * $I_L21021_340 + 1) = ( area_overlap(1 + $I_L21019_390, 1 + $I_L21018_412, 1 + $I_L21021_340) * 1.0/$SCA_area_upper_I1 )
21024.                               $I_L21021_340 = 1 + $I_L21021_340
21021.                               if ( $I_L21021_340 >= nd_region ) exit
21021.                            enddo
21021.                         endif
21026.                         $I_L21019_390 = 1 + $I_L21019_390
21025.                         if ( $I_L21019_390 >= nd_profile ) exit
21025.                      enddo
21027.                      $I_L21018_412 = 1 + $I_L21018_412
21026.                      if ( $I_L21018_412 >= nd_region ) exit
21026.                   enddo
21026.                endif
21026.             endif
21034.             if ( n_region > 0 ) then
21035.                if ( n_profile > 0 ) then
21035.                   $I_L21035_370 = 0
21035. !dir$ ivdep
21035.                   do
21036.                      cloud_overlap(1 + $I_L21035_370, n_cloud_top + $I_L20852_422 + -1, 1 + n_region * n_region) = 1.0
21038.                      $I_L21035_370 = 1 + $I_L21035_370
21035.                      if ( $I_L21035_370 >= n_profile ) exit
21035.                   enddo
21035.                endif
21047.                if ( 1 < n_region ) then
21035.                   if ( n_profile > 0 ) then
21034.                      $I_L21034_414 = 0
21034.                      do
21035.                         $I_L21035_342 = 0
21035. !dir$ ivdep
21035.                         do
21036.                            cloud_overlap(1 + $I_L21035_342, n_cloud_top + $I_L20852_422 + -1, n_region + $I_L21034_414 + n_region * n_region + n_region * $I_L21034_414 + 2) = 1.0
21038.                            $I_L21035_342 = 1 + $I_L21035_342
21035.                            if ( $I_L21035_342 >= n_profile ) exit
21035.                         enddo
21039.                         $I_L21039_392 = 0
21039.                         do
21040.                            $I_L21040_344 = 0
21040. !dir$ ivdep
21040.                            do
21041.                               cloud_overlap(1 + $I_L21040_344, n_cloud_top + $I_L20852_422 + -1, $I_L21034_414 + n_region * n_region + n_region * $I_L21039_392 + 2) = 0.0
21043.                               cloud_overlap(1 + $I_L21040_344, n_cloud_top + $I_L20852_422 + -1, n_region + $I_L21039_392 + n_region * n_region + n_region * $I_L21034_414 + 1) = 0.0
21045.                               $I_L21040_344 = 1 + $I_L21040_344
21040.                               if ( $I_L21040_344 >= n_profile ) exit
21040.                            enddo
21046.                            $I_L21039_392 = 1 + $I_L21039_392
21045.                            if ( $I_L21039_392 >= 1 + $I_L21034_414 ) exit
21045.                         enddo
21047.                         $I_L21034_414 = 1 + $I_L21034_414
21046.                         if ( $I_L21034_414 >= -1 + n_region ) exit
21046.                      enddo
21046.                   endif
21046.                endif
21050.                if ( n_profile > 0 ) then
21049.                   $I_L21049_416 = 0
21049.                   do
21050.                      $I_L21050_394 = 0
21050.                      do
21051.                         if ( area_lower(1 + $I_L21050_394, 1 + $I_L21049_416) > 2.2204460492503131e-14 ) then
21052.                            $SCA_area_lower_I0 = area_lower(1 + $I_L21050_394, 1 + $I_L21049_416)
21052.                            $I_L21052_346 = 0
21052. !dir$ ivdep
21052.                            do
21053.                               cloud_overlap(1 + $I_L21050_394, n_cloud_top + $I_L20852_422 + -1, $I_L21049_416 + n_region * n_region + n_region * $I_L21052_346 + 1) = ( area_overlap(1 + $I_L21050_394, 1 + $I_L21052_346, 1 + $I_L21049_416) * 1.0/$SCA_area_lower_I0 )
21055.                               $I_L21052_346 = 1 + $I_L21052_346
21052.                               if ( $I_L21052_346 >= n_region ) exit
21052.                            enddo
21052.                         endif
21057.                         $I_L21050_394 = 1 + $I_L21050_394
21056.                         if ( $I_L21050_394 >= n_profile ) exit
21056.                      enddo
21058.                      $I_L21049_416 = 1 + $I_L21049_416
21057.                      if ( $I_L21049_416 >= n_region ) exit
21057.                   enddo
21057.                endif
21057.             endif
21063.             if ( ( n_cloud_top + $I_L20852_422 + -1 ) < n_layer ) then
21064.                if ( n_region > 0 ) then
21065.                   if ( n_profile > 0 ) then
21064.                      $I_L21064_396 = 0
21064.                      do
21065.                         $I_L21065_348 = 0
21065. !dir$ ivdep
21065.                         do
21066.                            area_upper(1 + $I_L21065_348, 1 + $I_L21064_396) = area_lower(1 + $I_L21065_348, 1 + $I_L21064_396)
21067.                            $I_L21065_348 = 1 + $I_L21065_348
21065.                            if ( $I_L21065_348 >= n_profile ) exit
21065.                         enddo
21068.                         $I_L21064_396 = 1 + $I_L21064_396
21067.                         if ( $I_L21064_396 >= n_region ) exit
21067.                      enddo
21067.                   endif
21067.                endif
21067.             endif
21071.             $I_L20852_422 = 1 + $I_L20852_422
21069.             if ( $I_L20852_422 >= n_layer + -n_cloud_top + 2 ) exit
21069.          enddo
21069.       endif
20712.       _free( t$3095 )
21076.       return
21076.       end
21076.       
21227.       
21227.       subroutine prsc_gather_spline( ierr, n_profile, i_first_layer, i_last_layer, p_eval, n_opt_level_prsc, prsc_pressure, prsc_opt_property, opt_property, nd_profile, nd_layer, id_1, id_2, nd_profile_prsc, nd_opt_level_prsc )
21099.       t$914 = nd_profile
21099.       t$915 = nd_layer
21155.       t$3118 = _zla( 0, nd_profile )
21099.       t$3119 = _zla( 0, nd_profile )
21155.       t$3120 = _zla( 0, nd_layer )
21099.       t$3121 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
21099.       t$912 = nd_profile_prsc
21099.       t$913 = nd_opt_level_prsc
21151.       t$3122 = _zla( 0, nd_profile_prsc )
21099.       t$3123 = _zla( 0, nd_profile_prsc )
21151.       t$3124 = _zla( 0, nd_opt_level_prsc )
21099.       t$3125 = _zla( 0, nd_profile_prsc ) * _zla( 0, nd_opt_level_prsc )
21099.       t$916 = id_1
21099.       t$917 = id_2
21099.       t$3126 = id_2 + -id_1 + 1
21159.       t$3127 = _zla( 0, id_2 + -id_1 + 1 )
21099.       t$3128 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 )
21175.       t$3131 = 8 * _zla( 0, nd_opt_level_prsc )
21172.       t$3132 = 8 * _zla( 0, nd_opt_level_prsc )
21172.       t$3134 = 16 * _zla( 0, nd_opt_level_prsc )
21169.       t$3135 = 16 * _zla( 0, nd_opt_level_prsc )
21169.       t$3137 = 24 * _zla( 0, nd_opt_level_prsc )
21177.       t$3138 = 24 * _zla( 0, nd_opt_level_prsc )
21177.       t$3140 = 32 * _zla( 0, nd_opt_level_prsc )
21099.       t$3129 = int( _alloc( 32 * _zla( 0, nd_opt_level_prsc ) ), 8 )
21175.       t$3130 = t$3129
21172.       t$3133 = t$3129 + 8 * _zla( 0, nd_opt_level_prsc )
21169.       t$3136 = t$3129 + 16 * _zla( 0, nd_opt_level_prsc )
21177.       t$3139 = t$3129 + 24 * _zla( 0, nd_opt_level_prsc )
21187.       if ( n_profile > 0 ) then
21187.          $I_L21187_50 = 0
21187.          do
21193.             if ( n_opt_level_prsc > 0 ) then
21193.                $I_L21193_40 = 0
21193. !dir$ ivdep
21193.                do
21194.                   prsc_pressure_g(1 + $I_L21193_40) = prsc_pressure(1 + $I_L21187_50, 1 + $I_L21193_40)
21195.                   prsc_opt_property_g(1 + $I_L21193_40) = prsc_opt_property(1 + $I_L21187_50, 1 + $I_L21193_40)
21196.                   $I_L21193_40 = 1 + $I_L21193_40
21193.                   if ( $I_L21193_40 >= n_opt_level_prsc ) exit
21193.                enddo
21193.             endif
21199.             t$1260 = n_opt_level_prsc
21199.             t$4450 = max( 0, n_opt_level_prsc )
21199.             if ( n_opt_level_prsc /= 1 ) then
21199.                d2(1) = 0.0
21199.                work(1) = 0.0
21199.                if ( -3 + n_opt_level_prsc >= 0 ) then
21199.                   $d2_WR0_R0 = 0.0
21199.                   $work_WR0_R1 = 0.0
21199.                   $I_L21199_42 = 0
21199. !dir$ unroll 2
21199.                   do
21199.                      $sigma_S3 = ( ( prsc_pressure_g(2 + $I_L21199_42) + -prsc_pressure_g(1 + $I_L21199_42) ) * 1.0/( prsc_pressure_g(3 + $I_L21199_42) + -prsc_pressure_g(1 + $I_L21199_42) ) )
21199.                      $rho_S4 = 2.0 + $sigma_S3 * $d2_WR0_R0
21199.                      $d2_WR0_R0 = ( ( -1.0 + $sigma_S3 ) * 1.0/( 2.0 + $sigma_S3 * $d2_WR0_R0 ) )
21199.                      d2(2 + $I_L21199_42) = ( ( -1.0 + $sigma_S3 ) * 1.0/$rho_S4 )
21199.                      $SCF_P0 = ( 1.0/( prsc_pressure_g(3 + $I_L21199_42) + -prsc_pressure_g(1 + $I_L21199_42) ) * ( ( ( prsc_opt_property_g(3 + $I_L21199_42) + -prsc_opt_property_g(2 + $I_L21199_42) ) * 1.0/( prsc_pressure_g(3 + $I_L21199_42) + -prsc_pressure_g(2 + $I_L21199_42) ) ) + -( ( prsc_opt_property_g(2 + $I_L21199_42) + -prsc_opt_property_g(1 + $I_L21199_42) ) * 1.0/( prsc_pressure_g(2 + $I_L21199_42) + -prsc_pressure_g(1 + $I_L21199_42) ) ) ) * 6.0 )
21199.                      $work_WR0_R1 = ( ( -( $sigma_S3 * $work_WR0_R1 ) + $SCF_P0 ) * 1.0/$rho_S4 )
21199.                      work(2 + $I_L21199_42) = $work_WR0_R1
21199.                      $I_L21199_42 = 1 + $I_L21199_42
21199.                      if ( $I_L21199_42 >= -2 + n_opt_level_prsc ) exit
21199.                   enddo
21199.                endif
21199.                d2(n_opt_level_prsc) = 0.0
21199.                if ( 1 + -n_opt_level_prsc < 0 ) then
21199.                   $d2_WR0_R2 = 0.0
21199.                   $I_L21199_44 = 0
21199. !dir$ unroll 4
21199.                   do
21199.                      $d2_WR0_R2 = d2(n_opt_level_prsc + -$I_L21199_44 + -1) * $d2_WR0_R2 + work(n_opt_level_prsc + -$I_L21199_44 + -1)
21199.                      d2(n_opt_level_prsc + -$I_L21199_44 + -1) = $d2_WR0_R2
21199.                      $I_L21199_44 = 1 + $I_L21199_44
21199.                      if ( $I_L21199_44 >= -1 + n_opt_level_prsc ) exit
21199.                   enddo
21199.                endif
21199.             endif
21202.             if ( i_last_layer + -i_first_layer < 0 ) then
21222.                $I_L21187_50 = 1 + $I_L21187_50
21220.             else if ( n_opt_level_prsc == 1 ) then
21220.             else
21220.             endif
21220.             if ( $I_L21187_50 >= n_profile ) exit
21220.          enddo
21220.          goto 10
21220.       else
21220.    10    continue
21099.          _free( t$3129 )
21099.       endif
21227.       return
21227.       end
21227.       
21658.       
21658.       subroutine prsc_opt_prop( ierr, n_profile, i_first_layer, i_last_layer, l_rescale, n_order_forward, l_henyey_greenstein_pf, n_order_phase, p, density, n_opt_level_prsc, prsc_pressure, prsc_absorption, prsc_scattering, prsc_phase_fnc, k_ext_tot, k_ext_scat, phase_fnc, forward_scatter, forward_solar, l_solar_phf, n_order_phase_solar, n_direction, mu_v, phase_fnc_solar, nd_profile, nd_radiance_profile, nd_layer, id_1, id_2, nd_direction, nd_profile_prsc, nd_opt_level_prsc, nd_phase_term, nd_max_order )
21248.       t$920 = nd_profile
21248.       t$921 = nd_layer
21329.       t$3141 = _zla( 0, nd_profile )
21248.       t$3142 = _zla( 0, nd_profile )
21329.       t$3143 = _zla( 0, nd_layer )
21248.       t$3144 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
21248.       t$923 = nd_opt_level_prsc
21340.       t$3145 = _zla( 0, nd_opt_level_prsc )
21248.       t$924 = nd_profile_prsc
21342.       t$3146 = _zla( 0, nd_profile_prsc )
21248.       t$3147 = _zla( 0, nd_profile_prsc )
21248.       t$3148 = _zla( 0, nd_opt_level_prsc ) * _zla( 0, nd_profile_prsc )
21248.       t$925 = nd_phase_term
21248.       t$3149 = _zla( 0, nd_opt_level_prsc ) * _zla( 0, nd_profile_prsc )
21346.       t$3150 = _zla( 0, nd_phase_term )
21248.       t$3151 = _zla( 0, nd_opt_level_prsc ) * _zla( 0, nd_profile_prsc ) * _zla( 0, nd_phase_term )
21248.       t$926 = id_1
21248.       t$927 = id_2
21248.       t$3152 = id_2 + -id_1 + 1
21352.       t$3153 = _zla( 0, id_2 + -id_1 + 1 )
21248.       t$3154 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 )
21248.       t$928 = nd_max_order
21248.       t$3155 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 )
21356.       t$3156 = _zla( 0, nd_max_order )
21248.       t$3157 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, id_2 + -id_1 + 1 )
21248.       t$922 = nd_direction
21333.       t$3158 = _zla( 0, nd_direction )
21248.       t$3159 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
21248.       t$929 = nd_radiance_profile
21365.       t$3160 = _zla( 0, nd_radiance_profile )
21248.       t$3161 = _zla( 0, nd_radiance_profile )
21248.       t$3162 = _zla( 0, nd_radiance_profile ) * _zla( 0, id_2 + -id_1 + 1 )
21248.       t$3163 = _zla( 0, nd_direction ) * _zla( 0, nd_radiance_profile ) * _zla( 0, id_2 + -id_1 + 1 )
21397.       t$3166 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 8
21399.       t$3167 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 8
21399.       t$3169 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16
21388.       t$3170 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16
21388.       t$3172 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16
21390.       t$3173 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16
21390.       t$3175 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16 + 16 * _zla( 0, nd_profile )
21392.       t$3176 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16 + 16 * _zla( 0, nd_profile )
21392.       t$3178 = _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16 + 24 * _zla( 0, nd_profile )
21248.       t$3164 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16 + 24 * _zla( 0, nd_profile ) ), 8 )
21397.       t$3165 = t$3164
21399.       t$3168 = t$3164 + _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 8
21388.       t$3171 = t$3164 + _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16
21390.       t$3174 = t$3164 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16
21392.       t$3177 = t$3164 + _zla( 0, nd_profile ) * _zla( 0, id_2 + -id_1 + 1 ) * 16 + 16 * _zla( 0, nd_profile )
21411.       call prsc_gather_spline( ierr, n_profile, i_first_layer, i_last_layer, p(1, 1), n_opt_level_prsc, prsc_pressure(1), prsc_absorption(1, 1), k_ext_tot(1, id_1), nd_profile, nd_layer, id_1, id_2, nd_profile_prsc, nd_opt_level_prsc )
21419.       call prsc_gather_spline( ierr, n_profile, i_first_layer, i_last_layer, p(1, 1), n_opt_level_prsc, prsc_pressure(1), prsc_scattering(1, 1), k_ext_scat(1, id_1), nd_profile, nd_layer, id_1, id_2, nd_profile_prsc, nd_opt_level_prsc )
21428.       if ( i_last_layer + -i_first_layer >= 0 ) then
21429.          if ( n_profile > 0 ) then
21428.             $I_L21428_551 = 0
21428.             do
21429.                $I_L21429_486 = 0
21429. !dir$ ivdep
21429.                do
21430.                   k_ext_scat(1 + $I_L21429_486, i_first_layer + $I_L21428_551) = ( k_ext_scat(1 + $I_L21429_486, i_first_layer + $I_L21428_551) * 1.0/density(1 + $I_L21429_486, i_first_layer + $I_L21428_551) )
21431.                   k_ext_tot(1 + $I_L21429_486, i_first_layer + $I_L21428_551) = ( k_ext_tot(1 + $I_L21429_486, i_first_layer + $I_L21428_551) * 1.0/density(1 + $I_L21429_486, i_first_layer + $I_L21428_551) )
21432.                   $I_L21429_486 = 1 + $I_L21429_486
21429.                   if ( $I_L21429_486 >= n_profile ) exit
21429.                enddo
21433.                $I_L21428_551 = 1 + $I_L21428_551
21432.                if ( $I_L21428_551 >= i_last_layer + -i_first_layer + 1 ) exit
21432.             enddo
21432.          endif
21432.       endif
21438.       if ( l_henyey_greenstein_pf ) then
21441.          call prsc_gather_spline( ierr, n_profile, i_first_layer, i_last_layer, p(1, 1), n_opt_level_prsc, prsc_pressure(1), prsc_phase_fnc(1, 1, 1), asymmetry(1, id_1), nd_profile, nd_layer, id_1, id_2, nd_profile_prsc, nd_opt_level_prsc )
21450.          if ( i_last_layer + -i_first_layer >= 0 ) then
21451.             if ( n_profile > 0 ) then
21450.                $I_L21450_553 = 0
21450.                do
21451.                   $I_L21451_488 = 0
21451. !dir$ ivdep
21451.                   do
21452.                      phase_fnc(1 + $I_L21451_488, i_first_layer + $I_L21450_553, 1) = k_ext_scat(1 + $I_L21451_488, i_first_layer + $I_L21450_553) * asymmetry(1 + $I_L21451_488, i_first_layer + $I_L21450_553)
21453.                      $I_L21451_488 = 1 + $I_L21451_488
21451.                      if ( $I_L21451_488 >= n_profile ) exit
21451.                   enddo
21454.                   $I_L21450_553 = 1 + $I_L21450_553
21453.                   if ( $I_L21450_553 >= i_last_layer + -i_first_layer + 1 ) exit
21453.                enddo
21453.             endif
21453.          endif
21457.          if ( -2 + n_order_phase >= 0 ) then
21458.             if ( i_last_layer + -i_first_layer >= 0 ) then
21459.                if ( n_profile > 0 ) then
21458.                   $I_L21458_609 = 0
21458.                   do
21457.                      $I_L21457_605 = 0
21457.                      do
21459.                         $I_L21459_603 = 0
21459.                         do
21458.                            $I_L21458_588 = 0
21458. !dir$ shortloop16
21458. !dir$ blocking_size( 8, 8 )
21458.                            do
21457.                               $I_L21457_585 = 0
21457.                               if ( min( -1 + n_order_phase, 8 + 8 * $I_L21457_605 ) + -8 * $I_L21457_605 >= 4 ) then
21457.                                  $I_L21457_620 = 0
21457. !dir$ shortloop16
21457. !dir$ blocking_size( 8, 8 )
21457.                                  do
21459.                                     $I_L21459_490 = 0
21459. !dir$ ivdep
21459. !dir$ blocking_size( 256, 256 )
21459.                                     do
21460.                                        phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 2) = phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 1) * asymmetry($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609)
21460.                                        phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 3) = phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 2) * asymmetry($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609)
21460.                                        phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 4) = phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 3) * asymmetry($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609)
21460.                                        phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 5) = phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, 8 * $I_L21457_605 + 4 * $I_L21457_620 + 4) * asymmetry($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609)
21459.                                        $I_L21459_490 = 1 + $I_L21459_490
21459.                                        if ( $I_L21459_490 >= min( n_profile, 256 + 256 * $I_L21459_603 ) + -256 * $I_L21459_603 ) exit
21459.                                     enddo
21457.                                     $I_L21457_620 = 1 + $I_L21457_620
21457.                                     if ( $I_L21457_620 >= _rsh( min( -1 + n_order_phase, 8 + 8 * $I_L21457_605 ) + -8 * $I_L21457_605, 2 ) ) exit
21457.                                  enddo
21457.                                  $I_L21457_585 = and( 0xfffffffffffffffcUL, min( -1 + n_order_phase, 8 + 8 * $I_L21457_605 ) + -8 * $I_L21457_605 )
21457.                               endif
21457.                               if ( $I_L21457_585 < min( -1 + n_order_phase, 8 + 8 * $I_L21457_605 ) + -8 * $I_L21457_605 ) then
21457.                                  $I_L21457_617 = 0
21457. !dir$ shortloop16
21457. !dir$ blocking_size( 8, 8 )
21457.                                  do
21459.                                     $I_L21459_490 = 0
21459. !dir$ ivdep
21459. !dir$ blocking_size( 256, 256 )
21459.                                     do
21460.                                        phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, $I_L21457_585 + $I_L21457_617 + 8 * $I_L21457_605 + 2) = phase_fnc($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609, $I_L21457_585 + $I_L21457_617 + 8 * $I_L21457_605 + 1) * asymmetry($I_L21459_490 + 256 * $I_L21459_603 + 1, i_first_layer + $I_L21458_588 + 8 * $I_L21458_609)
21459.                                        $I_L21459_490 = 1 + $I_L21459_490
21459.                                        if ( $I_L21459_490 >= min( n_profile, 256 + 256 * $I_L21459_603 ) + -256 * $I_L21459_603 ) exit
21459.                                     enddo
21457.                                     $I_L21457_617 = 1 + $I_L21457_617
21457.                                     if ( $I_L21457_617 >= min( -1 + n_order_phase, 8 + 8 * $I_L21457_605 ) + -$I_L21457_585 + -8 * $I_L21457_605 ) exit
21457.                                  enddo
21457.                               endif
21458.                               $I_L21458_588 = 1 + $I_L21458_588
21462.                               if ( $I_L21458_588 >= min( i_last_layer + -i_first_layer + 1, 8 + 8 * $I_L21458_609 ) + -8 * $I_L21458_609 ) exit
21462.                            enddo
21459.                            $I_L21459_603 = 1 + $I_L21459_603
21459.                            if ( $I_L21459_603 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
21459.                         enddo
21457.                         $I_L21457_605 = 1 + $I_L21457_605
21463.                         if ( $I_L21457_605 >= 1 + max( 0, -1 + _rsh( 6 + n_order_phase, 3 ) ) ) exit
21463.                      enddo
21458.                      $I_L21458_609 = 1 + $I_L21458_609
21458.                      if ( $I_L21458_609 >= 1 + max( 0, -1 + _rsh( i_last_layer + -i_first_layer + 8, 3 ) ) ) exit
21458.                   enddo
21458.                endif
21458.             endif
21458.          endif
21468.          if ( l_rescale ) then
21469.             if ( n_order_forward + -n_order_phase == 0 ) then
21470.                if ( i_last_layer + -i_first_layer >= 0 ) then
21471.                   if ( n_profile > 0 ) then
21470.                      $I_L21470_559 = 0
21470.                      do
21471.                         $I_L21471_497 = 0
21471. !dir$ ivdep
21471.                         do
21472.                            forward_scatter(1 + $I_L21471_497, i_first_layer + $I_L21470_559) = phase_fnc(1 + $I_L21471_497, i_first_layer + $I_L21470_559, n_order_phase)
21473.                            $I_L21471_497 = 1 + $I_L21471_497
21471.                            if ( $I_L21471_497 >= n_profile ) exit
21471.                         enddo
21474.                         $I_L21470_559 = 1 + $I_L21470_559
21473.                         if ( $I_L21470_559 >= i_last_layer + -i_first_layer + 1 ) exit
21473.                      enddo
21473.                   endif
21473.                endif
21475.             else if ( n_order_phase + -n_order_forward == -1 ) then
21476.                if ( i_last_layer + -i_first_layer >= 0 ) then
21477.                   if ( n_profile > 0 ) then
21476.                      $I_L21476_557 = 0
21476.                      do
21477.                         $I_L21477_495 = 0
21477. !dir$ ivdep
21477.                         do
21478.                            forward_scatter(1 + $I_L21477_495, i_first_layer + $I_L21476_557) = phase_fnc(1 + $I_L21477_495, i_first_layer + $I_L21476_557, n_order_phase) * asymmetry(1 + $I_L21477_495, i_first_layer + $I_L21476_557)
21480.                            $I_L21477_495 = 1 + $I_L21477_495
21477.                            if ( $I_L21477_495 >= n_profile ) exit
21477.                         enddo
21481.                         $I_L21476_557 = 1 + $I_L21476_557
21480.                         if ( $I_L21476_557 >= i_last_layer + -i_first_layer + 1 ) exit
21480.                      enddo
21480.                   endif
21480.                endif
21480.             else if ( i_last_layer + -i_first_layer >= 0 ) then
21485.                if ( n_profile > 0 ) then
21484.                   $I_L21484_555 = 0
21484.                   do
21485.                      $I_L21485_493 = 0
21485. !dir$ ivdep
21485.                      do
21486.                         forward_scatter(1 + $I_L21485_493, i_first_layer + $I_L21484_555) = k_ext_scat(1 + $I_L21485_493, i_first_layer + $I_L21484_555) * asymmetry(1 + $I_L21485_493, i_first_layer + $I_L21484_555) ** n_order_forward
21488.                         $I_L21485_493 = 1 + $I_L21485_493
21485.                         if ( $I_L21485_493 >= n_profile ) exit
21485.                      enddo
21489.                      $I_L21484_555 = 1 + $I_L21484_555
21488.                      if ( $I_L21484_555 >= i_last_layer + -i_first_layer + 1 ) exit
21488.                   enddo
21488.                endif
21488.             endif
21488.          endif
21488.       else
21501.          if ( cvmg( max( n_order_phase, n_order_forward ), n_order_phase, l_rescale ) > 0 ) then
21501.             $I_L21501_599 = 0
21501.             do
21503.                ipa$18538 = loc( prsc_pressure(1) )
21503.                prsc_pressure = _copyin( prsc_pressure(1) )
21503.                ipa$18541 = loc( phase_fnc(1, 1, 1 + $I_L21501_599) )
21503.                opt_property = _copyin( phase_fnc(1, 1, 1 + $I_L21501_599) )
21503.                t$914 = nd_profile
21503.                t$915 = nd_layer
21503.                t$3118 = max( 0, nd_profile )
21503.                t$3119 = nd_profile
21503.                t$3120 = max( 0, nd_layer )
21503.                t$3121 = ( nd_profile * nd_layer )
21503.                t$912 = nd_profile_prsc
21503.                t$913 = nd_opt_level_prsc
21503.                t$3122 = max( 0, nd_profile_prsc )
21503.                t$3123 = nd_profile_prsc
21503.                t$3124 = max( 0, nd_opt_level_prsc )
21503.                t$3125 = ( nd_opt_level_prsc * nd_profile_prsc )
21503.                t$916 = id_1
21503.                t$917 = id_2
21503.                t$3126 = id_2 + -id_1 + 1
21503.                t$3127 = max( 0, id_2 + -id_1 + 1 )
21503.                t$3128 = nd_profile * max( 0, id_2 + -id_1 + 1 )
21503.                t$3131 = 8 * nd_opt_level_prsc
21503.                t$3132 = 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21503.                t$3134 = 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21503.                t$3135 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21503.                t$3137 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21503.                t$3138 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21503.                t$3140 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21503.                t$3129 = int( _alloc( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
21503.                t$3130 = t$3129
21503.                t$3133 = t$3129 + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21503.                t$3136 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21503.                t$3139 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21503.                if ( n_profile > 0 ) then
21503.                   $I_L21503_591 = 0
21503.                   do
21503.                      if ( n_opt_level_prsc > 0 ) then
21503.                         $I_L21503_499 = 0
21503. !dir$ ivdep
21503.                         do
21503.                            prsc_pressure_g(1 + $I_L21503_499) = prsc_pressure(1 + $I_L21503_591, 1 + $I_L21503_499)
21503.                            prsc_opt_property_g(1 + $I_L21503_499) = prsc_phase_fnc(1 + $I_L21503_591, 1 + $I_L21503_499, 1 + $I_L21501_599)
21503.                            $I_L21503_499 = 1 + $I_L21503_499
21503.                            if ( $I_L21503_499 >= n_opt_level_prsc ) exit
21503.                         enddo
21503.                      endif
21503.                      t$1260 = n_opt_level_prsc
21503.                      t$4450 = max( 0, n_opt_level_prsc )
21503.                      if ( n_opt_level_prsc /= 1 ) then
21503.                         d2(1) = 0.0
21503.                         work(1) = 0.0
21503.                         if ( -3 + n_opt_level_prsc >= 0 ) then
21503.                            $d2_WR0_R0 = 0.0
21503.                            $work_WR0_R1 = 0.0
21503.                            $I_L21503_501 = 0
21503. !dir$ unroll 2
21503.                            do
21503.                               $sigma_S17 = ( ( prsc_pressure_g(2 + $I_L21503_501) + -prsc_pressure_g(1 + $I_L21503_501) ) * 1.0/( prsc_pressure_g(3 + $I_L21503_501) + -prsc_pressure_g(1 + $I_L21503_501) ) )
21503.                               $rho_S18 = 2.0 + $sigma_S17 * $d2_WR0_R0
21503.                               $d2_WR0_R0 = ( ( -1.0 + $sigma_S17 ) * 1.0/( 2.0 + $sigma_S17 * $d2_WR0_R0 ) )
21503.                               d2(2 + $I_L21503_501) = ( ( -1.0 + $sigma_S17 ) * 1.0/$rho_S18 )
21503.                               $SCF_P0 = ( 1.0/( prsc_pressure_g(3 + $I_L21503_501) + -prsc_pressure_g(1 + $I_L21503_501) ) * ( ( ( prsc_opt_property_g(3 + $I_L21503_501) + -prsc_opt_property_g(2 + $I_L21503_501) ) * 1.0/( prsc_pressure_g(3 + $I_L21503_501) + -prsc_pressure_g(2 + $I_L21503_501) ) ) + -( ( prsc_opt_property_g(2 + $I_L21503_501) + -prsc_opt_property_g(1 + $I_L21503_501) ) * 1.0/( prsc_pressure_g(2 + $I_L21503_501) + -prsc_pressure_g(1 + $I_L21503_501) ) ) ) * 6.0 )
21503.                               $work_WR0_R1 = ( ( -( $sigma_S17 * $work_WR0_R1 ) + $SCF_P0 ) * 1.0/$rho_S18 )
21503.                               work(2 + $I_L21503_501) = $work_WR0_R1
21503.                               $I_L21503_501 = 1 + $I_L21503_501
21503.                               if ( $I_L21503_501 >= -2 + n_opt_level_prsc ) exit
21503.                            enddo
21503.                         endif
21503.                         d2(n_opt_level_prsc) = 0.0
21503.                         if ( 1 + -n_opt_level_prsc < 0 ) then
21503.                            $d2_WR0_R2 = 0.0
21503.                            $I_L21503_503 = 0
21503. !dir$ unroll 4
21503.                            do
21503.                               $d2_WR0_R2 = d2(n_opt_level_prsc + -$I_L21503_503 + -1) * $d2_WR0_R2 + work(n_opt_level_prsc + -$I_L21503_503 + -1)
21503.                               d2(n_opt_level_prsc + -$I_L21503_503 + -1) = $d2_WR0_R2
21503.                               $I_L21503_503 = 1 + $I_L21503_503
21503.                               if ( $I_L21503_503 >= -1 + n_opt_level_prsc ) exit
21503.                            enddo
21503.                         endif
21503.                      endif
21503.                      if ( i_last_layer + -i_first_layer < 0 ) then
21503.                         $I_L21503_591 = 1 + $I_L21503_591
21503.                      else if ( n_opt_level_prsc == 1 ) then
21503.                      else
21503.                      endif
21503.                      if ( $I_L21503_591 >= n_profile ) exit
21503.                   enddo
21503.                   goto 10
21503.                else
21503.    10             continue
21503.                   _free( t$3129 )
21503.                endif
21503.                phase_fnc(1, 1, 1 + $I_L21501_599) = _copyout( opt_property )
21503.                prsc_pressure(1) = _copyout( prsc_pressure )
21513.                if ( i_last_layer + -i_first_layer >= 0 ) then
21514.                   if ( n_profile > 0 ) then
21513.                      $I_L21513_561 = 0
21513.                      do
21514.                         $I_L21514_507 = 0
21514. !dir$ ivdep
21514.                         do
21515.                            phase_fnc(1 + $I_L21514_507, i_first_layer + $I_L21513_561, 1 + $I_L21501_599) = k_ext_scat(1 + $I_L21514_507, i_first_layer + $I_L21513_561) * phase_fnc(1 + $I_L21514_507, i_first_layer + $I_L21513_561, 1 + $I_L21501_599)
21516.                            $I_L21514_507 = 1 + $I_L21514_507
21514.                            if ( $I_L21514_507 >= n_profile ) exit
21514.                         enddo
21517.                         $I_L21513_561 = 1 + $I_L21513_561
21516.                         if ( $I_L21513_561 >= i_last_layer + -i_first_layer + 1 ) exit
21516.                      enddo
21516.                   endif
21516.                endif
21519.                $I_L21501_599 = 1 + $I_L21501_599
21517.                if ( $I_L21501_599 >= cvmg( max( n_order_phase, n_order_forward ), n_order_phase, l_rescale ) ) exit
21517.             enddo
21517.          endif
21524.          if ( l_rescale ) then
21525.             if ( i_last_layer + -i_first_layer >= 0 ) then
21526.                if ( n_profile > 0 ) then
21525.                   $I_L21525_563 = 0
21525.                   do
21526.                      $I_L21526_509 = 0
21526. !dir$ ivdep
21526.                      do
21527.                         forward_scatter(1 + $I_L21526_509, i_first_layer + $I_L21525_563) = phase_fnc(1 + $I_L21526_509, i_first_layer + $I_L21525_563, n_order_forward)
21528.                         $I_L21526_509 = 1 + $I_L21526_509
21526.                         if ( $I_L21526_509 >= n_profile ) exit
21526.                      enddo
21529.                      $I_L21525_563 = 1 + $I_L21525_563
21528.                      if ( $I_L21525_563 >= i_last_layer + -i_first_layer + 1 ) exit
21528.                   enddo
21528.                endif
21528.             endif
21528.          endif
21528.       endif
21536.       if ( l_solar_phf ) then
21545.          if ( n_direction > 0 ) then
21545.             $I_L21545_607 = 0
21545.             do
21548.                ipa$18581 = loc( prsc_pressure(1) )
21548.                prsc_pressure = _copyin( prsc_pressure(1) )
21548.                t$914 = nd_profile
21548.                t$915 = nd_layer
21548.                t$3118 = max( 0, nd_profile )
21548.                t$3119 = nd_profile
21548.                t$3120 = max( 0, nd_layer )
21548.                t$3121 = ( nd_profile * nd_layer )
21548.                t$912 = nd_profile_prsc
21548.                t$913 = nd_opt_level_prsc
21548.                t$3122 = max( 0, nd_profile_prsc )
21548.                t$3123 = nd_profile_prsc
21548.                t$3124 = max( 0, nd_opt_level_prsc )
21548.                t$3125 = ( nd_opt_level_prsc * nd_profile_prsc )
21548.                t$916 = id_1
21548.                t$917 = id_2
21548.                t$3126 = id_2 + -id_1 + 1
21548.                t$3127 = max( 0, id_2 + -id_1 + 1 )
21548.                t$3128 = nd_profile * max( 0, id_2 + -id_1 + 1 )
21548.                t$3131 = 8 * nd_opt_level_prsc
21548.                t$3132 = 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21548.                t$3134 = 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21548.                t$3135 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21548.                t$3137 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21548.                t$3138 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21548.                t$3140 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21548.                t$3129 = int( _alloc( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
21548.                t$3130 = t$3129
21548.                t$3133 = t$3129 + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21548.                t$3136 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21548.                t$3139 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21548.                if ( n_profile > 0 ) then
21548.                   $I_L21548_593 = 0
21548.                   do
21548.                      if ( n_opt_level_prsc > 0 ) then
21548.                         $I_L21548_511 = 0
21548. !dir$ ivdep
21548.                         do
21548.                            prsc_pressure_g(1 + $I_L21548_511) = prsc_pressure(1 + $I_L21548_593, 1 + $I_L21548_511)
21548.                            prsc_opt_property_g(1 + $I_L21548_511) = prsc_phase_fnc(1 + $I_L21548_593, 1 + $I_L21548_511, 1)
21548.                            $I_L21548_511 = 1 + $I_L21548_511
21548.                            if ( $I_L21548_511 >= n_opt_level_prsc ) exit
21548.                         enddo
21548.                      endif
21548.                      t$1260 = n_opt_level_prsc
21548.                      t$4450 = max( 0, n_opt_level_prsc )
21548.                      if ( n_opt_level_prsc /= 1 ) then
21548.                         d2(1) = 0.0
21548.                         work(1) = 0.0
21548.                         if ( -3 + n_opt_level_prsc >= 0 ) then
21548.                            $d2_WR0_R3 = 0.0
21548.                            $work_WR0_R4 = 0.0
21548.                            $I_L21548_513 = 0
21548. !dir$ unroll 2
21548.                            do
21548.                               $sigma_S33 = ( ( prsc_pressure_g(2 + $I_L21548_513) + -prsc_pressure_g(1 + $I_L21548_513) ) * 1.0/( prsc_pressure_g(3 + $I_L21548_513) + -prsc_pressure_g(1 + $I_L21548_513) ) )
21548.                               $rho_S34 = 2.0 + $sigma_S33 * $d2_WR0_R3
21548.                               $d2_WR0_R3 = ( ( -1.0 + $sigma_S33 ) * 1.0/( 2.0 + $sigma_S33 * $d2_WR0_R3 ) )
21548.                               d2(2 + $I_L21548_513) = ( ( -1.0 + $sigma_S33 ) * 1.0/$rho_S34 )
21548.                               $SCF_P1 = ( 1.0/( prsc_pressure_g(3 + $I_L21548_513) + -prsc_pressure_g(1 + $I_L21548_513) ) * ( ( ( prsc_opt_property_g(3 + $I_L21548_513) + -prsc_opt_property_g(2 + $I_L21548_513) ) * 1.0/( prsc_pressure_g(3 + $I_L21548_513) + -prsc_pressure_g(2 + $I_L21548_513) ) ) + -( ( prsc_opt_property_g(2 + $I_L21548_513) + -prsc_opt_property_g(1 + $I_L21548_513) ) * 1.0/( prsc_pressure_g(2 + $I_L21548_513) + -prsc_pressure_g(1 + $I_L21548_513) ) ) ) * 6.0 )
21548.                               $work_WR0_R4 = ( ( -( $sigma_S33 * $work_WR0_R4 ) + $SCF_P1 ) * 1.0/$rho_S34 )
21548.                               work(2 + $I_L21548_513) = $work_WR0_R4
21548.                               $I_L21548_513 = 1 + $I_L21548_513
21548.                               if ( $I_L21548_513 >= -2 + n_opt_level_prsc ) exit
21548.                            enddo
21548.                         endif
21548.                         d2(n_opt_level_prsc) = 0.0
21548.                         if ( 1 + -n_opt_level_prsc < 0 ) then
21548.                            $d2_WR0_R5 = 0.0
21548.                            $I_L21548_515 = 0
21548. !dir$ unroll 4
21548.                            do
21548.                               $d2_WR0_R5 = d2(n_opt_level_prsc + -$I_L21548_515 + -1) * $d2_WR0_R5 + work(n_opt_level_prsc + -$I_L21548_515 + -1)
21548.                               d2(n_opt_level_prsc + -$I_L21548_515 + -1) = $d2_WR0_R5
21548.                               $I_L21548_515 = 1 + $I_L21548_515
21548.                               if ( $I_L21548_515 >= -1 + n_opt_level_prsc ) exit
21548.                            enddo
21548.                         endif
21548.                      endif
21548.                      if ( i_last_layer + -i_first_layer < 0 ) then
21548.                         $I_L21548_593 = 1 + $I_L21548_593
21548.                      else if ( n_opt_level_prsc == 1 ) then
21548.                      else
21548.                      endif
21548.                      if ( $I_L21548_593 >= n_profile ) exit
21548.                   enddo
21548.                   goto 20
21548.                else
21548.    20             continue
21548.                   _free( t$3129 )
21548.                endif
21548.                prsc_pressure(1) = _copyout( prsc_pressure )
21555.                if ( n_profile > 0 ) then
21555.                   $I_L21555_519 = 0
21555. !dir$ ivdep
21555.                   do
21558.                      p_legendre_ls_m1(1 + $I_L21555_519) = 1.0
21559.                      p_legendre_ls(1 + $I_L21555_519) = mu_v(1 + $I_L21555_519, 1 + $I_L21545_607)
21560.                      $I_L21555_519 = 1 + $I_L21555_519
21555.                      if ( $I_L21555_519 >= n_profile ) exit
21555.                   enddo
21555.                endif
21561.                if ( i_last_layer + -i_first_layer >= 0 ) then
21562.                   if ( n_profile > 0 ) then
21561.                      $I_L21561_565 = 0
21561.                      if ( i_last_layer + -i_first_layer + -3 >= 0 ) then
21561.                         $I_L21561_622 = 0
21561. !dir$ blocking_size( 0, 0 )
21561.                         do
21562.                            $I_L21562_521 = 0
21562. !dir$ ivdep
21562. !dir$ blocking_size( 0, 0 )
21562.                            do
21563.                               phase_fnc_solar(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622, 1 + $I_L21545_607) = 1.0 + phf_coeff(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622) * p_legendre_ls(1 + $I_L21562_521) * 3.0
21563.                               phase_fnc_solar(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622 + 1, 1 + $I_L21545_607) = 1.0 + phf_coeff(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622 + 1) * p_legendre_ls(1 + $I_L21562_521) * 3.0
21563.                               phase_fnc_solar(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622 + 2, 1 + $I_L21545_607) = 1.0 + phf_coeff(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622 + 2) * p_legendre_ls(1 + $I_L21562_521) * 3.0
21563.                               phase_fnc_solar(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622 + 3, 1 + $I_L21545_607) = 1.0 + phf_coeff(1 + $I_L21562_521, i_first_layer + 4 * $I_L21561_622 + 3) * p_legendre_ls(1 + $I_L21562_521) * 3.0
21565.                               $I_L21562_521 = 1 + $I_L21562_521
21562.                               if ( $I_L21562_521 >= n_profile ) exit
21562.                            enddo
21566.                            $I_L21561_622 = 1 + $I_L21561_622
21565.                            if ( $I_L21561_622 >= _rsh( i_last_layer + -i_first_layer + 1, 2 ) ) exit
21565.                         enddo
21566.                         $I_L21561_565 = and( 0xfffffffffffffffcUL, i_last_layer + -i_first_layer + 1 )
21566.                      endif
21561.                      if ( $I_L21561_565 < i_last_layer + -i_first_layer + 1 ) then
21561.                         $I_L21561_611 = 0
21561. !dir$ blocking_size( 0, 0 )
21561.                         do
21562.                            $I_L21562_521 = 0
21562. !dir$ ivdep
21562. !dir$ blocking_size( 0, 0 )
21562.                            do
21563.                               phase_fnc_solar(1 + $I_L21562_521, i_first_layer + $I_L21561_565 + $I_L21561_611, 1 + $I_L21545_607) = 1.0 + phf_coeff(1 + $I_L21562_521, i_first_layer + $I_L21561_565 + $I_L21561_611) * p_legendre_ls(1 + $I_L21562_521) * 3.0
21565.                               $I_L21562_521 = 1 + $I_L21562_521
21562.                               if ( $I_L21562_521 >= n_profile ) exit
21562.                            enddo
21566.                            $I_L21561_611 = 1 + $I_L21561_611
21565.                            if ( $I_L21561_611 >= i_last_layer + -i_first_layer + -$I_L21561_565 + 1 ) exit
21565.                         enddo
21565.                      endif
21565.                   endif
21565.                endif
21568.                if ( -2 + n_order_phase_solar >= 0 ) then
21568.                   $I_L21568_601 = 0
21568.                   do
21571.                      if ( l_henyey_greenstein_pf == 0 ) then
21580.                         ipa$18621 = loc( prsc_pressure(1) )
21580.                         prsc_pressure = _copyin( prsc_pressure(1) )
21580.                         t$914 = nd_profile
21580.                         t$915 = nd_layer
21580.                         t$3118 = max( 0, nd_profile )
21580.                         t$3119 = nd_profile
21580.                         t$3120 = max( 0, nd_layer )
21580.                         t$3121 = ( nd_profile * nd_layer )
21580.                         t$912 = nd_profile_prsc
21580.                         t$913 = nd_opt_level_prsc
21580.                         t$3122 = max( 0, nd_profile_prsc )
21580.                         t$3123 = nd_profile_prsc
21580.                         t$3124 = max( 0, nd_opt_level_prsc )
21580.                         t$3125 = ( nd_opt_level_prsc * nd_profile_prsc )
21580.                         t$916 = id_1
21580.                         t$917 = id_2
21580.                         t$3126 = id_2 + -id_1 + 1
21580.                         t$3127 = max( 0, id_2 + -id_1 + 1 )
21580.                         t$3128 = nd_profile * max( 0, id_2 + -id_1 + 1 )
21580.                         t$3131 = 8 * nd_opt_level_prsc
21580.                         t$3132 = 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21580.                         t$3134 = 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21580.                         t$3135 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21580.                         t$3137 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21580.                         t$3138 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21580.                         t$3140 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21580.                         t$3129 = int( _alloc( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
21580.                         t$3130 = t$3129
21580.                         t$3133 = t$3129 + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21580.                         t$3136 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21580.                         t$3139 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21580.                         if ( n_profile > 0 ) then
21580.                            $I_L21580_595 = 0
21580.                            do
21580.                               if ( n_opt_level_prsc > 0 ) then
21580.                                  $I_L21580_525 = 0
21580. !dir$ ivdep
21580.                                  do
21580.                                     prsc_pressure_g(1 + $I_L21580_525) = prsc_pressure(1 + $I_L21580_595, 1 + $I_L21580_525)
21580.                                     prsc_opt_property_g(1 + $I_L21580_525) = prsc_phase_fnc(1 + $I_L21580_595, 1 + $I_L21580_525, 2 + $I_L21568_601)
21580.                                     $I_L21580_525 = 1 + $I_L21580_525
21580.                                     if ( $I_L21580_525 >= n_opt_level_prsc ) exit
21580.                                  enddo
21580.                               endif
21580.                               t$1260 = n_opt_level_prsc
21580.                               t$4450 = max( 0, n_opt_level_prsc )
21580.                               if ( n_opt_level_prsc /= 1 ) then
21580.                                  d2(1) = 0.0
21580.                                  work(1) = 0.0
21580.                                  if ( -3 + n_opt_level_prsc >= 0 ) then
21580.                                     $d2_WR0_R6 = 0.0
21580.                                     $work_WR0_R7 = 0.0
21580.                                     $I_L21580_527 = 0
21580. !dir$ unroll 2
21580.                                     do
21580.                                        $sigma_S52 = ( ( prsc_pressure_g(2 + $I_L21580_527) + -prsc_pressure_g(1 + $I_L21580_527) ) * 1.0/( prsc_pressure_g(3 + $I_L21580_527) + -prsc_pressure_g(1 + $I_L21580_527) ) )
21580.                                        $rho_S53 = 2.0 + $sigma_S52 * $d2_WR0_R6
21580.                                        $d2_WR0_R6 = ( ( -1.0 + $sigma_S52 ) * 1.0/( 2.0 + $sigma_S52 * $d2_WR0_R6 ) )
21580.                                        d2(2 + $I_L21580_527) = ( ( -1.0 + $sigma_S52 ) * 1.0/$rho_S53 )
21580.                                        $SCF_P2 = ( 1.0/( prsc_pressure_g(3 + $I_L21580_527) + -prsc_pressure_g(1 + $I_L21580_527) ) * ( ( ( prsc_opt_property_g(3 + $I_L21580_527) + -prsc_opt_property_g(2 + $I_L21580_527) ) * 1.0/( prsc_pressure_g(3 + $I_L21580_527) + -prsc_pressure_g(2 + $I_L21580_527) ) ) + -( ( prsc_opt_property_g(2 + $I_L21580_527) + -prsc_opt_property_g(1 + $I_L21580_527) ) * 1.0/( prsc_pressure_g(2 + $I_L21580_527) + -prsc_pressure_g(1 + $I_L21580_527) ) ) ) * 6.0 )
21580.                                        $work_WR0_R7 = ( ( -( $sigma_S52 * $work_WR0_R7 ) + $SCF_P2 ) * 1.0/$rho_S53 )
21580.                                        work(2 + $I_L21580_527) = $work_WR0_R7
21580.                                        $I_L21580_527 = 1 + $I_L21580_527
21580.                                        if ( $I_L21580_527 >= -2 + n_opt_level_prsc ) exit
21580.                                     enddo
21580.                                  endif
21580.                                  d2(n_opt_level_prsc) = 0.0
21580.                                  if ( 1 + -n_opt_level_prsc < 0 ) then
21580.                                     $d2_WR0_R8 = 0.0
21580.                                     $I_L21580_529 = 0
21580. !dir$ unroll 4
21580.                                     do
21580.                                        $d2_WR0_R8 = d2(n_opt_level_prsc + -$I_L21580_529 + -1) * $d2_WR0_R8 + work(n_opt_level_prsc + -$I_L21580_529 + -1)
21580.                                        d2(n_opt_level_prsc + -$I_L21580_529 + -1) = $d2_WR0_R8
21580.                                        $I_L21580_529 = 1 + $I_L21580_529
21580.                                        if ( $I_L21580_529 >= -1 + n_opt_level_prsc ) exit
21580.                                     enddo
21580.                                  endif
21580.                               endif
21580.                               if ( i_last_layer + -i_first_layer < 0 ) then
21580.                                  $I_L21580_595 = 1 + $I_L21580_595
21580.                               else if ( n_opt_level_prsc == 1 ) then
21580.                               else
21580.                               endif
21580.                               if ( $I_L21580_595 >= n_profile ) exit
21580.                            enddo
21580.                            goto 30
21580.                         else
21580.    30                      continue
21580.                            _free( t$3129 )
21580.                         endif
21580.                         prsc_pressure(1) = _copyout( prsc_pressure )
21574.                      else if ( i_last_layer + -i_first_layer >= 0 ) then
21575.                         if ( n_profile > 0 ) then
21574.                            $I_L21574_567 = 0
21574.                            do
21575.                               $I_L21575_523 = 0
21575. !dir$ ivdep
21575.                               do
21576.                                  phf_coeff(1 + $I_L21575_523, i_first_layer + $I_L21574_567) = phf_coeff(1 + $I_L21575_523, i_first_layer + $I_L21574_567) * asymmetry(1 + $I_L21575_523, i_first_layer + $I_L21574_567)
21577.                                  $I_L21575_523 = 1 + $I_L21575_523
21575.                                  if ( $I_L21575_523 >= n_profile ) exit
21575.                               enddo
21578.                               $I_L21574_567 = 1 + $I_L21574_567
21577.                               if ( $I_L21574_567 >= i_last_layer + -i_first_layer + 1 ) exit
21577.                            enddo
21577.                         endif
21577.                      endif
21590.                      $cnst1_S62 = 1.0 + -( 1.0/( ( 2 + $I_L21568_601 ) ) )
21591.                      if ( n_profile > 0 ) then
21591.                         $I_L21591_533 = 0
21591. !dir$ ivdep
21591.                         do
21592.                            $p_legendre_tmp_WR0_R9 = p_legendre_ls(1 + $I_L21591_533)
21593.                            p_legendre_ls(1 + $I_L21591_533) = ( 1.0 + $cnst1_S62 ) * $p_legendre_tmp_WR0_R9 * mu_v(1 + $I_L21591_533, 1 + $I_L21545_607) + -( $cnst1_S62 * p_legendre_ls_m1(1 + $I_L21591_533) )
21596.                            p_legendre_ls_m1(1 + $I_L21591_533) = $p_legendre_tmp_WR0_R9
21597.                            $I_L21591_533 = 1 + $I_L21591_533
21591.                            if ( $I_L21591_533 >= n_profile ) exit
21591.                         enddo
21591.                      endif
21599.                      if ( i_last_layer + -i_first_layer >= 0 ) then
21600.                         if ( n_profile > 0 ) then
21599.                            $I_L21599_569 = 0
21599.                            if ( i_last_layer + -i_first_layer + -3 >= 0 ) then
21599.                               $I_L21599_624 = 0
21599. !dir$ blocking_size( 0, 0 )
21599.                               do
21600.                                  $I_L21600_535 = 0
21600. !dir$ ivdep
21600. !dir$ blocking_size( 0, 0 )
21600.                                  do
21601.                                     phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624, 1 + $I_L21545_607) = phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624, 1 + $I_L21545_607) + phf_coeff(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624) * p_legendre_ls(1 + $I_L21600_535) * real( 5 + 2 * $I_L21568_601, 8 )
21601.                                     phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 1, 1 + $I_L21545_607) = phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 1, 1 + $I_L21545_607) + phf_coeff(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 1) * p_legendre_ls(1 + $I_L21600_535) * real( 5 + 2 * $I_L21568_601, 8 )
21601.                                     phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 2, 1 + $I_L21545_607) = phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 2, 1 + $I_L21545_607) + phf_coeff(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 2) * p_legendre_ls(1 + $I_L21600_535) * real( 5 + 2 * $I_L21568_601, 8 )
21601.                                     phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 3, 1 + $I_L21545_607) = phase_fnc_solar(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 3, 1 + $I_L21545_607) + phf_coeff(1 + $I_L21600_535, i_first_layer + 4 * $I_L21599_624 + 3) * p_legendre_ls(1 + $I_L21600_535) * real( 5 + 2 * $I_L21568_601, 8 )
21604.                                     $I_L21600_535 = 1 + $I_L21600_535
21600.                                     if ( $I_L21600_535 >= n_profile ) exit
21600.                                  enddo
21605.                                  $I_L21599_624 = 1 + $I_L21599_624
21604.                                  if ( $I_L21599_624 >= _rsh( i_last_layer + -i_first_layer + 1, 2 ) ) exit
21604.                               enddo
21605.                               $I_L21599_569 = and( 0xfffffffffffffffcUL, i_last_layer + -i_first_layer + 1 )
21605.                            endif
21599.                            if ( $I_L21599_569 < i_last_layer + -i_first_layer + 1 ) then
21599.                               $I_L21599_614 = 0
21599. !dir$ blocking_size( 0, 0 )
21599.                               do
21600.                                  $I_L21600_535 = 0
21600. !dir$ ivdep
21600. !dir$ blocking_size( 0, 0 )
21600.                                  do
21601.                                     phase_fnc_solar(1 + $I_L21600_535, i_first_layer + $I_L21599_569 + $I_L21599_614, 1 + $I_L21545_607) = phase_fnc_solar(1 + $I_L21600_535, i_first_layer + $I_L21599_569 + $I_L21599_614, 1 + $I_L21545_607) + phf_coeff(1 + $I_L21600_535, i_first_layer + $I_L21599_569 + $I_L21599_614) * p_legendre_ls(1 + $I_L21600_535) * real( 5 + 2 * $I_L21568_601, 8 )
21604.                                     $I_L21600_535 = 1 + $I_L21600_535
21600.                                     if ( $I_L21600_535 >= n_profile ) exit
21600.                                  enddo
21605.                                  $I_L21599_614 = 1 + $I_L21599_614
21604.                                  if ( $I_L21599_614 >= i_last_layer + -i_first_layer + -$I_L21599_569 + 1 ) exit
21604.                               enddo
21604.                            endif
21604.                         endif
21604.                      endif
21607.                      $I_L21568_601 = 1 + $I_L21568_601
21605.                      if ( $I_L21568_601 >= -1 + n_order_phase_solar ) exit
21605.                   enddo
21605.                endif
21611.                if ( i_last_layer + -i_first_layer >= 0 ) then
21612.                   if ( n_profile > 0 ) then
21611.                      $I_L21611_571 = 0
21611.                      do
21612.                         $I_L21612_537 = 0
21612. !dir$ ivdep
21612.                         do
21613.                            phase_fnc_solar(1 + $I_L21612_537, i_first_layer + $I_L21611_571, 1 + $I_L21545_607) = phase_fnc_solar(1 + $I_L21612_537, i_first_layer + $I_L21611_571, 1 + $I_L21545_607) * k_ext_scat(1 + $I_L21612_537, i_first_layer + $I_L21611_571)
21615.                            $I_L21612_537 = 1 + $I_L21612_537
21612.                            if ( $I_L21612_537 >= n_profile ) exit
21612.                         enddo
21616.                         $I_L21611_571 = 1 + $I_L21611_571
21615.                         if ( $I_L21611_571 >= i_last_layer + -i_first_layer + 1 ) exit
21615.                      enddo
21615.                   endif
21615.                endif
21618.                if ( l_rescale ) then
21621.                   if ( l_henyey_greenstein_pf == 0 ) then
21631.                      ipa$18662 = loc( prsc_pressure(1) )
21631.                      prsc_pressure = _copyin( prsc_pressure(1) )
21631.                      t$914 = nd_profile
21631.                      t$915 = nd_layer
21631.                      t$3118 = max( 0, nd_profile )
21631.                      t$3119 = nd_profile
21631.                      t$3120 = max( 0, nd_layer )
21631.                      t$3121 = ( nd_profile * nd_layer )
21631.                      t$912 = nd_profile_prsc
21631.                      t$913 = nd_opt_level_prsc
21631.                      t$3122 = max( 0, nd_profile_prsc )
21631.                      t$3123 = nd_profile_prsc
21631.                      t$3124 = max( 0, nd_opt_level_prsc )
21631.                      t$3125 = ( nd_opt_level_prsc * nd_profile_prsc )
21631.                      t$916 = id_1
21631.                      t$917 = id_2
21631.                      t$3126 = id_2 + -id_1 + 1
21631.                      t$3127 = max( 0, id_2 + -id_1 + 1 )
21631.                      t$3128 = nd_profile * max( 0, id_2 + -id_1 + 1 )
21631.                      t$3131 = 8 * nd_opt_level_prsc
21631.                      t$3132 = 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21631.                      t$3134 = 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21631.                      t$3135 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21631.                      t$3137 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21631.                      t$3138 = 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21631.                      t$3140 = 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21631.                      t$3129 = int( _alloc( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
21631.                      t$3130 = t$3129
21631.                      t$3133 = t$3129 + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 )
21631.                      t$3136 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 )
21631.                      t$3139 = t$3129 + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 8 * nd_opt_level_prsc + 8 * ( ( 7 + 8 * nd_opt_level_prsc ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
21631.                      if ( n_profile > 0 ) then
21631.                         $I_L21631_597 = 0
21631.                         do
21631.                            if ( n_opt_level_prsc > 0 ) then
21631.                               $I_L21631_541 = 0
21631. !dir$ ivdep
21631.                               do
21631.                                  prsc_pressure_g(1 + $I_L21631_541) = prsc_pressure(1 + $I_L21631_597, 1 + $I_L21631_541)
21631.                                  prsc_opt_property_g(1 + $I_L21631_541) = prsc_phase_fnc(1 + $I_L21631_597, 1 + $I_L21631_541, 1 + n_order_phase_solar)
21631.                                  $I_L21631_541 = 1 + $I_L21631_541
21631.                                  if ( $I_L21631_541 >= n_opt_level_prsc ) exit
21631.                               enddo
21631.                            endif
21631.                            t$1260 = n_opt_level_prsc
21631.                            t$4450 = max( 0, n_opt_level_prsc )
21631.                            if ( n_opt_level_prsc /= 1 ) then
21631.                               d2(1) = 0.0
21631.                               work(1) = 0.0
21631.                               if ( -3 + n_opt_level_prsc >= 0 ) then
21631.                                  $d2_WR0_R10 = 0.0
21631.                                  $work_WR0_R11 = 0.0
21631.                                  $I_L21631_543 = 0
21631. !dir$ unroll 2
21631.                                  do
21631.                                     $sigma_S72 = ( ( prsc_pressure_g(2 + $I_L21631_543) + -prsc_pressure_g(1 + $I_L21631_543) ) * 1.0/( prsc_pressure_g(3 + $I_L21631_543) + -prsc_pressure_g(1 + $I_L21631_543) ) )
21631.                                     $rho_S73 = 2.0 + $sigma_S72 * $d2_WR0_R10
21631.                                     $d2_WR0_R10 = ( ( -1.0 + $sigma_S72 ) * 1.0/( 2.0 + $sigma_S72 * $d2_WR0_R10 ) )
21631.                                     d2(2 + $I_L21631_543) = ( ( -1.0 + $sigma_S72 ) * 1.0/$rho_S73 )
21631.                                     $SCF_P3 = ( 1.0/( prsc_pressure_g(3 + $I_L21631_543) + -prsc_pressure_g(1 + $I_L21631_543) ) * ( ( ( prsc_opt_property_g(3 + $I_L21631_543) + -prsc_opt_property_g(2 + $I_L21631_543) ) * 1.0/( prsc_pressure_g(3 + $I_L21631_543) + -prsc_pressure_g(2 + $I_L21631_543) ) ) + -( ( prsc_opt_property_g(2 + $I_L21631_543) + -prsc_opt_property_g(1 + $I_L21631_543) ) * 1.0/( prsc_pressure_g(2 + $I_L21631_543) + -prsc_pressure_g(1 + $I_L21631_543) ) ) ) * 6.0 )
21631.                                     $work_WR0_R11 = ( ( -( $sigma_S72 * $work_WR0_R11 ) + $SCF_P3 ) * 1.0/$rho_S73 )
21631.                                     work(2 + $I_L21631_543) = $work_WR0_R11
21631.                                     $I_L21631_543 = 1 + $I_L21631_543
21631.                                     if ( $I_L21631_543 >= -2 + n_opt_level_prsc ) exit
21631.                                  enddo
21631.                               endif
21631.                               d2(n_opt_level_prsc) = 0.0
21631.                               if ( 1 + -n_opt_level_prsc < 0 ) then
21631.                                  $d2_WR0_R12 = 0.0
21631.                                  $I_L21631_545 = 0
21631. !dir$ unroll 4
21631.                                  do
21631.                                     $d2_WR0_R12 = d2(n_opt_level_prsc + -$I_L21631_545 + -1) * $d2_WR0_R12 + work(n_opt_level_prsc + -$I_L21631_545 + -1)
21631.                                     d2(n_opt_level_prsc + -$I_L21631_545 + -1) = $d2_WR0_R12
21631.                                     $I_L21631_545 = 1 + $I_L21631_545
21631.                                     if ( $I_L21631_545 >= -1 + n_opt_level_prsc ) exit
21631.                                  enddo
21631.                               endif
21631.                            endif
21631.                            if ( i_last_layer + -i_first_layer < 0 ) then
21631.                               $I_L21631_597 = 1 + $I_L21631_597
21631.                            else if ( n_opt_level_prsc == 1 ) then
21631.                            else
21631.                            endif
21631.                            if ( $I_L21631_597 >= n_profile ) exit
21631.                         enddo
21631.                         goto 40
21631.                      else
21631.    40                   continue
21631.                         _free( t$3129 )
21631.                      endif
21631.                      prsc_pressure(1) = _copyout( prsc_pressure )
21624.                   else if ( i_last_layer + -i_first_layer >= 0 ) then
21625.                      if ( n_profile > 0 ) then
21624.                         $I_L21624_573 = 0
21624.                         do
21625.                            $I_L21625_539 = 0
21625. !dir$ ivdep
21625.                            do
21626.                               phf_coeff(1 + $I_L21625_539, i_first_layer + $I_L21624_573) = phf_coeff(1 + $I_L21625_539, i_first_layer + $I_L21624_573) * asymmetry(1 + $I_L21625_539, i_first_layer + $I_L21624_573)
21627.                               $I_L21625_539 = 1 + $I_L21625_539
21625.                               if ( $I_L21625_539 >= n_profile ) exit
21625.                            enddo
21628.                            $I_L21624_573 = 1 + $I_L21624_573
21627.                            if ( $I_L21624_573 >= i_last_layer + -i_first_layer + 1 ) exit
21627.                         enddo
21627.                      endif
21627.                   endif
21642.                   if ( i_last_layer + -i_first_layer >= 0 ) then
21643.                      if ( n_profile > 0 ) then
21642.                         $I_L21642_575 = 0
21642.                         do
21643.                            $I_L21643_549 = 0
21643. !dir$ ivdep
21643.                            do
21644.                               forward_solar(1 + $I_L21643_549, i_first_layer + $I_L21642_575) = k_ext_scat(1 + $I_L21643_549, i_first_layer + $I_L21642_575) * phf_coeff(1 + $I_L21643_549, i_first_layer + $I_L21642_575)
21646.                               $I_L21643_549 = 1 + $I_L21643_549
21643.                               if ( $I_L21643_549 >= n_profile ) exit
21643.                            enddo
21647.                            $I_L21642_575 = 1 + $I_L21642_575
21646.                            if ( $I_L21642_575 >= i_last_layer + -i_first_layer + 1 ) exit
21646.                         enddo
21646.                      endif
21646.                   endif
21646.                endif
21651.                $I_L21545_607 = 1 + $I_L21545_607
21649.                if ( $I_L21545_607 >= n_direction ) exit
21649.             enddo
21649.          endif
21649.       endif
21248.       _free( t$3164 )
21658.       return
21658.       end
21658.       
21799.       
21799.       subroutine qsat_gill( sat_spec_hum, t, p, n_profile, n_layer, nd_profile, nd_layer )
21676.       t$931 = nd_profile
21676.       t$932 = nd_layer
21720.       t$3179 = _zla( 0, nd_profile )
21676.       t$3180 = _zla( 0, nd_profile )
21720.       t$3181 = _zla( 0, nd_layer )
21676.       t$3182 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
21756.       if ( n_layer > 0 ) then
21757.          if ( n_profile > 0 ) then
21756.             $I_L21756_10 = 0
21756.             do
21757.                $I_L21757_8 = 0
21757. !dir$ ivdep
21757.                do
21761.                   $temp_S2 = -273.14999999999998 + t(1 + $I_L21757_8, 1 + $I_L21756_10)
21762.                   $press_S4 = 1.0e-2 * p(1 + $I_L21757_8, 1 + $I_L21756_10)
21773.                   $ew_S3 = 10.0 ** ( ( 7.8590000000000004e-1 + 3.4770000000000002e-2 * $temp_S2 ) * 1.0/( 1.0 + 4.1200000000000004e-3 * $temp_S2 ) )
21785.                   sat_spec_hum(1 + $I_L21757_8, 1 + $I_L21756_10) = cvmg( 1.0, ( ( 6.2197999999999998e-1 * ( ( 1.0 + ( 4.5 + $temp_S2 * $temp_S2 * 5.9999999999999995e-4 ) * $press_S4 * 9.9999999999999995e-7 ) * $ew_S3 ) ) * 1.0/( $press_S4 + -3.7802000000000002e-1 * ( ( 1.0 + ( 4.5 + $temp_S2 * $temp_S2 * 5.9999999999999995e-4 ) * $press_S4 * 9.9999999999999995e-7 ) * $ew_S3 ) ) ), $press_S4 <= ( ( 1.0 + ( 4.5 + $temp_S2 * $temp_S2 * 5.9999999999999995e-4 ) * $press_S4 * 9.9999999999999995e-7 ) * $ew_S3 ) )
21793.                   $I_L21757_8 = 1 + $I_L21757_8
21757.                   if ( $I_L21757_8 >= n_profile ) exit
21757.                enddo
21794.                $I_L21756_10 = 1 + $I_L21756_10
21793.                if ( $I_L21756_10 >= n_layer ) exit
21793.             enddo
21793.          endif
21793.       endif
21799.       return
21799.       end
21799.       
21944.       
21944.       subroutine rescale_continuum( n_profile, n_layer, i_continuum, p, t, i_top, density, molar_density_water, molar_density_frn, water_frac, amount_continuum, i_fnc, p_reference, t_reference, scale_parameter, nd_profile, nd_layer, nd_scale_variable )
21819.       t$937 = nd_profile
21819.       t$938 = nd_layer
21868.       t$3183 = _zla( 0, nd_profile )
21819.       t$3184 = _zla( 0, nd_profile )
21868.       t$3185 = _zla( 0, nd_layer )
21819.       t$3186 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
21819.       t$939 = nd_scale_variable
21882.       t$3187 = _zla( 0, nd_scale_variable )
21897.       if ( i_fnc == 1 ) then
21898.          if ( nd_layer > 0 ) then
21900.             $SC_scale_parameter_I1 = scale_parameter(1)
21900.             $SC_scale_parameter_I0 = scale_parameter(2)
21899.             if ( nd_profile > 0 ) then
21898.                $I_L21898_72 = 0
21898.                do
21899.                   $I_L21899_62 = 0
21899. !dir$ ivdep
21899.                   do
21900.                      amount_continuum(1 + $I_L21899_62, 1 + $I_L21898_72) = _expn( $SC_scale_parameter_I1 * log( ( p(1 + $I_L21899_62, 1 + $I_L21898_72) * 1.0/p_reference ) ) + $SC_scale_parameter_I0 * log( ( t(1 + $I_L21899_62, 1 + $I_L21898_72) * 1.0/t_reference ) ) )
21903.                      $I_L21899_62 = 1 + $I_L21899_62
21899.                      if ( $I_L21899_62 >= nd_profile ) exit
21899.                   enddo
21904.                   $I_L21898_72 = 1 + $I_L21898_72
21903.                   if ( $I_L21898_72 >= nd_layer ) exit
21903.                enddo
21903.             endif
21903.          endif
21905.       else if ( i_fnc == 2 ) then
21906.          if ( nd_layer > 0 ) then
21908.             $SC_scale_parameter_I2 = scale_parameter(3)
21908.             $SC_scale_parameter_I1 = scale_parameter(1)
21908.             $SC_scale_parameter_I0 = scale_parameter(2)
21907.             if ( nd_profile > 0 ) then
21906.                $I_L21906_70 = 0
21906.                do
21907.                   $I_L21907_60 = 0
21907. !dir$ ivdep
21907.                   do
21908.                      amount_continuum(1 + $I_L21907_60, 1 + $I_L21906_70) = _expn( $SC_scale_parameter_I1 * log( ( p(1 + $I_L21907_60, 1 + $I_L21906_70) * 1.0/p_reference ) ) ) * ( ( -1.0 + ( t(1 + $I_L21907_60, 1 + $I_L21906_70) * 1.0/t_reference ) ) * ( -1.0 + ( t(1 + $I_L21907_60, 1 + $I_L21906_70) * 1.0/t_reference ) ) * $SC_scale_parameter_I2 + $SC_scale_parameter_I0 * ( -1.0 + ( t(1 + $I_L21907_60, 1 + $I_L21906_70) * 1.0/t_reference ) ) + 1.0 )
21914.                      $I_L21907_60 = 1 + $I_L21907_60
21907.                      if ( $I_L21907_60 >= nd_profile ) exit
21907.                   enddo
21915.                   $I_L21906_70 = 1 + $I_L21906_70
21914.                   if ( $I_L21906_70 >= nd_layer ) exit
21914.                enddo
21914.             endif
21914.          endif
21914.       endif
21918.       if ( i_continuum == 1 ) then
21919.          if ( nd_layer > 0 ) then
21920.             if ( nd_profile > 0 ) then
21919.                $I_L21919_78 = 0
21919.                do
21920.                   $I_L21920_68 = 0
21920. !dir$ ivdep
21920.                   do
21921.                      amount_continuum(1 + $I_L21920_68, 1 + $I_L21919_78) = amount_continuum(1 + $I_L21920_68, 1 + $I_L21919_78) * molar_density_water(1 + $I_L21920_68, 1 + $I_L21919_78) * water_frac(1 + $I_L21920_68, 1 + $I_L21919_78)
21923.                      $I_L21920_68 = 1 + $I_L21920_68
21920.                      if ( $I_L21920_68 >= nd_profile ) exit
21920.                   enddo
21924.                   $I_L21919_78 = 1 + $I_L21919_78
21923.                   if ( $I_L21919_78 >= nd_layer ) exit
21923.                enddo
21923.             endif
21923.          endif
21925.       else if ( i_continuum == 2 ) then
21926.          if ( nd_layer > 0 ) then
21927.             if ( nd_profile > 0 ) then
21926.                $I_L21926_76 = 0
21926.                do
21927.                   $I_L21927_66 = 0
21927. !dir$ ivdep
21927.                   do
21928.                      amount_continuum(1 + $I_L21927_66, 1 + $I_L21926_76) = amount_continuum(1 + $I_L21927_66, 1 + $I_L21926_76) * molar_density_frn(1 + $I_L21927_66, 1 + $I_L21926_76) * water_frac(1 + $I_L21927_66, 1 + $I_L21926_76)
21930.                      $I_L21927_66 = 1 + $I_L21927_66
21927.                      if ( $I_L21927_66 >= nd_profile ) exit
21927.                   enddo
21931.                   $I_L21926_76 = 1 + $I_L21926_76
21930.                   if ( $I_L21926_76 >= nd_layer ) exit
21930.                enddo
21930.             endif
21930.          endif
21930.       else if ( i_continuum == 3 ) then
21933.          if ( nd_layer > 0 ) then
21934.             if ( nd_profile > 0 ) then
21933.                $I_L21933_74 = 0
21933.                do
21934.                   $I_L21934_64 = 0
21934. !dir$ ivdep
21934.                   do
21935.                      amount_continuum(1 + $I_L21934_64, 1 + $I_L21933_74) = density(1 + $I_L21934_64, 1 + $I_L21933_74) * amount_continuum(1 + $I_L21934_64, 1 + $I_L21933_74) * 7.8100000000000003e-1
21937.                      $I_L21934_64 = 1 + $I_L21934_64
21934.                      if ( $I_L21934_64 >= nd_profile ) exit
21934.                   enddo
21938.                   $I_L21933_74 = 1 + $I_L21933_74
21937.                   if ( $I_L21933_74 >= nd_layer ) exit
21937.                enddo
21937.             endif
21937.          endif
21937.       endif
21944.       return
21944.       end
21944.       
22114.       
22114.       subroutine rescale_phase_fnc( n_profile, i_layer_first, i_layer_last, n_direction, cos_sol_view, n_order_phase, phase_fnc, forward_scatter, forward_solar, l_rescale_solar_phf, n_order_phase_solar, phase_fnc_solar, nd_profile, nd_radiance_profile, nd_layer, id_1, nd_direction, nd_max_order )
21962.       t$944 = nd_radiance_profile
21962.       t$945 = nd_direction
22013.       t$3188 = _zla( 0, nd_radiance_profile )
21962.       t$3189 = _zla( 0, nd_radiance_profile )
22013.       t$3190 = _zla( 0, nd_direction )
21962.       t$3191 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
21962.       t$941 = nd_profile
21962.       t$942 = id_1
21962.       t$943 = nd_layer
21962.       t$946 = nd_max_order
22023.       t$3192 = _zla( 0, nd_profile )
21962.       t$3193 = _zla( 0, nd_profile )
21962.       t$3194 = nd_layer + -id_1 + 1
22023.       t$3195 = _zla( 0, nd_layer + -id_1 + 1 )
21962.       t$3196 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_1 + 1 )
22023.       t$3197 = _zla( 0, nd_max_order )
21962.       t$3198 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_1 + 1 )
21962.       t$3199 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_1 + 1 )
21962.       t$3200 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_layer + -id_1 + 1 )
21962.       t$3201 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer + -id_1 + 1 )
22054.       t$3204 = 8 * _zla( 0, nd_profile )
22046.       t$3205 = 8 * _zla( 0, nd_profile )
22046.       t$3207 = 8 * _zla( 0, nd_profile ) + 8 * _zla( 0, nd_radiance_profile )
22048.       t$3208 = 8 * _zla( 0, nd_profile ) + 8 * _zla( 0, nd_radiance_profile )
22048.       t$3210 = 8 * _zla( 0, nd_profile ) + 16 * _zla( 0, nd_radiance_profile )
22050.       t$3211 = 8 * _zla( 0, nd_profile ) + 16 * _zla( 0, nd_radiance_profile )
22050.       t$3213 = 8 * _zla( 0, nd_profile ) + 24 * _zla( 0, nd_radiance_profile )
21962.       t$3202 = int( _alloc( 8 * _zla( 0, nd_profile ) + 24 * _zla( 0, nd_radiance_profile ) ), 8 )
22054.       t$3203 = t$3202
22046.       t$3206 = t$3202 + 8 * _zla( 0, nd_profile )
22048.       t$3209 = t$3202 + 8 * _zla( 0, nd_profile ) + 8 * _zla( 0, nd_radiance_profile )
22050.       t$3212 = t$3202 + 8 * _zla( 0, nd_profile ) + 16 * _zla( 0, nd_radiance_profile )
22060.       if ( n_order_phase > 0 ) then
22061.          if ( nd_layer + -id_1 >= 0 ) then
22062.             if ( nd_profile > 0 ) then
22061.                $I_L22061_97 = 0
22061.                do
22060.                   $I_L22060_95 = 0
22060.                   do
22062.                      $I_L22062_93 = 0
22062.                      do
22061.                         $I_L22061_88 = 0
22061. !dir$ shortloop16
22061. !dir$ blocking_size( 8, 8 )
22061.                         do
22060.                            $I_L22060_85 = 0
22060.                            if ( min( n_order_phase, 8 + 8 * $I_L22060_95 ) + -8 * $I_L22060_95 >= 4 ) then
22060.                               $I_L22060_105 = 0
22060. !dir$ shortloop16
22060. !dir$ blocking_size( 8, 8 )
22060.                               do
22062.                                  $I_L22062_72 = 0
22062. !dir$ ivdep
22062. !dir$ blocking_size( 256, 256 )
22062.                                  do
22063.                                     phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 1) = ( ( phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 1) + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) * 1.0/( 1.0 + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) )
22063.                                     phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 2) = ( ( phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 2) + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) * 1.0/( 1.0 + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) )
22063.                                     phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 3) = ( ( phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 3) + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) * 1.0/( 1.0 + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) )
22063.                                     phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 4) = ( ( phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, 8 * $I_L22060_95 + 4 * $I_L22060_105 + 4) + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) * 1.0/( 1.0 + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) )
22062.                                     $I_L22062_72 = 1 + $I_L22062_72
22062.                                     if ( $I_L22062_72 >= min( nd_profile, 256 + 256 * $I_L22062_93 ) + -256 * $I_L22062_93 ) exit
22062.                                  enddo
22060.                                  $I_L22060_105 = 1 + $I_L22060_105
22060.                                  if ( $I_L22060_105 >= _rsh( min( n_order_phase, 8 + 8 * $I_L22060_95 ) + -8 * $I_L22060_95, 2 ) ) exit
22060.                               enddo
22060.                               $I_L22060_85 = and( 0xfffffffffffffffcUL, min( n_order_phase, 8 + 8 * $I_L22060_95 ) + -8 * $I_L22060_95 )
22060.                            endif
22060.                            if ( $I_L22060_85 < min( n_order_phase, 8 + 8 * $I_L22060_95 ) + -8 * $I_L22060_95 ) then
22060.                               $I_L22060_102 = 0
22060. !dir$ shortloop16
22060. !dir$ blocking_size( 8, 8 )
22060.                               do
22062.                                  $I_L22062_72 = 0
22062. !dir$ ivdep
22062. !dir$ blocking_size( 256, 256 )
22062.                                  do
22063.                                     phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, $I_L22060_85 + $I_L22060_102 + 8 * $I_L22060_95 + 1) = ( ( phase_fnc($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97, $I_L22060_85 + $I_L22060_102 + 8 * $I_L22060_95 + 1) + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) * 1.0/( 1.0 + -forward_scatter($I_L22062_72 + 256 * $I_L22062_93 + 1, id_1 + $I_L22061_88 + 8 * $I_L22061_97) ) )
22062.                                     $I_L22062_72 = 1 + $I_L22062_72
22062.                                     if ( $I_L22062_72 >= min( nd_profile, 256 + 256 * $I_L22062_93 ) + -256 * $I_L22062_93 ) exit
22062.                                  enddo
22060.                                  $I_L22060_102 = 1 + $I_L22060_102
22060.                                  if ( $I_L22060_102 >= min( n_order_phase, 8 + 8 * $I_L22060_95 ) + -$I_L22060_85 + -8 * $I_L22060_95 ) exit
22060.                               enddo
22060.                            endif
22061.                            $I_L22061_88 = 1 + $I_L22061_88
22066.                            if ( $I_L22061_88 >= min( nd_layer + -id_1 + 1, 8 + 8 * $I_L22061_97 ) + -8 * $I_L22061_97 ) exit
22066.                         enddo
22062.                         $I_L22062_93 = 1 + $I_L22062_93
22062.                         if ( $I_L22062_93 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
22062.                      enddo
22060.                      $I_L22060_95 = 1 + $I_L22060_95
22067.                      if ( $I_L22060_95 >= 1 + max( 0, -1 + _rsh( 7 + n_order_phase, 3 ) ) ) exit
22067.                   enddo
22061.                   $I_L22061_97 = 1 + $I_L22061_97
22061.                   if ( $I_L22061_97 >= 1 + max( 0, -1 + _rsh( nd_layer + -id_1 + 8, 3 ) ) ) exit
22061.                enddo
22061.             endif
22061.          endif
22061.       endif
22071.       if ( l_rescale_solar_phf ) then
22073.          if ( n_direction > 0 ) then
22073.             $I_L22073_91 = 0
22073.             do
22076.                if ( n_profile > 0 ) then
22076.                   $I_L22076_75 = 0
22076. !dir$ ivdep
22076.                   do
22077.                      p_legendre_ls_m1(1 + $I_L22076_75) = 1.0
22078.                      $p_legendre_ls_WR0_R0 = cos_sol_view(1 + $I_L22076_75, 1 + $I_L22073_91)
22078.                      p_legendre_ls(1 + $I_L22076_75) = $p_legendre_ls_WR0_R0
22079.                      peak(1 + $I_L22076_75) = 1.0 + 3.0 * $p_legendre_ls_WR0_R0
22080.                      $I_L22076_75 = 1 + $I_L22076_75
22076.                      if ( $I_L22076_75 >= n_profile ) exit
22076.                   enddo
22076.                endif
22082.                if ( -2 + n_order_phase_solar >= 0 ) then
22085.                   if ( n_profile > 0 ) then
22082.                      $I_L22082_81 = 0
22082.                      do
22084.                         $cnst1_S7 = 1.0 + -( 1.0/( ( 2 + $I_L22082_81 ) ) )
22085.                         $I_L22085_77 = 0
22085. !dir$ ivdep
22085.                         do
22086.                            $p_legendre_tmp_WR0_R2 = p_legendre_ls(1 + $I_L22085_77)
22087.                            $p_legendre_ls_WR0_R1 = ( 1.0 + $cnst1_S7 ) * $p_legendre_tmp_WR0_R2 * cos_sol_view(1 + $I_L22085_77, 1 + $I_L22073_91) + -( $cnst1_S7 * p_legendre_ls_m1(1 + $I_L22085_77) )
22087.                            p_legendre_ls(1 + $I_L22085_77) = $p_legendre_ls_WR0_R1
22090.                            p_legendre_ls_m1(1 + $I_L22085_77) = $p_legendre_tmp_WR0_R2
22091.                            peak(1 + $I_L22085_77) = peak(1 + $I_L22085_77) + real( 5 + 2 * $I_L22082_81, 8 ) * $p_legendre_ls_WR0_R1
22092.                            $I_L22085_77 = 1 + $I_L22085_77
22085.                            if ( $I_L22085_77 >= n_profile ) exit
22085.                         enddo
22093.                         $I_L22082_81 = 1 + $I_L22082_81
22092.                         if ( $I_L22082_81 >= -1 + n_order_phase_solar ) exit
22092.                      enddo
22092.                   endif
22092.                endif
22099.                if ( nd_layer + -id_1 >= 0 ) then
22100.                   if ( nd_profile > 0 ) then
22099.                      $I_L22099_83 = 0
22099.                      if ( nd_layer + -id_1 + -3 >= 0 ) then
22099.                         $I_L22099_107 = 0
22099. !dir$ blocking_size( 0, 0 )
22099.                         do
22100.                            $I_L22100_79 = 0
22100. !dir$ ivdep
22100. !dir$ blocking_size( 0, 0 )
22100.                            do
22101.                               phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107, 1 + $I_L22073_91) = ( ( phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107, 1 + $I_L22073_91) + -( forward_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107) * peak(1 + $I_L22100_79) ) ) * 1.0/( 1.0 + -forward_scatter(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107) ) )
22101.                               phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 1, 1 + $I_L22073_91) = ( ( phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 1, 1 + $I_L22073_91) + -( forward_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 1) * peak(1 + $I_L22100_79) ) ) * 1.0/( 1.0 + -forward_scatter(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 1) ) )
22101.                               phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 2, 1 + $I_L22073_91) = ( ( phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 2, 1 + $I_L22073_91) + -( forward_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 2) * peak(1 + $I_L22100_79) ) ) * 1.0/( 1.0 + -forward_scatter(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 2) ) )
22101.                               phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 3, 1 + $I_L22073_91) = ( ( phase_fnc_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 3, 1 + $I_L22073_91) + -( forward_solar(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 3) * peak(1 + $I_L22100_79) ) ) * 1.0/( 1.0 + -forward_scatter(1 + $I_L22100_79, id_1 + 4 * $I_L22099_107 + 3) ) )
22104.                               $I_L22100_79 = 1 + $I_L22100_79
22100.                               if ( $I_L22100_79 >= nd_profile ) exit
22100.                            enddo
22105.                            $I_L22099_107 = 1 + $I_L22099_107
22104.                            if ( $I_L22099_107 >= _rsh( nd_layer + -id_1 + 1, 2 ) ) exit
22104.                         enddo
22105.                         $I_L22099_83 = and( 0xfffffffffffffffcUL, nd_layer + -id_1 + 1 )
22105.                      endif
22099.                      if ( $I_L22099_83 < nd_layer + -id_1 + 1 ) then
22099.                         $I_L22099_99 = 0
22099. !dir$ blocking_size( 0, 0 )
22099.                         do
22100.                            $I_L22100_79 = 0
22100. !dir$ ivdep
22100. !dir$ blocking_size( 0, 0 )
22100.                            do
22101.                               phase_fnc_solar(1 + $I_L22100_79, id_1 + $I_L22099_83 + $I_L22099_99, 1 + $I_L22073_91) = ( ( phase_fnc_solar(1 + $I_L22100_79, id_1 + $I_L22099_83 + $I_L22099_99, 1 + $I_L22073_91) + -( forward_solar(1 + $I_L22100_79, id_1 + $I_L22099_83 + $I_L22099_99) * peak(1 + $I_L22100_79) ) ) * 1.0/( 1.0 + -forward_scatter(1 + $I_L22100_79, id_1 + $I_L22099_83 + $I_L22099_99) ) )
22104.                               $I_L22100_79 = 1 + $I_L22100_79
22100.                               if ( $I_L22100_79 >= nd_profile ) exit
22100.                            enddo
22105.                            $I_L22099_99 = 1 + $I_L22099_99
22104.                            if ( $I_L22099_99 >= nd_layer + -id_1 + -$I_L22099_83 + 1 ) exit
22104.                         enddo
22104.                      endif
22104.                   endif
22104.                endif
22107.                $I_L22073_91 = 1 + $I_L22073_91
22105.                if ( $I_L22073_91 >= n_direction ) exit
22105.             enddo
22105.          endif
22105.       endif
21962.       _free( t$3202 )
22114.       return
22114.       end
22114.       
22193.       
22193.       subroutine rescale_tau_omega( n_profile, i_layer_first, i_layer_last, tau, omega, forward_scatter, nd_profile, nd_layer, id_1 )
22132.       t$948 = nd_profile
22132.       t$949 = id_1
22132.       t$950 = nd_layer
22167.       t$3214 = _zla( 0, nd_profile )
22132.       t$3215 = _zla( 0, nd_profile )
22132.       t$3216 = nd_layer + -id_1 + 1
22167.       t$3217 = _zla( 0, nd_layer + -id_1 + 1 )
22132.       t$3218 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_1 + 1 )
22181.       if ( nd_layer + -id_1 >= 0 ) then
22182.          if ( nd_profile > 0 ) then
22181.             $I_L22181_10 = 0
22181.             do
22182.                $I_L22182_8 = 0
22182. !dir$ ivdep
22182.                do
22183.                   tau(1 + $I_L22182_8, id_1 + $I_L22181_10) = tau(1 + $I_L22182_8, id_1 + $I_L22181_10) * ( 1.0 + -( omega(1 + $I_L22182_8, id_1 + $I_L22181_10) * forward_scatter(1 + $I_L22182_8, id_1 + $I_L22181_10) ) )
22185.                   omega(1 + $I_L22182_8, id_1 + $I_L22181_10) = ( omega(1 + $I_L22182_8, id_1 + $I_L22181_10) * ( 1.0 + -forward_scatter(1 + $I_L22182_8, id_1 + $I_L22181_10) ) * 1.0/( 1.0 + -( omega(1 + $I_L22182_8, id_1 + $I_L22181_10) * forward_scatter(1 + $I_L22182_8, id_1 + $I_L22181_10) ) ) )
22187.                   $I_L22182_8 = 1 + $I_L22182_8
22182.                   if ( $I_L22182_8 >= nd_profile ) exit
22182.                enddo
22188.                $I_L22181_10 = 1 + $I_L22181_10
22187.                if ( $I_L22181_10 >= nd_layer + -id_1 + 1 ) exit
22187.             enddo
22187.          endif
22187.       endif
22193.       return
22193.       end
22193.       
22362.       
22362.       subroutine scale_absorb( ierr, n_profile, n_layer, gas_mix_ratio, p, t, i_top, gas_frac_rescaled, i_fnc, p_reference, t_reference, scale_parameter, l_doppler, doppler_correction, nd_profile, nd_layer, nd_scale_variable )
22213.       t$955 = nd_profile
22213.       t$956 = nd_layer
22263.       t$3219 = _zla( 0, nd_profile )
22213.       t$3220 = _zla( 0, nd_profile )
22263.       t$3221 = _zla( 0, nd_layer )
22213.       t$3222 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
22213.       t$957 = nd_scale_variable
22273.       t$3223 = _zla( 0, nd_scale_variable )
22304.       if ( i_fnc == 1 ) then
22305.          if ( nd_layer > 0 ) then
22307.             $SC_scale_parameter_I1 = scale_parameter(1)
22307.             $SC_scale_parameter_I0 = scale_parameter(2)
22306.             if ( nd_profile > 0 ) then
22305.                $I_L22305_60 = 0
22305.                do
22306.                   $I_L22306_52 = 0
22306. !dir$ ivdep
22306.                   do
22307.                      gas_frac_rescaled(1 + $I_L22306_52, 1 + $I_L22305_60) = _expn( $SC_scale_parameter_I1 * log( ( ( p(1 + $I_L22306_52, 1 + $I_L22305_60) + cvmg( doppler_correction, 0.0, l_doppler ) ) * 1.0/( p_reference + cvmg( doppler_correction, 0.0, l_doppler ) ) ) ) + $SC_scale_parameter_I0 * log( ( t(1 + $I_L22306_52, 1 + $I_L22305_60) * 1.0/t_reference ) ) )
22312.                      $I_L22306_52 = 1 + $I_L22306_52
22306.                      if ( $I_L22306_52 >= nd_profile ) exit
22306.                   enddo
22313.                   $I_L22305_60 = 1 + $I_L22305_60
22312.                   if ( $I_L22305_60 >= nd_layer ) exit
22312.                enddo
22312.             endif
22312.          endif
22312.          goto 10
22314.       else if ( i_fnc /= 0 ) then
22316.          if ( i_fnc == 2 ) then
22317.             if ( nd_layer > 0 ) then
22319.                $SC_scale_parameter_I2 = scale_parameter(3)
22319.                $SC_scale_parameter_I1 = scale_parameter(1)
22319.                $SC_scale_parameter_I0 = scale_parameter(2)
22318.                if ( nd_profile > 0 ) then
22317.                   $I_L22317_58 = 0
22317.                   do
22318.                      $I_L22318_50 = 0
22318. !dir$ ivdep
22318.                      do
22319.                         gas_frac_rescaled(1 + $I_L22318_50, 1 + $I_L22317_58) = _expn( $SC_scale_parameter_I1 * log( ( ( p(1 + $I_L22318_50, 1 + $I_L22317_58) + cvmg( doppler_correction, 0.0, l_doppler ) ) * 1.0/( p_reference + cvmg( doppler_correction, 0.0, l_doppler ) ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L22318_50, 1 + $I_L22317_58) * 1.0/t_reference ) ) * ( -1.0 + ( t(1 + $I_L22318_50, 1 + $I_L22317_58) * 1.0/t_reference ) ) * $SC_scale_parameter_I2 + $SC_scale_parameter_I0 * ( -1.0 + ( t(1 + $I_L22318_50, 1 + $I_L22317_58) * 1.0/t_reference ) ) + 1.0 )
22327.                         $I_L22318_50 = 1 + $I_L22318_50
22318.                         if ( $I_L22318_50 >= nd_profile ) exit
22318.                      enddo
22328.                      $I_L22317_58 = 1 + $I_L22317_58
22327.                      if ( $I_L22317_58 >= nd_layer ) exit
22327.                   enddo
22327.                endif
22327.             endif
22327.             goto 10
22329.          else if ( i_fnc == 3 ) then
22332.             if ( nd_layer > 0 ) then
22334.                $SC_scale_parameter_I3 = scale_parameter(4)
22334.                $SC_scale_parameter_I2 = scale_parameter(3)
22334.                $SC_scale_parameter_I1 = scale_parameter(1)
22334.                $SC_scale_parameter_I0 = scale_parameter(2)
22333.                if ( nd_profile > 0 ) then
22332.                   $I_L22332_56 = 0
22332.                   do
22333.                      $I_L22333_48 = 0
22333. !dir$ ivdep
22333.                      do
22334.                         gas_frac_rescaled(1 + $I_L22333_48, 1 + $I_L22332_56) = _expn( $SC_scale_parameter_I1 * log( ( ( p(1 + $I_L22333_48, 1 + $I_L22332_56) + $SC_scale_parameter_I0 ) * 1.0/( p_reference + $SC_scale_parameter_I0 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L22333_48, 1 + $I_L22332_56) * 1.0/t_reference ) ) * ( -1.0 + ( t(1 + $I_L22333_48, 1 + $I_L22332_56) * 1.0/t_reference ) ) * $SC_scale_parameter_I3 + $SC_scale_parameter_I2 * ( -1.0 + ( t(1 + $I_L22333_48, 1 + $I_L22332_56) * 1.0/t_reference ) ) + 1.0 )
22342.                         $I_L22333_48 = 1 + $I_L22333_48
22333.                         if ( $I_L22333_48 >= nd_profile ) exit
22333.                      enddo
22343.                      $I_L22332_56 = 1 + $I_L22332_56
22342.                      if ( $I_L22332_56 >= nd_layer ) exit
22342.                   enddo
22342.                endif
22342.             endif
22342.    10       continue
22352.             if ( nd_layer > 0 ) then
22353.                if ( nd_profile > 0 ) then
22352.                   $I_L22352_62 = 0
22352.                   do
22353.                      $I_L22353_54 = 0
22353. !dir$ ivdep
22353.                      do
22354.                         gas_frac_rescaled(1 + $I_L22353_54, 1 + $I_L22352_62) = max( 0.0, gas_frac_rescaled(1 + $I_L22353_54, 1 + $I_L22352_62) * gas_mix_ratio(1 + $I_L22353_54, 1 + $I_L22352_62) )
22356.                         $I_L22353_54 = 1 + $I_L22353_54
22353.                         if ( $I_L22353_54 >= nd_profile ) exit
22353.                      enddo
22357.                      $I_L22352_62 = 1 + $I_L22352_62
22356.                      if ( $I_L22352_62 >= nd_layer ) exit
22356.                   enddo
22356.                endif
22356.             endif
22356.          else
22345.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
22347.             ierr = 1
22347.          endif
22347.       endif
22362.       return
22362.       end
22362.       
22466.       
22466.       subroutine set_cloud_geometry( n_profile, n_layer, l_global_cloud_top, n_cloud_top_global, w_cloud, n_cloud_top, n_cloud_profile, i_cloud_profile, nd_profile, nd_layer, id_ct )
22383.       t$961 = nd_profile
22383.       t$962 = id_ct
22383.       t$963 = nd_layer
22422.       t$3224 = _zla( 0, nd_profile )
22383.       t$3225 = _zla( 0, nd_profile )
22383.       t$3226 = nd_layer + -id_ct + 1
22422.       t$3227 = _zla( 0, nd_layer + -id_ct + 1 )
22383.       t$3228 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
22443.       if ( n_layer + -id_ct >= 0 ) then
22445.          if ( n_profile > 0 ) then
22443.             $I_L22443_14 = 0
22443. !dir$ ivdep
22443.             do
22444.                n_cloud_profile(id_ct + $I_L22443_14) = 0
22451.                $I_L22443_14 = 1 + $I_L22443_14
22450.                if ( $I_L22443_14 >= n_layer + -id_ct + 1 ) exit
22450.             enddo
22443.             $I_L22443_14 = 0
22443.             do
22445.                $I_L22445_10 = 0
22445. !dir$ ivdep
22445.                do
22446.                   if ( w_cloud(1 + $I_L22445_10, id_ct + $I_L22443_14) > 0.0 ) then
22447.                      n_cloud_profile(id_ct + $I_L22443_14) = 1 + n_cloud_profile(id_ct + $I_L22443_14)
22448.                      i_cloud_profile(n_cloud_profile(id_ct + $I_L22443_14), id_ct + $I_L22443_14) = ( 1 + $I_L22445_10 )
22448.                   endif
22450.                   $I_L22445_10 = 1 + $I_L22445_10
22449.                   if ( $I_L22445_10 >= n_profile ) exit
22449.                enddo
22451.                $I_L22443_14 = 1 + $I_L22443_14
22450.                if ( $I_L22443_14 >= n_layer + -id_ct + 1 ) exit
22450.             enddo
22450.          else
22443.             $I_L22443_12 = 0
22443. !dir$ ivdep
22443.             do
22444.                n_cloud_profile(id_ct + $I_L22443_12) = 0
22451.                $I_L22443_12 = 1 + $I_L22443_12
22450.                if ( $I_L22443_12 >= n_layer + -id_ct + 1 ) exit
22450.             enddo
22450.          endif
22450.       endif
22453.       if ( l_global_cloud_top ) then
22454.          n_cloud_top = n_cloud_top_global
22454.       else
22456.          n_cloud_top = id_ct
22457.          if ( id_ct < n_layer .and. n_cloud_profile(id_ct) == 0 ) then
22457.             do
22459.                n_cloud_top = 1 + n_cloud_top
22459.                if ( ( n_cloud_top < n_layer .and. n_cloud_profile(n_cloud_top) == 0 ) == 0 ) exit
22459.             enddo
22459.          endif
22459.       endif
22466.       return
22466.       end
22466.       
22629.       
22629.       subroutine set_cloud_pointer( ierr, n_condensed, type_condensed, i_cloud_representation, l_drop, l_ice, i_phase_cmp, i_cloud_type, l_cloud_cmp, nd_cloud_component )
22486.       t$970 = nd_cloud_component
22520.       t$3229 = _zla( 0, nd_cloud_component )
22547.       if ( n_condensed > 0 ) then
22547.          $I_L22547_4 = 0
22547. !dir$ ivdep
22547.          do
22549.             i_cloud_type(1 + $I_L22547_4) = 0
22551.             if ( i_cloud_representation == 1 ) then
22553.                if ( type_condensed(1 + $I_L22547_4) == 1 ) then
22554.                   i_cloud_type(1 + $I_L22547_4) = 1
22555.                else if ( type_condensed(1 + $I_L22547_4) == 2 ) then
22556.                   i_cloud_type(1 + $I_L22547_4) = 1
22556.                endif
22559.             else if ( i_cloud_representation == 2 ) then
22561.                if ( type_condensed(1 + $I_L22547_4) == 1 ) then
22562.                   i_cloud_type(1 + $I_L22547_4) = 1
22563.                else if ( type_condensed(1 + $I_L22547_4) == 2 ) then
22564.                   i_cloud_type(1 + $I_L22547_4) = 2
22564.                endif
22564.             else if ( i_cloud_representation == 3 ) then
22569.                if ( type_condensed(1 + $I_L22547_4) == 1 ) then
22570.                   i_cloud_type(1 + $I_L22547_4) = 1
22571.                else if ( type_condensed(1 + $I_L22547_4) == 2 ) then
22572.                   i_cloud_type(1 + $I_L22547_4) = 1
22572.                else if ( type_condensed(1 + $I_L22547_4) == 3 ) then
22574.                   i_cloud_type(1 + $I_L22547_4) = 2
22574.                else if ( type_condensed(1 + $I_L22547_4) == 4 ) then
22576.                   i_cloud_type(1 + $I_L22547_4) = 2
22576.                endif
22576.             else if ( i_cloud_representation == 4 ) then
22581.                if ( type_condensed(1 + $I_L22547_4) == 1 ) then
22582.                   i_cloud_type(1 + $I_L22547_4) = 1
22583.                else if ( type_condensed(1 + $I_L22547_4) == 2 ) then
22584.                   i_cloud_type(1 + $I_L22547_4) = 2
22584.                else if ( type_condensed(1 + $I_L22547_4) == 3 ) then
22586.                   i_cloud_type(1 + $I_L22547_4) = 3
22586.                else if ( type_condensed(1 + $I_L22547_4) == 4 ) then
22588.                   i_cloud_type(1 + $I_L22547_4) = 4
22588.                endif
22588.             endif
22594.             if ( i_cloud_type(1 + $I_L22547_4) == 0 ) then
22595.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$972,  _substr(t$971,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: A component is not compatible with the representation of clouds selected.', 0x800600000000L ) ) )
22598.                ierr = 1
22598.                goto 10
22598.             endif
22602.             if ( type_condensed(1 + $I_L22547_4) == 1 ) then
22604.                i_phase_cmp(1 + $I_L22547_4) = 1
22605.                l_cloud_cmp(1 + $I_L22547_4) = l_drop
22607.             else if ( type_condensed(1 + $I_L22547_4) == 2 ) then
22609.                i_phase_cmp(1 + $I_L22547_4) = 2
22610.                l_cloud_cmp(1 + $I_L22547_4) = l_ice
22610.             else if ( type_condensed(1 + $I_L22547_4) == 3 ) then
22614.                i_phase_cmp(1 + $I_L22547_4) = 1
22615.                l_cloud_cmp(1 + $I_L22547_4) = l_drop
22615.             else if ( type_condensed(1 + $I_L22547_4) == 4 ) then
22619.                i_phase_cmp(1 + $I_L22547_4) = 2
22620.                l_cloud_cmp(1 + $I_L22547_4) = l_ice
22620.             endif
22624.             $I_L22547_4 = 1 + $I_L22547_4
22622.             if ( $I_L22547_4 >= n_condensed ) exit
22622.          enddo
22622.       endif
22622.    10 continue
22629.       return
22629.       end
22629.       
23250.       
23250.       subroutine set_dirn_weights( n_profile, ms, ls_trunc, up_lm, n_direction, mu_v, azim_factor, n_viewing_level, i_rad_layer, frac_rad_layer, i, n_red_eigensystem, mu, eig_vec, isolir, z_sol, mu_0, l_ir_source_quad, diff_planck, upm_c, k_sol, tau, omega, phase_fnc, weight_u, radiance, nd_profile, nd_layer, nd_direction, nd_viewing_level, nd_red_eigensystem, nd_max_order )
22652.       t$977 = nd_profile
22652.       t$984 = ( 1 + nd_max_order )
22652.       t$978 = nd_direction
22808.       t$3230 = _zla( 0, nd_profile )
22652.       t$3231 = _zla( 0, nd_profile )
22808.       t$3232 = _zla( 0, ( 1 + nd_max_order ) )
22652.       t$3233 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) )
22808.       t$3234 = _zla( 0, nd_direction )
22652.       t$3235 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) ) * _zla( 0, nd_direction )
22652.       t$3236 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
22652.       t$976 = nd_viewing_level
22701.       t$3237 = _zla( 0, nd_viewing_level )
22652.       t$981 = nd_red_eigensystem
22731.       t$3238 = _zla( 0, nd_red_eigensystem )
22652.       t$3239 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem )
22652.       t$982 = ( 2 * nd_red_eigensystem )
22733.       t$3240 = _zla( 0, ( 2 * nd_red_eigensystem ) )
22652.       t$3241 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
22652.       t$3242 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
22652.       t$983 = ( ls_trunc + -ms + 1 )
22737.       t$3243 = _zla( 0, ( ls_trunc + -ms + 1 ) )
22652.       t$3244 = _zla( 0, nd_profile ) * _zla( 0, ( ls_trunc + -ms + 1 ) )
22652.       t$979 = nd_layer
22743.       t$3245 = _zla( 0, nd_layer )
22652.       t$3246 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
22652.       t$3247 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
22652.       t$980 = nd_max_order
22652.       t$3248 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
22729.       t$3249 = _zla( 0, nd_max_order )
22652.       t$3250 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_max_order )
22652.       t$3251 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
22652.       t$3252 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
22652.       t$3253 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
22652.       t$3254 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
22820.       t$3257 = 8 * _zla( 0, nd_profile )
22797.       t$3258 = 8 * _zla( 0, nd_profile )
22797.       t$3260 = 16 * _zla( 0, nd_profile )
22799.       t$3261 = 16 * _zla( 0, nd_profile )
22799.       t$3263 = 24 * _zla( 0, nd_profile )
22795.       t$3264 = 24 * _zla( 0, nd_profile )
22795.       t$3266 = 32 * _zla( 0, nd_profile )
22791.       t$3268 = 36 * _zla( 0, nd_profile )
22785.       t$3270 = 40 * _zla( 0, nd_profile )
22815.       t$3271 = 40 * _zla( 0, nd_profile )
22815.       t$3273 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8 + 40 * _zla( 0, nd_profile )
22812.       t$3274 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8 + 40 * _zla( 0, nd_profile )
22812.       t$3276 = 40 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
22810.       t$3277 = 40 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
22810.       t$3279 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 48 * _zla( 0, nd_profile )
22804.       t$3280 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 48 * _zla( 0, nd_profile )
22804.       t$3282 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 56 * _zla( 0, nd_profile )
22801.       t$3283 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 56 * _zla( 0, nd_profile )
22801.       t$3285 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 64 * _zla( 0, nd_profile )
22818.       t$3286 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 64 * _zla( 0, nd_profile )
22818.       t$3288 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 72 * _zla( 0, nd_profile )
22823.       t$3289 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 72 * _zla( 0, nd_profile )
22823.       t$3291 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 80 * _zla( 0, nd_profile )
22652.       t$3255 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 80 * _zla( 0, nd_profile ) ), 8 )
22820.       t$3256 = t$3255
22797.       t$3259 = t$3255 + 8 * _zla( 0, nd_profile )
22799.       t$3262 = t$3255 + 16 * _zla( 0, nd_profile )
22795.       t$3265 = t$3255 + 24 * _zla( 0, nd_profile )
22791.       t$3267 = t$3255 + 32 * _zla( 0, nd_profile )
22785.       t$3269 = t$3255 + 36 * _zla( 0, nd_profile )
22815.       t$3272 = t$3255 + 40 * _zla( 0, nd_profile )
22812.       t$3275 = t$3255 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8 + 40 * _zla( 0, nd_profile )
22810.       t$3278 = t$3255 + 40 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
22804.       t$3281 = t$3255 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 48 * _zla( 0, nd_profile )
22801.       t$3284 = t$3255 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 56 * _zla( 0, nd_profile )
22818.       t$3287 = t$3255 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 64 * _zla( 0, nd_profile )
22823.       t$3290 = t$3255 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 72 * _zla( 0, nd_profile )
22859.       if ( n_direction > 0 ) then
22859.          $I_L22859_408 = 0
22859.          do
22864.             $n_list_up_S2 = 0
22865.             $n_list_down_S3 = 0
22866.             if ( n_profile > 0 ) then
22866.                $I_L22866_328 = 0
22866. !dir$ ivdep
22866.                do
22867.                   if ( mu_v(1 + $I_L22866_328, 1 + $I_L22859_408) > 0.0 ) then
22868.                      $n_list_up_S2 = 1 + $n_list_up_S2
22869.                      list_up($n_list_up_S2) = ( 1 + $I_L22866_328 )
22870.                   else if ( mu_v(1 + $I_L22866_328, 1 + $I_L22859_408) < 0.0 ) then
22871.                      $n_list_down_S3 = 1 + $n_list_down_S3
22872.                      list_down($n_list_down_S3) = ( 1 + $I_L22866_328 )
22872.                   endif
22874.                   $I_L22866_328 = 1 + $I_L22866_328
22873.                   if ( $I_L22866_328 >= n_profile ) exit
22873.                enddo
22873.             endif
22879.             if ( isolir == 1 ) then
22881.                if ( ms == 0 ) then
22885.                   if ( n_profile > 0 ) then
22885.                      $I_L22885_330 = 0
22885. !dir$ ivdep
22885.                      do
22886.                         ls_sum_s(1 + $I_L22885_330) = up_lm(1 + $I_L22885_330, 1, 1 + $I_L22859_408) * z_sol(1 + $I_L22885_330, 1)
22887.                         $I_L22885_330 = 1 + $I_L22885_330
22885.                         if ( $I_L22885_330 >= n_profile ) exit
22885.                      enddo
22885.                   endif
22888.                else if ( n_profile > 0 ) then
22889.                   $I_L22889_332 = 0
22889. !dir$ ivdep
22889.                   do
22890.                      ls_sum_s(1 + $I_L22889_332) = phase_fnc(1 + $I_L22889_332, i, ms) * up_lm(1 + $I_L22889_332, 1, 1 + $I_L22859_408) * z_sol(1 + $I_L22889_332, 1)
22892.                      $I_L22889_332 = 1 + $I_L22889_332
22889.                      if ( $I_L22889_332 >= n_profile ) exit
22889.                   enddo
22889.                endif
22894.                if ( ls_trunc + -ms > 0 ) then
22895.                   if ( n_profile > 0 ) then
22894.                      $I_L22894_388 = 0
22894. !dir$ blocking_size( 0, 0 )
22894.                      do
22895.                         $I_L22895_334 = 0
22895. !dir$ ivdep
22895. !dir$ blocking_size( 0, 0 )
22895.                         do
22896.                            ls_sum_s(1 + $I_L22895_334) = ls_sum_s(1 + $I_L22895_334) + z_sol(1 + $I_L22895_334, 2 + $I_L22894_388) * phase_fnc(1 + $I_L22895_334, i, ms + $I_L22894_388 + 1) * up_lm(1 + $I_L22895_334, 2 + $I_L22894_388, 1 + $I_L22859_408)
22898.                            $I_L22895_334 = 1 + $I_L22895_334
22895.                            if ( $I_L22895_334 >= n_profile ) exit
22895.                         enddo
22899.                         $I_L22894_388 = 1 + $I_L22894_388
22898.                         if ( $I_L22894_388 >= ( ls_trunc + -ms ) ) exit
22898.                      enddo
22898.                   endif
22898.                endif
22898.             endif
22904.             if ( n_red_eigensystem > 0 ) then
22904.                $I_L22904_404 = 0
22904.                do
22905.                   if ( ms == 0 ) then
22906.                      if ( n_profile > 0 ) then
22906.                         $I_L22906_336 = 0
22906. !dir$ ivdep
22906.                         do
22907.                            $ls_sum_p_WR0_R0 = up_lm(1 + $I_L22906_336, 1, 1 + $I_L22859_408) * eig_vec(1 + $I_L22906_336, 1, 1 + $I_L22904_404)
22907.                            ls_sum_p(1 + $I_L22906_336, 1 + $I_L22904_404) = $ls_sum_p_WR0_R0
22908.                            ls_sum_m(1 + $I_L22906_336, 1 + $I_L22904_404) = $ls_sum_p_WR0_R0
22909.                            $I_L22906_336 = 1 + $I_L22906_336
22906.                            if ( $I_L22906_336 >= n_profile ) exit
22906.                         enddo
22906.                      endif
22910.                   else if ( n_profile > 0 ) then
22911.                      $I_L22911_338 = 0
22911. !dir$ ivdep
22911.                      do
22912.                         $ls_sum_p_WR0_R1 = phase_fnc(1 + $I_L22911_338, i, ms) * up_lm(1 + $I_L22911_338, 1, 1 + $I_L22859_408) * eig_vec(1 + $I_L22911_338, 1, 1 + $I_L22904_404)
22912.                         ls_sum_p(1 + $I_L22911_338, 1 + $I_L22904_404) = $ls_sum_p_WR0_R1
22914.                         ls_sum_m(1 + $I_L22911_338, 1 + $I_L22904_404) = $ls_sum_p_WR0_R1
22915.                         $I_L22911_338 = 1 + $I_L22911_338
22911.                         if ( $I_L22911_338 >= n_profile ) exit
22911.                      enddo
22911.                   endif
22917.                   if ( ls_trunc + -ms > 0 ) then
22919.                      if ( n_profile > 0 ) then
22917.                         $I_L22917_390 = 0
22917. !dir$ blocking_size( 0, 0 )
22917.                         do
22919.                            $I_L22919_340 = 0
22919. !dir$ ivdep
22919. !dir$ blocking_size( 0, 0 )
22919.                            do
22920.                               $x_S13 = phase_fnc(1 + $I_L22919_340, i, ms + $I_L22917_390 + 1) * up_lm(1 + $I_L22919_340, 2 + $I_L22917_390, 1 + $I_L22859_408) * eig_vec(1 + $I_L22919_340, 2 + $I_L22917_390, 1 + $I_L22904_404)
22922.                               ls_sum_p(1 + $I_L22919_340, 1 + $I_L22904_404) = ls_sum_p(1 + $I_L22919_340, 1 + $I_L22904_404) + $x_S13
22923.                               ls_sum_m(1 + $I_L22919_340, 1 + $I_L22904_404) = ls_sum_m(1 + $I_L22919_340, 1 + $I_L22904_404) + $x_S13 * real( 1 + -2 * mod( ( $I_L22917_390 + 2 * ms + 1 ), 2 ), 8 )
22924.                               $I_L22919_340 = 1 + $I_L22919_340
22919.                               if ( $I_L22919_340 >= n_profile ) exit
22919.                            enddo
22925.                            $I_L22917_390 = 1 + $I_L22917_390
22924.                            if ( $I_L22917_390 >= ( ls_trunc + -ms ) ) exit
22924.                         enddo
22924.                      endif
22924.                   endif
22926.                   $I_L22904_404 = 1 + $I_L22904_404
22925.                   if ( $I_L22904_404 >= n_red_eigensystem ) exit
22925.                enddo
22925.             endif
22929.             if ( n_viewing_level > 0 ) then
22929.                $I_L22929_406 = 0
22929.                do
22932.                   if ( 2 * n_red_eigensystem > 0 ) then
22933.                      if ( n_profile > 0 ) then
22932.                         $I_L22932_392 = 0
22932.                         do
22933.                            $I_L22933_342 = 0
22933. !dir$ ivdep
22933.                            do
22934.                               weight_u(1 + $I_L22933_342, 1 + $I_L22929_406, 1 + $I_L22859_408, 1 + $I_L22932_392) = 0.0
22935.                               $I_L22933_342 = 1 + $I_L22933_342
22933.                               if ( $I_L22933_342 >= n_profile ) exit
22933.                            enddo
22936.                            $I_L22932_392 = 1 + $I_L22932_392
22935.                            if ( $I_L22932_392 >= ( 2 * n_red_eigensystem ) ) exit
22935.                         enddo
22935.                      endif
22935.                   endif
22941.                   if ( i >= i_rad_layer(1 + $I_L22929_406) ) then
22948.                      if ( i > i_rad_layer(1 + $I_L22929_406) ) then
22950.                         if ( $n_list_up_S2 > 0 ) then
22952.                            $SC_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L22929_406)
22952.                            $SC_i_rad_layer_I0 = i_rad_layer(1 + $I_L22929_406)
22950.                            $I_L22950_344 = 0
22950. !dir$ ivdep
22950.                            do
22951.                               $l_S18 = list_up(1 + $I_L22950_344)
22952.                               m_slant_depth_near($l_S18) = ( 1.0 + -$SC_frac_rad_layer_I1 ) * tau($l_S18, $SC_i_rad_layer_I0)
22955.                               $I_L22950_344 = 1 + $I_L22950_344
22950.                               if ( $I_L22950_344 >= $n_list_up_S2 ) exit
22950.                            enddo
22950.                         endif
22956.                         $t_S19 = 1 + i_rad_layer(1 + $I_L22929_406)
22956.                         if ( i + -$t_S19 > 0 ) then
22957.                            if ( $n_list_up_S2 > 0 ) then
22956.                               $I_L22956_394 = 0
22956. !dir$ ivdep
22956.                               do
22957.                                  $I_L22957_350 = 0
22957.                                  do
22958.                                     $l_S21 = list_up(1 + $I_L22957_350)
22959.                                     m_slant_depth_near($l_S21) = _vu_plus( m_slant_depth_near($l_S21), tau($l_S21, $t_S19 + $I_L22956_394) )
22961.                                     $I_L22957_350 = 1 + $I_L22957_350
22957.                                     if ( $I_L22957_350 >= $n_list_up_S2 ) exit
22957.                                  enddo
22962.                                  $I_L22956_394 = 1 + $I_L22956_394
22961.                                  if ( $I_L22956_394 >= ( i + -$t_S19 ) ) exit
22961.                               enddo
22961.                            endif
22961.                         endif
22963.                         if ( $n_list_up_S2 > 0 ) then
22963.                            $I_L22963_352 = 0
22963. !dir$ unroll 2
22963.                            do
22964.                               $l_S24 = list_up(1 + $I_L22963_352)
22965.                               $SCF_P1 = 1.0/mu_v($l_S24, 1 + $I_L22859_408)
22965.                               m_slant_depth_near($l_S24) = -( m_slant_depth_near($l_S24) * $SCF_P1 )
22967.                               m_slant_depth_inc($l_S24) = -( tau($l_S24, i) * 1.0/mu_v($l_S24, 1 + $I_L22859_408) )
22968.                               tau_i($l_S24) = tau($l_S24, i)
22969.                               frac_tau_i($l_S24) = 1.0
22970.                               $I_L22963_352 = 1 + $I_L22963_352
22963.                               if ( $I_L22963_352 >= $n_list_up_S2 ) exit
22963.                            enddo
22963.                         endif
22971.                         if ( isolir == 1 ) then
22972.                            if ( $n_list_up_S2 > 0 ) then
22972.                               $I_L22972_354 = 0
22972. !dir$ ivdep
22972.                               do
22973.                                  $l_S26 = list_up(1 + $I_L22972_354)
22974.                                  trans_top($l_S26) = 1.0
22975.                                  $I_L22972_354 = 1 + $I_L22972_354
22972.                                  if ( $I_L22972_354 >= $n_list_up_S2 ) exit
22972.                               enddo
22972.                            endif
22972.                         endif
22977.                      else if ( i_rad_layer(1 + $I_L22929_406) + -i == 0 ) then
22979.                         if ( $n_list_up_S2 > 0 ) then
22982.                            $SC_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L22929_406)
22979.                            $I_L22979_346 = 0
22979. !dir$ ivdep
22979.                            do
22980.                               $l_S28 = list_up(1 + $I_L22979_346)
22981.                               m_slant_depth_near($l_S28) = 0.0
22982.                               frac_tau_i($l_S28) = 1.0 + -$SC_frac_rad_layer_I1
22983.                               $SVU_P0 = ( 1.0 + -$SC_frac_rad_layer_I1 ) * tau($l_S28, i)
22983.                               tau_i($l_S28) = $SVU_P0
22984.                               m_slant_depth_inc($l_S28) = -( $SVU_P0 * 1.0/mu_v($l_S28, 1 + $I_L22859_408) )
22985.                               $I_L22979_346 = 1 + $I_L22979_346
22979.                               if ( $I_L22979_346 >= $n_list_up_S2 ) exit
22979.                            enddo
22979.                         endif
22986.                         if ( isolir == 1 ) then
22987.                            if ( $n_list_up_S2 > 0 ) then
22989.                               $SC_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L22929_406)
22987.                               $I_L22987_348 = 0
22987. !dir$ ivdep
22987.                               do
22988.                                  $l_S30 = list_up(1 + $I_L22987_348)
22989.                                  trans_top($l_S30) = _expn( -( $SC_frac_rad_layer_I1 * tau($l_S30, i) * 1.0/mu_0($l_S30) ) )
22991.                                  $I_L22987_348 = 1 + $I_L22987_348
22987.                                  if ( $I_L22987_348 >= $n_list_up_S2 ) exit
22987.                               enddo
22987.                            endif
22987.                         endif
22987.                      endif
22996.                      if ( isolir == 1 ) then
22998.                         if ( $n_list_up_S2 > 0 ) then
22998.                            $I_L22998_356 = 0
22998. !dir$ ivdep
22998.                            do
22999.                               $l_S32 = list_up(1 + $I_L22998_356)
23000.                               geom_solar($l_S32) = ( mu_0($l_S32) * 1.0/( mu_0($l_S32) + mu_v($l_S32, 1 + $I_L22859_408) ) ) * _expn( m_slant_depth_near($l_S32) ) * ( 1.0 + -_expn( m_slant_depth_inc($l_S32) + -( tau_i($l_S32) * 1.0/mu_0($l_S32) ) ) )
23003.                               $I_L22998_356 = 1 + $I_L22998_356
22998.                               if ( $I_L22998_356 >= $n_list_up_S2 ) exit
22998.                            enddo
23010.                            $I_L23010_358 = 0
23010. !dir$ ivdep
23010.                            do
23011.                               $l_S34 = list_up(1 + $I_L23010_358)
23012.                               radiance($l_S34, 1 + $I_L22929_406, 1 + $I_L22859_408) = _vu_plus( radiance($l_S34, 1 + $I_L22929_406, 1 + $I_L22859_408), azim_factor($l_S34, 1 + $I_L22859_408) * ls_sum_s($l_S34) * omega($l_S34, i) * geom_solar($l_S34) * trans_top($l_S34) )
23015.                               $I_L23010_358 = 1 + $I_L23010_358
23010.                               if ( $I_L23010_358 >= $n_list_up_S2 ) exit
23010.                            enddo
23010.                         endif
23016.                      else if ( isolir == 2 ) then
23017.                         if ( ms == 0 ) then
23018.                            if ( l_ir_source_quad ) then
23019.                               _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'not done', 0x800600000000L ) ) )
23019.                            else if ( $n_list_up_S2 > 0 ) then
23021.                               $I_L23021_360 = 0
23021. !dir$ ivdep
23021.                               do
23022.                                  $l_S36 = list_up(1 + $I_L23021_360)
23027.                                  if ( m_slant_depth_inc($l_S36) < -1.4901161193847656e-8 ) then
23028.                                     $x_S37 = ( _expn( m_slant_depth_near($l_S36) ) * ( 1.0 + -_expn( m_slant_depth_inc($l_S36) ) ) * 1.0/m_slant_depth_inc($l_S36) )
23028.                                  else
23034.                                     $x_S37 = -( _expn( m_slant_depth_near($l_S36) ) * ( 1.0 + 5.0e-1 * m_slant_depth_inc($l_S36) ) )
23034.                                  endif
23037.                                  radiance($l_S36, 1 + $I_L22929_406, 1 + $I_L22859_408) = _vu_plus( radiance($l_S36, 1 + $I_L22929_406, 1 + $I_L22859_408), -( ( 3.1830988618379069e-1 * diff_planck($l_S36, i) ) * $x_S37 * frac_tau_i($l_S36) * 1.0/( 1.0 + -( omega($l_S36, i) * phase_fnc($l_S36, i, 1) ) ) ) )
23041.                                  $I_L23021_360 = 1 + $I_L23021_360
23036.                                  if ( $I_L23021_360 >= $n_list_up_S2 ) exit
23036.                               enddo
23036.                            endif
23036.                         endif
23036.                      endif
23047.                      if ( n_red_eigensystem > 0 ) then
23048.                         if ( $n_list_up_S2 > 0 ) then
23047.                            $I_L23047_396 = 0
23047.                            do
23048.                               $I_L23048_362 = 0
23048. !dir$ ivdep
23048.                               do
23049.                                  $l_S39 = list_up(1 + $I_L23048_362)
23054.                                  $d_mu_S41 = mu($l_S39, 1 + $I_L23047_396) + -mu_v($l_S39, 1 + $I_L22859_408)
23055.                                  $eta_S42 = ( 2.2204460492503131e-16 * 1.0/( $d_mu_S41 + sign( 1.4901161193847656e-8, $d_mu_S41 ) ) )
23056.                                  $x_S43 = ( tau_i($l_S39) * 1.0/( mu($l_S39, 1 + $I_L23047_396) * mu_v($l_S39, 1 + $I_L22859_408) ) )
23058.                                  geom_integ_p($l_S39) = ( mu($l_S39, 1 + $I_L23047_396) * 1.0/( $d_mu_S41 + $eta_S42 ) ) * _expn( m_slant_depth_near($l_S39) ) * ( _expn( -( tau_i($l_S39) * 1.0/mu($l_S39, 1 + $I_L23047_396) ) ) * ( 1.0 + -( $eta_S42 * $x_S43 * ( 1.0 + $d_mu_S41 * $x_S43 * 4.0 ) ) ) + -_expn( m_slant_depth_inc($l_S39) ) )
23062.                                  geom_integ_m($l_S39) = ( mu($l_S39, 1 + $I_L23047_396) * 1.0/( mu($l_S39, 1 + $I_L23047_396) + mu_v($l_S39, 1 + $I_L22859_408) ) ) * _expn( m_slant_depth_near($l_S39) ) * ( _expn( -( ( tau($l_S39, i) + -tau_i($l_S39) ) * 1.0/mu($l_S39, 1 + $I_L23047_396) ) ) + -_expn( m_slant_depth_inc($l_S39) + -( tau($l_S39, i) * 1.0/mu($l_S39, 1 + $I_L23047_396) ) ) )
23067.                                  $I_L23048_362 = 1 + $I_L23048_362
23048.                                  if ( $I_L23048_362 >= $n_list_up_S2 ) exit
23048.                               enddo
23073.                               $I_L23073_364 = 0
23073. !dir$ ivdep
23073.                               do
23074.                                  $l_S45 = list_up(1 + $I_L23073_364)
23075.                                  weight_u($l_S45, 1 + $I_L22929_406, 1 + $I_L22859_408, 1 + $I_L23047_396) = omega($l_S45, i) * ls_sum_m($l_S45, 1 + $I_L23047_396) * geom_integ_m($l_S45)
23077.                                  weight_u($l_S45, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + $I_L23047_396 + 1) = omega($l_S45, i) * ls_sum_p($l_S45, 1 + $I_L23047_396) * geom_integ_p($l_S45)
23079.                                  $I_L23073_364 = 1 + $I_L23073_364
23073.                                  if ( $I_L23073_364 >= $n_list_up_S2 ) exit
23073.                               enddo
23080.                               $I_L23047_396 = 1 + $I_L23047_396
23079.                               if ( $I_L23047_396 >= n_red_eigensystem ) exit
23079.                            enddo
23079.                         endif
23079.                      endif
23079.                   endif
23087.                   if ( i <= i_rad_layer(1 + $I_L22929_406) ) then
23094.                      if ( i < i_rad_layer(1 + $I_L22929_406) ) then
23095.                         if ( $n_list_down_S3 > 0 ) then
23097.                            $SC_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L22929_406)
23097.                            $SC_i_rad_layer_I0 = i_rad_layer(1 + $I_L22929_406)
23095.                            $I_L23095_366 = 0
23095. !dir$ ivdep
23095.                            do
23096.                               $l_S47 = list_down(1 + $I_L23095_366)
23097.                               m_slant_depth_near($l_S47) = $SC_frac_rad_layer_I1 * tau($l_S47, $SC_i_rad_layer_I0)
23099.                               $I_L23095_366 = 1 + $I_L23095_366
23095.                               if ( $I_L23095_366 >= $n_list_down_S3 ) exit
23095.                            enddo
23095.                         endif
23100.                         $t_S48 = -1 + i_rad_layer(1 + $I_L22929_406)
23100.                         if ( i + -$t_S48 < 0 ) then
23101.                            if ( $n_list_down_S3 > 0 ) then
23100.                               $I_L23100_398 = 0
23100. !dir$ ivdep
23100.                               do
23101.                                  $I_L23101_370 = 0
23101.                                  do
23102.                                     $l_S50 = list_down(1 + $I_L23101_370)
23103.                                     m_slant_depth_near($l_S50) = _vu_plus( m_slant_depth_near($l_S50), tau($l_S50, $t_S48 + -$I_L23100_398) )
23105.                                     $I_L23101_370 = 1 + $I_L23101_370
23101.                                     if ( $I_L23101_370 >= $n_list_down_S3 ) exit
23101.                                  enddo
23106.                                  $I_L23100_398 = 1 + $I_L23100_398
23105.                                  if ( $I_L23100_398 >= ( $t_S48 + -i ) ) exit
23105.                               enddo
23105.                            endif
23105.                         endif
23107.                         if ( $n_list_down_S3 > 0 ) then
23107.                            $I_L23107_372 = 0
23107. !dir$ unroll 2
23107.                            do
23108.                               $l_S53 = list_down(1 + $I_L23107_372)
23109.                               $SCF_P3 = 1.0/mu_v($l_S53, 1 + $I_L22859_408)
23109.                               m_slant_depth_near($l_S53) = ( m_slant_depth_near($l_S53) * $SCF_P3 )
23111.                               m_slant_depth_inc($l_S53) = ( tau($l_S53, i) * 1.0/mu_v($l_S53, 1 + $I_L22859_408) )
23112.                               tau_i($l_S53) = tau($l_S53, i)
23113.                               frac_tau_i($l_S53) = 1.0
23114.                               $I_L23107_372 = 1 + $I_L23107_372
23107.                               if ( $I_L23107_372 >= $n_list_down_S3 ) exit
23107.                            enddo
23107.                         endif
23115.                      else if ( $n_list_down_S3 > 0 ) then
23119.                         $SC_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L22929_406)
23117.                         $I_L23117_368 = 0
23117. !dir$ ivdep
23117.                         do
23118.                            $l_S55 = list_down(1 + $I_L23117_368)
23119.                            $SVU_P2 = $SC_frac_rad_layer_I1 * tau($l_S55, i)
23119.                            tau_i($l_S55) = $SVU_P2
23120.                            m_slant_depth_near($l_S55) = 0.0
23121.                            m_slant_depth_inc($l_S55) = ( $SVU_P2 * 1.0/mu_v($l_S55, 1 + $I_L22859_408) )
23122.                            frac_tau_i($l_S55) = $SC_frac_rad_layer_I1
23123.                            $I_L23117_368 = 1 + $I_L23117_368
23117.                            if ( $I_L23117_368 >= $n_list_down_S3 ) exit
23117.                         enddo
23117.                      endif
23127.                      if ( isolir == 1 ) then
23129.                         if ( $n_list_down_S3 > 0 ) then
23129.                            $I_L23129_374 = 0
23129. !dir$ ivdep
23129.                            do
23130.                               $l_S57 = list_down(1 + $I_L23129_374)
23134.                               $d_mu_S58 = mu_0($l_S57) + mu_v($l_S57, 1 + $I_L22859_408)
23136.                               $x_S60 = ( tau_i($l_S57) * 1.0/( mu_0($l_S57) * mu_v($l_S57, 1 + $I_L22859_408) ) )
23138.                               geom_solar($l_S57) = ( mu_0($l_S57) * 1.0/( $d_mu_S58 + ( 2.2204460492503131e-16 * 1.0/( $d_mu_S58 + sign( 1.4901161193847656e-8, $d_mu_S58 ) ) ) ) ) * _expn( m_slant_depth_near($l_S57) ) * ( _expn( -( tau_i($l_S57) * 1.0/mu_0($l_S57) ) ) * ( 1.0 + -( ( 2.2204460492503131e-16 * 1.0/( $d_mu_S58 + sign( 1.4901161193847656e-8, $d_mu_S58 ) ) ) * $x_S60 * ( 1.0 + $d_mu_S58 * $x_S60 * 5.0e-1 ) ) ) + -_expn( m_slant_depth_inc($l_S57) ) )
23142.                               $I_L23129_374 = 1 + $I_L23129_374
23129.                               if ( $I_L23129_374 >= $n_list_down_S3 ) exit
23129.                            enddo
23147.                            $I_L23147_376 = 0
23147. !dir$ ivdep
23147.                            do
23148.                               $l_S62 = list_down(1 + $I_L23147_376)
23149.                               radiance($l_S62, 1 + $I_L22929_406, 1 + $I_L22859_408) = _vu_plus( radiance($l_S62, 1 + $I_L22929_406, 1 + $I_L22859_408), azim_factor($l_S62, 1 + $I_L22859_408) * ls_sum_s($l_S62) * omega($l_S62, i) * geom_solar($l_S62) )
23152.                               $I_L23147_376 = 1 + $I_L23147_376
23147.                               if ( $I_L23147_376 >= $n_list_down_S3 ) exit
23147.                            enddo
23147.                         endif
23153.                      else if ( isolir == 2 ) then
23154.                         if ( ms == 0 ) then
23155.                            if ( l_ir_source_quad ) then
23156.                               _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'not done', 0x800600000000L ) ) )
23156.                            else if ( $n_list_down_S3 > 0 ) then
23158.                               $I_L23158_378 = 0
23158. !dir$ ivdep
23158.                               do
23159.                                  $l_S64 = list_down(1 + $I_L23158_378)
23161.                                  if ( m_slant_depth_inc($l_S64) < -1.4901161193847656e-8 ) then
23162.                                     $x_S65 = ( _expn( m_slant_depth_near($l_S64) ) * ( 1.0 + -_expn( m_slant_depth_inc($l_S64) ) ) * 1.0/m_slant_depth_inc($l_S64) )
23162.                                  else
23168.                                     $x_S65 = -( _expn( m_slant_depth_near($l_S64) ) * ( 1.0 + 5.0e-1 * m_slant_depth_inc($l_S64) ) )
23168.                                  endif
23171.                                  radiance($l_S64, 1 + $I_L22929_406, 1 + $I_L22859_408) = _vu_plus( radiance($l_S64, 1 + $I_L22929_406, 1 + $I_L22859_408), ( ( 3.1830988618379069e-1 * diff_planck($l_S64, i) ) * $x_S65 * frac_tau_i($l_S64) * 1.0/( 1.0 + -( omega($l_S64, i) * phase_fnc($l_S64, i, 1) ) ) ) )
23175.                                  $I_L23158_378 = 1 + $I_L23158_378
23170.                                  if ( $I_L23158_378 >= $n_list_down_S3 ) exit
23170.                               enddo
23170.                            endif
23170.                         endif
23170.                      endif
23181.                      if ( n_red_eigensystem > 0 ) then
23183.                         if ( $n_list_down_S3 > 0 ) then
23181.                            $I_L23181_400 = 0
23181.                            do
23183.                               $I_L23183_380 = 0
23183. !dir$ ivdep
23183.                               do
23184.                                  $l_S67 = list_down(1 + $I_L23183_380)
23185.                                  geom_integ_p($l_S67) = ( mu($l_S67, 1 + $I_L23181_400) * 1.0/( mu($l_S67, 1 + $I_L23181_400) + -mu_v($l_S67, 1 + $I_L22859_408) ) ) * _expn( m_slant_depth_near($l_S67) ) * ( _expn( -( ( tau($l_S67, i) + -tau_i($l_S67) ) * 1.0/mu($l_S67, 1 + $I_L23181_400) ) ) + -_expn( m_slant_depth_inc($l_S67) + -( tau($l_S67, i) * 1.0/mu($l_S67, 1 + $I_L23181_400) ) ) )
23193.                                  $d_mu_S69 = mu($l_S67, 1 + $I_L23181_400) + mu_v($l_S67, 1 + $I_L22859_408)
23194.                                  $eta_S71 = ( 2.2204460492503131e-16 * 1.0/( $d_mu_S69 + sign( 1.4901161193847656e-8, $d_mu_S69 ) ) )
23195.                                  $x_S70 = ( tau_i($l_S67) * 1.0/( mu($l_S67, 1 + $I_L23181_400) * mu_v($l_S67, 1 + $I_L22859_408) ) )
23197.                                  geom_integ_m($l_S67) = ( mu($l_S67, 1 + $I_L23181_400) * 1.0/( $d_mu_S69 + ( 2.2204460492503131e-16 * 1.0/( $d_mu_S69 + sign( 1.4901161193847656e-8, $d_mu_S69 ) ) ) ) ) * _expn( m_slant_depth_near($l_S67) ) * ( _expn( -( tau_i($l_S67) * 1.0/mu($l_S67, 1 + $I_L23181_400) ) ) * ( 1.0 + -( $eta_S71 * $x_S70 * ( 1.0 + $d_mu_S69 * $x_S70 * 5.0e-1 ) ) ) + -_expn( m_slant_depth_inc($l_S67) ) )
23202.                                  $I_L23183_380 = 1 + $I_L23183_380
23183.                                  if ( $I_L23183_380 >= $n_list_down_S3 ) exit
23183.                               enddo
23206.                               $I_L23206_382 = 0
23206. !dir$ ivdep
23206.                               do
23207.                                  $l_S73 = list_down(1 + $I_L23206_382)
23208.                                  weight_u($l_S73, 1 + $I_L22929_406, 1 + $I_L22859_408, 1 + $I_L23181_400) = omega($l_S73, i) * ls_sum_m($l_S73, 1 + $I_L23181_400) * geom_integ_m($l_S73)
23210.                                  weight_u($l_S73, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + $I_L23181_400 + 1) = omega($l_S73, i) * ls_sum_p($l_S73, 1 + $I_L23181_400) * geom_integ_p($l_S73)
23212.                                  $I_L23206_382 = 1 + $I_L23206_382
23206.                                  if ( $I_L23206_382 >= $n_list_down_S3 ) exit
23206.                               enddo
23214.                               $I_L23181_400 = 1 + $I_L23181_400
23212.                               if ( $I_L23181_400 >= n_red_eigensystem ) exit
23212.                            enddo
23212.                         endif
23212.                      endif
23212.                   endif
23222.                   if ( isolir == 1 ) then
23224.                      if ( n_profile > 0 ) then
23224.                         $I_L23224_384 = 0
23224. !dir$ ivdep
23224.                         do
23225.                            radiance(1 + $I_L23224_384, 1 + $I_L22929_406, 1 + $I_L22859_408) = radiance(1 + $I_L23224_384, 1 + $I_L22929_406, 1 + $I_L22859_408) + azim_factor(1 + $I_L23224_384, 1 + $I_L22859_408) * weight_u(1 + $I_L23224_384, 1 + $I_L22929_406, 1 + $I_L22859_408, k_sol(1 + $I_L23224_384)) * upm_c(1 + $I_L23224_384, k_sol(1 + $I_L23224_384))
23228.                            $I_L23224_384 = 1 + $I_L23224_384
23224.                            if ( $I_L23224_384 >= n_profile ) exit
23224.                         enddo
23224.                      endif
23230.                   else if ( isolir == 2 ) then
23232.                      if ( n_red_eigensystem > 0 ) then
23233.                         if ( n_profile > 0 ) then
23232.                            $I_L23232_402 = 0
23232.                            if ( n_red_eigensystem >= 4 ) then
23232.                               $I_L23232_413 = 0
23232. !dir$ blocking_size( 0, 0 )
23232.                               do
23233.                                  $I_L23233_386 = 0
23233. !dir$ ivdep
23233. !dir$ blocking_size( 0, 0 )
23233.                                  do
23234.                                     radiance(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408) = radiance(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408) + azim_factor(1 + $I_L23233_386, 1 + $I_L22859_408) * ( weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, 1 + 4 * $I_L23232_413) * upm_c(1 + $I_L23233_386, 1 + 4 * $I_L23232_413) + weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + 4 * $I_L23232_413 + 1) * upm_c(1 + $I_L23233_386, n_red_eigensystem + 4 * $I_L23232_413 + 1) ) + azim_factor(1 + $I_L23233_386, 1 + $I_L22859_408) * ( weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, 2 + 4 * $I_L23232_413) * upm_c(1 + $I_L23233_386, 2 + 4 * $I_L23232_413) + weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + 4 * $I_L23232_413 + 2) * upm_c(1 + $I_L23233_386, n_red_eigensystem + 4 * $I_L23232_413 + 2) ) + azim_factor(1 + $I_L23233_386, 1 + $I_L22859_408) * ( weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, 3 + 4 * $I_L23232_413) * upm_c(1 + $I_L23233_386, 3 + 4 * $I_L23232_413) + weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + 4 * $I_L23232_413 + 3) * upm_c(1 + $I_L23233_386, n_red_eigensystem + 4 * $I_L23232_413 + 3) ) + azim_factor(1 + $I_L23233_386, 1 + $I_L22859_408) * ( weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, 4 + 4 * $I_L23232_413) * upm_c(1 + $I_L23233_386, 4 + 4 * $I_L23232_413) + weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + 4 * $I_L23232_413 + 4) * upm_c(1 + $I_L23233_386, n_red_eigensystem + 4 * $I_L23232_413 + 4) )
23239.                                     $I_L23233_386 = 1 + $I_L23233_386
23233.                                     if ( $I_L23233_386 >= n_profile ) exit
23233.                                  enddo
23240.                                  $I_L23232_413 = 1 + $I_L23232_413
23239.                                  if ( $I_L23232_413 >= _rsh( n_red_eigensystem, 2 ) ) exit
23239.                               enddo
23240.                               $I_L23232_402 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
23240.                            endif
23232.                            if ( $I_L23232_402 < n_red_eigensystem ) then
23232.                               $I_L23232_410 = 0
23232. !dir$ blocking_size( 0, 0 )
23232.                               do
23233.                                  $I_L23233_386 = 0
23233. !dir$ ivdep
23233. !dir$ blocking_size( 0, 0 )
23233.                                  do
23234.                                     radiance(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408) = radiance(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408) + azim_factor(1 + $I_L23233_386, 1 + $I_L22859_408) * ( weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, $I_L23232_402 + $I_L23232_410 + 1) * upm_c(1 + $I_L23233_386, $I_L23232_402 + $I_L23232_410 + 1) + weight_u(1 + $I_L23233_386, 1 + $I_L22929_406, 1 + $I_L22859_408, n_red_eigensystem + $I_L23232_402 + $I_L23232_410 + 1) * upm_c(1 + $I_L23233_386, n_red_eigensystem + $I_L23232_402 + $I_L23232_410 + 1) )
23239.                                     $I_L23233_386 = 1 + $I_L23233_386
23233.                                     if ( $I_L23233_386 >= n_profile ) exit
23233.                                  enddo
23240.                                  $I_L23232_410 = 1 + $I_L23232_410
23239.                                  if ( $I_L23232_410 >= n_red_eigensystem + -$I_L23232_402 ) exit
23239.                               enddo
23239.                            endif
23239.                         endif
23239.                      endif
23239.                   endif
23244.                   $I_L22929_406 = 1 + $I_L22929_406
23242.                   if ( $I_L22929_406 >= n_viewing_level ) exit
23242.                enddo
23242.             endif
23245.             $I_L22859_408 = 1 + $I_L22859_408
23244.             if ( $I_L22859_408 >= n_direction ) exit
23244.          enddo
23244.       endif
22652.       _free( t$3255 )
23250.       return
23250.       end
23250.       
23551.       
23551.       subroutine set_level_weights( i, n_profile, ls_trunc, ms, n_red_eigensystem, cg_coeff, mu, eig_vec, isolir, z_sol, mu_0, q_0, l_ir_source_quad, q_1, upm_c, k_sol, tau, sqs2, n_viewing_level, i_rad_layer, frac_rad_layer, l_assign, i_assign_level, c_ylm, weight_u, nd_profile, nd_viewing_level, nd_max_order, nd_red_eigensystem, nd_sph_cf_weight )
23275.       t$989 = ( ls_trunc + -ms + 1 )
23374.       t$3292 = _zla( 0, ( ls_trunc + -ms + 1 ) )
23275.       t$988 = nd_profile
23275.       t$992 = nd_red_eigensystem
23376.       t$3293 = _zla( 0, nd_profile )
23275.       t$3294 = _zla( 0, nd_profile )
23376.       t$3295 = _zla( 0, nd_red_eigensystem )
23275.       t$3296 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem )
23275.       t$990 = ( 2 * nd_red_eigensystem )
23378.       t$3297 = _zla( 0, ( 2 * nd_red_eigensystem ) )
23275.       t$3298 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
23275.       t$3299 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
23275.       t$3300 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile )
23275.       t$3301 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) )
23275.       t$991 = nd_max_order
23275.       t$3302 = 1 + nd_max_order
23372.       t$3303 = _zla( 0, 1 + nd_max_order )
23275.       t$3304 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_max_order )
23275.       t$993 = nd_viewing_level
23387.       t$3305 = _zla( 0, nd_viewing_level )
23275.       t$3306 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
23275.       t$3307 = _zla( 0, ( ls_trunc + -ms + 1 ) ) * _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
23275.       t$994 = nd_sph_cf_weight
23398.       t$3308 = _zla( 0, nd_sph_cf_weight )
23275.       t$3309 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight )
23275.       t$3310 = _zla( 0, nd_profile ) * _zla( 0, ( 2 * nd_red_eigensystem ) ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight )
23420.       t$3313 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8
23422.       t$3314 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8
23422.       t$3316 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
23424.       t$3317 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
23424.       t$3319 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
23426.       t$3320 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
23426.       t$3322 = _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 16 * _zla( 0, nd_profile )
23275.       t$3311 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16 + 16 * _zla( 0, nd_profile ) ), 8 )
23420.       t$3312 = t$3311
23422.       t$3315 = t$3311 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 8
23424.       t$3318 = t$3311 + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
23426.       t$3321 = t$3311 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_red_eigensystem ) * 16
23431.       if ( l_assign ) then
23488.          $SC_cg_coeff_I1 = cg_coeff(2)
23478.          $SC_cg_coeff_I0 = cg_coeff(1)
23431. !dir$ loop_info (automatic) cache_nt( i_rad_layer )
23431.          do
23434.             if ( n_red_eigensystem > 0 ) then
23435.                if ( n_profile > 0 ) then
23434.                   $SCA_frac_rad_layer_I4 = frac_rad_layer(i_assign_level)
23434.                   $I_L23434_172 = 0
23434.                   if ( n_red_eigensystem >= 4 ) then
23434.                      $I_L23434_198 = 0
23434. !dir$ blocking_size( 0, 0 )
23434.                      do
23435.                         $I_L23435_150 = 0
23435. !dir$ ivdep
23435. !dir$ blocking_size( 0, 0 )
23435.                         do
23436.                            exp_minus(1 + $I_L23435_150, 1 + 4 * $I_L23434_198) = _expn( -( $SCA_frac_rad_layer_I4 * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 1 + 4 * $I_L23434_198) ) )
23439.                            exp_plus(1 + $I_L23435_150, 1 + 4 * $I_L23434_198) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I4 ) * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 1 + 4 * $I_L23434_198) ) )
23436.                            exp_minus(1 + $I_L23435_150, 2 + 4 * $I_L23434_198) = _expn( -( $SCA_frac_rad_layer_I4 * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 2 + 4 * $I_L23434_198) ) )
23439.                            exp_plus(1 + $I_L23435_150, 2 + 4 * $I_L23434_198) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I4 ) * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 2 + 4 * $I_L23434_198) ) )
23436.                            exp_minus(1 + $I_L23435_150, 3 + 4 * $I_L23434_198) = _expn( -( $SCA_frac_rad_layer_I4 * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 3 + 4 * $I_L23434_198) ) )
23439.                            exp_plus(1 + $I_L23435_150, 3 + 4 * $I_L23434_198) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I4 ) * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 3 + 4 * $I_L23434_198) ) )
23436.                            exp_minus(1 + $I_L23435_150, 4 + 4 * $I_L23434_198) = _expn( -( $SCA_frac_rad_layer_I4 * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 4 + 4 * $I_L23434_198) ) )
23439.                            exp_plus(1 + $I_L23435_150, 4 + 4 * $I_L23434_198) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I4 ) * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, 4 + 4 * $I_L23434_198) ) )
23442.                            $I_L23435_150 = 1 + $I_L23435_150
23435.                            if ( $I_L23435_150 >= n_profile ) exit
23435.                         enddo
23443.                         $I_L23434_198 = 1 + $I_L23434_198
23442.                         if ( $I_L23434_198 >= _rsh( n_red_eigensystem, 2 ) ) exit
23442.                      enddo
23443.                      $I_L23434_172 = and( 0xfffffffffffffffcUL, n_red_eigensystem )
23443.                   endif
23434.                   if ( $I_L23434_172 < n_red_eigensystem ) then
23434.                      $I_L23434_192 = 0
23434. !dir$ blocking_size( 0, 0 )
23434.                      do
23435.                         $I_L23435_150 = 0
23435. !dir$ ivdep
23435. !dir$ blocking_size( 0, 0 )
23435.                         do
23436.                            exp_minus(1 + $I_L23435_150, $I_L23434_172 + $I_L23434_192 + 1) = _expn( -( $SCA_frac_rad_layer_I4 * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, $I_L23434_172 + $I_L23434_192 + 1) ) )
23439.                            exp_plus(1 + $I_L23435_150, $I_L23434_172 + $I_L23434_192 + 1) = _expn( ( ( -1.0 + $SCA_frac_rad_layer_I4 ) * tau(1 + $I_L23435_150) * 1.0/mu(1 + $I_L23435_150, $I_L23434_172 + $I_L23434_192 + 1) ) )
23442.                            $I_L23435_150 = 1 + $I_L23435_150
23435.                            if ( $I_L23435_150 >= n_profile ) exit
23435.                         enddo
23443.                         $I_L23434_192 = 1 + $I_L23434_192
23442.                         if ( $I_L23434_192 >= n_red_eigensystem + -$I_L23434_172 ) exit
23442.                      enddo
23442.                   endif
23442.                endif
23527.                if ( ls_trunc + -ms >= 0 ) then
23529.                   if ( n_profile > 0 ) then
23523.                      $I_L23523_190 = 0
23523.                      do
23527.                         $I_L23527_188 = 0
23527.                         do
23523.                            $I_L23523_185 = 0
23523. !dir$ shortloop16
23523. !dir$ blocking_size( 16, 16 )
23523.                            do
23527.                               $I_L23527_180 = 0
23527. !dir$ shortloop16
23527. !dir$ blocking_size( 16, 16 )
23527.                               do
23528.                                  $m1ls_S20 = int( real( 1 + -2 * mod( ( $I_L23527_180 + 16 * $I_L23527_188 ), 2 ), 8 ) )
23529.                                  $I_L23529_170 = 0
23529. !dir$ ivdep
23529. !dir$ loop_info (automatic) cache_nt( weight_u )
23529.                                  do
23530.                                     weight_u(1 + $I_L23529_170, i_assign_level, $I_L23527_180 + 16 * $I_L23527_188 + 1, $I_L23523_185 + 16 * $I_L23523_190 + 1) = eig_vec(1 + $I_L23529_170, $I_L23527_180 + 16 * $I_L23527_188 + 1, $I_L23523_185 + 16 * $I_L23523_190 + 1) * exp_minus(1 + $I_L23529_170, $I_L23523_185 + 16 * $I_L23523_190 + 1) * $m1ls_S20
23532.                                     weight_u(1 + $I_L23529_170, i_assign_level, $I_L23527_180 + 16 * $I_L23527_188 + 1, n_red_eigensystem + $I_L23523_185 + 16 * $I_L23523_190 + 1) = eig_vec(1 + $I_L23529_170, $I_L23527_180 + 16 * $I_L23527_188 + 1, $I_L23523_185 + 16 * $I_L23523_190 + 1) * exp_plus(1 + $I_L23529_170, $I_L23523_185 + 16 * $I_L23523_190 + 1)
23534.                                     $I_L23529_170 = 1 + $I_L23529_170
23529.                                     if ( $I_L23529_170 >= n_profile ) exit
23529.                                  enddo
23527.                                  $I_L23527_180 = 1 + $I_L23527_180
23534.                                  if ( $I_L23527_180 >= min( ls_trunc + -ms + 1, 16 + 16 * $I_L23527_188 ) + -16 * $I_L23527_188 ) exit
23534.                               enddo
23523.                               $I_L23523_185 = 1 + $I_L23523_185
23523.                               if ( $I_L23523_185 >= min( n_red_eigensystem, 16 + 16 * $I_L23523_190 ) + -16 * $I_L23523_190 ) exit
23523.                            enddo
23527.                            $I_L23527_188 = 1 + $I_L23527_188
23535.                            if ( $I_L23527_188 >= 1 + max( 0, -1 + _rsh( ls_trunc + -ms + 16, 4 ) ) ) exit
23535.                         enddo
23523.                         $I_L23523_190 = 1 + $I_L23523_190
23523.                         if ( $I_L23523_190 >= 1 + max( 0, -1 + _rsh( 15 + n_red_eigensystem, 4 ) ) ) exit
23523.                      enddo
23523.                   endif
23523.                endif
23523.             endif
23446.             if ( isolir == 1 ) then
23447.                if ( n_profile > 0 ) then
23447.                   $SCA_frac_rad_layer_I3 = frac_rad_layer(i_assign_level)
23447.                   $I_L23447_152 = 0
23447. !dir$ ivdep
23447.                   do
23448.                      x_m(1 + $I_L23447_152) = _expn( -( $SCA_frac_rad_layer_I3 * tau(1 + $I_L23447_152) * 1.0/mu_0(1 + $I_L23447_152) ) )
23450.                      $I_L23447_152 = 1 + $I_L23447_152
23447.                      if ( $I_L23447_152 >= n_profile ) exit
23447.                   enddo
23447.                endif
23451.                if ( ls_trunc + -ms >= 0 ) then
23452.                   if ( n_profile > 0 ) then
23451.                      $I_L23451_174 = 0
23451.                      if ( ls_trunc + -ms + -3 >= 0 ) then
23451.                         $I_L23451_200 = 0
23451. !dir$ blocking_size( 0, 0 )
23451.                         do
23452.                            $I_L23452_160 = 0
23452. !dir$ ivdep
23452. !dir$ blocking_size( 0, 0 )
23452.                            do
23453.                               c_ylm(1 + $I_L23452_160, i_assign_level, 1 + 4 * $I_L23451_200) = c_ylm(1 + $I_L23452_160, i_assign_level, 1 + 4 * $I_L23451_200) + x_m(1 + $I_L23452_160) * z_sol(1 + $I_L23452_160, 1 + 4 * $I_L23451_200)
23453.                               c_ylm(1 + $I_L23452_160, i_assign_level, 2 + 4 * $I_L23451_200) = c_ylm(1 + $I_L23452_160, i_assign_level, 2 + 4 * $I_L23451_200) + x_m(1 + $I_L23452_160) * z_sol(1 + $I_L23452_160, 2 + 4 * $I_L23451_200)
23453.                               c_ylm(1 + $I_L23452_160, i_assign_level, 3 + 4 * $I_L23451_200) = c_ylm(1 + $I_L23452_160, i_assign_level, 3 + 4 * $I_L23451_200) + x_m(1 + $I_L23452_160) * z_sol(1 + $I_L23452_160, 3 + 4 * $I_L23451_200)
23453.                               c_ylm(1 + $I_L23452_160, i_assign_level, 4 + 4 * $I_L23451_200) = c_ylm(1 + $I_L23452_160, i_assign_level, 4 + 4 * $I_L23451_200) + x_m(1 + $I_L23452_160) * z_sol(1 + $I_L23452_160, 4 + 4 * $I_L23451_200)
23455.                               $I_L23452_160 = 1 + $I_L23452_160
23452.                               if ( $I_L23452_160 >= n_profile ) exit
23452.                            enddo
23456.                            $I_L23451_200 = 1 + $I_L23451_200
23455.                            if ( $I_L23451_200 >= _rsh( ls_trunc + -ms + 1, 2 ) ) exit
23455.                         enddo
23456.                         $I_L23451_174 = and( 0xfffffffffffffffcUL, ls_trunc + -ms + 1 )
23456.                      endif
23451.                      if ( $I_L23451_174 < ls_trunc + -ms + 1 ) then
23451.                         $I_L23451_195 = 0
23451. !dir$ blocking_size( 0, 0 )
23451.                         do
23452.                            $I_L23452_160 = 0
23452. !dir$ ivdep
23452. !dir$ blocking_size( 0, 0 )
23452.                            do
23453.                               c_ylm(1 + $I_L23452_160, i_assign_level, $I_L23451_174 + $I_L23451_195 + 1) = c_ylm(1 + $I_L23452_160, i_assign_level, $I_L23451_174 + $I_L23451_195 + 1) + x_m(1 + $I_L23452_160) * z_sol(1 + $I_L23452_160, $I_L23451_174 + $I_L23451_195 + 1)
23455.                               $I_L23452_160 = 1 + $I_L23452_160
23452.                               if ( $I_L23452_160 >= n_profile ) exit
23452.                            enddo
23456.                            $I_L23451_195 = 1 + $I_L23451_195
23455.                            if ( $I_L23451_195 >= ls_trunc + -ms + -$I_L23451_174 + 1 ) exit
23455.                         enddo
23455.                      endif
23455.                   endif
23455.                endif
23459.                if ( n_profile > 0 ) then
23459.                   $I_L23459_162 = 0
23459. !dir$ ivdep
23459.                   do
23460.                      x_m(1 + $I_L23459_162) = upm_c(1 + $I_L23459_162, k_sol(1 + $I_L23459_162)) * exp_minus(1 + $I_L23459_162, k_sol(1 + $I_L23459_162))
23461.                      $I_L23459_162 = 1 + $I_L23459_162
23459.                      if ( $I_L23459_162 >= n_profile ) exit
23459.                   enddo
23459.                endif
23462.                if ( ls_trunc + -ms >= 0 ) then
23464.                   if ( n_profile > 0 ) then
23462.                      $I_L23462_176 = 0
23462. !dir$ ivdep
23462.                      do
23463.                         $m1ls_S7 = int( real( 1 + -2 * mod( $I_L23462_176, 2 ), 8 ) )
23464.                         $I_L23464_164 = 0
23464. !dir$ unroll 4
23464.                         do
23465.                            c_ylm(1 + $I_L23464_164, i_assign_level, 1 + $I_L23462_176) = c_ylm(1 + $I_L23464_164, i_assign_level, 1 + $I_L23462_176) + x_m(1 + $I_L23464_164) * $m1ls_S7 * eig_vec(1 + $I_L23464_164, 1 + $I_L23462_176, k_sol(1 + $I_L23464_164))
23468.                            $I_L23464_164 = 1 + $I_L23464_164
23464.                            if ( $I_L23464_164 >= n_profile ) exit
23464.                         enddo
23469.                         $I_L23462_176 = 1 + $I_L23462_176
23468.                         if ( $I_L23462_176 >= ls_trunc + -ms + 1 ) exit
23468.                      enddo
23468.                   endif
23468.                endif
23471.             else if ( isolir == 2 ) then
23473.                if ( ms == 0 ) then
23475.                   if ( l_ir_source_quad ) then
23477.                      if ( n_profile > 0 ) then
23477.                         $SCA_frac_rad_layer_I2 = frac_rad_layer(i_assign_level)
23477.                         $I_L23477_154 = 0
23477. !dir$ ivdep
23477.                         do
23478.                            c_ylm(1 + $I_L23477_154, i_assign_level, 1) = c_ylm(1 + $I_L23477_154, i_assign_level, 1) + ( $SC_cg_coeff_I0 * q_1(1 + $I_L23477_154) * 1.0/sqs2(1 + $I_L23477_154, 0) )
23481.                            c_ylm(1 + $I_L23477_154, i_assign_level, 2) = c_ylm(1 + $I_L23477_154, i_assign_level, 2) + q_0(1 + $I_L23477_154) + q_1(1 + $I_L23477_154) * ( -5.0e-1 + $SCA_frac_rad_layer_I2 )
23485.                            $I_L23477_154 = 1 + $I_L23477_154
23477.                            if ( $I_L23477_154 >= n_profile ) exit
23477.                         enddo
23477.                      endif
23486.                      if ( ls_trunc > 1 ) then
23487.                         if ( n_profile > 0 ) then
23487.                            $I_L23487_156 = 0
23487. !dir$ ivdep
23487.                            do
23488.                               c_ylm(1 + $I_L23487_156, i_assign_level, 3) = ( c_ylm(1 + $I_L23487_156, i_assign_level, 3) * $SC_cg_coeff_I1 * q_1(1 + $I_L23487_156) * 1.0/sqs2(1 + $I_L23487_156, 2) )
23491.                               $I_L23487_156 = 1 + $I_L23487_156
23487.                               if ( $I_L23487_156 >= n_profile ) exit
23487.                            enddo
23487.                         endif
23487.                      endif
23487.                   else
23496.                      if ( n_profile > 0 ) then
23496.                         $I_L23496_158 = 0
23496. !dir$ ivdep
23496.                         do
23497.                            c_ylm(1 + $I_L23496_158, i_assign_level, 2) = c_ylm(1 + $I_L23496_158, i_assign_level, 2) + q_0(1 + $I_L23496_158)
23499.                            $I_L23496_158 = 1 + $I_L23496_158
23496.                            if ( $I_L23496_158 >= n_profile ) exit
23496.                         enddo
23496.                      endif
23502.                      if ( n_red_eigensystem > 0 ) then
23502.                         $I_L23502_183 = 0
23502.                         do
23503.                            if ( n_profile > 0 ) then
23503.                               $I_L23503_166 = 0
23503. !dir$ ivdep
23503.                               do
23504.                                  x_m(1 + $I_L23503_166) = upm_c(1 + $I_L23503_166, 1 + $I_L23502_183) * exp_minus(1 + $I_L23503_166, 1 + $I_L23502_183)
23505.                                  x_p(1 + $I_L23503_166) = upm_c(1 + $I_L23503_166, n_red_eigensystem + $I_L23502_183 + 1) * exp_plus(1 + $I_L23503_166, 1 + $I_L23502_183)
23506.                                  $I_L23503_166 = 1 + $I_L23503_166
23503.                                  if ( $I_L23503_166 >= n_profile ) exit
23503.                               enddo
23503.                            endif
23507.                            if ( ls_trunc >= 0 ) then
23510.                               if ( n_profile > 0 ) then
23507.                                  $I_L23507_178 = 0
23507.                                  do
23508.                                     $m1ls_S16 = int( real( 1 + -2 * mod( $I_L23507_178, 2 ), 8 ) )
23510.                                     $I_L23510_168 = 0
23510. !dir$ ivdep
23510.                                     do
23511.                                        c_ylm(1 + $I_L23510_168, i_assign_level, 1 + $I_L23507_178) = c_ylm(1 + $I_L23510_168, i_assign_level, 1 + $I_L23507_178) + ( x_m(1 + $I_L23510_168) * $m1ls_S16 + x_p(1 + $I_L23510_168) ) * eig_vec(1 + $I_L23510_168, 1 + $I_L23507_178, 1 + $I_L23502_183)
23514.                                        $I_L23510_168 = 1 + $I_L23510_168
23510.                                        if ( $I_L23510_168 >= n_profile ) exit
23510.                                     enddo
23515.                                     $I_L23507_178 = 1 + $I_L23507_178
23514.                                     if ( $I_L23507_178 >= 1 + ls_trunc ) exit
23514.                                  enddo
23514.                               endif
23514.                            endif
23516.                            $I_L23502_183 = 1 + $I_L23502_183
23515.                            if ( $I_L23502_183 >= n_red_eigensystem ) exit
23515.                         enddo
23515.                      endif
23515.                   endif
23515.                endif
23515.             endif
23539.             i_assign_level = 1 + i_assign_level
23540.             if ( i_assign_level > n_viewing_level ) then
23543.                l_assign = .false.
23541.             else if ( i_rad_layer(i_assign_level) > i ) then
23541.                l_assign = .false.
23541.             endif
23544.             if ( l_assign == 0 ) exit
23544.          enddo
23544.       endif
23275.       _free( t$3311 )
23551.       return
23551.       end
23551.       
23681.       
23681.       subroutine set_matrix_pentadiagonal( n_profile, n_layer, trans, reflect, s_down, s_up, diffuse_albedo, direct_albedo, flux_direct_ground, flux_inc_down, d_planck_flux_surface, a5, b, nd_profile, nd_layer )
23569.       t$996 = nd_profile
23569.       t$997 = nd_layer
23602.       t$3323 = _zla( 0, nd_profile )
23569.       t$3324 = _zla( 0, nd_profile )
23602.       t$3325 = _zla( 0, nd_layer )
23569.       t$3326 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
23569.       t$998 = ( 2 + 2 * nd_layer )
23569.       t$3327 = 5 * _zla( 0, nd_profile )
23621.       t$3328 = _zla( 0, ( 2 + 2 * nd_layer ) )
23569.       t$3329 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 5
23569.       t$3330 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
23636.       if ( n_profile > 0 ) then
23636.          $I_L23636_16 = 0
23636. !dir$ ivdep
23636.          do
23637.             a5(1 + $I_L23636_16, 4, 2) = 0.0
23638.             a5(1 + $I_L23636_16, 3, 2) = 1.0
23639.             a5(1 + $I_L23636_16, 2, 2) = 0.0
23640.             a5(1 + $I_L23636_16, 1, 2) = 0.0
23641.             b(1 + $I_L23636_16, 2) = flux_inc_down(1 + $I_L23636_16)
23642.             $I_L23636_16 = 1 + $I_L23636_16
23636.             if ( $I_L23636_16 >= n_profile ) exit
23636.          enddo
23636.       endif
23646.       if ( n_layer > 0 ) then
23647.          if ( n_profile > 0 ) then
23646.             $I_L23646_22 = 0
23646.             do
23647.                $I_L23647_18 = 0
23647. !dir$ ivdep
23647.                do
23649.                   a5(1 + $I_L23647_18, 5, 1 + 2 * $I_L23646_22) = 0.0
23650.                   a5(1 + $I_L23647_18, 4, 1 + 2 * $I_L23646_22) = 0.0
23651.                   a5(1 + $I_L23647_18, 3, 1 + 2 * $I_L23646_22) = -1.0
23652.                   a5(1 + $I_L23647_18, 2, 1 + 2 * $I_L23646_22) = reflect(1 + $I_L23647_18, 1 + $I_L23646_22)
23653.                   a5(1 + $I_L23647_18, 1, 1 + 2 * $I_L23646_22) = trans(1 + $I_L23647_18, 1 + $I_L23646_22)
23654.                   b(1 + $I_L23647_18, 1 + 2 * $I_L23646_22) = -s_up(1 + $I_L23647_18, 1 + $I_L23646_22)
23656.                   a5(1 + $I_L23647_18, 5, 4 + 2 * $I_L23646_22) = trans(1 + $I_L23647_18, 1 + $I_L23646_22)
23657.                   a5(1 + $I_L23647_18, 4, 4 + 2 * $I_L23646_22) = reflect(1 + $I_L23647_18, 1 + $I_L23646_22)
23658.                   a5(1 + $I_L23647_18, 3, 4 + 2 * $I_L23646_22) = -1.0
23659.                   a5(1 + $I_L23647_18, 2, 4 + 2 * $I_L23646_22) = 0.0
23660.                   a5(1 + $I_L23647_18, 1, 4 + 2 * $I_L23646_22) = 0.0
23661.                   b(1 + $I_L23647_18, 4 + 2 * $I_L23646_22) = -s_down(1 + $I_L23647_18, 1 + $I_L23646_22)
23663.                   $I_L23647_18 = 1 + $I_L23647_18
23647.                   if ( $I_L23647_18 >= n_profile ) exit
23647.                enddo
23664.                $I_L23646_22 = 1 + $I_L23646_22
23663.                if ( $I_L23646_22 >= n_layer ) exit
23663.             enddo
23663.          endif
23663.       endif
23667.       if ( n_profile > 0 ) then
23667.          $I_L23667_20 = 0
23667. !dir$ ivdep
23667.          do
23668.             a5(1 + $I_L23667_20, 5, 1 + 2 * n_layer) = 0.0
23669.             a5(1 + $I_L23667_20, 4, 1 + 2 * n_layer) = 0.0
23670.             a5(1 + $I_L23667_20, 3, 1 + 2 * n_layer) = 1.0
23671.             a5(1 + $I_L23667_20, 2, 1 + 2 * n_layer) = -diffuse_albedo(1 + $I_L23667_20)
23672.             b(1 + $I_L23667_20, 1 + 2 * n_layer) = ( 1.0 + -diffuse_albedo(1 + $I_L23667_20) ) * d_planck_flux_surface(1 + $I_L23667_20) + ( direct_albedo(1 + $I_L23667_20) + -diffuse_albedo(1 + $I_L23667_20) ) * flux_direct_ground(1 + $I_L23667_20)
23676.             $I_L23667_20 = 1 + $I_L23667_20
23667.             if ( $I_L23667_20 >= n_profile ) exit
23667.          enddo
23667.       endif
23681.       return
23681.       end
23681.       
23845.       
23845.       subroutine set_moist_aerosol_properties( ierr, n_profile, n_layer, n_aerosol, i_aerosol_parametrization, nhumidity, water_mix_ratio, t, p, delta_humidity, mean_rel_humidity, i_humidity_pointer, nd_profile, nd_layer, nd_aerosol_species )
23700.       t$1003 = nd_aerosol_species
23742.       t$3331 = _zla( 0, nd_aerosol_species )
23700.       t$1004 = nd_profile
23700.       t$1005 = nd_layer
23750.       t$3332 = _zla( 0, nd_profile )
23700.       t$3333 = _zla( 0, nd_profile )
23750.       t$3334 = _zla( 0, nd_layer )
23700.       t$3335 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
23774.       t$3338 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
23700.       t$3336 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 ), 8 )
23774.       t$3337 = t$3336
23792.       call qsat_gill( mix_ratio_sat(1, 1), t(1, 1), p(1, 1), n_profile, n_layer, nd_profile, nd_layer )
23806.       $nhumidity_common_S1 = 0
23807.       if ( n_aerosol > 0 ) then
23807.          $I_L23807_18 = 0
23807.          do
23808.             if ( i_aerosol_parametrization(1 + $I_L23807_18) /= 2 .orelse. nhumidity(1 + $I_L23807_18) <= 0 ) then
23824.                $I_L23807_18 = 1 + $I_L23807_18
23823.             else
23823.             endif
23823.             if ( $I_L23807_18 >= n_aerosol ) exit
23823.          enddo
23823.          goto 10
23823.       else
23823.    10    continue
23826.          delta_humidity = 1.0/( -1.0 + real( $nhumidity_common_S1, 8 ) )
23828.          if ( nd_layer > 0 ) then
23829.             if ( nd_profile > 0 ) then
23828.                $I_L23828_22 = 0
23828.                do
23829.                   $I_L23829_20 = 0
23829. !dir$ ivdep
23829.                   do
23830.                      $mean_rel_humidity_WR0_R0 = ( water_mix_ratio(1 + $I_L23829_20, 1 + $I_L23828_22) * ( 1.0 + -mix_ratio_sat(1 + $I_L23829_20, 1 + $I_L23828_22) ) * 1.0/( ( 1.0 + -water_mix_ratio(1 + $I_L23829_20, 1 + $I_L23828_22) ) * mix_ratio_sat(1 + $I_L23829_20, 1 + $I_L23828_22) ) )
23835.                      $mean_rel_humidity_WR0_R0 = min( 9.9999000000000005e-1, $mean_rel_humidity_WR0_R0 )
23835.                      mean_rel_humidity(1 + $I_L23829_20, 1 + $I_L23828_22) = $mean_rel_humidity_WR0_R0
23837.                      i_humidity_pointer(1 + $I_L23829_20, 1 + $I_L23828_22) = 1 + int( $mean_rel_humidity_WR0_R0 * ( -1 + $nhumidity_common_S1 ) )
23839.                      $I_L23829_20 = 1 + $I_L23829_20
23829.                      if ( $I_L23829_20 >= nd_profile ) exit
23829.                   enddo
23840.                   $I_L23828_22 = 1 + $I_L23828_22
23839.                   if ( $I_L23828_22 >= nd_layer ) exit
23839.                enddo
23839.             endif
23839.          endif
23700.          _free( t$3336 )
23700.       endif
23845.       return
23845.       end
23845.       
23905.       
23905.       integer
23905.       function set_n_source_coeff( isolir, l_ir_source_quad )
23905.       set_n_source_coeff = cvmg( 1, 2, and( isolir /= 1, l_ir_source_quad == 0 ) )
23905.       return
23905.       end
23905.       
24022.       
24022.       subroutine set_rad_layer( ierr, n_layer, n_viewing_level, viewing_level, i_rad_layer, frac_rad_layer, nd_viewing_level )
23928.       t$1013 = nd_viewing_level
23963.       t$3339 = _zla( 0, nd_viewing_level )
23987.       if ( n_viewing_level > 0 ) then
23987.          $I_L23987_4 = 0
23987. !dir$ ivdep
23987.          do
23990.             if ( viewing_level(1 + $I_L23987_4) < 0.0 ) then
23991.                _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1015,  _substr(t$1014,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: A viewing level is above the TOA.', 0x800600000000L ) ) )
23993.                ierr = 1
23993.                goto 10
23993.             endif
23997.             i_rad_layer(1 + $I_L23987_4) = 1 + int( viewing_level(1 + $I_L23987_4) )
23998.             frac_rad_layer(1 + $I_L23987_4) = -( real( i_rad_layer(1 + $I_L23987_4), 8 ) ) + viewing_level(1 + $I_L23987_4) + 1.0
24005.             if ( i_rad_layer(1 + $I_L23987_4) <= n_layer ) then
24017.                $I_L23987_4 = 1 + $I_L23987_4
24006.             else if ( frac_rad_layer(1 + $I_L23987_4) < 3.5527136788005009e-15 ) then
24006.             else
24006.             endif
24006.             if ( $I_L23987_4 >= n_viewing_level ) exit
24006.          enddo
24006.       endif
24006.    10 continue
24022.       return
24022.       end
24022.       
24220.       
24220.       subroutine set_truncation( ierr, i_truncation, ls_global_trunc, ls_max_order, ls_local_trunc, ms_min, ms_max, ms_trunc, ia_sph_mm, n_order_phase, nd_max_order )
24044.       t$1022 = nd_max_order
24044.       t$3340 = 1 + nd_max_order
24087.       t$3341 = _zla( 0, 1 + nd_max_order )
24112.       if ( i_truncation /= 3 ) then
24220.          goto 10
24220.       else if ( ms_max > 0 ) then
24115.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1024,  _substr(t$1023,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An azimuthally symmetric truncation is not appropriate IF ms_max > 0.', 0x800600000000L ) ) )
24118.          ierr = 1
24118.       else
24118.    10    continue
24123.          if ( i_truncation == 1 ) then
24121.             goto 20
24121.             goto 30
24123.          else if ( i_truncation == 4 ) then
24123.    20       continue
24142.             ls_max_order = 1 + ls_global_trunc
24143.             ms_trunc(ms_min) = ms_min
24144.             if ( ls_global_trunc + -ms_min >= 0 ) then
24144.                $I_L24144_48 = 0
24144. !dir$ ivdep
24144.                do
24145.                   ms_trunc(ms_min + $I_L24144_48 + 1) = min( ms_max, min( ls_global_trunc, ( ms_min + $I_L24144_48 + 1 ) ) )
24146.                   $I_L24144_48 = 1 + $I_L24144_48
24144.                   if ( $I_L24144_48 >= ls_global_trunc + -ms_min + 1 ) exit
24144.                enddo
24144.             endif
24147.             ia_sph_mm(ms_min) = 1
24148.             if ( ms_max + -ms_min > 0 ) then
24148.                $ia_sph_mm_WR0_R0 = 1
24148.                $I_L24148_50 = 0
24148. !dir$ unroll 4
24148.                do
24149.                   $ia_sph_mm_WR0_R0 = ( ls_global_trunc + $ia_sph_mm_WR0_R0 + -ms_min + -$I_L24148_50 + 3 )
24149.                   ia_sph_mm(ms_min + $I_L24148_50 + 1) = $ia_sph_mm_WR0_R0
24150.                   $I_L24148_50 = 1 + $I_L24148_50
24148.                   if ( $I_L24148_50 >= ( ms_max + -ms_min ) ) exit
24148.                enddo
24148.             endif
24153.             if ( ms_max + -ms_min >= 0 ) then
24153.                $I_L24153_52 = 0
24153. !dir$ ivdep
24153.                do
24154.                   ls_local_trunc(ms_min + $I_L24153_52) = ls_global_trunc + mod( ( ms_min + $I_L24153_52 ), 2 )
24155.                   $I_L24153_52 = 1 + $I_L24153_52
24153.                   if ( $I_L24153_52 >= ms_max + -ms_min + 1 ) exit
24153.                enddo
24153.             endif
24153.             goto 30
24153.          else if ( i_truncation == 2 ) then
24163.             ls_max_order = ls_global_trunc + mod( ms_min, 2 )
24169.             ms_trunc(ms_min) = ms_min
24170.             if ( ls_global_trunc + mod( ms_min, 2 ) + -ms_min > 0 ) then
24170.                $I_L24170_54 = 0
24170. !dir$ ivdep
24170.                do
24171.                   ms_trunc(ms_min + $I_L24170_54 + 1) = min( ms_max, min( ( ls_global_trunc + mod( ms_min, 2 ) + -$I_L24170_54 + -1 ), ( ms_min + $I_L24170_54 + 1 ) ) )
24172.                   $I_L24170_54 = 1 + $I_L24170_54
24170.                   if ( $I_L24170_54 >= ( ls_global_trunc + mod( ms_min, 2 ) + -ms_min ) ) exit
24170.                enddo
24170.             endif
24173.             ia_sph_mm(ms_min) = 1
24177.             if ( ms_max + -ms_min > 0 ) then
24177.                $ia_sph_mm_WR0_R1 = 1
24177.                $I_L24177_56 = 0
24177. !dir$ unroll 4
24177.                do
24178.                   $ia_sph_mm_WR0_R1 = ( ls_global_trunc + $ia_sph_mm_WR0_R1 + -ms_min + -2 * $I_L24177_56 + 3 )
24178.                   ia_sph_mm(ms_min + $I_L24177_56 + 1) = $ia_sph_mm_WR0_R1
24180.                   $I_L24177_56 = 1 + $I_L24177_56
24177.                   if ( $I_L24177_56 >= ( ms_max + -ms_min ) ) exit
24177.                enddo
24177.             endif
24183.             if ( ms_max + -ms_min >= 0 ) then
24183.                $I_L24183_58 = 0
24183. !dir$ ivdep
24183.                do
24184.                   ls_local_trunc(ms_min + $I_L24183_58) = ( ls_global_trunc + mod( ms_min, 2 ) + -$I_L24183_58 )
24186.                   $I_L24183_58 = 1 + $I_L24183_58
24183.                   if ( $I_L24183_58 >= ms_max + -ms_min + 1 ) exit
24183.                enddo
24183.             endif
24183.             goto 30
24183.          else if ( i_truncation == 3 ) then
24192.             ls_max_order = ls_global_trunc
24193.             ms_trunc(0) = 0
24194.             ia_sph_mm(0) = 1
24195.             if ( ls_global_trunc > 0 ) then
24195.                $I_L24195_60 = 0
24195. !dir$ ivdep
24195.                do
24196.                   ms_trunc(1 + $I_L24195_60) = 0
24197.                   $I_L24195_60 = 1 + $I_L24195_60
24195.                   if ( $I_L24195_60 >= ls_global_trunc ) exit
24195.                enddo
24195.             endif
24199.             ls_local_trunc(0) = ls_global_trunc
24199.    30       continue
24212.             n_order_phase = 1
24213.             if ( ms_max + -ms_min >= 0 ) then
24213.                $I_L24213_62 = 0
24213. !dir$ ivdep
24213.                do
24214.                   n_order_phase = max( n_order_phase, ls_local_trunc(ms_min + $I_L24213_62) )
24215.                   $I_L24213_62 = 1 + $I_L24213_62
24213.                   if ( $I_L24213_62 >= ms_max + -ms_min + 1 ) exit
24213.                enddo
24213.             endif
24213.          else
24203.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1026,  _substr(t$1025,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '***Error: An illegal truncation has been requested.', 0x800600000000L ) ) )
24205.             ierr = 1
24205.          endif
24205.       endif
24220.       return
24220.       end
24220.       
24294.       
24294.       subroutine shell_sort( n, pointer, key )
24238.       t$1028 = n
24254.       t$3342 = _zla( 0, n )
24272.       if ( n == 1 ) then
24273.          pointer(1) = 1
24273.       else
24277.          $gap_S0 = n
24278.          if ( n >= 2 ) then
24278.             do
24279.                $gap_S0 = $gap_S0 / 2
24280.                if ( n + -$gap_S0 > 0 ) then
24280.                   $I_L24280_14 = 0
24280.                   do
24281.                      if ( ( $I_L24280_14 /= 0 .and. xor( -$gap_S0, -$I_L24280_14 ) < 0 ) == 0 ) then
24281.                         $t_S4 = ( $gap_S0 + $I_L24280_14 ) / $gap_S0
24281.                         $I_L24281_12 = 0
24281. !dir$ unroll 4
24281.                         do
24282.                            if ( key(pointer($I_L24280_14 + -( $gap_S0 * $I_L24281_12 ) + 1)) > key(pointer($gap_S0 + $I_L24280_14 + -( $gap_S0 * $I_L24281_12 ) + 1)) ) then
24283.                               $pointer_temp_S3 = pointer($I_L24280_14 + -( $gap_S0 * $I_L24281_12 ) + 1)
24284.                               pointer($I_L24280_14 + -( $gap_S0 * $I_L24281_12 ) + 1) = pointer($gap_S0 + $I_L24280_14 + -( $gap_S0 * $I_L24281_12 ) + 1)
24285.                               pointer($gap_S0 + $I_L24280_14 + -( $gap_S0 * $I_L24281_12 ) + 1) = $pointer_temp_S3
24285.                            endif
24287.                            $I_L24281_12 = 1 + $I_L24281_12
24286.                            if ( $I_L24281_12 >= $t_S4 ) exit
24286.                         enddo
24286.                      endif
24288.                      $I_L24280_14 = 1 + $I_L24280_14
24287.                      if ( $I_L24280_14 >= ( n + -$gap_S0 ) ) exit
24287.                   enddo
24287.                endif
24288.                if ( $gap_S0 < 2 ) exit
24288.             enddo
24288.          endif
24288.       endif
24294.       return
24294.       end
24294.       
24631.       
24631.       subroutine single_scat_sol( n_profile, n_layer, n_direction, direction, n_viewing_level, i_rad_layer, frac_rad_layer, i_direct, mu_0, tau, omega, phase_fnc_solar, radiance, nd_profile, nd_radiance_profile, nd_layer, nd_direction, nd_viewing_level )
24323.       t$1032 = nd_radiance_profile
24323.       t$1033 = nd_direction
24375.       t$3343 = _zla( 0, nd_radiance_profile )
24323.       t$3344 = _zla( 0, nd_radiance_profile )
24375.       t$3345 = _zla( 0, nd_direction )
24323.       t$3346 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
24323.       t$3347 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
24323.       t$1031 = nd_viewing_level
24372.       t$3348 = _zla( 0, nd_viewing_level )
24323.       t$1034 = nd_profile
24323.       t$1035 = nd_layer
24382.       t$3349 = _zla( 0, nd_profile )
24323.       t$3350 = _zla( 0, nd_profile )
24323.       t$3351 = 1 + nd_layer
24382.       t$3352 = _zla( 0, 1 + nd_layer )
24323.       t$3353 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
24389.       t$3354 = _zla( 0, nd_layer )
24323.       t$3355 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
24323.       t$3356 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_layer )
24323.       t$3357 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_layer )
24323.       t$3358 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
24323.       t$3359 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
24430.       t$3362 = 8 * _zla( 0, nd_profile )
24426.       t$3364 = 12 * _zla( 0, nd_profile )
24420.       t$3366 = 16 * _zla( 0, nd_profile )
24435.       t$3367 = 16 * _zla( 0, nd_profile )
24435.       t$3369 = 24 * _zla( 0, nd_profile )
24432.       t$3370 = 24 * _zla( 0, nd_profile )
24432.       t$3372 = 32 * _zla( 0, nd_profile )
24438.       t$3373 = 32 * _zla( 0, nd_profile )
24438.       t$3375 = 40 * _zla( 0, nd_profile )
24440.       t$3376 = 40 * _zla( 0, nd_profile )
24440.       t$3378 = 48 * _zla( 0, nd_profile )
24323.       t$3360 = int( _alloc( 48 * _zla( 0, nd_profile ) ), 8 )
24430.       t$3361 = t$3360
24426.       t$3363 = t$3360 + 8 * _zla( 0, nd_profile )
24420.       t$3365 = t$3360 + 12 * _zla( 0, nd_profile )
24435.       t$3368 = t$3360 + 16 * _zla( 0, nd_profile )
24432.       t$3371 = t$3360 + 24 * _zla( 0, nd_profile )
24438.       t$3374 = t$3360 + 32 * _zla( 0, nd_profile )
24440.       t$3377 = t$3360 + 40 * _zla( 0, nd_profile )
24468.       if ( n_direction > 0 ) then
24468.          $I_L24468_114 = 0
24468.          do
24472.             $n_list_up_S2 = 0
24473.             if ( n_profile > 0 ) then
24473.                $I_L24473_68 = 0
24473. !dir$ ivdep
24473. !dir$ loop_info (automatic) cache_nt( list_up )
24473.                do
24474.                   if ( direction(1 + $I_L24473_68, 1 + $I_L24468_114, 1) > 0.0 ) then
24475.                      $n_list_up_S2 = 1 + $n_list_up_S2
24476.                      list_up($n_list_up_S2) = ( 1 + $I_L24473_68 )
24476.                   endif
24478.                   $I_L24473_68 = 1 + $I_L24473_68
24477.                   if ( $I_L24473_68 >= n_profile ) exit
24477.                enddo
24477.             endif
24481.             $n_list_down_S4 = 0
24482.             if ( n_profile > 0 ) then
24482.                $I_L24482_70 = 0
24482. !dir$ ivdep
24482. !dir$ loop_info (automatic) cache_nt( list_down )
24482.                do
24483.                   if ( direction(1 + $I_L24482_70, 1 + $I_L24468_114, 1) < 0.0 ) then
24484.                      $n_list_down_S4 = 1 + $n_list_down_S4
24485.                      list_down($n_list_down_S4) = ( 1 + $I_L24482_70 )
24485.                   endif
24487.                   $I_L24482_70 = 1 + $I_L24482_70
24486.                   if ( $I_L24482_70 >= n_profile ) exit
24486.                enddo
24486.             endif
24491.             if ( n_layer > 0 ) then
24494.                if ( n_viewing_level > 0 ) then
24491.                   $I_L24491_112 = 0
24491.                   do
24494.                      $I_L24494_110 = 0
24494.                      do
24499.                         if ( ( 1 + $I_L24491_112 ) >= i_rad_layer(1 + $I_L24494_110) ) then
24506.                            if ( ( 1 + $I_L24491_112 ) > i_rad_layer(1 + $I_L24494_110) ) then
24508.                               if ( $n_list_up_S2 > 0 ) then
24508.                                  $SCA_i_rad_layer_I4 = i_rad_layer(1 + $I_L24494_110)
24508.                                  $SCA_frac_rad_layer_I5 = frac_rad_layer(1 + $I_L24494_110)
24508.                                  $I_L24508_102 = 0
24508. !dir$ ivdep
24508.                                  do
24509.                                     $l_S8 = list_up(1 + $I_L24508_102)
24510.                                     m_slant_depth_near($l_S8) = ( 1.0 + -$SCA_frac_rad_layer_I5 ) * tau($l_S8, $SCA_i_rad_layer_I4)
24513.                                     $I_L24508_102 = 1 + $I_L24508_102
24508.                                     if ( $I_L24508_102 >= $n_list_up_S2 ) exit
24508.                                  enddo
24508.                               endif
24514.                               $t_S9 = 1 + i_rad_layer(1 + $I_L24494_110)
24514.                               if ( ( $I_L24491_112 + -$t_S9 + 1 ) > 0 ) then
24515.                                  if ( $n_list_up_S2 > 0 ) then
24514.                                     $I_L24514_92 = 0
24514.                                     do
24515.                                        $I_L24515_76 = 0
24515. !dir$ ivdep
24515.                                        do
24516.                                           $l_S11 = list_up(1 + $I_L24515_76)
24517.                                           m_slant_depth_near($l_S11) = _vu_plus( m_slant_depth_near($l_S11), tau($l_S11, $t_S9 + $I_L24514_92) )
24519.                                           $I_L24515_76 = 1 + $I_L24515_76
24515.                                           if ( $I_L24515_76 >= $n_list_up_S2 ) exit
24515.                                        enddo
24520.                                        $I_L24514_92 = 1 + $I_L24514_92
24519.                                        if ( $I_L24514_92 >= $I_L24491_112 + -$t_S9 + 1 ) exit
24519.                                     enddo
24519.                                  endif
24519.                               endif
24521.                               if ( $n_list_up_S2 > 0 ) then
24521.                                  $I_L24521_78 = 0
24521. !dir$ unroll 2
24521.                                  do
24522.                                     $l_S14 = list_up(1 + $I_L24521_78)
24523.                                     $SCF_P3 = 1.0/direction($l_S14, 1 + $I_L24468_114, 1)
24523.                                     m_slant_depth_near($l_S14) = -( m_slant_depth_near($l_S14) * $SCF_P3 )
24525.                                     m_slant_depth_far($l_S14) = m_slant_depth_near($l_S14) + -( tau($l_S14, 1 + $I_L24491_112) * 1.0/direction($l_S14, 1 + $I_L24468_114, 1) )
24529.                                     tau_i($l_S14) = tau($l_S14, 1 + $I_L24491_112)
24530.                                     trans_d($l_S14) = 1.0
24531.                                     $I_L24521_78 = 1 + $I_L24521_78
24521.                                     if ( $I_L24521_78 >= $n_list_up_S2 ) exit
24521.                                  enddo
24521.                               endif
24532.                            else if ( i_rad_layer(1 + $I_L24494_110) + -$I_L24491_112 + -1 == 0 ) then
24534.                               if ( $n_list_up_S2 > 0 ) then
24534.                                  $SCA_frac_rad_layer_I2 = frac_rad_layer(1 + $I_L24494_110)
24534.                                  $I_L24534_104 = 0
24534. !dir$ ivdep
24534.                                  do
24535.                                     $l_S16 = list_up(1 + $I_L24534_104)
24536.                                     m_slant_depth_near($l_S16) = 0.0
24537.                                     m_slant_depth_far($l_S16) = -( ( 1.0 + -$SCA_frac_rad_layer_I2 ) * tau($l_S16, 1 + $I_L24491_112) * 1.0/direction($l_S16, 1 + $I_L24468_114, 1) )
24540.                                     tau_i($l_S16) = ( 1.0 + -$SCA_frac_rad_layer_I2 ) * tau($l_S16, 1 + $I_L24491_112)
24541.                                     trans_d($l_S16) = _expn( -( $SCA_frac_rad_layer_I2 * tau($l_S16, 1 + $I_L24491_112) * 1.0/mu_0($l_S16) ) )
24543.                                     $I_L24534_104 = 1 + $I_L24534_104
24534.                                     if ( $I_L24534_104 >= $n_list_up_S2 ) exit
24534.                                  enddo
24534.                               endif
24534.                            endif
24548.                            if ( $n_list_up_S2 > 0 ) then
24548.                               $I_L24548_80 = 0
24548. !dir$ ivdep
24548.                               do
24549.                                  $l_S18 = list_up(1 + $I_L24548_80)
24550.                                  $SVU_P0 = ( mu_0($l_S18) * 1.0/( mu_0($l_S18) + direction($l_S18, 1 + $I_L24468_114, 1) ) ) * ( _expn( m_slant_depth_near($l_S18) ) + -_expn( m_slant_depth_far($l_S18) + -( tau_i($l_S18) * 1.0/mu_0($l_S18) ) ) )
24553.                                  radiance($l_S18, 1 + $I_L24494_110, 1 + $I_L24468_114) = _vu_plus( radiance($l_S18, 1 + $I_L24494_110, 1 + $I_L24468_114), i_direct($l_S18, $I_L24491_112) * trans_d($l_S18) * $SVU_P0 * ( 7.9577471545947673e-2 * omega($l_S18, 1 + $I_L24491_112) ) * phase_fnc_solar($l_S18, 1 + $I_L24491_112, 1 + $I_L24468_114) )
24556.                                  $I_L24548_80 = 1 + $I_L24548_80
24548.                                  if ( $I_L24548_80 >= $n_list_up_S2 ) exit
24548.                               enddo
24548.                            endif
24548.                         endif
24564.                         if ( ( 1 + $I_L24491_112 ) <= i_rad_layer(1 + $I_L24494_110) ) then
24571.                            if ( ( 1 + $I_L24491_112 ) < i_rad_layer(1 + $I_L24494_110) ) then
24572.                               if ( $n_list_down_S4 > 0 ) then
24572.                                  $SCA_frac_rad_layer_I1 = frac_rad_layer(1 + $I_L24494_110)
24572.                                  $SCA_i_rad_layer_I3 = i_rad_layer(1 + $I_L24494_110)
24572.                                  $I_L24572_106 = 0
24572. !dir$ ivdep
24572.                                  do
24573.                                     $l_S20 = list_down(1 + $I_L24572_106)
24574.                                     m_slant_depth_near($l_S20) = $SCA_frac_rad_layer_I1 * tau($l_S20, $SCA_i_rad_layer_I3)
24576.                                     $I_L24572_106 = 1 + $I_L24572_106
24572.                                     if ( $I_L24572_106 >= $n_list_down_S4 ) exit
24572.                                  enddo
24572.                               endif
24577.                               $t_S21 = -1 + i_rad_layer(1 + $I_L24494_110)
24577.                               if ( ( $I_L24491_112 + -$t_S21 + 1 ) < 0 ) then
24578.                                  if ( $n_list_down_S4 > 0 ) then
24577.                                     $I_L24577_94 = 0
24577.                                     do
24578.                                        $I_L24578_86 = 0
24578. !dir$ ivdep
24578.                                        do
24579.                                           $l_S23 = list_down(1 + $I_L24578_86)
24580.                                           m_slant_depth_near($l_S23) = _vu_plus( m_slant_depth_near($l_S23), tau($l_S23, $t_S21 + -$I_L24577_94) )
24582.                                           $I_L24578_86 = 1 + $I_L24578_86
24578.                                           if ( $I_L24578_86 >= $n_list_down_S4 ) exit
24578.                                        enddo
24583.                                        $I_L24577_94 = 1 + $I_L24577_94
24582.                                        if ( $I_L24577_94 >= $t_S21 + -$I_L24491_112 + -1 ) exit
24582.                                     enddo
24582.                                  endif
24582.                               endif
24584.                               if ( $n_list_down_S4 > 0 ) then
24584.                                  $I_L24584_88 = 0
24584. !dir$ unroll 2
24584.                                  do
24585.                                     $l_S26 = list_down(1 + $I_L24584_88)
24586.                                     $SCF_P4 = 1.0/direction($l_S26, 1 + $I_L24468_114, 1)
24586.                                     m_slant_depth_near($l_S26) = ( m_slant_depth_near($l_S26) * $SCF_P4 )
24588.                                     m_slant_depth_far($l_S26) = m_slant_depth_near($l_S26) + ( tau($l_S26, 1 + $I_L24491_112) * 1.0/direction($l_S26, 1 + $I_L24468_114, 1) )
24590.                                     tau_i($l_S26) = tau($l_S26, 1 + $I_L24491_112)
24591.                                     $I_L24584_88 = 1 + $I_L24584_88
24584.                                     if ( $I_L24584_88 >= $n_list_down_S4 ) exit
24584.                                  enddo
24584.                               endif
24592.                            else if ( $n_list_down_S4 > 0 ) then
24594.                               $SCA_frac_rad_layer_I0 = frac_rad_layer(1 + $I_L24494_110)
24594.                               $I_L24594_108 = 0
24594. !dir$ ivdep
24594.                               do
24595.                                  $l_S28 = list_down(1 + $I_L24594_108)
24596.                                  $SVU_P1 = $SCA_frac_rad_layer_I0 * tau($l_S28, 1 + $I_L24491_112)
24596.                                  tau_i($l_S28) = $SVU_P1
24597.                                  m_slant_depth_near($l_S28) = 0.0
24598.                                  m_slant_depth_far($l_S28) = ( $SVU_P1 * 1.0/direction($l_S28, 1 + $I_L24468_114, 1) )
24599.                                  $I_L24594_108 = 1 + $I_L24594_108
24594.                                  if ( $I_L24594_108 >= $n_list_down_S4 ) exit
24594.                               enddo
24594.                            endif
24604.                            if ( $n_list_down_S4 > 0 ) then
24604.                               $I_L24604_90 = 0
24604. !dir$ ivdep
24604.                               do
24605.                                  $l_S30 = list_down(1 + $I_L24604_90)
24608.                                  $d_mu_S31 = mu_0($l_S30) + direction($l_S30, 1 + $I_L24468_114, 1)
24610.                                  $eta_nm_S32 = ( 1.0 + -( ( 2.2204460492503131e-16 * 1.0/( $d_mu_S31 + sign( 1.4901161193847656e-8, $d_mu_S31 ) ) ) * tau_i($l_S30) * 1.0/( mu_0($l_S30) * direction($l_S30, 1 + $I_L24468_114, 1) ) ) )
24612.                                  $SVU_P2 = ( mu_0($l_S30) * 1.0/( $d_mu_S31 + ( 2.2204460492503131e-16 * 1.0/( $d_mu_S31 + sign( 1.4901161193847656e-8, $d_mu_S31 ) ) ) ) ) * ( _expn( m_slant_depth_near($l_S30) + -( tau_i($l_S30) * 1.0/mu_0($l_S30) ) ) * $eta_nm_S32 + -_expn( m_slant_depth_far($l_S30) ) )
24616.                                  radiance($l_S30, 1 + $I_L24494_110, 1 + $I_L24468_114) = _vu_plus( radiance($l_S30, 1 + $I_L24494_110, 1 + $I_L24468_114), i_direct($l_S30, $I_L24491_112) * $SVU_P2 * ( 7.9577471545947673e-2 * omega($l_S30, 1 + $I_L24491_112) ) * phase_fnc_solar($l_S30, 1 + $I_L24491_112, 1 + $I_L24468_114) )
24620.                                  $I_L24604_90 = 1 + $I_L24604_90
24604.                                  if ( $I_L24604_90 >= $n_list_down_S4 ) exit
24604.                               enddo
24604.                            endif
24604.                         endif
24624.                         $I_L24494_110 = 1 + $I_L24494_110
24622.                         if ( $I_L24494_110 >= n_viewing_level ) exit
24622.                      enddo
24625.                      $I_L24491_112 = 1 + $I_L24491_112
24624.                      if ( $I_L24491_112 >= n_layer ) exit
24624.                   enddo
24624.                endif
24624.             endif
24626.             $I_L24468_114 = 1 + $I_L24468_114
24625.             if ( $I_L24468_114 >= n_direction ) exit
24625.          enddo
24625.       endif
24323.       _free( t$3360 )
24631.       return
24631.       end
24631.       
24763.       
24763.       subroutine single_scattering_all( i_scatter_method_band, n_profile, n_layer, d_mass, l_cloud, n_cloud_top, n_cloud_type, ss_prop, k_gas_abs, nd_profile, nd_layer, nd_layer_clr, id_ct )
24649.       t$1038 = nd_profile
24649.       t$1039 = nd_layer
24694.       t$3379 = _zla( 0, nd_profile )
24649.       t$3380 = _zla( 0, nd_profile )
24694.       t$3381 = _zla( 0, nd_layer )
24649.       t$3382 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 2600.       if ( t$30 == 0 ) then
 2600.          t$3388(1) = 4
 2600.          t$3389(1) = 0
 2600.          t$3390(1) = 16
 2600.          t$3385(1) = int( loc( t$29 ), 8 )
 2600.          t$3386(1) = 0
 2600.          t$3387(1) = int( loc( t$3383 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$3385(1), t$3388(1), 1, t$3386(1), t$3387(1), t$3389(1), t$3390(1) )
 2600.       endif
24734.       if ( l_cloud == 0 ) then
24752.          t$9103 = 0
24752.          t$9104 = 0
24752.          t$9108 = 0
24752.          if ( ss_prop%k_grey_tot%header%a_contig == 1 .or. -ss_prop%k_grey_tot%header%el_len + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%header%dv_smunit == 0 .and. -ss_prop%k_grey_tot%dim_2%SM + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%dim_1%EX == 0 ) then
24752. !dir$ suppress (ss_prop%k_grey_tot%base_addr)(ss_prop%k_grey_tot%dim_1%LB, ss_prop%k_grey_tot%dim_2%LB, 0, 0)
24752.             t$9102 = loc( (ss_prop%k_grey_tot%base_addr)(ss_prop%k_grey_tot%dim_1%LB, ss_prop%k_grey_tot%dim_2%LB, 0, 0) )
24752.          else
24752.             t$9103 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) )
24752.             t$9104 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_2%EX + 1 ) ) )
24752.             t$9108 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24749.             call _f90_copy_from_dv( t$9107, ss_prop%k_grey_tot )
24752. !dir$ suppress t$9107
24752.             t$9102 = loc( t$9107 )
24752.          endif
24753.          t$9110 = 0
24753.          t$9111 = 0
24753.          t$9115 = 0
24753.          if ( ss_prop%k_ext_scat%header%a_contig == 1 .or. -ss_prop%k_ext_scat%header%el_len + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%header%dv_smunit == 0 .and. -ss_prop%k_ext_scat%dim_2%SM + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%dim_1%EX == 0 ) then
24753. !dir$ suppress (ss_prop%k_ext_scat%base_addr)(ss_prop%k_ext_scat%dim_1%LB, ss_prop%k_ext_scat%dim_2%LB, 0, 0)
24753.             t$9109 = loc( (ss_prop%k_ext_scat%base_addr)(ss_prop%k_ext_scat%dim_1%LB, ss_prop%k_ext_scat%dim_2%LB, 0, 0) )
24753.          else
24753.             t$9110 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) )
24753.             t$9111 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_2%EX + 1 ) ) )
24753.             t$9115 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24749.             call _f90_copy_from_dv( t$9114, ss_prop%k_ext_scat )
24753. !dir$ suppress t$9114
24753.             t$9109 = loc( t$9114 )
24753.          endif
24755.          t$9117 = 0
24755.          t$9118 = 0
24755.          t$9122 = 0
24755.          if ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) then
24755. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 0, 0)
24755.             t$9116 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, 0, 0) )
24755.          else
24755.             t$9117 = ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) )
24755.             t$9118 = ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) )
24755.             t$9122 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24755. !dir$ suppress t$9121
24755.             t$9116 = loc( t$9121 )
24755.          endif
24755.          t$9124 = 0
24755.          t$9125 = 0
24755.          t$9129 = 0
24755.          if ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) then
24755. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 0, 0)
24755.             t$9123 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, 0, 0) )
24755.          else
24755.             t$9124 = ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) )
24755.             t$9125 = ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) )
24755.             t$9129 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24755. !dir$ suppress t$9128
24755.             t$9123 = loc( t$9128 )
24755.          endif
24749.          ipa$18697 = 1
24749.          call single_scattering( i_scatter_method_band, n_profile, ipa$18697, n_layer, d_mass(1, 1), t$9102, t$9109, k_gas_abs(1, 1), t$9116, t$9123, nd_profile, nd_layer, id_ct, nd_layer )
24755.          if ( ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) == 0 ) then
24749.             call _f90_copy_to_dv( ss_prop%omega, t$9128 )
24755.             _free( t$9129 )
24755.          endif
24755.          if ( ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) == 0 ) then
24749.             call _f90_copy_to_dv( ss_prop%tau, t$9121 )
24755.             _free( t$9122 )
24755.          endif
24753.          if ( ( ss_prop%k_ext_scat%header%a_contig == 1 .or. -ss_prop%k_ext_scat%header%el_len + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%header%dv_smunit == 0 .and. -ss_prop%k_ext_scat%dim_2%SM + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%dim_1%EX == 0 ) == 0 ) then
24753.             _free( t$9115 )
24753.          endif
24752.          if ( ( ss_prop%k_grey_tot%header%a_contig == 1 .or. -ss_prop%k_grey_tot%header%el_len + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%header%dv_smunit == 0 .and. -ss_prop%k_grey_tot%dim_2%SM + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%dim_1%EX == 0 ) == 0 ) then
24752.             _free( t$9108 )
24752.          endif
24736.       else if ( n_cloud_type >= 0 ) then
24736.          $I_L24736_4 = 0
24736.          do
24740.             t$9072 = 0
24740.             t$9073 = 0
24740.             t$9077 = 0
24740.             if ( ss_prop%k_grey_tot%header%a_contig == 1 .or. -ss_prop%k_grey_tot%header%el_len + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%header%dv_smunit == 0 .and. -ss_prop%k_grey_tot%dim_2%SM + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%dim_1%EX == 0 ) then
24740. !dir$ suppress (ss_prop%k_grey_tot%base_addr)(ss_prop%k_grey_tot%dim_1%LB, ss_prop%k_grey_tot%dim_2%LB, t$9070, 0)
24740.                t$9071 = loc( (ss_prop%k_grey_tot%base_addr)(ss_prop%k_grey_tot%dim_1%LB, ss_prop%k_grey_tot%dim_2%LB, $I_L24736_4, 0) )
24740.             else
24740.                t$9072 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) )
24740.                t$9073 = ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_2%EX + 1 ) ) )
24740.                t$9077 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%k_grey_tot%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24737.                call _f90_copy_from_dv( t$9076, ss_prop%k_grey_tot )
24740. !dir$ suppress t$9076
24740.                t$9071 = loc( t$9076 )
24740.             endif
24741.             t$9080 = 0
24741.             t$9081 = 0
24741.             t$9085 = 0
24741.             if ( ss_prop%k_ext_scat%header%a_contig == 1 .or. -ss_prop%k_ext_scat%header%el_len + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%header%dv_smunit == 0 .and. -ss_prop%k_ext_scat%dim_2%SM + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%dim_1%EX == 0 ) then
24741. !dir$ suppress (ss_prop%k_ext_scat%base_addr)(ss_prop%k_ext_scat%dim_1%LB, ss_prop%k_ext_scat%dim_2%LB, t$9078, 0)
24741.                t$9079 = loc( (ss_prop%k_ext_scat%base_addr)(ss_prop%k_ext_scat%dim_1%LB, ss_prop%k_ext_scat%dim_2%LB, $I_L24736_4, 0) )
24741.             else
24741.                t$9080 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) )
24741.                t$9081 = ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_2%EX + 1 ) ) )
24741.                t$9085 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%k_ext_scat%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24737.                call _f90_copy_from_dv( t$9084, ss_prop%k_ext_scat )
24741. !dir$ suppress t$9084
24741.                t$9079 = loc( t$9084 )
24741.             endif
24743.             t$9088 = 0
24743.             t$9089 = 0
24743.             t$9093 = 0
24743.             if ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) then
24743. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, t$9086, 0)
24743.                t$9087 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, $I_L24736_4, 0) )
24743.             else
24743.                t$9088 = ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) )
24743.                t$9089 = ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) )
24743.                t$9093 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%tau%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24743. !dir$ suppress t$9092
24743.                t$9087 = loc( t$9092 )
24743.             endif
24743.             t$9096 = 0
24743.             t$9097 = 0
24743.             t$9101 = 0
24743.             if ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) then
24743. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, t$9094, 0)
24743.                t$9095 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, $I_L24736_4, 0) )
24743.             else
24743.                t$9096 = ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) )
24743.                t$9097 = ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) )
24743.                t$9101 = int( _alloc( max( 0, max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_2%EX + 1 ) ) ) ) * max( 0, ( max( 0, ( -1 + ss_prop%omega%dim_1%EX + 1 ) ) ) ) * 8 ) ), 8 )
24743. !dir$ suppress t$9100
24743.                t$9095 = loc( t$9100 )
24743.             endif
24737.             ipa$18688 = 1
24737.             call single_scattering( i_scatter_method_band, n_profile, ipa$18688, n_layer, d_mass(1, 1), t$9071, t$9079, k_gas_abs(1, 1), t$9087, t$9095, nd_profile, nd_layer, id_ct, nd_layer )
24743.             if ( ( ss_prop%omega%header%a_contig == 1 .or. -ss_prop%omega%header%el_len + ss_prop%omega%dim_1%SM * ss_prop%omega%header%dv_smunit == 0 .and. -ss_prop%omega%dim_2%SM + ss_prop%omega%dim_1%SM * ss_prop%omega%dim_1%EX == 0 ) == 0 ) then
24737.                call _f90_copy_to_dv( ss_prop%omega, t$9100 )
24743.                _free( t$9101 )
24743.             endif
24743.             if ( ( ss_prop%tau%header%a_contig == 1 .or. -ss_prop%tau%header%el_len + ss_prop%tau%dim_1%SM * ss_prop%tau%header%dv_smunit == 0 .and. -ss_prop%tau%dim_2%SM + ss_prop%tau%dim_1%SM * ss_prop%tau%dim_1%EX == 0 ) == 0 ) then
24737.                call _f90_copy_to_dv( ss_prop%tau, t$9092 )
24743.                _free( t$9093 )
24743.             endif
24741.             if ( ( ss_prop%k_ext_scat%header%a_contig == 1 .or. -ss_prop%k_ext_scat%header%el_len + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%header%dv_smunit == 0 .and. -ss_prop%k_ext_scat%dim_2%SM + ss_prop%k_ext_scat%dim_1%SM * ss_prop%k_ext_scat%dim_1%EX == 0 ) == 0 ) then
24741.                _free( t$9085 )
24741.             endif
24740.             if ( ( ss_prop%k_grey_tot%header%a_contig == 1 .or. -ss_prop%k_grey_tot%header%el_len + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%header%dv_smunit == 0 .and. -ss_prop%k_grey_tot%dim_2%SM + ss_prop%k_grey_tot%dim_1%SM * ss_prop%k_grey_tot%dim_1%EX == 0 ) == 0 ) then
24740.                _free( t$9077 )
24740.             endif
24746.             $I_L24736_4 = 1 + $I_L24736_4
24740.             if ( $I_L24736_4 >= 1 + n_cloud_type ) exit
24740.          enddo
24740.       endif
24763.       return
24763.       end
24763.       
24935.       
24935.       subroutine single_scattering( i_scatter_method_band, n_profile, i_first_layer, i_last_layer, d_mass, k_grey_tot, k_ext_scat, k_gas_abs, tau, omega, nd_profile, nd_layer, id_lt, id_lb )
24783.       t$1042 = nd_profile
24783.       t$1043 = nd_layer
24829.       t$3392 = _zla( 0, nd_profile )
24783.       t$3393 = _zla( 0, nd_profile )
24829.       t$3394 = _zla( 0, nd_layer )
24783.       t$3395 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
24783.       t$1044 = id_lt
24783.       t$1045 = id_lb
24783.       t$3396 = id_lb + -id_lt + 1
24834.       t$3397 = _zla( 0, id_lb + -id_lt + 1 )
24783.       t$3398 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 )
24858.       t$3401 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8
24783.       t$3399 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 ), 8 )
24858.       t$3400 = t$3399
24876.       if ( i_scatter_method_band == 1 ) then
24879.          if ( id_lb + -id_lt >= 0 ) then
24880.             if ( nd_profile > 0 ) then
24879.                $I_L24879_60 = 0
24879.                do
24880.                   $I_L24880_52 = 0
24880. !dir$ ivdep
24880.                   do
24881.                      k_total(1 + $I_L24880_52, id_lt + $I_L24879_60) = k_grey_tot(1 + $I_L24880_52, id_lt + $I_L24879_60) + k_gas_abs(1 + $I_L24880_52, id_lt + $I_L24879_60)
24882.                      $I_L24880_52 = 1 + $I_L24880_52
24880.                      if ( $I_L24880_52 >= nd_profile ) exit
24880.                   enddo
24886.                   $I_L24886_54 = 0
24886. !dir$ ivdep
24886.                   do
24887.                      tau(1 + $I_L24886_54, id_lt + $I_L24879_60) = k_total(1 + $I_L24886_54, id_lt + $I_L24879_60) * d_mass(1 + $I_L24886_54, id_lt + $I_L24879_60)
24888.                      if ( k_total(1 + $I_L24886_54, id_lt + $I_L24879_60) > 0.0 ) then
24889.                         omega(1 + $I_L24886_54, id_lt + $I_L24879_60) = ( k_ext_scat(1 + $I_L24886_54, id_lt + $I_L24879_60) * 1.0/k_total(1 + $I_L24886_54, id_lt + $I_L24879_60) )
24889.                      else
24891.                         omega(1 + $I_L24886_54, id_lt + $I_L24879_60) = 0.0
24891.                      endif
24893.                      omega(1 + $I_L24886_54, id_lt + $I_L24879_60) = min( 9.9999999999999289e-1, omega(1 + $I_L24886_54, id_lt + $I_L24879_60) )
24895.                      $I_L24886_54 = 1 + $I_L24886_54
24892.                      if ( $I_L24886_54 >= nd_profile ) exit
24892.                   enddo
24883.                   $I_L24879_60 = 1 + $I_L24879_60
24882.                   if ( $I_L24879_60 >= id_lb + -id_lt + 1 ) exit
24882.                enddo
24882.             endif
24882.          endif
24898.       else if ( i_scatter_method_band == 2 ) then
24907.          if ( id_lb + -id_lt >= 0 ) then
24908.             if ( nd_profile > 0 ) then
24907.                $I_L24907_58 = 0
24907.                do
24908.                   $I_L24908_50 = 0
24908. !dir$ ivdep
24908.                   do
24909.                      tau(1 + $I_L24908_50, id_lt + $I_L24907_58) = ( k_grey_tot(1 + $I_L24908_50, id_lt + $I_L24907_58) + k_gas_abs(1 + $I_L24908_50, id_lt + $I_L24907_58) + -k_ext_scat(1 + $I_L24908_50, id_lt + $I_L24907_58) ) * d_mass(1 + $I_L24908_50, id_lt + $I_L24907_58)
24911.                      omega(1 + $I_L24908_50, id_lt + $I_L24907_58) = 0.0
24912.                      $I_L24908_50 = 1 + $I_L24908_50
24908.                      if ( $I_L24908_50 >= nd_profile ) exit
24908.                   enddo
24913.                   $I_L24907_58 = 1 + $I_L24907_58
24912.                   if ( $I_L24907_58 >= id_lb + -id_lt + 1 ) exit
24912.                enddo
24912.             endif
24912.          endif
24912.       else if ( i_scatter_method_band == 3 ) then
24922.          if ( id_lb + -id_lt >= 0 ) then
24923.             if ( nd_profile > 0 ) then
24922.                $I_L24922_56 = 0
24922.                do
24923.                   $I_L24923_48 = 0
24923. !dir$ ivdep
24923.                   do
24924.                      tau(1 + $I_L24923_48, id_lt + $I_L24922_56) = ( k_grey_tot(1 + $I_L24923_48, id_lt + $I_L24922_56) + k_gas_abs(1 + $I_L24923_48, id_lt + $I_L24922_56) ) * d_mass(1 + $I_L24923_48, id_lt + $I_L24922_56)
24926.                      omega(1 + $I_L24923_48, id_lt + $I_L24922_56) = 0.0
24927.                      $I_L24923_48 = 1 + $I_L24923_48
24923.                      if ( $I_L24923_48 >= nd_profile ) exit
24923.                   enddo
24928.                   $I_L24922_56 = 1 + $I_L24922_56
24927.                   if ( $I_L24922_56 >= id_lb + -id_lt + 1 ) exit
24927.                enddo
24927.             endif
24927.          endif
24927.       endif
24783.       _free( t$3399 )
24935.       return
24935.       end
24935.       
25115.       
25115.       subroutine solar_coefficient_basic( ierr, n_profile, i_layer_first, i_layer_last, omega, asymmetry, sec_00, i_2stream, sum, diff, lambda, gamma_up, gamma_down, nd_profile, id_lt, id_lb )
24953.       t$1050 = nd_profile
24953.       t$1051 = id_lt
24953.       t$1052 = id_lb
25000.       t$3402 = _zla( 0, nd_profile )
24953.       t$3403 = _zla( 0, nd_profile )
24953.       t$3404 = id_lb + -id_lt + 1
25000.       t$3405 = _zla( 0, id_lb + -id_lt + 1 )
24953.       t$3406 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 )
25029.       t$3409 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8
24953.       t$3407 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 ) * 8 ), 8 )
25029.       t$3408 = t$3407
25053.       if ( id_lb + -id_lt >= 0 ) then
25054.          if ( nd_profile > 0 ) then
25053.             $I_L25053_40 = 0
25053.             do
25054.                $I_L25054_32 = 0
25054. !dir$ ivdep
25054.                do
25055.                   if ( abs( lambda(1 + $I_L25054_32, id_lt + $I_L25053_40) + -sec_00(1 + $I_L25054_32, id_lt + $I_L25053_40) ) < 7.1054273576010019e-15 ) then
25056.                      sum(1 + $I_L25054_32, id_lt + $I_L25053_40) = 1.0000000000000071 * sum(1 + $I_L25054_32, id_lt + $I_L25053_40)
25057.                      diff(1 + $I_L25054_32, id_lt + $I_L25053_40) = 1.0000000000000071 * diff(1 + $I_L25054_32, id_lt + $I_L25053_40)
25058.                      lambda(1 + $I_L25054_32, id_lt + $I_L25053_40) = 1.0000000000000071 * lambda(1 + $I_L25054_32, id_lt + $I_L25053_40)
25058.                   endif
25060.                   $I_L25054_32 = 1 + $I_L25054_32
25059.                   if ( $I_L25054_32 >= nd_profile ) exit
25059.                enddo
25061.                $I_L25053_40 = 1 + $I_L25053_40
25060.                if ( $I_L25053_40 >= id_lb + -id_lt + 1 ) exit
25060.             enddo
25060.          endif
25060.       endif
25063.       if ( i_2stream == 2 ) then
25061.          goto 10
25061.          goto 20
25063.       else if ( i_2stream == 12 ) then
25063.          goto 10
25063.          goto 20
25063.       else if ( i_2stream == 6 ) then
25063.          goto 10
25063.          goto 20
25063.       else if ( i_2stream == 14 ) then
25063.          goto 10
25063.          goto 20
25063.       else if ( i_2stream == 15 ) then
25063.          goto 10
25063.          goto 20
25063.       else if ( i_2stream == 16 ) then
25063.    10    continue
25071.          if ( id_lb + -id_lt >= 0 ) then
25072.             if ( nd_profile > 0 ) then
25071.                $I_L25071_44 = 0
25071.                do
25072.                   $I_L25072_36 = 0
25072. !dir$ ivdep
25072.                   do
25073.                      ksi_0(1 + $I_L25072_36, id_lt + $I_L25071_44) = ( 1.0/sec_00(1 + $I_L25072_36, id_lt + $I_L25071_44) * asymmetry(1 + $I_L25072_36, id_lt + $I_L25071_44) * 1.5 )
25074.                      $I_L25072_36 = 1 + $I_L25072_36
25072.                      if ( $I_L25072_36 >= nd_profile ) exit
25072.                   enddo
25075.                   $I_L25071_44 = 1 + $I_L25071_44
25074.                   if ( $I_L25071_44 >= id_lb + -id_lt + 1 ) exit
25074.                enddo
25074.             endif
25074.          endif
25074.          goto 20
25074.       else if ( i_2stream == 4 ) then
25080.          if ( id_lb + -id_lt >= 0 ) then
25081.             if ( nd_profile > 0 ) then
25080.                $I_L25080_42 = 0
25080.                do
25081.                   $I_L25081_34 = 0
25081. !dir$ ivdep
25081.                   do
25082.                      ksi_0(1 + $I_L25081_34, id_lt + $I_L25080_42) = ( 1.0/sec_00(1 + $I_L25081_34, id_lt + $I_L25080_42) * asymmetry(1 + $I_L25081_34, id_lt + $I_L25080_42) * 1.7320508075688772 )
25083.                      $I_L25081_34 = 1 + $I_L25081_34
25081.                      if ( $I_L25081_34 >= nd_profile ) exit
25081.                   enddo
25084.                   $I_L25080_42 = 1 + $I_L25080_42
25083.                   if ( $I_L25080_42 >= id_lb + -id_lt + 1 ) exit
25083.                enddo
25083.             endif
25083.          endif
25083.    20    continue
25101.          if ( id_lb + -id_lt >= 0 ) then
25102.             if ( nd_profile > 0 ) then
25101.                $I_L25101_46 = 0
25101.                do
25102.                   $I_L25102_38 = 0
25102. !dir$ ivdep
25102.                   do
25103.                      $factor_S8 = ( sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) * omega(1 + $I_L25102_38, id_lt + $I_L25101_46) * 1.0/( ( lambda(1 + $I_L25102_38, id_lt + $I_L25101_46) + -sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) ) * ( lambda(1 + $I_L25102_38, id_lt + $I_L25101_46) + sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) ) ) * 5.0e-1 )
25105.                      gamma_up(1 + $I_L25102_38, id_lt + $I_L25101_46) = $factor_S8 * ( sum(1 + $I_L25102_38, id_lt + $I_L25101_46) + -sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) + -( ksi_0(1 + $I_L25102_38, id_lt + $I_L25101_46) * ( diff(1 + $I_L25102_38, id_lt + $I_L25101_46) + -sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) ) ) )
25107.                      gamma_down(1 + $I_L25102_38, id_lt + $I_L25101_46) = $factor_S8 * ( sum(1 + $I_L25102_38, id_lt + $I_L25101_46) + sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) + ksi_0(1 + $I_L25102_38, id_lt + $I_L25101_46) * ( diff(1 + $I_L25102_38, id_lt + $I_L25101_46) + sec_00(1 + $I_L25102_38, id_lt + $I_L25101_46) ) )
25109.                      $I_L25102_38 = 1 + $I_L25102_38
25102.                      if ( $I_L25102_38 >= nd_profile ) exit
25102.                   enddo
25110.                   $I_L25101_46 = 1 + $I_L25101_46
25109.                   if ( $I_L25101_46 >= id_lb + -id_lt + 1 ) exit
25109.                enddo
25109.             endif
25109.          endif
24953.          _free( t$3407 )
24953.       else
25088.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1054,  _substr(t$1053,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal solar two-stream scheme has been selected.', 0x800600000000L ) ) )
25091.          ierr = 1
24953.          _free( t$3407 )
24953.       endif
25115.       return
25115.       end
25115.       
25253.       
25253.       subroutine solar_source( n_profile, n_layer, flux_inc_direct, trans_0, source_coeff, l_scale_solar, adjust_solar_ke, flux_direct, s_down, s_up, nd_profile, nd_layer, nd_source_coeff )
25133.       t$1057 = nd_profile
25173.       t$3410 = _zla( 0, nd_profile )
25133.       t$1058 = nd_layer
25133.       t$3411 = _zla( 0, nd_profile )
25175.       t$3412 = _zla( 0, nd_layer )
25133.       t$3413 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
25133.       t$1059 = nd_source_coeff
25133.       t$3414 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
25177.       t$3415 = _zla( 0, nd_source_coeff )
25133.       t$3416 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
25133.       t$3417 = 1 + nd_layer
25184.       t$3418 = _zla( 0, 1 + nd_layer )
25133.       t$3419 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
25201.       if ( n_profile > 0 ) then
25201.          $I_L25201_64 = 0
25201. !dir$ ivdep
25201.          do
25202.             flux_direct(1 + $I_L25201_64, 0) = flux_inc_direct(1 + $I_L25201_64)
25203.             $I_L25201_64 = 1 + $I_L25201_64
25201.             if ( $I_L25201_64 >= n_profile ) exit
25201.          enddo
25201.       endif
25208.       if ( l_scale_solar ) then
25211.          if ( nd_layer > 0 ) then
25212.             if ( nd_profile > 0 ) then
25212.                $I_L25212_78 = 0
25212.                do
25211.                   $I_L25211_72 = 0
25211.                   if ( nd_layer >= 2 ) then
25211.                      $I_L25211_80 = 0
25211. !dir$ blocking_size( 0, 0 )
25211.                      do
25212.                         $I_L25212_69 = 0
25212. !dir$ ivdep
25212. !dir$ blocking_size( 256, 256 )
25212.                         do
25213.                            $flux_direct_WR0_R0 = flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 * $I_L25211_80) * trans_0($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80) * adjust_solar_ke($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80)
25213.                            flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80) = $flux_direct_WR0_R0
25221.                            s_up($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80) = source_coeff($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80, 1) * flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 * $I_L25211_80)
25223.                            s_down($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80) = ( source_coeff($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80, 2) + -trans_0($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80) ) * flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 * $I_L25211_80) + $flux_direct_WR0_R0
25213.                            $flux_direct_WR0_R0 = $flux_direct_WR0_R0 * trans_0($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80) * adjust_solar_ke($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80)
25213.                            flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80) = $flux_direct_WR0_R0
25221.                            s_up($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80) = source_coeff($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80, 1) * flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80)
25223.                            s_down($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80) = ( source_coeff($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80, 2) + -trans_0($I_L25212_69 + 256 * $I_L25212_78 + 1, 2 + 2 * $I_L25211_80) ) * flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + 2 * $I_L25211_80) + $flux_direct_WR0_R0
25212.                            $I_L25212_69 = 1 + $I_L25212_69
25212.                            if ( $I_L25212_69 >= min( nd_profile, 256 + 256 * $I_L25212_78 ) + -256 * $I_L25212_78 ) exit
25212.                         enddo
25217.                         $I_L25211_80 = 1 + $I_L25211_80
25217.                         if ( $I_L25211_80 >= _rsh( nd_layer, 1 ) ) exit
25217.                      enddo
25217.                      $I_L25211_72 = and( 0xfffffffffffffffeUL, nd_layer )
25217.                   endif
25211.                   if ( $I_L25211_72 < nd_layer ) then
25212.                      $I_L25212_69 = 0
25212. !dir$ ivdep
25212. !dir$ blocking_size( 256, 256 )
25212.                      do
25213.                         $flux_direct_WR0_R0 = flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, $I_L25211_72) * trans_0($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72) * adjust_solar_ke($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72)
25213.                         flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72) = $flux_direct_WR0_R0
25221.                         s_up($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72) = source_coeff($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72, 1) * flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, $I_L25211_72)
25223.                         s_down($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72) = ( source_coeff($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72, 2) + -trans_0($I_L25212_69 + 256 * $I_L25212_78 + 1, 1 + $I_L25211_72) ) * flux_direct($I_L25212_69 + 256 * $I_L25212_78 + 1, $I_L25211_72) + $flux_direct_WR0_R0
25212.                         $I_L25212_69 = 1 + $I_L25212_69
25212.                         if ( $I_L25212_69 >= min( nd_profile, 256 + 256 * $I_L25212_78 ) + -256 * $I_L25212_78 ) exit
25212.                      enddo
25212.                   endif
25212.                   $I_L25212_78 = 1 + $I_L25212_78
25216.                   if ( $I_L25212_78 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
25216.                enddo
25216.             endif
25216.          endif
25216.       else if ( nd_layer > 0 ) then
25233.          if ( nd_profile > 0 ) then
25233.             $I_L25233_76 = 0
25233.             do
25232.                $I_L25232_74 = 0
25232.                if ( nd_layer >= 2 ) then
25232.                   $I_L25232_82 = 0
25232. !dir$ blocking_size( 0, 0 )
25232.                   do
25233.                      $I_L25233_66 = 0
25233. !dir$ ivdep
25233. !dir$ blocking_size( 256, 256 )
25233.                      do
25234.                         flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82) = flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 * $I_L25232_82) * trans_0($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82)
25241.                         s_up($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82) = source_coeff($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82, 1) * flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 * $I_L25232_82)
25243.                         s_down($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82) = source_coeff($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82, 2) * flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 * $I_L25232_82)
25234.                         flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 + 2 * $I_L25232_82) = flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82) * trans_0($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 + 2 * $I_L25232_82)
25241.                         s_up($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 + 2 * $I_L25232_82) = source_coeff($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 + 2 * $I_L25232_82, 1) * flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82)
25243.                         s_down($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 + 2 * $I_L25232_82) = source_coeff($I_L25233_66 + 256 * $I_L25233_76 + 1, 2 + 2 * $I_L25232_82, 2) * flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + 2 * $I_L25232_82)
25233.                         $I_L25233_66 = 1 + $I_L25233_66
25233.                         if ( $I_L25233_66 >= min( nd_profile, 256 + 256 * $I_L25233_76 ) + -256 * $I_L25233_76 ) exit
25233.                      enddo
25237.                      $I_L25232_82 = 1 + $I_L25232_82
25237.                      if ( $I_L25232_82 >= _rsh( nd_layer, 1 ) ) exit
25237.                   enddo
25237.                   $I_L25232_74 = and( 0xfffffffffffffffeUL, nd_layer )
25237.                endif
25232.                if ( $I_L25232_74 < nd_layer ) then
25233.                   $I_L25233_66 = 0
25233. !dir$ ivdep
25233. !dir$ blocking_size( 256, 256 )
25233.                   do
25234.                      flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + $I_L25232_74) = flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, $I_L25232_74) * trans_0($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + $I_L25232_74)
25241.                      s_up($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + $I_L25232_74) = source_coeff($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + $I_L25232_74, 1) * flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, $I_L25232_74)
25243.                      s_down($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + $I_L25232_74) = source_coeff($I_L25233_66 + 256 * $I_L25233_76 + 1, 1 + $I_L25232_74, 2) * flux_direct($I_L25233_66 + 256 * $I_L25233_76 + 1, $I_L25232_74)
25233.                      $I_L25233_66 = 1 + $I_L25233_66
25233.                      if ( $I_L25233_66 >= min( nd_profile, 256 + 256 * $I_L25233_76 ) + -256 * $I_L25233_76 ) exit
25233.                   enddo
25233.                endif
25233.                $I_L25233_76 = 1 + $I_L25233_76
25236.                if ( $I_L25233_76 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
25236.             enddo
25236.          endif
25236.       endif
25253.       return
25253.       end
25253.       
25337.       
25337.       subroutine sol_scat_cos( n_profile, n_direction, mu_0, direction, cos_sol_view, nd_profile, nd_direction )
25278.       t$1061 = nd_profile
25304.       t$3420 = _zla( 0, nd_profile )
25278.       t$1062 = nd_direction
25278.       t$3421 = _zla( 0, nd_profile )
25306.       t$3422 = _zla( 0, nd_direction )
25278.       t$3423 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
25278.       t$3424 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 2
25278.       t$3425 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
25325.       if ( n_direction > 0 ) then
25326.          if ( n_profile > 0 ) then
25325.             $I_L25325_14 = 0
25325.             if ( n_direction >= 4 ) then
25325.                $I_L25325_19 = 0
25325. !dir$ blocking_size( 0, 0 )
25325.                do
25326.                   $I_L25326_12 = 0
25326. !dir$ ivdep
25326. !dir$ blocking_size( 0, 0 )
25326.                   do
25327.                      cos_sol_view(1 + $I_L25326_12, 1 + 4 * $I_L25325_19) = -( mu_0(1 + $I_L25326_12) * direction(1 + $I_L25326_12, 1 + 4 * $I_L25325_19, 1) ) + _sqrt( ( 1.0 + -( mu_0(1 + $I_L25326_12) * mu_0(1 + $I_L25326_12) ) ) * ( 1.0 + -( direction(1 + $I_L25326_12, 1 + 4 * $I_L25325_19, 1) * direction(1 + $I_L25326_12, 1 + 4 * $I_L25325_19, 1) ) ) ) * cos( direction(1 + $I_L25326_12, 1 + 4 * $I_L25325_19, 2) )
25327.                      cos_sol_view(1 + $I_L25326_12, 2 + 4 * $I_L25325_19) = -( mu_0(1 + $I_L25326_12) * direction(1 + $I_L25326_12, 2 + 4 * $I_L25325_19, 1) ) + _sqrt( ( 1.0 + -( mu_0(1 + $I_L25326_12) * mu_0(1 + $I_L25326_12) ) ) * ( 1.0 + -( direction(1 + $I_L25326_12, 2 + 4 * $I_L25325_19, 1) * direction(1 + $I_L25326_12, 2 + 4 * $I_L25325_19, 1) ) ) ) * cos( direction(1 + $I_L25326_12, 2 + 4 * $I_L25325_19, 2) )
25327.                      cos_sol_view(1 + $I_L25326_12, 3 + 4 * $I_L25325_19) = -( mu_0(1 + $I_L25326_12) * direction(1 + $I_L25326_12, 3 + 4 * $I_L25325_19, 1) ) + _sqrt( ( 1.0 + -( mu_0(1 + $I_L25326_12) * mu_0(1 + $I_L25326_12) ) ) * ( 1.0 + -( direction(1 + $I_L25326_12, 3 + 4 * $I_L25325_19, 1) * direction(1 + $I_L25326_12, 3 + 4 * $I_L25325_19, 1) ) ) ) * cos( direction(1 + $I_L25326_12, 3 + 4 * $I_L25325_19, 2) )
25327.                      cos_sol_view(1 + $I_L25326_12, 4 + 4 * $I_L25325_19) = -( mu_0(1 + $I_L25326_12) * direction(1 + $I_L25326_12, 4 + 4 * $I_L25325_19, 1) ) + _sqrt( ( 1.0 + -( mu_0(1 + $I_L25326_12) * mu_0(1 + $I_L25326_12) ) ) * ( 1.0 + -( direction(1 + $I_L25326_12, 4 + 4 * $I_L25325_19, 1) * direction(1 + $I_L25326_12, 4 + 4 * $I_L25325_19, 1) ) ) ) * cos( direction(1 + $I_L25326_12, 4 + 4 * $I_L25325_19, 2) )
25331.                      $I_L25326_12 = 1 + $I_L25326_12
25326.                      if ( $I_L25326_12 >= n_profile ) exit
25326.                   enddo
25332.                   $I_L25325_19 = 1 + $I_L25325_19
25331.                   if ( $I_L25325_19 >= _rsh( n_direction, 2 ) ) exit
25331.                enddo
25332.                $I_L25325_14 = and( 0xfffffffffffffffcUL, n_direction )
25332.             endif
25325.             if ( $I_L25325_14 < n_direction ) then
25325.                $I_L25325_16 = 0
25325. !dir$ blocking_size( 0, 0 )
25325.                do
25326.                   $I_L25326_12 = 0
25326. !dir$ ivdep
25326. !dir$ blocking_size( 0, 0 )
25326.                   do
25327.                      cos_sol_view(1 + $I_L25326_12, $I_L25325_14 + $I_L25325_16 + 1) = -( mu_0(1 + $I_L25326_12) * direction(1 + $I_L25326_12, $I_L25325_14 + $I_L25325_16 + 1, 1) ) + _sqrt( ( 1.0 + -( mu_0(1 + $I_L25326_12) * mu_0(1 + $I_L25326_12) ) ) * ( 1.0 + -( direction(1 + $I_L25326_12, $I_L25325_14 + $I_L25325_16 + 1, 1) * direction(1 + $I_L25326_12, $I_L25325_14 + $I_L25325_16 + 1, 1) ) ) ) * cos( direction(1 + $I_L25326_12, $I_L25325_14 + $I_L25325_16 + 1, 2) )
25331.                      $I_L25326_12 = 1 + $I_L25326_12
25326.                      if ( $I_L25326_12 >= n_profile ) exit
25326.                   enddo
25332.                   $I_L25325_16 = 1 + $I_L25325_16
25331.                   if ( $I_L25325_16 >= n_direction + -$I_L25325_14 ) exit
25331.                enddo
25331.             endif
25331.          endif
25331.       endif
25337.       return
25337.       end
25337.       
26451.       
26451.       subroutine solve_band_k_eqv( ierr, n_profile, n_layer, i_top, p, t, d_mass, i_angular_integration, i_2stream, n_order_phase, l_rescale, n_order_gauss, ms_min, ms_max, i_truncation, ls_local_trunc, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, i_scatter_method, i_solver, i_band, n_gas, index_absorb, i_band_esft, i_scale_esft, i_scale_fnc, k_esft, w_esft, scale_vector, p_reference, t_reference, gas_mix_ratio, gas_frac_rescaled, l_doppler, doppler_correction, isolir, zen_0, zen_00, solar_irrad, planck_flux_band, diff_planck_band, l_ir_source_quad, diff_planck_band_2, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, diff_albedo_basis, planck_flux_surface, l_tile, n_point_tile, n_tile, list_tile, rho_alb_tile, planck_flux_tile, ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud, n_region, k_clr, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, weight_band, l_initial, flux_direct, flux_down, flux_up, i_direct, radiance, photolysis, l_clear, i_solver_clear, flux_direct_clear, flux_down_clear, flux_up_clear, flux_up_tile, flux_up_blue_tile, l_blue_flux_surf, weight_blue, flux_direct_blue_surf, flux_down_blue_surf, flux_up_blue_surf, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_band, nd_species, nd_esft_term, nd_scale_variable, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff, nd_point_tile, nd_tile )
25357.       t$1071 = nd_profile
25357.       t$1072 = nd_layer
25526.       t$3426 = _zla( 0, nd_profile )
25357.       t$3427 = _zla( 0, nd_profile )
25526.       t$3428 = _zla( 0, nd_layer )
25357.       t$3429 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
25357.       t$1073 = nd_max_order
25357.       t$3430 = 1 + nd_max_order
25550.       t$3431 = _zla( 0, 1 + nd_max_order )
25357.       t$1074 = nd_sph_coeff
25567.       t$3432 = _zla( 0, nd_sph_coeff )
25357.       t$1075 = nd_radiance_profile
25571.       t$3433 = _zla( 0, nd_radiance_profile )
25357.       t$3434 = _zla( 0, nd_radiance_profile )
25357.       t$3435 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_radiance_profile )
25357.       t$1076 = nd_species
25357.       t$1077 = nd_band
25594.       t$3436 = _zla( 0, nd_species )
25357.       t$3437 = _zla( 0, nd_species )
25594.       t$3438 = _zla( 0, nd_band )
25357.       t$3439 = _zla( 0, nd_species ) * _zla( 0, nd_band )
25357.       t$3440 = _zla( 0, nd_band )
25357.       t$3441 = _zla( 0, nd_species ) * _zla( 0, nd_band )
25357.       t$1078 = nd_esft_term
25606.       t$3442 = _zla( 0, nd_esft_term )
25357.       t$3443 = _zla( 0, nd_esft_term )
25357.       t$3444 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term )
25357.       t$3445 = _zla( 0, nd_species ) * _zla( 0, nd_band ) * _zla( 0, nd_esft_term )
25357.       t$1079 = nd_scale_variable
25610.       t$3446 = _zla( 0, nd_scale_variable )
25357.       t$3447 = _zla( 0, nd_scale_variable )
25357.       t$3448 = _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
25357.       t$3449 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
25357.       t$3450 = _zla( 0, nd_species ) * _zla( 0, nd_band ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
25357.       t$3451 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
25357.       t$3452 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species )
25357.       t$3453 = 1 + nd_layer
25644.       t$3454 = _zla( 0, 1 + nd_layer )
25357.       t$3455 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
25357.       t$1080 = nd_brdf_basis_fnc
25662.       t$3456 = _zla( 0, nd_brdf_basis_fnc )
25357.       t$3457 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
25357.       t$1081 = nd_brdf_trunc / 2
25357.       t$1082 = nd_brdf_trunc
25357.       t$3458 = _zla( 0, nd_brdf_basis_fnc )
25357.       t$3459 = 1 + nd_brdf_trunc / 2
25664.       t$3460 = _zla( 0, 1 + nd_brdf_trunc / 2 )
25357.       t$3461 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
25357.       t$3462 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
25357.       t$3463 = 1 + nd_brdf_trunc
25664.       t$3464 = _zla( 0, 1 + nd_brdf_trunc )
25357.       t$3465 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
25357.       t$1083 = nd_direction
25357.       t$3466 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
25667.       t$3467 = _zla( 0, nd_direction )
25357.       t$3468 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
25357.       t$1084 = nd_point_tile
25685.       t$3469 = _zla( 0, nd_point_tile )
25357.       t$1085 = nd_tile
25357.       t$3470 = _zla( 0, nd_point_tile )
25357.       t$3471 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile )
25688.       t$3472 = _zla( 0, nd_tile )
25357.       t$3473 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
25357.       t$3474 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2600.       if ( t$30 == 0 ) then
 2600.          t$3480(1) = 4
 2600.          t$3481(1) = 0
 2600.          t$3482(1) = 16
 2600.          t$3477(1) = int( loc( t$29 ), 8 )
 2600.          t$3478(1) = 0
 2600.          t$3479(1) = int( loc( t$3475 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$3477(1), t$3480(1), 1, t$3478(1), t$3479(1), t$3481(1), t$3482(1) )
 2600.       endif
25357.       t$1088 = id_ct
25357.       t$1086 = nd_cloud_type
25357.       t$3484 = nd_layer + -id_ct + 1
25732.       t$3485 = max( 0, nd_layer + -id_ct + 1 )
25357.       t$3486 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
25732.       t$3487 = max( 0, nd_cloud_type )
25357.       t$3488 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
25357.       t$1091 = nd_region
25741.       t$3489 = max( 0, nd_region )
25357.       t$3490 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
25357.       t$3491 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
25357.       t$1089 = ( -1 + id_ct )
25357.       t$1090 = nd_overlap_coeff
25357.       t$3492 = nd_layer + -id_ct + 2
25736.       t$3493 = max( 0, nd_layer + -id_ct + 2 )
25357.       t$3494 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
25736.       t$3495 = max( 0, nd_overlap_coeff )
25357.       t$3496 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
25357.       t$1087 = nd_column
25723.       t$3497 = max( 0, nd_column )
25357.       t$3498 = _zla( 0, nd_profile ) * max( 0, nd_column )
25357.       t$1092 = nd_viewing_level
25749.       t$3499 = max( 0, nd_viewing_level )
25357.       t$3500 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
25357.       t$3501 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
25357.       t$1093 = nd_flux_profile
25765.       t$3502 = max( 0, nd_flux_profile )
25357.       t$3503 = max( 0, nd_flux_profile )
25357.       t$3504 = max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
25357.       t$3505 = _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer )
25357.       t$3506 = _zla( 0, nd_radiance_profile ) * max( 0, nd_viewing_level )
25357.       t$3507 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level )
25357.       t$1094 = nd_j_profile
25781.       t$3508 = max( 0, nd_j_profile )
25357.       t$3509 = max( 0, nd_j_profile )
25357.       t$3510 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
25851.       t$3513 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
25862.       t$3514 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
25862.       t$3516 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
25842.       t$3517 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
25842.       t$3519 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile )
25869.       t$3520 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile )
25869.       t$3522 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8
25865.       t$3523 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
25865.       t$3525 = max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
25898.       t$3526 = 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
25898.       t$3528 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
25845.       t$3529 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25845.       t$3531 = 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25847.       t$3532 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25847.       t$3534 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25357.       t$1095 = ( 2 + 2 * nd_layer )
25896.       t$3535 = max( 0, ( 2 + 2 * nd_layer ) )
25357.       t$3536 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
25896.       t$3537 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25896.       t$3539 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25357.       t$3540 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
25871.       t$3541 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25871.       t$3543 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25867.       t$3544 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25867.       t$3546 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25874.       t$3547 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25874.       t$3549 = _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25837.       t$3551 = 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25854.       t$3552 = 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25854.       t$3554 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25858.       t$3555 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25858.       t$3557 = 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25860.       t$3558 = 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25860.       t$3560 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25357.       t$3561 = 1 + nd_cloud_type
25911.       t$3562 = max( 0, 1 + nd_cloud_type )
25357.       t$3563 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type )
25911.       t$3564 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25911.       t$3566 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25357.       t$1096 = nd_layer_clr
25908.       t$3567 = max( 0, nd_layer_clr )
25357.       t$3568 = _zla( 0, nd_profile ) * max( 0, nd_layer_clr )
25908.       t$3569 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25908.       t$3571 = _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25880.       t$3572 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25880.       t$3574 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25876.       t$3575 = 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25876.       t$3577 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25357.       t$3578 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
25357.       t$3579 = _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) )
25892.       t$3580 = 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25892.       t$3582 = _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25894.       t$3583 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25894.       t$3585 = _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25856.       t$3586 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25856.       t$3588 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25357.       t$3511 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
25851.       t$3512 = t$3511
25862.       t$3515 = t$3511 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
25842.       t$3518 = t$3511 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
25869.       t$3521 = t$3511 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile )
25865.       t$3524 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
25898.       t$3527 = t$3511 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
25845.       t$3530 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25847.       t$3533 = t$3511 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25896.       t$3538 = t$3511 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25871.       t$3542 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25867.       t$3545 = t$3511 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25874.       t$3548 = t$3511 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25837.       t$3550 = t$3511 + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25854.       t$3553 = t$3511 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25858.       t$3556 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25860.       t$3559 = t$3511 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25911.       t$3565 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25908.       t$3570 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25880.       t$3573 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25876.       t$3576 = t$3511 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25892.       t$3581 = t$3511 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25894.       t$3584 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25856.       t$3587 = t$3511 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_species ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer_clr ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 ) * max( 0, 1 + nd_cloud_type ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 16 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
25923.       $i_gas_S74 = index_absorb(1, i_band)
25925.       if ( isolir == 1 ) then
25933.          if ( n_layer > 0 ) then
25934.             if ( n_profile > 0 ) then
25933.                $I_L25933_969 = 0
25933.                do
25934.                   $I_L25934_860 = 0
25934. !dir$ ivdep
25934.                   do
25935.                      adjust_solar_ke(1 + $I_L25934_860, 1 + $I_L25933_969) = 1.0
25936.                      k_eqv(1 + $I_L25934_860, 1 + $I_L25933_969) = 0.0
25937.                      $I_L25934_860 = 1 + $I_L25934_860
25934.                      if ( $I_L25934_860 >= n_profile ) exit
25934.                   enddo
25938.                   $I_L25933_969 = 1 + $I_L25933_969
25937.                   if ( $I_L25933_969 >= n_layer ) exit
25937.                enddo
25937.             endif
25937.          endif
25940.          if ( -2 + n_gas >= 0 ) then
25940.             $I_L25940_1075 = 0
25940.             do
25943.                if ( n_profile > 0 ) then
25943.                   $I_L25943_862 = 0
25943. !dir$ ivdep
25943.                   do
25944.                      flux_gas(1 + $I_L25943_862, 0) = 1.0
25945.                      sum_k_flux(1 + $I_L25943_862, n_layer, 2 + $I_L25940_1075) = 0.0
25946.                      sum_flux(1 + $I_L25943_862, n_layer, 2 + $I_L25940_1075) = 0.0
25947.                      $I_L25943_862 = 1 + $I_L25943_862
25943.                      if ( $I_L25943_862 >= n_profile ) exit
25943.                   enddo
25943.                endif
25948.                if ( n_layer > 0 ) then
25949.                   if ( n_profile > 0 ) then
25948.                      $I_L25948_971 = 0
25948.                      do
25949.                         $I_L25949_864 = 0
25949. !dir$ ivdep
25949.                         do
25950.                            flux_gas(1 + $I_L25949_864, 1 + $I_L25948_971) = 0.0
25951.                            $I_L25949_864 = 1 + $I_L25949_864
25949.                            if ( $I_L25949_864 >= n_profile ) exit
25949.                         enddo
25952.                         $I_L25948_971 = 1 + $I_L25948_971
25951.                         if ( $I_L25948_971 >= n_layer ) exit
25951.                      enddo
25951.                   endif
25951.                endif
25954.                $i_gas_band_S6 = index_absorb(2 + $I_L25940_1075, i_band)
25955.                $t_S7 = i_band_esft(i_band, $i_gas_band_S6)
25955.                if ( $t_S7 > 0 ) then
25961.                   $SC_i_scale_esft_I0 = i_scale_esft(i_band, $i_gas_band_S6)
25955.                   $I_L25955_1067 = 0
25955.                   do
25958.                      $esft_weight_S18 = w_esft(1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25961.                      if ( $SC_i_scale_esft_I0 == 2 ) then
25962.                         t$955 = nd_profile
25962.                         t$956 = nd_layer
25962.                         t$3219 = max( 0, nd_profile )
25962.                         t$3220 = nd_profile
25962.                         t$3221 = max( 0, nd_layer )
25962.                         t$3222 = ( nd_profile * nd_layer )
25962.                         t$957 = nd_scale_variable
25962.                         t$3223 = max( 0, nd_scale_variable )
25962.                         if ( l_doppler($i_gas_band_S6) ) then
25962.                            $pressure_offset_S11 = doppler_correction($i_gas_band_S6)
25962.                         else
25962.                            $pressure_offset_S11 = 0.0
25962.                         endif
25962.                         if ( i_scale_fnc(i_band, $i_gas_band_S6) == 1 ) then
25962.                            if ( nd_layer > 0 ) then
25962.                               if ( nd_profile > 0 ) then
25962.                                  $SC_scale_vector_I23 = scale_vector(1, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                  $SC_scale_vector_I21 = scale_vector(2, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                  $SC_p_reference_I22 = p_reference($i_gas_band_S6, i_band)
25962.                                  $SC_t_reference_I20 = t_reference($i_gas_band_S6, i_band)
25962.                                  $I_L25962_977 = 0
25962.                                  do
25962.                                     $I_L25962_870 = 0
25962. !dir$ ivdep
25962.                                     do
25962.                                        gas_frac_rescaled(1 + $I_L25962_870, 1 + $I_L25962_977, $i_gas_band_S6) = _expn( $SC_scale_vector_I23 * log( ( ( p(1 + $I_L25962_870, 1 + $I_L25962_977) + $pressure_offset_S11 ) * 1.0/( $SC_p_reference_I22 + $pressure_offset_S11 ) ) ) + $SC_scale_vector_I21 * log( ( t(1 + $I_L25962_870, 1 + $I_L25962_977) * 1.0/$SC_t_reference_I20 ) ) )
25962.                                        $I_L25962_870 = 1 + $I_L25962_870
25962.                                        if ( $I_L25962_870 >= nd_profile ) exit
25962.                                     enddo
25962.                                     $I_L25962_977 = 1 + $I_L25962_977
25962.                                     if ( $I_L25962_977 >= nd_layer ) exit
25962.                                  enddo
25962.                               endif
25962.                            endif
25962.                            goto 10
25962.                         else if ( i_scale_fnc(i_band, $i_gas_band_S6) /= 0 ) then
25962.                            if ( i_scale_fnc(i_band, $i_gas_band_S6) == 2 ) then
25962.                               if ( nd_layer > 0 ) then
25962.                                  if ( nd_profile > 0 ) then
25962.                                     $SC_scale_vector_I24 = scale_vector(3, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_scale_vector_I23 = scale_vector(1, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_scale_vector_I21 = scale_vector(2, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_p_reference_I22 = p_reference($i_gas_band_S6, i_band)
25962.                                     $SC_t_reference_I20 = t_reference($i_gas_band_S6, i_band)
25962.                                     $I_L25962_975 = 0
25962.                                     do
25962.                                        $I_L25962_868 = 0
25962. !dir$ ivdep
25962.                                        do
25962.                                           gas_frac_rescaled(1 + $I_L25962_868, 1 + $I_L25962_975, $i_gas_band_S6) = _expn( $SC_scale_vector_I23 * log( ( ( p(1 + $I_L25962_868, 1 + $I_L25962_975) + $pressure_offset_S11 ) * 1.0/( $SC_p_reference_I22 + $pressure_offset_S11 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L25962_868, 1 + $I_L25962_975) * 1.0/$SC_t_reference_I20 ) ) * ( -1.0 + ( t(1 + $I_L25962_868, 1 + $I_L25962_975) * 1.0/$SC_t_reference_I20 ) ) * $SC_scale_vector_I24 + $SC_scale_vector_I21 * ( -1.0 + ( t(1 + $I_L25962_868, 1 + $I_L25962_975) * 1.0/$SC_t_reference_I20 ) ) + 1.0 )
25962.                                           $I_L25962_868 = 1 + $I_L25962_868
25962.                                           if ( $I_L25962_868 >= nd_profile ) exit
25962.                                        enddo
25962.                                        $I_L25962_975 = 1 + $I_L25962_975
25962.                                        if ( $I_L25962_975 >= nd_layer ) exit
25962.                                     enddo
25962.                                  endif
25962.                               endif
25962.                               goto 10
25962.                            else if ( i_scale_fnc(i_band, $i_gas_band_S6) == 3 ) then
25962.                               if ( nd_layer > 0 ) then
25962.                                  if ( nd_profile > 0 ) then
25962.                                     $SC_scale_vector_I25 = scale_vector(4, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_scale_vector_I24 = scale_vector(3, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_scale_vector_I23 = scale_vector(1, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_scale_vector_I21 = scale_vector(2, 1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25962.                                     $SC_p_reference_I22 = p_reference($i_gas_band_S6, i_band)
25962.                                     $SC_t_reference_I20 = t_reference($i_gas_band_S6, i_band)
25962.                                     $I_L25962_973 = 0
25962.                                     do
25962.                                        $I_L25962_866 = 0
25962. !dir$ ivdep
25962.                                        do
25962.                                           gas_frac_rescaled(1 + $I_L25962_866, 1 + $I_L25962_973, $i_gas_band_S6) = _expn( $SC_scale_vector_I23 * log( ( ( p(1 + $I_L25962_866, 1 + $I_L25962_973) + $SC_scale_vector_I21 ) * 1.0/( $SC_p_reference_I22 + $SC_scale_vector_I21 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L25962_866, 1 + $I_L25962_973) * 1.0/$SC_t_reference_I20 ) ) * ( -1.0 + ( t(1 + $I_L25962_866, 1 + $I_L25962_973) * 1.0/$SC_t_reference_I20 ) ) * $SC_scale_vector_I25 + $SC_scale_vector_I24 * ( -1.0 + ( t(1 + $I_L25962_866, 1 + $I_L25962_973) * 1.0/$SC_t_reference_I20 ) ) + 1.0 )
25962.                                           $I_L25962_866 = 1 + $I_L25962_866
25962.                                           if ( $I_L25962_866 >= nd_profile ) exit
25962.                                        enddo
25962.                                        $I_L25962_973 = 1 + $I_L25962_973
25962.                                        if ( $I_L25962_973 >= nd_layer ) exit
25962.                                     enddo
25962.                                  endif
25962.                               endif
25962.    10                         continue
25962.                               if ( nd_layer > 0 ) then
25962.                                  if ( nd_profile > 0 ) then
25962.                                     $I_L25962_979 = 0
25962.                                     do
25962.                                        $I_L25962_872 = 0
25962. !dir$ ivdep
25962.                                        do
25962.                                           gas_frac_rescaled(1 + $I_L25962_872, 1 + $I_L25962_979, $i_gas_band_S6) = max( 0.0, gas_frac_rescaled(1 + $I_L25962_872, 1 + $I_L25962_979, $i_gas_band_S6) * gas_mix_ratio(1 + $I_L25962_872, 1 + $I_L25962_979, $i_gas_band_S6) )
25962.                                           $I_L25962_872 = 1 + $I_L25962_872
25962.                                           if ( $I_L25962_872 >= nd_profile ) exit
25962.                                        enddo
25962.                                        $I_L25962_979 = 1 + $I_L25962_979
25962.                                        if ( $I_L25962_979 >= nd_layer ) exit
25962.                                     enddo
25962.                                  endif
25962.                               endif
25962.                            else
25962.                               _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
25962.                               ierr = 1
25962.                            endif
25962.                         endif
25975.                         if ( ierr /= 0 ) then
25357.                            _free( t$3511 )
25357.                            goto 100
25357.                         endif
25981.                         if ( n_profile > 0 ) then
25981.                            $I_L25981_874 = 0
25981. !dir$ ivdep
25981.                            do
25982.                               flux_term(1 + $I_L25981_874, 1) = $esft_weight_S18
25983.                               $I_L25981_874 = 1 + $I_L25981_874
25981.                               if ( $I_L25981_874 >= n_profile ) exit
25981.                            enddo
25981.                         endif
25986.                         if ( i_angular_integration == 1 ) then
25987.                            if ( n_layer > 0 ) then
25988.                               if ( n_profile > 0 ) then
25989.                                  $SC_k_esft_I26 = k_esft(1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25988.                                  $I_L25988_1053 = 0
25988.                                  do
25987.                                     $I_L25987_1039 = 0
25987.                                     if ( n_layer >= 2 ) then
25987.                                        $I_L25987_1105 = 0
25987. !dir$ blocking_size( 0, 0 )
25987.                                        do
25988.                                           $I_L25988_879 = 0
25988. !dir$ ivdep
25988. !dir$ blocking_size( 256, 256 )
25988.                                           do
25989.                                              $flux_term_WR0_R0 = flux_term($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + 2 * $I_L25987_1105) * _expn( -( $SC_k_esft_I26 * gas_frac_rescaled($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + 2 * $I_L25987_1105, $i_gas_band_S6) * d_mass($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + 2 * $I_L25987_1105) * zen_00($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + 2 * $I_L25987_1105) ) )
25989.                                              flux_term($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + 2 * $I_L25987_1105) = $flux_term_WR0_R0
25993.                                              flux_gas($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + 2 * $I_L25987_1105) = flux_gas($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + 2 * $I_L25987_1105) + $flux_term_WR0_R0
25989.                                              $flux_term_WR0_R0 = $flux_term_WR0_R0 * _expn( -( $SC_k_esft_I26 * gas_frac_rescaled($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + 2 * $I_L25987_1105, $i_gas_band_S6) * d_mass($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + 2 * $I_L25987_1105) * zen_00($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + 2 * $I_L25987_1105) ) )
25989.                                              flux_term($I_L25988_879 + 256 * $I_L25988_1053 + 1, 3 + 2 * $I_L25987_1105) = $flux_term_WR0_R0
25993.                                              flux_gas($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + 2 * $I_L25987_1105) = flux_gas($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + 2 * $I_L25987_1105) + $flux_term_WR0_R0
25988.                                              $I_L25988_879 = 1 + $I_L25988_879
25988.                                              if ( $I_L25988_879 >= min( n_profile, 256 + 256 * $I_L25988_1053 ) + -256 * $I_L25988_1053 ) exit
25988.                                           enddo
25995.                                           $I_L25987_1105 = 1 + $I_L25987_1105
25995.                                           if ( $I_L25987_1105 >= _rsh( n_layer, 1 ) ) exit
25995.                                        enddo
25995.                                        $I_L25987_1039 = and( 0xfffffffffffffffeUL, n_layer )
25995.                                     endif
25987.                                     if ( $I_L25987_1039 < n_layer ) then
25988.                                        $I_L25988_879 = 0
25988. !dir$ ivdep
25988. !dir$ blocking_size( 256, 256 )
25988.                                        do
25989.                                           $flux_term_WR0_R0 = flux_term($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + $I_L25987_1039) * _expn( -( $SC_k_esft_I26 * gas_frac_rescaled($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + $I_L25987_1039, $i_gas_band_S6) * d_mass($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + $I_L25987_1039) * zen_00($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + $I_L25987_1039) ) )
25989.                                           flux_term($I_L25988_879 + 256 * $I_L25988_1053 + 1, 2 + $I_L25987_1039) = $flux_term_WR0_R0
25993.                                           flux_gas($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + $I_L25987_1039) = flux_gas($I_L25988_879 + 256 * $I_L25988_1053 + 1, 1 + $I_L25987_1039) + $flux_term_WR0_R0
25988.                                           $I_L25988_879 = 1 + $I_L25988_879
25988.                                           if ( $I_L25988_879 >= min( n_profile, 256 + 256 * $I_L25988_1053 ) + -256 * $I_L25988_1053 ) exit
25988.                                        enddo
25988.                                     endif
25988.                                     $I_L25988_1053 = 1 + $I_L25988_1053
25994.                                     if ( $I_L25988_1053 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
25994.                                  enddo
25994.                               endif
25994.                            endif
25996.                         else if ( i_angular_integration == 3 ) then
25998.                            if ( n_layer > 0 ) then
25999.                               if ( n_profile > 0 ) then
26000.                                  $SC_k_esft_I26 = k_esft(1 + $I_L25955_1067, i_band, $i_gas_band_S6)
25999.                                  $I_L25999_1051 = 0
25999.                                  do
25998.                                     $I_L25998_1041 = 0
25998.                                     if ( n_layer >= 2 ) then
25998.                                        $I_L25998_1107 = 0
25998. !dir$ blocking_size( 0, 0 )
25998.                                        do
25999.                                           $I_L25999_876 = 0
25999. !dir$ ivdep
25999. !dir$ blocking_size( 256, 256 )
25999.                                           do
26000.                                              $flux_term_WR0_R1 = flux_term($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + 2 * $I_L25998_1107) * _expn( -( $SC_k_esft_I26 * gas_frac_rescaled($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + 2 * $I_L25998_1107, $i_gas_band_S6) * d_mass($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + 2 * $I_L25998_1107) * 1.0/zen_00($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + 2 * $I_L25998_1107) ) )
26000.                                              flux_term($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + 2 * $I_L25998_1107) = $flux_term_WR0_R1
26004.                                              flux_gas($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + 2 * $I_L25998_1107) = flux_gas($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + 2 * $I_L25998_1107) + $flux_term_WR0_R1
26000.                                              $flux_term_WR0_R1 = $flux_term_WR0_R1 * _expn( -( $SC_k_esft_I26 * gas_frac_rescaled($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + 2 * $I_L25998_1107, $i_gas_band_S6) * d_mass($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + 2 * $I_L25998_1107) * 1.0/zen_00($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + 2 * $I_L25998_1107) ) )
26000.                                              flux_term($I_L25999_876 + 256 * $I_L25999_1051 + 1, 3 + 2 * $I_L25998_1107) = $flux_term_WR0_R1
26004.                                              flux_gas($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + 2 * $I_L25998_1107) = flux_gas($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + 2 * $I_L25998_1107) + $flux_term_WR0_R1
25999.                                              $I_L25999_876 = 1 + $I_L25999_876
25999.                                              if ( $I_L25999_876 >= min( n_profile, 256 + 256 * $I_L25999_1051 ) + -256 * $I_L25999_1051 ) exit
25999.                                           enddo
26006.                                           $I_L25998_1107 = 1 + $I_L25998_1107
26006.                                           if ( $I_L25998_1107 >= _rsh( n_layer, 1 ) ) exit
26006.                                        enddo
26006.                                        $I_L25998_1041 = and( 0xfffffffffffffffeUL, n_layer )
26006.                                     endif
25998.                                     if ( $I_L25998_1041 < n_layer ) then
25999.                                        $I_L25999_876 = 0
25999. !dir$ ivdep
25999. !dir$ blocking_size( 256, 256 )
25999.                                        do
26000.                                           $flux_term_WR0_R1 = flux_term($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + $I_L25998_1041) * _expn( -( $SC_k_esft_I26 * gas_frac_rescaled($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + $I_L25998_1041, $i_gas_band_S6) * d_mass($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + $I_L25998_1041) * 1.0/zen_00($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + $I_L25998_1041) ) )
26000.                                           flux_term($I_L25999_876 + 256 * $I_L25999_1051 + 1, 2 + $I_L25998_1041) = $flux_term_WR0_R1
26004.                                           flux_gas($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + $I_L25998_1041) = flux_gas($I_L25999_876 + 256 * $I_L25999_1051 + 1, 1 + $I_L25998_1041) + $flux_term_WR0_R1
25999.                                           $I_L25999_876 = 1 + $I_L25999_876
25999.                                           if ( $I_L25999_876 >= min( n_profile, 256 + 256 * $I_L25999_1051 ) + -256 * $I_L25999_1051 ) exit
25999.                                        enddo
25999.                                     endif
25999.                                     $I_L25999_1051 = 1 + $I_L25999_1051
26005.                                     if ( $I_L25999_1051 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
26005.                                  enddo
26005.                               endif
26005.                            endif
26005.                         endif
26010.                         if ( n_profile > 0 ) then
26011.                            $SC_k_esft_I1 = k_esft(1 + $I_L25955_1067, i_band, $i_gas_band_S6)
26010.                            $I_L26010_882 = 0
26010. !dir$ ivdep
26010.                            do
26011.                               sum_k_flux(1 + $I_L26010_882, n_layer, 2 + $I_L25940_1075) = sum_k_flux(1 + $I_L26010_882, n_layer, 2 + $I_L25940_1075) + $SC_k_esft_I1 * flux_term(1 + $I_L26010_882, 1 + n_layer)
26015.                               sum_flux(1 + $I_L26010_882, n_layer, 2 + $I_L25940_1075) = sum_flux(1 + $I_L26010_882, n_layer, 2 + $I_L25940_1075) + flux_term(1 + $I_L26010_882, 1 + n_layer)
26017.                               $I_L26010_882 = 1 + $I_L26010_882
26010.                               if ( $I_L26010_882 >= n_profile ) exit
26010.                            enddo
26010.                         endif
26019.                         $I_L25955_1067 = 1 + $I_L25955_1067
26017.                      else
26017.                      endif
26017.                      if ( $I_L25955_1067 >= $t_S7 ) exit
26017.                   enddo
26023.                   if ( n_layer > 0 ) then
26024.                      if ( n_profile > 0 ) then
26024.                         $I_L26024_1055 = 0
26024.                         do
26023.                            $I_L26023_1043 = 0
26023. !dir$ blocking_size( 0, 0 )
26023.                            do
26024.                               $I_L26024_884 = 0
26024. !dir$ ivdep
26024. !dir$ blocking_size( 256, 256 )
26024.                               do
26025.                                  k_eqv($I_L26024_884 + 256 * $I_L26024_1055 + 1, 1 + $I_L26023_1043) = k_eqv($I_L26024_884 + 256 * $I_L26024_1055 + 1, 1 + $I_L26023_1043) + ( gas_frac_rescaled($I_L26024_884 + 256 * $I_L26024_1055 + 1, 1 + $I_L26023_1043, $i_gas_band_S6) * sum_k_flux($I_L26024_884 + 256 * $I_L26024_1055 + 1, n_layer, 2 + $I_L25940_1075) * 1.0/sum_flux($I_L26024_884 + 256 * $I_L26024_1055 + 1, n_layer, 2 + $I_L25940_1075) )
26029.                                  adjust_solar_ke($I_L26024_884 + 256 * $I_L26024_1055 + 1, 1 + $I_L26023_1043) = ( adjust_solar_ke($I_L26024_884 + 256 * $I_L26024_1055 + 1, 1 + $I_L26023_1043) * flux_gas($I_L26024_884 + 256 * $I_L26024_1055 + 1, 1 + $I_L26023_1043) * 1.0/flux_gas($I_L26024_884 + 256 * $I_L26024_1055 + 1, $I_L26023_1043) )
26024.                                  $I_L26024_884 = 1 + $I_L26024_884
26024.                                  if ( $I_L26024_884 >= min( n_profile, 256 + 256 * $I_L26024_1055 ) + -256 * $I_L26024_1055 ) exit
26024.                               enddo
26033.                               $I_L26023_1043 = 1 + $I_L26023_1043
26033.                               if ( $I_L26023_1043 >= n_layer ) exit
26033.                            enddo
26024.                            $I_L26024_1055 = 1 + $I_L26024_1055
26032.                            if ( $I_L26024_1055 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
26032.                         enddo
26032.                      endif
26032.                   endif
26035.                   $I_L25940_1075 = 1 + $I_L25940_1075
26033.                else
26033.                endif
26033.                if ( $I_L25940_1075 >= -1 + n_gas ) exit
26033.             enddo
26033.             goto 20
26033.             goto 30
26033.          else
26033.    20       continue
26039.             if ( i_angular_integration == 1 ) then
26040.                if ( n_layer > 0 ) then
26041.                   if ( n_profile > 0 ) then
26040.                      $I_L26040_983 = 0
26040.                      do
26041.                         $I_L26041_889 = 0
26041. !dir$ ivdep
26041.                         do
26042.                            adjust_solar_ke(1 + $I_L26041_889, 1 + $I_L26040_983) = adjust_solar_ke(1 + $I_L26041_889, 1 + $I_L26040_983) * _expn( k_eqv(1 + $I_L26041_889, 1 + $I_L26040_983) * d_mass(1 + $I_L26041_889, 1 + $I_L26040_983) * zen_00(1 + $I_L26041_889, 1 + $I_L26040_983) )
26044.                            $I_L26041_889 = 1 + $I_L26041_889
26041.                            if ( $I_L26041_889 >= n_profile ) exit
26041.                         enddo
26045.                         $I_L26040_983 = 1 + $I_L26040_983
26044.                         if ( $I_L26040_983 >= n_layer ) exit
26044.                      enddo
26044.                   endif
26044.                endif
26046.             else if ( i_angular_integration == 3 ) then
26047.                if ( n_layer > 0 ) then
26048.                   if ( n_profile > 0 ) then
26047.                      $I_L26047_981 = 0
26047.                      do
26048.                         $I_L26048_887 = 0
26048. !dir$ ivdep
26048.                         do
26049.                            adjust_solar_ke(1 + $I_L26048_887, 1 + $I_L26047_981) = adjust_solar_ke(1 + $I_L26048_887, 1 + $I_L26047_981) * _expn( ( k_eqv(1 + $I_L26048_887, 1 + $I_L26047_981) * d_mass(1 + $I_L26048_887, 1 + $I_L26047_981) * 1.0/zen_00(1 + $I_L26048_887, 1 + $I_L26047_981) ) )
26051.                            $I_L26048_887 = 1 + $I_L26048_887
26048.                            if ( $I_L26048_887 >= n_profile ) exit
26048.                         enddo
26052.                         $I_L26047_981 = 1 + $I_L26047_981
26051.                         if ( $I_L26047_981 >= n_layer ) exit
26051.                      enddo
26051.                   endif
26051.                endif
26051.             endif
26051.             goto 30
26051.          endif
26055.       else if ( isolir == 2 ) then
26058.          if ( i_angular_integration == 1 ) then
26059.             if ( n_profile > 0 ) then
26059.                $I_L26059_852 = 0
26059. !dir$ ivdep
26059.                do
26060.                   diffuse_albedo(1 + $I_L26059_852) = rho_alb(1 + $I_L26059_852, 1)
26061.                   $I_L26059_852 = 1 + $I_L26059_852
26059.                   if ( $I_L26059_852 >= n_profile ) exit
26059.                enddo
26059.             endif
26062.          else if ( i_angular_integration == 2 ) then
26065.             if ( n_profile > 0 ) then
26065.                $I_L26065_854 = 0
26065. !dir$ ivdep
26065.                do
26066.                   diffuse_albedo(1 + $I_L26065_854) = 0.0
26067.                   $I_L26065_854 = 1 + $I_L26065_854
26065.                   if ( $I_L26065_854 >= n_profile ) exit
26065.                enddo
26065.             endif
26065.          else if ( i_angular_integration == 3 ) then
26070.             if ( n_profile > 0 ) then
26071.                $SC_diff_albedo_basis_I2 = diff_albedo_basis(1)
26070.                $I_L26070_856 = 0
26070. !dir$ ivdep
26070.                do
26071.                   diffuse_albedo(1 + $I_L26070_856) = rho_alb(1 + $I_L26070_856, 1) * $SC_diff_albedo_basis_I2
26072.                   $I_L26070_856 = 1 + $I_L26070_856
26070.                   if ( $I_L26070_856 >= n_profile ) exit
26070.                enddo
26070.             endif
26073.             if ( n_brdf_basis_fnc > 0 ) then
26074.                if ( n_profile > 0 ) then
26073.                   $I_L26073_967 = 0
26073. !dir$ blocking_size( 0, 0 )
26073.                   do
26074.                      $SCA_diff_albedo_basis_I41 = diff_albedo_basis(1 + $I_L26073_967)
26074.                      $I_L26074_858 = 0
26074. !dir$ ivdep
26074. !dir$ blocking_size( 0, 0 )
26074.                      do
26075.                         diffuse_albedo(1 + $I_L26074_858) = rho_alb(1 + $I_L26074_858, 1 + $I_L26073_967) * $SCA_diff_albedo_basis_I41
26076.                         $I_L26074_858 = 1 + $I_L26074_858
26074.                         if ( $I_L26074_858 >= n_profile ) exit
26074.                      enddo
26077.                      $I_L26073_967 = 1 + $I_L26073_967
26076.                      if ( $I_L26073_967 >= n_brdf_basis_fnc ) exit
26076.                   enddo
26076.                endif
26076.             endif
26076.          endif
26082.          if ( -2 + n_gas >= 0 ) then
26082.             $I_L26082_1069 = 0
26082.             do
26086.                if ( 2 + 2 * n_layer > 0 ) then
26087.                   if ( n_profile > 0 ) then
26086.                      $I_L26086_985 = 0
26086.                      do
26087.                         $I_L26087_891 = 0
26087. !dir$ ivdep
26087.                         do
26088.                            sum_flux(1 + $I_L26087_891, 1 + $I_L26086_985, 2 + $I_L26082_1069) = 0.0
26089.                            sum_k_flux(1 + $I_L26087_891, 1 + $I_L26086_985, 2 + $I_L26082_1069) = 0.0
26090.                            $I_L26087_891 = 1 + $I_L26087_891
26087.                            if ( $I_L26087_891 >= n_profile ) exit
26087.                         enddo
26091.                         $I_L26086_985 = 1 + $I_L26086_985
26090.                         if ( $I_L26086_985 >= 2 + 2 * n_layer ) exit
26090.                      enddo
26090.                   endif
26090.                endif
26093.                $i_gas_band_S39 = index_absorb(2 + $I_L26082_1069, i_band)
26094.                $t_S40 = i_band_esft(i_band, $i_gas_band_S39)
26094.                if ( $t_S40 > 0 ) then
26101.                   $SC_i_scale_esft_I3 = i_scale_esft(i_band, $i_gas_band_S39)
26094.                   $I_L26094_1057 = 0
26094.                   do
26097.                      $esft_weight_S64 = w_esft(1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26101.                      if ( $SC_i_scale_esft_I3 == 2 ) then
26103.                         t$955 = nd_profile
26103.                         t$956 = nd_layer
26103.                         t$3219 = max( 0, nd_profile )
26103.                         t$3220 = nd_profile
26103.                         t$3221 = max( 0, nd_layer )
26103.                         t$3222 = ( nd_profile * nd_layer )
26103.                         t$957 = nd_scale_variable
26103.                         t$3223 = max( 0, nd_scale_variable )
26103.                         if ( l_doppler($i_gas_band_S39) ) then
26103.                            $pressure_offset_S44 = doppler_correction($i_gas_band_S39)
26103.                         else
26103.                            $pressure_offset_S44 = 0.0
26103.                         endif
26103.                         if ( i_scale_fnc(i_band, $i_gas_band_S39) == 1 ) then
26103.                            if ( nd_layer > 0 ) then
26103.                               if ( nd_profile > 0 ) then
26103.                                  $SC_scale_vector_I30 = scale_vector(1, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                  $SC_scale_vector_I28 = scale_vector(2, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                  $SC_p_reference_I29 = p_reference($i_gas_band_S39, i_band)
26103.                                  $SC_t_reference_I27 = t_reference($i_gas_band_S39, i_band)
26103.                                  $I_L26103_991 = 0
26103.                                  do
26103.                                     $I_L26103_897 = 0
26103. !dir$ ivdep
26103.                                     do
26103.                                        gas_frac_rescaled(1 + $I_L26103_897, 1 + $I_L26103_991, $i_gas_band_S39) = _expn( $SC_scale_vector_I30 * log( ( ( p(1 + $I_L26103_897, 1 + $I_L26103_991) + $pressure_offset_S44 ) * 1.0/( $SC_p_reference_I29 + $pressure_offset_S44 ) ) ) + $SC_scale_vector_I28 * log( ( t(1 + $I_L26103_897, 1 + $I_L26103_991) * 1.0/$SC_t_reference_I27 ) ) )
26103.                                        $I_L26103_897 = 1 + $I_L26103_897
26103.                                        if ( $I_L26103_897 >= nd_profile ) exit
26103.                                     enddo
26103.                                     $I_L26103_991 = 1 + $I_L26103_991
26103.                                     if ( $I_L26103_991 >= nd_layer ) exit
26103.                                  enddo
26103.                               endif
26103.                            endif
26103.                            goto 80
26103.                         else if ( i_scale_fnc(i_band, $i_gas_band_S39) /= 0 ) then
26103.                            if ( i_scale_fnc(i_band, $i_gas_band_S39) == 2 ) then
26103.                               if ( nd_layer > 0 ) then
26103.                                  if ( nd_profile > 0 ) then
26103.                                     $SC_scale_vector_I31 = scale_vector(3, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_scale_vector_I30 = scale_vector(1, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_scale_vector_I28 = scale_vector(2, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_p_reference_I29 = p_reference($i_gas_band_S39, i_band)
26103.                                     $SC_t_reference_I27 = t_reference($i_gas_band_S39, i_band)
26103.                                     $I_L26103_989 = 0
26103.                                     do
26103.                                        $I_L26103_895 = 0
26103. !dir$ ivdep
26103.                                        do
26103.                                           gas_frac_rescaled(1 + $I_L26103_895, 1 + $I_L26103_989, $i_gas_band_S39) = _expn( $SC_scale_vector_I30 * log( ( ( p(1 + $I_L26103_895, 1 + $I_L26103_989) + $pressure_offset_S44 ) * 1.0/( $SC_p_reference_I29 + $pressure_offset_S44 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L26103_895, 1 + $I_L26103_989) * 1.0/$SC_t_reference_I27 ) ) * ( -1.0 + ( t(1 + $I_L26103_895, 1 + $I_L26103_989) * 1.0/$SC_t_reference_I27 ) ) * $SC_scale_vector_I31 + $SC_scale_vector_I28 * ( -1.0 + ( t(1 + $I_L26103_895, 1 + $I_L26103_989) * 1.0/$SC_t_reference_I27 ) ) + 1.0 )
26103.                                           $I_L26103_895 = 1 + $I_L26103_895
26103.                                           if ( $I_L26103_895 >= nd_profile ) exit
26103.                                        enddo
26103.                                        $I_L26103_989 = 1 + $I_L26103_989
26103.                                        if ( $I_L26103_989 >= nd_layer ) exit
26103.                                     enddo
26103.                                  endif
26103.                               endif
26103.                               goto 80
26103.                            else if ( i_scale_fnc(i_band, $i_gas_band_S39) == 3 ) then
26103.                               if ( nd_layer > 0 ) then
26103.                                  if ( nd_profile > 0 ) then
26103.                                     $SC_scale_vector_I32 = scale_vector(4, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_scale_vector_I31 = scale_vector(3, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_scale_vector_I30 = scale_vector(1, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_scale_vector_I28 = scale_vector(2, 1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26103.                                     $SC_p_reference_I29 = p_reference($i_gas_band_S39, i_band)
26103.                                     $SC_t_reference_I27 = t_reference($i_gas_band_S39, i_band)
26103.                                     $I_L26103_987 = 0
26103.                                     do
26103.                                        $I_L26103_893 = 0
26103. !dir$ ivdep
26103.                                        do
26103.                                           gas_frac_rescaled(1 + $I_L26103_893, 1 + $I_L26103_987, $i_gas_band_S39) = _expn( $SC_scale_vector_I30 * log( ( ( p(1 + $I_L26103_893, 1 + $I_L26103_987) + $SC_scale_vector_I28 ) * 1.0/( $SC_p_reference_I29 + $SC_scale_vector_I28 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L26103_893, 1 + $I_L26103_987) * 1.0/$SC_t_reference_I27 ) ) * ( -1.0 + ( t(1 + $I_L26103_893, 1 + $I_L26103_987) * 1.0/$SC_t_reference_I27 ) ) * $SC_scale_vector_I32 + $SC_scale_vector_I31 * ( -1.0 + ( t(1 + $I_L26103_893, 1 + $I_L26103_987) * 1.0/$SC_t_reference_I27 ) ) + 1.0 )
26103.                                           $I_L26103_893 = 1 + $I_L26103_893
26103.                                           if ( $I_L26103_893 >= nd_profile ) exit
26103.                                        enddo
26103.                                        $I_L26103_987 = 1 + $I_L26103_987
26103.                                        if ( $I_L26103_987 >= nd_layer ) exit
26103.                                     enddo
26103.                                  endif
26103.                               endif
26103.    80                         continue
26103.                               if ( nd_layer > 0 ) then
26103.                                  if ( nd_profile > 0 ) then
26103.                                     $I_L26103_993 = 0
26103.                                     do
26103.                                        $I_L26103_899 = 0
26103. !dir$ ivdep
26103.                                        do
26103.                                           gas_frac_rescaled(1 + $I_L26103_899, 1 + $I_L26103_993, $i_gas_band_S39) = max( 0.0, gas_frac_rescaled(1 + $I_L26103_899, 1 + $I_L26103_993, $i_gas_band_S39) * gas_mix_ratio(1 + $I_L26103_899, 1 + $I_L26103_993, $i_gas_band_S39) )
26103.                                           $I_L26103_899 = 1 + $I_L26103_899
26103.                                           if ( $I_L26103_899 >= nd_profile ) exit
26103.                                        enddo
26103.                                        $I_L26103_993 = 1 + $I_L26103_993
26103.                                        if ( $I_L26103_993 >= nd_layer ) exit
26103.                                     enddo
26103.                                  endif
26103.                               endif
26103.                            else
26103.                               _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
26103.                               ierr = 1
26103.                            endif
26103.                         endif
26116.                         if ( ierr /= 0 ) then
25357.                            _free( t$3511 )
25357.                            goto 100
25357.                         endif
26122.                         if ( n_profile > 0 ) then
26122.                            $I_L26122_901 = 0
26122. !dir$ ivdep
26122.                            do
26123.                               flux_inc_direct(1 + $I_L26122_901) = 0.0
26124.                               flux_inc_down(1 + $I_L26122_901) = -planck_flux_band(1 + $I_L26122_901, 0)
26125.                               d_planck_flux_surface(1 + $I_L26122_901) = planck_flux_surface(1 + $I_L26122_901) + -planck_flux_band(1 + $I_L26122_901, n_layer)
26127.                               $I_L26122_901 = 1 + $I_L26122_901
26122.                               if ( $I_L26122_901 >= n_profile ) exit
26122.                            enddo
26122.                         endif
26130.                         if ( n_layer > 0 ) then
26131.                            if ( n_profile > 0 ) then
26132.                               $SC_k_esft_I33 = k_esft(1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26130.                               $I_L26130_995 = 0
26130.                               do
26131.                                  $I_L26131_903 = 0
26131. !dir$ ivdep
26131.                                  do
26132.                                     tau_gas(1 + $I_L26131_903, 1 + $I_L26130_995) = $SC_k_esft_I33 * gas_frac_rescaled(1 + $I_L26131_903, 1 + $I_L26130_995, $i_gas_band_S39) * d_mass(1 + $I_L26131_903, 1 + $I_L26130_995)
26135.                                     $I_L26131_903 = 1 + $I_L26131_903
26131.                                     if ( $I_L26131_903 >= n_profile ) exit
26131.                                  enddo
26136.                                  $I_L26130_995 = 1 + $I_L26130_995
26135.                                  if ( $I_L26130_995 >= n_layer ) exit
26135.                               enddo
26135.                            endif
26135.                         endif
26141.                         ipa$18829 = loc( diffuse_albedo(1) )
26141.                         diffuse_albedo = _copyin( diffuse_albedo(1) )
26141.                         ipa$18831 = loc( diffuse_albedo(1) )
26141.                         direct_albedo = _copyin( diffuse_albedo(1) )
26141.                         ipa$18833 = loc( flux_term(1, 1) )
26141.                         flux_direct = _copyin( flux_term(1, 1) )
26141.                         ipa$18835 = loc( flux_term(1, 1) )
26141.                         flux_diffuse = _copyin( flux_term(1, 1) )
26141.                         t$778 = nd_profile
26141.                         t$779 = nd_layer
26141.                         t$2743 = max( 0, nd_profile )
26141.                         t$2744 = nd_profile
26141.                         t$2745 = max( 0, nd_layer )
26141.                         t$2746 = ( nd_profile * nd_layer )
26141.                         t$2747 = 1 + nd_layer
26141.                         t$2748 = max( 0, 1 + nd_layer )
26141.                         t$2749 = nd_profile * max( 0, 1 + nd_layer )
26141.                         t$780 = ( 2 + 2 * nd_layer )
26141.                         t$2750 = max( 0, ( 2 + 2 * nd_layer ) )
26141.                         t$2751 = nd_profile * max( 0, ( 2 + 2 * nd_layer ) )
26141.                         t$2754 = nd_profile * nd_layer * 8
26141.                         t$2755 = 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 )
26141.                         t$2757 = nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 )
26141.                         t$2758 = 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 )
26141.                         t$2760 = nd_profile * nd_layer * 8 + 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 )
26141.                         t$2752 = int( _alloc( nd_profile * nd_layer * 8 + 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 ) ), 8 )
26141.                         t$2753 = t$2752
26141.                         t$2756 = t$2752 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 )
26141.                         t$2759 = t$2752 + 8 * ( ( nd_profile * nd_layer * 8 + 8 * ( ( 7 + nd_profile * nd_layer * 8 ) / 8 ) + 7 ) / 8 )
26141.                         if ( nd_layer > 0 ) then
26141.                            if ( nd_profile > 0 ) then
26141.                               $I_L26141_997 = 0
26141.                               do
26141.                                  $I_L26141_905 = 0
26141. !dir$ ivdep
26141.                                  do
26141.                                     $trans_WR0_R2 = _expn( -1.6599999999999999 * tau_gas(1 + $I_L26141_905, 1 + $I_L26141_997) )
26141.                                     trans(1 + $I_L26141_905, 1 + $I_L26141_997) = $trans_WR0_R2
26141.                                     $source_up_WR0_R3 = ( ( 1.0000000149011612 + -$trans_WR0_R2 ) * diff_planck_band(1 + $I_L26141_905, 1 + $I_L26141_997) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau_gas(1 + $I_L26141_905, 1 + $I_L26141_997) ) )
26141.                                     source_up(1 + $I_L26141_905, 1 + $I_L26141_997) = $source_up_WR0_R3
26141.                                     source_down(1 + $I_L26141_905, 1 + $I_L26141_997) = -$source_up_WR0_R3
26141.                                     $I_L26141_905 = 1 + $I_L26141_905
26141.                                     if ( $I_L26141_905 >= nd_profile ) exit
26141.                                  enddo
26141.                                  $I_L26141_997 = 1 + $I_L26141_997
26141.                                  if ( $I_L26141_997 >= nd_layer ) exit
26141.                               enddo
26141.                            endif
26141.                         endif
26141.                         if ( nd_profile > 0 ) then
26141.                            $I_L26141_907 = 0
26141. !dir$ ivdep
26141.                            do
26141.                               flux_diffuse(1 + $I_L26141_907, 2) = flux_inc_down(1 + $I_L26141_907)
26141.                               $I_L26141_907 = 1 + $I_L26141_907
26141.                               if ( $I_L26141_907 >= nd_profile ) exit
26141.                            enddo
26141.                         endif
26141.                         if ( nd_layer > 0 ) then
26141.                            if ( nd_profile > 0 ) then
26141.                               $I_L26141_999 = 0
26141.                               if ( nd_layer >= 2 ) then
26141.                                  $I_L26141_1109 = 0
26141.                                  do
26141.                                     $I_L26141_909 = 0
26141. !dir$ ivdep
26141.                                     do
26141.                                        flux_diffuse(1 + $I_L26141_909, 4 + 4 * $I_L26141_1109) = trans(1 + $I_L26141_909, 1 + 2 * $I_L26141_1109) * flux_diffuse(1 + $I_L26141_909, 2 + 4 * $I_L26141_1109) + source_down(1 + $I_L26141_909, 1 + 2 * $I_L26141_1109)
26141.                                        flux_diffuse(1 + $I_L26141_909, 6 + 4 * $I_L26141_1109) = trans(1 + $I_L26141_909, 2 + 2 * $I_L26141_1109) * flux_diffuse(1 + $I_L26141_909, 4 + 4 * $I_L26141_1109) + source_down(1 + $I_L26141_909, 2 + 2 * $I_L26141_1109)
26141.                                        $I_L26141_909 = 1 + $I_L26141_909
26141.                                        if ( $I_L26141_909 >= nd_profile ) exit
26141.                                     enddo
26141.                                     $I_L26141_1109 = 1 + $I_L26141_1109
26141.                                     if ( $I_L26141_1109 >= _rsh( nd_layer, 1 ) ) exit
26141.                                  enddo
26141.                                  $I_L26141_999 = and( 0xfffffffffffffffeUL, nd_layer )
26141.                               endif
26141.                               if ( $I_L26141_999 < nd_layer ) then
26141.                                  $I_L26141_909 = 0
26141. !dir$ ivdep
26141.                                  do
26141.                                     flux_diffuse(1 + $I_L26141_909, 4 + 2 * $I_L26141_999) = trans(1 + $I_L26141_909, 1 + $I_L26141_999) * flux_diffuse(1 + $I_L26141_909, 2 + 2 * $I_L26141_999) + source_down(1 + $I_L26141_909, 1 + $I_L26141_999)
26141.                                     $I_L26141_909 = 1 + $I_L26141_909
26141.                                     if ( $I_L26141_909 >= nd_profile ) exit
26141.                                  enddo
26141.                               endif
26141.                            endif
26141.                         endif
26141.                         if ( nd_profile > 0 ) then
26141.                            $I_L26141_911 = 0
26141. !dir$ ivdep
26141.                            do
26141.                               flux_diffuse(1 + $I_L26141_911, 1 + 2 * n_layer) = d_planck_flux_surface(1 + $I_L26141_911) + diffuse_albedo(1 + $I_L26141_911) * flux_diffuse(1 + $I_L26141_911, 2 + 2 * n_layer)
26141.                               $I_L26141_911 = 1 + $I_L26141_911
26141.                               if ( $I_L26141_911 >= nd_profile ) exit
26141.                            enddo
26141.                         endif
26141.                         if ( nd_layer > 0 ) then
26141.                            if ( nd_profile > 0 ) then
26141.                               $I_L26141_1001 = 0
26141.                               if ( nd_layer >= 2 ) then
26141.                                  $I_L26141_1111 = 0
26141.                                  do
26141.                                     $I_L26141_913 = 0
26141. !dir$ ivdep
26141.                                     do
26141.                                        flux_diffuse(1 + $I_L26141_913, 2 * nd_layer + -4 * $I_L26141_1111 + -1) = trans(1 + $I_L26141_913, nd_layer + -2 * $I_L26141_1111) * flux_diffuse(1 + $I_L26141_913, 2 * nd_layer + -4 * $I_L26141_1111 + 1) + source_up(1 + $I_L26141_913, nd_layer + -2 * $I_L26141_1111)
26141.                                        flux_diffuse(1 + $I_L26141_913, 2 * nd_layer + -4 * $I_L26141_1111 + -3) = trans(1 + $I_L26141_913, nd_layer + -2 * $I_L26141_1111 + -1) * flux_diffuse(1 + $I_L26141_913, 2 * nd_layer + -4 * $I_L26141_1111 + -1) + source_up(1 + $I_L26141_913, nd_layer + -2 * $I_L26141_1111 + -1)
26141.                                        $I_L26141_913 = 1 + $I_L26141_913
26141.                                        if ( $I_L26141_913 >= nd_profile ) exit
26141.                                     enddo
26141.                                     $I_L26141_1111 = 1 + $I_L26141_1111
26141.                                     if ( $I_L26141_1111 >= _rsh( nd_layer, 1 ) ) exit
26141.                                  enddo
26141.                                  $I_L26141_1001 = and( 0xfffffffffffffffeUL, nd_layer )
26141.                               endif
26141.                               if ( $I_L26141_1001 < nd_layer ) then
26141.                                  $I_L26141_913 = 0
26141. !dir$ ivdep
26141.                                  do
26141.                                     flux_diffuse(1 + $I_L26141_913, 2 * nd_layer + -2 * $I_L26141_1001 + -1) = trans(1 + $I_L26141_913, nd_layer + -$I_L26141_1001) * flux_diffuse(1 + $I_L26141_913, 2 * nd_layer + -2 * $I_L26141_1001 + 1) + source_up(1 + $I_L26141_913, nd_layer + -$I_L26141_1001)
26141.                                     $I_L26141_913 = 1 + $I_L26141_913
26141.                                     if ( $I_L26141_913 >= nd_profile ) exit
26141.                                  enddo
26141.                               endif
26141.                            endif
26141.                         endif
26141.                         _free( t$2752 )
26141.                         flux_term(1, 1) = _copyout( flux_diffuse )
26141.                         flux_term(1, 1) = _copyout( flux_direct )
26141.                         diffuse_albedo(1) = _copyout( direct_albedo )
26141.                         diffuse_albedo(1) = _copyout( diffuse_albedo )
26151.                         if ( 2 + 2 * n_layer > 0 ) then
26152.                            if ( n_profile > 0 ) then
26153.                               $SC_k_esft_I33 = k_esft(1 + $I_L26094_1057, i_band, $i_gas_band_S39)
26151.                               $I_L26151_1003 = 0
26151.                               do
26152.                                  $I_L26152_915 = 0
26152. !dir$ ivdep
26152.                                  do
26153.                                     sum_k_flux(1 + $I_L26152_915, 1 + $I_L26151_1003, 2 + $I_L26082_1069) = sum_k_flux(1 + $I_L26152_915, 1 + $I_L26151_1003, 2 + $I_L26082_1069) + $SC_k_esft_I33 * $esft_weight_S64 * flux_term(1 + $I_L26152_915, 1 + $I_L26151_1003)
26156.                                     sum_flux(1 + $I_L26152_915, 1 + $I_L26151_1003, 2 + $I_L26082_1069) = sum_flux(1 + $I_L26152_915, 1 + $I_L26151_1003, 2 + $I_L26082_1069) + $esft_weight_S64 * flux_term(1 + $I_L26152_915, 1 + $I_L26151_1003)
26158.                                     $I_L26152_915 = 1 + $I_L26152_915
26152.                                     if ( $I_L26152_915 >= n_profile ) exit
26152.                                  enddo
26159.                                  $I_L26151_1003 = 1 + $I_L26151_1003
26158.                                  if ( $I_L26151_1003 >= 2 + 2 * n_layer ) exit
26158.                               enddo
26158.                            endif
26158.                         endif
26161.                         $I_L26094_1057 = 1 + $I_L26094_1057
26159.                      else
26159.                      endif
26159.                      if ( $I_L26094_1057 >= $t_S40 ) exit
26159.                   enddo
26163.                   $I_L26082_1069 = 1 + $I_L26082_1069
26161.                else
26161.                endif
26161.                if ( $I_L26082_1069 >= -1 + n_gas ) exit
26161.             enddo
26161.             goto 90
26161.             goto 30
26161.          else
26161.    90       continue
26166.             if ( n_layer > 0 ) then
26167.                if ( n_profile > 0 ) then
26166.                   $I_L26166_1005 = 0
26166.                   do
26167.                      $I_L26167_917 = 0
26167. !dir$ ivdep
26167. !dir$ loop_info (automatic) cache_nt( k_eqv )
26167.                      do
26168.                         k_eqv(1 + $I_L26167_917, 1 + $I_L26166_1005) = 0.0
26169.                         $I_L26167_917 = 1 + $I_L26167_917
26167.                         if ( $I_L26167_917 >= n_profile ) exit
26167.                      enddo
26170.                      $I_L26166_1005 = 1 + $I_L26166_1005
26169.                      if ( $I_L26166_1005 >= n_layer ) exit
26169.                   enddo
26169.                endif
26169.             endif
26172.             if ( -2 + n_gas >= 0 ) then
26173.                if ( n_layer > 0 ) then
26174.                   if ( n_profile > 0 ) then
26172.                      $I_L26172_1081 = 0
26172.                      do
26173.                         $I_L26173_1077 = 0
26173.                         do
26174.                            $I_L26174_1071 = 0
26174.                            do
26172.                               $I_L26172_1059 = 0
26172. !dir$ shortloop16
26172. !dir$ loop_info (automatic) cache_nt( index_absorb )
26172. !dir$ blocking_size( 2, 2 )
26172.                               do
26173.                                  $SCA_index_absorb_I42 = index_absorb($I_L26172_1059 + 2 * $I_L26172_1081 + 2, i_band)
26173.                                  $I_L26173_1045 = 0
26173. !dir$ shortloop16
26173. !dir$ blocking_size( 4, 4 )
26173.                                  do
26174.                                     $I_L26174_919 = 0
26174. !dir$ ivdep
26174. !dir$ blocking_size( 256, 256 )
26174.                                     do
26175.                                        $mean_k_net_flux_S73 = 5.0e-1 * ( sum_k_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 2, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) + sum_k_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 4, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) + -sum_k_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 1, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) + -sum_k_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 3, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) )
26179.                                        $mean_net_flux_S72 = 5.0e-1 * ( sum_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 2, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) + sum_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 4, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) + -sum_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 1, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) + -sum_flux($I_L26174_919 + 256 * $I_L26174_1071 + 1, 2 * $I_L26173_1045 + 8 * $I_L26173_1077 + 3, $I_L26172_1059 + 2 * $I_L26172_1081 + 2) )
26186.                                        k_eqv($I_L26174_919 + 256 * $I_L26174_1071 + 1, $I_L26173_1045 + 4 * $I_L26173_1077 + 1) = k_eqv($I_L26174_919 + 256 * $I_L26174_1071 + 1, $I_L26173_1045 + 4 * $I_L26173_1077 + 1) + ( max( 0.0, ( $mean_k_net_flux_S73 * 1.0/$mean_net_flux_S72 ) ) ) * gas_frac_rescaled($I_L26174_919 + 256 * $I_L26174_1071 + 1, $I_L26173_1045 + 4 * $I_L26173_1077 + 1, $SCA_index_absorb_I42)
26174.                                        $I_L26174_919 = 1 + $I_L26174_919
26174.                                        if ( $I_L26174_919 >= min( n_profile, 256 + 256 * $I_L26174_1071 ) + -256 * $I_L26174_1071 ) exit
26174.                                     enddo
26173.                                     $I_L26173_1045 = 1 + $I_L26173_1045
26173.                                     if ( $I_L26173_1045 >= min( n_layer, 4 + 4 * $I_L26173_1077 ) + -4 * $I_L26173_1077 ) exit
26173.                                  enddo
26172.                                  $I_L26172_1059 = 1 + $I_L26172_1059
26188.                                  if ( $I_L26172_1059 >= min( -1 + n_gas, 2 + 2 * $I_L26172_1081 ) + -2 * $I_L26172_1081 ) exit
26188.                               enddo
26174.                               $I_L26174_1071 = 1 + $I_L26174_1071
26174.                               if ( $I_L26174_1071 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
26174.                            enddo
26173.                            $I_L26173_1077 = 1 + $I_L26173_1077
26189.                            if ( $I_L26173_1077 >= 1 + max( 0, -1 + _rsh( 3 + n_layer, 2 ) ) ) exit
26189.                         enddo
26172.                         $I_L26172_1081 = 1 + $I_L26172_1081
26172.                         if ( $I_L26172_1081 >= 1 + max( 0, -1 + _rsh( n_gas, 1 ) ) ) exit
26172.                      enddo
26172.                   endif
26172.                endif
26172.             endif
26172.             goto 30
26172.          endif
26172.       else
26172.    30    continue
26197.          $t_S75 = i_band_esft(i_band, $i_gas_S74)
26197.          if ( $t_S75 > 0 ) then
26203.             $SC_i_scale_esft_I4 = i_scale_esft(i_band, $i_gas_S74)
26197.             $I_L26197_1085 = 0
26197.             do
26200.                $esft_weight_S107 = w_esft(1 + $I_L26197_1085, i_band, $i_gas_S74)
26203.                if ( $SC_i_scale_esft_I4 == 2 ) then
26204.                   t$955 = nd_profile
26204.                   t$956 = nd_layer
26204.                   t$3219 = max( 0, nd_profile )
26204.                   t$3220 = nd_profile
26204.                   t$3221 = max( 0, nd_layer )
26204.                   t$3222 = ( nd_profile * nd_layer )
26204.                   t$957 = nd_scale_variable
26204.                   t$3223 = max( 0, nd_scale_variable )
26204.                   if ( l_doppler($i_gas_S74) ) then
26204.                      $pressure_offset_S79 = doppler_correction($i_gas_S74)
26204.                   else
26204.                      $pressure_offset_S79 = 0.0
26204.                   endif
26204.                   if ( i_scale_fnc(i_band, $i_gas_S74) == 1 ) then
26204.                      if ( nd_layer > 0 ) then
26204.                         if ( nd_profile > 0 ) then
26204.                            $SC_scale_vector_I37 = scale_vector(1, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                            $SC_scale_vector_I35 = scale_vector(2, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                            $SC_p_reference_I36 = p_reference($i_gas_S74, i_band)
26204.                            $SC_t_reference_I34 = t_reference($i_gas_S74, i_band)
26204.                            $I_L26204_1011 = 0
26204.                            do
26204.                               $I_L26204_926 = 0
26204. !dir$ ivdep
26204.                               do
26204.                                  gas_frac_rescaled(1 + $I_L26204_926, 1 + $I_L26204_1011, $i_gas_S74) = _expn( $SC_scale_vector_I37 * log( ( ( p(1 + $I_L26204_926, 1 + $I_L26204_1011) + $pressure_offset_S79 ) * 1.0/( $SC_p_reference_I36 + $pressure_offset_S79 ) ) ) + $SC_scale_vector_I35 * log( ( t(1 + $I_L26204_926, 1 + $I_L26204_1011) * 1.0/$SC_t_reference_I34 ) ) )
26204.                                  $I_L26204_926 = 1 + $I_L26204_926
26204.                                  if ( $I_L26204_926 >= nd_profile ) exit
26204.                               enddo
26204.                               $I_L26204_1011 = 1 + $I_L26204_1011
26204.                               if ( $I_L26204_1011 >= nd_layer ) exit
26204.                            enddo
26204.                         endif
26204.                      endif
26204.                      goto 40
26204.                   else if ( i_scale_fnc(i_band, $i_gas_S74) /= 0 ) then
26204.                      if ( i_scale_fnc(i_band, $i_gas_S74) == 2 ) then
26204.                         if ( nd_layer > 0 ) then
26204.                            if ( nd_profile > 0 ) then
26204.                               $SC_scale_vector_I38 = scale_vector(3, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_scale_vector_I37 = scale_vector(1, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_scale_vector_I35 = scale_vector(2, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_p_reference_I36 = p_reference($i_gas_S74, i_band)
26204.                               $SC_t_reference_I34 = t_reference($i_gas_S74, i_band)
26204.                               $I_L26204_1009 = 0
26204.                               do
26204.                                  $I_L26204_924 = 0
26204. !dir$ ivdep
26204.                                  do
26204.                                     gas_frac_rescaled(1 + $I_L26204_924, 1 + $I_L26204_1009, $i_gas_S74) = _expn( $SC_scale_vector_I37 * log( ( ( p(1 + $I_L26204_924, 1 + $I_L26204_1009) + $pressure_offset_S79 ) * 1.0/( $SC_p_reference_I36 + $pressure_offset_S79 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L26204_924, 1 + $I_L26204_1009) * 1.0/$SC_t_reference_I34 ) ) * ( -1.0 + ( t(1 + $I_L26204_924, 1 + $I_L26204_1009) * 1.0/$SC_t_reference_I34 ) ) * $SC_scale_vector_I38 + $SC_scale_vector_I35 * ( -1.0 + ( t(1 + $I_L26204_924, 1 + $I_L26204_1009) * 1.0/$SC_t_reference_I34 ) ) + 1.0 )
26204.                                     $I_L26204_924 = 1 + $I_L26204_924
26204.                                     if ( $I_L26204_924 >= nd_profile ) exit
26204.                                  enddo
26204.                                  $I_L26204_1009 = 1 + $I_L26204_1009
26204.                                  if ( $I_L26204_1009 >= nd_layer ) exit
26204.                               enddo
26204.                            endif
26204.                         endif
26204.                         goto 40
26204.                      else if ( i_scale_fnc(i_band, $i_gas_S74) == 3 ) then
26204.                         if ( nd_layer > 0 ) then
26204.                            if ( nd_profile > 0 ) then
26204.                               $SC_scale_vector_I39 = scale_vector(4, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_scale_vector_I38 = scale_vector(3, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_scale_vector_I37 = scale_vector(1, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_scale_vector_I35 = scale_vector(2, 1 + $I_L26197_1085, i_band, $i_gas_S74)
26204.                               $SC_p_reference_I36 = p_reference($i_gas_S74, i_band)
26204.                               $SC_t_reference_I34 = t_reference($i_gas_S74, i_band)
26204.                               $I_L26204_1007 = 0
26204.                               do
26204.                                  $I_L26204_922 = 0
26204. !dir$ ivdep
26204.                                  do
26204.                                     gas_frac_rescaled(1 + $I_L26204_922, 1 + $I_L26204_1007, $i_gas_S74) = _expn( $SC_scale_vector_I37 * log( ( ( p(1 + $I_L26204_922, 1 + $I_L26204_1007) + $SC_scale_vector_I35 ) * 1.0/( $SC_p_reference_I36 + $SC_scale_vector_I35 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L26204_922, 1 + $I_L26204_1007) * 1.0/$SC_t_reference_I34 ) ) * ( -1.0 + ( t(1 + $I_L26204_922, 1 + $I_L26204_1007) * 1.0/$SC_t_reference_I34 ) ) * $SC_scale_vector_I39 + $SC_scale_vector_I38 * ( -1.0 + ( t(1 + $I_L26204_922, 1 + $I_L26204_1007) * 1.0/$SC_t_reference_I34 ) ) + 1.0 )
26204.                                     $I_L26204_922 = 1 + $I_L26204_922
26204.                                     if ( $I_L26204_922 >= nd_profile ) exit
26204.                                  enddo
26204.                                  $I_L26204_1007 = 1 + $I_L26204_1007
26204.                                  if ( $I_L26204_1007 >= nd_layer ) exit
26204.                               enddo
26204.                            endif
26204.                         endif
26204.    40                   continue
26204.                         if ( nd_layer > 0 ) then
26204.                            if ( nd_profile > 0 ) then
26204.                               $I_L26204_1013 = 0
26204.                               do
26204.                                  $I_L26204_928 = 0
26204. !dir$ ivdep
26204.                                  do
26204.                                     gas_frac_rescaled(1 + $I_L26204_928, 1 + $I_L26204_1013, $i_gas_S74) = max( 0.0, gas_frac_rescaled(1 + $I_L26204_928, 1 + $I_L26204_1013, $i_gas_S74) * gas_mix_ratio(1 + $I_L26204_928, 1 + $I_L26204_1013, $i_gas_S74) )
26204.                                     $I_L26204_928 = 1 + $I_L26204_928
26204.                                     if ( $I_L26204_928 >= nd_profile ) exit
26204.                                  enddo
26204.                                  $I_L26204_1013 = 1 + $I_L26204_1013
26204.                                  if ( $I_L26204_1013 >= nd_layer ) exit
26204.                               enddo
26204.                            endif
26204.                         endif
26204.                      else
26204.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
26204.                         ierr = 1
26204.                      endif
26204.                   endif
26216.                   if ( ierr /= 0 ) then
25357.                      _free( t$3511 )
25357.                      goto 100
25357.                   endif
26222.                   if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
26225.                      if ( isolir == 1 ) then
26227.                         if ( n_profile > 0 ) then
26227.                            $I_L26227_930 = 0
26227. !dir$ ivdep
26227.                            do
26228.                               d_planck_flux_surface(1 + $I_L26227_930) = 0.0
26229.                               flux_inc_down(1 + $I_L26227_930) = ( solar_irrad(1 + $I_L26227_930) * 1.0/zen_0(1 + $I_L26227_930) )
26230.                               flux_inc_direct(1 + $I_L26227_930) = ( solar_irrad(1 + $I_L26227_930) * 1.0/zen_0(1 + $I_L26227_930) )
26231.                               $I_L26227_930 = 1 + $I_L26227_930
26227.                               if ( $I_L26227_930 >= n_profile ) exit
26227.                            enddo
26227.                         endif
26232.                      else if ( isolir == 2 ) then
26234.                         if ( n_profile > 0 ) then
26234.                            $I_L26234_932 = 0
26234. !dir$ ivdep
26234.                            do
26235.                               flux_inc_direct(1 + $I_L26234_932) = 0.0
26236.                               flux_direct_part(1 + $I_L26234_932, n_layer) = 0.0
26237.                               flux_inc_down(1 + $I_L26234_932) = -planck_flux_band(1 + $I_L26234_932, 0)
26238.                               d_planck_flux_surface(1 + $I_L26234_932) = planck_flux_surface(1 + $I_L26234_932) + -planck_flux_band(1 + $I_L26234_932, n_layer)
26241.                               $I_L26234_932 = 1 + $I_L26234_932
26234.                               if ( $I_L26234_932 >= n_profile ) exit
26234.                            enddo
26234.                         endif
26242.                         if ( l_clear ) then
26243.                            if ( n_profile > 0 ) then
26243.                               $I_L26243_934 = 0
26243. !dir$ ivdep
26243.                               do
26244.                                  flux_direct_clear_part(1 + $I_L26243_934, n_layer) = 0.0
26245.                                  $I_L26243_934 = 1 + $I_L26243_934
26243.                                  if ( $I_L26243_934 >= n_profile ) exit
26243.                               enddo
26243.                            endif
26243.                         endif
26243.                      endif
26243.                   else
26249.                      if ( i_angular_integration == 3 ) then
26251.                         if ( isolir == 1 ) then
26252.                            if ( n_profile > 0 ) then
26252.                               $I_L26252_936 = 0
26252. !dir$ ivdep
26252.                               do
26253.                                  i_direct_part(1 + $I_L26252_936, 0) = solar_irrad(1 + $I_L26252_936)
26254.                                  flux_inc_down(1 + $I_L26252_936) = 0.0
26255.                                  $I_L26252_936 = 1 + $I_L26252_936
26252.                                  if ( $I_L26252_936 >= n_profile ) exit
26252.                               enddo
26252.                            endif
26256.                         else if ( n_profile > 0 ) then
26257.                            $I_L26257_938 = 0
26257. !dir$ ivdep
26257.                            do
26258.                               flux_inc_down(1 + $I_L26257_938) = -planck_flux_band(1 + $I_L26257_938, 0)
26259.                               d_planck_flux_surface(1 + $I_L26257_938) = planck_flux_surface(1 + $I_L26257_938) + -planck_flux_band(1 + $I_L26257_938, n_layer)
26261.                               $I_L26257_938 = 1 + $I_L26257_938
26257.                               if ( $I_L26257_938 >= n_profile ) exit
26257.                            enddo
26257.                         endif
26257.                      endif
26257.                   endif
26272.                   if ( -1 + n_cloud_top > 0 ) then
26273.                      if ( n_profile > 0 ) then
26272.                         $I_L26272_1015 = 0
26272.                         do
26273.                            $I_L26273_940 = 0
26273. !dir$ ivdep
26273.                            do
26274.                               k_no_gas_tot_clr(1 + $I_L26273_940, 1 + $I_L26272_1015) = (ss_prop%k_grey_tot_clr%base_addr)(1 + $I_L26273_940, 1 + $I_L26272_1015, 0)
26275.                               (ss_prop%k_grey_tot_clr%base_addr)(1 + $I_L26273_940, 1 + $I_L26272_1015, 0) = (ss_prop%k_grey_tot_clr%base_addr)(1 + $I_L26273_940, 1 + $I_L26272_1015, 0) + k_eqv(1 + $I_L26273_940, 1 + $I_L26272_1015)
26277.                               $I_L26273_940 = 1 + $I_L26273_940
26273.                               if ( $I_L26273_940 >= n_profile ) exit
26273.                            enddo
26278.                            $I_L26272_1015 = 1 + $I_L26272_1015
26277.                            if ( $I_L26272_1015 >= -1 + n_cloud_top ) exit
26277.                         enddo
26277.                      endif
26277.                   endif
26279.                   if ( n_layer + -n_cloud_top >= 0 ) then
26280.                      if ( n_profile > 0 ) then
26279.                         $I_L26279_1017 = 0
26279.                         do
26280.                            $I_L26280_942 = 0
26280. !dir$ ivdep
26280.                            do
26281.                               k_no_gas_tot(1 + $I_L26280_942, n_cloud_top + $I_L26279_1017, 0) = (ss_prop%k_grey_tot%base_addr)(1 + $I_L26280_942, n_cloud_top + $I_L26279_1017, 0, 0)
26282.                               (ss_prop%k_grey_tot%base_addr)(1 + $I_L26280_942, n_cloud_top + $I_L26279_1017, 0, 0) = (ss_prop%k_grey_tot%base_addr)(1 + $I_L26280_942, n_cloud_top + $I_L26279_1017, 0, 0) + k_eqv(1 + $I_L26280_942, n_cloud_top + $I_L26279_1017)
26284.                               $I_L26280_942 = 1 + $I_L26280_942
26280.                               if ( $I_L26280_942 >= n_profile ) exit
26280.                            enddo
26285.                            $I_L26279_1017 = 1 + $I_L26279_1017
26284.                            if ( $I_L26279_1017 >= n_layer + -n_cloud_top + 1 ) exit
26284.                         enddo
26284.                      endif
26284.                   endif
26286.                   if ( l_cloud ) then
26287.                      if ( n_cloud_type > 0 ) then
26288.                         if ( n_layer + -n_cloud_top >= 0 ) then
26289.                            if ( n_profile > 0 ) then
26287.                               $I_L26287_1083 = 0
26287.                               do
26288.                                  $I_L26288_1079 = 0
26288.                                  do
26289.                                     $I_L26289_1073 = 0
26289.                                     do
26287.                                        $I_L26287_1062 = 0
26287.                                        if ( min( n_cloud_type, 8 + 8 * $I_L26287_1083 ) + -8 * $I_L26287_1083 >= 4 ) then
26287.                                           $I_L26287_1128 = 0
26287. !dir$ shortloop16
26287. !dir$ blocking_size( 8, 8 )
26287.                                           do
26288.                                              $I_L26288_1048 = 0
26288. !dir$ shortloop16
26288. !dir$ blocking_size( 8, 8 )
26288.                                              do
26289.                                                 $I_L26289_944 = 0
26289. !dir$ ivdep
26289. !dir$ blocking_size( 256, 256 )
26289.                                                 do
26290.                                                    k_no_gas_tot($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 1) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 1, 0)
26291.                                                    (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 1, 0) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 1, 0) + k_eqv($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079)
26290.                                                    k_no_gas_tot($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 2) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 2, 0)
26291.                                                    (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 2, 0) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 2, 0) + k_eqv($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079)
26290.                                                    k_no_gas_tot($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 3) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 3, 0)
26291.                                                    (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 3, 0) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 3, 0) + k_eqv($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079)
26290.                                                    k_no_gas_tot($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 4) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 4, 0)
26291.                                                    (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 4, 0) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, 8 * $I_L26287_1083 + 4 * $I_L26287_1128 + 4, 0) + k_eqv($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079)
26289.                                                    $I_L26289_944 = 1 + $I_L26289_944
26289.                                                    if ( $I_L26289_944 >= min( n_profile, 256 + 256 * $I_L26289_1073 ) + -256 * $I_L26289_1073 ) exit
26289.                                                 enddo
26288.                                                 $I_L26288_1048 = 1 + $I_L26288_1048
26288.                                                 if ( $I_L26288_1048 >= min( n_layer + -n_cloud_top + 1, 8 + 8 * $I_L26288_1079 ) + -8 * $I_L26288_1079 ) exit
26288.                                              enddo
26287.                                              $I_L26287_1128 = 1 + $I_L26287_1128
26293.                                              if ( $I_L26287_1128 >= _rsh( min( n_cloud_type, 8 + 8 * $I_L26287_1083 ) + -8 * $I_L26287_1083, 2 ) ) exit
26293.                                           enddo
26287.                                           $I_L26287_1062 = and( 0xfffffffffffffffcUL, min( n_cloud_type, 8 + 8 * $I_L26287_1083 ) + -8 * $I_L26287_1083 )
26287.                                        endif
26287.                                        if ( $I_L26287_1062 < min( n_cloud_type, 8 + 8 * $I_L26287_1083 ) + -8 * $I_L26287_1083 ) then
26287.                                           $I_L26287_1125 = 0
26287. !dir$ shortloop16
26287. !dir$ blocking_size( 8, 8 )
26287.                                           do
26288.                                              $I_L26288_1048 = 0
26288. !dir$ shortloop16
26288. !dir$ blocking_size( 8, 8 )
26288.                                              do
26289.                                                 $I_L26289_944 = 0
26289. !dir$ ivdep
26289. !dir$ blocking_size( 256, 256 )
26289.                                                 do
26290.                                                    k_no_gas_tot($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, $I_L26287_1062 + $I_L26287_1125 + 8 * $I_L26287_1083 + 1) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, $I_L26287_1062 + $I_L26287_1125 + 8 * $I_L26287_1083 + 1, 0)
26291.                                                    (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, $I_L26287_1062 + $I_L26287_1125 + 8 * $I_L26287_1083 + 1, 0) = (ss_prop%k_grey_tot%base_addr)($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079, $I_L26287_1062 + $I_L26287_1125 + 8 * $I_L26287_1083 + 1, 0) + k_eqv($I_L26289_944 + 256 * $I_L26289_1073 + 1, n_cloud_top + $I_L26288_1048 + 8 * $I_L26288_1079)
26289.                                                    $I_L26289_944 = 1 + $I_L26289_944
26289.                                                    if ( $I_L26289_944 >= min( n_profile, 256 + 256 * $I_L26289_1073 ) + -256 * $I_L26289_1073 ) exit
26289.                                                 enddo
26288.                                                 $I_L26288_1048 = 1 + $I_L26288_1048
26288.                                                 if ( $I_L26288_1048 >= min( n_layer + -n_cloud_top + 1, 8 + 8 * $I_L26288_1079 ) + -8 * $I_L26288_1079 ) exit
26288.                                              enddo
26287.                                              $I_L26287_1125 = 1 + $I_L26287_1125
26293.                                              if ( $I_L26287_1125 >= min( n_cloud_type, 8 + 8 * $I_L26287_1083 ) + -$I_L26287_1062 + -8 * $I_L26287_1083 ) exit
26293.                                           enddo
26293.                                        endif
26289.                                        $I_L26289_1073 = 1 + $I_L26289_1073
26289.                                        if ( $I_L26289_1073 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
26289.                                     enddo
26288.                                     $I_L26288_1079 = 1 + $I_L26288_1079
26294.                                     if ( $I_L26288_1079 >= 1 + max( 0, -1 + _rsh( n_layer + -n_cloud_top + 8, 3 ) ) ) exit
26294.                                  enddo
26287.                                  $I_L26287_1083 = 1 + $I_L26287_1083
26287.                                  if ( $I_L26287_1083 >= 1 + max( 0, -1 + _rsh( 7 + n_cloud_type, 3 ) ) ) exit
26287.                               enddo
26287.                            endif
26287.                         endif
26287.                      endif
26287.                   endif
26299.                   k_esft_mono($i_gas_S74) = k_esft(1 + $I_L26197_1085, i_band, $i_gas_S74)
26301.                   t$407 = nd_species
26301.                   t$2332 = max( 0, nd_species )
26301.                   t$408 = nd_profile
26301.                   t$409 = nd_layer
26301.                   t$2333 = max( 0, nd_profile )
26301.                   t$2334 = nd_profile
26301.                   t$2335 = max( 0, nd_layer )
26301.                   t$2336 = nd_layer * nd_profile
26301.                   t$2337 = ( nd_profile * nd_layer * nd_species )
26301.                   t$2338 = ( nd_profile * nd_layer )
26301.                   if ( nd_layer > 0 ) then
26301.                      if ( nd_profile > 0 ) then
26301.                         $SC_k_esft_mono_I40 = k_esft_mono($i_gas_S74)
26301.                         $I_L26301_1019 = 0
26301.                         do
26301.                            $I_L26301_947 = 0
26301. !dir$ ivdep
26301.                            do
26301.                               k_gas_abs(1 + $I_L26301_947, 1 + $I_L26301_1019) = $SC_k_esft_mono_I40 * gas_frac_rescaled(1 + $I_L26301_947, 1 + $I_L26301_1019, $i_gas_S74)
26301.                               $I_L26301_947 = 1 + $I_L26301_947
26301.                               if ( $I_L26301_947 >= nd_profile ) exit
26301.                            enddo
26301.                            $I_L26301_1019 = 1 + $I_L26301_1019
26301.                            if ( $I_L26301_1019 >= nd_layer ) exit
26301.                         enddo
26301.                      endif
26301.                   endif
26309.                   ipa$18909 = .true.
26309.                   call monochromatic_radiance( ierr, n_profile, n_layer, d_mass(1, 1), i_angular_integration, i_2stream, l_rescale, n_order_gauss, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), i_scatter_method, i_solver, k_gas_abs(1, 1), ipa$18909, adjust_solar_ke(1, 1), isolir, diff_planck_band(1, 1), l_ir_source_quad, diff_planck_band_2(1, 1), zen_0(1), zen_00(1, 1), flux_inc_direct(1), flux_inc_down(1), i_direct_part(1, 0), d_planck_flux_surface(1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, k_clr, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct_part(1, 0), flux_total_part(1, 1), radiance_part(1, 1, 1), photolysis_part(1, 1), l_clear, i_solver_clear, flux_direct_clear_part(1, 0), flux_total_clear_part(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff )
26373.                   if ( ierr /= 0 ) then
25357.                      _free( t$3511 )
25357.                      goto 100
25357.                   endif
26376.                   if ( -1 + n_cloud_top > 0 ) then
26377.                      if ( n_profile > 0 ) then
26376.                         $I_L26376_1021 = 0
26376.                         do
26377.                            $I_L26377_949 = 0
26377. !dir$ ivdep
26377.                            do
26378.                               (ss_prop%k_grey_tot_clr%base_addr)(1 + $I_L26377_949, 1 + $I_L26376_1021, 0) = k_no_gas_tot_clr(1 + $I_L26377_949, 1 + $I_L26376_1021)
26379.                               $I_L26377_949 = 1 + $I_L26377_949
26377.                               if ( $I_L26377_949 >= n_profile ) exit
26377.                            enddo
26380.                            $I_L26376_1021 = 1 + $I_L26376_1021
26379.                            if ( $I_L26376_1021 >= -1 + n_cloud_top ) exit
26379.                         enddo
26379.                      endif
26379.                   endif
26381.                   if ( n_layer + -n_cloud_top >= 0 ) then
26382.                      if ( n_profile > 0 ) then
26381.                         $I_L26381_1023 = 0
26381.                         do
26382.                            $I_L26382_951 = 0
26382. !dir$ ivdep
26382.                            do
26383.                               (ss_prop%k_grey_tot%base_addr)(1 + $I_L26382_951, n_cloud_top + $I_L26381_1023, 0, 0) = k_no_gas_tot(1 + $I_L26382_951, n_cloud_top + $I_L26381_1023, 0)
26384.                               $I_L26382_951 = 1 + $I_L26382_951
26382.                               if ( $I_L26382_951 >= n_profile ) exit
26382.                            enddo
26385.                            $I_L26381_1023 = 1 + $I_L26381_1023
26384.                            if ( $I_L26381_1023 >= n_layer + -n_cloud_top + 1 ) exit
26384.                         enddo
26384.                      endif
26384.                   endif
26386.                   if ( l_cloud ) then
26387.                      if ( n_cloud_type > 0 ) then
26388.                         if ( n_layer + -n_cloud_top >= 0 ) then
26389.                            if ( n_profile > 0 ) then
26387.                               $I_L26387_1065 = 0
26387.                               do
26388.                                  $I_L26388_1025 = 0
26388.                                  do
26389.                                     $I_L26389_953 = 0
26389. !dir$ ivdep
26389.                                     do
26390.                                        (ss_prop%k_grey_tot%base_addr)(1 + $I_L26389_953, n_cloud_top + $I_L26388_1025, 1 + $I_L26387_1065, 0) = k_no_gas_tot(1 + $I_L26389_953, n_cloud_top + $I_L26388_1025, 1 + $I_L26387_1065)
26391.                                        $I_L26389_953 = 1 + $I_L26389_953
26389.                                        if ( $I_L26389_953 >= n_profile ) exit
26389.                                     enddo
26392.                                     $I_L26388_1025 = 1 + $I_L26388_1025
26391.                                     if ( $I_L26388_1025 >= n_layer + -n_cloud_top + 1 ) exit
26391.                                  enddo
26393.                                  $I_L26387_1065 = 1 + $I_L26387_1065
26392.                                  if ( $I_L26387_1065 >= n_cloud_type ) exit
26392.                               enddo
26392.                            endif
26392.                         endif
26392.                      endif
26392.                   endif
26397.                   weight_incr = weight_band * $esft_weight_S107
26398.                   if ( l_blue_flux_surf ) then
26399.                      weight_blue_incr = weight_blue * $esft_weight_S107
26399.                   endif
26401.                   call augment_radiance( n_profile, n_layer, i_angular_integration, i_sph_mode, n_viewing_level, n_direction, isolir, l_clear, l_initial, weight_incr, l_blue_flux_surf, weight_blue_incr, flux_direct(1, 0), flux_down(1, 0), flux_up(1, 0), flux_direct_blue_surf(1), flux_down_blue_surf(1), flux_up_blue_surf(1), i_direct(1, 0), radiance(1, 1, 1), photolysis(1, 1), flux_direct_clear(1, 0), flux_down_clear(1, 0), flux_up_clear(1, 0), flux_direct_part(1, 0), flux_total_part(1, 1), i_direct_part(1, 0), radiance_part(1, 1, 1), photolysis_part(1, 1), flux_direct_clear_part(1, 0), flux_total_clear_part(1, 1), nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_layer, nd_viewing_level, nd_direction )
26422.                   if ( l_tile ) then
26423.                      ipa$21029 = loc( planck_flux_band(1, n_layer) )
26423.                      planck_flux_air = _copyin( planck_flux_band(1, n_layer) )
26423.                      t$179 = nd_point_tile
26423.                      t$1683 = max( 0, nd_point_tile )
26423.                      t$180 = nd_brdf_basis_fnc
26423.                      t$181 = nd_tile
26423.                      t$1684 = nd_point_tile
26423.                      t$1685 = max( 0, nd_brdf_basis_fnc )
26423.                      t$1686 = nd_brdf_basis_fnc * nd_point_tile
26423.                      t$1687 = max( 0, nd_tile )
26423.                      t$1688 = ( nd_brdf_basis_fnc * nd_point_tile * nd_tile )
26423.                      t$1689 = ( nd_point_tile * nd_tile )
26423.                      t$182 = nd_flux_profile
26423.                      t$1690 = max( 0, nd_flux_profile )
26423.                      if ( l_initial == 0 ) then
26423.                         if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
26423.                            if ( isolir == 1 ) then
26423.                               if ( n_tile > 0 ) then
26423.                                  if ( n_point_tile > 0 ) then
26423.                                     $I_L26423_1035 = 0
26423.                                     if ( n_tile >= 4 ) then
26423.                                        $I_L26423_1113 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $I_L26423_963 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $l_S109 = list_tile(1 + $I_L26423_963)
26423.                                              flux_up_tile(1 + $I_L26423_963, 1 + 4 * $I_L26423_1113) = flux_up_tile(1 + $I_L26423_963, 1 + 4 * $I_L26423_1113) + weight_incr * ( rho_alb_tile(1 + $I_L26423_963, 1, 1 + 4 * $I_L26423_1113) * flux_total_part($l_S109, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_963, 2, 1 + 4 * $I_L26423_1113) + -rho_alb_tile(1 + $I_L26423_963, 1, 1 + 4 * $I_L26423_1113) ) * flux_direct_part($l_S109, n_layer) )
26423.                                              $l_S109 = list_tile(1 + $I_L26423_963)
26423.                                              flux_up_tile(1 + $I_L26423_963, 2 + 4 * $I_L26423_1113) = flux_up_tile(1 + $I_L26423_963, 2 + 4 * $I_L26423_1113) + weight_incr * ( rho_alb_tile(1 + $I_L26423_963, 1, 2 + 4 * $I_L26423_1113) * flux_total_part($l_S109, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_963, 2, 2 + 4 * $I_L26423_1113) + -rho_alb_tile(1 + $I_L26423_963, 1, 2 + 4 * $I_L26423_1113) ) * flux_direct_part($l_S109, n_layer) )
26423.                                              $l_S109 = list_tile(1 + $I_L26423_963)
26423.                                              flux_up_tile(1 + $I_L26423_963, 3 + 4 * $I_L26423_1113) = flux_up_tile(1 + $I_L26423_963, 3 + 4 * $I_L26423_1113) + weight_incr * ( rho_alb_tile(1 + $I_L26423_963, 1, 3 + 4 * $I_L26423_1113) * flux_total_part($l_S109, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_963, 2, 3 + 4 * $I_L26423_1113) + -rho_alb_tile(1 + $I_L26423_963, 1, 3 + 4 * $I_L26423_1113) ) * flux_direct_part($l_S109, n_layer) )
26423.                                              $l_S109 = list_tile(1 + $I_L26423_963)
26423.                                              flux_up_tile(1 + $I_L26423_963, 4 + 4 * $I_L26423_1113) = flux_up_tile(1 + $I_L26423_963, 4 + 4 * $I_L26423_1113) + weight_incr * ( rho_alb_tile(1 + $I_L26423_963, 1, 4 + 4 * $I_L26423_1113) * flux_total_part($l_S109, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_963, 2, 4 + 4 * $I_L26423_1113) + -rho_alb_tile(1 + $I_L26423_963, 1, 4 + 4 * $I_L26423_1113) ) * flux_direct_part($l_S109, n_layer) )
26423.                                              $I_L26423_963 = 1 + $I_L26423_963
26423.                                              if ( $I_L26423_963 >= n_point_tile ) exit
26423.                                           enddo
26423.                                           $I_L26423_1113 = 1 + $I_L26423_1113
26423.                                           if ( $I_L26423_1113 >= _rsh( n_tile, 2 ) ) exit
26423.                                        enddo
26423.                                        $I_L26423_1035 = and( 0xfffffffffffffffcUL, n_tile )
26423.                                     endif
26423.                                     if ( $I_L26423_1035 < n_tile ) then
26423.                                        $I_L26423_1099 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $I_L26423_963 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $l_S109 = list_tile(1 + $I_L26423_963)
26423.                                              flux_up_tile(1 + $I_L26423_963, $I_L26423_1035 + $I_L26423_1099 + 1) = flux_up_tile(1 + $I_L26423_963, $I_L26423_1035 + $I_L26423_1099 + 1) + weight_incr * ( rho_alb_tile(1 + $I_L26423_963, 1, $I_L26423_1035 + $I_L26423_1099 + 1) * flux_total_part($l_S109, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_963, 2, $I_L26423_1035 + $I_L26423_1099 + 1) + -rho_alb_tile(1 + $I_L26423_963, 1, $I_L26423_1035 + $I_L26423_1099 + 1) ) * flux_direct_part($l_S109, n_layer) )
26423.                                              $I_L26423_963 = 1 + $I_L26423_963
26423.                                              if ( $I_L26423_963 >= n_point_tile ) exit
26423.                                           enddo
26423.                                           $I_L26423_1099 = 1 + $I_L26423_1099
26423.                                           if ( $I_L26423_1099 >= n_tile + -$I_L26423_1035 ) exit
26423.                                        enddo
26423.                                     endif
26423.                                  endif
26423.                               endif
26423.                               if ( l_blue_flux_surf ) then
26423.                                  if ( n_tile > 0 ) then
26423.                                     if ( n_point_tile > 0 ) then
26423.                                        $I_L26423_1037 = 0
26423.                                        if ( n_tile >= 4 ) then
26423.                                           $I_L26423_1115 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $I_L26423_965 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                              do
26423.                                                 $l_S112 = list_tile(1 + $I_L26423_965)
26423.                                                 flux_up_blue_tile(1 + $I_L26423_965, 1 + 4 * $I_L26423_1115) = flux_up_blue_tile(1 + $I_L26423_965, 1 + 4 * $I_L26423_1115) + weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_965, 1, 1 + 4 * $I_L26423_1115) * flux_total_part($l_S112, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_965, 2, 1 + 4 * $I_L26423_1115) + -rho_alb_tile(1 + $I_L26423_965, 1, 1 + 4 * $I_L26423_1115) ) * flux_direct_part($l_S112, n_layer) )
26423.                                                 $l_S112 = list_tile(1 + $I_L26423_965)
26423.                                                 flux_up_blue_tile(1 + $I_L26423_965, 2 + 4 * $I_L26423_1115) = flux_up_blue_tile(1 + $I_L26423_965, 2 + 4 * $I_L26423_1115) + weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_965, 1, 2 + 4 * $I_L26423_1115) * flux_total_part($l_S112, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_965, 2, 2 + 4 * $I_L26423_1115) + -rho_alb_tile(1 + $I_L26423_965, 1, 2 + 4 * $I_L26423_1115) ) * flux_direct_part($l_S112, n_layer) )
26423.                                                 $l_S112 = list_tile(1 + $I_L26423_965)
26423.                                                 flux_up_blue_tile(1 + $I_L26423_965, 3 + 4 * $I_L26423_1115) = flux_up_blue_tile(1 + $I_L26423_965, 3 + 4 * $I_L26423_1115) + weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_965, 1, 3 + 4 * $I_L26423_1115) * flux_total_part($l_S112, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_965, 2, 3 + 4 * $I_L26423_1115) + -rho_alb_tile(1 + $I_L26423_965, 1, 3 + 4 * $I_L26423_1115) ) * flux_direct_part($l_S112, n_layer) )
26423.                                                 $l_S112 = list_tile(1 + $I_L26423_965)
26423.                                                 flux_up_blue_tile(1 + $I_L26423_965, 4 + 4 * $I_L26423_1115) = flux_up_blue_tile(1 + $I_L26423_965, 4 + 4 * $I_L26423_1115) + weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_965, 1, 4 + 4 * $I_L26423_1115) * flux_total_part($l_S112, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_965, 2, 4 + 4 * $I_L26423_1115) + -rho_alb_tile(1 + $I_L26423_965, 1, 4 + 4 * $I_L26423_1115) ) * flux_direct_part($l_S112, n_layer) )
26423.                                                 $I_L26423_965 = 1 + $I_L26423_965
26423.                                                 if ( $I_L26423_965 >= n_point_tile ) exit
26423.                                              enddo
26423.                                              $I_L26423_1115 = 1 + $I_L26423_1115
26423.                                              if ( $I_L26423_1115 >= _rsh( n_tile, 2 ) ) exit
26423.                                           enddo
26423.                                           $I_L26423_1037 = and( 0xfffffffffffffffcUL, n_tile )
26423.                                        endif
26423.                                        if ( $I_L26423_1037 < n_tile ) then
26423.                                           $I_L26423_1102 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $I_L26423_965 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                              do
26423.                                                 $l_S112 = list_tile(1 + $I_L26423_965)
26423.                                                 flux_up_blue_tile(1 + $I_L26423_965, $I_L26423_1037 + $I_L26423_1102 + 1) = flux_up_blue_tile(1 + $I_L26423_965, $I_L26423_1037 + $I_L26423_1102 + 1) + weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_965, 1, $I_L26423_1037 + $I_L26423_1102 + 1) * flux_total_part($l_S112, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_965, 2, $I_L26423_1037 + $I_L26423_1102 + 1) + -rho_alb_tile(1 + $I_L26423_965, 1, $I_L26423_1037 + $I_L26423_1102 + 1) ) * flux_direct_part($l_S112, n_layer) )
26423.                                                 $I_L26423_965 = 1 + $I_L26423_965
26423.                                                 if ( $I_L26423_965 >= n_point_tile ) exit
26423.                                              enddo
26423.                                              $I_L26423_1102 = 1 + $I_L26423_1102
26423.                                              if ( $I_L26423_1102 >= n_tile + -$I_L26423_1037 ) exit
26423.                                           enddo
26423.                                        endif
26423.                                     endif
26423.                                  endif
26423.                               endif
26423.                            else if ( isolir == 2 ) then
26423.                               if ( n_tile > 0 ) then
26423.                                  if ( n_point_tile > 0 ) then
26423.                                     $I_L26423_1033 = 0
26423.                                     if ( n_tile >= 4 ) then
26423.                                        $I_L26423_1117 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $I_L26423_961 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $l_S115 = list_tile(1 + $I_L26423_961)
26423.                                              flux_up_tile(1 + $I_L26423_961, 1 + 4 * $I_L26423_1117) = flux_up_tile(1 + $I_L26423_961, 1 + 4 * $I_L26423_1117) + weight_incr * ( planck_flux_tile(1 + $I_L26423_961, 1 + 4 * $I_L26423_1117) + rho_alb_tile(1 + $I_L26423_961, 1, 1 + 4 * $I_L26423_1117) * ( flux_total_part($l_S115, 2 + 2 * n_layer) + planck_flux_air($l_S115) + -planck_flux_tile(1 + $I_L26423_961, 1 + 4 * $I_L26423_1117) ) )
26423.                                              $l_S115 = list_tile(1 + $I_L26423_961)
26423.                                              flux_up_tile(1 + $I_L26423_961, 2 + 4 * $I_L26423_1117) = flux_up_tile(1 + $I_L26423_961, 2 + 4 * $I_L26423_1117) + weight_incr * ( planck_flux_tile(1 + $I_L26423_961, 2 + 4 * $I_L26423_1117) + rho_alb_tile(1 + $I_L26423_961, 1, 2 + 4 * $I_L26423_1117) * ( flux_total_part($l_S115, 2 + 2 * n_layer) + planck_flux_air($l_S115) + -planck_flux_tile(1 + $I_L26423_961, 2 + 4 * $I_L26423_1117) ) )
26423.                                              $l_S115 = list_tile(1 + $I_L26423_961)
26423.                                              flux_up_tile(1 + $I_L26423_961, 3 + 4 * $I_L26423_1117) = flux_up_tile(1 + $I_L26423_961, 3 + 4 * $I_L26423_1117) + weight_incr * ( planck_flux_tile(1 + $I_L26423_961, 3 + 4 * $I_L26423_1117) + rho_alb_tile(1 + $I_L26423_961, 1, 3 + 4 * $I_L26423_1117) * ( flux_total_part($l_S115, 2 + 2 * n_layer) + planck_flux_air($l_S115) + -planck_flux_tile(1 + $I_L26423_961, 3 + 4 * $I_L26423_1117) ) )
26423.                                              $l_S115 = list_tile(1 + $I_L26423_961)
26423.                                              flux_up_tile(1 + $I_L26423_961, 4 + 4 * $I_L26423_1117) = flux_up_tile(1 + $I_L26423_961, 4 + 4 * $I_L26423_1117) + weight_incr * ( planck_flux_tile(1 + $I_L26423_961, 4 + 4 * $I_L26423_1117) + rho_alb_tile(1 + $I_L26423_961, 1, 4 + 4 * $I_L26423_1117) * ( flux_total_part($l_S115, 2 + 2 * n_layer) + planck_flux_air($l_S115) + -planck_flux_tile(1 + $I_L26423_961, 4 + 4 * $I_L26423_1117) ) )
26423.                                              $I_L26423_961 = 1 + $I_L26423_961
26423.                                              if ( $I_L26423_961 >= n_point_tile ) exit
26423.                                           enddo
26423.                                           $I_L26423_1117 = 1 + $I_L26423_1117
26423.                                           if ( $I_L26423_1117 >= _rsh( n_tile, 2 ) ) exit
26423.                                        enddo
26423.                                        $I_L26423_1033 = and( 0xfffffffffffffffcUL, n_tile )
26423.                                     endif
26423.                                     if ( $I_L26423_1033 < n_tile ) then
26423.                                        $I_L26423_1096 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $I_L26423_961 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $l_S115 = list_tile(1 + $I_L26423_961)
26423.                                              flux_up_tile(1 + $I_L26423_961, $I_L26423_1033 + $I_L26423_1096 + 1) = flux_up_tile(1 + $I_L26423_961, $I_L26423_1033 + $I_L26423_1096 + 1) + weight_incr * ( planck_flux_tile(1 + $I_L26423_961, $I_L26423_1033 + $I_L26423_1096 + 1) + rho_alb_tile(1 + $I_L26423_961, 1, $I_L26423_1033 + $I_L26423_1096 + 1) * ( flux_total_part($l_S115, 2 + 2 * n_layer) + planck_flux_air($l_S115) + -planck_flux_tile(1 + $I_L26423_961, $I_L26423_1033 + $I_L26423_1096 + 1) ) )
26423.                                              $I_L26423_961 = 1 + $I_L26423_961
26423.                                              if ( $I_L26423_961 >= n_point_tile ) exit
26423.                                           enddo
26423.                                           $I_L26423_1096 = 1 + $I_L26423_1096
26423.                                           if ( $I_L26423_1096 >= n_tile + -$I_L26423_1033 ) exit
26423.                                        enddo
26423.                                     endif
26423.                                  endif
26423.                               endif
26423.                            endif
26423.                         else
26423.                            if ( i_angular_integration == 3 ) then
26423.                               _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$184,  _substr(t$183,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
26423.                               ierr = 1
26423.                            endif
26423.                         endif
26423.                      else if ( i_angular_integration == 1 ) then
26423.                         goto 50
26423.                         goto 60
26423.                      else if ( i_angular_integration == 2 ) then
26423.    50                   continue
26423.                         if ( isolir == 1 ) then
26423.                            if ( n_tile > 0 ) then
26423.                               if ( n_point_tile > 0 ) then
26423.                                  $I_L26423_1029 = 0
26423.                                  if ( n_tile >= 4 ) then
26423.                                     $I_L26423_1119 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                     do
26423.                                        $I_L26423_957 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $l_S118 = list_tile(1 + $I_L26423_957)
26423.                                           flux_up_tile(1 + $I_L26423_957, 1 + 4 * $I_L26423_1119) = weight_incr * ( rho_alb_tile(1 + $I_L26423_957, 1, 1 + 4 * $I_L26423_1119) * flux_total_part($l_S118, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_957, 2, 1 + 4 * $I_L26423_1119) + -rho_alb_tile(1 + $I_L26423_957, 1, 1 + 4 * $I_L26423_1119) ) * flux_direct_part($l_S118, n_layer) )
26423.                                           $l_S118 = list_tile(1 + $I_L26423_957)
26423.                                           flux_up_tile(1 + $I_L26423_957, 2 + 4 * $I_L26423_1119) = weight_incr * ( rho_alb_tile(1 + $I_L26423_957, 1, 2 + 4 * $I_L26423_1119) * flux_total_part($l_S118, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_957, 2, 2 + 4 * $I_L26423_1119) + -rho_alb_tile(1 + $I_L26423_957, 1, 2 + 4 * $I_L26423_1119) ) * flux_direct_part($l_S118, n_layer) )
26423.                                           $l_S118 = list_tile(1 + $I_L26423_957)
26423.                                           flux_up_tile(1 + $I_L26423_957, 3 + 4 * $I_L26423_1119) = weight_incr * ( rho_alb_tile(1 + $I_L26423_957, 1, 3 + 4 * $I_L26423_1119) * flux_total_part($l_S118, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_957, 2, 3 + 4 * $I_L26423_1119) + -rho_alb_tile(1 + $I_L26423_957, 1, 3 + 4 * $I_L26423_1119) ) * flux_direct_part($l_S118, n_layer) )
26423.                                           $l_S118 = list_tile(1 + $I_L26423_957)
26423.                                           flux_up_tile(1 + $I_L26423_957, 4 + 4 * $I_L26423_1119) = weight_incr * ( rho_alb_tile(1 + $I_L26423_957, 1, 4 + 4 * $I_L26423_1119) * flux_total_part($l_S118, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_957, 2, 4 + 4 * $I_L26423_1119) + -rho_alb_tile(1 + $I_L26423_957, 1, 4 + 4 * $I_L26423_1119) ) * flux_direct_part($l_S118, n_layer) )
26423.                                           $I_L26423_957 = 1 + $I_L26423_957
26423.                                           if ( $I_L26423_957 >= n_point_tile ) exit
26423.                                        enddo
26423.                                        $I_L26423_1119 = 1 + $I_L26423_1119
26423.                                        if ( $I_L26423_1119 >= _rsh( n_tile, 2 ) ) exit
26423.                                     enddo
26423.                                     $I_L26423_1029 = and( 0xfffffffffffffffcUL, n_tile )
26423.                                  endif
26423.                                  if ( $I_L26423_1029 < n_tile ) then
26423.                                     $I_L26423_1090 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                     do
26423.                                        $I_L26423_957 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $l_S118 = list_tile(1 + $I_L26423_957)
26423.                                           flux_up_tile(1 + $I_L26423_957, $I_L26423_1029 + $I_L26423_1090 + 1) = weight_incr * ( rho_alb_tile(1 + $I_L26423_957, 1, $I_L26423_1029 + $I_L26423_1090 + 1) * flux_total_part($l_S118, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_957, 2, $I_L26423_1029 + $I_L26423_1090 + 1) + -rho_alb_tile(1 + $I_L26423_957, 1, $I_L26423_1029 + $I_L26423_1090 + 1) ) * flux_direct_part($l_S118, n_layer) )
26423.                                           $I_L26423_957 = 1 + $I_L26423_957
26423.                                           if ( $I_L26423_957 >= n_point_tile ) exit
26423.                                        enddo
26423.                                        $I_L26423_1090 = 1 + $I_L26423_1090
26423.                                        if ( $I_L26423_1090 >= n_tile + -$I_L26423_1029 ) exit
26423.                                     enddo
26423.                                  endif
26423.                               endif
26423.                            endif
26423.                            if ( l_blue_flux_surf ) then
26423.                               if ( n_tile > 0 ) then
26423.                                  if ( n_point_tile > 0 ) then
26423.                                     $I_L26423_1031 = 0
26423.                                     if ( n_tile >= 4 ) then
26423.                                        $I_L26423_1121 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $I_L26423_959 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $l_S121 = list_tile(1 + $I_L26423_959)
26423.                                              flux_up_blue_tile(1 + $I_L26423_959, 1 + 4 * $I_L26423_1121) = weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_959, 1, 1 + 4 * $I_L26423_1121) * flux_total_part($l_S121, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_959, 2, 1 + 4 * $I_L26423_1121) + -rho_alb_tile(1 + $I_L26423_959, 1, 1 + 4 * $I_L26423_1121) ) * flux_direct_part($l_S121, n_layer) )
26423.                                              $l_S121 = list_tile(1 + $I_L26423_959)
26423.                                              flux_up_blue_tile(1 + $I_L26423_959, 2 + 4 * $I_L26423_1121) = weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_959, 1, 2 + 4 * $I_L26423_1121) * flux_total_part($l_S121, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_959, 2, 2 + 4 * $I_L26423_1121) + -rho_alb_tile(1 + $I_L26423_959, 1, 2 + 4 * $I_L26423_1121) ) * flux_direct_part($l_S121, n_layer) )
26423.                                              $l_S121 = list_tile(1 + $I_L26423_959)
26423.                                              flux_up_blue_tile(1 + $I_L26423_959, 3 + 4 * $I_L26423_1121) = weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_959, 1, 3 + 4 * $I_L26423_1121) * flux_total_part($l_S121, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_959, 2, 3 + 4 * $I_L26423_1121) + -rho_alb_tile(1 + $I_L26423_959, 1, 3 + 4 * $I_L26423_1121) ) * flux_direct_part($l_S121, n_layer) )
26423.                                              $l_S121 = list_tile(1 + $I_L26423_959)
26423.                                              flux_up_blue_tile(1 + $I_L26423_959, 4 + 4 * $I_L26423_1121) = weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_959, 1, 4 + 4 * $I_L26423_1121) * flux_total_part($l_S121, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_959, 2, 4 + 4 * $I_L26423_1121) + -rho_alb_tile(1 + $I_L26423_959, 1, 4 + 4 * $I_L26423_1121) ) * flux_direct_part($l_S121, n_layer) )
26423.                                              $I_L26423_959 = 1 + $I_L26423_959
26423.                                              if ( $I_L26423_959 >= n_point_tile ) exit
26423.                                           enddo
26423.                                           $I_L26423_1121 = 1 + $I_L26423_1121
26423.                                           if ( $I_L26423_1121 >= _rsh( n_tile, 2 ) ) exit
26423.                                        enddo
26423.                                        $I_L26423_1031 = and( 0xfffffffffffffffcUL, n_tile )
26423.                                     endif
26423.                                     if ( $I_L26423_1031 < n_tile ) then
26423.                                        $I_L26423_1093 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $I_L26423_959 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                           do
26423.                                              $l_S121 = list_tile(1 + $I_L26423_959)
26423.                                              flux_up_blue_tile(1 + $I_L26423_959, $I_L26423_1031 + $I_L26423_1093 + 1) = weight_blue_incr * ( rho_alb_tile(1 + $I_L26423_959, 1, $I_L26423_1031 + $I_L26423_1093 + 1) * flux_total_part($l_S121, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L26423_959, 2, $I_L26423_1031 + $I_L26423_1093 + 1) + -rho_alb_tile(1 + $I_L26423_959, 1, $I_L26423_1031 + $I_L26423_1093 + 1) ) * flux_direct_part($l_S121, n_layer) )
26423.                                              $I_L26423_959 = 1 + $I_L26423_959
26423.                                              if ( $I_L26423_959 >= n_point_tile ) exit
26423.                                           enddo
26423.                                           $I_L26423_1093 = 1 + $I_L26423_1093
26423.                                           if ( $I_L26423_1093 >= n_tile + -$I_L26423_1031 ) exit
26423.                                        enddo
26423.                                     endif
26423.                                  endif
26423.                               endif
26423.                            endif
26423.                         else if ( isolir == 2 ) then
26423.                            if ( n_tile > 0 ) then
26423.                               if ( n_point_tile > 0 ) then
26423.                                  $I_L26423_1027 = 0
26423.                                  if ( n_tile >= 4 ) then
26423.                                     $I_L26423_1123 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                     do
26423.                                        $I_L26423_955 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $l_S124 = list_tile(1 + $I_L26423_955)
26423.                                           flux_up_tile(1 + $I_L26423_955, 1 + 4 * $I_L26423_1123) = weight_incr * ( planck_flux_tile(1 + $I_L26423_955, 1 + 4 * $I_L26423_1123) + rho_alb_tile(1 + $I_L26423_955, 1, 1 + 4 * $I_L26423_1123) * ( flux_total_part($l_S124, 2 + 2 * n_layer) + planck_flux_air($l_S124) + -planck_flux_tile(1 + $I_L26423_955, 1 + 4 * $I_L26423_1123) ) )
26423.                                           $l_S124 = list_tile(1 + $I_L26423_955)
26423.                                           flux_up_tile(1 + $I_L26423_955, 2 + 4 * $I_L26423_1123) = weight_incr * ( planck_flux_tile(1 + $I_L26423_955, 2 + 4 * $I_L26423_1123) + rho_alb_tile(1 + $I_L26423_955, 1, 2 + 4 * $I_L26423_1123) * ( flux_total_part($l_S124, 2 + 2 * n_layer) + planck_flux_air($l_S124) + -planck_flux_tile(1 + $I_L26423_955, 2 + 4 * $I_L26423_1123) ) )
26423.                                           $l_S124 = list_tile(1 + $I_L26423_955)
26423.                                           flux_up_tile(1 + $I_L26423_955, 3 + 4 * $I_L26423_1123) = weight_incr * ( planck_flux_tile(1 + $I_L26423_955, 3 + 4 * $I_L26423_1123) + rho_alb_tile(1 + $I_L26423_955, 1, 3 + 4 * $I_L26423_1123) * ( flux_total_part($l_S124, 2 + 2 * n_layer) + planck_flux_air($l_S124) + -planck_flux_tile(1 + $I_L26423_955, 3 + 4 * $I_L26423_1123) ) )
26423.                                           $l_S124 = list_tile(1 + $I_L26423_955)
26423.                                           flux_up_tile(1 + $I_L26423_955, 4 + 4 * $I_L26423_1123) = weight_incr * ( planck_flux_tile(1 + $I_L26423_955, 4 + 4 * $I_L26423_1123) + rho_alb_tile(1 + $I_L26423_955, 1, 4 + 4 * $I_L26423_1123) * ( flux_total_part($l_S124, 2 + 2 * n_layer) + planck_flux_air($l_S124) + -planck_flux_tile(1 + $I_L26423_955, 4 + 4 * $I_L26423_1123) ) )
26423.                                           $I_L26423_955 = 1 + $I_L26423_955
26423.                                           if ( $I_L26423_955 >= n_point_tile ) exit
26423.                                        enddo
26423.                                        $I_L26423_1123 = 1 + $I_L26423_1123
26423.                                        if ( $I_L26423_1123 >= _rsh( n_tile, 2 ) ) exit
26423.                                     enddo
26423.                                     $I_L26423_1027 = and( 0xfffffffffffffffcUL, n_tile )
26423.                                  endif
26423.                                  if ( $I_L26423_1027 < n_tile ) then
26423.                                     $I_L26423_1087 = 0
26423. !dir$ blocking_size( 0, 0 )
26423.                                     do
26423.                                        $I_L26423_955 = 0
26423. !dir$ ivdep
26423. !dir$ blocking_size( 0, 0 )
26423.                                        do
26423.                                           $l_S124 = list_tile(1 + $I_L26423_955)
26423.                                           flux_up_tile(1 + $I_L26423_955, $I_L26423_1027 + $I_L26423_1087 + 1) = weight_incr * ( planck_flux_tile(1 + $I_L26423_955, $I_L26423_1027 + $I_L26423_1087 + 1) + rho_alb_tile(1 + $I_L26423_955, 1, $I_L26423_1027 + $I_L26423_1087 + 1) * ( flux_total_part($l_S124, 2 + 2 * n_layer) + planck_flux_air($l_S124) + -planck_flux_tile(1 + $I_L26423_955, $I_L26423_1027 + $I_L26423_1087 + 1) ) )
26423.                                           $I_L26423_955 = 1 + $I_L26423_955
26423.                                           if ( $I_L26423_955 >= n_point_tile ) exit
26423.                                        enddo
26423.                                        $I_L26423_1087 = 1 + $I_L26423_1087
26423.                                        if ( $I_L26423_1087 >= n_tile + -$I_L26423_1027 ) exit
26423.                                     enddo
26423.                                  endif
26423.                               endif
26423.                            endif
26423.                         endif
26423.                         goto 60
26423.                      else if ( i_angular_integration == 3 ) then
26423.                         _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$186,  _substr(t$185,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
26423.                         ierr = 1
26423.                      else
26423.    60                   continue
26423.                         l_initial = .false.
26423.                      endif
26423.                      planck_flux_band(1, n_layer) = _copyout( planck_flux_air )
26439.                      if ( ierr /= 0 ) then
25357.                         _free( t$3511 )
25357.                         goto 100
25357.                      endif
26444.                      l_initial = .false.
26446.                      $I_L26197_1085 = 1 + $I_L26197_1085
26440.                   else
26440.                   endif
26440.                else
26440.                endif
26440.                if ( $I_L26197_1085 >= $t_S75 ) exit
26440.             enddo
26440.             goto 70
26440.          else
26440.    70       continue
25357.             _free( t$3511 )
25357.          endif
25357.       endif
25357.   100 continue
26451.       return
26451.       end
26451.       
27196.       
27196.       subroutine solve_band_one_gas( ierr, n_profile, n_layer, i_top, p, t, d_mass, i_angular_integration, i_2stream, n_order_phase, l_rescale, n_order_gauss, ms_min, ms_max, i_truncation, ls_local_trunc, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, i_scatter_method, i_solver, i_band, i_gas, i_band_esft, i_scale_esft, i_scale_fnc, k_esft, w_esft, scale_vector, p_reference, t_reference, gas_mix_ratio, gas_frac_rescaled, l_doppler, doppler_correction, isolir, zen_0, zen_00, solar_irrad, planck_flux_top, planck_flux_bottom, diff_planck_band, l_ir_source_quad, diff_planck_band_2, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, planck_flux_ground, l_tile, n_point_tile, n_tile, list_tile, rho_alb_tile, planck_flux_tile, ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud, n_region, k_clr, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, weight_band, l_initial, flux_direct, flux_down, flux_up, i_direct, radiance, photolysis, l_clear, i_solver_clear, flux_direct_clear, flux_down_clear, flux_up_clear, flux_up_tile, flux_up_blue_tile, l_blue_flux_surf, weight_blue, flux_direct_blue_surf, flux_down_blue_surf, flux_up_blue_surf, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_band, nd_species, nd_esft_term, nd_scale_variable, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff, nd_point_tile, nd_tile )
26470.       t$1104 = nd_profile
26470.       t$1105 = nd_layer
26634.       t$3589 = _zla( 0, nd_profile )
26470.       t$3590 = _zla( 0, nd_profile )
26634.       t$3591 = _zla( 0, nd_layer )
26470.       t$3592 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
26470.       t$1106 = nd_max_order
26470.       t$3593 = 1 + nd_max_order
26660.       t$3594 = _zla( 0, 1 + nd_max_order )
26470.       t$1107 = nd_sph_coeff
26670.       t$3595 = _zla( 0, nd_sph_coeff )
26470.       t$1108 = nd_radiance_profile
26674.       t$3596 = _zla( 0, nd_radiance_profile )
26470.       t$3597 = _zla( 0, nd_radiance_profile )
26470.       t$3598 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_radiance_profile )
26470.       t$1109 = nd_band
26470.       t$1110 = nd_species
26703.       t$3599 = _zla( 0, nd_band )
26470.       t$3600 = _zla( 0, nd_band )
26703.       t$3601 = _zla( 0, nd_species )
26470.       t$3602 = _zla( 0, nd_band ) * _zla( 0, nd_species )
26470.       t$1111 = nd_esft_term
26713.       t$3603 = _zla( 0, nd_esft_term )
26470.       t$3604 = _zla( 0, nd_esft_term )
26470.       t$3605 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term )
26470.       t$3606 = _zla( 0, nd_band ) * _zla( 0, nd_species ) * _zla( 0, nd_esft_term )
26470.       t$1112 = nd_scale_variable
26717.       t$3607 = _zla( 0, nd_scale_variable )
26470.       t$3608 = _zla( 0, nd_scale_variable )
26470.       t$3609 = _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
26470.       t$3610 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
26470.       t$3611 = _zla( 0, nd_band ) * _zla( 0, nd_species ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
26470.       t$3612 = _zla( 0, nd_species )
26470.       t$3613 = _zla( 0, nd_band ) * _zla( 0, nd_species )
26470.       t$3614 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
26470.       t$3615 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species )
26470.       t$1113 = nd_brdf_basis_fnc
26770.       t$3616 = _zla( 0, nd_brdf_basis_fnc )
26470.       t$3617 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
26470.       t$1114 = nd_brdf_trunc / 2
26470.       t$1115 = nd_brdf_trunc
26470.       t$3618 = _zla( 0, nd_brdf_basis_fnc )
26470.       t$3619 = 1 + nd_brdf_trunc / 2
26772.       t$3620 = _zla( 0, 1 + nd_brdf_trunc / 2 )
26470.       t$3621 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
26470.       t$3622 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
26470.       t$3623 = 1 + nd_brdf_trunc
26772.       t$3624 = _zla( 0, 1 + nd_brdf_trunc )
26470.       t$3625 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
26470.       t$1116 = nd_direction
26470.       t$3626 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
26775.       t$3627 = _zla( 0, nd_direction )
26470.       t$3628 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
26470.       t$1117 = nd_point_tile
26791.       t$3629 = _zla( 0, nd_point_tile )
26470.       t$1118 = nd_tile
26470.       t$3630 = _zla( 0, nd_point_tile )
26470.       t$3631 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile )
26794.       t$3632 = _zla( 0, nd_tile )
26470.       t$3633 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
26470.       t$3634 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2600.       if ( t$30 == 0 ) then
 2600.          t$3640(1) = 4
 2600.          t$3641(1) = 0
 2600.          t$3642(1) = 16
 2600.          t$3637(1) = int( loc( t$29 ), 8 )
 2600.          t$3638(1) = 0
 2600.          t$3639(1) = int( loc( t$3635 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$3637(1), t$3640(1), 1, t$3638(1), t$3639(1), t$3641(1), t$3642(1) )
 2600.       endif
26470.       t$1121 = id_ct
26470.       t$1119 = nd_cloud_type
26470.       t$3644 = nd_layer + -id_ct + 1
26840.       t$3645 = max( 0, nd_layer + -id_ct + 1 )
26470.       t$3646 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
26840.       t$3647 = max( 0, nd_cloud_type )
26470.       t$3648 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
26470.       t$1124 = nd_region
26846.       t$3649 = max( 0, nd_region )
26470.       t$3650 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
26470.       t$3651 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
26470.       t$1122 = ( -1 + id_ct )
26470.       t$1123 = nd_overlap_coeff
26470.       t$3652 = nd_layer + -id_ct + 2
26842.       t$3653 = max( 0, nd_layer + -id_ct + 2 )
26470.       t$3654 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
26842.       t$3655 = max( 0, nd_overlap_coeff )
26470.       t$3656 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
26470.       t$1120 = nd_column
26829.       t$3657 = max( 0, nd_column )
26470.       t$3658 = _zla( 0, nd_profile ) * max( 0, nd_column )
26470.       t$1125 = nd_viewing_level
26871.       t$3659 = max( 0, nd_viewing_level )
26470.       t$3660 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
26470.       t$3661 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
26470.       t$1126 = nd_flux_profile
26887.       t$3662 = max( 0, nd_flux_profile )
26470.       t$3663 = max( 0, nd_flux_profile )
26470.       t$3664 = 1 + nd_layer
26887.       t$3665 = max( 0, 1 + nd_layer )
26470.       t$3666 = max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer )
26470.       t$3667 = _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer )
26470.       t$3668 = _zla( 0, nd_radiance_profile ) * max( 0, nd_viewing_level )
26470.       t$3669 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level )
26470.       t$1127 = nd_j_profile
26904.       t$3670 = max( 0, nd_j_profile )
26470.       t$3671 = max( 0, nd_j_profile )
26470.       t$3672 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
26470.       t$3673 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer )
26965.       t$3676 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
26959.       t$3677 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
26959.       t$3679 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
26974.       t$3680 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
26974.       t$3682 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8
26970.       t$3683 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
26970.       t$3685 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
26961.       t$3686 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
26961.       t$3688 = 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
26963.       t$3689 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26963.       t$3691 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26470.       t$1128 = ( 2 + 2 * nd_layer )
26976.       t$3692 = max( 0, ( 2 + 2 * nd_layer ) )
26470.       t$3693 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
26976.       t$3694 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26976.       t$3696 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26972.       t$3697 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26972.       t$3699 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26979.       t$3700 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26979.       t$3702 = _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26950.       t$3704 = 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26955.       t$3705 = 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26955.       t$3707 = 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26957.       t$3708 = 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26957.       t$3710 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26985.       t$3711 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26985.       t$3713 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26981.       t$3714 = 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26981.       t$3716 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26470.       t$3674 = int( _alloc( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
26965.       t$3675 = t$3674
26959.       t$3678 = t$3674 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
26974.       t$3681 = t$3674 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
26970.       t$3684 = t$3674 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
26961.       t$3687 = t$3674 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
26963.       t$3690 = t$3674 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26976.       t$3695 = t$3674 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26972.       t$3698 = t$3674 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26979.       t$3701 = t$3674 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26950.       t$3703 = t$3674 + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26955.       t$3706 = t$3674 + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26957.       t$3709 = t$3674 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26985.       t$3712 = t$3674 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
26981.       t$3715 = t$3674 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27002.       $t_S0 = i_band_esft(i_band, i_gas)
27002.       if ( $t_S0 > 0 ) then
27005.          $SC_i_scale_esft_I0 = i_scale_esft(i_band, i_gas)
27002.          $I_L27002_268 = 0
27002.          do
27005.             if ( $SC_i_scale_esft_I0 == 2 ) then
27006.                t$955 = nd_profile
27006.                t$956 = nd_layer
27006.                t$3219 = max( 0, nd_profile )
27006.                t$3220 = nd_profile
27006.                t$3221 = max( 0, nd_layer )
27006.                t$3222 = ( nd_profile * nd_layer )
27006.                t$957 = nd_scale_variable
27006.                t$3223 = max( 0, nd_scale_variable )
27006.                if ( l_doppler(i_gas) ) then
27006.                   $pressure_offset_S4 = doppler_correction(i_gas)
27006.                else
27006.                   $pressure_offset_S4 = 0.0
27006.                endif
27006.                if ( i_scale_fnc(i_band, i_gas) == 1 ) then
27006.                   if ( nd_layer > 0 ) then
27006.                      if ( nd_profile > 0 ) then
27006.                         $SC_scale_vector_I4 = scale_vector(1, 1 + $I_L27002_268, i_band, i_gas)
27006.                         $SC_scale_vector_I2 = scale_vector(2, 1 + $I_L27002_268, i_band, i_gas)
27006.                         $SC_p_reference_I3 = p_reference(i_gas, i_band)
27006.                         $SC_t_reference_I1 = t_reference(i_gas, i_band)
27006.                         $I_L27006_250 = 0
27006.                         do
27006.                            $I_L27006_220 = 0
27006. !dir$ ivdep
27006.                            do
27006.                               gas_frac_rescaled(1 + $I_L27006_220, 1 + $I_L27006_250, i_gas) = _expn( $SC_scale_vector_I4 * log( ( ( p(1 + $I_L27006_220, 1 + $I_L27006_250) + $pressure_offset_S4 ) * 1.0/( $SC_p_reference_I3 + $pressure_offset_S4 ) ) ) + $SC_scale_vector_I2 * log( ( t(1 + $I_L27006_220, 1 + $I_L27006_250) * 1.0/$SC_t_reference_I1 ) ) )
27006.                               $I_L27006_220 = 1 + $I_L27006_220
27006.                               if ( $I_L27006_220 >= nd_profile ) exit
27006.                            enddo
27006.                            $I_L27006_250 = 1 + $I_L27006_250
27006.                            if ( $I_L27006_250 >= nd_layer ) exit
27006.                         enddo
27006.                      endif
27006.                   endif
27006.                   goto 10
27006.                else if ( i_scale_fnc(i_band, i_gas) /= 0 ) then
27006.                   if ( i_scale_fnc(i_band, i_gas) == 2 ) then
27006.                      if ( nd_layer > 0 ) then
27006.                         if ( nd_profile > 0 ) then
27006.                            $SC_scale_vector_I5 = scale_vector(3, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_scale_vector_I4 = scale_vector(1, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_scale_vector_I2 = scale_vector(2, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_p_reference_I3 = p_reference(i_gas, i_band)
27006.                            $SC_t_reference_I1 = t_reference(i_gas, i_band)
27006.                            $I_L27006_248 = 0
27006.                            do
27006.                               $I_L27006_218 = 0
27006. !dir$ ivdep
27006.                               do
27006.                                  gas_frac_rescaled(1 + $I_L27006_218, 1 + $I_L27006_248, i_gas) = _expn( $SC_scale_vector_I4 * log( ( ( p(1 + $I_L27006_218, 1 + $I_L27006_248) + $pressure_offset_S4 ) * 1.0/( $SC_p_reference_I3 + $pressure_offset_S4 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L27006_218, 1 + $I_L27006_248) * 1.0/$SC_t_reference_I1 ) ) * ( -1.0 + ( t(1 + $I_L27006_218, 1 + $I_L27006_248) * 1.0/$SC_t_reference_I1 ) ) * $SC_scale_vector_I5 + $SC_scale_vector_I2 * ( -1.0 + ( t(1 + $I_L27006_218, 1 + $I_L27006_248) * 1.0/$SC_t_reference_I1 ) ) + 1.0 )
27006.                                  $I_L27006_218 = 1 + $I_L27006_218
27006.                                  if ( $I_L27006_218 >= nd_profile ) exit
27006.                               enddo
27006.                               $I_L27006_248 = 1 + $I_L27006_248
27006.                               if ( $I_L27006_248 >= nd_layer ) exit
27006.                            enddo
27006.                         endif
27006.                      endif
27006.                      goto 10
27006.                   else if ( i_scale_fnc(i_band, i_gas) == 3 ) then
27006.                      if ( nd_layer > 0 ) then
27006.                         if ( nd_profile > 0 ) then
27006.                            $SC_scale_vector_I6 = scale_vector(4, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_scale_vector_I5 = scale_vector(3, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_scale_vector_I4 = scale_vector(1, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_scale_vector_I2 = scale_vector(2, 1 + $I_L27002_268, i_band, i_gas)
27006.                            $SC_p_reference_I3 = p_reference(i_gas, i_band)
27006.                            $SC_t_reference_I1 = t_reference(i_gas, i_band)
27006.                            $I_L27006_246 = 0
27006.                            do
27006.                               $I_L27006_216 = 0
27006. !dir$ ivdep
27006.                               do
27006.                                  gas_frac_rescaled(1 + $I_L27006_216, 1 + $I_L27006_246, i_gas) = _expn( $SC_scale_vector_I4 * log( ( ( p(1 + $I_L27006_216, 1 + $I_L27006_246) + $SC_scale_vector_I2 ) * 1.0/( $SC_p_reference_I3 + $SC_scale_vector_I2 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L27006_216, 1 + $I_L27006_246) * 1.0/$SC_t_reference_I1 ) ) * ( -1.0 + ( t(1 + $I_L27006_216, 1 + $I_L27006_246) * 1.0/$SC_t_reference_I1 ) ) * $SC_scale_vector_I6 + $SC_scale_vector_I5 * ( -1.0 + ( t(1 + $I_L27006_216, 1 + $I_L27006_246) * 1.0/$SC_t_reference_I1 ) ) + 1.0 )
27006.                                  $I_L27006_216 = 1 + $I_L27006_216
27006.                                  if ( $I_L27006_216 >= nd_profile ) exit
27006.                               enddo
27006.                               $I_L27006_246 = 1 + $I_L27006_246
27006.                               if ( $I_L27006_246 >= nd_layer ) exit
27006.                            enddo
27006.                         endif
27006.                      endif
27006.    10                continue
27006.                      if ( nd_layer > 0 ) then
27006.                         if ( nd_profile > 0 ) then
27006.                            $I_L27006_252 = 0
27006.                            do
27006.                               $I_L27006_222 = 0
27006. !dir$ ivdep
27006.                               do
27006.                                  gas_frac_rescaled(1 + $I_L27006_222, 1 + $I_L27006_252, i_gas) = max( 0.0, gas_frac_rescaled(1 + $I_L27006_222, 1 + $I_L27006_252, i_gas) * gas_mix_ratio(1 + $I_L27006_222, 1 + $I_L27006_252, i_gas) )
27006.                                  $I_L27006_222 = 1 + $I_L27006_222
27006.                                  if ( $I_L27006_222 >= nd_profile ) exit
27006.                               enddo
27006.                               $I_L27006_252 = 1 + $I_L27006_252
27006.                               if ( $I_L27006_252 >= nd_layer ) exit
27006.                            enddo
27006.                         endif
27006.                      endif
27006.                   else
27006.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
27006.                      ierr = 1
27006.                   endif
27006.                endif
27018.                if ( ierr /= 0 ) then
26470.                   _free( t$3674 )
26470.                   goto 50
26470.                endif
27024.                if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
27027.                   if ( isolir == 1 ) then
27029.                      if ( n_profile > 0 ) then
27029.                         $I_L27029_224 = 0
27029. !dir$ ivdep
27029.                         do
27030.                            d_planck_flux_surface(1 + $I_L27029_224) = 0.0
27031.                            flux_inc_down(1 + $I_L27029_224) = ( solar_irrad(1 + $I_L27029_224) * 1.0/zen_0(1 + $I_L27029_224) )
27032.                            flux_inc_direct(1 + $I_L27029_224) = ( solar_irrad(1 + $I_L27029_224) * 1.0/zen_0(1 + $I_L27029_224) )
27033.                            $I_L27029_224 = 1 + $I_L27029_224
27029.                            if ( $I_L27029_224 >= n_profile ) exit
27029.                         enddo
27029.                      endif
27034.                   else if ( isolir == 2 ) then
27036.                      if ( n_profile > 0 ) then
27036.                         $I_L27036_226 = 0
27036. !dir$ ivdep
27036.                         do
27037.                            flux_inc_direct(1 + $I_L27036_226) = 0.0
27038.                            flux_inc_down(1 + $I_L27036_226) = -planck_flux_top(1 + $I_L27036_226)
27039.                            d_planck_flux_surface(1 + $I_L27036_226) = ( 1.0 + -rho_alb(1 + $I_L27036_226, 1) ) * ( planck_flux_ground(1 + $I_L27036_226) + -planck_flux_bottom(1 + $I_L27036_226) )
27042.                            $I_L27036_226 = 1 + $I_L27036_226
27036.                            if ( $I_L27036_226 >= n_profile ) exit
27036.                         enddo
27036.                      endif
27036.                   endif
27036.                else
27045.                   if ( i_angular_integration == 3 ) then
27047.                      if ( isolir == 1 ) then
27048.                         if ( n_profile > 0 ) then
27048.                            $I_L27048_228 = 0
27048. !dir$ ivdep
27048.                            do
27049.                               i_direct_part(1 + $I_L27048_228, 0) = solar_irrad(1 + $I_L27048_228)
27050.                               flux_inc_down(1 + $I_L27048_228) = 0.0
27051.                               $I_L27048_228 = 1 + $I_L27048_228
27048.                               if ( $I_L27048_228 >= n_profile ) exit
27048.                            enddo
27048.                         endif
27052.                      else if ( n_profile > 0 ) then
27053.                         $I_L27053_230 = 0
27053. !dir$ ivdep
27053.                         do
27054.                            flux_inc_down(1 + $I_L27053_230) = -planck_flux_top(1 + $I_L27053_230)
27055.                            d_planck_flux_surface(1 + $I_L27053_230) = planck_flux_ground(1 + $I_L27053_230) + -planck_flux_bottom(1 + $I_L27053_230)
27057.                            $I_L27053_230 = 1 + $I_L27053_230
27053.                            if ( $I_L27053_230 >= n_profile ) exit
27053.                         enddo
27053.                      endif
27053.                   endif
27053.                endif
27063.                k_esft_mono(i_gas) = k_esft(1 + $I_L27002_268, i_band, i_gas)
27065.                t$407 = nd_species
27065.                t$2332 = max( 0, nd_species )
27065.                t$408 = nd_profile
27065.                t$409 = nd_layer
27065.                t$2333 = max( 0, nd_profile )
27065.                t$2334 = nd_profile
27065.                t$2335 = max( 0, nd_layer )
27065.                t$2336 = nd_layer * nd_profile
27065.                t$2337 = ( nd_profile * nd_layer * nd_species )
27065.                t$2338 = ( nd_profile * nd_layer )
27065.                if ( nd_layer > 0 ) then
27065.                   if ( nd_profile > 0 ) then
27065.                      $SC_k_esft_mono_I7 = k_esft_mono(i_gas)
27065.                      $I_L27065_254 = 0
27065.                      do
27065.                         $I_L27065_232 = 0
27065. !dir$ ivdep
27065.                         do
27065.                            k_gas_abs(1 + $I_L27065_232, 1 + $I_L27065_254) = $SC_k_esft_mono_I7 * gas_frac_rescaled(1 + $I_L27065_232, 1 + $I_L27065_254, i_gas)
27065.                            $I_L27065_232 = 1 + $I_L27065_232
27065.                            if ( $I_L27065_232 >= nd_profile ) exit
27065.                         enddo
27065.                         $I_L27065_254 = 1 + $I_L27065_254
27065.                         if ( $I_L27065_254 >= nd_layer ) exit
27065.                      enddo
27065.                   endif
27065.                endif
27073.                ipa$21103 = .false.
27073.                call monochromatic_radiance( ierr, n_profile, n_layer, d_mass(1, 1), i_angular_integration, i_2stream, l_rescale, n_order_gauss, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), i_scatter_method, i_solver, k_gas_abs(1, 1), ipa$21103, dummy_ke(1, 1), isolir, diff_planck_band(1, 1), l_ir_source_quad, diff_planck_band_2(1, 1), zen_0(1), zen_00(1, 1), flux_inc_direct(1), flux_inc_down(1), i_direct_part(1, 0), d_planck_flux_surface(1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, k_clr, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct_part(1, 0), flux_total_part(1, 1), radiance_part(1, 1, 1), photolysis_part(1, 1), l_clear, i_solver_clear, flux_direct_clear_part(1, 0), flux_total_clear_part(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff )
27136.                if ( ierr /= 0 ) then
26470.                   _free( t$3674 )
26470.                   goto 50
26470.                endif
27143.                weight_incr = weight_band * w_esft(1 + $I_L27002_268, i_band, i_gas)
27144.                if ( l_blue_flux_surf ) then
27145.                   weight_blue_incr = weight_blue * w_esft(1 + $I_L27002_268, i_band, i_gas)
27145.                endif
27146.                call augment_radiance( n_profile, n_layer, i_angular_integration, i_sph_mode, n_viewing_level, n_direction, isolir, l_clear, l_initial, weight_incr, l_blue_flux_surf, weight_blue_incr, flux_direct(1, 0), flux_down(1, 0), flux_up(1, 0), flux_direct_blue_surf(1), flux_down_blue_surf(1), flux_up_blue_surf(1), i_direct(1, 0), radiance(1, 1, 1), photolysis(1, 1), flux_direct_clear(1, 0), flux_down_clear(1, 0), flux_up_clear(1, 0), flux_direct_part(1, 0), flux_total_part(1, 1), i_direct_part(1, 0), radiance_part(1, 1, 1), photolysis_part(1, 1), flux_direct_clear_part(1, 0), flux_total_clear_part(1, 1), nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_layer, nd_viewing_level, nd_direction )
27167.                if ( l_tile ) then
27168.                   ipa$23241 = loc( flux_direct_part(1, n_layer) )
27168.                   flux_direct_incr = _copyin( flux_direct_part(1, n_layer) )
27168.                   ipa$23243 = loc( flux_total_part(1, 2 + 2 * n_layer) )
27168.                   flux_down_incr = _copyin( flux_total_part(1, 2 + 2 * n_layer) )
27168.                   t$179 = nd_point_tile
27168.                   t$1683 = max( 0, nd_point_tile )
27168.                   t$180 = nd_brdf_basis_fnc
27168.                   t$181 = nd_tile
27168.                   t$1684 = nd_point_tile
27168.                   t$1685 = max( 0, nd_brdf_basis_fnc )
27168.                   t$1686 = nd_brdf_basis_fnc * nd_point_tile
27168.                   t$1687 = max( 0, nd_tile )
27168.                   t$1688 = ( nd_brdf_basis_fnc * nd_point_tile * nd_tile )
27168.                   t$1689 = ( nd_point_tile * nd_tile )
27168.                   t$182 = nd_flux_profile
27168.                   t$1690 = max( 0, nd_flux_profile )
27168.                   if ( l_initial == 0 ) then
27168.                      if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
27168.                         if ( isolir == 1 ) then
27168.                            if ( n_tile > 0 ) then
27168.                               if ( n_point_tile > 0 ) then
27168.                                  $I_L27168_264 = 0
27168.                                  if ( n_tile >= 4 ) then
27168.                                     $I_L27168_288 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $I_L27168_242 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $l_S18 = list_tile(1 + $I_L27168_242)
27168.                                           flux_up_tile(1 + $I_L27168_242, 1 + 4 * $I_L27168_288) = flux_up_tile(1 + $I_L27168_242, 1 + 4 * $I_L27168_288) + weight_incr * ( rho_alb_tile(1 + $I_L27168_242, 1, 1 + 4 * $I_L27168_288) * flux_down_incr($l_S18) + ( rho_alb_tile(1 + $I_L27168_242, 2, 1 + 4 * $I_L27168_288) + -rho_alb_tile(1 + $I_L27168_242, 1, 1 + 4 * $I_L27168_288) ) * flux_direct_incr($l_S18) )
27168.                                           $l_S18 = list_tile(1 + $I_L27168_242)
27168.                                           flux_up_tile(1 + $I_L27168_242, 2 + 4 * $I_L27168_288) = flux_up_tile(1 + $I_L27168_242, 2 + 4 * $I_L27168_288) + weight_incr * ( rho_alb_tile(1 + $I_L27168_242, 1, 2 + 4 * $I_L27168_288) * flux_down_incr($l_S18) + ( rho_alb_tile(1 + $I_L27168_242, 2, 2 + 4 * $I_L27168_288) + -rho_alb_tile(1 + $I_L27168_242, 1, 2 + 4 * $I_L27168_288) ) * flux_direct_incr($l_S18) )
27168.                                           $l_S18 = list_tile(1 + $I_L27168_242)
27168.                                           flux_up_tile(1 + $I_L27168_242, 3 + 4 * $I_L27168_288) = flux_up_tile(1 + $I_L27168_242, 3 + 4 * $I_L27168_288) + weight_incr * ( rho_alb_tile(1 + $I_L27168_242, 1, 3 + 4 * $I_L27168_288) * flux_down_incr($l_S18) + ( rho_alb_tile(1 + $I_L27168_242, 2, 3 + 4 * $I_L27168_288) + -rho_alb_tile(1 + $I_L27168_242, 1, 3 + 4 * $I_L27168_288) ) * flux_direct_incr($l_S18) )
27168.                                           $l_S18 = list_tile(1 + $I_L27168_242)
27168.                                           flux_up_tile(1 + $I_L27168_242, 4 + 4 * $I_L27168_288) = flux_up_tile(1 + $I_L27168_242, 4 + 4 * $I_L27168_288) + weight_incr * ( rho_alb_tile(1 + $I_L27168_242, 1, 4 + 4 * $I_L27168_288) * flux_down_incr($l_S18) + ( rho_alb_tile(1 + $I_L27168_242, 2, 4 + 4 * $I_L27168_288) + -rho_alb_tile(1 + $I_L27168_242, 1, 4 + 4 * $I_L27168_288) ) * flux_direct_incr($l_S18) )
27168.                                           $I_L27168_242 = 1 + $I_L27168_242
27168.                                           if ( $I_L27168_242 >= n_point_tile ) exit
27168.                                        enddo
27168.                                        $I_L27168_288 = 1 + $I_L27168_288
27168.                                        if ( $I_L27168_288 >= _rsh( n_tile, 2 ) ) exit
27168.                                     enddo
27168.                                     $I_L27168_264 = and( 0xfffffffffffffffcUL, n_tile )
27168.                                  endif
27168.                                  if ( $I_L27168_264 < n_tile ) then
27168.                                     $I_L27168_282 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $I_L27168_242 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $l_S18 = list_tile(1 + $I_L27168_242)
27168.                                           flux_up_tile(1 + $I_L27168_242, $I_L27168_264 + $I_L27168_282 + 1) = flux_up_tile(1 + $I_L27168_242, $I_L27168_264 + $I_L27168_282 + 1) + weight_incr * ( rho_alb_tile(1 + $I_L27168_242, 1, $I_L27168_264 + $I_L27168_282 + 1) * flux_down_incr($l_S18) + ( rho_alb_tile(1 + $I_L27168_242, 2, $I_L27168_264 + $I_L27168_282 + 1) + -rho_alb_tile(1 + $I_L27168_242, 1, $I_L27168_264 + $I_L27168_282 + 1) ) * flux_direct_incr($l_S18) )
27168.                                           $I_L27168_242 = 1 + $I_L27168_242
27168.                                           if ( $I_L27168_242 >= n_point_tile ) exit
27168.                                        enddo
27168.                                        $I_L27168_282 = 1 + $I_L27168_282
27168.                                        if ( $I_L27168_282 >= n_tile + -$I_L27168_264 ) exit
27168.                                     enddo
27168.                                  endif
27168.                               endif
27168.                            endif
27168.                            if ( l_blue_flux_surf ) then
27168.                               if ( n_tile > 0 ) then
27168.                                  if ( n_point_tile > 0 ) then
27168.                                     $I_L27168_266 = 0
27168.                                     if ( n_tile >= 4 ) then
27168.                                        $I_L27168_290 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $I_L27168_244 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                           do
27168.                                              $l_S21 = list_tile(1 + $I_L27168_244)
27168.                                              flux_up_blue_tile(1 + $I_L27168_244, 1 + 4 * $I_L27168_290) = flux_up_blue_tile(1 + $I_L27168_244, 1 + 4 * $I_L27168_290) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_244, 1, 1 + 4 * $I_L27168_290) * flux_down_incr($l_S21) + ( rho_alb_tile(1 + $I_L27168_244, 2, 1 + 4 * $I_L27168_290) + -rho_alb_tile(1 + $I_L27168_244, 1, 1 + 4 * $I_L27168_290) ) * flux_direct_incr($l_S21) )
27168.                                              $l_S21 = list_tile(1 + $I_L27168_244)
27168.                                              flux_up_blue_tile(1 + $I_L27168_244, 2 + 4 * $I_L27168_290) = flux_up_blue_tile(1 + $I_L27168_244, 2 + 4 * $I_L27168_290) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_244, 1, 2 + 4 * $I_L27168_290) * flux_down_incr($l_S21) + ( rho_alb_tile(1 + $I_L27168_244, 2, 2 + 4 * $I_L27168_290) + -rho_alb_tile(1 + $I_L27168_244, 1, 2 + 4 * $I_L27168_290) ) * flux_direct_incr($l_S21) )
27168.                                              $l_S21 = list_tile(1 + $I_L27168_244)
27168.                                              flux_up_blue_tile(1 + $I_L27168_244, 3 + 4 * $I_L27168_290) = flux_up_blue_tile(1 + $I_L27168_244, 3 + 4 * $I_L27168_290) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_244, 1, 3 + 4 * $I_L27168_290) * flux_down_incr($l_S21) + ( rho_alb_tile(1 + $I_L27168_244, 2, 3 + 4 * $I_L27168_290) + -rho_alb_tile(1 + $I_L27168_244, 1, 3 + 4 * $I_L27168_290) ) * flux_direct_incr($l_S21) )
27168.                                              $l_S21 = list_tile(1 + $I_L27168_244)
27168.                                              flux_up_blue_tile(1 + $I_L27168_244, 4 + 4 * $I_L27168_290) = flux_up_blue_tile(1 + $I_L27168_244, 4 + 4 * $I_L27168_290) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_244, 1, 4 + 4 * $I_L27168_290) * flux_down_incr($l_S21) + ( rho_alb_tile(1 + $I_L27168_244, 2, 4 + 4 * $I_L27168_290) + -rho_alb_tile(1 + $I_L27168_244, 1, 4 + 4 * $I_L27168_290) ) * flux_direct_incr($l_S21) )
27168.                                              $I_L27168_244 = 1 + $I_L27168_244
27168.                                              if ( $I_L27168_244 >= n_point_tile ) exit
27168.                                           enddo
27168.                                           $I_L27168_290 = 1 + $I_L27168_290
27168.                                           if ( $I_L27168_290 >= _rsh( n_tile, 2 ) ) exit
27168.                                        enddo
27168.                                        $I_L27168_266 = and( 0xfffffffffffffffcUL, n_tile )
27168.                                     endif
27168.                                     if ( $I_L27168_266 < n_tile ) then
27168.                                        $I_L27168_285 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $I_L27168_244 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                           do
27168.                                              $l_S21 = list_tile(1 + $I_L27168_244)
27168.                                              flux_up_blue_tile(1 + $I_L27168_244, $I_L27168_266 + $I_L27168_285 + 1) = flux_up_blue_tile(1 + $I_L27168_244, $I_L27168_266 + $I_L27168_285 + 1) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_244, 1, $I_L27168_266 + $I_L27168_285 + 1) * flux_down_incr($l_S21) + ( rho_alb_tile(1 + $I_L27168_244, 2, $I_L27168_266 + $I_L27168_285 + 1) + -rho_alb_tile(1 + $I_L27168_244, 1, $I_L27168_266 + $I_L27168_285 + 1) ) * flux_direct_incr($l_S21) )
27168.                                              $I_L27168_244 = 1 + $I_L27168_244
27168.                                              if ( $I_L27168_244 >= n_point_tile ) exit
27168.                                           enddo
27168.                                           $I_L27168_285 = 1 + $I_L27168_285
27168.                                           if ( $I_L27168_285 >= n_tile + -$I_L27168_266 ) exit
27168.                                        enddo
27168.                                     endif
27168.                                  endif
27168.                               endif
27168.                            endif
27168.                         else if ( isolir == 2 ) then
27168.                            if ( n_tile > 0 ) then
27168.                               if ( n_point_tile > 0 ) then
27168.                                  $I_L27168_262 = 0
27168.                                  if ( n_tile >= 4 ) then
27168.                                     $I_L27168_292 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $I_L27168_240 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $l_S24 = list_tile(1 + $I_L27168_240)
27168.                                           flux_up_tile(1 + $I_L27168_240, 1 + 4 * $I_L27168_292) = flux_up_tile(1 + $I_L27168_240, 1 + 4 * $I_L27168_292) + weight_incr * ( planck_flux_tile(1 + $I_L27168_240, 1 + 4 * $I_L27168_292) + rho_alb_tile(1 + $I_L27168_240, 1, 1 + 4 * $I_L27168_292) * ( flux_down_incr($l_S24) + planck_flux_bottom($l_S24) + -planck_flux_tile(1 + $I_L27168_240, 1 + 4 * $I_L27168_292) ) )
27168.                                           $l_S24 = list_tile(1 + $I_L27168_240)
27168.                                           flux_up_tile(1 + $I_L27168_240, 2 + 4 * $I_L27168_292) = flux_up_tile(1 + $I_L27168_240, 2 + 4 * $I_L27168_292) + weight_incr * ( planck_flux_tile(1 + $I_L27168_240, 2 + 4 * $I_L27168_292) + rho_alb_tile(1 + $I_L27168_240, 1, 2 + 4 * $I_L27168_292) * ( flux_down_incr($l_S24) + planck_flux_bottom($l_S24) + -planck_flux_tile(1 + $I_L27168_240, 2 + 4 * $I_L27168_292) ) )
27168.                                           $l_S24 = list_tile(1 + $I_L27168_240)
27168.                                           flux_up_tile(1 + $I_L27168_240, 3 + 4 * $I_L27168_292) = flux_up_tile(1 + $I_L27168_240, 3 + 4 * $I_L27168_292) + weight_incr * ( planck_flux_tile(1 + $I_L27168_240, 3 + 4 * $I_L27168_292) + rho_alb_tile(1 + $I_L27168_240, 1, 3 + 4 * $I_L27168_292) * ( flux_down_incr($l_S24) + planck_flux_bottom($l_S24) + -planck_flux_tile(1 + $I_L27168_240, 3 + 4 * $I_L27168_292) ) )
27168.                                           $l_S24 = list_tile(1 + $I_L27168_240)
27168.                                           flux_up_tile(1 + $I_L27168_240, 4 + 4 * $I_L27168_292) = flux_up_tile(1 + $I_L27168_240, 4 + 4 * $I_L27168_292) + weight_incr * ( planck_flux_tile(1 + $I_L27168_240, 4 + 4 * $I_L27168_292) + rho_alb_tile(1 + $I_L27168_240, 1, 4 + 4 * $I_L27168_292) * ( flux_down_incr($l_S24) + planck_flux_bottom($l_S24) + -planck_flux_tile(1 + $I_L27168_240, 4 + 4 * $I_L27168_292) ) )
27168.                                           $I_L27168_240 = 1 + $I_L27168_240
27168.                                           if ( $I_L27168_240 >= n_point_tile ) exit
27168.                                        enddo
27168.                                        $I_L27168_292 = 1 + $I_L27168_292
27168.                                        if ( $I_L27168_292 >= _rsh( n_tile, 2 ) ) exit
27168.                                     enddo
27168.                                     $I_L27168_262 = and( 0xfffffffffffffffcUL, n_tile )
27168.                                  endif
27168.                                  if ( $I_L27168_262 < n_tile ) then
27168.                                     $I_L27168_279 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $I_L27168_240 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $l_S24 = list_tile(1 + $I_L27168_240)
27168.                                           flux_up_tile(1 + $I_L27168_240, $I_L27168_262 + $I_L27168_279 + 1) = flux_up_tile(1 + $I_L27168_240, $I_L27168_262 + $I_L27168_279 + 1) + weight_incr * ( planck_flux_tile(1 + $I_L27168_240, $I_L27168_262 + $I_L27168_279 + 1) + rho_alb_tile(1 + $I_L27168_240, 1, $I_L27168_262 + $I_L27168_279 + 1) * ( flux_down_incr($l_S24) + planck_flux_bottom($l_S24) + -planck_flux_tile(1 + $I_L27168_240, $I_L27168_262 + $I_L27168_279 + 1) ) )
27168.                                           $I_L27168_240 = 1 + $I_L27168_240
27168.                                           if ( $I_L27168_240 >= n_point_tile ) exit
27168.                                        enddo
27168.                                        $I_L27168_279 = 1 + $I_L27168_279
27168.                                        if ( $I_L27168_279 >= n_tile + -$I_L27168_262 ) exit
27168.                                     enddo
27168.                                  endif
27168.                               endif
27168.                            endif
27168.                         endif
27168.                      else
27168.                         if ( i_angular_integration == 3 ) then
27168.                            _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$184,  _substr(t$183,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
27168.                            ierr = 1
27168.                         endif
27168.                      endif
27168.                   else if ( i_angular_integration == 1 ) then
27168.                      goto 20
27168.                      goto 30
27168.                   else if ( i_angular_integration == 2 ) then
27168.    20                continue
27168.                      if ( isolir == 1 ) then
27168.                         if ( n_tile > 0 ) then
27168.                            if ( n_point_tile > 0 ) then
27168.                               $I_L27168_258 = 0
27168.                               if ( n_tile >= 4 ) then
27168.                                  $I_L27168_294 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                  do
27168.                                     $I_L27168_236 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $l_S27 = list_tile(1 + $I_L27168_236)
27168.                                        flux_up_tile(1 + $I_L27168_236, 1 + 4 * $I_L27168_294) = weight_incr * ( rho_alb_tile(1 + $I_L27168_236, 1, 1 + 4 * $I_L27168_294) * flux_down_incr($l_S27) + ( rho_alb_tile(1 + $I_L27168_236, 2, 1 + 4 * $I_L27168_294) + -rho_alb_tile(1 + $I_L27168_236, 1, 1 + 4 * $I_L27168_294) ) * flux_direct_incr($l_S27) )
27168.                                        $l_S27 = list_tile(1 + $I_L27168_236)
27168.                                        flux_up_tile(1 + $I_L27168_236, 2 + 4 * $I_L27168_294) = weight_incr * ( rho_alb_tile(1 + $I_L27168_236, 1, 2 + 4 * $I_L27168_294) * flux_down_incr($l_S27) + ( rho_alb_tile(1 + $I_L27168_236, 2, 2 + 4 * $I_L27168_294) + -rho_alb_tile(1 + $I_L27168_236, 1, 2 + 4 * $I_L27168_294) ) * flux_direct_incr($l_S27) )
27168.                                        $l_S27 = list_tile(1 + $I_L27168_236)
27168.                                        flux_up_tile(1 + $I_L27168_236, 3 + 4 * $I_L27168_294) = weight_incr * ( rho_alb_tile(1 + $I_L27168_236, 1, 3 + 4 * $I_L27168_294) * flux_down_incr($l_S27) + ( rho_alb_tile(1 + $I_L27168_236, 2, 3 + 4 * $I_L27168_294) + -rho_alb_tile(1 + $I_L27168_236, 1, 3 + 4 * $I_L27168_294) ) * flux_direct_incr($l_S27) )
27168.                                        $l_S27 = list_tile(1 + $I_L27168_236)
27168.                                        flux_up_tile(1 + $I_L27168_236, 4 + 4 * $I_L27168_294) = weight_incr * ( rho_alb_tile(1 + $I_L27168_236, 1, 4 + 4 * $I_L27168_294) * flux_down_incr($l_S27) + ( rho_alb_tile(1 + $I_L27168_236, 2, 4 + 4 * $I_L27168_294) + -rho_alb_tile(1 + $I_L27168_236, 1, 4 + 4 * $I_L27168_294) ) * flux_direct_incr($l_S27) )
27168.                                        $I_L27168_236 = 1 + $I_L27168_236
27168.                                        if ( $I_L27168_236 >= n_point_tile ) exit
27168.                                     enddo
27168.                                     $I_L27168_294 = 1 + $I_L27168_294
27168.                                     if ( $I_L27168_294 >= _rsh( n_tile, 2 ) ) exit
27168.                                  enddo
27168.                                  $I_L27168_258 = and( 0xfffffffffffffffcUL, n_tile )
27168.                               endif
27168.                               if ( $I_L27168_258 < n_tile ) then
27168.                                  $I_L27168_273 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                  do
27168.                                     $I_L27168_236 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $l_S27 = list_tile(1 + $I_L27168_236)
27168.                                        flux_up_tile(1 + $I_L27168_236, $I_L27168_258 + $I_L27168_273 + 1) = weight_incr * ( rho_alb_tile(1 + $I_L27168_236, 1, $I_L27168_258 + $I_L27168_273 + 1) * flux_down_incr($l_S27) + ( rho_alb_tile(1 + $I_L27168_236, 2, $I_L27168_258 + $I_L27168_273 + 1) + -rho_alb_tile(1 + $I_L27168_236, 1, $I_L27168_258 + $I_L27168_273 + 1) ) * flux_direct_incr($l_S27) )
27168.                                        $I_L27168_236 = 1 + $I_L27168_236
27168.                                        if ( $I_L27168_236 >= n_point_tile ) exit
27168.                                     enddo
27168.                                     $I_L27168_273 = 1 + $I_L27168_273
27168.                                     if ( $I_L27168_273 >= n_tile + -$I_L27168_258 ) exit
27168.                                  enddo
27168.                               endif
27168.                            endif
27168.                         endif
27168.                         if ( l_blue_flux_surf ) then
27168.                            if ( n_tile > 0 ) then
27168.                               if ( n_point_tile > 0 ) then
27168.                                  $I_L27168_260 = 0
27168.                                  if ( n_tile >= 4 ) then
27168.                                     $I_L27168_296 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $I_L27168_238 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $l_S30 = list_tile(1 + $I_L27168_238)
27168.                                           flux_up_blue_tile(1 + $I_L27168_238, 1 + 4 * $I_L27168_296) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_238, 1, 1 + 4 * $I_L27168_296) * flux_down_incr($l_S30) + ( rho_alb_tile(1 + $I_L27168_238, 2, 1 + 4 * $I_L27168_296) + -rho_alb_tile(1 + $I_L27168_238, 1, 1 + 4 * $I_L27168_296) ) * flux_direct_incr($l_S30) )
27168.                                           $l_S30 = list_tile(1 + $I_L27168_238)
27168.                                           flux_up_blue_tile(1 + $I_L27168_238, 2 + 4 * $I_L27168_296) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_238, 1, 2 + 4 * $I_L27168_296) * flux_down_incr($l_S30) + ( rho_alb_tile(1 + $I_L27168_238, 2, 2 + 4 * $I_L27168_296) + -rho_alb_tile(1 + $I_L27168_238, 1, 2 + 4 * $I_L27168_296) ) * flux_direct_incr($l_S30) )
27168.                                           $l_S30 = list_tile(1 + $I_L27168_238)
27168.                                           flux_up_blue_tile(1 + $I_L27168_238, 3 + 4 * $I_L27168_296) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_238, 1, 3 + 4 * $I_L27168_296) * flux_down_incr($l_S30) + ( rho_alb_tile(1 + $I_L27168_238, 2, 3 + 4 * $I_L27168_296) + -rho_alb_tile(1 + $I_L27168_238, 1, 3 + 4 * $I_L27168_296) ) * flux_direct_incr($l_S30) )
27168.                                           $l_S30 = list_tile(1 + $I_L27168_238)
27168.                                           flux_up_blue_tile(1 + $I_L27168_238, 4 + 4 * $I_L27168_296) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_238, 1, 4 + 4 * $I_L27168_296) * flux_down_incr($l_S30) + ( rho_alb_tile(1 + $I_L27168_238, 2, 4 + 4 * $I_L27168_296) + -rho_alb_tile(1 + $I_L27168_238, 1, 4 + 4 * $I_L27168_296) ) * flux_direct_incr($l_S30) )
27168.                                           $I_L27168_238 = 1 + $I_L27168_238
27168.                                           if ( $I_L27168_238 >= n_point_tile ) exit
27168.                                        enddo
27168.                                        $I_L27168_296 = 1 + $I_L27168_296
27168.                                        if ( $I_L27168_296 >= _rsh( n_tile, 2 ) ) exit
27168.                                     enddo
27168.                                     $I_L27168_260 = and( 0xfffffffffffffffcUL, n_tile )
27168.                                  endif
27168.                                  if ( $I_L27168_260 < n_tile ) then
27168.                                     $I_L27168_276 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $I_L27168_238 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                        do
27168.                                           $l_S30 = list_tile(1 + $I_L27168_238)
27168.                                           flux_up_blue_tile(1 + $I_L27168_238, $I_L27168_260 + $I_L27168_276 + 1) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27168_238, 1, $I_L27168_260 + $I_L27168_276 + 1) * flux_down_incr($l_S30) + ( rho_alb_tile(1 + $I_L27168_238, 2, $I_L27168_260 + $I_L27168_276 + 1) + -rho_alb_tile(1 + $I_L27168_238, 1, $I_L27168_260 + $I_L27168_276 + 1) ) * flux_direct_incr($l_S30) )
27168.                                           $I_L27168_238 = 1 + $I_L27168_238
27168.                                           if ( $I_L27168_238 >= n_point_tile ) exit
27168.                                        enddo
27168.                                        $I_L27168_276 = 1 + $I_L27168_276
27168.                                        if ( $I_L27168_276 >= n_tile + -$I_L27168_260 ) exit
27168.                                     enddo
27168.                                  endif
27168.                               endif
27168.                            endif
27168.                         endif
27168.                      else if ( isolir == 2 ) then
27168.                         if ( n_tile > 0 ) then
27168.                            if ( n_point_tile > 0 ) then
27168.                               $I_L27168_256 = 0
27168.                               if ( n_tile >= 4 ) then
27168.                                  $I_L27168_298 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                  do
27168.                                     $I_L27168_234 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $l_S33 = list_tile(1 + $I_L27168_234)
27168.                                        flux_up_tile(1 + $I_L27168_234, 1 + 4 * $I_L27168_298) = weight_incr * ( planck_flux_tile(1 + $I_L27168_234, 1 + 4 * $I_L27168_298) + rho_alb_tile(1 + $I_L27168_234, 1, 1 + 4 * $I_L27168_298) * ( flux_down_incr($l_S33) + planck_flux_bottom($l_S33) + -planck_flux_tile(1 + $I_L27168_234, 1 + 4 * $I_L27168_298) ) )
27168.                                        $l_S33 = list_tile(1 + $I_L27168_234)
27168.                                        flux_up_tile(1 + $I_L27168_234, 2 + 4 * $I_L27168_298) = weight_incr * ( planck_flux_tile(1 + $I_L27168_234, 2 + 4 * $I_L27168_298) + rho_alb_tile(1 + $I_L27168_234, 1, 2 + 4 * $I_L27168_298) * ( flux_down_incr($l_S33) + planck_flux_bottom($l_S33) + -planck_flux_tile(1 + $I_L27168_234, 2 + 4 * $I_L27168_298) ) )
27168.                                        $l_S33 = list_tile(1 + $I_L27168_234)
27168.                                        flux_up_tile(1 + $I_L27168_234, 3 + 4 * $I_L27168_298) = weight_incr * ( planck_flux_tile(1 + $I_L27168_234, 3 + 4 * $I_L27168_298) + rho_alb_tile(1 + $I_L27168_234, 1, 3 + 4 * $I_L27168_298) * ( flux_down_incr($l_S33) + planck_flux_bottom($l_S33) + -planck_flux_tile(1 + $I_L27168_234, 3 + 4 * $I_L27168_298) ) )
27168.                                        $l_S33 = list_tile(1 + $I_L27168_234)
27168.                                        flux_up_tile(1 + $I_L27168_234, 4 + 4 * $I_L27168_298) = weight_incr * ( planck_flux_tile(1 + $I_L27168_234, 4 + 4 * $I_L27168_298) + rho_alb_tile(1 + $I_L27168_234, 1, 4 + 4 * $I_L27168_298) * ( flux_down_incr($l_S33) + planck_flux_bottom($l_S33) + -planck_flux_tile(1 + $I_L27168_234, 4 + 4 * $I_L27168_298) ) )
27168.                                        $I_L27168_234 = 1 + $I_L27168_234
27168.                                        if ( $I_L27168_234 >= n_point_tile ) exit
27168.                                     enddo
27168.                                     $I_L27168_298 = 1 + $I_L27168_298
27168.                                     if ( $I_L27168_298 >= _rsh( n_tile, 2 ) ) exit
27168.                                  enddo
27168.                                  $I_L27168_256 = and( 0xfffffffffffffffcUL, n_tile )
27168.                               endif
27168.                               if ( $I_L27168_256 < n_tile ) then
27168.                                  $I_L27168_270 = 0
27168. !dir$ blocking_size( 0, 0 )
27168.                                  do
27168.                                     $I_L27168_234 = 0
27168. !dir$ ivdep
27168. !dir$ blocking_size( 0, 0 )
27168.                                     do
27168.                                        $l_S33 = list_tile(1 + $I_L27168_234)
27168.                                        flux_up_tile(1 + $I_L27168_234, $I_L27168_256 + $I_L27168_270 + 1) = weight_incr * ( planck_flux_tile(1 + $I_L27168_234, $I_L27168_256 + $I_L27168_270 + 1) + rho_alb_tile(1 + $I_L27168_234, 1, $I_L27168_256 + $I_L27168_270 + 1) * ( flux_down_incr($l_S33) + planck_flux_bottom($l_S33) + -planck_flux_tile(1 + $I_L27168_234, $I_L27168_256 + $I_L27168_270 + 1) ) )
27168.                                        $I_L27168_234 = 1 + $I_L27168_234
27168.                                        if ( $I_L27168_234 >= n_point_tile ) exit
27168.                                     enddo
27168.                                     $I_L27168_270 = 1 + $I_L27168_270
27168.                                     if ( $I_L27168_270 >= n_tile + -$I_L27168_256 ) exit
27168.                                  enddo
27168.                               endif
27168.                            endif
27168.                         endif
27168.                      endif
27168.                      goto 30
27168.                   else if ( i_angular_integration == 3 ) then
27168.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$186,  _substr(t$185,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
27168.                      ierr = 1
27168.                   else
27168.    30                continue
27168.                      l_initial = .false.
27168.                   endif
27168.                   flux_total_part(1, 2 + 2 * n_layer) = _copyout( flux_down_incr )
27168.                   flux_direct_part(1, n_layer) = _copyout( flux_direct_incr )
27184.                   if ( ierr /= 0 ) then
26470.                      _free( t$3674 )
26470.                      goto 50
26470.                   endif
27189.                   l_initial = .false.
27191.                   $I_L27002_268 = 1 + $I_L27002_268
27185.                else
27185.                endif
27185.             else
27185.             endif
27185.             if ( $I_L27002_268 >= $t_S0 ) exit
27185.          enddo
27185.          goto 40
27185.       else
27185.    40    continue
26470.          _free( t$3674 )
26470.       endif
26470.    50 continue
27196.       return
27196.       end
27196.       
28040.       
28040.       subroutine solve_band_random_overlap( ierr, n_profile, n_layer, i_top, p, t, d_mass, i_angular_integration, i_2stream, n_order_phase, l_rescale, n_order_gauss, ms_min, ms_max, i_truncation, ls_local_trunc, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, i_scatter_method, i_solver, i_band, n_gas, index_absorb, i_band_esft, i_scale_esft, i_scale_fnc, k_esft, w_esft, scale_vector, p_reference, t_reference, gas_mix_ratio, gas_frac_rescaled, l_doppler, doppler_correction, isolir, zen_0, zen_00, solar_irrad, planck_flux_top, planck_flux_bottom, diff_planck_band, l_ir_source_quad, diff_planck_band_2, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, planck_flux_ground, l_tile, n_point_tile, n_tile, list_tile, rho_alb_tile, planck_flux_tile, ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud, n_region, k_clr, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, weight_band, l_initial, flux_direct, flux_down, flux_up, i_direct, radiance, photolysis, l_clear, i_solver_clear, flux_direct_clear, flux_down_clear, flux_up_clear, flux_up_tile, flux_up_blue_tile, l_blue_flux_surf, weight_blue, flux_direct_blue_surf, flux_down_blue_surf, flux_up_blue_surf, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_band, nd_species, nd_esft_term, nd_scale_variable, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff, nd_point_tile, nd_tile )
27215.       t$1136 = nd_profile
27215.       t$1137 = nd_layer
27381.       t$3717 = _zla( 0, nd_profile )
27215.       t$3718 = _zla( 0, nd_profile )
27381.       t$3719 = _zla( 0, nd_layer )
27215.       t$3720 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
27215.       t$1138 = nd_max_order
27215.       t$3721 = 1 + nd_max_order
27405.       t$3722 = _zla( 0, 1 + nd_max_order )
27215.       t$1139 = nd_sph_coeff
27415.       t$3723 = _zla( 0, nd_sph_coeff )
27215.       t$1140 = nd_radiance_profile
27419.       t$3724 = _zla( 0, nd_radiance_profile )
27215.       t$3725 = _zla( 0, nd_radiance_profile )
27215.       t$3726 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_radiance_profile )
27215.       t$1141 = nd_species
27215.       t$1142 = nd_band
27448.       t$3727 = _zla( 0, nd_species )
27215.       t$3728 = _zla( 0, nd_species )
27448.       t$3729 = _zla( 0, nd_band )
27215.       t$3730 = _zla( 0, nd_species ) * _zla( 0, nd_band )
27215.       t$3731 = _zla( 0, nd_band )
27215.       t$3732 = _zla( 0, nd_species ) * _zla( 0, nd_band )
27215.       t$1143 = nd_esft_term
27460.       t$3733 = _zla( 0, nd_esft_term )
27215.       t$3734 = _zla( 0, nd_esft_term )
27215.       t$3735 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term )
27215.       t$3736 = _zla( 0, nd_species ) * _zla( 0, nd_band ) * _zla( 0, nd_esft_term )
27215.       t$1144 = nd_scale_variable
27464.       t$3737 = _zla( 0, nd_scale_variable )
27215.       t$3738 = _zla( 0, nd_scale_variable )
27215.       t$3739 = _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
27215.       t$3740 = _zla( 0, nd_band ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
27215.       t$3741 = _zla( 0, nd_species ) * _zla( 0, nd_band ) * _zla( 0, nd_esft_term ) * _zla( 0, nd_scale_variable )
27215.       t$3742 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
27215.       t$3743 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_species )
27215.       t$1145 = nd_brdf_basis_fnc
27517.       t$3744 = _zla( 0, nd_brdf_basis_fnc )
27215.       t$3745 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
27215.       t$1146 = nd_brdf_trunc / 2
27215.       t$1147 = nd_brdf_trunc
27215.       t$3746 = _zla( 0, nd_brdf_basis_fnc )
27215.       t$3747 = 1 + nd_brdf_trunc / 2
27519.       t$3748 = _zla( 0, 1 + nd_brdf_trunc / 2 )
27215.       t$3749 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
27215.       t$3750 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
27215.       t$3751 = 1 + nd_brdf_trunc
27519.       t$3752 = _zla( 0, 1 + nd_brdf_trunc )
27215.       t$3753 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
27215.       t$1148 = nd_direction
27215.       t$3754 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
27522.       t$3755 = _zla( 0, nd_direction )
27215.       t$3756 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
27215.       t$1149 = nd_point_tile
27538.       t$3757 = _zla( 0, nd_point_tile )
27215.       t$1150 = nd_tile
27215.       t$3758 = _zla( 0, nd_point_tile )
27215.       t$3759 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile )
27541.       t$3760 = _zla( 0, nd_tile )
27215.       t$3761 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
27215.       t$3762 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2600.       if ( t$30 == 0 ) then
 2600.          t$3768(1) = 4
 2600.          t$3769(1) = 0
 2600.          t$3770(1) = 16
 2600.          t$3765(1) = int( loc( t$29 ), 8 )
 2600.          t$3766(1) = 0
 2600.          t$3767(1) = int( loc( t$3763 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$3765(1), t$3768(1), 1, t$3766(1), t$3767(1), t$3769(1), t$3770(1) )
 2600.       endif
27215.       t$1153 = id_ct
27215.       t$1151 = nd_cloud_type
27215.       t$3772 = nd_layer + -id_ct + 1
27585.       t$3773 = max( 0, nd_layer + -id_ct + 1 )
27215.       t$3774 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
27585.       t$3775 = max( 0, nd_cloud_type )
27215.       t$3776 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
27215.       t$1156 = nd_region
27594.       t$3777 = max( 0, nd_region )
27215.       t$3778 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
27215.       t$3779 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
27215.       t$1154 = ( -1 + id_ct )
27215.       t$1155 = nd_overlap_coeff
27215.       t$3780 = nd_layer + -id_ct + 2
27589.       t$3781 = max( 0, nd_layer + -id_ct + 2 )
27215.       t$3782 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
27589.       t$3783 = max( 0, nd_overlap_coeff )
27215.       t$3784 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
27215.       t$1152 = nd_column
27576.       t$3785 = max( 0, nd_column )
27215.       t$3786 = _zla( 0, nd_profile ) * max( 0, nd_column )
27215.       t$1157 = nd_viewing_level
27609.       t$3787 = max( 0, nd_viewing_level )
27215.       t$3788 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
27215.       t$3789 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
27215.       t$1158 = nd_flux_profile
27625.       t$3790 = max( 0, nd_flux_profile )
27215.       t$3791 = max( 0, nd_flux_profile )
27215.       t$3792 = 1 + nd_layer
27625.       t$3793 = max( 0, 1 + nd_layer )
27215.       t$3794 = max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer )
27215.       t$3795 = _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer )
27215.       t$3796 = _zla( 0, nd_radiance_profile ) * max( 0, nd_viewing_level )
27215.       t$3797 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level )
27215.       t$1159 = nd_j_profile
27642.       t$3798 = max( 0, nd_j_profile )
27215.       t$3799 = max( 0, nd_j_profile )
27215.       t$3800 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
27712.       t$3803 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
27703.       t$3804 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
27703.       t$3806 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
27721.       t$3807 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
27721.       t$3809 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8
27717.       t$3810 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
27717.       t$3812 = max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
27706.       t$3813 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
27706.       t$3815 = 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
27708.       t$3816 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27708.       t$3818 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27215.       t$1160 = ( 2 + 2 * nd_layer )
27723.       t$3819 = max( 0, ( 2 + 2 * nd_layer ) )
27215.       t$3820 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
27723.       t$3821 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27723.       t$3823 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27719.       t$3824 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27719.       t$3826 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27726.       t$3827 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27726.       t$3829 = _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27688.       t$3831 = 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27686.       t$3833 = 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27699.       t$3834 = 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27699.       t$3836 = 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27701.       t$3837 = 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27701.       t$3839 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27732.       t$3840 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27732.       t$3842 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27728.       t$3843 = 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27728.       t$3845 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27215.       t$3801 = int( _alloc( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
27712.       t$3802 = t$3801
27703.       t$3805 = t$3801 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
27721.       t$3808 = t$3801 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
27717.       t$3811 = t$3801 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
27706.       t$3814 = t$3801 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
27708.       t$3817 = t$3801 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27723.       t$3822 = t$3801 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27719.       t$3825 = t$3801 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27726.       t$3828 = t$3801 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27688.       t$3830 = t$3801 + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27686.       t$3832 = t$3801 + 4 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27699.       t$3835 = t$3801 + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27701.       t$3838 = t$3801 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27732.       t$3841 = t$3801 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27728.       t$3844 = t$3801 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 8 * _zla( 0, nd_species ) + 8 * ( ( 8 * _zla( 0, nd_species ) + _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
27749.       if ( n_gas > 0 ) then
27749.          $I_L27749_349 = 0
27749. !dir$ ivdep
27749.          do
27750.             i_gas_pointer(1 + $I_L27749_349) = index_absorb(1 + $I_L27749_349, i_band)
27751.             i_esft_pointer(index_absorb(1 + $I_L27749_349, i_band)) = 1
27752.             $I_L27749_349 = 1 + $I_L27749_349
27749.             if ( $I_L27749_349 >= n_gas ) exit
27749.          enddo
27749.       endif
27753.       $index_last_S12 = index_absorb(n_gas, i_band)
27760.       if ( -1 + n_gas > 0 ) then
27760.          $I_L27760_431 = 0
27760.          do
27761.             $i_gas_band_S2 = i_gas_pointer(1 + $I_L27760_431)
27763.             k_esft_mono($i_gas_band_S2) = k_esft(1, i_band, $i_gas_band_S2)
27765.             if ( i_scale_esft(i_band, $i_gas_band_S2) == 2 ) then
27766.                t$955 = nd_profile
27766.                t$956 = nd_layer
27766.                t$3219 = max( 0, nd_profile )
27766.                t$3220 = nd_profile
27766.                t$3221 = max( 0, nd_layer )
27766.                t$3222 = ( nd_profile * nd_layer )
27766.                t$957 = nd_scale_variable
27766.                t$3223 = max( 0, nd_scale_variable )
27766.                if ( l_doppler($i_gas_band_S2) ) then
27766.                   $pressure_offset_S5 = doppler_correction($i_gas_band_S2)
27766.                else
27766.                   $pressure_offset_S5 = 0.0
27766.                endif
27766.                if ( i_scale_fnc(i_band, $i_gas_band_S2) == 1 ) then
27766.                   if ( nd_layer > 0 ) then
27766.                      if ( nd_profile > 0 ) then
27766.                         $SC_scale_vector_I6 = scale_vector(1, 1, i_band, $i_gas_band_S2)
27766.                         $SC_p_reference_I5 = p_reference($i_gas_band_S2, i_band)
27766.                         $SC_scale_vector_I4 = scale_vector(2, 1, i_band, $i_gas_band_S2)
27766.                         $SC_t_reference_I3 = t_reference($i_gas_band_S2, i_band)
27766.                         $I_L27766_402 = 0
27766.                         do
27766.                            $I_L27766_355 = 0
27766. !dir$ ivdep
27766.                            do
27766.                               gas_frac_rescaled(1 + $I_L27766_355, 1 + $I_L27766_402, $i_gas_band_S2) = _expn( $SC_scale_vector_I6 * log( ( ( p(1 + $I_L27766_355, 1 + $I_L27766_402) + $pressure_offset_S5 ) * 1.0/( $SC_p_reference_I5 + $pressure_offset_S5 ) ) ) + $SC_scale_vector_I4 * log( ( t(1 + $I_L27766_355, 1 + $I_L27766_402) * 1.0/$SC_t_reference_I3 ) ) )
27766.                               $I_L27766_355 = 1 + $I_L27766_355
27766.                               if ( $I_L27766_355 >= nd_profile ) exit
27766.                            enddo
27766.                            $I_L27766_402 = 1 + $I_L27766_402
27766.                            if ( $I_L27766_402 >= nd_layer ) exit
27766.                         enddo
27766.                      endif
27766.                   endif
27766.                   goto 10
27766.                else if ( i_scale_fnc(i_band, $i_gas_band_S2) /= 0 ) then
27766.                   if ( i_scale_fnc(i_band, $i_gas_band_S2) == 2 ) then
27766.                      if ( nd_layer > 0 ) then
27766.                         if ( nd_profile > 0 ) then
27766.                            $SC_scale_vector_I6 = scale_vector(1, 1, i_band, $i_gas_band_S2)
27766.                            $SC_p_reference_I5 = p_reference($i_gas_band_S2, i_band)
27766.                            $SC_scale_vector_I4 = scale_vector(2, 1, i_band, $i_gas_band_S2)
27766.                            $SC_scale_vector_I7 = scale_vector(3, 1, i_band, $i_gas_band_S2)
27766.                            $SC_t_reference_I3 = t_reference($i_gas_band_S2, i_band)
27766.                            $I_L27766_400 = 0
27766.                            do
27766.                               $I_L27766_353 = 0
27766. !dir$ ivdep
27766.                               do
27766.                                  gas_frac_rescaled(1 + $I_L27766_353, 1 + $I_L27766_400, $i_gas_band_S2) = _expn( $SC_scale_vector_I6 * log( ( ( p(1 + $I_L27766_353, 1 + $I_L27766_400) + $pressure_offset_S5 ) * 1.0/( $SC_p_reference_I5 + $pressure_offset_S5 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L27766_353, 1 + $I_L27766_400) * 1.0/$SC_t_reference_I3 ) ) * ( -1.0 + ( t(1 + $I_L27766_353, 1 + $I_L27766_400) * 1.0/$SC_t_reference_I3 ) ) * $SC_scale_vector_I7 + $SC_scale_vector_I4 * ( -1.0 + ( t(1 + $I_L27766_353, 1 + $I_L27766_400) * 1.0/$SC_t_reference_I3 ) ) + 1.0 )
27766.                                  $I_L27766_353 = 1 + $I_L27766_353
27766.                                  if ( $I_L27766_353 >= nd_profile ) exit
27766.                               enddo
27766.                               $I_L27766_400 = 1 + $I_L27766_400
27766.                               if ( $I_L27766_400 >= nd_layer ) exit
27766.                            enddo
27766.                         endif
27766.                      endif
27766.                      goto 10
27766.                   else if ( i_scale_fnc(i_band, $i_gas_band_S2) == 3 ) then
27766.                      if ( nd_layer > 0 ) then
27766.                         if ( nd_profile > 0 ) then
27766.                            $SC_scale_vector_I6 = scale_vector(1, 1, i_band, $i_gas_band_S2)
27766.                            $SC_p_reference_I5 = p_reference($i_gas_band_S2, i_band)
27766.                            $SC_scale_vector_I4 = scale_vector(2, 1, i_band, $i_gas_band_S2)
27766.                            $SC_scale_vector_I8 = scale_vector(4, 1, i_band, $i_gas_band_S2)
27766.                            $SC_scale_vector_I7 = scale_vector(3, 1, i_band, $i_gas_band_S2)
27766.                            $SC_t_reference_I3 = t_reference($i_gas_band_S2, i_band)
27766.                            $I_L27766_398 = 0
27766.                            do
27766.                               $I_L27766_351 = 0
27766. !dir$ ivdep
27766.                               do
27766.                                  gas_frac_rescaled(1 + $I_L27766_351, 1 + $I_L27766_398, $i_gas_band_S2) = _expn( $SC_scale_vector_I6 * log( ( ( p(1 + $I_L27766_351, 1 + $I_L27766_398) + $SC_scale_vector_I4 ) * 1.0/( $SC_p_reference_I5 + $SC_scale_vector_I4 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L27766_351, 1 + $I_L27766_398) * 1.0/$SC_t_reference_I3 ) ) * ( -1.0 + ( t(1 + $I_L27766_351, 1 + $I_L27766_398) * 1.0/$SC_t_reference_I3 ) ) * $SC_scale_vector_I8 + $SC_scale_vector_I7 * ( -1.0 + ( t(1 + $I_L27766_351, 1 + $I_L27766_398) * 1.0/$SC_t_reference_I3 ) ) + 1.0 )
27766.                                  $I_L27766_351 = 1 + $I_L27766_351
27766.                                  if ( $I_L27766_351 >= nd_profile ) exit
27766.                               enddo
27766.                               $I_L27766_398 = 1 + $I_L27766_398
27766.                               if ( $I_L27766_398 >= nd_layer ) exit
27766.                            enddo
27766.                         endif
27766.                      endif
27766.    10                continue
27766.                      if ( nd_layer > 0 ) then
27766.                         if ( nd_profile > 0 ) then
27766.                            $I_L27766_404 = 0
27766.                            do
27766.                               $I_L27766_357 = 0
27766. !dir$ ivdep
27766.                               do
27766.                                  gas_frac_rescaled(1 + $I_L27766_357, 1 + $I_L27766_404, $i_gas_band_S2) = max( 0.0, gas_frac_rescaled(1 + $I_L27766_357, 1 + $I_L27766_404, $i_gas_band_S2) * gas_mix_ratio(1 + $I_L27766_357, 1 + $I_L27766_404, $i_gas_band_S2) )
27766.                                  $I_L27766_357 = 1 + $I_L27766_357
27766.                                  if ( $I_L27766_357 >= nd_profile ) exit
27766.                               enddo
27766.                               $I_L27766_404 = 1 + $I_L27766_404
27766.                               if ( $I_L27766_404 >= nd_layer ) exit
27766.                            enddo
27766.                         endif
27766.                      endif
27766.                   else
27766.                      _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
27766.                      ierr = 1
27766.                   endif
27766.                endif
27778.                if ( ierr /= 0 ) then
27215.                   _free( t$3801 )
27215.                   goto 60
27215.                endif
27780.                $I_L27760_431 = 1 + $I_L27760_431
27779.             else
27779.             endif
27779.             if ( $I_L27760_431 >= -1 + n_gas ) exit
27779.          enddo
27779.          goto 20
27779.       else
27779.    20    continue
27784.          $SC_i_band_esft_I0 = i_band_esft(i_band, $index_last_S12)
27869.          $SC_i_gas_pointer_I2 = i_gas_pointer(1)
27783.          do
27783.             i_esft_pointer($index_last_S12) = 0
27784.             if ( $SC_i_band_esft_I0 > 0 ) then
27793.                $SC_i_scale_esft_I1 = i_scale_esft(i_band, $index_last_S12)
27784.                $I_L27784_442 = 0
27784.                do
27785.                   i_esft_pointer($index_last_S12) = $I_L27784_442
27785.                   i_esft_pointer($index_last_S12) = ( 1 + $I_L27784_442 )
27791.                   k_esft_mono($index_last_S12) = k_esft(1 + $I_L27784_442, i_band, $index_last_S12)
27793.                   if ( $SC_i_scale_esft_I1 == 2 ) then
27794.                      t$955 = nd_profile
27794.                      t$956 = nd_layer
27794.                      t$3219 = max( 0, nd_profile )
27794.                      t$3220 = nd_profile
27794.                      t$3221 = max( 0, nd_layer )
27794.                      t$3222 = ( nd_profile * nd_layer )
27794.                      t$957 = nd_scale_variable
27794.                      t$3223 = max( 0, nd_scale_variable )
27794.                      if ( l_doppler($index_last_S12) ) then
27794.                         $pressure_offset_S17 = doppler_correction($index_last_S12)
27794.                      else
27794.                         $pressure_offset_S17 = 0.0
27794.                      endif
27794.                      if ( i_scale_fnc(i_band, $index_last_S12) == 1 ) then
27794.                         if ( nd_layer > 0 ) then
27794.                            if ( nd_profile > 0 ) then
27794.                               $SC_scale_vector_I12 = scale_vector(1, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                               $SC_scale_vector_I10 = scale_vector(2, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                               $SC_p_reference_I11 = p_reference($index_last_S12, i_band)
27794.                               $SC_t_reference_I9 = t_reference($index_last_S12, i_band)
27794.                               $I_L27794_410 = 0
27794.                               do
27794.                                  $I_L27794_363 = 0
27794. !dir$ ivdep
27794.                                  do
27794.                                     gas_frac_rescaled(1 + $I_L27794_363, 1 + $I_L27794_410, $index_last_S12) = _expn( $SC_scale_vector_I12 * log( ( ( p(1 + $I_L27794_363, 1 + $I_L27794_410) + $pressure_offset_S17 ) * 1.0/( $SC_p_reference_I11 + $pressure_offset_S17 ) ) ) + $SC_scale_vector_I10 * log( ( t(1 + $I_L27794_363, 1 + $I_L27794_410) * 1.0/$SC_t_reference_I9 ) ) )
27794.                                     $I_L27794_363 = 1 + $I_L27794_363
27794.                                     if ( $I_L27794_363 >= nd_profile ) exit
27794.                                  enddo
27794.                                  $I_L27794_410 = 1 + $I_L27794_410
27794.                                  if ( $I_L27794_410 >= nd_layer ) exit
27794.                               enddo
27794.                            endif
27794.                         endif
27794.                         goto 30
27794.                      else if ( i_scale_fnc(i_band, $index_last_S12) /= 0 ) then
27794.                         if ( i_scale_fnc(i_band, $index_last_S12) == 2 ) then
27794.                            if ( nd_layer > 0 ) then
27794.                               if ( nd_profile > 0 ) then
27794.                                  $SC_scale_vector_I13 = scale_vector(3, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_scale_vector_I12 = scale_vector(1, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_scale_vector_I10 = scale_vector(2, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_p_reference_I11 = p_reference($index_last_S12, i_band)
27794.                                  $SC_t_reference_I9 = t_reference($index_last_S12, i_band)
27794.                                  $I_L27794_408 = 0
27794.                                  do
27794.                                     $I_L27794_361 = 0
27794. !dir$ ivdep
27794.                                     do
27794.                                        gas_frac_rescaled(1 + $I_L27794_361, 1 + $I_L27794_408, $index_last_S12) = _expn( $SC_scale_vector_I12 * log( ( ( p(1 + $I_L27794_361, 1 + $I_L27794_408) + $pressure_offset_S17 ) * 1.0/( $SC_p_reference_I11 + $pressure_offset_S17 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L27794_361, 1 + $I_L27794_408) * 1.0/$SC_t_reference_I9 ) ) * ( -1.0 + ( t(1 + $I_L27794_361, 1 + $I_L27794_408) * 1.0/$SC_t_reference_I9 ) ) * $SC_scale_vector_I13 + $SC_scale_vector_I10 * ( -1.0 + ( t(1 + $I_L27794_361, 1 + $I_L27794_408) * 1.0/$SC_t_reference_I9 ) ) + 1.0 )
27794.                                        $I_L27794_361 = 1 + $I_L27794_361
27794.                                        if ( $I_L27794_361 >= nd_profile ) exit
27794.                                     enddo
27794.                                     $I_L27794_408 = 1 + $I_L27794_408
27794.                                     if ( $I_L27794_408 >= nd_layer ) exit
27794.                                  enddo
27794.                               endif
27794.                            endif
27794.                            goto 30
27794.                         else if ( i_scale_fnc(i_band, $index_last_S12) == 3 ) then
27794.                            if ( nd_layer > 0 ) then
27794.                               if ( nd_profile > 0 ) then
27794.                                  $SC_scale_vector_I14 = scale_vector(4, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_scale_vector_I13 = scale_vector(3, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_scale_vector_I12 = scale_vector(1, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_scale_vector_I10 = scale_vector(2, 1 + $I_L27784_442, i_band, $index_last_S12)
27794.                                  $SC_p_reference_I11 = p_reference($index_last_S12, i_band)
27794.                                  $SC_t_reference_I9 = t_reference($index_last_S12, i_band)
27794.                                  $I_L27794_406 = 0
27794.                                  do
27794.                                     $I_L27794_359 = 0
27794. !dir$ ivdep
27794.                                     do
27794.                                        gas_frac_rescaled(1 + $I_L27794_359, 1 + $I_L27794_406, $index_last_S12) = _expn( $SC_scale_vector_I12 * log( ( ( p(1 + $I_L27794_359, 1 + $I_L27794_406) + $SC_scale_vector_I10 ) * 1.0/( $SC_p_reference_I11 + $SC_scale_vector_I10 ) ) ) ) * ( ( -1.0 + ( t(1 + $I_L27794_359, 1 + $I_L27794_406) * 1.0/$SC_t_reference_I9 ) ) * ( -1.0 + ( t(1 + $I_L27794_359, 1 + $I_L27794_406) * 1.0/$SC_t_reference_I9 ) ) * $SC_scale_vector_I14 + $SC_scale_vector_I13 * ( -1.0 + ( t(1 + $I_L27794_359, 1 + $I_L27794_406) * 1.0/$SC_t_reference_I9 ) ) + 1.0 )
27794.                                        $I_L27794_359 = 1 + $I_L27794_359
27794.                                        if ( $I_L27794_359 >= nd_profile ) exit
27794.                                     enddo
27794.                                     $I_L27794_406 = 1 + $I_L27794_406
27794.                                     if ( $I_L27794_406 >= nd_layer ) exit
27794.                                  enddo
27794.                               endif
27794.                            endif
27794.    30                      continue
27794.                            if ( nd_layer > 0 ) then
27794.                               if ( nd_profile > 0 ) then
27794.                                  $I_L27794_412 = 0
27794.                                  do
27794.                                     $I_L27794_365 = 0
27794. !dir$ ivdep
27794.                                     do
27794.                                        gas_frac_rescaled(1 + $I_L27794_365, 1 + $I_L27794_412, $index_last_S12) = max( 0.0, gas_frac_rescaled(1 + $I_L27794_365, 1 + $I_L27794_412, $index_last_S12) * gas_mix_ratio(1 + $I_L27794_365, 1 + $I_L27794_412, $index_last_S12) )
27794.                                        $I_L27794_365 = 1 + $I_L27794_365
27794.                                        if ( $I_L27794_365 >= nd_profile ) exit
27794.                                     enddo
27794.                                     $I_L27794_412 = 1 + $I_L27794_412
27794.                                     if ( $I_L27794_412 >= nd_layer ) exit
27794.                                  enddo
27794.                               endif
27794.                            endif
27794.                         else
27794.                            _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$959,  _substr(t$958,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An illegal type of scaling has been given.', 0x800600000000L ) ) )
27794.                            ierr = 1
27794.                         endif
27794.                      endif
27807.                      if ( ierr /= 0 ) then
27215.                         _free( t$3801 )
27215.                         goto 60
27215.                      endif
27814.                      product_weight = 1.0
27815.                      if ( n_gas > 0 ) then
27815.                         $I_L27815_367 = 0
27815. !dir$ ivdep
27815.                         do
27816.                            $i_gas_band_S25 = i_gas_pointer(1 + $I_L27815_367)
27817.                            $iex_S26 = i_esft_pointer($i_gas_band_S25)
27818.                            product_weight = product_weight * w_esft($iex_S26, i_band, $i_gas_band_S25)
27820.                            $I_L27815_367 = 1 + $I_L27815_367
27815.                            if ( $I_L27815_367 >= n_gas ) exit
27815.                         enddo
27815.                      endif
27822.                      if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
27825.                         if ( isolir == 1 ) then
27828.                            if ( n_profile > 0 ) then
27828.                               $I_L27828_369 = 0
27828. !dir$ ivdep
27828.                               do
27829.                                  d_planck_flux_surface(1 + $I_L27828_369) = 0.0
27830.                                  flux_inc_down(1 + $I_L27828_369) = ( solar_irrad(1 + $I_L27828_369) * 1.0/zen_0(1 + $I_L27828_369) )
27831.                                  flux_inc_direct(1 + $I_L27828_369) = ( solar_irrad(1 + $I_L27828_369) * 1.0/zen_0(1 + $I_L27828_369) )
27832.                                  $I_L27828_369 = 1 + $I_L27828_369
27828.                                  if ( $I_L27828_369 >= n_profile ) exit
27828.                               enddo
27828.                            endif
27834.                         else if ( isolir == 2 ) then
27837.                            if ( n_profile > 0 ) then
27837.                               $I_L27837_371 = 0
27837. !dir$ ivdep
27837.                               do
27838.                                  flux_inc_direct(1 + $I_L27837_371) = 0.0
27839.                                  flux_direct_part(1 + $I_L27837_371, n_layer) = 0.0
27840.                                  flux_inc_down(1 + $I_L27837_371) = -planck_flux_top(1 + $I_L27837_371)
27841.                                  d_planck_flux_surface(1 + $I_L27837_371) = planck_flux_ground(1 + $I_L27837_371) + -planck_flux_bottom(1 + $I_L27837_371)
27843.                                  $I_L27837_371 = 1 + $I_L27837_371
27837.                                  if ( $I_L27837_371 >= n_profile ) exit
27837.                               enddo
27837.                            endif
27844.                            if ( l_clear ) then
27845.                               if ( n_profile > 0 ) then
27845.                                  $I_L27845_373 = 0
27845. !dir$ ivdep
27845.                                  do
27846.                                     flux_direct_clear_part(1 + $I_L27845_373, n_layer) = 0.0
27847.                                     $I_L27845_373 = 1 + $I_L27845_373
27845.                                     if ( $I_L27845_373 >= n_profile ) exit
27845.                                  enddo
27845.                               endif
27845.                            endif
27845.                         endif
27845.                      else
27852.                         if ( i_angular_integration == 3 ) then
27854.                            if ( isolir == 1 ) then
27855.                               if ( n_profile > 0 ) then
27855.                                  $I_L27855_375 = 0
27855. !dir$ ivdep
27855.                                  do
27856.                                     i_direct_part(1 + $I_L27855_375, 0) = solar_irrad(1 + $I_L27855_375)
27857.                                     flux_inc_down(1 + $I_L27855_375) = 0.0
27858.                                     $I_L27855_375 = 1 + $I_L27855_375
27855.                                     if ( $I_L27855_375 >= n_profile ) exit
27855.                                  enddo
27855.                               endif
27859.                            else if ( n_profile > 0 ) then
27860.                               $I_L27860_377 = 0
27860. !dir$ ivdep
27860.                               do
27861.                                  flux_inc_down(1 + $I_L27860_377) = -planck_flux_top(1 + $I_L27860_377)
27862.                                  d_planck_flux_surface(1 + $I_L27860_377) = planck_flux_ground(1 + $I_L27860_377) + -planck_flux_bottom(1 + $I_L27860_377)
27864.                                  $I_L27860_377 = 1 + $I_L27860_377
27860.                                  if ( $I_L27860_377 >= n_profile ) exit
27860.                               enddo
27860.                            endif
27860.                         endif
27860.                      endif
27869.                      t$407 = nd_species
27869.                      t$2332 = max( 0, nd_species )
27869.                      t$408 = nd_profile
27869.                      t$409 = nd_layer
27869.                      t$2333 = max( 0, nd_profile )
27869.                      t$2334 = nd_profile
27869.                      t$2335 = max( 0, nd_layer )
27869.                      t$2336 = nd_layer * nd_profile
27869.                      t$2337 = ( nd_profile * nd_layer * nd_species )
27869.                      t$2338 = ( nd_profile * nd_layer )
27869.                      if ( nd_layer > 0 ) then
27869.                         if ( nd_profile > 0 ) then
27869.                            $SC_k_esft_mono_I15 = k_esft_mono($SC_i_gas_pointer_I2)
27869.                            $I_L27869_414 = 0
27869.                            do
27869.                               $I_L27869_379 = 0
27869. !dir$ ivdep
27869.                               do
27869.                                  k_gas_abs(1 + $I_L27869_379, 1 + $I_L27869_414) = $SC_k_esft_mono_I15 * gas_frac_rescaled(1 + $I_L27869_379, 1 + $I_L27869_414, $SC_i_gas_pointer_I2)
27869.                                  $I_L27869_379 = 1 + $I_L27869_379
27869.                                  if ( $I_L27869_379 >= nd_profile ) exit
27869.                               enddo
27869.                               $I_L27869_414 = 1 + $I_L27869_414
27869.                               if ( $I_L27869_414 >= nd_layer ) exit
27869.                            enddo
27869.                         endif
27869.                      endif
27869.                      if ( -2 + n_gas >= 0 ) then
27869.                         if ( nd_layer > 0 ) then
27869.                            if ( nd_profile > 0 ) then
27869.                               $I_L27869_440 = 0
27869.                               do
27869.                                  $I_L27869_438 = 0
27869.                                  do
27869.                                     $I_L27869_436 = 0
27869.                                     do
27869.                                        $I_L27869_433 = 0
27869. !dir$ shortloop16
27869. !dir$ blocking_size( 8, 8 )
27869.                                        do
27869.                                           $i_gas_S38 = i_gas_pointer($I_L27869_433 + 8 * $I_L27869_440 + 2)
27869.                                           $SC_k_esft_mono_I16 = k_esft_mono($i_gas_S38)
27869.                                           $I_L27869_428 = 0
27869. !dir$ shortloop16
27869. !dir$ blocking_size( 8, 8 )
27869.                                           do
27869.                                              $I_L27869_381 = 0
27869. !dir$ ivdep
27869. !dir$ blocking_size( 256, 256 )
27869.                                              do
27869.                                                 k_gas_abs($I_L27869_381 + 256 * $I_L27869_436 + 1, $I_L27869_428 + 8 * $I_L27869_438 + 1) = k_gas_abs($I_L27869_381 + 256 * $I_L27869_436 + 1, $I_L27869_428 + 8 * $I_L27869_438 + 1) + $SC_k_esft_mono_I16 * gas_frac_rescaled($I_L27869_381 + 256 * $I_L27869_436 + 1, $I_L27869_428 + 8 * $I_L27869_438 + 1, $i_gas_S38)
27869.                                                 $I_L27869_381 = 1 + $I_L27869_381
27869.                                                 if ( $I_L27869_381 >= min( nd_profile, 256 + 256 * $I_L27869_436 ) + -256 * $I_L27869_436 ) exit
27869.                                              enddo
27869.                                              $I_L27869_428 = 1 + $I_L27869_428
27869.                                              if ( $I_L27869_428 >= min( nd_layer, 8 + 8 * $I_L27869_438 ) + -8 * $I_L27869_438 ) exit
27869.                                           enddo
27869.                                           $I_L27869_433 = 1 + $I_L27869_433
27869.                                           if ( $I_L27869_433 >= min( -1 + n_gas, 8 + 8 * $I_L27869_440 ) + -8 * $I_L27869_440 ) exit
27869.                                        enddo
27869.                                        $I_L27869_436 = 1 + $I_L27869_436
27869.                                        if ( $I_L27869_436 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
27869.                                     enddo
27869.                                     $I_L27869_438 = 1 + $I_L27869_438
27869.                                     if ( $I_L27869_438 >= 1 + max( 0, -1 + _rsh( 7 + nd_layer, 3 ) ) ) exit
27869.                                  enddo
27869.                                  $I_L27869_440 = 1 + $I_L27869_440
27869.                                  if ( $I_L27869_440 >= 1 + max( 0, -1 + _rsh( 6 + n_gas, 3 ) ) ) exit
27869.                               enddo
27869.                            endif
27869.                         endif
27869.                      endif
27877.                      ipa$23363 = .false.
27877.                      call monochromatic_radiance( ierr, n_profile, n_layer, d_mass(1, 1), i_angular_integration, i_2stream, l_rescale, n_order_gauss, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), i_scatter_method, i_solver, k_gas_abs(1, 1), ipa$23363, dummy_ke(1, 1), isolir, diff_planck_band(1, 1), l_ir_source_quad, diff_planck_band_2(1, 1), zen_0(1), zen_00(1, 1), flux_inc_direct(1), flux_inc_down(1), i_direct_part(1, 0), d_planck_flux_surface(1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, k_clr, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct_part(1, 0), flux_total_part(1, 1), radiance_part(1, 1, 1), photolysis_part(1, 1), l_clear, i_solver_clear, flux_direct_clear_part(1, 0), flux_total_clear_part(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff )
27941.                      if ( ierr /= 0 ) then
27215.                         _free( t$3801 )
27215.                         goto 60
27215.                      endif
27944.                      weight_incr = weight_band * product_weight
27945.                      if ( l_blue_flux_surf ) then
27946.                         weight_blue_incr = weight_blue * product_weight
27946.                      endif
27947.                      call augment_radiance( n_profile, n_layer, i_angular_integration, i_sph_mode, n_viewing_level, n_direction, isolir, l_clear, l_initial, weight_incr, l_blue_flux_surf, weight_blue_incr, flux_direct(1, 0), flux_down(1, 0), flux_up(1, 0), flux_direct_blue_surf(1), flux_down_blue_surf(1), flux_up_blue_surf(1), i_direct(1, 0), radiance(1, 1, 1), photolysis(1, 1), flux_direct_clear(1, 0), flux_down_clear(1, 0), flux_up_clear(1, 0), flux_direct_part(1, 0), flux_total_part(1, 1), i_direct_part(1, 0), radiance_part(1, 1, 1), photolysis_part(1, 1), flux_direct_clear_part(1, 0), flux_total_clear_part(1, 1), nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_layer, nd_viewing_level, nd_direction )
27968.                      if ( l_tile ) then
27969.                         t$179 = nd_point_tile
27969.                         t$1683 = max( 0, nd_point_tile )
27969.                         t$180 = nd_brdf_basis_fnc
27969.                         t$181 = nd_tile
27969.                         t$1684 = nd_point_tile
27969.                         t$1685 = max( 0, nd_brdf_basis_fnc )
27969.                         t$1686 = nd_brdf_basis_fnc * nd_point_tile
27969.                         t$1687 = max( 0, nd_tile )
27969.                         t$1688 = ( nd_brdf_basis_fnc * nd_point_tile * nd_tile )
27969.                         t$1689 = ( nd_point_tile * nd_tile )
27969.                         t$182 = nd_flux_profile
27969.                         t$1690 = max( 0, nd_flux_profile )
27969.                         if ( l_initial == 0 ) then
27969.                            if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
27969.                               if ( isolir == 1 ) then
27969.                                  if ( n_tile > 0 ) then
27969.                                     if ( n_point_tile > 0 ) then
27969.                                        $I_L27969_424 = 0
27969.                                        if ( n_tile >= 4 ) then
27969.                                           $I_L27969_462 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $I_L27969_392 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $l_S40 = list_tile(1 + $I_L27969_392)
27969.                                                 flux_up_tile(1 + $I_L27969_392, 1 + 4 * $I_L27969_462) = flux_up_tile(1 + $I_L27969_392, 1 + 4 * $I_L27969_462) + weight_incr * ( rho_alb_tile(1 + $I_L27969_392, 1, 1 + 4 * $I_L27969_462) * flux_total_part($l_S40, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_392, 2, 1 + 4 * $I_L27969_462) + -rho_alb_tile(1 + $I_L27969_392, 1, 1 + 4 * $I_L27969_462) ) * flux_direct_part($l_S40, n_layer) )
27969.                                                 $l_S40 = list_tile(1 + $I_L27969_392)
27969.                                                 flux_up_tile(1 + $I_L27969_392, 2 + 4 * $I_L27969_462) = flux_up_tile(1 + $I_L27969_392, 2 + 4 * $I_L27969_462) + weight_incr * ( rho_alb_tile(1 + $I_L27969_392, 1, 2 + 4 * $I_L27969_462) * flux_total_part($l_S40, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_392, 2, 2 + 4 * $I_L27969_462) + -rho_alb_tile(1 + $I_L27969_392, 1, 2 + 4 * $I_L27969_462) ) * flux_direct_part($l_S40, n_layer) )
27969.                                                 $l_S40 = list_tile(1 + $I_L27969_392)
27969.                                                 flux_up_tile(1 + $I_L27969_392, 3 + 4 * $I_L27969_462) = flux_up_tile(1 + $I_L27969_392, 3 + 4 * $I_L27969_462) + weight_incr * ( rho_alb_tile(1 + $I_L27969_392, 1, 3 + 4 * $I_L27969_462) * flux_total_part($l_S40, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_392, 2, 3 + 4 * $I_L27969_462) + -rho_alb_tile(1 + $I_L27969_392, 1, 3 + 4 * $I_L27969_462) ) * flux_direct_part($l_S40, n_layer) )
27969.                                                 $l_S40 = list_tile(1 + $I_L27969_392)
27969.                                                 flux_up_tile(1 + $I_L27969_392, 4 + 4 * $I_L27969_462) = flux_up_tile(1 + $I_L27969_392, 4 + 4 * $I_L27969_462) + weight_incr * ( rho_alb_tile(1 + $I_L27969_392, 1, 4 + 4 * $I_L27969_462) * flux_total_part($l_S40, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_392, 2, 4 + 4 * $I_L27969_462) + -rho_alb_tile(1 + $I_L27969_392, 1, 4 + 4 * $I_L27969_462) ) * flux_direct_part($l_S40, n_layer) )
27969.                                                 $I_L27969_392 = 1 + $I_L27969_392
27969.                                                 if ( $I_L27969_392 >= n_point_tile ) exit
27969.                                              enddo
27969.                                              $I_L27969_462 = 1 + $I_L27969_462
27969.                                              if ( $I_L27969_462 >= _rsh( n_tile, 2 ) ) exit
27969.                                           enddo
27969.                                           $I_L27969_424 = and( 0xfffffffffffffffcUL, n_tile )
27969.                                        endif
27969.                                        if ( $I_L27969_424 < n_tile ) then
27969.                                           $I_L27969_456 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $I_L27969_392 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $l_S40 = list_tile(1 + $I_L27969_392)
27969.                                                 flux_up_tile(1 + $I_L27969_392, $I_L27969_424 + $I_L27969_456 + 1) = flux_up_tile(1 + $I_L27969_392, $I_L27969_424 + $I_L27969_456 + 1) + weight_incr * ( rho_alb_tile(1 + $I_L27969_392, 1, $I_L27969_424 + $I_L27969_456 + 1) * flux_total_part($l_S40, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_392, 2, $I_L27969_424 + $I_L27969_456 + 1) + -rho_alb_tile(1 + $I_L27969_392, 1, $I_L27969_424 + $I_L27969_456 + 1) ) * flux_direct_part($l_S40, n_layer) )
27969.                                                 $I_L27969_392 = 1 + $I_L27969_392
27969.                                                 if ( $I_L27969_392 >= n_point_tile ) exit
27969.                                              enddo
27969.                                              $I_L27969_456 = 1 + $I_L27969_456
27969.                                              if ( $I_L27969_456 >= n_tile + -$I_L27969_424 ) exit
27969.                                           enddo
27969.                                        endif
27969.                                     endif
27969.                                  endif
27969.                                  if ( l_blue_flux_surf ) then
27969.                                     if ( n_tile > 0 ) then
27969.                                        if ( n_point_tile > 0 ) then
27969.                                           $I_L27969_426 = 0
27969.                                           if ( n_tile >= 4 ) then
27969.                                              $I_L27969_464 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $I_L27969_394 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                                 do
27969.                                                    $l_S43 = list_tile(1 + $I_L27969_394)
27969.                                                    flux_up_blue_tile(1 + $I_L27969_394, 1 + 4 * $I_L27969_464) = flux_up_blue_tile(1 + $I_L27969_394, 1 + 4 * $I_L27969_464) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_394, 1, 1 + 4 * $I_L27969_464) * flux_total_part($l_S43, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_394, 2, 1 + 4 * $I_L27969_464) + -rho_alb_tile(1 + $I_L27969_394, 1, 1 + 4 * $I_L27969_464) ) * flux_direct_part($l_S43, n_layer) )
27969.                                                    $l_S43 = list_tile(1 + $I_L27969_394)
27969.                                                    flux_up_blue_tile(1 + $I_L27969_394, 2 + 4 * $I_L27969_464) = flux_up_blue_tile(1 + $I_L27969_394, 2 + 4 * $I_L27969_464) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_394, 1, 2 + 4 * $I_L27969_464) * flux_total_part($l_S43, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_394, 2, 2 + 4 * $I_L27969_464) + -rho_alb_tile(1 + $I_L27969_394, 1, 2 + 4 * $I_L27969_464) ) * flux_direct_part($l_S43, n_layer) )
27969.                                                    $l_S43 = list_tile(1 + $I_L27969_394)
27969.                                                    flux_up_blue_tile(1 + $I_L27969_394, 3 + 4 * $I_L27969_464) = flux_up_blue_tile(1 + $I_L27969_394, 3 + 4 * $I_L27969_464) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_394, 1, 3 + 4 * $I_L27969_464) * flux_total_part($l_S43, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_394, 2, 3 + 4 * $I_L27969_464) + -rho_alb_tile(1 + $I_L27969_394, 1, 3 + 4 * $I_L27969_464) ) * flux_direct_part($l_S43, n_layer) )
27969.                                                    $l_S43 = list_tile(1 + $I_L27969_394)
27969.                                                    flux_up_blue_tile(1 + $I_L27969_394, 4 + 4 * $I_L27969_464) = flux_up_blue_tile(1 + $I_L27969_394, 4 + 4 * $I_L27969_464) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_394, 1, 4 + 4 * $I_L27969_464) * flux_total_part($l_S43, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_394, 2, 4 + 4 * $I_L27969_464) + -rho_alb_tile(1 + $I_L27969_394, 1, 4 + 4 * $I_L27969_464) ) * flux_direct_part($l_S43, n_layer) )
27969.                                                    $I_L27969_394 = 1 + $I_L27969_394
27969.                                                    if ( $I_L27969_394 >= n_point_tile ) exit
27969.                                                 enddo
27969.                                                 $I_L27969_464 = 1 + $I_L27969_464
27969.                                                 if ( $I_L27969_464 >= _rsh( n_tile, 2 ) ) exit
27969.                                              enddo
27969.                                              $I_L27969_426 = and( 0xfffffffffffffffcUL, n_tile )
27969.                                           endif
27969.                                           if ( $I_L27969_426 < n_tile ) then
27969.                                              $I_L27969_459 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $I_L27969_394 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                                 do
27969.                                                    $l_S43 = list_tile(1 + $I_L27969_394)
27969.                                                    flux_up_blue_tile(1 + $I_L27969_394, $I_L27969_426 + $I_L27969_459 + 1) = flux_up_blue_tile(1 + $I_L27969_394, $I_L27969_426 + $I_L27969_459 + 1) + weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_394, 1, $I_L27969_426 + $I_L27969_459 + 1) * flux_total_part($l_S43, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_394, 2, $I_L27969_426 + $I_L27969_459 + 1) + -rho_alb_tile(1 + $I_L27969_394, 1, $I_L27969_426 + $I_L27969_459 + 1) ) * flux_direct_part($l_S43, n_layer) )
27969.                                                    $I_L27969_394 = 1 + $I_L27969_394
27969.                                                    if ( $I_L27969_394 >= n_point_tile ) exit
27969.                                                 enddo
27969.                                                 $I_L27969_459 = 1 + $I_L27969_459
27969.                                                 if ( $I_L27969_459 >= n_tile + -$I_L27969_426 ) exit
27969.                                              enddo
27969.                                           endif
27969.                                        endif
27969.                                     endif
27969.                                  endif
27969.                               else if ( isolir == 2 ) then
27969.                                  if ( n_tile > 0 ) then
27969.                                     if ( n_point_tile > 0 ) then
27969.                                        $I_L27969_422 = 0
27969.                                        if ( n_tile >= 4 ) then
27969.                                           $I_L27969_466 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $I_L27969_390 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $l_S46 = list_tile(1 + $I_L27969_390)
27969.                                                 flux_up_tile(1 + $I_L27969_390, 1 + 4 * $I_L27969_466) = flux_up_tile(1 + $I_L27969_390, 1 + 4 * $I_L27969_466) + weight_incr * ( planck_flux_tile(1 + $I_L27969_390, 1 + 4 * $I_L27969_466) + rho_alb_tile(1 + $I_L27969_390, 1, 1 + 4 * $I_L27969_466) * ( flux_total_part($l_S46, 2 + 2 * n_layer) + planck_flux_bottom($l_S46) + -planck_flux_tile(1 + $I_L27969_390, 1 + 4 * $I_L27969_466) ) )
27969.                                                 $l_S46 = list_tile(1 + $I_L27969_390)
27969.                                                 flux_up_tile(1 + $I_L27969_390, 2 + 4 * $I_L27969_466) = flux_up_tile(1 + $I_L27969_390, 2 + 4 * $I_L27969_466) + weight_incr * ( planck_flux_tile(1 + $I_L27969_390, 2 + 4 * $I_L27969_466) + rho_alb_tile(1 + $I_L27969_390, 1, 2 + 4 * $I_L27969_466) * ( flux_total_part($l_S46, 2 + 2 * n_layer) + planck_flux_bottom($l_S46) + -planck_flux_tile(1 + $I_L27969_390, 2 + 4 * $I_L27969_466) ) )
27969.                                                 $l_S46 = list_tile(1 + $I_L27969_390)
27969.                                                 flux_up_tile(1 + $I_L27969_390, 3 + 4 * $I_L27969_466) = flux_up_tile(1 + $I_L27969_390, 3 + 4 * $I_L27969_466) + weight_incr * ( planck_flux_tile(1 + $I_L27969_390, 3 + 4 * $I_L27969_466) + rho_alb_tile(1 + $I_L27969_390, 1, 3 + 4 * $I_L27969_466) * ( flux_total_part($l_S46, 2 + 2 * n_layer) + planck_flux_bottom($l_S46) + -planck_flux_tile(1 + $I_L27969_390, 3 + 4 * $I_L27969_466) ) )
27969.                                                 $l_S46 = list_tile(1 + $I_L27969_390)
27969.                                                 flux_up_tile(1 + $I_L27969_390, 4 + 4 * $I_L27969_466) = flux_up_tile(1 + $I_L27969_390, 4 + 4 * $I_L27969_466) + weight_incr * ( planck_flux_tile(1 + $I_L27969_390, 4 + 4 * $I_L27969_466) + rho_alb_tile(1 + $I_L27969_390, 1, 4 + 4 * $I_L27969_466) * ( flux_total_part($l_S46, 2 + 2 * n_layer) + planck_flux_bottom($l_S46) + -planck_flux_tile(1 + $I_L27969_390, 4 + 4 * $I_L27969_466) ) )
27969.                                                 $I_L27969_390 = 1 + $I_L27969_390
27969.                                                 if ( $I_L27969_390 >= n_point_tile ) exit
27969.                                              enddo
27969.                                              $I_L27969_466 = 1 + $I_L27969_466
27969.                                              if ( $I_L27969_466 >= _rsh( n_tile, 2 ) ) exit
27969.                                           enddo
27969.                                           $I_L27969_422 = and( 0xfffffffffffffffcUL, n_tile )
27969.                                        endif
27969.                                        if ( $I_L27969_422 < n_tile ) then
27969.                                           $I_L27969_453 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $I_L27969_390 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $l_S46 = list_tile(1 + $I_L27969_390)
27969.                                                 flux_up_tile(1 + $I_L27969_390, $I_L27969_422 + $I_L27969_453 + 1) = flux_up_tile(1 + $I_L27969_390, $I_L27969_422 + $I_L27969_453 + 1) + weight_incr * ( planck_flux_tile(1 + $I_L27969_390, $I_L27969_422 + $I_L27969_453 + 1) + rho_alb_tile(1 + $I_L27969_390, 1, $I_L27969_422 + $I_L27969_453 + 1) * ( flux_total_part($l_S46, 2 + 2 * n_layer) + planck_flux_bottom($l_S46) + -planck_flux_tile(1 + $I_L27969_390, $I_L27969_422 + $I_L27969_453 + 1) ) )
27969.                                                 $I_L27969_390 = 1 + $I_L27969_390
27969.                                                 if ( $I_L27969_390 >= n_point_tile ) exit
27969.                                              enddo
27969.                                              $I_L27969_453 = 1 + $I_L27969_453
27969.                                              if ( $I_L27969_453 >= n_tile + -$I_L27969_422 ) exit
27969.                                           enddo
27969.                                        endif
27969.                                     endif
27969.                                  endif
27969.                               endif
27969.                            else
27969.                               if ( i_angular_integration == 3 ) then
27969.                                  _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$184,  _substr(t$183,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
27969.                                  ierr = 1
27969.                               endif
27969.                            endif
27969.                         else if ( i_angular_integration == 1 ) then
27969.                            goto 40
27969.                            goto 50
27969.                         else if ( i_angular_integration == 2 ) then
27969.    40                      continue
27969.                            if ( isolir == 1 ) then
27969.                               if ( n_tile > 0 ) then
27969.                                  if ( n_point_tile > 0 ) then
27969.                                     $I_L27969_418 = 0
27969.                                     if ( n_tile >= 4 ) then
27969.                                        $I_L27969_468 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                        do
27969.                                           $I_L27969_386 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $l_S49 = list_tile(1 + $I_L27969_386)
27969.                                              flux_up_tile(1 + $I_L27969_386, 1 + 4 * $I_L27969_468) = weight_incr * ( rho_alb_tile(1 + $I_L27969_386, 1, 1 + 4 * $I_L27969_468) * flux_total_part($l_S49, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_386, 2, 1 + 4 * $I_L27969_468) + -rho_alb_tile(1 + $I_L27969_386, 1, 1 + 4 * $I_L27969_468) ) * flux_direct_part($l_S49, n_layer) )
27969.                                              $l_S49 = list_tile(1 + $I_L27969_386)
27969.                                              flux_up_tile(1 + $I_L27969_386, 2 + 4 * $I_L27969_468) = weight_incr * ( rho_alb_tile(1 + $I_L27969_386, 1, 2 + 4 * $I_L27969_468) * flux_total_part($l_S49, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_386, 2, 2 + 4 * $I_L27969_468) + -rho_alb_tile(1 + $I_L27969_386, 1, 2 + 4 * $I_L27969_468) ) * flux_direct_part($l_S49, n_layer) )
27969.                                              $l_S49 = list_tile(1 + $I_L27969_386)
27969.                                              flux_up_tile(1 + $I_L27969_386, 3 + 4 * $I_L27969_468) = weight_incr * ( rho_alb_tile(1 + $I_L27969_386, 1, 3 + 4 * $I_L27969_468) * flux_total_part($l_S49, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_386, 2, 3 + 4 * $I_L27969_468) + -rho_alb_tile(1 + $I_L27969_386, 1, 3 + 4 * $I_L27969_468) ) * flux_direct_part($l_S49, n_layer) )
27969.                                              $l_S49 = list_tile(1 + $I_L27969_386)
27969.                                              flux_up_tile(1 + $I_L27969_386, 4 + 4 * $I_L27969_468) = weight_incr * ( rho_alb_tile(1 + $I_L27969_386, 1, 4 + 4 * $I_L27969_468) * flux_total_part($l_S49, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_386, 2, 4 + 4 * $I_L27969_468) + -rho_alb_tile(1 + $I_L27969_386, 1, 4 + 4 * $I_L27969_468) ) * flux_direct_part($l_S49, n_layer) )
27969.                                              $I_L27969_386 = 1 + $I_L27969_386
27969.                                              if ( $I_L27969_386 >= n_point_tile ) exit
27969.                                           enddo
27969.                                           $I_L27969_468 = 1 + $I_L27969_468
27969.                                           if ( $I_L27969_468 >= _rsh( n_tile, 2 ) ) exit
27969.                                        enddo
27969.                                        $I_L27969_418 = and( 0xfffffffffffffffcUL, n_tile )
27969.                                     endif
27969.                                     if ( $I_L27969_418 < n_tile ) then
27969.                                        $I_L27969_447 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                        do
27969.                                           $I_L27969_386 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $l_S49 = list_tile(1 + $I_L27969_386)
27969.                                              flux_up_tile(1 + $I_L27969_386, $I_L27969_418 + $I_L27969_447 + 1) = weight_incr * ( rho_alb_tile(1 + $I_L27969_386, 1, $I_L27969_418 + $I_L27969_447 + 1) * flux_total_part($l_S49, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_386, 2, $I_L27969_418 + $I_L27969_447 + 1) + -rho_alb_tile(1 + $I_L27969_386, 1, $I_L27969_418 + $I_L27969_447 + 1) ) * flux_direct_part($l_S49, n_layer) )
27969.                                              $I_L27969_386 = 1 + $I_L27969_386
27969.                                              if ( $I_L27969_386 >= n_point_tile ) exit
27969.                                           enddo
27969.                                           $I_L27969_447 = 1 + $I_L27969_447
27969.                                           if ( $I_L27969_447 >= n_tile + -$I_L27969_418 ) exit
27969.                                        enddo
27969.                                     endif
27969.                                  endif
27969.                               endif
27969.                               if ( l_blue_flux_surf ) then
27969.                                  if ( n_tile > 0 ) then
27969.                                     if ( n_point_tile > 0 ) then
27969.                                        $I_L27969_420 = 0
27969.                                        if ( n_tile >= 4 ) then
27969.                                           $I_L27969_470 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $I_L27969_388 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $l_S52 = list_tile(1 + $I_L27969_388)
27969.                                                 flux_up_blue_tile(1 + $I_L27969_388, 1 + 4 * $I_L27969_470) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_388, 1, 1 + 4 * $I_L27969_470) * flux_total_part($l_S52, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_388, 2, 1 + 4 * $I_L27969_470) + -rho_alb_tile(1 + $I_L27969_388, 1, 1 + 4 * $I_L27969_470) ) * flux_direct_part($l_S52, n_layer) )
27969.                                                 $l_S52 = list_tile(1 + $I_L27969_388)
27969.                                                 flux_up_blue_tile(1 + $I_L27969_388, 2 + 4 * $I_L27969_470) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_388, 1, 2 + 4 * $I_L27969_470) * flux_total_part($l_S52, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_388, 2, 2 + 4 * $I_L27969_470) + -rho_alb_tile(1 + $I_L27969_388, 1, 2 + 4 * $I_L27969_470) ) * flux_direct_part($l_S52, n_layer) )
27969.                                                 $l_S52 = list_tile(1 + $I_L27969_388)
27969.                                                 flux_up_blue_tile(1 + $I_L27969_388, 3 + 4 * $I_L27969_470) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_388, 1, 3 + 4 * $I_L27969_470) * flux_total_part($l_S52, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_388, 2, 3 + 4 * $I_L27969_470) + -rho_alb_tile(1 + $I_L27969_388, 1, 3 + 4 * $I_L27969_470) ) * flux_direct_part($l_S52, n_layer) )
27969.                                                 $l_S52 = list_tile(1 + $I_L27969_388)
27969.                                                 flux_up_blue_tile(1 + $I_L27969_388, 4 + 4 * $I_L27969_470) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_388, 1, 4 + 4 * $I_L27969_470) * flux_total_part($l_S52, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_388, 2, 4 + 4 * $I_L27969_470) + -rho_alb_tile(1 + $I_L27969_388, 1, 4 + 4 * $I_L27969_470) ) * flux_direct_part($l_S52, n_layer) )
27969.                                                 $I_L27969_388 = 1 + $I_L27969_388
27969.                                                 if ( $I_L27969_388 >= n_point_tile ) exit
27969.                                              enddo
27969.                                              $I_L27969_470 = 1 + $I_L27969_470
27969.                                              if ( $I_L27969_470 >= _rsh( n_tile, 2 ) ) exit
27969.                                           enddo
27969.                                           $I_L27969_420 = and( 0xfffffffffffffffcUL, n_tile )
27969.                                        endif
27969.                                        if ( $I_L27969_420 < n_tile ) then
27969.                                           $I_L27969_450 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $I_L27969_388 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                              do
27969.                                                 $l_S52 = list_tile(1 + $I_L27969_388)
27969.                                                 flux_up_blue_tile(1 + $I_L27969_388, $I_L27969_420 + $I_L27969_450 + 1) = weight_blue_incr * ( rho_alb_tile(1 + $I_L27969_388, 1, $I_L27969_420 + $I_L27969_450 + 1) * flux_total_part($l_S52, 2 + 2 * n_layer) + ( rho_alb_tile(1 + $I_L27969_388, 2, $I_L27969_420 + $I_L27969_450 + 1) + -rho_alb_tile(1 + $I_L27969_388, 1, $I_L27969_420 + $I_L27969_450 + 1) ) * flux_direct_part($l_S52, n_layer) )
27969.                                                 $I_L27969_388 = 1 + $I_L27969_388
27969.                                                 if ( $I_L27969_388 >= n_point_tile ) exit
27969.                                              enddo
27969.                                              $I_L27969_450 = 1 + $I_L27969_450
27969.                                              if ( $I_L27969_450 >= n_tile + -$I_L27969_420 ) exit
27969.                                           enddo
27969.                                        endif
27969.                                     endif
27969.                                  endif
27969.                               endif
27969.                            else if ( isolir == 2 ) then
27969.                               if ( n_tile > 0 ) then
27969.                                  if ( n_point_tile > 0 ) then
27969.                                     $I_L27969_416 = 0
27969.                                     if ( n_tile >= 4 ) then
27969.                                        $I_L27969_472 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                        do
27969.                                           $I_L27969_384 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $l_S55 = list_tile(1 + $I_L27969_384)
27969.                                              flux_up_tile(1 + $I_L27969_384, 1 + 4 * $I_L27969_472) = weight_incr * ( planck_flux_tile(1 + $I_L27969_384, 1 + 4 * $I_L27969_472) + rho_alb_tile(1 + $I_L27969_384, 1, 1 + 4 * $I_L27969_472) * ( flux_total_part($l_S55, 2 + 2 * n_layer) + planck_flux_bottom($l_S55) + -planck_flux_tile(1 + $I_L27969_384, 1 + 4 * $I_L27969_472) ) )
27969.                                              $l_S55 = list_tile(1 + $I_L27969_384)
27969.                                              flux_up_tile(1 + $I_L27969_384, 2 + 4 * $I_L27969_472) = weight_incr * ( planck_flux_tile(1 + $I_L27969_384, 2 + 4 * $I_L27969_472) + rho_alb_tile(1 + $I_L27969_384, 1, 2 + 4 * $I_L27969_472) * ( flux_total_part($l_S55, 2 + 2 * n_layer) + planck_flux_bottom($l_S55) + -planck_flux_tile(1 + $I_L27969_384, 2 + 4 * $I_L27969_472) ) )
27969.                                              $l_S55 = list_tile(1 + $I_L27969_384)
27969.                                              flux_up_tile(1 + $I_L27969_384, 3 + 4 * $I_L27969_472) = weight_incr * ( planck_flux_tile(1 + $I_L27969_384, 3 + 4 * $I_L27969_472) + rho_alb_tile(1 + $I_L27969_384, 1, 3 + 4 * $I_L27969_472) * ( flux_total_part($l_S55, 2 + 2 * n_layer) + planck_flux_bottom($l_S55) + -planck_flux_tile(1 + $I_L27969_384, 3 + 4 * $I_L27969_472) ) )
27969.                                              $l_S55 = list_tile(1 + $I_L27969_384)
27969.                                              flux_up_tile(1 + $I_L27969_384, 4 + 4 * $I_L27969_472) = weight_incr * ( planck_flux_tile(1 + $I_L27969_384, 4 + 4 * $I_L27969_472) + rho_alb_tile(1 + $I_L27969_384, 1, 4 + 4 * $I_L27969_472) * ( flux_total_part($l_S55, 2 + 2 * n_layer) + planck_flux_bottom($l_S55) + -planck_flux_tile(1 + $I_L27969_384, 4 + 4 * $I_L27969_472) ) )
27969.                                              $I_L27969_384 = 1 + $I_L27969_384
27969.                                              if ( $I_L27969_384 >= n_point_tile ) exit
27969.                                           enddo
27969.                                           $I_L27969_472 = 1 + $I_L27969_472
27969.                                           if ( $I_L27969_472 >= _rsh( n_tile, 2 ) ) exit
27969.                                        enddo
27969.                                        $I_L27969_416 = and( 0xfffffffffffffffcUL, n_tile )
27969.                                     endif
27969.                                     if ( $I_L27969_416 < n_tile ) then
27969.                                        $I_L27969_444 = 0
27969. !dir$ blocking_size( 0, 0 )
27969.                                        do
27969.                                           $I_L27969_384 = 0
27969. !dir$ ivdep
27969. !dir$ blocking_size( 0, 0 )
27969.                                           do
27969.                                              $l_S55 = list_tile(1 + $I_L27969_384)
27969.                                              flux_up_tile(1 + $I_L27969_384, $I_L27969_416 + $I_L27969_444 + 1) = weight_incr * ( planck_flux_tile(1 + $I_L27969_384, $I_L27969_416 + $I_L27969_444 + 1) + rho_alb_tile(1 + $I_L27969_384, 1, $I_L27969_416 + $I_L27969_444 + 1) * ( flux_total_part($l_S55, 2 + 2 * n_layer) + planck_flux_bottom($l_S55) + -planck_flux_tile(1 + $I_L27969_384, $I_L27969_416 + $I_L27969_444 + 1) ) )
27969.                                              $I_L27969_384 = 1 + $I_L27969_384
27969.                                              if ( $I_L27969_384 >= n_point_tile ) exit
27969.                                           enddo
27969.                                           $I_L27969_444 = 1 + $I_L27969_444
27969.                                           if ( $I_L27969_444 >= n_tile + -$I_L27969_416 ) exit
27969.                                        enddo
27969.                                     endif
27969.                                  endif
27969.                               endif
27969.                            endif
27969.                            goto 50
27969.                         else if ( i_angular_integration == 3 ) then
27969.                            _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$186,  _substr(t$185,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Tiled surfaces have not yet been ', 0x800600000000L ), _iotype( 'implemented with the spherical harmonic solver.', 0x800600000000L ) ) )
27969.                            ierr = 1
27969.                         else
27969.    50                      continue
27969.                            l_initial = .false.
27969.                         endif
27985.                         if ( ierr /= 0 ) then
27215.                            _free( t$3801 )
27215.                            goto 60
27215.                         endif
27990.                         l_initial = .false.
27992.                         $I_L27784_442 = 1 + $I_L27784_442
27986.                      else
27986.                      endif
27986.                   else
27986.                   endif
27986.                   if ( $I_L27784_442 >= $SC_i_band_esft_I0 ) exit
27986.                enddo
27994.                if ( n_gas <= 1 ) then
27215.                   _free( t$3801 )
27215.                   goto 60
27215.                endif
27999.                $index_change_S59 = index_absorb(-1 + n_gas, i_band)
28000.                if ( i_band_esft(i_band, $index_change_S59) > i_esft_pointer($index_change_S59) ) then
28002.                   i_esft_pointer($index_change_S59) = 1 + i_esft_pointer($index_change_S59)
28005.                   k_esft_mono($index_change_S59) = k_esft(i_esft_pointer($index_change_S59), i_band, $index_change_S59)
28008.                   if ( i_scale_esft(i_band, $index_change_S59) == 2 ) then
28010.                      call scale_absorb( ierr, n_profile, n_layer, gas_mix_ratio(1, 1, $index_change_S59), p(1, 1), t(1, 1), i_top, gas_frac_rescaled(1, 1, $index_change_S59), i_scale_fnc(i_band, $index_change_S59), p_reference($index_change_S59, i_band), t_reference($index_change_S59, i_band), scale_vector(1, i_esft_pointer($index_change_S59), i_band, $index_change_S59), l_doppler($index_change_S59), doppler_correction($index_change_S59), nd_profile, nd_layer, nd_scale_variable )
28024.                      if ( ierr /= 0 ) then
27215.                         _free( t$3801 )
27215.                         goto 60
27215.                      endif
28025.                   else
28025.                   endif
28027.                else if ( -2 + n_gas > 0 ) then
28027.                else
28027.                endif
28027.             else
28027.             endif
28027.          enddo
28027.       endif
28027.    60 continue
28040.       return
28040.       end
28040.       
28668.       
28668.       subroutine solve_band_without_gas( ierr, n_profile, n_layer, d_mass, i_angular_integration, i_2stream, n_order_phase, l_rescale, n_order_gauss, ms_min, ms_max, i_truncation, ls_local_trunc, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm, cg_coeff, uplm_zero, uplm_sol, i_scatter_method, i_solver, isolir, zen_0, zen_00, solar_irrad, planck_flux_top, planck_flux_bottom, diff_planck_band, l_ir_source_quad, diff_planck_band_2, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, planck_flux_ground, l_tile, n_point_tile, n_tile, list_tile, rho_alb_tile, planck_flux_tile, ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud, n_region, k_clr, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, n_column_slv, list_column_slv, i_clm_lyr_chn, i_clm_cld_typ, area_column, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, weight_band, l_initial, flux_direct, flux_down, flux_up, i_direct, radiance, photolysis, l_clear, i_solver_clear, flux_direct_clear, flux_down_clear, flux_up_clear, flux_up_tile, flux_up_blue_tile, l_blue_flux_surf, weight_blue, flux_direct_blue_surf, flux_down_blue_surf, flux_up_blue_surf, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff, nd_point_tile, nd_tile )
28059.       t$1167 = nd_profile
28059.       t$1168 = nd_layer
28201.       t$3846 = _zla( 0, nd_profile )
28059.       t$3847 = _zla( 0, nd_profile )
28201.       t$3848 = _zla( 0, nd_layer )
28059.       t$3849 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
28059.       t$1169 = nd_max_order
28059.       t$3850 = 1 + nd_max_order
28223.       t$3851 = _zla( 0, 1 + nd_max_order )
28059.       t$1170 = nd_sph_coeff
28233.       t$3852 = _zla( 0, nd_sph_coeff )
28059.       t$1171 = nd_radiance_profile
28237.       t$3853 = _zla( 0, nd_radiance_profile )
28059.       t$3854 = _zla( 0, nd_radiance_profile )
28059.       t$3855 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_radiance_profile )
28059.       t$1172 = nd_brdf_basis_fnc
28300.       t$3856 = _zla( 0, nd_brdf_basis_fnc )
28059.       t$3857 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
28059.       t$1173 = nd_brdf_trunc / 2
28059.       t$1174 = nd_brdf_trunc
28059.       t$3858 = _zla( 0, nd_brdf_basis_fnc )
28059.       t$3859 = 1 + nd_brdf_trunc / 2
28302.       t$3860 = _zla( 0, 1 + nd_brdf_trunc / 2 )
28059.       t$3861 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
28059.       t$3862 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
28059.       t$3863 = 1 + nd_brdf_trunc
28302.       t$3864 = _zla( 0, 1 + nd_brdf_trunc )
28059.       t$3865 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
28059.       t$1175 = nd_direction
28059.       t$3866 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
28305.       t$3867 = _zla( 0, nd_direction )
28059.       t$3868 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_direction )
28059.       t$1176 = nd_point_tile
28321.       t$3869 = _zla( 0, nd_point_tile )
28059.       t$1177 = nd_tile
28059.       t$3870 = _zla( 0, nd_point_tile )
28059.       t$3871 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile )
28324.       t$3872 = _zla( 0, nd_tile )
28059.       t$3873 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
28059.       t$3874 = _zla( 0, nd_point_tile ) * _zla( 0, nd_tile )
 2600.       if ( t$30 == 0 ) then
 2600.          t$3880(1) = 4
 2600.          t$3881(1) = 0
 2600.          t$3882(1) = 16
 2600.          t$3877(1) = int( loc( t$29 ), 8 )
 2600.          t$3878(1) = 0
 2600.          t$3879(1) = int( loc( t$3875 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$3877(1), t$3880(1), 1, t$3878(1), t$3879(1), t$3881(1), t$3882(1) )
 2600.       endif
28059.       t$1180 = id_ct
28059.       t$1178 = nd_cloud_type
28059.       t$3884 = nd_layer + -id_ct + 1
28370.       t$3885 = max( 0, nd_layer + -id_ct + 1 )
28059.       t$3886 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
28370.       t$3887 = max( 0, nd_cloud_type )
28059.       t$3888 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
28059.       t$1183 = nd_region
28376.       t$3889 = max( 0, nd_region )
28059.       t$3890 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
28059.       t$3891 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
28059.       t$1181 = ( -1 + id_ct )
28059.       t$1182 = nd_overlap_coeff
28059.       t$3892 = nd_layer + -id_ct + 2
28372.       t$3893 = max( 0, nd_layer + -id_ct + 2 )
28059.       t$3894 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
28372.       t$3895 = max( 0, nd_overlap_coeff )
28059.       t$3896 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
28059.       t$1179 = nd_column
28359.       t$3897 = max( 0, nd_column )
28059.       t$3898 = _zla( 0, nd_profile ) * max( 0, nd_column )
28059.       t$1184 = nd_viewing_level
28383.       t$3899 = max( 0, nd_viewing_level )
28059.       t$3900 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
28059.       t$3901 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
28059.       t$1185 = nd_flux_profile
28399.       t$3902 = max( 0, nd_flux_profile )
28059.       t$3903 = max( 0, nd_flux_profile )
28059.       t$3904 = 1 + nd_layer
28399.       t$3905 = max( 0, 1 + nd_layer )
28059.       t$3906 = max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer )
28059.       t$3907 = _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer )
28059.       t$3908 = _zla( 0, nd_radiance_profile ) * max( 0, nd_viewing_level )
28059.       t$3909 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level )
28059.       t$1186 = nd_j_profile
28416.       t$3910 = max( 0, nd_j_profile )
28059.       t$3911 = max( 0, nd_j_profile )
28059.       t$3912 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile )
28472.       t$3915 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
28468.       t$3916 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
28468.       t$3918 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
28477.       t$3919 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
28477.       t$3921 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8
28481.       t$3922 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
28481.       t$3924 = max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
28464.       t$3925 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
28464.       t$3927 = 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
28466.       t$3928 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28466.       t$3930 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28059.       t$1187 = ( 2 + 2 * nd_layer )
28479.       t$3931 = max( 0, ( 2 + 2 * nd_layer ) )
28059.       t$3932 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
28479.       t$3933 = 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28479.       t$3935 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28483.       t$3936 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28483.       t$3938 = max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28487.       t$3939 = 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28487.       t$3941 = _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28470.       t$3942 = 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28470.       t$3944 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28493.       t$3945 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28493.       t$3947 = max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28489.       t$3948 = 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28489.       t$3950 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28059.       t$3913 = int( _alloc( _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * max( 0, nd_viewing_level ) * 8 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
28472.       t$3914 = t$3913
28468.       t$3917 = t$3913 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
28477.       t$3920 = t$3913 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
28481.       t$3923 = t$3913 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 )
28464.       t$3926 = t$3913 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
28466.       t$3929 = t$3913 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28479.       t$3934 = t$3913 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28483.       t$3937 = t$3913 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28487.       t$3940 = t$3913 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28470.       t$3943 = t$3913 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28493.       t$3946 = t$3913 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28489.       t$3949 = t$3913 + 8 * ( ( max( 0, nd_viewing_level ) * max( 0, nd_j_profile ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_radiance_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, ( 2 + 2 * nd_layer ) ) * 8 + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( 8 * _zla( 0, nd_profile ) + 8 * ( ( max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + max( 0, nd_flux_profile ) * max( 0, 1 + nd_layer ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
28505.       if ( i_angular_integration == 1 .orelse. i_angular_integration == 2 ) then
28507.          if ( isolir == 1 ) then
28509.             if ( n_profile > 0 ) then
28509.                $I_L28509_28 = 0
28509. !dir$ ivdep
28509.                do
28510.                   d_planck_flux_surface(1 + $I_L28509_28) = 0.0
28511.                   flux_inc_down(1 + $I_L28509_28) = ( solar_irrad(1 + $I_L28509_28) * 1.0/zen_0(1 + $I_L28509_28) )
28512.                   flux_inc_direct(1 + $I_L28509_28) = ( solar_irrad(1 + $I_L28509_28) * 1.0/zen_0(1 + $I_L28509_28) )
28513.                   $I_L28509_28 = 1 + $I_L28509_28
28509.                   if ( $I_L28509_28 >= n_profile ) exit
28509.                enddo
28509.             endif
28514.          else if ( isolir == 2 ) then
28516.             if ( n_profile > 0 ) then
28516.                $I_L28516_30 = 0
28516. !dir$ ivdep
28516.                do
28517.                   flux_inc_direct(1 + $I_L28516_30) = 0.0
28518.                   flux_direct_band(1 + $I_L28516_30, n_layer) = 0.0
28519.                   flux_inc_down(1 + $I_L28516_30) = -planck_flux_top(1 + $I_L28516_30)
28520.                   d_planck_flux_surface(1 + $I_L28516_30) = planck_flux_ground(1 + $I_L28516_30) + -planck_flux_bottom(1 + $I_L28516_30)
28522.                   $I_L28516_30 = 1 + $I_L28516_30
28516.                   if ( $I_L28516_30 >= n_profile ) exit
28516.                enddo
28516.             endif
28523.             if ( l_clear ) then
28524.                if ( n_profile > 0 ) then
28524.                   $I_L28524_32 = 0
28524. !dir$ ivdep
28524.                   do
28525.                      flux_direct_clear_band(1 + $I_L28524_32, n_layer) = 0.0
28526.                      $I_L28524_32 = 1 + $I_L28524_32
28524.                      if ( $I_L28524_32 >= n_profile ) exit
28524.                   enddo
28524.                endif
28524.             endif
28524.          endif
28524.       else
28530.          if ( i_angular_integration == 3 ) then
28532.             if ( isolir == 1 ) then
28533.                if ( n_profile > 0 ) then
28533.                   $I_L28533_34 = 0
28533. !dir$ ivdep
28533.                   do
28534.                      i_direct_band(1 + $I_L28533_34, 0) = solar_irrad(1 + $I_L28533_34)
28535.                      flux_inc_down(1 + $I_L28533_34) = 0.0
28536.                      $I_L28533_34 = 1 + $I_L28533_34
28533.                      if ( $I_L28533_34 >= n_profile ) exit
28533.                   enddo
28533.                endif
28537.             else if ( n_profile > 0 ) then
28538.                $I_L28538_36 = 0
28538. !dir$ ivdep
28538.                do
28539.                   flux_inc_down(1 + $I_L28538_36) = -planck_flux_top(1 + $I_L28538_36)
28540.                   d_planck_flux_surface(1 + $I_L28538_36) = planck_flux_ground(1 + $I_L28538_36) + -planck_flux_bottom(1 + $I_L28538_36)
28542.                   $I_L28538_36 = 1 + $I_L28538_36
28538.                   if ( $I_L28538_36 >= n_profile ) exit
28538.                enddo
28538.             endif
28538.          endif
28538.       endif
28547.       if ( n_layer > 0 ) then
28548.          if ( n_profile > 0 ) then
28547.             $I_L28547_40 = 0
28547.             do
28548.                $I_L28548_38 = 0
28548. !dir$ ivdep
28548.                do
28549.                   k_null(1 + $I_L28548_38, 1 + $I_L28547_40) = 0.0
28550.                   $I_L28548_38 = 1 + $I_L28548_38
28548.                   if ( $I_L28548_38 >= n_profile ) exit
28548.                enddo
28551.                $I_L28547_40 = 1 + $I_L28547_40
28550.                if ( $I_L28547_40 >= n_layer ) exit
28550.             enddo
28550.          endif
28550.       endif
28554.       ipa$25538 = .false.
28554.       call monochromatic_radiance( ierr, n_profile, n_layer, d_mass(1, 1), i_angular_integration, i_2stream, l_rescale, n_order_gauss, n_order_phase, ms_min, ms_max, i_truncation, ls_local_trunc(0), accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, ia_sph_mm(0), cg_coeff(1), uplm_zero(1), uplm_sol(1, 1), i_scatter_method, i_solver, k_null(1, 1), ipa$25538, dummy_ke(1, 1), isolir, diff_planck_band(1, 1), l_ir_source_quad, diff_planck_band_2(1, 1), zen_0(1), zen_00(1, 1), flux_inc_direct(1), flux_inc_down(1), i_direct_band(1, 0), d_planck_flux_surface(1), ls_brdf_trunc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), ss_prop, l_cloud, i_cloud, n_cloud_top, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, k_clr, i_region_cloud(1), frac_region(1, id_ct, 1), w_free(1, id_ct), w_cloud(1, id_ct), cloud_overlap(1, -1 + id_ct, 1), n_column_slv(1), list_column_slv(1, 1), i_clm_lyr_chn(1, 1), i_clm_cld_typ(1, 1), area_column(1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), flux_direct_band(1, 0), flux_total_band(1, 1), radiance_band(1, 1, 1), photolysis_band(1, 1), l_clear, i_solver_clear, flux_direct_clear_band(1, 0), flux_total_clear_band(1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_column, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_cloud_type, nd_region, nd_overlap_coeff, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_viewing_level, nd_direction, nd_source_coeff )
28619.       call augment_radiance( n_profile, n_layer, i_angular_integration, i_sph_mode, n_viewing_level, n_direction, isolir, l_clear, l_initial, weight_band, l_blue_flux_surf, weight_blue, flux_direct(1, 0), flux_down(1, 0), flux_up(1, 0), flux_direct_blue_surf(1), flux_down_blue_surf(1), flux_up_blue_surf(1), i_direct(1, 0), radiance(1, 1, 1), photolysis(1, 1), flux_direct_clear(1, 0), flux_down_clear(1, 0), flux_up_clear(1, 0), flux_direct_band(1, 0), flux_total_band(1, 1), i_direct_band(1, 0), radiance_band(1, 1, 1), photolysis_band(1, 1), flux_direct_clear_band(1, 0), flux_total_clear_band(1, 1), nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_layer, nd_viewing_level, nd_direction )
28641.       if ( l_tile ) then
28642.          call augment_tiled_radiance( ierr, n_point_tile, n_tile, list_tile(1), i_angular_integration, isolir, l_initial, weight_band, l_blue_flux_surf, weight_blue, rho_alb_tile(1, 1, 1), flux_up_tile(1, 1), flux_up_blue_tile(1, 1), flux_direct_band(1, n_layer), flux_total_band(1, 2 + 2 * n_layer), planck_flux_tile(1, 1), planck_flux_bottom(1), nd_flux_profile, nd_point_tile, nd_tile, nd_brdf_basis_fnc )
28658.          if ( ierr /= 0 ) then
28059.             _free( t$3913 )
28059.          else
28059.             goto 10
28059.          endif
28059.       else
28059.    10    continue
28663.          l_initial = .false.
28059.          _free( t$3913 )
28059.       endif
28668.       return
28668.       end
28668.       
28821.       
28821.       subroutine solver_homogen_direct( n_profile, n_layer, trans, reflect, s_down, s_up, isolir, diffuse_albedo, direct_albedo, flux_direct_ground, flux_inc_down, d_planck_flux_surface, flux_total, nd_profile, nd_layer )
28686.       t$1190 = nd_profile
28686.       t$1191 = nd_layer
28724.       t$3951 = _zla( 0, nd_profile )
28686.       t$3952 = _zla( 0, nd_profile )
28724.       t$3953 = _zla( 0, nd_layer )
28686.       t$3954 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
28686.       t$1192 = ( 2 + 2 * nd_layer )
28745.       t$3955 = _zla( 0, ( 2 + 2 * nd_layer ) )
28686.       t$3956 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
28686.       t$1193 = ( 1 + nd_layer )
28756.       t$3957 = _zla( 0, ( 1 + nd_layer ) )
28686.       t$3958 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) )
28756.       t$3961 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
28758.       t$3962 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
28758.       t$3964 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
28760.       t$3965 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
28760.       t$3967 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
28762.       t$3968 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
28762.       t$3970 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28764.       t$3971 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28764.       t$3973 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
28686.       t$3959 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 ), 8 )
28756.       t$3960 = t$3959
28758.       t$3963 = t$3959 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
28760.       t$3966 = t$3959 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
28762.       t$3969 = t$3959 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
28764.       t$3972 = t$3959 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28770.       if ( isolir == 1 ) then
28771.          if ( n_profile > 0 ) then
28771.             $I_L28771_56 = 0
28771. !dir$ ivdep
28771.             do
28772.                alpha(1 + $I_L28771_56, 1 + n_layer) = diffuse_albedo(1 + $I_L28771_56)
28773.                s_up_prime(1 + $I_L28771_56, 1 + n_layer) = ( direct_albedo(1 + $I_L28771_56) + -diffuse_albedo(1 + $I_L28771_56) ) * flux_direct_ground(1 + $I_L28771_56)
28776.                $I_L28771_56 = 1 + $I_L28771_56
28771.                if ( $I_L28771_56 >= n_profile ) exit
28771.             enddo
28771.          endif
28777.       else if ( isolir == 2 ) then
28778.          if ( n_profile > 0 ) then
28778.             $I_L28778_58 = 0
28778. !dir$ ivdep
28778.             do
28779.                alpha(1 + $I_L28778_58, 1 + n_layer) = diffuse_albedo(1 + $I_L28778_58)
28780.                s_up_prime(1 + $I_L28778_58, 1 + n_layer) = ( 1.0 + -diffuse_albedo(1 + $I_L28778_58) ) * d_planck_flux_surface(1 + $I_L28778_58)
28783.                $I_L28778_58 = 1 + $I_L28778_58
28778.                if ( $I_L28778_58 >= n_profile ) exit
28778.             enddo
28778.          endif
28778.       endif
28787.       if ( n_layer > 0 ) then
28788.          if ( n_profile > 0 ) then
28788.             $I_L28788_71 = 0
28788.             do
28787.                $I_L28787_69 = 0
28787.                if ( n_layer >= 2 ) then
28787.                   $I_L28787_73 = 0
28787. !dir$ blocking_size( 0, 0 )
28787.                   do
28788.                      $I_L28788_60 = 0
28788. !dir$ ivdep
28788. !dir$ blocking_size( 256, 256 )
28788.                      do
28789.                         $beta_WR0_R0 = 1.0/( 1.0 + -( alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + 1) * reflect($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) ) )
28789.                         beta($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) = $beta_WR0_R0
28791.                         $gamma_WR0_R1 = alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + 1) * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73)
28791.                         gamma($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) = $gamma_WR0_R1
28792.                         $h_WR0_R2 = s_up_prime($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + 1) + alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + 1) * s_down($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73)
28792.                         h($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) = $h_WR0_R2
28793.                         alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) = reflect($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) + $beta_WR0_R0 * $gamma_WR0_R1 * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73)
28795.                         s_up_prime($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) = s_up($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) + $beta_WR0_R0 * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) * $h_WR0_R2
28789.                         $beta_WR0_R0 = 1.0/( 1.0 + -( alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) * reflect($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) ) )
28789.                         beta($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) = $beta_WR0_R0
28791.                         $gamma_WR0_R1 = alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1)
28791.                         gamma($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) = $gamma_WR0_R1
28792.                         $h_WR0_R2 = s_up_prime($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) + alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73) * s_down($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1)
28792.                         h($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) = $h_WR0_R2
28793.                         alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) = reflect($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) + $beta_WR0_R0 * $gamma_WR0_R1 * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1)
28795.                         s_up_prime($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) = s_up($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) + $beta_WR0_R0 * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -2 * $I_L28787_73 + -1) * $h_WR0_R2
28788.                         $I_L28788_60 = 1 + $I_L28788_60
28788.                         if ( $I_L28788_60 >= min( n_profile, 256 + 256 * $I_L28788_71 ) + -256 * $I_L28788_71 ) exit
28788.                      enddo
28797.                      $I_L28787_73 = 1 + $I_L28787_73
28797.                      if ( $I_L28787_73 >= _rsh( n_layer, 1 ) ) exit
28797.                   enddo
28797.                   $I_L28787_69 = and( 0xfffffffffffffffeUL, n_layer )
28797.                endif
28787.                if ( $I_L28787_69 < n_layer ) then
28788.                   $I_L28788_60 = 0
28788. !dir$ ivdep
28788. !dir$ blocking_size( 256, 256 )
28788.                   do
28789.                      $beta_WR0_R0 = 1.0/( 1.0 + -( alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69 + 1) * reflect($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) ) )
28789.                      beta($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) = $beta_WR0_R0
28791.                      $gamma_WR0_R1 = alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69 + 1) * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69)
28791.                      gamma($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) = $gamma_WR0_R1
28792.                      $h_WR0_R2 = s_up_prime($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69 + 1) + alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69 + 1) * s_down($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69)
28792.                      h($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) = $h_WR0_R2
28793.                      alpha($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) = reflect($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) + $beta_WR0_R0 * $gamma_WR0_R1 * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69)
28795.                      s_up_prime($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) = s_up($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) + $beta_WR0_R0 * trans($I_L28788_60 + 256 * $I_L28788_71 + 1, n_layer + -$I_L28787_69) * $h_WR0_R2
28788.                      $I_L28788_60 = 1 + $I_L28788_60
28788.                      if ( $I_L28788_60 >= min( n_profile, 256 + 256 * $I_L28788_71 ) + -256 * $I_L28788_71 ) exit
28788.                   enddo
28788.                endif
28788.                $I_L28788_71 = 1 + $I_L28788_71
28796.                if ( $I_L28788_71 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
28796.             enddo
28796.          endif
28796.       endif
28800.       if ( n_profile > 0 ) then
28800.          $I_L28800_63 = 0
28800. !dir$ ivdep
28800.          do
28801.             $flux_total_WR0_R3 = flux_inc_down(1 + $I_L28800_63)
28801.             flux_total(1 + $I_L28800_63, 2) = $flux_total_WR0_R3
28802.             flux_total(1 + $I_L28800_63, 1) = alpha(1 + $I_L28800_63, 1) * $flux_total_WR0_R3 + s_up_prime(1 + $I_L28800_63, 1)
28803.             $I_L28800_63 = 1 + $I_L28800_63
28800.             if ( $I_L28800_63 >= n_profile ) exit
28800.          enddo
28800.       endif
28806.       if ( n_layer > 0 ) then
28807.          if ( n_profile > 0 ) then
28806.             $I_L28806_67 = 0
28806.             if ( n_layer >= 2 ) then
28806.                $I_L28806_75 = 0
28806.                do
28807.                   $I_L28807_65 = 0
28807. !dir$ ivdep
28807.                   do
28809.                      $flux_total_WR0_R4 = beta(1 + $I_L28807_65, 1 + 2 * $I_L28806_75) * ( h(1 + $I_L28807_65, 1 + 2 * $I_L28806_75) + gamma(1 + $I_L28807_65, 1 + 2 * $I_L28806_75) * flux_total(1 + $I_L28807_65, 2 + 4 * $I_L28806_75) )
28809.                      flux_total(1 + $I_L28807_65, 3 + 4 * $I_L28806_75) = $flux_total_WR0_R4
28812.                      flux_total(1 + $I_L28807_65, 4 + 4 * $I_L28806_75) = s_down(1 + $I_L28807_65, 1 + 2 * $I_L28806_75) + trans(1 + $I_L28807_65, 1 + 2 * $I_L28806_75) * flux_total(1 + $I_L28807_65, 2 + 4 * $I_L28806_75) + reflect(1 + $I_L28807_65, 1 + 2 * $I_L28806_75) * $flux_total_WR0_R4
28809.                      $flux_total_WR0_R4 = beta(1 + $I_L28807_65, 2 + 2 * $I_L28806_75) * ( h(1 + $I_L28807_65, 2 + 2 * $I_L28806_75) + gamma(1 + $I_L28807_65, 2 + 2 * $I_L28806_75) * flux_total(1 + $I_L28807_65, 4 + 4 * $I_L28806_75) )
28809.                      flux_total(1 + $I_L28807_65, 5 + 4 * $I_L28806_75) = $flux_total_WR0_R4
28812.                      flux_total(1 + $I_L28807_65, 6 + 4 * $I_L28806_75) = s_down(1 + $I_L28807_65, 2 + 2 * $I_L28806_75) + trans(1 + $I_L28807_65, 2 + 2 * $I_L28806_75) * flux_total(1 + $I_L28807_65, 4 + 4 * $I_L28806_75) + reflect(1 + $I_L28807_65, 2 + 2 * $I_L28806_75) * $flux_total_WR0_R4
28815.                      $I_L28807_65 = 1 + $I_L28807_65
28807.                      if ( $I_L28807_65 >= n_profile ) exit
28807.                   enddo
28816.                   $I_L28806_75 = 1 + $I_L28806_75
28815.                   if ( $I_L28806_75 >= _rsh( n_layer, 1 ) ) exit
28815.                enddo
28816.                $I_L28806_67 = and( 0xfffffffffffffffeUL, n_layer )
28816.             endif
28806.             if ( $I_L28806_67 < n_layer ) then
28807.                $I_L28807_65 = 0
28807. !dir$ ivdep
28807.                do
28809.                   $flux_total_WR0_R4 = beta(1 + $I_L28807_65, 1 + $I_L28806_67) * ( h(1 + $I_L28807_65, 1 + $I_L28806_67) + gamma(1 + $I_L28807_65, 1 + $I_L28806_67) * flux_total(1 + $I_L28807_65, 2 + 2 * $I_L28806_67) )
28809.                   flux_total(1 + $I_L28807_65, 3 + 2 * $I_L28806_67) = $flux_total_WR0_R4
28812.                   flux_total(1 + $I_L28807_65, 4 + 2 * $I_L28806_67) = s_down(1 + $I_L28807_65, 1 + $I_L28806_67) + trans(1 + $I_L28807_65, 1 + $I_L28806_67) * flux_total(1 + $I_L28807_65, 2 + 2 * $I_L28806_67) + reflect(1 + $I_L28807_65, 1 + $I_L28806_67) * $flux_total_WR0_R4
28815.                   $I_L28807_65 = 1 + $I_L28807_65
28807.                   if ( $I_L28807_65 >= n_profile ) exit
28807.                enddo
28807.             endif
28807.          endif
28807.       endif
28686.       _free( t$3959 )
28821.       return
28821.       end
28821.       
29158.       
29158.       subroutine solver_mix_direct( n_profile, n_layer, n_cloud_top, t, r, s_down, s_up, t_cloud, r_cloud, s_down_cloud, s_up_cloud, v11, v21, v12, v22, u11, u12, u21, u22, flux_inc_down, source_ground_free, source_ground_cloud, albedo_surface_diff, flux_total, nd_profile, nd_layer, id_ct )
28842.       t$1195 = nd_profile
28842.       t$1196 = nd_layer
28880.       t$3974 = _zla( 0, nd_profile )
28842.       t$3975 = _zla( 0, nd_profile )
28880.       t$3976 = _zla( 0, nd_layer )
28842.       t$3977 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
28842.       t$1197 = ( -1 + id_ct )
28842.       t$3978 = nd_layer + -id_ct + 2
28897.       t$3979 = _zla( 0, nd_layer + -id_ct + 2 )
28842.       t$3980 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
28842.       t$1198 = ( 2 + 2 * nd_layer )
28923.       t$3981 = _zla( 0, ( 2 + 2 * nd_layer ) )
28842.       t$3982 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
28842.       t$1199 = ( 1 + nd_layer )
28935.       t$3983 = _zla( 0, ( 1 + nd_layer ) )
28842.       t$3984 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) )
28935.       t$3987 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
28938.       t$3988 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
28938.       t$3990 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
28937.       t$3991 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
28937.       t$3993 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
28936.       t$3994 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
28936.       t$3996 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28947.       t$3997 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28947.       t$3999 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28948.       t$4000 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28948.       t$4002 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
28949.       t$4003 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
28949.       t$4005 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28842.       t$4006 = 1 + nd_layer
28964.       t$4007 = _zla( 0, 1 + nd_layer )
28842.       t$4008 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
28964.       t$4009 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28964.       t$4011 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28966.       t$4012 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
28966.       t$4014 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
28968.       t$4015 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28968.       t$4017 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
28970.       t$4018 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28970.       t$4020 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
28939.       t$4021 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28939.       t$4023 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
28940.       t$4024 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28940.       t$4026 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
28943.       t$4027 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28943.       t$4029 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
28944.       t$4030 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
28944.       t$4032 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
28945.       t$4033 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
28945.       t$4035 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
28946.       t$4036 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
28946.       t$4038 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56
28950.       t$4039 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
28950.       t$4041 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64
28951.       t$4042 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
28951.       t$4044 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72
28842.       t$3985 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72 ), 8 )
28935.       t$3986 = t$3985
28938.       t$3989 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
28937.       t$3992 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
28936.       t$3995 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
28947.       t$3998 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28948.       t$4001 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
28949.       t$4004 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
28964.       t$4010 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28966.       t$4013 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
28968.       t$4016 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
28970.       t$4019 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
28939.       t$4022 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
28940.       t$4025 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
28943.       t$4028 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
28944.       t$4031 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
28945.       t$4034 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
28946.       t$4037 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
28950.       t$4040 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56
28951.       t$4043 = t$3985 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64
28976.       if ( n_profile > 0 ) then
28976.          $I_L28976_132 = 0
28976. !dir$ ivdep
28976.          do
28977.             alpha11(1 + $I_L28976_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L28976_132)
28978.             alpha22(1 + $I_L28976_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L28976_132)
28979.             alpha21(1 + $I_L28976_132, 1 + n_layer) = 0.0
28980.             alpha12(1 + $I_L28976_132, 1 + n_layer) = 0.0
28981.             g1(1 + $I_L28976_132, 1 + n_layer) = source_ground_free(1 + $I_L28976_132)
28982.             g2(1 + $I_L28976_132, 1 + n_layer) = source_ground_cloud(1 + $I_L28976_132)
29077.             flux_total(1 + $I_L28976_132, 2) = flux_inc_down(1 + $I_L28976_132)
28983.             $I_L28976_132 = 1 + $I_L28976_132
28976.             if ( $I_L28976_132 >= n_profile ) exit
28976.          enddo
28976.       endif
28986.       if ( n_cloud_top + -n_layer <= 0 ) then
28987.          if ( n_profile > 0 ) then
28987.             $I_L28987_167 = 0
28987.             do
28986.                $I_L28986_161 = 0
28986. !dir$ blocking_size( 0, 0 )
28986.                do
28987.                   $I_L28987_134 = 0
28987. !dir$ ivdep
28987. !dir$ blocking_size( 256, 256 )
28987.                   do
28989.                      $theta11_S7 = alpha11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + alpha12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28990.                      $theta12_S6 = alpha11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + alpha12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28991.                      $theta21_S4 = alpha21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + alpha22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28992.                      $theta22_S5 = alpha21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + alpha22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) * v22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28993.                      $beta21_WR0_R0 = -( $theta21_S4 * r($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) )
28993.                      beta21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $beta21_WR0_R0
28994.                      $beta22_inv_WR0_R1 = 1.0/( 1.0 + -( $theta22_S5 * r_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) ) )
28994.                      beta22_inv($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $beta22_inv_WR0_R1
28996.                      $gamma21_WR0_R2 = $theta21_S4 * t($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28996.                      gamma21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $gamma21_WR0_R2
28997.                      $gamma22_WR0_R3 = $theta22_S5 * t_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28997.                      gamma22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $gamma22_WR0_R3
28998.                      $h2_WR0_R4 = g2($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) + $theta21_S4 * s_down($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $theta22_S5 * s_down_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161)
28998.                      h2($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $h2_WR0_R4
29000.                      $lambda_S8 = $theta12_S6 * r_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) * $beta22_inv_WR0_R1
29001.                      $beta11_inv_WR0_R5 = 1.0/( $lambda_S8 * $beta21_WR0_R0 + -( $theta11_S7 * r($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) ) + 1.0 )
29001.                      beta11_inv($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $beta11_inv_WR0_R5
29003.                      $gamma11_WR0_R6 = $theta11_S7 * t($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S8 * $gamma21_WR0_R2
29003.                      gamma11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $gamma11_WR0_R6
29004.                      $gamma12_WR0_R7 = $theta12_S6 * t_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S8 * $gamma22_WR0_R3
29004.                      gamma12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $gamma12_WR0_R7
29005.                      $h1_WR0_R8 = g1($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + 1) + $theta11_S7 * s_down($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $theta12_S6 * s_down_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S8 * $h2_WR0_R4
29005.                      h1($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = $h1_WR0_R8
29007.                      $lambda_S9 = u22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * t_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) * $beta22_inv_WR0_R1
29008.                      $lambda_bar_S10 = ( u21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * t($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S9 * $beta21_WR0_R0 ) * $beta11_inv_WR0_R5
29010.                      alpha21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = u21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * r($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S9 * $gamma21_WR0_R2 + $lambda_bar_S10 * $gamma11_WR0_R6
29012.                      alpha22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = u22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * r_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S9 * $gamma22_WR0_R3 + $lambda_bar_S10 * $gamma12_WR0_R7
29014.                      g2($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = u21($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * s_up($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + u22($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * s_up_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S9 * $h2_WR0_R4 + $lambda_bar_S10 * $h1_WR0_R8
29017.                      $lambda_S11 = u12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * t_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) * $beta22_inv_WR0_R1
29018.                      $lambda_bar_S12 = ( u11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * t($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S11 * $beta21_WR0_R0 ) * $beta11_inv_WR0_R5
29020.                      alpha11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = u11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * r($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S11 * $gamma21_WR0_R2 + $lambda_bar_S12 * $gamma11_WR0_R6
29022.                      alpha12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = u12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * r_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S11 * $gamma22_WR0_R3 + $lambda_bar_S12 * $gamma12_WR0_R7
29024.                      g1($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) = u11($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * s_up($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + u12($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161 + -1) * s_up_cloud($I_L28987_134 + 256 * $I_L28987_167 + 1, n_layer + -$I_L28986_161) + $lambda_S11 * $h2_WR0_R4 + $lambda_bar_S12 * $h1_WR0_R8
28987.                      $I_L28987_134 = 1 + $I_L28987_134
28987.                      if ( $I_L28987_134 >= min( n_profile, 256 + 256 * $I_L28987_167 ) + -256 * $I_L28987_167 ) exit
28987.                   enddo
29028.                   $I_L28986_161 = 1 + $I_L28986_161
29028.                   if ( $I_L28986_161 >= n_layer + -n_cloud_top + 1 ) exit
29028.                enddo
28987.                $I_L28987_167 = 1 + $I_L28987_167
29027.                if ( $I_L28987_167 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
29027.             enddo
29027.          endif
29027.       endif
29033.       if ( n_cloud_top > 1 ) then
29036.          if ( n_profile > 0 ) then
29038.             if ( n_cloud_top < n_layer ) then
29036.                $I_L29036_137 = 0
29036. !dir$ ivdep
29036.                do
29041.                   $theta11_S14 = alpha11(1 + $I_L29036_137, n_cloud_top) * v11(1 + $I_L29036_137, -1 + n_cloud_top) + alpha12(1 + $I_L29036_137, n_cloud_top) * v21(1 + $I_L29036_137, -1 + n_cloud_top)
29046.                   $beta11_inv_WR0_R9 = 1.0/( 1.0 + -( $theta11_S14 * r(1 + $I_L29036_137, -1 + n_cloud_top) ) )
29046.                   beta11_inv(1 + $I_L29036_137, -1 + n_cloud_top) = $beta11_inv_WR0_R9
29047.                   $gamma11_WR0_R10 = $theta11_S14 * t(1 + $I_L29036_137, -1 + n_cloud_top)
29047.                   gamma11(1 + $I_L29036_137, -1 + n_cloud_top) = $gamma11_WR0_R10
29048.                   $h1_WR0_R11 = g1(1 + $I_L29036_137, n_cloud_top) + $theta11_S14 * s_down(1 + $I_L29036_137, -1 + n_cloud_top)
29048.                   h1(1 + $I_L29036_137, -1 + n_cloud_top) = $h1_WR0_R11
29050.                   $lambda_S15 = t(1 + $I_L29036_137, -1 + n_cloud_top) * $beta11_inv_WR0_R9
29051.                   alpha11(1 + $I_L29036_137, -1 + n_cloud_top) = r(1 + $I_L29036_137, -1 + n_cloud_top) + $lambda_S15 * $gamma11_WR0_R10
29052.                   g1(1 + $I_L29036_137, -1 + n_cloud_top) = s_up(1 + $I_L29036_137, -1 + n_cloud_top) + $lambda_S15 * $h1_WR0_R11
29054.                   $I_L29036_137 = 1 + $I_L29036_137
29044.                   if ( $I_L29036_137 >= n_profile ) exit
29044.                enddo
29044.             else
29036.                $I_L29036_155 = 0
29036. !dir$ ivdep
29036.                do
29043.                   $theta11_S14 = alpha11(1 + $I_L29036_155, n_cloud_top)
29046.                   $beta11_inv_WR0_R12 = 1.0/( 1.0 + -( $theta11_S14 * r(1 + $I_L29036_155, -1 + n_cloud_top) ) )
29046.                   beta11_inv(1 + $I_L29036_155, -1 + n_cloud_top) = $beta11_inv_WR0_R12
29047.                   $gamma11_WR0_R13 = $theta11_S14 * t(1 + $I_L29036_155, -1 + n_cloud_top)
29047.                   gamma11(1 + $I_L29036_155, -1 + n_cloud_top) = $gamma11_WR0_R13
29048.                   $h1_WR0_R14 = g1(1 + $I_L29036_155, n_cloud_top) + $theta11_S14 * s_down(1 + $I_L29036_155, -1 + n_cloud_top)
29048.                   h1(1 + $I_L29036_155, -1 + n_cloud_top) = $h1_WR0_R14
29050.                   $lambda_S15 = t(1 + $I_L29036_155, -1 + n_cloud_top) * $beta11_inv_WR0_R12
29051.                   alpha11(1 + $I_L29036_155, -1 + n_cloud_top) = r(1 + $I_L29036_155, -1 + n_cloud_top) + $lambda_S15 * $gamma11_WR0_R13
29052.                   g1(1 + $I_L29036_155, -1 + n_cloud_top) = s_up(1 + $I_L29036_155, -1 + n_cloud_top) + $lambda_S15 * $h1_WR0_R14
29054.                   $I_L29036_155 = 1 + $I_L29036_155
29044.                   if ( $I_L29036_155 >= n_profile ) exit
29044.                enddo
29044.             endif
29044.          endif
29044.       endif
29059.       if ( 2 + -n_cloud_top < 0 ) then
29060.          if ( n_profile > 0 ) then
29060.             $I_L29060_169 = 0
29060.             do
29059.                $I_L29059_163 = 0
29059.                if ( -4 + n_cloud_top >= 0 ) then
29059.                   $I_L29059_173 = 0
29059. !dir$ blocking_size( 0, 0 )
29059.                   do
29060.                      $I_L29060_139 = 0
29060. !dir$ ivdep
29060. !dir$ blocking_size( 256, 256 )
29060.                      do
29062.                         $beta11_inv_WR0_R15 = 1.0/( 1.0 + -( alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -1) * r($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) ) )
29062.                         beta11_inv($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) = $beta11_inv_WR0_R15
29064.                         $gamma11_WR0_R16 = alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -1) * t($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2)
29064.                         gamma11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) = $gamma11_WR0_R16
29065.                         $h1_WR0_R17 = g1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -1) + alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -1) * s_down($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2)
29065.                         h1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) = $h1_WR0_R17
29067.                         $lambda_S18 = t($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) * $beta11_inv_WR0_R15
29068.                         alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) = r($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) + $lambda_S18 * $gamma11_WR0_R16
29069.                         g1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) = s_up($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) + $lambda_S18 * $h1_WR0_R17
29062.                         $beta11_inv_WR0_R15 = 1.0/( 1.0 + -( alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) * r($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) ) )
29062.                         beta11_inv($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) = $beta11_inv_WR0_R15
29064.                         $gamma11_WR0_R16 = alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) * t($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3)
29064.                         gamma11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) = $gamma11_WR0_R16
29065.                         $h1_WR0_R17 = g1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) + alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -2) * s_down($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3)
29065.                         h1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) = $h1_WR0_R17
29067.                         $lambda_S18 = t($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) * $beta11_inv_WR0_R15
29068.                         alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) = r($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) + $lambda_S18 * $gamma11_WR0_R16
29069.                         g1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) = s_up($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -2 * $I_L29059_173 + -3) + $lambda_S18 * $h1_WR0_R17
29060.                         $I_L29060_139 = 1 + $I_L29060_139
29060.                         if ( $I_L29060_139 >= min( n_profile, 256 + 256 * $I_L29060_169 ) + -256 * $I_L29060_169 ) exit
29060.                      enddo
29072.                      $I_L29059_173 = 1 + $I_L29059_173
29072.                      if ( $I_L29059_173 >= _rsh( -2 + n_cloud_top, 1 ) ) exit
29072.                   enddo
29072.                   $I_L29059_163 = and( 0xfffffffffffffffeUL, -2 + n_cloud_top )
29072.                endif
29059.                if ( $I_L29059_163 < -2 + n_cloud_top ) then
29060.                   $I_L29060_139 = 0
29060. !dir$ ivdep
29060. !dir$ blocking_size( 256, 256 )
29060.                   do
29062.                      $beta11_inv_WR0_R15 = 1.0/( 1.0 + -( alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -1) * r($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) ) )
29062.                      beta11_inv($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) = $beta11_inv_WR0_R15
29064.                      $gamma11_WR0_R16 = alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -1) * t($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2)
29064.                      gamma11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) = $gamma11_WR0_R16
29065.                      $h1_WR0_R17 = g1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -1) + alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -1) * s_down($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2)
29065.                      h1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) = $h1_WR0_R17
29067.                      $lambda_S18 = t($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) * $beta11_inv_WR0_R15
29068.                      alpha11($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) = r($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) + $lambda_S18 * $gamma11_WR0_R16
29069.                      g1($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) = s_up($I_L29060_139 + 256 * $I_L29060_169 + 1, n_cloud_top + -$I_L29059_163 + -2) + $lambda_S18 * $h1_WR0_R17
29060.                      $I_L29060_139 = 1 + $I_L29060_139
29060.                      if ( $I_L29060_139 >= min( n_profile, 256 + 256 * $I_L29060_169 ) + -256 * $I_L29060_169 ) exit
29060.                   enddo
29060.                endif
29060.                $I_L29060_169 = 1 + $I_L29060_169
29071.                if ( $I_L29060_169 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
29071.             enddo
29071.          endif
29071.       endif
29079.       if ( n_cloud_top > 1 ) then
29080.          if ( n_profile > 0 ) then
29080.             $I_L29080_142 = 0
29080. !dir$ ivdep
29080.             do
29081.                flux_total(1 + $I_L29080_142, 1) = alpha11(1 + $I_L29080_142, 1) * flux_total(1 + $I_L29080_142, 2) + g1(1 + $I_L29080_142, 1)
29082.                $I_L29080_142 = 1 + $I_L29080_142
29080.                if ( $I_L29080_142 >= n_profile ) exit
29080.             enddo
29092.             $I_L29092_157 = 0
29092.             if ( -3 + n_cloud_top >= 0 ) then
29092.                $I_L29092_175 = 0
29092.                do
29093.                   $I_L29093_146 = 0
29093. !dir$ ivdep
29093.                   do
29094.                      $flux_total_WR0_R18 = ( gamma11(1 + $I_L29093_146, 1 + 2 * $I_L29092_175) * flux_total(1 + $I_L29093_146, 2 + 4 * $I_L29092_175) + h1(1 + $I_L29093_146, 1 + 2 * $I_L29092_175) ) * beta11_inv(1 + $I_L29093_146, 1 + 2 * $I_L29092_175)
29094.                      flux_total(1 + $I_L29093_146, 3 + 4 * $I_L29092_175) = $flux_total_WR0_R18
29096.                      flux_total(1 + $I_L29093_146, 4 + 4 * $I_L29092_175) = t(1 + $I_L29093_146, 1 + 2 * $I_L29092_175) * flux_total(1 + $I_L29093_146, 2 + 4 * $I_L29092_175) + r(1 + $I_L29093_146, 1 + 2 * $I_L29092_175) * $flux_total_WR0_R18 + s_down(1 + $I_L29093_146, 1 + 2 * $I_L29092_175)
29094.                      $flux_total_WR0_R18 = ( gamma11(1 + $I_L29093_146, 2 + 2 * $I_L29092_175) * flux_total(1 + $I_L29093_146, 4 + 4 * $I_L29092_175) + h1(1 + $I_L29093_146, 2 + 2 * $I_L29092_175) ) * beta11_inv(1 + $I_L29093_146, 2 + 2 * $I_L29092_175)
29094.                      flux_total(1 + $I_L29093_146, 5 + 4 * $I_L29092_175) = $flux_total_WR0_R18
29096.                      flux_total(1 + $I_L29093_146, 6 + 4 * $I_L29092_175) = t(1 + $I_L29093_146, 2 + 2 * $I_L29092_175) * flux_total(1 + $I_L29093_146, 4 + 4 * $I_L29092_175) + r(1 + $I_L29093_146, 2 + 2 * $I_L29092_175) * $flux_total_WR0_R18 + s_down(1 + $I_L29093_146, 2 + 2 * $I_L29092_175)
29098.                      $I_L29093_146 = 1 + $I_L29093_146
29093.                      if ( $I_L29093_146 >= n_profile ) exit
29093.                   enddo
29099.                   $I_L29092_175 = 1 + $I_L29092_175
29098.                   if ( $I_L29092_175 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
29098.                enddo
29099.                $I_L29092_157 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
29099.             endif
29092.             if ( $I_L29092_157 < -1 + n_cloud_top ) then
29093.                $I_L29093_146 = 0
29093. !dir$ ivdep
29093.                do
29094.                   $flux_total_WR0_R18 = ( gamma11(1 + $I_L29093_146, 1 + $I_L29092_157) * flux_total(1 + $I_L29093_146, 2 + 2 * $I_L29092_157) + h1(1 + $I_L29093_146, 1 + $I_L29092_157) ) * beta11_inv(1 + $I_L29093_146, 1 + $I_L29092_157)
29094.                   flux_total(1 + $I_L29093_146, 3 + 2 * $I_L29092_157) = $flux_total_WR0_R18
29096.                   flux_total(1 + $I_L29093_146, 4 + 2 * $I_L29092_157) = t(1 + $I_L29093_146, 1 + $I_L29092_157) * flux_total(1 + $I_L29093_146, 2 + 2 * $I_L29092_157) + r(1 + $I_L29093_146, 1 + $I_L29092_157) * $flux_total_WR0_R18 + s_down(1 + $I_L29093_146, 1 + $I_L29092_157)
29098.                   $I_L29093_146 = 1 + $I_L29093_146
29093.                   if ( $I_L29093_146 >= n_profile ) exit
29093.                enddo
29093.             endif
29093.          endif
29083.       else if ( n_profile > 0 ) then
29084.          $I_L29084_144 = 0
29084. !dir$ ivdep
29084.          do
29085.             flux_total(1 + $I_L29084_144, 1) = g1(1 + $I_L29084_144, 1) + flux_inc_down(1 + $I_L29084_144) * ( v11(1 + $I_L29084_144, 0) * alpha11(1 + $I_L29084_144, 1) + v21(1 + $I_L29084_144, 0) * alpha12(1 + $I_L29084_144, 1) )
29087.             $I_L29084_144 = 1 + $I_L29084_144
29084.             if ( $I_L29084_144 >= n_profile ) exit
29084.          enddo
29084.       endif
29105.       if ( n_cloud_top <= n_layer ) then
29109.          if ( n_profile > 0 ) then
29109.             $I_L29109_148 = 0
29109. !dir$ ivdep
29109.             do
29110.                $flux_down_1_WR0_R19 = v11(1 + $I_L29109_148, -1 + n_cloud_top) * flux_total(1 + $I_L29109_148, 2 * n_cloud_top)
29111.                $flux_down_2_WR0_R20 = v21(1 + $I_L29109_148, -1 + n_cloud_top) * flux_total(1 + $I_L29109_148, 2 * n_cloud_top)
29112.                $flux_up_1_WR0_R21 = ( gamma11(1 + $I_L29109_148, n_cloud_top) * $flux_down_1_WR0_R19 + gamma12(1 + $I_L29109_148, n_cloud_top) * $flux_down_2_WR0_R20 + h1(1 + $I_L29109_148, n_cloud_top) ) * beta11_inv(1 + $I_L29109_148, n_cloud_top)
29112.                flux_up_1(1 + $I_L29109_148, n_cloud_top) = $flux_up_1_WR0_R21
29114.                $flux_up_2_WR0_R22 = ( gamma21(1 + $I_L29109_148, n_cloud_top) * $flux_down_1_WR0_R19 + gamma22(1 + $I_L29109_148, n_cloud_top) * $flux_down_2_WR0_R20 + h2(1 + $I_L29109_148, n_cloud_top) + -( beta21(1 + $I_L29109_148, n_cloud_top) * $flux_up_1_WR0_R21 ) ) * beta22_inv(1 + $I_L29109_148, n_cloud_top)
29114.                flux_up_2(1 + $I_L29109_148, n_cloud_top) = $flux_up_2_WR0_R22
29117.                $flux_down_1_WR0_R19 = t(1 + $I_L29109_148, n_cloud_top) * $flux_down_1_WR0_R19 + r(1 + $I_L29109_148, n_cloud_top) * $flux_up_1_WR0_R21 + s_down(1 + $I_L29109_148, n_cloud_top)
29117.                flux_down_1(1 + $I_L29109_148, n_cloud_top) = $flux_down_1_WR0_R19
29119.                $flux_down_2_WR0_R20 = t_cloud(1 + $I_L29109_148, n_cloud_top) * $flux_down_2_WR0_R20 + r_cloud(1 + $I_L29109_148, n_cloud_top) * $flux_up_2_WR0_R22 + s_down_cloud(1 + $I_L29109_148, n_cloud_top)
29119.                flux_down_2(1 + $I_L29109_148, n_cloud_top) = $flux_down_2_WR0_R20
29121.                $I_L29109_148 = 1 + $I_L29109_148
29109.                if ( $I_L29109_148 >= n_profile ) exit
29109.             enddo
29109.          endif
29109.       endif
29126.       if ( n_layer + -n_cloud_top > 0 ) then
29127.          if ( n_profile > 0 ) then
29127.             $I_L29127_171 = 0
29127.             do
29126.                $I_L29126_165 = 0
29126. !dir$ blocking_size( 0, 0 )
29126.                do
29127.                   $I_L29127_150 = 0
29127. !dir$ ivdep
29127. !dir$ blocking_size( 256, 256 )
29127.                   do
29128.                      $flux_down_1_WR0_R24 = v11($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165) * flux_down_1($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165) + v12($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165) * flux_down_2($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165)
29128.                      flux_down_1($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) = $flux_down_1_WR0_R24
29130.                      $flux_down_2_WR0_R23 = v21($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165) * flux_down_1($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165) + v22($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165) * flux_down_2($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165)
29130.                      flux_down_2($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) = $flux_down_2_WR0_R23
29132.                      $flux_up_1_WR0_R25 = ( gamma11($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_down_1_WR0_R24 + gamma12($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_down_2_WR0_R23 + h1($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) ) * beta11_inv($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1)
29132.                      flux_up_1($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) = $flux_up_1_WR0_R25
29135.                      $flux_up_2_WR0_R26 = ( gamma21($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_down_1_WR0_R24 + gamma22($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_down_2_WR0_R23 + -( beta21($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_up_1_WR0_R25 ) + h2($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) ) * beta22_inv($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1)
29135.                      flux_up_2($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) = $flux_up_2_WR0_R26
29139.                      $flux_down_1_WR0_R24 = t($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_down_1_WR0_R24 + r($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_up_1_WR0_R25 + s_down($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1)
29139.                      flux_down_1($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) = $flux_down_1_WR0_R24
29141.                      $flux_down_2_WR0_R23 = t_cloud($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_down_2_WR0_R23 + r_cloud($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) * $flux_up_2_WR0_R26 + s_down_cloud($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1)
29141.                      flux_down_2($I_L29127_150 + 256 * $I_L29127_171 + 1, n_cloud_top + $I_L29126_165 + 1) = $flux_down_2_WR0_R23
29127.                      $I_L29127_150 = 1 + $I_L29127_150
29127.                      if ( $I_L29127_150 >= min( n_profile, 256 + 256 * $I_L29127_171 ) + -256 * $I_L29127_171 ) exit
29127.                   enddo
29144.                   $I_L29126_165 = 1 + $I_L29126_165
29144.                   if ( $I_L29126_165 >= ( n_layer + -n_cloud_top ) ) exit
29144.                enddo
29127.                $I_L29127_171 = 1 + $I_L29127_171
29143.                if ( $I_L29127_171 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
29143.             enddo
29143.          endif
29143.       endif
29148.       if ( n_layer + -n_cloud_top >= 0 ) then
29149.          if ( n_profile > 0 ) then
29148.             $I_L29148_159 = 0
29148.             do
29149.                $I_L29149_153 = 0
29149. !dir$ ivdep
29149.                do
29150.                   flux_total(1 + $I_L29149_153, 2 * n_cloud_top + 2 * $I_L29148_159 + 1) = flux_up_1(1 + $I_L29149_153, n_cloud_top + $I_L29148_159) + flux_up_2(1 + $I_L29149_153, n_cloud_top + $I_L29148_159)
29151.                   flux_total(1 + $I_L29149_153, 2 * n_cloud_top + 2 * $I_L29148_159 + 2) = flux_down_1(1 + $I_L29149_153, n_cloud_top + $I_L29148_159) + flux_down_2(1 + $I_L29149_153, n_cloud_top + $I_L29148_159)
29152.                   $I_L29149_153 = 1 + $I_L29149_153
29149.                   if ( $I_L29149_153 >= n_profile ) exit
29149.                enddo
29153.                $I_L29148_159 = 1 + $I_L29148_159
29152.                if ( $I_L29148_159 >= n_layer + -n_cloud_top + 1 ) exit
29152.             enddo
29152.          endif
29152.       endif
28842.       _free( t$3985 )
29158.       return
29158.       end
29158.       
29470.       
29470.       subroutine solver_mix_direct_hogan( n_profile, n_layer, n_cloud_top, t, r, s_down, s_up, t_cloud, r_cloud, s_down_cloud, s_up_cloud, v11, v21, v12, v22, u11, u12, u21, u22, flux_inc_down, source_ground_free, source_ground_cloud, albedo_surface_diff, flux_total, nd_profile, nd_layer, id_ct )
29181.       t$1201 = nd_profile
29181.       t$1202 = nd_layer
29219.       t$4045 = _zla( 0, nd_profile )
29181.       t$4046 = _zla( 0, nd_profile )
29219.       t$4047 = _zla( 0, nd_layer )
29181.       t$4048 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
29181.       t$1203 = ( -1 + id_ct )
29181.       t$4049 = nd_layer + -id_ct + 2
29236.       t$4050 = _zla( 0, nd_layer + -id_ct + 2 )
29181.       t$4051 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
29181.       t$1204 = ( 2 + 2 * nd_layer )
29262.       t$4052 = _zla( 0, ( 2 + 2 * nd_layer ) )
29181.       t$4053 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
29181.       t$1205 = ( 1 + nd_layer )
29274.       t$4054 = _zla( 0, ( 1 + nd_layer ) )
29181.       t$4055 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) )
29274.       t$4058 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
29275.       t$4059 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
29275.       t$4061 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29282.       t$4062 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29282.       t$4064 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29283.       t$4065 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29283.       t$4067 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29181.       t$4068 = 1 + nd_layer
29297.       t$4069 = _zla( 0, 1 + nd_layer )
29181.       t$4070 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
29297.       t$4071 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29297.       t$4073 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29299.       t$4074 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29299.       t$4076 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29301.       t$4077 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29301.       t$4079 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29303.       t$4080 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29303.       t$4082 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29276.       t$4083 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29276.       t$4085 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
29277.       t$4086 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29277.       t$4088 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
29280.       t$4089 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29280.       t$4091 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
29281.       t$4092 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29281.       t$4094 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
29284.       t$4095 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29284.       t$4097 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
29285.       t$4098 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29285.       t$4100 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29181.       t$4056 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 ), 8 )
29274.       t$4057 = t$4056
29275.       t$4060 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
29282.       t$4063 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29283.       t$4066 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29297.       t$4072 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29299.       t$4075 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29301.       t$4078 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29303.       t$4081 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29276.       t$4084 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29277.       t$4087 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
29280.       t$4090 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
29281.       t$4093 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
29284.       t$4096 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
29285.       t$4099 = t$4056 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
29309.       if ( n_profile > 0 ) then
29309.          $I_L29309_132 = 0
29309. !dir$ ivdep
29309.          do
29310.             alpha11(1 + $I_L29309_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L29309_132)
29311.             alpha22(1 + $I_L29309_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L29309_132)
29312.             g1(1 + $I_L29309_132, 1 + n_layer) = source_ground_free(1 + $I_L29309_132)
29313.             g2(1 + $I_L29309_132, 1 + n_layer) = source_ground_cloud(1 + $I_L29309_132)
29393.             flux_total(1 + $I_L29309_132, 2) = flux_inc_down(1 + $I_L29309_132)
29314.             $I_L29309_132 = 1 + $I_L29309_132
29309.             if ( $I_L29309_132 >= n_profile ) exit
29309.          enddo
29309.       endif
29317.       if ( n_cloud_top + -n_layer <= 0 ) then
29318.          if ( n_profile > 0 ) then
29318.             $I_L29318_167 = 0
29318.             do
29317.                $I_L29317_161 = 0
29317. !dir$ blocking_size( 0, 0 )
29317.                do
29318.                   $I_L29318_134 = 0
29318. !dir$ ivdep
29318. !dir$ blocking_size( 256, 256 )
29318.                   do
29320.                      $theta11_S4 = alpha11($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + 1) * v11($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) + alpha22($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + 1) * v21($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161)
29321.                      $theta22_S5 = alpha11($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + 1) * v12($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) + alpha22($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + 1) * v22($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161)
29323.                      $beta11_inv_WR0_R0 = 1.0/( 1.0 + -( $theta11_S4 * r($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) ) )
29323.                      beta11_inv($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = $beta11_inv_WR0_R0
29324.                      gamma11($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = $theta11_S4 * t($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161)
29325.                      $h1_WR0_R1 = g1($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + 1) + $theta11_S4 * s_down($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161)
29325.                      h1($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = $h1_WR0_R1
29327.                      $beta22_inv_WR0_R2 = 1.0/( 1.0 + -( $theta22_S5 * r_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) ) )
29327.                      beta22_inv($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = $beta22_inv_WR0_R2
29328.                      gamma22($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = $theta22_S5 * t_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161)
29329.                      $h2_WR0_R3 = g2($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + 1) + $theta22_S5 * s_down_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161)
29329.                      h2($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = $h2_WR0_R3
29331.                      $lambda1_S7 = s_up($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) + $h1_WR0_R1 * t($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) * $beta11_inv_WR0_R0
29332.                      $lambda2_S6 = s_up_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) + $h2_WR0_R3 * t_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) * $beta22_inv_WR0_R2
29335.                      alpha11($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = r($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) + $theta11_S4 * t($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) * t($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) * $beta11_inv_WR0_R0
29337.                      g1($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = u11($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + -1) * $lambda1_S7 + u12($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + -1) * $lambda2_S6
29339.                      alpha22($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = r_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) + $theta22_S5 * t_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) * t_cloud($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) * $beta22_inv_WR0_R2
29341.                      g2($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161) = u21($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + -1) * $lambda1_S7 + u22($I_L29318_134 + 256 * $I_L29318_167 + 1, n_layer + -$I_L29317_161 + -1) * $lambda2_S6
29318.                      $I_L29318_134 = 1 + $I_L29318_134
29318.                      if ( $I_L29318_134 >= min( n_profile, 256 + 256 * $I_L29318_167 ) + -256 * $I_L29318_167 ) exit
29318.                   enddo
29344.                   $I_L29317_161 = 1 + $I_L29317_161
29344.                   if ( $I_L29317_161 >= n_layer + -n_cloud_top + 1 ) exit
29344.                enddo
29318.                $I_L29318_167 = 1 + $I_L29318_167
29343.                if ( $I_L29318_167 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
29343.             enddo
29343.          endif
29343.       endif
29349.       if ( n_cloud_top > 1 ) then
29352.          if ( n_profile > 0 ) then
29354.             if ( n_cloud_top < n_layer ) then
29352.                $I_L29352_137 = 0
29352. !dir$ ivdep
29352.                do
29357.                   $theta11_S9 = alpha11(1 + $I_L29352_137, n_cloud_top) * v11(1 + $I_L29352_137, -1 + n_cloud_top) + alpha22(1 + $I_L29352_137, n_cloud_top) * v21(1 + $I_L29352_137, -1 + n_cloud_top)
29362.                   $beta11_inv_WR0_R4 = 1.0/( 1.0 + -( $theta11_S9 * r(1 + $I_L29352_137, -1 + n_cloud_top) ) )
29362.                   beta11_inv(1 + $I_L29352_137, -1 + n_cloud_top) = $beta11_inv_WR0_R4
29363.                   $gamma11_WR0_R5 = $theta11_S9 * t(1 + $I_L29352_137, -1 + n_cloud_top)
29363.                   gamma11(1 + $I_L29352_137, -1 + n_cloud_top) = $gamma11_WR0_R5
29364.                   $h1_WR0_R6 = g1(1 + $I_L29352_137, n_cloud_top) + $theta11_S9 * s_down(1 + $I_L29352_137, -1 + n_cloud_top)
29364.                   h1(1 + $I_L29352_137, -1 + n_cloud_top) = $h1_WR0_R6
29366.                   $lambda_S10 = t(1 + $I_L29352_137, -1 + n_cloud_top) * $beta11_inv_WR0_R4
29367.                   alpha11(1 + $I_L29352_137, -1 + n_cloud_top) = r(1 + $I_L29352_137, -1 + n_cloud_top) + $lambda_S10 * $gamma11_WR0_R5
29368.                   g1(1 + $I_L29352_137, -1 + n_cloud_top) = s_up(1 + $I_L29352_137, -1 + n_cloud_top) + $lambda_S10 * $h1_WR0_R6
29370.                   $I_L29352_137 = 1 + $I_L29352_137
29360.                   if ( $I_L29352_137 >= n_profile ) exit
29360.                enddo
29360.             else
29352.                $I_L29352_155 = 0
29352. !dir$ ivdep
29352.                do
29359.                   $theta11_S9 = alpha11(1 + $I_L29352_155, n_cloud_top)
29362.                   $beta11_inv_WR0_R7 = 1.0/( 1.0 + -( $theta11_S9 * r(1 + $I_L29352_155, -1 + n_cloud_top) ) )
29362.                   beta11_inv(1 + $I_L29352_155, -1 + n_cloud_top) = $beta11_inv_WR0_R7
29363.                   $gamma11_WR0_R8 = $theta11_S9 * t(1 + $I_L29352_155, -1 + n_cloud_top)
29363.                   gamma11(1 + $I_L29352_155, -1 + n_cloud_top) = $gamma11_WR0_R8
29364.                   $h1_WR0_R9 = g1(1 + $I_L29352_155, n_cloud_top) + $theta11_S9 * s_down(1 + $I_L29352_155, -1 + n_cloud_top)
29364.                   h1(1 + $I_L29352_155, -1 + n_cloud_top) = $h1_WR0_R9
29366.                   $lambda_S10 = t(1 + $I_L29352_155, -1 + n_cloud_top) * $beta11_inv_WR0_R7
29367.                   alpha11(1 + $I_L29352_155, -1 + n_cloud_top) = r(1 + $I_L29352_155, -1 + n_cloud_top) + $lambda_S10 * $gamma11_WR0_R8
29368.                   g1(1 + $I_L29352_155, -1 + n_cloud_top) = s_up(1 + $I_L29352_155, -1 + n_cloud_top) + $lambda_S10 * $h1_WR0_R9
29370.                   $I_L29352_155 = 1 + $I_L29352_155
29360.                   if ( $I_L29352_155 >= n_profile ) exit
29360.                enddo
29360.             endif
29360.          endif
29360.       endif
29375.       if ( 2 + -n_cloud_top < 0 ) then
29376.          if ( n_profile > 0 ) then
29376.             $I_L29376_169 = 0
29376.             do
29375.                $I_L29375_163 = 0
29375.                if ( -4 + n_cloud_top >= 0 ) then
29375.                   $I_L29375_173 = 0
29375. !dir$ blocking_size( 0, 0 )
29375.                   do
29376.                      $I_L29376_139 = 0
29376. !dir$ ivdep
29376. !dir$ blocking_size( 256, 256 )
29376.                      do
29378.                         $beta11_inv_WR0_R10 = 1.0/( 1.0 + -( alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -1) * r($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) ) )
29378.                         beta11_inv($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) = $beta11_inv_WR0_R10
29380.                         $gamma11_WR0_R11 = alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -1) * t($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2)
29380.                         gamma11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) = $gamma11_WR0_R11
29381.                         $h1_WR0_R12 = g1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -1) + alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -1) * s_down($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2)
29381.                         h1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) = $h1_WR0_R12
29383.                         $lambda_S13 = t($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) * $beta11_inv_WR0_R10
29384.                         alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) = r($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) + $lambda_S13 * $gamma11_WR0_R11
29385.                         g1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) = s_up($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) + $lambda_S13 * $h1_WR0_R12
29378.                         $beta11_inv_WR0_R10 = 1.0/( 1.0 + -( alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) * r($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) ) )
29378.                         beta11_inv($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) = $beta11_inv_WR0_R10
29380.                         $gamma11_WR0_R11 = alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) * t($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3)
29380.                         gamma11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) = $gamma11_WR0_R11
29381.                         $h1_WR0_R12 = g1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) + alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -2) * s_down($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3)
29381.                         h1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) = $h1_WR0_R12
29383.                         $lambda_S13 = t($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) * $beta11_inv_WR0_R10
29384.                         alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) = r($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) + $lambda_S13 * $gamma11_WR0_R11
29385.                         g1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) = s_up($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -2 * $I_L29375_173 + -3) + $lambda_S13 * $h1_WR0_R12
29376.                         $I_L29376_139 = 1 + $I_L29376_139
29376.                         if ( $I_L29376_139 >= min( n_profile, 256 + 256 * $I_L29376_169 ) + -256 * $I_L29376_169 ) exit
29376.                      enddo
29388.                      $I_L29375_173 = 1 + $I_L29375_173
29388.                      if ( $I_L29375_173 >= _rsh( -2 + n_cloud_top, 1 ) ) exit
29388.                   enddo
29388.                   $I_L29375_163 = and( 0xfffffffffffffffeUL, -2 + n_cloud_top )
29388.                endif
29375.                if ( $I_L29375_163 < -2 + n_cloud_top ) then
29376.                   $I_L29376_139 = 0
29376. !dir$ ivdep
29376. !dir$ blocking_size( 256, 256 )
29376.                   do
29378.                      $beta11_inv_WR0_R10 = 1.0/( 1.0 + -( alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -1) * r($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) ) )
29378.                      beta11_inv($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) = $beta11_inv_WR0_R10
29380.                      $gamma11_WR0_R11 = alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -1) * t($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2)
29380.                      gamma11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) = $gamma11_WR0_R11
29381.                      $h1_WR0_R12 = g1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -1) + alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -1) * s_down($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2)
29381.                      h1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) = $h1_WR0_R12
29383.                      $lambda_S13 = t($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) * $beta11_inv_WR0_R10
29384.                      alpha11($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) = r($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) + $lambda_S13 * $gamma11_WR0_R11
29385.                      g1($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) = s_up($I_L29376_139 + 256 * $I_L29376_169 + 1, n_cloud_top + -$I_L29375_163 + -2) + $lambda_S13 * $h1_WR0_R12
29376.                      $I_L29376_139 = 1 + $I_L29376_139
29376.                      if ( $I_L29376_139 >= min( n_profile, 256 + 256 * $I_L29376_169 ) + -256 * $I_L29376_169 ) exit
29376.                   enddo
29376.                endif
29376.                $I_L29376_169 = 1 + $I_L29376_169
29387.                if ( $I_L29376_169 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
29387.             enddo
29387.          endif
29387.       endif
29395.       if ( n_cloud_top > 1 ) then
29396.          if ( n_profile > 0 ) then
29396.             $I_L29396_142 = 0
29396. !dir$ ivdep
29396.             do
29397.                flux_total(1 + $I_L29396_142, 1) = alpha11(1 + $I_L29396_142, 1) * flux_total(1 + $I_L29396_142, 2) + g1(1 + $I_L29396_142, 1)
29398.                $I_L29396_142 = 1 + $I_L29396_142
29396.                if ( $I_L29396_142 >= n_profile ) exit
29396.             enddo
29408.             $I_L29408_157 = 0
29408.             if ( -3 + n_cloud_top >= 0 ) then
29408.                $I_L29408_175 = 0
29408.                do
29409.                   $I_L29409_146 = 0
29409. !dir$ ivdep
29409.                   do
29410.                      $flux_total_WR0_R13 = ( gamma11(1 + $I_L29409_146, 1 + 2 * $I_L29408_175) * flux_total(1 + $I_L29409_146, 2 + 4 * $I_L29408_175) + h1(1 + $I_L29409_146, 1 + 2 * $I_L29408_175) ) * beta11_inv(1 + $I_L29409_146, 1 + 2 * $I_L29408_175)
29410.                      flux_total(1 + $I_L29409_146, 3 + 4 * $I_L29408_175) = $flux_total_WR0_R13
29412.                      flux_total(1 + $I_L29409_146, 4 + 4 * $I_L29408_175) = t(1 + $I_L29409_146, 1 + 2 * $I_L29408_175) * flux_total(1 + $I_L29409_146, 2 + 4 * $I_L29408_175) + r(1 + $I_L29409_146, 1 + 2 * $I_L29408_175) * $flux_total_WR0_R13 + s_down(1 + $I_L29409_146, 1 + 2 * $I_L29408_175)
29410.                      $flux_total_WR0_R13 = ( gamma11(1 + $I_L29409_146, 2 + 2 * $I_L29408_175) * flux_total(1 + $I_L29409_146, 4 + 4 * $I_L29408_175) + h1(1 + $I_L29409_146, 2 + 2 * $I_L29408_175) ) * beta11_inv(1 + $I_L29409_146, 2 + 2 * $I_L29408_175)
29410.                      flux_total(1 + $I_L29409_146, 5 + 4 * $I_L29408_175) = $flux_total_WR0_R13
29412.                      flux_total(1 + $I_L29409_146, 6 + 4 * $I_L29408_175) = t(1 + $I_L29409_146, 2 + 2 * $I_L29408_175) * flux_total(1 + $I_L29409_146, 4 + 4 * $I_L29408_175) + r(1 + $I_L29409_146, 2 + 2 * $I_L29408_175) * $flux_total_WR0_R13 + s_down(1 + $I_L29409_146, 2 + 2 * $I_L29408_175)
29414.                      $I_L29409_146 = 1 + $I_L29409_146
29409.                      if ( $I_L29409_146 >= n_profile ) exit
29409.                   enddo
29415.                   $I_L29408_175 = 1 + $I_L29408_175
29414.                   if ( $I_L29408_175 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
29414.                enddo
29415.                $I_L29408_157 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
29415.             endif
29408.             if ( $I_L29408_157 < -1 + n_cloud_top ) then
29409.                $I_L29409_146 = 0
29409. !dir$ ivdep
29409.                do
29410.                   $flux_total_WR0_R13 = ( gamma11(1 + $I_L29409_146, 1 + $I_L29408_157) * flux_total(1 + $I_L29409_146, 2 + 2 * $I_L29408_157) + h1(1 + $I_L29409_146, 1 + $I_L29408_157) ) * beta11_inv(1 + $I_L29409_146, 1 + $I_L29408_157)
29410.                   flux_total(1 + $I_L29409_146, 3 + 2 * $I_L29408_157) = $flux_total_WR0_R13
29412.                   flux_total(1 + $I_L29409_146, 4 + 2 * $I_L29408_157) = t(1 + $I_L29409_146, 1 + $I_L29408_157) * flux_total(1 + $I_L29409_146, 2 + 2 * $I_L29408_157) + r(1 + $I_L29409_146, 1 + $I_L29408_157) * $flux_total_WR0_R13 + s_down(1 + $I_L29409_146, 1 + $I_L29408_157)
29414.                   $I_L29409_146 = 1 + $I_L29409_146
29409.                   if ( $I_L29409_146 >= n_profile ) exit
29409.                enddo
29409.             endif
29409.          endif
29399.       else if ( n_profile > 0 ) then
29400.          $I_L29400_144 = 0
29400. !dir$ ivdep
29400.          do
29401.             flux_total(1 + $I_L29400_144, 1) = g1(1 + $I_L29400_144, 1) + flux_inc_down(1 + $I_L29400_144) * ( v11(1 + $I_L29400_144, 0) * alpha11(1 + $I_L29400_144, 1) + v21(1 + $I_L29400_144, 0) * alpha22(1 + $I_L29400_144, 1) )
29403.             $I_L29400_144 = 1 + $I_L29400_144
29400.             if ( $I_L29400_144 >= n_profile ) exit
29400.          enddo
29400.       endif
29421.       if ( n_cloud_top <= n_layer ) then
29425.          if ( n_profile > 0 ) then
29425.             $I_L29425_148 = 0
29425. !dir$ ivdep
29425.             do
29426.                $flux_down_1_WR0_R14 = v11(1 + $I_L29425_148, -1 + n_cloud_top) * flux_total(1 + $I_L29425_148, 2 * n_cloud_top)
29427.                $flux_down_2_WR0_R15 = v21(1 + $I_L29425_148, -1 + n_cloud_top) * flux_total(1 + $I_L29425_148, 2 * n_cloud_top)
29428.                $flux_up_1_WR0_R16 = ( gamma11(1 + $I_L29425_148, n_cloud_top) * $flux_down_1_WR0_R14 + h1(1 + $I_L29425_148, n_cloud_top) ) * beta11_inv(1 + $I_L29425_148, n_cloud_top)
29428.                flux_up_1(1 + $I_L29425_148, n_cloud_top) = $flux_up_1_WR0_R16
29430.                $flux_up_2_WR0_R17 = ( gamma22(1 + $I_L29425_148, n_cloud_top) * $flux_down_2_WR0_R15 + h2(1 + $I_L29425_148, n_cloud_top) ) * beta22_inv(1 + $I_L29425_148, n_cloud_top)
29430.                flux_up_2(1 + $I_L29425_148, n_cloud_top) = $flux_up_2_WR0_R17
29432.                $flux_down_1_WR0_R14 = t(1 + $I_L29425_148, n_cloud_top) * $flux_down_1_WR0_R14 + r(1 + $I_L29425_148, n_cloud_top) * $flux_up_1_WR0_R16 + s_down(1 + $I_L29425_148, n_cloud_top)
29432.                flux_down_1(1 + $I_L29425_148, n_cloud_top) = $flux_down_1_WR0_R14
29434.                $flux_down_2_WR0_R15 = t_cloud(1 + $I_L29425_148, n_cloud_top) * $flux_down_2_WR0_R15 + r_cloud(1 + $I_L29425_148, n_cloud_top) * $flux_up_2_WR0_R17 + s_down_cloud(1 + $I_L29425_148, n_cloud_top)
29434.                flux_down_2(1 + $I_L29425_148, n_cloud_top) = $flux_down_2_WR0_R15
29436.                $I_L29425_148 = 1 + $I_L29425_148
29425.                if ( $I_L29425_148 >= n_profile ) exit
29425.             enddo
29425.          endif
29425.       endif
29441.       if ( n_layer + -n_cloud_top > 0 ) then
29442.          if ( n_profile > 0 ) then
29442.             $I_L29442_171 = 0
29442.             do
29441.                $I_L29441_165 = 0
29441. !dir$ blocking_size( 0, 0 )
29441.                do
29442.                   $I_L29442_150 = 0
29442. !dir$ ivdep
29442. !dir$ blocking_size( 256, 256 )
29442.                   do
29443.                      $flux_down_1_WR0_R19 = v11($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165) * flux_down_1($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165) + v12($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165) * flux_down_2($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165)
29443.                      flux_down_1($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) = $flux_down_1_WR0_R19
29445.                      $flux_down_2_WR0_R18 = v21($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165) * flux_down_1($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165) + v22($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165) * flux_down_2($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165)
29445.                      flux_down_2($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) = $flux_down_2_WR0_R18
29447.                      $flux_up_1_WR0_R20 = ( gamma11($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) * $flux_down_1_WR0_R19 + h1($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) ) * beta11_inv($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1)
29447.                      flux_up_1($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) = $flux_up_1_WR0_R20
29449.                      $flux_up_2_WR0_R21 = ( gamma22($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) * $flux_down_2_WR0_R18 + h2($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) ) * beta22_inv($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1)
29449.                      flux_up_2($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) = $flux_up_2_WR0_R21
29451.                      $flux_down_1_WR0_R19 = t($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) * $flux_down_1_WR0_R19 + r($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) * $flux_up_1_WR0_R20 + s_down($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1)
29451.                      flux_down_1($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) = $flux_down_1_WR0_R19
29453.                      $flux_down_2_WR0_R18 = t_cloud($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) * $flux_down_2_WR0_R18 + r_cloud($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) * $flux_up_2_WR0_R21 + s_down_cloud($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1)
29453.                      flux_down_2($I_L29442_150 + 256 * $I_L29442_171 + 1, n_cloud_top + $I_L29441_165 + 1) = $flux_down_2_WR0_R18
29442.                      $I_L29442_150 = 1 + $I_L29442_150
29442.                      if ( $I_L29442_150 >= min( n_profile, 256 + 256 * $I_L29442_171 ) + -256 * $I_L29442_171 ) exit
29442.                   enddo
29456.                   $I_L29441_165 = 1 + $I_L29441_165
29456.                   if ( $I_L29441_165 >= ( n_layer + -n_cloud_top ) ) exit
29456.                enddo
29442.                $I_L29442_171 = 1 + $I_L29442_171
29455.                if ( $I_L29442_171 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
29455.             enddo
29455.          endif
29455.       endif
29460.       if ( n_layer + -n_cloud_top >= 0 ) then
29461.          if ( n_profile > 0 ) then
29460.             $I_L29460_159 = 0
29460.             do
29461.                $I_L29461_153 = 0
29461. !dir$ ivdep
29461.                do
29462.                   flux_total(1 + $I_L29461_153, 2 * n_cloud_top + 2 * $I_L29460_159 + 1) = flux_up_1(1 + $I_L29461_153, n_cloud_top + $I_L29460_159) + flux_up_2(1 + $I_L29461_153, n_cloud_top + $I_L29460_159)
29463.                   flux_total(1 + $I_L29461_153, 2 * n_cloud_top + 2 * $I_L29460_159 + 2) = flux_down_1(1 + $I_L29461_153, n_cloud_top + $I_L29460_159) + flux_down_2(1 + $I_L29461_153, n_cloud_top + $I_L29460_159)
29464.                   $I_L29461_153 = 1 + $I_L29461_153
29461.                   if ( $I_L29461_153 >= n_profile ) exit
29461.                enddo
29465.                $I_L29460_159 = 1 + $I_L29460_159
29464.                if ( $I_L29460_159 >= n_layer + -n_cloud_top + 1 ) exit
29464.             enddo
29464.          endif
29464.       endif
29181.       _free( t$4056 )
29470.       return
29470.       end
29470.       
29790.       
29790.       subroutine solver_triple_app_scat( n_profile, n_layer, n_cloud_top, t, r, s_down, s_up, t_strat, r_strat, s_down_strat, s_up_strat, t_conv, r_conv, s_down_conv, s_up_conv, v11, v12, v13, v21, v22, v23, v31, v32, v33, u11, u12, u13, u21, u22, u23, u31, u32, u33, flux_inc_down, source_ground_free, source_ground_strat, source_ground_conv, albedo_surface_diff, flux_total, nd_profile, nd_layer, id_ct )
29492.       t$1207 = nd_profile
29492.       t$1208 = nd_layer
29531.       t$4101 = _zla( 0, nd_profile )
29492.       t$4102 = _zla( 0, nd_profile )
29531.       t$4103 = _zla( 0, nd_layer )
29492.       t$4104 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
29492.       t$1209 = ( -1 + id_ct )
29492.       t$4105 = nd_layer + -id_ct + 2
29556.       t$4106 = _zla( 0, nd_layer + -id_ct + 2 )
29492.       t$4107 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
29492.       t$1210 = ( 2 + 2 * nd_layer )
29605.       t$4108 = _zla( 0, ( 2 + 2 * nd_layer ) )
29492.       t$4109 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
29492.       t$4110 = 1 + nd_layer
29618.       t$4111 = _zla( 0, 1 + nd_layer )
29492.       t$4112 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
29618.       t$4115 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
29620.       t$4116 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
29620.       t$4118 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29622.       t$4119 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29622.       t$4121 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29630.       t$4122 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29630.       t$4124 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29632.       t$4125 = 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29632.       t$4127 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + 16 * _zla( 0, nd_profile )
29634.       t$4128 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + 16 * _zla( 0, nd_profile )
29634.       t$4130 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + 24 * _zla( 0, nd_profile )
29624.       t$4131 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + 24 * _zla( 0, nd_profile )
29624.       t$4133 = 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29626.       t$4134 = 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29626.       t$4136 = 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
29628.       t$4137 = 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
29628.       t$4139 = 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29492.       t$4113 = int( _alloc( 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 ), 8 )
29618.       t$4114 = t$4113
29620.       t$4117 = t$4113 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
29622.       t$4120 = t$4113 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29630.       t$4123 = t$4113 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29632.       t$4126 = t$4113 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29634.       t$4129 = t$4113 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + 16 * _zla( 0, nd_profile )
29624.       t$4132 = t$4113 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + 24 * _zla( 0, nd_profile )
29626.       t$4135 = t$4113 + 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29628.       t$4138 = t$4113 + 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
29649.       if ( n_profile > 0 ) then
29649.          $I_L29649_112 = 0
29649. !dir$ ivdep
29649.          do
29650.             flux_total(1 + $I_L29649_112, 2) = flux_inc_down(1 + $I_L29649_112)
29651.             $I_L29649_112 = 1 + $I_L29649_112
29649.             if ( $I_L29649_112 >= n_profile ) exit
29649.          enddo
29649.       endif
29652.       if ( -1 + n_cloud_top > 0 ) then
29653.          if ( n_profile > 0 ) then
29652.             $I_L29652_130 = 0
29652.             if ( -3 + n_cloud_top >= 0 ) then
29652.                $I_L29652_140 = 0
29652.                do
29653.                   $I_L29653_114 = 0
29653. !dir$ ivdep
29653.                   do
29654.                      flux_total(1 + $I_L29653_114, 4 + 4 * $I_L29652_140) = t(1 + $I_L29653_114, 1 + 2 * $I_L29652_140) * flux_total(1 + $I_L29653_114, 2 + 4 * $I_L29652_140) + s_down(1 + $I_L29653_114, 1 + 2 * $I_L29652_140)
29654.                      flux_total(1 + $I_L29653_114, 6 + 4 * $I_L29652_140) = t(1 + $I_L29653_114, 2 + 2 * $I_L29652_140) * flux_total(1 + $I_L29653_114, 4 + 4 * $I_L29652_140) + s_down(1 + $I_L29653_114, 2 + 2 * $I_L29652_140)
29656.                      $I_L29653_114 = 1 + $I_L29653_114
29653.                      if ( $I_L29653_114 >= n_profile ) exit
29653.                   enddo
29657.                   $I_L29652_140 = 1 + $I_L29652_140
29656.                   if ( $I_L29652_140 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
29656.                enddo
29657.                $I_L29652_130 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
29657.             endif
29652.             if ( $I_L29652_130 < -1 + n_cloud_top ) then
29653.                $I_L29653_114 = 0
29653. !dir$ ivdep
29653.                do
29654.                   flux_total(1 + $I_L29653_114, 4 + 2 * $I_L29652_130) = t(1 + $I_L29653_114, 1 + $I_L29652_130) * flux_total(1 + $I_L29653_114, 2 + 2 * $I_L29652_130) + s_down(1 + $I_L29653_114, 1 + $I_L29652_130)
29656.                   $I_L29653_114 = 1 + $I_L29653_114
29653.                   if ( $I_L29653_114 >= n_profile ) exit
29653.                enddo
29653.             endif
29653.          endif
29653.       endif
29663.       if ( n_profile > 0 ) then
29663.          $I_L29663_116 = 0
29663. !dir$ ivdep
29663.          do
29664.             flux_down_1(1 + $I_L29663_116, -1 + n_cloud_top) = v11(1 + $I_L29663_116, -1 + n_cloud_top) * flux_total(1 + $I_L29663_116, 2 * n_cloud_top)
29665.             flux_down_2(1 + $I_L29663_116, -1 + n_cloud_top) = v21(1 + $I_L29663_116, -1 + n_cloud_top) * flux_total(1 + $I_L29663_116, 2 * n_cloud_top)
29666.             flux_down_3(1 + $I_L29663_116, -1 + n_cloud_top) = v31(1 + $I_L29663_116, -1 + n_cloud_top) * flux_total(1 + $I_L29663_116, 2 * n_cloud_top)
29667.             $I_L29663_116 = 1 + $I_L29663_116
29663.             if ( $I_L29663_116 >= n_profile ) exit
29663.          enddo
29663.       endif
29669.       $i_S7 = n_cloud_top
29669.       if ( n_layer + -n_cloud_top > 0 ) then
29670.          if ( n_profile > 0 ) then
29669.             $I_L29669_132 = 0
29669. !dir$ blocking_size( 0, 0 )
29669.             do
29670.                $I_L29670_118 = 0
29670. !dir$ ivdep
29670. !dir$ blocking_size( 0, 0 )
29670.                do
29673.                   $flux_propag_1_WR0_R0 = t(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * flux_down_1(1 + $I_L29670_118, n_cloud_top + $I_L29669_132 + -1) + s_down(1 + $I_L29670_118, n_cloud_top + $I_L29669_132)
29673.                   flux_propag_1(1 + $I_L29670_118) = $flux_propag_1_WR0_R0
29675.                   $flux_propag_2_WR0_R1 = t_strat(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * flux_down_2(1 + $I_L29670_118, n_cloud_top + $I_L29669_132 + -1) + s_down_strat(1 + $I_L29670_118, n_cloud_top + $I_L29669_132)
29675.                   flux_propag_2(1 + $I_L29670_118) = $flux_propag_2_WR0_R1
29677.                   $flux_propag_3_WR0_R2 = t_conv(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * flux_down_3(1 + $I_L29670_118, n_cloud_top + $I_L29669_132 + -1) + s_down_conv(1 + $I_L29670_118, n_cloud_top + $I_L29669_132)
29677.                   flux_propag_3(1 + $I_L29670_118) = $flux_propag_3_WR0_R2
29681.                   flux_down_1(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) = v11(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_1_WR0_R0 + v12(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_2_WR0_R1 + v13(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_3_WR0_R2
29684.                   flux_down_2(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) = v21(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_1_WR0_R0 + v22(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_2_WR0_R1 + v23(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_3_WR0_R2
29687.                   flux_down_3(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) = v31(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_1_WR0_R0 + v32(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_2_WR0_R1 + v33(1 + $I_L29670_118, n_cloud_top + $I_L29669_132) * $flux_propag_3_WR0_R2
29691.                   $I_L29670_118 = 1 + $I_L29670_118
29670.                   if ( $I_L29670_118 >= n_profile ) exit
29670.                enddo
29692.                $I_L29669_132 = 1 + $I_L29669_132
29691.                if ( $I_L29669_132 >= ( n_layer + -n_cloud_top ) ) exit
29691.             enddo
29691.          endif
29692.          $i_S7 = n_layer
29692.       endif
29697.       if ( n_profile > 0 ) then
29697.          $I_L29697_120 = 0
29697. !dir$ ivdep
29697.          do
29700.             $flux_down_1_WR0_R3 = t(1 + $I_L29697_120, n_layer) * flux_down_1(1 + $I_L29697_120, -1 + n_layer) + s_down(1 + $I_L29697_120, n_layer)
29700.             flux_down_1(1 + $I_L29697_120, n_layer) = $flux_down_1_WR0_R3
29703.             $flux_down_2_WR0_R4 = t_strat(1 + $I_L29697_120, n_layer) * flux_down_2(1 + $I_L29697_120, -1 + n_layer) + s_down_strat(1 + $I_L29697_120, n_layer)
29703.             flux_down_2(1 + $I_L29697_120, n_layer) = $flux_down_2_WR0_R4
29706.             $flux_down_3_WR0_R5 = t_conv(1 + $I_L29697_120, n_layer) * flux_down_3(1 + $I_L29697_120, -1 + n_layer) + s_down_conv(1 + $I_L29697_120, n_layer)
29706.             flux_down_3(1 + $I_L29697_120, n_layer) = $flux_down_3_WR0_R5
29711.             $flux_up_1_WR0_R6 = albedo_surface_diff(1 + $I_L29697_120) * $flux_down_1_WR0_R3 + source_ground_free(1 + $I_L29697_120)
29711.             flux_up_1(1 + $I_L29697_120, n_layer) = $flux_up_1_WR0_R6
29714.             flux_up_2(1 + $I_L29697_120, $i_S7) = albedo_surface_diff(1 + $I_L29697_120) * $flux_down_2_WR0_R4 + source_ground_strat(1 + $I_L29697_120)
29717.             flux_up_3(1 + $I_L29697_120, $i_S7) = albedo_surface_diff(1 + $I_L29697_120) * $flux_down_3_WR0_R5 + source_ground_conv(1 + $I_L29697_120)
29722.             flux_propag_1(1 + $I_L29697_120) = t(1 + $I_L29697_120, n_layer) * $flux_up_1_WR0_R6 + s_up(1 + $I_L29697_120, n_layer) + r(1 + $I_L29697_120, n_layer) * flux_down_1(1 + $I_L29697_120, -1 + n_layer)
29725.             flux_propag_2(1 + $I_L29697_120) = t_strat(1 + $I_L29697_120, n_layer) * flux_up_2(1 + $I_L29697_120, n_layer) + s_up_strat(1 + $I_L29697_120, n_layer) + r_strat(1 + $I_L29697_120, n_layer) * flux_down_2(1 + $I_L29697_120, -1 + n_layer)
29729.             flux_propag_3(1 + $I_L29697_120) = t_conv(1 + $I_L29697_120, n_layer) * flux_up_3(1 + $I_L29697_120, n_layer) + s_up_conv(1 + $I_L29697_120, n_layer) + r_conv(1 + $I_L29697_120, n_layer) * flux_down_3(1 + $I_L29697_120, -1 + n_layer)
29734.             $I_L29697_120 = 1 + $I_L29697_120
29697.             if ( $I_L29697_120 >= n_profile ) exit
29697.          enddo
29697.       endif
29739.       if ( n_cloud_top + -n_layer < 0 ) then
29740.          if ( n_profile > 0 ) then
29739.             $I_L29739_134 = 0
29739. !dir$ blocking_size( 0, 0 )
29739.             do
29740.                $I_L29740_122 = 0
29740. !dir$ ivdep
29740. !dir$ blocking_size( 0, 0 )
29740.                do
29742.                   $flux_up_1_WR0_R7 = u11(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_1(1 + $I_L29740_122) + u12(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_2(1 + $I_L29740_122) + u13(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_3(1 + $I_L29740_122)
29742.                   flux_up_1(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) = $flux_up_1_WR0_R7
29745.                   $flux_up_2_WR0_R8 = u21(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_1(1 + $I_L29740_122) + u22(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_2(1 + $I_L29740_122) + u23(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_3(1 + $I_L29740_122)
29745.                   flux_up_2(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) = $flux_up_2_WR0_R8
29748.                   $flux_up_3_WR0_R9 = u31(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_1(1 + $I_L29740_122) + u32(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_2(1 + $I_L29740_122) + u33(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_propag_3(1 + $I_L29740_122)
29748.                   flux_up_3(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) = $flux_up_3_WR0_R9
29752.                   flux_propag_1(1 + $I_L29740_122) = t(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * $flux_up_1_WR0_R7 + s_up(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) + r(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_down_1(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -2)
29754.                   flux_propag_2(1 + $I_L29740_122) = t_strat(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * $flux_up_2_WR0_R8 + s_up_strat(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) + r_strat(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_down_2(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -2)
29756.                   flux_propag_3(1 + $I_L29740_122) = t_conv(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * $flux_up_3_WR0_R9 + s_up_conv(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) + r_conv(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -1) * flux_down_3(1 + $I_L29740_122, n_layer + -$I_L29739_134 + -2)
29759.                   $I_L29740_122 = 1 + $I_L29740_122
29740.                   if ( $I_L29740_122 >= n_profile ) exit
29740.                enddo
29760.                $I_L29739_134 = 1 + $I_L29739_134
29759.                if ( $I_L29739_134 >= ( n_layer + -n_cloud_top ) ) exit
29759.             enddo
29759.          endif
29759.       endif
29764.       if ( n_profile > 0 ) then
29764.          $I_L29764_124 = 0
29764. !dir$ ivdep
29764.          do
29765.             flux_total(1 + $I_L29764_124, -1 + 2 * n_cloud_top) = flux_propag_1(1 + $I_L29764_124) + flux_propag_2(1 + $I_L29764_124) + flux_propag_3(1 + $I_L29764_124)
29767.             $I_L29764_124 = 1 + $I_L29764_124
29764.             if ( $I_L29764_124 >= n_profile ) exit
29764.          enddo
29764.       endif
29770.       if ( 1 + -n_cloud_top < 0 ) then
29771.          if ( n_profile > 0 ) then
29770.             $I_L29770_136 = 0
29770.             if ( -3 + n_cloud_top >= 0 ) then
29770.                $I_L29770_142 = 0
29770.                do
29771.                   $I_L29771_126 = 0
29771. !dir$ ivdep
29771.                   do
29772.                      flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -4 * $I_L29770_142 + -3) = t(1 + $I_L29771_126, n_cloud_top + -2 * $I_L29770_142 + -1) * flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -4 * $I_L29770_142 + -1) + r(1 + $I_L29771_126, n_cloud_top + -2 * $I_L29770_142 + -1) * flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -4 * $I_L29770_142 + -2) + s_up(1 + $I_L29771_126, n_cloud_top + -2 * $I_L29770_142 + -1)
29772.                      flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -4 * $I_L29770_142 + -5) = t(1 + $I_L29771_126, n_cloud_top + -2 * $I_L29770_142 + -2) * flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -4 * $I_L29770_142 + -3) + r(1 + $I_L29771_126, n_cloud_top + -2 * $I_L29770_142 + -2) * flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -4 * $I_L29770_142 + -4) + s_up(1 + $I_L29771_126, n_cloud_top + -2 * $I_L29770_142 + -2)
29774.                      $I_L29771_126 = 1 + $I_L29771_126
29771.                      if ( $I_L29771_126 >= n_profile ) exit
29771.                   enddo
29775.                   $I_L29770_142 = 1 + $I_L29770_142
29774.                   if ( $I_L29770_142 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
29774.                enddo
29775.                $I_L29770_136 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
29775.             endif
29770.             if ( $I_L29770_136 < -1 + n_cloud_top ) then
29771.                $I_L29771_126 = 0
29771. !dir$ ivdep
29771.                do
29772.                   flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -2 * $I_L29770_136 + -3) = t(1 + $I_L29771_126, n_cloud_top + -$I_L29770_136 + -1) * flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -2 * $I_L29770_136 + -1) + r(1 + $I_L29771_126, n_cloud_top + -$I_L29770_136 + -1) * flux_total(1 + $I_L29771_126, 2 * n_cloud_top + -2 * $I_L29770_136 + -2) + s_up(1 + $I_L29771_126, n_cloud_top + -$I_L29770_136 + -1)
29774.                   $I_L29771_126 = 1 + $I_L29771_126
29771.                   if ( $I_L29771_126 >= n_profile ) exit
29771.                enddo
29771.             endif
29771.          endif
29771.       endif
29778.       if ( n_layer + -n_cloud_top >= 0 ) then
29779.          if ( n_profile > 0 ) then
29778.             $I_L29778_138 = 0
29778.             do
29779.                $I_L29779_128 = 0
29779. !dir$ ivdep
29779.                do
29780.                   flux_total(1 + $I_L29779_128, 2 * n_cloud_top + 2 * $I_L29778_138 + 1) = flux_up_1(1 + $I_L29779_128, n_cloud_top + $I_L29778_138) + flux_up_2(1 + $I_L29779_128, n_cloud_top + $I_L29778_138) + flux_up_3(1 + $I_L29779_128, n_cloud_top + $I_L29778_138)
29782.                   flux_total(1 + $I_L29779_128, 2 * n_cloud_top + 2 * $I_L29778_138 + 2) = flux_down_1(1 + $I_L29779_128, n_cloud_top + $I_L29778_138) + flux_down_2(1 + $I_L29779_128, n_cloud_top + $I_L29778_138) + flux_down_3(1 + $I_L29779_128, n_cloud_top + $I_L29778_138)
29784.                   $I_L29779_128 = 1 + $I_L29779_128
29779.                   if ( $I_L29779_128 >= n_profile ) exit
29779.                enddo
29785.                $I_L29778_138 = 1 + $I_L29778_138
29784.                if ( $I_L29778_138 >= n_layer + -n_cloud_top + 1 ) exit
29784.             enddo
29784.          endif
29784.       endif
29492.       _free( t$4113 )
29790.       return
29790.       end
29790.       
30295.       
30295.       subroutine solver_triple( n_profile, n_layer, n_cloud_top, t, r, s_down, s_up, t_strat, r_strat, s_down_strat, s_up_strat, t_conv, r_conv, s_down_conv, s_up_conv, v11, v12, v13, v21, v22, v23, v31, v32, v33, u11, u12, u13, u21, u22, u23, u31, u32, u33, flux_inc_down, source_ground_free, source_ground_strat, source_ground_conv, albedo_surface_diff, flux_total, nd_profile, nd_layer, id_ct )
29811.       t$1212 = nd_profile
29811.       t$1213 = nd_layer
29850.       t$4140 = _zla( 0, nd_profile )
29811.       t$4141 = _zla( 0, nd_profile )
29850.       t$4142 = _zla( 0, nd_layer )
29811.       t$4143 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
29811.       t$1214 = ( -1 + id_ct )
29811.       t$4144 = nd_layer + -id_ct + 2
29875.       t$4145 = _zla( 0, nd_layer + -id_ct + 2 )
29811.       t$4146 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
29811.       t$1215 = ( 2 + 2 * nd_layer )
29924.       t$4147 = _zla( 0, ( 2 + 2 * nd_layer ) )
29811.       t$4148 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
29811.       t$1216 = ( 1 + nd_layer )
29936.       t$4149 = _zla( 0, ( 1 + nd_layer ) )
29811.       t$4150 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) )
29936.       t$4153 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
29937.       t$4154 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
29937.       t$4156 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29938.       t$4157 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29938.       t$4159 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
29939.       t$4160 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
29939.       t$4162 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
29940.       t$4163 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
29940.       t$4165 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
29941.       t$4166 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
29941.       t$4168 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
29942.       t$4169 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
29942.       t$4171 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 56
29943.       t$4172 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 56
29943.       t$4174 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 64
29944.       t$4175 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 64
29944.       t$4177 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29959.       t$4178 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29959.       t$4180 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29960.       t$4181 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29960.       t$4183 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29961.       t$4184 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29961.       t$4186 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
29962.       t$4187 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
29962.       t$4189 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
29963.       t$4190 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
29963.       t$4192 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
29964.       t$4193 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
29964.       t$4195 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29811.       t$4196 = 1 + nd_layer
29987.       t$4197 = _zla( 0, 1 + nd_layer )
29811.       t$4198 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
29987.       t$4199 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29987.       t$4201 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29989.       t$4202 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8
29989.       t$4204 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29991.       t$4205 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29991.       t$4207 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29993.       t$4208 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29993.       t$4210 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29995.       t$4211 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29995.       t$4213 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
29997.       t$4214 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29997.       t$4216 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29945.       t$4217 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29945.       t$4219 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 80
29946.       t$4220 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 80 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29946.       t$4222 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 88
29947.       t$4223 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 88 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29947.       t$4225 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96
29950.       t$4226 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29950.       t$4228 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56
29951.       t$4229 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29951.       t$4231 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64
29952.       t$4232 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29952.       t$4234 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72
29953.       t$4235 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29953.       t$4237 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 80
29954.       t$4238 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 80 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29954.       t$4240 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 88
29955.       t$4241 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 88 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29955.       t$4243 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 96
29956.       t$4244 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 96 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29956.       t$4246 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 104
29957.       t$4247 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 104
29957.       t$4249 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 112
29958.       t$4250 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 112 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29958.       t$4252 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 120
29965.       t$4253 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 120 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29965.       t$4255 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 128
29966.       t$4256 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 128 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29966.       t$4258 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 136
29967.       t$4259 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 136 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29967.       t$4261 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 144
29811.       t$4151 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 144 ), 8 )
29936.       t$4152 = t$4151
29937.       t$4155 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
29938.       t$4158 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
29939.       t$4161 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
29940.       t$4164 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
29941.       t$4167 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
29942.       t$4170 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
29943.       t$4173 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 56
29944.       t$4176 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 64
29959.       t$4179 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29960.       t$4182 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72
29961.       t$4185 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
29962.       t$4188 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
29963.       t$4191 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
29964.       t$4194 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
29987.       t$4200 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29989.       t$4203 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
29991.       t$4206 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
29993.       t$4209 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
29995.       t$4212 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
29997.       t$4215 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
29945.       t$4218 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 72 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
29946.       t$4221 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 80
29947.       t$4224 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 88
29950.       t$4227 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96
29951.       t$4230 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56
29952.       t$4233 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64
29953.       t$4236 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72
29954.       t$4239 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 80
29955.       t$4242 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 88
29956.       t$4245 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 96
29957.       t$4248 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 104
29958.       t$4251 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 112
29965.       t$4254 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 120
29966.       t$4257 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 128
29967.       t$4260 = t$4151 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 96 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 136
30007.       if ( n_profile > 0 ) then
30007.          $I_L30007_134 = 0
30007. !dir$ ivdep
30007.          do
30008.             alpha11(1 + $I_L30007_134, 1 + n_layer) = albedo_surface_diff(1 + $I_L30007_134)
30009.             alpha12(1 + $I_L30007_134, 1 + n_layer) = 0.0
30010.             alpha13(1 + $I_L30007_134, 1 + n_layer) = 0.0
30011.             alpha21(1 + $I_L30007_134, 1 + n_layer) = 0.0
30012.             alpha22(1 + $I_L30007_134, 1 + n_layer) = albedo_surface_diff(1 + $I_L30007_134)
30013.             alpha23(1 + $I_L30007_134, 1 + n_layer) = 0.0
30014.             alpha31(1 + $I_L30007_134, 1 + n_layer) = 0.0
30015.             alpha32(1 + $I_L30007_134, 1 + n_layer) = 0.0
30016.             alpha33(1 + $I_L30007_134, 1 + n_layer) = albedo_surface_diff(1 + $I_L30007_134)
30017.             g1(1 + $I_L30007_134, 1 + n_layer) = source_ground_free(1 + $I_L30007_134)
30018.             g2(1 + $I_L30007_134, 1 + n_layer) = source_ground_strat(1 + $I_L30007_134)
30019.             g3(1 + $I_L30007_134, 1 + n_layer) = source_ground_conv(1 + $I_L30007_134)
30020.             $I_L30007_134 = 1 + $I_L30007_134
30007.             if ( $I_L30007_134 >= n_profile ) exit
30007.          enddo
30185.          $I_L30185_144 = 0
30185. !dir$ ivdep
30185.          do
30186.             flux_total(1 + $I_L30185_144, 2) = flux_inc_down(1 + $I_L30185_144)
30187.             $I_L30185_144 = 1 + $I_L30185_144
30185.             if ( $I_L30185_144 >= n_profile ) exit
30185.          enddo
30185.       endif
30023.       if ( n_cloud_top + -n_layer <= 0 ) then
30024.          if ( n_profile > 0 ) then
30024.             $I_L30024_171 = 0
30024.             do
30023.                $I_L30023_165 = 0
30023. !dir$ blocking_size( 0, 0 )
30023.                do
30024.                   $I_L30024_136 = 0
30024. !dir$ ivdep
30024. !dir$ blocking_size( 256, 256 )
30024.                   do
30026.                      $theta11_S14 = alpha11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30028.                      $theta12_S13 = alpha11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30030.                      $theta13_S11 = alpha11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30032.                      $theta21_S10 = alpha21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30034.                      $theta22_S8 = alpha21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30036.                      $theta23_S7 = alpha21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30038.                      $theta31_S4 = alpha31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30040.                      $theta32_S5 = alpha31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30042.                      $theta33_S6 = alpha31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + alpha33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) * v33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30044.                      $beta31_WR0_R0 = -( $theta31_S4 * r($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) )
30044.                      beta31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $beta31_WR0_R0
30045.                      $beta32_WR0_R1 = -( $theta32_S5 * r_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) )
30045.                      beta32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $beta32_WR0_R1
30046.                      $beta33_inv_WR0_R2 = 1.0/( 1.0 + -( $theta33_S6 * r_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) ) )
30046.                      beta33_inv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $beta33_inv_WR0_R2
30048.                      $gamma31_WR0_R3 = $theta31_S4 * t($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30048.                      gamma31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma31_WR0_R3
30049.                      $gamma32_WR0_R4 = $theta32_S5 * t_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30049.                      gamma32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma32_WR0_R4
30050.                      $gamma33_WR0_R5 = $theta33_S6 * t_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30050.                      gamma33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma33_WR0_R5
30051.                      $h3_WR0_R6 = g3($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) + $theta31_S4 * s_down($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $theta32_S5 * s_down_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $theta33_S6 * s_down_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165)
30051.                      h3($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $h3_WR0_R6
30055.                      $lambda3_S9 = $theta23_S7 * r_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) * $beta33_inv_WR0_R2
30056.                      $beta22_inv_WR0_R7 = 1.0/( $lambda3_S9 * $beta32_WR0_R1 + -( $theta22_S8 * r_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) ) + 1.0 )
30056.                      beta22_inv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $beta22_inv_WR0_R7
30058.                      $beta21_WR0_R8 = -( $theta21_S10 * r($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) ) + $lambda3_S9 * $beta31_WR0_R0
30058.                      beta21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $beta21_WR0_R8
30059.                      $gamma21_WR0_R9 = $theta21_S10 * t($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S9 * $gamma31_WR0_R3
30059.                      gamma21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma21_WR0_R9
30060.                      $gamma22_WR0_R10 = $theta22_S8 * t_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S9 * $gamma32_WR0_R4
30060.                      gamma22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma22_WR0_R10
30061.                      $gamma23_WR0_R11 = $theta23_S7 * t_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S9 * $gamma33_WR0_R5
30061.                      gamma23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma23_WR0_R11
30062.                      $h2_WR0_R12 = g2($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) + $theta21_S10 * s_down($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $theta22_S8 * s_down_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $theta23_S7 * s_down_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S9 * $h3_WR0_R6
30062.                      h2($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $h2_WR0_R12
30066.                      $lambda3_S12 = $theta13_S11 * r_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) * $beta33_inv_WR0_R2
30067.                      $lambda2_S15 = ( $theta12_S13 * r_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + -( $lambda3_S12 * $beta32_WR0_R1 ) ) * $beta22_inv_WR0_R7
30069.                      $beta11_inv_WR0_R13 = 1.0/( $lambda3_S12 * $beta31_WR0_R0 + -( $theta11_S14 * r($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) ) + $lambda2_S15 * $beta21_WR0_R8 + 1.0 )
30069.                      beta11_inv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $beta11_inv_WR0_R13
30072.                      $gamma11_WR0_R14 = $theta11_S14 * t($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S12 * $gamma31_WR0_R3 + $lambda2_S15 * $gamma21_WR0_R9
30072.                      gamma11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma11_WR0_R14
30074.                      $gamma12_WR0_R15 = $theta12_S13 * t_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S12 * $gamma32_WR0_R4 + $lambda2_S15 * $gamma22_WR0_R10
30074.                      gamma12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma12_WR0_R15
30076.                      $gamma13_WR0_R16 = $theta13_S11 * t_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S12 * $gamma33_WR0_R5 + $lambda2_S15 * $gamma23_WR0_R11
30076.                      gamma13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $gamma13_WR0_R16
30078.                      $h1_WR0_R17 = g1($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + 1) + $theta11_S14 * s_down($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $theta12_S13 * s_down_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $theta13_S11 * s_down_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S12 * $h3_WR0_R6 + $lambda2_S15 * $h2_WR0_R12
30078.                      h1($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = $h1_WR0_R17
30082.                      $lambda3_S16 = u33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) * $beta33_inv_WR0_R2
30083.                      $lambda2_S17 = ( u32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S16 * $beta32_WR0_R1 ) * $beta22_inv_WR0_R7
30085.                      $lambda1_S18 = ( u31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S16 * $beta31_WR0_R0 + $lambda2_S17 * $beta21_WR0_R8 ) * $beta11_inv_WR0_R13
30087.                      alpha31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S16 * $gamma31_WR0_R3 + $lambda2_S17 * $gamma21_WR0_R9 + $lambda1_S18 * $gamma11_WR0_R14
30089.                      alpha32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S16 * $gamma32_WR0_R4 + $lambda2_S17 * $gamma22_WR0_R10 + $lambda1_S18 * $gamma12_WR0_R15
30092.                      alpha33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S16 * $gamma33_WR0_R5 + $lambda2_S17 * $gamma23_WR0_R11 + $lambda1_S18 * $gamma13_WR0_R16
30095.                      g3($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u31($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + u32($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + u33($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S16 * $h3_WR0_R6 + $lambda2_S17 * $h2_WR0_R12 + $lambda1_S18 * $h1_WR0_R17
30099.                      $lambda3_S19 = u23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) * $beta33_inv_WR0_R2
30100.                      $lambda2_S20 = ( u22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S19 * $beta32_WR0_R1 ) * $beta22_inv_WR0_R7
30102.                      $lambda1_S21 = ( u21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S19 * $beta31_WR0_R0 + $lambda2_S20 * $beta21_WR0_R8 ) * $beta11_inv_WR0_R13
30104.                      alpha21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S19 * $gamma31_WR0_R3 + $lambda2_S20 * $gamma21_WR0_R9 + $lambda1_S21 * $gamma11_WR0_R14
30106.                      alpha22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S19 * $gamma32_WR0_R4 + $lambda2_S20 * $gamma22_WR0_R10 + $lambda1_S21 * $gamma12_WR0_R15
30109.                      alpha23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S19 * $gamma33_WR0_R5 + $lambda2_S20 * $gamma23_WR0_R11 + $lambda1_S21 * $gamma13_WR0_R16
30112.                      g2($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u21($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + u22($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + u23($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S19 * $h3_WR0_R6 + $lambda2_S20 * $h2_WR0_R12 + $lambda1_S21 * $h1_WR0_R17
30116.                      $lambda3_S22 = u13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) * $beta33_inv_WR0_R2
30117.                      $lambda2_S23 = ( u12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S22 * $beta32_WR0_R1 ) * $beta22_inv_WR0_R7
30119.                      $lambda1_S24 = ( u11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * t($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S22 * $beta31_WR0_R0 + $lambda2_S23 * $beta21_WR0_R8 ) * $beta11_inv_WR0_R13
30121.                      alpha11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S22 * $gamma31_WR0_R3 + $lambda2_S23 * $gamma21_WR0_R9 + $lambda1_S24 * $gamma11_WR0_R14
30123.                      alpha12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S22 * $gamma32_WR0_R4 + $lambda2_S23 * $gamma22_WR0_R10 + $lambda1_S24 * $gamma12_WR0_R15
30126.                      alpha13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * r_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S22 * $gamma33_WR0_R5 + $lambda2_S23 * $gamma23_WR0_R11 + $lambda1_S24 * $gamma13_WR0_R16
30129.                      g1($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) = u11($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + u12($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up_strat($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + u13($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165 + -1) * s_up_conv($I_L30024_136 + 256 * $I_L30024_171 + 1, n_layer + -$I_L30023_165) + $lambda3_S22 * $h3_WR0_R6 + $lambda2_S23 * $h2_WR0_R12 + $lambda1_S24 * $h1_WR0_R17
30024.                      $I_L30024_136 = 1 + $I_L30024_136
30024.                      if ( $I_L30024_136 >= min( n_profile, 256 + 256 * $I_L30024_171 ) + -256 * $I_L30024_171 ) exit
30024.                   enddo
30134.                   $I_L30023_165 = 1 + $I_L30023_165
30134.                   if ( $I_L30023_165 >= n_layer + -n_cloud_top + 1 ) exit
30134.                enddo
30024.                $I_L30024_171 = 1 + $I_L30024_171
30133.                if ( $I_L30024_171 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
30133.             enddo
30133.          endif
30133.       endif
30139.       if ( n_cloud_top > 1 ) then
30142.          if ( n_profile > 0 ) then
30144.             if ( n_cloud_top < n_layer ) then
30142.                $I_L30142_139 = 0
30142. !dir$ ivdep
30142.                do
30147.                   $theta11_S26 = alpha11(1 + $I_L30142_139, n_cloud_top) * v11(1 + $I_L30142_139, -1 + n_cloud_top) + alpha12(1 + $I_L30142_139, n_cloud_top) * v21(1 + $I_L30142_139, -1 + n_cloud_top) + alpha13(1 + $I_L30142_139, n_cloud_top) * v31(1 + $I_L30142_139, -1 + n_cloud_top)
30153.                   $beta11_inv_WR0_R18 = 1.0/( 1.0 + -( $theta11_S26 * r(1 + $I_L30142_139, -1 + n_cloud_top) ) )
30153.                   beta11_inv(1 + $I_L30142_139, -1 + n_cloud_top) = $beta11_inv_WR0_R18
30154.                   $gamma11_WR0_R19 = $theta11_S26 * t(1 + $I_L30142_139, -1 + n_cloud_top)
30154.                   gamma11(1 + $I_L30142_139, -1 + n_cloud_top) = $gamma11_WR0_R19
30155.                   $h1_WR0_R20 = g1(1 + $I_L30142_139, n_cloud_top) + $theta11_S26 * s_down(1 + $I_L30142_139, -1 + n_cloud_top)
30155.                   h1(1 + $I_L30142_139, -1 + n_cloud_top) = $h1_WR0_R20
30157.                   $lambda_S27 = t(1 + $I_L30142_139, -1 + n_cloud_top) * $beta11_inv_WR0_R18
30158.                   alpha11(1 + $I_L30142_139, -1 + n_cloud_top) = r(1 + $I_L30142_139, -1 + n_cloud_top) + $lambda_S27 * $gamma11_WR0_R19
30159.                   g1(1 + $I_L30142_139, -1 + n_cloud_top) = s_up(1 + $I_L30142_139, -1 + n_cloud_top) + $lambda_S27 * $h1_WR0_R20
30161.                   $I_L30142_139 = 1 + $I_L30142_139
30151.                   if ( $I_L30142_139 >= n_profile ) exit
30151.                enddo
30151.             else
30142.                $I_L30142_159 = 0
30142. !dir$ ivdep
30142.                do
30150.                   $theta11_S26 = alpha11(1 + $I_L30142_159, n_cloud_top)
30153.                   $beta11_inv_WR0_R21 = 1.0/( 1.0 + -( $theta11_S26 * r(1 + $I_L30142_159, -1 + n_cloud_top) ) )
30153.                   beta11_inv(1 + $I_L30142_159, -1 + n_cloud_top) = $beta11_inv_WR0_R21
30154.                   $gamma11_WR0_R22 = $theta11_S26 * t(1 + $I_L30142_159, -1 + n_cloud_top)
30154.                   gamma11(1 + $I_L30142_159, -1 + n_cloud_top) = $gamma11_WR0_R22
30155.                   $h1_WR0_R23 = g1(1 + $I_L30142_159, n_cloud_top) + $theta11_S26 * s_down(1 + $I_L30142_159, -1 + n_cloud_top)
30155.                   h1(1 + $I_L30142_159, -1 + n_cloud_top) = $h1_WR0_R23
30157.                   $lambda_S27 = t(1 + $I_L30142_159, -1 + n_cloud_top) * $beta11_inv_WR0_R21
30158.                   alpha11(1 + $I_L30142_159, -1 + n_cloud_top) = r(1 + $I_L30142_159, -1 + n_cloud_top) + $lambda_S27 * $gamma11_WR0_R22
30159.                   g1(1 + $I_L30142_159, -1 + n_cloud_top) = s_up(1 + $I_L30142_159, -1 + n_cloud_top) + $lambda_S27 * $h1_WR0_R23
30161.                   $I_L30142_159 = 1 + $I_L30142_159
30151.                   if ( $I_L30142_159 >= n_profile ) exit
30151.                enddo
30151.             endif
30151.          endif
30151.       endif
30168.       if ( 2 + -n_cloud_top < 0 ) then
30169.          if ( n_profile > 0 ) then
30169.             $I_L30169_173 = 0
30169.             do
30168.                $I_L30168_167 = 0
30168.                if ( -4 + n_cloud_top >= 0 ) then
30168.                   $I_L30168_177 = 0
30168. !dir$ blocking_size( 0, 0 )
30168.                   do
30169.                      $I_L30169_141 = 0
30169. !dir$ ivdep
30169. !dir$ blocking_size( 256, 256 )
30169.                      do
30171.                         $beta11_inv_WR0_R24 = 1.0/( 1.0 + -( alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -1) * r($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) ) )
30171.                         beta11_inv($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) = $beta11_inv_WR0_R24
30173.                         $gamma11_WR0_R25 = alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -1) * t($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2)
30173.                         gamma11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) = $gamma11_WR0_R25
30174.                         $h1_WR0_R26 = g1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -1) + alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -1) * s_down($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2)
30174.                         h1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) = $h1_WR0_R26
30176.                         $lambda1_S30 = t($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) * $beta11_inv_WR0_R24
30177.                         alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) = r($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) + $lambda1_S30 * $gamma11_WR0_R25
30178.                         g1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) = s_up($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) + $lambda1_S30 * $h1_WR0_R26
30171.                         $beta11_inv_WR0_R24 = 1.0/( 1.0 + -( alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) * r($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) ) )
30171.                         beta11_inv($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) = $beta11_inv_WR0_R24
30173.                         $gamma11_WR0_R25 = alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) * t($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3)
30173.                         gamma11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) = $gamma11_WR0_R25
30174.                         $h1_WR0_R26 = g1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) + alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -2) * s_down($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3)
30174.                         h1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) = $h1_WR0_R26
30176.                         $lambda1_S30 = t($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) * $beta11_inv_WR0_R24
30177.                         alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) = r($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) + $lambda1_S30 * $gamma11_WR0_R25
30178.                         g1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) = s_up($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -2 * $I_L30168_177 + -3) + $lambda1_S30 * $h1_WR0_R26
30169.                         $I_L30169_141 = 1 + $I_L30169_141
30169.                         if ( $I_L30169_141 >= min( n_profile, 256 + 256 * $I_L30169_173 ) + -256 * $I_L30169_173 ) exit
30169.                      enddo
30181.                      $I_L30168_177 = 1 + $I_L30168_177
30181.                      if ( $I_L30168_177 >= _rsh( -2 + n_cloud_top, 1 ) ) exit
30181.                   enddo
30181.                   $I_L30168_167 = and( 0xfffffffffffffffeUL, -2 + n_cloud_top )
30181.                endif
30168.                if ( $I_L30168_167 < -2 + n_cloud_top ) then
30169.                   $I_L30169_141 = 0
30169. !dir$ ivdep
30169. !dir$ blocking_size( 256, 256 )
30169.                   do
30171.                      $beta11_inv_WR0_R24 = 1.0/( 1.0 + -( alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -1) * r($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) ) )
30171.                      beta11_inv($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) = $beta11_inv_WR0_R24
30173.                      $gamma11_WR0_R25 = alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -1) * t($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2)
30173.                      gamma11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) = $gamma11_WR0_R25
30174.                      $h1_WR0_R26 = g1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -1) + alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -1) * s_down($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2)
30174.                      h1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) = $h1_WR0_R26
30176.                      $lambda1_S30 = t($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) * $beta11_inv_WR0_R24
30177.                      alpha11($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) = r($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) + $lambda1_S30 * $gamma11_WR0_R25
30178.                      g1($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) = s_up($I_L30169_141 + 256 * $I_L30169_173 + 1, n_cloud_top + -$I_L30168_167 + -2) + $lambda1_S30 * $h1_WR0_R26
30169.                      $I_L30169_141 = 1 + $I_L30169_141
30169.                      if ( $I_L30169_141 >= min( n_profile, 256 + 256 * $I_L30169_173 ) + -256 * $I_L30169_173 ) exit
30169.                   enddo
30169.                endif
30169.                $I_L30169_173 = 1 + $I_L30169_173
30180.                if ( $I_L30169_173 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
30180.             enddo
30180.          endif
30180.       endif
30188.       if ( n_cloud_top > 1 ) then
30189.          if ( n_profile > 0 ) then
30189.             $I_L30189_146 = 0
30189. !dir$ ivdep
30189.             do
30190.                flux_total(1 + $I_L30189_146, 1) = alpha11(1 + $I_L30189_146, 1) * flux_total(1 + $I_L30189_146, 2) + g1(1 + $I_L30189_146, 1)
30191.                $I_L30189_146 = 1 + $I_L30189_146
30189.                if ( $I_L30189_146 >= n_profile ) exit
30189.             enddo
30202.             $I_L30202_161 = 0
30202.             if ( -3 + n_cloud_top >= 0 ) then
30202.                $I_L30202_179 = 0
30202.                do
30203.                   $I_L30203_150 = 0
30203. !dir$ ivdep
30203.                   do
30204.                      $flux_total_WR0_R27 = ( gamma11(1 + $I_L30203_150, 1 + 2 * $I_L30202_179) * flux_total(1 + $I_L30203_150, 2 + 4 * $I_L30202_179) + h1(1 + $I_L30203_150, 1 + 2 * $I_L30202_179) ) * beta11_inv(1 + $I_L30203_150, 1 + 2 * $I_L30202_179)
30204.                      flux_total(1 + $I_L30203_150, 3 + 4 * $I_L30202_179) = $flux_total_WR0_R27
30206.                      flux_total(1 + $I_L30203_150, 4 + 4 * $I_L30202_179) = t(1 + $I_L30203_150, 1 + 2 * $I_L30202_179) * flux_total(1 + $I_L30203_150, 2 + 4 * $I_L30202_179) + r(1 + $I_L30203_150, 1 + 2 * $I_L30202_179) * $flux_total_WR0_R27 + s_down(1 + $I_L30203_150, 1 + 2 * $I_L30202_179)
30204.                      $flux_total_WR0_R27 = ( gamma11(1 + $I_L30203_150, 2 + 2 * $I_L30202_179) * flux_total(1 + $I_L30203_150, 4 + 4 * $I_L30202_179) + h1(1 + $I_L30203_150, 2 + 2 * $I_L30202_179) ) * beta11_inv(1 + $I_L30203_150, 2 + 2 * $I_L30202_179)
30204.                      flux_total(1 + $I_L30203_150, 5 + 4 * $I_L30202_179) = $flux_total_WR0_R27
30206.                      flux_total(1 + $I_L30203_150, 6 + 4 * $I_L30202_179) = t(1 + $I_L30203_150, 2 + 2 * $I_L30202_179) * flux_total(1 + $I_L30203_150, 4 + 4 * $I_L30202_179) + r(1 + $I_L30203_150, 2 + 2 * $I_L30202_179) * $flux_total_WR0_R27 + s_down(1 + $I_L30203_150, 2 + 2 * $I_L30202_179)
30208.                      $I_L30203_150 = 1 + $I_L30203_150
30203.                      if ( $I_L30203_150 >= n_profile ) exit
30203.                   enddo
30209.                   $I_L30202_179 = 1 + $I_L30202_179
30208.                   if ( $I_L30202_179 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
30208.                enddo
30209.                $I_L30202_161 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
30209.             endif
30202.             if ( $I_L30202_161 < -1 + n_cloud_top ) then
30203.                $I_L30203_150 = 0
30203. !dir$ ivdep
30203.                do
30204.                   $flux_total_WR0_R27 = ( gamma11(1 + $I_L30203_150, 1 + $I_L30202_161) * flux_total(1 + $I_L30203_150, 2 + 2 * $I_L30202_161) + h1(1 + $I_L30203_150, 1 + $I_L30202_161) ) * beta11_inv(1 + $I_L30203_150, 1 + $I_L30202_161)
30204.                   flux_total(1 + $I_L30203_150, 3 + 2 * $I_L30202_161) = $flux_total_WR0_R27
30206.                   flux_total(1 + $I_L30203_150, 4 + 2 * $I_L30202_161) = t(1 + $I_L30203_150, 1 + $I_L30202_161) * flux_total(1 + $I_L30203_150, 2 + 2 * $I_L30202_161) + r(1 + $I_L30203_150, 1 + $I_L30202_161) * $flux_total_WR0_R27 + s_down(1 + $I_L30203_150, 1 + $I_L30202_161)
30208.                   $I_L30203_150 = 1 + $I_L30203_150
30203.                   if ( $I_L30203_150 >= n_profile ) exit
30203.                enddo
30203.             endif
30203.          endif
30192.       else if ( n_profile > 0 ) then
30193.          $I_L30193_148 = 0
30193. !dir$ ivdep
30193.          do
30194.             flux_total(1 + $I_L30193_148, 1) = g1(1 + $I_L30193_148, 1) + flux_inc_down(1 + $I_L30193_148) * ( v11(1 + $I_L30193_148, 0) * alpha11(1 + $I_L30193_148, 1) + v21(1 + $I_L30193_148, 0) * alpha12(1 + $I_L30193_148, 1) + v31(1 + $I_L30193_148, 0) * alpha13(1 + $I_L30193_148, 1) )
30197.             $I_L30193_148 = 1 + $I_L30193_148
30193.             if ( $I_L30193_148 >= n_profile ) exit
30193.          enddo
30193.       endif
30215.       if ( n_cloud_top <= n_layer ) then
30219.          if ( n_profile > 0 ) then
30219.             $I_L30219_152 = 0
30219. !dir$ ivdep
30219.             do
30220.                $flux_down_1_WR0_R28 = v11(1 + $I_L30219_152, -1 + n_cloud_top) * flux_total(1 + $I_L30219_152, 2 * n_cloud_top)
30221.                $flux_down_2_WR0_R29 = v21(1 + $I_L30219_152, -1 + n_cloud_top) * flux_total(1 + $I_L30219_152, 2 * n_cloud_top)
30222.                $flux_down_3_WR0_R30 = v31(1 + $I_L30219_152, -1 + n_cloud_top) * flux_total(1 + $I_L30219_152, 2 * n_cloud_top)
30223.                $flux_up_1_WR0_R31 = ( gamma11(1 + $I_L30219_152, n_cloud_top) * $flux_down_1_WR0_R28 + gamma12(1 + $I_L30219_152, n_cloud_top) * $flux_down_2_WR0_R29 + gamma13(1 + $I_L30219_152, n_cloud_top) * $flux_down_3_WR0_R30 + h1(1 + $I_L30219_152, n_cloud_top) ) * beta11_inv(1 + $I_L30219_152, n_cloud_top)
30223.                flux_up_1(1 + $I_L30219_152, n_cloud_top) = $flux_up_1_WR0_R31
30227.                $flux_up_2_WR0_R32 = ( gamma21(1 + $I_L30219_152, n_cloud_top) * $flux_down_1_WR0_R28 + gamma22(1 + $I_L30219_152, n_cloud_top) * $flux_down_2_WR0_R29 + gamma23(1 + $I_L30219_152, n_cloud_top) * $flux_down_3_WR0_R30 + h2(1 + $I_L30219_152, n_cloud_top) + -( beta21(1 + $I_L30219_152, n_cloud_top) * $flux_up_1_WR0_R31 ) ) * beta22_inv(1 + $I_L30219_152, n_cloud_top)
30227.                flux_up_2(1 + $I_L30219_152, n_cloud_top) = $flux_up_2_WR0_R32
30231.                $flux_up_3_WR0_R33 = ( gamma31(1 + $I_L30219_152, n_cloud_top) * $flux_down_1_WR0_R28 + gamma32(1 + $I_L30219_152, n_cloud_top) * $flux_down_2_WR0_R29 + gamma33(1 + $I_L30219_152, n_cloud_top) * $flux_down_3_WR0_R30 + h3(1 + $I_L30219_152, n_cloud_top) + -( beta31(1 + $I_L30219_152, n_cloud_top) * $flux_up_1_WR0_R31 ) + -( beta32(1 + $I_L30219_152, n_cloud_top) * $flux_up_2_WR0_R32 ) ) * beta33_inv(1 + $I_L30219_152, n_cloud_top)
30231.                flux_up_3(1 + $I_L30219_152, n_cloud_top) = $flux_up_3_WR0_R33
30236.                $flux_down_1_WR0_R28 = t(1 + $I_L30219_152, n_cloud_top) * $flux_down_1_WR0_R28 + r(1 + $I_L30219_152, n_cloud_top) * $flux_up_1_WR0_R31 + s_down(1 + $I_L30219_152, n_cloud_top)
30236.                flux_down_1(1 + $I_L30219_152, n_cloud_top) = $flux_down_1_WR0_R28
30238.                $flux_down_2_WR0_R29 = t_strat(1 + $I_L30219_152, n_cloud_top) * $flux_down_2_WR0_R29 + r_strat(1 + $I_L30219_152, n_cloud_top) * $flux_up_2_WR0_R32 + s_down_strat(1 + $I_L30219_152, n_cloud_top)
30238.                flux_down_2(1 + $I_L30219_152, n_cloud_top) = $flux_down_2_WR0_R29
30240.                $flux_down_3_WR0_R30 = t_conv(1 + $I_L30219_152, n_cloud_top) * $flux_down_3_WR0_R30 + r_conv(1 + $I_L30219_152, n_cloud_top) * $flux_up_3_WR0_R33 + s_down_conv(1 + $I_L30219_152, n_cloud_top)
30240.                flux_down_3(1 + $I_L30219_152, n_cloud_top) = $flux_down_3_WR0_R30
30242.                $I_L30219_152 = 1 + $I_L30219_152
30219.                if ( $I_L30219_152 >= n_profile ) exit
30219.             enddo
30219.          endif
30219.       endif
30247.       if ( n_layer + -n_cloud_top > 0 ) then
30248.          if ( n_profile > 0 ) then
30248.             $I_L30248_175 = 0
30248.             do
30247.                $I_L30247_169 = 0
30247. !dir$ blocking_size( 0, 0 )
30247.                do
30248.                   $I_L30248_154 = 0
30248. !dir$ ivdep
30248. !dir$ blocking_size( 256, 256 )
30248.                   do
30249.                      $flux_down_1_WR0_R35 = v11($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) + v12($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) + v13($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169)
30249.                      flux_down_1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_down_1_WR0_R35
30252.                      $flux_down_2_WR0_R34 = v21($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) + v22($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) + v23($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169)
30252.                      flux_down_2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_down_2_WR0_R34
30255.                      $flux_down_3_WR0_R36 = v31($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) + v32($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) + v33($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169) * flux_down_3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169)
30255.                      flux_down_3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_down_3_WR0_R36
30258.                      $flux_up_1_WR0_R37 = ( gamma11($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_1_WR0_R35 + gamma12($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_2_WR0_R34 + gamma13($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_3_WR0_R36 + h1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) ) * beta11_inv($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1)
30258.                      flux_up_1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_up_1_WR0_R37
30262.                      $flux_up_2_WR0_R38 = ( gamma21($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_1_WR0_R35 + gamma22($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_2_WR0_R34 + gamma23($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_3_WR0_R36 + h2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) + -( beta21($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_up_1_WR0_R37 ) ) * beta22_inv($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1)
30262.                      flux_up_2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_up_2_WR0_R38
30266.                      $flux_up_3_WR0_R39 = ( gamma31($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_1_WR0_R35 + gamma32($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_2_WR0_R34 + gamma33($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_3_WR0_R36 + h3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) + -( beta31($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_up_1_WR0_R37 ) + -( beta32($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_up_2_WR0_R38 ) ) * beta33_inv($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1)
30266.                      flux_up_3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_up_3_WR0_R39
30272.                      $flux_down_1_WR0_R35 = t($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_1_WR0_R35 + r($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_up_1_WR0_R37 + s_down($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1)
30272.                      flux_down_1($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_down_1_WR0_R35
30274.                      $flux_down_2_WR0_R34 = t_strat($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_2_WR0_R34 + r_strat($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_up_2_WR0_R38 + s_down_strat($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1)
30274.                      flux_down_2($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_down_2_WR0_R34
30276.                      $flux_down_3_WR0_R36 = t_conv($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_down_3_WR0_R36 + r_conv($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) * $flux_up_3_WR0_R39 + s_down_conv($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1)
30276.                      flux_down_3($I_L30248_154 + 256 * $I_L30248_175 + 1, n_cloud_top + $I_L30247_169 + 1) = $flux_down_3_WR0_R36
30248.                      $I_L30248_154 = 1 + $I_L30248_154
30248.                      if ( $I_L30248_154 >= min( n_profile, 256 + 256 * $I_L30248_175 ) + -256 * $I_L30248_175 ) exit
30248.                   enddo
30279.                   $I_L30247_169 = 1 + $I_L30247_169
30279.                   if ( $I_L30247_169 >= ( n_layer + -n_cloud_top ) ) exit
30279.                enddo
30248.                $I_L30248_175 = 1 + $I_L30248_175
30278.                if ( $I_L30248_175 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
30278.             enddo
30278.          endif
30278.       endif
30283.       if ( n_layer + -n_cloud_top >= 0 ) then
30284.          if ( n_profile > 0 ) then
30283.             $I_L30283_163 = 0
30283.             do
30284.                $I_L30284_157 = 0
30284. !dir$ ivdep
30284.                do
30285.                   flux_total(1 + $I_L30284_157, 2 * n_cloud_top + 2 * $I_L30283_163 + 1) = flux_up_1(1 + $I_L30284_157, n_cloud_top + $I_L30283_163) + flux_up_2(1 + $I_L30284_157, n_cloud_top + $I_L30283_163) + flux_up_3(1 + $I_L30284_157, n_cloud_top + $I_L30283_163)
30287.                   flux_total(1 + $I_L30284_157, 2 * n_cloud_top + 2 * $I_L30283_163 + 2) = flux_down_1(1 + $I_L30284_157, n_cloud_top + $I_L30283_163) + flux_down_2(1 + $I_L30284_157, n_cloud_top + $I_L30283_163) + flux_down_3(1 + $I_L30284_157, n_cloud_top + $I_L30283_163)
30289.                   $I_L30284_157 = 1 + $I_L30284_157
30284.                   if ( $I_L30284_157 >= n_profile ) exit
30284.                enddo
30290.                $I_L30283_163 = 1 + $I_L30283_163
30289.                if ( $I_L30283_163 >= n_layer + -n_cloud_top + 1 ) exit
30289.             enddo
30289.          endif
30289.       endif
29811.       _free( t$4151 )
30295.       return
30295.       end
30295.       
30703.       
30703.       subroutine solver_triple_hogan( n_profile, n_layer, n_cloud_top, t, r, s_down, s_up, t_strat, r_strat, s_down_strat, s_up_strat, t_conv, r_conv, s_down_conv, s_up_conv, v11, v12, v13, v21, v22, v23, v31, v32, v33, u11, u12, u13, u21, u22, u23, u31, u32, u33, flux_inc_down, source_ground_free, source_ground_strat, source_ground_conv, albedo_surface_diff, flux_total, nd_profile, nd_layer, id_ct )
30320.       t$1218 = nd_profile
30320.       t$1219 = nd_layer
30359.       t$4262 = _zla( 0, nd_profile )
30320.       t$4263 = _zla( 0, nd_profile )
30359.       t$4264 = _zla( 0, nd_layer )
30320.       t$4265 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
30320.       t$1220 = ( -1 + id_ct )
30320.       t$4266 = nd_layer + -id_ct + 2
30384.       t$4267 = _zla( 0, nd_layer + -id_ct + 2 )
30320.       t$4268 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
30320.       t$1221 = ( 2 + 2 * nd_layer )
30433.       t$4269 = _zla( 0, ( 2 + 2 * nd_layer ) )
30320.       t$4270 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
30320.       t$1222 = ( 1 + nd_layer )
30445.       t$4271 = _zla( 0, ( 1 + nd_layer ) )
30320.       t$4272 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) )
30445.       t$4275 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
30446.       t$4276 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
30446.       t$4278 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
30447.       t$4279 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
30447.       t$4281 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30456.       t$4282 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30456.       t$4284 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30457.       t$4285 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30457.       t$4287 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
30458.       t$4288 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
30458.       t$4290 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30320.       t$4291 = 1 + nd_layer
30475.       t$4292 = _zla( 0, 1 + nd_layer )
30320.       t$4293 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
30475.       t$4294 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30475.       t$4296 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30477.       t$4297 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30477.       t$4299 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
30479.       t$4300 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30479.       t$4302 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
30481.       t$4303 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30481.       t$4305 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
30483.       t$4306 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30483.       t$4308 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
30485.       t$4309 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30485.       t$4311 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30448.       t$4312 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30448.       t$4314 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
30449.       t$4315 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30449.       t$4317 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
30450.       t$4318 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30450.       t$4320 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
30453.       t$4321 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
30453.       t$4323 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
30454.       t$4324 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30454.       t$4326 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
30455.       t$4327 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30455.       t$4329 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
30459.       t$4330 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30459.       t$4332 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56
30460.       t$4333 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30460.       t$4335 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64
30461.       t$4336 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30461.       t$4338 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72
30320.       t$4273 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 72 ), 8 )
30445.       t$4274 = t$4273
30446.       t$4277 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 8
30447.       t$4280 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 16
30456.       t$4283 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30457.       t$4286 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24
30458.       t$4289 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
30475.       t$4295 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30477.       t$4298 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
30479.       t$4301 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 16
30481.       t$4304 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 24
30483.       t$4307 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 32
30485.       t$4310 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 40
30448.       t$4313 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48
30449.       t$4316 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 32
30450.       t$4319 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 40
30453.       t$4322 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48
30454.       t$4325 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
30455.       t$4328 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
30459.       t$4331 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 48
30460.       t$4334 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 56
30461.       t$4337 = t$4273 + _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer ) * 48 + _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 64
30495.       if ( n_profile > 0 ) then
30495.          $I_L30495_132 = 0
30495. !dir$ ivdep
30495.          do
30496.             alpha11(1 + $I_L30495_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L30495_132)
30497.             alpha22(1 + $I_L30495_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L30495_132)
30498.             alpha33(1 + $I_L30495_132, 1 + n_layer) = albedo_surface_diff(1 + $I_L30495_132)
30499.             g1(1 + $I_L30495_132, 1 + n_layer) = source_ground_free(1 + $I_L30495_132)
30500.             g2(1 + $I_L30495_132, 1 + n_layer) = source_ground_strat(1 + $I_L30495_132)
30501.             g3(1 + $I_L30495_132, 1 + n_layer) = source_ground_conv(1 + $I_L30495_132)
30605.             flux_total(1 + $I_L30495_132, 2) = flux_inc_down(1 + $I_L30495_132)
30502.             $I_L30495_132 = 1 + $I_L30495_132
30495.             if ( $I_L30495_132 >= n_profile ) exit
30495.          enddo
30495.       endif
30505.       if ( n_cloud_top + -n_layer <= 0 ) then
30506.          if ( n_profile > 0 ) then
30506.             $I_L30506_167 = 0
30506.             do
30505.                $I_L30505_161 = 0
30505. !dir$ blocking_size( 0, 0 )
30505.                do
30506.                   $I_L30506_134 = 0
30506. !dir$ ivdep
30506. !dir$ blocking_size( 256, 256 )
30506.                   do
30508.                      $theta11_S4 = alpha11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + alpha22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v21($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + alpha33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v31($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30510.                      $theta22_S5 = alpha11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v12($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + alpha22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + alpha33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v32($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30512.                      $theta33_S6 = alpha11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v13($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + alpha22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v23($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + alpha33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) * v33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30515.                      $beta11_inv_WR0_R0 = 1.0/( 1.0 + -( $theta11_S4 * r($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) ) )
30515.                      beta11_inv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $beta11_inv_WR0_R0
30517.                      gamma11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $theta11_S4 * t($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30518.                      $h1_WR0_R1 = g1($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) + $theta11_S4 * s_down($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30518.                      h1($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $h1_WR0_R1
30520.                      $beta22_inv_WR0_R2 = 1.0/( 1.0 + -( $theta22_S5 * r_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) ) )
30520.                      beta22_inv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $beta22_inv_WR0_R2
30522.                      gamma22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $theta22_S5 * t_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30523.                      $h2_WR0_R3 = g2($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) + $theta22_S5 * s_down_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30523.                      h2($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $h2_WR0_R3
30525.                      $beta33_inv_WR0_R4 = 1.0/( 1.0 + -( $theta33_S6 * r_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) ) )
30525.                      beta33_inv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $beta33_inv_WR0_R4
30527.                      gamma33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $theta33_S6 * t_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30528.                      $h3_WR0_R5 = g3($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + 1) + $theta33_S6 * s_down_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161)
30528.                      h3($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = $h3_WR0_R5
30530.                      $lambda1_S8 = s_up($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + $h1_WR0_R1 * t($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * $beta11_inv_WR0_R0
30531.                      $lambda2_S7 = s_up_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + $h2_WR0_R3 * t_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * $beta22_inv_WR0_R2
30533.                      $lambda3_S9 = s_up_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + $h3_WR0_R5 * t_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * $beta33_inv_WR0_R4
30536.                      alpha11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = r($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + $theta11_S4 * t($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * t($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * $beta11_inv_WR0_R0
30538.                      g1($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = u11($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda1_S8 + u12($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda2_S7 + u13($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda3_S9
30541.                      alpha22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = r_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + $theta22_S5 * t_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * t_strat($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * $beta22_inv_WR0_R2
30543.                      g2($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = u21($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda1_S8 + u22($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda2_S7 + u23($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda3_S9
30546.                      alpha33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = r_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) + $theta33_S6 * t_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * t_conv($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) * $beta33_inv_WR0_R4
30549.                      g3($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161) = u31($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda1_S8 + u32($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda2_S7 + u33($I_L30506_134 + 256 * $I_L30506_167 + 1, n_layer + -$I_L30505_161 + -1) * $lambda3_S9
30506.                      $I_L30506_134 = 1 + $I_L30506_134
30506.                      if ( $I_L30506_134 >= min( n_profile, 256 + 256 * $I_L30506_167 ) + -256 * $I_L30506_167 ) exit
30506.                   enddo
30553.                   $I_L30505_161 = 1 + $I_L30505_161
30553.                   if ( $I_L30505_161 >= n_layer + -n_cloud_top + 1 ) exit
30553.                enddo
30506.                $I_L30506_167 = 1 + $I_L30506_167
30552.                if ( $I_L30506_167 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
30552.             enddo
30552.          endif
30552.       endif
30558.       if ( n_cloud_top > 1 ) then
30561.          if ( n_profile > 0 ) then
30563.             if ( n_cloud_top < n_layer ) then
30561.                $I_L30561_137 = 0
30561. !dir$ ivdep
30561.                do
30566.                   $theta11_S11 = alpha11(1 + $I_L30561_137, n_cloud_top) * v11(1 + $I_L30561_137, -1 + n_cloud_top) + alpha22(1 + $I_L30561_137, n_cloud_top) * v21(1 + $I_L30561_137, -1 + n_cloud_top) + alpha33(1 + $I_L30561_137, n_cloud_top) * v31(1 + $I_L30561_137, -1 + n_cloud_top)
30572.                   $beta11_inv_WR0_R6 = 1.0/( 1.0 + -( $theta11_S11 * r(1 + $I_L30561_137, -1 + n_cloud_top) ) )
30572.                   beta11_inv(1 + $I_L30561_137, -1 + n_cloud_top) = $beta11_inv_WR0_R6
30573.                   $gamma11_WR0_R7 = $theta11_S11 * t(1 + $I_L30561_137, -1 + n_cloud_top)
30573.                   gamma11(1 + $I_L30561_137, -1 + n_cloud_top) = $gamma11_WR0_R7
30574.                   $h1_WR0_R8 = g1(1 + $I_L30561_137, n_cloud_top) + $theta11_S11 * s_down(1 + $I_L30561_137, -1 + n_cloud_top)
30574.                   h1(1 + $I_L30561_137, -1 + n_cloud_top) = $h1_WR0_R8
30576.                   $lambda_S12 = t(1 + $I_L30561_137, -1 + n_cloud_top) * $beta11_inv_WR0_R6
30577.                   alpha11(1 + $I_L30561_137, -1 + n_cloud_top) = r(1 + $I_L30561_137, -1 + n_cloud_top) + $lambda_S12 * $gamma11_WR0_R7
30578.                   g1(1 + $I_L30561_137, -1 + n_cloud_top) = s_up(1 + $I_L30561_137, -1 + n_cloud_top) + $lambda_S12 * $h1_WR0_R8
30580.                   $I_L30561_137 = 1 + $I_L30561_137
30570.                   if ( $I_L30561_137 >= n_profile ) exit
30570.                enddo
30570.             else
30561.                $I_L30561_155 = 0
30561. !dir$ ivdep
30561.                do
30569.                   $theta11_S11 = alpha11(1 + $I_L30561_155, n_cloud_top)
30572.                   $beta11_inv_WR0_R9 = 1.0/( 1.0 + -( $theta11_S11 * r(1 + $I_L30561_155, -1 + n_cloud_top) ) )
30572.                   beta11_inv(1 + $I_L30561_155, -1 + n_cloud_top) = $beta11_inv_WR0_R9
30573.                   $gamma11_WR0_R10 = $theta11_S11 * t(1 + $I_L30561_155, -1 + n_cloud_top)
30573.                   gamma11(1 + $I_L30561_155, -1 + n_cloud_top) = $gamma11_WR0_R10
30574.                   $h1_WR0_R11 = g1(1 + $I_L30561_155, n_cloud_top) + $theta11_S11 * s_down(1 + $I_L30561_155, -1 + n_cloud_top)
30574.                   h1(1 + $I_L30561_155, -1 + n_cloud_top) = $h1_WR0_R11
30576.                   $lambda_S12 = t(1 + $I_L30561_155, -1 + n_cloud_top) * $beta11_inv_WR0_R9
30577.                   alpha11(1 + $I_L30561_155, -1 + n_cloud_top) = r(1 + $I_L30561_155, -1 + n_cloud_top) + $lambda_S12 * $gamma11_WR0_R10
30578.                   g1(1 + $I_L30561_155, -1 + n_cloud_top) = s_up(1 + $I_L30561_155, -1 + n_cloud_top) + $lambda_S12 * $h1_WR0_R11
30580.                   $I_L30561_155 = 1 + $I_L30561_155
30570.                   if ( $I_L30561_155 >= n_profile ) exit
30570.                enddo
30570.             endif
30570.          endif
30570.       endif
30587.       if ( 2 + -n_cloud_top < 0 ) then
30588.          if ( n_profile > 0 ) then
30588.             $I_L30588_169 = 0
30588.             do
30587.                $I_L30587_163 = 0
30587.                if ( -4 + n_cloud_top >= 0 ) then
30587.                   $I_L30587_173 = 0
30587. !dir$ blocking_size( 0, 0 )
30587.                   do
30588.                      $I_L30588_139 = 0
30588. !dir$ ivdep
30588. !dir$ blocking_size( 256, 256 )
30588.                      do
30590.                         $beta11_inv_WR0_R12 = 1.0/( 1.0 + -( alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -1) * r($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) ) )
30590.                         beta11_inv($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) = $beta11_inv_WR0_R12
30592.                         $gamma11_WR0_R13 = alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -1) * t($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2)
30592.                         gamma11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) = $gamma11_WR0_R13
30593.                         $h1_WR0_R14 = g1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -1) + alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -1) * s_down($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2)
30593.                         h1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) = $h1_WR0_R14
30595.                         $lambda1_S15 = t($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) * $beta11_inv_WR0_R12
30596.                         alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) = r($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) + $lambda1_S15 * $gamma11_WR0_R13
30597.                         g1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) = s_up($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) + $lambda1_S15 * $h1_WR0_R14
30590.                         $beta11_inv_WR0_R12 = 1.0/( 1.0 + -( alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) * r($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) ) )
30590.                         beta11_inv($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) = $beta11_inv_WR0_R12
30592.                         $gamma11_WR0_R13 = alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) * t($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3)
30592.                         gamma11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) = $gamma11_WR0_R13
30593.                         $h1_WR0_R14 = g1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) + alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -2) * s_down($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3)
30593.                         h1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) = $h1_WR0_R14
30595.                         $lambda1_S15 = t($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) * $beta11_inv_WR0_R12
30596.                         alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) = r($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) + $lambda1_S15 * $gamma11_WR0_R13
30597.                         g1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) = s_up($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -2 * $I_L30587_173 + -3) + $lambda1_S15 * $h1_WR0_R14
30588.                         $I_L30588_139 = 1 + $I_L30588_139
30588.                         if ( $I_L30588_139 >= min( n_profile, 256 + 256 * $I_L30588_169 ) + -256 * $I_L30588_169 ) exit
30588.                      enddo
30600.                      $I_L30587_173 = 1 + $I_L30587_173
30600.                      if ( $I_L30587_173 >= _rsh( -2 + n_cloud_top, 1 ) ) exit
30600.                   enddo
30600.                   $I_L30587_163 = and( 0xfffffffffffffffeUL, -2 + n_cloud_top )
30600.                endif
30587.                if ( $I_L30587_163 < -2 + n_cloud_top ) then
30588.                   $I_L30588_139 = 0
30588. !dir$ ivdep
30588. !dir$ blocking_size( 256, 256 )
30588.                   do
30590.                      $beta11_inv_WR0_R12 = 1.0/( 1.0 + -( alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -1) * r($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) ) )
30590.                      beta11_inv($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) = $beta11_inv_WR0_R12
30592.                      $gamma11_WR0_R13 = alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -1) * t($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2)
30592.                      gamma11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) = $gamma11_WR0_R13
30593.                      $h1_WR0_R14 = g1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -1) + alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -1) * s_down($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2)
30593.                      h1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) = $h1_WR0_R14
30595.                      $lambda1_S15 = t($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) * $beta11_inv_WR0_R12
30596.                      alpha11($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) = r($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) + $lambda1_S15 * $gamma11_WR0_R13
30597.                      g1($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) = s_up($I_L30588_139 + 256 * $I_L30588_169 + 1, n_cloud_top + -$I_L30587_163 + -2) + $lambda1_S15 * $h1_WR0_R14
30588.                      $I_L30588_139 = 1 + $I_L30588_139
30588.                      if ( $I_L30588_139 >= min( n_profile, 256 + 256 * $I_L30588_169 ) + -256 * $I_L30588_169 ) exit
30588.                   enddo
30588.                endif
30588.                $I_L30588_169 = 1 + $I_L30588_169
30599.                if ( $I_L30588_169 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
30599.             enddo
30599.          endif
30599.       endif
30607.       if ( n_cloud_top > 1 ) then
30608.          if ( n_profile > 0 ) then
30608.             $I_L30608_142 = 0
30608. !dir$ ivdep
30608.             do
30609.                flux_total(1 + $I_L30608_142, 1) = alpha11(1 + $I_L30608_142, 1) * flux_total(1 + $I_L30608_142, 2) + g1(1 + $I_L30608_142, 1)
30610.                $I_L30608_142 = 1 + $I_L30608_142
30608.                if ( $I_L30608_142 >= n_profile ) exit
30608.             enddo
30621.             $I_L30621_157 = 0
30621.             if ( -3 + n_cloud_top >= 0 ) then
30621.                $I_L30621_175 = 0
30621.                do
30622.                   $I_L30622_146 = 0
30622. !dir$ ivdep
30622.                   do
30623.                      $flux_total_WR0_R15 = ( gamma11(1 + $I_L30622_146, 1 + 2 * $I_L30621_175) * flux_total(1 + $I_L30622_146, 2 + 4 * $I_L30621_175) + h1(1 + $I_L30622_146, 1 + 2 * $I_L30621_175) ) * beta11_inv(1 + $I_L30622_146, 1 + 2 * $I_L30621_175)
30623.                      flux_total(1 + $I_L30622_146, 3 + 4 * $I_L30621_175) = $flux_total_WR0_R15
30625.                      flux_total(1 + $I_L30622_146, 4 + 4 * $I_L30621_175) = t(1 + $I_L30622_146, 1 + 2 * $I_L30621_175) * flux_total(1 + $I_L30622_146, 2 + 4 * $I_L30621_175) + r(1 + $I_L30622_146, 1 + 2 * $I_L30621_175) * $flux_total_WR0_R15 + s_down(1 + $I_L30622_146, 1 + 2 * $I_L30621_175)
30623.                      $flux_total_WR0_R15 = ( gamma11(1 + $I_L30622_146, 2 + 2 * $I_L30621_175) * flux_total(1 + $I_L30622_146, 4 + 4 * $I_L30621_175) + h1(1 + $I_L30622_146, 2 + 2 * $I_L30621_175) ) * beta11_inv(1 + $I_L30622_146, 2 + 2 * $I_L30621_175)
30623.                      flux_total(1 + $I_L30622_146, 5 + 4 * $I_L30621_175) = $flux_total_WR0_R15
30625.                      flux_total(1 + $I_L30622_146, 6 + 4 * $I_L30621_175) = t(1 + $I_L30622_146, 2 + 2 * $I_L30621_175) * flux_total(1 + $I_L30622_146, 4 + 4 * $I_L30621_175) + r(1 + $I_L30622_146, 2 + 2 * $I_L30621_175) * $flux_total_WR0_R15 + s_down(1 + $I_L30622_146, 2 + 2 * $I_L30621_175)
30627.                      $I_L30622_146 = 1 + $I_L30622_146
30622.                      if ( $I_L30622_146 >= n_profile ) exit
30622.                   enddo
30628.                   $I_L30621_175 = 1 + $I_L30621_175
30627.                   if ( $I_L30621_175 >= _rsh( -1 + n_cloud_top, 1 ) ) exit
30627.                enddo
30628.                $I_L30621_157 = and( 0xfffffffffffffffeUL, -1 + n_cloud_top )
30628.             endif
30621.             if ( $I_L30621_157 < -1 + n_cloud_top ) then
30622.                $I_L30622_146 = 0
30622. !dir$ ivdep
30622.                do
30623.                   $flux_total_WR0_R15 = ( gamma11(1 + $I_L30622_146, 1 + $I_L30621_157) * flux_total(1 + $I_L30622_146, 2 + 2 * $I_L30621_157) + h1(1 + $I_L30622_146, 1 + $I_L30621_157) ) * beta11_inv(1 + $I_L30622_146, 1 + $I_L30621_157)
30623.                   flux_total(1 + $I_L30622_146, 3 + 2 * $I_L30621_157) = $flux_total_WR0_R15
30625.                   flux_total(1 + $I_L30622_146, 4 + 2 * $I_L30621_157) = t(1 + $I_L30622_146, 1 + $I_L30621_157) * flux_total(1 + $I_L30622_146, 2 + 2 * $I_L30621_157) + r(1 + $I_L30622_146, 1 + $I_L30621_157) * $flux_total_WR0_R15 + s_down(1 + $I_L30622_146, 1 + $I_L30621_157)
30627.                   $I_L30622_146 = 1 + $I_L30622_146
30622.                   if ( $I_L30622_146 >= n_profile ) exit
30622.                enddo
30622.             endif
30622.          endif
30611.       else if ( n_profile > 0 ) then
30612.          $I_L30612_144 = 0
30612. !dir$ ivdep
30612.          do
30613.             flux_total(1 + $I_L30612_144, 1) = g1(1 + $I_L30612_144, 1) + flux_inc_down(1 + $I_L30612_144) * ( v11(1 + $I_L30612_144, 0) * alpha11(1 + $I_L30612_144, 1) + v21(1 + $I_L30612_144, 0) * alpha22(1 + $I_L30612_144, 1) + v31(1 + $I_L30612_144, 0) * alpha33(1 + $I_L30612_144, 1) )
30616.             $I_L30612_144 = 1 + $I_L30612_144
30612.             if ( $I_L30612_144 >= n_profile ) exit
30612.          enddo
30612.       endif
30634.       if ( n_cloud_top <= n_layer ) then
30638.          if ( n_profile > 0 ) then
30638.             $I_L30638_148 = 0
30638. !dir$ ivdep
30638.             do
30639.                $flux_down_1_WR0_R16 = v11(1 + $I_L30638_148, -1 + n_cloud_top) * flux_total(1 + $I_L30638_148, 2 * n_cloud_top)
30640.                $flux_down_2_WR0_R17 = v21(1 + $I_L30638_148, -1 + n_cloud_top) * flux_total(1 + $I_L30638_148, 2 * n_cloud_top)
30641.                $flux_down_3_WR0_R18 = v31(1 + $I_L30638_148, -1 + n_cloud_top) * flux_total(1 + $I_L30638_148, 2 * n_cloud_top)
30643.                $flux_up_1_WR0_R19 = ( gamma11(1 + $I_L30638_148, n_cloud_top) * $flux_down_1_WR0_R16 + h1(1 + $I_L30638_148, n_cloud_top) ) * beta11_inv(1 + $I_L30638_148, n_cloud_top)
30643.                flux_up_1(1 + $I_L30638_148, n_cloud_top) = $flux_up_1_WR0_R19
30645.                $flux_up_2_WR0_R20 = ( gamma22(1 + $I_L30638_148, n_cloud_top) * $flux_down_2_WR0_R17 + h2(1 + $I_L30638_148, n_cloud_top) ) * beta22_inv(1 + $I_L30638_148, n_cloud_top)
30645.                flux_up_2(1 + $I_L30638_148, n_cloud_top) = $flux_up_2_WR0_R20
30647.                $flux_up_3_WR0_R21 = ( gamma33(1 + $I_L30638_148, n_cloud_top) * $flux_down_3_WR0_R18 + h3(1 + $I_L30638_148, n_cloud_top) ) * beta33_inv(1 + $I_L30638_148, n_cloud_top)
30647.                flux_up_3(1 + $I_L30638_148, n_cloud_top) = $flux_up_3_WR0_R21
30650.                $flux_down_1_WR0_R16 = t(1 + $I_L30638_148, n_cloud_top) * $flux_down_1_WR0_R16 + r(1 + $I_L30638_148, n_cloud_top) * $flux_up_1_WR0_R19 + s_down(1 + $I_L30638_148, n_cloud_top)
30650.                flux_down_1(1 + $I_L30638_148, n_cloud_top) = $flux_down_1_WR0_R16
30652.                $flux_down_2_WR0_R17 = t_strat(1 + $I_L30638_148, n_cloud_top) * $flux_down_2_WR0_R17 + r_strat(1 + $I_L30638_148, n_cloud_top) * $flux_up_2_WR0_R20 + s_down_strat(1 + $I_L30638_148, n_cloud_top)
30652.                flux_down_2(1 + $I_L30638_148, n_cloud_top) = $flux_down_2_WR0_R17
30654.                $flux_down_3_WR0_R18 = t_conv(1 + $I_L30638_148, n_cloud_top) * $flux_down_3_WR0_R18 + r_conv(1 + $I_L30638_148, n_cloud_top) * $flux_up_3_WR0_R21 + s_down_conv(1 + $I_L30638_148, n_cloud_top)
30654.                flux_down_3(1 + $I_L30638_148, n_cloud_top) = $flux_down_3_WR0_R18
30656.                $I_L30638_148 = 1 + $I_L30638_148
30638.                if ( $I_L30638_148 >= n_profile ) exit
30638.             enddo
30638.          endif
30638.       endif
30661.       if ( n_layer + -n_cloud_top > 0 ) then
30662.          if ( n_profile > 0 ) then
30662.             $I_L30662_171 = 0
30662.             do
30661.                $I_L30661_165 = 0
30661. !dir$ blocking_size( 0, 0 )
30661.                do
30662.                   $I_L30662_150 = 0
30662. !dir$ ivdep
30662. !dir$ blocking_size( 256, 256 )
30662.                   do
30663.                      $flux_down_1_WR0_R23 = v11($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) + v12($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) + v13($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165)
30663.                      flux_down_1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_down_1_WR0_R23
30666.                      $flux_down_2_WR0_R22 = v21($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) + v22($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) + v23($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165)
30666.                      flux_down_2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_down_2_WR0_R22
30669.                      $flux_down_3_WR0_R24 = v31($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) + v32($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) + v33($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165) * flux_down_3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165)
30669.                      flux_down_3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_down_3_WR0_R24
30673.                      $flux_up_1_WR0_R25 = ( gamma11($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_down_1_WR0_R23 + h1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) ) * beta11_inv($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1)
30673.                      flux_up_1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_up_1_WR0_R25
30675.                      $flux_up_2_WR0_R26 = ( gamma22($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_down_2_WR0_R22 + h2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) ) * beta22_inv($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1)
30675.                      flux_up_2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_up_2_WR0_R26
30677.                      $flux_up_3_WR0_R27 = ( gamma33($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_down_3_WR0_R24 + h3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) ) * beta33_inv($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1)
30677.                      flux_up_3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_up_3_WR0_R27
30680.                      $flux_down_1_WR0_R23 = t($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_down_1_WR0_R23 + r($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_up_1_WR0_R25 + s_down($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1)
30680.                      flux_down_1($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_down_1_WR0_R23
30682.                      $flux_down_2_WR0_R22 = t_strat($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_down_2_WR0_R22 + r_strat($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_up_2_WR0_R26 + s_down_strat($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1)
30682.                      flux_down_2($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_down_2_WR0_R22
30684.                      $flux_down_3_WR0_R24 = t_conv($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_down_3_WR0_R24 + r_conv($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) * $flux_up_3_WR0_R27 + s_down_conv($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1)
30684.                      flux_down_3($I_L30662_150 + 256 * $I_L30662_171 + 1, n_cloud_top + $I_L30661_165 + 1) = $flux_down_3_WR0_R24
30662.                      $I_L30662_150 = 1 + $I_L30662_150
30662.                      if ( $I_L30662_150 >= min( n_profile, 256 + 256 * $I_L30662_171 ) + -256 * $I_L30662_171 ) exit
30662.                   enddo
30687.                   $I_L30661_165 = 1 + $I_L30661_165
30687.                   if ( $I_L30661_165 >= ( n_layer + -n_cloud_top ) ) exit
30687.                enddo
30662.                $I_L30662_171 = 1 + $I_L30662_171
30686.                if ( $I_L30662_171 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
30686.             enddo
30686.          endif
30686.       endif
30691.       if ( n_layer + -n_cloud_top >= 0 ) then
30692.          if ( n_profile > 0 ) then
30691.             $I_L30691_159 = 0
30691.             do
30692.                $I_L30692_153 = 0
30692. !dir$ ivdep
30692.                do
30693.                   flux_total(1 + $I_L30692_153, 2 * n_cloud_top + 2 * $I_L30691_159 + 1) = flux_up_1(1 + $I_L30692_153, n_cloud_top + $I_L30691_159) + flux_up_2(1 + $I_L30692_153, n_cloud_top + $I_L30691_159) + flux_up_3(1 + $I_L30692_153, n_cloud_top + $I_L30691_159)
30695.                   flux_total(1 + $I_L30692_153, 2 * n_cloud_top + 2 * $I_L30691_159 + 2) = flux_down_1(1 + $I_L30692_153, n_cloud_top + $I_L30691_159) + flux_down_2(1 + $I_L30692_153, n_cloud_top + $I_L30691_159) + flux_down_3(1 + $I_L30692_153, n_cloud_top + $I_L30691_159)
30697.                   $I_L30692_153 = 1 + $I_L30692_153
30692.                   if ( $I_L30692_153 >= n_profile ) exit
30692.                enddo
30698.                $I_L30691_159 = 1 + $I_L30691_159
30697.                if ( $I_L30691_159 >= n_layer + -n_cloud_top + 1 ) exit
30697.             enddo
30697.          endif
30697.       endif
30320.       _free( t$4273 )
30703.       return
30703.       end
30703.       
30976.       
30976.       subroutine sph_matrix_solver( n_matrix, n_step, n_block, a, b, x, nd_matrix, nd_equation, nd_diagonal )
30726.       t$1224 = nd_matrix
30726.       t$1225 = nd_equation
30726.       t$1226 = nd_diagonal
30759.       t$4339 = _zla( 0, nd_matrix )
30726.       t$4340 = _zla( 0, nd_matrix )
30759.       t$4341 = _zla( 0, nd_equation )
30726.       t$4342 = _zla( 0, nd_matrix ) * _zla( 0, nd_equation )
30759.       t$4343 = _zla( 0, nd_diagonal )
30726.       t$4344 = _zla( 0, nd_matrix ) * _zla( 0, nd_equation ) * _zla( 0, nd_diagonal )
30726.       t$4345 = _zla( 0, nd_matrix ) * _zla( 0, nd_equation )
30787.       t$4348 = 4 * _zla( 0, nd_matrix )
30789.       t$4350 = 8 * _zla( 0, nd_matrix )
30801.       t$4351 = 8 * _zla( 0, nd_matrix )
30801.       t$4353 = 16 * _zla( 0, nd_matrix )
30803.       t$4354 = 16 * _zla( 0, nd_matrix )
30803.       t$4356 = 24 * _zla( 0, nd_matrix )
30726.       t$4346 = int( _alloc( 24 * _zla( 0, nd_matrix ) ), 8 )
30787.       t$4347 = t$4346
30789.       t$4349 = t$4346 + 4 * _zla( 0, nd_matrix )
30801.       t$4352 = t$4346 + 8 * _zla( 0, nd_matrix )
30803.       t$4355 = t$4346 + 16 * _zla( 0, nd_matrix )
30814.       if ( 0 < n_step ) then
30821.          if ( n_block > 0 ) then
30814.             $I_i_step_220 = 0
30814.             do
30819.                $I_L30819_216 = 0
30819.                do
30821.                   $I_L30821_212 = 0
30821.                   do
30834.                      if ( n_matrix > 0 ) then
30834.                         $I_L30834_170 = 0
30834. !dir$ ivdep
30834.                         do
30835.                            pivot(1 + $I_L30834_170) = abs( a(1 + $I_L30834_170, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1, $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 1) )
30836.                            i_pivot(1 + $I_L30834_170) = ( $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1 )
30837.                            offset_pivot(1 + $I_L30834_170) = 0
30838.                            $I_L30834_170 = 1 + $I_L30834_170
30834.                            if ( $I_L30834_170 >= n_matrix ) exit
30834.                         enddo
30834.                      endif
30842.                      if ( ( min( ( n_block + n_block * $I_L30819_216 * 2 + n_block * $I_i_step_220 * 2 ), n_step * n_block * 2 ) + -$I_L30821_212 + -( n_block * $I_L30819_216 ) + n_block * $I_i_step_220 * -2 + -1 ) > 0 ) then
30843.                         if ( n_matrix > 0 ) then
30843.                            $I_L30843_194 = 0
30843. !dir$ ivdep
30843.                            do
30842.                               $SCA_pivot_I1 = pivot(1 + $I_L30843_194)
30842.                               $I_L30842_172 = 0
30842. !dir$ unroll 4
30842.                               do
30844.                                  $aabs_S6 = abs( a(1 + $I_L30843_194, $I_L30842_172 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2, $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 1) )
30845.                                  if ( $aabs_S6 > $SCA_pivot_I1 ) then
30846.                                     $SCA_pivot_I1 = $aabs_S6
30847.                                     i_pivot(1 + $I_L30843_194) = ( $I_L30842_172 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2 )
30847.                                  endif
30850.                                  $I_L30842_172 = 1 + $I_L30842_172
30848.                                  if ( $I_L30842_172 >= min( ( n_block + n_block * $I_L30819_216 * 2 + n_block * $I_i_step_220 * 2 ), n_step * n_block * 2 ) + -$I_L30821_212 + -( n_block * $I_L30819_216 ) + n_block * $I_i_step_220 * -2 + -1 ) exit
30848.                               enddo
30842.                               pivot(1 + $I_L30843_194) = $SCA_pivot_I1
30849.                               $I_L30843_194 = 1 + $I_L30843_194
30849.                               if ( $I_L30843_194 >= n_matrix ) exit
30849.                            enddo
30849.                         endif
30849.                      endif
30854.                      if ( $I_L30819_216 == 0 ) then
30855.                         if ( ( -n_block + n_block * $I_i_step_220 * -2 + n_block * min( ( 3 + 2 * $I_i_step_220 ), 2 * n_step ) ) > 0 ) then
30857.                            if ( n_matrix > 0 ) then
30857.                               $I_L30857_196 = 0
30857. !dir$ ivdep
30857.                               do
30855.                                  $SCA_pivot_I0 = pivot(1 + $I_L30857_196)
30855.                                  $I_L30855_174 = 0
30855. !dir$ unroll 4
30855.                                  do
30858.                                     $aabs_S9 = abs( a(1 + $I_L30857_196, n_block + $I_L30855_174 + n_block * $I_i_step_220 * 2 + 1, 1 + $I_L30821_212) )
30859.                                     if ( $aabs_S9 > $SCA_pivot_I0 ) then
30860.                                        $SCA_pivot_I0 = $aabs_S9
30861.                                        i_pivot(1 + $I_L30857_196) = ( n_block + $I_L30855_174 + n_block * $I_i_step_220 * 2 + 1 )
30862.                                        offset_pivot(1 + $I_L30857_196) = 2 * n_block
30862.                                     endif
30865.                                     $I_L30855_174 = 1 + $I_L30855_174
30863.                                     if ( $I_L30855_174 >= -n_block + n_block * $I_i_step_220 * -2 + n_block * min( ( 3 + 2 * $I_i_step_220 ), 2 * n_step ) ) exit
30863.                                  enddo
30864.                                  $I_L30857_196 = 1 + $I_L30857_196
30864.                                  if ( $I_L30857_196 >= n_matrix ) exit
30864.                               enddo
30864.                            endif
30864.                         endif
30864.                      endif
30869.                      if ( ( -$I_L30821_212 + cvmg( ( 4 * n_block + n_block * $I_L30819_216 * -2 ), ( 6 * n_block + n_block * $I_L30819_216 * -2 ), ( 1 + $I_i_step_220 ) >= n_step ) + -2 * n_block + n_block * $I_L30819_216 + -1 ) >= 0 ) then
30870.                         if ( n_matrix > 0 ) then
30869.                            $I_L30869_198 = 0
30869.                            do
30870.                               $I_L30870_176 = 0
30870. !dir$ ivdep
30870.                               do
30871.                                  $tmp_S12 = a(1 + $I_L30870_176, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1, $I_L30869_198 + $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 1)
30872.                                  a(1 + $I_L30870_176, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1, $I_L30869_198 + $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 1) = a(1 + $I_L30870_176, i_pivot(1 + $I_L30870_176), $I_L30869_198 + $I_L30821_212 + -offset_pivot(1 + $I_L30870_176) + -( n_block * $I_L30819_216 ) + 2 * n_block + 1)
30873.                                  a(1 + $I_L30870_176, i_pivot(1 + $I_L30870_176), $I_L30869_198 + $I_L30821_212 + -offset_pivot(1 + $I_L30870_176) + -( n_block * $I_L30819_216 ) + 2 * n_block + 1) = $tmp_S12
30874.                                  $I_L30870_176 = 1 + $I_L30870_176
30870.                                  if ( $I_L30870_176 >= n_matrix ) exit
30870.                               enddo
30875.                               $I_L30869_198 = 1 + $I_L30869_198
30874.                               if ( $I_L30869_198 >= -$I_L30821_212 + cvmg( ( 4 * n_block + n_block * $I_L30819_216 * -2 ), ( 6 * n_block + n_block * $I_L30819_216 * -2 ), ( 1 + $I_i_step_220 ) >= n_step ) + -2 * n_block + n_block * $I_L30819_216 ) exit
30874.                            enddo
30874.                         endif
30874.                      endif
30876.                      if ( n_matrix > 0 ) then
30876.                         $I_L30876_178 = 0
30876. !dir$ ivdep
30876.                         do
30877.                            $tmp_S14 = b(1 + $I_L30876_178, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1)
30878.                            b(1 + $I_L30876_178, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1) = b(1 + $I_L30876_178, i_pivot(1 + $I_L30876_178))
30879.                            b(1 + $I_L30876_178, i_pivot(1 + $I_L30876_178)) = $tmp_S14
30880.                            $I_L30876_178 = 1 + $I_L30876_178
30876.                            if ( $I_L30876_178 >= n_matrix ) exit
30876.                         enddo
30876.                      endif
30892.                      if ( ( -$I_L30821_212 + -( n_block * $I_L30819_216 ) + cvmg( ( n_block + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 ), ( n_block + n_block * $I_L30819_216 * 2 + n_block * $I_i_step_220 * 2 ), ( 1 + $I_i_step_220 ) >= n_step ) + n_block * $I_i_step_220 * -2 + -2 ) >= 0 ) then
30892.                         $I_L30892_206 = 0
30892.                         do
30893.                            if ( n_matrix > 0 ) then
30893.                               $I_L30893_180 = 0
30893. !dir$ ivdep
30893.                               do
30894.                                  $rho_WR0_R0 = ( a(1 + $I_L30893_180, $I_L30892_206 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2, $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 1) * 1.0/a(1 + $I_L30893_180, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1, $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 1) )
30894.                                  rho(1 + $I_L30893_180) = $rho_WR0_R0
30895.                                  b(1 + $I_L30893_180, $I_L30892_206 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2) = b(1 + $I_L30893_180, $I_L30892_206 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2) + -( $rho_WR0_R0 * b(1 + $I_L30893_180, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1) )
30896.                                  $I_L30893_180 = 1 + $I_L30893_180
30893.                                  if ( $I_L30893_180 >= n_matrix ) exit
30893.                               enddo
30893.                            endif
30897.                            if ( ( -$I_L30821_212 + cvmg( ( 4 * n_block + n_block * $I_L30819_216 * -2 ), ( 6 * n_block + n_block * $I_L30819_216 * -2 ), ( 1 + $I_i_step_220 ) >= n_step ) + -2 * n_block + n_block * $I_L30819_216 + -1 ) > 0 ) then
30898.                               if ( n_matrix > 0 ) then
30897.                                  $I_L30897_200 = 0
30897. !dir$ blocking_size( 0, 0 )
30897.                                  do
30898.                                     $I_L30898_182 = 0
30898. !dir$ ivdep
30898. !dir$ blocking_size( 0, 0 )
30898.                                     do
30899.                                        a(1 + $I_L30898_182, $I_L30892_206 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2, $I_L30897_200 + $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 2) = a(1 + $I_L30898_182, $I_L30892_206 + $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 2, $I_L30897_200 + $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 2) + -( rho(1 + $I_L30898_182) * a(1 + $I_L30898_182, $I_L30821_212 + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 + 1, $I_L30897_200 + $I_L30821_212 + -( n_block * $I_L30819_216 ) + 2 * n_block + 2) )
30900.                                        $I_L30898_182 = 1 + $I_L30898_182
30898.                                        if ( $I_L30898_182 >= n_matrix ) exit
30898.                                     enddo
30901.                                     $I_L30897_200 = 1 + $I_L30897_200
30900.                                     if ( $I_L30897_200 >= -$I_L30821_212 + cvmg( ( 4 * n_block + n_block * $I_L30819_216 * -2 ), ( 6 * n_block + n_block * $I_L30819_216 * -2 ), ( 1 + $I_i_step_220 ) >= n_step ) + -2 * n_block + n_block * $I_L30819_216 + -1 ) exit
30900.                                  enddo
30900.                               endif
30900.                            endif
30902.                            $I_L30892_206 = 1 + $I_L30892_206
30901.                            if ( $I_L30892_206 >= -$I_L30821_212 + -( n_block * $I_L30819_216 ) + cvmg( ( n_block + n_block * $I_L30819_216 + n_block * $I_i_step_220 * 2 ), ( n_block + n_block * $I_L30819_216 * 2 + n_block * $I_i_step_220 * 2 ), ( 1 + $I_i_step_220 ) >= n_step ) + n_block * $I_i_step_220 * -2 + -1 ) exit
30901.                         enddo
30901.                      endif
30905.                      if ( $I_L30819_216 == 0 ) then
30912.                         if ( ( -n_block + cvmg( ( 2 * n_block + n_block * $I_i_step_220 * 2 ), ( 3 * n_block + n_block * $I_i_step_220 * 2 ), ( 1 + $I_i_step_220 ) >= n_step ) + n_block * $I_i_step_220 * -2 ) > 0 ) then
30912.                            $I_L30912_208 = 0
30912.                            do
30913.                               if ( n_matrix > 0 ) then
30913.                                  $I_L30913_184 = 0
30913. !dir$ ivdep
30913.                                  do
30914.                                     $rho_WR0_R1 = ( a(1 + $I_L30913_184, n_block + $I_L30912_208 + n_block * $I_i_step_220 * 2 + 1, 1 + $I_L30821_212) * 1.0/a(1 + $I_L30913_184, $I_L30821_212 + n_block * $I_i_step_220 * 2 + 1, $I_L30821_212 + 2 * n_block + 1) )
30914.                                     rho(1 + $I_L30913_184) = $rho_WR0_R1
30915.                                     b(1 + $I_L30913_184, n_block + $I_L30912_208 + n_block * $I_i_step_220 * 2 + 1) = b(1 + $I_L30913_184, n_block + $I_L30912_208 + n_block * $I_i_step_220 * 2 + 1) + -( $rho_WR0_R1 * b(1 + $I_L30913_184, $I_L30821_212 + n_block * $I_i_step_220 * 2 + 1) )
30916.                                     $I_L30913_184 = 1 + $I_L30913_184
30913.                                     if ( $I_L30913_184 >= n_matrix ) exit
30913.                                  enddo
30913.                               endif
30917.                               if ( ( -$I_L30821_212 + cvmg( 4 * n_block, 6 * n_block, ( 1 + $I_i_step_220 ) >= n_step ) + -2 * n_block + -1 ) > 0 ) then
30918.                                  if ( n_matrix > 0 ) then
30917.                                     $I_L30917_202 = 0
30917. !dir$ blocking_size( 0, 0 )
30917.                                     do
30918.                                        $I_L30918_186 = 0
30918. !dir$ ivdep
30918. !dir$ blocking_size( 0, 0 )
30918.                                        do
30919.                                           a(1 + $I_L30918_186, n_block + $I_L30912_208 + n_block * $I_i_step_220 * 2 + 1, $I_L30917_202 + $I_L30821_212 + 2) = a(1 + $I_L30918_186, n_block + $I_L30912_208 + n_block * $I_i_step_220 * 2 + 1, $I_L30917_202 + $I_L30821_212 + 2) + -( rho(1 + $I_L30918_186) * a(1 + $I_L30918_186, $I_L30821_212 + n_block * $I_i_step_220 * 2 + 1, $I_L30917_202 + $I_L30821_212 + 2 * n_block + 2) )
30921.                                           $I_L30918_186 = 1 + $I_L30918_186
30918.                                           if ( $I_L30918_186 >= n_matrix ) exit
30918.                                        enddo
30922.                                        $I_L30917_202 = 1 + $I_L30917_202
30921.                                        if ( $I_L30917_202 >= -$I_L30821_212 + cvmg( 4 * n_block, 6 * n_block, ( 1 + $I_i_step_220 ) >= n_step ) + -2 * n_block + -1 ) exit
30921.                                     enddo
30921.                                  endif
30921.                               endif
30923.                               $I_L30912_208 = 1 + $I_L30912_208
30922.                               if ( $I_L30912_208 >= -n_block + cvmg( ( 2 * n_block + n_block * $I_i_step_220 * 2 ), ( 3 * n_block + n_block * $I_i_step_220 * 2 ), ( 1 + $I_i_step_220 ) >= n_step ) + n_block * $I_i_step_220 * -2 ) exit
30922.                            enddo
30922.                         endif
30922.                      endif
30926.                      $I_L30821_212 = 1 + $I_L30821_212
30924.                      if ( $I_L30821_212 >= n_block ) exit
30924.                   enddo
30927.                   $I_L30819_216 = 1 + $I_L30819_216
30926.                   if ( $I_L30819_216 >= 2 ) exit
30926.                enddo
30931.                $I_i_step_220 = 1 + $I_i_step_220
30927.                if ( $I_i_step_220 >= n_step ) exit
30927.             enddo
30937.             $I_i_step_218 = 0
30937.             do
30940.                $I_L30940_214 = 0
30940.                do
30948.                   $I_L30948_210 = 0
30948.                   do
30953.                      if ( n_matrix > 0 ) then
30953.                         $I_L30953_188 = 0
30953. !dir$ ivdep
30953.                         do
30954.                            x(1 + $I_L30953_188, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2) = b(1 + $I_L30953_188, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2)
30955.                            $I_L30953_188 = 1 + $I_L30953_188
30953.                            if ( $I_L30953_188 >= n_matrix ) exit
30953.                         enddo
30953.                      endif
30956.                      if ( ( $I_L30948_210 + -( n_block * $I_L30940_214 ) + cvmg( ( 2 * n_block + n_block * $I_L30940_214 * 2 ), ( 4 * n_block + n_block * $I_L30940_214 * 2 ), ( n_step + -$I_i_step_218 ) >= n_step ) + -2 * n_block ) > 0 ) then
30957.                         if ( n_matrix > 0 ) then
30956.                            $I_L30956_204 = 0
30956. !dir$ blocking_size( 0, 0 )
30956.                            do
30957.                               $I_L30957_190 = 0
30957. !dir$ ivdep
30957. !dir$ blocking_size( 0, 0 )
30957.                               do
30958.                                  x(1 + $I_L30957_190, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2) = x(1 + $I_L30957_190, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2) + -( a(1 + $I_L30957_190, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2, $I_L30956_204 + -( 2 * n_block ) + -$I_L30948_210 + 4 * n_block + n_block * $I_L30940_214 + 1) * x(1 + $I_L30957_190, $I_L30956_204 + -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2 + 1) )
30959.                                  $I_L30957_190 = 1 + $I_L30957_190
30957.                                  if ( $I_L30957_190 >= n_matrix ) exit
30957.                               enddo
30960.                               $I_L30956_204 = 1 + $I_L30956_204
30959.                               if ( $I_L30956_204 >= $I_L30948_210 + -( n_block * $I_L30940_214 ) + cvmg( ( 2 * n_block + n_block * $I_L30940_214 * 2 ), ( 4 * n_block + n_block * $I_L30940_214 * 2 ), ( n_step + -$I_i_step_218 ) >= n_step ) + -2 * n_block ) exit
30959.                            enddo
30959.                         endif
30959.                      endif
30961.                      if ( n_matrix > 0 ) then
30961.                         $I_L30961_192 = 0
30961. !dir$ ivdep
30961.                         do
30962.                            x(1 + $I_L30961_192, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2) = ( x(1 + $I_L30961_192, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2) * 1.0/a(1 + $I_L30961_192, -$I_L30948_210 + -( n_block * $I_L30940_214 ) + n_step * n_block * 2 + n_block * $I_i_step_218 * -2, -( 2 * n_block ) + -$I_L30948_210 + 4 * n_block + n_block * $I_L30940_214) )
30963.                            $I_L30961_192 = 1 + $I_L30961_192
30961.                            if ( $I_L30961_192 >= n_matrix ) exit
30961.                         enddo
30961.                      endif
30965.                      $I_L30948_210 = 1 + $I_L30948_210
30963.                      if ( $I_L30948_210 >= n_block ) exit
30963.                   enddo
30966.                   $I_L30940_214 = 1 + $I_L30940_214
30965.                   if ( $I_L30940_214 >= 2 ) exit
30965.                enddo
30971.                $I_i_step_218 = 1 + $I_i_step_218
30966.                if ( $I_i_step_218 >= n_step ) exit
30966.             enddo
30966.          endif
30966.       endif
30726.       _free( t$4346 )
30976.       return
30976.       end
30976.       
31498.       
31498.       subroutine sph_solver( ierr, n_profile, n_layer, ms_min, ms_max, i_truncation, ls_local_trunc, cg_coeff, uplm_zero, ia_sph_mm, accuracy_adaptive, euler_factor, i_sph_algorithm, i_sph_mode, isolir, l_scale_solar, adjust_solar_ke, i_direct, mu_0, uplm_sol, diff_planck, flux_inc_down, l_ir_source_quad, diff_planck_2, tau, omega, phase_fnc, phase_fnc_solar, ls_brdf_trunc, n_brdf_basis_fnc, rho_alb, f_brdf, brdf_sol, brdf_hemi, d_planck_flux_surface, n_viewing_level, i_rad_layer, frac_rad_layer, n_direction, direction, flux_direct, flux_total, radiance_mono, photolysis, nd_profile, nd_layer, nd_flux_profile, nd_radiance_profile, nd_j_profile, nd_max_order, nd_sph_coeff, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range, nd_viewing_level, nd_direction )
30995.       t$1235 = nd_max_order
30995.       t$4357 = 1 + nd_max_order
31109.       t$4358 = _zla( 0, 1 + nd_max_order )
30995.       t$1236 = nd_sph_coeff
31118.       t$4359 = _zla( 0, nd_sph_coeff )
30995.       t$1237 = nd_profile
30995.       t$1238 = nd_layer
31137.       t$4360 = _zla( 0, nd_profile )
30995.       t$4361 = _zla( 0, nd_profile )
31137.       t$4362 = _zla( 0, nd_layer )
30995.       t$4363 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
30995.       t$4364 = 1 + nd_layer
31161.       t$4365 = _zla( 0, 1 + nd_layer )
30995.       t$4366 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
30995.       t$4367 = _zla( 0, nd_sph_coeff ) * _zla( 0, nd_profile )
30995.       t$4368 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
31145.       t$4369 = _zla( 0, nd_max_order )
30995.       t$4370 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_max_order )
30995.       t$1239 = nd_radiance_profile
30995.       t$1240 = nd_direction
31147.       t$4371 = _zla( 0, nd_radiance_profile )
30995.       t$4372 = _zla( 0, nd_radiance_profile )
30995.       t$4373 = _zla( 0, nd_layer ) * _zla( 0, nd_radiance_profile )
31147.       t$4374 = _zla( 0, nd_direction )
30995.       t$4375 = _zla( 0, nd_layer ) * _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
30995.       t$1241 = nd_brdf_basis_fnc
31171.       t$4376 = _zla( 0, nd_brdf_basis_fnc )
30995.       t$4377 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
30995.       t$1242 = nd_brdf_trunc / 2
30995.       t$1243 = nd_brdf_trunc
30995.       t$4378 = _zla( 0, nd_brdf_basis_fnc )
30995.       t$4379 = 1 + nd_brdf_trunc / 2
31173.       t$4380 = _zla( 0, 1 + nd_brdf_trunc / 2 )
30995.       t$4381 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
30995.       t$4382 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 )
30995.       t$4383 = 1 + nd_brdf_trunc
31173.       t$4384 = _zla( 0, 1 + nd_brdf_trunc )
30995.       t$4385 = _zla( 0, nd_brdf_basis_fnc ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc / 2 ) * _zla( 0, 1 + nd_brdf_trunc )
30995.       t$4386 = _zla( 0, nd_profile ) * _zla( 0, nd_brdf_basis_fnc )
30995.       t$4387 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_brdf_basis_fnc )
30995.       t$1244 = nd_viewing_level
31189.       t$4388 = _zla( 0, nd_viewing_level )
30995.       t$4389 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction )
30995.       t$4390 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * 2
30995.       t$1245 = nd_flux_profile
31199.       t$4391 = _zla( 0, nd_flux_profile )
30995.       t$4392 = _zla( 0, nd_flux_profile )
30995.       t$4393 = _zla( 0, nd_flux_profile ) * _zla( 0, 1 + nd_layer )
30995.       t$1246 = ( 2 + 2 * nd_layer )
31201.       t$4394 = _zla( 0, ( 2 + 2 * nd_layer ) )
30995.       t$4395 = _zla( 0, nd_flux_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
30995.       t$4396 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_viewing_level )
30995.       t$4397 = _zla( 0, nd_radiance_profile ) * _zla( 0, nd_direction ) * _zla( 0, nd_viewing_level )
30995.       t$1247 = nd_j_profile
31206.       t$4398 = _zla( 0, nd_j_profile )
30995.       t$4399 = _zla( 0, nd_j_profile )
30995.       t$4400 = _zla( 0, nd_viewing_level ) * _zla( 0, nd_j_profile )
30995.       t$1253 = nd_sph_equation
30995.       t$1254 = nd_sph_diagonal
31242.       t$4401 = _zla( 0, nd_sph_equation )
30995.       t$4402 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation )
31242.       t$4403 = _zla( 0, nd_sph_diagonal )
30995.       t$4404 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal )
31242.       t$4407 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8
30995.       t$4408 = _zla( 0, nd_profile ) * _zla( 0, nd_direction )
31249.       t$4409 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8
31249.       t$4411 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
30995.       t$4412 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation )
31245.       t$4413 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
31245.       t$4415 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8
30995.       t$1249 = ( 1 + nd_brdf_trunc / 2 )
31230.       t$4416 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
30995.       t$4417 = _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
30995.       t$4418 = _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) )
31230.       t$4419 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8
31230.       t$4421 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) * 8
30995.       t$1250 = ( 1 + nd_max_order )
30995.       t$4422 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level )
31239.       t$4423 = _zla( 0, ( 1 + nd_max_order ) )
30995.       t$4424 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) )
31239.       t$4425 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8
31239.       t$4427 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) * 8
30995.       t$1248 = nd_max_order / 2
31227.       t$4428 = _zla( 0, nd_max_order / 2 )
30995.       t$4429 = _zla( 0, nd_max_order / 2 )
30995.       t$4430 = _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 )
31227.       t$4431 = 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 )
31227.       t$4433 = _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 )
31247.       t$4434 = 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 )
31247.       t$4436 = _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 )
30995.       t$4437 = _zla( 0, nd_profile ) * _zla( 0, ( 1 + nd_max_order ) )
30995.       t$4438 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) )
31233.       t$4439 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) ) + 7 ) / 8 ) + 7 ) / 8 )
31233.       t$4441 = _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
30995.       t$1251 = nd_sph_cf_weight
30995.       t$1252 = nd_sph_u_range
31235.       t$4442 = _zla( 0, nd_sph_cf_weight )
30995.       t$4443 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight )
31235.       t$4444 = _zla( 0, nd_sph_u_range )
30995.       t$4445 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight ) * _zla( 0, nd_sph_u_range )
31235.       t$4446 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
31235.       t$4448 = _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight ) * _zla( 0, nd_sph_u_range ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
30995.       t$4405 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, nd_sph_cf_weight ) * _zla( 0, nd_sph_u_range ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
31242.       t$4406 = t$4405
31249.       t$4410 = t$4405 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8
31245.       t$4414 = t$4405 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8
31230.       t$4420 = t$4405 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8
31239.       t$4426 = t$4405 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) * 8
31227.       t$4432 = t$4405 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 )
31247.       t$4435 = t$4405 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 )
31233.       t$4440 = t$4405 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 )
31235.       t$4447 = t$4405 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_direction ) * _zla( 0, ( 1 + nd_max_order ) ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * 8 + 8 * ( ( _zla( 0, nd_max_order / 2 ) * _zla( 0, nd_max_order / 2 ) * 8 + 8 * ( _zla( 0, nd_max_order ) * _zla( 0, ( 1 + nd_brdf_trunc / 2 ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_viewing_level ) * _zla( 0, ( 1 + nd_max_order ) ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) + _zla( 0, nd_profile ) * _zla( 0, nd_direction ) + _zla( 0, nd_profile ) * _zla( 0, nd_sph_equation ) * _zla( 0, nd_sph_diagonal ) + 0 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
31268.       if ( isolir == 1 ) then
31270.          if ( l_scale_solar ) then
31271.             if ( n_layer > 0 ) then
31272.                if ( n_profile > 0 ) then
31271.                   $I_L31271_803 = 0
31271.                   if ( n_layer >= 4 ) then
31271.                      $I_L31271_962 = 0
31271. !dir$ blocking_size( 0, 0 )
31271.                      do
31272.                         $I_L31272_714 = 0
31272. !dir$ ivdep
31272. !dir$ blocking_size( 0, 0 )
31272.                         do
31273.                            i_direct(1 + $I_L31272_714, 1 + 4 * $I_L31271_962) = i_direct(1 + $I_L31272_714, 4 * $I_L31271_962) * adjust_solar_ke(1 + $I_L31272_714, 1 + 4 * $I_L31271_962) * _expn( -( tau(1 + $I_L31272_714, 1 + 4 * $I_L31271_962) * 1.0/mu_0(1 + $I_L31272_714) ) )
31273.                            i_direct(1 + $I_L31272_714, 2 + 4 * $I_L31271_962) = i_direct(1 + $I_L31272_714, 1 + 4 * $I_L31271_962) * adjust_solar_ke(1 + $I_L31272_714, 2 + 4 * $I_L31271_962) * _expn( -( tau(1 + $I_L31272_714, 2 + 4 * $I_L31271_962) * 1.0/mu_0(1 + $I_L31272_714) ) )
31273.                            i_direct(1 + $I_L31272_714, 3 + 4 * $I_L31271_962) = i_direct(1 + $I_L31272_714, 2 + 4 * $I_L31271_962) * adjust_solar_ke(1 + $I_L31272_714, 3 + 4 * $I_L31271_962) * _expn( -( tau(1 + $I_L31272_714, 3 + 4 * $I_L31271_962) * 1.0/mu_0(1 + $I_L31272_714) ) )
31273.                            i_direct(1 + $I_L31272_714, 4 + 4 * $I_L31271_962) = i_direct(1 + $I_L31272_714, 3 + 4 * $I_L31271_962) * adjust_solar_ke(1 + $I_L31272_714, 4 + 4 * $I_L31271_962) * _expn( -( tau(1 + $I_L31272_714, 4 + 4 * $I_L31271_962) * 1.0/mu_0(1 + $I_L31272_714) ) )
31275.                            $I_L31272_714 = 1 + $I_L31272_714
31272.                            if ( $I_L31272_714 >= n_profile ) exit
31272.                         enddo
31276.                         $I_L31271_962 = 1 + $I_L31271_962
31275.                         if ( $I_L31271_962 >= _rsh( n_layer, 2 ) ) exit
31275.                      enddo
31276.                      $I_L31271_803 = and( 0xfffffffffffffffcUL, n_layer )
31276.                   endif
31271.                   if ( $I_L31271_803 < n_layer ) then
31271.                      $I_L31271_947 = 0
31271. !dir$ blocking_size( 0, 0 )
31271.                      do
31272.                         $I_L31272_714 = 0
31272. !dir$ ivdep
31272. !dir$ blocking_size( 0, 0 )
31272.                         do
31273.                            i_direct(1 + $I_L31272_714, $I_L31271_803 + $I_L31271_947 + 1) = i_direct(1 + $I_L31272_714, $I_L31271_803 + $I_L31271_947) * adjust_solar_ke(1 + $I_L31272_714, $I_L31271_803 + $I_L31271_947 + 1) * _expn( -( tau(1 + $I_L31272_714, $I_L31271_803 + $I_L31271_947 + 1) * 1.0/mu_0(1 + $I_L31272_714) ) )
31275.                            $I_L31272_714 = 1 + $I_L31272_714
31272.                            if ( $I_L31272_714 >= n_profile ) exit
31272.                         enddo
31276.                         $I_L31271_947 = 1 + $I_L31271_947
31275.                         if ( $I_L31271_947 >= n_layer + -$I_L31271_803 ) exit
31275.                      enddo
31275.                   endif
31275.                endif
31275.             endif
31275.          else if ( n_layer > 0 ) then
31279.             if ( n_profile > 0 ) then
31278.                $I_L31278_801 = 0
31278.                if ( n_layer >= 4 ) then
31278.                   $I_L31278_964 = 0
31278. !dir$ blocking_size( 0, 0 )
31278.                   do
31279.                      $I_L31279_712 = 0
31279. !dir$ ivdep
31279. !dir$ blocking_size( 0, 0 )
31279.                      do
31280.                         i_direct(1 + $I_L31279_712, 1 + 4 * $I_L31278_964) = i_direct(1 + $I_L31279_712, 4 * $I_L31278_964) * _expn( -( tau(1 + $I_L31279_712, 1 + 4 * $I_L31278_964) * 1.0/mu_0(1 + $I_L31279_712) ) )
31280.                         i_direct(1 + $I_L31279_712, 2 + 4 * $I_L31278_964) = i_direct(1 + $I_L31279_712, 1 + 4 * $I_L31278_964) * _expn( -( tau(1 + $I_L31279_712, 2 + 4 * $I_L31278_964) * 1.0/mu_0(1 + $I_L31279_712) ) )
31280.                         i_direct(1 + $I_L31279_712, 3 + 4 * $I_L31278_964) = i_direct(1 + $I_L31279_712, 2 + 4 * $I_L31278_964) * _expn( -( tau(1 + $I_L31279_712, 3 + 4 * $I_L31278_964) * 1.0/mu_0(1 + $I_L31279_712) ) )
31280.                         i_direct(1 + $I_L31279_712, 4 + 4 * $I_L31278_964) = i_direct(1 + $I_L31279_712, 3 + 4 * $I_L31278_964) * _expn( -( tau(1 + $I_L31279_712, 4 + 4 * $I_L31278_964) * 1.0/mu_0(1 + $I_L31279_712) ) )
31281.                         $I_L31279_712 = 1 + $I_L31279_712
31279.                         if ( $I_L31279_712 >= n_profile ) exit
31279.                      enddo
31282.                      $I_L31278_964 = 1 + $I_L31278_964
31281.                      if ( $I_L31278_964 >= _rsh( n_layer, 2 ) ) exit
31281.                   enddo
31282.                   $I_L31278_801 = and( 0xfffffffffffffffcUL, n_layer )
31282.                endif
31278.                if ( $I_L31278_801 < n_layer ) then
31278.                   $I_L31278_944 = 0
31278. !dir$ blocking_size( 0, 0 )
31278.                   do
31279.                      $I_L31279_712 = 0
31279. !dir$ ivdep
31279. !dir$ blocking_size( 0, 0 )
31279.                      do
31280.                         i_direct(1 + $I_L31279_712, $I_L31278_801 + $I_L31278_944 + 1) = i_direct(1 + $I_L31279_712, $I_L31278_801 + $I_L31278_944) * _expn( -( tau(1 + $I_L31279_712, $I_L31278_801 + $I_L31278_944 + 1) * 1.0/mu_0(1 + $I_L31279_712) ) )
31281.                         $I_L31279_712 = 1 + $I_L31279_712
31279.                         if ( $I_L31279_712 >= n_profile ) exit
31279.                      enddo
31282.                      $I_L31278_944 = 1 + $I_L31278_944
31281.                      if ( $I_L31278_944 >= n_layer + -$I_L31278_801 ) exit
31281.                   enddo
31281.                endif
31281.             endif
31281.          endif
31281.       endif
31288.       if ( i_sph_mode == 1 ) then
31289.          if ( n_direction > 0 ) then
31290.             if ( n_viewing_level > 0 ) then
31291.                if ( n_profile > 0 ) then
31289.                   $I_L31289_860 = 0
31289.                   do
31290.                      $I_L31290_805 = 0
31290.                      do
31291.                         $I_L31291_716 = 0
31291. !dir$ ivdep
31291.                         do
31292.                            radiance_mono(1 + $I_L31291_716, 1 + $I_L31290_805, 1 + $I_L31289_860) = 0.0
31293.                            $I_L31291_716 = 1 + $I_L31291_716
31291.                            if ( $I_L31291_716 >= n_profile ) exit
31291.                         enddo
31294.                         $I_L31290_805 = 1 + $I_L31290_805
31293.                         if ( $I_L31290_805 >= n_viewing_level ) exit
31293.                      enddo
31295.                      $I_L31289_860 = 1 + $I_L31289_860
31294.                      if ( $I_L31289_860 >= n_direction ) exit
31294.                   enddo
31294.                endif
31294.             endif
31294.          endif
31294.       endif
31302.       if ( ms_max + -ms_min >= 0 ) then
31302.          $I_L31302_942 = 0
31302.          do
31311.             if ( i_truncation /= 4 ) then
31322.                ls_trunc_calc = ls_local_trunc(ms_min + $I_L31302_942)
31322.             else if ( $I_L31302_942 == 0 ) then
31313.                ls_trunc_calc = ls_local_trunc(ms_min)
31313.             else
31319.                ls_trunc_calc = min( ls_local_trunc(ms_min + $I_L31302_942), max( ls_significant, ( ms_min + $I_L31302_942 + 1 ) ) + mod( ( ms_min + $I_L31302_942 + max( ls_significant, ( ms_min + $I_L31302_942 + 1 ) ) + 1 ), 2 ) )
31319.             endif
31326.             if ( i_sph_mode == 1 ) then
31334.                if ( ms_min + $I_L31302_942 == 0 ) then
31335.                   if ( n_direction > 0 ) then
31336.                      if ( n_profile > 0 ) then
31335.                         $I_L31335_809 = 0
31335.                         do
31336.                            $I_L31336_720 = 0
31336. !dir$ ivdep
31336.                            do
31337.                               azim_factor(1 + $I_L31336_720, 1 + $I_L31335_809) = 1.0
31338.                               $I_L31336_720 = 1 + $I_L31336_720
31336.                               if ( $I_L31336_720 >= n_profile ) exit
31336.                            enddo
31339.                            $I_L31335_809 = 1 + $I_L31335_809
31338.                            if ( $I_L31335_809 >= n_direction ) exit
31338.                         enddo
31338.                      endif
31338.                   endif
31340.                else if ( n_direction > 0 ) then
31342.                   if ( n_profile > 0 ) then
31341.                      $I_L31341_807 = 0
31341.                      do
31342.                         $I_L31342_718 = 0
31342. !dir$ ivdep
31342.                         do
31343.                            azim_factor(1 + $I_L31342_718, 1 + $I_L31341_807) = 2.0 * cos( real( ms_min + $I_L31302_942, 8 ) * direction(1 + $I_L31342_718, 1 + $I_L31341_807, 2) )
31345.                            $I_L31342_718 = 1 + $I_L31342_718
31342.                            if ( $I_L31342_718 >= n_profile ) exit
31342.                         enddo
31346.                         $I_L31341_807 = 1 + $I_L31341_807
31345.                         if ( $I_L31341_807 >= n_direction ) exit
31345.                      enddo
31345.                   endif
31345.                endif
31353.                if ( n_direction > 0 ) then
31353.                   $I_L31353_891 = 0
31353.                   do
31354.                      ipa$27668 = loc( direction(1, 1 + $I_L31353_891, 1) )
31354.                      x = _copyin( direction(1, 1 + $I_L31353_891, 1) )
31354.                      ipa$27670 = loc( up_lm(1, 1, 1 + $I_L31353_891) )
31354.                      up_lm = _copyin( up_lm(1, 1, 1 + $I_L31353_891) )
31354.                      t$402 = nd_profile
31354.                      t$2327 = max( 0, nd_profile )
31354.                      t$403 = ls_trunc_calc + -ms_min + -$I_L31302_942 + 1
31354.                      t$2328 = nd_profile
31354.                      t$2329 = max( 0, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 )
31354.                      t$2330 = nd_profile * max( 0, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 )
31354.                      product = 1.0
31354.                      if ( ( ms_min + $I_L31302_942 ) > 0 ) then
31354.                         $I_L31354_722 = 0
31354. !dir$ ivdep
31354.                         do
31354.                            product = ( 1.0 + -( 5.0e-1 * 1.0/( ( 1 + $I_L31354_722 ) ) ) ) * product
31354.                            $I_L31354_722 = 1 + $I_L31354_722
31354.                            if ( $I_L31354_722 >= ms_min + $I_L31302_942 ) exit
31354.                         enddo
31354.                         if ( n_profile > 0 ) then
31354.                            $I_L31354_724 = 0
31354. !dir$ ivdep
31354.                            do
31354.                               up_lm(1 + $I_L31354_724, 1) = cvmg( -1.0, 1.0, and( 1, ( ms_min + $I_L31302_942 ) ) /= 0 ) * _sqrt( ( 1.0 + -( x(1 + $I_L31354_724) * x(1 + $I_L31354_724) ) ) ** ( ms_min + $I_L31302_942 ) * product * ( 1.0 + 2.0 * real( ms_min + $I_L31302_942, 8 ) ) * 7.9577471545947673e-2 )
31354.                               $I_L31354_724 = 1 + $I_L31354_724
31354.                               if ( $I_L31354_724 >= n_profile ) exit
31354.                            enddo
31354.                         endif
31354.                      else if ( n_profile > 0 ) then
31354.                         $I_L31354_726 = 0
31354. !dir$ ivdep
31354.                         do
31354.                            up_lm(1 + $I_L31354_726, 1) = 2.8209479177387814e-1
31354.                            $I_L31354_726 = 1 + $I_L31354_726
31354.                            if ( $I_L31354_726 >= n_profile ) exit
31354.                         enddo
31354.                      endif
31354.                      if ( ( ms_min + $I_L31302_942 ) < ls_trunc_calc ) then
31354.                         if ( n_profile > 0 ) then
31354.                            $I_L31354_728 = 0
31354. !dir$ ivdep
31354.                            do
31354.                               up_lm(1 + $I_L31354_728, 2) = x(1 + $I_L31354_728) * _sqrt( 3.0 + 2.0 * real( ms_min + $I_L31302_942, 8 ) ) * up_lm(1 + $I_L31354_728, 1)
31354.                               $I_L31354_728 = 1 + $I_L31354_728
31354.                               if ( $I_L31354_728 >= n_profile ) exit
31354.                            enddo
31354.                         endif
31354.                      endif
31354.                      if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + -2 ) >= 0 ) then
31354.                         if ( n_profile > 0 ) then
31354.                            $I_L31354_862 = 0
31354.                            do
31354.                               $I_L31354_841 = 0
31354. !dir$ blocking_size( 0, 0 )
31354.                               do
31354.                                  $I_L31354_730 = 0
31354. !dir$ ivdep
31354. !dir$ blocking_size( 256, 256 )
31354.                                  do
31354.                                     up_lm($I_L31354_730 + 256 * $I_L31354_862 + 1, 3 + $I_L31354_841) = x($I_L31354_730 + 256 * $I_L31354_862 + 1) * _sqrt( ( ( -1.0 + 2.0 * real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) ) * ( 1.0 + 2.0 * real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) ) ) * 1.0/( ( real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) + real( ms_min + $I_L31302_942, 8 ) ) * ( real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) + -( real( ms_min + $I_L31302_942, 8 ) ) ) ) ) * up_lm($I_L31354_730 + 256 * $I_L31354_862 + 1, 2 + $I_L31354_841) + -( _sqrt( ( ( 1.0 + 2.0 * real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) ) * ( -( real( ms_min + $I_L31302_942, 8 ) ) + real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) + -1.0 ) * ( real( ms_min + $I_L31302_942, 8 ) + real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) + -1.0 ) ) * 1.0/( ( -3.0 + 2.0 * real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) ) * ( real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) + real( ms_min + $I_L31302_942, 8 ) ) * ( real( ms_min + $I_L31354_841 + $I_L31302_942 + 2, 8 ) + -( real( ms_min + $I_L31302_942, 8 ) ) ) ) ) * up_lm($I_L31354_730 + 256 * $I_L31354_862 + 1, 1 + $I_L31354_841) )
31354.                                     $I_L31354_730 = 1 + $I_L31354_730
31354.                                     if ( $I_L31354_730 >= min( n_profile, 256 + 256 * $I_L31354_862 ) + -256 * $I_L31354_862 ) exit
31354.                                  enddo
31354.                                  $I_L31354_841 = 1 + $I_L31354_841
31354.                                  if ( $I_L31354_841 >= ls_trunc_calc + -ms_min + -$I_L31302_942 + -1 ) exit
31354.                               enddo
31354.                               $I_L31354_862 = 1 + $I_L31354_862
31354.                               if ( $I_L31354_862 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
31354.                            enddo
31354.                         endif
31354.                      endif
31354.                      up_lm(1, 1, 1 + $I_L31353_891) = _copyout( up_lm )
31354.                      direction(1, 1 + $I_L31353_891, 1) = _copyout( x )
31357.                      $I_L31353_891 = 1 + $I_L31353_891
31354.                      if ( $I_L31353_891 >= n_direction ) exit
31354.                   enddo
31354.                endif
31354.             endif
31363.             $ipa_S21 = ia_sph_mm(ms_min + $I_L31302_942)
31363.             ipa$27678 = loc( kappa(1, 1) )
31363.             kappa = _copyin( kappa(1, 1) )
31363.             t$448 = ls_trunc_calc + -ms_min + -$I_L31302_942 + 1
31363.             t$2434 = max( 0, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 )
31363.             t$449 = nd_max_order / 2
31363.             t$2435 = max( 0, nd_max_order / 2 )
31363.             t$2436 = max( 0, nd_max_order / 2 )
31363.             t$2437 = max( 0, nd_max_order / 2 ) * max( 0, nd_max_order / 2 )
31363.             if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 ) > 0 ) then
31363.                $I_L31363_811 = 0
31363.                if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 >= 4 ) then
31363.                   $I_L31363_966 = 0
31363. !dir$ blocking_size( 0, 0 )
31363.                   do
31363.                      $SCA_uplm_zero#1_U0 = uplm_zero($ipa_S21 + 8 * $I_L31363_966)
31363.                      $SCA_uplm_zero#2_U1 = uplm_zero($ipa_S21 + 8 * $I_L31363_966 + 2)
31363.                      $SCA_uplm_zero#3_U2 = uplm_zero($ipa_S21 + 8 * $I_L31363_966 + 4)
31363.                      $SCA_uplm_zero#4_U3 = uplm_zero($ipa_S21 + 8 * $I_L31363_966 + 6)
31363.                      $I_L31363_733 = 0
31363. !dir$ ivdep
31363. !dir$ blocking_size( 0, 0 )
31363.                      do
31363.                         kappa(1 + $I_L31363_733, 1 + 4 * $I_L31363_966) = ( $SCA_uplm_zero#1_U0 * real( 1 + -2 * mod( ( 2 + 2 * $I_L31363_733 ), 2 ), 8 ) * uplm_zero($ipa_S21 + 2 * $I_L31363_733 + 1) * 1.0/( ( -( ( 2 + 2 * $I_L31363_733 ) * ( 2 + 2 * $I_L31363_733 ) ) + -2 * ms_min + 2 * $I_L31363_733 + ms_min * $I_L31363_733 * -4 + -2 * $I_L31302_942 + $I_L31363_733 * $I_L31302_942 * -4 + ( 1 + 8 * $I_L31363_966 ) * ( 1 + 8 * $I_L31363_966 ) + -8 * $I_L31363_966 + ms_min * $I_L31363_966 * 16 + $I_L31302_942 * $I_L31363_966 * 16 + 1 ) ) * 6.2831853071795862 )
31363.                         kappa(1 + $I_L31363_733, 2 + 4 * $I_L31363_966) = ( $SCA_uplm_zero#2_U1 * real( 1 + -2 * mod( ( 2 + 2 * $I_L31363_733 ), 2 ), 8 ) * uplm_zero($ipa_S21 + 2 * $I_L31363_733 + 1) * 1.0/( ( -( ( 2 + 2 * $I_L31363_733 ) * ( 2 + 2 * $I_L31363_733 ) ) + 2 * ms_min + 2 * $I_L31363_733 + ms_min * $I_L31363_733 * -4 + $I_L31363_733 * $I_L31302_942 * -4 + 2 * $I_L31302_942 + -8 * $I_L31363_966 + ms_min * $I_L31363_966 * 16 + $I_L31302_942 * $I_L31363_966 * 16 + ( 3 + 8 * $I_L31363_966 ) * ( 3 + 8 * $I_L31363_966 ) + -1 ) ) * 6.2831853071795862 )
31363.                         kappa(1 + $I_L31363_733, 3 + 4 * $I_L31363_966) = ( $SCA_uplm_zero#3_U2 * real( 1 + -2 * mod( ( 2 + 2 * $I_L31363_733 ), 2 ), 8 ) * uplm_zero($ipa_S21 + 2 * $I_L31363_733 + 1) * 1.0/( ( -( ( 2 + 2 * $I_L31363_733 ) * ( 2 + 2 * $I_L31363_733 ) ) + 2 * $I_L31363_733 + ms_min * $I_L31363_733 * -4 + $I_L31363_733 * $I_L31302_942 * -4 + 6 * ms_min + 6 * $I_L31302_942 + -8 * $I_L31363_966 + ms_min * $I_L31363_966 * 16 + $I_L31302_942 * $I_L31363_966 * 16 + ( 5 + 8 * $I_L31363_966 ) * ( 5 + 8 * $I_L31363_966 ) + -3 ) ) * 6.2831853071795862 )
31363.                         kappa(1 + $I_L31363_733, 4 + 4 * $I_L31363_966) = ( $SCA_uplm_zero#4_U3 * real( 1 + -2 * mod( ( 2 + 2 * $I_L31363_733 ), 2 ), 8 ) * uplm_zero($ipa_S21 + 2 * $I_L31363_733 + 1) * 1.0/( ( -( ( 2 + 2 * $I_L31363_733 ) * ( 2 + 2 * $I_L31363_733 ) ) + 2 * $I_L31363_733 + ms_min * $I_L31363_733 * -4 + $I_L31363_733 * $I_L31302_942 * -4 + 10 * ms_min + 10 * $I_L31302_942 + -8 * $I_L31363_966 + ms_min * $I_L31363_966 * 16 + $I_L31302_942 * $I_L31363_966 * 16 + ( 7 + 8 * $I_L31363_966 ) * ( 7 + 8 * $I_L31363_966 ) + -5 ) ) * 6.2831853071795862 )
31363.                         $I_L31363_733 = 1 + $I_L31363_733
31363.                         if ( $I_L31363_733 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 ) exit
31363.                      enddo
31363.                      $I_L31363_966 = 1 + $I_L31363_966
31363.                      if ( $I_L31363_966 >= _rsh( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2, 2 ) ) exit
31363.                   enddo
31363.                   $I_L31363_811 = and( 0xfffffffffffffffcUL, ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 )
31363.                endif
31363.                if ( $I_L31363_811 < ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 ) then
31363.                   $I_L31363_950 = 0
31363. !dir$ blocking_size( 0, 0 )
31363.                   do
31363.                      $SCA_uplm_zero_I2 = uplm_zero($ipa_S21 + 2 * $I_L31363_811 + 2 * $I_L31363_950)
31363.                      $I_L31363_733 = 0
31363. !dir$ ivdep
31363. !dir$ blocking_size( 0, 0 )
31363.                      do
31363.                         kappa(1 + $I_L31363_733, $I_L31363_811 + $I_L31363_950 + 1) = ( $SCA_uplm_zero_I2 * real( 1 + -2 * mod( ( 2 + 2 * $I_L31363_733 ), 2 ), 8 ) * uplm_zero($ipa_S21 + 2 * $I_L31363_733 + 1) * 1.0/( ( -( ( 2 + 2 * $I_L31363_733 ) * ( 2 + 2 * $I_L31363_733 ) ) + -2 * ms_min + 2 * $I_L31363_733 + ms_min * $I_L31363_733 * -4 + -2 * $I_L31363_811 + ms_min * $I_L31363_811 * 4 + -2 * $I_L31302_942 + $I_L31363_733 * $I_L31302_942 * -4 + $I_L31363_811 * $I_L31302_942 * 4 + -2 * $I_L31363_950 + ms_min * $I_L31363_950 * 4 + $I_L31302_942 * $I_L31363_950 * 4 + ( 2 * $I_L31363_811 + 2 * $I_L31363_950 + 1 ) * ( 2 * $I_L31363_811 + 2 * $I_L31363_950 + 1 ) + 1 ) ) * 6.2831853071795862 )
31363.                         $I_L31363_733 = 1 + $I_L31363_733
31363.                         if ( $I_L31363_733 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 ) exit
31363.                      enddo
31363.                      $I_L31363_950 = 1 + $I_L31363_950
31363.                      if ( $I_L31363_950 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 + -$I_L31363_811 ) exit
31363.                   enddo
31363.                endif
31363.             endif
31363.             kappa(1, 1) = _copyout( kappa )
31370.             ls_brdf_trunc_calc = min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) )
31372.             ipa$27690 = loc( kappa(1, 1) )
31372.             kappa = _copyin( kappa(1, 1) )
31372.             ipa$27692 = loc( cgk(1, 1) )
31372.             cgk = _copyin( cgk(1, 1) )
31372.             t$303 = ls_trunc_calc + -ms_min + -$I_L31302_942 + 1
31372.             t$2148 = max( 0, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 )
31372.             t$304 = nd_max_order / 2
31372.             t$2149 = max( 0, nd_max_order / 2 )
31372.             t$2150 = max( 0, nd_max_order / 2 )
31372.             t$2151 = max( 0, nd_max_order / 2 ) * max( 0, nd_max_order / 2 )
31372.             t$305 = ( 1 + nd_brdf_trunc / 2 )
31372.             t$306 = nd_max_order
31372.             t$2152 = max( 0, ( 1 + nd_brdf_trunc / 2 ) )
31372.             t$2153 = max( 0, ( 1 + nd_brdf_trunc / 2 ) )
31372.             t$2154 = max( 0, nd_max_order )
31372.             t$2155 = nd_max_order * max( 0, ( 1 + nd_brdf_trunc / 2 ) )
31372.             if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) > 0 ) then
31372.                $SC_cg_coeff_I0 = cg_coeff(1)
31372.                if ( ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) + -2 ) >= 0 ) then
31372.                   $I_L31372_791 = 0
31372. !dir$ ivdep
31372.                   do
31372.                      cgk(1, 1 + 2 * $I_L31372_791) = $SC_cg_coeff_I0 * kappa(1, 1 + $I_L31372_791)
31372.                      $I_L31372_791 = 1 + $I_L31372_791
31372.                      if ( $I_L31372_791 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2 ) exit
31372.                   enddo
31372.                   $I_L31372_886 = 0
31372.                   do
31372.                      $I_L31372_843 = 0
31372.                      if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2 >= 4 ) then
31372.                         $I_L31372_968 = 0
31372. !dir$ blocking_size( 0, 0 )
31372.                         do
31372.                            $I_L31372_793 = 0
31372. !dir$ ivdep
31372. !dir$ blocking_size( 256, 256 )
31372.                            do
31372.                               cgk($I_L31372_793 + 256 * $I_L31372_886 + 2, 1 + 8 * $I_L31372_968) = cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 3) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 2, 1 + 4 * $I_L31372_968) + cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 2) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 1, 1 + 4 * $I_L31372_968)
31372.                               cgk($I_L31372_793 + 256 * $I_L31372_886 + 2, 3 + 8 * $I_L31372_968) = cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 3) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 2, 2 + 4 * $I_L31372_968) + cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 2) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 1, 2 + 4 * $I_L31372_968)
31372.                               cgk($I_L31372_793 + 256 * $I_L31372_886 + 2, 5 + 8 * $I_L31372_968) = cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 3) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 2, 3 + 4 * $I_L31372_968) + cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 2) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 1, 3 + 4 * $I_L31372_968)
31372.                               cgk($I_L31372_793 + 256 * $I_L31372_886 + 2, 7 + 8 * $I_L31372_968) = cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 3) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 2, 4 + 4 * $I_L31372_968) + cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 2) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 1, 4 + 4 * $I_L31372_968)
31372.                               $I_L31372_793 = 1 + $I_L31372_793
31372.                               if ( $I_L31372_793 >= min( ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) ) / 2, 256 + 256 * $I_L31372_886 ) + -256 * $I_L31372_886 ) exit
31372.                            enddo
31372.                            $I_L31372_968 = 1 + $I_L31372_968
31372.                            if ( $I_L31372_968 >= _rsh( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2, 2 ) ) exit
31372.                         enddo
31372.                         $I_L31372_843 = and( 0xfffffffffffffffcUL, ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2 )
31372.                      endif
31372.                      if ( $I_L31372_843 < ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2 ) then
31372.                         $I_L31372_959 = 0
31372. !dir$ blocking_size( 0, 0 )
31372.                         do
31372.                            $I_L31372_793 = 0
31372. !dir$ ivdep
31372. !dir$ blocking_size( 256, 256 )
31372.                            do
31372.                               cgk($I_L31372_793 + 256 * $I_L31372_886 + 2, 2 * $I_L31372_843 + 2 * $I_L31372_959 + 1) = cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 3) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 2, $I_L31372_843 + $I_L31372_959 + 1) + cg_coeff(2 * $I_L31372_793 + 512 * $I_L31372_886 + 2) * kappa($I_L31372_793 + 256 * $I_L31372_886 + 1, $I_L31372_843 + $I_L31372_959 + 1)
31372.                               $I_L31372_793 = 1 + $I_L31372_793
31372.                               if ( $I_L31372_793 >= min( ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) ) / 2, 256 + 256 * $I_L31372_886 ) + -256 * $I_L31372_886 ) exit
31372.                            enddo
31372.                            $I_L31372_959 = 1 + $I_L31372_959
31372.                            if ( $I_L31372_959 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2 + -$I_L31372_843 ) exit
31372.                         enddo
31372.                      endif
31372.                      $I_L31372_886 = 1 + $I_L31372_886
31372.                      if ( $I_L31372_886 >= 1 + max( 0, -1 + _rsh( 255 + ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) ) / 2, 8 ) ) ) exit
31372.                   enddo
31372.                else
31372.                   $I_L31372_786 = 0
31372. !dir$ ivdep
31372.                   do
31372.                      cgk(1, 1 + 2 * $I_L31372_786) = $SC_cg_coeff_I0 * kappa(1, 1 + $I_L31372_786)
31372.                      $I_L31372_786 = 1 + $I_L31372_786
31372.                      if ( $I_L31372_786 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 2 ) / 2 ) exit
31372.                   enddo
31372.                endif
31372.             endif
31372.             if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 ) > 0 ) then
31372.                if ( ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) + 1 ) > 0 ) then
31372.                   $I_L31372_813 = 0
31372.                   do
31372.                      $I_L31372_735 = 0
31372. !dir$ ivdep
31372.                      do
31372.                         cgk(1 + $I_L31372_735, 2 + 2 * $I_L31372_813) = 0.0
31372.                         $I_L31372_735 = 1 + $I_L31372_735
31372.                         if ( $I_L31372_735 >= ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) + 2 ) / 2 ) exit
31372.                      enddo
31372.                      $I_L31372_813 = 1 + $I_L31372_813
31372.                      if ( $I_L31372_813 >= ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2 ) exit
31372.                   enddo
31372.                endif
31372.             endif
31372.             if ( ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) ) >= 0 ) then
31372.                $I_L31372_737 = 0
31372. !dir$ ivdep
31372.                do
31372.                   cgk(1 + $I_L31372_737, 2 + 2 * $I_L31372_737) = 5.0e-1 * cg_coeff(1 + 2 * $I_L31372_737)
31372.                   $I_L31372_737 = 1 + $I_L31372_737
31372.                   if ( $I_L31372_737 >= ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) + 2 ) / 2 ) exit
31372.                enddo
31372.             endif
31372.             if ( ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) + -2 ) >= 0 ) then
31372.                $I_L31372_739 = 0
31372. !dir$ ivdep
31372.                do
31372.                   cgk(2 + $I_L31372_739, 2 + 2 * $I_L31372_739) = 5.0e-1 * cg_coeff(2 + 2 * $I_L31372_739)
31372.                   $I_L31372_739 = 1 + $I_L31372_739
31372.                   if ( $I_L31372_739 >= ( min( ls_brdf_trunc, ls_trunc_calc + -mod( ls_trunc_calc, 2 ) ) + -ms_min + -$I_L31302_942 + -mod( ( ms_min + $I_L31302_942 ), 2 ) ) / 2 ) exit
31372.                enddo
31372.             endif
31372.             cgk(1, 1) = _copyout( cgk )
31372.             kappa(1, 1) = _copyout( kappa )
31379.             if ( i_sph_mode == 2 ) then
31372.                goto 10
31379.             else if ( i_sph_algorithm == 1 ) then
31379.    10          continue
31381.                if ( n_viewing_level > 0 ) then
31382.                   $SC_ls_local_trunc_I1 = ls_local_trunc(ms_min + $I_L31302_942)
31382.                   if ( ( $SC_ls_local_trunc_I1 + -ms_min + -$I_L31302_942 + 1 ) > 0 ) then
31383.                      if ( n_profile > 0 ) then
31382.                         $I_L31382_864 = 0
31382.                         do
31381.                            $I_L31381_815 = 0
31381.                            do
31383.                               $I_L31383_741 = 0
31383. !dir$ ivdep
31383.                               do
31384.                                  c_ylm(1 + $I_L31383_741, 1 + $I_L31381_815, 1 + $I_L31382_864) = 0.0
31385.                                  $I_L31383_741 = 1 + $I_L31383_741
31383.                                  if ( $I_L31383_741 >= n_profile ) exit
31383.                               enddo
31387.                               $I_L31381_815 = 1 + $I_L31381_815
31385.                               if ( $I_L31381_815 >= n_viewing_level ) exit
31385.                            enddo
31386.                            $I_L31382_864 = 1 + $I_L31382_864
31386.                            if ( $I_L31382_864 >= $SC_ls_local_trunc_I1 + -ms_min + -$I_L31302_942 + 1 ) exit
31386.                         enddo
31386.                      endif
31386.                   endif
31386.                endif
31386.             endif
31397.             n_red_eigensystem = ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) / 2
31402.             t$9845 = ( ms_min + $I_L31302_942 )
31399.             call build_sph_matrix( i_sph_algorithm, euler_factor, n_profile, n_layer, ls_trunc_calc, t$9845, n_red_eigensystem, cg_coeff($ipa_S21), kappa(1, 1), up_lm(1, 1, 1), isolir, i_direct(1, 0), mu_0(1), uplm_sol(1, $ipa_S21), azim_factor(1, 1), diff_planck(1, 1), l_ir_source_quad, diff_planck_2(1, 1), flux_inc_down(1), tau(1, 1), omega(1, 1), phase_fnc(1, 1, 1), ls_brdf_trunc_calc, n_brdf_basis_fnc, rho_alb(1, 1), f_brdf(1, 0, 0, 0), brdf_sol(1, 1, 1), brdf_hemi(1, 1, 1), cgk(1, 1), d_planck_flux_surface(1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), n_direction, direction(1, 1, 1), a(1, 1, 1), b(1, 1), c_ylm(1, 1, 1), weight_u(1, 1, 1, 1), radiance_mono(1, 1, 1), nd_profile, nd_radiance_profile, nd_layer, nd_viewing_level, nd_direction, nd_max_order, nd_brdf_basis_fnc, nd_brdf_trunc, nd_red_eigensystem, nd_sph_equation, nd_sph_diagonal, nd_sph_cf_weight, nd_sph_u_range )
31431.             if ( ierr /= 0 ) then
30995.                _free( t$4405 )
30995.                goto 30
30995.             endif
31438.             t$1224 = nd_profile
31438.             t$1225 = nd_sph_equation
31438.             t$1226 = nd_sph_diagonal
31438.             t$4339 = max( 0, nd_profile )
31438.             t$4340 = nd_profile
31438.             t$4341 = max( 0, nd_sph_equation )
31438.             t$4342 = nd_sph_equation * nd_profile
31438.             t$4343 = max( 0, nd_sph_diagonal )
31438.             t$4344 = ( nd_profile * nd_sph_equation * nd_sph_diagonal )
31438.             t$4345 = ( nd_profile * nd_sph_equation )
31438.             t$4348 = 4 * nd_profile
31438.             t$4350 = 8 * nd_profile
31438.             t$4351 = 8 * ( ( 7 + 8 * nd_profile ) / 8 )
31438.             t$4353 = 8 * nd_profile + 8 * ( ( 7 + 8 * nd_profile ) / 8 )
31438.             t$4354 = 8 * ( ( 8 * nd_profile + 8 * ( ( 7 + 8 * nd_profile ) / 8 ) + 7 ) / 8 )
31438.             t$4356 = 8 * nd_profile + 8 * ( ( 8 * nd_profile + 8 * ( ( 7 + 8 * nd_profile ) / 8 ) + 7 ) / 8 )
31438.             t$4346 = int( _alloc( 8 * nd_profile + 8 * ( ( 8 * nd_profile + 8 * ( ( 7 + 8 * nd_profile ) / 8 ) + 7 ) / 8 ) ), 8 )
31438.             t$4347 = t$4346
31438.             t$4349 = t$4346 + 4 * nd_profile
31438.             t$4352 = t$4346 + 8 * ( ( 7 + 8 * nd_profile ) / 8 )
31438.             t$4355 = t$4346 + 8 * ( ( 8 * nd_profile + 8 * ( ( 7 + 8 * nd_profile ) / 8 ) + 7 ) / 8 )
31438.             if ( 0 < n_layer ) then
31438.                if ( n_red_eigensystem > 0 ) then
31438.                   $I_i_step_922 = 0
31438.                   do
31438.                      $I_L31438_908 = 0
31438.                      do
31438.                         $I_L31438_893 = 0
31438.                         do
31438.                            if ( n_profile > 0 ) then
31438.                               $I_L31438_743 = 0
31438. !dir$ ivdep
31438.                               do
31438.                                  pivot(1 + $I_L31438_743) = abs( a(1 + $I_L31438_743, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1) )
31438.                                  i_pivot(1 + $I_L31438_743) = ( $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1 )
31438.                                  offset_pivot(1 + $I_L31438_743) = 0
31438.                                  $I_L31438_743 = 1 + $I_L31438_743
31438.                                  if ( $I_L31438_743 >= n_profile ) exit
31438.                               enddo
31438.                            endif
31438.                            if ( ( min( ( n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * 2 + n_red_eigensystem * $I_i_step_922 * 2 ), n_layer * n_red_eigensystem * 2 ) + -$I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + n_red_eigensystem * $I_i_step_922 * -2 + -1 ) > 0 ) then
31438.                               if ( n_profile > 0 ) then
31438.                                  $I_L31438_817 = 0
31438. !dir$ ivdep
31438.                                  do
31438.                                     $SCA_pivot_I4 = pivot(1 + $I_L31438_817)
31438.                                     $I_L31438_745 = 0
31438. !dir$ unroll 4
31438.                                     do
31438.                                        $aabs_S38 = abs( a(1 + $I_L31438_817, $I_L31438_745 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2, $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1) )
31438.                                        if ( $aabs_S38 > $SCA_pivot_I4 ) then
31438.                                           $SCA_pivot_I4 = $aabs_S38
31438.                                           i_pivot(1 + $I_L31438_817) = ( $I_L31438_745 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2 )
31438.                                        endif
31438.                                        $I_L31438_745 = 1 + $I_L31438_745
31438.                                        if ( $I_L31438_745 >= min( ( n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * 2 + n_red_eigensystem * $I_i_step_922 * 2 ), n_layer * n_red_eigensystem * 2 ) + -$I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + n_red_eigensystem * $I_i_step_922 * -2 + -1 ) exit
31438.                                     enddo
31438.                                     pivot(1 + $I_L31438_817) = $SCA_pivot_I4
31438.                                     $I_L31438_817 = 1 + $I_L31438_817
31438.                                     if ( $I_L31438_817 >= n_profile ) exit
31438.                                  enddo
31438.                               endif
31438.                            endif
31438.                            if ( $I_L31438_908 == 0 ) then
31438.                               if ( ( -n_red_eigensystem + n_red_eigensystem * $I_i_step_922 * -2 + n_red_eigensystem * min( ( 3 + 2 * $I_i_step_922 ), 2 * n_layer ) ) > 0 ) then
31438.                                  if ( n_profile > 0 ) then
31438.                                     $I_L31438_819 = 0
31438. !dir$ ivdep
31438.                                     do
31438.                                        $SCA_pivot_I3 = pivot(1 + $I_L31438_819)
31438.                                        $I_L31438_747 = 0
31438. !dir$ unroll 4
31438.                                        do
31438.                                           $aabs_S41 = abs( a(1 + $I_L31438_819, n_red_eigensystem + $I_L31438_747 + n_red_eigensystem * $I_i_step_922 * 2 + 1, 1 + $I_L31438_893) )
31438.                                           if ( $aabs_S41 > $SCA_pivot_I3 ) then
31438.                                              $SCA_pivot_I3 = $aabs_S41
31438.                                              i_pivot(1 + $I_L31438_819) = ( n_red_eigensystem + $I_L31438_747 + n_red_eigensystem * $I_i_step_922 * 2 + 1 )
31438.                                              offset_pivot(1 + $I_L31438_819) = 2 * n_red_eigensystem
31438.                                           endif
31438.                                           $I_L31438_747 = 1 + $I_L31438_747
31438.                                           if ( $I_L31438_747 >= -n_red_eigensystem + n_red_eigensystem * $I_i_step_922 * -2 + n_red_eigensystem * min( ( 3 + 2 * $I_i_step_922 ), 2 * n_layer ) ) exit
31438.                                        enddo
31438.                                        $I_L31438_819 = 1 + $I_L31438_819
31438.                                        if ( $I_L31438_819 >= n_profile ) exit
31438.                                     enddo
31438.                                  endif
31438.                               endif
31438.                            endif
31438.                            if ( ( -$I_L31438_893 + cvmg( ( 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 6 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + -2 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 + -1 ) >= 0 ) then
31438.                               if ( n_profile > 0 ) then
31438.                                  $I_L31438_821 = 0
31438.                                  do
31438.                                     $I_L31438_749 = 0
31438. !dir$ ivdep
31438.                                     do
31438.                                        $tmp_S44 = a(1 + $I_L31438_749, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_821 + $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1)
31438.                                        a(1 + $I_L31438_749, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_821 + $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1) = a(1 + $I_L31438_749, i_pivot(1 + $I_L31438_749), $I_L31438_821 + $I_L31438_893 + -offset_pivot(1 + $I_L31438_749) + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1)
31438.                                        a(1 + $I_L31438_749, i_pivot(1 + $I_L31438_749), $I_L31438_821 + $I_L31438_893 + -offset_pivot(1 + $I_L31438_749) + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1) = $tmp_S44
31438.                                        $I_L31438_749 = 1 + $I_L31438_749
31438.                                        if ( $I_L31438_749 >= n_profile ) exit
31438.                                     enddo
31438.                                     $I_L31438_821 = 1 + $I_L31438_821
31438.                                     if ( $I_L31438_821 >= -$I_L31438_893 + cvmg( ( 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 6 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + -2 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 ) exit
31438.                                  enddo
31438.                               endif
31438.                            endif
31438.                            if ( n_profile > 0 ) then
31438.                               $I_L31438_751 = 0
31438. !dir$ ivdep
31438.                               do
31438.                                  $tmp_S46 = b(1 + $I_L31438_751, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1)
31438.                                  b(1 + $I_L31438_751, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1) = b(1 + $I_L31438_751, i_pivot(1 + $I_L31438_751))
31438.                                  b(1 + $I_L31438_751, i_pivot(1 + $I_L31438_751)) = $tmp_S46
31438.                                  $I_L31438_751 = 1 + $I_L31438_751
31438.                                  if ( $I_L31438_751 >= n_profile ) exit
31438.                               enddo
31438.                            endif
31438.                            if ( ( -$I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + cvmg( ( n_red_eigensystem + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 ), ( n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * 2 + n_red_eigensystem * $I_i_step_922 * 2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + n_red_eigensystem * $I_i_step_922 * -2 + -2 ) >= 0 ) then
31438.                               $I_L31438_866 = 0
31438.                               do
31438.                                  if ( n_profile > 0 ) then
31438.                                     $I_L31438_753 = 0
31438. !dir$ ivdep
31438.                                     do
31438.                                        $rho_WR0_R0 = ( a(1 + $I_L31438_753, $I_L31438_866 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2, $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1) * 1.0/a(1 + $I_L31438_753, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 1) )
31438.                                        rho(1 + $I_L31438_753) = $rho_WR0_R0
31438.                                        b(1 + $I_L31438_753, $I_L31438_866 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2) = b(1 + $I_L31438_753, $I_L31438_866 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2) + -( $rho_WR0_R0 * b(1 + $I_L31438_753, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1) )
31438.                                        $I_L31438_753 = 1 + $I_L31438_753
31438.                                        if ( $I_L31438_753 >= n_profile ) exit
31438.                                     enddo
31438.                                  endif
31438.                                  if ( ( -$I_L31438_893 + cvmg( ( 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 6 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + -2 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 + -1 ) > 0 ) then
31438.                                     if ( n_profile > 0 ) then
31438.                                        $I_L31438_823 = 0
31438. !dir$ blocking_size( 0, 0 )
31438.                                        do
31438.                                           $I_L31438_755 = 0
31438. !dir$ ivdep
31438. !dir$ blocking_size( 0, 0 )
31438.                                           do
31438.                                              a(1 + $I_L31438_755, $I_L31438_866 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2, $I_L31438_823 + $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 2) = a(1 + $I_L31438_755, $I_L31438_866 + $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 2, $I_L31438_823 + $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 2) + -( rho(1 + $I_L31438_755) * a(1 + $I_L31438_755, $I_L31438_893 + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_823 + $I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + 2 * n_red_eigensystem + 2) )
31438.                                              $I_L31438_755 = 1 + $I_L31438_755
31438.                                              if ( $I_L31438_755 >= n_profile ) exit
31438.                                           enddo
31438.                                           $I_L31438_823 = 1 + $I_L31438_823
31438.                                           if ( $I_L31438_823 >= -$I_L31438_893 + cvmg( ( 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 6 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * -2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + -2 * n_red_eigensystem + n_red_eigensystem * $I_L31438_908 + -1 ) exit
31438.                                        enddo
31438.                                     endif
31438.                                  endif
31438.                                  $I_L31438_866 = 1 + $I_L31438_866
31438.                                  if ( $I_L31438_866 >= -$I_L31438_893 + -( n_red_eigensystem * $I_L31438_908 ) + cvmg( ( n_red_eigensystem + n_red_eigensystem * $I_L31438_908 + n_red_eigensystem * $I_i_step_922 * 2 ), ( n_red_eigensystem + n_red_eigensystem * $I_L31438_908 * 2 + n_red_eigensystem * $I_i_step_922 * 2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + n_red_eigensystem * $I_i_step_922 * -2 + -1 ) exit
31438.                               enddo
31438.                            endif
31438.                            if ( $I_L31438_908 == 0 ) then
31438.                               if ( ( -n_red_eigensystem + cvmg( ( 2 * n_red_eigensystem + n_red_eigensystem * $I_i_step_922 * 2 ), ( 3 * n_red_eigensystem + n_red_eigensystem * $I_i_step_922 * 2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + n_red_eigensystem * $I_i_step_922 * -2 ) > 0 ) then
31438.                                  $I_L31438_868 = 0
31438.                                  do
31438.                                     if ( n_profile > 0 ) then
31438.                                        $I_L31438_757 = 0
31438. !dir$ ivdep
31438.                                        do
31438.                                           $rho_WR0_R1 = ( a(1 + $I_L31438_757, n_red_eigensystem + $I_L31438_868 + n_red_eigensystem * $I_i_step_922 * 2 + 1, 1 + $I_L31438_893) * 1.0/a(1 + $I_L31438_757, $I_L31438_893 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_893 + 2 * n_red_eigensystem + 1) )
31438.                                           rho(1 + $I_L31438_757) = $rho_WR0_R1
31438.                                           b(1 + $I_L31438_757, n_red_eigensystem + $I_L31438_868 + n_red_eigensystem * $I_i_step_922 * 2 + 1) = b(1 + $I_L31438_757, n_red_eigensystem + $I_L31438_868 + n_red_eigensystem * $I_i_step_922 * 2 + 1) + -( $rho_WR0_R1 * b(1 + $I_L31438_757, $I_L31438_893 + n_red_eigensystem * $I_i_step_922 * 2 + 1) )
31438.                                           $I_L31438_757 = 1 + $I_L31438_757
31438.                                           if ( $I_L31438_757 >= n_profile ) exit
31438.                                        enddo
31438.                                     endif
31438.                                     if ( ( -$I_L31438_893 + cvmg( 4 * n_red_eigensystem, 6 * n_red_eigensystem, ( 1 + $I_i_step_922 ) >= n_layer ) + -2 * n_red_eigensystem + -1 ) > 0 ) then
31438.                                        if ( n_profile > 0 ) then
31438.                                           $I_L31438_825 = 0
31438. !dir$ blocking_size( 0, 0 )
31438.                                           do
31438.                                              $I_L31438_759 = 0
31438. !dir$ ivdep
31438. !dir$ blocking_size( 0, 0 )
31438.                                              do
31438.                                                 a(1 + $I_L31438_759, n_red_eigensystem + $I_L31438_868 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_825 + $I_L31438_893 + 2) = a(1 + $I_L31438_759, n_red_eigensystem + $I_L31438_868 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_825 + $I_L31438_893 + 2) + -( rho(1 + $I_L31438_759) * a(1 + $I_L31438_759, $I_L31438_893 + n_red_eigensystem * $I_i_step_922 * 2 + 1, $I_L31438_825 + $I_L31438_893 + 2 * n_red_eigensystem + 2) )
31438.                                                 $I_L31438_759 = 1 + $I_L31438_759
31438.                                                 if ( $I_L31438_759 >= n_profile ) exit
31438.                                              enddo
31438.                                              $I_L31438_825 = 1 + $I_L31438_825
31438.                                              if ( $I_L31438_825 >= -$I_L31438_893 + cvmg( 4 * n_red_eigensystem, 6 * n_red_eigensystem, ( 1 + $I_i_step_922 ) >= n_layer ) + -2 * n_red_eigensystem + -1 ) exit
31438.                                           enddo
31438.                                        endif
31438.                                     endif
31438.                                     $I_L31438_868 = 1 + $I_L31438_868
31438.                                     if ( $I_L31438_868 >= -n_red_eigensystem + cvmg( ( 2 * n_red_eigensystem + n_red_eigensystem * $I_i_step_922 * 2 ), ( 3 * n_red_eigensystem + n_red_eigensystem * $I_i_step_922 * 2 ), ( 1 + $I_i_step_922 ) >= n_layer ) + n_red_eigensystem * $I_i_step_922 * -2 ) exit
31438.                                  enddo
31438.                               endif
31438.                            endif
31438.                            $I_L31438_893 = 1 + $I_L31438_893
31438.                            if ( $I_L31438_893 >= n_red_eigensystem ) exit
31438.                         enddo
31438.                         $I_L31438_908 = 1 + $I_L31438_908
31438.                         if ( $I_L31438_908 >= 2 ) exit
31438.                      enddo
31438.                      $I_i_step_922 = 1 + $I_i_step_922
31438.                      if ( $I_i_step_922 >= n_layer ) exit
31438.                   enddo
31438.                   $I_i_step_910 = 0
31438.                   do
31438.                      $I_L31438_895 = 0
31438.                      do
31438.                         $I_L31438_870 = 0
31438.                         do
31438.                            if ( n_profile > 0 ) then
31438.                               $I_L31438_761 = 0
31438. !dir$ ivdep
31438.                               do
31438.                                  upm(1 + $I_L31438_761, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2) = b(1 + $I_L31438_761, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2)
31438.                                  $I_L31438_761 = 1 + $I_L31438_761
31438.                                  if ( $I_L31438_761 >= n_profile ) exit
31438.                               enddo
31438.                            endif
31438.                            if ( ( $I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + cvmg( ( 2 * n_red_eigensystem + n_red_eigensystem * $I_L31438_895 * 2 ), ( 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_895 * 2 ), ( n_layer + -$I_i_step_910 ) >= n_layer ) + -2 * n_red_eigensystem ) > 0 ) then
31438.                               if ( n_profile > 0 ) then
31438.                                  $I_L31438_827 = 0
31438. !dir$ blocking_size( 0, 0 )
31438.                                  do
31438.                                     $I_L31438_763 = 0
31438. !dir$ ivdep
31438. !dir$ blocking_size( 0, 0 )
31438.                                     do
31438.                                        upm(1 + $I_L31438_763, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2) = upm(1 + $I_L31438_763, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2) + -( a(1 + $I_L31438_763, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2, $I_L31438_827 + -( 2 * n_red_eigensystem ) + -$I_L31438_870 + 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_895 + 1) * upm(1 + $I_L31438_763, $I_L31438_827 + -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2 + 1) )
31438.                                        $I_L31438_763 = 1 + $I_L31438_763
31438.                                        if ( $I_L31438_763 >= n_profile ) exit
31438.                                     enddo
31438.                                     $I_L31438_827 = 1 + $I_L31438_827
31438.                                     if ( $I_L31438_827 >= $I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + cvmg( ( 2 * n_red_eigensystem + n_red_eigensystem * $I_L31438_895 * 2 ), ( 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_895 * 2 ), ( n_layer + -$I_i_step_910 ) >= n_layer ) + -2 * n_red_eigensystem ) exit
31438.                                  enddo
31438.                               endif
31438.                            endif
31438.                            if ( n_profile > 0 ) then
31438.                               $I_L31438_765 = 0
31438. !dir$ ivdep
31438.                               do
31438.                                  upm(1 + $I_L31438_765, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2) = ( upm(1 + $I_L31438_765, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2) * 1.0/a(1 + $I_L31438_765, -$I_L31438_870 + -( n_red_eigensystem * $I_L31438_895 ) + n_layer * n_red_eigensystem * 2 + n_red_eigensystem * $I_i_step_910 * -2, -( 2 * n_red_eigensystem ) + -$I_L31438_870 + 4 * n_red_eigensystem + n_red_eigensystem * $I_L31438_895) )
31438.                                  $I_L31438_765 = 1 + $I_L31438_765
31438.                                  if ( $I_L31438_765 >= n_profile ) exit
31438.                               enddo
31438.                            endif
31438.                            $I_L31438_870 = 1 + $I_L31438_870
31438.                            if ( $I_L31438_870 >= n_red_eigensystem ) exit
31438.                         enddo
31438.                         $I_L31438_895 = 1 + $I_L31438_895
31438.                         if ( $I_L31438_895 >= 2 ) exit
31438.                      enddo
31438.                      $I_i_step_910 = 1 + $I_i_step_910
31438.                      if ( $I_i_step_910 >= n_layer ) exit
31438.                   enddo
31438.                endif
31438.             endif
31438.             _free( t$4346 )
31446.             ipa$28184 = loc( kappa(1, 1) )
31446.             kappa = _copyin( kappa(1, 1) )
31446.             ipa$28186 = loc( up_lm(1, 1, 1) )
31446.             up_lm = _copyin( up_lm(1, 1, 1) )
31446.             t$456 = nd_profile
31446.             t$457 = nd_direction
31446.             t$2438 = max( 0, nd_profile )
31446.             t$2439 = nd_profile
31446.             t$2440 = max( 0, nd_direction )
31446.             t$2441 = ( nd_profile * nd_direction )
31446.             t$455 = nd_viewing_level
31446.             t$2442 = max( 0, nd_viewing_level )
31446.             t$458 = nd_max_order / 2
31446.             t$2443 = max( 0, nd_max_order / 2 )
31446.             t$2444 = max( 0, nd_max_order / 2 )
31446.             t$2445 = max( 0, nd_max_order / 2 ) * max( 0, nd_max_order / 2 )
31446.             t$459 = ( 1 + nd_max_order )
31446.             t$2446 = max( 0, ( 1 + nd_max_order ) )
31446.             t$2447 = nd_profile * max( 0, ( 1 + nd_max_order ) )
31446.             t$2448 = nd_profile * nd_direction * max( 0, ( 1 + nd_max_order ) )
31446.             t$460 = nd_sph_cf_weight
31446.             t$461 = nd_sph_u_range
31446.             t$2449 = nd_viewing_level * nd_profile
31446.             t$2450 = max( 0, nd_sph_cf_weight )
31446.             t$2451 = nd_profile * nd_viewing_level * nd_sph_cf_weight
31446.             t$2452 = max( 0, nd_sph_u_range )
31446.             t$2453 = ( nd_profile * nd_viewing_level * nd_sph_cf_weight * nd_sph_u_range )
31446.             t$462 = nd_sph_equation
31446.             t$2454 = max( 0, nd_sph_equation )
31446.             t$2455 = ( nd_profile * nd_sph_equation )
31446.             t$463 = nd_layer
31446.             t$2456 = 1 + nd_layer
31446.             t$2457 = max( 0, 1 + nd_layer )
31446.             t$2458 = nd_profile * max( 0, 1 + nd_layer )
31446.             t$464 = ls_trunc_calc + -ms_min + -$I_L31302_942 + 1
31446.             t$2459 = max( 0, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 )
31446.             t$2460 = nd_profile * nd_viewing_level * max( 0, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 )
31446.             t$466 = nd_flux_profile
31446.             t$2461 = max( 0, nd_flux_profile )
31446.             t$2462 = nd_flux_profile
31446.             t$2463 = nd_flux_profile * max( 0, 1 + nd_layer )
31446.             t$467 = ( 2 + 2 * nd_layer )
31446.             t$2464 = max( 0, ( 2 + 2 * nd_layer ) )
31446.             t$2465 = nd_flux_profile * max( 0, ( 2 + 2 * nd_layer ) )
31446.             t$465 = nd_radiance_profile
31446.             t$2466 = max( 0, nd_radiance_profile )
31446.             t$2467 = nd_radiance_profile
31446.             t$2468 = nd_viewing_level * nd_radiance_profile
31446.             t$2469 = ( nd_radiance_profile * nd_direction * nd_viewing_level )
31446.             t$468 = nd_j_profile
31446.             t$2470 = max( 0, nd_j_profile )
31446.             t$2471 = nd_j_profile
31446.             t$2472 = ( nd_viewing_level * nd_j_profile )
31446.             if ( i_sph_algorithm == 1 ) then
31446.                if ( n_viewing_level > 0 ) then
31446.                   if ( 2 * n_red_eigensystem > 0 ) then
31446.                      if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) > 0 ) then
31446.                         if ( n_profile > 0 ) then
31446.                            $I_L31446_936 = 0
31446. !dir$ ivdep
31446. !dir$ loop_info (automatic) cache_nt( i_rad_layer )
31446.                            do
31446.                               $offset_S65 = -2 * n_red_eigensystem + n_red_eigensystem * i_rad_layer(1 + $I_L31446_936) * 2
31446.                               $I_L31446_924 = 0
31446.                               do
31446.                                  $I_L31446_914 = 0
31446.                                  do
31446.                                     $I_L31446_897 = 0
31446.                                     do
31446.                                        $I_L31446_875 = 0
31446.                                        if ( min( 4 + 4 * $I_L31446_924, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) + -4 * $I_L31446_924 >= 4 ) then
31446.                                           $I_L31446_985 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 4, 4 )
31446.                                           do
31446.                                              $I_L31446_845 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 4, 4 )
31446.                                              do
31446.                                                 $I_L31446_770 = 0
31446. !dir$ blocking_size( 256, 256 )
31446.                                                 do
31446.                                                    c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 1) = c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 1) + weight_u($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 1, $I_L31446_845 + 4 * $I_L31446_914 + 1) * upm($I_L31446_770 + 256 * $I_L31446_897 + 1, $offset_S65 + $I_L31446_845 + 4 * $I_L31446_914 + 1)
31446.                                                    c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 2) = c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 2) + weight_u($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 2, $I_L31446_845 + 4 * $I_L31446_914 + 1) * upm($I_L31446_770 + 256 * $I_L31446_897 + 1, $offset_S65 + $I_L31446_845 + 4 * $I_L31446_914 + 1)
31446.                                                    c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 3) = c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 3) + weight_u($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 3, $I_L31446_845 + 4 * $I_L31446_914 + 1) * upm($I_L31446_770 + 256 * $I_L31446_897 + 1, $offset_S65 + $I_L31446_845 + 4 * $I_L31446_914 + 1)
31446.                                                    c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 4) = c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 4) + weight_u($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, 4 * $I_L31446_924 + 4 * $I_L31446_985 + 4, $I_L31446_845 + 4 * $I_L31446_914 + 1) * upm($I_L31446_770 + 256 * $I_L31446_897 + 1, $offset_S65 + $I_L31446_845 + 4 * $I_L31446_914 + 1)
31446.                                                    $I_L31446_770 = 1 + $I_L31446_770
31446.                                                    if ( $I_L31446_770 >= min( n_profile, 256 + 256 * $I_L31446_897 ) + -256 * $I_L31446_897 ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_845 = 1 + $I_L31446_845
31446.                                                 if ( $I_L31446_845 >= min( ( 2 * n_red_eigensystem ), 4 + 4 * $I_L31446_914 ) + -4 * $I_L31446_914 ) exit
31446.                                              enddo
31446.                                              $I_L31446_985 = 1 + $I_L31446_985
31446.                                              if ( $I_L31446_985 >= _rsh( min( 4 + 4 * $I_L31446_924, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) + -4 * $I_L31446_924, 2 ) ) exit
31446.                                           enddo
31446.                                           $I_L31446_875 = and( 0xfffffffffffffffcUL, min( 4 + 4 * $I_L31446_924, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) + -4 * $I_L31446_924 )
31446.                                        endif
31446.                                        if ( $I_L31446_875 < min( 4 + 4 * $I_L31446_924, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) + -4 * $I_L31446_924 ) then
31446.                                           $I_L31446_982 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 4, 4 )
31446.                                           do
31446.                                              $I_L31446_845 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 4, 4 )
31446.                                              do
31446.                                                 $I_L31446_770 = 0
31446. !dir$ blocking_size( 256, 256 )
31446.                                                 do
31446.                                                    c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, $I_L31446_875 + $I_L31446_982 + 4 * $I_L31446_924 + 1) = c_ylm($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, $I_L31446_875 + $I_L31446_982 + 4 * $I_L31446_924 + 1) + weight_u($I_L31446_770 + 256 * $I_L31446_897 + 1, 1 + $I_L31446_936, $I_L31446_875 + $I_L31446_982 + 4 * $I_L31446_924 + 1, $I_L31446_845 + 4 * $I_L31446_914 + 1) * upm($I_L31446_770 + 256 * $I_L31446_897 + 1, $offset_S65 + $I_L31446_845 + 4 * $I_L31446_914 + 1)
31446.                                                    $I_L31446_770 = 1 + $I_L31446_770
31446.                                                    if ( $I_L31446_770 >= min( n_profile, 256 + 256 * $I_L31446_897 ) + -256 * $I_L31446_897 ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_845 = 1 + $I_L31446_845
31446.                                                 if ( $I_L31446_845 >= min( ( 2 * n_red_eigensystem ), 4 + 4 * $I_L31446_914 ) + -4 * $I_L31446_914 ) exit
31446.                                              enddo
31446.                                              $I_L31446_982 = 1 + $I_L31446_982
31446.                                              if ( $I_L31446_982 >= min( 4 + 4 * $I_L31446_924, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1 ) + -$I_L31446_875 + -4 * $I_L31446_924 ) exit
31446.                                           enddo
31446.                                        endif
31446.                                        $I_L31446_897 = 1 + $I_L31446_897
31446.                                        if ( $I_L31446_897 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
31446.                                     enddo
31446.                                     $I_L31446_914 = 1 + $I_L31446_914
31446.                                     if ( $I_L31446_914 >= 1 + max( 0, -1 + _rsh( 3 + 2 * n_red_eigensystem, 2 ) ) ) exit
31446.                                  enddo
31446.                                  $I_L31446_924 = 1 + $I_L31446_924
31446.                                  if ( $I_L31446_924 >= 1 + max( 0, -1 + _rsh( ls_trunc_calc + -ms_min + -$I_L31302_942 + 4, 2 ) ) ) exit
31446.                               enddo
31446.                               $I_L31446_936 = 1 + $I_L31446_936
31446.                               if ( $I_L31446_936 >= n_viewing_level ) exit
31446.                            enddo
31446.                         endif
31446.                      endif
31446.                   endif
31446.                endif
31446.                if ( i_sph_mode == 2 ) then
31446.                   if ( n_viewing_level > 0 ) then
31446.                      if ( n_profile > 0 ) then
31446.                         $I_L31446_833 = 0
31446.                         do
31446.                            $I_L31446_777 = 0
31446. !dir$ ivdep
31446.                            do
31446.                               $contribution_S69 = 1.0233267079464885 * c_ylm(1 + $I_L31446_777, 1 + $I_L31446_833, 2)
31446.                               flux_total(1 + $I_L31446_777, 1 + 2 * $I_L31446_833) = $contribution_S69
31446.                               flux_total(1 + $I_L31446_777, 2 + 2 * $I_L31446_833) = -$contribution_S69
31446.                               $I_L31446_777 = 1 + $I_L31446_777
31446.                               if ( $I_L31446_777 >= n_profile ) exit
31446.                            enddo
31446.                            $I_L31446_833 = 1 + $I_L31446_833
31446.                            if ( $I_L31446_833 >= n_viewing_level ) exit
31446.                         enddo
31446.                      endif
31446.                   endif
31446.                   if ( ls_trunc_calc >= 0 ) then
31446.                      if ( n_viewing_level > 0 ) then
31446.                         if ( n_profile > 0 ) then
31446.                            $I_L31446_878 = 0
31446.                            do
31446.                               $cnst_ls_S73 = 2.046653415892977 * kappa(1, 1 + $I_L31446_878)
31446.                               $I_L31446_835 = 0
31446.                               do
31446.                                  $I_L31446_779 = 0
31446. !dir$ ivdep
31446.                                  do
31446.                                     $contribution_S74 = $cnst_ls_S73 * c_ylm(1 + $I_L31446_779, 1 + $I_L31446_835, 1 + 2 * $I_L31446_878)
31446.                                     flux_total(1 + $I_L31446_779, 1 + 2 * $I_L31446_835) = flux_total(1 + $I_L31446_779, 1 + 2 * $I_L31446_835) + -$contribution_S74
31446.                                     flux_total(1 + $I_L31446_779, 2 + 2 * $I_L31446_835) = flux_total(1 + $I_L31446_779, 2 + 2 * $I_L31446_835) + -$contribution_S74
31446.                                     $I_L31446_779 = 1 + $I_L31446_779
31446.                                     if ( $I_L31446_779 >= n_profile ) exit
31446.                                  enddo
31446.                                  $I_L31446_835 = 1 + $I_L31446_835
31446.                                  if ( $I_L31446_835 >= n_viewing_level ) exit
31446.                               enddo
31446.                               $I_L31446_878 = 1 + $I_L31446_878
31446.                               if ( $I_L31446_878 >= ( 2 + ls_trunc_calc ) / 2 ) exit
31446.                            enddo
31446.                         endif
31446.                      endif
31446.                   endif
31446.                   if ( isolir == 1 ) then
31446.                      if ( n_viewing_level > 0 ) then
31446.                         if ( n_profile > 0 ) then
31446.                            $I_L31446_837 = 0
31446.                            if ( n_viewing_level >= 4 ) then
31446.                               $I_L31446_970 = 0
31446. !dir$ blocking_size( 0, 0 )
31446.                               do
31446.                                  $I_L31446_781 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 0, 0 )
31446.                                  do
31446.                                     $flux_direct_WR0_R2 = i_direct(1 + $I_L31446_781, 4 * $I_L31446_970) * mu_0(1 + $I_L31446_781)
31446.                                     flux_direct(1 + $I_L31446_781, 4 * $I_L31446_970) = $flux_direct_WR0_R2
31446.                                     flux_total(1 + $I_L31446_781, 2 + 8 * $I_L31446_970) = flux_total(1 + $I_L31446_781, 2 + 8 * $I_L31446_970) + $flux_direct_WR0_R2
31446.                                     $flux_direct_WR0_R2 = i_direct(1 + $I_L31446_781, 1 + 4 * $I_L31446_970) * mu_0(1 + $I_L31446_781)
31446.                                     flux_direct(1 + $I_L31446_781, 1 + 4 * $I_L31446_970) = $flux_direct_WR0_R2
31446.                                     flux_total(1 + $I_L31446_781, 4 + 8 * $I_L31446_970) = flux_total(1 + $I_L31446_781, 4 + 8 * $I_L31446_970) + $flux_direct_WR0_R2
31446.                                     $flux_direct_WR0_R2 = i_direct(1 + $I_L31446_781, 2 + 4 * $I_L31446_970) * mu_0(1 + $I_L31446_781)
31446.                                     flux_direct(1 + $I_L31446_781, 2 + 4 * $I_L31446_970) = $flux_direct_WR0_R2
31446.                                     flux_total(1 + $I_L31446_781, 6 + 8 * $I_L31446_970) = flux_total(1 + $I_L31446_781, 6 + 8 * $I_L31446_970) + $flux_direct_WR0_R2
31446.                                     $flux_direct_WR0_R2 = i_direct(1 + $I_L31446_781, 3 + 4 * $I_L31446_970) * mu_0(1 + $I_L31446_781)
31446.                                     flux_direct(1 + $I_L31446_781, 3 + 4 * $I_L31446_970) = $flux_direct_WR0_R2
31446.                                     flux_total(1 + $I_L31446_781, 8 + 8 * $I_L31446_970) = flux_total(1 + $I_L31446_781, 8 + 8 * $I_L31446_970) + $flux_direct_WR0_R2
31446.                                     $I_L31446_781 = 1 + $I_L31446_781
31446.                                     if ( $I_L31446_781 >= n_profile ) exit
31446.                                  enddo
31446.                                  $I_L31446_970 = 1 + $I_L31446_970
31446.                                  if ( $I_L31446_970 >= _rsh( n_viewing_level, 2 ) ) exit
31446.                               enddo
31446.                               $I_L31446_837 = and( 0xfffffffffffffffcUL, n_viewing_level )
31446.                            endif
31446.                            if ( $I_L31446_837 < n_viewing_level ) then
31446.                               $I_L31446_953 = 0
31446. !dir$ blocking_size( 0, 0 )
31446.                               do
31446.                                  $I_L31446_781 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 0, 0 )
31446.                                  do
31446.                                     $flux_direct_WR0_R2 = i_direct(1 + $I_L31446_781, $I_L31446_837 + $I_L31446_953) * mu_0(1 + $I_L31446_781)
31446.                                     flux_direct(1 + $I_L31446_781, $I_L31446_837 + $I_L31446_953) = $flux_direct_WR0_R2
31446.                                     flux_total(1 + $I_L31446_781, 2 * $I_L31446_837 + 2 * $I_L31446_953 + 2) = flux_total(1 + $I_L31446_781, 2 * $I_L31446_837 + 2 * $I_L31446_953 + 2) + $flux_direct_WR0_R2
31446.                                     $I_L31446_781 = 1 + $I_L31446_781
31446.                                     if ( $I_L31446_781 >= n_profile ) exit
31446.                                  enddo
31446.                                  $I_L31446_953 = 1 + $I_L31446_953
31446.                                  if ( $I_L31446_953 >= n_viewing_level + -$I_L31446_837 ) exit
31446.                               enddo
31446.                            endif
31446.                         endif
31446.                      endif
31446.                   endif
31446.                else if ( i_sph_mode == 3 ) then
31446.                   if ( n_viewing_level > 0 ) then
31446.                      if ( n_profile > 0 ) then
31446.                         $I_L31446_829 = 0
31446.                         do
31446.                            $I_L31446_773 = 0
31446. !dir$ ivdep
31446.                            do
31446.                               photolysis(1 + $I_L31446_773, 1 + $I_L31446_829) = 3.5449077018110318 * c_ylm(1 + $I_L31446_773, 1 + $I_L31446_829, 2)
31446.                               $I_L31446_773 = 1 + $I_L31446_773
31446.                               if ( $I_L31446_773 >= n_profile ) exit
31446.                            enddo
31446.                            $I_L31446_829 = 1 + $I_L31446_829
31446.                            if ( $I_L31446_829 >= n_viewing_level ) exit
31446.                         enddo
31446.                      endif
31446.                   endif
31446.                   if ( isolir == 1 ) then
31446.                      if ( n_viewing_level > 0 ) then
31446.                         if ( n_profile > 0 ) then
31446.                            $I_L31446_831 = 0
31446.                            do
31446.                               $I_L31446_775 = 0
31446. !dir$ ivdep
31446.                               do
31446.                                  photolysis(1 + $I_L31446_775, 1 + $I_L31446_831) = photolysis(1 + $I_L31446_775, 1 + $I_L31446_831) + i_direct(1 + $I_L31446_775, 1 + $I_L31446_831)
31446.                                  $I_L31446_775 = 1 + $I_L31446_775
31446.                                  if ( $I_L31446_775 >= n_profile ) exit
31446.                               enddo
31446.                               $I_L31446_831 = 1 + $I_L31446_831
31446.                               if ( $I_L31446_831 >= n_viewing_level ) exit
31446.                            enddo
31446.                         endif
31446.                      endif
31446.                   endif
31446.                else if ( i_sph_mode == 1 ) then
31446.                   if ( n_direction > 0 ) then
31446.                      if ( n_viewing_level > 0 ) then
31446.                         if ( ( ls_trunc_calc + -ms_min + -$I_L31302_942 ) > 0 ) then
31446.                            if ( n_profile > 0 ) then
31446.                               $I_L31446_938 = 0
31446.                               do
31446.                                  $I_L31446_926 = 0
31446.                                  do
31446.                                     $I_L31446_920 = 0
31446.                                     do
31446.                                        $I_L31446_899 = 0
31446.                                        do
31446.                                           $I_L31446_888 = 0
31446.                                           if ( min( n_viewing_level, 8 + 8 * $I_L31446_926 ) + -8 * $I_L31446_926 >= 2 ) then
31446.                                              $I_L31446_987 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                              do
31446.                                                 $I_L31446_848 = 0
31446.                                                 if ( min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920 >= 2 ) then
31446.                                                    $I_L31446_972 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                                    do
31446.                                                       $I_L31446_796 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                                       do
31446.                                                          radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 1) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 1, 1 + $I_L31446_938)
31446.                                                          radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 1) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 1, 1 + $I_L31446_938)
31446.                                                          radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 2) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 2, 1 + $I_L31446_938)
31446.                                                          radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 2) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_972 + 2, 1 + $I_L31446_938)
31446.                                                          $I_L31446_796 = 1 + $I_L31446_796
31446.                                                          if ( $I_L31446_796 >= min( n_profile, 256 + 256 * $I_L31446_899 ) + -256 * $I_L31446_899 ) exit
31446.                                                       enddo
31446.                                                       $I_L31446_972 = 1 + $I_L31446_972
31446.                                                       if ( $I_L31446_972 >= _rsh( min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920, 1 ) ) exit
31446.                                                    enddo
31446.                                                    $I_L31446_848 = and( 0xfffffffffffffffeUL, min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920 )
31446.                                                 endif
31446.                                                 if ( $I_L31446_848 < min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920 ) then
31446.                                                    $I_L31446_796 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                                    do
31446.                                                       radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 1, $I_L31446_848 + 8 * $I_L31446_920 + 1) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_848 + 8 * $I_L31446_920 + 1, 1 + $I_L31446_938)
31446.                                                       radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_926 + 2 * $I_L31446_987 + 2, $I_L31446_848 + 8 * $I_L31446_920 + 1) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_848 + 8 * $I_L31446_920 + 1, 1 + $I_L31446_938)
31446.                                                       $I_L31446_796 = 1 + $I_L31446_796
31446.                                                       if ( $I_L31446_796 >= min( n_profile, 256 + 256 * $I_L31446_899 ) + -256 * $I_L31446_899 ) exit
31446.                                                    enddo
31446.                                                 endif
31446.                                                 $I_L31446_987 = 1 + $I_L31446_987
31446.                                                 if ( $I_L31446_987 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L31446_926 ) + -8 * $I_L31446_926, 1 ) ) exit
31446.                                              enddo
31446.                                              $I_L31446_888 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L31446_926 ) + -8 * $I_L31446_926 )
31446.                                           endif
31446.                                           if ( $I_L31446_888 < min( n_viewing_level, 8 + 8 * $I_L31446_926 ) + -8 * $I_L31446_926 ) then
31446.                                              $I_L31446_848 = 0
31446.                                              if ( min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920 >= 2 ) then
31446.                                                 $I_L31446_974 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                                 do
31446.                                                    $I_L31446_796 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                                    do
31446.                                                       radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_974 + 1) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_974 + 1, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_974 + 2) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, 8 * $I_L31446_920 + 2 * $I_L31446_974 + 2, 1 + $I_L31446_938)
31446.                                                       $I_L31446_796 = 1 + $I_L31446_796
31446.                                                       if ( $I_L31446_796 >= min( n_profile, 256 + 256 * $I_L31446_899 ) + -256 * $I_L31446_899 ) exit
31446.                                                    enddo
31446.                                                    $I_L31446_974 = 1 + $I_L31446_974
31446.                                                    if ( $I_L31446_974 >= _rsh( min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920, 1 ) ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_848 = and( 0xfffffffffffffffeUL, min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920 )
31446.                                              endif
31446.                                              if ( $I_L31446_848 < min( 8 + 8 * $I_L31446_920, ls_trunc_calc + -ms_min + -$I_L31302_942 ) + -8 * $I_L31446_920 ) then
31446.                                                 $I_L31446_796 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                                 do
31446.                                                    radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, 1 + $I_L31446_938) = radiance_mono($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, 1 + $I_L31446_938) + azim_factor($I_L31446_796 + 256 * $I_L31446_899 + 1, 1 + $I_L31446_938) * c_ylm($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_888 + 8 * $I_L31446_926 + 1, $I_L31446_848 + 8 * $I_L31446_920 + 1) * up_lm($I_L31446_796 + 256 * $I_L31446_899 + 1, $I_L31446_848 + 8 * $I_L31446_920 + 1, 1 + $I_L31446_938)
31446.                                                    $I_L31446_796 = 1 + $I_L31446_796
31446.                                                    if ( $I_L31446_796 >= min( n_profile, 256 + 256 * $I_L31446_899 ) + -256 * $I_L31446_899 ) exit
31446.                                                 enddo
31446.                                              endif
31446.                                           endif
31446.                                           $I_L31446_899 = 1 + $I_L31446_899
31446.                                           if ( $I_L31446_899 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
31446.                                        enddo
31446.                                        $I_L31446_920 = 1 + $I_L31446_920
31446.                                        if ( $I_L31446_920 >= 1 + max( 0, -1 + _rsh( ls_trunc_calc + -ms_min + -$I_L31302_942 + 7, 3 ) ) ) exit
31446.                                     enddo
31446.                                     $I_L31446_926 = 1 + $I_L31446_926
31446.                                     if ( $I_L31446_926 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
31446.                                  enddo
31446.                                  $I_L31446_839 = 0
31446.                                  if ( n_viewing_level >= 4 ) then
31446.                                     $I_L31446_976 = 0
31446. !dir$ blocking_size( 0, 0 )
31446.                                     do
31446.                                        $I_L31446_799 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 0, 0 )
31446.                                        do
31446.                                           radiance_mono(1 + $I_L31446_799, 1 + 4 * $I_L31446_976, 1 + $I_L31446_938) = radiance_mono(1 + $I_L31446_799, 1 + 4 * $I_L31446_976, 1 + $I_L31446_938) + euler_factor * azim_factor(1 + $I_L31446_799, 1 + $I_L31446_938) * c_ylm(1 + $I_L31446_799, 1 + 4 * $I_L31446_976, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm(1 + $I_L31446_799, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 1 + $I_L31446_938)
31446.                                           radiance_mono(1 + $I_L31446_799, 2 + 4 * $I_L31446_976, 1 + $I_L31446_938) = radiance_mono(1 + $I_L31446_799, 2 + 4 * $I_L31446_976, 1 + $I_L31446_938) + euler_factor * azim_factor(1 + $I_L31446_799, 1 + $I_L31446_938) * c_ylm(1 + $I_L31446_799, 2 + 4 * $I_L31446_976, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm(1 + $I_L31446_799, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 1 + $I_L31446_938)
31446.                                           radiance_mono(1 + $I_L31446_799, 3 + 4 * $I_L31446_976, 1 + $I_L31446_938) = radiance_mono(1 + $I_L31446_799, 3 + 4 * $I_L31446_976, 1 + $I_L31446_938) + euler_factor * azim_factor(1 + $I_L31446_799, 1 + $I_L31446_938) * c_ylm(1 + $I_L31446_799, 3 + 4 * $I_L31446_976, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm(1 + $I_L31446_799, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 1 + $I_L31446_938)
31446.                                           radiance_mono(1 + $I_L31446_799, 4 + 4 * $I_L31446_976, 1 + $I_L31446_938) = radiance_mono(1 + $I_L31446_799, 4 + 4 * $I_L31446_976, 1 + $I_L31446_938) + euler_factor * azim_factor(1 + $I_L31446_799, 1 + $I_L31446_938) * c_ylm(1 + $I_L31446_799, 4 + 4 * $I_L31446_976, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm(1 + $I_L31446_799, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 1 + $I_L31446_938)
31446.                                           $I_L31446_799 = 1 + $I_L31446_799
31446.                                           if ( $I_L31446_799 >= n_profile ) exit
31446.                                        enddo
31446.                                        $I_L31446_976 = 1 + $I_L31446_976
31446.                                        if ( $I_L31446_976 >= _rsh( n_viewing_level, 2 ) ) exit
31446.                                     enddo
31446.                                     $I_L31446_839 = and( 0xfffffffffffffffcUL, n_viewing_level )
31446.                                  endif
31446.                                  if ( $I_L31446_839 < n_viewing_level ) then
31446.                                     $I_L31446_956 = 0
31446. !dir$ blocking_size( 0, 0 )
31446.                                     do
31446.                                        $I_L31446_799 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 0, 0 )
31446.                                        do
31446.                                           radiance_mono(1 + $I_L31446_799, $I_L31446_839 + $I_L31446_956 + 1, 1 + $I_L31446_938) = radiance_mono(1 + $I_L31446_799, $I_L31446_839 + $I_L31446_956 + 1, 1 + $I_L31446_938) + euler_factor * azim_factor(1 + $I_L31446_799, 1 + $I_L31446_938) * c_ylm(1 + $I_L31446_799, $I_L31446_839 + $I_L31446_956 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm(1 + $I_L31446_799, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 1 + $I_L31446_938)
31446.                                           $I_L31446_799 = 1 + $I_L31446_799
31446.                                           if ( $I_L31446_799 >= n_profile ) exit
31446.                                        enddo
31446.                                        $I_L31446_956 = 1 + $I_L31446_956
31446.                                        if ( $I_L31446_956 >= n_viewing_level + -$I_L31446_839 ) exit
31446.                                     enddo
31446.                                  endif
31446.                                  $I_L31446_938 = 1 + $I_L31446_938
31446.                                  if ( $I_L31446_938 >= n_direction ) exit
31446.                               enddo
31446.                            endif
31446.                         else if ( n_profile > 0 ) then
31446.                            $I_L31446_928 = 0
31446.                            do
31446.                               $I_L31446_918 = 0
31446.                               do
31446.                                  $I_L31446_901 = 0
31446.                                  do
31446.                                     $I_L31446_883 = 0
31446.                                     if ( min( n_direction, 8 + 8 * $I_L31446_928 ) + -8 * $I_L31446_928 >= 2 ) then
31446.                                        $I_L31446_989 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                        do
31446.                                           $I_L31446_851 = 0
31446.                                           if ( min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918 >= 2 ) then
31446.                                              $I_L31446_978 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                              do
31446.                                                 $I_L31446_788 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                                 do
31446.                                                    radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1)
31446.                                                    radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2)
31446.                                                    radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 2, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 2, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 2, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1)
31446.                                                    radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 2, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 2, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_978 + 2, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2)
31446.                                                    $I_L31446_788 = 1 + $I_L31446_788
31446.                                                    if ( $I_L31446_788 >= min( n_profile, 256 + 256 * $I_L31446_901 ) + -256 * $I_L31446_901 ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_978 = 1 + $I_L31446_978
31446.                                                 if ( $I_L31446_978 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918, 1 ) ) exit
31446.                                              enddo
31446.                                              $I_L31446_851 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918 )
31446.                                           endif
31446.                                           if ( $I_L31446_851 < min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918 ) then
31446.                                              $I_L31446_788 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                              do
31446.                                                 radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 1)
31446.                                                 radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, 8 * $I_L31446_928 + 2 * $I_L31446_989 + 2)
31446.                                                 $I_L31446_788 = 1 + $I_L31446_788
31446.                                                 if ( $I_L31446_788 >= min( n_profile, 256 + 256 * $I_L31446_901 ) + -256 * $I_L31446_901 ) exit
31446.                                              enddo
31446.                                           endif
31446.                                           $I_L31446_989 = 1 + $I_L31446_989
31446.                                           if ( $I_L31446_989 >= _rsh( min( n_direction, 8 + 8 * $I_L31446_928 ) + -8 * $I_L31446_928, 1 ) ) exit
31446.                                        enddo
31446.                                        $I_L31446_883 = and( 0xfffffffffffffffeUL, min( n_direction, 8 + 8 * $I_L31446_928 ) + -8 * $I_L31446_928 )
31446.                                     endif
31446.                                     if ( $I_L31446_883 < min( n_direction, 8 + 8 * $I_L31446_928 ) + -8 * $I_L31446_928 ) then
31446.                                        $I_L31446_851 = 0
31446.                                        if ( min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918 >= 2 ) then
31446.                                           $I_L31446_980 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                           do
31446.                                              $I_L31446_788 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                              do
31446.                                                 radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_980 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_980 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_980 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1)
31446.                                                 radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_980 + 2, $I_L31446_883 + 8 * $I_L31446_928 + 1) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_980 + 2, $I_L31446_883 + 8 * $I_L31446_928 + 1) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, 8 * $I_L31446_918 + 2 * $I_L31446_980 + 2, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1)
31446.                                                 $I_L31446_788 = 1 + $I_L31446_788
31446.                                                 if ( $I_L31446_788 >= min( n_profile, 256 + 256 * $I_L31446_901 ) + -256 * $I_L31446_901 ) exit
31446.                                              enddo
31446.                                              $I_L31446_980 = 1 + $I_L31446_980
31446.                                              if ( $I_L31446_980 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918, 1 ) ) exit
31446.                                           enddo
31446.                                           $I_L31446_851 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918 )
31446.                                        endif
31446.                                        if ( $I_L31446_851 < min( n_viewing_level, 8 + 8 * $I_L31446_918 ) + -8 * $I_L31446_918 ) then
31446.                                           $I_L31446_788 = 0
31446. !dir$ ivdep
31446. !dir$ blocking_size( 256, 256 )
31446.                                           do
31446.                                              radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) = radiance_mono($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) + euler_factor * azim_factor($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1) * c_ylm($I_L31446_788 + 256 * $I_L31446_901 + 1, $I_L31446_851 + 8 * $I_L31446_918 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1) * up_lm($I_L31446_788 + 256 * $I_L31446_901 + 1, ls_trunc_calc + -ms_min + -$I_L31302_942 + 1, $I_L31446_883 + 8 * $I_L31446_928 + 1)
31446.                                              $I_L31446_788 = 1 + $I_L31446_788
31446.                                              if ( $I_L31446_788 >= min( n_profile, 256 + 256 * $I_L31446_901 ) + -256 * $I_L31446_901 ) exit
31446.                                           enddo
31446.                                        endif
31446.                                     endif
31446.                                     $I_L31446_901 = 1 + $I_L31446_901
31446.                                     if ( $I_L31446_901 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
31446.                                  enddo
31446.                                  $I_L31446_918 = 1 + $I_L31446_918
31446.                                  if ( $I_L31446_918 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
31446.                               enddo
31446.                               $I_L31446_928 = 1 + $I_L31446_928
31446.                               if ( $I_L31446_928 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
31446.                            enddo
31446.                         endif
31446.                      endif
31446.                   endif
31446.                endif
31446.             else if ( i_sph_algorithm == 2 ) then
31446.                if ( n_direction > 0 ) then
31446.                   if ( n_viewing_level > 0 ) then
31446.                      if ( n_layer * n_red_eigensystem * 2 > 0 ) then
31446.                         if ( n_profile > 0 ) then
31446.                            $I_L31446_940 = 0
31446.                            do
31446.                               $I_L31446_934 = 0
31446.                               do
31446.                                  $I_L31446_930 = 0
31446.                                  do
31446.                                     $I_L31446_912 = 0
31446.                                     do
31446.                                        $I_L31446_903 = 0
31446.                                        if ( min( n_direction, 8 + 8 * $I_L31446_940 ) + -8 * $I_L31446_940 >= 2 ) then
31446.                                           $I_L31446_995 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                           do
31446.                                              $I_L31446_872 = 0
31446.                                              if ( min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934 >= 2 ) then
31446.                                                 $I_L31446_991 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                                 do
31446.                                                    $I_L31446_854 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                                    do
31446.                                                       $I_L31446_767 = 0
31446. !dir$ ivdep
31446. !dir$ loop_info (automatic) cache_nt( weight_u )
31446. !dir$ blocking_size( 256, 256 )
31446.                                                       do
31446.                                                          radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                          radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                          radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 2, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 2, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 2, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                          radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 2, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 2, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_991 + 2, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                          $I_L31446_767 = 1 + $I_L31446_767
31446.                                                          if ( $I_L31446_767 >= min( n_profile, 256 + 256 * $I_L31446_912 ) + -256 * $I_L31446_912 ) exit
31446.                                                       enddo
31446.                                                       $I_L31446_854 = 1 + $I_L31446_854
31446.                                                       if ( $I_L31446_854 >= min( ( n_layer * n_red_eigensystem * 2 ), 8 + 8 * $I_L31446_930 ) + -8 * $I_L31446_930 ) exit
31446.                                                    enddo
31446.                                                    $I_L31446_991 = 1 + $I_L31446_991
31446.                                                    if ( $I_L31446_991 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934, 1 ) ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_872 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934 )
31446.                                              endif
31446.                                              if ( $I_L31446_872 < min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934 ) then
31446.                                                 $I_L31446_854 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                                 do
31446.                                                    $I_L31446_767 = 0
31446. !dir$ ivdep
31446. !dir$ loop_info (automatic) cache_nt( weight_u )
31446. !dir$ blocking_size( 256, 256 )
31446.                                                    do
31446.                                                       radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                       radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, 8 * $I_L31446_940 + 2 * $I_L31446_995 + 2, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                       $I_L31446_767 = 1 + $I_L31446_767
31446.                                                       if ( $I_L31446_767 >= min( n_profile, 256 + 256 * $I_L31446_912 ) + -256 * $I_L31446_912 ) exit
31446.                                                    enddo
31446.                                                    $I_L31446_854 = 1 + $I_L31446_854
31446.                                                    if ( $I_L31446_854 >= min( ( n_layer * n_red_eigensystem * 2 ), 8 + 8 * $I_L31446_930 ) + -8 * $I_L31446_930 ) exit
31446.                                                 enddo
31446.                                              endif
31446.                                              $I_L31446_995 = 1 + $I_L31446_995
31446.                                              if ( $I_L31446_995 >= _rsh( min( n_direction, 8 + 8 * $I_L31446_940 ) + -8 * $I_L31446_940, 1 ) ) exit
31446.                                           enddo
31446.                                           $I_L31446_903 = and( 0xfffffffffffffffeUL, min( n_direction, 8 + 8 * $I_L31446_940 ) + -8 * $I_L31446_940 )
31446.                                        endif
31446.                                        if ( $I_L31446_903 < min( n_direction, 8 + 8 * $I_L31446_940 ) + -8 * $I_L31446_940 ) then
31446.                                           $I_L31446_872 = 0
31446.                                           if ( min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934 >= 2 ) then
31446.                                              $I_L31446_993 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                              do
31446.                                                 $I_L31446_854 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                                 do
31446.                                                    $I_L31446_767 = 0
31446. !dir$ ivdep
31446. !dir$ loop_info (automatic) cache_nt( weight_u )
31446. !dir$ blocking_size( 256, 256 )
31446.                                                    do
31446.                                                       radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_993 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_993 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_993 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                       radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_993 + 2, $I_L31446_903 + 8 * $I_L31446_940 + 1) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_993 + 2, $I_L31446_903 + 8 * $I_L31446_940 + 1) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, 8 * $I_L31446_934 + 2 * $I_L31446_993 + 2, $I_L31446_903 + 8 * $I_L31446_940 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                       $I_L31446_767 = 1 + $I_L31446_767
31446.                                                       if ( $I_L31446_767 >= min( n_profile, 256 + 256 * $I_L31446_912 ) + -256 * $I_L31446_912 ) exit
31446.                                                    enddo
31446.                                                    $I_L31446_854 = 1 + $I_L31446_854
31446.                                                    if ( $I_L31446_854 >= min( ( n_layer * n_red_eigensystem * 2 ), 8 + 8 * $I_L31446_930 ) + -8 * $I_L31446_930 ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_993 = 1 + $I_L31446_993
31446.                                                 if ( $I_L31446_993 >= _rsh( min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934, 1 ) ) exit
31446.                                              enddo
31446.                                              $I_L31446_872 = and( 0xfffffffffffffffeUL, min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934 )
31446.                                           endif
31446.                                           if ( $I_L31446_872 < min( n_viewing_level, 8 + 8 * $I_L31446_934 ) + -8 * $I_L31446_934 ) then
31446.                                              $I_L31446_854 = 0
31446. !dir$ shortloop16
31446. !dir$ blocking_size( 8, 8 )
31446.                                              do
31446.                                                 $I_L31446_767 = 0
31446. !dir$ ivdep
31446. !dir$ loop_info (automatic) cache_nt( weight_u )
31446. !dir$ blocking_size( 256, 256 )
31446.                                                 do
31446.                                                    radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) = radiance_mono($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) + azim_factor($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1) * weight_u($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_872 + 8 * $I_L31446_934 + 1, $I_L31446_903 + 8 * $I_L31446_940 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1) * upm($I_L31446_767 + 256 * $I_L31446_912 + 1, $I_L31446_854 + 8 * $I_L31446_930 + 1)
31446.                                                    $I_L31446_767 = 1 + $I_L31446_767
31446.                                                    if ( $I_L31446_767 >= min( n_profile, 256 + 256 * $I_L31446_912 ) + -256 * $I_L31446_912 ) exit
31446.                                                 enddo
31446.                                                 $I_L31446_854 = 1 + $I_L31446_854
31446.                                                 if ( $I_L31446_854 >= min( ( n_layer * n_red_eigensystem * 2 ), 8 + 8 * $I_L31446_930 ) + -8 * $I_L31446_930 ) exit
31446.                                              enddo
31446.                                           endif
31446.                                        endif
31446.                                        $I_L31446_912 = 1 + $I_L31446_912
31446.                                        if ( $I_L31446_912 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
31446.                                     enddo
31446.                                     $I_L31446_930 = 1 + $I_L31446_930
31446.                                     if ( $I_L31446_930 >= 1 + max( 0, -1 + _rsh( 7 + n_layer * n_red_eigensystem * 2, 3 ) ) ) exit
31446.                                  enddo
31446.                                  $I_L31446_934 = 1 + $I_L31446_934
31446.                                  if ( $I_L31446_934 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
31446.                               enddo
31446.                               $I_L31446_940 = 1 + $I_L31446_940
31446.                               if ( $I_L31446_940 >= 1 + max( 0, -1 + _rsh( 7 + n_direction, 3 ) ) ) exit
31446.                            enddo
31446.                         endif
31446.                      endif
31446.                   endif
31446.                endif
31446.             endif
31446.             up_lm(1, 1, 1) = _copyout( up_lm )
31446.             kappa(1, 1) = _copyout( kappa )
31462.             if ( i_truncation == 4 ) then
31467.                ls_significant = ( ms_min + $I_L31302_942 + 1 )
31468.                if ( ( ls_trunc_calc + -2 * ms_min + -2 * $I_L31302_942 ) > 0 ) then
31469.                   if ( n_viewing_level > 0 ) then
31470.                      if ( n_profile > 0 ) then
31469.                         $I_L31469_932 = 0
31469.                         do
31468.                            $I_L31468_916 = 0
31468.                            do
31470.                               $I_L31470_906 = 0
31470.                               do
31469.                                  $I_L31469_880 = 0
31469. !dir$ shortloop16
31469. !dir$ blocking_size( 8, 8 )
31469.                                  do
31468.                                     $I_L31468_857 = 0
31468. !dir$ shortloop16
31468. !dir$ blocking_size( 8, 8 )
31468.                                     do
31470.                                        $I_L31470_783 = 0
31470. !dir$ ivdep
31470. !dir$ blocking_size( 256, 256 )
31470.                                        do
31471.                                           if ( abs( c_ylm($I_L31470_783 + 256 * $I_L31470_906 + 1, $I_L31469_880 + 8 * $I_L31469_932 + 1, ms_min + $I_L31468_857 + $I_L31302_942 + 8 * $I_L31468_916 + 2) ) > accuracy_adaptive * abs( c_ylm($I_L31470_783 + 256 * $I_L31470_906 + 1, $I_L31469_880 + 8 * $I_L31469_932 + 1, 1) ) ) then
31472.                                              ls_significant = ( $I_L31468_857 + 2 * ms_min + 8 * $I_L31468_916 + 2 * $I_L31302_942 + 1 )
31472.                                           endif
31470.                                           $I_L31470_783 = 1 + $I_L31470_783
31471.                                           if ( $I_L31470_783 >= min( n_profile, 256 + 256 * $I_L31470_906 ) + -256 * $I_L31470_906 ) exit
31471.                                        enddo
31468.                                        $I_L31468_857 = 1 + $I_L31468_857
31468.                                        if ( $I_L31468_857 >= min( 8 + 8 * $I_L31468_916, ls_trunc_calc + -2 * ms_min + -2 * $I_L31302_942 ) + -8 * $I_L31468_916 ) exit
31468.                                     enddo
31469.                                     $I_L31469_880 = 1 + $I_L31469_880
31473.                                     if ( $I_L31469_880 >= min( n_viewing_level, 8 + 8 * $I_L31469_932 ) + -8 * $I_L31469_932 ) exit
31473.                                  enddo
31470.                                  $I_L31470_906 = 1 + $I_L31470_906
31470.                                  if ( $I_L31470_906 >= 1 + max( 0, -1 + _rsh( 255 + n_profile, 8 ) ) ) exit
31470.                               enddo
31468.                               $I_L31468_916 = 1 + $I_L31468_916
31474.                               if ( $I_L31468_916 >= 1 + max( 0, -1 + _rsh( ls_trunc_calc + -2 * ms_min + -2 * $I_L31302_942 + 7, 3 ) ) ) exit
31474.                            enddo
31469.                            $I_L31469_932 = 1 + $I_L31469_932
31469.                            if ( $I_L31469_932 >= 1 + max( 0, -1 + _rsh( 7 + n_viewing_level, 3 ) ) ) exit
31469.                         enddo
31469.                      endif
31469.                   endif
31469.                endif
31469.             endif
31478.             $I_L31302_942 = 1 + $I_L31302_942
31476.             if ( $I_L31302_942 >= ms_max + -ms_min + 1 ) exit
31476.          enddo
31476.          goto 20
31476.       else
31476.    20    continue
31480.          if ( i_sph_algorithm == 2 ) then
31480.             if ( isolir == 1 ) then
31484.                call single_scat_sol( n_profile, n_layer, n_direction, direction(1, 1, 1), n_viewing_level, i_rad_layer(1), frac_rad_layer(1), i_direct(1, 0), mu_0(1), tau(1, 1), omega(1, 1), phase_fnc_solar(1, 1, 1), radiance_mono(1, 1, 1), nd_profile, nd_radiance_profile, nd_layer, nd_direction, nd_viewing_level )
31484.             endif
31484.          endif
30995.          _free( t$4405 )
30995.       endif
30995.    30 continue
31498.       return
31498.       end
31498.       
31602.       
31602.       subroutine spline_evaluate( ierr, n_data, x, y, y2, x_point, y_point )
31516.       t$1257 = n_data
31540.       t$4449 = _zla( 0, n_data )
31571.       if ( n_data == 1 ) then
31573.          y_point = y(1)
31574.       else if ( x_point > x(n_data) ) then
31574.          goto 10
31574.       else if ( x_point < x(1) ) then
31574.    10    continue
31576.          ierr = 5
31576.       else
31580.          $i_low_S0 = 1
31581.          $i_high_S1 = n_data
31582.          do
31582.             if ( $i_high_S1 + -$i_low_S0 <= 1 ) goto 20
31584.             if ( x_point > x(( $i_low_S0 + $i_high_S1 ) / 2) ) then
31585.                $i_low_S0 = ( $i_low_S0 + $i_high_S1 ) / 2
31585.             else
31587.                $i_high_S1 = ( $i_low_S0 + $i_high_S1 ) / 2
31587.             endif
31588.          enddo
31588.    20    continue
31591.          $delta_S2 = x($i_high_S1) + -x($i_low_S0)
31592.          $a_S4 = ( ( x($i_high_S1) + -x_point ) * 1.0/$delta_S2 )
31593.          $b_S3 = ( ( x_point + -x($i_low_S0) ) * 1.0/$delta_S2 )
31595.          y_point = $a_S4 * ( y($i_low_S0) + ( -1.0 + $a_S4 * $a_S4 ) * y2($i_low_S0) * ( $delta_S2 * $delta_S2 * 1.6666666666666666e-1 ) ) + $b_S3 * ( y($i_high_S1) + ( -1.0 + $b_S3 * $b_S3 ) * y2($i_high_S1) * ( $delta_S2 * $delta_S2 * 1.6666666666666666e-1 ) )
31595.       endif
31602.       return
31602.       end
31602.       
31686.       
31686.       subroutine spline_fit( n_data, x, y, y2, u )
31621.       t$1260 = n_data
31641.       t$4450 = _zla( 0, n_data )
31663.       if ( n_data /= 1 ) then
31667.          y2(1) = 0.0
31668.          u(1) = 0.0
31669.          if ( -3 + n_data >= 0 ) then
31669.             $y2_WR0_R0 = 0.0
31669.             $u_WR0_R1 = 0.0
31669.             $I_L31669_12 = 0
31669. !dir$ unroll 2
31669.             do
31670.                $sigma_S1 = ( ( x(2 + $I_L31669_12) + -x(1 + $I_L31669_12) ) * 1.0/( x(3 + $I_L31669_12) + -x(1 + $I_L31669_12) ) )
31671.                $rho_S2 = 2.0 + $sigma_S1 * $y2_WR0_R0
31672.                $y2_WR0_R0 = ( ( -1.0 + $sigma_S1 ) * 1.0/( 2.0 + $sigma_S1 * $y2_WR0_R0 ) )
31672.                y2(2 + $I_L31669_12) = ( ( -1.0 + $sigma_S1 ) * 1.0/$rho_S2 )
31673.                $SCF_P0 = ( 1.0/( x(3 + $I_L31669_12) + -x(1 + $I_L31669_12) ) * ( ( ( y(3 + $I_L31669_12) + -y(2 + $I_L31669_12) ) * 1.0/( x(3 + $I_L31669_12) + -x(2 + $I_L31669_12) ) ) + -( ( y(2 + $I_L31669_12) + -y(1 + $I_L31669_12) ) * 1.0/( x(2 + $I_L31669_12) + -x(1 + $I_L31669_12) ) ) ) * 6.0 )
31673.                $u_WR0_R1 = ( ( -( $sigma_S1 * $u_WR0_R1 ) + $SCF_P0 ) * 1.0/$rho_S2 )
31673.                u(2 + $I_L31669_12) = $u_WR0_R1
31675.                $I_L31669_12 = 1 + $I_L31669_12
31669.                if ( $I_L31669_12 >= -2 + n_data ) exit
31669.             enddo
31669.          endif
31676.          y2(n_data) = 0.0
31679.          if ( 1 + -n_data < 0 ) then
31679.             $y2_WR0_R2 = 0.0
31679.             $I_L31679_14 = 0
31679. !dir$ unroll 4
31679.             do
31680.                $y2_WR0_R2 = y2(n_data + -$I_L31679_14 + -1) * $y2_WR0_R2 + u(n_data + -$I_L31679_14 + -1)
31680.                y2(n_data + -$I_L31679_14 + -1) = $y2_WR0_R2
31681.                $I_L31679_14 = 1 + $I_L31679_14
31679.                if ( $I_L31679_14 >= -1 + n_data ) exit
31679.             enddo
31679.          endif
31679.       endif
31686.       return
31686.       end
31686.       
31925.       
31925.       subroutine trans_source_coeff( n_profile, i_layer_first, i_layer_last, isolir, l_ir_source_quad, tau, sum, diff, lambda, sec_00, gamma_up, gamma_down, trans, reflect, trans_0, source_coeff, nd_profile, id_op_lt, id_op_lb, id_trs_lt, id_trs_lb, nd_source_coeff )
31704.       t$1264 = nd_profile
31704.       t$1265 = id_op_lt
31704.       t$1266 = id_op_lb
31760.       t$4451 = _zla( 0, nd_profile )
31704.       t$4452 = _zla( 0, nd_profile )
31704.       t$4453 = id_op_lb + -id_op_lt + 1
31760.       t$4454 = _zla( 0, id_op_lb + -id_op_lt + 1 )
31704.       t$4455 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 )
31704.       t$1267 = id_trs_lt
31704.       t$1268 = id_trs_lb
31704.       t$4456 = id_trs_lb + -id_trs_lt + 1
31778.       t$4457 = _zla( 0, id_trs_lb + -id_trs_lt + 1 )
31704.       t$4458 = _zla( 0, nd_profile ) * _zla( 0, id_trs_lb + -id_trs_lt + 1 )
31704.       t$1269 = nd_source_coeff
31704.       t$4459 = _zla( 0, nd_profile ) * _zla( 0, id_trs_lb + -id_trs_lt + 1 )
31784.       t$4460 = _zla( 0, nd_source_coeff )
31704.       t$4461 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * _zla( 0, id_trs_lb + -id_trs_lt + 1 )
31823.       if ( id_trs_lb + -id_trs_lt >= 0 ) then
31824.          if ( nd_profile > 0 ) then
31823.             $I_L31823_56 = 0
31823.             do
31824.                $I_L31824_48 = 0
31824. !dir$ ivdep
31824.                do
31826.                   $exponential_S3 = max( 2.2204460492503131e-16, _expn( -( lambda(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) * tau(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) ) ) )
31827.                   $gamma_S2 = ( ( sum(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) + -lambda(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) ) * 1.0/( sum(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) + lambda(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) ) )
31831.                   trans(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) = $exponential_S3 * ( 1.0 + -( $gamma_S2 * $gamma_S2 ) ) * 1.0/( 1.0 + -( ( $exponential_S3 * $gamma_S2 ) * ( $exponential_S3 * $gamma_S2 ) ) )
31833.                   reflect(1 + $I_L31824_48, id_trs_lt + $I_L31823_56) = $gamma_S2 * ( 1.0 + -( $exponential_S3 * $exponential_S3 ) ) * 1.0/( 1.0 + -( ( $exponential_S3 * $gamma_S2 ) * ( $exponential_S3 * $gamma_S2 ) ) )
31835.                   $I_L31824_48 = 1 + $I_L31824_48
31824.                   if ( $I_L31824_48 >= nd_profile ) exit
31824.                enddo
31836.                $I_L31823_56 = 1 + $I_L31823_56
31835.                if ( $I_L31823_56 >= id_trs_lb + -id_trs_lt + 1 ) exit
31835.             enddo
31835.          endif
31835.       endif
31840.       if ( isolir == 1 ) then
31848.          if ( id_trs_lb + -id_trs_lt >= 0 ) then
31849.             if ( nd_profile > 0 ) then
31848.                $I_L31848_60 = 0
31848.                do
31849.                   $I_L31849_52 = 0
31849. !dir$ ivdep
31849.                   do
31850.                      $trans_0_WR0_R0 = _expn( -( tau(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) * sec_00(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) ) )
31850.                      trans_0(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) = $trans_0_WR0_R0
31851.                      source_coeff(1 + $I_L31849_52, id_trs_lt + $I_L31848_60, 1) = ( gamma_up(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) + -( reflect(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) * ( 1.0 + gamma_down(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) ) ) ) + -( gamma_up(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) * trans(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) * $trans_0_WR0_R0 )
31855.                      source_coeff(1 + $I_L31849_52, id_trs_lt + $I_L31848_60, 2) = $trans_0_WR0_R0 * ( -( gamma_up(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) * reflect(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) ) + gamma_down(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) + 1.0 ) + -( ( 1.0 + gamma_down(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) ) * trans(1 + $I_L31849_52, id_trs_lt + $I_L31848_60) )
31859.                      $I_L31849_52 = 1 + $I_L31849_52
31849.                      if ( $I_L31849_52 >= nd_profile ) exit
31849.                   enddo
31860.                   $I_L31848_60 = 1 + $I_L31848_60
31859.                   if ( $I_L31848_60 >= id_trs_lb + -id_trs_lt + 1 ) exit
31859.                enddo
31859.             endif
31859.          endif
31863.       else if ( isolir == 2 ) then
31870.          if ( id_trs_lb + -id_trs_lt >= 0 ) then
31871.             if ( nd_profile > 0 ) then
31870.                $I_L31870_58 = 0
31870.                do
31871.                   $I_L31871_50 = 0
31871. !dir$ ivdep
31871.                   do
31882.                      source_coeff(1 + $I_L31871_50, id_trs_lt + $I_L31870_58, 1) = ( ( ( reflect(1 + $I_L31871_50, id_trs_lt + $I_L31870_58) + -trans(1 + $I_L31871_50, id_trs_lt + $I_L31870_58) + 1.0 ) + ( 2.2204460492503131e-16 * 1.0/( 1.4901161193847656e-8 + tau(1 + $I_L31871_50, id_trs_lt + $I_L31870_58) ) ) ) * 1.0/( ( 2.2204460492503131e-16 * 1.0/( 1.4901161193847656e-8 + tau(1 + $I_L31871_50, id_trs_lt + $I_L31870_58) ) ) + tau(1 + $I_L31871_50, id_trs_lt + $I_L31870_58) * sum(1 + $I_L31871_50, id_trs_lt + $I_L31870_58) ) )
31889.                      $I_L31871_50 = 1 + $I_L31871_50
31871.                      if ( $I_L31871_50 >= nd_profile ) exit
31871.                   enddo
31890.                   $I_L31870_58 = 1 + $I_L31870_58
31889.                   if ( $I_L31870_58 >= id_trs_lb + -id_trs_lt + 1 ) exit
31889.                enddo
31889.             endif
31889.          endif
31893.          if ( l_ir_source_quad ) then
31899.             if ( id_trs_lb + -id_trs_lt >= 0 ) then
31900.                if ( nd_profile > 0 ) then
31899.                   $I_L31899_62 = 0
31899.                   do
31900.                      $I_L31900_54 = 0
31900. !dir$ ivdep
31900.                      do
31901.                         if ( tau(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) > 6.828499381469513e-6 ) then
31902.                            source_coeff(1 + $I_L31900_54, id_trs_lt + $I_L31899_62, 2) = -( 1.0/( 1.4901161193847656e-8 + diff(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) * tau(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) ) * ( -reflect(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) + -trans(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) + 1.0000000149011612 ) * 2.0 )
31902.                         else
31908.                            source_coeff(1 + $I_L31900_54, id_trs_lt + $I_L31899_62, 2) = -2.0 + diff(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) * tau(1 + $I_L31900_54, id_trs_lt + $I_L31899_62)
31908.                         endif
31911.                         source_coeff(1 + $I_L31900_54, id_trs_lt + $I_L31899_62, 2) = -( ( trans(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) + reflect(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) + source_coeff(1 + $I_L31900_54, id_trs_lt + $I_L31899_62, 2) + 1.0 ) * 1.0/( 1.4901161193847656e-8 + sum(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) * tau(1 + $I_L31900_54, id_trs_lt + $I_L31899_62) ) )
31915.                         $I_L31900_54 = 1 + $I_L31900_54
31910.                         if ( $I_L31900_54 >= nd_profile ) exit
31910.                      enddo
31916.                      $I_L31899_62 = 1 + $I_L31899_62
31915.                      if ( $I_L31899_62 >= id_trs_lb + -id_trs_lt + 1 ) exit
31915.                   enddo
31915.                endif
31915.             endif
31915.          endif
31915.       endif
31925.       return
31925.       end
31925.       
32474.       
32474.       subroutine triple_column( ierr, n_profile, n_layer, i_2stream, i_solver, i_scatter_method, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, flux_inc_down, flux_inc_direct, sec_00, diffuse_albedo, direct_albedo, d_planck_flux_surface, ss_prop, n_cloud_top, n_cloud_type, frac_cloud, n_region, i_region_cloud, frac_region, w_free, w_cloud, cloud_overlap, flux_direct, flux_total, l_clear, i_solver_clear, flux_direct_clear, flux_total_clear, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type, nd_region, nd_overlap_coeff )
31947.       t$1279 = nd_profile
31947.       t$1281 = nd_layer
32092.       t$4462 = _zla( 0, nd_profile )
31947.       t$4463 = _zla( 0, nd_profile )
32092.       t$4464 = _zla( 0, nd_layer )
31947.       t$4465 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
 2600.       if ( t$30 == 0 ) then
 2600.          t$4471(1) = 4
 2600.          t$4472(1) = 0
 2600.          t$4473(1) = 16
 2600.          t$4468(1) = int( loc( t$29 ), 8 )
 2600.          t$4469(1) = 0
 2600.          t$4470(1) = int( loc( t$4466 ), 8 )
 2600.          t$30 = __get_dynamic_type( 3, t$4468(1), t$4471(1), 1, t$4469(1), t$4470(1), t$4472(1), t$4473(1) )
 2600.       endif
31947.       t$1280 = id_ct
31947.       t$1278 = nd_cloud_type
31947.       t$4475 = nd_layer + -id_ct + 1
32069.       t$4476 = max( 0, nd_layer + -id_ct + 1 )
31947.       t$4477 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
32069.       t$4478 = max( 0, nd_cloud_type )
31947.       t$4479 = _zla( 0, nd_profile ) * max( 0, nd_cloud_type ) * max( 0, nd_layer + -id_ct + 1 )
31947.       t$1284 = nd_region
32074.       t$4480 = max( 0, nd_region )
31947.       t$4481 = _zla( 0, nd_profile ) * max( 0, nd_region ) * max( 0, nd_layer + -id_ct + 1 )
31947.       t$4482 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 1 )
31947.       t$1282 = ( -1 + id_ct )
31947.       t$1283 = nd_overlap_coeff
31947.       t$4483 = nd_layer + -id_ct + 2
32071.       t$4484 = max( 0, nd_layer + -id_ct + 2 )
31947.       t$4485 = _zla( 0, nd_profile ) * max( 0, nd_layer + -id_ct + 2 )
32071.       t$4486 = max( 0, nd_overlap_coeff )
31947.       t$4487 = _zla( 0, nd_profile ) * max( 0, nd_overlap_coeff ) * max( 0, nd_layer + -id_ct + 2 )
31947.       t$4488 = 1 + nd_layer
32099.       t$4489 = max( 0, 1 + nd_layer )
31947.       t$4490 = _zla( 0, nd_profile ) * max( 0, 1 + nd_layer )
31947.       t$1285 = ( 2 + 2 * nd_layer )
32101.       t$4491 = max( 0, ( 2 + 2 * nd_layer ) )
31947.       t$4492 = _zla( 0, nd_profile ) * max( 0, ( 2 + 2 * nd_layer ) )
31947.       t$4493 = _zla( 0, nd_profile ) * max( 0, nd_region )
32148.       t$4496 = _zla( 0, nd_profile ) * max( 0, nd_region ) * 8
31947.       t$4497 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
31947.       t$4498 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region )
32128.       t$4499 = 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 )
32128.       t$4501 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 )
31947.       t$1286 = nd_source_coeff
32132.       t$4502 = max( 0, nd_source_coeff )
31947.       t$4503 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_source_coeff )
31947.       t$4504 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff )
32132.       t$4505 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 )
32132.       t$4507 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 )
32146.       t$4508 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32146.       t$4510 = _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32135.       t$4511 = 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32135.       t$4513 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32139.       t$4514 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32139.       t$4516 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32137.       t$4517 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32137.       t$4519 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32141.       t$4520 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32141.       t$4522 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32126.       t$4523 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32126.       t$4525 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32130.       t$4526 = 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32130.       t$4528 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
31947.       t$4494 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
32148.       t$4495 = t$4494
32128.       t$4500 = t$4494 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 )
32132.       t$4506 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 )
32146.       t$4509 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32135.       t$4512 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32139.       t$4515 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32137.       t$4518 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32141.       t$4521 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32126.       t$4524 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32130.       t$4527 = t$4494 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * max( 0, nd_source_coeff ) * 8 + 8 * ( ( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * max( 0, nd_region ) * 8 + 8 * ( ( 7 + _zla( 0, nd_profile ) * max( 0, nd_region ) * 8 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
32167.       n_source_coeff = set_n_source_coeff( isolir, l_ir_source_quad )
32170.       if ( i_scatter_method == 1 ) then
32176.          t$9901 = 0
32176.          t$9902 = 0
32176.          t$9903 = 0
32176.          t$9908 = 0
32176.          if ( ss_prop%phase_fnc_clr%header%a_contig == 1 ) then
32176. !dir$ suppress (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0)
32176.             t$9900 = loc( (ss_prop%phase_fnc_clr%base_addr)(ss_prop%phase_fnc_clr%dim_1%LB, ss_prop%phase_fnc_clr%dim_2%LB, ss_prop%phase_fnc_clr%dim_3%LB, 0) )
32176.          else
32176.             t$9901 = ss_prop%phase_fnc_clr%dim_1%EX
32176.             t$9902 = ss_prop%phase_fnc_clr%dim_2%EX
32176.             t$9903 = ss_prop%phase_fnc_clr%dim_3%EX
32176.             t$9908 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc_clr%dim_2%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_1%EX ) * max( 0, ss_prop%phase_fnc_clr%dim_3%EX ) * 8 ) ), 8 )
32171.             call _f90_copy_from_dv( t$9907, ss_prop%phase_fnc_clr )
32176. !dir$ suppress t$9907
32176.             t$9900 = loc( t$9907 )
32176.          endif
32176.          t$9910 = 0
32176.          t$9911 = 0
32176.          t$9915 = 0
32176.          if ( ss_prop%omega_clr%header%a_contig == 1 ) then
32176. !dir$ suppress (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0)
32176.             t$9909 = loc( (ss_prop%omega_clr%base_addr)(ss_prop%omega_clr%dim_1%LB, ss_prop%omega_clr%dim_2%LB, 0) )
32176.          else
32176.             t$9910 = ss_prop%omega_clr%dim_1%EX
32176.             t$9911 = ss_prop%omega_clr%dim_2%EX
32176.             t$9915 = int( _alloc( max( 0, max( 0, ss_prop%omega_clr%dim_2%EX ) * max( 0, ss_prop%omega_clr%dim_1%EX ) * 8 ) ), 8 )
32171.             call _f90_copy_from_dv( t$9914, ss_prop%omega_clr )
32176. !dir$ suppress t$9914
32176.             t$9909 = loc( t$9914 )
32176.          endif
32176.          t$9917 = 0
32176.          t$9918 = 0
32176.          t$9922 = 0
32176.          if ( ss_prop%tau_clr%header%a_contig == 1 ) then
32176. !dir$ suppress (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0)
32176.             t$9916 = loc( (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0) )
32176.          else
32176.             t$9917 = ss_prop%tau_clr%dim_1%EX
32176.             t$9918 = ss_prop%tau_clr%dim_2%EX
32176.             t$9922 = int( _alloc( max( 0, max( 0, ss_prop%tau_clr%dim_2%EX ) * max( 0, ss_prop%tau_clr%dim_1%EX ) * 8 ) ), 8 )
32171.             call _f90_copy_from_dv( t$9921, ss_prop%tau_clr )
32176. !dir$ suppress t$9921
32176.             t$9916 = loc( t$9921 )
32176.          endif
32177.          t$9924 = 0
32177.          t$9925 = 0
32177.          t$9926 = 0
32177.          t$9927 = 0
32177.          t$9933 = 0
32177.          if ( ss_prop%phase_fnc%header%a_contig == 1 ) then
32177. !dir$ suppress (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0)
32177.             t$9923 = loc( (ss_prop%phase_fnc%base_addr)(ss_prop%phase_fnc%dim_1%LB, ss_prop%phase_fnc%dim_2%LB, ss_prop%phase_fnc%dim_3%LB, ss_prop%phase_fnc%dim_4%LB, 0) )
32177.          else
32177.             t$9924 = ss_prop%phase_fnc%dim_1%EX
32177.             t$9925 = ss_prop%phase_fnc%dim_2%EX
32177.             t$9926 = ss_prop%phase_fnc%dim_3%EX
32177.             t$9927 = ss_prop%phase_fnc%dim_4%EX
32177.             t$9933 = int( _alloc( max( 0, max( 0, ss_prop%phase_fnc%dim_2%EX ) * max( 0, ss_prop%phase_fnc%dim_1%EX ) * max( 0, ss_prop%phase_fnc%dim_3%EX ) * max( 0, ss_prop%phase_fnc%dim_4%EX ) * 8 ) ), 8 )
32171.             call _f90_copy_from_dv( t$9932, ss_prop%phase_fnc )
32177. !dir$ suppress t$9932
32177.             t$9923 = loc( t$9932 )
32177.          endif
32177.          t$9935 = 0
32177.          t$9936 = 0
32177.          t$9937 = 0
32177.          t$9942 = 0
32177.          if ( ss_prop%omega%header%a_contig == 1 ) then
32177. !dir$ suppress (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0)
32177.             t$9934 = loc( (ss_prop%omega%base_addr)(ss_prop%omega%dim_1%LB, ss_prop%omega%dim_2%LB, ss_prop%omega%dim_3%LB, 0) )
32177.          else
32177.             t$9935 = ss_prop%omega%dim_1%EX
32177.             t$9936 = ss_prop%omega%dim_2%EX
32177.             t$9937 = ss_prop%omega%dim_3%EX
32177.             t$9942 = int( _alloc( max( 0, max( 0, ss_prop%omega%dim_2%EX ) * max( 0, ss_prop%omega%dim_1%EX ) * max( 0, ss_prop%omega%dim_3%EX ) * 8 ) ), 8 )
32171.             call _f90_copy_from_dv( t$9941, ss_prop%omega )
32177. !dir$ suppress t$9941
32177.             t$9934 = loc( t$9941 )
32177.          endif
32177.          t$9944 = 0
32177.          t$9945 = 0
32177.          t$9946 = 0
32177.          t$9951 = 0
32177.          if ( ss_prop%tau%header%a_contig == 1 ) then
32177. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0)
32177.             t$9943 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0) )
32177.          else
32177.             t$9944 = ss_prop%tau%dim_1%EX
32177.             t$9945 = ss_prop%tau%dim_2%EX
32177.             t$9946 = ss_prop%tau%dim_3%EX
32177.             t$9951 = int( _alloc( max( 0, max( 0, ss_prop%tau%dim_2%EX ) * max( 0, ss_prop%tau%dim_1%EX ) * max( 0, ss_prop%tau%dim_3%EX ) * 8 ) ), 8 )
32171.             call _f90_copy_from_dv( t$9950, ss_prop%tau )
32177. !dir$ suppress t$9950
32177.             t$9943 = loc( t$9950 )
32177.          endif
32171.          call two_coeff_region( ierr, n_profile, n_layer, n_cloud_top, i_2stream, l_ir_source_quad, n_source_coeff, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, i_region_cloud(1), frac_region(1, id_ct, 1), t$9900, t$9909, t$9916, t$9923, t$9934, t$9943, isolir, sec_00(1, 1), trans(1, 1, 1), reflect(1, 1, 1), trans_0(1, 1, 1), source_coeff(1, 1, 1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type, nd_region )
32177.          if ( ss_prop%tau%header%a_contig /= 1 ) then
32177.             _free( t$9951 )
32177.          endif
32177.          if ( ss_prop%omega%header%a_contig /= 1 ) then
32177.             _free( t$9942 )
32177.          endif
32177.          if ( ss_prop%phase_fnc%header%a_contig /= 1 ) then
32177.             _free( t$9933 )
32177.          endif
32176.          if ( ss_prop%tau_clr%header%a_contig /= 1 ) then
32176.             _free( t$9922 )
32176.          endif
32176.          if ( ss_prop%omega_clr%header%a_contig /= 1 ) then
32176.             _free( t$9915 )
32176.          endif
32176.          if ( ss_prop%phase_fnc_clr%header%a_contig /= 1 ) then
32176.             _free( t$9908 )
32176.          endif
32184.       else if ( i_scatter_method == 2 ) then
32190.          t$9953 = 0
32190.          t$9954 = 0
32190.          t$9958 = 0
32190.          if ( ss_prop%tau_clr%header%a_contig == 1 ) then
32190. !dir$ suppress (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0)
32190.             t$9952 = loc( (ss_prop%tau_clr%base_addr)(ss_prop%tau_clr%dim_1%LB, ss_prop%tau_clr%dim_2%LB, 0) )
32190.          else
32190.             t$9953 = ss_prop%tau_clr%dim_1%EX
32190.             t$9954 = ss_prop%tau_clr%dim_2%EX
32190.             t$9958 = int( _alloc( max( 0, max( 0, ss_prop%tau_clr%dim_2%EX ) * max( 0, ss_prop%tau_clr%dim_1%EX ) * 8 ) ), 8 )
32185.             call _f90_copy_from_dv( t$9957, ss_prop%tau_clr )
32190. !dir$ suppress t$9957
32190.             t$9952 = loc( t$9957 )
32190.          endif
32190.          t$9960 = 0
32190.          t$9961 = 0
32190.          t$9962 = 0
32190.          t$9967 = 0
32190.          if ( ss_prop%tau%header%a_contig == 1 ) then
32190. !dir$ suppress (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0)
32190.             t$9959 = loc( (ss_prop%tau%base_addr)(ss_prop%tau%dim_1%LB, ss_prop%tau%dim_2%LB, ss_prop%tau%dim_3%LB, 0) )
32190.          else
32190.             t$9960 = ss_prop%tau%dim_1%EX
32190.             t$9961 = ss_prop%tau%dim_2%EX
32190.             t$9962 = ss_prop%tau%dim_3%EX
32190.             t$9967 = int( _alloc( max( 0, max( 0, ss_prop%tau%dim_2%EX ) * max( 0, ss_prop%tau%dim_1%EX ) * max( 0, ss_prop%tau%dim_3%EX ) * 8 ) ), 8 )
32185.             call _f90_copy_from_dv( t$9966, ss_prop%tau )
32190. !dir$ suppress t$9966
32190.             t$9959 = loc( t$9966 )
32190.          endif
32185.          call two_coeff_region_fast_lw( ierr, n_profile, n_layer, n_cloud_top, l_ir_source_quad, n_source_coeff, n_cloud_type, frac_cloud(1, id_ct, 1), n_region, i_region_cloud(1), frac_region(1, id_ct, 1), t$9952, t$9959, isolir, trans(1, 1, 1), reflect(1, 1, 1), source_coeff(1, 1, 1, 1), nd_profile, nd_layer, nd_layer_clr, id_ct, nd_source_coeff, nd_cloud_type, nd_region )
32190.          if ( ss_prop%tau%header%a_contig /= 1 ) then
32190.             _free( t$9967 )
32190.          endif
32190.          if ( ss_prop%tau_clr%header%a_contig /= 1 ) then
32190.             _free( t$9958 )
32190.          endif
32190.       endif
32197.       if ( ierr /= 0 ) then
31947.          _free( t$4494 )
31947.       else
32200.          if ( isolir == 2 ) then
32202.             if ( n_region > 0 ) then
32209.                if ( l_ir_source_quad ) then
32209.                   if ( nd_layer <= 0 ) then
32202.                      $I_L32202_126 = 0
32202. !dir$ ivdep
32202.                      do
32209.                         t$732 = nd_profile
32209.                         t$733 = nd_layer
32209.                         t$734 = nd_source_coeff
32209.                         t$2570 = max( 0, nd_profile )
32209.                         t$2571 = nd_profile
32209.                         t$2572 = max( 0, nd_layer )
32209.                         t$2573 = nd_layer * nd_profile
32209.                         t$2574 = max( 0, nd_source_coeff )
32209.                         t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
32209.                         t$2576 = ( nd_profile * nd_layer )
32215.                         $I_L32202_126 = 1 + $I_L32202_126
32209.                         if ( $I_L32202_126 >= n_region ) exit
32209.                      enddo
32209.                   else if ( nd_profile > 0 ) then
32209.                      t$732 = nd_profile
32209.                      t$733 = nd_layer
32209.                      t$734 = nd_source_coeff
32209.                      t$2570 = max( 0, nd_profile )
32209.                      t$2571 = nd_profile
32209.                      t$2572 = max( 0, nd_layer )
32209.                      t$2573 = nd_layer * nd_profile
32209.                      t$2574 = max( 0, nd_source_coeff )
32209.                      t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
32209.                      t$2576 = ( nd_profile * nd_layer )
32202.                      $I_L32202_164 = 0
32202.                      do
32209.                         $I_L32209_160 = 0
32209.                         do
32209.                            $I_L32209_156 = 0
32209.                            do
32202.                               $I_L32202_150 = 0
32202. !dir$ shortloop16
32202. !dir$ blocking_size( 8, 8 )
32202.                               do
32209.                                  $I_L32209_144 = 0
32209. !dir$ shortloop16
32209. !dir$ blocking_size( 8, 8 )
32209.                                  do
32209.                                     $I_L32209_134 = 0
32209. !dir$ ivdep
32209. !dir$ loop_info (automatic) cache_nt( source_coeff )
32209. !dir$ blocking_size( 256, 256 )
32209.                                     do
32209.                                        s_up($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1, $I_L32202_150 + 8 * $I_L32202_164 + 1) = source_coeff($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1, 1, $I_L32202_150 + 8 * $I_L32202_164 + 1) * diff_planck($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1) + source_coeff($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1, 2, $I_L32202_150 + 8 * $I_L32202_164 + 1) * diff_planck_2($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1)
32209.                                        s_down($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1, $I_L32202_150 + 8 * $I_L32202_164 + 1) = -( source_coeff($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1, 1, $I_L32202_150 + 8 * $I_L32202_164 + 1) * diff_planck($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1) ) + source_coeff($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1, 2, $I_L32202_150 + 8 * $I_L32202_164 + 1) * diff_planck_2($I_L32209_134 + 256 * $I_L32209_156 + 1, $I_L32209_144 + 8 * $I_L32209_160 + 1)
32209.                                        $I_L32209_134 = 1 + $I_L32209_134
32209.                                        if ( $I_L32209_134 >= min( nd_profile, 256 + 256 * $I_L32209_156 ) + -256 * $I_L32209_156 ) exit
32209.                                     enddo
32209.                                     $I_L32209_144 = 1 + $I_L32209_144
32209.                                     if ( $I_L32209_144 >= min( nd_layer, 8 + 8 * $I_L32209_160 ) + -8 * $I_L32209_160 ) exit
32209.                                  enddo
32202.                                  $I_L32202_150 = 1 + $I_L32202_150
32209.                                  if ( $I_L32202_150 >= min( n_region, 8 + 8 * $I_L32202_164 ) + -8 * $I_L32202_164 ) exit
32209.                               enddo
32209.                               $I_L32209_156 = 1 + $I_L32209_156
32209.                               if ( $I_L32209_156 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
32209.                            enddo
32209.                            $I_L32209_160 = 1 + $I_L32209_160
32209.                            if ( $I_L32209_160 >= 1 + max( 0, -1 + _rsh( 7 + nd_layer, 3 ) ) ) exit
32209.                         enddo
32202.                         $I_L32202_164 = 1 + $I_L32202_164
32202.                         if ( $I_L32202_164 >= 1 + max( 0, -1 + _rsh( 7 + n_region, 3 ) ) ) exit
32202.                      enddo
32202.                   else
32202.                      $I_L32202_130 = 0
32202. !dir$ ivdep
32202.                      do
32209.                         t$732 = nd_profile
32209.                         t$733 = nd_layer
32209.                         t$734 = nd_source_coeff
32209.                         t$2570 = max( 0, nd_profile )
32209.                         t$2571 = nd_profile
32209.                         t$2572 = max( 0, nd_layer )
32209.                         t$2573 = nd_layer * nd_profile
32209.                         t$2574 = max( 0, nd_source_coeff )
32209.                         t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
32209.                         t$2576 = ( nd_profile * nd_layer )
32215.                         $I_L32202_130 = 1 + $I_L32202_130
32209.                         if ( $I_L32202_130 >= n_region ) exit
32209.                      enddo
32209.                   endif
32209.                else if ( nd_layer <= 0 ) then
32202.                   $I_L32202_128 = 0
32202. !dir$ ivdep
32202.                   do
32209.                      t$732 = nd_profile
32209.                      t$733 = nd_layer
32209.                      t$734 = nd_source_coeff
32209.                      t$2570 = max( 0, nd_profile )
32209.                      t$2571 = nd_profile
32209.                      t$2572 = max( 0, nd_layer )
32209.                      t$2573 = nd_layer * nd_profile
32209.                      t$2574 = max( 0, nd_source_coeff )
32209.                      t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
32209.                      t$2576 = ( nd_profile * nd_layer )
32215.                      $I_L32202_128 = 1 + $I_L32202_128
32209.                      if ( $I_L32202_128 >= n_region ) exit
32209.                   enddo
32209.                else if ( nd_profile > 0 ) then
32209.                   t$732 = nd_profile
32209.                   t$733 = nd_layer
32209.                   t$734 = nd_source_coeff
32209.                   t$2570 = max( 0, nd_profile )
32209.                   t$2571 = nd_profile
32209.                   t$2572 = max( 0, nd_layer )
32209.                   t$2573 = nd_layer * nd_profile
32209.                   t$2574 = max( 0, nd_source_coeff )
32209.                   t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
32209.                   t$2576 = ( nd_profile * nd_layer )
32202.                   $I_L32202_166 = 0
32202.                   do
32209.                      $I_L32209_162 = 0
32209.                      do
32209.                         $I_L32209_158 = 0
32209.                         do
32202.                            $I_L32202_153 = 0
32202.                            if ( min( n_region, 8 + 8 * $I_L32202_166 ) + -8 * $I_L32202_166 >= 4 ) then
32202.                               $I_L32202_171 = 0
32202. !dir$ shortloop16
32202. !dir$ blocking_size( 8, 8 )
32202.                               do
32209.                                  $I_L32209_147 = 0
32209. !dir$ shortloop16
32209. !dir$ blocking_size( 8, 8 )
32209.                                  do
32209.                                     $I_L32209_137 = 0
32209. !dir$ ivdep
32209. !dir$ blocking_size( 256, 256 )
32209.                                     do
32209.                                        $s_up_WR0_R0 = source_coeff($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 1) * diff_planck($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1)
32209.                                        s_up($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 1) = $s_up_WR0_R0
32209.                                        s_down($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 1) = -$s_up_WR0_R0
32209.                                        $s_up_WR0_R0 = source_coeff($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 2) * diff_planck($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1)
32209.                                        s_up($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 2) = $s_up_WR0_R0
32209.                                        s_down($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 2) = -$s_up_WR0_R0
32209.                                        $s_up_WR0_R0 = source_coeff($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 3) * diff_planck($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1)
32209.                                        s_up($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 3) = $s_up_WR0_R0
32209.                                        s_down($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 3) = -$s_up_WR0_R0
32209.                                        $s_up_WR0_R0 = source_coeff($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 4) * diff_planck($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1)
32209.                                        s_up($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 4) = $s_up_WR0_R0
32209.                                        s_down($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 8 * $I_L32202_166 + 4 * $I_L32202_171 + 4) = -$s_up_WR0_R0
32209.                                        $I_L32209_137 = 1 + $I_L32209_137
32209.                                        if ( $I_L32209_137 >= min( nd_profile, 256 + 256 * $I_L32209_158 ) + -256 * $I_L32209_158 ) exit
32209.                                     enddo
32209.                                     $I_L32209_147 = 1 + $I_L32209_147
32209.                                     if ( $I_L32209_147 >= min( nd_layer, 8 + 8 * $I_L32209_162 ) + -8 * $I_L32209_162 ) exit
32209.                                  enddo
32202.                                  $I_L32202_171 = 1 + $I_L32202_171
32209.                                  if ( $I_L32202_171 >= _rsh( min( n_region, 8 + 8 * $I_L32202_166 ) + -8 * $I_L32202_166, 2 ) ) exit
32209.                               enddo
32202.                               $I_L32202_153 = and( 0xfffffffffffffffcUL, min( n_region, 8 + 8 * $I_L32202_166 ) + -8 * $I_L32202_166 )
32202.                            endif
32202.                            if ( $I_L32202_153 < min( n_region, 8 + 8 * $I_L32202_166 ) + -8 * $I_L32202_166 ) then
32202.                               $I_L32202_168 = 0
32202. !dir$ shortloop16
32202. !dir$ blocking_size( 8, 8 )
32202.                               do
32209.                                  $I_L32209_147 = 0
32209. !dir$ shortloop16
32209. !dir$ blocking_size( 8, 8 )
32209.                                  do
32209.                                     $I_L32209_137 = 0
32209. !dir$ ivdep
32209. !dir$ blocking_size( 256, 256 )
32209.                                     do
32209.                                        $s_up_WR0_R0 = source_coeff($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, 1, $I_L32202_153 + $I_L32202_168 + 8 * $I_L32202_166 + 1) * diff_planck($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1)
32209.                                        s_up($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, $I_L32202_153 + $I_L32202_168 + 8 * $I_L32202_166 + 1) = $s_up_WR0_R0
32209.                                        s_down($I_L32209_137 + 256 * $I_L32209_158 + 1, $I_L32209_147 + 8 * $I_L32209_162 + 1, $I_L32202_153 + $I_L32202_168 + 8 * $I_L32202_166 + 1) = -$s_up_WR0_R0
32209.                                        $I_L32209_137 = 1 + $I_L32209_137
32209.                                        if ( $I_L32209_137 >= min( nd_profile, 256 + 256 * $I_L32209_158 ) + -256 * $I_L32209_158 ) exit
32209.                                     enddo
32209.                                     $I_L32209_147 = 1 + $I_L32209_147
32209.                                     if ( $I_L32209_147 >= min( nd_layer, 8 + 8 * $I_L32209_162 ) + -8 * $I_L32209_162 ) exit
32209.                                  enddo
32202.                                  $I_L32202_168 = 1 + $I_L32202_168
32209.                                  if ( $I_L32202_168 >= min( n_region, 8 + 8 * $I_L32202_166 ) + -$I_L32202_153 + -8 * $I_L32202_166 ) exit
32209.                               enddo
32209.                            endif
32209.                            $I_L32209_158 = 1 + $I_L32209_158
32209.                            if ( $I_L32209_158 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
32209.                         enddo
32209.                         $I_L32209_162 = 1 + $I_L32209_162
32209.                         if ( $I_L32209_162 >= 1 + max( 0, -1 + _rsh( 7 + nd_layer, 3 ) ) ) exit
32209.                      enddo
32202.                      $I_L32202_166 = 1 + $I_L32202_166
32202.                      if ( $I_L32202_166 >= 1 + max( 0, -1 + _rsh( 7 + n_region, 3 ) ) ) exit
32202.                   enddo
32202.                else
32202.                   $I_L32202_132 = 0
32202. !dir$ ivdep
32202.                   do
32209.                      t$732 = nd_profile
32209.                      t$733 = nd_layer
32209.                      t$734 = nd_source_coeff
32209.                      t$2570 = max( 0, nd_profile )
32209.                      t$2571 = nd_profile
32209.                      t$2572 = max( 0, nd_layer )
32209.                      t$2573 = nd_layer * nd_profile
32209.                      t$2574 = max( 0, nd_source_coeff )
32209.                      t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
32209.                      t$2576 = ( nd_profile * nd_layer )
32215.                      $I_L32202_132 = 1 + $I_L32202_132
32209.                      if ( $I_L32202_132 >= n_region ) exit
32209.                   enddo
32209.                endif
32209.             endif
32221.             if ( l_clear ) then
32223.                if ( nd_layer > 0 ) then
32224.                   if ( nd_profile > 0 ) then
32223.                      $I_L32223_140 = 0
32223.                      do
32224.                         $I_L32224_118 = 0
32224. !dir$ ivdep
32224.                         do
32225.                            s_down_clear(1 + $I_L32224_118, 1 + $I_L32223_140) = s_down(1 + $I_L32224_118, 1 + $I_L32223_140, 1)
32226.                            s_up_clear(1 + $I_L32224_118, 1 + $I_L32223_140) = s_up(1 + $I_L32224_118, 1 + $I_L32223_140, 1)
32227.                            $I_L32224_118 = 1 + $I_L32224_118
32224.                            if ( $I_L32224_118 >= nd_profile ) exit
32224.                         enddo
32228.                         $I_L32223_140 = 1 + $I_L32223_140
32227.                         if ( $I_L32223_140 >= nd_layer ) exit
32227.                      enddo
32227.                   endif
32227.                endif
32227.             endif
32231.             if ( nd_layer > 0 ) then
32232.                if ( nd_profile > 0 ) then
32231.                   $I_L32231_142 = 0
32231.                   do
32232.                      $I_L32232_120 = 0
32232. !dir$ ivdep
32232.                      do
32233.                         s_down(1 + $I_L32232_120, 1 + $I_L32231_142, 1) = w_free(1 + $I_L32232_120, 1 + $I_L32231_142) * s_down(1 + $I_L32232_120, 1 + $I_L32231_142, 1)
32235.                         s_up(1 + $I_L32232_120, 1 + $I_L32231_142, 1) = w_free(1 + $I_L32232_120, 1 + $I_L32231_142) * s_up(1 + $I_L32232_120, 1 + $I_L32231_142, 1)
32237.                         s_down(1 + $I_L32232_120, 1 + $I_L32231_142, 2) = w_cloud(1 + $I_L32232_120, 1 + $I_L32231_142) * frac_region(1 + $I_L32232_120, 1 + $I_L32231_142, 2) * s_down(1 + $I_L32232_120, 1 + $I_L32231_142, 2)
32241.                         s_up(1 + $I_L32232_120, 1 + $I_L32231_142, 2) = w_cloud(1 + $I_L32232_120, 1 + $I_L32231_142) * frac_region(1 + $I_L32232_120, 1 + $I_L32231_142, 2) * s_up(1 + $I_L32232_120, 1 + $I_L32231_142, 2)
32245.                         s_down(1 + $I_L32232_120, 1 + $I_L32231_142, 3) = w_cloud(1 + $I_L32232_120, 1 + $I_L32231_142) * frac_region(1 + $I_L32232_120, 1 + $I_L32231_142, 3) * s_down(1 + $I_L32232_120, 1 + $I_L32231_142, 3)
32249.                         s_up(1 + $I_L32232_120, 1 + $I_L32231_142, 3) = w_cloud(1 + $I_L32232_120, 1 + $I_L32231_142) * frac_region(1 + $I_L32232_120, 1 + $I_L32231_142, 3) * s_up(1 + $I_L32232_120, 1 + $I_L32231_142, 3)
32253.                         $I_L32232_120 = 1 + $I_L32232_120
32232.                         if ( $I_L32232_120 >= nd_profile ) exit
32232.                      enddo
32254.                      $I_L32231_142 = 1 + $I_L32231_142
32253.                      if ( $I_L32231_142 >= nd_layer ) exit
32253.                   enddo
32253.                endif
32253.             endif
32253.          endif
32262.          if ( isolir == 1 ) then
32264.             call triple_solar_source( n_profile, n_layer, n_cloud_top, n_region, flux_inc_direct(1), l_scale_solar, adjust_solar_ke(1, 1), trans_0(1, 1, 1), source_coeff(1, 1, 1, 1), cloud_overlap(1, -1 + id_ct, 1), cloud_overlap(1, -1 + id_ct, 2), cloud_overlap(1, -1 + id_ct, 3), cloud_overlap(1, -1 + id_ct, 4), cloud_overlap(1, -1 + id_ct, 5), cloud_overlap(1, -1 + id_ct, 6), cloud_overlap(1, -1 + id_ct, 7), cloud_overlap(1, -1 + id_ct, 8), cloud_overlap(1, -1 + id_ct, 9), flux_direct(1, 0), flux_direct_ground(1, 1), s_up(1, 1, 1), s_down(1, 1, 1), nd_profile, nd_layer, id_ct, nd_source_coeff, nd_region )
32285.             if ( n_profile > 0 ) then
32285.                $I_L32285_122 = 0
32285. !dir$ ivdep
32285.                do
32286.                   source_flux_ground(1 + $I_L32285_122, 1) = ( direct_albedo(1 + $I_L32285_122) + -diffuse_albedo(1 + $I_L32285_122) ) * flux_direct_ground(1 + $I_L32285_122, 1)
32289.                   source_flux_ground(1 + $I_L32285_122, 2) = ( direct_albedo(1 + $I_L32285_122) + -diffuse_albedo(1 + $I_L32285_122) ) * flux_direct_ground(1 + $I_L32285_122, 2)
32292.                   source_flux_ground(1 + $I_L32285_122, 3) = ( direct_albedo(1 + $I_L32285_122) + -diffuse_albedo(1 + $I_L32285_122) ) * flux_direct_ground(1 + $I_L32285_122, 3)
32295.                   $I_L32285_122 = 1 + $I_L32285_122
32285.                   if ( $I_L32285_122 >= n_profile ) exit
32285.                enddo
32285.             endif
32296.          else if ( n_profile > 0 ) then
32297.             $I_L32297_124 = 0
32297. !dir$ ivdep
32297.             do
32298.                source_flux_ground(1 + $I_L32297_124, 1) = cloud_overlap(1 + $I_L32297_124, n_layer, 10) * ( 1.0 + -diffuse_albedo(1 + $I_L32297_124) ) * d_planck_flux_surface(1 + $I_L32297_124)
32302.                source_flux_ground(1 + $I_L32297_124, 2) = cloud_overlap(1 + $I_L32297_124, n_layer, 13) * ( 1.0 + -diffuse_albedo(1 + $I_L32297_124) ) * d_planck_flux_surface(1 + $I_L32297_124)
32306.                source_flux_ground(1 + $I_L32297_124, 3) = cloud_overlap(1 + $I_L32297_124, n_layer, 16) * ( 1.0 + -diffuse_albedo(1 + $I_L32297_124) ) * d_planck_flux_surface(1 + $I_L32297_124)
32310.                $I_L32297_124 = 1 + $I_L32297_124
32297.                if ( $I_L32297_124 >= n_profile ) exit
32297.             enddo
32297.          endif
32315.          if ( i_solver == 15 ) then
32403.             call solver_triple_app_scat( n_profile, n_layer, n_cloud_top, trans(1, 1, 1), reflect(1, 1, 1), s_down(1, 1, 1), s_up(1, 1, 1), trans(1, 1, 2), reflect(1, 1, 2), s_down(1, 1, 2), s_up(1, 1, 2), trans(1, 1, 3), reflect(1, 1, 3), s_down(1, 1, 3), s_up(1, 1, 3), cloud_overlap(1, -1 + id_ct, 1), cloud_overlap(1, -1 + id_ct, 2), cloud_overlap(1, -1 + id_ct, 3), cloud_overlap(1, -1 + id_ct, 4), cloud_overlap(1, -1 + id_ct, 5), cloud_overlap(1, -1 + id_ct, 6), cloud_overlap(1, -1 + id_ct, 7), cloud_overlap(1, -1 + id_ct, 8), cloud_overlap(1, -1 + id_ct, 9), cloud_overlap(1, -1 + id_ct, 10), cloud_overlap(1, -1 + id_ct, 11), cloud_overlap(1, -1 + id_ct, 12), cloud_overlap(1, -1 + id_ct, 13), cloud_overlap(1, -1 + id_ct, 14), cloud_overlap(1, -1 + id_ct, 15), cloud_overlap(1, -1 + id_ct, 16), cloud_overlap(1, -1 + id_ct, 17), cloud_overlap(1, -1 + id_ct, 18), flux_inc_down(1), source_flux_ground(1, 1), source_flux_ground(1, 2), source_flux_ground(1, 3), diffuse_albedo(1), flux_total(1, 1), nd_profile, nd_layer, id_ct )
32403.             goto 10
32359.          else if ( i_solver == 17 ) then
32361.             call solver_triple_hogan( n_profile, n_layer, n_cloud_top, trans(1, 1, 1), reflect(1, 1, 1), s_down(1, 1, 1), s_up(1, 1, 1), trans(1, 1, 2), reflect(1, 1, 2), s_down(1, 1, 2), s_up(1, 1, 2), trans(1, 1, 3), reflect(1, 1, 3), s_down(1, 1, 3), s_up(1, 1, 3), cloud_overlap(1, -1 + id_ct, 1), cloud_overlap(1, -1 + id_ct, 2), cloud_overlap(1, -1 + id_ct, 3), cloud_overlap(1, -1 + id_ct, 4), cloud_overlap(1, -1 + id_ct, 5), cloud_overlap(1, -1 + id_ct, 6), cloud_overlap(1, -1 + id_ct, 7), cloud_overlap(1, -1 + id_ct, 8), cloud_overlap(1, -1 + id_ct, 9), cloud_overlap(1, -1 + id_ct, 10), cloud_overlap(1, -1 + id_ct, 11), cloud_overlap(1, -1 + id_ct, 12), cloud_overlap(1, -1 + id_ct, 13), cloud_overlap(1, -1 + id_ct, 14), cloud_overlap(1, -1 + id_ct, 15), cloud_overlap(1, -1 + id_ct, 16), cloud_overlap(1, -1 + id_ct, 17), cloud_overlap(1, -1 + id_ct, 18), flux_inc_down(1), source_flux_ground(1, 1), source_flux_ground(1, 2), source_flux_ground(1, 3), diffuse_albedo(1), flux_total(1, 1), nd_profile, nd_layer, id_ct )
32361.             goto 10
32361.          else if ( i_solver == 14 ) then
32319.             call solver_triple( n_profile, n_layer, n_cloud_top, trans(1, 1, 1), reflect(1, 1, 1), s_down(1, 1, 1), s_up(1, 1, 1), trans(1, 1, 2), reflect(1, 1, 2), s_down(1, 1, 2), s_up(1, 1, 2), trans(1, 1, 3), reflect(1, 1, 3), s_down(1, 1, 3), s_up(1, 1, 3), cloud_overlap(1, -1 + id_ct, 1), cloud_overlap(1, -1 + id_ct, 2), cloud_overlap(1, -1 + id_ct, 3), cloud_overlap(1, -1 + id_ct, 4), cloud_overlap(1, -1 + id_ct, 5), cloud_overlap(1, -1 + id_ct, 6), cloud_overlap(1, -1 + id_ct, 7), cloud_overlap(1, -1 + id_ct, 8), cloud_overlap(1, -1 + id_ct, 9), cloud_overlap(1, -1 + id_ct, 10), cloud_overlap(1, -1 + id_ct, 11), cloud_overlap(1, -1 + id_ct, 12), cloud_overlap(1, -1 + id_ct, 13), cloud_overlap(1, -1 + id_ct, 14), cloud_overlap(1, -1 + id_ct, 15), cloud_overlap(1, -1 + id_ct, 16), cloud_overlap(1, -1 + id_ct, 17), cloud_overlap(1, -1 + id_ct, 18), flux_inc_down(1), source_flux_ground(1, 1), source_flux_ground(1, 2), source_flux_ground(1, 3), diffuse_albedo(1), flux_total(1, 1), nd_profile, nd_layer, id_ct )
32319.    10       continue
32454.             if ( l_clear ) then
32456.                call clear_supplement( ierr, n_profile, n_layer, i_solver_clear, trans(1, 1, 1), reflect(1, 1, 1), trans_0(1, 1, 1), source_coeff(1, 1, 1, 1), isolir, flux_inc_direct(1), flux_inc_down(1), s_down_clear(1, 1), s_up_clear(1, 1), diffuse_albedo(1), direct_albedo(1), d_planck_flux_surface(1), l_scale_solar, adjust_solar_ke(1, 1), flux_direct_clear(1, 0), flux_total_clear(1, 1), nd_profile, nd_layer, nd_source_coeff )
32456.             endif
31947.             _free( t$4494 )
31947.          else
32445.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1288,  _substr(t$1287,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: The solver specified is not valid here.', 0x800600000000L ) ) )
32447.             ierr = 1
31947.             _free( t$4494 )
31947.          endif
31947.       endif
32474.       return
32474.       end
32474.       
32733.       
32733.       subroutine triple_solar_source( n_profile, n_layer, n_cloud_top, n_region, flux_inc_direct, l_scale_solar, adjust_solar_ke, trans_0, source_coeff, v11, v12, v13, v21, v22, v23, v31, v32, v33, flux_direct, flux_direct_ground, s_up, s_down, nd_profile, nd_layer, id_ct, nd_source_coeff, nd_region )
32494.       t$1292 = nd_profile
32550.       t$4529 = _zla( 0, nd_profile )
32494.       t$1293 = nd_layer
32494.       t$4530 = _zla( 0, nd_profile )
32546.       t$4531 = _zla( 0, nd_layer )
32494.       t$4532 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
32494.       t$1294 = nd_region
32494.       t$4533 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
32555.       t$4534 = _zla( 0, nd_region )
32494.       t$4535 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_region )
32494.       t$1295 = nd_source_coeff
32557.       t$4536 = _zla( 0, nd_source_coeff )
32494.       t$4537 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
32494.       t$4538 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_region ) * _zla( 0, nd_source_coeff )
32494.       t$1296 = ( -1 + id_ct )
32494.       t$4539 = nd_layer + -id_ct + 2
32563.       t$4540 = _zla( 0, nd_layer + -id_ct + 2 )
32494.       t$4541 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 2 )
32494.       t$4542 = 1 + nd_layer
32584.       t$4543 = _zla( 0, 1 + nd_layer )
32494.       t$4544 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
32494.       t$4545 = _zla( 0, nd_profile ) * _zla( 0, nd_region )
32494.       t$4546 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
32494.       t$4547 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, 1 + nd_layer )
32606.       t$4550 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, 1 + nd_layer ) * 8
32604.       t$4551 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, 1 + nd_layer ) * 8
32604.       t$4553 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, 1 + nd_layer ) * 16
32494.       t$4548 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, 1 + nd_layer ) * 16 ), 8 )
32606.       t$4549 = t$4548
32604.       t$4552 = t$4548 + _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, 1 + nd_layer ) * 8
32614.       if ( n_profile > 0 ) then
32614.          $I_L32614_142 = 0
32614. !dir$ ivdep
32614.          do
32615.             $flux_direct_WR0_R0 = flux_inc_direct(1 + $I_L32614_142)
32615.             flux_direct(1 + $I_L32614_142, 0) = $flux_direct_WR0_R0
32628.             solar_base(1 + $I_L32614_142, 0, 1) = $flux_direct_WR0_R0
32629.             solar_base(1 + $I_L32614_142, 0, 2) = 0.0
32630.             solar_base(1 + $I_L32614_142, 0, 3) = 0.0
32616.             $I_L32614_142 = 1 + $I_L32614_142
32614.             if ( $I_L32614_142 >= n_profile ) exit
32614.          enddo
32614.       endif
32634.       if ( nd_layer > 0 ) then
32634.          $I_L32634_170 = 0
32634.          do
32638.             if ( nd_profile > 0 ) then
32638.                $I_L32638_144 = 0
32638. !dir$ ivdep
32638. !dir$ loop_info (automatic) cache_nt( v33, v32, v31, v23, v22, v21, v13, v12 )
32638.                do
32639.                   solar_top(1 + $I_L32638_144, 1 + $I_L32634_170, 1) = v11(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 1) + v12(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 2) + v13(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 3)
32643.                   solar_top(1 + $I_L32638_144, 1 + $I_L32634_170, 2) = v21(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 1) + v22(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 2) + v23(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 3)
32647.                   solar_top(1 + $I_L32638_144, 1 + $I_L32634_170, 3) = v31(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 1) + v32(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 2) + v33(1 + $I_L32638_144, $I_L32634_170) * solar_base(1 + $I_L32638_144, $I_L32634_170, 3)
32651.                   $I_L32638_144 = 1 + $I_L32638_144
32638.                   if ( $I_L32638_144 >= nd_profile ) exit
32638.                enddo
32638.             endif
32656.             if ( l_scale_solar ) then
32658.                if ( n_region > 0 ) then
32659.                   if ( nd_profile > 0 ) then
32658.                      $I_L32658_160 = 0
32658.                      if ( n_region >= 4 ) then
32658.                         $I_L32658_179 = 0
32658. !dir$ blocking_size( 0, 0 )
32658.                         do
32659.                            $I_L32659_148 = 0
32659. !dir$ ivdep
32659. !dir$ blocking_size( 0, 0 )
32659.                            do
32660.                               solar_base(1 + $I_L32659_148, 1 + $I_L32634_170, 1 + 4 * $I_L32658_179) = solar_top(1 + $I_L32659_148, 1 + $I_L32634_170, 1 + 4 * $I_L32658_179) * trans_0(1 + $I_L32659_148, 1 + $I_L32634_170, 1 + 4 * $I_L32658_179) * adjust_solar_ke(1 + $I_L32659_148, 1 + $I_L32634_170)
32660.                               solar_base(1 + $I_L32659_148, 1 + $I_L32634_170, 2 + 4 * $I_L32658_179) = solar_top(1 + $I_L32659_148, 1 + $I_L32634_170, 2 + 4 * $I_L32658_179) * trans_0(1 + $I_L32659_148, 1 + $I_L32634_170, 2 + 4 * $I_L32658_179) * adjust_solar_ke(1 + $I_L32659_148, 1 + $I_L32634_170)
32660.                               solar_base(1 + $I_L32659_148, 1 + $I_L32634_170, 3 + 4 * $I_L32658_179) = solar_top(1 + $I_L32659_148, 1 + $I_L32634_170, 3 + 4 * $I_L32658_179) * trans_0(1 + $I_L32659_148, 1 + $I_L32634_170, 3 + 4 * $I_L32658_179) * adjust_solar_ke(1 + $I_L32659_148, 1 + $I_L32634_170)
32660.                               solar_base(1 + $I_L32659_148, 1 + $I_L32634_170, 4 + 4 * $I_L32658_179) = solar_top(1 + $I_L32659_148, 1 + $I_L32634_170, 4 + 4 * $I_L32658_179) * trans_0(1 + $I_L32659_148, 1 + $I_L32634_170, 4 + 4 * $I_L32658_179) * adjust_solar_ke(1 + $I_L32659_148, 1 + $I_L32634_170)
32663.                               $I_L32659_148 = 1 + $I_L32659_148
32659.                               if ( $I_L32659_148 >= nd_profile ) exit
32659.                            enddo
32664.                            $I_L32658_179 = 1 + $I_L32658_179
32663.                            if ( $I_L32658_179 >= _rsh( n_region, 2 ) ) exit
32663.                         enddo
32664.                         $I_L32658_160 = and( 0xfffffffffffffffcUL, n_region )
32664.                      endif
32658.                      if ( $I_L32658_160 < n_region ) then
32658.                         $I_L32658_176 = 0
32658. !dir$ blocking_size( 0, 0 )
32658.                         do
32659.                            $I_L32659_148 = 0
32659. !dir$ ivdep
32659. !dir$ blocking_size( 0, 0 )
32659.                            do
32660.                               solar_base(1 + $I_L32659_148, 1 + $I_L32634_170, $I_L32658_160 + $I_L32658_176 + 1) = solar_top(1 + $I_L32659_148, 1 + $I_L32634_170, $I_L32658_160 + $I_L32658_176 + 1) * trans_0(1 + $I_L32659_148, 1 + $I_L32634_170, $I_L32658_160 + $I_L32658_176 + 1) * adjust_solar_ke(1 + $I_L32659_148, 1 + $I_L32634_170)
32663.                               $I_L32659_148 = 1 + $I_L32659_148
32659.                               if ( $I_L32659_148 >= nd_profile ) exit
32659.                            enddo
32664.                            $I_L32658_176 = 1 + $I_L32658_176
32663.                            if ( $I_L32658_176 >= n_region + -$I_L32658_160 ) exit
32663.                         enddo
32663.                      endif
32663.                   endif
32663.                endif
32663.             else if ( n_region > 0 ) then
32669.                if ( nd_profile > 0 ) then
32668.                   $I_L32668_158 = 0
32668.                   do
32669.                      $I_L32669_146 = 0
32669. !dir$ ivdep
32669.                      do
32670.                         solar_base(1 + $I_L32669_146, 1 + $I_L32634_170, 1 + $I_L32668_158) = solar_top(1 + $I_L32669_146, 1 + $I_L32634_170, 1 + $I_L32668_158) * trans_0(1 + $I_L32669_146, 1 + $I_L32634_170, 1 + $I_L32668_158)
32672.                         $I_L32669_146 = 1 + $I_L32669_146
32669.                         if ( $I_L32669_146 >= nd_profile ) exit
32669.                      enddo
32673.                      $I_L32668_158 = 1 + $I_L32668_158
32672.                      if ( $I_L32668_158 >= n_region ) exit
32672.                   enddo
32672.                endif
32672.             endif
32676.             $I_L32634_170 = 1 + $I_L32634_170
32675.             if ( $I_L32634_170 >= nd_layer ) exit
32675.          enddo
32715.          if ( nd_profile > 0 ) then
32714.             $I_L32714_166 = 0
32714.             do
32715.                $I_L32715_154 = 0
32715. !dir$ ivdep
32715.                do
32716.                   flux_direct(1 + $I_L32715_154, 1 + $I_L32714_166) = solar_base(1 + $I_L32715_154, 1 + $I_L32714_166, 1) + solar_base(1 + $I_L32715_154, 1 + $I_L32714_166, 2) + solar_base(1 + $I_L32715_154, 1 + $I_L32714_166, 3)
32719.                   $I_L32715_154 = 1 + $I_L32715_154
32715.                   if ( $I_L32715_154 >= nd_profile ) exit
32715.                enddo
32721.                $I_L32714_166 = 1 + $I_L32714_166
32719.                if ( $I_L32714_166 >= nd_layer ) exit
32719.             enddo
32719.          endif
32719.       endif
32678.       if ( l_scale_solar ) then
32680.          if ( n_region > 0 ) then
32681.             if ( nd_layer > 0 ) then
32682.                if ( nd_profile > 0 ) then
32680.                   $I_L32680_174 = 0
32680.                   do
32681.                      $I_L32681_164 = 0
32681.                      do
32682.                         $I_L32682_152 = 0
32682. !dir$ ivdep
32682. !dir$ loop_info (automatic) cache_nt( solar_top, source_coeff, trans_0 )
32682.                         do
32683.                            s_up(1 + $I_L32682_152, 1 + $I_L32681_164, 1 + $I_L32680_174) = source_coeff(1 + $I_L32682_152, 1 + $I_L32681_164, 1, 1 + $I_L32680_174) * solar_top(1 + $I_L32682_152, 1 + $I_L32681_164, 1 + $I_L32680_174)
32686.                            s_down(1 + $I_L32682_152, 1 + $I_L32681_164, 1 + $I_L32680_174) = ( source_coeff(1 + $I_L32682_152, 1 + $I_L32681_164, 2, 1 + $I_L32680_174) + -trans_0(1 + $I_L32682_152, 1 + $I_L32681_164, 1 + $I_L32680_174) ) * solar_top(1 + $I_L32682_152, 1 + $I_L32681_164, 1 + $I_L32680_174) + solar_base(1 + $I_L32682_152, 1 + $I_L32681_164, 1 + $I_L32680_174)
32690.                            $I_L32682_152 = 1 + $I_L32682_152
32682.                            if ( $I_L32682_152 >= nd_profile ) exit
32682.                         enddo
32691.                         $I_L32681_164 = 1 + $I_L32681_164
32690.                         if ( $I_L32681_164 >= nd_layer ) exit
32690.                      enddo
32692.                      $I_L32680_174 = 1 + $I_L32680_174
32691.                      if ( $I_L32680_174 >= n_region ) exit
32691.                   enddo
32691.                endif
32691.             endif
32691.          endif
32691.       else if ( n_region > 0 ) then
32696.          if ( nd_layer > 0 ) then
32697.             if ( nd_profile > 0 ) then
32695.                $I_L32695_172 = 0
32695.                do
32696.                   $I_L32696_162 = 0
32696.                   do
32697.                      $I_L32697_150 = 0
32697. !dir$ ivdep
32697. !dir$ loop_info (automatic) cache_nt( source_coeff )
32697.                      do
32698.                         s_up(1 + $I_L32697_150, 1 + $I_L32696_162, 1 + $I_L32695_172) = source_coeff(1 + $I_L32697_150, 1 + $I_L32696_162, 1, 1 + $I_L32695_172) * solar_top(1 + $I_L32697_150, 1 + $I_L32696_162, 1 + $I_L32695_172)
32701.                         s_down(1 + $I_L32697_150, 1 + $I_L32696_162, 1 + $I_L32695_172) = source_coeff(1 + $I_L32697_150, 1 + $I_L32696_162, 2, 1 + $I_L32695_172) * solar_top(1 + $I_L32697_150, 1 + $I_L32696_162, 1 + $I_L32695_172)
32704.                         $I_L32697_150 = 1 + $I_L32697_150
32697.                         if ( $I_L32697_150 >= nd_profile ) exit
32697.                      enddo
32705.                      $I_L32696_162 = 1 + $I_L32696_162
32704.                      if ( $I_L32696_162 >= nd_layer ) exit
32704.                   enddo
32706.                   $I_L32695_172 = 1 + $I_L32695_172
32705.                   if ( $I_L32695_172 >= n_region ) exit
32705.                enddo
32705.             endif
32705.          endif
32705.       endif
32724.       if ( n_region > 0 ) then
32725.          if ( nd_profile > 0 ) then
32724.             $I_L32724_168 = 0
32724.             do
32725.                $I_L32725_156 = 0
32725. !dir$ ivdep
32725.                do
32726.                   flux_direct_ground(1 + $I_L32725_156, 1 + $I_L32724_168) = solar_base(1 + $I_L32725_156, nd_layer, 1 + $I_L32724_168)
32727.                   $I_L32725_156 = 1 + $I_L32725_156
32725.                   if ( $I_L32725_156 >= nd_profile ) exit
32725.                enddo
32728.                $I_L32724_168 = 1 + $I_L32724_168
32727.                if ( $I_L32724_168 >= n_region ) exit
32727.             enddo
32727.          endif
32727.       endif
32494.       _free( t$4548 )
32733.       return
32733.       end
32733.       
32950.       
32950.       subroutine two_coeff_basic( ierr, n_profile, i_layer_first, i_layer_last, i_2stream, asymmetry, omega, sum, diff, nd_profile, id_lt, id_lb )
32752.       t$1302 = nd_profile
32752.       t$1303 = id_lt
32752.       t$1304 = id_lb
32800.       t$4554 = _zla( 0, nd_profile )
32752.       t$4555 = _zla( 0, nd_profile )
32752.       t$4556 = id_lb + -id_lt + 1
32800.       t$4557 = _zla( 0, id_lb + -id_lt + 1 )
32752.       t$4558 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 )
32832.       if ( i_2stream == 2 ) then
32833.          if ( id_lb + -id_lt >= 0 ) then
32834.             if ( nd_profile > 0 ) then
32833.                $I_L32833_82 = 0
32833.                do
32834.                   $I_L32834_68 = 0
32834. !dir$ ivdep
32834.                   do
32835.                      sum(1 + $I_L32834_68, id_lt + $I_L32833_82) = 1.5 * ( 1.0 + -( omega(1 + $I_L32834_68, id_lt + $I_L32833_82) * asymmetry(1 + $I_L32834_68, id_lt + $I_L32833_82) ) )
32837.                      diff(1 + $I_L32834_68, id_lt + $I_L32833_82) = 2.0 * ( 1.0 + -omega(1 + $I_L32834_68, id_lt + $I_L32833_82) )
32838.                      $I_L32834_68 = 1 + $I_L32834_68
32834.                      if ( $I_L32834_68 >= nd_profile ) exit
32834.                   enddo
32839.                   $I_L32833_82 = 1 + $I_L32833_82
32838.                   if ( $I_L32833_82 >= id_lb + -id_lt + 1 ) exit
32838.                enddo
32838.             endif
32838.          endif
32841.       else if ( i_2stream == 12 ) then
32842.          if ( id_lb + -id_lt >= 0 ) then
32843.             if ( nd_profile > 0 ) then
32842.                $I_L32842_80 = 0
32842.                do
32843.                   $I_L32843_66 = 0
32843. !dir$ ivdep
32843.                   do
32844.                      sum(1 + $I_L32843_66, id_lt + $I_L32842_80) = 1.6599999999999999 + asymmetry(1 + $I_L32843_66, id_lt + $I_L32842_80) * omega(1 + $I_L32843_66, id_lt + $I_L32842_80) * -1.5
32846.                      diff(1 + $I_L32843_66, id_lt + $I_L32842_80) = 1.6599999999999999 * ( 1.0 + -omega(1 + $I_L32843_66, id_lt + $I_L32842_80) )
32847.                      $I_L32843_66 = 1 + $I_L32843_66
32843.                      if ( $I_L32843_66 >= nd_profile ) exit
32843.                   enddo
32848.                   $I_L32842_80 = 1 + $I_L32842_80
32847.                   if ( $I_L32842_80 >= id_lb + -id_lt + 1 ) exit
32847.                enddo
32847.             endif
32847.          endif
32847.       else if ( i_2stream == 4 ) then
32851.          if ( id_lb + -id_lt >= 0 ) then
32852.             if ( nd_profile > 0 ) then
32851.                $I_L32851_78 = 0
32851.                do
32852.                   $I_L32852_64 = 0
32852. !dir$ ivdep
32852.                   do
32853.                      sum(1 + $I_L32852_64, id_lt + $I_L32851_78) = 1.7320508075688772 * ( 1.0 + -( omega(1 + $I_L32852_64, id_lt + $I_L32851_78) * asymmetry(1 + $I_L32852_64, id_lt + $I_L32851_78) ) )
32855.                      diff(1 + $I_L32852_64, id_lt + $I_L32851_78) = 1.7320508075688772 * ( 1.0 + -omega(1 + $I_L32852_64, id_lt + $I_L32851_78) )
32856.                      $I_L32852_64 = 1 + $I_L32852_64
32852.                      if ( $I_L32852_64 >= nd_profile ) exit
32852.                   enddo
32857.                   $I_L32851_78 = 1 + $I_L32851_78
32856.                   if ( $I_L32851_78 >= id_lb + -id_lt + 1 ) exit
32856.                enddo
32856.             endif
32856.          endif
32856.       else if ( i_2stream == 6 ) then
32860.          if ( id_lb + -id_lt >= 0 ) then
32861.             if ( nd_profile > 0 ) then
32860.                $I_L32860_76 = 0
32860.                do
32861.                   $I_L32861_62 = 0
32861. !dir$ ivdep
32861.                   do
32862.                      sum(1 + $I_L32861_62, id_lt + $I_L32860_76) = 2.0 + asymmetry(1 + $I_L32861_62, id_lt + $I_L32860_76) * omega(1 + $I_L32861_62, id_lt + $I_L32860_76) * -1.5
32864.                      diff(1 + $I_L32861_62, id_lt + $I_L32860_76) = 2.0 * ( 1.0 + -omega(1 + $I_L32861_62, id_lt + $I_L32860_76) )
32865.                      $I_L32861_62 = 1 + $I_L32861_62
32861.                      if ( $I_L32861_62 >= nd_profile ) exit
32861.                   enddo
32866.                   $I_L32860_76 = 1 + $I_L32860_76
32865.                   if ( $I_L32860_76 >= id_lb + -id_lt + 1 ) exit
32865.                enddo
32865.             endif
32865.          endif
32865.       else if ( i_2stream == 14 ) then
32869.          if ( id_lb + -id_lt >= 0 ) then
32870.             if ( nd_profile > 0 ) then
32869.                $I_L32869_74 = 0
32869.                do
32870.                   $I_L32870_60 = 0
32870. !dir$ ivdep
32870.                   do
32871.                      sum(1 + $I_L32870_60, id_lt + $I_L32869_74) = 1.5 + asymmetry(1 + $I_L32870_60, id_lt + $I_L32869_74) * omega(1 + $I_L32870_60, id_lt + $I_L32869_74) * -1.5
32873.                      diff(1 + $I_L32870_60, id_lt + $I_L32869_74) = 1.5 * ( 1.0 + -omega(1 + $I_L32870_60, id_lt + $I_L32869_74) )
32874.                      $I_L32870_60 = 1 + $I_L32870_60
32870.                      if ( $I_L32870_60 >= nd_profile ) exit
32870.                   enddo
32875.                   $I_L32869_74 = 1 + $I_L32869_74
32874.                   if ( $I_L32869_74 >= id_lb + -id_lt + 1 ) exit
32874.                enddo
32874.             endif
32874.          endif
32874.       else if ( i_2stream == 15 ) then
32878.          if ( id_lb + -id_lt >= 0 ) then
32879.             if ( nd_profile > 0 ) then
32878.                $I_L32878_72 = 0
32878.                do
32879.                   $I_L32879_58 = 0
32879. !dir$ ivdep
32879.                   do
32880.                      sum(1 + $I_L32879_58, id_lt + $I_L32878_72) = 2.0 * ( 1.0 + -( omega(1 + $I_L32879_58, id_lt + $I_L32878_72) * asymmetry(1 + $I_L32879_58, id_lt + $I_L32878_72) ) )
32882.                      diff(1 + $I_L32879_58, id_lt + $I_L32878_72) = 2.0 * ( 1.0 + -omega(1 + $I_L32879_58, id_lt + $I_L32878_72) )
32883.                      $I_L32879_58 = 1 + $I_L32879_58
32879.                      if ( $I_L32879_58 >= nd_profile ) exit
32879.                   enddo
32884.                   $I_L32878_72 = 1 + $I_L32878_72
32883.                   if ( $I_L32878_72 >= id_lb + -id_lt + 1 ) exit
32883.                enddo
32883.             endif
32883.          endif
32883.       else if ( i_2stream == 16 ) then
32887.          if ( id_lb + -id_lt >= 0 ) then
32888.             if ( nd_profile > 0 ) then
32887.                $I_L32887_70 = 0
32887.                do
32888.                   $I_L32888_56 = 0
32888. !dir$ ivdep
32888.                   do
32889.                      sum(1 + $I_L32888_56, id_lt + $I_L32887_70) = -5.0e-1 * omega(1 + $I_L32888_56, id_lt + $I_L32887_70) + asymmetry(1 + $I_L32888_56, id_lt + $I_L32887_70) * omega(1 + $I_L32888_56, id_lt + $I_L32887_70) * -1.5 + 2.0
32892.                      diff(1 + $I_L32888_56, id_lt + $I_L32887_70) = 2.0 * ( 1.0 + -omega(1 + $I_L32888_56, id_lt + $I_L32887_70) )
32893.                      $I_L32888_56 = 1 + $I_L32888_56
32888.                      if ( $I_L32888_56 >= nd_profile ) exit
32888.                   enddo
32894.                   $I_L32887_70 = 1 + $I_L32887_70
32893.                   if ( $I_L32887_70 >= id_lb + -id_lt + 1 ) exit
32893.                enddo
32893.             endif
32893.          endif
32893.       else if ( i_2stream == 5 ) then
32897.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1306,  _substr(t$1305,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: The improved flux mathod has not been implemented.', 0x800600000000L ) ) )
32900.          ierr = 1
32900.       else if ( i_2stream == 7 ) then
32904.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1308,  _substr(t$1307,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Zdunkowski's flux method has not been implemented.', 0x800600000000L ) ) )
32907.          ierr = 1
32907.       else if ( i_2stream == 8 ) then
32911.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1310,  _substr(t$1309,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Kerschgen's flux method has not been implemented.', 0x800600000000L ) ) )
32914.          ierr = 1
32914.       else if ( i_2stream == 9 ) then
32918.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1312,  _substr(t$1311,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Coakley and Chylek's first method has not been implemented.', 0x800600000000L ) ) )
32921.          ierr = 1
32921.       else if ( i_2stream == 10 ) then
32925.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1314,  _substr(t$1313,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Coakley and Chylek's second method has not been implemented.', 0x800600000000L ) ) )
32928.          ierr = 1
32928.       else if ( i_2stream == 11 ) then
32932.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1316,  _substr(t$1315,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Meador and Weaver's method has not been implemented.', 0x800600000000L ) ) )
32935.          ierr = 1
32935.       else
32939.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1318,  _substr(t$1317,1,8), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: An unrecognized value has been specified to define the two-stream scheme.', 0x800600000000L ) ) )
32942.          ierr = 1
32942.       endif
32950.       return
32950.       end
32950.       
33231.       
33231.       subroutine two_coeff_cloud( ierr, n_profile, i_layer_first, i_layer_last, i_2stream, l_ir_source_quad, n_source_coeff, n_cloud_type, frac_cloud, phase_fnc_cloud, omega_cloud, tau_cloud, isolir, sec_00, trans_cloud, reflect_cloud, trans_0_cloud, source_coeff_cloud, nd_profile, nd_layer, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type )
32982.       t$1322 = nd_profile
32982.       t$1323 = id_ct
32982.       t$1324 = nd_layer
32982.       t$1325 = nd_cloud_type
33047.       t$4559 = _zla( 0, nd_profile )
32982.       t$4560 = _zla( 0, nd_profile )
32982.       t$4561 = nd_layer + -id_ct + 1
33047.       t$4562 = _zla( 0, nd_layer + -id_ct + 1 )
32982.       t$4563 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
33047.       t$4564 = _zla( 0, nd_cloud_type )
32982.       t$4565 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_type ) * _zla( 0, nd_layer + -id_ct + 1 )
32982.       t$1326 = nd_max_order
33049.       t$4566 = _zla( 0, nd_max_order )
32982.       t$4567 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
32982.       t$4568 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_type ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
32982.       t$4569 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
33065.       t$4570 = _zla( 0, nd_layer )
32982.       t$4571 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
32982.       t$1327 = nd_source_coeff
32982.       t$4572 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
33071.       t$4573 = _zla( 0, nd_source_coeff )
32982.       t$4574 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
32982.       t$4575 = _zla( 0, nd_profile )
33110.       t$4578 = 8 * _zla( 0, nd_profile )
33101.       t$4580 = 12 * _zla( 0, nd_profile )
33108.       t$4581 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
33108.       t$4583 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
33090.       t$4584 = 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
33090.       t$4586 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 16 * _zla( 0, nd_profile )
33112.       t$4587 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 16 * _zla( 0, nd_profile )
33112.       t$4589 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 24 * _zla( 0, nd_profile )
32982.       t$4590 = _zla( 0, nd_profile )
32982.       t$4591 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff )
33094.       t$4592 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 24 * _zla( 0, nd_profile )
33094.       t$4594 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 24 * _zla( 0, nd_profile )
33106.       t$4595 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 24 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8
33106.       t$4597 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 32 * _zla( 0, nd_profile )
33092.       t$4598 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 32 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8
33092.       t$4600 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 40 * _zla( 0, nd_profile )
33088.       t$4601 = 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 40 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8
33088.       t$4603 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 48 * _zla( 0, nd_profile )
32982.       t$4576 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 48 * _zla( 0, nd_profile ) ), 8 )
33110.       t$4577 = t$4576
33101.       t$4579 = t$4576 + 8 * _zla( 0, nd_profile )
33108.       t$4582 = t$4576 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
33090.       t$4585 = t$4576 + 8 * _zla( 0, nd_profile ) + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 )
33112.       t$4588 = t$4576 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 16 * _zla( 0, nd_profile )
33094.       t$4593 = t$4576 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 24 * _zla( 0, nd_profile )
33106.       t$4596 = t$4576 + _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 24 * _zla( 0, nd_profile )
33092.       t$4599 = t$4576 + _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 32 * _zla( 0, nd_profile )
33088.       t$4602 = t$4576 + _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 12 * _zla( 0, nd_profile ) ) / 8 ) + 40 * _zla( 0, nd_profile )
33123.       if ( i_layer_last + -i_layer_first >= 0 ) then
33124.          if ( n_profile > 0 ) then
33123.             $I_L33123_82 = 0
33123.             do
33124.                $I_L33124_64 = 0
33124. !dir$ ivdep
33124.                do
33125.                   trans_cloud(1 + $I_L33124_64, i_layer_first + $I_L33123_82) = 0.0
33126.                   reflect_cloud(1 + $I_L33124_64, i_layer_first + $I_L33123_82) = 0.0
33127.                   $I_L33124_64 = 1 + $I_L33124_64
33124.                   if ( $I_L33124_64 >= n_profile ) exit
33124.                enddo
33128.                $I_L33123_82 = 1 + $I_L33123_82
33127.                if ( $I_L33123_82 >= i_layer_last + -i_layer_first + 1 ) exit
33127.             enddo
33127.          endif
33127.       endif
33129.       if ( n_source_coeff > 0 ) then
33130.          if ( i_layer_last + -i_layer_first >= 0 ) then
33131.             if ( n_profile > 0 ) then
33129.                $I_L33129_90 = 0
33129.                do
33130.                   $I_L33130_84 = 0
33130.                   do
33131.                      $I_L33131_66 = 0
33131. !dir$ ivdep
33131.                      do
33132.                         source_coeff_cloud(1 + $I_L33131_66, i_layer_first + $I_L33130_84, 1 + $I_L33129_90) = 0.0
33133.                         $I_L33131_66 = 1 + $I_L33131_66
33131.                         if ( $I_L33131_66 >= n_profile ) exit
33131.                      enddo
33134.                      $I_L33130_84 = 1 + $I_L33130_84
33133.                      if ( $I_L33130_84 >= i_layer_last + -i_layer_first + 1 ) exit
33133.                   enddo
33135.                   $I_L33129_90 = 1 + $I_L33129_90
33134.                   if ( $I_L33129_90 >= n_source_coeff ) exit
33134.                enddo
33134.             endif
33134.          endif
33134.       endif
33137.       if ( isolir == 1 ) then
33138.          if ( i_layer_last + -i_layer_first >= 0 ) then
33139.             if ( n_profile > 0 ) then
33138.                $I_L33138_86 = 0
33138.                do
33139.                   $I_L33139_68 = 0
33139. !dir$ ivdep
33139.                   do
33140.                      trans_0_cloud(1 + $I_L33139_68, i_layer_first + $I_L33138_86) = 0.0
33141.                      $I_L33139_68 = 1 + $I_L33139_68
33139.                      if ( $I_L33139_68 >= n_profile ) exit
33139.                   enddo
33142.                   $I_L33138_86 = 1 + $I_L33138_86
33141.                   if ( $I_L33138_86 >= i_layer_last + -i_layer_first + 1 ) exit
33141.                enddo
33141.             endif
33141.          endif
33141.       endif
33150.       if ( n_cloud_type <= 0 ) then
33143.          goto 10
33143.       else if ( i_layer_last + -i_layer_first >= 0 ) then
33150.          $I_L33150_94 = 0
33150.          do
33152.             $I_L33152_92 = 0
33152.             do
33156.                n_list = 0
33157.                if ( n_profile > 0 ) then
33157.                   $I_L33157_70 = 0
33157. !dir$ ivdep
33157.                   do
33158.                      if ( frac_cloud(1 + $I_L33157_70, i_layer_first + $I_L33152_92, 1 + $I_L33150_94) > 0.0 ) then
33159.                         n_list = 1 + n_list
33160.                         l_list(n_list) = ( 1 + $I_L33157_70 )
33160.                      endif
33162.                      $I_L33157_70 = 1 + $I_L33157_70
33161.                      if ( $I_L33157_70 >= n_profile ) exit
33161.                   enddo
33161.                endif
33165.                if ( n_list > 0 ) then
33174.                   $I_L33174_72 = 0
33174. !dir$ ivdep
33174.                   do
33175.                      tau_gathered(1 + $I_L33174_72, 1) = tau_cloud(l_list(1 + $I_L33174_72), i_layer_first + $I_L33152_92, 1 + $I_L33150_94)
33177.                      omega_gathered(1 + $I_L33174_72, 1) = omega_cloud(l_list(1 + $I_L33174_72), i_layer_first + $I_L33152_92, 1 + $I_L33150_94)
33179.                      asymmetry_gathered(1 + $I_L33174_72, 1) = phase_fnc_cloud(l_list(1 + $I_L33174_72), i_layer_first + $I_L33152_92, 1, 1 + $I_L33150_94)
33181.                      $I_L33174_72 = 1 + $I_L33174_72
33174.                      if ( $I_L33174_72 >= n_list ) exit
33174.                   enddo
33182.                   if ( isolir == 1 ) then
33183.                      $I_L33183_74 = 0
33183. !dir$ ivdep
33183.                      do
33184.                         sec_0_gathered(1 + $I_L33183_74) = sec_00(l_list(1 + $I_L33183_74), 1)
33185.                         $I_L33183_74 = 1 + $I_L33183_74
33183.                         if ( $I_L33183_74 >= n_list ) exit
33183.                      enddo
33183.                   endif
33190.                   t$10132 = ( i_layer_first + $I_L33152_92 )
33190.                   t$10133 = ( i_layer_first + $I_L33152_92 )
33197.                   t$10134 = ( i_layer_first + $I_L33152_92 )
33197.                   t$10135 = ( i_layer_first + $I_L33152_92 )
33197.                   t$10136 = ( i_layer_first + $I_L33152_92 )
33197.                   t$10137 = ( i_layer_first + $I_L33152_92 )
33189.                   call two_coeff( ierr, n_list, t$10132, t$10133, i_2stream, l_ir_source_quad, asymmetry_gathered(1, 1), omega_gathered(1, 1), tau_gathered(1, 1), isolir, sec_0_gathered(1), trans_temp(1, 1), reflect_temp(1, 1), trans_0_temp(1, 1), source_coeff_temp(1, 1, 1), nd_profile, t$10134, t$10135, t$10136, t$10137, nd_source_coeff )
33199.                   if ( ierr == 0 ) then
33201.                      if ( n_list > 0 ) then
33201.                         $I_L33201_76 = 0
33201. !dir$ ivdep
33201.                         do
33202.                            $ll_S13 = l_list(1 + $I_L33201_76)
33203.                            trans_cloud($ll_S13, i_layer_first + $I_L33152_92) = _vu_plus( trans_cloud($ll_S13, i_layer_first + $I_L33152_92), frac_cloud($ll_S13, i_layer_first + $I_L33152_92, 1 + $I_L33150_94) * trans_temp(1 + $I_L33201_76, 1) )
33205.                            reflect_cloud($ll_S13, i_layer_first + $I_L33152_92) = _vu_plus( reflect_cloud($ll_S13, i_layer_first + $I_L33152_92), frac_cloud($ll_S13, i_layer_first + $I_L33152_92, 1 + $I_L33150_94) * reflect_temp(1 + $I_L33201_76, 1) )
33207.                            $I_L33201_76 = 1 + $I_L33201_76
33201.                            if ( $I_L33201_76 >= n_list ) exit
33201.                         enddo
33201.                      endif
33208.                      if ( n_source_coeff > 0 ) then
33209.                         if ( n_list > 0 ) then
33208.                            $I_L33208_88 = 0
33208. !dir$ blocking_size( 0, 0 )
33208.                            do
33209.                               $I_L33209_78 = 0
33209. !dir$ ivdep
33209. !dir$ blocking_size( 0, 0 )
33209.                               do
33210.                                  $ll_S16 = l_list(1 + $I_L33209_78)
33211.                                  source_coeff_cloud($ll_S16, i_layer_first + $I_L33152_92, 1 + $I_L33208_88) = _vu_plus( source_coeff_cloud($ll_S16, i_layer_first + $I_L33152_92, 1 + $I_L33208_88), frac_cloud($ll_S16, i_layer_first + $I_L33152_92, 1 + $I_L33150_94) * source_coeff_temp(1 + $I_L33209_78, 1, 1 + $I_L33208_88) )
33214.                                  $I_L33209_78 = 1 + $I_L33209_78
33209.                                  if ( $I_L33209_78 >= n_list ) exit
33209.                               enddo
33215.                               $I_L33208_88 = 1 + $I_L33208_88
33214.                               if ( $I_L33208_88 >= n_source_coeff ) exit
33214.                            enddo
33214.                         endif
33214.                      endif
33216.                      if ( isolir == 1 ) then
33217.                         if ( n_list > 0 ) then
33217.                            $I_L33217_80 = 0
33217. !dir$ ivdep
33217.                            do
33218.                               $ll_S18 = l_list(1 + $I_L33217_80)
33219.                               trans_0_cloud($ll_S18, i_layer_first + $I_L33152_92) = _vu_plus( trans_0_cloud($ll_S18, i_layer_first + $I_L33152_92), frac_cloud($ll_S18, i_layer_first + $I_L33152_92, 1 + $I_L33150_94) * trans_0_temp(1 + $I_L33217_80, 1) )
33221.                               $I_L33217_80 = 1 + $I_L33217_80
33217.                               if ( $I_L33217_80 >= n_list ) exit
33217.                            enddo
33217.                         endif
33217.                      endif
33225.                      $I_L33152_92 = 1 + $I_L33152_92
33223.                   else
33223.                   endif
33223.                else
33223.                endif
33223.                if ( $I_L33152_92 >= i_layer_last + -i_layer_first + 1 ) exit
33223.             enddo
33226.             $I_L33150_94 = 1 + $I_L33150_94
33225.             if ( $I_L33150_94 >= n_cloud_type ) exit
33225.          enddo
33225.          goto 10
33225.       else
33225.    10    continue
32982.          _free( t$4576 )
32982.       endif
33231.       return
33231.       end
33231.       
33421.       
33421.       subroutine two_coeff( ierr, n_profile, i_layer_first, i_layer_last, i_2stream, l_ir_source_quad, asymmetry, omega, tau, isolir, sec_00, trans, reflect, trans_0, source_coeff, nd_profile, id_op_lt, id_op_lb, id_trs_lt, id_trs_lb, nd_source_coeff )
33252.       t$1331 = nd_profile
33252.       t$1332 = id_op_lt
33252.       t$1333 = id_op_lb
33312.       t$4604 = _zla( 0, nd_profile )
33252.       t$4605 = _zla( 0, nd_profile )
33252.       t$4606 = id_op_lb + -id_op_lt + 1
33312.       t$4607 = _zla( 0, id_op_lb + -id_op_lt + 1 )
33252.       t$4608 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 )
33252.       t$1334 = id_trs_lt
33252.       t$1335 = id_trs_lb
33252.       t$4609 = id_trs_lb + -id_trs_lt + 1
33327.       t$4610 = _zla( 0, id_trs_lb + -id_trs_lt + 1 )
33252.       t$4611 = _zla( 0, nd_profile ) * _zla( 0, id_trs_lb + -id_trs_lt + 1 )
33252.       t$1336 = nd_source_coeff
33252.       t$4612 = _zla( 0, nd_profile ) * _zla( 0, id_trs_lb + -id_trs_lt + 1 )
33333.       t$4613 = _zla( 0, nd_source_coeff )
33252.       t$4614 = _zla( 0, nd_profile ) * _zla( 0, nd_source_coeff ) * _zla( 0, id_trs_lb + -id_trs_lt + 1 )
33351.       t$4617 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 8
33355.       t$4618 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 8
33355.       t$4620 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 16
33353.       t$4621 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 16
33353.       t$4623 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 24
33347.       t$4624 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 24
33347.       t$4626 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 32
33349.       t$4627 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 32
33349.       t$4629 = _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 40
33252.       t$4615 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 40 ), 8 )
33351.       t$4616 = t$4615
33355.       t$4619 = t$4615 + _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 8
33353.       t$4622 = t$4615 + _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 16
33347.       t$4625 = t$4615 + _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 24
33349.       t$4628 = t$4615 + _zla( 0, nd_profile ) * _zla( 0, id_op_lb + -id_op_lt + 1 ) * 32
33369.       call two_coeff_basic( ierr, n_profile, i_layer_first, i_layer_last, i_2stream, asymmetry(1, id_op_lt), omega(1, id_op_lt), sum(1, id_op_lt), diff(1, id_op_lt), nd_profile, id_op_lt, id_op_lb )
33376.       if ( ierr /= 0 ) then
33252.          _free( t$4615 )
33252.       else
33384.          if ( id_op_lb + -id_op_lt >= 0 ) then
33385.             if ( nd_profile > 0 ) then
33384.                $I_L33384_10 = 0
33384.                do
33385.                   $I_L33385_8 = 0
33385. !dir$ ivdep
33385.                   do
33386.                      lambda(1 + $I_L33385_8, id_op_lt + $I_L33384_10) = _sqrt( sum(1 + $I_L33385_8, id_op_lt + $I_L33384_10) * diff(1 + $I_L33385_8, id_op_lt + $I_L33384_10) )
33387.                      $I_L33385_8 = 1 + $I_L33385_8
33385.                      if ( $I_L33385_8 >= nd_profile ) exit
33385.                   enddo
33388.                   $I_L33384_10 = 1 + $I_L33384_10
33387.                   if ( $I_L33384_10 >= id_op_lb + -id_op_lt + 1 ) exit
33387.                enddo
33387.             endif
33387.          endif
33392.          if ( isolir == 1 ) then
33395.             call solar_coefficient_basic( ierr, n_profile, i_layer_first, i_layer_last, omega(1, id_op_lt), asymmetry(1, id_op_lt), sec_00(1, id_op_lt), i_2stream, sum(1, id_op_lt), diff(1, id_op_lt), lambda(1, id_op_lt), gamma_up(1, id_op_lt), gamma_down(1, id_op_lt), nd_profile, id_op_lt, id_op_lb )
33403.             if ( ierr /= 0 ) then
33252.                _free( t$4615 )
33252.             else
33252.                goto 10
33252.             endif
33252.          else
33252.    10       continue
33408.             call trans_source_coeff( n_profile, i_layer_first, i_layer_last, isolir, l_ir_source_quad, tau(1, id_op_lt), sum(1, id_op_lt), diff(1, id_op_lt), lambda(1, id_op_lt), sec_00(1, id_op_lt), gamma_up(1, id_op_lt), gamma_down(1, id_op_lt), trans(1, id_trs_lt), reflect(1, id_trs_lt), trans_0(1, id_trs_lt), source_coeff(1, id_trs_lt, 1), nd_profile, id_op_lt, id_op_lb, id_trs_lt, id_trs_lb, nd_source_coeff )
33252.             _free( t$4615 )
33252.          endif
33252.       endif
33421.       return
33421.       end
33421.       
33561.       
33561.       subroutine two_coeff_fast_lw( n_profile, i_layer_first, i_layer_last, l_ir_source_quad, tau, trans, source_coeff, nd_profile, nd_layer, id_lt, id_lb, nd_source_coeff )
33444.       t$1339 = nd_profile
33444.       t$1340 = id_lt
33444.       t$1341 = id_lb
33491.       t$4630 = _zla( 0, nd_profile )
33444.       t$4631 = _zla( 0, nd_profile )
33444.       t$4632 = id_lb + -id_lt + 1
33491.       t$4633 = _zla( 0, id_lb + -id_lt + 1 )
33444.       t$4634 = _zla( 0, nd_profile ) * _zla( 0, id_lb + -id_lt + 1 )
33444.       t$1342 = nd_layer
33497.       t$4635 = _zla( 0, nd_layer )
33444.       t$4636 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
33444.       t$1343 = nd_source_coeff
33444.       t$4637 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
33499.       t$4638 = _zla( 0, nd_source_coeff )
33444.       t$4639 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
33527.       if ( i_layer_last + -i_layer_first >= 0 ) then
33528.          if ( n_profile > 0 ) then
33531.             if ( nd_profile + -n_profile > 0 ) then
33527.                $I_L33527_86 = 0
33527.                do
33528.                   $I_L33528_74 = 0
33528. !dir$ ivdep
33528.                   do
33529.                      trans(1 + $I_L33528_74, i_layer_first + $I_L33527_86) = -1.6599999999999999 * tau(1 + $I_L33528_74, i_layer_first + $I_L33527_86)
33530.                      $I_L33528_74 = 1 + $I_L33528_74
33528.                      if ( $I_L33528_74 >= n_profile ) exit
33528.                   enddo
33531.                   $I_L33531_76 = 0
33531. !dir$ ivdep
33531.                   do
33532.                      trans(n_profile + $I_L33531_76 + 1, i_layer_first + $I_L33527_86) = 0.0
33533.                      $I_L33531_76 = 1 + $I_L33531_76
33531.                      if ( $I_L33531_76 >= ( nd_profile + -n_profile ) ) exit
33531.                   enddo
33534.                   $I_L33527_86 = 1 + $I_L33527_86
33533.                   if ( $I_L33527_86 >= i_layer_last + -i_layer_first + 1 ) exit
33533.                enddo
33533.             else
33527.                $I_L33527_84 = 0
33527.                do
33528.                   $I_L33528_72 = 0
33528. !dir$ ivdep
33528.                   do
33529.                      trans(1 + $I_L33528_72, i_layer_first + $I_L33527_84) = -1.6599999999999999 * tau(1 + $I_L33528_72, i_layer_first + $I_L33527_84)
33530.                      $I_L33528_72 = 1 + $I_L33528_72
33528.                      if ( $I_L33528_72 >= n_profile ) exit
33528.                   enddo
33534.                   $I_L33527_84 = 1 + $I_L33527_84
33533.                   if ( $I_L33527_84 >= i_layer_last + -i_layer_first + 1 ) exit
33533.                enddo
33533.             endif
33533.          else if ( nd_profile + -n_profile > 0 ) then
33527.             $I_L33527_82 = 0
33527.             do
33531.                $I_L33531_70 = 0
33531. !dir$ ivdep
33531.                do
33532.                   trans(n_profile + $I_L33531_70 + 1, i_layer_first + $I_L33527_82) = 0.0
33533.                   $I_L33531_70 = 1 + $I_L33531_70
33531.                   if ( $I_L33531_70 >= ( nd_profile + -n_profile ) ) exit
33531.                enddo
33534.                $I_L33527_82 = 1 + $I_L33527_82
33533.                if ( $I_L33527_82 >= i_layer_last + -i_layer_first + 1 ) exit
33533.             enddo
33533.          endif
33533.       endif
33536.       ipa$29578 = loc( trans(1, i_layer_first) )
33536.       a = _copyin( trans(1, i_layer_first) )
33536.       ipa$29580 = loc( trans(1, i_layer_first) )
33536.       b = _copyin( trans(1, i_layer_first) )
33536.       t$405 = ( -( nd_profile * i_layer_first ) + nd_profile * i_layer_last + nd_profile )
33536.       t$2331 = max( 0, -( nd_profile * i_layer_first ) + nd_profile * i_layer_last + nd_profile )
33536.       if ( -( nd_profile * i_layer_first ) + nd_profile * i_layer_last + nd_profile > 0 ) then
33536.          $I_L33536_64 = 0
33536. !dir$ ivdep
33536.          do
33536.             b(1 + $I_L33536_64) = _expn( a(1 + $I_L33536_64) )
33536.             $I_L33536_64 = 1 + $I_L33536_64
33536.             if ( $I_L33536_64 >= ( nd_profile + -( nd_profile * i_layer_first ) + nd_profile * i_layer_last ) ) exit
33536.          enddo
33536.       endif
33536.       trans(1, i_layer_first) = _copyout( b )
33536.       trans(1, i_layer_first) = _copyout( a )
33539.       if ( i_layer_last + -i_layer_first >= 0 ) then
33540.          if ( n_profile > 0 ) then
33539.             $I_L33539_78 = 0
33539.             do
33540.                $I_L33540_66 = 0
33540. !dir$ ivdep
33540.                do
33541.                   source_coeff(1 + $I_L33540_66, i_layer_first + $I_L33539_78, 1) = ( ( 1.0000000149011612 + -trans(1 + $I_L33540_66, i_layer_first + $I_L33539_78) ) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau(1 + $I_L33540_66, i_layer_first + $I_L33539_78) ) )
33544.                   $I_L33540_66 = 1 + $I_L33540_66
33540.                   if ( $I_L33540_66 >= n_profile ) exit
33540.                enddo
33545.                $I_L33539_78 = 1 + $I_L33539_78
33544.                if ( $I_L33539_78 >= i_layer_last + -i_layer_first + 1 ) exit
33544.             enddo
33544.          endif
33544.       endif
33547.       if ( l_ir_source_quad ) then
33548.          if ( i_layer_last + -i_layer_first >= 0 ) then
33549.             if ( n_profile > 0 ) then
33548.                $I_L33548_80 = 0
33548.                do
33549.                   $I_L33549_68 = 0
33549. !dir$ ivdep
33549.                   do
33550.                      source_coeff(1 + $I_L33549_68, i_layer_first + $I_L33548_80, 2) = -( ( -2.0 * source_coeff(1 + $I_L33549_68, i_layer_first + $I_L33548_80, 1) + trans(1 + $I_L33549_68, i_layer_first + $I_L33548_80) + 1.0 ) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau(1 + $I_L33549_68, i_layer_first + $I_L33548_80) ) )
33554.                      $I_L33549_68 = 1 + $I_L33549_68
33549.                      if ( $I_L33549_68 >= n_profile ) exit
33549.                   enddo
33555.                   $I_L33548_80 = 1 + $I_L33548_80
33554.                   if ( $I_L33548_80 >= i_layer_last + -i_layer_first + 1 ) exit
33554.                enddo
33554.             endif
33554.          endif
33554.       endif
33561.       return
33561.       end
33561.       
33924.       
33924.       subroutine two_coeff_region( ierr, n_profile, n_layer, n_cloud_top, i_2stream, l_ir_source_quad, n_source_coeff, n_cloud_type, frac_cloud, n_region, i_region_cloud, frac_region, phase_fnc_clr, omega_clr, tau_clr, phase_fnc, omega, tau, isolir, sec_00, trans, reflect, trans_0, source_coeff, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_max_order, nd_source_coeff, nd_cloud_type, nd_region )
33593.       t$1349 = nd_profile
33593.       t$1350 = id_ct
33593.       t$1351 = nd_layer
33593.       t$1348 = nd_cloud_type
33672.       t$4640 = _zla( 0, nd_profile )
33593.       t$4641 = _zla( 0, nd_profile )
33593.       t$4642 = nd_layer + -id_ct + 1
33672.       t$4643 = _zla( 0, nd_layer + -id_ct + 1 )
33593.       t$4644 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
33672.       t$4645 = _zla( 0, nd_cloud_type )
33593.       t$4646 = _zla( 0, nd_profile ) * _zla( 0, nd_cloud_type ) * _zla( 0, nd_layer + -id_ct + 1 )
33593.       t$1352 = nd_region
33674.       t$4647 = _zla( 0, nd_region )
33593.       t$4648 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer + -id_ct + 1 )
33593.       t$1353 = nd_layer_clr
33593.       t$1354 = nd_max_order
33676.       t$4649 = _zla( 0, nd_layer_clr )
33593.       t$4650 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
33676.       t$4651 = _zla( 0, nd_max_order )
33593.       t$4652 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr ) * _zla( 0, nd_max_order )
33593.       t$4653 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
33593.       t$4654 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 )
33593.       t$4655 = 1 + nd_cloud_type
33686.       t$4656 = _zla( 0, 1 + nd_cloud_type )
33593.       t$4657 = _zla( 0, nd_profile ) * _zla( 0, nd_max_order ) * _zla( 0, nd_layer + -id_ct + 1 ) * _zla( 0, 1 + nd_cloud_type )
33593.       t$4658 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * _zla( 0, 1 + nd_cloud_type )
33708.       t$4659 = _zla( 0, nd_layer )
33593.       t$4660 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
33593.       t$4661 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
33593.       t$4662 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer )
33593.       t$1355 = nd_source_coeff
33720.       t$4663 = _zla( 0, nd_source_coeff )
33593.       t$4664 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
33593.       t$4665 = _zla( 0, nd_profile ) * _zla( 0, nd_region ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
33752.       t$4668 = 4 * _zla( 0, nd_profile )
33741.       t$4669 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
33741.       t$4671 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
33593.       t$4672 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
33745.       t$4673 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
33745.       t$4675 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
33743.       t$4676 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
33743.       t$4678 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
33739.       t$4679 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
33739.       t$4681 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
33593.       t$4666 = int( _alloc( 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 ), 8 )
33752.       t$4667 = t$4666
33741.       t$4670 = t$4666 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
33745.       t$4674 = t$4666 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
33743.       t$4677 = t$4666 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
33739.       t$4680 = t$4666 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
33767.       ipa$29582 = 1
33767.       ipa$29608 = 1
33767.       call two_coeff( ierr, n_profile, ipa$29582, n_layer, i_2stream, l_ir_source_quad, phase_fnc(1, id_ct, 1, 0), omega(1, id_ct, 0), tau(1, id_ct, 0), isolir, sec_00(1, 1), trans(1, 1, 1), reflect(1, 1, 1), trans_0(1, 1, 1), source_coeff(1, 1, 1, 1), nd_profile, id_ct, nd_layer, ipa$29608, nd_layer, nd_source_coeff )
33780.       if ( ierr /= 0 ) then
33593.          _free( t$4666 )
33593.       else
33787.          if ( n_region > 0 ) then
33813.             if ( 1 < n_region ) then
33789.                if ( n_layer + -n_cloud_top >= 0 ) then
33790.                   if ( n_profile > 0 ) then
33787.                      $I_L33787_199 = 0
33787.                      do
33789.                         $I_L33789_180 = 0
33789.                         do
33790.                            $I_L33790_163 = 0
33790. !dir$ ivdep
33790.                            do
33791.                               trans(1 + $I_L33790_163, n_cloud_top + $I_L33789_180, 2 + $I_L33787_199) = 0.0
33792.                               reflect(1 + $I_L33790_163, n_cloud_top + $I_L33789_180, 2 + $I_L33787_199) = 0.0
33793.                               $I_L33790_163 = 1 + $I_L33790_163
33790.                               if ( $I_L33790_163 >= n_profile ) exit
33790.                            enddo
33794.                            $I_L33789_180 = 1 + $I_L33789_180
33793.                            if ( $I_L33789_180 >= n_layer + -n_cloud_top + 1 ) exit
33793.                         enddo
33813.                         $I_L33787_199 = 1 + $I_L33787_199
33811.                         if ( $I_L33787_199 >= -1 + n_region ) exit
33811.                      enddo
33811.                   endif
33811.                endif
33803.                if ( isolir == 1 ) then
33804.                   if ( nd_layer > 0 ) then
33805.                      if ( nd_profile > 0 ) then
33787.                         $I_L33787_203 = 0
33787.                         do
33804.                            $I_L33804_184 = 0
33804.                            do
33805.                               $I_L33805_167 = 0
33805. !dir$ ivdep
33805.                               do
33806.                                  trans_0(1 + $I_L33805_167, 1 + $I_L33804_184, 2 + $I_L33787_203) = 0.0
33807.                                  $I_L33805_167 = 1 + $I_L33805_167
33805.                                  if ( $I_L33805_167 >= nd_profile ) exit
33805.                               enddo
33808.                               $I_L33804_184 = 1 + $I_L33804_184
33807.                               if ( $I_L33804_184 >= nd_layer ) exit
33807.                            enddo
33813.                            $I_L33787_203 = 1 + $I_L33787_203
33811.                            if ( $I_L33787_203 >= -1 + n_region ) exit
33811.                         enddo
33811.                      endif
33811.                   endif
33811.                endif
33795.                if ( n_source_coeff > 0 ) then
33796.                   if ( nd_layer > 0 ) then
33797.                      if ( nd_profile > 0 ) then
33787.                         $I_L33787_212 = 0
33787.                         do
33795.                            $I_L33795_201 = 0
33795.                            do
33796.                               $I_L33796_182 = 0
33796.                               do
33797.                                  $I_L33797_165 = 0
33797. !dir$ ivdep
33797. !dir$ loop_info (automatic) cache_nt( source_coeff )
33797.                                  do
33798.                                     source_coeff(1 + $I_L33797_165, 1 + $I_L33796_182, 1 + $I_L33795_201, 2 + $I_L33787_212) = 0.0
33799.                                     $I_L33797_165 = 1 + $I_L33797_165
33797.                                     if ( $I_L33797_165 >= nd_profile ) exit
33797.                                  enddo
33800.                                  $I_L33796_182 = 1 + $I_L33796_182
33799.                                  if ( $I_L33796_182 >= nd_layer ) exit
33799.                               enddo
33801.                               $I_L33795_201 = 1 + $I_L33795_201
33800.                               if ( $I_L33795_201 >= n_source_coeff ) exit
33800.                            enddo
33813.                            $I_L33787_212 = 1 + $I_L33787_212
33811.                            if ( $I_L33787_212 >= -1 + n_region ) exit
33811.                         enddo
33811.                      endif
33811.                   endif
33811.                endif
33811.             endif
33811.          endif
33820.          if ( n_cloud_type > 0 ) then
33820.             $I_L33820_227 = 0
33820.             do
33824.                $i_region_S11 = i_region_cloud(1 + $I_L33820_227)
33826.                ipa$29683 = 1
33826.                ipa$29705 = 1
33826.                ipa$29706 = 1
33826.                call two_coeff( ierr, nd_profile, ipa$29683, nd_layer, i_2stream, l_ir_source_quad, phase_fnc(1, 1, 1, 1 + $I_L33820_227), omega(1, 1, 1 + $I_L33820_227), tau(1, 1, 1 + $I_L33820_227), isolir, sec_00(1, 1), trans_temp(1, 1), reflect_temp(1, 1), trans_0_temp(1, 1), source_coeff_temp(1, 1, 1), nd_profile, ipa$29705, nd_layer, ipa$29706, nd_layer, nd_source_coeff )
33836.                if ( ierr /= 0 ) then
33593.                   _free( t$4666 )
33593.                   goto 20
33593.                endif
33840.                if ( nd_layer > 0 ) then
33841.                   if ( nd_profile > 0 ) then
33840.                      $I_L33840_176 = 0
33840.                      do
33841.                         $I_L33841_156 = 0
33841. !dir$ ivdep
33841.                         do
33842.                            trans(1 + $I_L33841_156, 1 + $I_L33840_176, $i_region_S11) = trans(1 + $I_L33841_156, 1 + $I_L33840_176, $i_region_S11) + frac_cloud(1 + $I_L33841_156, 1 + $I_L33840_176, 1 + $I_L33820_227) * trans_temp(1 + $I_L33841_156, 1 + $I_L33840_176)
33844.                            reflect(1 + $I_L33841_156, 1 + $I_L33840_176, $i_region_S11) = reflect(1 + $I_L33841_156, 1 + $I_L33840_176, $i_region_S11) + frac_cloud(1 + $I_L33841_156, 1 + $I_L33840_176, 1 + $I_L33820_227) * reflect_temp(1 + $I_L33841_156, 1 + $I_L33840_176)
33846.                            $I_L33841_156 = 1 + $I_L33841_156
33841.                            if ( $I_L33841_156 >= nd_profile ) exit
33841.                         enddo
33847.                         $I_L33840_176 = 1 + $I_L33840_176
33846.                         if ( $I_L33840_176 >= nd_layer ) exit
33846.                      enddo
33846.                   endif
33846.                endif
33849.                if ( n_source_coeff > 0 ) then
33850.                   if ( nd_layer > 0 ) then
33851.                      if ( nd_profile > 0 ) then
33849.                         $I_L33849_223 = 0
33849.                         do
33850.                            $I_L33850_219 = 0
33850.                            do
33851.                               $I_L33851_214 = 0
33851.                               do
33849.                                  $I_L33849_196 = 0
33849.                                  if ( min( n_source_coeff, 8 + 8 * $I_L33849_223 ) + -8 * $I_L33849_223 >= 4 ) then
33849.                                     $I_L33849_236 = 0
33849. !dir$ shortloop16
33849. !dir$ blocking_size( 8, 8 )
33849.                                     do
33850.                                        $I_L33850_190 = 0
33850. !dir$ shortloop16
33850. !dir$ blocking_size( 8, 8 )
33850.                                        do
33851.                                           $I_L33851_158 = 0
33851. !dir$ ivdep
33851. !dir$ blocking_size( 256, 256 )
33851.                                           do
33852.                                              source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 1, $i_region_S11) = source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 1, $i_region_S11) + frac_cloud($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 1 + $I_L33820_227) * source_coeff_temp($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 1)
33852.                                              source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 2, $i_region_S11) = source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 2, $i_region_S11) + frac_cloud($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 1 + $I_L33820_227) * source_coeff_temp($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 2)
33852.                                              source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 3, $i_region_S11) = source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 3, $i_region_S11) + frac_cloud($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 1 + $I_L33820_227) * source_coeff_temp($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 3)
33852.                                              source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 4, $i_region_S11) = source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 4, $i_region_S11) + frac_cloud($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 1 + $I_L33820_227) * source_coeff_temp($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 8 * $I_L33849_223 + 4 * $I_L33849_236 + 4)
33851.                                              $I_L33851_158 = 1 + $I_L33851_158
33851.                                              if ( $I_L33851_158 >= min( nd_profile, 256 + 256 * $I_L33851_214 ) + -256 * $I_L33851_214 ) exit
33851.                                           enddo
33850.                                           $I_L33850_190 = 1 + $I_L33850_190
33850.                                           if ( $I_L33850_190 >= min( nd_layer, 8 + 8 * $I_L33850_219 ) + -8 * $I_L33850_219 ) exit
33850.                                        enddo
33849.                                        $I_L33849_236 = 1 + $I_L33849_236
33856.                                        if ( $I_L33849_236 >= _rsh( min( n_source_coeff, 8 + 8 * $I_L33849_223 ) + -8 * $I_L33849_223, 2 ) ) exit
33856.                                     enddo
33849.                                     $I_L33849_196 = and( 0xfffffffffffffffcUL, min( n_source_coeff, 8 + 8 * $I_L33849_223 ) + -8 * $I_L33849_223 )
33849.                                  endif
33849.                                  if ( $I_L33849_196 < min( n_source_coeff, 8 + 8 * $I_L33849_223 ) + -8 * $I_L33849_223 ) then
33849.                                     $I_L33849_233 = 0
33849. !dir$ shortloop16
33849. !dir$ blocking_size( 8, 8 )
33849.                                     do
33850.                                        $I_L33850_190 = 0
33850. !dir$ shortloop16
33850. !dir$ blocking_size( 8, 8 )
33850.                                        do
33851.                                           $I_L33851_158 = 0
33851. !dir$ ivdep
33851. !dir$ blocking_size( 256, 256 )
33851.                                           do
33852.                                              source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, $I_L33849_196 + $I_L33849_233 + 8 * $I_L33849_223 + 1, $i_region_S11) = source_coeff($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, $I_L33849_196 + $I_L33849_233 + 8 * $I_L33849_223 + 1, $i_region_S11) + frac_cloud($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, 1 + $I_L33820_227) * source_coeff_temp($I_L33851_158 + 256 * $I_L33851_214 + 1, $I_L33850_190 + 8 * $I_L33850_219 + 1, $I_L33849_196 + $I_L33849_233 + 8 * $I_L33849_223 + 1)
33851.                                              $I_L33851_158 = 1 + $I_L33851_158
33851.                                              if ( $I_L33851_158 >= min( nd_profile, 256 + 256 * $I_L33851_214 ) + -256 * $I_L33851_214 ) exit
33851.                                           enddo
33850.                                           $I_L33850_190 = 1 + $I_L33850_190
33850.                                           if ( $I_L33850_190 >= min( nd_layer, 8 + 8 * $I_L33850_219 ) + -8 * $I_L33850_219 ) exit
33850.                                        enddo
33849.                                        $I_L33849_233 = 1 + $I_L33849_233
33856.                                        if ( $I_L33849_233 >= min( n_source_coeff, 8 + 8 * $I_L33849_223 ) + -$I_L33849_196 + -8 * $I_L33849_223 ) exit
33856.                                     enddo
33856.                                  endif
33851.                                  $I_L33851_214 = 1 + $I_L33851_214
33851.                                  if ( $I_L33851_214 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
33851.                               enddo
33850.                               $I_L33850_219 = 1 + $I_L33850_219
33857.                               if ( $I_L33850_219 >= 1 + max( 0, -1 + _rsh( 7 + nd_layer, 3 ) ) ) exit
33857.                            enddo
33849.                            $I_L33849_223 = 1 + $I_L33849_223
33849.                            if ( $I_L33849_223 >= 1 + max( 0, -1 + _rsh( 7 + n_source_coeff, 3 ) ) ) exit
33849.                         enddo
33849.                      endif
33849.                   endif
33849.                endif
33859.                if ( isolir == 1 ) then
33861.                   if ( nd_layer > 0 ) then
33862.                      if ( nd_profile > 0 ) then
33861.                         $I_L33861_178 = 0
33861.                         do
33862.                            $I_L33862_161 = 0
33862. !dir$ ivdep
33862.                            do
33863.                               trans_0(1 + $I_L33862_161, 1 + $I_L33861_178, $i_region_S11) = trans_0(1 + $I_L33862_161, 1 + $I_L33861_178, $i_region_S11) + frac_cloud(1 + $I_L33862_161, 1 + $I_L33861_178, 1 + $I_L33820_227) * trans_0_temp(1 + $I_L33862_161, 1 + $I_L33861_178)
33865.                               $I_L33862_161 = 1 + $I_L33862_161
33862.                               if ( $I_L33862_161 >= nd_profile ) exit
33862.                            enddo
33866.                            $I_L33861_178 = 1 + $I_L33861_178
33865.                            if ( $I_L33861_178 >= nd_layer ) exit
33865.                         enddo
33865.                      endif
33865.                   endif
33865.                endif
33868.                $I_L33820_227 = 1 + $I_L33820_227
33867.                if ( $I_L33820_227 >= n_cloud_type ) exit
33867.             enddo
33867.             goto 10
33867.          else
33867.    10       continue
33872.             if ( n_region > 0 ) then
33919.                if ( 1 < n_region ) then
33876.                   if ( nd_layer > 0 ) then
33877.                      if ( nd_profile > 0 ) then
33872.                         $I_L33872_205 = 0
33872.                         do
33876.                            $I_L33876_186 = 0
33876.                            do
33877.                               $I_L33877_169 = 0
33877. !dir$ ivdep
33877. !dir$ loop_info (automatic) cache_nt( reflect )
33877.                               do
33878.                                  if ( frac_region(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) > 0.0 ) then
33879.                                     trans(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) = ( trans(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) * 1.0/frac_region(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) )
33881.                                     reflect(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) = ( reflect(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) * 1.0/frac_region(1 + $I_L33877_169, 1 + $I_L33876_186, 2 + $I_L33872_205) )
33881.                                  endif
33884.                                  $I_L33877_169 = 1 + $I_L33877_169
33883.                                  if ( $I_L33877_169 >= nd_profile ) exit
33883.                               enddo
33885.                               $I_L33876_186 = 1 + $I_L33876_186
33884.                               if ( $I_L33876_186 >= nd_layer ) exit
33884.                            enddo
33919.                            $I_L33872_205 = 1 + $I_L33872_205
33918.                            if ( $I_L33872_205 >= -1 + n_region ) exit
33918.                         enddo
33918.                      endif
33918.                   endif
33907.                   if ( isolir == 1 ) then
33909.                      if ( nd_layer > 0 ) then
33910.                         if ( nd_profile > 0 ) then
33872.                            $I_L33872_210 = 0
33872.                            do
33909.                               $I_L33909_188 = 0
33909.                               do
33910.                                  $I_L33910_174 = 0
33910. !dir$ ivdep
33910.                                  do
33911.                                     if ( frac_region(1 + $I_L33910_174, 1 + $I_L33909_188, 2 + $I_L33872_210) > 0.0 ) then
33912.                                        trans_0(1 + $I_L33910_174, 1 + $I_L33909_188, 2 + $I_L33872_210) = ( trans_0(1 + $I_L33910_174, 1 + $I_L33909_188, 2 + $I_L33872_210) * 1.0/frac_region(1 + $I_L33910_174, 1 + $I_L33909_188, 2 + $I_L33872_210) )
33912.                                     endif
33915.                                     $I_L33910_174 = 1 + $I_L33910_174
33914.                                     if ( $I_L33910_174 >= nd_profile ) exit
33914.                                  enddo
33916.                                  $I_L33909_188 = 1 + $I_L33909_188
33915.                                  if ( $I_L33909_188 >= nd_layer ) exit
33915.                               enddo
33919.                               $I_L33872_210 = 1 + $I_L33872_210
33918.                               if ( $I_L33872_210 >= -1 + n_region ) exit
33918.                            enddo
33918.                         endif
33918.                      endif
33918.                   endif
33895.                   if ( n_source_coeff > 0 ) then
33896.                      if ( nd_layer > 0 ) then
33897.                         if ( nd_profile > 0 ) then
33872.                            $I_L33872_231 = 0
33872.                            do
33896.                               $I_L33896_229 = 0
33896.                               do
33895.                                  $I_L33895_225 = 0
33895.                                  do
33897.                                     $I_L33897_221 = 0
33897.                                     do
33872.                                        $I_L33872_216 = 0
33872. !dir$ shortloop16
33872. !dir$ blocking_size( 8, 8 )
33872.                                        do
33896.                                           $I_L33896_207 = 0
33896. !dir$ shortloop16
33896. !dir$ blocking_size( 8, 8 )
33896.                                           do
33895.                                              $I_L33895_193 = 0
33895. !dir$ shortloop16
33895. !dir$ blocking_size( 16, 16 )
33895.                                              do
33897.                                                 $I_L33897_171 = 0
33897. !dir$ ivdep
33897. !dir$ loop_info (automatic) cache_nt( source_coeff )
33897. !dir$ blocking_size( 256, 256 )
33897.                                                 do
33898.                                                    if ( frac_region($I_L33897_171 + 256 * $I_L33897_221 + 1, $I_L33896_207 + 8 * $I_L33896_229 + 1, $I_L33872_216 + 8 * $I_L33872_231 + 2) > 0.0 ) then
33899.                                                       source_coeff($I_L33897_171 + 256 * $I_L33897_221 + 1, $I_L33896_207 + 8 * $I_L33896_229 + 1, $I_L33895_193 + 16 * $I_L33895_225 + 1, $I_L33872_216 + 8 * $I_L33872_231 + 2) = ( source_coeff($I_L33897_171 + 256 * $I_L33897_221 + 1, $I_L33896_207 + 8 * $I_L33896_229 + 1, $I_L33895_193 + 16 * $I_L33895_225 + 1, $I_L33872_216 + 8 * $I_L33872_231 + 2) * 1.0/frac_region($I_L33897_171 + 256 * $I_L33897_221 + 1, $I_L33896_207 + 8 * $I_L33896_229 + 1, $I_L33872_216 + 8 * $I_L33872_231 + 2) )
33899.                                                    endif
33897.                                                    $I_L33897_171 = 1 + $I_L33897_171
33902.                                                    if ( $I_L33897_171 >= min( nd_profile, 256 + 256 * $I_L33897_221 ) + -256 * $I_L33897_221 ) exit
33902.                                                 enddo
33895.                                                 $I_L33895_193 = 1 + $I_L33895_193
33895.                                                 if ( $I_L33895_193 >= min( n_source_coeff, 16 + 16 * $I_L33895_225 ) + -16 * $I_L33895_225 ) exit
33895.                                              enddo
33896.                                              $I_L33896_207 = 1 + $I_L33896_207
33903.                                              if ( $I_L33896_207 >= min( nd_layer, 8 + 8 * $I_L33896_229 ) + -8 * $I_L33896_229 ) exit
33903.                                           enddo
33872.                                           $I_L33872_216 = 1 + $I_L33872_216
33872.                                           if ( $I_L33872_216 >= min( -1 + n_region, 8 + 8 * $I_L33872_231 ) + -8 * $I_L33872_231 ) exit
33872.                                        enddo
33897.                                        $I_L33897_221 = 1 + $I_L33897_221
33904.                                        if ( $I_L33897_221 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
33904.                                     enddo
33895.                                     $I_L33895_225 = 1 + $I_L33895_225
33895.                                     if ( $I_L33895_225 >= 1 + max( 0, -1 + _rsh( 15 + n_source_coeff, 4 ) ) ) exit
33895.                                  enddo
33896.                                  $I_L33896_229 = 1 + $I_L33896_229
33918.                                  if ( $I_L33896_229 >= 1 + max( 0, -1 + _rsh( 7 + nd_layer, 3 ) ) ) exit
33918.                               enddo
33872.                               $I_L33872_231 = 1 + $I_L33872_231
33872.                               if ( $I_L33872_231 >= 1 + max( 0, -1 + _rsh( 6 + n_region, 3 ) ) ) exit
33872.                            enddo
33872.                         endif
33872.                      endif
33872.                   endif
33872.                endif
33872.             endif
33593.             _free( t$4666 )
33593.          endif
33593.       endif
33593.    20 continue
33924.       return
33924.       end
33924.       
34242.       
34242.       subroutine two_coeff_region_fast_lw( ierr, n_profile, n_layer, n_cloud_top, l_ir_source_quad, n_source_coeff, n_cloud_type, frac_cloud, n_region, i_region_cloud, frac_region, tau_clr, tau, isolir, trans, reflect, source_coeff, nd_profile, nd_layer, nd_layer_clr, id_ct, nd_source_coeff, nd_cloud_type, nd_region )
33956.       t$1362 = nd_profile
33956.       t$1363 = nd_layer
33956.       t$1361 = nd_cloud_type
34031.       t$4682 = _zla( 0, nd_profile )
33956.       t$4683 = _zla( 0, nd_profile )
34031.       t$4684 = _zla( 0, nd_layer )
33956.       t$4685 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
34031.       t$4686 = _zla( 0, nd_cloud_type )
33956.       t$4687 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_cloud_type )
33956.       t$1364 = nd_region
34033.       t$4688 = _zla( 0, nd_region )
33956.       t$4689 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_region )
33956.       t$1365 = nd_layer_clr
34035.       t$4690 = _zla( 0, nd_layer_clr )
33956.       t$4691 = _zla( 0, nd_profile ) * _zla( 0, nd_layer_clr )
33956.       t$1366 = id_ct
33956.       t$4692 = nd_layer + -id_ct + 1
34037.       t$4693 = _zla( 0, nd_layer + -id_ct + 1 )
33956.       t$4694 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 )
33956.       t$4695 = 1 + nd_cloud_type
34037.       t$4696 = _zla( 0, 1 + nd_cloud_type )
33956.       t$4697 = _zla( 0, nd_profile ) * _zla( 0, nd_layer + -id_ct + 1 ) * _zla( 0, 1 + nd_cloud_type )
33956.       t$1367 = nd_source_coeff
34046.       t$4698 = _zla( 0, nd_source_coeff )
33956.       t$4699 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
33956.       t$4700 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * _zla( 0, nd_region )
34074.       t$4703 = 4 * _zla( 0, nd_profile )
33956.       t$4704 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
34067.       t$4705 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
34067.       t$4707 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
33956.       t$4708 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
34078.       t$4709 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
34078.       t$4711 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
34080.       t$4712 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
34080.       t$4714 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
34065.       t$4715 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
34065.       t$4717 = 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
33956.       t$4701 = int( _alloc( 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + 8 * _zla( 0, nd_profile ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 ), 8 )
34074.       t$4702 = t$4701
34067.       t$4706 = t$4701 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 )
34078.       t$4710 = t$4701 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
34080.       t$4713 = t$4701 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
34065.       t$4716 = t$4701 + 8 * ( ( 7 + 4 * _zla( 0, nd_profile ) ) / 8 ) + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + 8 * _zla( 0, nd_profile )
34090.       if ( isolir /= 2 ) then
34091.          _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1369,  _substr(t$1368,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '*** Error: Erroneous USE of non-scattering code.', 0x800600000000L ) ) )
34093.          ierr = 1
33956.          _free( t$4701 )
33956.       else
34100.          t$1339 = nd_profile
34100.          t$1340 = 1
34100.          t$1341 = nd_layer_clr
34100.          t$4630 = _zla( 0, nd_profile )
34100.          t$4631 = nd_profile
34100.          t$4632 = nd_layer_clr
34100.          t$4633 = _zla( 0, nd_layer_clr )
34100.          t$4634 = nd_profile * _zla( 0, nd_layer_clr )
34100.          t$1342 = nd_layer
34100.          t$4635 = _zla( 0, nd_layer )
34100.          t$4636 = ( nd_profile * nd_layer )
34100.          t$1343 = nd_source_coeff
34100.          t$4637 = nd_layer * nd_profile
34100.          t$4638 = _zla( 0, nd_source_coeff )
34100.          t$4639 = ( nd_profile * nd_layer * nd_source_coeff )
34100.          if ( -1 + n_cloud_top > 0 ) then
34100.             if ( n_profile > 0 ) then
34100.                if ( nd_profile + -n_profile > 0 ) then
34100.                   $I_L34100_282 = 0
34100.                   do
34100.                      $I_L34100_260 = 0
34100. !dir$ ivdep
34100.                      do
34100.                         trans(1 + $I_L34100_260, 1 + $I_L34100_282, 1) = -1.6599999999999999 * tau_clr(1 + $I_L34100_260, 1 + $I_L34100_282)
34100.                         $I_L34100_260 = 1 + $I_L34100_260
34100.                         if ( $I_L34100_260 >= n_profile ) exit
34100.                      enddo
34100.                      $I_L34100_262 = 0
34100. !dir$ ivdep
34100.                      do
34100.                         trans(n_profile + $I_L34100_262 + 1, 1 + $I_L34100_282, 1) = 0.0
34100.                         $I_L34100_262 = 1 + $I_L34100_262
34100.                         if ( $I_L34100_262 >= ( nd_profile + -n_profile ) ) exit
34100.                      enddo
34100.                      $I_L34100_282 = 1 + $I_L34100_282
34100.                      if ( $I_L34100_282 >= -1 + n_cloud_top ) exit
34100.                   enddo
34100.                else
34100.                   $I_L34100_280 = 0
34100.                   do
34100.                      $I_L34100_258 = 0
34100. !dir$ ivdep
34100.                      do
34100.                         trans(1 + $I_L34100_258, 1 + $I_L34100_280, 1) = -1.6599999999999999 * tau_clr(1 + $I_L34100_258, 1 + $I_L34100_280)
34100.                         $I_L34100_258 = 1 + $I_L34100_258
34100.                         if ( $I_L34100_258 >= n_profile ) exit
34100.                      enddo
34100.                      $I_L34100_280 = 1 + $I_L34100_280
34100.                      if ( $I_L34100_280 >= -1 + n_cloud_top ) exit
34100.                   enddo
34100.                endif
34100.             else if ( nd_profile + -n_profile > 0 ) then
34100.                $I_L34100_278 = 0
34100.                do
34100.                   $I_L34100_256 = 0
34100. !dir$ ivdep
34100.                   do
34100.                      trans(n_profile + $I_L34100_256 + 1, 1 + $I_L34100_278, 1) = 0.0
34100.                      $I_L34100_256 = 1 + $I_L34100_256
34100.                      if ( $I_L34100_256 >= ( nd_profile + -n_profile ) ) exit
34100.                   enddo
34100.                   $I_L34100_278 = 1 + $I_L34100_278
34100.                   if ( $I_L34100_278 >= -1 + n_cloud_top ) exit
34100.                enddo
34100.             endif
34100.          endif
34100.          ipa$29811 = loc( trans(1, 1, 1) )
34100.          a = _copyin( trans(1, 1, 1) )
34100.          ipa$29813 = loc( trans(1, 1, 1) )
34100.          b = _copyin( trans(1, 1, 1) )
34100.          t$405 = ( -nd_profile + nd_profile * n_cloud_top )
34100.          t$2331 = max( 0, -nd_profile + nd_profile * n_cloud_top )
34100.          if ( -nd_profile + nd_profile * n_cloud_top > 0 ) then
34100.             $I_L34100_226 = 0
34100. !dir$ ivdep
34100.             do
34100.                b(1 + $I_L34100_226) = _expn( a(1 + $I_L34100_226) )
34100.                $I_L34100_226 = 1 + $I_L34100_226
34100.                if ( $I_L34100_226 >= ( -nd_profile + nd_profile * n_cloud_top ) ) exit
34100.             enddo
34100.          endif
34100.          trans(1, 1, 1) = _copyout( b )
34100.          trans(1, 1, 1) = _copyout( a )
34100.          if ( -1 + n_cloud_top > 0 ) then
34100.             if ( n_profile > 0 ) then
34100.                $I_L34100_268 = 0
34100.                do
34100.                   $I_L34100_228 = 0
34100. !dir$ ivdep
34100.                   do
34100.                      source_coeff(1 + $I_L34100_228, 1 + $I_L34100_268, 1, 1) = ( ( 1.0000000149011612 + -trans(1 + $I_L34100_228, 1 + $I_L34100_268, 1) ) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau_clr(1 + $I_L34100_228, 1 + $I_L34100_268) ) )
34100.                      $I_L34100_228 = 1 + $I_L34100_228
34100.                      if ( $I_L34100_228 >= n_profile ) exit
34100.                   enddo
34100.                   $I_L34100_268 = 1 + $I_L34100_268
34100.                   if ( $I_L34100_268 >= -1 + n_cloud_top ) exit
34100.                enddo
34100.             endif
34100.          endif
34100.          if ( l_ir_source_quad ) then
34100.             if ( -1 + n_cloud_top > 0 ) then
34100.                if ( n_profile > 0 ) then
34100.                   $I_L34100_270 = 0
34100.                   do
34100.                      $I_L34100_230 = 0
34100. !dir$ ivdep
34100.                      do
34100.                         source_coeff(1 + $I_L34100_230, 1 + $I_L34100_270, 2, 1) = -( ( -2.0 * source_coeff(1 + $I_L34100_230, 1 + $I_L34100_270, 1, 1) + trans(1 + $I_L34100_230, 1 + $I_L34100_270, 1) + 1.0 ) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau_clr(1 + $I_L34100_230, 1 + $I_L34100_270) ) )
34100.                         $I_L34100_230 = 1 + $I_L34100_230
34100.                         if ( $I_L34100_230 >= n_profile ) exit
34100.                      enddo
34100.                      $I_L34100_270 = 1 + $I_L34100_270
34100.                      if ( $I_L34100_270 >= -1 + n_cloud_top ) exit
34100.                   enddo
34100.                endif
34100.             endif
34100.          endif
34106.          call two_coeff_fast_lw( n_profile, n_cloud_top, n_layer, l_ir_source_quad, tau_clr(1, 1), trans(1, 1, 1), source_coeff(1, 1, 1, 1), nd_profile, nd_layer, id_ct, nd_layer, nd_source_coeff )
34112.          if ( ierr /= 0 ) then
33956.             _free( t$4701 )
33956.          else
34113.             if ( n_layer > 0 ) then
34114.                if ( n_profile > 0 ) then
34113.                   $I_L34113_272 = 0
34113.                   do
34114.                      $I_L34114_232 = 0
34114. !dir$ ivdep
34114.                      do
34115.                         reflect(1 + $I_L34114_232, 1 + $I_L34113_272, 1) = 0.0
34116.                         $I_L34114_232 = 1 + $I_L34114_232
34114.                         if ( $I_L34114_232 >= n_profile ) exit
34114.                      enddo
34117.                      $I_L34113_272 = 1 + $I_L34113_272
34116.                      if ( $I_L34113_272 >= n_layer ) exit
34116.                   enddo
34116.                endif
34116.             endif
34124.             if ( n_region > 0 ) then
34142.                if ( 1 < n_region ) then
34126.                   if ( n_layer + -n_cloud_top >= 0 ) then
34127.                      if ( n_profile > 0 ) then
34124.                         $I_L34124_292 = 0
34124.                         do
34126.                            $I_L34126_284 = 0
34126.                            do
34127.                               $I_L34127_264 = 0
34127. !dir$ ivdep
34127.                               do
34128.                                  trans(1 + $I_L34127_264, n_cloud_top + $I_L34126_284, 2 + $I_L34124_292) = 0.0
34129.                                  reflect(1 + $I_L34127_264, n_cloud_top + $I_L34126_284, 2 + $I_L34124_292) = 0.0
34130.                                  $I_L34127_264 = 1 + $I_L34127_264
34127.                                  if ( $I_L34127_264 >= n_profile ) exit
34127.                               enddo
34131.                               $I_L34126_284 = 1 + $I_L34126_284
34130.                               if ( $I_L34126_284 >= n_layer + -n_cloud_top + 1 ) exit
34130.                            enddo
34142.                            $I_L34124_292 = 1 + $I_L34124_292
34140.                            if ( $I_L34124_292 >= -1 + n_region ) exit
34140.                         enddo
34140.                      endif
34140.                   endif
34132.                   if ( n_source_coeff > 0 ) then
34133.                      if ( n_layer + -n_cloud_top >= 0 ) then
34134.                         if ( n_profile > 0 ) then
34124.                            $I_L34124_300 = 0
34124.                            do
34132.                               $I_L34132_294 = 0
34132.                               do
34133.                                  $I_L34133_286 = 0
34133.                                  do
34134.                                     $I_L34134_266 = 0
34134. !dir$ ivdep
34134. !dir$ loop_info (automatic) cache_nt( source_coeff )
34134.                                     do
34135.                                        source_coeff(1 + $I_L34134_266, n_cloud_top + $I_L34133_286, 1 + $I_L34132_294, 2 + $I_L34124_300) = 0.0
34136.                                        $I_L34134_266 = 1 + $I_L34134_266
34134.                                        if ( $I_L34134_266 >= n_profile ) exit
34134.                                     enddo
34137.                                     $I_L34133_286 = 1 + $I_L34133_286
34136.                                     if ( $I_L34133_286 >= n_layer + -n_cloud_top + 1 ) exit
34136.                                  enddo
34138.                                  $I_L34132_294 = 1 + $I_L34132_294
34137.                                  if ( $I_L34132_294 >= n_source_coeff ) exit
34137.                               enddo
34142.                               $I_L34124_300 = 1 + $I_L34124_300
34140.                               if ( $I_L34124_300 >= -1 + n_region ) exit
34140.                            enddo
34140.                         endif
34140.                      endif
34140.                   endif
34140.                endif
34140.             endif
34149.             if ( n_cloud_type <= 0 ) then
34142.                goto 10
34142.             else if ( n_layer + -n_cloud_top >= 0 ) then
34149.                $I_L34149_296 = 0
34149. !dir$ loop_info (automatic) cache_nt( i_region_cloud )
34149.                do
34153.                   $i_region_S31 = i_region_cloud(1 + $I_L34149_296)
34155.                   $I_L34155_288 = 0
34155.                   do
34159.                      $n_list_S19 = 0
34160.                      if ( n_profile > 0 ) then
34160.                         $I_L34160_234 = 0
34160. !dir$ ivdep
34160.                         do
34161.                            if ( frac_cloud(1 + $I_L34160_234, n_cloud_top + $I_L34155_288, 1 + $I_L34149_296) > 0.0 ) then
34162.                               $n_list_S19 = 1 + $n_list_S19
34163.                               l_list($n_list_S19) = ( 1 + $I_L34160_234 )
34163.                            endif
34165.                            $I_L34160_234 = 1 + $I_L34160_234
34164.                            if ( $I_L34160_234 >= n_profile ) exit
34164.                         enddo
34164.                      endif
34168.                      if ( $n_list_S19 > 0 ) then
34175.                         $I_L34175_236 = 0
34175. !dir$ ivdep
34175.                         do
34176.                            tau_gathered(1 + $I_L34175_236, n_cloud_top + $I_L34155_288) = tau(l_list(1 + $I_L34175_236), n_cloud_top + $I_L34155_288, 1 + $I_L34149_296)
34179.                            trans_temp(1 + $I_L34175_236, n_cloud_top + $I_L34155_288) = -1.6599999999999999 * tau_gathered(1 + $I_L34175_236, n_cloud_top + $I_L34155_288 + -id_ct + 1)
34177.                            $I_L34175_236 = 1 + $I_L34175_236
34175.                            if ( $I_L34175_236 >= $n_list_S19 ) exit
34175.                         enddo
34179.                         t$1339 = nd_profile
34179.                         t$1340 = id_ct
34179.                         t$1341 = nd_layer
34179.                         t$4630 = max( 0, nd_profile )
34179.                         t$4631 = nd_profile
34179.                         t$4632 = nd_layer + -id_ct + 1
34179.                         t$4633 = max( 0, nd_layer + -id_ct + 1 )
34179.                         t$4634 = nd_profile * max( 0, nd_layer + -id_ct + 1 )
34179.                         t$1342 = nd_layer
34179.                         t$4635 = max( 0, nd_layer )
34179.                         t$4636 = ( nd_profile * nd_layer )
34179.                         t$1343 = nd_source_coeff
34179.                         t$4637 = nd_layer * nd_profile
34179.                         t$4638 = max( 0, nd_source_coeff )
34179.                         t$4639 = ( nd_profile * nd_layer * nd_source_coeff )
34179.                         if ( nd_profile + -$n_list_S19 > 0 ) then
34179.                            $I_L34179_238 = 0
34179. !dir$ ivdep
34179.                            do
34179.                               trans_temp($n_list_S19 + $I_L34179_238 + 1, n_cloud_top + $I_L34155_288) = 0.0
34179.                               $I_L34179_238 = 1 + $I_L34179_238
34179.                               if ( $I_L34179_238 >= ( nd_profile + -$n_list_S19 ) ) exit
34179.                            enddo
34179.                         endif
34179.                         ipa$29859 = loc( trans_temp(1, n_cloud_top + $I_L34155_288) )
34179.                         a = _copyin( trans_temp(1, n_cloud_top + $I_L34155_288) )
34179.                         ipa$29861 = loc( trans_temp(1, n_cloud_top + $I_L34155_288) )
34179.                         b = _copyin( trans_temp(1, n_cloud_top + $I_L34155_288) )
34179.                         t$405 = nd_profile
34179.                         t$2331 = max( 0, nd_profile )
34179.                         if ( nd_profile > 0 ) then
34179.                            $I_L34179_240 = 0
34179. !dir$ ivdep
34179.                            do
34179.                               b(1 + $I_L34179_240) = _expn( a(1 + $I_L34179_240) )
34179.                               $I_L34179_240 = 1 + $I_L34179_240
34179.                               if ( $I_L34179_240 >= nd_profile ) exit
34179.                            enddo
34179.                         endif
34179.                         trans_temp(1, n_cloud_top + $I_L34155_288) = _copyout( b )
34179.                         trans_temp(1, n_cloud_top + $I_L34155_288) = _copyout( a )
34179.                         $I_L34179_242 = 0
34179. !dir$ ivdep
34179.                         do
34179.                            source_coeff_temp(1 + $I_L34179_242, n_cloud_top + $I_L34155_288, 1) = ( ( 1.0000000149011612 + -trans_temp(1 + $I_L34179_242, n_cloud_top + $I_L34155_288) ) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau_gathered(1 + $I_L34179_242, n_cloud_top + $I_L34155_288 + -id_ct + 1) ) )
34179.                            $I_L34179_242 = 1 + $I_L34179_242
34179.                            if ( $I_L34179_242 >= $n_list_S19 ) exit
34179.                         enddo
34179.                         if ( l_ir_source_quad ) then
34179.                            $I_L34179_244 = 0
34179. !dir$ ivdep
34179.                            do
34179.                               source_coeff_temp(1 + $I_L34179_244, n_cloud_top + $I_L34155_288, 2) = -( ( -2.0 * source_coeff_temp(1 + $I_L34179_244, n_cloud_top + $I_L34155_288, 1) + trans_temp(1 + $I_L34179_244, n_cloud_top + $I_L34155_288) + 1.0 ) * 1.0/( 1.4901161193847656e-8 + 1.6599999999999999 * tau_gathered(1 + $I_L34179_244, n_cloud_top + $I_L34155_288 + -id_ct + 1) ) )
34179.                               $I_L34179_244 = 1 + $I_L34179_244
34179.                               if ( $I_L34179_244 >= $n_list_S19 ) exit
34179.                            enddo
34179.                         endif
34187.                         $I_L34187_246 = 0
34187. !dir$ ivdep
34187.                         do
34188.                            $l_S30 = l_list(1 + $I_L34187_246)
34189.                            trans($l_S30, n_cloud_top + $I_L34155_288, $i_region_S31) = _vu_plus( trans($l_S30, n_cloud_top + $I_L34155_288, $i_region_S31), frac_cloud($l_S30, n_cloud_top + $I_L34155_288, 1 + $I_L34149_296) * trans_temp(1 + $I_L34187_246, n_cloud_top + $I_L34155_288) )
34191.                            $I_L34187_246 = 1 + $I_L34187_246
34187.                            if ( $I_L34187_246 >= $n_list_S19 ) exit
34187.                         enddo
34192.                         if ( n_source_coeff > 0 ) then
34192.                            $I_L34192_274 = 0
34192. !dir$ blocking_size( 0, 0 )
34192.                            do
34193.                               $I_L34193_248 = 0
34193. !dir$ ivdep
34193. !dir$ blocking_size( 0, 0 )
34193.                               do
34194.                                  $l_S34 = l_list(1 + $I_L34193_248)
34195.                                  source_coeff($l_S34, n_cloud_top + $I_L34155_288, 1 + $I_L34192_274, $i_region_S31) = _vu_plus( source_coeff($l_S34, n_cloud_top + $I_L34155_288, 1 + $I_L34192_274, $i_region_S31), frac_cloud($l_S34, n_cloud_top + $I_L34155_288, 1 + $I_L34149_296) * source_coeff_temp(1 + $I_L34193_248, n_cloud_top + $I_L34155_288, 1 + $I_L34192_274) )
34199.                                  $I_L34193_248 = 1 + $I_L34193_248
34193.                                  if ( $I_L34193_248 >= $n_list_S19 ) exit
34193.                               enddo
34200.                               $I_L34192_274 = 1 + $I_L34192_274
34199.                               if ( $I_L34192_274 >= n_source_coeff ) exit
34199.                            enddo
34199.                         endif
34204.                         $I_L34155_288 = 1 + $I_L34155_288
34202.                      else
34202.                      endif
34202.                      if ( $I_L34155_288 >= n_layer + -n_cloud_top + 1 ) exit
34202.                   enddo
34205.                   $I_L34149_296 = 1 + $I_L34149_296
34204.                   if ( $I_L34149_296 >= n_cloud_type ) exit
34204.                enddo
34204.                goto 10
34204.             else
34204.    10          continue
34209.                if ( n_region > 0 ) then
34211.                   if ( n_layer + -n_cloud_top >= 0 ) then
34237.                      if ( 1 < n_region ) then
34209.                         $SI_L34209_298_G4 = 0
34209.                         do
34211.                            $SI_L34211_290_G7 = 0
34211.                            do
34209.                               $I_L34209_305 = 0
34209. !dir$ shortloop16
34209. !dir$ blocking_size( 8, 8 )
34209.                               do
34211.                                  $I_L34211_302 = 0
34211. !dir$ shortloop16
34211. !dir$ blocking_size( 8, 8 )
34211.                                  do
34214.                                     $n_list_S38 = 0
34215.                                     if ( n_profile > 0 ) then
34215.                                        $I_L34215_250 = 0
34215. !dir$ ivdep
34215.                                        do
34216.                                           if ( frac_region(1 + $I_L34215_250, n_cloud_top + $I_L34211_302 + 8 * $SI_L34211_290_G7, $I_L34209_305 + 8 * $SI_L34209_298_G4 + 2) > 0.0 ) then
34217.                                              $n_list_S38 = 1 + $n_list_S38
34218.                                              l_list($n_list_S38) = ( 1 + $I_L34215_250 )
34218.                                           endif
34220.                                           $I_L34215_250 = 1 + $I_L34215_250
34219.                                           if ( $I_L34215_250 >= n_profile ) exit
34219.                                        enddo
34219.                                     endif
34221.                                     if ( $n_list_S38 > 0 ) then
34221.                                        $I_L34221_252 = 0
34221. !dir$ ivdep
34221.                                        do
34222.                                           $l_S40 = l_list(1 + $I_L34221_252)
34223.                                           $tmp_inv_WR0_R0 = 1.0/frac_region($l_S40, n_cloud_top + $I_L34211_302 + 8 * $SI_L34211_290_G7, $I_L34209_305 + 8 * $SI_L34209_298_G4 + 2)
34223.                                           tmp_inv(1 + $I_L34221_252) = $tmp_inv_WR0_R0
34224.                                           trans($l_S40, n_cloud_top + $I_L34211_302 + 8 * $SI_L34211_290_G7, $I_L34209_305 + 8 * $SI_L34209_298_G4 + 2) = _vu_mlt( trans($l_S40, n_cloud_top + $I_L34211_302 + 8 * $SI_L34211_290_G7, $I_L34209_305 + 8 * $SI_L34209_298_G4 + 2), $tmp_inv_WR0_R0 )
34226.                                           $I_L34221_252 = 1 + $I_L34221_252
34221.                                           if ( $I_L34221_252 >= $n_list_S38 ) exit
34221.                                        enddo
34221.                                     endif
34227.                                     if ( n_source_coeff > 0 ) then
34228.                                        if ( $n_list_S38 > 0 ) then
34227.                                           $I_L34227_276 = 0
34227. !dir$ blocking_size( 0, 0 )
34227.                                           do
34228.                                              $I_L34228_254 = 0
34228. !dir$ ivdep
34228. !dir$ blocking_size( 0, 0 )
34228.                                              do
34229.                                                 $l_S42 = l_list(1 + $I_L34228_254)
34230.                                                 source_coeff($l_S42, n_cloud_top + $I_L34211_302 + 8 * $SI_L34211_290_G7, 1 + $I_L34227_276, $I_L34209_305 + 8 * $SI_L34209_298_G4 + 2) = _vu_mlt( source_coeff($l_S42, n_cloud_top + $I_L34211_302 + 8 * $SI_L34211_290_G7, 1 + $I_L34227_276, $I_L34209_305 + 8 * $SI_L34209_298_G4 + 2), tmp_inv(1 + $I_L34228_254) )
34233.                                                 $I_L34228_254 = 1 + $I_L34228_254
34228.                                                 if ( $I_L34228_254 >= $n_list_S38 ) exit
34228.                                              enddo
34234.                                              $I_L34227_276 = 1 + $I_L34227_276
34233.                                              if ( $I_L34227_276 >= n_source_coeff ) exit
34233.                                           enddo
34233.                                        endif
34233.                                     endif
34211.                                     $I_L34211_302 = 1 + $I_L34211_302
34234.                                     if ( $I_L34211_302 >= min( n_layer + -n_cloud_top + 1, 8 + 8 * $SI_L34211_290_G7 ) + -8 * $SI_L34211_290_G7 ) exit
34234.                                  enddo
34209.                                  $I_L34209_305 = 1 + $I_L34209_305
34209.                                  if ( $I_L34209_305 >= min( -1 + n_region, 8 + 8 * $SI_L34209_298_G4 ) + -8 * $SI_L34209_298_G4 ) exit
34209.                               enddo
34211.                               $SI_L34211_290_G7 = 1 + $SI_L34211_290_G7
34236.                               if ( $SI_L34211_290_G7 >= _rsh( n_layer + -n_cloud_top + 8, 3 ) ) exit
34236.                            enddo
34209.                            $SI_L34209_298_G4 = 1 + $SI_L34209_298_G4
34209.                            if ( $SI_L34209_298_G4 >= _rsh( 6 + n_region, 3 ) ) exit
34209.                         enddo
34209.                      endif
34209.                   endif
34209.                endif
33956.                _free( t$4701 )
33956.             endif
33956.          endif
33956.       endif
34242.       return
34242.       end
34242.       
34475.       
34475.       subroutine two_stream( ierr, n_profile, n_layer, i_2stream, i_solver, l_scale_solar, adjust_solar_ke, isolir, diff_planck, l_ir_source_quad, diff_planck_2, flux_inc_down, flux_inc_direct, sec_00, diffuse_albedo, direct_albedo, d_planck_flux_surface, tau, omega, asymmetry, flux_direct, flux_total, nd_profile, nd_layer, nd_source_coeff )
34264.       t$1375 = nd_profile
34264.       t$1376 = nd_layer
34354.       t$4718 = _zla( 0, nd_profile )
34264.       t$4719 = _zla( 0, nd_profile )
34354.       t$4720 = _zla( 0, nd_layer )
34264.       t$4721 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
34264.       t$4722 = 1 + nd_layer
34359.       t$4723 = _zla( 0, 1 + nd_layer )
34264.       t$4724 = _zla( 0, nd_profile ) * _zla( 0, 1 + nd_layer )
34264.       t$1377 = ( 2 + 2 * nd_layer )
34361.       t$4725 = _zla( 0, ( 2 + 2 * nd_layer ) )
34264.       t$4726 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) )
34264.       t$4727 = 5 * _zla( 0, nd_profile )
34264.       t$4728 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 5
34383.       t$4731 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 40
34385.       t$4732 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 40
34385.       t$4734 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34372.       t$4735 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34372.       t$4737 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34264.       t$1378 = nd_source_coeff
34264.       t$4738 = _zla( 0, nd_profile ) * _zla( 0, nd_layer )
34376.       t$4739 = _zla( 0, nd_source_coeff )
34264.       t$4740 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff )
34376.       t$4741 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34376.       t$4743 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34378.       t$4744 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8
34378.       t$4746 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
34380.       t$4747 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
34380.       t$4749 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
34370.       t$4750 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
34370.       t$4752 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
34374.       t$4753 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
34374.       t$4755 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
34387.       t$4756 = _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8
34387.       t$4758 = _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 56
34264.       t$4729 = int( _alloc( _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 56 ), 8 )
34383.       t$4730 = t$4729
34385.       t$4733 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 40
34372.       t$4736 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34376.       t$4742 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34378.       t$4745 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 8 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48
34380.       t$4748 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 16
34370.       t$4751 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 24
34374.       t$4754 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 32
34387.       t$4757 = t$4729 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * _zla( 0, nd_source_coeff ) * 8 + _zla( 0, nd_profile ) * _zla( 0, ( 2 + 2 * nd_layer ) ) * 48 + _zla( 0, nd_profile ) * _zla( 0, nd_layer ) * 40
34399.       ipa$29863 = 1
34399.       ipa$29881 = 1
34399.       ipa$29882 = 1
34399.       call two_coeff( ierr, n_profile, ipa$29863, n_layer, i_2stream, l_ir_source_quad, asymmetry(1, 1), omega(1, 1), tau(1, 1), isolir, sec_00(1, 1), trans(1, 1), reflect(1, 1), trans_0(1, 1), source_coeff(1, 1, 1), nd_profile, ipa$29881, nd_layer, ipa$29882, nd_layer, nd_source_coeff )
34408.       if ( ierr /= 0 ) then
34264.          _free( t$4729 )
34264.       else
34411.          if ( isolir == 1 ) then
34412.             call solar_source( n_profile, n_layer, flux_inc_direct(1), trans_0(1, 1), source_coeff(1, 1, 1), l_scale_solar, adjust_solar_ke(1, 1), flux_direct(1, 0), s_down(1, 1), s_up(1, 1), nd_profile, nd_layer, nd_source_coeff )
34420.          else if ( isolir == 2 ) then
34421.             t$732 = nd_profile
34421.             t$733 = nd_layer
34421.             t$734 = nd_source_coeff
34421.             t$2570 = _zla( 0, nd_profile )
34421.             t$2571 = nd_profile
34421.             t$2572 = _zla( 0, nd_layer )
34421.             t$2573 = nd_layer * nd_profile
34421.             t$2574 = _zla( 0, nd_source_coeff )
34421.             t$2575 = ( nd_profile * nd_layer * nd_source_coeff )
34421.             t$2576 = ( nd_profile * nd_layer )
34421.             if ( l_ir_source_quad ) then
34421.                if ( nd_layer > 0 ) then
34421.                   if ( nd_profile > 0 ) then
34421.                      $I_L34421_92 = 0
34421.                      do
34421.                         $I_L34421_80 = 0
34421. !dir$ ivdep
34421.                         do
34421.                            s_up(1 + $I_L34421_80, 1 + $I_L34421_92) = source_coeff(1 + $I_L34421_80, 1 + $I_L34421_92, 1) * diff_planck(1 + $I_L34421_80, 1 + $I_L34421_92) + source_coeff(1 + $I_L34421_80, 1 + $I_L34421_92, 2) * diff_planck_2(1 + $I_L34421_80, 1 + $I_L34421_92)
34421.                            s_down(1 + $I_L34421_80, 1 + $I_L34421_92) = -( source_coeff(1 + $I_L34421_80, 1 + $I_L34421_92, 1) * diff_planck(1 + $I_L34421_80, 1 + $I_L34421_92) ) + source_coeff(1 + $I_L34421_80, 1 + $I_L34421_92, 2) * diff_planck_2(1 + $I_L34421_80, 1 + $I_L34421_92)
34421.                            $I_L34421_80 = 1 + $I_L34421_80
34421.                            if ( $I_L34421_80 >= nd_profile ) exit
34421.                         enddo
34421.                         $I_L34421_92 = 1 + $I_L34421_92
34421.                         if ( $I_L34421_92 >= nd_layer ) exit
34421.                      enddo
34421.                   endif
34421.                endif
34421.             else if ( nd_layer > 0 ) then
34421.                if ( nd_profile > 0 ) then
34421.                   $I_L34421_90 = 0
34421.                   do
34421.                      $I_L34421_78 = 0
34421. !dir$ ivdep
34421.                      do
34421.                         $s_up_WR0_R0 = source_coeff(1 + $I_L34421_78, 1 + $I_L34421_90, 1) * diff_planck(1 + $I_L34421_78, 1 + $I_L34421_90)
34421.                         s_up(1 + $I_L34421_78, 1 + $I_L34421_90) = $s_up_WR0_R0
34421.                         s_down(1 + $I_L34421_78, 1 + $I_L34421_90) = -$s_up_WR0_R0
34421.                         $I_L34421_78 = 1 + $I_L34421_78
34421.                         if ( $I_L34421_78 >= nd_profile ) exit
34421.                      enddo
34421.                      $I_L34421_90 = 1 + $I_L34421_90
34421.                      if ( $I_L34421_90 >= nd_layer ) exit
34421.                   enddo
34421.                endif
34421.             endif
34421.          endif
34431.          if ( i_solver == 1 ) then
34432.             call set_matrix_pentadiagonal( n_profile, n_layer, trans(1, 1), reflect(1, 1), s_down(1, 1), s_up(1, 1), diffuse_albedo(1), direct_albedo(1), flux_direct(1, n_layer), flux_inc_down(1), d_planck_flux_surface(1), a5(1, 1, 1), b(1, 1), nd_profile, nd_layer )
34443.             t$188 = nd_profile
34443.             t$189 = 5
34443.             t$190 = ( 2 + 2 * nd_layer )
34443.             t$1691 = max( 0, nd_profile )
34443.             t$1692 = nd_profile
34443.             t$1693 = 5
34443.             t$1694 = 5 * nd_profile
34443.             t$1695 = max( 0, 2 + 2 * nd_layer )
34443.             t$1696 = nd_profile * ( 2 + 2 * nd_layer ) * 5
34443.             t$1697 = ( 2 * nd_profile + nd_profile * nd_layer * 2 )
34443.             if ( -2 * n_layer <= 0 ) then
34443.                if ( n_profile > 0 ) then
34443.                   $I_L34443_100 = 0
34443.                   do
34443.                      $I_L34443_98 = 0
34443.                      do
34443.                         $I_L34443_82 = 0
34443. !dir$ ivdep
34443.                         do
34443.                            $work_1_WR0_R1 = ( a5(1 + $I_L34443_82, 2 + -$I_L34443_98, -$I_L34443_98 + -$I_L34443_100 + 2 * n_layer + 1) * 1.0/a5(1 + $I_L34443_82, 3, -$I_L34443_100 + 2 * n_layer + 2) )
34443.                            work_1(1 + $I_L34443_82, 1) = $work_1_WR0_R1
34443.                            b(1 + $I_L34443_82, -$I_L34443_98 + -$I_L34443_100 + 2 * n_layer + 1) = b(1 + $I_L34443_82, -$I_L34443_98 + -$I_L34443_100 + 2 * n_layer + 1) + -( $work_1_WR0_R1 * b(1 + $I_L34443_82, -$I_L34443_100 + 2 * n_layer + 2) )
34443.                            $I_L34443_82 = 1 + $I_L34443_82
34443.                            if ( $I_L34443_82 >= n_profile ) exit
34443.                         enddo
34443.                         $I_L34443_94 = 0
34443. !dir$ blocking_size( 0, 0 )
34443.                         do
34443.                            $I_L34443_84 = 0
34443. !dir$ ivdep
34443. !dir$ blocking_size( 0, 0 )
34443.                            do
34443.                               a5(1 + $I_L34443_84, $I_L34443_94 + -$I_L34443_98 + 3, -$I_L34443_98 + -$I_L34443_100 + 2 * n_layer + 1) = a5(1 + $I_L34443_84, $I_L34443_94 + -$I_L34443_98 + 3, -$I_L34443_98 + -$I_L34443_100 + 2 * n_layer + 1) + -( work_1(1 + $I_L34443_84, 1) * a5(1 + $I_L34443_84, 4 + $I_L34443_94, -$I_L34443_100 + 2 * n_layer + 2) )
34443.                               $I_L34443_84 = 1 + $I_L34443_84
34443.                               if ( $I_L34443_84 >= n_profile ) exit
34443.                            enddo
34443.                            $I_L34443_94 = 1 + $I_L34443_94
34443.                            if ( $I_L34443_94 >= ( min( 2, ( -$I_L34443_100 + 2 * n_layer + 1 ) ) ) ) exit
34443.                         enddo
34443.                         $I_L34443_98 = 1 + $I_L34443_98
34443.                         if ( $I_L34443_98 >= ( min( 2, ( -$I_L34443_100 + 2 * n_layer + 1 ) ) ) ) exit
34443.                      enddo
34443.                      $I_L34443_100 = 1 + $I_L34443_100
34443.                      if ( $I_L34443_100 >= 1 + 2 * n_layer ) exit
34443.                   enddo
34443.                endif
34443.             endif
34443.             if ( n_profile > 0 ) then
34443.                $I_L34443_86 = 0
34443. !dir$ ivdep
34443.                do
34443.                   $flux_total_WR0_R2 = ( b(1 + $I_L34443_86, 1) * 1.0/a5(1 + $I_L34443_86, 3, 1) )
34443.                   flux_total(1 + $I_L34443_86, 1) = $flux_total_WR0_R2
34443.                   flux_total(1 + $I_L34443_86, 2) = ( ( b(1 + $I_L34443_86, 2) + -( a5(1 + $I_L34443_86, 4, 2) * $flux_total_WR0_R2 ) ) * 1.0/a5(1 + $I_L34443_86, 3, 2) )
34443.                   $I_L34443_86 = 1 + $I_L34443_86
34443.                   if ( $I_L34443_86 >= n_profile ) exit
34443.                enddo
34443.             endif
34443.             if ( 2 * n_layer > 0 ) then
34443.                if ( n_profile > 0 ) then
34443.                   $SI_L34443_88_G1 = 0
34443.                   do
34443.                      $I_L34443_96 = 0
34443. !dir$ blocking_size( 0, 0 )
34443.                      do
34443.                         $I_L34443_102 = 0
34443. !dir$ ivdep
34443. !dir$ blocking_size( 256, 256 )
34443.                         do
34443.                            flux_total($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 3 + $I_L34443_96) = ( ( b($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 3 + $I_L34443_96) + -( a5($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 4, 3 + $I_L34443_96) * flux_total($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 2 + $I_L34443_96) ) + -( a5($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 5, 3 + $I_L34443_96) * flux_total($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 1 + $I_L34443_96) ) ) * 1.0/a5($I_L34443_102 + 256 * $SI_L34443_88_G1 + 1, 3, 3 + $I_L34443_96) )
34443.                            $I_L34443_102 = 1 + $I_L34443_102
34443.                            if ( $I_L34443_102 >= min( n_profile, 256 + 256 * $SI_L34443_88_G1 ) + -256 * $SI_L34443_88_G1 ) exit
34443.                         enddo
34443.                         $I_L34443_96 = 1 + $I_L34443_96
34443.                         if ( $I_L34443_96 >= ( 2 * n_layer ) ) exit
34443.                      enddo
34443.                      $SI_L34443_88_G1 = 1 + $SI_L34443_88_G1
34443.                      if ( $SI_L34443_88_G1 >= _rsh( 255 + n_profile, 8 ) ) exit
34443.                   enddo
34443.                endif
34443.             endif
34443.             goto 10
34451.          else if ( i_solver == 13 ) then
34453.             call solver_homogen_direct( n_profile, n_layer, trans(1, 1), reflect(1, 1), s_down(1, 1), s_up(1, 1), isolir, diffuse_albedo(1), direct_albedo(1), flux_direct(1, n_layer), flux_inc_down(1), d_planck_flux_surface(1), flux_total(1, 1), nd_profile, nd_layer )
34453.    10       continue
34264.             _free( t$4729 )
34264.          else
34465.             _fwrite( _clist( 0, 0, 3, 6, Null_Arg, Null_Arg, t$1380,  _substr(t$1379,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '***Error: The solver and the cloud scheme are incompatiable.', 0x800600000000L ) ) )
34467.             ierr = 1
34264.             _free( t$4729 )
34264.          endif
34264.       endif
34475.       return
34475.       end
34475.       
 2457.       
 2457.       module esrad
34476.       return
34476.       end
34476.       
34590.       
34590.       subroutine initradukmo( kmax, sl, nls )
34565.       t$10346 = kmax
34573.       t$10399 = _zla( 0, kmax )
34579.        _substr(t$10578,1,17) = '**(InitRadUKMO)**'
34579.        _substr(t$10579,1,30) = ' Reading UKMO SW Spectral file'
34579.       call msgone(  _substr(t$10578,1,17),  _substr(t$10579,1,30) )
34580.       call read_spectrum_90(  _substr(fnamespecsw,1,206), swdat, ierr )
34583.        _substr(t$10580,1,17) = '**(InitRadUKMO)**'
34583.        _substr(t$10581,1,30) = ' Reading UKMO LW Spectral file'
34583.       call msgone(  _substr(t$10580,1,17),  _substr(t$10581,1,30) )
34584.       call read_spectrum_90(  _substr(fnamespeclw,1,206), lwdat, ierr )
34587.        _substr(t$10582,1,17) = '**(InitRadUKMO)**'
34587.        _substr(t$10583,1,29) = ' Creating Aerosol Climatology'
34587.       call msgone(  _substr(t$10582,1,17),  _substr(t$10583,1,29) )
34588.       call initaerclim( kmax, sl(1), nls )
34590.       return
34590.       end
34590.       
34592.       
34592.       subroutine initaerclim( kmax, sl, nls )
34592.       t$10348 = kmax
34597.       t$10400 = _zla( 0, kmax )
34601.       t$10403 = 8 * _zla( 0, kmax )
34592.       t$10401 = int( _alloc( 8 * _zla( 0, kmax ) ), 8 )
34601.       t$10402 = t$10401
34637.       aerosol_clim_land%header%a_contig = 1
34637.       aerosol_clim_land%dim_1%LB = 1
34637.       aerosol_clim_land%dim_1%EX = _zla( 0, kmax )
34637.       aerosol_clim_land%dim_1%SM = 1
34637.       aerosol_clim_land%dim_2%LB = 1
34637.       aerosol_clim_land%dim_2%EX = 5
34637.       aerosol_clim_land%dim_2%SM = _zla( 0, kmax )
34637.       $_allo_P1(0) = 0x1000000000001L
34637.       $_allo_P1(1) = loc( aerosol_clim_land )
34637.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
34638.       aerosol_clim_ocean%header%a_contig = 1
34638.       aerosol_clim_ocean%dim_1%LB = 1
34638.       aerosol_clim_ocean%dim_1%EX = _zla( 0, kmax )
34638.       aerosol_clim_ocean%dim_1%SM = 1
34638.       aerosol_clim_ocean%dim_2%LB = 1
34638.       aerosol_clim_ocean%dim_2%EX = 5
34638.       aerosol_clim_ocean%dim_2%SM = _zla( 0, kmax )
34638.       $_allo_P2(0) = 0x1000000000001L
34638.       $_allo_P2(1) = loc( aerosol_clim_ocean )
34638.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
34641.       if ( sl(1) > sl(2) ) then
34643.          $F_A33 = kmax
34643.          if ( kmax > 0 ) then
34643.             $I_L34643_52 = 0
34643. !dir$ ivdep
34643.             do
34643.                flipsl(1 + $I_L34643_52) = sl(kmax + -$I_L34643_52)
34643.                $I_L34643_52 = 1 + $I_L34643_52
34643.                if ( $I_L34643_52 >= $F_A33 ) exit
34643.             enddo
34643.          endif
34643.       else
34646.          $F_A34 = kmax
34646.          if ( kmax > 0 ) then
34646.             $I_L34646_54 = 0
34646. !dir$ ivdep
34646.             do
34646.                flipsl(1 + $I_L34646_54) = sl(1 + $I_L34646_54)
34646.                $I_L34646_54 = 1 + $I_L34646_54
34646.                if ( $I_L34646_54 >= $F_A34 ) exit
34646.             enddo
34646.          endif
34646.       endif
34650.        _substr(t$10584,1,17) = '**(InitAerClim)**'
34650.        _substr(t$10585,1,37) = ' Number of climatological aerosols: 5'
34650.       call msgone(  _substr(t$10584,1,17),  _substr(t$10585,1,37) )
34651.        _substr(t$10586,1,17) = '**(InitAerClim)**'
34651.        _substr(t$10587,1,55) = '                            Total column mass (kg m-2) '
34651.       call msgone(  _substr(t$10586,1,17),  _substr(t$10587,1,55) )
34652.        _substr(t$10588,1,17) = '**(InitAerClim)**'
34652.        _substr(t$10589,1,63) = ' Index   Aertype  bl_land      bl_ocean     free_trop    strat '
34652.       call msgone(  _substr(t$10588,1,17),  _substr(t$10589,1,63) )
34653.       $I_L34653_48 = 0
34653.       do
34654.          if ( ( 1 + $I_L34653_48 ) < lwdat%aerosol%type_aerosol%dim_1%LB .or. ( 1 + $I_L34653_48 ) > lwdat%aerosol%type_aerosol%dim_1%LB + lwdat%aerosol%type_aerosol%dim_1%EX + -1 ) then
34654.              _substr(t$10592,1,13) = 'Rad_UKMO.f90'
34654.              _substr(t$10593,1,13) = 'TYPE_AEROSOL'
34654.             t$10594 = lwdat%aerosol%type_aerosol%dim_1%LB
34654.             t$10595 = lwdat%aerosol%type_aerosol%dim_1%LB + lwdat%aerosol%type_aerosol%dim_1%EX + -1
34654.             t$10596 = 1 + $I_L34653_48
34654.             call _bounds_error(  _substr(t$10592,1,13), 34654,  _substr(t$10593,1,13), 1, t$10594, t$10595, t$10596, t$10591 )
34654.          endif
34655.          if ( ( 1 + $I_L34653_48 ) <= 0 .or. ( 1 + $I_L34653_48 ) > 5 ) then
34655.              _substr(t$10598,1,13) = 'Rad_UKMO.f90'
34655.              _substr(t$10599,1,12) = 'BL_LANDMASS'
34655.             t$10600 = 1 + $I_L34653_48
34655.             call _bounds_error(  _substr(t$10598,1,13), 34655,  _substr(t$10599,1,12), 1, 1, 5, t$10600, t$10597 )
34655.          endif
34655.          if ( ( 1 + $I_L34653_48 ) <= 0 .or. ( 1 + $I_L34653_48 ) > 5 ) then
34655.              _substr(t$10602,1,13) = 'Rad_UKMO.f90'
34655.              _substr(t$10603,1,13) = 'BL_OCEANMASS'
34655.             t$10604 = 1 + $I_L34653_48
34655.             call _bounds_error(  _substr(t$10602,1,13), 34655,  _substr(t$10603,1,13), 1, 1, 5, t$10604, t$10601 )
34655.          endif
34655.          if ( ( 1 + $I_L34653_48 ) <= 0 .or. ( 1 + $I_L34653_48 ) > 5 ) then
34655.              _substr(t$10606,1,13) = 'Rad_UKMO.f90'
34655.              _substr(t$10607,1,14) = 'FREETROP_MASS'
34655.             t$10608 = 1 + $I_L34653_48
34655.             call _bounds_error(  _substr(t$10606,1,13), 34655,  _substr(t$10607,1,14), 1, 1, 5, t$10608, t$10605 )
34655.          endif
34655.          if ( ( 1 + $I_L34653_48 ) <= 0 .or. ( 1 + $I_L34653_48 ) > 5 ) then
34655.              _substr(t$10610,1,13) = 'Rad_UKMO.f90'
34655.              _substr(t$10611,1,11) = 'STRAT_MASS'
34655.             t$10612 = 1 + $I_L34653_48
34655.             call _bounds_error(  _substr(t$10610,1,13), 34655,  _substr(t$10611,1,11), 1, 1, 5, t$10612, t$10609 )
34655.          endif
34654.          $IOitem_O0 = ( 1 + $I_L34653_48 )
34654.          $_IOitem_P0(0) = bl_landmass(1 + $I_L34653_48)
34654.          $_IOitem_P0(1) = bl_oceanmass(1 + $I_L34653_48)
34654.          $_IOitem_P0(2) = freetrop_mass(1 + $I_L34653_48)
34654.          $_IOitem_P0(3) = strat_mass(1 + $I_L34653_48)
34654.          _fwrite( _clist( 0, 0, 3,  _substr(line,1,128), Null_Arg, Null_Arg, t$10350,  _substr(t$10349,1,25), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O0, 0x2000200000000L ), _iotype( (lwdat%aerosol%type_aerosol%base_addr)(1 + $I_L34653_48, 0), 0x2000200000000L ), _iotype( $_IOitem_P0(:( 0, 3, 1 )), 0x804060300000000L ) ) )
34656.           _substr(t$10613,1,17) = '**(InitAerClim)**'
34656.          call msgone(  _substr(t$10613,1,17),  _substr(line,1,_ltrim(  _substr(line,1,128) )) )
34657.          $I_L34653_48 = 1 + $I_L34653_48
34656.          if ( $I_L34653_48 >= 5 ) exit
34656.       enddo
34662.       k = 1
34662.       if ( kmax > 0 ) then
34662.          $I_L34662_50 = 0
34662. !dir$ ivdep
34662.          do
34663.             if ( flipsl(2 + $I_L34662_50) > 7.5e-1 ) then
34662.                k = ( 1 + $I_L34662_50 )
34662.                goto 10
34662.             endif
34664.             $I_L34662_50 = 1 + $I_L34662_50
34664.             if ( $I_L34662_50 >= kmax ) exit
34664.          enddo
34664.          k = ( 1 + kmax )
34664.       endif
34664.    10 continue
34668.       if ( k <= 0 .or. k > kmax ) then
34668.           _substr(t$10618,1,13) = 'Rad_UKMO.f90'
34668.           _substr(t$10619,1,7) = 'FLIPSL'
34668.          t$10594 = k
34668.          call _bounds_error(  _substr(t$10618,1,13), 34668,  _substr(t$10619,1,7), 1, 1, t$10348, t$10594, t$10617 )
34668.       endif
34667.       $IOitem_O1 = flipsl(k)
34667.       _fwrite( _clist( 0, 0, 3,  _substr(line,1,128), Null_Arg, Null_Arg, t$10352,  _substr(t$10351,1,61), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( k, 0x2000200000000L ), _iotype( $IOitem_O1, 0x804060300000000L ) ) )
34669.        _substr(t$10620,1,17) = '**(InitAerClim)**'
34669.       call msgone(  _substr(t$10620,1,17),  _substr(line,1,_ltrim(  _substr(line,1,128) )) )
34673.       if ( nls <= 0 .or. nls > t$10348 ) then
34673.           _substr(t$10622,1,13) = 'Rad_UKMO.f90'
34673.           _substr(t$10623,1,7) = 'FLIPSL'
34673.          t$10595 = nls
34673.          call _bounds_error(  _substr(t$10622,1,13), 34673,  _substr(t$10623,1,7), 1, 1, t$10348, t$10595, t$10621 )
34673.       endif
34672.       $IOitem_O2 = flipsl(nls)
34672.       _fwrite( _clist( 0, 0, 3,  _substr(line,1,128), Null_Arg, Null_Arg, t$10354,  _substr(t$10353,1,71), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nls, 0x2000200000000L ), _iotype( $IOitem_O2, 0x804060300000000L ) ) )
34674.        _substr(t$10624,1,17) = '**(InitAerClim)**'
34674.       call msgone(  _substr(t$10624,1,17),  _substr(line,1,_ltrim(  _substr(line,1,128) )) )
34686.       $SC_flipsl_I0 = flipsl(nls)
34685.       $I_L34685_68 = 0
34685.       do
34686.          $F_A35 = nls
34686.          if ( nls > 0 ) then
34686.             $SCA_strat_mass_I14 = strat_mass(1 + $I_L34685_68)
34686.             $I_L34686_56 = 0
34686. !dir$ ivdep
34686.             do
34686.                (aerosol_clim_land%base_addr)(1 + $I_L34686_56, 1 + $I_L34685_68, 0) = ( 1.0/$SC_flipsl_I0 * $SCA_strat_mass_I14 * 9.8086599999999997 )
34686.                $I_L34686_56 = 1 + $I_L34686_56
34686.                if ( $I_L34686_56 >= $F_A35 ) exit
34686.             enddo
34686.          endif
34689.          $F_A36 = nls
34689.          if ( nls > 0 ) then
34689.             $SCA_strat_mass_I13 = strat_mass(1 + $I_L34685_68)
34689.             $I_L34689_58 = 0
34689. !dir$ ivdep
34689.             do
34689.                (aerosol_clim_ocean%base_addr)(1 + $I_L34689_58, 1 + $I_L34685_68, 0) = ( 1.0/$SC_flipsl_I0 * $SCA_strat_mass_I13 * 9.8086599999999997 )
34689.                $I_L34689_58 = 1 + $I_L34689_58
34689.                if ( $I_L34689_58 >= $F_A36 ) exit
34689.             enddo
34689.          endif
34691.          $I_L34685_68 = 1 + $I_L34685_68
34685.          if ( $I_L34685_68 >= 5 ) exit
34685.       enddo
34699.       $SC_flipsl_I11 = flipsl(k)
34699.       $SC_flipsl_I0 = flipsl(nls)
34695.       $I_L34695_70 = 0
34695.       do
34699.          $F_A37 = ( k + -nls )
34699.          if ( k + -nls > 0 ) then
34699.             $SCA_freetrop_mass_I15 = freetrop_mass(1 + $I_L34695_70)
34699.             $I_L34699_60 = 0
34699. !dir$ ivdep
34699.             do
34699.                (aerosol_clim_land%base_addr)(nls + $I_L34699_60 + 1, 1 + $I_L34695_70, 0) = 9.6827838104639684e-5 * ( 1.0/( $SC_flipsl_I11 + -$SC_flipsl_I0 ) * $SCA_freetrop_mass_I15 )
34699.                $I_L34699_60 = 1 + $I_L34699_60
34699.                if ( $I_L34699_60 >= $F_A37 ) exit
34699.             enddo
34699.          endif
34702.          $F_A38 = ( k + -nls )
34702.          if ( k + -nls > 0 ) then
34702.             $SCA_freetrop_mass_I12 = freetrop_mass(1 + $I_L34695_70)
34702.             $I_L34702_62 = 0
34702. !dir$ ivdep
34702.             do
34702.                (aerosol_clim_ocean%base_addr)(nls + $I_L34702_62 + 1, 1 + $I_L34695_70, 0) = 9.6827838104639684e-5 * ( 1.0/( $SC_flipsl_I11 + -$SC_flipsl_I0 ) * $SCA_freetrop_mass_I12 )
34702.                $I_L34702_62 = 1 + $I_L34702_62
34702.                if ( $I_L34702_62 >= $F_A38 ) exit
34702.             enddo
34702.          endif
34704.          $I_L34695_70 = 1 + $I_L34695_70
34695.          if ( $I_L34695_70 >= 5 ) exit
34695.       enddo
34713.       $SC_flipsl_I11 = flipsl(k)
34712.       $I_L34712_72 = 0
34712.       do
34713.          $F_A39 = ( kmax + -k )
34713.          if ( kmax + -k > 0 ) then
34713.             $SCA_bl_landmass_I16 = bl_landmass(1 + $I_L34712_72)
34713.             $I_L34713_64 = 0
34713. !dir$ ivdep
34713.             do
34713.                (aerosol_clim_land%base_addr)(k + $I_L34713_64 + 1, 1 + $I_L34712_72, 0) = 9.6827838104639684e-5 * ( 1.0/( 1.0 + -$SC_flipsl_I11 ) * $SCA_bl_landmass_I16 )
34713.                $I_L34713_64 = 1 + $I_L34713_64
34713.                if ( $I_L34713_64 >= $F_A39 ) exit
34713.             enddo
34713.          endif
34716.          $F_A40 = ( kmax + -k )
34716.          if ( kmax + -k > 0 ) then
34716.             $SCA_bl_oceanmass_I17 = bl_oceanmass(1 + $I_L34712_72)
34716.             $I_L34716_66 = 0
34716. !dir$ ivdep
34716.             do
34716.                (aerosol_clim_ocean%base_addr)(k + $I_L34716_66 + 1, 1 + $I_L34712_72, 0) = 9.6827838104639684e-5 * ( 1.0/( 1.0 + -$SC_flipsl_I11 ) * $SCA_bl_oceanmass_I17 )
34716.                $I_L34716_66 = 1 + $I_L34716_66
34716.                if ( $I_L34716_66 >= $F_A40 ) exit
34716.             enddo
34716.          endif
34718.          $I_L34712_72 = 1 + $I_L34712_72
34712.          if ( $I_L34712_72 >= 5 ) exit
34712.       enddo
34592.       _free( t$10401 )
34721.       return
34721.       end
34721.       
34723.       
34723.       subroutine destroyradukmo
34728.       $_allo_P0(0) = 0x1000000000001L
34728.       $_allo_P0(1) = loc( aerosol_clim_land )
34728.       call __deallocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
34728.       aerosol_clim_land%header%assoc = 0
34729.       $_allo_P1(0) = 0x1000000000001L
34729.       $_allo_P1(1) = loc( aerosol_clim_ocean )
34729.       call __deallocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
34729.       aerosol_clim_ocean%header%assoc = 0
34731.       return
34731.       end
34731.       
34743.       
34743.       subroutine ukmo_swintf( ncols, kmax, cosz, s0, pbot, pmid, dp, te, qe, o3, co2val, tg, imask, albvisdiff, albnirdiff, albvisbeam, albnirbeam, toadown, sfcvisbeam, sfcvisdiff, sfcnirbeam, sfcnirdiff, sfcvisbeamc, sfcvisdiffc, sfcnirbeamc, sfcnirdiffc, toanetc, toanet, sfcnet, sfcnetc, heatratec, heatrate, cld, clu, fice, rei, rel, lmixr )
34743.       t$10357 = ncols
34782.       t$10404 = _zla( 0, ncols )
34743.       t$10358 = kmax
34743.       t$10405 = _zla( 0, ncols )
34796.       t$10406 = _zla( 0, kmax )
34743.       t$10407 = _zla( 0, ncols ) * _zla( 0, kmax )
34504.       if ( t$23 == 0 ) then
34504.          t$10412(1) = 4
34504.          t$10413(1) = 0
34504.          t$10414(1) = 0
34504.          t$10409(1) = int( loc( t$10 ), 8 )
34504.          t$10410(1) = 0
34504.          t$10411(1) = int( loc( t$10408 ), 8 )
34504.          t$23 = __get_dynamic_type( 3, t$10409(1), t$10412(1), 1, t$10410(1), t$10411(1), t$10413(1), t$10414(1) )
34504.       endif
34743.       t$10367 = swdat%dim%nd_aerosol_species
34743.       t$10359 = swdat%dim%nd_band
35139.       t$10416 = max( 0, swdat%dim%nd_aerosol_species )
34743.       t$10417 = max( 0, swdat%dim%nd_aerosol_species )
35139.       t$10418 = max( 0, swdat%dim%nd_band )
34743.       t$10419 = max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band )
35232.       t$10422 = max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8
35139.       aerosol_mix_ratio%header%el_len = 64
35139.       aerosol_mix_ratio%header%assoc = 0
35139.       aerosol_mix_ratio%header%ptr_alloc = 0
35139.       aerosol_mix_ratio%header%p_or_a = 2
35139.       aerosol_mix_ratio%header%a_contig = 1
35139.       aerosol_mix_ratio%header%dv_versn = 2
35139.       aerosol_mix_ratio%header%dv_smunit = 64
35139.       aerosol_mix_ratio%header%d_type = 0
35139.       aerosol_mix_ratio%header%n_params = 0
35139.       aerosol_mix_ratio%header%pad_codim = 0
35139.       aerosol_mix_ratio%header%n_codim = 0
35139.       aerosol_mix_ratio%header%pad_dim = 0
35139.       aerosol_mix_ratio%header%n_dim = 3
35139.       aerosol_mix_ratio%header%d_type_idx = 13
35139.       aerosol_mix_ratio%header%typ_code = 134481411
35139.       aerosol_mix_ratio%header%orig_base = 0
35139.       aerosol_mix_ratio%header%orig_size = 0
35139.       aerosol_mix_ratio%dim_1%LB = 1
35139.       aerosol_mix_ratio%dim_1%EX = 0
35139.       aerosol_mix_ratio%dim_1%SM = 1
35139.       aerosol_mix_ratio%dim_2%LB = 1
35139.       aerosol_mix_ratio%dim_2%EX = 0
35139.       aerosol_mix_ratio%dim_2%SM = 1
35139.       aerosol_mix_ratio%dim_3%LB = 1
35139.       aerosol_mix_ratio%dim_3%EX = 0
35139.       aerosol_mix_ratio%dim_3%SM = 1
34743.       t$10366 = swdat%dim%nd_phase_term
35145.       t$10423 = max( 0, swdat%dim%nd_phase_term )
34743.       t$10424 = max( 0, swdat%dim%nd_phase_term )
34743.       t$10425 = max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_phase_term )
34743.       t$10426 = max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term )
35145.       t$10427 = 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 )
35145.       t$10429 = 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8
34743.       t$10430 = max( 0, swdat%dim%nd_aerosol_species )
35135.       t$10431 = 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 )
35135.       t$10433 = 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species )
35142.       t$10434 = 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 )
35142.       t$10436 = max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 )
35228.       t$10438 = 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 )
35220.       clouds%header%el_len = 64
35220.       clouds%header%assoc = 0
35220.       clouds%header%ptr_alloc = 0
35220.       clouds%header%p_or_a = 2
35220.       clouds%header%a_contig = 1
35220.       clouds%header%dv_versn = 2
35220.       clouds%header%dv_smunit = 64
35220.       clouds%header%d_type = 0
35220.       clouds%header%n_params = 0
35220.       clouds%header%pad_codim = 0
35220.       clouds%header%n_codim = 0
35220.       clouds%header%pad_dim = 0
35220.       clouds%header%n_dim = 3
35220.       clouds%header%d_type_idx = 13
35220.       clouds%header%typ_code = 134481411
35220.       clouds%header%orig_base = 0
35220.       clouds%header%orig_size = 0
35220.       clouds%dim_1%LB = 1
35220.       clouds%dim_1%EX = 0
35220.       clouds%dim_1%SM = 1
35220.       clouds%dim_2%LB = 1
35220.       clouds%dim_2%EX = 0
35220.       clouds%dim_2%SM = 1
35220.       clouds%dim_3%LB = 1
35220.       clouds%dim_3%EX = 0
35220.       clouds%dim_3%SM = 1
35218.       condensed_dim_char%header%el_len = 64
35218.       condensed_dim_char%header%assoc = 0
35218.       condensed_dim_char%header%ptr_alloc = 0
35218.       condensed_dim_char%header%p_or_a = 2
35218.       condensed_dim_char%header%a_contig = 1
35218.       condensed_dim_char%header%dv_versn = 2
35218.       condensed_dim_char%header%dv_smunit = 64
35218.       condensed_dim_char%header%d_type = 0
35218.       condensed_dim_char%header%n_params = 0
35218.       condensed_dim_char%header%pad_codim = 0
35218.       condensed_dim_char%header%n_codim = 0
35218.       condensed_dim_char%header%pad_dim = 0
35218.       condensed_dim_char%header%n_dim = 3
35218.       condensed_dim_char%header%d_type_idx = 13
35218.       condensed_dim_char%header%typ_code = 134481411
35218.       condensed_dim_char%header%orig_base = 0
35218.       condensed_dim_char%header%orig_size = 0
35218.       condensed_dim_char%dim_1%LB = 1
35218.       condensed_dim_char%dim_1%EX = 0
35218.       condensed_dim_char%dim_1%SM = 1
35218.       condensed_dim_char%dim_2%LB = 1
35218.       condensed_dim_char%dim_2%EX = 0
35218.       condensed_dim_char%dim_2%SM = 1
35218.       condensed_dim_char%dim_3%LB = 1
35218.       condensed_dim_char%dim_3%EX = 0
35218.       condensed_dim_char%dim_3%SM = 1
35282.       condensed_mix_ratio%header%el_len = 64
35282.       condensed_mix_ratio%header%assoc = 0
35282.       condensed_mix_ratio%header%ptr_alloc = 0
35282.       condensed_mix_ratio%header%p_or_a = 2
35282.       condensed_mix_ratio%header%a_contig = 1
35282.       condensed_mix_ratio%header%dv_versn = 2
35282.       condensed_mix_ratio%header%dv_smunit = 64
35282.       condensed_mix_ratio%header%d_type = 0
35282.       condensed_mix_ratio%header%n_params = 0
35282.       condensed_mix_ratio%header%pad_codim = 0
35282.       condensed_mix_ratio%header%n_codim = 0
35282.       condensed_mix_ratio%header%pad_dim = 0
35282.       condensed_mix_ratio%header%n_dim = 3
35282.       condensed_mix_ratio%header%d_type_idx = 13
35282.       condensed_mix_ratio%header%typ_code = 134481411
35282.       condensed_mix_ratio%header%orig_base = 0
35282.       condensed_mix_ratio%header%orig_size = 0
35282.       condensed_mix_ratio%dim_1%LB = 1
35282.       condensed_mix_ratio%dim_1%EX = 0
35282.       condensed_mix_ratio%dim_1%SM = 1
35282.       condensed_mix_ratio%dim_2%LB = 1
35282.       condensed_mix_ratio%dim_2%EX = 0
35282.       condensed_mix_ratio%dim_2%SM = 1
35282.       condensed_mix_ratio%dim_3%LB = 1
35282.       condensed_mix_ratio%dim_3%EX = 0
35282.       condensed_mix_ratio%dim_3%SM = 1
34743.       t$10374 = swdat%dim%nd_cloud_parameter
35223.       t$10439 = max( 0, swdat%dim%nd_cloud_parameter )
34743.       t$10440 = max( 0, swdat%dim%nd_cloud_parameter )
34743.       t$10441 = 4 * max( 0, swdat%dim%nd_cloud_parameter )
34743.       t$10442 = max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 4
35223.       t$10443 = 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 )
35223.       t$10445 = 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32
34743.       t$10360 = swdat%dim%nd_species
34968.       t$10446 = max( 0, swdat%dim%nd_species )
34968.       t$10447 = 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 )
34968.       t$10449 = 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species )
34743.       t$10450 = max( 0, swdat%dim%nd_band )
35094.       t$10451 = 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 )
35094.       t$10453 = 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band )
34743.       t$10454 = max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term )
35100.       t$10455 = 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 )
35100.       t$10457 = 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8
35097.       t$10458 = 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 )
35063.       t$10460 = 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 )
35237.       d_mass%header%el_len = 64
35237.       d_mass%header%assoc = 0
35237.       d_mass%header%ptr_alloc = 0
35237.       d_mass%header%p_or_a = 2
35237.       d_mass%header%a_contig = 1
35237.       d_mass%header%dv_versn = 2
35237.       d_mass%header%dv_smunit = 64
35237.       d_mass%header%d_type = 0
35237.       d_mass%header%n_params = 0
35237.       d_mass%header%pad_codim = 0
35237.       d_mass%header%n_codim = 0
35237.       d_mass%header%pad_dim = 0
35237.       d_mass%header%n_dim = 2
35237.       d_mass%header%d_type_idx = 13
35237.       d_mass%header%typ_code = 134481411
35237.       d_mass%header%orig_base = 0
35237.       d_mass%header%orig_size = 0
35237.       d_mass%dim_1%LB = 1
35237.       d_mass%dim_1%EX = 0
35237.       d_mass%dim_1%SM = 1
35237.       d_mass%dim_2%LB = 1
35237.       d_mass%dim_2%EX = 0
35237.       d_mass%dim_2%SM = 1
35245.       flux_direct%header%el_len = 64
35245.       flux_direct%header%assoc = 0
35245.       flux_direct%header%ptr_alloc = 0
35245.       flux_direct%header%p_or_a = 2
35245.       flux_direct%header%a_contig = 1
35245.       flux_direct%header%dv_versn = 2
35245.       flux_direct%header%dv_smunit = 64
35245.       flux_direct%header%d_type = 0
35245.       flux_direct%header%n_params = 0
35245.       flux_direct%header%pad_codim = 0
35245.       flux_direct%header%n_codim = 0
35245.       flux_direct%header%pad_dim = 0
35245.       flux_direct%header%n_dim = 3
35245.       flux_direct%header%d_type_idx = 13
35245.       flux_direct%header%typ_code = 134481411
35245.       flux_direct%header%orig_base = 0
35245.       flux_direct%header%orig_size = 0
35245.       flux_direct%dim_1%LB = 1
35245.       flux_direct%dim_1%EX = 0
35245.       flux_direct%dim_1%SM = 1
35245.       flux_direct%dim_2%LB = 1
35245.       flux_direct%dim_2%EX = 0
35245.       flux_direct%dim_2%SM = 1
35245.       flux_direct%dim_3%LB = 1
35245.       flux_direct%dim_3%EX = 0
35245.       flux_direct%dim_3%SM = 1
35239.       flux_direct_clear%header%el_len = 64
35239.       flux_direct_clear%header%assoc = 0
35239.       flux_direct_clear%header%ptr_alloc = 0
35239.       flux_direct_clear%header%p_or_a = 2
35239.       flux_direct_clear%header%a_contig = 1
35239.       flux_direct_clear%header%dv_versn = 2
35239.       flux_direct_clear%header%dv_smunit = 64
35239.       flux_direct_clear%header%d_type = 0
35239.       flux_direct_clear%header%n_params = 0
35239.       flux_direct_clear%header%pad_codim = 0
35239.       flux_direct_clear%header%n_codim = 0
35239.       flux_direct_clear%header%pad_dim = 0
35239.       flux_direct_clear%header%n_dim = 3
35239.       flux_direct_clear%header%d_type_idx = 13
35239.       flux_direct_clear%header%typ_code = 134481411
35239.       flux_direct_clear%header%orig_base = 0
35239.       flux_direct_clear%header%orig_size = 0
35239.       flux_direct_clear%dim_1%LB = 1
35239.       flux_direct_clear%dim_1%EX = 0
35239.       flux_direct_clear%dim_1%SM = 1
35239.       flux_direct_clear%dim_2%LB = 1
35239.       flux_direct_clear%dim_2%EX = 0
35239.       flux_direct_clear%dim_2%SM = 1
35239.       flux_direct_clear%dim_3%LB = 1
35239.       flux_direct_clear%dim_3%EX = 0
35239.       flux_direct_clear%dim_3%SM = 1
35247.       flux_down%header%el_len = 64
35247.       flux_down%header%assoc = 0
35247.       flux_down%header%ptr_alloc = 0
35247.       flux_down%header%p_or_a = 2
35247.       flux_down%header%a_contig = 1
35247.       flux_down%header%dv_versn = 2
35247.       flux_down%header%dv_smunit = 64
35247.       flux_down%header%d_type = 0
35247.       flux_down%header%n_params = 0
35247.       flux_down%header%pad_codim = 0
35247.       flux_down%header%n_codim = 0
35247.       flux_down%header%pad_dim = 0
35247.       flux_down%header%n_dim = 3
35247.       flux_down%header%d_type_idx = 13
35247.       flux_down%header%typ_code = 134481411
35247.       flux_down%header%orig_base = 0
35247.       flux_down%header%orig_size = 0
35247.       flux_down%dim_1%LB = 1
35247.       flux_down%dim_1%EX = 0
35247.       flux_down%dim_1%SM = 1
35247.       flux_down%dim_2%LB = 1
35247.       flux_down%dim_2%EX = 0
35247.       flux_down%dim_2%SM = 1
35247.       flux_down%dim_3%LB = 1
35247.       flux_down%dim_3%EX = 0
35247.       flux_down%dim_3%SM = 1
35243.       flux_down_clear%header%el_len = 64
35243.       flux_down_clear%header%assoc = 0
35243.       flux_down_clear%header%ptr_alloc = 0
35243.       flux_down_clear%header%p_or_a = 2
35243.       flux_down_clear%header%a_contig = 1
35243.       flux_down_clear%header%dv_versn = 2
35243.       flux_down_clear%header%dv_smunit = 64
35243.       flux_down_clear%header%d_type = 0
35243.       flux_down_clear%header%n_params = 0
35243.       flux_down_clear%header%pad_codim = 0
35243.       flux_down_clear%header%n_codim = 0
35243.       flux_down_clear%header%pad_dim = 0
35243.       flux_down_clear%header%n_dim = 3
35243.       flux_down_clear%header%d_type_idx = 13
35243.       flux_down_clear%header%typ_code = 134481411
35243.       flux_down_clear%header%orig_base = 0
35243.       flux_down_clear%header%orig_size = 0
35243.       flux_down_clear%dim_1%LB = 1
35243.       flux_down_clear%dim_1%EX = 0
35243.       flux_down_clear%dim_1%SM = 1
35243.       flux_down_clear%dim_2%LB = 1
35243.       flux_down_clear%dim_2%EX = 0
35243.       flux_down_clear%dim_2%SM = 1
35243.       flux_down_clear%dim_3%LB = 1
35243.       flux_down_clear%dim_3%EX = 0
35243.       flux_down_clear%dim_3%SM = 1
35251.       flux_net%header%el_len = 64
35251.       flux_net%header%assoc = 0
35251.       flux_net%header%ptr_alloc = 0
35251.       flux_net%header%p_or_a = 2
35251.       flux_net%header%a_contig = 1
35251.       flux_net%header%dv_versn = 2
35251.       flux_net%header%dv_smunit = 64
35251.       flux_net%header%d_type = 0
35251.       flux_net%header%n_params = 0
35251.       flux_net%header%pad_codim = 0
35251.       flux_net%header%n_codim = 0
35251.       flux_net%header%pad_dim = 0
35251.       flux_net%header%n_dim = 3
35251.       flux_net%header%d_type_idx = 13
35251.       flux_net%header%typ_code = 134481411
35251.       flux_net%header%orig_base = 0
35251.       flux_net%header%orig_size = 0
35251.       flux_net%dim_1%LB = 1
35251.       flux_net%dim_1%EX = 0
35251.       flux_net%dim_1%SM = 1
35251.       flux_net%dim_2%LB = 1
35251.       flux_net%dim_2%EX = 0
35251.       flux_net%dim_2%SM = 1
35251.       flux_net%dim_3%LB = 1
35251.       flux_net%dim_3%EX = 0
35251.       flux_net%dim_3%SM = 1
35241.       flux_net_clear%header%el_len = 64
35241.       flux_net_clear%header%assoc = 0
35241.       flux_net_clear%header%ptr_alloc = 0
35241.       flux_net_clear%header%p_or_a = 2
35241.       flux_net_clear%header%a_contig = 1
35241.       flux_net_clear%header%dv_versn = 2
35241.       flux_net_clear%header%dv_smunit = 64
35241.       flux_net_clear%header%d_type = 0
35241.       flux_net_clear%header%n_params = 0
35241.       flux_net_clear%header%pad_codim = 0
35241.       flux_net_clear%header%n_codim = 0
35241.       flux_net_clear%header%pad_dim = 0
35241.       flux_net_clear%header%n_dim = 3
35241.       flux_net_clear%header%d_type_idx = 13
35241.       flux_net_clear%header%typ_code = 134481411
35241.       flux_net_clear%header%orig_base = 0
35241.       flux_net_clear%header%orig_size = 0
35241.       flux_net_clear%dim_1%LB = 1
35241.       flux_net_clear%dim_1%EX = 0
35241.       flux_net_clear%dim_1%SM = 1
35241.       flux_net_clear%dim_2%LB = 1
35241.       flux_net_clear%dim_2%EX = 0
35241.       flux_net_clear%dim_2%SM = 1
35241.       flux_net_clear%dim_3%LB = 1
35241.       flux_net_clear%dim_3%EX = 0
35241.       flux_net_clear%dim_3%SM = 1
35249.       flux_up%header%el_len = 64
35249.       flux_up%header%assoc = 0
35249.       flux_up%header%ptr_alloc = 0
35249.       flux_up%header%p_or_a = 2
35249.       flux_up%header%a_contig = 1
35249.       flux_up%header%dv_versn = 2
35249.       flux_up%header%dv_smunit = 64
35249.       flux_up%header%d_type = 0
35249.       flux_up%header%n_params = 0
35249.       flux_up%header%pad_codim = 0
35249.       flux_up%header%n_codim = 0
35249.       flux_up%header%pad_dim = 0
35249.       flux_up%header%n_dim = 3
35249.       flux_up%header%d_type_idx = 13
35249.       flux_up%header%typ_code = 134481411
35249.       flux_up%header%orig_base = 0
35249.       flux_up%header%orig_size = 0
35249.       flux_up%dim_1%LB = 1
35249.       flux_up%dim_1%EX = 0
35249.       flux_up%dim_1%SM = 1
35249.       flux_up%dim_2%LB = 1
35249.       flux_up%dim_2%EX = 0
35249.       flux_up%dim_2%SM = 1
35249.       flux_up%dim_3%LB = 1
35249.       flux_up%dim_3%EX = 0
35249.       flux_up%dim_3%SM = 1
35216.       flux_up_clear%header%el_len = 64
35216.       flux_up_clear%header%assoc = 0
35216.       flux_up_clear%header%ptr_alloc = 0
35216.       flux_up_clear%header%p_or_a = 2
35216.       flux_up_clear%header%a_contig = 1
35216.       flux_up_clear%header%dv_versn = 2
35216.       flux_up_clear%header%dv_smunit = 64
35216.       flux_up_clear%header%d_type = 0
35216.       flux_up_clear%header%n_params = 0
35216.       flux_up_clear%header%pad_codim = 0
35216.       flux_up_clear%header%n_codim = 0
35216.       flux_up_clear%header%pad_dim = 0
35216.       flux_up_clear%header%n_dim = 3
35216.       flux_up_clear%header%d_type_idx = 13
35216.       flux_up_clear%header%typ_code = 134481411
35216.       flux_up_clear%header%orig_base = 0
35216.       flux_up_clear%header%orig_size = 0
35216.       flux_up_clear%dim_1%LB = 1
35216.       flux_up_clear%dim_1%EX = 0
35216.       flux_up_clear%dim_1%SM = 1
35216.       flux_up_clear%dim_2%LB = 1
35216.       flux_up_clear%dim_2%EX = 0
35216.       flux_up_clear%dim_2%SM = 1
35216.       flux_up_clear%dim_3%LB = 1
35216.       flux_up_clear%dim_3%EX = 0
35216.       flux_up_clear%dim_3%SM = 1
35170.       frac_cloud%header%el_len = 64
35170.       frac_cloud%header%assoc = 0
35170.       frac_cloud%header%ptr_alloc = 0
35170.       frac_cloud%header%p_or_a = 2
35170.       frac_cloud%header%a_contig = 1
35170.       frac_cloud%header%dv_versn = 2
35170.       frac_cloud%header%dv_smunit = 64
35170.       frac_cloud%header%d_type = 0
35170.       frac_cloud%header%n_params = 0
35170.       frac_cloud%header%pad_codim = 0
35170.       frac_cloud%header%n_codim = 0
35170.       frac_cloud%header%pad_dim = 0
35170.       frac_cloud%header%n_dim = 3
35170.       frac_cloud%header%d_type_idx = 13
35170.       frac_cloud%header%typ_code = 134481411
35170.       frac_cloud%header%orig_base = 0
35170.       frac_cloud%header%orig_size = 0
35170.       frac_cloud%dim_1%LB = 1
35170.       frac_cloud%dim_1%EX = 0
35170.       frac_cloud%dim_1%SM = 1
35170.       frac_cloud%dim_2%LB = 1
35170.       frac_cloud%dim_2%EX = 0
35170.       frac_cloud%dim_2%SM = 1
35170.       frac_cloud%dim_3%LB = 1
35170.       frac_cloud%dim_3%EX = 0
35170.       frac_cloud%dim_3%SM = 1
35097.       gas_mix_ratio%header%el_len = 64
35097.       gas_mix_ratio%header%assoc = 0
35097.       gas_mix_ratio%header%ptr_alloc = 0
35097.       gas_mix_ratio%header%p_or_a = 2
35097.       gas_mix_ratio%header%a_contig = 1
35097.       gas_mix_ratio%header%dv_versn = 2
35097.       gas_mix_ratio%header%dv_smunit = 64
35097.       gas_mix_ratio%header%d_type = 0
35097.       gas_mix_ratio%header%n_params = 0
35097.       gas_mix_ratio%header%pad_codim = 0
35097.       gas_mix_ratio%header%n_codim = 0
35097.       gas_mix_ratio%header%pad_dim = 0
35097.       gas_mix_ratio%header%n_dim = 3
35097.       gas_mix_ratio%header%d_type_idx = 13
35097.       gas_mix_ratio%header%typ_code = 134481411
35097.       gas_mix_ratio%header%orig_base = 0
35097.       gas_mix_ratio%header%orig_size = 0
35097.       gas_mix_ratio%dim_1%LB = 1
35097.       gas_mix_ratio%dim_1%EX = 0
35097.       gas_mix_ratio%dim_1%SM = 1
35097.       gas_mix_ratio%dim_2%LB = 1
35097.       gas_mix_ratio%dim_2%EX = 0
35097.       gas_mix_ratio%dim_2%SM = 1
35097.       gas_mix_ratio%dim_3%LB = 1
35097.       gas_mix_ratio%dim_3%EX = 0
35097.       gas_mix_ratio%dim_3%SM = 1
35116.       t$10461 = 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
35116.       t$10463 = 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
35122.       t$10464 = 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35122.       t$10466 = max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35119.       t$10467 = 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35119.       t$10469 = 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35164.       t$10471 = 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 12 * max( 0, swdat%dim%nd_band )
35014.       t$10473 = 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band )
35281.       t$10475 = 4 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band )
35281.       t$10477 = 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band )
34960.       t$10479 = 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band ) + 4 * max( 0, swdat%dim%nd_species )
35036.       t$10481 = 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band )
35128.       t$10483 = 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 4 * max( 0, swdat%dim%nd_aerosol_species )
35057.       t$10485 = 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band )
35178.       pres%header%el_len = 64
35178.       pres%header%assoc = 0
35178.       pres%header%ptr_alloc = 0
35178.       pres%header%p_or_a = 2
35178.       pres%header%a_contig = 1
35178.       pres%header%dv_versn = 2
35178.       pres%header%dv_smunit = 64
35178.       pres%header%d_type = 0
35178.       pres%header%n_params = 0
35178.       pres%header%pad_codim = 0
35178.       pres%header%n_codim = 0
35178.       pres%header%pad_dim = 0
35178.       pres%header%n_dim = 2
35178.       pres%header%d_type_idx = 13
35178.       pres%header%typ_code = 134481411
35178.       pres%header%orig_base = 0
35178.       pres%header%orig_size = 0
35178.       pres%dim_1%LB = 1
35178.       pres%dim_1%EX = 0
35178.       pres%dim_1%SM = 1
35178.       pres%dim_2%LB = 1
35178.       pres%dim_2%EX = 0
35178.       pres%dim_2%SM = 1
35131.       rho_alb%header%el_len = 64
35131.       rho_alb%header%assoc = 0
35131.       rho_alb%header%ptr_alloc = 0
35131.       rho_alb%header%p_or_a = 2
35131.       rho_alb%header%a_contig = 1
35131.       rho_alb%header%dv_versn = 2
35131.       rho_alb%header%dv_smunit = 64
35131.       rho_alb%header%d_type = 0
35131.       rho_alb%header%n_params = 0
35131.       rho_alb%header%pad_codim = 0
35131.       rho_alb%header%n_codim = 0
35131.       rho_alb%header%pad_dim = 0
35131.       rho_alb%header%n_dim = 3
35131.       rho_alb%header%d_type_idx = 13
35131.       rho_alb%header%typ_code = 134481411
35131.       rho_alb%header%orig_base = 0
35131.       rho_alb%header%orig_size = 0
35131.       rho_alb%dim_1%LB = 1
35131.       rho_alb%dim_1%EX = 0
35131.       rho_alb%dim_1%SM = 1
35131.       rho_alb%dim_2%LB = 1
35131.       rho_alb%dim_2%EX = 0
35131.       rho_alb%dim_2%SM = 1
35131.       rho_alb%dim_3%LB = 1
35131.       rho_alb%dim_3%EX = 0
35131.       rho_alb%dim_3%SM = 1
34743.       t$10486 = 2 * max( 0, swdat%dim%nd_band )
35273.       t$10487 = 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 )
35156.       t$10489 = 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 )
35059.       solar_irrad%header%el_len = 64
35059.       solar_irrad%header%assoc = 0
35059.       solar_irrad%header%ptr_alloc = 0
35059.       solar_irrad%header%p_or_a = 2
35059.       solar_irrad%header%a_contig = 1
35059.       solar_irrad%header%dv_versn = 2
35059.       solar_irrad%header%dv_smunit = 64
35059.       solar_irrad%header%d_type = 0
35059.       solar_irrad%header%n_params = 0
35059.       solar_irrad%header%pad_codim = 0
35059.       solar_irrad%header%n_codim = 0
35059.       solar_irrad%header%pad_dim = 0
35059.       solar_irrad%header%n_dim = 1
35059.       solar_irrad%header%d_type_idx = 13
35059.       solar_irrad%header%typ_code = 134481411
35059.       solar_irrad%header%orig_base = 0
35059.       solar_irrad%header%orig_size = 0
35059.       solar_irrad%dim_1%LB = 1
35059.       solar_irrad%dim_1%EX = 0
35059.       solar_irrad%dim_1%SM = 1
35273.       temp%header%el_len = 64
35273.       temp%header%assoc = 0
35273.       temp%header%ptr_alloc = 0
35273.       temp%header%p_or_a = 2
35273.       temp%header%a_contig = 1
35273.       temp%header%dv_versn = 2
35273.       temp%header%dv_smunit = 64
35273.       temp%header%d_type = 0
35273.       temp%header%n_params = 0
35273.       temp%header%pad_codim = 0
35273.       temp%header%n_codim = 0
35273.       temp%header%pad_dim = 0
35273.       temp%header%n_dim = 2
35273.       temp%header%d_type_idx = 13
35273.       temp%header%typ_code = 134481411
35273.       temp%header%orig_base = 0
35273.       temp%header%orig_size = 0
35273.       temp%dim_1%LB = 1
35273.       temp%dim_1%EX = 0
35273.       temp%dim_1%SM = 1
35273.       temp%dim_2%LB = 1
35273.       temp%dim_2%EX = 0
35273.       temp%dim_2%SM = 1
34743.       t$10490 = max( 0, swdat%dim%nd_band )
35274.       t$10491 = 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 )
35185.       t$10493 = 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 )
35061.       t_ground%header%el_len = 64
35061.       t_ground%header%assoc = 0
35061.       t_ground%header%ptr_alloc = 0
35061.       t_ground%header%p_or_a = 2
35061.       t_ground%header%a_contig = 1
35061.       t_ground%header%dv_versn = 2
35061.       t_ground%header%dv_smunit = 64
35061.       t_ground%header%d_type = 0
35061.       t_ground%header%n_params = 0
35061.       t_ground%header%pad_codim = 0
35061.       t_ground%header%n_codim = 0
35061.       t_ground%header%pad_dim = 0
35061.       t_ground%header%n_dim = 1
35061.       t_ground%header%d_type_idx = 13
35061.       t_ground%header%typ_code = 134481411
35061.       t_ground%header%orig_base = 0
35061.       t_ground%header%orig_size = 0
35061.       t_ground%dim_1%LB = 1
35061.       t_ground%dim_1%EX = 0
35061.       t_ground%dim_1%SM = 1
35274.       t_level%header%el_len = 64
35274.       t_level%header%assoc = 0
35274.       t_level%header%ptr_alloc = 0
35274.       t_level%header%p_or_a = 2
35274.       t_level%header%a_contig = 1
35274.       t_level%header%dv_versn = 2
35274.       t_level%header%dv_smunit = 64
35274.       t_level%header%d_type = 0
35274.       t_level%header%n_params = 0
35274.       t_level%header%pad_codim = 0
35274.       t_level%header%n_codim = 0
35274.       t_level%header%pad_dim = 0
35274.       t_level%header%n_dim = 2
35274.       t_level%header%d_type_idx = 13
35274.       t_level%header%typ_code = 134481411
35274.       t_level%header%orig_base = 0
35274.       t_level%header%orig_size = 0
35274.       t_level%dim_1%LB = 1
35274.       t_level%dim_1%EX = 0
35274.       t_level%dim_1%SM = 1
35274.       t_level%dim_2%LB = 1
35274.       t_level%dim_2%EX = 0
35274.       t_level%dim_2%SM = 1
35270.       t$10494 = 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35270.       t$10496 = 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
34935.       t$10497 = 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35213.       t$10499 = 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35158.       w_cloud%header%el_len = 64
35158.       w_cloud%header%assoc = 0
35158.       w_cloud%header%ptr_alloc = 0
35158.       w_cloud%header%p_or_a = 2
35158.       w_cloud%header%a_contig = 1
35158.       w_cloud%header%dv_versn = 2
35158.       w_cloud%header%dv_smunit = 64
35158.       w_cloud%header%d_type = 0
35158.       w_cloud%header%n_params = 0
35158.       w_cloud%header%pad_codim = 0
35158.       w_cloud%header%n_codim = 0
35158.       w_cloud%header%pad_dim = 0
35158.       w_cloud%header%n_dim = 2
35158.       w_cloud%header%d_type_idx = 13
35158.       w_cloud%header%typ_code = 134481411
35158.       w_cloud%header%orig_base = 0
35158.       w_cloud%header%orig_size = 0
35158.       w_cloud%dim_1%LB = 1
35158.       w_cloud%dim_1%EX = 0
35158.       w_cloud%dim_1%SM = 1
35158.       w_cloud%dim_2%LB = 1
35158.       w_cloud%dim_2%EX = 0
35158.       w_cloud%dim_2%SM = 1
34935.       zen_0%header%el_len = 64
34935.       zen_0%header%assoc = 0
34935.       zen_0%header%ptr_alloc = 0
34935.       zen_0%header%p_or_a = 2
34935.       zen_0%header%a_contig = 1
34935.       zen_0%header%dv_versn = 2
34935.       zen_0%header%dv_smunit = 64
34935.       zen_0%header%d_type = 0
34935.       zen_0%header%n_params = 0
34935.       zen_0%header%pad_codim = 0
34935.       zen_0%header%n_codim = 0
34935.       zen_0%header%pad_dim = 0
34935.       zen_0%header%n_dim = 1
34935.       zen_0%header%d_type_idx = 13
34935.       zen_0%header%typ_code = 134481411
34935.       zen_0%header%orig_base = 0
34935.       zen_0%header%orig_size = 0
34935.       zen_0%dim_1%LB = 1
34935.       zen_0%dim_1%EX = 0
34935.       zen_0%dim_1%SM = 1
34743.       t$10420 = int( _alloc( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
35139.       t$10421 = t$10420
35145.       t$10428 = t$10420 + 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 )
35135.       t$10432 = t$10420 + 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 )
35142.       t$10435 = t$10420 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 )
35282.       t$10437 = t$10420 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 )
35223.       t$10444 = t$10420 + 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 )
34968.       t$10448 = t$10420 + 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 )
35094.       t$10452 = t$10420 + 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 )
35100.       t$10456 = t$10420 + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 )
35097.       t$10459 = t$10420 + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 )
35116.       t$10462 = t$10420 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 )
35122.       t$10465 = t$10420 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35119.       t$10468 = t$10420 + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35164.       t$10470 = t$10420 + 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35014.       t$10472 = t$10420 + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 12 * max( 0, swdat%dim%nd_band )
35281.       t$10474 = t$10420 + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band )
35281.       t$10476 = t$10420 + 4 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band )
34960.       t$10478 = t$10420 + 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band )
35036.       t$10480 = t$10420 + 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * max( 0, swdat%dim%nd_band ) + 4 * max( 0, swdat%dim%nd_species )
35128.       t$10482 = t$10420 + 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band )
35131.       t$10484 = t$10420 + 8 * _zla( 0, ncols ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 4 * max( 0, swdat%dim%nd_aerosol_species )
35273.       t$10488 = t$10420 + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 )
35274.       t$10492 = t$10420 + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 )
35270.       t$10495 = t$10420 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
34935.       t$10498 = t$10420 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 16 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, ncols ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 8 * ( ( max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * max( 0, swdat%dim%nd_band ) + 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 8 * ( ( 4 * _zla( 0, ncols ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 + 8 * ( ( 8 * ( ( 8 * ( ( 7 + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * 8 ) / 8 ) + max( 0, swdat%dim%nd_aerosol_species ) * max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_aerosol_species ) + 7 ) / 8 ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_cloud_parameter ) * 32 + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_species ) + 7 ) / 8 ) + 8 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + max( 0, swdat%dim%nd_band ) * max( 0, swdat%dim%nd_phase_term ) * 8 + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * max( 0, swdat%dim%nd_species ) + 20 * max( 0, swdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
35296.       $F_A35 = kmax
35296.       $F_A36 = ncols
35296.       if ( and( -$F_A36, -$F_A35 ) < 0 ) then
35296.          $I_L35296_544 = 0
35296.          do
35296.             $I_L35296_324 = 0
35296. !dir$ ivdep
35296.             do
35296.                heatrate(1 + $I_L35296_324, 1 + $I_L35296_544) = 0.0
35296.                $I_L35296_324 = 1 + $I_L35296_324
35296.                if ( $I_L35296_324 >= $F_A36 ) exit
35296.             enddo
35296.             $I_L35296_544 = 1 + $I_L35296_544
35296.             if ( $I_L35296_544 >= $F_A35 ) exit
35296.          enddo
35296.       endif
35297.       $F_A37 = kmax
35297.       $F_A38 = ncols
35297.       if ( and( -$F_A38, -$F_A37 ) < 0 ) then
35297.          $I_L35297_546 = 0
35297.          do
35297.             $I_L35297_326 = 0
35297. !dir$ ivdep
35297.             do
35297.                heatratec(1 + $I_L35297_326, 1 + $I_L35297_546) = 0.0
35297.                $I_L35297_326 = 1 + $I_L35297_326
35297.                if ( $I_L35297_326 >= $F_A38 ) exit
35297.             enddo
35297.             $I_L35297_546 = 1 + $I_L35297_546
35297.             if ( $I_L35297_546 >= $F_A37 ) exit
35297.          enddo
35297.       endif
35299.       $F_A39 = ncols
35299.       if ( ncols > 0 ) then
35299.          $I_L35299_328 = 0
35299. !dir$ ivdep
35299.          do
35299.             toadown(1 + $I_L35299_328) = 0.0
35299.             $I_L35299_328 = 1 + $I_L35299_328
35299.             if ( $I_L35299_328 >= $F_A39 ) exit
35299.          enddo
35323.          $I_L35323_298 = 0
35323. !dir$ ivdep
35323.          do
35323.             listim(1 + $I_L35323_298) = ( 1 + $I_L35323_298 )
35323.             $I_L35323_298 = 1 + $I_L35323_298
35323.             if ( $I_L35323_298 >= ncols ) exit
35323.          enddo
35323.       endif
35301.       $F_A40 = ncols
35301.       if ( ncols > 0 ) then
35301.          $I_L35301_330 = 0
35301. !dir$ ivdep
35301.          do
35301.             sfcvisbeamc(1 + $I_L35301_330) = 0.0
35301.             $I_L35301_330 = 1 + $I_L35301_330
35301.             if ( $I_L35301_330 >= $F_A40 ) exit
35301.          enddo
35301.       endif
35302.       $F_A41 = ncols
35302.       if ( ncols > 0 ) then
35302.          $I_L35302_332 = 0
35302. !dir$ ivdep
35302.          do
35302.             sfcvisdiffc(1 + $I_L35302_332) = 0.0
35302.             $I_L35302_332 = 1 + $I_L35302_332
35302.             if ( $I_L35302_332 >= $F_A41 ) exit
35302.          enddo
35302.       endif
35303.       $F_A42 = ncols
35303.       if ( ncols > 0 ) then
35303.          $I_L35303_334 = 0
35303. !dir$ ivdep
35303.          do
35303.             sfcnirbeamc(1 + $I_L35303_334) = 0.0
35303.             $I_L35303_334 = 1 + $I_L35303_334
35303.             if ( $I_L35303_334 >= $F_A42 ) exit
35303.          enddo
35303.       endif
35304.       $F_A43 = ncols
35304.       if ( ncols > 0 ) then
35304.          $I_L35304_336 = 0
35304. !dir$ ivdep
35304.          do
35304.             sfcnirdiffc(1 + $I_L35304_336) = 0.0
35304.             $I_L35304_336 = 1 + $I_L35304_336
35304.             if ( $I_L35304_336 >= $F_A43 ) exit
35304.          enddo
35304.       endif
35306.       $F_A44 = ncols
35306.       if ( ncols > 0 ) then
35306.          $I_L35306_338 = 0
35306. !dir$ ivdep
35306.          do
35306.             sfcvisbeam(1 + $I_L35306_338) = 0.0
35306.             $I_L35306_338 = 1 + $I_L35306_338
35306.             if ( $I_L35306_338 >= $F_A44 ) exit
35306.          enddo
35306.       endif
35307.       $F_A45 = ncols
35307.       if ( ncols > 0 ) then
35307.          $I_L35307_340 = 0
35307. !dir$ ivdep
35307.          do
35307.             sfcvisdiff(1 + $I_L35307_340) = 0.0
35307.             $I_L35307_340 = 1 + $I_L35307_340
35307.             if ( $I_L35307_340 >= $F_A45 ) exit
35307.          enddo
35307.       endif
35308.       $F_A46 = ncols
35308.       if ( ncols > 0 ) then
35308.          $I_L35308_342 = 0
35308. !dir$ ivdep
35308.          do
35308.             sfcnirbeam(1 + $I_L35308_342) = 0.0
35308.             $I_L35308_342 = 1 + $I_L35308_342
35308.             if ( $I_L35308_342 >= $F_A46 ) exit
35308.          enddo
35308.       endif
35309.       $F_A47 = ncols
35309.       if ( ncols > 0 ) then
35309.          $I_L35309_344 = 0
35309. !dir$ ivdep
35309.          do
35309.             sfcnirdiff(1 + $I_L35309_344) = 0.0
35309.             $I_L35309_344 = 1 + $I_L35309_344
35309.             if ( $I_L35309_344 >= $F_A47 ) exit
35309.          enddo
35309.       endif
35311.       $F_A48 = ncols
35311.       if ( ncols > 0 ) then
35311.          $I_L35311_346 = 0
35311. !dir$ ivdep
35311.          do
35311.             toanet(1 + $I_L35311_346) = 0.0
35311.             $I_L35311_346 = 1 + $I_L35311_346
35311.             if ( $I_L35311_346 >= $F_A48 ) exit
35311.          enddo
35311.       endif
35312.       $F_A49 = ncols
35312.       if ( ncols > 0 ) then
35312.          $I_L35312_348 = 0
35312. !dir$ ivdep
35312.          do
35312.             toanetc(1 + $I_L35312_348) = 0.0
35312.             $I_L35312_348 = 1 + $I_L35312_348
35312.             if ( $I_L35312_348 >= $F_A49 ) exit
35312.          enddo
35312.       endif
35313.       $F_A50 = ncols
35313.       if ( ncols > 0 ) then
35313.          $I_L35313_350 = 0
35313. !dir$ ivdep
35313.          do
35313.             sfcnet(1 + $I_L35313_350) = 0.0
35313.             $I_L35313_350 = 1 + $I_L35313_350
35313.             if ( $I_L35313_350 >= $F_A50 ) exit
35313.          enddo
35313.       endif
35314.       $F_A51 = ncols
35314.       if ( ncols > 0 ) then
35314.          $I_L35314_352 = 0
35314. !dir$ ivdep
35314.          do
35314.             sfcnetc(1 + $I_L35314_352) = 0.0
35314.             $I_L35314_352 = 1 + $I_L35314_352
35314.             if ( $I_L35314_352 >= $F_A51 ) exit
35314.          enddo
35314.       endif
35316.       ierr = 0
35327.       $F_A52 = ncols
35327.       if ( ncols > 0 ) then
35327.          $I_L35327_354 = 0
35327. !dir$ ivdep
35327.          do
35327.             bitx(1 + $I_L35327_354) = cosz(1 + $I_L35327_354) >= 1.0e-2
35327.             $I_L35327_354 = 1 + $I_L35327_354
35327.             if ( $I_L35327_354 >= $F_A52 ) exit
35327.          enddo
35327.       endif
35330.       $Reduc_A53 = 0
35330.       $F_A55 = ncols
35330.       if ( ncols > 0 ) then
35330.          $I_L35330_356 = 0
35330. !dir$ ivdep
35330.          do
35330.             if ( bitx(1 + $I_L35330_356) ) then
35330.                $Reduc_A53 = 1 + $Reduc_A53
35330.             endif
35330.             $I_L35330_356 = 1 + $I_L35330_356
35330.             if ( $I_L35330_356 >= $F_A55 ) exit
35330.          enddo
35330.       endif
35333.       if ( $Reduc_A53 == 0 ) then
35232.          $_allo_P1(0) = 0x17000000000001L
35232.          $_allo_P1(1) = loc( zen_0 )
35232.          $_allo_P1(2) = loc( w_cloud )
35232.          $_allo_P1(3) = loc( t_level )
35232.          $_allo_P1(4) = loc( t_ground )
35232.          $_allo_P1(5) = loc( temp )
35232.          $_allo_P1(6) = loc( solar_irrad )
35232.          $_allo_P1(7) = loc( rho_alb )
35232.          $_allo_P1(8) = loc( pres )
35232.          $_allo_P1(9) = loc( gas_mix_ratio )
35232.          $_allo_P1(10) = loc( frac_cloud )
35232.          $_allo_P1(11) = loc( flux_up_clear )
35232.          $_allo_P1(12) = loc( flux_up )
35232.          $_allo_P1(13) = loc( flux_net_clear )
35232.          $_allo_P1(14) = loc( flux_net )
35232.          $_allo_P1(15) = loc( flux_down_clear )
35232.          $_allo_P1(16) = loc( flux_down )
35232.          $_allo_P1(17) = loc( flux_direct_clear )
35232.          $_allo_P1(18) = loc( flux_direct )
35232.          $_allo_P1(19) = loc( d_mass )
35232.          $_allo_P1(20) = loc( condensed_mix_ratio )
35232.          $_allo_P1(21) = loc( condensed_dim_char )
35232.          $_allo_P1(22) = loc( clouds )
35232.          $_allo_P1(23) = loc( aerosol_mix_ratio )
35232.          call _dealloc( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
34743.          _free( t$10420 )
34743.       else
35338.          $F_A56 = ncols
35338.          if ( ncols > 0 ) then
35338.             $I_L35338_358 = 0
35338. !dir$ ivdep
35338.             do
35338.                litx(1 + $I_L35338_358) = 0
35338.                $I_L35338_358 = 1 + $I_L35338_358
35338.                if ( $I_L35338_358 >= $F_A56 ) exit
35338.             enddo
35338.          endif
35339.          t$10632 = ( max( 0, ncols ) )
35339.          t$10635 = int( _alloc( max( 0, 4 * max( 0, ( max( 0, ncols ) ) ) ) ), 8 )
35339.          $F_A57 = ncols
35339.          if ( ncols > 0 ) then
35339.             $I_L35339_360 = 0
35339. !dir$ ivdep
35339.             do
35339.                t$10634(1 + $I_L35339_360) = listim(1 + $I_L35339_360)
35339.                $I_L35339_360 = 1 + $I_L35339_360
35339.                if ( $I_L35339_360 >= $F_A57 ) exit
35339.             enddo
35339.          endif
35339.          t$10636 = ( max( 0, ncols ) )
35339.          t$10639 = int( _alloc( max( 0, 4 * max( 0, ( max( 0, ncols ) ) ) ) ), 8 )
35339.          $F_A58 = ncols
35339.          if ( ncols > 0 ) then
35339.             $I_L35339_362 = 0
35339. !dir$ ivdep
35339.             do
35339.                t$10638(1 + $I_L35339_362) = bitx(1 + $I_L35339_362)
35339.                $I_L35339_362 = 1 + $I_L35339_362
35339.                if ( $I_L35339_362 >= $F_A58 ) exit
35339.             enddo
35339.          endif
35339.          $PackIdx_A0 = 0
35339.          if ( ncols > 0 ) then
35339.             $I_L35339_322 = 0
35339. !dir$ ivdep
35339.             do
35339.                if ( t$10638(1 + $I_L35339_322) ) then
35339.                   litx(1 + $PackIdx_A0) = t$10634(1 + $I_L35339_322)
35339.                   $PackIdx_A0 = 1 + $PackIdx_A0
35339.                endif
35339.                $I_L35339_322 = 1 + $I_L35339_322
35339.                if ( $I_L35339_322 >= max( 0, ncols ) ) exit
35339.             enddo
35339.          endif
35339.          _free( t$10639 )
35339.          _free( t$10635 )
35344.          n_profile = $Reduc_A53
35345.          n_layer = kmax
35347.          nd_profile = $Reduc_A53
35348.          nd_layer = kmax
35350.          nd_2sg_profile = $Reduc_A53
35351.          nd_flux_profile = $Reduc_A53
35357.          pres%header%a_contig = 1
35357.          pres%dim_1%LB = 1
35357.          pres%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35357.          pres%dim_1%SM = 1
35357.          pres%dim_2%LB = 1
35357.          pres%dim_2%EX = ( max( 0, kmax ) )
35357.          pres%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35357.          $_allo_P2(0) = 0x1000000000001L
35357.          $_allo_P2(1) = loc( pres )
35357.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
35358.          $F_A59 = kmax
35358.          $F_A60 = $Reduc_A53
35358.          if ( and( -$F_A60, -$F_A59 ) < 0 ) then
35358.             $I_L35358_548 = 0
35358.             do
35358.                $I_L35358_364 = 0
35358. !dir$ ivdep
35358.                do
35358.                   (pres%base_addr)(1 + $I_L35358_364, 1 + $I_L35358_548, 0) = 0.0
35358.                   $I_L35358_364 = 1 + $I_L35358_364
35358.                   if ( $I_L35358_364 >= $F_A60 ) exit
35358.                enddo
35358.                $I_L35358_548 = 1 + $I_L35358_548
35358.                if ( $I_L35358_548 >= $F_A59 ) exit
35358.             enddo
35358.          endif
35359.          temp%header%a_contig = 1
35359.          temp%dim_1%LB = 1
35359.          temp%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35359.          temp%dim_1%SM = 1
35359.          temp%dim_2%LB = 1
35359.          temp%dim_2%EX = ( max( 0, kmax ) )
35359.          temp%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35359.          $_allo_P3(0) = 0x1000000000001L
35359.          $_allo_P3(1) = loc( temp )
35359.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
35360.          $F_A61 = kmax
35360.          $F_A62 = $Reduc_A53
35360.          if ( and( -$F_A62, -$F_A61 ) < 0 ) then
35360.             $I_L35360_550 = 0
35360.             do
35360.                $I_L35360_366 = 0
35360. !dir$ ivdep
35360.                do
35360.                   (temp%base_addr)(1 + $I_L35360_366, 1 + $I_L35360_550, 0) = 0.0
35360.                   $I_L35360_366 = 1 + $I_L35360_366
35360.                   if ( $I_L35360_366 >= $F_A62 ) exit
35360.                enddo
35360.                $I_L35360_550 = 1 + $I_L35360_550
35360.                if ( $I_L35360_550 >= $F_A61 ) exit
35360.             enddo
35360.          endif
35361.          d_mass%header%a_contig = 1
35361.          d_mass%dim_1%LB = 1
35361.          d_mass%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35361.          d_mass%dim_1%SM = 1
35361.          d_mass%dim_2%LB = 1
35361.          d_mass%dim_2%EX = ( max( 0, kmax ) )
35361.          d_mass%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35361.          $_allo_P4(0) = 0x1000000000001L
35361.          $_allo_P4(1) = loc( d_mass )
35361.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
35362.          $F_A63 = kmax
35362.          $F_A64 = $Reduc_A53
35362.          if ( and( -$F_A64, -$F_A63 ) < 0 ) then
35362.             $I_L35362_552 = 0
35362.             do
35362.                $I_L35362_368 = 0
35362. !dir$ ivdep
35362.                do
35362.                   (d_mass%base_addr)(1 + $I_L35362_368, 1 + $I_L35362_552, 0) = 0.0
35362.                   $I_L35362_368 = 1 + $I_L35362_368
35362.                   if ( $I_L35362_368 >= $F_A64 ) exit
35362.                enddo
35362.                $I_L35362_552 = 1 + $I_L35362_552
35362.                if ( $I_L35362_552 >= $F_A63 ) exit
35362.             enddo
35362.          endif
35363.          t_ground%header%a_contig = 1
35363.          t_ground%dim_1%LB = 1
35363.          t_ground%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35363.          t_ground%dim_1%SM = 1
35363.          $_allo_P5(0) = 0x1000000000001L
35363.          $_allo_P5(1) = loc( t_ground )
35363.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
35364.          $F_A65 = $Reduc_A53
35364.          if ( $Reduc_A53 > 0 ) then
35364.             $I_L35364_370 = 0
35364. !dir$ ivdep
35364.             do
35364.                (t_ground%base_addr)(1 + $I_L35364_370, 0) = 0.0
35364.                $I_L35364_370 = 1 + $I_L35364_370
35364.                if ( $I_L35364_370 >= $F_A65 ) exit
35364.             enddo
35364.          endif
35365.          t_level%header%a_contig = 1
35365.          t_level%dim_1%LB = 1
35365.          t_level%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35365.          t_level%dim_1%SM = 1
35365.          t_level%dim_2%LB = 0
35365.          t_level%dim_2%EX = ( max( 0, 1 + kmax ) )
35365.          t_level%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35365.          $_allo_P6(0) = 0x1000000000001L
35365.          $_allo_P6(1) = loc( t_level )
35365.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
35366.          $F_A66 = ( 1 + kmax )
35366.          $F_A67 = $Reduc_A53
35366.          if ( and( -$F_A67, -$F_A66 ) < 0 ) then
35366.             $I_L35366_554 = 0
35366.             do
35366.                $I_L35366_372 = 0
35366. !dir$ ivdep
35366.                do
35366.                   (t_level%base_addr)(1 + $I_L35366_372, $I_L35366_554, 0) = 0.0
35366.                   $I_L35366_372 = 1 + $I_L35366_372
35366.                   if ( $I_L35366_372 >= $F_A67 ) exit
35366.                enddo
35366.                $I_L35366_554 = 1 + $I_L35366_554
35366.                if ( $I_L35366_554 >= $F_A66 ) exit
35366.             enddo
35366.          endif
35367.          zen_0%header%a_contig = 1
35367.          zen_0%dim_1%LB = 1
35367.          zen_0%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35367.          zen_0%dim_1%SM = 1
35367.          $_allo_P7(0) = 0x1000000000001L
35367.          $_allo_P7(1) = loc( zen_0 )
35367.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
35368.          $F_A68 = $Reduc_A53
35368.          if ( $Reduc_A53 > 0 ) then
35368.             $I_L35368_374 = 0
35368. !dir$ ivdep
35368.             do
35368.                (zen_0%base_addr)(1 + $I_L35368_374, 0) = 0.0
35368.                $I_L35368_374 = 1 + $I_L35368_374
35368.                if ( $I_L35368_374 >= $F_A68 ) exit
35368.             enddo
35368.          endif
35369.          solar_irrad%header%a_contig = 1
35369.          solar_irrad%dim_1%LB = 1
35369.          solar_irrad%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35369.          solar_irrad%dim_1%SM = 1
35369.          $_allo_P8(0) = 0x1000000000001L
35369.          $_allo_P8(1) = loc( solar_irrad )
35369.          call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
35370.          $F_A69 = $Reduc_A53
35370.          if ( $Reduc_A53 > 0 ) then
35370.             $I_L35370_376 = 0
35370. !dir$ ivdep
35370.             do
35370.                (solar_irrad%base_addr)(1 + $I_L35370_376, 0) = 0.0
35370.                $I_L35370_376 = 1 + $I_L35370_376
35370.                if ( $I_L35370_376 >= $F_A69 ) exit
35370.             enddo
35370.          endif
35371.          rho_alb%header%a_contig = 1
35371.          rho_alb%dim_1%LB = 1
35371.          rho_alb%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35371.          rho_alb%dim_1%SM = 1
35371.          rho_alb%dim_2%LB = 1
35371.          rho_alb%dim_2%EX = 2
35371.          rho_alb%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35371.          rho_alb%dim_3%LB = 1
35371.          rho_alb%dim_3%EX = ( max( 0, swdat%dim%nd_band ) )
35371.          rho_alb%dim_3%SM = ( 2 * max( 0, $Reduc_A53 ) )
35371.          $_allo_P9(0) = 0x1000000000001L
35371.          $_allo_P9(1) = loc( rho_alb )
35371.          call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
35372.          $F_A70 = swdat%dim%nd_band
35372.          $F_A71 = $Reduc_A53
35372.          if ( and( -$F_A71, -$F_A70 ) < 0 ) then
35372.             $SC_swdat_I164 = swdat%dim%nd_band
35372.             $I_L35372_650 = 0
35372.             do
35372.                $I_L35372_556 = 0
35372.                do
35372.                   $I_L35372_378 = 0
35372. !dir$ ivdep
35372.                   do
35372.                      (rho_alb%base_addr)(1 + $I_L35372_378, 1 + $I_L35372_556, 1 + $I_L35372_650, 0) = 0.0
35372.                      $I_L35372_378 = 1 + $I_L35372_378
35372.                      if ( $I_L35372_378 >= $F_A71 ) exit
35372.                   enddo
35372.                   $I_L35372_556 = 1 + $I_L35372_556
35372.                   if ( $I_L35372_556 >= 2 ) exit
35372.                enddo
35372.                $I_L35372_650 = 1 + $I_L35372_650
35372.                if ( $I_L35372_650 >= $F_A70 ) exit
35372.             enddo
35372.          endif
35374.          gas_mix_ratio%header%a_contig = 1
35374.          gas_mix_ratio%dim_1%LB = 1
35374.          gas_mix_ratio%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35374.          gas_mix_ratio%dim_1%SM = 1
35374.          gas_mix_ratio%dim_2%LB = 1
35374.          gas_mix_ratio%dim_2%EX = ( max( 0, kmax ) )
35374.          gas_mix_ratio%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35374.          gas_mix_ratio%dim_3%LB = 1
35374.          gas_mix_ratio%dim_3%EX = ( max( 0, swdat%dim%nd_species ) )
35374.          gas_mix_ratio%dim_3%SM = ( max( 0, kmax ) * max( 0, $Reduc_A53 ) )
35374.          $_allo_P10(0) = 0x1000000000001L
35374.          $_allo_P10(1) = loc( gas_mix_ratio )
35374.          call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
35375.          $F_A72 = swdat%dim%nd_species
35375.          $F_A73 = kmax
35375.          $F_A74 = $Reduc_A53
35375.          if ( and( and( -$F_A73, -$F_A72 ), -$F_A74 ) < 0 ) then
35375.             $SC_swdat_I165 = swdat%dim%nd_species
35375.             $I_L35375_652 = 0
35375.             do
35375.                $I_L35375_558 = 0
35375.                do
35375.                   $I_L35375_380 = 0
35375. !dir$ ivdep
35375.                   do
35375.                      (gas_mix_ratio%base_addr)(1 + $I_L35375_380, 1 + $I_L35375_558, 1 + $I_L35375_652, 0) = 0.0
35375.                      $I_L35375_380 = 1 + $I_L35375_380
35375.                      if ( $I_L35375_380 >= $F_A74 ) exit
35375.                   enddo
35375.                   $I_L35375_558 = 1 + $I_L35375_558
35375.                   if ( $I_L35375_558 >= $F_A73 ) exit
35375.                enddo
35375.                $I_L35375_652 = 1 + $I_L35375_652
35375.                if ( $I_L35375_652 >= $F_A72 ) exit
35375.             enddo
35375.          endif
35376.          aerosol_mix_ratio%header%a_contig = 1
35376.          aerosol_mix_ratio%dim_1%LB = 1
35376.          aerosol_mix_ratio%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35376.          aerosol_mix_ratio%dim_1%SM = 1
35376.          aerosol_mix_ratio%dim_2%LB = 1
35376.          aerosol_mix_ratio%dim_2%EX = ( max( 0, kmax ) )
35376.          aerosol_mix_ratio%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35376.          aerosol_mix_ratio%dim_3%LB = 1
35376.          aerosol_mix_ratio%dim_3%EX = ( max( 0, swdat%dim%nd_aerosol_species ) )
35376.          aerosol_mix_ratio%dim_3%SM = ( max( 0, kmax ) * max( 0, $Reduc_A53 ) )
35376.          $_allo_P11(0) = 0x1000000000001L
35376.          $_allo_P11(1) = loc( aerosol_mix_ratio )
35376.          call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
35377.          $F_A75 = swdat%dim%nd_aerosol_species
35377.          $F_A76 = kmax
35377.          $F_A77 = $Reduc_A53
35377.          if ( and( and( -$F_A76, -$F_A75 ), -$F_A77 ) < 0 ) then
35377.             $SC_swdat_I166 = swdat%dim%nd_aerosol_species
35377.             $I_L35377_654 = 0
35377.             do
35377.                $I_L35377_560 = 0
35377.                do
35377.                   $I_L35377_382 = 0
35377. !dir$ ivdep
35377.                   do
35377.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35377_382, 1 + $I_L35377_560, 1 + $I_L35377_654, 0) = 0.0
35377.                      $I_L35377_382 = 1 + $I_L35377_382
35377.                      if ( $I_L35377_382 >= $F_A77 ) exit
35377.                   enddo
35377.                   $I_L35377_560 = 1 + $I_L35377_560
35377.                   if ( $I_L35377_560 >= $F_A76 ) exit
35377.                enddo
35377.                $I_L35377_654 = 1 + $I_L35377_654
35377.                if ( $I_L35377_654 >= $F_A75 ) exit
35377.             enddo
35377.          endif
35379.          w_cloud%header%a_contig = 1
35379.          w_cloud%dim_1%LB = 1
35379.          w_cloud%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35379.          w_cloud%dim_1%SM = 1
35379.          w_cloud%dim_2%LB = 1
35379.          w_cloud%dim_2%EX = ( max( 0, kmax ) )
35379.          w_cloud%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35379.          $_allo_P12(0) = 0x1000000000001L
35379.          $_allo_P12(1) = loc( w_cloud )
35379.          call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
35380.          $F_A78 = kmax
35380.          $F_A79 = $Reduc_A53
35380.          if ( and( -$F_A79, -$F_A78 ) < 0 ) then
35380.             $I_L35380_562 = 0
35380.             do
35380.                $I_L35380_384 = 0
35380. !dir$ ivdep
35380.                do
35380.                   (w_cloud%base_addr)(1 + $I_L35380_384, 1 + $I_L35380_562, 0) = 0.0
35380.                   $I_L35380_384 = 1 + $I_L35380_384
35380.                   if ( $I_L35380_384 >= $F_A79 ) exit
35380.                enddo
35380.                $I_L35380_562 = 1 + $I_L35380_562
35380.                if ( $I_L35380_562 >= $F_A78 ) exit
35380.             enddo
35380.          endif
35381.          frac_cloud%header%a_contig = 1
35381.          frac_cloud%dim_1%LB = 1
35381.          frac_cloud%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35381.          frac_cloud%dim_1%SM = 1
35381.          frac_cloud%dim_2%LB = 1
35381.          frac_cloud%dim_2%EX = ( max( 0, kmax ) )
35381.          frac_cloud%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35381.          frac_cloud%dim_3%LB = 1
35381.          frac_cloud%dim_3%EX = 4
35381.          frac_cloud%dim_3%SM = ( max( 0, kmax ) * max( 0, $Reduc_A53 ) )
35381.          $_allo_P13(0) = 0x1000000000001L
35381.          $_allo_P13(1) = loc( frac_cloud )
35381.          call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
35382.          $F_A80 = kmax
35382.          $F_A81 = $Reduc_A53
35382.          if ( and( -$F_A81, -$F_A80 ) < 0 ) then
35382.             $I_L35382_656 = 0
35382.             do
35382.                $I_L35382_564 = 0
35382.                do
35382.                   $I_L35382_386 = 0
35382. !dir$ ivdep
35382.                   do
35382.                      (frac_cloud%base_addr)(1 + $I_L35382_386, 1 + $I_L35382_564, 1 + $I_L35382_656, 0) = 0.0
35382.                      $I_L35382_386 = 1 + $I_L35382_386
35382.                      if ( $I_L35382_386 >= $F_A81 ) exit
35382.                   enddo
35382.                   $I_L35382_564 = 1 + $I_L35382_564
35382.                   if ( $I_L35382_564 >= $F_A80 ) exit
35382.                enddo
35382.                $I_L35382_656 = 1 + $I_L35382_656
35382.                if ( $I_L35382_656 >= 4 ) exit
35382.             enddo
35382.          endif
35383.          condensed_mix_ratio%header%a_contig = 1
35383.          condensed_mix_ratio%dim_1%LB = 1
35383.          condensed_mix_ratio%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35383.          condensed_mix_ratio%dim_1%SM = 1
35383.          condensed_mix_ratio%dim_2%LB = 1
35383.          condensed_mix_ratio%dim_2%EX = ( max( 0, kmax ) )
35383.          condensed_mix_ratio%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35383.          condensed_mix_ratio%dim_3%LB = 1
35383.          condensed_mix_ratio%dim_3%EX = 4
35383.          condensed_mix_ratio%dim_3%SM = ( max( 0, kmax ) * max( 0, $Reduc_A53 ) )
35383.          $_allo_P14(0) = 0x1000000000001L
35383.          $_allo_P14(1) = loc( condensed_mix_ratio )
35383.          call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
35384.          $F_A82 = kmax
35384.          $F_A83 = $Reduc_A53
35384.          if ( and( -$F_A83, -$F_A82 ) < 0 ) then
35384.             $I_L35384_658 = 0
35384.             do
35384.                $I_L35384_566 = 0
35384.                do
35384.                   $I_L35384_388 = 0
35384. !dir$ ivdep
35384.                   do
35384.                      (condensed_mix_ratio%base_addr)(1 + $I_L35384_388, 1 + $I_L35384_566, 1 + $I_L35384_658, 0) = 0.0
35384.                      $I_L35384_388 = 1 + $I_L35384_388
35384.                      if ( $I_L35384_388 >= $F_A83 ) exit
35384.                   enddo
35384.                   $I_L35384_566 = 1 + $I_L35384_566
35384.                   if ( $I_L35384_566 >= $F_A82 ) exit
35384.                enddo
35384.                $I_L35384_658 = 1 + $I_L35384_658
35384.                if ( $I_L35384_658 >= 4 ) exit
35384.             enddo
35384.          endif
35385.          condensed_dim_char%header%a_contig = 1
35385.          condensed_dim_char%dim_1%LB = 1
35385.          condensed_dim_char%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35385.          condensed_dim_char%dim_1%SM = 1
35385.          condensed_dim_char%dim_2%LB = 1
35385.          condensed_dim_char%dim_2%EX = ( max( 0, kmax ) )
35385.          condensed_dim_char%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35385.          condensed_dim_char%dim_3%LB = 1
35385.          condensed_dim_char%dim_3%EX = 4
35385.          condensed_dim_char%dim_3%SM = ( max( 0, kmax ) * max( 0, $Reduc_A53 ) )
35385.          $_allo_P15(0) = 0x1000000000001L
35385.          $_allo_P15(1) = loc( condensed_dim_char )
35385.          call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
35386.          $F_A84 = kmax
35386.          $F_A85 = $Reduc_A53
35386.          if ( and( -$F_A85, -$F_A84 ) < 0 ) then
35386.             $I_L35386_660 = 0
35386.             do
35386.                $I_L35386_568 = 0
35386.                do
35386.                   $I_L35386_390 = 0
35386. !dir$ ivdep
35386.                   do
35386.                      (condensed_dim_char%base_addr)(1 + $I_L35386_390, 1 + $I_L35386_568, 1 + $I_L35386_660, 0) = 0.0
35386.                      $I_L35386_390 = 1 + $I_L35386_390
35386.                      if ( $I_L35386_390 >= $F_A85 ) exit
35386.                   enddo
35386.                   $I_L35386_568 = 1 + $I_L35386_568
35386.                   if ( $I_L35386_568 >= $F_A84 ) exit
35386.                enddo
35386.                $I_L35386_660 = 1 + $I_L35386_660
35386.                if ( $I_L35386_660 >= 4 ) exit
35386.             enddo
35386.          endif
35388.          clouds%header%a_contig = 1
35388.          clouds%dim_1%LB = 1
35388.          clouds%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35388.          clouds%dim_1%SM = 1
35388.          clouds%dim_2%LB = 1
35388.          clouds%dim_2%EX = ( max( 0, kmax ) )
35388.          clouds%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35388.          clouds%dim_3%LB = 1
35388.          clouds%dim_3%EX = 4
35388.          clouds%dim_3%SM = ( max( 0, kmax ) * max( 0, $Reduc_A53 ) )
35388.          $_allo_P16(0) = 0x1000000000001L
35388.          $_allo_P16(1) = loc( clouds )
35388.          call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
35389.          $F_A86 = kmax
35389.          $F_A87 = $Reduc_A53
35389.          if ( and( -$F_A87, -$F_A86 ) < 0 ) then
35389.             $I_L35389_662 = 0
35389.             do
35389.                $I_L35389_570 = 0
35389.                do
35389.                   $I_L35389_392 = 0
35389. !dir$ ivdep
35389.                   do
35389.                      (clouds%base_addr)(1 + $I_L35389_392, 1 + $I_L35389_570, 1 + $I_L35389_662, 0) = 0.0
35389.                      $I_L35389_392 = 1 + $I_L35389_392
35389.                      if ( $I_L35389_392 >= $F_A87 ) exit
35389.                   enddo
35389.                   $I_L35389_570 = 1 + $I_L35389_570
35389.                   if ( $I_L35389_570 >= $F_A86 ) exit
35389.                enddo
35389.                $I_L35389_662 = 1 + $I_L35389_662
35389.                if ( $I_L35389_662 >= 4 ) exit
35389.             enddo
35389.          endif
35391.          flux_direct%header%a_contig = 1
35391.          flux_direct%dim_1%LB = 1
35391.          flux_direct%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35391.          flux_direct%dim_1%SM = 1
35391.          flux_direct%dim_2%LB = 0
35391.          flux_direct%dim_2%EX = ( max( 0, 1 + kmax ) )
35391.          flux_direct%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35391.          flux_direct%dim_3%LB = 1
35391.          flux_direct%dim_3%EX = 2
35391.          flux_direct%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35391.          $_allo_P17(0) = 0x1000000000001L
35391.          $_allo_P17(1) = loc( flux_direct )
35391.          call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
35392.          $F_A88 = ( 1 + kmax )
35392.          $F_A89 = $Reduc_A53
35392.          if ( and( -$F_A89, -$F_A88 ) < 0 ) then
35392.             $I_L35392_664 = 0
35392.             do
35392.                $I_L35392_572 = 0
35392.                do
35392.                   $I_L35392_394 = 0
35392. !dir$ ivdep
35392.                   do
35392.                      (flux_direct%base_addr)(1 + $I_L35392_394, $I_L35392_572, 1 + $I_L35392_664, 0) = 0.0
35392.                      $I_L35392_394 = 1 + $I_L35392_394
35392.                      if ( $I_L35392_394 >= $F_A89 ) exit
35392.                   enddo
35392.                   $I_L35392_572 = 1 + $I_L35392_572
35392.                   if ( $I_L35392_572 >= $F_A88 ) exit
35392.                enddo
35392.                $I_L35392_664 = 1 + $I_L35392_664
35392.                if ( $I_L35392_664 >= 2 ) exit
35392.             enddo
35392.          endif
35393.          flux_down%header%a_contig = 1
35393.          flux_down%dim_1%LB = 1
35393.          flux_down%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35393.          flux_down%dim_1%SM = 1
35393.          flux_down%dim_2%LB = 0
35393.          flux_down%dim_2%EX = ( max( 0, 1 + kmax ) )
35393.          flux_down%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35393.          flux_down%dim_3%LB = 1
35393.          flux_down%dim_3%EX = 2
35393.          flux_down%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35393.          $_allo_P18(0) = 0x1000000000001L
35393.          $_allo_P18(1) = loc( flux_down )
35393.          call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
35394.          $F_A90 = ( 1 + kmax )
35394.          $F_A91 = $Reduc_A53
35394.          if ( and( -$F_A91, -$F_A90 ) < 0 ) then
35394.             $I_L35394_666 = 0
35394.             do
35394.                $I_L35394_574 = 0
35394.                do
35394.                   $I_L35394_396 = 0
35394. !dir$ ivdep
35394.                   do
35394.                      (flux_down%base_addr)(1 + $I_L35394_396, $I_L35394_574, 1 + $I_L35394_666, 0) = 0.0
35394.                      $I_L35394_396 = 1 + $I_L35394_396
35394.                      if ( $I_L35394_396 >= $F_A91 ) exit
35394.                   enddo
35394.                   $I_L35394_574 = 1 + $I_L35394_574
35394.                   if ( $I_L35394_574 >= $F_A90 ) exit
35394.                enddo
35394.                $I_L35394_666 = 1 + $I_L35394_666
35394.                if ( $I_L35394_666 >= 2 ) exit
35394.             enddo
35394.          endif
35395.          flux_up%header%a_contig = 1
35395.          flux_up%dim_1%LB = 1
35395.          flux_up%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35395.          flux_up%dim_1%SM = 1
35395.          flux_up%dim_2%LB = 0
35395.          flux_up%dim_2%EX = ( max( 0, 1 + kmax ) )
35395.          flux_up%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35395.          flux_up%dim_3%LB = 1
35395.          flux_up%dim_3%EX = 2
35395.          flux_up%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35395.          $_allo_P19(0) = 0x1000000000001L
35395.          $_allo_P19(1) = loc( flux_up )
35395.          call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
35396.          $F_A92 = ( 1 + kmax )
35396.          $F_A93 = $Reduc_A53
35396.          if ( and( -$F_A93, -$F_A92 ) < 0 ) then
35396.             $I_L35396_668 = 0
35396.             do
35396.                $I_L35396_576 = 0
35396.                do
35396.                   $I_L35396_398 = 0
35396. !dir$ ivdep
35396.                   do
35396.                      (flux_up%base_addr)(1 + $I_L35396_398, $I_L35396_576, 1 + $I_L35396_668, 0) = 0.0
35396.                      $I_L35396_398 = 1 + $I_L35396_398
35396.                      if ( $I_L35396_398 >= $F_A93 ) exit
35396.                   enddo
35396.                   $I_L35396_576 = 1 + $I_L35396_576
35396.                   if ( $I_L35396_576 >= $F_A92 ) exit
35396.                enddo
35396.                $I_L35396_668 = 1 + $I_L35396_668
35396.                if ( $I_L35396_668 >= 2 ) exit
35396.             enddo
35396.          endif
35397.          flux_net%header%a_contig = 1
35397.          flux_net%dim_1%LB = 1
35397.          flux_net%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35397.          flux_net%dim_1%SM = 1
35397.          flux_net%dim_2%LB = 0
35397.          flux_net%dim_2%EX = ( max( 0, 1 + kmax ) )
35397.          flux_net%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35397.          flux_net%dim_3%LB = 1
35397.          flux_net%dim_3%EX = 2
35397.          flux_net%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35397.          $_allo_P20(0) = 0x1000000000001L
35397.          $_allo_P20(1) = loc( flux_net )
35397.          call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
35398.          $F_A94 = ( 1 + kmax )
35398.          $F_A95 = $Reduc_A53
35398.          if ( and( -$F_A95, -$F_A94 ) < 0 ) then
35398.             $I_L35398_670 = 0
35398.             do
35398.                $I_L35398_578 = 0
35398.                do
35398.                   $I_L35398_400 = 0
35398. !dir$ ivdep
35398.                   do
35398.                      (flux_net%base_addr)(1 + $I_L35398_400, $I_L35398_578, 1 + $I_L35398_670, 0) = 0.0
35398.                      $I_L35398_400 = 1 + $I_L35398_400
35398.                      if ( $I_L35398_400 >= $F_A95 ) exit
35398.                   enddo
35398.                   $I_L35398_578 = 1 + $I_L35398_578
35398.                   if ( $I_L35398_578 >= $F_A94 ) exit
35398.                enddo
35398.                $I_L35398_670 = 1 + $I_L35398_670
35398.                if ( $I_L35398_670 >= 2 ) exit
35398.             enddo
35398.          endif
35400.          flux_direct_clear%header%a_contig = 1
35400.          flux_direct_clear%dim_1%LB = 1
35400.          flux_direct_clear%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35400.          flux_direct_clear%dim_1%SM = 1
35400.          flux_direct_clear%dim_2%LB = 0
35400.          flux_direct_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
35400.          flux_direct_clear%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35400.          flux_direct_clear%dim_3%LB = 1
35400.          flux_direct_clear%dim_3%EX = 2
35400.          flux_direct_clear%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35400.          $_allo_P21(0) = 0x1000000000001L
35400.          $_allo_P21(1) = loc( flux_direct_clear )
35400.          call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
35401.          $F_A96 = ( 1 + kmax )
35401.          $F_A97 = $Reduc_A53
35401.          if ( and( -$F_A97, -$F_A96 ) < 0 ) then
35401.             $I_L35401_672 = 0
35401.             do
35401.                $I_L35401_580 = 0
35401.                do
35401.                   $I_L35401_402 = 0
35401. !dir$ ivdep
35401.                   do
35401.                      (flux_direct_clear%base_addr)(1 + $I_L35401_402, $I_L35401_580, 1 + $I_L35401_672, 0) = 0.0
35401.                      $I_L35401_402 = 1 + $I_L35401_402
35401.                      if ( $I_L35401_402 >= $F_A97 ) exit
35401.                   enddo
35401.                   $I_L35401_580 = 1 + $I_L35401_580
35401.                   if ( $I_L35401_580 >= $F_A96 ) exit
35401.                enddo
35401.                $I_L35401_672 = 1 + $I_L35401_672
35401.                if ( $I_L35401_672 >= 2 ) exit
35401.             enddo
35401.          endif
35402.          flux_down_clear%header%a_contig = 1
35402.          flux_down_clear%dim_1%LB = 1
35402.          flux_down_clear%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35402.          flux_down_clear%dim_1%SM = 1
35402.          flux_down_clear%dim_2%LB = 0
35402.          flux_down_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
35402.          flux_down_clear%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35402.          flux_down_clear%dim_3%LB = 1
35402.          flux_down_clear%dim_3%EX = 2
35402.          flux_down_clear%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35402.          $_allo_P22(0) = 0x1000000000001L
35402.          $_allo_P22(1) = loc( flux_down_clear )
35402.          call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
35403.          $F_A98 = ( 1 + kmax )
35403.          $F_A99 = $Reduc_A53
35403.          if ( and( -$F_A99, -$F_A98 ) < 0 ) then
35403.             $I_L35403_674 = 0
35403.             do
35403.                $I_L35403_582 = 0
35403.                do
35403.                   $I_L35403_404 = 0
35403. !dir$ ivdep
35403.                   do
35403.                      (flux_down_clear%base_addr)(1 + $I_L35403_404, $I_L35403_582, 1 + $I_L35403_674, 0) = 0.0
35403.                      $I_L35403_404 = 1 + $I_L35403_404
35403.                      if ( $I_L35403_404 >= $F_A99 ) exit
35403.                   enddo
35403.                   $I_L35403_582 = 1 + $I_L35403_582
35403.                   if ( $I_L35403_582 >= $F_A98 ) exit
35403.                enddo
35403.                $I_L35403_674 = 1 + $I_L35403_674
35403.                if ( $I_L35403_674 >= 2 ) exit
35403.             enddo
35403.          endif
35404.          flux_up_clear%header%a_contig = 1
35404.          flux_up_clear%dim_1%LB = 1
35404.          flux_up_clear%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35404.          flux_up_clear%dim_1%SM = 1
35404.          flux_up_clear%dim_2%LB = 0
35404.          flux_up_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
35404.          flux_up_clear%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35404.          flux_up_clear%dim_3%LB = 1
35404.          flux_up_clear%dim_3%EX = 2
35404.          flux_up_clear%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35404.          $_allo_P23(0) = 0x1000000000001L
35404.          $_allo_P23(1) = loc( flux_up_clear )
35404.          call __allocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
35405.          $F_A100 = ( 1 + kmax )
35405.          $F_A101 = $Reduc_A53
35405.          if ( and( -$F_A101, -$F_A100 ) < 0 ) then
35405.             $I_L35405_676 = 0
35405.             do
35405.                $I_L35405_584 = 0
35405.                do
35405.                   $I_L35405_406 = 0
35405. !dir$ ivdep
35405.                   do
35405.                      (flux_up_clear%base_addr)(1 + $I_L35405_406, $I_L35405_584, 1 + $I_L35405_676, 0) = 0.0
35405.                      $I_L35405_406 = 1 + $I_L35405_406
35405.                      if ( $I_L35405_406 >= $F_A101 ) exit
35405.                   enddo
35405.                   $I_L35405_584 = 1 + $I_L35405_584
35405.                   if ( $I_L35405_584 >= $F_A100 ) exit
35405.                enddo
35405.                $I_L35405_676 = 1 + $I_L35405_676
35405.                if ( $I_L35405_676 >= 2 ) exit
35405.             enddo
35405.          endif
35406.          flux_net_clear%header%a_contig = 1
35406.          flux_net_clear%dim_1%LB = 1
35406.          flux_net_clear%dim_1%EX = ( max( 0, $Reduc_A53 ) )
35406.          flux_net_clear%dim_1%SM = 1
35406.          flux_net_clear%dim_2%LB = 0
35406.          flux_net_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
35406.          flux_net_clear%dim_2%SM = ( max( 0, $Reduc_A53 ) )
35406.          flux_net_clear%dim_3%LB = 1
35406.          flux_net_clear%dim_3%EX = 2
35406.          flux_net_clear%dim_3%SM = ( max( 0, 1 + kmax ) * max( 0, $Reduc_A53 ) )
35406.          $_allo_P24(0) = 0x1000000000001L
35406.          $_allo_P24(1) = loc( flux_net_clear )
35406.          call __allocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
35407.          $F_A102 = ( 1 + kmax )
35407.          $F_A103 = $Reduc_A53
35407.          if ( and( -$F_A103, -$F_A102 ) < 0 ) then
35407.             $I_L35407_678 = 0
35407.             do
35407.                $I_L35407_586 = 0
35407.                do
35407.                   $I_L35407_408 = 0
35407. !dir$ ivdep
35407.                   do
35407.                      (flux_net_clear%base_addr)(1 + $I_L35407_408, $I_L35407_586, 1 + $I_L35407_678, 0) = 0.0
35407.                      $I_L35407_408 = 1 + $I_L35407_408
35407.                      if ( $I_L35407_408 >= $F_A103 ) exit
35407.                   enddo
35407.                   $I_L35407_586 = 1 + $I_L35407_586
35407.                   if ( $I_L35407_586 >= $F_A102 ) exit
35407.                enddo
35407.                $I_L35407_678 = 1 + $I_L35407_678
35407.                if ( $I_L35407_678 >= 2 ) exit
35407.             enddo
35407.          endif
35412.          if ( $Reduc_A53 > 0 ) then
35414.             if ( kmax > 0 ) then
35414.                $SI_L35414_514_G7 = 0
35414.                do
35412.                   $I_L35412_634 = 0
35412. !dir$ ivdep
35412. !dir$ blocking_size( 0, 0 )
35412.                   do
35414.                      $SCA_litx_I51 = litx(1 + $I_L35412_634)
35414.                      $I_L35414_706 = 0
35414. !dir$ unroll 2
35414. !dir$ blocking_size( 256, 256 )
35414.                      do
35415.                         (temp%base_addr)(1 + $I_L35412_634, $I_L35414_706 + 256 * $SI_L35414_514_G7 + 1, 0) = te($SCA_litx_I51, $I_L35414_706 + -ntop + 256 * $SI_L35414_514_G7 + 1)
35416.                         (d_mass%base_addr)(1 + $I_L35412_634, $I_L35414_706 + 256 * $SI_L35414_514_G7 + 1, 0) = 10.195072517550816 * dp($SCA_litx_I51, $I_L35414_706 + -ntop + 256 * $SI_L35414_514_G7 + 1)
35417.                         (pres%base_addr)(1 + $I_L35412_634, $I_L35414_706 + 256 * $SI_L35414_514_G7 + 1, 0) = 100.0 * pmid($SCA_litx_I51, $I_L35414_706 + -ntop + 256 * $SI_L35414_514_G7 + 1)
35414.                         $I_L35414_706 = 1 + $I_L35414_706
35414.                         if ( $I_L35414_706 >= min( kmax, 256 + 256 * $SI_L35414_514_G7 ) + -256 * $SI_L35414_514_G7 ) exit
35414.                      enddo
35432.                      $I_L35412_634 = 1 + $I_L35412_634
35432.                      if ( $I_L35412_634 >= $Reduc_A53 ) exit
35432.                   enddo
35414.                   $SI_L35414_514_G7 = 1 + $SI_L35414_514_G7
35426.                   if ( $SI_L35414_514_G7 >= _rsh( 255 + kmax, 8 ) ) exit
35426.                enddo
35412.                $I_L35412_516 = 0
35412. !dir$ ivdep
35412.                do
35423.                   (temp%base_addr)(1 + $I_L35412_516, 1, 0) = te(litx(1 + $I_L35412_516), 1)
35424.                   (d_mass%base_addr)(1 + $I_L35412_516, 1, 0) = ( 10.195072517550816 * dp(litx(1 + $I_L35412_516), 1) )
35425.                   (pres%base_addr)(1 + $I_L35412_516, 1, 0) = 50.0 * dp(litx(1 + $I_L35412_516), 1)
35428.                   (t_ground%base_addr)(1 + $I_L35412_516, 0) = tg(litx(1 + $I_L35412_516))
35432.                   $I_L35412_516 = 1 + $I_L35412_516
35426.                   if ( $I_L35412_516 >= $Reduc_A53 ) exit
35426.                enddo
35478.                if ( ntop > 0 ) then
35465.                   $SI_L35465_518_G10 = 0
35465.                   do
35464.                      $I_L35464_636 = 0
35464. !dir$ ivdep
35464. !dir$ blocking_size( 0, 0 )
35464.                      do
35465.                         $SCA_litx_I52 = litx(1 + $I_L35464_636)
35465.                         $I_L35465_709 = 0
35465. !dir$ unroll 4
35465. !dir$ blocking_size( 256, 256 )
35465.                         do
35467.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_636, $I_L35465_709 + 256 * $SI_L35465_518_G10 + 1, 1, 0) = ( qe($SCA_litx_I52, $I_L35465_709 + -ntop + 256 * $SI_L35465_518_G10 + 1) * 1.0/( 1.0 + -qe($SCA_litx_I52, $I_L35465_709 + -ntop + 256 * $SI_L35465_518_G10 + 1) ) )
35469.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_636, $I_L35465_709 + 256 * $SI_L35465_518_G10 + 1, 2, 0) = 1.5193502727335496e-6 * co2val
35471.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_636, $I_L35465_709 + 256 * $SI_L35465_518_G10 + 1, 3, 0) = o3($SCA_litx_I52, $I_L35465_709 + -ntop + 256 * $SI_L35465_518_G10 + 1)
35473.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_636, $I_L35465_709 + 256 * $SI_L35465_518_G10 + 1, 4, 0) = 2.3139089442794999e-1
35465.                            $I_L35465_709 = 1 + $I_L35465_709
35465.                            if ( $I_L35465_709 >= min( kmax, 256 + 256 * $SI_L35465_518_G10 ) + -256 * $SI_L35465_518_G10 ) exit
35465.                         enddo
35481.                         $I_L35464_636 = 1 + $I_L35464_636
35481.                         if ( $I_L35464_636 >= $Reduc_A53 ) exit
35481.                      enddo
35465.                      $SI_L35465_518_G10 = 1 + $SI_L35465_518_G10
35479.                      if ( $SI_L35465_518_G10 >= _rsh( 255 + kmax, 8 ) ) exit
35479.                   enddo
35477.                   $I_L35477_696 = 0
35477.                   do
35464.                      $I_L35464_638 = 0
35464.                      do
35478.                         $Tmp_A104 = (gas_mix_ratio%base_addr)(1 + $I_L35464_638, 1 + ntop, 1 + $I_L35477_696, 0)
35478.                         $F_A105 = ntop
35478.                         $I_L35478_520 = 0
35478. !dir$ ivdep
35478.                         do
35478.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_638, 1 + $I_L35478_520, 1 + $I_L35477_696, 0) = $Tmp_A104
35478.                            $I_L35478_520 = 1 + $I_L35478_520
35478.                            if ( $I_L35478_520 >= $F_A105 ) exit
35478.                         enddo
35481.                         $I_L35464_638 = 1 + $I_L35464_638
35477.                         if ( $I_L35464_638 >= $Reduc_A53 ) exit
35477.                      enddo
35479.                      $I_L35477_696 = 1 + $I_L35477_696
35479.                      if ( $I_L35477_696 >= 4 ) exit
35479.                   enddo
35479.                else
35465.                   $SI_L35465_522_G13 = 0
35465.                   do
35464.                      $I_L35464_640 = 0
35464. !dir$ ivdep
35464. !dir$ blocking_size( 0, 0 )
35464.                      do
35465.                         $SCA_litx_I53 = litx(1 + $I_L35464_640)
35465.                         $I_L35465_712 = 0
35465. !dir$ unroll 4
35465. !dir$ blocking_size( 256, 256 )
35465.                         do
35467.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_640, $I_L35465_712 + 256 * $SI_L35465_522_G13 + 1, 1, 0) = ( qe($SCA_litx_I53, $I_L35465_712 + -ntop + 256 * $SI_L35465_522_G13 + 1) * 1.0/( 1.0 + -qe($SCA_litx_I53, $I_L35465_712 + -ntop + 256 * $SI_L35465_522_G13 + 1) ) )
35469.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_640, $I_L35465_712 + 256 * $SI_L35465_522_G13 + 1, 2, 0) = 1.5193502727335496e-6 * co2val
35471.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_640, $I_L35465_712 + 256 * $SI_L35465_522_G13 + 1, 3, 0) = o3($SCA_litx_I53, $I_L35465_712 + -ntop + 256 * $SI_L35465_522_G13 + 1)
35473.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_640, $I_L35465_712 + 256 * $SI_L35465_522_G13 + 1, 4, 0) = 2.3139089442794999e-1
35465.                            $I_L35465_712 = 1 + $I_L35465_712
35465.                            if ( $I_L35465_712 >= min( kmax, 256 + 256 * $SI_L35465_522_G13 ) + -256 * $SI_L35465_522_G13 ) exit
35465.                         enddo
35481.                         $I_L35464_640 = 1 + $I_L35464_640
35481.                         if ( $I_L35464_640 >= $Reduc_A53 ) exit
35481.                      enddo
35465.                      $SI_L35465_522_G13 = 1 + $SI_L35465_522_G13
35479.                      if ( $SI_L35465_522_G13 >= _rsh( 255 + kmax, 8 ) ) exit
35479.                   enddo
35479.                endif
35479.             else
35412.                $I_L35412_318 = 0
35412. !dir$ ivdep
35412.                do
35423.                   (temp%base_addr)(1 + $I_L35412_318, 1, 0) = te(litx(1 + $I_L35412_318), 1)
35424.                   (d_mass%base_addr)(1 + $I_L35412_318, 1, 0) = ( 10.195072517550816 * dp(litx(1 + $I_L35412_318), 1) )
35425.                   (pres%base_addr)(1 + $I_L35412_318, 1, 0) = 50.0 * dp(litx(1 + $I_L35412_318), 1)
35428.                   (t_ground%base_addr)(1 + $I_L35412_318, 0) = tg(litx(1 + $I_L35412_318))
35432.                   $I_L35412_318 = 1 + $I_L35412_318
35426.                   if ( $I_L35412_318 >= $Reduc_A53 ) exit
35426.                enddo
35478.                if ( ntop > 0 ) then
35477.                   $I_L35477_648 = 0
35477.                   do
35464.                      $I_L35464_540 = 0
35464.                      do
35478.                         $Tmp_A106 = (gas_mix_ratio%base_addr)(1 + $I_L35464_540, 1 + ntop, 1 + $I_L35477_648, 0)
35478.                         $F_A107 = ntop
35478.                         $I_L35478_410 = 0
35478. !dir$ ivdep
35478.                         do
35478.                            (gas_mix_ratio%base_addr)(1 + $I_L35464_540, 1 + $I_L35478_410, 1 + $I_L35477_648, 0) = $Tmp_A106
35478.                            $I_L35478_410 = 1 + $I_L35478_410
35478.                            if ( $I_L35478_410 >= $F_A107 ) exit
35478.                         enddo
35481.                         $I_L35464_540 = 1 + $I_L35464_540
35477.                         if ( $I_L35464_540 >= $Reduc_A53 ) exit
35477.                      enddo
35479.                      $I_L35477_648 = 1 + $I_L35477_648
35479.                      if ( $I_L35477_648 >= 4 ) exit
35479.                   enddo
35479.                endif
35479.             endif
35437.             $I_L35437_300 = 0
35437. !dir$ ivdep
35437.             do
35438.                (zen_0%base_addr)(1 + $I_L35437_300, 0) = 1.0/cosz(litx(1 + $I_L35437_300))
35439.                (solar_irrad%base_addr)(1 + $I_L35437_300, 0) = s0
35440.                $I_L35437_300 = 1 + $I_L35437_300
35437.                if ( $I_L35437_300 >= $Reduc_A53 ) exit
35437.             enddo
35560.             $I_L35560_528 = 0
35560.             do
35561.                if ( kmax > 0 ) then
35561.                   $SCA_litx_I35 = litx(1 + $I_L35560_528)
35561.                   $I_L35561_306 = 0
35561. !dir$ ivdep
35561.                   do
35562.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35561_306, 1, 0) = cld($SCA_litx_I35, $I_L35561_306 + -ntop + 1) * ( 1.0 + -fice($SCA_litx_I35, $I_L35561_306 + -ntop + 1) )
35563.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35561_306, 2, 0) = cld($SCA_litx_I35, $I_L35561_306 + -ntop + 1) * fice($SCA_litx_I35, $I_L35561_306 + -ntop + 1)
35564.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35561_306, 3, 0) = clu($SCA_litx_I35, $I_L35561_306 + -ntop + 1) * ( 1.0 + -fice($SCA_litx_I35, $I_L35561_306 + -ntop + 1) )
35565.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35561_306, 4, 0) = clu($SCA_litx_I35, $I_L35561_306 + -ntop + 1) * fice($SCA_litx_I35, $I_L35561_306 + -ntop + 1)
35566.                      $I_L35561_306 = 1 + $I_L35561_306
35561.                      if ( $I_L35561_306 >= kmax ) exit
35561.                   enddo
35561.                endif
35568.                $Tmp_A108 = 0.0
35568.                if ( ntop > 0 ) then
35568.                   $Tmp_A108 = (clouds%base_addr)(1 + $I_L35560_528, 1 + ntop, 1, 0)
35568.                endif
35568.                $F_A112 = ntop
35568.                if ( ntop > 0 ) then
35568.                   $I_L35568_412 = 0
35568. !dir$ ivdep
35568.                   do
35568.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35568_412, 1, 0) = $Tmp_A108
35568.                      $I_L35568_412 = 1 + $I_L35568_412
35568.                      if ( $I_L35568_412 >= $F_A112 ) exit
35568.                   enddo
35568.                endif
35569.                $Tmp_A109 = 0.0
35569.                if ( ntop > 0 ) then
35569.                   $Tmp_A109 = (clouds%base_addr)(1 + $I_L35560_528, 1 + ntop, 2, 0)
35569.                endif
35569.                $F_A113 = ntop
35569.                if ( ntop > 0 ) then
35569.                   $I_L35569_414 = 0
35569. !dir$ ivdep
35569.                   do
35569.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35569_414, 2, 0) = $Tmp_A109
35569.                      $I_L35569_414 = 1 + $I_L35569_414
35569.                      if ( $I_L35569_414 >= $F_A113 ) exit
35569.                   enddo
35569.                endif
35570.                $Tmp_A110 = 0.0
35570.                if ( ntop > 0 ) then
35570.                   $Tmp_A110 = (clouds%base_addr)(1 + $I_L35560_528, 1 + ntop, 3, 0)
35570.                endif
35570.                $F_A114 = ntop
35570.                if ( ntop > 0 ) then
35570.                   $I_L35570_416 = 0
35570. !dir$ ivdep
35570.                   do
35570.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35570_416, 3, 0) = $Tmp_A110
35570.                      $I_L35570_416 = 1 + $I_L35570_416
35570.                      if ( $I_L35570_416 >= $F_A114 ) exit
35570.                   enddo
35570.                endif
35571.                $Tmp_A111 = 0.0
35571.                if ( ntop > 0 ) then
35571.                   $Tmp_A111 = (clouds%base_addr)(1 + $I_L35560_528, 1 + ntop, 4, 0)
35571.                endif
35571.                $F_A115 = ntop
35571.                if ( ntop > 0 ) then
35571.                   $I_L35571_418 = 0
35571. !dir$ ivdep
35571.                   do
35571.                      (clouds%base_addr)(1 + $I_L35560_528, 1 + $I_L35571_418, 4, 0) = $Tmp_A111
35571.                      $I_L35571_418 = 1 + $I_L35571_418
35571.                      if ( $I_L35571_418 >= $F_A115 ) exit
35571.                   enddo
35571.                endif
35572.                $I_L35560_528 = 1 + $I_L35560_528
35566.                if ( $I_L35560_528 >= $Reduc_A53 ) exit
35566.             enddo
35575.             if ( kmax > 0 ) then
35579.                if ( n_condensed > 0 ) then
35575.                   $I_L35575_644 = 0
35575.                   do
35574.                      $I_L35574_530 = 0
35574.                      do
35578.                         aux = 0.0
35579.                         $SCA_w_cloud_I42 = 1.0
35579.                         $I_L35579_308 = 0
35579. !dir$ ivdep
35579.                         do
35580.                            $SCA_w_cloud_I42 = $SCA_w_cloud_I42 * ( 1.0 + -(clouds%base_addr)(1 + $I_L35574_530, 1 + $I_L35575_644, 1 + $I_L35579_308, 0) )
35581.                            aux = real( aux + (clouds%base_addr)(1 + $I_L35574_530, 1 + $I_L35575_644, 1 + $I_L35579_308, 0) )
35582.                            $I_L35579_308 = 1 + $I_L35579_308
35579.                            if ( $I_L35579_308 >= n_condensed ) exit
35579.                         enddo
35584.                         (w_cloud%base_addr)(1 + $I_L35574_530, 1 + $I_L35575_644, 0) = 1.0 + -$SCA_w_cloud_I42
35589.                         if ( aux > 0.0 ) then
35589.                            $I_L35589_420 = 0
35589. !dir$ ivdep
35589.                            do
35589.                               (frac_cloud%base_addr)(1 + $I_L35574_530, 1 + $I_L35575_644, 1 + $I_L35589_420, 0) = ( (clouds%base_addr)(1 + $I_L35574_530, 1 + $I_L35575_644, 1 + $I_L35589_420, 0) * 1.0/aux )
35589.                               $I_L35589_420 = 1 + $I_L35589_420
35589.                               if ( $I_L35589_420 >= 4 ) exit
35589.                            enddo
35589.                         endif
35591.                         $I_L35574_530 = 1 + $I_L35574_530
35589.                         if ( $I_L35574_530 >= $Reduc_A53 ) exit
35589.                      enddo
35590.                      $I_L35575_644 = 1 + $I_L35575_644
35590.                      if ( $I_L35575_644 >= kmax ) exit
35590.                   enddo
35590.                else
35575.                   $I_L35575_542 = 0
35575.                   do
35574.                      $I_L35574_320 = 0
35574. !dir$ ivdep
35574.                      do
35584.                         (w_cloud%base_addr)(1 + $I_L35574_320, 1 + $I_L35575_542, 0) = 0.0
35591.                         $I_L35574_320 = 1 + $I_L35574_320
35589.                         if ( $I_L35574_320 >= $Reduc_A53 ) exit
35589.                      enddo
35590.                      $I_L35575_542 = 1 + $I_L35575_542
35590.                      if ( $I_L35575_542 >= kmax ) exit
35590.                   enddo
35590.                endif
35590.             endif
35590.          endif
35443.          $F_A116 = swdat%dim%nd_band
35443.          if ( swdat%dim%nd_band > 0 ) then
35443.             $SC_swdat_I164 = swdat%dim%nd_band
35443.             $I_L35443_422 = 0
35443. !dir$ ivdep
35443.             do
35443.                weight_band(1 + $I_L35443_422) = 1.0
35443.                $I_L35443_422 = 1 + $I_L35443_422
35443.                if ( $I_L35443_422 >= $F_A116 ) exit
35443.             enddo
35443.          endif
35446.          $F_A117 = swdat%dim%nd_band
35446.          if ( swdat%dim%nd_band > 0 ) then
35446.             $SC_swdat_I164 = swdat%dim%nd_band
35446.             $I_L35446_424 = 0
35446. !dir$ ivdep
35446.             do
35446.                i_scatter_method(1 + $I_L35446_424) = 1
35446.                $I_L35446_424 = 1 + $I_L35446_424
35446.                if ( $I_L35446_424 >= $F_A117 ) exit
35446.             enddo
35446.          endif
35453.          $F_A118 = swdat%dim%nd_band
35453.          if ( swdat%dim%nd_band > 0 ) then
35453.             $SC_swdat_I164 = swdat%dim%nd_band
35453.             $I_L35453_426 = 0
35453. !dir$ ivdep
35453.             do
35453.                i_gas_overlap(1 + $I_L35453_426) = 5
35453.                $I_L35453_426 = 1 + $I_L35453_426
35453.                if ( $I_L35453_426 >= $F_A118 ) exit
35453.             enddo
35453.          endif
35449.          $SC_swdat_I164 = swdat%dim%nd_band
35449.          $I_L35449_428 = 0
35449. !dir$ ivdep
35449.          do
35449.             map_band_channel(1 + $I_L35449_428) = 1
35450.             map_band_channel(4 + $I_L35449_428) = 2
35449.             $I_L35449_428 = 1 + $I_L35449_428
35449.             if ( $I_L35449_428 >= 3 ) exit
35449.          enddo
35486.          $F_A119 = swdat%dim%nd_species
35486.          if ( swdat%dim%nd_species > 0 ) then
35486.             $SC_swdat_I165 = swdat%dim%nd_species
35486.             $I_L35486_430 = 0
35486. !dir$ ivdep
35486.             do
35486.                l_doppler(1 + $I_L35486_430) = .false.
35486.                $I_L35486_430 = 1 + $I_L35486_430
35486.                if ( $I_L35486_430 >= $F_A119 ) exit
35486.             enddo
35486.          endif
35487.          $F_A120 = swdat%dim%nd_species
35487.          if ( swdat%dim%nd_species > 0 ) then
35487.             $SC_swdat_I165 = swdat%dim%nd_species
35487.             $I_L35487_432 = 0
35487. !dir$ ivdep
35487.             do
35487.                doppler_correction(1 + $I_L35487_432) = 0.0
35487.                $I_L35487_432 = 1 + $I_L35487_432
35487.                if ( $I_L35487_432 >= $F_A120 ) exit
35487.             enddo
35487.          endif
35495.          $F_A121 = swdat%dim%nd_band
35495.          $F_A122 = $Reduc_A53
35495.          if ( and( -$F_A122, -$F_A121 ) < 0 ) then
35495.             $SC_swdat_I164 = swdat%dim%nd_band
35495.             $I_L35495_680 = 0
35495.             do
35495.                $I_L35495_588 = 0
35495.                do
35495.                   $I_L35495_434 = 0
35495. !dir$ ivdep
35495.                   do
35495.                      (rho_alb%base_addr)(1 + $I_L35495_434, 1 + $I_L35495_588, 1 + $I_L35495_680, 0) = 0.0
35495.                      $I_L35495_434 = 1 + $I_L35495_434
35495.                      if ( $I_L35495_434 >= $F_A122 ) exit
35495.                   enddo
35495.                   $I_L35495_588 = 1 + $I_L35495_588
35495.                   if ( $I_L35495_588 >= 2 ) exit
35495.                enddo
35495.                $I_L35495_680 = 1 + $I_L35495_680
35495.                if ( $I_L35495_680 >= $F_A121 ) exit
35495.             enddo
35495.          endif
35496.          if ( $Reduc_A53 > 0 ) then
35497.             if ( swdat%dim%nd_band > 0 ) then
35497.                $SI_L35497_302_G16 = 0
35497.                do
35496.                   $I_L35496_524 = 0
35496. !dir$ blocking_size( 0, 0 )
35496.                   do
35499.                      $SC_litx_I162 = litx(1 + $I_L35496_524)
35497.                      $I_L35497_700 = 0
35497. !dir$ ivdep
35497. !dir$ blocking_size( 256, 256 )
35497.                      do
35498.                         if ( map_band_channel($I_L35497_700 + 256 * $SI_L35497_302_G16 + 1) == 1 ) then
35499.                            (rho_alb%base_addr)(1 + $I_L35496_524, 1, $I_L35497_700 + 256 * $SI_L35497_302_G16 + 1, 0) = albvisdiff($SC_litx_I162)
35500.                            (rho_alb%base_addr)(1 + $I_L35496_524, 2, $I_L35497_700 + 256 * $SI_L35497_302_G16 + 1, 0) = albvisbeam($SC_litx_I162)
35500.                         else
35502.                            (rho_alb%base_addr)(1 + $I_L35496_524, 1, $I_L35497_700 + 256 * $SI_L35497_302_G16 + 1, 0) = albnirdiff($SC_litx_I162)
35503.                            (rho_alb%base_addr)(1 + $I_L35496_524, 2, $I_L35497_700 + 256 * $SI_L35497_302_G16 + 1, 0) = albnirbeam($SC_litx_I162)
35503.                         endif
35497.                         $I_L35497_700 = 1 + $I_L35497_700
35504.                         if ( $I_L35497_700 >= min( swdat%dim%nd_band, 256 + 256 * $SI_L35497_302_G16 ) + -256 * $SI_L35497_302_G16 ) exit
35504.                      enddo
35506.                      $I_L35496_524 = 1 + $I_L35496_524
35506.                      if ( $I_L35496_524 >= $Reduc_A53 ) exit
35506.                   enddo
35497.                   $SI_L35497_302_G16 = 1 + $SI_L35497_302_G16
35505.                   if ( $SI_L35497_302_G16 >= _rsh( 255 + swdat%dim%nd_band, 8 ) ) exit
35505.                enddo
35505.             endif
35505.          endif
35512.          $F_A123 = swdat%dim%nd_aerosol_species
35512.          $F_A124 = kmax
35512.          $F_A125 = $Reduc_A53
35512.          if ( and( and( -$F_A124, -$F_A123 ), -$F_A125 ) < 0 ) then
35512.             $SC_swdat_I166 = swdat%dim%nd_aerosol_species
35512.             $I_L35512_682 = 0
35512.             do
35512.                $I_L35512_590 = 0
35512.                do
35512.                   $I_L35512_436 = 0
35512. !dir$ ivdep
35512.                   do
35512.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35512_436, 1 + $I_L35512_590, 1 + $I_L35512_682, 0) = 0.0
35512.                      $I_L35512_436 = 1 + $I_L35512_436
35512.                      if ( $I_L35512_436 >= $F_A125 ) exit
35512.                   enddo
35512.                   $I_L35512_590 = 1 + $I_L35512_590
35512.                   if ( $I_L35512_590 >= $F_A124 ) exit
35512.                enddo
35512.                $I_L35512_682 = 1 + $I_L35512_682
35512.                if ( $I_L35512_682 >= $F_A123 ) exit
35512.             enddo
35512.          endif
35516.          if ( $Reduc_A53 > 0 ) then
35516.             $I_L35516_642 = 0
35516.             do
35517.                if ( imask(litx(1 + $I_L35516_642)) <= 0 .orelse. imask(litx(1 + $I_L35516_642)) == 13 ) then
35518.                   $F_A128 = nls
35518.                   if ( nls > 0 ) then
35518.                      $SCA_pbot_I45 = pbot(litx(1 + $I_L35516_642), kmax)
35518.                      $I_L35518_596 = 0
35518.                      do
35518.                         $I_L35518_442 = 0
35518. !dir$ ivdep
35518.                         do
35518.                            (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, ntop + $I_L35518_442 + 1, 1 + $I_L35518_596, 0) = 1.0e-2 * ( (aerosol_clim_ocean%base_addr)(1 + $I_L35518_442, 1 + $I_L35518_596, 0) * 1.0/$SCA_pbot_I45 )
35518.                            $I_L35518_442 = 1 + $I_L35518_442
35518.                            if ( $I_L35518_442 >= $F_A128 ) exit
35518.                         enddo
35518.                         $I_L35518_596 = 1 + $I_L35518_596
35518.                         if ( $I_L35518_596 >= 5 ) exit
35518.                      enddo
35518.                   endif
35519.                   $F_A129 = ( kmax + -ntop + -nls )
35519.                   if ( kmax + -ntop + -nls > 0 ) then
35519.                      $I_L35519_598 = 0
35519.                      do
35519.                         $I_L35519_444 = 0
35519. !dir$ ivdep
35519.                         do
35519.                            (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, ntop + nls + $I_L35519_444 + 1, 1 + $I_L35519_598, 0) = (aerosol_clim_ocean%base_addr)(nls + $I_L35519_444 + 1, 1 + $I_L35519_598, 0)
35519.                            $I_L35519_444 = 1 + $I_L35519_444
35519.                            if ( $I_L35519_444 >= $F_A129 ) exit
35519.                         enddo
35519.                         $I_L35519_598 = 1 + $I_L35519_598
35519.                         if ( $I_L35519_598 >= 5 ) exit
35519.                      enddo
35519.                   endif
35519.                else
35521.                   $F_A126 = nls
35521.                   if ( nls > 0 ) then
35521.                      $SCA_litx_I48 = litx(1 + $I_L35516_642)
35521.                      $SCA_pbot_I49 = pbot($SCA_litx_I48, kmax)
35521.                      $I_L35521_592 = 0
35521.                      do
35521.                         $I_L35521_438 = 0
35521. !dir$ ivdep
35521.                         do
35521.                            (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, ntop + $I_L35521_438 + 1, 1 + $I_L35521_592, 0) = 1.0e-2 * ( (aerosol_clim_land%base_addr)(1 + $I_L35521_438, 1 + $I_L35521_592, 0) * 1.0/$SCA_pbot_I49 )
35521.                            $I_L35521_438 = 1 + $I_L35521_438
35521.                            if ( $I_L35521_438 >= $F_A126 ) exit
35521.                         enddo
35521.                         $I_L35521_592 = 1 + $I_L35521_592
35521.                         if ( $I_L35521_592 >= 5 ) exit
35521.                      enddo
35521.                   endif
35522.                   $F_A127 = ( kmax + -ntop + -nls )
35522.                   if ( kmax + -ntop + -nls > 0 ) then
35522.                      $I_L35522_594 = 0
35522.                      do
35522.                         $I_L35522_440 = 0
35522. !dir$ ivdep
35522.                         do
35522.                            (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, ntop + nls + $I_L35522_440 + 1, 1 + $I_L35522_594, 0) = (aerosol_clim_land%base_addr)(nls + $I_L35522_440 + 1, 1 + $I_L35522_594, 0)
35522.                            $I_L35522_440 = 1 + $I_L35522_440
35522.                            if ( $I_L35522_440 >= $F_A127 ) exit
35522.                         enddo
35522.                         $I_L35522_594 = 1 + $I_L35522_594
35522.                         if ( $I_L35522_594 >= 5 ) exit
35522.                      enddo
35522.                   endif
35522.                endif
35524.                $Tmp_A130 = 0.0
35524.                if ( ntop > 0 ) then
35524.                   $Tmp_A130 = (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + ntop, 1, 0)
35524.                endif
35524.                $F_A135 = ntop
35524.                if ( ntop > 0 ) then
35524.                   $I_L35524_446 = 0
35524. !dir$ ivdep
35524.                   do
35524.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + $I_L35524_446, 1, 0) = $Tmp_A130
35524.                      $I_L35524_446 = 1 + $I_L35524_446
35524.                      if ( $I_L35524_446 >= $F_A135 ) exit
35524.                   enddo
35524.                endif
35525.                $Tmp_A131 = 0.0
35525.                if ( ntop > 0 ) then
35525.                   $Tmp_A131 = (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + ntop, 2, 0)
35525.                endif
35525.                $F_A136 = ntop
35525.                if ( ntop > 0 ) then
35525.                   $I_L35525_448 = 0
35525. !dir$ ivdep
35525.                   do
35525.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + $I_L35525_448, 2, 0) = $Tmp_A131
35525.                      $I_L35525_448 = 1 + $I_L35525_448
35525.                      if ( $I_L35525_448 >= $F_A136 ) exit
35525.                   enddo
35525.                endif
35526.                $Tmp_A132 = 0.0
35526.                if ( ntop > 0 ) then
35526.                   $Tmp_A132 = (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + ntop, 3, 0)
35526.                endif
35526.                $F_A137 = ntop
35526.                if ( ntop > 0 ) then
35526.                   $I_L35526_450 = 0
35526. !dir$ ivdep
35526.                   do
35526.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + $I_L35526_450, 3, 0) = $Tmp_A132
35526.                      $I_L35526_450 = 1 + $I_L35526_450
35526.                      if ( $I_L35526_450 >= $F_A137 ) exit
35526.                   enddo
35526.                endif
35527.                $Tmp_A133 = 0.0
35527.                if ( ntop > 0 ) then
35527.                   $Tmp_A133 = (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + ntop, 4, 0)
35527.                endif
35527.                $F_A138 = ntop
35527.                if ( ntop > 0 ) then
35527.                   $I_L35527_452 = 0
35527. !dir$ ivdep
35527.                   do
35527.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + $I_L35527_452, 4, 0) = $Tmp_A133
35527.                      $I_L35527_452 = 1 + $I_L35527_452
35527.                      if ( $I_L35527_452 >= $F_A138 ) exit
35527.                   enddo
35527.                endif
35528.                $Tmp_A134 = 0.0
35528.                if ( ntop > 0 ) then
35528.                   $Tmp_A134 = (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + ntop, 5, 0)
35528.                endif
35528.                $F_A139 = ntop
35528.                if ( ntop > 0 ) then
35528.                   $I_L35528_454 = 0
35528. !dir$ ivdep
35528.                   do
35528.                      (aerosol_mix_ratio%base_addr)(1 + $I_L35516_642, 1 + $I_L35528_454, 5, 0) = $Tmp_A134
35528.                      $I_L35528_454 = 1 + $I_L35528_454
35528.                      if ( $I_L35528_454 >= $F_A139 ) exit
35528.                   enddo
35528.                endif
35529.                $I_L35516_642 = 1 + $I_L35516_642
35523.                if ( $I_L35516_642 >= $Reduc_A53 ) exit
35523.             enddo
35523.          endif
35538.          type_condensed(1) = 1
35539.          type_condensed(2) = 2
35540.          type_condensed(3) = 3
35541.          type_condensed(4) = 4
35543.          i_condensed_param(1) = (swdat%drop%i_drop_parm%base_addr)(5, 0)
35544.          i_condensed_param(2) = (swdat%ice%i_ice_parm%base_addr)(8, 0)
35545.          i_condensed_param(3) = (swdat%drop%i_drop_parm%base_addr)(5, 0)
35546.          i_condensed_param(4) = (swdat%ice%i_ice_parm%base_addr)(8, 0)
35548.          if ( swdat%dim%nd_cloud_parameter > 0 ) then
35549.             if ( swdat%dim%nd_band > 0 ) then
35549.                $I_L35549_526 = 0
35549.                do
35548.                   $I_L35548_304 = 0
35548. !dir$ ivdep
35548.                   do
35550.                      condensed_param_list(1 + $I_L35548_304, 1, 1 + $I_L35549_526) = (swdat%drop%parm_list%base_addr)(1 + $I_L35548_304, 1 + $I_L35549_526, 5, 0)
35551.                      condensed_param_list(1 + $I_L35548_304, 2, 1 + $I_L35549_526) = (swdat%ice%parm_list%base_addr)(1 + $I_L35548_304, 1 + $I_L35549_526, 8, 0)
35552.                      condensed_param_list(1 + $I_L35548_304, 3, 1 + $I_L35549_526) = (swdat%drop%parm_list%base_addr)(1 + $I_L35548_304, 1 + $I_L35549_526, 5, 0)
35553.                      condensed_param_list(1 + $I_L35548_304, 4, 1 + $I_L35549_526) = (swdat%ice%parm_list%base_addr)(1 + $I_L35548_304, 1 + $I_L35549_526, 8, 0)
35555.                      $I_L35548_304 = 1 + $I_L35548_304
35549.                      if ( $I_L35548_304 >= swdat%dim%nd_cloud_parameter ) exit
35549.                   enddo
35554.                   $I_L35549_526 = 1 + $I_L35549_526
35554.                   if ( $I_L35549_526 >= swdat%dim%nd_band ) exit
35554.                enddo
35554.             endif
35554.          endif
35596.          $F_A140 = kmax
35596.          $F_A141 = $Reduc_A53
35596.          if ( and( -$F_A141, -$F_A140 ) < 0 ) then
35596.             $I_L35596_684 = 0
35596.             do
35596.                $I_L35596_600 = 0
35596.                do
35596.                   $I_L35596_456 = 0
35596. !dir$ ivdep
35596.                   do
35596.                      (condensed_mix_ratio%base_addr)(1 + $I_L35596_456, 1 + $I_L35596_600, 1 + $I_L35596_684, 0) = 0.0
35596.                      $I_L35596_456 = 1 + $I_L35596_456
35596.                      if ( $I_L35596_456 >= $F_A141 ) exit
35596.                   enddo
35596.                   $I_L35596_600 = 1 + $I_L35596_600
35596.                   if ( $I_L35596_600 >= $F_A140 ) exit
35596.                enddo
35596.                $I_L35596_684 = 1 + $I_L35596_684
35596.                if ( $I_L35596_684 >= 4 ) exit
35596.             enddo
35596.          endif
35597.          $F_A142 = kmax
35597.          $F_A143 = $Reduc_A53
35597.          if ( and( -$F_A143, -$F_A142 ) < 0 ) then
35597.             $I_L35597_686 = 0
35597.             do
35597.                $I_L35597_602 = 0
35597.                do
35597.                   $I_L35597_458 = 0
35597. !dir$ ivdep
35597.                   do
35597.                      (condensed_dim_char%base_addr)(1 + $I_L35597_458, 1 + $I_L35597_602, 1 + $I_L35597_686, 0) = 0.0
35597.                      $I_L35597_458 = 1 + $I_L35597_458
35597.                      if ( $I_L35597_458 >= $F_A143 ) exit
35597.                   enddo
35597.                   $I_L35597_602 = 1 + $I_L35597_602
35597.                   if ( $I_L35597_602 >= $F_A142 ) exit
35597.                enddo
35597.                $I_L35597_686 = 1 + $I_L35597_686
35597.                if ( $I_L35597_686 >= 4 ) exit
35597.             enddo
35597.          endif
35598.          if ( $Reduc_A53 > 0 ) then
35598.             $I_L35598_532 = 0
35598.             do
35599.                if ( kmax > 0 ) then
35599.                   $SCA_litx_I50 = litx(1 + $I_L35598_532)
35599.                   $I_L35599_310 = 0
35599. !dir$ ivdep
35599.                   do
35600.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 1, 0) = lmixr($SCA_litx_I50, $I_L35599_310 + -ntop + 1) * ( 1.0 + -fice($SCA_litx_I50, $I_L35599_310 + -ntop + 1) )
35601.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 2, 0) = lmixr($SCA_litx_I50, $I_L35599_310 + -ntop + 1) * fice($SCA_litx_I50, $I_L35599_310 + -ntop + 1)
35602.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 3, 0) = lmixr($SCA_litx_I50, $I_L35599_310 + -ntop + 1) * ( 1.0 + -fice($SCA_litx_I50, $I_L35599_310 + -ntop + 1) )
35603.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 4, 0) = lmixr($SCA_litx_I50, $I_L35599_310 + -ntop + 1) * fice($SCA_litx_I50, $I_L35599_310 + -ntop + 1)
35605.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 1, 0) = 9.9999999999999995e-7 * rel($SCA_litx_I50, $I_L35599_310 + -ntop + 1)
35606.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 2, 0) = 9.9999999999999995e-7 * rei($SCA_litx_I50, $I_L35599_310 + -ntop + 1)
35607.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 3, 0) = 9.9999999999999995e-7 * rel($SCA_litx_I50, $I_L35599_310 + -ntop + 1)
35608.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35599_310, 4, 0) = 9.9999999999999995e-7 * rei($SCA_litx_I50, $I_L35599_310 + -ntop + 1)
35609.                      $I_L35599_310 = 1 + $I_L35599_310
35599.                      if ( $I_L35599_310 >= kmax ) exit
35599.                   enddo
35599.                endif
35612.                $Tmp_A144 = 0.0
35612.                if ( ntop > 0 ) then
35612.                   $Tmp_A144 = (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + ntop, 1, 0)
35612.                endif
35621.                $Tmp_A148 = 0.0
35621.                if ( ntop > 0 ) then
35621.                   $Tmp_A148 = (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + ntop, 1, 0)
35621.                endif
35612.                $F_A152 = ntop
35612.                if ( ntop > 0 ) then
35612.                   $I_L35612_460 = 0
35612. !dir$ ivdep
35612.                   do
35612.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35612_460, 1, 0) = $Tmp_A144
35612.                      $I_L35612_460 = 1 + $I_L35612_460
35612.                      if ( $I_L35612_460 >= $F_A152 ) exit
35612.                   enddo
35612.                endif
35621.                $F_A153 = ntop
35621.                if ( ntop > 0 ) then
35621.                   $I_L35621_462 = 0
35621. !dir$ ivdep
35621.                   do
35621.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35621_462, 1, 0) = $Tmp_A148
35621.                      $I_L35621_462 = 1 + $I_L35621_462
35621.                      if ( $I_L35621_462 >= $F_A153 ) exit
35621.                   enddo
35621.                endif
35614.                $Tmp_A145 = 0.0
35614.                if ( ntop > 0 ) then
35614.                   $Tmp_A145 = (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + ntop, 2, 0)
35614.                endif
35623.                $Tmp_A149 = 0.0
35623.                if ( ntop > 0 ) then
35623.                   $Tmp_A149 = (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + ntop, 2, 0)
35623.                endif
35614.                $F_A154 = ntop
35614.                if ( ntop > 0 ) then
35614.                   $I_L35614_464 = 0
35614. !dir$ ivdep
35614.                   do
35614.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35614_464, 2, 0) = $Tmp_A145
35614.                      $I_L35614_464 = 1 + $I_L35614_464
35614.                      if ( $I_L35614_464 >= $F_A154 ) exit
35614.                   enddo
35614.                endif
35623.                $F_A155 = ntop
35623.                if ( ntop > 0 ) then
35623.                   $I_L35623_466 = 0
35623. !dir$ ivdep
35623.                   do
35623.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35623_466, 2, 0) = $Tmp_A149
35623.                      $I_L35623_466 = 1 + $I_L35623_466
35623.                      if ( $I_L35623_466 >= $F_A155 ) exit
35623.                   enddo
35623.                endif
35616.                $Tmp_A146 = 0.0
35616.                if ( ntop > 0 ) then
35616.                   $Tmp_A146 = (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + ntop, 3, 0)
35616.                endif
35625.                $Tmp_A150 = 0.0
35625.                if ( ntop > 0 ) then
35625.                   $Tmp_A150 = (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + ntop, 3, 0)
35625.                endif
35616.                $F_A156 = ntop
35616.                if ( ntop > 0 ) then
35616.                   $I_L35616_468 = 0
35616. !dir$ ivdep
35616.                   do
35616.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35616_468, 3, 0) = $Tmp_A146
35616.                      $I_L35616_468 = 1 + $I_L35616_468
35616.                      if ( $I_L35616_468 >= $F_A156 ) exit
35616.                   enddo
35616.                endif
35625.                $F_A157 = ntop
35625.                if ( ntop > 0 ) then
35625.                   $I_L35625_470 = 0
35625. !dir$ ivdep
35625.                   do
35625.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35625_470, 3, 0) = $Tmp_A150
35625.                      $I_L35625_470 = 1 + $I_L35625_470
35625.                      if ( $I_L35625_470 >= $F_A157 ) exit
35625.                   enddo
35625.                endif
35618.                $Tmp_A147 = 0.0
35618.                if ( ntop > 0 ) then
35618.                   $Tmp_A147 = (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + ntop, 4, 0)
35618.                endif
35627.                $Tmp_A151 = 0.0
35627.                if ( ntop > 0 ) then
35627.                   $Tmp_A151 = (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + ntop, 4, 0)
35627.                endif
35618.                $F_A158 = ntop
35618.                if ( ntop > 0 ) then
35618.                   $I_L35618_472 = 0
35618. !dir$ ivdep
35618.                   do
35618.                      (condensed_mix_ratio%base_addr)(1 + $I_L35598_532, 1 + $I_L35618_472, 4, 0) = $Tmp_A147
35618.                      $I_L35618_472 = 1 + $I_L35618_472
35618.                      if ( $I_L35618_472 >= $F_A158 ) exit
35618.                   enddo
35618.                endif
35627.                $F_A159 = ntop
35627.                if ( ntop > 0 ) then
35627.                   $I_L35627_474 = 0
35627. !dir$ ivdep
35627.                   do
35627.                      (condensed_dim_char%base_addr)(1 + $I_L35598_532, 1 + $I_L35627_474, 4, 0) = $Tmp_A151
35627.                      $I_L35627_474 = 1 + $I_L35627_474
35627.                      if ( $I_L35627_474 >= $F_A159 ) exit
35627.                   enddo
35627.                endif
35630.                $I_L35598_532 = 1 + $I_L35598_532
35609.                if ( $I_L35598_532 >= $Reduc_A53 ) exit
35609.             enddo
35609.          endif
35666.          t$10700 = 0
35666.          t$10703 = 0
35666.          if ( swdat%solar%solar_flux_band%header%a_contig == 1 ) then
35666. !dir$ suppress (swdat%solar%solar_flux_band%base_addr)(swdat%solar%solar_flux_band%dim_1%LB, 0)
35666.             t$10699 = loc( (swdat%solar%solar_flux_band%base_addr)(swdat%solar%solar_flux_band%dim_1%LB, 0) )
35666.          else
35666.             t$10700 = swdat%solar%solar_flux_band%dim_1%EX
35666.             t$10703 = int( _alloc( max( 0, 8 * max( 0, swdat%solar%solar_flux_band%dim_1%EX ) ) ), 8 )
35666.             $F_A160 = swdat%solar%solar_flux_band%dim_1%EX
35666.             if ( swdat%solar%solar_flux_band%dim_1%EX > 0 ) then
35666.                $SC_swdat_I167 = swdat%solar%solar_flux_band%dim_1%SM
35666.                $SC_swdat_I168 = swdat%solar%solar_flux_band%dim_1%LB
35666.                $I_L35666_476 = 0
35666. !dir$ ivdep
35666.                do
35666.                   t$10702(1 + $I_L35666_476) = (swdat%solar%solar_flux_band%base_addr)($SC_swdat_I168 + $I_L35666_476, 0)
35666.                   $I_L35666_476 = 1 + $I_L35666_476
35666.                   if ( $I_L35666_476 >= $F_A160 ) exit
35666.                enddo
35666.             endif
35666. !dir$ suppress t$10702
35666.             t$10699 = loc( t$10702 )
35666.          endif
35667.          t$10705 = 0
35667.          t$10708 = 0
35667.          if ( swdat%rayleigh%rayleigh_coeff%header%a_contig == 1 ) then
35667. !dir$ suppress (swdat%rayleigh%rayleigh_coeff%base_addr)(swdat%rayleigh%rayleigh_coeff%dim_1%LB, 0)
35667.             t$10704 = loc( (swdat%rayleigh%rayleigh_coeff%base_addr)(swdat%rayleigh%rayleigh_coeff%dim_1%LB, 0) )
35667.          else
35667.             t$10705 = swdat%rayleigh%rayleigh_coeff%dim_1%EX
35667.             t$10708 = int( _alloc( max( 0, 8 * max( 0, swdat%rayleigh%rayleigh_coeff%dim_1%EX ) ) ), 8 )
35667.             $F_A161 = swdat%rayleigh%rayleigh_coeff%dim_1%EX
35667.             if ( swdat%rayleigh%rayleigh_coeff%dim_1%EX > 0 ) then
35667.                $SC_swdat_I169 = swdat%rayleigh%rayleigh_coeff%dim_1%SM
35667.                $SC_swdat_I170 = swdat%rayleigh%rayleigh_coeff%dim_1%LB
35667.                $I_L35667_478 = 0
35667. !dir$ ivdep
35667.                do
35667.                   t$10707(1 + $I_L35667_478) = (swdat%rayleigh%rayleigh_coeff%base_addr)($SC_swdat_I170 + $I_L35667_478, 0)
35667.                   $I_L35667_478 = 1 + $I_L35667_478
35667.                   if ( $I_L35667_478 >= $F_A161 ) exit
35667.                enddo
35667.             endif
35667. !dir$ suppress t$10707
35667.             t$10704 = loc( t$10707 )
35667.          endif
35673.          t$10710 = 0
35673.          t$10713 = 0
35673.          if ( swdat%gas%n_band_absorb%header%a_contig == 1 ) then
35673. !dir$ suppress (swdat%gas%n_band_absorb%base_addr)(swdat%gas%n_band_absorb%dim_1%LB, 0)
35673.             t$10709 = loc( (swdat%gas%n_band_absorb%base_addr)(swdat%gas%n_band_absorb%dim_1%LB, 0) )
35673.          else
35673.             t$10710 = swdat%gas%n_band_absorb%dim_1%EX
35673.             t$10713 = int( _alloc( max( 0, 4 * max( 0, swdat%gas%n_band_absorb%dim_1%EX ) ) ), 8 )
35673.             $F_A162 = swdat%gas%n_band_absorb%dim_1%EX
35673.             if ( swdat%gas%n_band_absorb%dim_1%EX > 0 ) then
35673.                $SC_swdat_I171 = swdat%gas%n_band_absorb%dim_1%SM
35673.                $SC_swdat_I172 = swdat%gas%n_band_absorb%dim_1%LB
35673.                $I_L35673_480 = 0
35673. !dir$ ivdep
35673.                do
35673.                   t$10712(1 + $I_L35673_480) = (swdat%gas%n_band_absorb%base_addr)($SC_swdat_I172 + $I_L35673_480, 0)
35673.                   $I_L35673_480 = 1 + $I_L35673_480
35673.                   if ( $I_L35673_480 >= $F_A162 ) exit
35673.                enddo
35673.             endif
35673. !dir$ suppress t$10712
35673.             t$10709 = loc( t$10712 )
35673.          endif
35673.          t$10715 = 0
35673.          t$10716 = 0
35673.          t$10720 = 0
35673.          if ( swdat%gas%index_absorb%header%a_contig == 1 ) then
35673. !dir$ suppress (swdat%gas%index_absorb%base_addr)(swdat%gas%index_absorb%dim_1%LB, swdat%gas%index_absorb%dim_2%LB, 0)
35673.             t$10714 = loc( (swdat%gas%index_absorb%base_addr)(swdat%gas%index_absorb%dim_1%LB, swdat%gas%index_absorb%dim_2%LB, 0) )
35673.          else
35673.             t$10715 = swdat%gas%index_absorb%dim_1%EX
35673.             t$10716 = swdat%gas%index_absorb%dim_2%EX
35673.             t$10720 = int( _alloc( max( 0, max( 0, swdat%gas%index_absorb%dim_2%EX ) * max( 0, swdat%gas%index_absorb%dim_1%EX ) * 4 ) ), 8 )
35673.             $F_A163 = swdat%gas%index_absorb%dim_2%EX
35673.             $F_A164 = swdat%gas%index_absorb%dim_1%EX
35673.             if ( and( -$F_A164, -$F_A163 ) < 0 ) then
35673.                $SC_swdat_I173 = swdat%gas%index_absorb%dim_1%SM
35673.                $SC_swdat_I177 = swdat%gas%index_absorb%dim_1%EX
35673.                $SC_swdat_I174 = swdat%gas%index_absorb%dim_1%LB
35673.                $SC_swdat_I175 = swdat%gas%index_absorb%dim_2%SM
35673.                $SC_swdat_I176 = swdat%gas%index_absorb%dim_2%LB
35673.                $I_L35673_604 = 0
35673.                do
35673.                   $I_L35673_482 = 0
35673. !dir$ ivdep
35673.                   do
35673.                      t$10719(1 + $I_L35673_482, 1 + $I_L35673_604) = (swdat%gas%index_absorb%base_addr)($SC_swdat_I174 + $I_L35673_482, $SC_swdat_I176 + $I_L35673_604, 0)
35673.                      $I_L35673_482 = 1 + $I_L35673_482
35673.                      if ( $I_L35673_482 >= $F_A164 ) exit
35673.                   enddo
35673.                   $I_L35673_604 = 1 + $I_L35673_604
35673.                   if ( $I_L35673_604 >= $F_A163 ) exit
35673.                enddo
35673.             endif
35673. !dir$ suppress t$10719
35673.             t$10714 = loc( t$10719 )
35673.          endif
35674.          t$10722 = 0
35674.          t$10723 = 0
35674.          t$10727 = 0
35674.          if ( swdat%gas%i_band_k%header%a_contig == 1 ) then
35674. !dir$ suppress (swdat%gas%i_band_k%base_addr)(swdat%gas%i_band_k%dim_1%LB, swdat%gas%i_band_k%dim_2%LB, 0)
35674.             t$10721 = loc( (swdat%gas%i_band_k%base_addr)(swdat%gas%i_band_k%dim_1%LB, swdat%gas%i_band_k%dim_2%LB, 0) )
35674.          else
35674.             t$10722 = swdat%gas%i_band_k%dim_1%EX
35674.             t$10723 = swdat%gas%i_band_k%dim_2%EX
35674.             t$10727 = int( _alloc( max( 0, max( 0, swdat%gas%i_band_k%dim_2%EX ) * max( 0, swdat%gas%i_band_k%dim_1%EX ) * 4 ) ), 8 )
35674.             $F_A165 = swdat%gas%i_band_k%dim_2%EX
35674.             $F_A166 = swdat%gas%i_band_k%dim_1%EX
35674.             if ( and( -$F_A166, -$F_A165 ) < 0 ) then
35674.                $SC_swdat_I178 = swdat%gas%i_band_k%dim_1%SM
35674.                $SC_swdat_I182 = swdat%gas%i_band_k%dim_1%EX
35674.                $SC_swdat_I179 = swdat%gas%i_band_k%dim_1%LB
35674.                $SC_swdat_I180 = swdat%gas%i_band_k%dim_2%SM
35674.                $SC_swdat_I181 = swdat%gas%i_band_k%dim_2%LB
35674.                $I_L35674_606 = 0
35674.                do
35674.                   $I_L35674_484 = 0
35674. !dir$ ivdep
35674.                   do
35674.                      t$10726(1 + $I_L35674_484, 1 + $I_L35674_606) = (swdat%gas%i_band_k%base_addr)($SC_swdat_I179 + $I_L35674_484, $SC_swdat_I181 + $I_L35674_606, 0)
35674.                      $I_L35674_484 = 1 + $I_L35674_484
35674.                      if ( $I_L35674_484 >= $F_A166 ) exit
35674.                   enddo
35674.                   $I_L35674_606 = 1 + $I_L35674_606
35674.                   if ( $I_L35674_606 >= $F_A165 ) exit
35674.                enddo
35674.             endif
35674. !dir$ suppress t$10726
35674.             t$10721 = loc( t$10726 )
35674.          endif
35674.          t$10729 = 0
35674.          t$10730 = 0
35674.          t$10731 = 0
35674.          t$10736 = 0
35674.          if ( swdat%gas%w%header%a_contig == 1 ) then
35674. !dir$ suppress (swdat%gas%w%base_addr)(swdat%gas%w%dim_1%LB, swdat%gas%w%dim_2%LB, swdat%gas%w%dim_3%LB, 0)
35674.             t$10728 = loc( (swdat%gas%w%base_addr)(swdat%gas%w%dim_1%LB, swdat%gas%w%dim_2%LB, swdat%gas%w%dim_3%LB, 0) )
35674.          else
35674.             t$10729 = swdat%gas%w%dim_1%EX
35674.             t$10730 = swdat%gas%w%dim_2%EX
35674.             t$10731 = swdat%gas%w%dim_3%EX
35674.             t$10736 = int( _alloc( max( 0, max( 0, swdat%gas%w%dim_2%EX ) * max( 0, swdat%gas%w%dim_1%EX ) * max( 0, swdat%gas%w%dim_3%EX ) * 8 ) ), 8 )
35674.             $F_A167 = swdat%gas%w%dim_3%EX
35674.             $F_A168 = swdat%gas%w%dim_2%EX
35674.             $F_A169 = swdat%gas%w%dim_1%EX
35674.             if ( and( and( -$F_A168, -$F_A167 ), -$F_A169 ) < 0 ) then
35674.                $SC_swdat_I183 = swdat%gas%w%dim_1%SM
35674.                $SC_swdat_I189 = swdat%gas%w%dim_1%EX
35674.                $SC_swdat_I184 = swdat%gas%w%dim_1%LB
35674.                $SC_swdat_I185 = swdat%gas%w%dim_2%SM
35674.                $SC_swdat_I190 = swdat%gas%w%dim_2%EX
35674.                $SC_swdat_I186 = swdat%gas%w%dim_2%LB
35674.                $SC_swdat_I187 = swdat%gas%w%dim_3%SM
35674.                $SC_swdat_I188 = swdat%gas%w%dim_3%LB
35674.                $I_L35674_688 = 0
35674.                do
35674.                   $I_L35674_608 = 0
35674.                   do
35674.                      $I_L35674_486 = 0
35674. !dir$ ivdep
35674.                      do
35674.                         t$10735(1 + $I_L35674_486, 1 + $I_L35674_608, 1 + $I_L35674_688) = (swdat%gas%w%base_addr)($SC_swdat_I184 + $I_L35674_486, $SC_swdat_I186 + $I_L35674_608, $SC_swdat_I188 + $I_L35674_688, 0)
35674.                         $I_L35674_486 = 1 + $I_L35674_486
35674.                         if ( $I_L35674_486 >= $F_A169 ) exit
35674.                      enddo
35674.                      $I_L35674_608 = 1 + $I_L35674_608
35674.                      if ( $I_L35674_608 >= $F_A168 ) exit
35674.                   enddo
35674.                   $I_L35674_688 = 1 + $I_L35674_688
35674.                   if ( $I_L35674_688 >= $F_A167 ) exit
35674.                enddo
35674.             endif
35674. !dir$ suppress t$10735
35674.             t$10728 = loc( t$10735 )
35674.          endif
35674.          t$10738 = 0
35674.          t$10739 = 0
35674.          t$10740 = 0
35674.          t$10745 = 0
35674.          if ( swdat%gas%k%header%a_contig == 1 ) then
35674. !dir$ suppress (swdat%gas%k%base_addr)(swdat%gas%k%dim_1%LB, swdat%gas%k%dim_2%LB, swdat%gas%k%dim_3%LB, 0)
35674.             t$10737 = loc( (swdat%gas%k%base_addr)(swdat%gas%k%dim_1%LB, swdat%gas%k%dim_2%LB, swdat%gas%k%dim_3%LB, 0) )
35674.          else
35674.             t$10738 = swdat%gas%k%dim_1%EX
35674.             t$10739 = swdat%gas%k%dim_2%EX
35674.             t$10740 = swdat%gas%k%dim_3%EX
35674.             t$10745 = int( _alloc( max( 0, max( 0, swdat%gas%k%dim_2%EX ) * max( 0, swdat%gas%k%dim_1%EX ) * max( 0, swdat%gas%k%dim_3%EX ) * 8 ) ), 8 )
35674.             $F_A170 = swdat%gas%k%dim_3%EX
35674.             $F_A171 = swdat%gas%k%dim_2%EX
35674.             $F_A172 = swdat%gas%k%dim_1%EX
35674.             if ( and( and( -$F_A171, -$F_A170 ), -$F_A172 ) < 0 ) then
35674.                $SC_swdat_I191 = swdat%gas%k%dim_1%SM
35674.                $SC_swdat_I197 = swdat%gas%k%dim_1%EX
35674.                $SC_swdat_I192 = swdat%gas%k%dim_1%LB
35674.                $SC_swdat_I193 = swdat%gas%k%dim_2%SM
35674.                $SC_swdat_I198 = swdat%gas%k%dim_2%EX
35674.                $SC_swdat_I194 = swdat%gas%k%dim_2%LB
35674.                $SC_swdat_I195 = swdat%gas%k%dim_3%SM
35674.                $SC_swdat_I196 = swdat%gas%k%dim_3%LB
35674.                $I_L35674_690 = 0
35674.                do
35674.                   $I_L35674_610 = 0
35674.                   do
35674.                      $I_L35674_488 = 0
35674. !dir$ ivdep
35674.                      do
35674.                         t$10744(1 + $I_L35674_488, 1 + $I_L35674_610, 1 + $I_L35674_690) = (swdat%gas%k%base_addr)($SC_swdat_I192 + $I_L35674_488, $SC_swdat_I194 + $I_L35674_610, $SC_swdat_I196 + $I_L35674_690, 0)
35674.                         $I_L35674_488 = 1 + $I_L35674_488
35674.                         if ( $I_L35674_488 >= $F_A172 ) exit
35674.                      enddo
35674.                      $I_L35674_610 = 1 + $I_L35674_610
35674.                      if ( $I_L35674_610 >= $F_A171 ) exit
35674.                   enddo
35674.                   $I_L35674_690 = 1 + $I_L35674_690
35674.                   if ( $I_L35674_690 >= $F_A170 ) exit
35674.                enddo
35674.             endif
35674. !dir$ suppress t$10744
35674.             t$10737 = loc( t$10744 )
35674.          endif
35674.          t$10747 = 0
35674.          t$10748 = 0
35674.          t$10752 = 0
35674.          if ( swdat%gas%i_scale_k%header%a_contig == 1 ) then
35674. !dir$ suppress (swdat%gas%i_scale_k%base_addr)(swdat%gas%i_scale_k%dim_1%LB, swdat%gas%i_scale_k%dim_2%LB, 0)
35674.             t$10746 = loc( (swdat%gas%i_scale_k%base_addr)(swdat%gas%i_scale_k%dim_1%LB, swdat%gas%i_scale_k%dim_2%LB, 0) )
35674.          else
35674.             t$10747 = swdat%gas%i_scale_k%dim_1%EX
35674.             t$10748 = swdat%gas%i_scale_k%dim_2%EX
35674.             t$10752 = int( _alloc( max( 0, max( 0, swdat%gas%i_scale_k%dim_2%EX ) * max( 0, swdat%gas%i_scale_k%dim_1%EX ) * 4 ) ), 8 )
35674.             $F_A173 = swdat%gas%i_scale_k%dim_2%EX
35674.             $F_A174 = swdat%gas%i_scale_k%dim_1%EX
35674.             if ( and( -$F_A174, -$F_A173 ) < 0 ) then
35674.                $SC_swdat_I199 = swdat%gas%i_scale_k%dim_1%SM
35674.                $SC_swdat_I203 = swdat%gas%i_scale_k%dim_1%EX
35674.                $SC_swdat_I200 = swdat%gas%i_scale_k%dim_1%LB
35674.                $SC_swdat_I201 = swdat%gas%i_scale_k%dim_2%SM
35674.                $SC_swdat_I202 = swdat%gas%i_scale_k%dim_2%LB
35674.                $I_L35674_612 = 0
35674.                do
35674.                   $I_L35674_490 = 0
35674. !dir$ ivdep
35674.                   do
35674.                      t$10751(1 + $I_L35674_490, 1 + $I_L35674_612) = (swdat%gas%i_scale_k%base_addr)($SC_swdat_I200 + $I_L35674_490, $SC_swdat_I202 + $I_L35674_612, 0)
35674.                      $I_L35674_490 = 1 + $I_L35674_490
35674.                      if ( $I_L35674_490 >= $F_A174 ) exit
35674.                   enddo
35674.                   $I_L35674_612 = 1 + $I_L35674_612
35674.                   if ( $I_L35674_612 >= $F_A173 ) exit
35674.                enddo
35674.             endif
35674. !dir$ suppress t$10751
35674.             t$10746 = loc( t$10751 )
35674.          endif
35675.          t$10754 = 0
35675.          t$10755 = 0
35675.          t$10759 = 0
35675.          if ( swdat%gas%i_scale_fnc%header%a_contig == 1 ) then
35675. !dir$ suppress (swdat%gas%i_scale_fnc%base_addr)(swdat%gas%i_scale_fnc%dim_1%LB, swdat%gas%i_scale_fnc%dim_2%LB, 0)
35675.             t$10753 = loc( (swdat%gas%i_scale_fnc%base_addr)(swdat%gas%i_scale_fnc%dim_1%LB, swdat%gas%i_scale_fnc%dim_2%LB, 0) )
35675.          else
35675.             t$10754 = swdat%gas%i_scale_fnc%dim_1%EX
35675.             t$10755 = swdat%gas%i_scale_fnc%dim_2%EX
35675.             t$10759 = int( _alloc( max( 0, max( 0, swdat%gas%i_scale_fnc%dim_2%EX ) * max( 0, swdat%gas%i_scale_fnc%dim_1%EX ) * 4 ) ), 8 )
35675.             $F_A175 = swdat%gas%i_scale_fnc%dim_2%EX
35675.             $F_A176 = swdat%gas%i_scale_fnc%dim_1%EX
35675.             if ( and( -$F_A176, -$F_A175 ) < 0 ) then
35675.                $SC_swdat_I204 = swdat%gas%i_scale_fnc%dim_1%SM
35675.                $SC_swdat_I208 = swdat%gas%i_scale_fnc%dim_1%EX
35675.                $SC_swdat_I205 = swdat%gas%i_scale_fnc%dim_1%LB
35675.                $SC_swdat_I206 = swdat%gas%i_scale_fnc%dim_2%SM
35675.                $SC_swdat_I207 = swdat%gas%i_scale_fnc%dim_2%LB
35675.                $I_L35675_614 = 0
35675.                do
35675.                   $I_L35675_492 = 0
35675. !dir$ ivdep
35675.                   do
35675.                      t$10758(1 + $I_L35675_492, 1 + $I_L35675_614) = (swdat%gas%i_scale_fnc%base_addr)($SC_swdat_I205 + $I_L35675_492, $SC_swdat_I207 + $I_L35675_614, 0)
35675.                      $I_L35675_492 = 1 + $I_L35675_492
35675.                      if ( $I_L35675_492 >= $F_A176 ) exit
35675.                   enddo
35675.                   $I_L35675_614 = 1 + $I_L35675_614
35675.                   if ( $I_L35675_614 >= $F_A175 ) exit
35675.                enddo
35675.             endif
35675. !dir$ suppress t$10758
35675.             t$10753 = loc( t$10758 )
35675.          endif
35675.          t$10761 = 0
35675.          t$10762 = 0
35675.          t$10763 = 0
35675.          t$10764 = 0
35675.          t$10770 = 0
35675.          if ( swdat%gas%scale%header%a_contig == 1 ) then
35675. !dir$ suppress (swdat%gas%scale%base_addr)(swdat%gas%scale%dim_1%LB, swdat%gas%scale%dim_2%LB, swdat%gas%scale%dim_3%LB, swdat%gas%scale%dim_4%LB, 0)
35675.             t$10760 = loc( (swdat%gas%scale%base_addr)(swdat%gas%scale%dim_1%LB, swdat%gas%scale%dim_2%LB, swdat%gas%scale%dim_3%LB, swdat%gas%scale%dim_4%LB, 0) )
35675.          else
35675.             t$10761 = swdat%gas%scale%dim_1%EX
35675.             t$10762 = swdat%gas%scale%dim_2%EX
35675.             t$10763 = swdat%gas%scale%dim_3%EX
35675.             t$10764 = swdat%gas%scale%dim_4%EX
35675.             t$10770 = int( _alloc( max( 0, max( 0, swdat%gas%scale%dim_2%EX ) * max( 0, swdat%gas%scale%dim_1%EX ) * max( 0, swdat%gas%scale%dim_3%EX ) * max( 0, swdat%gas%scale%dim_4%EX ) * 8 ) ), 8 )
35675.             $F_A177 = swdat%gas%scale%dim_4%EX
35675.             $F_A178 = swdat%gas%scale%dim_3%EX
35675.             $F_A179 = swdat%gas%scale%dim_2%EX
35675.             $F_A180 = swdat%gas%scale%dim_1%EX
35675.             if ( and( and( and( -$F_A178, -$F_A177 ), -$F_A179 ), -$F_A180 ) < 0 ) then
35675.                $SC_swdat_I209 = swdat%gas%scale%dim_1%SM
35675.                $SC_swdat_I217 = swdat%gas%scale%dim_1%EX
35675.                $SC_swdat_I210 = swdat%gas%scale%dim_1%LB
35675.                $SC_swdat_I211 = swdat%gas%scale%dim_2%SM
35675.                $SC_swdat_I218 = swdat%gas%scale%dim_2%EX
35675.                $SC_swdat_I212 = swdat%gas%scale%dim_2%LB
35675.                $SC_swdat_I213 = swdat%gas%scale%dim_3%SM
35675.                $SC_swdat_I219 = swdat%gas%scale%dim_3%EX
35675.                $SC_swdat_I214 = swdat%gas%scale%dim_3%LB
35675.                $SC_swdat_I215 = swdat%gas%scale%dim_4%SM
35675.                $SC_swdat_I216 = swdat%gas%scale%dim_4%LB
35675.                $I_L35675_698 = 0
35675.                do
35675.                   $I_L35675_692 = 0
35675.                   do
35675.                      $I_L35675_616 = 0
35675.                      do
35675.                         $I_L35675_494 = 0
35675. !dir$ ivdep
35675.                         do
35675.                            t$10769(1 + $I_L35675_494, 1 + $I_L35675_616, 1 + $I_L35675_692, 1 + $I_L35675_698) = (swdat%gas%scale%base_addr)($SC_swdat_I210 + $I_L35675_494, $SC_swdat_I212 + $I_L35675_616, $SC_swdat_I214 + $I_L35675_692, $SC_swdat_I216 + $I_L35675_698, 0)
35675.                            $I_L35675_494 = 1 + $I_L35675_494
35675.                            if ( $I_L35675_494 >= $F_A180 ) exit
35675.                         enddo
35675.                         $I_L35675_616 = 1 + $I_L35675_616
35675.                         if ( $I_L35675_616 >= $F_A179 ) exit
35675.                      enddo
35675.                      $I_L35675_692 = 1 + $I_L35675_692
35675.                      if ( $I_L35675_692 >= $F_A178 ) exit
35675.                   enddo
35675.                   $I_L35675_698 = 1 + $I_L35675_698
35675.                   if ( $I_L35675_698 >= $F_A177 ) exit
35675.                enddo
35675.             endif
35675. !dir$ suppress t$10769
35675.             t$10760 = loc( t$10769 )
35675.          endif
35676.          t$10772 = 0
35676.          t$10773 = 0
35676.          t$10777 = 0
35676.          if ( swdat%gas%p_ref%header%a_contig == 1 ) then
35676. !dir$ suppress (swdat%gas%p_ref%base_addr)(swdat%gas%p_ref%dim_1%LB, swdat%gas%p_ref%dim_2%LB, 0)
35676.             t$10771 = loc( (swdat%gas%p_ref%base_addr)(swdat%gas%p_ref%dim_1%LB, swdat%gas%p_ref%dim_2%LB, 0) )
35676.          else
35676.             t$10772 = swdat%gas%p_ref%dim_1%EX
35676.             t$10773 = swdat%gas%p_ref%dim_2%EX
35676.             t$10777 = int( _alloc( max( 0, max( 0, swdat%gas%p_ref%dim_2%EX ) * max( 0, swdat%gas%p_ref%dim_1%EX ) * 8 ) ), 8 )
35676.             $F_A181 = swdat%gas%p_ref%dim_2%EX
35676.             $F_A182 = swdat%gas%p_ref%dim_1%EX
35676.             if ( and( -$F_A182, -$F_A181 ) < 0 ) then
35676.                $SC_swdat_I220 = swdat%gas%p_ref%dim_1%SM
35676.                $SC_swdat_I224 = swdat%gas%p_ref%dim_1%EX
35676.                $SC_swdat_I221 = swdat%gas%p_ref%dim_1%LB
35676.                $SC_swdat_I222 = swdat%gas%p_ref%dim_2%SM
35676.                $SC_swdat_I223 = swdat%gas%p_ref%dim_2%LB
35676.                $I_L35676_618 = 0
35676.                do
35676.                   $I_L35676_496 = 0
35676. !dir$ ivdep
35676.                   do
35676.                      t$10776(1 + $I_L35676_496, 1 + $I_L35676_618) = (swdat%gas%p_ref%base_addr)($SC_swdat_I221 + $I_L35676_496, $SC_swdat_I223 + $I_L35676_618, 0)
35676.                      $I_L35676_496 = 1 + $I_L35676_496
35676.                      if ( $I_L35676_496 >= $F_A182 ) exit
35676.                   enddo
35676.                   $I_L35676_618 = 1 + $I_L35676_618
35676.                   if ( $I_L35676_618 >= $F_A181 ) exit
35676.                enddo
35676.             endif
35676. !dir$ suppress t$10776
35676.             t$10771 = loc( t$10776 )
35676.          endif
35676.          t$10779 = 0
35676.          t$10780 = 0
35676.          t$10784 = 0
35676.          if ( swdat%gas%t_ref%header%a_contig == 1 ) then
35676. !dir$ suppress (swdat%gas%t_ref%base_addr)(swdat%gas%t_ref%dim_1%LB, swdat%gas%t_ref%dim_2%LB, 0)
35676.             t$10778 = loc( (swdat%gas%t_ref%base_addr)(swdat%gas%t_ref%dim_1%LB, swdat%gas%t_ref%dim_2%LB, 0) )
35676.          else
35676.             t$10779 = swdat%gas%t_ref%dim_1%EX
35676.             t$10780 = swdat%gas%t_ref%dim_2%EX
35676.             t$10784 = int( _alloc( max( 0, max( 0, swdat%gas%t_ref%dim_2%EX ) * max( 0, swdat%gas%t_ref%dim_1%EX ) * 8 ) ), 8 )
35676.             $F_A183 = swdat%gas%t_ref%dim_2%EX
35676.             $F_A184 = swdat%gas%t_ref%dim_1%EX
35676.             if ( and( -$F_A184, -$F_A183 ) < 0 ) then
35676.                $SC_swdat_I225 = swdat%gas%t_ref%dim_1%SM
35676.                $SC_swdat_I229 = swdat%gas%t_ref%dim_1%EX
35676.                $SC_swdat_I226 = swdat%gas%t_ref%dim_1%LB
35676.                $SC_swdat_I227 = swdat%gas%t_ref%dim_2%SM
35676.                $SC_swdat_I228 = swdat%gas%t_ref%dim_2%LB
35676.                $I_L35676_620 = 0
35676.                do
35676.                   $I_L35676_498 = 0
35676. !dir$ ivdep
35676.                   do
35676.                      t$10783(1 + $I_L35676_498, 1 + $I_L35676_620) = (swdat%gas%t_ref%base_addr)($SC_swdat_I226 + $I_L35676_498, $SC_swdat_I228 + $I_L35676_620, 0)
35676.                      $I_L35676_498 = 1 + $I_L35676_498
35676.                      if ( $I_L35676_498 >= $F_A184 ) exit
35676.                   enddo
35676.                   $I_L35676_620 = 1 + $I_L35676_620
35676.                   if ( $I_L35676_620 >= $F_A183 ) exit
35676.                enddo
35676.             endif
35676. !dir$ suppress t$10783
35676.             t$10778 = loc( t$10783 )
35676.          endif
35685.          t$10786 = 0
35685.          t$10789 = 0
35685.          if ( swdat%cont%n_band_continuum%header%a_contig == 1 ) then
35685. !dir$ suppress (swdat%cont%n_band_continuum%base_addr)(swdat%cont%n_band_continuum%dim_1%LB, 0)
35685.             t$10785 = loc( (swdat%cont%n_band_continuum%base_addr)(swdat%cont%n_band_continuum%dim_1%LB, 0) )
35685.          else
35685.             t$10786 = swdat%cont%n_band_continuum%dim_1%EX
35685.             t$10789 = int( _alloc( max( 0, 4 * max( 0, swdat%cont%n_band_continuum%dim_1%EX ) ) ), 8 )
35685.             $F_A185 = swdat%cont%n_band_continuum%dim_1%EX
35685.             if ( swdat%cont%n_band_continuum%dim_1%EX > 0 ) then
35685.                $SC_swdat_I230 = swdat%cont%n_band_continuum%dim_1%SM
35685.                $SC_swdat_I231 = swdat%cont%n_band_continuum%dim_1%LB
35685.                $I_L35685_500 = 0
35685. !dir$ ivdep
35685.                do
35685.                   t$10788(1 + $I_L35685_500) = (swdat%cont%n_band_continuum%base_addr)($SC_swdat_I231 + $I_L35685_500, 0)
35685.                   $I_L35685_500 = 1 + $I_L35685_500
35685.                   if ( $I_L35685_500 >= $F_A185 ) exit
35685.                enddo
35685.             endif
35685. !dir$ suppress t$10788
35685.             t$10785 = loc( t$10788 )
35685.          endif
35685.          t$10791 = 0
35685.          t$10792 = 0
35685.          t$10796 = 0
35685.          if ( swdat%cont%index_continuum%header%a_contig == 1 ) then
35685. !dir$ suppress (swdat%cont%index_continuum%base_addr)(swdat%cont%index_continuum%dim_1%LB, swdat%cont%index_continuum%dim_2%LB, 0)
35685.             t$10790 = loc( (swdat%cont%index_continuum%base_addr)(swdat%cont%index_continuum%dim_1%LB, swdat%cont%index_continuum%dim_2%LB, 0) )
35685.          else
35685.             t$10791 = swdat%cont%index_continuum%dim_1%EX
35685.             t$10792 = swdat%cont%index_continuum%dim_2%EX
35685.             t$10796 = int( _alloc( max( 0, max( 0, swdat%cont%index_continuum%dim_2%EX ) * max( 0, swdat%cont%index_continuum%dim_1%EX ) * 4 ) ), 8 )
35685.             $F_A186 = swdat%cont%index_continuum%dim_2%EX
35685.             $F_A187 = swdat%cont%index_continuum%dim_1%EX
35685.             if ( and( -$F_A187, -$F_A186 ) < 0 ) then
35685.                $SC_swdat_I232 = swdat%cont%index_continuum%dim_1%SM
35685.                $SC_swdat_I236 = swdat%cont%index_continuum%dim_1%EX
35685.                $SC_swdat_I233 = swdat%cont%index_continuum%dim_1%LB
35685.                $SC_swdat_I234 = swdat%cont%index_continuum%dim_2%SM
35685.                $SC_swdat_I235 = swdat%cont%index_continuum%dim_2%LB
35685.                $I_L35685_622 = 0
35685.                do
35685.                   $I_L35685_502 = 0
35685. !dir$ ivdep
35685.                   do
35685.                      t$10795(1 + $I_L35685_502, 1 + $I_L35685_622) = (swdat%cont%index_continuum%base_addr)($SC_swdat_I233 + $I_L35685_502, $SC_swdat_I235 + $I_L35685_622, 0)
35685.                      $I_L35685_502 = 1 + $I_L35685_502
35685.                      if ( $I_L35685_502 >= $F_A187 ) exit
35685.                   enddo
35685.                   $I_L35685_622 = 1 + $I_L35685_622
35685.                   if ( $I_L35685_622 >= $F_A186 ) exit
35685.                enddo
35685.             endif
35685. !dir$ suppress t$10795
35685.             t$10790 = loc( t$10795 )
35685.          endif
35686.          t$10798 = 0
35686.          t$10799 = 0
35686.          t$10803 = 0
35686.          if ( swdat%cont%k_cont%header%a_contig == 1 ) then
35686. !dir$ suppress (swdat%cont%k_cont%base_addr)(swdat%cont%k_cont%dim_1%LB, swdat%cont%k_cont%dim_2%LB, 0)
35686.             t$10797 = loc( (swdat%cont%k_cont%base_addr)(swdat%cont%k_cont%dim_1%LB, swdat%cont%k_cont%dim_2%LB, 0) )
35686.          else
35686.             t$10798 = swdat%cont%k_cont%dim_1%EX
35686.             t$10799 = swdat%cont%k_cont%dim_2%EX
35686.             t$10803 = int( _alloc( max( 0, max( 0, swdat%cont%k_cont%dim_2%EX ) * max( 0, swdat%cont%k_cont%dim_1%EX ) * 8 ) ), 8 )
35686.             $F_A188 = swdat%cont%k_cont%dim_2%EX
35686.             $F_A189 = swdat%cont%k_cont%dim_1%EX
35686.             if ( and( -$F_A189, -$F_A188 ) < 0 ) then
35686.                $SC_swdat_I237 = swdat%cont%k_cont%dim_1%SM
35686.                $SC_swdat_I241 = swdat%cont%k_cont%dim_1%EX
35686.                $SC_swdat_I238 = swdat%cont%k_cont%dim_1%LB
35686.                $SC_swdat_I239 = swdat%cont%k_cont%dim_2%SM
35686.                $SC_swdat_I240 = swdat%cont%k_cont%dim_2%LB
35686.                $I_L35686_624 = 0
35686.                do
35686.                   $I_L35686_504 = 0
35686. !dir$ ivdep
35686.                   do
35686.                      t$10802(1 + $I_L35686_504, 1 + $I_L35686_624) = (swdat%cont%k_cont%base_addr)($SC_swdat_I238 + $I_L35686_504, $SC_swdat_I240 + $I_L35686_624, 0)
35686.                      $I_L35686_504 = 1 + $I_L35686_504
35686.                      if ( $I_L35686_504 >= $F_A189 ) exit
35686.                   enddo
35686.                   $I_L35686_624 = 1 + $I_L35686_624
35686.                   if ( $I_L35686_624 >= $F_A188 ) exit
35686.                enddo
35686.             endif
35686. !dir$ suppress t$10802
35686.             t$10797 = loc( t$10802 )
35686.          endif
35686.          t$10805 = 0
35686.          t$10806 = 0
35686.          t$10810 = 0
35686.          if ( swdat%cont%i_scale_fnc_cont%header%a_contig == 1 ) then
35686. !dir$ suppress (swdat%cont%i_scale_fnc_cont%base_addr)(swdat%cont%i_scale_fnc_cont%dim_1%LB, swdat%cont%i_scale_fnc_cont%dim_2%LB, 0)
35686.             t$10804 = loc( (swdat%cont%i_scale_fnc_cont%base_addr)(swdat%cont%i_scale_fnc_cont%dim_1%LB, swdat%cont%i_scale_fnc_cont%dim_2%LB, 0) )
35686.          else
35686.             t$10805 = swdat%cont%i_scale_fnc_cont%dim_1%EX
35686.             t$10806 = swdat%cont%i_scale_fnc_cont%dim_2%EX
35686.             t$10810 = int( _alloc( max( 0, max( 0, swdat%cont%i_scale_fnc_cont%dim_2%EX ) * max( 0, swdat%cont%i_scale_fnc_cont%dim_1%EX ) * 4 ) ), 8 )
35686.             $F_A190 = swdat%cont%i_scale_fnc_cont%dim_2%EX
35686.             $F_A191 = swdat%cont%i_scale_fnc_cont%dim_1%EX
35686.             if ( and( -$F_A191, -$F_A190 ) < 0 ) then
35686.                $SC_swdat_I242 = swdat%cont%i_scale_fnc_cont%dim_1%SM
35686.                $SC_swdat_I246 = swdat%cont%i_scale_fnc_cont%dim_1%EX
35686.                $SC_swdat_I243 = swdat%cont%i_scale_fnc_cont%dim_1%LB
35686.                $SC_swdat_I244 = swdat%cont%i_scale_fnc_cont%dim_2%SM
35686.                $SC_swdat_I245 = swdat%cont%i_scale_fnc_cont%dim_2%LB
35686.                $I_L35686_626 = 0
35686.                do
35686.                   $I_L35686_506 = 0
35686. !dir$ ivdep
35686.                   do
35686.                      t$10809(1 + $I_L35686_506, 1 + $I_L35686_626) = (swdat%cont%i_scale_fnc_cont%base_addr)($SC_swdat_I243 + $I_L35686_506, $SC_swdat_I245 + $I_L35686_626, 0)
35686.                      $I_L35686_506 = 1 + $I_L35686_506
35686.                      if ( $I_L35686_506 >= $F_A191 ) exit
35686.                   enddo
35686.                   $I_L35686_626 = 1 + $I_L35686_626
35686.                   if ( $I_L35686_626 >= $F_A190 ) exit
35686.                enddo
35686.             endif
35686. !dir$ suppress t$10809
35686.             t$10804 = loc( t$10809 )
35686.          endif
35686.          t$10812 = 0
35686.          t$10813 = 0
35686.          t$10814 = 0
35686.          t$10819 = 0
35686.          if ( swdat%cont%scale_cont%header%a_contig == 1 ) then
35686. !dir$ suppress (swdat%cont%scale_cont%base_addr)(swdat%cont%scale_cont%dim_1%LB, swdat%cont%scale_cont%dim_2%LB, swdat%cont%scale_cont%dim_3%LB, 0)
35686.             t$10811 = loc( (swdat%cont%scale_cont%base_addr)(swdat%cont%scale_cont%dim_1%LB, swdat%cont%scale_cont%dim_2%LB, swdat%cont%scale_cont%dim_3%LB, 0) )
35686.          else
35686.             t$10812 = swdat%cont%scale_cont%dim_1%EX
35686.             t$10813 = swdat%cont%scale_cont%dim_2%EX
35686.             t$10814 = swdat%cont%scale_cont%dim_3%EX
35686.             t$10819 = int( _alloc( max( 0, max( 0, swdat%cont%scale_cont%dim_2%EX ) * max( 0, swdat%cont%scale_cont%dim_1%EX ) * max( 0, swdat%cont%scale_cont%dim_3%EX ) * 8 ) ), 8 )
35686.             $F_A192 = swdat%cont%scale_cont%dim_3%EX
35686.             $F_A193 = swdat%cont%scale_cont%dim_2%EX
35686.             $F_A194 = swdat%cont%scale_cont%dim_1%EX
35686.             if ( and( and( -$F_A193, -$F_A192 ), -$F_A194 ) < 0 ) then
35686.                $SC_swdat_I247 = swdat%cont%scale_cont%dim_1%SM
35686.                $SC_swdat_I253 = swdat%cont%scale_cont%dim_1%EX
35686.                $SC_swdat_I248 = swdat%cont%scale_cont%dim_1%LB
35686.                $SC_swdat_I249 = swdat%cont%scale_cont%dim_2%SM
35686.                $SC_swdat_I254 = swdat%cont%scale_cont%dim_2%EX
35686.                $SC_swdat_I250 = swdat%cont%scale_cont%dim_2%LB
35686.                $SC_swdat_I251 = swdat%cont%scale_cont%dim_3%SM
35686.                $SC_swdat_I252 = swdat%cont%scale_cont%dim_3%LB
35686.                $I_L35686_694 = 0
35686.                do
35686.                   $I_L35686_628 = 0
35686.                   do
35686.                      $I_L35686_508 = 0
35686. !dir$ ivdep
35686.                      do
35686.                         t$10818(1 + $I_L35686_508, 1 + $I_L35686_628, 1 + $I_L35686_694) = (swdat%cont%scale_cont%base_addr)($SC_swdat_I248 + $I_L35686_508, $SC_swdat_I250 + $I_L35686_628, $SC_swdat_I252 + $I_L35686_694, 0)
35686.                         $I_L35686_508 = 1 + $I_L35686_508
35686.                         if ( $I_L35686_508 >= $F_A194 ) exit
35686.                      enddo
35686.                      $I_L35686_628 = 1 + $I_L35686_628
35686.                      if ( $I_L35686_628 >= $F_A193 ) exit
35686.                   enddo
35686.                   $I_L35686_694 = 1 + $I_L35686_694
35686.                   if ( $I_L35686_694 >= $F_A192 ) exit
35686.                enddo
35686.             endif
35686. !dir$ suppress t$10818
35686.             t$10811 = loc( t$10818 )
35686.          endif
35687.          t$10821 = 0
35687.          t$10822 = 0
35687.          t$10826 = 0
35687.          if ( swdat%cont%p_ref_cont%header%a_contig == 1 ) then
35687. !dir$ suppress (swdat%cont%p_ref_cont%base_addr)(swdat%cont%p_ref_cont%dim_1%LB, swdat%cont%p_ref_cont%dim_2%LB, 0)
35687.             t$10820 = loc( (swdat%cont%p_ref_cont%base_addr)(swdat%cont%p_ref_cont%dim_1%LB, swdat%cont%p_ref_cont%dim_2%LB, 0) )
35687.          else
35687.             t$10821 = swdat%cont%p_ref_cont%dim_1%EX
35687.             t$10822 = swdat%cont%p_ref_cont%dim_2%EX
35687.             t$10826 = int( _alloc( max( 0, max( 0, swdat%cont%p_ref_cont%dim_2%EX ) * max( 0, swdat%cont%p_ref_cont%dim_1%EX ) * 8 ) ), 8 )
35687.             $F_A195 = swdat%cont%p_ref_cont%dim_2%EX
35687.             $F_A196 = swdat%cont%p_ref_cont%dim_1%EX
35687.             if ( and( -$F_A196, -$F_A195 ) < 0 ) then
35687.                $SC_swdat_I255 = swdat%cont%p_ref_cont%dim_1%SM
35687.                $SC_swdat_I259 = swdat%cont%p_ref_cont%dim_1%EX
35687.                $SC_swdat_I256 = swdat%cont%p_ref_cont%dim_1%LB
35687.                $SC_swdat_I257 = swdat%cont%p_ref_cont%dim_2%SM
35687.                $SC_swdat_I258 = swdat%cont%p_ref_cont%dim_2%LB
35687.                $I_L35687_630 = 0
35687.                do
35687.                   $I_L35687_510 = 0
35687. !dir$ ivdep
35687.                   do
35687.                      t$10825(1 + $I_L35687_510, 1 + $I_L35687_630) = (swdat%cont%p_ref_cont%base_addr)($SC_swdat_I256 + $I_L35687_510, $SC_swdat_I258 + $I_L35687_630, 0)
35687.                      $I_L35687_510 = 1 + $I_L35687_510
35687.                      if ( $I_L35687_510 >= $F_A196 ) exit
35687.                   enddo
35687.                   $I_L35687_630 = 1 + $I_L35687_630
35687.                   if ( $I_L35687_630 >= $F_A195 ) exit
35687.                enddo
35687.             endif
35687. !dir$ suppress t$10825
35687.             t$10820 = loc( t$10825 )
35687.          endif
35687.          t$10828 = 0
35687.          t$10829 = 0
35687.          t$10833 = 0
35687.          if ( swdat%cont%t_ref_cont%header%a_contig == 1 ) then
35687. !dir$ suppress (swdat%cont%t_ref_cont%base_addr)(swdat%cont%t_ref_cont%dim_1%LB, swdat%cont%t_ref_cont%dim_2%LB, 0)
35687.             t$10827 = loc( (swdat%cont%t_ref_cont%base_addr)(swdat%cont%t_ref_cont%dim_1%LB, swdat%cont%t_ref_cont%dim_2%LB, 0) )
35687.          else
35687.             t$10828 = swdat%cont%t_ref_cont%dim_1%EX
35687.             t$10829 = swdat%cont%t_ref_cont%dim_2%EX
35687.             t$10833 = int( _alloc( max( 0, max( 0, swdat%cont%t_ref_cont%dim_2%EX ) * max( 0, swdat%cont%t_ref_cont%dim_1%EX ) * 8 ) ), 8 )
35687.             $F_A197 = swdat%cont%t_ref_cont%dim_2%EX
35687.             $F_A198 = swdat%cont%t_ref_cont%dim_1%EX
35687.             if ( and( -$F_A198, -$F_A197 ) < 0 ) then
35687.                $SC_swdat_I260 = swdat%cont%t_ref_cont%dim_1%SM
35687.                $SC_swdat_I264 = swdat%cont%t_ref_cont%dim_1%EX
35687.                $SC_swdat_I261 = swdat%cont%t_ref_cont%dim_1%LB
35687.                $SC_swdat_I262 = swdat%cont%t_ref_cont%dim_2%SM
35687.                $SC_swdat_I263 = swdat%cont%t_ref_cont%dim_2%LB
35687.                $I_L35687_632 = 0
35687.                do
35687.                   $I_L35687_512 = 0
35687. !dir$ ivdep
35687.                   do
35687.                      t$10832(1 + $I_L35687_512, 1 + $I_L35687_632) = (swdat%cont%t_ref_cont%base_addr)($SC_swdat_I261 + $I_L35687_512, $SC_swdat_I263 + $I_L35687_632, 0)
35687.                      $I_L35687_512 = 1 + $I_L35687_512
35687.                      if ( $I_L35687_512 >= $F_A198 ) exit
35687.                   enddo
35687.                   $I_L35687_632 = 1 + $I_L35687_632
35687.                   if ( $I_L35687_632 >= $F_A197 ) exit
35687.                enddo
35687.             endif
35687. !dir$ suppress t$10832
35687.             t$10827 = loc( t$10832 )
35687.          endif
35690.          t$10835 = 0
35690.          t$10836 = 0
35690.          t$10837 = 0
35690.          t$10842 = 0
35690.          if ( swdat%aerosol%abs%header%a_contig == 1 ) then
35690. !dir$ suppress (swdat%aerosol%abs%base_addr)(swdat%aerosol%abs%dim_1%LB, swdat%aerosol%abs%dim_2%LB, swdat%aerosol%abs%dim_3%LB, 0)
35690.             t$10834 = loc( (swdat%aerosol%abs%base_addr)(swdat%aerosol%abs%dim_1%LB, swdat%aerosol%abs%dim_2%LB, swdat%aerosol%abs%dim_3%LB, 0) )
35690.          else
35690.             t$10835 = swdat%aerosol%abs%dim_1%EX
35690.             t$10836 = swdat%aerosol%abs%dim_2%EX
35690.             t$10837 = swdat%aerosol%abs%dim_3%EX
35690.             t$10842 = int( _alloc( max( 0, max( 0, swdat%aerosol%abs%dim_2%EX ) * max( 0, swdat%aerosol%abs%dim_1%EX ) * max( 0, swdat%aerosol%abs%dim_3%EX ) * 8 ) ), 8 )
35636.             call _f90_copy_from_dv( t$10841, swdat%aerosol%abs )
35690. !dir$ suppress t$10841
35690.             t$10834 = loc( t$10841 )
35690.          endif
35690.          t$10844 = 0
35690.          t$10845 = 0
35690.          t$10846 = 0
35690.          t$10851 = 0
35690.          if ( swdat%aerosol%scat%header%a_contig == 1 ) then
35690. !dir$ suppress (swdat%aerosol%scat%base_addr)(swdat%aerosol%scat%dim_1%LB, swdat%aerosol%scat%dim_2%LB, swdat%aerosol%scat%dim_3%LB, 0)
35690.             t$10843 = loc( (swdat%aerosol%scat%base_addr)(swdat%aerosol%scat%dim_1%LB, swdat%aerosol%scat%dim_2%LB, swdat%aerosol%scat%dim_3%LB, 0) )
35690.          else
35690.             t$10844 = swdat%aerosol%scat%dim_1%EX
35690.             t$10845 = swdat%aerosol%scat%dim_2%EX
35690.             t$10846 = swdat%aerosol%scat%dim_3%EX
35690.             t$10851 = int( _alloc( max( 0, max( 0, swdat%aerosol%scat%dim_2%EX ) * max( 0, swdat%aerosol%scat%dim_1%EX ) * max( 0, swdat%aerosol%scat%dim_3%EX ) * 8 ) ), 8 )
35636.             call _f90_copy_from_dv( t$10850, swdat%aerosol%scat )
35690. !dir$ suppress t$10850
35690.             t$10843 = loc( t$10850 )
35690.          endif
35691.          t$10853 = 0
35691.          t$10856 = 0
35691.          if ( swdat%aerosol%n_aerosol_phf_term%header%a_contig == 1 ) then
35691. !dir$ suppress (swdat%aerosol%n_aerosol_phf_term%base_addr)(swdat%aerosol%n_aerosol_phf_term%dim_1%LB, 0)
35691.             t$10852 = loc( (swdat%aerosol%n_aerosol_phf_term%base_addr)(swdat%aerosol%n_aerosol_phf_term%dim_1%LB, 0) )
35691.          else
35691.             t$10853 = swdat%aerosol%n_aerosol_phf_term%dim_1%EX
35691.             t$10856 = int( _alloc( max( 0, 4 * max( 0, swdat%aerosol%n_aerosol_phf_term%dim_1%EX ) ) ), 8 )
35636.             call _f90_copy_from_dv( t$10855, swdat%aerosol%n_aerosol_phf_term )
35691. !dir$ suppress t$10855
35691.             t$10852 = loc( t$10855 )
35691.          endif
35691.          t$10858 = 0
35691.          t$10859 = 0
35691.          t$10860 = 0
35691.          t$10861 = 0
35691.          t$10867 = 0
35691.          if ( swdat%aerosol%phf_fnc%header%a_contig == 1 ) then
35691. !dir$ suppress (swdat%aerosol%phf_fnc%base_addr)(swdat%aerosol%phf_fnc%dim_1%LB, swdat%aerosol%phf_fnc%dim_2%LB, swdat%aerosol%phf_fnc%dim_3%LB, swdat%aerosol%phf_fnc%dim_4%LB, 0)
35691.             t$10857 = loc( (swdat%aerosol%phf_fnc%base_addr)(swdat%aerosol%phf_fnc%dim_1%LB, swdat%aerosol%phf_fnc%dim_2%LB, swdat%aerosol%phf_fnc%dim_3%LB, swdat%aerosol%phf_fnc%dim_4%LB, 0) )
35691.          else
35691.             t$10858 = swdat%aerosol%phf_fnc%dim_1%EX
35691.             t$10859 = swdat%aerosol%phf_fnc%dim_2%EX
35691.             t$10860 = swdat%aerosol%phf_fnc%dim_3%EX
35691.             t$10861 = swdat%aerosol%phf_fnc%dim_4%EX
35691.             t$10867 = int( _alloc( max( 0, max( 0, swdat%aerosol%phf_fnc%dim_2%EX ) * max( 0, swdat%aerosol%phf_fnc%dim_1%EX ) * max( 0, swdat%aerosol%phf_fnc%dim_3%EX ) * max( 0, swdat%aerosol%phf_fnc%dim_4%EX ) * 8 ) ), 8 )
35636.             call _f90_copy_from_dv( t$10866, swdat%aerosol%phf_fnc )
35691. !dir$ suppress t$10866
35691.             t$10857 = loc( t$10866 )
35691.          endif
35692.          t$10869 = 0
35692.          t$10872 = 0
35692.          if ( swdat%aerosol%i_aerosol_parm%header%a_contig == 1 ) then
35692. !dir$ suppress (swdat%aerosol%i_aerosol_parm%base_addr)(swdat%aerosol%i_aerosol_parm%dim_1%LB, 0)
35692.             t$10868 = loc( (swdat%aerosol%i_aerosol_parm%base_addr)(swdat%aerosol%i_aerosol_parm%dim_1%LB, 0) )
35692.          else
35692.             t$10869 = swdat%aerosol%i_aerosol_parm%dim_1%EX
35692.             t$10872 = int( _alloc( max( 0, 4 * max( 0, swdat%aerosol%i_aerosol_parm%dim_1%EX ) ) ), 8 )
35636.             call _f90_copy_from_dv( t$10871, swdat%aerosol%i_aerosol_parm )
35692. !dir$ suppress t$10871
35692.             t$10868 = loc( t$10871 )
35692.          endif
35692.          t$10874 = 0
35692.          t$10877 = 0
35692.          if ( swdat%aerosol%nhumidity%header%a_contig == 1 ) then
35692. !dir$ suppress (swdat%aerosol%nhumidity%base_addr)(swdat%aerosol%nhumidity%dim_1%LB, 0)
35692.             t$10873 = loc( (swdat%aerosol%nhumidity%base_addr)(swdat%aerosol%nhumidity%dim_1%LB, 0) )
35692.          else
35692.             t$10874 = swdat%aerosol%nhumidity%dim_1%EX
35692.             t$10877 = int( _alloc( max( 0, 4 * max( 0, swdat%aerosol%nhumidity%dim_1%EX ) ) ), 8 )
35636.             call _f90_copy_from_dv( t$10876, swdat%aerosol%nhumidity )
35692. !dir$ suppress t$10876
35692.             t$10873 = loc( t$10876 )
35692.          endif
35692.          t$10879 = 0
35692.          t$10880 = 0
35692.          t$10884 = 0
35692.          if ( swdat%aerosol%humidities%header%a_contig == 1 ) then
35692. !dir$ suppress (swdat%aerosol%humidities%base_addr)(swdat%aerosol%humidities%dim_1%LB, swdat%aerosol%humidities%dim_2%LB, 0)
35692.             t$10878 = loc( (swdat%aerosol%humidities%base_addr)(swdat%aerosol%humidities%dim_1%LB, swdat%aerosol%humidities%dim_2%LB, 0) )
35692.          else
35692.             t$10879 = swdat%aerosol%humidities%dim_1%EX
35692.             t$10880 = swdat%aerosol%humidities%dim_2%EX
35692.             t$10884 = int( _alloc( max( 0, max( 0, swdat%aerosol%humidities%dim_2%EX ) * max( 0, swdat%aerosol%humidities%dim_1%EX ) * 8 ) ), 8 )
35636.             call _f90_copy_from_dv( t$10883, swdat%aerosol%humidities )
35692. !dir$ suppress t$10883
35692.             t$10878 = loc( t$10883 )
35692.          endif
35636.          ipa$30115 = .true.
35636.          ipa$30116 = .true.
35636.          ipa$30117 = .true.
35636.          ipa$30118 = .true.
35636.          ipa$30119 = .true.
35636.          ipa$30120 = .true.
35636.          ipa$30121 = .true.
35636.          ipa$30122 = 1
35636.          ipa$30123 = .true.
35636.          ipa$30124 = 2
35636.          ipa$30125 = 16
35636.          ipa$30126 = 0
35636.          ipa$30127 = 0
35636.          ipa$30128 = 0
35636.          ipa$30129 = 0
35636.          ipa$30130 = 0
35636.          ipa$30131 = 0.0
35636.          ipa$30132 = 0.0
35636.          ipa$30133 = .true.
35636.          ipa$30134 = 0
35636.          ipa$30135 = 0
35636.          ipa$30136 = 1
35636.          ipa$30137 = 0
35636.          ipa$30141 = 0
35636.          ipa$30143 = 0
35636.          ipa$30145 = .true.
35636.          ipa$30146 = 1
35636.          ipa$30147 = 14
35636.          ipa$30149 = 1
35636.          ipa$30150 = 6
35636.          ipa$30161 = 1
35636.          ipa$30166 = .false.
35636.          ipa$30173 = 2
35636.          ipa$30181 = .false.
35636.          ipa$30229 = 0.0
35636.          ipa$30230 = 0.0
35636.          ipa$30231 = 1
35636.          ipa$30232 = 1
35636.          ipa$30245 = 1
35636.          ipa$30246 = 1
35636.          ipa$30275 = .true.
35636.          ipa$30276 = 13
35636.          ipa$30286 = .false.
35636.          ipa$30300 = 1
35636.          ipa$30301 = 1
35636.          ipa$30302 = 1
35636.          ipa$30303 = 1
35636.          ipa$30304 = 2
35636.          ipa$30305 = 25
35636.          ipa$30306 = 2
35636.          ipa$30307 = 2
35636.          ipa$30308 = 5
35636.          ipa$30309 = 1
35636.          ipa$30310 = 1
35636.          ipa$30311 = 1
35636.          ipa$30312 = 1
35636.          ipa$30313 = 1
35636.          ipa$30314 = 1
35636.          ipa$30315 = 1
35636.          ipa$30316 = 1
35636.          ipa$30317 = 3
35636.          ipa$30318 = 4
35636.          ipa$30319 = 4
35636.          ipa$30320 = 18
35636.          ipa$30321 = 1
35636.          ipa$30322 = 1
35636.          call radiance_calc( ierr, ipa$30115, ipa$30116, ipa$30117, ipa$30118, ipa$30119, ipa$30120, ipa$30121, ipa$30122, ipa$30123, ipa$30124, ipa$30125, ipa$30126, ipa$30127, ipa$30128, ipa$30129, ipa$30130, ipa$30131, ipa$30132, ipa$30133, ipa$30134, ipa$30135, ipa$30136, ipa$30137, direction(1, 1, 1), ipa$30141, viewing_level(1), ipa$30143, i_scatter_method(1), ipa$30145, ipa$30146, ipa$30147, map_band_channel(1), swdat%dim%nd_band, ipa$30149, ipa$30150, weight_band(1), n_profile, n_layer, (pres%base_addr)(1, 1, 0), (temp%base_addr)(1, 1, 0), (t_ground%base_addr)(1, 0), (t_level%base_addr)(1, 0, 0), (d_mass%base_addr)(1, 1, 0), ipa$30161, (zen_0%base_addr)(1, 0), (solar_irrad%base_addr)(1, 0), t$10699, t$10704, swdat%planck%n_deg_fit, therm_dummy(1, 1), swdat%planck%t_ref_planck, ipa$30166, i_gas_overlap(1), i_gas, (gas_mix_ratio%base_addr)(1, 1, 1, 0), t$10709, t$10714, t$10721, t$10728, t$10737, t$10746, t$10753, t$10760, t$10771, t$10778, l_doppler(1), doppler_correction(1), ipa$30173, (rho_alb%base_addr)(1, 1, 1, 0), f_brdf(1, 0, 0, 0), ipa$30181, i_dummy, i_dummy, list_dummy(1), rho_alb_dummy(1, 1, 1, 1), tt_dummy(1, 1), tt_dummy(1, 1), t$10785, t$10790, swdat%cont%index_water, t$10797, t$10804, t$10811, t$10820, t$10827, swdat%aerosol%n_aerosol, (aerosol_mix_ratio%base_addr)(1, 1, 1, 0), t$10834, t$10843, t$10852, t$10857, t$10868, t$10873, t$10878, n_opt_level_aerosol_prsc(1), n_phase_term_aerosol_prsc(1), aerosol_pressure_prsc(1, 1, 1), aerosol_absorption_prsc(1, 1, 1, 1), aerosol_scattering_prsc(1, 1, 1, 1), aerosol_phase_fnc_prsc(1, 1, 1, 1, 1), n_condensed, type_condensed(1), i_cloud, i_cloud_representation, (w_cloud%base_addr)(1, 1, 0), n_cloud_type, (frac_cloud%base_addr)(1, 1, 1, 0), (condensed_mix_ratio%base_addr)(1, 1, 1, 0), (condensed_dim_char%base_addr)(1, 1, 1, 0), i_condensed_param(1), condensed_n_phf(1), condensed_param_list(1, 1, 1), ipa$30229, ipa$30230, ipa$30231, ipa$30232, drop_pressure_prsc(1, 1), drop_absorption_prsc(1, 1, 1), drop_scattering_prsc(1, 1, 1), drop_phase_fnc_prsc(1, 1, 1, 1), ipa$30245, ipa$30246, ice_pressure_prsc(1, 1), ice_absorption_prsc(1, 1, 1), ice_scattering_prsc(1, 1, 1), ice_phase_fnc_prsc(1, 1, 1, 1), (flux_direct%base_addr)(1, 0, 1, 0), (flux_down%base_addr)(1, 0, 1, 0), (flux_up%base_addr)(1, 0, 1, 0), radiance(1, 1, 1, 1), photolysis(1, 1, 1), ipa$30275, ipa$30276, (flux_direct_clear%base_addr)(1, 0, 1, 0), (flux_down_clear%base_addr)(1, 0, 1, 0), (flux_up_clear%base_addr)(1, 0, 1, 0), ipa$30286, wb_dummy(1), tt_dummy(1, 1), tt_dummy(1, 1), tt_dummy(1, 1), ft_dummy(1, 1, 1), ft_dummy(1, 1, 1), nd_profile, nd_layer, ipa$30300, nd_layer, ipa$30301, nd_2sg_profile, nd_flux_profile, ipa$30302, ipa$30303, ipa$30304, swdat%dim%nd_band, swdat%dim%nd_species, ipa$30305, swdat%dim%nd_scale_variable, swdat%dim%nd_continuum, swdat%dim%nd_aerosol_species, swdat%dim%nd_humidity, swdat%dim%nd_cloud_parameter, i_therm_dummy, ipa$30306, ipa$30307, ipa$30308, ipa$30309, ipa$30310, ipa$30311, ipa$30312, swdat%dim%nd_phase_term, ipa$30313, ipa$30314, ipa$30315, ipa$30316, ipa$30317, ipa$30318, ipa$30319, ipa$30320, ipa$30321, ipa$30322 )
35692.          if ( swdat%aerosol%humidities%header%a_contig /= 1 ) then
35692.             _free( t$10884 )
35692.          endif
35692.          if ( swdat%aerosol%nhumidity%header%a_contig /= 1 ) then
35692.             _free( t$10877 )
35692.          endif
35692.          if ( swdat%aerosol%i_aerosol_parm%header%a_contig /= 1 ) then
35692.             _free( t$10872 )
35692.          endif
35691.          if ( swdat%aerosol%phf_fnc%header%a_contig /= 1 ) then
35691.             _free( t$10867 )
35691.          endif
35691.          if ( swdat%aerosol%n_aerosol_phf_term%header%a_contig /= 1 ) then
35691.             _free( t$10856 )
35691.          endif
35690.          if ( swdat%aerosol%scat%header%a_contig /= 1 ) then
35690.             _free( t$10851 )
35690.          endif
35690.          if ( swdat%aerosol%abs%header%a_contig /= 1 ) then
35690.             _free( t$10842 )
35690.          endif
35687.          if ( swdat%cont%t_ref_cont%header%a_contig /= 1 ) then
35687.             _free( t$10833 )
35687.          endif
35687.          if ( swdat%cont%p_ref_cont%header%a_contig /= 1 ) then
35687.             _free( t$10826 )
35687.          endif
35686.          if ( swdat%cont%scale_cont%header%a_contig /= 1 ) then
35686.             _free( t$10819 )
35686.          endif
35686.          if ( swdat%cont%i_scale_fnc_cont%header%a_contig /= 1 ) then
35686.             _free( t$10810 )
35686.          endif
35686.          if ( swdat%cont%k_cont%header%a_contig /= 1 ) then
35686.             _free( t$10803 )
35686.          endif
35685.          if ( swdat%cont%index_continuum%header%a_contig /= 1 ) then
35685.             _free( t$10796 )
35685.          endif
35685.          if ( swdat%cont%n_band_continuum%header%a_contig /= 1 ) then
35685.             _free( t$10789 )
35685.          endif
35676.          if ( swdat%gas%t_ref%header%a_contig /= 1 ) then
35676.             _free( t$10784 )
35676.          endif
35676.          if ( swdat%gas%p_ref%header%a_contig /= 1 ) then
35676.             _free( t$10777 )
35676.          endif
35675.          if ( swdat%gas%scale%header%a_contig /= 1 ) then
35675.             _free( t$10770 )
35675.          endif
35675.          if ( swdat%gas%i_scale_fnc%header%a_contig /= 1 ) then
35675.             _free( t$10759 )
35675.          endif
35674.          if ( swdat%gas%i_scale_k%header%a_contig /= 1 ) then
35674.             _free( t$10752 )
35674.          endif
35674.          if ( swdat%gas%k%header%a_contig /= 1 ) then
35674.             _free( t$10745 )
35674.          endif
35674.          if ( swdat%gas%w%header%a_contig /= 1 ) then
35674.             _free( t$10736 )
35674.          endif
35674.          if ( swdat%gas%i_band_k%header%a_contig /= 1 ) then
35674.             _free( t$10727 )
35674.          endif
35673.          if ( swdat%gas%index_absorb%header%a_contig /= 1 ) then
35673.             _free( t$10720 )
35673.          endif
35673.          if ( swdat%gas%n_band_absorb%header%a_contig /= 1 ) then
35673.             _free( t$10713 )
35673.          endif
35667.          if ( swdat%rayleigh%rayleigh_coeff%header%a_contig /= 1 ) then
35667.             _free( t$10708 )
35667.          endif
35666.          if ( swdat%solar%solar_flux_band%header%a_contig /= 1 ) then
35666.             _free( t$10703 )
35666.          endif
35740.          if ( ierr /= 0 ) then
35740.              _substr(t$10885,1,4) = ' '
35740.             call _stop(  _substr(t$10885,1,1) )
35740.          else
35743.             if ( $Reduc_A53 > 0 ) then
35744.                if ( nd_layer >= 0 ) then
35745.                   $I_L35745_646 = 0
35745.                   do
35744.                      $I_L35744_534 = 0
35744.                      do
35743.                         $I_L35743_312 = 0
35743. !dir$ ivdep
35743.                         do
35746.                            (flux_net%base_addr)(1 + $I_L35743_312, $I_L35744_534, 1 + $I_L35745_646, 0) = (flux_down%base_addr)(1 + $I_L35743_312, $I_L35744_534, 1 + $I_L35745_646, 0) + -(flux_up%base_addr)(1 + $I_L35743_312, $I_L35744_534, 1 + $I_L35745_646, 0)
35747.                            (flux_net_clear%base_addr)(1 + $I_L35743_312, $I_L35744_534, 1 + $I_L35745_646, 0) = (flux_down_clear%base_addr)(1 + $I_L35743_312, $I_L35744_534, 1 + $I_L35745_646, 0) + -(flux_up_clear%base_addr)(1 + $I_L35743_312, $I_L35744_534, 1 + $I_L35745_646, 0)
35750.                            $I_L35743_312 = 1 + $I_L35743_312
35745.                            if ( $I_L35743_312 >= $Reduc_A53 ) exit
35745.                         enddo
35749.                         $I_L35744_534 = 1 + $I_L35744_534
35748.                         if ( $I_L35744_534 >= 1 + nd_layer ) exit
35748.                      enddo
35748.                      $I_L35745_646 = 1 + $I_L35745_646
35749.                      if ( $I_L35745_646 >= 2 ) exit
35749.                   enddo
35749.                endif
35760.                $I_L35760_536 = 0
35760.                do
35761.                   $SCA_toanet_I152 = toanet(litx(1 + $I_L35760_536))
35761.                   $SCA_toanetc_I153 = toanetc(litx(1 + $I_L35760_536))
35761.                   $SCA_sfcnet_I154 = sfcnet(litx(1 + $I_L35760_536))
35761.                   $SCA_sfcnetc_I155 = sfcnetc(litx(1 + $I_L35760_536))
35761.                   $SCA_litx_I158 = litx(1 + $I_L35760_536)
35761.                   $SCA_toadown_I161 = toadown($SCA_litx_I158)
35761.                   $I_L35761_314 = 0
35761. !dir$ ivdep
35761.                   do
35762.                      $SCA_toadown_I161 = $SCA_toadown_I161 + (flux_down%base_addr)(1 + $I_L35760_536, 0, 1 + $I_L35761_314, 0)
35763.                      $SCA_toanet_I152 = $SCA_toanet_I152 + (flux_net%base_addr)(1 + $I_L35760_536, 0, 1 + $I_L35761_314, 0)
35764.                      $SCA_toanetc_I153 = $SCA_toanetc_I153 + (flux_net_clear%base_addr)(1 + $I_L35760_536, 0, 1 + $I_L35761_314, 0)
35766.                      $SCA_sfcnet_I154 = $SCA_sfcnet_I154 + (flux_net%base_addr)(1 + $I_L35760_536, nd_layer, 1 + $I_L35761_314, 0)
35767.                      $SCA_sfcnetc_I155 = $SCA_sfcnetc_I155 + (flux_net_clear%base_addr)(1 + $I_L35760_536, nd_layer, 1 + $I_L35761_314, 0)
35768.                      $I_L35761_314 = 1 + $I_L35761_314
35761.                      if ( $I_L35761_314 >= 2 ) exit
35761.                   enddo
35761.                   toadown($SCA_litx_I158) = $SCA_toadown_I161
35761.                   sfcnetc($SCA_litx_I158) = $SCA_sfcnetc_I155
35761.                   sfcnet($SCA_litx_I158) = $SCA_sfcnet_I154
35761.                   toanetc($SCA_litx_I158) = $SCA_toanetc_I153
35761.                   toanet($SCA_litx_I158) = $SCA_toanet_I152
35771.                   sfcvisbeamc($SCA_litx_I158) = (flux_direct_clear%base_addr)(1 + $I_L35760_536, nd_layer, 1, 0)
35772.                   sfcvisdiffc($SCA_litx_I158) = (flux_down_clear%base_addr)(1 + $I_L35760_536, nd_layer, 1, 0) + -(flux_direct_clear%base_addr)(1 + $I_L35760_536, nd_layer, 1, 0)
35773.                   sfcnirbeamc($SCA_litx_I158) = (flux_direct_clear%base_addr)(1 + $I_L35760_536, nd_layer, 2, 0)
35774.                   sfcnirdiffc($SCA_litx_I158) = (flux_down_clear%base_addr)(1 + $I_L35760_536, nd_layer, 2, 0) + -(flux_direct_clear%base_addr)(1 + $I_L35760_536, nd_layer, 2, 0)
35776.                   sfcvisbeam($SCA_litx_I158) = (flux_direct%base_addr)(1 + $I_L35760_536, nd_layer, 1, 0)
35777.                   sfcvisdiff($SCA_litx_I158) = (flux_down%base_addr)(1 + $I_L35760_536, nd_layer, 1, 0) + -(flux_direct%base_addr)(1 + $I_L35760_536, nd_layer, 1, 0)
35778.                   sfcnirbeam($SCA_litx_I158) = (flux_direct%base_addr)(1 + $I_L35760_536, nd_layer, 2, 0)
35779.                   sfcnirdiff($SCA_litx_I158) = (flux_down%base_addr)(1 + $I_L35760_536, nd_layer, 2, 0) + -(flux_direct%base_addr)(1 + $I_L35760_536, nd_layer, 2, 0)
35780.                   $I_L35760_536 = 1 + $I_L35760_536
35768.                   if ( $I_L35760_536 >= $Reduc_A53 ) exit
35768.                enddo
35791.                if ( kmax > 0 ) then
35791.                   $SI_L35791_316_G19 = 0
35791.                   do
35790.                      $I_L35790_538 = 0
35790. !dir$ blocking_size( 0, 0 )
35790.                      do
35792.                         $SC_litx_I163 = litx(1 + $I_L35790_538)
35791.                         $I_L35791_703 = 0
35791. !dir$ ivdep
35791. !dir$ blocking_size( 256, 256 )
35791.                         do
35792.                            $SCA_heatrate_I156 = heatrate($SC_litx_I163, $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1)
35792.                            $SCA_heatratec_I157 = heatratec($SC_litx_I163, $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1)
35792.                            $SCA_d_mass_I159 = (d_mass%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1, 0)
35793.                            $SCA_heatrate_I156 = $SCA_heatrate_I156 + ( 1.0/$SCA_d_mass_I159 * ( (flux_net%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19, 1, 0) + -(flux_net%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1, 1, 0) ) * 9.9502487562189048e-4 ) + ( 1.0/$SCA_d_mass_I159 * ( (flux_net%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19, 2, 0) + -(flux_net%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1, 2, 0) ) * 9.9502487562189048e-4 )
35797.                            $SCA_heatratec_I157 = $SCA_heatratec_I157 + ( 1.0/$SCA_d_mass_I159 * ( (flux_net_clear%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19, 1, 0) + -(flux_net_clear%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1, 1, 0) ) * 9.9502487562189048e-4 ) + ( 1.0/$SCA_d_mass_I159 * ( (flux_net_clear%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19, 2, 0) + -(flux_net_clear%base_addr)(1 + $I_L35790_538, ntop + $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1, 2, 0) ) * 9.9502487562189048e-4 )
35792.                            heatratec($SC_litx_I163, $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1) = $SCA_heatratec_I157
35792.                            heatrate($SC_litx_I163, $I_L35791_703 + 256 * $SI_L35791_316_G19 + 1) = $SCA_heatrate_I156
35791.                            $I_L35791_703 = 1 + $I_L35791_703
35800.                            if ( $I_L35791_703 >= min( kmax, 256 + 256 * $SI_L35791_316_G19 ) + -256 * $SI_L35791_316_G19 ) exit
35800.                         enddo
35802.                         $I_L35790_538 = 1 + $I_L35790_538
35802.                         if ( $I_L35790_538 >= $Reduc_A53 ) exit
35802.                      enddo
35791.                      $SI_L35791_316_G19 = 1 + $SI_L35791_316_G19
35801.                      if ( $SI_L35791_316_G19 >= _rsh( 255 + kmax, 8 ) ) exit
35801.                   enddo
35801.                endif
35801.             endif
35807.             $_allo_P25(0) = 0x1000000000001L
35807.             $_allo_P25(1) = loc( pres )
35807.             call __deallocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
35807.             pres%header%assoc = 0
35808.             $_allo_P26(0) = 0x1000000000001L
35808.             $_allo_P26(1) = loc( temp )
35808.             call __deallocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
35808.             temp%header%assoc = 0
35809.             $_allo_P27(0) = 0x1000000000001L
35809.             $_allo_P27(1) = loc( d_mass )
35809.             call __deallocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
35809.             d_mass%header%assoc = 0
35810.             $_allo_P28(0) = 0x1000000000001L
35810.             $_allo_P28(1) = loc( t_ground )
35810.             call __deallocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
35810.             t_ground%header%assoc = 0
35811.             $_allo_P29(0) = 0x1000000000001L
35811.             $_allo_P29(1) = loc( t_level )
35811.             call __deallocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
35811.             t_level%header%assoc = 0
35812.             $_allo_P30(0) = 0x1000000000001L
35812.             $_allo_P30(1) = loc( zen_0 )
35812.             call __deallocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
35812.             zen_0%header%assoc = 0
35813.             $_allo_P31(0) = 0x1000000000001L
35813.             $_allo_P31(1) = loc( solar_irrad )
35813.             call __deallocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
35813.             solar_irrad%header%assoc = 0
35814.             $_allo_P32(0) = 0x1000000000001L
35814.             $_allo_P32(1) = loc( rho_alb )
35814.             call __deallocate( $_allo_P32, 0, 0, _fcd( 0, 0 ) )
35814.             rho_alb%header%assoc = 0
35816.             $_allo_P33(0) = 0x1000000000001L
35816.             $_allo_P33(1) = loc( gas_mix_ratio )
35816.             call __deallocate( $_allo_P33, 0, 0, _fcd( 0, 0 ) )
35816.             gas_mix_ratio%header%assoc = 0
35817.             $_allo_P34(0) = 0x1000000000001L
35817.             $_allo_P34(1) = loc( aerosol_mix_ratio )
35817.             call __deallocate( $_allo_P34, 0, 0, _fcd( 0, 0 ) )
35817.             aerosol_mix_ratio%header%assoc = 0
35819.             $_allo_P35(0) = 0x1000000000001L
35819.             $_allo_P35(1) = loc( w_cloud )
35819.             call __deallocate( $_allo_P35, 0, 0, _fcd( 0, 0 ) )
35819.             w_cloud%header%assoc = 0
35820.             $_allo_P36(0) = 0x1000000000001L
35820.             $_allo_P36(1) = loc( frac_cloud )
35820.             call __deallocate( $_allo_P36, 0, 0, _fcd( 0, 0 ) )
35820.             frac_cloud%header%assoc = 0
35821.             $_allo_P37(0) = 0x1000000000001L
35821.             $_allo_P37(1) = loc( condensed_mix_ratio )
35821.             call __deallocate( $_allo_P37, 0, 0, _fcd( 0, 0 ) )
35821.             condensed_mix_ratio%header%assoc = 0
35822.             $_allo_P38(0) = 0x1000000000001L
35822.             $_allo_P38(1) = loc( condensed_dim_char )
35822.             call __deallocate( $_allo_P38, 0, 0, _fcd( 0, 0 ) )
35822.             condensed_dim_char%header%assoc = 0
35823.             $_allo_P39(0) = 0x1000000000001L
35823.             $_allo_P39(1) = loc( clouds )
35823.             call __deallocate( $_allo_P39, 0, 0, _fcd( 0, 0 ) )
35823.             clouds%header%assoc = 0
35825.             $_allo_P40(0) = 0x1000000000001L
35825.             $_allo_P40(1) = loc( flux_direct )
35825.             call __deallocate( $_allo_P40, 0, 0, _fcd( 0, 0 ) )
35825.             flux_direct%header%assoc = 0
35826.             $_allo_P41(0) = 0x1000000000001L
35826.             $_allo_P41(1) = loc( flux_down )
35826.             call __deallocate( $_allo_P41, 0, 0, _fcd( 0, 0 ) )
35826.             flux_down%header%assoc = 0
35827.             $_allo_P42(0) = 0x1000000000001L
35827.             $_allo_P42(1) = loc( flux_up )
35827.             call __deallocate( $_allo_P42, 0, 0, _fcd( 0, 0 ) )
35827.             flux_up%header%assoc = 0
35828.             $_allo_P43(0) = 0x1000000000001L
35828.             $_allo_P43(1) = loc( flux_net )
35828.             call __deallocate( $_allo_P43, 0, 0, _fcd( 0, 0 ) )
35828.             flux_net%header%assoc = 0
35830.             $_allo_P44(0) = 0x1000000000001L
35830.             $_allo_P44(1) = loc( flux_direct_clear )
35830.             call __deallocate( $_allo_P44, 0, 0, _fcd( 0, 0 ) )
35830.             flux_direct_clear%header%assoc = 0
35831.             $_allo_P45(0) = 0x1000000000001L
35831.             $_allo_P45(1) = loc( flux_down_clear )
35831.             call __deallocate( $_allo_P45, 0, 0, _fcd( 0, 0 ) )
35831.             flux_down_clear%header%assoc = 0
35832.             $_allo_P46(0) = 0x1000000000001L
35832.             $_allo_P46(1) = loc( flux_up_clear )
35832.             call __deallocate( $_allo_P46, 0, 0, _fcd( 0, 0 ) )
35832.             flux_up_clear%header%assoc = 0
35833.             $_allo_P47(0) = 0x1000000000001L
35833.             $_allo_P47(1) = loc( flux_net_clear )
35833.             call __deallocate( $_allo_P47, 0, 0, _fcd( 0, 0 ) )
35833.             flux_net_clear%header%assoc = 0
35232.             $_allo_P48(0) = 0x17000000000001L
35232.             $_allo_P48(1) = loc( zen_0 )
35232.             $_allo_P48(2) = loc( w_cloud )
35232.             $_allo_P48(3) = loc( t_level )
35232.             $_allo_P48(4) = loc( t_ground )
35232.             $_allo_P48(5) = loc( temp )
35232.             $_allo_P48(6) = loc( solar_irrad )
35232.             $_allo_P48(7) = loc( rho_alb )
35232.             $_allo_P48(8) = loc( pres )
35232.             $_allo_P48(9) = loc( gas_mix_ratio )
35232.             $_allo_P48(10) = loc( frac_cloud )
35232.             $_allo_P48(11) = loc( flux_up_clear )
35232.             $_allo_P48(12) = loc( flux_up )
35232.             $_allo_P48(13) = loc( flux_net_clear )
35232.             $_allo_P48(14) = loc( flux_net )
35232.             $_allo_P48(15) = loc( flux_down_clear )
35232.             $_allo_P48(16) = loc( flux_down )
35232.             $_allo_P48(17) = loc( flux_direct_clear )
35232.             $_allo_P48(18) = loc( flux_direct )
35232.             $_allo_P48(19) = loc( d_mass )
35232.             $_allo_P48(20) = loc( condensed_mix_ratio )
35232.             $_allo_P48(21) = loc( condensed_dim_char )
35232.             $_allo_P48(22) = loc( clouds )
35232.             $_allo_P48(23) = loc( aerosol_mix_ratio )
35232.             call _dealloc( $_allo_P48, 0, 0, _fcd( 0, 0 ) )
34743.             _free( t$10420 )
34743.          endif
34743.       endif
35836.       return
35836.       end
35836.       
35848.       
35848.       subroutine ukmo_lwintf( ncols, kmax, pbot, pmid, dp, te, qe, o3, co2val, tg, imask, lw_toa_up_clr, lw_toa_up, lw_cool_clr, lw_cool, lw_sfc_net_clr, lw_sfc_net, lw_sfc_down_clr, lw_sfc_down, cld, clu, fice, rei, rel, lmixr )
35848.       t$10379 = ncols
35848.       t$10380 = kmax
35881.       t$10500 = _zla( 0, ncols )
35848.       t$10501 = _zla( 0, ncols )
35881.       t$10502 = _zla( 0, kmax )
35848.       t$10503 = _zla( 0, ncols ) * _zla( 0, kmax )
35848.       t$10389 = lwdat%dim%nd_aerosol_species
35848.       t$10381 = lwdat%dim%nd_band
36211.       t$10504 = _zla( 0, lwdat%dim%nd_aerosol_species )
35848.       t$10505 = _zla( 0, lwdat%dim%nd_aerosol_species )
36211.       t$10506 = _zla( 0, lwdat%dim%nd_band )
35848.       t$10507 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band )
36304.       t$10510 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8
36211.       aerosol_mix_ratio%header%el_len = 64
36211.       aerosol_mix_ratio%header%assoc = 0
36211.       aerosol_mix_ratio%header%ptr_alloc = 0
36211.       aerosol_mix_ratio%header%p_or_a = 2
36211.       aerosol_mix_ratio%header%a_contig = 1
36211.       aerosol_mix_ratio%header%dv_versn = 2
36211.       aerosol_mix_ratio%header%dv_smunit = 64
36211.       aerosol_mix_ratio%header%d_type = 0
36211.       aerosol_mix_ratio%header%n_params = 0
36211.       aerosol_mix_ratio%header%pad_codim = 0
36211.       aerosol_mix_ratio%header%n_codim = 0
36211.       aerosol_mix_ratio%header%pad_dim = 0
36211.       aerosol_mix_ratio%header%n_dim = 3
36211.       aerosol_mix_ratio%header%d_type_idx = 13
36211.       aerosol_mix_ratio%header%typ_code = 134481411
36211.       aerosol_mix_ratio%header%orig_base = 0
36211.       aerosol_mix_ratio%header%orig_size = 0
36211.       aerosol_mix_ratio%dim_1%LB = 1
36211.       aerosol_mix_ratio%dim_1%EX = 0
36211.       aerosol_mix_ratio%dim_1%SM = 1
36211.       aerosol_mix_ratio%dim_2%LB = 1
36211.       aerosol_mix_ratio%dim_2%EX = 0
36211.       aerosol_mix_ratio%dim_2%SM = 1
36211.       aerosol_mix_ratio%dim_3%LB = 1
36211.       aerosol_mix_ratio%dim_3%EX = 0
36211.       aerosol_mix_ratio%dim_3%SM = 1
35848.       t$10388 = lwdat%dim%nd_phase_term
36217.       t$10511 = _zla( 0, lwdat%dim%nd_phase_term )
35848.       t$10512 = _zla( 0, lwdat%dim%nd_phase_term )
35848.       t$10513 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_phase_term )
35848.       t$10514 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term )
36217.       t$10515 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8
36217.       t$10517 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8
35848.       t$10518 = _zla( 0, lwdat%dim%nd_aerosol_species )
36207.       t$10519 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8
36207.       t$10521 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species )
36214.       t$10522 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species )
36300.       t$10524 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16
36292.       clouds%header%el_len = 64
36292.       clouds%header%assoc = 0
36292.       clouds%header%ptr_alloc = 0
36292.       clouds%header%p_or_a = 2
36292.       clouds%header%a_contig = 1
36292.       clouds%header%dv_versn = 2
36292.       clouds%header%dv_smunit = 64
36292.       clouds%header%d_type = 0
36292.       clouds%header%n_params = 0
36292.       clouds%header%pad_codim = 0
36292.       clouds%header%n_codim = 0
36292.       clouds%header%pad_dim = 0
36292.       clouds%header%n_dim = 3
36292.       clouds%header%d_type_idx = 13
36292.       clouds%header%typ_code = 134481411
36292.       clouds%header%orig_base = 0
36292.       clouds%header%orig_size = 0
36292.       clouds%dim_1%LB = 1
36292.       clouds%dim_1%EX = 0
36292.       clouds%dim_1%SM = 1
36292.       clouds%dim_2%LB = 1
36292.       clouds%dim_2%EX = 0
36292.       clouds%dim_2%SM = 1
36292.       clouds%dim_3%LB = 1
36292.       clouds%dim_3%EX = 0
36292.       clouds%dim_3%SM = 1
36290.       condensed_dim_char%header%el_len = 64
36290.       condensed_dim_char%header%assoc = 0
36290.       condensed_dim_char%header%ptr_alloc = 0
36290.       condensed_dim_char%header%p_or_a = 2
36290.       condensed_dim_char%header%a_contig = 1
36290.       condensed_dim_char%header%dv_versn = 2
36290.       condensed_dim_char%header%dv_smunit = 64
36290.       condensed_dim_char%header%d_type = 0
36290.       condensed_dim_char%header%n_params = 0
36290.       condensed_dim_char%header%pad_codim = 0
36290.       condensed_dim_char%header%n_codim = 0
36290.       condensed_dim_char%header%pad_dim = 0
36290.       condensed_dim_char%header%n_dim = 3
36290.       condensed_dim_char%header%d_type_idx = 13
36290.       condensed_dim_char%header%typ_code = 134481411
36290.       condensed_dim_char%header%orig_base = 0
36290.       condensed_dim_char%header%orig_size = 0
36290.       condensed_dim_char%dim_1%LB = 1
36290.       condensed_dim_char%dim_1%EX = 0
36290.       condensed_dim_char%dim_1%SM = 1
36290.       condensed_dim_char%dim_2%LB = 1
36290.       condensed_dim_char%dim_2%EX = 0
36290.       condensed_dim_char%dim_2%SM = 1
36290.       condensed_dim_char%dim_3%LB = 1
36290.       condensed_dim_char%dim_3%EX = 0
36290.       condensed_dim_char%dim_3%SM = 1
36214.       condensed_mix_ratio%header%el_len = 64
36214.       condensed_mix_ratio%header%assoc = 0
36214.       condensed_mix_ratio%header%ptr_alloc = 0
36214.       condensed_mix_ratio%header%p_or_a = 2
36214.       condensed_mix_ratio%header%a_contig = 1
36214.       condensed_mix_ratio%header%dv_versn = 2
36214.       condensed_mix_ratio%header%dv_smunit = 64
36214.       condensed_mix_ratio%header%d_type = 0
36214.       condensed_mix_ratio%header%n_params = 0
36214.       condensed_mix_ratio%header%pad_codim = 0
36214.       condensed_mix_ratio%header%n_codim = 0
36214.       condensed_mix_ratio%header%pad_dim = 0
36214.       condensed_mix_ratio%header%n_dim = 3
36214.       condensed_mix_ratio%header%d_type_idx = 13
36214.       condensed_mix_ratio%header%typ_code = 134481411
36214.       condensed_mix_ratio%header%orig_base = 0
36214.       condensed_mix_ratio%header%orig_size = 0
36214.       condensed_mix_ratio%dim_1%LB = 1
36214.       condensed_mix_ratio%dim_1%EX = 0
36214.       condensed_mix_ratio%dim_1%SM = 1
36214.       condensed_mix_ratio%dim_2%LB = 1
36214.       condensed_mix_ratio%dim_2%EX = 0
36214.       condensed_mix_ratio%dim_2%SM = 1
36214.       condensed_mix_ratio%dim_3%LB = 1
36214.       condensed_mix_ratio%dim_3%EX = 0
36214.       condensed_mix_ratio%dim_3%SM = 1
35848.       t$10396 = lwdat%dim%nd_cloud_parameter
36295.       t$10525 = _zla( 0, lwdat%dim%nd_cloud_parameter )
35848.       t$10526 = _zla( 0, lwdat%dim%nd_cloud_parameter )
35848.       t$10527 = 4 * _zla( 0, lwdat%dim%nd_cloud_parameter )
35848.       t$10528 = _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4
36295.       t$10529 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16
36295.       t$10531 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32
35848.       t$10382 = lwdat%dim%nd_species
36038.       t$10532 = _zla( 0, lwdat%dim%nd_species )
36038.       t$10533 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32
36038.       t$10535 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species )
35848.       t$10536 = _zla( 0, lwdat%dim%nd_band )
36166.       t$10537 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species )
36166.       t$10539 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species ) + 8 * _zla( 0, lwdat%dim%nd_band )
35848.       t$10540 = _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term )
36172.       t$10541 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species ) + 8 * _zla( 0, lwdat%dim%nd_band )
36172.       t$10543 = _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species ) + 8 * _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8
36169.       t$10544 = 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 )
36135.       t$10546 = 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 )
36309.       d_mass%header%el_len = 64
36309.       d_mass%header%assoc = 0
36309.       d_mass%header%ptr_alloc = 0
36309.       d_mass%header%p_or_a = 2
36309.       d_mass%header%a_contig = 1
36309.       d_mass%header%dv_versn = 2
36309.       d_mass%header%dv_smunit = 64
36309.       d_mass%header%d_type = 0
36309.       d_mass%header%n_params = 0
36309.       d_mass%header%pad_codim = 0
36309.       d_mass%header%n_codim = 0
36309.       d_mass%header%pad_dim = 0
36309.       d_mass%header%n_dim = 2
36309.       d_mass%header%d_type_idx = 13
36309.       d_mass%header%typ_code = 134481411
36309.       d_mass%header%orig_base = 0
36309.       d_mass%header%orig_size = 0
36309.       d_mass%dim_1%LB = 1
36309.       d_mass%dim_1%EX = 0
36309.       d_mass%dim_1%SM = 1
36309.       d_mass%dim_2%LB = 1
36309.       d_mass%dim_2%EX = 0
36309.       d_mass%dim_2%SM = 1
36317.       flux_direct%header%el_len = 64
36317.       flux_direct%header%assoc = 0
36317.       flux_direct%header%ptr_alloc = 0
36317.       flux_direct%header%p_or_a = 2
36317.       flux_direct%header%a_contig = 1
36317.       flux_direct%header%dv_versn = 2
36317.       flux_direct%header%dv_smunit = 64
36317.       flux_direct%header%d_type = 0
36317.       flux_direct%header%n_params = 0
36317.       flux_direct%header%pad_codim = 0
36317.       flux_direct%header%n_codim = 0
36317.       flux_direct%header%pad_dim = 0
36317.       flux_direct%header%n_dim = 3
36317.       flux_direct%header%d_type_idx = 13
36317.       flux_direct%header%typ_code = 134481411
36317.       flux_direct%header%orig_base = 0
36317.       flux_direct%header%orig_size = 0
36317.       flux_direct%dim_1%LB = 1
36317.       flux_direct%dim_1%EX = 0
36317.       flux_direct%dim_1%SM = 1
36317.       flux_direct%dim_2%LB = 1
36317.       flux_direct%dim_2%EX = 0
36317.       flux_direct%dim_2%SM = 1
36317.       flux_direct%dim_3%LB = 1
36317.       flux_direct%dim_3%EX = 0
36317.       flux_direct%dim_3%SM = 1
36311.       flux_direct_clear%header%el_len = 64
36311.       flux_direct_clear%header%assoc = 0
36311.       flux_direct_clear%header%ptr_alloc = 0
36311.       flux_direct_clear%header%p_or_a = 2
36311.       flux_direct_clear%header%a_contig = 1
36311.       flux_direct_clear%header%dv_versn = 2
36311.       flux_direct_clear%header%dv_smunit = 64
36311.       flux_direct_clear%header%d_type = 0
36311.       flux_direct_clear%header%n_params = 0
36311.       flux_direct_clear%header%pad_codim = 0
36311.       flux_direct_clear%header%n_codim = 0
36311.       flux_direct_clear%header%pad_dim = 0
36311.       flux_direct_clear%header%n_dim = 3
36311.       flux_direct_clear%header%d_type_idx = 13
36311.       flux_direct_clear%header%typ_code = 134481411
36311.       flux_direct_clear%header%orig_base = 0
36311.       flux_direct_clear%header%orig_size = 0
36311.       flux_direct_clear%dim_1%LB = 1
36311.       flux_direct_clear%dim_1%EX = 0
36311.       flux_direct_clear%dim_1%SM = 1
36311.       flux_direct_clear%dim_2%LB = 1
36311.       flux_direct_clear%dim_2%EX = 0
36311.       flux_direct_clear%dim_2%SM = 1
36311.       flux_direct_clear%dim_3%LB = 1
36311.       flux_direct_clear%dim_3%EX = 0
36311.       flux_direct_clear%dim_3%SM = 1
36319.       flux_down%header%el_len = 64
36319.       flux_down%header%assoc = 0
36319.       flux_down%header%ptr_alloc = 0
36319.       flux_down%header%p_or_a = 2
36319.       flux_down%header%a_contig = 1
36319.       flux_down%header%dv_versn = 2
36319.       flux_down%header%dv_smunit = 64
36319.       flux_down%header%d_type = 0
36319.       flux_down%header%n_params = 0
36319.       flux_down%header%pad_codim = 0
36319.       flux_down%header%n_codim = 0
36319.       flux_down%header%pad_dim = 0
36319.       flux_down%header%n_dim = 3
36319.       flux_down%header%d_type_idx = 13
36319.       flux_down%header%typ_code = 134481411
36319.       flux_down%header%orig_base = 0
36319.       flux_down%header%orig_size = 0
36319.       flux_down%dim_1%LB = 1
36319.       flux_down%dim_1%EX = 0
36319.       flux_down%dim_1%SM = 1
36319.       flux_down%dim_2%LB = 1
36319.       flux_down%dim_2%EX = 0
36319.       flux_down%dim_2%SM = 1
36319.       flux_down%dim_3%LB = 1
36319.       flux_down%dim_3%EX = 0
36319.       flux_down%dim_3%SM = 1
36315.       flux_down_clear%header%el_len = 64
36315.       flux_down_clear%header%assoc = 0
36315.       flux_down_clear%header%ptr_alloc = 0
36315.       flux_down_clear%header%p_or_a = 2
36315.       flux_down_clear%header%a_contig = 1
36315.       flux_down_clear%header%dv_versn = 2
36315.       flux_down_clear%header%dv_smunit = 64
36315.       flux_down_clear%header%d_type = 0
36315.       flux_down_clear%header%n_params = 0
36315.       flux_down_clear%header%pad_codim = 0
36315.       flux_down_clear%header%n_codim = 0
36315.       flux_down_clear%header%pad_dim = 0
36315.       flux_down_clear%header%n_dim = 3
36315.       flux_down_clear%header%d_type_idx = 13
36315.       flux_down_clear%header%typ_code = 134481411
36315.       flux_down_clear%header%orig_base = 0
36315.       flux_down_clear%header%orig_size = 0
36315.       flux_down_clear%dim_1%LB = 1
36315.       flux_down_clear%dim_1%EX = 0
36315.       flux_down_clear%dim_1%SM = 1
36315.       flux_down_clear%dim_2%LB = 1
36315.       flux_down_clear%dim_2%EX = 0
36315.       flux_down_clear%dim_2%SM = 1
36315.       flux_down_clear%dim_3%LB = 1
36315.       flux_down_clear%dim_3%EX = 0
36315.       flux_down_clear%dim_3%SM = 1
36323.       flux_net%header%el_len = 64
36323.       flux_net%header%assoc = 0
36323.       flux_net%header%ptr_alloc = 0
36323.       flux_net%header%p_or_a = 2
36323.       flux_net%header%a_contig = 1
36323.       flux_net%header%dv_versn = 2
36323.       flux_net%header%dv_smunit = 64
36323.       flux_net%header%d_type = 0
36323.       flux_net%header%n_params = 0
36323.       flux_net%header%pad_codim = 0
36323.       flux_net%header%n_codim = 0
36323.       flux_net%header%pad_dim = 0
36323.       flux_net%header%n_dim = 3
36323.       flux_net%header%d_type_idx = 13
36323.       flux_net%header%typ_code = 134481411
36323.       flux_net%header%orig_base = 0
36323.       flux_net%header%orig_size = 0
36323.       flux_net%dim_1%LB = 1
36323.       flux_net%dim_1%EX = 0
36323.       flux_net%dim_1%SM = 1
36323.       flux_net%dim_2%LB = 1
36323.       flux_net%dim_2%EX = 0
36323.       flux_net%dim_2%SM = 1
36323.       flux_net%dim_3%LB = 1
36323.       flux_net%dim_3%EX = 0
36323.       flux_net%dim_3%SM = 1
36313.       flux_net_clear%header%el_len = 64
36313.       flux_net_clear%header%assoc = 0
36313.       flux_net_clear%header%ptr_alloc = 0
36313.       flux_net_clear%header%p_or_a = 2
36313.       flux_net_clear%header%a_contig = 1
36313.       flux_net_clear%header%dv_versn = 2
36313.       flux_net_clear%header%dv_smunit = 64
36313.       flux_net_clear%header%d_type = 0
36313.       flux_net_clear%header%n_params = 0
36313.       flux_net_clear%header%pad_codim = 0
36313.       flux_net_clear%header%n_codim = 0
36313.       flux_net_clear%header%pad_dim = 0
36313.       flux_net_clear%header%n_dim = 3
36313.       flux_net_clear%header%d_type_idx = 13
36313.       flux_net_clear%header%typ_code = 134481411
36313.       flux_net_clear%header%orig_base = 0
36313.       flux_net_clear%header%orig_size = 0
36313.       flux_net_clear%dim_1%LB = 1
36313.       flux_net_clear%dim_1%EX = 0
36313.       flux_net_clear%dim_1%SM = 1
36313.       flux_net_clear%dim_2%LB = 1
36313.       flux_net_clear%dim_2%EX = 0
36313.       flux_net_clear%dim_2%SM = 1
36313.       flux_net_clear%dim_3%LB = 1
36313.       flux_net_clear%dim_3%EX = 0
36313.       flux_net_clear%dim_3%SM = 1
36321.       flux_up%header%el_len = 64
36321.       flux_up%header%assoc = 0
36321.       flux_up%header%ptr_alloc = 0
36321.       flux_up%header%p_or_a = 2
36321.       flux_up%header%a_contig = 1
36321.       flux_up%header%dv_versn = 2
36321.       flux_up%header%dv_smunit = 64
36321.       flux_up%header%d_type = 0
36321.       flux_up%header%n_params = 0
36321.       flux_up%header%pad_codim = 0
36321.       flux_up%header%n_codim = 0
36321.       flux_up%header%pad_dim = 0
36321.       flux_up%header%n_dim = 3
36321.       flux_up%header%d_type_idx = 13
36321.       flux_up%header%typ_code = 134481411
36321.       flux_up%header%orig_base = 0
36321.       flux_up%header%orig_size = 0
36321.       flux_up%dim_1%LB = 1
36321.       flux_up%dim_1%EX = 0
36321.       flux_up%dim_1%SM = 1
36321.       flux_up%dim_2%LB = 1
36321.       flux_up%dim_2%EX = 0
36321.       flux_up%dim_2%SM = 1
36321.       flux_up%dim_3%LB = 1
36321.       flux_up%dim_3%EX = 0
36321.       flux_up%dim_3%SM = 1
36288.       flux_up_clear%header%el_len = 64
36288.       flux_up_clear%header%assoc = 0
36288.       flux_up_clear%header%ptr_alloc = 0
36288.       flux_up_clear%header%p_or_a = 2
36288.       flux_up_clear%header%a_contig = 1
36288.       flux_up_clear%header%dv_versn = 2
36288.       flux_up_clear%header%dv_smunit = 64
36288.       flux_up_clear%header%d_type = 0
36288.       flux_up_clear%header%n_params = 0
36288.       flux_up_clear%header%pad_codim = 0
36288.       flux_up_clear%header%n_codim = 0
36288.       flux_up_clear%header%pad_dim = 0
36288.       flux_up_clear%header%n_dim = 3
36288.       flux_up_clear%header%d_type_idx = 13
36288.       flux_up_clear%header%typ_code = 134481411
36288.       flux_up_clear%header%orig_base = 0
36288.       flux_up_clear%header%orig_size = 0
36288.       flux_up_clear%dim_1%LB = 1
36288.       flux_up_clear%dim_1%EX = 0
36288.       flux_up_clear%dim_1%SM = 1
36288.       flux_up_clear%dim_2%LB = 1
36288.       flux_up_clear%dim_2%EX = 0
36288.       flux_up_clear%dim_2%SM = 1
36288.       flux_up_clear%dim_3%LB = 1
36288.       flux_up_clear%dim_3%EX = 0
36288.       flux_up_clear%dim_3%SM = 1
36242.       frac_cloud%header%el_len = 64
36242.       frac_cloud%header%assoc = 0
36242.       frac_cloud%header%ptr_alloc = 0
36242.       frac_cloud%header%p_or_a = 2
36242.       frac_cloud%header%a_contig = 1
36242.       frac_cloud%header%dv_versn = 2
36242.       frac_cloud%header%dv_smunit = 64
36242.       frac_cloud%header%d_type = 0
36242.       frac_cloud%header%n_params = 0
36242.       frac_cloud%header%pad_codim = 0
36242.       frac_cloud%header%n_codim = 0
36242.       frac_cloud%header%pad_dim = 0
36242.       frac_cloud%header%n_dim = 3
36242.       frac_cloud%header%d_type_idx = 13
36242.       frac_cloud%header%typ_code = 134481411
36242.       frac_cloud%header%orig_base = 0
36242.       frac_cloud%header%orig_size = 0
36242.       frac_cloud%dim_1%LB = 1
36242.       frac_cloud%dim_1%EX = 0
36242.       frac_cloud%dim_1%SM = 1
36242.       frac_cloud%dim_2%LB = 1
36242.       frac_cloud%dim_2%EX = 0
36242.       frac_cloud%dim_2%SM = 1
36242.       frac_cloud%dim_3%LB = 1
36242.       frac_cloud%dim_3%EX = 0
36242.       frac_cloud%dim_3%SM = 1
36169.       gas_mix_ratio%header%el_len = 64
36169.       gas_mix_ratio%header%assoc = 0
36169.       gas_mix_ratio%header%ptr_alloc = 0
36169.       gas_mix_ratio%header%p_or_a = 2
36169.       gas_mix_ratio%header%a_contig = 1
36169.       gas_mix_ratio%header%dv_versn = 2
36169.       gas_mix_ratio%header%dv_smunit = 64
36169.       gas_mix_ratio%header%d_type = 0
36169.       gas_mix_ratio%header%n_params = 0
36169.       gas_mix_ratio%header%pad_codim = 0
36169.       gas_mix_ratio%header%n_codim = 0
36169.       gas_mix_ratio%header%pad_dim = 0
36169.       gas_mix_ratio%header%n_dim = 3
36169.       gas_mix_ratio%header%d_type_idx = 13
36169.       gas_mix_ratio%header%typ_code = 134481411
36169.       gas_mix_ratio%header%orig_base = 0
36169.       gas_mix_ratio%header%orig_size = 0
36169.       gas_mix_ratio%dim_1%LB = 1
36169.       gas_mix_ratio%dim_1%EX = 0
36169.       gas_mix_ratio%dim_1%SM = 1
36169.       gas_mix_ratio%dim_2%LB = 1
36169.       gas_mix_ratio%dim_2%EX = 0
36169.       gas_mix_ratio%dim_2%SM = 1
36169.       gas_mix_ratio%dim_3%LB = 1
36169.       gas_mix_ratio%dim_3%EX = 0
36169.       gas_mix_ratio%dim_3%SM = 1
36188.       t$10547 = 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 )
36188.       t$10549 = 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 )
36194.       t$10550 = 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 )
36194.       t$10552 = _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 )
36191.       t$10553 = 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36191.       t$10555 = 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36236.       t$10557 = 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 12 * _zla( 0, lwdat%dim%nd_band )
36085.       t$10559 = 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * _zla( 0, lwdat%dim%nd_band )
36031.       t$10561 = 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * _zla( 0, lwdat%dim%nd_band ) + 4 * _zla( 0, lwdat%dim%nd_species )
36107.       t$10563 = 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band )
36200.       t$10565 = 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 4 * _zla( 0, lwdat%dim%nd_aerosol_species )
36129.       t$10567 = 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band )
36250.       pres%header%el_len = 64
36250.       pres%header%assoc = 0
36250.       pres%header%ptr_alloc = 0
36250.       pres%header%p_or_a = 2
36250.       pres%header%a_contig = 1
36250.       pres%header%dv_versn = 2
36250.       pres%header%dv_smunit = 64
36250.       pres%header%d_type = 0
36250.       pres%header%n_params = 0
36250.       pres%header%pad_codim = 0
36250.       pres%header%n_codim = 0
36250.       pres%header%pad_dim = 0
36250.       pres%header%n_dim = 2
36250.       pres%header%d_type_idx = 13
36250.       pres%header%typ_code = 134481411
36250.       pres%header%orig_base = 0
36250.       pres%header%orig_size = 0
36250.       pres%dim_1%LB = 1
36250.       pres%dim_1%EX = 0
36250.       pres%dim_1%SM = 1
36250.       pres%dim_2%LB = 1
36250.       pres%dim_2%EX = 0
36250.       pres%dim_2%SM = 1
36203.       rho_alb%header%el_len = 64
36203.       rho_alb%header%assoc = 0
36203.       rho_alb%header%ptr_alloc = 0
36203.       rho_alb%header%p_or_a = 2
36203.       rho_alb%header%a_contig = 1
36203.       rho_alb%header%dv_versn = 2
36203.       rho_alb%header%dv_smunit = 64
36203.       rho_alb%header%d_type = 0
36203.       rho_alb%header%n_params = 0
36203.       rho_alb%header%pad_codim = 0
36203.       rho_alb%header%n_codim = 0
36203.       rho_alb%header%pad_dim = 0
36203.       rho_alb%header%n_dim = 3
36203.       rho_alb%header%d_type_idx = 13
36203.       rho_alb%header%typ_code = 134481411
36203.       rho_alb%header%orig_base = 0
36203.       rho_alb%header%orig_size = 0
36203.       rho_alb%dim_1%LB = 1
36203.       rho_alb%dim_1%EX = 0
36203.       rho_alb%dim_1%SM = 1
36203.       rho_alb%dim_2%LB = 1
36203.       rho_alb%dim_2%EX = 0
36203.       rho_alb%dim_2%SM = 1
36203.       rho_alb%dim_3%LB = 1
36203.       rho_alb%dim_3%EX = 0
36203.       rho_alb%dim_3%SM = 1
35848.       t$10568 = 2 * _zla( 0, lwdat%dim%nd_band )
36344.       t$10569 = 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 )
36228.       t$10571 = 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 )
36131.       solar_irrad%header%el_len = 64
36131.       solar_irrad%header%assoc = 0
36131.       solar_irrad%header%ptr_alloc = 0
36131.       solar_irrad%header%p_or_a = 2
36131.       solar_irrad%header%a_contig = 1
36131.       solar_irrad%header%dv_versn = 2
36131.       solar_irrad%header%dv_smunit = 64
36131.       solar_irrad%header%d_type = 0
36131.       solar_irrad%header%n_params = 0
36131.       solar_irrad%header%pad_codim = 0
36131.       solar_irrad%header%n_codim = 0
36131.       solar_irrad%header%pad_dim = 0
36131.       solar_irrad%header%n_dim = 1
36131.       solar_irrad%header%d_type_idx = 13
36131.       solar_irrad%header%typ_code = 134481411
36131.       solar_irrad%header%orig_base = 0
36131.       solar_irrad%header%orig_size = 0
36131.       solar_irrad%dim_1%LB = 1
36131.       solar_irrad%dim_1%EX = 0
36131.       solar_irrad%dim_1%SM = 1
36257.       temp%header%el_len = 64
36257.       temp%header%assoc = 0
36257.       temp%header%ptr_alloc = 0
36257.       temp%header%p_or_a = 2
36257.       temp%header%a_contig = 1
36257.       temp%header%dv_versn = 2
36257.       temp%header%dv_smunit = 64
36257.       temp%header%d_type = 0
36257.       temp%header%n_params = 0
36257.       temp%header%pad_codim = 0
36257.       temp%header%n_codim = 0
36257.       temp%header%pad_dim = 0
36257.       temp%header%n_dim = 2
36257.       temp%header%d_type_idx = 13
36257.       temp%header%typ_code = 134481411
36257.       temp%header%orig_base = 0
36257.       temp%header%orig_size = 0
36257.       temp%dim_1%LB = 1
36257.       temp%dim_1%EX = 0
36257.       temp%dim_1%SM = 1
36257.       temp%dim_2%LB = 1
36257.       temp%dim_2%EX = 0
36257.       temp%dim_2%SM = 1
36133.       t_ground%header%el_len = 64
36133.       t_ground%header%assoc = 0
36133.       t_ground%header%ptr_alloc = 0
36133.       t_ground%header%p_or_a = 2
36133.       t_ground%header%a_contig = 1
36133.       t_ground%header%dv_versn = 2
36133.       t_ground%header%dv_smunit = 64
36133.       t_ground%header%d_type = 0
36133.       t_ground%header%n_params = 0
36133.       t_ground%header%pad_codim = 0
36133.       t_ground%header%n_codim = 0
36133.       t_ground%header%pad_dim = 0
36133.       t_ground%header%n_dim = 1
36133.       t_ground%header%d_type_idx = 13
36133.       t_ground%header%typ_code = 134481411
36133.       t_ground%header%orig_base = 0
36133.       t_ground%header%orig_size = 0
36133.       t_ground%dim_1%LB = 1
36133.       t_ground%dim_1%EX = 0
36133.       t_ground%dim_1%SM = 1
36344.       t_level%header%el_len = 64
36344.       t_level%header%assoc = 0
36344.       t_level%header%ptr_alloc = 0
36344.       t_level%header%p_or_a = 2
36344.       t_level%header%a_contig = 1
36344.       t_level%header%dv_versn = 2
36344.       t_level%header%dv_smunit = 64
36344.       t_level%header%d_type = 0
36344.       t_level%header%n_params = 0
36344.       t_level%header%pad_codim = 0
36344.       t_level%header%n_codim = 0
36344.       t_level%header%pad_dim = 0
36344.       t_level%header%n_dim = 2
36344.       t_level%header%d_type_idx = 13
36344.       t_level%header%typ_code = 134481411
36344.       t_level%header%orig_base = 0
36344.       t_level%header%orig_size = 0
36344.       t_level%dim_1%LB = 1
36344.       t_level%dim_1%EX = 0
36344.       t_level%dim_1%SM = 1
36344.       t_level%dim_2%LB = 1
36344.       t_level%dim_2%EX = 0
36344.       t_level%dim_2%SM = 1
36341.       t$10572 = 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 )
36341.       t$10574 = 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 )
36006.       t$10575 = 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36285.       t$10577 = 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36230.       w_cloud%header%el_len = 64
36230.       w_cloud%header%assoc = 0
36230.       w_cloud%header%ptr_alloc = 0
36230.       w_cloud%header%p_or_a = 2
36230.       w_cloud%header%a_contig = 1
36230.       w_cloud%header%dv_versn = 2
36230.       w_cloud%header%dv_smunit = 64
36230.       w_cloud%header%d_type = 0
36230.       w_cloud%header%n_params = 0
36230.       w_cloud%header%pad_codim = 0
36230.       w_cloud%header%n_codim = 0
36230.       w_cloud%header%pad_dim = 0
36230.       w_cloud%header%n_dim = 2
36230.       w_cloud%header%d_type_idx = 13
36230.       w_cloud%header%typ_code = 134481411
36230.       w_cloud%header%orig_base = 0
36230.       w_cloud%header%orig_size = 0
36230.       w_cloud%dim_1%LB = 1
36230.       w_cloud%dim_1%EX = 0
36230.       w_cloud%dim_1%SM = 1
36230.       w_cloud%dim_2%LB = 1
36230.       w_cloud%dim_2%EX = 0
36230.       w_cloud%dim_2%SM = 1
36006.       zen_0%header%el_len = 64
36006.       zen_0%header%assoc = 0
36006.       zen_0%header%ptr_alloc = 0
36006.       zen_0%header%p_or_a = 2
36006.       zen_0%header%a_contig = 1
36006.       zen_0%header%dv_versn = 2
36006.       zen_0%header%dv_smunit = 64
36006.       zen_0%header%d_type = 0
36006.       zen_0%header%n_params = 0
36006.       zen_0%header%pad_codim = 0
36006.       zen_0%header%n_codim = 0
36006.       zen_0%header%pad_dim = 0
36006.       zen_0%header%n_dim = 1
36006.       zen_0%header%d_type_idx = 13
36006.       zen_0%header%typ_code = 134481411
36006.       zen_0%header%orig_base = 0
36006.       zen_0%header%orig_size = 0
36006.       zen_0%dim_1%LB = 1
36006.       zen_0%dim_1%EX = 0
36006.       zen_0%dim_1%SM = 1
35848.       t$10508 = int( _alloc( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) ), 8 )
36211.       t$10509 = t$10508
36217.       t$10516 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8
36207.       t$10520 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8
36214.       t$10523 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 8 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species )
36295.       t$10530 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16
36038.       t$10534 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32
36166.       t$10538 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species )
36172.       t$10542 = t$10508 + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 16 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 32 + 8 * _zla( 0, lwdat%dim%nd_species ) + 8 * _zla( 0, lwdat%dim%nd_band )
36169.       t$10545 = t$10508 + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 )
36188.       t$10548 = t$10508 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 )
36194.       t$10551 = t$10508 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 )
36191.       t$10554 = t$10508 + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36236.       t$10556 = t$10508 + 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36085.       t$10558 = t$10508 + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 12 * _zla( 0, lwdat%dim%nd_band )
36031.       t$10560 = t$10508 + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * _zla( 0, lwdat%dim%nd_band )
36107.       t$10562 = t$10508 + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 16 * _zla( 0, lwdat%dim%nd_band ) + 4 * _zla( 0, lwdat%dim%nd_species )
36200.       t$10564 = t$10508 + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band )
36203.       t$10566 = t$10508 + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 4 * _zla( 0, lwdat%dim%nd_aerosol_species )
36344.       t$10570 = t$10508 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 )
36341.       t$10573 = t$10508 + 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 )
36006.       t$10576 = t$10508 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 16 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_aerosol_species ) + 8 * ( ( _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) * 8 + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( ( 8 * _zla( 0, lwdat%dim%nd_band ) + 8 * ( _zla( 0, lwdat%dim%nd_aerosol_species ) + _zla( 0, lwdat%dim%nd_band ) + _zla( 0, lwdat%dim%nd_species ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_cloud_parameter ) * 4 + _zla( 0, lwdat%dim%nd_band ) * _zla( 0, lwdat%dim%nd_phase_term ) + _zla( 0, lwdat%dim%nd_aerosol_species ) * _zla( 0, lwdat%dim%nd_band ) * 2 ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 ) + 4 * _zla( 0, lwdat%dim%nd_species ) + 20 * _zla( 0, lwdat%dim%nd_band ) + 7 ) / 8 ) + 7 ) / 8 ) + 7 ) / 8 )
36362.       $F_A33 = ncols
36362.       if ( ncols > 0 ) then
36362.          $I_L36362_495 = 0
36362. !dir$ ivdep
36362.          do
36362.             lw_toa_up_clr(1 + $I_L36362_495) = 0.0
36362.             $I_L36362_495 = 1 + $I_L36362_495
36362.             if ( $I_L36362_495 >= $F_A33 ) exit
36362.          enddo
36362.       endif
36363.       $F_A34 = ncols
36363.       if ( ncols > 0 ) then
36363.          $I_L36363_497 = 0
36363. !dir$ ivdep
36363.          do
36363.             lw_toa_up(1 + $I_L36363_497) = 0.0
36363.             $I_L36363_497 = 1 + $I_L36363_497
36363.             if ( $I_L36363_497 >= $F_A34 ) exit
36363.          enddo
36363.       endif
36366.       $F_A35 = ncols
36366.       if ( ncols > 0 ) then
36366.          $I_L36366_499 = 0
36366. !dir$ ivdep
36366.          do
36366.             lw_sfc_net_clr(1 + $I_L36366_499) = 0.0
36366.             $I_L36366_499 = 1 + $I_L36366_499
36366.             if ( $I_L36366_499 >= $F_A35 ) exit
36366.          enddo
36366.       endif
36367.       $F_A36 = ncols
36367.       if ( ncols > 0 ) then
36367.          $I_L36367_501 = 0
36367. !dir$ ivdep
36367.          do
36367.             lw_sfc_net(1 + $I_L36367_501) = 0.0
36367.             $I_L36367_501 = 1 + $I_L36367_501
36367.             if ( $I_L36367_501 >= $F_A36 ) exit
36367.          enddo
36367.       endif
36368.       $F_A37 = ncols
36368.       if ( ncols > 0 ) then
36368.          $I_L36368_503 = 0
36368. !dir$ ivdep
36368.          do
36368.             lw_sfc_down_clr(1 + $I_L36368_503) = 0.0
36368.             $I_L36368_503 = 1 + $I_L36368_503
36368.             if ( $I_L36368_503 >= $F_A37 ) exit
36368.          enddo
36368.       endif
36369.       $F_A38 = ncols
36369.       if ( ncols > 0 ) then
36369.          $I_L36369_505 = 0
36369. !dir$ ivdep
36369.          do
36369.             lw_sfc_down(1 + $I_L36369_505) = 0.0
36369.             $I_L36369_505 = 1 + $I_L36369_505
36369.             if ( $I_L36369_505 >= $F_A38 ) exit
36369.          enddo
36369.       endif
36364.       $F_A39 = kmax
36364.       $F_A40 = ncols
36364.       if ( and( -$F_A40, -$F_A39 ) < 0 ) then
36364.          $I_L36364_656 = 0
36364.          do
36364.             $I_L36364_507 = 0
36364. !dir$ ivdep
36364.             do
36364.                lw_cool_clr(1 + $I_L36364_507, 1 + $I_L36364_656) = 0.0
36364.                $I_L36364_507 = 1 + $I_L36364_507
36364.                if ( $I_L36364_507 >= $F_A40 ) exit
36364.             enddo
36364.             $I_L36364_656 = 1 + $I_L36364_656
36364.             if ( $I_L36364_656 >= $F_A39 ) exit
36364.          enddo
36364.       endif
36365.       $F_A41 = kmax
36365.       $F_A42 = ncols
36365.       if ( and( -$F_A42, -$F_A41 ) < 0 ) then
36365.          $I_L36365_658 = 0
36365.          do
36365.             $I_L36365_509 = 0
36365. !dir$ ivdep
36365.             do
36365.                lw_cool(1 + $I_L36365_509, 1 + $I_L36365_658) = 0.0
36365.                $I_L36365_509 = 1 + $I_L36365_509
36365.                if ( $I_L36365_509 >= $F_A42 ) exit
36365.             enddo
36365.             $I_L36365_658 = 1 + $I_L36365_658
36365.             if ( $I_L36365_658 >= $F_A41 ) exit
36365.          enddo
36365.       endif
36371.       ierr = 0
36379.       nd_profile = ncols
36380.       nd_layer = kmax
36382.       nd_2sg_profile = ncols
36383.       nd_flux_profile = ncols
36389.       pres%header%a_contig = 1
36389.       pres%dim_1%LB = 1
36389.       pres%dim_1%EX = ( max( 0, ncols ) )
36389.       pres%dim_1%SM = 1
36389.       pres%dim_2%LB = 1
36389.       pres%dim_2%EX = ( max( 0, kmax ) )
36389.       pres%dim_2%SM = ( max( 0, ncols ) )
36389.       $_allo_P0(0) = 0x1000000000001L
36389.       $_allo_P0(1) = loc( pres )
36389.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
36390.       $F_A43 = kmax
36390.       $F_A44 = ncols
36390.       if ( and( -$F_A44, -$F_A43 ) < 0 ) then
36390.          $I_L36390_660 = 0
36390.          do
36390.             $I_L36390_511 = 0
36390. !dir$ ivdep
36390.             do
36390.                (pres%base_addr)(1 + $I_L36390_511, 1 + $I_L36390_660, 0) = 0.0
36390.                $I_L36390_511 = 1 + $I_L36390_511
36390.                if ( $I_L36390_511 >= $F_A44 ) exit
36390.             enddo
36390.             $I_L36390_660 = 1 + $I_L36390_660
36390.             if ( $I_L36390_660 >= $F_A43 ) exit
36390.          enddo
36390.       endif
36391.       temp%header%a_contig = 1
36391.       temp%dim_1%LB = 1
36391.       temp%dim_1%EX = ( max( 0, ncols ) )
36391.       temp%dim_1%SM = 1
36391.       temp%dim_2%LB = 1
36391.       temp%dim_2%EX = ( max( 0, kmax ) )
36391.       temp%dim_2%SM = ( max( 0, ncols ) )
36391.       $_allo_P1(0) = 0x1000000000001L
36391.       $_allo_P1(1) = loc( temp )
36391.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
36392.       $F_A45 = kmax
36392.       $F_A46 = ncols
36392.       if ( and( -$F_A46, -$F_A45 ) < 0 ) then
36392.          $I_L36392_662 = 0
36392.          do
36392.             $I_L36392_513 = 0
36392. !dir$ ivdep
36392.             do
36392.                (temp%base_addr)(1 + $I_L36392_513, 1 + $I_L36392_662, 0) = 0.0
36392.                $I_L36392_513 = 1 + $I_L36392_513
36392.                if ( $I_L36392_513 >= $F_A46 ) exit
36392.             enddo
36392.             $I_L36392_662 = 1 + $I_L36392_662
36392.             if ( $I_L36392_662 >= $F_A45 ) exit
36392.          enddo
36392.       endif
36393.       d_mass%header%a_contig = 1
36393.       d_mass%dim_1%LB = 1
36393.       d_mass%dim_1%EX = ( max( 0, ncols ) )
36393.       d_mass%dim_1%SM = 1
36393.       d_mass%dim_2%LB = 1
36393.       d_mass%dim_2%EX = ( max( 0, kmax ) )
36393.       d_mass%dim_2%SM = ( max( 0, ncols ) )
36393.       $_allo_P2(0) = 0x1000000000001L
36393.       $_allo_P2(1) = loc( d_mass )
36393.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
36394.       $F_A47 = kmax
36394.       $F_A48 = ncols
36394.       if ( and( -$F_A48, -$F_A47 ) < 0 ) then
36394.          $I_L36394_664 = 0
36394.          do
36394.             $I_L36394_515 = 0
36394. !dir$ ivdep
36394.             do
36394.                (d_mass%base_addr)(1 + $I_L36394_515, 1 + $I_L36394_664, 0) = 0.0
36394.                $I_L36394_515 = 1 + $I_L36394_515
36394.                if ( $I_L36394_515 >= $F_A48 ) exit
36394.             enddo
36394.             $I_L36394_664 = 1 + $I_L36394_664
36394.             if ( $I_L36394_664 >= $F_A47 ) exit
36394.          enddo
36394.       endif
36395.       t_ground%header%a_contig = 1
36395.       t_ground%dim_1%LB = 1
36395.       t_ground%dim_1%EX = ( max( 0, ncols ) )
36395.       t_ground%dim_1%SM = 1
36395.       $_allo_P3(0) = 0x1000000000001L
36395.       $_allo_P3(1) = loc( t_ground )
36395.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
36396.       $F_A49 = ncols
36396.       if ( ncols > 0 ) then
36396.          $I_L36396_517 = 0
36396. !dir$ ivdep
36396.          do
36396.             (t_ground%base_addr)(1 + $I_L36396_517, 0) = 0.0
36396.             $I_L36396_517 = 1 + $I_L36396_517
36396.             if ( $I_L36396_517 >= $F_A49 ) exit
36396.          enddo
36396.       endif
36397.       t_level%header%a_contig = 1
36397.       t_level%dim_1%LB = 1
36397.       t_level%dim_1%EX = ( max( 0, ncols ) )
36397.       t_level%dim_1%SM = 1
36397.       t_level%dim_2%LB = 0
36397.       t_level%dim_2%EX = ( max( 0, 1 + kmax ) )
36397.       t_level%dim_2%SM = ( max( 0, ncols ) )
36397.       $_allo_P4(0) = 0x1000000000001L
36397.       $_allo_P4(1) = loc( t_level )
36397.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
36398.       $F_A50 = ( 1 + kmax )
36398.       $F_A51 = ncols
36398.       if ( and( -$F_A51, -$F_A50 ) < 0 ) then
36398.          $I_L36398_666 = 0
36398.          do
36398.             $I_L36398_519 = 0
36398. !dir$ ivdep
36398.             do
36398.                (t_level%base_addr)(1 + $I_L36398_519, $I_L36398_666, 0) = 0.0
36398.                $I_L36398_519 = 1 + $I_L36398_519
36398.                if ( $I_L36398_519 >= $F_A51 ) exit
36398.             enddo
36398.             $I_L36398_666 = 1 + $I_L36398_666
36398.             if ( $I_L36398_666 >= $F_A50 ) exit
36398.          enddo
36398.       endif
36399.       zen_0%header%a_contig = 1
36399.       zen_0%dim_1%LB = 1
36399.       zen_0%dim_1%EX = ( max( 0, ncols ) )
36399.       zen_0%dim_1%SM = 1
36399.       $_allo_P5(0) = 0x1000000000001L
36399.       $_allo_P5(1) = loc( zen_0 )
36399.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
36400.       $F_A52 = ncols
36400.       if ( ncols > 0 ) then
36400.          $I_L36400_521 = 0
36400. !dir$ ivdep
36400.          do
36400.             (zen_0%base_addr)(1 + $I_L36400_521, 0) = 0.0
36400.             $I_L36400_521 = 1 + $I_L36400_521
36400.             if ( $I_L36400_521 >= $F_A52 ) exit
36400.          enddo
36400.       endif
36401.       solar_irrad%header%a_contig = 1
36401.       solar_irrad%dim_1%LB = 1
36401.       solar_irrad%dim_1%EX = ( max( 0, ncols ) )
36401.       solar_irrad%dim_1%SM = 1
36401.       $_allo_P6(0) = 0x1000000000001L
36401.       $_allo_P6(1) = loc( solar_irrad )
36401.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
36402.       $F_A53 = ncols
36402.       if ( ncols > 0 ) then
36402.          $I_L36402_523 = 0
36402. !dir$ ivdep
36402.          do
36402.             (solar_irrad%base_addr)(1 + $I_L36402_523, 0) = 0.0
36402.             $I_L36402_523 = 1 + $I_L36402_523
36402.             if ( $I_L36402_523 >= $F_A53 ) exit
36402.          enddo
36402.       endif
36403.       rho_alb%header%a_contig = 1
36403.       rho_alb%dim_1%LB = 1
36403.       rho_alb%dim_1%EX = ( max( 0, ncols ) )
36403.       rho_alb%dim_1%SM = 1
36403.       rho_alb%dim_2%LB = 1
36403.       rho_alb%dim_2%EX = 2
36403.       rho_alb%dim_2%SM = ( max( 0, ncols ) )
36403.       rho_alb%dim_3%LB = 1
36403.       rho_alb%dim_3%EX = ( max( 0, lwdat%dim%nd_band ) )
36403.       rho_alb%dim_3%SM = ( 2 * max( 0, ncols ) )
36403.       $_allo_P7(0) = 0x1000000000001L
36403.       $_allo_P7(1) = loc( rho_alb )
36403.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
36404.       $F_A54 = lwdat%dim%nd_band
36404.       $F_A55 = ncols
36404.       if ( and( -$F_A55, -$F_A54 ) < 0 ) then
36404.          $SC_lwdat_I46 = lwdat%dim%nd_band
36404.          $I_L36404_736 = 0
36404.          do
36404.             $I_L36404_668 = 0
36404.             do
36404.                $I_L36404_525 = 0
36404. !dir$ ivdep
36404.                do
36404.                   (rho_alb%base_addr)(1 + $I_L36404_525, 1 + $I_L36404_668, 1 + $I_L36404_736, 0) = 0.0
36404.                   $I_L36404_525 = 1 + $I_L36404_525
36404.                   if ( $I_L36404_525 >= $F_A55 ) exit
36404.                enddo
36404.                $I_L36404_668 = 1 + $I_L36404_668
36404.                if ( $I_L36404_668 >= 2 ) exit
36404.             enddo
36404.             $I_L36404_736 = 1 + $I_L36404_736
36404.             if ( $I_L36404_736 >= $F_A54 ) exit
36404.          enddo
36404.       endif
36406.       gas_mix_ratio%header%a_contig = 1
36406.       gas_mix_ratio%dim_1%LB = 1
36406.       gas_mix_ratio%dim_1%EX = ( max( 0, ncols ) )
36406.       gas_mix_ratio%dim_1%SM = 1
36406.       gas_mix_ratio%dim_2%LB = 1
36406.       gas_mix_ratio%dim_2%EX = ( max( 0, kmax ) )
36406.       gas_mix_ratio%dim_2%SM = ( max( 0, ncols ) )
36406.       gas_mix_ratio%dim_3%LB = 1
36406.       gas_mix_ratio%dim_3%EX = ( max( 0, lwdat%dim%nd_species ) )
36406.       gas_mix_ratio%dim_3%SM = ( max( 0, ncols ) * max( 0, kmax ) )
36406.       $_allo_P8(0) = 0x1000000000001L
36406.       $_allo_P8(1) = loc( gas_mix_ratio )
36406.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
36407.       $F_A56 = lwdat%dim%nd_species
36407.       $F_A57 = kmax
36407.       $F_A58 = ncols
36407.       if ( and( and( -$F_A57, -$F_A56 ), -$F_A58 ) < 0 ) then
36407.          $SC_lwdat_I47 = lwdat%dim%nd_species
36407.          $I_L36407_738 = 0
36407.          do
36407.             $I_L36407_670 = 0
36407.             do
36407.                $I_L36407_527 = 0
36407. !dir$ ivdep
36407.                do
36407.                   (gas_mix_ratio%base_addr)(1 + $I_L36407_527, 1 + $I_L36407_670, 1 + $I_L36407_738, 0) = 0.0
36407.                   $I_L36407_527 = 1 + $I_L36407_527
36407.                   if ( $I_L36407_527 >= $F_A58 ) exit
36407.                enddo
36407.                $I_L36407_670 = 1 + $I_L36407_670
36407.                if ( $I_L36407_670 >= $F_A57 ) exit
36407.             enddo
36407.             $I_L36407_738 = 1 + $I_L36407_738
36407.             if ( $I_L36407_738 >= $F_A56 ) exit
36407.          enddo
36407.       endif
36408.       aerosol_mix_ratio%header%a_contig = 1
36408.       aerosol_mix_ratio%dim_1%LB = 1
36408.       aerosol_mix_ratio%dim_1%EX = ( max( 0, ncols ) )
36408.       aerosol_mix_ratio%dim_1%SM = 1
36408.       aerosol_mix_ratio%dim_2%LB = 1
36408.       aerosol_mix_ratio%dim_2%EX = ( max( 0, kmax ) )
36408.       aerosol_mix_ratio%dim_2%SM = ( max( 0, ncols ) )
36408.       aerosol_mix_ratio%dim_3%LB = 1
36408.       aerosol_mix_ratio%dim_3%EX = ( max( 0, lwdat%dim%nd_aerosol_species ) )
36408.       aerosol_mix_ratio%dim_3%SM = ( max( 0, ncols ) * max( 0, kmax ) )
36408.       $_allo_P9(0) = 0x1000000000001L
36408.       $_allo_P9(1) = loc( aerosol_mix_ratio )
36408.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
36409.       $F_A59 = lwdat%dim%nd_aerosol_species
36409.       $F_A60 = kmax
36409.       $F_A61 = ncols
36409.       if ( and( and( -$F_A60, -$F_A59 ), -$F_A61 ) < 0 ) then
36409.          $SC_lwdat_I48 = lwdat%dim%nd_aerosol_species
36409.          $I_L36409_740 = 0
36409.          do
36409.             $I_L36409_672 = 0
36409.             do
36409.                $I_L36409_529 = 0
36409. !dir$ ivdep
36409.                do
36409.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36409_529, 1 + $I_L36409_672, 1 + $I_L36409_740, 0) = 0.0
36409.                   $I_L36409_529 = 1 + $I_L36409_529
36409.                   if ( $I_L36409_529 >= $F_A61 ) exit
36409.                enddo
36409.                $I_L36409_672 = 1 + $I_L36409_672
36409.                if ( $I_L36409_672 >= $F_A60 ) exit
36409.             enddo
36409.             $I_L36409_740 = 1 + $I_L36409_740
36409.             if ( $I_L36409_740 >= $F_A59 ) exit
36409.          enddo
36409.       endif
36411.       w_cloud%header%a_contig = 1
36411.       w_cloud%dim_1%LB = 1
36411.       w_cloud%dim_1%EX = ( max( 0, ncols ) )
36411.       w_cloud%dim_1%SM = 1
36411.       w_cloud%dim_2%LB = 1
36411.       w_cloud%dim_2%EX = ( max( 0, kmax ) )
36411.       w_cloud%dim_2%SM = ( max( 0, ncols ) )
36411.       $_allo_P10(0) = 0x1000000000001L
36411.       $_allo_P10(1) = loc( w_cloud )
36411.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
36412.       $F_A62 = kmax
36412.       $F_A63 = ncols
36412.       if ( and( -$F_A63, -$F_A62 ) < 0 ) then
36412.          $I_L36412_674 = 0
36412.          do
36412.             $I_L36412_531 = 0
36412. !dir$ ivdep
36412.             do
36412.                (w_cloud%base_addr)(1 + $I_L36412_531, 1 + $I_L36412_674, 0) = 0.0
36412.                $I_L36412_531 = 1 + $I_L36412_531
36412.                if ( $I_L36412_531 >= $F_A63 ) exit
36412.             enddo
36412.             $I_L36412_674 = 1 + $I_L36412_674
36412.             if ( $I_L36412_674 >= $F_A62 ) exit
36412.          enddo
36412.       endif
36413.       frac_cloud%header%a_contig = 1
36413.       frac_cloud%dim_1%LB = 1
36413.       frac_cloud%dim_1%EX = ( max( 0, ncols ) )
36413.       frac_cloud%dim_1%SM = 1
36413.       frac_cloud%dim_2%LB = 1
36413.       frac_cloud%dim_2%EX = ( max( 0, kmax ) )
36413.       frac_cloud%dim_2%SM = ( max( 0, ncols ) )
36413.       frac_cloud%dim_3%LB = 1
36413.       frac_cloud%dim_3%EX = 4
36413.       frac_cloud%dim_3%SM = ( max( 0, ncols ) * max( 0, kmax ) )
36413.       $_allo_P11(0) = 0x1000000000001L
36413.       $_allo_P11(1) = loc( frac_cloud )
36413.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
36414.       $F_A64 = kmax
36414.       $F_A65 = ncols
36414.       if ( and( -$F_A65, -$F_A64 ) < 0 ) then
36414.          $I_L36414_742 = 0
36414.          do
36414.             $I_L36414_676 = 0
36414.             do
36414.                $I_L36414_533 = 0
36414. !dir$ ivdep
36414.                do
36414.                   (frac_cloud%base_addr)(1 + $I_L36414_533, 1 + $I_L36414_676, 1 + $I_L36414_742, 0) = 0.0
36414.                   $I_L36414_533 = 1 + $I_L36414_533
36414.                   if ( $I_L36414_533 >= $F_A65 ) exit
36414.                enddo
36414.                $I_L36414_676 = 1 + $I_L36414_676
36414.                if ( $I_L36414_676 >= $F_A64 ) exit
36414.             enddo
36414.             $I_L36414_742 = 1 + $I_L36414_742
36414.             if ( $I_L36414_742 >= 4 ) exit
36414.          enddo
36414.       endif
36415.       condensed_mix_ratio%header%a_contig = 1
36415.       condensed_mix_ratio%dim_1%LB = 1
36415.       condensed_mix_ratio%dim_1%EX = ( max( 0, ncols ) )
36415.       condensed_mix_ratio%dim_1%SM = 1
36415.       condensed_mix_ratio%dim_2%LB = 1
36415.       condensed_mix_ratio%dim_2%EX = ( max( 0, kmax ) )
36415.       condensed_mix_ratio%dim_2%SM = ( max( 0, ncols ) )
36415.       condensed_mix_ratio%dim_3%LB = 1
36415.       condensed_mix_ratio%dim_3%EX = 4
36415.       condensed_mix_ratio%dim_3%SM = ( max( 0, ncols ) * max( 0, kmax ) )
36415.       $_allo_P12(0) = 0x1000000000001L
36415.       $_allo_P12(1) = loc( condensed_mix_ratio )
36415.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
36416.       $F_A66 = kmax
36416.       $F_A67 = ncols
36416.       if ( and( -$F_A67, -$F_A66 ) < 0 ) then
36416.          $I_L36416_744 = 0
36416.          do
36416.             $I_L36416_678 = 0
36416.             do
36416.                $I_L36416_535 = 0
36416. !dir$ ivdep
36416.                do
36416.                   (condensed_mix_ratio%base_addr)(1 + $I_L36416_535, 1 + $I_L36416_678, 1 + $I_L36416_744, 0) = 0.0
36416.                   $I_L36416_535 = 1 + $I_L36416_535
36416.                   if ( $I_L36416_535 >= $F_A67 ) exit
36416.                enddo
36416.                $I_L36416_678 = 1 + $I_L36416_678
36416.                if ( $I_L36416_678 >= $F_A66 ) exit
36416.             enddo
36416.             $I_L36416_744 = 1 + $I_L36416_744
36416.             if ( $I_L36416_744 >= 4 ) exit
36416.          enddo
36416.       endif
36417.       condensed_dim_char%header%a_contig = 1
36417.       condensed_dim_char%dim_1%LB = 1
36417.       condensed_dim_char%dim_1%EX = ( max( 0, ncols ) )
36417.       condensed_dim_char%dim_1%SM = 1
36417.       condensed_dim_char%dim_2%LB = 1
36417.       condensed_dim_char%dim_2%EX = ( max( 0, kmax ) )
36417.       condensed_dim_char%dim_2%SM = ( max( 0, ncols ) )
36417.       condensed_dim_char%dim_3%LB = 1
36417.       condensed_dim_char%dim_3%EX = 4
36417.       condensed_dim_char%dim_3%SM = ( max( 0, ncols ) * max( 0, kmax ) )
36417.       $_allo_P13(0) = 0x1000000000001L
36417.       $_allo_P13(1) = loc( condensed_dim_char )
36417.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
36418.       $F_A68 = kmax
36418.       $F_A69 = ncols
36418.       if ( and( -$F_A69, -$F_A68 ) < 0 ) then
36418.          $I_L36418_746 = 0
36418.          do
36418.             $I_L36418_680 = 0
36418.             do
36418.                $I_L36418_537 = 0
36418. !dir$ ivdep
36418.                do
36418.                   (condensed_dim_char%base_addr)(1 + $I_L36418_537, 1 + $I_L36418_680, 1 + $I_L36418_746, 0) = 0.0
36418.                   $I_L36418_537 = 1 + $I_L36418_537
36418.                   if ( $I_L36418_537 >= $F_A69 ) exit
36418.                enddo
36418.                $I_L36418_680 = 1 + $I_L36418_680
36418.                if ( $I_L36418_680 >= $F_A68 ) exit
36418.             enddo
36418.             $I_L36418_746 = 1 + $I_L36418_746
36418.             if ( $I_L36418_746 >= 4 ) exit
36418.          enddo
36418.       endif
36420.       clouds%header%a_contig = 1
36420.       clouds%dim_1%LB = 1
36420.       clouds%dim_1%EX = ( max( 0, ncols ) )
36420.       clouds%dim_1%SM = 1
36420.       clouds%dim_2%LB = 1
36420.       clouds%dim_2%EX = ( max( 0, kmax ) )
36420.       clouds%dim_2%SM = ( max( 0, ncols ) )
36420.       clouds%dim_3%LB = 1
36420.       clouds%dim_3%EX = 4
36420.       clouds%dim_3%SM = ( max( 0, ncols ) * max( 0, kmax ) )
36420.       $_allo_P14(0) = 0x1000000000001L
36420.       $_allo_P14(1) = loc( clouds )
36420.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
36421.       $F_A70 = kmax
36421.       $F_A71 = ncols
36421.       if ( and( -$F_A71, -$F_A70 ) < 0 ) then
36421.          $I_L36421_748 = 0
36421.          do
36421.             $I_L36421_682 = 0
36421.             do
36421.                $I_L36421_539 = 0
36421. !dir$ ivdep
36421.                do
36421.                   (clouds%base_addr)(1 + $I_L36421_539, 1 + $I_L36421_682, 1 + $I_L36421_748, 0) = 0.0
36421.                   $I_L36421_539 = 1 + $I_L36421_539
36421.                   if ( $I_L36421_539 >= $F_A71 ) exit
36421.                enddo
36421.                $I_L36421_682 = 1 + $I_L36421_682
36421.                if ( $I_L36421_682 >= $F_A70 ) exit
36421.             enddo
36421.             $I_L36421_748 = 1 + $I_L36421_748
36421.             if ( $I_L36421_748 >= 4 ) exit
36421.          enddo
36421.       endif
36423.       flux_direct%header%a_contig = 1
36423.       flux_direct%dim_1%LB = 1
36423.       flux_direct%dim_1%EX = ( max( 0, ncols ) )
36423.       flux_direct%dim_1%SM = 1
36423.       flux_direct%dim_2%LB = 0
36423.       flux_direct%dim_2%EX = ( max( 0, 1 + kmax ) )
36423.       flux_direct%dim_2%SM = ( max( 0, ncols ) )
36423.       flux_direct%dim_3%LB = 1
36423.       flux_direct%dim_3%EX = 1
36423.       flux_direct%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36423.       $_allo_P15(0) = 0x1000000000001L
36423.       $_allo_P15(1) = loc( flux_direct )
36423.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
36424.       $F_A72 = ( 1 + kmax )
36424.       $F_A73 = ncols
36424.       if ( and( -$F_A73, -$F_A72 ) < 0 ) then
36424.          $I_L36424_684 = 0
36424.          do
36424.             $I_L36424_541 = 0
36424. !dir$ ivdep
36424.             do
36424.                (flux_direct%base_addr)(1 + $I_L36424_541, $I_L36424_684, 1, 0) = 0.0
36424.                $I_L36424_541 = 1 + $I_L36424_541
36424.                if ( $I_L36424_541 >= $F_A73 ) exit
36424.             enddo
36424.             $I_L36424_684 = 1 + $I_L36424_684
36424.             if ( $I_L36424_684 >= $F_A72 ) exit
36424.          enddo
36424.       endif
36425.       flux_down%header%a_contig = 1
36425.       flux_down%dim_1%LB = 1
36425.       flux_down%dim_1%EX = ( max( 0, ncols ) )
36425.       flux_down%dim_1%SM = 1
36425.       flux_down%dim_2%LB = 0
36425.       flux_down%dim_2%EX = ( max( 0, 1 + kmax ) )
36425.       flux_down%dim_2%SM = ( max( 0, ncols ) )
36425.       flux_down%dim_3%LB = 1
36425.       flux_down%dim_3%EX = 1
36425.       flux_down%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36425.       $_allo_P16(0) = 0x1000000000001L
36425.       $_allo_P16(1) = loc( flux_down )
36425.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
36426.       $F_A74 = ( 1 + kmax )
36426.       $F_A75 = ncols
36426.       if ( and( -$F_A75, -$F_A74 ) < 0 ) then
36426.          $I_L36426_686 = 0
36426.          do
36426.             $I_L36426_543 = 0
36426. !dir$ ivdep
36426.             do
36426.                (flux_down%base_addr)(1 + $I_L36426_543, $I_L36426_686, 1, 0) = 0.0
36426.                $I_L36426_543 = 1 + $I_L36426_543
36426.                if ( $I_L36426_543 >= $F_A75 ) exit
36426.             enddo
36426.             $I_L36426_686 = 1 + $I_L36426_686
36426.             if ( $I_L36426_686 >= $F_A74 ) exit
36426.          enddo
36426.       endif
36427.       flux_up%header%a_contig = 1
36427.       flux_up%dim_1%LB = 1
36427.       flux_up%dim_1%EX = ( max( 0, ncols ) )
36427.       flux_up%dim_1%SM = 1
36427.       flux_up%dim_2%LB = 0
36427.       flux_up%dim_2%EX = ( max( 0, 1 + kmax ) )
36427.       flux_up%dim_2%SM = ( max( 0, ncols ) )
36427.       flux_up%dim_3%LB = 1
36427.       flux_up%dim_3%EX = 1
36427.       flux_up%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36427.       $_allo_P17(0) = 0x1000000000001L
36427.       $_allo_P17(1) = loc( flux_up )
36427.       call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
36428.       $F_A76 = ( 1 + kmax )
36428.       $F_A77 = ncols
36428.       if ( and( -$F_A77, -$F_A76 ) < 0 ) then
36428.          $I_L36428_688 = 0
36428.          do
36428.             $I_L36428_545 = 0
36428. !dir$ ivdep
36428.             do
36428.                (flux_up%base_addr)(1 + $I_L36428_545, $I_L36428_688, 1, 0) = 0.0
36428.                $I_L36428_545 = 1 + $I_L36428_545
36428.                if ( $I_L36428_545 >= $F_A77 ) exit
36428.             enddo
36428.             $I_L36428_688 = 1 + $I_L36428_688
36428.             if ( $I_L36428_688 >= $F_A76 ) exit
36428.          enddo
36428.       endif
36429.       flux_net%header%a_contig = 1
36429.       flux_net%dim_1%LB = 1
36429.       flux_net%dim_1%EX = ( max( 0, ncols ) )
36429.       flux_net%dim_1%SM = 1
36429.       flux_net%dim_2%LB = 0
36429.       flux_net%dim_2%EX = ( max( 0, 1 + kmax ) )
36429.       flux_net%dim_2%SM = ( max( 0, ncols ) )
36429.       flux_net%dim_3%LB = 1
36429.       flux_net%dim_3%EX = 1
36429.       flux_net%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36429.       $_allo_P18(0) = 0x1000000000001L
36429.       $_allo_P18(1) = loc( flux_net )
36429.       call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
36430.       $F_A78 = ( 1 + kmax )
36430.       $F_A79 = ncols
36430.       if ( and( -$F_A79, -$F_A78 ) < 0 ) then
36430.          $I_L36430_690 = 0
36430.          do
36430.             $I_L36430_547 = 0
36430. !dir$ ivdep
36430.             do
36430.                (flux_net%base_addr)(1 + $I_L36430_547, $I_L36430_690, 1, 0) = 0.0
36430.                $I_L36430_547 = 1 + $I_L36430_547
36430.                if ( $I_L36430_547 >= $F_A79 ) exit
36430.             enddo
36430.             $I_L36430_690 = 1 + $I_L36430_690
36430.             if ( $I_L36430_690 >= $F_A78 ) exit
36430.          enddo
36430.       endif
36432.       flux_direct_clear%header%a_contig = 1
36432.       flux_direct_clear%dim_1%LB = 1
36432.       flux_direct_clear%dim_1%EX = ( max( 0, ncols ) )
36432.       flux_direct_clear%dim_1%SM = 1
36432.       flux_direct_clear%dim_2%LB = 0
36432.       flux_direct_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
36432.       flux_direct_clear%dim_2%SM = ( max( 0, ncols ) )
36432.       flux_direct_clear%dim_3%LB = 1
36432.       flux_direct_clear%dim_3%EX = 1
36432.       flux_direct_clear%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36432.       $_allo_P19(0) = 0x1000000000001L
36432.       $_allo_P19(1) = loc( flux_direct_clear )
36432.       call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
36433.       $F_A80 = ( 1 + kmax )
36433.       $F_A81 = ncols
36433.       if ( and( -$F_A81, -$F_A80 ) < 0 ) then
36433.          $I_L36433_692 = 0
36433.          do
36433.             $I_L36433_549 = 0
36433. !dir$ ivdep
36433.             do
36433.                (flux_direct_clear%base_addr)(1 + $I_L36433_549, $I_L36433_692, 1, 0) = 0.0
36433.                $I_L36433_549 = 1 + $I_L36433_549
36433.                if ( $I_L36433_549 >= $F_A81 ) exit
36433.             enddo
36433.             $I_L36433_692 = 1 + $I_L36433_692
36433.             if ( $I_L36433_692 >= $F_A80 ) exit
36433.          enddo
36433.       endif
36434.       flux_down_clear%header%a_contig = 1
36434.       flux_down_clear%dim_1%LB = 1
36434.       flux_down_clear%dim_1%EX = ( max( 0, ncols ) )
36434.       flux_down_clear%dim_1%SM = 1
36434.       flux_down_clear%dim_2%LB = 0
36434.       flux_down_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
36434.       flux_down_clear%dim_2%SM = ( max( 0, ncols ) )
36434.       flux_down_clear%dim_3%LB = 1
36434.       flux_down_clear%dim_3%EX = 1
36434.       flux_down_clear%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36434.       $_allo_P20(0) = 0x1000000000001L
36434.       $_allo_P20(1) = loc( flux_down_clear )
36434.       call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
36435.       $F_A82 = ( 1 + kmax )
36435.       $F_A83 = ncols
36435.       if ( and( -$F_A83, -$F_A82 ) < 0 ) then
36435.          $I_L36435_694 = 0
36435.          do
36435.             $I_L36435_551 = 0
36435. !dir$ ivdep
36435.             do
36435.                (flux_down_clear%base_addr)(1 + $I_L36435_551, $I_L36435_694, 1, 0) = 0.0
36435.                $I_L36435_551 = 1 + $I_L36435_551
36435.                if ( $I_L36435_551 >= $F_A83 ) exit
36435.             enddo
36435.             $I_L36435_694 = 1 + $I_L36435_694
36435.             if ( $I_L36435_694 >= $F_A82 ) exit
36435.          enddo
36435.       endif
36436.       flux_up_clear%header%a_contig = 1
36436.       flux_up_clear%dim_1%LB = 1
36436.       flux_up_clear%dim_1%EX = ( max( 0, ncols ) )
36436.       flux_up_clear%dim_1%SM = 1
36436.       flux_up_clear%dim_2%LB = 0
36436.       flux_up_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
36436.       flux_up_clear%dim_2%SM = ( max( 0, ncols ) )
36436.       flux_up_clear%dim_3%LB = 1
36436.       flux_up_clear%dim_3%EX = 1
36436.       flux_up_clear%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36436.       $_allo_P21(0) = 0x1000000000001L
36436.       $_allo_P21(1) = loc( flux_up_clear )
36436.       call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
36437.       $F_A84 = ( 1 + kmax )
36437.       $F_A85 = ncols
36437.       if ( and( -$F_A85, -$F_A84 ) < 0 ) then
36437.          $I_L36437_696 = 0
36437.          do
36437.             $I_L36437_553 = 0
36437. !dir$ ivdep
36437.             do
36437.                (flux_up_clear%base_addr)(1 + $I_L36437_553, $I_L36437_696, 1, 0) = 0.0
36437.                $I_L36437_553 = 1 + $I_L36437_553
36437.                if ( $I_L36437_553 >= $F_A85 ) exit
36437.             enddo
36437.             $I_L36437_696 = 1 + $I_L36437_696
36437.             if ( $I_L36437_696 >= $F_A84 ) exit
36437.          enddo
36437.       endif
36438.       flux_net_clear%header%a_contig = 1
36438.       flux_net_clear%dim_1%LB = 1
36438.       flux_net_clear%dim_1%EX = ( max( 0, ncols ) )
36438.       flux_net_clear%dim_1%SM = 1
36438.       flux_net_clear%dim_2%LB = 0
36438.       flux_net_clear%dim_2%EX = ( max( 0, 1 + kmax ) )
36438.       flux_net_clear%dim_2%SM = ( max( 0, ncols ) )
36438.       flux_net_clear%dim_3%LB = 1
36438.       flux_net_clear%dim_3%EX = 1
36438.       flux_net_clear%dim_3%SM = ( max( 0, ncols ) * max( 0, 1 + kmax ) )
36438.       $_allo_P22(0) = 0x1000000000001L
36438.       $_allo_P22(1) = loc( flux_net_clear )
36438.       call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
36439.       $F_A86 = ( 1 + kmax )
36439.       $F_A87 = ncols
36439.       if ( and( -$F_A87, -$F_A86 ) < 0 ) then
36439.          $I_L36439_698 = 0
36439.          do
36439.             $I_L36439_555 = 0
36439. !dir$ ivdep
36439.             do
36439.                (flux_net_clear%base_addr)(1 + $I_L36439_555, $I_L36439_698, 1, 0) = 0.0
36439.                $I_L36439_555 = 1 + $I_L36439_555
36439.                if ( $I_L36439_555 >= $F_A87 ) exit
36439.             enddo
36439.             $I_L36439_698 = 1 + $I_L36439_698
36439.             if ( $I_L36439_698 >= $F_A86 ) exit
36439.          enddo
36439.       endif
36446.       if ( ncols > 0 ) then
36448.          if ( kmax > 0 ) then
36465.             if ( -2 + kmax >= 0 ) then
36448.                $I_L36448_716 = 0
36448.                do
36446.                   $I_L36446_625 = 0
36446. !dir$ ivdep
36446.                   do
36449.                      (temp%base_addr)(1 + $I_L36446_625, 1 + $I_L36448_716, 0) = te(1 + $I_L36446_625, $I_L36448_716 + -ntop + 1)
36450.                      (d_mass%base_addr)(1 + $I_L36446_625, 1 + $I_L36448_716, 0) = 10.195072517550816 * dp(1 + $I_L36446_625, $I_L36448_716 + -ntop + 1)
36451.                      (pres%base_addr)(1 + $I_L36446_625, 1 + $I_L36448_716, 0) = 100.0 * pmid(1 + $I_L36446_625, $I_L36448_716 + -ntop + 1)
36474.                      $I_L36446_625 = 1 + $I_L36446_625
36448.                      if ( $I_L36446_625 >= ncols ) exit
36448.                   enddo
36452.                   $I_L36448_716 = 1 + $I_L36448_716
36473.                   if ( $I_L36448_716 >= kmax ) exit
36473.                enddo
36446.                $I_L36446_627 = 0
36446. !dir$ ivdep
36446.                do
36457.                   (temp%base_addr)(1 + $I_L36446_627, 1, 0) = te(1 + $I_L36446_627, 1)
36458.                   (d_mass%base_addr)(1 + $I_L36446_627, 1, 0) = ( 10.195072517550816 * dp(1 + $I_L36446_627, 1) )
36459.                   (pres%base_addr)(1 + $I_L36446_627, 1, 0) = 50.0 * dp(1 + $I_L36446_627, 1)
36462.                   (t_ground%base_addr)(1 + $I_L36446_627, 0) = tg(1 + $I_L36446_627)
36474.                   $I_L36446_627 = 1 + $I_L36446_627
36473.                   if ( $I_L36446_627 >= ncols ) exit
36473.                enddo
36446.                $I_L36446_758 = 0
36446.                do
36465.                   $I_L36465_724 = 0
36465.                   if ( -5 + kmax >= 0 ) then
36465.                      $I_L36465_765 = 0
36465. !dir$ blocking_size( 0, 0 )
36465.                      do
36446.                         $I_L36446_629 = 0
36446. !dir$ ivdep
36446. !dir$ blocking_size( 1024, 1024 )
36446.                         do
36466.                            (t_level%base_addr)($I_L36446_629 + 1024 * $I_L36446_758 + 1, 1 + 4 * $I_L36465_765, 0) = 5.0e-1 * ( te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 1) + te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 2) )
36466.                            (t_level%base_addr)($I_L36446_629 + 1024 * $I_L36446_758 + 1, 2 + 4 * $I_L36465_765, 0) = 5.0e-1 * ( te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 2) + te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 3) )
36466.                            (t_level%base_addr)($I_L36446_629 + 1024 * $I_L36446_758 + 1, 3 + 4 * $I_L36465_765, 0) = 5.0e-1 * ( te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 3) + te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 4) )
36466.                            (t_level%base_addr)($I_L36446_629 + 1024 * $I_L36446_758 + 1, 4 + 4 * $I_L36465_765, 0) = 5.0e-1 * ( te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 4) + te($I_L36446_629 + 1024 * $I_L36446_758 + 1, -ntop + 4 * $I_L36465_765 + 5) )
36446.                            $I_L36446_629 = 1 + $I_L36446_629
36465.                            if ( $I_L36446_629 >= min( ncols, 1024 + 1024 * $I_L36446_758 ) + -1024 * $I_L36446_758 ) exit
36465.                         enddo
36467.                         $I_L36465_765 = 1 + $I_L36465_765
36467.                         if ( $I_L36465_765 >= _rsh( -1 + kmax, 2 ) ) exit
36467.                      enddo
36467.                      $I_L36465_724 = and( 0xfffffffffffffffcUL, -1 + kmax )
36467.                   endif
36465.                   if ( $I_L36465_724 < -1 + kmax ) then
36465.                      $I_L36465_762 = 0
36465. !dir$ blocking_size( 0, 0 )
36465.                      do
36446.                         $I_L36446_629 = 0
36446. !dir$ ivdep
36446. !dir$ blocking_size( 1024, 1024 )
36446.                         do
36466.                            (t_level%base_addr)($I_L36446_629 + 1024 * $I_L36446_758 + 1, $I_L36465_724 + $I_L36465_762 + 1, 0) = 5.0e-1 * ( te($I_L36446_629 + 1024 * $I_L36446_758 + 1, $I_L36465_724 + $I_L36465_762 + -ntop + 1) + te($I_L36446_629 + 1024 * $I_L36446_758 + 1, $I_L36465_724 + $I_L36465_762 + -ntop + 2) )
36446.                            $I_L36446_629 = 1 + $I_L36446_629
36465.                            if ( $I_L36446_629 >= min( ncols, 1024 + 1024 * $I_L36446_758 ) + -1024 * $I_L36446_758 ) exit
36465.                         enddo
36467.                         $I_L36465_762 = 1 + $I_L36465_762
36467.                         if ( $I_L36465_762 >= kmax + -$I_L36465_724 + -1 ) exit
36467.                      enddo
36467.                   endif
36446.                   $I_L36446_758 = 1 + $I_L36446_758
36473.                   if ( $I_L36446_758 >= 1 + max( 0, -1 + _rsh( 1023 + ncols, 10 ) ) ) exit
36473.                enddo
36446.                $I_L36446_632 = 0
36446. !dir$ ivdep
36446.                do
36468.                   (t_level%base_addr)(1 + $I_L36446_632, kmax, 0) = tg(1 + $I_L36446_632)
36472.                   (t_level%base_addr)(1 + $I_L36446_632, 0, 0) = te(1 + $I_L36446_632, 1)
36474.                   $I_L36446_632 = 1 + $I_L36446_632
36473.                   if ( $I_L36446_632 >= ncols ) exit
36473.                enddo
36473.             else
36446.                $I_L36446_638 = 0
36446. !dir$ ivdep
36446.                do
36457.                   $temp_WR0_R0 = te(1 + $I_L36446_638, 1)
36457.                   (temp%base_addr)(1 + $I_L36446_638, 1, 0) = $temp_WR0_R0
36458.                   $d_mass_WR0_R1 = ( 10.195072517550816 * dp(1 + $I_L36446_638, 1) )
36458.                   (d_mass%base_addr)(1 + $I_L36446_638, 1, 0) = $d_mass_WR0_R1
36459.                   $pres_WR0_R2 = 50.0 * dp(1 + $I_L36446_638, 1)
36459.                   (pres%base_addr)(1 + $I_L36446_638, 1, 0) = $pres_WR0_R2
36462.                   (t_ground%base_addr)(1 + $I_L36446_638, 0) = tg(1 + $I_L36446_638)
36468.                   (t_level%base_addr)(1 + $I_L36446_638, kmax, 0) = tg(1 + $I_L36446_638)
36472.                   (t_level%base_addr)(1 + $I_L36446_638, 0, 0) = $temp_WR0_R0
36474.                   $I_L36446_638 = 1 + $I_L36446_638
36448.                   if ( $I_L36446_638 >= ncols ) exit
36448.                enddo
36448.             endif
36535.             if ( ntop > 0 ) then
36513.                $I_L36513_718 = 0
36513.                do
36512.                   $I_L36512_634 = 0
36512. !dir$ ivdep
36512.                   do
36515.                      (gas_mix_ratio%base_addr)(1 + $I_L36512_634, 1 + $I_L36513_718, 1, 0) = ( qe(1 + $I_L36512_634, $I_L36513_718 + -ntop + 1) * 1.0/( 1.0 + -qe(1 + $I_L36512_634, $I_L36513_718 + -ntop + 1) ) )
36517.                      (gas_mix_ratio%base_addr)(1 + $I_L36512_634, 1 + $I_L36513_718, 2, 0) = 1.5193502727335496e-6 * co2val
36519.                      (gas_mix_ratio%base_addr)(1 + $I_L36512_634, 1 + $I_L36513_718, 3, 0) = o3(1 + $I_L36512_634, $I_L36513_718 + -ntop + 1)
36537.                      $I_L36512_634 = 1 + $I_L36512_634
36513.                      if ( $I_L36512_634 >= ncols ) exit
36513.                   enddo
36531.                   $I_L36513_718 = 1 + $I_L36513_718
36536.                   if ( $I_L36513_718 >= kmax ) exit
36536.                enddo
36534.                $I_L36534_760 = 0
36534.                do
36512.                   $I_L36512_720 = 0
36512.                   do
36535.                      $Tmp_A88 = (gas_mix_ratio%base_addr)(1 + $I_L36512_720, 1 + ntop, 1 + $I_L36534_760, 0)
36535.                      $F_A89 = ntop
36535.                      $I_L36535_636 = 0
36535. !dir$ ivdep
36535.                      do
36535.                         (gas_mix_ratio%base_addr)(1 + $I_L36512_720, 1 + $I_L36535_636, 1 + $I_L36534_760, 0) = $Tmp_A88
36535.                         $I_L36535_636 = 1 + $I_L36535_636
36535.                         if ( $I_L36535_636 >= $F_A89 ) exit
36535.                      enddo
36537.                      $I_L36512_720 = 1 + $I_L36512_720
36534.                      if ( $I_L36512_720 >= ncols ) exit
36534.                   enddo
36536.                   $I_L36534_760 = 1 + $I_L36534_760
36536.                   if ( $I_L36534_760 >= 3 ) exit
36536.                enddo
36536.             else
36513.                $I_L36513_722 = 0
36513.                do
36512.                   $I_L36512_640 = 0
36512. !dir$ ivdep
36512.                   do
36515.                      (gas_mix_ratio%base_addr)(1 + $I_L36512_640, 1 + $I_L36513_722, 1, 0) = ( qe(1 + $I_L36512_640, $I_L36513_722 + -ntop + 1) * 1.0/( 1.0 + -qe(1 + $I_L36512_640, $I_L36513_722 + -ntop + 1) ) )
36517.                      (gas_mix_ratio%base_addr)(1 + $I_L36512_640, 1 + $I_L36513_722, 2, 0) = 1.5193502727335496e-6 * co2val
36519.                      (gas_mix_ratio%base_addr)(1 + $I_L36512_640, 1 + $I_L36513_722, 3, 0) = o3(1 + $I_L36512_640, $I_L36513_722 + -ntop + 1)
36537.                      $I_L36512_640 = 1 + $I_L36512_640
36513.                      if ( $I_L36512_640 >= ncols ) exit
36513.                   enddo
36531.                   $I_L36513_722 = 1 + $I_L36513_722
36536.                   if ( $I_L36513_722 >= kmax ) exit
36536.                enddo
36536.             endif
36536.          else
36446.             $I_L36446_493 = 0
36446. !dir$ ivdep
36446.             do
36457.                (temp%base_addr)(1 + $I_L36446_493, 1, 0) = te(1 + $I_L36446_493, 1)
36458.                (d_mass%base_addr)(1 + $I_L36446_493, 1, 0) = ( 10.195072517550816 * dp(1 + $I_L36446_493, 1) )
36459.                (pres%base_addr)(1 + $I_L36446_493, 1, 0) = 50.0 * dp(1 + $I_L36446_493, 1)
36462.                (t_ground%base_addr)(1 + $I_L36446_493, 0) = tg(1 + $I_L36446_493)
36468.                (t_level%base_addr)(1 + $I_L36446_493, kmax, 0) = tg(1 + $I_L36446_493)
36472.                (t_level%base_addr)(1 + $I_L36446_493, 0, 0) = te(1 + $I_L36446_493, 1)
36474.                $I_L36446_493 = 1 + $I_L36446_493
36473.                if ( $I_L36446_493 >= ncols ) exit
36473.             enddo
36535.             if ( ntop > 0 ) then
36534.                $I_L36534_734 = 0
36534.                do
36512.                   $I_L36512_652 = 0
36512.                   do
36535.                      $Tmp_A90 = (gas_mix_ratio%base_addr)(1 + $I_L36512_652, 1 + ntop, 1 + $I_L36534_734, 0)
36535.                      $F_A91 = ntop
36535.                      $I_L36535_557 = 0
36535. !dir$ ivdep
36535.                      do
36535.                         (gas_mix_ratio%base_addr)(1 + $I_L36512_652, 1 + $I_L36535_557, 1 + $I_L36534_734, 0) = $Tmp_A90
36535.                         $I_L36535_557 = 1 + $I_L36535_557
36535.                         if ( $I_L36535_557 >= $F_A91 ) exit
36535.                      enddo
36537.                      $I_L36512_652 = 1 + $I_L36512_652
36534.                      if ( $I_L36512_652 >= ncols ) exit
36534.                   enddo
36536.                   $I_L36534_734 = 1 + $I_L36534_734
36536.                   if ( $I_L36534_734 >= 3 ) exit
36536.                enddo
36536.             endif
36536.          endif
36616.          $I_L36616_644 = 0
36616.          do
36617.             if ( kmax > 0 ) then
36617.                $I_L36617_478 = 0
36617. !dir$ ivdep
36617.                do
36618.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36617_478, 1, 0) = cld(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1) * ( 1.0 + -fice(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1) )
36620.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36617_478, 2, 0) = cld(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1) * fice(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1)
36622.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36617_478, 3, 0) = clu(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1) * ( 1.0 + -fice(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1) )
36624.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36617_478, 4, 0) = clu(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1) * fice(1 + $I_L36616_644, $I_L36617_478 + -ntop + 1)
36626.                   $I_L36617_478 = 1 + $I_L36617_478
36617.                   if ( $I_L36617_478 >= kmax ) exit
36617.                enddo
36617.             endif
36628.             $Tmp_A92 = 0.0
36628.             if ( ntop > 0 ) then
36628.                $Tmp_A92 = (clouds%base_addr)(1 + $I_L36616_644, 1 + ntop, 1, 0)
36628.             endif
36628.             $F_A96 = ntop
36628.             if ( ntop > 0 ) then
36628.                $I_L36628_559 = 0
36628. !dir$ ivdep
36628.                do
36628.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36628_559, 1, 0) = $Tmp_A92
36628.                   $I_L36628_559 = 1 + $I_L36628_559
36628.                   if ( $I_L36628_559 >= $F_A96 ) exit
36628.                enddo
36628.             endif
36629.             $Tmp_A93 = 0.0
36629.             if ( ntop > 0 ) then
36629.                $Tmp_A93 = (clouds%base_addr)(1 + $I_L36616_644, 1 + ntop, 2, 0)
36629.             endif
36629.             $F_A97 = ntop
36629.             if ( ntop > 0 ) then
36629.                $I_L36629_561 = 0
36629. !dir$ ivdep
36629.                do
36629.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36629_561, 2, 0) = $Tmp_A93
36629.                   $I_L36629_561 = 1 + $I_L36629_561
36629.                   if ( $I_L36629_561 >= $F_A97 ) exit
36629.                enddo
36629.             endif
36630.             $Tmp_A94 = 0.0
36630.             if ( ntop > 0 ) then
36630.                $Tmp_A94 = (clouds%base_addr)(1 + $I_L36616_644, 1 + ntop, 3, 0)
36630.             endif
36630.             $F_A98 = ntop
36630.             if ( ntop > 0 ) then
36630.                $I_L36630_563 = 0
36630. !dir$ ivdep
36630.                do
36630.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36630_563, 3, 0) = $Tmp_A94
36630.                   $I_L36630_563 = 1 + $I_L36630_563
36630.                   if ( $I_L36630_563 >= $F_A98 ) exit
36630.                enddo
36630.             endif
36631.             $Tmp_A95 = 0.0
36631.             if ( ntop > 0 ) then
36631.                $Tmp_A95 = (clouds%base_addr)(1 + $I_L36616_644, 1 + ntop, 4, 0)
36631.             endif
36631.             $F_A99 = ntop
36631.             if ( ntop > 0 ) then
36631.                $I_L36631_565 = 0
36631. !dir$ ivdep
36631.                do
36631.                   (clouds%base_addr)(1 + $I_L36616_644, 1 + $I_L36631_565, 4, 0) = $Tmp_A95
36631.                   $I_L36631_565 = 1 + $I_L36631_565
36631.                   if ( $I_L36631_565 >= $F_A99 ) exit
36631.                enddo
36631.             endif
36632.             $I_L36616_644 = 1 + $I_L36616_644
36626.             if ( $I_L36616_644 >= ncols ) exit
36626.          enddo
36635.          if ( kmax > 0 ) then
36639.             if ( n_condensed > 0 ) then
36635.                $I_L36635_730 = 0
36635.                do
36634.                   $I_L36634_646 = 0
36634.                   do
36638.                      aux = 0.0
36639.                      $SCA_w_cloud_I42 = 1.0
36639.                      $I_L36639_480 = 0
36639. !dir$ ivdep
36639.                      do
36640.                         $SCA_w_cloud_I42 = $SCA_w_cloud_I42 * ( 1.0 + -(clouds%base_addr)(1 + $I_L36634_646, 1 + $I_L36635_730, 1 + $I_L36639_480, 0) )
36641.                         aux = aux + (clouds%base_addr)(1 + $I_L36634_646, 1 + $I_L36635_730, 1 + $I_L36639_480, 0)
36642.                         $I_L36639_480 = 1 + $I_L36639_480
36639.                         if ( $I_L36639_480 >= n_condensed ) exit
36639.                      enddo
36643.                      (w_cloud%base_addr)(1 + $I_L36634_646, 1 + $I_L36635_730, 0) = 1.0 + -$SCA_w_cloud_I42
36647.                      if ( aux > 0.0 ) then
36647.                         $I_L36647_567 = 0
36647. !dir$ ivdep
36647.                         do
36647.                            (frac_cloud%base_addr)(1 + $I_L36634_646, 1 + $I_L36635_730, 1 + $I_L36647_567, 0) = ( (clouds%base_addr)(1 + $I_L36634_646, 1 + $I_L36635_730, 1 + $I_L36647_567, 0) * 1.0/aux )
36647.                            $I_L36647_567 = 1 + $I_L36647_567
36647.                            if ( $I_L36647_567 >= 4 ) exit
36647.                         enddo
36647.                      endif
36650.                      $I_L36634_646 = 1 + $I_L36634_646
36647.                      if ( $I_L36634_646 >= ncols ) exit
36647.                   enddo
36649.                   $I_L36635_730 = 1 + $I_L36635_730
36649.                   if ( $I_L36635_730 >= kmax ) exit
36649.                enddo
36649.             else
36635.                $I_L36635_654 = 0
36635.                do
36634.                   $I_L36634_491 = 0
36634. !dir$ ivdep
36634.                   do
36643.                      (w_cloud%base_addr)(1 + $I_L36634_491, 1 + $I_L36635_654, 0) = 0.0
36650.                      $I_L36634_491 = 1 + $I_L36634_491
36647.                      if ( $I_L36634_491 >= ncols ) exit
36647.                   enddo
36649.                   $I_L36635_654 = 1 + $I_L36635_654
36649.                   if ( $I_L36635_654 >= kmax ) exit
36649.                enddo
36649.             endif
36649.          endif
36649.       endif
36480.       $F_A100 = ncols
36480.       if ( ncols > 0 ) then
36480.          $I_L36480_569 = 0
36480. !dir$ ivdep
36480.          do
36480.             (zen_0%base_addr)(1 + $I_L36480_569, 0) = -999.0
36480.             $I_L36480_569 = 1 + $I_L36480_569
36480.             if ( $I_L36480_569 >= $F_A100 ) exit
36480.          enddo
36480.       endif
36481.       $F_A101 = ncols
36481.       if ( ncols > 0 ) then
36481.          $I_L36481_571 = 0
36481. !dir$ ivdep
36481.          do
36481.             (solar_irrad%base_addr)(1 + $I_L36481_571, 0) = -999.0
36481.             $I_L36481_571 = 1 + $I_L36481_571
36481.             if ( $I_L36481_571 >= $F_A101 ) exit
36481.          enddo
36481.       endif
36484.       $F_A102 = lwdat%dim%nd_band
36484.       if ( lwdat%dim%nd_band > 0 ) then
36484.          $SC_lwdat_I46 = lwdat%dim%nd_band
36484.          $I_L36484_573 = 0
36484. !dir$ ivdep
36484.          do
36484.             weight_band(1 + $I_L36484_573) = 1.0
36484.             $I_L36484_573 = 1 + $I_L36484_573
36484.             if ( $I_L36484_573 >= $F_A102 ) exit
36484.          enddo
36484.       endif
36491.       $F_A103 = lwdat%dim%nd_band
36491.       if ( lwdat%dim%nd_band > 0 ) then
36491.          $SC_lwdat_I46 = lwdat%dim%nd_band
36491.          $I_L36491_575 = 0
36491. !dir$ ivdep
36491.          do
36491.             i_scatter_method(1 + $I_L36491_575) = 1
36491.             $I_L36491_575 = 1 + $I_L36491_575
36491.             if ( $I_L36491_575 >= $F_A103 ) exit
36491.          enddo
36491.       endif
36498.       $F_A104 = lwdat%dim%nd_band
36498.       if ( lwdat%dim%nd_band > 0 ) then
36498.          $SC_lwdat_I46 = lwdat%dim%nd_band
36498.          $I_L36498_577 = 0
36498. !dir$ ivdep
36498.          do
36498.             map_band_channel(1 + $I_L36498_577) = 1
36498.             $I_L36498_577 = 1 + $I_L36498_577
36498.             if ( $I_L36498_577 >= $F_A104 ) exit
36498.          enddo
36498.       endif
36501.       $F_A105 = lwdat%dim%nd_band
36501.       if ( lwdat%dim%nd_band > 0 ) then
36501.          $SC_lwdat_I46 = lwdat%dim%nd_band
36501.          $I_L36501_579 = 0
36501. !dir$ ivdep
36501.          do
36501.             i_gas_overlap(1 + $I_L36501_579) = 5
36501.             $I_L36501_579 = 1 + $I_L36501_579
36501.             if ( $I_L36501_579 >= $F_A105 ) exit
36501.          enddo
36501.       endif
36543.       $SC_lwdat_I47 = lwdat%dim%nd_species
36543.       $I_L36543_581 = 0
36543. !dir$ ivdep
36543.       do
36543.          l_doppler(1 + $I_L36543_581) = t$10929(1 + $I_L36543_581)
36547.          doppler_correction(1 + $I_L36543_581) = t$10930(1 + $I_L36543_581)
36543.          $I_L36543_581 = 1 + $I_L36543_581
36543.          if ( $I_L36543_581 >= 11 ) exit
36543.       enddo
36557.       $F_A106 = lwdat%dim%nd_band
36557.       $F_A107 = ncols
36557.       if ( and( -$F_A107, -$F_A106 ) < 0 ) then
36557.          $SC_lwdat_I46 = lwdat%dim%nd_band
36557.          $I_L36557_750 = 0
36557.          do
36557.             $I_L36557_700 = 0
36557.             do
36557.                $I_L36557_583 = 0
36557. !dir$ ivdep
36557.                do
36557.                   (rho_alb%base_addr)(1 + $I_L36557_583, 1 + $I_L36557_700, 1 + $I_L36557_750, 0) = 0.0
36557.                   $I_L36557_583 = 1 + $I_L36557_583
36557.                   if ( $I_L36557_583 >= $F_A107 ) exit
36557.                enddo
36557.                $I_L36557_700 = 1 + $I_L36557_700
36557.                if ( $I_L36557_700 >= 2 ) exit
36557.             enddo
36557.             $I_L36557_750 = 1 + $I_L36557_750
36557.             if ( $I_L36557_750 >= $F_A106 ) exit
36557.          enddo
36557.       endif
36563.       $F_A108 = lwdat%dim%nd_aerosol_species
36563.       $F_A109 = kmax
36563.       $F_A110 = ncols
36563.       if ( and( and( -$F_A109, -$F_A108 ), -$F_A110 ) < 0 ) then
36563.          $SC_lwdat_I48 = lwdat%dim%nd_aerosol_species
36563.          $I_L36563_752 = 0
36563.          do
36563.             $I_L36563_702 = 0
36563.             do
36563.                $I_L36563_585 = 0
36563. !dir$ ivdep
36563.                do
36563.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36563_585, 1 + $I_L36563_702, 1 + $I_L36563_752, 0) = 0.0
36563.                   $I_L36563_585 = 1 + $I_L36563_585
36563.                   if ( $I_L36563_585 >= $F_A110 ) exit
36563.                enddo
36563.                $I_L36563_702 = 1 + $I_L36563_702
36563.                if ( $I_L36563_702 >= $F_A109 ) exit
36563.             enddo
36563.             $I_L36563_752 = 1 + $I_L36563_752
36563.             if ( $I_L36563_752 >= $F_A108 ) exit
36563.          enddo
36563.       endif
36567.       if ( ncols > 0 ) then
36567.          $I_L36567_728 = 0
36567.          do
36568.             if ( imask(1 + $I_L36567_728) <= 0 .orelse. imask(1 + $I_L36567_728) == 13 ) then
36569.                $F_A113 = nls
36569.                if ( nls > 0 ) then
36569.                   $SCA_pbot_I36 = pbot(1 + $I_L36567_728, kmax)
36569.                   $I_L36569_708 = 0
36569.                   do
36569.                      $I_L36569_591 = 0
36569. !dir$ ivdep
36569.                      do
36569.                         (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, ntop + $I_L36569_591 + 1, 1 + $I_L36569_708, 0) = 1.0e-2 * ( (aerosol_clim_ocean%base_addr)(1 + $I_L36569_591, 1 + $I_L36569_708, 0) * 1.0/$SCA_pbot_I36 )
36569.                         $I_L36569_591 = 1 + $I_L36569_591
36569.                         if ( $I_L36569_591 >= $F_A113 ) exit
36569.                      enddo
36569.                      $I_L36569_708 = 1 + $I_L36569_708
36569.                      if ( $I_L36569_708 >= 5 ) exit
36569.                   enddo
36569.                endif
36571.                $F_A114 = ( kmax + -ntop + -nls )
36571.                if ( kmax + -ntop + -nls > 0 ) then
36571.                   $I_L36571_710 = 0
36571.                   do
36571.                      $I_L36571_593 = 0
36571. !dir$ ivdep
36571.                      do
36571.                         (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, ntop + nls + $I_L36571_593 + 1, 1 + $I_L36571_710, 0) = (aerosol_clim_ocean%base_addr)(nls + $I_L36571_593 + 1, 1 + $I_L36571_710, 0)
36571.                         $I_L36571_593 = 1 + $I_L36571_593
36571.                         if ( $I_L36571_593 >= $F_A114 ) exit
36571.                      enddo
36571.                      $I_L36571_710 = 1 + $I_L36571_710
36571.                      if ( $I_L36571_710 >= 5 ) exit
36571.                   enddo
36571.                endif
36571.             else
36574.                $F_A111 = nls
36574.                if ( nls > 0 ) then
36574.                   $SCA_pbot_I45 = pbot(1 + $I_L36567_728, kmax)
36574.                   $I_L36574_704 = 0
36574.                   do
36574.                      $I_L36574_587 = 0
36574. !dir$ ivdep
36574.                      do
36574.                         (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, ntop + $I_L36574_587 + 1, 1 + $I_L36574_704, 0) = 1.0e-2 * ( (aerosol_clim_land%base_addr)(1 + $I_L36574_587, 1 + $I_L36574_704, 0) * 1.0/$SCA_pbot_I45 )
36574.                         $I_L36574_587 = 1 + $I_L36574_587
36574.                         if ( $I_L36574_587 >= $F_A111 ) exit
36574.                      enddo
36574.                      $I_L36574_704 = 1 + $I_L36574_704
36574.                      if ( $I_L36574_704 >= 5 ) exit
36574.                   enddo
36574.                endif
36576.                $F_A112 = ( kmax + -ntop + -nls )
36576.                if ( kmax + -ntop + -nls > 0 ) then
36576.                   $I_L36576_706 = 0
36576.                   do
36576.                      $I_L36576_589 = 0
36576. !dir$ ivdep
36576.                      do
36576.                         (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, ntop + nls + $I_L36576_589 + 1, 1 + $I_L36576_706, 0) = (aerosol_clim_land%base_addr)(nls + $I_L36576_589 + 1, 1 + $I_L36576_706, 0)
36576.                         $I_L36576_589 = 1 + $I_L36576_589
36576.                         if ( $I_L36576_589 >= $F_A112 ) exit
36576.                      enddo
36576.                      $I_L36576_706 = 1 + $I_L36576_706
36576.                      if ( $I_L36576_706 >= 5 ) exit
36576.                   enddo
36576.                endif
36576.             endif
36580.             $Tmp_A115 = 0.0
36580.             if ( ntop > 0 ) then
36580.                $Tmp_A115 = (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + ntop, 1, 0)
36580.             endif
36580.             $F_A120 = ntop
36580.             if ( ntop > 0 ) then
36580.                $I_L36580_595 = 0
36580. !dir$ ivdep
36580.                do
36580.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + $I_L36580_595, 1, 0) = $Tmp_A115
36580.                   $I_L36580_595 = 1 + $I_L36580_595
36580.                   if ( $I_L36580_595 >= $F_A120 ) exit
36580.                enddo
36580.             endif
36581.             $Tmp_A116 = 0.0
36581.             if ( ntop > 0 ) then
36581.                $Tmp_A116 = (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + ntop, 2, 0)
36581.             endif
36581.             $F_A121 = ntop
36581.             if ( ntop > 0 ) then
36581.                $I_L36581_597 = 0
36581. !dir$ ivdep
36581.                do
36581.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + $I_L36581_597, 2, 0) = $Tmp_A116
36581.                   $I_L36581_597 = 1 + $I_L36581_597
36581.                   if ( $I_L36581_597 >= $F_A121 ) exit
36581.                enddo
36581.             endif
36582.             $Tmp_A117 = 0.0
36582.             if ( ntop > 0 ) then
36582.                $Tmp_A117 = (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + ntop, 3, 0)
36582.             endif
36582.             $F_A122 = ntop
36582.             if ( ntop > 0 ) then
36582.                $I_L36582_599 = 0
36582. !dir$ ivdep
36582.                do
36582.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + $I_L36582_599, 3, 0) = $Tmp_A117
36582.                   $I_L36582_599 = 1 + $I_L36582_599
36582.                   if ( $I_L36582_599 >= $F_A122 ) exit
36582.                enddo
36582.             endif
36583.             $Tmp_A118 = 0.0
36583.             if ( ntop > 0 ) then
36583.                $Tmp_A118 = (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + ntop, 4, 0)
36583.             endif
36583.             $F_A123 = ntop
36583.             if ( ntop > 0 ) then
36583.                $I_L36583_601 = 0
36583. !dir$ ivdep
36583.                do
36583.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + $I_L36583_601, 4, 0) = $Tmp_A118
36583.                   $I_L36583_601 = 1 + $I_L36583_601
36583.                   if ( $I_L36583_601 >= $F_A123 ) exit
36583.                enddo
36583.             endif
36584.             $Tmp_A119 = 0.0
36584.             if ( ntop > 0 ) then
36584.                $Tmp_A119 = (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + ntop, 5, 0)
36584.             endif
36584.             $F_A124 = ntop
36584.             if ( ntop > 0 ) then
36584.                $I_L36584_603 = 0
36584. !dir$ ivdep
36584.                do
36584.                   (aerosol_mix_ratio%base_addr)(1 + $I_L36567_728, 1 + $I_L36584_603, 5, 0) = $Tmp_A119
36584.                   $I_L36584_603 = 1 + $I_L36584_603
36584.                   if ( $I_L36584_603 >= $F_A124 ) exit
36584.                enddo
36584.             endif
36585.             $I_L36567_728 = 1 + $I_L36567_728
36578.             if ( $I_L36567_728 >= ncols ) exit
36578.          enddo
36578.       endif
36594.       type_condensed(1) = 1
36595.       type_condensed(2) = 2
36596.       type_condensed(3) = 3
36597.       type_condensed(4) = 4
36599.       i_condensed_param(1) = (lwdat%drop%i_drop_parm%base_addr)(5, 0)
36600.       i_condensed_param(2) = (lwdat%ice%i_ice_parm%base_addr)(8, 0)
36601.       i_condensed_param(3) = (lwdat%drop%i_drop_parm%base_addr)(5, 0)
36602.       i_condensed_param(4) = (lwdat%ice%i_ice_parm%base_addr)(8, 0)
36604.       if ( lwdat%dim%nd_cloud_parameter > 0 ) then
36605.          if ( lwdat%dim%nd_band > 0 ) then
36605.             $I_L36605_642 = 0
36605.             do
36604.                $I_L36604_476 = 0
36604. !dir$ ivdep
36604.                do
36606.                   condensed_param_list(1 + $I_L36604_476, 1, 1 + $I_L36605_642) = (lwdat%drop%parm_list%base_addr)(1 + $I_L36604_476, 1 + $I_L36605_642, 5, 0)
36607.                   condensed_param_list(1 + $I_L36604_476, 2, 1 + $I_L36605_642) = (lwdat%ice%parm_list%base_addr)(1 + $I_L36604_476, 1 + $I_L36605_642, 8, 0)
36608.                   condensed_param_list(1 + $I_L36604_476, 3, 1 + $I_L36605_642) = (lwdat%drop%parm_list%base_addr)(1 + $I_L36604_476, 1 + $I_L36605_642, 5, 0)
36609.                   condensed_param_list(1 + $I_L36604_476, 4, 1 + $I_L36605_642) = (lwdat%ice%parm_list%base_addr)(1 + $I_L36604_476, 1 + $I_L36605_642, 8, 0)
36611.                   $I_L36604_476 = 1 + $I_L36604_476
36605.                   if ( $I_L36604_476 >= lwdat%dim%nd_cloud_parameter ) exit
36605.                enddo
36610.                $I_L36605_642 = 1 + $I_L36605_642
36610.                if ( $I_L36605_642 >= lwdat%dim%nd_band ) exit
36610.             enddo
36610.          endif
36610.       endif
36655.       $F_A125 = kmax
36655.       $F_A126 = ncols
36655.       if ( and( -$F_A126, -$F_A125 ) < 0 ) then
36655.          $I_L36655_754 = 0
36655.          do
36655.             $I_L36655_712 = 0
36655.             do
36655.                $I_L36655_605 = 0
36655. !dir$ ivdep
36655.                do
36655.                   (condensed_mix_ratio%base_addr)(1 + $I_L36655_605, 1 + $I_L36655_712, 1 + $I_L36655_754, 0) = 0.0
36655.                   $I_L36655_605 = 1 + $I_L36655_605
36655.                   if ( $I_L36655_605 >= $F_A126 ) exit
36655.                enddo
36655.                $I_L36655_712 = 1 + $I_L36655_712
36655.                if ( $I_L36655_712 >= $F_A125 ) exit
36655.             enddo
36655.             $I_L36655_754 = 1 + $I_L36655_754
36655.             if ( $I_L36655_754 >= 4 ) exit
36655.          enddo
36655.       endif
36656.       $F_A127 = kmax
36656.       $F_A128 = ncols
36656.       if ( and( -$F_A128, -$F_A127 ) < 0 ) then
36656.          $I_L36656_756 = 0
36656.          do
36656.             $I_L36656_714 = 0
36656.             do
36656.                $I_L36656_607 = 0
36656. !dir$ ivdep
36656.                do
36656.                   (condensed_dim_char%base_addr)(1 + $I_L36656_607, 1 + $I_L36656_714, 1 + $I_L36656_756, 0) = 0.0
36656.                   $I_L36656_607 = 1 + $I_L36656_607
36656.                   if ( $I_L36656_607 >= $F_A128 ) exit
36656.                enddo
36656.                $I_L36656_714 = 1 + $I_L36656_714
36656.                if ( $I_L36656_714 >= $F_A127 ) exit
36656.             enddo
36656.             $I_L36656_756 = 1 + $I_L36656_756
36656.             if ( $I_L36656_756 >= 4 ) exit
36656.          enddo
36656.       endif
36657.       if ( ncols > 0 ) then
36657.          $I_L36657_648 = 0
36657.          do
36658.             if ( kmax > 0 ) then
36658.                $I_L36658_482 = 0
36658. !dir$ ivdep
36658.                do
36659.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 1, 0) = lmixr(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1) * ( 1.0 + -fice(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1) )
36661.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 2, 0) = lmixr(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1) * fice(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1)
36663.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 3, 0) = lmixr(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1) * ( 1.0 + -fice(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1) )
36665.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 4, 0) = lmixr(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1) * fice(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1)
36668.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 1, 0) = 9.9999999999999995e-7 * rel(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1)
36669.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 2, 0) = 9.9999999999999995e-7 * rei(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1)
36670.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 3, 0) = 9.9999999999999995e-7 * rel(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1)
36671.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36658_482, 4, 0) = 9.9999999999999995e-7 * rei(1 + $I_L36657_648, $I_L36658_482 + -ntop + 1)
36672.                   $I_L36658_482 = 1 + $I_L36658_482
36658.                   if ( $I_L36658_482 >= kmax ) exit
36658.                enddo
36658.             endif
36675.             $Tmp_A129 = 0.0
36675.             if ( ntop > 0 ) then
36675.                $Tmp_A129 = (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + ntop, 1, 0)
36675.             endif
36684.             $Tmp_A133 = 0.0
36684.             if ( ntop > 0 ) then
36684.                $Tmp_A133 = (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + ntop, 1, 0)
36684.             endif
36675.             $F_A137 = ntop
36675.             if ( ntop > 0 ) then
36675.                $I_L36675_609 = 0
36675. !dir$ ivdep
36675.                do
36675.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36675_609, 1, 0) = $Tmp_A129
36675.                   $I_L36675_609 = 1 + $I_L36675_609
36675.                   if ( $I_L36675_609 >= $F_A137 ) exit
36675.                enddo
36675.             endif
36684.             $F_A138 = ntop
36684.             if ( ntop > 0 ) then
36684.                $I_L36684_611 = 0
36684. !dir$ ivdep
36684.                do
36684.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36684_611, 1, 0) = $Tmp_A133
36684.                   $I_L36684_611 = 1 + $I_L36684_611
36684.                   if ( $I_L36684_611 >= $F_A138 ) exit
36684.                enddo
36684.             endif
36677.             $Tmp_A130 = 0.0
36677.             if ( ntop > 0 ) then
36677.                $Tmp_A130 = (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + ntop, 2, 0)
36677.             endif
36686.             $Tmp_A134 = 0.0
36686.             if ( ntop > 0 ) then
36686.                $Tmp_A134 = (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + ntop, 2, 0)
36686.             endif
36677.             $F_A139 = ntop
36677.             if ( ntop > 0 ) then
36677.                $I_L36677_613 = 0
36677. !dir$ ivdep
36677.                do
36677.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36677_613, 2, 0) = $Tmp_A130
36677.                   $I_L36677_613 = 1 + $I_L36677_613
36677.                   if ( $I_L36677_613 >= $F_A139 ) exit
36677.                enddo
36677.             endif
36686.             $F_A140 = ntop
36686.             if ( ntop > 0 ) then
36686.                $I_L36686_615 = 0
36686. !dir$ ivdep
36686.                do
36686.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36686_615, 2, 0) = $Tmp_A134
36686.                   $I_L36686_615 = 1 + $I_L36686_615
36686.                   if ( $I_L36686_615 >= $F_A140 ) exit
36686.                enddo
36686.             endif
36679.             $Tmp_A131 = 0.0
36679.             if ( ntop > 0 ) then
36679.                $Tmp_A131 = (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + ntop, 3, 0)
36679.             endif
36688.             $Tmp_A135 = 0.0
36688.             if ( ntop > 0 ) then
36688.                $Tmp_A135 = (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + ntop, 3, 0)
36688.             endif
36679.             $F_A141 = ntop
36679.             if ( ntop > 0 ) then
36679.                $I_L36679_617 = 0
36679. !dir$ ivdep
36679.                do
36679.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36679_617, 3, 0) = $Tmp_A131
36679.                   $I_L36679_617 = 1 + $I_L36679_617
36679.                   if ( $I_L36679_617 >= $F_A141 ) exit
36679.                enddo
36679.             endif
36688.             $F_A142 = ntop
36688.             if ( ntop > 0 ) then
36688.                $I_L36688_619 = 0
36688. !dir$ ivdep
36688.                do
36688.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36688_619, 3, 0) = $Tmp_A135
36688.                   $I_L36688_619 = 1 + $I_L36688_619
36688.                   if ( $I_L36688_619 >= $F_A142 ) exit
36688.                enddo
36688.             endif
36681.             $Tmp_A132 = 0.0
36681.             if ( ntop > 0 ) then
36681.                $Tmp_A132 = (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + ntop, 4, 0)
36681.             endif
36690.             $Tmp_A136 = 0.0
36690.             if ( ntop > 0 ) then
36690.                $Tmp_A136 = (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + ntop, 4, 0)
36690.             endif
36681.             $F_A143 = ntop
36681.             if ( ntop > 0 ) then
36681.                $I_L36681_621 = 0
36681. !dir$ ivdep
36681.                do
36681.                   (condensed_mix_ratio%base_addr)(1 + $I_L36657_648, 1 + $I_L36681_621, 4, 0) = $Tmp_A132
36681.                   $I_L36681_621 = 1 + $I_L36681_621
36681.                   if ( $I_L36681_621 >= $F_A143 ) exit
36681.                enddo
36681.             endif
36690.             $F_A144 = ntop
36690.             if ( ntop > 0 ) then
36690.                $I_L36690_623 = 0
36690. !dir$ ivdep
36690.                do
36690.                   (condensed_dim_char%base_addr)(1 + $I_L36657_648, 1 + $I_L36690_623, 4, 0) = $Tmp_A136
36690.                   $I_L36690_623 = 1 + $I_L36690_623
36690.                   if ( $I_L36690_623 >= $F_A144 ) exit
36690.                enddo
36690.             endif
36693.             $I_L36657_648 = 1 + $I_L36657_648
36672.             if ( $I_L36657_648 >= ncols ) exit
36672.          enddo
36672.       endif
36732.       t$10964 = 0
36732.       t$10965 = 0
36732.       t$10969 = 0
36732.       if ( lwdat%planck%thermal_coeff%header%a_contig == 1 ) then
36732. !dir$ suppress (lwdat%planck%thermal_coeff%base_addr)(lwdat%planck%thermal_coeff%dim_1%LB, lwdat%planck%thermal_coeff%dim_2%LB, 0)
36732.          t$10963 = loc( (lwdat%planck%thermal_coeff%base_addr)(lwdat%planck%thermal_coeff%dim_1%LB, lwdat%planck%thermal_coeff%dim_2%LB, 0) )
36732.       else
36732.          t$10964 = lwdat%planck%thermal_coeff%dim_1%EX
36732.          t$10965 = lwdat%planck%thermal_coeff%dim_2%EX
36732.          t$10969 = int( _alloc( max( 0, max( 0, lwdat%planck%thermal_coeff%dim_2%EX ) * max( 0, lwdat%planck%thermal_coeff%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$10968, lwdat%planck%thermal_coeff )
36732. !dir$ suppress t$10968
36732.          t$10963 = loc( t$10968 )
36732.       endif
36736.       t$10971 = 0
36736.       t$10974 = 0
36736.       if ( lwdat%gas%n_band_absorb%header%a_contig == 1 ) then
36736. !dir$ suppress (lwdat%gas%n_band_absorb%base_addr)(lwdat%gas%n_band_absorb%dim_1%LB, 0)
36736.          t$10970 = loc( (lwdat%gas%n_band_absorb%base_addr)(lwdat%gas%n_band_absorb%dim_1%LB, 0) )
36736.       else
36736.          t$10971 = lwdat%gas%n_band_absorb%dim_1%EX
36736.          t$10974 = int( _alloc( max( 0, 4 * max( 0, lwdat%gas%n_band_absorb%dim_1%EX ) ) ), 8 )
36699.          call _f90_copy_from_dv( t$10973, lwdat%gas%n_band_absorb )
36736. !dir$ suppress t$10973
36736.          t$10970 = loc( t$10973 )
36736.       endif
36736.       t$10976 = 0
36736.       t$10977 = 0
36736.       t$10981 = 0
36736.       if ( lwdat%gas%index_absorb%header%a_contig == 1 ) then
36736. !dir$ suppress (lwdat%gas%index_absorb%base_addr)(lwdat%gas%index_absorb%dim_1%LB, lwdat%gas%index_absorb%dim_2%LB, 0)
36736.          t$10975 = loc( (lwdat%gas%index_absorb%base_addr)(lwdat%gas%index_absorb%dim_1%LB, lwdat%gas%index_absorb%dim_2%LB, 0) )
36736.       else
36736.          t$10976 = lwdat%gas%index_absorb%dim_1%EX
36736.          t$10977 = lwdat%gas%index_absorb%dim_2%EX
36736.          t$10981 = int( _alloc( max( 0, max( 0, lwdat%gas%index_absorb%dim_2%EX ) * max( 0, lwdat%gas%index_absorb%dim_1%EX ) * 4 ) ), 8 )
36699.          call _f90_copy_from_dv( t$10980, lwdat%gas%index_absorb )
36736. !dir$ suppress t$10980
36736.          t$10975 = loc( t$10980 )
36736.       endif
36737.       t$10983 = 0
36737.       t$10984 = 0
36737.       t$10988 = 0
36737.       if ( lwdat%gas%i_band_k%header%a_contig == 1 ) then
36737. !dir$ suppress (lwdat%gas%i_band_k%base_addr)(lwdat%gas%i_band_k%dim_1%LB, lwdat%gas%i_band_k%dim_2%LB, 0)
36737.          t$10982 = loc( (lwdat%gas%i_band_k%base_addr)(lwdat%gas%i_band_k%dim_1%LB, lwdat%gas%i_band_k%dim_2%LB, 0) )
36737.       else
36737.          t$10983 = lwdat%gas%i_band_k%dim_1%EX
36737.          t$10984 = lwdat%gas%i_band_k%dim_2%EX
36737.          t$10988 = int( _alloc( max( 0, max( 0, lwdat%gas%i_band_k%dim_2%EX ) * max( 0, lwdat%gas%i_band_k%dim_1%EX ) * 4 ) ), 8 )
36699.          call _f90_copy_from_dv( t$10987, lwdat%gas%i_band_k )
36737. !dir$ suppress t$10987
36737.          t$10982 = loc( t$10987 )
36737.       endif
36737.       t$10990 = 0
36737.       t$10991 = 0
36737.       t$10992 = 0
36737.       t$10997 = 0
36737.       if ( lwdat%gas%w%header%a_contig == 1 ) then
36737. !dir$ suppress (lwdat%gas%w%base_addr)(lwdat%gas%w%dim_1%LB, lwdat%gas%w%dim_2%LB, lwdat%gas%w%dim_3%LB, 0)
36737.          t$10989 = loc( (lwdat%gas%w%base_addr)(lwdat%gas%w%dim_1%LB, lwdat%gas%w%dim_2%LB, lwdat%gas%w%dim_3%LB, 0) )
36737.       else
36737.          t$10990 = lwdat%gas%w%dim_1%EX
36737.          t$10991 = lwdat%gas%w%dim_2%EX
36737.          t$10992 = lwdat%gas%w%dim_3%EX
36737.          t$10997 = int( _alloc( max( 0, max( 0, lwdat%gas%w%dim_2%EX ) * max( 0, lwdat%gas%w%dim_1%EX ) * max( 0, lwdat%gas%w%dim_3%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$10996, lwdat%gas%w )
36737. !dir$ suppress t$10996
36737.          t$10989 = loc( t$10996 )
36737.       endif
36737.       t$10999 = 0
36737.       t$11000 = 0
36737.       t$11001 = 0
36737.       t$11006 = 0
36737.       if ( lwdat%gas%k%header%a_contig == 1 ) then
36737. !dir$ suppress (lwdat%gas%k%base_addr)(lwdat%gas%k%dim_1%LB, lwdat%gas%k%dim_2%LB, lwdat%gas%k%dim_3%LB, 0)
36737.          t$10998 = loc( (lwdat%gas%k%base_addr)(lwdat%gas%k%dim_1%LB, lwdat%gas%k%dim_2%LB, lwdat%gas%k%dim_3%LB, 0) )
36737.       else
36737.          t$10999 = lwdat%gas%k%dim_1%EX
36737.          t$11000 = lwdat%gas%k%dim_2%EX
36737.          t$11001 = lwdat%gas%k%dim_3%EX
36737.          t$11006 = int( _alloc( max( 0, max( 0, lwdat%gas%k%dim_2%EX ) * max( 0, lwdat%gas%k%dim_1%EX ) * max( 0, lwdat%gas%k%dim_3%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11005, lwdat%gas%k )
36737. !dir$ suppress t$11005
36737.          t$10998 = loc( t$11005 )
36737.       endif
36737.       t$11008 = 0
36737.       t$11009 = 0
36737.       t$11013 = 0
36737.       if ( lwdat%gas%i_scale_k%header%a_contig == 1 ) then
36737. !dir$ suppress (lwdat%gas%i_scale_k%base_addr)(lwdat%gas%i_scale_k%dim_1%LB, lwdat%gas%i_scale_k%dim_2%LB, 0)
36737.          t$11007 = loc( (lwdat%gas%i_scale_k%base_addr)(lwdat%gas%i_scale_k%dim_1%LB, lwdat%gas%i_scale_k%dim_2%LB, 0) )
36737.       else
36737.          t$11008 = lwdat%gas%i_scale_k%dim_1%EX
36737.          t$11009 = lwdat%gas%i_scale_k%dim_2%EX
36737.          t$11013 = int( _alloc( max( 0, max( 0, lwdat%gas%i_scale_k%dim_2%EX ) * max( 0, lwdat%gas%i_scale_k%dim_1%EX ) * 4 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11012, lwdat%gas%i_scale_k )
36737. !dir$ suppress t$11012
36737.          t$11007 = loc( t$11012 )
36737.       endif
36738.       t$11015 = 0
36738.       t$11016 = 0
36738.       t$11020 = 0
36738.       if ( lwdat%gas%i_scale_fnc%header%a_contig == 1 ) then
36738. !dir$ suppress (lwdat%gas%i_scale_fnc%base_addr)(lwdat%gas%i_scale_fnc%dim_1%LB, lwdat%gas%i_scale_fnc%dim_2%LB, 0)
36738.          t$11014 = loc( (lwdat%gas%i_scale_fnc%base_addr)(lwdat%gas%i_scale_fnc%dim_1%LB, lwdat%gas%i_scale_fnc%dim_2%LB, 0) )
36738.       else
36738.          t$11015 = lwdat%gas%i_scale_fnc%dim_1%EX
36738.          t$11016 = lwdat%gas%i_scale_fnc%dim_2%EX
36738.          t$11020 = int( _alloc( max( 0, max( 0, lwdat%gas%i_scale_fnc%dim_2%EX ) * max( 0, lwdat%gas%i_scale_fnc%dim_1%EX ) * 4 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11019, lwdat%gas%i_scale_fnc )
36738. !dir$ suppress t$11019
36738.          t$11014 = loc( t$11019 )
36738.       endif
36738.       t$11022 = 0
36738.       t$11023 = 0
36738.       t$11024 = 0
36738.       t$11025 = 0
36738.       t$11031 = 0
36738.       if ( lwdat%gas%scale%header%a_contig == 1 ) then
36738. !dir$ suppress (lwdat%gas%scale%base_addr)(lwdat%gas%scale%dim_1%LB, lwdat%gas%scale%dim_2%LB, lwdat%gas%scale%dim_3%LB, lwdat%gas%scale%dim_4%LB, 0)
36738.          t$11021 = loc( (lwdat%gas%scale%base_addr)(lwdat%gas%scale%dim_1%LB, lwdat%gas%scale%dim_2%LB, lwdat%gas%scale%dim_3%LB, lwdat%gas%scale%dim_4%LB, 0) )
36738.       else
36738.          t$11022 = lwdat%gas%scale%dim_1%EX
36738.          t$11023 = lwdat%gas%scale%dim_2%EX
36738.          t$11024 = lwdat%gas%scale%dim_3%EX
36738.          t$11025 = lwdat%gas%scale%dim_4%EX
36738.          t$11031 = int( _alloc( max( 0, max( 0, lwdat%gas%scale%dim_2%EX ) * max( 0, lwdat%gas%scale%dim_1%EX ) * max( 0, lwdat%gas%scale%dim_3%EX ) * max( 0, lwdat%gas%scale%dim_4%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11030, lwdat%gas%scale )
36738. !dir$ suppress t$11030
36738.          t$11021 = loc( t$11030 )
36738.       endif
36739.       t$11033 = 0
36739.       t$11034 = 0
36739.       t$11038 = 0
36739.       if ( lwdat%gas%p_ref%header%a_contig == 1 ) then
36739. !dir$ suppress (lwdat%gas%p_ref%base_addr)(lwdat%gas%p_ref%dim_1%LB, lwdat%gas%p_ref%dim_2%LB, 0)
36739.          t$11032 = loc( (lwdat%gas%p_ref%base_addr)(lwdat%gas%p_ref%dim_1%LB, lwdat%gas%p_ref%dim_2%LB, 0) )
36739.       else
36739.          t$11033 = lwdat%gas%p_ref%dim_1%EX
36739.          t$11034 = lwdat%gas%p_ref%dim_2%EX
36739.          t$11038 = int( _alloc( max( 0, max( 0, lwdat%gas%p_ref%dim_2%EX ) * max( 0, lwdat%gas%p_ref%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11037, lwdat%gas%p_ref )
36739. !dir$ suppress t$11037
36739.          t$11032 = loc( t$11037 )
36739.       endif
36739.       t$11040 = 0
36739.       t$11041 = 0
36739.       t$11045 = 0
36739.       if ( lwdat%gas%t_ref%header%a_contig == 1 ) then
36739. !dir$ suppress (lwdat%gas%t_ref%base_addr)(lwdat%gas%t_ref%dim_1%LB, lwdat%gas%t_ref%dim_2%LB, 0)
36739.          t$11039 = loc( (lwdat%gas%t_ref%base_addr)(lwdat%gas%t_ref%dim_1%LB, lwdat%gas%t_ref%dim_2%LB, 0) )
36739.       else
36739.          t$11040 = lwdat%gas%t_ref%dim_1%EX
36739.          t$11041 = lwdat%gas%t_ref%dim_2%EX
36739.          t$11045 = int( _alloc( max( 0, max( 0, lwdat%gas%t_ref%dim_2%EX ) * max( 0, lwdat%gas%t_ref%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11044, lwdat%gas%t_ref )
36739. !dir$ suppress t$11044
36739.          t$11039 = loc( t$11044 )
36739.       endif
36748.       t$11047 = 0
36748.       t$11050 = 0
36748.       if ( lwdat%cont%n_band_continuum%header%a_contig == 1 ) then
36748. !dir$ suppress (lwdat%cont%n_band_continuum%base_addr)(lwdat%cont%n_band_continuum%dim_1%LB, 0)
36748.          t$11046 = loc( (lwdat%cont%n_band_continuum%base_addr)(lwdat%cont%n_band_continuum%dim_1%LB, 0) )
36748.       else
36748.          t$11047 = lwdat%cont%n_band_continuum%dim_1%EX
36748.          t$11050 = int( _alloc( max( 0, 4 * max( 0, lwdat%cont%n_band_continuum%dim_1%EX ) ) ), 8 )
36699.          call _f90_copy_from_dv( t$11049, lwdat%cont%n_band_continuum )
36748. !dir$ suppress t$11049
36748.          t$11046 = loc( t$11049 )
36748.       endif
36748.       t$11052 = 0
36748.       t$11053 = 0
36748.       t$11057 = 0
36748.       if ( lwdat%cont%index_continuum%header%a_contig == 1 ) then
36748. !dir$ suppress (lwdat%cont%index_continuum%base_addr)(lwdat%cont%index_continuum%dim_1%LB, lwdat%cont%index_continuum%dim_2%LB, 0)
36748.          t$11051 = loc( (lwdat%cont%index_continuum%base_addr)(lwdat%cont%index_continuum%dim_1%LB, lwdat%cont%index_continuum%dim_2%LB, 0) )
36748.       else
36748.          t$11052 = lwdat%cont%index_continuum%dim_1%EX
36748.          t$11053 = lwdat%cont%index_continuum%dim_2%EX
36748.          t$11057 = int( _alloc( max( 0, max( 0, lwdat%cont%index_continuum%dim_2%EX ) * max( 0, lwdat%cont%index_continuum%dim_1%EX ) * 4 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11056, lwdat%cont%index_continuum )
36748. !dir$ suppress t$11056
36748.          t$11051 = loc( t$11056 )
36748.       endif
36749.       t$11059 = 0
36749.       t$11060 = 0
36749.       t$11064 = 0
36749.       if ( lwdat%cont%k_cont%header%a_contig == 1 ) then
36749. !dir$ suppress (lwdat%cont%k_cont%base_addr)(lwdat%cont%k_cont%dim_1%LB, lwdat%cont%k_cont%dim_2%LB, 0)
36749.          t$11058 = loc( (lwdat%cont%k_cont%base_addr)(lwdat%cont%k_cont%dim_1%LB, lwdat%cont%k_cont%dim_2%LB, 0) )
36749.       else
36749.          t$11059 = lwdat%cont%k_cont%dim_1%EX
36749.          t$11060 = lwdat%cont%k_cont%dim_2%EX
36749.          t$11064 = int( _alloc( max( 0, max( 0, lwdat%cont%k_cont%dim_2%EX ) * max( 0, lwdat%cont%k_cont%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11063, lwdat%cont%k_cont )
36749. !dir$ suppress t$11063
36749.          t$11058 = loc( t$11063 )
36749.       endif
36749.       t$11066 = 0
36749.       t$11067 = 0
36749.       t$11071 = 0
36749.       if ( lwdat%cont%i_scale_fnc_cont%header%a_contig == 1 ) then
36749. !dir$ suppress (lwdat%cont%i_scale_fnc_cont%base_addr)(lwdat%cont%i_scale_fnc_cont%dim_1%LB, lwdat%cont%i_scale_fnc_cont%dim_2%LB, 0)
36749.          t$11065 = loc( (lwdat%cont%i_scale_fnc_cont%base_addr)(lwdat%cont%i_scale_fnc_cont%dim_1%LB, lwdat%cont%i_scale_fnc_cont%dim_2%LB, 0) )
36749.       else
36749.          t$11066 = lwdat%cont%i_scale_fnc_cont%dim_1%EX
36749.          t$11067 = lwdat%cont%i_scale_fnc_cont%dim_2%EX
36749.          t$11071 = int( _alloc( max( 0, max( 0, lwdat%cont%i_scale_fnc_cont%dim_2%EX ) * max( 0, lwdat%cont%i_scale_fnc_cont%dim_1%EX ) * 4 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11070, lwdat%cont%i_scale_fnc_cont )
36749. !dir$ suppress t$11070
36749.          t$11065 = loc( t$11070 )
36749.       endif
36749.       t$11073 = 0
36749.       t$11074 = 0
36749.       t$11075 = 0
36749.       t$11080 = 0
36749.       if ( lwdat%cont%scale_cont%header%a_contig == 1 ) then
36749. !dir$ suppress (lwdat%cont%scale_cont%base_addr)(lwdat%cont%scale_cont%dim_1%LB, lwdat%cont%scale_cont%dim_2%LB, lwdat%cont%scale_cont%dim_3%LB, 0)
36749.          t$11072 = loc( (lwdat%cont%scale_cont%base_addr)(lwdat%cont%scale_cont%dim_1%LB, lwdat%cont%scale_cont%dim_2%LB, lwdat%cont%scale_cont%dim_3%LB, 0) )
36749.       else
36749.          t$11073 = lwdat%cont%scale_cont%dim_1%EX
36749.          t$11074 = lwdat%cont%scale_cont%dim_2%EX
36749.          t$11075 = lwdat%cont%scale_cont%dim_3%EX
36749.          t$11080 = int( _alloc( max( 0, max( 0, lwdat%cont%scale_cont%dim_2%EX ) * max( 0, lwdat%cont%scale_cont%dim_1%EX ) * max( 0, lwdat%cont%scale_cont%dim_3%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11079, lwdat%cont%scale_cont )
36749. !dir$ suppress t$11079
36749.          t$11072 = loc( t$11079 )
36749.       endif
36750.       t$11082 = 0
36750.       t$11083 = 0
36750.       t$11087 = 0
36750.       if ( lwdat%cont%p_ref_cont%header%a_contig == 1 ) then
36750. !dir$ suppress (lwdat%cont%p_ref_cont%base_addr)(lwdat%cont%p_ref_cont%dim_1%LB, lwdat%cont%p_ref_cont%dim_2%LB, 0)
36750.          t$11081 = loc( (lwdat%cont%p_ref_cont%base_addr)(lwdat%cont%p_ref_cont%dim_1%LB, lwdat%cont%p_ref_cont%dim_2%LB, 0) )
36750.       else
36750.          t$11082 = lwdat%cont%p_ref_cont%dim_1%EX
36750.          t$11083 = lwdat%cont%p_ref_cont%dim_2%EX
36750.          t$11087 = int( _alloc( max( 0, max( 0, lwdat%cont%p_ref_cont%dim_2%EX ) * max( 0, lwdat%cont%p_ref_cont%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11086, lwdat%cont%p_ref_cont )
36750. !dir$ suppress t$11086
36750.          t$11081 = loc( t$11086 )
36750.       endif
36750.       t$11089 = 0
36750.       t$11090 = 0
36750.       t$11094 = 0
36750.       if ( lwdat%cont%t_ref_cont%header%a_contig == 1 ) then
36750. !dir$ suppress (lwdat%cont%t_ref_cont%base_addr)(lwdat%cont%t_ref_cont%dim_1%LB, lwdat%cont%t_ref_cont%dim_2%LB, 0)
36750.          t$11088 = loc( (lwdat%cont%t_ref_cont%base_addr)(lwdat%cont%t_ref_cont%dim_1%LB, lwdat%cont%t_ref_cont%dim_2%LB, 0) )
36750.       else
36750.          t$11089 = lwdat%cont%t_ref_cont%dim_1%EX
36750.          t$11090 = lwdat%cont%t_ref_cont%dim_2%EX
36750.          t$11094 = int( _alloc( max( 0, max( 0, lwdat%cont%t_ref_cont%dim_2%EX ) * max( 0, lwdat%cont%t_ref_cont%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11093, lwdat%cont%t_ref_cont )
36750. !dir$ suppress t$11093
36750.          t$11088 = loc( t$11093 )
36750.       endif
36753.       t$11096 = 0
36753.       t$11097 = 0
36753.       t$11098 = 0
36753.       t$11103 = 0
36753.       if ( lwdat%aerosol%abs%header%a_contig == 1 ) then
36753. !dir$ suppress (lwdat%aerosol%abs%base_addr)(lwdat%aerosol%abs%dim_1%LB, lwdat%aerosol%abs%dim_2%LB, lwdat%aerosol%abs%dim_3%LB, 0)
36753.          t$11095 = loc( (lwdat%aerosol%abs%base_addr)(lwdat%aerosol%abs%dim_1%LB, lwdat%aerosol%abs%dim_2%LB, lwdat%aerosol%abs%dim_3%LB, 0) )
36753.       else
36753.          t$11096 = lwdat%aerosol%abs%dim_1%EX
36753.          t$11097 = lwdat%aerosol%abs%dim_2%EX
36753.          t$11098 = lwdat%aerosol%abs%dim_3%EX
36753.          t$11103 = int( _alloc( max( 0, max( 0, lwdat%aerosol%abs%dim_2%EX ) * max( 0, lwdat%aerosol%abs%dim_1%EX ) * max( 0, lwdat%aerosol%abs%dim_3%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11102, lwdat%aerosol%abs )
36753. !dir$ suppress t$11102
36753.          t$11095 = loc( t$11102 )
36753.       endif
36753.       t$11105 = 0
36753.       t$11106 = 0
36753.       t$11107 = 0
36753.       t$11112 = 0
36753.       if ( lwdat%aerosol%scat%header%a_contig == 1 ) then
36753. !dir$ suppress (lwdat%aerosol%scat%base_addr)(lwdat%aerosol%scat%dim_1%LB, lwdat%aerosol%scat%dim_2%LB, lwdat%aerosol%scat%dim_3%LB, 0)
36753.          t$11104 = loc( (lwdat%aerosol%scat%base_addr)(lwdat%aerosol%scat%dim_1%LB, lwdat%aerosol%scat%dim_2%LB, lwdat%aerosol%scat%dim_3%LB, 0) )
36753.       else
36753.          t$11105 = lwdat%aerosol%scat%dim_1%EX
36753.          t$11106 = lwdat%aerosol%scat%dim_2%EX
36753.          t$11107 = lwdat%aerosol%scat%dim_3%EX
36753.          t$11112 = int( _alloc( max( 0, max( 0, lwdat%aerosol%scat%dim_2%EX ) * max( 0, lwdat%aerosol%scat%dim_1%EX ) * max( 0, lwdat%aerosol%scat%dim_3%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11111, lwdat%aerosol%scat )
36753. !dir$ suppress t$11111
36753.          t$11104 = loc( t$11111 )
36753.       endif
36754.       t$11114 = 0
36754.       t$11117 = 0
36754.       if ( lwdat%aerosol%n_aerosol_phf_term%header%a_contig == 1 ) then
36754. !dir$ suppress (lwdat%aerosol%n_aerosol_phf_term%base_addr)(lwdat%aerosol%n_aerosol_phf_term%dim_1%LB, 0)
36754.          t$11113 = loc( (lwdat%aerosol%n_aerosol_phf_term%base_addr)(lwdat%aerosol%n_aerosol_phf_term%dim_1%LB, 0) )
36754.       else
36754.          t$11114 = lwdat%aerosol%n_aerosol_phf_term%dim_1%EX
36754.          t$11117 = int( _alloc( max( 0, 4 * max( 0, lwdat%aerosol%n_aerosol_phf_term%dim_1%EX ) ) ), 8 )
36699.          call _f90_copy_from_dv( t$11116, lwdat%aerosol%n_aerosol_phf_term )
36754. !dir$ suppress t$11116
36754.          t$11113 = loc( t$11116 )
36754.       endif
36754.       t$11119 = 0
36754.       t$11120 = 0
36754.       t$11121 = 0
36754.       t$11122 = 0
36754.       t$11128 = 0
36754.       if ( lwdat%aerosol%phf_fnc%header%a_contig == 1 ) then
36754. !dir$ suppress (lwdat%aerosol%phf_fnc%base_addr)(lwdat%aerosol%phf_fnc%dim_1%LB, lwdat%aerosol%phf_fnc%dim_2%LB, lwdat%aerosol%phf_fnc%dim_3%LB, lwdat%aerosol%phf_fnc%dim_4%LB, 0)
36754.          t$11118 = loc( (lwdat%aerosol%phf_fnc%base_addr)(lwdat%aerosol%phf_fnc%dim_1%LB, lwdat%aerosol%phf_fnc%dim_2%LB, lwdat%aerosol%phf_fnc%dim_3%LB, lwdat%aerosol%phf_fnc%dim_4%LB, 0) )
36754.       else
36754.          t$11119 = lwdat%aerosol%phf_fnc%dim_1%EX
36754.          t$11120 = lwdat%aerosol%phf_fnc%dim_2%EX
36754.          t$11121 = lwdat%aerosol%phf_fnc%dim_3%EX
36754.          t$11122 = lwdat%aerosol%phf_fnc%dim_4%EX
36754.          t$11128 = int( _alloc( max( 0, max( 0, lwdat%aerosol%phf_fnc%dim_2%EX ) * max( 0, lwdat%aerosol%phf_fnc%dim_1%EX ) * max( 0, lwdat%aerosol%phf_fnc%dim_3%EX ) * max( 0, lwdat%aerosol%phf_fnc%dim_4%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11127, lwdat%aerosol%phf_fnc )
36754. !dir$ suppress t$11127
36754.          t$11118 = loc( t$11127 )
36754.       endif
36755.       t$11130 = 0
36755.       t$11133 = 0
36755.       if ( lwdat%aerosol%i_aerosol_parm%header%a_contig == 1 ) then
36755. !dir$ suppress (lwdat%aerosol%i_aerosol_parm%base_addr)(lwdat%aerosol%i_aerosol_parm%dim_1%LB, 0)
36755.          t$11129 = loc( (lwdat%aerosol%i_aerosol_parm%base_addr)(lwdat%aerosol%i_aerosol_parm%dim_1%LB, 0) )
36755.       else
36755.          t$11130 = lwdat%aerosol%i_aerosol_parm%dim_1%EX
36755.          t$11133 = int( _alloc( max( 0, 4 * max( 0, lwdat%aerosol%i_aerosol_parm%dim_1%EX ) ) ), 8 )
36699.          call _f90_copy_from_dv( t$11132, lwdat%aerosol%i_aerosol_parm )
36755. !dir$ suppress t$11132
36755.          t$11129 = loc( t$11132 )
36755.       endif
36755.       t$11135 = 0
36755.       t$11138 = 0
36755.       if ( lwdat%aerosol%nhumidity%header%a_contig == 1 ) then
36755. !dir$ suppress (lwdat%aerosol%nhumidity%base_addr)(lwdat%aerosol%nhumidity%dim_1%LB, 0)
36755.          t$11134 = loc( (lwdat%aerosol%nhumidity%base_addr)(lwdat%aerosol%nhumidity%dim_1%LB, 0) )
36755.       else
36755.          t$11135 = lwdat%aerosol%nhumidity%dim_1%EX
36755.          t$11138 = int( _alloc( max( 0, 4 * max( 0, lwdat%aerosol%nhumidity%dim_1%EX ) ) ), 8 )
36699.          call _f90_copy_from_dv( t$11137, lwdat%aerosol%nhumidity )
36755. !dir$ suppress t$11137
36755.          t$11134 = loc( t$11137 )
36755.       endif
36755.       t$11140 = 0
36755.       t$11141 = 0
36755.       t$11145 = 0
36755.       if ( lwdat%aerosol%humidities%header%a_contig == 1 ) then
36755. !dir$ suppress (lwdat%aerosol%humidities%base_addr)(lwdat%aerosol%humidities%dim_1%LB, lwdat%aerosol%humidities%dim_2%LB, 0)
36755.          t$11139 = loc( (lwdat%aerosol%humidities%base_addr)(lwdat%aerosol%humidities%dim_1%LB, lwdat%aerosol%humidities%dim_2%LB, 0) )
36755.       else
36755.          t$11140 = lwdat%aerosol%humidities%dim_1%EX
36755.          t$11141 = lwdat%aerosol%humidities%dim_2%EX
36755.          t$11145 = int( _alloc( max( 0, max( 0, lwdat%aerosol%humidities%dim_2%EX ) * max( 0, lwdat%aerosol%humidities%dim_1%EX ) * 8 ) ), 8 )
36699.          call _f90_copy_from_dv( t$11144, lwdat%aerosol%humidities )
36755. !dir$ suppress t$11144
36755.          t$11139 = loc( t$11144 )
36755.       endif
36699.       ipa$34270 = .false.
36699.       ipa$34271 = .true.
36699.       ipa$34272 = .true.
36699.       ipa$34273 = .true.
36699.       ipa$34274 = .true.
36699.       ipa$34275 = .true.
36699.       ipa$34276 = .true.
36699.       ipa$34277 = 1
36699.       ipa$34278 = .true.
36699.       ipa$34279 = 2
36699.       ipa$34280 = 12
36699.       ipa$34281 = 0
36699.       ipa$34282 = 0
36699.       ipa$34283 = 0
36699.       ipa$34284 = 0
36699.       ipa$34285 = 0
36699.       ipa$34286 = 0.0
36699.       ipa$34287 = 0.0
36699.       ipa$34288 = .true.
36699.       ipa$34289 = 0
36699.       ipa$34290 = 0
36699.       ipa$34291 = 1
36699.       ipa$34292 = 0
36699.       ipa$34296 = 0
36699.       ipa$34298 = 0
36699.       ipa$34300 = .true.
36699.       ipa$34301 = 1
36699.       ipa$34302 = 14
36699.       ipa$34304 = 1
36699.       ipa$34305 = 9
36699.       ipa$34316 = 2
36699.       ipa$34321 = .true.
36699.       ipa$34328 = 1
36699.       ipa$34336 = .false.
36699.       ipa$34384 = 0.0
36699.       ipa$34385 = 0.0
36699.       ipa$34386 = 1
36699.       ipa$34387 = 1
36699.       ipa$34400 = 1
36699.       ipa$34401 = 1
36699.       ipa$34430 = .true.
36699.       ipa$34431 = 13
36699.       ipa$34441 = .false.
36699.       ipa$34455 = 1
36699.       ipa$34456 = 1
36699.       ipa$34457 = 1
36699.       ipa$34458 = 1
36699.       ipa$34459 = 1
36699.       ipa$34460 = 25
36699.       ipa$34461 = 2
36699.       ipa$34462 = 2
36699.       ipa$34463 = 5
36699.       ipa$34464 = 1
36699.       ipa$34465 = 1
36699.       ipa$34466 = 1
36699.       ipa$34467 = 1
36699.       ipa$34468 = 1
36699.       ipa$34469 = 1
36699.       ipa$34470 = 1
36699.       ipa$34471 = 1
36699.       ipa$34472 = 3
36699.       ipa$34473 = 4
36699.       ipa$34474 = 4
36699.       ipa$34475 = 18
36699.       ipa$34476 = 1
36699.       ipa$34477 = 1
36699.       call radiance_calc( ierr, ipa$34270, ipa$34271, ipa$34272, ipa$34273, ipa$34274, ipa$34275, ipa$34276, ipa$34277, ipa$34278, ipa$34279, ipa$34280, ipa$34281, ipa$34282, ipa$34283, ipa$34284, ipa$34285, ipa$34286, ipa$34287, ipa$34288, ipa$34289, ipa$34290, ipa$34291, ipa$34292, direction(1, 1, 1), ipa$34296, viewing_level(1), ipa$34298, i_scatter_method(1), ipa$34300, ipa$34301, ipa$34302, map_band_channel(1), lwdat%dim%nd_band, ipa$34304, ipa$34305, weight_band(1), nd_profile, nd_layer, (pres%base_addr)(1, 1, 0), (temp%base_addr)(1, 1, 0), (t_ground%base_addr)(1, 0), (t_level%base_addr)(1, 0, 0), (d_mass%base_addr)(1, 1, 0), ipa$34316, (zen_0%base_addr)(1, 0), (solar_irrad%base_addr)(1, 0), wb_dummy(1), wb_dummy(1), lwdat%planck%n_deg_fit, t$10963, lwdat%planck%t_ref_planck, ipa$34321, i_gas_overlap(1), i_gas, (gas_mix_ratio%base_addr)(1, 1, 1, 0), t$10970, t$10975, t$10982, t$10989, t$10998, t$11007, t$11014, t$11021, t$11032, t$11039, l_doppler(1), doppler_correction(1), ipa$34328, (rho_alb%base_addr)(1, 1, 1, 0), f_brdf(1, 0, 0, 0), ipa$34336, i_dummy, i_dummy, list_dummy(1), rho_alb_dummy(1, 1, 1, 1), tt_dummy(1, 1), tt_dummy(1, 1), t$11046, t$11051, lwdat%cont%index_water, t$11058, t$11065, t$11072, t$11081, t$11088, lwdat%aerosol%n_aerosol, (aerosol_mix_ratio%base_addr)(1, 1, 1, 0), t$11095, t$11104, t$11113, t$11118, t$11129, t$11134, t$11139, n_opt_level_aerosol_prsc(1), n_phase_term_aerosol_prsc(1), aerosol_pressure_prsc(1, 1, 1), aerosol_absorption_prsc(1, 1, 1, 1), aerosol_scattering_prsc(1, 1, 1, 1), aerosol_phase_fnc_prsc(1, 1, 1, 1, 1), n_condensed, type_condensed(1), i_cloud, i_cloud_representation, (w_cloud%base_addr)(1, 1, 0), n_cloud_type, (frac_cloud%base_addr)(1, 1, 1, 0), (condensed_mix_ratio%base_addr)(1, 1, 1, 0), (condensed_dim_char%base_addr)(1, 1, 1, 0), i_condensed_param(1), condensed_n_phf(1), condensed_param_list(1, 1, 1), ipa$34384, ipa$34385, ipa$34386, ipa$34387, drop_pressure_prsc(1, 1), drop_absorption_prsc(1, 1, 1), drop_scattering_prsc(1, 1, 1), drop_phase_fnc_prsc(1, 1, 1, 1), ipa$34400, ipa$34401, ice_pressure_prsc(1, 1), ice_absorption_prsc(1, 1, 1), ice_scattering_prsc(1, 1, 1), ice_phase_fnc_prsc(1, 1, 1, 1), (flux_direct%base_addr)(1, 0, 1, 0), (flux_down%base_addr)(1, 0, 1, 0), (flux_up%base_addr)(1, 0, 1, 0), radiance(1, 1, 1, 1), photolysis(1, 1, 1), ipa$34430, ipa$34431, (flux_direct_clear%base_addr)(1, 0, 1, 0), (flux_down_clear%base_addr)(1, 0, 1, 0), (flux_up_clear%base_addr)(1, 0, 1, 0), ipa$34441, wb_dummy(1), tt_dummy(1, 1), tt_dummy(1, 1), tt_dummy(1, 1), ft_dummy(1, 1, 1), ft_dummy(1, 1, 1), nd_profile, nd_layer, ipa$34455, nd_layer, ipa$34456, nd_2sg_profile, nd_flux_profile, ipa$34457, ipa$34458, ipa$34459, lwdat%dim%nd_band, lwdat%dim%nd_species, ipa$34460, lwdat%dim%nd_scale_variable, lwdat%dim%nd_continuum, lwdat%dim%nd_aerosol_species, lwdat%dim%nd_humidity, lwdat%dim%nd_cloud_parameter, lwdat%dim%nd_thermal_coeff, ipa$34461, ipa$34462, ipa$34463, ipa$34464, ipa$34465, ipa$34466, ipa$34467, lwdat%dim%nd_phase_term, ipa$34468, ipa$34469, ipa$34470, ipa$34471, ipa$34472, ipa$34473, ipa$34474, ipa$34475, ipa$34476, ipa$34477 )
36755.       if ( lwdat%aerosol%humidities%header%a_contig /= 1 ) then
36755.          _free( t$11145 )
36755.       endif
36755.       if ( lwdat%aerosol%nhumidity%header%a_contig /= 1 ) then
36755.          _free( t$11138 )
36755.       endif
36755.       if ( lwdat%aerosol%i_aerosol_parm%header%a_contig /= 1 ) then
36755.          _free( t$11133 )
36755.       endif
36754.       if ( lwdat%aerosol%phf_fnc%header%a_contig /= 1 ) then
36754.          _free( t$11128 )
36754.       endif
36754.       if ( lwdat%aerosol%n_aerosol_phf_term%header%a_contig /= 1 ) then
36754.          _free( t$11117 )
36754.       endif
36753.       if ( lwdat%aerosol%scat%header%a_contig /= 1 ) then
36753.          _free( t$11112 )
36753.       endif
36753.       if ( lwdat%aerosol%abs%header%a_contig /= 1 ) then
36753.          _free( t$11103 )
36753.       endif
36750.       if ( lwdat%cont%t_ref_cont%header%a_contig /= 1 ) then
36750.          _free( t$11094 )
36750.       endif
36750.       if ( lwdat%cont%p_ref_cont%header%a_contig /= 1 ) then
36750.          _free( t$11087 )
36750.       endif
36749.       if ( lwdat%cont%scale_cont%header%a_contig /= 1 ) then
36749.          _free( t$11080 )
36749.       endif
36749.       if ( lwdat%cont%i_scale_fnc_cont%header%a_contig /= 1 ) then
36749.          _free( t$11071 )
36749.       endif
36749.       if ( lwdat%cont%k_cont%header%a_contig /= 1 ) then
36749.          _free( t$11064 )
36749.       endif
36748.       if ( lwdat%cont%index_continuum%header%a_contig /= 1 ) then
36748.          _free( t$11057 )
36748.       endif
36748.       if ( lwdat%cont%n_band_continuum%header%a_contig /= 1 ) then
36748.          _free( t$11050 )
36748.       endif
36739.       if ( lwdat%gas%t_ref%header%a_contig /= 1 ) then
36739.          _free( t$11045 )
36739.       endif
36739.       if ( lwdat%gas%p_ref%header%a_contig /= 1 ) then
36739.          _free( t$11038 )
36739.       endif
36738.       if ( lwdat%gas%scale%header%a_contig /= 1 ) then
36738.          _free( t$11031 )
36738.       endif
36738.       if ( lwdat%gas%i_scale_fnc%header%a_contig /= 1 ) then
36738.          _free( t$11020 )
36738.       endif
36737.       if ( lwdat%gas%i_scale_k%header%a_contig /= 1 ) then
36737.          _free( t$11013 )
36737.       endif
36737.       if ( lwdat%gas%k%header%a_contig /= 1 ) then
36737.          _free( t$11006 )
36737.       endif
36737.       if ( lwdat%gas%w%header%a_contig /= 1 ) then
36737.          _free( t$10997 )
36737.       endif
36737.       if ( lwdat%gas%i_band_k%header%a_contig /= 1 ) then
36737.          _free( t$10988 )
36737.       endif
36736.       if ( lwdat%gas%index_absorb%header%a_contig /= 1 ) then
36736.          _free( t$10981 )
36736.       endif
36736.       if ( lwdat%gas%n_band_absorb%header%a_contig /= 1 ) then
36736.          _free( t$10974 )
36736.       endif
36732.       if ( lwdat%planck%thermal_coeff%header%a_contig /= 1 ) then
36732.          _free( t$10969 )
36732.       endif
36804.       if ( ierr /= 0 ) then
36804.           _substr(t$11146,1,4) = ' '
36804.          call _stop(  _substr(t$11146,1,1) )
36804.       else
36807.          if ( nd_profile > 0 ) then
36808.             if ( nd_layer >= 0 ) then
36808.                $I_L36808_650 = 0
36808.                do
36807.                   $I_L36807_484 = 0
36807. !dir$ ivdep
36807.                   do
36810.                      (flux_net%base_addr)(1 + $I_L36807_484, $I_L36808_650, 1, 0) = (flux_down%base_addr)(1 + $I_L36807_484, $I_L36808_650, 1, 0) + -(flux_up%base_addr)(1 + $I_L36807_484, $I_L36808_650, 1, 0)
36811.                      (flux_net_clear%base_addr)(1 + $I_L36807_484, $I_L36808_650, 1, 0) = (flux_down_clear%base_addr)(1 + $I_L36807_484, $I_L36808_650, 1, 0) + -(flux_up_clear%base_addr)(1 + $I_L36807_484, $I_L36808_650, 1, 0)
36814.                      $I_L36807_484 = 1 + $I_L36807_484
36812.                      if ( $I_L36807_484 >= nd_profile ) exit
36812.                   enddo
36813.                   $I_L36808_650 = 1 + $I_L36808_650
36813.                   if ( $I_L36808_650 >= 1 + nd_layer ) exit
36813.                enddo
36813.             endif
36825.             $I_L36825_486 = 0
36825. !dir$ ivdep
36825.             do
36827.                lw_toa_up_clr(1 + $I_L36825_486) = lw_toa_up_clr(1 + $I_L36825_486) + (flux_up_clear%base_addr)(1 + $I_L36825_486, 0, 1, 0)
36828.                lw_toa_up(1 + $I_L36825_486) = lw_toa_up(1 + $I_L36825_486) + (flux_up%base_addr)(1 + $I_L36825_486, 0, 1, 0)
36830.                lw_sfc_net_clr(1 + $I_L36825_486) = lw_sfc_net_clr(1 + $I_L36825_486) + -(flux_net_clear%base_addr)(1 + $I_L36825_486, nd_layer, 1, 0)
36831.                lw_sfc_net(1 + $I_L36825_486) = lw_sfc_net(1 + $I_L36825_486) + -(flux_net%base_addr)(1 + $I_L36825_486, nd_layer, 1, 0)
36832.                lw_sfc_down_clr(1 + $I_L36825_486) = lw_sfc_down_clr(1 + $I_L36825_486) + (flux_down_clear%base_addr)(1 + $I_L36825_486, nd_layer, 1, 0)
36833.                lw_sfc_down(1 + $I_L36825_486) = lw_sfc_down(1 + $I_L36825_486) + (flux_down%base_addr)(1 + $I_L36825_486, nd_layer, 1, 0)
36835.                $I_L36825_486 = 1 + $I_L36825_486
36834.                if ( $I_L36825_486 >= nd_profile ) exit
36834.             enddo
36846.             if ( kmax > 0 ) then
36845.                $I_L36845_732 = 0
36845.                do
36846.                   $I_L36846_726 = 0
36846. !dir$ blocking_size( 0, 0 )
36846.                   do
36845.                      $I_L36845_488 = 0
36845. !dir$ ivdep
36845. !dir$ blocking_size( 256, 256 )
36845.                      do
36848.                         lw_cool($I_L36845_488 + 256 * $I_L36845_732 + 1, 1 + $I_L36846_726) = lw_cool($I_L36845_488 + 256 * $I_L36845_732 + 1, 1 + $I_L36846_726) + ( 1.0/(d_mass%base_addr)($I_L36845_488 + 256 * $I_L36845_732 + 1, ntop + $I_L36846_726 + 1, 0) * ( (flux_net%base_addr)($I_L36845_488 + 256 * $I_L36845_732 + 1, ntop + $I_L36846_726, 1, 0) + -(flux_net%base_addr)($I_L36845_488 + 256 * $I_L36845_732 + 1, ntop + $I_L36846_726 + 1, 1, 0) ) * 9.9502487562189048e-4 )
36852.                         lw_cool_clr($I_L36845_488 + 256 * $I_L36845_732 + 1, 1 + $I_L36846_726) = lw_cool_clr($I_L36845_488 + 256 * $I_L36845_732 + 1, 1 + $I_L36846_726) + ( 1.0/(d_mass%base_addr)($I_L36845_488 + 256 * $I_L36845_732 + 1, ntop + $I_L36846_726 + 1, 0) * ( (flux_net_clear%base_addr)($I_L36845_488 + 256 * $I_L36845_732 + 1, ntop + $I_L36846_726, 1, 0) + -(flux_net_clear%base_addr)($I_L36845_488 + 256 * $I_L36845_732 + 1, ntop + $I_L36846_726 + 1, 1, 0) ) * 9.9502487562189048e-4 )
36845.                         $I_L36845_488 = 1 + $I_L36845_488
36855.                         if ( $I_L36845_488 >= min( nd_profile, 256 + 256 * $I_L36845_732 ) + -256 * $I_L36845_732 ) exit
36855.                      enddo
36856.                      $I_L36846_726 = 1 + $I_L36846_726
36856.                      if ( $I_L36846_726 >= kmax ) exit
36856.                   enddo
36845.                   $I_L36845_732 = 1 + $I_L36845_732
36856.                   if ( $I_L36845_732 >= 1 + max( 0, -1 + _rsh( 255 + nd_profile, 8 ) ) ) exit
36856.                enddo
36856.             endif
36856.          endif
36863.          $_allo_P23(0) = 0x1000000000001L
36863.          $_allo_P23(1) = loc( pres )
36863.          call __deallocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
36863.          pres%header%assoc = 0
36864.          $_allo_P24(0) = 0x1000000000001L
36864.          $_allo_P24(1) = loc( temp )
36864.          call __deallocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
36864.          temp%header%assoc = 0
36865.          $_allo_P25(0) = 0x1000000000001L
36865.          $_allo_P25(1) = loc( d_mass )
36865.          call __deallocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
36865.          d_mass%header%assoc = 0
36866.          $_allo_P26(0) = 0x1000000000001L
36866.          $_allo_P26(1) = loc( t_ground )
36866.          call __deallocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
36866.          t_ground%header%assoc = 0
36867.          $_allo_P27(0) = 0x1000000000001L
36867.          $_allo_P27(1) = loc( t_level )
36867.          call __deallocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
36867.          t_level%header%assoc = 0
36868.          $_allo_P28(0) = 0x1000000000001L
36868.          $_allo_P28(1) = loc( zen_0 )
36868.          call __deallocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
36868.          zen_0%header%assoc = 0
36869.          $_allo_P29(0) = 0x1000000000001L
36869.          $_allo_P29(1) = loc( solar_irrad )
36869.          call __deallocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
36869.          solar_irrad%header%assoc = 0
36870.          $_allo_P30(0) = 0x1000000000001L
36870.          $_allo_P30(1) = loc( rho_alb )
36870.          call __deallocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
36870.          rho_alb%header%assoc = 0
36872.          $_allo_P31(0) = 0x1000000000001L
36872.          $_allo_P31(1) = loc( gas_mix_ratio )
36872.          call __deallocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
36872.          gas_mix_ratio%header%assoc = 0
36873.          $_allo_P32(0) = 0x1000000000001L
36873.          $_allo_P32(1) = loc( aerosol_mix_ratio )
36873.          call __deallocate( $_allo_P32, 0, 0, _fcd( 0, 0 ) )
36873.          aerosol_mix_ratio%header%assoc = 0
36875.          $_allo_P33(0) = 0x1000000000001L
36875.          $_allo_P33(1) = loc( w_cloud )
36875.          call __deallocate( $_allo_P33, 0, 0, _fcd( 0, 0 ) )
36875.          w_cloud%header%assoc = 0
36876.          $_allo_P34(0) = 0x1000000000001L
36876.          $_allo_P34(1) = loc( frac_cloud )
36876.          call __deallocate( $_allo_P34, 0, 0, _fcd( 0, 0 ) )
36876.          frac_cloud%header%assoc = 0
36877.          $_allo_P35(0) = 0x1000000000001L
36877.          $_allo_P35(1) = loc( condensed_mix_ratio )
36877.          call __deallocate( $_allo_P35, 0, 0, _fcd( 0, 0 ) )
36877.          condensed_mix_ratio%header%assoc = 0
36878.          $_allo_P36(0) = 0x1000000000001L
36878.          $_allo_P36(1) = loc( condensed_dim_char )
36878.          call __deallocate( $_allo_P36, 0, 0, _fcd( 0, 0 ) )
36878.          condensed_dim_char%header%assoc = 0
36879.          $_allo_P37(0) = 0x1000000000001L
36879.          $_allo_P37(1) = loc( clouds )
36879.          call __deallocate( $_allo_P37, 0, 0, _fcd( 0, 0 ) )
36879.          clouds%header%assoc = 0
36881.          $_allo_P38(0) = 0x1000000000001L
36881.          $_allo_P38(1) = loc( flux_direct )
36881.          call __deallocate( $_allo_P38, 0, 0, _fcd( 0, 0 ) )
36881.          flux_direct%header%assoc = 0
36882.          $_allo_P39(0) = 0x1000000000001L
36882.          $_allo_P39(1) = loc( flux_down )
36882.          call __deallocate( $_allo_P39, 0, 0, _fcd( 0, 0 ) )
36882.          flux_down%header%assoc = 0
36883.          $_allo_P40(0) = 0x1000000000001L
36883.          $_allo_P40(1) = loc( flux_up )
36883.          call __deallocate( $_allo_P40, 0, 0, _fcd( 0, 0 ) )
36883.          flux_up%header%assoc = 0
36884.          $_allo_P41(0) = 0x1000000000001L
36884.          $_allo_P41(1) = loc( flux_net )
36884.          call __deallocate( $_allo_P41, 0, 0, _fcd( 0, 0 ) )
36884.          flux_net%header%assoc = 0
36886.          $_allo_P42(0) = 0x1000000000001L
36886.          $_allo_P42(1) = loc( flux_direct_clear )
36886.          call __deallocate( $_allo_P42, 0, 0, _fcd( 0, 0 ) )
36886.          flux_direct_clear%header%assoc = 0
36887.          $_allo_P43(0) = 0x1000000000001L
36887.          $_allo_P43(1) = loc( flux_down_clear )
36887.          call __deallocate( $_allo_P43, 0, 0, _fcd( 0, 0 ) )
36887.          flux_down_clear%header%assoc = 0
36888.          $_allo_P44(0) = 0x1000000000001L
36888.          $_allo_P44(1) = loc( flux_up_clear )
36888.          call __deallocate( $_allo_P44, 0, 0, _fcd( 0, 0 ) )
36888.          flux_up_clear%header%assoc = 0
36889.          $_allo_P45(0) = 0x1000000000001L
36889.          $_allo_P45(1) = loc( flux_net_clear )
36889.          call __deallocate( $_allo_P45, 0, 0, _fcd( 0, 0 ) )
36889.          flux_net_clear%header%assoc = 0
36304.          $_allo_P46(0) = 0x17000000000001L
36304.          $_allo_P46(1) = loc( zen_0 )
36304.          $_allo_P46(2) = loc( w_cloud )
36304.          $_allo_P46(3) = loc( t_level )
36304.          $_allo_P46(4) = loc( t_ground )
36304.          $_allo_P46(5) = loc( temp )
36304.          $_allo_P46(6) = loc( solar_irrad )
36304.          $_allo_P46(7) = loc( rho_alb )
36304.          $_allo_P46(8) = loc( pres )
36304.          $_allo_P46(9) = loc( gas_mix_ratio )
36304.          $_allo_P46(10) = loc( frac_cloud )
36304.          $_allo_P46(11) = loc( flux_up_clear )
36304.          $_allo_P46(12) = loc( flux_up )
36304.          $_allo_P46(13) = loc( flux_net_clear )
36304.          $_allo_P46(14) = loc( flux_net )
36304.          $_allo_P46(15) = loc( flux_down_clear )
36304.          $_allo_P46(16) = loc( flux_down )
36304.          $_allo_P46(17) = loc( flux_direct_clear )
36304.          $_allo_P46(18) = loc( flux_direct )
36304.          $_allo_P46(19) = loc( d_mass )
36304.          $_allo_P46(20) = loc( condensed_mix_ratio )
36304.          $_allo_P46(21) = loc( condensed_dim_char )
36304.          $_allo_P46(22) = loc( clouds )
36304.          $_allo_P46(23) = loc( aerosol_mix_ratio )
36304.          call _dealloc( $_allo_P46, 0, 0, _fcd( 0, 0 ) )
35848.          _free( t$10508 )
35848.       endif
36892.       return
36892.       end
36892.       
34536.       
34536.       module rad_ukmo
36894.       return
36894.       end
36894.       
