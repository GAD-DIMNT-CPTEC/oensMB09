%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Options.f90
Compiled : 10/26/10  15:25:19
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -emacdE -rmda -c
           -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Options.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Options.f90
Date     : 10/26/2010  15:25:30


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,modinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_11067/Options.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.             !
    2.             !  $Author: pkubota $
    3.             !  $Date: 2009/08/06 20:51:02 $
    4.             !  $Revision: 1.29 $
    5.             !
    6.             MODULE Options
    7.               USE Constants, Only: &
    8.                    r8,             &
    9.                    i8
   10.             
   11.               USE Parallelism, ONLY: &
   12.                    MsgOne,           &
   13.                    FatalError
   14.             
   15.               IMPLICIT NONE
   16.               PRIVATE
   17.               INTEGER           , PUBLIC           :: trunc
   18.               INTEGER           , PUBLIC           :: vert
   19.               REAL(KIND=r8)     , PUBLIC           :: dt
   20.               CHARACTER(LEN=200), PUBLIC           :: start
   21.               INTEGER           , PUBLIC           :: IDATEI(4)
   22.               INTEGER           , PUBLIC           :: IDATEW(4)
   23.               INTEGER           , PUBLIC           :: IDATEF(4)
   24.               CHARACTER(LEN=6)  , PUBLIC           :: NMSST
   25.               INTEGER           , PUBLIC           :: DHFCT
   26.               INTEGER           , PUBLIC           :: DHRES
   27.               INTEGER           , PUBLIC           :: DHDHN
   28.               INTEGER           , PUBLIC           :: NHDHN
   29.               INTEGER           , PUBLIC           :: DHEXT
   30.               INTEGER           , PUBLIC           :: NHEXT
   31.               LOGICAL           , PUBLIC           :: DOGRH
   32.               LOGICAL           , PUBLIC           :: DOPRC
   33.               LOGICAL           , PUBLIC           :: DOSMC
   34.               CHARACTER(LEN=5)  , PUBLIC           :: PREFX
   35.               CHARACTER(LEN=5)  , PUBLIC           :: PREFY
   36.               CHARACTER(LEN=1)  , PUBLIC           :: TABLE
   37.               CHARACTER(LEN=199), PUBLIC           :: path_in
   38.               CHARACTER(LEN=200), PUBLIC           :: path_in1
   39.               CHARACTER(LEN=200), PUBLIC           :: dirfNameOutput
   40.             
   41.               INTEGER           , PUBLIC           :: maxtim
   42.               REAL(KIND=r8)     , PUBLIC           :: cth0
   43.               REAL(KIND=r8)     , PUBLIC           :: dct
   44.               INTEGER           , PUBLIC           :: maxtfm
   45.               REAL(KIND=r8)     , PUBLIC           :: ctdh0
   46.               REAL(KIND=r8)     , PUBLIC           :: dctd
   47.               INTEGER           , PUBLIC           :: mdxtfm
   48.               REAL(KIND=r8)     , PUBLIC           :: cteh0
   49.               REAL(KIND=r8)     , PUBLIC           :: dcte
   50.               INTEGER           , PUBLIC           :: mextfm
   51.               INTEGER           , PUBLIC           :: ddelt
   52.             
   53.               CHARACTER(LEN=6 ) , PUBLIC           :: TRC
   54.               CHARACTER(LEN=6 ) , PUBLIC           :: TRCG
   55.               CHARACTER(LEN=4 ) , PUBLIC           :: LV
   56.               CHARACTER(LEN=10) , PUBLIC           :: TruncLev
   57.               CHARACTER(LEN=5 ) , PUBLIC           :: EXTF
   58.               CHARACTER(LEN=5 ) , PUBLIC           :: EXDF
   59.               CHARACTER(LEN=5 ) , PUBLIC           :: EXTH
   60.               CHARACTER(LEN=5 ) , PUBLIC           :: EXDH
   61.               CHARACTER(LEN=5 ) , PUBLIC           :: EXTW
   62.               CHARACTER(LEN=5 ) , PUBLIC           :: EXDW
   63.               CHARACTER(LEN=5 ) , PUBLIC           :: EXTS
   64.             
   65.               INTEGER           , PUBLIC           :: reststep
   66.               CHARACTER(LEN=253), PUBLIC           :: fNameList
   67.               CHARACTER(LEN=253), PUBLIC           :: FNameGDHN
   68.               CHARACTER(LEN=253), PUBLIC           :: FNameGDYN
   69.               CHARACTER(LEN=253), PUBLIC           :: FNameGPRC
   70.               CHARACTER(LEN=253), PUBLIC           :: FNameOutGH
   71.               CHARACTER(LEN=253), PUBLIC           :: FNameTopGH
   72.               CHARACTER(LEN=253), PUBLIC           :: FNamenDrGH
   73.               CHARACTER(LEN=253), PUBLIC           :: FNameRestInput2
   74.               CHARACTER(LEN=253), PUBLIC           :: FNameRestOutput2
   75.               CHARACTER(LEN=253), PUBLIC           :: FNameRestInput1
   76.               CHARACTER(LEN=253), PUBLIC           :: FNameRestOutput1    
   77.               CHARACTER(LEN=253), PUBLIC           :: FNameConvClInp0
   78.               CHARACTER(LEN=253), PUBLIC           :: FNameConvClOut1
   79.               CHARACTER(LEN=253), PUBLIC           :: FNameSibPrgInp0
   80.               CHARACTER(LEN=253), PUBLIC           :: FNameSibPrgOut1
   81.               CHARACTER(LEN=251), PUBLIC           :: fNameInput0
   82.               CHARACTER(LEN=251), PUBLIC           :: fNameInput1
   83.               CHARACTER(LEN=212), PUBLIC           :: fNameNmi
   84.               CHARACTER(LEN=200), PUBLIC           :: fNameSSTAOI
   85.               CHARACTER(LEN=226), PUBLIC           :: fNameSnow
   86.               CHARACTER(LEN=211), PUBLIC           :: fNameSoilms
   87.               CHARACTER(LEN=225), PUBLIC           :: fNameSoilType
   88.               CHARACTER(LEN=229), PUBLIC           :: fNameVegType
   89.               CHARACTER(LEN=225), PUBLIC           :: fNameSoilMoist
   90.               CHARACTER(LEN=206), PUBLIC           :: fNameAlbedo
   91.               CHARACTER(LEN=211), PUBLIC           :: fNameGauss
   92.               CHARACTER(LEN=211), PUBLIC           :: fNameWaves
   93.               CHARACTER(LEN=206), PUBLIC           :: fNameCO2   !hmjb
   94.               CHARACTER(LEN=206), PUBLIC           :: fNameOzone !hmjb
   95.               CHARACTER(LEN=206), PUBLIC           :: fNameSpecSW !hmjb
   96.               CHARACTER(LEN=206), PUBLIC           :: fNameSpecLW !hmjb
   97.               CHARACTER(LEN=206), PUBLIC           :: fNameCnfTbl
   98.               CHARACTER(LEN=206), PUBLIC           :: fNameCnf2Tb
   99.               CHARACTER(LEN=206), PUBLIC           :: fNameLookTb
  100.               CHARACTER(LEN=206), PUBLIC           :: fNameUnitTb
  101.               CHARACTER(LEN=206), PUBLIC           :: fNameSibVeg
  102.               CHARACTER(LEN=206), PUBLIC           :: fNameSibAlb
  103.               CHARACTER(LEN=214), PUBLIC           :: fNameDTable
  104.               CHARACTER(LEN=212), PUBLIC           :: fNameGHLoc
  105.               CHARACTER(LEN=209), PUBLIC           :: fNameGHTable
  106.               CHARACTER(LEN=211), PUBLIC           :: fNameOrgvar
  107.               CHARACTER(LEN=211), PUBLIC           :: fNameSibmsk
  108.               CHARACTER(LEN=211), PUBLIC           :: fNameTg3zrl
  109.               CHARACTER(LEN=255), PUBLIC           :: fNameRouLen
  110.               LOGICAL           , PUBLIC           :: slagr=.FALSE.
  111.               LOGICAL           , PUBLIC           :: SL_twotime_scheme=.FALSE.
  112.               LOGICAL           , PUBLIC           :: mgiven=.FALSE.
  113.               LOGICAL           , PUBLIC           :: gaussgiven=.FALSE.
  114.               LOGICAL           , PUBLIC           :: reducedGrid=.FALSE.
  115.               LOGICAL           , PUBLIC           :: linearGrid=.FALSE.
  116.               LOGICAL           , PUBLIC           :: nlnminit=.TRUE.
  117.               LOGICAL           , PUBLIC           :: diabatic=.TRUE.
  118.               LOGICAL           , PUBLIC           :: eigeninit=.FALSE.
  119.               LOGICAL           , PUBLIC           :: rsettov=.TRUE.
  120.               LOGICAL           , PUBLIC           :: intcosz=.TRUE.
  121.               LOGICAL           , PUBLIC           :: Model1D=.FALSE.
  122.               LOGICAL           , PUBLIC           :: GenRestFiles=.FALSE.
  123.               LOGICAL           , PUBLIC           :: rmRestFiles=.FALSE.
  124.               LOGICAL           , PUBLIC           :: MasCon=.FALSE.
  125.               LOGICAL           , PUBLIC           :: MasCon_ps=.FALSE.
  126.               LOGICAL           , PUBLIC           :: givenfouriergroups=.FALSE.
  127.               INTEGER           , PUBLIC           :: nproc_vert=1
  128.               INTEGER           , PUBLIC           :: nscalars=0
  129.               CHARACTER(LEN=3  ), PUBLIC           :: record_type="vfm"
  130.               INTEGER           , PUBLIC           :: iglsm_w=0
  131.               INTEGER           , PUBLIC           :: tamBlock=512
  132.               INTEGER           , PUBLIC           :: ibdim_size=192
  133.               REAL(KIND=r8)     , PUBLIC           :: swint=1.000000_r8
  134.               REAL(KIND=r8)     , PUBLIC           :: trint=3.000000_r8
  135.               REAL(KIND=r8)     , PUBLIC           :: yrl=365.2500_r8
  136.               INTEGER           , PUBLIC           :: kt=0
  137.               INTEGER           , PUBLIC           :: ktm=-1
  138.               INTEGER           , PUBLIC           :: ktp=0
  139.               INTEGER           , PUBLIC           :: jdt=0
  140.               INTEGER           , PUBLIC           :: monl(12)=(/31,28,31,30,31,30,31,31,30,31,30,31/)
  141.               CHARACTER(len=3)  , PUBLIC           :: iswrad="LCH"
  142.               CHARACTER(len=3)  , PUBLIC           :: ilwrad="HRS"
  143.               CHARACTER(len=3)  , PUBLIC           :: iccon ="KUO"
  144.               CHARACTER(len=3)  , PUBLIC           :: ilcon ="YES"
  145.               CHARACTER(len=4)  , PUBLIC           :: iscon ="TIED"
  146.               CHARACTER(len=4)  , PUBLIC           :: idcon ="NO  "
  147.               CHARACTER(len=4)  , PUBLIC           :: iqadj ="NO  "
  148.               CHARACTER(len=4)  , PUBLIC           :: ipbl  ="YES "
  149.               CHARACTER(len=4)  , PUBLIC           :: ievap ="YES "
  150.               CHARACTER(len=4)  , PUBLIC           :: isens ="YES "
  151.               CHARACTER(len=4)  , PUBLIC           :: idrag ="YES "
  152.               CHARACTER(len=4)  , PUBLIC           :: iqdif ="YES "
  153.               CHARACTER(len=4)  , PUBLIC           :: ifft  ="JMA "
  154.               CHARACTER(len=4)  , PUBLIC           :: igwd  ="YES "
  155.               CHARACTER(len=4)  , PUBLIC           :: isimp ="NO  "
  156.               CHARACTER(len=4)  , PUBLIC           :: ickcfl="NO  "
  157.               CHARACTER(len=4)  , PUBLIC           :: enhdif="YES "
  158.               CHARACTER(LEN=4)  , PUBLIC           :: impdif="YES "
  159.               REAL(KIND=r8)     , PUBLIC           :: asolc=0.22_r8
  160.               REAL(KIND=r8)     , PUBLIC           :: asolm=0.14_r8
  161.               REAL(KIND=r8)     , PUBLIC           :: crdcld=1.0_r8
  162.               INTEGER           , PUBLIC           :: grepar1=1
  163.               INTEGER           , PUBLIC           :: grepar2=3
  164.               REAL(KIND=r8)     , PUBLIC           :: grepar3=85.0_r8
  165.               REAL(KIND=r8)     , PUBLIC           :: grepar4=30.0_r8
  166.               INTEGER           , PUBLIC           :: initlz=2
  167.               INTEGER           , PUBLIC           :: nstep=1
  168.               REAL(KIND=r8)     , PUBLIC           :: fint=6.0_r8
  169.               INTEGER           , PUBLIC           :: intsst=-1
  170.               REAL(KIND=r8)     , PUBLIC           :: sstlag=3.5_r8
  171.               INTEGER           , PUBLIC           :: ndord=4
  172.               INTEGER           , PUBLIC           :: nfiles=1
  173.               INTEGER           , PUBLIC           :: ifin=0
  174.               REAL(KIND=r8)     , PUBLIC           :: filta=0.92e0_r8
  175.             !  REAL(KIND=r8)     , PUBLIC           :: filtb=(1.0_r8-filta)*0.5_r8
  176.               REAL(KIND=r8)     , PUBLIC           :: filtb=0.04_r8
  177.               REAL(KIND=r8)     , PUBLIC           :: percut=27502.0_r8
  178.               REAL(KIND=r8)     , PUBLIC           :: varcut=1.6e5_r8
  179.               REAL(KIND=r8)     , PUBLIC           :: vmax_est=120.0_r8
  180.               INTEGER           , PUBLIC           :: ifalb=0
  181.               INTEGER           , PUBLIC           :: ifsst=-1
  182.               INTEGER           , PUBLIC           :: ifslm=3
  183.               INTEGER           , PUBLIC           :: ifsnw=3
  184.               REAL(KIND=r8)     , PUBLIC           :: co2val=345.0_r8
  185.               INTEGER           , PUBLIC           :: ifco2=0
  186.               CHARACTER(LEN=4)  , PUBLIC           :: co2ipcc="    "
  187.               INTEGER           , PUBLIC           :: ifozone=0
  188.               REAL(KIND=r8)     , PUBLIC           :: ucrit=100.0_r8
  189.               REAL(KIND=r8)     , PUBLIC           :: taucfl=86400.0_r8
  190.               LOGICAL           , PUBLIC           :: ptime=.TRUE.
  191.               LOGICAL           , PUBLIC           :: allghf=.FALSE.
  192.               REAL(KIND=r8)     , PUBLIC           :: dfilta=0.92_r8
  193.               REAL(KIND=r8)     , PUBLIC           :: dpercu=27502.0_r8
  194.               REAL(KIND=r8)     , PUBLIC           :: vcrit=85.00_r8
  195.               REAL(KIND=r8)     , PUBLIC           :: alpha=2.50_r8
  196.               REAL(KIND=r8)     , PUBLIC           :: ucstr=85.0_r8
  197.               REAL(KIND=r8)     , PUBLIC           :: tcflst=21600.0_r8
  198.               REAL(KIND=r8)     , PUBLIC           :: ucupp=70.0_r8
  199.               REAL(KIND=r8)     , PUBLIC           :: tcflup=2160.0_r8
  200.               REAL(KIND=r8)     , PUBLIC           :: slupp=0.020_r8
  201.               INTEGER           , PUBLIC           :: ifddp=10
  202.               LOGICAL           , PUBLIC           :: doprec=.FALSE.
  203.               LOGICAL           , PUBLIC           :: dodyn=.FALSE.
  204.               LOGICAL           , PUBLIC           :: grhflg=.FALSE.
  205.               REAL(KIND=r8)     , PUBLIC           :: sthick=0.65e0_r8
  206.               REAL(KIND=r8)     , PUBLIC           :: sacum=0.46e0_r8
  207.               REAL(KIND=r8)     , PUBLIC           :: acum0=-2.0e-8_r8
  208.               REAL(KIND=r8)     , PUBLIC           :: tbase=273.15e00_r8
  209.               REAL(KIND=r8)     , PUBLIC           :: ubase=0.0e00_r8
  210.               REAL(KIND=r8)     , PUBLIC           :: vbase=1.0e03_r8
  211.               REAL(KIND=r8)     , PUBLIC           :: rbase=30.0e00_r8
  212.               REAL(KIND=r8)     , PUBLIC           :: dbase=2.0e07_r8
  213.               REAL(KIND=r8)     , PUBLIC           :: pbase=10.0e00_r8
  214.               REAL(KIND=r8)     , PUBLIC           :: tfact=0.000000000000000E+00_r8
  215.               REAL(KIND=r8)     , PUBLIC           :: ufact=0.000000000000000E+00_r8
  216.               REAL(KIND=r8)     , PUBLIC           :: vfact=0.000000000000000E+00_r8
  217.               REAL(KIND=r8)     , PUBLIC           :: rfact=0.000000000000000E+00_r8
  218.               REAL(KIND=r8)     , PUBLIC           :: dfact=0.000000000000000E+00_r8
  219.               REAL(KIND=r8)     , PUBLIC           :: pfact=0.000000000000000E+00_r8
  220.               INTEGER           , PUBLIC           :: mkuo=0
  221.               INTEGER           , PUBLIC           :: mlrg=0
  222.               INTEGER           , PUBLIC           :: is=1
  223.               INTEGER           , PUBLIC           :: ki=1
  224.               LOGICAL           , PUBLIC           :: mxrdcc=.TRUE.
  225.               INTEGER           , PUBLIC           :: lcnvl=2
  226.               INTEGER           , PUBLIC           :: lthncl=80
  227.               REAL(KIND=r8)     , PUBLIC           :: rccmbl=3.0_r8
  228.               INTEGER           , PUBLIC           :: icld=1
  229.               INTEGER           , PUBLIC           :: inalb=2
  230.               INTEGER           , PUBLIC           :: mxiter=200
  231.               REAL(KIND=r8)     , PUBLIC           :: dk=8.0E+15_r8
  232.               REAL(KIND=r8)     , PUBLIC           :: tk=6.0E+15_r8
  233.             
  234.             
  235.               !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  236.               !     files
  237.               !     ifxxx=0    xxx is not processed
  238.               !     ifxxx=1    xxx is set to month=idatec(2) in the first call,
  239.               !                but not processed from the subsequent calls.
  240.               !                ifxxx is set to zero after interpolation
  241.               !     ifxxx=2    xxx is interpolated to current day and time every fint
  242.               !                hours synchronized to 00z regardless of initial time.
  243.               !                interpolation is continuous (every time step) if fint<0.
  244.               !     ifxxx=3    xxx is interpolated to current day and time when ifday=0
  245.               !                and tod=0.0 but not processed otherwise
  246.               !                ( appropriate only when xxx is predicted )
  247.               !
  248.               !                the following are for sst only (fint applies as in
  249.               !                ifxxx=2):
  250.               !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  251.               !|********************************* INPUT FILES **************************|
  252.               !| Labels:                                                                |
  253.               !| EXTW = F.unf              EXDN = F.dir                                 |
  254.               !| EXT = 'icn' ou            EXDN(1:2)=EXDW(1:2)= F.                      |
  255.               !|       'inz' ou 'fct' EXDN(3:5)= "dic" if EXT='icn'                     |
  256.               !|   EXDN(3:5)= "din" if EXT='inz'                                        |
  257.               !| EXTS = S.unf              EXDN(3:5)= "dir" if EXT='   '                |
  258.               !| EXDH = F.dir              EXDN(6:6)= "."                               |
  259.               !|                           PREFY= <def em Namelist>                     |
  260.               !| EXTN(1:2)=EXTW(1:2)= F.   PREFX= <def em Namelist>                     |
  261.               !| EXTN(3:5)=EXT(1:3)        Namee= GPRG + PREFX                          |
  262.               !| EXTN(6:6)= "."            Namef= GFCT + PREFX                          |
  263.               !|                                                                        |
  264.               !|------------------------------------------------------------------------|
  265.               !|********************************|****************|**********************|
  266.               !|********** File  Names *********|  Unit  numbers |***    Procedure  ****|
  267.               !|**********             *********|                |* accessing the file *|
  268.               !|********************************|****************|**********************|
  269.               !|--------------------------------|----------------|----------------------|
  270.               !|GFCT<PREFX><labeli><labelc>     | nfcnv0=0=31=32 |  Model (open)        |
  271.               !|<EXTW><trunc><lev>.convcl       | =0->isimp==yes |  FieldsPhysics(      |
  272.               !|                                | =31="warm"     |  InitBoundCond;      |
  273.               !|                                | =32=nfcnv1->   |  InitCheckfile:read) |
  274.               !|                                | "warm"         |                      |
  275.               !|--------------------------------|----------------|----------------------|
  276.               !|GANL<PREFY><labeli><EXTS>.      |  nfin0=18      |  Model (open;read)   |
  277.               !|<trunc><lev> (cold)             |                |  IOLowLevel(ReadHead |
  278.               !|                                |                |  ReadField:read)     |
  279.               !|GFCT<PREFY><labeli><labelc><EXTW|                |                      |
  280.               !|<trunc><lev>.outmdt (warm)      |                |                      |
  281.               !|--------------------------------|----------------|----------------------|
  282.               !|GANL<PREFY><labeli><EXTS>.      |  nfin1=18(cold)|  Model (open;read)   |
  283.               !|<trunc><lev>                    |                |                      |
  284.               !|GFCT<PREFY><labeli><labelc>     |  nfin1=19(warm)|  IOLowLevel(GReadHead|
  285.               !|<EXTW>.<trunc><lev>.outatt      |                |  ;ReadHead: read)    |
  286.               !|--------------------------------|----------------|----------------------|
  287.               !|GL_FAO_01patches.vfm.G<jMax>    |  nfsoiltp=22   |  FieldsPhysics       |
  288.               !|                                |                |  (read_gl_sm_bc:open |
  289.               !|                                |                |  and read)           |
  290.               !|--------------------------------|----------------|----------------------|
  291.               !|GL_VEG_SIB_05patches.vfm.G<jMax>|  nfvegtp=23    |  FieldsPhysics       |
  292.               !|                                |                |  (read_gl_sm_bc:open;|
  293.               !|                                |                |  and read)           |
  294.               !|--------------------------------|----------------|----------------------|
  295.               !|GL_SM.vfm.<labeli>.G<jMax>      |  nfslmtp=24    |  FieldsPhysics       |
  296.               !|                                |                |  (read_gl_sm_bc:open;|
  297.               !|                                |                |  and read)           |
  298.               !|--------------------------------|----------------|----------------------|
  299.               !|TopoVariance.G<jMax>            |  nfvar=33      |  FieldsPhysics       |
  300.               !|<jMax> ---> 5 Digits            |                |  (InitVariancia:open)|
  301.               !|                                |                |  IOLowLevel(ReadVar: |
  302.               !|                                |                |  read)               |
  303.               !|--------------------------------|----------------|----------------------|
  304.               !|Units                           |  nfauntbl=36   |  InputOutput (InitIn-|
  305.               !|                                |                |  putOutput:open;read)|
  306.               !|--------------------------------|----------------|----------------------|
  307.               !|UnitsConvFactor1Table           |  nfcnftbl=37   |  InputOutput (InitIn-|
  308.               !|                                |                |  putOutput:open;read)|
  309.               !|--------------------------------|----------------|----------------------|
  310.               !|UnitsConvFactor2Table           |  nfcnf2tb=38   |  InputOutput (InitIn-|
  311.               !|                                |                |  putOutput:open;read)|
  312.               !|--------------------------------|----------------|----------------------|
  313.               !|UnitsLookUpTable                |  nflooktb=39   |  InputOutput (InitIn-|
  314.               !|                                |                |  putOutput:open;read)|
  315.               !|--------------------------------|----------------|----------------------|
  316.               !|GridHistLocations.G<jMax>       |  nfghloc=42    |  GridHistory (InitGr-|
  317.               !|<jMax> ---> 5 Digits            |                |  idHistory:open;read)|
  318.               !|--------------------------------|----------------|----------------------|
  319.               !|GridHistDesiredTable            |  nfghds=45     |  GridHistory (InitGr-|
  320.               !|                                |                |  idHistory:open;read)|
  321.               !|--------------------------------|----------------|----------------------|
  322.               !|DiagDesiredTable.<pnt>          |  nfdestbl=49   |  Diagnostics(InitDia-|
  323.               !|DiagDesiredTable.<clm>          |                |  gnostics:open;read) |
  324.               !|--------------------------------|----------------|----------------------|
  325.               !|SSTWeekly<labels>.G<jMax>       |  nfsst=50      |  InputOutput (getsbc:|
  326.               !|                                |                |  open); IOLowLevel(  |
  327.               !|<jMax> ---> 5 Digits            |                |  ReadGetSST:read)    |
  328.               !|--------------------------------|----------------|----------------------|
  329.               !|Snow<labeli>.<EXTS>.G<jMax>     |  nfsnw=51      |  InputOutput (getsbc:|
  330.               !|  <jMax> ---> 5 Digits          |                |  open)               |
  331.               !|--------------------------------|----------------|----------------------|
  332.               !|AlbedoSSiB                      |  nfalb=52      |  InputOutput (getsbc:|
  333.               !|                                |                |  open); IOLowLevel(  |
  334.               !|                                |                |  ReadGetALB:read)    |
  335.               !|--------------------------------|----------------|----------------------|
  336.               !|SoilMoisture.G<jMax>            |  nfslm=53      |  InputOutput (getsbc:|
  337.               !|                                |                |  open); IOLowLevel(  |
  338.               !|                                |                |  ReadGetSLM:read)    |
  339.               !|--------------------------------|----------------|----------------------|
  340.               !|co2<labeli>.<trunc><lev>        |  nfco2=54      |  Not used            |
  341.               !|co2clim.<trunc><lev>            |                |                      |
  342.               !|co2mtd.<trunc><lev>             |                |                      |
  343.               !|--------------------------------|----------------|----------------------|
  344.               !|OZONNMC<label>S.unf             |                |                      |
  345.               !|.G<jMax>L<lev>                  |  nfozone=55    |  InputOutput (getsbc:|
  346.               !|ozoneclim.G<jMax>L<lev>         |                |  open)		    |
  347.               !|ozonemtd.G<jMax>L<lev>          |                |                      |
  348.               !|--------------------------------|----------------|----------------------|
  349.               !|spec3a_sw_hadgem1_3             |  nfspecsw=56   | namelist             |
  350.               !|--------------------------------|----------------|----------------------|
  351.               !|spec3a_lw_hadgem1_3             |  nfspeclw=57   | namelist             |
  352.               !|--------------------------------|----------------|----------------------|
  353.               !|DeepSoilTemperature.G<jMax>     |  nftgz0=61     |  FieldsPhysics (Init-|
  354.               !|                                |                |  BoundCond:open)     |
  355.               !|                                |                |  IOLowLevel(ReadGet- |
  356.               !|                                |                |  NFTGZ: read)        |
  357.               !|--------------------------------|----------------|----------------------| 
  358.               !|                                |                |  Roughness Length    |  
  359.               !|RoughnessLength.G<jMax>         |  nfzol=71      |  FieldsPhysics (Init-|
  360.               !|                                |                |  BoundCond:open)     |
  361.               !|                                |                |  IOLowLevel(ReadGet- |
  362.               !|                                |                |  NFTGZ: read)        |
  363.               !|--------------------------------|----------------|----------------------|
  364.               !|                                |                |  Not used            |
  365.               !|diagclouds.dat                  |  nfcldr=74     |  PhyscsDriver(physcs:|
  366.               !|(read/write temporary)          |                |  open,write,read)    |
  367.               !|--------------------------------|----------------|----------------------|
  368.               !|GFCT<PREFX><labeli><labelc>     |  nfsibi=77     |  Model (open)        |
  369.               !|<EXTW>.<trunc><lev>.sibprg      | ou nfsibo(warm)|  FieldsPhysics(Init -|
  370.               !|                                |                |  BoundCond;          |
  371.               !|                                |                |  InitCheckfile:read) |
  372.               !|--------------------------------|----------------|----------------------|
  373.               !|gaussp.G<jMax>                  |  nfgauss=84    |  Diagnostics (opnprg:|
  374.               !|                                |                |  open;write,read)    |
  375.               !|                                |                |                      |
  376.               !|--------------------------------|----------------|----------------------|
  377.               !|mwaves.<trunc>G<jMax>           |  nfwaves=85    |  Diagnostics (opnprg:|
  378.               !|                                |                |  open;write,read)    |
  379.               !|                                |                |                      |
  380.               !|--------------------------------|----------------|----------------------|
  381.               !|NMI.<trunc><lev>                |  nfnmi=80      |  NonLinearNMI(Nlnmi: |
  382.               !|                                |                |  open,read; horiz1:  |
  383.               !|                                |                |  read; horiz2:read;  |
  384.               !|                                |                |  Getmod:open,read    |
  385.               !|                                |                |  Vermod:write;       |
  386.               !|                                |                |  record:write)       |
  387.               !|--------------------------------|----------------|----------------------|
  388.               !|VegetationSSiB                  |  nfsibd =88    |  Surface(vegin:open, |
  389.               !|                                |                |  read)               |
  390.               !|--------------------------------|----------------|----------------------|
  391.               !|VegetationMask.G<jMax>          |  nfsibt=99     |  FieldsPhysics (Init-|
  392.               !|                                |                |  BoundCond:open;read)|
  393.               !|--------------------------------|----------------|----------------------|
  394.               !|------------------------------------------------------------------------|
  395.               !|******************************* OUTPUT FILES ***************************|
  396.               !|------------------------------------------------------------------------|
  397.               !|GFCT<PREFX><labeli><labelc>     |  nfout0=20     |  Model (open;write)  |
  398.               !|<EXTW>.<trunc><lev>.outmdt      |                |                      |
  399.               !|--------------------------------|----------------|----------------------|
  400.               !|GFCT<PREFX><labeli><labelc>     |  nfout1=21     |  Model (open;write)  |
  401.               !|<EXTW>.<trunc><lev>.outatt      |                |  IOLowLevel(GWrite-  |
  402.               !|                                |                |  Head:write)         |
  403.               !|--------------------------------|----------------|----------------------|
  404.               !|GFCT<PREFX><labeli><labelc>     |  nfdrct=25     |  Diagnostics (opnfct:|
  405.               !|<EXDN>.<trunc><lev>             |                |  open); IOLowLevel(  |
  406.               !|                                |                |  WriteDir:write)     |
  407.               !|--------------------------------|----------------|----------------------|
  408.               !|GFCT<PREFX><labeli><labelc>     |  nfdiag=26     |  Diagnostics (opnfct:|
  409.               !|<EXTN>.<trunc><lev>             |                |  open); InputOutput( |
  410.               !|                                |                |  sclout->WriteField: |
  411.               !|                                |                |  write);IOLowLevel(  |
  412.               !|                                |                |  WriteProgHead;      |
  413.               !|                                |                |  WriteField: write)  |
  414.               !|--------------------------------|----------------|----------------------|
  415.               !|GFCT<PREFX><labeli><labelf>F.   |  nffcst=27     |  Diagnostics         |
  416.               !|dir.<trunc><lev>.files          |                |  (opnfct:open;write) |
  417.               !|(F.dir=<EXTW(1:2)> + "dir")     |                |                      |
  418.               !|--------------------------------|----------------|----------------------|
  419.               !|GFCT<PREFX><labeli><labelc>     |  nfcnv1=32     |  Model (open)        |
  420.               !|<EXTW>.<trunc><lev>.convcl      |                |  FieldsPhysics(      |
  421.               !|                                |                |  restartphyscs:write)|
  422.               !|--------------------------------|----------------|----------------------|
  423.               !|GFGH<PREFX><labeli><labelc>     |  nfghdr=43     |  Model (open)        |
  424.               !|<EXDH>.<trunc><lev>             |                |  GridHistory(Init-   |
  425.               !|                                |                |  GridHistory:write)  |
  426.               !|--------------------------------|----------------|----------------------|
  427.               !|GFGH<PREFX><labeli><labelc>     |  nfghtop=44    | GridHistory (Write-  |
  428.               !|F.top.<trunc><lev>              |                | GridHistoryTopo:open)|
  429.               !|                                |                | IOLowLevel(          |
  430.               !|                                |                | WrTopoGrdHist:write) |
  431.               !|--------------------------------|----------------|----------------------|
  432.               !|GFCT<PREFX><labeli><labelc>     |  nfsibo=66     |  Model (open)        |
  433.               !|<EXTW>.<trunc><lev>.sibprg      |                |  FieldsPhysics       |
  434.               !|                                |                | (restartphyscs:write)|
  435.               !|--------------------------------|----------------|----------------------|
  436.               !|diagclouds.dat                  |  nfcldr=74     |  PhyscsDriver(physcs:|
  437.               !|(read/write temporary)          |                |  open,write,read)    |
  438.               !|--------------------------------|----------------|----------------------|
  439.               !|NMI.<trunc><lev>                |  nfnmi=80      |  NonLinearNMI(Nlnmi: |
  440.               !|                                |                |  open,read; horiz1:  |
  441.               !|                                |                |  read; horiz2:read;  |
  442.               !|                                |                |  Getmod:open,read    |
  443.               !|                                |                |  Vermod:write;       |
  444.               !|                                |                |  record:write)       |
  445.               !|--------------------------------|----------------|----------------------|
  446.               !|GPRG<PREFX><labeli><labelc>     |  neprog=81     |  Diagnostics (opnprg:|
  447.               !|                                |                |  open);IOLowLevel(   |
  448.               !|<EXTN>.<trunc><lev>             |                |  WriteProgHead;      |
  449.               !|                                |                |  WriteField: write)  |
  450.               !|--------------------------------|----------------|----------------------|
  451.               !|GPRG<PREFX><labeli><labelc>     |  nedrct =82    |  Diagnostics (opnprg:|
  452.               !|<EXDN>.<trunc><lev>             |                |  open); IOLowLevel(  |
  453.               !|                                |                |  WriteDire:write)    |
  454.               !|--------------------------------|----------------|----------------------|
  455.               !|GPRG<PREFX><labeli><labelf>F.   |  nefcst=83     |  Diagnostics (opnprg:|
  456.               !|<trunc><lev>.files              |                |  open;write)         |
  457.               !|(F.dir=<EXTW(1:2)> + "dir")     |                |                      |
  458.               !|--------------------------------|----------------|----------------------|
  459.               !|gaussp.<trunc>                  |  nfgauss=84    |  Diagnostics (opnprg:|
  460.               !|                                |                |  open;write)         |
  461.               !|                                |                |                      |
  462.               !|--------------------------------|----------------|----------------------|
  463.               !|mwaves.<trunc>                  |  nfwaves=85    |  Diagnostics (opnprg:|
  464.               !|                                |                |  open;write)         |
  465.               !|                                |                |                      |
  466.               !|--------------------------------|----------------|----------------------|
  467.               !|GFCT<PREFX><labeli><labelc>     |  nfghou=91     |  Model (open)        |
  468.               !|<EXTW>.<trunc><lev>             |                |  IOLowLevel(         |
  469.               !|                                |                |  WriteGrdHist:write) |
  470.               !|--------------------------------|----------------|----------------------|
  471.               !|GDHN<PREFX><labeli><labelc>     |  nfdhn=92      |  Model (open)        |
  472.               !|<EXTW>.<trunc><lev>             |                |  IOLowLevel(         |
  473.               !|                                |                |  WriteDiagHead;      |
  474.               !|                                |                |  WriteField:write)   |
  475.               !|--------------------------------|----------------|----------------------|
  476.               !|GPRC<PREFX><labeli><labelc>     |  nfprc=93      |  Model (open)        |
  477.               !|<EXTW>.<trunc><lev>             |                |  IOLowLevel(         |
  478.               !|                                |                |  WriteDiagHead;      |
  479.               !|                                |                |  WriteField:write)   |
  480.               !|--------------------------------|----------------|----------------------|
  481.               !|GDYN<PREFX><labeli><labelf>     |  nfdyn=94      |  Model (open)        |
  482.               !|<EXTW>.<trunc><lev>             |                |  Diagnostics(accpf:  |
  483.               !|                                |                |  write; InputOutput( |
  484.               !|                                |                |  gread4: write       |
  485.               !|------------------------------------------------------------------------|
  486.               ! ************************************************************************
  487.               ! ************* Define I/O file units  ***********************************
  488.               ! ************************************************************************
  489.               INTEGER , PUBLIC                     :: nferr=0      !error print out unit
  490.               !0 no print, 1 less detail, 2 more detail, 3 most detail
  491.               INTEGER , PUBLIC                     :: nfcnv0=0     ! initial information on convective clouds for int. radiation
  492.               INTEGER , PUBLIC                     :: nfprt=6 !standard print out unit
  493.               !0 no print, 1 less detail, 2 more detail, 3 most detail
  494.               INTEGER                              :: nNameList=17     ! namelist read
  495.               INTEGER , PUBLIC                     :: nfin0=18      ! GANLNM input  file at time level t-dt
  496.               INTEGER , PUBLIC                     :: nfin1=18      ! input  file at time level t
  497.               INTEGER , PUBLIC                     :: nfout0=20     ! output file at time level t-dt
  498.               INTEGER , PUBLIC                     :: nfout1=21     ! output file at time level t
  499.               INTEGER , PUBLIC                     :: nfsoiltp=22   ! soil type GL_FAO_01patches file
  500.               INTEGER , PUBLIC                     :: nfvegtp=23    ! vegetation type GL_VEG_SIB_05patches file
  501.               INTEGER , PUBLIC                     :: nfslmtp=24    ! soil moisture GL_SM file
  502.               INTEGER , PUBLIC                     :: nfdrct=25     ! directory for diagnostics
  503.               INTEGER , PUBLIC                     :: nfdiag=26     ! diagnostics
  504.               INTEGER , PUBLIC                     :: nffcst=27     ! intermediate 3-d diagnostics
  505.               INTEGER , PUBLIC                     :: nf2d=28       ! intermediate 2-d diagnostics
  506.               INTEGER , PUBLIC                     :: nfcnv1=32     ! output information on convective clouds for int. radiation
  507.               INTEGER , PUBLIC                     :: nfvar=33      ! surface height variance
  508.               INTEGER , PUBLIC                     :: nfauntbl=36   ! Units file
  509.               INTEGER , PUBLIC                     :: nfcnftbl=37   ! UnitsConvFactor1Table file
  510.               INTEGER , PUBLIC                     :: nfcnf2tb=38   ! UnitsConvFactor2Table file
  511.               INTEGER , PUBLIC                     :: nflooktb=39   ! UnitsLookUpTable file
  512.               INTEGER , PUBLIC                     :: nfghloc=42    ! GridHistLocations.G<jMax> file
  513.               INTEGER , PUBLIC                     :: nfghdr=43     ! GridHistDesiredTable file
  514.               INTEGER , PUBLIC                     :: nfghtop=44    ! GFGH<PREFX><labeli><labelc>F.top.<trunc><lev> topography file
  515.               INTEGER , PUBLIC                     :: nfghds=45     ! GridHistDesiredTable file
  516.               INTEGER , PUBLIC                     :: nfdestbl=49   ! DiagDesiredTable file
  517.               INTEGER , PUBLIC                     :: nfsst=50      ! sst   file
  518.               INTEGER , PUBLIC                     :: nfsnw=51      ! snow   file
  519.               INTEGER , PUBLIC                     :: nfalb=52      ! albedo file
  520.               INTEGER , PUBLIC                     :: nfslm=53      ! soil moisture file
  521.               INTEGER , PUBLIC                     :: nfco2=54      ! co2 file
  522.               INTEGER , PUBLIC                     :: nfzol=71      ! Roughness Length file
  523.               INTEGER , PUBLIC                     :: nfozone=55    ! ozone file
  524.               INTEGER , PUBLIC                     :: nfspecsw=56   ! sw spectral file for ukmet radiation
  525.               INTEGER , PUBLIC                     :: nfspeclw=57   ! lw spectral file for ukmet radiation
  526.               INTEGER , PUBLIC                     :: nftgz0=61     ! ground temperature file
  527.               INTEGER , PUBLIC                     :: nfsibo=66     ! sib prognostic variable output file
  528.               INTEGER , PUBLIC                     :: nfcldr=74     ! temporary diagclouds.dat
  529.               INTEGER , PUBLIC                     :: nfsibi=77     ! sib prognostic variable input  file
  530.               INTEGER , PUBLIC                     :: nfnmi=80      ! normal modes
  531.               INTEGER , PUBLIC                     :: neprog=81     ! neprog : unit file number to output extra prognostics
  532.               INTEGER , PUBLIC                     :: nedrct=82     ! nedrct : unit file number to output description of extra prognostics
  533.               INTEGER , PUBLIC                     :: nefcst=83     ! nefcst : unit file number to output files list of extra prognostics
  534.               INTEGER , PUBLIC                     :: nfgauss=84    ! gaussian points and weights
  535.               INTEGER , PUBLIC                     :: nfwaves=85    ! wave numbers (m) per latitude
  536.               INTEGER , PUBLIC                     :: nfsibd=88     ! sib vegetation parameter
  537.               INTEGER , PUBLIC                     :: nfghou=91     ! gridhistory file
  538.               INTEGER , PUBLIC                     :: nfdhn=92      ! ustress and vstress at surface
  539.               INTEGER , PUBLIC                     :: nfprc=93      ! instantaneous total and convective precipitation
  540.               INTEGER , PUBLIC                     :: nfdyn=94      ! first level of divergence, vorticity, virtual temperature, 
  541.               !                                                     ! specific humidity and log of surface pressure at every time step
  542.               INTEGER , PUBLIC                     :: nfsibt=99     ! sib surface vegetation type
  543.               INTEGER , PUBLIC                     :: nfctrl(100)=(/& ! print control: from 0 (noprint) to 3 (most detail)
  544.                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &
  545.                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &
  546.                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &
  547.                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &
  548.                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 /)
  549.               !
  550.               ! ************* END Define I/O file units ***********************************
  551.             
  552.             
  553.               INTEGER         , PUBLIC             :: maxtid
  554.               INTEGER         , PUBLIC             :: ifilt
  555.             
  556.               INTEGER , PUBLIC                     :: idate (4)
  557.               INTEGER , PUBLIC                     :: idatec(4)
  558.             
  559.               REAL(KIND=r8)    , PUBLIC            :: delt
  560.             
  561.               REAL(KIND=r8)    , PUBLIC            :: cflric
  562.             
  563.               INTEGER , PUBLIC                     :: istrt
  564.               LOGICAL , PUBLIC                     :: first
  565.               REAL(KIND=r8)    , PUBLIC            :: dtc3x
  566.               REAL(KIND=r8)    , PUBLIC            :: epsflt
  567.               INTEGER , PUBLIC                     :: intg
  568.               INTEGER , PUBLIC                     :: dogwd
  569.             
  570.             
  571.               CHARACTER(LEN=10 ), PUBLIC           :: labelsi
  572.               CHARACTER(LEN=10 ), PUBLIC           :: labelsj
  573.               LOGICAL , PUBLIC, ALLOCATABLE        :: cdhl  (:)
  574.               LOGICAL , PUBLIC, ALLOCATABLE        :: cthl  (:)
  575.               INTEGER, PUBLIC :: schemes=1 ! schemes=1 SSiB_Driver
  576.             
  577.               PUBLIC :: ReadNameList
  578.               PUBLIC :: SetTimeOutput
  579.               PUBLIC :: SetOutPut
  580.               PUBLIC :: DumpOptions
  581.               PUBLIC :: SetFileNameGaussPoints
  582.               PUBLIC :: SetFileNameWavesPerLat
  583.             
  584.               PUBLIC :: CreateFileName
  585.               INTERFACE CreateFileName
  586.                  MODULE PROCEDURE FileNameAnalis, FileNameRest,FileNameGeral
  587.               END INTERFACE
  588.             
  589.             CONTAINS
  590.             
  591.             
  592.               !*** Read Namelist File and complete options ***
  593.             
  594.             
  595.               SUBROUTINE ReadNameList()
  596.                 INTEGER :: ierr
  597.                 CHARACTER(LEN=8) :: c0
  598.                 CHARACTER(LEN=*), PARAMETER :: h="**(ReadNameList)**"
  599.             
  600.                 NAMELIST /MODEL_RES/trunc,vert,dt,idatei,idatew,idatef,nmsst,&
  601.                      dhfct,dhres,dhdhn,nhdhn,dhext,nhext,dogrh,&
  602.                      doprc,prefx,prefy,table,path_in,dirfNameOutput
  603.             
  604.                 NAMELIST /MODEL_IN/slagr,SL_twotime_scheme,nlnminit,diabatic,eigeninit, &
  605.                      rsettov,intcosz,Model1D,mgiven,gaussgiven,reducedGrid,linearGrid, &
  606.                      GenRestFiles,rmRestFiles,MasCon,MasCon_ps,nscalars, &
  607.                      record_type,iglsm_w,tamBlock,ibdim_size,givenfouriergroups, &
  608.                      nproc_vert
  609.             
  610.                 NAMELIST /PHYSPROC/iswrad,ilwrad,iccon,ilcon,iqdif, &
  611.                      iscon,igwd ,isimp,enhdif,asolc,asolm,crdcld, &
  612.                      grepar1,grepar2,grepar3,grepar4,iglsm_w
  613.             
  614.                 NAMELIST /PHYSCS/mxrdcc,lcnvl ,lthncl ,rccmbl ,swint  , &
  615.                      trint ,icld  ,inalb  ,mxiter ,co2val , &
  616.                      sthick,sacum ,acum0  ,tbase  ,mlrg   , &
  617.                      is    ,ki, cflric
  618.             
  619.                 NAMELIST /COMCON/initlz , nstep  , fint   , intsst , ndord  ,&
  620.                      filta  , percut , varcut , ifsst  , &
  621.                      ifsnw  , ifalb  , ifslm  , allghf , &
  622.                      ifco2  , ifozone  , &
  623.                      dpercu , vcrit  , alpha  , dodyn  , dk, tk
  624.             
  625.                 ! Reads namelist file
  626.                 !INTEGER :: IARGC
  627.                 !EXTERNAL IARGC
  628.             
  629.                 !if (iargc().eq.0) then
  630.                    fnamelist="MODELIN"
  631.                 !else
  632.                 !   call getarg(1,fnamelist)
  633.                 !endif
  634.             
  635.                 OPEN(unit=nNameList, file=fNameList, action="read", status="old", iostat=ierr)
  636.                 IF (ierr /= 0) THEN
  637.                    WRITE(c0,"(i8)") ierr
  638.                    CALL FatalError(h//" open namelist file "//TRIM(ADJUSTL(fNameList))//&
  639.                         " returned iostat="//TRIM(ADJUSTL(c0)))
  640.                 END IF
  641.                 READ (nNameList,MODEL_RES, iostat=ierr)
  642.                 IF (ierr /= 0) THEN
  643.                    WRITE(c0,"(i8)") ierr
  644.                    CALL FatalError(h//" read namelist MODEL_RES from file "//&
  645.                         TRIM(ADJUSTL(fNameList))//" returned iostat="//&
  646.                         TRIM(ADJUSTL(c0)))
  647.                 END IF
  648.                 READ (nNameList, MODEL_IN, iostat=ierr)
  649.                 IF (ierr /= 0) THEN
  650.                    WRITE(c0,"(i8)") ierr
  651.                    CALL FatalError(h//" read namelist MODEL_IN from file "//&
  652.                         TRIM(ADJUSTL(fNameList))//" returned iostat="//&
  653.                         TRIM(ADJUSTL(c0)))
  654.                 END IF
  655.                 READ (nNameList, PHYSPROC, iostat=ierr)
  656.                 IF (ierr /= 0) THEN
  657.                    WRITE(c0,"(i8)") ierr
  658.                    CALL FatalError(h//" read namelist PHYSPROC from file "//&
  659.                         TRIM(ADJUSTL(fNameList))//" returned iostat="//&
  660.                         TRIM(ADJUSTL(c0)))
  661.                 END IF
  662.                 READ (nNameList, PHYSCS, iostat=ierr)
  663.                 IF (ierr /= 0) THEN
  664.                    WRITE(c0,"(i8)") ierr
  665.                    CALL FatalError(h//" read namelist PHYSCS from file "//&
  666.                         TRIM(ADJUSTL(fNameList))//" returned iostat="//&
  667.                         TRIM(ADJUSTL(c0)))
  668.                 END IF
  669.                 READ (nNameList, COMCON, iostat=ierr)
  670.                 IF (ierr /= 0) THEN
  671.                    WRITE(c0,"(i8)") ierr
  672.                    CALL FatalError(h//" read namelist COMCON from file "//&
  673.                         TRIM(ADJUSTL(fNameList))//" returned iostat="//&
  674.                         TRIM(ADJUSTL(c0)))
  675.                 END IF
  676.             !    CLOSE(nNameList)
  677.             
  678.                 ! model truncation and levels
  679.             
  680.                 TRCG=" "
  681.                 TRC =" "
  682.                 IF (.not. Lineargrid) THEN
  683.                    IF (trunc < 1000) THEN
  684.                       WRITE(TRCG,'(a2,i4.4)')'TQ',trunc
  685.                       WRITE(TRC ,'(a1,i4.4)')'T',trunc
  686.                    ELSE
  687.                       WRITE(TRCG,'(a2,i4.4)')'TQ',trunc
  688.                       WRITE(TRC ,'(a1,i4.4)')'T',trunc
  689.                    END IF
  690.                 ELSE
  691.                    IF (trunc < 1000) THEN
  692.                       WRITE(TRCG,'(a2,i4.4)')'TL',trunc
  693.                       WRITE(TRC ,'(a1,i4.4)')'T',trunc
  694.                    ELSE 
  695.                       WRITE(TRCG,'(a2,i4.4)')'TL',trunc
  696.                       WRITE(TRC ,'(a1,i4.4)')'T',trunc
  697.                    END IF
  698.                 ENDIF
  699.             
  700.                 LV=" "
  701.                 IF (vert < 100) THEN
  702.                    WRITE(LV,'(a1,i3.3)')'L',vert
  703.                 ELSE
  704.                    WRITE(LV,'(a1,i3.3)')'L',vert
  705.                 END IF
  706.             
  707.                 TruncLev=TRIM(TRCG)//TRIM(LV)
  708.             
  709.                 ! Complete Options variables
  710.             
  711.                 grhflg = dogrh
  712.                 doprec = doprc
  713.                 path_in1=TRIM(path_in)//'/'
  714.                 ddelt=dt
  715.                 delt=dt
  716.                 IF (ANY(idatew /= idatef)) THEN
  717.                    start='warm'
  718.                 ELSE
  719.                    start='cold'
  720.                 END IF
  721.                 IF( TRIM(start) == "warm" )THEN
  722.                    CALL SetTimeOutput(idatew ,idatef, dhfct ,nhdhn ,dhdhn ,nhext ,dhext )
  723.                 ELSE
  724.                    CALL SetTimeOutput(idatei ,idatef, dhfct ,nhdhn ,dhdhn ,nhext ,dhext )
  725.                 END IF
  726.                 reststep=NINT((dhres*3600)/dt)
  727.             
  728.                 CALL CheckOptions()
  729.             
  730.                 record_type='vfm'
  731.                 IF(iglsm_w == 1)ifslm=0
  732.             
  733.  I              CALL ColdWarm()
  734.             
  735.                 dtc3x  = 0.0_r8
  736.                 maxtid=(51*366*86400)/dt
  737.                 filtb =(1.0_r8-filta)*0.5_r8
  738.                 !
  739.                 !     intg=2  time integration of surface physical variable is done
  740.                 !     by leap-frog implicit scheme. this conseves enegy and h2o.
  741.                 !     intg=1  time integration of surface physical variable is done
  742.                 !     by backward implicit scheme.
  743.                 !
  744.                 intg =2
  745.                 IF(intg == 1) THEN
  746.                    epsflt=0.0e0_r8
  747.                 ELSE
  748.                    epsflt=0.5e0_r8 *(1.0e0_r8 -filta)
  749.                 END IF
  750.                 ALLOCATE(cdhl(0:maxtid), stat=ierr)
  751.                 IF (ierr /= 0) THEN
  752.                    WRITE(c0,"(i8)") ierr
  753.                    CALL FatalError(h//" allocate cdhl fails with stat="//TRIM(ADJUSTL(c0)))
  754.                 END IF
  755.                 ALLOCATE(cthl(0:maxtid), stat=ierr)
  756.                 IF (ierr /= 0) THEN
  757.                    WRITE(c0,"(i8)") ierr
  758.                    CALL FatalError(h//" allocate cthl fails with stat="//TRIM(ADJUSTL(c0)))
  759.                 END IF
  760.               END SUBROUTINE ReadNameList
ftn-5001 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "RECORD_TYPE" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IFSLM" is assigned a value but never used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DPERCU" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "TK" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "EIGENINIT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ENHDIF" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "TRINT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "FINT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GAUSSGIVEN" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GENRESTFILES" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GIVENFOURIERGROUPS" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GREPAR1" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GREPAR2" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GREPAR3" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "GREPAR4" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IBDIM_SIZE" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ICCON" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ICLD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "CFLRIC" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "VARCUT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "VCRIT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IFALB" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IFCO2" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IFOZONE" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ASOLM" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IFSNW" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IFSST" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ALPHA" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IGWD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ILCON" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ILWRAD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "INALB" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "INITLZ" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "INTCOSZ" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "INTSST" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IQDIF" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IS" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ISCON" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ISIMP" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ISWRAD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "KI" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "LCNVL" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ACUM0" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ASOLC" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DODYN" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "ALLGHF" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DK" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "LTHNCL" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MASCON" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MASCON_PS" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MGIVEN" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MLRG" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MODEL1D" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MXITER" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "MXRDCC" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NDORD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DIRFNAMEOUTPUT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DIABATIC" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NLNMINIT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NMSST" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NPROC_VERT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NSCALARS" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NSTEP" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "CRDCLD" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "PERCUT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "PREFX" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "PREFY" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "RCCMBL" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "CO2VAL" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "REDUCEDGRID" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "RMRESTFILES" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "RSETTOV" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "SACUM" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "SLAGR" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "SL_TWOTIME_SCHEME" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "STHICK" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "SWINT" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "TABLE" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "TAMBLOCK" is declared but neither defined nor used.

ftn-5002 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "TBASE" is declared but neither defined nor used.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "FILTA" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IDATEF" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IDATEI" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IDATEW" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DOPRC" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "IGLSM_W" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DOGRH" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "VERT" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "TRUNC" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "LINEARGRID" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DHDHN" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DT" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DHEXT" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NHDHN" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DHFCT" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "DHRES" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "PATH_IN" is used but not assigned a value.

ftn-5003 ftn: NOTE File = Options.f90, Line = 760 
  Local variable "NHEXT" is used but not assigned a value.

  761.             
  762.             
  763.             
  764.               !hmjb - 10/3/2006
  765.               ! Todas as opcoes possiveis de se modificar no modelo deveriam ser testadas depois de lido
  766.               ! o modelin, pois o usuario pode passar algum parametro incorreto! Este eh um esforco nesta
  767.               ! direcao, mas desconheco todas as opcoes do modelo. Por enquanto, apenas as opcoes para
  768.               ! radiacao e conveccao estao sendo testadas
  769.             
  770.             
  771.               SUBROUTINE CheckOptions()
  772.                 CHARACTER(LEN=8) :: c0
  773.                 CHARACTER(LEN=*), PARAMETER :: h="**(CheckOptions)**"
  774.             
  775.                 !------------- Short Wave Radiation
  776.             
  777.                 IF  (TRIM(iswrad) /= 'NON'.AND. &
  778.                      TRIM(iswrad) /= 'LCH'.AND. &
  779.                      TRIM(iswrad) /= 'CRD'.AND. &
  780.                      TRIM(iswrad) /= 'UKM'       ) THEN
  781.                    CALL FatalError(h//" Unknown option iswrad="//TRIM(iswrad)//&
  782.                         "; Known options are: NON, LCH, CRD, UKM")
  783.                 END IF
  784.             
  785.                 !  Check options for Clirad and UKMet Short Wave Radiation
  786.             
  787.                 IF (TRIM(iswrad) == 'CRD') THEN
  788.                    IF (.NOT.(crdcld == 1_i8 .OR. crdcld == 4_i8)) THEN
  789.                       WRITE(c0,"(f8.2)") crdcld
  790.                       CALL FatalError(h//" Wrong cloud scheme option crdcld="//&
  791.                            TRIM(ADJUSTL(c0))//"; Valid options are: "//&
  792.                            "1 (stable) or 4 (experimental)")
  793.                    ELSE IF (crdcld == 4_i8) then
  794.                       CALL MsgOne(h, " WARN: CCM3 clouds + Clirad used for research only !!!")
  795.                    END IF
  796.                    IF (.NOT.(0.0_r8 <= asolc .AND. asolc <= 50.0_r8)) THEN
  797.                       WRITE(c0,"(f8.2)") asolc
  798.                       CALL FatalError(h//" Invalid option asolc="//&
  799.                            TRIM(ADJUSTL(c0))//"; Valid range: [0.0, 50.0]")
  800.                    END IF
  801.                    IF (.NOT.(0.0_r8 <= asolm .AND. asolm <= 50.0_r8)) THEN
  802.                       WRITE(c0,"(f8.2)") asolm
  803.                       CALL FatalError(h//" Invalid option asolm="//&
  804.                            TRIM(ADJUSTL(c0))//"; Valid range: [0.0, 50.0]")
  805.                    END IF
  806.                 ELSE IF (TRIM(iswrad) == 'UKM') THEN
  807.             
  808.                 END IF
  809.             
  810.                 !------------- Long Wave Radiation
  811.             
  812.                 IF  (TRIM(ilwrad) /= 'NON' .AND. &
  813.                      TRIM(ilwrad) /= 'HRS' .AND. &
  814.                      TRIM(ilwrad) /= 'CRD' .AND. &
  815.                      TRIM(ilwrad) /= 'UKM'       ) THEN
  816.                    CALL FatalError(h//" Unknown option iswrad= "//TRIM(iswrad)//&
  817.                         "; Known options are: NON, HRS, CRD, UKM")
  818.                 END IF
  819.             
  820.                 ! Check options for Clirad and UKMET Long Wave Radiation
  821.             
  822.                 IF (TRIM(ilwrad) == 'CRD') THEN
  823.                    CALL FatalError(h//" Clirad-LW (ilwrad=CRD) not yet available")
  824.                 END IF
  825.             
  826.                 !------------- Gases
  827.             
  828.                 IF (ifco2 < -1 .OR. ifco2 > 4) THEN
  829.                    WRITE(c0,"(i8)") ifco2
  830.                    CALL FatalError(h//" Invalid option ifco2="//TRIM(ADJUSTL(c0))//&
  831.                         "; valid values are: -1, 0, 1, 2, 3 or 4")
  832.                 ELSE IF (ifco2 >= 1 .AND. ifco2 <= 4) THEN
  833.                    WRITE(c0,"(i8)") ifco2
  834.                    CALL FatalError(h//" Invalid option ifco2="//TRIM(ADJUSTL(c0))//&
  835.                         "; reading co2 field not implemented yet!")
  836.                 END IF
  837.                 IF (ifozone < 0 .OR. ifozone > 4) THEN
  838.                    WRITE(c0,"(i8)") ifozone
  839.                    CALL FatalError(h//" Invalid option ifozone="//TRIM(ADJUSTL(c0))//&
  840.                         "; valid values are: -0, 1, 2, 3 or 4")
  841.                 END IF
  842.             
  843.                 !------------- Convection
  844.             
  845.                 IF  (TRIM(iccon) /= 'NON' .AND. &
  846.                      TRIM(iccon) /= 'ARA' .AND. &
  847.                      TRIM(iccon) /= 'KUO' .AND. &
  848.                      TRIM(iccon) /= 'GRE'         ) THEN
  849.                    CALL FatalError(h//" Unknown option iccon= "//TRIM(iccon)//&
  850.                         "; Known options are: ARA, KUO or GRE")
  851.                 END IF
  852.             
  853.                 ! Check options for grell
  854.             
  855.                 IF (TRIM(iccon) == 'GRE') THEN
  856.                    IF  (grepar1 /= 0  .AND. &
  857.                         grepar1 /= 1  .AND. &
  858.                         grepar1 /= 4  .AND. &
  859.                         grepar1 /= 7  .AND. &
  860.                         grepar1 /= 10 .AND. &
  861.                         grepar1 /= 13 .AND. &
  862.                         grepar1 /= 24        ) THEN
  863.                       WRITE(c0,"(i8)") grepar1
  864.                       CALL FatalError(h//" Unknown option grepar1="//TRIM(ADJUSTL(c0))//&
  865.                            "; known options are: 0, 1, 4, 7, 10, 13 or 24")
  866.                    END IF
  867.                    IF  (grepar2 /=  1 .AND. &
  868.                         grepar2 /=  2 .AND. &
  869.                         grepar2 /=  3        ) THEN
  870.                       WRITE(c0,"(i8)") grepar2
  871.                       CALL FatalError(h//" Unknown option grepar2="//TRIM(ADJUSTL(c0))//&
  872.                            "; known options are: 1, 2 or 3")
  873.                    END IF
  874.                    IF (.NOT. (25.0_r8 <= grepar3 .AND. grepar3 <= 125.0_r8)) THEN
  875.                       WRITE(c0,"(f8.2)") grepar3
  876.                       CALL FatalError(h//" Invalid option grepar3="//TRIM(ADJUSTL(c0))//&
  877.                            "; valid values range: [25.0, 125.0]")
  878.                    END IF
  879.                    IF (.NOT. (15.0_r8 <= grepar4 .AND. grepar4 <= 75.0_r8)) THEN
  880.                       WRITE(c0,"(f8.2)") grepar4
  881.                       CALL FatalError(h//" Invalid option grepar4="//TRIM(ADJUSTL(c0))//&
  882.                            "; valid values range: [15.0, 75.0]")
  883.                    END IF
  884.                 END IF
  885.             
  886.                 IF (.NOT.(&
  887.                      TRIM(iscon) == 'NON' .OR. &
  888.                      TRIM(iscon) == 'TIED'.OR. &
  889.                      TRIM(iscon) == 'SOUZ'       )) THEN
  890.                    CALL FatalError(h//" Unknown option iscon="//TRIM(iscon)//&
  891.                         "; known options are: TIED or SOUZ")
  892.                 END IF
  893.               END SUBROUTINE CheckOptions
  894.             
  895.             
  896.             
  897.             
  898.             
  899.             
  900.               SUBROUTINE DumpOptions()
  901.                 CHARACTER(LEN=14) :: runsFrom, runsTo, runsInitial
  902.                 CHARACTER(LEN=16) :: c0
  903.                 CHARACTER(LEN=16) :: c1
  904.                 CHARACTER(LEN=128) :: line
  905.                 CHARACTER(LEN=*), PARAMETER :: tab="    "
  906.                 CHARACTER(LEN=*), PARAMETER :: h="**(DumpOptions)**"
  907.             
  908.                 ! first line
  909.             
  910.                 CALL MsgOne(h, tab)
  911.             
  912.                 ! model resolution and running period
  913.                 
  914.                 runsInitial="  Z   /  /    "
  915.                 WRITE(runsInitial( 1:2 ), "(i2.2)") idatei(1)
  916.                 WRITE(runsInitial( 5:6 ), "(i2.2)") idatei(2)
  917.                 WRITE(runsInitial( 8:9 ), "(i2.2)") idatei(3)
  918.                 WRITE(runsInitial(11:14), "(i4.4)") idatei(4)
  919.                 runsTo="  Z   /  /    "
  920.                 WRITE(runsTo( 1:2 ), "(i2.2)") idatef(1)
  921.                 WRITE(runsTo( 5:6 ), "(i2.2)") idatef(2)
  922.                 WRITE(runsTo( 8:9 ), "(i2.2)") idatef(3)
  923.                 WRITE(runsTo(11:14), "(i4.4)") idatef(4)
  924.                 runsFrom="  Z   /  /    "
  925.                 IF (TRIM(start) == "cold") THEN
  926.                    WRITE(runsFrom( 1:2 ), "(i2.2)") idatei(1)
  927.                    WRITE(runsFrom( 5:6 ), "(i2.2)") idatei(2)
  928.                    WRITE(runsFrom( 8:9 ), "(i2.2)") idatei(3)
  929.                    WRITE(runsFrom(11:14), "(i4.4)") idatei(4)
  930.                 ELSE
  931.                    WRITE(runsFrom( 1:2 ), "(i2.2)") idatew(1)
  932.                    WRITE(runsFrom( 5:6 ), "(i2.2)") idatew(2)
  933.                    WRITE(runsFrom( 8:9 ), "(i2.2)") idatew(3)
  934.                    WRITE(runsFrom(11:14), "(i4.4)") idatew(4)
  935.                 END IF
  936.                 CALL MsgOne(h, " model "//TRIM(TruncLev)//&
  937.                      &" runs from "//runsFrom//" to "//runsTo//&
  938.                      &" with initial state from "//runsInitial)
  939.                 
  940.                 ! timestep info
  941.                 
  942.                 WRITE(c0,"(i16)") maxtim
  943.                 WRITE(c1,"(i16)") ddelt
  944.                 CALL MsgOne(h, " model executes "//TRIM(ADJUSTL(c0))//&
  945.                      &" timesteps of length "//TRIM(ADJUSTL(c1))//" seconds ")
  946.             
  947.                 ! model configuration
  948.             
  949.                 IF (slagr) THEN
  950.                    line = "Semi-Lagrangean"
  951.                    IF (SL_twotime_scheme) THEN
  952.                       line = TRIM(line)//", two-time level scheme"
  953.                      ELSE
  954.                       line = TRIM(line)//", three-time level scheme"
  955.                    ENDIF
  956.                 ELSE
  957.                    line = "Eulerian"
  958.                 END IF
  959.                 IF (reducedGrid) THEN
  960.                    line = TRIM(line)//", Reduced Gaussian and"
  961.                 ELSE
  962.                    line = TRIM(line)//", Full Gaussian and"
  963.                 END IF
  964.                 IF (linearGrid) THEN
  965.                    line = TRIM(line)//" Linear Grid"
  966.                 ELSE
  967.                    line = TRIM(line)//" Quadratic Grid"
  968.                 END IF
  969.                 CALL MsgOne(h, " model dynamics configuration is  "//TRIM(line))
  970.             
  971.                 ! files
  972.             
  973.                 CALL MsgOne(h, " input file name is "//TRIM(fNameInput0))
  974.                 CALL MsgOne(h, " output file directory is "//TRIM(dirFNameOutput))
  975.             
  976.                 ! physics
  977.             
  978.                 CALL MsgOne(h, " model physics configuration:")
  979.             
  980.                 ! Shortwave Radiation
  981.             
  982.                 IF (TRIM(iswrad).eq.'NON') THEN
  983.                    CALL MsgOne(h, tab//"No Shortwave Radiation")
  984.                 ELSEIF (TRIM(iswrad).eq.'LCH') THEN
  985.                    CALL MsgOne(h, tab//"Shortwave Radiation is Lacis & Hansen")
  986.                 ELSEIF (TRIM(iswrad).eq.'CRD') THEN
  987.                    CALL MsgOne(h, tab//"Shortwave Radiation is CLIRAD-SW")
  988.                    WRITE(c0,"(e16.7)") asolm
  989.                    CALL MsgOne(h, tab//"Maritime aerosol is "//TRIM(ADJUSTL(c0)))
  990.                    WRITE(c0,"(e16.7)") asolc
  991.                    CALL MsgOne(h, tab//"Continental aerosol is "//TRIM(ADJUSTL(c0)))
  992.                    WRITE(c0,"(e16.7)") crdcld
  993.                    CALL MsgOne(h, tab//"Cloud Scheme is "//TRIM(ADJUSTL(c0)))
  994.                 ELSEIF (TRIM(iswrad).eq.'UKM') THEN
  995.                    CALL MsgOne(h, tab//"Shortwave Radiation is UKMO-SW")
  996.                    CALL MsgOne(h, tab//tab//"spectral-file: "//TRIM(fNameSpecSW))
  997.                 ENDIF
  998.             
  999.                 ! Longwave Radiation
 1000.             
 1001.                 IF (TRIM(ilwrad).eq.'NON') THEN
 1002.                    CALL MsgOne(h, tab//"No Longwave Radiation")
 1003.                 ELSEIF (TRIM(ilwrad).eq.'HRS') THEN
 1004.                    CALL MsgOne(h, tab//"Longwave Radiation is Harshvardhan")
 1005.                 ELSEIF (TRIM(ilwrad).eq.'CRD') THEN
 1006.                    CALL MsgOne(h, tab//"Longwave Radiation is Clirad-LW")
 1007.                 ELSEIF (TRIM(ilwrad).eq.'UKM') THEN
 1008.                    CALL MsgOne(h, tab//"Longwave Radiation is UKMO-LW")
 1009.                    CALL MsgOne(h, tab//tab//"spectral-file: "//TRIM(fNameSpecLW))
 1010.                 ENDIF
 1011.             
 1012.                 ! CO2
 1013.             
 1014.                 IF (ifco2.LE.0) THEN
 1015.                    CALL MsgOne(h, tab//"Using a single global value for co2 concentration,")
 1016.                    IF (ifco2.EQ.0) THEN
 1017.                       WRITE(c0,"(e16.7)") co2val
 1018.                       CALL MsgOne(h, tab//tab//"with constant concentration of "//&
 1019.                            TRIM(ADJUSTL(c0))//" ppmv")
 1020.                    ELSEIF (ifco2.EQ.-1) THEN
 1021.                       CALL MsgOne(h, tab//tab//"with variable co2val following 2nd order fit to Mauna Loa data (1958-04)")
 1022.                    ENDIF
 1023.                 ELSE
 1024.                    CALL MsgOne(h, tab//"Reading global co2 field from external file")
 1025.                    IF (ifco2.EQ.1) THEN
 1026.                       CALL MsgOne(h, tab//tab//"CO2 field is constant")
 1027.                    ELSEIF (ifco2.EQ.2) THEN
 1028.                       CALL MsgOne(h, tab//tab//"CO2 field is climatology")
 1029.                    ELSEIF (ifco2.EQ.3) THEN
 1030.                       CALL MsgOne(h, tab//tab//"CO2 field is predicted")
 1031.                    ELSEIF (ifco2.EQ.4) THEN
 1032.                       CALL MsgOne(h, tab//tab//"CO2 field is direct access")
 1033.                    ENDIF
 1034.                 ENDIF
 1035.             
 1036.                 ! OZONE
 1037.             
 1038.                 IF (ifozone.EQ.0) THEN
 1039.                    CALL MsgOne(h, tab//"Using old 4-month zonally averaged OZONE climatology")
 1040.                 ELSE
 1041.                    CALL MsgOne(h, tab//"Reading global OZONE field from external file")
 1042.                    IF (ifozone.EQ.1) THEN
 1043.                       CALL MsgOne(h, tab//"OZONE field is constant")
 1044.                    ELSEIF (ifozone.EQ.2) THEN
 1045.                       CALL MsgOne(h, tab//"OZONE field is climatology")
 1046.                    ELSEIF (ifozone.EQ.3) THEN
 1047.                       CALL MsgOne(h, tab//"OZONE field is predicted")
 1048.                    ELSEIF (ifozone.EQ.4) THEN
 1049.                       CALL MsgOne(h, tab//"OZONE field is continuous")
 1050.                    ENDIF
 1051.                 ENDIF
 1052.             
 1053.                 ! Deep Convection
 1054.             
 1055.                 IF (TRIM(iccon).eq.'NON') THEN
 1056.                    CALL MsgOne(h, tab//"No Deep Convection selected")
 1057.                 ELSEIF (TRIM(iccon).eq.'ARA') THEN
 1058.                    CALL MsgOne(h, tab//"Deep Convection is Arakawa")
 1059.                 ELSEIF (TRIM(iccon).eq.'KUO') THEN
 1060.                    CALL MsgOne(h, tab//"Deep Convection is KUO")
 1061.                 ELSEIF (TRIM(iccon).eq.'GRE') THEN
 1062.                    CALL MsgOne(h, tab//"Deep Convection is GRELL with parameters:")
 1063.                    WRITE(c0,"(i16)") grepar1
 1064.                    WRITE(c1,"(i16)") grepar2
 1065.                    CALL MsgOne(h, tab//tab//"grepar1="//TRIM(ADJUSTL(c0))//&
 1066.                         &"; grepar2="//TRIM(ADJUSTL(c1)))
 1067.                    WRITE(c0,"(e16.7)") grepar3
 1068.                    WRITE(c1,"(e16.7)") grepar4
 1069.                    CALL MsgOne(h, tab//tab//"grepar3="//TRIM(ADJUSTL(c0))//&
 1070.                         &"; grepar4="//TRIM(ADJUSTL(c1)))
 1071.                 ENDIF
 1072.             
 1073.                 ! Shallow Convection
 1074.             
 1075.                 IF (TRIM(iscon).eq.'NON') THEN
 1076.                    CALL MsgOne(h, tab//"No Shallow Convection selected")
 1077.                 ELSEIF (TRIM(iscon).eq.'TIED') THEN
 1078.                    CALL MsgOne(h, tab//"Shallow Convection is Tiedke")
 1079.                 ELSEIF (TRIM(iscon).eq.'SOUZ') THEN
 1080.                    CALL MsgOne(h, tab//"Shallow Convection is Souza")
 1081.                 ENDIF
 1082.             
 1083.                 ! last line
 1084.             
 1085.                 CALL MsgOne(h, tab)
 1086.               END SUBROUTINE DumpOptions
 1087.             
 1088.             
 1089.             
 1090.             
 1091.             
 1092.             
 1093.             
 1094.             
 1095.               SUBROUTINE SetTimeOutput(idate ,idatec,dhfct ,nhdhn ,dhdhn ,nhext ,dhext )
 1096.             
 1097.                 INTEGER, INTENT(IN     ) :: idate (4)
 1098.                 INTEGER, INTENT(IN     ) :: idatec(4)
 1099.                 INTEGER, INTENT(IN     ) :: dhfct
 1100.                 INTEGER, INTENT(INOUT  ) :: nhdhn
 1101.                 INTEGER, INTENT(INOUT  ) :: dhdhn
 1102.                 INTEGER, INTENT(INOUT  ) :: nhext
 1103.                 INTEGER, INTENT(INOUT  ) :: dhext
 1104.                 INTEGER                  :: yi
 1105.                 INTEGER                  :: mi
 1106.                 INTEGER                  :: di
 1107.                 INTEGER                  :: hi
 1108.                 INTEGER                  :: yf
 1109.                 INTEGER                  :: mf
 1110.                 INTEGER                  :: df
 1111.                 INTEGER                  :: hf
 1112.                 INTEGER                  :: ntstepmax
 1113.                 REAL(KIND=r8)                     :: xday
 1114.                 REAL(KIND=r8)                     :: datehr
 1115.                 REAL(KIND=r8)                     :: datehf
 1116.                 INTEGER                  :: nday
 1117.                 REAL(KIND=r8)                     :: ybi
 1118.                 INTEGER                  :: md(12)
 1119.                 INTEGER                  :: ntstep
 1120.                 INTEGER                  :: mhfct
 1121.                 INTEGER                  :: mhdhn
 1122.                 INTEGER                  :: mhext
 1123.                 REAL(KIND=r8)                     :: dh
 1124.                 REAL(KIND=r8)                     :: nts
 1125.                 REAL(KIND=r8)                     :: mhf
 1126.                 REAL(KIND=r8)                     :: chk
 1127.             
 1128.                 hi = idate (1)
 1129.                 di = idate (2)
 1130.                 mi = idate (3)
 1131.                 yi = idate (4)
 1132.                 hf = idatec(1)
 1133.                 df = idatec(2)
 1134.                 mf = idatec(3)
 1135.                 yf = idatec(4)
 1136.             
 1137.  Vr4 I---->     CALL jull(yi,mi,di,hi,xday)
 1138.                 datehr=yi+(xday/365.25e0_r8)
 1139.  Vr4 I---->     CALL jull(yf,mf,df,hf,xday)
 1140.                 datehf=yf+(xday/365.25e0_r8)
 1141.                 nday=0
 1142.                 IF(yi == yf .AND. mi==mf .AND. di==df) THEN
 1143.                    nday=0
 1144.                 ELSE
 1145.  1--------<        DO WHILE (datehr < datehf)
 1146.  1                    nday=nday+1
 1147.  1                    ybi=MOD(yi,4)
 1148.  1                    IF ( ybi == 0.0_r8 )THEN
 1149.  1 V-----<>              md =(/31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31/)
 1150.  1                    ELSE
 1151.  1 V-----<>              md =(/31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31/)
 1152.  1                    END IF
 1153.  1                    di=di+1
 1154.  1                    IF( di > md(mi) )THEN
 1155.  1                       di=1
 1156.  1                       mi=mi+1
 1157.  1                       IF ( mi > 12 ) THEN
 1158.  1                          mi=1
 1159.  1                          yi=yi+1
 1160.  1                       END IF
 1161.  1                    END IF
 1162.  1 Vr4 I-->           CALL jull(yi,mi,di,hi,xday)
 1163.  1                    datehr=yi+(xday/365.25e0_r8)
 1164.  1-------->        END DO
 1165.                 END IF
 1166.                 ntstep=(nday)*86400/dt
 1167.                 IF(dhfct /= 0 ) THEN
 1168.                    mhfct=nday*24/dhfct
 1169.                 ELSE
 1170.                    mhfct=17
 1171.                 END IF
 1172.             
 1173.                 IF( nhdhn == 0 ) THEN
 1174.                    dhdhn=0
 1175.                    mhdhn=0
 1176.                 ELSE IF ( dhdhn /= 0 ) THEN
 1177.                    mhdhn=nhdhn/dhdhn
 1178.                 ELSE
 1179.                    mhdhn=0
 1180.                    nhdhn=0
 1181.                 END IF
 1182.                 IF ( nhext == 0 ) THEN
 1183.                    dhext=0
 1184.                    !**(JP)** faltou atribuicao abaixo
 1185.                    mhext=0
 1186.                 ELSE IF ( dhext /= 0 ) THEN
 1187.                    mhext=nhext/dhext
 1188.                 ELSE
 1189.                    mhext=0
 1190.                    nhext=0
 1191.                 END IF
 1192.                 IF ( dhfct /= 0 ) THEN
 1193.                    IF ( hi /= hf ) THEN
 1194.                       dh =hf-hi
 1195.                       nts=dh*3600/dt
 1196.                       mhf=dh/dhfct
 1197.                       chk=mhf*dhfct
 1198.                       IF ( chk /= dh ) THEN
 1199.                          WRITE(nfprt,*) 'Wrong Request for the Hour in datef =', yf,mf,df,hf
 1200.                          WRITE(nfprt,*) 'Difference of Hours in datei = ',yi,mi,di,hi, 'and '
 1201.                          WRITE(nfprt,*) 'datef is Not Compatible With dhfct =' ,dhfct
 1202.                          STOP
 1203.                       END IF
 1204.                       ntstep=ntstep+nts
 1205.                       mhfct=mhfct+mhf
 1206.                    END IF
 1207.                 END IF
 1208.                 maxtim=ntstep
 1209.                 maxtfm=mhfct
 1210.                 cth0 =dhfct
 1211.                 mdxtfm=mhdhn
 1212.                 ctdh0=dhdhn
 1213.                 mextfm=mhext
 1214.                 cteh0=dhext
 1215.                 ntstepmax=51*366*86400/dt
 1216.                 IF( ntstep > ntstepmax ) THEN
 1217.                    WRITE(nfprt,*) 'nstep = ',ntstep,' is greater than ntstepmax = ',ntstepmax
 1218.                    STOP
 1219.                 END IF
 1220.                 dct=cth0
 1221.                 dctd=ctdh0
 1222.                 dcte=cteh0
 1223.               END SUBROUTINE SetTimeOutput
 1224.             
 1225.             
 1226.             
 1227.             
 1228.             
 1229.             
 1230.               SUBROUTINE jull(yi,mi,di,hi,xday)
 1231.             
 1232.                 INTEGER, INTENT(IN   ) :: yi
 1233.                 INTEGER, INTENT(IN   ) :: mi
 1234.                 INTEGER, INTENT(IN   ) :: di
 1235.                 INTEGER, INTENT(IN   ) :: hi
 1236.                 REAL(KIND=r8)   , INTENT(OUT  ) :: xday
 1237.                 REAL(KIND=r8)                   :: tod
 1238.                 REAL(KIND=r8)                   :: yrl
 1239.                 INTEGER                :: monl(12)
 1240.                 INTEGER                :: monday(12)
 1241.                 INTEGER                :: m
 1242.                 REAL(KIND=r8)   , PARAMETER     :: f3600=3.6e3_r8
 1243.                 tod=0.0_r8
 1244.                 yrl=365.25e0_r8
 1245.  V-------<>     MONL    =   (/31,28,31,30,31,30,31,31,30,31,30,31/)
 1246.                 !
 1247.                 !     id is now assumed to be the current date and hour
 1248.                 !
 1249.                 monday(1)=0
 1250.  r4-------<     DO m=2,12
 1251.  r4                monday(m)=monday(m-1)+monl(m-1)
 1252.  r4------->     END DO
 1253.                 xday=hi*f3600
 1254.                 xday=xday+MOD(tod,f3600)
 1255.                 xday=monday(mi)+di+xday/86400.0_r8
 1256.                 xday=xday-MOD(yi+3,4)*0.25_r8
 1257.                 IF(MOD(yi,4).EQ.0.AND.mi.GT.2)xday=xday+1.0e0_r8
 1258.                 xday= MOD(xday-1.0_r8,yrl)
 1259.               END SUBROUTINE jull
 1260.             
 1261.              
 1262.               SUBROUTINE  ColdWarm()
 1263.                 CHARACTER(LEN=*), PARAMETER :: h="**(ColdWarm)**"
 1264.                 IF ( TRIM(START) == 'cold' ) THEN
 1265.                    first = .TRUE.
 1266.                 ELSEIF ( TRIM(START) == 'warm' ) THEN
 1267.                    nlnminit = .FALSE.
 1268.                    diabatic = .FALSE.
 1269.                    eigeninit= .FALSE.
 1270.                    rsettov  = .FALSE.
 1271.                    first    = .FALSE.
 1272.                    nfin1 =19
 1273.                    nfcnv0=31
 1274.                    initlz=0
 1275.                    ifsnw=0
 1276.                    ifalb=0
 1277.                    ifslm=0
 1278.                 END IF
 1279.               END SUBROUTINE ColdWarm
ftn-5008 ftn: NOTE File = Options.f90, Line = 1279 
  Named Constant "H" is not used.

 1280.             
 1281.             
 1282.             
 1283.             
 1284.               SUBROUTINE setsst (c0)
 1285.                 CHARACTER(LEN=*), INTENT(IN   ) :: c0
 1286.             
 1287.                 INTEGER           :: LFSST
 1288.                 INTEGER           :: LWSST
 1289.                 CHARACTER(LEN=8)  :: LABELS
 1290.                 LOGICAL           :: lexist
 1291.                 CHARACTER(LEN=*), PARAMETER :: h="**(setsst)**"
 1292.             
 1293.                 IF(LEN(TRIM(NMSST)) /= 6)THEN
 1294.                    CALL FatalError(h//" NMSST file ("//TRIM(NMSST)//") not set")
 1295.                 END IF
 1296.             
 1297.                 WRITE(LABELS,'(i4.4,2i2.2)')idate(4),idate(2),idate(3)
 1298.                 WRITE (labelsi(1: 4), '(I4.4)') idate(4)
 1299.                 WRITE (labelsi(5: 6), '(I2.2)') 01
 1300.                 WRITE (labelsi(7: 8), '(I2.2)') 16
 1301.                 WRITE (labelsi(9:10), '(I2.2)') 12
 1302.                 WRITE (labelsj(1: 4), '(I4.4)') idate(4)
 1303.                 WRITE (labelsj(5: 6), '(I2.2)') 02
 1304.                 WRITE (labelsj(7: 8), '(I2.2)') 14
 1305.                 WRITE (labelsj(9:10), '(I2.2)') 00
 1306.             
 1307.                 IF ( TRIM(NMSST) == 'sstwkl' ) THEN
 1308.                    fNameSSTAOI=TRIM(path_in1)//'SSTWeekly'//LABELS//'.G'//TRIM(c0)
 1309.                    INQUIRE (FILE=TRIM(fNameSSTAOI),exist=lexist)
 1310.                    IF(lexist) THEN
 1311.                       fNameSSTAOI=TRIM(path_in1)//'SSTWeekly'//LABELS//'.G'//TRIM(c0)
 1312.                    ELSE
 1313.                       NMSST='sstaoi'
 1314.                       CALL MsgOne(h, '*******************************************************')
 1315.                       CALL MsgOne(h, '* NMSST changed from weekly running mean (sstwkl) to    *')
 1316.                       CALL MsgOne(h, '* climatology (sstaoi), since sstwkl are unavailable  *')
 1317.                       CALL MsgOne(h, '* for the last 15 days                                *')
 1318.                       CALL MsgOne(h, '*******************************************************')
 1319.                       fNameSSTAOI=TRIM(path_in1)//'SSTClima'//LABELS//'.G'//TRIM(c0)
 1320.                    END IF
 1321.                 ELSE IF ( TRIM(NMSST) == 'sstwkd' ) THEN
 1322.                    fNameSSTAOI=TRIM(path_in1)//TRIM(NMSST)//LABELS//'.'//TRIM(TRC)
 1323.                 ELSE IF ( TRIM(NMSST) == 'sstmtd' ) THEN
 1324.                    fNameSSTAOI=TRIM(path_in1)//TRIM(NMSST)//LABELS//'.'//TRIM(TRC)
 1325.                 ELSE IF ( TRIM(NMSST) == 'sstanp' ) THEN
 1326.                    fNameSSTAOI=TRIM(path_in1)//TRIM(NMSST)//LABELS//'.'//TRIM(TRC)
 1327.                 ELSE
 1328.                    NMSST='sstaoi'
 1329.                    fNameSSTAOI=TRIM(path_in1)//'SSTClima'//LABELS//'.G'//TRIM(c0)
 1330.                 END IF
 1331.             
 1332.                 INQUIRE (FILE=TRIM(fNameSSTAOI),exist=lexist)
 1333.                 IF (.NOT. lexist) THEN
 1334.                    CALL FatalError(h//" file "//TRIM(fNameSSTAOI)//" does not exist")
 1335.                    STOP
 1336.                 END IF
 1337.             
 1338.             
 1339.                 IF ( TRIM(NMSST) == 'sstwkl' ) THEN
 1340.                    LFSST=-1
 1341.                 ELSE
 1342.                    LFSST=2
 1343.                 END IF
 1344.             
 1345.                 IF      ( TRIM(NMSST) == 'sstwkd' ) THEN
 1346.                    LFSST=4
 1347.                 ELSE IF ( TRIM(NMSST) == 'sstmtd' ) THEN
 1348.                    LFSST=4
 1349.                 END IF
 1350.             
 1351.                 IF (TRIM(START)  == 'warm') THEN
 1352.                    IF ( LFSST == -1 ) THEN
 1353.                       LWSST=0
 1354.                    ELSE
 1355.                       LWSST=LFSST
 1356.                    END IF
 1357.                 END IF
 1358.             
 1359.                 IF ( TRIM(START) /= 'warm')THEN
 1360.                    ifsst=LFSST
 1361.                 ELSE
 1362.                    ifsst=LWSST
 1363.                 END IF
 1364.               END SUBROUTINE setsst
 1365.             
 1366.             
 1367.             
 1368.               SUBROUTINE SetFileNameGaussPoints(jMax)
 1369.                 INTEGER, INTENT(IN) :: jMax
 1370.                 CHARACTER(LEN= 10)                 :: LABELI
 1371.                 CHARACTER(LEN= 10)                 :: LABELC
 1372.                 CHARACTER(LEN= 10)                 :: LABELF
 1373.                 LOGICAL :: lexist
 1374.                 CHARACTER(LEN=5) :: c0
 1375.                 CHARACTER(LEN=*), PARAMETER :: h="**(SetFileNameGaussPoints)**"
 1376.             
 1377.                 WRITE(LABELI,'(i4.4,3i2.2)')IDATEI(4),IDATEI(3),IDATEI(2),IDATEI(1)
 1378.                 WRITE(LABELC,'(i4.4,3i2.2)')IDATEW(4),IDATEW(3),IDATEW(2),IDATEW(1)
 1379.                 WRITE(LABELF,'(i4.4,3i2.2)')IDATEF(4),IDATEF(3),IDATEF(2),IDATEF(1)
 1380.                 EXTS    ='S.unf'
 1381.             
 1382.                 WRITE(c0,"(i5.5)") jMax
 1383.                 IF (gaussGiven) THEN
 1384.                    fNameGauss  = TRIM(path_in1)//'/gaussp'//'.G'//c0
 1385.                    INQUIRE (FILE=TRIM(fNameGauss),exist=lexist)
 1386.                    IF (.NOT. lexist) THEN
 1387.                       CALL FatalError(h//" file "//TRIM(fNameGauss)//" does not exist")
 1388.                    END IF
 1389.                 ELSE
 1390.                    fNameGauss  = TRIM(path_in1)//'/gaussp'//'.G'//c0
 1391.                 END IF
 1392.             
 1393.                 ! SET CLIMATOLOGICAL VEGETATION MASK FILE NAME
 1394.             
 1395.                 fNameSibmsk = TRIM(path_in1)//'VegetationMask'//'.G'//c0
 1396.             
 1397.                 ! SET CLIMATOLOGICAL SNOW FILE NAME
 1398.             
 1399.                 fNameSnow   = TRIM(path_in1)//'Snow'//LABELI//EXTS//'.G'//c0
 1400.             
 1401.                 ! SET CLIMATOLOGICAL SOIL MOISTURE FILE NAME
 1402.             
 1403.                 fNameSoilms = TRIM(path_in1)//'SoilMoisture'//'.G'//c0
 1404.             
 1405.                 ! SET TOPOGRAPHY VARIANCE "m" FILE NAME
 1406.             
 1407.                 fNameOrgvar = TRIM(path_in1)//'TopoVariance'//'.G'//c0
 1408.              
 1409.                 ! SET PARAMETER OF ALBEDO TO SSIB FILE NAME
 1410.              
 1411.                 fNameSibAlb = TRIM(path_in1)//'AlbedoSSiB'
 1412.                
 1413.                 ! SET CLIMATOLOGICAL ALBEDO FILE NAME  
 1414.                 
 1415.                 fNameAlbedo = TRIM(path_in1)//'AlbedoSSiB'!errado mas nao usa este arquivo
 1416.             
 1417.                 ! SET TABLE UNITS FILE NAME      
 1418.             
 1419.                 fNameUnitTb = TRIM(path_in1)//'Units'
 1420.             
 1421.                 ! SET INDEX TO CONVERSION OF UNITS FILE NAME      
 1422.             
 1423.                 fNameLookTb = TRIM(path_in1)//'UnitsLookUpTable'
 1424.             
 1425.                 ! SET TABLE CONVERSION FILE NAME      
 1426.             
 1427.                 fNameCnfTbl = TRIM(path_in1)//'UnitsConvFactor1Table'
 1428.             
 1429.                 ! SET TABLE CONVERSION FILE NAME      
 1430.             
 1431.                 fNameCnf2Tb = TRIM(path_in1)//'UnitsConvFactor2Table'
 1432.             
 1433.                 ! SET GRID HISTORY FIELDS FILE NAME      
 1434.             
 1435.                 fNameGHTable= TRIM(path_in1)//'GridHistDesiredTable'
 1436.             
 1437.                 ! SET SSIB PARAMETER OF VEGETATION FILE NAME
 1438.             
 1439.                 fNameSibVeg = TRIM(path_in1)//'VegetationSSiB'
 1440.             
 1441.                 ! SET DEEP SOIL TEMPERATURE FIELD FILE NAME
 1442.             
 1443.                 fNameTg3zrl = TRIM(path_in1)//'DeepSoilTemperature'//'.G'//c0
 1444.             
 1445.                 ! SET ROUGHNESS LENGTH FIELD FILE NAME
 1446.             
 1447.                 fNameRouLen = TRIM(path_in1)//'RoughnessLength'//'.G'//c0
 1448.             
 1449.                 ! SET DIAGNOSTICS FIELDS FILE NAME
 1450.             
 1451.                 IF(TRIM(TABLE) == 'p') THEN
 1452.                    fNameDTable=TRIM(path_in1)//'DiagDesiredTable.pnt'
 1453.                 ELSE IF(TRIM(TABLE) == 'c') THEN
 1454.                    fNameDTable=TRIM(path_in1)//'DiagDesiredTable.clm'
 1455.                 ELSE IF(TRIM(TABLE) == 'n') THEN
 1456.                    fNameDTable=TRIM(path_in1)//'DiagDesiredTable'
 1457.                 ELSE
 1458.                    fNameDTable=TRIM(path_in1)//'DiagDesiredTable'
 1459.                 END IF
 1460.             
 1461.                 ! SET TABLE GRID HISTORY FILE NAME
 1462.             
 1463.                 fNameGHLoc  = TRIM(path_in1)//'GridHistLocations'//'.G'//TRIM(c0)
 1464.                 
 1465.                 ! SET  SOIL TYPE FILE NAME
 1466.                 
 1467.                 fNameSoilType= TRIM(path_in1)//'GL_FAO_01patches'//'.'//TRIM(record_type)//'.G'//TRIM(c0)
 1468.             
 1469.                 ! SET  VEGETATION TYPE FILE NAME
 1470.             
 1471.                 fNameVegType =TRIM(path_in1)//'GL_VEG_SIB_05patches'//'.'//trim(record_type)//'.G'//TRIM(c0)
 1472.             
 1473.                 ! SET  SOIL MOISTURE FILE NAME
 1474.             
 1475.                 fNameSoilMoist =TRIM(path_in1)//'GL_SM'//'.'//TRIM(record_type)//'.'//TRIM(LABELI)//'.G'//TRIM(c0)
 1476.             
 1477.                 ! SET CO2 FILE NAME (TEST)
 1478.                 
 1479.                 IF (ifco2 > 0) THEN
 1480.                    IF (ifco2 >= 1 .and. ifco2 <=4 ) THEN
 1481.                       IF (ifco2 == 1) THEN ! first call only
 1482.                          fNameCO2  = TRIM(path_in1)//'co2'//LABELI//'.G'//TRIM(c0)//TRIM(LV)
 1483.                       ELSEIF (ifco2 == 2) THEN ! clim interpol
 1484.                          fNameCO2  = TRIM(path_in1)//'co2clm'//'.G'//TRIM(c0)//TRIM(LV)
 1485.                       ELSEIF (ifco2 == 3) THEN ! pred interpol
 1486.                          fNameCO2  = TRIM(path_in1)//'co2fct'//'.G'//TRIM(c0)//TRIM(LV)
 1487.                       ELSEIF (ifco2 == 4) THEN ! direct access
 1488.                          fNameCO2  = TRIM(path_in1)//'co2mtd'//'.G'//TRIM(c0)//TRIM(LV)
 1489.                       ENDIF
 1490.                    ENDIF
 1491.                 ENDIF
 1492.             
 1493.                 ! SET OZONE FILE NAME
 1494.                 
 1495.                 IF (ifozone >=1 .and. ifozone <=4 ) THEN
 1496.                    IF (ifozone == 1) THEN ! first call only 
 1497.                       fNameOzone  = TRIM(path_in1)//'OZON'//TRIM(PREFY)//LABELI//'S.grd.'//'G'//TRIM(c0)//TRIM(LV)
 1498.                    ELSEIF (ifozone == 2) THEN ! clim interpol
 1499.                       fNameOzone  = TRIM(path_in1)//'ozoneclm'//'.G'//TRIM(c0)//TRIM(LV)
 1500.                    ELSEIF (ifozone == 3) THEN ! pred interpol
 1501.                       fNameOzone  = TRIM(path_in1)//'ozonefct'//'.G'//TRIM(c0)//TRIM(LV)
 1502.                    ELSEIF (ifozone == 4) THEN ! direct access
 1503.                       fNameOzone  = TRIM(path_in1)//'ozonemtd'//'.G'//TRIM(c0)//TRIM(LV)
 1504.                    ENDIF
 1505.                 ENDIF
 1506.             
 1507.                 ! SET UKMO SPECTRAL FILENAME
 1508.             
 1509.                 fNameSpecSW = TRIM(path_in1)//'sp_sw_hadgem1_3r'
 1510.                 fNameSpecLW = TRIM(path_in1)//'sp_lw_hadgem1_3'
 1511.             
 1512.                 ! SET SST FILE NAME AND OPTIONS
 1513.             
 1514.                 CALL SETSST (c0)
 1515.             
 1516.                 IF (grhflg) THEN
 1517.                    INQUIRE (FILE=TRIM(fNameGHLoc),exist=lexist)
 1518.                    IF(.NOT. lexist) THEN
 1519.                       CALL FatalError(h//" file "//TRIM(fNameGHLoc)//" does not exist")
 1520.                    END IF
 1521.                    INQUIRE (FILE=TRIM(fNameGHTable),exist=lexist)
 1522.                    IF(.NOT. lexist) THEN
 1523.                       CALL FatalError(h//" file "//TRIM(fNameGHTable)//" does not exist")
 1524.                    END IF
 1525.                 END IF 
 1526.             
 1527.                 INQUIRE (FILE=TRIM(fNameDTable),exist=lexist)
 1528.                 IF(.NOT. lexist) THEN
 1529.                    CALL FatalError(h//" file "//TRIM(fNameDTable)//" does not exist")
 1530.                 END IF
 1531.             
 1532.                 INQUIRE (FILE=TRIM(fNameUnitTb),exist=lexist)
 1533.                 IF(.NOT. lexist) THEN
 1534.                    CALL FatalError(h//" file "//TRIM(fNameUnitTb)//" does not exist")
 1535.                 END IF
 1536.             
 1537.                 INQUIRE (FILE=TRIM(fNameLookTb),exist=lexist)
 1538.                 IF(.NOT. lexist) THEN
 1539.                    CALL FatalError(h//" file "//TRIM(fNameLookTb)//" does not exist")
 1540.                 END IF
 1541.             
 1542.                 INQUIRE (FILE=TRIM(fNameCnfTbl),exist=lexist)
 1543.                 IF(.NOT. lexist) THEN
 1544.                    CALL FatalError(h//" file "//TRIM(fNameCnfTbl)//" does not exist")
 1545.                 END IF
 1546.             
 1547.                 INQUIRE (FILE=TRIM(fNameCnf2Tb),exist=lexist)
 1548.                 IF(.NOT. lexist) THEN
 1549.                    CALL FatalError(h//" file "//TRIM(fNameCnf2Tb)//" does not exist")
 1550.                 END IF
 1551.             
 1552.               
 1553.                 IF (TRIM(isimp) == 'NO') THEN
 1554.                    INQUIRE (FILE=TRIM(fNameSibAlb),exist=lexist)
 1555.                    IF (.NOT. lexist) THEN
 1556.                       CALL FatalError(h//" file "//TRIM(fNameSibAlb)//" does not exist")
 1557.                    END IF
 1558.             
 1559.                    INQUIRE (FILE=TRIM(fNameAlbedo),exist=lexist)
 1560.                    IF (.NOT. lexist) THEN
 1561.                       CALL FatalError(h//" file "//TRIM(fNameAlbedo)//" does not exist")
 1562.                    END IF
 1563.                   
 1564.                    INQUIRE (FILE=TRIM(fNameSnow),exist=lexist)
 1565.                    IF (.NOT. lexist) THEN
 1566.                       CALL FatalError(h//" file "//TRIM(fNameSnow)//" does not exist")
 1567.                    END IF
 1568.                    
 1569.                    INQUIRE (FILE=TRIM(fNameSoilms),exist=lexist)
 1570.                    IF (.NOT. lexist) THEN
 1571.                       CALL FatalError(h//" file "//TRIM(fNameSoilms)//" does not exist")
 1572.                    END IF 
 1573.                   
 1574.                    INQUIRE (FILE=TRIM(fNameOrgvar),exist=lexist)
 1575.                    IF (.NOT. lexist) THEN
 1576.                       CALL FatalError(h//" file "//TRIM(fNameOrgvar)//" does not exist")
 1577.                    END IF
 1578.             
 1579.                    INQUIRE (FILE=TRIM(fNameSibmsk),exist=lexist)
 1580.                    IF (.NOT. lexist) THEN
 1581.                       CALL FatalError(h//" file "//TRIM(fNameSibmsk)//" does not exist")
 1582.                    END IF
 1583.             
 1584.                    INQUIRE (FILE=TRIM(fNameTg3zrl),exist=lexist)
 1585.                    IF (.NOT. lexist) THEN
 1586.                       CALL FatalError(h//" file "//TRIM(fNameTg3zrl)//" does not exist")
 1587.                    END IF
 1588.             
 1589.                    INQUIRE (FILE=TRIM(fNameRouLen),exist=lexist)
 1590.                    IF (.NOT. lexist) THEN
 1591.                       CALL FatalError(h//" file "//TRIM(fNameRouLen)//" does not exist")
 1592.                    END IF
 1593.             
 1594.                    INQUIRE (FILE=TRIM(fNameSibVeg),exist=lexist)
 1595.                    IF (.NOT. lexist) THEN
 1596.                       CALL FatalError(h//" file "//TRIM(fNameSibVeg)//" does not exist")
 1597.                    END IF
 1598.             
 1599.                    IF (iglsm_w .ne. 0) THEN
 1600.                       INQUIRE (FILE=TRIM(fNameSoilType),exist=lexist)
 1601.                       IF (.NOT. lexist) THEN
 1602.                          CALL FatalError(h//" file "//TRIM(fNameSoilType)//" does not exist")
 1603.                       END IF
 1604.             
 1605.                       INQUIRE (FILE=TRIM(fNameVegType),exist=lexist)
 1606.                       IF (.NOT. lexist) THEN
 1607.                          CALL FatalError(h//" file "//TRIM(fNameVegType)//" does not exist")
 1608.                       END IF
 1609.             
 1610.                       INQUIRE (FILE=TRIM(fNameSoilMoist),exist=lexist)
 1611.                       IF (.NOT. lexist) THEN
 1612.                          CALL FatalError(h//" file "//TRIM(fNameSoilMoist)//" does not exist")
 1613.                       END IF
 1614.                    END IF
 1615.                 END IF
 1616.             
 1617.                 IF (ifco2>0) THEN
 1618.                    INQUIRE (FILE=TRIM(fNameCO2),exist=lexist)
 1619.                    IF (.NOT. lexist) THEN
 1620.                       CALL FatalError(h//" file "//TRIM(fNameCO2)//" does not exist")
 1621.                    END IF
 1622.                 END IF
 1623.             
 1624.                 IF (ifozone/=0) THEN
 1625.                    INQUIRE (FILE=TRIM(fNameOzone),exist=lexist)
 1626.                    IF (.NOT. lexist) THEN
 1627.                       CALL FatalError(h//" file "//TRIM(fNameOzone)//" does not exist")
 1628.                    END IF
 1629.                 END IF
 1630.             
 1631.               END SUBROUTINE SetFileNameGaussPoints
 1632.             
 1633.             
 1634.             
 1635.               SUBROUTINE SetFileNameWavesPerLat(trunc, jMax)
 1636.                 INTEGER, INTENT(IN) :: trunc
 1637.                 INTEGER, INTENT(IN) :: jMax
 1638.                 CHARACTER(LEN=5) :: c0
 1639.                 CHARACTER(LEN=4) :: c1
 1640.                 LOGICAL :: lexist
 1641.                 CHARACTER(LEN=*), PARAMETER :: h="**(SetFileNameWavesPerLat)**"
 1642.             
 1643.                 WRITE(c0,"(i5.5)") jMax
 1644.                 WRITE(c1,"(i4.4)") trunc
 1645.             
 1646.                 IF (mGiven) THEN
 1647.                    fNameWaves  = TRIM(path_in1)//"/mwaves.T"//c1//"G"//c0
 1648.                    INQUIRE (FILE=TRIM(fNameWaves),exist=lexist)
 1649.                    IF (.NOT. lexist) THEN
 1650.                       CALL FatalError(h//" file "//TRIM(fNameWaves)//" does not exist")
 1651.                    END IF
 1652.                 ELSE
 1653.                    fNameWaves  = TRIM(path_in1)//"/mwaves.T"//c1//"G"//c0
 1654.                 END IF
 1655.             
 1656.                 fNameNmi    = TRIM(path_in1)//"NMI.T"//TRIM(c1)//TRIM(LV)
 1657.                 INQUIRE (FILE=TRIM(fNameNmi),exist=lexist)
 1658.                 IF (.NOT. lexist) THEN
 1659.                    CALL MsgOne(h," file "//TRIM(fNameNmi)//" does not exist")
 1660.                 END IF
 1661.             
 1662.               END SUBROUTINE SetFileNameWavesPerLat
 1663.             
 1664.               SUBROUTINE FileNameAnalis()
 1665.               IMPLICIT NONE
 1666.                 CHARACTER(LEN=10)                 :: LABELI
 1667.                 CHARACTER(LEN=10)                 :: LABELC
 1668.                 CHARACTER(LEN=10)                 :: LABELF
 1669.                 WRITE(*,*)'pk1',IDATEI,IDATEW,IDATEF
 1670.                 WRITE(LABELI,'(i4.4,3i2.2)')IDATEI(4),IDATEI(3),IDATEI(2),IDATEI(1)
 1671.                 WRITE(LABELC,'(i4.4,3i2.2)')IDATEW(4),IDATEW(3),IDATEW(2),IDATEW(1)
 1672.                 WRITE(LABELF,'(i4.4,3i2.2)')IDATEF(4),IDATEF(3),IDATEF(2),IDATEF(1) 
 1673.                 WRITE(*,*) LABELI,LABELC,LABELF
 1674.                 IF ( TRIM(START) == 'cold' ) THEN
 1675.                    EXTS='S.unf'
 1676.                    EXTW='F.unf'
 1677.                    EXDW='F.dir'
 1678.                    EXTH='F.unf'
 1679.                    EXDH='F.dir'
 1680.                    LABELC=LABELF
 1681.                    fNameInput0=TRIM(path_in1)//'GANL'//TRIM(PREFY)//LABELI//EXTS//'.'//TRIM(TRCG)//TRIM(LV)
 1682.                    fNameInput1=TRIM(path_in1)//'GANL'//TRIM(PREFY)//LABELI//EXTS//'.'//TRIM(TRCG)//TRIM(LV)
 1683.                 ELSEIF ( TRIM(START) == 'warm' ) THEN
 1684.                    EXTS='S.unf'
 1685.                    EXTW='F.unf'
 1686.                    EXDW='F.dir'
 1687.                    EXTH='F.unf'
 1688.                    EXDH='F.dir'
 1689.                    fNameInput0=TRIM(dirfNameOutput)//'/'//'GFCT'//TRIM(PREFX)//LABELI//LABELC//EXTW//'.'//TRIM(TRCG)//TRIM(LV)//'.outmdt'
 1690.                    fNameInput1=TRIM(dirfNameOutput)//'/'//'GFCT'//TRIM(PREFX)//LABELI//LABELC//EXTW//'.'//TRIM(TRCG)//TRIM(LV)//'.outatt'
 1691.                 END IF
 1692.               END SUBROUTINE FileNameAnalis
 1693.             
 1694.             
 1695.               SUBROUTINE FileNameRest(PRC,OPT)
 1696.                IMPLICIT NONE
 1697.                 CHARACTER(LEN=*) , INTENT(IN   )  :: PRC
 1698.                 INTEGER          , INTENT(IN   )  :: OPT
 1699.                 CHARACTER(LEN=10)                 :: LABELI
 1700.                 CHARACTER(LEN=10)                 :: LABELC
 1701.                 CHARACTER(LEN=10)                 :: LABELF
 1702.                 WRITE(*,*)'pk2',idate,idatec
 1703.                 WRITE(LABELI(1:10),'(i4.4,3i2.2)')idate(4),idate(2),idate(3),idate(1)
 1704.                 WRITE(LABELC(1:10),'(i4.4,3i2.2)')idatec(4),idatec(2),idatec(3),idatec(1)
 1705.                 WRITE(LABELF(1:10),'(i4.4,3i2.2)')idatec(4),idatec(2),idatec(3),idatec(1)
 1706.                 IF (OPT==1) THEN
 1707.                     FNameRestInput1=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1708.                         &EXTW//'.'//TRIM(TruncLev)//'.outmdt'//TRIM(PRC)
 1709.             
 1710.                     FNameRestInput2=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1711.                         &EXTW//'.'//TRIM(TruncLev)//'.outatt'//TRIM(PRC)
 1712.             
 1713.                     FNameConvClInp0=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1714.                         &EXTW//'.'//TRIM(TruncLev)//'.convcl'//TRIM(PRC)
 1715.             
 1716.                     FNameSibPrgInp0=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1717.                         &EXTW//'.'//TRIM(TruncLev)//'.sibprg'//TRIM(PRC)
 1718.                 ELSE
 1719.                     FNameSibPrgOut1=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1720.                          &EXTW//'.'//TRIM(TruncLev)//'.sibprg'//TRIM(PRC)
 1721.             
 1722.                     FNameConvClOut1=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1723.                          &EXTW//'.'//TRIM(TruncLev)//'.convcl'//TRIM(PRC)
 1724.             
 1725.                     FNameRestOutput2=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1726.                          &EXTW//'.'//TRIM(TruncLev)//'.outatt'//TRIM(PRC)
 1727.             
 1728.                     FNameRestOutput1=TRIM(dirFnameOutput)//"/"//"GFCT"//TRIM(PREFX)//labeli//labelc//&
 1729.                          &EXTW//'.'//TRIM(TruncLev)//'.outmdt'//TRIM(PRC)
 1730.                 END IF
 1731.               END SUBROUTINE FileNameRest
 1732.             
 1733.             
 1734.               SUBROUTINE FileNameGeral(PRC,OPT)
 1735.                 IMPLICIT NONE
 1736.                 CHARACTER(LEN=*), INTENT(IN   )  :: PRC
 1737.                 CHARACTER(LEN=*), INTENT(IN   )  :: OPT
 1738.                 CHARACTER(LEN=10)                :: LABELII
 1739.                 CHARACTER(LEN=10)                :: LABELCC
 1740.                 CHARACTER(LEN=10)                :: LABELFF
 1741.                 WRITE(*,*)'pk3',IDATEI,IDATEW,IDATEF,PRC,OPT,EXTW,EXDH
 1742.                 WRITE(LABELII,'(i4.4,3i2.2)')IDATEI(4),IDATEI(3),IDATEI(2),IDATEI(1)
 1743.                 WRITE(LABELCC,'(i4.4,3i2.2)')IDATEW(4),IDATEW(3),IDATEW(2),IDATEW(1)
 1744.                 WRITE(LABELFF,'(i4.4,3i2.2)')IDATEF(4),IDATEF(3),IDATEF(2),IDATEF(1)
 1745.                 WRITE(*,*) LABELII,LABELCC,LABELFF
 1746.                 IF(TRIM(OPT)=='GDHN')THEN
 1747.                    FNameGDHN=TRIM(dirFnameOutput)//"/"//TRIM(OPT)//TRIM(PREFX)//labelii//labelcc//EXTW//'.'//TRIM(TruncLev)
 1748.                 ELSE IF (TRIM(OPT)=='GDYN') THEN
 1749.                    FNameGDYN=TRIM(dirFnameOutput)//"/"//TRIM(OPT)//TRIM(PREFX)//labelii//labelff//&
 1750.                              &EXTW//'.'//TRIM(TruncLev)
 1751.                 ELSE IF (TRIM(OPT)=='GPRC') THEN
 1752.                    FNameGPRC=TRIM(dirFnameOutput)//"/"//TRIM(OPT)//TRIM(PREFX)//labelii//labelcc//&
 1753.                       &EXTW//'.'//TRIM(TruncLev)    
 1754.                 ELSE IF (TRIM(OPT)=='GFGH') THEN
 1755.                    FNameOutGH=TRIM(dirFnameOutput)//"/"//TRIM(OPT)//TRIM(PREFX)//labelii//labelcc//EXTW//'.'//TRIM(TruncLev)
 1756.                    FNameTopGH=TRIM(dirFnameOutput)//"/"//TRIM(OPT)//TRIM(PREFX)//labelii//labelcc//'F.top'//'.'//TRIM(TruncLev)
 1757.                    FNamenDrGH=TRIM(dirFnameOutput)//"/"//TRIM(OPT)//TRIM(PREFX)//labelii//labelcc//EXDH//'.'//TRIM(TruncLev)
 1758.                 END IF 
 1759.               END SUBROUTINE FileNameGeral
 1760.             
 1761.             
 1762.               SUBROUTINE SetOutPut (tod1,idate)
 1763.             
 1764.                 REAL(KIND=r8)   , INTENT(IN  )  :: tod1
 1765.                 INTEGER, INTENT(IN  )  :: idate (4)
 1766.             
 1767.                 REAL(KIND=r8)     :: tod
 1768.                 INTEGER  :: l
 1769.                 INTEGER  :: maxtfm2
 1770.                 INTEGER  :: jdt
 1771.                 INTEGER  :: ihour
 1772.                 INTEGER  :: idays
 1773.                 INTEGER  :: imont
 1774.                 INTEGER  :: iyear
 1775.                 REAL(KIND=r8)     :: cthr(maxtim)
 1776.                 INTEGER, PARAMETER :: imonth=12
 1777.                 INTEGER, PARAMETER :: nday1(imonth)=(/31,28,31,30,31,30,&
 1778.                      31,31,30,31,30,31 /)
 1779.                 INTEGER, PARAMETER :: nday2(imonth)=(/31,29,31,30,31,30,&
 1780.                      31,31,30,31,30,31 /)
 1781.                 tod=tod1
 1782.                 IF(dhfct >= 0 ) THEN
 1783.                    IF (dhfct > 0) THEN
 1784.                       maxtfm2=maxtim
 1785.  A-------<>           cthr  =0.0_r8
 1786.                       cthr(1)=dhfct
 1787.  r4-------<           DO l=2,maxtfm2
 1788.  r4                      cthr(l)=cthr(l-1)+dhfct
 1789.  r4------->           END DO
 1790.                    ELSE IF ( dhfct == 0 ) THEN
 1791.                       READ(nNameList,*)maxtfm2
 1792.                       IF (maxtfm2 > 0)   THEN
 1793.                          READ(nNameList,*)cthr( 1:maxtfm2)
 1794.                       ELSE
 1795.                          maxtfm2      = 17 ! number of output forecast
 1796.  A-------<>              cthr        = 0.0_r8
 1797.                          cthr( 1)= 6.0_r8;cthr( 2)=12.0_r8;cthr( 3)= 18.0_r8;cthr( 4)= 24.0_r8
 1798.                          cthr( 5)=30.0_r8;cthr( 6)=36.0_r8;cthr( 7)= 42.0_r8;cthr( 8)= 48.0_r8
 1799.                          cthr( 9)=54.0_r8;cthr(10)=60.0_r8;cthr(11)= 66.0_r8;cthr(12)= 72.0_r8
 1800.                          cthr(13)=84.0_r8;cthr(14)=96.0_r8;cthr(15)=120.0_r8;cthr(16)=144.0_r8
 1801.                          cthr(17)=168.0_r8
 1802.                       END IF
 1803.                    END IF
 1804.                    CLOSE(nNameList)
 1805.             
 1806.                    ihour=0
 1807.  1--------<        DO jdt=1,maxtim
 1808.  1                    tod=tod+delt
 1809.  1                    IF(MOD(tod,3600.0_r8) == 0.0_r8) THEN
 1810.  1                       ihour=ihour+1
 1811.  1 2------<              DO l=1,maxtfm2
 1812.  1 2                        IF (abs(cthr(l)-ihour) .le. 0.00001_r8) THEN
 1813.  1 2                           cthl(jdt)=.true.
 1814.  1 2                           !PRINT*, cthl(jdt),cthr(l),jdt,tod,ihour
 1815.  1 2                        END IF
 1816.  1 2------>              END DO
 1817.  1                       tod  =0.0_r8
 1818.  1                    END IF
 1819.  1-------->        END DO
 1820.             
 1821.                 ELSE
 1822.                    ihour=idate(1)
 1823.                    idays=idate(3)
 1824.                    imont=idate(2)
 1825.                    iyear=idate(4)
 1826.             
 1827.  1--------<        DO jdt=1,maxtim
 1828.  1                    tod=tod+delt
 1829.  1          
 1830.  1                    IF(MOD(tod, 3600.0_r8) == 0.0_r8) THEN
 1831.  1                       ihour=ihour+1
 1832.  1                       IF (ihour == 24 )ihour  = 0
 1833.  1                    END IF
 1834.  1          
 1835.  1                    IF(MOD(tod,86400.0_r8) == 0.0_r8) THEN
 1836.  1                       tod=0.0_r8
 1837.  1                       idays=idays+1
 1838.  1                    END IF
 1839.  1          
 1840.  1                    IF( MOD(REAL(iyear,r8),4.0_r8) == 0.0_r8) THEN
 1841.  1          
 1842.  1                       IF(idays > nday2(imont)) THEN
 1843.  1                          idays=1
 1844.  1                          imont=imont+1
 1845.  1                          cthl(jdt)   =.true.
 1846.  1                          IF(imont > 12) THEN
 1847.  1                             imont = 1
 1848.  1                             iyear = iyear + 1
 1849.  1                          END IF
 1850.  1                          PRINT*,cthl(jdt) ,iyear, imont, idays, ihour,tod
 1851.  1                       END IF
 1852.  1          
 1853.  1                    ELSE
 1854.  1          
 1855.  1                       IF(idays > nday1(imont)) THEN
 1856.  1                          idays=1
 1857.  1                          imont=imont+1
 1858.  1                          cthl(jdt)   =.true.
 1859.  1                          IF(imont > 12) THEN
 1860.  1                             imont = 1
 1861.  1                             iyear = iyear + 1
 1862.  1                          END IF
 1863.  1                          PRINT*,cthl(jdt) ,iyear, imont, idays, ihour,tod
 1864.  1                       END IF
 1865.  1          
 1866.  1                    END IF
 1867.  1-------->        END DO
 1868.                 END IF
 1869.               END SUBROUTINE SetOutPut
 1870.             
 1871.             END MODULE Options

ftn-3021 ftn: IPA File = Options.f90, Line = 638 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 644 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 651 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 658 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 665 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 672 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6250 ftn: VECTOR File = Options.f90, Line = 716 
  A loop starting at line 716 was not vectorized for an unspecified reason.

ftn-3021 ftn: IPA File = Options.f90, Line = 722 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 724 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 728 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Options.f90, Line = 728 
  Routine CHECKOPTIONS was not inlined because it is a leaf routine which is too large to expand. 

ftn-3001 ftn: IPA File = Options.f90, Line = 733 
  The call to COLDWARM was textually inlined.

ftn-3021 ftn: IPA File = Options.f90, Line = 753 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 758 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 781 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 790 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 794 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 798 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 803 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 816 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 823 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 830 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 834 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 839 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 849 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 864 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 871 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 876 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 881 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 890 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 910 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 936 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 944 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 969 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 973 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 974 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 978 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 983 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 985 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 987 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 989 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 991 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 993 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 995 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 996 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1002 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1004 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1006 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1008 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1009 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1015 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1018 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1021 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1024 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1026 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1028 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1030 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1032 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1039 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1041 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1043 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1045 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1047 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1049 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1056 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1058 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1060 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1062 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1065 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1069 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1076 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1078 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1080 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1085 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1137 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Options.f90, Line = 1137 
  A loop starting at line 1137 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Options.f90, Line = 1137 
  A loop starting at line 1137 was vectorized.

ftn-3001 ftn: IPA File = Options.f90, Line = 1137 
  The call to JULL was textually inlined.

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1138 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1139 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Options.f90, Line = 1139 
  A loop starting at line 1139 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Options.f90, Line = 1139 
  A loop starting at line 1139 was vectorized.

ftn-3001 ftn: IPA File = Options.f90, Line = 1139 
  The call to JULL was textually inlined.

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1140 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Options.f90, Line = 1145 
  A loop starting at line 1145 was not vectorized because a recurrence was found on "MONDAY" at line 1162.

ftn-6204 ftn: VECTOR File = Options.f90, Line = 1149 
  A loop starting at line 1149 was vectorized.

ftn-6204 ftn: VECTOR File = Options.f90, Line = 1151 
  A loop starting at line 1151 was vectorized.

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1162 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Options.f90, Line = 1162 
  A loop starting at line 1162 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Options.f90, Line = 1162 
  A loop starting at line 1162 was vectorized.

ftn-3001 ftn: IPA File = Options.f90, Line = 1162 
  The call to JULL was textually inlined.

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1163 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Options.f90, Line = 1245 
  A loop starting at line 1245 was vectorized.

ftn-6005 ftn: SCALAR File = Options.f90, Line = 1250 
  A loop starting at line 1250 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Options.f90, Line = 1250 
  A loop starting at line 1250 was not vectorized because a recurrence was found on "MONDAY" at line 1251.

ftn-6010 ftn: SCALAR File = Options.f90, Line = 1255 
  A divide was turned into a multiply by a reciprocal

ftn-3021 ftn: IPA File = Options.f90, Line = 1294 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1314 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1315 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1316 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1317 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1318 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1334 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1387 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1514 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = Options.f90, Line = 1514 
  Routine SETSST was not inlined because it is a leaf routine which is too large to expand. 

ftn-3021 ftn: IPA File = Options.f90, Line = 1519 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1523 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1529 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1534 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1539 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1544 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1549 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1556 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1561 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1566 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1571 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1576 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1581 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1586 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1591 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1596 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1602 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1607 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1612 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1620 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1627 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1650 
  Routine FATALERROR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = Options.f90, Line = 1659 
  Routine MSGONE was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6202 ftn: VECTOR File = Options.f90, Line = 1785 
  A loop starting at line 1785 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Options.f90, Line = 1787 
  A loop starting at line 1787 was unrolled 4 times.

ftn-6254 ftn: VECTOR File = Options.f90, Line = 1787 
  A loop starting at line 1787 was not vectorized because a recurrence was found on "CTHR" at line 1788.

ftn-6009 ftn: SCALAR File = Options.f90, Line = 1788 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6202 ftn: VECTOR File = Options.f90, Line = 1796 
  A loop starting at line 1796 was replaced by a library call.

ftn-6294 ftn: VECTOR File = Options.f90, Line = 1807 
  A loop starting at line 1807 was not vectorized because a better candidate was found at line 1811.

ftn-6263 ftn: VECTOR File = Options.f90, Line = 1811 
  A loop starting at line 1811 was not vectorized because it contains a reference to a non-vector intrinsic on line 1813.

ftn-6262 ftn: VECTOR File = Options.f90, Line = 1827 
  A loop starting at line 1827 was not vectorized because it contains a call to a subroutine or function on line 1850.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 C r o s s   R e f e r e n c e   for   OPTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used    1812

ACUM0                           Static offset=0                   REAL(KIND=8), SAVE, Initialized
  Decl     207
  Set 
  Used

ACUM0                                                             INTEGER, Implicit type
  Decl     616
  Set 
  Used

ADJUSTL                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0     639     646     653     660     667     674
           758     799     830     834     839     864     871     876     881     944     945     989     991     993    1019
          1065    1066    1069    1070

ALLGHF                          Static offset=64                  LOGICAL, SAVE, Initialized
  Decl     191
  Set 
  Used

ALLGHF                                                            INTEGER, Implicit type
  Decl     621
  Set 
  Used

ALPHA                           Static offset=128                 REAL(KIND=8), SAVE, Initialized
  Decl     195
  Set 
  Used

ALPHA                                                             INTEGER, Implicit type
  Decl     623
  Set 
  Used

ANY                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used     716

ASOLC                           Static offset=192                 REAL(KIND=8), SAVE, Initialized
  Decl     159
  Set 
  Used     796     797     990

ASOLC                                                             INTEGER, Implicit type
  Decl     611
  Set 
  Used

ASOLM                           Static offset=256                 REAL(KIND=8), SAVE, Initialized
  Decl     160
  Set 
  Used     801     802     988

ASOLM                                                             INTEGER, Implicit type
  Decl     611
  Set 
  Used

C0                              Stack                             CHARACTER(8)
  Decl     597
  Set 
  Used     637     643     650     657     664     671     752     757

C0                              Stack                             CHARACTER(8)
  Decl     772
  Set 
  Used     789     797     802     829     833     838     863     870     875     880

C0                              Stack                             CHARACTER(16)
  Decl     902
  Set 
  Used     942     988     990     992    1017    1063    1067

C0                              Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1284    1285
  Set 
  Used    1308    1311    1319    1329

C0                              Stack                             CHARACTER(5)
  Decl    1374
  Set 
  Used    1382    1384    1390    1395    1399    1403    1407    1443    1447    1463    1467    1471    1475    1482    1484
          1486    1488    1497    1499    1501    1503    1514

C0                              Stack                             CHARACTER(5)
  Decl    1638
  Set 
  Used    1643    1647    1653

C1                              Stack                             CHARACTER(16)
  Decl     903
  Set 
  Used     943    1064    1068

C1                              Stack                             CHARACTER(4)
  Decl    1639
  Set 
  Used    1644    1647    1653    1656

CDHL                            Heap                              LOGICAL, DIMENSION(:), ALLOCATABLE, SAVE
  Decl     573
  Set 
  Used     750

CFLRIC                          Static offset=0                   REAL(KIND=8), SAVE
  Decl     561
  Set 
  Used

CFLRIC                                                            INTEGER, Implicit type
  Decl     617
  Set 
  Used

CHECKOPTIONS                                                      Subroutine, Module procedure, PRIVATE
  Decl     771
  Set 
  Used     728

CHK                             Stack                             REAL(KIND=8)
  Decl    1126
  Set     1197
  Used    1198

CO2IPCC                         Static offset=896                 CHARACTER(4), SAVE, Initialized
  Decl     186
  Set 
  Used

CO2VAL                          Static offset=960                 REAL(KIND=8), SAVE, Initialized
  Decl     184
  Set 
  Used    1017

CO2VAL                                                            INTEGER, Implicit type
  Decl     615
  Set 
  Used

COLDWARM                                                          Subroutine, Module procedure, PRIVATE
  Decl    1262
  Set 
  Used     733

COMCON                                                            Namelist group
  Decl     619
  Set 
  Used     669

CONSTANTS                                                         Module
  Decl
  Set 
  Used       7

CRDCLD                          Static offset=1024                REAL(KIND=8), SAVE, Initialized
  Decl     161
  Set 
  Used     788     789     793     992

CRDCLD                                                            INTEGER, Implicit type
  Decl     611
  Set 
  Used

CREATEFILENAME                                                    Generic interface
  Decl     584     585
  Set 
  Used

CTDH0                           Static offset=64                  REAL(KIND=8), SAVE
  Decl      45
  Set     1212
  Used    1221

CTEH0                           Static offset=128                 REAL(KIND=8), SAVE
  Decl      48
  Set     1214
  Used    1222

CTH0                            Static offset=192                 REAL(KIND=8), SAVE
  Decl      42
  Set     1210
  Used    1220

CTHL                            Heap                              LOGICAL, DIMENSION(:), ALLOCATABLE, SAVE
  Decl     574
  Set     1813    1845    1858
  Used     755    1850    1863

CTHR                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1775
  Set     1785    1786    1788    1796    1797    1797    1797    1797    1798    1798    1798    1798    1799    1799    1799
          1799    1800    1800    1800    1800    1801
  Used    1793    1812

DATEHF                          Stack                             REAL(KIND=8)
  Decl    1115
  Set     1140
  Used

DATEHR                          Stack                             REAL(KIND=8)
  Decl    1114
  Set     1138    1163
  Used

DBASE                           Static offset=1664                REAL(KIND=8), SAVE, Initialized
  Decl     212
  Set 
  Used

DCT                             Static offset=256                 REAL(KIND=8), SAVE
  Decl      43
  Set     1220
  Used

DCTD                            Static offset=320                 REAL(KIND=8), SAVE
  Decl      46
  Set     1221
  Used

DCTE                            Static offset=384                 REAL(KIND=8), SAVE
  Decl      49
  Set     1222
  Used

DDELT                           Static offset=448                 INTEGER, SAVE
  Decl      51
  Set      714
  Used     943

DELT                            Static offset=512                 REAL(KIND=8), SAVE
  Decl     559
  Set      715
  Used    1808    1828

DF                              Stack                             INTEGER
  Decl    1110
  Set     1133
  Used    1139    1142    1199

DFACT                           Static offset=1728                REAL(KIND=8), SAVE, Initialized
  Decl     218
  Set 
  Used

DFILTA                          Static offset=1792                REAL(KIND=8), SAVE, Initialized
  Decl     192
  Set 
  Used

DH                              Stack                             REAL(KIND=8)
  Decl    1123
  Set     1194
  Used    1195    1196    1198

DHDHN                           Static offset=576                 INTEGER, SAVE
  Decl      27
  Set 
  Used     722     724

DHDHN                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

DHDHN                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    1095    1101
  Set     1174
  Used    1176    1177    1212

DHEXT                           Static offset=640                 INTEGER, SAVE
  Decl      29
  Set 
  Used     722     724

DHEXT                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

DHEXT                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    1095    1103
  Set     1183
  Used    1186    1187    1214

DHFCT                           Static offset=704                 INTEGER, SAVE
  Decl      25
  Set 
  Used     722     724    1782    1783    1786    1788    1790

DHFCT                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

DHFCT                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1095    1099
  Set 
  Used    1167    1168    1192    1196    1197    1201    1210

DHRES                           Static offset=768                 INTEGER, SAVE
  Decl      26
  Set 
  Used     726

DHRES                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

DI                              Stack                             INTEGER
  Decl    1106
  Set     1129    1153    1155
  Used    1137    1142    1154    1162    1200

DI                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1230    1234
  Set 
  Used    1255

DIABATIC                        Static offset=1856                LOGICAL, SAVE, Initialized
  Decl     117
  Set     1268
  Used

DIABATIC                                                          INTEGER, Implicit type
  Decl     604
  Set 
  Used

DIRFNAMEOUTPUT                  Static offset=832                 CHARACTER(200), SAVE
  Decl      39
  Set 
  Used    1689    1690    1707    1710    1713    1716    1719    1722    1725    1728    1747    1749    1752    1755    1756
          1757

DIRFNAMEOUTPUT                                                    INTEGER, Implicit type
  Decl     602
  Set 
  Used

DK                              Static offset=1920                REAL(KIND=8), SAVE, Initialized
  Decl     231
  Set 
  Used

DK                                                                INTEGER, Implicit type
  Decl     623
  Set 
  Used

DODYN                           Static offset=1984                LOGICAL, SAVE, Initialized
  Decl     203
  Set 
  Used

DODYN                                                             INTEGER, Implicit type
  Decl     623
  Set 
  Used

DOGRH                           Static offset=2432                LOGICAL, SAVE
  Decl      31
  Set 
  Used     711

DOGRH                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

DOGWD                           Static offset=2496                INTEGER, SAVE
  Decl     568
  Set 
  Used

DOPRC                           Static offset=2560                LOGICAL, SAVE
  Decl      32
  Set 
  Used     712

DOPRC                                                             INTEGER, Implicit type
  Decl     602
  Set 
  Used

DOPREC                          Static offset=2048                LOGICAL, SAVE, Initialized
  Decl     202
  Set      712
  Used

DOSMC                           Static offset=2624                LOGICAL, SAVE
  Decl      33
  Set 
  Used

DPERCU                          Static offset=2112                REAL(KIND=8), SAVE, Initialized
  Decl     193
  Set 
  Used

DPERCU                                                            INTEGER, Implicit type
  Decl     623
  Set 
  Used

DT                              Static offset=2688                REAL(KIND=8), SAVE
  Decl      19
  Set 
  Used     714     715     726     736    1166    1195    1215

DT                                                                INTEGER, Implicit type
  Decl     600
  Set 
  Used

DTC3X                           Static offset=2752                REAL(KIND=8), SAVE
  Decl     565
  Set      735
  Used

DUMPOPTIONS                                                       Subroutine, Module procedure
  Decl     580     900
  Set 
  Used

EIGENINIT                       Static offset=2176                LOGICAL, SAVE, Initialized
  Decl     118
  Set     1269
  Used

EIGENINIT                                                         INTEGER, Implicit type
  Decl     604
  Set 
  Used

ENHDIF                          Static offset=2240                CHARACTER(4), SAVE, Initialized
  Decl     157
  Set 
  Used

ENHDIF                                                            INTEGER, Implicit type
  Decl     611
  Set 
  Used

EPSFLT                          Static offset=2816                REAL(KIND=8), SAVE
  Decl     566
  Set      746     748
  Used

EXDF                            Static offset=2880                CHARACTER(5), SAVE
  Decl      58
  Set 
  Used

EXDH                            Static offset=2944                CHARACTER(5), SAVE
  Decl      60
  Set     1679    1688
  Used    1741    1757

EXDW                            Static offset=3008                CHARACTER(5), SAVE
  Decl      62
  Set     1677    1686
  Used

EXTF                            Static offset=3072                CHARACTER(5), SAVE
  Decl      57
  Set 
  Used

EXTH                            Static offset=3136                CHARACTER(5), SAVE
  Decl      59
  Set     1678    1687
  Used

EXTS                            Static offset=3200                CHARACTER(5), SAVE
  Decl      63
  Set     1380    1675    1684
  Used    1399    1681    1682

EXTW                            Static offset=3264                CHARACTER(5), SAVE
  Decl      61
  Set     1676    1685
  Used    1689    1690    1708    1711    1714    1717    1720    1723    1726    1729    1741    1747    1750    1753    1755

F3600                                                             REAL(KIND=8), PARAMETER
  Decl    1242
  Set 
  Used    1253    1254

FATALERROR                      Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     638     651     665
           753     781     798     816     830     839     864     876     890    1334    1387    1519    1523    1529    1534
          1539    1544    1549    1556    1561    1566    1571    1576    1581    1586    1591    1596    1602    1607    1612
          1620    1627    1650

FATALERROR                      Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0     638     651     665
           753     781     798     816     830     839     864     876     890    1334    1387    1519    1523    1529    1534
          1539    1544    1549    1556    1561    1566    1571    1576    1581    1586    1591    1596    1602    1607    1612
          1620    1627    1650

FILENAMEANALIS                                                    Subroutine, Module procedure, PRIVATE
  Decl    1664
  Set 
  Used

FILENAMEGERAL                                                     Subroutine, Module procedure, PRIVATE
  Decl    1734
  Set 
  Used

FILENAMEREST                                                      Subroutine, Module procedure, PRIVATE
  Decl    1695
  Set 
  Used

FILTA                           Static offset=2304                REAL(KIND=8), SAVE, Initialized
  Decl     174
  Set 
  Used     737     748

FILTA                                                             INTEGER, Implicit type
  Decl     620
  Set 
  Used

FILTB                           Static offset=2368                REAL(KIND=8), SAVE, Initialized
  Decl     176
  Set      737
  Used

FINT                            Static offset=2432                REAL(KIND=8), SAVE, Initialized
  Decl     168
  Set 
  Used

FINT                                                              INTEGER, Implicit type
  Decl     619
  Set 
  Used

FIRST                           Static offset=3328                LOGICAL, SAVE
  Decl     564
  Set     1265    1271
  Used

FNAMEALBEDO                     Static offset=3392                CHARACTER(206), SAVE
  Decl      90
  Set     1415
  Used

FNAMECNF2TB                     Static offset=5056                CHARACTER(206), SAVE
  Decl      98
  Set     1431
  Used

FNAMECNFTBL                     Static offset=6720                CHARACTER(206), SAVE
  Decl      97
  Set     1427
  Used

FNAMECO2                        Static offset=8384                CHARACTER(206), SAVE
  Decl      93
  Set     1482    1484    1486    1488
  Used

FNAMECONVCLINP0                 Static offset=10048               CHARACTER(253), SAVE
  Decl      77
  Set     1713
  Used

FNAMECONVCLOUT1                 Static offset=12096               CHARACTER(253), SAVE
  Decl      78
  Set     1722
  Used

FNAMEDTABLE                     Static offset=14144               CHARACTER(214), SAVE
  Decl     103
  Set     1452    1454    1456    1458
  Used

FNAMEGAUSS                      Static offset=15872               CHARACTER(211), SAVE
  Decl      91
  Set     1384    1390
  Used

FNAMEGDHN                       Static offset=17600               CHARACTER(253), SAVE
  Decl      67
  Set     1747
  Used

FNAMEGDYN                       Static offset=19648               CHARACTER(253), SAVE
  Decl      68
  Set     1749
  Used

FNAMEGHLOC                      Static offset=21696               CHARACTER(212), SAVE
  Decl     104
  Set     1463
  Used

FNAMEGHTABLE                    Static offset=23424               CHARACTER(209), SAVE
  Decl     105
  Set     1435
  Used

FNAMEGPRC                       Static offset=25152               CHARACTER(253), SAVE
  Decl      69
  Set     1752
  Used

FNAMEINPUT0                     Static offset=27200               CHARACTER(251), SAVE
  Decl      81
  Set     1681    1689
  Used

FNAMEINPUT1                     Static offset=29248               CHARACTER(251), SAVE
  Decl      82
  Set     1682    1690
  Used

FNAMELIST                       Static offset=31296               CHARACTER(253), SAVE
  Decl      66
  Set      630
  Used

FNAMELOOKTB                     Static offset=33344               CHARACTER(206), SAVE
  Decl      99
  Set     1423
  Used

FNAMENDRGH                      Static offset=35008               CHARACTER(253), SAVE
  Decl      72
  Set     1757
  Used

FNAMENMI                        Static offset=37056               CHARACTER(212), SAVE
  Decl      83
  Set     1656
  Used

FNAMEORGVAR                     Static offset=38784               CHARACTER(211), SAVE
  Decl     106
  Set     1407
  Used

FNAMEOUTGH                      Static offset=40512               CHARACTER(253), SAVE
  Decl      70
  Set     1755
  Used

FNAMEOZONE                      Static offset=42560               CHARACTER(206), SAVE
  Decl      94
  Set     1497    1499    1501    1503
  Used

FNAMERESTINPUT1                 Static offset=44224               CHARACTER(253), SAVE
  Decl      75
  Set     1707
  Used

FNAMERESTINPUT2                 Static offset=46272               CHARACTER(253), SAVE
  Decl      73
  Set     1710
  Used

FNAMERESTOUTPUT1                Static offset=48320               CHARACTER(253), SAVE
  Decl      76
  Set     1728
  Used

FNAMERESTOUTPUT2                Static offset=50368               CHARACTER(253), SAVE
  Decl      74
  Set     1725
  Used

FNAMEROULEN                     Static offset=52416               CHARACTER(255), SAVE
  Decl     109
  Set     1447
  Used

FNAMESIBALB                     Static offset=54464               CHARACTER(206), SAVE
  Decl     102
  Set     1411
  Used

FNAMESIBMSK                     Static offset=56128               CHARACTER(211), SAVE
  Decl     107
  Set     1395
  Used

FNAMESIBPRGINP0                 Static offset=57856               CHARACTER(253), SAVE
  Decl      79
  Set     1716
  Used

FNAMESIBPRGOUT1                 Static offset=59904               CHARACTER(253), SAVE
  Decl      80
  Set     1719
  Used

FNAMESIBVEG                     Static offset=61952               CHARACTER(206), SAVE
  Decl     101
  Set     1439
  Used

FNAMESNOW                       Static offset=63616               CHARACTER(226), SAVE
  Decl      85
  Set     1399
  Used

FNAMESOILMOIST                  Static offset=65472               CHARACTER(225), SAVE
  Decl      89
  Set     1475
  Used

FNAMESOILMS                     Static offset=67328               CHARACTER(211), SAVE
  Decl      86
  Set     1403
  Used

FNAMESOILTYPE                   Static offset=69056               CHARACTER(225), SAVE
  Decl      87
  Set     1467
  Used

FNAMESPECLW                     Static offset=70912               CHARACTER(206), SAVE
  Decl      96
  Set     1510
  Used

FNAMESPECSW                     Static offset=72576               CHARACTER(206), SAVE
  Decl      95
  Set     1509
  Used

FNAMESSTAOI                     Static offset=74240               CHARACTER(200), SAVE
  Decl      84
  Set     1308    1311    1319    1322    1324    1326    1329
  Used

FNAMETG3ZRL                     Static offset=75840               CHARACTER(211), SAVE
  Decl     108
  Set     1443
  Used

FNAMETOPGH                      Static offset=77568               CHARACTER(253), SAVE
  Decl      71
  Set     1756
  Used

FNAMEUNITTB                     Static offset=79616               CHARACTER(206), SAVE
  Decl     100
  Set     1419
  Used

FNAMEVEGTYPE                    Static offset=81280               CHARACTER(229), SAVE
  Decl      88
  Set     1471
  Used

FNAMEWAVES                      Static offset=83136               CHARACTER(211), SAVE
  Decl      92
  Set     1647    1653
  Used

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

GAUSSGIVEN                      Static offset=2496                LOGICAL, SAVE, Initialized
  Decl     113
  Set 
  Used    1383

GAUSSGIVEN                                                        INTEGER, Implicit type
  Decl     605
  Set 
  Used

GENRESTFILES                    Static offset=2560                LOGICAL, SAVE, Initialized
  Decl     122
  Set 
  Used

GENRESTFILES                                                      INTEGER, Implicit type
  Decl     606
  Set 
  Used

GIVENFOURIERGROUPS              Static offset=2624                LOGICAL, SAVE, Initialized
  Decl     126
  Set 
  Used

GIVENFOURIERGROUPS                                                INTEGER, Implicit type
  Decl     607
  Set 
  Used

GREPAR1                         Static offset=2688                INTEGER, SAVE, Initialized
  Decl     162
  Set 
  Used     862     863    1063

GREPAR1                                                           INTEGER, Implicit type
  Decl     612
  Set 
  Used

GREPAR2                         Static offset=2752                INTEGER, SAVE, Initialized
  Decl     163
  Set 
  Used     869     870    1064

GREPAR2                                                           INTEGER, Implicit type
  Decl     612
  Set 
  Used

GREPAR3                         Static offset=2816                REAL(KIND=8), SAVE, Initialized
  Decl     164
  Set 
  Used     874     875    1067

GREPAR3                                                           INTEGER, Implicit type
  Decl     612
  Set 
  Used

GREPAR4                         Static offset=2880                REAL(KIND=8), SAVE, Initialized
  Decl     165
  Set 
  Used     879     880    1068

GREPAR4                                                           INTEGER, Implicit type
  Decl     612
  Set 
  Used

GRHFLG                          Static offset=2944                LOGICAL, SAVE, Initialized
  Decl     204
  Set      711
  Used    1516

H                                                                 CHARACTER(18), PARAMETER
  Decl     598
  Set 
  Used     638     644     651     658     665     672     753     758

H                                                                 CHARACTER(18), PARAMETER
  Decl     773
  Set 
  Used     781     790     794     798     803     816     823     830     834     839     849     864     871     876     881
           890

H                                                                 CHARACTER(17), PARAMETER
  Decl     906
  Set 
  Used     910     936     944     969     973     974     978     983     985     987     989     991     993     995     996
          1002    1004    1006    1008    1009    1015    1018    1021    1024    1026    1028    1030    1032    1039    1041
          1043    1045    1047    1049    1056    1058    1060    1062    1065    1069    1076    1078    1080    1085

H                                                                 CHARACTER(14), PARAMETER
  Decl    1263
  Set 
  Used

H                                                                 CHARACTER(12), PARAMETER
  Decl    1291
  Set 
  Used    1294    1314    1315    1316    1317    1318    1334

H                                                                 CHARACTER(28), PARAMETER
  Decl    1375
  Set 
  Used    1387    1519    1523    1529    1534    1539    1544    1549    1556    1561    1566    1571    1576    1581    1586
          1591    1596    1602    1607    1612    1620    1627

H                                                                 CHARACTER(28), PARAMETER
  Decl    1641
  Set 
  Used    1650    1659

HF                              Stack                             INTEGER
  Decl    1111
  Set     1132
  Used    1139    1193    1194    1199

HI                              Stack                             INTEGER
  Decl    1107
  Set     1128
  Used    1137    1162    1193    1194    1200

HI                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1230    1235
  Set 
  Used    1253

IBDIM_SIZE                      Static offset=3008                INTEGER, SAVE, Initialized
  Decl     132
  Set 
  Used

IBDIM_SIZE                                                        INTEGER, Implicit type
  Decl     607
  Set 
  Used

ICCON                           Static offset=3072                CHARACTER(3), SAVE, Initialized
  Decl     143
  Set 
  Used     848     855    1055    1057    1059    1061

ICCON                                                             INTEGER, Implicit type
  Decl     610
  Set 
  Used

ICKCFL                          Static offset=3136                CHARACTER(4), SAVE, Initialized
  Decl     156
  Set 
  Used

ICLD                            Static offset=3200                INTEGER, SAVE, Initialized
  Decl     228
  Set 
  Used

ICLD                                                              INTEGER, Implicit type
  Decl     615
  Set 
  Used

IDATE                           Static offset=84992               INTEGER, DIMENSION(4), SAVE
  Decl     556
  Set 
  Used    1297    1298    1302    1702    1703

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1095    1097
  Set 
  Used    1128    1129    1130    1131

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1762    1765
  Set 
  Used    1822    1823    1824    1825

IDATEC                          Static offset=85504               INTEGER, DIMENSION(4), SAVE
  Decl     557
  Set 
  Used    1702    1704    1705

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1095    1098
  Set 
  Used    1132    1133    1134    1135

IDATEF                          Static offset=86016               INTEGER, DIMENSION(4), SAVE
  Decl      23
  Set 
  Used     716     722     724     920     921     922     923    1379    1669    1672    1741    1744

IDATEF                                                            INTEGER, Implicit type
  Decl     600
  Set 
  Used

IDATEI                          Static offset=86528               INTEGER, DIMENSION(4), SAVE
  Decl      21
  Set 
  Used     724     915     916     917     918     926     927     928     929    1377    1669    1670    1741    1742

IDATEI                                                            INTEGER, Implicit type
  Decl     600
  Set 
  Used

IDATEW                          Static offset=87040               INTEGER, DIMENSION(4), SAVE
  Decl      22
  Set 
  Used     716     722     931     932     933     934    1378    1669    1671    1741    1743

IDATEW                                                            INTEGER, Implicit type
  Decl     600
  Set 
  Used

IDAYS                           Stack                             INTEGER
  Decl    1772
  Set     1823    1837    1843    1856
  Used    1842    1850    1855    1863

IDCON                           Static offset=3264                CHARACTER(4), SAVE, Initialized
  Decl     146
  Set 
  Used

IDRAG                           Static offset=3328                CHARACTER(4), SAVE, Initialized
  Decl     151
  Set 
  Used

IERR                            Stack                             INTEGER
  Decl     596
  Set 
  Used     636     637     641     642     643     648     649     650     655     656     657     662     663     664     669
           670     671     750     751     752     755     756     757

IEVAP                           Static offset=3392                CHARACTER(4), SAVE, Initialized
  Decl     149
  Set 
  Used

IFALB                           Static offset=3456                INTEGER, SAVE, Initialized
  Decl     180
  Set     1276
  Used

IFALB                                                             INTEGER, Implicit type
  Decl     621
  Set 
  Used

IFCO2                           Static offset=3520                INTEGER, SAVE, Initialized
  Decl     185
  Set 
  Used     828     829     832     833    1014    1016    1020    1025    1027    1029    1031    1479    1480    1481    1483
          1485    1487    1617

IFCO2                                                             INTEGER, Implicit type
  Decl     622
  Set 
  Used

IFDDP                           Static offset=3584                INTEGER, SAVE, Initialized
  Decl     201
  Set 
  Used

IFFT                            Static offset=3648                CHARACTER(4), SAVE, Initialized
  Decl     153
  Set 
  Used

IFILT                           Static offset=87168               INTEGER, SAVE
  Decl     554
  Set 
  Used

IFIN                            Static offset=3712                INTEGER, SAVE, Initialized
  Decl     173
  Set 
  Used

IFOZONE                         Static offset=3776                INTEGER, SAVE, Initialized
  Decl     187
  Set 
  Used     837     838    1038    1042    1044    1046    1048    1495    1496    1498    1500    1502    1624

IFOZONE                                                           INTEGER, Implicit type
  Decl     622
  Set 
  Used

IFSLM                           Static offset=3840                INTEGER, SAVE, Initialized
  Decl     182
  Set      731    1277
  Used

IFSLM                                                             INTEGER, Implicit type
  Decl     621
  Set 
  Used

IFSNW                           Static offset=3904                INTEGER, SAVE, Initialized
  Decl     183
  Set     1275
  Used

IFSNW                                                             INTEGER, Implicit type
  Decl     621
  Set 
  Used

IFSST                           Static offset=3968                INTEGER, SAVE, Initialized
  Decl     181
  Set     1360    1362
  Used

IFSST                                                             INTEGER, Implicit type
  Decl     620
  Set 
  Used

IGLSM_W                         Static offset=4032                INTEGER, SAVE, Initialized
  Decl     130
  Set 
  Used     731    1599

IGLSM_W                                                           INTEGER, Implicit type
  Decl     607     612
  Set 
  Used

IGWD                            Static offset=4096                CHARACTER(4), SAVE, Initialized
  Decl     154
  Set 
  Used

IGWD                                                              INTEGER, Implicit type
  Decl     611
  Set 
  Used

IHOUR                           Stack                             INTEGER
  Decl    1771
  Set     1806    1810    1822    1831    1832
  Used    1812    1832    1850    1863

ILCON                           Static offset=4160                CHARACTER(3), SAVE, Initialized
  Decl     144
  Set 
  Used

ILCON                                                             INTEGER, Implicit type
  Decl     610
  Set 
  Used

ILWRAD                          Static offset=4224                CHARACTER(3), SAVE, Initialized
  Decl     142
  Set 
  Used     815     822    1001    1003    1005    1007

ILWRAD                                                            INTEGER, Implicit type
  Decl     610
  Set 
  Used

IMONT                           Stack                             INTEGER
  Decl    1773
  Set     1824    1844    1847    1857    1860
  Used    1842    1846    1850    1855    1859    1863

IMONTH                                                            INTEGER, PARAMETER
  Decl    1776
  Set 
  Used    1777    1779

IMPDIF                          Static offset=4288                CHARACTER(4), SAVE, Initialized
  Decl     158
  Set 
  Used

INALB                           Static offset=4352                INTEGER, SAVE, Initialized
  Decl     229
  Set 
  Used

INALB                                                             INTEGER, Implicit type
  Decl     615
  Set 
  Used

INITLZ                          Static offset=4416                INTEGER, SAVE, Initialized
  Decl     166
  Set     1274
  Used

INITLZ                                                            INTEGER, Implicit type
  Decl     619
  Set 
  Used

INTCOSZ                         Static offset=4480                LOGICAL, SAVE, Initialized
  Decl     120
  Set 
  Used

INTCOSZ                                                           INTEGER, Implicit type
  Decl     605
  Set 
  Used

INTG                            Static offset=87232               INTEGER, SAVE
  Decl     567
  Set      744
  Used     745

INTSST                          Static offset=4544                INTEGER, SAVE, Initialized
  Decl     169
  Set 
  Used

INTSST                                                            INTEGER, Implicit type
  Decl     619
  Set 
  Used

IPBL                            Static offset=4608                CHARACTER(4), SAVE, Initialized
  Decl     148
  Set 
  Used

IQADJ                           Static offset=4672                CHARACTER(4), SAVE, Initialized
  Decl     147
  Set 
  Used

IQDIF                           Static offset=4736                CHARACTER(4), SAVE, Initialized
  Decl     152
  Set 
  Used

IQDIF                                                             INTEGER, Implicit type
  Decl     610
  Set 
  Used

IS                              Static offset=4800                INTEGER, SAVE, Initialized
  Decl     222
  Set 
  Used

IS                                                                INTEGER, Implicit type
  Decl     617
  Set 
  Used

ISCON                           Static offset=4864                CHARACTER(4), SAVE, Initialized
  Decl     145
  Set 
  Used     889    1075    1077    1079

ISCON                                                             INTEGER, Implicit type
  Decl     611
  Set 
  Used

ISENS                           Static offset=4928                CHARACTER(4), SAVE, Initialized
  Decl     150
  Set 
  Used

ISIMP                           Static offset=4992                CHARACTER(4), SAVE, Initialized
  Decl     155
  Set 
  Used    1553

ISIMP                                                             INTEGER, Implicit type
  Decl     611
  Set 
  Used

ISTRT                           Static offset=87296               INTEGER, SAVE
  Decl     563
  Set 
  Used

ISWRAD                          Static offset=5056                CHARACTER(3), SAVE, Initialized
  Decl     141
  Set 
  Used     780     787     806     982     984     986     994

ISWRAD                                                            INTEGER, Implicit type
  Decl     610
  Set 
  Used

IYEAR                           Stack                             INTEGER
  Decl    1774
  Set     1825    1848    1861
  Used    1840    1850    1863

JDT                             Static offset=5120                INTEGER, SAVE, Initialized
  Decl     139
  Set 
  Used

JDT                             Stack                             INTEGER
  Decl    1770
  Set     1807    1827
  Used    1813    1845    1850    1858    1863

JMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1368    1369
  Set 
  Used    1382

JMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1635    1637
  Set 
  Used    1643

JULL                                                              Subroutine, Module procedure, PRIVATE
  Decl    1230
  Set 
  Used       0    1139    1162

KI                              Static offset=5184                INTEGER, SAVE, Initialized
  Decl     223
  Set 
  Used

KI                                                                INTEGER, Implicit type
  Decl     617
  Set 
  Used

KT                              Static offset=5248                INTEGER, SAVE, Initialized
  Decl     136
  Set 
  Used

KTM                             Static offset=5312                INTEGER, SAVE, Initialized
  Decl     137
  Set 
  Used

KTP                             Static offset=5376                INTEGER, SAVE, Initialized
  Decl     138
  Set 
  Used

L                               Stack                             INTEGER
  Decl    1768
  Set     1787    1811
  Used    1788    1812

LABELC                          Stack                             CHARACTER(10)
  Decl    1371
  Set 
  Used    1378

LABELC                          Stack                             CHARACTER(10)
  Decl    1667
  Set     1680
  Used    1671    1673    1689    1690

LABELC                          Stack                             CHARACTER(10)
  Decl    1700
  Set 
  Used    1704    1707    1710    1713    1716    1719    1722    1725    1728

LABELCC                         Stack                             CHARACTER(10)
  Decl    1739
  Set 
  Used    1743    1745    1747    1752    1755    1756    1757

LABELF                          Stack                             CHARACTER(10)
  Decl    1372
  Set 
  Used    1379

LABELF                          Stack                             CHARACTER(10)
  Decl    1668
  Set 
  Used    1672    1673    1680

LABELF                          Stack                             CHARACTER(10)
  Decl    1701
  Set 
  Used    1705

LABELFF                         Stack                             CHARACTER(10)
  Decl    1740
  Set 
  Used    1744    1745    1749

LABELI                          Stack                             CHARACTER(10)
  Decl    1370
  Set 
  Used    1377    1399    1475    1482    1497

LABELI                          Stack                             CHARACTER(10)
  Decl    1666
  Set 
  Used    1670    1673    1681    1682    1689    1690

LABELI                          Stack                             CHARACTER(10)
  Decl    1699
  Set 
  Used    1703    1707    1710    1713    1716    1719    1722    1725    1728

LABELII                         Stack                             CHARACTER(10)
  Decl    1738
  Set 
  Used    1742    1745    1747    1749    1752    1755    1756    1757

LABELS                          Stack                             CHARACTER(8)
  Decl    1289
  Set 
  Used    1297    1308    1311    1319    1322    1324    1326    1329

LABELSI                         Static offset=87360               CHARACTER(10), SAVE
  Decl     571
  Set 
  Used    1298    1299    1300    1301

LABELSJ                         Static offset=87488               CHARACTER(10), SAVE
  Decl     572
  Set 
  Used    1302    1303    1304    1305

LCNVL                           Static offset=5440                INTEGER, SAVE, Initialized
  Decl     225
  Set 
  Used

LCNVL                                                             INTEGER, Implicit type
  Decl     614
  Set 
  Used

LEN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    1293

LEXIST                          Stack                             LOGICAL
  Decl    1290
  Set 
  Used    1310    1333

LEXIST                          Stack                             LOGICAL
  Decl    1373
  Set 
  Used    1386    1518    1522    1528    1533    1538    1543    1548    1555    1560    1565    1570    1575    1580    1585
          1590    1595    1601    1606    1611    1619    1626

LEXIST                          Stack                             LOGICAL
  Decl    1640
  Set 
  Used    1649    1658

LFSST                           Stack                             INTEGER
  Decl    1287
  Set     1340    1342    1346    1348
  Used    1352    1355    1360

LINE                            Stack                             CHARACTER(128)
  Decl     904
  Set      950     952     954     957     960     962     965     967
  Used

LINEARGRID                      Static offset=5504                LOGICAL, SAVE, Initialized
  Decl     115
  Set 
  Used     682     964

LINEARGRID                                                        INTEGER, Implicit type
  Decl     605
  Set 
  Used

LTHNCL                          Static offset=5568                INTEGER, SAVE, Initialized
  Decl     226
  Set 
  Used

LTHNCL                                                            INTEGER, Implicit type
  Decl     614
  Set 
  Used

LV                              Static offset=87616               CHARACTER(4), SAVE
  Decl      55
  Set      700
  Used     702     704     707    1482    1484    1486    1488    1497    1499    1501    1503    1656    1681    1682    1689
          1690

LWSST                           Stack                             INTEGER
  Decl    1288
  Set     1353    1355
  Used    1362

M                               Stack                             INTEGER
  Decl    1241
  Set     1250
  Used    1251

MASCON                          Static offset=5632                LOGICAL, SAVE, Initialized
  Decl     124
  Set 
  Used

MASCON                                                            INTEGER, Implicit type
  Decl     606
  Set 
  Used

MASCON_PS                       Static offset=5696                LOGICAL, SAVE, Initialized
  Decl     125
  Set 
  Used

MASCON_PS                                                         INTEGER, Implicit type
  Decl     606
  Set 
  Used

MAXTFM                          Static offset=87680               INTEGER, SAVE
  Decl      44
  Set     1209
  Used

MAXTFM2                         Stack                             INTEGER
  Decl    1769
  Set     1784    1795
  Used    1787    1791    1792    1793    1811

MAXTID                          Static offset=87744               INTEGER, SAVE
  Decl     553
  Set      736
  Used

MAXTIM                          Static offset=87808               INTEGER, SAVE
  Decl      41
  Set     1208
  Used     942    1784    1807    1827

MD                              Stack                             INTEGER, DIMENSION(12)
  Decl    1118
  Set     1149    1151
  Used    1154

MDXTFM                          Static offset=87872               INTEGER, SAVE
  Decl      47
  Set     1211
  Used

MEXTFM                          Static offset=87936               INTEGER, SAVE
  Decl      50
  Set     1213
  Used

MF                              Stack                             INTEGER
  Decl    1109
  Set     1134
  Used    1139    1199

MGIVEN                          Static offset=5760                LOGICAL, SAVE, Initialized
  Decl     112
  Set 
  Used    1646

MGIVEN                                                            INTEGER, Implicit type
  Decl     605
  Set 
  Used

MHDHN                           Stack                             INTEGER
  Decl    1121
  Set     1175    1177    1179
  Used    1211

MHEXT                           Stack                             INTEGER
  Decl    1122
  Set     1185    1187    1189
  Used    1213

MHF                             Stack                             REAL(KIND=8)
  Decl    1125
  Set     1196
  Used    1197    1205

MHFCT                           Stack                             INTEGER
  Decl    1120
  Set     1168    1170    1205
  Used    1209

MI                              Stack                             INTEGER
  Decl    1105
  Set     1130    1156    1158
  Used    1137    1154    1157    1162    1200

MI                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1230    1233
  Set 
  Used    1255    1257

MKUO                            Static offset=5824                INTEGER, SAVE, Initialized
  Decl     220
  Set 
  Used

MLRG                            Static offset=5888                INTEGER, SAVE, Initialized
  Decl     221
  Set 
  Used

MLRG                                                              INTEGER, Implicit type
  Decl     616
  Set 
  Used

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1147    1256    1258    1809    1830    1835    1840

MODEL1D                         Static offset=5952                LOGICAL, SAVE, Initialized
  Decl     121
  Set 
  Used

MODEL1D                                                           INTEGER, Implicit type
  Decl     605
  Set 
  Used

MODEL_IN                                                          Namelist group
  Decl     604
  Set 
  Used     648

MODEL_RES                                                         Namelist group
  Decl     600
  Set 
  Used     641

MONDAY                          Stack                             INTEGER, DIMENSION(12)
  Decl    1240
  Set     1249    1251
  Used    1255

MONL                            Static offset=6144                INTEGER, DIMENSION(12), SAVE, Initialized
  Decl     140
  Set 
  Used

MONL                            Stack                             INTEGER, DIMENSION(12)
  Decl    1239
  Set     1245
  Used    1251

MSGONE                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0     910     944
           973     978     985     989     993     996    1004    1008    1015    1021    1026    1028    1030    1032    1039
          1041    1043    1045    1047    1049    1056    1058    1060    1062    1065    1069    1076    1078    1080    1085
          1314    1315    1316    1317    1318    1659

MSGONE                          Use assoc                         Subroutine, From module PARALLELISM, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0     910     944
           973     978     985     989     993     996    1004    1008    1015    1021    1026    1028    1030    1032    1039
          1041    1043    1045    1047    1049    1056    1058    1060    1062    1065    1069    1076    1078    1080    1085
          1314    1315    1316    1317    1318    1659

MXITER                          Static offset=6528                INTEGER, SAVE, Initialized
  Decl     230
  Set 
  Used

MXITER                                                            INTEGER, Implicit type
  Decl     615
  Set 
  Used

MXRDCC                          Static offset=6592                LOGICAL, SAVE, Initialized
  Decl     224
  Set 
  Used

MXRDCC                                                            INTEGER, Implicit type
  Decl     614
  Set 
  Used

NDAY                            Stack                             INTEGER
  Decl    1116
  Set     1141    1143    1146
  Used    1166    1168

NDAY1                                                             INTEGER, PARAMETER, DIMENSION(12)
  Decl    1777
  Set 
  Used

NDAY2                                                             INTEGER, PARAMETER, DIMENSION(12)
  Decl    1779
  Set 
  Used

NDORD                           Static offset=6656                INTEGER, SAVE, Initialized
  Decl     171
  Set 
  Used

NDORD                                                             INTEGER, Implicit type
  Decl     619
  Set 
  Used

NEDRCT                          Static offset=6720                INTEGER, SAVE, Initialized
  Decl     532
  Set 
  Used

NEFCST                          Static offset=6784                INTEGER, SAVE, Initialized
  Decl     533
  Set 
  Used

NEPROG                          Static offset=6848                INTEGER, SAVE, Initialized
  Decl     531
  Set 
  Used

NF2D                            Static offset=6912                INTEGER, SAVE, Initialized
  Decl     505
  Set 
  Used

NFALB                           Static offset=6976                INTEGER, SAVE, Initialized
  Decl     519
  Set 
  Used

NFAUNTBL                        Static offset=7040                INTEGER, SAVE, Initialized
  Decl     508
  Set 
  Used

NFCLDR                          Static offset=7104                INTEGER, SAVE, Initialized
  Decl     528
  Set 
  Used

NFCNF2TB                        Static offset=7168                INTEGER, SAVE, Initialized
  Decl     510
  Set 
  Used

NFCNFTBL                        Static offset=7232                INTEGER, SAVE, Initialized
  Decl     509
  Set 
  Used

NFCNV0                          Static offset=7296                INTEGER, SAVE, Initialized
  Decl     491
  Set     1273
  Used

NFCNV1                          Static offset=7360                INTEGER, SAVE, Initialized
  Decl     506
  Set 
  Used

NFCO2                           Static offset=7424                INTEGER, SAVE, Initialized
  Decl     521
  Set 
  Used

NFCTRL                          Static offset=7680                INTEGER, DIMENSION(100), SAVE, Initialized
  Decl     543
  Set 
  Used

NFDESTBL                        Static offset=11392               INTEGER, SAVE, Initialized
  Decl     516
  Set 
  Used

NFDHN                           Static offset=11456               INTEGER, SAVE, Initialized
  Decl     538
  Set 
  Used

NFDIAG                          Static offset=11520               INTEGER, SAVE, Initialized
  Decl     503
  Set 
  Used

NFDRCT                          Static offset=11584               INTEGER, SAVE, Initialized
  Decl     502
  Set 
  Used

NFDYN                           Static offset=11648               INTEGER, SAVE, Initialized
  Decl     540
  Set 
  Used

NFERR                           Static offset=11712               INTEGER, SAVE, Initialized
  Decl     489
  Set 
  Used

NFFCST                          Static offset=11776               INTEGER, SAVE, Initialized
  Decl     504
  Set 
  Used

NFGAUSS                         Static offset=11840               INTEGER, SAVE, Initialized
  Decl     534
  Set 
  Used

NFGHDR                          Static offset=11904               INTEGER, SAVE, Initialized
  Decl     513
  Set 
  Used

NFGHDS                          Static offset=11968               INTEGER, SAVE, Initialized
  Decl     515
  Set 
  Used

NFGHLOC                         Static offset=12032               INTEGER, SAVE, Initialized
  Decl     512
  Set 
  Used

NFGHOU                          Static offset=12096               INTEGER, SAVE, Initialized
  Decl     537
  Set 
  Used

NFGHTOP                         Static offset=12160               INTEGER, SAVE, Initialized
  Decl     514
  Set 
  Used

NFILES                          Static offset=12224               INTEGER, SAVE, Initialized
  Decl     172
  Set 
  Used

NFIN0                           Static offset=12288               INTEGER, SAVE, Initialized
  Decl     495
  Set 
  Used

NFIN1                           Static offset=12352               INTEGER, SAVE, Initialized
  Decl     496
  Set     1272
  Used

NFLOOKTB                        Static offset=12416               INTEGER, SAVE, Initialized
  Decl     511
  Set 
  Used

NFNMI                           Static offset=12480               INTEGER, SAVE, Initialized
  Decl     530
  Set 
  Used

NFOUT0                          Static offset=12544               INTEGER, SAVE, Initialized
  Decl     497
  Set 
  Used

NFOUT1                          Static offset=12608               INTEGER, SAVE, Initialized
  Decl     498
  Set 
  Used

NFOZONE                         Static offset=12672               INTEGER, SAVE, Initialized
  Decl     523
  Set 
  Used

NFPRC                           Static offset=12736               INTEGER, SAVE, Initialized
  Decl     539
  Set 
  Used

NFPRT                           Static offset=12800               INTEGER, SAVE, Initialized
  Decl     492
  Set 
  Used    1199    1200    1201    1217

NFSIBD                          Static offset=12864               INTEGER, SAVE, Initialized
  Decl     536
  Set 
  Used

NFSIBI                          Static offset=12928               INTEGER, SAVE, Initialized
  Decl     529
  Set 
  Used

NFSIBO                          Static offset=12992               INTEGER, SAVE, Initialized
  Decl     527
  Set 
  Used

NFSIBT                          Static offset=13056               INTEGER, SAVE, Initialized
  Decl     542
  Set 
  Used

NFSLM                           Static offset=13120               INTEGER, SAVE, Initialized
  Decl     520
  Set 
  Used

NFSLMTP                         Static offset=13184               INTEGER, SAVE, Initialized
  Decl     501
  Set 
  Used

NFSNW                           Static offset=13248               INTEGER, SAVE, Initialized
  Decl     518
  Set 
  Used

NFSOILTP                        Static offset=13312               INTEGER, SAVE, Initialized
  Decl     499
  Set 
  Used

NFSPECLW                        Static offset=13376               INTEGER, SAVE, Initialized
  Decl     525
  Set 
  Used

NFSPECSW                        Static offset=13440               INTEGER, SAVE, Initialized
  Decl     524
  Set 
  Used

NFSST                           Static offset=13504               INTEGER, SAVE, Initialized
  Decl     517
  Set 
  Used

NFTGZ0                          Static offset=13568               INTEGER, SAVE, Initialized
  Decl     526
  Set 
  Used

NFVAR                           Static offset=13632               INTEGER, SAVE, Initialized
  Decl     507
  Set 
  Used

NFVEGTP                         Static offset=13696               INTEGER, SAVE, Initialized
  Decl     500
  Set 
  Used

NFWAVES                         Static offset=13760               INTEGER, SAVE, Initialized
  Decl     535
  Set 
  Used

NFZOL                           Static offset=13824               INTEGER, SAVE, Initialized
  Decl     522
  Set 
  Used

NHDHN                           Static offset=88000               INTEGER, SAVE
  Decl      28
  Set 
  Used     722     724

NHDHN                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

NHDHN                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    1095    1100
  Set     1180
  Used    1173    1177

NHEXT                           Static offset=88064               INTEGER, SAVE
  Decl      30
  Set 
  Used     722     724

NHEXT                                                             INTEGER, Implicit type
  Decl     601
  Set 
  Used

NHEXT                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl    1095    1102
  Set     1190
  Used    1182    1187

NINT                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used     726

NLNMINIT                        Static offset=13888               LOGICAL, SAVE, Initialized
  Decl     116
  Set     1267
  Used

NLNMINIT                                                          INTEGER, Implicit type
  Decl     604
  Set 
  Used

NMSST                           Static offset=88128               CHARACTER(6), SAVE
  Decl      24
  Set     1313    1328
  Used    1293    1307    1321    1322    1323    1324    1325    1326    1339    1345    1347

NMSST                                                             INTEGER, Implicit type
  Decl     600
  Set 
  Used

NNAMELIST                       Static offset=13952               INTEGER, PRIVATE, SAVE, Initialized
  Decl     494
  Set 
  Used     641     648     655     662     669    1791    1793

NPROC_VERT                      Static offset=14016               INTEGER, SAVE, Initialized
  Decl     127
  Set 
  Used

NPROC_VERT                                                        INTEGER, Implicit type
  Decl     608
  Set 
  Used

NSCALARS                        Static offset=14080               INTEGER, SAVE, Initialized
  Decl     128
  Set 
  Used

NSCALARS                                                          INTEGER, Implicit type
  Decl     606
  Set 
  Used

NSTEP                           Static offset=14144               INTEGER, SAVE, Initialized
  Decl     167
  Set 
  Used

NSTEP                                                             INTEGER, Implicit type
  Decl     619
  Set 
  Used

NTS                             Stack                             REAL(KIND=8)
  Decl    1124
  Set     1195
  Used    1204

NTSTEP                          Stack                             INTEGER
  Decl    1119
  Set     1166    1204
  Used    1208    1216    1217

NTSTEPMAX                       Stack                             INTEGER
  Decl    1112
  Set     1215
  Used    1216    1217

OPT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1695    1698
  Set 
  Used    1706

OPT                             Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1734    1737
  Set 
  Used    1741    1746    1747    1748    1749    1751    1752    1754    1755    1756    1757

OPTIONS                                                           Module
  Decl       6
  Set 
  Used

PARALLELISM                                                       Module
  Decl
  Set 
  Used      11

PATH_IN                         Static offset=88192               CHARACTER(199), SAVE
  Decl      37
  Set 
  Used     713

PATH_IN                                                           INTEGER, Implicit type
  Decl     602
  Set 
  Used

PATH_IN1                        Static offset=89792               CHARACTER(200), SAVE
  Decl      38
  Set      713
  Used    1308    1311    1319    1322    1324    1326    1329    1384    1390    1395    1399    1403    1407    1411    1415
          1419    1423    1427    1431    1435    1439    1443    1447    1452    1454    1456    1458    1463    1467    1471
          1475    1482    1484    1486    1488    1497    1499    1501    1503    1509    1510    1647    1653    1656    1681
          1682

PBASE                           Static offset=14208               REAL(KIND=8), SAVE, Initialized
  Decl     213
  Set 
  Used

PERCUT                          Static offset=14272               REAL(KIND=8), SAVE, Initialized
  Decl     177
  Set 
  Used

PERCUT                                                            INTEGER, Implicit type
  Decl     620
  Set 
  Used

PFACT                           Static offset=14336               REAL(KIND=8), SAVE, Initialized
  Decl     219
  Set 
  Used

PHYSCS                                                            Namelist group
  Decl     614
  Set 
  Used     662

PHYSPROC                                                          Namelist group
  Decl     610
  Set 
  Used     655

PRC                             Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1695    1697
  Set 
  Used    1708    1711    1714    1717    1720    1723    1726    1729

PRC                             Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl    1734    1736
  Set 
  Used    1741

PREFX                           Static offset=91392               CHARACTER(5), SAVE
  Decl      34
  Set 
  Used    1689    1690    1707    1710    1713    1716    1719    1722    1725    1728    1747    1749    1752    1755    1756
          1757

PREFX                                                             INTEGER, Implicit type
  Decl     602
  Set 
  Used

PREFY                           Static offset=91456               CHARACTER(5), SAVE
  Decl      35
  Set 
  Used    1497    1681    1682

PREFY                                                             INTEGER, Implicit type
  Decl     602
  Set 
  Used

PTIME                           Static offset=14400               LOGICAL, SAVE, Initialized
  Decl     190
  Set 
  Used

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used      19      42      43      45      46      48      49     133     134     135     159     160     161     164     165
           168     170     174     176     177     178     179     184     188     189     192     193     194     195     196
           197     198     199     200     205     206     207     208     209     210     211     212     213     214     215
           216     217     218     219     227     231     232     559     561     565     566    1113    1114    1115    1117
          1123    1124    1125    1126    1236    1237    1238    1242    1764    1767    1775    1840

RBASE                           Static offset=14464               REAL(KIND=8), SAVE, Initialized
  Decl     211
  Set 
  Used

RCCMBL                          Static offset=14528               REAL(KIND=8), SAVE, Initialized
  Decl     227
  Set 
  Used

RCCMBL                                                            INTEGER, Implicit type
  Decl     614
  Set 
  Used

READNAMELIST                                                      Subroutine, Module procedure
  Decl     577     595
  Set 
  Used

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used    1840

RECORD_TYPE                     Static offset=14592               CHARACTER(3), SAVE, Initialized
  Decl     129
  Set      730
  Used    1467    1471    1475

RECORD_TYPE                                                       INTEGER, Implicit type
  Decl     607
  Set 
  Used

REDUCEDGRID                     Static offset=14656               LOGICAL, SAVE, Initialized
  Decl     114
  Set 
  Used     959

REDUCEDGRID                                                       INTEGER, Implicit type
  Decl     605
  Set 
  Used

RESTSTEP                        Static offset=91520               INTEGER, SAVE
  Decl      65
  Set      726
  Used

RFACT                           Static offset=14720               REAL(KIND=8), SAVE, Initialized
  Decl     217
  Set 
  Used

RMRESTFILES                     Static offset=14784               LOGICAL, SAVE, Initialized
  Decl     123
  Set 
  Used

RMRESTFILES                                                       INTEGER, Implicit type
  Decl     606
  Set 
  Used

RSETTOV                         Static offset=14848               LOGICAL, SAVE, Initialized
  Decl     119
  Set     1270
  Used

RSETTOV                                                           INTEGER, Implicit type
  Decl     605
  Set 
  Used

RUNSFROM                        Stack                             CHARACTER(14)
  Decl     901
  Set      924
  Used     926     927     928     929     931     932     933     934

RUNSINITIAL                     Stack                             CHARACTER(14)
  Decl     901
  Set      914
  Used     915     916     917     918

RUNSTO                          Stack                             CHARACTER(14)
  Decl     901
  Set      919
  Used     920     921     922     923

SACUM                           Static offset=14912               REAL(KIND=8), SAVE, Initialized
  Decl     206
  Set 
  Used

SACUM                                                             INTEGER, Implicit type
  Decl     616
  Set 
  Used

SCHEMES                         Static offset=14976               INTEGER, SAVE, Initialized
  Decl     575
  Set 
  Used

SETFILENAMEGAUSSPOINTS                                            Subroutine, Module procedure
  Decl     581    1368
  Set 
  Used

SETFILENAMEWAVESPERLAT                                            Subroutine, Module procedure
  Decl     582    1635
  Set 
  Used

SETOUTPUT                                                         Subroutine, Module procedure
  Decl     579    1762
  Set 
  Used

SETSST                                                            Subroutine, Module procedure, PRIVATE
  Decl    1284
  Set 
  Used    1514

SETTIMEOUTPUT                                                     Subroutine, Module procedure
  Decl     578    1095
  Set 
  Used       0     724

SLAGR                           Static offset=15040               LOGICAL, SAVE, Initialized
  Decl     110
  Set 
  Used     949

SLAGR                                                             INTEGER, Implicit type
  Decl     604
  Set 
  Used

SLUPP                           Static offset=15104               REAL(KIND=8), SAVE, Initialized
  Decl     200
  Set 
  Used

SL_TWOTIME_SCHEME               Static offset=15168               LOGICAL, SAVE, Initialized
  Decl     111
  Set 
  Used     951

SL_TWOTIME_SCHEME                                                 INTEGER, Implicit type
  Decl     604
  Set 
  Used

SSTLAG                          Static offset=15232               REAL(KIND=8), SAVE, Initialized
  Decl     170
  Set 
  Used

START                           Static offset=91584               CHARACTER(200), SAVE
  Decl      20
  Set      717     719
  Used     721     925    1264    1266    1351    1359    1674    1683

STHICK                          Static offset=15296               REAL(KIND=8), SAVE, Initialized
  Decl     205
  Set 
  Used

STHICK                                                            INTEGER, Implicit type
  Decl     616
  Set 
  Used

SWINT                           Static offset=15360               REAL(KIND=8), SAVE, Initialized
  Decl     133
  Set 
  Used

SWINT                                                             INTEGER, Implicit type
  Decl     614
  Set 
  Used

TAB                                                               CHARACTER(4), PARAMETER
  Decl     905
  Set 
  Used     910     983     985     987     989     991     993     995     996    1002    1004    1006    1008    1009    1015
          1018    1021    1024    1026    1028    1030    1032    1039    1041    1043    1045    1047    1049    1056    1058
          1060    1062    1065    1069    1076    1078    1080    1085

TABLE                           Static offset=93184               CHARACTER(1), SAVE
  Decl      36
  Set 
  Used    1451    1453    1455

TABLE                                                             INTEGER, Implicit type
  Decl     602
  Set 
  Used

TAMBLOCK                        Static offset=15424               INTEGER, SAVE, Initialized
  Decl     131
  Set 
  Used

TAMBLOCK                                                          INTEGER, Implicit type
  Decl     607
  Set 
  Used

TAUCFL                          Static offset=15488               REAL(KIND=8), SAVE, Initialized
  Decl     189
  Set 
  Used

TBASE                           Static offset=15552               REAL(KIND=8), SAVE, Initialized
  Decl     208
  Set 
  Used

TBASE                                                             INTEGER, Implicit type
  Decl     616
  Set 
  Used

TCFLST                          Static offset=15616               REAL(KIND=8), SAVE, Initialized
  Decl     197
  Set 
  Used

TCFLUP                          Static offset=15680               REAL(KIND=8), SAVE, Initialized
  Decl     199
  Set 
  Used

TFACT                           Static offset=15744               REAL(KIND=8), SAVE, Initialized
  Decl     214
  Set 
  Used

TK                              Static offset=15808               REAL(KIND=8), SAVE, Initialized
  Decl     232
  Set 
  Used

TK                                                                INTEGER, Implicit type
  Decl     623
  Set 
  Used

TOD                             Stack                             REAL(KIND=8)
  Decl    1237
  Set     1243
  Used    1254

TOD                             Stack                             REAL(KIND=8)
  Decl    1767
  Set     1781    1808    1817    1828    1836
  Used    1809    1830    1835    1850    1863

TOD1                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1762    1764
  Set 
  Used    1781

TRC                             Static offset=93248               CHARACTER(6), SAVE
  Decl      53
  Set      681
  Used     685     688     693     696    1322    1324    1326

TRCG                            Static offset=93312               CHARACTER(6), SAVE
  Decl      54
  Set      680
  Used     684     687     692     695     707    1681    1682    1689    1690

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
             0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
             0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
             0       0       0       0       0       0       0       0       0       0       0       0       0       0     639
           646     653     660     667     674     713     753     777     779     781     791     804     812     814     816
           830     839     846     848     855     871     881     888     890     936     945     954     962     967     973
           982     986     991     994    1001    1005    1009    1055    1059    1065    1069    1075    1079    1266    1294
          1308    1311    1321    1323    1325    1329    1334    1345    1351    1384    1387    1395    1403    1407    1411
          1415    1419    1423    1427    1431    1435    1439    1443    1447    1451    1452    1453    1454    1455    1456
          1458    1463    1467    1471    1475    1482    1484    1486    1488    1497    1499    1501    1503    1509    1510
          1517    1519    1521    1523    1527    1529    1532    1534    1537    1539    1542    1544    1547    1549    1553
          1554    1556    1559    1561    1564    1566    1569    1571    1574    1576    1579    1581    1584    1586    1589
          1591    1594    1596    1600    1602    1605    1607    1610    1612    1618    1620    1625    1627    1647    1648
          1650    1653    1656    1657    1659    1674    1681    1682    1683    1689    1690    1707    1708    1710    1711
          1713    1714    1716    1717    1719    1720    1722    1723    1725    1726    1728    1729    1746    1747    1748
          1749    1750    1751    1752    1753    1754    1755    1756    1757

TRINT                           Static offset=15872               REAL(KIND=8), SAVE, Initialized
  Decl     134
  Set 
  Used

TRINT                                                             INTEGER, Implicit type
  Decl     615
  Set 
  Used

TRUNC                           Static offset=93376               INTEGER, SAVE
  Decl      17
  Set 
  Used     683     684     685     687     688     691     692     693     695     696

TRUNC                                                             INTEGER, Implicit type
  Decl     600
  Set 
  Used

TRUNC                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1635    1636
  Set 
  Used    1644

TRUNCLEV                        Static offset=93440               CHARACTER(10), SAVE
  Decl      56
  Set      707
  Used    1708    1711    1714    1717    1720    1723    1726    1729    1747    1750    1753    1755    1756    1757

UBASE                           Static offset=15936               REAL(KIND=8), SAVE, Initialized
  Decl     209
  Set 
  Used

UCRIT                           Static offset=16000               REAL(KIND=8), SAVE, Initialized
  Decl     188
  Set 
  Used

UCSTR                           Static offset=16064               REAL(KIND=8), SAVE, Initialized
  Decl     196
  Set 
  Used

UCUPP                           Static offset=16128               REAL(KIND=8), SAVE, Initialized
  Decl     198
  Set 
  Used

UFACT                           Static offset=16192               REAL(KIND=8), SAVE, Initialized
  Decl     215
  Set 
  Used

VARCUT                          Static offset=16256               REAL(KIND=8), SAVE, Initialized
  Decl     178
  Set 
  Used

VARCUT                                                            INTEGER, Implicit type
  Decl     620
  Set 
  Used

VBASE                           Static offset=16320               REAL(KIND=8), SAVE, Initialized
  Decl     210
  Set 
  Used

VCRIT                           Static offset=16384               REAL(KIND=8), SAVE, Initialized
  Decl     194
  Set 
  Used

VCRIT                                                             INTEGER, Implicit type
  Decl     623
  Set 
  Used

VERT                            Static offset=93568               INTEGER, SAVE
  Decl      18
  Set 
  Used     701     702     704

VERT                                                              INTEGER, Implicit type
  Decl     600
  Set 
  Used

VFACT                           Static offset=16448               REAL(KIND=8), SAVE, Initialized
  Decl     216
  Set 
  Used

VMAX_EST                        Static offset=16512               REAL(KIND=8), SAVE, Initialized
  Decl     179
  Set 
  Used

XDAY                            Stack                             REAL(KIND=8)
  Decl    1113
  Set 
  Used    1137    1138    1139    1140    1162    1163

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1230    1236
  Set     1253    1254    1255    1256    1257    1258
  Used

YBI                             Stack                             REAL(KIND=8)
  Decl    1117
  Set     1147
  Used    1148

YF                              Stack                             INTEGER
  Decl    1108
  Set     1135
  Used    1139    1140    1199

YI                              Stack                             INTEGER
  Decl    1104
  Set     1131    1159
  Used    1137    1138    1147    1162    1163    1200

YI                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1230    1232
  Set 
  Used    1256

YRL                             Static offset=16576               REAL(KIND=8), SAVE, Initialized
  Decl     135
  Set 
  Used

YRL                             Stack                             REAL(KIND=8)
  Decl    1238
  Set     1244
  Used    1258


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 1812, file Options.f90)

Name  Messages
----  --------
ADJUSTL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 638, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 639, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 645, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 646, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 652, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 653, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 659, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 660, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 666, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 667, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 673, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 674, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 753, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 758, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 791, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 799, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 804, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 830, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 834, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 839, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 864, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 871, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 876, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 881, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 944, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 945, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 989, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 991, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 993, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1019, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1065, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1066, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1069, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1070, file Options.f90)

Name  Messages
----  --------
ANY(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 716, file Options.f90)

Name  Messages
----  --------
CHECKOPTIONS in OPTIONS
      Defined as:  Subroutine (line 771, file Options.f90)

      Interface:   None

      Called By:   CHECKOPTIONS in OPTIONS (Line 728, file Options.f90)

      Calls:       CHECKOPTIONS in OPTIONS (Line 728, file Options.f90)

Name  Messages
----  --------
COLDWARM in OPTIONS
      Defined as:  Subroutine (line 1262, file Options.f90)

      Interface:   None

      Called By:   COLDWARM in OPTIONS (Line 733, file Options.f90)

      Calls:       COLDWARM in OPTIONS (Line 733, file Options.f90)

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     OPTIONS

Name  Messages
----  --------
DUMPOPTIONS in OPTIONS
      Defined as:  Subroutine (line 580, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FATALERROR in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   OPTIONS (Line 638, file Options.f90)
                   OPTIONS (Line 644, file Options.f90)
                   OPTIONS (Line 651, file Options.f90)
                   OPTIONS (Line 658, file Options.f90)
                   OPTIONS (Line 665, file Options.f90)
                   OPTIONS (Line 672, file Options.f90)
                   OPTIONS (Line 753, file Options.f90)
                   OPTIONS (Line 758, file Options.f90)
                   OPTIONS (Line 781, file Options.f90)
                   OPTIONS (Line 790, file Options.f90)
                   OPTIONS (Line 798, file Options.f90)
                   OPTIONS (Line 803, file Options.f90)
                   OPTIONS (Line 816, file Options.f90)
                   OPTIONS (Line 823, file Options.f90)
                   OPTIONS (Line 830, file Options.f90)
                   OPTIONS (Line 834, file Options.f90)
                   OPTIONS (Line 839, file Options.f90)
                   OPTIONS (Line 849, file Options.f90)
                   OPTIONS (Line 864, file Options.f90)
                   OPTIONS (Line 871, file Options.f90)
                   OPTIONS (Line 876, file Options.f90)
                   OPTIONS (Line 881, file Options.f90)
                   OPTIONS (Line 890, file Options.f90)
                   OPTIONS (Line 1294, file Options.f90)
                   OPTIONS (Line 1334, file Options.f90)
                   OPTIONS (Line 1387, file Options.f90)
                   OPTIONS (Line 1519, file Options.f90)
                   OPTIONS (Line 1523, file Options.f90)
                   OPTIONS (Line 1529, file Options.f90)
                   OPTIONS (Line 1534, file Options.f90)
                   OPTIONS (Line 1539, file Options.f90)
                   OPTIONS (Line 1544, file Options.f90)
                   OPTIONS (Line 1549, file Options.f90)
                   OPTIONS (Line 1556, file Options.f90)
                   OPTIONS (Line 1561, file Options.f90)
                   OPTIONS (Line 1566, file Options.f90)
                   OPTIONS (Line 1571, file Options.f90)
                   OPTIONS (Line 1576, file Options.f90)
                   OPTIONS (Line 1581, file Options.f90)
                   OPTIONS (Line 1586, file Options.f90)
                   OPTIONS (Line 1591, file Options.f90)
                   OPTIONS (Line 1596, file Options.f90)
                   OPTIONS (Line 1602, file Options.f90)
                   OPTIONS (Line 1607, file Options.f90)
                   OPTIONS (Line 1612, file Options.f90)
                   OPTIONS (Line 1620, file Options.f90)
                   OPTIONS (Line 1627, file Options.f90)
                   OPTIONS (Line 1650, file Options.f90)

Name  Messages
----  --------
FILENAMEANALIS in OPTIONS
      Defined as:  Subroutine (line 1664, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FILENAMEGERAL in OPTIONS
      Defined as:  Subroutine (line 1734, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FILENAMEREST in OPTIONS
      Defined as:  Subroutine (line 1695, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     OPTIONS

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
JULL in OPTIONS
      Defined as:  Subroutine (line 1230, file Options.f90)

      Interface:   None

      Called By:   JULL in OPTIONS (Line 1137, file Options.f90)
                   JULL in OPTIONS (Line 1139, file Options.f90)
                   JULL in OPTIONS (Line 1162, file Options.f90)

      Calls:       JULL in OPTIONS (Line 1137, file Options.f90)
                   JULL in OPTIONS (Line 1139, file Options.f90)
                   JULL in OPTIONS (Line 1162, file Options.f90)

Name  Messages
----  --------
LEN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 1293, file Options.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 1147, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1254, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1256, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1257, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1258, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1809, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1830, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1835, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1840, file Options.f90)

Name  Messages
----  --------
MSGONE in PARALLELISM
      Defined as:  No definitions.

      Interface:   None

      Called By:   OPTIONS (Line 794, file Options.f90)
                   OPTIONS (Line 910, file Options.f90)
                   OPTIONS (Line 936, file Options.f90)
                   OPTIONS (Line 944, file Options.f90)
                   OPTIONS (Line 969, file Options.f90)
                   OPTIONS (Line 973, file Options.f90)
                   OPTIONS (Line 974, file Options.f90)
                   OPTIONS (Line 978, file Options.f90)
                   OPTIONS (Line 983, file Options.f90)
                   OPTIONS (Line 985, file Options.f90)
                   OPTIONS (Line 987, file Options.f90)
                   OPTIONS (Line 989, file Options.f90)
                   OPTIONS (Line 991, file Options.f90)
                   OPTIONS (Line 993, file Options.f90)
                   OPTIONS (Line 995, file Options.f90)
                   OPTIONS (Line 996, file Options.f90)
                   OPTIONS (Line 1002, file Options.f90)
                   OPTIONS (Line 1004, file Options.f90)
                   OPTIONS (Line 1006, file Options.f90)
                   OPTIONS (Line 1008, file Options.f90)
                   OPTIONS (Line 1009, file Options.f90)
                   OPTIONS (Line 1015, file Options.f90)
                   OPTIONS (Line 1018, file Options.f90)
                   OPTIONS (Line 1021, file Options.f90)
                   OPTIONS (Line 1024, file Options.f90)
                   OPTIONS (Line 1026, file Options.f90)
                   OPTIONS (Line 1028, file Options.f90)
                   OPTIONS (Line 1030, file Options.f90)
                   OPTIONS (Line 1032, file Options.f90)
                   OPTIONS (Line 1039, file Options.f90)
                   OPTIONS (Line 1041, file Options.f90)
                   OPTIONS (Line 1043, file Options.f90)
                   OPTIONS (Line 1045, file Options.f90)
                   OPTIONS (Line 1047, file Options.f90)
                   OPTIONS (Line 1049, file Options.f90)
                   OPTIONS (Line 1056, file Options.f90)
                   OPTIONS (Line 1058, file Options.f90)
                   OPTIONS (Line 1060, file Options.f90)
                   OPTIONS (Line 1062, file Options.f90)
                   OPTIONS (Line 1065, file Options.f90)
                   OPTIONS (Line 1069, file Options.f90)
                   OPTIONS (Line 1076, file Options.f90)
                   OPTIONS (Line 1078, file Options.f90)
                   OPTIONS (Line 1080, file Options.f90)
                   OPTIONS (Line 1085, file Options.f90)
                   OPTIONS (Line 1314, file Options.f90)
                   OPTIONS (Line 1315, file Options.f90)
                   OPTIONS (Line 1316, file Options.f90)
                   OPTIONS (Line 1317, file Options.f90)
                   OPTIONS (Line 1318, file Options.f90)
                   OPTIONS (Line 1659, file Options.f90)

Name  Messages
----  --------
NINT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 726, file Options.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  Module (line 6, file Options.f90)

      Calls:       FATALERROR in PARALLELISM (Line 638, file Options.f90)
                   FATALERROR in PARALLELISM (Line 644, file Options.f90)
                   FATALERROR in PARALLELISM (Line 651, file Options.f90)
                   FATALERROR in PARALLELISM (Line 658, file Options.f90)
                   FATALERROR in PARALLELISM (Line 665, file Options.f90)
                   FATALERROR in PARALLELISM (Line 672, file Options.f90)
                   FATALERROR in PARALLELISM (Line 753, file Options.f90)
                   FATALERROR in PARALLELISM (Line 758, file Options.f90)
                   FATALERROR in PARALLELISM (Line 781, file Options.f90)
                   FATALERROR in PARALLELISM (Line 790, file Options.f90)
                   FATALERROR in PARALLELISM (Line 798, file Options.f90)
                   FATALERROR in PARALLELISM (Line 803, file Options.f90)
                   FATALERROR in PARALLELISM (Line 816, file Options.f90)
                   FATALERROR in PARALLELISM (Line 823, file Options.f90)
                   FATALERROR in PARALLELISM (Line 830, file Options.f90)
                   FATALERROR in PARALLELISM (Line 834, file Options.f90)
                   FATALERROR in PARALLELISM (Line 839, file Options.f90)
                   FATALERROR in PARALLELISM (Line 849, file Options.f90)
                   FATALERROR in PARALLELISM (Line 864, file Options.f90)
                   FATALERROR in PARALLELISM (Line 871, file Options.f90)
                   FATALERROR in PARALLELISM (Line 876, file Options.f90)
                   FATALERROR in PARALLELISM (Line 881, file Options.f90)
                   FATALERROR in PARALLELISM (Line 890, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1294, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1334, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1387, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1519, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1523, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1529, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1534, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1539, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1544, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1549, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1556, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1561, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1566, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1571, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1576, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1581, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1586, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1591, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1596, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1602, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1607, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1612, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1620, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1627, file Options.f90)
                   FATALERROR in PARALLELISM (Line 1650, file Options.f90)
                   MSGONE in PARALLELISM (Line 794, file Options.f90)
                   MSGONE in PARALLELISM (Line 910, file Options.f90)
                   MSGONE in PARALLELISM (Line 936, file Options.f90)
                   MSGONE in PARALLELISM (Line 944, file Options.f90)
                   MSGONE in PARALLELISM (Line 969, file Options.f90)
                   MSGONE in PARALLELISM (Line 973, file Options.f90)
                   MSGONE in PARALLELISM (Line 974, file Options.f90)
                   MSGONE in PARALLELISM (Line 978, file Options.f90)
                   MSGONE in PARALLELISM (Line 983, file Options.f90)
                   MSGONE in PARALLELISM (Line 985, file Options.f90)
                   MSGONE in PARALLELISM (Line 987, file Options.f90)
                   MSGONE in PARALLELISM (Line 989, file Options.f90)
                   MSGONE in PARALLELISM (Line 991, file Options.f90)
                   MSGONE in PARALLELISM (Line 993, file Options.f90)
                   MSGONE in PARALLELISM (Line 995, file Options.f90)
                   MSGONE in PARALLELISM (Line 996, file Options.f90)
                   MSGONE in PARALLELISM (Line 1002, file Options.f90)
                   MSGONE in PARALLELISM (Line 1004, file Options.f90)
                   MSGONE in PARALLELISM (Line 1006, file Options.f90)
                   MSGONE in PARALLELISM (Line 1008, file Options.f90)
                   MSGONE in PARALLELISM (Line 1009, file Options.f90)
                   MSGONE in PARALLELISM (Line 1015, file Options.f90)
                   MSGONE in PARALLELISM (Line 1018, file Options.f90)
                   MSGONE in PARALLELISM (Line 1021, file Options.f90)
                   MSGONE in PARALLELISM (Line 1024, file Options.f90)
                   MSGONE in PARALLELISM (Line 1026, file Options.f90)
                   MSGONE in PARALLELISM (Line 1028, file Options.f90)
                   MSGONE in PARALLELISM (Line 1030, file Options.f90)
                   MSGONE in PARALLELISM (Line 1032, file Options.f90)
                   MSGONE in PARALLELISM (Line 1039, file Options.f90)
                   MSGONE in PARALLELISM (Line 1041, file Options.f90)
                   MSGONE in PARALLELISM (Line 1043, file Options.f90)
                   MSGONE in PARALLELISM (Line 1045, file Options.f90)
                   MSGONE in PARALLELISM (Line 1047, file Options.f90)
                   MSGONE in PARALLELISM (Line 1049, file Options.f90)
                   MSGONE in PARALLELISM (Line 1056, file Options.f90)
                   MSGONE in PARALLELISM (Line 1058, file Options.f90)
                   MSGONE in PARALLELISM (Line 1060, file Options.f90)
                   MSGONE in PARALLELISM (Line 1062, file Options.f90)
                   MSGONE in PARALLELISM (Line 1065, file Options.f90)
                   MSGONE in PARALLELISM (Line 1069, file Options.f90)
                   MSGONE in PARALLELISM (Line 1076, file Options.f90)
                   MSGONE in PARALLELISM (Line 1078, file Options.f90)
                   MSGONE in PARALLELISM (Line 1080, file Options.f90)
                   MSGONE in PARALLELISM (Line 1085, file Options.f90)
                   MSGONE in PARALLELISM (Line 1314, file Options.f90)
                   MSGONE in PARALLELISM (Line 1315, file Options.f90)
                   MSGONE in PARALLELISM (Line 1316, file Options.f90)
                   MSGONE in PARALLELISM (Line 1317, file Options.f90)
                   MSGONE in PARALLELISM (Line 1318, file Options.f90)
                   MSGONE in PARALLELISM (Line 1659, file Options.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   CONSTANTS
                   PARALLELISM

Name  Messages
----  --------
PARALLELISM
      Defined as:  No definitions.

      Used By:     OPTIONS

Name  Messages
----  --------
READNAMELIST in OPTIONS
      Defined as:  Subroutine (line 577, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 1840, file Options.f90)

Name  Messages
----  --------
SETFILENAMEGAUSSPOINTS in OPTIONS
      Defined as:  Subroutine (line 581, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SETFILENAMEWAVESPERLAT in OPTIONS
      Defined as:  Subroutine (line 582, file Options.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SETOUTPUT in OPTIONS
      Defined as:  Subroutine (line 579, file Options.f90)

      Interface:   None

      Calls:       ADJUSTL(Intrinsic) (Line 638, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 639, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 645, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 646, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 652, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 653, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 659, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 660, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 666, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 667, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 673, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 674, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 753, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 758, file Options.f90)
                   TRIM(Intrinsic) (Line 638, file Options.f90)
                   TRIM(Intrinsic) (Line 639, file Options.f90)
                   TRIM(Intrinsic) (Line 645, file Options.f90)
                   TRIM(Intrinsic) (Line 646, file Options.f90)
                   TRIM(Intrinsic) (Line 652, file Options.f90)
                   TRIM(Intrinsic) (Line 653, file Options.f90)
                   TRIM(Intrinsic) (Line 659, file Options.f90)
                   TRIM(Intrinsic) (Line 660, file Options.f90)
                   TRIM(Intrinsic) (Line 666, file Options.f90)
                   TRIM(Intrinsic) (Line 667, file Options.f90)
                   TRIM(Intrinsic) (Line 673, file Options.f90)
                   TRIM(Intrinsic) (Line 674, file Options.f90)
                   TRIM(Intrinsic) (Line 707, file Options.f90)
                   TRIM(Intrinsic) (Line 707, file Options.f90)
                   TRIM(Intrinsic) (Line 713, file Options.f90)
                   TRIM(Intrinsic) (Line 721, file Options.f90)
                   TRIM(Intrinsic) (Line 753, file Options.f90)
                   TRIM(Intrinsic) (Line 758, file Options.f90)
                   ANY(Intrinsic) (Line 716, file Options.f90)
                   NINT(Intrinsic) (Line 726, file Options.f90)
                   TRIM(Intrinsic) (Line 777, file Options.f90)
                   TRIM(Intrinsic) (Line 778, file Options.f90)
                   TRIM(Intrinsic) (Line 779, file Options.f90)
                   TRIM(Intrinsic) (Line 780, file Options.f90)
                   TRIM(Intrinsic) (Line 781, file Options.f90)
                   TRIM(Intrinsic) (Line 787, file Options.f90)
                   TRIM(Intrinsic) (Line 791, file Options.f90)
                   TRIM(Intrinsic) (Line 799, file Options.f90)
                   TRIM(Intrinsic) (Line 804, file Options.f90)
                   TRIM(Intrinsic) (Line 806, file Options.f90)
                   TRIM(Intrinsic) (Line 812, file Options.f90)
                   TRIM(Intrinsic) (Line 813, file Options.f90)
                   TRIM(Intrinsic) (Line 814, file Options.f90)
                   TRIM(Intrinsic) (Line 815, file Options.f90)
                   TRIM(Intrinsic) (Line 816, file Options.f90)
                   TRIM(Intrinsic) (Line 822, file Options.f90)
                   TRIM(Intrinsic) (Line 830, file Options.f90)
                   TRIM(Intrinsic) (Line 834, file Options.f90)
                   TRIM(Intrinsic) (Line 839, file Options.f90)
                   TRIM(Intrinsic) (Line 845, file Options.f90)
                   TRIM(Intrinsic) (Line 846, file Options.f90)
                   TRIM(Intrinsic) (Line 847, file Options.f90)
                   TRIM(Intrinsic) (Line 848, file Options.f90)
                   TRIM(Intrinsic) (Line 849, file Options.f90)
                   TRIM(Intrinsic) (Line 855, file Options.f90)
                   TRIM(Intrinsic) (Line 864, file Options.f90)
                   TRIM(Intrinsic) (Line 871, file Options.f90)
                   TRIM(Intrinsic) (Line 876, file Options.f90)
                   TRIM(Intrinsic) (Line 881, file Options.f90)
                   TRIM(Intrinsic) (Line 887, file Options.f90)
                   TRIM(Intrinsic) (Line 888, file Options.f90)
                   TRIM(Intrinsic) (Line 889, file Options.f90)
                   TRIM(Intrinsic) (Line 890, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 791, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 799, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 804, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 830, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 834, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 839, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 864, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 871, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 876, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 881, file Options.f90)
                   TRIM(Intrinsic) (Line 925, file Options.f90)
                   TRIM(Intrinsic) (Line 936, file Options.f90)
                   TRIM(Intrinsic) (Line 944, file Options.f90)
                   TRIM(Intrinsic) (Line 945, file Options.f90)
                   TRIM(Intrinsic) (Line 952, file Options.f90)
                   TRIM(Intrinsic) (Line 954, file Options.f90)
                   TRIM(Intrinsic) (Line 960, file Options.f90)
                   TRIM(Intrinsic) (Line 962, file Options.f90)
                   TRIM(Intrinsic) (Line 965, file Options.f90)
                   TRIM(Intrinsic) (Line 967, file Options.f90)
                   TRIM(Intrinsic) (Line 969, file Options.f90)
                   TRIM(Intrinsic) (Line 973, file Options.f90)
                   TRIM(Intrinsic) (Line 974, file Options.f90)
                   TRIM(Intrinsic) (Line 982, file Options.f90)
                   TRIM(Intrinsic) (Line 984, file Options.f90)
                   TRIM(Intrinsic) (Line 986, file Options.f90)
                   TRIM(Intrinsic) (Line 989, file Options.f90)
                   TRIM(Intrinsic) (Line 991, file Options.f90)
                   TRIM(Intrinsic) (Line 993, file Options.f90)
                   TRIM(Intrinsic) (Line 994, file Options.f90)
                   TRIM(Intrinsic) (Line 996, file Options.f90)
                   TRIM(Intrinsic) (Line 1001, file Options.f90)
                   TRIM(Intrinsic) (Line 1003, file Options.f90)
                   TRIM(Intrinsic) (Line 1005, file Options.f90)
                   TRIM(Intrinsic) (Line 1007, file Options.f90)
                   TRIM(Intrinsic) (Line 1009, file Options.f90)
                   TRIM(Intrinsic) (Line 1019, file Options.f90)
                   TRIM(Intrinsic) (Line 1055, file Options.f90)
                   TRIM(Intrinsic) (Line 1057, file Options.f90)
                   TRIM(Intrinsic) (Line 1059, file Options.f90)
                   TRIM(Intrinsic) (Line 1061, file Options.f90)
                   TRIM(Intrinsic) (Line 1065, file Options.f90)
                   TRIM(Intrinsic) (Line 1066, file Options.f90)
                   TRIM(Intrinsic) (Line 1069, file Options.f90)
                   TRIM(Intrinsic) (Line 1070, file Options.f90)
                   TRIM(Intrinsic) (Line 1075, file Options.f90)
                   TRIM(Intrinsic) (Line 1077, file Options.f90)
                   TRIM(Intrinsic) (Line 1079, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 944, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 945, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 989, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 991, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 993, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 1019, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 1065, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 1066, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 1069, file Options.f90)
                   ADJUSTL(Intrinsic) (Line 1070, file Options.f90)
                   MOD(Intrinsic) (Line 1147, file Options.f90)
                   MOD(Intrinsic) (Line 1254, file Options.f90)
                   MOD(Intrinsic) (Line 1256, file Options.f90)
                   MOD(Intrinsic) (Line 1257, file Options.f90)
                   MOD(Intrinsic) (Line 1258, file Options.f90)
                   TRIM(Intrinsic) (Line 1264, file Options.f90)
                   TRIM(Intrinsic) (Line 1266, file Options.f90)
                   TRIM(Intrinsic) (Line 1293, file Options.f90)
                   TRIM(Intrinsic) (Line 1294, file Options.f90)
                   TRIM(Intrinsic) (Line 1307, file Options.f90)
                   TRIM(Intrinsic) (Line 1308, file Options.f90)
                   TRIM(Intrinsic) (Line 1308, file Options.f90)
                   TRIM(Intrinsic) (Line 1309, file Options.f90)
                   TRIM(Intrinsic) (Line 1311, file Options.f90)
                   TRIM(Intrinsic) (Line 1311, file Options.f90)
                   TRIM(Intrinsic) (Line 1319, file Options.f90)
                   TRIM(Intrinsic) (Line 1319, file Options.f90)
                   TRIM(Intrinsic) (Line 1321, file Options.f90)
                   TRIM(Intrinsic) (Line 1322, file Options.f90)
                   TRIM(Intrinsic) (Line 1322, file Options.f90)
                   TRIM(Intrinsic) (Line 1322, file Options.f90)
                   TRIM(Intrinsic) (Line 1323, file Options.f90)
                   TRIM(Intrinsic) (Line 1324, file Options.f90)
                   TRIM(Intrinsic) (Line 1324, file Options.f90)
                   TRIM(Intrinsic) (Line 1324, file Options.f90)
                   TRIM(Intrinsic) (Line 1325, file Options.f90)
                   TRIM(Intrinsic) (Line 1326, file Options.f90)
                   TRIM(Intrinsic) (Line 1326, file Options.f90)
                   TRIM(Intrinsic) (Line 1326, file Options.f90)
                   TRIM(Intrinsic) (Line 1329, file Options.f90)
                   TRIM(Intrinsic) (Line 1329, file Options.f90)
                   TRIM(Intrinsic) (Line 1332, file Options.f90)
                   TRIM(Intrinsic) (Line 1334, file Options.f90)
                   TRIM(Intrinsic) (Line 1339, file Options.f90)
                   TRIM(Intrinsic) (Line 1345, file Options.f90)
                   TRIM(Intrinsic) (Line 1347, file Options.f90)
                   TRIM(Intrinsic) (Line 1351, file Options.f90)
                   TRIM(Intrinsic) (Line 1359, file Options.f90)
                   LEN(Intrinsic) (Line 1293, file Options.f90)
                   TRIM(Intrinsic) (Line 1384, file Options.f90)
                   TRIM(Intrinsic) (Line 1385, file Options.f90)
                   TRIM(Intrinsic) (Line 1387, file Options.f90)
                   TRIM(Intrinsic) (Line 1390, file Options.f90)
                   TRIM(Intrinsic) (Line 1395, file Options.f90)
                   TRIM(Intrinsic) (Line 1399, file Options.f90)
                   TRIM(Intrinsic) (Line 1403, file Options.f90)
                   TRIM(Intrinsic) (Line 1407, file Options.f90)
                   TRIM(Intrinsic) (Line 1411, file Options.f90)
                   TRIM(Intrinsic) (Line 1415, file Options.f90)
                   TRIM(Intrinsic) (Line 1419, file Options.f90)
                   TRIM(Intrinsic) (Line 1423, file Options.f90)
                   TRIM(Intrinsic) (Line 1427, file Options.f90)
                   TRIM(Intrinsic) (Line 1431, file Options.f90)
                   TRIM(Intrinsic) (Line 1435, file Options.f90)
                   TRIM(Intrinsic) (Line 1439, file Options.f90)
                   TRIM(Intrinsic) (Line 1443, file Options.f90)
                   TRIM(Intrinsic) (Line 1447, file Options.f90)
                   TRIM(Intrinsic) (Line 1451, file Options.f90)
                   TRIM(Intrinsic) (Line 1452, file Options.f90)
                   TRIM(Intrinsic) (Line 1453, file Options.f90)
                   TRIM(Intrinsic) (Line 1454, file Options.f90)
                   TRIM(Intrinsic) (Line 1455, file Options.f90)
                   TRIM(Intrinsic) (Line 1456, file Options.f90)
                   TRIM(Intrinsic) (Line 1458, file Options.f90)
                   TRIM(Intrinsic) (Line 1463, file Options.f90)
                   TRIM(Intrinsic) (Line 1463, file Options.f90)
                   TRIM(Intrinsic) (Line 1467, file Options.f90)
                   TRIM(Intrinsic) (Line 1467, file Options.f90)
                   TRIM(Intrinsic) (Line 1467, file Options.f90)
                   TRIM(Intrinsic) (Line 1471, file Options.f90)
                   TRIM(Intrinsic) (Line 1471, file Options.f90)
                   TRIM(Intrinsic) (Line 1471, file Options.f90)
                   TRIM(Intrinsic) (Line 1475, file Options.f90)
                   TRIM(Intrinsic) (Line 1475, file Options.f90)
                   TRIM(Intrinsic) (Line 1475, file Options.f90)
                   TRIM(Intrinsic) (Line 1475, file Options.f90)
                   TRIM(Intrinsic) (Line 1482, file Options.f90)
                   TRIM(Intrinsic) (Line 1482, file Options.f90)
                   TRIM(Intrinsic) (Line 1482, file Options.f90)
                   TRIM(Intrinsic) (Line 1484, file Options.f90)
                   TRIM(Intrinsic) (Line 1484, file Options.f90)
                   TRIM(Intrinsic) (Line 1484, file Options.f90)
                   TRIM(Intrinsic) (Line 1486, file Options.f90)
                   TRIM(Intrinsic) (Line 1486, file Options.f90)
                   TRIM(Intrinsic) (Line 1486, file Options.f90)
                   TRIM(Intrinsic) (Line 1488, file Options.f90)
                   TRIM(Intrinsic) (Line 1488, file Options.f90)
                   TRIM(Intrinsic) (Line 1488, file Options.f90)
                   TRIM(Intrinsic) (Line 1497, file Options.f90)
                   TRIM(Intrinsic) (Line 1497, file Options.f90)
                   TRIM(Intrinsic) (Line 1497, file Options.f90)
                   TRIM(Intrinsic) (Line 1497, file Options.f90)
                   TRIM(Intrinsic) (Line 1499, file Options.f90)
                   TRIM(Intrinsic) (Line 1499, file Options.f90)
                   TRIM(Intrinsic) (Line 1499, file Options.f90)
                   TRIM(Intrinsic) (Line 1501, file Options.f90)
                   TRIM(Intrinsic) (Line 1501, file Options.f90)
                   TRIM(Intrinsic) (Line 1501, file Options.f90)
                   TRIM(Intrinsic) (Line 1503, file Options.f90)
                   TRIM(Intrinsic) (Line 1503, file Options.f90)
                   TRIM(Intrinsic) (Line 1503, file Options.f90)
                   TRIM(Intrinsic) (Line 1509, file Options.f90)
                   TRIM(Intrinsic) (Line 1510, file Options.f90)
                   TRIM(Intrinsic) (Line 1517, file Options.f90)
                   TRIM(Intrinsic) (Line 1519, file Options.f90)
                   TRIM(Intrinsic) (Line 1521, file Options.f90)
                   TRIM(Intrinsic) (Line 1523, file Options.f90)
                   TRIM(Intrinsic) (Line 1527, file Options.f90)
                   TRIM(Intrinsic) (Line 1529, file Options.f90)
                   TRIM(Intrinsic) (Line 1532, file Options.f90)
                   TRIM(Intrinsic) (Line 1534, file Options.f90)
                   TRIM(Intrinsic) (Line 1537, file Options.f90)
                   TRIM(Intrinsic) (Line 1539, file Options.f90)
                   TRIM(Intrinsic) (Line 1542, file Options.f90)
                   TRIM(Intrinsic) (Line 1544, file Options.f90)
                   TRIM(Intrinsic) (Line 1547, file Options.f90)
                   TRIM(Intrinsic) (Line 1549, file Options.f90)
                   TRIM(Intrinsic) (Line 1553, file Options.f90)
                   TRIM(Intrinsic) (Line 1554, file Options.f90)
                   TRIM(Intrinsic) (Line 1556, file Options.f90)
                   TRIM(Intrinsic) (Line 1559, file Options.f90)
                   TRIM(Intrinsic) (Line 1561, file Options.f90)
                   TRIM(Intrinsic) (Line 1564, file Options.f90)
                   TRIM(Intrinsic) (Line 1566, file Options.f90)
                   TRIM(Intrinsic) (Line 1569, file Options.f90)
                   TRIM(Intrinsic) (Line 1571, file Options.f90)
                   TRIM(Intrinsic) (Line 1574, file Options.f90)
                   TRIM(Intrinsic) (Line 1576, file Options.f90)
                   TRIM(Intrinsic) (Line 1579, file Options.f90)
                   TRIM(Intrinsic) (Line 1581, file Options.f90)
                   TRIM(Intrinsic) (Line 1584, file Options.f90)
                   TRIM(Intrinsic) (Line 1586, file Options.f90)
                   TRIM(Intrinsic) (Line 1589, file Options.f90)
                   TRIM(Intrinsic) (Line 1591, file Options.f90)
                   TRIM(Intrinsic) (Line 1594, file Options.f90)
                   TRIM(Intrinsic) (Line 1596, file Options.f90)
                   TRIM(Intrinsic) (Line 1600, file Options.f90)
                   TRIM(Intrinsic) (Line 1602, file Options.f90)
                   TRIM(Intrinsic) (Line 1605, file Options.f90)
                   TRIM(Intrinsic) (Line 1607, file Options.f90)
                   TRIM(Intrinsic) (Line 1610, file Options.f90)
                   TRIM(Intrinsic) (Line 1612, file Options.f90)
                   TRIM(Intrinsic) (Line 1618, file Options.f90)
                   TRIM(Intrinsic) (Line 1620, file Options.f90)
                   TRIM(Intrinsic) (Line 1625, file Options.f90)
                   TRIM(Intrinsic) (Line 1627, file Options.f90)
                   TRIM(Intrinsic) (Line 1647, file Options.f90)
                   TRIM(Intrinsic) (Line 1648, file Options.f90)
                   TRIM(Intrinsic) (Line 1650, file Options.f90)
                   TRIM(Intrinsic) (Line 1653, file Options.f90)
                   TRIM(Intrinsic) (Line 1656, file Options.f90)
                   TRIM(Intrinsic) (Line 1656, file Options.f90)
                   TRIM(Intrinsic) (Line 1656, file Options.f90)
                   TRIM(Intrinsic) (Line 1657, file Options.f90)
                   TRIM(Intrinsic) (Line 1659, file Options.f90)
                   TRIM(Intrinsic) (Line 1674, file Options.f90)
                   TRIM(Intrinsic) (Line 1681, file Options.f90)
                   TRIM(Intrinsic) (Line 1681, file Options.f90)
                   TRIM(Intrinsic) (Line 1681, file Options.f90)
                   TRIM(Intrinsic) (Line 1681, file Options.f90)
                   TRIM(Intrinsic) (Line 1682, file Options.f90)
                   TRIM(Intrinsic) (Line 1682, file Options.f90)
                   TRIM(Intrinsic) (Line 1682, file Options.f90)
                   TRIM(Intrinsic) (Line 1682, file Options.f90)
                   TRIM(Intrinsic) (Line 1683, file Options.f90)
                   TRIM(Intrinsic) (Line 1689, file Options.f90)
                   TRIM(Intrinsic) (Line 1689, file Options.f90)
                   TRIM(Intrinsic) (Line 1689, file Options.f90)
                   TRIM(Intrinsic) (Line 1689, file Options.f90)
                   TRIM(Intrinsic) (Line 1690, file Options.f90)
                   TRIM(Intrinsic) (Line 1690, file Options.f90)
                   TRIM(Intrinsic) (Line 1690, file Options.f90)
                   TRIM(Intrinsic) (Line 1690, file Options.f90)
                   TRIM(Intrinsic) (Line 1707, file Options.f90)
                   TRIM(Intrinsic) (Line 1707, file Options.f90)
                   TRIM(Intrinsic) (Line 1708, file Options.f90)
                   TRIM(Intrinsic) (Line 1708, file Options.f90)
                   TRIM(Intrinsic) (Line 1710, file Options.f90)
                   TRIM(Intrinsic) (Line 1710, file Options.f90)
                   TRIM(Intrinsic) (Line 1711, file Options.f90)
                   TRIM(Intrinsic) (Line 1711, file Options.f90)
                   TRIM(Intrinsic) (Line 1713, file Options.f90)
                   TRIM(Intrinsic) (Line 1713, file Options.f90)
                   TRIM(Intrinsic) (Line 1714, file Options.f90)
                   TRIM(Intrinsic) (Line 1714, file Options.f90)
                   TRIM(Intrinsic) (Line 1716, file Options.f90)
                   TRIM(Intrinsic) (Line 1716, file Options.f90)
                   TRIM(Intrinsic) (Line 1717, file Options.f90)
                   TRIM(Intrinsic) (Line 1717, file Options.f90)
                   TRIM(Intrinsic) (Line 1719, file Options.f90)
                   TRIM(Intrinsic) (Line 1719, file Options.f90)
                   TRIM(Intrinsic) (Line 1720, file Options.f90)
                   TRIM(Intrinsic) (Line 1720, file Options.f90)
                   TRIM(Intrinsic) (Line 1722, file Options.f90)
                   TRIM(Intrinsic) (Line 1722, file Options.f90)
                   TRIM(Intrinsic) (Line 1723, file Options.f90)
                   TRIM(Intrinsic) (Line 1723, file Options.f90)
                   TRIM(Intrinsic) (Line 1725, file Options.f90)
                   TRIM(Intrinsic) (Line 1725, file Options.f90)
                   TRIM(Intrinsic) (Line 1726, file Options.f90)
                   TRIM(Intrinsic) (Line 1726, file Options.f90)
                   TRIM(Intrinsic) (Line 1728, file Options.f90)
                   TRIM(Intrinsic) (Line 1728, file Options.f90)
                   TRIM(Intrinsic) (Line 1729, file Options.f90)
                   TRIM(Intrinsic) (Line 1729, file Options.f90)
                   TRIM(Intrinsic) (Line 1746, file Options.f90)
                   TRIM(Intrinsic) (Line 1747, file Options.f90)
                   TRIM(Intrinsic) (Line 1747, file Options.f90)
                   TRIM(Intrinsic) (Line 1747, file Options.f90)
                   TRIM(Intrinsic) (Line 1747, file Options.f90)
                   TRIM(Intrinsic) (Line 1748, file Options.f90)
                   TRIM(Intrinsic) (Line 1749, file Options.f90)
                   TRIM(Intrinsic) (Line 1749, file Options.f90)
                   TRIM(Intrinsic) (Line 1749, file Options.f90)
                   TRIM(Intrinsic) (Line 1750, file Options.f90)
                   TRIM(Intrinsic) (Line 1751, file Options.f90)
                   TRIM(Intrinsic) (Line 1752, file Options.f90)
                   TRIM(Intrinsic) (Line 1752, file Options.f90)
                   TRIM(Intrinsic) (Line 1752, file Options.f90)
                   TRIM(Intrinsic) (Line 1753, file Options.f90)
                   TRIM(Intrinsic) (Line 1754, file Options.f90)
                   TRIM(Intrinsic) (Line 1755, file Options.f90)
                   TRIM(Intrinsic) (Line 1755, file Options.f90)
                   TRIM(Intrinsic) (Line 1755, file Options.f90)
                   TRIM(Intrinsic) (Line 1755, file Options.f90)
                   TRIM(Intrinsic) (Line 1756, file Options.f90)
                   TRIM(Intrinsic) (Line 1756, file Options.f90)
                   TRIM(Intrinsic) (Line 1756, file Options.f90)
                   TRIM(Intrinsic) (Line 1756, file Options.f90)
                   TRIM(Intrinsic) (Line 1757, file Options.f90)
                   TRIM(Intrinsic) (Line 1757, file Options.f90)
                   TRIM(Intrinsic) (Line 1757, file Options.f90)
                   TRIM(Intrinsic) (Line 1757, file Options.f90)
                   MOD(Intrinsic) (Line 1809, file Options.f90)
                   MOD(Intrinsic) (Line 1830, file Options.f90)
                   MOD(Intrinsic) (Line 1835, file Options.f90)
                   MOD(Intrinsic) (Line 1840, file Options.f90)
                   ABS(Intrinsic) (Line 1812, file Options.f90)
                   REAL(Intrinsic) (Line 1840, file Options.f90)

Name  Messages
----  --------
SETSST in OPTIONS
      Defined as:  Subroutine (line 1284, file Options.f90)

      Interface:   None

      Called By:   SETSST in OPTIONS (Line 1514, file Options.f90)

      Calls:       SETSST in OPTIONS (Line 1514, file Options.f90)

Name  Messages
----  --------
SETTIMEOUTPUT in OPTIONS
      Defined as:  Subroutine (line 578, file Options.f90)

      Interface:   None

      Called By:   SETTIMEOUTPUT in OPTIONS (Line 722, file Options.f90)
                   SETTIMEOUTPUT in OPTIONS (Line 724, file Options.f90)

      Calls:       SETTIMEOUTPUT in OPTIONS (Line 722, file Options.f90)
                   SETTIMEOUTPUT in OPTIONS (Line 724, file Options.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   SETOUTPUT in OPTIONS (Line 638, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 639, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 645, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 646, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 652, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 653, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 659, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 660, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 666, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 667, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 673, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 674, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 707, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 707, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 713, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 721, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 753, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 758, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 777, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 778, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 779, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 780, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 781, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 787, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 791, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 799, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 804, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 806, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 812, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 813, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 814, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 815, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 816, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 822, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 830, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 834, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 839, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 845, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 846, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 847, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 848, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 849, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 855, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 864, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 871, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 876, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 881, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 887, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 888, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 889, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 890, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 925, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 936, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 944, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 945, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 952, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 954, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 960, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 962, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 965, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 967, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 969, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 973, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 974, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 982, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 984, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 986, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 989, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 991, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 993, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 994, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 996, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1001, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1003, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1005, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1007, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1009, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1019, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1055, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1057, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1059, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1061, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1065, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1066, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1069, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1070, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1075, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1077, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1079, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1264, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1266, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1293, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1294, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1307, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1308, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1308, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1309, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1311, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1311, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1319, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1319, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1321, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1322, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1322, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1322, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1323, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1324, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1324, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1324, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1325, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1326, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1326, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1326, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1329, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1329, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1332, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1334, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1339, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1345, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1347, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1351, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1359, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1384, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1385, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1387, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1390, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1395, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1399, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1403, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1407, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1411, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1415, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1419, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1423, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1427, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1431, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1435, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1439, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1443, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1447, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1451, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1452, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1453, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1454, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1455, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1456, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1458, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1463, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1463, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1467, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1467, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1467, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1471, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1471, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1471, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1475, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1475, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1475, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1475, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1482, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1482, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1482, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1484, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1484, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1484, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1486, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1486, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1486, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1488, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1488, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1488, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1497, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1497, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1497, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1497, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1499, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1499, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1499, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1501, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1501, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1501, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1503, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1503, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1503, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1509, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1510, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1517, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1519, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1521, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1523, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1527, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1529, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1532, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1534, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1537, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1539, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1542, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1544, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1547, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1549, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1553, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1554, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1556, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1559, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1561, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1564, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1566, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1569, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1571, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1574, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1576, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1579, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1581, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1584, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1586, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1589, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1591, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1594, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1596, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1600, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1602, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1605, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1607, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1610, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1612, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1618, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1620, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1625, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1627, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1647, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1648, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1650, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1653, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1656, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1656, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1656, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1657, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1659, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1674, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1681, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1681, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1681, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1681, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1682, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1682, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1682, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1682, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1683, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1689, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1689, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1689, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1689, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1690, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1690, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1690, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1690, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1707, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1707, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1708, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1708, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1710, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1710, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1711, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1711, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1713, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1713, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1714, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1714, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1716, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1716, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1717, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1717, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1719, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1719, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1720, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1720, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1722, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1722, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1723, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1723, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1725, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1725, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1726, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1726, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1728, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1728, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1729, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1729, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1746, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1747, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1747, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1747, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1747, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1748, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1749, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1749, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1749, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1750, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1751, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1752, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1752, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1752, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1753, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1754, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1755, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1755, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1755, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1755, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1756, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1756, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1756, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1756, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1757, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1757, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1757, file Options.f90)
                   SETOUTPUT in OPTIONS (Line 1757, file Options.f90)

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
