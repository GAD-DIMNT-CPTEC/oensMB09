unsigned[2] octetAtWichPackedDataBegins;
flags[1] extendedFlag "grib1/11-2.table";

flagbit matrixOfValues(extendedFlag,3);
flagbit secondaryBitmapPresent(extendedFlag,2);
flagbit secondOrderOfDifferentWidth(extendedFlag,1);

alias secondOrderOFDifferentWidth = secondOrderOfDifferentWidth;
alias secondOrderValuesDifferentWidths = secondOrderOfDifferentWidth;
alias secondaryBitMap=secondaryBitmapPresent;

unsigned[2] NR;
alias firstDimension = NR;

unsigned[2] NC;
alias secondDimension = NC;

flags[1] coordinateFlag1 "grib1/12.table";
alias firstDimensionCoordinateValueDefinition = coordinateFlag1;

unsigned[1] NC1;
alias numberOfCoefficientsOrValuesUsedToSpecifyFirstDimensionCoordinateFunction = NC1;


flags[1] coordinateFlag2 "grib1/12.table";
alias secondDimensionCoordinateValueDefinition = coordinateFlag2;

unsigned[1] NC2;
alias numberOfCoefficientsOrValuesUsedToSpecifySecondDimensionCoordinateFunction = NC2;

flags[1] physicalFlag1    "grib1/13.table";
alias firstDimensionPhysicalSignificance = physicalFlag1; # TODO: Check if grib1 and 2 table are the same


flags[1] physicalFlag2    "grib1/13.table";
alias secondDimensionPhysicalSignificance = physicalFlag2; # TODO: Check if grib1 and 2 table are the same

ibmfloat coefsFirst[NC1];
ibmfloat coefsSecond[NC2];

flagbit matrixOfValues(extendedFlag,6);
flagbit secondaryBitmap(extendedFlag,5);

#position offsetBeforeData;

if(matrixOfValues == 0)
{
constant dataRepresentationTemplateNumber             = 1;
constant noMatrixBitMapsPresent1MatrixBitMapsPresent  = 0;


position offsetBeforeData;

if(bitmapPresent)
         {

# For grib1 -> grib2
      constant bitMapIndicator = 0;


            meta codedValues data_g1simple_packing(
               section4Length,
               offsetBeforeData,
               offsetSection4,
               nbp,
               referenceValue,
               binaryScaleFactor,
               decimalScaleFactor,
               halfByte
            ) : read_only;

           meta values data_apply_bitmap(codedValues,bitmap,missingValue);
        }

       else{
 # For grib1 -> grib2
    constant bitMapIndicator = 255;

        meta values data_g1simple_packing(
              section4Length,
              offsetBeforeData,
              offsetSection4,
              nbp,
              referenceValue,
              binaryScaleFactor,
              decimalScaleFactor,
              halfByte
        );


      }
     }
else {
if(secondaryBitmap == 0)
{
  meta error not_implemented();
}

constant dataRepresentationTemplateNumber             = 1;
constant noMatrixBitMapsPresent1MatrixBitMapsPresent  = 1;
constant bitMapIndicator = 0;


# From GRIBEX:
#
#            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#            !                                                !
#            ! This is the WMO definition, but it is entirely !
#            ! inadequate when secondary bit maps are present !
#            ! eg 3x3 global grid with a matrix of values     !
#            ! 12x26 at each point. This gives a bit map with !
#            ! a length of 285480 octets which cannot be given!
#            ! in 16 bits.                                    !
#            !                                                !
#            ! ECMWF uses the following definition  for its   !
#            ! wave model data.                               !
#            ! N - Number of secondary bit maps               !
#            !     (ie the number of points which are 'not    !
#            !      missing').                                !
#            !     This definition will accommodate a 1x1     !
#            !     degree global grid.                        !
#            !                                                !
#            !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#

  constant datumSize             = NC*NR;
  transient secondaryBitmapsCount = octetAtWichPackedDataBegins*datumSize; #
  transient secondaryBitmapsSize  = secondaryBitmapsCount/8;

  #alias numberOfDataPoints = secondaryBitmapsCount; # grib 1 -> 2

  transient dummy = 0;
  position offsetBBitmap;

  meta secondaryBitmaps g1bitmap(
          dummy,
                    missingValue,
                    offsetBBitmap,
                    secondaryBitmapsSize,
                    dummy) : read_only;




  position  offsetBeforeData;

  meta codedValues data_g1simple_packing(
               section4Length,
               offsetBeforeData,
               offsetSection4,
               nbp,
               referenceValue,
               binaryScaleFactor,
               decimalScaleFactor,
               halfByte
            ) : read_only;



  constant expandBy = NC*NR;
  meta secondaryBitmap  data_g1secondary_bitmap(bitmap,secondaryBitmaps,missingValue,expandBy,octetAtWichPackedDataBegins);

  meta values data_apply_bitmap(codedValues,secondaryBitmap,missingValue);


}
