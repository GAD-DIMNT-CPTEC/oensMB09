      SUBROUTINE WTERP(LONIN,LATIN,LONOUT,LATOUT,FLGIN,FLGOUT,
     *WTLON,WTLAT,MPLON,MPLAT,LOND,LATD,DWORK)
      IMPLICIT DOUBLE PRECISION (D)
      DIMENSION WTLON(LONIN+LONOUT+2),WTLAT(LATIN+LATOUT+2),
     *MPLON(LONIN+LONOUT+2,2),MPLAT(LATIN+LATOUT+2,2)
      LOGICAL FLGIN(*),FLGOUT(*)
      DOUBLE PRECISION DWORK(*)
C     NEW INTERPOLATION WEIGHT CALCULATION
C     THIS SUBROUTINE SHOULD BE CALLED ONCE TO DETERMINE THE AREA
C     WEIGHTS AND INDEX MAPPING BETWEEN A PAIR OF GRIDS ON A
C     SPHERE.  THE WEIGHTS AND MAP INDICES ARE USED BY SUBROUTINE
C     NTERP TO PERFOM THE ACTUAL INTERPOLATION.  SEE FILE grid.interp
C     FOR A FURTHER DISCUSSION.
C
C     SUBROUTINE ARGUMENTS:
C
C     USER SUPPLIED INPUT ARGUMENTS AND FLAGS:
C     LONIN  NUMBER OF LONGITUDE POINTS FOR THE INPUT GRID
C     LATIN  NUMBER OF LATITUDE POINTS FOR THE INPUT GRID
C     LONOUT NUMBER OF LONGITUDE POINTS FOR THE OUTPUT GRID
C     LATOUT NUMBER OF LATITUDE POINTS FOR THE OUTPUT GRID
C     FLGIN  INPUT GRID FLAGS (SEE BELOW)
C     FLGOUT OUTPUT GRID FLAGS (SEE BELOW)
C
C     COMPUTED OUTPUT ARRAYS AND ARGUMENTS (NOTE DIMENSIONS):
C     WTLON  AREA WEIGHTS IN THE LONGITUDINAL DIRECTION
C     WTLAT  AREA WEIGHTS IN THE LATITUDINAL DIRECTION
C     MPLON  LONGITUDE INDEX MAPPING FROM INPUT (,1) TO OUTPUT (,2)
C     MPLAT  LATITUDE INDEX MAPPING FROM INPUT (,1) TO OUTPUT (,2)
C     LOND   TOTAL NUMBER OF LONGITUDE WEIGHTS
C     LATD   TOTAL NUMBER OF LATITUDE WEIGTHS
C
C     USER SUPPLIED WORK ARRAY:
C     DWORK  DOUBLE PRECISION WORK ARRAY WHICH SHOULD BE DIMENSIONED
C            THE LARGER OF 2*(LATIN+LATOUT+2) OR 2*(LONIN+LONOUT+2)
C
C     FLAGS: (IN OR OUT)
C     1     START AT NORTH POLE (TRUE) START AT SOUTH POLE (FALSE)
C     2     START AT PRIME MERIDIAN (TRUE) START AT I.D.L. (FALSE)
C     3     LATITUDES ARE AT CENTER OF BOX (TRUE)
C           LATITUDES ARE AT EDGE (FALSE) NORTH EDGE IF 1=TRUE
C                                         SOUTH EDGE IF 1=FALSE
C     4     LONGITUDES ARE AT CENTER OF BOX (TRUE)
C           LONGITUDES ARE AT WESTERN EDGE OF BOX (FALSE)
C     5     GAUSSIAN (TRUE) REGULAR (FALSE)
      DPI=3.1415926535897932384626433832795D0
C
C    INPUT GRID LATITUDES
C
      JOI=LATIN+LATOUT+2
      IF(FLGIN(5))THEN
      LATH=LATIN/2
      CALL GL(LATH,DWORK)
C
C    GAUSSIAN GRID CASE
C
      DO 10 J=2,LATIN
      IF(J.LE.LATH)THEN
      DRLTM=-DPI/2.0D0+DWORK(J-1)
      DRLTP=-DPI/2.0D0+DWORK(J)
      ELSE IF(J.GT.LATH+1)THEN
      DRLTM=DPI/2.0D0-DWORK(LATIN-J+2)
      DRLTP=DPI/2.0D0-DWORK(LATIN-J+1)
      ELSE
      DRLTM=0.0D0
      DRLTP=0.0D0
      END IF
      DWORK(J+JOI)=DSIN((DRLTM+DRLTP)/2.0D0)
   10 CONTINUE
      DWORK(1+JOI)=-1.0D0
      DWORK(LATH+1+JOI)=0.0D0
      DWORK(LATIN+1+JOI)=1.0D0
      ELSE
C
C    REGULAR GRID CASE
C
      IF(FLGIN(3))THEN
      DLAT=DPI/DFLOAT(LATIN-1)
      DOF=-(DPI+DLAT)/2.0D0
      ELSE
      DLAT=DPI/DFLOAT(LATIN)
      DOF=-DPI/2.0D0
      END IF
      DO 20 J=2,LATIN
      DWORK(JOI+J)=DSIN(DOF+DLAT*DFLOAT(J-1))
   20 CONTINUE
      DWORK(1+JOI)=-1.0D0
      DWORK(LATIN+1+JOI)=1.0D0
      END IF
C
C    OUTPUT GRID LATITUDES
C
      JOO=2*LATIN+LATOUT+3
      IF(FLGOUT(5))THEN
      LATH=LATOUT/2
      CALL GL(LATH,DWORK)
C
C    GAUSSIAN GRID CASE
C
      DO 30 J=2,LATOUT
      IF(J.LE.LATH)THEN
      DRLTM=-DPI/2.0D0+DWORK(J-1)
      DRLTP=-DPI/2.0D0+DWORK(J)
      ELSE IF(J.GT.LATH+1)THEN
      DRLTM=DPI/2.0D0-DWORK(LATOUT-J+2)
      DRLTP=DPI/2.0D0-DWORK(LATOUT-J+1)
      ELSE
      DRLTM=0.0D0
      DRLTP=0.0D0
      END IF
      DWORK(J+JOO)=DSIN((DRLTM+DRLTP)/2.0D0)
   30 CONTINUE
      DWORK(1+JOO)=-1.0D0
      DWORK(LATH+1+JOO)=0.0D0
      DWORK(LATOUT+1+JOO)=1.0D0
      ELSE
C
C    REGULAR GRID CASE
C
      IF(FLGOUT(3))THEN
      DLAT=DPI/DFLOAT(LATOUT-1)
      DOF=-(DPI+DLAT)/2.0D0
      ELSE
      DLAT=DPI/DFLOAT(LATOUT)
      DOF=-DPI/2.0D0
      END IF
      DO 40 J=2,LATOUT
      DWORK(JOO+J)=DSIN(DOF+DLAT*DFLOAT(J-1))
   40 CONTINUE
      DWORK(1+JOO)=-1.0D0
      DWORK(LATOUT+1+JOO)=1.0D0
      END IF
C
C    PRODUCE SINGLE ORDERED SET OF SIN(LAT) FOR BOTH GRIDS
C    DETERMINE LATITUDE WEIGHTING AND INDEX MAPPING
C
      J1=1
      J2=1
      J3=1
C     WRITE(6,49)(FLGIN(I),I=1,5),(FLGOUT(I),I=1,5),JOI,JOO
C  49 FORMAT(' FLGIN=',5L2,' FLGOUT=',5L2,' JOI=',I4,' JOO=',I4)
   50 IF(DWORK(J1+JOI).EQ.DWORK(J2+JOO))THEN
      DWORK(J3)=DWORK(J1+JOI)
      IF(J3.NE.1)THEN
      WTLAT(J3-1)=DWORK(J3)-DWORK(J3-1)
      MPLAT(J3-1,1)=J1-1
      IF(FLGIN(1))MPLAT(J3-1,1)=LATIN+2-J1
      MPLAT(J3-1,2)=J2-1
      IF(FLGOUT(1))MPLAT(J3-1,2)=LATOUT+2-J2
      END IF
      J1=J1+1
      J2=J2+1
      J3=J3+1
C     IF(J3.NE.2)WRITE(6,51)J1,J2,J3,DWORK(J3-1),DWORK(J3-2),
C    *WTLAT(J3-2),MPLAT(J3-2,1),MPLAT(J3-2,2)
C  51 FORMAT(' J1,2,3=',3I4,' DWORK=',2G16.8/10X,' WTLAT=',G16.8,
C    *' MPLAT(1&2)=',2I4)
      ELSE IF(DWORK(J1+JOI).LT.DWORK(J2+JOO))THEN
      DWORK(J3)=DWORK(J1+JOI)
      IF(J3.NE.1)THEN
      WTLAT(J3-1)=DWORK(J3)-DWORK(J3-1)
      MPLAT(J3-1,1)=J1-1
      IF(FLGIN(1))MPLAT(J3-1,1)=LATIN+2-J1
      MPLAT(J3-1,2)=J2-1
      IF(FLGOUT(1))MPLAT(J3-1,2)=LATOUT+2-J2
      END IF
      J1=J1+1
      J3=J3+1
C     IF(J3.NE.2)WRITE(6,51)J1,J2,J3,DWORK(J3-1),DWORK(J3-2),
C    *WTLAT(J3-2),MPLAT(J3-2,1),MPLAT(J3-2,2)
      ELSE
      DWORK(J3)=DWORK(J2+JOO)
      IF(J3.NE.1)THEN
      WTLAT(J3-1)=DWORK(J3)-DWORK(J3-1)
      MPLAT(J3-1,1)=J1-1
      IF(FLGIN(1))MPLAT(J3-1,1)=LATIN+2-J1
      MPLAT(J3-1,2)=J2-1
      IF(FLGOUT(1))MPLAT(J3-1,2)=LATOUT+2-J2
      END IF
      J2=J2+1
      J3=J3+1
C     IF(J3.NE.2)WRITE(6,51)J1,J2,J3,DWORK(J3-1),DWORK(J3-2),
C    *WTLAT(J3-2),MPLAT(J3-2,1),MPLAT(J3-2,2)
      END IF
      IF(J1.LE.LATIN+1.AND.J2.LE.LATOUT+1)GO TO 50
      LATD=J3-2
C
C     LATITUDES DONE, NOW DO LONGITUDES
C
C
C    INPUT GRID LONGITUDES
C
      IOI=LONIN+LONOUT+2
      DELRDI=(2.0D0*DPI)/DFLOAT(LONIN)
      IF(FLGIN(5).OR.FLGIN(4))THEN
      ICI=0
      DOF=0.5D0
      ELSE
      ICI=1
      DOF=0.0D0
      END IF
      DO 60 I=1,LONIN
      DWORK(I+IOI)= (DOF+DFLOAT(I-1))*DELRDI
   60 CONTINUE
C
C    OUTPUT GRID LONGITUDES
C
      IOO=2*LONIN+LONOUT+3
      DELRDO=(2.0D0*DPI)/DFLOAT(LONOUT)
      IF(FLGOUT(5).OR.FLGOUT(4))THEN
      ICO=0
      DOF=0.5D0
      ELSE
      ICO=1
      DOF=0.0D0
      END IF
      DO 70 I=1,LONOUT
      DWORK(I+IOO)= (DOF+DFLOAT(I-1))*DELRDO
   70 CONTINUE
C
C    PRODUCE SINGLE ORDERED SET OF LONGITUDES FOR BOTH GRIDS
C    DETERMINE LONGITUDE WEIGHTING AND INDEX MAPPING
C
      I1=1
      I2=1
      I3=1
   80 IF(DWORK(I1+IOI).EQ.DWORK(I2+IOO))THEN
      DWORK(I3)=DWORK(I1+IOI)
      IF(I3.NE.1)THEN
      WTLON(I3-1)=DWORK(I3)-DWORK(I3-1)
      MPLON(I3-1,1)=I1-ICI
      IF(.NOT.FLGIN(2))THEN
      MPLON(I3-1,1)=LONIN/2+I1-ICI
      IF(I1-ICI.GT.LONIN/2)MPLON(I3-1,1)=I1-ICI-LONIN/2
      END IF
      MPLON(I3-1,2)=I2-ICO
      IF(.NOT.FLGOUT(2))THEN
      MPLON(I3-1,2)=LONOUT/2+I2-ICO
      IF(I2-ICO.GT.LONOUT/2)MPLON(I3-1,2)=I2-ICO-LONOUT/2
      END IF
      END IF
      I1=I1+1
      I2=I2+1
      I3=I3+1
C     IF(I3.NE.2)WRITE(6,81)I1,I2,I3,DWORK(I3-1),DWORK(I3-2),
C    *WTLON(I3-2),MPLON(I3-2,1),MPLON(I3-2,2)
C  81 FORMAT(' I1,2,3=',3I4,' DWORK=',2G16.8/10X,' WTLON=',G16.8,
C    *' MPLON(1&2)=',2I4)
      ELSE IF(DWORK(I1+IOI).LT.DWORK(I2+IOO))THEN
      DWORK(I3)=DWORK(I1+IOI)
      IF(I3.NE.1)THEN
      WTLON(I3-1)=DWORK(I3)-DWORK(I3-1)
      MPLON(I3-1,1)=I1-ICI
      IF(.NOT.FLGIN(2))THEN
      MPLON(I3-1,1)=LONIN/2+I1-ICI
      IF(I1-ICI.GT.LONIN/2)MPLON(I3-1,1)=I1-ICI-LONIN/2
      END IF
      MPLON(I3-1,2)=I2-ICO
      IF(.NOT.FLGOUT(2))THEN
      MPLON(I3-1,2)=LONOUT/2+I2-ICO
      IF(I2-ICO.GT.LONOUT/2)MPLON(I3-1,2)=I2-ICO-LONOUT/2
      END IF
      END IF
      I1=I1+1
      I3=I3+1
C     IF(I3.NE.2)WRITE(6,81)I1,I2,I3,DWORK(I3-1),DWORK(I3-2),
C    *WTLON(I3-2),MPLON(I3-2,1),MPLON(I3-2,2)
      ELSE
      DWORK(I3)=DWORK(I2+IOO)
      IF(I3.NE.1)THEN
      WTLON(I3-1)=DWORK(I3)-DWORK(I3-1)
      MPLON(I3-1,1)=I1-ICI
      IF(.NOT.FLGIN(2))THEN
      MPLON(I3-1,1)=LONIN/2+I1-ICI
      IF(I1-ICI.GT.LONIN/2)MPLON(I3-1,1)=I1-ICI-LONIN/2
      END IF
      MPLON(I3-1,2)=I2-ICO
      IF(.NOT.FLGOUT(2))THEN
      MPLON(I3-1,2)=LONOUT/2+I2-ICO
      IF(I2-ICO.GT.LONOUT/2)MPLON(I3-1,2)=I2-ICO-LONOUT/2
      END IF
      END IF
      I2=I2+1
      I3=I3+1
C     IF(I3.NE.2)WRITE(6,81)I1,I2,I3,DWORK(I3-1),DWORK(I3-2),
C    *WTLON(I3-2),MPLON(I3-2,1),MPLON(I3-2,2)
      END IF
      IF(I1.LE.LONIN.AND.I2.LE.LONOUT)GO TO 80
      IF(I1.GT.LONIN)I1=1
      IF(I2.GT.LONOUT)I2=1
   90 IF(I2.NE.1)THEN
      DWORK(I3)=DWORK(I2+IOO)
      WTLON(I3-1)=DWORK(I3)-DWORK(I3-1)
      MPLON(I3-1,1)=1
      IF(.NOT.(FLGIN(4).OR.FLGIN(5)))MPLON(I3-1,1)=LONIN
      IF(.NOT.FLGIN(2))THEN
      MPLON(I3-1,1)=LONIN/2+1
      IF(.NOT.(FLGIN(4).OR.FLGIN(5)))MPLON(I3-1,1)=LONIN/2
      END IF
      MPLON(I3-1,2)=I2-ICO
      IF(.NOT.FLGOUT(2))THEN
      MPLON(I3-1,2)=LONOUT/2+I2-ICO
      IF(I2-ICO.GT.LONOUT/2)MPLON(I3-1,2)=I2-ICO-LONOUT/2
      END IF
      I2=I2+1
      IF(I2.GT.LONOUT)I2=1
      I3=I3+1
C     IF(I3.NE.2)WRITE(6,81)I1,I2,I3,DWORK(I3-1),DWORK(I3-2),
C    *WTLON(I3-2),MPLON(I3-2,1),MPLON(I3-2,2)
      END IF
      IF(I1.NE.1)THEN
      DWORK(I3)=DWORK(I1+IOI)
      WTLON(I3-1)=DWORK(I3)-DWORK(I3-1)
      MPLON(I3-1,1)=I1-ICI
      IF(.NOT.FLGIN(2))THEN
      MPLON(I3-1,1)=LONIN/2+I1-ICI
      IF(I1-ICI.GT.LONIN/2)MPLON(I3-1,1)=I1-ICI-LONIN/2
      END IF
      MPLON(I3-1,2)=1
      IF(.NOT.(FLGOUT(4).OR.FLGOUT(5)))MPLON(I3-1,2)=LONOUT
      IF(.NOT.FLGOUT(2))THEN
      MPLON(I3-1,2)=LONOUT/2+1
      IF(.NOT.(FLGOUT(4).OR.FLGOUT(5)))MPLON(I3-1,2)=LONOUT/2
      END IF
      I1=I1+1
      IF(I1.GT.LONIN)I1=1
      I3=I3+1
C     IF(I3.NE.2)WRITE(6,81)I1,I2,I3,DWORK(I3-1),DWORK(I3-2),
C    *WTLON(I3-2),MPLON(I3-2,1),MPLON(I3-2,2)
      END IF
      IF(I1.NE.1.OR.I2.NE.1)GO TO 90
      WTLON(I3-1)=2.0D0*DPI+DWORK(1)-DWORK(I3-1)
      MPLON(I3-1,1)=1
      IF(.NOT.(FLGIN(4).OR.FLGIN(5)))MPLON(I3-1,1)=LONIN
      IF(.NOT.FLGIN(2))THEN
      MPLON(I3-1,1)=LONIN/2+1
      IF(.NOT.(FLGIN(4).OR.FLGIN(5)))MPLON(I3-1,1)=LONIN/2
      END IF
      MPLON(I3-1,2)=1
      IF(.NOT.(FLGOUT(4).OR.FLGOUT(5)))MPLON(I3-1,2)=LONOUT
      IF(.NOT.FLGOUT(2))THEN
      MPLON(I3-1,2)=LONOUT/2+1
      IF(.NOT.(FLGOUT(4).OR.FLGOUT(5)))MPLON(I3-1,2)=LONOUT/2
      END IF
C     IF(I3.NE.1)WRITE(6,81)I1,I2,I3,DWORK(1),DWORK(I3-1),
C    *WTLON(I3-1),MPLON(I3-1,1),MPLON(I3-1,2)
      LOND=I3-1
      RETURN
      END
