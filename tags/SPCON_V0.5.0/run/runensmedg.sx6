#!/bin/ksh -x
. ../include/config.sx6

LABELI=$1
if [ -s $LABELI ]; then
      echo "ERRO: FALTA PARAMETRO.\nrunensmedg.sx6 YYYYMMDDHH"
      exit 1
else
      if [ ${#LABELI} -lt 10 ]; then
            echo "ERRO: PARAMETRO INCORRETO.\nrunensmedg.sx6 YYYYMMDDHH"
            exit 2
      else
            YYYY=`echo $LABELI |cut -c 1-4`
            MM=`echo $LABELI |cut -c 5-6`
            DD=`echo $LABELI |cut -c 7-8`
            HH=`echo $LABELI |cut -c 9-10`

            LABELF=`date -d "${NFDAYS} day ${YYYY}${MM}${DD}" +"%Y%m%d${HH}"`
            YYYYF=`echo $LABELF |cut -c 1-4`
            MMF=`echo $LABELF |cut -c 5-6`
            DDF=`echo $LABELF |cut -c 7-8`
            HHF=`echo $LABELF |cut -c 9-10`
      fi
fi

PERT=$2

NFCTDY=$FSCT
let NMEMBR=${NPERT}*2+1
PREFX=${PERT}

NPROC=1
#
#     End of setting parameters to run
#####
#
#   Set initial and final forecasting labels and UTC Hour
#
calday ()
{
echo ${LABELI} > labeli.plumes.out
yi=`awk '{ print substr($1,1,4) }' labeli.plumes.out`
mi=`awk '{ print substr($1,5,2) }' labeli.plumes.out`
di=`awk '{ print substr($1,7,2) }' labeli.plumes.out`
hi=`awk '{ print substr($1,9,2) }' labeli.plumes.out`
rm -f labeli.plumes.out
let ybi=${yi}%4
if [ ${ybi} = 0 ]
then
set -A md 31 29 31 30 31 30 31 31 30 31 30 31
else
set -A md 31 28 31 30 31 30 31 31 30 31 30 31
fi
let df=${di}+${NFCTDY}
let mf=${mi}
let yf=${yi}
let hf=${hi}
let n=${mi}-1
if [ df -gt md[${n}] ]
then
let df=df-md[${n}]
let mf=mf+1
if [ mf -eq 13 ]
then
let mf=1
let yf=yf+1
fi
fi
if [ df -lt 10 ]
then DF=0${df}
else DF=${df}
fi
if [ mf -lt 10 ]
then MF=0${mf}
else MF=${mf}
fi
YF=${yf}
if [ hf -lt 10 ]
then HF=0${hf}
else HF=${hf}
fi
}
calday
LABELF=${YF}${MF}${DF}${HF}
export LABELI LABELF
echo "LABELI="${LABELI}
echo "LABELF="${LABELF}
#
#     Select parameter for the resolution:
#
if [ "run" = "run" ]
then
case ${TRC} in
021) MR=22 ; IR=64 ; JR=32 ; NPGH=93 ;
     DT=1800
;;
030) MR=31 ; IR=96 ; JR=48 ; NPGH=140 ;
     DT=1800
;;
042) MR=43 ; IR=128 ; JR=64 ; NPGH=187 ;
     DT=1800
;;
047) MR=48 ; IR=144 ; JR=72 ; NPGH=26 ;
     DT=1200
;;
062) MR=63 ; IR=192 ; JR=96 ; NPGH=315 ;
     DT=1200
;;
079) MR=80 ; IR=240 ; JR=120 ; NPGH=26 ;
     DT=900
;;
085) MR=86 ; IR=256 ; JR=128 ; NPGH=26 ;
     DT=720
;;
094) MR=95 ; IR=288 ; JR=144 ; NPGH=591 ;
     DT=720
;;
106) MR=107 ; IR=320 ; JR=160 ; NPGH=711 ;
     DT=600
;;
126) MR=127 ; IR=384 ; JR=192 ; NPGH=284 ;
     DT=600
;;
159) MR=160 ; IR=480 ; JR=240 ; NPGH=1454 ;
     DT=450
;;
170) MR=171 ; IR=512 ; JR=256 ; NPGH=1633 ;
     DT=450
;;
213) MR=214 ; IR=640 ; JR=320 ; NPGH=2466 ;
     DT=360
;;
254) MR=255 ; IR=768 ; JR=384 ; NPGH=3502 ;
     DT=300
;;
319) MR=320 ; IR=960 ; JR=480 ; NPGH=26 ;
     DT=240
;;
*) echo "Wrong request for horizontal resolution: ${TRC}" ; exit 1;
esac
fi
#
#   Set host, machine, NQS Queue, Run time and Extention
#
HSTMAQ=`hostname`
MAQUI=sx6

RUNTM=`date +'%Y%m%d%T'`
EXT=out
echo ${MAQUI}
echo ${QUEUE}
echo ${RUNTM}
echo ${EXT}
#
#   Set directories
#
#   OPERMO is the directory for sources, scripts and printouts.
#   SOPERM is the directory for input and output files.
#   ROPERM is the directory for big selected output files.
#   AOPERM is the directory for alternative initial conditions.
#
#. config.scr
echo ${OPERM}
echo ${SOPERM}
echo ${ROPERM}
#
#   Set truncation and layers
#
RESOL=T${TRC}
NIVEL=L${LV}
#
#   CTLDIR is the directory where the outputs will be available
#          after they were send to archive machine ygara.
#
yydir=`awk 'BEGIN {print substr("'$LABELI'",1,4)}'`
mmdir=`awk 'BEGIN {print substr("'$LABELI'",5,2)}'`
dddir=`awk 'BEGIN {print substr("'$LABELI'",7,2)}'`
#CTLDIR=/bangu/samfs/ensglob/nmc/${RESOL}${NIVEL}/ANL/${yydir}/${mmdir}/${dddir}
CTLDIR=${ROPERM}/pos/dataout/${RESOL}${NIVEL}
#
cd ${OPERM}/run
#
cat <<EOT0 > setensmed${RESOL}${NIVEL}.${MAQUI}
#!/bin/ksh 
#PBS -l cpunum_prc=${NPROC}
#PBS -l tasknum_prc=${NPROC}
#PBS -l memsz_job=400mb
#PBS -l cputim_job=7200
#
#*****************************************************************#
#                                                                 #
#       Name:           setensmed${RESOL}${NIVEL}.${MAQUI}        #
#                                                                 #
#       Function:       This script file is used to set the       #
#                       environmental variables and start         #
#                       the global model scripts.                 #
#                                                                 #
#*****************************************************************#
#
#  At SX6 Both the output (stdout) and the error
#  messages (stderr) are written to the same file
#
#PBS -o ${HSTMAQ}:${OPERM}/run/setout/setensmed${RESOL}${NIVEL}.${MAQUI}.${RUNTM}.${EXT}
#PBS -j o
#
#   Set date (day,month,year) and hour (hour:minute) 
#
#   DATE=yyyymmdd
#   HOUR=hh:mn:ss
#
DATE=`date +'%Y%m%d'`
HOUR=`date +'%T'`
export DATE HOUR
#
#   Set directories
#
#   OPERMOD  is the directory for sources, scripts and
#            printouts files.
#   SOPERMOD is the directory for input and output data
#            and bin files.
#   ROPERMOD is the directory for big selected output files.
#   AOPERMOD is the directory for alternative initial conditions.
#
OPERMOD=${OPERM}
SOPERMOD=${SOPERM}
ROPERMOD=${ROPERM}
export OPERMOD SOPERMOD ROPERMOD 
echo \${OPERMOD}
echo \${SOPERMOD}
echo \${ROPERMOD}
#
cd \${OPERMOD}/run
#
#   Set Horizontal Truncation and Vertical Layers
#
LEV=${NIVEL}
TRUNC=${RESOL}
export TRUNC LEV
#
#   Set machine
MACH=${MAQUI}
export MACH
#
#   Set option for compiling or not the source codes.
#
#   If COMPILE=make then only the modified sources will be compiled.
#   If COMPILE=clean then the touch files will be removed and 
#              all sources will be compiled.
#             =run for run with no compilation
#
#   If COMPILE is make or clean then the script generates the binary file 
#              and exits;
#              if it is run then the script runs the existent binary file.
#
COMPILE=run
export COMPILE
echo \${COMPILE}
#
# Define variables to generate variable data file names:
#
OUT=${EXT}
export OUT
#
EXTS=S.unf
export EXTS 
#
#   Set SX6 FORTRAN variables for output time diagnostics
#
#   F_PROGINF gives the elapsed, user, system and vector instruction
#             execution time, and execution count of all instructions
#             and number of vector instruction executions.
#   F_FILEINF gives informations about I/O operations.
#
F_PROGINF=DETAIL
export F_PROGINF
#
#   Set FORTRAN compilation flags
#
#   -float0 floating-point data format IEEE is enabled
#   -ew     sets the basic numeric size to 8 bytes
#
#   Set FORTRAN environment file name
#
#   FFFn is associated with FORTRAN file unit = n
#
FFF=F_FF
export FFF
#
#   Set environmental variables to binary conversion
#
F_SETBUF=2048
export F_SETBUF
echo " F_SETBUF = \${F_SETBUF}"
#
#   Set number of processors to use on the execution of the script
#
OMP_NUM_THREADS=${NPROC}
export OMP_NUM_THREADS
#
#  Now, verify if compile or run
#
if [ "\${COMPILE}" != "run" ]
then
cd \${OPERMOD}/ensmed/source
make -f Makefile clean
make -f Makefile
#
else
#
#   Run AGCM
#
echo 'MODEL  -- SUBMITTED ...'
#
####################################################################
#                         				           #
#        Os dados devem sempre ser organizados de forma            #
#        que os dados fiquem separados por blocos dos tipos:       #            
#        1o. Inteiros                                              #
#        2o. Floats                                                #
#	 3o. Chars                                                 #
#								   #
####################################################################
#
#
#Parametros a serem lidos pelo programa ensmed.f90
#NBYTE     : ( INTEGER ) number of bytes for each grib point information
#NFCTDY    : ( INTEGER ) number of forecast days
#FREQCALC  : ( INTEGER ) interval in hours for computing ensemble mean
#MEMB      : ( INTEIRO ) number of members of the ensemble
#IMAX      : ( INTEIRO ) number of points in zonal direction
#JMAX      : ( INTEIRO ) number of points in merdional direction
#DATAINDIR : ( CHAR    ) input directory (ensemble members)
#DATAOUTDIR: ( CHAR    ) output directory of ensemble mean
#RESOL     : ( CHAR    ) horizontal and vertical model resolution
#PREFX     : ( CHAR    ) preffix for input and output files 
cat <<EOT > \${OPERMOD}/ensmed/exec/ensmed.${LABELI}.nml
NBYTE     :   2
NFCTDY    :   ${NFCTDY}
FREQCALC  :   6
MEMB      :   ${NMEMBR}
IMAX      :   ${IR}
JMAX      :   ${JR}
DATAINDIR :   \${ROPERMOD}/pos/dataout/\${TRUNC}\${LEV}/
DATAOUTDIR:   \${ROPERMOD}/ensmed/dataout/\${TRUNC}\${LEV}/
RESOL     :   \${TRUNC}\${LEV}
PREFX     :   ${PREFX}
EOT
#
########
#
#
#-------------------------------------------------------------
#
# Verify if all files of grid-history ensemble forecast were produced
# If is True, it calculates the plumes. If is False, makes 600 trials (each trial equal 1 minute)
# 
ntrialmax=600
NMEMBRP=${NMEMBR}
let NP=NMEMBRP-1
let NPR=NP/2

echo "NP="\$NP
echo "NPR="\$NPR

nk=1
while [ \${nk} -le ${NMEMBR}  ]
do 
  if [ \${nk} -lt 10 ]
  then
    nk='0'\${nk}
  fi
  stat[\${nk}]=0
#  echo "stat[\${nk}]="\${stat[\${nk}]}
let nk=nk+1
done

cd \${OPERMOD}/run

#
#   Submit probabilities evaluation
#
#echo "runprobability.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NMEMBR} ${NRBINSO} ${PREFX} ${EXP}" 
#AMM runprobability.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NMEMBR} ${NRBINSO} ${PREFX} ${EXP} 

#
#   Submit spread evaluation
#
#echo "runspread.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NMEMBR} ${NRBINSO} ${PREFX} ${EXP}" 
#AMM runspread.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NMEMBR} ${NRBINSO} ${PREFX} ${EXP} 

#
#   Submit cluster evaluation
#
#echo "runcluster.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NMEMBR} ${NRBINSO} ${PREFX} ${EXP}" 
#AMM MM runcluster.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NMEMBR} ${NRBINSO} ${PREFX} ${EXP} 

#
cd \${OPERMOD}/ensmed/exec
#
#   Run the ensmed fortran program
#
\${OPERMOD}/ensmed/exec/ensmed.exe ${LABELI}

#
#   Transfer files of ensemble mean to DEC
#
cd \${OPERMOD}/run
#echo "runtransfer.ensmed.${MAQUI} ${TRC} ${LV} ${LABELI} ${EXP}"   
#AMM runtransfer.ensmed.${MAQUI} ${TRC} ${LV} ${LABELI} ${EXP}   

#
#   Submit prcmed evaluation
#
#echo "runprcmed.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NRBINSO} ${EXP}" 
#AMM runprcmed.${MAQUI} run ${TRC} ${LV} ${LABELI} ${NFCTDY} ${NRBINSO} ${EXP} 

#
fi
#
EOT0
#
chmod +x setensmed${RESOL}${NIVEL}.${MAQUI}
#
#   Run ensmed script
#
echo 'ensmed  -- Run script ...'
#
echo 'ensmed  -- SUBMITTED TO NQS QUEUE ...'
#
#echo "/usr/bin/nqsII/qsub -q ${QUEUE} ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI}"
#/usr/bin/nqsII/qsub -q ${QUEUE} ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI}
submit ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI} ${QUEUE} Info
#
sleep 30
#
cd ${ROPERM}/ensmed/dataout/${RESOL}${NIVEL}/

for arq in `ls ${ROPERM}/ensmed/dataout/${RESOL}${NIVEL}/GPOSENM${LABELI}*ctl`
do
set +e
      /usr/local/grads-1.9b3/bin/gribmap -i ${arq}
set -e
done

exit 0
