#!/bin/bash -x
#help#
#************************************************************************************#
#                                                                                    #
# script to run CPTEC Post-processing on PC Clusters under MPI Scali                 #
# and Sun Grid Engine without OpenMP                                                 #
#                                                                                    #
# assumptions: assume present but NOT at the same directory:                         #
#              $FEXE/PostGrib (Post-processing Executable file)                      #
#              $FSCR/POSTIN-GRIB (Post-processing input Namelist file)               #
#                                                                                    #
# usage: run_post_UNA.sh cpu_mpi  cpu_node name TRC LV LABELI LABELF hold            #
# where:                                                                             #
# cpu_mpi: integer, the desired number of mpi processes                              #
# cpu_node: integer, the desired number of mpi processes per shared memory node      #
#************************************************************************************#
#help#
#
#       Help:
#
if [ "${1}" = "help" -o -z "${1}" ]
then
  cat < ${0} | sed -n '/^#help#/,/^#help#/p'
  exit 1
else
  TRC=`echo ${4} | awk '{print $1/1}'`   
fi
if [ -z "${5}" ]
then
  echo "LV is not set" 
  exit 2
else
  LV=`echo ${5} | awk '{print $1/1}'`    
fi

if [ -z "${6}" ]
then
  echo "LABELI is not set" 
  exit 3
else
  export LABELI=${6}  
fi
if [ -z "${7}" ]
then
  echo "LABELF is not set" 
  exit 3
else
  export LABELF=${7}  
fi

if [ "$#" == 8 ]
then hold="-sync y"
else hold=
fi
#
# SETTING THE APPROPRIATED ENVIRONMENT
#
CASE=`echo ${TRC} ${LV} |awk '{ printf("TQ%4.4dL%3.3d\n",$1,$2)  }' `
PATHA=`pwd`
export FILEENV=`find ${PATHA} -name EnvironmentalVariablesMCGA -print`
export PATHENV=`dirname ${FILEENV}`
export PATHBASE=`cd ${PATHENV};cd ../;pwd`
. ${FILEENV} ${CASE}
cd ${HOME_suite}/run

# script arguments and directory
DIRRESOL=`echo ${TRC} ${LV} |awk '{ printf("TQ%4.4dL%3.3d\n",$1,$2)  }' `
EXECFILEPATH=${DK_suite}/pos/exec
SCRIPTFILEPATH=${HOME_suite}/run/postg${DIRRESOL}.${MAQUI}
NAMELISTFILEPATH=${HOME_suite}/run
OUTPUTFILEPATH=${HOME_suite}/run/setout/postg${DIRRESOL}.${MAQUI}.${RUNTM}.out
cpu_mpi=${1};  if [[ -z "${1}"  ]]; then cpu_mpi=1 ; fi
cpu_node=${2}; if [[ -z "${2}"  ]]; then cpu_node=1; fi
export cpu_mpi cpu_node
export RES=$3
cpu=${cpu_mpi}
node=${cpu_node}
MEM=10gb
itime=`echo "3600" | bc -l`
BUFFER=20480

# total cpus and nodes

num=$(($cpu_mpi+$cpu_node-1))
fra=$(($num/$cpu_node))
cpu_tot=$(($fra*$cpu_node))
echo fila=mpi-npn${cpu_node} total cpus=${cpu_tot}
MAQUI="Linux"
export aspa="'"  
export GPOS=GPOS
export trunc=$TRC
export lev=$LV
if [ -z "${PREFXO}" ] ;then
export PREFX="NMC" 
else
export PREFX="${PREFXO}" 
fi 
export nfend=200                                                                    # number of forecasted files to be post-processed
export datain=${DK_suite}/model/dataout/${DIRRESOL}/${LABELI}    # main dataout directory
export datalib=${DK_suite}/pos/datain                  # main dataout directory
export dataout=${DK_suite}/pos/dataout/${DIRRESOL}/${LABELI}; mkdir -p ${dataout}     # main dataout directory
export res=-0.5              # if res >  0 Define output resolution (deg)
export ENS=".FALSE."         # ensemble products => TRUE, only for AVN, 0?P, 0?N PREFX
export RegIntIn=".FALSE."    # flag to interpolate outputs on regular grid (.TRUE.)
                             # .FALSE. to get outputs on Gaussian grid

cat ${NAMELISTFILEPATH}/POSTIN-GRIB | awk '{  
      if (substr($1,1,5) == "trunc")
       {
     	"echo $trunc" | getline trunc
	"echo $aspa" | getline aspa    
         printf("  trunc    =%sTQ%4.4d%s,  !TRC   : three-digit triangular truncation\n",aspa,trunc,aspa)
       }
      else if (substr($1,1,3) == "lev")
       {
     	"echo $lev" | getline lev      
	"echo $aspa" | getline aspa    
         printf("  lev     =%sL%3.3d%s,       ! vertical layers = LXXX\n",aspa,lev,aspa)
       }
      else if (substr($1,1,6) == "labeli")
       {
        "echo $aspa" | getline aspa
     	"echo $LABELI" | getline LABELI       
         printf("  labeli=%s%s%s , ! initial forecasting label (yyyymmddhh)\n",aspa,LABELI,aspa)
       }
      else if (substr($1,1,6) == "labelf")
       { 
        "echo $aspa" | getline aspa
     	"echo $LABELF" | getline LABELF
         printf("  labelf=%s%s%s , ! final forecasting label (yyyymmddhh)\n",aspa,LABELF,aspa)
       }
      else if (substr($1,1,5) == "prefx")
       { 
        "echo $aspa" | getline aspa
     	"echo $PREFX" | getline PREFX
         printf("  prefx =%s%s%s,        ! preffix for input and output files\n",aspa,PREFX,aspa)
       }
      else if (substr($1,1,5) == "nfend")
       { 
     	"echo $nfend" | getline nfend
         printf("  nfend=%d,         ! number of forecasted files to be post-processed\n",nfend)
       }
      else if (substr($1,1,3) == "res")
       { 
     	"echo $res" | getline res
         printf("  res=%8.5f,            ! if res >  0 Define output resolution (deg)\n",res)
       }
      else if (substr($1,1,3) == "ENS")
       { 
     	"echo $ENS" | getline ENS
         printf("  res=%s,            ! if res >  0 Define output resolution (deg)\n",ENS)
       }
      else if (substr($1,1,8) == "RegIntIn")
       { 
     	"echo $RegIntIn" | getline RegIntIn
         printf("  res=%s,            ! if res >  0 Define output resolution (deg)\n",RegIntIn)
       }
      else if (substr($1,1,6) == "datain")
       { 
        "echo $aspa" | getline aspa
     	"echo $datain" | getline datain
         printf("  datain=%s%s%s,! main dataout directory\n",aspa,datain,aspa)
       }
      else if (substr($1,1,7) == "datalib")
       { 
        "echo $aspa" | getline aspa
     	"echo $datalib" | getline datalib
         printf("  datalib=%s%s%s,! main dataout directory\n",aspa,datalib,aspa)
       }
      else if (substr($1,1,7) == "dataout")
       { 
        "echo $aspa" | getline aspa
     	"echo $dataout" | getline dataout
         printf("  dataout=%s%s%s,! main dataout directory\n",aspa,dataout,aspa)
       }
      else
       {
     	 print $0
       }
     }'    > ${EXECFILEPATH}/POSTIN-GRIB

 
# script invoked by mpirun
cat <<EOF1>${SCRIPTFILEPATH}
#!/usr/bin/ksh -x
#PBS -T mpisx                    # Job type: mpisx for MPI
#PBS -l cpunum_prc=${cpu}
#PBS -l tasknum_prc=${cpu}
#PBS -b ${node}                  # number of nodes
#PBS -l cputim_job=${itime}
#PBS -l memsz_job=${MEM}
#PBS -o turi:${HOME_suite}/run/setout/Out.post.${LABELI}.${tmstp}.%s.MPI${cpu_mpi}.out
#PBS -e turi:${HOME_suite}/run/setout/Out.post.${LABELI}.${tmstp}.%s.MPI${cpu_mpi}.out
#PBS -j o
#PBS -V
#PBS -S /bin/bash
#PBS -N $RES
#
if [[ ${MAQUI} == "Linux" || ${MAQUI} == "linux" ]]; then
export F_UFMTENDIAN=10,11
fi
export KMP_STACKSIZE=128m
ulimit -s unlimited
cd ${EXECFILEPATH}
time ${EXECFILEPATH}/PostGrib < ${EXECFILEPATH}/POSTIN-GRIB

for TIPO in P.fct P.fgs S.fct
do
if [ -e ${dataout}/${GPOS}${PREFX}${LABELI}${LABELF}\${TIPO}.${CASE}.lst  ]; then
for arq in \`cat ${dataout}/${GPOS}${PREFX}${LABELI}${LABELF}\${TIPO}.${CASE}.lst |grep ctl\`
do
arq1=\`basename \$arq\`

# Mapping the GRIB data

/usr/local/grads/bin/gribmap -i \${dataout}/\${arq1}
done
fi
done
EOF1
#
#   Change mode to be executable
#
chmod +x ${SCRIPTFILEPATH}
qsub $hold ${SCRIPTFILEPATH}
