       !        
       !        Cray Inc. Decompilation
       !        WARNING - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  gbytes_char.f
       !        File                  :  gbytes_char.cg
       !        Format                :  Fortran
       !        Target                :  X86, 64-bit
       !        
    1.       
    1.       subroutine gbytec( in, iout, iskip, nbyte )
    1.       $CARG_iskip_I0 = 0[loc( iskip ),0]
    1.       $CARG_nbyte_I1 = 0[loc( nbyte ),0]
    4.       $CS_CARG_iskip_4 = $CARG_iskip_I0 + _rsh( _ash( $CARG_iskip_I0, 2 ), 29 )
    4.       $t_S3 = mova2i( substr[in,_ash( $CS_CARG_iskip_4, 3 ):1] )
    4.       $CS_5 = and( -8, $CS_CARG_iskip_4 )
    4.       $LCS_CARG_iskip_0 = $CARG_iskip_I0 - $CS_5
    4.       if ( or( $LCS_CARG_iskip_0, 7 - $LCS_CARG_iskip_0 ) < 0 ) then
    4.          $LB_Y0 = 1
    4.          $UB_Y1 = 8
    4.          $Subscript_Y5 = 8 - $LCS_CARG_iskip_0
    4.          _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y41, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y43 )
    4.       endif
    4.       $LCS_CARG_iskip_1 = $CARG_iskip_I0 - $CS_5
    4.       $itmp_S11 = and( $t_S3, 7[loc( ones ),-$LCS_CARG_iskip_1] )
    4.       $LCS_CARG_iskip_3 = min( $CARG_nbyte_I1, 8 - $LCS_CARG_iskip_1 ) + $CARG_iskip_I0 - $CS_5
    4.       $CS_CARG_iskip_0 = $LCS_CARG_iskip_3
    4.       if ( $CS_CARG_iskip_0 /= 8 ) then
    4.          $CS_CARGiskip_1 = -8 + $CS_CARG_iskip_0
    4.          $LCS_4 = abs( -8 + $LCS_CARG_iskip_3 )
    4.          $itmp_S11 = cvmg( lshift( $itmp_S11, $LCS_4 ), rshift( $itmp_S11, $LCS_4 ), $CS_CARGiskip_1 > 0 )
    4.       endif
    4.       $LCS_6 = min( $CARG_nbyte_I1, and( -8, $CS_CARG_iskip_4 ) + 8 - $CARG_iskip_I0 )
    4.       $CS_CARG_nbyte_3 = $CARG_nbyte_I1 - $LCS_6
    4.       $bitcnt_S14 = $CS_CARG_nbyte_3
    4.       $LCS_7 = _ash( $CS_CARG_iskip_4, 3 )
    4.       $index_S15 = 2 + $LCS_7
    4.       if ( $CS_CARG_nbyte_3 >= 8 ) then
    4.          $PRT_P4 = $LCS_6 - $CARG_nbyte_I1
    4.          $Trips01_N1 = -_ash( $PRT_P4 + _rsh( _ash( $PRT_P4, 2 ), 29 ), 3 )
    4.          $bitcnt_S12 = 0
    4.          $LIS_E0 = ( 1 + $LCS_7 )
    4.          $Induc01_S13 = -7 + $CS_CARG_nbyte_3
    4.          do
    4.             $t_S7 = mova2i( substr[in,$LIS_E0 + $bitcnt_S12:1] )
    4.             $itmp_S11 = or( $t_S7, _lsh( $itmp_S11, 8 ) )
    4.             $bitcnt_S12 = 1 + $bitcnt_S12
    4.             $Induc01_S13 = -8 + $Induc01_S13
    4.             if ( $Induc01_S13 <= 0 ) exit
    4.          enddo
    4.          $index_S15 = ( _ash( $CS_CARG_iskip_4, 3 ) + 2 + $Trips01_N1 )
    4.          $bitcnt_S14 = $CARG_nbyte_I1 - _lsh( $Trips01_N1, 3 ) + ( min( $CARG_nbyte_I1, and( -8, $CS_CARG_iskip_4 ) + 8 - $CARG_iskip_I0 ) )
    4.       endif
    4.       if ( $bitcnt_S14 > 0 ) then
    4.          $t_S9 = mova2i( substr[in,-1 + $index_S15:1] )
    4.          if ( or( 8 - $bitcnt_S14, -1 + $bitcnt_S14 ) < 0 ) then
    4.             $LB_Y0 = 1
    4.             $UB_Y1 = 8
    4.             $Subscript_Y5 = $bitcnt_S14
    4.             _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y44, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y45 )
    4.          endif
    4.          $LCS_bitcnt_10 = -8 + $bitcnt_S14
    4.          $LCS_9 = abs( $LCS_bitcnt_10 )
    4.          $LCS_11 = abs( $bitcnt_S14 )
    4.          $itmp_S11 = or( and( -1[loc( ones ),$bitcnt_S14], cvmg( lshift( $t_S9, $LCS_9 ), rshift( $t_S9, $LCS_9 ), $LCS_bitcnt_10 > 0 ) ), cvmg( lshift( $itmp_S11, $LCS_11 ), rshift( $itmp_S11, $LCS_11 ), $bitcnt_S14 > 0 ) )
    4.       endif
    4.       0[loc( iout ),0] = $itmp_S11
    6.       return
    6.       end
    6.       
    8.       
    8.       subroutine sbytec( out, in, iskip, nbyte )
    8.       $CARG_iskip_I0 = 0[loc( iskip ),0]
    8.       $CARG_nbyte_I1 = 0[loc( nbyte ),0]
   11.       $itmp_S11 = 0[loc( in ),0]
   11.       $bitcnt_S12 = $CARG_nbyte_I1
   11.       $PRT_P5 = -1 + $CARG_iskip_I0 + $CARG_nbyte_I1
   11.       $CS_PRT_3 = $PRT_P5 + _rsh( _ash( $PRT_P5, 2 ), 29 )
   11.       $index_S13 = 1 + _ash( $CS_PRT_3, 3 )
   11.       $LCS_PRT_1 = $PRT_P5 - and( -8, $CS_PRT_3 )
   11.       if ( $LCS_PRT_1 /= 7 ) then
   11.          $LCS_2 = min( $CARG_nbyte_I1, 1 + $LCS_PRT_1 )
   11.          $CS_0 = or( 8 - $LCS_2, -1 + $LCS_2 ) >= 0
   11.          if ( $CS_0 == .false. ) then
   11.             $LB_Y0 = 1
   11.             $UB_Y1 = 8
   11.             $Subscript_Y5 = $LCS_2
   11.             _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y41, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y43 )
   11.          endif
   11.          $LCS_3 = min( $CARG_nbyte_I1, 1 + $PRT_P5 - and( -8, $CS_PRT_3 ) )
   11.          if ( or( 8 - $LCS_3, -1 + $LCS_3 ) < 0 ) then
   11.             $LB_Y0 = 1
   11.             $UB_Y1 = 8
   11.             $Subscript_Y5 = $LCS_3
   11.             _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y41, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y43 )
   11.          endif
   11.          $LCS_PRT_4 = $PRT_P5 - and( -8, $CS_PRT_3 )
   11.          $LCS_ones_5 = -1[loc( ones ),min( $CARG_nbyte_I1, 1 + $LCS_PRT_4 )]
   11.          $LCS_7_7 = 7 - $LCS_PRT_4
   11.          $LCS_6 = abs( $LCS_7_7 )
   11.          $imask_S4 = cvmg( lshift( $LCS_ones_5, $LCS_6 ), rshift( $LCS_ones_5, $LCS_6 ), $LCS_7_7 > 0 )
   11.          $t_S5 = mova2i( substr[out,_ash( $CS_PRT_3, 3 ):1] )
   11.          $LCS_PRT_12 = $PRT_P5 - and( -8, $CS_PRT_3 )
   11.          $LCS_7_10 = 7 - $LCS_PRT_12
   11.          $LCS_9 = abs( $LCS_7_10 )
   11.          $LCS_13 = _ash( $CS_PRT_3, 3 )
   11.          substr[out,$LCS_13:1] = character*1( or( and( $imask_S4, cvmg( lshift( $itmp_S11, $LCS_9 ), rshift( $itmp_S11, $LCS_9 ), $LCS_7_10 > 0 ) ), and( $t_S5, 255 - $imask_S4 ) ) )
   11.          $LCS_14 = min( $CARG_nbyte_I1, 1 + $LCS_PRT_12 )
   11.          $bitcnt_S12 = $CARG_nbyte_I1 - $LCS_14
   11.          $index_S13 = $LCS_13
   11.          $LCS_15 = abs( $LCS_14 )
   11.          $itmp_S11 = cvmg( lshift( $itmp_S11, $LCS_15 ), rshift( $itmp_S11, $LCS_15 ), $LCS_14 < 0 )
   11.       endif
   11.       if ( $bitcnt_S12 >= 8 ) then
   11.          $bitcnt_S15 = 0
   11.          $SR_S14 = 0
   11.          $LIS_E2 = ( -1 + $index_S13 )
   11.          $Induc01_S16 = -7 + $bitcnt_S12
   11.          do
   11.             substr[out,$LIS_E2 - $bitcnt_S15:1] = character*1( and( 255, _rsh( $itmp_S11, $SR_S14 ) ) )
   11.             $SR_S14 = 8 + $SR_S14
   11.             $bitcnt_S15 = 1 + $bitcnt_S15
   11.             $Induc01_S16 = -8 + $Induc01_S16
   11.             if ( $Induc01_S16 <= 0 ) exit
   11.          enddo
   11.          $LCS_16 = $bitcnt_S12
   11.          $index_S13 = $index_S13 - _ash( $LCS_16 + _rsh( _ash( $bitcnt_S12, 2 ), 61 ), 3 )
   11.          $LCS_17 = _lsh( _ash( $bitcnt_S12 + _rsh( _ash( $bitcnt_S12, 2 ), 29 ), 3 ), 3 )
   11.          $itmp_S11 = _rsh( $itmp_S11, $LCS_17 )
   11.          $bitcnt_S12 = $LCS_16 - $LCS_17
   11.       endif
   11.       if ( $bitcnt_S12 > 0 ) then
   11.          $CS_5 = or( 8 - $bitcnt_S12, -1 + $bitcnt_S12 ) >= 0
   11.          if ( $CS_5 == .false. ) then
   11.             $LB_Y0 = 1
   11.             $UB_Y1 = 8
   11.             $Subscript_Y5 = $bitcnt_S12
   11.             _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y45, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y46 )
   11.          endif
   11.          $MR_ones_S17 = -1[loc( ones ),$bitcnt_S12]
   11.          $itmp2_S10 = and( $itmp_S11, $MR_ones_S17 )
   11.          $t_S8 = mova2i( substr[out,-1 + $index_S13:1] )
   11.          if ( $CS_5 == .false. ) then
   11.             $LB_Y0 = 1
   11.             $UB_Y1 = 8
   11.             $Subscript_Y5 = $bitcnt_S12
   11.             _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y45, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y46 )
   11.          endif
   11.          $MR_ones_S18 = -1[loc( ones ),$bitcnt_S12]
   11.          $itmp3_S9 = and( $t_S8, 255 - $MR_ones_S18 )
   11.          substr[out,-1 + $index_S13:1] = character*1( or( $itmp3_S9, $itmp2_S10 ) )
   11.       endif
   13.       return
   13.       end
   13.       
   15.       
   15.       subroutine gbytesc( in, iout, iskip, nbyte, nskip, n )
   15.       $CARG_iskip_I0 = 0[loc( iskip ),0]
   15.       $CARG_nbyte_I1 = 0[loc( nbyte ),0]
   15.       $CARG_nskip_I2 = 0[loc( nskip ),0]
   15.       $CARG_n_I3 = 0[loc( n ),0]
   35.       if ( $CARG_n_I3 > 0 ) then
   35.          $I_L35_S17 = 0
   43.          $SR_S11 = $CARG_iskip_I0
   43.          $LIS_E4 = ( $CARG_nbyte_I1 + $CARG_nskip_I2 )
   62.          $LIS_E3 = $CARG_n_I3
   51.          $LIS_E2 = $CARG_nbyte_I1
   43.          $LIS_E1 = loc( ones )
   43.          do
   43.             $PRT_P6 = $SR_S11
   43.             $CS_PRT_4 = $PRT_P6 + _rsh( _ash( $PRT_P6, 2 ), 29 )
   43.             $t_S3 = mova2i( substr[in,_ash( $CS_PRT_4, 3 ):1] )
   43.             $CS_5 = and( -8, $CS_PRT_4 )
   43.             $LCS_PRT_0 = $PRT_P6 - $CS_5
   43.             if ( or( $LCS_PRT_0, 7 - $LCS_PRT_0 ) < 0 ) then
   43.                $LB_Y0 = 1
   43.                $UB_Y1 = 8
   43.                $Subscript_Y5 = 8 - $LCS_PRT_0
   43.                _bounds_error( $_File_Y40, $Line_Y42, $_Name_Y41, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y43 )
   43.             endif
   43.             $LCS_PRT_1 = $PRT_P6 - $CS_5
   43.             $itmp_S12 = and( $t_S3, 7[$LIS_E1,-$LCS_PRT_1] )
   44.             $LCS_PRT_3 = min( $CARG_nbyte_I1, 8 - $LCS_PRT_1 ) + $PRT_P6 - $CS_5
   44.             if ( $LCS_PRT_3 /= 8 ) then
   44.                $CS_PRT_0 = $LCS_PRT_3
   44.                $CS_PRT_1 = -8 + $CS_PRT_0
   44.                $LCS_4 = abs( -8 + $LCS_PRT_3 )
   44.                $itmp_S12 = cvmg( lshift( $itmp_S12, $LCS_4 ), rshift( $itmp_S12, $LCS_4 ), $CS_PRT_1 > 0 )
   44.             endif
   46.             $LCS_7 = min( $CARG_nbyte_I1, and( -8, $CS_PRT_4 ) + 8 - $PRT_P6 )
   46.             $LCS_CARG_nbyte_6 = $CARG_nbyte_I1 - $LCS_7
   46.             $bitcnt_S15 = $LCS_CARG_nbyte_6
   45.             $LCS_8 = _ash( $CS_PRT_4, 3 )
   45.             $index_S16 = 2 + $LCS_8
   49.             if ( $LCS_CARG_nbyte_6 >= 8 ) then
   49.                $PRT_P7 = $LCS_7 - $CARG_nbyte_I1
   49.                $Trips01_N1 = -_ash( $PRT_P7 + _rsh( _ash( $PRT_P7, 2 ), 29 ), 3 )
   49.                $bitcnt_S13 = 0
   50.                $LIS_E5 = ( 1 + $LCS_8 )
   49.                $Induc01_S14 = -7 + $LCS_CARG_nbyte_6
   49.                do
   50.                   $t_S7 = mova2i( substr[in,$LIS_E5 + $bitcnt_S13:1] )
   50.                   $itmp_S12 = or( $t_S7, _lsh( $itmp_S12, 8 ) )
   53.                   $bitcnt_S13 = 1 + $bitcnt_S13
   49.                   $Induc01_S14 = -8 + $Induc01_S14
   50.                   if ( $Induc01_S14 <= 0 ) exit
   50.                enddo
   52.                $index_S16 = ( _ash( $CS_PRT_4, 3 ) + 2 + $Trips01_N1 )
   51.                $bitcnt_S15 = $LIS_E2 - _lsh( $Trips01_N1, 3 ) + ( min( $CARG_nbyte_I1, and( -8, $CS_PRT_4 ) + 8 - $PRT_P6 ) )
   51.             endif
   56.             if ( $bitcnt_S15 > 0 ) then
   57.                $t_S9 = mova2i( substr[in,-1 + $index_S16:1] )
   57.                if ( or( 8 - $bitcnt_S15, -1 + $bitcnt_S15 ) < 0 ) then
   57.                   $LB_Y0 = 1
   57.                   $UB_Y1 = 8
   57.                   $Subscript_Y5 = $bitcnt_S15
   57.                   _bounds_error( $_File_Y40, $Line_Y45, $_Name_Y44, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y46 )
   57.                endif
   57.                $LCS_bitcnt_11 = -8 + $bitcnt_S15
   57.                $LCS_10 = abs( $LCS_bitcnt_11 )
   57.                $LCS_12 = abs( $bitcnt_S15 )
   57.                $itmp_S12 = or( and( -1[$LIS_E1,$bitcnt_S15], cvmg( lshift( $t_S9, $LCS_10 ), rshift( $t_S9, $LCS_10 ), $LCS_bitcnt_11 > 0 ) ), cvmg( lshift( $itmp_S12, $LCS_12 ), rshift( $itmp_S12, $LCS_12 ), $bitcnt_S15 > 0 ) )
   57.             endif
   61.             0[loc( iout ),$I_L35_S17] = $itmp_S12
   43.             $SR_S11 = $LIS_E4 + $SR_S11
   62.             $I_L35_S17 = 1 + $I_L35_S17
   59.             if ( $I_L35_S17 >= $LIS_E3 ) exit
   59.          enddo
   59.       endif
   65.       return
   65.       end
   65.       
   67.       
   67.       subroutine sbytesc( out, in, iskip, nbyte, nskip, n )
   67.       $CARG_iskip_I0 = 0[loc( iskip ),0]
   67.       $CARG_nbyte_I1 = 0[loc( nbyte ),0]
   67.       $CARG_nskip_I2 = 0[loc( nskip ),0]
   67.       $CARG_n_I3 = 0[loc( n ),0]
   88.       if ( $CARG_n_I3 > 0 ) then
   88.          $I_L88_S11 = 0
   91.          $SR_S12 = -1 + ( $CARG_iskip_I0 + $CARG_nbyte_I1 )
   91.          $LIS_E4 = ( $CARG_nbyte_I1 + $CARG_nskip_I2 )
  124.          $LIS_E3 = $CARG_n_I3
   98.          $LIS_E2 = loc( ones )
   98.          do
   89.             $itmp_S13 = 0[loc( in ),$I_L88_S11]
   90.             $bitcnt_S14 = $CARG_nbyte_I1
   91.             $PRT_P7 = $SR_S12
   91.             $CS_PRT_3 = $PRT_P7 + _rsh( _ash( $PRT_P7, 2 ), 29 )
   91.             $index_S15 = 1 + _ash( $CS_PRT_3, 3 )
   96.             $LCS_PRT_1 = $PRT_P7 - and( -8, $CS_PRT_3 )
   96.             if ( $LCS_PRT_1 /= 7 ) then
   98.                $LCS_2 = min( $CARG_nbyte_I1, 1 + $LCS_PRT_1 )
   98.                $CS_0 = or( -1 + $LCS_2, 8 - $LCS_2 ) >= 0
   98.                if ( $CS_0 == .false. ) then
   98.                   $LB_Y0 = 1
   98.                   $UB_Y1 = 8
   98.                   $Subscript_Y5 = $LCS_2
   98.                   _bounds_error( $_File_Y40, $Line_Y45, $_Name_Y44, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y46 )
   98.                endif
   98.                $LCS_3 = min( $CARG_nbyte_I1, 1 + $PRT_P7 - and( -8, $CS_PRT_3 ) )
   98.                if ( or( -1 + $LCS_3, 8 - $LCS_3 ) < 0 ) then
   98.                   $LB_Y0 = 1
   98.                   $UB_Y1 = 8
   98.                   $Subscript_Y5 = $LCS_3
   98.                   _bounds_error( $_File_Y40, $Line_Y45, $_Name_Y44, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y46 )
   98.                endif
   98.                $LCS_PRT_4 = $PRT_P7 - and( -8, $CS_PRT_3 )
   98.                $LCS_ones_5 = -1[$LIS_E2,min( $CARG_nbyte_I1, 1 + $LCS_PRT_4 )]
   98.                $LCS_7_7 = 7 - $LCS_PRT_4
   98.                $LCS_6 = abs( $LCS_7_7 )
   98.                $imask_S4 = cvmg( lshift( $LCS_ones_5, $LCS_6 ), rshift( $LCS_ones_5, $LCS_6 ), $LCS_7_7 > 0 )
  100.                $t_S5 = mova2i( substr[out,_ash( $CS_PRT_3, 3 ):1] )
  101.                $LCS_PRT_11 = $PRT_P7 - and( -8, $CS_PRT_3 )
  101.                $LCS_7_10 = 7 - $LCS_PRT_11
  101.                $LCS_9 = abs( $LCS_7_10 )
  101.                substr[out,_ash( $SR_S12 + _rsh( _ash( $SR_S12, 2 ), 61 ), 3 ):1] = character*1( or( and( $imask_S4, cvmg( lshift( $itmp_S13, $LCS_9 ), rshift( $itmp_S13, $LCS_9 ), $LCS_7_10 > 0 ) ), and( $t_S5, 255 - $imask_S4 ) ) )
  102.                $LCS_13 = min( $CARG_nbyte_I1, 1 + $LCS_PRT_11 )
  102.                $bitcnt_S14 = $CARG_nbyte_I1 - $LCS_13
  104.                $index_S15 = _ash( $CS_PRT_3, 3 )
  103.                $LCS_14 = abs( $LCS_13 )
  103.                $itmp_S13 = cvmg( lshift( $itmp_S13, $LCS_14 ), rshift( $itmp_S13, $LCS_14 ), $LCS_13 < 0 )
  103.             endif
  110.             if ( $bitcnt_S14 >= 8 ) then
  110.                $bitcnt_S17 = 0
  111.                $SR_S16 = 0
  111.                $LIS_E6 = ( -1 + $index_S15 )
  110.                $Induc01_S18 = -7 + $bitcnt_S14
  110.                do
  111.                   substr[out,$LIS_E6 - $bitcnt_S17:1] = character*1( and( 255, _rsh( $itmp_S13, $SR_S16 ) ) )
  111.                   $SR_S16 = 8 + $SR_S16
  115.                   $bitcnt_S17 = 1 + $bitcnt_S17
  110.                   $Induc01_S18 = -8 + $Induc01_S18
  110.                   if ( $Induc01_S18 <= 0 ) exit
  110.                enddo
  114.                $LCS_15 = $bitcnt_S14
  114.                $index_S15 = $index_S15 - _ash( $LCS_15 + _rsh( _ash( $bitcnt_S14, 2 ), 61 ), 3 )
  112.                $LCS_16 = _lsh( _ash( $bitcnt_S14 + _rsh( _ash( $bitcnt_S14, 2 ), 29 ), 3 ), 3 )
  112.                $itmp_S13 = _rsh( $itmp_S13, $LCS_16 )
  113.                $bitcnt_S14 = $LCS_15 - $LCS_16
  113.             endif
  119.             if ( $bitcnt_S14 > 0 ) then
  120.                $CS_4 = or( 8 - $bitcnt_S14, -1 + $bitcnt_S14 ) >= 0
  120.                if ( $CS_4 == .false. ) then
  120.                   $LB_Y0 = 1
  120.                   $UB_Y1 = 8
  120.                   $Subscript_Y5 = $bitcnt_S14
  120.                   _bounds_error( $_File_Y40, $Line_Y49, $_Name_Y48, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y50 )
  120.                endif
  120.                $MR_ones_S19 = -1[$LIS_E2,$bitcnt_S14]
  120.                $itmp2_S10 = and( $itmp_S13, $MR_ones_S19 )
  121.                $t_S8 = mova2i( substr[out,-1 + $index_S15:1] )
  121.                if ( $CS_4 == .false. ) then
  121.                   $LB_Y0 = 1
  121.                   $UB_Y1 = 8
  121.                   $Subscript_Y5 = $bitcnt_S14
  121.                   _bounds_error( $_File_Y40, $Line_Y51, $_Name_Y48, $Dim_Y8, $LB_Y0, $UB_Y1, $Subscript_Y5, $Err_count_Y52 )
  121.                endif
  121.                $MR_ones_S20 = -1[$LIS_E2,$bitcnt_S14]
  121.                $itmp3_S9 = and( $t_S8, 255 - $MR_ones_S20 )
  122.                substr[out,-1 + $index_S15:1] = character*1( or( $itmp3_S9, $itmp2_S10 ) )
  122.             endif
   91.             $SR_S12 = $LIS_E4 + $SR_S12
  124.             $I_L88_S11 = 1 + $I_L88_S11
  123.             if ( $I_L88_S11 >= $LIS_E3 ) exit
  123.          enddo
  123.       endif
  127.       return
  127.       end
  127.       
